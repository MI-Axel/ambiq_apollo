
hello_fault_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b08  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  00011b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10001000  00001b08  00021000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011b08  2**0
                  CONTENTS, READONLY
  5 .debug_info   000048f1  00000000  00000000  00011b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017e9  00000000  00000000  00016430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000570  00000000  00000000  00017c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000820  00000000  00000000  00018189  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d71  00000000  00000000  000189a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c0a  00000000  00000000  0001b71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0001d324  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000d44  00000000  00000000  0001d3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000e1f  00000000  00000000  0001e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 e1 01 00 00 49 02 00 00 89 02 00 00     ........I.......
      10:	89 02 00 00 89 02 00 00 89 02 00 00 00 00 00 00     ................
	...
      2c:	4f 02 00 00 4f 02 00 00 00 00 00 00 4f 02 00 00     O...O.......O...
      3c:	4f 02 00 00 4f 02 00 00 4f 02 00 00 4f 02 00 00     O...O...O...O...
      4c:	4f 02 00 00 4f 02 00 00 4f 02 00 00 4f 02 00 00     O...O...O...O...
      5c:	4f 02 00 00 4f 02 00 00 4f 02 00 00 4f 02 00 00     O...O...O...O...
      6c:	4f 02 00 00 4f 02 00 00 4f 02 00 00 4f 02 00 00     O...O...O...O...
      7c:	4f 02 00 00                                         O...

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <force_fault>:
//! @return None.
//
//*****************************************************************************
void
force_fault(void)
{
     120:	b480      	push	{r7}
     122:	b083      	sub	sp, #12
     124:	af00      	add	r7, sp, #0
    uint32_t *pCauseFault;
    volatile uint32_t uVal;

    pCauseFault = (uint32_t*)ILLEGAL_SRAM_ADDR;
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <force_fault+0x20>)
     128:	607b      	str	r3, [r7, #4]
    uVal = *pCauseFault;
     12a:	687b      	ldr	r3, [r7, #4]
     12c:	681b      	ldr	r3, [r3, #0]
     12e:	603b      	str	r3, [r7, #0]

    //
    // Use the variable uVal in order to avoid a warning from some compilers.
    // However, the fault will prevent us from getting here.
    //
    pCauseFault = (uint32_t*)uVal;
     130:	683b      	ldr	r3, [r7, #0]
     132:	607b      	str	r3, [r7, #4]
}
     134:	bf00      	nop
     136:	370c      	adds	r7, #12
     138:	46bd      	mov	sp, r7
     13a:	f85d 7b04 	ldr.w	r7, [sp], #4
     13e:	4770      	bx	lr
     140:	10100000 	.word	0x10100000

00000144 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     144:	b580      	push	{r7, lr}
     146:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     148:	2000      	movs	r0, #0
     14a:	f001 f915 	bl	1378 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     14e:	f001 f8ab 	bl	12a8 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     152:	481b      	ldr	r0, [pc, #108]	; (1c0 <main+0x7c>)
     154:	f000 f9fc 	bl	550 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     158:	4b1a      	ldr	r3, [pc, #104]	; (1c4 <main+0x80>)
     15a:	2273      	movs	r2, #115	; 0x73
     15c:	601a      	str	r2, [r3, #0]
     15e:	4a1a      	ldr	r2, [pc, #104]	; (1c8 <main+0x84>)
     160:	4b19      	ldr	r3, [pc, #100]	; (1c8 <main+0x84>)
     162:	681b      	ldr	r3, [r3, #0]
     164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     168:	6013      	str	r3, [r2, #0]
     16a:	4a18      	ldr	r2, [pc, #96]	; (1cc <main+0x88>)
     16c:	4b17      	ldr	r3, [pc, #92]	; (1cc <main+0x88>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     178:	6013      	str	r3, [r2, #0]
     17a:	4b12      	ldr	r3, [pc, #72]	; (1c4 <main+0x80>)
     17c:	2200      	movs	r2, #0
     17e:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     180:	f001 f924 	bl	13cc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     184:	f001 f8a2 	bl	12cc <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     188:	f001 f884 	bl	1294 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello Fault.\n\n");
     18c:	4810      	ldr	r0, [pc, #64]	; (1d0 <main+0x8c>)
     18e:	f001 f863 	bl	1258 <am_util_stdio_printf>

    //
    // Print a message about the forthcoming hard fault.
    //
    am_util_stdio_printf(""
     192:	4810      	ldr	r0, [pc, #64]	; (1d4 <main+0x90>)
     194:	f001 f860 	bl	1258 <am_util_stdio_printf>
        "An illegal memory access will occur next, which will execute the\n"
        "extended fault handler to assist in decoding the fault.\n");
    am_util_stdio_printf("\n"
     198:	480f      	ldr	r0, [pc, #60]	; (1d8 <main+0x94>)
     19a:	f001 f85d 	bl	1258 <am_util_stdio_printf>
        "In order to print out the fault information for this example\n"
        "a macro, AM_UTIL_FAULTISR_PRINT, has been defined in the build\n"
        "environment.  Otherwise the fault data can only be examined\n"
        "directly in the ISR from a debugger.\n"
        "\n");
    am_util_stdio_printf(""
     19e:	480f      	ldr	r0, [pc, #60]	; (1dc <main+0x98>)
     1a0:	f001 f85a 	bl	1258 <am_util_stdio_printf>
        "\n");

    //
    // Give the above print statements time to complete.
    //
    am_util_delay_ms(10);
     1a4:	200a      	movs	r0, #10
     1a6:	f000 f855 	bl	254 <am_util_delay_ms>

    //
    // Enable the Apollo2 Fault detection.
    //
    am_hal_mcuctrl_fault_capture_enable();
     1aa:	f001 f96b 	bl	1484 <am_hal_mcuctrl_fault_capture_enable>
    //
    // Force an invalid memory address fault.
    // This function will not return, so anything after it
    //  will not be executed.
    //
    force_fault();
     1ae:	f7ff ffb7 	bl	120 <force_fault>

    //
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     1b2:	f001 f8b7 	bl	1324 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     1b6:	2001      	movs	r0, #1
     1b8:	f001 f9c4 	bl	1544 <am_hal_sysctrl_sleep>
     1bc:	e7fb      	b.n	1b6 <main+0x72>
     1be:	bf00      	nop
     1c0:	00001375 	.word	0x00001375
     1c4:	40010060 	.word	0x40010060
     1c8:	40010054 	.word	0x40010054
     1cc:	40010028 	.word	0x40010028
     1d0:	00001640 	.word	0x00001640
     1d4:	00001650 	.word	0x00001650
     1d8:	000016cc 	.word	0x000016cc
     1dc:	000017ac 	.word	0x000017ac

000001e0 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     1e0:	4811      	ldr	r0, [pc, #68]	; (228 <zero_loop+0x12>)
     1e2:	4912      	ldr	r1, [pc, #72]	; (22c <zero_loop+0x16>)
     1e4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     1e6:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     1ea:	4811      	ldr	r0, [pc, #68]	; (230 <zero_loop+0x1a>)
     1ec:	6801      	ldr	r1, [r0, #0]
     1ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     1f2:	6001      	str	r1, [r0, #0]
     1f4:	f3bf 8f4f 	dsb	sy
     1f8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     1fc:	480d      	ldr	r0, [pc, #52]	; (234 <zero_loop+0x1e>)
     1fe:	490e      	ldr	r1, [pc, #56]	; (238 <zero_loop+0x22>)
     200:	4a0e      	ldr	r2, [pc, #56]	; (23c <zero_loop+0x26>)

00000202 <copy_loop>:
     202:	f850 3b04 	ldr.w	r3, [r0], #4
     206:	f841 3b04 	str.w	r3, [r1], #4
     20a:	4291      	cmp	r1, r2
     20c:	dbf9      	blt.n	202 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     20e:	480c      	ldr	r0, [pc, #48]	; (240 <zero_loop+0x2a>)
     210:	490c      	ldr	r1, [pc, #48]	; (244 <zero_loop+0x2e>)
     212:	f04f 0200 	mov.w	r2, #0

00000216 <zero_loop>:
     216:	4288      	cmp	r0, r1
     218:	bfb8      	it	lt
     21a:	f840 2b04 	strlt.w	r2, [r0], #4
     21e:	dbfa      	blt.n	216 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     220:	f7ff ff90 	bl	144 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     224:	be00      	bkpt	0x0000
}
     226:	bf00      	nop
     228:	e000ed08 	.word	0xe000ed08
     22c:	00000000 	.word	0x00000000
     230:	e000ed88 	.word	0xe000ed88
     234:	00001b08 	.word	0x00001b08
     238:	10001000 	.word	0x10001000
     23c:	10001000 	.word	0x10001000
     240:	10001000 	.word	0x10001000
     244:	1000110c 	.word	0x1000110c

00000248 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     248:	b480      	push	{r7}
     24a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     24c:	e7fe      	b.n	24c <am_nmi_isr+0x4>

0000024e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     24e:	b480      	push	{r7}
     250:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     252:	e7fe      	b.n	252 <am_adc_isr+0x4>

00000254 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     254:	b580      	push	{r7, lr}
     256:	b084      	sub	sp, #16
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     25c:	f001 f89c 	bl	1398 <am_hal_clkgen_sysclk_get>
     260:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     262:	68fb      	ldr	r3, [r7, #12]
     264:	4a07      	ldr	r2, [pc, #28]	; (284 <am_util_delay_ms+0x30>)
     266:	fba2 2303 	umull	r2, r3, r2, r3
     26a:	099b      	lsrs	r3, r3, #6
     26c:	687a      	ldr	r2, [r7, #4]
     26e:	fb02 f303 	mul.w	r3, r2, r3
     272:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     274:	68b8      	ldr	r0, [r7, #8]
     276:	f001 f8a5 	bl	13c4 <am_hal_flash_delay>
}
     27a:	bf00      	nop
     27c:	3710      	adds	r7, #16
     27e:	46bd      	mov	sp, r7
     280:	bd80      	pop	{r7, pc}
     282:	bf00      	nop
     284:	057619f1 	.word	0x057619f1

00000288 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     288:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     28a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     28c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     28e:	f000 f809 	bl	2a4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     292:	bd01      	pop	{r0, pc}
}
     294:	bf00      	nop
     296:	4618      	mov	r0, r3

00000298 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     298:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     29a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     29c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     29e:	4770      	bx	lr
}
     2a0:	bf00      	nop
     2a2:	4618      	mov	r0, r3

000002a4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b096      	sub	sp, #88	; 0x58
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     2ac:	f107 030c 	add.w	r3, r7, #12
     2b0:	2200      	movs	r2, #0
     2b2:	601a      	str	r2, [r3, #0]
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	609a      	str	r2, [r3, #8]
     2b8:	60da      	str	r2, [r3, #12]
     2ba:	611a      	str	r2, [r3, #16]
     2bc:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     2be:	2300      	movs	r3, #0
     2c0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     2c6:	4b85      	ldr	r3, [pc, #532]	; (4dc <am_util_faultisr_collect_data+0x238>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     2ce:	b2db      	uxtb	r3, r3
     2d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     2d6:	0a1b      	lsrs	r3, r3, #8
     2d8:	b2db      	uxtb	r3, r3
     2da:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     2e0:	0c1b      	lsrs	r3, r3, #16
     2e2:	b29b      	uxth	r3, r3
     2e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     2e8:	4b7d      	ldr	r3, [pc, #500]	; (4e0 <am_util_faultisr_collect_data+0x23c>)
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     2ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     2f2:	b2db      	uxtb	r3, r3
     2f4:	f003 0302 	and.w	r3, r3, #2
     2f8:	2b00      	cmp	r3, #0
     2fa:	d005      	beq.n	308 <am_util_faultisr_collect_data+0x64>
     2fc:	6879      	ldr	r1, [r7, #4]
     2fe:	2006      	movs	r0, #6
     300:	f7ff ffca 	bl	298 <getStackedReg>
     304:	4603      	mov	r3, r0
     306:	e001      	b.n	30c <am_util_faultisr_collect_data+0x68>
     308:	f04f 33ff 	mov.w	r3, #4294967295
     30c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     30e:	6879      	ldr	r1, [r7, #4]
     310:	2000      	movs	r0, #0
     312:	f7ff ffc1 	bl	298 <getStackedReg>
     316:	4603      	mov	r3, r0
     318:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     31a:	6879      	ldr	r1, [r7, #4]
     31c:	2001      	movs	r0, #1
     31e:	f7ff ffbb 	bl	298 <getStackedReg>
     322:	4603      	mov	r3, r0
     324:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     326:	6879      	ldr	r1, [r7, #4]
     328:	2002      	movs	r0, #2
     32a:	f7ff ffb5 	bl	298 <getStackedReg>
     32e:	4603      	mov	r3, r0
     330:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     332:	6879      	ldr	r1, [r7, #4]
     334:	2003      	movs	r0, #3
     336:	f7ff ffaf 	bl	298 <getStackedReg>
     33a:	4603      	mov	r3, r0
     33c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     33e:	6879      	ldr	r1, [r7, #4]
     340:	2004      	movs	r0, #4
     342:	f7ff ffa9 	bl	298 <getStackedReg>
     346:	4603      	mov	r3, r0
     348:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     34a:	6879      	ldr	r1, [r7, #4]
     34c:	2005      	movs	r0, #5
     34e:	f7ff ffa3 	bl	298 <getStackedReg>
     352:	4603      	mov	r3, r0
     354:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     356:	6879      	ldr	r1, [r7, #4]
     358:	2006      	movs	r0, #6
     35a:	f7ff ff9d 	bl	298 <getStackedReg>
     35e:	4603      	mov	r3, r0
     360:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     362:	6879      	ldr	r1, [r7, #4]
     364:	2007      	movs	r0, #7
     366:	f7ff ff97 	bl	298 <getStackedReg>
     36a:	4603      	mov	r3, r0
     36c:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     36e:	f107 030c 	add.w	r3, r7, #12
     372:	4618      	mov	r0, r3
     374:	f001 f88e 	bl	1494 <am_hal_mcuctrl_fault_status>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
     378:	485a      	ldr	r0, [pc, #360]	; (4e4 <am_util_faultisr_collect_data+0x240>)
     37a:	f000 ff6d 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
     37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     380:	4619      	mov	r1, r3
     382:	4859      	ldr	r0, [pc, #356]	; (4e8 <am_util_faultisr_collect_data+0x244>)
     384:	f000 ff68 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
     388:	6abb      	ldr	r3, [r7, #40]	; 0x28
     38a:	4619      	mov	r1, r3
     38c:	4857      	ldr	r0, [pc, #348]	; (4ec <am_util_faultisr_collect_data+0x248>)
     38e:	f000 ff63 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
     392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     394:	4619      	mov	r1, r3
     396:	4856      	ldr	r0, [pc, #344]	; (4f0 <am_util_faultisr_collect_data+0x24c>)
     398:	f000 ff5e 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
     39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     39e:	4619      	mov	r1, r3
     3a0:	4854      	ldr	r0, [pc, #336]	; (4f4 <am_util_faultisr_collect_data+0x250>)
     3a2:	f000 ff59 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
     3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     3a8:	4619      	mov	r1, r3
     3aa:	4853      	ldr	r0, [pc, #332]	; (4f8 <am_util_faultisr_collect_data+0x254>)
     3ac:	f000 ff54 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
     3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     3b2:	4619      	mov	r1, r3
     3b4:	4851      	ldr	r0, [pc, #324]	; (4fc <am_util_faultisr_collect_data+0x258>)
     3b6:	f000 ff4f 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
     3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     3bc:	4619      	mov	r1, r3
     3be:	4850      	ldr	r0, [pc, #320]	; (500 <am_util_faultisr_collect_data+0x25c>)
     3c0:	f000 ff4a 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
     3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     3c6:	4619      	mov	r1, r3
     3c8:	484e      	ldr	r0, [pc, #312]	; (504 <am_util_faultisr_collect_data+0x260>)
     3ca:	f000 ff45 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
     3ce:	484e      	ldr	r0, [pc, #312]	; (508 <am_util_faultisr_collect_data+0x264>)
     3d0:	f000 ff42 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
     3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     3d6:	4619      	mov	r1, r3
     3d8:	484c      	ldr	r0, [pc, #304]	; (50c <am_util_faultisr_collect_data+0x268>)
     3da:	f000 ff3d 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
     3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     3e0:	4619      	mov	r1, r3
     3e2:	484b      	ldr	r0, [pc, #300]	; (510 <am_util_faultisr_collect_data+0x26c>)
     3e4:	f000 ff38 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
     3e8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
     3ec:	b2db      	uxtb	r3, r3
     3ee:	4619      	mov	r1, r3
     3f0:	4848      	ldr	r0, [pc, #288]	; (514 <am_util_faultisr_collect_data+0x270>)
     3f2:	f000 ff31 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
     3f6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     3fa:	b2db      	uxtb	r3, r3
     3fc:	4619      	mov	r1, r3
     3fe:	4846      	ldr	r0, [pc, #280]	; (518 <am_util_faultisr_collect_data+0x274>)
     400:	f000 ff2a 	bl	1258 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
     404:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
     408:	b29b      	uxth	r3, r3
     40a:	4619      	mov	r1, r3
     40c:	4843      	ldr	r0, [pc, #268]	; (51c <am_util_faultisr_collect_data+0x278>)
     40e:	f000 ff23 	bl	1258 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
     412:	2380      	movs	r3, #128	; 0x80
     414:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
     416:	e03f      	b.n	498 <am_util_faultisr_collect_data+0x1f4>
    {
        switch (sFaultData.u8BFSR & u32Mask)
     418:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     41c:	b2db      	uxtb	r3, r3
     41e:	461a      	mov	r2, r3
     420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     422:	4013      	ands	r3, r2
     424:	2b08      	cmp	r3, #8
     426:	d024      	beq.n	472 <am_util_faultisr_collect_data+0x1ce>
     428:	2b08      	cmp	r3, #8
     42a:	d806      	bhi.n	43a <am_util_faultisr_collect_data+0x196>
     42c:	2b02      	cmp	r3, #2
     42e:	d028      	beq.n	482 <am_util_faultisr_collect_data+0x1de>
     430:	2b04      	cmp	r3, #4
     432:	d022      	beq.n	47a <am_util_faultisr_collect_data+0x1d6>
     434:	2b01      	cmp	r3, #1
     436:	d028      	beq.n	48a <am_util_faultisr_collect_data+0x1e6>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
     438:	e02b      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
        switch (sFaultData.u8BFSR & u32Mask)
     43a:	2b20      	cmp	r3, #32
     43c:	d011      	beq.n	462 <am_util_faultisr_collect_data+0x1be>
     43e:	2b20      	cmp	r3, #32
     440:	d802      	bhi.n	448 <am_util_faultisr_collect_data+0x1a4>
     442:	2b10      	cmp	r3, #16
     444:	d011      	beq.n	46a <am_util_faultisr_collect_data+0x1c6>
                break;
     446:	e024      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
        switch (sFaultData.u8BFSR & u32Mask)
     448:	2b40      	cmp	r3, #64	; 0x40
     44a:	d006      	beq.n	45a <am_util_faultisr_collect_data+0x1b6>
     44c:	2b80      	cmp	r3, #128	; 0x80
     44e:	d000      	beq.n	452 <am_util_faultisr_collect_data+0x1ae>
                break;
     450:	e01f      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
     452:	4833      	ldr	r0, [pc, #204]	; (520 <am_util_faultisr_collect_data+0x27c>)
     454:	f000 ff00 	bl	1258 <am_util_stdio_printf>
                break;
     458:	e01b      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
     45a:	4832      	ldr	r0, [pc, #200]	; (524 <am_util_faultisr_collect_data+0x280>)
     45c:	f000 fefc 	bl	1258 <am_util_stdio_printf>
                break;
     460:	e017      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
     462:	4831      	ldr	r0, [pc, #196]	; (528 <am_util_faultisr_collect_data+0x284>)
     464:	f000 fef8 	bl	1258 <am_util_stdio_printf>
                break;
     468:	e013      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
     46a:	4830      	ldr	r0, [pc, #192]	; (52c <am_util_faultisr_collect_data+0x288>)
     46c:	f000 fef4 	bl	1258 <am_util_stdio_printf>
                break;
     470:	e00f      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
     472:	482f      	ldr	r0, [pc, #188]	; (530 <am_util_faultisr_collect_data+0x28c>)
     474:	f000 fef0 	bl	1258 <am_util_stdio_printf>
                break;
     478:	e00b      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
     47a:	482e      	ldr	r0, [pc, #184]	; (534 <am_util_faultisr_collect_data+0x290>)
     47c:	f000 feec 	bl	1258 <am_util_stdio_printf>
                break;
     480:	e007      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
     482:	482d      	ldr	r0, [pc, #180]	; (538 <am_util_faultisr_collect_data+0x294>)
     484:	f000 fee8 	bl	1258 <am_util_stdio_printf>
                break;
     488:	e003      	b.n	492 <am_util_faultisr_collect_data+0x1ee>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
     48a:	482c      	ldr	r0, [pc, #176]	; (53c <am_util_faultisr_collect_data+0x298>)
     48c:	f000 fee4 	bl	1258 <am_util_stdio_printf>
                break;
     490:	bf00      	nop
        }
        u32Mask >>= 1;
     492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     494:	085b      	lsrs	r3, r3, #1
     496:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
     498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     49a:	2b00      	cmp	r3, #0
     49c:	d1bc      	bne.n	418 <am_util_faultisr_collect_data+0x174>
    }

    //
    // Print out any Apollo2 Internal fault information.
    //
    am_util_stdio_printf("Apollo2 Fault data:\n");
     49e:	4828      	ldr	r0, [pc, #160]	; (540 <am_util_faultisr_collect_data+0x29c>)
     4a0:	f000 feda 	bl	1258 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
     4a4:	7b3b      	ldrb	r3, [r7, #12]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d004      	beq.n	4b4 <am_util_faultisr_collect_data+0x210>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
     4aa:	693b      	ldr	r3, [r7, #16]
     4ac:	4619      	mov	r1, r3
     4ae:	4825      	ldr	r0, [pc, #148]	; (544 <am_util_faultisr_collect_data+0x2a0>)
     4b0:	f000 fed2 	bl	1258 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
     4b4:	7d3b      	ldrb	r3, [r7, #20]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d004      	beq.n	4c4 <am_util_faultisr_collect_data+0x220>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
     4ba:	69bb      	ldr	r3, [r7, #24]
     4bc:	4619      	mov	r1, r3
     4be:	4822      	ldr	r0, [pc, #136]	; (548 <am_util_faultisr_collect_data+0x2a4>)
     4c0:	f000 feca 	bl	1258 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
     4c4:	7f3b      	ldrb	r3, [r7, #28]
     4c6:	2b00      	cmp	r3, #0
     4c8:	d004      	beq.n	4d4 <am_util_faultisr_collect_data+0x230>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
     4ca:	6a3b      	ldr	r3, [r7, #32]
     4cc:	4619      	mov	r1, r3
     4ce:	481f      	ldr	r0, [pc, #124]	; (54c <am_util_faultisr_collect_data+0x2a8>)
     4d0:	f000 fec2 	bl	1258 <am_util_stdio_printf>
    }


#endif

    u32Mask = 0;
     4d4:	2300      	movs	r3, #0
     4d6:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     4d8:	e7fe      	b.n	4d8 <am_util_faultisr_collect_data+0x234>
     4da:	bf00      	nop
     4dc:	e000ed28 	.word	0xe000ed28
     4e0:	e000ed38 	.word	0xe000ed38
     4e4:	000017c8 	.word	0x000017c8
     4e8:	000017e4 	.word	0x000017e4
     4ec:	000017f8 	.word	0x000017f8
     4f0:	0000180c 	.word	0x0000180c
     4f4:	00001820 	.word	0x00001820
     4f8:	00001834 	.word	0x00001834
     4fc:	00001848 	.word	0x00001848
     500:	0000185c 	.word	0x0000185c
     504:	00001870 	.word	0x00001870
     508:	00001884 	.word	0x00001884
     50c:	0000189c 	.word	0x0000189c
     510:	000018b8 	.word	0x000018b8
     514:	000018e0 	.word	0x000018e0
     518:	00001910 	.word	0x00001910
     51c:	0000193c 	.word	0x0000193c
     520:	00001968 	.word	0x00001968
     524:	00001988 	.word	0x00001988
     528:	000019a8 	.word	0x000019a8
     52c:	000019c4 	.word	0x000019c4
     530:	000019e0 	.word	0x000019e0
     534:	00001a00 	.word	0x00001a00
     538:	00001a20 	.word	0x00001a20
     53c:	00001a40 	.word	0x00001a40
     540:	00001a5c 	.word	0x00001a5c
     544:	00001a74 	.word	0x00001a74
     548:	00001a94 	.word	0x00001a94
     54c:	00001ab4 	.word	0x00001ab4

00000550 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     550:	b480      	push	{r7}
     552:	b083      	sub	sp, #12
     554:	af00      	add	r7, sp, #0
     556:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     558:	4a04      	ldr	r2, [pc, #16]	; (56c <am_util_stdio_printf_init+0x1c>)
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	6013      	str	r3, [r2, #0]
}
     55e:	bf00      	nop
     560:	370c      	adds	r7, #12
     562:	46bd      	mov	sp, r7
     564:	f85d 7b04 	ldr.w	r7, [sp], #4
     568:	4770      	bx	lr
     56a:	bf00      	nop
     56c:	10001108 	.word	0x10001108

00000570 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     570:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     574:	b096      	sub	sp, #88	; 0x58
     576:	af00      	add	r7, sp, #0
     578:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     57c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     580:	0025      	movs	r5, r4
     582:	2600      	movs	r6, #0
     584:	ea55 0306 	orrs.w	r3, r5, r6
     588:	f000 80a0 	beq.w	6cc <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     58c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     590:	0862      	lsrs	r2, r4, #1
     592:	ea4f 0133 	mov.w	r1, r3, rrx
     596:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     59a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     59e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     5a2:	ea4f 0994 	mov.w	r9, r4, lsr #2
     5a6:	eb11 0308 	adds.w	r3, r1, r8
     5aa:	eb42 0409 	adc.w	r4, r2, r9
     5ae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     5b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5b6:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     5ba:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     5be:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     5c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5c6:	eb13 030a 	adds.w	r3, r3, sl
     5ca:	eb44 040b 	adc.w	r4, r4, fp
     5ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5d6:	0a1a      	lsrs	r2, r3, #8
     5d8:	62ba      	str	r2, [r7, #40]	; 0x28
     5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5dc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     5e0:	62ba      	str	r2, [r7, #40]	; 0x28
     5e2:	0a23      	lsrs	r3, r4, #8
     5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
     5e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     5ee:	18c9      	adds	r1, r1, r3
     5f0:	eb42 0204 	adc.w	r2, r2, r4
     5f4:	460b      	mov	r3, r1
     5f6:	4614      	mov	r4, r2
     5f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     5fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     600:	0c1a      	lsrs	r2, r3, #16
     602:	623a      	str	r2, [r7, #32]
     604:	6a3a      	ldr	r2, [r7, #32]
     606:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     60a:	623a      	str	r2, [r7, #32]
     60c:	0c23      	lsrs	r3, r4, #16
     60e:	627b      	str	r3, [r7, #36]	; 0x24
     610:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     614:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     618:	18c9      	adds	r1, r1, r3
     61a:	eb42 0204 	adc.w	r2, r2, r4
     61e:	460b      	mov	r3, r1
     620:	4614      	mov	r4, r2
     622:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     626:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     62a:	0023      	movs	r3, r4
     62c:	603b      	str	r3, [r7, #0]
     62e:	2300      	movs	r3, #0
     630:	607b      	str	r3, [r7, #4]
     632:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     636:	e897 0006 	ldmia.w	r7, {r1, r2}
     63a:	18c9      	adds	r1, r1, r3
     63c:	eb42 0204 	adc.w	r2, r2, r4
     640:	460b      	mov	r3, r1
     642:	4614      	mov	r4, r2
     644:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     648:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     64c:	08da      	lsrs	r2, r3, #3
     64e:	613a      	str	r2, [r7, #16]
     650:	693a      	ldr	r2, [r7, #16]
     652:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     656:	613a      	str	r2, [r7, #16]
     658:	08e3      	lsrs	r3, r4, #3
     65a:	617b      	str	r3, [r7, #20]
     65c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     660:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     664:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     668:	460b      	mov	r3, r1
     66a:	4614      	mov	r4, r2
     66c:	00a0      	lsls	r0, r4, #2
     66e:	60f8      	str	r0, [r7, #12]
     670:	68f8      	ldr	r0, [r7, #12]
     672:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     676:	60f8      	str	r0, [r7, #12]
     678:	009b      	lsls	r3, r3, #2
     67a:	60bb      	str	r3, [r7, #8]
     67c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     680:	185b      	adds	r3, r3, r1
     682:	eb44 0402 	adc.w	r4, r4, r2
     686:	18db      	adds	r3, r3, r3
     688:	eb44 0404 	adc.w	r4, r4, r4
     68c:	4619      	mov	r1, r3
     68e:	4622      	mov	r2, r4
     690:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     694:	1a5b      	subs	r3, r3, r1
     696:	eb64 0402 	sbc.w	r4, r4, r2
     69a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     69e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     6a2:	3306      	adds	r3, #6
     6a4:	f144 0400 	adc.w	r4, r4, #0
     6a8:	091a      	lsrs	r2, r3, #4
     6aa:	61ba      	str	r2, [r7, #24]
     6ac:	69ba      	ldr	r2, [r7, #24]
     6ae:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     6b2:	61ba      	str	r2, [r7, #24]
     6b4:	0923      	lsrs	r3, r4, #4
     6b6:	61fb      	str	r3, [r7, #28]
     6b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     6c0:	18c9      	adds	r1, r1, r3
     6c2:	eb42 0204 	adc.w	r2, r2, r4
     6c6:	460b      	mov	r3, r1
     6c8:	4614      	mov	r4, r2
     6ca:	e029      	b.n	720 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6ce:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6d2:	085a      	lsrs	r2, r3, #1
     6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6d6:	089b      	lsrs	r3, r3, #2
     6d8:	4413      	add	r3, r2
     6da:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6de:	091b      	lsrs	r3, r3, #4
     6e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6e2:	4413      	add	r3, r2
     6e4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6e8:	0a1b      	lsrs	r3, r3, #8
     6ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6ec:	4413      	add	r3, r2
     6ee:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6f2:	0c1b      	lsrs	r3, r3, #16
     6f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6f6:	4413      	add	r3, r2
     6f8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6fc:	08db      	lsrs	r3, r3, #3
     6fe:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     702:	4613      	mov	r3, r2
     704:	009b      	lsls	r3, r3, #2
     706:	4413      	add	r3, r2
     708:	005b      	lsls	r3, r3, #1
     70a:	461a      	mov	r2, r3
     70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     70e:	1a9b      	subs	r3, r3, r2
     710:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     714:	3306      	adds	r3, #6
     716:	091a      	lsrs	r2, r3, #4
     718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     71a:	4413      	add	r3, r2
     71c:	f04f 0400 	mov.w	r4, #0
    }
}
     720:	4618      	mov	r0, r3
     722:	4621      	mov	r1, r4
     724:	3758      	adds	r7, #88	; 0x58
     726:	46bd      	mov	sp, r7
     728:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     72c:	4770      	bx	lr

0000072e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     72e:	b590      	push	{r4, r7, lr}
     730:	b085      	sub	sp, #20
     732:	af00      	add	r7, sp, #0
     734:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     738:	683a      	ldr	r2, [r7, #0]
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	4313      	orrs	r3, r2
     73e:	2b00      	cmp	r3, #0
     740:	bf0c      	ite	eq
     742:	2301      	moveq	r3, #1
     744:	2300      	movne	r3, #0
     746:	b2db      	uxtb	r3, r3
     748:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     74a:	e008      	b.n	75e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     74c:	e9d7 0100 	ldrd	r0, r1, [r7]
     750:	f7ff ff0e 	bl	570 <divu64_10>
     754:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	3301      	adds	r3, #1
     75c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     75e:	e897 0018 	ldmia.w	r7, {r3, r4}
     762:	4323      	orrs	r3, r4
     764:	d1f2      	bne.n	74c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     766:	68fb      	ldr	r3, [r7, #12]
}
     768:	4618      	mov	r0, r3
     76a:	3714      	adds	r7, #20
     76c:	46bd      	mov	sp, r7
     76e:	bd90      	pop	{r4, r7, pc}

00000770 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     770:	b590      	push	{r4, r7, lr}
     772:	b083      	sub	sp, #12
     774:	af00      	add	r7, sp, #0
     776:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     77a:	e897 0018 	ldmia.w	r7, {r3, r4}
     77e:	2b00      	cmp	r3, #0
     780:	f174 0300 	sbcs.w	r3, r4, #0
     784:	da06      	bge.n	794 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     786:	e897 0018 	ldmia.w	r7, {r3, r4}
     78a:	425b      	negs	r3, r3
     78c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     790:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     794:	e897 0018 	ldmia.w	r7, {r3, r4}
     798:	4618      	mov	r0, r3
     79a:	4621      	mov	r1, r4
     79c:	f7ff ffc7 	bl	72e <ndigits_in_u64>
     7a0:	4603      	mov	r3, r0
}
     7a2:	4618      	mov	r0, r3
     7a4:	370c      	adds	r7, #12
     7a6:	46bd      	mov	sp, r7
     7a8:	bd90      	pop	{r4, r7, pc}

000007aa <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     7aa:	b490      	push	{r4, r7}
     7ac:	b084      	sub	sp, #16
     7ae:	af00      	add	r7, sp, #0
     7b0:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     7b4:	6839      	ldr	r1, [r7, #0]
     7b6:	687a      	ldr	r2, [r7, #4]
     7b8:	430a      	orrs	r2, r1
     7ba:	2a00      	cmp	r2, #0
     7bc:	bf0c      	ite	eq
     7be:	2201      	moveq	r2, #1
     7c0:	2200      	movne	r2, #0
     7c2:	b2d2      	uxtb	r2, r2
     7c4:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7c6:	e00a      	b.n	7de <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7c8:	e897 0006 	ldmia.w	r7, {r1, r2}
     7cc:	090b      	lsrs	r3, r1, #4
     7ce:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7d2:	0914      	lsrs	r4, r2, #4
     7d4:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     7d8:	68fa      	ldr	r2, [r7, #12]
     7da:	3201      	adds	r2, #1
     7dc:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     7de:	e897 0006 	ldmia.w	r7, {r1, r2}
     7e2:	430a      	orrs	r2, r1
     7e4:	d1f0      	bne.n	7c8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     7e6:	68fb      	ldr	r3, [r7, #12]
}
     7e8:	4618      	mov	r0, r3
     7ea:	3710      	adds	r7, #16
     7ec:	46bd      	mov	sp, r7
     7ee:	bc90      	pop	{r4, r7}
     7f0:	4770      	bx	lr

000007f2 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     7f2:	b480      	push	{r7}
     7f4:	b087      	sub	sp, #28
     7f6:	af00      	add	r7, sp, #0
     7f8:	6078      	str	r0, [r7, #4]
     7fa:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     7fc:	2300      	movs	r3, #0
     7fe:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     800:	2300      	movs	r3, #0
     802:	613b      	str	r3, [r7, #16]
     804:	2300      	movs	r3, #0
     806:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     808:	687b      	ldr	r3, [r7, #4]
     80a:	781b      	ldrb	r3, [r3, #0]
     80c:	2b2d      	cmp	r3, #45	; 0x2d
     80e:	d11b      	bne.n	848 <decstr_to_int+0x56>
    {
        bNeg = true;
     810:	2301      	movs	r3, #1
     812:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     814:	687b      	ldr	r3, [r7, #4]
     816:	3301      	adds	r3, #1
     818:	607b      	str	r3, [r7, #4]
        uCnt++;
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	3301      	adds	r3, #1
     81e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     820:	e012      	b.n	848 <decstr_to_int+0x56>
    {
        ++uCnt;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	3301      	adds	r3, #1
     826:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     828:	693a      	ldr	r2, [r7, #16]
     82a:	4613      	mov	r3, r2
     82c:	009b      	lsls	r3, r3, #2
     82e:	4413      	add	r3, r2
     830:	005b      	lsls	r3, r3, #1
     832:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     834:	687b      	ldr	r3, [r7, #4]
     836:	781b      	ldrb	r3, [r3, #0]
     838:	461a      	mov	r2, r3
     83a:	693b      	ldr	r3, [r7, #16]
     83c:	4413      	add	r3, r2
     83e:	3b30      	subs	r3, #48	; 0x30
     840:	613b      	str	r3, [r7, #16]
        pcStr++;
     842:	687b      	ldr	r3, [r7, #4]
     844:	3301      	adds	r3, #1
     846:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     848:	687b      	ldr	r3, [r7, #4]
     84a:	781b      	ldrb	r3, [r3, #0]
     84c:	2b2f      	cmp	r3, #47	; 0x2f
     84e:	d903      	bls.n	858 <decstr_to_int+0x66>
     850:	687b      	ldr	r3, [r7, #4]
     852:	781b      	ldrb	r3, [r3, #0]
     854:	2b39      	cmp	r3, #57	; 0x39
     856:	d9e4      	bls.n	822 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     858:	683b      	ldr	r3, [r7, #0]
     85a:	2b00      	cmp	r3, #0
     85c:	d002      	beq.n	864 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     85e:	683b      	ldr	r3, [r7, #0]
     860:	68fa      	ldr	r2, [r7, #12]
     862:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     864:	7dfb      	ldrb	r3, [r7, #23]
     866:	2b00      	cmp	r3, #0
     868:	d002      	beq.n	870 <decstr_to_int+0x7e>
     86a:	693b      	ldr	r3, [r7, #16]
     86c:	425b      	negs	r3, r3
     86e:	e000      	b.n	872 <decstr_to_int+0x80>
     870:	693b      	ldr	r3, [r7, #16]
}
     872:	4618      	mov	r0, r3
     874:	371c      	adds	r7, #28
     876:	46bd      	mov	sp, r7
     878:	f85d 7b04 	ldr.w	r7, [sp], #4
     87c:	4770      	bx	lr

0000087e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     87e:	b590      	push	{r4, r7, lr}
     880:	b091      	sub	sp, #68	; 0x44
     882:	af00      	add	r7, sp, #0
     884:	e9c7 0102 	strd	r0, r1, [r7, #8]
     888:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     88a:	2300      	movs	r3, #0
     88c:	63fb      	str	r3, [r7, #60]	; 0x3c
     88e:	2300      	movs	r3, #0
     890:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     896:	f7ff fe6b 	bl	570 <divu64_10>
     89a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     89e:	68b9      	ldr	r1, [r7, #8]
     8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     8a2:	4613      	mov	r3, r2
     8a4:	009b      	lsls	r3, r3, #2
     8a6:	4413      	add	r3, r2
     8a8:	005b      	lsls	r3, r3, #1
     8aa:	1acb      	subs	r3, r1, r3
     8ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8b0:	1c5a      	adds	r2, r3, #1
     8b2:	63fa      	str	r2, [r7, #60]	; 0x3c
     8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     8b6:	b2d2      	uxtb	r2, r2
     8b8:	3230      	adds	r2, #48	; 0x30
     8ba:	b2d2      	uxtb	r2, r2
     8bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
     8c0:	440b      	add	r3, r1
     8c2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8d2:	4323      	orrs	r3, r4
     8d4:	d1dd      	bne.n	892 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8d8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	2b00      	cmp	r3, #0
     8de:	d011      	beq.n	904 <uint64_to_str+0x86>
    {
        while ( ix-- )
     8e0:	e008      	b.n	8f4 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	1c5a      	adds	r2, r3, #1
     8e6:	607a      	str	r2, [r7, #4]
     8e8:	f107 0110 	add.w	r1, r7, #16
     8ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     8ee:	440a      	add	r2, r1
     8f0:	7812      	ldrb	r2, [r2, #0]
     8f2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8f6:	1e5a      	subs	r2, r3, #1
     8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
     8fa:	2b00      	cmp	r3, #0
     8fc:	d1f1      	bne.n	8e2 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	2200      	movs	r2, #0
     902:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     906:	4618      	mov	r0, r3
     908:	3744      	adds	r7, #68	; 0x44
     90a:	46bd      	mov	sp, r7
     90c:	bd90      	pop	{r4, r7, pc}

0000090e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     90e:	b4b0      	push	{r4, r5, r7}
     910:	b08d      	sub	sp, #52	; 0x34
     912:	af00      	add	r7, sp, #0
     914:	e9c7 0102 	strd	r0, r1, [r7, #8]
     918:	607a      	str	r2, [r7, #4]
     91a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     91c:	2300      	movs	r3, #0
     91e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     924:	4313      	orrs	r3, r2
     926:	d131      	bne.n	98c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     92a:	1c5a      	adds	r2, r3, #1
     92c:	62fa      	str	r2, [r7, #44]	; 0x2c
     92e:	f107 0230 	add.w	r2, r7, #48	; 0x30
     932:	4413      	add	r3, r2
     934:	2230      	movs	r2, #48	; 0x30
     936:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     93a:	e027      	b.n	98c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     93c:	7a3b      	ldrb	r3, [r7, #8]
     93e:	f003 030f 	and.w	r3, r3, #15
     942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     94a:	2b09      	cmp	r3, #9
     94c:	d90a      	bls.n	964 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     94e:	78fb      	ldrb	r3, [r7, #3]
     950:	2b00      	cmp	r3, #0
     952:	d001      	beq.n	958 <uint64_to_hexstr+0x4a>
     954:	2227      	movs	r2, #39	; 0x27
     956:	e000      	b.n	95a <uint64_to_hexstr+0x4c>
     958:	2207      	movs	r2, #7
     95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     95e:	4413      	add	r3, r2
     960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     966:	1c5a      	adds	r2, r3, #1
     968:	62fa      	str	r2, [r7, #44]	; 0x2c
     96a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     96e:	3230      	adds	r2, #48	; 0x30
     970:	b2d2      	uxtb	r2, r2
     972:	f107 0130 	add.w	r1, r7, #48	; 0x30
     976:	440b      	add	r3, r1
     978:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     97c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     980:	0914      	lsrs	r4, r2, #4
     982:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     986:	091d      	lsrs	r5, r3, #4
     988:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     98c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     990:	4313      	orrs	r3, r2
     992:	d1d3      	bne.n	93c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     996:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2b00      	cmp	r3, #0
     99c:	d011      	beq.n	9c2 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     99e:	e008      	b.n	9b2 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     9a0:	687b      	ldr	r3, [r7, #4]
     9a2:	1c5a      	adds	r2, r3, #1
     9a4:	607a      	str	r2, [r7, #4]
     9a6:	f107 0110 	add.w	r1, r7, #16
     9aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     9ac:	440a      	add	r2, r1
     9ae:	7812      	ldrb	r2, [r2, #0]
     9b0:	701a      	strb	r2, [r3, #0]
        while (ix--)
     9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9b4:	1e5a      	subs	r2, r3, #1
     9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
     9b8:	2b00      	cmp	r3, #0
     9ba:	d1f1      	bne.n	9a0 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	2200      	movs	r2, #0
     9c0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9c4:	4618      	mov	r0, r3
     9c6:	3734      	adds	r7, #52	; 0x34
     9c8:	46bd      	mov	sp, r7
     9ca:	bcb0      	pop	{r4, r5, r7}
     9cc:	4770      	bx	lr

000009ce <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9ce:	b480      	push	{r7}
     9d0:	b085      	sub	sp, #20
     9d2:	af00      	add	r7, sp, #0
     9d4:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	2b00      	cmp	r3, #0
     9de:	d104      	bne.n	9ea <simple_strlen+0x1c>
    {
        return ui32RetVal;
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	e009      	b.n	9f8 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	3301      	adds	r3, #1
     9e8:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	1c5a      	adds	r2, r3, #1
     9ee:	607a      	str	r2, [r7, #4]
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d1f6      	bne.n	9e4 <simple_strlen+0x16>
    }
    return ui32RetVal;
     9f6:	68fb      	ldr	r3, [r7, #12]
}
     9f8:	4618      	mov	r0, r3
     9fa:	3714      	adds	r7, #20
     9fc:	46bd      	mov	sp, r7
     9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     a02:	4770      	bx	lr

00000a04 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a04:	b480      	push	{r7}
     a06:	b087      	sub	sp, #28
     a08:	af00      	add	r7, sp, #0
     a0a:	60f8      	str	r0, [r7, #12]
     a0c:	460b      	mov	r3, r1
     a0e:	607a      	str	r2, [r7, #4]
     a10:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     a12:	2300      	movs	r3, #0
     a14:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	2b00      	cmp	r3, #0
     a1a:	dc0c      	bgt.n	a36 <padbuffer+0x32>
    {
        return i32Cnt;
     a1c:	697b      	ldr	r3, [r7, #20]
     a1e:	e010      	b.n	a42 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	2b00      	cmp	r3, #0
     a24:	d004      	beq.n	a30 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	1c5a      	adds	r2, r3, #1
     a2a:	60fa      	str	r2, [r7, #12]
     a2c:	7afa      	ldrb	r2, [r7, #11]
     a2e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a30:	697b      	ldr	r3, [r7, #20]
     a32:	3301      	adds	r3, #1
     a34:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	1e5a      	subs	r2, r3, #1
     a3a:	607a      	str	r2, [r7, #4]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d1ef      	bne.n	a20 <padbuffer+0x1c>
    }

    return i32Cnt;
     a40:	697b      	ldr	r3, [r7, #20]
}
     a42:	4618      	mov	r0, r3
     a44:	371c      	adds	r7, #28
     a46:	46bd      	mov	sp, r7
     a48:	f85d 7b04 	ldr.w	r7, [sp], #4
     a4c:	4770      	bx	lr
	...

00000a50 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a50:	b590      	push	{r4, r7, lr}
     a52:	b08f      	sub	sp, #60	; 0x3c
     a54:	af00      	add	r7, sp, #0
     a56:	60f8      	str	r0, [r7, #12]
     a58:	60b9      	str	r1, [r7, #8]
     a5a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     a5c:	68bb      	ldr	r3, [r7, #8]
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	2b03      	cmp	r3, #3
     a66:	dc02      	bgt.n	a6e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a68:	f06f 0302 	mvn.w	r3, #2
     a6c:	e0e7      	b.n	c3e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     a6e:	edd7 7a03 	vldr	s15, [r7, #12]
     a72:	eef5 7a40 	vcmp.f32	s15, #0.0
     a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a7a:	d104      	bne.n	a86 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     a7c:	68bb      	ldr	r3, [r7, #8]
     a7e:	4a72      	ldr	r2, [pc, #456]	; (c48 <ftoa+0x1f8>)
     a80:	601a      	str	r2, [r3, #0]
        return 3;
     a82:	2303      	movs	r3, #3
     a84:	e0db      	b.n	c3e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     a86:	68bb      	ldr	r3, [r7, #8]
     a88:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     a8e:	693b      	ldr	r3, [r7, #16]
     a90:	15db      	asrs	r3, r3, #23
     a92:	b2db      	uxtb	r3, r3
     a94:	3b7f      	subs	r3, #127	; 0x7f
     a96:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     a98:	693b      	ldr	r3, [r7, #16]
     a9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     aa2:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     aa4:	2300      	movs	r3, #0
     aa6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     aa8:	2300      	movs	r3, #0
     aaa:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     aac:	69fb      	ldr	r3, [r7, #28]
     aae:	2b1e      	cmp	r3, #30
     ab0:	dd02      	ble.n	ab8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     ab2:	f06f 0301 	mvn.w	r3, #1
     ab6:	e0c2      	b.n	c3e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     ab8:	69fb      	ldr	r3, [r7, #28]
     aba:	f113 0f17 	cmn.w	r3, #23
     abe:	da02      	bge.n	ac6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     ac0:	f04f 33ff 	mov.w	r3, #4294967295
     ac4:	e0bb      	b.n	c3e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     ac6:	69fb      	ldr	r3, [r7, #28]
     ac8:	2b16      	cmp	r3, #22
     aca:	dd06      	ble.n	ada <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     acc:	69fb      	ldr	r3, [r7, #28]
     ace:	3b17      	subs	r3, #23
     ad0:	69ba      	ldr	r2, [r7, #24]
     ad2:	fa02 f303 	lsl.w	r3, r2, r3
     ad6:	637b      	str	r3, [r7, #52]	; 0x34
     ad8:	e01a      	b.n	b10 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     ada:	69fb      	ldr	r3, [r7, #28]
     adc:	2b00      	cmp	r3, #0
     ade:	db0f      	blt.n	b00 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	f1c3 0317 	rsb	r3, r3, #23
     ae6:	69ba      	ldr	r2, [r7, #24]
     ae8:	fa42 f303 	asr.w	r3, r2, r3
     aec:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     aee:	69fb      	ldr	r3, [r7, #28]
     af0:	3301      	adds	r3, #1
     af2:	69ba      	ldr	r2, [r7, #24]
     af4:	fa02 f303 	lsl.w	r3, r2, r3
     af8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     afc:	633b      	str	r3, [r7, #48]	; 0x30
     afe:	e007      	b.n	b10 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b00:	69bb      	ldr	r3, [r7, #24]
     b02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b06:	69fb      	ldr	r3, [r7, #28]
     b08:	43db      	mvns	r3, r3
     b0a:	fa42 f303 	asr.w	r3, r2, r3
     b0e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     b10:	693b      	ldr	r3, [r7, #16]
     b12:	2b00      	cmp	r3, #0
     b14:	da04      	bge.n	b20 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     b16:	68bb      	ldr	r3, [r7, #8]
     b18:	1c5a      	adds	r2, r3, #1
     b1a:	60ba      	str	r2, [r7, #8]
     b1c:	222d      	movs	r2, #45	; 0x2d
     b1e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b22:	2b00      	cmp	r3, #0
     b24:	d105      	bne.n	b32 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b26:	68bb      	ldr	r3, [r7, #8]
     b28:	1c5a      	adds	r2, r3, #1
     b2a:	60ba      	str	r2, [r7, #8]
     b2c:	2230      	movs	r2, #48	; 0x30
     b2e:	701a      	strb	r2, [r3, #0]
     b30:	e021      	b.n	b76 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b34:	2b00      	cmp	r3, #0
     b36:	dd08      	ble.n	b4a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b3a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b3e:	68ba      	ldr	r2, [r7, #8]
     b40:	4618      	mov	r0, r3
     b42:	4621      	mov	r1, r4
     b44:	f7ff fe9b 	bl	87e <uint64_to_str>
     b48:	e011      	b.n	b6e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b4a:	68bb      	ldr	r3, [r7, #8]
     b4c:	1c5a      	adds	r2, r3, #1
     b4e:	60ba      	str	r2, [r7, #8]
     b50:	222d      	movs	r2, #45	; 0x2d
     b52:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b56:	425b      	negs	r3, r3
     b58:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b5c:	68ba      	ldr	r2, [r7, #8]
     b5e:	4618      	mov	r0, r3
     b60:	4621      	mov	r1, r4
     b62:	f7ff fe8c 	bl	87e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b66:	e002      	b.n	b6e <ftoa+0x11e>
        {
            pcBuf++;
     b68:	68bb      	ldr	r3, [r7, #8]
     b6a:	3301      	adds	r3, #1
     b6c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     b6e:	68bb      	ldr	r3, [r7, #8]
     b70:	781b      	ldrb	r3, [r3, #0]
     b72:	2b00      	cmp	r3, #0
     b74:	d1f8      	bne.n	b68 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     b76:	68bb      	ldr	r3, [r7, #8]
     b78:	1c5a      	adds	r2, r3, #1
     b7a:	60ba      	str	r2, [r7, #8]
     b7c:	222e      	movs	r2, #46	; 0x2e
     b7e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b82:	2b00      	cmp	r3, #0
     b84:	d105      	bne.n	b92 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     b86:	68bb      	ldr	r3, [r7, #8]
     b88:	1c5a      	adds	r2, r3, #1
     b8a:	60ba      	str	r2, [r7, #8]
     b8c:	2230      	movs	r2, #48	; 0x30
     b8e:	701a      	strb	r2, [r3, #0]
     b90:	e04f      	b.n	c32 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     b92:	68ba      	ldr	r2, [r7, #8]
     b94:	6a3b      	ldr	r3, [r7, #32]
     b96:	1ad3      	subs	r3, r2, r3
     b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b9a:	1ad3      	subs	r3, r2, r3
     b9c:	3b01      	subs	r3, #1
     b9e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     ba0:	697a      	ldr	r2, [r7, #20]
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	4293      	cmp	r3, r2
     ba6:	bfa8      	it	ge
     ba8:	4613      	movge	r3, r2
     baa:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     bac:	2300      	movs	r3, #0
     bae:	62bb      	str	r3, [r7, #40]	; 0x28
     bb0:	e015      	b.n	bde <ftoa+0x18e>
        {
            i32FracPart *= 10;
     bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bb4:	4613      	mov	r3, r2
     bb6:	009b      	lsls	r3, r3, #2
     bb8:	4413      	add	r3, r2
     bba:	005b      	lsls	r3, r3, #1
     bbc:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	1c5a      	adds	r2, r3, #1
     bc2:	60ba      	str	r2, [r7, #8]
     bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bc6:	1612      	asrs	r2, r2, #24
     bc8:	b2d2      	uxtb	r2, r2
     bca:	3230      	adds	r2, #48	; 0x30
     bcc:	b2d2      	uxtb	r2, r2
     bce:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     bd6:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bda:	3301      	adds	r3, #1
     bdc:	62bb      	str	r3, [r7, #40]	; 0x28
     bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
     be0:	697b      	ldr	r3, [r7, #20]
     be2:	429a      	cmp	r2, r3
     be4:	dbe5      	blt.n	bb2 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     be8:	4613      	mov	r3, r2
     bea:	009b      	lsls	r3, r3, #2
     bec:	4413      	add	r3, r2
     bee:	005b      	lsls	r3, r3, #1
     bf0:	161b      	asrs	r3, r3, #24
     bf2:	2b04      	cmp	r3, #4
     bf4:	dd1d      	ble.n	c32 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	3b01      	subs	r3, #1
     bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     bfc:	e015      	b.n	c2a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b2e      	cmp	r3, #46	; 0x2e
     c04:	d00e      	beq.n	c24 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b39      	cmp	r3, #57	; 0x39
     c0c:	d103      	bne.n	c16 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c10:	2230      	movs	r2, #48	; 0x30
     c12:	701a      	strb	r2, [r3, #0]
     c14:	e006      	b.n	c24 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	3301      	adds	r3, #1
     c1c:	b2da      	uxtb	r2, r3
     c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c20:	701a      	strb	r2, [r3, #0]
                    break;
     c22:	e006      	b.n	c32 <ftoa+0x1e2>
                }
                pcBuftmp--;
     c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c26:	3b01      	subs	r3, #1
     c28:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c2c:	6a3b      	ldr	r3, [r7, #32]
     c2e:	429a      	cmp	r2, r3
     c30:	d2e5      	bcs.n	bfe <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c32:	68bb      	ldr	r3, [r7, #8]
     c34:	2200      	movs	r2, #0
     c36:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c38:	68ba      	ldr	r2, [r7, #8]
     c3a:	6a3b      	ldr	r3, [r7, #32]
     c3c:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c3e:	4618      	mov	r0, r3
     c40:	373c      	adds	r7, #60	; 0x3c
     c42:	46bd      	mov	sp, r7
     c44:	bd90      	pop	{r4, r7, pc}
     c46:	bf00      	nop
     c48:	00302e30 	.word	0x00302e30

00000c4c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c4c:	b590      	push	{r4, r7, lr}
     c4e:	b095      	sub	sp, #84	; 0x54
     c50:	af00      	add	r7, sp, #0
     c52:	60f8      	str	r0, [r7, #12]
     c54:	60b9      	str	r1, [r7, #8]
     c56:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c58:	2300      	movs	r3, #0
     c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c5c:	2300      	movs	r3, #0
     c5e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c60:	e2e3      	b.n	122a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c62:	2306      	movs	r3, #6
     c64:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2b25      	cmp	r3, #37	; 0x25
     c6c:	d01f      	beq.n	cae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	2b00      	cmp	r3, #0
     c72:	d015      	beq.n	ca0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     c74:	68bb      	ldr	r3, [r7, #8]
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b0a      	cmp	r3, #10
     c7a:	d10b      	bne.n	c94 <am_util_stdio_vsprintf+0x48>
     c7c:	4bb1      	ldr	r3, [pc, #708]	; (f44 <am_util_stdio_vsprintf+0x2f8>)
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	2b00      	cmp	r3, #0
     c82:	d007      	beq.n	c94 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     c84:	68fb      	ldr	r3, [r7, #12]
     c86:	1c5a      	adds	r2, r3, #1
     c88:	60fa      	str	r2, [r7, #12]
     c8a:	220d      	movs	r2, #13
     c8c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c90:	3301      	adds	r3, #1
     c92:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     c94:	68fb      	ldr	r3, [r7, #12]
     c96:	1c5a      	adds	r2, r3, #1
     c98:	60fa      	str	r2, [r7, #12]
     c9a:	68ba      	ldr	r2, [r7, #8]
     c9c:	7812      	ldrb	r2, [r2, #0]
     c9e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     ca0:	68bb      	ldr	r3, [r7, #8]
     ca2:	3301      	adds	r3, #1
     ca4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ca8:	3301      	adds	r3, #1
     caa:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     cac:	e2bd      	b.n	122a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     cae:	68bb      	ldr	r3, [r7, #8]
     cb0:	3301      	adds	r3, #1
     cb2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     cb4:	2300      	movs	r3, #0
     cb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     cba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     cbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     cc2:	2320      	movs	r3, #32
     cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	2b30      	cmp	r3, #48	; 0x30
     cce:	d105      	bne.n	cdc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     cd0:	2330      	movs	r3, #48	; 0x30
     cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     cd6:	68bb      	ldr	r3, [r7, #8]
     cd8:	3301      	adds	r3, #1
     cda:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     cdc:	f107 0310 	add.w	r3, r7, #16
     ce0:	4619      	mov	r1, r3
     ce2:	68b8      	ldr	r0, [r7, #8]
     ce4:	f7ff fd85 	bl	7f2 <decstr_to_int>
     ce8:	4603      	mov	r3, r0
     cea:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     cec:	693b      	ldr	r3, [r7, #16]
     cee:	68ba      	ldr	r2, [r7, #8]
     cf0:	4413      	add	r3, r2
     cf2:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     cf4:	68bb      	ldr	r3, [r7, #8]
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b73      	cmp	r3, #115	; 0x73
     cfa:	d005      	beq.n	d08 <am_util_stdio_vsprintf+0xbc>
     cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cfe:	2b00      	cmp	r3, #0
     d00:	da02      	bge.n	d08 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d04:	425b      	negs	r3, r3
     d06:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d08:	68bb      	ldr	r3, [r7, #8]
     d0a:	781b      	ldrb	r3, [r3, #0]
     d0c:	2b2e      	cmp	r3, #46	; 0x2e
     d0e:	d10e      	bne.n	d2e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d10:	68bb      	ldr	r3, [r7, #8]
     d12:	3301      	adds	r3, #1
     d14:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d16:	f107 0310 	add.w	r3, r7, #16
     d1a:	4619      	mov	r1, r3
     d1c:	68b8      	ldr	r0, [r7, #8]
     d1e:	f7ff fd68 	bl	7f2 <decstr_to_int>
     d22:	4603      	mov	r3, r0
     d24:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d26:	693b      	ldr	r3, [r7, #16]
     d28:	68ba      	ldr	r2, [r7, #8]
     d2a:	4413      	add	r3, r2
     d2c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d2e:	68bb      	ldr	r3, [r7, #8]
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b6c      	cmp	r3, #108	; 0x6c
     d34:	d10c      	bne.n	d50 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d36:	68bb      	ldr	r3, [r7, #8]
     d38:	3301      	adds	r3, #1
     d3a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d3c:	68bb      	ldr	r3, [r7, #8]
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b6c      	cmp	r3, #108	; 0x6c
     d42:	d105      	bne.n	d50 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d44:	68bb      	ldr	r3, [r7, #8]
     d46:	3301      	adds	r3, #1
     d48:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d4a:	2301      	movs	r3, #1
     d4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d50:	68bb      	ldr	r3, [r7, #8]
     d52:	781b      	ldrb	r3, [r3, #0]
     d54:	3b46      	subs	r3, #70	; 0x46
     d56:	2b32      	cmp	r3, #50	; 0x32
     d58:	f200 8254 	bhi.w	1204 <am_util_stdio_vsprintf+0x5b8>
     d5c:	a201      	add	r2, pc, #4	; (adr r2, d64 <am_util_stdio_vsprintf+0x118>)
     d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d62:	bf00      	nop
     d64:	0000118f 	.word	0x0000118f
     d68:	00001205 	.word	0x00001205
     d6c:	00001205 	.word	0x00001205
     d70:	00001205 	.word	0x00001205
     d74:	00001205 	.word	0x00001205
     d78:	00001205 	.word	0x00001205
     d7c:	00001205 	.word	0x00001205
     d80:	00001205 	.word	0x00001205
     d84:	00001205 	.word	0x00001205
     d88:	00001205 	.word	0x00001205
     d8c:	00001205 	.word	0x00001205
     d90:	00001205 	.word	0x00001205
     d94:	00001205 	.word	0x00001205
     d98:	00001205 	.word	0x00001205
     d9c:	00001205 	.word	0x00001205
     da0:	00001205 	.word	0x00001205
     da4:	00001205 	.word	0x00001205
     da8:	00001205 	.word	0x00001205
     dac:	00000f2b 	.word	0x00000f2b
     db0:	00001205 	.word	0x00001205
     db4:	00001205 	.word	0x00001205
     db8:	00001205 	.word	0x00001205
     dbc:	00001205 	.word	0x00001205
     dc0:	00001205 	.word	0x00001205
     dc4:	00001205 	.word	0x00001205
     dc8:	00001205 	.word	0x00001205
     dcc:	00001205 	.word	0x00001205
     dd0:	00001205 	.word	0x00001205
     dd4:	00001205 	.word	0x00001205
     dd8:	00000e31 	.word	0x00000e31
     ddc:	00001057 	.word	0x00001057
     de0:	00001205 	.word	0x00001205
     de4:	0000118f 	.word	0x0000118f
     de8:	00001205 	.word	0x00001205
     dec:	00001205 	.word	0x00001205
     df0:	00001057 	.word	0x00001057
     df4:	00001205 	.word	0x00001205
     df8:	00001205 	.word	0x00001205
     dfc:	00001205 	.word	0x00001205
     e00:	00001205 	.word	0x00001205
     e04:	00001205 	.word	0x00001205
     e08:	00001205 	.word	0x00001205
     e0c:	00001205 	.word	0x00001205
     e10:	00001205 	.word	0x00001205
     e14:	00001205 	.word	0x00001205
     e18:	00000e57 	.word	0x00000e57
     e1c:	00001205 	.word	0x00001205
     e20:	00000fc5 	.word	0x00000fc5
     e24:	00001205 	.word	0x00001205
     e28:	00001205 	.word	0x00001205
     e2c:	00000f25 	.word	0x00000f25
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	1d1a      	adds	r2, r3, #4
     e34:	607a      	str	r2, [r7, #4]
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	2b00      	cmp	r3, #0
     e40:	d005      	beq.n	e4e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e42:	68fb      	ldr	r3, [r7, #12]
     e44:	1c5a      	adds	r2, r3, #1
     e46:	60fa      	str	r2, [r7, #12]
     e48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e4c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e50:	3301      	adds	r3, #1
     e52:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e54:	e1e6      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	1d1a      	adds	r2, r3, #4
     e5a:	607a      	str	r2, [r7, #4]
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e62:	f7ff fdb4 	bl	9ce <simple_strlen>
     e66:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e6a:	2b00      	cmp	r3, #0
     e6c:	dd2e      	ble.n	ecc <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e72:	429a      	cmp	r2, r3
     e74:	d22a      	bcs.n	ecc <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e7a:	1ad3      	subs	r3, r2, r3
     e7c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e84:	4619      	mov	r1, r3
     e86:	68f8      	ldr	r0, [r7, #12]
     e88:	f7ff fdbc 	bl	a04 <padbuffer>
     e8c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     e8e:	68fb      	ldr	r3, [r7, #12]
     e90:	2b00      	cmp	r3, #0
     e92:	d001      	beq.n	e98 <am_util_stdio_vsprintf+0x24c>
     e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e96:	e000      	b.n	e9a <am_util_stdio_vsprintf+0x24e>
     e98:	2300      	movs	r3, #0
     e9a:	68fa      	ldr	r2, [r7, #12]
     e9c:	4413      	add	r3, r2
     e9e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ea4:	4413      	add	r3, r2
     ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     ea8:	2300      	movs	r3, #0
     eaa:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     eac:	e00e      	b.n	ecc <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     eae:	68fb      	ldr	r3, [r7, #12]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d005      	beq.n	ec0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	1c5a      	adds	r2, r3, #1
     eb8:	60fa      	str	r2, [r7, #12]
     eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ebc:	7812      	ldrb	r2, [r2, #0]
     ebe:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ec2:	3301      	adds	r3, #1
     ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec8:	3301      	adds	r3, #1
     eca:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	2b00      	cmp	r3, #0
     ed2:	d1ec      	bne.n	eae <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ed6:	2b00      	cmp	r3, #0
     ed8:	f000 81a1 	beq.w	121e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ede:	425b      	negs	r3, r3
     ee0:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ee6:	429a      	cmp	r2, r3
     ee8:	f080 8199 	bcs.w	121e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ef0:	1ad3      	subs	r3, r2, r3
     ef2:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     efa:	4619      	mov	r1, r3
     efc:	68f8      	ldr	r0, [r7, #12]
     efe:	f7ff fd81 	bl	a04 <padbuffer>
     f02:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	2b00      	cmp	r3, #0
     f08:	d001      	beq.n	f0e <am_util_stdio_vsprintf+0x2c2>
     f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0c:	e000      	b.n	f10 <am_util_stdio_vsprintf+0x2c4>
     f0e:	2300      	movs	r3, #0
     f10:	68fa      	ldr	r2, [r7, #12]
     f12:	4413      	add	r3, r2
     f14:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f1a:	4413      	add	r3, r2
     f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f1e:	2300      	movs	r3, #0
     f20:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f22:	e17c      	b.n	121e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f24:	2301      	movs	r3, #1
     f26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f2e:	2b00      	cmp	r3, #0
     f30:	d00a      	beq.n	f48 <am_util_stdio_vsprintf+0x2fc>
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	3307      	adds	r3, #7
     f36:	f023 0307 	bic.w	r3, r3, #7
     f3a:	f103 0208 	add.w	r2, r3, #8
     f3e:	607a      	str	r2, [r7, #4]
     f40:	cb18      	ldmia	r3, {r3, r4}
     f42:	e007      	b.n	f54 <am_util_stdio_vsprintf+0x308>
     f44:	10001100 	.word	0x10001100
                                      va_arg(pArgs, uint32_t);
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	1d1a      	adds	r2, r3, #4
     f4c:	607a      	str	r2, [r7, #4]
     f4e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f50:	f04f 0400 	mov.w	r4, #0
     f54:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5a:	2b00      	cmp	r3, #0
     f5c:	d01e      	beq.n	f9c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f62:	f7ff fc22 	bl	7aa <ndigits_in_hex>
     f66:	4602      	mov	r2, r0
     f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f6a:	1a9b      	subs	r3, r3, r2
     f6c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f74:	4619      	mov	r1, r3
     f76:	68f8      	ldr	r0, [r7, #12]
     f78:	f7ff fd44 	bl	a04 <padbuffer>
     f7c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b00      	cmp	r3, #0
     f82:	d001      	beq.n	f88 <am_util_stdio_vsprintf+0x33c>
     f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f86:	e000      	b.n	f8a <am_util_stdio_vsprintf+0x33e>
     f88:	2300      	movs	r3, #0
     f8a:	68fa      	ldr	r2, [r7, #12]
     f8c:	4413      	add	r3, r2
     f8e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f94:	4413      	add	r3, r2
     f96:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f98:	2300      	movs	r3, #0
     f9a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     fa0:	68fa      	ldr	r2, [r7, #12]
     fa2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fa6:	f7ff fcb2 	bl	90e <uint64_to_hexstr>
     faa:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	2b00      	cmp	r3, #0
     fb0:	d003      	beq.n	fba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fb4:	68fa      	ldr	r2, [r7, #12]
     fb6:	4413      	add	r3, r2
     fb8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fbe:	4413      	add	r3, r2
     fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     fc2:	e12f      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fc8:	2b00      	cmp	r3, #0
     fca:	d008      	beq.n	fde <am_util_stdio_vsprintf+0x392>
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	3307      	adds	r3, #7
     fd0:	f023 0307 	bic.w	r3, r3, #7
     fd4:	f103 0208 	add.w	r2, r3, #8
     fd8:	607a      	str	r2, [r7, #4]
     fda:	cb18      	ldmia	r3, {r3, r4}
     fdc:	e005      	b.n	fea <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	1d1a      	adds	r2, r3, #4
     fe2:	607a      	str	r2, [r7, #4]
     fe4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fe6:	f04f 0400 	mov.w	r4, #0
     fea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff0:	2b00      	cmp	r3, #0
     ff2:	d01e      	beq.n	1032 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     ff4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ff8:	f7ff fb99 	bl	72e <ndigits_in_u64>
     ffc:	4602      	mov	r2, r0
     ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1000:	1a9b      	subs	r3, r3, r2
    1002:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1008:	6bba      	ldr	r2, [r7, #56]	; 0x38
    100a:	4619      	mov	r1, r3
    100c:	68f8      	ldr	r0, [r7, #12]
    100e:	f7ff fcf9 	bl	a04 <padbuffer>
    1012:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	2b00      	cmp	r3, #0
    1018:	d001      	beq.n	101e <am_util_stdio_vsprintf+0x3d2>
    101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    101c:	e000      	b.n	1020 <am_util_stdio_vsprintf+0x3d4>
    101e:	2300      	movs	r3, #0
    1020:	68fa      	ldr	r2, [r7, #12]
    1022:	4413      	add	r3, r2
    1024:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    102a:	4413      	add	r3, r2
    102c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    102e:	2300      	movs	r3, #0
    1030:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1032:	68fa      	ldr	r2, [r7, #12]
    1034:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1038:	f7ff fc21 	bl	87e <uint64_to_str>
    103c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	2b00      	cmp	r3, #0
    1042:	d003      	beq.n	104c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1046:	68fa      	ldr	r2, [r7, #12]
    1048:	4413      	add	r3, r2
    104a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    104e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1050:	4413      	add	r3, r2
    1052:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1054:	e0e6      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1056:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    105a:	2b00      	cmp	r3, #0
    105c:	d008      	beq.n	1070 <am_util_stdio_vsprintf+0x424>
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	3307      	adds	r3, #7
    1062:	f023 0307 	bic.w	r3, r3, #7
    1066:	f103 0208 	add.w	r2, r3, #8
    106a:	607a      	str	r2, [r7, #4]
    106c:	cb18      	ldmia	r3, {r3, r4}
    106e:	e005      	b.n	107c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	1d1a      	adds	r2, r3, #4
    1074:	607a      	str	r2, [r7, #4]
    1076:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1078:	ea4f 74e3 	mov.w	r4, r3, asr #31
    107c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1080:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1084:	2b00      	cmp	r3, #0
    1086:	f174 0300 	sbcs.w	r3, r4, #0
    108a:	da0a      	bge.n	10a2 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    108c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1090:	425b      	negs	r3, r3
    1092:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1096:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    109a:	2301      	movs	r3, #1
    109c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    10a0:	e006      	b.n	10b0 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    10a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    10aa:	2300      	movs	r3, #0
    10ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    10b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b2:	2b00      	cmp	r3, #0
    10b4:	d04a      	beq.n	114c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    10b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    10ba:	4618      	mov	r0, r3
    10bc:	4621      	mov	r1, r4
    10be:	f7ff fb57 	bl	770 <ndigits_in_i64>
    10c2:	4602      	mov	r2, r0
    10c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c6:	1a9b      	subs	r3, r3, r2
    10c8:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    10ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10ce:	2b00      	cmp	r3, #0
    10d0:	d011      	beq.n	10f6 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    10d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10d4:	3b01      	subs	r3, #1
    10d6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    10d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10dc:	2b30      	cmp	r3, #48	; 0x30
    10de:	d10a      	bne.n	10f6 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d004      	beq.n	10f0 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	1c5a      	adds	r2, r3, #1
    10ea:	60fa      	str	r2, [r7, #12]
    10ec:	222d      	movs	r2, #45	; 0x2d
    10ee:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    10f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10f2:	3301      	adds	r3, #1
    10f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10fc:	4619      	mov	r1, r3
    10fe:	68f8      	ldr	r0, [r7, #12]
    1100:	f7ff fc80 	bl	a04 <padbuffer>
    1104:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	2b00      	cmp	r3, #0
    110a:	d001      	beq.n	1110 <am_util_stdio_vsprintf+0x4c4>
    110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    110e:	e000      	b.n	1112 <am_util_stdio_vsprintf+0x4c6>
    1110:	2300      	movs	r3, #0
    1112:	68fa      	ldr	r2, [r7, #12]
    1114:	4413      	add	r3, r2
    1116:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    111a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    111c:	4413      	add	r3, r2
    111e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1120:	2300      	movs	r3, #0
    1122:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1124:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1128:	2b00      	cmp	r3, #0
    112a:	d01e      	beq.n	116a <am_util_stdio_vsprintf+0x51e>
    112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1130:	2b20      	cmp	r3, #32
    1132:	d11a      	bne.n	116a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1134:	68fb      	ldr	r3, [r7, #12]
    1136:	2b00      	cmp	r3, #0
    1138:	d004      	beq.n	1144 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	1c5a      	adds	r2, r3, #1
    113e:	60fa      	str	r2, [r7, #12]
    1140:	222d      	movs	r2, #45	; 0x2d
    1142:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1146:	3301      	adds	r3, #1
    1148:	63fb      	str	r3, [r7, #60]	; 0x3c
    114a:	e00e      	b.n	116a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    114c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1150:	2b00      	cmp	r3, #0
    1152:	d00a      	beq.n	116a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1154:	68fb      	ldr	r3, [r7, #12]
    1156:	2b00      	cmp	r3, #0
    1158:	d004      	beq.n	1164 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    115a:	68fb      	ldr	r3, [r7, #12]
    115c:	1c5a      	adds	r2, r3, #1
    115e:	60fa      	str	r2, [r7, #12]
    1160:	222d      	movs	r2, #45	; 0x2d
    1162:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1166:	3301      	adds	r3, #1
    1168:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    116a:	68fa      	ldr	r2, [r7, #12]
    116c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1170:	f7ff fb85 	bl	87e <uint64_to_str>
    1174:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	2b00      	cmp	r3, #0
    117a:	d003      	beq.n	1184 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    117e:	68fa      	ldr	r2, [r7, #12]
    1180:	4413      	add	r3, r2
    1182:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1188:	4413      	add	r3, r2
    118a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    118c:	e04a      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    118e:	68fb      	ldr	r3, [r7, #12]
    1190:	2b00      	cmp	r3, #0
    1192:	d046      	beq.n	1222 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	3307      	adds	r3, #7
    1198:	f023 0307 	bic.w	r3, r3, #7
    119c:	f103 0208 	add.w	r2, r3, #8
    11a0:	607a      	str	r2, [r7, #4]
    11a2:	cb18      	ldmia	r3, {r3, r4}
    11a4:	4618      	mov	r0, r3
    11a6:	4621      	mov	r1, r4
    11a8:	f7fe ff6a 	bl	80 <__aeabi_d2f>
    11ac:	4603      	mov	r3, r0
    11ae:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    11b0:	68fb      	ldr	r3, [r7, #12]
    11b2:	2214      	movs	r2, #20
    11b4:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    11b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11b8:	68f9      	ldr	r1, [r7, #12]
    11ba:	6978      	ldr	r0, [r7, #20]
    11bc:	f7ff fc48 	bl	a50 <ftoa>
    11c0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    11c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c4:	2b00      	cmp	r3, #0
    11c6:	da14      	bge.n	11f2 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    11c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    11ce:	d102      	bne.n	11d6 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    11d0:	4b1e      	ldr	r3, [pc, #120]	; (124c <am_util_stdio_vsprintf+0x600>)
    11d2:	62bb      	str	r3, [r7, #40]	; 0x28
    11d4:	e008      	b.n	11e8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    11d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11d8:	f113 0f02 	cmn.w	r3, #2
    11dc:	d102      	bne.n	11e4 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    11de:	4b1c      	ldr	r3, [pc, #112]	; (1250 <am_util_stdio_vsprintf+0x604>)
    11e0:	62bb      	str	r3, [r7, #40]	; 0x28
    11e2:	e001      	b.n	11e8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    11e4:	4b1b      	ldr	r3, [pc, #108]	; (1254 <am_util_stdio_vsprintf+0x608>)
    11e6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    11e8:	68fb      	ldr	r3, [r7, #12]
    11ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    11ec:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    11ee:	2303      	movs	r3, #3
    11f0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    11f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11f6:	4413      	add	r3, r2
    11f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    11fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11fc:	68fa      	ldr	r2, [r7, #12]
    11fe:	4413      	add	r3, r2
    1200:	60fb      	str	r3, [r7, #12]
                }
                break;
    1202:	e00e      	b.n	1222 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	2b00      	cmp	r3, #0
    1208:	d005      	beq.n	1216 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    120a:	68fb      	ldr	r3, [r7, #12]
    120c:	1c5a      	adds	r2, r3, #1
    120e:	60fa      	str	r2, [r7, #12]
    1210:	68ba      	ldr	r2, [r7, #8]
    1212:	7812      	ldrb	r2, [r2, #0]
    1214:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1218:	3301      	adds	r3, #1
    121a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    121c:	e002      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>
                break;
    121e:	bf00      	nop
    1220:	e000      	b.n	1224 <am_util_stdio_vsprintf+0x5d8>
                break;
    1222:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1224:	68bb      	ldr	r3, [r7, #8]
    1226:	3301      	adds	r3, #1
    1228:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    122a:	68bb      	ldr	r3, [r7, #8]
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	2b00      	cmp	r3, #0
    1230:	f47f ad17 	bne.w	c62 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	2b00      	cmp	r3, #0
    1238:	d002      	beq.n	1240 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	2200      	movs	r2, #0
    123e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1242:	4618      	mov	r0, r3
    1244:	3754      	adds	r7, #84	; 0x54
    1246:	46bd      	mov	sp, r7
    1248:	bd90      	pop	{r4, r7, pc}
    124a:	bf00      	nop
    124c:	00302e30 	.word	0x00302e30
    1250:	00232e23 	.word	0x00232e23
    1254:	003f2e3f 	.word	0x003f2e3f

00001258 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1258:	b40f      	push	{r0, r1, r2, r3}
    125a:	b580      	push	{r7, lr}
    125c:	b082      	sub	sp, #8
    125e:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1260:	f107 0314 	add.w	r3, r7, #20
    1264:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1266:	683a      	ldr	r2, [r7, #0]
    1268:	6939      	ldr	r1, [r7, #16]
    126a:	4808      	ldr	r0, [pc, #32]	; (128c <am_util_stdio_printf+0x34>)
    126c:	f7ff fcee 	bl	c4c <am_util_stdio_vsprintf>
    1270:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1272:	4b07      	ldr	r3, [pc, #28]	; (1290 <am_util_stdio_printf+0x38>)
    1274:	681b      	ldr	r3, [r3, #0]
    1276:	4805      	ldr	r0, [pc, #20]	; (128c <am_util_stdio_printf+0x34>)
    1278:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    127a:	687b      	ldr	r3, [r7, #4]
}
    127c:	4618      	mov	r0, r3
    127e:	3708      	adds	r7, #8
    1280:	46bd      	mov	sp, r7
    1282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1286:	b004      	add	sp, #16
    1288:	4770      	bx	lr
    128a:	bf00      	nop
    128c:	10001000 	.word	0x10001000
    1290:	10001108 	.word	0x10001108

00001294 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1294:	b580      	push	{r7, lr}
    1296:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1298:	4802      	ldr	r0, [pc, #8]	; (12a4 <am_util_stdio_terminal_clear+0x10>)
    129a:	f7ff ffdd 	bl	1258 <am_util_stdio_printf>
}
    129e:	bf00      	nop
    12a0:	bd80      	pop	{r7, pc}
    12a2:	bf00      	nop
    12a4:	00001ad4 	.word	0x00001ad4

000012a8 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    12a8:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    12aa:	f000 f91f 	bl	14ec <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    12ae:	f000 f9c1 	bl	1634 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    12b2:	2001      	movs	r0, #1
    12b4:	f000 f930 	bl	1518 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    12b8:	2001      	movs	r0, #1
    12ba:	f000 f879 	bl	13b0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    12be:	f000 f939 	bl	1534 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    12c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    12c6:	f000 b909 	b.w	14dc <am_hal_mcuctrl_bandgap_disable>
    12ca:	bf00      	nop

000012cc <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    12cc:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    12ce:	4b10      	ldr	r3, [pc, #64]	; (1310 <am_bsp_debug_printf_enable+0x44>)
    12d0:	681c      	ldr	r4, [r3, #0]
    12d2:	f014 0401 	ands.w	r4, r4, #1
{
    12d6:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    12d8:	d001      	beq.n	12de <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    12da:	b006      	add	sp, #24
    12dc:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    12de:	a806      	add	r0, sp, #24
    12e0:	490c      	ldr	r1, [pc, #48]	; (1314 <am_bsp_debug_printf_enable+0x48>)
    12e2:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    12e6:	f000 f943 	bl	1570 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    12ea:	4a0b      	ldr	r2, [pc, #44]	; (1318 <am_bsp_debug_printf_enable+0x4c>)
    12ec:	480b      	ldr	r0, [pc, #44]	; (131c <am_bsp_debug_printf_enable+0x50>)
    12ee:	490c      	ldr	r1, [pc, #48]	; (1320 <am_bsp_debug_printf_enable+0x54>)
    12f0:	2373      	movs	r3, #115	; 0x73
    12f2:	6013      	str	r3, [r2, #0]
    12f4:	6803      	ldr	r3, [r0, #0]
    12f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    12fa:	6003      	str	r3, [r0, #0]
    12fc:	6808      	ldr	r0, [r1, #0]
    12fe:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1302:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1306:	600b      	str	r3, [r1, #0]
    1308:	6014      	str	r4, [r2, #0]
}
    130a:	b006      	add	sp, #24
    130c:	bd10      	pop	{r4, pc}
    130e:	bf00      	nop
    1310:	10001104 	.word	0x10001104
    1314:	000f4240 	.word	0x000f4240
    1318:	40010060 	.word	0x40010060
    131c:	40010054 	.word	0x40010054
    1320:	40010028 	.word	0x40010028

00001324 <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1324:	4b0f      	ldr	r3, [pc, #60]	; (1364 <am_bsp_debug_printf_disable+0x40>)
{
    1326:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1328:	681c      	ldr	r4, [r3, #0]
    132a:	f014 0401 	ands.w	r4, r4, #1
    132e:	d000      	beq.n	1332 <am_bsp_debug_printf_disable+0xe>
    1330:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    1332:	f000 f877 	bl	1424 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1336:	4a0c      	ldr	r2, [pc, #48]	; (1368 <am_bsp_debug_printf_disable+0x44>)
    1338:	480c      	ldr	r0, [pc, #48]	; (136c <am_bsp_debug_printf_disable+0x48>)
    133a:	490d      	ldr	r1, [pc, #52]	; (1370 <am_bsp_debug_printf_disable+0x4c>)
    133c:	2373      	movs	r3, #115	; 0x73
    133e:	6013      	str	r3, [r2, #0]
    1340:	6803      	ldr	r3, [r0, #0]
    1342:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1346:	f04c 0320 	orr.w	r3, ip, #32
    134a:	6003      	str	r3, [r0, #0]
    134c:	6808      	ldr	r0, [r1, #0]
    134e:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1352:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1356:	600b      	str	r3, [r1, #0]
    1358:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    135a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    135e:	f000 b963 	b.w	1628 <am_hal_tpiu_disable>
    1362:	bf00      	nop
    1364:	10001104 	.word	0x10001104
    1368:	40010060 	.word	0x40010060
    136c:	40010054 	.word	0x40010054
    1370:	40010028 	.word	0x40010028

00001374 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1374:	f000 b86c 	b.w	1450 <am_hal_itm_print>

00001378 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    137a:	4906      	ldr	r1, [pc, #24]	; (1394 <am_hal_clkgen_sysclk_select+0x1c>)
{
    137c:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    137e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1380:	2447      	movs	r4, #71	; 0x47
    1382:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1384:	6008      	str	r0, [r1, #0]
}
    1386:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    138a:	601a      	str	r2, [r3, #0]
}
    138c:	4770      	bx	lr
    138e:	bf00      	nop
    1390:	40004014 	.word	0x40004014
    1394:	40004018 	.word	0x40004018

00001398 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1398:	4b03      	ldr	r3, [pc, #12]	; (13a8 <am_hal_clkgen_sysclk_get+0x10>)
    139a:	4a04      	ldr	r2, [pc, #16]	; (13ac <am_hal_clkgen_sysclk_get+0x14>)
    139c:	6818      	ldr	r0, [r3, #0]
    139e:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    13a2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    13a6:	4770      	bx	lr
    13a8:	40004018 	.word	0x40004018
    13ac:	00001ae8 	.word	0x00001ae8

000013b0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    13b0:	0783      	lsls	r3, r0, #30
    13b2:	d003      	beq.n	13bc <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <am_hal_clkgen_osc_stop+0x10>)
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	4310      	orrs	r0, r2
    13ba:	6018      	str	r0, [r3, #0]
    13bc:	4770      	bx	lr
    13be:	bf00      	nop
    13c0:	4000400c 	.word	0x4000400c

000013c4 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    13c4:	3801      	subs	r0, #1
    13c6:	f47f affd 	bne.w	13c4 <am_hal_flash_delay>
    13ca:	4770      	bx	lr

000013cc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    13cc:	4b0d      	ldr	r3, [pc, #52]	; (1404 <am_hal_itm_enable+0x38>)
    13ce:	6818      	ldr	r0, [r3, #0]
    13d0:	07c2      	lsls	r2, r0, #31
    13d2:	d416      	bmi.n	1402 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13d4:	4a0c      	ldr	r2, [pc, #48]	; (1408 <am_hal_itm_enable+0x3c>)
    13d6:	6811      	ldr	r1, [r2, #0]
{
    13d8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13da:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    13de:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    13e0:	6815      	ldr	r5, [r2, #0]
    13e2:	01eb      	lsls	r3, r5, #7
    13e4:	d5fc      	bpl.n	13e0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13e6:	4809      	ldr	r0, [pc, #36]	; (140c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13e8:	4c09      	ldr	r4, [pc, #36]	; (1410 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13ea:	4d0a      	ldr	r5, [pc, #40]	; (1414 <am_hal_itm_enable+0x48>)
    13ec:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13ee:	250f      	movs	r5, #15
    13f0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    13f2:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13f4:	4908      	ldr	r1, [pc, #32]	; (1418 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13f6:	4b09      	ldr	r3, [pc, #36]	; (141c <am_hal_itm_enable+0x50>)
    13f8:	4a09      	ldr	r2, [pc, #36]	; (1420 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13fa:	f04f 30ff 	mov.w	r0, #4294967295
    13fe:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1400:	601a      	str	r2, [r3, #0]
}
    1402:	4770      	bx	lr
    1404:	10001104 	.word	0x10001104
    1408:	e000edfc 	.word	0xe000edfc
    140c:	e0000fb0 	.word	0xe0000fb0
    1410:	e0000e40 	.word	0xe0000e40
    1414:	c5acce55 	.word	0xc5acce55
    1418:	e0000e00 	.word	0xe0000e00
    141c:	e0000e80 	.word	0xe0000e80
    1420:	00150511 	.word	0x00150511

00001424 <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    1424:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1426:	4a08      	ldr	r2, [pc, #32]	; (1448 <am_hal_itm_not_busy+0x24>)
    1428:	6813      	ldr	r3, [r2, #0]
    142a:	021b      	lsls	r3, r3, #8
    142c:	d4fc      	bmi.n	1428 <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    142e:	f7ff ffb3 	bl	1398 <am_hal_clkgen_sysclk_get>
    1432:	4906      	ldr	r1, [pc, #24]	; (144c <am_hal_itm_not_busy+0x28>)
    1434:	fba1 3000 	umull	r3, r0, r1, r0
    1438:	0c80      	lsrs	r0, r0, #18
    143a:	2232      	movs	r2, #50	; 0x32
    143c:	fb02 f000 	mul.w	r0, r2, r0
}
    1440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1444:	f7ff bfbe 	b.w	13c4 <am_hal_flash_delay>
    1448:	e0000e80 	.word	0xe0000e80
    144c:	165e9f81 	.word	0x165e9f81

00001450 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1450:	7803      	ldrb	r3, [r0, #0]
    1452:	b1b3      	cbz	r3, 1482 <am_hal_itm_print+0x32>
{
    1454:	b410      	push	{r4}
    1456:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1458:	2400      	movs	r4, #0
    145a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    145e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1460:	2900      	cmp	r1, #0
    1462:	d1fa      	bne.n	145a <am_hal_itm_print+0xa>
    1464:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1466:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    146a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    146e:	f8dc 3000 	ldr.w	r3, [ip]
    1472:	2b00      	cmp	r3, #0
    1474:	d0fb      	beq.n	146e <am_hal_itm_print+0x1e>
    while (ui32Length)
    1476:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1478:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    147c:	d1f5      	bne.n	146a <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    147e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1482:	4770      	bx	lr

00001484 <am_hal_mcuctrl_fault_capture_enable>:
am_hal_mcuctrl_fault_capture_enable(void)
{
    //
    // Enable the Fault Capture registers.
    //
    AM_BFW(MCUCTRL, FAULTCAPTUREEN, ENABLE, 1);
    1484:	4a02      	ldr	r2, [pc, #8]	; (1490 <am_hal_mcuctrl_fault_capture_enable+0xc>)
    1486:	6813      	ldr	r3, [r2, #0]
    1488:	f043 0001 	orr.w	r0, r3, #1
    148c:	6010      	str	r0, [r2, #0]
    148e:	4770      	bx	lr
    1490:	400201d0 	.word	0x400201d0

00001494 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1494:	490d      	ldr	r1, [pc, #52]	; (14cc <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1496:	4b0e      	ldr	r3, [pc, #56]	; (14d0 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1498:	4a0e      	ldr	r2, [pc, #56]	; (14d4 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    149a:	681b      	ldr	r3, [r3, #0]
{
    149c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    149e:	680d      	ldr	r5, [r1, #0]
    14a0:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14a2:	6815      	ldr	r5, [r2, #0]
    14a4:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14a6:	4c0c      	ldr	r4, [pc, #48]	; (14d8 <am_hal_mcuctrl_fault_status+0x44>)
    14a8:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14aa:	4329      	orrs	r1, r5
    14ac:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14ae:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14b0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14b4:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14b6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14b8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14c0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14c2:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14c4:	6142      	str	r2, [r0, #20]
}
    14c6:	bc70      	pop	{r4, r5, r6}
    14c8:	4770      	bx	lr
    14ca:	bf00      	nop
    14cc:	400201c4 	.word	0x400201c4
    14d0:	400201cc 	.word	0x400201cc
    14d4:	400201c0 	.word	0x400201c0
    14d8:	400201c8 	.word	0x400201c8

000014dc <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    14dc:	4b02      	ldr	r3, [pc, #8]	; (14e8 <am_hal_mcuctrl_bandgap_disable+0xc>)
    14de:	f06f 0201 	mvn.w	r2, #1
    14e2:	601a      	str	r2, [r3, #0]
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	400200fc 	.word	0x400200fc

000014ec <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14ec:	4b08      	ldr	r3, [pc, #32]	; (1510 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    14ee:	4a09      	ldr	r2, [pc, #36]	; (1514 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14f0:	6819      	ldr	r1, [r3, #0]
    14f2:	f041 0002 	orr.w	r0, r1, #2
    14f6:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    14f8:	6819      	ldr	r1, [r3, #0]
    14fa:	f041 0001 	orr.w	r0, r1, #1
    14fe:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1500:	6813      	ldr	r3, [r2, #0]
    1502:	0799      	lsls	r1, r3, #30
    1504:	d5fc      	bpl.n	1500 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    1506:	4a03      	ldr	r2, [pc, #12]	; (1514 <am_hal_mcuctrl_bucks_enable+0x28>)
    1508:	6811      	ldr	r1, [r2, #0]
    150a:	07cb      	lsls	r3, r1, #31
    150c:	d5fc      	bpl.n	1508 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    150e:	4770      	bx	lr
    1510:	40020010 	.word	0x40020010
    1514:	40020014 	.word	0x40020014

00001518 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1518:	4a05      	ldr	r2, [pc, #20]	; (1530 <am_hal_rtc_osc_select+0x18>)
    151a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    151c:	b918      	cbnz	r0, 1526 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    151e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1522:	6010      	str	r0, [r2, #0]
    1524:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1526:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    152a:	6011      	str	r1, [r2, #0]
    152c:	4770      	bx	lr
    152e:	bf00      	nop
    1530:	4000400c 	.word	0x4000400c

00001534 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    1534:	4a02      	ldr	r2, [pc, #8]	; (1540 <am_hal_rtc_osc_disable+0xc>)
    1536:	6813      	ldr	r3, [r2, #0]
    1538:	f043 0010 	orr.w	r0, r3, #16
    153c:	6010      	str	r0, [r2, #0]
    153e:	4770      	bx	lr
    1540:	40004050 	.word	0x40004050

00001544 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1544:	4a08      	ldr	r2, [pc, #32]	; (1568 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1546:	b118      	cbz	r0, 1550 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1548:	4b08      	ldr	r3, [pc, #32]	; (156c <am_hal_sysctrl_sleep+0x28>)
    154a:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    154c:	07c3      	lsls	r3, r0, #31
    154e:	d505      	bpl.n	155c <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1550:	6811      	ldr	r1, [r2, #0]
    1552:	f021 0304 	bic.w	r3, r1, #4
    1556:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    1558:	bf30      	wfi
    155a:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    155c:	6810      	ldr	r0, [r2, #0]
    155e:	f040 0104 	orr.w	r1, r0, #4
    1562:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1564:	bf30      	wfi
    1566:	4770      	bx	lr
    1568:	e000ed10 	.word	0xe000ed10
    156c:	40020250 	.word	0x40020250

00001570 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1570:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1572:	4a24      	ldr	r2, [pc, #144]	; (1604 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1574:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1576:	2100      	movs	r1, #0
    1578:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    157a:	b313      	cbz	r3, 15c2 <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    157c:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1580:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1582:	4c21      	ldr	r4, [pc, #132]	; (1608 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1584:	4d21      	ldr	r5, [pc, #132]	; (160c <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1586:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    158a:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    158e:	45a6      	cmp	lr, r4
    1590:	bf94      	ite	ls
    1592:	461c      	movls	r4, r3
    1594:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1596:	f7ff feff 	bl	1398 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    159a:	1c43      	adds	r3, r0, #1
    159c:	d02f      	beq.n	15fe <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    159e:	08c2      	lsrs	r2, r0, #3
    15a0:	fbb2 f3f4 	udiv	r3, r2, r4
    15a4:	1e5d      	subs	r5, r3, #1
    15a6:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    15a8:	4a19      	ldr	r2, [pc, #100]	; (1610 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    15aa:	4c1a      	ldr	r4, [pc, #104]	; (1614 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    15ac:	491a      	ldr	r1, [pc, #104]	; (1618 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    15ae:	4b1b      	ldr	r3, [pc, #108]	; (161c <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    15b0:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    15b2:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    15b4:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    15b6:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    15ba:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    15bc:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    15be:	601a      	str	r2, [r3, #0]
    15c0:	e010      	b.n	15e4 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    15c2:	4c13      	ldr	r4, [pc, #76]	; (1610 <am_hal_tpiu_enable+0xa0>)
    15c4:	6905      	ldr	r5, [r0, #16]
    15c6:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    15c8:	6882      	ldr	r2, [r0, #8]
    15ca:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15ce:	68c3      	ldr	r3, [r0, #12]
    15d0:	4c13      	ldr	r4, [pc, #76]	; (1620 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15d2:	4912      	ldr	r1, [pc, #72]	; (161c <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15d4:	1e5d      	subs	r5, r3, #1
    15d6:	2201      	movs	r2, #1
    15d8:	40aa      	lsls	r2, r5
    15da:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15dc:	6840      	ldr	r0, [r0, #4]
    15de:	680b      	ldr	r3, [r1, #0]
    15e0:	4303      	orrs	r3, r0
    15e2:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15e4:	f7ff fed8 	bl	1398 <am_hal_clkgen_sysclk_get>
    15e8:	4c0e      	ldr	r4, [pc, #56]	; (1624 <am_hal_tpiu_enable+0xb4>)
    15ea:	fba4 3100 	umull	r3, r1, r4, r0
    15ee:	0c88      	lsrs	r0, r1, #18
    15f0:	2332      	movs	r3, #50	; 0x32
    15f2:	fb03 f000 	mul.w	r0, r3, r0
}
    15f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15fa:	f7ff bee3 	b.w	13c4 <am_hal_flash_delay>
    15fe:	2002      	movs	r0, #2
    1600:	e7d2      	b.n	15a8 <am_hal_tpiu_enable+0x38>
    1602:	bf00      	nop
    1604:	e0040304 	.word	0xe0040304
    1608:	001da380 	.word	0x001da380
    160c:	000f4240 	.word	0x000f4240
    1610:	e0040010 	.word	0xe0040010
    1614:	e00400f0 	.word	0xe00400f0
    1618:	e0040f00 	.word	0xe0040f00
    161c:	40020250 	.word	0x40020250
    1620:	e0040004 	.word	0xe0040004
    1624:	165e9f81 	.word	0x165e9f81

00001628 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1628:	4b01      	ldr	r3, [pc, #4]	; (1630 <am_hal_tpiu_disable+0x8>)
    162a:	2200      	movs	r2, #0
    162c:	601a      	str	r2, [r3, #0]
    162e:	4770      	bx	lr
    1630:	40020250 	.word	0x40020250

00001634 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1634:	4b01      	ldr	r3, [pc, #4]	; (163c <am_hal_vcomp_disable+0x8>)
    1636:	2237      	movs	r2, #55	; 0x37
    1638:	601a      	str	r2, [r3, #0]
    163a:	4770      	bx	lr
    163c:	4000c008 	.word	0x4000c008
    1640:	6c6c6548 	.word	0x6c6c6548
    1644:	6146206f 	.word	0x6146206f
    1648:	2e746c75 	.word	0x2e746c75
    164c:	00000a0a 	.word	0x00000a0a
    1650:	69206e41 	.word	0x69206e41
    1654:	67656c6c 	.word	0x67656c6c
    1658:	6d206c61 	.word	0x6d206c61
    165c:	726f6d65 	.word	0x726f6d65
    1660:	63612079 	.word	0x63612079
    1664:	73736563 	.word	0x73736563
    1668:	6c697720 	.word	0x6c697720
    166c:	636f206c 	.word	0x636f206c
    1670:	20727563 	.word	0x20727563
    1674:	7478656e 	.word	0x7478656e
    1678:	6877202c 	.word	0x6877202c
    167c:	20686369 	.word	0x20686369
    1680:	6c6c6977 	.word	0x6c6c6977
    1684:	65786520 	.word	0x65786520
    1688:	65747563 	.word	0x65747563
    168c:	65687420 	.word	0x65687420
    1690:	7478650a 	.word	0x7478650a
    1694:	65646e65 	.word	0x65646e65
    1698:	61662064 	.word	0x61662064
    169c:	20746c75 	.word	0x20746c75
    16a0:	646e6168 	.word	0x646e6168
    16a4:	2072656c 	.word	0x2072656c
    16a8:	61206f74 	.word	0x61206f74
    16ac:	73697373 	.word	0x73697373
    16b0:	6e692074 	.word	0x6e692074
    16b4:	63656420 	.word	0x63656420
    16b8:	6e69646f 	.word	0x6e69646f
    16bc:	68742067 	.word	0x68742067
    16c0:	61662065 	.word	0x61662065
    16c4:	2e746c75 	.word	0x2e746c75
    16c8:	0000000a 	.word	0x0000000a
    16cc:	206e490a 	.word	0x206e490a
    16d0:	6564726f 	.word	0x6564726f
    16d4:	6f742072 	.word	0x6f742072
    16d8:	69727020 	.word	0x69727020
    16dc:	6f20746e 	.word	0x6f20746e
    16e0:	74207475 	.word	0x74207475
    16e4:	66206568 	.word	0x66206568
    16e8:	746c7561 	.word	0x746c7561
    16ec:	666e6920 	.word	0x666e6920
    16f0:	616d726f 	.word	0x616d726f
    16f4:	6e6f6974 	.word	0x6e6f6974
    16f8:	726f6620 	.word	0x726f6620
    16fc:	69687420 	.word	0x69687420
    1700:	78652073 	.word	0x78652073
    1704:	6c706d61 	.word	0x6c706d61
    1708:	20610a65 	.word	0x20610a65
    170c:	7263616d 	.word	0x7263616d
    1710:	41202c6f 	.word	0x41202c6f
    1714:	54555f4d 	.word	0x54555f4d
    1718:	465f4c49 	.word	0x465f4c49
    171c:	544c5541 	.word	0x544c5541
    1720:	5f525349 	.word	0x5f525349
    1724:	4e495250 	.word	0x4e495250
    1728:	68202c54 	.word	0x68202c54
    172c:	62207361 	.word	0x62207361
    1730:	206e6565 	.word	0x206e6565
    1734:	69666564 	.word	0x69666564
    1738:	2064656e 	.word	0x2064656e
    173c:	74206e69 	.word	0x74206e69
    1740:	62206568 	.word	0x62206568
    1744:	646c6975 	.word	0x646c6975
    1748:	766e650a 	.word	0x766e650a
    174c:	6e6f7269 	.word	0x6e6f7269
    1750:	746e656d 	.word	0x746e656d
    1754:	4f20202e 	.word	0x4f20202e
    1758:	72656874 	.word	0x72656874
    175c:	65736977 	.word	0x65736977
    1760:	65687420 	.word	0x65687420
    1764:	75616620 	.word	0x75616620
    1768:	6420746c 	.word	0x6420746c
    176c:	20617461 	.word	0x20617461
    1770:	206e6163 	.word	0x206e6163
    1774:	796c6e6f 	.word	0x796c6e6f
    1778:	20656220 	.word	0x20656220
    177c:	6d617865 	.word	0x6d617865
    1780:	64656e69 	.word	0x64656e69
    1784:	7269640a 	.word	0x7269640a
    1788:	6c746365 	.word	0x6c746365
    178c:	6e692079 	.word	0x6e692079
    1790:	65687420 	.word	0x65687420
    1794:	52534920 	.word	0x52534920
    1798:	6f726620 	.word	0x6f726620
    179c:	2061206d 	.word	0x2061206d
    17a0:	75626564 	.word	0x75626564
    17a4:	72656767 	.word	0x72656767
    17a8:	000a0a2e 	.word	0x000a0a2e
    17ac:	63726f46 	.word	0x63726f46
    17b0:	20676e69 	.word	0x20676e69
    17b4:	20656874 	.word	0x20656874
    17b8:	6c756166 	.word	0x6c756166
    17bc:	6f6e2074 	.word	0x6f6e2074
    17c0:	2e2e2077 	.word	0x2e2e2077
    17c4:	000a0a2e 	.word	0x000a0a2e
    17c8:	64726148 	.word	0x64726148
    17cc:	75614620 	.word	0x75614620
    17d0:	7320746c 	.word	0x7320746c
    17d4:	6b636174 	.word	0x6b636174
    17d8:	64206465 	.word	0x64206465
    17dc:	3a617461 	.word	0x3a617461
    17e0:	0000000a 	.word	0x0000000a
    17e4:	20202020 	.word	0x20202020
    17e8:	20203052 	.word	0x20203052
    17ec:	7830203d 	.word	0x7830203d
    17f0:	58383025 	.word	0x58383025
    17f4:	0000000a 	.word	0x0000000a
    17f8:	20202020 	.word	0x20202020
    17fc:	20203152 	.word	0x20203152
    1800:	7830203d 	.word	0x7830203d
    1804:	58383025 	.word	0x58383025
    1808:	0000000a 	.word	0x0000000a
    180c:	20202020 	.word	0x20202020
    1810:	20203252 	.word	0x20203252
    1814:	7830203d 	.word	0x7830203d
    1818:	58383025 	.word	0x58383025
    181c:	0000000a 	.word	0x0000000a
    1820:	20202020 	.word	0x20202020
    1824:	20203352 	.word	0x20203352
    1828:	7830203d 	.word	0x7830203d
    182c:	58383025 	.word	0x58383025
    1830:	0000000a 	.word	0x0000000a
    1834:	20202020 	.word	0x20202020
    1838:	20323152 	.word	0x20323152
    183c:	7830203d 	.word	0x7830203d
    1840:	58383025 	.word	0x58383025
    1844:	0000000a 	.word	0x0000000a
    1848:	20202020 	.word	0x20202020
    184c:	2020524c 	.word	0x2020524c
    1850:	7830203d 	.word	0x7830203d
    1854:	58383025 	.word	0x58383025
    1858:	0000000a 	.word	0x0000000a
    185c:	20202020 	.word	0x20202020
    1860:	20204350 	.word	0x20204350
    1864:	7830203d 	.word	0x7830203d
    1868:	58383025 	.word	0x58383025
    186c:	0000000a 	.word	0x0000000a
    1870:	20202020 	.word	0x20202020
    1874:	20525350 	.word	0x20525350
    1878:	7830203d 	.word	0x7830203d
    187c:	58383025 	.word	0x58383025
    1880:	0000000a 	.word	0x0000000a
    1884:	6568744f 	.word	0x6568744f
    1888:	61482072 	.word	0x61482072
    188c:	46206472 	.word	0x46206472
    1890:	746c7561 	.word	0x746c7561
    1894:	74616420 	.word	0x74616420
    1898:	000a3a61 	.word	0x000a3a61
    189c:	20202020 	.word	0x20202020
    18a0:	6c756146 	.word	0x6c756146
    18a4:	64612074 	.word	0x64612074
    18a8:	73657264 	.word	0x73657264
    18ac:	203d2073 	.word	0x203d2073
    18b0:	30257830 	.word	0x30257830
    18b4:	000a5838 	.word	0x000a5838
    18b8:	20202020 	.word	0x20202020
    18bc:	52414642 	.word	0x52414642
    18c0:	75422820 	.word	0x75422820
    18c4:	61462073 	.word	0x61462073
    18c8:	20746c75 	.word	0x20746c75
    18cc:	72646441 	.word	0x72646441
    18d0:	67655220 	.word	0x67655220
    18d4:	203d2029 	.word	0x203d2029
    18d8:	30257830 	.word	0x30257830
    18dc:	000a5838 	.word	0x000a5838
    18e0:	20202020 	.word	0x20202020
    18e4:	52534d4d 	.word	0x52534d4d
    18e8:	654d2820 	.word	0x654d2820
    18ec:	674d206d 	.word	0x674d206d
    18f0:	4620746d 	.word	0x4620746d
    18f4:	746c7561 	.word	0x746c7561
    18f8:	61745320 	.word	0x61745320
    18fc:	20737574 	.word	0x20737574
    1900:	29676552 	.word	0x29676552
    1904:	30203d20 	.word	0x30203d20
    1908:	32302578 	.word	0x32302578
    190c:	00000a58 	.word	0x00000a58
    1910:	20202020 	.word	0x20202020
    1914:	52534642 	.word	0x52534642
    1918:	75422820 	.word	0x75422820
    191c:	61462073 	.word	0x61462073
    1920:	20746c75 	.word	0x20746c75
    1924:	74617453 	.word	0x74617453
    1928:	52207375 	.word	0x52207375
    192c:	20296765 	.word	0x20296765
    1930:	7830203d 	.word	0x7830203d
    1934:	58323025 	.word	0x58323025
    1938:	0000000a 	.word	0x0000000a
    193c:	20202020 	.word	0x20202020
    1940:	52534655 	.word	0x52534655
    1944:	73552820 	.word	0x73552820
    1948:	20656761 	.word	0x20656761
    194c:	6c756146 	.word	0x6c756146
    1950:	74532074 	.word	0x74532074
    1954:	73757461 	.word	0x73757461
    1958:	67655220 	.word	0x67655220
    195c:	203d2029 	.word	0x203d2029
    1960:	30257830 	.word	0x30257830
    1964:	000a5834 	.word	0x000a5834
    1968:	20202020 	.word	0x20202020
    196c:	20202020 	.word	0x20202020
    1970:	52534642 	.word	0x52534642
    1974:	74696220 	.word	0x74696220
    1978:	42203a37 	.word	0x42203a37
    197c:	56524146 	.word	0x56524146
    1980:	44494c41 	.word	0x44494c41
    1984:	0000000a 	.word	0x0000000a
    1988:	20202020 	.word	0x20202020
    198c:	20202020 	.word	0x20202020
    1990:	52534642 	.word	0x52534642
    1994:	74696220 	.word	0x74696220
    1998:	52203a36 	.word	0x52203a36
    199c:	52455345 	.word	0x52455345
    19a0:	0a444556 	.word	0x0a444556
    19a4:	00000000 	.word	0x00000000
    19a8:	20202020 	.word	0x20202020
    19ac:	20202020 	.word	0x20202020
    19b0:	52534642 	.word	0x52534642
    19b4:	74696220 	.word	0x74696220
    19b8:	4c203a35 	.word	0x4c203a35
    19bc:	52455053 	.word	0x52455053
    19c0:	00000a52 	.word	0x00000a52
    19c4:	20202020 	.word	0x20202020
    19c8:	20202020 	.word	0x20202020
    19cc:	52534642 	.word	0x52534642
    19d0:	74696220 	.word	0x74696220
    19d4:	53203a34 	.word	0x53203a34
    19d8:	52454b54 	.word	0x52454b54
    19dc:	00000a52 	.word	0x00000a52
    19e0:	20202020 	.word	0x20202020
    19e4:	20202020 	.word	0x20202020
    19e8:	52534642 	.word	0x52534642
    19ec:	74696220 	.word	0x74696220
    19f0:	55203a33 	.word	0x55203a33
    19f4:	4b54534e 	.word	0x4b54534e
    19f8:	0a525245 	.word	0x0a525245
    19fc:	00000000 	.word	0x00000000
    1a00:	20202020 	.word	0x20202020
    1a04:	20202020 	.word	0x20202020
    1a08:	52534642 	.word	0x52534642
    1a0c:	74696220 	.word	0x74696220
    1a10:	49203a32 	.word	0x49203a32
    1a14:	4552504d 	.word	0x4552504d
    1a18:	45534943 	.word	0x45534943
    1a1c:	000a5252 	.word	0x000a5252
    1a20:	20202020 	.word	0x20202020
    1a24:	20202020 	.word	0x20202020
    1a28:	52534642 	.word	0x52534642
    1a2c:	74696220 	.word	0x74696220
    1a30:	50203a31 	.word	0x50203a31
    1a34:	49434552 	.word	0x49434552
    1a38:	52454553 	.word	0x52454553
    1a3c:	00000a52 	.word	0x00000a52
    1a40:	20202020 	.word	0x20202020
    1a44:	20202020 	.word	0x20202020
    1a48:	52534642 	.word	0x52534642
    1a4c:	74696220 	.word	0x74696220
    1a50:	49203a30 	.word	0x49203a30
    1a54:	45535542 	.word	0x45535542
    1a58:	000a5252 	.word	0x000a5252
    1a5c:	6c6f7041 	.word	0x6c6f7041
    1a60:	20326f6c 	.word	0x20326f6c
    1a64:	6c756146 	.word	0x6c756146
    1a68:	61642074 	.word	0x61642074
    1a6c:	0a3a6174 	.word	0x0a3a6174
    1a70:	00000000 	.word	0x00000000
    1a74:	49202020 	.word	0x49202020
    1a78:	45444f43 	.word	0x45444f43
    1a7c:	75614620 	.word	0x75614620
    1a80:	4120746c 	.word	0x4120746c
    1a84:	65726464 	.word	0x65726464
    1a88:	203a7373 	.word	0x203a7373
    1a8c:	30257830 	.word	0x30257830
    1a90:	000a5838 	.word	0x000a5838
    1a94:	44202020 	.word	0x44202020
    1a98:	45444f43 	.word	0x45444f43
    1a9c:	75614620 	.word	0x75614620
    1aa0:	4120746c 	.word	0x4120746c
    1aa4:	65726464 	.word	0x65726464
    1aa8:	203a7373 	.word	0x203a7373
    1aac:	30257830 	.word	0x30257830
    1ab0:	000a5838 	.word	0x000a5838
    1ab4:	53202020 	.word	0x53202020
    1ab8:	46205359 	.word	0x46205359
    1abc:	746c7561 	.word	0x746c7561
    1ac0:	64644120 	.word	0x64644120
    1ac4:	73736572 	.word	0x73736572
    1ac8:	7830203a 	.word	0x7830203a
    1acc:	58383025 	.word	0x58383025
    1ad0:	0000000a 	.word	0x0000000a
    1ad4:	0a0a0a0a 	.word	0x0a0a0a0a
    1ad8:	0a0a0a0a 	.word	0x0a0a0a0a
    1adc:	0a0a0a0a 	.word	0x0a0a0a0a
    1ae0:	0a0a0a0a 	.word	0x0a0a0a0a
    1ae4:	00000a0a 	.word	0x00000a0a

00001ae8 <CSWTCH.4>:
    1ae8:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1af8:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
