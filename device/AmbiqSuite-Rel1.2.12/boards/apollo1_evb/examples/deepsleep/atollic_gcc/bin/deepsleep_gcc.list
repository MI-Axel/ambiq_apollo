
deepsleep_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001460  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000014  10001000  00001460  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  10001014  00001474  00021014  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021014  2**0
                  CONTENTS, READONLY
  5 .debug_info   00004b84  00000000  00000000  0002104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000163a  00000000  00000000  00025bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000560  00000000  00000000  00027209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000008e8  00000000  00000000  00027769  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a5d  00000000  00000000  00028051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e53  00000000  00000000  0002aaae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002c901  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000d9c  00000000  00000000  0002c980  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000015ff  00000000  00000000  0002d71c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 85 02 00 00 ed 02 00 00 2d 03 00 00     ............-...
      10:	2d 03 00 00 2d 03 00 00 2d 03 00 00 00 00 00 00     -...-...-.......
	...
      2c:	f3 02 00 00 f3 02 00 00 00 00 00 00 f3 02 00 00     ................
      3c:	f3 02 00 00 f3 02 00 00 f3 02 00 00 f3 02 00 00     ................
      4c:	f3 02 00 00 f3 02 00 00 f3 02 00 00 f3 02 00 00     ................
      5c:	f3 02 00 00 f3 02 00 00 f3 02 00 00 f3 02 00 00     ................
      6c:	f3 02 00 00 f3 02 00 00 f3 02 00 00 f3 02 00 00     ................
      7c:	f3 02 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     128:	4b1e      	ldr	r3, [pc, #120]	; (1a4 <uart_init+0x84>)
     12a:	2273      	movs	r2, #115	; 0x73
     12c:	601a      	str	r2, [r3, #0]
     12e:	4a1e      	ldr	r2, [pc, #120]	; (1a8 <uart_init+0x88>)
     130:	4b1d      	ldr	r3, [pc, #116]	; (1a8 <uart_init+0x88>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     138:	6013      	str	r3, [r2, #0]
     13a:	4a1c      	ldr	r2, [pc, #112]	; (1ac <uart_init+0x8c>)
     13c:	4b1b      	ldr	r3, [pc, #108]	; (1ac <uart_init+0x8c>)
     13e:	681b      	ldr	r3, [r3, #0]
     140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     148:	6013      	str	r3, [r2, #0]
     14a:	4b16      	ldr	r3, [pc, #88]	; (1a4 <uart_init+0x84>)
     14c:	2200      	movs	r2, #0
     14e:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
     150:	4b14      	ldr	r3, [pc, #80]	; (1a4 <uart_init+0x84>)
     152:	2273      	movs	r2, #115	; 0x73
     154:	601a      	str	r2, [r3, #0]
     156:	4a14      	ldr	r2, [pc, #80]	; (1a8 <uart_init+0x88>)
     158:	4b13      	ldr	r3, [pc, #76]	; (1a8 <uart_init+0x88>)
     15a:	681b      	ldr	r3, [r3, #0]
     15c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     160:	6013      	str	r3, [r2, #0]
     162:	4a13      	ldr	r2, [pc, #76]	; (1b0 <uart_init+0x90>)
     164:	4b12      	ldr	r3, [pc, #72]	; (1b0 <uart_init+0x90>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     16c:	f043 0312 	orr.w	r3, r3, #18
     170:	6013      	str	r3, [r2, #0]
     172:	4b0c      	ldr	r3, [pc, #48]	; (1a4 <uart_init+0x84>)
     174:	2200      	movs	r2, #0
     176:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     178:	6878      	ldr	r0, [r7, #4]
     17a:	f001 f903 	bl	1384 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     17e:	6878      	ldr	r0, [r7, #4]
     180:	f001 f8f6 	bl	1370 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     184:	490b      	ldr	r1, [pc, #44]	; (1b4 <uart_init+0x94>)
     186:	6878      	ldr	r0, [r7, #4]
     188:	f001 f8b4 	bl	12f4 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     18c:	2112      	movs	r1, #18
     18e:	6878      	ldr	r0, [r7, #4]
     190:	f001 f91c 	bl	13cc <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     194:	6878      	ldr	r0, [r7, #4]
     196:	f001 f8e1 	bl	135c <am_hal_uart_enable>
}
     19a:	bf00      	nop
     19c:	3708      	adds	r7, #8
     19e:	46bd      	mov	sp, r7
     1a0:	bd80      	pop	{r7, pc}
     1a2:	bf00      	nop
     1a4:	40010060 	.word	0x40010060
     1a8:	40010050 	.word	0x40010050
     1ac:	40010020 	.word	0x40010020
     1b0:	40010024 	.word	0x40010024
     1b4:	10001000 	.word	0x10001000

000001b8 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     1b8:	b580      	push	{r7, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	af00      	add	r7, sp, #0
     1be:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     1c0:	200a      	movs	r0, #10
     1c2:	f000 f899 	bl	2f8 <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     1c6:	6878      	ldr	r0, [r7, #4]
     1c8:	f001 f8d2 	bl	1370 <am_hal_uart_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     1cc:	6878      	ldr	r0, [r7, #4]
     1ce:	f001 f8ed 	bl	13ac <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     1d2:	4b16      	ldr	r3, [pc, #88]	; (22c <uart_disable+0x74>)
     1d4:	2273      	movs	r2, #115	; 0x73
     1d6:	601a      	str	r2, [r3, #0]
     1d8:	4a15      	ldr	r2, [pc, #84]	; (230 <uart_disable+0x78>)
     1da:	4b15      	ldr	r3, [pc, #84]	; (230 <uart_disable+0x78>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     1e2:	6013      	str	r3, [r2, #0]
     1e4:	4a13      	ldr	r2, [pc, #76]	; (234 <uart_disable+0x7c>)
     1e6:	4b13      	ldr	r3, [pc, #76]	; (234 <uart_disable+0x7c>)
     1e8:	681b      	ldr	r3, [r3, #0]
     1ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1ee:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     1f2:	6013      	str	r3, [r2, #0]
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <uart_disable+0x74>)
     1f6:	2200      	movs	r2, #0
     1f8:	601a      	str	r2, [r3, #0]
    am_bsp_pin_disable(COM_UART_RX);
     1fa:	4b0c      	ldr	r3, [pc, #48]	; (22c <uart_disable+0x74>)
     1fc:	2273      	movs	r2, #115	; 0x73
     1fe:	601a      	str	r2, [r3, #0]
     200:	4a0b      	ldr	r2, [pc, #44]	; (230 <uart_disable+0x78>)
     202:	4b0b      	ldr	r3, [pc, #44]	; (230 <uart_disable+0x78>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     20a:	6013      	str	r3, [r2, #0]
     20c:	4a0a      	ldr	r2, [pc, #40]	; (238 <uart_disable+0x80>)
     20e:	4b0a      	ldr	r3, [pc, #40]	; (238 <uart_disable+0x80>)
     210:	681b      	ldr	r3, [r3, #0]
     212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     216:	f043 0318 	orr.w	r3, r3, #24
     21a:	6013      	str	r3, [r2, #0]
     21c:	4b03      	ldr	r3, [pc, #12]	; (22c <uart_disable+0x74>)
     21e:	2200      	movs	r2, #0
     220:	601a      	str	r2, [r3, #0]
}
     222:	bf00      	nop
     224:	3708      	adds	r7, #8
     226:	46bd      	mov	sp, r7
     228:	bd80      	pop	{r7, pc}
     22a:	bf00      	nop
     22c:	40010060 	.word	0x40010060
     230:	40010050 	.word	0x40010050
     234:	40010020 	.word	0x40010020
     238:	40010024 	.word	0x40010024

0000023c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     23c:	b580      	push	{r7, lr}
     23e:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     240:	2000      	movs	r0, #0
     242:	f000 ffb5 	bl	11b0 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     246:	f000 ff9d 	bl	1184 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     24a:	480c      	ldr	r0, [pc, #48]	; (27c <main+0x40>)
     24c:	f000 f8ee 	bl	42c <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(AM_BSP_UART_PRINT_INST);
     250:	2000      	movs	r0, #0
     252:	f7ff ff65 	bl	120 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     256:	f000 ff8b 	bl	1170 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Example\n");
     25a:	4809      	ldr	r0, [pc, #36]	; (280 <main+0x44>)
     25c:	f000 ff6a 	bl	1134 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(AM_BSP_UART_PRINT_INST);
     260:	2000      	movs	r0, #0
     262:	f7ff ffa9 	bl	1b8 <uart_disable>

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
     266:	f000 ff8d 	bl	1184 <am_bsp_low_power_init>

#ifdef AM_PART_APOLLO
    //
    // Power down all SRAM banks.
    //
    am_hal_mcuctrl_sram_power_set(AM_HAL_MCUCTRL_SRAM_POWER_DOWN_ALL,
     26a:	21ff      	movs	r1, #255	; 0xff
     26c:	20ff      	movs	r0, #255	; 0xff
     26e:	f000 ffed 	bl	124c <am_hal_mcuctrl_sram_power_set>
    while (1)
    {
        //
        // Go to Deep Sleep and stay there.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     272:	2001      	movs	r0, #1
     274:	f001 f828 	bl	12c8 <am_hal_sysctrl_sleep>
     278:	e7fb      	b.n	272 <main+0x36>
     27a:	bf00      	nop
     27c:	000011a9 	.word	0x000011a9
     280:	00001418 	.word	0x00001418

00000284 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     284:	4811      	ldr	r0, [pc, #68]	; (2cc <zero_loop+0x12>)
     286:	4912      	ldr	r1, [pc, #72]	; (2d0 <zero_loop+0x16>)
     288:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     28a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     28e:	4811      	ldr	r0, [pc, #68]	; (2d4 <zero_loop+0x1a>)
     290:	6801      	ldr	r1, [r0, #0]
     292:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     296:	6001      	str	r1, [r0, #0]
     298:	f3bf 8f4f 	dsb	sy
     29c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     2a0:	480d      	ldr	r0, [pc, #52]	; (2d8 <zero_loop+0x1e>)
     2a2:	490e      	ldr	r1, [pc, #56]	; (2dc <zero_loop+0x22>)
     2a4:	4a0e      	ldr	r2, [pc, #56]	; (2e0 <zero_loop+0x26>)

000002a6 <copy_loop>:
     2a6:	f850 3b04 	ldr.w	r3, [r0], #4
     2aa:	f841 3b04 	str.w	r3, [r1], #4
     2ae:	4291      	cmp	r1, r2
     2b0:	dbf9      	blt.n	2a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     2b2:	480c      	ldr	r0, [pc, #48]	; (2e4 <zero_loop+0x2a>)
     2b4:	490c      	ldr	r1, [pc, #48]	; (2e8 <zero_loop+0x2e>)
     2b6:	f04f 0200 	mov.w	r2, #0

000002ba <zero_loop>:
     2ba:	4288      	cmp	r0, r1
     2bc:	bfb8      	it	lt
     2be:	f840 2b04 	strlt.w	r2, [r0], #4
     2c2:	dbfa      	blt.n	2ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     2c4:	f7ff ffba 	bl	23c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     2c8:	be00      	bkpt	0x0000
}
     2ca:	bf00      	nop
     2cc:	e000ed08 	.word	0xe000ed08
     2d0:	00000000 	.word	0x00000000
     2d4:	e000ed88 	.word	0xe000ed88
     2d8:	00001460 	.word	0x00001460
     2dc:	10001000 	.word	0x10001000
     2e0:	10001014 	.word	0x10001014
     2e4:	10001014 	.word	0x10001014
     2e8:	1000111c 	.word	0x1000111c

000002ec <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     2ec:	b480      	push	{r7}
     2ee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     2f0:	e7fe      	b.n	2f0 <am_nmi_isr+0x4>

000002f2 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     2f2:	b480      	push	{r7}
     2f4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     2f6:	e7fe      	b.n	2f6 <am_adc_isr+0x4>

000002f8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b084      	sub	sp, #16
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     300:	f000 ff66 	bl	11d0 <am_hal_clkgen_sysclk_get>
     304:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     306:	68fb      	ldr	r3, [r7, #12]
     308:	4a07      	ldr	r2, [pc, #28]	; (328 <am_util_delay_ms+0x30>)
     30a:	fba2 2303 	umull	r2, r3, r2, r3
     30e:	099b      	lsrs	r3, r3, #6
     310:	687a      	ldr	r2, [r7, #4]
     312:	fb02 f303 	mul.w	r3, r2, r3
     316:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     318:	68b8      	ldr	r0, [r7, #8]
     31a:	f000 ff6f 	bl	11fc <am_hal_flash_delay>
}
     31e:	bf00      	nop
     320:	3710      	adds	r7, #16
     322:	46bd      	mov	sp, r7
     324:	bd80      	pop	{r7, pc}
     326:	bf00      	nop
     328:	057619f1 	.word	0x057619f1

0000032c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     32c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     32e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     330:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     332:	f000 f809 	bl	348 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     336:	bd01      	pop	{r0, pc}
}
     338:	bf00      	nop
     33a:	4618      	mov	r0, r3

0000033c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     33c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     33e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     340:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     342:	4770      	bx	lr
}
     344:	bf00      	nop
     346:	4618      	mov	r0, r3

00000348 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     348:	b580      	push	{r7, lr}
     34a:	b096      	sub	sp, #88	; 0x58
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     350:	f107 030c 	add.w	r3, r7, #12
     354:	2200      	movs	r2, #0
     356:	601a      	str	r2, [r3, #0]
     358:	605a      	str	r2, [r3, #4]
     35a:	609a      	str	r2, [r3, #8]
     35c:	60da      	str	r2, [r3, #12]
     35e:	611a      	str	r2, [r3, #16]
     360:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     362:	2300      	movs	r3, #0
     364:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     368:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     36a:	4b2e      	ldr	r3, [pc, #184]	; (424 <am_util_faultisr_collect_data+0xdc>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     372:	b2db      	uxtb	r3, r3
     374:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     37a:	0a1b      	lsrs	r3, r3, #8
     37c:	b2db      	uxtb	r3, r3
     37e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     384:	0c1b      	lsrs	r3, r3, #16
     386:	b29b      	uxth	r3, r3
     388:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     38c:	4b26      	ldr	r3, [pc, #152]	; (428 <am_util_faultisr_collect_data+0xe0>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     392:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     396:	b2db      	uxtb	r3, r3
     398:	f003 0302 	and.w	r3, r3, #2
     39c:	2b00      	cmp	r3, #0
     39e:	d005      	beq.n	3ac <am_util_faultisr_collect_data+0x64>
     3a0:	6879      	ldr	r1, [r7, #4]
     3a2:	2006      	movs	r0, #6
     3a4:	f7ff ffca 	bl	33c <getStackedReg>
     3a8:	4603      	mov	r3, r0
     3aa:	e001      	b.n	3b0 <am_util_faultisr_collect_data+0x68>
     3ac:	f04f 33ff 	mov.w	r3, #4294967295
     3b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     3b2:	6879      	ldr	r1, [r7, #4]
     3b4:	2000      	movs	r0, #0
     3b6:	f7ff ffc1 	bl	33c <getStackedReg>
     3ba:	4603      	mov	r3, r0
     3bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     3be:	6879      	ldr	r1, [r7, #4]
     3c0:	2001      	movs	r0, #1
     3c2:	f7ff ffbb 	bl	33c <getStackedReg>
     3c6:	4603      	mov	r3, r0
     3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     3ca:	6879      	ldr	r1, [r7, #4]
     3cc:	2002      	movs	r0, #2
     3ce:	f7ff ffb5 	bl	33c <getStackedReg>
     3d2:	4603      	mov	r3, r0
     3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     3d6:	6879      	ldr	r1, [r7, #4]
     3d8:	2003      	movs	r0, #3
     3da:	f7ff ffaf 	bl	33c <getStackedReg>
     3de:	4603      	mov	r3, r0
     3e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     3e2:	6879      	ldr	r1, [r7, #4]
     3e4:	2004      	movs	r0, #4
     3e6:	f7ff ffa9 	bl	33c <getStackedReg>
     3ea:	4603      	mov	r3, r0
     3ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3ee:	6879      	ldr	r1, [r7, #4]
     3f0:	2005      	movs	r0, #5
     3f2:	f7ff ffa3 	bl	33c <getStackedReg>
     3f6:	4603      	mov	r3, r0
     3f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2006      	movs	r0, #6
     3fe:	f7ff ff9d 	bl	33c <getStackedReg>
     402:	4603      	mov	r3, r0
     404:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     406:	6879      	ldr	r1, [r7, #4]
     408:	2007      	movs	r0, #7
     40a:	f7ff ff97 	bl	33c <getStackedReg>
     40e:	4603      	mov	r3, r0
     410:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     412:	f107 030c 	add.w	r3, r7, #12
     416:	4618      	mov	r0, r3
     418:	f000 fef4 	bl	1204 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     41c:	2300      	movs	r3, #0
     41e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     420:	e7fe      	b.n	420 <am_util_faultisr_collect_data+0xd8>
     422:	bf00      	nop
     424:	e000ed28 	.word	0xe000ed28
     428:	e000ed38 	.word	0xe000ed38

0000042c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     42c:	b480      	push	{r7}
     42e:	b083      	sub	sp, #12
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <am_util_stdio_printf_init+0x1c>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
}
     43a:	bf00      	nop
     43c:	370c      	adds	r7, #12
     43e:	46bd      	mov	sp, r7
     440:	f85d 7b04 	ldr.w	r7, [sp], #4
     444:	4770      	bx	lr
     446:	bf00      	nop
     448:	10001118 	.word	0x10001118

0000044c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     44c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     450:	b096      	sub	sp, #88	; 0x58
     452:	af00      	add	r7, sp, #0
     454:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     458:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     45c:	0025      	movs	r5, r4
     45e:	2600      	movs	r6, #0
     460:	ea55 0306 	orrs.w	r3, r5, r6
     464:	f000 80a0 	beq.w	5a8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     468:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     46c:	0862      	lsrs	r2, r4, #1
     46e:	ea4f 0133 	mov.w	r1, r3, rrx
     472:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     476:	ea4f 0893 	mov.w	r8, r3, lsr #2
     47a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     47e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     482:	eb11 0308 	adds.w	r3, r1, r8
     486:	eb42 0409 	adc.w	r4, r2, r9
     48a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     48e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     492:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     496:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     49a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     49e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4a2:	eb13 030a 	adds.w	r3, r3, sl
     4a6:	eb44 040b 	adc.w	r4, r4, fp
     4aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     4ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4b2:	0a1a      	lsrs	r2, r3, #8
     4b4:	62ba      	str	r2, [r7, #40]	; 0x28
     4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     4b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     4bc:	62ba      	str	r2, [r7, #40]	; 0x28
     4be:	0a23      	lsrs	r3, r4, #8
     4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
     4c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     4ca:	18c9      	adds	r1, r1, r3
     4cc:	eb42 0204 	adc.w	r2, r2, r4
     4d0:	460b      	mov	r3, r1
     4d2:	4614      	mov	r4, r2
     4d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     4d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4dc:	0c1a      	lsrs	r2, r3, #16
     4de:	623a      	str	r2, [r7, #32]
     4e0:	6a3a      	ldr	r2, [r7, #32]
     4e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     4e6:	623a      	str	r2, [r7, #32]
     4e8:	0c23      	lsrs	r3, r4, #16
     4ea:	627b      	str	r3, [r7, #36]	; 0x24
     4ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     4f4:	18c9      	adds	r1, r1, r3
     4f6:	eb42 0204 	adc.w	r2, r2, r4
     4fa:	460b      	mov	r3, r1
     4fc:	4614      	mov	r4, r2
     4fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     502:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     506:	0023      	movs	r3, r4
     508:	603b      	str	r3, [r7, #0]
     50a:	2300      	movs	r3, #0
     50c:	607b      	str	r3, [r7, #4]
     50e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     512:	e897 0006 	ldmia.w	r7, {r1, r2}
     516:	18c9      	adds	r1, r1, r3
     518:	eb42 0204 	adc.w	r2, r2, r4
     51c:	460b      	mov	r3, r1
     51e:	4614      	mov	r4, r2
     520:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     524:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     528:	08da      	lsrs	r2, r3, #3
     52a:	613a      	str	r2, [r7, #16]
     52c:	693a      	ldr	r2, [r7, #16]
     52e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     532:	613a      	str	r2, [r7, #16]
     534:	08e3      	lsrs	r3, r4, #3
     536:	617b      	str	r3, [r7, #20]
     538:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     53c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     540:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     544:	460b      	mov	r3, r1
     546:	4614      	mov	r4, r2
     548:	00a0      	lsls	r0, r4, #2
     54a:	60f8      	str	r0, [r7, #12]
     54c:	68f8      	ldr	r0, [r7, #12]
     54e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     552:	60f8      	str	r0, [r7, #12]
     554:	009b      	lsls	r3, r3, #2
     556:	60bb      	str	r3, [r7, #8]
     558:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     55c:	185b      	adds	r3, r3, r1
     55e:	eb44 0402 	adc.w	r4, r4, r2
     562:	18db      	adds	r3, r3, r3
     564:	eb44 0404 	adc.w	r4, r4, r4
     568:	4619      	mov	r1, r3
     56a:	4622      	mov	r2, r4
     56c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     570:	1a5b      	subs	r3, r3, r1
     572:	eb64 0402 	sbc.w	r4, r4, r2
     576:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     57a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     57e:	3306      	adds	r3, #6
     580:	f144 0400 	adc.w	r4, r4, #0
     584:	091a      	lsrs	r2, r3, #4
     586:	61ba      	str	r2, [r7, #24]
     588:	69ba      	ldr	r2, [r7, #24]
     58a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     58e:	61ba      	str	r2, [r7, #24]
     590:	0923      	lsrs	r3, r4, #4
     592:	61fb      	str	r3, [r7, #28]
     594:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     598:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     59c:	18c9      	adds	r1, r1, r3
     59e:	eb42 0204 	adc.w	r2, r2, r4
     5a2:	460b      	mov	r3, r1
     5a4:	4614      	mov	r4, r2
     5a6:	e029      	b.n	5fc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5aa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ae:	085a      	lsrs	r2, r3, #1
     5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b2:	089b      	lsrs	r3, r3, #2
     5b4:	4413      	add	r3, r2
     5b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ba:	091b      	lsrs	r3, r3, #4
     5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5be:	4413      	add	r3, r2
     5c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5c4:	0a1b      	lsrs	r3, r3, #8
     5c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5c8:	4413      	add	r3, r2
     5ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ce:	0c1b      	lsrs	r3, r3, #16
     5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5d2:	4413      	add	r3, r2
     5d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5d8:	08db      	lsrs	r3, r3, #3
     5da:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     5dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5de:	4613      	mov	r3, r2
     5e0:	009b      	lsls	r3, r3, #2
     5e2:	4413      	add	r3, r2
     5e4:	005b      	lsls	r3, r3, #1
     5e6:	461a      	mov	r2, r3
     5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ea:	1a9b      	subs	r3, r3, r2
     5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5f0:	3306      	adds	r3, #6
     5f2:	091a      	lsrs	r2, r3, #4
     5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5f6:	4413      	add	r3, r2
     5f8:	f04f 0400 	mov.w	r4, #0
    }
}
     5fc:	4618      	mov	r0, r3
     5fe:	4621      	mov	r1, r4
     600:	3758      	adds	r7, #88	; 0x58
     602:	46bd      	mov	sp, r7
     604:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     608:	4770      	bx	lr

0000060a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     60a:	b590      	push	{r4, r7, lr}
     60c:	b085      	sub	sp, #20
     60e:	af00      	add	r7, sp, #0
     610:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     614:	683a      	ldr	r2, [r7, #0]
     616:	687b      	ldr	r3, [r7, #4]
     618:	4313      	orrs	r3, r2
     61a:	2b00      	cmp	r3, #0
     61c:	bf0c      	ite	eq
     61e:	2301      	moveq	r3, #1
     620:	2300      	movne	r3, #0
     622:	b2db      	uxtb	r3, r3
     624:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     626:	e008      	b.n	63a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     628:	e9d7 0100 	ldrd	r0, r1, [r7]
     62c:	f7ff ff0e 	bl	44c <divu64_10>
     630:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     634:	68fb      	ldr	r3, [r7, #12]
     636:	3301      	adds	r3, #1
     638:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     63a:	e897 0018 	ldmia.w	r7, {r3, r4}
     63e:	4323      	orrs	r3, r4
     640:	d1f2      	bne.n	628 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     642:	68fb      	ldr	r3, [r7, #12]
}
     644:	4618      	mov	r0, r3
     646:	3714      	adds	r7, #20
     648:	46bd      	mov	sp, r7
     64a:	bd90      	pop	{r4, r7, pc}

0000064c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     64c:	b590      	push	{r4, r7, lr}
     64e:	b083      	sub	sp, #12
     650:	af00      	add	r7, sp, #0
     652:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     656:	e897 0018 	ldmia.w	r7, {r3, r4}
     65a:	2b00      	cmp	r3, #0
     65c:	f174 0300 	sbcs.w	r3, r4, #0
     660:	da06      	bge.n	670 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     662:	e897 0018 	ldmia.w	r7, {r3, r4}
     666:	425b      	negs	r3, r3
     668:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     66c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     670:	e897 0018 	ldmia.w	r7, {r3, r4}
     674:	4618      	mov	r0, r3
     676:	4621      	mov	r1, r4
     678:	f7ff ffc7 	bl	60a <ndigits_in_u64>
     67c:	4603      	mov	r3, r0
}
     67e:	4618      	mov	r0, r3
     680:	370c      	adds	r7, #12
     682:	46bd      	mov	sp, r7
     684:	bd90      	pop	{r4, r7, pc}

00000686 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     686:	b490      	push	{r4, r7}
     688:	b084      	sub	sp, #16
     68a:	af00      	add	r7, sp, #0
     68c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     690:	6839      	ldr	r1, [r7, #0]
     692:	687a      	ldr	r2, [r7, #4]
     694:	430a      	orrs	r2, r1
     696:	2a00      	cmp	r2, #0
     698:	bf0c      	ite	eq
     69a:	2201      	moveq	r2, #1
     69c:	2200      	movne	r2, #0
     69e:	b2d2      	uxtb	r2, r2
     6a0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     6a2:	e00a      	b.n	6ba <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     6a4:	e897 0006 	ldmia.w	r7, {r1, r2}
     6a8:	090b      	lsrs	r3, r1, #4
     6aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     6ae:	0914      	lsrs	r4, r2, #4
     6b0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     6b4:	68fa      	ldr	r2, [r7, #12]
     6b6:	3201      	adds	r2, #1
     6b8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     6ba:	e897 0006 	ldmia.w	r7, {r1, r2}
     6be:	430a      	orrs	r2, r1
     6c0:	d1f0      	bne.n	6a4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     6c2:	68fb      	ldr	r3, [r7, #12]
}
     6c4:	4618      	mov	r0, r3
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bc90      	pop	{r4, r7}
     6cc:	4770      	bx	lr

000006ce <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     6ce:	b480      	push	{r7}
     6d0:	b087      	sub	sp, #28
     6d2:	af00      	add	r7, sp, #0
     6d4:	6078      	str	r0, [r7, #4]
     6d6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     6d8:	2300      	movs	r3, #0
     6da:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     6dc:	2300      	movs	r3, #0
     6de:	613b      	str	r3, [r7, #16]
     6e0:	2300      	movs	r3, #0
     6e2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b2d      	cmp	r3, #45	; 0x2d
     6ea:	d11b      	bne.n	724 <decstr_to_int+0x56>
    {
        bNeg = true;
     6ec:	2301      	movs	r3, #1
     6ee:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	3301      	adds	r3, #1
     6f4:	607b      	str	r3, [r7, #4]
        uCnt++;
     6f6:	68fb      	ldr	r3, [r7, #12]
     6f8:	3301      	adds	r3, #1
     6fa:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     6fc:	e012      	b.n	724 <decstr_to_int+0x56>
    {
        ++uCnt;
     6fe:	68fb      	ldr	r3, [r7, #12]
     700:	3301      	adds	r3, #1
     702:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     704:	693a      	ldr	r2, [r7, #16]
     706:	4613      	mov	r3, r2
     708:	009b      	lsls	r3, r3, #2
     70a:	4413      	add	r3, r2
     70c:	005b      	lsls	r3, r3, #1
     70e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     710:	687b      	ldr	r3, [r7, #4]
     712:	781b      	ldrb	r3, [r3, #0]
     714:	461a      	mov	r2, r3
     716:	693b      	ldr	r3, [r7, #16]
     718:	4413      	add	r3, r2
     71a:	3b30      	subs	r3, #48	; 0x30
     71c:	613b      	str	r3, [r7, #16]
        pcStr++;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	3301      	adds	r3, #1
     722:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     724:	687b      	ldr	r3, [r7, #4]
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b2f      	cmp	r3, #47	; 0x2f
     72a:	d903      	bls.n	734 <decstr_to_int+0x66>
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2b39      	cmp	r3, #57	; 0x39
     732:	d9e4      	bls.n	6fe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     734:	683b      	ldr	r3, [r7, #0]
     736:	2b00      	cmp	r3, #0
     738:	d002      	beq.n	740 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	68fa      	ldr	r2, [r7, #12]
     73e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     740:	7dfb      	ldrb	r3, [r7, #23]
     742:	2b00      	cmp	r3, #0
     744:	d002      	beq.n	74c <decstr_to_int+0x7e>
     746:	693b      	ldr	r3, [r7, #16]
     748:	425b      	negs	r3, r3
     74a:	e000      	b.n	74e <decstr_to_int+0x80>
     74c:	693b      	ldr	r3, [r7, #16]
}
     74e:	4618      	mov	r0, r3
     750:	371c      	adds	r7, #28
     752:	46bd      	mov	sp, r7
     754:	f85d 7b04 	ldr.w	r7, [sp], #4
     758:	4770      	bx	lr

0000075a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     75a:	b590      	push	{r4, r7, lr}
     75c:	b091      	sub	sp, #68	; 0x44
     75e:	af00      	add	r7, sp, #0
     760:	e9c7 0102 	strd	r0, r1, [r7, #8]
     764:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     766:	2300      	movs	r3, #0
     768:	63fb      	str	r3, [r7, #60]	; 0x3c
     76a:	2300      	movs	r3, #0
     76c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     76e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     772:	f7ff fe6b 	bl	44c <divu64_10>
     776:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     77a:	68b9      	ldr	r1, [r7, #8]
     77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     77e:	4613      	mov	r3, r2
     780:	009b      	lsls	r3, r3, #2
     782:	4413      	add	r3, r2
     784:	005b      	lsls	r3, r3, #1
     786:	1acb      	subs	r3, r1, r3
     788:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     78c:	1c5a      	adds	r2, r3, #1
     78e:	63fa      	str	r2, [r7, #60]	; 0x3c
     790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     792:	b2d2      	uxtb	r2, r2
     794:	3230      	adds	r2, #48	; 0x30
     796:	b2d2      	uxtb	r2, r2
     798:	f107 0140 	add.w	r1, r7, #64	; 0x40
     79c:	440b      	add	r3, r1
     79e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     7a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     7aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     7ae:	4323      	orrs	r3, r4
     7b0:	d1dd      	bne.n	76e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7b4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d011      	beq.n	7e0 <uint64_to_str+0x86>
    {
        while ( ix-- )
     7bc:	e008      	b.n	7d0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	1c5a      	adds	r2, r3, #1
     7c2:	607a      	str	r2, [r7, #4]
     7c4:	f107 0110 	add.w	r1, r7, #16
     7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     7ca:	440a      	add	r2, r1
     7cc:	7812      	ldrb	r2, [r2, #0]
     7ce:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7d2:	1e5a      	subs	r2, r3, #1
     7d4:	63fa      	str	r2, [r7, #60]	; 0x3c
     7d6:	2b00      	cmp	r3, #0
     7d8:	d1f1      	bne.n	7be <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	2200      	movs	r2, #0
     7de:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     7e2:	4618      	mov	r0, r3
     7e4:	3744      	adds	r7, #68	; 0x44
     7e6:	46bd      	mov	sp, r7
     7e8:	bd90      	pop	{r4, r7, pc}

000007ea <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     7ea:	b4b0      	push	{r4, r5, r7}
     7ec:	b08d      	sub	sp, #52	; 0x34
     7ee:	af00      	add	r7, sp, #0
     7f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     7f4:	607a      	str	r2, [r7, #4]
     7f6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     7f8:	2300      	movs	r3, #0
     7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     7fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     800:	4313      	orrs	r3, r2
     802:	d131      	bne.n	868 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     806:	1c5a      	adds	r2, r3, #1
     808:	62fa      	str	r2, [r7, #44]	; 0x2c
     80a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     80e:	4413      	add	r3, r2
     810:	2230      	movs	r2, #48	; 0x30
     812:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     816:	e027      	b.n	868 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     818:	7a3b      	ldrb	r3, [r7, #8]
     81a:	f003 030f 	and.w	r3, r3, #15
     81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     826:	2b09      	cmp	r3, #9
     828:	d90a      	bls.n	840 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     82a:	78fb      	ldrb	r3, [r7, #3]
     82c:	2b00      	cmp	r3, #0
     82e:	d001      	beq.n	834 <uint64_to_hexstr+0x4a>
     830:	2227      	movs	r2, #39	; 0x27
     832:	e000      	b.n	836 <uint64_to_hexstr+0x4c>
     834:	2207      	movs	r2, #7
     836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     83a:	4413      	add	r3, r2
     83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     842:	1c5a      	adds	r2, r3, #1
     844:	62fa      	str	r2, [r7, #44]	; 0x2c
     846:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     84a:	3230      	adds	r2, #48	; 0x30
     84c:	b2d2      	uxtb	r2, r2
     84e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     852:	440b      	add	r3, r1
     854:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     85c:	0914      	lsrs	r4, r2, #4
     85e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     862:	091d      	lsrs	r5, r3, #4
     864:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     86c:	4313      	orrs	r3, r2
     86e:	d1d3      	bne.n	818 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     872:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     874:	687b      	ldr	r3, [r7, #4]
     876:	2b00      	cmp	r3, #0
     878:	d011      	beq.n	89e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     87a:	e008      	b.n	88e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	1c5a      	adds	r2, r3, #1
     880:	607a      	str	r2, [r7, #4]
     882:	f107 0110 	add.w	r1, r7, #16
     886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     888:	440a      	add	r2, r1
     88a:	7812      	ldrb	r2, [r2, #0]
     88c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     890:	1e5a      	subs	r2, r3, #1
     892:	62fa      	str	r2, [r7, #44]	; 0x2c
     894:	2b00      	cmp	r3, #0
     896:	d1f1      	bne.n	87c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	2200      	movs	r2, #0
     89c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     8a0:	4618      	mov	r0, r3
     8a2:	3734      	adds	r7, #52	; 0x34
     8a4:	46bd      	mov	sp, r7
     8a6:	bcb0      	pop	{r4, r5, r7}
     8a8:	4770      	bx	lr

000008aa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     8aa:	b480      	push	{r7}
     8ac:	b085      	sub	sp, #20
     8ae:	af00      	add	r7, sp, #0
     8b0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     8b2:	2300      	movs	r3, #0
     8b4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d104      	bne.n	8c6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	e009      	b.n	8d4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	3301      	adds	r3, #1
     8c4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	1c5a      	adds	r2, r3, #1
     8ca:	607a      	str	r2, [r7, #4]
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d1f6      	bne.n	8c0 <simple_strlen+0x16>
    }
    return ui32RetVal;
     8d2:	68fb      	ldr	r3, [r7, #12]
}
     8d4:	4618      	mov	r0, r3
     8d6:	3714      	adds	r7, #20
     8d8:	46bd      	mov	sp, r7
     8da:	f85d 7b04 	ldr.w	r7, [sp], #4
     8de:	4770      	bx	lr

000008e0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     8e0:	b480      	push	{r7}
     8e2:	b087      	sub	sp, #28
     8e4:	af00      	add	r7, sp, #0
     8e6:	60f8      	str	r0, [r7, #12]
     8e8:	460b      	mov	r3, r1
     8ea:	607a      	str	r2, [r7, #4]
     8ec:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     8ee:	2300      	movs	r3, #0
     8f0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	2b00      	cmp	r3, #0
     8f6:	dc0c      	bgt.n	912 <padbuffer+0x32>
    {
        return i32Cnt;
     8f8:	697b      	ldr	r3, [r7, #20]
     8fa:	e010      	b.n	91e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     8fc:	68fb      	ldr	r3, [r7, #12]
     8fe:	2b00      	cmp	r3, #0
     900:	d004      	beq.n	90c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     902:	68fb      	ldr	r3, [r7, #12]
     904:	1c5a      	adds	r2, r3, #1
     906:	60fa      	str	r2, [r7, #12]
     908:	7afa      	ldrb	r2, [r7, #11]
     90a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     90c:	697b      	ldr	r3, [r7, #20]
     90e:	3301      	adds	r3, #1
     910:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     912:	687b      	ldr	r3, [r7, #4]
     914:	1e5a      	subs	r2, r3, #1
     916:	607a      	str	r2, [r7, #4]
     918:	2b00      	cmp	r3, #0
     91a:	d1ef      	bne.n	8fc <padbuffer+0x1c>
    }

    return i32Cnt;
     91c:	697b      	ldr	r3, [r7, #20]
}
     91e:	4618      	mov	r0, r3
     920:	371c      	adds	r7, #28
     922:	46bd      	mov	sp, r7
     924:	f85d 7b04 	ldr.w	r7, [sp], #4
     928:	4770      	bx	lr
	...

0000092c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     92c:	b590      	push	{r4, r7, lr}
     92e:	b08f      	sub	sp, #60	; 0x3c
     930:	af00      	add	r7, sp, #0
     932:	60f8      	str	r0, [r7, #12]
     934:	60b9      	str	r1, [r7, #8]
     936:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     938:	68bb      	ldr	r3, [r7, #8]
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     940:	2b03      	cmp	r3, #3
     942:	dc02      	bgt.n	94a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     944:	f06f 0302 	mvn.w	r3, #2
     948:	e0e7      	b.n	b1a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     94a:	edd7 7a03 	vldr	s15, [r7, #12]
     94e:	eef5 7a40 	vcmp.f32	s15, #0.0
     952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     956:	d104      	bne.n	962 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     958:	68bb      	ldr	r3, [r7, #8]
     95a:	4a72      	ldr	r2, [pc, #456]	; (b24 <ftoa+0x1f8>)
     95c:	601a      	str	r2, [r3, #0]
        return 3;
     95e:	2303      	movs	r3, #3
     960:	e0db      	b.n	b1a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     962:	68bb      	ldr	r3, [r7, #8]
     964:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     966:	68fb      	ldr	r3, [r7, #12]
     968:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     96a:	693b      	ldr	r3, [r7, #16]
     96c:	15db      	asrs	r3, r3, #23
     96e:	b2db      	uxtb	r3, r3
     970:	3b7f      	subs	r3, #127	; 0x7f
     972:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     974:	693b      	ldr	r3, [r7, #16]
     976:	f3c3 0316 	ubfx	r3, r3, #0, #23
     97a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     97e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     980:	2300      	movs	r3, #0
     982:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     984:	2300      	movs	r3, #0
     986:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     988:	69fb      	ldr	r3, [r7, #28]
     98a:	2b1e      	cmp	r3, #30
     98c:	dd02      	ble.n	994 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     98e:	f06f 0301 	mvn.w	r3, #1
     992:	e0c2      	b.n	b1a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     994:	69fb      	ldr	r3, [r7, #28]
     996:	f113 0f17 	cmn.w	r3, #23
     99a:	da02      	bge.n	9a2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     99c:	f04f 33ff 	mov.w	r3, #4294967295
     9a0:	e0bb      	b.n	b1a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     9a2:	69fb      	ldr	r3, [r7, #28]
     9a4:	2b16      	cmp	r3, #22
     9a6:	dd06      	ble.n	9b6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     9a8:	69fb      	ldr	r3, [r7, #28]
     9aa:	3b17      	subs	r3, #23
     9ac:	69ba      	ldr	r2, [r7, #24]
     9ae:	fa02 f303 	lsl.w	r3, r2, r3
     9b2:	637b      	str	r3, [r7, #52]	; 0x34
     9b4:	e01a      	b.n	9ec <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     9b6:	69fb      	ldr	r3, [r7, #28]
     9b8:	2b00      	cmp	r3, #0
     9ba:	db0f      	blt.n	9dc <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     9bc:	69fb      	ldr	r3, [r7, #28]
     9be:	f1c3 0317 	rsb	r3, r3, #23
     9c2:	69ba      	ldr	r2, [r7, #24]
     9c4:	fa42 f303 	asr.w	r3, r2, r3
     9c8:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     9ca:	69fb      	ldr	r3, [r7, #28]
     9cc:	3301      	adds	r3, #1
     9ce:	69ba      	ldr	r2, [r7, #24]
     9d0:	fa02 f303 	lsl.w	r3, r2, r3
     9d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9d8:	633b      	str	r3, [r7, #48]	; 0x30
     9da:	e007      	b.n	9ec <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     9dc:	69bb      	ldr	r3, [r7, #24]
     9de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     9e2:	69fb      	ldr	r3, [r7, #28]
     9e4:	43db      	mvns	r3, r3
     9e6:	fa42 f303 	asr.w	r3, r2, r3
     9ea:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     9ec:	693b      	ldr	r3, [r7, #16]
     9ee:	2b00      	cmp	r3, #0
     9f0:	da04      	bge.n	9fc <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     9f2:	68bb      	ldr	r3, [r7, #8]
     9f4:	1c5a      	adds	r2, r3, #1
     9f6:	60ba      	str	r2, [r7, #8]
     9f8:	222d      	movs	r2, #45	; 0x2d
     9fa:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9fe:	2b00      	cmp	r3, #0
     a00:	d105      	bne.n	a0e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     a02:	68bb      	ldr	r3, [r7, #8]
     a04:	1c5a      	adds	r2, r3, #1
     a06:	60ba      	str	r2, [r7, #8]
     a08:	2230      	movs	r2, #48	; 0x30
     a0a:	701a      	strb	r2, [r3, #0]
     a0c:	e021      	b.n	a52 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a10:	2b00      	cmp	r3, #0
     a12:	dd08      	ble.n	a26 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a16:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a1a:	68ba      	ldr	r2, [r7, #8]
     a1c:	4618      	mov	r0, r3
     a1e:	4621      	mov	r1, r4
     a20:	f7ff fe9b 	bl	75a <uint64_to_str>
     a24:	e011      	b.n	a4a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     a26:	68bb      	ldr	r3, [r7, #8]
     a28:	1c5a      	adds	r2, r3, #1
     a2a:	60ba      	str	r2, [r7, #8]
     a2c:	222d      	movs	r2, #45	; 0x2d
     a2e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a32:	425b      	negs	r3, r3
     a34:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a38:	68ba      	ldr	r2, [r7, #8]
     a3a:	4618      	mov	r0, r3
     a3c:	4621      	mov	r1, r4
     a3e:	f7ff fe8c 	bl	75a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     a42:	e002      	b.n	a4a <ftoa+0x11e>
        {
            pcBuf++;
     a44:	68bb      	ldr	r3, [r7, #8]
     a46:	3301      	adds	r3, #1
     a48:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     a4a:	68bb      	ldr	r3, [r7, #8]
     a4c:	781b      	ldrb	r3, [r3, #0]
     a4e:	2b00      	cmp	r3, #0
     a50:	d1f8      	bne.n	a44 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     a52:	68bb      	ldr	r3, [r7, #8]
     a54:	1c5a      	adds	r2, r3, #1
     a56:	60ba      	str	r2, [r7, #8]
     a58:	222e      	movs	r2, #46	; 0x2e
     a5a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a5e:	2b00      	cmp	r3, #0
     a60:	d105      	bne.n	a6e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     a62:	68bb      	ldr	r3, [r7, #8]
     a64:	1c5a      	adds	r2, r3, #1
     a66:	60ba      	str	r2, [r7, #8]
     a68:	2230      	movs	r2, #48	; 0x30
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e04f      	b.n	b0e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     a6e:	68ba      	ldr	r2, [r7, #8]
     a70:	6a3b      	ldr	r3, [r7, #32]
     a72:	1ad3      	subs	r3, r2, r3
     a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a76:	1ad3      	subs	r3, r2, r3
     a78:	3b01      	subs	r3, #1
     a7a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     a7c:	697a      	ldr	r2, [r7, #20]
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	4293      	cmp	r3, r2
     a82:	bfa8      	it	ge
     a84:	4613      	movge	r3, r2
     a86:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     a88:	2300      	movs	r3, #0
     a8a:	62bb      	str	r3, [r7, #40]	; 0x28
     a8c:	e015      	b.n	aba <ftoa+0x18e>
        {
            i32FracPart *= 10;
     a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a90:	4613      	mov	r3, r2
     a92:	009b      	lsls	r3, r3, #2
     a94:	4413      	add	r3, r2
     a96:	005b      	lsls	r3, r3, #1
     a98:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     a9a:	68bb      	ldr	r3, [r7, #8]
     a9c:	1c5a      	adds	r2, r3, #1
     a9e:	60ba      	str	r2, [r7, #8]
     aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     aa2:	1612      	asrs	r2, r2, #24
     aa4:	b2d2      	uxtb	r2, r2
     aa6:	3230      	adds	r2, #48	; 0x30
     aa8:	b2d2      	uxtb	r2, r2
     aaa:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     aae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ab2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ab6:	3301      	adds	r3, #1
     ab8:	62bb      	str	r3, [r7, #40]	; 0x28
     aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
     abc:	697b      	ldr	r3, [r7, #20]
     abe:	429a      	cmp	r2, r3
     ac0:	dbe5      	blt.n	a8e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ac4:	4613      	mov	r3, r2
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	4413      	add	r3, r2
     aca:	005b      	lsls	r3, r3, #1
     acc:	161b      	asrs	r3, r3, #24
     ace:	2b04      	cmp	r3, #4
     ad0:	dd1d      	ble.n	b0e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     ad2:	68bb      	ldr	r3, [r7, #8]
     ad4:	3b01      	subs	r3, #1
     ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     ad8:	e015      	b.n	b06 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	2b2e      	cmp	r3, #46	; 0x2e
     ae0:	d00e      	beq.n	b00 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b39      	cmp	r3, #57	; 0x39
     ae8:	d103      	bne.n	af2 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aec:	2230      	movs	r2, #48	; 0x30
     aee:	701a      	strb	r2, [r3, #0]
     af0:	e006      	b.n	b00 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	3301      	adds	r3, #1
     af8:	b2da      	uxtb	r2, r3
     afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     afc:	701a      	strb	r2, [r3, #0]
                    break;
     afe:	e006      	b.n	b0e <ftoa+0x1e2>
                }
                pcBuftmp--;
     b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b02:	3b01      	subs	r3, #1
     b04:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b08:	6a3b      	ldr	r3, [r7, #32]
     b0a:	429a      	cmp	r2, r3
     b0c:	d2e5      	bcs.n	ada <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     b0e:	68bb      	ldr	r3, [r7, #8]
     b10:	2200      	movs	r2, #0
     b12:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     b14:	68ba      	ldr	r2, [r7, #8]
     b16:	6a3b      	ldr	r3, [r7, #32]
     b18:	1ad3      	subs	r3, r2, r3
} // ftoa()
     b1a:	4618      	mov	r0, r3
     b1c:	373c      	adds	r7, #60	; 0x3c
     b1e:	46bd      	mov	sp, r7
     b20:	bd90      	pop	{r4, r7, pc}
     b22:	bf00      	nop
     b24:	00302e30 	.word	0x00302e30

00000b28 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     b28:	b590      	push	{r4, r7, lr}
     b2a:	b095      	sub	sp, #84	; 0x54
     b2c:	af00      	add	r7, sp, #0
     b2e:	60f8      	str	r0, [r7, #12]
     b30:	60b9      	str	r1, [r7, #8]
     b32:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     b34:	2300      	movs	r3, #0
     b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     b38:	2300      	movs	r3, #0
     b3a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     b3c:	e2e3      	b.n	1106 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     b3e:	2306      	movs	r3, #6
     b40:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	2b25      	cmp	r3, #37	; 0x25
     b48:	d01f      	beq.n	b8a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     b4a:	68fb      	ldr	r3, [r7, #12]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d015      	beq.n	b7c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	2b0a      	cmp	r3, #10
     b56:	d10b      	bne.n	b70 <am_util_stdio_vsprintf+0x48>
     b58:	4bb1      	ldr	r3, [pc, #708]	; (e20 <am_util_stdio_vsprintf+0x2f8>)
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d007      	beq.n	b70 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	1c5a      	adds	r2, r3, #1
     b64:	60fa      	str	r2, [r7, #12]
     b66:	220d      	movs	r2, #13
     b68:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b6c:	3301      	adds	r3, #1
     b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	1c5a      	adds	r2, r3, #1
     b74:	60fa      	str	r2, [r7, #12]
     b76:	68ba      	ldr	r2, [r7, #8]
     b78:	7812      	ldrb	r2, [r2, #0]
     b7a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     b7c:	68bb      	ldr	r3, [r7, #8]
     b7e:	3301      	adds	r3, #1
     b80:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b84:	3301      	adds	r3, #1
     b86:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     b88:	e2bd      	b.n	1106 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     b8a:	68bb      	ldr	r3, [r7, #8]
     b8c:	3301      	adds	r3, #1
     b8e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     b90:	2300      	movs	r3, #0
     b92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     b9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     b9e:	2320      	movs	r3, #32
     ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ba4:	68bb      	ldr	r3, [r7, #8]
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	2b30      	cmp	r3, #48	; 0x30
     baa:	d105      	bne.n	bb8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     bac:	2330      	movs	r3, #48	; 0x30
     bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     bb2:	68bb      	ldr	r3, [r7, #8]
     bb4:	3301      	adds	r3, #1
     bb6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     bb8:	f107 0310 	add.w	r3, r7, #16
     bbc:	4619      	mov	r1, r3
     bbe:	68b8      	ldr	r0, [r7, #8]
     bc0:	f7ff fd85 	bl	6ce <decstr_to_int>
     bc4:	4603      	mov	r3, r0
     bc6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     bc8:	693b      	ldr	r3, [r7, #16]
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	4413      	add	r3, r2
     bce:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b73      	cmp	r3, #115	; 0x73
     bd6:	d005      	beq.n	be4 <am_util_stdio_vsprintf+0xbc>
     bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bda:	2b00      	cmp	r3, #0
     bdc:	da02      	bge.n	be4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     be0:	425b      	negs	r3, r3
     be2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     be4:	68bb      	ldr	r3, [r7, #8]
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	2b2e      	cmp	r3, #46	; 0x2e
     bea:	d10e      	bne.n	c0a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	3301      	adds	r3, #1
     bf0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     bf2:	f107 0310 	add.w	r3, r7, #16
     bf6:	4619      	mov	r1, r3
     bf8:	68b8      	ldr	r0, [r7, #8]
     bfa:	f7ff fd68 	bl	6ce <decstr_to_int>
     bfe:	4603      	mov	r3, r0
     c00:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     c02:	693b      	ldr	r3, [r7, #16]
     c04:	68ba      	ldr	r2, [r7, #8]
     c06:	4413      	add	r3, r2
     c08:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	2b6c      	cmp	r3, #108	; 0x6c
     c10:	d10c      	bne.n	c2c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     c12:	68bb      	ldr	r3, [r7, #8]
     c14:	3301      	adds	r3, #1
     c16:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     c18:	68bb      	ldr	r3, [r7, #8]
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b6c      	cmp	r3, #108	; 0x6c
     c1e:	d105      	bne.n	c2c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     c20:	68bb      	ldr	r3, [r7, #8]
     c22:	3301      	adds	r3, #1
     c24:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     c26:	2301      	movs	r3, #1
     c28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     c2c:	68bb      	ldr	r3, [r7, #8]
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	3b46      	subs	r3, #70	; 0x46
     c32:	2b32      	cmp	r3, #50	; 0x32
     c34:	f200 8254 	bhi.w	10e0 <am_util_stdio_vsprintf+0x5b8>
     c38:	a201      	add	r2, pc, #4	; (adr r2, c40 <am_util_stdio_vsprintf+0x118>)
     c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c3e:	bf00      	nop
     c40:	0000106b 	.word	0x0000106b
     c44:	000010e1 	.word	0x000010e1
     c48:	000010e1 	.word	0x000010e1
     c4c:	000010e1 	.word	0x000010e1
     c50:	000010e1 	.word	0x000010e1
     c54:	000010e1 	.word	0x000010e1
     c58:	000010e1 	.word	0x000010e1
     c5c:	000010e1 	.word	0x000010e1
     c60:	000010e1 	.word	0x000010e1
     c64:	000010e1 	.word	0x000010e1
     c68:	000010e1 	.word	0x000010e1
     c6c:	000010e1 	.word	0x000010e1
     c70:	000010e1 	.word	0x000010e1
     c74:	000010e1 	.word	0x000010e1
     c78:	000010e1 	.word	0x000010e1
     c7c:	000010e1 	.word	0x000010e1
     c80:	000010e1 	.word	0x000010e1
     c84:	000010e1 	.word	0x000010e1
     c88:	00000e07 	.word	0x00000e07
     c8c:	000010e1 	.word	0x000010e1
     c90:	000010e1 	.word	0x000010e1
     c94:	000010e1 	.word	0x000010e1
     c98:	000010e1 	.word	0x000010e1
     c9c:	000010e1 	.word	0x000010e1
     ca0:	000010e1 	.word	0x000010e1
     ca4:	000010e1 	.word	0x000010e1
     ca8:	000010e1 	.word	0x000010e1
     cac:	000010e1 	.word	0x000010e1
     cb0:	000010e1 	.word	0x000010e1
     cb4:	00000d0d 	.word	0x00000d0d
     cb8:	00000f33 	.word	0x00000f33
     cbc:	000010e1 	.word	0x000010e1
     cc0:	0000106b 	.word	0x0000106b
     cc4:	000010e1 	.word	0x000010e1
     cc8:	000010e1 	.word	0x000010e1
     ccc:	00000f33 	.word	0x00000f33
     cd0:	000010e1 	.word	0x000010e1
     cd4:	000010e1 	.word	0x000010e1
     cd8:	000010e1 	.word	0x000010e1
     cdc:	000010e1 	.word	0x000010e1
     ce0:	000010e1 	.word	0x000010e1
     ce4:	000010e1 	.word	0x000010e1
     ce8:	000010e1 	.word	0x000010e1
     cec:	000010e1 	.word	0x000010e1
     cf0:	000010e1 	.word	0x000010e1
     cf4:	00000d33 	.word	0x00000d33
     cf8:	000010e1 	.word	0x000010e1
     cfc:	00000ea1 	.word	0x00000ea1
     d00:	000010e1 	.word	0x000010e1
     d04:	000010e1 	.word	0x000010e1
     d08:	00000e01 	.word	0x00000e01
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	1d1a      	adds	r2, r3, #4
     d10:	607a      	str	r2, [r7, #4]
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d005      	beq.n	d2a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	1c5a      	adds	r2, r3, #1
     d22:	60fa      	str	r2, [r7, #12]
     d24:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     d28:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d2c:	3301      	adds	r3, #1
     d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     d30:	e1e6      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	1d1a      	adds	r2, r3, #4
     d36:	607a      	str	r2, [r7, #4]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     d3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     d3e:	f7ff fdb4 	bl	8aa <simple_strlen>
     d42:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d46:	2b00      	cmp	r3, #0
     d48:	dd2e      	ble.n	da8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d4e:	429a      	cmp	r2, r3
     d50:	d22a      	bcs.n	da8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d56:	1ad3      	subs	r3, r2, r3
     d58:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d60:	4619      	mov	r1, r3
     d62:	68f8      	ldr	r0, [r7, #12]
     d64:	f7ff fdbc 	bl	8e0 <padbuffer>
     d68:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d001      	beq.n	d74 <am_util_stdio_vsprintf+0x24c>
     d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d72:	e000      	b.n	d76 <am_util_stdio_vsprintf+0x24e>
     d74:	2300      	movs	r3, #0
     d76:	68fa      	ldr	r2, [r7, #12]
     d78:	4413      	add	r3, r2
     d7a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d80:	4413      	add	r3, r2
     d82:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     d84:	2300      	movs	r3, #0
     d86:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     d88:	e00e      	b.n	da8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d005      	beq.n	d9c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	1c5a      	adds	r2, r3, #1
     d94:	60fa      	str	r2, [r7, #12]
     d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     d98:	7812      	ldrb	r2, [r2, #0]
     d9a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d9e:	3301      	adds	r3, #1
     da0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     da4:	3301      	adds	r3, #1
     da6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	2b00      	cmp	r3, #0
     dae:	d1ec      	bne.n	d8a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     db2:	2b00      	cmp	r3, #0
     db4:	f000 81a1 	beq.w	10fa <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dba:	425b      	negs	r3, r3
     dbc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     dc2:	429a      	cmp	r2, r3
     dc4:	f080 8199 	bcs.w	10fa <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dcc:	1ad3      	subs	r3, r2, r3
     dce:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     dd6:	4619      	mov	r1, r3
     dd8:	68f8      	ldr	r0, [r7, #12]
     dda:	f7ff fd81 	bl	8e0 <padbuffer>
     dde:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	2b00      	cmp	r3, #0
     de4:	d001      	beq.n	dea <am_util_stdio_vsprintf+0x2c2>
     de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     de8:	e000      	b.n	dec <am_util_stdio_vsprintf+0x2c4>
     dea:	2300      	movs	r3, #0
     dec:	68fa      	ldr	r2, [r7, #12]
     dee:	4413      	add	r3, r2
     df0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     df6:	4413      	add	r3, r2
     df8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     dfe:	e17c      	b.n	10fa <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     e00:	2301      	movs	r3, #1
     e02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e0a:	2b00      	cmp	r3, #0
     e0c:	d00a      	beq.n	e24 <am_util_stdio_vsprintf+0x2fc>
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	3307      	adds	r3, #7
     e12:	f023 0307 	bic.w	r3, r3, #7
     e16:	f103 0208 	add.w	r2, r3, #8
     e1a:	607a      	str	r2, [r7, #4]
     e1c:	cb18      	ldmia	r3, {r3, r4}
     e1e:	e007      	b.n	e30 <am_util_stdio_vsprintf+0x308>
     e20:	10001114 	.word	0x10001114
                                      va_arg(pArgs, uint32_t);
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	1d1a      	adds	r2, r3, #4
     e28:	607a      	str	r2, [r7, #4]
     e2a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e2c:	f04f 0400 	mov.w	r4, #0
     e30:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e36:	2b00      	cmp	r3, #0
     e38:	d01e      	beq.n	e78 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     e3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e3e:	f7ff fc22 	bl	686 <ndigits_in_hex>
     e42:	4602      	mov	r2, r0
     e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e46:	1a9b      	subs	r3, r3, r2
     e48:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e50:	4619      	mov	r1, r3
     e52:	68f8      	ldr	r0, [r7, #12]
     e54:	f7ff fd44 	bl	8e0 <padbuffer>
     e58:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     e5a:	68fb      	ldr	r3, [r7, #12]
     e5c:	2b00      	cmp	r3, #0
     e5e:	d001      	beq.n	e64 <am_util_stdio_vsprintf+0x33c>
     e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e62:	e000      	b.n	e66 <am_util_stdio_vsprintf+0x33e>
     e64:	2300      	movs	r3, #0
     e66:	68fa      	ldr	r2, [r7, #12]
     e68:	4413      	add	r3, r2
     e6a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e70:	4413      	add	r3, r2
     e72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     e74:	2300      	movs	r3, #0
     e76:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     e78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     e7c:	68fa      	ldr	r2, [r7, #12]
     e7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e82:	f7ff fcb2 	bl	7ea <uint64_to_hexstr>
     e86:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d003      	beq.n	e96 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e90:	68fa      	ldr	r2, [r7, #12]
     e92:	4413      	add	r3, r2
     e94:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e9a:	4413      	add	r3, r2
     e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e9e:	e12f      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ea4:	2b00      	cmp	r3, #0
     ea6:	d008      	beq.n	eba <am_util_stdio_vsprintf+0x392>
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	3307      	adds	r3, #7
     eac:	f023 0307 	bic.w	r3, r3, #7
     eb0:	f103 0208 	add.w	r2, r3, #8
     eb4:	607a      	str	r2, [r7, #4]
     eb6:	cb18      	ldmia	r3, {r3, r4}
     eb8:	e005      	b.n	ec6 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	1d1a      	adds	r2, r3, #4
     ebe:	607a      	str	r2, [r7, #4]
     ec0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ec2:	f04f 0400 	mov.w	r4, #0
     ec6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ecc:	2b00      	cmp	r3, #0
     ece:	d01e      	beq.n	f0e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     ed0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ed4:	f7ff fb99 	bl	60a <ndigits_in_u64>
     ed8:	4602      	mov	r2, r0
     eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     edc:	1a9b      	subs	r3, r3, r2
     ede:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ee6:	4619      	mov	r1, r3
     ee8:	68f8      	ldr	r0, [r7, #12]
     eea:	f7ff fcf9 	bl	8e0 <padbuffer>
     eee:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d001      	beq.n	efa <am_util_stdio_vsprintf+0x3d2>
     ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef8:	e000      	b.n	efc <am_util_stdio_vsprintf+0x3d4>
     efa:	2300      	movs	r3, #0
     efc:	68fa      	ldr	r2, [r7, #12]
     efe:	4413      	add	r3, r2
     f00:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f06:	4413      	add	r3, r2
     f08:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f0a:	2300      	movs	r3, #0
     f0c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     f0e:	68fa      	ldr	r2, [r7, #12]
     f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f14:	f7ff fc21 	bl	75a <uint64_to_str>
     f18:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f1a:	68fb      	ldr	r3, [r7, #12]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d003      	beq.n	f28 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f22:	68fa      	ldr	r2, [r7, #12]
     f24:	4413      	add	r3, r2
     f26:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f2c:	4413      	add	r3, r2
     f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f30:	e0e6      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f36:	2b00      	cmp	r3, #0
     f38:	d008      	beq.n	f4c <am_util_stdio_vsprintf+0x424>
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	3307      	adds	r3, #7
     f3e:	f023 0307 	bic.w	r3, r3, #7
     f42:	f103 0208 	add.w	r2, r3, #8
     f46:	607a      	str	r2, [r7, #4]
     f48:	cb18      	ldmia	r3, {r3, r4}
     f4a:	e005      	b.n	f58 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
     f4c:	687b      	ldr	r3, [r7, #4]
     f4e:	1d1a      	adds	r2, r3, #4
     f50:	607a      	str	r2, [r7, #4]
     f52:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f54:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f58:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
     f5c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f60:	2b00      	cmp	r3, #0
     f62:	f174 0300 	sbcs.w	r3, r4, #0
     f66:	da0a      	bge.n	f7e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
     f68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f6c:	425b      	negs	r3, r3
     f6e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     f72:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
     f76:	2301      	movs	r3, #1
     f78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     f7c:	e006      	b.n	f8c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
     f7e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f82:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
     f86:	2300      	movs	r3, #0
     f88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
     f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f8e:	2b00      	cmp	r3, #0
     f90:	d04a      	beq.n	1028 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
     f92:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
     f96:	4618      	mov	r0, r3
     f98:	4621      	mov	r1, r4
     f9a:	f7ff fb57 	bl	64c <ndigits_in_i64>
     f9e:	4602      	mov	r2, r0
     fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa2:	1a9b      	subs	r3, r3, r2
     fa4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
     fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     faa:	2b00      	cmp	r3, #0
     fac:	d011      	beq.n	fd2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
     fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb0:	3b01      	subs	r3, #1
     fb2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
     fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fb8:	2b30      	cmp	r3, #48	; 0x30
     fba:	d10a      	bne.n	fd2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d004      	beq.n	fcc <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	1c5a      	adds	r2, r3, #1
     fc6:	60fa      	str	r2, [r7, #12]
     fc8:	222d      	movs	r2, #45	; 0x2d
     fca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
     fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fce:	3301      	adds	r3, #1
     fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fd8:	4619      	mov	r1, r3
     fda:	68f8      	ldr	r0, [r7, #12]
     fdc:	f7ff fc80 	bl	8e0 <padbuffer>
     fe0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d001      	beq.n	fec <am_util_stdio_vsprintf+0x4c4>
     fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fea:	e000      	b.n	fee <am_util_stdio_vsprintf+0x4c6>
     fec:	2300      	movs	r3, #0
     fee:	68fa      	ldr	r2, [r7, #12]
     ff0:	4413      	add	r3, r2
     ff2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ff8:	4413      	add	r3, r2
     ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     ffc:	2300      	movs	r3, #0
     ffe:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1004:	2b00      	cmp	r3, #0
    1006:	d01e      	beq.n	1046 <am_util_stdio_vsprintf+0x51e>
    1008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    100c:	2b20      	cmp	r3, #32
    100e:	d11a      	bne.n	1046 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	2b00      	cmp	r3, #0
    1014:	d004      	beq.n	1020 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	60fa      	str	r2, [r7, #12]
    101c:	222d      	movs	r2, #45	; 0x2d
    101e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1022:	3301      	adds	r3, #1
    1024:	63fb      	str	r3, [r7, #60]	; 0x3c
    1026:	e00e      	b.n	1046 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    102c:	2b00      	cmp	r3, #0
    102e:	d00a      	beq.n	1046 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1036:	68fb      	ldr	r3, [r7, #12]
    1038:	1c5a      	adds	r2, r3, #1
    103a:	60fa      	str	r2, [r7, #12]
    103c:	222d      	movs	r2, #45	; 0x2d
    103e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1042:	3301      	adds	r3, #1
    1044:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1046:	68fa      	ldr	r2, [r7, #12]
    1048:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    104c:	f7ff fb85 	bl	75a <uint64_to_str>
    1050:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	2b00      	cmp	r3, #0
    1056:	d003      	beq.n	1060 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    105a:	68fa      	ldr	r2, [r7, #12]
    105c:	4413      	add	r3, r2
    105e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1064:	4413      	add	r3, r2
    1066:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1068:	e04a      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	2b00      	cmp	r3, #0
    106e:	d046      	beq.n	10fe <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	3307      	adds	r3, #7
    1074:	f023 0307 	bic.w	r3, r3, #7
    1078:	f103 0208 	add.w	r2, r3, #8
    107c:	607a      	str	r2, [r7, #4]
    107e:	cb18      	ldmia	r3, {r3, r4}
    1080:	4618      	mov	r0, r3
    1082:	4621      	mov	r1, r4
    1084:	f7fe fffc 	bl	80 <__aeabi_d2f>
    1088:	4603      	mov	r3, r0
    108a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    108c:	68fb      	ldr	r3, [r7, #12]
    108e:	2214      	movs	r2, #20
    1090:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1094:	68f9      	ldr	r1, [r7, #12]
    1096:	6978      	ldr	r0, [r7, #20]
    1098:	f7ff fc48 	bl	92c <ftoa>
    109c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10a0:	2b00      	cmp	r3, #0
    10a2:	da14      	bge.n	10ce <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    10a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    10aa:	d102      	bne.n	10b2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    10ac:	4b1e      	ldr	r3, [pc, #120]	; (1128 <am_util_stdio_vsprintf+0x600>)
    10ae:	62bb      	str	r3, [r7, #40]	; 0x28
    10b0:	e008      	b.n	10c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    10b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10b4:	f113 0f02 	cmn.w	r3, #2
    10b8:	d102      	bne.n	10c0 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    10ba:	4b1c      	ldr	r3, [pc, #112]	; (112c <am_util_stdio_vsprintf+0x604>)
    10bc:	62bb      	str	r3, [r7, #40]	; 0x28
    10be:	e001      	b.n	10c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    10c0:	4b1b      	ldr	r3, [pc, #108]	; (1130 <am_util_stdio_vsprintf+0x608>)
    10c2:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    10c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    10ca:	2303      	movs	r3, #3
    10cc:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    10ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10d2:	4413      	add	r3, r2
    10d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    10d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d8:	68fa      	ldr	r2, [r7, #12]
    10da:	4413      	add	r3, r2
    10dc:	60fb      	str	r3, [r7, #12]
                }
                break;
    10de:	e00e      	b.n	10fe <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d005      	beq.n	10f2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	1c5a      	adds	r2, r3, #1
    10ea:	60fa      	str	r2, [r7, #12]
    10ec:	68ba      	ldr	r2, [r7, #8]
    10ee:	7812      	ldrb	r2, [r2, #0]
    10f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10f4:	3301      	adds	r3, #1
    10f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10f8:	e002      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                break;
    10fa:	bf00      	nop
    10fc:	e000      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                break;
    10fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1100:	68bb      	ldr	r3, [r7, #8]
    1102:	3301      	adds	r3, #1
    1104:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1106:	68bb      	ldr	r3, [r7, #8]
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	f47f ad17 	bne.w	b3e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	2b00      	cmp	r3, #0
    1114:	d002      	beq.n	111c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1116:	68fb      	ldr	r3, [r7, #12]
    1118:	2200      	movs	r2, #0
    111a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    111e:	4618      	mov	r0, r3
    1120:	3754      	adds	r7, #84	; 0x54
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	00302e30 	.word	0x00302e30
    112c:	00232e23 	.word	0x00232e23
    1130:	003f2e3f 	.word	0x003f2e3f

00001134 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1134:	b40f      	push	{r0, r1, r2, r3}
    1136:	b580      	push	{r7, lr}
    1138:	b082      	sub	sp, #8
    113a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    113c:	f107 0314 	add.w	r3, r7, #20
    1140:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1142:	683a      	ldr	r2, [r7, #0]
    1144:	6939      	ldr	r1, [r7, #16]
    1146:	4808      	ldr	r0, [pc, #32]	; (1168 <am_util_stdio_printf+0x34>)
    1148:	f7ff fcee 	bl	b28 <am_util_stdio_vsprintf>
    114c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    114e:	4b07      	ldr	r3, [pc, #28]	; (116c <am_util_stdio_printf+0x38>)
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	4805      	ldr	r0, [pc, #20]	; (1168 <am_util_stdio_printf+0x34>)
    1154:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1156:	687b      	ldr	r3, [r7, #4]
}
    1158:	4618      	mov	r0, r3
    115a:	3708      	adds	r7, #8
    115c:	46bd      	mov	sp, r7
    115e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1162:	b004      	add	sp, #16
    1164:	4770      	bx	lr
    1166:	bf00      	nop
    1168:	10001014 	.word	0x10001014
    116c:	10001118 	.word	0x10001118

00001170 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1170:	b580      	push	{r7, lr}
    1172:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1174:	4802      	ldr	r0, [pc, #8]	; (1180 <am_util_stdio_terminal_clear+0x10>)
    1176:	f7ff ffdd 	bl	1134 <am_util_stdio_printf>
}
    117a:	bf00      	nop
    117c:	bd80      	pop	{r7, pc}
    117e:	bf00      	nop
    1180:	0000142c 	.word	0x0000142c

00001184 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1184:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1186:	f000 f873 	bl	1270 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    118a:	f000 f93f 	bl	140c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    118e:	2001      	movs	r0, #1
    1190:	f000 f884 	bl	129c <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1194:	2001      	movs	r0, #1
    1196:	f000 f827 	bl	11e8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    119a:	f000 f88d 	bl	12b8 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    119e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    11a2:	f000 b85d 	b.w	1260 <am_hal_mcuctrl_bandgap_disable>
    11a6:	bf00      	nop

000011a8 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(0, pcString);
    11a8:	4601      	mov	r1, r0
    11aa:	2000      	movs	r0, #0
    11ac:	f000 b91a 	b.w	13e4 <am_hal_uart_string_transmit_polled>

000011b0 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    11b0:	4b05      	ldr	r3, [pc, #20]	; (11c8 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    11b2:	4906      	ldr	r1, [pc, #24]	; (11cc <am_hal_clkgen_sysclk_select+0x1c>)
{
    11b4:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    11b6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    11b8:	2447      	movs	r4, #71	; 0x47
    11ba:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    11bc:	6008      	str	r0, [r1, #0]
}
    11be:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    11c2:	601a      	str	r2, [r3, #0]
}
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop
    11c8:	40004014 	.word	0x40004014
    11cc:	40004018 	.word	0x40004018

000011d0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <am_hal_clkgen_sysclk_get+0x10>)
    11d2:	4a04      	ldr	r2, [pc, #16]	; (11e4 <am_hal_clkgen_sysclk_get+0x14>)
    11d4:	6818      	ldr	r0, [r3, #0]
    11d6:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    11da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    11de:	4770      	bx	lr
    11e0:	40004018 	.word	0x40004018
    11e4:	00001440 	.word	0x00001440

000011e8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    11e8:	0783      	lsls	r3, r0, #30
    11ea:	d003      	beq.n	11f4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    11ec:	4b02      	ldr	r3, [pc, #8]	; (11f8 <am_hal_clkgen_osc_stop+0x10>)
    11ee:	681a      	ldr	r2, [r3, #0]
    11f0:	4310      	orrs	r0, r2
    11f2:	6018      	str	r0, [r3, #0]
    11f4:	4770      	bx	lr
    11f6:	bf00      	nop
    11f8:	4000400c 	.word	0x4000400c

000011fc <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    11fc:	3801      	subs	r0, #1
    11fe:	f47f affd 	bne.w	11fc <am_hal_flash_delay>
    1202:	4770      	bx	lr

00001204 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1204:	490d      	ldr	r1, [pc, #52]	; (123c <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1206:	4b0e      	ldr	r3, [pc, #56]	; (1240 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1208:	4a0e      	ldr	r2, [pc, #56]	; (1244 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    120a:	681b      	ldr	r3, [r3, #0]
{
    120c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    120e:	680d      	ldr	r5, [r1, #0]
    1210:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1212:	6815      	ldr	r5, [r2, #0]
    1214:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1216:	4c0c      	ldr	r4, [pc, #48]	; (1248 <am_hal_mcuctrl_fault_status+0x44>)
    1218:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    121a:	4329      	orrs	r1, r5
    121c:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    121e:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1220:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1224:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1226:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1228:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    122c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1230:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1232:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1234:	6142      	str	r2, [r0, #20]
}
    1236:	bc70      	pop	{r4, r5, r6}
    1238:	4770      	bx	lr
    123a:	bf00      	nop
    123c:	400201c4 	.word	0x400201c4
    1240:	400201cc 	.word	0x400201cc
    1244:	400201c0 	.word	0x400201c0
    1248:	400201c8 	.word	0x400201c8

0000124c <am_hal_mcuctrl_sram_power_set>:
                              uint32_t ui32SRAMPowerDeepSleep)
{
    //
    // Write desired SRAM power state.
    //
    AM_REG(MCUCTRL, SRAMPWRDIS) = ui32SRAMPower;
    124c:	4a02      	ldr	r2, [pc, #8]	; (1258 <am_hal_mcuctrl_sram_power_set+0xc>)

    //
    // Write desired SRAM deep sleep power state.
    //
    AM_REG(MCUCTRL, SRAMPWDINSLEEP) = ui32SRAMPowerDeepSleep;
    124e:	4b03      	ldr	r3, [pc, #12]	; (125c <am_hal_mcuctrl_sram_power_set+0x10>)
    AM_REG(MCUCTRL, SRAMPWRDIS) = ui32SRAMPower;
    1250:	6010      	str	r0, [r2, #0]
    AM_REG(MCUCTRL, SRAMPWDINSLEEP) = ui32SRAMPowerDeepSleep;
    1252:	6019      	str	r1, [r3, #0]
    1254:	4770      	bx	lr
    1256:	bf00      	nop
    1258:	40020144 	.word	0x40020144
    125c:	40020140 	.word	0x40020140

00001260 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    1260:	4b02      	ldr	r3, [pc, #8]	; (126c <am_hal_mcuctrl_bandgap_disable+0xc>)
    1262:	f06f 0201 	mvn.w	r2, #1
    1266:	601a      	str	r2, [r3, #0]
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	400200fc 	.word	0x400200fc

00001270 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1270:	4b08      	ldr	r3, [pc, #32]	; (1294 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1272:	4a09      	ldr	r2, [pc, #36]	; (1298 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1274:	6819      	ldr	r1, [r3, #0]
    1276:	f041 0002 	orr.w	r0, r1, #2
    127a:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    127c:	6819      	ldr	r1, [r3, #0]
    127e:	f041 0001 	orr.w	r0, r1, #1
    1282:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1284:	6813      	ldr	r3, [r2, #0]
    1286:	0799      	lsls	r1, r3, #30
    1288:	d5fc      	bpl.n	1284 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    128a:	4a03      	ldr	r2, [pc, #12]	; (1298 <am_hal_mcuctrl_bucks_enable+0x28>)
    128c:	6811      	ldr	r1, [r2, #0]
    128e:	07cb      	lsls	r3, r1, #31
    1290:	d5fc      	bpl.n	128c <am_hal_mcuctrl_bucks_enable+0x1c>
}
    1292:	4770      	bx	lr
    1294:	40020010 	.word	0x40020010
    1298:	40020014 	.word	0x40020014

0000129c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    129c:	4a05      	ldr	r2, [pc, #20]	; (12b4 <am_hal_rtc_osc_select+0x18>)
    129e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    12a0:	b918      	cbnz	r0, 12aa <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    12a2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    12a6:	6010      	str	r0, [r2, #0]
    12a8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    12aa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    12ae:	6011      	str	r1, [r2, #0]
    12b0:	4770      	bx	lr
    12b2:	bf00      	nop
    12b4:	4000400c 	.word	0x4000400c

000012b8 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    12b8:	4a02      	ldr	r2, [pc, #8]	; (12c4 <am_hal_rtc_osc_disable+0xc>)
    12ba:	6813      	ldr	r3, [r2, #0]
    12bc:	f043 0010 	orr.w	r0, r3, #16
    12c0:	6010      	str	r0, [r2, #0]
    12c2:	4770      	bx	lr
    12c4:	40004050 	.word	0x40004050

000012c8 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    12c8:	4a08      	ldr	r2, [pc, #32]	; (12ec <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    12ca:	b118      	cbz	r0, 12d4 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <am_hal_sysctrl_sleep+0x28>)
    12ce:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    12d0:	07c3      	lsls	r3, r0, #31
    12d2:	d505      	bpl.n	12e0 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    12d4:	6811      	ldr	r1, [r2, #0]
    12d6:	f021 0304 	bic.w	r3, r1, #4
    12da:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    12dc:	bf30      	wfi
    12de:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    12e0:	6810      	ldr	r0, [r2, #0]
    12e2:	f040 0104 	orr.w	r1, r0, #4
    12e6:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    12e8:	bf30      	wfi
    12ea:	4770      	bx	lr
    12ec:	e000ed10 	.word	0xe000ed10
    12f0:	40020250 	.word	0x40020250

000012f4 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    12f4:	b570      	push	{r4, r5, r6, lr}
    12f6:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    12f8:	680d      	ldr	r5, [r1, #0]
    12fa:	f7ff ff69 	bl	11d0 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    12fe:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1300:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    1304:	b30a      	cbz	r2, 134a <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1306:	4d11      	ldr	r5, [pc, #68]	; (134c <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    1308:	4e11      	ldr	r6, [pc, #68]	; (1350 <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    130a:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    130c:	0183      	lsls	r3, r0, #6
    130e:	fbb3 f0f1 	udiv	r0, r3, r1
    1312:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1316:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1318:	490e      	ldr	r1, [pc, #56]	; (1354 <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    131a:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    131c:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    131e:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1320:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1322:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    1324:	4a0c      	ldr	r2, [pc, #48]	; (1358 <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1326:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1328:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    132a:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    132e:	bf14      	ite	ne
    1330:	2008      	movne	r0, #8
    1332:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1334:	4303      	orrs	r3, r0
    1336:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    1338:	6811      	ldr	r1, [r2, #0]
    133a:	6924      	ldr	r4, [r4, #16]
    133c:	4321      	orrs	r1, r4
    133e:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1340:	6813      	ldr	r3, [r2, #0]
    1342:	f043 0610 	orr.w	r6, r3, #16
    1346:	6016      	str	r6, [r2, #0]
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	e7fe      	b.n	134a <am_hal_uart_config+0x56>
    134c:	4001c024 	.word	0x4001c024
    1350:	4001c028 	.word	0x4001c028
    1354:	4001c02c 	.word	0x4001c02c
    1358:	4001c030 	.word	0x4001c030

0000135c <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    135c:	4a03      	ldr	r2, [pc, #12]	; (136c <am_hal_uart_enable+0x10>)
    135e:	6813      	ldr	r3, [r2, #0]
    1360:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    1364:	f040 0101 	orr.w	r1, r0, #1
    1368:	6011      	str	r1, [r2, #0]
    136a:	4770      	bx	lr
    136c:	4001c030 	.word	0x4001c030

00001370 <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    1370:	4a03      	ldr	r2, [pc, #12]	; (1380 <am_hal_uart_disable+0x10>)
    1372:	6813      	ldr	r3, [r2, #0]
    1374:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    1378:	f020 0101 	bic.w	r1, r0, #1
    137c:	6011      	str	r1, [r2, #0]
    137e:	4770      	bx	lr
    1380:	4001c030 	.word	0x4001c030

00001384 <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1384:	4907      	ldr	r1, [pc, #28]	; (13a4 <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    1386:	4b08      	ldr	r3, [pc, #32]	; (13a8 <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1388:	680a      	ldr	r2, [r1, #0]
    138a:	f042 0001 	orr.w	r0, r2, #1
    138e:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    1390:	6819      	ldr	r1, [r3, #0]
    1392:	f041 0208 	orr.w	r2, r1, #8
    1396:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1398:	6818      	ldr	r0, [r3, #0]
    139a:	f040 0110 	orr.w	r1, r0, #16
    139e:	6019      	str	r1, [r3, #0]
    13a0:	4770      	bx	lr
    13a2:	bf00      	nop
    13a4:	4000402c 	.word	0x4000402c
    13a8:	4001c030 	.word	0x4001c030

000013ac <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    13ac:	4905      	ldr	r1, [pc, #20]	; (13c4 <am_hal_uart_clock_disable+0x18>)

    //
    // Disable the UART clock in the CLKGEN module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    13ae:	4a06      	ldr	r2, [pc, #24]	; (13c8 <am_hal_uart_clock_disable+0x1c>)
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    13b0:	680b      	ldr	r3, [r1, #0]
    13b2:	f023 0008 	bic.w	r0, r3, #8
    13b6:	6008      	str	r0, [r1, #0]
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	f021 0301 	bic.w	r3, r1, #1
    13be:	6013      	str	r3, [r2, #0]
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	4001c030 	.word	0x4001c030
    13c8:	4000402c 	.word	0x4000402c

000013cc <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    13cc:	4a03      	ldr	r2, [pc, #12]	; (13dc <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    13ce:	4804      	ldr	r0, [pc, #16]	; (13e0 <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    13d0:	6813      	ldr	r3, [r2, #0]
    13d2:	f043 0310 	orr.w	r3, r3, #16
    13d6:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    13d8:	6001      	str	r1, [r0, #0]
    13da:	4770      	bx	lr
    13dc:	4001c02c 	.word	0x4001c02c
    13e0:	4001c034 	.word	0x4001c034

000013e4 <am_hal_uart_string_transmit_polled>:
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while ( *pcString )
    13e4:	7808      	ldrb	r0, [r1, #0]
    13e6:	b160      	cbz	r0, 1402 <am_hal_uart_string_transmit_polled+0x1e>
{
    13e8:	b410      	push	{r4}
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    13ea:	4a06      	ldr	r2, [pc, #24]	; (1404 <am_hal_uart_string_transmit_polled+0x20>)

        //
        // Write the char.
        //
        AM_REGn(UART, 0, DR) = *pcString++;
    13ec:	4c06      	ldr	r4, [pc, #24]	; (1408 <am_hal_uart_string_transmit_polled+0x24>)
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    13ee:	6813      	ldr	r3, [r2, #0]
    13f0:	069b      	lsls	r3, r3, #26
    13f2:	d4fc      	bmi.n	13ee <am_hal_uart_string_transmit_polled+0xa>
        AM_REGn(UART, 0, DR) = *pcString++;
    13f4:	6020      	str	r0, [r4, #0]
    while ( *pcString )
    13f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    13fa:	2800      	cmp	r0, #0
    13fc:	d1f7      	bne.n	13ee <am_hal_uart_string_transmit_polled+0xa>
    }
}
    13fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1402:	4770      	bx	lr
    1404:	4001c018 	.word	0x4001c018
    1408:	4001c000 	.word	0x4001c000

0000140c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    140c:	4b01      	ldr	r3, [pc, #4]	; (1414 <am_hal_vcomp_disable+0x8>)
    140e:	2237      	movs	r2, #55	; 0x37
    1410:	601a      	str	r2, [r3, #0]
    1412:	4770      	bx	lr
    1414:	4000c008 	.word	0x4000c008
    1418:	70656544 	.word	0x70656544
    141c:	65656c73 	.word	0x65656c73
    1420:	78452070 	.word	0x78452070
    1424:	6c706d61 	.word	0x6c706d61
    1428:	00000a65 	.word	0x00000a65
    142c:	0a0a0a0a 	.word	0x0a0a0a0a
    1430:	0a0a0a0a 	.word	0x0a0a0a0a
    1434:	0a0a0a0a 	.word	0x0a0a0a0a
    1438:	0a0a0a0a 	.word	0x0a0a0a0a
    143c:	00000a0a 	.word	0x00000a0a

00001440 <CSWTCH.4>:
    1440:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1450:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
