
hello_world_uart_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000014  10001000  000019ac  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  10001014  000019c0  00021014  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021014  2**0
                  CONTENTS, READONLY
  5 .debug_info   000046c0  00000000  00000000  0002104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001448  00000000  00000000  0002570b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000004e8  00000000  00000000  00026b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000880  00000000  00000000  0002703b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002897  00000000  00000000  000278bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e23  00000000  00000000  0002a152  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002bf75  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000c88  00000000  00000000  0002bff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000012bb  00000000  00000000  0002cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 95 03 00 00 fd 03 00 00 09 04 00 00     ................
      10:	09 04 00 00 09 04 00 00 09 04 00 00 00 00 00 00     ................
	...
      2c:	03 04 00 00 03 04 00 00 00 00 00 00 03 04 00 00     ................
      3c:	03 04 00 00 03 04 00 00 03 04 00 00 03 04 00 00     ................
      4c:	03 04 00 00 03 04 00 00 03 04 00 00 03 04 00 00     ................
      5c:	03 04 00 00 03 04 00 00 03 04 00 00 03 04 00 00     ................
      6c:	03 04 00 00 03 04 00 00 03 04 00 00 03 04 00 00     ................
      7c:	03 04 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32Module)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     128:	4b1e      	ldr	r3, [pc, #120]	; (1a4 <uart_init+0x84>)
     12a:	2273      	movs	r2, #115	; 0x73
     12c:	601a      	str	r2, [r3, #0]
     12e:	4a1e      	ldr	r2, [pc, #120]	; (1a8 <uart_init+0x88>)
     130:	4b1d      	ldr	r3, [pc, #116]	; (1a8 <uart_init+0x88>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     138:	6013      	str	r3, [r2, #0]
     13a:	4a1c      	ldr	r2, [pc, #112]	; (1ac <uart_init+0x8c>)
     13c:	4b1b      	ldr	r3, [pc, #108]	; (1ac <uart_init+0x8c>)
     13e:	681b      	ldr	r3, [r3, #0]
     140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     148:	6013      	str	r3, [r2, #0]
     14a:	4b16      	ldr	r3, [pc, #88]	; (1a4 <uart_init+0x84>)
     14c:	2200      	movs	r2, #0
     14e:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
     150:	4b14      	ldr	r3, [pc, #80]	; (1a4 <uart_init+0x84>)
     152:	2273      	movs	r2, #115	; 0x73
     154:	601a      	str	r2, [r3, #0]
     156:	4a14      	ldr	r2, [pc, #80]	; (1a8 <uart_init+0x88>)
     158:	4b13      	ldr	r3, [pc, #76]	; (1a8 <uart_init+0x88>)
     15a:	681b      	ldr	r3, [r3, #0]
     15c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     160:	6013      	str	r3, [r2, #0]
     162:	4a13      	ldr	r2, [pc, #76]	; (1b0 <uart_init+0x90>)
     164:	4b12      	ldr	r3, [pc, #72]	; (1b0 <uart_init+0x90>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     16c:	f043 0312 	orr.w	r3, r3, #18
     170:	6013      	str	r3, [r2, #0]
     172:	4b0c      	ldr	r3, [pc, #48]	; (1a4 <uart_init+0x84>)
     174:	2200      	movs	r2, #0
     176:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32Module);
     178:	6878      	ldr	r0, [r7, #4]
     17a:	f001 faa7 	bl	16cc <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32Module);
     17e:	6878      	ldr	r0, [r7, #4]
     180:	f001 fa9a 	bl	16b8 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32Module, &g_sUartConfig);
     184:	490b      	ldr	r1, [pc, #44]	; (1b4 <uart_init+0x94>)
     186:	6878      	ldr	r0, [r7, #4]
     188:	f001 fa52 	bl	1630 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     18c:	2112      	movs	r1, #18
     18e:	6878      	ldr	r0, [r7, #4]
     190:	f001 fac0 	bl	1714 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32Module);
     194:	6878      	ldr	r0, [r7, #4]
     196:	f001 fa85 	bl	16a4 <am_hal_uart_enable>
}
     19a:	bf00      	nop
     19c:	3708      	adds	r7, #8
     19e:	46bd      	mov	sp, r7
     1a0:	bd80      	pop	{r7, pc}
     1a2:	bf00      	nop
     1a4:	40010060 	.word	0x40010060
     1a8:	40010050 	.word	0x40010050
     1ac:	40010020 	.word	0x40010020
     1b0:	40010024 	.word	0x40010024
     1b4:	10001000 	.word	0x10001000

000001b8 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32Module)
{
     1b8:	b580      	push	{r7, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	af00      	add	r7, sp, #0
     1be:	6078      	str	r0, [r7, #4]
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(ui32Module, 0xFFFFFFFF);
     1c0:	f04f 31ff 	mov.w	r1, #4294967295
     1c4:	6878      	ldr	r0, [r7, #4]
     1c6:	f001 fa67 	bl	1698 <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable(ui32Module);
     1ca:	6878      	ldr	r0, [r7, #4]
     1cc:	f001 fa74 	bl	16b8 <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     1d0:	4b17      	ldr	r3, [pc, #92]	; (230 <uart_disable+0x78>)
     1d2:	2273      	movs	r2, #115	; 0x73
     1d4:	601a      	str	r2, [r3, #0]
     1d6:	4a17      	ldr	r2, [pc, #92]	; (234 <uart_disable+0x7c>)
     1d8:	4b16      	ldr	r3, [pc, #88]	; (234 <uart_disable+0x7c>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     1e0:	6013      	str	r3, [r2, #0]
     1e2:	4a15      	ldr	r2, [pc, #84]	; (238 <uart_disable+0x80>)
     1e4:	4b14      	ldr	r3, [pc, #80]	; (238 <uart_disable+0x80>)
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1ec:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     1f0:	6013      	str	r3, [r2, #0]
     1f2:	4b0f      	ldr	r3, [pc, #60]	; (230 <uart_disable+0x78>)
     1f4:	2200      	movs	r2, #0
     1f6:	601a      	str	r2, [r3, #0]
      am_bsp_pin_disable(COM_UART_RX);
     1f8:	4b0d      	ldr	r3, [pc, #52]	; (230 <uart_disable+0x78>)
     1fa:	2273      	movs	r2, #115	; 0x73
     1fc:	601a      	str	r2, [r3, #0]
     1fe:	4a0d      	ldr	r2, [pc, #52]	; (234 <uart_disable+0x7c>)
     200:	4b0c      	ldr	r3, [pc, #48]	; (234 <uart_disable+0x7c>)
     202:	681b      	ldr	r3, [r3, #0]
     204:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     208:	6013      	str	r3, [r2, #0]
     20a:	4a0c      	ldr	r2, [pc, #48]	; (23c <uart_disable+0x84>)
     20c:	4b0b      	ldr	r3, [pc, #44]	; (23c <uart_disable+0x84>)
     20e:	681b      	ldr	r3, [r3, #0]
     210:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     214:	f043 0318 	orr.w	r3, r3, #24
     218:	6013      	str	r3, [r2, #0]
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <uart_disable+0x78>)
     21c:	2200      	movs	r2, #0
     21e:	601a      	str	r2, [r3, #0]

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable(ui32Module);
     220:	6878      	ldr	r0, [r7, #4]
     222:	f001 fa67 	bl	16f4 <am_hal_uart_clock_disable>
}
     226:	bf00      	nop
     228:	3708      	adds	r7, #8
     22a:	46bd      	mov	sp, r7
     22c:	bd80      	pop	{r7, pc}
     22e:	bf00      	nop
     230:	40010060 	.word	0x40010060
     234:	40010050 	.word	0x40010050
     238:	40010020 	.word	0x40010020
     23c:	40010024 	.word	0x40010024

00000240 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(uint32_t ui32Module)
{
     240:	b580      	push	{r7, lr}
     242:	b082      	sub	sp, #8
     244:	af00      	add	r7, sp, #0
     246:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get(ui32Module) & AM_HAL_UART_FR_BUSY );
     248:	bf00      	nop
     24a:	6878      	ldr	r0, [r7, #4]
     24c:	f001 fa6e 	bl	172c <am_hal_uart_flags_get>
     250:	4603      	mov	r3, r0
     252:	f003 0308 	and.w	r3, r3, #8
     256:	2b00      	cmp	r3, #0
     258:	d1f7      	bne.n	24a <uart_transmit_delay+0xa>
}
     25a:	bf00      	nop
     25c:	3708      	adds	r7, #8
     25e:	46bd      	mov	sp, r7
     260:	bd80      	pop	{r7, pc}
	...

00000264 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     264:	b5b0      	push	{r4, r5, r7, lr}
     266:	b096      	sub	sp, #88	; 0x58
     268:	af04      	add	r7, sp, #16
    uint32_t ui32StrBuf;

    //
    // Select a UART module to use.
    //
    uint32_t ui32Module = AM_BSP_UART_PRINT_INST;
     26a:	2300      	movs	r3, #0
     26c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     26e:	2000      	movs	r0, #0
     270:	f001 f8de 	bl	1430 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     274:	f001 f8c6 	bl	1404 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     278:	483a      	ldr	r0, [pc, #232]	; (364 <main+0x100>)
     27a:	f000 fa17 	bl	6ac <am_util_stdio_printf_init>

    //
    // Configure and enable the UART.
    //
    uart_init(ui32Module);
     27e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     280:	f7ff ff4e 	bl	120 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     284:	f001 f8b4 	bl	13f0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
     288:	4837      	ldr	r0, [pc, #220]	; (368 <main+0x104>)
     28a:	f001 f893 	bl	13b4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     28e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     290:	f7ff ffd6 	bl	240 <uart_transmit_delay>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
     294:	1d3b      	adds	r3, r7, #4
     296:	4618      	mov	r0, r3
     298:	f000 f936 	bl	508 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
     29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     29e:	4619      	mov	r1, r3
     2a0:	4832      	ldr	r0, [pc, #200]	; (36c <main+0x108>)
     2a2:	f001 f887 	bl	13b4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     2a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
     2a8:	f7ff ffca 	bl	240 <uart_transmit_delay>
    am_util_stdio_printf("Device type: %s\n",
     2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     2ae:	4619      	mov	r1, r3
     2b0:	482f      	ldr	r0, [pc, #188]	; (370 <main+0x10c>)
     2b2:	f001 f87f 	bl	13b4 <am_util_stdio_printf>
         sIdDevice.pui8DeviceName);
    uart_transmit_delay(ui32Module);
     2b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
     2b8:	f7ff ffc2 	bl	240 <uart_transmit_delay>

    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
     2bc:	69bb      	ldr	r3, [r7, #24]
    am_util_stdio_printf("Qualified: %s\n",
     2be:	2b00      	cmp	r3, #0
     2c0:	d001      	beq.n	2c6 <main+0x62>
     2c2:	4b2c      	ldr	r3, [pc, #176]	; (374 <main+0x110>)
     2c4:	e000      	b.n	2c8 <main+0x64>
     2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <main+0x114>)
     2c8:	4619      	mov	r1, r3
     2ca:	482c      	ldr	r0, [pc, #176]	; (37c <main+0x118>)
     2cc:	f001 f872 	bl	13b4 <am_util_stdio_printf>
                         "Yes" : "No");
    uart_transmit_delay(ui32Module);
     2d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
     2d2:	f7ff ffb5 	bl	240 <uart_transmit_delay>

    am_util_stdio_printf("Device Info:\n"
     2d6:	6879      	ldr	r1, [r7, #4]
     2d8:	68ba      	ldr	r2, [r7, #8]
     2da:	68f8      	ldr	r0, [r7, #12]
     2dc:	693b      	ldr	r3, [r7, #16]
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     2de:	f897 4040 	ldrb.w	r4, [r7, #64]	; 0x40
     2e2:	f897 5041 	ldrb.w	r5, [r7, #65]	; 0x41
    am_util_stdio_printf("Device Info:\n"
     2e6:	9502      	str	r5, [sp, #8]
     2e8:	9401      	str	r4, [sp, #4]
     2ea:	9300      	str	r3, [sp, #0]
     2ec:	4603      	mov	r3, r0
     2ee:	4824      	ldr	r0, [pc, #144]	; (380 <main+0x11c>)
     2f0:	f001 f860 	bl	13b4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     2f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
     2f6:	f7ff ffa3 	bl	240 <uart_transmit_delay>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
     2fa:	69fb      	ldr	r3, [r7, #28]
     2fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
     300:	2b00      	cmp	r3, #0
     302:	d001      	beq.n	308 <main+0xa4>
     304:	232b      	movs	r3, #43	; 0x2b
     306:	e000      	b.n	30a <main+0xa6>
     308:	2300      	movs	r3, #0
     30a:	603b      	str	r3, [r7, #0]
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
     30c:	69f9      	ldr	r1, [r7, #28]
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
     30e:	69fb      	ldr	r3, [r7, #28]
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
     310:	0a9a      	lsrs	r2, r3, #10
     312:	463b      	mov	r3, r7
     314:	481b      	ldr	r0, [pc, #108]	; (384 <main+0x120>)
     316:	f001 f84d 	bl	13b4 <am_util_stdio_printf>
                         &ui32StrBuf);
    uart_transmit_delay(ui32Module);
     31a:	6c78      	ldr	r0, [r7, #68]	; 0x44
     31c:	f7ff ff90 	bl	240 <uart_transmit_delay>

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
     320:	6a3b      	ldr	r3, [r7, #32]
     322:	f3c3 0309 	ubfx	r3, r3, #0, #10
     326:	2b00      	cmp	r3, #0
     328:	d001      	beq.n	32e <main+0xca>
     32a:	232b      	movs	r3, #43	; 0x2b
     32c:	e000      	b.n	330 <main+0xcc>
     32e:	2300      	movs	r3, #0
     330:	603b      	str	r3, [r7, #0]
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
     332:	6a39      	ldr	r1, [r7, #32]
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
     334:	6a3b      	ldr	r3, [r7, #32]
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
     336:	0a9a      	lsrs	r2, r3, #10
     338:	463b      	mov	r3, r7
     33a:	4813      	ldr	r0, [pc, #76]	; (388 <main+0x124>)
     33c:	f001 f83a 	bl	13b4 <am_util_stdio_printf>
                         &ui32StrBuf);
    uart_transmit_delay(ui32Module);
     340:	6c78      	ldr	r0, [r7, #68]	; 0x44
     342:	f7ff ff7d 	bl	240 <uart_transmit_delay>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     346:	4911      	ldr	r1, [pc, #68]	; (38c <main+0x128>)
     348:	4811      	ldr	r0, [pc, #68]	; (390 <main+0x12c>)
     34a:	f001 f833 	bl	13b4 <am_util_stdio_printf>
    uart_transmit_delay(ui32Module);
     34e:	6c78      	ldr	r0, [r7, #68]	; 0x44
     350:	f7ff ff76 	bl	240 <uart_transmit_delay>

    //
    // We are done printing.
    // Disable the UART and interrupts
    //
    uart_disable(ui32Module);
     354:	6c78      	ldr	r0, [r7, #68]	; 0x44
     356:	f7ff ff2f 	bl	1b8 <uart_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     35a:	2001      	movs	r0, #1
     35c:	f001 f952 	bl	1604 <am_hal_sysctrl_sleep>
     360:	e7fb      	b.n	35a <main+0xf6>
     362:	bf00      	nop
     364:	00001429 	.word	0x00001429
     368:	0000176c 	.word	0x0000176c
     36c:	0000177c 	.word	0x0000177c
     370:	00001790 	.word	0x00001790
     374:	000017a4 	.word	0x000017a4
     378:	000017a8 	.word	0x000017a8
     37c:	000017ac 	.word	0x000017ac
     380:	000017bc 	.word	0x000017bc
     384:	00001828 	.word	0x00001828
     388:	00001848 	.word	0x00001848
     38c:	00001868 	.word	0x00001868
     390:	000018b0 	.word	0x000018b0

00000394 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     394:	4811      	ldr	r0, [pc, #68]	; (3dc <zero_loop+0x12>)
     396:	4912      	ldr	r1, [pc, #72]	; (3e0 <zero_loop+0x16>)
     398:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     39a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     39e:	4811      	ldr	r0, [pc, #68]	; (3e4 <zero_loop+0x1a>)
     3a0:	6801      	ldr	r1, [r0, #0]
     3a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3a6:	6001      	str	r1, [r0, #0]
     3a8:	f3bf 8f4f 	dsb	sy
     3ac:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     3b0:	480d      	ldr	r0, [pc, #52]	; (3e8 <zero_loop+0x1e>)
     3b2:	490e      	ldr	r1, [pc, #56]	; (3ec <zero_loop+0x22>)
     3b4:	4a0e      	ldr	r2, [pc, #56]	; (3f0 <zero_loop+0x26>)

000003b6 <copy_loop>:
     3b6:	f850 3b04 	ldr.w	r3, [r0], #4
     3ba:	f841 3b04 	str.w	r3, [r1], #4
     3be:	4291      	cmp	r1, r2
     3c0:	dbf9      	blt.n	3b6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     3c2:	480c      	ldr	r0, [pc, #48]	; (3f4 <zero_loop+0x2a>)
     3c4:	490c      	ldr	r1, [pc, #48]	; (3f8 <zero_loop+0x2e>)
     3c6:	f04f 0200 	mov.w	r2, #0

000003ca <zero_loop>:
     3ca:	4288      	cmp	r0, r1
     3cc:	bfb8      	it	lt
     3ce:	f840 2b04 	strlt.w	r2, [r0], #4
     3d2:	dbfa      	blt.n	3ca <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     3d4:	f7ff ff46 	bl	264 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     3d8:	be00      	bkpt	0x0000
}
     3da:	bf00      	nop
     3dc:	e000ed08 	.word	0xe000ed08
     3e0:	00000000 	.word	0x00000000
     3e4:	e000ed88 	.word	0xe000ed88
     3e8:	000019ac 	.word	0x000019ac
     3ec:	10001000 	.word	0x10001000
     3f0:	10001014 	.word	0x10001014
     3f4:	10001014 	.word	0x10001014
     3f8:	1000111c 	.word	0x1000111c

000003fc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     3fc:	b480      	push	{r7}
     3fe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     400:	e7fe      	b.n	400 <am_nmi_isr+0x4>

00000402 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     402:	b480      	push	{r7}
     404:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     406:	e7fe      	b.n	406 <am_adc_isr+0x4>

00000408 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     408:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     40a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     40c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     40e:	f000 f809 	bl	424 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     412:	bd01      	pop	{r0, pc}
}
     414:	bf00      	nop
     416:	4618      	mov	r0, r3

00000418 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     418:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     41a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     41c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     41e:	4770      	bx	lr
}
     420:	bf00      	nop
     422:	4618      	mov	r0, r3

00000424 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     424:	b580      	push	{r7, lr}
     426:	b096      	sub	sp, #88	; 0x58
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     42c:	f107 030c 	add.w	r3, r7, #12
     430:	2200      	movs	r2, #0
     432:	601a      	str	r2, [r3, #0]
     434:	605a      	str	r2, [r3, #4]
     436:	609a      	str	r2, [r3, #8]
     438:	60da      	str	r2, [r3, #12]
     43a:	611a      	str	r2, [r3, #16]
     43c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     43e:	2300      	movs	r3, #0
     440:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     444:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     446:	4b2e      	ldr	r3, [pc, #184]	; (500 <am_util_faultisr_collect_data+0xdc>)
     448:	681b      	ldr	r3, [r3, #0]
     44a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     44e:	b2db      	uxtb	r3, r3
     450:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     456:	0a1b      	lsrs	r3, r3, #8
     458:	b2db      	uxtb	r3, r3
     45a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     460:	0c1b      	lsrs	r3, r3, #16
     462:	b29b      	uxth	r3, r3
     464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     468:	4b26      	ldr	r3, [pc, #152]	; (504 <am_util_faultisr_collect_data+0xe0>)
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     46e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     472:	b2db      	uxtb	r3, r3
     474:	f003 0302 	and.w	r3, r3, #2
     478:	2b00      	cmp	r3, #0
     47a:	d005      	beq.n	488 <am_util_faultisr_collect_data+0x64>
     47c:	6879      	ldr	r1, [r7, #4]
     47e:	2006      	movs	r0, #6
     480:	f7ff ffca 	bl	418 <getStackedReg>
     484:	4603      	mov	r3, r0
     486:	e001      	b.n	48c <am_util_faultisr_collect_data+0x68>
     488:	f04f 33ff 	mov.w	r3, #4294967295
     48c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     48e:	6879      	ldr	r1, [r7, #4]
     490:	2000      	movs	r0, #0
     492:	f7ff ffc1 	bl	418 <getStackedReg>
     496:	4603      	mov	r3, r0
     498:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     49a:	6879      	ldr	r1, [r7, #4]
     49c:	2001      	movs	r0, #1
     49e:	f7ff ffbb 	bl	418 <getStackedReg>
     4a2:	4603      	mov	r3, r0
     4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     4a6:	6879      	ldr	r1, [r7, #4]
     4a8:	2002      	movs	r0, #2
     4aa:	f7ff ffb5 	bl	418 <getStackedReg>
     4ae:	4603      	mov	r3, r0
     4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     4b2:	6879      	ldr	r1, [r7, #4]
     4b4:	2003      	movs	r0, #3
     4b6:	f7ff ffaf 	bl	418 <getStackedReg>
     4ba:	4603      	mov	r3, r0
     4bc:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     4be:	6879      	ldr	r1, [r7, #4]
     4c0:	2004      	movs	r0, #4
     4c2:	f7ff ffa9 	bl	418 <getStackedReg>
     4c6:	4603      	mov	r3, r0
     4c8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     4ca:	6879      	ldr	r1, [r7, #4]
     4cc:	2005      	movs	r0, #5
     4ce:	f7ff ffa3 	bl	418 <getStackedReg>
     4d2:	4603      	mov	r3, r0
     4d4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     4d6:	6879      	ldr	r1, [r7, #4]
     4d8:	2006      	movs	r0, #6
     4da:	f7ff ff9d 	bl	418 <getStackedReg>
     4de:	4603      	mov	r3, r0
     4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     4e2:	6879      	ldr	r1, [r7, #4]
     4e4:	2007      	movs	r0, #7
     4e6:	f7ff ff97 	bl	418 <getStackedReg>
     4ea:	4603      	mov	r3, r0
     4ec:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     4ee:	f107 030c 	add.w	r3, r7, #12
     4f2:	4618      	mov	r0, r3
     4f4:	f001 f82e 	bl	1554 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     4f8:	2300      	movs	r3, #0
     4fa:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     4fc:	e7fe      	b.n	4fc <am_util_faultisr_collect_data+0xd8>
     4fe:	bf00      	nop
     500:	e000ed28 	.word	0xe000ed28
     504:	e000ed38 	.word	0xe000ed38

00000508 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
     508:	b580      	push	{r7, lr}
     50a:	b084      	sub	sp, #16
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
#else
    am_hal_mcuctrl_device_info_get(&psIDDevice->sMcuCtrlDevice);
     510:	687b      	ldr	r3, [r7, #4]
     512:	4618      	mov	r0, r3
     514:	f000 ffb2 	bl	147c <am_hal_mcuctrl_device_info_get>
#endif

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
     518:	687b      	ldr	r3, [r7, #4]
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     520:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     522:	687b      	ldr	r3, [r7, #4]
     524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     526:	4a59      	ldr	r2, [pc, #356]	; (68c <am_util_id_device+0x184>)
     528:	4293      	cmp	r3, r2
     52a:	d10e      	bne.n	54a <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     530:	2b9b      	cmp	r3, #155	; 0x9b
     532:	d10a      	bne.n	54a <am_util_id_device+0x42>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
     534:	687b      	ldr	r3, [r7, #4]
     536:	6a1b      	ldr	r3, [r3, #32]
     538:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     53c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
     540:	d003      	beq.n	54a <am_util_id_device+0x42>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     542:	687b      	ldr	r3, [r7, #4]
     544:	4a52      	ldr	r2, [pc, #328]	; (690 <am_util_id_device+0x188>)
     546:	635a      	str	r2, [r3, #52]	; 0x34
     548:	e002      	b.n	550 <am_util_id_device+0x48>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	4a51      	ldr	r2, [pc, #324]	; (694 <am_util_id_device+0x18c>)
     54e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
     550:	687b      	ldr	r3, [r7, #4]
     552:	691b      	ldr	r3, [r3, #16]
     554:	4a50      	ldr	r2, [pc, #320]	; (698 <am_util_id_device+0x190>)
     556:	4293      	cmp	r3, r2
     558:	d102      	bne.n	560 <am_util_id_device+0x58>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	4a4c      	ldr	r2, [pc, #304]	; (690 <am_util_id_device+0x188>)
     55e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
     560:	687b      	ldr	r3, [r7, #4]
     562:	6a1b      	ldr	r3, [r3, #32]
     564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     568:	2be0      	cmp	r3, #224	; 0xe0
     56a:	d126      	bne.n	5ba <am_util_id_device+0xb2>
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     572:	d122      	bne.n	5ba <am_util_id_device+0xb2>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
     574:	687b      	ldr	r3, [r7, #4]
     576:	2201      	movs	r2, #1
     578:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	4a47      	ldr	r2, [pc, #284]	; (69c <am_util_id_device+0x194>)
     57e:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     580:	687b      	ldr	r3, [r7, #4]
     582:	68db      	ldr	r3, [r3, #12]
     584:	091b      	lsrs	r3, r3, #4
     586:	f003 030f 	and.w	r3, r3, #15
     58a:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     58c:	68bb      	ldr	r3, [r7, #8]
     58e:	b2db      	uxtb	r3, r3
     590:	3340      	adds	r3, #64	; 0x40
     592:	b2da      	uxtb	r2, r3
     594:	687b      	ldr	r3, [r7, #4]
     596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	68db      	ldr	r3, [r3, #12]
     59e:	f003 030f 	and.w	r3, r3, #15
     5a2:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     5a4:	68bb      	ldr	r3, [r7, #8]
     5a6:	b2db      	uxtb	r3, r3
     5a8:	3330      	adds	r3, #48	; 0x30
     5aa:	b2da      	uxtb	r2, r3
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	4a36      	ldr	r2, [pc, #216]	; (690 <am_util_id_device+0x188>)
     5b6:	635a      	str	r2, [r3, #52]	; 0x34
     5b8:	e061      	b.n	67e <am_util_id_device+0x176>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	6a1b      	ldr	r3, [r3, #32]
     5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     5c2:	2bd0      	cmp	r3, #208	; 0xd0
     5c4:	d123      	bne.n	60e <am_util_id_device+0x106>
     5c6:	68fb      	ldr	r3, [r7, #12]
     5c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
     5cc:	d11f      	bne.n	60e <am_util_id_device+0x106>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	2202      	movs	r2, #2
     5d2:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	4a32      	ldr	r2, [pc, #200]	; (6a0 <am_util_id_device+0x198>)
     5d8:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	68db      	ldr	r3, [r3, #12]
     5de:	091b      	lsrs	r3, r3, #4
     5e0:	f003 030f 	and.w	r3, r3, #15
     5e4:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     5e6:	68bb      	ldr	r3, [r7, #8]
     5e8:	b2db      	uxtb	r3, r3
     5ea:	3340      	adds	r3, #64	; 0x40
     5ec:	b2da      	uxtb	r2, r3
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	68db      	ldr	r3, [r3, #12]
     5f8:	f003 030f 	and.w	r3, r3, #15
     5fc:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     5fe:	68bb      	ldr	r3, [r7, #8]
     600:	b2db      	uxtb	r3, r3
     602:	3330      	adds	r3, #48	; 0x30
     604:	b2da      	uxtb	r2, r3
     606:	687b      	ldr	r3, [r7, #4]
     608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     60c:	e037      	b.n	67e <am_util_id_device+0x176>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
     60e:	687b      	ldr	r3, [r7, #4]
     610:	6a1b      	ldr	r3, [r3, #32]
     612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     616:	2bc0      	cmp	r3, #192	; 0xc0
     618:	d123      	bne.n	662 <am_util_id_device+0x15a>
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
     620:	d11f      	bne.n	662 <am_util_id_device+0x15a>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
     622:	687b      	ldr	r3, [r7, #4]
     624:	2203      	movs	r2, #3
     626:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	4a1e      	ldr	r2, [pc, #120]	; (6a4 <am_util_id_device+0x19c>)
     62c:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 1=Rev0, 2=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     62e:	687b      	ldr	r3, [r7, #4]
     630:	68db      	ldr	r3, [r3, #12]
     632:	091b      	lsrs	r3, r3, #4
     634:	f003 030f 	and.w	r3, r3, #15
     638:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     63a:	68bb      	ldr	r3, [r7, #8]
     63c:	b2db      	uxtb	r3, r3
     63e:	3340      	adds	r3, #64	; 0x40
     640:	b2da      	uxtb	r2, r3
     642:	687b      	ldr	r3, [r7, #4]
     644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     648:	687b      	ldr	r3, [r7, #4]
     64a:	68db      	ldr	r3, [r3, #12]
     64c:	f003 030f 	and.w	r3, r3, #15
     650:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux - 1);
     652:	68bb      	ldr	r3, [r7, #8]
     654:	b2db      	uxtb	r3, r3
     656:	332f      	adds	r3, #47	; 0x2f
     658:	b2da      	uxtb	r2, r3
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     660:	e00d      	b.n	67e <am_util_id_device+0x176>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	4a0f      	ldr	r2, [pc, #60]	; (6a8 <am_util_id_device+0x1a0>)
     66c:	639a      	str	r2, [r3, #56]	; 0x38
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
     66e:	687b      	ldr	r3, [r7, #4]
     670:	223f      	movs	r2, #63	; 0x3f
     672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
     676:	687b      	ldr	r3, [r7, #4]
     678:	2220      	movs	r2, #32
     67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }

    return psIDDevice->ui32Device;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
     682:	4618      	mov	r0, r3
     684:	3710      	adds	r7, #16
     686:	46bd      	mov	sp, r7
     688:	bd80      	pop	{r7, pc}
     68a:	bf00      	nop
     68c:	b105100d 	.word	0xb105100d
     690:	000018ec 	.word	0x000018ec
     694:	000018f4 	.word	0x000018f4
     698:	414d4251 	.word	0x414d4251
     69c:	000018d4 	.word	0x000018d4
     6a0:	000018dc 	.word	0x000018dc
     6a4:	000018e4 	.word	0x000018e4
     6a8:	000018fc 	.word	0x000018fc

000006ac <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     6ac:	b480      	push	{r7}
     6ae:	b083      	sub	sp, #12
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <am_util_stdio_printf_init+0x1c>)
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	6013      	str	r3, [r2, #0]
}
     6ba:	bf00      	nop
     6bc:	370c      	adds	r7, #12
     6be:	46bd      	mov	sp, r7
     6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	10001118 	.word	0x10001118

000006cc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     6cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     6d0:	b096      	sub	sp, #88	; 0x58
     6d2:	af00      	add	r7, sp, #0
     6d4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     6d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6dc:	0025      	movs	r5, r4
     6de:	2600      	movs	r6, #0
     6e0:	ea55 0306 	orrs.w	r3, r5, r6
     6e4:	f000 80a0 	beq.w	828 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     6e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6ec:	0862      	lsrs	r2, r4, #1
     6ee:	ea4f 0133 	mov.w	r1, r3, rrx
     6f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     6fa:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     6fe:	ea4f 0994 	mov.w	r9, r4, lsr #2
     702:	eb11 0308 	adds.w	r3, r1, r8
     706:	eb42 0409 	adc.w	r4, r2, r9
     70a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     70e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     712:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     716:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     71a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     71e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     722:	eb13 030a 	adds.w	r3, r3, sl
     726:	eb44 040b 	adc.w	r4, r4, fp
     72a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     72e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     732:	0a1a      	lsrs	r2, r3, #8
     734:	62ba      	str	r2, [r7, #40]	; 0x28
     736:	6aba      	ldr	r2, [r7, #40]	; 0x28
     738:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     73c:	62ba      	str	r2, [r7, #40]	; 0x28
     73e:	0a23      	lsrs	r3, r4, #8
     740:	62fb      	str	r3, [r7, #44]	; 0x2c
     742:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     746:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     74a:	18c9      	adds	r1, r1, r3
     74c:	eb42 0204 	adc.w	r2, r2, r4
     750:	460b      	mov	r3, r1
     752:	4614      	mov	r4, r2
     754:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     758:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     75c:	0c1a      	lsrs	r2, r3, #16
     75e:	623a      	str	r2, [r7, #32]
     760:	6a3a      	ldr	r2, [r7, #32]
     762:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     766:	623a      	str	r2, [r7, #32]
     768:	0c23      	lsrs	r3, r4, #16
     76a:	627b      	str	r3, [r7, #36]	; 0x24
     76c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     770:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     774:	18c9      	adds	r1, r1, r3
     776:	eb42 0204 	adc.w	r2, r2, r4
     77a:	460b      	mov	r3, r1
     77c:	4614      	mov	r4, r2
     77e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     782:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     786:	0023      	movs	r3, r4
     788:	603b      	str	r3, [r7, #0]
     78a:	2300      	movs	r3, #0
     78c:	607b      	str	r3, [r7, #4]
     78e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     792:	e897 0006 	ldmia.w	r7, {r1, r2}
     796:	18c9      	adds	r1, r1, r3
     798:	eb42 0204 	adc.w	r2, r2, r4
     79c:	460b      	mov	r3, r1
     79e:	4614      	mov	r4, r2
     7a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     7a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7a8:	08da      	lsrs	r2, r3, #3
     7aa:	613a      	str	r2, [r7, #16]
     7ac:	693a      	ldr	r2, [r7, #16]
     7ae:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     7b2:	613a      	str	r2, [r7, #16]
     7b4:	08e3      	lsrs	r3, r4, #3
     7b6:	617b      	str	r3, [r7, #20]
     7b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     7bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     7c0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     7c4:	460b      	mov	r3, r1
     7c6:	4614      	mov	r4, r2
     7c8:	00a0      	lsls	r0, r4, #2
     7ca:	60f8      	str	r0, [r7, #12]
     7cc:	68f8      	ldr	r0, [r7, #12]
     7ce:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     7d2:	60f8      	str	r0, [r7, #12]
     7d4:	009b      	lsls	r3, r3, #2
     7d6:	60bb      	str	r3, [r7, #8]
     7d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     7dc:	185b      	adds	r3, r3, r1
     7de:	eb44 0402 	adc.w	r4, r4, r2
     7e2:	18db      	adds	r3, r3, r3
     7e4:	eb44 0404 	adc.w	r4, r4, r4
     7e8:	4619      	mov	r1, r3
     7ea:	4622      	mov	r2, r4
     7ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7f0:	1a5b      	subs	r3, r3, r1
     7f2:	eb64 0402 	sbc.w	r4, r4, r2
     7f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     7fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     7fe:	3306      	adds	r3, #6
     800:	f144 0400 	adc.w	r4, r4, #0
     804:	091a      	lsrs	r2, r3, #4
     806:	61ba      	str	r2, [r7, #24]
     808:	69ba      	ldr	r2, [r7, #24]
     80a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     80e:	61ba      	str	r2, [r7, #24]
     810:	0923      	lsrs	r3, r4, #4
     812:	61fb      	str	r3, [r7, #28]
     814:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     81c:	18c9      	adds	r1, r1, r3
     81e:	eb42 0204 	adc.w	r2, r2, r4
     822:	460b      	mov	r3, r1
     824:	4614      	mov	r4, r2
     826:	e029      	b.n	87c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     82a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     82e:	085a      	lsrs	r2, r3, #1
     830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     832:	089b      	lsrs	r3, r3, #2
     834:	4413      	add	r3, r2
     836:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     83a:	091b      	lsrs	r3, r3, #4
     83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     83e:	4413      	add	r3, r2
     840:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     844:	0a1b      	lsrs	r3, r3, #8
     846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     848:	4413      	add	r3, r2
     84a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     84e:	0c1b      	lsrs	r3, r3, #16
     850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     852:	4413      	add	r3, r2
     854:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     858:	08db      	lsrs	r3, r3, #3
     85a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     85e:	4613      	mov	r3, r2
     860:	009b      	lsls	r3, r3, #2
     862:	4413      	add	r3, r2
     864:	005b      	lsls	r3, r3, #1
     866:	461a      	mov	r2, r3
     868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     86a:	1a9b      	subs	r3, r3, r2
     86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     870:	3306      	adds	r3, #6
     872:	091a      	lsrs	r2, r3, #4
     874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     876:	4413      	add	r3, r2
     878:	f04f 0400 	mov.w	r4, #0
    }
}
     87c:	4618      	mov	r0, r3
     87e:	4621      	mov	r1, r4
     880:	3758      	adds	r7, #88	; 0x58
     882:	46bd      	mov	sp, r7
     884:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     888:	4770      	bx	lr

0000088a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     88a:	b590      	push	{r4, r7, lr}
     88c:	b085      	sub	sp, #20
     88e:	af00      	add	r7, sp, #0
     890:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     894:	683a      	ldr	r2, [r7, #0]
     896:	687b      	ldr	r3, [r7, #4]
     898:	4313      	orrs	r3, r2
     89a:	2b00      	cmp	r3, #0
     89c:	bf0c      	ite	eq
     89e:	2301      	moveq	r3, #1
     8a0:	2300      	movne	r3, #0
     8a2:	b2db      	uxtb	r3, r3
     8a4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     8a6:	e008      	b.n	8ba <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     8a8:	e9d7 0100 	ldrd	r0, r1, [r7]
     8ac:	f7ff ff0e 	bl	6cc <divu64_10>
     8b0:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	3301      	adds	r3, #1
     8b8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     8ba:	e897 0018 	ldmia.w	r7, {r3, r4}
     8be:	4323      	orrs	r3, r4
     8c0:	d1f2      	bne.n	8a8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     8c2:	68fb      	ldr	r3, [r7, #12]
}
     8c4:	4618      	mov	r0, r3
     8c6:	3714      	adds	r7, #20
     8c8:	46bd      	mov	sp, r7
     8ca:	bd90      	pop	{r4, r7, pc}

000008cc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     8cc:	b590      	push	{r4, r7, lr}
     8ce:	b083      	sub	sp, #12
     8d0:	af00      	add	r7, sp, #0
     8d2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     8d6:	e897 0018 	ldmia.w	r7, {r3, r4}
     8da:	2b00      	cmp	r3, #0
     8dc:	f174 0300 	sbcs.w	r3, r4, #0
     8e0:	da06      	bge.n	8f0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     8e2:	e897 0018 	ldmia.w	r7, {r3, r4}
     8e6:	425b      	negs	r3, r3
     8e8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     8ec:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     8f0:	e897 0018 	ldmia.w	r7, {r3, r4}
     8f4:	4618      	mov	r0, r3
     8f6:	4621      	mov	r1, r4
     8f8:	f7ff ffc7 	bl	88a <ndigits_in_u64>
     8fc:	4603      	mov	r3, r0
}
     8fe:	4618      	mov	r0, r3
     900:	370c      	adds	r7, #12
     902:	46bd      	mov	sp, r7
     904:	bd90      	pop	{r4, r7, pc}

00000906 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     906:	b490      	push	{r4, r7}
     908:	b084      	sub	sp, #16
     90a:	af00      	add	r7, sp, #0
     90c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     910:	6839      	ldr	r1, [r7, #0]
     912:	687a      	ldr	r2, [r7, #4]
     914:	430a      	orrs	r2, r1
     916:	2a00      	cmp	r2, #0
     918:	bf0c      	ite	eq
     91a:	2201      	moveq	r2, #1
     91c:	2200      	movne	r2, #0
     91e:	b2d2      	uxtb	r2, r2
     920:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     922:	e00a      	b.n	93a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     924:	e897 0006 	ldmia.w	r7, {r1, r2}
     928:	090b      	lsrs	r3, r1, #4
     92a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     92e:	0914      	lsrs	r4, r2, #4
     930:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     934:	68fa      	ldr	r2, [r7, #12]
     936:	3201      	adds	r2, #1
     938:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     93a:	e897 0006 	ldmia.w	r7, {r1, r2}
     93e:	430a      	orrs	r2, r1
     940:	d1f0      	bne.n	924 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     942:	68fb      	ldr	r3, [r7, #12]
}
     944:	4618      	mov	r0, r3
     946:	3710      	adds	r7, #16
     948:	46bd      	mov	sp, r7
     94a:	bc90      	pop	{r4, r7}
     94c:	4770      	bx	lr

0000094e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     94e:	b480      	push	{r7}
     950:	b087      	sub	sp, #28
     952:	af00      	add	r7, sp, #0
     954:	6078      	str	r0, [r7, #4]
     956:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     958:	2300      	movs	r3, #0
     95a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     95c:	2300      	movs	r3, #0
     95e:	613b      	str	r3, [r7, #16]
     960:	2300      	movs	r3, #0
     962:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     964:	687b      	ldr	r3, [r7, #4]
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2b2d      	cmp	r3, #45	; 0x2d
     96a:	d11b      	bne.n	9a4 <decstr_to_int+0x56>
    {
        bNeg = true;
     96c:	2301      	movs	r3, #1
     96e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     970:	687b      	ldr	r3, [r7, #4]
     972:	3301      	adds	r3, #1
     974:	607b      	str	r3, [r7, #4]
        uCnt++;
     976:	68fb      	ldr	r3, [r7, #12]
     978:	3301      	adds	r3, #1
     97a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     97c:	e012      	b.n	9a4 <decstr_to_int+0x56>
    {
        ++uCnt;
     97e:	68fb      	ldr	r3, [r7, #12]
     980:	3301      	adds	r3, #1
     982:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     984:	693a      	ldr	r2, [r7, #16]
     986:	4613      	mov	r3, r2
     988:	009b      	lsls	r3, r3, #2
     98a:	4413      	add	r3, r2
     98c:	005b      	lsls	r3, r3, #1
     98e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     990:	687b      	ldr	r3, [r7, #4]
     992:	781b      	ldrb	r3, [r3, #0]
     994:	461a      	mov	r2, r3
     996:	693b      	ldr	r3, [r7, #16]
     998:	4413      	add	r3, r2
     99a:	3b30      	subs	r3, #48	; 0x30
     99c:	613b      	str	r3, [r7, #16]
        pcStr++;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	3301      	adds	r3, #1
     9a2:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	2b2f      	cmp	r3, #47	; 0x2f
     9aa:	d903      	bls.n	9b4 <decstr_to_int+0x66>
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	781b      	ldrb	r3, [r3, #0]
     9b0:	2b39      	cmp	r3, #57	; 0x39
     9b2:	d9e4      	bls.n	97e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     9b4:	683b      	ldr	r3, [r7, #0]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d002      	beq.n	9c0 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	68fa      	ldr	r2, [r7, #12]
     9be:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     9c0:	7dfb      	ldrb	r3, [r7, #23]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d002      	beq.n	9cc <decstr_to_int+0x7e>
     9c6:	693b      	ldr	r3, [r7, #16]
     9c8:	425b      	negs	r3, r3
     9ca:	e000      	b.n	9ce <decstr_to_int+0x80>
     9cc:	693b      	ldr	r3, [r7, #16]
}
     9ce:	4618      	mov	r0, r3
     9d0:	371c      	adds	r7, #28
     9d2:	46bd      	mov	sp, r7
     9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d8:	4770      	bx	lr

000009da <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     9da:	b590      	push	{r4, r7, lr}
     9dc:	b091      	sub	sp, #68	; 0x44
     9de:	af00      	add	r7, sp, #0
     9e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9e4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     9e6:	2300      	movs	r3, #0
     9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
     9ea:	2300      	movs	r3, #0
     9ec:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     9ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     9f2:	f7ff fe6b 	bl	6cc <divu64_10>
     9f6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     9fa:	68b9      	ldr	r1, [r7, #8]
     9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     9fe:	4613      	mov	r3, r2
     a00:	009b      	lsls	r3, r3, #2
     a02:	4413      	add	r3, r2
     a04:	005b      	lsls	r3, r3, #1
     a06:	1acb      	subs	r3, r1, r3
     a08:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
     a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a12:	b2d2      	uxtb	r2, r2
     a14:	3230      	adds	r2, #48	; 0x30
     a16:	b2d2      	uxtb	r2, r2
     a18:	f107 0140 	add.w	r1, r7, #64	; 0x40
     a1c:	440b      	add	r3, r1
     a1e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     a22:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a26:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     a2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     a2e:	4323      	orrs	r3, r4
     a30:	d1dd      	bne.n	9ee <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a34:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	2b00      	cmp	r3, #0
     a3a:	d011      	beq.n	a60 <uint64_to_str+0x86>
    {
        while ( ix-- )
     a3c:	e008      	b.n	a50 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	1c5a      	adds	r2, r3, #1
     a42:	607a      	str	r2, [r7, #4]
     a44:	f107 0110 	add.w	r1, r7, #16
     a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a4a:	440a      	add	r2, r1
     a4c:	7812      	ldrb	r2, [r2, #0]
     a4e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a52:	1e5a      	subs	r2, r3, #1
     a54:	63fa      	str	r2, [r7, #60]	; 0x3c
     a56:	2b00      	cmp	r3, #0
     a58:	d1f1      	bne.n	a3e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	2200      	movs	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     a62:	4618      	mov	r0, r3
     a64:	3744      	adds	r7, #68	; 0x44
     a66:	46bd      	mov	sp, r7
     a68:	bd90      	pop	{r4, r7, pc}

00000a6a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     a6a:	b4b0      	push	{r4, r5, r7}
     a6c:	b08d      	sub	sp, #52	; 0x34
     a6e:	af00      	add	r7, sp, #0
     a70:	e9c7 0102 	strd	r0, r1, [r7, #8]
     a74:	607a      	str	r2, [r7, #4]
     a76:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     a78:	2300      	movs	r3, #0
     a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a80:	4313      	orrs	r3, r2
     a82:	d131      	bne.n	ae8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a86:	1c5a      	adds	r2, r3, #1
     a88:	62fa      	str	r2, [r7, #44]	; 0x2c
     a8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a8e:	4413      	add	r3, r2
     a90:	2230      	movs	r2, #48	; 0x30
     a92:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     a96:	e027      	b.n	ae8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     a98:	7a3b      	ldrb	r3, [r7, #8]
     a9a:	f003 030f 	and.w	r3, r3, #15
     a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     aa6:	2b09      	cmp	r3, #9
     aa8:	d90a      	bls.n	ac0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     aaa:	78fb      	ldrb	r3, [r7, #3]
     aac:	2b00      	cmp	r3, #0
     aae:	d001      	beq.n	ab4 <uint64_to_hexstr+0x4a>
     ab0:	2227      	movs	r2, #39	; 0x27
     ab2:	e000      	b.n	ab6 <uint64_to_hexstr+0x4c>
     ab4:	2207      	movs	r2, #7
     ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     aba:	4413      	add	r3, r2
     abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ac2:	1c5a      	adds	r2, r3, #1
     ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
     ac6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     aca:	3230      	adds	r2, #48	; 0x30
     acc:	b2d2      	uxtb	r2, r2
     ace:	f107 0130 	add.w	r1, r7, #48	; 0x30
     ad2:	440b      	add	r3, r1
     ad4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     adc:	0914      	lsrs	r4, r2, #4
     ade:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     ae2:	091d      	lsrs	r5, r3, #4
     ae4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     aec:	4313      	orrs	r3, r2
     aee:	d1d3      	bne.n	a98 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	2b00      	cmp	r3, #0
     af8:	d011      	beq.n	b1e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     afa:	e008      	b.n	b0e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	1c5a      	adds	r2, r3, #1
     b00:	607a      	str	r2, [r7, #4]
     b02:	f107 0110 	add.w	r1, r7, #16
     b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b08:	440a      	add	r2, r1
     b0a:	7812      	ldrb	r2, [r2, #0]
     b0c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b10:	1e5a      	subs	r2, r3, #1
     b12:	62fa      	str	r2, [r7, #44]	; 0x2c
     b14:	2b00      	cmp	r3, #0
     b16:	d1f1      	bne.n	afc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	2200      	movs	r2, #0
     b1c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     b20:	4618      	mov	r0, r3
     b22:	3734      	adds	r7, #52	; 0x34
     b24:	46bd      	mov	sp, r7
     b26:	bcb0      	pop	{r4, r5, r7}
     b28:	4770      	bx	lr

00000b2a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     b2a:	b480      	push	{r7}
     b2c:	b085      	sub	sp, #20
     b2e:	af00      	add	r7, sp, #0
     b30:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     b32:	2300      	movs	r3, #0
     b34:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	2b00      	cmp	r3, #0
     b3a:	d104      	bne.n	b46 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     b3c:	68fb      	ldr	r3, [r7, #12]
     b3e:	e009      	b.n	b54 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	3301      	adds	r3, #1
     b44:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	1c5a      	adds	r2, r3, #1
     b4a:	607a      	str	r2, [r7, #4]
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	2b00      	cmp	r3, #0
     b50:	d1f6      	bne.n	b40 <simple_strlen+0x16>
    }
    return ui32RetVal;
     b52:	68fb      	ldr	r3, [r7, #12]
}
     b54:	4618      	mov	r0, r3
     b56:	3714      	adds	r7, #20
     b58:	46bd      	mov	sp, r7
     b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5e:	4770      	bx	lr

00000b60 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     b60:	b480      	push	{r7}
     b62:	b087      	sub	sp, #28
     b64:	af00      	add	r7, sp, #0
     b66:	60f8      	str	r0, [r7, #12]
     b68:	460b      	mov	r3, r1
     b6a:	607a      	str	r2, [r7, #4]
     b6c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     b6e:	2300      	movs	r3, #0
     b70:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	2b00      	cmp	r3, #0
     b76:	dc0c      	bgt.n	b92 <padbuffer+0x32>
    {
        return i32Cnt;
     b78:	697b      	ldr	r3, [r7, #20]
     b7a:	e010      	b.n	b9e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	2b00      	cmp	r3, #0
     b80:	d004      	beq.n	b8c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	1c5a      	adds	r2, r3, #1
     b86:	60fa      	str	r2, [r7, #12]
     b88:	7afa      	ldrb	r2, [r7, #11]
     b8a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     b8c:	697b      	ldr	r3, [r7, #20]
     b8e:	3301      	adds	r3, #1
     b90:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	1e5a      	subs	r2, r3, #1
     b96:	607a      	str	r2, [r7, #4]
     b98:	2b00      	cmp	r3, #0
     b9a:	d1ef      	bne.n	b7c <padbuffer+0x1c>
    }

    return i32Cnt;
     b9c:	697b      	ldr	r3, [r7, #20]
}
     b9e:	4618      	mov	r0, r3
     ba0:	371c      	adds	r7, #28
     ba2:	46bd      	mov	sp, r7
     ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ba8:	4770      	bx	lr
	...

00000bac <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     bac:	b590      	push	{r4, r7, lr}
     bae:	b08f      	sub	sp, #60	; 0x3c
     bb0:	af00      	add	r7, sp, #0
     bb2:	60f8      	str	r0, [r7, #12]
     bb4:	60b9      	str	r1, [r7, #8]
     bb6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     bb8:	68bb      	ldr	r3, [r7, #8]
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bc0:	2b03      	cmp	r3, #3
     bc2:	dc02      	bgt.n	bca <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     bc4:	f06f 0302 	mvn.w	r3, #2
     bc8:	e0e7      	b.n	d9a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     bca:	edd7 7a03 	vldr	s15, [r7, #12]
     bce:	eef5 7a40 	vcmp.f32	s15, #0.0
     bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bd6:	d104      	bne.n	be2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     bd8:	68bb      	ldr	r3, [r7, #8]
     bda:	4a72      	ldr	r2, [pc, #456]	; (da4 <ftoa+0x1f8>)
     bdc:	601a      	str	r2, [r3, #0]
        return 3;
     bde:	2303      	movs	r3, #3
     be0:	e0db      	b.n	d9a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     be6:	68fb      	ldr	r3, [r7, #12]
     be8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     bea:	693b      	ldr	r3, [r7, #16]
     bec:	15db      	asrs	r3, r3, #23
     bee:	b2db      	uxtb	r3, r3
     bf0:	3b7f      	subs	r3, #127	; 0x7f
     bf2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     bf4:	693b      	ldr	r3, [r7, #16]
     bf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
     bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     bfe:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     c00:	2300      	movs	r3, #0
     c02:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     c04:	2300      	movs	r3, #0
     c06:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     c08:	69fb      	ldr	r3, [r7, #28]
     c0a:	2b1e      	cmp	r3, #30
     c0c:	dd02      	ble.n	c14 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     c0e:	f06f 0301 	mvn.w	r3, #1
     c12:	e0c2      	b.n	d9a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     c14:	69fb      	ldr	r3, [r7, #28]
     c16:	f113 0f17 	cmn.w	r3, #23
     c1a:	da02      	bge.n	c22 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     c1c:	f04f 33ff 	mov.w	r3, #4294967295
     c20:	e0bb      	b.n	d9a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     c22:	69fb      	ldr	r3, [r7, #28]
     c24:	2b16      	cmp	r3, #22
     c26:	dd06      	ble.n	c36 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     c28:	69fb      	ldr	r3, [r7, #28]
     c2a:	3b17      	subs	r3, #23
     c2c:	69ba      	ldr	r2, [r7, #24]
     c2e:	fa02 f303 	lsl.w	r3, r2, r3
     c32:	637b      	str	r3, [r7, #52]	; 0x34
     c34:	e01a      	b.n	c6c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     c36:	69fb      	ldr	r3, [r7, #28]
     c38:	2b00      	cmp	r3, #0
     c3a:	db0f      	blt.n	c5c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     c3c:	69fb      	ldr	r3, [r7, #28]
     c3e:	f1c3 0317 	rsb	r3, r3, #23
     c42:	69ba      	ldr	r2, [r7, #24]
     c44:	fa42 f303 	asr.w	r3, r2, r3
     c48:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     c4a:	69fb      	ldr	r3, [r7, #28]
     c4c:	3301      	adds	r3, #1
     c4e:	69ba      	ldr	r2, [r7, #24]
     c50:	fa02 f303 	lsl.w	r3, r2, r3
     c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c58:	633b      	str	r3, [r7, #48]	; 0x30
     c5a:	e007      	b.n	c6c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     c5c:	69bb      	ldr	r3, [r7, #24]
     c5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     c62:	69fb      	ldr	r3, [r7, #28]
     c64:	43db      	mvns	r3, r3
     c66:	fa42 f303 	asr.w	r3, r2, r3
     c6a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     c6c:	693b      	ldr	r3, [r7, #16]
     c6e:	2b00      	cmp	r3, #0
     c70:	da04      	bge.n	c7c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     c72:	68bb      	ldr	r3, [r7, #8]
     c74:	1c5a      	adds	r2, r3, #1
     c76:	60ba      	str	r2, [r7, #8]
     c78:	222d      	movs	r2, #45	; 0x2d
     c7a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c7e:	2b00      	cmp	r3, #0
     c80:	d105      	bne.n	c8e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     c82:	68bb      	ldr	r3, [r7, #8]
     c84:	1c5a      	adds	r2, r3, #1
     c86:	60ba      	str	r2, [r7, #8]
     c88:	2230      	movs	r2, #48	; 0x30
     c8a:	701a      	strb	r2, [r3, #0]
     c8c:	e021      	b.n	cd2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c90:	2b00      	cmp	r3, #0
     c92:	dd08      	ble.n	ca6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c96:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c9a:	68ba      	ldr	r2, [r7, #8]
     c9c:	4618      	mov	r0, r3
     c9e:	4621      	mov	r1, r4
     ca0:	f7ff fe9b 	bl	9da <uint64_to_str>
     ca4:	e011      	b.n	cca <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	1c5a      	adds	r2, r3, #1
     caa:	60ba      	str	r2, [r7, #8]
     cac:	222d      	movs	r2, #45	; 0x2d
     cae:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cb2:	425b      	negs	r3, r3
     cb4:	ea4f 74e3 	mov.w	r4, r3, asr #31
     cb8:	68ba      	ldr	r2, [r7, #8]
     cba:	4618      	mov	r0, r3
     cbc:	4621      	mov	r1, r4
     cbe:	f7ff fe8c 	bl	9da <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     cc2:	e002      	b.n	cca <ftoa+0x11e>
        {
            pcBuf++;
     cc4:	68bb      	ldr	r3, [r7, #8]
     cc6:	3301      	adds	r3, #1
     cc8:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     cca:	68bb      	ldr	r3, [r7, #8]
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d1f8      	bne.n	cc4 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     cd2:	68bb      	ldr	r3, [r7, #8]
     cd4:	1c5a      	adds	r2, r3, #1
     cd6:	60ba      	str	r2, [r7, #8]
     cd8:	222e      	movs	r2, #46	; 0x2e
     cda:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cde:	2b00      	cmp	r3, #0
     ce0:	d105      	bne.n	cee <ftoa+0x142>
    {
        *pcBuf++ = '0';
     ce2:	68bb      	ldr	r3, [r7, #8]
     ce4:	1c5a      	adds	r2, r3, #1
     ce6:	60ba      	str	r2, [r7, #8]
     ce8:	2230      	movs	r2, #48	; 0x30
     cea:	701a      	strb	r2, [r3, #0]
     cec:	e04f      	b.n	d8e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     cee:	68ba      	ldr	r2, [r7, #8]
     cf0:	6a3b      	ldr	r3, [r7, #32]
     cf2:	1ad3      	subs	r3, r2, r3
     cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	3b01      	subs	r3, #1
     cfa:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     cfc:	697a      	ldr	r2, [r7, #20]
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	4293      	cmp	r3, r2
     d02:	bfa8      	it	ge
     d04:	4613      	movge	r3, r2
     d06:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     d08:	2300      	movs	r3, #0
     d0a:	62bb      	str	r3, [r7, #40]	; 0x28
     d0c:	e015      	b.n	d3a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d10:	4613      	mov	r3, r2
     d12:	009b      	lsls	r3, r3, #2
     d14:	4413      	add	r3, r2
     d16:	005b      	lsls	r3, r3, #1
     d18:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     d1a:	68bb      	ldr	r3, [r7, #8]
     d1c:	1c5a      	adds	r2, r3, #1
     d1e:	60ba      	str	r2, [r7, #8]
     d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d22:	1612      	asrs	r2, r2, #24
     d24:	b2d2      	uxtb	r2, r2
     d26:	3230      	adds	r2, #48	; 0x30
     d28:	b2d2      	uxtb	r2, r2
     d2a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d32:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d36:	3301      	adds	r3, #1
     d38:	62bb      	str	r3, [r7, #40]	; 0x28
     d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     d3c:	697b      	ldr	r3, [r7, #20]
     d3e:	429a      	cmp	r2, r3
     d40:	dbe5      	blt.n	d0e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d44:	4613      	mov	r3, r2
     d46:	009b      	lsls	r3, r3, #2
     d48:	4413      	add	r3, r2
     d4a:	005b      	lsls	r3, r3, #1
     d4c:	161b      	asrs	r3, r3, #24
     d4e:	2b04      	cmp	r3, #4
     d50:	dd1d      	ble.n	d8e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     d52:	68bb      	ldr	r3, [r7, #8]
     d54:	3b01      	subs	r3, #1
     d56:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     d58:	e015      	b.n	d86 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	2b2e      	cmp	r3, #46	; 0x2e
     d60:	d00e      	beq.n	d80 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	2b39      	cmp	r3, #57	; 0x39
     d68:	d103      	bne.n	d72 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d6c:	2230      	movs	r2, #48	; 0x30
     d6e:	701a      	strb	r2, [r3, #0]
     d70:	e006      	b.n	d80 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	3301      	adds	r3, #1
     d78:	b2da      	uxtb	r2, r3
     d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d7c:	701a      	strb	r2, [r3, #0]
                    break;
     d7e:	e006      	b.n	d8e <ftoa+0x1e2>
                }
                pcBuftmp--;
     d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d82:	3b01      	subs	r3, #1
     d84:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d88:	6a3b      	ldr	r3, [r7, #32]
     d8a:	429a      	cmp	r2, r3
     d8c:	d2e5      	bcs.n	d5a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     d8e:	68bb      	ldr	r3, [r7, #8]
     d90:	2200      	movs	r2, #0
     d92:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     d94:	68ba      	ldr	r2, [r7, #8]
     d96:	6a3b      	ldr	r3, [r7, #32]
     d98:	1ad3      	subs	r3, r2, r3
} // ftoa()
     d9a:	4618      	mov	r0, r3
     d9c:	373c      	adds	r7, #60	; 0x3c
     d9e:	46bd      	mov	sp, r7
     da0:	bd90      	pop	{r4, r7, pc}
     da2:	bf00      	nop
     da4:	00302e30 	.word	0x00302e30

00000da8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     da8:	b590      	push	{r4, r7, lr}
     daa:	b095      	sub	sp, #84	; 0x54
     dac:	af00      	add	r7, sp, #0
     dae:	60f8      	str	r0, [r7, #12]
     db0:	60b9      	str	r1, [r7, #8]
     db2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     db4:	2300      	movs	r3, #0
     db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     db8:	2300      	movs	r3, #0
     dba:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     dbc:	e2e3      	b.n	1386 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     dbe:	2306      	movs	r3, #6
     dc0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     dc2:	68bb      	ldr	r3, [r7, #8]
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	2b25      	cmp	r3, #37	; 0x25
     dc8:	d01f      	beq.n	e0a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     dca:	68fb      	ldr	r3, [r7, #12]
     dcc:	2b00      	cmp	r3, #0
     dce:	d015      	beq.n	dfc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     dd0:	68bb      	ldr	r3, [r7, #8]
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	2b0a      	cmp	r3, #10
     dd6:	d10b      	bne.n	df0 <am_util_stdio_vsprintf+0x48>
     dd8:	4bb1      	ldr	r3, [pc, #708]	; (10a0 <am_util_stdio_vsprintf+0x2f8>)
     dda:	781b      	ldrb	r3, [r3, #0]
     ddc:	2b00      	cmp	r3, #0
     dde:	d007      	beq.n	df0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	1c5a      	adds	r2, r3, #1
     de4:	60fa      	str	r2, [r7, #12]
     de6:	220d      	movs	r2, #13
     de8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dec:	3301      	adds	r3, #1
     dee:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	1c5a      	adds	r2, r3, #1
     df4:	60fa      	str	r2, [r7, #12]
     df6:	68ba      	ldr	r2, [r7, #8]
     df8:	7812      	ldrb	r2, [r2, #0]
     dfa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     dfc:	68bb      	ldr	r3, [r7, #8]
     dfe:	3301      	adds	r3, #1
     e00:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e04:	3301      	adds	r3, #1
     e06:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     e08:	e2bd      	b.n	1386 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     e0a:	68bb      	ldr	r3, [r7, #8]
     e0c:	3301      	adds	r3, #1
     e0e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     e10:	2300      	movs	r3, #0
     e12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     e16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     e1e:	2320      	movs	r3, #32
     e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     e24:	68bb      	ldr	r3, [r7, #8]
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	2b30      	cmp	r3, #48	; 0x30
     e2a:	d105      	bne.n	e38 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     e2c:	2330      	movs	r3, #48	; 0x30
     e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     e32:	68bb      	ldr	r3, [r7, #8]
     e34:	3301      	adds	r3, #1
     e36:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     e38:	f107 0310 	add.w	r3, r7, #16
     e3c:	4619      	mov	r1, r3
     e3e:	68b8      	ldr	r0, [r7, #8]
     e40:	f7ff fd85 	bl	94e <decstr_to_int>
     e44:	4603      	mov	r3, r0
     e46:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     e48:	693b      	ldr	r3, [r7, #16]
     e4a:	68ba      	ldr	r2, [r7, #8]
     e4c:	4413      	add	r3, r2
     e4e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     e50:	68bb      	ldr	r3, [r7, #8]
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	2b73      	cmp	r3, #115	; 0x73
     e56:	d005      	beq.n	e64 <am_util_stdio_vsprintf+0xbc>
     e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e5a:	2b00      	cmp	r3, #0
     e5c:	da02      	bge.n	e64 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e60:	425b      	negs	r3, r3
     e62:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     e64:	68bb      	ldr	r3, [r7, #8]
     e66:	781b      	ldrb	r3, [r3, #0]
     e68:	2b2e      	cmp	r3, #46	; 0x2e
     e6a:	d10e      	bne.n	e8a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	3301      	adds	r3, #1
     e70:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     e72:	f107 0310 	add.w	r3, r7, #16
     e76:	4619      	mov	r1, r3
     e78:	68b8      	ldr	r0, [r7, #8]
     e7a:	f7ff fd68 	bl	94e <decstr_to_int>
     e7e:	4603      	mov	r3, r0
     e80:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     e82:	693b      	ldr	r3, [r7, #16]
     e84:	68ba      	ldr	r2, [r7, #8]
     e86:	4413      	add	r3, r2
     e88:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     e8a:	68bb      	ldr	r3, [r7, #8]
     e8c:	781b      	ldrb	r3, [r3, #0]
     e8e:	2b6c      	cmp	r3, #108	; 0x6c
     e90:	d10c      	bne.n	eac <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     e92:	68bb      	ldr	r3, [r7, #8]
     e94:	3301      	adds	r3, #1
     e96:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e98:	68bb      	ldr	r3, [r7, #8]
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	2b6c      	cmp	r3, #108	; 0x6c
     e9e:	d105      	bne.n	eac <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	3301      	adds	r3, #1
     ea4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     ea6:	2301      	movs	r3, #1
     ea8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     eac:	68bb      	ldr	r3, [r7, #8]
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	3b46      	subs	r3, #70	; 0x46
     eb2:	2b32      	cmp	r3, #50	; 0x32
     eb4:	f200 8254 	bhi.w	1360 <am_util_stdio_vsprintf+0x5b8>
     eb8:	a201      	add	r2, pc, #4	; (adr r2, ec0 <am_util_stdio_vsprintf+0x118>)
     eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ebe:	bf00      	nop
     ec0:	000012eb 	.word	0x000012eb
     ec4:	00001361 	.word	0x00001361
     ec8:	00001361 	.word	0x00001361
     ecc:	00001361 	.word	0x00001361
     ed0:	00001361 	.word	0x00001361
     ed4:	00001361 	.word	0x00001361
     ed8:	00001361 	.word	0x00001361
     edc:	00001361 	.word	0x00001361
     ee0:	00001361 	.word	0x00001361
     ee4:	00001361 	.word	0x00001361
     ee8:	00001361 	.word	0x00001361
     eec:	00001361 	.word	0x00001361
     ef0:	00001361 	.word	0x00001361
     ef4:	00001361 	.word	0x00001361
     ef8:	00001361 	.word	0x00001361
     efc:	00001361 	.word	0x00001361
     f00:	00001361 	.word	0x00001361
     f04:	00001361 	.word	0x00001361
     f08:	00001087 	.word	0x00001087
     f0c:	00001361 	.word	0x00001361
     f10:	00001361 	.word	0x00001361
     f14:	00001361 	.word	0x00001361
     f18:	00001361 	.word	0x00001361
     f1c:	00001361 	.word	0x00001361
     f20:	00001361 	.word	0x00001361
     f24:	00001361 	.word	0x00001361
     f28:	00001361 	.word	0x00001361
     f2c:	00001361 	.word	0x00001361
     f30:	00001361 	.word	0x00001361
     f34:	00000f8d 	.word	0x00000f8d
     f38:	000011b3 	.word	0x000011b3
     f3c:	00001361 	.word	0x00001361
     f40:	000012eb 	.word	0x000012eb
     f44:	00001361 	.word	0x00001361
     f48:	00001361 	.word	0x00001361
     f4c:	000011b3 	.word	0x000011b3
     f50:	00001361 	.word	0x00001361
     f54:	00001361 	.word	0x00001361
     f58:	00001361 	.word	0x00001361
     f5c:	00001361 	.word	0x00001361
     f60:	00001361 	.word	0x00001361
     f64:	00001361 	.word	0x00001361
     f68:	00001361 	.word	0x00001361
     f6c:	00001361 	.word	0x00001361
     f70:	00001361 	.word	0x00001361
     f74:	00000fb3 	.word	0x00000fb3
     f78:	00001361 	.word	0x00001361
     f7c:	00001121 	.word	0x00001121
     f80:	00001361 	.word	0x00001361
     f84:	00001361 	.word	0x00001361
     f88:	00001081 	.word	0x00001081
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	1d1a      	adds	r2, r3, #4
     f90:	607a      	str	r2, [r7, #4]
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d005      	beq.n	faa <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     f9e:	68fb      	ldr	r3, [r7, #12]
     fa0:	1c5a      	adds	r2, r3, #1
     fa2:	60fa      	str	r2, [r7, #12]
     fa4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     fa8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fac:	3301      	adds	r3, #1
     fae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     fb0:	e1e6      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	1d1a      	adds	r2, r3, #4
     fb6:	607a      	str	r2, [r7, #4]
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     fbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     fbe:	f7ff fdb4 	bl	b2a <simple_strlen>
     fc2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fc6:	2b00      	cmp	r3, #0
     fc8:	dd2e      	ble.n	1028 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fce:	429a      	cmp	r2, r3
     fd0:	d22a      	bcs.n	1028 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fd6:	1ad3      	subs	r3, r2, r3
     fd8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fe0:	4619      	mov	r1, r3
     fe2:	68f8      	ldr	r0, [r7, #12]
     fe4:	f7ff fdbc 	bl	b60 <padbuffer>
     fe8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	2b00      	cmp	r3, #0
     fee:	d001      	beq.n	ff4 <am_util_stdio_vsprintf+0x24c>
     ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff2:	e000      	b.n	ff6 <am_util_stdio_vsprintf+0x24e>
     ff4:	2300      	movs	r3, #0
     ff6:	68fa      	ldr	r2, [r7, #12]
     ff8:	4413      	add	r3, r2
     ffa:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1000:	4413      	add	r3, r2
    1002:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1004:	2300      	movs	r3, #0
    1006:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1008:	e00e      	b.n	1028 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	2b00      	cmp	r3, #0
    100e:	d005      	beq.n	101c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	1c5a      	adds	r2, r3, #1
    1014:	60fa      	str	r2, [r7, #12]
    1016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1018:	7812      	ldrb	r2, [r2, #0]
    101a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    101c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    101e:	3301      	adds	r3, #1
    1020:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1024:	3301      	adds	r3, #1
    1026:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    102a:	781b      	ldrb	r3, [r3, #0]
    102c:	2b00      	cmp	r3, #0
    102e:	d1ec      	bne.n	100a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1032:	2b00      	cmp	r3, #0
    1034:	f000 81a1 	beq.w	137a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    103a:	425b      	negs	r3, r3
    103c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1042:	429a      	cmp	r2, r3
    1044:	f080 8199 	bcs.w	137a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1048:	6bba      	ldr	r2, [r7, #56]	; 0x38
    104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    104c:	1ad3      	subs	r3, r2, r3
    104e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1054:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1056:	4619      	mov	r1, r3
    1058:	68f8      	ldr	r0, [r7, #12]
    105a:	f7ff fd81 	bl	b60 <padbuffer>
    105e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1060:	68fb      	ldr	r3, [r7, #12]
    1062:	2b00      	cmp	r3, #0
    1064:	d001      	beq.n	106a <am_util_stdio_vsprintf+0x2c2>
    1066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1068:	e000      	b.n	106c <am_util_stdio_vsprintf+0x2c4>
    106a:	2300      	movs	r3, #0
    106c:	68fa      	ldr	r2, [r7, #12]
    106e:	4413      	add	r3, r2
    1070:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1076:	4413      	add	r3, r2
    1078:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    107a:	2300      	movs	r3, #0
    107c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    107e:	e17c      	b.n	137a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1080:	2301      	movs	r3, #1
    1082:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1086:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    108a:	2b00      	cmp	r3, #0
    108c:	d00a      	beq.n	10a4 <am_util_stdio_vsprintf+0x2fc>
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	3307      	adds	r3, #7
    1092:	f023 0307 	bic.w	r3, r3, #7
    1096:	f103 0208 	add.w	r2, r3, #8
    109a:	607a      	str	r2, [r7, #4]
    109c:	cb18      	ldmia	r3, {r3, r4}
    109e:	e007      	b.n	10b0 <am_util_stdio_vsprintf+0x308>
    10a0:	10001114 	.word	0x10001114
                                      va_arg(pArgs, uint32_t);
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	1d1a      	adds	r2, r3, #4
    10a8:	607a      	str	r2, [r7, #4]
    10aa:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    10ac:	f04f 0400 	mov.w	r4, #0
    10b0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    10b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b6:	2b00      	cmp	r3, #0
    10b8:	d01e      	beq.n	10f8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    10ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10be:	f7ff fc22 	bl	906 <ndigits_in_hex>
    10c2:	4602      	mov	r2, r0
    10c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c6:	1a9b      	subs	r3, r3, r2
    10c8:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10d0:	4619      	mov	r1, r3
    10d2:	68f8      	ldr	r0, [r7, #12]
    10d4:	f7ff fd44 	bl	b60 <padbuffer>
    10d8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10da:	68fb      	ldr	r3, [r7, #12]
    10dc:	2b00      	cmp	r3, #0
    10de:	d001      	beq.n	10e4 <am_util_stdio_vsprintf+0x33c>
    10e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10e2:	e000      	b.n	10e6 <am_util_stdio_vsprintf+0x33e>
    10e4:	2300      	movs	r3, #0
    10e6:	68fa      	ldr	r2, [r7, #12]
    10e8:	4413      	add	r3, r2
    10ea:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10f0:	4413      	add	r3, r2
    10f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10f4:	2300      	movs	r3, #0
    10f6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    10f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    10fc:	68fa      	ldr	r2, [r7, #12]
    10fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1102:	f7ff fcb2 	bl	a6a <uint64_to_hexstr>
    1106:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	2b00      	cmp	r3, #0
    110c:	d003      	beq.n	1116 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1110:	68fa      	ldr	r2, [r7, #12]
    1112:	4413      	add	r3, r2
    1114:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    111a:	4413      	add	r3, r2
    111c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    111e:	e12f      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1120:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1124:	2b00      	cmp	r3, #0
    1126:	d008      	beq.n	113a <am_util_stdio_vsprintf+0x392>
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	3307      	adds	r3, #7
    112c:	f023 0307 	bic.w	r3, r3, #7
    1130:	f103 0208 	add.w	r2, r3, #8
    1134:	607a      	str	r2, [r7, #4]
    1136:	cb18      	ldmia	r3, {r3, r4}
    1138:	e005      	b.n	1146 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	1d1a      	adds	r2, r3, #4
    113e:	607a      	str	r2, [r7, #4]
    1140:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1142:	f04f 0400 	mov.w	r4, #0
    1146:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114c:	2b00      	cmp	r3, #0
    114e:	d01e      	beq.n	118e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1150:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1154:	f7ff fb99 	bl	88a <ndigits_in_u64>
    1158:	4602      	mov	r2, r0
    115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    115c:	1a9b      	subs	r3, r3, r2
    115e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1164:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1166:	4619      	mov	r1, r3
    1168:	68f8      	ldr	r0, [r7, #12]
    116a:	f7ff fcf9 	bl	b60 <padbuffer>
    116e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	2b00      	cmp	r3, #0
    1174:	d001      	beq.n	117a <am_util_stdio_vsprintf+0x3d2>
    1176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1178:	e000      	b.n	117c <am_util_stdio_vsprintf+0x3d4>
    117a:	2300      	movs	r3, #0
    117c:	68fa      	ldr	r2, [r7, #12]
    117e:	4413      	add	r3, r2
    1180:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1186:	4413      	add	r3, r2
    1188:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    118a:	2300      	movs	r3, #0
    118c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    118e:	68fa      	ldr	r2, [r7, #12]
    1190:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1194:	f7ff fc21 	bl	9da <uint64_to_str>
    1198:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	2b00      	cmp	r3, #0
    119e:	d003      	beq.n	11a8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    11a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a2:	68fa      	ldr	r2, [r7, #12]
    11a4:	4413      	add	r3, r2
    11a6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11ac:	4413      	add	r3, r2
    11ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11b0:	e0e6      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    11b6:	2b00      	cmp	r3, #0
    11b8:	d008      	beq.n	11cc <am_util_stdio_vsprintf+0x424>
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	3307      	adds	r3, #7
    11be:	f023 0307 	bic.w	r3, r3, #7
    11c2:	f103 0208 	add.w	r2, r3, #8
    11c6:	607a      	str	r2, [r7, #4]
    11c8:	cb18      	ldmia	r3, {r3, r4}
    11ca:	e005      	b.n	11d8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	1d1a      	adds	r2, r3, #4
    11d0:	607a      	str	r2, [r7, #4]
    11d2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    11d8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    11dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11e0:	2b00      	cmp	r3, #0
    11e2:	f174 0300 	sbcs.w	r3, r4, #0
    11e6:	da0a      	bge.n	11fe <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    11e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11ec:	425b      	negs	r3, r3
    11ee:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    11f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    11f6:	2301      	movs	r3, #1
    11f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    11fc:	e006      	b.n	120c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    11fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1202:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1206:	2300      	movs	r3, #0
    1208:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    120e:	2b00      	cmp	r3, #0
    1210:	d04a      	beq.n	12a8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1212:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1216:	4618      	mov	r0, r3
    1218:	4621      	mov	r1, r4
    121a:	f7ff fb57 	bl	8cc <ndigits_in_i64>
    121e:	4602      	mov	r2, r0
    1220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1222:	1a9b      	subs	r3, r3, r2
    1224:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    122a:	2b00      	cmp	r3, #0
    122c:	d011      	beq.n	1252 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1230:	3b01      	subs	r3, #1
    1232:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1238:	2b30      	cmp	r3, #48	; 0x30
    123a:	d10a      	bne.n	1252 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    123c:	68fb      	ldr	r3, [r7, #12]
    123e:	2b00      	cmp	r3, #0
    1240:	d004      	beq.n	124c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	1c5a      	adds	r2, r3, #1
    1246:	60fa      	str	r2, [r7, #12]
    1248:	222d      	movs	r2, #45	; 0x2d
    124a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    124c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    124e:	3301      	adds	r3, #1
    1250:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1256:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1258:	4619      	mov	r1, r3
    125a:	68f8      	ldr	r0, [r7, #12]
    125c:	f7ff fc80 	bl	b60 <padbuffer>
    1260:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1262:	68fb      	ldr	r3, [r7, #12]
    1264:	2b00      	cmp	r3, #0
    1266:	d001      	beq.n	126c <am_util_stdio_vsprintf+0x4c4>
    1268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    126a:	e000      	b.n	126e <am_util_stdio_vsprintf+0x4c6>
    126c:	2300      	movs	r3, #0
    126e:	68fa      	ldr	r2, [r7, #12]
    1270:	4413      	add	r3, r2
    1272:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1278:	4413      	add	r3, r2
    127a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    127c:	2300      	movs	r3, #0
    127e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1284:	2b00      	cmp	r3, #0
    1286:	d01e      	beq.n	12c6 <am_util_stdio_vsprintf+0x51e>
    1288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    128c:	2b20      	cmp	r3, #32
    128e:	d11a      	bne.n	12c6 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1290:	68fb      	ldr	r3, [r7, #12]
    1292:	2b00      	cmp	r3, #0
    1294:	d004      	beq.n	12a0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1296:	68fb      	ldr	r3, [r7, #12]
    1298:	1c5a      	adds	r2, r3, #1
    129a:	60fa      	str	r2, [r7, #12]
    129c:	222d      	movs	r2, #45	; 0x2d
    129e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    12a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12a2:	3301      	adds	r3, #1
    12a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    12a6:	e00e      	b.n	12c6 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    12a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    12ac:	2b00      	cmp	r3, #0
    12ae:	d00a      	beq.n	12c6 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d004      	beq.n	12c0 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	1c5a      	adds	r2, r3, #1
    12ba:	60fa      	str	r2, [r7, #12]
    12bc:	222d      	movs	r2, #45	; 0x2d
    12be:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    12c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12c2:	3301      	adds	r3, #1
    12c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    12c6:	68fa      	ldr	r2, [r7, #12]
    12c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12cc:	f7ff fb85 	bl	9da <uint64_to_str>
    12d0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d003      	beq.n	12e0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    12d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12da:	68fa      	ldr	r2, [r7, #12]
    12dc:	4413      	add	r3, r2
    12de:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12e4:	4413      	add	r3, r2
    12e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12e8:	e04a      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    12ea:	68fb      	ldr	r3, [r7, #12]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d046      	beq.n	137e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	3307      	adds	r3, #7
    12f4:	f023 0307 	bic.w	r3, r3, #7
    12f8:	f103 0208 	add.w	r2, r3, #8
    12fc:	607a      	str	r2, [r7, #4]
    12fe:	cb18      	ldmia	r3, {r3, r4}
    1300:	4618      	mov	r0, r3
    1302:	4621      	mov	r1, r4
    1304:	f7fe febc 	bl	80 <__aeabi_d2f>
    1308:	4603      	mov	r3, r0
    130a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	2214      	movs	r2, #20
    1310:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1314:	68f9      	ldr	r1, [r7, #12]
    1316:	6978      	ldr	r0, [r7, #20]
    1318:	f7ff fc48 	bl	bac <ftoa>
    131c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1320:	2b00      	cmp	r3, #0
    1322:	da14      	bge.n	134e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1326:	f1b3 3fff 	cmp.w	r3, #4294967295
    132a:	d102      	bne.n	1332 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    132c:	4b1e      	ldr	r3, [pc, #120]	; (13a8 <am_util_stdio_vsprintf+0x600>)
    132e:	62bb      	str	r3, [r7, #40]	; 0x28
    1330:	e008      	b.n	1344 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1334:	f113 0f02 	cmn.w	r3, #2
    1338:	d102      	bne.n	1340 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    133a:	4b1c      	ldr	r3, [pc, #112]	; (13ac <am_util_stdio_vsprintf+0x604>)
    133c:	62bb      	str	r3, [r7, #40]	; 0x28
    133e:	e001      	b.n	1344 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1340:	4b1b      	ldr	r3, [pc, #108]	; (13b0 <am_util_stdio_vsprintf+0x608>)
    1342:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1348:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    134a:	2303      	movs	r3, #3
    134c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1352:	4413      	add	r3, r2
    1354:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1358:	68fa      	ldr	r2, [r7, #12]
    135a:	4413      	add	r3, r2
    135c:	60fb      	str	r3, [r7, #12]
                }
                break;
    135e:	e00e      	b.n	137e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1360:	68fb      	ldr	r3, [r7, #12]
    1362:	2b00      	cmp	r3, #0
    1364:	d005      	beq.n	1372 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	1c5a      	adds	r2, r3, #1
    136a:	60fa      	str	r2, [r7, #12]
    136c:	68ba      	ldr	r2, [r7, #8]
    136e:	7812      	ldrb	r2, [r2, #0]
    1370:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1374:	3301      	adds	r3, #1
    1376:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1378:	e002      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>
                break;
    137a:	bf00      	nop
    137c:	e000      	b.n	1380 <am_util_stdio_vsprintf+0x5d8>
                break;
    137e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1380:	68bb      	ldr	r3, [r7, #8]
    1382:	3301      	adds	r3, #1
    1384:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1386:	68bb      	ldr	r3, [r7, #8]
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	2b00      	cmp	r3, #0
    138c:	f47f ad17 	bne.w	dbe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	2b00      	cmp	r3, #0
    1394:	d002      	beq.n	139c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	2200      	movs	r2, #0
    139a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    139c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    139e:	4618      	mov	r0, r3
    13a0:	3754      	adds	r7, #84	; 0x54
    13a2:	46bd      	mov	sp, r7
    13a4:	bd90      	pop	{r4, r7, pc}
    13a6:	bf00      	nop
    13a8:	00302e30 	.word	0x00302e30
    13ac:	00232e23 	.word	0x00232e23
    13b0:	003f2e3f 	.word	0x003f2e3f

000013b4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    13b4:	b40f      	push	{r0, r1, r2, r3}
    13b6:	b580      	push	{r7, lr}
    13b8:	b082      	sub	sp, #8
    13ba:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    13bc:	f107 0314 	add.w	r3, r7, #20
    13c0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    13c2:	683a      	ldr	r2, [r7, #0]
    13c4:	6939      	ldr	r1, [r7, #16]
    13c6:	4808      	ldr	r0, [pc, #32]	; (13e8 <am_util_stdio_printf+0x34>)
    13c8:	f7ff fcee 	bl	da8 <am_util_stdio_vsprintf>
    13cc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    13ce:	4b07      	ldr	r3, [pc, #28]	; (13ec <am_util_stdio_printf+0x38>)
    13d0:	681b      	ldr	r3, [r3, #0]
    13d2:	4805      	ldr	r0, [pc, #20]	; (13e8 <am_util_stdio_printf+0x34>)
    13d4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    13d6:	687b      	ldr	r3, [r7, #4]
}
    13d8:	4618      	mov	r0, r3
    13da:	3708      	adds	r7, #8
    13dc:	46bd      	mov	sp, r7
    13de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    13e2:	b004      	add	sp, #16
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	10001014 	.word	0x10001014
    13ec:	10001118 	.word	0x10001118

000013f0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    13f4:	4802      	ldr	r0, [pc, #8]	; (1400 <am_util_stdio_terminal_clear+0x10>)
    13f6:	f7ff ffdd 	bl	13b4 <am_util_stdio_printf>
}
    13fa:	bf00      	nop
    13fc:	bd80      	pop	{r7, pc}
    13fe:	bf00      	nop
    1400:	000018c0 	.word	0x000018c0

00001404 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1404:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1406:	f000 f8d1 	bl	15ac <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    140a:	f000 f9a9 	bl	1760 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    140e:	2001      	movs	r0, #1
    1410:	f000 f8e2 	bl	15d8 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1414:	2001      	movs	r0, #1
    1416:	f000 f827 	bl	1468 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    141a:	f000 f8eb 	bl	15f4 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    141e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    1422:	f000 b8bb 	b.w	159c <am_hal_mcuctrl_bandgap_disable>
    1426:	bf00      	nop

00001428 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(0, pcString);
    1428:	4601      	mov	r1, r0
    142a:	2000      	movs	r0, #0
    142c:	f000 b984 	b.w	1738 <am_hal_uart_string_transmit_polled>

00001430 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1430:	4b05      	ldr	r3, [pc, #20]	; (1448 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1432:	4906      	ldr	r1, [pc, #24]	; (144c <am_hal_clkgen_sysclk_select+0x1c>)
{
    1434:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1436:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1438:	2447      	movs	r4, #71	; 0x47
    143a:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    143c:	6008      	str	r0, [r1, #0]
}
    143e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    1442:	601a      	str	r2, [r3, #0]
}
    1444:	4770      	bx	lr
    1446:	bf00      	nop
    1448:	40004014 	.word	0x40004014
    144c:	40004018 	.word	0x40004018

00001450 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <am_hal_clkgen_sysclk_get+0x10>)
    1452:	4a04      	ldr	r2, [pc, #16]	; (1464 <am_hal_clkgen_sysclk_get+0x14>)
    1454:	6818      	ldr	r0, [r3, #0]
    1456:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    145a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    145e:	4770      	bx	lr
    1460:	40004018 	.word	0x40004018
    1464:	0000190c 	.word	0x0000190c

00001468 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1468:	0783      	lsls	r3, r0, #30
    146a:	d003      	beq.n	1474 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    146c:	4b02      	ldr	r3, [pc, #8]	; (1478 <am_hal_clkgen_osc_stop+0x10>)
    146e:	681a      	ldr	r2, [r3, #0]
    1470:	4310      	orrs	r0, r2
    1472:	6018      	str	r0, [r3, #0]
    1474:	4770      	bx	lr
    1476:	bf00      	nop
    1478:	4000400c 	.word	0x4000400c

0000147c <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    147c:	4b29      	ldr	r3, [pc, #164]	; (1524 <am_hal_mcuctrl_device_info_get+0xa8>)
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    147e:	492a      	ldr	r1, [pc, #168]	; (1528 <am_hal_mcuctrl_device_info_get+0xac>)

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1480:	4a2a      	ldr	r2, [pc, #168]	; (152c <am_hal_mcuctrl_device_info_get+0xb0>)
{
    1482:	b4f0      	push	{r4, r5, r6, r7}
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1484:	681f      	ldr	r7, [r3, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1486:	4d2a      	ldr	r5, [pc, #168]	; (1530 <am_hal_mcuctrl_device_info_get+0xb4>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1488:	6007      	str	r7, [r0, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    148a:	682d      	ldr	r5, [r5, #0]
    148c:	6045      	str	r5, [r0, #4]
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    148e:	680f      	ldr	r7, [r1, #0]
    1490:	6087      	str	r7, [r0, #8]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1492:	6811      	ldr	r1, [r2, #0]
    1494:	60c1      	str	r1, [r0, #12]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    1496:	681a      	ldr	r2, [r3, #0]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    1498:	4e26      	ldr	r6, [pc, #152]	; (1534 <am_hal_mcuctrl_device_info_get+0xb8>)

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    149a:	4c27      	ldr	r4, [pc, #156]	; (1538 <am_hal_mcuctrl_device_info_get+0xbc>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    149c:	4d27      	ldr	r5, [pc, #156]	; (153c <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    149e:	4f28      	ldr	r7, [pc, #160]	; (1540 <am_hal_mcuctrl_device_info_get+0xc4>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    14a0:	4928      	ldr	r1, [pc, #160]	; (1544 <am_hal_mcuctrl_device_info_get+0xc8>)
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    14a2:	f002 0201 	and.w	r2, r2, #1
    14a6:	6142      	str	r2, [r0, #20]
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    14a8:	681a      	ldr	r2, [r3, #0]
    14aa:	f3c2 5c03 	ubfx	ip, r2, #20, #4

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    14ae:	4a26      	ldr	r2, [pc, #152]	; (1548 <am_hal_mcuctrl_device_info_get+0xcc>)
    psDevice->ui32FlashSize =
    14b0:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
    14b4:	6186      	str	r6, [r0, #24]
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    14b6:	681b      	ldr	r3, [r3, #0]
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    14b8:	4e24      	ldr	r6, [pc, #144]	; (154c <am_hal_mcuctrl_device_info_get+0xd0>)
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    14ba:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32SRAMSize =
    14be:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    14c2:	61c4      	str	r4, [r0, #28]
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    14c4:	682b      	ldr	r3, [r5, #0]
    14c6:	b2dc      	uxtb	r4, r3
    14c8:	6204      	str	r4, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    14ca:	683b      	ldr	r3, [r7, #0]
    14cc:	021b      	lsls	r3, r3, #8
    14ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    14d2:	4323      	orrs	r3, r4
    14d4:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    14d6:	683f      	ldr	r7, [r7, #0]
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    14d8:	4c1d      	ldr	r4, [pc, #116]	; (1550 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    14da:	f3c7 1703 	ubfx	r7, r7, #4, #4
    14de:	6247      	str	r7, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    14e0:	680b      	ldr	r3, [r1, #0]
    14e2:	011b      	lsls	r3, r3, #4
    14e4:	b2db      	uxtb	r3, r3
    14e6:	433b      	orrs	r3, r7
    14e8:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    14ea:	680f      	ldr	r7, [r1, #0]
    14ec:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    14f0:	6287      	str	r7, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    14f2:	6836      	ldr	r6, [r6, #0]
    14f4:	f3c6 1303 	ubfx	r3, r6, #4, #4
    14f8:	433b      	orrs	r3, r7
    14fa:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    14fc:	6812      	ldr	r2, [r2, #0]
    14fe:	0617      	lsls	r7, r2, #24
    1500:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1502:	69ae      	ldr	r6, [r5, #24]
    1504:	0435      	lsls	r5, r6, #16
    1506:	f405 037f 	and.w	r3, r5, #16711680	; 0xff0000
    150a:	431f      	orrs	r7, r3
    150c:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    150e:	6824      	ldr	r4, [r4, #0]
    1510:	0222      	lsls	r2, r4, #8
    1512:	b296      	uxth	r6, r2
    1514:	433e      	orrs	r6, r7
    1516:	62c6      	str	r6, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    1518:	688f      	ldr	r7, [r1, #8]
    151a:	b2f9      	uxtb	r1, r7
    151c:	430e      	orrs	r6, r1
    151e:	62c6      	str	r6, [r0, #44]	; 0x2c
}
    1520:	bcf0      	pop	{r4, r5, r6, r7}
    1522:	4770      	bx	lr
    1524:	40020000 	.word	0x40020000
    1528:	40020008 	.word	0x40020008
    152c:	4002000c 	.word	0x4002000c
    1530:	40020004 	.word	0x40020004
    1534:	0000192c 	.word	0x0000192c
    1538:	0000196c 	.word	0x0000196c
    153c:	f0000fe0 	.word	0xf0000fe0
    1540:	f0000fe4 	.word	0xf0000fe4
    1544:	f0000fe8 	.word	0xf0000fe8
    1548:	f0000ffc 	.word	0xf0000ffc
    154c:	f0000fec 	.word	0xf0000fec
    1550:	f0000ff4 	.word	0xf0000ff4

00001554 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1554:	490d      	ldr	r1, [pc, #52]	; (158c <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1556:	4b0e      	ldr	r3, [pc, #56]	; (1590 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1558:	4a0e      	ldr	r2, [pc, #56]	; (1594 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    155a:	681b      	ldr	r3, [r3, #0]
{
    155c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    155e:	680d      	ldr	r5, [r1, #0]
    1560:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1562:	6815      	ldr	r5, [r2, #0]
    1564:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1566:	4c0c      	ldr	r4, [pc, #48]	; (1598 <am_hal_mcuctrl_fault_status+0x44>)
    1568:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    156a:	4329      	orrs	r1, r5
    156c:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    156e:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1570:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1574:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1576:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1578:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    157c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1580:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1582:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1584:	6142      	str	r2, [r0, #20]
}
    1586:	bc70      	pop	{r4, r5, r6}
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	400201c4 	.word	0x400201c4
    1590:	400201cc 	.word	0x400201cc
    1594:	400201c0 	.word	0x400201c0
    1598:	400201c8 	.word	0x400201c8

0000159c <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    159c:	4b02      	ldr	r3, [pc, #8]	; (15a8 <am_hal_mcuctrl_bandgap_disable+0xc>)
    159e:	f06f 0201 	mvn.w	r2, #1
    15a2:	601a      	str	r2, [r3, #0]
    15a4:	4770      	bx	lr
    15a6:	bf00      	nop
    15a8:	400200fc 	.word	0x400200fc

000015ac <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    15ac:	4b08      	ldr	r3, [pc, #32]	; (15d0 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    15ae:	4a09      	ldr	r2, [pc, #36]	; (15d4 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    15b0:	6819      	ldr	r1, [r3, #0]
    15b2:	f041 0002 	orr.w	r0, r1, #2
    15b6:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    15b8:	6819      	ldr	r1, [r3, #0]
    15ba:	f041 0001 	orr.w	r0, r1, #1
    15be:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    15c0:	6813      	ldr	r3, [r2, #0]
    15c2:	0799      	lsls	r1, r3, #30
    15c4:	d5fc      	bpl.n	15c0 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    15c6:	4a03      	ldr	r2, [pc, #12]	; (15d4 <am_hal_mcuctrl_bucks_enable+0x28>)
    15c8:	6811      	ldr	r1, [r2, #0]
    15ca:	07cb      	lsls	r3, r1, #31
    15cc:	d5fc      	bpl.n	15c8 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    15ce:	4770      	bx	lr
    15d0:	40020010 	.word	0x40020010
    15d4:	40020014 	.word	0x40020014

000015d8 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    15d8:	4a05      	ldr	r2, [pc, #20]	; (15f0 <am_hal_rtc_osc_select+0x18>)
    15da:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    15dc:	b918      	cbnz	r0, 15e6 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    15de:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    15e2:	6010      	str	r0, [r2, #0]
    15e4:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    15e6:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    15ea:	6011      	str	r1, [r2, #0]
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop
    15f0:	4000400c 	.word	0x4000400c

000015f4 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    15f4:	4a02      	ldr	r2, [pc, #8]	; (1600 <am_hal_rtc_osc_disable+0xc>)
    15f6:	6813      	ldr	r3, [r2, #0]
    15f8:	f043 0010 	orr.w	r0, r3, #16
    15fc:	6010      	str	r0, [r2, #0]
    15fe:	4770      	bx	lr
    1600:	40004050 	.word	0x40004050

00001604 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1604:	4a08      	ldr	r2, [pc, #32]	; (1628 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1606:	b118      	cbz	r0, 1610 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1608:	4b08      	ldr	r3, [pc, #32]	; (162c <am_hal_sysctrl_sleep+0x28>)
    160a:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    160c:	07c3      	lsls	r3, r0, #31
    160e:	d505      	bpl.n	161c <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1610:	6811      	ldr	r1, [r2, #0]
    1612:	f021 0304 	bic.w	r3, r1, #4
    1616:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    1618:	bf30      	wfi
    161a:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    161c:	6810      	ldr	r0, [r2, #0]
    161e:	f040 0104 	orr.w	r1, r0, #4
    1622:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1624:	bf30      	wfi
    1626:	4770      	bx	lr
    1628:	e000ed10 	.word	0xe000ed10
    162c:	40020250 	.word	0x40020250

00001630 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1634:	680d      	ldr	r5, [r1, #0]
    1636:	f7ff ff0b 	bl	1450 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    163a:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    163c:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    1640:	b30a      	cbz	r2, 1686 <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1642:	4d11      	ldr	r5, [pc, #68]	; (1688 <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    1644:	4e11      	ldr	r6, [pc, #68]	; (168c <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1646:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    1648:	0183      	lsls	r3, r0, #6
    164a:	fbb3 f0f1 	udiv	r0, r3, r1
    164e:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1652:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1654:	490e      	ldr	r1, [pc, #56]	; (1690 <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    1656:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1658:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    165a:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    165c:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    165e:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    1660:	4a0c      	ldr	r2, [pc, #48]	; (1694 <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1662:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1664:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1666:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    166a:	bf14      	ite	ne
    166c:	2008      	movne	r0, #8
    166e:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    1670:	4303      	orrs	r3, r0
    1672:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    1674:	6811      	ldr	r1, [r2, #0]
    1676:	6924      	ldr	r4, [r4, #16]
    1678:	4321      	orrs	r1, r4
    167a:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    167c:	6813      	ldr	r3, [r2, #0]
    167e:	f043 0610 	orr.w	r6, r3, #16
    1682:	6016      	str	r6, [r2, #0]
    1684:	bd70      	pop	{r4, r5, r6, pc}
    1686:	e7fe      	b.n	1686 <am_hal_uart_config+0x56>
    1688:	4001c024 	.word	0x4001c024
    168c:	4001c028 	.word	0x4001c028
    1690:	4001c02c 	.word	0x4001c02c
    1694:	4001c030 	.word	0x4001c030

00001698 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, 0, IEC) = ui32Interrupt;
    1698:	4b01      	ldr	r3, [pc, #4]	; (16a0 <am_hal_uart_int_clear+0x8>)
    169a:	6019      	str	r1, [r3, #0]
    169c:	4770      	bx	lr
    169e:	bf00      	nop
    16a0:	4001c044 	.word	0x4001c044

000016a4 <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    16a4:	4a03      	ldr	r2, [pc, #12]	; (16b4 <am_hal_uart_enable+0x10>)
    16a6:	6813      	ldr	r3, [r2, #0]
    16a8:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    16ac:	f040 0101 	orr.w	r1, r0, #1
    16b0:	6011      	str	r1, [r2, #0]
    16b2:	4770      	bx	lr
    16b4:	4001c030 	.word	0x4001c030

000016b8 <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    16b8:	4a03      	ldr	r2, [pc, #12]	; (16c8 <am_hal_uart_disable+0x10>)
    16ba:	6813      	ldr	r3, [r2, #0]
    16bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    16c0:	f020 0101 	bic.w	r1, r0, #1
    16c4:	6011      	str	r1, [r2, #0]
    16c6:	4770      	bx	lr
    16c8:	4001c030 	.word	0x4001c030

000016cc <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    16cc:	4907      	ldr	r1, [pc, #28]	; (16ec <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    16ce:	4b08      	ldr	r3, [pc, #32]	; (16f0 <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    16d0:	680a      	ldr	r2, [r1, #0]
    16d2:	f042 0001 	orr.w	r0, r2, #1
    16d6:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    16d8:	6819      	ldr	r1, [r3, #0]
    16da:	f041 0208 	orr.w	r2, r1, #8
    16de:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    16e0:	6818      	ldr	r0, [r3, #0]
    16e2:	f040 0110 	orr.w	r1, r0, #16
    16e6:	6019      	str	r1, [r3, #0]
    16e8:	4770      	bx	lr
    16ea:	bf00      	nop
    16ec:	4000402c 	.word	0x4000402c
    16f0:	4001c030 	.word	0x4001c030

000016f4 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    16f4:	4905      	ldr	r1, [pc, #20]	; (170c <am_hal_uart_clock_disable+0x18>)

    //
    // Disable the UART clock in the CLKGEN module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    16f6:	4a06      	ldr	r2, [pc, #24]	; (1710 <am_hal_uart_clock_disable+0x1c>)
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    16f8:	680b      	ldr	r3, [r1, #0]
    16fa:	f023 0008 	bic.w	r0, r3, #8
    16fe:	6008      	str	r0, [r1, #0]
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1700:	6811      	ldr	r1, [r2, #0]
    1702:	f021 0301 	bic.w	r3, r1, #1
    1706:	6013      	str	r3, [r2, #0]
    1708:	4770      	bx	lr
    170a:	bf00      	nop
    170c:	4001c030 	.word	0x4001c030
    1710:	4000402c 	.word	0x4000402c

00001714 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1714:	4a03      	ldr	r2, [pc, #12]	; (1724 <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    1716:	4804      	ldr	r0, [pc, #16]	; (1728 <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1718:	6813      	ldr	r3, [r2, #0]
    171a:	f043 0310 	orr.w	r3, r3, #16
    171e:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    1720:	6001      	str	r1, [r0, #0]
    1722:	4770      	bx	lr
    1724:	4001c02c 	.word	0x4001c02c
    1728:	4001c034 	.word	0x4001c034

0000172c <am_hal_uart_flags_get>:
am_hal_uart_flags_get(uint32_t ui32Module)
{
    //
    // Read and return the Flags.
    //
    return AM_REGn(UART, 0, FR);
    172c:	4b01      	ldr	r3, [pc, #4]	; (1734 <am_hal_uart_flags_get+0x8>)
    172e:	6818      	ldr	r0, [r3, #0]
}
    1730:	4770      	bx	lr
    1732:	bf00      	nop
    1734:	4001c018 	.word	0x4001c018

00001738 <am_hal_uart_string_transmit_polled>:
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while ( *pcString )
    1738:	7808      	ldrb	r0, [r1, #0]
    173a:	b160      	cbz	r0, 1756 <am_hal_uart_string_transmit_polled+0x1e>
{
    173c:	b410      	push	{r4}
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    173e:	4a06      	ldr	r2, [pc, #24]	; (1758 <am_hal_uart_string_transmit_polled+0x20>)

        //
        // Write the char.
        //
        AM_REGn(UART, 0, DR) = *pcString++;
    1740:	4c06      	ldr	r4, [pc, #24]	; (175c <am_hal_uart_string_transmit_polled+0x24>)
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    1742:	6813      	ldr	r3, [r2, #0]
    1744:	069b      	lsls	r3, r3, #26
    1746:	d4fc      	bmi.n	1742 <am_hal_uart_string_transmit_polled+0xa>
        AM_REGn(UART, 0, DR) = *pcString++;
    1748:	6020      	str	r0, [r4, #0]
    while ( *pcString )
    174a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    174e:	2800      	cmp	r0, #0
    1750:	d1f7      	bne.n	1742 <am_hal_uart_string_transmit_polled+0xa>
    }
}
    1752:	f85d 4b04 	ldr.w	r4, [sp], #4
    1756:	4770      	bx	lr
    1758:	4001c018 	.word	0x4001c018
    175c:	4001c000 	.word	0x4001c000

00001760 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1760:	4b01      	ldr	r3, [pc, #4]	; (1768 <am_hal_vcomp_disable+0x8>)
    1762:	2237      	movs	r2, #55	; 0x37
    1764:	601a      	str	r2, [r3, #0]
    1766:	4770      	bx	lr
    1768:	4000c008 	.word	0x4000c008
    176c:	6c6c6548 	.word	0x6c6c6548
    1770:	6f57206f 	.word	0x6f57206f
    1774:	21646c72 	.word	0x21646c72
    1778:	00000a0a 	.word	0x00000a0a
    177c:	646e6556 	.word	0x646e6556
    1780:	4e20726f 	.word	0x4e20726f
    1784:	3a656d61 	.word	0x3a656d61
    1788:	0a732520 	.word	0x0a732520
    178c:	00000000 	.word	0x00000000
    1790:	69766544 	.word	0x69766544
    1794:	74206563 	.word	0x74206563
    1798:	3a657079 	.word	0x3a657079
    179c:	0a732520 	.word	0x0a732520
    17a0:	00000000 	.word	0x00000000
    17a4:	00736559 	.word	0x00736559
    17a8:	00006f4e 	.word	0x00006f4e
    17ac:	6c617551 	.word	0x6c617551
    17b0:	65696669 	.word	0x65696669
    17b4:	25203a64 	.word	0x25203a64
    17b8:	00000a73 	.word	0x00000a73
    17bc:	69766544 	.word	0x69766544
    17c0:	49206563 	.word	0x49206563
    17c4:	3a6f666e 	.word	0x3a6f666e
    17c8:	6150090a 	.word	0x6150090a
    17cc:	6e207472 	.word	0x6e207472
    17d0:	65626d75 	.word	0x65626d75
    17d4:	30203a72 	.word	0x30203a72
    17d8:	38302578 	.word	0x38302578
    17dc:	43090a58 	.word	0x43090a58
    17e0:	20706968 	.word	0x20706968
    17e4:	3a304449 	.word	0x3a304449
    17e8:	20202020 	.word	0x20202020
    17ec:	30257830 	.word	0x30257830
    17f0:	090a5838 	.word	0x090a5838
    17f4:	70696843 	.word	0x70696843
    17f8:	31444920 	.word	0x31444920
    17fc:	2020203a 	.word	0x2020203a
    1800:	25783020 	.word	0x25783020
    1804:	0a583830 	.word	0x0a583830
    1808:	76655209 	.word	0x76655209
    180c:	6f697369 	.word	0x6f697369
    1810:	20203a6e 	.word	0x20203a6e
    1814:	78302020 	.word	0x78302020
    1818:	58383025 	.word	0x58383025
    181c:	65522820 	.word	0x65522820
    1820:	25632576 	.word	0x25632576
    1824:	000a2963 	.word	0x000a2963
    1828:	616c4609 	.word	0x616c4609
    182c:	73206873 	.word	0x73206873
    1830:	3a657a69 	.word	0x3a657a69
    1834:	37252020 	.word	0x37252020
    1838:	25282064 	.word	0x25282064
    183c:	424b2064 	.word	0x424b2064
    1840:	0a297325 	.word	0x0a297325
    1844:	00000000 	.word	0x00000000
    1848:	41525309 	.word	0x41525309
    184c:	6973204d 	.word	0x6973204d
    1850:	203a657a 	.word	0x203a657a
    1854:	37252020 	.word	0x37252020
    1858:	25282064 	.word	0x25282064
    185c:	424b2064 	.word	0x424b2064
    1860:	0a297325 	.word	0x0a297325
    1864:	0000000a 	.word	0x0000000a
    1868:	20434347 	.word	0x20434347
    186c:	2e332e36 	.word	0x2e332e36
    1870:	30322031 	.word	0x30322031
    1874:	32303731 	.word	0x32303731
    1878:	28203531 	.word	0x28203531
    187c:	656c6572 	.word	0x656c6572
    1880:	29657361 	.word	0x29657361
    1884:	52415b20 	.word	0x52415b20
    1888:	6d652f4d 	.word	0x6d652f4d
    188c:	64646562 	.word	0x64646562
    1890:	362d6465 	.word	0x362d6465
    1894:	6172622d 	.word	0x6172622d
    1898:	2068636e 	.word	0x2068636e
    189c:	69766572 	.word	0x69766572
    18a0:	6e6f6973 	.word	0x6e6f6973
    18a4:	35343220 	.word	0x35343220
    18a8:	5d323135 	.word	0x5d323135
    18ac:	00000000 	.word	0x00000000
    18b0:	706d6f43 	.word	0x706d6f43
    18b4:	72656c69 	.word	0x72656c69
    18b8:	7325203a 	.word	0x7325203a
    18bc:	0000000a 	.word	0x0000000a
    18c0:	0a0a0a0a 	.word	0x0a0a0a0a
    18c4:	0a0a0a0a 	.word	0x0a0a0a0a
    18c8:	0a0a0a0a 	.word	0x0a0a0a0a
    18cc:	0a0a0a0a 	.word	0x0a0a0a0a
    18d0:	00000a0a 	.word	0x00000a0a

000018d4 <g_DeviceNameApollo>:
    18d4:	6c6f7041 00006f6c                       Apollo..

000018dc <g_DeviceNameApollo2>:
    18dc:	6c6f7041 00326f6c                       Apollo2.

000018e4 <g_DeviceNameApollo3>:
    18e4:	6c6f7041 00336f6c                       Apollo3.

000018ec <g_ui8VendorNameAmbq>:
    18ec:	51424d41 00000000                       AMBQ....

000018f4 <g_ui8VendorNameUnknown>:
    18f4:	3f3f3f3f 00000000                       ????....

000018fc <g_ui8DeviceNameUnknown>:
    18fc:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000190c <CSWTCH.4>:
    190c:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    191c:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.

0000192c <am_hal_mcuctrl_flash_size>:
    192c:	00008000 00010000 00020000 00040000     ................
    193c:	00080000 00100000 00200000 00000000     .......... .....
	...
    1968:	00004000                                .@..

0000196c <am_hal_mcuctrl_sram_size>:
    196c:	00008000 00010000 00020000 00040000     ................
    197c:	00080000 00100000 00200000 00000000     .......... .....
	...
    19a8:	00004000                                .@..
