
ios_fifo_host_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004aa0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000024  10001000  00004aa0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006a8  10001024  00004ac4  00021024  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021024  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000c253  00000000  00000000  0002105b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002321  00000000  00000000  0002d2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000840  00000000  00000000  0002f5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000014f8  00000000  00000000  0002fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000050e1  00000000  00000000  00031307  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  000363e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00038d16  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000179c  00000000  00000000  00038d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000090c1  00000000  00000000  0003a530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 71 07 00 00 d9 07 00 00 df 07 00 00     ....q...........
      10:	df 07 00 00 df 07 00 00 df 07 00 00 00 00 00 00     ................
	...
      2c:	e5 07 00 00 e5 07 00 00 00 00 00 00 e5 07 00 00     ................
      3c:	e5 07 00 00 e5 07 00 00 e5 07 00 00 e5 07 00 00     ................
      4c:	e5 07 00 00 e5 07 00 00 e5 07 00 00 e5 07 00 00     ................
      5c:	e5 07 00 00 e5 07 00 00 d9 01 00 00 e5 07 00 00     ................
      6c:	e5 07 00 00 e5 07 00 00 e5 07 00 00 e5 07 00 00     ................
      7c:	e5 07 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <clear_rx_buf>:
// Clear Rx Buffer for comparison
//
//*****************************************************************************
void
clear_rx_buf(void)
{
     120:	b480      	push	{r7}
     122:	b083      	sub	sp, #12
     124:	af00      	add	r7, sp, #0
    uint32_t i;
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
     126:	2300      	movs	r3, #0
     128:	607b      	str	r3, [r7, #4]
     12a:	e007      	b.n	13c <clear_rx_buf+0x1c>
    {
        g_pui8RcvBuf[i] = EMPTY_BYTE;
     12c:	4a08      	ldr	r2, [pc, #32]	; (150 <clear_rx_buf+0x30>)
     12e:	687b      	ldr	r3, [r7, #4]
     130:	4413      	add	r3, r2
     132:	22ee      	movs	r2, #238	; 0xee
     134:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < AM_TEST_RCV_BUF_SIZE; i++ )
     136:	687b      	ldr	r3, [r7, #4]
     138:	3301      	adds	r3, #1
     13a:	607b      	str	r3, [r7, #4]
     13c:	687b      	ldr	r3, [r7, #4]
     13e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     142:	d3f3      	bcc.n	12c <clear_rx_buf+0xc>
    }
}
     144:	bf00      	nop
     146:	370c      	adds	r7, #12
     148:	46bd      	mov	sp, r7
     14a:	f85d 7b04 	ldr.w	r7, [sp], #4
     14e:	4770      	bx	lr
     150:	10001170 	.word	0x10001170

00000154 <validate_rx_buf>:
// Returns 0 for success case
//
//*****************************************************************************
uint32_t
validate_rx_buf(uint32_t rxSize)
{
     154:	b580      	push	{r7, lr}
     156:	b084      	sub	sp, #16
     158:	af00      	add	r7, sp, #0
     15a:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for ( i = 0; i < rxSize; i++ )
     15c:	2300      	movs	r3, #0
     15e:	60fb      	str	r3, [r7, #12]
     160:	e013      	b.n	18a <validate_rx_buf+0x36>
    {
        if ( g_pui8RcvBuf[i] != (((g_startIdx + i) & 0xFF) ^ XOR_BYTE) )
     162:	4a14      	ldr	r2, [pc, #80]	; (1b4 <validate_rx_buf+0x60>)
     164:	68fb      	ldr	r3, [r7, #12]
     166:	4413      	add	r3, r2
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	4619      	mov	r1, r3
     16c:	4b12      	ldr	r3, [pc, #72]	; (1b8 <validate_rx_buf+0x64>)
     16e:	681a      	ldr	r2, [r3, #0]
     170:	68fb      	ldr	r3, [r7, #12]
     172:	4413      	add	r3, r2
     174:	b2db      	uxtb	r3, r3
     176:	4299      	cmp	r1, r3
     178:	d004      	beq.n	184 <validate_rx_buf+0x30>
        {
            am_util_stdio_printf("Failed to compare buffers at index %d \n", i);
     17a:	68f9      	ldr	r1, [r7, #12]
     17c:	480f      	ldr	r0, [pc, #60]	; (1bc <validate_rx_buf+0x68>)
     17e:	f001 f9b9 	bl	14f4 <am_util_stdio_printf>
            break;
     182:	e006      	b.n	192 <validate_rx_buf+0x3e>
    for ( i = 0; i < rxSize; i++ )
     184:	68fb      	ldr	r3, [r7, #12]
     186:	3301      	adds	r3, #1
     188:	60fb      	str	r3, [r7, #12]
     18a:	68fa      	ldr	r2, [r7, #12]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	429a      	cmp	r2, r3
     190:	d3e7      	bcc.n	162 <validate_rx_buf+0xe>
        }
    }
    // Set the reference for next chunk
    g_startIdx += rxSize;
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <validate_rx_buf+0x64>)
     194:	681a      	ldr	r2, [r3, #0]
     196:	687b      	ldr	r3, [r7, #4]
     198:	4413      	add	r3, r2
     19a:	4a07      	ldr	r2, [pc, #28]	; (1b8 <validate_rx_buf+0x64>)
     19c:	6013      	str	r3, [r2, #0]
    return (i == rxSize);
     19e:	68fa      	ldr	r2, [r7, #12]
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	429a      	cmp	r2, r3
     1a4:	bf0c      	ite	eq
     1a6:	2301      	moveq	r3, #1
     1a8:	2300      	movne	r3, #0
     1aa:	b2db      	uxtb	r3, r3
}
     1ac:	4618      	mov	r0, r3
     1ae:	3710      	adds	r7, #16
     1b0:	46bd      	mov	sp, r7
     1b2:	bd80      	pop	{r7, pc}
     1b4:	10001170 	.word	0x10001170
     1b8:	10001024 	.word	0x10001024
     1bc:	0000473c 	.word	0x0000473c

000001c0 <hostint_handler>:

// ISR callback for the host IOINT
static void hostint_handler(void)
{
     1c0:	b480      	push	{r7}
     1c2:	af00      	add	r7, sp, #0
    bIosInt = true;
     1c4:	4b03      	ldr	r3, [pc, #12]	; (1d4 <hostint_handler+0x14>)
     1c6:	2201      	movs	r2, #1
     1c8:	701a      	strb	r2, [r3, #0]
}
     1ca:	bf00      	nop
     1cc:	46bd      	mov	sp, r7
     1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     1d2:	4770      	bx	lr
     1d4:	10001028 	.word	0x10001028

000001d8 <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b082      	sub	sp, #8
     1dc:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
     1de:	2000      	movs	r0, #0
     1e0:	f001 fb60 	bl	18a4 <am_hal_gpio_int_status_get>
     1e4:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     1e8:	e9d7 0100 	ldrd	r0, r1, [r7]
     1ec:	f001 fb50 	bl	1890 <am_hal_gpio_int_clear>
    am_hal_gpio_int_service(ui64Status);
     1f0:	e9d7 0100 	ldrd	r0, r1, [r7]
     1f4:	f001 fb78 	bl	18e8 <am_hal_gpio_int_service>
}
     1f8:	bf00      	nop
     1fa:	3708      	adds	r7, #8
     1fc:	46bd      	mov	sp, r7
     1fe:	bd80      	pop	{r7, pc}

00000200 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     204:	480f      	ldr	r0, [pc, #60]	; (244 <itm_start+0x44>)
     206:	f000 faf1 	bl	7ec <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     20a:	4b0f      	ldr	r3, [pc, #60]	; (248 <itm_start+0x48>)
     20c:	2273      	movs	r2, #115	; 0x73
     20e:	601a      	str	r2, [r3, #0]
     210:	4a0e      	ldr	r2, [pc, #56]	; (24c <itm_start+0x4c>)
     212:	4b0e      	ldr	r3, [pc, #56]	; (24c <itm_start+0x4c>)
     214:	681b      	ldr	r3, [r3, #0]
     216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     21a:	6013      	str	r3, [r2, #0]
     21c:	4a0c      	ldr	r2, [pc, #48]	; (250 <itm_start+0x50>)
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <itm_start+0x50>)
     220:	681b      	ldr	r3, [r3, #0]
     222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     22a:	6013      	str	r3, [r2, #0]
     22c:	4b06      	ldr	r3, [pc, #24]	; (248 <itm_start+0x48>)
     22e:	2200      	movs	r2, #0
     230:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     232:	f003 f92f 	bl	3494 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     236:	f001 fa4b 	bl	16d0 <am_bsp_debug_printf_enable>
    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     23a:	f001 f979 	bl	1530 <am_util_stdio_terminal_clear>
}
     23e:	bf00      	nop
     240:	bd80      	pop	{r7, pc}
     242:	bf00      	nop
     244:	00001729 	.word	0x00001729
     248:	40010060 	.word	0x40010060
     24c:	40010054 	.word	0x40010054
     250:	40010028 	.word	0x40010028

00000254 <iom_slave_read>:

void
iom_slave_read(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
     254:	b580      	push	{r7, lr}
     256:	b086      	sub	sp, #24
     258:	af02      	add	r7, sp, #8
     25a:	60f8      	str	r0, [r7, #12]
     25c:	607a      	str	r2, [r7, #4]
     25e:	603b      	str	r3, [r7, #0]
     260:	460b      	mov	r3, r1
     262:	72fb      	strb	r3, [r7, #11]
    if ( bSpi )
     264:	7afb      	ldrb	r3, [r7, #11]
     266:	2b00      	cmp	r3, #0
     268:	d00a      	beq.n	280 <iom_slave_read+0x2c>
    {
        am_hal_iom_spi_read(iom, 0,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	021b      	lsls	r3, r3, #8
        am_hal_iom_spi_read(iom, 0,
     26e:	b29b      	uxth	r3, r3
     270:	9300      	str	r3, [sp, #0]
     272:	69bb      	ldr	r3, [r7, #24]
     274:	683a      	ldr	r2, [r7, #0]
     276:	2100      	movs	r1, #0
     278:	68f8      	ldr	r0, [r7, #12]
     27a:	f002 ff19 	bl	30b0 <am_hal_iom_spi_read>
    else
    {
        am_hal_iom_i2c_read(iom, I2C_ADDR,
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
    }
}
     27e:	e009      	b.n	294 <iom_slave_read+0x40>
                            pBuf, size, AM_HAL_IOM_OFFSET(offset));
     280:	687b      	ldr	r3, [r7, #4]
     282:	021b      	lsls	r3, r3, #8
        am_hal_iom_i2c_read(iom, I2C_ADDR,
     284:	b29b      	uxth	r3, r3
     286:	9300      	str	r3, [sp, #0]
     288:	69bb      	ldr	r3, [r7, #24]
     28a:	683a      	ldr	r2, [r7, #0]
     28c:	2110      	movs	r1, #16
     28e:	68f8      	ldr	r0, [r7, #12]
     290:	f003 f84a 	bl	3328 <am_hal_iom_i2c_read>
}
     294:	bf00      	nop
     296:	3710      	adds	r7, #16
     298:	46bd      	mov	sp, r7
     29a:	bd80      	pop	{r7, pc}

0000029c <iom_slave_write>:

void
iom_slave_write(uint32_t iom, bool bSpi, uint32_t offset, uint32_t *pBuf, uint32_t size)
{
     29c:	b580      	push	{r7, lr}
     29e:	b086      	sub	sp, #24
     2a0:	af02      	add	r7, sp, #8
     2a2:	60f8      	str	r0, [r7, #12]
     2a4:	607a      	str	r2, [r7, #4]
     2a6:	603b      	str	r3, [r7, #0]
     2a8:	460b      	mov	r3, r1
     2aa:	72fb      	strb	r3, [r7, #11]
    if ( bSpi )
     2ac:	7afb      	ldrb	r3, [r7, #11]
     2ae:	2b00      	cmp	r3, #0
     2b0:	d00a      	beq.n	2c8 <iom_slave_write+0x2c>
    {
        am_hal_iom_spi_write(iom, 0,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset));
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	021b      	lsls	r3, r3, #8
        am_hal_iom_spi_write(iom, 0,
     2b6:	b29b      	uxth	r3, r3
     2b8:	9300      	str	r3, [sp, #0]
     2ba:	69bb      	ldr	r3, [r7, #24]
     2bc:	683a      	ldr	r2, [r7, #0]
     2be:	2100      	movs	r1, #0
     2c0:	68f8      	ldr	r0, [r7, #12]
     2c2:	f002 fbff 	bl	2ac4 <am_hal_iom_spi_write>
    else
    {
        am_hal_iom_i2c_write(iom, I2C_ADDR,
                             pBuf, size, AM_HAL_IOM_OFFSET(offset) );
    }
}
     2c6:	e009      	b.n	2dc <iom_slave_write+0x40>
                             pBuf, size, AM_HAL_IOM_OFFSET(offset) );
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	021b      	lsls	r3, r3, #8
        am_hal_iom_i2c_write(iom, I2C_ADDR,
     2cc:	b29b      	uxth	r3, r3
     2ce:	9300      	str	r3, [sp, #0]
     2d0:	69bb      	ldr	r3, [r7, #24]
     2d2:	683a      	ldr	r2, [r7, #0]
     2d4:	2110      	movs	r1, #16
     2d6:	68f8      	ldr	r0, [r7, #12]
     2d8:	f002 ff72 	bl	31c0 <am_hal_iom_i2c_write>
}
     2dc:	bf00      	nop
     2de:	3710      	adds	r7, #16
     2e0:	46bd      	mov	sp, r7
     2e2:	bd80      	pop	{r7, pc}

000002e4 <i2c_pins_enable>:
// Internal Helper functions
//
//*****************************************************************************
void
i2c_pins_enable(uint32_t ui32Module)
{
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
    switch(ui32Module)
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d002      	beq.n	2f8 <i2c_pins_enable+0x14>
     2f2:	2b01      	cmp	r3, #1
     2f4:	d033      	beq.n	35e <i2c_pins_enable+0x7a>
     2f6:	e067      	b.n	3c8 <i2c_pins_enable+0xe4>
    {
        case 0:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM0_SCL);
     2f8:	4b37      	ldr	r3, [pc, #220]	; (3d8 <i2c_pins_enable+0xf4>)
     2fa:	2220      	movs	r2, #32
     2fc:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM0_SDA);
     2fe:	4b36      	ldr	r3, [pc, #216]	; (3d8 <i2c_pins_enable+0xf4>)
     300:	2240      	movs	r2, #64	; 0x40
     302:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_SCL, AM_HAL_PIN_5_M0SCL | AM_HAL_GPIO_PULLUP);
     304:	4b35      	ldr	r3, [pc, #212]	; (3dc <i2c_pins_enable+0xf8>)
     306:	2273      	movs	r2, #115	; 0x73
     308:	601a      	str	r2, [r3, #0]
     30a:	4a35      	ldr	r2, [pc, #212]	; (3e0 <i2c_pins_enable+0xfc>)
     30c:	4b34      	ldr	r3, [pc, #208]	; (3e0 <i2c_pins_enable+0xfc>)
     30e:	681b      	ldr	r3, [r3, #0]
     310:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
     314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     318:	6013      	str	r3, [r2, #0]
     31a:	4a32      	ldr	r2, [pc, #200]	; (3e4 <i2c_pins_enable+0x100>)
     31c:	4b31      	ldr	r3, [pc, #196]	; (3e4 <i2c_pins_enable+0x100>)
     31e:	681b      	ldr	r3, [r3, #0]
     320:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     324:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     328:	6013      	str	r3, [r2, #0]
     32a:	4b2c      	ldr	r3, [pc, #176]	; (3dc <i2c_pins_enable+0xf8>)
     32c:	2200      	movs	r2, #0
     32e:	601a      	str	r2, [r3, #0]
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_SDA, AM_HAL_PIN_6_M0SDA | AM_HAL_GPIO_PULLUP);
     330:	4b2a      	ldr	r3, [pc, #168]	; (3dc <i2c_pins_enable+0xf8>)
     332:	2273      	movs	r2, #115	; 0x73
     334:	601a      	str	r2, [r3, #0]
     336:	4a2a      	ldr	r2, [pc, #168]	; (3e0 <i2c_pins_enable+0xfc>)
     338:	4b29      	ldr	r3, [pc, #164]	; (3e0 <i2c_pins_enable+0xfc>)
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     344:	6013      	str	r3, [r2, #0]
     346:	4a27      	ldr	r2, [pc, #156]	; (3e4 <i2c_pins_enable+0x100>)
     348:	4b26      	ldr	r3, [pc, #152]	; (3e4 <i2c_pins_enable+0x100>)
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     350:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     354:	6013      	str	r3, [r2, #0]
     356:	4b21      	ldr	r3, [pc, #132]	; (3dc <i2c_pins_enable+0xf8>)
     358:	2200      	movs	r2, #0
     35a:	601a      	str	r2, [r3, #0]
            break;
     35c:	e035      	b.n	3ca <i2c_pins_enable+0xe6>

        case 1:
            //
            // Set pins high to prevent bus dips.
            //
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM1_SCL);
     35e:	4b1e      	ldr	r3, [pc, #120]	; (3d8 <i2c_pins_enable+0xf4>)
     360:	f44f 7280 	mov.w	r2, #256	; 0x100
     364:	601a      	str	r2, [r3, #0]
            am_hal_gpio_out_bit_set(AM_BSP_GPIO_IOM1_SDA);
     366:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <i2c_pins_enable+0xf4>)
     368:	f44f 7200 	mov.w	r2, #512	; 0x200
     36c:	601a      	str	r2, [r3, #0]

            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM1_SCL, AM_HAL_PIN_8_M1SCL | AM_HAL_GPIO_PULLUP);
     36e:	4b1b      	ldr	r3, [pc, #108]	; (3dc <i2c_pins_enable+0xf8>)
     370:	2273      	movs	r2, #115	; 0x73
     372:	601a      	str	r2, [r3, #0]
     374:	4a1c      	ldr	r2, [pc, #112]	; (3e8 <i2c_pins_enable+0x104>)
     376:	4b1c      	ldr	r3, [pc, #112]	; (3e8 <i2c_pins_enable+0x104>)
     378:	681b      	ldr	r3, [r3, #0]
     37a:	f023 0307 	bic.w	r3, r3, #7
     37e:	f043 0304 	orr.w	r3, r3, #4
     382:	6013      	str	r3, [r2, #0]
     384:	4a19      	ldr	r2, [pc, #100]	; (3ec <i2c_pins_enable+0x108>)
     386:	4b19      	ldr	r3, [pc, #100]	; (3ec <i2c_pins_enable+0x108>)
     388:	681b      	ldr	r3, [r3, #0]
     38a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     38e:	f043 0303 	orr.w	r3, r3, #3
     392:	6013      	str	r3, [r2, #0]
     394:	4b11      	ldr	r3, [pc, #68]	; (3dc <i2c_pins_enable+0xf8>)
     396:	2200      	movs	r2, #0
     398:	601a      	str	r2, [r3, #0]
            am_hal_gpio_pin_config(AM_BSP_GPIO_IOM1_SDA, AM_HAL_PIN_9_M1SDA | AM_HAL_GPIO_PULLUP);
     39a:	4b10      	ldr	r3, [pc, #64]	; (3dc <i2c_pins_enable+0xf8>)
     39c:	2273      	movs	r2, #115	; 0x73
     39e:	601a      	str	r2, [r3, #0]
     3a0:	4a11      	ldr	r2, [pc, #68]	; (3e8 <i2c_pins_enable+0x104>)
     3a2:	4b11      	ldr	r3, [pc, #68]	; (3e8 <i2c_pins_enable+0x104>)
     3a4:	681b      	ldr	r3, [r3, #0]
     3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3ae:	6013      	str	r3, [r2, #0]
     3b0:	4a0e      	ldr	r2, [pc, #56]	; (3ec <i2c_pins_enable+0x108>)
     3b2:	4b0e      	ldr	r3, [pc, #56]	; (3ec <i2c_pins_enable+0x108>)
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     3ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     3be:	6013      	str	r3, [r2, #0]
     3c0:	4b06      	ldr	r3, [pc, #24]	; (3dc <i2c_pins_enable+0xf8>)
     3c2:	2200      	movs	r2, #0
     3c4:	601a      	str	r2, [r3, #0]
            break;
     3c6:	e000      	b.n	3ca <i2c_pins_enable+0xe6>
        // If we get here, the caller's selected IOM interface couldn't be
        // found in the BSP GPIO definitions. Halt program execution for
        // debugging.
        //
        default:
            while (1);
     3c8:	e7fe      	b.n	3c8 <i2c_pins_enable+0xe4>
    }
}
     3ca:	bf00      	nop
     3cc:	370c      	adds	r7, #12
     3ce:	46bd      	mov	sp, r7
     3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	40010090 	.word	0x40010090
     3dc:	40010060 	.word	0x40010060
     3e0:	40010040 	.word	0x40010040
     3e4:	40010004 	.word	0x40010004
     3e8:	40010044 	.word	0x40010044
     3ec:	40010008 	.word	0x40010008

000003f0 <iom_set_up>:

static void
iom_set_up(uint32_t iomModule, bool bSpi)
{
     3f0:	b590      	push	{r4, r7, lr}
     3f2:	b087      	sub	sp, #28
     3f4:	af02      	add	r7, sp, #8
     3f6:	6078      	str	r0, [r7, #4]
     3f8:	460b      	mov	r3, r1
     3fa:	70fb      	strb	r3, [r7, #3]
    uint32_t ioIntEnable = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
     3fc:	2301      	movs	r3, #1
     3fe:	60fb      	str	r3, [r7, #12]
    //
    // Enable power to IOM.
    //
    am_hal_iom_pwrctrl_enable(iomModule);

    if ( bSpi )
     400:	78fb      	ldrb	r3, [r7, #3]
     402:	2b00      	cmp	r3, #0
     404:	d077      	beq.n	4f6 <iom_set_up+0x106>
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_config(iomModule, &g_sIOMSpiConfig);
     406:	4962      	ldr	r1, [pc, #392]	; (590 <iom_set_up+0x1a0>)
     408:	6878      	ldr	r0, [r7, #4]
     40a:	f002 f951 	bl	26b0 <am_hal_iom_config>

        //
        // Set up IOM SPI pins. Attributes are set in am_bsp_gpio.h.
        //
        am_bsp_iom_spi_pins_enable(iomModule);
     40e:	6878      	ldr	r0, [r7, #4]
     410:	f001 f898 	bl	1544 <am_bsp_iom_spi_pins_enable>

        //
        // Enable the chip-select and data-ready pin.
        //! @note You can enable pins in the HAL or BSP.
        //
        am_hal_gpio_pin_config(apollo2_iomce0[iomModule][0],
     414:	4a5f      	ldr	r2, [pc, #380]	; (594 <iom_set_up+0x1a4>)
     416:	687b      	ldr	r3, [r7, #4]
     418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     41c:	2b00      	cmp	r3, #0
     41e:	db72      	blt.n	506 <iom_set_up+0x116>
     420:	4b5d      	ldr	r3, [pc, #372]	; (598 <iom_set_up+0x1a8>)
     422:	2273      	movs	r2, #115	; 0x73
     424:	601a      	str	r2, [r3, #0]
     426:	4a5b      	ldr	r2, [pc, #364]	; (594 <iom_set_up+0x1a4>)
     428:	687b      	ldr	r3, [r7, #4]
     42a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     42e:	085b      	lsrs	r3, r3, #1
     430:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     434:	4b59      	ldr	r3, [pc, #356]	; (59c <iom_set_up+0x1ac>)
     436:	4413      	add	r3, r2
     438:	461c      	mov	r4, r3
     43a:	4a56      	ldr	r2, [pc, #344]	; (594 <iom_set_up+0x1a4>)
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	00db      	lsls	r3, r3, #3
     440:	4413      	add	r3, r2
     442:	685b      	ldr	r3, [r3, #4]
     444:	0a1b      	lsrs	r3, r3, #8
     446:	f003 0207 	and.w	r2, r3, #7
     44a:	4952      	ldr	r1, [pc, #328]	; (594 <iom_set_up+0x1a4>)
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     452:	009b      	lsls	r3, r3, #2
     454:	f003 031c 	and.w	r3, r3, #28
     458:	409a      	lsls	r2, r3
     45a:	494e      	ldr	r1, [pc, #312]	; (594 <iom_set_up+0x1a4>)
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     462:	085b      	lsrs	r3, r3, #1
     464:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     468:	4b4c      	ldr	r3, [pc, #304]	; (59c <iom_set_up+0x1ac>)
     46a:	440b      	add	r3, r1
     46c:	6819      	ldr	r1, [r3, #0]
     46e:	4849      	ldr	r0, [pc, #292]	; (594 <iom_set_up+0x1a4>)
     470:	687b      	ldr	r3, [r7, #4]
     472:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
     476:	009b      	lsls	r3, r3, #2
     478:	f003 031c 	and.w	r3, r3, #28
     47c:	2007      	movs	r0, #7
     47e:	fa00 f303 	lsl.w	r3, r0, r3
     482:	43db      	mvns	r3, r3
     484:	400b      	ands	r3, r1
     486:	4313      	orrs	r3, r2
     488:	6023      	str	r3, [r4, #0]
     48a:	4a42      	ldr	r2, [pc, #264]	; (594 <iom_set_up+0x1a4>)
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     492:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     49a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     49e:	461c      	mov	r4, r3
     4a0:	4a3c      	ldr	r2, [pc, #240]	; (594 <iom_set_up+0x1a4>)
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	00db      	lsls	r3, r3, #3
     4a6:	4413      	add	r3, r2
     4a8:	685b      	ldr	r3, [r3, #4]
     4aa:	b2da      	uxtb	r2, r3
     4ac:	4939      	ldr	r1, [pc, #228]	; (594 <iom_set_up+0x1a4>)
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     4b4:	00db      	lsls	r3, r3, #3
     4b6:	f003 0318 	and.w	r3, r3, #24
     4ba:	409a      	lsls	r2, r3
     4bc:	4935      	ldr	r1, [pc, #212]	; (594 <iom_set_up+0x1a4>)
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     4c4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     4c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     4cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     4d0:	6819      	ldr	r1, [r3, #0]
     4d2:	4830      	ldr	r0, [pc, #192]	; (594 <iom_set_up+0x1a4>)
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
     4da:	00db      	lsls	r3, r3, #3
     4dc:	f003 0318 	and.w	r3, r3, #24
     4e0:	20ff      	movs	r0, #255	; 0xff
     4e2:	fa00 f303 	lsl.w	r3, r0, r3
     4e6:	43db      	mvns	r3, r3
     4e8:	400b      	ands	r3, r1
     4ea:	4313      	orrs	r3, r2
     4ec:	6023      	str	r3, [r4, #0]
     4ee:	4b2a      	ldr	r3, [pc, #168]	; (598 <iom_set_up+0x1a8>)
     4f0:	2200      	movs	r2, #0
     4f2:	601a      	str	r2, [r3, #0]
     4f4:	e008      	b.n	508 <iom_set_up+0x118>
    else
    {
        //
        // Set the required configuration settings for the IOM.
        //
        am_hal_iom_config(iomModule, &g_sIOMI2cConfig);
     4f6:	492a      	ldr	r1, [pc, #168]	; (5a0 <iom_set_up+0x1b0>)
     4f8:	6878      	ldr	r0, [r7, #4]
     4fa:	f002 f8d9 	bl	26b0 <am_hal_iom_config>

        i2c_pins_enable(iomModule);
     4fe:	6878      	ldr	r0, [r7, #4]
     500:	f7ff fef0 	bl	2e4 <i2c_pins_enable>
     504:	e000      	b.n	508 <iom_set_up+0x118>
        am_hal_gpio_pin_config(apollo2_iomce0[iomModule][0],
     506:	bf00      	nop
    }
    //
    // Turn on the IOM for this operation.
    //
    am_bsp_iom_enable(iomModule);
     508:	6878      	ldr	r0, [r7, #4]
     50a:	f001 f881 	bl	1610 <am_bsp_iom_enable>

    // Set up the host IO interrupt
    am_hal_gpio_pin_config(HANDSHAKE_PIN, AM_HAL_GPIO_INPUT);
     50e:	4b22      	ldr	r3, [pc, #136]	; (598 <iom_set_up+0x1a8>)
     510:	2273      	movs	r2, #115	; 0x73
     512:	601a      	str	r2, [r3, #0]
     514:	4a23      	ldr	r2, [pc, #140]	; (5a4 <iom_set_up+0x1b4>)
     516:	4b23      	ldr	r3, [pc, #140]	; (5a4 <iom_set_up+0x1b4>)
     518:	681b      	ldr	r3, [r3, #0]
     51a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     51e:	6013      	str	r3, [r2, #0]
     520:	4a21      	ldr	r2, [pc, #132]	; (5a8 <iom_set_up+0x1b8>)
     522:	4b21      	ldr	r3, [pc, #132]	; (5a8 <iom_set_up+0x1b8>)
     524:	681b      	ldr	r3, [r3, #0]
     526:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     52a:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
     52e:	6013      	str	r3, [r2, #0]
     530:	4b19      	ldr	r3, [pc, #100]	; (598 <iom_set_up+0x1a8>)
     532:	2200      	movs	r2, #0
     534:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_polarity_bit_set(HANDSHAKE_PIN, AM_HAL_GPIO_RISING);
     536:	4b18      	ldr	r3, [pc, #96]	; (598 <iom_set_up+0x1a8>)
     538:	2273      	movs	r2, #115	; 0x73
     53a:	601a      	str	r2, [r3, #0]
     53c:	4a19      	ldr	r2, [pc, #100]	; (5a4 <iom_set_up+0x1b4>)
     53e:	4b19      	ldr	r3, [pc, #100]	; (5a4 <iom_set_up+0x1b4>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     546:	6013      	str	r3, [r2, #0]
     548:	4b13      	ldr	r3, [pc, #76]	; (598 <iom_set_up+0x1a8>)
     54a:	2200      	movs	r2, #0
     54c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(HANDSHAKE_PIN));
     54e:	f44f 6080 	mov.w	r0, #1024	; 0x400
     552:	f04f 0100 	mov.w	r1, #0
     556:	f001 f99b 	bl	1890 <am_hal_gpio_int_clear>
    // Register handler for IOS => IOM interrupt
    am_hal_gpio_int_register(HANDSHAKE_PIN, hostint_handler);
     55a:	4914      	ldr	r1, [pc, #80]	; (5ac <iom_set_up+0x1bc>)
     55c:	200a      	movs	r0, #10
     55e:	f001 f9ef 	bl	1940 <am_hal_gpio_int_register>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(HANDSHAKE_PIN));
     562:	f44f 6080 	mov.w	r0, #1024	; 0x400
     566:	f04f 0100 	mov.w	r1, #0
     56a:	f001 f981 	bl	1870 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     56e:	2019      	movs	r0, #25
     570:	f001 f9fc 	bl	196c <am_hal_interrupt_enable>

    // Set up IOCTL interrupts
    // IOS ==> IOM
    iom_slave_write(iomModule, bSpi, IOSOFFSET_WRITE_INTEN, &ioIntEnable, 1);
     574:	f107 020c 	add.w	r2, r7, #12
     578:	78f9      	ldrb	r1, [r7, #3]
     57a:	2301      	movs	r3, #1
     57c:	9300      	str	r3, [sp, #0]
     57e:	4613      	mov	r3, r2
     580:	22f8      	movs	r2, #248	; 0xf8
     582:	6878      	ldr	r0, [r7, #4]
     584:	f7ff fe8a 	bl	29c <iom_slave_write>
}
     588:	bf00      	nop
     58a:	3714      	adds	r7, #20
     58c:	46bd      	mov	sp, r7
     58e:	bd90      	pop	{r4, r7, pc}
     590:	10001000 	.word	0x10001000
     594:	0000480c 	.word	0x0000480c
     598:	40010060 	.word	0x40010060
     59c:	40010040 	.word	0x40010040
     5a0:	1000100c 	.word	0x1000100c
     5a4:	40010044 	.word	0x40010044
     5a8:	40010008 	.word	0x40010008
     5ac:	000001c1 	.word	0x000001c1

000005b0 <update_progress>:
// Print a progress message.
//
//*****************************************************************************
void
update_progress(uint32_t ui32NumPackets)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
    //
    // Print a dot every 10000 packets.
    //
    if ( (ui32NumPackets - g_ui32LastUpdate) > 1000 )
     5b8:	4b08      	ldr	r3, [pc, #32]	; (5dc <update_progress+0x2c>)
     5ba:	681b      	ldr	r3, [r3, #0]
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	1ad3      	subs	r3, r2, r3
     5c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     5c4:	d905      	bls.n	5d2 <update_progress+0x22>
    {
        am_util_stdio_printf(".");
     5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <update_progress+0x30>)
     5c8:	f000 ff94 	bl	14f4 <am_util_stdio_printf>
        g_ui32LastUpdate = ui32NumPackets;
     5cc:	4a03      	ldr	r2, [pc, #12]	; (5dc <update_progress+0x2c>)
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	6013      	str	r3, [r2, #0]
    }
}
     5d2:	bf00      	nop
     5d4:	3708      	adds	r7, #8
     5d6:	46bd      	mov	sp, r7
     5d8:	bd80      	pop	{r7, pc}
     5da:	bf00      	nop
     5dc:	1000102c 	.word	0x1000102c
     5e0:	00004764 	.word	0x00004764

000005e4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     5e4:	b580      	push	{r7, lr}
     5e6:	b08a      	sub	sp, #40	; 0x28
     5e8:	af02      	add	r7, sp, #8
    uint32_t iom = IOM_MODULE;
     5ea:	2300      	movs	r3, #0
     5ec:	61bb      	str	r3, [r7, #24]
    bool bSpi = USE_SPI;
     5ee:	2301      	movs	r3, #1
     5f0:	75fb      	strb	r3, [r7, #23]
    bool bReadIosData = false;
     5f2:	2300      	movs	r3, #0
     5f4:	77fb      	strb	r3, [r7, #31]
    bool bDone = false;
     5f6:	2300      	movs	r3, #0
     5f8:	77bb      	strb	r3, [r7, #30]
    uint32_t data;
    uint32_t maxSize = (bSpi) ? MAX_SPI_SIZE: MAX_I2C_SIZE;
     5fa:	7dfb      	ldrb	r3, [r7, #23]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d002      	beq.n	606 <main+0x22>
     600:	f240 33ff 	movw	r3, #1023	; 0x3ff
     604:	e000      	b.n	608 <main+0x24>
     606:	23ff      	movs	r3, #255	; 0xff
     608:	613b      	str	r3, [r7, #16]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     60a:	2000      	movs	r0, #0
     60c:	f001 f88e 	bl	172c <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     610:	f001 f84c 	bl	16ac <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     614:	f7ff fdf4 	bl	200 <itm_start>

    //
    // IOS test start message.
    //
    am_util_stdio_printf("IOS Test Host: Waiting for at least %d bytes from the slave.", MAX_SIZE);
     618:	f242 7110 	movw	r1, #10000	; 0x2710
     61c:	484e      	ldr	r0, [pc, #312]	; (758 <main+0x174>)
     61e:	f000 ff69 	bl	14f4 <am_util_stdio_printf>


    // Set up IOM & Enable interrupt for IOS
    iom_set_up(iom, bSpi);
     622:	7dfb      	ldrb	r3, [r7, #23]
     624:	4619      	mov	r1, r3
     626:	69b8      	ldr	r0, [r7, #24]
     628:	f7ff fee2 	bl	3f0 <iom_set_up>

    // Send the START
    data = AM_IOSTEST_CMD_START_DATA;
     62c:	2300      	movs	r3, #0
     62e:	60bb      	str	r3, [r7, #8]
    iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
     630:	f107 0208 	add.w	r2, r7, #8
     634:	7df9      	ldrb	r1, [r7, #23]
     636:	2301      	movs	r3, #1
     638:	9300      	str	r3, [sp, #0]
     63a:	4613      	mov	r3, r2
     63c:	2280      	movs	r2, #128	; 0x80
     63e:	69b8      	ldr	r0, [r7, #24]
     640:	f7ff fe2c 	bl	29c <iom_slave_write>

    //
    // Loop forever.
    //
    while ( !bDone )
     644:	e07a      	b.n	73c <main+0x158>
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     646:	f001 f9b9 	bl	19bc <am_hal_interrupt_master_disable>
     64a:	60f8      	str	r0, [r7, #12]

        if ( bIosInt == true )
     64c:	4b43      	ldr	r3, [pc, #268]	; (75c <main+0x178>)
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	b2db      	uxtb	r3, r3
     652:	2b00      	cmp	r3, #0
     654:	d06c      	beq.n	730 <main+0x14c>
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
     656:	68f8      	ldr	r0, [r7, #12]
     658:	f001 f9b4 	bl	19c4 <am_hal_interrupt_master_set>
            bIosInt = false;
     65c:	4b3f      	ldr	r3, [pc, #252]	; (75c <main+0x178>)
     65e:	2200      	movs	r2, #0
     660:	701a      	strb	r2, [r3, #0]
            // Read & Clear the IOINT status
            iom_slave_read(iom, bSpi, IOSOFFSET_READ_INTSTAT, &data, 1);
     662:	f107 0208 	add.w	r2, r7, #8
     666:	7df9      	ldrb	r1, [r7, #23]
     668:	2301      	movs	r3, #1
     66a:	9300      	str	r3, [sp, #0]
     66c:	4613      	mov	r3, r2
     66e:	2279      	movs	r2, #121	; 0x79
     670:	69b8      	ldr	r0, [r7, #24]
     672:	f7ff fdef 	bl	254 <iom_slave_read>
            // We need to clear the bit by writing to IOS
            if ( data & AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK )
     676:	68bb      	ldr	r3, [r7, #8]
     678:	f003 0301 	and.w	r3, r3, #1
     67c:	2b00      	cmp	r3, #0
     67e:	d00d      	beq.n	69c <main+0xb8>
            {
                data = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
     680:	2301      	movs	r3, #1
     682:	60bb      	str	r3, [r7, #8]
                iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_INTCLR, &data, 1);
     684:	f107 0208 	add.w	r2, r7, #8
     688:	7df9      	ldrb	r1, [r7, #23]
     68a:	2301      	movs	r3, #1
     68c:	9300      	str	r3, [sp, #0]
     68e:	4613      	mov	r3, r2
     690:	22fa      	movs	r2, #250	; 0xfa
     692:	69b8      	ldr	r0, [r7, #24]
     694:	f7ff fe02 	bl	29c <iom_slave_write>
                // Set bReadIosData
                bReadIosData = true;
     698:	2301      	movs	r3, #1
     69a:	77fb      	strb	r3, [r7, #31]
            }
            if ( bReadIosData )
     69c:	7ffb      	ldrb	r3, [r7, #31]
     69e:	2b00      	cmp	r3, #0
     6a0:	d04c      	beq.n	73c <main+0x158>
            {
                uint32_t iosSize = 0;
     6a2:	2300      	movs	r3, #0
     6a4:	607b      	str	r3, [r7, #4]

                bReadIosData = false;
     6a6:	2300      	movs	r3, #0
     6a8:	77fb      	strb	r3, [r7, #31]

                // Read the Data Size
                iom_slave_read(iom, bSpi, IOSOFFSET_READ_FIFOCTR, &iosSize, 2);
     6aa:	1d3a      	adds	r2, r7, #4
     6ac:	7df9      	ldrb	r1, [r7, #23]
     6ae:	2302      	movs	r3, #2
     6b0:	9300      	str	r3, [sp, #0]
     6b2:	4613      	mov	r3, r2
     6b4:	227c      	movs	r2, #124	; 0x7c
     6b6:	69b8      	ldr	r0, [r7, #24]
     6b8:	f7ff fdcc 	bl	254 <iom_slave_read>
                iosSize = (iosSize > maxSize)? maxSize: iosSize;
     6bc:	687a      	ldr	r2, [r7, #4]
     6be:	693b      	ldr	r3, [r7, #16]
     6c0:	4293      	cmp	r3, r2
     6c2:	bf28      	it	cs
     6c4:	4613      	movcs	r3, r2
     6c6:	607b      	str	r3, [r7, #4]
                // Initialize Rx Buffer for later comparison
                clear_rx_buf();
     6c8:	f7ff fd2a 	bl	120 <clear_rx_buf>
                // Read the data
                iom_slave_read(iom, bSpi, IOSOFFSET_READ_FIFO,
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	7df9      	ldrb	r1, [r7, #23]
     6d0:	9300      	str	r3, [sp, #0]
     6d2:	4b23      	ldr	r3, [pc, #140]	; (760 <main+0x17c>)
     6d4:	227f      	movs	r2, #127	; 0x7f
     6d6:	69b8      	ldr	r0, [r7, #24]
     6d8:	f7ff fdbc 	bl	254 <iom_slave_read>
                    (uint32_t *)g_pui8RcvBuf, iosSize);
                // Validate Content
                if ( !validate_rx_buf(iosSize) )
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	4618      	mov	r0, r3
     6e0:	f7ff fd38 	bl	154 <validate_rx_buf>
     6e4:	4603      	mov	r3, r0
     6e6:	2b00      	cmp	r3, #0
     6e8:	d106      	bne.n	6f8 <main+0x114>
                {
                    am_util_stdio_printf("\nData Verification failed Accum:%lu rx=%d\n",
     6ea:	4b1e      	ldr	r3, [pc, #120]	; (764 <main+0x180>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	687a      	ldr	r2, [r7, #4]
     6f0:	4619      	mov	r1, r3
     6f2:	481d      	ldr	r0, [pc, #116]	; (768 <main+0x184>)
     6f4:	f000 fefe 	bl	14f4 <am_util_stdio_printf>
                        g_startIdx, iosSize);
                }
                // Send the ACK/STOP
                data = AM_IOSTEST_CMD_ACK_DATA;
     6f8:	2302      	movs	r3, #2
     6fa:	60bb      	str	r3, [r7, #8]

                update_progress(g_startIdx);
     6fc:	4b19      	ldr	r3, [pc, #100]	; (764 <main+0x180>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	4618      	mov	r0, r3
     702:	f7ff ff55 	bl	5b0 <update_progress>

                if ( g_startIdx >= MAX_SIZE )
     706:	4b17      	ldr	r3, [pc, #92]	; (764 <main+0x180>)
     708:	681b      	ldr	r3, [r3, #0]
     70a:	f242 720f 	movw	r2, #9999	; 0x270f
     70e:	4293      	cmp	r3, r2
     710:	d903      	bls.n	71a <main+0x136>
                {
                    bDone = true;
     712:	2301      	movs	r3, #1
     714:	77bb      	strb	r3, [r7, #30]
                    data = AM_IOSTEST_CMD_STOP_DATA;
     716:	2301      	movs	r3, #1
     718:	60bb      	str	r3, [r7, #8]
                }
                iom_slave_write(iom, bSpi, IOSOFFSET_WRITE_CMD, &data, 1);
     71a:	f107 0208 	add.w	r2, r7, #8
     71e:	7df9      	ldrb	r1, [r7, #23]
     720:	2301      	movs	r3, #1
     722:	9300      	str	r3, [sp, #0]
     724:	4613      	mov	r3, r2
     726:	2280      	movs	r2, #128	; 0x80
     728:	69b8      	ldr	r0, [r7, #24]
     72a:	f7ff fdb7 	bl	29c <iom_slave_write>
     72e:	e005      	b.n	73c <main+0x158>
            }
        }
        else
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     730:	2001      	movs	r0, #1
     732:	f002 ffb9 	bl	36a8 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
     736:	68f8      	ldr	r0, [r7, #12]
     738:	f001 f944 	bl	19c4 <am_hal_interrupt_master_set>
    while ( !bDone )
     73c:	7fbb      	ldrb	r3, [r7, #30]
     73e:	f083 0301 	eor.w	r3, r3, #1
     742:	b2db      	uxtb	r3, r3
     744:	2b00      	cmp	r3, #0
     746:	f47f af7e 	bne.w	646 <main+0x62>
        }
    }
    am_util_stdio_printf("\nTest Done - Total Received = =%d\n", g_startIdx);
     74a:	4b06      	ldr	r3, [pc, #24]	; (764 <main+0x180>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	4619      	mov	r1, r3
     750:	4806      	ldr	r0, [pc, #24]	; (76c <main+0x188>)
     752:	f000 fecf 	bl	14f4 <am_util_stdio_printf>
    while (1);
     756:	e7fe      	b.n	756 <main+0x172>
     758:	00004768 	.word	0x00004768
     75c:	10001028 	.word	0x10001028
     760:	10001170 	.word	0x10001170
     764:	10001024 	.word	0x10001024
     768:	000047a8 	.word	0x000047a8
     76c:	000047d4 	.word	0x000047d4

00000770 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     770:	4811      	ldr	r0, [pc, #68]	; (7b8 <zero_loop+0x12>)
     772:	4912      	ldr	r1, [pc, #72]	; (7bc <zero_loop+0x16>)
     774:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     776:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     77a:	4811      	ldr	r0, [pc, #68]	; (7c0 <zero_loop+0x1a>)
     77c:	6801      	ldr	r1, [r0, #0]
     77e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     782:	6001      	str	r1, [r0, #0]
     784:	f3bf 8f4f 	dsb	sy
     788:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     78c:	480d      	ldr	r0, [pc, #52]	; (7c4 <zero_loop+0x1e>)
     78e:	490e      	ldr	r1, [pc, #56]	; (7c8 <zero_loop+0x22>)
     790:	4a0e      	ldr	r2, [pc, #56]	; (7cc <zero_loop+0x26>)

00000792 <copy_loop>:
     792:	f850 3b04 	ldr.w	r3, [r0], #4
     796:	f841 3b04 	str.w	r3, [r1], #4
     79a:	4291      	cmp	r1, r2
     79c:	dbf9      	blt.n	792 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     79e:	480c      	ldr	r0, [pc, #48]	; (7d0 <zero_loop+0x2a>)
     7a0:	490c      	ldr	r1, [pc, #48]	; (7d4 <zero_loop+0x2e>)
     7a2:	f04f 0200 	mov.w	r2, #0

000007a6 <zero_loop>:
     7a6:	4288      	cmp	r0, r1
     7a8:	bfb8      	it	lt
     7aa:	f840 2b04 	strlt.w	r2, [r0], #4
     7ae:	dbfa      	blt.n	7a6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     7b0:	f7ff ff18 	bl	5e4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     7b4:	be00      	bkpt	0x0000
}
     7b6:	bf00      	nop
     7b8:	e000ed08 	.word	0xe000ed08
     7bc:	00000000 	.word	0x00000000
     7c0:	e000ed88 	.word	0xe000ed88
     7c4:	00004aa0 	.word	0x00004aa0
     7c8:	10001000 	.word	0x10001000
     7cc:	10001024 	.word	0x10001024
     7d0:	10001024 	.word	0x10001024
     7d4:	100016cc 	.word	0x100016cc

000007d8 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     7d8:	b480      	push	{r7}
     7da:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     7dc:	e7fe      	b.n	7dc <am_nmi_isr+0x4>

000007de <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     7de:	b480      	push	{r7}
     7e0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     7e2:	e7fe      	b.n	7e2 <am_busfault_isr+0x4>

000007e4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     7e4:	b480      	push	{r7}
     7e6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     7e8:	e7fe      	b.n	7e8 <am_adc_isr+0x4>
	...

000007ec <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     7ec:	b480      	push	{r7}
     7ee:	b083      	sub	sp, #12
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     7f4:	4a04      	ldr	r2, [pc, #16]	; (808 <am_util_stdio_printf_init+0x1c>)
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	6013      	str	r3, [r2, #0]
}
     7fa:	bf00      	nop
     7fc:	370c      	adds	r7, #12
     7fe:	46bd      	mov	sp, r7
     800:	f85d 7b04 	ldr.w	r7, [sp], #4
     804:	4770      	bx	lr
     806:	bf00      	nop
     808:	10001570 	.word	0x10001570

0000080c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     80c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     810:	b096      	sub	sp, #88	; 0x58
     812:	af00      	add	r7, sp, #0
     814:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     818:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     81c:	0025      	movs	r5, r4
     81e:	2600      	movs	r6, #0
     820:	ea55 0306 	orrs.w	r3, r5, r6
     824:	f000 80a0 	beq.w	968 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     828:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     82c:	0862      	lsrs	r2, r4, #1
     82e:	ea4f 0133 	mov.w	r1, r3, rrx
     832:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     836:	ea4f 0893 	mov.w	r8, r3, lsr #2
     83a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     83e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     842:	eb11 0308 	adds.w	r3, r1, r8
     846:	eb42 0409 	adc.w	r4, r2, r9
     84a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     84e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     852:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     856:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     85a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     85e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     862:	eb13 030a 	adds.w	r3, r3, sl
     866:	eb44 040b 	adc.w	r4, r4, fp
     86a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     86e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     872:	0a1a      	lsrs	r2, r3, #8
     874:	62ba      	str	r2, [r7, #40]	; 0x28
     876:	6aba      	ldr	r2, [r7, #40]	; 0x28
     878:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     87c:	62ba      	str	r2, [r7, #40]	; 0x28
     87e:	0a23      	lsrs	r3, r4, #8
     880:	62fb      	str	r3, [r7, #44]	; 0x2c
     882:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     886:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     88a:	18c9      	adds	r1, r1, r3
     88c:	eb42 0204 	adc.w	r2, r2, r4
     890:	460b      	mov	r3, r1
     892:	4614      	mov	r4, r2
     894:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     898:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     89c:	0c1a      	lsrs	r2, r3, #16
     89e:	623a      	str	r2, [r7, #32]
     8a0:	6a3a      	ldr	r2, [r7, #32]
     8a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     8a6:	623a      	str	r2, [r7, #32]
     8a8:	0c23      	lsrs	r3, r4, #16
     8aa:	627b      	str	r3, [r7, #36]	; 0x24
     8ac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     8b4:	18c9      	adds	r1, r1, r3
     8b6:	eb42 0204 	adc.w	r2, r2, r4
     8ba:	460b      	mov	r3, r1
     8bc:	4614      	mov	r4, r2
     8be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     8c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8c6:	0023      	movs	r3, r4
     8c8:	603b      	str	r3, [r7, #0]
     8ca:	2300      	movs	r3, #0
     8cc:	607b      	str	r3, [r7, #4]
     8ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8d2:	e897 0006 	ldmia.w	r7, {r1, r2}
     8d6:	18c9      	adds	r1, r1, r3
     8d8:	eb42 0204 	adc.w	r2, r2, r4
     8dc:	460b      	mov	r3, r1
     8de:	4614      	mov	r4, r2
     8e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     8e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8e8:	08da      	lsrs	r2, r3, #3
     8ea:	613a      	str	r2, [r7, #16]
     8ec:	693a      	ldr	r2, [r7, #16]
     8ee:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     8f2:	613a      	str	r2, [r7, #16]
     8f4:	08e3      	lsrs	r3, r4, #3
     8f6:	617b      	str	r3, [r7, #20]
     8f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     8fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     900:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     904:	460b      	mov	r3, r1
     906:	4614      	mov	r4, r2
     908:	00a0      	lsls	r0, r4, #2
     90a:	60f8      	str	r0, [r7, #12]
     90c:	68f8      	ldr	r0, [r7, #12]
     90e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     912:	60f8      	str	r0, [r7, #12]
     914:	009b      	lsls	r3, r3, #2
     916:	60bb      	str	r3, [r7, #8]
     918:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     91c:	185b      	adds	r3, r3, r1
     91e:	eb44 0402 	adc.w	r4, r4, r2
     922:	18db      	adds	r3, r3, r3
     924:	eb44 0404 	adc.w	r4, r4, r4
     928:	4619      	mov	r1, r3
     92a:	4622      	mov	r2, r4
     92c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     930:	1a5b      	subs	r3, r3, r1
     932:	eb64 0402 	sbc.w	r4, r4, r2
     936:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     93a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     93e:	3306      	adds	r3, #6
     940:	f144 0400 	adc.w	r4, r4, #0
     944:	091a      	lsrs	r2, r3, #4
     946:	61ba      	str	r2, [r7, #24]
     948:	69ba      	ldr	r2, [r7, #24]
     94a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     94e:	61ba      	str	r2, [r7, #24]
     950:	0923      	lsrs	r3, r4, #4
     952:	61fb      	str	r3, [r7, #28]
     954:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     958:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     95c:	18c9      	adds	r1, r1, r3
     95e:	eb42 0204 	adc.w	r2, r2, r4
     962:	460b      	mov	r3, r1
     964:	4614      	mov	r4, r2
     966:	e029      	b.n	9bc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     96a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     96e:	085a      	lsrs	r2, r3, #1
     970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     972:	089b      	lsrs	r3, r3, #2
     974:	4413      	add	r3, r2
     976:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     97a:	091b      	lsrs	r3, r3, #4
     97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     97e:	4413      	add	r3, r2
     980:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     984:	0a1b      	lsrs	r3, r3, #8
     986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     988:	4413      	add	r3, r2
     98a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     98e:	0c1b      	lsrs	r3, r3, #16
     990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     992:	4413      	add	r3, r2
     994:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     998:	08db      	lsrs	r3, r3, #3
     99a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     99c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     99e:	4613      	mov	r3, r2
     9a0:	009b      	lsls	r3, r3, #2
     9a2:	4413      	add	r3, r2
     9a4:	005b      	lsls	r3, r3, #1
     9a6:	461a      	mov	r2, r3
     9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9aa:	1a9b      	subs	r3, r3, r2
     9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9b0:	3306      	adds	r3, #6
     9b2:	091a      	lsrs	r2, r3, #4
     9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9b6:	4413      	add	r3, r2
     9b8:	f04f 0400 	mov.w	r4, #0
    }
}
     9bc:	4618      	mov	r0, r3
     9be:	4621      	mov	r1, r4
     9c0:	3758      	adds	r7, #88	; 0x58
     9c2:	46bd      	mov	sp, r7
     9c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     9c8:	4770      	bx	lr

000009ca <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     9ca:	b590      	push	{r4, r7, lr}
     9cc:	b085      	sub	sp, #20
     9ce:	af00      	add	r7, sp, #0
     9d0:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     9d4:	683a      	ldr	r2, [r7, #0]
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	4313      	orrs	r3, r2
     9da:	2b00      	cmp	r3, #0
     9dc:	bf0c      	ite	eq
     9de:	2301      	moveq	r3, #1
     9e0:	2300      	movne	r3, #0
     9e2:	b2db      	uxtb	r3, r3
     9e4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     9e6:	e008      	b.n	9fa <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     9e8:	e9d7 0100 	ldrd	r0, r1, [r7]
     9ec:	f7ff ff0e 	bl	80c <divu64_10>
     9f0:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	3301      	adds	r3, #1
     9f8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     9fa:	e897 0018 	ldmia.w	r7, {r3, r4}
     9fe:	4323      	orrs	r3, r4
     a00:	d1f2      	bne.n	9e8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     a02:	68fb      	ldr	r3, [r7, #12]
}
     a04:	4618      	mov	r0, r3
     a06:	3714      	adds	r7, #20
     a08:	46bd      	mov	sp, r7
     a0a:	bd90      	pop	{r4, r7, pc}

00000a0c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     a0c:	b590      	push	{r4, r7, lr}
     a0e:	b083      	sub	sp, #12
     a10:	af00      	add	r7, sp, #0
     a12:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     a16:	e897 0018 	ldmia.w	r7, {r3, r4}
     a1a:	2b00      	cmp	r3, #0
     a1c:	f174 0300 	sbcs.w	r3, r4, #0
     a20:	da06      	bge.n	a30 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     a22:	e897 0018 	ldmia.w	r7, {r3, r4}
     a26:	425b      	negs	r3, r3
     a28:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     a2c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     a30:	e897 0018 	ldmia.w	r7, {r3, r4}
     a34:	4618      	mov	r0, r3
     a36:	4621      	mov	r1, r4
     a38:	f7ff ffc7 	bl	9ca <ndigits_in_u64>
     a3c:	4603      	mov	r3, r0
}
     a3e:	4618      	mov	r0, r3
     a40:	370c      	adds	r7, #12
     a42:	46bd      	mov	sp, r7
     a44:	bd90      	pop	{r4, r7, pc}

00000a46 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     a46:	b490      	push	{r4, r7}
     a48:	b084      	sub	sp, #16
     a4a:	af00      	add	r7, sp, #0
     a4c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     a50:	6839      	ldr	r1, [r7, #0]
     a52:	687a      	ldr	r2, [r7, #4]
     a54:	430a      	orrs	r2, r1
     a56:	2a00      	cmp	r2, #0
     a58:	bf0c      	ite	eq
     a5a:	2201      	moveq	r2, #1
     a5c:	2200      	movne	r2, #0
     a5e:	b2d2      	uxtb	r2, r2
     a60:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     a62:	e00a      	b.n	a7a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     a64:	e897 0006 	ldmia.w	r7, {r1, r2}
     a68:	090b      	lsrs	r3, r1, #4
     a6a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     a6e:	0914      	lsrs	r4, r2, #4
     a70:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     a74:	68fa      	ldr	r2, [r7, #12]
     a76:	3201      	adds	r2, #1
     a78:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     a7a:	e897 0006 	ldmia.w	r7, {r1, r2}
     a7e:	430a      	orrs	r2, r1
     a80:	d1f0      	bne.n	a64 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     a82:	68fb      	ldr	r3, [r7, #12]
}
     a84:	4618      	mov	r0, r3
     a86:	3710      	adds	r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bc90      	pop	{r4, r7}
     a8c:	4770      	bx	lr

00000a8e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     a8e:	b480      	push	{r7}
     a90:	b087      	sub	sp, #28
     a92:	af00      	add	r7, sp, #0
     a94:	6078      	str	r0, [r7, #4]
     a96:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     a98:	2300      	movs	r3, #0
     a9a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     a9c:	2300      	movs	r3, #0
     a9e:	613b      	str	r3, [r7, #16]
     aa0:	2300      	movs	r3, #0
     aa2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	2b2d      	cmp	r3, #45	; 0x2d
     aaa:	d11b      	bne.n	ae4 <decstr_to_int+0x56>
    {
        bNeg = true;
     aac:	2301      	movs	r3, #1
     aae:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	3301      	adds	r3, #1
     ab4:	607b      	str	r3, [r7, #4]
        uCnt++;
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	3301      	adds	r3, #1
     aba:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     abc:	e012      	b.n	ae4 <decstr_to_int+0x56>
    {
        ++uCnt;
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	3301      	adds	r3, #1
     ac2:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     ac4:	693a      	ldr	r2, [r7, #16]
     ac6:	4613      	mov	r3, r2
     ac8:	009b      	lsls	r3, r3, #2
     aca:	4413      	add	r3, r2
     acc:	005b      	lsls	r3, r3, #1
     ace:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	461a      	mov	r2, r3
     ad6:	693b      	ldr	r3, [r7, #16]
     ad8:	4413      	add	r3, r2
     ada:	3b30      	subs	r3, #48	; 0x30
     adc:	613b      	str	r3, [r7, #16]
        pcStr++;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	3301      	adds	r3, #1
     ae2:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	2b2f      	cmp	r3, #47	; 0x2f
     aea:	d903      	bls.n	af4 <decstr_to_int+0x66>
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	781b      	ldrb	r3, [r3, #0]
     af0:	2b39      	cmp	r3, #57	; 0x39
     af2:	d9e4      	bls.n	abe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     af4:	683b      	ldr	r3, [r7, #0]
     af6:	2b00      	cmp	r3, #0
     af8:	d002      	beq.n	b00 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     afa:	683b      	ldr	r3, [r7, #0]
     afc:	68fa      	ldr	r2, [r7, #12]
     afe:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     b00:	7dfb      	ldrb	r3, [r7, #23]
     b02:	2b00      	cmp	r3, #0
     b04:	d002      	beq.n	b0c <decstr_to_int+0x7e>
     b06:	693b      	ldr	r3, [r7, #16]
     b08:	425b      	negs	r3, r3
     b0a:	e000      	b.n	b0e <decstr_to_int+0x80>
     b0c:	693b      	ldr	r3, [r7, #16]
}
     b0e:	4618      	mov	r0, r3
     b10:	371c      	adds	r7, #28
     b12:	46bd      	mov	sp, r7
     b14:	f85d 7b04 	ldr.w	r7, [sp], #4
     b18:	4770      	bx	lr

00000b1a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     b1a:	b590      	push	{r4, r7, lr}
     b1c:	b091      	sub	sp, #68	; 0x44
     b1e:	af00      	add	r7, sp, #0
     b20:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b24:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     b26:	2300      	movs	r3, #0
     b28:	63fb      	str	r3, [r7, #60]	; 0x3c
     b2a:	2300      	movs	r3, #0
     b2c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     b32:	f7ff fe6b 	bl	80c <divu64_10>
     b36:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     b3a:	68b9      	ldr	r1, [r7, #8]
     b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b3e:	4613      	mov	r3, r2
     b40:	009b      	lsls	r3, r3, #2
     b42:	4413      	add	r3, r2
     b44:	005b      	lsls	r3, r3, #1
     b46:	1acb      	subs	r3, r1, r3
     b48:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b4c:	1c5a      	adds	r2, r3, #1
     b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
     b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b52:	b2d2      	uxtb	r2, r2
     b54:	3230      	adds	r2, #48	; 0x30
     b56:	b2d2      	uxtb	r2, r2
     b58:	f107 0140 	add.w	r1, r7, #64	; 0x40
     b5c:	440b      	add	r3, r1
     b5e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     b62:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b66:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     b6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     b6e:	4323      	orrs	r3, r4
     b70:	d1dd      	bne.n	b2e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b74:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	2b00      	cmp	r3, #0
     b7a:	d011      	beq.n	ba0 <uint64_to_str+0x86>
    {
        while ( ix-- )
     b7c:	e008      	b.n	b90 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	1c5a      	adds	r2, r3, #1
     b82:	607a      	str	r2, [r7, #4]
     b84:	f107 0110 	add.w	r1, r7, #16
     b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b8a:	440a      	add	r2, r1
     b8c:	7812      	ldrb	r2, [r2, #0]
     b8e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b92:	1e5a      	subs	r2, r3, #1
     b94:	63fa      	str	r2, [r7, #60]	; 0x3c
     b96:	2b00      	cmp	r3, #0
     b98:	d1f1      	bne.n	b7e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	2200      	movs	r2, #0
     b9e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     ba2:	4618      	mov	r0, r3
     ba4:	3744      	adds	r7, #68	; 0x44
     ba6:	46bd      	mov	sp, r7
     ba8:	bd90      	pop	{r4, r7, pc}

00000baa <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     baa:	b4b0      	push	{r4, r5, r7}
     bac:	b08d      	sub	sp, #52	; 0x34
     bae:	af00      	add	r7, sp, #0
     bb0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     bb4:	607a      	str	r2, [r7, #4]
     bb6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     bb8:	2300      	movs	r3, #0
     bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bc0:	4313      	orrs	r3, r2
     bc2:	d131      	bne.n	c28 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bc6:	1c5a      	adds	r2, r3, #1
     bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
     bca:	f107 0230 	add.w	r2, r7, #48	; 0x30
     bce:	4413      	add	r3, r2
     bd0:	2230      	movs	r2, #48	; 0x30
     bd2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     bd6:	e027      	b.n	c28 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     bd8:	7a3b      	ldrb	r3, [r7, #8]
     bda:	f003 030f 	and.w	r3, r3, #15
     bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     be6:	2b09      	cmp	r3, #9
     be8:	d90a      	bls.n	c00 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     bea:	78fb      	ldrb	r3, [r7, #3]
     bec:	2b00      	cmp	r3, #0
     bee:	d001      	beq.n	bf4 <uint64_to_hexstr+0x4a>
     bf0:	2227      	movs	r2, #39	; 0x27
     bf2:	e000      	b.n	bf6 <uint64_to_hexstr+0x4c>
     bf4:	2207      	movs	r2, #7
     bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     bfa:	4413      	add	r3, r2
     bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c02:	1c5a      	adds	r2, r3, #1
     c04:	62fa      	str	r2, [r7, #44]	; 0x2c
     c06:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     c0a:	3230      	adds	r2, #48	; 0x30
     c0c:	b2d2      	uxtb	r2, r2
     c0e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     c12:	440b      	add	r3, r1
     c14:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c1c:	0914      	lsrs	r4, r2, #4
     c1e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     c22:	091d      	lsrs	r5, r3, #4
     c24:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c2c:	4313      	orrs	r3, r2
     c2e:	d1d3      	bne.n	bd8 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c32:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	2b00      	cmp	r3, #0
     c38:	d011      	beq.n	c5e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     c3a:	e008      	b.n	c4e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	1c5a      	adds	r2, r3, #1
     c40:	607a      	str	r2, [r7, #4]
     c42:	f107 0110 	add.w	r1, r7, #16
     c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c48:	440a      	add	r2, r1
     c4a:	7812      	ldrb	r2, [r2, #0]
     c4c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c50:	1e5a      	subs	r2, r3, #1
     c52:	62fa      	str	r2, [r7, #44]	; 0x2c
     c54:	2b00      	cmp	r3, #0
     c56:	d1f1      	bne.n	c3c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	2200      	movs	r2, #0
     c5c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     c60:	4618      	mov	r0, r3
     c62:	3734      	adds	r7, #52	; 0x34
     c64:	46bd      	mov	sp, r7
     c66:	bcb0      	pop	{r4, r5, r7}
     c68:	4770      	bx	lr

00000c6a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     c6a:	b480      	push	{r7}
     c6c:	b085      	sub	sp, #20
     c6e:	af00      	add	r7, sp, #0
     c70:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     c72:	2300      	movs	r3, #0
     c74:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	2b00      	cmp	r3, #0
     c7a:	d104      	bne.n	c86 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	e009      	b.n	c94 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	3301      	adds	r3, #1
     c84:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	1c5a      	adds	r2, r3, #1
     c8a:	607a      	str	r2, [r7, #4]
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d1f6      	bne.n	c80 <simple_strlen+0x16>
    }
    return ui32RetVal;
     c92:	68fb      	ldr	r3, [r7, #12]
}
     c94:	4618      	mov	r0, r3
     c96:	3714      	adds	r7, #20
     c98:	46bd      	mov	sp, r7
     c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c9e:	4770      	bx	lr

00000ca0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     ca0:	b480      	push	{r7}
     ca2:	b087      	sub	sp, #28
     ca4:	af00      	add	r7, sp, #0
     ca6:	60f8      	str	r0, [r7, #12]
     ca8:	460b      	mov	r3, r1
     caa:	607a      	str	r2, [r7, #4]
     cac:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     cae:	2300      	movs	r3, #0
     cb0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	2b00      	cmp	r3, #0
     cb6:	dc0c      	bgt.n	cd2 <padbuffer+0x32>
    {
        return i32Cnt;
     cb8:	697b      	ldr	r3, [r7, #20]
     cba:	e010      	b.n	cde <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     cbc:	68fb      	ldr	r3, [r7, #12]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d004      	beq.n	ccc <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	1c5a      	adds	r2, r3, #1
     cc6:	60fa      	str	r2, [r7, #12]
     cc8:	7afa      	ldrb	r2, [r7, #11]
     cca:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ccc:	697b      	ldr	r3, [r7, #20]
     cce:	3301      	adds	r3, #1
     cd0:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	1e5a      	subs	r2, r3, #1
     cd6:	607a      	str	r2, [r7, #4]
     cd8:	2b00      	cmp	r3, #0
     cda:	d1ef      	bne.n	cbc <padbuffer+0x1c>
    }

    return i32Cnt;
     cdc:	697b      	ldr	r3, [r7, #20]
}
     cde:	4618      	mov	r0, r3
     ce0:	371c      	adds	r7, #28
     ce2:	46bd      	mov	sp, r7
     ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce8:	4770      	bx	lr
	...

00000cec <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     cec:	b590      	push	{r4, r7, lr}
     cee:	b08f      	sub	sp, #60	; 0x3c
     cf0:	af00      	add	r7, sp, #0
     cf2:	60f8      	str	r0, [r7, #12]
     cf4:	60b9      	str	r1, [r7, #8]
     cf6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     cf8:	68bb      	ldr	r3, [r7, #8]
     cfa:	681b      	ldr	r3, [r3, #0]
     cfc:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d00:	2b03      	cmp	r3, #3
     d02:	dc02      	bgt.n	d0a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     d04:	f06f 0302 	mvn.w	r3, #2
     d08:	e0e7      	b.n	eda <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     d0a:	edd7 7a03 	vldr	s15, [r7, #12]
     d0e:	eef5 7a40 	vcmp.f32	s15, #0.0
     d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d16:	d104      	bne.n	d22 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	4a72      	ldr	r2, [pc, #456]	; (ee4 <ftoa+0x1f8>)
     d1c:	601a      	str	r2, [r3, #0]
        return 3;
     d1e:	2303      	movs	r3, #3
     d20:	e0db      	b.n	eda <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     d22:	68bb      	ldr	r3, [r7, #8]
     d24:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     d26:	68fb      	ldr	r3, [r7, #12]
     d28:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     d2a:	693b      	ldr	r3, [r7, #16]
     d2c:	15db      	asrs	r3, r3, #23
     d2e:	b2db      	uxtb	r3, r3
     d30:	3b7f      	subs	r3, #127	; 0x7f
     d32:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     d34:	693b      	ldr	r3, [r7, #16]
     d36:	f3c3 0316 	ubfx	r3, r3, #0, #23
     d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d3e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     d40:	2300      	movs	r3, #0
     d42:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     d44:	2300      	movs	r3, #0
     d46:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     d48:	69fb      	ldr	r3, [r7, #28]
     d4a:	2b1e      	cmp	r3, #30
     d4c:	dd02      	ble.n	d54 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     d4e:	f06f 0301 	mvn.w	r3, #1
     d52:	e0c2      	b.n	eda <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     d54:	69fb      	ldr	r3, [r7, #28]
     d56:	f113 0f17 	cmn.w	r3, #23
     d5a:	da02      	bge.n	d62 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     d5c:	f04f 33ff 	mov.w	r3, #4294967295
     d60:	e0bb      	b.n	eda <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     d62:	69fb      	ldr	r3, [r7, #28]
     d64:	2b16      	cmp	r3, #22
     d66:	dd06      	ble.n	d76 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     d68:	69fb      	ldr	r3, [r7, #28]
     d6a:	3b17      	subs	r3, #23
     d6c:	69ba      	ldr	r2, [r7, #24]
     d6e:	fa02 f303 	lsl.w	r3, r2, r3
     d72:	637b      	str	r3, [r7, #52]	; 0x34
     d74:	e01a      	b.n	dac <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     d76:	69fb      	ldr	r3, [r7, #28]
     d78:	2b00      	cmp	r3, #0
     d7a:	db0f      	blt.n	d9c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     d7c:	69fb      	ldr	r3, [r7, #28]
     d7e:	f1c3 0317 	rsb	r3, r3, #23
     d82:	69ba      	ldr	r2, [r7, #24]
     d84:	fa42 f303 	asr.w	r3, r2, r3
     d88:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     d8a:	69fb      	ldr	r3, [r7, #28]
     d8c:	3301      	adds	r3, #1
     d8e:	69ba      	ldr	r2, [r7, #24]
     d90:	fa02 f303 	lsl.w	r3, r2, r3
     d94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d98:	633b      	str	r3, [r7, #48]	; 0x30
     d9a:	e007      	b.n	dac <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     d9c:	69bb      	ldr	r3, [r7, #24]
     d9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     da2:	69fb      	ldr	r3, [r7, #28]
     da4:	43db      	mvns	r3, r3
     da6:	fa42 f303 	asr.w	r3, r2, r3
     daa:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     dac:	693b      	ldr	r3, [r7, #16]
     dae:	2b00      	cmp	r3, #0
     db0:	da04      	bge.n	dbc <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     db2:	68bb      	ldr	r3, [r7, #8]
     db4:	1c5a      	adds	r2, r3, #1
     db6:	60ba      	str	r2, [r7, #8]
     db8:	222d      	movs	r2, #45	; 0x2d
     dba:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dbe:	2b00      	cmp	r3, #0
     dc0:	d105      	bne.n	dce <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     dc2:	68bb      	ldr	r3, [r7, #8]
     dc4:	1c5a      	adds	r2, r3, #1
     dc6:	60ba      	str	r2, [r7, #8]
     dc8:	2230      	movs	r2, #48	; 0x30
     dca:	701a      	strb	r2, [r3, #0]
     dcc:	e021      	b.n	e12 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd0:	2b00      	cmp	r3, #0
     dd2:	dd08      	ble.n	de6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd6:	ea4f 74e3 	mov.w	r4, r3, asr #31
     dda:	68ba      	ldr	r2, [r7, #8]
     ddc:	4618      	mov	r0, r3
     dde:	4621      	mov	r1, r4
     de0:	f7ff fe9b 	bl	b1a <uint64_to_str>
     de4:	e011      	b.n	e0a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     de6:	68bb      	ldr	r3, [r7, #8]
     de8:	1c5a      	adds	r2, r3, #1
     dea:	60ba      	str	r2, [r7, #8]
     dec:	222d      	movs	r2, #45	; 0x2d
     dee:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     df2:	425b      	negs	r3, r3
     df4:	ea4f 74e3 	mov.w	r4, r3, asr #31
     df8:	68ba      	ldr	r2, [r7, #8]
     dfa:	4618      	mov	r0, r3
     dfc:	4621      	mov	r1, r4
     dfe:	f7ff fe8c 	bl	b1a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     e02:	e002      	b.n	e0a <ftoa+0x11e>
        {
            pcBuf++;
     e04:	68bb      	ldr	r3, [r7, #8]
     e06:	3301      	adds	r3, #1
     e08:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     e0a:	68bb      	ldr	r3, [r7, #8]
     e0c:	781b      	ldrb	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d1f8      	bne.n	e04 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     e12:	68bb      	ldr	r3, [r7, #8]
     e14:	1c5a      	adds	r2, r3, #1
     e16:	60ba      	str	r2, [r7, #8]
     e18:	222e      	movs	r2, #46	; 0x2e
     e1a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e1e:	2b00      	cmp	r3, #0
     e20:	d105      	bne.n	e2e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	1c5a      	adds	r2, r3, #1
     e26:	60ba      	str	r2, [r7, #8]
     e28:	2230      	movs	r2, #48	; 0x30
     e2a:	701a      	strb	r2, [r3, #0]
     e2c:	e04f      	b.n	ece <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     e2e:	68ba      	ldr	r2, [r7, #8]
     e30:	6a3b      	ldr	r3, [r7, #32]
     e32:	1ad3      	subs	r3, r2, r3
     e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e36:	1ad3      	subs	r3, r2, r3
     e38:	3b01      	subs	r3, #1
     e3a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     e3c:	697a      	ldr	r2, [r7, #20]
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	4293      	cmp	r3, r2
     e42:	bfa8      	it	ge
     e44:	4613      	movge	r3, r2
     e46:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     e48:	2300      	movs	r3, #0
     e4a:	62bb      	str	r3, [r7, #40]	; 0x28
     e4c:	e015      	b.n	e7a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e50:	4613      	mov	r3, r2
     e52:	009b      	lsls	r3, r3, #2
     e54:	4413      	add	r3, r2
     e56:	005b      	lsls	r3, r3, #1
     e58:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     e5a:	68bb      	ldr	r3, [r7, #8]
     e5c:	1c5a      	adds	r2, r3, #1
     e5e:	60ba      	str	r2, [r7, #8]
     e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e62:	1612      	asrs	r2, r2, #24
     e64:	b2d2      	uxtb	r2, r2
     e66:	3230      	adds	r2, #48	; 0x30
     e68:	b2d2      	uxtb	r2, r2
     e6a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e72:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e76:	3301      	adds	r3, #1
     e78:	62bb      	str	r3, [r7, #40]	; 0x28
     e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e7c:	697b      	ldr	r3, [r7, #20]
     e7e:	429a      	cmp	r2, r3
     e80:	dbe5      	blt.n	e4e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e84:	4613      	mov	r3, r2
     e86:	009b      	lsls	r3, r3, #2
     e88:	4413      	add	r3, r2
     e8a:	005b      	lsls	r3, r3, #1
     e8c:	161b      	asrs	r3, r3, #24
     e8e:	2b04      	cmp	r3, #4
     e90:	dd1d      	ble.n	ece <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     e92:	68bb      	ldr	r3, [r7, #8]
     e94:	3b01      	subs	r3, #1
     e96:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     e98:	e015      	b.n	ec6 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	2b2e      	cmp	r3, #46	; 0x2e
     ea0:	d00e      	beq.n	ec0 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ea4:	781b      	ldrb	r3, [r3, #0]
     ea6:	2b39      	cmp	r3, #57	; 0x39
     ea8:	d103      	bne.n	eb2 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eac:	2230      	movs	r2, #48	; 0x30
     eae:	701a      	strb	r2, [r3, #0]
     eb0:	e006      	b.n	ec0 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	3301      	adds	r3, #1
     eb8:	b2da      	uxtb	r2, r3
     eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ebc:	701a      	strb	r2, [r3, #0]
                    break;
     ebe:	e006      	b.n	ece <ftoa+0x1e2>
                }
                pcBuftmp--;
     ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ec2:	3b01      	subs	r3, #1
     ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ec8:	6a3b      	ldr	r3, [r7, #32]
     eca:	429a      	cmp	r2, r3
     ecc:	d2e5      	bcs.n	e9a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     ece:	68bb      	ldr	r3, [r7, #8]
     ed0:	2200      	movs	r2, #0
     ed2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     ed4:	68ba      	ldr	r2, [r7, #8]
     ed6:	6a3b      	ldr	r3, [r7, #32]
     ed8:	1ad3      	subs	r3, r2, r3
} // ftoa()
     eda:	4618      	mov	r0, r3
     edc:	373c      	adds	r7, #60	; 0x3c
     ede:	46bd      	mov	sp, r7
     ee0:	bd90      	pop	{r4, r7, pc}
     ee2:	bf00      	nop
     ee4:	00302e30 	.word	0x00302e30

00000ee8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ee8:	b590      	push	{r4, r7, lr}
     eea:	b095      	sub	sp, #84	; 0x54
     eec:	af00      	add	r7, sp, #0
     eee:	60f8      	str	r0, [r7, #12]
     ef0:	60b9      	str	r1, [r7, #8]
     ef2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     ef4:	2300      	movs	r3, #0
     ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     ef8:	2300      	movs	r3, #0
     efa:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     efc:	e2e3      	b.n	14c6 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     efe:	2306      	movs	r3, #6
     f00:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     f02:	68bb      	ldr	r3, [r7, #8]
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	2b25      	cmp	r3, #37	; 0x25
     f08:	d01f      	beq.n	f4a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     f0a:	68fb      	ldr	r3, [r7, #12]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d015      	beq.n	f3c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     f10:	68bb      	ldr	r3, [r7, #8]
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	2b0a      	cmp	r3, #10
     f16:	d10b      	bne.n	f30 <am_util_stdio_vsprintf+0x48>
     f18:	4bb1      	ldr	r3, [pc, #708]	; (11e0 <am_util_stdio_vsprintf+0x2f8>)
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d007      	beq.n	f30 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	1c5a      	adds	r2, r3, #1
     f24:	60fa      	str	r2, [r7, #12]
     f26:	220d      	movs	r2, #13
     f28:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f2c:	3301      	adds	r3, #1
     f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	1c5a      	adds	r2, r3, #1
     f34:	60fa      	str	r2, [r7, #12]
     f36:	68ba      	ldr	r2, [r7, #8]
     f38:	7812      	ldrb	r2, [r2, #0]
     f3a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     f3c:	68bb      	ldr	r3, [r7, #8]
     f3e:	3301      	adds	r3, #1
     f40:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f44:	3301      	adds	r3, #1
     f46:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     f48:	e2bd      	b.n	14c6 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     f4a:	68bb      	ldr	r3, [r7, #8]
     f4c:	3301      	adds	r3, #1
     f4e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     f50:	2300      	movs	r3, #0
     f52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     f56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     f5e:	2320      	movs	r3, #32
     f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     f64:	68bb      	ldr	r3, [r7, #8]
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	2b30      	cmp	r3, #48	; 0x30
     f6a:	d105      	bne.n	f78 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     f6c:	2330      	movs	r3, #48	; 0x30
     f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     f72:	68bb      	ldr	r3, [r7, #8]
     f74:	3301      	adds	r3, #1
     f76:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     f78:	f107 0310 	add.w	r3, r7, #16
     f7c:	4619      	mov	r1, r3
     f7e:	68b8      	ldr	r0, [r7, #8]
     f80:	f7ff fd85 	bl	a8e <decstr_to_int>
     f84:	4603      	mov	r3, r0
     f86:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     f88:	693b      	ldr	r3, [r7, #16]
     f8a:	68ba      	ldr	r2, [r7, #8]
     f8c:	4413      	add	r3, r2
     f8e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     f90:	68bb      	ldr	r3, [r7, #8]
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2b73      	cmp	r3, #115	; 0x73
     f96:	d005      	beq.n	fa4 <am_util_stdio_vsprintf+0xbc>
     f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9a:	2b00      	cmp	r3, #0
     f9c:	da02      	bge.n	fa4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa0:	425b      	negs	r3, r3
     fa2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     fa4:	68bb      	ldr	r3, [r7, #8]
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2b2e      	cmp	r3, #46	; 0x2e
     faa:	d10e      	bne.n	fca <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	3301      	adds	r3, #1
     fb0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     fb2:	f107 0310 	add.w	r3, r7, #16
     fb6:	4619      	mov	r1, r3
     fb8:	68b8      	ldr	r0, [r7, #8]
     fba:	f7ff fd68 	bl	a8e <decstr_to_int>
     fbe:	4603      	mov	r3, r0
     fc0:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     fc2:	693b      	ldr	r3, [r7, #16]
     fc4:	68ba      	ldr	r2, [r7, #8]
     fc6:	4413      	add	r3, r2
     fc8:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     fca:	68bb      	ldr	r3, [r7, #8]
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	2b6c      	cmp	r3, #108	; 0x6c
     fd0:	d10c      	bne.n	fec <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     fd2:	68bb      	ldr	r3, [r7, #8]
     fd4:	3301      	adds	r3, #1
     fd6:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     fd8:	68bb      	ldr	r3, [r7, #8]
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	2b6c      	cmp	r3, #108	; 0x6c
     fde:	d105      	bne.n	fec <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     fe0:	68bb      	ldr	r3, [r7, #8]
     fe2:	3301      	adds	r3, #1
     fe4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     fe6:	2301      	movs	r3, #1
     fe8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     fec:	68bb      	ldr	r3, [r7, #8]
     fee:	781b      	ldrb	r3, [r3, #0]
     ff0:	3b46      	subs	r3, #70	; 0x46
     ff2:	2b32      	cmp	r3, #50	; 0x32
     ff4:	f200 8254 	bhi.w	14a0 <am_util_stdio_vsprintf+0x5b8>
     ff8:	a201      	add	r2, pc, #4	; (adr r2, 1000 <am_util_stdio_vsprintf+0x118>)
     ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ffe:	bf00      	nop
    1000:	0000142b 	.word	0x0000142b
    1004:	000014a1 	.word	0x000014a1
    1008:	000014a1 	.word	0x000014a1
    100c:	000014a1 	.word	0x000014a1
    1010:	000014a1 	.word	0x000014a1
    1014:	000014a1 	.word	0x000014a1
    1018:	000014a1 	.word	0x000014a1
    101c:	000014a1 	.word	0x000014a1
    1020:	000014a1 	.word	0x000014a1
    1024:	000014a1 	.word	0x000014a1
    1028:	000014a1 	.word	0x000014a1
    102c:	000014a1 	.word	0x000014a1
    1030:	000014a1 	.word	0x000014a1
    1034:	000014a1 	.word	0x000014a1
    1038:	000014a1 	.word	0x000014a1
    103c:	000014a1 	.word	0x000014a1
    1040:	000014a1 	.word	0x000014a1
    1044:	000014a1 	.word	0x000014a1
    1048:	000011c7 	.word	0x000011c7
    104c:	000014a1 	.word	0x000014a1
    1050:	000014a1 	.word	0x000014a1
    1054:	000014a1 	.word	0x000014a1
    1058:	000014a1 	.word	0x000014a1
    105c:	000014a1 	.word	0x000014a1
    1060:	000014a1 	.word	0x000014a1
    1064:	000014a1 	.word	0x000014a1
    1068:	000014a1 	.word	0x000014a1
    106c:	000014a1 	.word	0x000014a1
    1070:	000014a1 	.word	0x000014a1
    1074:	000010cd 	.word	0x000010cd
    1078:	000012f3 	.word	0x000012f3
    107c:	000014a1 	.word	0x000014a1
    1080:	0000142b 	.word	0x0000142b
    1084:	000014a1 	.word	0x000014a1
    1088:	000014a1 	.word	0x000014a1
    108c:	000012f3 	.word	0x000012f3
    1090:	000014a1 	.word	0x000014a1
    1094:	000014a1 	.word	0x000014a1
    1098:	000014a1 	.word	0x000014a1
    109c:	000014a1 	.word	0x000014a1
    10a0:	000014a1 	.word	0x000014a1
    10a4:	000014a1 	.word	0x000014a1
    10a8:	000014a1 	.word	0x000014a1
    10ac:	000014a1 	.word	0x000014a1
    10b0:	000014a1 	.word	0x000014a1
    10b4:	000010f3 	.word	0x000010f3
    10b8:	000014a1 	.word	0x000014a1
    10bc:	00001261 	.word	0x00001261
    10c0:	000014a1 	.word	0x000014a1
    10c4:	000014a1 	.word	0x000014a1
    10c8:	000011c1 	.word	0x000011c1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	1d1a      	adds	r2, r3, #4
    10d0:	607a      	str	r2, [r7, #4]
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	2b00      	cmp	r3, #0
    10dc:	d005      	beq.n	10ea <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    10de:	68fb      	ldr	r3, [r7, #12]
    10e0:	1c5a      	adds	r2, r3, #1
    10e2:	60fa      	str	r2, [r7, #12]
    10e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    10e8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ec:	3301      	adds	r3, #1
    10ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10f0:	e1e6      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	1d1a      	adds	r2, r3, #4
    10f6:	607a      	str	r2, [r7, #4]
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    10fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    10fe:	f7ff fdb4 	bl	c6a <simple_strlen>
    1102:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1106:	2b00      	cmp	r3, #0
    1108:	dd2e      	ble.n	1168 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    110e:	429a      	cmp	r2, r3
    1110:	d22a      	bcs.n	1168 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1112:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1116:	1ad3      	subs	r3, r2, r3
    1118:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    111a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    111e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1120:	4619      	mov	r1, r3
    1122:	68f8      	ldr	r0, [r7, #12]
    1124:	f7ff fdbc 	bl	ca0 <padbuffer>
    1128:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	2b00      	cmp	r3, #0
    112e:	d001      	beq.n	1134 <am_util_stdio_vsprintf+0x24c>
    1130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1132:	e000      	b.n	1136 <am_util_stdio_vsprintf+0x24e>
    1134:	2300      	movs	r3, #0
    1136:	68fa      	ldr	r2, [r7, #12]
    1138:	4413      	add	r3, r2
    113a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1140:	4413      	add	r3, r2
    1142:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1144:	2300      	movs	r3, #0
    1146:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1148:	e00e      	b.n	1168 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    114a:	68fb      	ldr	r3, [r7, #12]
    114c:	2b00      	cmp	r3, #0
    114e:	d005      	beq.n	115c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1150:	68fb      	ldr	r3, [r7, #12]
    1152:	1c5a      	adds	r2, r3, #1
    1154:	60fa      	str	r2, [r7, #12]
    1156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1158:	7812      	ldrb	r2, [r2, #0]
    115a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    115c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    115e:	3301      	adds	r3, #1
    1160:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1164:	3301      	adds	r3, #1
    1166:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	d1ec      	bne.n	114a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1172:	2b00      	cmp	r3, #0
    1174:	f000 81a1 	beq.w	14ba <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117a:	425b      	negs	r3, r3
    117c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1182:	429a      	cmp	r2, r3
    1184:	f080 8199 	bcs.w	14ba <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1188:	6bba      	ldr	r2, [r7, #56]	; 0x38
    118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    118c:	1ad3      	subs	r3, r2, r3
    118e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1194:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1196:	4619      	mov	r1, r3
    1198:	68f8      	ldr	r0, [r7, #12]
    119a:	f7ff fd81 	bl	ca0 <padbuffer>
    119e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    11a0:	68fb      	ldr	r3, [r7, #12]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d001      	beq.n	11aa <am_util_stdio_vsprintf+0x2c2>
    11a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a8:	e000      	b.n	11ac <am_util_stdio_vsprintf+0x2c4>
    11aa:	2300      	movs	r3, #0
    11ac:	68fa      	ldr	r2, [r7, #12]
    11ae:	4413      	add	r3, r2
    11b0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    11b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11b6:	4413      	add	r3, r2
    11b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    11ba:	2300      	movs	r3, #0
    11bc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    11be:	e17c      	b.n	14ba <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    11c0:	2301      	movs	r3, #1
    11c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    11ca:	2b00      	cmp	r3, #0
    11cc:	d00a      	beq.n	11e4 <am_util_stdio_vsprintf+0x2fc>
    11ce:	687b      	ldr	r3, [r7, #4]
    11d0:	3307      	adds	r3, #7
    11d2:	f023 0307 	bic.w	r3, r3, #7
    11d6:	f103 0208 	add.w	r2, r3, #8
    11da:	607a      	str	r2, [r7, #4]
    11dc:	cb18      	ldmia	r3, {r3, r4}
    11de:	e007      	b.n	11f0 <am_util_stdio_vsprintf+0x308>
    11e0:	10001130 	.word	0x10001130
                                      va_arg(pArgs, uint32_t);
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	1d1a      	adds	r2, r3, #4
    11e8:	607a      	str	r2, [r7, #4]
    11ea:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11ec:	f04f 0400 	mov.w	r4, #0
    11f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    11f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11f6:	2b00      	cmp	r3, #0
    11f8:	d01e      	beq.n	1238 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    11fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11fe:	f7ff fc22 	bl	a46 <ndigits_in_hex>
    1202:	4602      	mov	r2, r0
    1204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1206:	1a9b      	subs	r3, r3, r2
    1208:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    120a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    120e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1210:	4619      	mov	r1, r3
    1212:	68f8      	ldr	r0, [r7, #12]
    1214:	f7ff fd44 	bl	ca0 <padbuffer>
    1218:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    121a:	68fb      	ldr	r3, [r7, #12]
    121c:	2b00      	cmp	r3, #0
    121e:	d001      	beq.n	1224 <am_util_stdio_vsprintf+0x33c>
    1220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1222:	e000      	b.n	1226 <am_util_stdio_vsprintf+0x33e>
    1224:	2300      	movs	r3, #0
    1226:	68fa      	ldr	r2, [r7, #12]
    1228:	4413      	add	r3, r2
    122a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    122e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1230:	4413      	add	r3, r2
    1232:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1234:	2300      	movs	r3, #0
    1236:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1238:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    123c:	68fa      	ldr	r2, [r7, #12]
    123e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1242:	f7ff fcb2 	bl	baa <uint64_to_hexstr>
    1246:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	2b00      	cmp	r3, #0
    124c:	d003      	beq.n	1256 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1250:	68fa      	ldr	r2, [r7, #12]
    1252:	4413      	add	r3, r2
    1254:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    125a:	4413      	add	r3, r2
    125c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    125e:	e12f      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1264:	2b00      	cmp	r3, #0
    1266:	d008      	beq.n	127a <am_util_stdio_vsprintf+0x392>
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	3307      	adds	r3, #7
    126c:	f023 0307 	bic.w	r3, r3, #7
    1270:	f103 0208 	add.w	r2, r3, #8
    1274:	607a      	str	r2, [r7, #4]
    1276:	cb18      	ldmia	r3, {r3, r4}
    1278:	e005      	b.n	1286 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	1d1a      	adds	r2, r3, #4
    127e:	607a      	str	r2, [r7, #4]
    1280:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1282:	f04f 0400 	mov.w	r4, #0
    1286:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    128a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    128c:	2b00      	cmp	r3, #0
    128e:	d01e      	beq.n	12ce <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1290:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1294:	f7ff fb99 	bl	9ca <ndigits_in_u64>
    1298:	4602      	mov	r2, r0
    129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    129c:	1a9b      	subs	r3, r3, r2
    129e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    12a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12a6:	4619      	mov	r1, r3
    12a8:	68f8      	ldr	r0, [r7, #12]
    12aa:	f7ff fcf9 	bl	ca0 <padbuffer>
    12ae:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d001      	beq.n	12ba <am_util_stdio_vsprintf+0x3d2>
    12b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12b8:	e000      	b.n	12bc <am_util_stdio_vsprintf+0x3d4>
    12ba:	2300      	movs	r3, #0
    12bc:	68fa      	ldr	r2, [r7, #12]
    12be:	4413      	add	r3, r2
    12c0:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    12c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12c6:	4413      	add	r3, r2
    12c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    12ca:	2300      	movs	r3, #0
    12cc:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    12ce:	68fa      	ldr	r2, [r7, #12]
    12d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12d4:	f7ff fc21 	bl	b1a <uint64_to_str>
    12d8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12da:	68fb      	ldr	r3, [r7, #12]
    12dc:	2b00      	cmp	r3, #0
    12de:	d003      	beq.n	12e8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    12e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e2:	68fa      	ldr	r2, [r7, #12]
    12e4:	4413      	add	r3, r2
    12e6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12ec:	4413      	add	r3, r2
    12ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12f0:	e0e6      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12f6:	2b00      	cmp	r3, #0
    12f8:	d008      	beq.n	130c <am_util_stdio_vsprintf+0x424>
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	3307      	adds	r3, #7
    12fe:	f023 0307 	bic.w	r3, r3, #7
    1302:	f103 0208 	add.w	r2, r3, #8
    1306:	607a      	str	r2, [r7, #4]
    1308:	cb18      	ldmia	r3, {r3, r4}
    130a:	e005      	b.n	1318 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	1d1a      	adds	r2, r3, #4
    1310:	607a      	str	r2, [r7, #4]
    1312:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1314:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1318:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    131c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1320:	2b00      	cmp	r3, #0
    1322:	f174 0300 	sbcs.w	r3, r4, #0
    1326:	da0a      	bge.n	133e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1328:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    132c:	425b      	negs	r3, r3
    132e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1332:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1336:	2301      	movs	r3, #1
    1338:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    133c:	e006      	b.n	134c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    133e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1342:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1346:	2300      	movs	r3, #0
    1348:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    134e:	2b00      	cmp	r3, #0
    1350:	d04a      	beq.n	13e8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1352:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1356:	4618      	mov	r0, r3
    1358:	4621      	mov	r1, r4
    135a:	f7ff fb57 	bl	a0c <ndigits_in_i64>
    135e:	4602      	mov	r2, r0
    1360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1362:	1a9b      	subs	r3, r3, r2
    1364:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    136a:	2b00      	cmp	r3, #0
    136c:	d011      	beq.n	1392 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1370:	3b01      	subs	r3, #1
    1372:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1378:	2b30      	cmp	r3, #48	; 0x30
    137a:	d10a      	bne.n	1392 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	2b00      	cmp	r3, #0
    1380:	d004      	beq.n	138c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1382:	68fb      	ldr	r3, [r7, #12]
    1384:	1c5a      	adds	r2, r3, #1
    1386:	60fa      	str	r2, [r7, #12]
    1388:	222d      	movs	r2, #45	; 0x2d
    138a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    138c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    138e:	3301      	adds	r3, #1
    1390:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1396:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1398:	4619      	mov	r1, r3
    139a:	68f8      	ldr	r0, [r7, #12]
    139c:	f7ff fc80 	bl	ca0 <padbuffer>
    13a0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d001      	beq.n	13ac <am_util_stdio_vsprintf+0x4c4>
    13a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13aa:	e000      	b.n	13ae <am_util_stdio_vsprintf+0x4c6>
    13ac:	2300      	movs	r3, #0
    13ae:	68fa      	ldr	r2, [r7, #12]
    13b0:	4413      	add	r3, r2
    13b2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    13b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13b8:	4413      	add	r3, r2
    13ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    13bc:	2300      	movs	r3, #0
    13be:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    13c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13c4:	2b00      	cmp	r3, #0
    13c6:	d01e      	beq.n	1406 <am_util_stdio_vsprintf+0x51e>
    13c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13cc:	2b20      	cmp	r3, #32
    13ce:	d11a      	bne.n	1406 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d004      	beq.n	13e0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    13d6:	68fb      	ldr	r3, [r7, #12]
    13d8:	1c5a      	adds	r2, r3, #1
    13da:	60fa      	str	r2, [r7, #12]
    13dc:	222d      	movs	r2, #45	; 0x2d
    13de:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    13e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13e2:	3301      	adds	r3, #1
    13e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    13e6:	e00e      	b.n	1406 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    13e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13ec:	2b00      	cmp	r3, #0
    13ee:	d00a      	beq.n	1406 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d004      	beq.n	1400 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	1c5a      	adds	r2, r3, #1
    13fa:	60fa      	str	r2, [r7, #12]
    13fc:	222d      	movs	r2, #45	; 0x2d
    13fe:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1402:	3301      	adds	r3, #1
    1404:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1406:	68fa      	ldr	r2, [r7, #12]
    1408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    140c:	f7ff fb85 	bl	b1a <uint64_to_str>
    1410:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	2b00      	cmp	r3, #0
    1416:	d003      	beq.n	1420 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    141a:	68fa      	ldr	r2, [r7, #12]
    141c:	4413      	add	r3, r2
    141e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1424:	4413      	add	r3, r2
    1426:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1428:	e04a      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    142a:	68fb      	ldr	r3, [r7, #12]
    142c:	2b00      	cmp	r3, #0
    142e:	d046      	beq.n	14be <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	3307      	adds	r3, #7
    1434:	f023 0307 	bic.w	r3, r3, #7
    1438:	f103 0208 	add.w	r2, r3, #8
    143c:	607a      	str	r2, [r7, #4]
    143e:	cb18      	ldmia	r3, {r3, r4}
    1440:	4618      	mov	r0, r3
    1442:	4621      	mov	r1, r4
    1444:	f7fe fe1c 	bl	80 <__aeabi_d2f>
    1448:	4603      	mov	r3, r0
    144a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    144c:	68fb      	ldr	r3, [r7, #12]
    144e:	2214      	movs	r2, #20
    1450:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1454:	68f9      	ldr	r1, [r7, #12]
    1456:	6978      	ldr	r0, [r7, #20]
    1458:	f7ff fc48 	bl	cec <ftoa>
    145c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1460:	2b00      	cmp	r3, #0
    1462:	da14      	bge.n	148e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1466:	f1b3 3fff 	cmp.w	r3, #4294967295
    146a:	d102      	bne.n	1472 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    146c:	4b1e      	ldr	r3, [pc, #120]	; (14e8 <am_util_stdio_vsprintf+0x600>)
    146e:	62bb      	str	r3, [r7, #40]	; 0x28
    1470:	e008      	b.n	1484 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1474:	f113 0f02 	cmn.w	r3, #2
    1478:	d102      	bne.n	1480 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    147a:	4b1c      	ldr	r3, [pc, #112]	; (14ec <am_util_stdio_vsprintf+0x604>)
    147c:	62bb      	str	r3, [r7, #40]	; 0x28
    147e:	e001      	b.n	1484 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1480:	4b1b      	ldr	r3, [pc, #108]	; (14f0 <am_util_stdio_vsprintf+0x608>)
    1482:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1488:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    148a:	2303      	movs	r3, #3
    148c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1492:	4413      	add	r3, r2
    1494:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1498:	68fa      	ldr	r2, [r7, #12]
    149a:	4413      	add	r3, r2
    149c:	60fb      	str	r3, [r7, #12]
                }
                break;
    149e:	e00e      	b.n	14be <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    14a6:	68fb      	ldr	r3, [r7, #12]
    14a8:	1c5a      	adds	r2, r3, #1
    14aa:	60fa      	str	r2, [r7, #12]
    14ac:	68ba      	ldr	r2, [r7, #8]
    14ae:	7812      	ldrb	r2, [r2, #0]
    14b0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    14b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14b4:	3301      	adds	r3, #1
    14b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14b8:	e002      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>
                break;
    14ba:	bf00      	nop
    14bc:	e000      	b.n	14c0 <am_util_stdio_vsprintf+0x5d8>
                break;
    14be:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    14c0:	68bb      	ldr	r3, [r7, #8]
    14c2:	3301      	adds	r3, #1
    14c4:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    14c6:	68bb      	ldr	r3, [r7, #8]
    14c8:	781b      	ldrb	r3, [r3, #0]
    14ca:	2b00      	cmp	r3, #0
    14cc:	f47f ad17 	bne.w	efe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    14d0:	68fb      	ldr	r3, [r7, #12]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d002      	beq.n	14dc <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    14d6:	68fb      	ldr	r3, [r7, #12]
    14d8:	2200      	movs	r2, #0
    14da:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    14dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    14de:	4618      	mov	r0, r3
    14e0:	3754      	adds	r7, #84	; 0x54
    14e2:	46bd      	mov	sp, r7
    14e4:	bd90      	pop	{r4, r7, pc}
    14e6:	bf00      	nop
    14e8:	00302e30 	.word	0x00302e30
    14ec:	00232e23 	.word	0x00232e23
    14f0:	003f2e3f 	.word	0x003f2e3f

000014f4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    14f4:	b40f      	push	{r0, r1, r2, r3}
    14f6:	b580      	push	{r7, lr}
    14f8:	b082      	sub	sp, #8
    14fa:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    14fc:	f107 0314 	add.w	r3, r7, #20
    1500:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1502:	683a      	ldr	r2, [r7, #0]
    1504:	6939      	ldr	r1, [r7, #16]
    1506:	4808      	ldr	r0, [pc, #32]	; (1528 <am_util_stdio_printf+0x34>)
    1508:	f7ff fcee 	bl	ee8 <am_util_stdio_vsprintf>
    150c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    150e:	4b07      	ldr	r3, [pc, #28]	; (152c <am_util_stdio_printf+0x38>)
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	4805      	ldr	r0, [pc, #20]	; (1528 <am_util_stdio_printf+0x34>)
    1514:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1516:	687b      	ldr	r3, [r7, #4]
}
    1518:	4618      	mov	r0, r3
    151a:	3708      	adds	r7, #8
    151c:	46bd      	mov	sp, r7
    151e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1522:	b004      	add	sp, #16
    1524:	4770      	bx	lr
    1526:	bf00      	nop
    1528:	10001030 	.word	0x10001030
    152c:	10001570 	.word	0x10001570

00001530 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1530:	b580      	push	{r7, lr}
    1532:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1534:	4802      	ldr	r0, [pc, #8]	; (1540 <am_util_stdio_terminal_clear+0x10>)
    1536:	f7ff ffdd 	bl	14f4 <am_util_stdio_printf>
}
    153a:	bf00      	nop
    153c:	bd80      	pop	{r7, pc}
    153e:	bf00      	nop
    1540:	000047f8 	.word	0x000047f8

00001544 <am_bsp_iom_spi_pins_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
    1544:	b430      	push	{r4, r5}
    switch(ui32Module)
    1546:	2800      	cmp	r0, #0
    1548:	d02d      	beq.n	15a6 <am_bsp_iom_spi_pins_enable+0x62>
    154a:	2801      	cmp	r0, #1
    154c:	d000      	beq.n	1550 <am_bsp_iom_spi_pins_enable+0xc>
    154e:	e7fe      	b.n	154e <am_bsp_iom_spi_pins_enable+0xa>
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_enable(IOM1_SCK);
    1550:	4b2a      	ldr	r3, [pc, #168]	; (15fc <am_bsp_iom_spi_pins_enable+0xb8>)
    1552:	492b      	ldr	r1, [pc, #172]	; (1600 <am_bsp_iom_spi_pins_enable+0xbc>)
    1554:	4a2b      	ldr	r2, [pc, #172]	; (1604 <am_bsp_iom_spi_pins_enable+0xc0>)
    1556:	2573      	movs	r5, #115	; 0x73
    1558:	601d      	str	r5, [r3, #0]
    155a:	6808      	ldr	r0, [r1, #0]
    155c:	f020 0407 	bic.w	r4, r0, #7
    1560:	600c      	str	r4, [r1, #0]
    1562:	6810      	ldr	r0, [r2, #0]
    1564:	f020 04ff 	bic.w	r4, r0, #255	; 0xff
    1568:	f044 000e 	orr.w	r0, r4, #14
    156c:	2400      	movs	r4, #0
    156e:	6010      	str	r0, [r2, #0]
    1570:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MISO);
    1572:	601d      	str	r5, [r3, #0]
    1574:	6808      	ldr	r0, [r1, #0]
    1576:	f020 0070 	bic.w	r0, r0, #112	; 0x70
    157a:	6008      	str	r0, [r1, #0]
    157c:	6810      	ldr	r0, [r2, #0]
    157e:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1582:	f44c 6020 	orr.w	r0, ip, #2560	; 0xa00
    1586:	6010      	str	r0, [r2, #0]
    1588:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MOSI);
    158a:	601d      	str	r5, [r3, #0]
    158c:	680d      	ldr	r5, [r1, #0]
    158e:	f425 60e0 	bic.w	r0, r5, #1792	; 0x700
    1592:	6008      	str	r0, [r1, #0]
    1594:	6811      	ldr	r1, [r2, #0]
    1596:	f421 057f 	bic.w	r5, r1, #16711680	; 0xff0000
    159a:	f445 2000 	orr.w	r0, r5, #524288	; 0x80000
    159e:	6010      	str	r0, [r2, #0]
    15a0:	601c      	str	r4, [r3, #0]
        // debugging.
        //
        default:
            while(1);
    }
}
    15a2:	bc30      	pop	{r4, r5}
    15a4:	4770      	bx	lr
            am_bsp_pin_enable(IOM0_SCK);
    15a6:	4b15      	ldr	r3, [pc, #84]	; (15fc <am_bsp_iom_spi_pins_enable+0xb8>)
    15a8:	4917      	ldr	r1, [pc, #92]	; (1608 <am_bsp_iom_spi_pins_enable+0xc4>)
    15aa:	4a18      	ldr	r2, [pc, #96]	; (160c <am_bsp_iom_spi_pins_enable+0xc8>)
    15ac:	2573      	movs	r5, #115	; 0x73
    15ae:	601d      	str	r5, [r3, #0]
    15b0:	680c      	ldr	r4, [r1, #0]
    15b2:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    15b6:	600c      	str	r4, [r1, #0]
    15b8:	6814      	ldr	r4, [r2, #0]
    15ba:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
    15be:	f44c 6460 	orr.w	r4, ip, #3584	; 0xe00
    15c2:	6014      	str	r4, [r2, #0]
    15c4:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MISO);
    15c6:	601d      	str	r5, [r3, #0]
    15c8:	680c      	ldr	r4, [r1, #0]
    15ca:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
    15ce:	600c      	str	r4, [r1, #0]
    15d0:	6814      	ldr	r4, [r2, #0]
    15d2:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
    15d6:	f44c 2420 	orr.w	r4, ip, #655360	; 0xa0000
    15da:	6014      	str	r4, [r2, #0]
    15dc:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MOSI);
    15de:	601d      	str	r5, [r3, #0]
    15e0:	680d      	ldr	r5, [r1, #0]
    15e2:	f025 44e0 	bic.w	r4, r5, #1879048192	; 0x70000000
    15e6:	600c      	str	r4, [r1, #0]
    15e8:	6811      	ldr	r1, [r2, #0]
    15ea:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    15ee:	f045 6400 	orr.w	r4, r5, #134217728	; 0x8000000
    15f2:	6014      	str	r4, [r2, #0]
    15f4:	6018      	str	r0, [r3, #0]
}
    15f6:	bc30      	pop	{r4, r5}
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	40010060 	.word	0x40010060
    1600:	40010044 	.word	0x40010044
    1604:	40010008 	.word	0x40010008
    1608:	40010040 	.word	0x40010040
    160c:	40010004 	.word	0x40010004

00001610 <am_bsp_iom_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_enable(uint32_t ui32Module)
{
    1610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1612:	4604      	mov	r4, r0
    am_hal_iom_enable(ui32Module);
    1614:	f001 f802 	bl	261c <am_hal_iom_enable>

    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    1618:	4920      	ldr	r1, [pc, #128]	; (169c <am_bsp_iom_enable+0x8c>)
    161a:	4a21      	ldr	r2, [pc, #132]	; (16a0 <am_bsp_iom_enable+0x90>)
    161c:	f851 3034 	ldr.w	r3, [r1, r4, lsl #3]
    1620:	4293      	cmp	r3, r2
    1622:	d039      	beq.n	1698 <am_bsp_iom_enable+0x88>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
    1624:	f504 20a0 	add.w	r0, r4, #327680	; 0x50000
    1628:	3004      	adds	r0, #4
    162a:	0305      	lsls	r5, r0, #12
    162c:	f8d5 611c 	ldr.w	r6, [r5, #284]	; 0x11c
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    1630:	07f2      	lsls	r2, r6, #31
    1632:	d531      	bpl.n	1698 <am_bsp_iom_enable+0x88>
    {
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
    1634:	2b00      	cmp	r3, #0
    1636:	db2f      	blt.n	1698 <am_bsp_iom_enable+0x88>
    1638:	eb01 0cc4 	add.w	ip, r1, r4, lsl #3
    163c:	4d19      	ldr	r5, [pc, #100]	; (16a4 <am_bsp_iom_enable+0x94>)
    163e:	4f1a      	ldr	r7, [pc, #104]	; (16a8 <am_bsp_iom_enable+0x98>)
    1640:	f8dc 1004 	ldr.w	r1, [ip, #4]
    1644:	085c      	lsrs	r4, r3, #1
    1646:	f004 0c7c 	and.w	ip, r4, #124	; 0x7c
    164a:	2273      	movs	r2, #115	; 0x73
    164c:	602a      	str	r2, [r5, #0]
    164e:	0098      	lsls	r0, r3, #2
    1650:	f85c 6007 	ldr.w	r6, [ip, r7]
    1654:	f000 041c 	and.w	r4, r0, #28
    1658:	2207      	movs	r2, #7
    165a:	f3c1 2002 	ubfx	r0, r1, #8, #3
    165e:	fa02 fe04 	lsl.w	lr, r2, r4
    1662:	40a0      	lsls	r0, r4
    1664:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    1668:	ea26 040e 	bic.w	r4, r6, lr
    166c:	4320      	orrs	r0, r4
    166e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    1672:	f84c 0007 	str.w	r0, [ip, r7]
    1676:	f506 3780 	add.w	r7, r6, #65536	; 0x10000
    167a:	00db      	lsls	r3, r3, #3
    167c:	f003 0218 	and.w	r2, r3, #24
    1680:	6838      	ldr	r0, [r7, #0]
    1682:	24ff      	movs	r4, #255	; 0xff
    1684:	4094      	lsls	r4, r2
    1686:	b2c9      	uxtb	r1, r1
    1688:	fa01 f602 	lsl.w	r6, r1, r2
    168c:	ea20 0304 	bic.w	r3, r0, r4
    1690:	431e      	orrs	r6, r3
    1692:	2200      	movs	r2, #0
    1694:	603e      	str	r6, [r7, #0]
    1696:	602a      	str	r2, [r5, #0]
    1698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    169a:	bf00      	nop
    169c:	0000481c 	.word	0x0000481c
    16a0:	deadbeef 	.word	0xdeadbeef
    16a4:	40010060 	.word	0x40010060
    16a8:	40010040 	.word	0x40010040

000016ac <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    16ac:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    16ae:	f001 ff3f 	bl	3530 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    16b2:	f002 f86b 	bl	378c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    16b6:	2001      	movs	r0, #1
    16b8:	f001 ffe0 	bl	367c <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    16bc:	2001      	movs	r0, #1
    16be:	f000 f851 	bl	1764 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    16c2:	f001 ffe9 	bl	3698 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    16c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    16ca:	f001 bf29 	b.w	3520 <am_hal_mcuctrl_bandgap_disable>
    16ce:	bf00      	nop

000016d0 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    16d0:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    16d2:	4b10      	ldr	r3, [pc, #64]	; (1714 <am_bsp_debug_printf_enable+0x44>)
    16d4:	681c      	ldr	r4, [r3, #0]
    16d6:	f014 0401 	ands.w	r4, r4, #1
{
    16da:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    16dc:	d001      	beq.n	16e2 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    16de:	b006      	add	sp, #24
    16e0:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    16e2:	a806      	add	r0, sp, #24
    16e4:	490c      	ldr	r1, [pc, #48]	; (1718 <am_bsp_debug_printf_enable+0x48>)
    16e6:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    16ea:	f001 fff3 	bl	36d4 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    16ee:	4a0b      	ldr	r2, [pc, #44]	; (171c <am_bsp_debug_printf_enable+0x4c>)
    16f0:	480b      	ldr	r0, [pc, #44]	; (1720 <am_bsp_debug_printf_enable+0x50>)
    16f2:	490c      	ldr	r1, [pc, #48]	; (1724 <am_bsp_debug_printf_enable+0x54>)
    16f4:	2373      	movs	r3, #115	; 0x73
    16f6:	6013      	str	r3, [r2, #0]
    16f8:	6803      	ldr	r3, [r0, #0]
    16fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    16fe:	6003      	str	r3, [r0, #0]
    1700:	6808      	ldr	r0, [r1, #0]
    1702:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1706:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    170a:	600b      	str	r3, [r1, #0]
    170c:	6014      	str	r4, [r2, #0]
}
    170e:	b006      	add	sp, #24
    1710:	bd10      	pop	{r4, pc}
    1712:	bf00      	nop
    1714:	10001134 	.word	0x10001134
    1718:	000f4240 	.word	0x000f4240
    171c:	40010060 	.word	0x40010060
    1720:	40010054 	.word	0x40010054
    1724:	40010028 	.word	0x40010028

00001728 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1728:	f001 bee0 	b.w	34ec <am_hal_itm_print>

0000172c <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    172c:	4b05      	ldr	r3, [pc, #20]	; (1744 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    172e:	4906      	ldr	r1, [pc, #24]	; (1748 <am_hal_clkgen_sysclk_select+0x1c>)
{
    1730:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1732:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1734:	2447      	movs	r4, #71	; 0x47
    1736:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1738:	6008      	str	r0, [r1, #0]
}
    173a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    173e:	601a      	str	r2, [r3, #0]
}
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	40004014 	.word	0x40004014
    1748:	40004018 	.word	0x40004018

0000174c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    174c:	4b03      	ldr	r3, [pc, #12]	; (175c <am_hal_clkgen_sysclk_get+0x10>)
    174e:	4a04      	ldr	r2, [pc, #16]	; (1760 <am_hal_clkgen_sysclk_get+0x14>)
    1750:	6818      	ldr	r0, [r3, #0]
    1752:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1756:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    175a:	4770      	bx	lr
    175c:	40004018 	.word	0x40004018
    1760:	0000482c 	.word	0x0000482c

00001764 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1764:	0783      	lsls	r3, r0, #30
    1766:	d003      	beq.n	1770 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1768:	4b02      	ldr	r3, [pc, #8]	; (1774 <am_hal_clkgen_osc_stop+0x10>)
    176a:	681a      	ldr	r2, [r3, #0]
    176c:	4310      	orrs	r0, r2
    176e:	6018      	str	r0, [r3, #0]
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	4000400c 	.word	0x4000400c

00001778 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1778:	3801      	subs	r0, #1
    177a:	f47f affd 	bne.w	1778 <am_hal_flash_delay>
    177e:	4770      	bx	lr

00001780 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    1780:	2800      	cmp	r0, #0
    1782:	d070      	beq.n	1866 <am_hal_flash_delay_status_change+0xe6>
{
    1784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1788:	1e47      	subs	r7, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    178a:	6808      	ldr	r0, [r1, #0]
    178c:	4010      	ands	r0, r2
    178e:	4283      	cmp	r3, r0
    1790:	d063      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
    1792:	f017 0903 	ands.w	r9, r7, #3
    1796:	461c      	mov	r4, r3
    1798:	4615      	mov	r5, r2
    179a:	460e      	mov	r6, r1
        }

        //
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    179c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 186c <am_hal_flash_delay_status_change+0xec>
    17a0:	d02c      	beq.n	17fc <am_hal_flash_delay_status_change+0x7c>
    17a2:	f7ff ffd3 	bl	174c <am_hal_clkgen_sysclk_get>
    17a6:	fba8 3100 	umull	r3, r1, r8, r0
    17aa:	0c88      	lsrs	r0, r1, #18
    17ac:	f7ff ffe4 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17b0:	6833      	ldr	r3, [r6, #0]
    17b2:	402b      	ands	r3, r5
    17b4:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    17b6:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17ba:	d04e      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
    17bc:	f1b9 0f01 	cmp.w	r9, #1
    17c0:	d01c      	beq.n	17fc <am_hal_flash_delay_status_change+0x7c>
    17c2:	f1b9 0f02 	cmp.w	r9, #2
    17c6:	d00c      	beq.n	17e2 <am_hal_flash_delay_status_change+0x62>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    17c8:	f7ff ffc0 	bl	174c <am_hal_clkgen_sysclk_get>
    17cc:	fba8 3200 	umull	r3, r2, r8, r0
    17d0:	0c90      	lsrs	r0, r2, #18
    17d2:	f7ff ffd1 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17d6:	6830      	ldr	r0, [r6, #0]
    17d8:	4028      	ands	r0, r5
    17da:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    17dc:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17e0:	d03b      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    17e2:	f7ff ffb3 	bl	174c <am_hal_clkgen_sysclk_get>
    17e6:	fba8 3100 	umull	r3, r1, r8, r0
    17ea:	0c88      	lsrs	r0, r1, #18
    17ec:	f7ff ffc4 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17f0:	6833      	ldr	r3, [r6, #0]
    17f2:	402b      	ands	r3, r5
    17f4:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    17f6:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    17fa:	d02e      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    17fc:	f7ff ffa6 	bl	174c <am_hal_clkgen_sysclk_get>
    1800:	fba8 3200 	umull	r3, r2, r8, r0
    1804:	0c90      	lsrs	r0, r2, #18
    1806:	f7ff ffb7 	bl	1778 <am_hal_flash_delay>
    while ( ui32usMaxDelay-- )
    180a:	b34f      	cbz	r7, 1860 <am_hal_flash_delay_status_change+0xe0>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    180c:	6830      	ldr	r0, [r6, #0]
    180e:	4028      	ands	r0, r5
    1810:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    1812:	f1a7 0704 	sub.w	r7, r7, #4
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1816:	d020      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    1818:	f7ff ff98 	bl	174c <am_hal_clkgen_sysclk_get>
    181c:	fba8 3100 	umull	r3, r1, r8, r0
    1820:	0c88      	lsrs	r0, r1, #18
    1822:	f7ff ffa9 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1826:	6833      	ldr	r3, [r6, #0]
    1828:	402b      	ands	r3, r5
    182a:	42a3      	cmp	r3, r4
    182c:	d015      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    182e:	f7ff ff8d 	bl	174c <am_hal_clkgen_sysclk_get>
    1832:	fba8 3200 	umull	r3, r2, r8, r0
    1836:	0c90      	lsrs	r0, r2, #18
    1838:	f7ff ff9e 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    183c:	6830      	ldr	r0, [r6, #0]
    183e:	4028      	ands	r0, r5
    1840:	42a0      	cmp	r0, r4
    1842:	d00a      	beq.n	185a <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    1844:	f7ff ff82 	bl	174c <am_hal_clkgen_sysclk_get>
    1848:	fba8 3100 	umull	r3, r1, r8, r0
    184c:	0c88      	lsrs	r0, r1, #18
    184e:	f7ff ff93 	bl	1778 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1852:	6833      	ldr	r3, [r6, #0]
    1854:	402b      	ands	r3, r5
    1856:	42a3      	cmp	r3, r4
    1858:	d1d0      	bne.n	17fc <am_hal_flash_delay_status_change+0x7c>
            return 1;
    185a:	2001      	movs	r0, #1
    185c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    return 0;
    1860:	2000      	movs	r0, #0
    1862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1866:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    1868:	4770      	bx	lr
    186a:	bf00      	nop
    186c:	165e9f81 	.word	0x165e9f81

00001870 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    1870:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    1872:	4c05      	ldr	r4, [pc, #20]	; (1888 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1874:	4a05      	ldr	r2, [pc, #20]	; (188c <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    1876:	6823      	ldr	r3, [r4, #0]
    1878:	4319      	orrs	r1, r3
    187a:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    187c:	6811      	ldr	r1, [r2, #0]
}
    187e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1882:	4308      	orrs	r0, r1
    1884:	6010      	str	r0, [r2, #0]
}
    1886:	4770      	bx	lr
    1888:	40010210 	.word	0x40010210
    188c:	40010200 	.word	0x40010200

00001890 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1890:	4a02      	ldr	r2, [pc, #8]	; (189c <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1892:	4b03      	ldr	r3, [pc, #12]	; (18a0 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1894:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1896:	6018      	str	r0, [r3, #0]
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	40010218 	.word	0x40010218
    18a0:	40010208 	.word	0x40010208

000018a4 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    18a4:	b470      	push	{r4, r5, r6}
    uint64_t u64RetVal, u64Mask;
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    if (bEnabledOnly)
    18a6:	b930      	cbnz	r0, 18b6 <am_hal_gpio_int_status_get+0x12>
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
        return u64RetVal & u64Mask;
    }
    else
    {
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    18a8:	4a0b      	ldr	r2, [pc, #44]	; (18d8 <am_hal_gpio_int_status_get+0x34>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    18aa:	4b0c      	ldr	r3, [pc, #48]	; (18dc <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    18ac:	6811      	ldr	r1, [r2, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    18ae:	681c      	ldr	r4, [r3, #0]
    18b0:	4320      	orrs	r0, r4
        return u64RetVal;
    }
}
    18b2:	bc70      	pop	{r4, r5, r6}
    18b4:	4770      	bx	lr
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    18b6:	4d0a      	ldr	r5, [pc, #40]	; (18e0 <am_hal_gpio_int_status_get+0x3c>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    18b8:	4e0a      	ldr	r6, [pc, #40]	; (18e4 <am_hal_gpio_int_status_get+0x40>)
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    18ba:	4c07      	ldr	r4, [pc, #28]	; (18d8 <am_hal_gpio_int_status_get+0x34>)
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    18bc:	4a07      	ldr	r2, [pc, #28]	; (18dc <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    18be:	6829      	ldr	r1, [r5, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    18c0:	6835      	ldr	r5, [r6, #0]
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    18c2:	6823      	ldr	r3, [r4, #0]
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    18c4:	6816      	ldr	r6, [r2, #0]
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    18c6:	2000      	movs	r0, #0
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    18c8:	4602      	mov	r2, r0
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    18ca:	4332      	orrs	r2, r6
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    18cc:	4328      	orrs	r0, r5
        return u64RetVal & u64Mask;
    18ce:	4010      	ands	r0, r2
    18d0:	4019      	ands	r1, r3
}
    18d2:	bc70      	pop	{r4, r5, r6}
    18d4:	4770      	bx	lr
    18d6:	bf00      	nop
    18d8:	40010214 	.word	0x40010214
    18dc:	40010204 	.word	0x40010204
    18e0:	40010210 	.word	0x40010210
    18e4:	40010200 	.word	0x40010200

000018e8 <am_hal_gpio_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_gpio_int_service(uint64_t ui64Status)
{
    18e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ea:	460c      	mov	r4, r1

    //
    // Handle any active interrupts in the lower 32 bits
    //
    ui32Status = (uint32_t) ui64Status;
    while ( ui32Status )
    18ec:	b188      	cbz	r0, 1912 <am_hal_gpio_int_service+0x2a>
    18ee:	4f13      	ldr	r7, [pc, #76]	; (193c <am_hal_gpio_int_service+0x54>)
    18f0:	4605      	mov	r5, r0
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    18f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    18f6:	fab5 f385 	clz	r3, r5

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    18fa:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    18fe:	fa26 f003 	lsr.w	r0, r6, r3
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    1902:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1906:	ea25 0500 	bic.w	r5, r5, r0
        if ( pfnHandler )
    190a:	b101      	cbz	r1, 190e <am_hal_gpio_int_service+0x26>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    190c:	4788      	blx	r1
    while ( ui32Status )
    190e:	2d00      	cmp	r5, #0
    1910:	d1f1      	bne.n	18f6 <am_hal_gpio_int_service+0xe>

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    while ( ui32Status )
    1912:	b18c      	cbz	r4, 1938 <am_hal_gpio_int_service+0x50>
    1914:	4f09      	ldr	r7, [pc, #36]	; (193c <am_hal_gpio_int_service+0x54>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1916:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    191a:	fab4 fc84 	clz	ip, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    191e:	f1cc 023f 	rsb	r2, ip, #63	; 0x3f
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1922:	fa26 f30c 	lsr.w	r3, r6, ip
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    1926:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    192a:	ea24 0403 	bic.w	r4, r4, r3
        if ( pfnHandler )
    192e:	b100      	cbz	r0, 1932 <am_hal_gpio_int_service+0x4a>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    1930:	4780      	blx	r0
    while ( ui32Status )
    1932:	2c00      	cmp	r4, #0
    1934:	d1f1      	bne.n	191a <am_hal_gpio_int_service+0x32>
    1936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    193a:	bf00      	nop
    193c:	10001574 	.word	0x10001574

00001940 <am_hal_gpio_int_register>:
                         am_hal_gpio_handler_t pfnHandler)
{
    //
    // Check to make sure the GPIO number is valid. (Debug builds only)
    //
    am_hal_debug_assert_msg(ui32GPIONumber <= 64, "GPIO number out of range.");
    1940:	2840      	cmp	r0, #64	; 0x40
{
    1942:	b538      	push	{r3, r4, r5, lr}
    1944:	4604      	mov	r4, r0
    1946:	460d      	mov	r5, r1
    am_hal_debug_assert_msg(ui32GPIONumber <= 64, "GPIO number out of range.");
    1948:	d905      	bls.n	1956 <am_hal_gpio_int_register+0x16>
    194a:	4a05      	ldr	r2, [pc, #20]	; (1960 <am_hal_gpio_int_register+0x20>)
    194c:	4805      	ldr	r0, [pc, #20]	; (1964 <am_hal_gpio_int_register+0x24>)
    194e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    1952:	f001 ff21 	bl	3798 <am_hal_debug_error>

    am_hal_gpio_ppfnHandlers[ui32GPIONumber] = pfnHandler;
    1956:	4b04      	ldr	r3, [pc, #16]	; (1968 <am_hal_gpio_int_register+0x28>)
    1958:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    195c:	bd38      	pop	{r3, r4, r5, pc}
    195e:	bf00      	nop
    1960:	0000484c 	.word	0x0000484c
    1964:	00004880 	.word	0x00004880
    1968:	10001574 	.word	0x10001574

0000196c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    196c:	280f      	cmp	r0, #15
    196e:	d80b      	bhi.n	1988 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1970:	2805      	cmp	r0, #5
    1972:	d013      	beq.n	199c <am_hal_interrupt_enable+0x30>
    1974:	2806      	cmp	r0, #6
    1976:	d017      	beq.n	19a8 <am_hal_interrupt_enable+0x3c>
    1978:	2804      	cmp	r0, #4
    197a:	d104      	bne.n	1986 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    197c:	4a0d      	ldr	r2, [pc, #52]	; (19b4 <am_hal_interrupt_enable+0x48>)
    197e:	6813      	ldr	r3, [r2, #0]
    1980:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1984:	6010      	str	r0, [r2, #0]
    1986:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1988:	f1a0 0310 	sub.w	r3, r0, #16
    198c:	f003 0c1f 	and.w	ip, r3, #31
    1990:	2001      	movs	r0, #1
    1992:	4909      	ldr	r1, [pc, #36]	; (19b8 <am_hal_interrupt_enable+0x4c>)
    1994:	fa00 f20c 	lsl.w	r2, r0, ip
    1998:	600a      	str	r2, [r1, #0]
    199a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    199c:	4805      	ldr	r0, [pc, #20]	; (19b4 <am_hal_interrupt_enable+0x48>)
    199e:	6801      	ldr	r1, [r0, #0]
    19a0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    19a4:	6002      	str	r2, [r0, #0]
            break;
    19a6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    19a8:	4902      	ldr	r1, [pc, #8]	; (19b4 <am_hal_interrupt_enable+0x48>)
    19aa:	680a      	ldr	r2, [r1, #0]
    19ac:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    19b0:	600b      	str	r3, [r1, #0]
            break;
    19b2:	4770      	bx	lr
    19b4:	e000ed24 	.word	0xe000ed24
    19b8:	e000e100 	.word	0xe000e100

000019bc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    19bc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    19c0:	b672      	cpsid	i
    __asm("    bx lr");
    19c2:	4770      	bx	lr

000019c4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    19c4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop

000019cc <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    19cc:	2801      	cmp	r0, #1
    19ce:	d900      	bls.n	19d2 <am_hal_iom_sleeping_queue_flush+0x6>
    19d0:	4770      	bx	lr
{
    19d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19d4:	4f0c      	ldr	r7, [pc, #48]	; (1a08 <am_hal_iom_sleeping_queue_flush+0x3c>)
    19d6:	4e0d      	ldr	r6, [pc, #52]	; (1a0c <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    19d8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    19dc:	4604      	mov	r4, r0
    19de:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    19e2:	f7ff ffeb 	bl	19bc <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    19e6:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    19e8:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    19ea:	b929      	cbnz	r1, 19f8 <am_hal_iom_sleeping_queue_flush+0x2c>
    19ec:	68ba      	ldr	r2, [r7, #8]
    19ee:	b91a      	cbnz	r2, 19f8 <am_hal_iom_sleeping_queue_flush+0x2c>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    19f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    19f4:	f7ff bfe6 	b.w	19c4 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    19f8:	2000      	movs	r0, #0
    19fa:	f001 fe55 	bl	36a8 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    19fe:	4628      	mov	r0, r5
    1a00:	f7ff ffe0 	bl	19c4 <am_hal_interrupt_master_set>
    1a04:	e7ed      	b.n	19e2 <am_hal_iom_sleeping_queue_flush+0x16>
    1a06:	bf00      	nop
    1a08:	1000169c 	.word	0x1000169c
    1a0c:	10001138 	.word	0x10001138

00001a10 <am_hal_iom_i2c_read_nb.part.10>:
am_hal_iom_i2c_read_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    1a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a14:	b082      	sub	sp, #8
    1a16:	4604      	mov	r4, r0
    1a18:	4689      	mov	r9, r1
    1a1a:	4617      	mov	r7, r2
    1a1c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    1a20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1a22:	461d      	mov	r5, r3
    1a24:	2b00      	cmp	r3, #0
    1a26:	d056      	beq.n	1ad6 <am_hal_iom_i2c_read_nb.part.10+0xc6>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1a28:	2802      	cmp	r0, #2
    1a2a:	d05c      	beq.n	1ae6 <am_hal_iom_i2c_read_nb.part.10+0xd6>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    1a2c:	2bff      	cmp	r3, #255	; 0xff
    1a2e:	d81a      	bhi.n	1a66 <am_hal_iom_i2c_read_nb.part.10+0x56>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1a30:	2c01      	cmp	r4, #1
    1a32:	d920      	bls.n	1a76 <am_hal_iom_i2c_read_nb.part.10+0x66>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a34:	f504 23a0 	add.w	r3, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1a38:	4a43      	ldr	r2, [pc, #268]	; (1b48 <am_hal_iom_i2c_read_nb.part.10+0x138>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a3a:	4944      	ldr	r1, [pc, #272]	; (1b4c <am_hal_iom_i2c_read_nb.part.10+0x13c>)
    g_bIomBusy[ui32Module] = true;
    1a3c:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a3e:	3304      	adds	r3, #4
    g_bIomBusy[ui32Module] = true;
    1a40:	5510      	strb	r0, [r2, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a42:	031b      	lsls	r3, r3, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a4c:	00a4      	lsls	r4, r4, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a4e:	4302      	orrs	r2, r0
    1a50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a54:	2002      	movs	r0, #2
    1a56:	190b      	adds	r3, r1, r4
    1a58:	5108      	str	r0, [r1, r4]
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1a5a:	605f      	str	r7, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1a5c:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1a5e:	611e      	str	r6, [r3, #16]
}
    1a60:	b002      	add	sp, #8
    1a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    1a66:	4a3a      	ldr	r2, [pc, #232]	; (1b50 <am_hal_iom_i2c_read_nb.part.10+0x140>)
    1a68:	483a      	ldr	r0, [pc, #232]	; (1b54 <am_hal_iom_i2c_read_nb.part.10+0x144>)
    1a6a:	f240 710a 	movw	r1, #1802	; 0x70a
    1a6e:	f001 fe93 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1a72:	2c01      	cmp	r4, #1
    1a74:	d8de      	bhi.n	1a34 <am_hal_iom_i2c_read_nb.part.10+0x24>
    1a76:	4b34      	ldr	r3, [pc, #208]	; (1b48 <am_hal_iom_i2c_read_nb.part.10+0x138>)
    while ( g_bIomBusy[ui32Module] );
    1a78:	5d1a      	ldrb	r2, [r3, r4]
    1a7a:	2a00      	cmp	r2, #0
    1a7c:	d1fc      	bne.n	1a78 <am_hal_iom_i2c_read_nb.part.10+0x68>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a7e:	f504 2aa0 	add.w	sl, r4, #327680	; 0x50000
    1a82:	f10a 0004 	add.w	r0, sl, #4
    g_bIomBusy[ui32Module] = true;
    1a86:	2101      	movs	r1, #1
    1a88:	5519      	strb	r1, [r3, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a8a:	ea4f 3a00 	mov.w	sl, r0, lsl #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1a92:	482e      	ldr	r0, [pc, #184]	; (1b4c <am_hal_iom_i2c_read_nb.part.10+0x13c>)
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a94:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1a98:	00a1      	lsls	r1, r4, #2
    1a9a:	1843      	adds	r3, r0, r1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1a9c:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1aa0:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1aa2:	f8ca 4208 	str.w	r4, [sl, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1aa6:	5042      	str	r2, [r0, r1]
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1aa8:	605f      	str	r7, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1aaa:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1aac:	611e      	str	r6, [r3, #16]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1aae:	2d00      	cmp	r5, #0
    1ab0:	d043      	beq.n	1b3a <am_hal_iom_i2c_read_nb.part.10+0x12a>
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    1ab2:	4f29      	ldr	r7, [pc, #164]	; (1b58 <am_hal_iom_i2c_read_nb.part.10+0x148>)
    ui32Command |= (ui32Options & 0x5C00FF00);
    1ab4:	f028 4623 	bic.w	r6, r8, #2734686208	; 0xa3000000
    1ab8:	f006 20ff 	and.w	r0, r6, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    1abc:	ea07 4109 	and.w	r1, r7, r9, lsl #16
    ui32Command |= (ui32Options & 0x5C00FF00);
    1ac0:	ea41 0c00 	orr.w	ip, r1, r0
    1ac4:	f04c 4300 	orr.w	r3, ip, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    1ac8:	b2ed      	uxtb	r5, r5
    ui32Command |= (ui32Options & 0x5C00FF00);
    1aca:	431d      	orrs	r5, r3
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1acc:	f8ca 5110 	str.w	r5, [sl, #272]	; 0x110
}
    1ad0:	b002      	add	sp, #8
    1ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1ad6:	4a21      	ldr	r2, [pc, #132]	; (1b5c <am_hal_iom_i2c_read_nb.part.10+0x14c>)
    1ad8:	481e      	ldr	r0, [pc, #120]	; (1b54 <am_hal_iom_i2c_read_nb.part.10+0x144>)
    1ada:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
    1ade:	f001 fe5b 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1ae2:	2c02      	cmp	r4, #2
    1ae4:	d1a4      	bne.n	1a30 <am_hal_iom_i2c_read_nb.part.10+0x20>
        if ( ui32Options & AM_HAL_IOM_RAW )
    1ae6:	f018 4f80 	tst.w	r8, #1073741824	; 0x40000000
    1aea:	d015      	beq.n	1b18 <am_hal_iom_i2c_read_nb.part.10+0x108>
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    1aec:	ea4f 0e49 	mov.w	lr, r9, lsl #1
    1af0:	f3c8 7100 	ubfx	r1, r8, #28, #1
    1af4:	f04e 0901 	orr.w	r9, lr, #1
    1af8:	2300      	movs	r3, #0
    1afa:	9101      	str	r1, [sp, #4]
    1afc:	fa5f f089 	uxtb.w	r0, r9
    1b00:	463a      	mov	r2, r7
    1b02:	4629      	mov	r1, r5
    1b04:	9300      	str	r3, [sp, #0]
    1b06:	f001 fe49 	bl	379c <am_hal_i2c_bit_bang_receive>
        if ( pfnCallback )
    1b0a:	2e00      	cmp	r6, #0
    1b0c:	d0a8      	beq.n	1a60 <am_hal_iom_i2c_read_nb.part.10+0x50>
            pfnCallback();
    1b0e:	46b4      	mov	ip, r6
}
    1b10:	b002      	add	sp, #8
    1b12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            pfnCallback();
    1b16:	4760      	bx	ip
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    1b18:	ea4f 0149 	mov.w	r1, r9, lsl #1
    1b1c:	f041 0201 	orr.w	r2, r1, #1
    1b20:	f3c8 7300 	ubfx	r3, r8, #28, #1
    1b24:	2401      	movs	r4, #1
    1b26:	9301      	str	r3, [sp, #4]
    1b28:	b2d0      	uxtb	r0, r2
    1b2a:	4629      	mov	r1, r5
    1b2c:	463a      	mov	r2, r7
    1b2e:	f3c8 2307 	ubfx	r3, r8, #8, #8
    1b32:	9400      	str	r4, [sp, #0]
    1b34:	f001 fe32 	bl	379c <am_hal_i2c_bit_bang_receive>
    1b38:	e7e7      	b.n	1b0a <am_hal_iom_i2c_read_nb.part.10+0xfa>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1b3a:	4a08      	ldr	r2, [pc, #32]	; (1b5c <am_hal_iom_i2c_read_nb.part.10+0x14c>)
    1b3c:	4805      	ldr	r0, [pc, #20]	; (1b54 <am_hal_iom_i2c_read_nb.part.10+0x144>)
    1b3e:	f240 714d 	movw	r1, #1869	; 0x74d
    1b42:	f001 fe29 	bl	3798 <am_hal_debug_error>
    1b46:	e7b4      	b.n	1ab2 <am_hal_iom_i2c_read_nb.part.10+0xa2>
    1b48:	10001138 	.word	0x10001138
    1b4c:	10001674 	.word	0x10001674
    1b50:	00004948 	.word	0x00004948
    1b54:	00004934 	.word	0x00004934
    1b58:	03ff0000 	.word	0x03ff0000
    1b5c:	00004910 	.word	0x00004910

00001b60 <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    1b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    1b68:	461f      	mov	r7, r3
    1b6a:	4606      	mov	r6, r0
    1b6c:	4688      	mov	r8, r1
    1b6e:	4691      	mov	r9, r2
    1b70:	9d08      	ldr	r5, [sp, #32]
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1b72:	f080 80a6 	bcs.w	1cc2 <am_hal_iom_spi_write_nb.part.6+0x162>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1b76:	2b00      	cmp	r3, #0
    1b78:	f000 809c 	beq.w	1cb4 <am_hal_iom_spi_write_nb.part.6+0x154>
    1b7c:	495b      	ldr	r1, [pc, #364]	; (1cec <am_hal_iom_spi_write_nb.part.6+0x18c>)
    while ( g_bIomBusy[ui32Module] );
    1b7e:	5d8a      	ldrb	r2, [r1, r6]
    1b80:	2a00      	cmp	r2, #0
    1b82:	d1fc      	bne.n	1b7e <am_hal_iom_spi_write_nb.part.6+0x1e>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b84:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1b88:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b8a:	3404      	adds	r4, #4
    g_bIomBusy[ui32Module] = true;
    1b8c:	558b      	strb	r3, [r1, r6]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b8e:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1b90:	2f40      	cmp	r7, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b92:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    1b96:	f040 0101 	orr.w	r1, r0, #1
    1b9a:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1b9e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1ba2:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
    1ba6:	f1ca 0c40 	rsb	ip, sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1baa:	f00c 03fc 	and.w	r3, ip, #252	; 0xfc
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1bae:	46ba      	mov	sl, r7
    1bb0:	bf28      	it	cs
    1bb2:	f04f 0a40 	movcs.w	sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1bb6:	459a      	cmp	sl, r3
    1bb8:	f200 808a 	bhi.w	1cd0 <am_hal_iom_spi_write_nb.part.6+0x170>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1bbc:	f1ba 0f00 	cmp.w	sl, #0
    1bc0:	d076      	beq.n	1cb0 <am_hal_iom_spi_write_nb.part.6+0x150>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1bc2:	4648      	mov	r0, r9
    1bc4:	ea6f 0209 	mvn.w	r2, r9
    1bc8:	f850 1b04 	ldr.w	r1, [r0], #4
    1bcc:	6021      	str	r1, [r4, #0]
    1bce:	444a      	add	r2, r9
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1bd0:	eba0 0c09 	sub.w	ip, r0, r9
    1bd4:	4452      	add	r2, sl
    1bd6:	45e2      	cmp	sl, ip
    1bd8:	f3c2 0382 	ubfx	r3, r2, #2, #3
    1bdc:	d943      	bls.n	1c66 <am_hal_iom_spi_write_nb.part.6+0x106>
    1bde:	b323      	cbz	r3, 1c2a <am_hal_iom_spi_write_nb.part.6+0xca>
    1be0:	2b01      	cmp	r3, #1
    1be2:	d01b      	beq.n	1c1c <am_hal_iom_spi_write_nb.part.6+0xbc>
    1be4:	2b02      	cmp	r3, #2
    1be6:	d016      	beq.n	1c16 <am_hal_iom_spi_write_nb.part.6+0xb6>
    1be8:	2b03      	cmp	r3, #3
    1bea:	d011      	beq.n	1c10 <am_hal_iom_spi_write_nb.part.6+0xb0>
    1bec:	2b04      	cmp	r3, #4
    1bee:	d00c      	beq.n	1c0a <am_hal_iom_spi_write_nb.part.6+0xaa>
    1bf0:	2b05      	cmp	r3, #5
    1bf2:	d007      	beq.n	1c04 <am_hal_iom_spi_write_nb.part.6+0xa4>
    1bf4:	2b06      	cmp	r3, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1bf6:	bf1c      	itt	ne
    1bf8:	f850 3b04 	ldrne.w	r3, [r0], #4
    1bfc:	6023      	strne	r3, [r4, #0]
    1bfe:	f850 2b04 	ldr.w	r2, [r0], #4
    1c02:	6022      	str	r2, [r4, #0]
    1c04:	f850 1b04 	ldr.w	r1, [r0], #4
    1c08:	6021      	str	r1, [r4, #0]
    1c0a:	f850 3b04 	ldr.w	r3, [r0], #4
    1c0e:	6023      	str	r3, [r4, #0]
    1c10:	f850 2b04 	ldr.w	r2, [r0], #4
    1c14:	6022      	str	r2, [r4, #0]
    1c16:	f850 1b04 	ldr.w	r1, [r0], #4
    1c1a:	6021      	str	r1, [r4, #0]
    1c1c:	f850 3b04 	ldr.w	r3, [r0], #4
    1c20:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1c22:	eba0 0209 	sub.w	r2, r0, r9
    1c26:	4592      	cmp	sl, r2
    1c28:	d91d      	bls.n	1c66 <am_hal_iom_spi_write_nb.part.6+0x106>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1c2a:	4684      	mov	ip, r0
    1c2c:	3020      	adds	r0, #32
    1c2e:	f85c 1b04 	ldr.w	r1, [ip], #4
    1c32:	6021      	str	r1, [r4, #0]
    1c34:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    1c38:	6023      	str	r3, [r4, #0]
    1c3a:	f8dc 2004 	ldr.w	r2, [ip, #4]
    1c3e:	6022      	str	r2, [r4, #0]
    1c40:	f850 1c14 	ldr.w	r1, [r0, #-20]
    1c44:	6021      	str	r1, [r4, #0]
    1c46:	f850 3c10 	ldr.w	r3, [r0, #-16]
    1c4a:	6023      	str	r3, [r4, #0]
    1c4c:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    1c50:	6022      	str	r2, [r4, #0]
    1c52:	f850 1c08 	ldr.w	r1, [r0, #-8]
    1c56:	6021      	str	r1, [r4, #0]
    1c58:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1c5c:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1c5e:	eba0 0209 	sub.w	r2, r0, r9
    1c62:	4592      	cmp	sl, r2
    1c64:	d8e1      	bhi.n	1c2a <am_hal_iom_spi_write_nb.part.6+0xca>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1c66:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    1c6a:	0086      	lsls	r6, r0, #2
    1c6c:	4a20      	ldr	r2, [pc, #128]	; (1cf0 <am_hal_iom_spi_write_nb.part.6+0x190>)
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1c70:	2101      	movs	r1, #1
    1c72:	1993      	adds	r3, r2, r6
    1c74:	5191      	str	r1, [r2, r6]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1c76:	f02a 0203 	bic.w	r2, sl, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1c7a:	eba7 060a 	sub.w	r6, r7, sl
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1c7e:	444a      	add	r2, r9
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1c80:	6118      	str	r0, [r3, #16]
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    1c82:	60dd      	str	r5, [r3, #12]
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1c84:	609e      	str	r6, [r3, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1c86:	605a      	str	r2, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1c88:	b34f      	cbz	r7, 1cde <am_hal_iom_spi_write_nb.part.6+0x17e>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1c8a:	ea4f 4808 	mov.w	r8, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    1c8e:	f025 4523 	bic.w	r5, r5, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1c92:	f408 23e0 	and.w	r3, r8, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1c96:	f005 21ff 	and.w	r1, r5, #4278255360	; 0xff00ff00
    ui32Command |= (ui32NumBytes & 0xFF);
    1c9a:	b2fa      	uxtb	r2, r7
    ui32Command |= ui32Options & 0x5C00FF00;
    1c9c:	430b      	orrs	r3, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1c9e:	03ff      	lsls	r7, r7, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1ca0:	4313      	orrs	r3, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1ca2:	f007 66f0 	and.w	r6, r7, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1ca6:	4333      	orrs	r3, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1ca8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    1cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1cb4:	4a0f      	ldr	r2, [pc, #60]	; (1cf4 <am_hal_iom_spi_write_nb.part.6+0x194>)
    1cb6:	4810      	ldr	r0, [pc, #64]	; (1cf8 <am_hal_iom_spi_write_nb.part.6+0x198>)
    1cb8:	f240 313f 	movw	r1, #831	; 0x33f
    1cbc:	f001 fd6c 	bl	3798 <am_hal_debug_error>
    1cc0:	e75c      	b.n	1b7c <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1cc2:	4a0e      	ldr	r2, [pc, #56]	; (1cfc <am_hal_iom_spi_write_nb.part.6+0x19c>)
    1cc4:	480c      	ldr	r0, [pc, #48]	; (1cf8 <am_hal_iom_spi_write_nb.part.6+0x198>)
    1cc6:	f240 313d 	movw	r1, #829	; 0x33d
    1cca:	f001 fd65 	bl	3798 <am_hal_debug_error>
    1cce:	e755      	b.n	1b7c <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1cd0:	4a0b      	ldr	r2, [pc, #44]	; (1d00 <am_hal_iom_spi_write_nb.part.6+0x1a0>)
    1cd2:	4809      	ldr	r0, [pc, #36]	; (1cf8 <am_hal_iom_spi_write_nb.part.6+0x198>)
    1cd4:	f240 71d6 	movw	r1, #2006	; 0x7d6
    1cd8:	f001 fd5e 	bl	3798 <am_hal_debug_error>
    1cdc:	e771      	b.n	1bc2 <am_hal_iom_spi_write_nb.part.6+0x62>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1cde:	4a05      	ldr	r2, [pc, #20]	; (1cf4 <am_hal_iom_spi_write_nb.part.6+0x194>)
    1ce0:	4805      	ldr	r0, [pc, #20]	; (1cf8 <am_hal_iom_spi_write_nb.part.6+0x198>)
    1ce2:	f240 4104 	movw	r1, #1028	; 0x404
    1ce6:	f001 fd57 	bl	3798 <am_hal_debug_error>
    1cea:	e7ce      	b.n	1c8a <am_hal_iom_spi_write_nb.part.6+0x12a>
    1cec:	10001138 	.word	0x10001138
    1cf0:	10001674 	.word	0x10001674
    1cf4:	00004910 	.word	0x00004910
    1cf8:	00004934 	.word	0x00004934
    1cfc:	00004a24 	.word	0x00004a24
    1d00:	00004a3c 	.word	0x00004a3c

00001d04 <am_hal_iom_i2c_write_nq.part.7>:
am_hal_iom_i2c_write_nq(uint32_t ui32Module, uint32_t ui32BusAddress,
    1d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d08:	4606      	mov	r6, r0
    1d0a:	b085      	sub	sp, #20
    1d0c:	468b      	mov	fp, r1
    1d0e:	4617      	mov	r7, r2
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1d10:	2b00      	cmp	r3, #0
    1d12:	f000 8154 	beq.w	1fbe <am_hal_iom_i2c_write_nq.part.7+0x2ba>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1d16:	2802      	cmp	r0, #2
    1d18:	f000 815c 	beq.w	1fd4 <am_hal_iom_i2c_write_nq.part.7+0x2d0>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    1d1c:	2bff      	cmp	r3, #255	; 0xff
    1d1e:	f200 80bc 	bhi.w	1e9a <am_hal_iom_i2c_write_nq.part.7+0x196>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1d22:	2e01      	cmp	r6, #1
    1d24:	f240 80c4 	bls.w	1eb0 <am_hal_iom_i2c_write_nq.part.7+0x1ac>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d28:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    1d2c:	3404      	adds	r4, #4
    1d2e:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1d30:	2500      	movs	r5, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d32:	f8d4 8200 	ldr.w	r8, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1d36:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1d3a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1d3e:	2b40      	cmp	r3, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1d40:	f042 0101 	orr.w	r1, r2, #1
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1d44:	461d      	mov	r5, r3
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1d46:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d4a:	f504 7900 	add.w	r9, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1d4e:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1d52:	bf28      	it	cs
    1d54:	2540      	movcs	r5, #64	; 0x40
    pui32Data += ui32TransferSize >> 2;
    1d56:	f025 0e03 	bic.w	lr, r5, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1d5a:	1b5b      	subs	r3, r3, r5
    pui32Data += ui32TransferSize >> 2;
    1d5c:	4477      	add	r7, lr
    1d5e:	bf08      	it	eq
    1d60:	f504 7b01 	addeq.w	fp, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1d64:	d07e      	beq.n	1e64 <am_hal_iom_i2c_write_nq.part.7+0x160>
    1d66:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    1d6a:	07c1      	lsls	r1, r0, #31
    1d6c:	f504 7b01 	add.w	fp, r4, #516	; 0x204
    1d70:	d478      	bmi.n	1e64 <am_hal_iom_i2c_write_nq.part.7+0x160>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1d72:	46d4      	mov	ip, sl
    1d74:	46c2      	mov	sl, r8
    1d76:	4698      	mov	r8, r3
    1d78:	4663      	mov	r3, ip
    1d7a:	e003      	b.n	1d84 <am_hal_iom_i2c_write_nq.part.7+0x80>
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1d7c:	f8db 2000 	ldr.w	r2, [fp]
    1d80:	07d2      	lsls	r2, r2, #31
    1d82:	d46d      	bmi.n	1e60 <am_hal_iom_i2c_write_nq.part.7+0x15c>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1d84:	2e01      	cmp	r6, #1
    1d86:	d8f9      	bhi.n	1d7c <am_hal_iom_i2c_write_nq.part.7+0x78>
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1d88:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
    1d8c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1d90:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    1d94:	f1c1 0040 	rsb	r0, r1, #64	; 0x40
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    1d98:	f000 05fc 	and.w	r5, r0, #252	; 0xfc
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1d9c:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
    1da0:	4545      	cmp	r5, r8
    1da2:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    1da6:	bf28      	it	cs
    1da8:	4645      	movcs	r5, r8
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1daa:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
    1dae:	4295      	cmp	r5, r2
    1db0:	f200 8126 	bhi.w	2000 <am_hal_iom_i2c_write_nq.part.7+0x2fc>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1db4:	2d00      	cmp	r5, #0
    1db6:	d0e1      	beq.n	1d7c <am_hal_iom_i2c_write_nq.part.7+0x78>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1db8:	463a      	mov	r2, r7
    1dba:	43f9      	mvns	r1, r7
    1dbc:	f852 0b04 	ldr.w	r0, [r2], #4
    1dc0:	6020      	str	r0, [r4, #0]
    1dc2:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1dc4:	1bd0      	subs	r0, r2, r7
    1dc6:	4429      	add	r1, r5
    1dc8:	42a8      	cmp	r0, r5
    1dca:	f3c1 0182 	ubfx	r1, r1, #2, #3
    1dce:	d241      	bcs.n	1e54 <am_hal_iom_i2c_write_nq.part.7+0x150>
    1dd0:	b319      	cbz	r1, 1e1a <am_hal_iom_i2c_write_nq.part.7+0x116>
    1dd2:	2901      	cmp	r1, #1
    1dd4:	d01b      	beq.n	1e0e <am_hal_iom_i2c_write_nq.part.7+0x10a>
    1dd6:	2902      	cmp	r1, #2
    1dd8:	d016      	beq.n	1e08 <am_hal_iom_i2c_write_nq.part.7+0x104>
    1dda:	2903      	cmp	r1, #3
    1ddc:	d011      	beq.n	1e02 <am_hal_iom_i2c_write_nq.part.7+0xfe>
    1dde:	2904      	cmp	r1, #4
    1de0:	d00c      	beq.n	1dfc <am_hal_iom_i2c_write_nq.part.7+0xf8>
    1de2:	2905      	cmp	r1, #5
    1de4:	d007      	beq.n	1df6 <am_hal_iom_i2c_write_nq.part.7+0xf2>
    1de6:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1de8:	bf1c      	itt	ne
    1dea:	f852 1b04 	ldrne.w	r1, [r2], #4
    1dee:	6021      	strne	r1, [r4, #0]
    1df0:	f852 0b04 	ldr.w	r0, [r2], #4
    1df4:	6020      	str	r0, [r4, #0]
    1df6:	f852 1b04 	ldr.w	r1, [r2], #4
    1dfa:	6021      	str	r1, [r4, #0]
    1dfc:	f852 0b04 	ldr.w	r0, [r2], #4
    1e00:	6020      	str	r0, [r4, #0]
    1e02:	f852 1b04 	ldr.w	r1, [r2], #4
    1e06:	6021      	str	r1, [r4, #0]
    1e08:	f852 0b04 	ldr.w	r0, [r2], #4
    1e0c:	6020      	str	r0, [r4, #0]
    1e0e:	f852 1b04 	ldr.w	r1, [r2], #4
    1e12:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1e14:	1bd0      	subs	r0, r2, r7
    1e16:	42a8      	cmp	r0, r5
    1e18:	d21c      	bcs.n	1e54 <am_hal_iom_i2c_write_nq.part.7+0x150>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1e1a:	4696      	mov	lr, r2
    1e1c:	3220      	adds	r2, #32
    1e1e:	f85e 1b04 	ldr.w	r1, [lr], #4
    1e22:	6021      	str	r1, [r4, #0]
    1e24:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    1e28:	6020      	str	r0, [r4, #0]
    1e2a:	f8de 1004 	ldr.w	r1, [lr, #4]
    1e2e:	6021      	str	r1, [r4, #0]
    1e30:	f852 0c14 	ldr.w	r0, [r2, #-20]
    1e34:	6020      	str	r0, [r4, #0]
    1e36:	f852 1c10 	ldr.w	r1, [r2, #-16]
    1e3a:	6021      	str	r1, [r4, #0]
    1e3c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    1e40:	6020      	str	r0, [r4, #0]
    1e42:	f852 1c08 	ldr.w	r1, [r2, #-8]
    1e46:	6021      	str	r1, [r4, #0]
    1e48:	f852 0c04 	ldr.w	r0, [r2, #-4]
    1e4c:	6020      	str	r0, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1e4e:	1bd1      	subs	r1, r2, r7
    1e50:	42a9      	cmp	r1, r5
    1e52:	d3e2      	bcc.n	1e1a <am_hal_iom_i2c_write_nq.part.7+0x116>
        pui32Data += ui32TransferSize >> 2;
    1e54:	f025 0c03 	bic.w	ip, r5, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1e58:	ebb8 0805 	subs.w	r8, r8, r5
        pui32Data += ui32TransferSize >> 2;
    1e5c:	4467      	add	r7, ip
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1e5e:	d18d      	bne.n	1d7c <am_hal_iom_i2c_write_nq.part.7+0x78>
    1e60:	46d0      	mov	r8, sl
    1e62:	469a      	mov	sl, r3
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1e64:	4f7e      	ldr	r7, [pc, #504]	; (2060 <am_hal_iom_i2c_write_nq.part.7+0x35c>)
    1e66:	2301      	movs	r3, #1
    1e68:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
    1e6c:	4659      	mov	r1, fp
    1e6e:	461a      	mov	r2, r3
    1e70:	f7ff fc86 	bl	1780 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1e74:	f048 0601 	orr.w	r6, r8, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    1e78:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1e7a:	f8ca 6000 	str.w	r6, [sl]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1e7e:	4604      	mov	r4, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1e80:	f8c9 8000 	str.w	r8, [r9]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    1e84:	d005      	beq.n	1e92 <am_hal_iom_i2c_write_nq.part.7+0x18e>
    1e86:	4a77      	ldr	r2, [pc, #476]	; (2064 <am_hal_iom_i2c_write_nq.part.7+0x360>)
    1e88:	4877      	ldr	r0, [pc, #476]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    1e8a:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    1e8e:	f001 fc83 	bl	3798 <am_hal_debug_error>
}
    1e92:	4620      	mov	r0, r4
    1e94:	b005      	add	sp, #20
    1e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    1e9a:	4a74      	ldr	r2, [pc, #464]	; (206c <am_hal_iom_i2c_write_nq.part.7+0x368>)
    1e9c:	4872      	ldr	r0, [pc, #456]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    1e9e:	9303      	str	r3, [sp, #12]
    1ea0:	f240 415d 	movw	r1, #1117	; 0x45d
    1ea4:	f001 fc78 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1ea8:	2e01      	cmp	r6, #1
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    1eaa:	9b03      	ldr	r3, [sp, #12]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1eac:	f63f af3c 	bhi.w	1d28 <am_hal_iom_i2c_write_nq.part.7+0x24>
    1eb0:	486f      	ldr	r0, [pc, #444]	; (2070 <am_hal_iom_i2c_write_nq.part.7+0x36c>)
    while ( g_bIomBusy[ui32Module] );
    1eb2:	5d82      	ldrb	r2, [r0, r6]
    1eb4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    1eb8:	2a00      	cmp	r2, #0
    1eba:	d1fa      	bne.n	1eb2 <am_hal_iom_i2c_write_nq.part.7+0x1ae>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1ebc:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    1ec0:	3404      	adds	r4, #4
    1ec2:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1ec4:	2b40      	cmp	r3, #64	; 0x40
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1ec6:	f8d4 8200 	ldr.w	r8, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1eca:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1ece:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    1ed2:	f040 0201 	orr.w	r2, r0, #1
    1ed6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1eda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    1ede:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    1ee2:	f1c0 0940 	rsb	r9, r0, #64	; 0x40
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1ee6:	461d      	mov	r5, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1ee8:	f009 0cfc 	and.w	ip, r9, #252	; 0xfc
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1eec:	bf28      	it	cs
    1eee:	2540      	movcs	r5, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1ef0:	45ac      	cmp	ip, r5
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1ef2:	f504 7900 	add.w	r9, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1ef6:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1efa:	f0c0 80a7 	bcc.w	204c <am_hal_iom_i2c_write_nq.part.7+0x348>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1efe:	2d00      	cmp	r5, #0
    1f00:	d04d      	beq.n	1f9e <am_hal_iom_i2c_write_nq.part.7+0x29a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f02:	463a      	mov	r2, r7
    1f04:	43f9      	mvns	r1, r7
    1f06:	f852 0b04 	ldr.w	r0, [r2], #4
    1f0a:	6020      	str	r0, [r4, #0]
    1f0c:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f0e:	1bd0      	subs	r0, r2, r7
    1f10:	4429      	add	r1, r5
    1f12:	42a8      	cmp	r0, r5
    1f14:	f3c1 0182 	ubfx	r1, r1, #2, #3
    1f18:	d241      	bcs.n	1f9e <am_hal_iom_i2c_write_nq.part.7+0x29a>
    1f1a:	b319      	cbz	r1, 1f64 <am_hal_iom_i2c_write_nq.part.7+0x260>
    1f1c:	2901      	cmp	r1, #1
    1f1e:	d01b      	beq.n	1f58 <am_hal_iom_i2c_write_nq.part.7+0x254>
    1f20:	2902      	cmp	r1, #2
    1f22:	d016      	beq.n	1f52 <am_hal_iom_i2c_write_nq.part.7+0x24e>
    1f24:	2903      	cmp	r1, #3
    1f26:	d011      	beq.n	1f4c <am_hal_iom_i2c_write_nq.part.7+0x248>
    1f28:	2904      	cmp	r1, #4
    1f2a:	d00c      	beq.n	1f46 <am_hal_iom_i2c_write_nq.part.7+0x242>
    1f2c:	2905      	cmp	r1, #5
    1f2e:	d007      	beq.n	1f40 <am_hal_iom_i2c_write_nq.part.7+0x23c>
    1f30:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f32:	bf1c      	itt	ne
    1f34:	f852 1b04 	ldrne.w	r1, [r2], #4
    1f38:	6021      	strne	r1, [r4, #0]
    1f3a:	f852 0b04 	ldr.w	r0, [r2], #4
    1f3e:	6020      	str	r0, [r4, #0]
    1f40:	f852 1b04 	ldr.w	r1, [r2], #4
    1f44:	6021      	str	r1, [r4, #0]
    1f46:	f852 0b04 	ldr.w	r0, [r2], #4
    1f4a:	6020      	str	r0, [r4, #0]
    1f4c:	f852 1b04 	ldr.w	r1, [r2], #4
    1f50:	6021      	str	r1, [r4, #0]
    1f52:	f852 0b04 	ldr.w	r0, [r2], #4
    1f56:	6020      	str	r0, [r4, #0]
    1f58:	f852 1b04 	ldr.w	r1, [r2], #4
    1f5c:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f5e:	1bd0      	subs	r0, r2, r7
    1f60:	42a8      	cmp	r0, r5
    1f62:	d21c      	bcs.n	1f9e <am_hal_iom_i2c_write_nq.part.7+0x29a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f64:	4696      	mov	lr, r2
    1f66:	3220      	adds	r2, #32
    1f68:	f85e 1b04 	ldr.w	r1, [lr], #4
    1f6c:	6021      	str	r1, [r4, #0]
    1f6e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    1f72:	6020      	str	r0, [r4, #0]
    1f74:	f8de 1004 	ldr.w	r1, [lr, #4]
    1f78:	6021      	str	r1, [r4, #0]
    1f7a:	f852 0c14 	ldr.w	r0, [r2, #-20]
    1f7e:	6020      	str	r0, [r4, #0]
    1f80:	f852 1c10 	ldr.w	r1, [r2, #-16]
    1f84:	6021      	str	r1, [r4, #0]
    1f86:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    1f8a:	6020      	str	r0, [r4, #0]
    1f8c:	f852 1c08 	ldr.w	r1, [r2, #-8]
    1f90:	6021      	str	r1, [r4, #0]
    1f92:	f852 0c04 	ldr.w	r0, [r2, #-4]
    1f96:	6020      	str	r0, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f98:	1bd1      	subs	r1, r2, r7
    1f9a:	42a9      	cmp	r1, r5
    1f9c:	d3e2      	bcc.n	1f64 <am_hal_iom_i2c_write_nq.part.7+0x260>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d04b      	beq.n	203a <am_hal_iom_i2c_write_nq.part.7+0x336>
    ui32Command |= (ui32Options & 0x5C00FF00);
    1fa2:	980e      	ldr	r0, [sp, #56]	; 0x38
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    1fa4:	4a33      	ldr	r2, [pc, #204]	; (2074 <am_hal_iom_i2c_write_nq.part.7+0x370>)
    ui32Command |= (ui32Options & 0x5C00FF00);
    1fa6:	f020 4c23 	bic.w	ip, r0, #2734686208	; 0xa3000000
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    1faa:	ea02 420b 	and.w	r2, r2, fp, lsl #16
    ui32Command |= (ui32Options & 0x5C00FF00);
    1fae:	f00c 21ff 	and.w	r1, ip, #4278255360	; 0xff00ff00
    1fb2:	430a      	orrs	r2, r1
    ui32Command |= (ui32NumBytes & 0xFF);
    1fb4:	b2d8      	uxtb	r0, r3
    ui32Command |= (ui32Options & 0x5C00FF00);
    1fb6:	4302      	orrs	r2, r0
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1fb8:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    1fbc:	e6cb      	b.n	1d56 <am_hal_iom_i2c_write_nq.part.7+0x52>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1fbe:	4a2e      	ldr	r2, [pc, #184]	; (2078 <am_hal_iom_i2c_write_nq.part.7+0x374>)
    1fc0:	4829      	ldr	r0, [pc, #164]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    1fc2:	9303      	str	r3, [sp, #12]
    1fc4:	f240 413d 	movw	r1, #1085	; 0x43d
    1fc8:	f001 fbe6 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1fcc:	2e02      	cmp	r6, #2
    1fce:	9b03      	ldr	r3, [sp, #12]
    1fd0:	f47f aea7 	bne.w	1d22 <am_hal_iom_i2c_write_nq.part.7+0x1e>
        if ( ui32Options & AM_HAL_IOM_RAW )
    1fd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1fd6:	f015 4480 	ands.w	r4, r5, #1073741824	; 0x40000000
    1fda:	d01a      	beq.n	2012 <am_hal_iom_i2c_write_nq.part.7+0x30e>
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1fdc:	2400      	movs	r4, #0
    1fde:	ea4f 094b 	mov.w	r9, fp, lsl #1
    1fe2:	f3c5 7500 	ubfx	r5, r5, #28, #1
    1fe6:	4619      	mov	r1, r3
    1fe8:	f009 00fe 	and.w	r0, r9, #254	; 0xfe
    1fec:	463a      	mov	r2, r7
    1fee:	e88d 0030 	stmia.w	sp, {r4, r5}
    1ff2:	4623      	mov	r3, r4
    1ff4:	f002 f824 	bl	4040 <am_hal_i2c_bit_bang_send>
}
    1ff8:	4620      	mov	r0, r4
    1ffa:	b005      	add	sp, #20
    1ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2000:	4a1e      	ldr	r2, [pc, #120]	; (207c <am_hal_iom_i2c_write_nq.part.7+0x378>)
    2002:	4819      	ldr	r0, [pc, #100]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    2004:	9303      	str	r3, [sp, #12]
    2006:	f240 71d6 	movw	r1, #2006	; 0x7d6
    200a:	f001 fbc5 	bl	3798 <am_hal_debug_error>
    200e:	9b03      	ldr	r3, [sp, #12]
    2010:	e6d2      	b.n	1db8 <am_hal_iom_i2c_write_nq.part.7+0xb4>
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2012:	4619      	mov	r1, r3
    2014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2016:	f3c5 7600 	ubfx	r6, r5, #28, #1
    201a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    201e:	2501      	movs	r5, #1
    2020:	f00b 00fe 	and.w	r0, fp, #254	; 0xfe
    2024:	463a      	mov	r2, r7
    2026:	e88d 0060 	stmia.w	sp, {r5, r6}
    202a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    202e:	f002 f807 	bl	4040 <am_hal_i2c_bit_bang_send>
}
    2032:	4620      	mov	r0, r4
    2034:	b005      	add	sp, #20
    2036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    203a:	4a0f      	ldr	r2, [pc, #60]	; (2078 <am_hal_iom_i2c_write_nq.part.7+0x374>)
    203c:	480a      	ldr	r0, [pc, #40]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    203e:	9303      	str	r3, [sp, #12]
    2040:	f240 714d 	movw	r1, #1869	; 0x74d
    2044:	f001 fba8 	bl	3798 <am_hal_debug_error>
    2048:	9b03      	ldr	r3, [sp, #12]
    204a:	e7aa      	b.n	1fa2 <am_hal_iom_i2c_write_nq.part.7+0x29e>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    204c:	4a0b      	ldr	r2, [pc, #44]	; (207c <am_hal_iom_i2c_write_nq.part.7+0x378>)
    204e:	4806      	ldr	r0, [pc, #24]	; (2068 <am_hal_iom_i2c_write_nq.part.7+0x364>)
    2050:	9303      	str	r3, [sp, #12]
    2052:	f240 71d6 	movw	r1, #2006	; 0x7d6
    2056:	f001 fb9f 	bl	3798 <am_hal_debug_error>
    205a:	9b03      	ldr	r3, [sp, #12]
    205c:	e751      	b.n	1f02 <am_hal_iom_i2c_write_nq.part.7+0x1fe>
    205e:	bf00      	nop
    2060:	1000101c 	.word	0x1000101c
    2064:	00004998 	.word	0x00004998
    2068:	00004934 	.word	0x00004934
    206c:	00004948 	.word	0x00004948
    2070:	10001138 	.word	0x10001138
    2074:	03ff0000 	.word	0x03ff0000
    2078:	00004910 	.word	0x00004910
    207c:	00004a3c 	.word	0x00004a3c

00002080 <am_hal_iom_i2c_write_nb.part.9>:
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    2080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2084:	b083      	sub	sp, #12
    2086:	4604      	mov	r4, r0
    2088:	4689      	mov	r9, r1
    208a:	4617      	mov	r7, r2
    208c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    2090:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2094:	461d      	mov	r5, r3
    2096:	2b00      	cmp	r3, #0
    2098:	f000 80b1 	beq.w	21fe <am_hal_iom_i2c_write_nb.part.9+0x17e>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    209c:	2802      	cmp	r0, #2
    209e:	f000 80b7 	beq.w	2210 <am_hal_iom_i2c_write_nb.part.9+0x190>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    20a2:	2bff      	cmp	r3, #255	; 0xff
    20a4:	d810      	bhi.n	20c8 <am_hal_iom_i2c_write_nb.part.9+0x48>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    20a6:	2c01      	cmp	r4, #1
    20a8:	d916      	bls.n	20d8 <am_hal_iom_i2c_write_nb.part.9+0x58>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20aa:	f504 26a0 	add.w	r6, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    20ae:	4f74      	ldr	r7, [pc, #464]	; (2280 <am_hal_iom_i2c_write_nb.part.9+0x200>)
    20b0:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20b2:	3604      	adds	r6, #4
    20b4:	0333      	lsls	r3, r6, #12
    g_bIomBusy[ui32Module] = true;
    20b6:	5538      	strb	r0, [r7, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20b8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    20bc:	4304      	orrs	r4, r0
    20be:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
}
    20c2:	b003      	add	sp, #12
    20c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    20c8:	4a6e      	ldr	r2, [pc, #440]	; (2284 <am_hal_iom_i2c_write_nb.part.9+0x204>)
    20ca:	486f      	ldr	r0, [pc, #444]	; (2288 <am_hal_iom_i2c_write_nb.part.9+0x208>)
    20cc:	f240 6182 	movw	r1, #1666	; 0x682
    20d0:	f001 fb62 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    20d4:	2c01      	cmp	r4, #1
    20d6:	d8e8      	bhi.n	20aa <am_hal_iom_i2c_write_nb.part.9+0x2a>
    20d8:	4b69      	ldr	r3, [pc, #420]	; (2280 <am_hal_iom_i2c_write_nb.part.9+0x200>)
    while ( g_bIomBusy[ui32Module] );
    20da:	5d1a      	ldrb	r2, [r3, r4]
    20dc:	2a00      	cmp	r2, #0
    20de:	d1fc      	bne.n	20da <am_hal_iom_i2c_write_nb.part.9+0x5a>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20e0:	f504 26a0 	add.w	r6, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    20e4:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20e6:	3604      	adds	r6, #4
    g_bIomBusy[ui32Module] = true;
    20e8:	5518      	strb	r0, [r3, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20ea:	0336      	lsls	r6, r6, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    20ec:	2d40      	cmp	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    20ee:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
    20f2:	ea41 0100 	orr.w	r1, r1, r0
    20f6:	f8c6 1208 	str.w	r1, [r6, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    20fa:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    20fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    2102:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    2106:	46ab      	mov	fp, r5
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2108:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    210c:	bf28      	it	cs
    210e:	f04f 0b40 	movcs.w	fp, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2112:	458b      	cmp	fp, r1
    2114:	f200 80a5 	bhi.w	2262 <am_hal_iom_i2c_write_nb.part.9+0x1e2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2118:	f1bb 0f00 	cmp.w	fp, #0
    211c:	d0d1      	beq.n	20c2 <am_hal_iom_i2c_write_nb.part.9+0x42>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    211e:	463b      	mov	r3, r7
    2120:	43fa      	mvns	r2, r7
    2122:	f853 0b04 	ldr.w	r0, [r3], #4
    2126:	6030      	str	r0, [r6, #0]
    2128:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    212a:	1bd9      	subs	r1, r3, r7
    212c:	445a      	add	r2, fp
    212e:	458b      	cmp	fp, r1
    2130:	f3c2 0282 	ubfx	r2, r2, #2, #3
    2134:	d941      	bls.n	21ba <am_hal_iom_i2c_write_nb.part.9+0x13a>
    2136:	b31a      	cbz	r2, 2180 <am_hal_iom_i2c_write_nb.part.9+0x100>
    2138:	2a01      	cmp	r2, #1
    213a:	d01b      	beq.n	2174 <am_hal_iom_i2c_write_nb.part.9+0xf4>
    213c:	2a02      	cmp	r2, #2
    213e:	d016      	beq.n	216e <am_hal_iom_i2c_write_nb.part.9+0xee>
    2140:	2a03      	cmp	r2, #3
    2142:	d011      	beq.n	2168 <am_hal_iom_i2c_write_nb.part.9+0xe8>
    2144:	2a04      	cmp	r2, #4
    2146:	d00c      	beq.n	2162 <am_hal_iom_i2c_write_nb.part.9+0xe2>
    2148:	2a05      	cmp	r2, #5
    214a:	d007      	beq.n	215c <am_hal_iom_i2c_write_nb.part.9+0xdc>
    214c:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    214e:	bf1c      	itt	ne
    2150:	f853 2b04 	ldrne.w	r2, [r3], #4
    2154:	6032      	strne	r2, [r6, #0]
    2156:	f853 0b04 	ldr.w	r0, [r3], #4
    215a:	6030      	str	r0, [r6, #0]
    215c:	f853 1b04 	ldr.w	r1, [r3], #4
    2160:	6031      	str	r1, [r6, #0]
    2162:	f853 2b04 	ldr.w	r2, [r3], #4
    2166:	6032      	str	r2, [r6, #0]
    2168:	f853 0b04 	ldr.w	r0, [r3], #4
    216c:	6030      	str	r0, [r6, #0]
    216e:	f853 1b04 	ldr.w	r1, [r3], #4
    2172:	6031      	str	r1, [r6, #0]
    2174:	f853 2b04 	ldr.w	r2, [r3], #4
    2178:	6032      	str	r2, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    217a:	1bd8      	subs	r0, r3, r7
    217c:	4583      	cmp	fp, r0
    217e:	d91c      	bls.n	21ba <am_hal_iom_i2c_write_nb.part.9+0x13a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2180:	469c      	mov	ip, r3
    2182:	3320      	adds	r3, #32
    2184:	f85c 1b04 	ldr.w	r1, [ip], #4
    2188:	6031      	str	r1, [r6, #0]
    218a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    218e:	6032      	str	r2, [r6, #0]
    2190:	f8dc 0004 	ldr.w	r0, [ip, #4]
    2194:	6030      	str	r0, [r6, #0]
    2196:	f853 1c14 	ldr.w	r1, [r3, #-20]
    219a:	6031      	str	r1, [r6, #0]
    219c:	f853 2c10 	ldr.w	r2, [r3, #-16]
    21a0:	6032      	str	r2, [r6, #0]
    21a2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    21a6:	6030      	str	r0, [r6, #0]
    21a8:	f853 1c08 	ldr.w	r1, [r3, #-8]
    21ac:	6031      	str	r1, [r6, #0]
    21ae:	f853 2c04 	ldr.w	r2, [r3, #-4]
    21b2:	6032      	str	r2, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    21b4:	1bd8      	subs	r0, r3, r7
    21b6:	4583      	cmp	fp, r0
    21b8:	d8e2      	bhi.n	2180 <am_hal_iom_i2c_write_nb.part.9+0x100>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    21ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    21be:	4a33      	ldr	r2, [pc, #204]	; (228c <am_hal_iom_i2c_write_nb.part.9+0x20c>)
    21c0:	00a0      	lsls	r0, r4, #2
    21c2:	1813      	adds	r3, r2, r0
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    21c4:	f02b 0c03 	bic.w	ip, fp, #3
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    21c8:	2101      	movs	r1, #1
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    21ca:	eba5 040b 	sub.w	r4, r5, fp
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    21ce:	4467      	add	r7, ip
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    21d0:	5011      	str	r1, [r2, r0]
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    21d2:	f8c3 a010 	str.w	sl, [r3, #16]
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    21d6:	609c      	str	r4, [r3, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    21d8:	605f      	str	r7, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    21da:	2d00      	cmp	r5, #0
    21dc:	d048      	beq.n	2270 <am_hal_iom_i2c_write_nb.part.9+0x1f0>
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    21de:	4f2c      	ldr	r7, [pc, #176]	; (2290 <am_hal_iom_i2c_write_nb.part.9+0x210>)
    ui32Command |= (ui32Options & 0x5C00FF00);
    21e0:	f028 4223 	bic.w	r2, r8, #2734686208	; 0xa3000000
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    21e4:	ea07 4309 	and.w	r3, r7, r9, lsl #16
    ui32Command |= (ui32Options & 0x5C00FF00);
    21e8:	f002 20ff 	and.w	r0, r2, #4278255360	; 0xff00ff00
    ui32Command |= (ui32NumBytes & 0xFF);
    21ec:	fa5f f985 	uxtb.w	r9, r5
    ui32Command |= (ui32Options & 0x5C00FF00);
    21f0:	ea43 0500 	orr.w	r5, r3, r0
    21f4:	ea45 0109 	orr.w	r1, r5, r9
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    21f8:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    21fc:	e761      	b.n	20c2 <am_hal_iom_i2c_write_nb.part.9+0x42>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    21fe:	4a25      	ldr	r2, [pc, #148]	; (2294 <am_hal_iom_i2c_write_nb.part.9+0x214>)
    2200:	4821      	ldr	r0, [pc, #132]	; (2288 <am_hal_iom_i2c_write_nb.part.9+0x208>)
    2202:	f240 6159 	movw	r1, #1625	; 0x659
    2206:	f001 fac7 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    220a:	2c02      	cmp	r4, #2
    220c:	f47f af4b 	bne.w	20a6 <am_hal_iom_i2c_write_nb.part.9+0x26>
        if ( ui32Options & AM_HAL_IOM_RAW )
    2210:	f018 4f80 	tst.w	r8, #1073741824	; 0x40000000
    2214:	d015      	beq.n	2242 <am_hal_iom_i2c_write_nb.part.9+0x1c2>
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2216:	ea4f 0149 	mov.w	r1, r9, lsl #1
    221a:	f3c8 7200 	ubfx	r2, r8, #28, #1
    221e:	2300      	movs	r3, #0
    2220:	f001 00fe 	and.w	r0, r1, #254	; 0xfe
    2224:	9201      	str	r2, [sp, #4]
    2226:	4629      	mov	r1, r5
    2228:	463a      	mov	r2, r7
    222a:	9300      	str	r3, [sp, #0]
    222c:	f001 ff08 	bl	4040 <am_hal_i2c_bit_bang_send>
        if ( pfnCallback )
    2230:	f1ba 0f00 	cmp.w	sl, #0
    2234:	f43f af45 	beq.w	20c2 <am_hal_iom_i2c_write_nb.part.9+0x42>
            pfnCallback();
    2238:	46d4      	mov	ip, sl
}
    223a:	b003      	add	sp, #12
    223c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pfnCallback();
    2240:	4760      	bx	ip
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2242:	ea4f 0249 	mov.w	r2, r9, lsl #1
    2246:	f3c8 7600 	ubfx	r6, r8, #28, #1
    224a:	2401      	movs	r4, #1
    224c:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
    2250:	4629      	mov	r1, r5
    2252:	463a      	mov	r2, r7
    2254:	9601      	str	r6, [sp, #4]
    2256:	f3c8 2307 	ubfx	r3, r8, #8, #8
    225a:	9400      	str	r4, [sp, #0]
    225c:	f001 fef0 	bl	4040 <am_hal_i2c_bit_bang_send>
    2260:	e7e6      	b.n	2230 <am_hal_iom_i2c_write_nb.part.9+0x1b0>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2262:	4a0d      	ldr	r2, [pc, #52]	; (2298 <am_hal_iom_i2c_write_nb.part.9+0x218>)
    2264:	4808      	ldr	r0, [pc, #32]	; (2288 <am_hal_iom_i2c_write_nb.part.9+0x208>)
    2266:	f240 71d6 	movw	r1, #2006	; 0x7d6
    226a:	f001 fa95 	bl	3798 <am_hal_debug_error>
    226e:	e756      	b.n	211e <am_hal_iom_i2c_write_nb.part.9+0x9e>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2270:	4a08      	ldr	r2, [pc, #32]	; (2294 <am_hal_iom_i2c_write_nb.part.9+0x214>)
    2272:	4805      	ldr	r0, [pc, #20]	; (2288 <am_hal_iom_i2c_write_nb.part.9+0x208>)
    2274:	f240 714d 	movw	r1, #1869	; 0x74d
    2278:	f001 fa8e 	bl	3798 <am_hal_debug_error>
    227c:	e7af      	b.n	21de <am_hal_iom_i2c_write_nb.part.9+0x15e>
    227e:	bf00      	nop
    2280:	10001138 	.word	0x10001138
    2284:	00004948 	.word	0x00004948
    2288:	00004934 	.word	0x00004934
    228c:	10001674 	.word	0x10001674
    2290:	03ff0000 	.word	0x03ff0000
    2294:	00004910 	.word	0x00004910
    2298:	00004a3c 	.word	0x00004a3c

0000229c <am_hal_iom_i2c_read_nq.part.8>:
am_hal_iom_i2c_read_nq(uint32_t ui32Module, uint32_t ui32BusAddress,
    229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a0:	4607      	mov	r7, r0
    22a2:	b087      	sub	sp, #28
    22a4:	460d      	mov	r5, r1
    22a6:	4692      	mov	sl, r2
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    22a8:	461e      	mov	r6, r3
    22aa:	2b00      	cmp	r3, #0
    22ac:	f000 8156 	beq.w	255c <am_hal_iom_i2c_read_nq.part.8+0x2c0>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    22b0:	2802      	cmp	r0, #2
    22b2:	f000 815c 	beq.w	256e <am_hal_iom_i2c_read_nq.part.8+0x2d2>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    22b6:	2bff      	cmp	r3, #255	; 0xff
    22b8:	f200 811b 	bhi.w	24f2 <am_hal_iom_i2c_read_nq.part.8+0x256>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    22bc:	2f01      	cmp	r7, #1
    22be:	f240 8121 	bls.w	2504 <am_hal_iom_i2c_read_nq.part.8+0x268>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    22c2:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    22c6:	3404      	adds	r4, #4
    22c8:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    22ca:	2100      	movs	r1, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    22cc:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    22d0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    22d4:	f8d4 5208 	ldr.w	r5, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    22d8:	f504 7000 	add.w	r0, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    22dc:	f045 0301 	orr.w	r3, r5, #1
    22e0:	f504 7202 	add.w	r2, r4, #520	; 0x208
    22e4:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    22e8:	9003      	str	r0, [sp, #12]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    22ea:	9204      	str	r2, [sp, #16]
    22ec:	f504 7901 	add.w	r9, r4, #516	; 0x204
    while ( ui32NumBytes )
    22f0:	2e00      	cmp	r6, #0
    22f2:	d071      	beq.n	23d8 <am_hal_iom_i2c_read_nq.part.8+0x13c>
    22f4:	2500      	movs	r5, #0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    22f6:	2f01      	cmp	r7, #1
    22f8:	d907      	bls.n	230a <am_hal_iom_i2c_read_nq.part.8+0x6e>
        if ( bCmdCmp == true )
    22fa:	2d00      	cmp	r5, #0
    22fc:	d16c      	bne.n	23d8 <am_hal_iom_i2c_read_nq.part.8+0x13c>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    22fe:	f8d9 5000 	ldr.w	r5, [r9]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2302:	2f01      	cmp	r7, #1
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    2304:	f005 0501 	and.w	r5, r5, #1
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2308:	d8f7      	bhi.n	22fa <am_hal_iom_i2c_read_nq.part.8+0x5e>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    230a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);
    230e:	f001 087f 	and.w	r8, r1, #127	; 0x7f
        if ( ui32BytesInFifo >= ui32NumBytes )
    2312:	4546      	cmp	r6, r8
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2314:	f504 7c80 	add.w	ip, r4, #256	; 0x100
        if ( ui32BytesInFifo >= ui32NumBytes )
    2318:	d97a      	bls.n	2410 <am_hal_iom_i2c_read_nq.part.8+0x174>
        else if ( ui32BytesInFifo >= 4 )
    231a:	f1b8 0f03 	cmp.w	r8, #3
    231e:	d9ec      	bls.n	22fa <am_hal_iom_i2c_read_nq.part.8+0x5e>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2320:	f8dc 0000 	ldr.w	r0, [ip]
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    2324:	f028 0303 	bic.w	r3, r8, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2328:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
    232c:	4573      	cmp	r3, lr
    232e:	f200 8155 	bhi.w	25dc <am_hal_iom_i2c_read_nq.part.8+0x340>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2332:	4652      	mov	r2, sl
    2334:	f008 017c 	and.w	r1, r8, #124	; 0x7c
    2338:	6820      	ldr	r0, [r4, #0]
    233a:	f842 0b04 	str.w	r0, [r2], #4
    233e:	46d4      	mov	ip, sl
    2340:	448a      	add	sl, r1
    2342:	ebaa 080c 	sub.w	r8, sl, ip
    2346:	f1a8 0e04 	sub.w	lr, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
    234a:	4552      	cmp	r2, sl
    234c:	f3ce 0182 	ubfx	r1, lr, #2, #3
    2350:	d03a      	beq.n	23c8 <am_hal_iom_i2c_read_nq.part.8+0x12c>
    2352:	b319      	cbz	r1, 239c <am_hal_iom_i2c_read_nq.part.8+0x100>
    2354:	2901      	cmp	r1, #1
    2356:	d01c      	beq.n	2392 <am_hal_iom_i2c_read_nq.part.8+0xf6>
    2358:	2902      	cmp	r1, #2
    235a:	d017      	beq.n	238c <am_hal_iom_i2c_read_nq.part.8+0xf0>
    235c:	2903      	cmp	r1, #3
    235e:	d012      	beq.n	2386 <am_hal_iom_i2c_read_nq.part.8+0xea>
    2360:	2904      	cmp	r1, #4
    2362:	d00d      	beq.n	2380 <am_hal_iom_i2c_read_nq.part.8+0xe4>
    2364:	2905      	cmp	r1, #5
    2366:	d008      	beq.n	237a <am_hal_iom_i2c_read_nq.part.8+0xde>
    2368:	2906      	cmp	r1, #6
    236a:	d003      	beq.n	2374 <am_hal_iom_i2c_read_nq.part.8+0xd8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    236c:	6820      	ldr	r0, [r4, #0]
    236e:	f8cc 0004 	str.w	r0, [ip, #4]
    2372:	3204      	adds	r2, #4
    2374:	6821      	ldr	r1, [r4, #0]
    2376:	f842 1b04 	str.w	r1, [r2], #4
    237a:	6820      	ldr	r0, [r4, #0]
    237c:	f842 0b04 	str.w	r0, [r2], #4
    2380:	6821      	ldr	r1, [r4, #0]
    2382:	f842 1b04 	str.w	r1, [r2], #4
    2386:	6820      	ldr	r0, [r4, #0]
    2388:	f842 0b04 	str.w	r0, [r2], #4
    238c:	6821      	ldr	r1, [r4, #0]
    238e:	f842 1b04 	str.w	r1, [r2], #4
    2392:	6820      	ldr	r0, [r4, #0]
    2394:	f842 0b04 	str.w	r0, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2398:	4552      	cmp	r2, sl
    239a:	d015      	beq.n	23c8 <am_hal_iom_i2c_read_nq.part.8+0x12c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    239c:	4694      	mov	ip, r2
    239e:	6821      	ldr	r1, [r4, #0]
    23a0:	f84c 1b04 	str.w	r1, [ip], #4
    23a4:	6820      	ldr	r0, [r4, #0]
    23a6:	6050      	str	r0, [r2, #4]
    23a8:	6821      	ldr	r1, [r4, #0]
    23aa:	f8cc 1004 	str.w	r1, [ip, #4]
    23ae:	6820      	ldr	r0, [r4, #0]
    23b0:	60d0      	str	r0, [r2, #12]
    23b2:	6821      	ldr	r1, [r4, #0]
    23b4:	6111      	str	r1, [r2, #16]
    23b6:	6820      	ldr	r0, [r4, #0]
    23b8:	6150      	str	r0, [r2, #20]
    23ba:	6821      	ldr	r1, [r4, #0]
    23bc:	6191      	str	r1, [r2, #24]
    23be:	6820      	ldr	r0, [r4, #0]
    23c0:	61d0      	str	r0, [r2, #28]
    23c2:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    23c4:	4552      	cmp	r2, sl
    23c6:	d1e9      	bne.n	239c <am_hal_iom_i2c_read_nq.part.8+0x100>
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    23c8:	1af6      	subs	r6, r6, r3
        if ( bCmdCmp == true )
    23ca:	b92d      	cbnz	r5, 23d8 <am_hal_iom_i2c_read_nq.part.8+0x13c>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    23cc:	f8d9 5000 	ldr.w	r5, [r9]
    23d0:	f005 0501 	and.w	r5, r5, #1
    while ( ui32NumBytes )
    23d4:	2e00      	cmp	r6, #0
    23d6:	d18e      	bne.n	22f6 <am_hal_iom_i2c_read_nq.part.8+0x5a>
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    23d8:	4888      	ldr	r0, [pc, #544]	; (25fc <am_hal_iom_i2c_read_nq.part.8+0x360>)
    23da:	2301      	movs	r3, #1
    23dc:	461a      	mov	r2, r3
    23de:	4649      	mov	r1, r9
    23e0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    23e4:	f7ff f9cc 	bl	1780 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    23e8:	9a04      	ldr	r2, [sp, #16]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    23ea:	9b03      	ldr	r3, [sp, #12]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    23ec:	f04b 0101 	orr.w	r1, fp, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    23f0:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    23f2:	6011      	str	r1, [r2, #0]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    23f4:	4604      	mov	r4, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    23f6:	f8c3 b000 	str.w	fp, [r3]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    23fa:	d005      	beq.n	2408 <am_hal_iom_i2c_read_nq.part.8+0x16c>
    23fc:	4a80      	ldr	r2, [pc, #512]	; (2600 <am_hal_iom_i2c_read_nq.part.8+0x364>)
    23fe:	4881      	ldr	r0, [pc, #516]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    2400:	f240 5151 	movw	r1, #1361	; 0x551
    2404:	f001 f9c8 	bl	3798 <am_hal_debug_error>
}
    2408:	4620      	mov	r0, r4
    240a:	b007      	add	sp, #28
    240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2410:	f8dc 2000 	ldr.w	r2, [ip]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2414:	f002 087f 	and.w	r8, r2, #127	; 0x7f
    2418:	4546      	cmp	r6, r8
    241a:	f200 80be 	bhi.w	259a <am_hal_iom_i2c_read_nq.part.8+0x2fe>
    241e:	f006 0103 	and.w	r1, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
    2422:	08b6      	lsrs	r6, r6, #2
    2424:	d04b      	beq.n	24be <am_hal_iom_i2c_read_nq.part.8+0x222>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2426:	4653      	mov	r3, sl
    2428:	6820      	ldr	r0, [r4, #0]
    242a:	f843 0b04 	str.w	r0, [r3], #4
    242e:	eb0a 0c86 	add.w	ip, sl, r6, lsl #2
    2432:	ebac 0e0a 	sub.w	lr, ip, sl
    2436:	f1ae 0204 	sub.w	r2, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    243a:	459c      	cmp	ip, r3
    243c:	f3c2 0082 	ubfx	r0, r2, #2, #3
    2440:	d03d      	beq.n	24be <am_hal_iom_i2c_read_nq.part.8+0x222>
    2442:	b310      	cbz	r0, 248a <am_hal_iom_i2c_read_nq.part.8+0x1ee>
    2444:	2801      	cmp	r0, #1
    2446:	d01b      	beq.n	2480 <am_hal_iom_i2c_read_nq.part.8+0x1e4>
    2448:	2802      	cmp	r0, #2
    244a:	d016      	beq.n	247a <am_hal_iom_i2c_read_nq.part.8+0x1de>
    244c:	2803      	cmp	r0, #3
    244e:	d011      	beq.n	2474 <am_hal_iom_i2c_read_nq.part.8+0x1d8>
    2450:	2804      	cmp	r0, #4
    2452:	d00c      	beq.n	246e <am_hal_iom_i2c_read_nq.part.8+0x1d2>
    2454:	2805      	cmp	r0, #5
    2456:	d007      	beq.n	2468 <am_hal_iom_i2c_read_nq.part.8+0x1cc>
    2458:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    245a:	bf1c      	itt	ne
    245c:	6820      	ldrne	r0, [r4, #0]
    245e:	f843 0b04 	strne.w	r0, [r3], #4
    2462:	6822      	ldr	r2, [r4, #0]
    2464:	f843 2b04 	str.w	r2, [r3], #4
    2468:	6820      	ldr	r0, [r4, #0]
    246a:	f843 0b04 	str.w	r0, [r3], #4
    246e:	6822      	ldr	r2, [r4, #0]
    2470:	f843 2b04 	str.w	r2, [r3], #4
    2474:	6820      	ldr	r0, [r4, #0]
    2476:	f843 0b04 	str.w	r0, [r3], #4
    247a:	6822      	ldr	r2, [r4, #0]
    247c:	f843 2b04 	str.w	r2, [r3], #4
    2480:	6820      	ldr	r0, [r4, #0]
    2482:	f843 0b04 	str.w	r0, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2486:	459c      	cmp	ip, r3
    2488:	d019      	beq.n	24be <am_hal_iom_i2c_read_nq.part.8+0x222>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    248a:	4698      	mov	r8, r3
    248c:	f8d4 e000 	ldr.w	lr, [r4]
    2490:	f848 eb04 	str.w	lr, [r8], #4
    2494:	f8d4 e000 	ldr.w	lr, [r4]
    2498:	f8c3 e004 	str.w	lr, [r3, #4]
    249c:	f8d4 e000 	ldr.w	lr, [r4]
    24a0:	f8c8 e004 	str.w	lr, [r8, #4]
    24a4:	6822      	ldr	r2, [r4, #0]
    24a6:	60da      	str	r2, [r3, #12]
    24a8:	6820      	ldr	r0, [r4, #0]
    24aa:	6118      	str	r0, [r3, #16]
    24ac:	6822      	ldr	r2, [r4, #0]
    24ae:	615a      	str	r2, [r3, #20]
    24b0:	6820      	ldr	r0, [r4, #0]
    24b2:	6198      	str	r0, [r3, #24]
    24b4:	6822      	ldr	r2, [r4, #0]
    24b6:	61da      	str	r2, [r3, #28]
    24b8:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    24ba:	459c      	cmp	ip, r3
    24bc:	d1e5      	bne.n	248a <am_hal_iom_i2c_read_nq.part.8+0x1ee>
    if ( ui32Leftovers )
    24be:	b191      	cbz	r1, 24e6 <am_hal_iom_i2c_read_nq.part.8+0x24a>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    24c0:	6824      	ldr	r4, [r4, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    24c2:	f80a 4026 	strb.w	r4, [sl, r6, lsl #2]
        for ( j = 0; j < ui32Leftovers; j++ )
    24c6:	2901      	cmp	r1, #1
        pui8Data = (uint8_t *) (&pui32Data[i]);
    24c8:	ea4f 0386 	mov.w	r3, r6, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    24cc:	d00b      	beq.n	24e6 <am_hal_iom_i2c_read_nq.part.8+0x24a>
            pui8Data[j] = sTempBuffer.bytes[j];
    24ce:	449a      	add	sl, r3
        for ( j = 0; j < ui32Leftovers; j++ )
    24d0:	2903      	cmp	r1, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    24d2:	f3c4 2607 	ubfx	r6, r4, #8, #8
    24d6:	bf08      	it	eq
    24d8:	f3c4 4407 	ubfxeq	r4, r4, #16, #8
    24dc:	f88a 6001 	strb.w	r6, [sl, #1]
    24e0:	bf08      	it	eq
    24e2:	f88a 4002 	strbeq.w	r4, [sl, #2]
        if ( bCmdCmp == true )
    24e6:	2d00      	cmp	r5, #0
    24e8:	f47f af76 	bne.w	23d8 <am_hal_iom_i2c_read_nq.part.8+0x13c>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    24ec:	f8d9 3000 	ldr.w	r3, [r9]
    24f0:	e772      	b.n	23d8 <am_hal_iom_i2c_read_nq.part.8+0x13c>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    24f2:	4a45      	ldr	r2, [pc, #276]	; (2608 <am_hal_iom_i2c_read_nq.part.8+0x36c>)
    24f4:	4843      	ldr	r0, [pc, #268]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    24f6:	f240 510a 	movw	r1, #1290	; 0x50a
    24fa:	f001 f94d 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    24fe:	2f01      	cmp	r7, #1
    2500:	f63f aedf 	bhi.w	22c2 <am_hal_iom_i2c_read_nq.part.8+0x26>
    2504:	4941      	ldr	r1, [pc, #260]	; (260c <am_hal_iom_i2c_read_nq.part.8+0x370>)
    while ( g_bIomBusy[ui32Module] );
    2506:	5dcb      	ldrb	r3, [r1, r7]
    2508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    250c:	2b00      	cmp	r3, #0
    250e:	d1fa      	bne.n	2506 <am_hal_iom_i2c_read_nq.part.8+0x26a>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2510:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    2514:	3404      	adds	r4, #4
    2516:	0324      	lsls	r4, r4, #12
    2518:	f504 7000 	add.w	r0, r4, #512	; 0x200
    251c:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2520:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2524:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2528:	9003      	str	r0, [sp, #12]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    252a:	f041 0301 	orr.w	r3, r1, #1
    252e:	f504 7202 	add.w	r2, r4, #520	; 0x208
    2532:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    2536:	9204      	str	r2, [sp, #16]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2538:	2e00      	cmp	r6, #0
    253a:	d058      	beq.n	25ee <am_hal_iom_i2c_read_nq.part.8+0x352>
    ui32Command |= (ui32Options & 0x5C00FF00);
    253c:	9910      	ldr	r1, [sp, #64]	; 0x40
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    253e:	4834      	ldr	r0, [pc, #208]	; (2610 <am_hal_iom_i2c_read_nq.part.8+0x374>)
    ui32Command |= (ui32Options & 0x5C00FF00);
    2540:	f021 4823 	bic.w	r8, r1, #2734686208	; 0xa3000000
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    2544:	ea00 4505 	and.w	r5, r0, r5, lsl #16
    ui32Command |= (ui32Options & 0x5C00FF00);
    2548:	f008 23ff 	and.w	r3, r8, #4278255360	; 0xff00ff00
    254c:	431d      	orrs	r5, r3
    254e:	f045 4000 	orr.w	r0, r5, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    2552:	b2f2      	uxtb	r2, r6
    ui32Command |= (ui32Options & 0x5C00FF00);
    2554:	4310      	orrs	r0, r2
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2556:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    255a:	e6c7      	b.n	22ec <am_hal_iom_i2c_read_nq.part.8+0x50>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    255c:	4a2d      	ldr	r2, [pc, #180]	; (2614 <am_hal_iom_i2c_read_nq.part.8+0x378>)
    255e:	4829      	ldr	r0, [pc, #164]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    2560:	f240 41ea 	movw	r1, #1258	; 0x4ea
    2564:	f001 f918 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    2568:	2f02      	cmp	r7, #2
    256a:	f47f aea7 	bne.w	22bc <am_hal_iom_i2c_read_nq.part.8+0x20>
        if ( ui32Options & AM_HAL_IOM_RAW )
    256e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    2570:	f017 4480 	ands.w	r4, r7, #1073741824	; 0x40000000
    2574:	d01d      	beq.n	25b2 <am_hal_iom_i2c_read_nq.part.8+0x316>
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    2576:	0068      	lsls	r0, r5, #1
    2578:	2400      	movs	r4, #0
    257a:	f3c7 7300 	ubfx	r3, r7, #28, #1
    257e:	f040 0101 	orr.w	r1, r0, #1
    2582:	9301      	str	r3, [sp, #4]
    2584:	b2c8      	uxtb	r0, r1
    2586:	4652      	mov	r2, sl
    2588:	4631      	mov	r1, r6
    258a:	9400      	str	r4, [sp, #0]
    258c:	4623      	mov	r3, r4
    258e:	f001 f905 	bl	379c <am_hal_i2c_bit_bang_receive>
}
    2592:	4620      	mov	r0, r4
    2594:	b007      	add	sp, #28
    2596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    259a:	f640 010e 	movw	r1, #2062	; 0x80e
    259e:	4a1e      	ldr	r2, [pc, #120]	; (2618 <am_hal_iom_i2c_read_nq.part.8+0x37c>)
    25a0:	4818      	ldr	r0, [pc, #96]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    25a2:	f001 f8f9 	bl	3798 <am_hal_debug_error>
    25a6:	f006 0103 	and.w	r1, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
    25aa:	08b6      	lsrs	r6, r6, #2
    25ac:	f47f af3b 	bne.w	2426 <am_hal_iom_i2c_read_nq.part.8+0x18a>
    25b0:	e785      	b.n	24be <am_hal_iom_i2c_read_nq.part.8+0x222>
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    25b2:	4631      	mov	r1, r6
    25b4:	006d      	lsls	r5, r5, #1
    25b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    25b8:	f045 0c01 	orr.w	ip, r5, #1
    25bc:	2301      	movs	r3, #1
    25be:	f3c7 7500 	ubfx	r5, r7, #28, #1
    25c2:	e88d 0028 	stmia.w	sp, {r3, r5}
    25c6:	fa5f f08c 	uxtb.w	r0, ip
    25ca:	4652      	mov	r2, sl
    25cc:	f3c6 2307 	ubfx	r3, r6, #8, #8
    25d0:	f001 f8e4 	bl	379c <am_hal_i2c_bit_bang_receive>
}
    25d4:	4620      	mov	r0, r4
    25d6:	b007      	add	sp, #28
    25d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    25dc:	4a0e      	ldr	r2, [pc, #56]	; (2618 <am_hal_iom_i2c_read_nq.part.8+0x37c>)
    25de:	4809      	ldr	r0, [pc, #36]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    25e0:	9305      	str	r3, [sp, #20]
    25e2:	f640 010e 	movw	r1, #2062	; 0x80e
    25e6:	f001 f8d7 	bl	3798 <am_hal_debug_error>
    25ea:	9b05      	ldr	r3, [sp, #20]
    25ec:	e6a1      	b.n	2332 <am_hal_iom_i2c_read_nq.part.8+0x96>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    25ee:	4a09      	ldr	r2, [pc, #36]	; (2614 <am_hal_iom_i2c_read_nq.part.8+0x378>)
    25f0:	4804      	ldr	r0, [pc, #16]	; (2604 <am_hal_iom_i2c_read_nq.part.8+0x368>)
    25f2:	f240 714d 	movw	r1, #1869	; 0x74d
    25f6:	f001 f8cf 	bl	3798 <am_hal_debug_error>
    25fa:	e79f      	b.n	253c <am_hal_iom_i2c_read_nq.part.8+0x2a0>
    25fc:	1000101c 	.word	0x1000101c
    2600:	00004998 	.word	0x00004998
    2604:	00004934 	.word	0x00004934
    2608:	00004948 	.word	0x00004948
    260c:	10001138 	.word	0x10001138
    2610:	03ff0000 	.word	0x03ff0000
    2614:	00004910 	.word	0x00004910
    2618:	00004960 	.word	0x00004960

0000261c <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    261c:	2801      	cmp	r0, #1
{
    261e:	b410      	push	{r4}
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    2620:	d906      	bls.n	2630 <am_hal_iom_enable+0x14>
        if ( g_ui32Mod1Interface == AM_HAL_IOM_SPIMODE )
    2622:	481d      	ldr	r0, [pc, #116]	; (2698 <am_hal_iom_enable+0x7c>)
    2624:	6803      	ldr	r3, [r0, #0]
    2626:	2b01      	cmp	r3, #1
    2628:	d025      	beq.n	2676 <am_hal_iom_enable+0x5a>
}
    262a:	f85d 4b04 	ldr.w	r4, [sp], #4
    262e:	4770      	bx	lr
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2630:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    2634:	3304      	adds	r3, #4
    2636:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    2638:	4918      	ldr	r1, [pc, #96]	; (269c <am_hal_iom_enable+0x80>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    263a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    263e:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2640:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    2644:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    2648:	540c      	strb	r4, [r1, r0]
    if ( ui32Module == 0 )
    264a:	2800      	cmp	r0, #0
    264c:	d1e9      	bne.n	2622 <am_hal_iom_enable+0x6>
        if ( g_ui32Mod0Interface == AM_HAL_IOM_SPIMODE )
    264e:	4914      	ldr	r1, [pc, #80]	; (26a0 <am_hal_iom_enable+0x84>)
    2650:	680c      	ldr	r4, [r1, #0]
    2652:	2c01      	cmp	r4, #1
    2654:	d1e9      	bne.n	262a <am_hal_iom_enable+0xe>
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    2656:	4913      	ldr	r1, [pc, #76]	; (26a4 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    2658:	4b13      	ldr	r3, [pc, #76]	; (26a8 <am_hal_iom_enable+0x8c>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    265a:	2273      	movs	r2, #115	; 0x73
    265c:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    265e:	681c      	ldr	r4, [r3, #0]
    2660:	f444 7200 	orr.w	r2, r4, #512	; 0x200
    2664:	601a      	str	r2, [r3, #0]
            AM_BFW(GPIO, PADREGB, PAD6INPEN, 1);
    2666:	681c      	ldr	r4, [r3, #0]
    2668:	f444 3200 	orr.w	r2, r4, #131072	; 0x20000
    266c:	601a      	str	r2, [r3, #0]
}
    266e:	f85d 4b04 	ldr.w	r4, [sp], #4
            AM_REGn(GPIO, 0, PADKEY) = 0;
    2672:	6008      	str	r0, [r1, #0]
}
    2674:	4770      	bx	lr
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    2676:	490b      	ldr	r1, [pc, #44]	; (26a4 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    2678:	4c0c      	ldr	r4, [pc, #48]	; (26ac <am_hal_iom_enable+0x90>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    267a:	2273      	movs	r2, #115	; 0x73
    267c:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    267e:	6820      	ldr	r0, [r4, #0]
    2680:	f040 0302 	orr.w	r3, r0, #2
    2684:	6023      	str	r3, [r4, #0]
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    2686:	6822      	ldr	r2, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    2688:	2000      	movs	r0, #0
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    268a:	f442 7300 	orr.w	r3, r2, #512	; 0x200
    268e:	6023      	str	r3, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    2690:	6008      	str	r0, [r1, #0]
}
    2692:	f85d 4b04 	ldr.w	r4, [sp], #4
    2696:	4770      	bx	lr
    2698:	10001140 	.word	0x10001140
    269c:	10001138 	.word	0x10001138
    26a0:	1000113c 	.word	0x1000113c
    26a4:	40010060 	.word	0x40010060
    26a8:	40010004 	.word	0x40010004
    26ac:	40010008 	.word	0x40010008

000026b0 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    26b0:	2801      	cmp	r0, #1
    26b2:	d900      	bls.n	26b6 <am_hal_iom_config+0x6>
    26b4:	4770      	bx	lr
{
    26b6:	b538      	push	{r3, r4, r5, lr}
    ui32Config = psConfig->ui32InterfaceMode;
    26b8:	680b      	ldr	r3, [r1, #0]
    if ( ui32Module == 0 )
    26ba:	b348      	cbz	r0, 2710 <am_hal_iom_config+0x60>
        g_ui32Mod1Interface = psConfig->ui32InterfaceMode;
    26bc:	4a24      	ldr	r2, [pc, #144]	; (2750 <am_hal_iom_config+0xa0>)
    26be:	6013      	str	r3, [r2, #0]
    if ( psConfig->bSPHA )
    26c0:	7a0d      	ldrb	r5, [r1, #8]
    26c2:	b10d      	cbz	r5, 26c8 <am_hal_iom_config+0x18>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    26c4:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    26c8:	7a4a      	ldrb	r2, [r1, #9]
    26ca:	b10a      	cbz	r2, 26d0 <am_hal_iom_config+0x20>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    26cc:	f043 0302 	orr.w	r3, r3, #2
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    26d0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    26d4:	3004      	adds	r0, #4
    26d6:	0304      	lsls	r4, r0, #12
    26d8:	460d      	mov	r5, r1
    26da:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    am_hal_debug_assert_msg(
    26de:	7a89      	ldrb	r1, [r1, #10]
    26e0:	293c      	cmp	r1, #60	; 0x3c
    26e2:	d82e      	bhi.n	2742 <am_hal_iom_config+0x92>
    am_hal_debug_assert_msg(
    26e4:	7aea      	ldrb	r2, [r5, #11]
    26e6:	2a3c      	cmp	r2, #60	; 0x3c
    26e8:	d824      	bhi.n	2734 <am_hal_iom_config+0x84>
    am_hal_debug_assert_msg(
    26ea:	7aab      	ldrb	r3, [r5, #10]
    26ec:	2b03      	cmp	r3, #3
    26ee:	d91a      	bls.n	2726 <am_hal_iom_config+0x76>
    am_hal_debug_assert_msg(
    26f0:	7ae8      	ldrb	r0, [r5, #11]
    26f2:	2803      	cmp	r0, #3
    26f4:	d90f      	bls.n	2716 <am_hal_iom_config+0x66>
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    26f6:	7aa9      	ldrb	r1, [r5, #10]
    26f8:	020b      	lsls	r3, r1, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
    26fa:	f000 023f 	and.w	r2, r0, #63	; 0x3f
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    26fe:	f403 507c 	and.w	r0, r3, #16128	; 0x3f00
    2702:	4310      	orrs	r0, r2
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    2704:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    AM_REGn(IOMSTR, ui32Module, CLKCFG) = psConfig->ui32ClockFrequency;
    2708:	686d      	ldr	r5, [r5, #4]
    270a:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    270e:	bd38      	pop	{r3, r4, r5, pc}
        g_ui32Mod0Interface = psConfig->ui32InterfaceMode;
    2710:	4c10      	ldr	r4, [pc, #64]	; (2754 <am_hal_iom_config+0xa4>)
    2712:	6023      	str	r3, [r4, #0]
    2714:	e7d4      	b.n	26c0 <am_hal_iom_config+0x10>
    am_hal_debug_assert_msg(
    2716:	4810      	ldr	r0, [pc, #64]	; (2758 <am_hal_iom_config+0xa8>)
    2718:	4a10      	ldr	r2, [pc, #64]	; (275c <am_hal_iom_config+0xac>)
    271a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    271e:	f001 f83b 	bl	3798 <am_hal_debug_error>
    2722:	7ae8      	ldrb	r0, [r5, #11]
    2724:	e7e7      	b.n	26f6 <am_hal_iom_config+0x46>
    am_hal_debug_assert_msg(
    2726:	4a0e      	ldr	r2, [pc, #56]	; (2760 <am_hal_iom_config+0xb0>)
    2728:	480b      	ldr	r0, [pc, #44]	; (2758 <am_hal_iom_config+0xa8>)
    272a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    272e:	f001 f833 	bl	3798 <am_hal_debug_error>
    2732:	e7dd      	b.n	26f0 <am_hal_iom_config+0x40>
    am_hal_debug_assert_msg(
    2734:	4a0b      	ldr	r2, [pc, #44]	; (2764 <am_hal_iom_config+0xb4>)
    2736:	4808      	ldr	r0, [pc, #32]	; (2758 <am_hal_iom_config+0xa8>)
    2738:	f44f 71ab 	mov.w	r1, #342	; 0x156
    273c:	f001 f82c 	bl	3798 <am_hal_debug_error>
    2740:	e7d3      	b.n	26ea <am_hal_iom_config+0x3a>
    am_hal_debug_assert_msg(
    2742:	4a09      	ldr	r2, [pc, #36]	; (2768 <am_hal_iom_config+0xb8>)
    2744:	4804      	ldr	r0, [pc, #16]	; (2758 <am_hal_iom_config+0xa8>)
    2746:	f44f 71aa 	mov.w	r1, #340	; 0x154
    274a:	f001 f825 	bl	3798 <am_hal_debug_error>
    274e:	e7c9      	b.n	26e4 <am_hal_iom_config+0x34>
    2750:	10001140 	.word	0x10001140
    2754:	1000113c 	.word	0x1000113c
    2758:	00004934 	.word	0x00004934
    275c:	000048f0 	.word	0x000048f0
    2760:	000048d0 	.word	0x000048d0
    2764:	000048b4 	.word	0x000048b4
    2768:	00004894 	.word	0x00004894

0000276c <am_hal_iom_spi_write_nq>:
{
    276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2770:	2801      	cmp	r0, #1
{
    2772:	b083      	sub	sp, #12
    2774:	4606      	mov	r6, r0
    2776:	4688      	mov	r8, r1
    2778:	4617      	mov	r7, r2
    277a:	469b      	mov	fp, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    277c:	d905      	bls.n	278a <am_hal_iom_spi_write_nq+0x1e>
    277e:	4ac9      	ldr	r2, [pc, #804]	; (2aa4 <am_hal_iom_spi_write_nq+0x338>)
    2780:	48c9      	ldr	r0, [pc, #804]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2782:	f240 2121 	movw	r1, #545	; 0x221
    2786:	f001 f807 	bl	3798 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    278a:	f1bb 0f00 	cmp.w	fp, #0
    278e:	f000 8173 	beq.w	2a78 <am_hal_iom_spi_write_nq+0x30c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2792:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
    2796:	f080 80e3 	bcs.w	2960 <am_hal_iom_spi_write_nq+0x1f4>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    279a:	2e01      	cmp	r6, #1
    279c:	f240 80e9 	bls.w	2972 <am_hal_iom_spi_write_nq+0x206>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    27a0:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    27a4:	3404      	adds	r4, #4
    27a6:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    27a8:	2500      	movs	r5, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    27aa:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    27ae:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    27b2:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    27b6:	465d      	mov	r5, fp
    27b8:	2d40      	cmp	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    27ba:	f040 0301 	orr.w	r3, r0, #1
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    27be:	f504 7200 	add.w	r2, r4, #512	; 0x200
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    27c2:	bf28      	it	cs
    27c4:	2540      	movcs	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    27c6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    27ca:	9200      	str	r2, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    27cc:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    27d0:	f025 0303 	bic.w	r3, r5, #3
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    27d4:	f1bb 0f00 	cmp.w	fp, #0
    27d8:	d107      	bne.n	27ea <am_hal_iom_spi_write_nq+0x7e>
    27da:	4ab4      	ldr	r2, [pc, #720]	; (2aac <am_hal_iom_spi_write_nq+0x340>)
    27dc:	48b2      	ldr	r0, [pc, #712]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    27de:	9301      	str	r3, [sp, #4]
    27e0:	f240 4104 	movw	r1, #1028	; 0x404
    27e4:	f000 ffd8 	bl	3798 <am_hal_debug_error>
    27e8:	9b01      	ldr	r3, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    27ea:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    27ec:	ea4f 4008 	mov.w	r0, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    27f0:	f021 4123 	bic.w	r1, r1, #2734686208	; 0xa3000000
    27f4:	f001 28ff 	and.w	r8, r1, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    27f8:	f400 2ee0 	and.w	lr, r0, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    27fc:	ea4e 0208 	orr.w	r2, lr, r8
    ui32Command |= (ui32NumBytes & 0xFF);
    2800:	fa5f f08b 	uxtb.w	r0, fp
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2804:	ea4f 3ccb 	mov.w	ip, fp, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    2808:	4302      	orrs	r2, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    280a:	f00c 61f0 	and.w	r1, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    280e:	430a      	orrs	r2, r1
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    2810:	ebbb 0b05 	subs.w	fp, fp, r5
    pui32Data += ui32TransferSize >> 2;
    2814:	441f      	add	r7, r3
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2816:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    281a:	bf08      	it	eq
    281c:	f504 7801 	addeq.w	r8, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    2820:	f000 8082 	beq.w	2928 <am_hal_iom_spi_write_nq+0x1bc>
    2824:	f8d4 5204 	ldr.w	r5, [r4, #516]	; 0x204
    2828:	07e9      	lsls	r1, r5, #31
    282a:	f504 7801 	add.w	r8, r4, #516	; 0x204
    282e:	d47b      	bmi.n	2928 <am_hal_iom_spi_write_nq+0x1bc>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2830:	4653      	mov	r3, sl
    2832:	46ca      	mov	sl, r9
    2834:	e003      	b.n	283e <am_hal_iom_spi_write_nq+0xd2>
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    2836:	f8d8 5000 	ldr.w	r5, [r8]
    283a:	07ea      	lsls	r2, r5, #31
    283c:	d472      	bmi.n	2924 <am_hal_iom_spi_write_nq+0x1b8>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    283e:	2e01      	cmp	r6, #1
    2840:	d8f9      	bhi.n	2836 <am_hal_iom_spi_write_nq+0xca>
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2842:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2846:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    284a:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    284e:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
    2852:	45cb      	cmp	fp, r9
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2854:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32NumBytes <= ui32SpaceInFifo )
    2858:	f200 811e 	bhi.w	2a98 <am_hal_iom_spi_write_nq+0x32c>
    285c:	f02b 0903 	bic.w	r9, fp, #3
    2860:	465d      	mov	r5, fp
    2862:	f04f 0b00 	mov.w	fp, #0
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2866:	f8de 2000 	ldr.w	r2, [lr]
    286a:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    286e:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2872:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
    2876:	4565      	cmp	r5, ip
    2878:	f200 80f5 	bhi.w	2a66 <am_hal_iom_spi_write_nq+0x2fa>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    287c:	2d00      	cmp	r5, #0
    287e:	d04d      	beq.n	291c <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2880:	463a      	mov	r2, r7
    2882:	43f9      	mvns	r1, r7
    2884:	f852 0b04 	ldr.w	r0, [r2], #4
    2888:	6020      	str	r0, [r4, #0]
    288a:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    288c:	1bd0      	subs	r0, r2, r7
    288e:	4429      	add	r1, r5
    2890:	4285      	cmp	r5, r0
    2892:	f3c1 0182 	ubfx	r1, r1, #2, #3
    2896:	d941      	bls.n	291c <am_hal_iom_spi_write_nq+0x1b0>
    2898:	b319      	cbz	r1, 28e2 <am_hal_iom_spi_write_nq+0x176>
    289a:	2901      	cmp	r1, #1
    289c:	d01b      	beq.n	28d6 <am_hal_iom_spi_write_nq+0x16a>
    289e:	2902      	cmp	r1, #2
    28a0:	d016      	beq.n	28d0 <am_hal_iom_spi_write_nq+0x164>
    28a2:	2903      	cmp	r1, #3
    28a4:	d011      	beq.n	28ca <am_hal_iom_spi_write_nq+0x15e>
    28a6:	2904      	cmp	r1, #4
    28a8:	d00c      	beq.n	28c4 <am_hal_iom_spi_write_nq+0x158>
    28aa:	2905      	cmp	r1, #5
    28ac:	d007      	beq.n	28be <am_hal_iom_spi_write_nq+0x152>
    28ae:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    28b0:	bf1c      	itt	ne
    28b2:	f852 1b04 	ldrne.w	r1, [r2], #4
    28b6:	6021      	strne	r1, [r4, #0]
    28b8:	f852 0b04 	ldr.w	r0, [r2], #4
    28bc:	6020      	str	r0, [r4, #0]
    28be:	f852 1b04 	ldr.w	r1, [r2], #4
    28c2:	6021      	str	r1, [r4, #0]
    28c4:	f852 0b04 	ldr.w	r0, [r2], #4
    28c8:	6020      	str	r0, [r4, #0]
    28ca:	f852 1b04 	ldr.w	r1, [r2], #4
    28ce:	6021      	str	r1, [r4, #0]
    28d0:	f852 0b04 	ldr.w	r0, [r2], #4
    28d4:	6020      	str	r0, [r4, #0]
    28d6:	f852 1b04 	ldr.w	r1, [r2], #4
    28da:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    28dc:	1bd0      	subs	r0, r2, r7
    28de:	4285      	cmp	r5, r0
    28e0:	d91c      	bls.n	291c <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    28e2:	4696      	mov	lr, r2
    28e4:	3220      	adds	r2, #32
    28e6:	f85e 1b04 	ldr.w	r1, [lr], #4
    28ea:	6021      	str	r1, [r4, #0]
    28ec:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    28f0:	6020      	str	r0, [r4, #0]
    28f2:	f8de 1004 	ldr.w	r1, [lr, #4]
    28f6:	6021      	str	r1, [r4, #0]
    28f8:	f852 0c14 	ldr.w	r0, [r2, #-20]
    28fc:	6020      	str	r0, [r4, #0]
    28fe:	f852 1c10 	ldr.w	r1, [r2, #-16]
    2902:	6021      	str	r1, [r4, #0]
    2904:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    2908:	6020      	str	r0, [r4, #0]
    290a:	f852 1c08 	ldr.w	r1, [r2, #-8]
    290e:	6021      	str	r1, [r4, #0]
    2910:	f852 0c04 	ldr.w	r0, [r2, #-4]
    2914:	6020      	str	r0, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2916:	1bd1      	subs	r1, r2, r7
    2918:	428d      	cmp	r5, r1
    291a:	d8e2      	bhi.n	28e2 <am_hal_iom_spi_write_nq+0x176>
        pui32Data += ui32TransferSize >> 2;
    291c:	444f      	add	r7, r9
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    291e:	f1bb 0f00 	cmp.w	fp, #0
    2922:	d188      	bne.n	2836 <am_hal_iom_spi_write_nq+0xca>
    2924:	46d1      	mov	r9, sl
    2926:	469a      	mov	sl, r3
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2928:	4f61      	ldr	r7, [pc, #388]	; (2ab0 <am_hal_iom_spi_write_nq+0x344>)
    292a:	2301      	movs	r3, #1
    292c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
    2930:	461a      	mov	r2, r3
    2932:	4641      	mov	r1, r8
    2934:	f7fe ff24 	bl	1780 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2938:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    293a:	f049 0401 	orr.w	r4, r9, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    293e:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    2940:	f8ca 4000 	str.w	r4, [sl]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2944:	4606      	mov	r6, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2946:	f8c2 9000 	str.w	r9, [r2]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    294a:	d005      	beq.n	2958 <am_hal_iom_spi_write_nq+0x1ec>
    294c:	4a59      	ldr	r2, [pc, #356]	; (2ab4 <am_hal_iom_spi_write_nq+0x348>)
    294e:	4856      	ldr	r0, [pc, #344]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2950:	f240 2181 	movw	r1, #641	; 0x281
    2954:	f000 ff20 	bl	3798 <am_hal_debug_error>
}
    2958:	4630      	mov	r0, r6
    295a:	b003      	add	sp, #12
    295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2960:	4a55      	ldr	r2, [pc, #340]	; (2ab8 <am_hal_iom_spi_write_nq+0x34c>)
    2962:	4851      	ldr	r0, [pc, #324]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2964:	f44f 710a 	mov.w	r1, #552	; 0x228
    2968:	f000 ff16 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    296c:	2e01      	cmp	r6, #1
    296e:	f63f af17 	bhi.w	27a0 <am_hal_iom_spi_write_nq+0x34>
    2972:	4952      	ldr	r1, [pc, #328]	; (2abc <am_hal_iom_spi_write_nq+0x350>)
    while ( g_bIomBusy[ui32Module] );
    2974:	5d8b      	ldrb	r3, [r1, r6]
    2976:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    297a:	2b00      	cmp	r3, #0
    297c:	d1fa      	bne.n	2974 <am_hal_iom_spi_write_nq+0x208>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    297e:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    2982:	3404      	adds	r4, #4
    2984:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    2986:	465d      	mov	r5, fp
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2988:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    298c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2990:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    2994:	f040 0101 	orr.w	r1, r0, #1
    2998:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    299c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    29a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    29a4:	2d40      	cmp	r5, #64	; 0x40
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    29a6:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    29aa:	bf28      	it	cs
    29ac:	2540      	movcs	r5, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    29ae:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    29b2:	f504 7300 	add.w	r3, r4, #512	; 0x200
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    29b6:	42a9      	cmp	r1, r5
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    29b8:	9300      	str	r3, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    29ba:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    29be:	d362      	bcc.n	2a86 <am_hal_iom_spi_write_nq+0x31a>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    29c0:	2d00      	cmp	r5, #0
    29c2:	d067      	beq.n	2a94 <am_hal_iom_spi_write_nq+0x328>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    29c4:	4638      	mov	r0, r7
    29c6:	43fa      	mvns	r2, r7
    29c8:	f850 1b04 	ldr.w	r1, [r0], #4
    29cc:	6021      	str	r1, [r4, #0]
    29ce:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    29d0:	1bc3      	subs	r3, r0, r7
    29d2:	442a      	add	r2, r5
    29d4:	42ab      	cmp	r3, r5
    29d6:	f3c2 0282 	ubfx	r2, r2, #2, #3
    29da:	f4bf aef9 	bcs.w	27d0 <am_hal_iom_spi_write_nq+0x64>
    29de:	b322      	cbz	r2, 2a2a <am_hal_iom_spi_write_nq+0x2be>
    29e0:	2a01      	cmp	r2, #1
    29e2:	d01b      	beq.n	2a1c <am_hal_iom_spi_write_nq+0x2b0>
    29e4:	2a02      	cmp	r2, #2
    29e6:	d016      	beq.n	2a16 <am_hal_iom_spi_write_nq+0x2aa>
    29e8:	2a03      	cmp	r2, #3
    29ea:	d011      	beq.n	2a10 <am_hal_iom_spi_write_nq+0x2a4>
    29ec:	2a04      	cmp	r2, #4
    29ee:	d00c      	beq.n	2a0a <am_hal_iom_spi_write_nq+0x29e>
    29f0:	2a05      	cmp	r2, #5
    29f2:	d007      	beq.n	2a04 <am_hal_iom_spi_write_nq+0x298>
    29f4:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    29f6:	bf1c      	itt	ne
    29f8:	f850 2b04 	ldrne.w	r2, [r0], #4
    29fc:	6022      	strne	r2, [r4, #0]
    29fe:	f850 1b04 	ldr.w	r1, [r0], #4
    2a02:	6021      	str	r1, [r4, #0]
    2a04:	f850 3b04 	ldr.w	r3, [r0], #4
    2a08:	6023      	str	r3, [r4, #0]
    2a0a:	f850 2b04 	ldr.w	r2, [r0], #4
    2a0e:	6022      	str	r2, [r4, #0]
    2a10:	f850 1b04 	ldr.w	r1, [r0], #4
    2a14:	6021      	str	r1, [r4, #0]
    2a16:	f850 3b04 	ldr.w	r3, [r0], #4
    2a1a:	6023      	str	r3, [r4, #0]
    2a1c:	f850 2b04 	ldr.w	r2, [r0], #4
    2a20:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2a22:	1bc1      	subs	r1, r0, r7
    2a24:	42a9      	cmp	r1, r5
    2a26:	f4bf aed3 	bcs.w	27d0 <am_hal_iom_spi_write_nq+0x64>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2a2a:	4684      	mov	ip, r0
    2a2c:	3020      	adds	r0, #32
    2a2e:	f85c 3b04 	ldr.w	r3, [ip], #4
    2a32:	6023      	str	r3, [r4, #0]
    2a34:	f850 2c1c 	ldr.w	r2, [r0, #-28]
    2a38:	6022      	str	r2, [r4, #0]
    2a3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    2a3e:	6021      	str	r1, [r4, #0]
    2a40:	f850 3c14 	ldr.w	r3, [r0, #-20]
    2a44:	6023      	str	r3, [r4, #0]
    2a46:	f850 2c10 	ldr.w	r2, [r0, #-16]
    2a4a:	6022      	str	r2, [r4, #0]
    2a4c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    2a50:	6021      	str	r1, [r4, #0]
    2a52:	f850 3c08 	ldr.w	r3, [r0, #-8]
    2a56:	6023      	str	r3, [r4, #0]
    2a58:	f850 2c04 	ldr.w	r2, [r0, #-4]
    2a5c:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2a5e:	1bc1      	subs	r1, r0, r7
    2a60:	42a9      	cmp	r1, r5
    2a62:	d3e2      	bcc.n	2a2a <am_hal_iom_spi_write_nq+0x2be>
    2a64:	e6b4      	b.n	27d0 <am_hal_iom_spi_write_nq+0x64>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2a66:	4a16      	ldr	r2, [pc, #88]	; (2ac0 <am_hal_iom_spi_write_nq+0x354>)
    2a68:	480f      	ldr	r0, [pc, #60]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2a6a:	9301      	str	r3, [sp, #4]
    2a6c:	f240 71d6 	movw	r1, #2006	; 0x7d6
    2a70:	f000 fe92 	bl	3798 <am_hal_debug_error>
    2a74:	9b01      	ldr	r3, [sp, #4]
    2a76:	e703      	b.n	2880 <am_hal_iom_spi_write_nq+0x114>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2a78:	4a0c      	ldr	r2, [pc, #48]	; (2aac <am_hal_iom_spi_write_nq+0x340>)
    2a7a:	480b      	ldr	r0, [pc, #44]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2a7c:	f240 2123 	movw	r1, #547	; 0x223
    2a80:	f000 fe8a 	bl	3798 <am_hal_debug_error>
    2a84:	e689      	b.n	279a <am_hal_iom_spi_write_nq+0x2e>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2a86:	4a0e      	ldr	r2, [pc, #56]	; (2ac0 <am_hal_iom_spi_write_nq+0x354>)
    2a88:	4807      	ldr	r0, [pc, #28]	; (2aa8 <am_hal_iom_spi_write_nq+0x33c>)
    2a8a:	f240 71d6 	movw	r1, #2006	; 0x7d6
    2a8e:	f000 fe83 	bl	3798 <am_hal_debug_error>
    2a92:	e797      	b.n	29c4 <am_hal_iom_spi_write_nq+0x258>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2a94:	462b      	mov	r3, r5
    2a96:	e69d      	b.n	27d4 <am_hal_iom_spi_write_nq+0x68>
    2a98:	f029 0503 	bic.w	r5, r9, #3
    2a9c:	ebab 0b05 	sub.w	fp, fp, r5
    2aa0:	46a9      	mov	r9, r5
    2aa2:	e6e0      	b.n	2866 <am_hal_iom_spi_write_nq+0xfa>
    2aa4:	00004a70 	.word	0x00004a70
    2aa8:	00004934 	.word	0x00004934
    2aac:	00004910 	.word	0x00004910
    2ab0:	1000101c 	.word	0x1000101c
    2ab4:	00004998 	.word	0x00004998
    2ab8:	00004a24 	.word	0x00004a24
    2abc:	10001138 	.word	0x10001138
    2ac0:	00004a3c 	.word	0x00004a3c

00002ac4 <am_hal_iom_spi_write>:
{
    2ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2ac8:	2801      	cmp	r0, #1
{
    2aca:	b08a      	sub	sp, #40	; 0x28
    2acc:	4604      	mov	r4, r0
    2ace:	460f      	mov	r7, r1
    2ad0:	4690      	mov	r8, r2
    2ad2:	461e      	mov	r6, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2ad4:	d905      	bls.n	2ae2 <am_hal_iom_spi_write+0x1e>
    2ad6:	4a32      	ldr	r2, [pc, #200]	; (2ba0 <am_hal_iom_spi_write+0xdc>)
    2ad8:	4832      	ldr	r0, [pc, #200]	; (2ba4 <am_hal_iom_spi_write+0xe0>)
    2ada:	f240 118f 	movw	r1, #399	; 0x18f
    2ade:	f000 fe5b 	bl	3798 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2ae2:	b18e      	cbz	r6, 2b08 <am_hal_iom_spi_write+0x44>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    2ae4:	0065      	lsls	r5, r4, #1
    2ae6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 2bb8 <am_hal_iom_spi_write+0xf4>
    2aea:	192a      	adds	r2, r5, r4
    2aec:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    2af0:	6943      	ldr	r3, [r0, #20]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d032      	beq.n	2b5c <am_hal_iom_spi_write+0x98>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2af6:	2c01      	cmp	r4, #1
    2af8:	d90d      	bls.n	2b16 <am_hal_iom_spi_write+0x52>
        am_hal_iom_queue_flush(ui32Module);
    2afa:	4e2b      	ldr	r6, [pc, #172]	; (2ba8 <am_hal_iom_spi_write+0xe4>)
    2afc:	4620      	mov	r0, r4
    2afe:	6834      	ldr	r4, [r6, #0]
    2b00:	47a0      	blx	r4
}
    2b02:	b00a      	add	sp, #40	; 0x28
    2b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2b08:	4a28      	ldr	r2, [pc, #160]	; (2bac <am_hal_iom_spi_write+0xe8>)
    2b0a:	4826      	ldr	r0, [pc, #152]	; (2ba4 <am_hal_iom_spi_write+0xe0>)
    2b0c:	f240 1191 	movw	r1, #401	; 0x191
    2b10:	f000 fe42 	bl	3798 <am_hal_debug_error>
    2b14:	e7e6      	b.n	2ae4 <am_hal_iom_spi_write+0x20>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2b16:	b356      	cbz	r6, 2b6e <am_hal_iom_spi_write+0xaa>
    ui32Critical = am_hal_interrupt_master_disable();
    2b18:	f7fe ff50 	bl	19bc <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    2b1c:	4a24      	ldr	r2, [pc, #144]	; (2bb0 <am_hal_iom_spi_write+0xec>)
    ui32Critical = am_hal_interrupt_master_disable();
    2b1e:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    2b20:	5d10      	ldrb	r0, [r2, r4]
    2b22:	b928      	cbnz	r0, 2b30 <am_hal_iom_spi_write+0x6c>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    2b24:	192b      	adds	r3, r5, r4
    2b26:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    2b2a:	f8dc 1008 	ldr.w	r1, [ip, #8]
    2b2e:	b361      	cbz	r1, 2b8a <am_hal_iom_spi_write+0xc6>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2b30:	4425      	add	r5, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    2b32:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    2b34:	9705      	str	r7, [sp, #20]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2b36:	eb09 00c5 	add.w	r0, r9, r5, lsl #3
        sIOMTransaction.ui32Options = ui32Options;
    2b3a:	9f12      	ldr	r7, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    2b3c:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2b3e:	2201      	movs	r2, #1
    2b40:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    2b42:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    2b46:	9607      	str	r6, [sp, #28]
        sIOMTransaction.ui32Options = ui32Options;
    2b48:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    2b4a:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    2b4c:	9309      	str	r3, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2b4e:	f000 fd05 	bl	355c <am_hal_queue_item_add>
    2b52:	b198      	cbz	r0, 2b7c <am_hal_iom_spi_write+0xb8>
    am_hal_interrupt_master_set(ui32Critical);
    2b54:	4650      	mov	r0, sl
    2b56:	f7fe ff35 	bl	19c4 <am_hal_interrupt_master_set>
    2b5a:	e7ce      	b.n	2afa <am_hal_iom_spi_write+0x36>
        am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    2b5c:	9912      	ldr	r1, [sp, #72]	; 0x48
    2b5e:	9100      	str	r1, [sp, #0]
    2b60:	4633      	mov	r3, r6
    2b62:	4642      	mov	r2, r8
    2b64:	4639      	mov	r1, r7
    2b66:	4620      	mov	r0, r4
    2b68:	f7ff fe00 	bl	276c <am_hal_iom_spi_write_nq>
    2b6c:	e7c9      	b.n	2b02 <am_hal_iom_spi_write+0x3e>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2b6e:	4a0f      	ldr	r2, [pc, #60]	; (2bac <am_hal_iom_spi_write+0xe8>)
    2b70:	480c      	ldr	r0, [pc, #48]	; (2ba4 <am_hal_iom_spi_write+0xe0>)
    2b72:	f640 218c 	movw	r1, #2700	; 0xa8c
    2b76:	f000 fe0f 	bl	3798 <am_hal_debug_error>
    2b7a:	e7cd      	b.n	2b18 <am_hal_iom_spi_write+0x54>
            am_hal_debug_assert_msg(0,
    2b7c:	4a0d      	ldr	r2, [pc, #52]	; (2bb4 <am_hal_iom_spi_write+0xf0>)
    2b7e:	4809      	ldr	r0, [pc, #36]	; (2ba4 <am_hal_iom_spi_write+0xe0>)
    2b80:	f640 21bd 	movw	r1, #2749	; 0xabd
    2b84:	f000 fe08 	bl	3798 <am_hal_debug_error>
    2b88:	e7e4      	b.n	2b54 <am_hal_iom_spi_write+0x90>
    2b8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2b8c:	9101      	str	r1, [sp, #4]
    2b8e:	9200      	str	r2, [sp, #0]
    2b90:	4633      	mov	r3, r6
    2b92:	4642      	mov	r2, r8
    2b94:	4639      	mov	r1, r7
    2b96:	4620      	mov	r0, r4
    2b98:	f7fe ffe2 	bl	1b60 <am_hal_iom_spi_write_nb.part.6>
    2b9c:	e7da      	b.n	2b54 <am_hal_iom_spi_write+0x90>
    2b9e:	bf00      	nop
    2ba0:	00004a70 	.word	0x00004a70
    2ba4:	00004934 	.word	0x00004934
    2ba8:	10001018 	.word	0x10001018
    2bac:	00004910 	.word	0x00004910
    2bb0:	10001138 	.word	0x10001138
    2bb4:	000049b0 	.word	0x000049b0
    2bb8:	1000169c 	.word	0x1000169c

00002bbc <am_hal_iom_spi_read_nq>:
{
    2bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bc0:	b085      	sub	sp, #20
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2bc2:	2801      	cmp	r0, #1
{
    2bc4:	4607      	mov	r7, r0
    2bc6:	4688      	mov	r8, r1
    2bc8:	4692      	mov	sl, r2
    2bca:	461d      	mov	r5, r3
    2bcc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2bce:	f240 81a2 	bls.w	2f16 <am_hal_iom_spi_read_nq+0x35a>
    2bd2:	4ab2      	ldr	r2, [pc, #712]	; (2e9c <am_hal_iom_spi_read_nq+0x2e0>)
    2bd4:	48b2      	ldr	r0, [pc, #712]	; (2ea0 <am_hal_iom_spi_read_nq+0x2e4>)
    2bd6:	f240 21ae 	movw	r1, #686	; 0x2ae
    2bda:	f000 fddd 	bl	3798 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2bde:	2d00      	cmp	r5, #0
    2be0:	f000 8168 	beq.w	2eb4 <am_hal_iom_spi_read_nq+0x2f8>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2be4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    2be8:	f080 8133 	bcs.w	2e52 <am_hal_iom_spi_read_nq+0x296>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2bec:	2f01      	cmp	r7, #1
    2bee:	f240 8139 	bls.w	2e64 <am_hal_iom_spi_read_nq+0x2a8>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2bf2:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    2bf6:	3404      	adds	r4, #4
    2bf8:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2bfa:	2000      	movs	r0, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2bfc:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2c00:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2c04:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2c08:	f504 7200 	add.w	r2, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2c0c:	f041 0301 	orr.w	r3, r1, #1
    2c10:	f504 7002 	add.w	r0, r4, #520	; 0x208
    2c14:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2c18:	9202      	str	r2, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2c1a:	9001      	str	r0, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    2c1c:	f026 4923 	bic.w	r9, r6, #2734686208	; 0xa3000000
    2c20:	f009 2cff 	and.w	ip, r9, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2c24:	ea4f 4308 	mov.w	r3, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    2c28:	f04c 4100 	orr.w	r1, ip, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    2c2c:	b2ee      	uxtb	r6, r5
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2c2e:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2c32:	430e      	orrs	r6, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2c34:	03e8      	lsls	r0, r5, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    2c36:	ea46 0102 	orr.w	r1, r6, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2c3a:	f000 63f0 	and.w	r3, r0, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    2c3e:	430b      	orrs	r3, r1
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2c40:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2c44:	f504 7801 	add.w	r8, r4, #516	; 0x204
    2c48:	2600      	movs	r6, #0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2c4a:	2f01      	cmp	r7, #1
    2c4c:	d927      	bls.n	2c9e <am_hal_iom_spi_read_nq+0xe2>
        if ( ui32BytesInFifo >= ui32NumBytes )
    2c4e:	b9f5      	cbnz	r5, 2c8e <am_hal_iom_spi_read_nq+0xd2>
        if ( bCmdCmp == true )
    2c50:	b90e      	cbnz	r6, 2c56 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    2c52:	f8d8 3000 	ldr.w	r3, [r8]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2c56:	4c93      	ldr	r4, [pc, #588]	; (2ea4 <am_hal_iom_spi_read_nq+0x2e8>)
    2c58:	2301      	movs	r3, #1
    2c5a:	461a      	mov	r2, r3
    2c5c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    2c60:	4641      	mov	r1, r8
    2c62:	f7fe fd8d 	bl	1780 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    2c66:	9a01      	ldr	r2, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2c68:	9d02      	ldr	r5, [sp, #8]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    2c6a:	f04b 0301 	orr.w	r3, fp, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    2c6e:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    2c70:	6013      	str	r3, [r2, #0]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2c72:	4607      	mov	r7, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2c74:	f8c5 b000 	str.w	fp, [r5]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    2c78:	d005      	beq.n	2c86 <am_hal_iom_spi_read_nq+0xca>
    2c7a:	4a8b      	ldr	r2, [pc, #556]	; (2ea8 <am_hal_iom_spi_read_nq+0x2ec>)
    2c7c:	4888      	ldr	r0, [pc, #544]	; (2ea0 <am_hal_iom_spi_read_nq+0x2e4>)
    2c7e:	f240 3101 	movw	r1, #769	; 0x301
    2c82:	f000 fd89 	bl	3798 <am_hal_debug_error>
}
    2c86:	4638      	mov	r0, r7
    2c88:	b005      	add	sp, #20
    2c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( bCmdCmp == true )
    2c8e:	2e00      	cmp	r6, #0
    2c90:	d1e1      	bne.n	2c56 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    2c92:	f8d8 6000 	ldr.w	r6, [r8]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2c96:	2f01      	cmp	r7, #1
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    2c98:	f006 0601 	and.w	r6, r6, #1
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2c9c:	d8d7      	bhi.n	2c4e <am_hal_iom_spi_read_nq+0x92>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2c9e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);
    2ca2:	f002 097f 	and.w	r9, r2, #127	; 0x7f
        if ( ui32BytesInFifo >= ui32NumBytes )
    2ca6:	45a9      	cmp	r9, r5
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2ca8:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32BytesInFifo >= ui32NumBytes )
    2cac:	d262      	bcs.n	2d74 <am_hal_iom_spi_read_nq+0x1b8>
        else if ( ui32BytesInFifo >= 4 )
    2cae:	f1b9 0f03 	cmp.w	r9, #3
    2cb2:	d954      	bls.n	2d5e <am_hal_iom_spi_read_nq+0x1a2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2cb4:	f8de 0000 	ldr.w	r0, [lr]
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    2cb8:	f029 0303 	bic.w	r3, r9, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2cbc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    2cc0:	428b      	cmp	r3, r1
    2cc2:	f200 8139 	bhi.w	2f38 <am_hal_iom_spi_read_nq+0x37c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2cc6:	4652      	mov	r2, sl
    2cc8:	6820      	ldr	r0, [r4, #0]
    2cca:	f842 0b04 	str.w	r0, [r2], #4
    2cce:	f009 097c 	and.w	r9, r9, #124	; 0x7c
    2cd2:	46d4      	mov	ip, sl
    2cd4:	44ca      	add	sl, r9
    2cd6:	ebaa 0e0c 	sub.w	lr, sl, ip
    2cda:	f1ae 0104 	sub.w	r1, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    2cde:	4552      	cmp	r2, sl
    2ce0:	f3c1 0082 	ubfx	r0, r1, #2, #3
    2ce4:	d03a      	beq.n	2d5c <am_hal_iom_spi_read_nq+0x1a0>
    2ce6:	b318      	cbz	r0, 2d30 <am_hal_iom_spi_read_nq+0x174>
    2ce8:	2801      	cmp	r0, #1
    2cea:	d01c      	beq.n	2d26 <am_hal_iom_spi_read_nq+0x16a>
    2cec:	2802      	cmp	r0, #2
    2cee:	d017      	beq.n	2d20 <am_hal_iom_spi_read_nq+0x164>
    2cf0:	2803      	cmp	r0, #3
    2cf2:	d012      	beq.n	2d1a <am_hal_iom_spi_read_nq+0x15e>
    2cf4:	2804      	cmp	r0, #4
    2cf6:	d00d      	beq.n	2d14 <am_hal_iom_spi_read_nq+0x158>
    2cf8:	2805      	cmp	r0, #5
    2cfa:	d008      	beq.n	2d0e <am_hal_iom_spi_read_nq+0x152>
    2cfc:	2806      	cmp	r0, #6
    2cfe:	d003      	beq.n	2d08 <am_hal_iom_spi_read_nq+0x14c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2d00:	6821      	ldr	r1, [r4, #0]
    2d02:	f8cc 1004 	str.w	r1, [ip, #4]
    2d06:	3204      	adds	r2, #4
    2d08:	6820      	ldr	r0, [r4, #0]
    2d0a:	f842 0b04 	str.w	r0, [r2], #4
    2d0e:	6821      	ldr	r1, [r4, #0]
    2d10:	f842 1b04 	str.w	r1, [r2], #4
    2d14:	6820      	ldr	r0, [r4, #0]
    2d16:	f842 0b04 	str.w	r0, [r2], #4
    2d1a:	6821      	ldr	r1, [r4, #0]
    2d1c:	f842 1b04 	str.w	r1, [r2], #4
    2d20:	6820      	ldr	r0, [r4, #0]
    2d22:	f842 0b04 	str.w	r0, [r2], #4
    2d26:	6821      	ldr	r1, [r4, #0]
    2d28:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2d2c:	4552      	cmp	r2, sl
    2d2e:	d015      	beq.n	2d5c <am_hal_iom_spi_read_nq+0x1a0>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2d30:	4694      	mov	ip, r2
    2d32:	6820      	ldr	r0, [r4, #0]
    2d34:	f84c 0b04 	str.w	r0, [ip], #4
    2d38:	6821      	ldr	r1, [r4, #0]
    2d3a:	6051      	str	r1, [r2, #4]
    2d3c:	6820      	ldr	r0, [r4, #0]
    2d3e:	f8cc 0004 	str.w	r0, [ip, #4]
    2d42:	6821      	ldr	r1, [r4, #0]
    2d44:	60d1      	str	r1, [r2, #12]
    2d46:	6820      	ldr	r0, [r4, #0]
    2d48:	6110      	str	r0, [r2, #16]
    2d4a:	6821      	ldr	r1, [r4, #0]
    2d4c:	6151      	str	r1, [r2, #20]
    2d4e:	6820      	ldr	r0, [r4, #0]
    2d50:	6190      	str	r0, [r2, #24]
    2d52:	6821      	ldr	r1, [r4, #0]
    2d54:	61d1      	str	r1, [r2, #28]
    2d56:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    2d58:	4552      	cmp	r2, sl
    2d5a:	d1e9      	bne.n	2d30 <am_hal_iom_spi_read_nq+0x174>
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    2d5c:	1aed      	subs	r5, r5, r3
        if ( bCmdCmp == true )
    2d5e:	2e00      	cmp	r6, #0
    2d60:	f47f af79 	bne.w	2c56 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    2d64:	f8d8 6000 	ldr.w	r6, [r8]
    2d68:	f006 0601 	and.w	r6, r6, #1
    while ( ui32NumBytes )
    2d6c:	2d00      	cmp	r5, #0
    2d6e:	f47f af6c 	bne.w	2c4a <am_hal_iom_spi_read_nq+0x8e>
    2d72:	e770      	b.n	2c56 <am_hal_iom_spi_read_nq+0x9a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2d74:	f8de 2000 	ldr.w	r2, [lr]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2d78:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    2d7c:	45a9      	cmp	r9, r5
    2d7e:	f0c0 80d4 	bcc.w	2f2a <am_hal_iom_spi_read_nq+0x36e>
    2d82:	f005 0103 	and.w	r1, r5, #3
    for ( i = 0; i < ui32NumWords; i++ )
    2d86:	08ad      	lsrs	r5, r5, #2
    2d88:	d04b      	beq.n	2e22 <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2d8a:	4653      	mov	r3, sl
    2d8c:	6820      	ldr	r0, [r4, #0]
    2d8e:	f843 0b04 	str.w	r0, [r3], #4
    2d92:	eb0a 0c85 	add.w	ip, sl, r5, lsl #2
    2d96:	ebac 0e0a 	sub.w	lr, ip, sl
    2d9a:	f1ae 0204 	sub.w	r2, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    2d9e:	4563      	cmp	r3, ip
    2da0:	f3c2 0082 	ubfx	r0, r2, #2, #3
    2da4:	d03d      	beq.n	2e22 <am_hal_iom_spi_read_nq+0x266>
    2da6:	b310      	cbz	r0, 2dee <am_hal_iom_spi_read_nq+0x232>
    2da8:	2801      	cmp	r0, #1
    2daa:	d01b      	beq.n	2de4 <am_hal_iom_spi_read_nq+0x228>
    2dac:	2802      	cmp	r0, #2
    2dae:	d016      	beq.n	2dde <am_hal_iom_spi_read_nq+0x222>
    2db0:	2803      	cmp	r0, #3
    2db2:	d011      	beq.n	2dd8 <am_hal_iom_spi_read_nq+0x21c>
    2db4:	2804      	cmp	r0, #4
    2db6:	d00c      	beq.n	2dd2 <am_hal_iom_spi_read_nq+0x216>
    2db8:	2805      	cmp	r0, #5
    2dba:	d007      	beq.n	2dcc <am_hal_iom_spi_read_nq+0x210>
    2dbc:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2dbe:	bf1c      	itt	ne
    2dc0:	6820      	ldrne	r0, [r4, #0]
    2dc2:	f843 0b04 	strne.w	r0, [r3], #4
    2dc6:	6822      	ldr	r2, [r4, #0]
    2dc8:	f843 2b04 	str.w	r2, [r3], #4
    2dcc:	6820      	ldr	r0, [r4, #0]
    2dce:	f843 0b04 	str.w	r0, [r3], #4
    2dd2:	6822      	ldr	r2, [r4, #0]
    2dd4:	f843 2b04 	str.w	r2, [r3], #4
    2dd8:	6820      	ldr	r0, [r4, #0]
    2dda:	f843 0b04 	str.w	r0, [r3], #4
    2dde:	6822      	ldr	r2, [r4, #0]
    2de0:	f843 2b04 	str.w	r2, [r3], #4
    2de4:	6820      	ldr	r0, [r4, #0]
    2de6:	f843 0b04 	str.w	r0, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2dea:	4563      	cmp	r3, ip
    2dec:	d019      	beq.n	2e22 <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2dee:	4699      	mov	r9, r3
    2df0:	f8d4 e000 	ldr.w	lr, [r4]
    2df4:	f849 eb04 	str.w	lr, [r9], #4
    2df8:	f8d4 e000 	ldr.w	lr, [r4]
    2dfc:	f8c3 e004 	str.w	lr, [r3, #4]
    2e00:	f8d4 e000 	ldr.w	lr, [r4]
    2e04:	f8c9 e004 	str.w	lr, [r9, #4]
    2e08:	6822      	ldr	r2, [r4, #0]
    2e0a:	60da      	str	r2, [r3, #12]
    2e0c:	6820      	ldr	r0, [r4, #0]
    2e0e:	6118      	str	r0, [r3, #16]
    2e10:	6822      	ldr	r2, [r4, #0]
    2e12:	615a      	str	r2, [r3, #20]
    2e14:	6820      	ldr	r0, [r4, #0]
    2e16:	6198      	str	r0, [r3, #24]
    2e18:	6822      	ldr	r2, [r4, #0]
    2e1a:	61da      	str	r2, [r3, #28]
    2e1c:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    2e1e:	4563      	cmp	r3, ip
    2e20:	d1e5      	bne.n	2dee <am_hal_iom_spi_read_nq+0x232>
    if ( ui32Leftovers )
    2e22:	2900      	cmp	r1, #0
    2e24:	f43f af14 	beq.w	2c50 <am_hal_iom_spi_read_nq+0x94>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2e28:	6824      	ldr	r4, [r4, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    2e2a:	f80a 4025 	strb.w	r4, [sl, r5, lsl #2]
        for ( j = 0; j < ui32Leftovers; j++ )
    2e2e:	2901      	cmp	r1, #1
        pui8Data = (uint8_t *) (&pui32Data[i]);
    2e30:	ea4f 0385 	mov.w	r3, r5, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    2e34:	f43f af0c 	beq.w	2c50 <am_hal_iom_spi_read_nq+0x94>
            pui8Data[j] = sTempBuffer.bytes[j];
    2e38:	449a      	add	sl, r3
        for ( j = 0; j < ui32Leftovers; j++ )
    2e3a:	2903      	cmp	r1, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    2e3c:	f3c4 2507 	ubfx	r5, r4, #8, #8
    2e40:	bf08      	it	eq
    2e42:	f3c4 4407 	ubfxeq	r4, r4, #16, #8
    2e46:	f88a 5001 	strb.w	r5, [sl, #1]
    2e4a:	bf08      	it	eq
    2e4c:	f88a 4002 	strbeq.w	r4, [sl, #2]
    2e50:	e6fe      	b.n	2c50 <am_hal_iom_spi_read_nq+0x94>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2e52:	4a16      	ldr	r2, [pc, #88]	; (2eac <am_hal_iom_spi_read_nq+0x2f0>)
    2e54:	4812      	ldr	r0, [pc, #72]	; (2ea0 <am_hal_iom_spi_read_nq+0x2e4>)
    2e56:	f240 21b5 	movw	r1, #693	; 0x2b5
    2e5a:	f000 fc9d 	bl	3798 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2e5e:	2f01      	cmp	r7, #1
    2e60:	f63f aec7 	bhi.w	2bf2 <am_hal_iom_spi_read_nq+0x36>
    2e64:	4912      	ldr	r1, [pc, #72]	; (2eb0 <am_hal_iom_spi_read_nq+0x2f4>)
    while ( g_bIomBusy[ui32Module] );
    2e66:	5dcb      	ldrb	r3, [r1, r7]
    2e68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d1fa      	bne.n	2e66 <am_hal_iom_spi_read_nq+0x2aa>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2e70:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    2e74:	3404      	adds	r4, #4
    2e76:	0324      	lsls	r4, r4, #12
    2e78:	f504 7000 	add.w	r0, r4, #512	; 0x200
    2e7c:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2e80:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2e84:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2e88:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2e8a:	f041 0301 	orr.w	r3, r1, #1
    2e8e:	f504 7202 	add.w	r2, r4, #520	; 0x208
    2e92:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    2e96:	9201      	str	r2, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2e98:	b335      	cbz	r5, 2ee8 <am_hal_iom_spi_read_nq+0x32c>
    2e9a:	e6bf      	b.n	2c1c <am_hal_iom_spi_read_nq+0x60>
    2e9c:	00004a70 	.word	0x00004a70
    2ea0:	00004934 	.word	0x00004934
    2ea4:	1000101c 	.word	0x1000101c
    2ea8:	00004998 	.word	0x00004998
    2eac:	00004a24 	.word	0x00004a24
    2eb0:	10001138 	.word	0x10001138
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2eb4:	4a25      	ldr	r2, [pc, #148]	; (2f4c <am_hal_iom_spi_read_nq+0x390>)
    2eb6:	4826      	ldr	r0, [pc, #152]	; (2f50 <am_hal_iom_spi_read_nq+0x394>)
    2eb8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    2ebc:	f000 fc6c 	bl	3798 <am_hal_debug_error>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2ec0:	f507 21a0 	add.w	r1, r7, #327680	; 0x50000
    2ec4:	3104      	adds	r1, #4
    2ec6:	030c      	lsls	r4, r1, #12
    2ec8:	f504 7000 	add.w	r0, r4, #512	; 0x200
    2ecc:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2ed0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2ed4:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2ed8:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2eda:	f042 0301 	orr.w	r3, r2, #1
    2ede:	f504 7502 	add.w	r5, r4, #520	; 0x208
    2ee2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    2ee6:	9501      	str	r5, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2ee8:	4819      	ldr	r0, [pc, #100]	; (2f50 <am_hal_iom_spi_read_nq+0x394>)
    2eea:	4a18      	ldr	r2, [pc, #96]	; (2f4c <am_hal_iom_spi_read_nq+0x390>)
    2eec:	f240 4104 	movw	r1, #1028	; 0x404
    ui32Command |= ui32Options & 0x5C00FF00;
    2ef0:	f026 4a23 	bic.w	sl, r6, #2734686208	; 0xa3000000
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2ef4:	f000 fc50 	bl	3798 <am_hal_debug_error>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2ef8:	ea4f 4108 	mov.w	r1, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    2efc:	f00a 2cff 	and.w	ip, sl, #4278255360	; 0xff00ff00
    2f00:	f04c 4900 	orr.w	r9, ip, #2147483648	; 0x80000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2f04:	f401 26e0 	and.w	r6, r1, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2f08:	ea49 0006 	orr.w	r0, r9, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2f0c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    2f10:	f504 7801 	add.w	r8, r4, #516	; 0x204
    2f14:	e69f      	b.n	2c56 <am_hal_iom_spi_read_nq+0x9a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2f16:	2b00      	cmp	r3, #0
    2f18:	f47f ae64 	bne.w	2be4 <am_hal_iom_spi_read_nq+0x28>
    2f1c:	4a0b      	ldr	r2, [pc, #44]	; (2f4c <am_hal_iom_spi_read_nq+0x390>)
    2f1e:	480c      	ldr	r0, [pc, #48]	; (2f50 <am_hal_iom_spi_read_nq+0x394>)
    2f20:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    2f24:	f000 fc38 	bl	3798 <am_hal_debug_error>
    2f28:	e79c      	b.n	2e64 <am_hal_iom_spi_read_nq+0x2a8>
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2f2a:	4a0a      	ldr	r2, [pc, #40]	; (2f54 <am_hal_iom_spi_read_nq+0x398>)
    2f2c:	4808      	ldr	r0, [pc, #32]	; (2f50 <am_hal_iom_spi_read_nq+0x394>)
    2f2e:	f640 010e 	movw	r1, #2062	; 0x80e
    2f32:	f000 fc31 	bl	3798 <am_hal_debug_error>
    2f36:	e724      	b.n	2d82 <am_hal_iom_spi_read_nq+0x1c6>
    2f38:	4a06      	ldr	r2, [pc, #24]	; (2f54 <am_hal_iom_spi_read_nq+0x398>)
    2f3a:	4805      	ldr	r0, [pc, #20]	; (2f50 <am_hal_iom_spi_read_nq+0x394>)
    2f3c:	9303      	str	r3, [sp, #12]
    2f3e:	f640 010e 	movw	r1, #2062	; 0x80e
    2f42:	f000 fc29 	bl	3798 <am_hal_debug_error>
    2f46:	9b03      	ldr	r3, [sp, #12]
    2f48:	e6bd      	b.n	2cc6 <am_hal_iom_spi_read_nq+0x10a>
    2f4a:	bf00      	nop
    2f4c:	00004910 	.word	0x00004910
    2f50:	00004934 	.word	0x00004934
    2f54:	00004960 	.word	0x00004960

00002f58 <am_hal_iom_spi_read_nb>:
{
    2f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2f5c:	2801      	cmp	r0, #1
{
    2f5e:	4604      	mov	r4, r0
    2f60:	460f      	mov	r7, r1
    2f62:	4691      	mov	r9, r2
    2f64:	461e      	mov	r6, r3
    2f66:	f8dd 8020 	ldr.w	r8, [sp, #32]
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2f6a:	d944      	bls.n	2ff6 <am_hal_iom_spi_read_nb+0x9e>
    2f6c:	4a4a      	ldr	r2, [pc, #296]	; (3098 <am_hal_iom_spi_read_nb+0x140>)
    2f6e:	484b      	ldr	r0, [pc, #300]	; (309c <am_hal_iom_spi_read_nb+0x144>)
    2f70:	f240 319d 	movw	r1, #925	; 0x39d
    2f74:	f000 fc10 	bl	3798 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2f78:	2e00      	cmp	r6, #0
    2f7a:	d06b      	beq.n	3054 <am_hal_iom_spi_read_nb+0xfc>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2f7c:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    2f80:	d232      	bcs.n	2fe8 <am_hal_iom_spi_read_nb+0x90>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2f82:	2c01      	cmp	r4, #1
    2f84:	d93f      	bls.n	3006 <am_hal_iom_spi_read_nb+0xae>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2f86:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    2f8a:	4845      	ldr	r0, [pc, #276]	; (30a0 <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2f8c:	4945      	ldr	r1, [pc, #276]	; (30a4 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    2f8e:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2f90:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    2f92:	5503      	strb	r3, [r0, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2f94:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2f96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2f9a:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2f9e:	00a0      	lsls	r0, r4, #2
    2fa0:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2fa2:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2fa6:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2fa8:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2fac:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2fae:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    2fb0:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    2fb4:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2fb6:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2fb8:	f8c3 800c 	str.w	r8, [r3, #12]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2fbc:	043f      	lsls	r7, r7, #16
    ui32Command |= ui32Options & 0x5C00FF00;
    2fbe:	f028 4323 	bic.w	r3, r8, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2fc2:	f407 2ce0 	and.w	ip, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2fc6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
    2fca:	ea4c 0402 	orr.w	r4, ip, r2
    2fce:	f044 4100 	orr.w	r1, r4, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    2fd2:	b2f0      	uxtb	r0, r6
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2fd4:	03f6      	lsls	r6, r6, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    2fd6:	4308      	orrs	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2fd8:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    2fdc:	4338      	orrs	r0, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2fde:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
}
    2fe2:	2001      	movs	r0, #1
    2fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2fe8:	4a2f      	ldr	r2, [pc, #188]	; (30a8 <am_hal_iom_spi_read_nb+0x150>)
    2fea:	482c      	ldr	r0, [pc, #176]	; (309c <am_hal_iom_spi_read_nb+0x144>)
    2fec:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    2ff0:	f000 fbd2 	bl	3798 <am_hal_debug_error>
    2ff4:	e7c5      	b.n	2f82 <am_hal_iom_spi_read_nb+0x2a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d1c0      	bne.n	2f7c <am_hal_iom_spi_read_nb+0x24>
    2ffa:	4a2c      	ldr	r2, [pc, #176]	; (30ac <am_hal_iom_spi_read_nb+0x154>)
    2ffc:	4827      	ldr	r0, [pc, #156]	; (309c <am_hal_iom_spi_read_nb+0x144>)
    2ffe:	f240 319f 	movw	r1, #927	; 0x39f
    3002:	f000 fbc9 	bl	3798 <am_hal_debug_error>
    3006:	4a26      	ldr	r2, [pc, #152]	; (30a0 <am_hal_iom_spi_read_nb+0x148>)
    while ( g_bIomBusy[ui32Module] );
    3008:	5d13      	ldrb	r3, [r2, r4]
    300a:	2b00      	cmp	r3, #0
    300c:	d1fc      	bne.n	3008 <am_hal_iom_spi_read_nb+0xb0>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    300e:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    3012:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3014:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    3016:	5510      	strb	r0, [r2, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3018:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    301a:	4922      	ldr	r1, [pc, #136]	; (30a4 <am_hal_iom_spi_read_nb+0x14c>)
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    301c:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3020:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3024:	00a0      	lsls	r0, r4, #2
    3026:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3028:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    302c:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    302e:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3032:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    3034:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    3036:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    303a:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    303c:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    303e:	f8c3 800c 	str.w	r8, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3042:	2e00      	cmp	r6, #0
    3044:	d1ba      	bne.n	2fbc <am_hal_iom_spi_read_nb+0x64>
    3046:	4a19      	ldr	r2, [pc, #100]	; (30ac <am_hal_iom_spi_read_nb+0x154>)
    3048:	4814      	ldr	r0, [pc, #80]	; (309c <am_hal_iom_spi_read_nb+0x144>)
    304a:	f240 4104 	movw	r1, #1028	; 0x404
    304e:	f000 fba3 	bl	3798 <am_hal_debug_error>
    3052:	e7b3      	b.n	2fbc <am_hal_iom_spi_read_nb+0x64>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3054:	4a15      	ldr	r2, [pc, #84]	; (30ac <am_hal_iom_spi_read_nb+0x154>)
    3056:	4811      	ldr	r0, [pc, #68]	; (309c <am_hal_iom_spi_read_nb+0x144>)
    3058:	f240 319f 	movw	r1, #927	; 0x39f
    305c:	f000 fb9c 	bl	3798 <am_hal_debug_error>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3060:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    3064:	4b0e      	ldr	r3, [pc, #56]	; (30a0 <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3066:	480f      	ldr	r0, [pc, #60]	; (30a4 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    3068:	2201      	movs	r2, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    306a:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    306c:	551a      	strb	r2, [r3, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    306e:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3070:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3074:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3078:	00a2      	lsls	r2, r4, #2
    307a:	1883      	adds	r3, r0, r2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    307c:	f041 0401 	orr.w	r4, r1, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3080:	2102      	movs	r1, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    3082:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3086:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    3088:	9809      	ldr	r0, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    308a:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    308e:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    3090:	6118      	str	r0, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    3092:	f8c3 800c 	str.w	r8, [r3, #12]
    3096:	e7d6      	b.n	3046 <am_hal_iom_spi_read_nb+0xee>
    3098:	00004a70 	.word	0x00004a70
    309c:	00004934 	.word	0x00004934
    30a0:	10001138 	.word	0x10001138
    30a4:	10001674 	.word	0x10001674
    30a8:	00004a24 	.word	0x00004a24
    30ac:	00004910 	.word	0x00004910

000030b0 <am_hal_iom_spi_read>:
{
    30b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    30b4:	2801      	cmp	r0, #1
{
    30b6:	b08a      	sub	sp, #40	; 0x28
    30b8:	4604      	mov	r4, r0
    30ba:	460f      	mov	r7, r1
    30bc:	4690      	mov	r8, r2
    30be:	461d      	mov	r5, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    30c0:	d905      	bls.n	30ce <am_hal_iom_spi_read+0x1e>
    30c2:	4a37      	ldr	r2, [pc, #220]	; (31a0 <am_hal_iom_spi_read+0xf0>)
    30c4:	4837      	ldr	r0, [pc, #220]	; (31a4 <am_hal_iom_spi_read+0xf4>)
    30c6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    30ca:	f000 fb65 	bl	3798 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    30ce:	b1dd      	cbz	r5, 3108 <am_hal_iom_spi_read+0x58>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    30d0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    30d4:	d211      	bcs.n	30fa <am_hal_iom_spi_read+0x4a>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    30d6:	0066      	lsls	r6, r4, #1
    30d8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 31bc <am_hal_iom_spi_read+0x10c>
    30dc:	1932      	adds	r2, r6, r4
    30de:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    30e2:	6943      	ldr	r3, [r0, #20]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d03a      	beq.n	315e <am_hal_iom_spi_read+0xae>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    30e8:	2c01      	cmp	r4, #1
    30ea:	d914      	bls.n	3116 <am_hal_iom_spi_read+0x66>
        am_hal_iom_queue_flush(ui32Module);
    30ec:	492e      	ldr	r1, [pc, #184]	; (31a8 <am_hal_iom_spi_read+0xf8>)
    30ee:	4620      	mov	r0, r4
    30f0:	680c      	ldr	r4, [r1, #0]
    30f2:	47a0      	blx	r4
}
    30f4:	b00a      	add	sp, #40	; 0x28
    30f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    30fa:	4a2c      	ldr	r2, [pc, #176]	; (31ac <am_hal_iom_spi_read+0xfc>)
    30fc:	4829      	ldr	r0, [pc, #164]	; (31a4 <am_hal_iom_spi_read+0xf4>)
    30fe:	f240 11d9 	movw	r1, #473	; 0x1d9
    3102:	f000 fb49 	bl	3798 <am_hal_debug_error>
    3106:	e7e6      	b.n	30d6 <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3108:	4a29      	ldr	r2, [pc, #164]	; (31b0 <am_hal_iom_spi_read+0x100>)
    310a:	4826      	ldr	r0, [pc, #152]	; (31a4 <am_hal_iom_spi_read+0xf4>)
    310c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    3110:	f000 fb42 	bl	3798 <am_hal_debug_error>
    3114:	e7df      	b.n	30d6 <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3116:	b35d      	cbz	r5, 3170 <am_hal_iom_spi_read+0xc0>
    ui32Critical = am_hal_interrupt_master_disable();
    3118:	f7fe fc50 	bl	19bc <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    311c:	4a25      	ldr	r2, [pc, #148]	; (31b4 <am_hal_iom_spi_read+0x104>)
    ui32Critical = am_hal_interrupt_master_disable();
    311e:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    3120:	5d10      	ldrb	r0, [r2, r4]
    3122:	b928      	cbnz	r0, 3130 <am_hal_iom_spi_read+0x80>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    3124:	1933      	adds	r3, r6, r4
    3126:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    312a:	f8dc 1008 	ldr.w	r1, [ip, #8]
    312e:	b369      	cbz	r1, 318c <am_hal_iom_spi_read+0xdc>
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    3130:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3132:	4426      	add	r6, r4
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    3134:	9705      	str	r7, [sp, #20]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    3136:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
    3138:	2700      	movs	r7, #0
        sIOMTransaction.ui32Options = ui32Options;
    313a:	9d12      	ldr	r5, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    313c:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    313e:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    3142:	461a      	mov	r2, r3
    3144:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    3146:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32Options = ui32Options;
    314a:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    314c:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    314e:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3150:	f000 fa04 	bl	355c <am_hal_queue_item_add>
    3154:	b198      	cbz	r0, 317e <am_hal_iom_spi_read+0xce>
    am_hal_interrupt_master_set(ui32Critical);
    3156:	4650      	mov	r0, sl
    3158:	f7fe fc34 	bl	19c4 <am_hal_interrupt_master_set>
    315c:	e7c6      	b.n	30ec <am_hal_iom_spi_read+0x3c>
        am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    315e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3160:	9100      	str	r1, [sp, #0]
    3162:	462b      	mov	r3, r5
    3164:	4642      	mov	r2, r8
    3166:	4639      	mov	r1, r7
    3168:	4620      	mov	r0, r4
    316a:	f7ff fd27 	bl	2bbc <am_hal_iom_spi_read_nq>
    316e:	e7c1      	b.n	30f4 <am_hal_iom_spi_read+0x44>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3170:	4a0f      	ldr	r2, [pc, #60]	; (31b0 <am_hal_iom_spi_read+0x100>)
    3172:	480c      	ldr	r0, [pc, #48]	; (31a4 <am_hal_iom_spi_read+0xf4>)
    3174:	f640 21f8 	movw	r1, #2808	; 0xaf8
    3178:	f000 fb0e 	bl	3798 <am_hal_debug_error>
    317c:	e7cc      	b.n	3118 <am_hal_iom_spi_read+0x68>
            am_hal_debug_assert_msg(0,
    317e:	4a0e      	ldr	r2, [pc, #56]	; (31b8 <am_hal_iom_spi_read+0x108>)
    3180:	4808      	ldr	r0, [pc, #32]	; (31a4 <am_hal_iom_spi_read+0xf4>)
    3182:	f640 3128 	movw	r1, #2856	; 0xb28
    3186:	f000 fb07 	bl	3798 <am_hal_debug_error>
    318a:	e7e4      	b.n	3156 <am_hal_iom_spi_read+0xa6>
        am_hal_iom_spi_read_nb(ui32Module, ui32ChipSelect, pui32Data,
    318c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    318e:	9101      	str	r1, [sp, #4]
    3190:	9200      	str	r2, [sp, #0]
    3192:	462b      	mov	r3, r5
    3194:	4642      	mov	r2, r8
    3196:	4639      	mov	r1, r7
    3198:	4620      	mov	r0, r4
    319a:	f7ff fedd 	bl	2f58 <am_hal_iom_spi_read_nb>
    319e:	e7da      	b.n	3156 <am_hal_iom_spi_read+0xa6>
    31a0:	00004a70 	.word	0x00004a70
    31a4:	00004934 	.word	0x00004934
    31a8:	10001018 	.word	0x10001018
    31ac:	00004a24 	.word	0x00004a24
    31b0:	00004910 	.word	0x00004910
    31b4:	10001138 	.word	0x10001138
    31b8:	000049b0 	.word	0x000049b0
    31bc:	1000169c 	.word	0x1000169c

000031c0 <am_hal_iom_i2c_write>:
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    31c0:	2802      	cmp	r0, #2
    31c2:	d823      	bhi.n	320c <am_hal_iom_i2c_write+0x4c>
{
    31c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31c8:	461d      	mov	r5, r3
    31ca:	b08a      	sub	sp, #40	; 0x28
    31cc:	4617      	mov	r7, r2
    31ce:	460e      	mov	r6, r1
    31d0:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    31d2:	b1e3      	cbz	r3, 320e <am_hal_iom_i2c_write+0x4e>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    31d4:	2802      	cmp	r0, #2
    31d6:	d022      	beq.n	321e <am_hal_iom_i2c_write+0x5e>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    31d8:	2bff      	cmp	r3, #255	; 0xff
    31da:	d830      	bhi.n	323e <am_hal_iom_i2c_write+0x7e>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    31dc:	ea4f 0844 	mov.w	r8, r4, lsl #1
    31e0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 3324 <am_hal_iom_i2c_write+0x164>
    31e4:	eb08 0204 	add.w	r2, r8, r4
    31e8:	eb09 0ac2 	add.w	sl, r9, r2, lsl #3
    31ec:	f8da 3014 	ldr.w	r3, [sl, #20]
    31f0:	2b00      	cmp	r3, #0
    31f2:	f040 8081 	bne.w	32f8 <am_hal_iom_i2c_write+0x138>
    31f6:	9812      	ldr	r0, [sp, #72]	; 0x48
    31f8:	9000      	str	r0, [sp, #0]
    31fa:	462b      	mov	r3, r5
    31fc:	463a      	mov	r2, r7
    31fe:	4631      	mov	r1, r6
    3200:	4620      	mov	r0, r4
    3202:	f7fe fd7f 	bl	1d04 <am_hal_iom_i2c_write_nq.part.7>
}
    3206:	b00a      	add	sp, #40	; 0x28
    3208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    320c:	4770      	bx	lr
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    320e:	4a3f      	ldr	r2, [pc, #252]	; (330c <am_hal_iom_i2c_write+0x14c>)
    3210:	483f      	ldr	r0, [pc, #252]	; (3310 <am_hal_iom_i2c_write+0x150>)
    3212:	f44f 61af 	mov.w	r1, #1400	; 0x578
    3216:	f000 fabf 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    321a:	2c02      	cmp	r4, #2
    321c:	d1de      	bne.n	31dc <am_hal_iom_i2c_write+0x1c>
        if ( ui32Options & AM_HAL_IOM_RAW )
    321e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3220:	004a      	lsls	r2, r1, #1
    3222:	d559      	bpl.n	32d8 <am_hal_iom_i2c_write+0x118>
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3224:	f3c1 7400 	ubfx	r4, r1, #28, #1
    3228:	0070      	lsls	r0, r6, #1
    322a:	2300      	movs	r3, #0
    322c:	463a      	mov	r2, r7
    322e:	4629      	mov	r1, r5
    3230:	e88d 0018 	stmia.w	sp, {r3, r4}
    3234:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3238:	f000 ff02 	bl	4040 <am_hal_i2c_bit_bang_send>
    323c:	e7e3      	b.n	3206 <am_hal_iom_i2c_write+0x46>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    323e:	4834      	ldr	r0, [pc, #208]	; (3310 <am_hal_iom_i2c_write+0x150>)
    3240:	4a34      	ldr	r2, [pc, #208]	; (3314 <am_hal_iom_i2c_write+0x154>)
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    3242:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 3324 <am_hal_iom_i2c_write+0x164>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    3246:	f44f 61b3 	mov.w	r1, #1432	; 0x598
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    324a:	ea4f 0844 	mov.w	r8, r4, lsl #1
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    324e:	f000 faa3 	bl	3798 <am_hal_debug_error>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    3252:	eb08 0304 	add.w	r3, r8, r4
    3256:	eb09 00c3 	add.w	r0, r9, r3, lsl #3
    325a:	6941      	ldr	r1, [r0, #20]
    325c:	2900      	cmp	r1, #0
    325e:	d0ca      	beq.n	31f6 <am_hal_iom_i2c_write+0x36>
    ui32Critical = am_hal_interrupt_master_disable();
    3260:	f7fe fbac 	bl	19bc <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    3264:	492c      	ldr	r1, [pc, #176]	; (3318 <am_hal_iom_i2c_write+0x158>)
    3266:	5d0a      	ldrb	r2, [r1, r4]
    ui32Critical = am_hal_interrupt_master_disable();
    3268:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    326a:	b9ca      	cbnz	r2, 32a0 <am_hal_iom_i2c_write+0xe0>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    326c:	eb08 0c04 	add.w	ip, r8, r4
    3270:	eb09 0ecc 	add.w	lr, r9, ip, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    3274:	f8de 3008 	ldr.w	r3, [lr, #8]
    3278:	b993      	cbnz	r3, 32a0 <am_hal_iom_i2c_write+0xe0>
    327a:	9812      	ldr	r0, [sp, #72]	; 0x48
    327c:	9301      	str	r3, [sp, #4]
    327e:	9000      	str	r0, [sp, #0]
    3280:	462b      	mov	r3, r5
    3282:	463a      	mov	r2, r7
    3284:	4631      	mov	r1, r6
    3286:	4620      	mov	r0, r4
    3288:	f7fe fefa 	bl	2080 <am_hal_iom_i2c_write_nb.part.9>
        am_hal_iom_queue_flush(ui32Module);
    328c:	4e23      	ldr	r6, [pc, #140]	; (331c <am_hal_iom_i2c_write+0x15c>)
    am_hal_interrupt_master_set(ui32Critical);
    328e:	4650      	mov	r0, sl
    3290:	f7fe fb98 	bl	19c4 <am_hal_interrupt_master_set>
        am_hal_iom_queue_flush(ui32Module);
    3294:	4620      	mov	r0, r4
    3296:	6834      	ldr	r4, [r6, #0]
    3298:	47a0      	blx	r4
}
    329a:	b00a      	add	sp, #40	; 0x28
    329c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32a0:	44a0      	add	r8, r4
    32a2:	eb09 00c8 	add.w	r0, r9, r8, lsl #3
        sIOMTransaction.pfnCallback = pfnCallback;
    32a6:	2300      	movs	r3, #0
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    32a8:	f04f 0902 	mov.w	r9, #2
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    32ac:	9507      	str	r5, [sp, #28]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32ae:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    32b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    32b2:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32b4:	a903      	add	r1, sp, #12
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    32b6:	9605      	str	r6, [sp, #20]
        sIOMTransaction.pui32Data = pui32Data;
    32b8:	9706      	str	r7, [sp, #24]
        sIOMTransaction.ui32Options = ui32Options;
    32ba:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    32bc:	f8cd 900c 	str.w	r9, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    32c0:	9309      	str	r3, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32c2:	f000 f94b 	bl	355c <am_hal_queue_item_add>
    32c6:	2800      	cmp	r0, #0
    32c8:	d1e0      	bne.n	328c <am_hal_iom_i2c_write+0xcc>
            am_hal_debug_assert_msg(0,
    32ca:	4a15      	ldr	r2, [pc, #84]	; (3320 <am_hal_iom_i2c_write+0x160>)
    32cc:	4810      	ldr	r0, [pc, #64]	; (3310 <am_hal_iom_i2c_write+0x150>)
    32ce:	f640 3194 	movw	r1, #2964	; 0xb94
    32d2:	f000 fa61 	bl	3798 <am_hal_debug_error>
    32d6:	e7d9      	b.n	328c <am_hal_iom_i2c_write+0xcc>
            am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    32d8:	0072      	lsls	r2, r6, #1
    32da:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
    32de:	463a      	mov	r2, r7
    32e0:	9f12      	ldr	r7, [sp, #72]	; 0x48
    32e2:	f3c1 7400 	ubfx	r4, r1, #28, #1
    32e6:	2301      	movs	r3, #1
    32e8:	e88d 0018 	stmia.w	sp, {r3, r4}
    32ec:	4629      	mov	r1, r5
    32ee:	f3c7 2307 	ubfx	r3, r7, #8, #8
    32f2:	f000 fea5 	bl	4040 <am_hal_i2c_bit_bang_send>
    32f6:	e786      	b.n	3206 <am_hal_iom_i2c_write+0x46>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    32f8:	2d00      	cmp	r5, #0
    32fa:	d1b1      	bne.n	3260 <am_hal_iom_i2c_write+0xa0>
    32fc:	4a03      	ldr	r2, [pc, #12]	; (330c <am_hal_iom_i2c_write+0x14c>)
    32fe:	4804      	ldr	r0, [pc, #16]	; (3310 <am_hal_iom_i2c_write+0x150>)
    3300:	f640 3163 	movw	r1, #2915	; 0xb63
    3304:	f000 fa48 	bl	3798 <am_hal_debug_error>
    3308:	e7aa      	b.n	3260 <am_hal_iom_i2c_write+0xa0>
    330a:	bf00      	nop
    330c:	00004910 	.word	0x00004910
    3310:	00004934 	.word	0x00004934
    3314:	00004948 	.word	0x00004948
    3318:	10001138 	.word	0x10001138
    331c:	10001018 	.word	0x10001018
    3320:	000049b0 	.word	0x000049b0
    3324:	1000169c 	.word	0x1000169c

00003328 <am_hal_iom_i2c_read>:
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    3328:	2802      	cmp	r0, #2
    332a:	d823      	bhi.n	3374 <am_hal_iom_i2c_read+0x4c>
{
    332c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3330:	461d      	mov	r5, r3
    3332:	b08a      	sub	sp, #40	; 0x28
    3334:	4617      	mov	r7, r2
    3336:	460e      	mov	r6, r1
    3338:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    333a:	b1e3      	cbz	r3, 3376 <am_hal_iom_i2c_read+0x4e>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    333c:	2802      	cmp	r0, #2
    333e:	d022      	beq.n	3386 <am_hal_iom_i2c_read+0x5e>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    3340:	2bff      	cmp	r3, #255	; 0xff
    3342:	d831      	bhi.n	33a8 <am_hal_iom_i2c_read+0x80>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    3344:	ea4f 0844 	mov.w	r8, r4, lsl #1
    3348:	f8df 9144 	ldr.w	r9, [pc, #324]	; 3490 <am_hal_iom_i2c_read+0x168>
    334c:	eb08 0204 	add.w	r2, r8, r4
    3350:	eb09 0ac2 	add.w	sl, r9, r2, lsl #3
    3354:	f8da 3014 	ldr.w	r3, [sl, #20]
    3358:	2b00      	cmp	r3, #0
    335a:	f040 8083 	bne.w	3464 <am_hal_iom_i2c_read+0x13c>
    335e:	9812      	ldr	r0, [sp, #72]	; 0x48
    3360:	9000      	str	r0, [sp, #0]
    3362:	462b      	mov	r3, r5
    3364:	463a      	mov	r2, r7
    3366:	4631      	mov	r1, r6
    3368:	4620      	mov	r0, r4
    336a:	f7fe ff97 	bl	229c <am_hal_iom_i2c_read_nq.part.8>
}
    336e:	b00a      	add	sp, #40	; 0x28
    3370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3374:	4770      	bx	lr
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3376:	4a40      	ldr	r2, [pc, #256]	; (3478 <am_hal_iom_i2c_read+0x150>)
    3378:	4840      	ldr	r0, [pc, #256]	; (347c <am_hal_iom_i2c_read+0x154>)
    337a:	f240 51e6 	movw	r1, #1510	; 0x5e6
    337e:	f000 fa0b 	bl	3798 <am_hal_debug_error>
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    3382:	2c02      	cmp	r4, #2
    3384:	d1de      	bne.n	3344 <am_hal_iom_i2c_read+0x1c>
        if ( ui32Options & AM_HAL_IOM_RAW )
    3386:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3388:	005a      	lsls	r2, r3, #1
    338a:	d55a      	bpl.n	3442 <am_hal_iom_i2c_read+0x11a>
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    338c:	0070      	lsls	r0, r6, #1
    338e:	f3c3 7400 	ubfx	r4, r3, #28, #1
    3392:	f040 0601 	orr.w	r6, r0, #1
    3396:	2300      	movs	r3, #0
    3398:	b2f0      	uxtb	r0, r6
    339a:	463a      	mov	r2, r7
    339c:	4629      	mov	r1, r5
    339e:	e88d 0018 	stmia.w	sp, {r3, r4}
    33a2:	f000 f9fb 	bl	379c <am_hal_i2c_bit_bang_receive>
    33a6:	e7e2      	b.n	336e <am_hal_iom_i2c_read+0x46>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    33a8:	4834      	ldr	r0, [pc, #208]	; (347c <am_hal_iom_i2c_read+0x154>)
    33aa:	4a35      	ldr	r2, [pc, #212]	; (3480 <am_hal_iom_i2c_read+0x158>)
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    33ac:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 3490 <am_hal_iom_i2c_read+0x168>
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    33b0:	f240 6106 	movw	r1, #1542	; 0x606
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    33b4:	ea4f 0844 	mov.w	r8, r4, lsl #1
    am_hal_debug_assert_msg(ui32NumBytes < 256, "I2C transfer too big.");
    33b8:	f000 f9ee 	bl	3798 <am_hal_debug_error>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    33bc:	eb08 0304 	add.w	r3, r8, r4
    33c0:	eb09 00c3 	add.w	r0, r9, r3, lsl #3
    33c4:	6941      	ldr	r1, [r0, #20]
    33c6:	2900      	cmp	r1, #0
    33c8:	d0c9      	beq.n	335e <am_hal_iom_i2c_read+0x36>
    ui32Critical = am_hal_interrupt_master_disable();
    33ca:	f7fe faf7 	bl	19bc <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    33ce:	492d      	ldr	r1, [pc, #180]	; (3484 <am_hal_iom_i2c_read+0x15c>)
    33d0:	5d0a      	ldrb	r2, [r1, r4]
    ui32Critical = am_hal_interrupt_master_disable();
    33d2:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    33d4:	b9ca      	cbnz	r2, 340a <am_hal_iom_i2c_read+0xe2>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    33d6:	eb08 0c04 	add.w	ip, r8, r4
    33da:	eb09 0ecc 	add.w	lr, r9, ip, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    33de:	f8de 3008 	ldr.w	r3, [lr, #8]
    33e2:	b993      	cbnz	r3, 340a <am_hal_iom_i2c_read+0xe2>
    33e4:	9812      	ldr	r0, [sp, #72]	; 0x48
    33e6:	9301      	str	r3, [sp, #4]
    33e8:	9000      	str	r0, [sp, #0]
    33ea:	462b      	mov	r3, r5
    33ec:	463a      	mov	r2, r7
    33ee:	4631      	mov	r1, r6
    33f0:	4620      	mov	r0, r4
    33f2:	f7fe fb0d 	bl	1a10 <am_hal_iom_i2c_read_nb.part.10>
        am_hal_iom_queue_flush(ui32Module);
    33f6:	4e24      	ldr	r6, [pc, #144]	; (3488 <am_hal_iom_i2c_read+0x160>)
    am_hal_interrupt_master_set(ui32Critical);
    33f8:	4650      	mov	r0, sl
    33fa:	f7fe fae3 	bl	19c4 <am_hal_interrupt_master_set>
        am_hal_iom_queue_flush(ui32Module);
    33fe:	4620      	mov	r0, r4
    3400:	6834      	ldr	r4, [r6, #0]
    3402:	47a0      	blx	r4
}
    3404:	b00a      	add	sp, #40	; 0x28
    3406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    340a:	44a0      	add	r8, r4
    340c:	eb09 00c8 	add.w	r0, r9, r8, lsl #3
        sIOMTransaction.pfnCallback = pfnCallback;
    3410:	2300      	movs	r3, #0
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    3412:	f04f 0903 	mov.w	r9, #3
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    3416:	9507      	str	r5, [sp, #28]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3418:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    341a:	9d12      	ldr	r5, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    341c:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    341e:	a903      	add	r1, sp, #12
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    3420:	9605      	str	r6, [sp, #20]
        sIOMTransaction.pui32Data = pui32Data;
    3422:	9706      	str	r7, [sp, #24]
        sIOMTransaction.ui32Options = ui32Options;
    3424:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    3426:	f8cd 900c 	str.w	r9, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    342a:	9309      	str	r3, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    342c:	f000 f896 	bl	355c <am_hal_queue_item_add>
    3430:	2800      	cmp	r0, #0
    3432:	d1e0      	bne.n	33f6 <am_hal_iom_i2c_read+0xce>
            am_hal_debug_assert_msg(0, "The IOM queue is full. Allocate more"
    3434:	4a15      	ldr	r2, [pc, #84]	; (348c <am_hal_iom_i2c_read+0x164>)
    3436:	4811      	ldr	r0, [pc, #68]	; (347c <am_hal_iom_i2c_read+0x154>)
    3438:	f640 31ff 	movw	r1, #3071	; 0xbff
    343c:	f000 f9ac 	bl	3798 <am_hal_debug_error>
    3440:	e7d9      	b.n	33f6 <am_hal_iom_i2c_read+0xce>
            am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    3442:	0071      	lsls	r1, r6, #1
    3444:	f041 0201 	orr.w	r2, r1, #1
    3448:	b2d0      	uxtb	r0, r2
    344a:	463a      	mov	r2, r7
    344c:	9f12      	ldr	r7, [sp, #72]	; 0x48
    344e:	f3c3 7400 	ubfx	r4, r3, #28, #1
    3452:	2301      	movs	r3, #1
    3454:	e88d 0018 	stmia.w	sp, {r3, r4}
    3458:	4629      	mov	r1, r5
    345a:	f3c7 2307 	ubfx	r3, r7, #8, #8
    345e:	f000 f99d 	bl	379c <am_hal_i2c_bit_bang_receive>
    3462:	e784      	b.n	336e <am_hal_iom_i2c_read+0x46>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    3464:	2d00      	cmp	r5, #0
    3466:	d1b0      	bne.n	33ca <am_hal_iom_i2c_read+0xa2>
    3468:	4a03      	ldr	r2, [pc, #12]	; (3478 <am_hal_iom_i2c_read+0x150>)
    346a:	4804      	ldr	r0, [pc, #16]	; (347c <am_hal_iom_i2c_read+0x154>)
    346c:	f640 31cf 	movw	r1, #3023	; 0xbcf
    3470:	f000 f992 	bl	3798 <am_hal_debug_error>
    3474:	e7a9      	b.n	33ca <am_hal_iom_i2c_read+0xa2>
    3476:	bf00      	nop
    3478:	00004910 	.word	0x00004910
    347c:	00004934 	.word	0x00004934
    3480:	00004948 	.word	0x00004948
    3484:	10001138 	.word	0x10001138
    3488:	10001018 	.word	0x10001018
    348c:	000049b0 	.word	0x000049b0
    3490:	1000169c 	.word	0x1000169c

00003494 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    3494:	4b0d      	ldr	r3, [pc, #52]	; (34cc <am_hal_itm_enable+0x38>)
    3496:	6818      	ldr	r0, [r3, #0]
    3498:	07c2      	lsls	r2, r0, #31
    349a:	d416      	bmi.n	34ca <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    349c:	4a0c      	ldr	r2, [pc, #48]	; (34d0 <am_hal_itm_enable+0x3c>)
    349e:	6811      	ldr	r1, [r2, #0]
{
    34a0:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    34a2:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    34a6:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    34a8:	6815      	ldr	r5, [r2, #0]
    34aa:	01eb      	lsls	r3, r5, #7
    34ac:	d5fc      	bpl.n	34a8 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    34ae:	4809      	ldr	r0, [pc, #36]	; (34d4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    34b0:	4c09      	ldr	r4, [pc, #36]	; (34d8 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    34b2:	4d0a      	ldr	r5, [pc, #40]	; (34dc <am_hal_itm_enable+0x48>)
    34b4:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    34b6:	250f      	movs	r5, #15
    34b8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    34ba:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    34bc:	4908      	ldr	r1, [pc, #32]	; (34e0 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    34be:	4b09      	ldr	r3, [pc, #36]	; (34e4 <am_hal_itm_enable+0x50>)
    34c0:	4a09      	ldr	r2, [pc, #36]	; (34e8 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    34c2:	f04f 30ff 	mov.w	r0, #4294967295
    34c6:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    34c8:	601a      	str	r2, [r3, #0]
}
    34ca:	4770      	bx	lr
    34cc:	10001134 	.word	0x10001134
    34d0:	e000edfc 	.word	0xe000edfc
    34d4:	e0000fb0 	.word	0xe0000fb0
    34d8:	e0000e40 	.word	0xe0000e40
    34dc:	c5acce55 	.word	0xc5acce55
    34e0:	e0000e00 	.word	0xe0000e00
    34e4:	e0000e80 	.word	0xe0000e80
    34e8:	00150511 	.word	0x00150511

000034ec <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    34ec:	7803      	ldrb	r3, [r0, #0]
    34ee:	b1b3      	cbz	r3, 351e <am_hal_itm_print+0x32>
{
    34f0:	b410      	push	{r4}
    34f2:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    34f4:	2400      	movs	r4, #0
    34f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    34fa:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    34fc:	2900      	cmp	r1, #0
    34fe:	d1fa      	bne.n	34f6 <am_hal_itm_print+0xa>
    3500:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    3502:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    3506:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    350a:	f8dc 3000 	ldr.w	r3, [ip]
    350e:	2b00      	cmp	r3, #0
    3510:	d0fb      	beq.n	350a <am_hal_itm_print+0x1e>
    while (ui32Length)
    3512:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    3514:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    3518:	d1f5      	bne.n	3506 <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    351a:	f85d 4b04 	ldr.w	r4, [sp], #4
    351e:	4770      	bx	lr

00003520 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    3520:	4b02      	ldr	r3, [pc, #8]	; (352c <am_hal_mcuctrl_bandgap_disable+0xc>)
    3522:	f06f 0201 	mvn.w	r2, #1
    3526:	601a      	str	r2, [r3, #0]
    3528:	4770      	bx	lr
    352a:	bf00      	nop
    352c:	400200fc 	.word	0x400200fc

00003530 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3530:	4b08      	ldr	r3, [pc, #32]	; (3554 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    3532:	4a09      	ldr	r2, [pc, #36]	; (3558 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3534:	6819      	ldr	r1, [r3, #0]
    3536:	f041 0002 	orr.w	r0, r1, #2
    353a:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    353c:	6819      	ldr	r1, [r3, #0]
    353e:	f041 0001 	orr.w	r0, r1, #1
    3542:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    3544:	6813      	ldr	r3, [r2, #0]
    3546:	0799      	lsls	r1, r3, #30
    3548:	d5fc      	bpl.n	3544 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    354a:	4a03      	ldr	r2, [pc, #12]	; (3558 <am_hal_mcuctrl_bucks_enable+0x28>)
    354c:	6811      	ldr	r1, [r2, #0]
    354e:	07cb      	lsls	r3, r1, #31
    3550:	d5fc      	bpl.n	354c <am_hal_mcuctrl_bucks_enable+0x1c>
}
    3552:	4770      	bx	lr
    3554:	40020010 	.word	0x40020010
    3558:	40020014 	.word	0x40020014

0000355c <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    355e:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3560:	6907      	ldr	r7, [r0, #16]
{
    3562:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3564:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    3568:	f7fe fa28 	bl	19bc <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    356c:	68a5      	ldr	r5, [r4, #8]
    356e:	68e3      	ldr	r3, [r4, #12]
    3570:	1b59      	subs	r1, r3, r5
    3572:	428f      	cmp	r7, r1
    3574:	d87c      	bhi.n	3670 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    3576:	2f00      	cmp	r7, #0
    3578:	d073      	beq.n	3662 <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    357a:	4635      	mov	r5, r6
    357c:	6823      	ldr	r3, [r4, #0]
    357e:	6962      	ldr	r2, [r4, #20]
    3580:	f815 1b01 	ldrb.w	r1, [r5], #1
    3584:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3586:	6823      	ldr	r3, [r4, #0]
    3588:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    358c:	1c5a      	adds	r2, r3, #1
    358e:	19f1      	adds	r1, r6, r7
    3590:	f107 3cff 	add.w	ip, r7, #4294967295
    3594:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    3598:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    359a:	fb0e 2316 	mls	r3, lr, r6, r2
    359e:	6023      	str	r3, [r4, #0]
    35a0:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    35a4:	d05c      	beq.n	3660 <am_hal_queue_item_add+0x104>
    35a6:	b34a      	cbz	r2, 35fc <am_hal_queue_item_add+0xa0>
    35a8:	2a01      	cmp	r2, #1
    35aa:	d019      	beq.n	35e0 <am_hal_queue_item_add+0x84>
    35ac:	2a02      	cmp	r2, #2
    35ae:	d00b      	beq.n	35c8 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    35b0:	6962      	ldr	r2, [r4, #20]
    35b2:	f815 6b01 	ldrb.w	r6, [r5], #1
    35b6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    35b8:	6823      	ldr	r3, [r4, #0]
    35ba:	68e6      	ldr	r6, [r4, #12]
    35bc:	1c5a      	adds	r2, r3, #1
    35be:	fbb2 fef6 	udiv	lr, r2, r6
    35c2:	fb06 231e 	mls	r3, r6, lr, r2
    35c6:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    35c8:	6962      	ldr	r2, [r4, #20]
    35ca:	f815 6b01 	ldrb.w	r6, [r5], #1
    35ce:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    35d0:	6823      	ldr	r3, [r4, #0]
    35d2:	68e6      	ldr	r6, [r4, #12]
    35d4:	1c5a      	adds	r2, r3, #1
    35d6:	fbb2 fcf6 	udiv	ip, r2, r6
    35da:	fb06 231c 	mls	r3, r6, ip, r2
    35de:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    35e0:	6962      	ldr	r2, [r4, #20]
    35e2:	f815 6b01 	ldrb.w	r6, [r5], #1
    35e6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    35e8:	6823      	ldr	r3, [r4, #0]
    35ea:	68e6      	ldr	r6, [r4, #12]
    35ec:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    35ee:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    35f0:	fbb2 fef6 	udiv	lr, r2, r6
    35f4:	fb06 231e 	mls	r3, r6, lr, r2
    35f8:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    35fa:	d031      	beq.n	3660 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    35fc:	46ac      	mov	ip, r5
    35fe:	6962      	ldr	r2, [r4, #20]
    3600:	f81c 6b01 	ldrb.w	r6, [ip], #1
    3604:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3606:	6823      	ldr	r3, [r4, #0]
    3608:	68e2      	ldr	r2, [r4, #12]
    360a:	1c5e      	adds	r6, r3, #1
    360c:	fbb6 fef2 	udiv	lr, r6, r2
    3610:	fb02 631e 	mls	r3, r2, lr, r6
    3614:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3616:	6962      	ldr	r2, [r4, #20]
    3618:	786e      	ldrb	r6, [r5, #1]
    361a:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    361c:	6823      	ldr	r3, [r4, #0]
    361e:	68e2      	ldr	r2, [r4, #12]
    3620:	1c5e      	adds	r6, r3, #1
    3622:	fbb6 fef2 	udiv	lr, r6, r2
    3626:	fb02 631e 	mls	r3, r2, lr, r6
    362a:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    362c:	6962      	ldr	r2, [r4, #20]
    362e:	f89c 6001 	ldrb.w	r6, [ip, #1]
    3632:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3634:	6823      	ldr	r3, [r4, #0]
    3636:	68e2      	ldr	r2, [r4, #12]
    3638:	1c5e      	adds	r6, r3, #1
    363a:	fbb6 fcf2 	udiv	ip, r6, r2
    363e:	fb02 631c 	mls	r3, r2, ip, r6
    3642:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3644:	6962      	ldr	r2, [r4, #20]
    3646:	78ee      	ldrb	r6, [r5, #3]
    3648:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    364a:	6823      	ldr	r3, [r4, #0]
    364c:	68e2      	ldr	r2, [r4, #12]
    364e:	1c5e      	adds	r6, r3, #1
    3650:	3504      	adds	r5, #4
    3652:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    3656:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3658:	fb02 631e 	mls	r3, r2, lr, r6
    365c:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    365e:	d1cd      	bne.n	35fc <am_hal_queue_item_add+0xa0>
    3660:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    3662:	443d      	add	r5, r7
    3664:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    3666:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    3668:	f7fe f9ac 	bl	19c4 <am_hal_interrupt_master_set>

    return bSuccess;
}
    366c:	4620      	mov	r0, r4
    366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    3670:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    3672:	f7fe f9a7 	bl	19c4 <am_hal_interrupt_master_set>
}
    3676:	4620      	mov	r0, r4
    3678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    367a:	bf00      	nop

0000367c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    367c:	4a05      	ldr	r2, [pc, #20]	; (3694 <am_hal_rtc_osc_select+0x18>)
    367e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    3680:	b918      	cbnz	r0, 368a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    3682:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    3686:	6010      	str	r0, [r2, #0]
    3688:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    368a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    368e:	6011      	str	r1, [r2, #0]
    3690:	4770      	bx	lr
    3692:	bf00      	nop
    3694:	4000400c 	.word	0x4000400c

00003698 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    3698:	4a02      	ldr	r2, [pc, #8]	; (36a4 <am_hal_rtc_osc_disable+0xc>)
    369a:	6813      	ldr	r3, [r2, #0]
    369c:	f043 0010 	orr.w	r0, r3, #16
    36a0:	6010      	str	r0, [r2, #0]
    36a2:	4770      	bx	lr
    36a4:	40004050 	.word	0x40004050

000036a8 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    36a8:	4a08      	ldr	r2, [pc, #32]	; (36cc <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    36aa:	b118      	cbz	r0, 36b4 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    36ac:	4b08      	ldr	r3, [pc, #32]	; (36d0 <am_hal_sysctrl_sleep+0x28>)
    36ae:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    36b0:	07c3      	lsls	r3, r0, #31
    36b2:	d505      	bpl.n	36c0 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    36b4:	6811      	ldr	r1, [r2, #0]
    36b6:	f021 0304 	bic.w	r3, r1, #4
    36ba:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    36bc:	bf30      	wfi
    36be:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    36c0:	6810      	ldr	r0, [r2, #0]
    36c2:	f040 0104 	orr.w	r1, r0, #4
    36c6:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    36c8:	bf30      	wfi
    36ca:	4770      	bx	lr
    36cc:	e000ed10 	.word	0xe000ed10
    36d0:	40020250 	.word	0x40020250

000036d4 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    36d4:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    36d6:	4a24      	ldr	r2, [pc, #144]	; (3768 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    36d8:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    36da:	2100      	movs	r1, #0
    36dc:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    36de:	b313      	cbz	r3, 3726 <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    36e0:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    36e4:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    36e6:	4c21      	ldr	r4, [pc, #132]	; (376c <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    36e8:	4d21      	ldr	r5, [pc, #132]	; (3770 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    36ea:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    36ee:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    36f2:	45a6      	cmp	lr, r4
    36f4:	bf94      	ite	ls
    36f6:	461c      	movls	r4, r3
    36f8:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    36fa:	f7fe f827 	bl	174c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    36fe:	1c43      	adds	r3, r0, #1
    3700:	d02f      	beq.n	3762 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    3702:	08c2      	lsrs	r2, r0, #3
    3704:	fbb2 f3f4 	udiv	r3, r2, r4
    3708:	1e5d      	subs	r5, r3, #1
    370a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    370c:	4a19      	ldr	r2, [pc, #100]	; (3774 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    370e:	4c1a      	ldr	r4, [pc, #104]	; (3778 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    3710:	491a      	ldr	r1, [pc, #104]	; (377c <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    3712:	4b1b      	ldr	r3, [pc, #108]	; (3780 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    3714:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    3716:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    3718:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    371a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    371e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    3720:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    3722:	601a      	str	r2, [r3, #0]
    3724:	e010      	b.n	3748 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    3726:	4c13      	ldr	r4, [pc, #76]	; (3774 <am_hal_tpiu_enable+0xa0>)
    3728:	6905      	ldr	r5, [r0, #16]
    372a:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    372c:	6882      	ldr	r2, [r0, #8]
    372e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    3732:	68c3      	ldr	r3, [r0, #12]
    3734:	4c13      	ldr	r4, [pc, #76]	; (3784 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    3736:	4912      	ldr	r1, [pc, #72]	; (3780 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    3738:	1e5d      	subs	r5, r3, #1
    373a:	2201      	movs	r2, #1
    373c:	40aa      	lsls	r2, r5
    373e:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    3740:	6840      	ldr	r0, [r0, #4]
    3742:	680b      	ldr	r3, [r1, #0]
    3744:	4303      	orrs	r3, r0
    3746:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    3748:	f7fe f800 	bl	174c <am_hal_clkgen_sysclk_get>
    374c:	4c0e      	ldr	r4, [pc, #56]	; (3788 <am_hal_tpiu_enable+0xb4>)
    374e:	fba4 3100 	umull	r3, r1, r4, r0
    3752:	0c88      	lsrs	r0, r1, #18
    3754:	2332      	movs	r3, #50	; 0x32
    3756:	fb03 f000 	mul.w	r0, r3, r0
}
    375a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    375e:	f7fe b80b 	b.w	1778 <am_hal_flash_delay>
    3762:	2002      	movs	r0, #2
    3764:	e7d2      	b.n	370c <am_hal_tpiu_enable+0x38>
    3766:	bf00      	nop
    3768:	e0040304 	.word	0xe0040304
    376c:	001da380 	.word	0x001da380
    3770:	000f4240 	.word	0x000f4240
    3774:	e0040010 	.word	0xe0040010
    3778:	e00400f0 	.word	0xe00400f0
    377c:	e0040f00 	.word	0xe0040f00
    3780:	40020250 	.word	0x40020250
    3784:	e0040004 	.word	0xe0040004
    3788:	165e9f81 	.word	0x165e9f81

0000378c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    378c:	4b01      	ldr	r3, [pc, #4]	; (3794 <am_hal_vcomp_disable+0x8>)
    378e:	2237      	movs	r2, #55	; 0x37
    3790:	601a      	str	r2, [r3, #0]
    3792:	4770      	bx	lr
    3794:	4000c008 	.word	0x4000c008

00003798 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    3798:	e7fe      	b.n	3798 <am_hal_debug_error>
    379a:	bf00      	nop

0000379c <am_hal_i2c_bit_bang_receive>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    37a0:	4c9b      	ldr	r4, [pc, #620]	; (3a10 <am_hal_i2c_bit_bang_receive+0x274>)
{
    37a2:	b083      	sub	sp, #12
    PULL_SCL_HI();
    37a4:	68e7      	ldr	r7, [r4, #12]
{
    37a6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    37aa:	69a6      	ldr	r6, [r4, #24]
{
    37ac:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    37ae:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    37b0:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    37b2:	682d      	ldr	r5, [r5, #0]
{
    37b4:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    37b8:	9300      	str	r3, [sp, #0]
    while (!GET_SCL())
    37ba:	422e      	tst	r6, r5
{
    37bc:	4607      	mov	r7, r0
    37be:	468b      	mov	fp, r1
    37c0:	4690      	mov	r8, r2
    while (!GET_SCL())
    37c2:	bf08      	it	eq
    37c4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    37c8:	d14c      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37ca:	2004      	movs	r0, #4
    37cc:	f7fd ffd4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    37d0:	6962      	ldr	r2, [r4, #20]
    37d2:	69a3      	ldr	r3, [r4, #24]
    37d4:	6811      	ldr	r1, [r2, #0]
    37d6:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    37dc:	d142      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37de:	f7fd ffcb 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    37e2:	6966      	ldr	r6, [r4, #20]
    37e4:	69a3      	ldr	r3, [r4, #24]
    37e6:	6832      	ldr	r2, [r6, #0]
    37e8:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    37ee:	d139      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37f0:	f7fd ffc2 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    37f4:	6961      	ldr	r1, [r4, #20]
    37f6:	69a6      	ldr	r6, [r4, #24]
    37f8:	680b      	ldr	r3, [r1, #0]
    37fa:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    37fc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3800:	d130      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3802:	f7fd ffb9 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3806:	6962      	ldr	r2, [r4, #20]
    3808:	69a1      	ldr	r1, [r4, #24]
    380a:	6816      	ldr	r6, [r2, #0]
    380c:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    380e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3812:	d127      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3814:	f7fd ffb0 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3818:	6962      	ldr	r2, [r4, #20]
    381a:	69a3      	ldr	r3, [r4, #24]
    381c:	6811      	ldr	r1, [r2, #0]
    381e:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3820:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3824:	d11e      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3826:	f7fd ffa7 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    382a:	6966      	ldr	r6, [r4, #20]
    382c:	69a3      	ldr	r3, [r4, #24]
    382e:	6832      	ldr	r2, [r6, #0]
    3830:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3832:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3836:	d115      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3838:	f7fd ff9e 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    383c:	6961      	ldr	r1, [r4, #20]
    383e:	69a6      	ldr	r6, [r4, #24]
    3840:	680b      	ldr	r3, [r1, #0]
    3842:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3844:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3848:	d10c      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    384a:	f7fd ff95 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    384e:	6960      	ldr	r0, [r4, #20]
    3850:	69a1      	ldr	r1, [r4, #24]
    3852:	6802      	ldr	r2, [r0, #0]
    3854:	420a      	tst	r2, r1
    3856:	d105      	bne.n	3864 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
    3858:	3d08      	subs	r5, #8
    385a:	d1b6      	bne.n	37ca <am_hal_i2c_bit_bang_receive+0x2e>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    385c:	2003      	movs	r0, #3

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
}
    385e:	b003      	add	sp, #12
    3860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    3864:	6a26      	ldr	r6, [r4, #32]
    3866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3868:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    386a:	2005      	movs	r0, #5
    386c:	f7fd ff84 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3870:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    3872:	f04f 0980 	mov.w	r9, #128	; 0x80
    3876:	fa49 f306 	asr.w	r3, r9, r6
    387a:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    387c:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    387e:	bf14      	ite	ne
    3880:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    3882:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    3884:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    3886:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    3888:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    388a:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    388c:	2007      	movs	r0, #7
    388e:	f7fd ff73 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3892:	68e0      	ldr	r0, [r4, #12]
    3894:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    3896:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    3898:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    389a:	681a      	ldr	r2, [r3, #0]
    389c:	4211      	tst	r1, r2
    389e:	bf08      	it	eq
    38a0:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    38a4:	d149      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38a6:	2004      	movs	r0, #4
    38a8:	f7fd ff66 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    38ac:	6961      	ldr	r1, [r4, #20]
    38ae:	69a3      	ldr	r3, [r4, #24]
    38b0:	680a      	ldr	r2, [r1, #0]
    38b2:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38b4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    38b8:	d13f      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38ba:	f7fd ff5d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    38be:	6961      	ldr	r1, [r4, #20]
    38c0:	69a3      	ldr	r3, [r4, #24]
    38c2:	680a      	ldr	r2, [r1, #0]
    38c4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38c6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    38ca:	d136      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38cc:	f7fd ff54 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    38d0:	6961      	ldr	r1, [r4, #20]
    38d2:	69a3      	ldr	r3, [r4, #24]
    38d4:	680a      	ldr	r2, [r1, #0]
    38d6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    38dc:	d12d      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38de:	f7fd ff4b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    38e2:	6961      	ldr	r1, [r4, #20]
    38e4:	69a3      	ldr	r3, [r4, #24]
    38e6:	680a      	ldr	r2, [r1, #0]
    38e8:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    38ee:	d124      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38f0:	f7fd ff42 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    38f4:	6961      	ldr	r1, [r4, #20]
    38f6:	69a3      	ldr	r3, [r4, #24]
    38f8:	680a      	ldr	r2, [r1, #0]
    38fa:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    38fc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3900:	d11b      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3902:	f7fd ff39 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3906:	6961      	ldr	r1, [r4, #20]
    3908:	69a3      	ldr	r3, [r4, #24]
    390a:	680a      	ldr	r2, [r1, #0]
    390c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    390e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3912:	d112      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3914:	f7fd ff30 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3918:	6961      	ldr	r1, [r4, #20]
    391a:	69a3      	ldr	r3, [r4, #24]
    391c:	680a      	ldr	r2, [r1, #0]
    391e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3920:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3924:	d109      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3926:	f7fd ff27 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    392a:	6960      	ldr	r0, [r4, #20]
    392c:	69a1      	ldr	r1, [r4, #24]
    392e:	6803      	ldr	r3, [r0, #0]
    3930:	420b      	tst	r3, r1
    3932:	d102      	bne.n	393a <am_hal_i2c_bit_bang_receive+0x19e>
        if (--maxLoop == 0)
    3934:	3d08      	subs	r5, #8
    3936:	d1b6      	bne.n	38a6 <am_hal_i2c_bit_bang_receive+0x10a>
    3938:	e790      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    393a:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    393c:	2005      	movs	r0, #5
    393e:	f7fd ff1b 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3942:	2e08      	cmp	r6, #8
    3944:	d197      	bne.n	3876 <am_hal_i2c_bit_bang_receive+0xda>
    WRITE_SCL_LO();
    3946:	6927      	ldr	r7, [r4, #16]
    3948:	69a2      	ldr	r2, [r4, #24]
    394a:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    394c:	2007      	movs	r0, #7
    394e:	f7fd ff13 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3952:	68e0      	ldr	r0, [r4, #12]
    3954:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    3956:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    3958:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    395a:	681f      	ldr	r7, [r3, #0]
    395c:	4239      	tst	r1, r7
    395e:	bf08      	it	eq
    3960:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3964:	d149      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3966:	2004      	movs	r0, #4
    3968:	f7fd ff06 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    396c:	6962      	ldr	r2, [r4, #20]
    396e:	69a1      	ldr	r1, [r4, #24]
    3970:	6813      	ldr	r3, [r2, #0]
    3972:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3974:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3978:	d13f      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    397a:	f7fd fefd 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    397e:	6967      	ldr	r7, [r4, #20]
    3980:	69a1      	ldr	r1, [r4, #24]
    3982:	683a      	ldr	r2, [r7, #0]
    3984:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3986:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    398a:	d136      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    398c:	f7fd fef4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3990:	6967      	ldr	r7, [r4, #20]
    3992:	69a3      	ldr	r3, [r4, #24]
    3994:	6839      	ldr	r1, [r7, #0]
    3996:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3998:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    399c:	d12d      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    399e:	f7fd feeb 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    39a2:	6962      	ldr	r2, [r4, #20]
    39a4:	69a7      	ldr	r7, [r4, #24]
    39a6:	6813      	ldr	r3, [r2, #0]
    39a8:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39aa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    39ae:	d124      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39b0:	f7fd fee2 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    39b4:	6961      	ldr	r1, [r4, #20]
    39b6:	69a7      	ldr	r7, [r4, #24]
    39b8:	680a      	ldr	r2, [r1, #0]
    39ba:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39bc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    39c0:	d11b      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39c2:	f7fd fed9 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    39c6:	6961      	ldr	r1, [r4, #20]
    39c8:	69a3      	ldr	r3, [r4, #24]
    39ca:	680f      	ldr	r7, [r1, #0]
    39cc:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39ce:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    39d2:	d112      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39d4:	f7fd fed0 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    39d8:	6962      	ldr	r2, [r4, #20]
    39da:	69a1      	ldr	r1, [r4, #24]
    39dc:	6813      	ldr	r3, [r2, #0]
    39de:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39e0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    39e4:	d109      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    39e6:	f7fd fec7 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    39ea:	6960      	ldr	r0, [r4, #20]
    39ec:	69a7      	ldr	r7, [r4, #24]
    39ee:	6802      	ldr	r2, [r0, #0]
    39f0:	423a      	tst	r2, r7
    39f2:	d102      	bne.n	39fa <am_hal_i2c_bit_bang_receive+0x25e>
        if (--maxLoop == 0)
    39f4:	3d08      	subs	r5, #8
    39f6:	d1b6      	bne.n	3966 <am_hal_i2c_bit_bang_receive+0x1ca>
    39f8:	e730      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    39fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
    39fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    39fe:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    3a00:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    3a02:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    3a04:	f7fd feb8 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    3a08:	b125      	cbz	r5, 3a14 <am_hal_i2c_bit_bang_receive+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    3a0a:	2001      	movs	r0, #1
    3a0c:	e727      	b.n	385e <am_hal_i2c_bit_bang_receive+0xc2>
    3a0e:	bf00      	nop
    3a10:	10001144 	.word	0x10001144
    if ( bUseOffset )
    3a14:	9b01      	ldr	r3, [sp, #4]
    3a16:	2b00      	cmp	r3, #0
    3a18:	f040 81b4 	bne.w	3d84 <am_hal_i2c_bit_bang_receive+0x5e8>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    3a1c:	f1bb 0b01 	subs.w	fp, fp, #1
    3a20:	f000 80d8 	beq.w	3bd4 <am_hal_i2c_bit_bang_receive+0x438>
    3a24:	46c1      	mov	r9, r8
    3a26:	44c3      	add	fp, r8
    while (!GET_SCL())
    3a28:	2700      	movs	r7, #0
    3a2a:	463e      	mov	r6, r7
            data_byte |=  (0x80 >> i);
    3a2c:	f04f 0880 	mov.w	r8, #128	; 0x80
        WRITE_SCL_LO();
    3a30:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    3a32:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    3a34:	69a0      	ldr	r0, [r4, #24]
        PULL_SDA_HI();
    3a36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    3a38:	6008      	str	r0, [r1, #0]
        PULL_SDA_HI();
    3a3a:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    3a3c:	2007      	movs	r0, #7
    3a3e:	f7fd fe9b 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3a42:	68e1      	ldr	r1, [r4, #12]
    3a44:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    3a46:	6960      	ldr	r0, [r4, #20]
    PULL_SCL_HI();
    3a48:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    3a4a:	6802      	ldr	r2, [r0, #0]
    3a4c:	4213      	tst	r3, r2
    3a4e:	bf08      	it	eq
    3a50:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3a54:	d149      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a56:	2004      	movs	r0, #4
    3a58:	f7fd fe8e 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3a5c:	6961      	ldr	r1, [r4, #20]
    3a5e:	69a3      	ldr	r3, [r4, #24]
    3a60:	680a      	ldr	r2, [r1, #0]
    3a62:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a64:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3a68:	d13f      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a6a:	f7fd fe85 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3a6e:	6961      	ldr	r1, [r4, #20]
    3a70:	69a3      	ldr	r3, [r4, #24]
    3a72:	680a      	ldr	r2, [r1, #0]
    3a74:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a76:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3a7a:	d136      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a7c:	f7fd fe7c 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3a80:	6961      	ldr	r1, [r4, #20]
    3a82:	69a3      	ldr	r3, [r4, #24]
    3a84:	680a      	ldr	r2, [r1, #0]
    3a86:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a88:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3a8c:	d12d      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a8e:	f7fd fe73 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3a92:	6961      	ldr	r1, [r4, #20]
    3a94:	69a3      	ldr	r3, [r4, #24]
    3a96:	680a      	ldr	r2, [r1, #0]
    3a98:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3a9a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3a9e:	d124      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3aa0:	f7fd fe6a 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3aa4:	6961      	ldr	r1, [r4, #20]
    3aa6:	69a3      	ldr	r3, [r4, #24]
    3aa8:	680a      	ldr	r2, [r1, #0]
    3aaa:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3aac:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ab0:	d11b      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ab2:	f7fd fe61 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ab6:	6961      	ldr	r1, [r4, #20]
    3ab8:	69a3      	ldr	r3, [r4, #24]
    3aba:	680a      	ldr	r2, [r1, #0]
    3abc:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3abe:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ac2:	d112      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ac4:	f7fd fe58 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ac8:	6961      	ldr	r1, [r4, #20]
    3aca:	69a3      	ldr	r3, [r4, #24]
    3acc:	680a      	ldr	r2, [r1, #0]
    3ace:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ad0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ad4:	d109      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ad6:	f7fd fe4f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ada:	6960      	ldr	r0, [r4, #20]
    3adc:	69a1      	ldr	r1, [r4, #24]
    3ade:	6803      	ldr	r3, [r0, #0]
    3ae0:	420b      	tst	r3, r1
    3ae2:	d102      	bne.n	3aea <am_hal_i2c_bit_bang_receive+0x34e>
        if (--maxLoop == 0)
    3ae4:	3d08      	subs	r5, #8
    3ae6:	d1b6      	bne.n	3a56 <am_hal_i2c_bit_bang_receive+0x2ba>
    3ae8:	e6b8      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    3aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3aec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3aee:	6811      	ldr	r1, [r2, #0]
    3af0:	4201      	tst	r1, r0
    3af2:	d003      	beq.n	3afc <am_hal_i2c_bit_bang_receive+0x360>
            data_byte |=  (0x80 >> i);
    3af4:	fa48 f306 	asr.w	r3, r8, r6
    3af8:	431f      	orrs	r7, r3
    3afa:	b2ff      	uxtb	r7, r7
    for (i = 0; i < 8; i++)
    3afc:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    3afe:	2005      	movs	r0, #5
    3b00:	f7fd fe3a 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3b04:	2e08      	cmp	r6, #8
    3b06:	d193      	bne.n	3a30 <am_hal_i2c_bit_bang_receive+0x294>
    WRITE_SCL_LO();
    3b08:	6921      	ldr	r1, [r4, #16]
        WRITE_SDA_LO();
    3b0a:	6a26      	ldr	r6, [r4, #32]
    WRITE_SCL_LO();
    3b0c:	69a0      	ldr	r0, [r4, #24]
        WRITE_SDA_LO();
    3b0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    3b10:	f809 7b01 	strb.w	r7, [r9], #1
    WRITE_SCL_LO();
    3b14:	6008      	str	r0, [r1, #0]
        WRITE_SDA_LO();
    3b16:	6032      	str	r2, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    3b18:	2007      	movs	r0, #7
    3b1a:	f7fd fe2d 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3b1e:	68e7      	ldr	r7, [r4, #12]
    3b20:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    3b22:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    3b24:	603b      	str	r3, [r7, #0]
    while (!GET_SCL())
    3b26:	680e      	ldr	r6, [r1, #0]
    3b28:	4233      	tst	r3, r6
    3b2a:	bf08      	it	eq
    3b2c:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3b30:	d149      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b32:	2004      	movs	r0, #4
    3b34:	f7fd fe20 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b38:	6962      	ldr	r2, [r4, #20]
    3b3a:	69a7      	ldr	r7, [r4, #24]
    3b3c:	6813      	ldr	r3, [r2, #0]
    3b3e:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b40:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b44:	d13f      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b46:	f7fd fe17 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b4a:	6961      	ldr	r1, [r4, #20]
    3b4c:	69a6      	ldr	r6, [r4, #24]
    3b4e:	680a      	ldr	r2, [r1, #0]
    3b50:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b52:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b56:	d136      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b58:	f7fd fe0e 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b5c:	6967      	ldr	r7, [r4, #20]
    3b5e:	69a3      	ldr	r3, [r4, #24]
    3b60:	6839      	ldr	r1, [r7, #0]
    3b62:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b64:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b68:	d12d      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b6a:	f7fd fe05 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b6e:	6966      	ldr	r6, [r4, #20]
    3b70:	69a7      	ldr	r7, [r4, #24]
    3b72:	6832      	ldr	r2, [r6, #0]
    3b74:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b76:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b7a:	d124      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b7c:	f7fd fdfc 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b80:	6961      	ldr	r1, [r4, #20]
    3b82:	69a3      	ldr	r3, [r4, #24]
    3b84:	680e      	ldr	r6, [r1, #0]
    3b86:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b88:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b8c:	d11b      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b8e:	f7fd fdf3 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3b92:	6967      	ldr	r7, [r4, #20]
    3b94:	69a1      	ldr	r1, [r4, #24]
    3b96:	683a      	ldr	r2, [r7, #0]
    3b98:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3b9a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3b9e:	d112      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ba0:	f7fd fdea 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ba4:	6966      	ldr	r6, [r4, #20]
    3ba6:	69a3      	ldr	r3, [r4, #24]
    3ba8:	6837      	ldr	r7, [r6, #0]
    3baa:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3bac:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3bb0:	d109      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3bb2:	f7fd fde1 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3bb6:	6960      	ldr	r0, [r4, #20]
    3bb8:	69a1      	ldr	r1, [r4, #24]
    3bba:	6802      	ldr	r2, [r0, #0]
    3bbc:	420a      	tst	r2, r1
    3bbe:	d102      	bne.n	3bc6 <am_hal_i2c_bit_bang_receive+0x42a>
        if (--maxLoop == 0)
    3bc0:	3d08      	subs	r5, #8
    3bc2:	d1b6      	bne.n	3b32 <am_hal_i2c_bit_bang_receive+0x396>
    3bc4:	e64a      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    3bc6:	2005      	movs	r0, #5
    3bc8:	f7fd fdd6 	bl	1778 <am_hal_flash_delay>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    3bcc:	45d9      	cmp	r9, fp
        pData++;
    3bce:	46c8      	mov	r8, r9
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    3bd0:	f47f af2a 	bne.w	3a28 <am_hal_i2c_bit_bang_receive+0x28c>
    while (!GET_SCL())
    3bd4:	2600      	movs	r6, #0
    3bd6:	4637      	mov	r7, r6
            data_byte |=  (0x80 >> i);
    3bd8:	f04f 0980 	mov.w	r9, #128	; 0x80
        WRITE_SCL_LO();
    3bdc:	6920      	ldr	r0, [r4, #16]
        PULL_SDA_HI();
    3bde:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    3be0:	69a1      	ldr	r1, [r4, #24]
        PULL_SDA_HI();
    3be2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    3be4:	6001      	str	r1, [r0, #0]
        PULL_SDA_HI();
    3be6:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    3be8:	2007      	movs	r0, #7
    3bea:	f7fd fdc5 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3bee:	68e0      	ldr	r0, [r4, #12]
    3bf0:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    3bf2:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    3bf4:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    3bf6:	680a      	ldr	r2, [r1, #0]
    3bf8:	4213      	tst	r3, r2
    3bfa:	bf08      	it	eq
    3bfc:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3c00:	d149      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c02:	2004      	movs	r0, #4
    3c04:	f7fd fdb8 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c08:	6961      	ldr	r1, [r4, #20]
    3c0a:	69a3      	ldr	r3, [r4, #24]
    3c0c:	680a      	ldr	r2, [r1, #0]
    3c0e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c10:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c14:	d13f      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c16:	f7fd fdaf 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c1a:	6961      	ldr	r1, [r4, #20]
    3c1c:	69a3      	ldr	r3, [r4, #24]
    3c1e:	680a      	ldr	r2, [r1, #0]
    3c20:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c22:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c26:	d136      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c28:	f7fd fda6 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c2c:	6961      	ldr	r1, [r4, #20]
    3c2e:	69a3      	ldr	r3, [r4, #24]
    3c30:	680a      	ldr	r2, [r1, #0]
    3c32:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c34:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c38:	d12d      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c3a:	f7fd fd9d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c3e:	6961      	ldr	r1, [r4, #20]
    3c40:	69a3      	ldr	r3, [r4, #24]
    3c42:	680a      	ldr	r2, [r1, #0]
    3c44:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c46:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c4a:	d124      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c4c:	f7fd fd94 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c50:	6961      	ldr	r1, [r4, #20]
    3c52:	69a3      	ldr	r3, [r4, #24]
    3c54:	680a      	ldr	r2, [r1, #0]
    3c56:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c58:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c5c:	d11b      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c5e:	f7fd fd8b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c62:	6961      	ldr	r1, [r4, #20]
    3c64:	69a3      	ldr	r3, [r4, #24]
    3c66:	680a      	ldr	r2, [r1, #0]
    3c68:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c6a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c6e:	d112      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c70:	f7fd fd82 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c74:	6961      	ldr	r1, [r4, #20]
    3c76:	69a3      	ldr	r3, [r4, #24]
    3c78:	680a      	ldr	r2, [r1, #0]
    3c7a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c7c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3c80:	d109      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3c82:	f7fd fd79 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3c86:	6960      	ldr	r0, [r4, #20]
    3c88:	69a1      	ldr	r1, [r4, #24]
    3c8a:	6803      	ldr	r3, [r0, #0]
    3c8c:	420b      	tst	r3, r1
    3c8e:	d102      	bne.n	3c96 <am_hal_i2c_bit_bang_receive+0x4fa>
        if (--maxLoop == 0)
    3c90:	3d08      	subs	r5, #8
    3c92:	d1b6      	bne.n	3c02 <am_hal_i2c_bit_bang_receive+0x466>
    3c94:	e5e2      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    3c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3c9a:	6811      	ldr	r1, [r2, #0]
    3c9c:	4201      	tst	r1, r0
    3c9e:	d003      	beq.n	3ca8 <am_hal_i2c_bit_bang_receive+0x50c>
            data_byte |=  (0x80 >> i);
    3ca0:	fa49 f307 	asr.w	r3, r9, r7
    3ca4:	431e      	orrs	r6, r3
    3ca6:	b2f6      	uxtb	r6, r6
    for (i = 0; i < 8; i++)
    3ca8:	3701      	adds	r7, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    3caa:	2005      	movs	r0, #5
    3cac:	f7fd fd64 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3cb0:	2f08      	cmp	r7, #8
    3cb2:	d193      	bne.n	3bdc <am_hal_i2c_bit_bang_receive+0x440>
    WRITE_SCL_LO();
    3cb4:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    3cb6:	69e7      	ldr	r7, [r4, #28]
    WRITE_SCL_LO();
    3cb8:	69a5      	ldr	r5, [r4, #24]
        PULL_SDA_HI();
    3cba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    3cbc:	f888 6000 	strb.w	r6, [r8]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    3cc0:	2007      	movs	r0, #7
    WRITE_SCL_LO();
    3cc2:	600d      	str	r5, [r1, #0]
        PULL_SDA_HI();
    3cc4:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    3cc6:	f7fd fd57 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3cca:	68e0      	ldr	r0, [r4, #12]
    3ccc:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    3cce:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    3cd0:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    3cd2:	6831      	ldr	r1, [r6, #0]
    3cd4:	4219      	tst	r1, r3
    3cd6:	bf08      	it	eq
    3cd8:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3cdc:	f040 811d 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ce0:	2004      	movs	r0, #4
    3ce2:	f7fd fd49 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ce6:	6967      	ldr	r7, [r4, #20]
    3ce8:	69a3      	ldr	r3, [r4, #24]
    3cea:	683a      	ldr	r2, [r7, #0]
    3cec:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3cee:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3cf2:	f040 8112 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3cf6:	f7fd fd3f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3cfa:	6966      	ldr	r6, [r4, #20]
    3cfc:	69a1      	ldr	r1, [r4, #24]
    3cfe:	6837      	ldr	r7, [r6, #0]
    3d00:	420f      	tst	r7, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d02:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d06:	f040 8108 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d0a:	f7fd fd35 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d0e:	6962      	ldr	r2, [r4, #20]
    3d10:	69a3      	ldr	r3, [r4, #24]
    3d12:	6816      	ldr	r6, [r2, #0]
    3d14:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d16:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d1a:	f040 80fe 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d1e:	f7fd fd2b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d22:	6961      	ldr	r1, [r4, #20]
    3d24:	69a7      	ldr	r7, [r4, #24]
    3d26:	680a      	ldr	r2, [r1, #0]
    3d28:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d2a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d2e:	f040 80f4 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d32:	f7fd fd21 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d36:	6966      	ldr	r6, [r4, #20]
    3d38:	69a3      	ldr	r3, [r4, #24]
    3d3a:	6831      	ldr	r1, [r6, #0]
    3d3c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d3e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d42:	f040 80ea 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d46:	f7fd fd17 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d4a:	6967      	ldr	r7, [r4, #20]
    3d4c:	69a6      	ldr	r6, [r4, #24]
    3d4e:	683a      	ldr	r2, [r7, #0]
    3d50:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d52:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d56:	f040 80e0 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d5a:	f7fd fd0d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d5e:	6961      	ldr	r1, [r4, #20]
    3d60:	69a3      	ldr	r3, [r4, #24]
    3d62:	680f      	ldr	r7, [r1, #0]
    3d64:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d66:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3d6a:	f040 80d6 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3d6e:	f7fd fd03 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3d72:	6960      	ldr	r0, [r4, #20]
    3d74:	69a6      	ldr	r6, [r4, #24]
    3d76:	6802      	ldr	r2, [r0, #0]
    3d78:	4232      	tst	r2, r6
    3d7a:	f040 80ce 	bne.w	3f1a <am_hal_i2c_bit_bang_receive+0x77e>
        if (--maxLoop == 0)
    3d7e:	3d08      	subs	r5, #8
    3d80:	d1ae      	bne.n	3ce0 <am_hal_i2c_bit_bang_receive+0x544>
    3d82:	e56b      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( one_byte & (0x80 >> i) )
    3d84:	f04f 0980 	mov.w	r9, #128	; 0x80
    3d88:	9b00      	ldr	r3, [sp, #0]
        WRITE_SCL_LO();
    3d8a:	6920      	ldr	r0, [r4, #16]
    3d8c:	69a2      	ldr	r2, [r4, #24]
    3d8e:	6002      	str	r2, [r0, #0]
        if ( one_byte & (0x80 >> i) )
    3d90:	fa49 f105 	asr.w	r1, r9, r5
    3d94:	4219      	tst	r1, r3
            PULL_SDA_HI();
    3d96:	bf14      	ite	ne
    3d98:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    3d9a:	6a21      	ldreq	r1, [r4, #32]
    3d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3d9e:	6008      	str	r0, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    3da0:	2007      	movs	r0, #7
    3da2:	f7fd fce9 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3da6:	68e1      	ldr	r1, [r4, #12]
    3da8:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    3daa:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    3dac:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    3dae:	6810      	ldr	r0, [r2, #0]
    3db0:	4203      	tst	r3, r0
    3db2:	bf08      	it	eq
    3db4:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    3db8:	d149      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dba:	2004      	movs	r0, #4
    3dbc:	f7fd fcdc 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3dc0:	6961      	ldr	r1, [r4, #20]
    3dc2:	69a3      	ldr	r3, [r4, #24]
    3dc4:	680a      	ldr	r2, [r1, #0]
    3dc6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dc8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3dcc:	d13f      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dce:	f7fd fcd3 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3dd2:	6967      	ldr	r7, [r4, #20]
    3dd4:	69a1      	ldr	r1, [r4, #24]
    3dd6:	683b      	ldr	r3, [r7, #0]
    3dd8:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dda:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3dde:	d136      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3de0:	f7fd fcca 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3de4:	6962      	ldr	r2, [r4, #20]
    3de6:	69a7      	ldr	r7, [r4, #24]
    3de8:	6811      	ldr	r1, [r2, #0]
    3dea:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dec:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3df0:	d12d      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3df2:	f7fd fcc1 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3df6:	6962      	ldr	r2, [r4, #20]
    3df8:	69a3      	ldr	r3, [r4, #24]
    3dfa:	6817      	ldr	r7, [r2, #0]
    3dfc:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3dfe:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3e02:	d124      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e04:	f7fd fcb8 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e08:	6961      	ldr	r1, [r4, #20]
    3e0a:	69a3      	ldr	r3, [r4, #24]
    3e0c:	680a      	ldr	r2, [r1, #0]
    3e0e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e10:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3e14:	d11b      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e16:	f7fd fcaf 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e1a:	6967      	ldr	r7, [r4, #20]
    3e1c:	69a1      	ldr	r1, [r4, #24]
    3e1e:	683b      	ldr	r3, [r7, #0]
    3e20:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e22:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3e26:	d112      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e28:	f7fd fca6 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e2c:	6962      	ldr	r2, [r4, #20]
    3e2e:	69a7      	ldr	r7, [r4, #24]
    3e30:	6811      	ldr	r1, [r2, #0]
    3e32:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e34:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3e38:	d109      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e3a:	f7fd fc9d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e3e:	6960      	ldr	r0, [r4, #20]
    3e40:	69a3      	ldr	r3, [r4, #24]
    3e42:	6802      	ldr	r2, [r0, #0]
    3e44:	421a      	tst	r2, r3
    3e46:	d102      	bne.n	3e4e <am_hal_i2c_bit_bang_receive+0x6b2>
        if (--maxLoop == 0)
    3e48:	3e08      	subs	r6, #8
    3e4a:	d1b6      	bne.n	3dba <am_hal_i2c_bit_bang_receive+0x61e>
    3e4c:	e506      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    3e4e:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    3e50:	2005      	movs	r0, #5
    3e52:	f7fd fc91 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3e56:	2d08      	cmp	r5, #8
    3e58:	d196      	bne.n	3d88 <am_hal_i2c_bit_bang_receive+0x5ec>
    WRITE_SCL_LO();
    3e5a:	6926      	ldr	r6, [r4, #16]
    3e5c:	69a7      	ldr	r7, [r4, #24]
    3e5e:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    3e60:	2007      	movs	r0, #7
    3e62:	f7fd fc89 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3e66:	68e1      	ldr	r1, [r4, #12]
    3e68:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    3e6a:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    3e6c:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    3e6e:	681a      	ldr	r2, [r3, #0]
    3e70:	4202      	tst	r2, r0
    3e72:	bf08      	it	eq
    3e74:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3e78:	f040 80b4 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e7c:	2004      	movs	r0, #4
    3e7e:	f7fd fc7b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e82:	6966      	ldr	r6, [r4, #20]
    3e84:	69a7      	ldr	r7, [r4, #24]
    3e86:	6831      	ldr	r1, [r6, #0]
    3e88:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e8a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3e8e:	f040 80a9 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e92:	f7fd fc71 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3e96:	6962      	ldr	r2, [r4, #20]
    3e98:	69a3      	ldr	r3, [r4, #24]
    3e9a:	6816      	ldr	r6, [r2, #0]
    3e9c:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3e9e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ea2:	f040 809f 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ea6:	f7fd fc67 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3eaa:	6967      	ldr	r7, [r4, #20]
    3eac:	69a1      	ldr	r1, [r4, #24]
    3eae:	683a      	ldr	r2, [r7, #0]
    3eb0:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3eb2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3eb6:	f040 8095 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3eba:	f7fd fc5d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ebe:	6966      	ldr	r6, [r4, #20]
    3ec0:	69a3      	ldr	r3, [r4, #24]
    3ec2:	6837      	ldr	r7, [r6, #0]
    3ec4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ec6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3eca:	f040 808b 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ece:	f7fd fc53 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ed2:	6961      	ldr	r1, [r4, #20]
    3ed4:	69a6      	ldr	r6, [r4, #24]
    3ed6:	680a      	ldr	r2, [r1, #0]
    3ed8:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3eda:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ede:	f040 8081 	bne.w	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ee2:	f7fd fc49 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ee6:	6967      	ldr	r7, [r4, #20]
    3ee8:	69a3      	ldr	r3, [r4, #24]
    3eea:	6839      	ldr	r1, [r7, #0]
    3eec:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3eee:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3ef2:	d177      	bne.n	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3ef4:	f7fd fc40 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3ef8:	6966      	ldr	r6, [r4, #20]
    3efa:	69a7      	ldr	r7, [r4, #24]
    3efc:	6832      	ldr	r2, [r6, #0]
    3efe:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f00:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3f04:	d16e      	bne.n	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f06:	f7fd fc37 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f0a:	6960      	ldr	r0, [r4, #20]
    3f0c:	69a3      	ldr	r3, [r4, #24]
    3f0e:	6801      	ldr	r1, [r0, #0]
    3f10:	4219      	tst	r1, r3
    3f12:	d167      	bne.n	3fe4 <am_hal_i2c_bit_bang_receive+0x848>
        if (--maxLoop == 0)
    3f14:	3d08      	subs	r5, #8
    3f16:	d1b1      	bne.n	3e7c <am_hal_i2c_bit_bang_receive+0x6e0>
    3f18:	e4a0      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    3f1a:	2005      	movs	r0, #5
    3f1c:	f7fd fc2c 	bl	1778 <am_hal_flash_delay>
    WRITE_SCL_LO();
    3f20:	6925      	ldr	r5, [r4, #16]
    3f22:	69a1      	ldr	r1, [r4, #24]
    3f24:	6029      	str	r1, [r5, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    3f26:	2004      	movs	r0, #4
    3f28:	f7fd fc26 	bl	1778 <am_hal_flash_delay>
    if (!bNoStop)
    3f2c:	f1ba 0f00 	cmp.w	sl, #0
    3f30:	d16f      	bne.n	4012 <am_hal_i2c_bit_bang_receive+0x876>
        WRITE_SDA_LO();
    3f32:	6a21      	ldr	r1, [r4, #32]
    3f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f36:	600b      	str	r3, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    3f38:	2004      	movs	r0, #4
    3f3a:	f7fd fc1d 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    3f3e:	68e7      	ldr	r7, [r4, #12]
    3f40:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    3f42:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    3f44:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    3f46:	6832      	ldr	r2, [r6, #0]
    3f48:	4202      	tst	r2, r0
    3f4a:	d174      	bne.n	4036 <am_hal_i2c_bit_bang_receive+0x89a>
    3f4c:	f44f 75c8 	mov.w	r5, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f50:	2004      	movs	r0, #4
    3f52:	f7fd fc11 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f56:	6961      	ldr	r1, [r4, #20]
    3f58:	69a3      	ldr	r3, [r4, #24]
    3f5a:	680f      	ldr	r7, [r1, #0]
    3f5c:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f5e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3f62:	d14b      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f64:	f7fd fc08 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f68:	6966      	ldr	r6, [r4, #20]
    3f6a:	69a1      	ldr	r1, [r4, #24]
    3f6c:	6832      	ldr	r2, [r6, #0]
    3f6e:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f70:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3f74:	d142      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f76:	f7fd fbff 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f7a:	6967      	ldr	r7, [r4, #20]
    3f7c:	69a3      	ldr	r3, [r4, #24]
    3f7e:	683e      	ldr	r6, [r7, #0]
    3f80:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f82:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3f86:	d139      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f88:	f7fd fbf6 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f8c:	6961      	ldr	r1, [r4, #20]
    3f8e:	69a7      	ldr	r7, [r4, #24]
    3f90:	680a      	ldr	r2, [r1, #0]
    3f92:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f94:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3f98:	d130      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3f9a:	f7fd fbed 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3f9e:	6966      	ldr	r6, [r4, #20]
    3fa0:	69a3      	ldr	r3, [r4, #24]
    3fa2:	6831      	ldr	r1, [r6, #0]
    3fa4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fa6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3faa:	d127      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fac:	f7fd fbe4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3fb0:	6967      	ldr	r7, [r4, #20]
    3fb2:	69a6      	ldr	r6, [r4, #24]
    3fb4:	683a      	ldr	r2, [r7, #0]
    3fb6:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fb8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3fbc:	d11e      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fbe:	f7fd fbdb 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3fc2:	6961      	ldr	r1, [r4, #20]
    3fc4:	69a3      	ldr	r3, [r4, #24]
    3fc6:	680f      	ldr	r7, [r1, #0]
    3fc8:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3fce:	d115      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3fd0:	f7fd fbd2 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    3fd4:	6960      	ldr	r0, [r4, #20]
    3fd6:	69a6      	ldr	r6, [r4, #24]
    3fd8:	6802      	ldr	r2, [r0, #0]
    3fda:	4232      	tst	r2, r6
    3fdc:	d10e      	bne.n	3ffc <am_hal_i2c_bit_bang_receive+0x860>
        if (--maxLoop == 0)
    3fde:	3d08      	subs	r5, #8
    3fe0:	d1b6      	bne.n	3f50 <am_hal_i2c_bit_bang_receive+0x7b4>
    3fe2:	e43b      	b.n	385c <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    3fe4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3fe8:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    3fea:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    3fec:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    3fee:	f7fd fbc3 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    3ff2:	2d00      	cmp	r5, #0
    3ff4:	f43f ad12 	beq.w	3a1c <am_hal_i2c_bit_bang_receive+0x280>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;
    3ff8:	2002      	movs	r0, #2
    3ffa:	e430      	b.n	385e <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    3ffc:	2005      	movs	r0, #5
    3ffe:	f7fd fbbb 	bl	1778 <am_hal_flash_delay>
    if (!bNoStop)
    4002:	f1ba 0f00 	cmp.w	sl, #0
    4006:	d114      	bne.n	4032 <am_hal_i2c_bit_bang_receive+0x896>
        PULL_SDA_HI();
    4008:	69e5      	ldr	r5, [r4, #28]
    400a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    400c:	602c      	str	r4, [r5, #0]
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    400e:	2000      	movs	r0, #0
    4010:	e425      	b.n	385e <am_hal_i2c_bit_bang_receive+0xc2>
        PULL_SDA_HI();
    4012:	69e3      	ldr	r3, [r4, #28]
    4014:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4016:	601f      	str	r7, [r3, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4018:	2004      	movs	r0, #4
    401a:	f7fd fbad 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    401e:	68e0      	ldr	r0, [r4, #12]
    4020:	69a6      	ldr	r6, [r4, #24]
    while (!GET_SCL())
    4022:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    4024:	6006      	str	r6, [r0, #0]
    while (!GET_SCL())
    4026:	6815      	ldr	r5, [r2, #0]
    4028:	422e      	tst	r6, r5
    402a:	d08f      	beq.n	3f4c <am_hal_i2c_bit_bang_receive+0x7b0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    402c:	2005      	movs	r0, #5
    402e:	f7fd fba3 	bl	1778 <am_hal_flash_delay>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4032:	2000      	movs	r0, #0
    4034:	e413      	b.n	385e <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    4036:	2005      	movs	r0, #5
    4038:	f7fd fb9e 	bl	1778 <am_hal_flash_delay>
    403c:	e7e4      	b.n	4008 <am_hal_i2c_bit_bang_receive+0x86c>
    403e:	bf00      	nop

00004040 <am_hal_i2c_bit_bang_send>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    4040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    4044:	4c9b      	ldr	r4, [pc, #620]	; (42b4 <am_hal_i2c_bit_bang_send+0x274>)
{
    4046:	b083      	sub	sp, #12
    PULL_SCL_HI();
    4048:	68e7      	ldr	r7, [r4, #12]
{
    404a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    404e:	69a6      	ldr	r6, [r4, #24]
{
    4050:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    4052:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    4054:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    4056:	682d      	ldr	r5, [r5, #0]
{
    4058:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
    405c:	9700      	str	r7, [sp, #0]
    while (!GET_SCL())
    405e:	422e      	tst	r6, r5
{
    4060:	4607      	mov	r7, r0
    4062:	468a      	mov	sl, r1
    4064:	4691      	mov	r9, r2
    4066:	469b      	mov	fp, r3
    while (!GET_SCL())
    4068:	bf08      	it	eq
    406a:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    406e:	d14c      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4070:	2004      	movs	r0, #4
    4072:	f7fd fb81 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4076:	6962      	ldr	r2, [r4, #20]
    4078:	69a3      	ldr	r3, [r4, #24]
    407a:	6811      	ldr	r1, [r2, #0]
    407c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    407e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4082:	d142      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4084:	f7fd fb78 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4088:	6966      	ldr	r6, [r4, #20]
    408a:	69a3      	ldr	r3, [r4, #24]
    408c:	6832      	ldr	r2, [r6, #0]
    408e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4090:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4094:	d139      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4096:	f7fd fb6f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    409a:	6961      	ldr	r1, [r4, #20]
    409c:	69a6      	ldr	r6, [r4, #24]
    409e:	680b      	ldr	r3, [r1, #0]
    40a0:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40a2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    40a6:	d130      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40a8:	f7fd fb66 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    40ac:	6962      	ldr	r2, [r4, #20]
    40ae:	69a1      	ldr	r1, [r4, #24]
    40b0:	6816      	ldr	r6, [r2, #0]
    40b2:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40b4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    40b8:	d127      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40ba:	f7fd fb5d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    40be:	6962      	ldr	r2, [r4, #20]
    40c0:	69a3      	ldr	r3, [r4, #24]
    40c2:	6811      	ldr	r1, [r2, #0]
    40c4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40c6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    40ca:	d11e      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40cc:	f7fd fb54 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    40d0:	6966      	ldr	r6, [r4, #20]
    40d2:	69a3      	ldr	r3, [r4, #24]
    40d4:	6832      	ldr	r2, [r6, #0]
    40d6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    40dc:	d115      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40de:	f7fd fb4b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    40e2:	6961      	ldr	r1, [r4, #20]
    40e4:	69a6      	ldr	r6, [r4, #24]
    40e6:	680b      	ldr	r3, [r1, #0]
    40e8:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    40ee:	d10c      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    40f0:	f7fd fb42 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    40f4:	6960      	ldr	r0, [r4, #20]
    40f6:	69a1      	ldr	r1, [r4, #24]
    40f8:	6802      	ldr	r2, [r0, #0]
    40fa:	420a      	tst	r2, r1
    40fc:	d105      	bne.n	410a <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
    40fe:	3d08      	subs	r5, #8
    4100:	d1b6      	bne.n	4070 <am_hal_i2c_bit_bang_send+0x30>
    }

    //
    // message successfully sent
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4102:	2003      	movs	r0, #3
}
    4104:	b003      	add	sp, #12
    4106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    410a:	6a26      	ldr	r6, [r4, #32]
    410c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    410e:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4110:	2005      	movs	r0, #5
    4112:	f7fd fb31 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4116:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    4118:	f04f 0880 	mov.w	r8, #128	; 0x80
    411c:	fa48 f306 	asr.w	r3, r8, r6
    4120:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    4122:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    4124:	bf14      	ite	ne
    4126:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    4128:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    412a:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    412c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    412e:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    4130:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    4132:	2007      	movs	r0, #7
    4134:	f7fd fb20 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    4138:	68e0      	ldr	r0, [r4, #12]
    413a:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    413c:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    413e:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	4211      	tst	r1, r2
    4144:	bf08      	it	eq
    4146:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    414a:	d149      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    414c:	2004      	movs	r0, #4
    414e:	f7fd fb13 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4152:	6961      	ldr	r1, [r4, #20]
    4154:	69a3      	ldr	r3, [r4, #24]
    4156:	680a      	ldr	r2, [r1, #0]
    4158:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    415a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    415e:	d13f      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4160:	f7fd fb0a 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4164:	6961      	ldr	r1, [r4, #20]
    4166:	69a3      	ldr	r3, [r4, #24]
    4168:	680a      	ldr	r2, [r1, #0]
    416a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    416c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4170:	d136      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4172:	f7fd fb01 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4176:	6961      	ldr	r1, [r4, #20]
    4178:	69a3      	ldr	r3, [r4, #24]
    417a:	680a      	ldr	r2, [r1, #0]
    417c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    417e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4182:	d12d      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4184:	f7fd faf8 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4188:	6961      	ldr	r1, [r4, #20]
    418a:	69a3      	ldr	r3, [r4, #24]
    418c:	680a      	ldr	r2, [r1, #0]
    418e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4190:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4194:	d124      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4196:	f7fd faef 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    419a:	6961      	ldr	r1, [r4, #20]
    419c:	69a3      	ldr	r3, [r4, #24]
    419e:	680a      	ldr	r2, [r1, #0]
    41a0:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41a2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    41a6:	d11b      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41a8:	f7fd fae6 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    41ac:	6961      	ldr	r1, [r4, #20]
    41ae:	69a3      	ldr	r3, [r4, #24]
    41b0:	680a      	ldr	r2, [r1, #0]
    41b2:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41b4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    41b8:	d112      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41ba:	f7fd fadd 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    41be:	6961      	ldr	r1, [r4, #20]
    41c0:	69a3      	ldr	r3, [r4, #24]
    41c2:	680a      	ldr	r2, [r1, #0]
    41c4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41c6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    41ca:	d109      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    41cc:	f7fd fad4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    41d0:	6960      	ldr	r0, [r4, #20]
    41d2:	69a1      	ldr	r1, [r4, #24]
    41d4:	6803      	ldr	r3, [r0, #0]
    41d6:	420b      	tst	r3, r1
    41d8:	d102      	bne.n	41e0 <am_hal_i2c_bit_bang_send+0x1a0>
        if (--maxLoop == 0)
    41da:	3d08      	subs	r5, #8
    41dc:	d1b6      	bne.n	414c <am_hal_i2c_bit_bang_send+0x10c>
    41de:	e790      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    41e0:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    41e2:	2005      	movs	r0, #5
    41e4:	f7fd fac8 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    41e8:	2e08      	cmp	r6, #8
    41ea:	d197      	bne.n	411c <am_hal_i2c_bit_bang_send+0xdc>
    WRITE_SCL_LO();
    41ec:	6927      	ldr	r7, [r4, #16]
    41ee:	69a2      	ldr	r2, [r4, #24]
    41f0:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    41f2:	2007      	movs	r0, #7
    41f4:	f7fd fac0 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    41f8:	68e0      	ldr	r0, [r4, #12]
    41fa:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    41fc:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    41fe:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    4200:	681f      	ldr	r7, [r3, #0]
    4202:	4239      	tst	r1, r7
    4204:	bf08      	it	eq
    4206:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    420a:	d149      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    420c:	2004      	movs	r0, #4
    420e:	f7fd fab3 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4212:	6962      	ldr	r2, [r4, #20]
    4214:	69a1      	ldr	r1, [r4, #24]
    4216:	6813      	ldr	r3, [r2, #0]
    4218:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    421a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    421e:	d13f      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4220:	f7fd faaa 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4224:	6967      	ldr	r7, [r4, #20]
    4226:	69a1      	ldr	r1, [r4, #24]
    4228:	683a      	ldr	r2, [r7, #0]
    422a:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    422c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4230:	d136      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4232:	f7fd faa1 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4236:	6967      	ldr	r7, [r4, #20]
    4238:	69a3      	ldr	r3, [r4, #24]
    423a:	6839      	ldr	r1, [r7, #0]
    423c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    423e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4242:	d12d      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4244:	f7fd fa98 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4248:	6962      	ldr	r2, [r4, #20]
    424a:	69a7      	ldr	r7, [r4, #24]
    424c:	6813      	ldr	r3, [r2, #0]
    424e:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4250:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4254:	d124      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4256:	f7fd fa8f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    425a:	6961      	ldr	r1, [r4, #20]
    425c:	69a7      	ldr	r7, [r4, #24]
    425e:	680a      	ldr	r2, [r1, #0]
    4260:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4262:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4266:	d11b      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4268:	f7fd fa86 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    426c:	6961      	ldr	r1, [r4, #20]
    426e:	69a3      	ldr	r3, [r4, #24]
    4270:	680f      	ldr	r7, [r1, #0]
    4272:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4274:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4278:	d112      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    427a:	f7fd fa7d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    427e:	6962      	ldr	r2, [r4, #20]
    4280:	69a1      	ldr	r1, [r4, #24]
    4282:	6813      	ldr	r3, [r2, #0]
    4284:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4286:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    428a:	d109      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    428c:	f7fd fa74 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4290:	6960      	ldr	r0, [r4, #20]
    4292:	69a7      	ldr	r7, [r4, #24]
    4294:	6802      	ldr	r2, [r0, #0]
    4296:	423a      	tst	r2, r7
    4298:	d102      	bne.n	42a0 <am_hal_i2c_bit_bang_send+0x260>
        if (--maxLoop == 0)
    429a:	3d08      	subs	r5, #8
    429c:	d1b6      	bne.n	420c <am_hal_i2c_bit_bang_send+0x1cc>
    429e:	e730      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    42a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    42a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    42a4:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    42a6:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    42a8:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    42aa:	f7fd fa65 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    42ae:	b11d      	cbz	r5, 42b8 <am_hal_i2c_bit_bang_send+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    42b0:	2001      	movs	r0, #1
    42b2:	e727      	b.n	4104 <am_hal_i2c_bit_bang_send+0xc4>
    42b4:	10001144 	.word	0x10001144
    if ( bUseOffset )
    42b8:	9b01      	ldr	r3, [sp, #4]
    42ba:	2b00      	cmp	r3, #0
    42bc:	f040 8164 	bne.w	4588 <am_hal_i2c_bit_bang_send+0x548>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    42c0:	f1ba 0f00 	cmp.w	sl, #0
    42c4:	f000 80dd 	beq.w	4482 <am_hal_i2c_bit_bang_send+0x442>
    42c8:	f109 3bff 	add.w	fp, r9, #4294967295
        if ( one_byte & (0x80 >> i) )
    42cc:	f04f 0880 	mov.w	r8, #128	; 0x80
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    42d0:	f04f 0900 	mov.w	r9, #0
    42d4:	f81b 7f01 	ldrb.w	r7, [fp, #1]!
    for (i = 0; i < 8; i++)
    42d8:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    42da:	fa48 f306 	asr.w	r3, r8, r6
    42de:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    42e0:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    42e2:	bf14      	ite	ne
    42e4:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    42e6:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    42e8:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    42ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    42ec:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    42ee:	6019      	str	r1, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    42f0:	2007      	movs	r0, #7
    42f2:	f7fd fa41 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    42f6:	68e0      	ldr	r0, [r4, #12]
    42f8:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    42fa:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    42fc:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    42fe:	6811      	ldr	r1, [r2, #0]
    4300:	420b      	tst	r3, r1
    4302:	bf08      	it	eq
    4304:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4308:	d149      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    430a:	2004      	movs	r0, #4
    430c:	f7fd fa34 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4310:	6962      	ldr	r2, [r4, #20]
    4312:	69a3      	ldr	r3, [r4, #24]
    4314:	6811      	ldr	r1, [r2, #0]
    4316:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4318:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    431c:	d13f      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    431e:	f7fd fa2b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4322:	6962      	ldr	r2, [r4, #20]
    4324:	69a3      	ldr	r3, [r4, #24]
    4326:	6811      	ldr	r1, [r2, #0]
    4328:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    432a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    432e:	d136      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4330:	f7fd fa22 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4334:	6962      	ldr	r2, [r4, #20]
    4336:	69a3      	ldr	r3, [r4, #24]
    4338:	6811      	ldr	r1, [r2, #0]
    433a:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    433c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4340:	d12d      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4342:	f7fd fa19 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4346:	6962      	ldr	r2, [r4, #20]
    4348:	69a3      	ldr	r3, [r4, #24]
    434a:	6811      	ldr	r1, [r2, #0]
    434c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    434e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4352:	d124      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4354:	f7fd fa10 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4358:	6962      	ldr	r2, [r4, #20]
    435a:	69a3      	ldr	r3, [r4, #24]
    435c:	6811      	ldr	r1, [r2, #0]
    435e:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4360:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4364:	d11b      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4366:	f7fd fa07 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    436a:	6962      	ldr	r2, [r4, #20]
    436c:	69a3      	ldr	r3, [r4, #24]
    436e:	6811      	ldr	r1, [r2, #0]
    4370:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4372:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4376:	d112      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4378:	f7fd f9fe 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    437c:	6962      	ldr	r2, [r4, #20]
    437e:	69a3      	ldr	r3, [r4, #24]
    4380:	6811      	ldr	r1, [r2, #0]
    4382:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4384:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4388:	d109      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    438a:	f7fd f9f5 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    438e:	6960      	ldr	r0, [r4, #20]
    4390:	69a3      	ldr	r3, [r4, #24]
    4392:	6802      	ldr	r2, [r0, #0]
    4394:	421a      	tst	r2, r3
    4396:	d102      	bne.n	439e <am_hal_i2c_bit_bang_send+0x35e>
        if (--maxLoop == 0)
    4398:	3d08      	subs	r5, #8
    439a:	d1b6      	bne.n	430a <am_hal_i2c_bit_bang_send+0x2ca>
    439c:	e6b1      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    439e:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    43a0:	2005      	movs	r0, #5
    43a2:	f7fd f9e9 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    43a6:	2e08      	cmp	r6, #8
    43a8:	d197      	bne.n	42da <am_hal_i2c_bit_bang_send+0x29a>
    WRITE_SCL_LO();
    43aa:	6926      	ldr	r6, [r4, #16]
    43ac:	69a7      	ldr	r7, [r4, #24]
    43ae:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    43b0:	2007      	movs	r0, #7
    43b2:	f7fd f9e1 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    43b6:	68e1      	ldr	r1, [r4, #12]
    43b8:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    43ba:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    43bc:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    43be:	681a      	ldr	r2, [r3, #0]
    43c0:	4210      	tst	r0, r2
    43c2:	bf08      	it	eq
    43c4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    43c8:	d149      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43ca:	2004      	movs	r0, #4
    43cc:	f7fd f9d4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    43d0:	6966      	ldr	r6, [r4, #20]
    43d2:	69a7      	ldr	r7, [r4, #24]
    43d4:	6831      	ldr	r1, [r6, #0]
    43d6:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43dc:	d13f      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43de:	f7fd f9cb 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    43e2:	6962      	ldr	r2, [r4, #20]
    43e4:	69a3      	ldr	r3, [r4, #24]
    43e6:	6816      	ldr	r6, [r2, #0]
    43e8:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43ee:	d136      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43f0:	f7fd f9c2 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    43f4:	6967      	ldr	r7, [r4, #20]
    43f6:	69a1      	ldr	r1, [r4, #24]
    43f8:	683a      	ldr	r2, [r7, #0]
    43fa:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43fc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4400:	d12d      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4402:	f7fd f9b9 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4406:	6966      	ldr	r6, [r4, #20]
    4408:	69a3      	ldr	r3, [r4, #24]
    440a:	6837      	ldr	r7, [r6, #0]
    440c:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    440e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4412:	d124      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4414:	f7fd f9b0 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4418:	6961      	ldr	r1, [r4, #20]
    441a:	69a6      	ldr	r6, [r4, #24]
    441c:	680a      	ldr	r2, [r1, #0]
    441e:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4420:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4424:	d11b      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4426:	f7fd f9a7 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    442a:	6967      	ldr	r7, [r4, #20]
    442c:	69a3      	ldr	r3, [r4, #24]
    442e:	6839      	ldr	r1, [r7, #0]
    4430:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4432:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4436:	d112      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4438:	f7fd f99e 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    443c:	6966      	ldr	r6, [r4, #20]
    443e:	69a7      	ldr	r7, [r4, #24]
    4440:	6832      	ldr	r2, [r6, #0]
    4442:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4444:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4448:	d109      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    444a:	f7fd f995 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    444e:	6960      	ldr	r0, [r4, #20]
    4450:	69a3      	ldr	r3, [r4, #24]
    4452:	6801      	ldr	r1, [r0, #0]
    4454:	4219      	tst	r1, r3
    4456:	d102      	bne.n	445e <am_hal_i2c_bit_bang_send+0x41e>
        if (--maxLoop == 0)
    4458:	3d08      	subs	r5, #8
    445a:	d1b6      	bne.n	43ca <am_hal_i2c_bit_bang_send+0x38a>
    445c:	e651      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    445e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4460:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4462:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4464:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    4466:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    4468:	f7fd f986 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    446c:	b125      	cbz	r5, 4478 <am_hal_i2c_bit_bang_send+0x438>
                if (ui32I != (number_of_bytes-1))
    446e:	f10a 37ff 	add.w	r7, sl, #4294967295
    4472:	454f      	cmp	r7, r9
    4474:	f040 815d 	bne.w	4732 <am_hal_i2c_bit_bang_send+0x6f2>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    4478:	f109 0901 	add.w	r9, r9, #1
    447c:	45ca      	cmp	sl, r9
    447e:	f47f af29 	bne.w	42d4 <am_hal_i2c_bit_bang_send+0x294>
    bool data_naked = false;
    4482:	2500      	movs	r5, #0
    WRITE_SCL_LO();
    4484:	6920      	ldr	r0, [r4, #16]
    4486:	69a2      	ldr	r2, [r4, #24]
    4488:	6002      	str	r2, [r0, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    448a:	2004      	movs	r0, #4
    448c:	f7fd f974 	bl	1778 <am_hal_flash_delay>
    if (!bNoStop)
    4490:	9b00      	ldr	r3, [sp, #0]
    4492:	2b00      	cmp	r3, #0
    4494:	d060      	beq.n	4558 <am_hal_i2c_bit_bang_send+0x518>
        PULL_SDA_HI();
    4496:	69e1      	ldr	r1, [r4, #28]
    4498:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    449a:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    449c:	2004      	movs	r0, #4
    449e:	f7fd f96b 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    44a2:	68e7      	ldr	r7, [r4, #12]
    44a4:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    44a6:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    44a8:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    44aa:	6813      	ldr	r3, [r2, #0]
    44ac:	4218      	tst	r0, r3
    44ae:	d163      	bne.n	4578 <am_hal_i2c_bit_bang_send+0x538>
    bool data_naked = false;
    44b0:	f44f 76c8 	mov.w	r6, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44b4:	2004      	movs	r0, #4
    44b6:	f7fd f95f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    44ba:	6961      	ldr	r1, [r4, #20]
    44bc:	69a7      	ldr	r7, [r4, #24]
    44be:	680a      	ldr	r2, [r1, #0]
    44c0:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44c2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44c6:	f040 8124 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44ca:	f7fd f955 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    44ce:	6961      	ldr	r1, [r4, #20]
    44d0:	69a3      	ldr	r3, [r4, #24]
    44d2:	680f      	ldr	r7, [r1, #0]
    44d4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44d6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44da:	f040 811a 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44de:	f7fd f94b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    44e2:	6962      	ldr	r2, [r4, #20]
    44e4:	69a1      	ldr	r1, [r4, #24]
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44ee:	f040 8110 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44f2:	f7fd f941 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    44f6:	6967      	ldr	r7, [r4, #20]
    44f8:	69a1      	ldr	r1, [r4, #24]
    44fa:	683a      	ldr	r2, [r7, #0]
    44fc:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44fe:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4502:	f040 8106 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4506:	f7fd f937 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    450a:	6967      	ldr	r7, [r4, #20]
    450c:	69a3      	ldr	r3, [r4, #24]
    450e:	6839      	ldr	r1, [r7, #0]
    4510:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4512:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4516:	f040 80fc 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    451a:	f7fd f92d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    451e:	6962      	ldr	r2, [r4, #20]
    4520:	69a7      	ldr	r7, [r4, #24]
    4522:	6813      	ldr	r3, [r2, #0]
    4524:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4526:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    452a:	f040 80f2 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    452e:	f7fd f923 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4532:	6961      	ldr	r1, [r4, #20]
    4534:	69a7      	ldr	r7, [r4, #24]
    4536:	680a      	ldr	r2, [r1, #0]
    4538:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    453a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    453e:	f040 80e8 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4542:	f7fd f919 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4546:	6960      	ldr	r0, [r4, #20]
    4548:	69a3      	ldr	r3, [r4, #24]
    454a:	6801      	ldr	r1, [r0, #0]
    454c:	4219      	tst	r1, r3
    454e:	f040 80e0 	bne.w	4712 <am_hal_i2c_bit_bang_send+0x6d2>
        if (--maxLoop == 0)
    4552:	3e08      	subs	r6, #8
    4554:	d1ae      	bne.n	44b4 <am_hal_i2c_bit_bang_send+0x474>
    4556:	e5d4      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
        WRITE_SDA_LO();
    4558:	6a21      	ldr	r1, [r4, #32]
    455a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    455c:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    455e:	2004      	movs	r0, #4
    4560:	f7fd f90a 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    4564:	68e7      	ldr	r7, [r4, #12]
    4566:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    4568:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    456a:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    456c:	6813      	ldr	r3, [r2, #0]
    456e:	4203      	tst	r3, r0
    4570:	d09e      	beq.n	44b0 <am_hal_i2c_bit_bang_send+0x470>
        PULL_SDA_HI();
    4572:	69e7      	ldr	r7, [r4, #28]
    4574:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    4576:	603c      	str	r4, [r7, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4578:	2005      	movs	r0, #5
    457a:	f7fd f8fd 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    457e:	2d00      	cmp	r5, #0
    4580:	f000 80d9 	beq.w	4736 <am_hal_i2c_bit_bang_send+0x6f6>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;  // if it happens early
    4584:	2002      	movs	r0, #2
    4586:	e5bd      	b.n	4104 <am_hal_i2c_bit_bang_send+0xc4>
        if ( one_byte & (0x80 >> i) )
    4588:	f04f 0880 	mov.w	r8, #128	; 0x80
    458c:	fa48 f105 	asr.w	r1, r8, r5
    4590:	ea11 0f0b 	tst.w	r1, fp
        WRITE_SCL_LO();
    4594:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    4596:	bf14      	ite	ne
    4598:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    459a:	6a21      	ldreq	r1, [r4, #32]
        WRITE_SCL_LO();
    459c:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    459e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    45a0:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    45a2:	600b      	str	r3, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    45a4:	2007      	movs	r0, #7
    45a6:	f7fd f8e7 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    45aa:	68e0      	ldr	r0, [r4, #12]
    45ac:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    45ae:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    45b0:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    45b2:	6813      	ldr	r3, [r2, #0]
    45b4:	4219      	tst	r1, r3
    45b6:	bf08      	it	eq
    45b8:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    45bc:	d149      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45be:	2004      	movs	r0, #4
    45c0:	f7fd f8da 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    45c4:	6961      	ldr	r1, [r4, #20]
    45c6:	69a3      	ldr	r3, [r4, #24]
    45c8:	680a      	ldr	r2, [r1, #0]
    45ca:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45cc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    45d0:	d13f      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45d2:	f7fd f8d1 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    45d6:	6967      	ldr	r7, [r4, #20]
    45d8:	69a1      	ldr	r1, [r4, #24]
    45da:	683b      	ldr	r3, [r7, #0]
    45dc:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45de:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    45e2:	d136      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45e4:	f7fd f8c8 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    45e8:	6962      	ldr	r2, [r4, #20]
    45ea:	69a7      	ldr	r7, [r4, #24]
    45ec:	6811      	ldr	r1, [r2, #0]
    45ee:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45f0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    45f4:	d12d      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45f6:	f7fd f8bf 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    45fa:	6962      	ldr	r2, [r4, #20]
    45fc:	69a3      	ldr	r3, [r4, #24]
    45fe:	6817      	ldr	r7, [r2, #0]
    4600:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4602:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4606:	d124      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4608:	f7fd f8b6 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    460c:	6961      	ldr	r1, [r4, #20]
    460e:	69a3      	ldr	r3, [r4, #24]
    4610:	680a      	ldr	r2, [r1, #0]
    4612:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4614:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4618:	d11b      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    461a:	f7fd f8ad 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    461e:	6967      	ldr	r7, [r4, #20]
    4620:	69a1      	ldr	r1, [r4, #24]
    4622:	683b      	ldr	r3, [r7, #0]
    4624:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4626:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    462a:	d112      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    462c:	f7fd f8a4 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4630:	6962      	ldr	r2, [r4, #20]
    4632:	69a7      	ldr	r7, [r4, #24]
    4634:	6811      	ldr	r1, [r2, #0]
    4636:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4638:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    463c:	d109      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    463e:	f7fd f89b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4642:	6960      	ldr	r0, [r4, #20]
    4644:	69a3      	ldr	r3, [r4, #24]
    4646:	6802      	ldr	r2, [r0, #0]
    4648:	421a      	tst	r2, r3
    464a:	d102      	bne.n	4652 <am_hal_i2c_bit_bang_send+0x612>
        if (--maxLoop == 0)
    464c:	3e08      	subs	r6, #8
    464e:	d1b6      	bne.n	45be <am_hal_i2c_bit_bang_send+0x57e>
    4650:	e557      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    4652:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    4654:	2005      	movs	r0, #5
    4656:	f7fd f88f 	bl	1778 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    465a:	2d08      	cmp	r5, #8
    465c:	d196      	bne.n	458c <am_hal_i2c_bit_bang_send+0x54c>
    WRITE_SCL_LO();
    465e:	6926      	ldr	r6, [r4, #16]
    4660:	69a7      	ldr	r7, [r4, #24]
    4662:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    4664:	2007      	movs	r0, #7
    4666:	f7fd f887 	bl	1778 <am_hal_flash_delay>
    PULL_SCL_HI();
    466a:	68e1      	ldr	r1, [r4, #12]
    466c:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    466e:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4670:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    4672:	681a      	ldr	r2, [r3, #0]
    4674:	4210      	tst	r0, r2
    4676:	bf08      	it	eq
    4678:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    467c:	d14e      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    467e:	2004      	movs	r0, #4
    4680:	f7fd f87a 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4684:	6966      	ldr	r6, [r4, #20]
    4686:	69a7      	ldr	r7, [r4, #24]
    4688:	6831      	ldr	r1, [r6, #0]
    468a:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    468c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4690:	d144      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4692:	f7fd f871 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4696:	6962      	ldr	r2, [r4, #20]
    4698:	69a3      	ldr	r3, [r4, #24]
    469a:	6816      	ldr	r6, [r2, #0]
    469c:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    469e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46a2:	d13b      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46a4:	f7fd f868 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    46a8:	6967      	ldr	r7, [r4, #20]
    46aa:	69a1      	ldr	r1, [r4, #24]
    46ac:	683a      	ldr	r2, [r7, #0]
    46ae:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46b0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46b4:	d132      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46b6:	f7fd f85f 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    46ba:	6966      	ldr	r6, [r4, #20]
    46bc:	69a3      	ldr	r3, [r4, #24]
    46be:	6837      	ldr	r7, [r6, #0]
    46c0:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46c2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46c6:	d129      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46c8:	f7fd f856 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    46cc:	6961      	ldr	r1, [r4, #20]
    46ce:	69a6      	ldr	r6, [r4, #24]
    46d0:	680a      	ldr	r2, [r1, #0]
    46d2:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46d4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46d8:	d120      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46da:	f7fd f84d 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    46de:	6967      	ldr	r7, [r4, #20]
    46e0:	69a3      	ldr	r3, [r4, #24]
    46e2:	6839      	ldr	r1, [r7, #0]
    46e4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46e6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46ea:	d117      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46ec:	f7fd f844 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    46f0:	6966      	ldr	r6, [r4, #20]
    46f2:	69a7      	ldr	r7, [r4, #24]
    46f4:	6832      	ldr	r2, [r6, #0]
    46f6:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46f8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46fc:	d10e      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46fe:	f7fd f83b 	bl	1778 <am_hal_flash_delay>
    while (!GET_SCL())
    4702:	6960      	ldr	r0, [r4, #20]
    4704:	69a3      	ldr	r3, [r4, #24]
    4706:	6801      	ldr	r1, [r0, #0]
    4708:	4219      	tst	r1, r3
    470a:	d107      	bne.n	471c <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
    470c:	3d08      	subs	r5, #8
    470e:	d1b6      	bne.n	467e <am_hal_i2c_bit_bang_send+0x63e>
    4710:	e4f7      	b.n	4102 <am_hal_i2c_bit_bang_send+0xc2>
    if (!bNoStop)
    4712:	9e00      	ldr	r6, [sp, #0]
    4714:	2e00      	cmp	r6, #0
    4716:	f43f af2c 	beq.w	4572 <am_hal_i2c_bit_bang_send+0x532>
    471a:	e72d      	b.n	4578 <am_hal_i2c_bit_bang_send+0x538>
    data_naked = GET_SDA();
    471c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    471e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4720:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4722:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    4724:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    4726:	f7fd f827 	bl	1778 <am_hal_flash_delay>
    if ( data_naked )
    472a:	2d00      	cmp	r5, #0
    472c:	f47f af2a 	bne.w	4584 <am_hal_i2c_bit_bang_send+0x544>
    4730:	e5c6      	b.n	42c0 <am_hal_i2c_bit_bang_send+0x280>
                    data_naked = true;
    4732:	2501      	movs	r5, #1
    4734:	e6a6      	b.n	4484 <am_hal_i2c_bit_bang_send+0x444>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4736:	4628      	mov	r0, r5
    4738:	e4e4      	b.n	4104 <am_hal_i2c_bit_bang_send+0xc4>
    473a:	bf00      	nop
    473c:	6c696146 	.word	0x6c696146
    4740:	74206465 	.word	0x74206465
    4744:	6f63206f 	.word	0x6f63206f
    4748:	7261706d 	.word	0x7261706d
    474c:	75622065 	.word	0x75622065
    4750:	72656666 	.word	0x72656666
    4754:	74612073 	.word	0x74612073
    4758:	646e6920 	.word	0x646e6920
    475c:	25207865 	.word	0x25207865
    4760:	000a2064 	.word	0x000a2064
    4764:	0000002e 	.word	0x0000002e
    4768:	20534f49 	.word	0x20534f49
    476c:	74736554 	.word	0x74736554
    4770:	736f4820 	.word	0x736f4820
    4774:	57203a74 	.word	0x57203a74
    4778:	69746961 	.word	0x69746961
    477c:	6620676e 	.word	0x6620676e
    4780:	6120726f 	.word	0x6120726f
    4784:	656c2074 	.word	0x656c2074
    4788:	20747361 	.word	0x20747361
    478c:	62206425 	.word	0x62206425
    4790:	73657479 	.word	0x73657479
    4794:	6f726620 	.word	0x6f726620
    4798:	6874206d 	.word	0x6874206d
    479c:	6c732065 	.word	0x6c732065
    47a0:	2e657661 	.word	0x2e657661
    47a4:	00000000 	.word	0x00000000
    47a8:	7461440a 	.word	0x7461440a
    47ac:	65562061 	.word	0x65562061
    47b0:	69666972 	.word	0x69666972
    47b4:	69746163 	.word	0x69746163
    47b8:	66206e6f 	.word	0x66206e6f
    47bc:	656c6961 	.word	0x656c6961
    47c0:	63412064 	.word	0x63412064
    47c4:	3a6d7563 	.word	0x3a6d7563
    47c8:	20756c25 	.word	0x20756c25
    47cc:	253d7872 	.word	0x253d7872
    47d0:	00000a64 	.word	0x00000a64
    47d4:	7365540a 	.word	0x7365540a
    47d8:	6f442074 	.word	0x6f442074
    47dc:	2d20656e 	.word	0x2d20656e
    47e0:	746f5420 	.word	0x746f5420
    47e4:	52206c61 	.word	0x52206c61
    47e8:	69656365 	.word	0x69656365
    47ec:	20646576 	.word	0x20646576
    47f0:	253d203d 	.word	0x253d203d
    47f4:	00000a64 	.word	0x00000a64
    47f8:	0a0a0a0a 	.word	0x0a0a0a0a
    47fc:	0a0a0a0a 	.word	0x0a0a0a0a
    4800:	0a0a0a0a 	.word	0x0a0a0a0a
    4804:	0a0a0a0a 	.word	0x0a0a0a0a
    4808:	00000a0a 	.word	0x00000a0a

0000480c <apollo2_iomce0>:
    480c:	0000000b 00000008 0000000c 00000008     ................

0000481c <g_SPIpins>:
    481c:	00000006 0000000a 00000009 0000000a     ................

0000482c <CSWTCH.4>:
    482c:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    483c:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
    484c:	4f495047 6d756e20 20726562 2074756f     GPIO number out 
    485c:	7220666f 65676e61 0000002e 61766e49     of range....Inva
    486c:	2064696c 4f495047 6d756e20 2e726562     lid GPIO number.
    487c:	00000000 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    488c:	6970675f 00632e6f 204d4f49 74697277     _gpio.c.IOM writ
    489c:	68742065 68736572 20646c6f 206f6f74     e threshold too 
    48ac:	2e676962 00000000 204d4f49 64616572     big.....IOM read
    48bc:	72687420 6f687365 7420646c 62206f6f      threshold too b
    48cc:	002e6769 204d4f49 74697277 68742065     ig..IOM write th
    48dc:	68736572 20646c6f 206f6f74 6c616d73     reshold too smal
    48ec:	00002e6c 204d4f49 64616572 72687420     l...IOM read thr
    48fc:	6f687365 7420646c 73206f6f 6c6c616d     eshold too small
    490c:	0000002e 69797254 7420676e 6f64206f     ....Trying to do
    491c:	30206120 74796220 72742065 61736e61      a 0 byte transa
    492c:	6f697463 0000006e 2e5c2e2e 6d615c2e     ction.....\..\am
    493c:	6c61685f 6d6f695f 0000632e 20433249     _hal_iom.c..I2C 
    494c:	6e617274 72656673 6f6f7420 67696220     transfer too big
    495c:	0000002e 20656854 6f666966 656f6420     ....The fifo doe
    496c:	74276e73 6e6f6320 6e696174 65687420     sn't contain the
    497c:	71657220 74736575 6e206465 65626d75      requested numbe
    498c:	666f2072 74796220 002e7365 204d4f49     r of bytes..IOM 
    499c:	43444d43 7720504d 6e207361 7320746f     CMDCMP was not s
    49ac:	006e6565 20656854 204d4f49 75657571     een.The IOM queu
    49bc:	73692065 6c756620 41202e6c 636f6c6c     e is full. Alloc
    49cc:	20657461 65726f6d 6f6d656d 74207972     ate morememory t
    49dc:	6874206f 4f492065 7571204d 2c657565     o the IOM queue,
    49ec:	20726f20 6f6c6c61 74692077 726f6d20      or allow it mor
    49fc:	6d697465 6f742065 706d6520 62207974     etime to empty b
    4a0c:	65777465 74206e65 736e6172 69746361     etween transacti
    4a1c:	2e736e6f 00000000 20495053 6e617274     ons.....SPI tran
    4a2c:	72656673 6f6f7420 67696220 0000002e     sfer too big....
    4a3c:	20656854 6f666966 756f6320 276e646c     The fifo couldn'
    4a4c:	69662074 68742074 65722065 73657571     t fit the reques
    4a5c:	20646574 626d756e 6f207265 79622066     ted number of by
    4a6c:	00736574 69797254 7420676e 7375206f     tes.Trying to us
    4a7c:	6e612065 4d4f4920 646f6d20 20656c75     e an IOM module 
    4a8c:	74616874 656f6420 74276e73 69786520     that doesn't exi
    4a9c:	002e7473                                st..
