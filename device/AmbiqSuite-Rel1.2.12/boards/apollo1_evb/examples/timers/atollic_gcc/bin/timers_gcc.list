
timers_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000034  10001000  00001a5c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10001034  00001a90  00021034  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021034  2**0
                  CONTENTS, READONLY
  5 .debug_info   000060b1  00000000  00000000  0002106b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f6a  00000000  00000000  0002711c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000778  00000000  00000000  00029086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000009e8  00000000  00000000  000297fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b7e  00000000  00000000  0002a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023c3  00000000  00000000  0002dd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00030127  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000128c  00000000  00000000  000301a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d99  00000000  00000000  00031430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 05 06 00 00 6d 06 00 00 ad 06 00 00     ........m.......
      10:	ad 06 00 00 ad 06 00 00 ad 06 00 00 00 00 00 00     ................
	...
      2c:	73 06 00 00 73 06 00 00 00 00 00 00 73 06 00 00     s...s.......s...
      3c:	73 06 00 00 73 06 00 00 73 06 00 00 73 06 00 00     s...s...s...s...
      4c:	73 06 00 00 73 06 00 00 73 06 00 00 73 06 00 00     s...s...s...s...
      5c:	73 06 00 00 73 06 00 00 73 06 00 00 49 05 00 00     s...s...s...I...
      6c:	73 06 00 00 73 06 00 00 73 06 00 00 73 06 00 00     s...s...s...s...
      7c:	73 06 00 00                                         s...

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     120:	b490      	push	{r4, r7}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2b00      	cmp	r3, #0
     12c:	f000 8138 	beq.w	3a0 <am_devices_led_init+0x280>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     130:	687b      	ldr	r3, [r7, #4]
     132:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     134:	2b31      	cmp	r3, #49	; 0x31
     136:	f200 8133 	bhi.w	3a0 <am_devices_led_init+0x280>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	685b      	ldr	r3, [r3, #4]
     13e:	f003 0302 	and.w	r3, r3, #2
     142:	2b00      	cmp	r3, #0
     144:	f000 8096 	beq.w	274 <am_devices_led_init+0x154>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	2b00      	cmp	r3, #0
     14e:	db4e      	blt.n	1ee <am_devices_led_init+0xce>
     150:	4b96      	ldr	r3, [pc, #600]	; (3ac <am_devices_led_init+0x28c>)
     152:	2273      	movs	r2, #115	; 0x73
     154:	601a      	str	r2, [r3, #0]
     156:	687b      	ldr	r3, [r7, #4]
     158:	681b      	ldr	r3, [r3, #0]
     15a:	085b      	lsrs	r3, r3, #1
     15c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     160:	4b93      	ldr	r3, [pc, #588]	; (3b0 <am_devices_led_init+0x290>)
     162:	4413      	add	r3, r2
     164:	461c      	mov	r4, r3
     166:	687b      	ldr	r3, [r7, #4]
     168:	681b      	ldr	r3, [r3, #0]
     16a:	009b      	lsls	r3, r3, #2
     16c:	f003 031c 	and.w	r3, r3, #28
     170:	2202      	movs	r2, #2
     172:	409a      	lsls	r2, r3
     174:	687b      	ldr	r3, [r7, #4]
     176:	681b      	ldr	r3, [r3, #0]
     178:	085b      	lsrs	r3, r3, #1
     17a:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     17e:	4b8c      	ldr	r3, [pc, #560]	; (3b0 <am_devices_led_init+0x290>)
     180:	440b      	add	r3, r1
     182:	6819      	ldr	r1, [r3, #0]
     184:	687b      	ldr	r3, [r7, #4]
     186:	681b      	ldr	r3, [r3, #0]
     188:	009b      	lsls	r3, r3, #2
     18a:	f003 031c 	and.w	r3, r3, #28
     18e:	2007      	movs	r0, #7
     190:	fa00 f303 	lsl.w	r3, r0, r3
     194:	43db      	mvns	r3, r3
     196:	400b      	ands	r3, r1
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	00db      	lsls	r3, r3, #3
     1b4:	f003 0318 	and.w	r3, r3, #24
     1b8:	2218      	movs	r2, #24
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1cc:	6819      	ldr	r1, [r3, #0]
     1ce:	687b      	ldr	r3, [r7, #4]
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	00db      	lsls	r3, r3, #3
     1d4:	f003 0318 	and.w	r3, r3, #24
     1d8:	20ff      	movs	r0, #255	; 0xff
     1da:	fa00 f303 	lsl.w	r3, r0, r3
     1de:	43db      	mvns	r3, r3
     1e0:	400b      	ands	r3, r1
     1e2:	4313      	orrs	r3, r2
     1e4:	6023      	str	r3, [r4, #0]
     1e6:	4b71      	ldr	r3, [pc, #452]	; (3ac <am_devices_led_init+0x28c>)
     1e8:	2200      	movs	r2, #0
     1ea:	601a      	str	r2, [r3, #0]
     1ec:	e000      	b.n	1f0 <am_devices_led_init+0xd0>
     1ee:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	08db      	lsrs	r3, r3, #3
     1f6:	f003 0204 	and.w	r2, r3, #4
     1fa:	4b6e      	ldr	r3, [pc, #440]	; (3b4 <am_devices_led_init+0x294>)
     1fc:	4413      	add	r3, r2
     1fe:	4619      	mov	r1, r3
     200:	687b      	ldr	r3, [r7, #4]
     202:	681b      	ldr	r3, [r3, #0]
     204:	f003 031f 	and.w	r3, r3, #31
     208:	2201      	movs	r2, #1
     20a:	fa02 f303 	lsl.w	r3, r2, r3
     20e:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     210:	687b      	ldr	r3, [r7, #4]
     212:	681b      	ldr	r3, [r3, #0]
     214:	08db      	lsrs	r3, r3, #3
     216:	f003 0204 	and.w	r2, r3, #4
     21a:	4b67      	ldr	r3, [pc, #412]	; (3b8 <am_devices_led_init+0x298>)
     21c:	4413      	add	r3, r2
     21e:	4618      	mov	r0, r3
     220:	687b      	ldr	r3, [r7, #4]
     222:	685b      	ldr	r3, [r3, #4]
     224:	f003 0301 	and.w	r3, r3, #1
     228:	2b00      	cmp	r3, #0
     22a:	d010      	beq.n	24e <am_devices_led_init+0x12e>
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	681b      	ldr	r3, [r3, #0]
     230:	08db      	lsrs	r3, r3, #3
     232:	f003 0204 	and.w	r2, r3, #4
     236:	4b60      	ldr	r3, [pc, #384]	; (3b8 <am_devices_led_init+0x298>)
     238:	4413      	add	r3, r2
     23a:	681a      	ldr	r2, [r3, #0]
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 031f 	and.w	r3, r3, #31
     244:	2101      	movs	r1, #1
     246:	fa01 f303 	lsl.w	r3, r1, r3
     24a:	4313      	orrs	r3, r2
     24c:	e010      	b.n	270 <am_devices_led_init+0x150>
     24e:	687b      	ldr	r3, [r7, #4]
     250:	681b      	ldr	r3, [r3, #0]
     252:	08db      	lsrs	r3, r3, #3
     254:	f003 0204 	and.w	r2, r3, #4
     258:	4b57      	ldr	r3, [pc, #348]	; (3b8 <am_devices_led_init+0x298>)
     25a:	4413      	add	r3, r2
     25c:	681a      	ldr	r2, [r3, #0]
     25e:	687b      	ldr	r3, [r7, #4]
     260:	681b      	ldr	r3, [r3, #0]
     262:	f003 031f 	and.w	r3, r3, #31
     266:	2101      	movs	r1, #1
     268:	fa01 f303 	lsl.w	r3, r1, r3
     26c:	43db      	mvns	r3, r3
     26e:	4013      	ands	r3, r2
     270:	6003      	str	r3, [r0, #0]
     272:	e096      	b.n	3a2 <am_devices_led_init+0x282>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     274:	687b      	ldr	r3, [r7, #4]
     276:	681b      	ldr	r3, [r3, #0]
     278:	2b00      	cmp	r3, #0
     27a:	db4e      	blt.n	31a <am_devices_led_init+0x1fa>
     27c:	4b4b      	ldr	r3, [pc, #300]	; (3ac <am_devices_led_init+0x28c>)
     27e:	2273      	movs	r2, #115	; 0x73
     280:	601a      	str	r2, [r3, #0]
     282:	687b      	ldr	r3, [r7, #4]
     284:	681b      	ldr	r3, [r3, #0]
     286:	085b      	lsrs	r3, r3, #1
     288:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     28c:	4b48      	ldr	r3, [pc, #288]	; (3b0 <am_devices_led_init+0x290>)
     28e:	4413      	add	r3, r2
     290:	461c      	mov	r4, r3
     292:	687b      	ldr	r3, [r7, #4]
     294:	681b      	ldr	r3, [r3, #0]
     296:	009b      	lsls	r3, r3, #2
     298:	f003 031c 	and.w	r3, r3, #28
     29c:	2206      	movs	r2, #6
     29e:	409a      	lsls	r2, r3
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	681b      	ldr	r3, [r3, #0]
     2a4:	085b      	lsrs	r3, r3, #1
     2a6:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     2aa:	4b41      	ldr	r3, [pc, #260]	; (3b0 <am_devices_led_init+0x290>)
     2ac:	440b      	add	r3, r1
     2ae:	6819      	ldr	r1, [r3, #0]
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	009b      	lsls	r3, r3, #2
     2b6:	f003 031c 	and.w	r3, r3, #28
     2ba:	2007      	movs	r0, #7
     2bc:	fa00 f303 	lsl.w	r3, r0, r3
     2c0:	43db      	mvns	r3, r3
     2c2:	400b      	ands	r3, r1
     2c4:	4313      	orrs	r3, r2
     2c6:	6023      	str	r3, [r4, #0]
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2d8:	461c      	mov	r4, r3
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	00db      	lsls	r3, r3, #3
     2e0:	f003 0318 	and.w	r3, r3, #24
     2e4:	2218      	movs	r2, #24
     2e6:	409a      	lsls	r2, r3
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2f8:	6819      	ldr	r1, [r3, #0]
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	00db      	lsls	r3, r3, #3
     300:	f003 0318 	and.w	r3, r3, #24
     304:	20ff      	movs	r0, #255	; 0xff
     306:	fa00 f303 	lsl.w	r3, r0, r3
     30a:	43db      	mvns	r3, r3
     30c:	400b      	ands	r3, r1
     30e:	4313      	orrs	r3, r2
     310:	6023      	str	r3, [r4, #0]
     312:	4b26      	ldr	r3, [pc, #152]	; (3ac <am_devices_led_init+0x28c>)
     314:	2200      	movs	r2, #0
     316:	601a      	str	r2, [r3, #0]
     318:	e000      	b.n	31c <am_devices_led_init+0x1fc>
     31a:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	681b      	ldr	r3, [r3, #0]
     320:	08db      	lsrs	r3, r3, #3
     322:	f003 0204 	and.w	r2, r3, #4
     326:	4b23      	ldr	r3, [pc, #140]	; (3b4 <am_devices_led_init+0x294>)
     328:	4413      	add	r3, r2
     32a:	4619      	mov	r1, r3
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	681b      	ldr	r3, [r3, #0]
     330:	f003 031f 	and.w	r3, r3, #31
     334:	2201      	movs	r2, #1
     336:	fa02 f303 	lsl.w	r3, r2, r3
     33a:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	681b      	ldr	r3, [r3, #0]
     340:	08db      	lsrs	r3, r3, #3
     342:	f003 0204 	and.w	r2, r3, #4
     346:	4b1c      	ldr	r3, [pc, #112]	; (3b8 <am_devices_led_init+0x298>)
     348:	4413      	add	r3, r2
     34a:	4618      	mov	r0, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	685b      	ldr	r3, [r3, #4]
     350:	f003 0301 	and.w	r3, r3, #1
     354:	2b00      	cmp	r3, #0
     356:	d010      	beq.n	37a <am_devices_led_init+0x25a>
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	08db      	lsrs	r3, r3, #3
     35e:	f003 0204 	and.w	r2, r3, #4
     362:	4b15      	ldr	r3, [pc, #84]	; (3b8 <am_devices_led_init+0x298>)
     364:	4413      	add	r3, r2
     366:	681a      	ldr	r2, [r3, #0]
     368:	687b      	ldr	r3, [r7, #4]
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f003 031f 	and.w	r3, r3, #31
     370:	2101      	movs	r1, #1
     372:	fa01 f303 	lsl.w	r3, r1, r3
     376:	4313      	orrs	r3, r2
     378:	e010      	b.n	39c <am_devices_led_init+0x27c>
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	08db      	lsrs	r3, r3, #3
     380:	f003 0204 	and.w	r2, r3, #4
     384:	4b0c      	ldr	r3, [pc, #48]	; (3b8 <am_devices_led_init+0x298>)
     386:	4413      	add	r3, r2
     388:	681a      	ldr	r2, [r3, #0]
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 031f 	and.w	r3, r3, #31
     392:	2101      	movs	r1, #1
     394:	fa01 f303 	lsl.w	r3, r1, r3
     398:	43db      	mvns	r3, r3
     39a:	4013      	ands	r3, r2
     39c:	6003      	str	r3, [r0, #0]
     39e:	e000      	b.n	3a2 <am_devices_led_init+0x282>
        return;
     3a0:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
     3a2:	3708      	adds	r7, #8
     3a4:	46bd      	mov	sp, r7
     3a6:	bc90      	pop	{r4, r7}
     3a8:	4770      	bx	lr
     3aa:	bf00      	nop
     3ac:	40010060 	.word	0x40010060
     3b0:	40010040 	.word	0x40010040
     3b4:	400100b4 	.word	0x400100b4
     3b8:	40010088 	.word	0x40010088

000003bc <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     3bc:	b580      	push	{r7, lr}
     3be:	b084      	sub	sp, #16
     3c0:	af00      	add	r7, sp, #0
     3c2:	6078      	str	r0, [r7, #4]
     3c4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2b00      	cmp	r3, #0
     3ca:	d014      	beq.n	3f6 <am_devices_led_array_init+0x3a>
     3cc:	683b      	ldr	r3, [r7, #0]
     3ce:	2b1f      	cmp	r3, #31
     3d0:	d811      	bhi.n	3f6 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     3d2:	2300      	movs	r3, #0
     3d4:	60fb      	str	r3, [r7, #12]
     3d6:	e009      	b.n	3ec <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     3d8:	68fb      	ldr	r3, [r7, #12]
     3da:	00db      	lsls	r3, r3, #3
     3dc:	687a      	ldr	r2, [r7, #4]
     3de:	4413      	add	r3, r2
     3e0:	4618      	mov	r0, r3
     3e2:	f7ff fe9d 	bl	120 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	3301      	adds	r3, #1
     3ea:	60fb      	str	r3, [r7, #12]
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	683b      	ldr	r3, [r7, #0]
     3f0:	429a      	cmp	r2, r3
     3f2:	d3f1      	bcc.n	3d8 <am_devices_led_array_init+0x1c>
     3f4:	e000      	b.n	3f8 <am_devices_led_array_init+0x3c>
        return;
     3f6:	bf00      	nop
    }
}
     3f8:	3710      	adds	r7, #16
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
	...

00000400 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     400:	b580      	push	{r7, lr}
     402:	b082      	sub	sp, #8
     404:	af00      	add	r7, sp, #0
     406:	6078      	str	r0, [r7, #4]
     408:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	2b00      	cmp	r3, #0
     40e:	d06e      	beq.n	4ee <am_devices_led_toggle+0xee>
     410:	683b      	ldr	r3, [r7, #0]
     412:	2b1e      	cmp	r3, #30
     414:	d86b      	bhi.n	4ee <am_devices_led_toggle+0xee>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     416:	683b      	ldr	r3, [r7, #0]
     418:	00db      	lsls	r3, r3, #3
     41a:	687a      	ldr	r2, [r7, #4]
     41c:	4413      	add	r3, r2
     41e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     420:	2b31      	cmp	r3, #49	; 0x31
     422:	d864      	bhi.n	4ee <am_devices_led_toggle+0xee>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     424:	683b      	ldr	r3, [r7, #0]
     426:	00db      	lsls	r3, r3, #3
     428:	687a      	ldr	r2, [r7, #4]
     42a:	4413      	add	r3, r2
     42c:	685b      	ldr	r3, [r3, #4]
     42e:	f003 0302 	and.w	r3, r3, #2
     432:	2b00      	cmp	r3, #0
     434:	d022      	beq.n	47c <am_devices_led_toggle+0x7c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     436:	683b      	ldr	r3, [r7, #0]
     438:	00db      	lsls	r3, r3, #3
     43a:	687a      	ldr	r2, [r7, #4]
     43c:	4413      	add	r3, r2
     43e:	681b      	ldr	r3, [r3, #0]
     440:	08db      	lsrs	r3, r3, #3
     442:	f003 0204 	and.w	r2, r3, #4
     446:	4b2c      	ldr	r3, [pc, #176]	; (4f8 <am_devices_led_toggle+0xf8>)
     448:	4413      	add	r3, r2
     44a:	4618      	mov	r0, r3
     44c:	683b      	ldr	r3, [r7, #0]
     44e:	00db      	lsls	r3, r3, #3
     450:	687a      	ldr	r2, [r7, #4]
     452:	4413      	add	r3, r2
     454:	681b      	ldr	r3, [r3, #0]
     456:	08db      	lsrs	r3, r3, #3
     458:	f003 0204 	and.w	r2, r3, #4
     45c:	4b26      	ldr	r3, [pc, #152]	; (4f8 <am_devices_led_toggle+0xf8>)
     45e:	4413      	add	r3, r2
     460:	681a      	ldr	r2, [r3, #0]
     462:	683b      	ldr	r3, [r7, #0]
     464:	00db      	lsls	r3, r3, #3
     466:	6879      	ldr	r1, [r7, #4]
     468:	440b      	add	r3, r1
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	f003 031f 	and.w	r3, r3, #31
     470:	2101      	movs	r1, #1
     472:	fa01 f303 	lsl.w	r3, r1, r3
     476:	4053      	eors	r3, r2
     478:	6003      	str	r3, [r0, #0]
     47a:	e039      	b.n	4f0 <am_devices_led_toggle+0xf0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     47c:	683b      	ldr	r3, [r7, #0]
     47e:	00db      	lsls	r3, r3, #3
     480:	687a      	ldr	r2, [r7, #4]
     482:	4413      	add	r3, r2
     484:	681b      	ldr	r3, [r3, #0]
     486:	4618      	mov	r0, r3
     488:	f001 f956 	bl	1738 <am_hal_gpio_out_enable_bit_get>
     48c:	4603      	mov	r3, r0
     48e:	2b00      	cmp	r3, #0
     490:	d016      	beq.n	4c0 <am_devices_led_toggle+0xc0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     492:	683b      	ldr	r3, [r7, #0]
     494:	00db      	lsls	r3, r3, #3
     496:	687a      	ldr	r2, [r7, #4]
     498:	4413      	add	r3, r2
     49a:	681b      	ldr	r3, [r3, #0]
     49c:	08db      	lsrs	r3, r3, #3
     49e:	f003 0204 	and.w	r2, r3, #4
     4a2:	4b16      	ldr	r3, [pc, #88]	; (4fc <am_devices_led_toggle+0xfc>)
     4a4:	4413      	add	r3, r2
     4a6:	4619      	mov	r1, r3
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	00db      	lsls	r3, r3, #3
     4ac:	687a      	ldr	r2, [r7, #4]
     4ae:	4413      	add	r3, r2
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	f003 031f 	and.w	r3, r3, #31
     4b6:	2201      	movs	r2, #1
     4b8:	fa02 f303 	lsl.w	r3, r2, r3
     4bc:	600b      	str	r3, [r1, #0]
     4be:	e017      	b.n	4f0 <am_devices_led_toggle+0xf0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     4c0:	683b      	ldr	r3, [r7, #0]
     4c2:	00db      	lsls	r3, r3, #3
     4c4:	687a      	ldr	r2, [r7, #4]
     4c6:	4413      	add	r3, r2
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	08db      	lsrs	r3, r3, #3
     4cc:	f003 0204 	and.w	r2, r3, #4
     4d0:	4b0b      	ldr	r3, [pc, #44]	; (500 <am_devices_led_toggle+0x100>)
     4d2:	4413      	add	r3, r2
     4d4:	4619      	mov	r1, r3
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	00db      	lsls	r3, r3, #3
     4da:	687a      	ldr	r2, [r7, #4]
     4dc:	4413      	add	r3, r2
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	f003 031f 	and.w	r3, r3, #31
     4e4:	2201      	movs	r2, #1
     4e6:	fa02 f303 	lsl.w	r3, r2, r3
     4ea:	600b      	str	r3, [r1, #0]
     4ec:	e000      	b.n	4f0 <am_devices_led_toggle+0xf0>
        return;
     4ee:	bf00      	nop
        }
    }
#endif
}
     4f0:	3708      	adds	r7, #8
     4f2:	46bd      	mov	sp, r7
     4f4:	bd80      	pop	{r7, pc}
     4f6:	bf00      	nop
     4f8:	40010088 	.word	0x40010088
     4fc:	400100b4 	.word	0x400100b4
     500:	400100a8 	.word	0x400100a8

00000504 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     504:	b580      	push	{r7, lr}
     506:	b082      	sub	sp, #8
     508:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     50a:	2002      	movs	r0, #2
     50c:	f001 f87e 	bl	160c <am_hal_clkgen_osc_start>

    //
    // Set up timer A0 to count 3MHz clocks but don't start it yet
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     510:	f64f 71ff 	movw	r1, #65535	; 0xffff
     514:	2000      	movs	r0, #0
     516:	f001 f8b5 	bl	1684 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     51a:	490a      	ldr	r1, [pc, #40]	; (544 <timerA0_init+0x40>)
     51c:	2000      	movs	r0, #0
     51e:	f001 f889 	bl	1634 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = LED_PERIOD / 2;
     522:	2310      	movs	r3, #16
     524:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     526:	687b      	ldr	r3, [r7, #4]
     528:	085b      	lsrs	r3, r3, #1
     52a:	687a      	ldr	r2, [r7, #4]
     52c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     530:	2000      	movs	r0, #0
     532:	f001 f8b1 	bl	1698 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     536:	2001      	movs	r0, #1
     538:	f001 f8f4 	bl	1724 <am_hal_ctimer_int_clear>
}
     53c:	bf00      	nop
     53e:	3708      	adds	r7, #8
     540:	46bd      	mov	sp, r7
     542:	bd80      	pop	{r7, pc}
     544:	10001000 	.word	0x10001000

00000548 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     548:	b580      	push	{r7, lr}
     54a:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     54c:	2001      	movs	r0, #1
     54e:	f001 f8e9 	bl	1724 <am_hal_ctimer_int_clear>

    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     552:	2100      	movs	r1, #0
     554:	4802      	ldr	r0, [pc, #8]	; (560 <am_ctimer_isr+0x18>)
     556:	f7ff ff53 	bl	400 <am_devices_led_toggle>
}
     55a:	bf00      	nop
     55c:	bd80      	pop	{r7, pc}
     55e:	bf00      	nop
     560:	1000100c 	.word	0x1000100c

00000564 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     564:	b580      	push	{r7, lr}
     566:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     568:	2000      	movs	r0, #0
     56a:	f001 f833 	bl	15d4 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     56e:	f000 ffc9 	bl	1504 <am_bsp_low_power_init>

    //
    // Configure the pins for this board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     572:	2105      	movs	r1, #5
     574:	481d      	ldr	r0, [pc, #116]	; (5ec <main+0x88>)
     576:	f7ff ff21 	bl	3bc <am_devices_led_array_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     57a:	481d      	ldr	r0, [pc, #116]	; (5f0 <main+0x8c>)
     57c:	f000 f916 	bl	7ac <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     580:	4b1c      	ldr	r3, [pc, #112]	; (5f4 <main+0x90>)
     582:	2273      	movs	r2, #115	; 0x73
     584:	601a      	str	r2, [r3, #0]
     586:	4a1c      	ldr	r2, [pc, #112]	; (5f8 <main+0x94>)
     588:	4b1b      	ldr	r3, [pc, #108]	; (5f8 <main+0x94>)
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     590:	6013      	str	r3, [r2, #0]
     592:	4a1a      	ldr	r2, [pc, #104]	; (5fc <main+0x98>)
     594:	4b19      	ldr	r3, [pc, #100]	; (5fc <main+0x98>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     59c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     5a0:	6013      	str	r3, [r2, #0]
     5a2:	4b14      	ldr	r3, [pc, #80]	; (5f4 <main+0x90>)
     5a4:	2200      	movs	r2, #0
     5a6:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     5a8:	f001 f904 	bl	17b4 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     5ac:	f000 ffbc 	bl	1528 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     5b0:	f000 ff9e 	bl	14f0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Timer Example\n");
     5b4:	4812      	ldr	r0, [pc, #72]	; (600 <main+0x9c>)
     5b6:	f000 ff7d 	bl	14b4 <am_util_stdio_printf>
    am_util_delay_ms(10);
     5ba:	200a      	movs	r0, #10
     5bc:	f000 f85c 	bl	678 <am_util_delay_ms>

    //
    // TimerA0 init.
    //
    timerA0_init();
     5c0:	f7ff ffa0 	bl	504 <timerA0_init>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     5c4:	201a      	movs	r0, #26
     5c6:	f001 f8c9 	bl	175c <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     5ca:	f001 f8ef 	bl	17ac <am_hal_interrupt_master_enable>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     5ce:	2001      	movs	r0, #1
     5d0:	f001 f8a0 	bl	1714 <am_hal_ctimer_int_enable>

    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     5d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5d8:	2000      	movs	r0, #0
     5da:	f001 f841 	bl	1660 <am_hal_ctimer_start>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     5de:	f000 ffcf 	bl	1580 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     5e2:	2001      	movs	r0, #1
     5e4:	f001 f99a 	bl	191c <am_hal_sysctrl_sleep>
     5e8:	e7fb      	b.n	5e2 <main+0x7e>
     5ea:	bf00      	nop
     5ec:	1000100c 	.word	0x1000100c
     5f0:	000015d1 	.word	0x000015d1
     5f4:	40010060 	.word	0x40010060
     5f8:	40010054 	.word	0x40010054
     5fc:	40010028 	.word	0x40010028
     600:	00001a18 	.word	0x00001a18

00000604 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     604:	4811      	ldr	r0, [pc, #68]	; (64c <zero_loop+0x12>)
     606:	4912      	ldr	r1, [pc, #72]	; (650 <zero_loop+0x16>)
     608:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     60a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     60e:	4811      	ldr	r0, [pc, #68]	; (654 <zero_loop+0x1a>)
     610:	6801      	ldr	r1, [r0, #0]
     612:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     616:	6001      	str	r1, [r0, #0]
     618:	f3bf 8f4f 	dsb	sy
     61c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     620:	480d      	ldr	r0, [pc, #52]	; (658 <zero_loop+0x1e>)
     622:	490e      	ldr	r1, [pc, #56]	; (65c <zero_loop+0x22>)
     624:	4a0e      	ldr	r2, [pc, #56]	; (660 <zero_loop+0x26>)

00000626 <copy_loop>:
     626:	f850 3b04 	ldr.w	r3, [r0], #4
     62a:	f841 3b04 	str.w	r3, [r1], #4
     62e:	4291      	cmp	r1, r2
     630:	dbf9      	blt.n	626 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     632:	480c      	ldr	r0, [pc, #48]	; (664 <zero_loop+0x2a>)
     634:	490c      	ldr	r1, [pc, #48]	; (668 <zero_loop+0x2e>)
     636:	f04f 0200 	mov.w	r2, #0

0000063a <zero_loop>:
     63a:	4288      	cmp	r0, r1
     63c:	bfb8      	it	lt
     63e:	f840 2b04 	strlt.w	r2, [r0], #4
     642:	dbfa      	blt.n	63a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     644:	f7ff ff8e 	bl	564 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     648:	be00      	bkpt	0x0000
}
     64a:	bf00      	nop
     64c:	e000ed08 	.word	0xe000ed08
     650:	00000000 	.word	0x00000000
     654:	e000ed88 	.word	0xe000ed88
     658:	00001a5c 	.word	0x00001a5c
     65c:	10001000 	.word	0x10001000
     660:	10001034 	.word	0x10001034
     664:	10001034 	.word	0x10001034
     668:	10001140 	.word	0x10001140

0000066c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     66c:	b480      	push	{r7}
     66e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     670:	e7fe      	b.n	670 <am_nmi_isr+0x4>

00000672 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     672:	b480      	push	{r7}
     674:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     676:	e7fe      	b.n	676 <am_adc_isr+0x4>

00000678 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     678:	b580      	push	{r7, lr}
     67a:	b084      	sub	sp, #16
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     680:	f000 ffb8 	bl	15f4 <am_hal_clkgen_sysclk_get>
     684:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     686:	68fb      	ldr	r3, [r7, #12]
     688:	4a07      	ldr	r2, [pc, #28]	; (6a8 <am_util_delay_ms+0x30>)
     68a:	fba2 2303 	umull	r2, r3, r2, r3
     68e:	099b      	lsrs	r3, r3, #6
     690:	687a      	ldr	r2, [r7, #4]
     692:	fb02 f303 	mul.w	r3, r2, r3
     696:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     698:	68b8      	ldr	r0, [r7, #8]
     69a:	f001 f849 	bl	1730 <am_hal_flash_delay>
}
     69e:	bf00      	nop
     6a0:	3710      	adds	r7, #16
     6a2:	46bd      	mov	sp, r7
     6a4:	bd80      	pop	{r7, pc}
     6a6:	bf00      	nop
     6a8:	057619f1 	.word	0x057619f1

000006ac <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     6ac:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     6ae:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     6b0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     6b2:	f000 f809 	bl	6c8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     6b6:	bd01      	pop	{r0, pc}
}
     6b8:	bf00      	nop
     6ba:	4618      	mov	r0, r3

000006bc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     6bc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     6be:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     6c0:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     6c2:	4770      	bx	lr
}
     6c4:	bf00      	nop
     6c6:	4618      	mov	r0, r3

000006c8 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b096      	sub	sp, #88	; 0x58
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     6d0:	f107 030c 	add.w	r3, r7, #12
     6d4:	2200      	movs	r2, #0
     6d6:	601a      	str	r2, [r3, #0]
     6d8:	605a      	str	r2, [r3, #4]
     6da:	609a      	str	r2, [r3, #8]
     6dc:	60da      	str	r2, [r3, #12]
     6de:	611a      	str	r2, [r3, #16]
     6e0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     6e2:	2300      	movs	r3, #0
     6e4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     6ea:	4b2e      	ldr	r3, [pc, #184]	; (7a4 <am_util_faultisr_collect_data+0xdc>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     6f2:	b2db      	uxtb	r3, r3
     6f4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     6fa:	0a1b      	lsrs	r3, r3, #8
     6fc:	b2db      	uxtb	r3, r3
     6fe:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     704:	0c1b      	lsrs	r3, r3, #16
     706:	b29b      	uxth	r3, r3
     708:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     70c:	4b26      	ldr	r3, [pc, #152]	; (7a8 <am_util_faultisr_collect_data+0xe0>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     712:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     716:	b2db      	uxtb	r3, r3
     718:	f003 0302 	and.w	r3, r3, #2
     71c:	2b00      	cmp	r3, #0
     71e:	d005      	beq.n	72c <am_util_faultisr_collect_data+0x64>
     720:	6879      	ldr	r1, [r7, #4]
     722:	2006      	movs	r0, #6
     724:	f7ff ffca 	bl	6bc <getStackedReg>
     728:	4603      	mov	r3, r0
     72a:	e001      	b.n	730 <am_util_faultisr_collect_data+0x68>
     72c:	f04f 33ff 	mov.w	r3, #4294967295
     730:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     732:	6879      	ldr	r1, [r7, #4]
     734:	2000      	movs	r0, #0
     736:	f7ff ffc1 	bl	6bc <getStackedReg>
     73a:	4603      	mov	r3, r0
     73c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     73e:	6879      	ldr	r1, [r7, #4]
     740:	2001      	movs	r0, #1
     742:	f7ff ffbb 	bl	6bc <getStackedReg>
     746:	4603      	mov	r3, r0
     748:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     74a:	6879      	ldr	r1, [r7, #4]
     74c:	2002      	movs	r0, #2
     74e:	f7ff ffb5 	bl	6bc <getStackedReg>
     752:	4603      	mov	r3, r0
     754:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     756:	6879      	ldr	r1, [r7, #4]
     758:	2003      	movs	r0, #3
     75a:	f7ff ffaf 	bl	6bc <getStackedReg>
     75e:	4603      	mov	r3, r0
     760:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     762:	6879      	ldr	r1, [r7, #4]
     764:	2004      	movs	r0, #4
     766:	f7ff ffa9 	bl	6bc <getStackedReg>
     76a:	4603      	mov	r3, r0
     76c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     76e:	6879      	ldr	r1, [r7, #4]
     770:	2005      	movs	r0, #5
     772:	f7ff ffa3 	bl	6bc <getStackedReg>
     776:	4603      	mov	r3, r0
     778:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     77a:	6879      	ldr	r1, [r7, #4]
     77c:	2006      	movs	r0, #6
     77e:	f7ff ff9d 	bl	6bc <getStackedReg>
     782:	4603      	mov	r3, r0
     784:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     786:	6879      	ldr	r1, [r7, #4]
     788:	2007      	movs	r0, #7
     78a:	f7ff ff97 	bl	6bc <getStackedReg>
     78e:	4603      	mov	r3, r0
     790:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     792:	f107 030c 	add.w	r3, r7, #12
     796:	4618      	mov	r0, r3
     798:	f001 f868 	bl	186c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     79c:	2300      	movs	r3, #0
     79e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     7a0:	e7fe      	b.n	7a0 <am_util_faultisr_collect_data+0xd8>
     7a2:	bf00      	nop
     7a4:	e000ed28 	.word	0xe000ed28
     7a8:	e000ed38 	.word	0xe000ed38

000007ac <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     7ac:	b480      	push	{r7}
     7ae:	b083      	sub	sp, #12
     7b0:	af00      	add	r7, sp, #0
     7b2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     7b4:	4a04      	ldr	r2, [pc, #16]	; (7c8 <am_util_stdio_printf_init+0x1c>)
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	6013      	str	r3, [r2, #0]
}
     7ba:	bf00      	nop
     7bc:	370c      	adds	r7, #12
     7be:	46bd      	mov	sp, r7
     7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c4:	4770      	bx	lr
     7c6:	bf00      	nop
     7c8:	1000113c 	.word	0x1000113c

000007cc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     7cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7d0:	b096      	sub	sp, #88	; 0x58
     7d2:	af00      	add	r7, sp, #0
     7d4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     7d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7dc:	0025      	movs	r5, r4
     7de:	2600      	movs	r6, #0
     7e0:	ea55 0306 	orrs.w	r3, r5, r6
     7e4:	f000 80a0 	beq.w	928 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     7e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7ec:	0862      	lsrs	r2, r4, #1
     7ee:	ea4f 0133 	mov.w	r1, r3, rrx
     7f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     7fa:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     7fe:	ea4f 0994 	mov.w	r9, r4, lsr #2
     802:	eb11 0308 	adds.w	r3, r1, r8
     806:	eb42 0409 	adc.w	r4, r2, r9
     80a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     80e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     812:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     816:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     81a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     81e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     822:	eb13 030a 	adds.w	r3, r3, sl
     826:	eb44 040b 	adc.w	r4, r4, fp
     82a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     82e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     832:	0a1a      	lsrs	r2, r3, #8
     834:	62ba      	str	r2, [r7, #40]	; 0x28
     836:	6aba      	ldr	r2, [r7, #40]	; 0x28
     838:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     83c:	62ba      	str	r2, [r7, #40]	; 0x28
     83e:	0a23      	lsrs	r3, r4, #8
     840:	62fb      	str	r3, [r7, #44]	; 0x2c
     842:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     846:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     84a:	18c9      	adds	r1, r1, r3
     84c:	eb42 0204 	adc.w	r2, r2, r4
     850:	460b      	mov	r3, r1
     852:	4614      	mov	r4, r2
     854:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     858:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     85c:	0c1a      	lsrs	r2, r3, #16
     85e:	623a      	str	r2, [r7, #32]
     860:	6a3a      	ldr	r2, [r7, #32]
     862:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     866:	623a      	str	r2, [r7, #32]
     868:	0c23      	lsrs	r3, r4, #16
     86a:	627b      	str	r3, [r7, #36]	; 0x24
     86c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     870:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     874:	18c9      	adds	r1, r1, r3
     876:	eb42 0204 	adc.w	r2, r2, r4
     87a:	460b      	mov	r3, r1
     87c:	4614      	mov	r4, r2
     87e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     882:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     886:	0023      	movs	r3, r4
     888:	603b      	str	r3, [r7, #0]
     88a:	2300      	movs	r3, #0
     88c:	607b      	str	r3, [r7, #4]
     88e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     892:	e897 0006 	ldmia.w	r7, {r1, r2}
     896:	18c9      	adds	r1, r1, r3
     898:	eb42 0204 	adc.w	r2, r2, r4
     89c:	460b      	mov	r3, r1
     89e:	4614      	mov	r4, r2
     8a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     8a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8a8:	08da      	lsrs	r2, r3, #3
     8aa:	613a      	str	r2, [r7, #16]
     8ac:	693a      	ldr	r2, [r7, #16]
     8ae:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     8b2:	613a      	str	r2, [r7, #16]
     8b4:	08e3      	lsrs	r3, r4, #3
     8b6:	617b      	str	r3, [r7, #20]
     8b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     8bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     8c0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     8c4:	460b      	mov	r3, r1
     8c6:	4614      	mov	r4, r2
     8c8:	00a0      	lsls	r0, r4, #2
     8ca:	60f8      	str	r0, [r7, #12]
     8cc:	68f8      	ldr	r0, [r7, #12]
     8ce:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     8d2:	60f8      	str	r0, [r7, #12]
     8d4:	009b      	lsls	r3, r3, #2
     8d6:	60bb      	str	r3, [r7, #8]
     8d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8dc:	185b      	adds	r3, r3, r1
     8de:	eb44 0402 	adc.w	r4, r4, r2
     8e2:	18db      	adds	r3, r3, r3
     8e4:	eb44 0404 	adc.w	r4, r4, r4
     8e8:	4619      	mov	r1, r3
     8ea:	4622      	mov	r2, r4
     8ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8f0:	1a5b      	subs	r3, r3, r1
     8f2:	eb64 0402 	sbc.w	r4, r4, r2
     8f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     8fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     8fe:	3306      	adds	r3, #6
     900:	f144 0400 	adc.w	r4, r4, #0
     904:	091a      	lsrs	r2, r3, #4
     906:	61ba      	str	r2, [r7, #24]
     908:	69ba      	ldr	r2, [r7, #24]
     90a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     90e:	61ba      	str	r2, [r7, #24]
     910:	0923      	lsrs	r3, r4, #4
     912:	61fb      	str	r3, [r7, #28]
     914:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     918:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     91c:	18c9      	adds	r1, r1, r3
     91e:	eb42 0204 	adc.w	r2, r2, r4
     922:	460b      	mov	r3, r1
     924:	4614      	mov	r4, r2
     926:	e029      	b.n	97c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     92a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     92e:	085a      	lsrs	r2, r3, #1
     930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     932:	089b      	lsrs	r3, r3, #2
     934:	4413      	add	r3, r2
     936:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     93a:	091b      	lsrs	r3, r3, #4
     93c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     93e:	4413      	add	r3, r2
     940:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     944:	0a1b      	lsrs	r3, r3, #8
     946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     948:	4413      	add	r3, r2
     94a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     94e:	0c1b      	lsrs	r3, r3, #16
     950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     952:	4413      	add	r3, r2
     954:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     958:	08db      	lsrs	r3, r3, #3
     95a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     95c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     95e:	4613      	mov	r3, r2
     960:	009b      	lsls	r3, r3, #2
     962:	4413      	add	r3, r2
     964:	005b      	lsls	r3, r3, #1
     966:	461a      	mov	r2, r3
     968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     96a:	1a9b      	subs	r3, r3, r2
     96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     970:	3306      	adds	r3, #6
     972:	091a      	lsrs	r2, r3, #4
     974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     976:	4413      	add	r3, r2
     978:	f04f 0400 	mov.w	r4, #0
    }
}
     97c:	4618      	mov	r0, r3
     97e:	4621      	mov	r1, r4
     980:	3758      	adds	r7, #88	; 0x58
     982:	46bd      	mov	sp, r7
     984:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     988:	4770      	bx	lr

0000098a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     98a:	b590      	push	{r4, r7, lr}
     98c:	b085      	sub	sp, #20
     98e:	af00      	add	r7, sp, #0
     990:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     994:	683a      	ldr	r2, [r7, #0]
     996:	687b      	ldr	r3, [r7, #4]
     998:	4313      	orrs	r3, r2
     99a:	2b00      	cmp	r3, #0
     99c:	bf0c      	ite	eq
     99e:	2301      	moveq	r3, #1
     9a0:	2300      	movne	r3, #0
     9a2:	b2db      	uxtb	r3, r3
     9a4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     9a6:	e008      	b.n	9ba <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     9a8:	e9d7 0100 	ldrd	r0, r1, [r7]
     9ac:	f7ff ff0e 	bl	7cc <divu64_10>
     9b0:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     9b4:	68fb      	ldr	r3, [r7, #12]
     9b6:	3301      	adds	r3, #1
     9b8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     9ba:	e897 0018 	ldmia.w	r7, {r3, r4}
     9be:	4323      	orrs	r3, r4
     9c0:	d1f2      	bne.n	9a8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     9c2:	68fb      	ldr	r3, [r7, #12]
}
     9c4:	4618      	mov	r0, r3
     9c6:	3714      	adds	r7, #20
     9c8:	46bd      	mov	sp, r7
     9ca:	bd90      	pop	{r4, r7, pc}

000009cc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     9cc:	b590      	push	{r4, r7, lr}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     9d6:	e897 0018 	ldmia.w	r7, {r3, r4}
     9da:	2b00      	cmp	r3, #0
     9dc:	f174 0300 	sbcs.w	r3, r4, #0
     9e0:	da06      	bge.n	9f0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     9e2:	e897 0018 	ldmia.w	r7, {r3, r4}
     9e6:	425b      	negs	r3, r3
     9e8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     9ec:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     9f0:	e897 0018 	ldmia.w	r7, {r3, r4}
     9f4:	4618      	mov	r0, r3
     9f6:	4621      	mov	r1, r4
     9f8:	f7ff ffc7 	bl	98a <ndigits_in_u64>
     9fc:	4603      	mov	r3, r0
}
     9fe:	4618      	mov	r0, r3
     a00:	370c      	adds	r7, #12
     a02:	46bd      	mov	sp, r7
     a04:	bd90      	pop	{r4, r7, pc}

00000a06 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     a06:	b490      	push	{r4, r7}
     a08:	b084      	sub	sp, #16
     a0a:	af00      	add	r7, sp, #0
     a0c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     a10:	6839      	ldr	r1, [r7, #0]
     a12:	687a      	ldr	r2, [r7, #4]
     a14:	430a      	orrs	r2, r1
     a16:	2a00      	cmp	r2, #0
     a18:	bf0c      	ite	eq
     a1a:	2201      	moveq	r2, #1
     a1c:	2200      	movne	r2, #0
     a1e:	b2d2      	uxtb	r2, r2
     a20:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     a22:	e00a      	b.n	a3a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     a24:	e897 0006 	ldmia.w	r7, {r1, r2}
     a28:	090b      	lsrs	r3, r1, #4
     a2a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     a2e:	0914      	lsrs	r4, r2, #4
     a30:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     a34:	68fa      	ldr	r2, [r7, #12]
     a36:	3201      	adds	r2, #1
     a38:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     a3a:	e897 0006 	ldmia.w	r7, {r1, r2}
     a3e:	430a      	orrs	r2, r1
     a40:	d1f0      	bne.n	a24 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     a42:	68fb      	ldr	r3, [r7, #12]
}
     a44:	4618      	mov	r0, r3
     a46:	3710      	adds	r7, #16
     a48:	46bd      	mov	sp, r7
     a4a:	bc90      	pop	{r4, r7}
     a4c:	4770      	bx	lr

00000a4e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     a4e:	b480      	push	{r7}
     a50:	b087      	sub	sp, #28
     a52:	af00      	add	r7, sp, #0
     a54:	6078      	str	r0, [r7, #4]
     a56:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     a58:	2300      	movs	r3, #0
     a5a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     a5c:	2300      	movs	r3, #0
     a5e:	613b      	str	r3, [r7, #16]
     a60:	2300      	movs	r3, #0
     a62:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     a64:	687b      	ldr	r3, [r7, #4]
     a66:	781b      	ldrb	r3, [r3, #0]
     a68:	2b2d      	cmp	r3, #45	; 0x2d
     a6a:	d11b      	bne.n	aa4 <decstr_to_int+0x56>
    {
        bNeg = true;
     a6c:	2301      	movs	r3, #1
     a6e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	3301      	adds	r3, #1
     a74:	607b      	str	r3, [r7, #4]
        uCnt++;
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	3301      	adds	r3, #1
     a7a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     a7c:	e012      	b.n	aa4 <decstr_to_int+0x56>
    {
        ++uCnt;
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	3301      	adds	r3, #1
     a82:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     a84:	693a      	ldr	r2, [r7, #16]
     a86:	4613      	mov	r3, r2
     a88:	009b      	lsls	r3, r3, #2
     a8a:	4413      	add	r3, r2
     a8c:	005b      	lsls	r3, r3, #1
     a8e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	461a      	mov	r2, r3
     a96:	693b      	ldr	r3, [r7, #16]
     a98:	4413      	add	r3, r2
     a9a:	3b30      	subs	r3, #48	; 0x30
     a9c:	613b      	str	r3, [r7, #16]
        pcStr++;
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	3301      	adds	r3, #1
     aa2:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	2b2f      	cmp	r3, #47	; 0x2f
     aaa:	d903      	bls.n	ab4 <decstr_to_int+0x66>
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	2b39      	cmp	r3, #57	; 0x39
     ab2:	d9e4      	bls.n	a7e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     ab4:	683b      	ldr	r3, [r7, #0]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d002      	beq.n	ac0 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     aba:	683b      	ldr	r3, [r7, #0]
     abc:	68fa      	ldr	r2, [r7, #12]
     abe:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     ac0:	7dfb      	ldrb	r3, [r7, #23]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d002      	beq.n	acc <decstr_to_int+0x7e>
     ac6:	693b      	ldr	r3, [r7, #16]
     ac8:	425b      	negs	r3, r3
     aca:	e000      	b.n	ace <decstr_to_int+0x80>
     acc:	693b      	ldr	r3, [r7, #16]
}
     ace:	4618      	mov	r0, r3
     ad0:	371c      	adds	r7, #28
     ad2:	46bd      	mov	sp, r7
     ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad8:	4770      	bx	lr

00000ada <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     ada:	b590      	push	{r4, r7, lr}
     adc:	b091      	sub	sp, #68	; 0x44
     ade:	af00      	add	r7, sp, #0
     ae0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     ae4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     ae6:	2300      	movs	r3, #0
     ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
     aea:	2300      	movs	r3, #0
     aec:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     af2:	f7ff fe6b 	bl	7cc <divu64_10>
     af6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     afa:	68b9      	ldr	r1, [r7, #8]
     afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     afe:	4613      	mov	r3, r2
     b00:	009b      	lsls	r3, r3, #2
     b02:	4413      	add	r3, r2
     b04:	005b      	lsls	r3, r3, #1
     b06:	1acb      	subs	r3, r1, r3
     b08:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b0c:	1c5a      	adds	r2, r3, #1
     b0e:	63fa      	str	r2, [r7, #60]	; 0x3c
     b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b12:	b2d2      	uxtb	r2, r2
     b14:	3230      	adds	r2, #48	; 0x30
     b16:	b2d2      	uxtb	r2, r2
     b18:	f107 0140 	add.w	r1, r7, #64	; 0x40
     b1c:	440b      	add	r3, r1
     b1e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     b22:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b26:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     b2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     b2e:	4323      	orrs	r3, r4
     b30:	d1dd      	bne.n	aee <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b34:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	2b00      	cmp	r3, #0
     b3a:	d011      	beq.n	b60 <uint64_to_str+0x86>
    {
        while ( ix-- )
     b3c:	e008      	b.n	b50 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	1c5a      	adds	r2, r3, #1
     b42:	607a      	str	r2, [r7, #4]
     b44:	f107 0110 	add.w	r1, r7, #16
     b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b4a:	440a      	add	r2, r1
     b4c:	7812      	ldrb	r2, [r2, #0]
     b4e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b52:	1e5a      	subs	r2, r3, #1
     b54:	63fa      	str	r2, [r7, #60]	; 0x3c
     b56:	2b00      	cmp	r3, #0
     b58:	d1f1      	bne.n	b3e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	2200      	movs	r2, #0
     b5e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     b62:	4618      	mov	r0, r3
     b64:	3744      	adds	r7, #68	; 0x44
     b66:	46bd      	mov	sp, r7
     b68:	bd90      	pop	{r4, r7, pc}

00000b6a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     b6a:	b4b0      	push	{r4, r5, r7}
     b6c:	b08d      	sub	sp, #52	; 0x34
     b6e:	af00      	add	r7, sp, #0
     b70:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b74:	607a      	str	r2, [r7, #4]
     b76:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     b78:	2300      	movs	r3, #0
     b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b80:	4313      	orrs	r3, r2
     b82:	d131      	bne.n	be8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b86:	1c5a      	adds	r2, r3, #1
     b88:	62fa      	str	r2, [r7, #44]	; 0x2c
     b8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     b8e:	4413      	add	r3, r2
     b90:	2230      	movs	r2, #48	; 0x30
     b92:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     b96:	e027      	b.n	be8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     b98:	7a3b      	ldrb	r3, [r7, #8]
     b9a:	f003 030f 	and.w	r3, r3, #15
     b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     ba6:	2b09      	cmp	r3, #9
     ba8:	d90a      	bls.n	bc0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     baa:	78fb      	ldrb	r3, [r7, #3]
     bac:	2b00      	cmp	r3, #0
     bae:	d001      	beq.n	bb4 <uint64_to_hexstr+0x4a>
     bb0:	2227      	movs	r2, #39	; 0x27
     bb2:	e000      	b.n	bb6 <uint64_to_hexstr+0x4c>
     bb4:	2207      	movs	r2, #7
     bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     bba:	4413      	add	r3, r2
     bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bc2:	1c5a      	adds	r2, r3, #1
     bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
     bc6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     bca:	3230      	adds	r2, #48	; 0x30
     bcc:	b2d2      	uxtb	r2, r2
     bce:	f107 0130 	add.w	r1, r7, #48	; 0x30
     bd2:	440b      	add	r3, r1
     bd4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bdc:	0914      	lsrs	r4, r2, #4
     bde:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     be2:	091d      	lsrs	r5, r3, #4
     be4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bec:	4313      	orrs	r3, r2
     bee:	d1d3      	bne.n	b98 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d011      	beq.n	c1e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     bfa:	e008      	b.n	c0e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	1c5a      	adds	r2, r3, #1
     c00:	607a      	str	r2, [r7, #4]
     c02:	f107 0110 	add.w	r1, r7, #16
     c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c08:	440a      	add	r2, r1
     c0a:	7812      	ldrb	r2, [r2, #0]
     c0c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c10:	1e5a      	subs	r2, r3, #1
     c12:	62fa      	str	r2, [r7, #44]	; 0x2c
     c14:	2b00      	cmp	r3, #0
     c16:	d1f1      	bne.n	bfc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     c18:	687b      	ldr	r3, [r7, #4]
     c1a:	2200      	movs	r2, #0
     c1c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     c20:	4618      	mov	r0, r3
     c22:	3734      	adds	r7, #52	; 0x34
     c24:	46bd      	mov	sp, r7
     c26:	bcb0      	pop	{r4, r5, r7}
     c28:	4770      	bx	lr

00000c2a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     c2a:	b480      	push	{r7}
     c2c:	b085      	sub	sp, #20
     c2e:	af00      	add	r7, sp, #0
     c30:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     c32:	2300      	movs	r3, #0
     c34:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	2b00      	cmp	r3, #0
     c3a:	d104      	bne.n	c46 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	e009      	b.n	c54 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     c40:	68fb      	ldr	r3, [r7, #12]
     c42:	3301      	adds	r3, #1
     c44:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	1c5a      	adds	r2, r3, #1
     c4a:	607a      	str	r2, [r7, #4]
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	2b00      	cmp	r3, #0
     c50:	d1f6      	bne.n	c40 <simple_strlen+0x16>
    }
    return ui32RetVal;
     c52:	68fb      	ldr	r3, [r7, #12]
}
     c54:	4618      	mov	r0, r3
     c56:	3714      	adds	r7, #20
     c58:	46bd      	mov	sp, r7
     c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5e:	4770      	bx	lr

00000c60 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     c60:	b480      	push	{r7}
     c62:	b087      	sub	sp, #28
     c64:	af00      	add	r7, sp, #0
     c66:	60f8      	str	r0, [r7, #12]
     c68:	460b      	mov	r3, r1
     c6a:	607a      	str	r2, [r7, #4]
     c6c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     c6e:	2300      	movs	r3, #0
     c70:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	2b00      	cmp	r3, #0
     c76:	dc0c      	bgt.n	c92 <padbuffer+0x32>
    {
        return i32Cnt;
     c78:	697b      	ldr	r3, [r7, #20]
     c7a:	e010      	b.n	c9e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	2b00      	cmp	r3, #0
     c80:	d004      	beq.n	c8c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     c82:	68fb      	ldr	r3, [r7, #12]
     c84:	1c5a      	adds	r2, r3, #1
     c86:	60fa      	str	r2, [r7, #12]
     c88:	7afa      	ldrb	r2, [r7, #11]
     c8a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     c8c:	697b      	ldr	r3, [r7, #20]
     c8e:	3301      	adds	r3, #1
     c90:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	1e5a      	subs	r2, r3, #1
     c96:	607a      	str	r2, [r7, #4]
     c98:	2b00      	cmp	r3, #0
     c9a:	d1ef      	bne.n	c7c <padbuffer+0x1c>
    }

    return i32Cnt;
     c9c:	697b      	ldr	r3, [r7, #20]
}
     c9e:	4618      	mov	r0, r3
     ca0:	371c      	adds	r7, #28
     ca2:	46bd      	mov	sp, r7
     ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca8:	4770      	bx	lr
	...

00000cac <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     cac:	b590      	push	{r4, r7, lr}
     cae:	b08f      	sub	sp, #60	; 0x3c
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cc0:	2b03      	cmp	r3, #3
     cc2:	dc02      	bgt.n	cca <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     cc4:	f06f 0302 	mvn.w	r3, #2
     cc8:	e0e7      	b.n	e9a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     cca:	edd7 7a03 	vldr	s15, [r7, #12]
     cce:	eef5 7a40 	vcmp.f32	s15, #0.0
     cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cd6:	d104      	bne.n	ce2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     cd8:	68bb      	ldr	r3, [r7, #8]
     cda:	4a72      	ldr	r2, [pc, #456]	; (ea4 <ftoa+0x1f8>)
     cdc:	601a      	str	r2, [r3, #0]
        return 3;
     cde:	2303      	movs	r3, #3
     ce0:	e0db      	b.n	e9a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     ce2:	68bb      	ldr	r3, [r7, #8]
     ce4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     cea:	693b      	ldr	r3, [r7, #16]
     cec:	15db      	asrs	r3, r3, #23
     cee:	b2db      	uxtb	r3, r3
     cf0:	3b7f      	subs	r3, #127	; 0x7f
     cf2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     cf4:	693b      	ldr	r3, [r7, #16]
     cf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
     cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     cfe:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     d00:	2300      	movs	r3, #0
     d02:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     d04:	2300      	movs	r3, #0
     d06:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     d08:	69fb      	ldr	r3, [r7, #28]
     d0a:	2b1e      	cmp	r3, #30
     d0c:	dd02      	ble.n	d14 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     d0e:	f06f 0301 	mvn.w	r3, #1
     d12:	e0c2      	b.n	e9a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     d14:	69fb      	ldr	r3, [r7, #28]
     d16:	f113 0f17 	cmn.w	r3, #23
     d1a:	da02      	bge.n	d22 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     d1c:	f04f 33ff 	mov.w	r3, #4294967295
     d20:	e0bb      	b.n	e9a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     d22:	69fb      	ldr	r3, [r7, #28]
     d24:	2b16      	cmp	r3, #22
     d26:	dd06      	ble.n	d36 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     d28:	69fb      	ldr	r3, [r7, #28]
     d2a:	3b17      	subs	r3, #23
     d2c:	69ba      	ldr	r2, [r7, #24]
     d2e:	fa02 f303 	lsl.w	r3, r2, r3
     d32:	637b      	str	r3, [r7, #52]	; 0x34
     d34:	e01a      	b.n	d6c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     d36:	69fb      	ldr	r3, [r7, #28]
     d38:	2b00      	cmp	r3, #0
     d3a:	db0f      	blt.n	d5c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     d3c:	69fb      	ldr	r3, [r7, #28]
     d3e:	f1c3 0317 	rsb	r3, r3, #23
     d42:	69ba      	ldr	r2, [r7, #24]
     d44:	fa42 f303 	asr.w	r3, r2, r3
     d48:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     d4a:	69fb      	ldr	r3, [r7, #28]
     d4c:	3301      	adds	r3, #1
     d4e:	69ba      	ldr	r2, [r7, #24]
     d50:	fa02 f303 	lsl.w	r3, r2, r3
     d54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d58:	633b      	str	r3, [r7, #48]	; 0x30
     d5a:	e007      	b.n	d6c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     d5c:	69bb      	ldr	r3, [r7, #24]
     d5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     d62:	69fb      	ldr	r3, [r7, #28]
     d64:	43db      	mvns	r3, r3
     d66:	fa42 f303 	asr.w	r3, r2, r3
     d6a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     d6c:	693b      	ldr	r3, [r7, #16]
     d6e:	2b00      	cmp	r3, #0
     d70:	da04      	bge.n	d7c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	1c5a      	adds	r2, r3, #1
     d76:	60ba      	str	r2, [r7, #8]
     d78:	222d      	movs	r2, #45	; 0x2d
     d7a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d7e:	2b00      	cmp	r3, #0
     d80:	d105      	bne.n	d8e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     d82:	68bb      	ldr	r3, [r7, #8]
     d84:	1c5a      	adds	r2, r3, #1
     d86:	60ba      	str	r2, [r7, #8]
     d88:	2230      	movs	r2, #48	; 0x30
     d8a:	701a      	strb	r2, [r3, #0]
     d8c:	e021      	b.n	dd2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d90:	2b00      	cmp	r3, #0
     d92:	dd08      	ble.n	da6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d96:	ea4f 74e3 	mov.w	r4, r3, asr #31
     d9a:	68ba      	ldr	r2, [r7, #8]
     d9c:	4618      	mov	r0, r3
     d9e:	4621      	mov	r1, r4
     da0:	f7ff fe9b 	bl	ada <uint64_to_str>
     da4:	e011      	b.n	dca <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     da6:	68bb      	ldr	r3, [r7, #8]
     da8:	1c5a      	adds	r2, r3, #1
     daa:	60ba      	str	r2, [r7, #8]
     dac:	222d      	movs	r2, #45	; 0x2d
     dae:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     db2:	425b      	negs	r3, r3
     db4:	ea4f 74e3 	mov.w	r4, r3, asr #31
     db8:	68ba      	ldr	r2, [r7, #8]
     dba:	4618      	mov	r0, r3
     dbc:	4621      	mov	r1, r4
     dbe:	f7ff fe8c 	bl	ada <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     dc2:	e002      	b.n	dca <ftoa+0x11e>
        {
            pcBuf++;
     dc4:	68bb      	ldr	r3, [r7, #8]
     dc6:	3301      	adds	r3, #1
     dc8:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     dca:	68bb      	ldr	r3, [r7, #8]
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d1f8      	bne.n	dc4 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     dd2:	68bb      	ldr	r3, [r7, #8]
     dd4:	1c5a      	adds	r2, r3, #1
     dd6:	60ba      	str	r2, [r7, #8]
     dd8:	222e      	movs	r2, #46	; 0x2e
     dda:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dde:	2b00      	cmp	r3, #0
     de0:	d105      	bne.n	dee <ftoa+0x142>
    {
        *pcBuf++ = '0';
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	1c5a      	adds	r2, r3, #1
     de6:	60ba      	str	r2, [r7, #8]
     de8:	2230      	movs	r2, #48	; 0x30
     dea:	701a      	strb	r2, [r3, #0]
     dec:	e04f      	b.n	e8e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     dee:	68ba      	ldr	r2, [r7, #8]
     df0:	6a3b      	ldr	r3, [r7, #32]
     df2:	1ad3      	subs	r3, r2, r3
     df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     df6:	1ad3      	subs	r3, r2, r3
     df8:	3b01      	subs	r3, #1
     dfa:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     dfc:	697a      	ldr	r2, [r7, #20]
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	4293      	cmp	r3, r2
     e02:	bfa8      	it	ge
     e04:	4613      	movge	r3, r2
     e06:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     e08:	2300      	movs	r3, #0
     e0a:	62bb      	str	r3, [r7, #40]	; 0x28
     e0c:	e015      	b.n	e3a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e10:	4613      	mov	r3, r2
     e12:	009b      	lsls	r3, r3, #2
     e14:	4413      	add	r3, r2
     e16:	005b      	lsls	r3, r3, #1
     e18:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	60ba      	str	r2, [r7, #8]
     e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e22:	1612      	asrs	r2, r2, #24
     e24:	b2d2      	uxtb	r2, r2
     e26:	3230      	adds	r2, #48	; 0x30
     e28:	b2d2      	uxtb	r2, r2
     e2a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e32:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e36:	3301      	adds	r3, #1
     e38:	62bb      	str	r3, [r7, #40]	; 0x28
     e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e3c:	697b      	ldr	r3, [r7, #20]
     e3e:	429a      	cmp	r2, r3
     e40:	dbe5      	blt.n	e0e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e44:	4613      	mov	r3, r2
     e46:	009b      	lsls	r3, r3, #2
     e48:	4413      	add	r3, r2
     e4a:	005b      	lsls	r3, r3, #1
     e4c:	161b      	asrs	r3, r3, #24
     e4e:	2b04      	cmp	r3, #4
     e50:	dd1d      	ble.n	e8e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     e52:	68bb      	ldr	r3, [r7, #8]
     e54:	3b01      	subs	r3, #1
     e56:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     e58:	e015      	b.n	e86 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	2b2e      	cmp	r3, #46	; 0x2e
     e60:	d00e      	beq.n	e80 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	2b39      	cmp	r3, #57	; 0x39
     e68:	d103      	bne.n	e72 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e6c:	2230      	movs	r2, #48	; 0x30
     e6e:	701a      	strb	r2, [r3, #0]
     e70:	e006      	b.n	e80 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	3301      	adds	r3, #1
     e78:	b2da      	uxtb	r2, r3
     e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e7c:	701a      	strb	r2, [r3, #0]
                    break;
     e7e:	e006      	b.n	e8e <ftoa+0x1e2>
                }
                pcBuftmp--;
     e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e82:	3b01      	subs	r3, #1
     e84:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e88:	6a3b      	ldr	r3, [r7, #32]
     e8a:	429a      	cmp	r2, r3
     e8c:	d2e5      	bcs.n	e5a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     e8e:	68bb      	ldr	r3, [r7, #8]
     e90:	2200      	movs	r2, #0
     e92:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     e94:	68ba      	ldr	r2, [r7, #8]
     e96:	6a3b      	ldr	r3, [r7, #32]
     e98:	1ad3      	subs	r3, r2, r3
} // ftoa()
     e9a:	4618      	mov	r0, r3
     e9c:	373c      	adds	r7, #60	; 0x3c
     e9e:	46bd      	mov	sp, r7
     ea0:	bd90      	pop	{r4, r7, pc}
     ea2:	bf00      	nop
     ea4:	00302e30 	.word	0x00302e30

00000ea8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ea8:	b590      	push	{r4, r7, lr}
     eaa:	b095      	sub	sp, #84	; 0x54
     eac:	af00      	add	r7, sp, #0
     eae:	60f8      	str	r0, [r7, #12]
     eb0:	60b9      	str	r1, [r7, #8]
     eb2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     eb4:	2300      	movs	r3, #0
     eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     eb8:	2300      	movs	r3, #0
     eba:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     ebc:	e2e3      	b.n	1486 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     ebe:	2306      	movs	r3, #6
     ec0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     ec2:	68bb      	ldr	r3, [r7, #8]
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	2b25      	cmp	r3, #37	; 0x25
     ec8:	d01f      	beq.n	f0a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     eca:	68fb      	ldr	r3, [r7, #12]
     ecc:	2b00      	cmp	r3, #0
     ece:	d015      	beq.n	efc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     ed0:	68bb      	ldr	r3, [r7, #8]
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	2b0a      	cmp	r3, #10
     ed6:	d10b      	bne.n	ef0 <am_util_stdio_vsprintf+0x48>
     ed8:	4bb1      	ldr	r3, [pc, #708]	; (11a0 <am_util_stdio_vsprintf+0x2f8>)
     eda:	781b      	ldrb	r3, [r3, #0]
     edc:	2b00      	cmp	r3, #0
     ede:	d007      	beq.n	ef0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	1c5a      	adds	r2, r3, #1
     ee4:	60fa      	str	r2, [r7, #12]
     ee6:	220d      	movs	r2, #13
     ee8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     eec:	3301      	adds	r3, #1
     eee:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	1c5a      	adds	r2, r3, #1
     ef4:	60fa      	str	r2, [r7, #12]
     ef6:	68ba      	ldr	r2, [r7, #8]
     ef8:	7812      	ldrb	r2, [r2, #0]
     efa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     efc:	68bb      	ldr	r3, [r7, #8]
     efe:	3301      	adds	r3, #1
     f00:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f04:	3301      	adds	r3, #1
     f06:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     f08:	e2bd      	b.n	1486 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     f0a:	68bb      	ldr	r3, [r7, #8]
     f0c:	3301      	adds	r3, #1
     f0e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     f10:	2300      	movs	r3, #0
     f12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     f16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     f1e:	2320      	movs	r3, #32
     f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     f24:	68bb      	ldr	r3, [r7, #8]
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	2b30      	cmp	r3, #48	; 0x30
     f2a:	d105      	bne.n	f38 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     f2c:	2330      	movs	r3, #48	; 0x30
     f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     f32:	68bb      	ldr	r3, [r7, #8]
     f34:	3301      	adds	r3, #1
     f36:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     f38:	f107 0310 	add.w	r3, r7, #16
     f3c:	4619      	mov	r1, r3
     f3e:	68b8      	ldr	r0, [r7, #8]
     f40:	f7ff fd85 	bl	a4e <decstr_to_int>
     f44:	4603      	mov	r3, r0
     f46:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     f48:	693b      	ldr	r3, [r7, #16]
     f4a:	68ba      	ldr	r2, [r7, #8]
     f4c:	4413      	add	r3, r2
     f4e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     f50:	68bb      	ldr	r3, [r7, #8]
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	2b73      	cmp	r3, #115	; 0x73
     f56:	d005      	beq.n	f64 <am_util_stdio_vsprintf+0xbc>
     f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5a:	2b00      	cmp	r3, #0
     f5c:	da02      	bge.n	f64 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f60:	425b      	negs	r3, r3
     f62:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     f64:	68bb      	ldr	r3, [r7, #8]
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	2b2e      	cmp	r3, #46	; 0x2e
     f6a:	d10e      	bne.n	f8a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     f6c:	68bb      	ldr	r3, [r7, #8]
     f6e:	3301      	adds	r3, #1
     f70:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     f72:	f107 0310 	add.w	r3, r7, #16
     f76:	4619      	mov	r1, r3
     f78:	68b8      	ldr	r0, [r7, #8]
     f7a:	f7ff fd68 	bl	a4e <decstr_to_int>
     f7e:	4603      	mov	r3, r0
     f80:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     f82:	693b      	ldr	r3, [r7, #16]
     f84:	68ba      	ldr	r2, [r7, #8]
     f86:	4413      	add	r3, r2
     f88:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     f8a:	68bb      	ldr	r3, [r7, #8]
     f8c:	781b      	ldrb	r3, [r3, #0]
     f8e:	2b6c      	cmp	r3, #108	; 0x6c
     f90:	d10c      	bne.n	fac <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     f92:	68bb      	ldr	r3, [r7, #8]
     f94:	3301      	adds	r3, #1
     f96:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     f98:	68bb      	ldr	r3, [r7, #8]
     f9a:	781b      	ldrb	r3, [r3, #0]
     f9c:	2b6c      	cmp	r3, #108	; 0x6c
     f9e:	d105      	bne.n	fac <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     fa0:	68bb      	ldr	r3, [r7, #8]
     fa2:	3301      	adds	r3, #1
     fa4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     fa6:	2301      	movs	r3, #1
     fa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	781b      	ldrb	r3, [r3, #0]
     fb0:	3b46      	subs	r3, #70	; 0x46
     fb2:	2b32      	cmp	r3, #50	; 0x32
     fb4:	f200 8254 	bhi.w	1460 <am_util_stdio_vsprintf+0x5b8>
     fb8:	a201      	add	r2, pc, #4	; (adr r2, fc0 <am_util_stdio_vsprintf+0x118>)
     fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fbe:	bf00      	nop
     fc0:	000013eb 	.word	0x000013eb
     fc4:	00001461 	.word	0x00001461
     fc8:	00001461 	.word	0x00001461
     fcc:	00001461 	.word	0x00001461
     fd0:	00001461 	.word	0x00001461
     fd4:	00001461 	.word	0x00001461
     fd8:	00001461 	.word	0x00001461
     fdc:	00001461 	.word	0x00001461
     fe0:	00001461 	.word	0x00001461
     fe4:	00001461 	.word	0x00001461
     fe8:	00001461 	.word	0x00001461
     fec:	00001461 	.word	0x00001461
     ff0:	00001461 	.word	0x00001461
     ff4:	00001461 	.word	0x00001461
     ff8:	00001461 	.word	0x00001461
     ffc:	00001461 	.word	0x00001461
    1000:	00001461 	.word	0x00001461
    1004:	00001461 	.word	0x00001461
    1008:	00001187 	.word	0x00001187
    100c:	00001461 	.word	0x00001461
    1010:	00001461 	.word	0x00001461
    1014:	00001461 	.word	0x00001461
    1018:	00001461 	.word	0x00001461
    101c:	00001461 	.word	0x00001461
    1020:	00001461 	.word	0x00001461
    1024:	00001461 	.word	0x00001461
    1028:	00001461 	.word	0x00001461
    102c:	00001461 	.word	0x00001461
    1030:	00001461 	.word	0x00001461
    1034:	0000108d 	.word	0x0000108d
    1038:	000012b3 	.word	0x000012b3
    103c:	00001461 	.word	0x00001461
    1040:	000013eb 	.word	0x000013eb
    1044:	00001461 	.word	0x00001461
    1048:	00001461 	.word	0x00001461
    104c:	000012b3 	.word	0x000012b3
    1050:	00001461 	.word	0x00001461
    1054:	00001461 	.word	0x00001461
    1058:	00001461 	.word	0x00001461
    105c:	00001461 	.word	0x00001461
    1060:	00001461 	.word	0x00001461
    1064:	00001461 	.word	0x00001461
    1068:	00001461 	.word	0x00001461
    106c:	00001461 	.word	0x00001461
    1070:	00001461 	.word	0x00001461
    1074:	000010b3 	.word	0x000010b3
    1078:	00001461 	.word	0x00001461
    107c:	00001221 	.word	0x00001221
    1080:	00001461 	.word	0x00001461
    1084:	00001461 	.word	0x00001461
    1088:	00001181 	.word	0x00001181
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	1d1a      	adds	r2, r3, #4
    1090:	607a      	str	r2, [r7, #4]
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d005      	beq.n	10aa <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60fa      	str	r2, [r7, #12]
    10a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    10a8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ac:	3301      	adds	r3, #1
    10ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10b0:	e1e6      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	1d1a      	adds	r2, r3, #4
    10b6:	607a      	str	r2, [r7, #4]
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    10bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    10be:	f7ff fdb4 	bl	c2a <simple_strlen>
    10c2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    10c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c6:	2b00      	cmp	r3, #0
    10c8:	dd2e      	ble.n	1128 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    10ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10ce:	429a      	cmp	r2, r3
    10d0:	d22a      	bcs.n	1128 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    10d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d6:	1ad3      	subs	r3, r2, r3
    10d8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10de:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10e0:	4619      	mov	r1, r3
    10e2:	68f8      	ldr	r0, [r7, #12]
    10e4:	f7ff fdbc 	bl	c60 <padbuffer>
    10e8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d001      	beq.n	10f4 <am_util_stdio_vsprintf+0x24c>
    10f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f2:	e000      	b.n	10f6 <am_util_stdio_vsprintf+0x24e>
    10f4:	2300      	movs	r3, #0
    10f6:	68fa      	ldr	r2, [r7, #12]
    10f8:	4413      	add	r3, r2
    10fa:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    10fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1100:	4413      	add	r3, r2
    1102:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1104:	2300      	movs	r3, #0
    1106:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1108:	e00e      	b.n	1128 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    110a:	68fb      	ldr	r3, [r7, #12]
    110c:	2b00      	cmp	r3, #0
    110e:	d005      	beq.n	111c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	1c5a      	adds	r2, r3, #1
    1114:	60fa      	str	r2, [r7, #12]
    1116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1118:	7812      	ldrb	r2, [r2, #0]
    111a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    111c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    111e:	3301      	adds	r3, #1
    1120:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1124:	3301      	adds	r3, #1
    1126:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    112a:	781b      	ldrb	r3, [r3, #0]
    112c:	2b00      	cmp	r3, #0
    112e:	d1ec      	bne.n	110a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1132:	2b00      	cmp	r3, #0
    1134:	f000 81a1 	beq.w	147a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113a:	425b      	negs	r3, r3
    113c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1142:	429a      	cmp	r2, r3
    1144:	f080 8199 	bcs.w	147a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1148:	6bba      	ldr	r2, [r7, #56]	; 0x38
    114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    114c:	1ad3      	subs	r3, r2, r3
    114e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1154:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1156:	4619      	mov	r1, r3
    1158:	68f8      	ldr	r0, [r7, #12]
    115a:	f7ff fd81 	bl	c60 <padbuffer>
    115e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	2b00      	cmp	r3, #0
    1164:	d001      	beq.n	116a <am_util_stdio_vsprintf+0x2c2>
    1166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1168:	e000      	b.n	116c <am_util_stdio_vsprintf+0x2c4>
    116a:	2300      	movs	r3, #0
    116c:	68fa      	ldr	r2, [r7, #12]
    116e:	4413      	add	r3, r2
    1170:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1176:	4413      	add	r3, r2
    1178:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    117a:	2300      	movs	r3, #0
    117c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    117e:	e17c      	b.n	147a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1180:	2301      	movs	r3, #1
    1182:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1186:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    118a:	2b00      	cmp	r3, #0
    118c:	d00a      	beq.n	11a4 <am_util_stdio_vsprintf+0x2fc>
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	3307      	adds	r3, #7
    1192:	f023 0307 	bic.w	r3, r3, #7
    1196:	f103 0208 	add.w	r2, r3, #8
    119a:	607a      	str	r2, [r7, #4]
    119c:	cb18      	ldmia	r3, {r3, r4}
    119e:	e007      	b.n	11b0 <am_util_stdio_vsprintf+0x308>
    11a0:	10001134 	.word	0x10001134
                                      va_arg(pArgs, uint32_t);
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	1d1a      	adds	r2, r3, #4
    11a8:	607a      	str	r2, [r7, #4]
    11aa:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11ac:	f04f 0400 	mov.w	r4, #0
    11b0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    11b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b6:	2b00      	cmp	r3, #0
    11b8:	d01e      	beq.n	11f8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    11ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11be:	f7ff fc22 	bl	a06 <ndigits_in_hex>
    11c2:	4602      	mov	r2, r0
    11c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c6:	1a9b      	subs	r3, r3, r2
    11c8:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11d0:	4619      	mov	r1, r3
    11d2:	68f8      	ldr	r0, [r7, #12]
    11d4:	f7ff fd44 	bl	c60 <padbuffer>
    11d8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    11da:	68fb      	ldr	r3, [r7, #12]
    11dc:	2b00      	cmp	r3, #0
    11de:	d001      	beq.n	11e4 <am_util_stdio_vsprintf+0x33c>
    11e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11e2:	e000      	b.n	11e6 <am_util_stdio_vsprintf+0x33e>
    11e4:	2300      	movs	r3, #0
    11e6:	68fa      	ldr	r2, [r7, #12]
    11e8:	4413      	add	r3, r2
    11ea:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    11ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11f0:	4413      	add	r3, r2
    11f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11f4:	2300      	movs	r3, #0
    11f6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    11f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    11fc:	68fa      	ldr	r2, [r7, #12]
    11fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1202:	f7ff fcb2 	bl	b6a <uint64_to_hexstr>
    1206:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	2b00      	cmp	r3, #0
    120c:	d003      	beq.n	1216 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1210:	68fa      	ldr	r2, [r7, #12]
    1212:	4413      	add	r3, r2
    1214:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    121a:	4413      	add	r3, r2
    121c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    121e:	e12f      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1224:	2b00      	cmp	r3, #0
    1226:	d008      	beq.n	123a <am_util_stdio_vsprintf+0x392>
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	3307      	adds	r3, #7
    122c:	f023 0307 	bic.w	r3, r3, #7
    1230:	f103 0208 	add.w	r2, r3, #8
    1234:	607a      	str	r2, [r7, #4]
    1236:	cb18      	ldmia	r3, {r3, r4}
    1238:	e005      	b.n	1246 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	1d1a      	adds	r2, r3, #4
    123e:	607a      	str	r2, [r7, #4]
    1240:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1242:	f04f 0400 	mov.w	r4, #0
    1246:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    124c:	2b00      	cmp	r3, #0
    124e:	d01e      	beq.n	128e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1250:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1254:	f7ff fb99 	bl	98a <ndigits_in_u64>
    1258:	4602      	mov	r2, r0
    125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    125c:	1a9b      	subs	r3, r3, r2
    125e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1264:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1266:	4619      	mov	r1, r3
    1268:	68f8      	ldr	r0, [r7, #12]
    126a:	f7ff fcf9 	bl	c60 <padbuffer>
    126e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	2b00      	cmp	r3, #0
    1274:	d001      	beq.n	127a <am_util_stdio_vsprintf+0x3d2>
    1276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1278:	e000      	b.n	127c <am_util_stdio_vsprintf+0x3d4>
    127a:	2300      	movs	r3, #0
    127c:	68fa      	ldr	r2, [r7, #12]
    127e:	4413      	add	r3, r2
    1280:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1286:	4413      	add	r3, r2
    1288:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    128a:	2300      	movs	r3, #0
    128c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    128e:	68fa      	ldr	r2, [r7, #12]
    1290:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1294:	f7ff fc21 	bl	ada <uint64_to_str>
    1298:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	2b00      	cmp	r3, #0
    129e:	d003      	beq.n	12a8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    12a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12a2:	68fa      	ldr	r2, [r7, #12]
    12a4:	4413      	add	r3, r2
    12a6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12ac:	4413      	add	r3, r2
    12ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12b0:	e0e6      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12b6:	2b00      	cmp	r3, #0
    12b8:	d008      	beq.n	12cc <am_util_stdio_vsprintf+0x424>
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	3307      	adds	r3, #7
    12be:	f023 0307 	bic.w	r3, r3, #7
    12c2:	f103 0208 	add.w	r2, r3, #8
    12c6:	607a      	str	r2, [r7, #4]
    12c8:	cb18      	ldmia	r3, {r3, r4}
    12ca:	e005      	b.n	12d8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	1d1a      	adds	r2, r3, #4
    12d0:	607a      	str	r2, [r7, #4]
    12d2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    12d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    12d8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    12dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12e0:	2b00      	cmp	r3, #0
    12e2:	f174 0300 	sbcs.w	r3, r4, #0
    12e6:	da0a      	bge.n	12fe <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    12e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12ec:	425b      	negs	r3, r3
    12ee:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    12f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    12f6:	2301      	movs	r3, #1
    12f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    12fc:	e006      	b.n	130c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    12fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1302:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1306:	2300      	movs	r3, #0
    1308:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    130e:	2b00      	cmp	r3, #0
    1310:	d04a      	beq.n	13a8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1312:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1316:	4618      	mov	r0, r3
    1318:	4621      	mov	r1, r4
    131a:	f7ff fb57 	bl	9cc <ndigits_in_i64>
    131e:	4602      	mov	r2, r0
    1320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1322:	1a9b      	subs	r3, r3, r2
    1324:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    132a:	2b00      	cmp	r3, #0
    132c:	d011      	beq.n	1352 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1330:	3b01      	subs	r3, #1
    1332:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1338:	2b30      	cmp	r3, #48	; 0x30
    133a:	d10a      	bne.n	1352 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	2b00      	cmp	r3, #0
    1340:	d004      	beq.n	134c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	1c5a      	adds	r2, r3, #1
    1346:	60fa      	str	r2, [r7, #12]
    1348:	222d      	movs	r2, #45	; 0x2d
    134a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    134c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    134e:	3301      	adds	r3, #1
    1350:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1356:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1358:	4619      	mov	r1, r3
    135a:	68f8      	ldr	r0, [r7, #12]
    135c:	f7ff fc80 	bl	c60 <padbuffer>
    1360:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	2b00      	cmp	r3, #0
    1366:	d001      	beq.n	136c <am_util_stdio_vsprintf+0x4c4>
    1368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    136a:	e000      	b.n	136e <am_util_stdio_vsprintf+0x4c6>
    136c:	2300      	movs	r3, #0
    136e:	68fa      	ldr	r2, [r7, #12]
    1370:	4413      	add	r3, r2
    1372:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1378:	4413      	add	r3, r2
    137a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    137c:	2300      	movs	r3, #0
    137e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1380:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1384:	2b00      	cmp	r3, #0
    1386:	d01e      	beq.n	13c6 <am_util_stdio_vsprintf+0x51e>
    1388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    138c:	2b20      	cmp	r3, #32
    138e:	d11a      	bne.n	13c6 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	2b00      	cmp	r3, #0
    1394:	d004      	beq.n	13a0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	1c5a      	adds	r2, r3, #1
    139a:	60fa      	str	r2, [r7, #12]
    139c:	222d      	movs	r2, #45	; 0x2d
    139e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    13a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13a2:	3301      	adds	r3, #1
    13a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    13a6:	e00e      	b.n	13c6 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    13a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13ac:	2b00      	cmp	r3, #0
    13ae:	d00a      	beq.n	13c6 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	2b00      	cmp	r3, #0
    13b4:	d004      	beq.n	13c0 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    13b6:	68fb      	ldr	r3, [r7, #12]
    13b8:	1c5a      	adds	r2, r3, #1
    13ba:	60fa      	str	r2, [r7, #12]
    13bc:	222d      	movs	r2, #45	; 0x2d
    13be:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    13c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13c2:	3301      	adds	r3, #1
    13c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    13c6:	68fa      	ldr	r2, [r7, #12]
    13c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13cc:	f7ff fb85 	bl	ada <uint64_to_str>
    13d0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    13d2:	68fb      	ldr	r3, [r7, #12]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d003      	beq.n	13e0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    13d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13da:	68fa      	ldr	r2, [r7, #12]
    13dc:	4413      	add	r3, r2
    13de:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13e4:	4413      	add	r3, r2
    13e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13e8:	e04a      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    13ea:	68fb      	ldr	r3, [r7, #12]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d046      	beq.n	147e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	3307      	adds	r3, #7
    13f4:	f023 0307 	bic.w	r3, r3, #7
    13f8:	f103 0208 	add.w	r2, r3, #8
    13fc:	607a      	str	r2, [r7, #4]
    13fe:	cb18      	ldmia	r3, {r3, r4}
    1400:	4618      	mov	r0, r3
    1402:	4621      	mov	r1, r4
    1404:	f7fe fe3c 	bl	80 <__aeabi_d2f>
    1408:	4603      	mov	r3, r0
    140a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	2214      	movs	r2, #20
    1410:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1414:	68f9      	ldr	r1, [r7, #12]
    1416:	6978      	ldr	r0, [r7, #20]
    1418:	f7ff fc48 	bl	cac <ftoa>
    141c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1420:	2b00      	cmp	r3, #0
    1422:	da14      	bge.n	144e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1426:	f1b3 3fff 	cmp.w	r3, #4294967295
    142a:	d102      	bne.n	1432 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    142c:	4b1e      	ldr	r3, [pc, #120]	; (14a8 <am_util_stdio_vsprintf+0x600>)
    142e:	62bb      	str	r3, [r7, #40]	; 0x28
    1430:	e008      	b.n	1444 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1434:	f113 0f02 	cmn.w	r3, #2
    1438:	d102      	bne.n	1440 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    143a:	4b1c      	ldr	r3, [pc, #112]	; (14ac <am_util_stdio_vsprintf+0x604>)
    143c:	62bb      	str	r3, [r7, #40]	; 0x28
    143e:	e001      	b.n	1444 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1440:	4b1b      	ldr	r3, [pc, #108]	; (14b0 <am_util_stdio_vsprintf+0x608>)
    1442:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1448:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    144a:	2303      	movs	r3, #3
    144c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1452:	4413      	add	r3, r2
    1454:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1458:	68fa      	ldr	r2, [r7, #12]
    145a:	4413      	add	r3, r2
    145c:	60fb      	str	r3, [r7, #12]
                }
                break;
    145e:	e00e      	b.n	147e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1460:	68fb      	ldr	r3, [r7, #12]
    1462:	2b00      	cmp	r3, #0
    1464:	d005      	beq.n	1472 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	1c5a      	adds	r2, r3, #1
    146a:	60fa      	str	r2, [r7, #12]
    146c:	68ba      	ldr	r2, [r7, #8]
    146e:	7812      	ldrb	r2, [r2, #0]
    1470:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1474:	3301      	adds	r3, #1
    1476:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1478:	e002      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>
                break;
    147a:	bf00      	nop
    147c:	e000      	b.n	1480 <am_util_stdio_vsprintf+0x5d8>
                break;
    147e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1480:	68bb      	ldr	r3, [r7, #8]
    1482:	3301      	adds	r3, #1
    1484:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1486:	68bb      	ldr	r3, [r7, #8]
    1488:	781b      	ldrb	r3, [r3, #0]
    148a:	2b00      	cmp	r3, #0
    148c:	f47f ad17 	bne.w	ebe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	2b00      	cmp	r3, #0
    1494:	d002      	beq.n	149c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	2200      	movs	r2, #0
    149a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    149e:	4618      	mov	r0, r3
    14a0:	3754      	adds	r7, #84	; 0x54
    14a2:	46bd      	mov	sp, r7
    14a4:	bd90      	pop	{r4, r7, pc}
    14a6:	bf00      	nop
    14a8:	00302e30 	.word	0x00302e30
    14ac:	00232e23 	.word	0x00232e23
    14b0:	003f2e3f 	.word	0x003f2e3f

000014b4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    14b4:	b40f      	push	{r0, r1, r2, r3}
    14b6:	b580      	push	{r7, lr}
    14b8:	b082      	sub	sp, #8
    14ba:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    14bc:	f107 0314 	add.w	r3, r7, #20
    14c0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    14c2:	683a      	ldr	r2, [r7, #0]
    14c4:	6939      	ldr	r1, [r7, #16]
    14c6:	4808      	ldr	r0, [pc, #32]	; (14e8 <am_util_stdio_printf+0x34>)
    14c8:	f7ff fcee 	bl	ea8 <am_util_stdio_vsprintf>
    14cc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    14ce:	4b07      	ldr	r3, [pc, #28]	; (14ec <am_util_stdio_printf+0x38>)
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	4805      	ldr	r0, [pc, #20]	; (14e8 <am_util_stdio_printf+0x34>)
    14d4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    14d6:	687b      	ldr	r3, [r7, #4]
}
    14d8:	4618      	mov	r0, r3
    14da:	3708      	adds	r7, #8
    14dc:	46bd      	mov	sp, r7
    14de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    14e2:	b004      	add	sp, #16
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	10001034 	.word	0x10001034
    14ec:	1000113c 	.word	0x1000113c

000014f0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    14f4:	4802      	ldr	r0, [pc, #8]	; (1500 <am_util_stdio_terminal_clear+0x10>)
    14f6:	f7ff ffdd 	bl	14b4 <am_util_stdio_printf>
}
    14fa:	bf00      	nop
    14fc:	bd80      	pop	{r7, pc}
    14fe:	bf00      	nop
    1500:	00001a28 	.word	0x00001a28

00001504 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1504:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1506:	f000 f9dd 	bl	18c4 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    150a:	f000 fa7f 	bl	1a0c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    150e:	2001      	movs	r0, #1
    1510:	f000 f9ee 	bl	18f0 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1514:	2001      	movs	r0, #1
    1516:	f000 f883 	bl	1620 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    151a:	f000 f9f7 	bl	190c <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    1522:	f000 b9c7 	b.w	18b4 <am_hal_mcuctrl_bandgap_disable>
    1526:	bf00      	nop

00001528 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1528:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    152a:	4b10      	ldr	r3, [pc, #64]	; (156c <am_bsp_debug_printf_enable+0x44>)
    152c:	681c      	ldr	r4, [r3, #0]
    152e:	f014 0401 	ands.w	r4, r4, #1
{
    1532:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1534:	d001      	beq.n	153a <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1536:	b006      	add	sp, #24
    1538:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    153a:	a806      	add	r0, sp, #24
    153c:	490c      	ldr	r1, [pc, #48]	; (1570 <am_bsp_debug_printf_enable+0x48>)
    153e:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1542:	f000 fa01 	bl	1948 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1546:	4a0b      	ldr	r2, [pc, #44]	; (1574 <am_bsp_debug_printf_enable+0x4c>)
    1548:	480b      	ldr	r0, [pc, #44]	; (1578 <am_bsp_debug_printf_enable+0x50>)
    154a:	490c      	ldr	r1, [pc, #48]	; (157c <am_bsp_debug_printf_enable+0x54>)
    154c:	2373      	movs	r3, #115	; 0x73
    154e:	6013      	str	r3, [r2, #0]
    1550:	6803      	ldr	r3, [r0, #0]
    1552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1556:	6003      	str	r3, [r0, #0]
    1558:	6808      	ldr	r0, [r1, #0]
    155a:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    155e:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1562:	600b      	str	r3, [r1, #0]
    1564:	6014      	str	r4, [r2, #0]
}
    1566:	b006      	add	sp, #24
    1568:	bd10      	pop	{r4, pc}
    156a:	bf00      	nop
    156c:	10001138 	.word	0x10001138
    1570:	000f4240 	.word	0x000f4240
    1574:	40010060 	.word	0x40010060
    1578:	40010054 	.word	0x40010054
    157c:	40010028 	.word	0x40010028

00001580 <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1580:	4b0f      	ldr	r3, [pc, #60]	; (15c0 <am_bsp_debug_printf_disable+0x40>)
{
    1582:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1584:	681c      	ldr	r4, [r3, #0]
    1586:	f014 0401 	ands.w	r4, r4, #1
    158a:	d000      	beq.n	158e <am_bsp_debug_printf_disable+0xe>
    158c:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    158e:	f000 f93d 	bl	180c <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1592:	4a0c      	ldr	r2, [pc, #48]	; (15c4 <am_bsp_debug_printf_disable+0x44>)
    1594:	480c      	ldr	r0, [pc, #48]	; (15c8 <am_bsp_debug_printf_disable+0x48>)
    1596:	490d      	ldr	r1, [pc, #52]	; (15cc <am_bsp_debug_printf_disable+0x4c>)
    1598:	2373      	movs	r3, #115	; 0x73
    159a:	6013      	str	r3, [r2, #0]
    159c:	6803      	ldr	r3, [r0, #0]
    159e:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    15a2:	f04c 0320 	orr.w	r3, ip, #32
    15a6:	6003      	str	r3, [r0, #0]
    15a8:	6808      	ldr	r0, [r1, #0]
    15aa:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    15ae:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    15b2:	600b      	str	r3, [r1, #0]
    15b4:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    15b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    15ba:	f000 ba21 	b.w	1a00 <am_hal_tpiu_disable>
    15be:	bf00      	nop
    15c0:	10001138 	.word	0x10001138
    15c4:	40010060 	.word	0x40010060
    15c8:	40010054 	.word	0x40010054
    15cc:	40010028 	.word	0x40010028

000015d0 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    15d0:	f000 b932 	b.w	1838 <am_hal_itm_print>

000015d4 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15d6:	4906      	ldr	r1, [pc, #24]	; (15f0 <am_hal_clkgen_sysclk_select+0x1c>)
{
    15d8:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    15da:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15dc:	2447      	movs	r4, #71	; 0x47
    15de:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15e0:	6008      	str	r0, [r1, #0]
}
    15e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    15e6:	601a      	str	r2, [r3, #0]
}
    15e8:	4770      	bx	lr
    15ea:	bf00      	nop
    15ec:	40004014 	.word	0x40004014
    15f0:	40004018 	.word	0x40004018

000015f4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    15f4:	4b03      	ldr	r3, [pc, #12]	; (1604 <am_hal_clkgen_sysclk_get+0x10>)
    15f6:	4a04      	ldr	r2, [pc, #16]	; (1608 <am_hal_clkgen_sysclk_get+0x14>)
    15f8:	6818      	ldr	r0, [r3, #0]
    15fa:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    15fe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    1602:	4770      	bx	lr
    1604:	40004018 	.word	0x40004018
    1608:	00001a3c 	.word	0x00001a3c

0000160c <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    160c:	0783      	lsls	r3, r0, #30
    160e:	d004      	beq.n	161a <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1610:	4a02      	ldr	r2, [pc, #8]	; (161c <am_hal_clkgen_osc_start+0x10>)
    1612:	6813      	ldr	r3, [r2, #0]
    1614:	ea23 0000 	bic.w	r0, r3, r0
    1618:	6010      	str	r0, [r2, #0]
    161a:	4770      	bx	lr
    161c:	4000400c 	.word	0x4000400c

00001620 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1620:	0783      	lsls	r3, r0, #30
    1622:	d003      	beq.n	162c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1624:	4b02      	ldr	r3, [pc, #8]	; (1630 <am_hal_clkgen_osc_stop+0x10>)
    1626:	681a      	ldr	r2, [r3, #0]
    1628:	4310      	orrs	r0, r2
    162a:	6018      	str	r0, [r3, #0]
    162c:	4770      	bx	lr
    162e:	bf00      	nop
    1630:	4000400c 	.word	0x4000400c

00001634 <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1634:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    1636:	684a      	ldr	r2, [r1, #4]
{
    1638:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    163a:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    163c:	4907      	ldr	r1, [pc, #28]	; (165c <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    163e:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    1640:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    1644:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1648:	bf14      	ite	ne
    164a:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    164e:	2300      	moveq	r3, #0
    1650:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1652:	5043      	str	r3, [r0, r1]
}
    1654:	f85d 4b04 	ldr.w	r4, [sp], #4
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	4000800c 	.word	0x4000800c

00001660 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1660:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1662:	4a07      	ldr	r2, [pc, #28]	; (1680 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1664:	5883      	ldr	r3, [r0, r2]
{
    1666:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1668:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    166c:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1670:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1674:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1676:	5081      	str	r1, [r0, r2]
}
    1678:	f85d 4b04 	ldr.w	r4, [sp], #4
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	4000800c 	.word	0x4000800c

00001684 <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1684:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1688:	58c2      	ldr	r2, [r0, r3]
    168a:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    168e:	4311      	orrs	r1, r2
    1690:	50c1      	str	r1, [r0, r3]
    1692:	4770      	bx	lr
    1694:	4000800c 	.word	0x4000800c

00001698 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    169a:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    169c:	4c19      	ldr	r4, [pc, #100]	; (1704 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    169e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    16a2:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16a4:	d018      	beq.n	16d8 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    16a6:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    16aa:	2e80      	cmp	r6, #128	; 0x80
    16ac:	d019      	beq.n	16e2 <am_hal_ctimer_period_set+0x4a>
    16ae:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    16b0:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    16b2:	4e15      	ldr	r6, [pc, #84]	; (1708 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    16b4:	4f15      	ldr	r7, [pc, #84]	; (170c <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    16b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16ba:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    16bc:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    16c0:	d01c      	beq.n	16fc <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16c2:	4b13      	ldr	r3, [pc, #76]	; (1710 <am_hal_ctimer_period_set+0x78>)
    16c4:	4299      	cmp	r1, r3
    16c6:	d014      	beq.n	16f2 <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    16c8:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    16ca:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    16cc:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    16d0:	430d      	orrs	r5, r1
    16d2:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    16d4:	5182      	str	r2, [r0, r6]
    }
}
    16d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    16d8:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    16da:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    16de:	2d80      	cmp	r5, #128	; 0x80
    16e0:	d103      	bne.n	16ea <am_hal_ctimer_period_set+0x52>
    16e2:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    16e4:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    16e6:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    16e8:	e7e3      	b.n	16b2 <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    16ea:	f8df e01c 	ldr.w	lr, [pc, #28]	; 1708 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    16ee:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    16f0:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    16f2:	b290      	uxth	r0, r2
    16f4:	4305      	orrs	r5, r0
    16f6:	f8ce 5000 	str.w	r5, [lr]
    16fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    16fc:	b294      	uxth	r4, r2
    16fe:	4325      	orrs	r5, r4
    1700:	51c5      	str	r5, [r0, r7]
    1702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1704:	4000800c 	.word	0x4000800c
    1708:	40008008 	.word	0x40008008
    170c:	40008004 	.word	0x40008004
    1710:	ffff0000 	.word	0xffff0000

00001714 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1714:	4a02      	ldr	r2, [pc, #8]	; (1720 <am_hal_ctimer_int_enable+0xc>)
    1716:	6813      	ldr	r3, [r2, #0]
    1718:	4318      	orrs	r0, r3
    171a:	6010      	str	r0, [r2, #0]
    171c:	4770      	bx	lr
    171e:	bf00      	nop
    1720:	40008200 	.word	0x40008200

00001724 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1724:	4b01      	ldr	r3, [pc, #4]	; (172c <am_hal_ctimer_int_clear+0x8>)
    1726:	6018      	str	r0, [r3, #0]
    1728:	4770      	bx	lr
    172a:	bf00      	nop
    172c:	40008208 	.word	0x40008208

00001730 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1730:	3801      	subs	r0, #1
    1732:	f47f affd 	bne.w	1730 <am_hal_flash_delay>
    1736:	4770      	bx	lr

00001738 <am_hal_gpio_out_enable_bit_get>:
am_hal_gpio_out_enable_bit_get(uint32_t ui32BitNum)
{
    //
    // Handle upper or lower GPIO word  and return 0 or 1.
    //
    if ( ui32BitNum > 31 )
    1738:	281f      	cmp	r0, #31
    {
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    173a:	bf8a      	itet	hi
    173c:	4a05      	ldrhi	r2, [pc, #20]	; (1754 <am_hal_gpio_out_enable_bit_get+0x1c>)
    }
    else
    {
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    173e:	4a06      	ldrls	r2, [pc, #24]	; (1758 <am_hal_gpio_out_enable_bit_get+0x20>)
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    1740:	3820      	subhi	r0, #32
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    1742:	2301      	movs	r3, #1
    1744:	6812      	ldr	r2, [r2, #0]
    1746:	fa03 f000 	lsl.w	r0, r3, r0
    174a:	4210      	tst	r0, r2
    174c:	bf14      	ite	ne
    174e:	4618      	movne	r0, r3
    1750:	2000      	moveq	r0, #0
    }
}
    1752:	4770      	bx	lr
    1754:	400100a4 	.word	0x400100a4
    1758:	400100a0 	.word	0x400100a0

0000175c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    175c:	280f      	cmp	r0, #15
    175e:	d80b      	bhi.n	1778 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1760:	2805      	cmp	r0, #5
    1762:	d013      	beq.n	178c <am_hal_interrupt_enable+0x30>
    1764:	2806      	cmp	r0, #6
    1766:	d017      	beq.n	1798 <am_hal_interrupt_enable+0x3c>
    1768:	2804      	cmp	r0, #4
    176a:	d104      	bne.n	1776 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    176c:	4a0d      	ldr	r2, [pc, #52]	; (17a4 <am_hal_interrupt_enable+0x48>)
    176e:	6813      	ldr	r3, [r2, #0]
    1770:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1774:	6010      	str	r0, [r2, #0]
    1776:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1778:	f1a0 0310 	sub.w	r3, r0, #16
    177c:	f003 0c1f 	and.w	ip, r3, #31
    1780:	2001      	movs	r0, #1
    1782:	4909      	ldr	r1, [pc, #36]	; (17a8 <am_hal_interrupt_enable+0x4c>)
    1784:	fa00 f20c 	lsl.w	r2, r0, ip
    1788:	600a      	str	r2, [r1, #0]
    178a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    178c:	4805      	ldr	r0, [pc, #20]	; (17a4 <am_hal_interrupt_enable+0x48>)
    178e:	6801      	ldr	r1, [r0, #0]
    1790:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1794:	6002      	str	r2, [r0, #0]
            break;
    1796:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1798:	4902      	ldr	r1, [pc, #8]	; (17a4 <am_hal_interrupt_enable+0x48>)
    179a:	680a      	ldr	r2, [r1, #0]
    179c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    17a0:	600b      	str	r3, [r1, #0]
            break;
    17a2:	4770      	bx	lr
    17a4:	e000ed24 	.word	0xe000ed24
    17a8:	e000e100 	.word	0xe000e100

000017ac <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    17ac:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    17b0:	b662      	cpsie	i
    __asm("    bx lr");
    17b2:	4770      	bx	lr

000017b4 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    17b4:	4b0d      	ldr	r3, [pc, #52]	; (17ec <am_hal_itm_enable+0x38>)
    17b6:	6818      	ldr	r0, [r3, #0]
    17b8:	07c2      	lsls	r2, r0, #31
    17ba:	d416      	bmi.n	17ea <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    17bc:	4a0c      	ldr	r2, [pc, #48]	; (17f0 <am_hal_itm_enable+0x3c>)
    17be:	6811      	ldr	r1, [r2, #0]
{
    17c0:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    17c2:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    17c6:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    17c8:	6815      	ldr	r5, [r2, #0]
    17ca:	01eb      	lsls	r3, r5, #7
    17cc:	d5fc      	bpl.n	17c8 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    17ce:	4809      	ldr	r0, [pc, #36]	; (17f4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    17d0:	4c09      	ldr	r4, [pc, #36]	; (17f8 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    17d2:	4d0a      	ldr	r5, [pc, #40]	; (17fc <am_hal_itm_enable+0x48>)
    17d4:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    17d6:	250f      	movs	r5, #15
    17d8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    17da:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    17dc:	4908      	ldr	r1, [pc, #32]	; (1800 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    17de:	4b09      	ldr	r3, [pc, #36]	; (1804 <am_hal_itm_enable+0x50>)
    17e0:	4a09      	ldr	r2, [pc, #36]	; (1808 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    17e2:	f04f 30ff 	mov.w	r0, #4294967295
    17e6:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    17e8:	601a      	str	r2, [r3, #0]
}
    17ea:	4770      	bx	lr
    17ec:	10001138 	.word	0x10001138
    17f0:	e000edfc 	.word	0xe000edfc
    17f4:	e0000fb0 	.word	0xe0000fb0
    17f8:	e0000e40 	.word	0xe0000e40
    17fc:	c5acce55 	.word	0xc5acce55
    1800:	e0000e00 	.word	0xe0000e00
    1804:	e0000e80 	.word	0xe0000e80
    1808:	00150511 	.word	0x00150511

0000180c <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    180c:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    180e:	4a08      	ldr	r2, [pc, #32]	; (1830 <am_hal_itm_not_busy+0x24>)
    1810:	6813      	ldr	r3, [r2, #0]
    1812:	021b      	lsls	r3, r3, #8
    1814:	d4fc      	bmi.n	1810 <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1816:	f7ff feed 	bl	15f4 <am_hal_clkgen_sysclk_get>
    181a:	4906      	ldr	r1, [pc, #24]	; (1834 <am_hal_itm_not_busy+0x28>)
    181c:	fba1 3000 	umull	r3, r0, r1, r0
    1820:	0c80      	lsrs	r0, r0, #18
    1822:	2232      	movs	r2, #50	; 0x32
    1824:	fb02 f000 	mul.w	r0, r2, r0
}
    1828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    182c:	f7ff bf80 	b.w	1730 <am_hal_flash_delay>
    1830:	e0000e80 	.word	0xe0000e80
    1834:	165e9f81 	.word	0x165e9f81

00001838 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1838:	7803      	ldrb	r3, [r0, #0]
    183a:	b1b3      	cbz	r3, 186a <am_hal_itm_print+0x32>
{
    183c:	b410      	push	{r4}
    183e:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1840:	2400      	movs	r4, #0
    1842:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1846:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1848:	2900      	cmp	r1, #0
    184a:	d1fa      	bne.n	1842 <am_hal_itm_print+0xa>
    184c:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    184e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1852:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1856:	f8dc 3000 	ldr.w	r3, [ip]
    185a:	2b00      	cmp	r3, #0
    185c:	d0fb      	beq.n	1856 <am_hal_itm_print+0x1e>
    while (ui32Length)
    185e:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1860:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1864:	d1f5      	bne.n	1852 <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    1866:	f85d 4b04 	ldr.w	r4, [sp], #4
    186a:	4770      	bx	lr

0000186c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    186c:	490d      	ldr	r1, [pc, #52]	; (18a4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    186e:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1870:	4a0e      	ldr	r2, [pc, #56]	; (18ac <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1872:	681b      	ldr	r3, [r3, #0]
{
    1874:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1876:	680d      	ldr	r5, [r1, #0]
    1878:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    187a:	6815      	ldr	r5, [r2, #0]
    187c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    187e:	4c0c      	ldr	r4, [pc, #48]	; (18b0 <am_hal_mcuctrl_fault_status+0x44>)
    1880:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1882:	4329      	orrs	r1, r5
    1884:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1886:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1888:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    188c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    188e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1890:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1894:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1898:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    189a:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    189c:	6142      	str	r2, [r0, #20]
}
    189e:	bc70      	pop	{r4, r5, r6}
    18a0:	4770      	bx	lr
    18a2:	bf00      	nop
    18a4:	400201c4 	.word	0x400201c4
    18a8:	400201cc 	.word	0x400201cc
    18ac:	400201c0 	.word	0x400201c0
    18b0:	400201c8 	.word	0x400201c8

000018b4 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    18b4:	4b02      	ldr	r3, [pc, #8]	; (18c0 <am_hal_mcuctrl_bandgap_disable+0xc>)
    18b6:	f06f 0201 	mvn.w	r2, #1
    18ba:	601a      	str	r2, [r3, #0]
    18bc:	4770      	bx	lr
    18be:	bf00      	nop
    18c0:	400200fc 	.word	0x400200fc

000018c4 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    18c6:	4a09      	ldr	r2, [pc, #36]	; (18ec <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    18c8:	6819      	ldr	r1, [r3, #0]
    18ca:	f041 0002 	orr.w	r0, r1, #2
    18ce:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    18d0:	6819      	ldr	r1, [r3, #0]
    18d2:	f041 0001 	orr.w	r0, r1, #1
    18d6:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    18d8:	6813      	ldr	r3, [r2, #0]
    18da:	0799      	lsls	r1, r3, #30
    18dc:	d5fc      	bpl.n	18d8 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    18de:	4a03      	ldr	r2, [pc, #12]	; (18ec <am_hal_mcuctrl_bucks_enable+0x28>)
    18e0:	6811      	ldr	r1, [r2, #0]
    18e2:	07cb      	lsls	r3, r1, #31
    18e4:	d5fc      	bpl.n	18e0 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    18e6:	4770      	bx	lr
    18e8:	40020010 	.word	0x40020010
    18ec:	40020014 	.word	0x40020014

000018f0 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    18f0:	4a05      	ldr	r2, [pc, #20]	; (1908 <am_hal_rtc_osc_select+0x18>)
    18f2:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    18f4:	b918      	cbnz	r0, 18fe <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    18f6:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    18fa:	6010      	str	r0, [r2, #0]
    18fc:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    18fe:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1902:	6011      	str	r1, [r2, #0]
    1904:	4770      	bx	lr
    1906:	bf00      	nop
    1908:	4000400c 	.word	0x4000400c

0000190c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    190c:	4a02      	ldr	r2, [pc, #8]	; (1918 <am_hal_rtc_osc_disable+0xc>)
    190e:	6813      	ldr	r3, [r2, #0]
    1910:	f043 0010 	orr.w	r0, r3, #16
    1914:	6010      	str	r0, [r2, #0]
    1916:	4770      	bx	lr
    1918:	40004050 	.word	0x40004050

0000191c <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    191c:	4a08      	ldr	r2, [pc, #32]	; (1940 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    191e:	b118      	cbz	r0, 1928 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1920:	4b08      	ldr	r3, [pc, #32]	; (1944 <am_hal_sysctrl_sleep+0x28>)
    1922:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1924:	07c3      	lsls	r3, r0, #31
    1926:	d505      	bpl.n	1934 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1928:	6811      	ldr	r1, [r2, #0]
    192a:	f021 0304 	bic.w	r3, r1, #4
    192e:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    1930:	bf30      	wfi
    1932:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1934:	6810      	ldr	r0, [r2, #0]
    1936:	f040 0104 	orr.w	r1, r0, #4
    193a:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    193c:	bf30      	wfi
    193e:	4770      	bx	lr
    1940:	e000ed10 	.word	0xe000ed10
    1944:	40020250 	.word	0x40020250

00001948 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1948:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    194a:	4a24      	ldr	r2, [pc, #144]	; (19dc <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    194c:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    194e:	2100      	movs	r1, #0
    1950:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1952:	b313      	cbz	r3, 199a <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1954:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1958:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    195a:	4c21      	ldr	r4, [pc, #132]	; (19e0 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    195c:	4d21      	ldr	r5, [pc, #132]	; (19e4 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    195e:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1962:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1966:	45a6      	cmp	lr, r4
    1968:	bf94      	ite	ls
    196a:	461c      	movls	r4, r3
    196c:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    196e:	f7ff fe41 	bl	15f4 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1972:	1c43      	adds	r3, r0, #1
    1974:	d02f      	beq.n	19d6 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1976:	08c2      	lsrs	r2, r0, #3
    1978:	fbb2 f3f4 	udiv	r3, r2, r4
    197c:	1e5d      	subs	r5, r3, #1
    197e:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1980:	4a19      	ldr	r2, [pc, #100]	; (19e8 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1982:	4c1a      	ldr	r4, [pc, #104]	; (19ec <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1984:	491a      	ldr	r1, [pc, #104]	; (19f0 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1986:	4b1b      	ldr	r3, [pc, #108]	; (19f4 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1988:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    198a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    198c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    198e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1992:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1994:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1996:	601a      	str	r2, [r3, #0]
    1998:	e010      	b.n	19bc <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    199a:	4c13      	ldr	r4, [pc, #76]	; (19e8 <am_hal_tpiu_enable+0xa0>)
    199c:	6905      	ldr	r5, [r0, #16]
    199e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    19a0:	6882      	ldr	r2, [r0, #8]
    19a2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    19a6:	68c3      	ldr	r3, [r0, #12]
    19a8:	4c13      	ldr	r4, [pc, #76]	; (19f8 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    19aa:	4912      	ldr	r1, [pc, #72]	; (19f4 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    19ac:	1e5d      	subs	r5, r3, #1
    19ae:	2201      	movs	r2, #1
    19b0:	40aa      	lsls	r2, r5
    19b2:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    19b4:	6840      	ldr	r0, [r0, #4]
    19b6:	680b      	ldr	r3, [r1, #0]
    19b8:	4303      	orrs	r3, r0
    19ba:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    19bc:	f7ff fe1a 	bl	15f4 <am_hal_clkgen_sysclk_get>
    19c0:	4c0e      	ldr	r4, [pc, #56]	; (19fc <am_hal_tpiu_enable+0xb4>)
    19c2:	fba4 3100 	umull	r3, r1, r4, r0
    19c6:	0c88      	lsrs	r0, r1, #18
    19c8:	2332      	movs	r3, #50	; 0x32
    19ca:	fb03 f000 	mul.w	r0, r3, r0
}
    19ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    19d2:	f7ff bead 	b.w	1730 <am_hal_flash_delay>
    19d6:	2002      	movs	r0, #2
    19d8:	e7d2      	b.n	1980 <am_hal_tpiu_enable+0x38>
    19da:	bf00      	nop
    19dc:	e0040304 	.word	0xe0040304
    19e0:	001da380 	.word	0x001da380
    19e4:	000f4240 	.word	0x000f4240
    19e8:	e0040010 	.word	0xe0040010
    19ec:	e00400f0 	.word	0xe00400f0
    19f0:	e0040f00 	.word	0xe0040f00
    19f4:	40020250 	.word	0x40020250
    19f8:	e0040004 	.word	0xe0040004
    19fc:	165e9f81 	.word	0x165e9f81

00001a00 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1a00:	4b01      	ldr	r3, [pc, #4]	; (1a08 <am_hal_tpiu_disable+0x8>)
    1a02:	2200      	movs	r2, #0
    1a04:	601a      	str	r2, [r3, #0]
    1a06:	4770      	bx	lr
    1a08:	40020250 	.word	0x40020250

00001a0c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1a0c:	4b01      	ldr	r3, [pc, #4]	; (1a14 <am_hal_vcomp_disable+0x8>)
    1a0e:	2237      	movs	r2, #55	; 0x37
    1a10:	601a      	str	r2, [r3, #0]
    1a12:	4770      	bx	lr
    1a14:	4000c008 	.word	0x4000c008
    1a18:	656d6954 	.word	0x656d6954
    1a1c:	78452072 	.word	0x78452072
    1a20:	6c706d61 	.word	0x6c706d61
    1a24:	00000a65 	.word	0x00000a65
    1a28:	0a0a0a0a 	.word	0x0a0a0a0a
    1a2c:	0a0a0a0a 	.word	0x0a0a0a0a
    1a30:	0a0a0a0a 	.word	0x0a0a0a0a
    1a34:	0a0a0a0a 	.word	0x0a0a0a0a
    1a38:	00000a0a 	.word	0x00000a0a

00001a3c <CSWTCH.4>:
    1a3c:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1a4c:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
