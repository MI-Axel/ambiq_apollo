
multi_boot_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e84  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000060  10001000  00001e84  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000a88  10001060  00001ee4  00021060  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY
  5 .debug_info   00007ccf  00000000  00000000  00021097  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002099  00000000  00000000  00028d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000790  00000000  00000000  0002adff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ae8  00000000  00000000  0002b58f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ea2  00000000  00000000  0002c077  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002eab  00000000  00000000  0002ff19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00032dc4  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000012f0  00000000  00000000  00032e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002073  00000000  00000000  00034130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 f9 14 00 00 61 15 00 00 67 15 00 00     ........a...g...
      10:	67 15 00 00 67 15 00 00 67 15 00 00 00 00 00 00     g...g...g.......
	...
      2c:	6d 15 00 00 6d 15 00 00 00 00 00 00 6d 15 00 00     m...m.......m...
      3c:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
      4c:	6d 15 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     m...m...m...m...
      5c:	6d 15 00 00 6d 15 00 00 65 10 00 00 6d 15 00 00     m...m...e...m...
      6c:	95 10 00 00 6d 15 00 00 6d 15 00 00 6d 15 00 00     ....m...m...m...
      7c:	6d 15 00 00                                         m...

00000080 <am_bootloader_fast_crc32>:
//! @return 32-bit CRC value.
//
//*****************************************************************************
uint32_t
am_bootloader_fast_crc32(const void *pvData, uint32_t ui32NumBytes)
{
      80:	b480      	push	{r7}
      82:	b087      	sub	sp, #28
      84:	af00      	add	r7, sp, #0
      86:	6078      	str	r0, [r7, #4]
      88:	6039      	str	r1, [r7, #0]
    uint32_t ui32CRC, ui32CRCIndex, i;
    uint8_t *pui8Data;

    ui32CRC = 0;
      8a:	2300      	movs	r3, #0
      8c:	617b      	str	r3, [r7, #20]
    pui8Data = (uint8_t *) pvData;
      8e:	687b      	ldr	r3, [r7, #4]
      90:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < ui32NumBytes; i++ )
      92:	2300      	movs	r3, #0
      94:	613b      	str	r3, [r7, #16]
      96:	e013      	b.n	c0 <am_bootloader_fast_crc32+0x40>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
      98:	68fa      	ldr	r2, [r7, #12]
      9a:	693b      	ldr	r3, [r7, #16]
      9c:	4413      	add	r3, r2
      9e:	781b      	ldrb	r3, [r3, #0]
      a0:	461a      	mov	r2, r3
      a2:	697b      	ldr	r3, [r7, #20]
      a4:	0e1b      	lsrs	r3, r3, #24
      a6:	4053      	eors	r3, r2
      a8:	60bb      	str	r3, [r7, #8]
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
      aa:	697b      	ldr	r3, [r7, #20]
      ac:	021a      	lsls	r2, r3, #8
      ae:	490a      	ldr	r1, [pc, #40]	; (d8 <am_bootloader_fast_crc32+0x58>)
      b0:	68bb      	ldr	r3, [r7, #8]
      b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      b6:	4053      	eors	r3, r2
      b8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < ui32NumBytes; i++ )
      ba:	693b      	ldr	r3, [r7, #16]
      bc:	3301      	adds	r3, #1
      be:	613b      	str	r3, [r7, #16]
      c0:	693a      	ldr	r2, [r7, #16]
      c2:	683b      	ldr	r3, [r7, #0]
      c4:	429a      	cmp	r2, r3
      c6:	d3e7      	bcc.n	98 <am_bootloader_fast_crc32+0x18>
    }

    return ui32CRC;
      c8:	697b      	ldr	r3, [r7, #20]
}
      ca:	4618      	mov	r0, r3
      cc:	371c      	adds	r7, #28
      ce:	46bd      	mov	sp, r7
      d0:	f85d 7b04 	ldr.w	r7, [sp], #4
      d4:	4770      	bx	lr
      d6:	bf00      	nop
      d8:	000019e4 	.word	0x000019e4

000000dc <am_bootloader_partial_crc32>:
//
//*****************************************************************************
void
am_bootloader_partial_crc32(const void *pvData, uint32_t ui32NumBytes,
                            uint32_t *pui32CRC)
{
      dc:	b480      	push	{r7}
      de:	b089      	sub	sp, #36	; 0x24
      e0:	af00      	add	r7, sp, #0
      e2:	60f8      	str	r0, [r7, #12]
      e4:	60b9      	str	r1, [r7, #8]
      e6:	607a      	str	r2, [r7, #4]
    uint32_t ui32CRCIndex, i;
    uint8_t *pui8Data;

    uint32_t ui32TempCRC = *pui32CRC;
      e8:	687b      	ldr	r3, [r7, #4]
      ea:	681b      	ldr	r3, [r3, #0]
      ec:	61bb      	str	r3, [r7, #24]

    pui8Data = (uint8_t *) pvData;
      ee:	68fb      	ldr	r3, [r7, #12]
      f0:	617b      	str	r3, [r7, #20]

    for ( i = 0; i < ui32NumBytes; i++ )
      f2:	2300      	movs	r3, #0
      f4:	61fb      	str	r3, [r7, #28]
      f6:	e013      	b.n	120 <am_bootloader_partial_crc32+0x44>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
      f8:	697a      	ldr	r2, [r7, #20]
      fa:	69fb      	ldr	r3, [r7, #28]
      fc:	4413      	add	r3, r2
      fe:	781b      	ldrb	r3, [r3, #0]
     100:	461a      	mov	r2, r3
     102:	69bb      	ldr	r3, [r7, #24]
     104:	0e1b      	lsrs	r3, r3, #24
     106:	4053      	eors	r3, r2
     108:	613b      	str	r3, [r7, #16]
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
     10a:	69bb      	ldr	r3, [r7, #24]
     10c:	021a      	lsls	r2, r3, #8
     10e:	490b      	ldr	r1, [pc, #44]	; (13c <am_bootloader_partial_crc32+0x60>)
     110:	693b      	ldr	r3, [r7, #16]
     112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     116:	4053      	eors	r3, r2
     118:	61bb      	str	r3, [r7, #24]
    for ( i = 0; i < ui32NumBytes; i++ )
     11a:	69fb      	ldr	r3, [r7, #28]
     11c:	3301      	adds	r3, #1
     11e:	61fb      	str	r3, [r7, #28]
     120:	69fa      	ldr	r2, [r7, #28]
     122:	68bb      	ldr	r3, [r7, #8]
     124:	429a      	cmp	r2, r3
     126:	d3e7      	bcc.n	f8 <am_bootloader_partial_crc32+0x1c>
    }

    *pui32CRC = ui32TempCRC;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	69ba      	ldr	r2, [r7, #24]
     12c:	601a      	str	r2, [r3, #0]
}
     12e:	bf00      	nop
     130:	3724      	adds	r7, #36	; 0x24
     132:	46bd      	mov	sp, r7
     134:	f85d 7b04 	ldr.w	r7, [sp], #4
     138:	4770      	bx	lr
     13a:	bf00      	nop
     13c:	000019e4 	.word	0x000019e4

00000140 <am_bootloader_flash_check>:
//! @return true if the image is safe to run.
//
//*****************************************************************************
bool
am_bootloader_flash_check(am_bootloader_image_t *psImage)
{
     140:	b580      	push	{r7, lr}
     142:	b092      	sub	sp, #72	; 0x48
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
    am_hal_mcuctrl_device_t sDevice;
    uint32_t ui32ResetVector, ui32StackPointer, ui32LinkAddress;

    ui32LinkAddress = (uint32_t) psImage->pui32LinkAddress;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    am_hal_mcuctrl_device_info_get(&sDevice);
     14e:	f107 030c 	add.w	r3, r7, #12
     152:	4618      	mov	r0, r3
     154:	f001 fada 	bl	170c <am_hal_mcuctrl_device_info_get>

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
     158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
     15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     15c:	429a      	cmp	r2, r3
     15e:	d801      	bhi.n	164 <am_bootloader_flash_check+0x24>
    {
        DPRINTF(("Link address outside of flash. 0x%08x\r\n", ui32LinkAddress));
        return false;
     160:	2300      	movs	r3, #0
     162:	e03f      	b.n	1e4 <am_bootloader_flash_check+0xa4>

    //
    // Check to see if the image was encrypted. If it was, these tests won't
    // work. We'll need to just skip them.
    //
    if ( psImage->bEncrypted == false )
     164:	687b      	ldr	r3, [r7, #4]
     166:	69db      	ldr	r3, [r3, #28]
     168:	2b00      	cmp	r3, #0
     16a:	d108      	bne.n	17e <am_bootloader_flash_check+0x3e>
    {
        ui32StackPointer = psImage->pui32LinkAddress[0];
     16c:	687b      	ldr	r3, [r7, #4]
     16e:	681b      	ldr	r3, [r3, #0]
     170:	681b      	ldr	r3, [r3, #0]
     172:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = psImage->pui32LinkAddress[1];
     174:	687b      	ldr	r3, [r7, #4]
     176:	681b      	ldr	r3, [r3, #0]
     178:	685b      	ldr	r3, [r3, #4]
     17a:	647b      	str	r3, [r7, #68]	; 0x44
     17c:	e005      	b.n	18a <am_bootloader_flash_check+0x4a>
    }
    else
    {
        ui32StackPointer = (uint32_t) psImage->pui32StackPointer;
     17e:	687b      	ldr	r3, [r7, #4]
     180:	695b      	ldr	r3, [r3, #20]
     182:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = (uint32_t) psImage->pui32ResetVector;
     184:	687b      	ldr	r3, [r7, #4]
     186:	699b      	ldr	r3, [r3, #24]
     188:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //
    // Make sure the stack is in SRAM.
    //
    if (((SRAM_BASEADDR != 0) && (ui32StackPointer < SRAM_BASEADDR))
     18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     190:	d305      	bcc.n	19e <am_bootloader_flash_check+0x5e>
        || (ui32StackPointer >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)))
     192:	6abb      	ldr	r3, [r7, #40]	; 0x28
     194:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
     198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     19a:	429a      	cmp	r2, r3
     19c:	d801      	bhi.n	1a2 <am_bootloader_flash_check+0x62>
    {
        DPRINTF(("Stack not in SRAM 0x%08x\r\n", ui32StackPointer));
        return false;
     19e:	2300      	movs	r3, #0
     1a0:	e020      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1a6:	429a      	cmp	r2, r3
     1a8:	d306      	bcc.n	1b8 <am_bootloader_flash_check+0x78>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	685a      	ldr	r2, [r3, #4]
     1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1b0:	441a      	add	r2, r3
    if (ui32ResetVector < ui32LinkAddress ||
     1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     1b4:	429a      	cmp	r2, r3
     1b6:	d801      	bhi.n	1bc <am_bootloader_flash_check+0x7c>
    {
        DPRINTF(("Reset Vector not in image 0x%08x\r\n", ui32ResetVector));
        return false;
     1b8:	2300      	movs	r3, #0
     1ba:	e013      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // If the image isn't encrypted, run a CRC32.
    //
    if ( psImage->bEncrypted == false )
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	69db      	ldr	r3, [r3, #28]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d10e      	bne.n	1e2 <am_bootloader_flash_check+0xa2>
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681a      	ldr	r2, [r3, #0]
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	685b      	ldr	r3, [r3, #4]
     1cc:	4619      	mov	r1, r3
     1ce:	4610      	mov	r0, r2
     1d0:	f7ff ff56 	bl	80 <am_bootloader_fast_crc32>
     1d4:	4602      	mov	r2, r0
             psImage->ui32CRC )
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	689b      	ldr	r3, [r3, #8]
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     1da:	429a      	cmp	r2, r3
     1dc:	d001      	beq.n	1e2 <am_bootloader_flash_check+0xa2>
        {
            DPRINTF(("Bad CRC 0x%08x\r\n", psImage->ui32CRC));
            return false;
     1de:	2300      	movs	r3, #0
     1e0:	e000      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // If those tests pass, we're probably safe to run.
    //
    return true;
     1e2:	2301      	movs	r3, #1
}
     1e4:	4618      	mov	r0, r3
     1e6:	3748      	adds	r7, #72	; 0x48
     1e8:	46bd      	mov	sp, r7
     1ea:	bd80      	pop	{r7, pc}

000001ec <am_hal_bootloader_override_check>:
//! @return true if override is asserted
//
//*****************************************************************************
bool
am_hal_bootloader_override_check(am_bootloader_image_t *psImage)
{
     1ec:	b490      	push	{r4, r7}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	6078      	str	r0, [r7, #4]
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));
    uint32_t    ui32OverridePin;
    //
    // Check the override GPIO
    //
    if ( psImage->ui32OverrideGPIO != 0xFFFFFFFF )
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	68db      	ldr	r3, [r3, #12]
     1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
     1fc:	f000 8103 	beq.w	406 <am_hal_bootloader_override_check+0x21a>
#endif
        //
        // Temporarily configure the override pin as an input.
        //
#ifndef AM_PART_APOLLO3
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_INPUT);
     200:	687b      	ldr	r3, [r7, #4]
     202:	68db      	ldr	r3, [r3, #12]
     204:	2b00      	cmp	r3, #0
     206:	db46      	blt.n	296 <am_hal_bootloader_override_check+0xaa>
     208:	4b82      	ldr	r3, [pc, #520]	; (414 <am_hal_bootloader_override_check+0x228>)
     20a:	2273      	movs	r2, #115	; 0x73
     20c:	601a      	str	r2, [r3, #0]
     20e:	687b      	ldr	r3, [r7, #4]
     210:	68db      	ldr	r3, [r3, #12]
     212:	085b      	lsrs	r3, r3, #1
     214:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     218:	4b7f      	ldr	r3, [pc, #508]	; (418 <am_hal_bootloader_override_check+0x22c>)
     21a:	4413      	add	r3, r2
     21c:	4618      	mov	r0, r3
     21e:	687b      	ldr	r3, [r7, #4]
     220:	68db      	ldr	r3, [r3, #12]
     222:	085b      	lsrs	r3, r3, #1
     224:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     228:	4b7b      	ldr	r3, [pc, #492]	; (418 <am_hal_bootloader_override_check+0x22c>)
     22a:	4413      	add	r3, r2
     22c:	681a      	ldr	r2, [r3, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	68db      	ldr	r3, [r3, #12]
     232:	009b      	lsls	r3, r3, #2
     234:	f003 031c 	and.w	r3, r3, #28
     238:	2107      	movs	r1, #7
     23a:	fa01 f303 	lsl.w	r3, r1, r3
     23e:	43db      	mvns	r3, r3
     240:	4013      	ands	r3, r2
     242:	6003      	str	r3, [r0, #0]
     244:	687b      	ldr	r3, [r7, #4]
     246:	68db      	ldr	r3, [r3, #12]
     248:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     24c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     250:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     254:	461c      	mov	r4, r3
     256:	687b      	ldr	r3, [r7, #4]
     258:	68db      	ldr	r3, [r3, #12]
     25a:	00db      	lsls	r3, r3, #3
     25c:	f003 0318 	and.w	r3, r3, #24
     260:	221a      	movs	r2, #26
     262:	409a      	lsls	r2, r3
     264:	687b      	ldr	r3, [r7, #4]
     266:	68db      	ldr	r3, [r3, #12]
     268:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     26c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     270:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     274:	6819      	ldr	r1, [r3, #0]
     276:	687b      	ldr	r3, [r7, #4]
     278:	68db      	ldr	r3, [r3, #12]
     27a:	00db      	lsls	r3, r3, #3
     27c:	f003 0318 	and.w	r3, r3, #24
     280:	20ff      	movs	r0, #255	; 0xff
     282:	fa00 f303 	lsl.w	r3, r0, r3
     286:	43db      	mvns	r3, r3
     288:	400b      	ands	r3, r1
     28a:	4313      	orrs	r3, r2
     28c:	6023      	str	r3, [r4, #0]
     28e:	4b61      	ldr	r3, [pc, #388]	; (414 <am_hal_bootloader_override_check+0x228>)
     290:	2200      	movs	r2, #0
     292:	601a      	str	r2, [r3, #0]
     294:	e000      	b.n	298 <am_hal_bootloader_override_check+0xac>
     296:	bf00      	nop

        //
        // If the override pin matches the specified polarity, force a failure.
        //
#ifndef AM_PART_APOLLO3
        ui32OverridePin = am_hal_gpio_input_bit_read(psImage->ui32OverrideGPIO);
     298:	687b      	ldr	r3, [r7, #4]
     29a:	68db      	ldr	r3, [r3, #12]
     29c:	08db      	lsrs	r3, r3, #3
     29e:	f003 0204 	and.w	r2, r3, #4
     2a2:	4b5e      	ldr	r3, [pc, #376]	; (41c <am_hal_bootloader_override_check+0x230>)
     2a4:	4413      	add	r3, r2
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	68db      	ldr	r3, [r3, #12]
     2ac:	f003 031f 	and.w	r3, r3, #31
     2b0:	fa22 f303 	lsr.w	r3, r2, r3
     2b4:	f003 0301 	and.w	r3, r3, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	bf14      	ite	ne
     2bc:	2301      	movne	r3, #1
     2be:	2300      	moveq	r3, #0
     2c0:	b2db      	uxtb	r3, r3
     2c2:	60fb      	str	r3, [r7, #12]
#else
        am_hal_gpio_state_read(psImage->ui32OverrideGPIO, AM_HAL_GPIO_INPUT_READ, &ui32OverridePin );
#endif
        if ( ui32OverridePin == (psImage->ui32OverridePolarity & 0x1) )
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	f003 0201 	and.w	r2, r3, #1
     2cc:	68fb      	ldr	r3, [r7, #12]
     2ce:	429a      	cmp	r2, r3
     2d0:	d14d      	bne.n	36e <am_hal_bootloader_override_check+0x182>
            DPRINTF(("Override Pin %d matches Polarity, force failure. %d, %d\r\n", psImage->ui32OverrideGPIO,  ui32OverridePin, psImage->ui32OverridePolarity));
            //
            // Make sure to disable the pin before continuing.
            //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	68db      	ldr	r3, [r3, #12]
     2d6:	2b00      	cmp	r3, #0
     2d8:	db46      	blt.n	368 <am_hal_bootloader_override_check+0x17c>
     2da:	4b4e      	ldr	r3, [pc, #312]	; (414 <am_hal_bootloader_override_check+0x228>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	68db      	ldr	r3, [r3, #12]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b4b      	ldr	r3, [pc, #300]	; (418 <am_hal_bootloader_override_check+0x22c>)
     2ec:	4413      	add	r3, r2
     2ee:	4618      	mov	r0, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	68db      	ldr	r3, [r3, #12]
     2f4:	085b      	lsrs	r3, r3, #1
     2f6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fa:	4b47      	ldr	r3, [pc, #284]	; (418 <am_hal_bootloader_override_check+0x22c>)
     2fc:	4413      	add	r3, r2
     2fe:	681a      	ldr	r2, [r3, #0]
     300:	687b      	ldr	r3, [r7, #4]
     302:	68db      	ldr	r3, [r3, #12]
     304:	009b      	lsls	r3, r3, #2
     306:	f003 031c 	and.w	r3, r3, #28
     30a:	2107      	movs	r1, #7
     30c:	fa01 f303 	lsl.w	r3, r1, r3
     310:	43db      	mvns	r3, r3
     312:	4013      	ands	r3, r2
     314:	6003      	str	r3, [r0, #0]
     316:	687b      	ldr	r3, [r7, #4]
     318:	68db      	ldr	r3, [r3, #12]
     31a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     31e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     322:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     326:	461c      	mov	r4, r3
     328:	687b      	ldr	r3, [r7, #4]
     32a:	68db      	ldr	r3, [r3, #12]
     32c:	00db      	lsls	r3, r3, #3
     32e:	f003 0318 	and.w	r3, r3, #24
     332:	2218      	movs	r2, #24
     334:	409a      	lsls	r2, r3
     336:	687b      	ldr	r3, [r7, #4]
     338:	68db      	ldr	r3, [r3, #12]
     33a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     33e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     342:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     346:	6819      	ldr	r1, [r3, #0]
     348:	687b      	ldr	r3, [r7, #4]
     34a:	68db      	ldr	r3, [r3, #12]
     34c:	00db      	lsls	r3, r3, #3
     34e:	f003 0318 	and.w	r3, r3, #24
     352:	20ff      	movs	r0, #255	; 0xff
     354:	fa00 f303 	lsl.w	r3, r0, r3
     358:	43db      	mvns	r3, r3
     35a:	400b      	ands	r3, r1
     35c:	4313      	orrs	r3, r2
     35e:	6023      	str	r3, [r4, #0]
     360:	4b2c      	ldr	r3, [pc, #176]	; (414 <am_hal_bootloader_override_check+0x228>)
     362:	2200      	movs	r2, #0
     364:	601a      	str	r2, [r3, #0]
     366:	e000      	b.n	36a <am_hal_bootloader_override_check+0x17e>
     368:	bf00      	nop
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
            return true;
     36a:	2301      	movs	r3, #1
     36c:	e04c      	b.n	408 <am_hal_bootloader_override_check+0x21c>
        // If the test passed, we still need to make sure the GPIO is disabled,
        // as it might interfere with the program we are (presumably) about to
        // boot.
        //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     36e:	687b      	ldr	r3, [r7, #4]
     370:	68db      	ldr	r3, [r3, #12]
     372:	2b00      	cmp	r3, #0
     374:	db46      	blt.n	404 <am_hal_bootloader_override_check+0x218>
     376:	4b27      	ldr	r3, [pc, #156]	; (414 <am_hal_bootloader_override_check+0x228>)
     378:	2273      	movs	r2, #115	; 0x73
     37a:	601a      	str	r2, [r3, #0]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	68db      	ldr	r3, [r3, #12]
     380:	085b      	lsrs	r3, r3, #1
     382:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     386:	4b24      	ldr	r3, [pc, #144]	; (418 <am_hal_bootloader_override_check+0x22c>)
     388:	4413      	add	r3, r2
     38a:	4618      	mov	r0, r3
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	68db      	ldr	r3, [r3, #12]
     390:	085b      	lsrs	r3, r3, #1
     392:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     396:	4b20      	ldr	r3, [pc, #128]	; (418 <am_hal_bootloader_override_check+0x22c>)
     398:	4413      	add	r3, r2
     39a:	681a      	ldr	r2, [r3, #0]
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	68db      	ldr	r3, [r3, #12]
     3a0:	009b      	lsls	r3, r3, #2
     3a2:	f003 031c 	and.w	r3, r3, #28
     3a6:	2107      	movs	r1, #7
     3a8:	fa01 f303 	lsl.w	r3, r1, r3
     3ac:	43db      	mvns	r3, r3
     3ae:	4013      	ands	r3, r2
     3b0:	6003      	str	r3, [r0, #0]
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	68db      	ldr	r3, [r3, #12]
     3b6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3c2:	461c      	mov	r4, r3
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	68db      	ldr	r3, [r3, #12]
     3c8:	00db      	lsls	r3, r3, #3
     3ca:	f003 0318 	and.w	r3, r3, #24
     3ce:	2218      	movs	r2, #24
     3d0:	409a      	lsls	r2, r3
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	68db      	ldr	r3, [r3, #12]
     3d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3e2:	6819      	ldr	r1, [r3, #0]
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	68db      	ldr	r3, [r3, #12]
     3e8:	00db      	lsls	r3, r3, #3
     3ea:	f003 0318 	and.w	r3, r3, #24
     3ee:	20ff      	movs	r0, #255	; 0xff
     3f0:	fa00 f303 	lsl.w	r3, r0, r3
     3f4:	43db      	mvns	r3, r3
     3f6:	400b      	ands	r3, r1
     3f8:	4313      	orrs	r3, r2
     3fa:	6023      	str	r3, [r4, #0]
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <am_hal_bootloader_override_check+0x228>)
     3fe:	2200      	movs	r2, #0
     400:	601a      	str	r2, [r3, #0]
     402:	e000      	b.n	406 <am_hal_bootloader_override_check+0x21a>
     404:	bf00      	nop
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
    }

    return false;
     406:	2300      	movs	r3, #0
}
     408:	4618      	mov	r0, r3
     40a:	3710      	adds	r7, #16
     40c:	46bd      	mov	sp, r7
     40e:	bc90      	pop	{r4, r7}
     410:	4770      	bx	lr
     412:	bf00      	nop
     414:	40010060 	.word	0x40010060
     418:	40010040 	.word	0x40010040
     41c:	40010080 	.word	0x40010080

00000420 <am_bootloader_validate_structure>:
//! @return true if the check passes.
//
//*****************************************************************************
bool
am_bootloader_validate_structure(uint32_t *pInfo, uint32_t size)
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
     426:	6078      	str	r0, [r7, #4]
     428:	6039      	str	r1, [r7, #0]
    uint32_t ui32Crc = 0;
     42a:	2300      	movs	r3, #0
     42c:	60bb      	str	r3, [r7, #8]
    // CRC value is the last 4 bytes of the structure
    uint32_t *pCrc = pInfo + size / 4 - 1;
     42e:	683b      	ldr	r3, [r7, #0]
     430:	f023 0303 	bic.w	r3, r3, #3
     434:	3b04      	subs	r3, #4
     436:	687a      	ldr	r2, [r7, #4]
     438:	4413      	add	r3, r2
     43a:	60fb      	str	r3, [r7, #12]
    // Compute and validate CRC of the structure
    am_bootloader_partial_crc32(pInfo, size - 4, &ui32Crc);
     43c:	683b      	ldr	r3, [r7, #0]
     43e:	3b04      	subs	r3, #4
     440:	f107 0208 	add.w	r2, r7, #8
     444:	4619      	mov	r1, r3
     446:	6878      	ldr	r0, [r7, #4]
     448:	f7ff fe48 	bl	dc <am_bootloader_partial_crc32>
    if (*pCrc != ui32Crc)
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	681a      	ldr	r2, [r3, #0]
     450:	68bb      	ldr	r3, [r7, #8]
     452:	429a      	cmp	r2, r3
     454:	d001      	beq.n	45a <am_bootloader_validate_structure+0x3a>
    {
        return false;
     456:	2300      	movs	r3, #0
     458:	e000      	b.n	45c <am_bootloader_validate_structure+0x3c>
    }
    else
    {
        return true;
     45a:	2301      	movs	r3, #1
    }
}
     45c:	4618      	mov	r0, r3
     45e:	3710      	adds	r7, #16
     460:	46bd      	mov	sp, r7
     462:	bd80      	pop	{r7, pc}

00000464 <am_bootloader_flag_page_update>:
//
//*****************************************************************************
int
am_bootloader_flag_page_update(am_bootloader_image_t *psImage,
                               uint32_t *pui32FlagPage)
{
     464:	b580      	push	{r7, lr}
     466:	b086      	sub	sp, #24
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
     46c:	6039      	str	r1, [r7, #0]
    uint32_t ui32Block, ui32Page;
    uint32_t ui32Critical;
    psImage->ui32Checksum = 0;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	2200      	movs	r2, #0
     472:	621a      	str	r2, [r3, #32]
    DPRINTF(("Image to use: 0x%08x\r\n", (uintptr_t)psImage));
    DPRINTF(("Flag page address: 0x%08x\r\n", (uintptr_t)pui32FlagPage));
    //
    // Calculate the correct flag page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)pui32FlagPage);
     474:	683b      	ldr	r3, [r7, #0]
     476:	0adb      	lsrs	r3, r3, #11
     478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     47c:	617b      	str	r3, [r7, #20]
    DPRINTF(("Flag page %d\r\n", ui32Page));
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)pui32FlagPage);
     47e:	683b      	ldr	r3, [r7, #0]
     480:	0c9b      	lsrs	r3, r3, #18
     482:	f003 0301 	and.w	r3, r3, #1
     486:	613b      	str	r3, [r7, #16]
    DPRINTF(("Flag page in block %d\r\n", ui32Block));

    // Compute CRC of the structure
    am_bootloader_partial_crc32(psImage, sizeof(*psImage) - 4, &psImage->ui32Checksum);
     488:	687b      	ldr	r3, [r7, #4]
     48a:	3320      	adds	r3, #32
     48c:	461a      	mov	r2, r3
     48e:	2120      	movs	r1, #32
     490:	6878      	ldr	r0, [r7, #4]
     492:	f7ff fe23 	bl	dc <am_bootloader_partial_crc32>
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     496:	f001 f931 	bl	16fc <am_hal_interrupt_master_disable>
     49a:	60f8      	str	r0, [r7, #12]
    //
    // Erase the page.
    //
    int rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
     49c:	697a      	ldr	r2, [r7, #20]
     49e:	6939      	ldr	r1, [r7, #16]
     4a0:	4809      	ldr	r0, [pc, #36]	; (4c8 <am_bootloader_flag_page_update+0x64>)
     4a2:	f001 f89f 	bl	15e4 <am_hal_flash_page_erase>
     4a6:	60b8      	str	r0, [r7, #8]
    DPRINTF(("Flash Erased %d\r\n", rc));

    //
    // Write the psImage structure directly to the flag page.
    //
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     4a8:	2309      	movs	r3, #9
     4aa:	683a      	ldr	r2, [r7, #0]
     4ac:	6879      	ldr	r1, [r7, #4]
     4ae:	4806      	ldr	r0, [pc, #24]	; (4c8 <am_bootloader_flag_page_update+0x64>)
     4b0:	f001 f89c 	bl	15ec <am_hal_flash_program_main>
     4b4:	60b8      	str	r0, [r7, #8]
                              pui32FlagPage,
                              sizeof(am_bootloader_image_t) / 4);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     4b6:	68f8      	ldr	r0, [r7, #12]
     4b8:	f001 f924 	bl	1704 <am_hal_interrupt_master_set>
    DPRINTF(("Done. %d\r\n", rc));
    return rc;
     4bc:	68bb      	ldr	r3, [r7, #8]
}
     4be:	4618      	mov	r0, r3
     4c0:	3718      	adds	r7, #24
     4c2:	46bd      	mov	sp, r7
     4c4:	bd80      	pop	{r7, pc}
     4c6:	bf00      	nop
     4c8:	12344321 	.word	0x12344321

000004cc <am_bootloader_check_index>:
//! @return return false if the bit corresponding to index is set.
//
//*****************************************************************************
bool
am_bootloader_check_index(uint32_t index, uint32_t *pMask)
{
     4cc:	b480      	push	{r7}
     4ce:	b085      	sub	sp, #20
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
     4d4:	6039      	str	r1, [r7, #0]
    uint32_t valid = *pMask;
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	681b      	ldr	r3, [r3, #0]
     4da:	60fb      	str	r3, [r7, #12]
    if (index > 31)
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	2b1f      	cmp	r3, #31
     4e0:	d901      	bls.n	4e6 <am_bootloader_check_index+0x1a>
    {
        return true;
     4e2:	2301      	movs	r3, #1
     4e4:	e00d      	b.n	502 <am_bootloader_check_index+0x36>
    }
    if (valid & (1 << (31 - index)))
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	f1c3 031f 	rsb	r3, r3, #31
     4ec:	2201      	movs	r2, #1
     4ee:	fa02 f303 	lsl.w	r3, r2, r3
     4f2:	461a      	mov	r2, r3
     4f4:	68fb      	ldr	r3, [r7, #12]
     4f6:	4013      	ands	r3, r2
     4f8:	2b00      	cmp	r3, #0
     4fa:	d001      	beq.n	500 <am_bootloader_check_index+0x34>
    {
        return false;
     4fc:	2300      	movs	r3, #0
     4fe:	e000      	b.n	502 <am_bootloader_check_index+0x36>
    }
    return true;
     500:	2301      	movs	r3, #1

}
     502:	4618      	mov	r0, r3
     504:	3714      	adds	r7, #20
     506:	46bd      	mov	sp, r7
     508:	f85d 7b04 	ldr.w	r7, [sp], #4
     50c:	4770      	bx	lr
	...

00000510 <am_bootloader_erase_flash_page>:
//! @return none
//
//*****************************************************************************
void
am_bootloader_erase_flash_page(uint32_t ui32Addr)
{
     510:	b580      	push	{r7, lr}
     512:	b086      	sub	sp, #24
     514:	af00      	add	r7, sp, #0
     516:	6078      	str	r0, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32CurrentPage, ui32CurrentBlock;
    //
    // Figure out what page and block we're working on.
    //
    ui32CurrentPage =  AM_HAL_FLASH_ADDR2PAGE(ui32Addr);
     518:	687b      	ldr	r3, [r7, #4]
     51a:	0adb      	lsrs	r3, r3, #11
     51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     520:	617b      	str	r3, [r7, #20]
    ui32CurrentBlock = AM_HAL_FLASH_ADDR2INST(ui32Addr);
     522:	687b      	ldr	r3, [r7, #4]
     524:	0c9b      	lsrs	r3, r3, #18
     526:	f003 0301 	and.w	r3, r3, #1
     52a:	613b      	str	r3, [r7, #16]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     52c:	f001 f8e6 	bl	16fc <am_hal_interrupt_master_disable>
     530:	60f8      	str	r0, [r7, #12]
    am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     532:	697a      	ldr	r2, [r7, #20]
     534:	6939      	ldr	r1, [r7, #16]
     536:	4805      	ldr	r0, [pc, #20]	; (54c <am_bootloader_erase_flash_page+0x3c>)
     538:	f001 f854 	bl	15e4 <am_hal_flash_page_erase>
                                ui32CurrentBlock, ui32CurrentPage);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     53c:	68f8      	ldr	r0, [r7, #12]
     53e:	f001 f8e1 	bl	1704 <am_hal_interrupt_master_set>
}
     542:	bf00      	nop
     544:	3718      	adds	r7, #24
     546:	46bd      	mov	sp, r7
     548:	bd80      	pop	{r7, pc}
     54a:	bf00      	nop
     54c:	12344321 	.word	0x12344321

00000550 <am_bootloader_program_flash_page>:
//
//*****************************************************************************
void
am_bootloader_program_flash_page(uint32_t ui32WriteAddr,
                                 uint32_t *pui32ReadAddr, uint32_t numBytes)
{
     550:	b580      	push	{r7, lr}
     552:	b086      	sub	sp, #24
     554:	af00      	add	r7, sp, #0
     556:	60f8      	str	r0, [r7, #12]
     558:	60b9      	str	r1, [r7, #8]
     55a:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32WordsInBuffer;

    am_bootloader_erase_flash_page(ui32WriteAddr);
     55c:	68f8      	ldr	r0, [r7, #12]
     55e:	f7ff ffd7 	bl	510 <am_bootloader_erase_flash_page>

    ui32WordsInBuffer = (numBytes + 3) / 4;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3303      	adds	r3, #3
     566:	089b      	lsrs	r3, r3, #2
     568:	617b      	str	r3, [r7, #20]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     56a:	f001 f8c7 	bl	16fc <am_hal_interrupt_master_disable>
     56e:	6138      	str	r0, [r7, #16]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     570:	68fa      	ldr	r2, [r7, #12]
     572:	697b      	ldr	r3, [r7, #20]
     574:	68b9      	ldr	r1, [r7, #8]
     576:	4805      	ldr	r0, [pc, #20]	; (58c <am_bootloader_program_flash_page+0x3c>)
     578:	f001 f838 	bl	15ec <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32WordsInBuffer);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     57c:	6938      	ldr	r0, [r7, #16]
     57e:	f001 f8c1 	bl	1704 <am_hal_interrupt_master_set>
}
     582:	bf00      	nop
     584:	3718      	adds	r7, #24
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}
     58a:	bf00      	nop
     58c:	12344321 	.word	0x12344321

00000590 <am_bootloader_image_run>:
//! @return The function does not return.
//
//*****************************************************************************
void
am_bootloader_image_run(am_bootloader_image_t *psImage)
{
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
    // The underlying boot sequence is a little different depeding on whether
    // the image was delivered as an encrypted image or as a cleartext image.
    // We will call the correct assembly routine based on what the image
    // structure tells us.
    //
    if ( psImage->bEncrypted )
     598:	687b      	ldr	r3, [r7, #4]
     59a:	69db      	ldr	r3, [r3, #28]
     59c:	2b00      	cmp	r3, #0
     59e:	d003      	beq.n	5a8 <am_bootloader_image_run+0x18>
    {
        am_bootloader_encrypted_image_run(psImage);
     5a0:	6878      	ldr	r0, [r7, #4]
     5a2:	f000 f808 	bl	5b6 <am_bootloader_encrypted_image_run>
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
    }
}
     5a6:	e002      	b.n	5ae <am_bootloader_image_run+0x1e>
        am_bootloader_clear_image_run(psImage);
     5a8:	6878      	ldr	r0, [r7, #4]
     5aa:	f000 f80f 	bl	5cc <am_bootloader_clear_image_run>
}
     5ae:	bf00      	nop
     5b0:	3708      	adds	r7, #8
     5b2:	46bd      	mov	sp, r7
     5b4:	bd80      	pop	{r7, pc}

000005b6 <am_bootloader_encrypted_image_run>:
am_bootloader_encrypted_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #20]");
     5b6:	6941      	ldr	r1, [r0, #20]
    __asm("    ldr     r2, [r0, #24]");
     5b8:	6982      	ldr	r2, [r0, #24]

    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     5ba:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     5bc:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     5c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     5c4:	6018      	str	r0, [r3, #0]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     5c6:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     5c8:	4710      	bx	r2
}
     5ca:	bf00      	nop

000005cc <am_bootloader_clear_image_run>:
am_bootloader_clear_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     5cc:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     5ce:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     5d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     5d6:	6018      	str	r0, [r3, #0]

    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #0]");
     5d8:	6801      	ldr	r1, [r0, #0]
    __asm("    ldr     r2, [r0, #4]");
     5da:	6842      	ldr	r2, [r0, #4]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     5dc:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     5de:	4710      	bx	r2
}
     5e0:	bf00      	nop
	...

000005e4 <check_flash_address_range>:

// Checks that the address does not overlap with bootloader or flag page
// It also checks that the address is inside the internal flash
static bool
check_flash_address_range(uint32_t address, uint32_t size)
{
     5e4:	b580      	push	{r7, lr}
     5e6:	b090      	sub	sp, #64	; 0x40
     5e8:	af00      	add	r7, sp, #0
     5ea:	6078      	str	r0, [r7, #4]
     5ec:	6039      	str	r1, [r7, #0]
    static uint32_t g_intFlashSize = 0;
    am_hal_mcuctrl_device_t sDevice;

    uint32_t ui32Start = address;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t ui32End = address + size - 1 ;
     5f2:	687a      	ldr	r2, [r7, #4]
     5f4:	683b      	ldr	r3, [r7, #0]
     5f6:	4413      	add	r3, r2
     5f8:	3b01      	subs	r3, #1
     5fa:	63bb      	str	r3, [r7, #56]	; 0x38

    if (g_intFlashSize == 0) // First call
     5fc:	4b19      	ldr	r3, [pc, #100]	; (664 <check_flash_address_range+0x80>)
     5fe:	681b      	ldr	r3, [r3, #0]
     600:	2b00      	cmp	r3, #0
     602:	d107      	bne.n	614 <check_flash_address_range+0x30>
    {
        // Get chip specific info
#if AM_APOLLO3_MCUCTRL
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
        am_hal_mcuctrl_device_info_get(&sDevice);
     604:	f107 0308 	add.w	r3, r7, #8
     608:	4618      	mov	r0, r3
     60a:	f001 f87f 	bl	170c <am_hal_mcuctrl_device_info_get>
#endif

        g_intFlashSize = sDevice.ui32FlashSize;
     60e:	6a3b      	ldr	r3, [r7, #32]
     610:	4a14      	ldr	r2, [pc, #80]	; (664 <check_flash_address_range+0x80>)
     612:	6013      	str	r3, [r2, #0]
    // Make sure the address is within flash.
    //
    //
    // Check to make sure address is not within bootloader program
    //
    if ( ui32Start < MAX_BOOTLOADER_SIZE )
     614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
     61a:	d201      	bcs.n	620 <check_flash_address_range+0x3c>
    {
        return false;
     61c:	2300      	movs	r3, #0
     61e:	e01d      	b.n	65c <check_flash_address_range+0x78>
    }
    // Check to make sure the address is not beyond the flash
    if (ui32End >= g_intFlashSize)
     620:	4b10      	ldr	r3, [pc, #64]	; (664 <check_flash_address_range+0x80>)
     622:	681b      	ldr	r3, [r3, #0]
     624:	6bba      	ldr	r2, [r7, #56]	; 0x38
     626:	429a      	cmp	r2, r3
     628:	d301      	bcc.n	62e <check_flash_address_range+0x4a>
    {
        return false;
     62a:	2300      	movs	r3, #0
     62c:	e016      	b.n	65c <check_flash_address_range+0x78>
    if ( USE_FLAG_PAGE )
    {
        //
        // Check to make sure address is not in the flag page
        //
        if ( (FLAG_PAGE_LOCATION == ui32Start) ||
     62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     634:	d00f      	beq.n	656 <check_flash_address_range+0x72>
     636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     63c:	d903      	bls.n	646 <check_flash_address_range+0x62>
             ((FLAG_PAGE_LOCATION < ui32Start) &&
     63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     640:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
     644:	d307      	bcc.n	656 <check_flash_address_range+0x72>
                ((FLAG_PAGE_LOCATION + AM_HAL_FLASH_PAGE_SIZE) > ui32Start)) ||
     646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     64c:	d205      	bcs.n	65a <check_flash_address_range+0x76>
            ((FLAG_PAGE_LOCATION > ui32Start) &&
     64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     654:	d301      	bcc.n	65a <check_flash_address_range+0x76>
                (FLAG_PAGE_LOCATION <= ui32End))
           )
        {
            return false;
     656:	2300      	movs	r3, #0
     658:	e000      	b.n	65c <check_flash_address_range+0x78>
        }
    }
    return true;
     65a:	2301      	movs	r3, #1
}
     65c:	4618      	mov	r0, r3
     65e:	3740      	adds	r7, #64	; 0x40
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	10001080 	.word	0x10001080

00000668 <wipe_sram>:
// Wipe Clean SRAM up to the specified address
// CAUTION!!!
// This will wipe the complete SRAM including stack of the caller
// This should be called as the last thing before calling reset
void wipe_sram(void)
{
     668:	b480      	push	{r7}
     66a:	af00      	add	r7, sp, #0
    //
    // Wipe SRAM (without using variables).
    //
    // Use the first SRAM location as temp
    // Last SRAM word = lastAddr = SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
     670:	4b0e      	ldr	r3, [pc, #56]	; (6ac <wipe_sram+0x44>)
     672:	695b      	ldr	r3, [r3, #20]
     674:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
     678:	3b04      	subs	r3, #4
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     67a:	6013      	str	r3, [r2, #0]

    // Can not use any local variables from now on
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     67c:	e00b      	b.n	696 <wipe_sram+0x2e>
    {
        *(*((volatile uint32_t **)(SRAM_BASEADDR))) = 0x0;
     67e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     682:	681b      	ldr	r3, [r3, #0]
     684:	2200      	movs	r2, #0
     686:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(SRAM_BASEADDR)) -= 4;
     688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     68c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     690:	681b      	ldr	r3, [r3, #0]
     692:	3b04      	subs	r3, #4
     694:	6013      	str	r3, [r2, #0]
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     6a0:	d1ed      	bne.n	67e <wipe_sram+0x16>
    }
}
     6a2:	bf00      	nop
     6a4:	46bd      	mov	sp, r7
     6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6aa:	4770      	bx	lr
     6ac:	10001060 	.word	0x10001060

000006b0 <program_image>:
#endif

// Programs the flash based on g_am_multiboot.pui32WriteAddress, g_am_multiboot.pui8RxBuffer & g_am_multiboot.ui32BytesInBuffer
void
program_image(uint32_t bEncrypted)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b086      	sub	sp, #24
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
    uint32_t ui32WriteAddr = (uint32_t)g_am_multiboot.pui32WriteAddress;
     6b8:	4b18      	ldr	r3, [pc, #96]	; (71c <program_image+0x6c>)
     6ba:	691b      	ldr	r3, [r3, #16]
     6bc:	617b      	str	r3, [r7, #20]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
     6be:	4b17      	ldr	r3, [pc, #92]	; (71c <program_image+0x6c>)
     6c0:	685b      	ldr	r3, [r3, #4]
     6c2:	613b      	str	r3, [r7, #16]
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;
     6c4:	4b15      	ldr	r3, [pc, #84]	; (71c <program_image+0x6c>)
     6c6:	689b      	ldr	r3, [r3, #8]
     6c8:	60fb      	str	r3, [r7, #12]

    if ( g_am_multiboot.bStoreInSRAM )
     6ca:	4b14      	ldr	r3, [pc, #80]	; (71c <program_image+0x6c>)
     6cc:	7b1b      	ldrb	r3, [r3, #12]
     6ce:	2b00      	cmp	r3, #0
     6d0:	d020      	beq.n	714 <program_image+0x64>
    {
        while ( ui32NumBytes )
     6d2:	e01a      	b.n	70a <program_image+0x5a>
        {
            am_bootloader_program_flash_page(ui32WriteAddr, pui32ReadAddr,
     6d4:	68fb      	ldr	r3, [r7, #12]
     6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     6da:	bf28      	it	cs
     6dc:	f44f 6300 	movcs.w	r3, #2048	; 0x800
     6e0:	461a      	mov	r2, r3
     6e2:	6939      	ldr	r1, [r7, #16]
     6e4:	6978      	ldr	r0, [r7, #20]
     6e6:	f7ff ff33 	bl	550 <am_bootloader_program_flash_page>
                (ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE) ? AM_HAL_FLASH_PAGE_SIZE: ui32NumBytes);
            if ( ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE )
     6ea:	68fb      	ldr	r3, [r7, #12]
     6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     6f0:	d90f      	bls.n	712 <program_image+0x62>
            {
                ui32NumBytes -= AM_HAL_FLASH_PAGE_SIZE;
     6f2:	68fb      	ldr	r3, [r7, #12]
     6f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     6f8:	60fb      	str	r3, [r7, #12]
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
     6fa:	697b      	ldr	r3, [r7, #20]
     6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
     700:	617b      	str	r3, [r7, #20]
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
     702:	693b      	ldr	r3, [r7, #16]
     704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
     708:	613b      	str	r3, [r7, #16]
        while ( ui32NumBytes )
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	2b00      	cmp	r3, #0
     70e:	d1e1      	bne.n	6d4 <program_image+0x24>
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     710:	e000      	b.n	714 <program_image+0x64>
                break;
     712:	bf00      	nop
}
     714:	bf00      	nop
     716:	3718      	adds	r7, #24
     718:	46bd      	mov	sp, r7
     71a:	bd80      	pop	{r7, pc}
     71c:	10001060 	.word	0x10001060

00000720 <am_multiboot_init>:
//! @return true if the parameters are acceptable.
//
//*****************************************************************************
bool
am_multiboot_init(uint32_t *pBuf, uint32_t bufSize)
{
     720:	b480      	push	{r7}
     722:	b085      	sub	sp, #20
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	6039      	str	r1, [r7, #0]
    bool ret = false;
     72a:	2300      	movs	r3, #0
     72c:	73fb      	strb	r3, [r7, #15]
    if (pBuf && (bufSize >= AM_HAL_FLASH_PAGE_SIZE))
     72e:	687b      	ldr	r3, [r7, #4]
     730:	2b00      	cmp	r3, #0
     732:	d008      	beq.n	746 <am_multiboot_init+0x26>
     734:	683b      	ldr	r3, [r7, #0]
     736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     73a:	d304      	bcc.n	746 <am_multiboot_init+0x26>
    {
        g_am_multiboot.pui32UserBuf = pBuf;
     73c:	4a05      	ldr	r2, [pc, #20]	; (754 <am_multiboot_init+0x34>)
     73e:	687b      	ldr	r3, [r7, #4]
     740:	6013      	str	r3, [r2, #0]
        ret = true;
     742:	2301      	movs	r3, #1
     744:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
     746:	7bfb      	ldrb	r3, [r7, #15]
}
     748:	4618      	mov	r0, r3
     74a:	3714      	adds	r7, #20
     74c:	46bd      	mov	sp, r7
     74e:	f85d 7b04 	ldr.w	r7, [sp], #4
     752:	4770      	bx	lr
     754:	10001060 	.word	0x10001060

00000758 <image_start_packet_read>:
//! @return true if the image parameters are acceptable.
//
//*****************************************************************************
bool
image_start_packet_read(am_bootloader_image_t *psImage, uint32_t *pui32Packet)
{
     758:	b580      	push	{r7, lr}
     75a:	b090      	sub	sp, #64	; 0x40
     75c:	af02      	add	r7, sp, #8
     75e:	6078      	str	r0, [r7, #4]
     760:	6039      	str	r1, [r7, #0]
    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     762:	f107 0308 	add.w	r3, r7, #8
     766:	4618      	mov	r0, r3
     768:	f000 ffd0 	bl	170c <am_hal_mcuctrl_device_info_get>

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = (uint32_t *)(pui32Packet[1]);
     76c:	683b      	ldr	r3, [r7, #0]
     76e:	3304      	adds	r3, #4
     770:	681b      	ldr	r3, [r3, #0]
     772:	461a      	mov	r2, r3
     774:	687b      	ldr	r3, [r7, #4]
     776:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pui32Packet[2];
     778:	683b      	ldr	r3, [r7, #0]
     77a:	689a      	ldr	r2, [r3, #8]
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pui32Packet[3];
     780:	683b      	ldr	r3, [r7, #0]
     782:	68da      	ldr	r2, [r3, #12]
     784:	687b      	ldr	r3, [r7, #4]
     786:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
     788:	687b      	ldr	r3, [r7, #4]
     78a:	2212      	movs	r2, #18
     78c:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
     78e:	687b      	ldr	r3, [r7, #4]
     790:	2200      	movs	r2, #0
     792:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
     794:	687b      	ldr	r3, [r7, #4]
     796:	2200      	movs	r2, #0
     798:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	2200      	movs	r2, #0
     79e:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	2200      	movs	r2, #0
     7a4:	619a      	str	r2, [r3, #24]

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)psImage->pui32LinkAddress,
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	461a      	mov	r2, r3
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	685b      	ldr	r3, [r3, #4]
     7b0:	4619      	mov	r1, r3
     7b2:	4610      	mov	r0, r2
     7b4:	f7ff ff16 	bl	5e4 <check_flash_address_range>
     7b8:	4603      	mov	r3, r0
     7ba:	f083 0301 	eor.w	r3, r3, #1
     7be:	b2db      	uxtb	r3, r3
     7c0:	2b00      	cmp	r3, #0
     7c2:	d001      	beq.n	7c8 <image_start_packet_read+0x70>
            psImage->ui32NumBytes))
    {
        return false;
     7c4:	2300      	movs	r3, #0
     7c6:	e042      	b.n	84e <image_start_packet_read+0xf6>
    }
    // Determine if we can gather image in SRAM completely before flashing all at once
    // This implementation uses the excess SRAM available in the system
    // CAUTION!!!: For this to work it is essential that the unused SRAM banks are
    // not powered down
    if ((sDevice.ui32SRAMSize - MAX_SRAM_USED) >= psImage->ui32NumBytes)
     7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7ca:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	685b      	ldr	r3, [r3, #4]
     7d2:	429a      	cmp	r2, r3
     7d4:	d309      	bcc.n	7ea <image_start_packet_read+0x92>
    {
        g_am_multiboot.bStoreInSRAM = 1;
     7d6:	4b20      	ldr	r3, [pc, #128]	; (858 <image_start_packet_read+0x100>)
     7d8:	2201      	movs	r2, #1
     7da:	731a      	strb	r2, [r3, #12]
        g_am_multiboot.pui8RxBuffer = (uint8_t *)(SRAM_BASEADDR + MAX_SRAM_USED);
     7dc:	4b1e      	ldr	r3, [pc, #120]	; (858 <image_start_packet_read+0x100>)
     7de:	4a1f      	ldr	r2, [pc, #124]	; (85c <image_start_packet_read+0x104>)
     7e0:	605a      	str	r2, [r3, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = sDevice.ui32SRAMSize;
     7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7e4:	4a1c      	ldr	r2, [pc, #112]	; (858 <image_start_packet_read+0x100>)
     7e6:	6153      	str	r3, [r2, #20]
     7e8:	e010      	b.n	80c <image_start_packet_read+0xb4>
#endif
    }
    else
    {
        g_am_multiboot.bStoreInSRAM = 0;
     7ea:	4b1b      	ldr	r3, [pc, #108]	; (858 <image_start_packet_read+0x100>)
     7ec:	2200      	movs	r2, #0
     7ee:	731a      	strb	r2, [r3, #12]
        if (g_am_multiboot.pui32UserBuf == NULL)
     7f0:	4b19      	ldr	r3, [pc, #100]	; (858 <image_start_packet_read+0x100>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	2b00      	cmp	r3, #0
     7f6:	d101      	bne.n	7fc <image_start_packet_read+0xa4>
        {
            return false;
     7f8:	2300      	movs	r3, #0
     7fa:	e028      	b.n	84e <image_start_packet_read+0xf6>
        }
        g_am_multiboot.pui8RxBuffer = (uint8_t *)g_am_multiboot.pui32UserBuf;
     7fc:	4b16      	ldr	r3, [pc, #88]	; (858 <image_start_packet_read+0x100>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	4a15      	ldr	r2, [pc, #84]	; (858 <image_start_packet_read+0x100>)
     802:	6053      	str	r3, [r2, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = MAX_SRAM_USED;
     804:	4b14      	ldr	r3, [pc, #80]	; (858 <image_start_packet_read+0x100>)
     806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     80a:	615a      	str	r2, [r3, #20]
#endif
    }

#ifdef MULTIBOOT_SECURE
    // Validate the security trailer & Initialize the security params
    if ( init_multiboot_secure(pui32Packet[4], &pui32Packet[5], g_am_multiboot.bStoreInSRAM,
     80c:	683b      	ldr	r3, [r7, #0]
     80e:	3310      	adds	r3, #16
     810:	6818      	ldr	r0, [r3, #0]
     812:	683b      	ldr	r3, [r7, #0]
     814:	f103 0114 	add.w	r1, r3, #20
     818:	4b0f      	ldr	r3, [pc, #60]	; (858 <image_start_packet_read+0x100>)
     81a:	7b1a      	ldrb	r2, [r3, #12]
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	331c      	adds	r3, #28
     820:	9300      	str	r3, [sp, #0]
     822:	687b      	ldr	r3, [r7, #4]
     824:	f000 fd96 	bl	1354 <init_multiboot_secure>
     828:	4603      	mov	r3, r0
     82a:	2b00      	cmp	r3, #0
     82c:	d001      	beq.n	832 <image_start_packet_read+0xda>
                               psImage, &psImage->bEncrypted) != 0 )
    {
        return false;
     82e:	2300      	movs	r3, #0
     830:	e00d      	b.n	84e <image_start_packet_read+0xf6>
#endif
    //
    // Otherwise, the image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
     832:	687b      	ldr	r3, [r7, #4]
     834:	681b      	ldr	r3, [r3, #0]
     836:	4a08      	ldr	r2, [pc, #32]	; (858 <image_start_packet_read+0x100>)
     838:	6113      	str	r3, [r2, #16]
    g_ui32BytesReceived = 0;
     83a:	4b09      	ldr	r3, [pc, #36]	; (860 <image_start_packet_read+0x108>)
     83c:	2200      	movs	r2, #0
     83e:	601a      	str	r2, [r3, #0]
    g_am_multiboot.ui32BytesInBuffer = 0;
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <image_start_packet_read+0x100>)
     842:	2200      	movs	r2, #0
     844:	609a      	str	r2, [r3, #8]
    g_ui32CRC = 0;
     846:	4b07      	ldr	r3, [pc, #28]	; (864 <image_start_packet_read+0x10c>)
     848:	2200      	movs	r2, #0
     84a:	601a      	str	r2, [r3, #0]
    return true;
     84c:	2301      	movs	r3, #1
}
     84e:	4618      	mov	r0, r3
     850:	3738      	adds	r7, #56	; 0x38
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	bf00      	nop
     858:	10001060 	.word	0x10001060
     85c:	10004000 	.word	0x10004000
     860:	10001078 	.word	0x10001078
     864:	1000107c 	.word	0x1000107c

00000868 <image_data_packet_read>:
//! @return None.
//
//*****************************************************************************
void
image_data_packet_read(uint8_t *pui8Src, uint32_t ui32Size)
{
     868:	b580      	push	{r7, lr}
     86a:	b084      	sub	sp, #16
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
     870:	6039      	str	r1, [r7, #0]
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
     872:	2300      	movs	r3, #0
     874:	60fb      	str	r3, [r7, #12]
     876:	e06b      	b.n	950 <image_data_packet_read+0xe8>
    {
        g_am_multiboot.pui8RxBuffer[g_am_multiboot.ui32BytesInBuffer] = *pui8Src++;
     878:	4b39      	ldr	r3, [pc, #228]	; (960 <image_data_packet_read+0xf8>)
     87a:	685a      	ldr	r2, [r3, #4]
     87c:	4b38      	ldr	r3, [pc, #224]	; (960 <image_data_packet_read+0xf8>)
     87e:	689b      	ldr	r3, [r3, #8]
     880:	441a      	add	r2, r3
     882:	687b      	ldr	r3, [r7, #4]
     884:	1c59      	adds	r1, r3, #1
     886:	6079      	str	r1, [r7, #4]
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	7013      	strb	r3, [r2, #0]

        //
        // Keep track of how much data we've copied into the SRAM buffer.
        //
        g_am_multiboot.ui32BytesInBuffer++;
     88c:	4b34      	ldr	r3, [pc, #208]	; (960 <image_data_packet_read+0xf8>)
     88e:	689b      	ldr	r3, [r3, #8]
     890:	3301      	adds	r3, #1
     892:	4a33      	ldr	r2, [pc, #204]	; (960 <image_data_packet_read+0xf8>)
     894:	6093      	str	r3, [r2, #8]
        g_ui32BytesReceived++;
     896:	4b33      	ldr	r3, [pc, #204]	; (964 <image_data_packet_read+0xfc>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	3301      	adds	r3, #1
     89c:	4a31      	ldr	r2, [pc, #196]	; (964 <image_data_packet_read+0xfc>)
     89e:	6013      	str	r3, [r2, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     8a0:	4b2f      	ldr	r3, [pc, #188]	; (960 <image_data_packet_read+0xf8>)
     8a2:	7b1b      	ldrb	r3, [r3, #12]
     8a4:	f083 0301 	eor.w	r3, r3, #1
     8a8:	b2db      	uxtb	r3, r3
     8aa:	2b00      	cmp	r3, #0
     8ac:	d004      	beq.n	8b8 <image_data_packet_read+0x50>
     8ae:	4b2c      	ldr	r3, [pc, #176]	; (960 <image_data_packet_read+0xf8>)
     8b0:	689b      	ldr	r3, [r3, #8]
     8b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     8b6:	d005      	beq.n	8c4 <image_data_packet_read+0x5c>
                 g_ui32BytesReceived == g_sImage.ui32NumBytes )
     8b8:	4b2b      	ldr	r3, [pc, #172]	; (968 <image_data_packet_read+0x100>)
     8ba:	685a      	ldr	r2, [r3, #4]
     8bc:	4b29      	ldr	r3, [pc, #164]	; (964 <image_data_packet_read+0xfc>)
     8be:	681b      	ldr	r3, [r3, #0]
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     8c0:	429a      	cmp	r2, r3
     8c2:	d142      	bne.n	94a <image_data_packet_read+0xe2>
        {
            //
            // Run a quick CRC on the received bytes, holding on to the result in a
            // global variable, so we can pick up where we left off on the next pass.
            //
            am_bootloader_partial_crc32(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer, &g_ui32CRC);
     8c4:	4b26      	ldr	r3, [pc, #152]	; (960 <image_data_packet_read+0xf8>)
     8c6:	6858      	ldr	r0, [r3, #4]
     8c8:	4b25      	ldr	r3, [pc, #148]	; (960 <image_data_packet_read+0xf8>)
     8ca:	689b      	ldr	r3, [r3, #8]
     8cc:	4a27      	ldr	r2, [pc, #156]	; (96c <image_data_packet_read+0x104>)
     8ce:	4619      	mov	r1, r3
     8d0:	f7ff fc04 	bl	dc <am_bootloader_partial_crc32>

#ifdef MULTIBOOT_SECURE
            // Decrypt in place
            multiboot_secure_decrypt(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     8d4:	4b22      	ldr	r3, [pc, #136]	; (960 <image_data_packet_read+0xf8>)
     8d6:	685a      	ldr	r2, [r3, #4]
     8d8:	4b21      	ldr	r3, [pc, #132]	; (960 <image_data_packet_read+0xf8>)
     8da:	689b      	ldr	r3, [r3, #8]
     8dc:	4619      	mov	r1, r3
     8de:	4610      	mov	r0, r2
     8e0:	f000 fdae 	bl	1440 <multiboot_secure_decrypt>
            //
            // If this is the first block of our new image, we need to record
            // the reset vector and stack pointer information for inclusion in
            // the flag page.
            //
            if ( g_am_multiboot.bStoreInSRAM || (g_ui32BytesReceived <= AM_HAL_FLASH_PAGE_SIZE) )
     8e4:	4b1e      	ldr	r3, [pc, #120]	; (960 <image_data_packet_read+0xf8>)
     8e6:	7b1b      	ldrb	r3, [r3, #12]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d104      	bne.n	8f6 <image_data_packet_read+0x8e>
     8ec:	4b1d      	ldr	r3, [pc, #116]	; (964 <image_data_packet_read+0xfc>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     8f4:	d80c      	bhi.n	910 <image_data_packet_read+0xa8>
            {
                g_sImage.pui32StackPointer = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[0]);
     8f6:	4b1a      	ldr	r3, [pc, #104]	; (960 <image_data_packet_read+0xf8>)
     8f8:	685b      	ldr	r3, [r3, #4]
     8fa:	681b      	ldr	r3, [r3, #0]
     8fc:	461a      	mov	r2, r3
     8fe:	4b1a      	ldr	r3, [pc, #104]	; (968 <image_data_packet_read+0x100>)
     900:	615a      	str	r2, [r3, #20]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
     902:	4b17      	ldr	r3, [pc, #92]	; (960 <image_data_packet_read+0xf8>)
     904:	685b      	ldr	r3, [r3, #4]
     906:	3304      	adds	r3, #4
     908:	681b      	ldr	r3, [r3, #0]
     90a:	461a      	mov	r2, r3
     90c:	4b16      	ldr	r3, [pc, #88]	; (968 <image_data_packet_read+0x100>)
     90e:	619a      	str	r2, [r3, #24]
            }

            if ( !g_am_multiboot.bStoreInSRAM )
     910:	4b13      	ldr	r3, [pc, #76]	; (960 <image_data_packet_read+0xf8>)
     912:	7b1b      	ldrb	r3, [r3, #12]
     914:	f083 0301 	eor.w	r3, r3, #1
     918:	b2db      	uxtb	r3, r3
     91a:	2b00      	cmp	r3, #0
     91c:	d015      	beq.n	94a <image_data_packet_read+0xe2>
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     91e:	4b10      	ldr	r3, [pc, #64]	; (960 <image_data_packet_read+0xf8>)
     920:	691b      	ldr	r3, [r3, #16]
     922:	4618      	mov	r0, r3
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     924:	4b0e      	ldr	r3, [pc, #56]	; (960 <image_data_packet_read+0xf8>)
     926:	6859      	ldr	r1, [r3, #4]
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     928:	4b0d      	ldr	r3, [pc, #52]	; (960 <image_data_packet_read+0xf8>)
     92a:	689b      	ldr	r3, [r3, #8]
     92c:	461a      	mov	r2, r3
     92e:	f7ff fe0f 	bl	550 <am_bootloader_program_flash_page>
                //
                // Adjust the global variables.
                //
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
     932:	4b0b      	ldr	r3, [pc, #44]	; (960 <image_data_packet_read+0xf8>)
     934:	691a      	ldr	r2, [r3, #16]
     936:	4b0a      	ldr	r3, [pc, #40]	; (960 <image_data_packet_read+0xf8>)
     938:	689b      	ldr	r3, [r3, #8]
     93a:	f023 0303 	bic.w	r3, r3, #3
     93e:	4413      	add	r3, r2
     940:	4a07      	ldr	r2, [pc, #28]	; (960 <image_data_packet_read+0xf8>)
     942:	6113      	str	r3, [r2, #16]
                g_am_multiboot.ui32BytesInBuffer = 0;
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <image_data_packet_read+0xf8>)
     946:	2200      	movs	r2, #0
     948:	609a      	str	r2, [r3, #8]
    for ( i = 0; i < ui32Size; i++ )
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	3301      	adds	r3, #1
     94e:	60fb      	str	r3, [r7, #12]
     950:	68fa      	ldr	r2, [r7, #12]
     952:	683b      	ldr	r3, [r7, #0]
     954:	429a      	cmp	r2, r3
     956:	d38f      	bcc.n	878 <image_data_packet_read+0x10>
            }
        }
    }
}
     958:	bf00      	nop
     95a:	3710      	adds	r7, #16
     95c:	46bd      	mov	sp, r7
     95e:	bd80      	pop	{r7, pc}
     960:	10001060 	.word	0x10001060
     964:	10001078 	.word	0x10001078
     968:	10001000 	.word	0x10001000
     96c:	1000107c 	.word	0x1000107c

00000970 <am_multiboot_check_boot_from_flash>:
//! @return true if it's okay to boot from flash (returns the image structure).
//
//*****************************************************************************
bool
am_multiboot_check_boot_from_flash(bool *pbOverride, am_bootloader_image_t **ppsImage)
{
     970:	b580      	push	{r7, lr}
     972:	b084      	sub	sp, #16
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
     978:	6039      	str	r1, [r7, #0]
    bool bValid = false;
     97a:	2300      	movs	r3, #0
     97c:	73fb      	strb	r3, [r7, #15]
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
        ( am_bootloader_validate_structure((uint32_t *)g_psBootImage, sizeof(*g_psBootImage)) ))
     97e:	4b22      	ldr	r3, [pc, #136]	; (a08 <am_multiboot_check_boot_from_flash+0x98>)
     980:	681b      	ldr	r3, [r3, #0]
     982:	2124      	movs	r1, #36	; 0x24
     984:	4618      	mov	r0, r3
     986:	f7ff fd4b 	bl	420 <am_bootloader_validate_structure>
     98a:	4603      	mov	r3, r0
    if ( USE_FLAG_PAGE &&
     98c:	2b00      	cmp	r3, #0
     98e:	d01d      	beq.n	9cc <am_multiboot_check_boot_from_flash+0x5c>
        //
        // Check the flag page (including the stored CRC) and the override pin
        // to make sure we have a valid image and the host isn't requesting an
        // upgrade.
        //
        if (am_hal_bootloader_override_check(g_psBootImage))
     990:	4b1d      	ldr	r3, [pc, #116]	; (a08 <am_multiboot_check_boot_from_flash+0x98>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	4618      	mov	r0, r3
     996:	f7ff fc29 	bl	1ec <am_hal_bootloader_override_check>
     99a:	4603      	mov	r3, r0
     99c:	2b00      	cmp	r3, #0
     99e:	d003      	beq.n	9a8 <am_multiboot_check_boot_from_flash+0x38>
        {
            *pbOverride = true;
     9a0:	687b      	ldr	r3, [r7, #4]
     9a2:	2201      	movs	r2, #1
     9a4:	701a      	strb	r2, [r3, #0]
     9a6:	e029      	b.n	9fc <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	2200      	movs	r2, #0
     9ac:	701a      	strb	r2, [r3, #0]
            if ( am_bootloader_flash_check(g_psBootImage) )
     9ae:	4b16      	ldr	r3, [pc, #88]	; (a08 <am_multiboot_check_boot_from_flash+0x98>)
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	4618      	mov	r0, r3
     9b4:	f7ff fbc4 	bl	140 <am_bootloader_flash_check>
     9b8:	4603      	mov	r3, r0
     9ba:	2b00      	cmp	r3, #0
     9bc:	d01e      	beq.n	9fc <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = g_psBootImage;
     9be:	4b12      	ldr	r3, [pc, #72]	; (a08 <am_multiboot_check_boot_from_flash+0x98>)
     9c0:	681a      	ldr	r2, [r3, #0]
     9c2:	683b      	ldr	r3, [r7, #0]
     9c4:	601a      	str	r2, [r3, #0]
                bValid = true;
     9c6:	2301      	movs	r3, #1
     9c8:	73fb      	strb	r3, [r7, #15]
     9ca:	e017      	b.n	9fc <am_multiboot_check_boot_from_flash+0x8c>
        //
        // Check the override pin to make sure the host isn't requesting an
        // upgrade, and do a quick check to make sure an image actually exists
        // at the default application location.
        //
        if (am_hal_bootloader_override_check(&g_sImage))
     9cc:	480f      	ldr	r0, [pc, #60]	; (a0c <am_multiboot_check_boot_from_flash+0x9c>)
     9ce:	f7ff fc0d 	bl	1ec <am_hal_bootloader_override_check>
     9d2:	4603      	mov	r3, r0
     9d4:	2b00      	cmp	r3, #0
     9d6:	d003      	beq.n	9e0 <am_multiboot_check_boot_from_flash+0x70>
        {
            *pbOverride = true;
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	2201      	movs	r2, #1
     9dc:	701a      	strb	r2, [r3, #0]
     9de:	e00d      	b.n	9fc <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	2200      	movs	r2, #0
     9e4:	701a      	strb	r2, [r3, #0]
            if ( *(g_sImage.pui32LinkAddress) != 0xFFFFFFFF)
     9e6:	4b09      	ldr	r3, [pc, #36]	; (a0c <am_multiboot_check_boot_from_flash+0x9c>)
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
     9f0:	d004      	beq.n	9fc <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = &g_sImage;
     9f2:	683b      	ldr	r3, [r7, #0]
     9f4:	4a05      	ldr	r2, [pc, #20]	; (a0c <am_multiboot_check_boot_from_flash+0x9c>)
     9f6:	601a      	str	r2, [r3, #0]
                bValid = true;
     9f8:	2301      	movs	r3, #1
     9fa:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return bValid;
     9fc:	7bfb      	ldrb	r3, [r7, #15]
}
     9fe:	4618      	mov	r0, r3
     a00:	3710      	adds	r7, #16
     a02:	46bd      	mov	sp, r7
     a04:	bd80      	pop	{r7, pc}
     a06:	bf00      	nop
     a08:	10001024 	.word	0x10001024
     a0c:	10001000 	.word	0x10001000

00000a10 <ser_out>:
volatile bool g_bUartImageValid = false;

//
void
ser_out(uint32_t ui32Module, unsigned char data)
{
     a10:	b480      	push	{r7}
     a12:	b083      	sub	sp, #12
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
     a18:	460b      	mov	r3, r1
     a1a:	70fb      	strb	r3, [r7, #3]
    AM_REGn(UART, ui32Module, DR) = data;
     a1c:	4a07      	ldr	r2, [pc, #28]	; (a3c <ser_out+0x2c>)
     a1e:	78fb      	ldrb	r3, [r7, #3]
     a20:	6013      	str	r3, [r2, #0]
    while ( AM_BFRn(UART, ui32Module, FR, TXFF) );
     a22:	bf00      	nop
     a24:	4b06      	ldr	r3, [pc, #24]	; (a40 <ser_out+0x30>)
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	f003 0320 	and.w	r3, r3, #32
     a2c:	2b00      	cmp	r3, #0
     a2e:	d1f9      	bne.n	a24 <ser_out+0x14>
}
     a30:	bf00      	nop
     a32:	370c      	adds	r7, #12
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr
     a3c:	4001c000 	.word	0x4001c000
     a40:	4001c018 	.word	0x4001c018

00000a44 <am_multiboot_setup_serial>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_serial(int32_t i32Module, uint32_t ui32BaudRate)
{
     a44:	b580      	push	{r7, lr}
     a46:	b084      	sub	sp, #16
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	6039      	str	r1, [r7, #0]
    uint32_t uartInt = AM_HAL_INTERRUPT_UART;
     a4e:	231b      	movs	r3, #27
     a50:	60fb      	str	r3, [r7, #12]
    command = 0;
     a52:	4b1e      	ldr	r3, [pc, #120]	; (acc <am_multiboot_setup_serial+0x88>)
     a54:	2200      	movs	r2, #0
     a56:	601a      	str	r2, [r3, #0]
    uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     a58:	2300      	movs	r3, #0
     a5a:	4a1d      	ldr	r2, [pc, #116]	; (ad0 <am_multiboot_setup_serial+0x8c>)
     a5c:	6013      	str	r3, [r2, #0]
     a5e:	4a1d      	ldr	r2, [pc, #116]	; (ad4 <am_multiboot_setup_serial+0x90>)
     a60:	6013      	str	r3, [r2, #0]
     a62:	4a1d      	ldr	r2, [pc, #116]	; (ad8 <am_multiboot_setup_serial+0x94>)
     a64:	6013      	str	r3, [r2, #0]
    RX_FIFO_FULL = 0;  // check serial FIFO operation
     a66:	4b1d      	ldr	r3, [pc, #116]	; (adc <am_multiboot_setup_serial+0x98>)
     a68:	2200      	movs	r2, #0
     a6a:	701a      	strb	r2, [r3, #0]
    RX_FIFO_EMPTY = 1;
     a6c:	4b1c      	ldr	r3, [pc, #112]	; (ae0 <am_multiboot_setup_serial+0x9c>)
     a6e:	2201      	movs	r2, #1
     a70:	701a      	strb	r2, [r3, #0]
    packet_cnt = 0xff;
     a72:	4b1c      	ldr	r3, [pc, #112]	; (ae4 <am_multiboot_setup_serial+0xa0>)
     a74:	22ff      	movs	r2, #255	; 0xff
     a76:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	4618      	mov	r0, r3
     a7c:	f000 ff80 	bl	1980 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	4618      	mov	r0, r3
     a84:	f000 ff72 	bl	196c <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    g_sUartConfig.ui32BaudRate = ui32BaudRate;
     a88:	4a17      	ldr	r2, [pc, #92]	; (ae8 <am_multiboot_setup_serial+0xa4>)
     a8a:	683b      	ldr	r3, [r7, #0]
     a8c:	6013      	str	r3, [r2, #0]
    am_hal_uart_config(i32Module, &g_sUartConfig);
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	4915      	ldr	r1, [pc, #84]	; (ae8 <am_multiboot_setup_serial+0xa4>)
     a92:	4618      	mov	r0, r3
     a94:	f000 ff12 	bl	18bc <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
   am_hal_uart_fifo_config(i32Module,
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	211b      	movs	r1, #27
     a9c:	4618      	mov	r0, r3
     a9e:	f000 ff83 	bl	19a8 <am_hal_uart_fifo_config>

//    am_util_delay_ms(100);
    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	4618      	mov	r0, r3
     aa6:	f000 ff57 	bl	1958 <am_hal_uart_enable>

    am_hal_uart_int_clear(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	2150      	movs	r1, #80	; 0x50
     aae:	4618      	mov	r0, r3
     ab0:	f000 ff44 	bl	193c <am_hal_uart_int_clear>
    am_hal_uart_int_enable(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	2150      	movs	r1, #80	; 0x50
     ab8:	4618      	mov	r0, r3
     aba:	f000 ff45 	bl	1948 <am_hal_uart_int_enable>
    if (i32Module == 1)
    {
        uartInt = AM_HAL_INTERRUPT_UART1;
    }
#endif
    am_hal_interrupt_enable(uartInt);
     abe:	68f8      	ldr	r0, [r7, #12]
     ac0:	f000 fdc8 	bl	1654 <am_hal_interrupt_enable>
}
     ac4:	bf00      	nop
     ac6:	3710      	adds	r7, #16
     ac8:	46bd      	mov	sp, r7
     aca:	bd80      	pop	{r7, pc}
     acc:	100010c8 	.word	0x100010c8
     ad0:	100010a8 	.word	0x100010a8
     ad4:	100010c0 	.word	0x100010c0
     ad8:	100010b0 	.word	0x100010b0
     adc:	100010d4 	.word	0x100010d4
     ae0:	100010bd 	.word	0x100010bd
     ae4:	100010ac 	.word	0x100010ac
     ae8:	10001028 	.word	0x10001028

00000aec <am_multiboot_uart_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_uart_isr_handler(uint32_t ui32Module)
{
     aec:	b580      	push	{r7, lr}
     aee:	b088      	sub	sp, #32
     af0:	af00      	add	r7, sp, #0
     af2:	6078      	str	r0, [r7, #4]
    uint32_t *rx_pui32Packet;
    unsigned char send_byte_cnt, flush = 0;
     af4:	2300      	movs	r3, #0
     af6:	77bb      	strb	r3, [r7, #30]
    uint32_t cnt = 0;
     af8:	2300      	movs	r3, #0
     afa:	61bb      	str	r3, [r7, #24]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_uart_int_status_get(ui32Module, false);
     afc:	2100      	movs	r1, #0
     afe:	6878      	ldr	r0, [r7, #4]
     b00:	f000 ff10 	bl	1924 <am_hal_uart_int_status_get>
     b04:	6178      	str	r0, [r7, #20]
    am_hal_uart_int_clear(ui32Module, ui32Status);
     b06:	6979      	ldr	r1, [r7, #20]
     b08:	6878      	ldr	r0, [r7, #4]
     b0a:	f000 ff17 	bl	193c <am_hal_uart_int_clear>
    //
    // Service the uart FIFO.
    //


    RX_FIFO_EMPTY = 0;
     b0e:	4ba4      	ldr	r3, [pc, #656]	; (da0 <am_multiboot_uart_isr_handler+0x2b4>)
     b10:	2200      	movs	r2, #0
     b12:	701a      	strb	r2, [r3, #0]
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     b14:	e168      	b.n	de8 <am_multiboot_uart_isr_handler+0x2fc>
    {
        if ( uart_RX_head == MAX_BUFFER )
     b16:	4ba3      	ldr	r3, [pc, #652]	; (da4 <am_multiboot_uart_isr_handler+0x2b8>)
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
     b1e:	d10c      	bne.n	b3a <am_multiboot_uart_isr_handler+0x4e>
        {
            // We should never reach here!
            RX_FIFO_FULL = 1;
     b20:	4ba1      	ldr	r3, [pc, #644]	; (da8 <am_multiboot_uart_isr_handler+0x2bc>)
     b22:	2201      	movs	r2, #1
     b24:	701a      	strb	r2, [r3, #0]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     b26:	4ba1      	ldr	r3, [pc, #644]	; (dac <am_multiboot_uart_isr_handler+0x2c0>)
     b28:	60bb      	str	r3, [r7, #8]
            //
            // Bad packet; Send back an error.
            //
            tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	2205      	movs	r2, #5
     b2e:	601a      	str	r2, [r3, #0]
            flush = 1;
     b30:	2301      	movs	r3, #1
     b32:	77bb      	strb	r3, [r7, #30]
            send_byte_cnt = 4;
     b34:	2304      	movs	r3, #4
     b36:	77fb      	strb	r3, [r7, #31]
            break;
     b38:	e15d      	b.n	df6 <am_multiboot_uart_isr_handler+0x30a>
        }
        rxData = AM_REGn(UART, ui32Module, DR);
     b3a:	4b9d      	ldr	r3, [pc, #628]	; (db0 <am_multiboot_uart_isr_handler+0x2c4>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	74fb      	strb	r3, [r7, #19]
        uart_RX_buffer[uart_RX_head++] = rxData;
     b40:	4b98      	ldr	r3, [pc, #608]	; (da4 <am_multiboot_uart_isr_handler+0x2b8>)
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	1c5a      	adds	r2, r3, #1
     b46:	4997      	ldr	r1, [pc, #604]	; (da4 <am_multiboot_uart_isr_handler+0x2b8>)
     b48:	600a      	str	r2, [r1, #0]
     b4a:	499a      	ldr	r1, [pc, #616]	; (db4 <am_multiboot_uart_isr_handler+0x2c8>)
     b4c:	7cfa      	ldrb	r2, [r7, #19]
     b4e:	54ca      	strb	r2, [r1, r3]

        uart_RX_cnt++;
     b50:	4b99      	ldr	r3, [pc, #612]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	3301      	adds	r3, #1
     b56:	4a98      	ldr	r2, [pc, #608]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     b58:	6013      	str	r3, [r2, #0]
        cnt++;
     b5a:	69bb      	ldr	r3, [r7, #24]
     b5c:	3301      	adds	r3, #1
     b5e:	61bb      	str	r3, [r7, #24]

        if ( uart_RX_cnt == 4 ) // cmd received, wait for parameters
     b60:	4b95      	ldr	r3, [pc, #596]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	2b04      	cmp	r3, #4
     b66:	d13e      	bne.n	be6 <am_multiboot_uart_isr_handler+0xfa>
        {
            command = uart_RX_buffer[0];
     b68:	4b92      	ldr	r3, [pc, #584]	; (db4 <am_multiboot_uart_isr_handler+0x2c8>)
     b6a:	781b      	ldrb	r3, [r3, #0]
     b6c:	b2db      	uxtb	r3, r3
     b6e:	461a      	mov	r2, r3
     b70:	4b92      	ldr	r3, [pc, #584]	; (dbc <am_multiboot_uart_isr_handler+0x2d0>)
     b72:	601a      	str	r2, [r3, #0]
            switch (command)
     b74:	4b91      	ldr	r3, [pc, #580]	; (dbc <am_multiboot_uart_isr_handler+0x2d0>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	2b09      	cmp	r3, #9
     b7a:	d82f      	bhi.n	bdc <am_multiboot_uart_isr_handler+0xf0>
     b7c:	a201      	add	r2, pc, #4	; (adr r2, b84 <am_multiboot_uart_isr_handler+0x98>)
     b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b82:	bf00      	nop
     b84:	00000bc5 	.word	0x00000bc5
     b88:	00000bcd 	.word	0x00000bcd
     b8c:	00000be5 	.word	0x00000be5
     b90:	00000be5 	.word	0x00000be5
     b94:	00000bb5 	.word	0x00000bb5
     b98:	00000bad 	.word	0x00000bad
     b9c:	00000bbd 	.word	0x00000bbd
     ba0:	00000bdd 	.word	0x00000bdd
     ba4:	00000bdd 	.word	0x00000bdd
     ba8:	00000bd5 	.word	0x00000bd5
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
#endif
                    break;
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
     bac:	4b84      	ldr	r3, [pc, #528]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bae:	220c      	movs	r2, #12
     bb0:	601a      	str	r2, [r3, #0]
                    break;
     bb2:	e018      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
                case AM_BOOTLOADER_RESET:
                    packet_cnt = 4;
     bb4:	4b82      	ldr	r3, [pc, #520]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bb6:	2204      	movs	r2, #4
     bb8:	601a      	str	r2, [r3, #0]
                    break;
     bba:	e014      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                case AM_BOOTLOADER_BL_VERSION_CMD:
                    packet_cnt = 4;
     bbc:	4b80      	ldr	r3, [pc, #512]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bbe:	2204      	movs	r2, #4
     bc0:	601a      	str	r2, [r3, #0]
                    break;
     bc2:	e010      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                case AM_BOOTLOADER_ACK_CMD:
                    packet_cnt = 4;
     bc4:	4b7e      	ldr	r3, [pc, #504]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bc6:	2204      	movs	r2, #4
     bc8:	601a      	str	r2, [r3, #0]
                    break;
     bca:	e00c      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                case AM_BOOTLOADER_NAK_CMD:
                    packet_cnt = 4;
     bcc:	4b7c      	ldr	r3, [pc, #496]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bce:	2204      	movs	r2, #4
     bd0:	601a      	str	r2, [r3, #0]
                    break;
     bd2:	e008      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                case AM_BOOTLOADER_RESTART:
                    packet_cnt = 4;
     bd4:	4b7a      	ldr	r3, [pc, #488]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bd6:	2204      	movs	r2, #4
     bd8:	601a      	str	r2, [r3, #0]
                    break;
     bda:	e004      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                default:
                    // Unknown command
                    packet_cnt = 4;
     bdc:	4b78      	ldr	r3, [pc, #480]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     bde:	2204      	movs	r2, #4
     be0:	601a      	str	r2, [r3, #0]
                    break;
     be2:	e000      	b.n	be6 <am_multiboot_uart_isr_handler+0xfa>
                    break;
     be4:	bf00      	nop
            }
        }

        if ( (command == AM_BOOTLOADER_NEW_PACKET) && (uart_RX_cnt == 8) )
     be6:	4b75      	ldr	r3, [pc, #468]	; (dbc <am_multiboot_uart_isr_handler+0x2d0>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	2b03      	cmp	r3, #3
     bec:	d10c      	bne.n	c08 <am_multiboot_uart_isr_handler+0x11c>
     bee:	4b72      	ldr	r3, [pc, #456]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	2b08      	cmp	r3, #8
     bf4:	d108      	bne.n	c08 <am_multiboot_uart_isr_handler+0x11c>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[4]);
     bf6:	4b73      	ldr	r3, [pc, #460]	; (dc4 <am_multiboot_uart_isr_handler+0x2d8>)
     bf8:	681b      	ldr	r3, [r3, #0]
     bfa:	4a73      	ldr	r2, [pc, #460]	; (dc8 <am_multiboot_uart_isr_handler+0x2dc>)
     bfc:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 8;
     bfe:	4b72      	ldr	r3, [pc, #456]	; (dc8 <am_multiboot_uart_isr_handler+0x2dc>)
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	3308      	adds	r3, #8
     c04:	4a6e      	ldr	r2, [pc, #440]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     c06:	6013      	str	r3, [r2, #0]
        }

#ifdef MULTIBOOT_SECURE
        if ( (command == AM_BOOTLOADER_NEW_IMAGE) && (uart_RX_cnt == 20) )
     c08:	4b6c      	ldr	r3, [pc, #432]	; (dbc <am_multiboot_uart_isr_handler+0x2d0>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	2b02      	cmp	r3, #2
     c0e:	d10c      	bne.n	c2a <am_multiboot_uart_isr_handler+0x13e>
     c10:	4b69      	ldr	r3, [pc, #420]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	2b14      	cmp	r3, #20
     c16:	d108      	bne.n	c2a <am_multiboot_uart_isr_handler+0x13e>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[16]);
     c18:	4b6c      	ldr	r3, [pc, #432]	; (dcc <am_multiboot_uart_isr_handler+0x2e0>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	4a6a      	ldr	r2, [pc, #424]	; (dc8 <am_multiboot_uart_isr_handler+0x2dc>)
     c1e:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 20;
     c20:	4b69      	ldr	r3, [pc, #420]	; (dc8 <am_multiboot_uart_isr_handler+0x2dc>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	3314      	adds	r3, #20
     c26:	4a66      	ldr	r2, [pc, #408]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     c28:	6013      	str	r3, [r2, #0]
        }
#endif

        if ( (uart_RX_cnt >= 4) && (uart_RX_cnt == packet_cnt) )
     c2a:	4b63      	ldr	r3, [pc, #396]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	2b03      	cmp	r3, #3
     c30:	f240 80da 	bls.w	de8 <am_multiboot_uart_isr_handler+0x2fc>
     c34:	4b60      	ldr	r3, [pc, #384]	; (db8 <am_multiboot_uart_isr_handler+0x2cc>)
     c36:	681a      	ldr	r2, [r3, #0]
     c38:	4b61      	ldr	r3, [pc, #388]	; (dc0 <am_multiboot_uart_isr_handler+0x2d4>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	429a      	cmp	r2, r3
     c3e:	f040 80d3 	bne.w	de8 <am_multiboot_uart_isr_handler+0x2fc>
        {
            rx_pui32Packet = (uint32_t *) uart_RX_buffer;
     c42:	4b5c      	ldr	r3, [pc, #368]	; (db4 <am_multiboot_uart_isr_handler+0x2c8>)
     c44:	60fb      	str	r3, [r7, #12]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     c46:	4b59      	ldr	r3, [pc, #356]	; (dac <am_multiboot_uart_isr_handler+0x2c0>)
     c48:	60bb      	str	r3, [r7, #8]

            switch (rx_pui32Packet[0])
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	2b09      	cmp	r3, #9
     c50:	f200 809b 	bhi.w	d8a <am_multiboot_uart_isr_handler+0x29e>
     c54:	a201      	add	r2, pc, #4	; (adr r2, c5c <am_multiboot_uart_isr_handler+0x170>)
     c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c5a:	bf00      	nop
     c5c:	00000d9b 	.word	0x00000d9b
     c60:	00000d9b 	.word	0x00000d9b
     c64:	00000c85 	.word	0x00000c85
     c68:	00000cd7 	.word	0x00000cd7
     c6c:	00000d5f 	.word	0x00000d5f
     c70:	00000cb7 	.word	0x00000cb7
     c74:	00000d73 	.word	0x00000d73
     c78:	00000d8b 	.word	0x00000d8b
     c7c:	00000d8b 	.word	0x00000d8b
     c80:	00000d6d 	.word	0x00000d6d
                case AM_BOOTLOADER_NEW_IMAGE:
                    //
                    // Parse the image packet, and store the result to the global
                    // image structure.
                    //
                    g_bUartImageValid = image_start_packet_read(&g_sImage,
     c84:	494b      	ldr	r1, [pc, #300]	; (db4 <am_multiboot_uart_isr_handler+0x2c8>)
     c86:	4852      	ldr	r0, [pc, #328]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     c88:	f7ff fd66 	bl	758 <image_start_packet_read>
     c8c:	4603      	mov	r3, r0
     c8e:	461a      	mov	r2, r3
     c90:	4b50      	ldr	r3, [pc, #320]	; (dd4 <am_multiboot_uart_isr_handler+0x2e8>)
     c92:	701a      	strb	r2, [r3, #0]

                    //
                    // Make sure the image packet had reasonable contents. If it
                    // didn't, we need to let the host know.
                    //
                    if ( g_bUartImageValid )
     c94:	4b4f      	ldr	r3, [pc, #316]	; (dd4 <am_multiboot_uart_isr_handler+0x2e8>)
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	b2db      	uxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d003      	beq.n	ca6 <am_multiboot_uart_isr_handler+0x1ba>
                    {
                        //
                        // Good image; Send back a "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	2202      	movs	r2, #2
     ca2:	601a      	str	r2, [r3, #0]
     ca4:	e002      	b.n	cac <am_multiboot_uart_isr_handler+0x1c0>
                    else
                    {
                        //
                        // Bad image; Send back an error.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	2205      	movs	r2, #5
     caa:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     cac:	2301      	movs	r3, #1
     cae:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     cb0:	2304      	movs	r3, #4
     cb2:	77fb      	strb	r3, [r7, #31]
                    break;
     cb4:	e072      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    //
                    // Set the override GPIO settings based on the packet
                    // information.
                    //
                    g_sImage.ui32OverrideGPIO = rx_pui32Packet[1];
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	685b      	ldr	r3, [r3, #4]
     cba:	4a45      	ldr	r2, [pc, #276]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     cbc:	60d3      	str	r3, [r2, #12]
                    g_sImage.ui32OverridePolarity = rx_pui32Packet[2];
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	689b      	ldr	r3, [r3, #8]
     cc2:	4a43      	ldr	r2, [pc, #268]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     cc4:	6113      	str	r3, [r2, #16]

                    //
                    // Send back a "READY" packet.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     cc6:	68bb      	ldr	r3, [r7, #8]
     cc8:	2202      	movs	r2, #2
     cca:	601a      	str	r2, [r3, #0]
                    flush = 1;
     ccc:	2301      	movs	r3, #1
     cce:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     cd0:	2304      	movs	r3, #4
     cd2:	77fb      	strb	r3, [r7, #31]
                    break;
     cd4:	e062      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>

                case AM_BOOTLOADER_NEW_PACKET:
                    //
                    // Only take new packets if our image structure is valid.
                    //
                    if ( !g_bUartImageValid )
     cd6:	4b3f      	ldr	r3, [pc, #252]	; (dd4 <am_multiboot_uart_isr_handler+0x2e8>)
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	b2db      	uxtb	r3, r3
     cdc:	f083 0301 	eor.w	r3, r3, #1
     ce0:	b2db      	uxtb	r3, r3
     ce2:	2b00      	cmp	r3, #0
     ce4:	d003      	beq.n	cee <am_multiboot_uart_isr_handler+0x202>
                    {
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	2205      	movs	r2, #5
     cea:	601a      	str	r2, [r3, #0]
                        break;
     cec:	e056      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     cee:	4a3a      	ldr	r2, [pc, #232]	; (dd8 <am_multiboot_uart_isr_handler+0x2ec>)
                        *((uint32_t *)(uart_RX_buffer + 4)));
     cf0:	4b34      	ldr	r3, [pc, #208]	; (dc4 <am_multiboot_uart_isr_handler+0x2d8>)
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	4619      	mov	r1, r3
     cf6:	4610      	mov	r0, r2
     cf8:	f7ff fdb6 	bl	868 <image_data_packet_read>

                    //
                    // If this packet completed the image...
                    //
                    if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
     cfc:	4b34      	ldr	r3, [pc, #208]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     cfe:	685a      	ldr	r2, [r3, #4]
     d00:	4b36      	ldr	r3, [pc, #216]	; (ddc <am_multiboot_uart_isr_handler+0x2f0>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	429a      	cmp	r2, r3
     d06:	d122      	bne.n	d4e <am_multiboot_uart_isr_handler+0x262>
                    {
#ifdef MULTIBOOT_SECURE
                        if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
     d08:	4b31      	ldr	r3, [pc, #196]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     d0a:	689a      	ldr	r2, [r3, #8]
     d0c:	4b34      	ldr	r3, [pc, #208]	; (de0 <am_multiboot_uart_isr_handler+0x2f4>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	429a      	cmp	r2, r3
     d12:	d105      	bne.n	d20 <am_multiboot_uart_isr_handler+0x234>
     d14:	4833      	ldr	r0, [pc, #204]	; (de4 <am_multiboot_uart_isr_handler+0x2f8>)
     d16:	f000 fbb9 	bl	148c <multiboot_secure_verify>
     d1a:	4603      	mov	r3, r0
     d1c:	2b00      	cmp	r3, #0
     d1e:	d003      	beq.n	d28 <am_multiboot_uart_isr_handler+0x23c>
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	2204      	movs	r2, #4
     d24:	601a      	str	r2, [r3, #0]
     d26:	e015      	b.n	d54 <am_multiboot_uart_isr_handler+0x268>
#endif
                        else
                        {
                            // Protect (and optionally write if stored in SRAM)
                            // image in flash now as it has been validated now
                            program_image(g_sImage.bEncrypted);
     d28:	4b29      	ldr	r3, [pc, #164]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     d2a:	69db      	ldr	r3, [r3, #28]
     d2c:	4618      	mov	r0, r3
     d2e:	f7ff fcbf 	bl	6b0 <program_image>
                            // Validate the flash contents of a boot image to make
                            // sure it's safe to run
                            if ( am_bootloader_flash_check(&g_sImage) )
     d32:	4827      	ldr	r0, [pc, #156]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     d34:	f7ff fa04 	bl	140 <am_bootloader_flash_check>
     d38:	4603      	mov	r3, r0
     d3a:	2b00      	cmp	r3, #0
     d3c:	d003      	beq.n	d46 <am_multiboot_uart_isr_handler+0x25a>
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
     d3e:	68bb      	ldr	r3, [r7, #8]
     d40:	2203      	movs	r2, #3
     d42:	601a      	str	r2, [r3, #0]
     d44:	e006      	b.n	d54 <am_multiboot_uart_isr_handler+0x268>
                            }
                            else
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     d46:	68bb      	ldr	r3, [r7, #8]
     d48:	2205      	movs	r2, #5
     d4a:	601a      	str	r2, [r3, #0]
     d4c:	e002      	b.n	d54 <am_multiboot_uart_isr_handler+0x268>
                    {
                        //
                        // If this wasn't the end of the image, just send back a
                        // "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     d4e:	68bb      	ldr	r3, [r7, #8]
     d50:	2202      	movs	r2, #2
     d52:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     d54:	2301      	movs	r3, #1
     d56:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     d58:	2304      	movs	r3, #4
     d5a:	77fb      	strb	r3, [r7, #31]

                    break;
     d5c:	e01e      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>
                    if ( USE_FLAG_PAGE )
                    {
                        //
                        // Write the flag page.
                        //
                        am_bootloader_flag_page_update(&g_sImage,
     d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     d62:	481b      	ldr	r0, [pc, #108]	; (dd0 <am_multiboot_uart_isr_handler+0x2e4>)
     d64:	f7ff fb7e 	bl	464 <am_bootloader_flag_page_update>
                            (uint32_t *)FLAG_PAGE_LOCATION);
                    }
#ifdef MULTIBOOT_SECURE
                    wipe_sram();
     d68:	f7ff fc7e 	bl	668 <wipe_sram>
                    // Perform a software reset.
                    //
#if AM_APOLLO3_RESET
                    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI);
#else
                    am_hal_reset_poi();
     d6c:	f000 fd58 	bl	1820 <am_hal_reset_poi>
#endif

                    //
                    // Wait for the reset to take effect.
                    //
                    while (1);
     d70:	e7fe      	b.n	d70 <am_multiboot_uart_isr_handler+0x284>

                case AM_BOOTLOADER_BL_VERSION_CMD:
                    //
                    // Respond with the version number.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	2206      	movs	r2, #6
     d76:	601a      	str	r2, [r3, #0]
                    tx_pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
     d78:	68bb      	ldr	r3, [r7, #8]
     d7a:	3304      	adds	r3, #4
     d7c:	2201      	movs	r2, #1
     d7e:	601a      	str	r2, [r3, #0]

                    flush = 1;
     d80:	2301      	movs	r3, #1
     d82:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 8;
     d84:	2308      	movs	r3, #8
     d86:	77fb      	strb	r3, [r7, #31]
                    break;
     d88:	e008      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>
                case AM_BOOTLOADER_NAK_CMD:
                    break;

                default:
                    // Error
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     d8a:	68bb      	ldr	r3, [r7, #8]
     d8c:	2205      	movs	r2, #5
     d8e:	601a      	str	r2, [r3, #0]
                    flush = 1;
     d90:	2301      	movs	r3, #1
     d92:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     d94:	2304      	movs	r3, #4
     d96:	77fb      	strb	r3, [r7, #31]
                    break;
     d98:	e000      	b.n	d9c <am_multiboot_uart_isr_handler+0x2b0>
                    break;
     d9a:	bf00      	nop
            }
            break;
     d9c:	e02b      	b.n	df6 <am_multiboot_uart_isr_handler+0x30a>
     d9e:	bf00      	nop
     da0:	100010bd 	.word	0x100010bd
     da4:	100010b0 	.word	0x100010b0
     da8:	100010d4 	.word	0x100010d4
     dac:	100010b4 	.word	0x100010b4
     db0:	4001c000 	.word	0x4001c000
     db4:	100010d8 	.word	0x100010d8
     db8:	100010a8 	.word	0x100010a8
     dbc:	100010c8 	.word	0x100010c8
     dc0:	100010ac 	.word	0x100010ac
     dc4:	100010dc 	.word	0x100010dc
     dc8:	100012e0 	.word	0x100012e0
     dcc:	100010e8 	.word	0x100010e8
     dd0:	10001000 	.word	0x10001000
     dd4:	10001084 	.word	0x10001084
     dd8:	100010e0 	.word	0x100010e0
     ddc:	10001078 	.word	0x10001078
     de0:	1000107c 	.word	0x1000107c
     de4:	10001008 	.word	0x10001008
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     de8:	4b1f      	ldr	r3, [pc, #124]	; (e68 <am_multiboot_uart_isr_handler+0x37c>)
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	f003 0310 	and.w	r3, r3, #16
     df0:	2b00      	cmp	r3, #0
     df2:	f43f ae90 	beq.w	b16 <am_multiboot_uart_isr_handler+0x2a>
        }
    }

    if ( flush )
     df6:	7fbb      	ldrb	r3, [r7, #30]
     df8:	2b00      	cmp	r3, #0
     dfa:	d030      	beq.n	e5e <am_multiboot_uart_isr_handler+0x372>
    {
        uart_TX_tail = 0;
     dfc:	4b1b      	ldr	r3, [pc, #108]	; (e6c <am_multiboot_uart_isr_handler+0x380>)
     dfe:	2200      	movs	r2, #0
     e00:	701a      	strb	r2, [r3, #0]

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     e02:	2300      	movs	r3, #0
     e04:	61bb      	str	r3, [r7, #24]
     e06:	e00f      	b.n	e28 <am_multiboot_uart_isr_handler+0x33c>
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
     e08:	4b18      	ldr	r3, [pc, #96]	; (e6c <am_multiboot_uart_isr_handler+0x380>)
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	1c5a      	adds	r2, r3, #1
     e0e:	b2d1      	uxtb	r1, r2
     e10:	4a16      	ldr	r2, [pc, #88]	; (e6c <am_multiboot_uart_isr_handler+0x380>)
     e12:	7011      	strb	r1, [r2, #0]
     e14:	461a      	mov	r2, r3
     e16:	4b16      	ldr	r3, [pc, #88]	; (e70 <am_multiboot_uart_isr_handler+0x384>)
     e18:	5c9b      	ldrb	r3, [r3, r2]
     e1a:	4619      	mov	r1, r3
     e1c:	6878      	ldr	r0, [r7, #4]
     e1e:	f7ff fdf7 	bl	a10 <ser_out>
        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     e22:	69bb      	ldr	r3, [r7, #24]
     e24:	3301      	adds	r3, #1
     e26:	61bb      	str	r3, [r7, #24]
     e28:	7ffa      	ldrb	r2, [r7, #31]
     e2a:	69bb      	ldr	r3, [r7, #24]
     e2c:	429a      	cmp	r2, r3
     e2e:	d8eb      	bhi.n	e08 <am_multiboot_uart_isr_handler+0x31c>
        }
        command = 0;
     e30:	4b10      	ldr	r3, [pc, #64]	; (e74 <am_multiboot_uart_isr_handler+0x388>)
     e32:	2200      	movs	r2, #0
     e34:	601a      	str	r2, [r3, #0]
        uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     e36:	2300      	movs	r3, #0
     e38:	4a0f      	ldr	r2, [pc, #60]	; (e78 <am_multiboot_uart_isr_handler+0x38c>)
     e3a:	6013      	str	r3, [r2, #0]
     e3c:	4a0f      	ldr	r2, [pc, #60]	; (e7c <am_multiboot_uart_isr_handler+0x390>)
     e3e:	6013      	str	r3, [r2, #0]
     e40:	4a0f      	ldr	r2, [pc, #60]	; (e80 <am_multiboot_uart_isr_handler+0x394>)
     e42:	6013      	str	r3, [r2, #0]
        RX_FIFO_FULL = 0;  // check serial FIFO operation
     e44:	4b0f      	ldr	r3, [pc, #60]	; (e84 <am_multiboot_uart_isr_handler+0x398>)
     e46:	2200      	movs	r2, #0
     e48:	701a      	strb	r2, [r3, #0]
        RX_FIFO_EMPTY = 1;
     e4a:	4b0f      	ldr	r3, [pc, #60]	; (e88 <am_multiboot_uart_isr_handler+0x39c>)
     e4c:	2201      	movs	r2, #1
     e4e:	701a      	strb	r2, [r3, #0]
        flush = 0;
     e50:	2300      	movs	r3, #0
     e52:	77bb      	strb	r3, [r7, #30]
        send_byte_cnt = 0;
     e54:	2300      	movs	r3, #0
     e56:	77fb      	strb	r3, [r7, #31]
        packet_cnt = 0xff;
     e58:	4b0c      	ldr	r3, [pc, #48]	; (e8c <am_multiboot_uart_isr_handler+0x3a0>)
     e5a:	22ff      	movs	r2, #255	; 0xff
     e5c:	601a      	str	r2, [r3, #0]
    }

}
     e5e:	bf00      	nop
     e60:	3720      	adds	r7, #32
     e62:	46bd      	mov	sp, r7
     e64:	bd80      	pop	{r7, pc}
     e66:	bf00      	nop
     e68:	4001c018 	.word	0x4001c018
     e6c:	100012e4 	.word	0x100012e4
     e70:	100010b4 	.word	0x100010b4
     e74:	100010c8 	.word	0x100010c8
     e78:	100010a8 	.word	0x100010a8
     e7c:	100010c0 	.word	0x100010c0
     e80:	100010b0 	.word	0x100010b0
     e84:	100010d4 	.word	0x100010d4
     e88:	100010bd 	.word	0x100010bd
     e8c:	100010ac 	.word	0x100010ac

00000e90 <am_multiboot_uart_detect_baudrate>:
//!
//! @return the computed baud rate.
//
//*****************************************************************************
uint32_t am_multiboot_uart_detect_baudrate(uint32_t ui32RxPin)
{
     e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     e94:	b087      	sub	sp, #28
     e96:	af00      	add	r7, sp, #0
     e98:	6078      	str	r0, [r7, #4]
    // We need to hit this register as early as possible, so we are skipping
    // all of the normal logic that checks to make sure we are responding to
    // the right GPIO. In the interest of time, we will just assume that this
    // interrupt is coming from the UART RX pin.
    //
    ui32Start = am_hal_systick_count();
     e9a:	f000 fd09 	bl	18b0 <am_hal_systick_count>
     e9e:	6178      	str	r0, [r7, #20]
    // Wait for exactly 9 edges on the UART RX pin. This corresponds to the
    // number of edges in the byte 0x55 after the start bit. Using a simple
    // polling approach here gives us the best possible chance to catch every
    // single edge.
    //
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     ea0:	bf00      	nop
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	08db      	lsrs	r3, r3, #3
     ea6:	f003 0204 	and.w	r2, r3, #4
     eaa:	4b6c      	ldr	r3, [pc, #432]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     eac:	4413      	add	r3, r2
     eae:	681a      	ldr	r2, [r3, #0]
     eb0:	687b      	ldr	r3, [r7, #4]
     eb2:	f003 031f 	and.w	r3, r3, #31
     eb6:	fa22 f303 	lsr.w	r3, r2, r3
     eba:	f003 0301 	and.w	r3, r3, #1
     ebe:	2b00      	cmp	r3, #0
     ec0:	d0ef      	beq.n	ea2 <am_multiboot_uart_detect_baudrate+0x12>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     ec2:	bf00      	nop
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	08db      	lsrs	r3, r3, #3
     ec8:	f003 0204 	and.w	r2, r3, #4
     ecc:	4b63      	ldr	r3, [pc, #396]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     ece:	4413      	add	r3, r2
     ed0:	681a      	ldr	r2, [r3, #0]
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	f003 031f 	and.w	r3, r3, #31
     ed8:	fa22 f303 	lsr.w	r3, r2, r3
     edc:	f003 0301 	and.w	r3, r3, #1
     ee0:	2b00      	cmp	r3, #0
     ee2:	d1ef      	bne.n	ec4 <am_multiboot_uart_detect_baudrate+0x34>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     ee4:	bf00      	nop
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	08db      	lsrs	r3, r3, #3
     eea:	f003 0204 	and.w	r2, r3, #4
     eee:	4b5b      	ldr	r3, [pc, #364]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     ef0:	4413      	add	r3, r2
     ef2:	681a      	ldr	r2, [r3, #0]
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	f003 031f 	and.w	r3, r3, #31
     efa:	fa22 f303 	lsr.w	r3, r2, r3
     efe:	f003 0301 	and.w	r3, r3, #1
     f02:	2b00      	cmp	r3, #0
     f04:	d0ef      	beq.n	ee6 <am_multiboot_uart_detect_baudrate+0x56>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     f06:	bf00      	nop
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	08db      	lsrs	r3, r3, #3
     f0c:	f003 0204 	and.w	r2, r3, #4
     f10:	4b52      	ldr	r3, [pc, #328]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     f12:	4413      	add	r3, r2
     f14:	681a      	ldr	r2, [r3, #0]
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	f003 031f 	and.w	r3, r3, #31
     f1c:	fa22 f303 	lsr.w	r3, r2, r3
     f20:	f003 0301 	and.w	r3, r3, #1
     f24:	2b00      	cmp	r3, #0
     f26:	d1ef      	bne.n	f08 <am_multiboot_uart_detect_baudrate+0x78>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     f28:	bf00      	nop
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	08db      	lsrs	r3, r3, #3
     f2e:	f003 0204 	and.w	r2, r3, #4
     f32:	4b4a      	ldr	r3, [pc, #296]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     f34:	4413      	add	r3, r2
     f36:	681a      	ldr	r2, [r3, #0]
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	f003 031f 	and.w	r3, r3, #31
     f3e:	fa22 f303 	lsr.w	r3, r2, r3
     f42:	f003 0301 	and.w	r3, r3, #1
     f46:	2b00      	cmp	r3, #0
     f48:	d0ef      	beq.n	f2a <am_multiboot_uart_detect_baudrate+0x9a>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     f4a:	bf00      	nop
     f4c:	687b      	ldr	r3, [r7, #4]
     f4e:	08db      	lsrs	r3, r3, #3
     f50:	f003 0204 	and.w	r2, r3, #4
     f54:	4b41      	ldr	r3, [pc, #260]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     f56:	4413      	add	r3, r2
     f58:	681a      	ldr	r2, [r3, #0]
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	f003 031f 	and.w	r3, r3, #31
     f60:	fa22 f303 	lsr.w	r3, r2, r3
     f64:	f003 0301 	and.w	r3, r3, #1
     f68:	2b00      	cmp	r3, #0
     f6a:	d1ef      	bne.n	f4c <am_multiboot_uart_detect_baudrate+0xbc>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     f6c:	bf00      	nop
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	08db      	lsrs	r3, r3, #3
     f72:	f003 0204 	and.w	r2, r3, #4
     f76:	4b39      	ldr	r3, [pc, #228]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     f78:	4413      	add	r3, r2
     f7a:	681a      	ldr	r2, [r3, #0]
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	f003 031f 	and.w	r3, r3, #31
     f82:	fa22 f303 	lsr.w	r3, r2, r3
     f86:	f003 0301 	and.w	r3, r3, #1
     f8a:	2b00      	cmp	r3, #0
     f8c:	d0ef      	beq.n	f6e <am_multiboot_uart_detect_baudrate+0xde>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     f8e:	bf00      	nop
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	08db      	lsrs	r3, r3, #3
     f94:	f003 0204 	and.w	r2, r3, #4
     f98:	4b30      	ldr	r3, [pc, #192]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     f9a:	4413      	add	r3, r2
     f9c:	681a      	ldr	r2, [r3, #0]
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	f003 031f 	and.w	r3, r3, #31
     fa4:	fa22 f303 	lsr.w	r3, r2, r3
     fa8:	f003 0301 	and.w	r3, r3, #1
     fac:	2b00      	cmp	r3, #0
     fae:	d1ef      	bne.n	f90 <am_multiboot_uart_detect_baudrate+0x100>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     fb0:	bf00      	nop
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	08db      	lsrs	r3, r3, #3
     fb6:	f003 0204 	and.w	r2, r3, #4
     fba:	4b28      	ldr	r3, [pc, #160]	; (105c <am_multiboot_uart_detect_baudrate+0x1cc>)
     fbc:	4413      	add	r3, r2
     fbe:	681a      	ldr	r2, [r3, #0]
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	f003 031f 	and.w	r3, r3, #31
     fc6:	fa22 f303 	lsr.w	r3, r2, r3
     fca:	f003 0301 	and.w	r3, r3, #1
     fce:	2b00      	cmp	r3, #0
     fd0:	d0ef      	beq.n	fb2 <am_multiboot_uart_detect_baudrate+0x122>

    //
    // Record the "end" time.
    //
    ui32End = am_hal_systick_count();
     fd2:	f000 fc6d 	bl	18b0 <am_hal_systick_count>
     fd6:	6138      	str	r0, [r7, #16]
    am_hal_systick_stop();
     fd8:	f000 fc5c 	bl	1894 <am_hal_systick_stop>
    // At this point, the timing-critical portion of the interrupt handler is
    // complete, and we are free to clean up our interrupt status. We only
    // intend to perform the automatic baud-rate detection once, so we will go
    // ahead and disable the interrupt on the UART RX pin now.
    //
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(ui32RxPin));
     fdc:	f04f 0201 	mov.w	r2, #1
     fe0:	f04f 0300 	mov.w	r3, #0
     fe4:	6879      	ldr	r1, [r7, #4]
     fe6:	f1a1 0620 	sub.w	r6, r1, #32
     fea:	f1c1 0020 	rsb	r0, r1, #32
     fee:	fa03 f901 	lsl.w	r9, r3, r1
     ff2:	fa02 f606 	lsl.w	r6, r2, r6
     ff6:	ea49 0906 	orr.w	r9, r9, r6
     ffa:	fa22 f000 	lsr.w	r0, r2, r0
     ffe:	ea49 0900 	orr.w	r9, r9, r0
    1002:	fa02 f801 	lsl.w	r8, r2, r1
    1006:	4640      	mov	r0, r8
    1008:	4649      	mov	r1, r9
    100a:	f000 fb07 	bl	161c <am_hal_gpio_int_disable>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(ui32RxPin));
    100e:	f04f 0201 	mov.w	r2, #1
    1012:	f04f 0300 	mov.w	r3, #0
    1016:	6879      	ldr	r1, [r7, #4]
    1018:	f1a1 0620 	sub.w	r6, r1, #32
    101c:	f1c1 0020 	rsb	r0, r1, #32
    1020:	fa03 f501 	lsl.w	r5, r3, r1
    1024:	fa02 f606 	lsl.w	r6, r2, r6
    1028:	4335      	orrs	r5, r6
    102a:	fa22 f000 	lsr.w	r0, r2, r0
    102e:	4305      	orrs	r5, r0
    1030:	fa02 f401 	lsl.w	r4, r2, r1
    1034:	4620      	mov	r0, r4
    1036:	4629      	mov	r1, r5
    1038:	f000 fb02 	bl	1640 <am_hal_gpio_int_clear>
    // Check to see how long those nine edges took to arrive. This should
    // correspond to exactly nine bit-times of UART traffic from the host. From
    // there, we can use the speed of the processor (which is known) to
    // calculate the host's baud rate.
    //
    ui32Counts = ui32Start - ui32End;
    103c:	697a      	ldr	r2, [r7, #20]
    103e:	693b      	ldr	r3, [r7, #16]
    1040:	1ad3      	subs	r3, r2, r3
    1042:	60fb      	str	r3, [r7, #12]
    ui32BaudRate = AM_HAL_CLKGEN_FREQ_MAX_HZ * 9 / ui32Counts;
    1044:	4a06      	ldr	r2, [pc, #24]	; (1060 <am_multiboot_uart_detect_baudrate+0x1d0>)
    1046:	68fb      	ldr	r3, [r7, #12]
    1048:	fbb2 f3f3 	udiv	r3, r2, r3
    104c:	60bb      	str	r3, [r7, #8]
    return ui32BaudRate;
    104e:	68bb      	ldr	r3, [r7, #8]
}
    1050:	4618      	mov	r0, r3
    1052:	371c      	adds	r7, #28
    1054:	46bd      	mov	sp, r7
    1056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    105a:	bf00      	nop
    105c:	40010080 	.word	0x40010080
    1060:	0cdfe600 	.word	0x0cdfe600

00001064 <am_gpio_isr>:
// Setting up a GPIO ISR for the UART autobaud feature.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    1064:	b580      	push	{r7, lr}
    1066:	b082      	sub	sp, #8
    1068:	af00      	add	r7, sp, #0
    uint32_t ui32BaudRate;

    ui32BaudRate = am_multiboot_uart_detect_baudrate(AM_BSP_GPIO_BOOTLOADER_UART_RX);
    106a:	2024      	movs	r0, #36	; 0x24
    106c:	f7ff ff10 	bl	e90 <am_multiboot_uart_detect_baudrate>
    1070:	6078      	str	r0, [r7, #4]

    //
    // Now that we have a baud rate, we can configure our UART.
    //
    am_multiboot_setup_serial(AM_BSP_UART_BOOTLOADER_INST, ui32BaudRate);
    1072:	6879      	ldr	r1, [r7, #4]
    1074:	2000      	movs	r0, #0
    1076:	f7ff fce5 	bl	a44 <am_multiboot_setup_serial>
    //
    // Send a '0x55' to give the boot host some indication that we have the
    // correct baud rate and to let it know that our UART is ready for further
    // traffic.
    //
    am_hal_uart_char_transmit_polled(AM_BSP_UART_BOOTLOADER_INST, 0x55);
    107a:	2155      	movs	r1, #85	; 0x55
    107c:	2000      	movs	r0, #0
    107e:	f000 fc9f 	bl	19c0 <am_hal_uart_char_transmit_polled>
    g_bUartConfigured = true;
    1082:	4b03      	ldr	r3, [pc, #12]	; (1090 <am_gpio_isr+0x2c>)
    1084:	2201      	movs	r2, #1
    1086:	701a      	strb	r2, [r3, #0]
}
    1088:	bf00      	nop
    108a:	3708      	adds	r7, #8
    108c:	46bd      	mov	sp, r7
    108e:	bd80      	pop	{r7, pc}
    1090:	10001085 	.word	0x10001085

00001094 <am_uart_isr>:
#if (AM_BSP_UART_BOOTLOADER_INST == 0)
am_uart_isr(void)
#elif (AM_BSP_UART_BOOTLOADER_INST == 1)
am_uart1_isr(void)
#endif
{
    1094:	b580      	push	{r7, lr}
    1096:	af00      	add	r7, sp, #0
    am_multiboot_uart_isr_handler(AM_BSP_UART_BOOTLOADER_INST);
    1098:	2000      	movs	r0, #0
    109a:	f7ff fd27 	bl	aec <am_multiboot_uart_isr_handler>
}
    109e:	bf00      	nop
    10a0:	bd80      	pop	{r7, pc}
	...

000010a4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b084      	sub	sp, #16
    10a8:	af00      	add	r7, sp, #0
    am_bootloader_image_t *pBootImage;
    bool bOverride = false;
    10aa:	2300      	movs	r3, #0
    10ac:	70fb      	strb	r3, [r7, #3]
    bool bBootFromFlash = false;
    10ae:	2300      	movs	r3, #0
    10b0:	73fb      	strb	r3, [r7, #15]
    //
    am_hal_gpio_out_bit_set(MULTIBOOT_IOS_INTERRUPT_PIN);
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_OUTPUT);
#endif

    bBootFromFlash = am_multiboot_check_boot_from_flash(&bOverride, &pBootImage);
    10b2:	1d3a      	adds	r2, r7, #4
    10b4:	1cfb      	adds	r3, r7, #3
    10b6:	4611      	mov	r1, r2
    10b8:	4618      	mov	r0, r3
    10ba:	f7ff fc59 	bl	970 <am_multiboot_check_boot_from_flash>
    10be:	4603      	mov	r3, r0
    10c0:	73fb      	strb	r3, [r7, #15]
    if (!bOverride)
    10c2:	78fb      	ldrb	r3, [r7, #3]
    10c4:	f083 0301 	eor.w	r3, r3, #1
    10c8:	b2db      	uxtb	r3, r3
    10ca:	2b00      	cmp	r3, #0
    10cc:	d006      	beq.n	10dc <main+0x38>
    {
        if (bBootFromFlash)
    10ce:	7bfb      	ldrb	r3, [r7, #15]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d003      	beq.n	10dc <main+0x38>
            //
            // If everything looks good, disable the interrupt pin and run.
            //
            am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
#endif
            am_bootloader_image_run(pBootImage);
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	4618      	mov	r0, r3
    10d8:	f7ff fa5a 	bl	590 <am_bootloader_image_run>
    }
    //
    // If we get here, we're going to try to download a new image from a host
    // processor. Speed up the clocks and start turning on peripherals.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    10dc:	2000      	movs	r0, #0
    10de:	f000 fa5b 	bl	1598 <am_hal_clkgen_sysclk_select>
    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    10e2:	f000 fa47 	bl	1574 <am_bsp_low_power_init>

    //
    // Provide temp buffer for multiboot to operate on
    //
    am_multiboot_init(sramTempBuf, sizeof(sramTempBuf));
    10e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    10ea:	4843      	ldr	r0, [pc, #268]	; (11f8 <main+0x154>)
    10ec:	f7ff fb18 	bl	720 <am_multiboot_init>
#ifdef AM_MULTIBOOT_SUPPORT_UART
#ifdef MULTIBOOT_DETECT_BAUDRATE
    //
    // Re-Start systick to measure time for autobaud and for the IOS timeout.
    //
    am_hal_systick_stop();
    10f0:	f000 fbd0 	bl	1894 <am_hal_systick_stop>
    am_hal_systick_load(0x00FFFFFF);
    10f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    10f8:	f000 fbd4 	bl	18a4 <am_hal_systick_load>
    am_hal_systick_start();
    10fc:	f000 fbc2 	bl	1884 <am_hal_systick_start>

    //
    // Configure our RX pin as a GPIO input with a falling edge interrupt.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_INPUT);
    1100:	4b3e      	ldr	r3, [pc, #248]	; (11fc <main+0x158>)
    1102:	2273      	movs	r2, #115	; 0x73
    1104:	601a      	str	r2, [r3, #0]
    1106:	4a3e      	ldr	r2, [pc, #248]	; (1200 <main+0x15c>)
    1108:	4b3d      	ldr	r3, [pc, #244]	; (1200 <main+0x15c>)
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1110:	6013      	str	r3, [r2, #0]
    1112:	4a3c      	ldr	r2, [pc, #240]	; (1204 <main+0x160>)
    1114:	4b3b      	ldr	r3, [pc, #236]	; (1204 <main+0x160>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    111c:	f043 031a 	orr.w	r3, r3, #26
    1120:	6013      	str	r3, [r2, #0]
    1122:	4b36      	ldr	r3, [pc, #216]	; (11fc <main+0x158>)
    1124:	2200      	movs	r2, #0
    1126:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_FALLING);
    1128:	4b34      	ldr	r3, [pc, #208]	; (11fc <main+0x158>)
    112a:	2273      	movs	r2, #115	; 0x73
    112c:	601a      	str	r2, [r3, #0]
    112e:	4a34      	ldr	r2, [pc, #208]	; (1200 <main+0x15c>)
    1130:	4b33      	ldr	r3, [pc, #204]	; (1200 <main+0x15c>)
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1138:	6013      	str	r3, [r2, #0]
    113a:	4b30      	ldr	r3, [pc, #192]	; (11fc <main+0x158>)
    113c:	2200      	movs	r2, #0
    113e:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1140:	f04f 0000 	mov.w	r0, #0
    1144:	f04f 0110 	mov.w	r1, #16
    1148:	f000 fa7a 	bl	1640 <am_hal_gpio_int_clear>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    114c:	f04f 0000 	mov.w	r0, #0
    1150:	f04f 0110 	mov.w	r1, #16
    1154:	f000 fa52 	bl	15fc <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    1158:	2019      	movs	r0, #25
    115a:	f000 fa7b 	bl	1654 <am_hal_interrupt_enable>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    115e:	f000 fac9 	bl	16f4 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    1162:	f000 facb 	bl	16fc <am_hal_interrupt_master_disable>
    1166:	60b8      	str	r0, [r7, #8]

        if (!g_bUartConfigured)
    1168:	4b27      	ldr	r3, [pc, #156]	; (1208 <main+0x164>)
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	b2db      	uxtb	r3, r3
    116e:	f083 0301 	eor.w	r3, r3, #1
    1172:	b2db      	uxtb	r3, r3
    1174:	2b00      	cmp	r3, #0
    1176:	d006      	beq.n	1186 <main+0xe2>
        {
            // Wait for Baud rate detection
            am_hal_sysctrl_sleep(false);
    1178:	2000      	movs	r0, #0
    117a:	f000 fb6d 	bl	1858 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    117e:	68b8      	ldr	r0, [r7, #8]
    1180:	f000 fac0 	bl	1704 <am_hal_interrupt_master_set>
    1184:	e7ed      	b.n	1162 <main+0xbe>
        else
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    1186:	68b8      	ldr	r0, [r7, #8]
    1188:	f000 fabc 	bl	1704 <am_hal_interrupt_master_set>
            break;
    118c:	bf00      	nop
        }
    }
    // ISR has already configured the UART by now
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    118e:	f04f 0000 	mov.w	r0, #0
    1192:	f04f 0110 	mov.w	r1, #16
    1196:	f000 fa41 	bl	161c <am_hal_gpio_int_disable>
    am_hal_interrupt_disable(AM_HAL_INTERRUPT_GPIO);
    119a:	2019      	movs	r0, #25
    119c:	f000 fa82 	bl	16a4 <am_hal_interrupt_disable>
#endif

    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_TX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_TX);
    11a0:	4b16      	ldr	r3, [pc, #88]	; (11fc <main+0x158>)
    11a2:	2273      	movs	r2, #115	; 0x73
    11a4:	601a      	str	r2, [r3, #0]
    11a6:	4a16      	ldr	r2, [pc, #88]	; (1200 <main+0x15c>)
    11a8:	4b15      	ldr	r3, [pc, #84]	; (1200 <main+0x15c>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    11b0:	6013      	str	r3, [r2, #0]
    11b2:	4a16      	ldr	r2, [pc, #88]	; (120c <main+0x168>)
    11b4:	4b15      	ldr	r3, [pc, #84]	; (120c <main+0x168>)
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    11bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    11c0:	6013      	str	r3, [r2, #0]
    11c2:	4b0e      	ldr	r3, [pc, #56]	; (11fc <main+0x158>)
    11c4:	2200      	movs	r2, #0
    11c6:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_RX);
    11c8:	4b0c      	ldr	r3, [pc, #48]	; (11fc <main+0x158>)
    11ca:	2273      	movs	r2, #115	; 0x73
    11cc:	601a      	str	r2, [r3, #0]
    11ce:	4a0c      	ldr	r2, [pc, #48]	; (1200 <main+0x15c>)
    11d0:	4b0b      	ldr	r3, [pc, #44]	; (1200 <main+0x15c>)
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    11d8:	6013      	str	r3, [r2, #0]
    11da:	4a0a      	ldr	r2, [pc, #40]	; (1204 <main+0x160>)
    11dc:	4b09      	ldr	r3, [pc, #36]	; (1204 <main+0x160>)
    11de:	681b      	ldr	r3, [r3, #0]
    11e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    11e4:	f043 0312 	orr.w	r3, r3, #18
    11e8:	6013      	str	r3, [r2, #0]
    11ea:	4b04      	ldr	r3, [pc, #16]	; (11fc <main+0x158>)
    11ec:	2200      	movs	r2, #0
    11ee:	601a      	str	r2, [r3, #0]
    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    11f0:	f000 fa80 	bl	16f4 <am_hal_interrupt_master_enable>
#endif

    //
    // Loop forever - should never reach here
    //
    while (1)
    11f4:	e7fe      	b.n	11f4 <main+0x150>
    11f6:	bf00      	nop
    11f8:	100012e8 	.word	0x100012e8
    11fc:	40010060 	.word	0x40010060
    1200:	40010050 	.word	0x40010050
    1204:	40010024 	.word	0x40010024
    1208:	10001085 	.word	0x10001085
    120c:	40010020 	.word	0x40010020

00001210 <multiboot_decrypt>:
    {0xA5A5A5A5, },
    {0x66666666, },
};

static void multiboot_decrypt(uint32_t * data, uint32_t size_words, uint32_t *key, uint32_t key_size_words, uint32_t * iv)
{
    1210:	b480      	push	{r7}
    1212:	b089      	sub	sp, #36	; 0x24
    1214:	af00      	add	r7, sp, #0
    1216:	60f8      	str	r0, [r7, #12]
    1218:	60b9      	str	r1, [r7, #8]
    121a:	607a      	str	r2, [r7, #4]
    121c:	603b      	str	r3, [r7, #0]
    int i, j;
    uint32_t temp;
    for ( j = 0; j < size_words / key_size_words; j++ )
    121e:	2300      	movs	r3, #0
    1220:	61bb      	str	r3, [r7, #24]
    1222:	e03d      	b.n	12a0 <multiboot_decrypt+0x90>
    {
        for ( i = 0; i < key_size_words; i++ )
    1224:	2300      	movs	r3, #0
    1226:	61fb      	str	r3, [r7, #28]
    1228:	e033      	b.n	1292 <multiboot_decrypt+0x82>
        {
            temp = data[j * key_size_words + i];
    122a:	69bb      	ldr	r3, [r7, #24]
    122c:	683a      	ldr	r2, [r7, #0]
    122e:	fb02 f203 	mul.w	r2, r2, r3
    1232:	69fb      	ldr	r3, [r7, #28]
    1234:	4413      	add	r3, r2
    1236:	009b      	lsls	r3, r3, #2
    1238:	68fa      	ldr	r2, [r7, #12]
    123a:	4413      	add	r3, r2
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	617b      	str	r3, [r7, #20]
            data[j * key_size_words + i] = (data[j * key_size_words + i] ^ key[i]) ^ iv[i];
    1240:	69bb      	ldr	r3, [r7, #24]
    1242:	683a      	ldr	r2, [r7, #0]
    1244:	fb02 f203 	mul.w	r2, r2, r3
    1248:	69fb      	ldr	r3, [r7, #28]
    124a:	4413      	add	r3, r2
    124c:	009b      	lsls	r3, r3, #2
    124e:	68fa      	ldr	r2, [r7, #12]
    1250:	4413      	add	r3, r2
    1252:	69ba      	ldr	r2, [r7, #24]
    1254:	6839      	ldr	r1, [r7, #0]
    1256:	fb01 f102 	mul.w	r1, r1, r2
    125a:	69fa      	ldr	r2, [r7, #28]
    125c:	440a      	add	r2, r1
    125e:	0092      	lsls	r2, r2, #2
    1260:	68f9      	ldr	r1, [r7, #12]
    1262:	440a      	add	r2, r1
    1264:	6811      	ldr	r1, [r2, #0]
    1266:	69fa      	ldr	r2, [r7, #28]
    1268:	0092      	lsls	r2, r2, #2
    126a:	6878      	ldr	r0, [r7, #4]
    126c:	4402      	add	r2, r0
    126e:	6812      	ldr	r2, [r2, #0]
    1270:	4051      	eors	r1, r2
    1272:	69fa      	ldr	r2, [r7, #28]
    1274:	0092      	lsls	r2, r2, #2
    1276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1278:	4402      	add	r2, r0
    127a:	6812      	ldr	r2, [r2, #0]
    127c:	404a      	eors	r2, r1
    127e:	601a      	str	r2, [r3, #0]
            iv[i] = temp;
    1280:	69fb      	ldr	r3, [r7, #28]
    1282:	009b      	lsls	r3, r3, #2
    1284:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1286:	4413      	add	r3, r2
    1288:	697a      	ldr	r2, [r7, #20]
    128a:	601a      	str	r2, [r3, #0]
        for ( i = 0; i < key_size_words; i++ )
    128c:	69fb      	ldr	r3, [r7, #28]
    128e:	3301      	adds	r3, #1
    1290:	61fb      	str	r3, [r7, #28]
    1292:	69fa      	ldr	r2, [r7, #28]
    1294:	683b      	ldr	r3, [r7, #0]
    1296:	429a      	cmp	r2, r3
    1298:	d3c7      	bcc.n	122a <multiboot_decrypt+0x1a>
    for ( j = 0; j < size_words / key_size_words; j++ )
    129a:	69bb      	ldr	r3, [r7, #24]
    129c:	3301      	adds	r3, #1
    129e:	61bb      	str	r3, [r7, #24]
    12a0:	68ba      	ldr	r2, [r7, #8]
    12a2:	683b      	ldr	r3, [r7, #0]
    12a4:	fbb2 f2f3 	udiv	r2, r2, r3
    12a8:	69bb      	ldr	r3, [r7, #24]
    12aa:	429a      	cmp	r2, r3
    12ac:	d8ba      	bhi.n	1224 <multiboot_decrypt+0x14>
        }
    }
}
    12ae:	bf00      	nop
    12b0:	3724      	adds	r7, #36	; 0x24
    12b2:	46bd      	mov	sp, r7
    12b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b8:	4770      	bx	lr
	...

000012bc <validate_keyidx>:
}
#endif

static bool
validate_keyidx(uint32_t keyIdx)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    if ( keyIdx > MAX_KEYS )
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	2b08      	cmp	r3, #8
    12c8:	d901      	bls.n	12ce <validate_keyidx+0x12>
    {
        return true;
    12ca:	2301      	movs	r3, #1
    12cc:	e004      	b.n	12d8 <validate_keyidx+0x1c>
    }
    // Validate the key index to make sure it has not been revoked
    return am_bootloader_check_index(keyIdx, (uint32_t *)KEY_VALID_MASK_LOCATION);
    12ce:	4904      	ldr	r1, [pc, #16]	; (12e0 <validate_keyidx+0x24>)
    12d0:	6878      	ldr	r0, [r7, #4]
    12d2:	f7ff f8fb 	bl	4cc <am_bootloader_check_index>
    12d6:	4603      	mov	r3, r0
}
    12d8:	4618      	mov	r0, r3
    12da:	3708      	adds	r7, #8
    12dc:	46bd      	mov	sp, r7
    12de:	bd80      	pop	{r7, pc}
    12e0:	1000103c 	.word	0x1000103c

000012e4 <validate_sec_trailer>:

static bool
validate_sec_trailer(multiboot_security_trailer_t *pTrailer)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b084      	sub	sp, #16
    12e8:	af00      	add	r7, sp, #0
    12ea:	6078      	str	r0, [r7, #4]
    int i;
    // Validate signature of Seurity trailer
    // Signature = CRC32 of trailer ^ key
    uint32_t crc = 0;
    12ec:	2300      	movs	r3, #0
    12ee:	60bb      	str	r3, [r7, #8]
    am_bootloader_partial_crc32(&(pTrailer->keyIdx), sizeof(pTrailer->keyIdx), &crc);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	f107 0208 	add.w	r2, r7, #8
    12f6:	2104      	movs	r1, #4
    12f8:	4618      	mov	r0, r3
    12fa:	f7fe feef 	bl	dc <am_bootloader_partial_crc32>
    am_bootloader_partial_crc32(&(pTrailer->secInfo), sizeof(pTrailer->secInfo), &crc);
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	3304      	adds	r3, #4
    1302:	f107 0208 	add.w	r2, r7, #8
    1306:	2110      	movs	r1, #16
    1308:	4618      	mov	r0, r3
    130a:	f7fe fee7 	bl	dc <am_bootloader_partial_crc32>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    130e:	2300      	movs	r3, #0
    1310:	60fb      	str	r3, [r7, #12]
    1312:	e015      	b.n	1340 <validate_sec_trailer+0x5c>
    {
        if ( pTrailer->signature[i] != (crc ^ keyTbl[pTrailer->keyIdx][i]) )
    1314:	687a      	ldr	r2, [r7, #4]
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	3304      	adds	r3, #4
    131a:	009b      	lsls	r3, r3, #2
    131c:	4413      	add	r3, r2
    131e:	685a      	ldr	r2, [r3, #4]
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	6819      	ldr	r1, [r3, #0]
    1324:	480a      	ldr	r0, [pc, #40]	; (1350 <validate_sec_trailer+0x6c>)
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	440b      	add	r3, r1
    132a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    132e:	68bb      	ldr	r3, [r7, #8]
    1330:	404b      	eors	r3, r1
    1332:	429a      	cmp	r2, r3
    1334:	d001      	beq.n	133a <validate_sec_trailer+0x56>
        {
            return true;
    1336:	2301      	movs	r3, #1
    1338:	e006      	b.n	1348 <validate_sec_trailer+0x64>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	3301      	adds	r3, #1
    133e:	60fb      	str	r3, [r7, #12]
    1340:	68fb      	ldr	r3, [r7, #12]
    1342:	2b00      	cmp	r3, #0
    1344:	dde6      	ble.n	1314 <validate_sec_trailer+0x30>
        }
    }
    return false;
    1346:	2300      	movs	r3, #0
}
    1348:	4618      	mov	r0, r3
    134a:	3710      	adds	r7, #16
    134c:	46bd      	mov	sp, r7
    134e:	bd80      	pop	{r7, pc}
    1350:	10001040 	.word	0x10001040

00001354 <init_multiboot_secure>:
// Verify the security trailer & initialize the security params
int
init_multiboot_secure(uint32_t length, uint32_t *pData,
                      bool bStoreInSram, am_bootloader_image_t *psImage,
                      uint32_t *pProtect)
{
    1354:	b580      	push	{r7, lr}
    1356:	b086      	sub	sp, #24
    1358:	af00      	add	r7, sp, #0
    135a:	60f8      	str	r0, [r7, #12]
    135c:	60b9      	str	r1, [r7, #8]
    135e:	603b      	str	r3, [r7, #0]
    1360:	4613      	mov	r3, r2
    1362:	71fb      	strb	r3, [r7, #7]
    int i;
    multiboot_security_trailer_t *pSec = (multiboot_security_trailer_t *)pData;
    1364:	68bb      	ldr	r3, [r7, #8]
    1366:	613b      	str	r3, [r7, #16]
    // Verify the length
    if ( length != sizeof(*pSec) )
    1368:	68fb      	ldr	r3, [r7, #12]
    136a:	2b18      	cmp	r3, #24
    136c:	d002      	beq.n	1374 <init_multiboot_secure+0x20>
    {
        return -1;
    136e:	f04f 33ff 	mov.w	r3, #4294967295
    1372:	e05c      	b.n	142e <init_multiboot_secure+0xda>
    }
    // Validate key index
    if ( validate_keyidx(pSec->keyIdx) )
    1374:	693b      	ldr	r3, [r7, #16]
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	4618      	mov	r0, r3
    137a:	f7ff ff9f 	bl	12bc <validate_keyidx>
    137e:	4603      	mov	r3, r0
    1380:	2b00      	cmp	r3, #0
    1382:	d002      	beq.n	138a <init_multiboot_secure+0x36>
    {
        return -1;
    1384:	f04f 33ff 	mov.w	r3, #4294967295
    1388:	e051      	b.n	142e <init_multiboot_secure+0xda>
    }
    // Now Authenticate the security trailer itself
    if ( validate_sec_trailer(pSec) )
    138a:	6938      	ldr	r0, [r7, #16]
    138c:	f7ff ffaa 	bl	12e4 <validate_sec_trailer>
    1390:	4603      	mov	r3, r0
    1392:	2b00      	cmp	r3, #0
    1394:	d002      	beq.n	139c <init_multiboot_secure+0x48>
    {
        return -1;
    1396:	f04f 33ff 	mov.w	r3, #4294967295
    139a:	e048      	b.n	142e <init_multiboot_secure+0xda>
    }
    // We could reject the download if we can not validate if before flashing
    // by checking bStoreInSram herea - optional
    // Initialize State Variables
    g_sSecState.imageLength = pSec->secInfo.imageLength;
    139c:	693b      	ldr	r3, [r7, #16]
    139e:	689b      	ldr	r3, [r3, #8]
    13a0:	4a25      	ldr	r2, [pc, #148]	; (1438 <init_multiboot_secure+0xe4>)
    13a2:	6093      	str	r3, [r2, #8]
    if ( g_sSecState.imageLength != psImage->ui32NumBytes )
    13a4:	4b24      	ldr	r3, [pc, #144]	; (1438 <init_multiboot_secure+0xe4>)
    13a6:	689a      	ldr	r2, [r3, #8]
    13a8:	683b      	ldr	r3, [r7, #0]
    13aa:	685b      	ldr	r3, [r3, #4]
    13ac:	429a      	cmp	r2, r3
    13ae:	d002      	beq.n	13b6 <init_multiboot_secure+0x62>
    {
        return -1;
    13b0:	f04f 33ff 	mov.w	r3, #4294967295
    13b4:	e03b      	b.n	142e <init_multiboot_secure+0xda>
    }
    g_sSecState.clearCRC = 0;
    13b6:	4b20      	ldr	r3, [pc, #128]	; (1438 <init_multiboot_secure+0xe4>)
    13b8:	2200      	movs	r2, #0
    13ba:	61da      	str	r2, [r3, #28]
    g_sSecState.offset = 0;
    13bc:	4b1e      	ldr	r3, [pc, #120]	; (1438 <init_multiboot_secure+0xe4>)
    13be:	2200      	movs	r2, #0
    13c0:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    13c2:	2300      	movs	r3, #0
    13c4:	617b      	str	r3, [r7, #20]
    13c6:	e02a      	b.n	141e <init_multiboot_secure+0xca>
    {
        // Initialize IV
        g_sSecState.initVector[i] = pSec->secInfo.initVector[i];
    13c8:	693a      	ldr	r2, [r7, #16]
    13ca:	697b      	ldr	r3, [r7, #20]
    13cc:	3302      	adds	r3, #2
    13ce:	009b      	lsls	r3, r3, #2
    13d0:	4413      	add	r3, r2
    13d2:	689a      	ldr	r2, [r3, #8]
    13d4:	4918      	ldr	r1, [pc, #96]	; (1438 <init_multiboot_secure+0xe4>)
    13d6:	697b      	ldr	r3, [r7, #20]
    13d8:	3304      	adds	r3, #4
    13da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Store Signature
        g_sSecState.signature[i] = pSec->secInfo.imageSignature[i];
    13de:	693a      	ldr	r2, [r7, #16]
    13e0:	697b      	ldr	r3, [r7, #20]
    13e2:	3302      	adds	r3, #2
    13e4:	009b      	lsls	r3, r3, #2
    13e6:	4413      	add	r3, r2
    13e8:	685a      	ldr	r2, [r3, #4]
    13ea:	4913      	ldr	r1, [pc, #76]	; (1438 <init_multiboot_secure+0xe4>)
    13ec:	697b      	ldr	r3, [r7, #20]
    13ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_sSecState.runningSignature[i] = 0;
    13f2:	4a11      	ldr	r2, [pc, #68]	; (1438 <init_multiboot_secure+0xe4>)
    13f4:	697b      	ldr	r3, [r7, #20]
    13f6:	009b      	lsls	r3, r3, #2
    13f8:	4413      	add	r3, r2
    13fa:	2200      	movs	r2, #0
    13fc:	605a      	str	r2, [r3, #4]
        g_sSecState.key[i] = keyTbl[pSec->keyIdx][i];
    13fe:	693b      	ldr	r3, [r7, #16]
    1400:	681a      	ldr	r2, [r3, #0]
    1402:	490e      	ldr	r1, [pc, #56]	; (143c <init_multiboot_secure+0xe8>)
    1404:	697b      	ldr	r3, [r7, #20]
    1406:	4413      	add	r3, r2
    1408:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    140c:	490a      	ldr	r1, [pc, #40]	; (1438 <init_multiboot_secure+0xe4>)
    140e:	697b      	ldr	r3, [r7, #20]
    1410:	3304      	adds	r3, #4
    1412:	009b      	lsls	r3, r3, #2
    1414:	440b      	add	r3, r1
    1416:	605a      	str	r2, [r3, #4]
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    1418:	697b      	ldr	r3, [r7, #20]
    141a:	3301      	adds	r3, #1
    141c:	617b      	str	r3, [r7, #20]
    141e:	697b      	ldr	r3, [r7, #20]
    1420:	2b00      	cmp	r3, #0
    1422:	ddd1      	ble.n	13c8 <init_multiboot_secure+0x74>
    }
    *pProtect = pSec->secInfo.protection; // Could be set if copy-protection is desired
    1424:	693b      	ldr	r3, [r7, #16]
    1426:	685a      	ldr	r2, [r3, #4]
    1428:	6a3b      	ldr	r3, [r7, #32]
    142a:	601a      	str	r2, [r3, #0]
    return 0;
    142c:	2300      	movs	r3, #0
}
    142e:	4618      	mov	r0, r3
    1430:	3718      	adds	r7, #24
    1432:	46bd      	mov	sp, r7
    1434:	bd80      	pop	{r7, pc}
    1436:	bf00      	nop
    1438:	10001088 	.word	0x10001088
    143c:	10001040 	.word	0x10001040

00001440 <multiboot_secure_decrypt>:

void
multiboot_secure_decrypt(void *pData, uint32_t ui32NumBytes)
{
    1440:	b580      	push	{r7, lr}
    1442:	b084      	sub	sp, #16
    1444:	af02      	add	r7, sp, #8
    1446:	6078      	str	r0, [r7, #4]
    1448:	6039      	str	r1, [r7, #0]
    // Do in place decryption
    // With knowledge of image structure, this can also grab the image version
    // from a fixed location from within image
    multiboot_decrypt((uint32_t *)pData, ui32NumBytes / 4,
    144a:	683b      	ldr	r3, [r7, #0]
    144c:	0899      	lsrs	r1, r3, #2
    144e:	4b0b      	ldr	r3, [pc, #44]	; (147c <multiboot_secure_decrypt+0x3c>)
    1450:	9300      	str	r3, [sp, #0]
    1452:	2301      	movs	r3, #1
    1454:	4a0a      	ldr	r2, [pc, #40]	; (1480 <multiboot_secure_decrypt+0x40>)
    1456:	6878      	ldr	r0, [r7, #4]
    1458:	f7ff feda 	bl	1210 <multiboot_decrypt>
        g_sSecState.key, KEY_SIZE_WORDS, g_sSecState.initVector);
    // Update the running CRC for clear image
    am_bootloader_partial_crc32(pData, ui32NumBytes, &g_sSecState.clearCRC);
    145c:	4a09      	ldr	r2, [pc, #36]	; (1484 <multiboot_secure_decrypt+0x44>)
    145e:	6839      	ldr	r1, [r7, #0]
    1460:	6878      	ldr	r0, [r7, #4]
    1462:	f7fe fe3b 	bl	dc <am_bootloader_partial_crc32>
    g_sSecState.offset += ui32NumBytes;
    1466:	4b08      	ldr	r3, [pc, #32]	; (1488 <multiboot_secure_decrypt+0x48>)
    1468:	699a      	ldr	r2, [r3, #24]
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	4413      	add	r3, r2
    146e:	4a06      	ldr	r2, [pc, #24]	; (1488 <multiboot_secure_decrypt+0x48>)
    1470:	6193      	str	r3, [r2, #24]
}
    1472:	bf00      	nop
    1474:	3708      	adds	r7, #8
    1476:	46bd      	mov	sp, r7
    1478:	bd80      	pop	{r7, pc}
    147a:	bf00      	nop
    147c:	10001098 	.word	0x10001098
    1480:	1000109c 	.word	0x1000109c
    1484:	100010a4 	.word	0x100010a4
    1488:	10001088 	.word	0x10001088

0000148c <multiboot_secure_verify>:

// Verify the authenticity and integrity of the Image
// return the clear CRC for integrity verification going forward
int
multiboot_secure_verify(uint32_t *pui32ClearCRC)
{
    148c:	b480      	push	{r7}
    148e:	b085      	sub	sp, #20
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
    // Check the signature with computed Value - for authentication
    // Optionally check the version for replay protection
    // Return 0 for success
    // Check for image signature to validate authenticity (and integrity)
    // Image Signature is ClearCRC ^ key
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    1494:	2300      	movs	r3, #0
    1496:	60fb      	str	r3, [r7, #12]
    1498:	e01e      	b.n	14d8 <multiboot_secure_verify+0x4c>
    {
        g_sSecState.runningSignature[i] = g_sSecState.key[i] ^ g_sSecState.clearCRC;
    149a:	4a16      	ldr	r2, [pc, #88]	; (14f4 <multiboot_secure_verify+0x68>)
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	3304      	adds	r3, #4
    14a0:	009b      	lsls	r3, r3, #2
    14a2:	4413      	add	r3, r2
    14a4:	685a      	ldr	r2, [r3, #4]
    14a6:	4b13      	ldr	r3, [pc, #76]	; (14f4 <multiboot_secure_verify+0x68>)
    14a8:	69db      	ldr	r3, [r3, #28]
    14aa:	405a      	eors	r2, r3
    14ac:	4911      	ldr	r1, [pc, #68]	; (14f4 <multiboot_secure_verify+0x68>)
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	009b      	lsls	r3, r3, #2
    14b2:	440b      	add	r3, r1
    14b4:	605a      	str	r2, [r3, #4]
        if ( g_sSecState.runningSignature[i] != g_sSecState.signature[i] )
    14b6:	4a0f      	ldr	r2, [pc, #60]	; (14f4 <multiboot_secure_verify+0x68>)
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	009b      	lsls	r3, r3, #2
    14bc:	4413      	add	r3, r2
    14be:	685a      	ldr	r2, [r3, #4]
    14c0:	490c      	ldr	r1, [pc, #48]	; (14f4 <multiboot_secure_verify+0x68>)
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    14c8:	429a      	cmp	r2, r3
    14ca:	d002      	beq.n	14d2 <multiboot_secure_verify+0x46>
        {
            return -1;
    14cc:	f04f 33ff 	mov.w	r3, #4294967295
    14d0:	e00a      	b.n	14e8 <multiboot_secure_verify+0x5c>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	3301      	adds	r3, #1
    14d6:	60fb      	str	r3, [r7, #12]
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	2b00      	cmp	r3, #0
    14dc:	dddd      	ble.n	149a <multiboot_secure_verify+0xe>
        }
    }
    // Update the CRC in psImage for integrity verification going forward
    *pui32ClearCRC = g_sSecState.clearCRC;
    14de:	4b05      	ldr	r3, [pc, #20]	; (14f4 <multiboot_secure_verify+0x68>)
    14e0:	69da      	ldr	r2, [r3, #28]
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	601a      	str	r2, [r3, #0]
    return 0;
    14e6:	2300      	movs	r3, #0
}
    14e8:	4618      	mov	r0, r3
    14ea:	3714      	adds	r7, #20
    14ec:	46bd      	mov	sp, r7
    14ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f2:	4770      	bx	lr
    14f4:	10001088 	.word	0x10001088

000014f8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    14f8:	4811      	ldr	r0, [pc, #68]	; (1540 <zero_loop+0x12>)
    14fa:	4912      	ldr	r1, [pc, #72]	; (1544 <zero_loop+0x16>)
    14fc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    14fe:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    1502:	4811      	ldr	r0, [pc, #68]	; (1548 <zero_loop+0x1a>)
    1504:	6801      	ldr	r1, [r0, #0]
    1506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    150a:	6001      	str	r1, [r0, #0]
    150c:	f3bf 8f4f 	dsb	sy
    1510:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    1514:	480d      	ldr	r0, [pc, #52]	; (154c <zero_loop+0x1e>)
    1516:	490e      	ldr	r1, [pc, #56]	; (1550 <zero_loop+0x22>)
    1518:	4a0e      	ldr	r2, [pc, #56]	; (1554 <zero_loop+0x26>)

0000151a <copy_loop>:
    151a:	f850 3b04 	ldr.w	r3, [r0], #4
    151e:	f841 3b04 	str.w	r3, [r1], #4
    1522:	4291      	cmp	r1, r2
    1524:	dbf9      	blt.n	151a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    1526:	480c      	ldr	r0, [pc, #48]	; (1558 <zero_loop+0x2a>)
    1528:	490c      	ldr	r1, [pc, #48]	; (155c <zero_loop+0x2e>)
    152a:	f04f 0200 	mov.w	r2, #0

0000152e <zero_loop>:
    152e:	4288      	cmp	r0, r1
    1530:	bfb8      	it	lt
    1532:	f840 2b04 	strlt.w	r2, [r0], #4
    1536:	dbfa      	blt.n	152e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    1538:	f7ff fdb4 	bl	10a4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    153c:	be00      	bkpt	0x0000
}
    153e:	bf00      	nop
    1540:	e000ed08 	.word	0xe000ed08
    1544:	00000000 	.word	0x00000000
    1548:	e000ed88 	.word	0xe000ed88
    154c:	00001e84 	.word	0x00001e84
    1550:	10001000 	.word	0x10001000
    1554:	10001060 	.word	0x10001060
    1558:	10001060 	.word	0x10001060
    155c:	10001ae8 	.word	0x10001ae8

00001560 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    1560:	b480      	push	{r7}
    1562:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1564:	e7fe      	b.n	1564 <am_nmi_isr+0x4>

00001566 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
    1566:	b480      	push	{r7}
    1568:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    156a:	e7fe      	b.n	156a <am_busfault_isr+0x4>

0000156c <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    156c:	b480      	push	{r7}
    156e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1570:	e7fe      	b.n	1570 <am_adc_isr+0x4>
	...

00001574 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1574:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1576:	f000 f93d 	bl	17f4 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    157a:	f000 fa2d 	bl	19d8 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    157e:	2001      	movs	r0, #1
    1580:	f000 f954 	bl	182c <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1584:	2001      	movs	r0, #1
    1586:	f000 f823 	bl	15d0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    158a:	f000 f95d 	bl	1848 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    158e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    1592:	f000 b927 	b.w	17e4 <am_hal_mcuctrl_bandgap_disable>
    1596:	bf00      	nop

00001598 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    159a:	4906      	ldr	r1, [pc, #24]	; (15b4 <am_hal_clkgen_sysclk_select+0x1c>)
{
    159c:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    159e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15a0:	2447      	movs	r4, #71	; 0x47
    15a2:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15a4:	6008      	str	r0, [r1, #0]
}
    15a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    15aa:	601a      	str	r2, [r3, #0]
}
    15ac:	4770      	bx	lr
    15ae:	bf00      	nop
    15b0:	40004014 	.word	0x40004014
    15b4:	40004018 	.word	0x40004018

000015b8 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <am_hal_clkgen_sysclk_get+0x10>)
    15ba:	4a04      	ldr	r2, [pc, #16]	; (15cc <am_hal_clkgen_sysclk_get+0x14>)
    15bc:	6818      	ldr	r0, [r3, #0]
    15be:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    15c2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    15c6:	4770      	bx	lr
    15c8:	40004018 	.word	0x40004018
    15cc:	00001de4 	.word	0x00001de4

000015d0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    15d0:	0783      	lsls	r3, r0, #30
    15d2:	d003      	beq.n	15dc <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    15d4:	4b02      	ldr	r3, [pc, #8]	; (15e0 <am_hal_clkgen_osc_stop+0x10>)
    15d6:	681a      	ldr	r2, [r3, #0]
    15d8:	4310      	orrs	r0, r2
    15da:	6018      	str	r0, [r3, #0]
    15dc:	4770      	bx	lr
    15de:	bf00      	nop
    15e0:	4000400c 	.word	0x4000400c

000015e4 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashBlk,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.am_hal_flash_page_erase(ui32Value, ui32FlashBlk,
    15e4:	4b00      	ldr	r3, [pc, #0]	; (15e8 <am_hal_flash_page_erase+0x4>)
    15e6:	4718      	bx	r3
    15e8:	08000051 	.word	0x08000051

000015ec <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, const uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    15ec:	b410      	push	{r4}
    return g_am_hal_flash.am_hal_flash_program_main(ui32Value, pui32Src,
    15ee:	4c02      	ldr	r4, [pc, #8]	; (15f8 <am_hal_flash_program_main+0xc>)
    15f0:	46a4      	mov	ip, r4
                                                    pui32Dst, ui32NumWords);
}
    15f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.am_hal_flash_program_main(ui32Value, pui32Src,
    15f6:	4760      	bx	ip
    15f8:	08000055 	.word	0x08000055

000015fc <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    15fc:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    15fe:	4c05      	ldr	r4, [pc, #20]	; (1614 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1600:	4a05      	ldr	r2, [pc, #20]	; (1618 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    1602:	6823      	ldr	r3, [r4, #0]
    1604:	4319      	orrs	r1, r3
    1606:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1608:	6811      	ldr	r1, [r2, #0]
}
    160a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    160e:	4308      	orrs	r0, r1
    1610:	6010      	str	r0, [r2, #0]
}
    1612:	4770      	bx	lr
    1614:	40010210 	.word	0x40010210
    1618:	40010200 	.word	0x40010200

0000161c <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64Interrupt)
{
    161c:	b410      	push	{r4}
    //
    // Disable the interrupts.
    //
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    161e:	4c06      	ldr	r4, [pc, #24]	; (1638 <am_hal_gpio_int_disable+0x1c>)
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    1620:	4a06      	ldr	r2, [pc, #24]	; (163c <am_hal_gpio_int_disable+0x20>)
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    1622:	6823      	ldr	r3, [r4, #0]
    1624:	ea23 0101 	bic.w	r1, r3, r1
    1628:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    162a:	6814      	ldr	r4, [r2, #0]
    162c:	ea24 0000 	bic.w	r0, r4, r0
    1630:	6010      	str	r0, [r2, #0]
}
    1632:	f85d 4b04 	ldr.w	r4, [sp], #4
    1636:	4770      	bx	lr
    1638:	40010210 	.word	0x40010210
    163c:	40010200 	.word	0x40010200

00001640 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1640:	4a02      	ldr	r2, [pc, #8]	; (164c <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1642:	4b03      	ldr	r3, [pc, #12]	; (1650 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1644:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1646:	6018      	str	r0, [r3, #0]
    1648:	4770      	bx	lr
    164a:	bf00      	nop
    164c:	40010218 	.word	0x40010218
    1650:	40010208 	.word	0x40010208

00001654 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1654:	280f      	cmp	r0, #15
    1656:	d80b      	bhi.n	1670 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1658:	2805      	cmp	r0, #5
    165a:	d013      	beq.n	1684 <am_hal_interrupt_enable+0x30>
    165c:	2806      	cmp	r0, #6
    165e:	d017      	beq.n	1690 <am_hal_interrupt_enable+0x3c>
    1660:	2804      	cmp	r0, #4
    1662:	d104      	bne.n	166e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1664:	4a0d      	ldr	r2, [pc, #52]	; (169c <am_hal_interrupt_enable+0x48>)
    1666:	6813      	ldr	r3, [r2, #0]
    1668:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    166c:	6010      	str	r0, [r2, #0]
    166e:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1670:	f1a0 0310 	sub.w	r3, r0, #16
    1674:	f003 0c1f 	and.w	ip, r3, #31
    1678:	2001      	movs	r0, #1
    167a:	4909      	ldr	r1, [pc, #36]	; (16a0 <am_hal_interrupt_enable+0x4c>)
    167c:	fa00 f20c 	lsl.w	r2, r0, ip
    1680:	600a      	str	r2, [r1, #0]
    1682:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1684:	4805      	ldr	r0, [pc, #20]	; (169c <am_hal_interrupt_enable+0x48>)
    1686:	6801      	ldr	r1, [r0, #0]
    1688:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    168c:	6002      	str	r2, [r0, #0]
            break;
    168e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1690:	4902      	ldr	r1, [pc, #8]	; (169c <am_hal_interrupt_enable+0x48>)
    1692:	680a      	ldr	r2, [r1, #0]
    1694:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1698:	600b      	str	r3, [r1, #0]
            break;
    169a:	4770      	bx	lr
    169c:	e000ed24 	.word	0xe000ed24
    16a0:	e000e100 	.word	0xe000e100

000016a4 <am_hal_interrupt_disable>:
am_hal_interrupt_disable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    16a4:	280f      	cmp	r0, #15
    16a6:	d80b      	bhi.n	16c0 <am_hal_interrupt_disable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    16a8:	2805      	cmp	r0, #5
    16aa:	d013      	beq.n	16d4 <am_hal_interrupt_disable+0x30>
    16ac:	2806      	cmp	r0, #6
    16ae:	d017      	beq.n	16e0 <am_hal_interrupt_disable+0x3c>
    16b0:	2804      	cmp	r0, #4
    16b2:	d104      	bne.n	16be <am_hal_interrupt_disable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 0);
    16b4:	4a0d      	ldr	r2, [pc, #52]	; (16ec <am_hal_interrupt_disable+0x48>)
    16b6:	6813      	ldr	r3, [r2, #0]
    16b8:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
    16bc:	6010      	str	r0, [r2, #0]
    16be:	4770      	bx	lr
        AM_REG(NVIC, ICER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    16c0:	f1a0 0310 	sub.w	r3, r0, #16
    16c4:	f003 0c1f 	and.w	ip, r3, #31
    16c8:	2001      	movs	r0, #1
    16ca:	4909      	ldr	r1, [pc, #36]	; (16f0 <am_hal_interrupt_disable+0x4c>)
    16cc:	fa00 f20c 	lsl.w	r2, r0, ip
    16d0:	600a      	str	r2, [r1, #0]
    16d2:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 0);
    16d4:	4805      	ldr	r0, [pc, #20]	; (16ec <am_hal_interrupt_disable+0x48>)
    16d6:	6801      	ldr	r1, [r0, #0]
    16d8:	f421 3200 	bic.w	r2, r1, #131072	; 0x20000
    16dc:	6002      	str	r2, [r0, #0]
            break;
    16de:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
    16e0:	4902      	ldr	r1, [pc, #8]	; (16ec <am_hal_interrupt_disable+0x48>)
    16e2:	680a      	ldr	r2, [r1, #0]
    16e4:	f422 2380 	bic.w	r3, r2, #262144	; 0x40000
    16e8:	600b      	str	r3, [r1, #0]
            break;
    16ea:	4770      	bx	lr
    16ec:	e000ed24 	.word	0xe000ed24
    16f0:	e000e180 	.word	0xe000e180

000016f4 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16f4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    16f8:	b662      	cpsie	i
    __asm("    bx lr");
    16fa:	4770      	bx	lr

000016fc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16fc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1700:	b672      	cpsid	i
    __asm("    bx lr");
    1702:	4770      	bx	lr

00001704 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1704:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1708:	4770      	bx	lr
    170a:	bf00      	nop

0000170c <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    170c:	4b29      	ldr	r3, [pc, #164]	; (17b4 <am_hal_mcuctrl_device_info_get+0xa8>)
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    170e:	492a      	ldr	r1, [pc, #168]	; (17b8 <am_hal_mcuctrl_device_info_get+0xac>)

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1710:	4a2a      	ldr	r2, [pc, #168]	; (17bc <am_hal_mcuctrl_device_info_get+0xb0>)
{
    1712:	b4f0      	push	{r4, r5, r6, r7}
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1714:	681f      	ldr	r7, [r3, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1716:	4d2a      	ldr	r5, [pc, #168]	; (17c0 <am_hal_mcuctrl_device_info_get+0xb4>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1718:	6007      	str	r7, [r0, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    171a:	682d      	ldr	r5, [r5, #0]
    171c:	6045      	str	r5, [r0, #4]
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    171e:	680f      	ldr	r7, [r1, #0]
    1720:	6087      	str	r7, [r0, #8]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1722:	6811      	ldr	r1, [r2, #0]
    1724:	60c1      	str	r1, [r0, #12]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    1726:	681a      	ldr	r2, [r3, #0]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    1728:	4e26      	ldr	r6, [pc, #152]	; (17c4 <am_hal_mcuctrl_device_info_get+0xb8>)

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    172a:	4c27      	ldr	r4, [pc, #156]	; (17c8 <am_hal_mcuctrl_device_info_get+0xbc>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    172c:	4d27      	ldr	r5, [pc, #156]	; (17cc <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    172e:	4f28      	ldr	r7, [pc, #160]	; (17d0 <am_hal_mcuctrl_device_info_get+0xc4>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1730:	4928      	ldr	r1, [pc, #160]	; (17d4 <am_hal_mcuctrl_device_info_get+0xc8>)
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    1732:	f002 0201 	and.w	r2, r2, #1
    1736:	6142      	str	r2, [r0, #20]
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    1738:	681a      	ldr	r2, [r3, #0]
    173a:	f3c2 5c03 	ubfx	ip, r2, #20, #4

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    173e:	4a26      	ldr	r2, [pc, #152]	; (17d8 <am_hal_mcuctrl_device_info_get+0xcc>)
    psDevice->ui32FlashSize =
    1740:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
    1744:	6186      	str	r6, [r0, #24]
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    1746:	681b      	ldr	r3, [r3, #0]
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1748:	4e24      	ldr	r6, [pc, #144]	; (17dc <am_hal_mcuctrl_device_info_get+0xd0>)
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    174a:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32SRAMSize =
    174e:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    1752:	61c4      	str	r4, [r0, #28]
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1754:	682b      	ldr	r3, [r5, #0]
    1756:	b2dc      	uxtb	r4, r3
    1758:	6204      	str	r4, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    175a:	683b      	ldr	r3, [r7, #0]
    175c:	021b      	lsls	r3, r3, #8
    175e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1762:	4323      	orrs	r3, r4
    1764:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    1766:	683f      	ldr	r7, [r7, #0]
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    1768:	4c1d      	ldr	r4, [pc, #116]	; (17e0 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    176a:	f3c7 1703 	ubfx	r7, r7, #4, #4
    176e:	6247      	str	r7, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1770:	680b      	ldr	r3, [r1, #0]
    1772:	011b      	lsls	r3, r3, #4
    1774:	b2db      	uxtb	r3, r3
    1776:	433b      	orrs	r3, r7
    1778:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    177a:	680f      	ldr	r7, [r1, #0]
    177c:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    1780:	6287      	str	r7, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1782:	6836      	ldr	r6, [r6, #0]
    1784:	f3c6 1303 	ubfx	r3, r6, #4, #4
    1788:	433b      	orrs	r3, r7
    178a:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    178c:	6812      	ldr	r2, [r2, #0]
    178e:	0617      	lsls	r7, r2, #24
    1790:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    1792:	69ae      	ldr	r6, [r5, #24]
    1794:	0435      	lsls	r5, r6, #16
    1796:	f405 037f 	and.w	r3, r5, #16711680	; 0xff0000
    179a:	431f      	orrs	r7, r3
    179c:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    179e:	6824      	ldr	r4, [r4, #0]
    17a0:	0222      	lsls	r2, r4, #8
    17a2:	b296      	uxth	r6, r2
    17a4:	433e      	orrs	r6, r7
    17a6:	62c6      	str	r6, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    17a8:	688f      	ldr	r7, [r1, #8]
    17aa:	b2f9      	uxtb	r1, r7
    17ac:	430e      	orrs	r6, r1
    17ae:	62c6      	str	r6, [r0, #44]	; 0x2c
}
    17b0:	bcf0      	pop	{r4, r5, r6, r7}
    17b2:	4770      	bx	lr
    17b4:	40020000 	.word	0x40020000
    17b8:	40020008 	.word	0x40020008
    17bc:	4002000c 	.word	0x4002000c
    17c0:	40020004 	.word	0x40020004
    17c4:	00001e04 	.word	0x00001e04
    17c8:	00001e44 	.word	0x00001e44
    17cc:	f0000fe0 	.word	0xf0000fe0
    17d0:	f0000fe4 	.word	0xf0000fe4
    17d4:	f0000fe8 	.word	0xf0000fe8
    17d8:	f0000ffc 	.word	0xf0000ffc
    17dc:	f0000fec 	.word	0xf0000fec
    17e0:	f0000ff4 	.word	0xf0000ff4

000017e4 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    17e4:	4b02      	ldr	r3, [pc, #8]	; (17f0 <am_hal_mcuctrl_bandgap_disable+0xc>)
    17e6:	f06f 0201 	mvn.w	r2, #1
    17ea:	601a      	str	r2, [r3, #0]
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop
    17f0:	400200fc 	.word	0x400200fc

000017f4 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    17f4:	4b08      	ldr	r3, [pc, #32]	; (1818 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    17f6:	4a09      	ldr	r2, [pc, #36]	; (181c <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    17f8:	6819      	ldr	r1, [r3, #0]
    17fa:	f041 0002 	orr.w	r0, r1, #2
    17fe:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1800:	6819      	ldr	r1, [r3, #0]
    1802:	f041 0001 	orr.w	r0, r1, #1
    1806:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1808:	6813      	ldr	r3, [r2, #0]
    180a:	0799      	lsls	r1, r3, #30
    180c:	d5fc      	bpl.n	1808 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    180e:	4a03      	ldr	r2, [pc, #12]	; (181c <am_hal_mcuctrl_bucks_enable+0x28>)
    1810:	6811      	ldr	r1, [r2, #0]
    1812:	07cb      	lsls	r3, r1, #31
    1814:	d5fc      	bpl.n	1810 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    1816:	4770      	bx	lr
    1818:	40020010 	.word	0x40020010
    181c:	40020014 	.word	0x40020014

00001820 <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    1820:	4b01      	ldr	r3, [pc, #4]	; (1828 <am_hal_reset_poi+0x8>)
    1822:	221b      	movs	r2, #27
    1824:	601a      	str	r2, [r3, #0]
    1826:	4770      	bx	lr
    1828:	40000004 	.word	0x40000004

0000182c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    182c:	4a05      	ldr	r2, [pc, #20]	; (1844 <am_hal_rtc_osc_select+0x18>)
    182e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1830:	b918      	cbnz	r0, 183a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1832:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1836:	6010      	str	r0, [r2, #0]
    1838:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    183a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    183e:	6011      	str	r1, [r2, #0]
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	4000400c 	.word	0x4000400c

00001848 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <am_hal_rtc_osc_disable+0xc>)
    184a:	6813      	ldr	r3, [r2, #0]
    184c:	f043 0010 	orr.w	r0, r3, #16
    1850:	6010      	str	r0, [r2, #0]
    1852:	4770      	bx	lr
    1854:	40004050 	.word	0x40004050

00001858 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1858:	4a08      	ldr	r2, [pc, #32]	; (187c <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    185a:	b118      	cbz	r0, 1864 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    185c:	4b08      	ldr	r3, [pc, #32]	; (1880 <am_hal_sysctrl_sleep+0x28>)
    185e:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1860:	07c3      	lsls	r3, r0, #31
    1862:	d505      	bpl.n	1870 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1864:	6811      	ldr	r1, [r2, #0]
    1866:	f021 0304 	bic.w	r3, r1, #4
    186a:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    186c:	bf30      	wfi
    186e:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1870:	6810      	ldr	r0, [r2, #0]
    1872:	f040 0104 	orr.w	r1, r0, #4
    1876:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1878:	bf30      	wfi
    187a:	4770      	bx	lr
    187c:	e000ed10 	.word	0xe000ed10
    1880:	40020250 	.word	0x40020250

00001884 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1884:	4a02      	ldr	r2, [pc, #8]	; (1890 <am_hal_systick_start+0xc>)
    1886:	6813      	ldr	r3, [r2, #0]
    1888:	f043 0001 	orr.w	r0, r3, #1
    188c:	6010      	str	r0, [r2, #0]
    188e:	4770      	bx	lr
    1890:	e000e010 	.word	0xe000e010

00001894 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1894:	4a02      	ldr	r2, [pc, #8]	; (18a0 <am_hal_systick_stop+0xc>)
    1896:	6813      	ldr	r3, [r2, #0]
    1898:	f023 0001 	bic.w	r0, r3, #1
    189c:	6010      	str	r0, [r2, #0]
    189e:	4770      	bx	lr
    18a0:	e000e010 	.word	0xe000e010

000018a4 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    18a4:	4b01      	ldr	r3, [pc, #4]	; (18ac <am_hal_systick_load+0x8>)
    18a6:	6018      	str	r0, [r3, #0]
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	e000e014 	.word	0xe000e014

000018b0 <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    18b0:	4b01      	ldr	r3, [pc, #4]	; (18b8 <am_hal_systick_count+0x8>)
    18b2:	6818      	ldr	r0, [r3, #0]
}
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e018 	.word	0xe000e018

000018bc <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    18bc:	b570      	push	{r4, r5, r6, lr}
    18be:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    18c0:	680d      	ldr	r5, [r1, #0]
    18c2:	f7ff fe79 	bl	15b8 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    18c6:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    18c8:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    18cc:	b30a      	cbz	r2, 1912 <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    18ce:	4d11      	ldr	r5, [pc, #68]	; (1914 <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    18d0:	4e11      	ldr	r6, [pc, #68]	; (1918 <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    18d2:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    18d4:	0183      	lsls	r3, r0, #6
    18d6:	fbb3 f0f1 	udiv	r0, r3, r1
    18da:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    18de:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18e0:	490e      	ldr	r1, [pc, #56]	; (191c <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    18e2:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18e4:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    18e6:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    18e8:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18ea:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    18ec:	4a0c      	ldr	r2, [pc, #48]	; (1920 <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18ee:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    18f0:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18f2:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    18f6:	bf14      	ite	ne
    18f8:	2008      	movne	r0, #8
    18fa:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    18fc:	4303      	orrs	r3, r0
    18fe:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    1900:	6811      	ldr	r1, [r2, #0]
    1902:	6924      	ldr	r4, [r4, #16]
    1904:	4321      	orrs	r1, r4
    1906:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1908:	6813      	ldr	r3, [r2, #0]
    190a:	f043 0610 	orr.w	r6, r3, #16
    190e:	6016      	str	r6, [r2, #0]
    1910:	bd70      	pop	{r4, r5, r6, pc}
    1912:	e7fe      	b.n	1912 <am_hal_uart_config+0x56>
    1914:	4001c024 	.word	0x4001c024
    1918:	4001c028 	.word	0x4001c028
    191c:	4001c02c 	.word	0x4001c02c
    1920:	4001c030 	.word	0x4001c030

00001924 <am_hal_uart_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if ( bEnabledOnly )
    1924:	b911      	cbnz	r1, 192c <am_hal_uart_int_status_get+0x8>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, 0, IES);
    1926:	4b03      	ldr	r3, [pc, #12]	; (1934 <am_hal_uart_int_status_get+0x10>)
    1928:	6818      	ldr	r0, [r3, #0]
    }
}
    192a:	4770      	bx	lr
        return AM_REGn(UART, 0, MIS);
    192c:	4802      	ldr	r0, [pc, #8]	; (1938 <am_hal_uart_int_status_get+0x14>)
    192e:	6800      	ldr	r0, [r0, #0]
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	4001c03c 	.word	0x4001c03c
    1938:	4001c040 	.word	0x4001c040

0000193c <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, 0, IEC) = ui32Interrupt;
    193c:	4b01      	ldr	r3, [pc, #4]	; (1944 <am_hal_uart_int_clear+0x8>)
    193e:	6019      	str	r1, [r3, #0]
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	4001c044 	.word	0x4001c044

00001948 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, 0, IER) |= ui32Interrupt;
    1948:	4a02      	ldr	r2, [pc, #8]	; (1954 <am_hal_uart_int_enable+0xc>)
    194a:	6813      	ldr	r3, [r2, #0]
    194c:	4319      	orrs	r1, r3
    194e:	6011      	str	r1, [r2, #0]
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	4001c038 	.word	0x4001c038

00001958 <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    1958:	4a03      	ldr	r2, [pc, #12]	; (1968 <am_hal_uart_enable+0x10>)
    195a:	6813      	ldr	r3, [r2, #0]
    195c:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    1960:	f040 0101 	orr.w	r1, r0, #1
    1964:	6011      	str	r1, [r2, #0]
    1966:	4770      	bx	lr
    1968:	4001c030 	.word	0x4001c030

0000196c <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    196c:	4a03      	ldr	r2, [pc, #12]	; (197c <am_hal_uart_disable+0x10>)
    196e:	6813      	ldr	r3, [r2, #0]
    1970:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    1974:	f020 0101 	bic.w	r1, r0, #1
    1978:	6011      	str	r1, [r2, #0]
    197a:	4770      	bx	lr
    197c:	4001c030 	.word	0x4001c030

00001980 <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1980:	4907      	ldr	r1, [pc, #28]	; (19a0 <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    1982:	4b08      	ldr	r3, [pc, #32]	; (19a4 <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1984:	680a      	ldr	r2, [r1, #0]
    1986:	f042 0001 	orr.w	r0, r2, #1
    198a:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    198c:	6819      	ldr	r1, [r3, #0]
    198e:	f041 0208 	orr.w	r2, r1, #8
    1992:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1994:	6818      	ldr	r0, [r3, #0]
    1996:	f040 0110 	orr.w	r1, r0, #16
    199a:	6019      	str	r1, [r3, #0]
    199c:	4770      	bx	lr
    199e:	bf00      	nop
    19a0:	4000402c 	.word	0x4000402c
    19a4:	4001c030 	.word	0x4001c030

000019a8 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    19a8:	4a03      	ldr	r2, [pc, #12]	; (19b8 <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    19aa:	4804      	ldr	r0, [pc, #16]	; (19bc <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    19ac:	6813      	ldr	r3, [r2, #0]
    19ae:	f043 0310 	orr.w	r3, r3, #16
    19b2:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    19b4:	6001      	str	r1, [r0, #0]
    19b6:	4770      	bx	lr
    19b8:	4001c02c 	.word	0x4001c02c
    19bc:	4001c034 	.word	0x4001c034

000019c0 <am_hal_uart_char_transmit_polled>:
am_hal_uart_char_transmit_polled(uint32_t ui32Module, char cChar)
{
    //
    // Wait for space, i.e.  TX FIFO EMPTY
    //
    while ( AM_BFRn(UART, 0, FR, TXFF) );
    19c0:	4a03      	ldr	r2, [pc, #12]	; (19d0 <am_hal_uart_char_transmit_polled+0x10>)
    19c2:	6813      	ldr	r3, [r2, #0]
    19c4:	069b      	lsls	r3, r3, #26
    19c6:	d4fc      	bmi.n	19c2 <am_hal_uart_char_transmit_polled+0x2>

    //
    // Write the char.
    //
    AM_REGn(UART, 0, DR) = cChar;
    19c8:	4802      	ldr	r0, [pc, #8]	; (19d4 <am_hal_uart_char_transmit_polled+0x14>)
    19ca:	6001      	str	r1, [r0, #0]
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop
    19d0:	4001c018 	.word	0x4001c018
    19d4:	4001c000 	.word	0x4001c000

000019d8 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    19d8:	4b01      	ldr	r3, [pc, #4]	; (19e0 <am_hal_vcomp_disable+0x8>)
    19da:	2237      	movs	r2, #55	; 0x37
    19dc:	601a      	str	r2, [r3, #0]
    19de:	4770      	bx	lr
    19e0:	4000c008 	.word	0x4000c008

000019e4 <g_pui32CRC32Table>:
    19e4:	00000000 1edc6f41 3db8de82 2364b1c3     ....Ao.....=..d#
    19f4:	7b71bd04 65add245 46c96386 58150cc7     ..q{E..e.c.F...X
    1a04:	f6e37a08 e83f1549 cb5ba48a d587cbcb     .z..I.?...[.....
    1a14:	8d92c70c 934ea84d b02a198e aef676cf     ....M.N...*..v..
    1a24:	f31a9b51 edc6f410 cea245d3 d07e2a92     Q........E...*~.
    1a34:	886b2655 96b74914 b5d3f8d7 ab0f9796     U&k..I..........
    1a44:	05f9e159 1b258e18 38413fdb 269d509a     Y.....%..?A8.P.&
    1a54:	7e885c5d 6054331c 433082df 5deced9e     ]\.~.3T`..0C...]
    1a64:	f8e959e3 e63536a2 c5518761 db8de820     .Y...65.a.Q. ...
    1a74:	8398e4e7 9d448ba6 be203a65 a0fc5524     ......D.e: .$U..
    1a84:	0e0a23eb 10d64caa 33b2fd69 2d6e9228     .#...L..i..3(.n-
    1a94:	757b9eef 6ba7f1ae 48c3406d 561f2f2c     ..{u...km@.H,/.V
    1aa4:	0bf3c2b2 152fadf3 364b1c30 28977371     ....../.0.K6qs.(
    1ab4:	70827fb6 6e5e10f7 4d3aa134 53e6ce75     ...p..^n4.:Mu..S
    1ac4:	fd10b8ba e3ccd7fb c0a86638 de740979     ........8f..y.t.
    1ad4:	866105be 98bd6aff bbd9db3c a505b47d     ..a..j..<...}...
    1ae4:	ef0edc87 f1d2b3c6 d2b60205 cc6a6d44     ............Dmj.
    1af4:	947f6183 8aa30ec2 a9c7bf01 b71bd040     .a..........@...
    1b04:	19eda68f 0731c9ce 2455780d 3a89174c     ......1..xU$L..:
    1b14:	629c1b8b 7c4074ca 5f24c509 41f8aa48     ...b.t@|..$_H..A
    1b24:	1c1447d6 02c82897 21ac9954 3f70f615     .G...(..T..!..p?
    1b34:	6765fad2 79b99593 5add2450 44014b11     ..eg...yP$.Z.K.D
    1b44:	eaf73dde f42b529f d74fe35c c9938c1d     .=...R+.\.O.....
    1b54:	918680da 8f5aef9b ac3e5e58 b2e23119     ......Z.X^>..1..
    1b64:	17e78564 093bea25 2a5f5be6 348334a7     d...%.;..[_*.4.4
    1b74:	6c963860 724a5721 512ee6e2 4ff289a3     `8.l!WJr...Q...O
    1b84:	e104ff6c ffd8902d dcbc21ee c2604eaf     l...-....!...N`.
    1b94:	9a754268 84a92d29 a7cd9cea b911f3ab     hBu.)-..........
    1ba4:	e4fd1e35 fa217174 d945c0b7 c799aff6     5...tq!...E.....
    1bb4:	9f8ca331 8150cc70 a2347db3 bce812f2     1...p.P..}4.....
    1bc4:	121e643d 0cc20b7c 2fa6babf 317ad5fe     =d..|....../..z1
    1bd4:	696fd939 77b3b678 54d707bb 4a0b68fa     9.oix..w...T.h.J
    1be4:	c0c1d64f de1db90e fd7908cd e3a5678c     O.........y..g..
    1bf4:	bbb06b4b a56c040a 8608b5c9 98d4da88     Kk....l.........
    1c04:	3622ac47 28fec306 0b9a72c5 15461d84     G."6...(.r....F.
    1c14:	4d531143 538f7e02 70ebcfc1 6e37a080     C.SM.~.S...p..7n
    1c24:	33db4d1e 2d07225f 0e63939c 10bffcdd     .M.3_".-..c.....
    1c34:	48aaf01a 56769f5b 75122e98 6bce41d9     ...H[.vV...u.A.k
    1c44:	c5383716 dbe45857 f880e994 e65c86d5     .78.WX........\.
    1c54:	be498a12 a095e553 83f15490 9d2d3bd1     ..I.S....T...;-.
    1c64:	38288fac 26f4e0ed 0590512e 1b4c3e6f     ..(8...&.Q..o>L.
    1c74:	435932a8 5d855de9 7ee1ec2a 603d836b     .2YC.].]*..~k.=`
    1c84:	cecbf5a4 d0179ae5 f3732b26 edaf4467     ........&+s.gD..
    1c94:	b5ba48a0 ab6627e1 88029622 96def963     .H...'f."...c...
    1ca4:	cb3214fd d5ee7bbc f68aca7f e856a53e     ..2..{......>.V.
    1cb4:	b043a9f9 ae9fc6b8 8dfb777b 9327183a     ..C.....{w..:.'.
    1cc4:	3dd16ef5 230d01b4 0069b077 1eb5df36     .n.=...#w.i.6...
    1cd4:	46a0d3f1 587cbcb0 7b180d73 65c46232     ...F..|Xs..{2b.e
    1ce4:	2fcf0ac8 31136589 1277d44a 0cabbb0b     .../.e.1J.w.....
    1cf4:	54beb7cc 4a62d88d 6906694e 77da060f     ...T..bJNi.i...w
    1d04:	d92c70c0 c7f01f81 e494ae42 fa48c103     .p,.....B.....H.
    1d14:	a25dcdc4 bc81a285 9fe51346 81397c07     ..].....F....|9.
    1d24:	dcd59199 c209fed8 e16d4f1b ffb1205a     .........Om.Z ..
    1d34:	a7a42c9d b97843dc 9a1cf21f 84c09d5e     .,...Cx.....^...
    1d44:	2a36eb91 34ea84d0 178e3513 09525a52     ..6*...4.5..RZR.
    1d54:	51475695 4f9b39d4 6cff8817 7223e756     .VGQ.9.O...lV.#r
    1d64:	d726532b c9fa3c6a ea9e8da9 f442e2e8     +S&.j<........B.
    1d74:	ac57ee2f b28b816e 91ef30ad 8f335fec     /.W.n....0..._3.
    1d84:	21c52923 3f194662 1c7df7a1 02a198e0     #).!bF.?..}.....
    1d94:	5ab49427 4468fb66 670c4aa5 79d025e4     '..Zf.hD.J.g.%.y
    1da4:	243cc87a 3ae0a73b 198416f8 075879b9     z.<$;..:.....yX.
    1db4:	5f4d757e 41911a3f 62f5abfc 7c29c4bd     ~uM_?..A...b..)|
    1dc4:	d2dfb272 cc03dd33 ef676cf0 f1bb03b1     r...3....lg.....
    1dd4:	a9ae0f76 b7726037 9416d1f4 8acabeb5     v...7`r.........

00001de4 <CSWTCH.4>:
    1de4:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1df4:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.

00001e04 <am_hal_mcuctrl_flash_size>:
    1e04:	00008000 00010000 00020000 00040000     ................
    1e14:	00080000 00100000 00200000 00000000     .......... .....
	...
    1e40:	00004000                                .@..

00001e44 <am_hal_mcuctrl_sram_size>:
    1e44:	00008000 00010000 00020000 00040000     ................
    1e54:	00080000 00100000 00200000 00000000     .......... .....
	...
    1e80:	00004000                                .@..
