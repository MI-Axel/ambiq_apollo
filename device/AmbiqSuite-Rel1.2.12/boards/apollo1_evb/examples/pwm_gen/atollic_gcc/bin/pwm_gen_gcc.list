
pwm_gen_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001768  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  00011768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001000  00001768  00021000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY
  5 .debug_info   00005619  00000000  00000000  0001179f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b94  00000000  00000000  00016db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000690  00000000  00000000  0001894c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000920  00000000  00000000  00018fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003451  00000000  00000000  000198fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020e2  00000000  00000000  0001cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0001ee2f  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000fd4  00000000  00000000  0001eeac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a32  00000000  00000000  0001fe80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 3d 02 00 00 a5 02 00 00 e5 02 00 00     ....=...........
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	ab 02 00 00 ab 02 00 00 00 00 00 00 ab 02 00 00     ................
      3c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      4c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      5c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 21 01 00 00     ............!...
      6c:	ab 02 00 00 ab 02 00 00 ab 02 00 00 ab 02 00 00     ................
      7c:	ab 02 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <am_ctimer_isr>:
// Timer Interrupt Serive Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
    //
    // Clear the interrupt that got us here.
    //
    am_hal_ctimer_int_clear(AM_BSP_PWM_LED_TIMER_INT);
     124:	2002      	movs	r0, #2
     126:	f001 f915 	bl	1354 <am_hal_ctimer_int_clear>

    //
    // Now set new PWM half-period for the LED.
    //
    am_hal_ctimer_period_set(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG,
     12a:	4b09      	ldr	r3, [pc, #36]	; (150 <am_ctimer_isr+0x30>)
     12c:	681b      	ldr	r3, [r3, #0]
     12e:	4a09      	ldr	r2, [pc, #36]	; (154 <am_ctimer_isr+0x34>)
     130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     134:	2240      	movs	r2, #64	; 0x40
     136:	4908      	ldr	r1, [pc, #32]	; (158 <am_ctimer_isr+0x38>)
     138:	2000      	movs	r0, #0
     13a:	f001 f8c5 	bl	12c8 <am_hal_ctimer_period_set>
                             64, g_pui32Brightness[g_ui32Index]);

    //
    // Set up the LED duty cycle for the next pulse.
    //
    g_ui32Index = (g_ui32Index + 1) % 64;
     13e:	4b04      	ldr	r3, [pc, #16]	; (150 <am_ctimer_isr+0x30>)
     140:	681b      	ldr	r3, [r3, #0]
     142:	3301      	adds	r3, #1
     144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     148:	4a01      	ldr	r2, [pc, #4]	; (150 <am_ctimer_isr+0x30>)
     14a:	6013      	str	r3, [r2, #0]
}
     14c:	bf00      	nop
     14e:	bd80      	pop	{r7, pc}
     150:	10001000 	.word	0x10001000
     154:	00001648 	.word	0x00001648
     158:	ffff0000 	.word	0xffff0000

0000015c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     15c:	b580      	push	{r7, lr}
     15e:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     160:	2000      	movs	r0, #0
     162:	f001 f853 	bl	120c <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     166:	f000 ffe9 	bl	113c <am_bsp_low_power_init>

    //
    // Among other things, am_bsp_low_power_init() stops the XT oscillator,
    // which is needed for this example.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     16a:	2001      	movs	r0, #1
     16c:	f001 f86a 	bl	1244 <am_hal_clkgen_osc_start>

    //
    // Configure the pins for this example.
    //
    am_bsp_pin_enable(PWM_LED);
     170:	4b2a      	ldr	r3, [pc, #168]	; (21c <main+0xc0>)
     172:	2273      	movs	r2, #115	; 0x73
     174:	601a      	str	r2, [r3, #0]
     176:	4a2a      	ldr	r2, [pc, #168]	; (220 <main+0xc4>)
     178:	4b29      	ldr	r3, [pc, #164]	; (220 <main+0xc4>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     180:	6013      	str	r3, [r2, #0]
     182:	4a28      	ldr	r2, [pc, #160]	; (224 <main+0xc8>)
     184:	4b27      	ldr	r3, [pc, #156]	; (224 <main+0xc8>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18c:	f443 1390 	orr.w	r3, r3, #1179648	; 0x120000
     190:	6013      	str	r3, [r2, #0]
     192:	4b22      	ldr	r3, [pc, #136]	; (21c <main+0xc0>)
     194:	2200      	movs	r2, #0
     196:	601a      	str	r2, [r3, #0]

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     198:	4823      	ldr	r0, [pc, #140]	; (228 <main+0xcc>)
     19a:	f000 f923 	bl	3e4 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     19e:	4b1f      	ldr	r3, [pc, #124]	; (21c <main+0xc0>)
     1a0:	2273      	movs	r2, #115	; 0x73
     1a2:	601a      	str	r2, [r3, #0]
     1a4:	4a21      	ldr	r2, [pc, #132]	; (22c <main+0xd0>)
     1a6:	4b21      	ldr	r3, [pc, #132]	; (22c <main+0xd0>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1ae:	6013      	str	r3, [r2, #0]
     1b0:	4a1f      	ldr	r2, [pc, #124]	; (230 <main+0xd4>)
     1b2:	4b1f      	ldr	r3, [pc, #124]	; (230 <main+0xd4>)
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1be:	6013      	str	r3, [r2, #0]
     1c0:	4b16      	ldr	r3, [pc, #88]	; (21c <main+0xc0>)
     1c2:	2200      	movs	r2, #0
     1c4:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1c6:	f001 f8fb 	bl	13c0 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1ca:	f000 ffc9 	bl	1160 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     1ce:	f000 ffab 	bl	1128 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("PWM Example\n\n");
     1d2:	4818      	ldr	r0, [pc, #96]	; (234 <main+0xd8>)
     1d4:	f000 ff8a 	bl	10ec <am_util_stdio_printf>
    am_util_delay_ms(10);
     1d8:	200a      	movs	r0, #10
     1da:	f000 f869 	bl	2b0 <am_util_delay_ms>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     1de:	f000 ffeb 	bl	11b8 <am_bsp_debug_printf_disable>

    //
    // Configure a timer to drive the LED.
    //
    am_hal_ctimer_config_single(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG,
     1e2:	f44f 62da 	mov.w	r2, #1744	; 0x6d0
     1e6:	4914      	ldr	r1, [pc, #80]	; (238 <main+0xdc>)
     1e8:	2000      	movs	r0, #0
     1ea:	f001 f83f 	bl	126c <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_PIN_ENABLE));

    //
    // Set up initial timer period.
    //
    am_hal_ctimer_period_set(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG,
     1ee:	2320      	movs	r3, #32
     1f0:	2240      	movs	r2, #64	; 0x40
     1f2:	4911      	ldr	r1, [pc, #68]	; (238 <main+0xdc>)
     1f4:	2000      	movs	r0, #0
     1f6:	f001 f867 	bl	12c8 <am_hal_ctimer_period_set>
                             64, 32);

    //
    // Enable interrupts for the Timer we are using on this board.
    //
    am_hal_ctimer_int_enable(AM_BSP_PWM_LED_TIMER_INT);
     1fa:	2002      	movs	r0, #2
     1fc:	f001 f8a2 	bl	1344 <am_hal_ctimer_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     200:	201a      	movs	r0, #26
     202:	f001 f8b1 	bl	1368 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     206:	f001 f8d7 	bl	13b8 <am_hal_interrupt_master_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(AM_BSP_PWM_LED_TIMER, AM_BSP_PWM_LED_TIMER_SEG);
     20a:	490b      	ldr	r1, [pc, #44]	; (238 <main+0xdc>)
     20c:	2000      	movs	r0, #0
     20e:	f001 f849 	bl	12a4 <am_hal_ctimer_start>
    {

        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     212:	2001      	movs	r0, #1
     214:	f001 f988 	bl	1528 <am_hal_sysctrl_sleep>
     218:	e7fb      	b.n	212 <main+0xb6>
     21a:	bf00      	nop
     21c:	40010060 	.word	0x40010060
     220:	4001004c 	.word	0x4001004c
     224:	40010018 	.word	0x40010018
     228:	00001209 	.word	0x00001209
     22c:	40010054 	.word	0x40010054
     230:	40010028 	.word	0x40010028
     234:	00001624 	.word	0x00001624
     238:	ffff0000 	.word	0xffff0000

0000023c <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     23c:	4811      	ldr	r0, [pc, #68]	; (284 <zero_loop+0x12>)
     23e:	4912      	ldr	r1, [pc, #72]	; (288 <zero_loop+0x16>)
     240:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     242:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     246:	4811      	ldr	r0, [pc, #68]	; (28c <zero_loop+0x1a>)
     248:	6801      	ldr	r1, [r0, #0]
     24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     24e:	6001      	str	r1, [r0, #0]
     250:	f3bf 8f4f 	dsb	sy
     254:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     258:	480d      	ldr	r0, [pc, #52]	; (290 <zero_loop+0x1e>)
     25a:	490e      	ldr	r1, [pc, #56]	; (294 <zero_loop+0x22>)
     25c:	4a0e      	ldr	r2, [pc, #56]	; (298 <zero_loop+0x26>)

0000025e <copy_loop>:
     25e:	f850 3b04 	ldr.w	r3, [r0], #4
     262:	f841 3b04 	str.w	r3, [r1], #4
     266:	4291      	cmp	r1, r2
     268:	dbf9      	blt.n	25e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     26a:	480c      	ldr	r0, [pc, #48]	; (29c <zero_loop+0x2a>)
     26c:	490c      	ldr	r1, [pc, #48]	; (2a0 <zero_loop+0x2e>)
     26e:	f04f 0200 	mov.w	r2, #0

00000272 <zero_loop>:
     272:	4288      	cmp	r0, r1
     274:	bfb8      	it	lt
     276:	f840 2b04 	strlt.w	r2, [r0], #4
     27a:	dbfa      	blt.n	272 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     27c:	f7ff ff6e 	bl	15c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     280:	be00      	bkpt	0x0000
}
     282:	bf00      	nop
     284:	e000ed08 	.word	0xe000ed08
     288:	00000000 	.word	0x00000000
     28c:	e000ed88 	.word	0xe000ed88
     290:	00001768 	.word	0x00001768
     294:	10001000 	.word	0x10001000
     298:	10001000 	.word	0x10001000
     29c:	10001000 	.word	0x10001000
     2a0:	10001110 	.word	0x10001110

000002a4 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     2a4:	b480      	push	{r7}
     2a6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     2a8:	e7fe      	b.n	2a8 <am_nmi_isr+0x4>

000002aa <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     2aa:	b480      	push	{r7}
     2ac:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     2ae:	e7fe      	b.n	2ae <am_adc_isr+0x4>

000002b0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b084      	sub	sp, #16
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     2b8:	f000 ffb8 	bl	122c <am_hal_clkgen_sysclk_get>
     2bc:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     2be:	68fb      	ldr	r3, [r7, #12]
     2c0:	4a07      	ldr	r2, [pc, #28]	; (2e0 <am_util_delay_ms+0x30>)
     2c2:	fba2 2303 	umull	r2, r3, r2, r3
     2c6:	099b      	lsrs	r3, r3, #6
     2c8:	687a      	ldr	r2, [r7, #4]
     2ca:	fb02 f303 	mul.w	r3, r2, r3
     2ce:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     2d0:	68b8      	ldr	r0, [r7, #8]
     2d2:	f001 f845 	bl	1360 <am_hal_flash_delay>
}
     2d6:	bf00      	nop
     2d8:	3710      	adds	r7, #16
     2da:	46bd      	mov	sp, r7
     2dc:	bd80      	pop	{r7, pc}
     2de:	bf00      	nop
     2e0:	057619f1 	.word	0x057619f1

000002e4 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     2e4:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     2e6:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     2e8:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     2ea:	f000 f809 	bl	300 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     2ee:	bd01      	pop	{r0, pc}
}
     2f0:	bf00      	nop
     2f2:	4618      	mov	r0, r3

000002f4 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     2f4:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     2f6:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     2f8:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     2fa:	4770      	bx	lr
}
     2fc:	bf00      	nop
     2fe:	4618      	mov	r0, r3

00000300 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     300:	b580      	push	{r7, lr}
     302:	b096      	sub	sp, #88	; 0x58
     304:	af00      	add	r7, sp, #0
     306:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     308:	f107 030c 	add.w	r3, r7, #12
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
     310:	605a      	str	r2, [r3, #4]
     312:	609a      	str	r2, [r3, #8]
     314:	60da      	str	r2, [r3, #12]
     316:	611a      	str	r2, [r3, #16]
     318:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     31a:	2300      	movs	r3, #0
     31c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     320:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     322:	4b2e      	ldr	r3, [pc, #184]	; (3dc <am_util_faultisr_collect_data+0xdc>)
     324:	681b      	ldr	r3, [r3, #0]
     326:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     32a:	b2db      	uxtb	r3, r3
     32c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     332:	0a1b      	lsrs	r3, r3, #8
     334:	b2db      	uxtb	r3, r3
     336:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     33c:	0c1b      	lsrs	r3, r3, #16
     33e:	b29b      	uxth	r3, r3
     340:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     344:	4b26      	ldr	r3, [pc, #152]	; (3e0 <am_util_faultisr_collect_data+0xe0>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     34a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     34e:	b2db      	uxtb	r3, r3
     350:	f003 0302 	and.w	r3, r3, #2
     354:	2b00      	cmp	r3, #0
     356:	d005      	beq.n	364 <am_util_faultisr_collect_data+0x64>
     358:	6879      	ldr	r1, [r7, #4]
     35a:	2006      	movs	r0, #6
     35c:	f7ff ffca 	bl	2f4 <getStackedReg>
     360:	4603      	mov	r3, r0
     362:	e001      	b.n	368 <am_util_faultisr_collect_data+0x68>
     364:	f04f 33ff 	mov.w	r3, #4294967295
     368:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     36a:	6879      	ldr	r1, [r7, #4]
     36c:	2000      	movs	r0, #0
     36e:	f7ff ffc1 	bl	2f4 <getStackedReg>
     372:	4603      	mov	r3, r0
     374:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     376:	6879      	ldr	r1, [r7, #4]
     378:	2001      	movs	r0, #1
     37a:	f7ff ffbb 	bl	2f4 <getStackedReg>
     37e:	4603      	mov	r3, r0
     380:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     382:	6879      	ldr	r1, [r7, #4]
     384:	2002      	movs	r0, #2
     386:	f7ff ffb5 	bl	2f4 <getStackedReg>
     38a:	4603      	mov	r3, r0
     38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     38e:	6879      	ldr	r1, [r7, #4]
     390:	2003      	movs	r0, #3
     392:	f7ff ffaf 	bl	2f4 <getStackedReg>
     396:	4603      	mov	r3, r0
     398:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     39a:	6879      	ldr	r1, [r7, #4]
     39c:	2004      	movs	r0, #4
     39e:	f7ff ffa9 	bl	2f4 <getStackedReg>
     3a2:	4603      	mov	r3, r0
     3a4:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3a6:	6879      	ldr	r1, [r7, #4]
     3a8:	2005      	movs	r0, #5
     3aa:	f7ff ffa3 	bl	2f4 <getStackedReg>
     3ae:	4603      	mov	r3, r0
     3b0:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3b2:	6879      	ldr	r1, [r7, #4]
     3b4:	2006      	movs	r0, #6
     3b6:	f7ff ff9d 	bl	2f4 <getStackedReg>
     3ba:	4603      	mov	r3, r0
     3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     3be:	6879      	ldr	r1, [r7, #4]
     3c0:	2007      	movs	r0, #7
     3c2:	f7ff ff97 	bl	2f4 <getStackedReg>
     3c6:	4603      	mov	r3, r0
     3c8:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     3ca:	f107 030c 	add.w	r3, r7, #12
     3ce:	4618      	mov	r0, r3
     3d0:	f001 f852 	bl	1478 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     3d4:	2300      	movs	r3, #0
     3d6:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     3d8:	e7fe      	b.n	3d8 <am_util_faultisr_collect_data+0xd8>
     3da:	bf00      	nop
     3dc:	e000ed28 	.word	0xe000ed28
     3e0:	e000ed38 	.word	0xe000ed38

000003e4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     3e4:	b480      	push	{r7}
     3e6:	b083      	sub	sp, #12
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     3ec:	4a04      	ldr	r2, [pc, #16]	; (400 <am_util_stdio_printf_init+0x1c>)
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	6013      	str	r3, [r2, #0]
}
     3f2:	bf00      	nop
     3f4:	370c      	adds	r7, #12
     3f6:	46bd      	mov	sp, r7
     3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     3fc:	4770      	bx	lr
     3fe:	bf00      	nop
     400:	1000110c 	.word	0x1000110c

00000404 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     404:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     408:	b096      	sub	sp, #88	; 0x58
     40a:	af00      	add	r7, sp, #0
     40c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     410:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     414:	0025      	movs	r5, r4
     416:	2600      	movs	r6, #0
     418:	ea55 0306 	orrs.w	r3, r5, r6
     41c:	f000 80a0 	beq.w	560 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     420:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     424:	0862      	lsrs	r2, r4, #1
     426:	ea4f 0133 	mov.w	r1, r3, rrx
     42a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     42e:	ea4f 0893 	mov.w	r8, r3, lsr #2
     432:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     436:	ea4f 0994 	mov.w	r9, r4, lsr #2
     43a:	eb11 0308 	adds.w	r3, r1, r8
     43e:	eb42 0409 	adc.w	r4, r2, r9
     442:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     446:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     44a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     44e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     452:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     456:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     45a:	eb13 030a 	adds.w	r3, r3, sl
     45e:	eb44 040b 	adc.w	r4, r4, fp
     462:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     466:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     46a:	0a1a      	lsrs	r2, r3, #8
     46c:	62ba      	str	r2, [r7, #40]	; 0x28
     46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     470:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     474:	62ba      	str	r2, [r7, #40]	; 0x28
     476:	0a23      	lsrs	r3, r4, #8
     478:	62fb      	str	r3, [r7, #44]	; 0x2c
     47a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     47e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     482:	18c9      	adds	r1, r1, r3
     484:	eb42 0204 	adc.w	r2, r2, r4
     488:	460b      	mov	r3, r1
     48a:	4614      	mov	r4, r2
     48c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     490:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     494:	0c1a      	lsrs	r2, r3, #16
     496:	623a      	str	r2, [r7, #32]
     498:	6a3a      	ldr	r2, [r7, #32]
     49a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     49e:	623a      	str	r2, [r7, #32]
     4a0:	0c23      	lsrs	r3, r4, #16
     4a2:	627b      	str	r3, [r7, #36]	; 0x24
     4a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     4ac:	18c9      	adds	r1, r1, r3
     4ae:	eb42 0204 	adc.w	r2, r2, r4
     4b2:	460b      	mov	r3, r1
     4b4:	4614      	mov	r4, r2
     4b6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     4ba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4be:	0023      	movs	r3, r4
     4c0:	603b      	str	r3, [r7, #0]
     4c2:	2300      	movs	r3, #0
     4c4:	607b      	str	r3, [r7, #4]
     4c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4ca:	e897 0006 	ldmia.w	r7, {r1, r2}
     4ce:	18c9      	adds	r1, r1, r3
     4d0:	eb42 0204 	adc.w	r2, r2, r4
     4d4:	460b      	mov	r3, r1
     4d6:	4614      	mov	r4, r2
     4d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     4dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4e0:	08da      	lsrs	r2, r3, #3
     4e2:	613a      	str	r2, [r7, #16]
     4e4:	693a      	ldr	r2, [r7, #16]
     4e6:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     4ea:	613a      	str	r2, [r7, #16]
     4ec:	08e3      	lsrs	r3, r4, #3
     4ee:	617b      	str	r3, [r7, #20]
     4f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     4f4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     4f8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     4fc:	460b      	mov	r3, r1
     4fe:	4614      	mov	r4, r2
     500:	00a0      	lsls	r0, r4, #2
     502:	60f8      	str	r0, [r7, #12]
     504:	68f8      	ldr	r0, [r7, #12]
     506:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     50a:	60f8      	str	r0, [r7, #12]
     50c:	009b      	lsls	r3, r3, #2
     50e:	60bb      	str	r3, [r7, #8]
     510:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     514:	185b      	adds	r3, r3, r1
     516:	eb44 0402 	adc.w	r4, r4, r2
     51a:	18db      	adds	r3, r3, r3
     51c:	eb44 0404 	adc.w	r4, r4, r4
     520:	4619      	mov	r1, r3
     522:	4622      	mov	r2, r4
     524:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     528:	1a5b      	subs	r3, r3, r1
     52a:	eb64 0402 	sbc.w	r4, r4, r2
     52e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     532:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     536:	3306      	adds	r3, #6
     538:	f144 0400 	adc.w	r4, r4, #0
     53c:	091a      	lsrs	r2, r3, #4
     53e:	61ba      	str	r2, [r7, #24]
     540:	69ba      	ldr	r2, [r7, #24]
     542:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     546:	61ba      	str	r2, [r7, #24]
     548:	0923      	lsrs	r3, r4, #4
     54a:	61fb      	str	r3, [r7, #28]
     54c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     550:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     554:	18c9      	adds	r1, r1, r3
     556:	eb42 0204 	adc.w	r2, r2, r4
     55a:	460b      	mov	r3, r1
     55c:	4614      	mov	r4, r2
     55e:	e029      	b.n	5b4 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     562:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     566:	085a      	lsrs	r2, r3, #1
     568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     56a:	089b      	lsrs	r3, r3, #2
     56c:	4413      	add	r3, r2
     56e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     572:	091b      	lsrs	r3, r3, #4
     574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     576:	4413      	add	r3, r2
     578:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     57c:	0a1b      	lsrs	r3, r3, #8
     57e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     580:	4413      	add	r3, r2
     582:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     586:	0c1b      	lsrs	r3, r3, #16
     588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     58a:	4413      	add	r3, r2
     58c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     590:	08db      	lsrs	r3, r3, #3
     592:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     596:	4613      	mov	r3, r2
     598:	009b      	lsls	r3, r3, #2
     59a:	4413      	add	r3, r2
     59c:	005b      	lsls	r3, r3, #1
     59e:	461a      	mov	r2, r3
     5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5a2:	1a9b      	subs	r3, r3, r2
     5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5a8:	3306      	adds	r3, #6
     5aa:	091a      	lsrs	r2, r3, #4
     5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ae:	4413      	add	r3, r2
     5b0:	f04f 0400 	mov.w	r4, #0
    }
}
     5b4:	4618      	mov	r0, r3
     5b6:	4621      	mov	r1, r4
     5b8:	3758      	adds	r7, #88	; 0x58
     5ba:	46bd      	mov	sp, r7
     5bc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5c0:	4770      	bx	lr

000005c2 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     5c2:	b590      	push	{r4, r7, lr}
     5c4:	b085      	sub	sp, #20
     5c6:	af00      	add	r7, sp, #0
     5c8:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     5cc:	683a      	ldr	r2, [r7, #0]
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	4313      	orrs	r3, r2
     5d2:	2b00      	cmp	r3, #0
     5d4:	bf0c      	ite	eq
     5d6:	2301      	moveq	r3, #1
     5d8:	2300      	movne	r3, #0
     5da:	b2db      	uxtb	r3, r3
     5dc:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     5de:	e008      	b.n	5f2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     5e0:	e9d7 0100 	ldrd	r0, r1, [r7]
     5e4:	f7ff ff0e 	bl	404 <divu64_10>
     5e8:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     5ec:	68fb      	ldr	r3, [r7, #12]
     5ee:	3301      	adds	r3, #1
     5f0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     5f2:	e897 0018 	ldmia.w	r7, {r3, r4}
     5f6:	4323      	orrs	r3, r4
     5f8:	d1f2      	bne.n	5e0 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     5fa:	68fb      	ldr	r3, [r7, #12]
}
     5fc:	4618      	mov	r0, r3
     5fe:	3714      	adds	r7, #20
     600:	46bd      	mov	sp, r7
     602:	bd90      	pop	{r4, r7, pc}

00000604 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     604:	b590      	push	{r4, r7, lr}
     606:	b083      	sub	sp, #12
     608:	af00      	add	r7, sp, #0
     60a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     60e:	e897 0018 	ldmia.w	r7, {r3, r4}
     612:	2b00      	cmp	r3, #0
     614:	f174 0300 	sbcs.w	r3, r4, #0
     618:	da06      	bge.n	628 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     61a:	e897 0018 	ldmia.w	r7, {r3, r4}
     61e:	425b      	negs	r3, r3
     620:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     624:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     628:	e897 0018 	ldmia.w	r7, {r3, r4}
     62c:	4618      	mov	r0, r3
     62e:	4621      	mov	r1, r4
     630:	f7ff ffc7 	bl	5c2 <ndigits_in_u64>
     634:	4603      	mov	r3, r0
}
     636:	4618      	mov	r0, r3
     638:	370c      	adds	r7, #12
     63a:	46bd      	mov	sp, r7
     63c:	bd90      	pop	{r4, r7, pc}

0000063e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     63e:	b490      	push	{r4, r7}
     640:	b084      	sub	sp, #16
     642:	af00      	add	r7, sp, #0
     644:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     648:	6839      	ldr	r1, [r7, #0]
     64a:	687a      	ldr	r2, [r7, #4]
     64c:	430a      	orrs	r2, r1
     64e:	2a00      	cmp	r2, #0
     650:	bf0c      	ite	eq
     652:	2201      	moveq	r2, #1
     654:	2200      	movne	r2, #0
     656:	b2d2      	uxtb	r2, r2
     658:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     65a:	e00a      	b.n	672 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     65c:	e897 0006 	ldmia.w	r7, {r1, r2}
     660:	090b      	lsrs	r3, r1, #4
     662:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     666:	0914      	lsrs	r4, r2, #4
     668:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     66c:	68fa      	ldr	r2, [r7, #12]
     66e:	3201      	adds	r2, #1
     670:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     672:	e897 0006 	ldmia.w	r7, {r1, r2}
     676:	430a      	orrs	r2, r1
     678:	d1f0      	bne.n	65c <ndigits_in_hex+0x1e>
    }

    return iDigits;
     67a:	68fb      	ldr	r3, [r7, #12]
}
     67c:	4618      	mov	r0, r3
     67e:	3710      	adds	r7, #16
     680:	46bd      	mov	sp, r7
     682:	bc90      	pop	{r4, r7}
     684:	4770      	bx	lr

00000686 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     686:	b480      	push	{r7}
     688:	b087      	sub	sp, #28
     68a:	af00      	add	r7, sp, #0
     68c:	6078      	str	r0, [r7, #4]
     68e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     690:	2300      	movs	r3, #0
     692:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     694:	2300      	movs	r3, #0
     696:	613b      	str	r3, [r7, #16]
     698:	2300      	movs	r3, #0
     69a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	781b      	ldrb	r3, [r3, #0]
     6a0:	2b2d      	cmp	r3, #45	; 0x2d
     6a2:	d11b      	bne.n	6dc <decstr_to_int+0x56>
    {
        bNeg = true;
     6a4:	2301      	movs	r3, #1
     6a6:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	3301      	adds	r3, #1
     6ac:	607b      	str	r3, [r7, #4]
        uCnt++;
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	3301      	adds	r3, #1
     6b2:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     6b4:	e012      	b.n	6dc <decstr_to_int+0x56>
    {
        ++uCnt;
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	3301      	adds	r3, #1
     6ba:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     6bc:	693a      	ldr	r2, [r7, #16]
     6be:	4613      	mov	r3, r2
     6c0:	009b      	lsls	r3, r3, #2
     6c2:	4413      	add	r3, r2
     6c4:	005b      	lsls	r3, r3, #1
     6c6:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	781b      	ldrb	r3, [r3, #0]
     6cc:	461a      	mov	r2, r3
     6ce:	693b      	ldr	r3, [r7, #16]
     6d0:	4413      	add	r3, r2
     6d2:	3b30      	subs	r3, #48	; 0x30
     6d4:	613b      	str	r3, [r7, #16]
        pcStr++;
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	3301      	adds	r3, #1
     6da:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	781b      	ldrb	r3, [r3, #0]
     6e0:	2b2f      	cmp	r3, #47	; 0x2f
     6e2:	d903      	bls.n	6ec <decstr_to_int+0x66>
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b39      	cmp	r3, #57	; 0x39
     6ea:	d9e4      	bls.n	6b6 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d002      	beq.n	6f8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	68fa      	ldr	r2, [r7, #12]
     6f6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     6f8:	7dfb      	ldrb	r3, [r7, #23]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d002      	beq.n	704 <decstr_to_int+0x7e>
     6fe:	693b      	ldr	r3, [r7, #16]
     700:	425b      	negs	r3, r3
     702:	e000      	b.n	706 <decstr_to_int+0x80>
     704:	693b      	ldr	r3, [r7, #16]
}
     706:	4618      	mov	r0, r3
     708:	371c      	adds	r7, #28
     70a:	46bd      	mov	sp, r7
     70c:	f85d 7b04 	ldr.w	r7, [sp], #4
     710:	4770      	bx	lr

00000712 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     712:	b590      	push	{r4, r7, lr}
     714:	b091      	sub	sp, #68	; 0x44
     716:	af00      	add	r7, sp, #0
     718:	e9c7 0102 	strd	r0, r1, [r7, #8]
     71c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     71e:	2300      	movs	r3, #0
     720:	63fb      	str	r3, [r7, #60]	; 0x3c
     722:	2300      	movs	r3, #0
     724:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     72a:	f7ff fe6b 	bl	404 <divu64_10>
     72e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     732:	68b9      	ldr	r1, [r7, #8]
     734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     736:	4613      	mov	r3, r2
     738:	009b      	lsls	r3, r3, #2
     73a:	4413      	add	r3, r2
     73c:	005b      	lsls	r3, r3, #1
     73e:	1acb      	subs	r3, r1, r3
     740:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     744:	1c5a      	adds	r2, r3, #1
     746:	63fa      	str	r2, [r7, #60]	; 0x3c
     748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     74a:	b2d2      	uxtb	r2, r2
     74c:	3230      	adds	r2, #48	; 0x30
     74e:	b2d2      	uxtb	r2, r2
     750:	f107 0140 	add.w	r1, r7, #64	; 0x40
     754:	440b      	add	r3, r1
     756:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     75a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     75e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     762:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     766:	4323      	orrs	r3, r4
     768:	d1dd      	bne.n	726 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     76c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     76e:	687b      	ldr	r3, [r7, #4]
     770:	2b00      	cmp	r3, #0
     772:	d011      	beq.n	798 <uint64_to_str+0x86>
    {
        while ( ix-- )
     774:	e008      	b.n	788 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     776:	687b      	ldr	r3, [r7, #4]
     778:	1c5a      	adds	r2, r3, #1
     77a:	607a      	str	r2, [r7, #4]
     77c:	f107 0110 	add.w	r1, r7, #16
     780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     782:	440a      	add	r2, r1
     784:	7812      	ldrb	r2, [r2, #0]
     786:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     78a:	1e5a      	subs	r2, r3, #1
     78c:	63fa      	str	r2, [r7, #60]	; 0x3c
     78e:	2b00      	cmp	r3, #0
     790:	d1f1      	bne.n	776 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     792:	687b      	ldr	r3, [r7, #4]
     794:	2200      	movs	r2, #0
     796:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     79a:	4618      	mov	r0, r3
     79c:	3744      	adds	r7, #68	; 0x44
     79e:	46bd      	mov	sp, r7
     7a0:	bd90      	pop	{r4, r7, pc}

000007a2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     7a2:	b4b0      	push	{r4, r5, r7}
     7a4:	b08d      	sub	sp, #52	; 0x34
     7a6:	af00      	add	r7, sp, #0
     7a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
     7ac:	607a      	str	r2, [r7, #4]
     7ae:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     7b0:	2300      	movs	r3, #0
     7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     7b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     7b8:	4313      	orrs	r3, r2
     7ba:	d131      	bne.n	820 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7be:	1c5a      	adds	r2, r3, #1
     7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
     7c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
     7c6:	4413      	add	r3, r2
     7c8:	2230      	movs	r2, #48	; 0x30
     7ca:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     7ce:	e027      	b.n	820 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     7d0:	7a3b      	ldrb	r3, [r7, #8]
     7d2:	f003 030f 	and.w	r3, r3, #15
     7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     7da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     7de:	2b09      	cmp	r3, #9
     7e0:	d90a      	bls.n	7f8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     7e2:	78fb      	ldrb	r3, [r7, #3]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d001      	beq.n	7ec <uint64_to_hexstr+0x4a>
     7e8:	2227      	movs	r2, #39	; 0x27
     7ea:	e000      	b.n	7ee <uint64_to_hexstr+0x4c>
     7ec:	2207      	movs	r2, #7
     7ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     7f2:	4413      	add	r3, r2
     7f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7fa:	1c5a      	adds	r2, r3, #1
     7fc:	62fa      	str	r2, [r7, #44]	; 0x2c
     7fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     802:	3230      	adds	r2, #48	; 0x30
     804:	b2d2      	uxtb	r2, r2
     806:	f107 0130 	add.w	r1, r7, #48	; 0x30
     80a:	440b      	add	r3, r1
     80c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     814:	0914      	lsrs	r4, r2, #4
     816:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     81a:	091d      	lsrs	r5, r3, #4
     81c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     824:	4313      	orrs	r3, r2
     826:	d1d3      	bne.n	7d0 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     82a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	2b00      	cmp	r3, #0
     830:	d011      	beq.n	856 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     832:	e008      	b.n	846 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     834:	687b      	ldr	r3, [r7, #4]
     836:	1c5a      	adds	r2, r3, #1
     838:	607a      	str	r2, [r7, #4]
     83a:	f107 0110 	add.w	r1, r7, #16
     83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     840:	440a      	add	r2, r1
     842:	7812      	ldrb	r2, [r2, #0]
     844:	701a      	strb	r2, [r3, #0]
        while (ix--)
     846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     848:	1e5a      	subs	r2, r3, #1
     84a:	62fa      	str	r2, [r7, #44]	; 0x2c
     84c:	2b00      	cmp	r3, #0
     84e:	d1f1      	bne.n	834 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     850:	687b      	ldr	r3, [r7, #4]
     852:	2200      	movs	r2, #0
     854:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     858:	4618      	mov	r0, r3
     85a:	3734      	adds	r7, #52	; 0x34
     85c:	46bd      	mov	sp, r7
     85e:	bcb0      	pop	{r4, r5, r7}
     860:	4770      	bx	lr

00000862 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     862:	b480      	push	{r7}
     864:	b085      	sub	sp, #20
     866:	af00      	add	r7, sp, #0
     868:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     86a:	2300      	movs	r3, #0
     86c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     86e:	687b      	ldr	r3, [r7, #4]
     870:	2b00      	cmp	r3, #0
     872:	d104      	bne.n	87e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     874:	68fb      	ldr	r3, [r7, #12]
     876:	e009      	b.n	88c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     878:	68fb      	ldr	r3, [r7, #12]
     87a:	3301      	adds	r3, #1
     87c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     87e:	687b      	ldr	r3, [r7, #4]
     880:	1c5a      	adds	r2, r3, #1
     882:	607a      	str	r2, [r7, #4]
     884:	781b      	ldrb	r3, [r3, #0]
     886:	2b00      	cmp	r3, #0
     888:	d1f6      	bne.n	878 <simple_strlen+0x16>
    }
    return ui32RetVal;
     88a:	68fb      	ldr	r3, [r7, #12]
}
     88c:	4618      	mov	r0, r3
     88e:	3714      	adds	r7, #20
     890:	46bd      	mov	sp, r7
     892:	f85d 7b04 	ldr.w	r7, [sp], #4
     896:	4770      	bx	lr

00000898 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     898:	b480      	push	{r7}
     89a:	b087      	sub	sp, #28
     89c:	af00      	add	r7, sp, #0
     89e:	60f8      	str	r0, [r7, #12]
     8a0:	460b      	mov	r3, r1
     8a2:	607a      	str	r2, [r7, #4]
     8a4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     8a6:	2300      	movs	r3, #0
     8a8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	2b00      	cmp	r3, #0
     8ae:	dc0c      	bgt.n	8ca <padbuffer+0x32>
    {
        return i32Cnt;
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	e010      	b.n	8d6 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     8b4:	68fb      	ldr	r3, [r7, #12]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d004      	beq.n	8c4 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	1c5a      	adds	r2, r3, #1
     8be:	60fa      	str	r2, [r7, #12]
     8c0:	7afa      	ldrb	r2, [r7, #11]
     8c2:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     8c4:	697b      	ldr	r3, [r7, #20]
     8c6:	3301      	adds	r3, #1
     8c8:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	1e5a      	subs	r2, r3, #1
     8ce:	607a      	str	r2, [r7, #4]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d1ef      	bne.n	8b4 <padbuffer+0x1c>
    }

    return i32Cnt;
     8d4:	697b      	ldr	r3, [r7, #20]
}
     8d6:	4618      	mov	r0, r3
     8d8:	371c      	adds	r7, #28
     8da:	46bd      	mov	sp, r7
     8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e0:	4770      	bx	lr
	...

000008e4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     8e4:	b590      	push	{r4, r7, lr}
     8e6:	b08f      	sub	sp, #60	; 0x3c
     8e8:	af00      	add	r7, sp, #0
     8ea:	60f8      	str	r0, [r7, #12]
     8ec:	60b9      	str	r1, [r7, #8]
     8ee:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     8f0:	68bb      	ldr	r3, [r7, #8]
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8f8:	2b03      	cmp	r3, #3
     8fa:	dc02      	bgt.n	902 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     8fc:	f06f 0302 	mvn.w	r3, #2
     900:	e0e7      	b.n	ad2 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     902:	edd7 7a03 	vldr	s15, [r7, #12]
     906:	eef5 7a40 	vcmp.f32	s15, #0.0
     90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     90e:	d104      	bne.n	91a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     910:	68bb      	ldr	r3, [r7, #8]
     912:	4a72      	ldr	r2, [pc, #456]	; (adc <ftoa+0x1f8>)
     914:	601a      	str	r2, [r3, #0]
        return 3;
     916:	2303      	movs	r3, #3
     918:	e0db      	b.n	ad2 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     91a:	68bb      	ldr	r3, [r7, #8]
     91c:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     91e:	68fb      	ldr	r3, [r7, #12]
     920:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     922:	693b      	ldr	r3, [r7, #16]
     924:	15db      	asrs	r3, r3, #23
     926:	b2db      	uxtb	r3, r3
     928:	3b7f      	subs	r3, #127	; 0x7f
     92a:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     92c:	693b      	ldr	r3, [r7, #16]
     92e:	f3c3 0316 	ubfx	r3, r3, #0, #23
     932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     936:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     938:	2300      	movs	r3, #0
     93a:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     93c:	2300      	movs	r3, #0
     93e:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     940:	69fb      	ldr	r3, [r7, #28]
     942:	2b1e      	cmp	r3, #30
     944:	dd02      	ble.n	94c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     946:	f06f 0301 	mvn.w	r3, #1
     94a:	e0c2      	b.n	ad2 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     94c:	69fb      	ldr	r3, [r7, #28]
     94e:	f113 0f17 	cmn.w	r3, #23
     952:	da02      	bge.n	95a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     954:	f04f 33ff 	mov.w	r3, #4294967295
     958:	e0bb      	b.n	ad2 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     95a:	69fb      	ldr	r3, [r7, #28]
     95c:	2b16      	cmp	r3, #22
     95e:	dd06      	ble.n	96e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     960:	69fb      	ldr	r3, [r7, #28]
     962:	3b17      	subs	r3, #23
     964:	69ba      	ldr	r2, [r7, #24]
     966:	fa02 f303 	lsl.w	r3, r2, r3
     96a:	637b      	str	r3, [r7, #52]	; 0x34
     96c:	e01a      	b.n	9a4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     96e:	69fb      	ldr	r3, [r7, #28]
     970:	2b00      	cmp	r3, #0
     972:	db0f      	blt.n	994 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     974:	69fb      	ldr	r3, [r7, #28]
     976:	f1c3 0317 	rsb	r3, r3, #23
     97a:	69ba      	ldr	r2, [r7, #24]
     97c:	fa42 f303 	asr.w	r3, r2, r3
     980:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     982:	69fb      	ldr	r3, [r7, #28]
     984:	3301      	adds	r3, #1
     986:	69ba      	ldr	r2, [r7, #24]
     988:	fa02 f303 	lsl.w	r3, r2, r3
     98c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     990:	633b      	str	r3, [r7, #48]	; 0x30
     992:	e007      	b.n	9a4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     994:	69bb      	ldr	r3, [r7, #24]
     996:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     99a:	69fb      	ldr	r3, [r7, #28]
     99c:	43db      	mvns	r3, r3
     99e:	fa42 f303 	asr.w	r3, r2, r3
     9a2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     9a4:	693b      	ldr	r3, [r7, #16]
     9a6:	2b00      	cmp	r3, #0
     9a8:	da04      	bge.n	9b4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     9aa:	68bb      	ldr	r3, [r7, #8]
     9ac:	1c5a      	adds	r2, r3, #1
     9ae:	60ba      	str	r2, [r7, #8]
     9b0:	222d      	movs	r2, #45	; 0x2d
     9b2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9b6:	2b00      	cmp	r3, #0
     9b8:	d105      	bne.n	9c6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     9ba:	68bb      	ldr	r3, [r7, #8]
     9bc:	1c5a      	adds	r2, r3, #1
     9be:	60ba      	str	r2, [r7, #8]
     9c0:	2230      	movs	r2, #48	; 0x30
     9c2:	701a      	strb	r2, [r3, #0]
     9c4:	e021      	b.n	a0a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9c8:	2b00      	cmp	r3, #0
     9ca:	dd08      	ble.n	9de <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
     9d2:	68ba      	ldr	r2, [r7, #8]
     9d4:	4618      	mov	r0, r3
     9d6:	4621      	mov	r1, r4
     9d8:	f7ff fe9b 	bl	712 <uint64_to_str>
     9dc:	e011      	b.n	a02 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     9de:	68bb      	ldr	r3, [r7, #8]
     9e0:	1c5a      	adds	r2, r3, #1
     9e2:	60ba      	str	r2, [r7, #8]
     9e4:	222d      	movs	r2, #45	; 0x2d
     9e6:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9ea:	425b      	negs	r3, r3
     9ec:	ea4f 74e3 	mov.w	r4, r3, asr #31
     9f0:	68ba      	ldr	r2, [r7, #8]
     9f2:	4618      	mov	r0, r3
     9f4:	4621      	mov	r1, r4
     9f6:	f7ff fe8c 	bl	712 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     9fa:	e002      	b.n	a02 <ftoa+0x11e>
        {
            pcBuf++;
     9fc:	68bb      	ldr	r3, [r7, #8]
     9fe:	3301      	adds	r3, #1
     a00:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     a02:	68bb      	ldr	r3, [r7, #8]
     a04:	781b      	ldrb	r3, [r3, #0]
     a06:	2b00      	cmp	r3, #0
     a08:	d1f8      	bne.n	9fc <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	60ba      	str	r2, [r7, #8]
     a10:	222e      	movs	r2, #46	; 0x2e
     a12:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a16:	2b00      	cmp	r3, #0
     a18:	d105      	bne.n	a26 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     a1a:	68bb      	ldr	r3, [r7, #8]
     a1c:	1c5a      	adds	r2, r3, #1
     a1e:	60ba      	str	r2, [r7, #8]
     a20:	2230      	movs	r2, #48	; 0x30
     a22:	701a      	strb	r2, [r3, #0]
     a24:	e04f      	b.n	ac6 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     a26:	68ba      	ldr	r2, [r7, #8]
     a28:	6a3b      	ldr	r3, [r7, #32]
     a2a:	1ad3      	subs	r3, r2, r3
     a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a2e:	1ad3      	subs	r3, r2, r3
     a30:	3b01      	subs	r3, #1
     a32:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     a34:	697a      	ldr	r2, [r7, #20]
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	4293      	cmp	r3, r2
     a3a:	bfa8      	it	ge
     a3c:	4613      	movge	r3, r2
     a3e:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     a40:	2300      	movs	r3, #0
     a42:	62bb      	str	r3, [r7, #40]	; 0x28
     a44:	e015      	b.n	a72 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a48:	4613      	mov	r3, r2
     a4a:	009b      	lsls	r3, r3, #2
     a4c:	4413      	add	r3, r2
     a4e:	005b      	lsls	r3, r3, #1
     a50:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     a52:	68bb      	ldr	r3, [r7, #8]
     a54:	1c5a      	adds	r2, r3, #1
     a56:	60ba      	str	r2, [r7, #8]
     a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a5a:	1612      	asrs	r2, r2, #24
     a5c:	b2d2      	uxtb	r2, r2
     a5e:	3230      	adds	r2, #48	; 0x30
     a60:	b2d2      	uxtb	r2, r2
     a62:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a6a:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a6e:	3301      	adds	r3, #1
     a70:	62bb      	str	r3, [r7, #40]	; 0x28
     a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a74:	697b      	ldr	r3, [r7, #20]
     a76:	429a      	cmp	r2, r3
     a78:	dbe5      	blt.n	a46 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a7c:	4613      	mov	r3, r2
     a7e:	009b      	lsls	r3, r3, #2
     a80:	4413      	add	r3, r2
     a82:	005b      	lsls	r3, r3, #1
     a84:	161b      	asrs	r3, r3, #24
     a86:	2b04      	cmp	r3, #4
     a88:	dd1d      	ble.n	ac6 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     a8a:	68bb      	ldr	r3, [r7, #8]
     a8c:	3b01      	subs	r3, #1
     a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     a90:	e015      	b.n	abe <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a94:	781b      	ldrb	r3, [r3, #0]
     a96:	2b2e      	cmp	r3, #46	; 0x2e
     a98:	d00e      	beq.n	ab8 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a9c:	781b      	ldrb	r3, [r3, #0]
     a9e:	2b39      	cmp	r3, #57	; 0x39
     aa0:	d103      	bne.n	aaa <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aa4:	2230      	movs	r2, #48	; 0x30
     aa6:	701a      	strb	r2, [r3, #0]
     aa8:	e006      	b.n	ab8 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aac:	781b      	ldrb	r3, [r3, #0]
     aae:	3301      	adds	r3, #1
     ab0:	b2da      	uxtb	r2, r3
     ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ab4:	701a      	strb	r2, [r3, #0]
                    break;
     ab6:	e006      	b.n	ac6 <ftoa+0x1e2>
                }
                pcBuftmp--;
     ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aba:	3b01      	subs	r3, #1
     abc:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ac0:	6a3b      	ldr	r3, [r7, #32]
     ac2:	429a      	cmp	r2, r3
     ac4:	d2e5      	bcs.n	a92 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     ac6:	68bb      	ldr	r3, [r7, #8]
     ac8:	2200      	movs	r2, #0
     aca:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     acc:	68ba      	ldr	r2, [r7, #8]
     ace:	6a3b      	ldr	r3, [r7, #32]
     ad0:	1ad3      	subs	r3, r2, r3
} // ftoa()
     ad2:	4618      	mov	r0, r3
     ad4:	373c      	adds	r7, #60	; 0x3c
     ad6:	46bd      	mov	sp, r7
     ad8:	bd90      	pop	{r4, r7, pc}
     ada:	bf00      	nop
     adc:	00302e30 	.word	0x00302e30

00000ae0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b095      	sub	sp, #84	; 0x54
     ae4:	af00      	add	r7, sp, #0
     ae6:	60f8      	str	r0, [r7, #12]
     ae8:	60b9      	str	r1, [r7, #8]
     aea:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     aec:	2300      	movs	r3, #0
     aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     af0:	2300      	movs	r3, #0
     af2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     af4:	e2e3      	b.n	10be <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     af6:	2306      	movs	r3, #6
     af8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     afa:	68bb      	ldr	r3, [r7, #8]
     afc:	781b      	ldrb	r3, [r3, #0]
     afe:	2b25      	cmp	r3, #37	; 0x25
     b00:	d01f      	beq.n	b42 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     b02:	68fb      	ldr	r3, [r7, #12]
     b04:	2b00      	cmp	r3, #0
     b06:	d015      	beq.n	b34 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     b08:	68bb      	ldr	r3, [r7, #8]
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	2b0a      	cmp	r3, #10
     b0e:	d10b      	bne.n	b28 <am_util_stdio_vsprintf+0x48>
     b10:	4bb1      	ldr	r3, [pc, #708]	; (dd8 <am_util_stdio_vsprintf+0x2f8>)
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	2b00      	cmp	r3, #0
     b16:	d007      	beq.n	b28 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	1c5a      	adds	r2, r3, #1
     b1c:	60fa      	str	r2, [r7, #12]
     b1e:	220d      	movs	r2, #13
     b20:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b24:	3301      	adds	r3, #1
     b26:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	1c5a      	adds	r2, r3, #1
     b2c:	60fa      	str	r2, [r7, #12]
     b2e:	68ba      	ldr	r2, [r7, #8]
     b30:	7812      	ldrb	r2, [r2, #0]
     b32:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     b34:	68bb      	ldr	r3, [r7, #8]
     b36:	3301      	adds	r3, #1
     b38:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b3c:	3301      	adds	r3, #1
     b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     b40:	e2bd      	b.n	10be <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	3301      	adds	r3, #1
     b46:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     b48:	2300      	movs	r3, #0
     b4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     b4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     b52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     b56:	2320      	movs	r3, #32
     b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     b5c:	68bb      	ldr	r3, [r7, #8]
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b30      	cmp	r3, #48	; 0x30
     b62:	d105      	bne.n	b70 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     b64:	2330      	movs	r3, #48	; 0x30
     b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     b6a:	68bb      	ldr	r3, [r7, #8]
     b6c:	3301      	adds	r3, #1
     b6e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     b70:	f107 0310 	add.w	r3, r7, #16
     b74:	4619      	mov	r1, r3
     b76:	68b8      	ldr	r0, [r7, #8]
     b78:	f7ff fd85 	bl	686 <decstr_to_int>
     b7c:	4603      	mov	r3, r0
     b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     b80:	693b      	ldr	r3, [r7, #16]
     b82:	68ba      	ldr	r2, [r7, #8]
     b84:	4413      	add	r3, r2
     b86:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     b88:	68bb      	ldr	r3, [r7, #8]
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b73      	cmp	r3, #115	; 0x73
     b8e:	d005      	beq.n	b9c <am_util_stdio_vsprintf+0xbc>
     b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     b92:	2b00      	cmp	r3, #0
     b94:	da02      	bge.n	b9c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     b98:	425b      	negs	r3, r3
     b9a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     b9c:	68bb      	ldr	r3, [r7, #8]
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	2b2e      	cmp	r3, #46	; 0x2e
     ba2:	d10e      	bne.n	bc2 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     ba4:	68bb      	ldr	r3, [r7, #8]
     ba6:	3301      	adds	r3, #1
     ba8:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     baa:	f107 0310 	add.w	r3, r7, #16
     bae:	4619      	mov	r1, r3
     bb0:	68b8      	ldr	r0, [r7, #8]
     bb2:	f7ff fd68 	bl	686 <decstr_to_int>
     bb6:	4603      	mov	r3, r0
     bb8:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     bba:	693b      	ldr	r3, [r7, #16]
     bbc:	68ba      	ldr	r2, [r7, #8]
     bbe:	4413      	add	r3, r2
     bc0:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	2b6c      	cmp	r3, #108	; 0x6c
     bc8:	d10c      	bne.n	be4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     bca:	68bb      	ldr	r3, [r7, #8]
     bcc:	3301      	adds	r3, #1
     bce:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b6c      	cmp	r3, #108	; 0x6c
     bd6:	d105      	bne.n	be4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     bd8:	68bb      	ldr	r3, [r7, #8]
     bda:	3301      	adds	r3, #1
     bdc:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     bde:	2301      	movs	r3, #1
     be0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     be4:	68bb      	ldr	r3, [r7, #8]
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	3b46      	subs	r3, #70	; 0x46
     bea:	2b32      	cmp	r3, #50	; 0x32
     bec:	f200 8254 	bhi.w	1098 <am_util_stdio_vsprintf+0x5b8>
     bf0:	a201      	add	r2, pc, #4	; (adr r2, bf8 <am_util_stdio_vsprintf+0x118>)
     bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bf6:	bf00      	nop
     bf8:	00001023 	.word	0x00001023
     bfc:	00001099 	.word	0x00001099
     c00:	00001099 	.word	0x00001099
     c04:	00001099 	.word	0x00001099
     c08:	00001099 	.word	0x00001099
     c0c:	00001099 	.word	0x00001099
     c10:	00001099 	.word	0x00001099
     c14:	00001099 	.word	0x00001099
     c18:	00001099 	.word	0x00001099
     c1c:	00001099 	.word	0x00001099
     c20:	00001099 	.word	0x00001099
     c24:	00001099 	.word	0x00001099
     c28:	00001099 	.word	0x00001099
     c2c:	00001099 	.word	0x00001099
     c30:	00001099 	.word	0x00001099
     c34:	00001099 	.word	0x00001099
     c38:	00001099 	.word	0x00001099
     c3c:	00001099 	.word	0x00001099
     c40:	00000dbf 	.word	0x00000dbf
     c44:	00001099 	.word	0x00001099
     c48:	00001099 	.word	0x00001099
     c4c:	00001099 	.word	0x00001099
     c50:	00001099 	.word	0x00001099
     c54:	00001099 	.word	0x00001099
     c58:	00001099 	.word	0x00001099
     c5c:	00001099 	.word	0x00001099
     c60:	00001099 	.word	0x00001099
     c64:	00001099 	.word	0x00001099
     c68:	00001099 	.word	0x00001099
     c6c:	00000cc5 	.word	0x00000cc5
     c70:	00000eeb 	.word	0x00000eeb
     c74:	00001099 	.word	0x00001099
     c78:	00001023 	.word	0x00001023
     c7c:	00001099 	.word	0x00001099
     c80:	00001099 	.word	0x00001099
     c84:	00000eeb 	.word	0x00000eeb
     c88:	00001099 	.word	0x00001099
     c8c:	00001099 	.word	0x00001099
     c90:	00001099 	.word	0x00001099
     c94:	00001099 	.word	0x00001099
     c98:	00001099 	.word	0x00001099
     c9c:	00001099 	.word	0x00001099
     ca0:	00001099 	.word	0x00001099
     ca4:	00001099 	.word	0x00001099
     ca8:	00001099 	.word	0x00001099
     cac:	00000ceb 	.word	0x00000ceb
     cb0:	00001099 	.word	0x00001099
     cb4:	00000e59 	.word	0x00000e59
     cb8:	00001099 	.word	0x00001099
     cbc:	00001099 	.word	0x00001099
     cc0:	00000db9 	.word	0x00000db9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	1d1a      	adds	r2, r3, #4
     cc8:	607a      	str	r2, [r7, #4]
     cca:	681b      	ldr	r3, [r3, #0]
     ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     cd0:	68fb      	ldr	r3, [r7, #12]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d005      	beq.n	ce2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     cd6:	68fb      	ldr	r3, [r7, #12]
     cd8:	1c5a      	adds	r2, r3, #1
     cda:	60fa      	str	r2, [r7, #12]
     cdc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     ce0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ce4:	3301      	adds	r3, #1
     ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ce8:	e1e6      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	1d1a      	adds	r2, r3, #4
     cee:	607a      	str	r2, [r7, #4]
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     cf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     cf6:	f7ff fdb4 	bl	862 <simple_strlen>
     cfa:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cfe:	2b00      	cmp	r3, #0
     d00:	dd2e      	ble.n	d60 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d06:	429a      	cmp	r2, r3
     d08:	d22a      	bcs.n	d60 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d0e:	1ad3      	subs	r3, r2, r3
     d10:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d18:	4619      	mov	r1, r3
     d1a:	68f8      	ldr	r0, [r7, #12]
     d1c:	f7ff fdbc 	bl	898 <padbuffer>
     d20:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	2b00      	cmp	r3, #0
     d26:	d001      	beq.n	d2c <am_util_stdio_vsprintf+0x24c>
     d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d2a:	e000      	b.n	d2e <am_util_stdio_vsprintf+0x24e>
     d2c:	2300      	movs	r3, #0
     d2e:	68fa      	ldr	r2, [r7, #12]
     d30:	4413      	add	r3, r2
     d32:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d38:	4413      	add	r3, r2
     d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     d3c:	2300      	movs	r3, #0
     d3e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     d40:	e00e      	b.n	d60 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     d42:	68fb      	ldr	r3, [r7, #12]
     d44:	2b00      	cmp	r3, #0
     d46:	d005      	beq.n	d54 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     d48:	68fb      	ldr	r3, [r7, #12]
     d4a:	1c5a      	adds	r2, r3, #1
     d4c:	60fa      	str	r2, [r7, #12]
     d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     d50:	7812      	ldrb	r2, [r2, #0]
     d52:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d56:	3301      	adds	r3, #1
     d58:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d5c:	3301      	adds	r3, #1
     d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	2b00      	cmp	r3, #0
     d66:	d1ec      	bne.n	d42 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d6a:	2b00      	cmp	r3, #0
     d6c:	f000 81a1 	beq.w	10b2 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d72:	425b      	negs	r3, r3
     d74:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d7a:	429a      	cmp	r2, r3
     d7c:	f080 8199 	bcs.w	10b2 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d84:	1ad3      	subs	r3, r2, r3
     d86:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d8e:	4619      	mov	r1, r3
     d90:	68f8      	ldr	r0, [r7, #12]
     d92:	f7ff fd81 	bl	898 <padbuffer>
     d96:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     d98:	68fb      	ldr	r3, [r7, #12]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d001      	beq.n	da2 <am_util_stdio_vsprintf+0x2c2>
     d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     da0:	e000      	b.n	da4 <am_util_stdio_vsprintf+0x2c4>
     da2:	2300      	movs	r3, #0
     da4:	68fa      	ldr	r2, [r7, #12]
     da6:	4413      	add	r3, r2
     da8:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     dae:	4413      	add	r3, r2
     db0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     db2:	2300      	movs	r3, #0
     db4:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     db6:	e17c      	b.n	10b2 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     db8:	2301      	movs	r3, #1
     dba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     dbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     dc2:	2b00      	cmp	r3, #0
     dc4:	d00a      	beq.n	ddc <am_util_stdio_vsprintf+0x2fc>
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	3307      	adds	r3, #7
     dca:	f023 0307 	bic.w	r3, r3, #7
     dce:	f103 0208 	add.w	r2, r3, #8
     dd2:	607a      	str	r2, [r7, #4]
     dd4:	cb18      	ldmia	r3, {r3, r4}
     dd6:	e007      	b.n	de8 <am_util_stdio_vsprintf+0x308>
     dd8:	10001104 	.word	0x10001104
                                      va_arg(pArgs, uint32_t);
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	1d1a      	adds	r2, r3, #4
     de0:	607a      	str	r2, [r7, #4]
     de2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     de4:	f04f 0400 	mov.w	r4, #0
     de8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dee:	2b00      	cmp	r3, #0
     df0:	d01e      	beq.n	e30 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     df2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     df6:	f7ff fc22 	bl	63e <ndigits_in_hex>
     dfa:	4602      	mov	r2, r0
     dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dfe:	1a9b      	subs	r3, r3, r2
     e00:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e08:	4619      	mov	r1, r3
     e0a:	68f8      	ldr	r0, [r7, #12]
     e0c:	f7ff fd44 	bl	898 <padbuffer>
     e10:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	2b00      	cmp	r3, #0
     e16:	d001      	beq.n	e1c <am_util_stdio_vsprintf+0x33c>
     e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e1a:	e000      	b.n	e1e <am_util_stdio_vsprintf+0x33e>
     e1c:	2300      	movs	r3, #0
     e1e:	68fa      	ldr	r2, [r7, #12]
     e20:	4413      	add	r3, r2
     e22:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e28:	4413      	add	r3, r2
     e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     e2c:	2300      	movs	r3, #0
     e2e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     e30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     e34:	68fa      	ldr	r2, [r7, #12]
     e36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e3a:	f7ff fcb2 	bl	7a2 <uint64_to_hexstr>
     e3e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	2b00      	cmp	r3, #0
     e44:	d003      	beq.n	e4e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e48:	68fa      	ldr	r2, [r7, #12]
     e4a:	4413      	add	r3, r2
     e4c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e52:	4413      	add	r3, r2
     e54:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e56:	e12f      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e5c:	2b00      	cmp	r3, #0
     e5e:	d008      	beq.n	e72 <am_util_stdio_vsprintf+0x392>
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	3307      	adds	r3, #7
     e64:	f023 0307 	bic.w	r3, r3, #7
     e68:	f103 0208 	add.w	r2, r3, #8
     e6c:	607a      	str	r2, [r7, #4]
     e6e:	cb18      	ldmia	r3, {r3, r4}
     e70:	e005      	b.n	e7e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	1d1a      	adds	r2, r3, #4
     e76:	607a      	str	r2, [r7, #4]
     e78:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e7a:	f04f 0400 	mov.w	r4, #0
     e7e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e84:	2b00      	cmp	r3, #0
     e86:	d01e      	beq.n	ec6 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     e88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e8c:	f7ff fb99 	bl	5c2 <ndigits_in_u64>
     e90:	4602      	mov	r2, r0
     e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e94:	1a9b      	subs	r3, r3, r2
     e96:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e9e:	4619      	mov	r1, r3
     ea0:	68f8      	ldr	r0, [r7, #12]
     ea2:	f7ff fcf9 	bl	898 <padbuffer>
     ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ea8:	68fb      	ldr	r3, [r7, #12]
     eaa:	2b00      	cmp	r3, #0
     eac:	d001      	beq.n	eb2 <am_util_stdio_vsprintf+0x3d2>
     eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eb0:	e000      	b.n	eb4 <am_util_stdio_vsprintf+0x3d4>
     eb2:	2300      	movs	r3, #0
     eb4:	68fa      	ldr	r2, [r7, #12]
     eb6:	4413      	add	r3, r2
     eb8:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ebe:	4413      	add	r3, r2
     ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     ec2:	2300      	movs	r3, #0
     ec4:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     ec6:	68fa      	ldr	r2, [r7, #12]
     ec8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ecc:	f7ff fc21 	bl	712 <uint64_to_str>
     ed0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d003      	beq.n	ee0 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eda:	68fa      	ldr	r2, [r7, #12]
     edc:	4413      	add	r3, r2
     ede:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ee4:	4413      	add	r3, r2
     ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ee8:	e0e6      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     eea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     eee:	2b00      	cmp	r3, #0
     ef0:	d008      	beq.n	f04 <am_util_stdio_vsprintf+0x424>
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	3307      	adds	r3, #7
     ef6:	f023 0307 	bic.w	r3, r3, #7
     efa:	f103 0208 	add.w	r2, r3, #8
     efe:	607a      	str	r2, [r7, #4]
     f00:	cb18      	ldmia	r3, {r3, r4}
     f02:	e005      	b.n	f10 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	1d1a      	adds	r2, r3, #4
     f08:	607a      	str	r2, [r7, #4]
     f0a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f0c:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f10:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
     f14:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f18:	2b00      	cmp	r3, #0
     f1a:	f174 0300 	sbcs.w	r3, r4, #0
     f1e:	da0a      	bge.n	f36 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
     f20:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f24:	425b      	negs	r3, r3
     f26:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     f2a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
     f2e:	2301      	movs	r3, #1
     f30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     f34:	e006      	b.n	f44 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
     f36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f3a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
     f3e:	2300      	movs	r3, #0
     f40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
     f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f46:	2b00      	cmp	r3, #0
     f48:	d04a      	beq.n	fe0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
     f4a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
     f4e:	4618      	mov	r0, r3
     f50:	4621      	mov	r1, r4
     f52:	f7ff fb57 	bl	604 <ndigits_in_i64>
     f56:	4602      	mov	r2, r0
     f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5a:	1a9b      	subs	r3, r3, r2
     f5c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
     f5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     f62:	2b00      	cmp	r3, #0
     f64:	d011      	beq.n	f8a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
     f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f68:	3b01      	subs	r3, #1
     f6a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
     f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f70:	2b30      	cmp	r3, #48	; 0x30
     f72:	d10a      	bne.n	f8a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	2b00      	cmp	r3, #0
     f78:	d004      	beq.n	f84 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
     f7a:	68fb      	ldr	r3, [r7, #12]
     f7c:	1c5a      	adds	r2, r3, #1
     f7e:	60fa      	str	r2, [r7, #12]
     f80:	222d      	movs	r2, #45	; 0x2d
     f82:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
     f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f86:	3301      	adds	r3, #1
     f88:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f90:	4619      	mov	r1, r3
     f92:	68f8      	ldr	r0, [r7, #12]
     f94:	f7ff fc80 	bl	898 <padbuffer>
     f98:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f9a:	68fb      	ldr	r3, [r7, #12]
     f9c:	2b00      	cmp	r3, #0
     f9e:	d001      	beq.n	fa4 <am_util_stdio_vsprintf+0x4c4>
     fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa2:	e000      	b.n	fa6 <am_util_stdio_vsprintf+0x4c6>
     fa4:	2300      	movs	r3, #0
     fa6:	68fa      	ldr	r2, [r7, #12]
     fa8:	4413      	add	r3, r2
     faa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fb0:	4413      	add	r3, r2
     fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fb4:	2300      	movs	r3, #0
     fb6:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
     fb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     fbc:	2b00      	cmp	r3, #0
     fbe:	d01e      	beq.n	ffe <am_util_stdio_vsprintf+0x51e>
     fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fc4:	2b20      	cmp	r3, #32
     fc6:	d11a      	bne.n	ffe <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
     fc8:	68fb      	ldr	r3, [r7, #12]
     fca:	2b00      	cmp	r3, #0
     fcc:	d004      	beq.n	fd8 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	1c5a      	adds	r2, r3, #1
     fd2:	60fa      	str	r2, [r7, #12]
     fd4:	222d      	movs	r2, #45	; 0x2d
     fd6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
     fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fda:	3301      	adds	r3, #1
     fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
     fde:	e00e      	b.n	ffe <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
     fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     fe4:	2b00      	cmp	r3, #0
     fe6:	d00a      	beq.n	ffe <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	2b00      	cmp	r3, #0
     fec:	d004      	beq.n	ff8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
     fee:	68fb      	ldr	r3, [r7, #12]
     ff0:	1c5a      	adds	r2, r3, #1
     ff2:	60fa      	str	r2, [r7, #12]
     ff4:	222d      	movs	r2, #45	; 0x2d
     ff6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
     ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ffa:	3301      	adds	r3, #1
     ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     ffe:	68fa      	ldr	r2, [r7, #12]
    1000:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1004:	f7ff fb85 	bl	712 <uint64_to_str>
    1008:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	2b00      	cmp	r3, #0
    100e:	d003      	beq.n	1018 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1012:	68fa      	ldr	r2, [r7, #12]
    1014:	4413      	add	r3, r2
    1016:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    101a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    101c:	4413      	add	r3, r2
    101e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1020:	e04a      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	2b00      	cmp	r3, #0
    1026:	d046      	beq.n	10b6 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	3307      	adds	r3, #7
    102c:	f023 0307 	bic.w	r3, r3, #7
    1030:	f103 0208 	add.w	r2, r3, #8
    1034:	607a      	str	r2, [r7, #4]
    1036:	cb18      	ldmia	r3, {r3, r4}
    1038:	4618      	mov	r0, r3
    103a:	4621      	mov	r1, r4
    103c:	f7ff f820 	bl	80 <__aeabi_d2f>
    1040:	4603      	mov	r3, r0
    1042:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	2214      	movs	r2, #20
    1048:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    104a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    104c:	68f9      	ldr	r1, [r7, #12]
    104e:	6978      	ldr	r0, [r7, #20]
    1050:	f7ff fc48 	bl	8e4 <ftoa>
    1054:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1058:	2b00      	cmp	r3, #0
    105a:	da14      	bge.n	1086 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    105e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1062:	d102      	bne.n	106a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1064:	4b1e      	ldr	r3, [pc, #120]	; (10e0 <am_util_stdio_vsprintf+0x600>)
    1066:	62bb      	str	r3, [r7, #40]	; 0x28
    1068:	e008      	b.n	107c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    106c:	f113 0f02 	cmn.w	r3, #2
    1070:	d102      	bne.n	1078 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1072:	4b1c      	ldr	r3, [pc, #112]	; (10e4 <am_util_stdio_vsprintf+0x604>)
    1074:	62bb      	str	r3, [r7, #40]	; 0x28
    1076:	e001      	b.n	107c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1078:	4b1b      	ldr	r3, [pc, #108]	; (10e8 <am_util_stdio_vsprintf+0x608>)
    107a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    107c:	68fb      	ldr	r3, [r7, #12]
    107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1080:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1082:	2303      	movs	r3, #3
    1084:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    108a:	4413      	add	r3, r2
    108c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1090:	68fa      	ldr	r2, [r7, #12]
    1092:	4413      	add	r3, r2
    1094:	60fb      	str	r3, [r7, #12]
                }
                break;
    1096:	e00e      	b.n	10b6 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d005      	beq.n	10aa <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60fa      	str	r2, [r7, #12]
    10a4:	68ba      	ldr	r2, [r7, #8]
    10a6:	7812      	ldrb	r2, [r2, #0]
    10a8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ac:	3301      	adds	r3, #1
    10ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10b0:	e002      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>
                break;
    10b2:	bf00      	nop
    10b4:	e000      	b.n	10b8 <am_util_stdio_vsprintf+0x5d8>
                break;
    10b6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    10b8:	68bb      	ldr	r3, [r7, #8]
    10ba:	3301      	adds	r3, #1
    10bc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    10be:	68bb      	ldr	r3, [r7, #8]
    10c0:	781b      	ldrb	r3, [r3, #0]
    10c2:	2b00      	cmp	r3, #0
    10c4:	f47f ad17 	bne.w	af6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d002      	beq.n	10d4 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	2200      	movs	r2, #0
    10d2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    10d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    10d6:	4618      	mov	r0, r3
    10d8:	3754      	adds	r7, #84	; 0x54
    10da:	46bd      	mov	sp, r7
    10dc:	bd90      	pop	{r4, r7, pc}
    10de:	bf00      	nop
    10e0:	00302e30 	.word	0x00302e30
    10e4:	00232e23 	.word	0x00232e23
    10e8:	003f2e3f 	.word	0x003f2e3f

000010ec <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    10ec:	b40f      	push	{r0, r1, r2, r3}
    10ee:	b580      	push	{r7, lr}
    10f0:	b082      	sub	sp, #8
    10f2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    10f4:	f107 0314 	add.w	r3, r7, #20
    10f8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    10fa:	683a      	ldr	r2, [r7, #0]
    10fc:	6939      	ldr	r1, [r7, #16]
    10fe:	4808      	ldr	r0, [pc, #32]	; (1120 <am_util_stdio_printf+0x34>)
    1100:	f7ff fcee 	bl	ae0 <am_util_stdio_vsprintf>
    1104:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1106:	4b07      	ldr	r3, [pc, #28]	; (1124 <am_util_stdio_printf+0x38>)
    1108:	681b      	ldr	r3, [r3, #0]
    110a:	4805      	ldr	r0, [pc, #20]	; (1120 <am_util_stdio_printf+0x34>)
    110c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    110e:	687b      	ldr	r3, [r7, #4]
}
    1110:	4618      	mov	r0, r3
    1112:	3708      	adds	r7, #8
    1114:	46bd      	mov	sp, r7
    1116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    111a:	b004      	add	sp, #16
    111c:	4770      	bx	lr
    111e:	bf00      	nop
    1120:	10001004 	.word	0x10001004
    1124:	1000110c 	.word	0x1000110c

00001128 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1128:	b580      	push	{r7, lr}
    112a:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    112c:	4802      	ldr	r0, [pc, #8]	; (1138 <am_util_stdio_terminal_clear+0x10>)
    112e:	f7ff ffdd 	bl	10ec <am_util_stdio_printf>
}
    1132:	bf00      	nop
    1134:	bd80      	pop	{r7, pc}
    1136:	bf00      	nop
    1138:	00001634 	.word	0x00001634

0000113c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    113c:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    113e:	f000 f9c7 	bl	14d0 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1142:	f000 fa69 	bl	1618 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1146:	2001      	movs	r0, #1
    1148:	f000 f9d8 	bl	14fc <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    114c:	2001      	movs	r0, #1
    114e:	f000 f883 	bl	1258 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1152:	f000 f9e1 	bl	1518 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    1156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    115a:	f000 b9b1 	b.w	14c0 <am_hal_mcuctrl_bandgap_disable>
    115e:	bf00      	nop

00001160 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1160:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1162:	4b10      	ldr	r3, [pc, #64]	; (11a4 <am_bsp_debug_printf_enable+0x44>)
    1164:	681c      	ldr	r4, [r3, #0]
    1166:	f014 0401 	ands.w	r4, r4, #1
{
    116a:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    116c:	d001      	beq.n	1172 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    116e:	b006      	add	sp, #24
    1170:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1172:	a806      	add	r0, sp, #24
    1174:	490c      	ldr	r1, [pc, #48]	; (11a8 <am_bsp_debug_printf_enable+0x48>)
    1176:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    117a:	f000 f9eb 	bl	1554 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    117e:	4a0b      	ldr	r2, [pc, #44]	; (11ac <am_bsp_debug_printf_enable+0x4c>)
    1180:	480b      	ldr	r0, [pc, #44]	; (11b0 <am_bsp_debug_printf_enable+0x50>)
    1182:	490c      	ldr	r1, [pc, #48]	; (11b4 <am_bsp_debug_printf_enable+0x54>)
    1184:	2373      	movs	r3, #115	; 0x73
    1186:	6013      	str	r3, [r2, #0]
    1188:	6803      	ldr	r3, [r0, #0]
    118a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    118e:	6003      	str	r3, [r0, #0]
    1190:	6808      	ldr	r0, [r1, #0]
    1192:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1196:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    119a:	600b      	str	r3, [r1, #0]
    119c:	6014      	str	r4, [r2, #0]
}
    119e:	b006      	add	sp, #24
    11a0:	bd10      	pop	{r4, pc}
    11a2:	bf00      	nop
    11a4:	10001108 	.word	0x10001108
    11a8:	000f4240 	.word	0x000f4240
    11ac:	40010060 	.word	0x40010060
    11b0:	40010054 	.word	0x40010054
    11b4:	40010028 	.word	0x40010028

000011b8 <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    11b8:	4b0f      	ldr	r3, [pc, #60]	; (11f8 <am_bsp_debug_printf_disable+0x40>)
{
    11ba:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    11bc:	681c      	ldr	r4, [r3, #0]
    11be:	f014 0401 	ands.w	r4, r4, #1
    11c2:	d000      	beq.n	11c6 <am_bsp_debug_printf_disable+0xe>
    11c4:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    11c6:	f000 f927 	bl	1418 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    11ca:	4a0c      	ldr	r2, [pc, #48]	; (11fc <am_bsp_debug_printf_disable+0x44>)
    11cc:	480c      	ldr	r0, [pc, #48]	; (1200 <am_bsp_debug_printf_disable+0x48>)
    11ce:	490d      	ldr	r1, [pc, #52]	; (1204 <am_bsp_debug_printf_disable+0x4c>)
    11d0:	2373      	movs	r3, #115	; 0x73
    11d2:	6013      	str	r3, [r2, #0]
    11d4:	6803      	ldr	r3, [r0, #0]
    11d6:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    11da:	f04c 0320 	orr.w	r3, ip, #32
    11de:	6003      	str	r3, [r0, #0]
    11e0:	6808      	ldr	r0, [r1, #0]
    11e2:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    11e6:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    11ea:	600b      	str	r3, [r1, #0]
    11ec:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    11ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    11f2:	f000 ba0b 	b.w	160c <am_hal_tpiu_disable>
    11f6:	bf00      	nop
    11f8:	10001108 	.word	0x10001108
    11fc:	40010060 	.word	0x40010060
    1200:	40010054 	.word	0x40010054
    1204:	40010028 	.word	0x40010028

00001208 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1208:	f000 b91c 	b.w	1444 <am_hal_itm_print>

0000120c <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    120e:	4906      	ldr	r1, [pc, #24]	; (1228 <am_hal_clkgen_sysclk_select+0x1c>)
{
    1210:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1212:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1214:	2447      	movs	r4, #71	; 0x47
    1216:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1218:	6008      	str	r0, [r1, #0]
}
    121a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    121e:	601a      	str	r2, [r3, #0]
}
    1220:	4770      	bx	lr
    1222:	bf00      	nop
    1224:	40004014 	.word	0x40004014
    1228:	40004018 	.word	0x40004018

0000122c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    122c:	4b03      	ldr	r3, [pc, #12]	; (123c <am_hal_clkgen_sysclk_get+0x10>)
    122e:	4a04      	ldr	r2, [pc, #16]	; (1240 <am_hal_clkgen_sysclk_get+0x14>)
    1230:	6818      	ldr	r0, [r3, #0]
    1232:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1236:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    123a:	4770      	bx	lr
    123c:	40004018 	.word	0x40004018
    1240:	00001748 	.word	0x00001748

00001244 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1244:	0783      	lsls	r3, r0, #30
    1246:	d004      	beq.n	1252 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1248:	4a02      	ldr	r2, [pc, #8]	; (1254 <am_hal_clkgen_osc_start+0x10>)
    124a:	6813      	ldr	r3, [r2, #0]
    124c:	ea23 0000 	bic.w	r0, r3, r0
    1250:	6010      	str	r0, [r2, #0]
    1252:	4770      	bx	lr
    1254:	4000400c 	.word	0x4000400c

00001258 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1258:	0783      	lsls	r3, r0, #30
    125a:	d003      	beq.n	1264 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    125c:	4b02      	ldr	r3, [pc, #8]	; (1268 <am_hal_clkgen_osc_stop+0x10>)
    125e:	681a      	ldr	r2, [r3, #0]
    1260:	4310      	orrs	r0, r2
    1262:	6018      	str	r0, [r3, #0]
    1264:	4770      	bx	lr
    1266:	bf00      	nop
    1268:	4000400c 	.word	0x4000400c

0000126c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    126c:	b410      	push	{r4}

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    126e:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1270:	4c0b      	ldr	r4, [pc, #44]	; (12a0 <am_hal_ctimer_config_single+0x34>)

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1272:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    1276:	5903      	ldr	r3, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1278:	d00a      	beq.n	1290 <am_hal_ctimer_config_single+0x24>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    127a:	ea23 0301 	bic.w	r3, r3, r1
    127e:	431a      	orrs	r2, r3

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    1280:	3101      	adds	r1, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    1282:	bf08      	it	eq
    1284:	f042 4200 	orreq.w	r2, r2, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    1288:	5102      	str	r2, [r0, r4]
}
    128a:	f85d 4b04 	ldr.w	r4, [sp], #4
    128e:	4770      	bx	lr
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    1290:	b299      	uxth	r1, r3
    1292:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    1296:	5102      	str	r2, [r0, r4]
}
    1298:	f85d 4b04 	ldr.w	r4, [sp], #4
    129c:	4770      	bx	lr
    129e:	bf00      	nop
    12a0:	4000800c 	.word	0x4000800c

000012a4 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    12a4:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    12a6:	4a07      	ldr	r2, [pc, #28]	; (12c4 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    12a8:	5883      	ldr	r3, [r0, r2]
{
    12aa:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    12ac:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    12b0:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    12b4:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    12b8:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    12ba:	5081      	str	r1, [r0, r2]
}
    12bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop
    12c4:	4000800c 	.word	0x4000800c

000012c8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    12ca:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    12cc:	4c19      	ldr	r4, [pc, #100]	; (1334 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    12ce:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    12d2:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    12d4:	d018      	beq.n	1308 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    12d6:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    12da:	2e80      	cmp	r6, #128	; 0x80
    12dc:	d019      	beq.n	1312 <am_hal_ctimer_period_set+0x4a>
    12de:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    12e0:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    12e2:	4e15      	ldr	r6, [pc, #84]	; (1338 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    12e4:	4f15      	ldr	r7, [pc, #84]	; (133c <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    12e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12ea:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    12ec:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    12f0:	d01c      	beq.n	132c <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    12f2:	4b13      	ldr	r3, [pc, #76]	; (1340 <am_hal_ctimer_period_set+0x78>)
    12f4:	4299      	cmp	r1, r3
    12f6:	d014      	beq.n	1322 <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    12f8:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    12fa:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    12fc:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1300:	430d      	orrs	r5, r1
    1302:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1304:	5182      	str	r2, [r0, r6]
    }
}
    1306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    1308:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    130a:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    130e:	2d80      	cmp	r5, #128	; 0x80
    1310:	d103      	bne.n	131a <am_hal_ctimer_period_set+0x52>
    1312:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    1314:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    1316:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    1318:	e7e3      	b.n	12e2 <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    131a:	f8df e01c 	ldr.w	lr, [pc, #28]	; 1338 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    131e:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    1320:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1322:	b290      	uxth	r0, r2
    1324:	4305      	orrs	r5, r0
    1326:	f8ce 5000 	str.w	r5, [lr]
    132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    132c:	b294      	uxth	r4, r2
    132e:	4325      	orrs	r5, r4
    1330:	51c5      	str	r5, [r0, r7]
    1332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1334:	4000800c 	.word	0x4000800c
    1338:	40008008 	.word	0x40008008
    133c:	40008004 	.word	0x40008004
    1340:	ffff0000 	.word	0xffff0000

00001344 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1344:	4a02      	ldr	r2, [pc, #8]	; (1350 <am_hal_ctimer_int_enable+0xc>)
    1346:	6813      	ldr	r3, [r2, #0]
    1348:	4318      	orrs	r0, r3
    134a:	6010      	str	r0, [r2, #0]
    134c:	4770      	bx	lr
    134e:	bf00      	nop
    1350:	40008200 	.word	0x40008200

00001354 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1354:	4b01      	ldr	r3, [pc, #4]	; (135c <am_hal_ctimer_int_clear+0x8>)
    1356:	6018      	str	r0, [r3, #0]
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	40008208 	.word	0x40008208

00001360 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1360:	3801      	subs	r0, #1
    1362:	f47f affd 	bne.w	1360 <am_hal_flash_delay>
    1366:	4770      	bx	lr

00001368 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1368:	280f      	cmp	r0, #15
    136a:	d80b      	bhi.n	1384 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    136c:	2805      	cmp	r0, #5
    136e:	d013      	beq.n	1398 <am_hal_interrupt_enable+0x30>
    1370:	2806      	cmp	r0, #6
    1372:	d017      	beq.n	13a4 <am_hal_interrupt_enable+0x3c>
    1374:	2804      	cmp	r0, #4
    1376:	d104      	bne.n	1382 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1378:	4a0d      	ldr	r2, [pc, #52]	; (13b0 <am_hal_interrupt_enable+0x48>)
    137a:	6813      	ldr	r3, [r2, #0]
    137c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1380:	6010      	str	r0, [r2, #0]
    1382:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1384:	f1a0 0310 	sub.w	r3, r0, #16
    1388:	f003 0c1f 	and.w	ip, r3, #31
    138c:	2001      	movs	r0, #1
    138e:	4909      	ldr	r1, [pc, #36]	; (13b4 <am_hal_interrupt_enable+0x4c>)
    1390:	fa00 f20c 	lsl.w	r2, r0, ip
    1394:	600a      	str	r2, [r1, #0]
    1396:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1398:	4805      	ldr	r0, [pc, #20]	; (13b0 <am_hal_interrupt_enable+0x48>)
    139a:	6801      	ldr	r1, [r0, #0]
    139c:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    13a0:	6002      	str	r2, [r0, #0]
            break;
    13a2:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    13a4:	4902      	ldr	r1, [pc, #8]	; (13b0 <am_hal_interrupt_enable+0x48>)
    13a6:	680a      	ldr	r2, [r1, #0]
    13a8:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    13ac:	600b      	str	r3, [r1, #0]
            break;
    13ae:	4770      	bx	lr
    13b0:	e000ed24 	.word	0xe000ed24
    13b4:	e000e100 	.word	0xe000e100

000013b8 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    13b8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    13bc:	b662      	cpsie	i
    __asm("    bx lr");
    13be:	4770      	bx	lr

000013c0 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    13c0:	4b0d      	ldr	r3, [pc, #52]	; (13f8 <am_hal_itm_enable+0x38>)
    13c2:	6818      	ldr	r0, [r3, #0]
    13c4:	07c2      	lsls	r2, r0, #31
    13c6:	d416      	bmi.n	13f6 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13c8:	4a0c      	ldr	r2, [pc, #48]	; (13fc <am_hal_itm_enable+0x3c>)
    13ca:	6811      	ldr	r1, [r2, #0]
{
    13cc:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13ce:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    13d2:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    13d4:	6815      	ldr	r5, [r2, #0]
    13d6:	01eb      	lsls	r3, r5, #7
    13d8:	d5fc      	bpl.n	13d4 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13da:	4809      	ldr	r0, [pc, #36]	; (1400 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13dc:	4c09      	ldr	r4, [pc, #36]	; (1404 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13de:	4d0a      	ldr	r5, [pc, #40]	; (1408 <am_hal_itm_enable+0x48>)
    13e0:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13e2:	250f      	movs	r5, #15
    13e4:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    13e6:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13e8:	4908      	ldr	r1, [pc, #32]	; (140c <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13ea:	4b09      	ldr	r3, [pc, #36]	; (1410 <am_hal_itm_enable+0x50>)
    13ec:	4a09      	ldr	r2, [pc, #36]	; (1414 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13ee:	f04f 30ff 	mov.w	r0, #4294967295
    13f2:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13f4:	601a      	str	r2, [r3, #0]
}
    13f6:	4770      	bx	lr
    13f8:	10001108 	.word	0x10001108
    13fc:	e000edfc 	.word	0xe000edfc
    1400:	e0000fb0 	.word	0xe0000fb0
    1404:	e0000e40 	.word	0xe0000e40
    1408:	c5acce55 	.word	0xc5acce55
    140c:	e0000e00 	.word	0xe0000e00
    1410:	e0000e80 	.word	0xe0000e80
    1414:	00150511 	.word	0x00150511

00001418 <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    1418:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    141a:	4a08      	ldr	r2, [pc, #32]	; (143c <am_hal_itm_not_busy+0x24>)
    141c:	6813      	ldr	r3, [r2, #0]
    141e:	021b      	lsls	r3, r3, #8
    1420:	d4fc      	bmi.n	141c <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1422:	f7ff ff03 	bl	122c <am_hal_clkgen_sysclk_get>
    1426:	4906      	ldr	r1, [pc, #24]	; (1440 <am_hal_itm_not_busy+0x28>)
    1428:	fba1 3000 	umull	r3, r0, r1, r0
    142c:	0c80      	lsrs	r0, r0, #18
    142e:	2232      	movs	r2, #50	; 0x32
    1430:	fb02 f000 	mul.w	r0, r2, r0
}
    1434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1438:	f7ff bf92 	b.w	1360 <am_hal_flash_delay>
    143c:	e0000e80 	.word	0xe0000e80
    1440:	165e9f81 	.word	0x165e9f81

00001444 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1444:	7803      	ldrb	r3, [r0, #0]
    1446:	b1b3      	cbz	r3, 1476 <am_hal_itm_print+0x32>
{
    1448:	b410      	push	{r4}
    144a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    144c:	2400      	movs	r4, #0
    144e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1452:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1454:	2900      	cmp	r1, #0
    1456:	d1fa      	bne.n	144e <am_hal_itm_print+0xa>
    1458:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    145a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    145e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1462:	f8dc 3000 	ldr.w	r3, [ip]
    1466:	2b00      	cmp	r3, #0
    1468:	d0fb      	beq.n	1462 <am_hal_itm_print+0x1e>
    while (ui32Length)
    146a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    146c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1470:	d1f5      	bne.n	145e <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    1472:	f85d 4b04 	ldr.w	r4, [sp], #4
    1476:	4770      	bx	lr

00001478 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1478:	490d      	ldr	r1, [pc, #52]	; (14b0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    147a:	4b0e      	ldr	r3, [pc, #56]	; (14b4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    147c:	4a0e      	ldr	r2, [pc, #56]	; (14b8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    147e:	681b      	ldr	r3, [r3, #0]
{
    1480:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1482:	680d      	ldr	r5, [r1, #0]
    1484:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1486:	6815      	ldr	r5, [r2, #0]
    1488:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    148a:	4c0c      	ldr	r4, [pc, #48]	; (14bc <am_hal_mcuctrl_fault_status+0x44>)
    148c:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    148e:	4329      	orrs	r1, r5
    1490:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1492:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1494:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1498:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    149a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    149c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14a4:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14a6:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14a8:	6142      	str	r2, [r0, #20]
}
    14aa:	bc70      	pop	{r4, r5, r6}
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop
    14b0:	400201c4 	.word	0x400201c4
    14b4:	400201cc 	.word	0x400201cc
    14b8:	400201c0 	.word	0x400201c0
    14bc:	400201c8 	.word	0x400201c8

000014c0 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    14c0:	4b02      	ldr	r3, [pc, #8]	; (14cc <am_hal_mcuctrl_bandgap_disable+0xc>)
    14c2:	f06f 0201 	mvn.w	r2, #1
    14c6:	601a      	str	r2, [r3, #0]
    14c8:	4770      	bx	lr
    14ca:	bf00      	nop
    14cc:	400200fc 	.word	0x400200fc

000014d0 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    14d2:	4a09      	ldr	r2, [pc, #36]	; (14f8 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14d4:	6819      	ldr	r1, [r3, #0]
    14d6:	f041 0002 	orr.w	r0, r1, #2
    14da:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    14dc:	6819      	ldr	r1, [r3, #0]
    14de:	f041 0001 	orr.w	r0, r1, #1
    14e2:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    14e4:	6813      	ldr	r3, [r2, #0]
    14e6:	0799      	lsls	r1, r3, #30
    14e8:	d5fc      	bpl.n	14e4 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    14ea:	4a03      	ldr	r2, [pc, #12]	; (14f8 <am_hal_mcuctrl_bucks_enable+0x28>)
    14ec:	6811      	ldr	r1, [r2, #0]
    14ee:	07cb      	lsls	r3, r1, #31
    14f0:	d5fc      	bpl.n	14ec <am_hal_mcuctrl_bucks_enable+0x1c>
}
    14f2:	4770      	bx	lr
    14f4:	40020010 	.word	0x40020010
    14f8:	40020014 	.word	0x40020014

000014fc <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    14fc:	4a05      	ldr	r2, [pc, #20]	; (1514 <am_hal_rtc_osc_select+0x18>)
    14fe:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1500:	b918      	cbnz	r0, 150a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1502:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1506:	6010      	str	r0, [r2, #0]
    1508:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    150a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    150e:	6011      	str	r1, [r2, #0]
    1510:	4770      	bx	lr
    1512:	bf00      	nop
    1514:	4000400c 	.word	0x4000400c

00001518 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    1518:	4a02      	ldr	r2, [pc, #8]	; (1524 <am_hal_rtc_osc_disable+0xc>)
    151a:	6813      	ldr	r3, [r2, #0]
    151c:	f043 0010 	orr.w	r0, r3, #16
    1520:	6010      	str	r0, [r2, #0]
    1522:	4770      	bx	lr
    1524:	40004050 	.word	0x40004050

00001528 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1528:	4a08      	ldr	r2, [pc, #32]	; (154c <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    152a:	b118      	cbz	r0, 1534 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <am_hal_sysctrl_sleep+0x28>)
    152e:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1530:	07c3      	lsls	r3, r0, #31
    1532:	d505      	bpl.n	1540 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1534:	6811      	ldr	r1, [r2, #0]
    1536:	f021 0304 	bic.w	r3, r1, #4
    153a:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    153c:	bf30      	wfi
    153e:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1540:	6810      	ldr	r0, [r2, #0]
    1542:	f040 0104 	orr.w	r1, r0, #4
    1546:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1548:	bf30      	wfi
    154a:	4770      	bx	lr
    154c:	e000ed10 	.word	0xe000ed10
    1550:	40020250 	.word	0x40020250

00001554 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1554:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1556:	4a24      	ldr	r2, [pc, #144]	; (15e8 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1558:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    155a:	2100      	movs	r1, #0
    155c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    155e:	b313      	cbz	r3, 15a6 <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1560:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1564:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1566:	4c21      	ldr	r4, [pc, #132]	; (15ec <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1568:	4d21      	ldr	r5, [pc, #132]	; (15f0 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    156a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    156e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1572:	45a6      	cmp	lr, r4
    1574:	bf94      	ite	ls
    1576:	461c      	movls	r4, r3
    1578:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    157a:	f7ff fe57 	bl	122c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    157e:	1c43      	adds	r3, r0, #1
    1580:	d02f      	beq.n	15e2 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1582:	08c2      	lsrs	r2, r0, #3
    1584:	fbb2 f3f4 	udiv	r3, r2, r4
    1588:	1e5d      	subs	r5, r3, #1
    158a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    158c:	4a19      	ldr	r2, [pc, #100]	; (15f4 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    158e:	4c1a      	ldr	r4, [pc, #104]	; (15f8 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1590:	491a      	ldr	r1, [pc, #104]	; (15fc <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1592:	4b1b      	ldr	r3, [pc, #108]	; (1600 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1594:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1596:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1598:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    159a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    159e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    15a0:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    15a2:	601a      	str	r2, [r3, #0]
    15a4:	e010      	b.n	15c8 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    15a6:	4c13      	ldr	r4, [pc, #76]	; (15f4 <am_hal_tpiu_enable+0xa0>)
    15a8:	6905      	ldr	r5, [r0, #16]
    15aa:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    15ac:	6882      	ldr	r2, [r0, #8]
    15ae:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15b2:	68c3      	ldr	r3, [r0, #12]
    15b4:	4c13      	ldr	r4, [pc, #76]	; (1604 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15b6:	4912      	ldr	r1, [pc, #72]	; (1600 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15b8:	1e5d      	subs	r5, r3, #1
    15ba:	2201      	movs	r2, #1
    15bc:	40aa      	lsls	r2, r5
    15be:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15c0:	6840      	ldr	r0, [r0, #4]
    15c2:	680b      	ldr	r3, [r1, #0]
    15c4:	4303      	orrs	r3, r0
    15c6:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15c8:	f7ff fe30 	bl	122c <am_hal_clkgen_sysclk_get>
    15cc:	4c0e      	ldr	r4, [pc, #56]	; (1608 <am_hal_tpiu_enable+0xb4>)
    15ce:	fba4 3100 	umull	r3, r1, r4, r0
    15d2:	0c88      	lsrs	r0, r1, #18
    15d4:	2332      	movs	r3, #50	; 0x32
    15d6:	fb03 f000 	mul.w	r0, r3, r0
}
    15da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15de:	f7ff bebf 	b.w	1360 <am_hal_flash_delay>
    15e2:	2002      	movs	r0, #2
    15e4:	e7d2      	b.n	158c <am_hal_tpiu_enable+0x38>
    15e6:	bf00      	nop
    15e8:	e0040304 	.word	0xe0040304
    15ec:	001da380 	.word	0x001da380
    15f0:	000f4240 	.word	0x000f4240
    15f4:	e0040010 	.word	0xe0040010
    15f8:	e00400f0 	.word	0xe00400f0
    15fc:	e0040f00 	.word	0xe0040f00
    1600:	40020250 	.word	0x40020250
    1604:	e0040004 	.word	0xe0040004
    1608:	165e9f81 	.word	0x165e9f81

0000160c <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    160c:	4b01      	ldr	r3, [pc, #4]	; (1614 <am_hal_tpiu_disable+0x8>)
    160e:	2200      	movs	r2, #0
    1610:	601a      	str	r2, [r3, #0]
    1612:	4770      	bx	lr
    1614:	40020250 	.word	0x40020250

00001618 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1618:	4b01      	ldr	r3, [pc, #4]	; (1620 <am_hal_vcomp_disable+0x8>)
    161a:	2237      	movs	r2, #55	; 0x37
    161c:	601a      	str	r2, [r3, #0]
    161e:	4770      	bx	lr
    1620:	4000c008 	.word	0x4000c008
    1624:	204d5750 	.word	0x204d5750
    1628:	6d617845 	.word	0x6d617845
    162c:	0a656c70 	.word	0x0a656c70
    1630:	0000000a 	.word	0x0000000a
    1634:	0a0a0a0a 	.word	0x0a0a0a0a
    1638:	0a0a0a0a 	.word	0x0a0a0a0a
    163c:	0a0a0a0a 	.word	0x0a0a0a0a
    1640:	0a0a0a0a 	.word	0x0a0a0a0a
    1644:	00000a0a 	.word	0x00000a0a

00001648 <g_pui32Brightness>:
    1648:	00000001 00000001 00000001 00000002     ................
    1658:	00000003 00000004 00000006 00000008     ................
    1668:	0000000a 0000000c 0000000e 00000011     ................
    1678:	00000014 00000017 00000019 0000001c     ................
    1688:	0000001f 00000023 00000026 00000028     ....#...&...(...
    1698:	0000002b 0000002e 00000031 00000033     +.......1...3...
    16a8:	00000035 00000037 00000039 0000003b     5...7...9...;...
    16b8:	0000003c 0000003d 0000003e 0000003e     <...=...>...>...
    16c8:	0000003f 0000003e 0000003e 0000003d     ?...>...>...=...
    16d8:	0000003c 0000003b 00000039 00000037     <...;...9...7...
    16e8:	00000035 00000033 00000031 0000002e     5...3...1.......
    16f8:	0000002b 00000028 00000026 00000023     +...(...&...#...
    1708:	00000020 0000001c 00000019 00000017      ...............
    1718:	00000014 00000011 0000000e 0000000c     ................
    1728:	0000000a 00000008 00000006 00000004     ................
    1738:	00000003 00000002 00000001 00000001     ................

00001748 <CSWTCH.4>:
    1748:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1758:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
