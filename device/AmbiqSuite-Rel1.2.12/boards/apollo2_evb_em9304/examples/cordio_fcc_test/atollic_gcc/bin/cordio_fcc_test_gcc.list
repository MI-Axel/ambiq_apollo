
cordio_fcc_test_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014f68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00040000  2**2
                  ALLOC
  2 .data         00000140  10001000  00014f68  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001980  10001140  000150a8  00031140  2**2
                  ALLOC
  4 .ARM.attributes 00000035  00000000  00000000  00031140  2**0
                  CONTENTS, READONLY
  5 .debug_info   00037a68  00000000  00000000  00031175  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000669a  00000000  00000000  00068bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00001730  00000000  00000000  0006f277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00002510  00000000  00000000  000709a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000e81a  00000000  00000000  00072eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008faa  00000000  00000000  000816d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      000000ea  00000000  00000000  0008a67b  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00005124  00000000  00000000  0008a768  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000edd6  00000000  00000000  0008f88c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 95 d1 00 00 fd d1 00 00 fd d3 00 00     ................
      10:	fd d3 00 00 fd d3 00 00 fd d3 00 00 00 00 00 00     ................
	...
      2c:	03 d2 00 00 03 d2 00 00 00 00 00 00 03 d2 00 00     ................
      3c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      4c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 d9 b6 00 00     ................
      5c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      6c:	03 d2 00 00 69 d0 00 00 4d d0 00 00 03 d2 00 00     ....i...M.......
      7c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      8c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      9c:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      ac:	03 d2 00 00 03 d2 00 00 03 d2 00 00 03 d2 00 00     ................
      bc:	03 d2 00 00                                         ....

000000c0 <attDmConnCback>:
      c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      c2:	7804      	ldrb	r4, [r0, #0]
      c4:	7883      	ldrb	r3, [r0, #2]
      c6:	3c01      	subs	r4, #1
      c8:	0005      	movs	r5, r0
      ca:	4e16      	ldr	r6, [pc, #88]	; (124 <attDmConnCback+0x64>)
      cc:	0164      	lsls	r4, r4, #5
      ce:	2b27      	cmp	r3, #39	; 0x27
      d0:	d10a      	bne.n	e8 <attDmConnCback+0x28>
      d2:	88c2      	ldrh	r2, [r0, #6]
      d4:	1933      	adds	r3, r6, r4
      d6:	831a      	strh	r2, [r3, #24]
      d8:	2217      	movs	r2, #23
      da:	835a      	strh	r2, [r3, #26]
      dc:	8802      	ldrh	r2, [r0, #0]
      de:	771a      	strb	r2, [r3, #28]
      e0:	2200      	movs	r2, #0
      e2:	775a      	strb	r2, [r3, #29]
      e4:	779a      	strb	r2, [r3, #30]
      e6:	77da      	strb	r2, [r3, #31]
      e8:	1934      	adds	r4, r6, r4
      ea:	7f23      	ldrb	r3, [r4, #28]
      ec:	2b00      	cmp	r3, #0
      ee:	d010      	beq.n	112 <attDmConnCback+0x52>
      f0:	0037      	movs	r7, r6
      f2:	37fc      	adds	r7, #252	; 0xfc
      f4:	68bb      	ldr	r3, [r7, #8]
      f6:	0029      	movs	r1, r5
      f8:	68db      	ldr	r3, [r3, #12]
      fa:	0020      	movs	r0, r4
      fc:	4798      	blx	r3
      fe:	687b      	ldr	r3, [r7, #4]
     100:	0029      	movs	r1, r5
     102:	68db      	ldr	r3, [r3, #12]
     104:	0020      	movs	r0, r4
     106:	4798      	blx	r3
     108:	78ab      	ldrb	r3, [r5, #2]
     10a:	2b28      	cmp	r3, #40	; 0x28
     10c:	d101      	bne.n	112 <attDmConnCback+0x52>
     10e:	2300      	movs	r3, #0
     110:	7723      	strb	r3, [r4, #28]
     112:	0033      	movs	r3, r6
     114:	33fc      	adds	r3, #252	; 0xfc
     116:	691b      	ldr	r3, [r3, #16]
     118:	2b00      	cmp	r3, #0
     11a:	d001      	beq.n	120 <attDmConnCback+0x60>
     11c:	0028      	movs	r0, r5
     11e:	4798      	blx	r3
     120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	10001140 	.word	0x10001140

00000128 <attEmptyHandler>:
     128:	4770      	bx	lr

0000012a <attEmptyConnCback>:
     12a:	4770      	bx	lr

0000012c <attEmptyDataCback>:
     12c:	4770      	bx	lr

0000012e <attL2cDataCback>:
     12e:	b510      	push	{r4, lr}
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <attL2cDataCback+0x1a>)
     132:	7a14      	ldrb	r4, [r2, #8]
     134:	33fc      	adds	r3, #252	; 0xfc
     136:	07e4      	lsls	r4, r4, #31
     138:	d501      	bpl.n	13e <attL2cDataCback+0x10>
     13a:	685b      	ldr	r3, [r3, #4]
     13c:	e000      	b.n	140 <attL2cDataCback+0x12>
     13e:	689b      	ldr	r3, [r3, #8]
     140:	681b      	ldr	r3, [r3, #0]
     142:	4798      	blx	r3
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	10001140 	.word	0x10001140

0000014c <attL2cCtrlCback>:
     14c:	b570      	push	{r4, r5, r6, lr}
     14e:	7805      	ldrb	r5, [r0, #0]
     150:	4c0f      	ldr	r4, [pc, #60]	; (190 <attL2cCtrlCback+0x44>)
     152:	3d01      	subs	r5, #1
     154:	016d      	lsls	r5, r5, #5
     156:	1961      	adds	r1, r4, r5
     158:	7f0b      	ldrb	r3, [r1, #28]
     15a:	0006      	movs	r6, r0
     15c:	2b00      	cmp	r3, #0
     15e:	d015      	beq.n	18c <attL2cCtrlCback+0x40>
     160:	7882      	ldrb	r2, [r0, #2]
     162:	1e53      	subs	r3, r2, #1
     164:	4258      	negs	r0, r3
     166:	4143      	adcs	r3, r0
     168:	778b      	strb	r3, [r1, #30]
     16a:	2a01      	cmp	r2, #1
     16c:	d005      	beq.n	17a <attL2cCtrlCback+0x2e>
     16e:	0023      	movs	r3, r4
     170:	33fc      	adds	r3, #252	; 0xfc
     172:	689b      	ldr	r3, [r3, #8]
     174:	0030      	movs	r0, r6
     176:	685b      	ldr	r3, [r3, #4]
     178:	4798      	blx	r3
     17a:	1965      	adds	r5, r4, r5
     17c:	7fab      	ldrb	r3, [r5, #30]
     17e:	2b00      	cmp	r3, #0
     180:	d104      	bne.n	18c <attL2cCtrlCback+0x40>
     182:	34fc      	adds	r4, #252	; 0xfc
     184:	6863      	ldr	r3, [r4, #4]
     186:	0030      	movs	r0, r6
     188:	685b      	ldr	r3, [r3, #4]
     18a:	4798      	blx	r3
     18c:	bd70      	pop	{r4, r5, r6, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	10001140 	.word	0x10001140

00000194 <attCcbByHandle>:
     194:	b510      	push	{r4, lr}
     196:	f002 fe6f 	bl	2e78 <DmConnIdByHandle>
     19a:	1e03      	subs	r3, r0, #0
     19c:	d003      	beq.n	1a6 <attCcbByHandle+0x12>
     19e:	3b01      	subs	r3, #1
     1a0:	4801      	ldr	r0, [pc, #4]	; (1a8 <attCcbByHandle+0x14>)
     1a2:	015b      	lsls	r3, r3, #5
     1a4:	18c0      	adds	r0, r0, r3
     1a6:	bd10      	pop	{r4, pc}
     1a8:	10001140 	.word	0x10001140

000001ac <attCcbByConnId>:
     1ac:	4b02      	ldr	r3, [pc, #8]	; (1b8 <attCcbByConnId+0xc>)
     1ae:	3801      	subs	r0, #1
     1b0:	0140      	lsls	r0, r0, #5
     1b2:	1818      	adds	r0, r3, r0
     1b4:	4770      	bx	lr
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	10001140 	.word	0x10001140

000001bc <attUuidCmp16to128>:
     1bc:	b510      	push	{r4, lr}
     1be:	4b06      	ldr	r3, [pc, #24]	; (1d8 <attUuidCmp16to128+0x1c>)
     1c0:	7802      	ldrb	r2, [r0, #0]
     1c2:	731a      	strb	r2, [r3, #12]
     1c4:	7842      	ldrb	r2, [r0, #1]
     1c6:	0018      	movs	r0, r3
     1c8:	735a      	strb	r2, [r3, #13]
     1ca:	2210      	movs	r2, #16
     1cc:	f011 f946 	bl	1145c <memcmp>
     1d0:	4243      	negs	r3, r0
     1d2:	4158      	adcs	r0, r3
     1d4:	b2c0      	uxtb	r0, r0
     1d6:	bd10      	pop	{r4, pc}
     1d8:	10001000 	.word	0x10001000

000001dc <attExecCallback>:
     1dc:	b530      	push	{r4, r5, lr}
     1de:	b085      	sub	sp, #20
     1e0:	466d      	mov	r5, sp
     1e2:	70eb      	strb	r3, [r5, #3]
     1e4:	2300      	movs	r3, #0
     1e6:	ac08      	add	r4, sp, #32
     1e8:	812b      	strh	r3, [r5, #8]
     1ea:	732b      	strb	r3, [r5, #12]
     1ec:	4b05      	ldr	r3, [pc, #20]	; (204 <attExecCallback+0x28>)
     1ee:	8824      	ldrh	r4, [r4, #0]
     1f0:	33fc      	adds	r3, #252	; 0xfc
     1f2:	8028      	strh	r0, [r5, #0]
     1f4:	70a9      	strb	r1, [r5, #2]
     1f6:	4668      	mov	r0, sp
     1f8:	816a      	strh	r2, [r5, #10]
     1fa:	81ec      	strh	r4, [r5, #14]
     1fc:	68db      	ldr	r3, [r3, #12]
     1fe:	4798      	blx	r3
     200:	b005      	add	sp, #20
     202:	bd30      	pop	{r4, r5, pc}
     204:	10001140 	.word	0x10001140

00000208 <attSetMtu>:
     208:	b507      	push	{r0, r1, r2, lr}
     20a:	1c13      	adds	r3, r2, #0
     20c:	428a      	cmp	r2, r1
     20e:	d900      	bls.n	212 <attSetMtu+0xa>
     210:	1c0b      	adds	r3, r1, #0
     212:	8b41      	ldrh	r1, [r0, #26]
     214:	b29a      	uxth	r2, r3
     216:	4291      	cmp	r1, r2
     218:	d007      	beq.n	22a <attSetMtu+0x22>
     21a:	8343      	strh	r3, [r0, #26]
     21c:	2300      	movs	r3, #0
     21e:	7f00      	ldrb	r0, [r0, #28]
     220:	2111      	movs	r1, #17
     222:	9200      	str	r2, [sp, #0]
     224:	001a      	movs	r2, r3
     226:	f7ff ffd9 	bl	1dc <attExecCallback>
     22a:	bd07      	pop	{r0, r1, r2, pc}

0000022c <attMsgAlloc>:
     22c:	b510      	push	{r4, lr}
     22e:	2100      	movs	r1, #0
     230:	f00a fdf2 	bl	ae18 <WsfMsgDataAlloc>
     234:	bd10      	pop	{r4, pc}

00000236 <AttHandlerInit>:
     236:	4b09      	ldr	r3, [pc, #36]	; (25c <AttHandlerInit+0x26>)
     238:	b510      	push	{r4, lr}
     23a:	001a      	movs	r2, r3
     23c:	32ff      	adds	r2, #255	; 0xff
     23e:	7450      	strb	r0, [r2, #17]
     240:	4a07      	ldr	r2, [pc, #28]	; (260 <AttHandlerInit+0x2a>)
     242:	33fc      	adds	r3, #252	; 0xfc
     244:	605a      	str	r2, [r3, #4]
     246:	609a      	str	r2, [r3, #8]
     248:	4906      	ldr	r1, [pc, #24]	; (264 <AttHandlerInit+0x2e>)
     24a:	4a07      	ldr	r2, [pc, #28]	; (268 <AttHandlerInit+0x32>)
     24c:	2004      	movs	r0, #4
     24e:	f003 fce9 	bl	3c24 <L2cRegister>
     252:	4906      	ldr	r1, [pc, #24]	; (26c <AttHandlerInit+0x36>)
     254:	2000      	movs	r0, #0
     256:	f002 fd09 	bl	2c6c <DmConnRegister>
     25a:	bd10      	pop	{r4, pc}
     25c:	10001140 	.word	0x10001140
     260:	0001216c 	.word	0x0001216c
     264:	0000012f 	.word	0x0000012f
     268:	0000014d 	.word	0x0000014d
     26c:	000000c1 	.word	0x000000c1

00000270 <AttHandler>:
     270:	b510      	push	{r4, lr}
     272:	1e08      	subs	r0, r1, #0
     274:	d009      	beq.n	28a <AttHandler+0x1a>
     276:	4b05      	ldr	r3, [pc, #20]	; (28c <AttHandler+0x1c>)
     278:	788a      	ldrb	r2, [r1, #2]
     27a:	33fc      	adds	r3, #252	; 0xfc
     27c:	2a1f      	cmp	r2, #31
     27e:	d901      	bls.n	284 <AttHandler+0x14>
     280:	689b      	ldr	r3, [r3, #8]
     282:	e000      	b.n	286 <AttHandler+0x16>
     284:	685b      	ldr	r3, [r3, #4]
     286:	689b      	ldr	r3, [r3, #8]
     288:	4798      	blx	r3
     28a:	bd10      	pop	{r4, pc}
     28c:	10001140 	.word	0x10001140

00000290 <AttRegister>:
     290:	4b09      	ldr	r3, [pc, #36]	; (2b8 <AttRegister+0x28>)
     292:	b507      	push	{r0, r1, r2, lr}
     294:	33fc      	adds	r3, #252	; 0xfc
     296:	60d8      	str	r0, [r3, #12]
     298:	f007 fd60 	bl	7d5c <HciGetMaxRxAclLen>
     29c:	4b07      	ldr	r3, [pc, #28]	; (2bc <AttRegister+0x2c>)
     29e:	3803      	subs	r0, #3
     2a0:	681b      	ldr	r3, [r3, #0]
     2a2:	889b      	ldrh	r3, [r3, #4]
     2a4:	4298      	cmp	r0, r3
     2a6:	dc06      	bgt.n	2b6 <AttRegister+0x26>
     2a8:	2000      	movs	r0, #0
     2aa:	2302      	movs	r3, #2
     2ac:	9000      	str	r0, [sp, #0]
     2ae:	0002      	movs	r2, r0
     2b0:	2152      	movs	r1, #82	; 0x52
     2b2:	f7ff ff93 	bl	1dc <attExecCallback>
     2b6:	bd07      	pop	{r0, r1, r2, pc}
     2b8:	10001140 	.word	0x10001140
     2bc:	10001088 	.word	0x10001088

000002c0 <AttConnRegister>:
     2c0:	4b01      	ldr	r3, [pc, #4]	; (2c8 <AttConnRegister+0x8>)
     2c2:	33fc      	adds	r3, #252	; 0xfc
     2c4:	6118      	str	r0, [r3, #16]
     2c6:	4770      	bx	lr
     2c8:	10001140 	.word	0x10001140

000002cc <AttGetMtu>:
     2cc:	4b02      	ldr	r3, [pc, #8]	; (2d8 <AttGetMtu+0xc>)
     2ce:	3801      	subs	r0, #1
     2d0:	0140      	lsls	r0, r0, #5
     2d2:	1818      	adds	r0, r3, r0
     2d4:	8b40      	ldrh	r0, [r0, #26]
     2d6:	4770      	bx	lr
     2d8:	10001140 	.word	0x10001140

000002dc <AttMsgAlloc>:
     2dc:	b510      	push	{r4, lr}
     2de:	291b      	cmp	r1, #27
     2e0:	d002      	beq.n	2e8 <AttMsgAlloc+0xc>
     2e2:	2200      	movs	r2, #0
     2e4:	291d      	cmp	r1, #29
     2e6:	d10a      	bne.n	2fe <AttMsgAlloc+0x22>
     2e8:	300b      	adds	r0, #11
     2ea:	b280      	uxth	r0, r0
     2ec:	f7ff ff9e 	bl	22c <attMsgAlloc>
     2f0:	0003      	movs	r3, r0
     2f2:	0002      	movs	r2, r0
     2f4:	1e58      	subs	r0, r3, #1
     2f6:	4183      	sbcs	r3, r0
     2f8:	320b      	adds	r2, #11
     2fa:	425b      	negs	r3, r3
     2fc:	401a      	ands	r2, r3
     2fe:	0010      	movs	r0, r2
     300:	bd10      	pop	{r4, pc}

00000302 <AttMsgFree>:
     302:	b510      	push	{r4, lr}
     304:	291b      	cmp	r1, #27
     306:	d002      	beq.n	30e <AttMsgFree+0xc>
     308:	2300      	movs	r3, #0
     30a:	291d      	cmp	r1, #29
     30c:	d100      	bne.n	310 <AttMsgFree+0xe>
     30e:	230b      	movs	r3, #11
     310:	1ac0      	subs	r0, r0, r3
     312:	f00a fdad 	bl	ae70 <WsfMsgFree>
     316:	bd10      	pop	{r4, pc}

00000318 <attcSendSimpleReq>:
     318:	2300      	movs	r3, #0
     31a:	b570      	push	{r4, r5, r6, lr}
     31c:	6945      	ldr	r5, [r0, #20]
     31e:	6143      	str	r3, [r0, #20]
     320:	7c83      	ldrb	r3, [r0, #18]
     322:	0004      	movs	r4, r0
     324:	2b0a      	cmp	r3, #10
     326:	d009      	beq.n	33c <attcSendSimpleReq+0x24>
     328:	0003      	movs	r3, r0
     32a:	2210      	movs	r2, #16
     32c:	3330      	adds	r3, #48	; 0x30
     32e:	701a      	strb	r2, [r3, #0]
     330:	4b06      	ldr	r3, [pc, #24]	; (34c <attcSendSimpleReq+0x34>)
     332:	3024      	adds	r0, #36	; 0x24
     334:	681b      	ldr	r3, [r3, #0]
     336:	7999      	ldrb	r1, [r3, #6]
     338:	f00a ff3c 	bl	b1b4 <WsfTimerStartSec>
     33c:	6823      	ldr	r3, [r4, #0]
     33e:	882a      	ldrh	r2, [r5, #0]
     340:	8b19      	ldrh	r1, [r3, #24]
     342:	2004      	movs	r0, #4
     344:	002b      	movs	r3, r5
     346:	f003 fc79 	bl	3c3c <L2cDataReq>
     34a:	bd70      	pop	{r4, r5, r6, pc}
     34c:	10001088 	.word	0x10001088

00000350 <attcSendReq>:
     350:	b510      	push	{r4, lr}
     352:	7c83      	ldrb	r3, [r0, #18]
     354:	4a02      	ldr	r2, [pc, #8]	; (360 <attcSendReq+0x10>)
     356:	009b      	lsls	r3, r3, #2
     358:	589b      	ldr	r3, [r3, r2]
     35a:	4798      	blx	r3
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	0001217c 	.word	0x0001217c

00000364 <attcSetupReq>:
     364:	0003      	movs	r3, r0
     366:	000a      	movs	r2, r1
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	3310      	adds	r3, #16
     36c:	ca70      	ldmia	r2!, {r4, r5, r6}
     36e:	c370      	stmia	r3!, {r4, r5, r6}
     370:	684a      	ldr	r2, [r1, #4]
     372:	ca12      	ldmia	r2!, {r1, r4}
     374:	c312      	stmia	r3!, {r1, r4}
     376:	f7ff ffeb 	bl	350 <attcSendReq>
     37a:	bd70      	pop	{r4, r5, r6, pc}

0000037c <attcCcbByConnId>:
     37c:	b510      	push	{r4, lr}
     37e:	0004      	movs	r4, r0
     380:	f002 fd8e 	bl	2ea0 <DmConnInUse>
     384:	2800      	cmp	r0, #0
     386:	d004      	beq.n	392 <attcCcbByConnId+0x16>
     388:	2338      	movs	r3, #56	; 0x38
     38a:	1e60      	subs	r0, r4, #1
     38c:	4358      	muls	r0, r3
     38e:	4b01      	ldr	r3, [pc, #4]	; (394 <attcCcbByConnId+0x18>)
     390:	1818      	adds	r0, r3, r0
     392:	bd10      	pop	{r4, pc}
     394:	10001254 	.word	0x10001254

00000398 <attcCcbByHandle>:
     398:	b510      	push	{r4, lr}
     39a:	f002 fd6d 	bl	2e78 <DmConnIdByHandle>
     39e:	2800      	cmp	r0, #0
     3a0:	d004      	beq.n	3ac <attcCcbByHandle+0x14>
     3a2:	2338      	movs	r3, #56	; 0x38
     3a4:	3801      	subs	r0, #1
     3a6:	4358      	muls	r0, r3
     3a8:	4b01      	ldr	r3, [pc, #4]	; (3b0 <attcCcbByHandle+0x18>)
     3aa:	1818      	adds	r0, r3, r0
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	10001254 	.word	0x10001254

000003b4 <attcDataCback>:
     3b4:	b570      	push	{r4, r5, r6, lr}
     3b6:	000d      	movs	r5, r1
     3b8:	0014      	movs	r4, r2
     3ba:	f7ff ffed 	bl	398 <attcCcbByHandle>
     3be:	2800      	cmp	r0, #0
     3c0:	d00f      	beq.n	3e2 <attcDataCback+0x2e>
     3c2:	7a23      	ldrb	r3, [r4, #8]
     3c4:	2b19      	cmp	r3, #25
     3c6:	d804      	bhi.n	3d2 <attcDataCback+0x1e>
     3c8:	0022      	movs	r2, r4
     3ca:	0029      	movs	r1, r5
     3cc:	f000 fa58 	bl	880 <attcProcRsp>
     3d0:	e007      	b.n	3e2 <attcDataCback+0x2e>
     3d2:	22fd      	movs	r2, #253	; 0xfd
     3d4:	3b1b      	subs	r3, #27
     3d6:	4213      	tst	r3, r2
     3d8:	d103      	bne.n	3e2 <attcDataCback+0x2e>
     3da:	0022      	movs	r2, r4
     3dc:	0029      	movs	r1, r5
     3de:	f000 faaf 	bl	940 <attcProcInd>
     3e2:	bd70      	pop	{r4, r5, r6, pc}

000003e4 <attcFreePkt>:
     3e4:	b510      	push	{r4, lr}
     3e6:	0004      	movs	r4, r0
     3e8:	6840      	ldr	r0, [r0, #4]
     3ea:	2800      	cmp	r0, #0
     3ec:	d003      	beq.n	3f6 <attcFreePkt+0x12>
     3ee:	f00a fd3f 	bl	ae70 <WsfMsgFree>
     3f2:	2300      	movs	r3, #0
     3f4:	6063      	str	r3, [r4, #4]
     3f6:	bd10      	pop	{r4, pc}

000003f8 <attcSendMtuReq>:
     3f8:	b510      	push	{r4, lr}
     3fa:	6803      	ldr	r3, [r0, #0]
     3fc:	0004      	movs	r4, r0
     3fe:	7f5a      	ldrb	r2, [r3, #29]
     400:	2a00      	cmp	r2, #0
     402:	d005      	beq.n	410 <attcSendMtuReq+0x18>
     404:	3010      	adds	r0, #16
     406:	f7ff ffed 	bl	3e4 <attcFreePkt>
     40a:	2300      	movs	r3, #0
     40c:	74a3      	strb	r3, [r4, #18]
     40e:	e003      	b.n	418 <attcSendMtuReq+0x20>
     410:	2201      	movs	r2, #1
     412:	775a      	strb	r2, [r3, #29]
     414:	f7ff ff80 	bl	318 <attcSendSimpleReq>
     418:	bd10      	pop	{r4, pc}

0000041a <attcExecCallback>:
     41a:	b513      	push	{r0, r1, r4, lr}
     41c:	2901      	cmp	r1, #1
     41e:	d003      	beq.n	428 <attcExecCallback+0xe>
     420:	2400      	movs	r4, #0
     422:	9400      	str	r4, [sp, #0]
     424:	f7ff feda 	bl	1dc <attExecCallback>
     428:	bd13      	pop	{r0, r1, r4, pc}

0000042a <attcSendWriteCmd>:
     42a:	b510      	push	{r4, lr}
     42c:	0004      	movs	r4, r0
     42e:	f7ff ff73 	bl	318 <attcSendSimpleReq>
     432:	6823      	ldr	r3, [r4, #0]
     434:	8b22      	ldrh	r2, [r4, #24]
     436:	7f18      	ldrb	r0, [r3, #28]
     438:	210a      	movs	r1, #10
     43a:	2300      	movs	r3, #0
     43c:	f7ff ffed 	bl	41a <attcExecCallback>
     440:	2300      	movs	r3, #0
     442:	74a3      	strb	r3, [r4, #18]
     444:	bd10      	pop	{r4, pc}

00000446 <attcReqClear>:
     446:	b570      	push	{r4, r5, r6, lr}
     448:	0006      	movs	r6, r0
     44a:	000c      	movs	r4, r1
     44c:	0015      	movs	r5, r2
     44e:	0008      	movs	r0, r1
     450:	f7ff ffc8 	bl	3e4 <attcFreePkt>
     454:	6833      	ldr	r3, [r6, #0]
     456:	8922      	ldrh	r2, [r4, #8]
     458:	7f18      	ldrb	r0, [r3, #28]
     45a:	78a1      	ldrb	r1, [r4, #2]
     45c:	002b      	movs	r3, r5
     45e:	f7ff ffdc 	bl	41a <attcExecCallback>
     462:	2300      	movs	r3, #0
     464:	70a3      	strb	r3, [r4, #2]
     466:	bd70      	pop	{r4, r5, r6, pc}

00000468 <attcSendPrepWriteReq>:
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	7cc3      	ldrb	r3, [r0, #19]
     46c:	0004      	movs	r4, r0
     46e:	8b85      	ldrh	r5, [r0, #28]
     470:	2b01      	cmp	r3, #1
     472:	d124      	bne.n	4be <attcSendPrepWriteReq+0x56>
     474:	6803      	ldr	r3, [r0, #0]
     476:	8b5b      	ldrh	r3, [r3, #26]
     478:	3b05      	subs	r3, #5
     47a:	429d      	cmp	r5, r3
     47c:	db00      	blt.n	480 <attcSendPrepWriteReq+0x18>
     47e:	b29d      	uxth	r5, r3
     480:	0028      	movs	r0, r5
     482:	300d      	adds	r0, #13
     484:	b280      	uxth	r0, r0
     486:	f7ff fed1 	bl	22c <attMsgAlloc>
     48a:	1e06      	subs	r6, r0, #0
     48c:	d010      	beq.n	4b0 <attcSendPrepWriteReq+0x48>
     48e:	220d      	movs	r2, #13
     490:	6961      	ldr	r1, [r4, #20]
     492:	f010 fff2 	bl	1147a <memcpy>
     496:	0030      	movs	r0, r6
     498:	002a      	movs	r2, r5
     49a:	6a21      	ldr	r1, [r4, #32]
     49c:	300d      	adds	r0, #13
     49e:	f010 ffec 	bl	1147a <memcpy>
     4a2:	6a23      	ldr	r3, [r4, #32]
     4a4:	195b      	adds	r3, r3, r5
     4a6:	6223      	str	r3, [r4, #32]
     4a8:	8ba3      	ldrh	r3, [r4, #28]
     4aa:	1b5b      	subs	r3, r3, r5
     4ac:	83a3      	strh	r3, [r4, #28]
     4ae:	e009      	b.n	4c4 <attcSendPrepWriteReq+0x5c>
     4b0:	0021      	movs	r1, r4
     4b2:	2270      	movs	r2, #112	; 0x70
     4b4:	3110      	adds	r1, #16
     4b6:	0020      	movs	r0, r4
     4b8:	f7ff ffc5 	bl	446 <attcReqClear>
     4bc:	e01d      	b.n	4fa <attcSendPrepWriteReq+0x92>
     4be:	2300      	movs	r3, #0
     4c0:	6946      	ldr	r6, [r0, #20]
     4c2:	6143      	str	r3, [r0, #20]
     4c4:	8be3      	ldrh	r3, [r4, #30]
     4c6:	2210      	movs	r2, #16
     4c8:	72f3      	strb	r3, [r6, #11]
     4ca:	8be3      	ldrh	r3, [r4, #30]
     4cc:	0020      	movs	r0, r4
     4ce:	0a1b      	lsrs	r3, r3, #8
     4d0:	7333      	strb	r3, [r6, #12]
     4d2:	8be3      	ldrh	r3, [r4, #30]
     4d4:	3024      	adds	r0, #36	; 0x24
     4d6:	18eb      	adds	r3, r5, r3
     4d8:	83e3      	strh	r3, [r4, #30]
     4da:	0023      	movs	r3, r4
     4dc:	3330      	adds	r3, #48	; 0x30
     4de:	701a      	strb	r2, [r3, #0]
     4e0:	4b06      	ldr	r3, [pc, #24]	; (4fc <attcSendPrepWriteReq+0x94>)
     4e2:	3505      	adds	r5, #5
     4e4:	681b      	ldr	r3, [r3, #0]
     4e6:	7999      	ldrb	r1, [r3, #6]
     4e8:	f00a fe64 	bl	b1b4 <WsfTimerStartSec>
     4ec:	6823      	ldr	r3, [r4, #0]
     4ee:	b2aa      	uxth	r2, r5
     4f0:	8b19      	ldrh	r1, [r3, #24]
     4f2:	2004      	movs	r0, #4
     4f4:	0033      	movs	r3, r6
     4f6:	f003 fba1 	bl	3c3c <L2cDataReq>
     4fa:	bd70      	pop	{r4, r5, r6, pc}
     4fc:	10001088 	.word	0x10001088

00000500 <attcSendContinuingReq>:
     500:	b570      	push	{r4, r5, r6, lr}
     502:	7cc3      	ldrb	r3, [r0, #19]
     504:	0004      	movs	r4, r0
     506:	6945      	ldr	r5, [r0, #20]
     508:	2b01      	cmp	r3, #1
     50a:	d114      	bne.n	536 <attcSendContinuingReq+0x36>
     50c:	8828      	ldrh	r0, [r5, #0]
     50e:	3008      	adds	r0, #8
     510:	b280      	uxth	r0, r0
     512:	f7ff fe8b 	bl	22c <attMsgAlloc>
     516:	1e05      	subs	r5, r0, #0
     518:	d006      	beq.n	528 <attcSendContinuingReq+0x28>
     51a:	6963      	ldr	r3, [r4, #20]
     51c:	881a      	ldrh	r2, [r3, #0]
     51e:	0019      	movs	r1, r3
     520:	3208      	adds	r2, #8
     522:	f010 ffaa 	bl	1147a <memcpy>
     526:	e008      	b.n	53a <attcSendContinuingReq+0x3a>
     528:	0021      	movs	r1, r4
     52a:	2270      	movs	r2, #112	; 0x70
     52c:	3110      	adds	r1, #16
     52e:	0020      	movs	r0, r4
     530:	f7ff ff89 	bl	446 <attcReqClear>
     534:	e023      	b.n	57e <attcSendContinuingReq+0x7e>
     536:	2300      	movs	r3, #0
     538:	6143      	str	r3, [r0, #20]
     53a:	7ca2      	ldrb	r2, [r4, #18]
     53c:	8be3      	ldrh	r3, [r4, #30]
     53e:	2a06      	cmp	r2, #6
     540:	d102      	bne.n	548 <attcSendContinuingReq+0x48>
     542:	72eb      	strb	r3, [r5, #11]
     544:	8be3      	ldrh	r3, [r4, #30]
     546:	e006      	b.n	556 <attcSendContinuingReq+0x56>
     548:	726b      	strb	r3, [r5, #9]
     54a:	8be3      	ldrh	r3, [r4, #30]
     54c:	0a1b      	lsrs	r3, r3, #8
     54e:	72ab      	strb	r3, [r5, #10]
     550:	8c23      	ldrh	r3, [r4, #32]
     552:	72eb      	strb	r3, [r5, #11]
     554:	8c23      	ldrh	r3, [r4, #32]
     556:	0a1b      	lsrs	r3, r3, #8
     558:	732b      	strb	r3, [r5, #12]
     55a:	0023      	movs	r3, r4
     55c:	2210      	movs	r2, #16
     55e:	0020      	movs	r0, r4
     560:	3330      	adds	r3, #48	; 0x30
     562:	701a      	strb	r2, [r3, #0]
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <attcSendContinuingReq+0x80>)
     566:	3024      	adds	r0, #36	; 0x24
     568:	681b      	ldr	r3, [r3, #0]
     56a:	7999      	ldrb	r1, [r3, #6]
     56c:	f00a fe22 	bl	b1b4 <WsfTimerStartSec>
     570:	6823      	ldr	r3, [r4, #0]
     572:	882a      	ldrh	r2, [r5, #0]
     574:	8b19      	ldrh	r1, [r3, #24]
     576:	2004      	movs	r0, #4
     578:	002b      	movs	r3, r5
     57a:	f003 fb5f 	bl	3c3c <L2cDataReq>
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	10001088 	.word	0x10001088

00000584 <attcConnCback>:
     584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     586:	788b      	ldrb	r3, [r1, #2]
     588:	0005      	movs	r5, r0
     58a:	2b27      	cmp	r3, #39	; 0x27
     58c:	d119      	bne.n	5c2 <attcConnCback+0x3e>
     58e:	7f00      	ldrb	r0, [r0, #28]
     590:	f002 fd00 	bl	2f94 <DmConnRole>
     594:	2800      	cmp	r0, #0
     596:	d153      	bne.n	640 <attcConnCback+0xbc>
     598:	4c2a      	ldr	r4, [pc, #168]	; (644 <attcConnCback+0xc0>)
     59a:	6823      	ldr	r3, [r4, #0]
     59c:	889e      	ldrh	r6, [r3, #4]
     59e:	f007 fbdd 	bl	7d5c <HciGetMaxRxAclLen>
     5a2:	3804      	subs	r0, #4
     5a4:	4286      	cmp	r6, r0
     5a6:	da02      	bge.n	5ae <attcConnCback+0x2a>
     5a8:	6823      	ldr	r3, [r4, #0]
     5aa:	8899      	ldrh	r1, [r3, #4]
     5ac:	e003      	b.n	5b6 <attcConnCback+0x32>
     5ae:	f007 fbd5 	bl	7d5c <HciGetMaxRxAclLen>
     5b2:	1f01      	subs	r1, r0, #4
     5b4:	b289      	uxth	r1, r1
     5b6:	2917      	cmp	r1, #23
     5b8:	d042      	beq.n	640 <attcConnCback+0xbc>
     5ba:	7f28      	ldrb	r0, [r5, #28]
     5bc:	f000 faab 	bl	b16 <AttcMtuReq>
     5c0:	e03e      	b.n	640 <attcConnCback+0xbc>
     5c2:	2b28      	cmp	r3, #40	; 0x28
     5c4:	d13c      	bne.n	640 <attcConnCback+0xbc>
     5c6:	78cb      	ldrb	r3, [r1, #3]
     5c8:	001c      	movs	r4, r3
     5ca:	3420      	adds	r4, #32
     5cc:	b2e4      	uxtb	r4, r4
     5ce:	2b00      	cmp	r3, #0
     5d0:	d102      	bne.n	5d8 <attcConnCback+0x54>
     5d2:	7a0c      	ldrb	r4, [r1, #8]
     5d4:	3420      	adds	r4, #32
     5d6:	b2e4      	uxtb	r4, r4
     5d8:	7f2b      	ldrb	r3, [r5, #28]
     5da:	2538      	movs	r5, #56	; 0x38
     5dc:	3b01      	subs	r3, #1
     5de:	435d      	muls	r5, r3
     5e0:	4e19      	ldr	r6, [pc, #100]	; (648 <attcConnCback+0xc4>)
     5e2:	9301      	str	r3, [sp, #4]
     5e4:	1977      	adds	r7, r6, r5
     5e6:	7cbb      	ldrb	r3, [r7, #18]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d00a      	beq.n	602 <attcConnCback+0x7e>
     5ec:	0038      	movs	r0, r7
     5ee:	3024      	adds	r0, #36	; 0x24
     5f0:	f00a fe06 	bl	b200 <WsfTimerStop>
     5f4:	0029      	movs	r1, r5
     5f6:	3110      	adds	r1, #16
     5f8:	1871      	adds	r1, r6, r1
     5fa:	0022      	movs	r2, r4
     5fc:	0038      	movs	r0, r7
     5fe:	f7ff ff22 	bl	446 <attcReqClear>
     602:	2138      	movs	r1, #56	; 0x38
     604:	9b01      	ldr	r3, [sp, #4]
     606:	4359      	muls	r1, r3
     608:	1871      	adds	r1, r6, r1
     60a:	798b      	ldrb	r3, [r1, #6]
     60c:	2b00      	cmp	r3, #0
     60e:	d004      	beq.n	61a <attcConnCback+0x96>
     610:	3104      	adds	r1, #4
     612:	0022      	movs	r2, r4
     614:	0038      	movs	r0, r7
     616:	f7ff ff16 	bl	446 <attcReqClear>
     61a:	2338      	movs	r3, #56	; 0x38
     61c:	9a01      	ldr	r2, [sp, #4]
     61e:	4353      	muls	r3, r2
     620:	2200      	movs	r2, #0
     622:	18f3      	adds	r3, r6, r3
     624:	0019      	movs	r1, r3
     626:	3335      	adds	r3, #53	; 0x35
     628:	701a      	strb	r2, [r3, #0]
     62a:	23e0      	movs	r3, #224	; 0xe0
     62c:	005b      	lsls	r3, r3, #1
     62e:	58f3      	ldr	r3, [r6, r3]
     630:	3134      	adds	r1, #52	; 0x34
     632:	700a      	strb	r2, [r1, #0]
     634:	4293      	cmp	r3, r2
     636:	d003      	beq.n	640 <attcConnCback+0xbc>
     638:	685b      	ldr	r3, [r3, #4]
     63a:	0021      	movs	r1, r4
     63c:	0038      	movs	r0, r7
     63e:	4798      	blx	r3
     640:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	10001088 	.word	0x10001088
     648:	10001254 	.word	0x10001254

0000064c <attcMsgCback>:
     64c:	b570      	push	{r4, r5, r6, lr}
     64e:	0005      	movs	r5, r0
     650:	7800      	ldrb	r0, [r0, #0]
     652:	f7ff fe93 	bl	37c <attcCcbByConnId>
     656:	78ab      	ldrb	r3, [r5, #2]
     658:	1e04      	subs	r4, r0, #0
     65a:	d106      	bne.n	66a <attcMsgCback+0x1e>
     65c:	3b01      	subs	r3, #1
     65e:	2b0c      	cmp	r3, #12
     660:	d84c      	bhi.n	6fc <attcMsgCback+0xb0>
     662:	0028      	movs	r0, r5
     664:	f7ff febe 	bl	3e4 <attcFreePkt>
     668:	e048      	b.n	6fc <attcMsgCback+0xb0>
     66a:	2b0c      	cmp	r3, #12
     66c:	d817      	bhi.n	69e <attcMsgCback+0x52>
     66e:	7983      	ldrb	r3, [r0, #6]
     670:	2b00      	cmp	r3, #0
     672:	d102      	bne.n	67a <attcMsgCback+0x2e>
     674:	7c83      	ldrb	r3, [r0, #18]
     676:	2b01      	cmp	r3, #1
     678:	d902      	bls.n	680 <attcMsgCback+0x34>
     67a:	2272      	movs	r2, #114	; 0x72
     67c:	0029      	movs	r1, r5
     67e:	e027      	b.n	6d0 <attcMsgCback+0x84>
     680:	2b01      	cmp	r3, #1
     682:	d004      	beq.n	68e <attcMsgCback+0x42>
     684:	0003      	movs	r3, r0
     686:	3334      	adds	r3, #52	; 0x34
     688:	781b      	ldrb	r3, [r3, #0]
     68a:	2b00      	cmp	r3, #0
     68c:	d003      	beq.n	696 <attcMsgCback+0x4a>
     68e:	3404      	adds	r4, #4
     690:	cd0e      	ldmia	r5!, {r1, r2, r3}
     692:	c40e      	stmia	r4!, {r1, r2, r3}
     694:	e032      	b.n	6fc <attcMsgCback+0xb0>
     696:	0029      	movs	r1, r5
     698:	f7ff fe64 	bl	364 <attcSetupReq>
     69c:	e02e      	b.n	6fc <attcMsgCback+0xb0>
     69e:	001a      	movs	r2, r3
     6a0:	3a0d      	subs	r2, #13
     6a2:	2a01      	cmp	r2, #1
     6a4:	d809      	bhi.n	6ba <attcMsgCback+0x6e>
     6a6:	23e0      	movs	r3, #224	; 0xe0
     6a8:	4a15      	ldr	r2, [pc, #84]	; (700 <attcMsgCback+0xb4>)
     6aa:	005b      	lsls	r3, r3, #1
     6ac:	58d3      	ldr	r3, [r2, r3]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d024      	beq.n	6fc <attcMsgCback+0xb0>
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	0029      	movs	r1, r5
     6b6:	4798      	blx	r3
     6b8:	e020      	b.n	6fc <attcMsgCback+0xb0>
     6ba:	2b0f      	cmp	r3, #15
     6bc:	d111      	bne.n	6e2 <attcMsgCback+0x96>
     6be:	7c83      	ldrb	r3, [r0, #18]
     6c0:	2b01      	cmp	r3, #1
     6c2:	d909      	bls.n	6d8 <attcMsgCback+0x8c>
     6c4:	3024      	adds	r0, #36	; 0x24
     6c6:	f00a fd9b 	bl	b200 <WsfTimerStop>
     6ca:	0021      	movs	r1, r4
     6cc:	3110      	adds	r1, #16
     6ce:	2274      	movs	r2, #116	; 0x74
     6d0:	0020      	movs	r0, r4
     6d2:	f7ff feb8 	bl	446 <attcReqClear>
     6d6:	e011      	b.n	6fc <attcMsgCback+0xb0>
     6d8:	7983      	ldrb	r3, [r0, #6]
     6da:	1d01      	adds	r1, r0, #4
     6dc:	2b00      	cmp	r3, #0
     6de:	d00d      	beq.n	6fc <attcMsgCback+0xb0>
     6e0:	e7f5      	b.n	6ce <attcMsgCback+0x82>
     6e2:	2b10      	cmp	r3, #16
     6e4:	d10a      	bne.n	6fc <attcMsgCback+0xb0>
     6e6:	7c83      	ldrb	r3, [r0, #18]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d007      	beq.n	6fc <attcMsgCback+0xb0>
     6ec:	0001      	movs	r1, r0
     6ee:	2271      	movs	r2, #113	; 0x71
     6f0:	3110      	adds	r1, #16
     6f2:	f7ff fea8 	bl	446 <attcReqClear>
     6f6:	2201      	movs	r2, #1
     6f8:	6823      	ldr	r3, [r4, #0]
     6fa:	77da      	strb	r2, [r3, #31]
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	10001254 	.word	0x10001254

00000704 <AttcInit>:
     704:	21e0      	movs	r1, #224	; 0xe0
     706:	2300      	movs	r3, #0
     708:	4a0c      	ldr	r2, [pc, #48]	; (73c <AttcInit+0x38>)
     70a:	0049      	lsls	r1, r1, #1
     70c:	b530      	push	{r4, r5, lr}
     70e:	5053      	str	r3, [r2, r1]
     710:	490b      	ldr	r1, [pc, #44]	; (740 <AttcInit+0x3c>)
     712:	322c      	adds	r2, #44	; 0x2c
     714:	0008      	movs	r0, r1
     716:	30ff      	adds	r0, #255	; 0xff
     718:	7c44      	ldrb	r4, [r0, #17]
     71a:	0015      	movs	r5, r2
     71c:	0158      	lsls	r0, r3, #5
     71e:	3d2c      	subs	r5, #44	; 0x2c
     720:	1808      	adds	r0, r1, r0
     722:	3301      	adds	r3, #1
     724:	6028      	str	r0, [r5, #0]
     726:	7014      	strb	r4, [r2, #0]
     728:	8053      	strh	r3, [r2, #2]
     72a:	3238      	adds	r2, #56	; 0x38
     72c:	2b08      	cmp	r3, #8
     72e:	d1f4      	bne.n	71a <AttcInit+0x16>
     730:	4b04      	ldr	r3, [pc, #16]	; (744 <AttcInit+0x40>)
     732:	31fc      	adds	r1, #252	; 0xfc
     734:	3334      	adds	r3, #52	; 0x34
     736:	604b      	str	r3, [r1, #4]
     738:	bd30      	pop	{r4, r5, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	10001254 	.word	0x10001254
     740:	10001140 	.word	0x10001140
     744:	0001217c 	.word	0x0001217c

00000748 <attcProcErrRsp>:
     748:	b510      	push	{r4, lr}
     74a:	7c81      	ldrb	r1, [r0, #18]
     74c:	0010      	movs	r0, r2
     74e:	1f4c      	subs	r4, r1, #5
     750:	7099      	strb	r1, [r3, #2]
     752:	300c      	adds	r0, #12
     754:	2c01      	cmp	r4, #1
     756:	d908      	bls.n	76a <attcProcErrRsp+0x22>
     758:	2402      	movs	r4, #2
     75a:	43a1      	bics	r1, r4
     75c:	2909      	cmp	r1, #9
     75e:	d004      	beq.n	76a <attcProcErrRsp+0x22>
     760:	7ad1      	ldrb	r1, [r2, #11]
     762:	7a92      	ldrb	r2, [r2, #10]
     764:	0209      	lsls	r1, r1, #8
     766:	1852      	adds	r2, r2, r1
     768:	815a      	strh	r2, [r3, #10]
     76a:	7802      	ldrb	r2, [r0, #0]
     76c:	2a00      	cmp	r2, #0
     76e:	d100      	bne.n	772 <attcProcErrRsp+0x2a>
     770:	2275      	movs	r2, #117	; 0x75
     772:	70da      	strb	r2, [r3, #3]
     774:	2200      	movs	r2, #0
     776:	811a      	strh	r2, [r3, #8]
     778:	bd10      	pop	{r4, pc}

0000077a <attcProcFindOrReadRsp>:
     77a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     77c:	0014      	movs	r4, r2
     77e:	3108      	adds	r1, #8
     780:	1852      	adds	r2, r2, r1
     782:	4694      	mov	ip, r2
     784:	0022      	movs	r2, r4
     786:	7c87      	ldrb	r7, [r0, #18]
     788:	9300      	str	r3, [sp, #0]
     78a:	320a      	adds	r2, #10
     78c:	7a61      	ldrb	r1, [r4, #9]
     78e:	2f02      	cmp	r7, #2
     790:	d104      	bne.n	79c <attcProcFindOrReadRsp+0x22>
     792:	003e      	movs	r6, r7
     794:	2901      	cmp	r1, #1
     796:	d007      	beq.n	7a8 <attcProcFindOrReadRsp+0x2e>
     798:	360e      	adds	r6, #14
     79a:	e005      	b.n	7a8 <attcProcFindOrReadRsp+0x2e>
     79c:	1f0e      	subs	r6, r1, #4
     79e:	b2f6      	uxtb	r6, r6
     7a0:	2f04      	cmp	r7, #4
     7a2:	d101      	bne.n	7a8 <attcProcFindOrReadRsp+0x2e>
     7a4:	3902      	subs	r1, #2
     7a6:	b2ce      	uxtb	r6, r1
     7a8:	8bc5      	ldrh	r5, [r0, #30]
     7aa:	4562      	cmp	r2, ip
     7ac:	d22e      	bcs.n	80c <attcProcFindOrReadRsp+0x92>
     7ae:	7854      	ldrb	r4, [r2, #1]
     7b0:	7811      	ldrb	r1, [r2, #0]
     7b2:	0224      	lsls	r4, r4, #8
     7b4:	190c      	adds	r4, r1, r4
     7b6:	b2a4      	uxth	r4, r4
     7b8:	2c00      	cmp	r4, #0
     7ba:	d024      	beq.n	806 <attcProcFindOrReadRsp+0x8c>
     7bc:	2d00      	cmp	r5, #0
     7be:	d022      	beq.n	806 <attcProcFindOrReadRsp+0x8c>
     7c0:	42a5      	cmp	r5, r4
     7c2:	d820      	bhi.n	806 <attcProcFindOrReadRsp+0x8c>
     7c4:	8c01      	ldrh	r1, [r0, #32]
     7c6:	9101      	str	r1, [sp, #4]
     7c8:	428c      	cmp	r4, r1
     7ca:	d81c      	bhi.n	806 <attcProcFindOrReadRsp+0x8c>
     7cc:	2f08      	cmp	r7, #8
     7ce:	d10f      	bne.n	7f0 <attcProcFindOrReadRsp+0x76>
     7d0:	78d1      	ldrb	r1, [r2, #3]
     7d2:	020b      	lsls	r3, r1, #8
     7d4:	7891      	ldrb	r1, [r2, #2]
     7d6:	3204      	adds	r2, #4
     7d8:	18c9      	adds	r1, r1, r3
     7da:	b289      	uxth	r1, r1
     7dc:	2900      	cmp	r1, #0
     7de:	d012      	beq.n	806 <attcProcFindOrReadRsp+0x8c>
     7e0:	428c      	cmp	r4, r1
     7e2:	d810      	bhi.n	806 <attcProcFindOrReadRsp+0x8c>
     7e4:	428d      	cmp	r5, r1
     7e6:	d80e      	bhi.n	806 <attcProcFindOrReadRsp+0x8c>
     7e8:	9c01      	ldr	r4, [sp, #4]
     7ea:	428c      	cmp	r4, r1
     7ec:	d202      	bcs.n	7f4 <attcProcFindOrReadRsp+0x7a>
     7ee:	e00a      	b.n	806 <attcProcFindOrReadRsp+0x8c>
     7f0:	0021      	movs	r1, r4
     7f2:	3202      	adds	r2, #2
     7f4:	4c0f      	ldr	r4, [pc, #60]	; (834 <attcProcFindOrReadRsp+0xba>)
     7f6:	2500      	movs	r5, #0
     7f8:	42a1      	cmp	r1, r4
     7fa:	d001      	beq.n	800 <attcProcFindOrReadRsp+0x86>
     7fc:	3101      	adds	r1, #1
     7fe:	b28d      	uxth	r5, r1
     800:	1992      	adds	r2, r2, r6
     802:	4594      	cmp	ip, r2
     804:	d2d1      	bcs.n	7aa <attcProcFindOrReadRsp+0x30>
     806:	2273      	movs	r2, #115	; 0x73
     808:	9b00      	ldr	r3, [sp, #0]
     80a:	70da      	strb	r2, [r3, #3]
     80c:	9b00      	ldr	r3, [sp, #0]
     80e:	78db      	ldrb	r3, [r3, #3]
     810:	2b00      	cmp	r3, #0
     812:	d10d      	bne.n	830 <attcProcFindOrReadRsp+0xb6>
     814:	7cc3      	ldrb	r3, [r0, #19]
     816:	2b01      	cmp	r3, #1
     818:	d10a      	bne.n	830 <attcProcFindOrReadRsp+0xb6>
     81a:	2d00      	cmp	r5, #0
     81c:	d003      	beq.n	826 <attcProcFindOrReadRsp+0xac>
     81e:	8c03      	ldrh	r3, [r0, #32]
     820:	3301      	adds	r3, #1
     822:	429d      	cmp	r5, r3
     824:	d102      	bne.n	82c <attcProcFindOrReadRsp+0xb2>
     826:	2300      	movs	r3, #0
     828:	74c3      	strb	r3, [r0, #19]
     82a:	e001      	b.n	830 <attcProcFindOrReadRsp+0xb6>
     82c:	83c5      	strh	r5, [r0, #30]
     82e:	8305      	strh	r5, [r0, #24]
     830:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	0000ffff 	.word	0x0000ffff

00000838 <attcProcReadRsp>:
     838:	4770      	bx	lr

0000083a <attcProcWriteRsp>:
     83a:	2200      	movs	r2, #0
     83c:	811a      	strh	r2, [r3, #8]
     83e:	4770      	bx	lr

00000840 <attcProcMtuRsp>:
     840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     842:	7a94      	ldrb	r4, [r2, #10]
     844:	7a53      	ldrb	r3, [r2, #9]
     846:	0224      	lsls	r4, r4, #8
     848:	191c      	adds	r4, r3, r4
     84a:	b2a4      	uxth	r4, r4
     84c:	2c16      	cmp	r4, #22
     84e:	d800      	bhi.n	852 <attcProcMtuRsp+0x12>
     850:	2417      	movs	r4, #23
     852:	4e0a      	ldr	r6, [pc, #40]	; (87c <attcProcMtuRsp+0x3c>)
     854:	6805      	ldr	r5, [r0, #0]
     856:	6833      	ldr	r3, [r6, #0]
     858:	889f      	ldrh	r7, [r3, #4]
     85a:	f007 fa7f 	bl	7d5c <HciGetMaxRxAclLen>
     85e:	3804      	subs	r0, #4
     860:	4287      	cmp	r7, r0
     862:	da02      	bge.n	86a <attcProcMtuRsp+0x2a>
     864:	6833      	ldr	r3, [r6, #0]
     866:	889a      	ldrh	r2, [r3, #4]
     868:	e003      	b.n	872 <attcProcMtuRsp+0x32>
     86a:	f007 fa77 	bl	7d5c <HciGetMaxRxAclLen>
     86e:	1f02      	subs	r2, r0, #4
     870:	b292      	uxth	r2, r2
     872:	0028      	movs	r0, r5
     874:	0021      	movs	r1, r4
     876:	f7ff fcc7 	bl	208 <attSetMtu>
     87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     87c:	10001088 	.word	0x10001088

00000880 <attcProcRsp>:
     880:	b5f0      	push	{r4, r5, r6, r7, lr}
     882:	000e      	movs	r6, r1
     884:	7c81      	ldrb	r1, [r0, #18]
     886:	b085      	sub	sp, #20
     888:	0004      	movs	r4, r0
     88a:	0015      	movs	r5, r2
     88c:	2900      	cmp	r1, #0
     88e:	d050      	beq.n	932 <attcProcRsp+0xb2>
     890:	4668      	mov	r0, sp
     892:	7a13      	ldrb	r3, [r2, #8]
     894:	105b      	asrs	r3, r3, #1
     896:	b2da      	uxtb	r2, r3
     898:	7082      	strb	r2, [r0, #2]
     89a:	2b00      	cmp	r3, #0
     89c:	d001      	beq.n	8a2 <attcProcRsp+0x22>
     89e:	4291      	cmp	r1, r2
     8a0:	d147      	bne.n	932 <attcProcRsp+0xb2>
     8a2:	0020      	movs	r0, r4
     8a4:	3024      	adds	r0, #36	; 0x24
     8a6:	f00a fcab 	bl	b200 <WsfTimerStop>
     8aa:	002b      	movs	r3, r5
     8ac:	466a      	mov	r2, sp
     8ae:	2700      	movs	r7, #0
     8b0:	3309      	adds	r3, #9
     8b2:	9301      	str	r3, [sp, #4]
     8b4:	1e73      	subs	r3, r6, #1
     8b6:	8113      	strh	r3, [r2, #8]
     8b8:	8b23      	ldrh	r3, [r4, #24]
     8ba:	70d7      	strb	r7, [r2, #3]
     8bc:	8153      	strh	r3, [r2, #10]
     8be:	7893      	ldrb	r3, [r2, #2]
     8c0:	4a1d      	ldr	r2, [pc, #116]	; (938 <attcProcRsp+0xb8>)
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	589b      	ldr	r3, [r3, r2]
     8c6:	0031      	movs	r1, r6
     8c8:	469c      	mov	ip, r3
     8ca:	002a      	movs	r2, r5
     8cc:	466b      	mov	r3, sp
     8ce:	0020      	movs	r0, r4
     8d0:	4665      	mov	r5, ip
     8d2:	47a8      	blx	r5
     8d4:	7ce2      	ldrb	r2, [r4, #19]
     8d6:	003b      	movs	r3, r7
     8d8:	42ba      	cmp	r2, r7
     8da:	d003      	beq.n	8e4 <attcProcRsp+0x64>
     8dc:	466a      	mov	r2, sp
     8de:	78d2      	ldrb	r2, [r2, #3]
     8e0:	42ba      	cmp	r2, r7
     8e2:	d004      	beq.n	8ee <attcProcRsp+0x6e>
     8e4:	0020      	movs	r0, r4
     8e6:	74a3      	strb	r3, [r4, #18]
     8e8:	3010      	adds	r0, #16
     8ea:	f7ff fd7b 	bl	3e4 <attcFreePkt>
     8ee:	466b      	mov	r3, sp
     8f0:	789b      	ldrb	r3, [r3, #2]
     8f2:	2b01      	cmp	r3, #1
     8f4:	d009      	beq.n	90a <attcProcRsp+0x8a>
     8f6:	466a      	mov	r2, sp
     8f8:	7ce3      	ldrb	r3, [r4, #19]
     8fa:	4668      	mov	r0, sp
     8fc:	7313      	strb	r3, [r2, #12]
     8fe:	8a23      	ldrh	r3, [r4, #16]
     900:	8013      	strh	r3, [r2, #0]
     902:	4b0e      	ldr	r3, [pc, #56]	; (93c <attcProcRsp+0xbc>)
     904:	33fc      	adds	r3, #252	; 0xfc
     906:	68db      	ldr	r3, [r3, #12]
     908:	4798      	blx	r3
     90a:	0023      	movs	r3, r4
     90c:	3334      	adds	r3, #52	; 0x34
     90e:	781b      	ldrb	r3, [r3, #0]
     910:	2b00      	cmp	r3, #0
     912:	d10e      	bne.n	932 <attcProcRsp+0xb2>
     914:	6965      	ldr	r5, [r4, #20]
     916:	2d00      	cmp	r5, #0
     918:	d003      	beq.n	922 <attcProcRsp+0xa2>
     91a:	0020      	movs	r0, r4
     91c:	f7ff fd18 	bl	350 <attcSendReq>
     920:	e007      	b.n	932 <attcProcRsp+0xb2>
     922:	79a3      	ldrb	r3, [r4, #6]
     924:	2b00      	cmp	r3, #0
     926:	d004      	beq.n	932 <attcProcRsp+0xb2>
     928:	1d21      	adds	r1, r4, #4
     92a:	0020      	movs	r0, r4
     92c:	f7ff fd1a 	bl	364 <attcSetupReq>
     930:	71a5      	strb	r5, [r4, #6]
     932:	b005      	add	sp, #20
     934:	bdf0      	pop	{r4, r5, r6, r7, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	000121c0 	.word	0x000121c0
     93c:	10001140 	.word	0x10001140

00000940 <attcProcInd>:
     940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     942:	0004      	movs	r4, r0
     944:	4668      	mov	r0, sp
     946:	7a13      	ldrb	r3, [r2, #8]
     948:	3903      	subs	r1, #3
     94a:	105b      	asrs	r3, r3, #1
     94c:	7083      	strb	r3, [r0, #2]
     94e:	7a93      	ldrb	r3, [r2, #10]
     950:	7a50      	ldrb	r0, [r2, #9]
     952:	021b      	lsls	r3, r3, #8
     954:	18c3      	adds	r3, r0, r3
     956:	4668      	mov	r0, sp
     958:	320b      	adds	r2, #11
     95a:	9201      	str	r2, [sp, #4]
     95c:	b29b      	uxth	r3, r3
     95e:	6822      	ldr	r2, [r4, #0]
     960:	8143      	strh	r3, [r0, #10]
     962:	8101      	strh	r1, [r0, #8]
     964:	7f12      	ldrb	r2, [r2, #28]
     966:	8002      	strh	r2, [r0, #0]
     968:	2200      	movs	r2, #0
     96a:	70c2      	strb	r2, [r0, #3]
     96c:	7302      	strb	r2, [r0, #12]
     96e:	4293      	cmp	r3, r2
     970:	d003      	beq.n	97a <attcProcInd+0x3a>
     972:	4b0f      	ldr	r3, [pc, #60]	; (9b0 <attcProcInd+0x70>)
     974:	33fc      	adds	r3, #252	; 0xfc
     976:	68db      	ldr	r3, [r3, #12]
     978:	4798      	blx	r3
     97a:	466b      	mov	r3, sp
     97c:	789b      	ldrb	r3, [r3, #2]
     97e:	2b0e      	cmp	r3, #14
     980:	d115      	bne.n	9ae <attcProcInd+0x6e>
     982:	0023      	movs	r3, r4
     984:	3334      	adds	r3, #52	; 0x34
     986:	781b      	ldrb	r3, [r3, #0]
     988:	2b00      	cmp	r3, #0
     98a:	d10d      	bne.n	9a8 <attcProcInd+0x68>
     98c:	2009      	movs	r0, #9
     98e:	f7ff fc4d 	bl	22c <attMsgAlloc>
     992:	1e03      	subs	r3, r0, #0
     994:	d00b      	beq.n	9ae <attcProcInd+0x6e>
     996:	221e      	movs	r2, #30
     998:	7202      	strb	r2, [r0, #8]
     99a:	6822      	ldr	r2, [r4, #0]
     99c:	2004      	movs	r0, #4
     99e:	8b11      	ldrh	r1, [r2, #24]
     9a0:	2201      	movs	r2, #1
     9a2:	f003 f94b 	bl	3c3c <L2cDataReq>
     9a6:	e002      	b.n	9ae <attcProcInd+0x6e>
     9a8:	2301      	movs	r3, #1
     9aa:	3435      	adds	r4, #53	; 0x35
     9ac:	7023      	strb	r3, [r4, #0]
     9ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     9b0:	10001140 	.word	0x10001140

000009b4 <attcSendMsg>:
     9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b6:	0006      	movs	r6, r0
     9b8:	b085      	sub	sp, #20
     9ba:	001d      	movs	r5, r3
     9bc:	ab0a      	add	r3, sp, #40	; 0x28
     9be:	781b      	ldrb	r3, [r3, #0]
     9c0:	000f      	movs	r7, r1
     9c2:	0014      	movs	r4, r2
     9c4:	9303      	str	r3, [sp, #12]
     9c6:	f009 fb6d 	bl	a0a4 <WsfTaskLock>
     9ca:	0030      	movs	r0, r6
     9cc:	f7ff fcd6 	bl	37c <attcCcbByConnId>
     9d0:	2800      	cmp	r0, #0
     9d2:	d005      	beq.n	9e0 <attcSendMsg+0x2c>
     9d4:	6803      	ldr	r3, [r0, #0]
     9d6:	8b5a      	ldrh	r2, [r3, #26]
     9d8:	9201      	str	r2, [sp, #4]
     9da:	7fdb      	ldrb	r3, [r3, #31]
     9dc:	9302      	str	r3, [sp, #8]
     9de:	e001      	b.n	9e4 <attcSendMsg+0x30>
     9e0:	9002      	str	r0, [sp, #8]
     9e2:	9001      	str	r0, [sp, #4]
     9e4:	f009 fb64 	bl	a0b0 <WsfTaskUnlock>
     9e8:	9b01      	ldr	r3, [sp, #4]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d030      	beq.n	a50 <attcSendMsg+0x9c>
     9ee:	9b02      	ldr	r3, [sp, #8]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d127      	bne.n	a44 <attcSendMsg+0x90>
     9f4:	2d00      	cmp	r5, #0
     9f6:	d00c      	beq.n	a12 <attcSendMsg+0x5e>
     9f8:	2c0b      	cmp	r4, #11
     9fa:	d001      	beq.n	a00 <attcSendMsg+0x4c>
     9fc:	882b      	ldrh	r3, [r5, #0]
     9fe:	e005      	b.n	a0c <attcSendMsg+0x58>
     a00:	9b03      	ldr	r3, [sp, #12]
     a02:	2b00      	cmp	r3, #0
     a04:	d105      	bne.n	a12 <attcSendMsg+0x5e>
     a06:	882b      	ldrh	r3, [r5, #0]
     a08:	3305      	adds	r3, #5
     a0a:	b29b      	uxth	r3, r3
     a0c:	9a01      	ldr	r2, [sp, #4]
     a0e:	429a      	cmp	r2, r3
     a10:	d311      	bcc.n	a36 <attcSendMsg+0x82>
     a12:	200c      	movs	r0, #12
     a14:	f00a fa15 	bl	ae42 <WsfMsgAlloc>
     a18:	1e01      	subs	r1, r0, #0
     a1a:	d019      	beq.n	a50 <attcSendMsg+0x9c>
     a1c:	466b      	mov	r3, sp
     a1e:	7b1b      	ldrb	r3, [r3, #12]
     a20:	8006      	strh	r6, [r0, #0]
     a22:	70c3      	strb	r3, [r0, #3]
     a24:	4b0e      	ldr	r3, [pc, #56]	; (a60 <attcSendMsg+0xac>)
     a26:	7084      	strb	r4, [r0, #2]
     a28:	6045      	str	r5, [r0, #4]
     a2a:	8107      	strh	r7, [r0, #8]
     a2c:	33ff      	adds	r3, #255	; 0xff
     a2e:	7c58      	ldrb	r0, [r3, #17]
     a30:	f00a fa2b 	bl	ae8a <WsfMsgSend>
     a34:	e011      	b.n	a5a <attcSendMsg+0xa6>
     a36:	2377      	movs	r3, #119	; 0x77
     a38:	003a      	movs	r2, r7
     a3a:	0021      	movs	r1, r4
     a3c:	0030      	movs	r0, r6
     a3e:	f7ff fcec 	bl	41a <attcExecCallback>
     a42:	e007      	b.n	a54 <attcSendMsg+0xa0>
     a44:	2371      	movs	r3, #113	; 0x71
     a46:	003a      	movs	r2, r7
     a48:	0021      	movs	r1, r4
     a4a:	0030      	movs	r0, r6
     a4c:	f7ff fce5 	bl	41a <attcExecCallback>
     a50:	2d00      	cmp	r5, #0
     a52:	d002      	beq.n	a5a <attcSendMsg+0xa6>
     a54:	0028      	movs	r0, r5
     a56:	f00a fa0b 	bl	ae70 <WsfMsgFree>
     a5a:	b005      	add	sp, #20
     a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	10001140 	.word	0x10001140

00000a64 <AttcFindInfoReq>:
     a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     a66:	0005      	movs	r5, r0
     a68:	200d      	movs	r0, #13
     a6a:	001e      	movs	r6, r3
     a6c:	000c      	movs	r4, r1
     a6e:	0017      	movs	r7, r2
     a70:	f7ff fbdc 	bl	22c <attMsgAlloc>
     a74:	1e03      	subs	r3, r0, #0
     a76:	d00b      	beq.n	a90 <AttcFindInfoReq+0x2c>
     a78:	2205      	movs	r2, #5
     a7a:	8002      	strh	r2, [r0, #0]
     a7c:	3a01      	subs	r2, #1
     a7e:	7202      	strb	r2, [r0, #8]
     a80:	8044      	strh	r4, [r0, #2]
     a82:	8087      	strh	r7, [r0, #4]
     a84:	3a02      	subs	r2, #2
     a86:	9600      	str	r6, [sp, #0]
     a88:	0021      	movs	r1, r4
     a8a:	0028      	movs	r0, r5
     a8c:	f7ff ff92 	bl	9b4 <attcSendMsg>
     a90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000a92 <AttcReadReq>:
     a92:	b537      	push	{r0, r1, r2, r4, r5, lr}
     a94:	0005      	movs	r5, r0
     a96:	200b      	movs	r0, #11
     a98:	000c      	movs	r4, r1
     a9a:	f7ff fbc7 	bl	22c <attMsgAlloc>
     a9e:	1e03      	subs	r3, r0, #0
     aa0:	d00d      	beq.n	abe <AttcReadReq+0x2c>
     aa2:	2203      	movs	r2, #3
     aa4:	8002      	strh	r2, [r0, #0]
     aa6:	3207      	adds	r2, #7
     aa8:	7202      	strb	r2, [r0, #8]
     aaa:	0a22      	lsrs	r2, r4, #8
     aac:	7282      	strb	r2, [r0, #10]
     aae:	2200      	movs	r2, #0
     ab0:	7244      	strb	r4, [r0, #9]
     ab2:	0021      	movs	r1, r4
     ab4:	9200      	str	r2, [sp, #0]
     ab6:	0028      	movs	r0, r5
     ab8:	3205      	adds	r2, #5
     aba:	f7ff ff7b 	bl	9b4 <attcSendMsg>
     abe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00000ac0 <AttcWriteReq>:
     ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac2:	0007      	movs	r7, r0
     ac4:	0010      	movs	r0, r2
     ac6:	300b      	adds	r0, #11
     ac8:	b085      	sub	sp, #20
     aca:	b280      	uxth	r0, r0
     acc:	000d      	movs	r5, r1
     ace:	0016      	movs	r6, r2
     ad0:	9303      	str	r3, [sp, #12]
     ad2:	f7ff fbab 	bl	22c <attMsgAlloc>
     ad6:	1e04      	subs	r4, r0, #0
     ad8:	d013      	beq.n	b02 <AttcWriteReq+0x42>
     ada:	1cf3      	adds	r3, r6, #3
     adc:	8003      	strh	r3, [r0, #0]
     ade:	2312      	movs	r3, #18
     ae0:	7203      	strb	r3, [r0, #8]
     ae2:	0a2b      	lsrs	r3, r5, #8
     ae4:	7283      	strb	r3, [r0, #10]
     ae6:	7245      	strb	r5, [r0, #9]
     ae8:	0032      	movs	r2, r6
     aea:	9903      	ldr	r1, [sp, #12]
     aec:	300b      	adds	r0, #11
     aee:	f010 fcc4 	bl	1147a <memcpy>
     af2:	2300      	movs	r3, #0
     af4:	2209      	movs	r2, #9
     af6:	9300      	str	r3, [sp, #0]
     af8:	0029      	movs	r1, r5
     afa:	0023      	movs	r3, r4
     afc:	0038      	movs	r0, r7
     afe:	f7ff ff59 	bl	9b4 <attcSendMsg>
     b02:	b005      	add	sp, #20
     b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b06 <AttcCancelReq>:
     b06:	b507      	push	{r0, r1, r2, lr}
     b08:	2100      	movs	r1, #0
     b0a:	220f      	movs	r2, #15
     b0c:	9100      	str	r1, [sp, #0]
     b0e:	000b      	movs	r3, r1
     b10:	f7ff ff50 	bl	9b4 <attcSendMsg>
     b14:	bd07      	pop	{r0, r1, r2, pc}

00000b16 <AttcMtuReq>:
     b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
     b18:	0005      	movs	r5, r0
     b1a:	200b      	movs	r0, #11
     b1c:	000c      	movs	r4, r1
     b1e:	f7ff fb85 	bl	22c <attMsgAlloc>
     b22:	1e03      	subs	r3, r0, #0
     b24:	d00c      	beq.n	b40 <AttcMtuReq+0x2a>
     b26:	2203      	movs	r2, #3
     b28:	2100      	movs	r1, #0
     b2a:	8002      	strh	r2, [r0, #0]
     b2c:	7244      	strb	r4, [r0, #9]
     b2e:	3a01      	subs	r2, #1
     b30:	0a24      	lsrs	r4, r4, #8
     b32:	7202      	strb	r2, [r0, #8]
     b34:	7284      	strb	r4, [r0, #10]
     b36:	3a01      	subs	r2, #1
     b38:	9100      	str	r1, [sp, #0]
     b3a:	0028      	movs	r0, r5
     b3c:	f7ff ff3a 	bl	9b4 <attcSendMsg>
     b40:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     b42:	46c0      	nop			; (mov r8, r8)

00000b44 <attcProcFindByTypeRsp>:
     b44:	b5f0      	push	{r4, r5, r6, r7, lr}
     b46:	4c1b      	ldr	r4, [pc, #108]	; (bb4 <attcProcFindByTypeRsp+0x70>)
     b48:	0017      	movs	r7, r2
     b4a:	46a4      	mov	ip, r4
     b4c:	3108      	adds	r1, #8
     b4e:	1852      	adds	r2, r2, r1
     b50:	8bc1      	ldrh	r1, [r0, #30]
     b52:	3709      	adds	r7, #9
     b54:	4297      	cmp	r7, r2
     b56:	d21c      	bcs.n	b92 <attcProcFindByTypeRsp+0x4e>
     b58:	787e      	ldrb	r6, [r7, #1]
     b5a:	783c      	ldrb	r4, [r7, #0]
     b5c:	0236      	lsls	r6, r6, #8
     b5e:	19a6      	adds	r6, r4, r6
     b60:	78fc      	ldrb	r4, [r7, #3]
     b62:	78bd      	ldrb	r5, [r7, #2]
     b64:	0224      	lsls	r4, r4, #8
     b66:	192d      	adds	r5, r5, r4
     b68:	b2b6      	uxth	r6, r6
     b6a:	b2ac      	uxth	r4, r5
     b6c:	3704      	adds	r7, #4
     b6e:	42a6      	cmp	r6, r4
     b70:	d80d      	bhi.n	b8e <attcProcFindByTypeRsp+0x4a>
     b72:	42b1      	cmp	r1, r6
     b74:	d80b      	bhi.n	b8e <attcProcFindByTypeRsp+0x4a>
     b76:	8c05      	ldrh	r5, [r0, #32]
     b78:	42b5      	cmp	r5, r6
     b7a:	d308      	bcc.n	b8e <attcProcFindByTypeRsp+0x4a>
     b7c:	2900      	cmp	r1, #0
     b7e:	d006      	beq.n	b8e <attcProcFindByTypeRsp+0x4a>
     b80:	2100      	movs	r1, #0
     b82:	4564      	cmp	r4, ip
     b84:	d001      	beq.n	b8a <attcProcFindByTypeRsp+0x46>
     b86:	3401      	adds	r4, #1
     b88:	b2a1      	uxth	r1, r4
     b8a:	42ba      	cmp	r2, r7
     b8c:	d2e2      	bcs.n	b54 <attcProcFindByTypeRsp+0x10>
     b8e:	2273      	movs	r2, #115	; 0x73
     b90:	70da      	strb	r2, [r3, #3]
     b92:	78db      	ldrb	r3, [r3, #3]
     b94:	2b00      	cmp	r3, #0
     b96:	d10c      	bne.n	bb2 <attcProcFindByTypeRsp+0x6e>
     b98:	7cc3      	ldrb	r3, [r0, #19]
     b9a:	2b01      	cmp	r3, #1
     b9c:	d109      	bne.n	bb2 <attcProcFindByTypeRsp+0x6e>
     b9e:	2900      	cmp	r1, #0
     ba0:	d002      	beq.n	ba8 <attcProcFindByTypeRsp+0x64>
     ba2:	8c03      	ldrh	r3, [r0, #32]
     ba4:	428b      	cmp	r3, r1
     ba6:	d202      	bcs.n	bae <attcProcFindByTypeRsp+0x6a>
     ba8:	2300      	movs	r3, #0
     baa:	74c3      	strb	r3, [r0, #19]
     bac:	e001      	b.n	bb2 <attcProcFindByTypeRsp+0x6e>
     bae:	83c1      	strh	r1, [r0, #30]
     bb0:	8301      	strh	r1, [r0, #24]
     bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bb4:	0000ffff 	.word	0x0000ffff

00000bb8 <attcProcReadLongRsp>:
     bb8:	7cc2      	ldrb	r2, [r0, #19]
     bba:	2a01      	cmp	r2, #1
     bbc:	d10a      	bne.n	bd4 <attcProcReadLongRsp+0x1c>
     bbe:	6802      	ldr	r2, [r0, #0]
     bc0:	8b52      	ldrh	r2, [r2, #26]
     bc2:	428a      	cmp	r2, r1
     bc4:	d902      	bls.n	bcc <attcProcReadLongRsp+0x14>
     bc6:	2300      	movs	r3, #0
     bc8:	74c3      	strb	r3, [r0, #19]
     bca:	e003      	b.n	bd4 <attcProcReadLongRsp+0x1c>
     bcc:	8bc2      	ldrh	r2, [r0, #30]
     bce:	891b      	ldrh	r3, [r3, #8]
     bd0:	18d3      	adds	r3, r2, r3
     bd2:	83c3      	strh	r3, [r0, #30]
     bd4:	4770      	bx	lr

00000bd6 <AttcFindByTypeValueReq>:
     bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd8:	b087      	sub	sp, #28
     bda:	001f      	movs	r7, r3
     bdc:	ab0c      	add	r3, sp, #48	; 0x30
     bde:	881d      	ldrh	r5, [r3, #0]
     be0:	9003      	str	r0, [sp, #12]
     be2:	0028      	movs	r0, r5
     be4:	ab0e      	add	r3, sp, #56	; 0x38
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	300f      	adds	r0, #15
     bea:	b280      	uxth	r0, r0
     bec:	000e      	movs	r6, r1
     bee:	9204      	str	r2, [sp, #16]
     bf0:	9305      	str	r3, [sp, #20]
     bf2:	f7ff fb1b 	bl	22c <attMsgAlloc>
     bf6:	1e04      	subs	r4, r0, #0
     bf8:	d017      	beq.n	c2a <AttcFindByTypeValueReq+0x54>
     bfa:	1deb      	adds	r3, r5, #7
     bfc:	8003      	strh	r3, [r0, #0]
     bfe:	466b      	mov	r3, sp
     c00:	8a1b      	ldrh	r3, [r3, #16]
     c02:	8046      	strh	r6, [r0, #2]
     c04:	8083      	strh	r3, [r0, #4]
     c06:	2306      	movs	r3, #6
     c08:	7203      	strb	r3, [r0, #8]
     c0a:	0a3b      	lsrs	r3, r7, #8
     c0c:	7383      	strb	r3, [r0, #14]
     c0e:	7347      	strb	r7, [r0, #13]
     c10:	002a      	movs	r2, r5
     c12:	990d      	ldr	r1, [sp, #52]	; 0x34
     c14:	300f      	adds	r0, #15
     c16:	f010 fc30 	bl	1147a <memcpy>
     c1a:	9b05      	ldr	r3, [sp, #20]
     c1c:	2203      	movs	r2, #3
     c1e:	9300      	str	r3, [sp, #0]
     c20:	0031      	movs	r1, r6
     c22:	0023      	movs	r3, r4
     c24:	9803      	ldr	r0, [sp, #12]
     c26:	f7ff fec5 	bl	9b4 <attcSendMsg>
     c2a:	b007      	add	sp, #28
     c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c2e <AttcReadByTypeReq>:
     c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
     c30:	001f      	movs	r7, r3
     c32:	b087      	sub	sp, #28
     c34:	b2bd      	uxth	r5, r7
     c36:	9002      	str	r0, [sp, #8]
     c38:	0028      	movs	r0, r5
     c3a:	ab0c      	add	r3, sp, #48	; 0x30
     c3c:	9203      	str	r2, [sp, #12]
     c3e:	cb04      	ldmia	r3!, {r2}
     c40:	300d      	adds	r0, #13
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	000e      	movs	r6, r1
     c46:	9204      	str	r2, [sp, #16]
     c48:	9305      	str	r3, [sp, #20]
     c4a:	f7ff faef 	bl	22c <attMsgAlloc>
     c4e:	1e04      	subs	r4, r0, #0
     c50:	d014      	beq.n	c7c <AttcReadByTypeReq+0x4e>
     c52:	466b      	mov	r3, sp
     c54:	899b      	ldrh	r3, [r3, #12]
     c56:	3505      	adds	r5, #5
     c58:	8083      	strh	r3, [r0, #4]
     c5a:	2308      	movs	r3, #8
     c5c:	8005      	strh	r5, [r0, #0]
     c5e:	7203      	strb	r3, [r0, #8]
     c60:	8046      	strh	r6, [r0, #2]
     c62:	003a      	movs	r2, r7
     c64:	9904      	ldr	r1, [sp, #16]
     c66:	300d      	adds	r0, #13
     c68:	f010 fc07 	bl	1147a <memcpy>
     c6c:	9b05      	ldr	r3, [sp, #20]
     c6e:	2204      	movs	r2, #4
     c70:	9300      	str	r3, [sp, #0]
     c72:	0031      	movs	r1, r6
     c74:	0023      	movs	r3, r4
     c76:	9802      	ldr	r0, [sp, #8]
     c78:	f7ff fe9c 	bl	9b4 <attcSendMsg>
     c7c:	b007      	add	sp, #28
     c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c80 <AttcReadLongReq>:
     c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c82:	0005      	movs	r5, r0
     c84:	200d      	movs	r0, #13
     c86:	001e      	movs	r6, r3
     c88:	000c      	movs	r4, r1
     c8a:	0017      	movs	r7, r2
     c8c:	f7ff face 	bl	22c <attMsgAlloc>
     c90:	1e03      	subs	r3, r0, #0
     c92:	d00d      	beq.n	cb0 <AttcReadLongReq+0x30>
     c94:	2205      	movs	r2, #5
     c96:	8002      	strh	r2, [r0, #0]
     c98:	3207      	adds	r2, #7
     c9a:	7202      	strb	r2, [r0, #8]
     c9c:	0a22      	lsrs	r2, r4, #8
     c9e:	7282      	strb	r2, [r0, #10]
     ca0:	8047      	strh	r7, [r0, #2]
     ca2:	7244      	strb	r4, [r0, #9]
     ca4:	2206      	movs	r2, #6
     ca6:	9600      	str	r6, [sp, #0]
     ca8:	0021      	movs	r1, r4
     caa:	0028      	movs	r0, r5
     cac:	f7ff fe82 	bl	9b4 <attcSendMsg>
     cb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000cb2 <AttcReadMultipleReq>:
     cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     cb4:	004e      	lsls	r6, r1, #1
     cb6:	0007      	movs	r7, r0
     cb8:	0030      	movs	r0, r6
     cba:	3009      	adds	r0, #9
     cbc:	000c      	movs	r4, r1
     cbe:	0015      	movs	r5, r2
     cc0:	f7ff fab4 	bl	22c <attMsgAlloc>
     cc4:	1e03      	subs	r3, r0, #0
     cc6:	d018      	beq.n	cfa <AttcReadMultipleReq+0x48>
     cc8:	220e      	movs	r2, #14
     cca:	3601      	adds	r6, #1
     ccc:	8006      	strh	r6, [r0, #0]
     cce:	8829      	ldrh	r1, [r5, #0]
     cd0:	7202      	strb	r2, [r0, #8]
     cd2:	0002      	movs	r2, r0
     cd4:	3209      	adds	r2, #9
     cd6:	3c01      	subs	r4, #1
     cd8:	b2e4      	uxtb	r4, r4
     cda:	2cff      	cmp	r4, #255	; 0xff
     cdc:	d007      	beq.n	cee <AttcReadMultipleReq+0x3c>
     cde:	8828      	ldrh	r0, [r5, #0]
     ce0:	7010      	strb	r0, [r2, #0]
     ce2:	8828      	ldrh	r0, [r5, #0]
     ce4:	3502      	adds	r5, #2
     ce6:	0a00      	lsrs	r0, r0, #8
     ce8:	7050      	strb	r0, [r2, #1]
     cea:	3202      	adds	r2, #2
     cec:	e7f3      	b.n	cd6 <AttcReadMultipleReq+0x24>
     cee:	2200      	movs	r2, #0
     cf0:	0038      	movs	r0, r7
     cf2:	9200      	str	r2, [sp, #0]
     cf4:	3207      	adds	r2, #7
     cf6:	f7ff fe5d 	bl	9b4 <attcSendMsg>
     cfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000cfc <AttcReadByGroupTypeReq>:
     cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfe:	001f      	movs	r7, r3
     d00:	b087      	sub	sp, #28
     d02:	b2bd      	uxth	r5, r7
     d04:	9002      	str	r0, [sp, #8]
     d06:	0028      	movs	r0, r5
     d08:	ab0c      	add	r3, sp, #48	; 0x30
     d0a:	9203      	str	r2, [sp, #12]
     d0c:	cb04      	ldmia	r3!, {r2}
     d0e:	300d      	adds	r0, #13
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	000e      	movs	r6, r1
     d14:	9204      	str	r2, [sp, #16]
     d16:	9305      	str	r3, [sp, #20]
     d18:	f7ff fa88 	bl	22c <attMsgAlloc>
     d1c:	1e04      	subs	r4, r0, #0
     d1e:	d014      	beq.n	d4a <AttcReadByGroupTypeReq+0x4e>
     d20:	466b      	mov	r3, sp
     d22:	899b      	ldrh	r3, [r3, #12]
     d24:	3505      	adds	r5, #5
     d26:	8083      	strh	r3, [r0, #4]
     d28:	2310      	movs	r3, #16
     d2a:	8005      	strh	r5, [r0, #0]
     d2c:	7203      	strb	r3, [r0, #8]
     d2e:	8046      	strh	r6, [r0, #2]
     d30:	003a      	movs	r2, r7
     d32:	9904      	ldr	r1, [sp, #16]
     d34:	300d      	adds	r0, #13
     d36:	f010 fba0 	bl	1147a <memcpy>
     d3a:	9b05      	ldr	r3, [sp, #20]
     d3c:	2208      	movs	r2, #8
     d3e:	9300      	str	r3, [sp, #0]
     d40:	0031      	movs	r1, r6
     d42:	0023      	movs	r3, r4
     d44:	9802      	ldr	r0, [sp, #8]
     d46:	f7ff fe35 	bl	9b4 <attcSendMsg>
     d4a:	b007      	add	sp, #28
     d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4e:	46c0      	nop			; (mov r8, r8)

00000d50 <attcProcPrepWriteRsp>:
     d50:	7cc2      	ldrb	r2, [r0, #19]
     d52:	2a01      	cmp	r2, #1
     d54:	d103      	bne.n	d5e <attcProcPrepWriteRsp+0xe>
     d56:	8b82      	ldrh	r2, [r0, #28]
     d58:	2a00      	cmp	r2, #0
     d5a:	d100      	bne.n	d5e <attcProcPrepWriteRsp+0xe>
     d5c:	74c2      	strb	r2, [r0, #19]
     d5e:	2200      	movs	r2, #0
     d60:	811a      	strh	r2, [r3, #8]
     d62:	4770      	bx	lr

00000d64 <AttcWriteCmd>:
     d64:	b5f0      	push	{r4, r5, r6, r7, lr}
     d66:	0007      	movs	r7, r0
     d68:	0010      	movs	r0, r2
     d6a:	300b      	adds	r0, #11
     d6c:	b085      	sub	sp, #20
     d6e:	b280      	uxth	r0, r0
     d70:	000d      	movs	r5, r1
     d72:	0016      	movs	r6, r2
     d74:	9303      	str	r3, [sp, #12]
     d76:	f7ff fa59 	bl	22c <attMsgAlloc>
     d7a:	1e04      	subs	r4, r0, #0
     d7c:	d013      	beq.n	da6 <AttcWriteCmd+0x42>
     d7e:	1cf3      	adds	r3, r6, #3
     d80:	8003      	strh	r3, [r0, #0]
     d82:	2352      	movs	r3, #82	; 0x52
     d84:	7203      	strb	r3, [r0, #8]
     d86:	0a2b      	lsrs	r3, r5, #8
     d88:	7283      	strb	r3, [r0, #10]
     d8a:	7245      	strb	r5, [r0, #9]
     d8c:	0032      	movs	r2, r6
     d8e:	9903      	ldr	r1, [sp, #12]
     d90:	300b      	adds	r0, #11
     d92:	f010 fb72 	bl	1147a <memcpy>
     d96:	2300      	movs	r3, #0
     d98:	220a      	movs	r2, #10
     d9a:	9300      	str	r3, [sp, #0]
     d9c:	0029      	movs	r1, r5
     d9e:	0023      	movs	r3, r4
     da0:	0038      	movs	r0, r7
     da2:	f7ff fe07 	bl	9b4 <attcSendMsg>
     da6:	b005      	add	sp, #20
     da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000daa <AttcPrepareWriteReq>:
     daa:	b5f0      	push	{r4, r5, r6, r7, lr}
     dac:	b087      	sub	sp, #28
     dae:	001f      	movs	r7, r3
     db0:	ab0c      	add	r3, sp, #48	; 0x30
     db2:	9205      	str	r2, [sp, #20]
     db4:	cb04      	ldmia	r3!, {r2}
     db6:	9004      	str	r0, [sp, #16]
     db8:	781b      	ldrb	r3, [r3, #0]
     dba:	000d      	movs	r5, r1
     dbc:	9303      	str	r3, [sp, #12]
     dbe:	ab0e      	add	r3, sp, #56	; 0x38
     dc0:	781e      	ldrb	r6, [r3, #0]
     dc2:	9202      	str	r2, [sp, #8]
     dc4:	2e00      	cmp	r6, #0
     dc6:	d003      	beq.n	dd0 <AttcPrepareWriteReq+0x26>
     dc8:	9b03      	ldr	r3, [sp, #12]
     dca:	200d      	movs	r0, #13
     dcc:	2b00      	cmp	r3, #0
     dce:	d102      	bne.n	dd6 <AttcPrepareWriteReq+0x2c>
     dd0:	0038      	movs	r0, r7
     dd2:	300d      	adds	r0, #13
     dd4:	b280      	uxth	r0, r0
     dd6:	f7ff fa29 	bl	22c <attMsgAlloc>
     dda:	1e04      	subs	r4, r0, #0
     ddc:	d01f      	beq.n	e1e <AttcPrepareWriteReq+0x74>
     dde:	466b      	mov	r3, sp
     de0:	8a9b      	ldrh	r3, [r3, #20]
     de2:	8007      	strh	r7, [r0, #0]
     de4:	8043      	strh	r3, [r0, #2]
     de6:	2316      	movs	r3, #22
     de8:	7203      	strb	r3, [r0, #8]
     dea:	0a2b      	lsrs	r3, r5, #8
     dec:	7245      	strb	r5, [r0, #9]
     dee:	7283      	strb	r3, [r0, #10]
     df0:	2e00      	cmp	r6, #0
     df2:	d005      	beq.n	e00 <AttcPrepareWriteReq+0x56>
     df4:	9b03      	ldr	r3, [sp, #12]
     df6:	2b00      	cmp	r3, #0
     df8:	d002      	beq.n	e00 <AttcPrepareWriteReq+0x56>
     dfa:	9b02      	ldr	r3, [sp, #8]
     dfc:	6043      	str	r3, [r0, #4]
     dfe:	e007      	b.n	e10 <AttcPrepareWriteReq+0x66>
     e00:	003a      	movs	r2, r7
     e02:	0027      	movs	r7, r4
     e04:	370d      	adds	r7, #13
     e06:	9902      	ldr	r1, [sp, #8]
     e08:	0038      	movs	r0, r7
     e0a:	f010 fb36 	bl	1147a <memcpy>
     e0e:	6067      	str	r7, [r4, #4]
     e10:	9600      	str	r6, [sp, #0]
     e12:	0023      	movs	r3, r4
     e14:	220b      	movs	r2, #11
     e16:	0029      	movs	r1, r5
     e18:	9804      	ldr	r0, [sp, #16]
     e1a:	f7ff fdcb 	bl	9b4 <attcSendMsg>
     e1e:	b007      	add	sp, #28
     e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e22 <AttcExecuteWriteReq>:
     e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
     e24:	0004      	movs	r4, r0
     e26:	200a      	movs	r0, #10
     e28:	000d      	movs	r5, r1
     e2a:	f7ff f9ff 	bl	22c <attMsgAlloc>
     e2e:	1e03      	subs	r3, r0, #0
     e30:	d00a      	beq.n	e48 <AttcExecuteWriteReq+0x26>
     e32:	2202      	movs	r2, #2
     e34:	2100      	movs	r1, #0
     e36:	8002      	strh	r2, [r0, #0]
     e38:	3216      	adds	r2, #22
     e3a:	7202      	strb	r2, [r0, #8]
     e3c:	7245      	strb	r5, [r0, #9]
     e3e:	3a0c      	subs	r2, #12
     e40:	9100      	str	r1, [sp, #0]
     e42:	0020      	movs	r0, r4
     e44:	f7ff fdb6 	bl	9b4 <attcSendMsg>
     e48:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00000e4c <attsIndCcbByConnId>:
     e4c:	b510      	push	{r4, lr}
     e4e:	0004      	movs	r4, r0
     e50:	f002 f826 	bl	2ea0 <DmConnInUse>
     e54:	2800      	cmp	r0, #0
     e56:	d004      	beq.n	e62 <attsIndCcbByConnId+0x16>
     e58:	232c      	movs	r3, #44	; 0x2c
     e5a:	1e60      	subs	r0, r4, #1
     e5c:	4358      	muls	r0, r3
     e5e:	4b01      	ldr	r3, [pc, #4]	; (e64 <attsIndCcbByConnId+0x18>)
     e60:	1818      	adds	r0, r3, r0
     e62:	bd10      	pop	{r4, pc}
     e64:	10001418 	.word	0x10001418

00000e68 <attsExecCallback>:
     e68:	b507      	push	{r0, r1, r2, lr}
     e6a:	0013      	movs	r3, r2
     e6c:	2200      	movs	r2, #0
     e6e:	9200      	str	r2, [sp, #0]
     e70:	000a      	movs	r2, r1
     e72:	210f      	movs	r1, #15
     e74:	f7ff f9b2 	bl	1dc <attExecCallback>
     e78:	bd07      	pop	{r0, r1, r2, pc}

00000e7a <attsIndNtfCallback>:
     e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e7c:	000c      	movs	r4, r1
     e7e:	8ac9      	ldrh	r1, [r1, #22]
     e80:	0006      	movs	r6, r0
     e82:	0017      	movs	r7, r2
     e84:	2900      	cmp	r1, #0
     e86:	d003      	beq.n	e90 <attsIndNtfCallback+0x16>
     e88:	f7ff ffee 	bl	e68 <attsExecCallback>
     e8c:	2300      	movs	r3, #0
     e8e:	82e3      	strh	r3, [r4, #22]
     e90:	0025      	movs	r5, r4
     e92:	342c      	adds	r4, #44	; 0x2c
     e94:	3518      	adds	r5, #24
     e96:	8829      	ldrh	r1, [r5, #0]
     e98:	2900      	cmp	r1, #0
     e9a:	d005      	beq.n	ea8 <attsIndNtfCallback+0x2e>
     e9c:	003a      	movs	r2, r7
     e9e:	0030      	movs	r0, r6
     ea0:	f7ff ffe2 	bl	e68 <attsExecCallback>
     ea4:	2300      	movs	r3, #0
     ea6:	802b      	strh	r3, [r5, #0]
     ea8:	3502      	adds	r5, #2
     eaa:	42a5      	cmp	r5, r4
     eac:	d1f3      	bne.n	e96 <attsIndNtfCallback+0x1c>
     eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000eb0 <attsIndCtrlCback>:
     eb0:	b510      	push	{r4, lr}
     eb2:	0004      	movs	r4, r0
     eb4:	7800      	ldrb	r0, [r0, #0]
     eb6:	f7ff ffc9 	bl	e4c <attsIndCcbByConnId>
     eba:	1e01      	subs	r1, r0, #0
     ebc:	d003      	beq.n	ec6 <attsIndCtrlCback+0x16>
     ebe:	7820      	ldrb	r0, [r4, #0]
     ec0:	2200      	movs	r2, #0
     ec2:	f7ff ffda 	bl	e7a <attsIndNtfCallback>
     ec6:	bd10      	pop	{r4, pc}

00000ec8 <attsIndMsgCback>:
     ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eca:	0005      	movs	r5, r0
     ecc:	7800      	ldrb	r0, [r0, #0]
     ece:	f7ff ffbd 	bl	e4c <attsIndCcbByConnId>
     ed2:	78ab      	ldrb	r3, [r5, #2]
     ed4:	1e04      	subs	r4, r0, #0
     ed6:	d102      	bne.n	ede <attsIndMsgCback+0x16>
     ed8:	2b21      	cmp	r3, #33	; 0x21
     eda:	d165      	bne.n	fa8 <attsIndMsgCback+0xe0>
     edc:	e020      	b.n	f20 <attsIndMsgCback+0x58>
     ede:	2b21      	cmp	r3, #33	; 0x21
     ee0:	d122      	bne.n	f28 <attsIndMsgCback+0x60>
     ee2:	686b      	ldr	r3, [r5, #4]
     ee4:	7a1a      	ldrb	r2, [r3, #8]
     ee6:	2a1d      	cmp	r2, #29
     ee8:	d103      	bne.n	ef2 <attsIndMsgCback+0x2a>
     eea:	8ac2      	ldrh	r2, [r0, #22]
     eec:	2a00      	cmp	r2, #0
     eee:	d112      	bne.n	f16 <attsIndMsgCback+0x4e>
     ef0:	e02b      	b.n	f4a <attsIndMsgCback+0x82>
     ef2:	0001      	movs	r1, r0
     ef4:	0006      	movs	r6, r0
     ef6:	2200      	movs	r2, #0
     ef8:	3118      	adds	r1, #24
     efa:	362c      	adds	r6, #44	; 0x2c
     efc:	8808      	ldrh	r0, [r1, #0]
     efe:	2800      	cmp	r0, #0
     f00:	d004      	beq.n	f0c <attsIndMsgCback+0x44>
     f02:	885f      	ldrh	r7, [r3, #2]
     f04:	4287      	cmp	r7, r0
     f06:	d006      	beq.n	f16 <attsIndMsgCback+0x4e>
     f08:	3201      	adds	r2, #1
     f0a:	b2d2      	uxtb	r2, r2
     f0c:	3102      	adds	r1, #2
     f0e:	42b1      	cmp	r1, r6
     f10:	d1f4      	bne.n	efc <attsIndMsgCback+0x34>
     f12:	2a09      	cmp	r2, #9
     f14:	d92b      	bls.n	f6e <attsIndMsgCback+0xa6>
     f16:	8859      	ldrh	r1, [r3, #2]
     f18:	7828      	ldrb	r0, [r5, #0]
     f1a:	2272      	movs	r2, #114	; 0x72
     f1c:	f7ff ffa4 	bl	e68 <attsExecCallback>
     f20:	6868      	ldr	r0, [r5, #4]
     f22:	f009 ffa5 	bl	ae70 <WsfMsgFree>
     f26:	e03f      	b.n	fa8 <attsIndMsgCback+0xe0>
     f28:	2b22      	cmp	r3, #34	; 0x22
     f2a:	d13d      	bne.n	fa8 <attsIndMsgCback+0xe0>
     f2c:	8a83      	ldrh	r3, [r0, #20]
     f2e:	2b00      	cmp	r3, #0
     f30:	d03a      	beq.n	fa8 <attsIndMsgCback+0xe0>
     f32:	2600      	movs	r6, #0
     f34:	8286      	strh	r6, [r0, #20]
     f36:	8ac1      	ldrh	r1, [r0, #22]
     f38:	2271      	movs	r2, #113	; 0x71
     f3a:	7828      	ldrb	r0, [r5, #0]
     f3c:	f7ff ff94 	bl	e68 <attsExecCallback>
     f40:	2201      	movs	r2, #1
     f42:	6923      	ldr	r3, [r4, #16]
     f44:	82e6      	strh	r6, [r4, #22]
     f46:	77da      	strb	r2, [r3, #31]
     f48:	e02e      	b.n	fa8 <attsIndMsgCback+0xe0>
     f4a:	6901      	ldr	r1, [r0, #16]
     f4c:	881a      	ldrh	r2, [r3, #0]
     f4e:	8b09      	ldrh	r1, [r1, #24]
     f50:	2004      	movs	r0, #4
     f52:	885d      	ldrh	r5, [r3, #2]
     f54:	f002 fe72 	bl	3c3c <L2cDataReq>
     f58:	2322      	movs	r3, #34	; 0x22
     f5a:	7323      	strb	r3, [r4, #12]
     f5c:	4b13      	ldr	r3, [pc, #76]	; (fac <attsIndMsgCback+0xe4>)
     f5e:	82e5      	strh	r5, [r4, #22]
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	82a5      	strh	r5, [r4, #20]
     f64:	7999      	ldrb	r1, [r3, #6]
     f66:	0020      	movs	r0, r4
     f68:	f00a f924 	bl	b1b4 <WsfTimerStartSec>
     f6c:	e01c      	b.n	fa8 <attsIndMsgCback+0xe0>
     f6e:	6921      	ldr	r1, [r4, #16]
     f70:	881a      	ldrh	r2, [r3, #0]
     f72:	8b09      	ldrh	r1, [r1, #24]
     f74:	2004      	movs	r0, #4
     f76:	882e      	ldrh	r6, [r5, #0]
     f78:	885d      	ldrh	r5, [r3, #2]
     f7a:	f002 fe5f 	bl	3c3c <L2cDataReq>
     f7e:	6923      	ldr	r3, [r4, #16]
     f80:	7f9a      	ldrb	r2, [r3, #30]
     f82:	2300      	movs	r3, #0
     f84:	2a00      	cmp	r2, #0
     f86:	d107      	bne.n	f98 <attsIndMsgCback+0xd0>
     f88:	b2f0      	uxtb	r0, r6
     f8a:	0029      	movs	r1, r5
     f8c:	f7ff ff6c 	bl	e68 <attsExecCallback>
     f90:	e00a      	b.n	fa8 <attsIndMsgCback+0xe0>
     f92:	3301      	adds	r3, #1
     f94:	2b0a      	cmp	r3, #10
     f96:	d007      	beq.n	fa8 <attsIndMsgCback+0xe0>
     f98:	005a      	lsls	r2, r3, #1
     f9a:	18a2      	adds	r2, r4, r2
     f9c:	8b12      	ldrh	r2, [r2, #24]
     f9e:	2a00      	cmp	r2, #0
     fa0:	d1f7      	bne.n	f92 <attsIndMsgCback+0xca>
     fa2:	330c      	adds	r3, #12
     fa4:	005b      	lsls	r3, r3, #1
     fa6:	531d      	strh	r5, [r3, r4]
     fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	10001088 	.word	0x10001088

00000fb0 <attsHandleValueIndNtf>:
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	0006      	movs	r6, r0
     fb4:	b085      	sub	sp, #20
     fb6:	9301      	str	r3, [sp, #4]
     fb8:	ab0a      	add	r3, sp, #40	; 0x28
     fba:	781b      	ldrb	r3, [r3, #0]
     fbc:	000d      	movs	r5, r1
     fbe:	9303      	str	r3, [sp, #12]
     fc0:	ab0b      	add	r3, sp, #44	; 0x2c
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	0017      	movs	r7, r2
     fc6:	9302      	str	r3, [sp, #8]
     fc8:	f009 f86c 	bl	a0a4 <WsfTaskLock>
     fcc:	0030      	movs	r0, r6
     fce:	f7ff ff3d 	bl	e4c <attsIndCcbByConnId>
     fd2:	2800      	cmp	r0, #0
     fd4:	d004      	beq.n	fe0 <attsHandleValueIndNtf+0x30>
     fd6:	6903      	ldr	r3, [r0, #16]
     fd8:	8b5a      	ldrh	r2, [r3, #26]
     fda:	9200      	str	r2, [sp, #0]
     fdc:	7fdc      	ldrb	r4, [r3, #31]
     fde:	e001      	b.n	fe4 <attsHandleValueIndNtf+0x34>
     fe0:	0004      	movs	r4, r0
     fe2:	9000      	str	r0, [sp, #0]
     fe4:	f009 f864 	bl	a0b0 <WsfTaskUnlock>
     fe8:	9b00      	ldr	r3, [sp, #0]
     fea:	2b00      	cmp	r3, #0
     fec:	d040      	beq.n	1070 <attsHandleValueIndNtf+0xc0>
     fee:	2c00      	cmp	r4, #0
     ff0:	d139      	bne.n	1066 <attsHandleValueIndNtf+0xb6>
     ff2:	9a00      	ldr	r2, [sp, #0]
     ff4:	1cbb      	adds	r3, r7, #2
     ff6:	4293      	cmp	r3, r2
     ff8:	da33      	bge.n	1062 <attsHandleValueIndNtf+0xb2>
     ffa:	2008      	movs	r0, #8
     ffc:	f009 ff21 	bl	ae42 <WsfMsgAlloc>
    1000:	1e04      	subs	r4, r0, #0
    1002:	d035      	beq.n	1070 <attsHandleValueIndNtf+0xc0>
    1004:	2321      	movs	r3, #33	; 0x21
    1006:	7083      	strb	r3, [r0, #2]
    1008:	9b02      	ldr	r3, [sp, #8]
    100a:	8006      	strh	r6, [r0, #0]
    100c:	2b00      	cmp	r3, #0
    100e:	d003      	beq.n	1018 <attsHandleValueIndNtf+0x68>
    1010:	9b01      	ldr	r3, [sp, #4]
    1012:	3b0b      	subs	r3, #11
    1014:	6043      	str	r3, [r0, #4]
    1016:	e005      	b.n	1024 <attsHandleValueIndNtf+0x74>
    1018:	0038      	movs	r0, r7
    101a:	300b      	adds	r0, #11
    101c:	b280      	uxth	r0, r0
    101e:	f7ff f905 	bl	22c <attMsgAlloc>
    1022:	6060      	str	r0, [r4, #4]
    1024:	6860      	ldr	r0, [r4, #4]
    1026:	2800      	cmp	r0, #0
    1028:	d017      	beq.n	105a <attsHandleValueIndNtf+0xaa>
    102a:	1cfb      	adds	r3, r7, #3
    102c:	8003      	strh	r3, [r0, #0]
    102e:	466b      	mov	r3, sp
    1030:	7b1b      	ldrb	r3, [r3, #12]
    1032:	8045      	strh	r5, [r0, #2]
    1034:	7203      	strb	r3, [r0, #8]
    1036:	9b02      	ldr	r3, [sp, #8]
    1038:	7245      	strb	r5, [r0, #9]
    103a:	0a2d      	lsrs	r5, r5, #8
    103c:	7285      	strb	r5, [r0, #10]
    103e:	2b00      	cmp	r3, #0
    1040:	d104      	bne.n	104c <attsHandleValueIndNtf+0x9c>
    1042:	300b      	adds	r0, #11
    1044:	003a      	movs	r2, r7
    1046:	9901      	ldr	r1, [sp, #4]
    1048:	f010 fa17 	bl	1147a <memcpy>
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <attsHandleValueIndNtf+0xd4>)
    104e:	0021      	movs	r1, r4
    1050:	33ff      	adds	r3, #255	; 0xff
    1052:	7c58      	ldrb	r0, [r3, #17]
    1054:	f009 ff19 	bl	ae8a <WsfMsgSend>
    1058:	e011      	b.n	107e <attsHandleValueIndNtf+0xce>
    105a:	0020      	movs	r0, r4
    105c:	f009 ff08 	bl	ae70 <WsfMsgFree>
    1060:	e006      	b.n	1070 <attsHandleValueIndNtf+0xc0>
    1062:	2277      	movs	r2, #119	; 0x77
    1064:	e000      	b.n	1068 <attsHandleValueIndNtf+0xb8>
    1066:	2271      	movs	r2, #113	; 0x71
    1068:	0029      	movs	r1, r5
    106a:	0030      	movs	r0, r6
    106c:	f7ff fefc 	bl	e68 <attsExecCallback>
    1070:	9b02      	ldr	r3, [sp, #8]
    1072:	2b00      	cmp	r3, #0
    1074:	d003      	beq.n	107e <attsHandleValueIndNtf+0xce>
    1076:	9903      	ldr	r1, [sp, #12]
    1078:	9801      	ldr	r0, [sp, #4]
    107a:	f7ff f942 	bl	302 <AttMsgFree>
    107e:	b005      	add	sp, #20
    1080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	10001140 	.word	0x10001140

00001088 <attsIndConnCback>:
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	788b      	ldrb	r3, [r1, #2]
    108c:	0006      	movs	r6, r0
    108e:	2b28      	cmp	r3, #40	; 0x28
    1090:	d11b      	bne.n	10ca <attsIndConnCback+0x42>
    1092:	78cb      	ldrb	r3, [r1, #3]
    1094:	001d      	movs	r5, r3
    1096:	3520      	adds	r5, #32
    1098:	b2ed      	uxtb	r5, r5
    109a:	2b00      	cmp	r3, #0
    109c:	d102      	bne.n	10a4 <attsIndConnCback+0x1c>
    109e:	7a0d      	ldrb	r5, [r1, #8]
    10a0:	3520      	adds	r5, #32
    10a2:	b2ed      	uxtb	r5, r5
    10a4:	232c      	movs	r3, #44	; 0x2c
    10a6:	7f34      	ldrb	r4, [r6, #28]
    10a8:	3c01      	subs	r4, #1
    10aa:	435c      	muls	r4, r3
    10ac:	4b07      	ldr	r3, [pc, #28]	; (10cc <attsIndConnCback+0x44>)
    10ae:	191c      	adds	r4, r3, r4
    10b0:	8aa3      	ldrh	r3, [r4, #20]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d004      	beq.n	10c0 <attsIndConnCback+0x38>
    10b6:	0020      	movs	r0, r4
    10b8:	f00a f8a2 	bl	b200 <WsfTimerStop>
    10bc:	2300      	movs	r3, #0
    10be:	82a3      	strh	r3, [r4, #20]
    10c0:	7f30      	ldrb	r0, [r6, #28]
    10c2:	002a      	movs	r2, r5
    10c4:	0021      	movs	r1, r4
    10c6:	f7ff fed8 	bl	e7a <attsIndNtfCallback>
    10ca:	bd70      	pop	{r4, r5, r6, pc}
    10cc:	10001418 	.word	0x10001418

000010d0 <attsProcValueCnf>:
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	0006      	movs	r6, r0
    10d4:	7f00      	ldrb	r0, [r0, #28]
    10d6:	f7ff feb9 	bl	e4c <attsIndCcbByConnId>
    10da:	1e04      	subs	r4, r0, #0
    10dc:	d00f      	beq.n	10fe <attsProcValueCnf+0x2e>
    10de:	8a83      	ldrh	r3, [r0, #20]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d00c      	beq.n	10fe <attsProcValueCnf+0x2e>
    10e4:	2300      	movs	r3, #0
    10e6:	8283      	strh	r3, [r0, #20]
    10e8:	f00a f88a 	bl	b200 <WsfTimerStop>
    10ec:	7fb5      	ldrb	r5, [r6, #30]
    10ee:	2d00      	cmp	r5, #0
    10f0:	d105      	bne.n	10fe <attsProcValueCnf+0x2e>
    10f2:	8ae1      	ldrh	r1, [r4, #22]
    10f4:	7f30      	ldrb	r0, [r6, #28]
    10f6:	002a      	movs	r2, r5
    10f8:	f7ff feb6 	bl	e68 <attsExecCallback>
    10fc:	82e5      	strh	r5, [r4, #22]
    10fe:	bd70      	pop	{r4, r5, r6, pc}

00001100 <AttsIndInit>:
    1100:	490a      	ldr	r1, [pc, #40]	; (112c <AttsIndInit+0x2c>)
    1102:	b510      	push	{r4, lr}
    1104:	000b      	movs	r3, r1
    1106:	33ff      	adds	r3, #255	; 0xff
    1108:	7c5c      	ldrb	r4, [r3, #17]
    110a:	2300      	movs	r3, #0
    110c:	4a08      	ldr	r2, [pc, #32]	; (1130 <AttsIndInit+0x30>)
    110e:	3208      	adds	r2, #8
    1110:	0158      	lsls	r0, r3, #5
    1112:	1808      	adds	r0, r1, r0
    1114:	3301      	adds	r3, #1
    1116:	6090      	str	r0, [r2, #8]
    1118:	7014      	strb	r4, [r2, #0]
    111a:	8053      	strh	r3, [r2, #2]
    111c:	322c      	adds	r2, #44	; 0x2c
    111e:	2b08      	cmp	r3, #8
    1120:	d1f6      	bne.n	1110 <AttsIndInit+0x10>
    1122:	4a04      	ldr	r2, [pc, #16]	; (1134 <AttsIndInit+0x34>)
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <AttsIndInit+0x38>)
    1126:	609a      	str	r2, [r3, #8]
    1128:	bd10      	pop	{r4, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	10001140 	.word	0x10001140
    1130:	10001418 	.word	0x10001418
    1134:	000121f4 	.word	0x000121f4
    1138:	10001578 	.word	0x10001578

0000113c <AttsHandleValueInd>:
    113c:	b513      	push	{r0, r1, r4, lr}
    113e:	2400      	movs	r4, #0
    1140:	9401      	str	r4, [sp, #4]
    1142:	341d      	adds	r4, #29
    1144:	9400      	str	r4, [sp, #0]
    1146:	f7ff ff33 	bl	fb0 <attsHandleValueIndNtf>
    114a:	bd13      	pop	{r0, r1, r4, pc}

0000114c <AttsHandleValueNtf>:
    114c:	b513      	push	{r0, r1, r4, lr}
    114e:	2400      	movs	r4, #0
    1150:	9401      	str	r4, [sp, #4]
    1152:	341b      	adds	r4, #27
    1154:	9400      	str	r4, [sp, #0]
    1156:	f7ff ff2b 	bl	fb0 <attsHandleValueIndNtf>
    115a:	bd13      	pop	{r0, r1, r4, pc}

0000115c <AttsHandleValueIndZeroCpy>:
    115c:	b513      	push	{r0, r1, r4, lr}
    115e:	2401      	movs	r4, #1
    1160:	9401      	str	r4, [sp, #4]
    1162:	341c      	adds	r4, #28
    1164:	9400      	str	r4, [sp, #0]
    1166:	f7ff ff23 	bl	fb0 <attsHandleValueIndNtf>
    116a:	bd13      	pop	{r0, r1, r4, pc}

0000116c <AttsHandleValueNtfZeroCpy>:
    116c:	b513      	push	{r0, r1, r4, lr}
    116e:	2401      	movs	r4, #1
    1170:	9401      	str	r4, [sp, #4]
    1172:	341a      	adds	r4, #26
    1174:	9400      	str	r4, [sp, #0]
    1176:	f7ff ff1b 	bl	fb0 <attsHandleValueIndNtf>
    117a:	bd13      	pop	{r0, r1, r4, pc}

0000117c <attsL2cCtrlCback>:
    117c:	b510      	push	{r4, lr}
    117e:	4b02      	ldr	r3, [pc, #8]	; (1188 <attsL2cCtrlCback+0xc>)
    1180:	689b      	ldr	r3, [r3, #8]
    1182:	685b      	ldr	r3, [r3, #4]
    1184:	4798      	blx	r3
    1186:	bd10      	pop	{r4, pc}
    1188:	10001578 	.word	0x10001578

0000118c <attsMsgCback>:
    118c:	b510      	push	{r4, lr}
    118e:	7882      	ldrb	r2, [r0, #2]
    1190:	2a20      	cmp	r2, #32
    1192:	d105      	bne.n	11a0 <attsMsgCback+0x14>
    1194:	7800      	ldrb	r0, [r0, #0]
    1196:	2200      	movs	r2, #0
    1198:	2104      	movs	r1, #4
    119a:	f001 fecf 	bl	2f3c <DmConnSetIdle>
    119e:	e007      	b.n	11b0 <attsMsgCback+0x24>
    11a0:	4b04      	ldr	r3, [pc, #16]	; (11b4 <attsMsgCback+0x28>)
    11a2:	2a22      	cmp	r2, #34	; 0x22
    11a4:	d802      	bhi.n	11ac <attsMsgCback+0x20>
    11a6:	689b      	ldr	r3, [r3, #8]
    11a8:	689b      	ldr	r3, [r3, #8]
    11aa:	e000      	b.n	11ae <attsMsgCback+0x22>
    11ac:	68db      	ldr	r3, [r3, #12]
    11ae:	4798      	blx	r3
    11b0:	bd10      	pop	{r4, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	10001578 	.word	0x10001578

000011b8 <attsErrRsp>:
    11b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ba:	0005      	movs	r5, r0
    11bc:	200d      	movs	r0, #13
    11be:	001e      	movs	r6, r3
    11c0:	000f      	movs	r7, r1
    11c2:	0014      	movs	r4, r2
    11c4:	f7ff f832 	bl	22c <attMsgAlloc>
    11c8:	1e03      	subs	r3, r0, #0
    11ca:	d00b      	beq.n	11e4 <attsErrRsp+0x2c>
    11cc:	2201      	movs	r2, #1
    11ce:	7284      	strb	r4, [r0, #10]
    11d0:	0a24      	lsrs	r4, r4, #8
    11d2:	7202      	strb	r2, [r0, #8]
    11d4:	7247      	strb	r7, [r0, #9]
    11d6:	72c4      	strb	r4, [r0, #11]
    11d8:	7306      	strb	r6, [r0, #12]
    11da:	3204      	adds	r2, #4
    11dc:	0029      	movs	r1, r5
    11de:	2004      	movs	r0, #4
    11e0:	f002 fd2c 	bl	3c3c <L2cDataReq>
    11e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000011e6 <attsDataCback>:
    11e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11e8:	0004      	movs	r4, r0
    11ea:	000d      	movs	r5, r1
    11ec:	0016      	movs	r6, r2
    11ee:	f7fe ffd1 	bl	194 <attCcbByHandle>
    11f2:	2800      	cmp	r0, #0
    11f4:	d029      	beq.n	124a <attsDataCback+0x64>
    11f6:	7a31      	ldrb	r1, [r6, #8]
    11f8:	2912      	cmp	r1, #18
    11fa:	d903      	bls.n	1204 <attsDataCback+0x1e>
    11fc:	000b      	movs	r3, r1
    11fe:	3b16      	subs	r3, #22
    1200:	2b08      	cmp	r3, #8
    1202:	d801      	bhi.n	1208 <attsDataCback+0x22>
    1204:	084b      	lsrs	r3, r1, #1
    1206:	e007      	b.n	1218 <attsDataCback+0x32>
    1208:	230a      	movs	r3, #10
    120a:	2952      	cmp	r1, #82	; 0x52
    120c:	d004      	beq.n	1218 <attsDataCback+0x32>
    120e:	000b      	movs	r3, r1
    1210:	3bd2      	subs	r3, #210	; 0xd2
    1212:	425a      	negs	r2, r3
    1214:	4153      	adcs	r3, r2
    1216:	011b      	lsls	r3, r3, #4
    1218:	4a0c      	ldr	r2, [pc, #48]	; (124c <attsDataCback+0x66>)
    121a:	009f      	lsls	r7, r3, #2
    121c:	58bf      	ldr	r7, [r7, r2]
    121e:	2f00      	cmp	r7, #0
    1220:	d008      	beq.n	1234 <attsDataCback+0x4e>
    1222:	4a0b      	ldr	r2, [pc, #44]	; (1250 <attsDataCback+0x6a>)
    1224:	5cd2      	ldrb	r2, [r2, r3]
    1226:	2304      	movs	r3, #4
    1228:	42aa      	cmp	r2, r5
    122a:	d804      	bhi.n	1236 <attsDataCback+0x50>
    122c:	0032      	movs	r2, r6
    122e:	0029      	movs	r1, r5
    1230:	47b8      	blx	r7
    1232:	e00a      	b.n	124a <attsDataCback+0x64>
    1234:	2306      	movs	r3, #6
    1236:	2902      	cmp	r1, #2
    1238:	d007      	beq.n	124a <attsDataCback+0x64>
    123a:	291e      	cmp	r1, #30
    123c:	d005      	beq.n	124a <attsDataCback+0x64>
    123e:	2240      	movs	r2, #64	; 0x40
    1240:	400a      	ands	r2, r1
    1242:	d102      	bne.n	124a <attsDataCback+0x64>
    1244:	0020      	movs	r0, r4
    1246:	f7ff ffb7 	bl	11b8 <attsErrRsp>
    124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    124c:	10001010 	.word	0x10001010
    1250:	00012204 	.word	0x00012204

00001254 <attsClearPrepWrites>:
    1254:	b510      	push	{r4, lr}
    1256:	0004      	movs	r4, r0
    1258:	0020      	movs	r0, r4
    125a:	f009 fe7d 	bl	af58 <WsfQueueDeq>
    125e:	2800      	cmp	r0, #0
    1260:	d002      	beq.n	1268 <attsClearPrepWrites+0x14>
    1262:	f009 fd9f 	bl	ada4 <WsfBufFree>
    1266:	e7f7      	b.n	1258 <attsClearPrepWrites+0x4>
    1268:	bd10      	pop	{r4, pc}

0000126a <attsConnCback>:
    126a:	b570      	push	{r4, r5, r6, lr}
    126c:	788b      	ldrb	r3, [r1, #2]
    126e:	0004      	movs	r4, r0
    1270:	000d      	movs	r5, r1
    1272:	2b28      	cmp	r3, #40	; 0x28
    1274:	d10a      	bne.n	128c <attsConnCback+0x22>
    1276:	f7ff ffed 	bl	1254 <attsClearPrepWrites>
    127a:	7f20      	ldrb	r0, [r4, #28]
    127c:	f001 fe7a 	bl	2f74 <DmConnCheckIdle>
    1280:	0743      	lsls	r3, r0, #29
    1282:	d503      	bpl.n	128c <attsConnCback+0x22>
    1284:	0020      	movs	r0, r4
    1286:	3008      	adds	r0, #8
    1288:	f009 ffba 	bl	b200 <WsfTimerStop>
    128c:	4b03      	ldr	r3, [pc, #12]	; (129c <attsConnCback+0x32>)
    128e:	0029      	movs	r1, r5
    1290:	689b      	ldr	r3, [r3, #8]
    1292:	0020      	movs	r0, r4
    1294:	68db      	ldr	r3, [r3, #12]
    1296:	4798      	blx	r3
    1298:	bd70      	pop	{r4, r5, r6, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	10001578 	.word	0x10001578

000012a0 <attsDiscBusy>:
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	4d0d      	ldr	r5, [pc, #52]	; (12d8 <attsDiscBusy+0x38>)
    12a4:	0004      	movs	r4, r0
    12a6:	682b      	ldr	r3, [r5, #0]
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	2b00      	cmp	r3, #0
    12ac:	d012      	beq.n	12d4 <attsDiscBusy+0x34>
    12ae:	7f00      	ldrb	r0, [r0, #28]
    12b0:	2104      	movs	r1, #4
    12b2:	2201      	movs	r2, #1
    12b4:	f001 fe42 	bl	2f3c <DmConnSetIdle>
    12b8:	4b08      	ldr	r3, [pc, #32]	; (12dc <attsDiscBusy+0x3c>)
    12ba:	0020      	movs	r0, r4
    12bc:	33ff      	adds	r3, #255	; 0xff
    12be:	7c5b      	ldrb	r3, [r3, #17]
    12c0:	3008      	adds	r0, #8
    12c2:	7423      	strb	r3, [r4, #16]
    12c4:	2320      	movs	r3, #32
    12c6:	7523      	strb	r3, [r4, #20]
    12c8:	7f23      	ldrb	r3, [r4, #28]
    12ca:	8263      	strh	r3, [r4, #18]
    12cc:	682b      	ldr	r3, [r5, #0]
    12ce:	6819      	ldr	r1, [r3, #0]
    12d0:	f009 ff70 	bl	b1b4 <WsfTimerStartSec>
    12d4:	bd70      	pop	{r4, r5, r6, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	10001088 	.word	0x10001088
    12dc:	10001140 	.word	0x10001140

000012e0 <AttsInit>:
    12e0:	2200      	movs	r2, #0
    12e2:	4b06      	ldr	r3, [pc, #24]	; (12fc <AttsInit+0x1c>)
    12e4:	601a      	str	r2, [r3, #0]
    12e6:	605a      	str	r2, [r3, #4]
    12e8:	4a05      	ldr	r2, [pc, #20]	; (1300 <AttsInit+0x20>)
    12ea:	609a      	str	r2, [r3, #8]
    12ec:	4a05      	ldr	r2, [pc, #20]	; (1304 <AttsInit+0x24>)
    12ee:	60da      	str	r2, [r3, #12]
    12f0:	4a05      	ldr	r2, [pc, #20]	; (1308 <AttsInit+0x28>)
    12f2:	4b06      	ldr	r3, [pc, #24]	; (130c <AttsInit+0x2c>)
    12f4:	3214      	adds	r2, #20
    12f6:	33fc      	adds	r3, #252	; 0xfc
    12f8:	609a      	str	r2, [r3, #8]
    12fa:	4770      	bx	lr
    12fc:	10001578 	.word	0x10001578
    1300:	0001216c 	.word	0x0001216c
    1304:	00000129 	.word	0x00000129
    1308:	00012204 	.word	0x00012204
    130c:	10001140 	.word	0x10001140

00001310 <AttsAuthorRegister>:
    1310:	4b01      	ldr	r3, [pc, #4]	; (1318 <AttsAuthorRegister+0x8>)
    1312:	6118      	str	r0, [r3, #16]
    1314:	4770      	bx	lr
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	10001578 	.word	0x10001578

0000131c <AttsAddGroup>:
    131c:	b570      	push	{r4, r5, r6, lr}
    131e:	0004      	movs	r4, r0
    1320:	f008 fec0 	bl	a0a4 <WsfTaskLock>
    1324:	2200      	movs	r2, #0
    1326:	4808      	ldr	r0, [pc, #32]	; (1348 <AttsAddGroup+0x2c>)
    1328:	6803      	ldr	r3, [r0, #0]
    132a:	2b00      	cmp	r3, #0
    132c:	d003      	beq.n	1336 <AttsAddGroup+0x1a>
    132e:	8a25      	ldrh	r5, [r4, #16]
    1330:	8a19      	ldrh	r1, [r3, #16]
    1332:	428d      	cmp	r5, r1
    1334:	d205      	bcs.n	1342 <AttsAddGroup+0x26>
    1336:	0021      	movs	r1, r4
    1338:	f009 fe47 	bl	afca <WsfQueueInsert>
    133c:	f008 feb8 	bl	a0b0 <WsfTaskUnlock>
    1340:	bd70      	pop	{r4, r5, r6, pc}
    1342:	001a      	movs	r2, r3
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	e7f0      	b.n	132a <AttsAddGroup+0xe>
    1348:	10001578 	.word	0x10001578

0000134c <AttsRemoveGroup>:
    134c:	b510      	push	{r4, lr}
    134e:	0004      	movs	r4, r0
    1350:	f008 fea8 	bl	a0a4 <WsfTaskLock>
    1354:	2200      	movs	r2, #0
    1356:	4807      	ldr	r0, [pc, #28]	; (1374 <AttsRemoveGroup+0x28>)
    1358:	6801      	ldr	r1, [r0, #0]
    135a:	2900      	cmp	r1, #0
    135c:	d007      	beq.n	136e <AttsRemoveGroup+0x22>
    135e:	8a0b      	ldrh	r3, [r1, #16]
    1360:	42a3      	cmp	r3, r4
    1362:	d002      	beq.n	136a <AttsRemoveGroup+0x1e>
    1364:	000a      	movs	r2, r1
    1366:	6809      	ldr	r1, [r1, #0]
    1368:	e7f7      	b.n	135a <AttsRemoveGroup+0xe>
    136a:	f009 fe59 	bl	b020 <WsfQueueRemove>
    136e:	f008 fe9f 	bl	a0b0 <WsfTaskUnlock>
    1372:	bd10      	pop	{r4, pc}
    1374:	10001578 	.word	0x10001578

00001378 <AttsSetAttr>:
    1378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    137a:	0004      	movs	r4, r0
    137c:	000e      	movs	r6, r1
    137e:	0017      	movs	r7, r2
    1380:	f008 fe90 	bl	a0a4 <WsfTaskLock>
    1384:	0020      	movs	r0, r4
    1386:	a901      	add	r1, sp, #4
    1388:	f000 f85e 	bl	1448 <attsFindByHandle>
    138c:	250a      	movs	r5, #10
    138e:	1e04      	subs	r4, r0, #0
    1390:	d00e      	beq.n	13b0 <AttsSetAttr+0x38>
    1392:	8983      	ldrh	r3, [r0, #12]
    1394:	3503      	adds	r5, #3
    1396:	42b3      	cmp	r3, r6
    1398:	d30a      	bcc.n	13b0 <AttsSetAttr+0x38>
    139a:	0032      	movs	r2, r6
    139c:	0039      	movs	r1, r7
    139e:	6840      	ldr	r0, [r0, #4]
    13a0:	f010 f86b 	bl	1147a <memcpy>
    13a4:	7ba3      	ldrb	r3, [r4, #14]
    13a6:	2500      	movs	r5, #0
    13a8:	071b      	lsls	r3, r3, #28
    13aa:	d501      	bpl.n	13b0 <AttsSetAttr+0x38>
    13ac:	68a3      	ldr	r3, [r4, #8]
    13ae:	801e      	strh	r6, [r3, #0]
    13b0:	f008 fe7e 	bl	a0b0 <WsfTaskUnlock>
    13b4:	0028      	movs	r0, r5
    13b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000013b8 <AttsGetAttr>:
    13b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    13ba:	000d      	movs	r5, r1
    13bc:	a901      	add	r1, sp, #4
    13be:	0014      	movs	r4, r2
    13c0:	f000 f842 	bl	1448 <attsFindByHandle>
    13c4:	0003      	movs	r3, r0
    13c6:	200a      	movs	r0, #10
    13c8:	2b00      	cmp	r3, #0
    13ca:	d005      	beq.n	13d8 <AttsGetAttr+0x20>
    13cc:	2000      	movs	r0, #0
    13ce:	689a      	ldr	r2, [r3, #8]
    13d0:	685b      	ldr	r3, [r3, #4]
    13d2:	8812      	ldrh	r2, [r2, #0]
    13d4:	802a      	strh	r2, [r5, #0]
    13d6:	6023      	str	r3, [r4, #0]
    13d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000013da <AttsErrorTest>:
    13da:	4b02      	ldr	r3, [pc, #8]	; (13e4 <AttsErrorTest+0xa>)
    13dc:	33ff      	adds	r3, #255	; 0xff
    13de:	7498      	strb	r0, [r3, #18]
    13e0:	4770      	bx	lr
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	10001140 	.word	0x10001140

000013e8 <attsUuidCmp>:
    13e8:	0003      	movs	r3, r0
    13ea:	b510      	push	{r4, lr}
    13ec:	0010      	movs	r0, r2
    13ee:	7b9a      	ldrb	r2, [r3, #14]
    13f0:	07d2      	lsls	r2, r2, #31
    13f2:	d402      	bmi.n	13fa <attsUuidCmp+0x12>
    13f4:	2902      	cmp	r1, #2
    13f6:	d10b      	bne.n	1410 <attsUuidCmp+0x28>
    13f8:	e001      	b.n	13fe <attsUuidCmp+0x16>
    13fa:	2910      	cmp	r1, #16
    13fc:	d10d      	bne.n	141a <attsUuidCmp+0x32>
    13fe:	000a      	movs	r2, r1
    1400:	0001      	movs	r1, r0
    1402:	6818      	ldr	r0, [r3, #0]
    1404:	f010 f82a 	bl	1145c <memcmp>
    1408:	4243      	negs	r3, r0
    140a:	4158      	adcs	r0, r3
    140c:	b2c0      	uxtb	r0, r0
    140e:	e007      	b.n	1420 <attsUuidCmp+0x38>
    1410:	2910      	cmp	r1, #16
    1412:	d102      	bne.n	141a <attsUuidCmp+0x32>
    1414:	0001      	movs	r1, r0
    1416:	6818      	ldr	r0, [r3, #0]
    1418:	e000      	b.n	141c <attsUuidCmp+0x34>
    141a:	6819      	ldr	r1, [r3, #0]
    141c:	f7fe fece 	bl	1bc <attUuidCmp16to128>
    1420:	bd10      	pop	{r4, pc}

00001422 <attsUuid16Cmp>:
    1422:	b510      	push	{r4, lr}
    1424:	2902      	cmp	r1, #2
    1426:	d10b      	bne.n	1440 <attsUuid16Cmp+0x1e>
    1428:	7804      	ldrb	r4, [r0, #0]
    142a:	7811      	ldrb	r1, [r2, #0]
    142c:	2300      	movs	r3, #0
    142e:	428c      	cmp	r4, r1
    1430:	d104      	bne.n	143c <attsUuid16Cmp+0x1a>
    1432:	7843      	ldrb	r3, [r0, #1]
    1434:	7850      	ldrb	r0, [r2, #1]
    1436:	1a18      	subs	r0, r3, r0
    1438:	4243      	negs	r3, r0
    143a:	4143      	adcs	r3, r0
    143c:	b2d8      	uxtb	r0, r3
    143e:	e002      	b.n	1446 <attsUuid16Cmp+0x24>
    1440:	0011      	movs	r1, r2
    1442:	f7fe febb 	bl	1bc <attUuidCmp16to128>
    1446:	bd10      	pop	{r4, pc}

00001448 <attsFindByHandle>:
    1448:	b510      	push	{r4, lr}
    144a:	4b09      	ldr	r3, [pc, #36]	; (1470 <attsFindByHandle+0x28>)
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	2b00      	cmp	r3, #0
    1450:	d00b      	beq.n	146a <attsFindByHandle+0x22>
    1452:	8a1a      	ldrh	r2, [r3, #16]
    1454:	4282      	cmp	r2, r0
    1456:	d8f9      	bhi.n	144c <attsFindByHandle+0x4>
    1458:	8a5c      	ldrh	r4, [r3, #18]
    145a:	4284      	cmp	r4, r0
    145c:	d3f6      	bcc.n	144c <attsFindByHandle+0x4>
    145e:	600b      	str	r3, [r1, #0]
    1460:	1a80      	subs	r0, r0, r2
    1462:	685a      	ldr	r2, [r3, #4]
    1464:	0100      	lsls	r0, r0, #4
    1466:	1810      	adds	r0, r2, r0
    1468:	e000      	b.n	146c <attsFindByHandle+0x24>
    146a:	0018      	movs	r0, r3
    146c:	bd10      	pop	{r4, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	10001578 	.word	0x10001578

00001474 <attsFindInRange>:
    1474:	b530      	push	{r4, r5, lr}
    1476:	4b0b      	ldr	r3, [pc, #44]	; (14a4 <attsFindInRange+0x30>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	2b00      	cmp	r3, #0
    147c:	d006      	beq.n	148c <attsFindInRange+0x18>
    147e:	8a1c      	ldrh	r4, [r3, #16]
    1480:	42a0      	cmp	r0, r4
    1482:	d205      	bcs.n	1490 <attsFindInRange+0x1c>
    1484:	428c      	cmp	r4, r1
    1486:	d8f7      	bhi.n	1478 <attsFindInRange+0x4>
    1488:	0020      	movs	r0, r4
    148a:	e001      	b.n	1490 <attsFindInRange+0x1c>
    148c:	0018      	movs	r0, r3
    148e:	e007      	b.n	14a0 <attsFindInRange+0x2c>
    1490:	8a5d      	ldrh	r5, [r3, #18]
    1492:	4285      	cmp	r5, r0
    1494:	d3f0      	bcc.n	1478 <attsFindInRange+0x4>
    1496:	685b      	ldr	r3, [r3, #4]
    1498:	1b04      	subs	r4, r0, r4
    149a:	0124      	lsls	r4, r4, #4
    149c:	191c      	adds	r4, r3, r4
    149e:	6014      	str	r4, [r2, #0]
    14a0:	bd30      	pop	{r4, r5, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	10001578 	.word	0x10001578

000014a8 <attsPermissions>:
    14a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14aa:	0006      	movs	r6, r0
    14ac:	000c      	movs	r4, r1
    14ae:	0017      	movs	r7, r2
    14b0:	001d      	movs	r5, r3
    14b2:	4219      	tst	r1, r3
    14b4:	d105      	bne.n	14c2 <attsPermissions+0x1a>
    14b6:	3c01      	subs	r4, #1
    14b8:	4260      	negs	r0, r4
    14ba:	4160      	adcs	r0, r4
    14bc:	2303      	movs	r3, #3
    14be:	1a18      	subs	r0, r3, r0
    14c0:	e022      	b.n	1508 <attsPermissions+0x60>
    14c2:	2910      	cmp	r1, #16
    14c4:	d100      	bne.n	14c8 <attsPermissions+0x20>
    14c6:	091d      	lsrs	r5, r3, #4
    14c8:	230e      	movs	r3, #14
    14ca:	421d      	tst	r5, r3
    14cc:	d101      	bne.n	14d2 <attsPermissions+0x2a>
    14ce:	2000      	movs	r0, #0
    14d0:	e01a      	b.n	1508 <attsPermissions+0x60>
    14d2:	0030      	movs	r0, r6
    14d4:	f001 fd28 	bl	2f28 <DmConnSecLevel>
    14d8:	0002      	movs	r2, r0
    14da:	072b      	lsls	r3, r5, #28
    14dc:	d502      	bpl.n	14e4 <attsPermissions+0x3c>
    14de:	2005      	movs	r0, #5
    14e0:	2a00      	cmp	r2, #0
    14e2:	d011      	beq.n	1508 <attsPermissions+0x60>
    14e4:	230a      	movs	r3, #10
    14e6:	402b      	ands	r3, r5
    14e8:	2b0a      	cmp	r3, #10
    14ea:	d102      	bne.n	14f2 <attsPermissions+0x4a>
    14ec:	2005      	movs	r0, #5
    14ee:	2a01      	cmp	r2, #1
    14f0:	d90a      	bls.n	1508 <attsPermissions+0x60>
    14f2:	076b      	lsls	r3, r5, #29
    14f4:	d5eb      	bpl.n	14ce <attsPermissions+0x26>
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <attsPermissions+0x64>)
    14f8:	2008      	movs	r0, #8
    14fa:	691b      	ldr	r3, [r3, #16]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d003      	beq.n	1508 <attsPermissions+0x60>
    1500:	003a      	movs	r2, r7
    1502:	0021      	movs	r1, r4
    1504:	0030      	movs	r0, r6
    1506:	4798      	blx	r3
    1508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	10001578 	.word	0x10001578

00001510 <attsProcMtuReq>:
    1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1512:	7a94      	ldrb	r4, [r2, #10]
    1514:	7a53      	ldrb	r3, [r2, #9]
    1516:	0224      	lsls	r4, r4, #8
    1518:	191c      	adds	r4, r3, r4
    151a:	b2a4      	uxth	r4, r4
    151c:	0005      	movs	r5, r0
    151e:	2c16      	cmp	r4, #22
    1520:	d800      	bhi.n	1524 <attsProcMtuReq+0x14>
    1522:	2417      	movs	r4, #23
    1524:	4e13      	ldr	r6, [pc, #76]	; (1574 <attsProcMtuReq+0x64>)
    1526:	6833      	ldr	r3, [r6, #0]
    1528:	889f      	ldrh	r7, [r3, #4]
    152a:	f006 fc17 	bl	7d5c <HciGetMaxRxAclLen>
    152e:	3804      	subs	r0, #4
    1530:	4287      	cmp	r7, r0
    1532:	da02      	bge.n	153a <attsProcMtuReq+0x2a>
    1534:	6833      	ldr	r3, [r6, #0]
    1536:	8898      	ldrh	r0, [r3, #4]
    1538:	e003      	b.n	1542 <attsProcMtuReq+0x32>
    153a:	f006 fc0f 	bl	7d5c <HciGetMaxRxAclLen>
    153e:	3804      	subs	r0, #4
    1540:	b280      	uxth	r0, r0
    1542:	1c26      	adds	r6, r4, #0
    1544:	4284      	cmp	r4, r0
    1546:	d900      	bls.n	154a <attsProcMtuReq+0x3a>
    1548:	1c06      	adds	r6, r0, #0
    154a:	200b      	movs	r0, #11
    154c:	f7fe fe6e 	bl	22c <attMsgAlloc>
    1550:	b2b6      	uxth	r6, r6
    1552:	1e03      	subs	r3, r0, #0
    1554:	d008      	beq.n	1568 <attsProcMtuReq+0x58>
    1556:	2203      	movs	r2, #3
    1558:	0a31      	lsrs	r1, r6, #8
    155a:	7202      	strb	r2, [r0, #8]
    155c:	7246      	strb	r6, [r0, #9]
    155e:	7281      	strb	r1, [r0, #10]
    1560:	8b29      	ldrh	r1, [r5, #24]
    1562:	2004      	movs	r0, #4
    1564:	f002 fb6a 	bl	3c3c <L2cDataReq>
    1568:	0032      	movs	r2, r6
    156a:	0028      	movs	r0, r5
    156c:	0021      	movs	r1, r4
    156e:	f7fe fe4b 	bl	208 <attSetMtu>
    1572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1574:	10001088 	.word	0x10001088

00001578 <attsProcFindInfoReq>:
    1578:	b5f0      	push	{r4, r5, r6, r7, lr}
    157a:	7a93      	ldrb	r3, [r2, #10]
    157c:	7a51      	ldrb	r1, [r2, #9]
    157e:	021b      	lsls	r3, r3, #8
    1580:	18cb      	adds	r3, r1, r3
    1582:	b087      	sub	sp, #28
    1584:	b29b      	uxth	r3, r3
    1586:	0007      	movs	r7, r0
    1588:	9301      	str	r3, [sp, #4]
    158a:	2601      	movs	r6, #1
    158c:	2b00      	cmp	r3, #0
    158e:	d03a      	beq.n	1606 <attsProcFindInfoReq+0x8e>
    1590:	7b13      	ldrb	r3, [r2, #12]
    1592:	7ad2      	ldrb	r2, [r2, #11]
    1594:	021b      	lsls	r3, r3, #8
    1596:	18d3      	adds	r3, r2, r3
    1598:	b29b      	uxth	r3, r3
    159a:	9302      	str	r3, [sp, #8]
    159c:	9a02      	ldr	r2, [sp, #8]
    159e:	9b01      	ldr	r3, [sp, #4]
    15a0:	4293      	cmp	r3, r2
    15a2:	d830      	bhi.n	1606 <attsProcFindInfoReq+0x8e>
    15a4:	8b40      	ldrh	r0, [r0, #26]
    15a6:	3008      	adds	r0, #8
    15a8:	b280      	uxth	r0, r0
    15aa:	f7fe fe3f 	bl	22c <attMsgAlloc>
    15ae:	1e05      	subs	r5, r0, #0
    15b0:	d05c      	beq.n	166c <attsProcFindInfoReq+0xf4>
    15b2:	002c      	movs	r4, r5
    15b4:	2305      	movs	r3, #5
    15b6:	340a      	adds	r4, #10
    15b8:	9801      	ldr	r0, [sp, #4]
    15ba:	722b      	strb	r3, [r5, #8]
    15bc:	726e      	strb	r6, [r5, #9]
    15be:	9403      	str	r4, [sp, #12]
    15c0:	aa05      	add	r2, sp, #20
    15c2:	9902      	ldr	r1, [sp, #8]
    15c4:	f7ff ff56 	bl	1474 <attsFindInRange>
    15c8:	2800      	cmp	r0, #0
    15ca:	d014      	beq.n	15f6 <attsProcFindInfoReq+0x7e>
    15cc:	9b05      	ldr	r3, [sp, #20]
    15ce:	7b9b      	ldrb	r3, [r3, #14]
    15d0:	4233      	tst	r3, r6
    15d2:	d02e      	beq.n	1632 <attsProcFindInfoReq+0xba>
    15d4:	9b03      	ldr	r3, [sp, #12]
    15d6:	429c      	cmp	r4, r3
    15d8:	d10d      	bne.n	15f6 <attsProcFindInfoReq+0x7e>
    15da:	2302      	movs	r3, #2
    15dc:	726b      	strb	r3, [r5, #9]
    15de:	7020      	strb	r0, [r4, #0]
    15e0:	0a00      	lsrs	r0, r0, #8
    15e2:	7060      	strb	r0, [r4, #1]
    15e4:	0028      	movs	r0, r5
    15e6:	9b05      	ldr	r3, [sp, #20]
    15e8:	2210      	movs	r2, #16
    15ea:	6819      	ldr	r1, [r3, #0]
    15ec:	300c      	adds	r0, #12
    15ee:	002c      	movs	r4, r5
    15f0:	f00f ff43 	bl	1147a <memcpy>
    15f4:	341c      	adds	r4, #28
    15f6:	9b03      	ldr	r3, [sp, #12]
    15f8:	2600      	movs	r6, #0
    15fa:	429c      	cmp	r4, r3
    15fc:	d103      	bne.n	1606 <attsProcFindInfoReq+0x8e>
    15fe:	0028      	movs	r0, r5
    1600:	f009 fc36 	bl	ae70 <WsfMsgFree>
    1604:	360a      	adds	r6, #10
    1606:	0038      	movs	r0, r7
    1608:	f7ff fe4a 	bl	12a0 <attsDiscBusy>
    160c:	8b38      	ldrh	r0, [r7, #24]
    160e:	2e00      	cmp	r6, #0
    1610:	d109      	bne.n	1626 <attsProcFindInfoReq+0xae>
    1612:	002a      	movs	r2, r5
    1614:	3208      	adds	r2, #8
    1616:	1aa2      	subs	r2, r4, r2
    1618:	0001      	movs	r1, r0
    161a:	b292      	uxth	r2, r2
    161c:	002b      	movs	r3, r5
    161e:	2004      	movs	r0, #4
    1620:	f002 fb0c 	bl	3c3c <L2cDataReq>
    1624:	e024      	b.n	1670 <attsProcFindInfoReq+0xf8>
    1626:	0033      	movs	r3, r6
    1628:	9a01      	ldr	r2, [sp, #4]
    162a:	2104      	movs	r1, #4
    162c:	f7ff fdc4 	bl	11b8 <attsErrRsp>
    1630:	e01e      	b.n	1670 <attsProcFindInfoReq+0xf8>
    1632:	8b7b      	ldrh	r3, [r7, #26]
    1634:	1d22      	adds	r2, r4, #4
    1636:	3308      	adds	r3, #8
    1638:	18eb      	adds	r3, r5, r3
    163a:	429a      	cmp	r2, r3
    163c:	d8db      	bhi.n	15f6 <attsProcFindInfoReq+0x7e>
    163e:	0a03      	lsrs	r3, r0, #8
    1640:	7020      	strb	r0, [r4, #0]
    1642:	7063      	strb	r3, [r4, #1]
    1644:	9b05      	ldr	r3, [sp, #20]
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	781b      	ldrb	r3, [r3, #0]
    164a:	70a3      	strb	r3, [r4, #2]
    164c:	9b05      	ldr	r3, [sp, #20]
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	785b      	ldrb	r3, [r3, #1]
    1652:	70e3      	strb	r3, [r4, #3]
    1654:	4b07      	ldr	r3, [pc, #28]	; (1674 <attsProcFindInfoReq+0xfc>)
    1656:	4298      	cmp	r0, r3
    1658:	d006      	beq.n	1668 <attsProcFindInfoReq+0xf0>
    165a:	3001      	adds	r0, #1
    165c:	9b02      	ldr	r3, [sp, #8]
    165e:	b280      	uxth	r0, r0
    1660:	0014      	movs	r4, r2
    1662:	4283      	cmp	r3, r0
    1664:	d2ac      	bcs.n	15c0 <attsProcFindInfoReq+0x48>
    1666:	e7c6      	b.n	15f6 <attsProcFindInfoReq+0x7e>
    1668:	0014      	movs	r4, r2
    166a:	e7c4      	b.n	15f6 <attsProcFindInfoReq+0x7e>
    166c:	2611      	movs	r6, #17
    166e:	e7ca      	b.n	1606 <attsProcFindInfoReq+0x8e>
    1670:	b007      	add	sp, #28
    1672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1674:	0000ffff 	.word	0x0000ffff

00001678 <attsProcReadReq>:
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	7a94      	ldrb	r4, [r2, #10]
    167c:	7a53      	ldrb	r3, [r2, #9]
    167e:	0224      	lsls	r4, r4, #8
    1680:	191c      	adds	r4, r3, r4
    1682:	b087      	sub	sp, #28
    1684:	b2a4      	uxth	r4, r4
    1686:	0006      	movs	r6, r0
    1688:	a905      	add	r1, sp, #20
    168a:	0020      	movs	r0, r4
    168c:	f7ff fedc 	bl	1448 <attsFindByHandle>
    1690:	1e05      	subs	r5, r0, #0
    1692:	d042      	beq.n	171a <attsProcReadReq+0xa2>
    1694:	7bc3      	ldrb	r3, [r0, #15]
    1696:	0022      	movs	r2, r4
    1698:	7f30      	ldrb	r0, [r6, #28]
    169a:	2101      	movs	r1, #1
    169c:	f7ff ff04 	bl	14a8 <attsPermissions>
    16a0:	1e03      	subs	r3, r0, #0
    16a2:	d13b      	bne.n	171c <attsProcReadReq+0xa4>
    16a4:	7baa      	ldrb	r2, [r5, #14]
    16a6:	0751      	lsls	r1, r2, #29
    16a8:	d509      	bpl.n	16be <attsProcReadReq+0x46>
    16aa:	9905      	ldr	r1, [sp, #20]
    16ac:	688f      	ldr	r7, [r1, #8]
    16ae:	2f00      	cmp	r7, #0
    16b0:	d005      	beq.n	16be <attsProcReadReq+0x46>
    16b2:	7f30      	ldrb	r0, [r6, #28]
    16b4:	9500      	str	r5, [sp, #0]
    16b6:	220a      	movs	r2, #10
    16b8:	0021      	movs	r1, r4
    16ba:	47b8      	blx	r7
    16bc:	e02a      	b.n	1714 <attsProcReadReq+0x9c>
    16be:	0693      	lsls	r3, r2, #26
    16c0:	d41f      	bmi.n	1702 <attsProcReadReq+0x8a>
    16c2:	68ab      	ldr	r3, [r5, #8]
    16c4:	8b74      	ldrh	r4, [r6, #26]
    16c6:	881b      	ldrh	r3, [r3, #0]
    16c8:	3c01      	subs	r4, #1
    16ca:	429c      	cmp	r4, r3
    16cc:	dd00      	ble.n	16d0 <attsProcReadReq+0x58>
    16ce:	001c      	movs	r4, r3
    16d0:	b2a3      	uxth	r3, r4
    16d2:	0018      	movs	r0, r3
    16d4:	3009      	adds	r0, #9
    16d6:	b280      	uxth	r0, r0
    16d8:	9303      	str	r3, [sp, #12]
    16da:	f7fe fda7 	bl	22c <attMsgAlloc>
    16de:	1e07      	subs	r7, r0, #0
    16e0:	d021      	beq.n	1726 <attsProcReadReq+0xae>
    16e2:	230b      	movs	r3, #11
    16e4:	7203      	strb	r3, [r0, #8]
    16e6:	b2a2      	uxth	r2, r4
    16e8:	6869      	ldr	r1, [r5, #4]
    16ea:	3009      	adds	r0, #9
    16ec:	f00f fec5 	bl	1147a <memcpy>
    16f0:	9a03      	ldr	r2, [sp, #12]
    16f2:	8b31      	ldrh	r1, [r6, #24]
    16f4:	3201      	adds	r2, #1
    16f6:	b292      	uxth	r2, r2
    16f8:	003b      	movs	r3, r7
    16fa:	2004      	movs	r0, #4
    16fc:	f002 fa9e 	bl	3c3c <L2cDataReq>
    1700:	e011      	b.n	1726 <attsProcReadReq+0xae>
    1702:	4b0a      	ldr	r3, [pc, #40]	; (172c <attsProcReadReq+0xb4>)
    1704:	695f      	ldr	r7, [r3, #20]
    1706:	2f00      	cmp	r7, #0
    1708:	d0db      	beq.n	16c2 <attsProcReadReq+0x4a>
    170a:	7f30      	ldrb	r0, [r6, #28]
    170c:	686b      	ldr	r3, [r5, #4]
    170e:	0022      	movs	r2, r4
    1710:	2105      	movs	r1, #5
    1712:	47b8      	blx	r7
    1714:	1e03      	subs	r3, r0, #0
    1716:	d101      	bne.n	171c <attsProcReadReq+0xa4>
    1718:	e7d3      	b.n	16c2 <attsProcReadReq+0x4a>
    171a:	2301      	movs	r3, #1
    171c:	8b30      	ldrh	r0, [r6, #24]
    171e:	0022      	movs	r2, r4
    1720:	210a      	movs	r1, #10
    1722:	f7ff fd49 	bl	11b8 <attsErrRsp>
    1726:	b007      	add	sp, #28
    1728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	10001578 	.word	0x10001578

00001730 <attsFindUuidInRange>:
    1730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1732:	0005      	movs	r5, r0
    1734:	000f      	movs	r7, r1
    1736:	9301      	str	r3, [sp, #4]
    1738:	4b18      	ldr	r3, [pc, #96]	; (179c <attsFindUuidInRange+0x6c>)
    173a:	9e08      	ldr	r6, [sp, #32]
    173c:	681c      	ldr	r4, [r3, #0]
    173e:	9200      	str	r2, [sp, #0]
    1740:	2c00      	cmp	r4, #0
    1742:	d012      	beq.n	176a <attsFindUuidInRange+0x3a>
    1744:	8a23      	ldrh	r3, [r4, #16]
    1746:	429d      	cmp	r5, r3
    1748:	d202      	bcs.n	1750 <attsFindUuidInRange+0x20>
    174a:	42bb      	cmp	r3, r7
    174c:	d80b      	bhi.n	1766 <attsFindUuidInRange+0x36>
    174e:	001d      	movs	r5, r3
    1750:	8a62      	ldrh	r2, [r4, #18]
    1752:	42aa      	cmp	r2, r5
    1754:	d307      	bcc.n	1766 <attsFindUuidInRange+0x36>
    1756:	1aeb      	subs	r3, r5, r3
    1758:	6862      	ldr	r2, [r4, #4]
    175a:	011b      	lsls	r3, r3, #4
    175c:	18d3      	adds	r3, r2, r3
    175e:	6033      	str	r3, [r6, #0]
    1760:	8a63      	ldrh	r3, [r4, #18]
    1762:	42ab      	cmp	r3, r5
    1764:	d203      	bcs.n	176e <attsFindUuidInRange+0x3e>
    1766:	6824      	ldr	r4, [r4, #0]
    1768:	e7ea      	b.n	1740 <attsFindUuidInRange+0x10>
    176a:	0020      	movs	r0, r4
    176c:	e014      	b.n	1798 <attsFindUuidInRange+0x68>
    176e:	42bd      	cmp	r5, r7
    1770:	d8f9      	bhi.n	1766 <attsFindUuidInRange+0x36>
    1772:	9a01      	ldr	r2, [sp, #4]
    1774:	9900      	ldr	r1, [sp, #0]
    1776:	6830      	ldr	r0, [r6, #0]
    1778:	f7ff fe36 	bl	13e8 <attsUuidCmp>
    177c:	2800      	cmp	r0, #0
    177e:	d003      	beq.n	1788 <attsFindUuidInRange+0x58>
    1780:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1782:	0028      	movs	r0, r5
    1784:	601c      	str	r4, [r3, #0]
    1786:	e007      	b.n	1798 <attsFindUuidInRange+0x68>
    1788:	4b05      	ldr	r3, [pc, #20]	; (17a0 <attsFindUuidInRange+0x70>)
    178a:	429d      	cmp	r5, r3
    178c:	d0eb      	beq.n	1766 <attsFindUuidInRange+0x36>
    178e:	6833      	ldr	r3, [r6, #0]
    1790:	3501      	adds	r5, #1
    1792:	b2ad      	uxth	r5, r5
    1794:	3310      	adds	r3, #16
    1796:	e7e2      	b.n	175e <attsFindUuidInRange+0x2e>
    1798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	10001578 	.word	0x10001578
    17a0:	0000ffff 	.word	0x0000ffff

000017a4 <attsFindServiceGroupEnd>:
    17a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17a6:	2300      	movs	r3, #0
    17a8:	466a      	mov	r2, sp
    17aa:	7013      	strb	r3, [r2, #0]
    17ac:	3328      	adds	r3, #40	; 0x28
    17ae:	7053      	strb	r3, [r2, #1]
    17b0:	0006      	movs	r6, r0
    17b2:	2202      	movs	r2, #2
    17b4:	491c      	ldr	r1, [pc, #112]	; (1828 <attsFindServiceGroupEnd+0x84>)
    17b6:	a801      	add	r0, sp, #4
    17b8:	f00f fe5f 	bl	1147a <memcpy>
    17bc:	4b1b      	ldr	r3, [pc, #108]	; (182c <attsFindServiceGroupEnd+0x88>)
    17be:	429e      	cmp	r6, r3
    17c0:	d101      	bne.n	17c6 <attsFindServiceGroupEnd+0x22>
    17c2:	481a      	ldr	r0, [pc, #104]	; (182c <attsFindServiceGroupEnd+0x88>)
    17c4:	e02e      	b.n	1824 <attsFindServiceGroupEnd+0x80>
    17c6:	4b1a      	ldr	r3, [pc, #104]	; (1830 <attsFindServiceGroupEnd+0x8c>)
    17c8:	1c74      	adds	r4, r6, #1
    17ca:	681f      	ldr	r7, [r3, #0]
    17cc:	b2a4      	uxth	r4, r4
    17ce:	2f00      	cmp	r7, #0
    17d0:	d0f7      	beq.n	17c2 <attsFindServiceGroupEnd+0x1e>
    17d2:	8a3d      	ldrh	r5, [r7, #16]
    17d4:	1c23      	adds	r3, r4, #0
    17d6:	42ac      	cmp	r4, r5
    17d8:	d200      	bcs.n	17dc <attsFindServiceGroupEnd+0x38>
    17da:	1c2b      	adds	r3, r5, #0
    17dc:	b29c      	uxth	r4, r3
    17de:	8a7b      	ldrh	r3, [r7, #18]
    17e0:	42a3      	cmp	r3, r4
    17e2:	d31c      	bcc.n	181e <attsFindServiceGroupEnd+0x7a>
    17e4:	1b65      	subs	r5, r4, r5
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	012d      	lsls	r5, r5, #4
    17ea:	195d      	adds	r5, r3, r5
    17ec:	8a7b      	ldrh	r3, [r7, #18]
    17ee:	42a3      	cmp	r3, r4
    17f0:	d315      	bcc.n	181e <attsFindServiceGroupEnd+0x7a>
    17f2:	466a      	mov	r2, sp
    17f4:	2102      	movs	r1, #2
    17f6:	0028      	movs	r0, r5
    17f8:	f7ff fdf6 	bl	13e8 <attsUuidCmp>
    17fc:	2800      	cmp	r0, #0
    17fe:	d110      	bne.n	1822 <attsFindServiceGroupEnd+0x7e>
    1800:	aa01      	add	r2, sp, #4
    1802:	2102      	movs	r1, #2
    1804:	0028      	movs	r0, r5
    1806:	f7ff fdef 	bl	13e8 <attsUuidCmp>
    180a:	2800      	cmp	r0, #0
    180c:	d109      	bne.n	1822 <attsFindServiceGroupEnd+0x7e>
    180e:	4b07      	ldr	r3, [pc, #28]	; (182c <attsFindServiceGroupEnd+0x88>)
    1810:	429c      	cmp	r4, r3
    1812:	d0d6      	beq.n	17c2 <attsFindServiceGroupEnd+0x1e>
    1814:	1c63      	adds	r3, r4, #1
    1816:	0026      	movs	r6, r4
    1818:	3510      	adds	r5, #16
    181a:	b29c      	uxth	r4, r3
    181c:	e7e6      	b.n	17ec <attsFindServiceGroupEnd+0x48>
    181e:	683f      	ldr	r7, [r7, #0]
    1820:	e7d5      	b.n	17ce <attsFindServiceGroupEnd+0x2a>
    1822:	0030      	movs	r0, r6
    1824:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	00012228 	.word	0x00012228
    182c:	0000ffff 	.word	0x0000ffff
    1830:	10001578 	.word	0x10001578

00001834 <attsProcReadBlobReq>:
    1834:	b5f0      	push	{r4, r5, r6, r7, lr}
    1836:	7a94      	ldrb	r4, [r2, #10]
    1838:	7a53      	ldrb	r3, [r2, #9]
    183a:	0224      	lsls	r4, r4, #8
    183c:	191c      	adds	r4, r3, r4
    183e:	b087      	sub	sp, #28
    1840:	b2a4      	uxth	r4, r4
    1842:	9002      	str	r0, [sp, #8]
    1844:	a905      	add	r1, sp, #20
    1846:	0020      	movs	r0, r4
    1848:	7ad7      	ldrb	r7, [r2, #11]
    184a:	7b16      	ldrb	r6, [r2, #12]
    184c:	f7ff fdfc 	bl	1448 <attsFindByHandle>
    1850:	1e05      	subs	r5, r0, #0
    1852:	d053      	beq.n	18fc <attsProcReadBlobReq+0xc8>
    1854:	9a02      	ldr	r2, [sp, #8]
    1856:	7bc3      	ldrb	r3, [r0, #15]
    1858:	2101      	movs	r1, #1
    185a:	7f10      	ldrb	r0, [r2, #28]
    185c:	0022      	movs	r2, r4
    185e:	f7ff fe23 	bl	14a8 <attsPermissions>
    1862:	2800      	cmp	r0, #0
    1864:	d14d      	bne.n	1902 <attsProcReadBlobReq+0xce>
    1866:	0236      	lsls	r6, r6, #8
    1868:	19f7      	adds	r7, r6, r7
    186a:	b2bb      	uxth	r3, r7
    186c:	9303      	str	r3, [sp, #12]
    186e:	68ab      	ldr	r3, [r5, #8]
    1870:	9a03      	ldr	r2, [sp, #12]
    1872:	881b      	ldrh	r3, [r3, #0]
    1874:	4293      	cmp	r3, r2
    1876:	d343      	bcc.n	1900 <attsProcReadBlobReq+0xcc>
    1878:	7bab      	ldrb	r3, [r5, #14]
    187a:	075a      	lsls	r2, r3, #29
    187c:	d50b      	bpl.n	1896 <attsProcReadBlobReq+0x62>
    187e:	9a05      	ldr	r2, [sp, #20]
    1880:	6896      	ldr	r6, [r2, #8]
    1882:	2e00      	cmp	r6, #0
    1884:	d007      	beq.n	1896 <attsProcReadBlobReq+0x62>
    1886:	9b02      	ldr	r3, [sp, #8]
    1888:	220c      	movs	r2, #12
    188a:	7f18      	ldrb	r0, [r3, #28]
    188c:	0021      	movs	r1, r4
    188e:	9500      	str	r5, [sp, #0]
    1890:	9b03      	ldr	r3, [sp, #12]
    1892:	47b0      	blx	r6
    1894:	e02f      	b.n	18f6 <attsProcReadBlobReq+0xc2>
    1896:	069b      	lsls	r3, r3, #26
    1898:	d423      	bmi.n	18e2 <attsProcReadBlobReq+0xae>
    189a:	68ab      	ldr	r3, [r5, #8]
    189c:	9a03      	ldr	r2, [sp, #12]
    189e:	881c      	ldrh	r4, [r3, #0]
    18a0:	9b02      	ldr	r3, [sp, #8]
    18a2:	1aa4      	subs	r4, r4, r2
    18a4:	8b5b      	ldrh	r3, [r3, #26]
    18a6:	3b01      	subs	r3, #1
    18a8:	429c      	cmp	r4, r3
    18aa:	dd00      	ble.n	18ae <attsProcReadBlobReq+0x7a>
    18ac:	001c      	movs	r4, r3
    18ae:	b2a6      	uxth	r6, r4
    18b0:	0030      	movs	r0, r6
    18b2:	3009      	adds	r0, #9
    18b4:	b280      	uxth	r0, r0
    18b6:	f7fe fcb9 	bl	22c <attMsgAlloc>
    18ba:	1e07      	subs	r7, r0, #0
    18bc:	d029      	beq.n	1912 <attsProcReadBlobReq+0xde>
    18be:	230d      	movs	r3, #13
    18c0:	7203      	strb	r3, [r0, #8]
    18c2:	6869      	ldr	r1, [r5, #4]
    18c4:	9b03      	ldr	r3, [sp, #12]
    18c6:	b2a2      	uxth	r2, r4
    18c8:	18c9      	adds	r1, r1, r3
    18ca:	3009      	adds	r0, #9
    18cc:	f00f fdd5 	bl	1147a <memcpy>
    18d0:	9b02      	ldr	r3, [sp, #8]
    18d2:	3601      	adds	r6, #1
    18d4:	8b19      	ldrh	r1, [r3, #24]
    18d6:	b2b2      	uxth	r2, r6
    18d8:	003b      	movs	r3, r7
    18da:	2004      	movs	r0, #4
    18dc:	f002 f9ae 	bl	3c3c <L2cDataReq>
    18e0:	e017      	b.n	1912 <attsProcReadBlobReq+0xde>
    18e2:	4b0d      	ldr	r3, [pc, #52]	; (1918 <attsProcReadBlobReq+0xe4>)
    18e4:	695e      	ldr	r6, [r3, #20]
    18e6:	2e00      	cmp	r6, #0
    18e8:	d0d7      	beq.n	189a <attsProcReadBlobReq+0x66>
    18ea:	9b02      	ldr	r3, [sp, #8]
    18ec:	0022      	movs	r2, r4
    18ee:	7f18      	ldrb	r0, [r3, #28]
    18f0:	2105      	movs	r1, #5
    18f2:	686b      	ldr	r3, [r5, #4]
    18f4:	47b0      	blx	r6
    18f6:	2800      	cmp	r0, #0
    18f8:	d103      	bne.n	1902 <attsProcReadBlobReq+0xce>
    18fa:	e7ce      	b.n	189a <attsProcReadBlobReq+0x66>
    18fc:	2001      	movs	r0, #1
    18fe:	e000      	b.n	1902 <attsProcReadBlobReq+0xce>
    1900:	2007      	movs	r0, #7
    1902:	9b02      	ldr	r3, [sp, #8]
    1904:	0022      	movs	r2, r4
    1906:	8b1d      	ldrh	r5, [r3, #24]
    1908:	210c      	movs	r1, #12
    190a:	0003      	movs	r3, r0
    190c:	0028      	movs	r0, r5
    190e:	f7ff fc53 	bl	11b8 <attsErrRsp>
    1912:	b007      	add	sp, #28
    1914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	10001578 	.word	0x10001578

0000191c <attsProcFindTypeReq>:
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	7a93      	ldrb	r3, [r2, #10]
    1920:	0017      	movs	r7, r2
    1922:	7a52      	ldrb	r2, [r2, #9]
    1924:	021b      	lsls	r3, r3, #8
    1926:	18d3      	adds	r3, r2, r3
    1928:	b08b      	sub	sp, #44	; 0x2c
    192a:	b29b      	uxth	r3, r3
    192c:	9003      	str	r0, [sp, #12]
    192e:	9105      	str	r1, [sp, #20]
    1930:	9302      	str	r3, [sp, #8]
    1932:	2501      	movs	r5, #1
    1934:	2b00      	cmp	r3, #0
    1936:	d031      	beq.n	199c <attsProcFindTypeReq+0x80>
    1938:	7b3b      	ldrb	r3, [r7, #12]
    193a:	7afa      	ldrb	r2, [r7, #11]
    193c:	021b      	lsls	r3, r3, #8
    193e:	18d3      	adds	r3, r2, r3
    1940:	b29b      	uxth	r3, r3
    1942:	9304      	str	r3, [sp, #16]
    1944:	9a04      	ldr	r2, [sp, #16]
    1946:	9b02      	ldr	r3, [sp, #8]
    1948:	4293      	cmp	r3, r2
    194a:	d827      	bhi.n	199c <attsProcFindTypeReq+0x80>
    194c:	9b03      	ldr	r3, [sp, #12]
    194e:	8b58      	ldrh	r0, [r3, #26]
    1950:	3008      	adds	r0, #8
    1952:	b280      	uxth	r0, r0
    1954:	f7fe fc6a 	bl	22c <attMsgAlloc>
    1958:	1e06      	subs	r6, r0, #0
    195a:	d064      	beq.n	1a26 <attsProcFindTypeReq+0x10a>
    195c:	9c05      	ldr	r4, [sp, #20]
    195e:	9802      	ldr	r0, [sp, #8]
    1960:	3c07      	subs	r4, #7
    1962:	b2a3      	uxth	r3, r4
    1964:	9305      	str	r3, [sp, #20]
    1966:	0034      	movs	r4, r6
    1968:	2307      	movs	r3, #7
    196a:	3409      	adds	r4, #9
    196c:	7233      	strb	r3, [r6, #8]
    196e:	9507      	str	r5, [sp, #28]
    1970:	ab09      	add	r3, sp, #36	; 0x24
    1972:	9301      	str	r3, [sp, #4]
    1974:	ab08      	add	r3, sp, #32
    1976:	9300      	str	r3, [sp, #0]
    1978:	003b      	movs	r3, r7
    197a:	2202      	movs	r2, #2
    197c:	330d      	adds	r3, #13
    197e:	9904      	ldr	r1, [sp, #16]
    1980:	f7ff fed6 	bl	1730 <attsFindUuidInRange>
    1984:	1e05      	subs	r5, r0, #0
    1986:	9006      	str	r0, [sp, #24]
    1988:	d11f      	bne.n	19ca <attsProcFindTypeReq+0xae>
    198a:	0033      	movs	r3, r6
    198c:	3309      	adds	r3, #9
    198e:	2500      	movs	r5, #0
    1990:	429c      	cmp	r4, r3
    1992:	d103      	bne.n	199c <attsProcFindTypeReq+0x80>
    1994:	0030      	movs	r0, r6
    1996:	f009 fa6b 	bl	ae70 <WsfMsgFree>
    199a:	350a      	adds	r5, #10
    199c:	9803      	ldr	r0, [sp, #12]
    199e:	f7ff fc7f 	bl	12a0 <attsDiscBusy>
    19a2:	9b03      	ldr	r3, [sp, #12]
    19a4:	8b18      	ldrh	r0, [r3, #24]
    19a6:	2d00      	cmp	r5, #0
    19a8:	d109      	bne.n	19be <attsProcFindTypeReq+0xa2>
    19aa:	0032      	movs	r2, r6
    19ac:	3208      	adds	r2, #8
    19ae:	1aa2      	subs	r2, r4, r2
    19b0:	0001      	movs	r1, r0
    19b2:	b292      	uxth	r2, r2
    19b4:	0033      	movs	r3, r6
    19b6:	2004      	movs	r0, #4
    19b8:	f002 f940 	bl	3c3c <L2cDataReq>
    19bc:	e03d      	b.n	1a3a <attsProcFindTypeReq+0x11e>
    19be:	002b      	movs	r3, r5
    19c0:	9a02      	ldr	r2, [sp, #8]
    19c2:	2106      	movs	r1, #6
    19c4:	f7ff fbf8 	bl	11b8 <attsErrRsp>
    19c8:	e037      	b.n	1a3a <attsProcFindTypeReq+0x11e>
    19ca:	9b08      	ldr	r3, [sp, #32]
    19cc:	9907      	ldr	r1, [sp, #28]
    19ce:	7bda      	ldrb	r2, [r3, #15]
    19d0:	420a      	tst	r2, r1
    19d2:	d02a      	beq.n	1a2a <attsProcFindTypeReq+0x10e>
    19d4:	9a05      	ldr	r2, [sp, #20]
    19d6:	2a00      	cmp	r2, #0
    19d8:	d00c      	beq.n	19f4 <attsProcFindTypeReq+0xd8>
    19da:	689a      	ldr	r2, [r3, #8]
    19dc:	9905      	ldr	r1, [sp, #20]
    19de:	8812      	ldrh	r2, [r2, #0]
    19e0:	428a      	cmp	r2, r1
    19e2:	d122      	bne.n	1a2a <attsProcFindTypeReq+0x10e>
    19e4:	0038      	movs	r0, r7
    19e6:	000a      	movs	r2, r1
    19e8:	300f      	adds	r0, #15
    19ea:	6859      	ldr	r1, [r3, #4]
    19ec:	f00f fd36 	bl	1145c <memcmp>
    19f0:	2800      	cmp	r0, #0
    19f2:	d11a      	bne.n	1a2a <attsProcFindTypeReq+0x10e>
    19f4:	7b7b      	ldrb	r3, [r7, #13]
    19f6:	0028      	movs	r0, r5
    19f8:	2b00      	cmp	r3, #0
    19fa:	d104      	bne.n	1a06 <attsProcFindTypeReq+0xea>
    19fc:	7bbb      	ldrb	r3, [r7, #14]
    19fe:	2b28      	cmp	r3, #40	; 0x28
    1a00:	d101      	bne.n	1a06 <attsProcFindTypeReq+0xea>
    1a02:	f7ff fecf 	bl	17a4 <attsFindServiceGroupEnd>
    1a06:	9b03      	ldr	r3, [sp, #12]
    1a08:	1d22      	adds	r2, r4, #4
    1a0a:	8b5b      	ldrh	r3, [r3, #26]
    1a0c:	3308      	adds	r3, #8
    1a0e:	18f3      	adds	r3, r6, r3
    1a10:	429a      	cmp	r2, r3
    1a12:	d8ba      	bhi.n	198a <attsProcFindTypeReq+0x6e>
    1a14:	7025      	strb	r5, [r4, #0]
    1a16:	0a03      	lsrs	r3, r0, #8
    1a18:	0a2d      	lsrs	r5, r5, #8
    1a1a:	7065      	strb	r5, [r4, #1]
    1a1c:	70a0      	strb	r0, [r4, #2]
    1a1e:	70e3      	strb	r3, [r4, #3]
    1a20:	9006      	str	r0, [sp, #24]
    1a22:	0014      	movs	r4, r2
    1a24:	e001      	b.n	1a2a <attsProcFindTypeReq+0x10e>
    1a26:	2511      	movs	r5, #17
    1a28:	e7b8      	b.n	199c <attsProcFindTypeReq+0x80>
    1a2a:	9b04      	ldr	r3, [sp, #16]
    1a2c:	9a06      	ldr	r2, [sp, #24]
    1a2e:	4293      	cmp	r3, r2
    1a30:	d9ab      	bls.n	198a <attsProcFindTypeReq+0x6e>
    1a32:	9b06      	ldr	r3, [sp, #24]
    1a34:	3301      	adds	r3, #1
    1a36:	b298      	uxth	r0, r3
    1a38:	e79a      	b.n	1970 <attsProcFindTypeReq+0x54>
    1a3a:	b00b      	add	sp, #44	; 0x2c
    1a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a3e <attsProcReadTypeReq>:
    1a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a40:	7a94      	ldrb	r4, [r2, #10]
    1a42:	0006      	movs	r6, r0
    1a44:	7a50      	ldrb	r0, [r2, #9]
    1a46:	0224      	lsls	r4, r4, #8
    1a48:	3905      	subs	r1, #5
    1a4a:	b08b      	sub	sp, #44	; 0x2c
    1a4c:	1904      	adds	r4, r0, r4
    1a4e:	b2cb      	uxtb	r3, r1
    1a50:	b2a4      	uxth	r4, r4
    1a52:	9304      	str	r3, [sp, #16]
    1a54:	2b02      	cmp	r3, #2
    1a56:	d004      	beq.n	1a62 <attsProcReadTypeReq+0x24>
    1a58:	9904      	ldr	r1, [sp, #16]
    1a5a:	2304      	movs	r3, #4
    1a5c:	2910      	cmp	r1, #16
    1a5e:	d000      	beq.n	1a62 <attsProcReadTypeReq+0x24>
    1a60:	e0cb      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1a62:	2c00      	cmp	r4, #0
    1a64:	d007      	beq.n	1a76 <attsProcReadTypeReq+0x38>
    1a66:	7b13      	ldrb	r3, [r2, #12]
    1a68:	7ad1      	ldrb	r1, [r2, #11]
    1a6a:	021b      	lsls	r3, r3, #8
    1a6c:	18cb      	adds	r3, r1, r3
    1a6e:	b29b      	uxth	r3, r3
    1a70:	9303      	str	r3, [sp, #12]
    1a72:	429c      	cmp	r4, r3
    1a74:	d901      	bls.n	1a7a <attsProcReadTypeReq+0x3c>
    1a76:	2301      	movs	r3, #1
    1a78:	e0bf      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1a7a:	ab09      	add	r3, sp, #36	; 0x24
    1a7c:	320d      	adds	r2, #13
    1a7e:	9301      	str	r3, [sp, #4]
    1a80:	ab08      	add	r3, sp, #32
    1a82:	9206      	str	r2, [sp, #24]
    1a84:	9300      	str	r3, [sp, #0]
    1a86:	0020      	movs	r0, r4
    1a88:	0013      	movs	r3, r2
    1a8a:	9903      	ldr	r1, [sp, #12]
    1a8c:	9a04      	ldr	r2, [sp, #16]
    1a8e:	f7ff fe4f 	bl	1730 <attsFindUuidInRange>
    1a92:	230a      	movs	r3, #10
    1a94:	1e04      	subs	r4, r0, #0
    1a96:	d100      	bne.n	1a9a <attsProcReadTypeReq+0x5c>
    1a98:	e0af      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1a9a:	9b08      	ldr	r3, [sp, #32]
    1a9c:	7f30      	ldrb	r0, [r6, #28]
    1a9e:	7bdb      	ldrb	r3, [r3, #15]
    1aa0:	0022      	movs	r2, r4
    1aa2:	2101      	movs	r1, #1
    1aa4:	f7ff fd00 	bl	14a8 <attsPermissions>
    1aa8:	1e03      	subs	r3, r0, #0
    1aaa:	d000      	beq.n	1aae <attsProcReadTypeReq+0x70>
    1aac:	e0a5      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1aae:	9a08      	ldr	r2, [sp, #32]
    1ab0:	7b91      	ldrb	r1, [r2, #14]
    1ab2:	0748      	lsls	r0, r1, #29
    1ab4:	d509      	bpl.n	1aca <attsProcReadTypeReq+0x8c>
    1ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
    1ab8:	6885      	ldr	r5, [r0, #8]
    1aba:	2d00      	cmp	r5, #0
    1abc:	d005      	beq.n	1aca <attsProcReadTypeReq+0x8c>
    1abe:	9200      	str	r2, [sp, #0]
    1ac0:	7f30      	ldrb	r0, [r6, #28]
    1ac2:	2208      	movs	r2, #8
    1ac4:	0021      	movs	r1, r4
    1ac6:	47a8      	blx	r5
    1ac8:	e014      	b.n	1af4 <attsProcReadTypeReq+0xb6>
    1aca:	068b      	lsls	r3, r1, #26
    1acc:	d409      	bmi.n	1ae2 <attsProcReadTypeReq+0xa4>
    1ace:	8b70      	ldrh	r0, [r6, #26]
    1ad0:	3008      	adds	r0, #8
    1ad2:	b280      	uxth	r0, r0
    1ad4:	f7fe fbaa 	bl	22c <attMsgAlloc>
    1ad8:	9002      	str	r0, [sp, #8]
    1ada:	1e03      	subs	r3, r0, #0
    1adc:	d10d      	bne.n	1afa <attsProcReadTypeReq+0xbc>
    1ade:	3311      	adds	r3, #17
    1ae0:	e08b      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1ae2:	4b49      	ldr	r3, [pc, #292]	; (1c08 <attsProcReadTypeReq+0x1ca>)
    1ae4:	695d      	ldr	r5, [r3, #20]
    1ae6:	2d00      	cmp	r5, #0
    1ae8:	d0f1      	beq.n	1ace <attsProcReadTypeReq+0x90>
    1aea:	6853      	ldr	r3, [r2, #4]
    1aec:	7f30      	ldrb	r0, [r6, #28]
    1aee:	0022      	movs	r2, r4
    1af0:	2105      	movs	r1, #5
    1af2:	47a8      	blx	r5
    1af4:	1e03      	subs	r3, r0, #0
    1af6:	d0ea      	beq.n	1ace <attsProcReadTypeReq+0x90>
    1af8:	e07f      	b.n	1bfa <attsProcReadTypeReq+0x1bc>
    1afa:	2309      	movs	r3, #9
    1afc:	9a02      	ldr	r2, [sp, #8]
    1afe:	7213      	strb	r3, [r2, #8]
    1b00:	9a08      	ldr	r2, [sp, #32]
    1b02:	8b73      	ldrh	r3, [r6, #26]
    1b04:	6891      	ldr	r1, [r2, #8]
    1b06:	3b04      	subs	r3, #4
    1b08:	8809      	ldrh	r1, [r1, #0]
    1b0a:	428b      	cmp	r3, r1
    1b0c:	d900      	bls.n	1b10 <attsProcReadTypeReq+0xd2>
    1b0e:	000b      	movs	r3, r1
    1b10:	9802      	ldr	r0, [sp, #8]
    1b12:	b2d9      	uxtb	r1, r3
    1b14:	0005      	movs	r5, r0
    1b16:	9107      	str	r1, [sp, #28]
    1b18:	3102      	adds	r1, #2
    1b1a:	7241      	strb	r1, [r0, #9]
    1b1c:	0a21      	lsrs	r1, r4, #8
    1b1e:	7284      	strb	r4, [r0, #10]
    1b20:	b2db      	uxtb	r3, r3
    1b22:	72c1      	strb	r1, [r0, #11]
    1b24:	350c      	adds	r5, #12
    1b26:	6851      	ldr	r1, [r2, #4]
    1b28:	0028      	movs	r0, r5
    1b2a:	001a      	movs	r2, r3
    1b2c:	9305      	str	r3, [sp, #20]
    1b2e:	f00f fca4 	bl	1147a <memcpy>
    1b32:	9b05      	ldr	r3, [sp, #20]
    1b34:	3401      	adds	r4, #1
    1b36:	18ed      	adds	r5, r5, r3
    1b38:	b2a0      	uxth	r0, r4
    1b3a:	ab09      	add	r3, sp, #36	; 0x24
    1b3c:	9301      	str	r3, [sp, #4]
    1b3e:	ab08      	add	r3, sp, #32
    1b40:	9300      	str	r3, [sp, #0]
    1b42:	9a04      	ldr	r2, [sp, #16]
    1b44:	9b06      	ldr	r3, [sp, #24]
    1b46:	9903      	ldr	r1, [sp, #12]
    1b48:	f7ff fdf2 	bl	1730 <attsFindUuidInRange>
    1b4c:	1e04      	subs	r4, r0, #0
    1b4e:	d04a      	beq.n	1be6 <attsProcReadTypeReq+0x1a8>
    1b50:	2104      	movs	r1, #4
    1b52:	9b08      	ldr	r3, [sp, #32]
    1b54:	7b9a      	ldrb	r2, [r3, #14]
    1b56:	420a      	tst	r2, r1
    1b58:	d00a      	beq.n	1b70 <attsProcReadTypeReq+0x132>
    1b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b5c:	688f      	ldr	r7, [r1, #8]
    1b5e:	2f00      	cmp	r7, #0
    1b60:	d006      	beq.n	1b70 <attsProcReadTypeReq+0x132>
    1b62:	9300      	str	r3, [sp, #0]
    1b64:	7f30      	ldrb	r0, [r6, #28]
    1b66:	2300      	movs	r3, #0
    1b68:	2208      	movs	r2, #8
    1b6a:	0021      	movs	r1, r4
    1b6c:	47b8      	blx	r7
    1b6e:	e012      	b.n	1b96 <attsProcReadTypeReq+0x158>
    1b70:	2120      	movs	r1, #32
    1b72:	420a      	tst	r2, r1
    1b74:	d106      	bne.n	1b84 <attsProcReadTypeReq+0x146>
    1b76:	9b08      	ldr	r3, [sp, #32]
    1b78:	9907      	ldr	r1, [sp, #28]
    1b7a:	689a      	ldr	r2, [r3, #8]
    1b7c:	8812      	ldrh	r2, [r2, #0]
    1b7e:	428a      	cmp	r2, r1
    1b80:	d00c      	beq.n	1b9c <attsProcReadTypeReq+0x15e>
    1b82:	e030      	b.n	1be6 <attsProcReadTypeReq+0x1a8>
    1b84:	4a20      	ldr	r2, [pc, #128]	; (1c08 <attsProcReadTypeReq+0x1ca>)
    1b86:	6957      	ldr	r7, [r2, #20]
    1b88:	2f00      	cmp	r7, #0
    1b8a:	d0f4      	beq.n	1b76 <attsProcReadTypeReq+0x138>
    1b8c:	7f30      	ldrb	r0, [r6, #28]
    1b8e:	685b      	ldr	r3, [r3, #4]
    1b90:	0022      	movs	r2, r4
    1b92:	2105      	movs	r1, #5
    1b94:	47b8      	blx	r7
    1b96:	2800      	cmp	r0, #0
    1b98:	d0ed      	beq.n	1b76 <attsProcReadTypeReq+0x138>
    1b9a:	e024      	b.n	1be6 <attsProcReadTypeReq+0x1a8>
    1b9c:	7bdb      	ldrb	r3, [r3, #15]
    1b9e:	7f30      	ldrb	r0, [r6, #28]
    1ba0:	0022      	movs	r2, r4
    1ba2:	2101      	movs	r1, #1
    1ba4:	f7ff fc80 	bl	14a8 <attsPermissions>
    1ba8:	2800      	cmp	r0, #0
    1baa:	d11c      	bne.n	1be6 <attsProcReadTypeReq+0x1a8>
    1bac:	9b05      	ldr	r3, [sp, #20]
    1bae:	9a02      	ldr	r2, [sp, #8]
    1bb0:	1c9f      	adds	r7, r3, #2
    1bb2:	8b73      	ldrh	r3, [r6, #26]
    1bb4:	19ef      	adds	r7, r5, r7
    1bb6:	3308      	adds	r3, #8
    1bb8:	18d3      	adds	r3, r2, r3
    1bba:	429f      	cmp	r7, r3
    1bbc:	d813      	bhi.n	1be6 <attsProcReadTypeReq+0x1a8>
    1bbe:	0a23      	lsrs	r3, r4, #8
    1bc0:	702c      	strb	r4, [r5, #0]
    1bc2:	706b      	strb	r3, [r5, #1]
    1bc4:	9b08      	ldr	r3, [sp, #32]
    1bc6:	1ca8      	adds	r0, r5, #2
    1bc8:	6859      	ldr	r1, [r3, #4]
    1bca:	9a05      	ldr	r2, [sp, #20]
    1bcc:	f00f fc55 	bl	1147a <memcpy>
    1bd0:	4b0e      	ldr	r3, [pc, #56]	; (1c0c <attsProcReadTypeReq+0x1ce>)
    1bd2:	429c      	cmp	r4, r3
    1bd4:	d006      	beq.n	1be4 <attsProcReadTypeReq+0x1a6>
    1bd6:	3401      	adds	r4, #1
    1bd8:	9b03      	ldr	r3, [sp, #12]
    1bda:	b2a0      	uxth	r0, r4
    1bdc:	003d      	movs	r5, r7
    1bde:	4283      	cmp	r3, r0
    1be0:	d2ab      	bcs.n	1b3a <attsProcReadTypeReq+0xfc>
    1be2:	e000      	b.n	1be6 <attsProcReadTypeReq+0x1a8>
    1be4:	003d      	movs	r5, r7
    1be6:	9a02      	ldr	r2, [sp, #8]
    1be8:	8b31      	ldrh	r1, [r6, #24]
    1bea:	3208      	adds	r2, #8
    1bec:	1aaa      	subs	r2, r5, r2
    1bee:	b292      	uxth	r2, r2
    1bf0:	9b02      	ldr	r3, [sp, #8]
    1bf2:	2004      	movs	r0, #4
    1bf4:	f002 f822 	bl	3c3c <L2cDataReq>
    1bf8:	e004      	b.n	1c04 <attsProcReadTypeReq+0x1c6>
    1bfa:	8b30      	ldrh	r0, [r6, #24]
    1bfc:	0022      	movs	r2, r4
    1bfe:	2108      	movs	r1, #8
    1c00:	f7ff fada 	bl	11b8 <attsErrRsp>
    1c04:	b00b      	add	sp, #44	; 0x2c
    1c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c08:	10001578 	.word	0x10001578
    1c0c:	0000ffff 	.word	0x0000ffff

00001c10 <attsProcReadMultReq>:
    1c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c12:	3108      	adds	r1, #8
    1c14:	b089      	sub	sp, #36	; 0x24
    1c16:	1853      	adds	r3, r2, r1
    1c18:	3209      	adds	r2, #9
    1c1a:	9305      	str	r3, [sp, #20]
    1c1c:	9204      	str	r2, [sp, #16]
    1c1e:	0007      	movs	r7, r0
    1c20:	8b40      	ldrh	r0, [r0, #26]
    1c22:	3008      	adds	r0, #8
    1c24:	b280      	uxth	r0, r0
    1c26:	f7fe fb01 	bl	22c <attMsgAlloc>
    1c2a:	1e05      	subs	r5, r0, #0
    1c2c:	d05a      	beq.n	1ce4 <attsProcReadMultReq+0xd4>
    1c2e:	0003      	movs	r3, r0
    1c30:	3309      	adds	r3, #9
    1c32:	9302      	str	r3, [sp, #8]
    1c34:	230f      	movs	r3, #15
    1c36:	7203      	strb	r3, [r0, #8]
    1c38:	9b04      	ldr	r3, [sp, #16]
    1c3a:	9a05      	ldr	r2, [sp, #20]
    1c3c:	4293      	cmp	r3, r2
    1c3e:	d25a      	bcs.n	1cf6 <attsProcReadMultReq+0xe6>
    1c40:	9b04      	ldr	r3, [sp, #16]
    1c42:	9a04      	ldr	r2, [sp, #16]
    1c44:	785b      	ldrb	r3, [r3, #1]
    1c46:	7812      	ldrb	r2, [r2, #0]
    1c48:	021b      	lsls	r3, r3, #8
    1c4a:	18d3      	adds	r3, r2, r3
    1c4c:	b29b      	uxth	r3, r3
    1c4e:	9303      	str	r3, [sp, #12]
    1c50:	9b04      	ldr	r3, [sp, #16]
    1c52:	a907      	add	r1, sp, #28
    1c54:	3302      	adds	r3, #2
    1c56:	9803      	ldr	r0, [sp, #12]
    1c58:	9304      	str	r3, [sp, #16]
    1c5a:	f7ff fbf5 	bl	1448 <attsFindByHandle>
    1c5e:	1e06      	subs	r6, r0, #0
    1c60:	d054      	beq.n	1d0c <attsProcReadMultReq+0xfc>
    1c62:	7bc3      	ldrb	r3, [r0, #15]
    1c64:	9a03      	ldr	r2, [sp, #12]
    1c66:	7f38      	ldrb	r0, [r7, #28]
    1c68:	2101      	movs	r1, #1
    1c6a:	f7ff fc1d 	bl	14a8 <attsPermissions>
    1c6e:	1e04      	subs	r4, r0, #0
    1c70:	d14d      	bne.n	1d0e <attsProcReadMultReq+0xfe>
    1c72:	2204      	movs	r2, #4
    1c74:	7bb3      	ldrb	r3, [r6, #14]
    1c76:	4213      	tst	r3, r2
    1c78:	d014      	beq.n	1ca4 <attsProcReadMultReq+0x94>
    1c7a:	9a07      	ldr	r2, [sp, #28]
    1c7c:	6892      	ldr	r2, [r2, #8]
    1c7e:	4694      	mov	ip, r2
    1c80:	2a00      	cmp	r2, #0
    1c82:	d00f      	beq.n	1ca4 <attsProcReadMultReq+0x94>
    1c84:	7f38      	ldrb	r0, [r7, #28]
    1c86:	0023      	movs	r3, r4
    1c88:	9600      	str	r6, [sp, #0]
    1c8a:	220e      	movs	r2, #14
    1c8c:	9903      	ldr	r1, [sp, #12]
    1c8e:	4664      	mov	r4, ip
    1c90:	47a0      	blx	r4
    1c92:	1e04      	subs	r4, r0, #0
    1c94:	d13b      	bne.n	1d0e <attsProcReadMultReq+0xfe>
    1c96:	8b7b      	ldrh	r3, [r7, #26]
    1c98:	9a02      	ldr	r2, [sp, #8]
    1c9a:	3308      	adds	r3, #8
    1c9c:	18eb      	adds	r3, r5, r3
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d2ca      	bcs.n	1c38 <attsProcReadMultReq+0x28>
    1ca2:	e00c      	b.n	1cbe <attsProcReadMultReq+0xae>
    1ca4:	2220      	movs	r2, #32
    1ca6:	4213      	tst	r3, r2
    1ca8:	d0f5      	beq.n	1c96 <attsProcReadMultReq+0x86>
    1caa:	4b1c      	ldr	r3, [pc, #112]	; (1d1c <attsProcReadMultReq+0x10c>)
    1cac:	695c      	ldr	r4, [r3, #20]
    1cae:	2c00      	cmp	r4, #0
    1cb0:	d0f1      	beq.n	1c96 <attsProcReadMultReq+0x86>
    1cb2:	7f38      	ldrb	r0, [r7, #28]
    1cb4:	6873      	ldr	r3, [r6, #4]
    1cb6:	9a03      	ldr	r2, [sp, #12]
    1cb8:	2105      	movs	r1, #5
    1cba:	47a0      	blx	r4
    1cbc:	e7e9      	b.n	1c92 <attsProcReadMultReq+0x82>
    1cbe:	9a02      	ldr	r2, [sp, #8]
    1cc0:	1a9b      	subs	r3, r3, r2
    1cc2:	68b2      	ldr	r2, [r6, #8]
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	8812      	ldrh	r2, [r2, #0]
    1cc8:	1c14      	adds	r4, r2, #0
    1cca:	429a      	cmp	r2, r3
    1ccc:	d900      	bls.n	1cd0 <attsProcReadMultReq+0xc0>
    1cce:	1c1c      	adds	r4, r3, #0
    1cd0:	b2a4      	uxth	r4, r4
    1cd2:	6871      	ldr	r1, [r6, #4]
    1cd4:	0022      	movs	r2, r4
    1cd6:	9802      	ldr	r0, [sp, #8]
    1cd8:	f00f fbcf 	bl	1147a <memcpy>
    1cdc:	9b02      	ldr	r3, [sp, #8]
    1cde:	191b      	adds	r3, r3, r4
    1ce0:	9302      	str	r3, [sp, #8]
    1ce2:	e7a9      	b.n	1c38 <attsProcReadMultReq+0x28>
    1ce4:	2411      	movs	r4, #17
    1ce6:	9003      	str	r0, [sp, #12]
    1ce8:	8b38      	ldrh	r0, [r7, #24]
    1cea:	0023      	movs	r3, r4
    1cec:	9a03      	ldr	r2, [sp, #12]
    1cee:	210e      	movs	r1, #14
    1cf0:	f7ff fa62 	bl	11b8 <attsErrRsp>
    1cf4:	e00f      	b.n	1d16 <attsProcReadMultReq+0x106>
    1cf6:	002a      	movs	r2, r5
    1cf8:	9b02      	ldr	r3, [sp, #8]
    1cfa:	3208      	adds	r2, #8
    1cfc:	1a9a      	subs	r2, r3, r2
    1cfe:	b292      	uxth	r2, r2
    1d00:	8b39      	ldrh	r1, [r7, #24]
    1d02:	002b      	movs	r3, r5
    1d04:	2004      	movs	r0, #4
    1d06:	f001 ff99 	bl	3c3c <L2cDataReq>
    1d0a:	e004      	b.n	1d16 <attsProcReadMultReq+0x106>
    1d0c:	2401      	movs	r4, #1
    1d0e:	0028      	movs	r0, r5
    1d10:	f009 f8ae 	bl	ae70 <WsfMsgFree>
    1d14:	e7e8      	b.n	1ce8 <attsProcReadMultReq+0xd8>
    1d16:	b009      	add	sp, #36	; 0x24
    1d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	10001578 	.word	0x10001578

00001d20 <attsProcReadGroupTypeReq>:
    1d20:	2300      	movs	r3, #0
    1d22:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d24:	b08f      	sub	sp, #60	; 0x3c
    1d26:	9002      	str	r0, [sp, #8]
    1d28:	a80b      	add	r0, sp, #44	; 0x2c
    1d2a:	7003      	strb	r3, [r0, #0]
    1d2c:	3328      	adds	r3, #40	; 0x28
    1d2e:	7043      	strb	r3, [r0, #1]
    1d30:	7a93      	ldrb	r3, [r2, #10]
    1d32:	7a54      	ldrb	r4, [r2, #9]
    1d34:	021b      	lsls	r3, r3, #8
    1d36:	18e3      	adds	r3, r4, r3
    1d38:	b29b      	uxth	r3, r3
    1d3a:	3905      	subs	r1, #5
    1d3c:	9303      	str	r3, [sp, #12]
    1d3e:	b2cb      	uxtb	r3, r1
    1d40:	9304      	str	r3, [sp, #16]
    1d42:	2b02      	cmp	r3, #2
    1d44:	d003      	beq.n	1d4e <attsProcReadGroupTypeReq+0x2e>
    1d46:	2704      	movs	r7, #4
    1d48:	2b10      	cmp	r3, #16
    1d4a:	d000      	beq.n	1d4e <attsProcReadGroupTypeReq+0x2e>
    1d4c:	e0b4      	b.n	1eb8 <attsProcReadGroupTypeReq+0x198>
    1d4e:	9b03      	ldr	r3, [sp, #12]
    1d50:	2b00      	cmp	r3, #0
    1d52:	d100      	bne.n	1d56 <attsProcReadGroupTypeReq+0x36>
    1d54:	e0af      	b.n	1eb6 <attsProcReadGroupTypeReq+0x196>
    1d56:	7b13      	ldrb	r3, [r2, #12]
    1d58:	7ad1      	ldrb	r1, [r2, #11]
    1d5a:	021b      	lsls	r3, r3, #8
    1d5c:	18cb      	adds	r3, r1, r3
    1d5e:	b29b      	uxth	r3, r3
    1d60:	9305      	str	r3, [sp, #20]
    1d62:	9905      	ldr	r1, [sp, #20]
    1d64:	9b03      	ldr	r3, [sp, #12]
    1d66:	2701      	movs	r7, #1
    1d68:	428b      	cmp	r3, r1
    1d6a:	d900      	bls.n	1d6e <attsProcReadGroupTypeReq+0x4e>
    1d6c:	e0a4      	b.n	1eb8 <attsProcReadGroupTypeReq+0x198>
    1d6e:	320d      	adds	r2, #13
    1d70:	9904      	ldr	r1, [sp, #16]
    1d72:	9207      	str	r2, [sp, #28]
    1d74:	f7ff fb55 	bl	1422 <attsUuid16Cmp>
    1d78:	2800      	cmp	r0, #0
    1d7a:	d100      	bne.n	1d7e <attsProcReadGroupTypeReq+0x5e>
    1d7c:	e0a7      	b.n	1ece <attsProcReadGroupTypeReq+0x1ae>
    1d7e:	ab0d      	add	r3, sp, #52	; 0x34
    1d80:	9301      	str	r3, [sp, #4]
    1d82:	ab0c      	add	r3, sp, #48	; 0x30
    1d84:	9300      	str	r3, [sp, #0]
    1d86:	9a04      	ldr	r2, [sp, #16]
    1d88:	9b07      	ldr	r3, [sp, #28]
    1d8a:	9905      	ldr	r1, [sp, #20]
    1d8c:	9803      	ldr	r0, [sp, #12]
    1d8e:	f7ff fccf 	bl	1730 <attsFindUuidInRange>
    1d92:	1e06      	subs	r6, r0, #0
    1d94:	d100      	bne.n	1d98 <attsProcReadGroupTypeReq+0x78>
    1d96:	e07b      	b.n	1e90 <attsProcReadGroupTypeReq+0x170>
    1d98:	9a02      	ldr	r2, [sp, #8]
    1d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d9c:	7f10      	ldrb	r0, [r2, #28]
    1d9e:	0039      	movs	r1, r7
    1da0:	7bdb      	ldrb	r3, [r3, #15]
    1da2:	0032      	movs	r2, r6
    1da4:	f7ff fb80 	bl	14a8 <attsPermissions>
    1da8:	1e07      	subs	r7, r0, #0
    1daa:	d16b      	bne.n	1e84 <attsProcReadGroupTypeReq+0x164>
    1dac:	9b02      	ldr	r3, [sp, #8]
    1dae:	8b58      	ldrh	r0, [r3, #26]
    1db0:	3008      	adds	r0, #8
    1db2:	b280      	uxth	r0, r0
    1db4:	f7fe fa3a 	bl	22c <attMsgAlloc>
    1db8:	2311      	movs	r3, #17
    1dba:	1e05      	subs	r5, r0, #0
    1dbc:	d065      	beq.n	1e8a <attsProcReadGroupTypeReq+0x16a>
    1dbe:	7203      	strb	r3, [r0, #8]
    1dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dc2:	689a      	ldr	r2, [r3, #8]
    1dc4:	9b02      	ldr	r3, [sp, #8]
    1dc6:	8814      	ldrh	r4, [r2, #0]
    1dc8:	8b5b      	ldrh	r3, [r3, #26]
    1dca:	3b06      	subs	r3, #6
    1dcc:	429c      	cmp	r4, r3
    1dce:	d900      	bls.n	1dd2 <attsProcReadGroupTypeReq+0xb2>
    1dd0:	001c      	movs	r4, r3
    1dd2:	b2e3      	uxtb	r3, r4
    1dd4:	9309      	str	r3, [sp, #36]	; 0x24
    1dd6:	3304      	adds	r3, #4
    1dd8:	726b      	strb	r3, [r5, #9]
    1dda:	0a33      	lsrs	r3, r6, #8
    1ddc:	72ae      	strb	r6, [r5, #10]
    1dde:	72eb      	strb	r3, [r5, #11]
    1de0:	0030      	movs	r0, r6
    1de2:	f7ff fcdf 	bl	17a4 <attsFindServiceGroupEnd>
    1de6:	0a03      	lsrs	r3, r0, #8
    1de8:	736b      	strb	r3, [r5, #13]
    1dea:	b2e3      	uxtb	r3, r4
    1dec:	002c      	movs	r4, r5
    1dee:	9306      	str	r3, [sp, #24]
    1df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1df2:	7328      	strb	r0, [r5, #12]
    1df4:	340e      	adds	r4, #14
    1df6:	6859      	ldr	r1, [r3, #4]
    1df8:	0006      	movs	r6, r0
    1dfa:	9a06      	ldr	r2, [sp, #24]
    1dfc:	0020      	movs	r0, r4
    1dfe:	f00f fb3c 	bl	1147a <memcpy>
    1e02:	9b06      	ldr	r3, [sp, #24]
    1e04:	18e4      	adds	r4, r4, r3
    1e06:	4b34      	ldr	r3, [pc, #208]	; (1ed8 <attsProcReadGroupTypeReq+0x1b8>)
    1e08:	429e      	cmp	r6, r3
    1e0a:	d044      	beq.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e0c:	3601      	adds	r6, #1
    1e0e:	9b05      	ldr	r3, [sp, #20]
    1e10:	b2b0      	uxth	r0, r6
    1e12:	4283      	cmp	r3, r0
    1e14:	d33f      	bcc.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e16:	ab0d      	add	r3, sp, #52	; 0x34
    1e18:	9301      	str	r3, [sp, #4]
    1e1a:	ab0c      	add	r3, sp, #48	; 0x30
    1e1c:	9300      	str	r3, [sp, #0]
    1e1e:	9a04      	ldr	r2, [sp, #16]
    1e20:	9b07      	ldr	r3, [sp, #28]
    1e22:	9905      	ldr	r1, [sp, #20]
    1e24:	f7ff fc84 	bl	1730 <attsFindUuidInRange>
    1e28:	1e06      	subs	r6, r0, #0
    1e2a:	d034      	beq.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e30:	689a      	ldr	r2, [r3, #8]
    1e32:	8812      	ldrh	r2, [r2, #0]
    1e34:	428a      	cmp	r2, r1
    1e36:	d12e      	bne.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e38:	9a02      	ldr	r2, [sp, #8]
    1e3a:	7bdb      	ldrb	r3, [r3, #15]
    1e3c:	7f10      	ldrb	r0, [r2, #28]
    1e3e:	2101      	movs	r1, #1
    1e40:	0032      	movs	r2, r6
    1e42:	f7ff fb31 	bl	14a8 <attsPermissions>
    1e46:	2800      	cmp	r0, #0
    1e48:	d125      	bne.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e4a:	9b06      	ldr	r3, [sp, #24]
    1e4c:	3304      	adds	r3, #4
    1e4e:	18e3      	adds	r3, r4, r3
    1e50:	9308      	str	r3, [sp, #32]
    1e52:	9b02      	ldr	r3, [sp, #8]
    1e54:	9a08      	ldr	r2, [sp, #32]
    1e56:	8b5b      	ldrh	r3, [r3, #26]
    1e58:	3308      	adds	r3, #8
    1e5a:	18eb      	adds	r3, r5, r3
    1e5c:	429a      	cmp	r2, r3
    1e5e:	d81a      	bhi.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e60:	0a33      	lsrs	r3, r6, #8
    1e62:	7026      	strb	r6, [r4, #0]
    1e64:	7063      	strb	r3, [r4, #1]
    1e66:	0030      	movs	r0, r6
    1e68:	f7ff fc9c 	bl	17a4 <attsFindServiceGroupEnd>
    1e6c:	0a03      	lsrs	r3, r0, #8
    1e6e:	70a0      	strb	r0, [r4, #2]
    1e70:	70e3      	strb	r3, [r4, #3]
    1e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e74:	0006      	movs	r6, r0
    1e76:	6859      	ldr	r1, [r3, #4]
    1e78:	1d20      	adds	r0, r4, #4
    1e7a:	9a06      	ldr	r2, [sp, #24]
    1e7c:	f00f fafd 	bl	1147a <memcpy>
    1e80:	9c08      	ldr	r4, [sp, #32]
    1e82:	e7c0      	b.n	1e06 <attsProcReadGroupTypeReq+0xe6>
    1e84:	9603      	str	r6, [sp, #12]
    1e86:	2400      	movs	r4, #0
    1e88:	e004      	b.n	1e94 <attsProcReadGroupTypeReq+0x174>
    1e8a:	001f      	movs	r7, r3
    1e8c:	0004      	movs	r4, r0
    1e8e:	e002      	b.n	1e96 <attsProcReadGroupTypeReq+0x176>
    1e90:	270a      	movs	r7, #10
    1e92:	0034      	movs	r4, r6
    1e94:	0025      	movs	r5, r4
    1e96:	9802      	ldr	r0, [sp, #8]
    1e98:	f7ff fa02 	bl	12a0 <attsDiscBusy>
    1e9c:	2f00      	cmp	r7, #0
    1e9e:	d10e      	bne.n	1ebe <attsProcReadGroupTypeReq+0x19e>
    1ea0:	002a      	movs	r2, r5
    1ea2:	9b02      	ldr	r3, [sp, #8]
    1ea4:	3208      	adds	r2, #8
    1ea6:	1aa2      	subs	r2, r4, r2
    1ea8:	8b19      	ldrh	r1, [r3, #24]
    1eaa:	b292      	uxth	r2, r2
    1eac:	002b      	movs	r3, r5
    1eae:	2004      	movs	r0, #4
    1eb0:	f001 fec4 	bl	3c3c <L2cDataReq>
    1eb4:	e00d      	b.n	1ed2 <attsProcReadGroupTypeReq+0x1b2>
    1eb6:	2701      	movs	r7, #1
    1eb8:	9802      	ldr	r0, [sp, #8]
    1eba:	f7ff f9f1 	bl	12a0 <attsDiscBusy>
    1ebe:	9b02      	ldr	r3, [sp, #8]
    1ec0:	9a03      	ldr	r2, [sp, #12]
    1ec2:	8b18      	ldrh	r0, [r3, #24]
    1ec4:	2110      	movs	r1, #16
    1ec6:	003b      	movs	r3, r7
    1ec8:	f7ff f976 	bl	11b8 <attsErrRsp>
    1ecc:	e001      	b.n	1ed2 <attsProcReadGroupTypeReq+0x1b2>
    1ece:	2710      	movs	r7, #16
    1ed0:	e7f2      	b.n	1eb8 <attsProcReadGroupTypeReq+0x198>
    1ed2:	b00f      	add	sp, #60	; 0x3c
    1ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	0000ffff 	.word	0x0000ffff

00001edc <attsProcWrite>:
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	7a13      	ldrb	r3, [r2, #8]
    1ee0:	b089      	sub	sp, #36	; 0x24
    1ee2:	7a94      	ldrb	r4, [r2, #10]
    1ee4:	9305      	str	r3, [sp, #20]
    1ee6:	7a53      	ldrb	r3, [r2, #9]
    1ee8:	0224      	lsls	r4, r4, #8
    1eea:	191c      	adds	r4, r3, r4
    1eec:	b2a4      	uxth	r4, r4
    1eee:	9004      	str	r0, [sp, #16]
    1ef0:	000d      	movs	r5, r1
    1ef2:	0020      	movs	r0, r4
    1ef4:	a907      	add	r1, sp, #28
    1ef6:	0017      	movs	r7, r2
    1ef8:	f7ff faa6 	bl	1448 <attsFindByHandle>
    1efc:	1e06      	subs	r6, r0, #0
    1efe:	d050      	beq.n	1fa2 <attsProcWrite+0xc6>
    1f00:	9a04      	ldr	r2, [sp, #16]
    1f02:	7bc3      	ldrb	r3, [r0, #15]
    1f04:	2110      	movs	r1, #16
    1f06:	7f10      	ldrb	r0, [r2, #28]
    1f08:	0022      	movs	r2, r4
    1f0a:	f7ff facd 	bl	14a8 <attsPermissions>
    1f0e:	2800      	cmp	r0, #0
    1f10:	d14a      	bne.n	1fa8 <attsProcWrite+0xcc>
    1f12:	7bb2      	ldrb	r2, [r6, #14]
    1f14:	3d03      	subs	r5, #3
    1f16:	b2ad      	uxth	r5, r5
    1f18:	89b3      	ldrh	r3, [r6, #12]
    1f1a:	0711      	lsls	r1, r2, #28
    1f1c:	d403      	bmi.n	1f26 <attsProcWrite+0x4a>
    1f1e:	300d      	adds	r0, #13
    1f20:	42ab      	cmp	r3, r5
    1f22:	d141      	bne.n	1fa8 <attsProcWrite+0xcc>
    1f24:	e001      	b.n	1f2a <attsProcWrite+0x4e>
    1f26:	42ab      	cmp	r3, r5
    1f28:	d33d      	bcc.n	1fa6 <attsProcWrite+0xca>
    1f2a:	003b      	movs	r3, r7
    1f2c:	330b      	adds	r3, #11
    1f2e:	0791      	lsls	r1, r2, #30
    1f30:	d50d      	bpl.n	1f4e <attsProcWrite+0x72>
    1f32:	9907      	ldr	r1, [sp, #28]
    1f34:	68cf      	ldr	r7, [r1, #12]
    1f36:	2f00      	cmp	r7, #0
    1f38:	d009      	beq.n	1f4e <attsProcWrite+0x72>
    1f3a:	9a04      	ldr	r2, [sp, #16]
    1f3c:	0021      	movs	r1, r4
    1f3e:	7f10      	ldrb	r0, [r2, #28]
    1f40:	9301      	str	r3, [sp, #4]
    1f42:	9602      	str	r6, [sp, #8]
    1f44:	9500      	str	r5, [sp, #0]
    1f46:	2300      	movs	r3, #0
    1f48:	9a05      	ldr	r2, [sp, #20]
    1f4a:	47b8      	blx	r7
    1f4c:	e016      	b.n	1f7c <attsProcWrite+0xa0>
    1f4e:	0692      	lsls	r2, r2, #26
    1f50:	d509      	bpl.n	1f66 <attsProcWrite+0x8a>
    1f52:	4a1c      	ldr	r2, [pc, #112]	; (1fc4 <attsProcWrite+0xe8>)
    1f54:	6957      	ldr	r7, [r2, #20]
    1f56:	2f00      	cmp	r7, #0
    1f58:	d005      	beq.n	1f66 <attsProcWrite+0x8a>
    1f5a:	9a04      	ldr	r2, [sp, #16]
    1f5c:	2109      	movs	r1, #9
    1f5e:	7f10      	ldrb	r0, [r2, #28]
    1f60:	0022      	movs	r2, r4
    1f62:	47b8      	blx	r7
    1f64:	e00a      	b.n	1f7c <attsProcWrite+0xa0>
    1f66:	0019      	movs	r1, r3
    1f68:	002a      	movs	r2, r5
    1f6a:	6870      	ldr	r0, [r6, #4]
    1f6c:	f00f fa85 	bl	1147a <memcpy>
    1f70:	7bb3      	ldrb	r3, [r6, #14]
    1f72:	071b      	lsls	r3, r3, #28
    1f74:	d504      	bpl.n	1f80 <attsProcWrite+0xa4>
    1f76:	68b3      	ldr	r3, [r6, #8]
    1f78:	801d      	strh	r5, [r3, #0]
    1f7a:	e001      	b.n	1f80 <attsProcWrite+0xa4>
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d113      	bne.n	1fa8 <attsProcWrite+0xcc>
    1f80:	9b05      	ldr	r3, [sp, #20]
    1f82:	2b12      	cmp	r3, #18
    1f84:	d11b      	bne.n	1fbe <attsProcWrite+0xe2>
    1f86:	2009      	movs	r0, #9
    1f88:	f7fe f950 	bl	22c <attMsgAlloc>
    1f8c:	1e03      	subs	r3, r0, #0
    1f8e:	d016      	beq.n	1fbe <attsProcWrite+0xe2>
    1f90:	2213      	movs	r2, #19
    1f92:	7202      	strb	r2, [r0, #8]
    1f94:	9a04      	ldr	r2, [sp, #16]
    1f96:	2004      	movs	r0, #4
    1f98:	8b11      	ldrh	r1, [r2, #24]
    1f9a:	2201      	movs	r2, #1
    1f9c:	f001 fe4e 	bl	3c3c <L2cDataReq>
    1fa0:	e00d      	b.n	1fbe <attsProcWrite+0xe2>
    1fa2:	2001      	movs	r0, #1
    1fa4:	e000      	b.n	1fa8 <attsProcWrite+0xcc>
    1fa6:	200d      	movs	r0, #13
    1fa8:	9b05      	ldr	r3, [sp, #20]
    1faa:	2b12      	cmp	r3, #18
    1fac:	d107      	bne.n	1fbe <attsProcWrite+0xe2>
    1fae:	9b04      	ldr	r3, [sp, #16]
    1fb0:	0022      	movs	r2, r4
    1fb2:	8b1d      	ldrh	r5, [r3, #24]
    1fb4:	9905      	ldr	r1, [sp, #20]
    1fb6:	0003      	movs	r3, r0
    1fb8:	0028      	movs	r0, r5
    1fba:	f7ff f8fd 	bl	11b8 <attsErrRsp>
    1fbe:	b009      	add	sp, #36	; 0x24
    1fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	10001578 	.word	0x10001578

00001fc8 <attsProcPrepWriteReq>:
    1fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fca:	0017      	movs	r7, r2
    1fcc:	7a93      	ldrb	r3, [r2, #10]
    1fce:	7a52      	ldrb	r2, [r2, #9]
    1fd0:	021b      	lsls	r3, r3, #8
    1fd2:	18d3      	adds	r3, r2, r3
    1fd4:	b08b      	sub	sp, #44	; 0x2c
    1fd6:	b29b      	uxth	r3, r3
    1fd8:	9005      	str	r0, [sp, #20]
    1fda:	9107      	str	r1, [sp, #28]
    1fdc:	0018      	movs	r0, r3
    1fde:	a909      	add	r1, sp, #36	; 0x24
    1fe0:	9304      	str	r3, [sp, #16]
    1fe2:	7afe      	ldrb	r6, [r7, #11]
    1fe4:	7b3c      	ldrb	r4, [r7, #12]
    1fe6:	f7ff fa2f 	bl	1448 <attsFindByHandle>
    1fea:	1e05      	subs	r5, r0, #0
    1fec:	d074      	beq.n	20d8 <attsProcPrepWriteReq+0x110>
    1fee:	9a05      	ldr	r2, [sp, #20]
    1ff0:	7bc3      	ldrb	r3, [r0, #15]
    1ff2:	2110      	movs	r1, #16
    1ff4:	7f10      	ldrb	r0, [r2, #28]
    1ff6:	9a04      	ldr	r2, [sp, #16]
    1ff8:	f7ff fa56 	bl	14a8 <attsPermissions>
    1ffc:	1e03      	subs	r3, r0, #0
    1ffe:	d170      	bne.n	20e2 <attsProcPrepWriteReq+0x11a>
    2000:	0224      	lsls	r4, r4, #8
    2002:	19a6      	adds	r6, r4, r6
    2004:	b2b3      	uxth	r3, r6
    2006:	9306      	str	r3, [sp, #24]
    2008:	9a06      	ldr	r2, [sp, #24]
    200a:	7bab      	ldrb	r3, [r5, #14]
    200c:	2a00      	cmp	r2, #0
    200e:	d001      	beq.n	2014 <attsProcPrepWriteReq+0x4c>
    2010:	06da      	lsls	r2, r3, #27
    2012:	d563      	bpl.n	20dc <attsProcPrepWriteReq+0x114>
    2014:	9a07      	ldr	r2, [sp, #28]
    2016:	1f54      	subs	r4, r2, #5
    2018:	b2a4      	uxth	r4, r4
    201a:	071b      	lsls	r3, r3, #28
    201c:	d403      	bmi.n	2026 <attsProcPrepWriteReq+0x5e>
    201e:	89aa      	ldrh	r2, [r5, #12]
    2020:	230d      	movs	r3, #13
    2022:	42a2      	cmp	r2, r4
    2024:	d15d      	bne.n	20e2 <attsProcPrepWriteReq+0x11a>
    2026:	9805      	ldr	r0, [sp, #20]
    2028:	f009 f821 	bl	b06e <WsfQueueCount>
    202c:	4b31      	ldr	r3, [pc, #196]	; (20f4 <attsProcPrepWriteReq+0x12c>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	79da      	ldrb	r2, [r3, #7]
    2032:	2309      	movs	r3, #9
    2034:	4282      	cmp	r2, r0
    2036:	d954      	bls.n	20e2 <attsProcPrepWriteReq+0x11a>
    2038:	9b07      	ldr	r3, [sp, #28]
    203a:	1d98      	adds	r0, r3, #6
    203c:	b280      	uxth	r0, r0
    203e:	f008 fe71 	bl	ad24 <WsfBufAlloc>
    2042:	1e06      	subs	r6, r0, #0
    2044:	d04c      	beq.n	20e0 <attsProcPrepWriteReq+0x118>
    2046:	7bab      	ldrb	r3, [r5, #14]
    2048:	370d      	adds	r7, #13
    204a:	079b      	lsls	r3, r3, #30
    204c:	d432      	bmi.n	20b4 <attsProcPrepWriteReq+0xec>
    204e:	466b      	mov	r3, sp
    2050:	8a1b      	ldrh	r3, [r3, #16]
    2052:	0030      	movs	r0, r6
    2054:	80f3      	strh	r3, [r6, #6]
    2056:	466b      	mov	r3, sp
    2058:	8b1b      	ldrh	r3, [r3, #24]
    205a:	0022      	movs	r2, r4
    205c:	8133      	strh	r3, [r6, #8]
    205e:	0039      	movs	r1, r7
    2060:	80b4      	strh	r4, [r6, #4]
    2062:	300a      	adds	r0, #10
    2064:	f00f fa09 	bl	1147a <memcpy>
    2068:	0031      	movs	r1, r6
    206a:	9805      	ldr	r0, [sp, #20]
    206c:	f008 ff52 	bl	af14 <WsfQueueEnq>
    2070:	9807      	ldr	r0, [sp, #28]
    2072:	3008      	adds	r0, #8
    2074:	b280      	uxth	r0, r0
    2076:	f7fe f8d9 	bl	22c <attMsgAlloc>
    207a:	1e05      	subs	r5, r0, #0
    207c:	d037      	beq.n	20ee <attsProcPrepWriteReq+0x126>
    207e:	2317      	movs	r3, #23
    2080:	7203      	strb	r3, [r0, #8]
    2082:	466b      	mov	r3, sp
    2084:	7c1b      	ldrb	r3, [r3, #16]
    2086:	0022      	movs	r2, r4
    2088:	7243      	strb	r3, [r0, #9]
    208a:	9b04      	ldr	r3, [sp, #16]
    208c:	0039      	movs	r1, r7
    208e:	0a1b      	lsrs	r3, r3, #8
    2090:	7283      	strb	r3, [r0, #10]
    2092:	466b      	mov	r3, sp
    2094:	7e1b      	ldrb	r3, [r3, #24]
    2096:	72c3      	strb	r3, [r0, #11]
    2098:	9b06      	ldr	r3, [sp, #24]
    209a:	0a1b      	lsrs	r3, r3, #8
    209c:	7303      	strb	r3, [r0, #12]
    209e:	300d      	adds	r0, #13
    20a0:	f00f f9eb 	bl	1147a <memcpy>
    20a4:	9b05      	ldr	r3, [sp, #20]
    20a6:	9a07      	ldr	r2, [sp, #28]
    20a8:	8b19      	ldrh	r1, [r3, #24]
    20aa:	2004      	movs	r0, #4
    20ac:	002b      	movs	r3, r5
    20ae:	f001 fdc5 	bl	3c3c <L2cDataReq>
    20b2:	e01c      	b.n	20ee <attsProcPrepWriteReq+0x126>
    20b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20b6:	68db      	ldr	r3, [r3, #12]
    20b8:	469c      	mov	ip, r3
    20ba:	2b00      	cmp	r3, #0
    20bc:	d0c7      	beq.n	204e <attsProcPrepWriteReq+0x86>
    20be:	9b05      	ldr	r3, [sp, #20]
    20c0:	2216      	movs	r2, #22
    20c2:	7f18      	ldrb	r0, [r3, #28]
    20c4:	9904      	ldr	r1, [sp, #16]
    20c6:	9502      	str	r5, [sp, #8]
    20c8:	2300      	movs	r3, #0
    20ca:	9701      	str	r7, [sp, #4]
    20cc:	9400      	str	r4, [sp, #0]
    20ce:	4665      	mov	r5, ip
    20d0:	47a8      	blx	r5
    20d2:	1e03      	subs	r3, r0, #0
    20d4:	d0bb      	beq.n	204e <attsProcPrepWriteReq+0x86>
    20d6:	e004      	b.n	20e2 <attsProcPrepWriteReq+0x11a>
    20d8:	2301      	movs	r3, #1
    20da:	e002      	b.n	20e2 <attsProcPrepWriteReq+0x11a>
    20dc:	230b      	movs	r3, #11
    20de:	e000      	b.n	20e2 <attsProcPrepWriteReq+0x11a>
    20e0:	2311      	movs	r3, #17
    20e2:	9a05      	ldr	r2, [sp, #20]
    20e4:	2116      	movs	r1, #22
    20e6:	8b10      	ldrh	r0, [r2, #24]
    20e8:	9a04      	ldr	r2, [sp, #16]
    20ea:	f7ff f865 	bl	11b8 <attsErrRsp>
    20ee:	b00b      	add	sp, #44	; 0x2c
    20f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	10001088 	.word	0x10001088

000020f8 <attsProcExecWriteReq>:
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	7a53      	ldrb	r3, [r2, #9]
    20fc:	b087      	sub	sp, #28
    20fe:	0006      	movs	r6, r0
    2100:	2b00      	cmp	r3, #0
    2102:	d102      	bne.n	210a <attsProcExecWriteReq+0x12>
    2104:	f7ff f8a6 	bl	1254 <attsClearPrepWrites>
    2108:	e068      	b.n	21dc <attsProcExecWriteReq+0xe4>
    210a:	2404      	movs	r4, #4
    210c:	2b01      	cmp	r3, #1
    210e:	d15e      	bne.n	21ce <attsProcExecWriteReq+0xd6>
    2110:	6804      	ldr	r4, [r0, #0]
    2112:	2c00      	cmp	r4, #0
    2114:	d032      	beq.n	217c <attsProcExecWriteReq+0x84>
    2116:	88e0      	ldrh	r0, [r4, #6]
    2118:	a904      	add	r1, sp, #16
    211a:	f7ff f995 	bl	1448 <attsFindByHandle>
    211e:	2800      	cmp	r0, #0
    2120:	d007      	beq.n	2132 <attsProcExecWriteReq+0x3a>
    2122:	8923      	ldrh	r3, [r4, #8]
    2124:	8982      	ldrh	r2, [r0, #12]
    2126:	4293      	cmp	r3, r2
    2128:	d865      	bhi.n	21f6 <attsProcExecWriteReq+0xfe>
    212a:	88a1      	ldrh	r1, [r4, #4]
    212c:	18cb      	adds	r3, r1, r3
    212e:	4293      	cmp	r3, r2
    2130:	dc63      	bgt.n	21fa <attsProcExecWriteReq+0x102>
    2132:	6824      	ldr	r4, [r4, #0]
    2134:	e7ed      	b.n	2112 <attsProcExecWriteReq+0x1a>
    2136:	88e8      	ldrh	r0, [r5, #6]
    2138:	a905      	add	r1, sp, #20
    213a:	f7ff f985 	bl	1448 <attsFindByHandle>
    213e:	1e07      	subs	r7, r0, #0
    2140:	d03e      	beq.n	21c0 <attsProcExecWriteReq+0xc8>
    2142:	2210      	movs	r2, #16
    2144:	7bc3      	ldrb	r3, [r0, #15]
    2146:	2403      	movs	r4, #3
    2148:	4213      	tst	r3, r2
    214a:	d03a      	beq.n	21c2 <attsProcExecWriteReq+0xca>
    214c:	002b      	movs	r3, r5
    214e:	7b82      	ldrb	r2, [r0, #14]
    2150:	330a      	adds	r3, #10
    2152:	0791      	lsls	r1, r2, #30
    2154:	d518      	bpl.n	2188 <attsProcExecWriteReq+0x90>
    2156:	9905      	ldr	r1, [sp, #20]
    2158:	68cc      	ldr	r4, [r1, #12]
    215a:	2c00      	cmp	r4, #0
    215c:	d014      	beq.n	2188 <attsProcExecWriteReq+0x90>
    215e:	892a      	ldrh	r2, [r5, #8]
    2160:	88e9      	ldrh	r1, [r5, #6]
    2162:	9702      	str	r7, [sp, #8]
    2164:	9301      	str	r3, [sp, #4]
    2166:	88ab      	ldrh	r3, [r5, #4]
    2168:	7f30      	ldrb	r0, [r6, #28]
    216a:	9300      	str	r3, [sp, #0]
    216c:	0013      	movs	r3, r2
    216e:	2218      	movs	r2, #24
    2170:	47a0      	blx	r4
    2172:	1e04      	subs	r4, r0, #0
    2174:	d125      	bne.n	21c2 <attsProcExecWriteReq+0xca>
    2176:	0028      	movs	r0, r5
    2178:	f008 fe14 	bl	ada4 <WsfBufFree>
    217c:	0030      	movs	r0, r6
    217e:	f008 feeb 	bl	af58 <WsfQueueDeq>
    2182:	1e05      	subs	r5, r0, #0
    2184:	d1d7      	bne.n	2136 <attsProcExecWriteReq+0x3e>
    2186:	e020      	b.n	21ca <attsProcExecWriteReq+0xd2>
    2188:	0692      	lsls	r2, r2, #26
    218a:	d508      	bpl.n	219e <attsProcExecWriteReq+0xa6>
    218c:	4a1e      	ldr	r2, [pc, #120]	; (2208 <attsProcExecWriteReq+0x110>)
    218e:	6954      	ldr	r4, [r2, #20]
    2190:	2c00      	cmp	r4, #0
    2192:	d004      	beq.n	219e <attsProcExecWriteReq+0xa6>
    2194:	88ea      	ldrh	r2, [r5, #6]
    2196:	7f30      	ldrb	r0, [r6, #28]
    2198:	2109      	movs	r1, #9
    219a:	47a0      	blx	r4
    219c:	e7e9      	b.n	2172 <attsProcExecWriteReq+0x7a>
    219e:	687a      	ldr	r2, [r7, #4]
    21a0:	8928      	ldrh	r0, [r5, #8]
    21a2:	0019      	movs	r1, r3
    21a4:	1810      	adds	r0, r2, r0
    21a6:	88aa      	ldrh	r2, [r5, #4]
    21a8:	f00f f967 	bl	1147a <memcpy>
    21ac:	7bbb      	ldrb	r3, [r7, #14]
    21ae:	2400      	movs	r4, #0
    21b0:	071b      	lsls	r3, r3, #28
    21b2:	d5e0      	bpl.n	2176 <attsProcExecWriteReq+0x7e>
    21b4:	88a9      	ldrh	r1, [r5, #4]
    21b6:	892b      	ldrh	r3, [r5, #8]
    21b8:	68ba      	ldr	r2, [r7, #8]
    21ba:	18cb      	adds	r3, r1, r3
    21bc:	8013      	strh	r3, [r2, #0]
    21be:	e7da      	b.n	2176 <attsProcExecWriteReq+0x7e>
    21c0:	240e      	movs	r4, #14
    21c2:	0030      	movs	r0, r6
    21c4:	f7ff f846 	bl	1254 <attsClearPrepWrites>
    21c8:	e7d5      	b.n	2176 <attsProcExecWriteReq+0x7e>
    21ca:	2c00      	cmp	r4, #0
    21cc:	d006      	beq.n	21dc <attsProcExecWriteReq+0xe4>
    21ce:	8b30      	ldrh	r0, [r6, #24]
    21d0:	0023      	movs	r3, r4
    21d2:	2200      	movs	r2, #0
    21d4:	2118      	movs	r1, #24
    21d6:	f7fe ffef 	bl	11b8 <attsErrRsp>
    21da:	e013      	b.n	2204 <attsProcExecWriteReq+0x10c>
    21dc:	2009      	movs	r0, #9
    21de:	f7fe f825 	bl	22c <attMsgAlloc>
    21e2:	1e03      	subs	r3, r0, #0
    21e4:	d00e      	beq.n	2204 <attsProcExecWriteReq+0x10c>
    21e6:	2219      	movs	r2, #25
    21e8:	7202      	strb	r2, [r0, #8]
    21ea:	8b31      	ldrh	r1, [r6, #24]
    21ec:	3a18      	subs	r2, #24
    21ee:	2004      	movs	r0, #4
    21f0:	f001 fd24 	bl	3c3c <L2cDataReq>
    21f4:	e006      	b.n	2204 <attsProcExecWriteReq+0x10c>
    21f6:	2407      	movs	r4, #7
    21f8:	e000      	b.n	21fc <attsProcExecWriteReq+0x104>
    21fa:	240d      	movs	r4, #13
    21fc:	0030      	movs	r0, r6
    21fe:	f7ff f829 	bl	1254 <attsClearPrepWrites>
    2202:	e7e4      	b.n	21ce <attsProcExecWriteReq+0xd6>
    2204:	b007      	add	sp, #28
    2206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2208:	10001578 	.word	0x10001578

0000220c <dmAdvCbInit>:
    220c:	0002      	movs	r2, r0
    220e:	23ff      	movs	r3, #255	; 0xff
    2210:	b510      	push	{r4, lr}
    2212:	4c0a      	ldr	r4, [pc, #40]	; (223c <dmAdvCbInit+0x30>)
    2214:	3208      	adds	r2, #8
    2216:	1821      	adds	r1, r4, r0
    2218:	750b      	strb	r3, [r1, #20]
    221a:	0053      	lsls	r3, r2, #1
    221c:	22c8      	movs	r2, #200	; 0xc8
    221e:	00d2      	lsls	r2, r2, #3
    2220:	531a      	strh	r2, [r3, r4]
    2222:	3241      	adds	r2, #65	; 0x41
    2224:	18e3      	adds	r3, r4, r3
    2226:	32ff      	adds	r2, #255	; 0xff
    2228:	805a      	strh	r2, [r3, #2]
    222a:	2307      	movs	r3, #7
    222c:	754b      	strb	r3, [r1, #21]
    222e:	4b04      	ldr	r3, [pc, #16]	; (2240 <dmAdvCbInit+0x34>)
    2230:	1818      	adds	r0, r3, r0
    2232:	2300      	movs	r3, #0
    2234:	7443      	strb	r3, [r0, #17]
    2236:	75cb      	strb	r3, [r1, #23]
    2238:	bd10      	pop	{r4, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	10001590 	.word	0x10001590
    2240:	10001740 	.word	0x10001740

00002244 <dmAdvInit>:
    2244:	b510      	push	{r4, lr}
    2246:	2000      	movs	r0, #0
    2248:	f7ff ffe0 	bl	220c <dmAdvCbInit>
    224c:	4b03      	ldr	r3, [pc, #12]	; (225c <dmAdvInit+0x18>)
    224e:	4a04      	ldr	r2, [pc, #16]	; (2260 <dmAdvInit+0x1c>)
    2250:	7b19      	ldrb	r1, [r3, #12]
    2252:	7211      	strb	r1, [r2, #8]
    2254:	2200      	movs	r2, #0
    2256:	739a      	strb	r2, [r3, #14]
    2258:	bd10      	pop	{r4, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	10001740 	.word	0x10001740
    2260:	10001590 	.word	0x10001590

00002264 <DmAdvConfig>:
    2264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2266:	0006      	movs	r6, r0
    2268:	200e      	movs	r0, #14
    226a:	000f      	movs	r7, r1
    226c:	0015      	movs	r5, r2
    226e:	9301      	str	r3, [sp, #4]
    2270:	f008 fde7 	bl	ae42 <WsfMsgAlloc>
    2274:	1e04      	subs	r4, r0, #0
    2276:	d00d      	beq.n	2294 <DmAdvConfig+0x30>
    2278:	2300      	movs	r3, #0
    227a:	7147      	strb	r7, [r0, #5]
    227c:	7083      	strb	r3, [r0, #2]
    227e:	7106      	strb	r6, [r0, #4]
    2280:	7185      	strb	r5, [r0, #6]
    2282:	9901      	ldr	r1, [sp, #4]
    2284:	3007      	adds	r0, #7
    2286:	f00a ffbf 	bl	d208 <BdaCpy>
    228a:	4b03      	ldr	r3, [pc, #12]	; (2298 <DmAdvConfig+0x34>)
    228c:	0021      	movs	r1, r4
    228e:	7b18      	ldrb	r0, [r3, #12]
    2290:	f008 fdfb 	bl	ae8a <WsfMsgSend>
    2294:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	10001740 	.word	0x10001740

0000229c <DmAdvSetData>:
    229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    229e:	0007      	movs	r7, r0
    22a0:	200c      	movs	r0, #12
    22a2:	000e      	movs	r6, r1
    22a4:	0015      	movs	r5, r2
    22a6:	001c      	movs	r4, r3
    22a8:	f008 fdcb 	bl	ae42 <WsfMsgAlloc>
    22ac:	1e01      	subs	r1, r0, #0
    22ae:	d00b      	beq.n	22c8 <DmAdvSetData+0x2c>
    22b0:	2301      	movs	r3, #1
    22b2:	7083      	strb	r3, [r0, #2]
    22b4:	9b06      	ldr	r3, [sp, #24]
    22b6:	7107      	strb	r7, [r0, #4]
    22b8:	6083      	str	r3, [r0, #8]
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <DmAdvSetData+0x30>)
    22bc:	7146      	strb	r6, [r0, #5]
    22be:	7185      	strb	r5, [r0, #6]
    22c0:	71c4      	strb	r4, [r0, #7]
    22c2:	7b18      	ldrb	r0, [r3, #12]
    22c4:	f008 fde1 	bl	ae8a <WsfMsgSend>
    22c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	10001740 	.word	0x10001740

000022d0 <DmAdvStart>:
    22d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22d2:	0004      	movs	r4, r0
    22d4:	200a      	movs	r0, #10
    22d6:	000f      	movs	r7, r1
    22d8:	0016      	movs	r6, r2
    22da:	001d      	movs	r5, r3
    22dc:	f008 fdb1 	bl	ae42 <WsfMsgAlloc>
    22e0:	1e01      	subs	r1, r0, #0
    22e2:	d00e      	beq.n	2302 <DmAdvStart+0x32>
    22e4:	2302      	movs	r3, #2
    22e6:	7104      	strb	r4, [r0, #4]
    22e8:	7083      	strb	r3, [r0, #2]
    22ea:	2c00      	cmp	r4, #0
    22ec:	d005      	beq.n	22fa <DmAdvStart+0x2a>
    22ee:	783b      	ldrb	r3, [r7, #0]
    22f0:	7143      	strb	r3, [r0, #5]
    22f2:	8833      	ldrh	r3, [r6, #0]
    22f4:	80c3      	strh	r3, [r0, #6]
    22f6:	782b      	ldrb	r3, [r5, #0]
    22f8:	7203      	strb	r3, [r0, #8]
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <DmAdvStart+0x34>)
    22fc:	7b18      	ldrb	r0, [r3, #12]
    22fe:	f008 fdc4 	bl	ae8a <WsfMsgSend>
    2302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2304:	10001740 	.word	0x10001740

00002308 <DmAdvStop>:
    2308:	b570      	push	{r4, r5, r6, lr}
    230a:	0004      	movs	r4, r0
    230c:	2006      	movs	r0, #6
    230e:	000d      	movs	r5, r1
    2310:	f008 fd97 	bl	ae42 <WsfMsgAlloc>
    2314:	1e01      	subs	r1, r0, #0
    2316:	d00f      	beq.n	2338 <DmAdvStop+0x30>
    2318:	2303      	movs	r3, #3
    231a:	7083      	strb	r3, [r0, #2]
    231c:	2300      	movs	r3, #0
    231e:	7104      	strb	r4, [r0, #4]
    2320:	b2da      	uxtb	r2, r3
    2322:	4294      	cmp	r4, r2
    2324:	d904      	bls.n	2330 <DmAdvStop+0x28>
    2326:	5ce8      	ldrb	r0, [r5, r3]
    2328:	18ca      	adds	r2, r1, r3
    232a:	7150      	strb	r0, [r2, #5]
    232c:	3301      	adds	r3, #1
    232e:	e7f7      	b.n	2320 <DmAdvStop+0x18>
    2330:	4b02      	ldr	r3, [pc, #8]	; (233c <DmAdvStop+0x34>)
    2332:	7b18      	ldrb	r0, [r3, #12]
    2334:	f008 fda9 	bl	ae8a <WsfMsgSend>
    2338:	bd70      	pop	{r4, r5, r6, pc}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	10001740 	.word	0x10001740

00002340 <DmAdvRemoveAdvSet>:
    2340:	b510      	push	{r4, lr}
    2342:	0004      	movs	r4, r0
    2344:	2006      	movs	r0, #6
    2346:	f008 fd7c 	bl	ae42 <WsfMsgAlloc>
    234a:	1e01      	subs	r1, r0, #0
    234c:	d006      	beq.n	235c <DmAdvRemoveAdvSet+0x1c>
    234e:	2304      	movs	r3, #4
    2350:	7083      	strb	r3, [r0, #2]
    2352:	4b03      	ldr	r3, [pc, #12]	; (2360 <DmAdvRemoveAdvSet+0x20>)
    2354:	7104      	strb	r4, [r0, #4]
    2356:	7b18      	ldrb	r0, [r3, #12]
    2358:	f008 fd97 	bl	ae8a <WsfMsgSend>
    235c:	bd10      	pop	{r4, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	10001740 	.word	0x10001740

00002364 <DmAdvClearAdvSets>:
    2364:	b510      	push	{r4, lr}
    2366:	2004      	movs	r0, #4
    2368:	f008 fd6b 	bl	ae42 <WsfMsgAlloc>
    236c:	1e01      	subs	r1, r0, #0
    236e:	d005      	beq.n	237c <DmAdvClearAdvSets+0x18>
    2370:	2305      	movs	r3, #5
    2372:	7083      	strb	r3, [r0, #2]
    2374:	4b02      	ldr	r3, [pc, #8]	; (2380 <DmAdvClearAdvSets+0x1c>)
    2376:	7b18      	ldrb	r0, [r3, #12]
    2378:	f008 fd87 	bl	ae8a <WsfMsgSend>
    237c:	bd10      	pop	{r4, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	10001740 	.word	0x10001740

00002384 <DmAdvSetInterval>:
    2384:	b570      	push	{r4, r5, r6, lr}
    2386:	0004      	movs	r4, r0
    2388:	000e      	movs	r6, r1
    238a:	0015      	movs	r5, r2
    238c:	3408      	adds	r4, #8
    238e:	f007 fe89 	bl	a0a4 <WsfTaskLock>
    2392:	4b04      	ldr	r3, [pc, #16]	; (23a4 <DmAdvSetInterval+0x20>)
    2394:	0060      	lsls	r0, r4, #1
    2396:	52c6      	strh	r6, [r0, r3]
    2398:	1818      	adds	r0, r3, r0
    239a:	8045      	strh	r5, [r0, #2]
    239c:	f007 fe88 	bl	a0b0 <WsfTaskUnlock>
    23a0:	bd70      	pop	{r4, r5, r6, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	10001590 	.word	0x10001590

000023a8 <DmAdvSetChannelMap>:
    23a8:	b570      	push	{r4, r5, r6, lr}
    23aa:	0004      	movs	r4, r0
    23ac:	000d      	movs	r5, r1
    23ae:	f007 fe79 	bl	a0a4 <WsfTaskLock>
    23b2:	4b03      	ldr	r3, [pc, #12]	; (23c0 <DmAdvSetChannelMap+0x18>)
    23b4:	191c      	adds	r4, r3, r4
    23b6:	7565      	strb	r5, [r4, #21]
    23b8:	f007 fe7a 	bl	a0b0 <WsfTaskUnlock>
    23bc:	bd70      	pop	{r4, r5, r6, pc}
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	10001590 	.word	0x10001590

000023c4 <DmAdvSetAddrType>:
    23c4:	b510      	push	{r4, lr}
    23c6:	0004      	movs	r4, r0
    23c8:	f007 fe6c 	bl	a0a4 <WsfTaskLock>
    23cc:	4b02      	ldr	r3, [pc, #8]	; (23d8 <DmAdvSetAddrType+0x14>)
    23ce:	739c      	strb	r4, [r3, #14]
    23d0:	f007 fe6e 	bl	a0b0 <WsfTaskUnlock>
    23d4:	bd10      	pop	{r4, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	10001740 	.word	0x10001740

000023dc <DmAdvSetAdValue>:
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	001e      	movs	r6, r3
    23e0:	b085      	sub	sp, #20
    23e2:	ab0a      	add	r3, sp, #40	; 0x28
    23e4:	cb80      	ldmia	r3!, {r7}
    23e6:	000c      	movs	r4, r1
    23e8:	881b      	ldrh	r3, [r3, #0]
    23ea:	9202      	str	r2, [sp, #8]
    23ec:	8831      	ldrh	r1, [r6, #0]
    23ee:	003a      	movs	r2, r7
    23f0:	9001      	str	r0, [sp, #4]
    23f2:	9303      	str	r3, [sp, #12]
    23f4:	f000 ff56 	bl	32a4 <DmFindAdType>
    23f8:	2800      	cmp	r0, #0
    23fa:	d01b      	beq.n	2434 <DmAdvSetAdValue+0x58>
    23fc:	7805      	ldrb	r5, [r0, #0]
    23fe:	1c63      	adds	r3, r4, #1
    2400:	42ab      	cmp	r3, r5
    2402:	d105      	bne.n	2410 <DmAdvSetAdValue+0x34>
    2404:	0022      	movs	r2, r4
    2406:	9902      	ldr	r1, [sp, #8]
    2408:	3002      	adds	r0, #2
    240a:	f00f f836 	bl	1147a <memcpy>
    240e:	e026      	b.n	245e <DmAdvSetAdValue+0x82>
    2410:	8832      	ldrh	r2, [r6, #0]
    2412:	b2ad      	uxth	r5, r5
    2414:	18d3      	adds	r3, r2, r3
    2416:	1b5b      	subs	r3, r3, r5
    2418:	9903      	ldr	r1, [sp, #12]
    241a:	b29b      	uxth	r3, r3
    241c:	428b      	cmp	r3, r1
    241e:	d809      	bhi.n	2434 <DmAdvSetAdValue+0x58>
    2420:	3501      	adds	r5, #1
    2422:	1941      	adds	r1, r0, r5
    2424:	1bcb      	subs	r3, r1, r7
    2426:	b2db      	uxtb	r3, r3
    2428:	1ad2      	subs	r2, r2, r3
    242a:	f00f f831 	bl	11490 <memmove>
    242e:	8833      	ldrh	r3, [r6, #0]
    2430:	1b5d      	subs	r5, r3, r5
    2432:	8035      	strh	r5, [r6, #0]
    2434:	8830      	ldrh	r0, [r6, #0]
    2436:	9a03      	ldr	r2, [sp, #12]
    2438:	1903      	adds	r3, r0, r4
    243a:	3301      	adds	r3, #1
    243c:	4293      	cmp	r3, r2
    243e:	da10      	bge.n	2462 <DmAdvSetAdValue+0x86>
    2440:	1838      	adds	r0, r7, r0
    2442:	1c63      	adds	r3, r4, #1
    2444:	7003      	strb	r3, [r0, #0]
    2446:	466b      	mov	r3, sp
    2448:	791b      	ldrb	r3, [r3, #4]
    244a:	0022      	movs	r2, r4
    244c:	7043      	strb	r3, [r0, #1]
    244e:	9902      	ldr	r1, [sp, #8]
    2450:	3002      	adds	r0, #2
    2452:	f00f f812 	bl	1147a <memcpy>
    2456:	8833      	ldrh	r3, [r6, #0]
    2458:	3402      	adds	r4, #2
    245a:	18e4      	adds	r4, r4, r3
    245c:	8034      	strh	r4, [r6, #0]
    245e:	2001      	movs	r0, #1
    2460:	e000      	b.n	2464 <DmAdvSetAdValue+0x88>
    2462:	2000      	movs	r0, #0
    2464:	b005      	add	sp, #20
    2466:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002468 <DmAdvSetName>:
    2468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    246a:	001f      	movs	r7, r3
    246c:	0005      	movs	r5, r0
    246e:	9101      	str	r1, [sp, #4]
    2470:	0014      	movs	r4, r2
    2472:	ab08      	add	r3, sp, #32
    2474:	8811      	ldrh	r1, [r2, #0]
    2476:	2009      	movs	r0, #9
    2478:	003a      	movs	r2, r7
    247a:	881e      	ldrh	r6, [r3, #0]
    247c:	f000 ff12 	bl	32a4 <DmFindAdType>
    2480:	2800      	cmp	r0, #0
    2482:	d106      	bne.n	2492 <DmAdvSetName+0x2a>
    2484:	8821      	ldrh	r1, [r4, #0]
    2486:	003a      	movs	r2, r7
    2488:	3008      	adds	r0, #8
    248a:	f000 ff0b 	bl	32a4 <DmFindAdType>
    248e:	2800      	cmp	r0, #0
    2490:	d00d      	beq.n	24ae <DmAdvSetName+0x46>
    2492:	7803      	ldrb	r3, [r0, #0]
    2494:	3301      	adds	r3, #1
    2496:	18c1      	adds	r1, r0, r3
    2498:	9300      	str	r3, [sp, #0]
    249a:	1bca      	subs	r2, r1, r7
    249c:	8823      	ldrh	r3, [r4, #0]
    249e:	b2d2      	uxtb	r2, r2
    24a0:	1a9a      	subs	r2, r3, r2
    24a2:	f00e fff5 	bl	11490 <memmove>
    24a6:	8823      	ldrh	r3, [r4, #0]
    24a8:	9a00      	ldr	r2, [sp, #0]
    24aa:	1a9b      	subs	r3, r3, r2
    24ac:	8023      	strh	r3, [r4, #0]
    24ae:	8823      	ldrh	r3, [r4, #0]
    24b0:	1e72      	subs	r2, r6, #1
    24b2:	2000      	movs	r0, #0
    24b4:	429a      	cmp	r2, r3
    24b6:	dd16      	ble.n	24e6 <DmAdvSetName+0x7e>
    24b8:	18ea      	adds	r2, r5, r3
    24ba:	3201      	adds	r2, #1
    24bc:	2109      	movs	r1, #9
    24be:	4296      	cmp	r6, r2
    24c0:	dc03      	bgt.n	24ca <DmAdvSetName+0x62>
    24c2:	3e02      	subs	r6, #2
    24c4:	1af5      	subs	r5, r6, r3
    24c6:	b2ed      	uxtb	r5, r5
    24c8:	3901      	subs	r1, #1
    24ca:	18ff      	adds	r7, r7, r3
    24cc:	1c6b      	adds	r3, r5, #1
    24ce:	703b      	strb	r3, [r7, #0]
    24d0:	7079      	strb	r1, [r7, #1]
    24d2:	002a      	movs	r2, r5
    24d4:	1cb8      	adds	r0, r7, #2
    24d6:	9901      	ldr	r1, [sp, #4]
    24d8:	f00e ffcf 	bl	1147a <memcpy>
    24dc:	2001      	movs	r0, #1
    24de:	8823      	ldrh	r3, [r4, #0]
    24e0:	3302      	adds	r3, #2
    24e2:	195d      	adds	r5, r3, r5
    24e4:	8025      	strh	r5, [r4, #0]
    24e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000024e8 <dmAdvActClearSets>:
    24e8:	4770      	bx	lr

000024ea <dmAdvMsgHandler>:
    24ea:	230f      	movs	r3, #15
    24ec:	7882      	ldrb	r2, [r0, #2]
    24ee:	b510      	push	{r4, lr}
    24f0:	4013      	ands	r3, r2
    24f2:	4a02      	ldr	r2, [pc, #8]	; (24fc <dmAdvMsgHandler+0x12>)
    24f4:	009b      	lsls	r3, r3, #2
    24f6:	589b      	ldr	r3, [r3, r2]
    24f8:	4798      	blx	r3
    24fa:	bd10      	pop	{r4, pc}
    24fc:	0001222c 	.word	0x0001222c

00002500 <dmAdvConfig>:
    2500:	b5f0      	push	{r4, r5, r6, r7, lr}
    2502:	4c0f      	ldr	r4, [pc, #60]	; (2540 <dmAdvConfig+0x40>)
    2504:	b089      	sub	sp, #36	; 0x24
    2506:	9106      	str	r1, [sp, #24]
    2508:	9207      	str	r2, [sp, #28]
    250a:	8a63      	ldrh	r3, [r4, #18]
    250c:	4e0d      	ldr	r6, [pc, #52]	; (2544 <dmAdvConfig+0x44>)
    250e:	8a27      	ldrh	r7, [r4, #16]
    2510:	9305      	str	r3, [sp, #20]
    2512:	0005      	movs	r5, r0
    2514:	7bb0      	ldrb	r0, [r6, #14]
    2516:	f000 ff05 	bl	3324 <DmLlAddrType>
    251a:	7c72      	ldrb	r2, [r6, #17]
    251c:	0003      	movs	r3, r0
    251e:	9203      	str	r2, [sp, #12]
    2520:	7d62      	ldrb	r2, [r4, #21]
    2522:	9905      	ldr	r1, [sp, #20]
    2524:	9202      	str	r2, [sp, #8]
    2526:	9a07      	ldr	r2, [sp, #28]
    2528:	0038      	movs	r0, r7
    252a:	9201      	str	r2, [sp, #4]
    252c:	9a06      	ldr	r2, [sp, #24]
    252e:	9200      	str	r2, [sp, #0]
    2530:	002a      	movs	r2, r5
    2532:	f004 fb5b 	bl	6bec <HciLeSetAdvParamCmd>
    2536:	4b04      	ldr	r3, [pc, #16]	; (2548 <dmAdvConfig+0x48>)
    2538:	701d      	strb	r5, [r3, #0]
    253a:	b009      	add	sp, #36	; 0x24
    253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	10001590 	.word	0x10001590
    2544:	10001740 	.word	0x10001740
    2548:	100015ac 	.word	0x100015ac

0000254c <dmAdvReset>:
    254c:	b507      	push	{r0, r1, r2, lr}
    254e:	480c      	ldr	r0, [pc, #48]	; (2580 <dmAdvReset+0x34>)
    2550:	7dc3      	ldrb	r3, [r0, #23]
    2552:	2b05      	cmp	r3, #5
    2554:	d006      	beq.n	2564 <dmAdvReset+0x18>
    2556:	2b01      	cmp	r3, #1
    2558:	d10e      	bne.n	2578 <dmAdvReset+0x2c>
    255a:	7d03      	ldrb	r3, [r0, #20]
    255c:	2b01      	cmp	r3, #1
    255e:	d00b      	beq.n	2578 <dmAdvReset+0x2c>
    2560:	2b04      	cmp	r3, #4
    2562:	d009      	beq.n	2578 <dmAdvReset+0x2c>
    2564:	f008 fe4c 	bl	b200 <WsfTimerStop>
    2568:	2300      	movs	r3, #0
    256a:	a801      	add	r0, sp, #4
    256c:	70c3      	strb	r3, [r0, #3]
    256e:	3322      	adds	r3, #34	; 0x22
    2570:	7083      	strb	r3, [r0, #2]
    2572:	4b04      	ldr	r3, [pc, #16]	; (2584 <dmAdvReset+0x38>)
    2574:	689b      	ldr	r3, [r3, #8]
    2576:	4798      	blx	r3
    2578:	f7ff fe64 	bl	2244 <dmAdvInit>
    257c:	bd07      	pop	{r0, r1, r2, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	10001590 	.word	0x10001590
    2584:	10001740 	.word	0x10001740

00002588 <dmAdvActConfig>:
    2588:	b510      	push	{r4, lr}
    258a:	4b07      	ldr	r3, [pc, #28]	; (25a8 <dmAdvActConfig+0x20>)
    258c:	7dda      	ldrb	r2, [r3, #23]
    258e:	2a00      	cmp	r2, #0
    2590:	d109      	bne.n	25a6 <dmAdvActConfig+0x1e>
    2592:	7d1b      	ldrb	r3, [r3, #20]
    2594:	2b01      	cmp	r3, #1
    2596:	d006      	beq.n	25a6 <dmAdvActConfig+0x1e>
    2598:	2b04      	cmp	r3, #4
    259a:	d004      	beq.n	25a6 <dmAdvActConfig+0x1e>
    259c:	1dc2      	adds	r2, r0, #7
    259e:	7981      	ldrb	r1, [r0, #6]
    25a0:	7940      	ldrb	r0, [r0, #5]
    25a2:	f7ff ffad 	bl	2500 <dmAdvConfig>
    25a6:	bd10      	pop	{r4, pc}
    25a8:	10001590 	.word	0x10001590

000025ac <dmAdvActSetData>:
    25ac:	b510      	push	{r4, lr}
    25ae:	4a08      	ldr	r2, [pc, #32]	; (25d0 <dmAdvActSetData+0x24>)
    25b0:	0003      	movs	r3, r0
    25b2:	7dd2      	ldrb	r2, [r2, #23]
    25b4:	2a00      	cmp	r2, #0
    25b6:	d109      	bne.n	25cc <dmAdvActSetData+0x20>
    25b8:	7982      	ldrb	r2, [r0, #6]
    25ba:	6899      	ldr	r1, [r3, #8]
    25bc:	79c0      	ldrb	r0, [r0, #7]
    25be:	2a00      	cmp	r2, #0
    25c0:	d102      	bne.n	25c8 <dmAdvActSetData+0x1c>
    25c2:	f004 fae3 	bl	6b8c <HciLeSetAdvDataCmd>
    25c6:	e001      	b.n	25cc <dmAdvActSetData+0x20>
    25c8:	f004 fbb3 	bl	6d32 <HciLeSetScanRespDataCmd>
    25cc:	bd10      	pop	{r4, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	10001590 	.word	0x10001590

000025d4 <dmAdvActStart>:
    25d4:	b510      	push	{r4, lr}
    25d6:	4b08      	ldr	r3, [pc, #32]	; (25f8 <dmAdvActStart+0x24>)
    25d8:	7dda      	ldrb	r2, [r3, #23]
    25da:	2a00      	cmp	r2, #0
    25dc:	d10b      	bne.n	25f6 <dmAdvActStart+0x22>
    25de:	7d1a      	ldrb	r2, [r3, #20]
    25e0:	2a01      	cmp	r2, #1
    25e2:	d008      	beq.n	25f6 <dmAdvActStart+0x22>
    25e4:	2a04      	cmp	r2, #4
    25e6:	d006      	beq.n	25f6 <dmAdvActStart+0x22>
    25e8:	2203      	movs	r2, #3
    25ea:	75da      	strb	r2, [r3, #23]
    25ec:	88c2      	ldrh	r2, [r0, #6]
    25ee:	2001      	movs	r0, #1
    25f0:	831a      	strh	r2, [r3, #24]
    25f2:	f004 faae 	bl	6b52 <HciLeSetAdvEnableCmd>
    25f6:	bd10      	pop	{r4, pc}
    25f8:	10001590 	.word	0x10001590

000025fc <dmAdvActStop>:
    25fc:	b510      	push	{r4, lr}
    25fe:	4b07      	ldr	r3, [pc, #28]	; (261c <dmAdvActStop+0x20>)
    2600:	7dda      	ldrb	r2, [r3, #23]
    2602:	2a01      	cmp	r2, #1
    2604:	d109      	bne.n	261a <dmAdvActStop+0x1e>
    2606:	7d1a      	ldrb	r2, [r3, #20]
    2608:	2a01      	cmp	r2, #1
    260a:	d006      	beq.n	261a <dmAdvActStop+0x1e>
    260c:	2a04      	cmp	r2, #4
    260e:	d004      	beq.n	261a <dmAdvActStop+0x1e>
    2610:	2205      	movs	r2, #5
    2612:	2000      	movs	r0, #0
    2614:	75da      	strb	r2, [r3, #23]
    2616:	f004 fa9c 	bl	6b52 <HciLeSetAdvEnableCmd>
    261a:	bd10      	pop	{r4, pc}
    261c:	10001590 	.word	0x10001590

00002620 <dmAdvActTimeout>:
    2620:	b510      	push	{r4, lr}
    2622:	f7ff ffeb 	bl	25fc <dmAdvActStop>
    2626:	bd10      	pop	{r4, pc}

00002628 <dmAdvHciHandler>:
    2628:	b570      	push	{r4, r5, r6, lr}
    262a:	7883      	ldrb	r3, [r0, #2]
    262c:	0005      	movs	r5, r0
    262e:	2b35      	cmp	r3, #53	; 0x35
    2630:	d145      	bne.n	26be <dmAdvHciHandler+0x96>
    2632:	4c23      	ldr	r4, [pc, #140]	; (26c0 <dmAdvHciHandler+0x98>)
    2634:	7de3      	ldrb	r3, [r4, #23]
    2636:	2b03      	cmp	r3, #3
    2638:	d003      	beq.n	2642 <dmAdvHciHandler+0x1a>
    263a:	2b05      	cmp	r3, #5
    263c:	d137      	bne.n	26ae <dmAdvHciHandler+0x86>
    263e:	2622      	movs	r6, #34	; 0x22
    2640:	e018      	b.n	2674 <dmAdvHciHandler+0x4c>
    2642:	2621      	movs	r6, #33	; 0x21
    2644:	78ea      	ldrb	r2, [r5, #3]
    2646:	2a00      	cmp	r2, #0
    2648:	d125      	bne.n	2696 <dmAdvHciHandler+0x6e>
    264a:	2b03      	cmp	r3, #3
    264c:	d10e      	bne.n	266c <dmAdvHciHandler+0x44>
    264e:	8b21      	ldrh	r1, [r4, #24]
    2650:	2900      	cmp	r1, #0
    2652:	d004      	beq.n	265e <dmAdvHciHandler+0x36>
    2654:	3303      	adds	r3, #3
    2656:	0020      	movs	r0, r4
    2658:	7323      	strb	r3, [r4, #12]
    265a:	f008 fdbd 	bl	b1d8 <WsfTimerStartMs>
    265e:	2314      	movs	r3, #20
    2660:	70ab      	strb	r3, [r5, #2]
    2662:	4b18      	ldr	r3, [pc, #96]	; (26c4 <dmAdvHciHandler+0x9c>)
    2664:	0028      	movs	r0, r5
    2666:	685b      	ldr	r3, [r3, #4]
    2668:	689b      	ldr	r3, [r3, #8]
    266a:	4798      	blx	r3
    266c:	4b16      	ldr	r3, [pc, #88]	; (26c8 <dmAdvHciHandler+0xa0>)
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	7523      	strb	r3, [r4, #20]
    2672:	e012      	b.n	269a <dmAdvHciHandler+0x72>
    2674:	78ea      	ldrb	r2, [r5, #3]
    2676:	2a00      	cmp	r2, #0
    2678:	d10f      	bne.n	269a <dmAdvHciHandler+0x72>
    267a:	2b05      	cmp	r3, #5
    267c:	d109      	bne.n	2692 <dmAdvHciHandler+0x6a>
    267e:	0020      	movs	r0, r4
    2680:	f008 fdbe 	bl	b200 <WsfTimerStop>
    2684:	2315      	movs	r3, #21
    2686:	70ab      	strb	r3, [r5, #2]
    2688:	4b0e      	ldr	r3, [pc, #56]	; (26c4 <dmAdvHciHandler+0x9c>)
    268a:	0028      	movs	r0, r5
    268c:	685b      	ldr	r3, [r3, #4]
    268e:	689b      	ldr	r3, [r3, #8]
    2690:	4798      	blx	r3
    2692:	23ff      	movs	r3, #255	; 0xff
    2694:	7523      	strb	r3, [r4, #20]
    2696:	2300      	movs	r3, #0
    2698:	e000      	b.n	269c <dmAdvHciHandler+0x74>
    269a:	2301      	movs	r3, #1
    269c:	75e3      	strb	r3, [r4, #23]
    269e:	2e00      	cmp	r6, #0
    26a0:	d00d      	beq.n	26be <dmAdvHciHandler+0x96>
    26a2:	4b0a      	ldr	r3, [pc, #40]	; (26cc <dmAdvHciHandler+0xa4>)
    26a4:	70ae      	strb	r6, [r5, #2]
    26a6:	689b      	ldr	r3, [r3, #8]
    26a8:	0028      	movs	r0, r5
    26aa:	4798      	blx	r3
    26ac:	e007      	b.n	26be <dmAdvHciHandler+0x96>
    26ae:	1e98      	subs	r0, r3, #2
    26b0:	2803      	cmp	r0, #3
    26b2:	d804      	bhi.n	26be <dmAdvHciHandler+0x96>
    26b4:	2600      	movs	r6, #0
    26b6:	f003 fda1 	bl	61fc <__gnu_thumb1_case_sqi>
    26ba:	c5c5      	.short	0xc5c5
    26bc:	dddd      	.short	0xdddd
    26be:	bd70      	pop	{r4, r5, r6, pc}
    26c0:	10001590 	.word	0x10001590
    26c4:	10001054 	.word	0x10001054
    26c8:	100015ac 	.word	0x100015ac
    26cc:	10001740 	.word	0x10001740

000026d0 <dmAdvActRemoveSet>:
    26d0:	4770      	bx	lr

000026d2 <dmAdvStartDirected>:
    26d2:	b510      	push	{r4, lr}
    26d4:	4c07      	ldr	r4, [pc, #28]	; (26f4 <dmAdvStartDirected+0x22>)
    26d6:	ab02      	add	r3, sp, #8
    26d8:	0008      	movs	r0, r1
    26da:	7819      	ldrb	r1, [r3, #0]
    26dc:	7de3      	ldrb	r3, [r4, #23]
    26de:	2b00      	cmp	r3, #0
    26e0:	d107      	bne.n	26f2 <dmAdvStartDirected+0x20>
    26e2:	9a03      	ldr	r2, [sp, #12]
    26e4:	f7ff ff0c 	bl	2500 <dmAdvConfig>
    26e8:	2302      	movs	r3, #2
    26ea:	2001      	movs	r0, #1
    26ec:	75e3      	strb	r3, [r4, #23]
    26ee:	f004 fa30 	bl	6b52 <HciLeSetAdvEnableCmd>
    26f2:	bd10      	pop	{r4, pc}
    26f4:	10001590 	.word	0x10001590

000026f8 <dmAdvStopDirected>:
    26f8:	b510      	push	{r4, lr}
    26fa:	4b05      	ldr	r3, [pc, #20]	; (2710 <dmAdvStopDirected+0x18>)
    26fc:	7dda      	ldrb	r2, [r3, #23]
    26fe:	2a01      	cmp	r2, #1
    2700:	d104      	bne.n	270c <dmAdvStopDirected+0x14>
    2702:	3203      	adds	r2, #3
    2704:	2000      	movs	r0, #0
    2706:	75da      	strb	r2, [r3, #23]
    2708:	f004 fa23 	bl	6b52 <HciLeSetAdvEnableCmd>
    270c:	bd10      	pop	{r4, pc}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	10001590 	.word	0x10001590

00002714 <dmAdvConnectFailed>:
    2714:	b510      	push	{r4, lr}
    2716:	4c04      	ldr	r4, [pc, #16]	; (2728 <dmAdvConnectFailed+0x14>)
    2718:	0020      	movs	r0, r4
    271a:	f008 fd71 	bl	b200 <WsfTimerStop>
    271e:	23ff      	movs	r3, #255	; 0xff
    2720:	7523      	strb	r3, [r4, #20]
    2722:	2300      	movs	r3, #0
    2724:	75e3      	strb	r3, [r4, #23]
    2726:	bd10      	pop	{r4, pc}
    2728:	10001590 	.word	0x10001590

0000272c <dmAdvConnected>:
    272c:	b510      	push	{r4, lr}
    272e:	f7ff fff1 	bl	2714 <dmAdvConnectFailed>
    2732:	bd10      	pop	{r4, pc}

00002734 <DmAdvInit>:
    2734:	b510      	push	{r4, lr}
    2736:	f007 fcb5 	bl	a0a4 <WsfTaskLock>
    273a:	4b04      	ldr	r3, [pc, #16]	; (274c <DmAdvInit+0x18>)
    273c:	4a04      	ldr	r2, [pc, #16]	; (2750 <DmAdvInit+0x1c>)
    273e:	331c      	adds	r3, #28
    2740:	6013      	str	r3, [r2, #0]
    2742:	f7ff fd7f 	bl	2244 <dmAdvInit>
    2746:	f007 fcb3 	bl	a0b0 <WsfTaskUnlock>
    274a:	bd10      	pop	{r4, pc}
    274c:	0001222c 	.word	0x0001222c
    2750:	10001054 	.word	0x10001054

00002754 <DmAdvModeLeg>:
    2754:	4b04      	ldr	r3, [pc, #16]	; (2768 <DmAdvModeLeg+0x14>)
    2756:	4805      	ldr	r0, [pc, #20]	; (276c <DmAdvModeLeg+0x18>)
    2758:	681b      	ldr	r3, [r3, #0]
    275a:	301c      	adds	r0, #28
    275c:	1a18      	subs	r0, r3, r0
    275e:	4243      	negs	r3, r0
    2760:	4158      	adcs	r0, r3
    2762:	b2c0      	uxtb	r0, r0
    2764:	4770      	bx	lr
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	10001054 	.word	0x10001054
    276c:	0001222c 	.word	0x0001222c

00002770 <dmConnSmActNone>:
    2770:	4770      	bx	lr

00002772 <dmConnSmActHciUpdated>:
    2772:	2329      	movs	r3, #41	; 0x29
    2774:	b510      	push	{r4, lr}
    2776:	708b      	strb	r3, [r1, #2]
    2778:	4b02      	ldr	r3, [pc, #8]	; (2784 <dmConnSmActHciUpdated+0x12>)
    277a:	0008      	movs	r0, r1
    277c:	33fc      	adds	r3, #252	; 0xfc
    277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2780:	4798      	blx	r3
    2782:	bd10      	pop	{r4, pc}
    2784:	100015b0 	.word	0x100015b0

00002788 <dmConnSmActClose>:
    2788:	b510      	push	{r4, lr}
    278a:	7909      	ldrb	r1, [r1, #4]
    278c:	8980      	ldrh	r0, [r0, #12]
    278e:	f003 fe59 	bl	6444 <HciDisconnectCmd>
    2792:	bd10      	pop	{r4, pc}

00002794 <dmConnReset>:
    2794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2796:	2339      	movs	r3, #57	; 0x39
    2798:	ad01      	add	r5, sp, #4
    279a:	70ab      	strb	r3, [r5, #2]
    279c:	4c14      	ldr	r4, [pc, #80]	; (27f0 <dmConnReset+0x5c>)
    279e:	2300      	movs	r3, #0
    27a0:	0026      	movs	r6, r4
    27a2:	712b      	strb	r3, [r5, #4]
    27a4:	70eb      	strb	r3, [r5, #3]
    27a6:	3316      	adds	r3, #22
    27a8:	722b      	strb	r3, [r5, #8]
    27aa:	7da3      	ldrb	r3, [r4, #22]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d006      	beq.n	27be <dmConnReset+0x2a>
    27b0:	7c23      	ldrb	r3, [r4, #16]
    27b2:	0029      	movs	r1, r5
    27b4:	0020      	movs	r0, r4
    27b6:	80eb      	strh	r3, [r5, #6]
    27b8:	802b      	strh	r3, [r5, #0]
    27ba:	f000 fc93 	bl	30e4 <dmConnSmExecute>
    27be:	0033      	movs	r3, r6
    27c0:	3361      	adds	r3, #97	; 0x61
    27c2:	342c      	adds	r4, #44	; 0x2c
    27c4:	33ff      	adds	r3, #255	; 0xff
    27c6:	429c      	cmp	r4, r3
    27c8:	d1ef      	bne.n	27aa <dmConnReset+0x16>
    27ca:	22c0      	movs	r2, #192	; 0xc0
    27cc:	2330      	movs	r3, #48	; 0x30
    27ce:	0030      	movs	r0, r6
    27d0:	0052      	lsls	r2, r2, #1
    27d2:	52b3      	strh	r3, [r6, r2]
    27d4:	3202      	adds	r2, #2
    27d6:	52b3      	strh	r3, [r6, r2]
    27d8:	3075      	adds	r0, #117	; 0x75
    27da:	3a77      	subs	r2, #119	; 0x77
    27dc:	3aff      	subs	r2, #255	; 0xff
    27de:	4905      	ldr	r1, [pc, #20]	; (27f4 <dmConnReset+0x60>)
    27e0:	30ff      	adds	r0, #255	; 0xff
    27e2:	f00e fe4a 	bl	1147a <memcpy>
    27e6:	2200      	movs	r2, #0
    27e8:	4b03      	ldr	r3, [pc, #12]	; (27f8 <dmConnReset+0x64>)
    27ea:	74da      	strb	r2, [r3, #19]
    27ec:	735a      	strb	r2, [r3, #13]
    27ee:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    27f0:	100015b0 	.word	0x100015b0
    27f4:	00012254 	.word	0x00012254
    27f8:	10001740 	.word	0x10001740

000027fc <dmConnSetConnSpec>:
    27fc:	b570      	push	{r4, r5, r6, lr}
    27fe:	0005      	movs	r5, r0
    2800:	000c      	movs	r4, r1
    2802:	f007 fc4f 	bl	a0a4 <WsfTaskLock>
    2806:	0028      	movs	r0, r5
    2808:	f000 fdcc 	bl	33a4 <DmInitPhyToIdx>
    280c:	220c      	movs	r2, #12
    280e:	4350      	muls	r0, r2
    2810:	4b04      	ldr	r3, [pc, #16]	; (2824 <dmConnSetConnSpec+0x28>)
    2812:	0021      	movs	r1, r4
    2814:	1818      	adds	r0, r3, r0
    2816:	3075      	adds	r0, #117	; 0x75
    2818:	30ff      	adds	r0, #255	; 0xff
    281a:	f00e fe2e 	bl	1147a <memcpy>
    281e:	f007 fc47 	bl	a0b0 <WsfTaskUnlock>
    2822:	bd70      	pop	{r4, r5, r6, pc}
    2824:	100015b0 	.word	0x100015b0

00002828 <dmConnCcbAlloc>:
    2828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282a:	0006      	movs	r6, r0
    282c:	2300      	movs	r3, #0
    282e:	4c0e      	ldr	r4, [pc, #56]	; (2868 <dmConnCcbAlloc+0x40>)
    2830:	7da5      	ldrb	r5, [r4, #22]
    2832:	1c5f      	adds	r7, r3, #1
    2834:	2d00      	cmp	r5, #0
    2836:	d111      	bne.n	285c <dmConnCcbAlloc+0x34>
    2838:	222c      	movs	r2, #44	; 0x2c
    283a:	0029      	movs	r1, r5
    283c:	0020      	movs	r0, r4
    283e:	f00e fe41 	bl	114c4 <memset>
    2842:	0020      	movs	r0, r4
    2844:	0031      	movs	r1, r6
    2846:	f00a fcdf 	bl	d208 <BdaCpy>
    284a:	2301      	movs	r3, #1
    284c:	425b      	negs	r3, r3
    284e:	81a3      	strh	r3, [r4, #12]
    2850:	3302      	adds	r3, #2
    2852:	7427      	strb	r7, [r4, #16]
    2854:	7465      	strb	r5, [r4, #17]
    2856:	75a3      	strb	r3, [r4, #22]
    2858:	0020      	movs	r0, r4
    285a:	e004      	b.n	2866 <dmConnCcbAlloc+0x3e>
    285c:	b2fb      	uxtb	r3, r7
    285e:	342c      	adds	r4, #44	; 0x2c
    2860:	2b08      	cmp	r3, #8
    2862:	d1e5      	bne.n	2830 <dmConnCcbAlloc+0x8>
    2864:	2000      	movs	r0, #0
    2866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2868:	100015b0 	.word	0x100015b0

0000286c <dmConnCcbDealloc>:
    286c:	2300      	movs	r3, #0
    286e:	7583      	strb	r3, [r0, #22]
    2870:	4770      	bx	lr

00002872 <dmConnCcbByHandle>:
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <dmConnCcbByHandle+0x22>)
    2874:	001a      	movs	r2, r3
    2876:	3261      	adds	r2, #97	; 0x61
    2878:	32ff      	adds	r2, #255	; 0xff
    287a:	7d99      	ldrb	r1, [r3, #22]
    287c:	2900      	cmp	r1, #0
    287e:	d002      	beq.n	2886 <dmConnCcbByHandle+0x14>
    2880:	8999      	ldrh	r1, [r3, #12]
    2882:	4281      	cmp	r1, r0
    2884:	d004      	beq.n	2890 <dmConnCcbByHandle+0x1e>
    2886:	332c      	adds	r3, #44	; 0x2c
    2888:	4293      	cmp	r3, r2
    288a:	d1f6      	bne.n	287a <dmConnCcbByHandle+0x8>
    288c:	2000      	movs	r0, #0
    288e:	e000      	b.n	2892 <dmConnCcbByHandle+0x20>
    2890:	0018      	movs	r0, r3
    2892:	4770      	bx	lr
    2894:	100015b0 	.word	0x100015b0

00002898 <dmConn2HciHandler>:
    2898:	b530      	push	{r4, r5, lr}
    289a:	0004      	movs	r4, r0
    289c:	b085      	sub	sp, #20
    289e:	8800      	ldrh	r0, [r0, #0]
    28a0:	f7ff ffe7 	bl	2872 <dmConnCcbByHandle>
    28a4:	2800      	cmp	r0, #0
    28a6:	d06a      	beq.n	297e <dmConn2HciHandler+0xe6>
    28a8:	78a3      	ldrb	r3, [r4, #2]
    28aa:	2b23      	cmp	r3, #35	; 0x23
    28ac:	d03b      	beq.n	2926 <dmConn2HciHandler+0x8e>
    28ae:	d821      	bhi.n	28f4 <dmConn2HciHandler+0x5c>
    28b0:	2b07      	cmp	r3, #7
    28b2:	d029      	beq.n	2908 <dmConn2HciHandler+0x70>
    28b4:	2b0b      	cmp	r3, #11
    28b6:	d162      	bne.n	297e <dmConn2HciHandler+0xe6>
    28b8:	7a63      	ldrb	r3, [r4, #9]
    28ba:	7a22      	ldrb	r2, [r4, #8]
    28bc:	021b      	lsls	r3, r3, #8
    28be:	189b      	adds	r3, r3, r2
    28c0:	7aa2      	ldrb	r2, [r4, #10]
    28c2:	0021      	movs	r1, r4
    28c4:	0412      	lsls	r2, r2, #16
    28c6:	189b      	adds	r3, r3, r2
    28c8:	6283      	str	r3, [r0, #40]	; 0x28
    28ca:	466a      	mov	r2, sp
    28cc:	2351      	movs	r3, #81	; 0x51
    28ce:	7093      	strb	r3, [r2, #2]
    28d0:	7c03      	ldrb	r3, [r0, #16]
    28d2:	3108      	adds	r1, #8
    28d4:	8013      	strh	r3, [r2, #0]
    28d6:	2300      	movs	r3, #0
    28d8:	70d3      	strb	r3, [r2, #3]
    28da:	7923      	ldrb	r3, [r4, #4]
    28dc:	a802      	add	r0, sp, #8
    28de:	7113      	strb	r3, [r2, #4]
    28e0:	88e3      	ldrh	r3, [r4, #6]
    28e2:	80d3      	strh	r3, [r2, #6]
    28e4:	2208      	movs	r2, #8
    28e6:	f00e fdc8 	bl	1147a <memcpy>
    28ea:	4b26      	ldr	r3, [pc, #152]	; (2984 <dmConn2HciHandler+0xec>)
    28ec:	4668      	mov	r0, sp
    28ee:	33fc      	adds	r3, #252	; 0xfc
    28f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    28f2:	e043      	b.n	297c <dmConn2HciHandler+0xe4>
    28f4:	2b27      	cmp	r3, #39	; 0x27
    28f6:	d028      	beq.n	294a <dmConn2HciHandler+0xb2>
    28f8:	2b28      	cmp	r3, #40	; 0x28
    28fa:	d033      	beq.n	2964 <dmConn2HciHandler+0xcc>
    28fc:	2b24      	cmp	r3, #36	; 0x24
    28fe:	d13e      	bne.n	297e <dmConn2HciHandler+0xe6>
    2900:	8983      	ldrh	r3, [r0, #12]
    2902:	7c02      	ldrb	r2, [r0, #16]
    2904:	2140      	movs	r1, #64	; 0x40
    2906:	e011      	b.n	292c <dmConn2HciHandler+0x94>
    2908:	2208      	movs	r2, #8
    290a:	466d      	mov	r5, sp
    290c:	56a2      	ldrsb	r2, [r4, r2]
    290e:	7923      	ldrb	r3, [r4, #4]
    2910:	2438      	movs	r4, #56	; 0x38
    2912:	8981      	ldrh	r1, [r0, #12]
    2914:	7c00      	ldrb	r0, [r0, #16]
    2916:	70ac      	strb	r4, [r5, #2]
    2918:	8028      	strh	r0, [r5, #0]
    291a:	70eb      	strb	r3, [r5, #3]
    291c:	4668      	mov	r0, sp
    291e:	712b      	strb	r3, [r5, #4]
    2920:	80e9      	strh	r1, [r5, #6]
    2922:	722a      	strb	r2, [r5, #8]
    2924:	e027      	b.n	2976 <dmConn2HciHandler+0xde>
    2926:	213f      	movs	r1, #63	; 0x3f
    2928:	8983      	ldrh	r3, [r0, #12]
    292a:	7c02      	ldrb	r2, [r0, #16]
    292c:	4668      	mov	r0, sp
    292e:	8002      	strh	r2, [r0, #0]
    2930:	2200      	movs	r2, #0
    2932:	7081      	strb	r1, [r0, #2]
    2934:	70c2      	strb	r2, [r0, #3]
    2936:	8083      	strh	r3, [r0, #4]
    2938:	88e3      	ldrh	r3, [r4, #6]
    293a:	80c3      	strh	r3, [r0, #6]
    293c:	8923      	ldrh	r3, [r4, #8]
    293e:	8103      	strh	r3, [r0, #8]
    2940:	8963      	ldrh	r3, [r4, #10]
    2942:	8143      	strh	r3, [r0, #10]
    2944:	89a3      	ldrh	r3, [r4, #12]
    2946:	8183      	strh	r3, [r0, #12]
    2948:	e015      	b.n	2976 <dmConn2HciHandler+0xde>
    294a:	7923      	ldrb	r3, [r4, #4]
    294c:	88e2      	ldrh	r2, [r4, #6]
    294e:	466c      	mov	r4, sp
    2950:	7c01      	ldrb	r1, [r0, #16]
    2952:	2041      	movs	r0, #65	; 0x41
    2954:	8021      	strh	r1, [r4, #0]
    2956:	2100      	movs	r1, #0
    2958:	70a0      	strb	r0, [r4, #2]
    295a:	70e1      	strb	r1, [r4, #3]
    295c:	4668      	mov	r0, sp
    295e:	80e2      	strh	r2, [r4, #6]
    2960:	7123      	strb	r3, [r4, #4]
    2962:	e008      	b.n	2976 <dmConn2HciHandler+0xde>
    2964:	7c02      	ldrb	r2, [r0, #16]
    2966:	4668      	mov	r0, sp
    2968:	2142      	movs	r1, #66	; 0x42
    296a:	8002      	strh	r2, [r0, #0]
    296c:	2200      	movs	r2, #0
    296e:	88a3      	ldrh	r3, [r4, #4]
    2970:	7081      	strb	r1, [r0, #2]
    2972:	70c2      	strb	r2, [r0, #3]
    2974:	8083      	strh	r3, [r0, #4]
    2976:	4b03      	ldr	r3, [pc, #12]	; (2984 <dmConn2HciHandler+0xec>)
    2978:	33fc      	adds	r3, #252	; 0xfc
    297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    297c:	4798      	blx	r3
    297e:	b005      	add	sp, #20
    2980:	bd30      	pop	{r4, r5, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	100015b0 	.word	0x100015b0

00002988 <dmConnCcbByBdAddr>:
    2988:	b570      	push	{r4, r5, r6, lr}
    298a:	4c0b      	ldr	r4, [pc, #44]	; (29b8 <dmConnCcbByBdAddr+0x30>)
    298c:	0005      	movs	r5, r0
    298e:	0026      	movs	r6, r4
    2990:	7da3      	ldrb	r3, [r4, #22]
    2992:	2b00      	cmp	r3, #0
    2994:	d107      	bne.n	29a6 <dmConnCcbByBdAddr+0x1e>
    2996:	0033      	movs	r3, r6
    2998:	3361      	adds	r3, #97	; 0x61
    299a:	342c      	adds	r4, #44	; 0x2c
    299c:	33ff      	adds	r3, #255	; 0xff
    299e:	429c      	cmp	r4, r3
    29a0:	d1f6      	bne.n	2990 <dmConnCcbByBdAddr+0x8>
    29a2:	2000      	movs	r0, #0
    29a4:	e006      	b.n	29b4 <dmConnCcbByBdAddr+0x2c>
    29a6:	0029      	movs	r1, r5
    29a8:	0020      	movs	r0, r4
    29aa:	f00a fc3b 	bl	d224 <BdaCmp>
    29ae:	2800      	cmp	r0, #0
    29b0:	d0f1      	beq.n	2996 <dmConnCcbByBdAddr+0xe>
    29b2:	0020      	movs	r0, r4
    29b4:	bd70      	pop	{r4, r5, r6, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	100015b0 	.word	0x100015b0

000029bc <dmConnHciHandler>:
    29bc:	b570      	push	{r4, r5, r6, lr}
    29be:	7885      	ldrb	r5, [r0, #2]
    29c0:	0004      	movs	r4, r0
    29c2:	1e6b      	subs	r3, r5, #1
    29c4:	2b01      	cmp	r3, #1
    29c6:	d823      	bhi.n	2a10 <dmConnHciHandler+0x54>
    29c8:	0005      	movs	r5, r0
    29ca:	350a      	adds	r5, #10
    29cc:	0028      	movs	r0, r5
    29ce:	f7ff ffdb 	bl	2988 <dmConnCcbByBdAddr>
    29d2:	2800      	cmp	r0, #0
    29d4:	d114      	bne.n	2a00 <dmConnHciHandler+0x44>
    29d6:	4b19      	ldr	r3, [pc, #100]	; (2a3c <dmConnHciHandler+0x80>)
    29d8:	4e19      	ldr	r6, [pc, #100]	; (2a40 <dmConnHciHandler+0x84>)
    29da:	0019      	movs	r1, r3
    29dc:	3161      	adds	r1, #97	; 0x61
    29de:	31ff      	adds	r1, #255	; 0xff
    29e0:	7d9a      	ldrb	r2, [r3, #22]
    29e2:	2a00      	cmp	r2, #0
    29e4:	d007      	beq.n	29f6 <dmConnHciHandler+0x3a>
    29e6:	7d5a      	ldrb	r2, [r3, #21]
    29e8:	2a02      	cmp	r2, #2
    29ea:	d008      	beq.n	29fe <dmConnHciHandler+0x42>
    29ec:	2a04      	cmp	r2, #4
    29ee:	d102      	bne.n	29f6 <dmConnHciHandler+0x3a>
    29f0:	899a      	ldrh	r2, [r3, #12]
    29f2:	42b2      	cmp	r2, r6
    29f4:	d003      	beq.n	29fe <dmConnHciHandler+0x42>
    29f6:	332c      	adds	r3, #44	; 0x2c
    29f8:	428b      	cmp	r3, r1
    29fa:	d1f1      	bne.n	29e0 <dmConnHciHandler+0x24>
    29fc:	e015      	b.n	2a2a <dmConnHciHandler+0x6e>
    29fe:	0018      	movs	r0, r3
    2a00:	78e3      	ldrb	r3, [r4, #3]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d101      	bne.n	2a0a <dmConnHciHandler+0x4e>
    2a06:	3338      	adds	r3, #56	; 0x38
    2a08:	e000      	b.n	2a0c <dmConnHciHandler+0x50>
    2a0a:	2337      	movs	r3, #55	; 0x37
    2a0c:	70a3      	strb	r3, [r4, #2]
    2a0e:	e004      	b.n	2a1a <dmConnHciHandler+0x5e>
    2a10:	8800      	ldrh	r0, [r0, #0]
    2a12:	3536      	adds	r5, #54	; 0x36
    2a14:	f7ff ff2d 	bl	2872 <dmConnCcbByHandle>
    2a18:	70a5      	strb	r5, [r4, #2]
    2a1a:	2800      	cmp	r0, #0
    2a1c:	d00c      	beq.n	2a38 <dmConnHciHandler+0x7c>
    2a1e:	7c03      	ldrb	r3, [r0, #16]
    2a20:	0021      	movs	r1, r4
    2a22:	8023      	strh	r3, [r4, #0]
    2a24:	f000 fb5e 	bl	30e4 <dmConnSmExecute>
    2a28:	e006      	b.n	2a38 <dmConnHciHandler+0x7c>
    2a2a:	7a23      	ldrb	r3, [r4, #8]
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d1e7      	bne.n	2a00 <dmConnHciHandler+0x44>
    2a30:	0028      	movs	r0, r5
    2a32:	f7ff fef9 	bl	2828 <dmConnCcbAlloc>
    2a36:	e7e3      	b.n	2a00 <dmConnHciHandler+0x44>
    2a38:	bd70      	pop	{r4, r5, r6, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	100015b0 	.word	0x100015b0
    2a40:	0000ffff 	.word	0x0000ffff

00002a44 <dmConnCcbById>:
    2a44:	222c      	movs	r2, #44	; 0x2c
    2a46:	3801      	subs	r0, #1
    2a48:	b2c3      	uxtb	r3, r0
    2a4a:	4353      	muls	r3, r2
    2a4c:	4803      	ldr	r0, [pc, #12]	; (2a5c <dmConnCcbById+0x18>)
    2a4e:	18c3      	adds	r3, r0, r3
    2a50:	7d9a      	ldrb	r2, [r3, #22]
    2a52:	1e10      	subs	r0, r2, #0
    2a54:	d000      	beq.n	2a58 <dmConnCcbById+0x14>
    2a56:	0018      	movs	r0, r3
    2a58:	4770      	bx	lr
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	100015b0 	.word	0x100015b0

00002a60 <dmConnMsgHandler>:
    2a60:	b510      	push	{r4, lr}
    2a62:	0004      	movs	r4, r0
    2a64:	7800      	ldrb	r0, [r0, #0]
    2a66:	f7ff ffed 	bl	2a44 <dmConnCcbById>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d002      	beq.n	2a74 <dmConnMsgHandler+0x14>
    2a6e:	0021      	movs	r1, r4
    2a70:	f000 fb38 	bl	30e4 <dmConnSmExecute>
    2a74:	bd10      	pop	{r4, pc}

00002a76 <dmConn2MsgHandler>:
    2a76:	b530      	push	{r4, r5, lr}
    2a78:	0004      	movs	r4, r0
    2a7a:	b085      	sub	sp, #20
    2a7c:	7800      	ldrb	r0, [r0, #0]
    2a7e:	f7ff ffe1 	bl	2a44 <dmConnCcbById>
    2a82:	1e03      	subs	r3, r0, #0
    2a84:	d029      	beq.n	2ada <dmConn2MsgHandler+0x64>
    2a86:	78a0      	ldrb	r0, [r4, #2]
    2a88:	3841      	subs	r0, #65	; 0x41
    2a8a:	2804      	cmp	r0, #4
    2a8c:	d825      	bhi.n	2ada <dmConn2MsgHandler+0x64>
    2a8e:	899d      	ldrh	r5, [r3, #12]
    2a90:	f003 fbbe 	bl	6210 <__gnu_thumb1_case_uqi>
    2a94:	19140703 	.word	0x19140703
    2a98:	1f          	.byte	0x1f
    2a99:	00          	.byte	0x00
    2a9a:	0028      	movs	r0, r5
    2a9c:	f004 f9d1 	bl	6e42 <HciReadRssiCmd>
    2aa0:	e01b      	b.n	2ada <dmConn2MsgHandler+0x64>
    2aa2:	89e0      	ldrh	r0, [r4, #14]
    2aa4:	8923      	ldrh	r3, [r4, #8]
    2aa6:	9002      	str	r0, [sp, #8]
    2aa8:	89a0      	ldrh	r0, [r4, #12]
    2aaa:	88e2      	ldrh	r2, [r4, #6]
    2aac:	9001      	str	r0, [sp, #4]
    2aae:	8960      	ldrh	r0, [r4, #10]
    2ab0:	88a1      	ldrh	r1, [r4, #4]
    2ab2:	9000      	str	r0, [sp, #0]
    2ab4:	0028      	movs	r0, r5
    2ab6:	f003 fdb2 	bl	661e <HciLeRemoteConnParamReqReply>
    2aba:	e00e      	b.n	2ada <dmConn2MsgHandler+0x64>
    2abc:	7921      	ldrb	r1, [r4, #4]
    2abe:	0028      	movs	r0, r5
    2ac0:	f003 fe31 	bl	6726 <HciLeRemoteConnParamReqNegReply>
    2ac4:	e009      	b.n	2ada <dmConn2MsgHandler+0x64>
    2ac6:	88e2      	ldrh	r2, [r4, #6]
    2ac8:	88a1      	ldrh	r1, [r4, #4]
    2aca:	0028      	movs	r0, r5
    2acc:	f003 fe59 	bl	6782 <HciLeSetDataLen>
    2ad0:	e003      	b.n	2ada <dmConn2MsgHandler+0x64>
    2ad2:	88a1      	ldrh	r1, [r4, #4]
    2ad4:	0028      	movs	r0, r5
    2ad6:	f004 fa2b 	bl	6f30 <HciWriteAuthPayloadTimeout>
    2ada:	b005      	add	sp, #20
    2adc:	bd30      	pop	{r4, r5, pc}

00002ade <dmConnExecCback>:
    2ade:	b570      	push	{r4, r5, r6, lr}
    2ae0:	0005      	movs	r5, r0
    2ae2:	2400      	movs	r4, #0
    2ae4:	0023      	movs	r3, r4
    2ae6:	4a06      	ldr	r2, [pc, #24]	; (2b00 <dmConnExecCback+0x22>)
    2ae8:	3361      	adds	r3, #97	; 0x61
    2aea:	33ff      	adds	r3, #255	; 0xff
    2aec:	58d3      	ldr	r3, [r2, r3]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d001      	beq.n	2af6 <dmConnExecCback+0x18>
    2af2:	0028      	movs	r0, r5
    2af4:	4798      	blx	r3
    2af6:	3404      	adds	r4, #4
    2af8:	2c14      	cmp	r4, #20
    2afa:	d1f3      	bne.n	2ae4 <dmConnExecCback+0x6>
    2afc:	bd70      	pop	{r4, r5, r6, pc}
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	100015b0 	.word	0x100015b0

00002b04 <dmConnSmActConnOpened>:
    2b04:	b570      	push	{r4, r5, r6, lr}
    2b06:	000d      	movs	r5, r1
    2b08:	0004      	movs	r4, r0
    2b0a:	310a      	adds	r1, #10
    2b0c:	f00a fb7c 	bl	d208 <BdaCpy>
    2b10:	88eb      	ldrh	r3, [r5, #6]
    2b12:	81a3      	strh	r3, [r4, #12]
    2b14:	7a68      	ldrb	r0, [r5, #9]
    2b16:	f000 fc13 	bl	3340 <DmHostAddrType>
    2b1a:	74e0      	strb	r0, [r4, #19]
    2b1c:	7a2b      	ldrb	r3, [r5, #8]
    2b1e:	4913      	ldr	r1, [pc, #76]	; (2b6c <dmConnSmActConnOpened+0x68>)
    2b20:	7663      	strb	r3, [r4, #25]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d101      	bne.n	2b2a <dmConnSmActConnOpened+0x26>
    2b26:	7b4b      	ldrb	r3, [r1, #13]
    2b28:	e000      	b.n	2b2c <dmConnSmActConnOpened+0x28>
    2b2a:	7b8b      	ldrb	r3, [r1, #14]
    2b2c:	7523      	strb	r3, [r4, #20]
    2b2e:	7d23      	ldrb	r3, [r4, #20]
    2b30:	1da6      	adds	r6, r4, #6
    2b32:	2b00      	cmp	r3, #0
    2b34:	d102      	bne.n	2b3c <dmConnSmActConnOpened+0x38>
    2b36:	f005 f8eb 	bl	7d10 <HciGetBdAddr>
    2b3a:	0001      	movs	r1, r0
    2b3c:	0030      	movs	r0, r6
    2b3e:	f00a fb63 	bl	d208 <BdaCpy>
    2b42:	0029      	movs	r1, r5
    2b44:	0020      	movs	r0, r4
    2b46:	3117      	adds	r1, #23
    2b48:	301a      	adds	r0, #26
    2b4a:	f00a fb5d 	bl	d208 <BdaCpy>
    2b4e:	0029      	movs	r1, r5
    2b50:	0020      	movs	r0, r4
    2b52:	311d      	adds	r1, #29
    2b54:	3020      	adds	r0, #32
    2b56:	f00a fb57 	bl	d208 <BdaCpy>
    2b5a:	2300      	movs	r3, #0
    2b5c:	81e3      	strh	r3, [r4, #14]
    2b5e:	3327      	adds	r3, #39	; 0x27
    2b60:	70ab      	strb	r3, [r5, #2]
    2b62:	0028      	movs	r0, r5
    2b64:	f7ff ffbb 	bl	2ade <dmConnExecCback>
    2b68:	bd70      	pop	{r4, r5, r6, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	10001740 	.word	0x10001740

00002b70 <dmConnSmActConnClosed>:
    2b70:	2300      	movs	r3, #0
    2b72:	b510      	push	{r4, lr}
    2b74:	7583      	strb	r3, [r0, #22]
    2b76:	3328      	adds	r3, #40	; 0x28
    2b78:	708b      	strb	r3, [r1, #2]
    2b7a:	0008      	movs	r0, r1
    2b7c:	f7ff ffaf 	bl	2ade <dmConnExecCback>
    2b80:	bd10      	pop	{r4, pc}

00002b82 <dmConnSmActConnFailed>:
    2b82:	2300      	movs	r3, #0
    2b84:	b510      	push	{r4, lr}
    2b86:	7583      	strb	r3, [r0, #22]
    2b88:	3328      	adds	r3, #40	; 0x28
    2b8a:	708b      	strb	r3, [r1, #2]
    2b8c:	0008      	movs	r0, r1
    2b8e:	f7ff ffa6 	bl	2ade <dmConnExecCback>
    2b92:	bd10      	pop	{r4, pc}

00002b94 <dmConnOpenAccept>:
    2b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b96:	b087      	sub	sp, #28
    2b98:	9302      	str	r3, [sp, #8]
    2b9a:	ab0c      	add	r3, sp, #48	; 0x30
    2b9c:	881b      	ldrh	r3, [r3, #0]
    2b9e:	0007      	movs	r7, r0
    2ba0:	9303      	str	r3, [sp, #12]
    2ba2:	ab0d      	add	r3, sp, #52	; 0x34
    2ba4:	781b      	ldrb	r3, [r3, #0]
    2ba6:	9100      	str	r1, [sp, #0]
    2ba8:	9304      	str	r3, [sp, #16]
    2baa:	ab0e      	add	r3, sp, #56	; 0x38
    2bac:	781b      	ldrb	r3, [r3, #0]
    2bae:	9201      	str	r2, [sp, #4]
    2bb0:	9305      	str	r3, [sp, #20]
    2bb2:	ab10      	add	r3, sp, #64	; 0x40
    2bb4:	781e      	ldrb	r6, [r3, #0]
    2bb6:	f007 fa75 	bl	a0a4 <WsfTaskLock>
    2bba:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2bbc:	f7ff fee4 	bl	2988 <dmConnCcbByBdAddr>
    2bc0:	1e05      	subs	r5, r0, #0
    2bc2:	d103      	bne.n	2bcc <dmConnOpenAccept+0x38>
    2bc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2bc6:	f7ff fe2f 	bl	2828 <dmConnCcbAlloc>
    2bca:	0005      	movs	r5, r0
    2bcc:	f007 fa70 	bl	a0b0 <WsfTaskUnlock>
    2bd0:	1e28      	subs	r0, r5, #0
    2bd2:	d035      	beq.n	2c40 <dmConnOpenAccept+0xac>
    2bd4:	2014      	movs	r0, #20
    2bd6:	f008 f934 	bl	ae42 <WsfMsgAlloc>
    2bda:	1e04      	subs	r4, r0, #0
    2bdc:	d02a      	beq.n	2c34 <dmConnOpenAccept+0xa0>
    2bde:	7c2b      	ldrb	r3, [r5, #16]
    2be0:	8003      	strh	r3, [r0, #0]
    2be2:	2330      	movs	r3, #48	; 0x30
    2be4:	2e00      	cmp	r6, #0
    2be6:	d000      	beq.n	2bea <dmConnOpenAccept+0x56>
    2be8:	3302      	adds	r3, #2
    2bea:	70a3      	strb	r3, [r4, #2]
    2bec:	466b      	mov	r3, sp
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	0020      	movs	r0, r4
    2bf2:	7123      	strb	r3, [r4, #4]
    2bf4:	466b      	mov	r3, sp
    2bf6:	791b      	ldrb	r3, [r3, #4]
    2bf8:	300b      	adds	r0, #11
    2bfa:	7163      	strb	r3, [r4, #5]
    2bfc:	466b      	mov	r3, sp
    2bfe:	7a1b      	ldrb	r3, [r3, #8]
    2c00:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2c02:	71a3      	strb	r3, [r4, #6]
    2c04:	466b      	mov	r3, sp
    2c06:	899b      	ldrh	r3, [r3, #12]
    2c08:	8123      	strh	r3, [r4, #8]
    2c0a:	466b      	mov	r3, sp
    2c0c:	7c1b      	ldrb	r3, [r3, #16]
    2c0e:	72a3      	strb	r3, [r4, #10]
    2c10:	f00a fafa 	bl	d208 <BdaCpy>
    2c14:	466b      	mov	r3, sp
    2c16:	7d1b      	ldrb	r3, [r3, #20]
    2c18:	74a7      	strb	r7, [r4, #18]
    2c1a:	7463      	strb	r3, [r4, #17]
    2c1c:	4b09      	ldr	r3, [pc, #36]	; (2c44 <dmConnOpenAccept+0xb0>)
    2c1e:	0021      	movs	r1, r4
    2c20:	7b18      	ldrb	r0, [r3, #12]
    2c22:	f008 f932 	bl	ae8a <WsfMsgSend>
    2c26:	f007 fa3d 	bl	a0a4 <WsfTaskLock>
    2c2a:	766e      	strb	r6, [r5, #25]
    2c2c:	f007 fa40 	bl	a0b0 <WsfTaskUnlock>
    2c30:	7c28      	ldrb	r0, [r5, #16]
    2c32:	e005      	b.n	2c40 <dmConnOpenAccept+0xac>
    2c34:	f007 fa36 	bl	a0a4 <WsfTaskLock>
    2c38:	75ac      	strb	r4, [r5, #22]
    2c3a:	f007 fa39 	bl	a0b0 <WsfTaskUnlock>
    2c3e:	0020      	movs	r0, r4
    2c40:	b007      	add	sp, #28
    2c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c44:	10001740 	.word	0x10001740

00002c48 <DmConnInit>:
    2c48:	4b05      	ldr	r3, [pc, #20]	; (2c60 <DmConnInit+0x18>)
    2c4a:	4a06      	ldr	r2, [pc, #24]	; (2c64 <DmConnInit+0x1c>)
    2c4c:	0019      	movs	r1, r3
    2c4e:	310c      	adds	r1, #12
    2c50:	60d1      	str	r1, [r2, #12]
    2c52:	0019      	movs	r1, r3
    2c54:	3118      	adds	r1, #24
    2c56:	6111      	str	r1, [r2, #16]
    2c58:	4a03      	ldr	r2, [pc, #12]	; (2c68 <DmConnInit+0x20>)
    2c5a:	3324      	adds	r3, #36	; 0x24
    2c5c:	6013      	str	r3, [r2, #0]
    2c5e:	4770      	bx	lr
    2c60:	00012254 	.word	0x00012254
    2c64:	10001054 	.word	0x10001054
    2c68:	10001734 	.word	0x10001734

00002c6c <DmConnRegister>:
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	0004      	movs	r4, r0
    2c70:	000d      	movs	r5, r1
    2c72:	3458      	adds	r4, #88	; 0x58
    2c74:	f007 fa16 	bl	a0a4 <WsfTaskLock>
    2c78:	4b02      	ldr	r3, [pc, #8]	; (2c84 <DmConnRegister+0x18>)
    2c7a:	00a4      	lsls	r4, r4, #2
    2c7c:	50e5      	str	r5, [r4, r3]
    2c7e:	f007 fa17 	bl	a0b0 <WsfTaskUnlock>
    2c82:	bd70      	pop	{r4, r5, r6, pc}
    2c84:	100015b0 	.word	0x100015b0

00002c88 <DmConnClose>:
    2c88:	b570      	push	{r4, r5, r6, lr}
    2c8a:	0004      	movs	r4, r0
    2c8c:	2006      	movs	r0, #6
    2c8e:	000e      	movs	r6, r1
    2c90:	0015      	movs	r5, r2
    2c92:	f008 f8d6 	bl	ae42 <WsfMsgAlloc>
    2c96:	1e01      	subs	r1, r0, #0
    2c98:	d008      	beq.n	2cac <DmConnClose+0x24>
    2c9a:	2331      	movs	r3, #49	; 0x31
    2c9c:	7083      	strb	r3, [r0, #2]
    2c9e:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <DmConnClose+0x28>)
    2ca0:	8006      	strh	r6, [r0, #0]
    2ca2:	7105      	strb	r5, [r0, #4]
    2ca4:	7144      	strb	r4, [r0, #5]
    2ca6:	7b18      	ldrb	r0, [r3, #12]
    2ca8:	f008 f8ef 	bl	ae8a <WsfMsgSend>
    2cac:	bd70      	pop	{r4, r5, r6, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	10001740 	.word	0x10001740

00002cb4 <DmReadRemoteFeatures>:
    2cb4:	b510      	push	{r4, lr}
    2cb6:	f7ff fec5 	bl	2a44 <dmConnCcbById>
    2cba:	2800      	cmp	r0, #0
    2cbc:	d002      	beq.n	2cc4 <DmReadRemoteFeatures+0x10>
    2cbe:	8980      	ldrh	r0, [r0, #12]
    2cc0:	f003 fed6 	bl	6a70 <HciLeReadRemoteFeatCmd>
    2cc4:	bd10      	pop	{r4, pc}

00002cc6 <DmConnUpdate>:
    2cc6:	b570      	push	{r4, r5, r6, lr}
    2cc8:	0005      	movs	r5, r0
    2cca:	2010      	movs	r0, #16
    2ccc:	000e      	movs	r6, r1
    2cce:	f008 f8b8 	bl	ae42 <WsfMsgAlloc>
    2cd2:	1e04      	subs	r4, r0, #0
    2cd4:	d015      	beq.n	2d02 <DmConnUpdate+0x3c>
    2cd6:	232c      	movs	r3, #44	; 0x2c
    2cd8:	1e6a      	subs	r2, r5, #1
    2cda:	4353      	muls	r3, r2
    2cdc:	4a09      	ldr	r2, [pc, #36]	; (2d04 <DmConnUpdate+0x3e>)
    2cde:	0031      	movs	r1, r6
    2ce0:	18d3      	adds	r3, r2, r3
    2ce2:	7e5b      	ldrb	r3, [r3, #25]
    2ce4:	8005      	strh	r5, [r0, #0]
    2ce6:	425a      	negs	r2, r3
    2ce8:	4153      	adcs	r3, r2
    2cea:	2234      	movs	r2, #52	; 0x34
    2cec:	1ad3      	subs	r3, r2, r3
    2cee:	7083      	strb	r3, [r0, #2]
    2cf0:	3a28      	subs	r2, #40	; 0x28
    2cf2:	3004      	adds	r0, #4
    2cf4:	f00e fbc1 	bl	1147a <memcpy>
    2cf8:	4b03      	ldr	r3, [pc, #12]	; (2d08 <DmConnUpdate+0x42>)
    2cfa:	0021      	movs	r1, r4
    2cfc:	7b18      	ldrb	r0, [r3, #12]
    2cfe:	f008 f8c4 	bl	ae8a <WsfMsgSend>
    2d02:	bd70      	pop	{r4, r5, r6, pc}
    2d04:	100015b0 	.word	0x100015b0
    2d08:	10001740 	.word	0x10001740

00002d0c <DmConnSetScanInterval>:
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	0005      	movs	r5, r0
    2d10:	000c      	movs	r4, r1
    2d12:	f007 f9c7 	bl	a0a4 <WsfTaskLock>
    2d16:	2001      	movs	r0, #1
    2d18:	f000 fb44 	bl	33a4 <DmInitPhyToIdx>
    2d1c:	0003      	movs	r3, r0
    2d1e:	4a04      	ldr	r2, [pc, #16]	; (2d30 <DmConnSetScanInterval+0x24>)
    2d20:	33c0      	adds	r3, #192	; 0xc0
    2d22:	0058      	lsls	r0, r3, #1
    2d24:	5285      	strh	r5, [r0, r2]
    2d26:	1810      	adds	r0, r2, r0
    2d28:	8044      	strh	r4, [r0, #2]
    2d2a:	f007 f9c1 	bl	a0b0 <WsfTaskUnlock>
    2d2e:	bd70      	pop	{r4, r5, r6, pc}
    2d30:	100015b0 	.word	0x100015b0

00002d34 <DmExtConnSetScanInterval>:
    2d34:	b570      	push	{r4, r5, r6, lr}
    2d36:	2301      	movs	r3, #1
    2d38:	2600      	movs	r6, #0
    2d3a:	0004      	movs	r4, r0
    2d3c:	4134      	asrs	r4, r6
    2d3e:	421c      	tst	r4, r3
    2d40:	d012      	beq.n	2d68 <DmExtConnSetScanInterval+0x34>
    2d42:	8814      	ldrh	r4, [r2, #0]
    2d44:	880d      	ldrh	r5, [r1, #0]
    2d46:	f007 f9ad 	bl	a0a4 <WsfTaskLock>
    2d4a:	2001      	movs	r0, #1
    2d4c:	40b0      	lsls	r0, r6
    2d4e:	b2c0      	uxtb	r0, r0
    2d50:	f000 fb28 	bl	33a4 <DmInitPhyToIdx>
    2d54:	0003      	movs	r3, r0
    2d56:	4a07      	ldr	r2, [pc, #28]	; (2d74 <DmExtConnSetScanInterval+0x40>)
    2d58:	33c0      	adds	r3, #192	; 0xc0
    2d5a:	0058      	lsls	r0, r3, #1
    2d5c:	5285      	strh	r5, [r0, r2]
    2d5e:	1810      	adds	r0, r2, r0
    2d60:	8044      	strh	r4, [r0, #2]
    2d62:	f007 f9a5 	bl	a0b0 <WsfTaskUnlock>
    2d66:	e003      	b.n	2d70 <DmExtConnSetScanInterval+0x3c>
    2d68:	2e07      	cmp	r6, #7
    2d6a:	d001      	beq.n	2d70 <DmExtConnSetScanInterval+0x3c>
    2d6c:	3601      	adds	r6, #1
    2d6e:	e7e4      	b.n	2d3a <DmExtConnSetScanInterval+0x6>
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	100015b0 	.word	0x100015b0

00002d78 <DmConnSetConnSpec>:
    2d78:	b510      	push	{r4, lr}
    2d7a:	0001      	movs	r1, r0
    2d7c:	2001      	movs	r0, #1
    2d7e:	f7ff fd3d 	bl	27fc <dmConnSetConnSpec>
    2d82:	bd10      	pop	{r4, pc}

00002d84 <DmExtConnSetConnSpec>:
    2d84:	2300      	movs	r3, #0
    2d86:	2201      	movs	r2, #1
    2d88:	b510      	push	{r4, lr}
    2d8a:	0004      	movs	r4, r0
    2d8c:	411c      	asrs	r4, r3
    2d8e:	4214      	tst	r4, r2
    2d90:	d005      	beq.n	2d9e <DmExtConnSetConnSpec+0x1a>
    2d92:	2001      	movs	r0, #1
    2d94:	4098      	lsls	r0, r3
    2d96:	b2c0      	uxtb	r0, r0
    2d98:	f7ff fd30 	bl	27fc <dmConnSetConnSpec>
    2d9c:	e003      	b.n	2da6 <DmExtConnSetConnSpec+0x22>
    2d9e:	2b07      	cmp	r3, #7
    2da0:	d001      	beq.n	2da6 <DmExtConnSetConnSpec+0x22>
    2da2:	3301      	adds	r3, #1
    2da4:	e7f1      	b.n	2d8a <DmExtConnSetConnSpec+0x6>
    2da6:	bd10      	pop	{r4, pc}

00002da8 <DmConnReadRssi>:
    2da8:	b510      	push	{r4, lr}
    2daa:	0004      	movs	r4, r0
    2dac:	2004      	movs	r0, #4
    2dae:	f008 f848 	bl	ae42 <WsfMsgAlloc>
    2db2:	1e01      	subs	r1, r0, #0
    2db4:	d006      	beq.n	2dc4 <DmConnReadRssi+0x1c>
    2db6:	2341      	movs	r3, #65	; 0x41
    2db8:	7083      	strb	r3, [r0, #2]
    2dba:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <DmConnReadRssi+0x20>)
    2dbc:	8004      	strh	r4, [r0, #0]
    2dbe:	7b18      	ldrb	r0, [r3, #12]
    2dc0:	f008 f863 	bl	ae8a <WsfMsgSend>
    2dc4:	bd10      	pop	{r4, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	10001740 	.word	0x10001740

00002dcc <DmRemoteConnParamReqReply>:
    2dcc:	b570      	push	{r4, r5, r6, lr}
    2dce:	0006      	movs	r6, r0
    2dd0:	2010      	movs	r0, #16
    2dd2:	000d      	movs	r5, r1
    2dd4:	f008 f835 	bl	ae42 <WsfMsgAlloc>
    2dd8:	1e04      	subs	r4, r0, #0
    2dda:	d00c      	beq.n	2df6 <DmRemoteConnParamReqReply+0x2a>
    2ddc:	2342      	movs	r3, #66	; 0x42
    2dde:	8006      	strh	r6, [r0, #0]
    2de0:	7083      	strb	r3, [r0, #2]
    2de2:	0029      	movs	r1, r5
    2de4:	3004      	adds	r0, #4
    2de6:	220c      	movs	r2, #12
    2de8:	f00e fb47 	bl	1147a <memcpy>
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <DmRemoteConnParamReqReply+0x2c>)
    2dee:	0021      	movs	r1, r4
    2df0:	7b18      	ldrb	r0, [r3, #12]
    2df2:	f008 f84a 	bl	ae8a <WsfMsgSend>
    2df6:	bd70      	pop	{r4, r5, r6, pc}
    2df8:	10001740 	.word	0x10001740

00002dfc <DmRemoteConnParamReqNegReply>:
    2dfc:	b570      	push	{r4, r5, r6, lr}
    2dfe:	0005      	movs	r5, r0
    2e00:	2006      	movs	r0, #6
    2e02:	000c      	movs	r4, r1
    2e04:	f008 f81d 	bl	ae42 <WsfMsgAlloc>
    2e08:	1e01      	subs	r1, r0, #0
    2e0a:	d007      	beq.n	2e1c <DmRemoteConnParamReqNegReply+0x20>
    2e0c:	2343      	movs	r3, #67	; 0x43
    2e0e:	7083      	strb	r3, [r0, #2]
    2e10:	4b03      	ldr	r3, [pc, #12]	; (2e20 <DmRemoteConnParamReqNegReply+0x24>)
    2e12:	8005      	strh	r5, [r0, #0]
    2e14:	7104      	strb	r4, [r0, #4]
    2e16:	7b18      	ldrb	r0, [r3, #12]
    2e18:	f008 f837 	bl	ae8a <WsfMsgSend>
    2e1c:	bd70      	pop	{r4, r5, r6, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	10001740 	.word	0x10001740

00002e24 <DmConnSetDataLen>:
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	0006      	movs	r6, r0
    2e28:	2008      	movs	r0, #8
    2e2a:	000d      	movs	r5, r1
    2e2c:	0014      	movs	r4, r2
    2e2e:	f008 f808 	bl	ae42 <WsfMsgAlloc>
    2e32:	1e01      	subs	r1, r0, #0
    2e34:	d008      	beq.n	2e48 <DmConnSetDataLen+0x24>
    2e36:	2344      	movs	r3, #68	; 0x44
    2e38:	7083      	strb	r3, [r0, #2]
    2e3a:	4b04      	ldr	r3, [pc, #16]	; (2e4c <DmConnSetDataLen+0x28>)
    2e3c:	8006      	strh	r6, [r0, #0]
    2e3e:	8085      	strh	r5, [r0, #4]
    2e40:	80c4      	strh	r4, [r0, #6]
    2e42:	7b18      	ldrb	r0, [r3, #12]
    2e44:	f008 f821 	bl	ae8a <WsfMsgSend>
    2e48:	bd70      	pop	{r4, r5, r6, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	10001740 	.word	0x10001740

00002e50 <DmWriteAuthPayloadTimeout>:
    2e50:	b570      	push	{r4, r5, r6, lr}
    2e52:	0005      	movs	r5, r0
    2e54:	2006      	movs	r0, #6
    2e56:	000c      	movs	r4, r1
    2e58:	f007 fff3 	bl	ae42 <WsfMsgAlloc>
    2e5c:	1e01      	subs	r1, r0, #0
    2e5e:	d007      	beq.n	2e70 <DmWriteAuthPayloadTimeout+0x20>
    2e60:	2345      	movs	r3, #69	; 0x45
    2e62:	7083      	strb	r3, [r0, #2]
    2e64:	4b03      	ldr	r3, [pc, #12]	; (2e74 <DmWriteAuthPayloadTimeout+0x24>)
    2e66:	8005      	strh	r5, [r0, #0]
    2e68:	8084      	strh	r4, [r0, #4]
    2e6a:	7b18      	ldrb	r0, [r3, #12]
    2e6c:	f008 f80d 	bl	ae8a <WsfMsgSend>
    2e70:	bd70      	pop	{r4, r5, r6, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	10001740 	.word	0x10001740

00002e78 <DmConnIdByHandle>:
    2e78:	4b08      	ldr	r3, [pc, #32]	; (2e9c <DmConnIdByHandle+0x24>)
    2e7a:	001a      	movs	r2, r3
    2e7c:	3261      	adds	r2, #97	; 0x61
    2e7e:	32ff      	adds	r2, #255	; 0xff
    2e80:	7d99      	ldrb	r1, [r3, #22]
    2e82:	2900      	cmp	r1, #0
    2e84:	d004      	beq.n	2e90 <DmConnIdByHandle+0x18>
    2e86:	8999      	ldrh	r1, [r3, #12]
    2e88:	4281      	cmp	r1, r0
    2e8a:	d101      	bne.n	2e90 <DmConnIdByHandle+0x18>
    2e8c:	7c18      	ldrb	r0, [r3, #16]
    2e8e:	e003      	b.n	2e98 <DmConnIdByHandle+0x20>
    2e90:	332c      	adds	r3, #44	; 0x2c
    2e92:	4293      	cmp	r3, r2
    2e94:	d1f4      	bne.n	2e80 <DmConnIdByHandle+0x8>
    2e96:	2000      	movs	r0, #0
    2e98:	4770      	bx	lr
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	100015b0 	.word	0x100015b0

00002ea0 <DmConnInUse>:
    2ea0:	232c      	movs	r3, #44	; 0x2c
    2ea2:	3801      	subs	r0, #1
    2ea4:	4358      	muls	r0, r3
    2ea6:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <DmConnInUse+0x10>)
    2ea8:	1818      	adds	r0, r3, r0
    2eaa:	7d80      	ldrb	r0, [r0, #22]
    2eac:	4770      	bx	lr
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	100015b0 	.word	0x100015b0

00002eb4 <DmConnPeerAddrType>:
    2eb4:	232c      	movs	r3, #44	; 0x2c
    2eb6:	3801      	subs	r0, #1
    2eb8:	4358      	muls	r0, r3
    2eba:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <DmConnPeerAddrType+0x10>)
    2ebc:	1818      	adds	r0, r3, r0
    2ebe:	7cc0      	ldrb	r0, [r0, #19]
    2ec0:	4770      	bx	lr
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	100015b0 	.word	0x100015b0

00002ec8 <DmConnPeerAddr>:
    2ec8:	232c      	movs	r3, #44	; 0x2c
    2eca:	3801      	subs	r0, #1
    2ecc:	4358      	muls	r0, r3
    2ece:	4b01      	ldr	r3, [pc, #4]	; (2ed4 <DmConnPeerAddr+0xc>)
    2ed0:	1818      	adds	r0, r3, r0
    2ed2:	4770      	bx	lr
    2ed4:	100015b0 	.word	0x100015b0

00002ed8 <DmConnLocalAddrType>:
    2ed8:	232c      	movs	r3, #44	; 0x2c
    2eda:	3801      	subs	r0, #1
    2edc:	4358      	muls	r0, r3
    2ede:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <DmConnLocalAddrType+0x10>)
    2ee0:	1818      	adds	r0, r3, r0
    2ee2:	7d00      	ldrb	r0, [r0, #20]
    2ee4:	4770      	bx	lr
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	100015b0 	.word	0x100015b0

00002eec <DmConnLocalAddr>:
    2eec:	232c      	movs	r3, #44	; 0x2c
    2eee:	3801      	subs	r0, #1
    2ef0:	4358      	muls	r0, r3
    2ef2:	4b02      	ldr	r3, [pc, #8]	; (2efc <DmConnLocalAddr+0x10>)
    2ef4:	1818      	adds	r0, r3, r0
    2ef6:	3006      	adds	r0, #6
    2ef8:	4770      	bx	lr
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	100015b0 	.word	0x100015b0

00002f00 <DmConnPeerRpa>:
    2f00:	232c      	movs	r3, #44	; 0x2c
    2f02:	3801      	subs	r0, #1
    2f04:	4358      	muls	r0, r3
    2f06:	4b02      	ldr	r3, [pc, #8]	; (2f10 <DmConnPeerRpa+0x10>)
    2f08:	3020      	adds	r0, #32
    2f0a:	1818      	adds	r0, r3, r0
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	100015b0 	.word	0x100015b0

00002f14 <DmConnLocalRpa>:
    2f14:	232c      	movs	r3, #44	; 0x2c
    2f16:	3801      	subs	r0, #1
    2f18:	4358      	muls	r0, r3
    2f1a:	4b02      	ldr	r3, [pc, #8]	; (2f24 <DmConnLocalRpa+0x10>)
    2f1c:	1818      	adds	r0, r3, r0
    2f1e:	301a      	adds	r0, #26
    2f20:	4770      	bx	lr
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	100015b0 	.word	0x100015b0

00002f28 <DmConnSecLevel>:
    2f28:	232c      	movs	r3, #44	; 0x2c
    2f2a:	3801      	subs	r0, #1
    2f2c:	4358      	muls	r0, r3
    2f2e:	4b02      	ldr	r3, [pc, #8]	; (2f38 <DmConnSecLevel+0x10>)
    2f30:	1818      	adds	r0, r3, r0
    2f32:	7dc0      	ldrb	r0, [r0, #23]
    2f34:	4770      	bx	lr
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	100015b0 	.word	0x100015b0

00002f3c <DmConnSetIdle>:
    2f3c:	b570      	push	{r4, r5, r6, lr}
    2f3e:	0006      	movs	r6, r0
    2f40:	000c      	movs	r4, r1
    2f42:	0015      	movs	r5, r2
    2f44:	f007 f8ae 	bl	a0a4 <WsfTaskLock>
    2f48:	232c      	movs	r3, #44	; 0x2c
    2f4a:	1e70      	subs	r0, r6, #1
    2f4c:	4358      	muls	r0, r3
    2f4e:	4b08      	ldr	r3, [pc, #32]	; (2f70 <DmConnSetIdle+0x34>)
    2f50:	1818      	adds	r0, r3, r0
    2f52:	7d83      	ldrb	r3, [r0, #22]
    2f54:	2b00      	cmp	r3, #0
    2f56:	d007      	beq.n	2f68 <DmConnSetIdle+0x2c>
    2f58:	89c3      	ldrh	r3, [r0, #14]
    2f5a:	2d00      	cmp	r5, #0
    2f5c:	d102      	bne.n	2f64 <DmConnSetIdle+0x28>
    2f5e:	43a3      	bics	r3, r4
    2f60:	81c3      	strh	r3, [r0, #14]
    2f62:	e001      	b.n	2f68 <DmConnSetIdle+0x2c>
    2f64:	431c      	orrs	r4, r3
    2f66:	81c4      	strh	r4, [r0, #14]
    2f68:	f007 f8a2 	bl	a0b0 <WsfTaskUnlock>
    2f6c:	bd70      	pop	{r4, r5, r6, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	100015b0 	.word	0x100015b0

00002f74 <DmConnCheckIdle>:
    2f74:	b510      	push	{r4, lr}
    2f76:	0004      	movs	r4, r0
    2f78:	f007 f894 	bl	a0a4 <WsfTaskLock>
    2f7c:	232c      	movs	r3, #44	; 0x2c
    2f7e:	1e60      	subs	r0, r4, #1
    2f80:	4358      	muls	r0, r3
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <DmConnCheckIdle+0x1c>)
    2f84:	1818      	adds	r0, r3, r0
    2f86:	89c4      	ldrh	r4, [r0, #14]
    2f88:	f007 f892 	bl	a0b0 <WsfTaskUnlock>
    2f8c:	0020      	movs	r0, r4
    2f8e:	bd10      	pop	{r4, pc}
    2f90:	100015b0 	.word	0x100015b0

00002f94 <DmConnRole>:
    2f94:	232c      	movs	r3, #44	; 0x2c
    2f96:	3801      	subs	r0, #1
    2f98:	4358      	muls	r0, r3
    2f9a:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <DmConnRole+0x10>)
    2f9c:	1818      	adds	r0, r3, r0
    2f9e:	7e40      	ldrb	r0, [r0, #25]
    2fa0:	4770      	bx	lr
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	100015b0 	.word	0x100015b0

00002fa8 <dmConnSmActUpdateSlave>:
    2fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2faa:	2602      	movs	r6, #2
    2fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2fae:	0004      	movs	r4, r0
    2fb0:	000d      	movs	r5, r1
    2fb2:	4233      	tst	r3, r6
    2fb4:	d008      	beq.n	2fc8 <dmConnSmActUpdateSlave+0x20>
    2fb6:	f004 fec1 	bl	7d3c <HciGetLeSupFeat>
    2fba:	4230      	tst	r0, r6
    2fbc:	d004      	beq.n	2fc8 <dmConnSmActUpdateSlave+0x20>
    2fbe:	1d29      	adds	r1, r5, #4
    2fc0:	89a0      	ldrh	r0, [r4, #12]
    2fc2:	f003 faa5 	bl	6510 <HciLeConnUpdateCmd>
    2fc6:	e017      	b.n	2ff8 <dmConnSmActUpdateSlave+0x50>
    2fc8:	7c63      	ldrb	r3, [r4, #17]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d106      	bne.n	2fdc <dmConnSmActUpdateSlave+0x34>
    2fce:	3301      	adds	r3, #1
    2fd0:	7463      	strb	r3, [r4, #17]
    2fd2:	1d29      	adds	r1, r5, #4
    2fd4:	89a0      	ldrh	r0, [r4, #12]
    2fd6:	f000 fe91 	bl	3cfc <L2cDmConnUpdateReq>
    2fda:	e00d      	b.n	2ff8 <dmConnSmActUpdateSlave+0x50>
    2fdc:	4668      	mov	r0, sp
    2fde:	7c23      	ldrb	r3, [r4, #16]
    2fe0:	2129      	movs	r1, #41	; 0x29
    2fe2:	8003      	strh	r3, [r0, #0]
    2fe4:	230c      	movs	r3, #12
    2fe6:	70c3      	strb	r3, [r0, #3]
    2fe8:	7103      	strb	r3, [r0, #4]
    2fea:	4b04      	ldr	r3, [pc, #16]	; (2ffc <dmConnSmActUpdateSlave+0x54>)
    2fec:	89a2      	ldrh	r2, [r4, #12]
    2fee:	33fc      	adds	r3, #252	; 0xfc
    2ff0:	7081      	strb	r1, [r0, #2]
    2ff2:	80c2      	strh	r2, [r0, #6]
    2ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2ff6:	4798      	blx	r3
    2ff8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	100015b0 	.word	0x100015b0

00003000 <dmConnSmActL2cUpdateCnf>:
    3000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3002:	7c43      	ldrb	r3, [r0, #17]
    3004:	2b00      	cmp	r3, #0
    3006:	d013      	beq.n	3030 <dmConnSmActL2cUpdateCnf+0x30>
    3008:	2300      	movs	r3, #0
    300a:	7443      	strb	r3, [r0, #17]
    300c:	888b      	ldrh	r3, [r1, #4]
    300e:	2b00      	cmp	r3, #0
    3010:	d00e      	beq.n	3030 <dmConnSmActL2cUpdateCnf+0x30>
    3012:	466c      	mov	r4, sp
    3014:	8982      	ldrh	r2, [r0, #12]
    3016:	7c01      	ldrb	r1, [r0, #16]
    3018:	2029      	movs	r0, #41	; 0x29
    301a:	b2db      	uxtb	r3, r3
    301c:	70e3      	strb	r3, [r4, #3]
    301e:	7123      	strb	r3, [r4, #4]
    3020:	4b04      	ldr	r3, [pc, #16]	; (3034 <dmConnSmActL2cUpdateCnf+0x34>)
    3022:	70a0      	strb	r0, [r4, #2]
    3024:	33fc      	adds	r3, #252	; 0xfc
    3026:	4668      	mov	r0, sp
    3028:	8021      	strh	r1, [r4, #0]
    302a:	80e2      	strh	r2, [r4, #6]
    302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    302e:	4798      	blx	r3
    3030:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	100015b0 	.word	0x100015b0

00003038 <DmL2cConnUpdateCnf>:
    3038:	b513      	push	{r0, r1, r4, lr}
    303a:	000c      	movs	r4, r1
    303c:	f7ff fc19 	bl	2872 <dmConnCcbByHandle>
    3040:	2800      	cmp	r0, #0
    3042:	d006      	beq.n	3052 <DmL2cConnUpdateCnf+0x1a>
    3044:	466a      	mov	r2, sp
    3046:	2336      	movs	r3, #54	; 0x36
    3048:	4669      	mov	r1, sp
    304a:	7093      	strb	r3, [r2, #2]
    304c:	8094      	strh	r4, [r2, #4]
    304e:	f000 f849 	bl	30e4 <dmConnSmExecute>
    3052:	bd13      	pop	{r0, r1, r4, pc}

00003054 <DmConnAccept>:
    3054:	b570      	push	{r4, r5, r6, lr}
    3056:	2601      	movs	r6, #1
    3058:	b086      	sub	sp, #24
    305a:	ac0a      	add	r4, sp, #40	; 0x28
    305c:	ad0b      	add	r5, sp, #44	; 0x2c
    305e:	7824      	ldrb	r4, [r4, #0]
    3060:	782d      	ldrb	r5, [r5, #0]
    3062:	9604      	str	r6, [sp, #16]
    3064:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3066:	9300      	str	r3, [sp, #0]
    3068:	9603      	str	r6, [sp, #12]
    306a:	0013      	movs	r3, r2
    306c:	9502      	str	r5, [sp, #8]
    306e:	000a      	movs	r2, r1
    3070:	9401      	str	r4, [sp, #4]
    3072:	2100      	movs	r1, #0
    3074:	f7ff fd8e 	bl	2b94 <dmConnOpenAccept>
    3078:	b006      	add	sp, #24
    307a:	bd70      	pop	{r4, r5, r6, pc}

0000307c <dmConnSmActAccept>:
    307c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    307e:	000d      	movs	r5, r1
    3080:	350b      	adds	r5, #11
    3082:	798c      	ldrb	r4, [r1, #6]
    3084:	7a8b      	ldrb	r3, [r1, #10]
    3086:	890a      	ldrh	r2, [r1, #8]
    3088:	7948      	ldrb	r0, [r1, #5]
    308a:	9501      	str	r5, [sp, #4]
    308c:	7c49      	ldrb	r1, [r1, #17]
    308e:	9100      	str	r1, [sp, #0]
    3090:	0021      	movs	r1, r4
    3092:	f7ff fb1e 	bl	26d2 <dmAdvStartDirected>
    3096:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00003098 <dmConnSmActCancelAccept>:
    3098:	b570      	push	{r4, r5, r6, lr}
    309a:	000d      	movs	r5, r1
    309c:	0004      	movs	r4, r0
    309e:	f7ff fb2b 	bl	26f8 <dmAdvStopDirected>
    30a2:	0029      	movs	r1, r5
    30a4:	0020      	movs	r0, r4
    30a6:	f7ff fd6c 	bl	2b82 <dmConnSmActConnFailed>
    30aa:	bd70      	pop	{r4, r5, r6, pc}

000030ac <dmConnSmActConnAccepted>:
    30ac:	b570      	push	{r4, r5, r6, lr}
    30ae:	000d      	movs	r5, r1
    30b0:	0004      	movs	r4, r0
    30b2:	f7ff fb3b 	bl	272c <dmAdvConnected>
    30b6:	0029      	movs	r1, r5
    30b8:	0020      	movs	r0, r4
    30ba:	f7ff fd23 	bl	2b04 <dmConnSmActConnOpened>
    30be:	bd70      	pop	{r4, r5, r6, pc}

000030c0 <dmConnSmActAcceptFailed>:
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	000d      	movs	r5, r1
    30c4:	0004      	movs	r4, r0
    30c6:	f7ff fb25 	bl	2714 <dmAdvConnectFailed>
    30ca:	0029      	movs	r1, r5
    30cc:	0020      	movs	r0, r4
    30ce:	f7ff fd58 	bl	2b82 <dmConnSmActConnFailed>
    30d2:	bd70      	pop	{r4, r5, r6, pc}

000030d4 <DmConnSlaveInit>:
    30d4:	4a01      	ldr	r2, [pc, #4]	; (30dc <DmConnSlaveInit+0x8>)
    30d6:	4b02      	ldr	r3, [pc, #8]	; (30e0 <DmConnSlaveInit+0xc>)
    30d8:	609a      	str	r2, [r3, #8]
    30da:	4770      	bx	lr
    30dc:	00012290 	.word	0x00012290
    30e0:	10001734 	.word	0x10001734

000030e4 <dmConnSmExecute>:
    30e4:	230d      	movs	r3, #13
    30e6:	b570      	push	{r4, r5, r6, lr}
    30e8:	240f      	movs	r4, #15
    30ea:	7d46      	ldrb	r6, [r0, #21]
    30ec:	788a      	ldrb	r2, [r1, #2]
    30ee:	4373      	muls	r3, r6
    30f0:	4022      	ands	r2, r4
    30f2:	4d0a      	ldr	r5, [pc, #40]	; (311c <dmConnSmExecute+0x38>)
    30f4:	189b      	adds	r3, r3, r2
    30f6:	005b      	lsls	r3, r3, #1
    30f8:	18ea      	adds	r2, r5, r3
    30fa:	7852      	ldrb	r2, [r2, #1]
    30fc:	5d5b      	ldrb	r3, [r3, r5]
    30fe:	4d08      	ldr	r5, [pc, #32]	; (3120 <dmConnSmExecute+0x3c>)
    3100:	7543      	strb	r3, [r0, #21]
    3102:	0913      	lsrs	r3, r2, #4
    3104:	009b      	lsls	r3, r3, #2
    3106:	595b      	ldr	r3, [r3, r5]
    3108:	2b00      	cmp	r3, #0
    310a:	d004      	beq.n	3116 <dmConnSmExecute+0x32>
    310c:	4014      	ands	r4, r2
    310e:	00a4      	lsls	r4, r4, #2
    3110:	58e3      	ldr	r3, [r4, r3]
    3112:	4798      	blx	r3
    3114:	e001      	b.n	311a <dmConnSmExecute+0x36>
    3116:	f7ff fb2b 	bl	2770 <dmConnSmActNone>
    311a:	bd70      	pop	{r4, r5, r6, pc}
    311c:	000122a8 	.word	0x000122a8
    3120:	10001734 	.word	0x10001734

00003124 <dmDevHciHandler>:
    3124:	7883      	ldrb	r3, [r0, #2]
    3126:	b510      	push	{r4, lr}
    3128:	2b00      	cmp	r3, #0
    312a:	d105      	bne.n	3138 <dmDevHciHandler+0x14>
    312c:	4a07      	ldr	r2, [pc, #28]	; (314c <dmDevHciHandler+0x28>)
    312e:	7413      	strb	r3, [r2, #16]
    3130:	3320      	adds	r3, #32
    3132:	7083      	strb	r3, [r0, #2]
    3134:	6893      	ldr	r3, [r2, #8]
    3136:	e007      	b.n	3148 <dmDevHciHandler+0x24>
    3138:	2b13      	cmp	r3, #19
    313a:	d001      	beq.n	3140 <dmDevHciHandler+0x1c>
    313c:	2b14      	cmp	r3, #20
    313e:	d104      	bne.n	314a <dmDevHciHandler+0x26>
    3140:	3340      	adds	r3, #64	; 0x40
    3142:	7083      	strb	r3, [r0, #2]
    3144:	4b01      	ldr	r3, [pc, #4]	; (314c <dmDevHciHandler+0x28>)
    3146:	689b      	ldr	r3, [r3, #8]
    3148:	4798      	blx	r3
    314a:	bd10      	pop	{r4, pc}
    314c:	10001740 	.word	0x10001740

00003150 <dmDevActReset>:
    3150:	b510      	push	{r4, lr}
    3152:	4b08      	ldr	r3, [pc, #32]	; (3174 <dmDevActReset+0x24>)
    3154:	7c1c      	ldrb	r4, [r3, #16]
    3156:	2c00      	cmp	r4, #0
    3158:	d10a      	bne.n	3170 <dmDevActReset+0x20>
    315a:	2201      	movs	r2, #1
    315c:	741a      	strb	r2, [r3, #16]
    315e:	4b06      	ldr	r3, [pc, #24]	; (3178 <dmDevActReset+0x28>)
    3160:	591b      	ldr	r3, [r3, r4]
    3162:	3404      	adds	r4, #4
    3164:	681b      	ldr	r3, [r3, #0]
    3166:	4798      	blx	r3
    3168:	2c30      	cmp	r4, #48	; 0x30
    316a:	d1f8      	bne.n	315e <dmDevActReset+0xe>
    316c:	f004 fc5a 	bl	7a24 <HciResetSequence>
    3170:	bd10      	pop	{r4, pc}
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	10001740 	.word	0x10001740
    3178:	10001054 	.word	0x10001054

0000317c <dmDevMsgHandler>:
    317c:	b510      	push	{r4, lr}
    317e:	f7ff ffe7 	bl	3150 <dmDevActReset>
    3182:	bd10      	pop	{r4, pc}

00003184 <DmDevReset>:
    3184:	b510      	push	{r4, lr}
    3186:	2004      	movs	r0, #4
    3188:	f007 fe5b 	bl	ae42 <WsfMsgAlloc>
    318c:	1e01      	subs	r1, r0, #0
    318e:	d005      	beq.n	319c <DmDevReset+0x18>
    3190:	2370      	movs	r3, #112	; 0x70
    3192:	7083      	strb	r3, [r0, #2]
    3194:	4b02      	ldr	r3, [pc, #8]	; (31a0 <DmDevReset+0x1c>)
    3196:	7b18      	ldrb	r0, [r3, #12]
    3198:	f007 fe77 	bl	ae8a <WsfMsgSend>
    319c:	bd10      	pop	{r4, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	10001740 	.word	0x10001740

000031a4 <DmDevSetRandAddr>:
    31a4:	b510      	push	{r4, lr}
    31a6:	0004      	movs	r4, r0
    31a8:	0001      	movs	r1, r0
    31aa:	4803      	ldr	r0, [pc, #12]	; (31b8 <DmDevSetRandAddr+0x14>)
    31ac:	f00a f82c 	bl	d208 <BdaCpy>
    31b0:	0020      	movs	r0, r4
    31b2:	f003 fda0 	bl	6cf6 <HciLeSetRandAddrCmd>
    31b6:	bd10      	pop	{r4, pc}
    31b8:	10001740 	.word	0x10001740

000031bc <DmDevWhiteListAdd>:
    31bc:	b510      	push	{r4, lr}
    31be:	f003 f96f 	bl	64a0 <HciLeAddDevWhiteListCmd>
    31c2:	bd10      	pop	{r4, pc}

000031c4 <DmDevWhiteListRemove>:
    31c4:	b510      	push	{r4, lr}
    31c6:	f003 fc9f 	bl	6b08 <HciLeRemoveDevWhiteListCmd>
    31ca:	bd10      	pop	{r4, pc}

000031cc <DmDevWhiteListClear>:
    31cc:	b510      	push	{r4, lr}
    31ce:	f003 f98c 	bl	64ea <HciLeClearWhiteListCmd>
    31d2:	bd10      	pop	{r4, pc}

000031d4 <dmDevSetFilterPolicy>:
    31d4:	2901      	cmp	r1, #1
    31d6:	d00c      	beq.n	31f2 <dmDevSetFilterPolicy+0x1e>
    31d8:	2900      	cmp	r1, #0
    31da:	d002      	beq.n	31e2 <dmDevSetFilterPolicy+0xe>
    31dc:	2902      	cmp	r1, #2
    31de:	d00e      	beq.n	31fe <dmDevSetFilterPolicy+0x2a>
    31e0:	e013      	b.n	320a <dmDevSetFilterPolicy+0x36>
    31e2:	000b      	movs	r3, r1
    31e4:	2a03      	cmp	r2, #3
    31e6:	d811      	bhi.n	320c <dmDevSetFilterPolicy+0x38>
    31e8:	4b09      	ldr	r3, [pc, #36]	; (3210 <dmDevSetFilterPolicy+0x3c>)
    31ea:	1818      	adds	r0, r3, r0
    31ec:	7442      	strb	r2, [r0, #17]
    31ee:	2301      	movs	r3, #1
    31f0:	e00c      	b.n	320c <dmDevSetFilterPolicy+0x38>
    31f2:	2300      	movs	r3, #0
    31f4:	2a03      	cmp	r2, #3
    31f6:	d809      	bhi.n	320c <dmDevSetFilterPolicy+0x38>
    31f8:	4b05      	ldr	r3, [pc, #20]	; (3210 <dmDevSetFilterPolicy+0x3c>)
    31fa:	749a      	strb	r2, [r3, #18]
    31fc:	e7f7      	b.n	31ee <dmDevSetFilterPolicy+0x1a>
    31fe:	2300      	movs	r3, #0
    3200:	2a01      	cmp	r2, #1
    3202:	d803      	bhi.n	320c <dmDevSetFilterPolicy+0x38>
    3204:	4b02      	ldr	r3, [pc, #8]	; (3210 <dmDevSetFilterPolicy+0x3c>)
    3206:	74da      	strb	r2, [r3, #19]
    3208:	e7f1      	b.n	31ee <dmDevSetFilterPolicy+0x1a>
    320a:	2300      	movs	r3, #0
    320c:	0018      	movs	r0, r3
    320e:	4770      	bx	lr
    3210:	10001740 	.word	0x10001740

00003214 <DmDevSetFilterPolicy>:
    3214:	b510      	push	{r4, lr}
    3216:	000a      	movs	r2, r1
    3218:	0001      	movs	r1, r0
    321a:	2000      	movs	r0, #0
    321c:	f7ff ffda 	bl	31d4 <dmDevSetFilterPolicy>
    3220:	bd10      	pop	{r4, pc}

00003222 <DmDevSetExtFilterPolicy>:
    3222:	b510      	push	{r4, lr}
    3224:	f7ff ffd6 	bl	31d4 <dmDevSetFilterPolicy>
    3228:	bd10      	pop	{r4, pc}

0000322a <DmDevVsInit>:
    322a:	b510      	push	{r4, lr}
    322c:	f006 fef3 	bl	a016 <HciVsInit>
    3230:	bd10      	pop	{r4, pc}
    3232:	46c0      	nop			; (mov r8, r8)

00003234 <dmHciEvtCback>:
    3234:	b510      	push	{r4, lr}
    3236:	4b07      	ldr	r3, [pc, #28]	; (3254 <dmHciEvtCback+0x20>)
    3238:	7c1a      	ldrb	r2, [r3, #16]
    323a:	7883      	ldrb	r3, [r0, #2]
    323c:	2a00      	cmp	r2, #0
    323e:	d001      	beq.n	3244 <dmHciEvtCback+0x10>
    3240:	2b00      	cmp	r3, #0
    3242:	d106      	bne.n	3252 <dmHciEvtCback+0x1e>
    3244:	4a04      	ldr	r2, [pc, #16]	; (3258 <dmHciEvtCback+0x24>)
    3246:	5cd3      	ldrb	r3, [r2, r3]
    3248:	4a04      	ldr	r2, [pc, #16]	; (325c <dmHciEvtCback+0x28>)
    324a:	009b      	lsls	r3, r3, #2
    324c:	589b      	ldr	r3, [r3, r2]
    324e:	685b      	ldr	r3, [r3, #4]
    3250:	4798      	blx	r3
    3252:	bd10      	pop	{r4, pc}
    3254:	10001740 	.word	0x10001740
    3258:	00012338 	.word	0x00012338
    325c:	10001054 	.word	0x10001054

00003260 <dmEmptyReset>:
    3260:	4770      	bx	lr

00003262 <dmEmptyHandler>:
    3262:	4770      	bx	lr

00003264 <DmRegister>:
    3264:	b510      	push	{r4, lr}
    3266:	4a0c      	ldr	r2, [pc, #48]	; (3298 <DmRegister+0x34>)
    3268:	4b0c      	ldr	r3, [pc, #48]	; (329c <DmRegister+0x38>)
    326a:	4c0d      	ldr	r4, [pc, #52]	; (32a0 <DmRegister+0x3c>)
    326c:	6a12      	ldr	r2, [r2, #32]
    326e:	333c      	adds	r3, #60	; 0x3c
    3270:	b09a      	sub	sp, #104	; 0x68
    3272:	60a0      	str	r0, [r4, #8]
    3274:	429a      	cmp	r2, r3
    3276:	d00c      	beq.n	3292 <DmRegister+0x2e>
    3278:	f004 fd70 	bl	7d5c <HciGetMaxRxAclLen>
    327c:	2844      	cmp	r0, #68	; 0x44
    327e:	dc08      	bgt.n	3292 <DmRegister+0x2e>
    3280:	2300      	movs	r3, #0
    3282:	a801      	add	r0, sp, #4
    3284:	8003      	strh	r3, [r0, #0]
    3286:	3352      	adds	r3, #82	; 0x52
    3288:	7083      	strb	r3, [r0, #2]
    328a:	3b51      	subs	r3, #81	; 0x51
    328c:	70c3      	strb	r3, [r0, #3]
    328e:	68a3      	ldr	r3, [r4, #8]
    3290:	4798      	blx	r3
    3292:	b01a      	add	sp, #104	; 0x68
    3294:	bd10      	pop	{r4, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	10001054 	.word	0x10001054
    329c:	00012338 	.word	0x00012338
    32a0:	10001740 	.word	0x10001740

000032a4 <DmFindAdType>:
    32a4:	b530      	push	{r4, r5, lr}
    32a6:	2900      	cmp	r1, #0
    32a8:	d00e      	beq.n	32c8 <DmFindAdType+0x24>
    32aa:	7813      	ldrb	r3, [r2, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d00f      	beq.n	32d0 <DmFindAdType+0x2c>
    32b0:	b29c      	uxth	r4, r3
    32b2:	42a1      	cmp	r1, r4
    32b4:	d908      	bls.n	32c8 <DmFindAdType+0x24>
    32b6:	7855      	ldrb	r5, [r2, #1]
    32b8:	4285      	cmp	r5, r0
    32ba:	d007      	beq.n	32cc <DmFindAdType+0x28>
    32bc:	43e4      	mvns	r4, r4
    32be:	3301      	adds	r3, #1
    32c0:	1909      	adds	r1, r1, r4
    32c2:	b289      	uxth	r1, r1
    32c4:	18d2      	adds	r2, r2, r3
    32c6:	e7ee      	b.n	32a6 <DmFindAdType+0x2>
    32c8:	2000      	movs	r0, #0
    32ca:	e002      	b.n	32d2 <DmFindAdType+0x2e>
    32cc:	0010      	movs	r0, r2
    32ce:	e000      	b.n	32d2 <DmFindAdType+0x2e>
    32d0:	0018      	movs	r0, r3
    32d2:	bd30      	pop	{r4, r5, pc}

000032d4 <DmHandlerInit>:
    32d4:	2200      	movs	r2, #0
    32d6:	b510      	push	{r4, lr}
    32d8:	4b03      	ldr	r3, [pc, #12]	; (32e8 <DmHandlerInit+0x14>)
    32da:	7318      	strb	r0, [r3, #12]
    32dc:	4803      	ldr	r0, [pc, #12]	; (32ec <DmHandlerInit+0x18>)
    32de:	751a      	strb	r2, [r3, #20]
    32e0:	741a      	strb	r2, [r3, #16]
    32e2:	f009 fc25 	bl	cb30 <HciEvtRegister>
    32e6:	bd10      	pop	{r4, pc}
    32e8:	10001740 	.word	0x10001740
    32ec:	00003235 	.word	0x00003235

000032f0 <DmHandler>:
    32f0:	b510      	push	{r4, lr}
    32f2:	2900      	cmp	r1, #0
    32f4:	d00b      	beq.n	330e <DmHandler+0x1e>
    32f6:	4b06      	ldr	r3, [pc, #24]	; (3310 <DmHandler+0x20>)
    32f8:	7c1b      	ldrb	r3, [r3, #16]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d107      	bne.n	330e <DmHandler+0x1e>
    32fe:	788b      	ldrb	r3, [r1, #2]
    3300:	4a04      	ldr	r2, [pc, #16]	; (3314 <DmHandler+0x24>)
    3302:	091b      	lsrs	r3, r3, #4
    3304:	009b      	lsls	r3, r3, #2
    3306:	589b      	ldr	r3, [r3, r2]
    3308:	0008      	movs	r0, r1
    330a:	689b      	ldr	r3, [r3, #8]
    330c:	4798      	blx	r3
    330e:	bd10      	pop	{r4, pc}
    3310:	10001740 	.word	0x10001740
    3314:	10001054 	.word	0x10001054

00003318 <DmLlPrivEnabled>:
    3318:	4b01      	ldr	r3, [pc, #4]	; (3320 <DmLlPrivEnabled+0x8>)
    331a:	7d18      	ldrb	r0, [r3, #20]
    331c:	4770      	bx	lr
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	10001740 	.word	0x10001740

00003324 <DmLlAddrType>:
    3324:	4b05      	ldr	r3, [pc, #20]	; (333c <DmLlAddrType+0x18>)
    3326:	7d1b      	ldrb	r3, [r3, #20]
    3328:	2b00      	cmp	r3, #0
    332a:	d006      	beq.n	333a <DmLlAddrType+0x16>
    332c:	2800      	cmp	r0, #0
    332e:	d003      	beq.n	3338 <DmLlAddrType+0x14>
    3330:	2801      	cmp	r0, #1
    3332:	d102      	bne.n	333a <DmLlAddrType+0x16>
    3334:	2003      	movs	r0, #3
    3336:	e000      	b.n	333a <DmLlAddrType+0x16>
    3338:	2002      	movs	r0, #2
    333a:	4770      	bx	lr
    333c:	10001740 	.word	0x10001740

00003340 <DmHostAddrType>:
    3340:	4b05      	ldr	r3, [pc, #20]	; (3358 <DmHostAddrType+0x18>)
    3342:	7d1b      	ldrb	r3, [r3, #20]
    3344:	2b00      	cmp	r3, #0
    3346:	d006      	beq.n	3356 <DmHostAddrType+0x16>
    3348:	2802      	cmp	r0, #2
    334a:	d003      	beq.n	3354 <DmHostAddrType+0x14>
    334c:	2803      	cmp	r0, #3
    334e:	d102      	bne.n	3356 <DmHostAddrType+0x16>
    3350:	2001      	movs	r0, #1
    3352:	e000      	b.n	3356 <DmHostAddrType+0x16>
    3354:	2000      	movs	r0, #0
    3356:	4770      	bx	lr
    3358:	10001740 	.word	0x10001740

0000335c <DmSizeOfEvt>:
    335c:	7883      	ldrb	r3, [r0, #2]
    335e:	2004      	movs	r0, #4
    3360:	3b20      	subs	r3, #32
    3362:	b2da      	uxtb	r2, r3
    3364:	2a34      	cmp	r2, #52	; 0x34
    3366:	d803      	bhi.n	3370 <DmSizeOfEvt+0x14>
    3368:	4a02      	ldr	r2, [pc, #8]	; (3374 <DmSizeOfEvt+0x18>)
    336a:	005b      	lsls	r3, r3, #1
    336c:	3248      	adds	r2, #72	; 0x48
    336e:	5a98      	ldrh	r0, [r3, r2]
    3370:	4770      	bx	lr
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	00012338 	.word	0x00012338

00003378 <DmScanPhyToIdx>:
    3378:	2000      	movs	r0, #0
    337a:	4770      	bx	lr

0000337c <dmInitPhyToIdx>:
    337c:	0003      	movs	r3, r0
    337e:	2000      	movs	r0, #0
    3380:	2b01      	cmp	r3, #1
    3382:	d00e      	beq.n	33a2 <dmInitPhyToIdx+0x26>
    3384:	2b02      	cmp	r3, #2
    3386:	d104      	bne.n	3392 <dmInitPhyToIdx+0x16>
    3388:	3901      	subs	r1, #1
    338a:	1e48      	subs	r0, r1, #1
    338c:	4181      	sbcs	r1, r0
    338e:	b2c8      	uxtb	r0, r1
    3390:	e007      	b.n	33a2 <dmInitPhyToIdx+0x26>
    3392:	2000      	movs	r0, #0
    3394:	2901      	cmp	r1, #1
    3396:	d004      	beq.n	33a2 <dmInitPhyToIdx+0x26>
    3398:	3902      	subs	r1, #2
    339a:	4248      	negs	r0, r1
    339c:	4141      	adcs	r1, r0
    339e:	2002      	movs	r0, #2
    33a0:	1a40      	subs	r0, r0, r1
    33a2:	4770      	bx	lr

000033a4 <DmInitPhyToIdx>:
    33a4:	2000      	movs	r0, #0
    33a6:	4770      	bx	lr

000033a8 <dmPrivMsgHandler>:
    33a8:	230f      	movs	r3, #15
    33aa:	7882      	ldrb	r2, [r0, #2]
    33ac:	b510      	push	{r4, lr}
    33ae:	4013      	ands	r3, r2
    33b0:	4a02      	ldr	r2, [pc, #8]	; (33bc <dmPrivMsgHandler+0x14>)
    33b2:	009b      	lsls	r3, r3, #2
    33b4:	589b      	ldr	r3, [r3, r2]
    33b6:	4798      	blx	r3
    33b8:	bd10      	pop	{r4, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	000123ec 	.word	0x000123ec

000033c0 <dmPrivReset>:
    33c0:	2300      	movs	r3, #0
    33c2:	4a02      	ldr	r2, [pc, #8]	; (33cc <dmPrivReset+0xc>)
    33c4:	70d3      	strb	r3, [r2, #3]
    33c6:	4a02      	ldr	r2, [pc, #8]	; (33d0 <dmPrivReset+0x10>)
    33c8:	7513      	strb	r3, [r2, #20]
    33ca:	4770      	bx	lr
    33cc:	10001758 	.word	0x10001758
    33d0:	10001740 	.word	0x10001740

000033d4 <dmPrivActAesCmpl>:
    33d4:	b570      	push	{r4, r5, r6, lr}
    33d6:	4d0b      	ldr	r5, [pc, #44]	; (3404 <dmPrivActAesCmpl+0x30>)
    33d8:	0004      	movs	r4, r0
    33da:	6841      	ldr	r1, [r0, #4]
    33dc:	2203      	movs	r2, #3
    33de:	0028      	movs	r0, r5
    33e0:	f00e f83c 	bl	1145c <memcmp>
    33e4:	2800      	cmp	r0, #0
    33e6:	d101      	bne.n	33ec <dmPrivActAesCmpl+0x18>
    33e8:	70e0      	strb	r0, [r4, #3]
    33ea:	e001      	b.n	33f0 <dmPrivActAesCmpl+0x1c>
    33ec:	2305      	movs	r3, #5
    33ee:	70e3      	strb	r3, [r4, #3]
    33f0:	2300      	movs	r3, #0
    33f2:	70eb      	strb	r3, [r5, #3]
    33f4:	3337      	adds	r3, #55	; 0x37
    33f6:	70a3      	strb	r3, [r4, #2]
    33f8:	4b03      	ldr	r3, [pc, #12]	; (3408 <dmPrivActAesCmpl+0x34>)
    33fa:	0020      	movs	r0, r4
    33fc:	689b      	ldr	r3, [r3, #8]
    33fe:	4798      	blx	r3
    3400:	bd70      	pop	{r4, r5, r6, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	10001758 	.word	0x10001758
    3408:	10001740 	.word	0x10001740

0000340c <dmPrivActAddDevToResList>:
    340c:	0003      	movs	r3, r0
    340e:	0002      	movs	r2, r0
    3410:	b510      	push	{r4, lr}
    3412:	0004      	movs	r4, r0
    3414:	1d41      	adds	r1, r0, #5
    3416:	331b      	adds	r3, #27
    3418:	320b      	adds	r2, #11
    341a:	7900      	ldrb	r0, [r0, #4]
    341c:	f003 fdbf 	bl	6f9e <HciLeAddDeviceToResolvingListCmd>
    3420:	0022      	movs	r2, r4
    3422:	322b      	adds	r2, #43	; 0x2b
    3424:	7812      	ldrb	r2, [r2, #0]
    3426:	4b02      	ldr	r3, [pc, #8]	; (3430 <dmPrivActAddDevToResList+0x24>)
    3428:	721a      	strb	r2, [r3, #8]
    342a:	8822      	ldrh	r2, [r4, #0]
    342c:	809a      	strh	r2, [r3, #4]
    342e:	bd10      	pop	{r4, pc}
    3430:	10001758 	.word	0x10001758

00003434 <dmPrivActRemDevFromResList>:
    3434:	b510      	push	{r4, lr}
    3436:	0004      	movs	r4, r0
    3438:	1d41      	adds	r1, r0, #5
    343a:	7900      	ldrb	r0, [r0, #4]
    343c:	f003 fde3 	bl	7006 <HciLeRemoveDeviceFromResolvingList>
    3440:	8822      	ldrh	r2, [r4, #0]
    3442:	4b01      	ldr	r3, [pc, #4]	; (3448 <dmPrivActRemDevFromResList+0x14>)
    3444:	80da      	strh	r2, [r3, #6]
    3446:	bd10      	pop	{r4, pc}
    3448:	10001758 	.word	0x10001758

0000344c <dmPrivActClearResList>:
    344c:	b510      	push	{r4, lr}
    344e:	f003 fdff 	bl	7050 <HciLeClearResolvingList>
    3452:	bd10      	pop	{r4, pc}

00003454 <dmPrivActSetPrivacyMode>:
    3454:	b510      	push	{r4, lr}
    3456:	1d41      	adds	r1, r0, #5
    3458:	7ac2      	ldrb	r2, [r0, #11]
    345a:	7900      	ldrb	r0, [r0, #4]
    345c:	f003 feab 	bl	71b6 <HciLeSetPrivacyModeCmd>
    3460:	bd10      	pop	{r4, pc}

00003462 <dmPrivActResolveAddr>:
    3462:	b5f0      	push	{r4, r5, r6, r7, lr}
    3464:	4d15      	ldr	r5, [pc, #84]	; (34bc <dmPrivActResolveAddr+0x5a>)
    3466:	b087      	sub	sp, #28
    3468:	78ef      	ldrb	r7, [r5, #3]
    346a:	0004      	movs	r4, r0
    346c:	4e14      	ldr	r6, [pc, #80]	; (34c0 <dmPrivActResolveAddr+0x5e>)
    346e:	2f00      	cmp	r7, #0
    3470:	d11c      	bne.n	34ac <dmPrivActResolveAddr+0x4a>
    3472:	0001      	movs	r1, r0
    3474:	2203      	movs	r2, #3
    3476:	3114      	adds	r1, #20
    3478:	0028      	movs	r0, r5
    347a:	f00d fffe 	bl	1147a <memcpy>
    347e:	0021      	movs	r1, r4
    3480:	2203      	movs	r2, #3
    3482:	3117      	adds	r1, #23
    3484:	a802      	add	r0, sp, #8
    3486:	f00d fff8 	bl	1147a <memcpy>
    348a:	200b      	movs	r0, #11
    348c:	0039      	movs	r1, r7
    348e:	220d      	movs	r2, #13
    3490:	4468      	add	r0, sp
    3492:	f00e f817 	bl	114c4 <memset>
    3496:	2301      	movs	r3, #1
    3498:	2161      	movs	r1, #97	; 0x61
    349a:	70eb      	strb	r3, [r5, #3]
    349c:	7b32      	ldrb	r2, [r6, #12]
    349e:	8823      	ldrh	r3, [r4, #0]
    34a0:	9100      	str	r1, [sp, #0]
    34a2:	1d20      	adds	r0, r4, #4
    34a4:	a902      	add	r1, sp, #8
    34a6:	f006 fffb 	bl	a4a0 <SecAes>
    34aa:	e005      	b.n	34b8 <dmPrivActResolveAddr+0x56>
    34ac:	2307      	movs	r3, #7
    34ae:	70c3      	strb	r3, [r0, #3]
    34b0:	3330      	adds	r3, #48	; 0x30
    34b2:	7083      	strb	r3, [r0, #2]
    34b4:	68b3      	ldr	r3, [r6, #8]
    34b6:	4798      	blx	r3
    34b8:	b007      	add	sp, #28
    34ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34bc:	10001758 	.word	0x10001758
    34c0:	10001740 	.word	0x10001740

000034c4 <dmPrivActSetAddrResEnable>:
    34c4:	b510      	push	{r4, lr}
    34c6:	7904      	ldrb	r4, [r0, #4]
    34c8:	0020      	movs	r0, r4
    34ca:	f003 fe31 	bl	7130 <HciLeSetAddrResolutionEnable>
    34ce:	4b01      	ldr	r3, [pc, #4]	; (34d4 <dmPrivActSetAddrResEnable+0x10>)
    34d0:	725c      	strb	r4, [r3, #9]
    34d2:	bd10      	pop	{r4, pc}
    34d4:	10001758 	.word	0x10001758

000034d8 <dmPrivHciHandler>:
    34d8:	b570      	push	{r4, r5, r6, lr}
    34da:	0004      	movs	r4, r0
    34dc:	7880      	ldrb	r0, [r0, #2]
    34de:	3815      	subs	r0, #21
    34e0:	2805      	cmp	r0, #5
    34e2:	d83d      	bhi.n	3560 <dmPrivHciHandler+0x88>
    34e4:	4d1f      	ldr	r5, [pc, #124]	; (3564 <dmPrivHciHandler+0x8c>)
    34e6:	f002 fe93 	bl	6210 <__gnu_thumb1_case_uqi>
    34ea:	1703      	.short	0x1703
    34ec:	302d2b1d 	.word	0x302d2b1d
    34f0:	2339      	movs	r3, #57	; 0x39
    34f2:	4e1d      	ldr	r6, [pc, #116]	; (3568 <dmPrivHciHandler+0x90>)
    34f4:	70a3      	strb	r3, [r4, #2]
    34f6:	88b3      	ldrh	r3, [r6, #4]
    34f8:	8023      	strh	r3, [r4, #0]
    34fa:	78e3      	ldrb	r3, [r4, #3]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d12c      	bne.n	355a <dmPrivHciHandler+0x82>
    3500:	7a33      	ldrb	r3, [r6, #8]
    3502:	2b00      	cmp	r3, #0
    3504:	d029      	beq.n	355a <dmPrivHciHandler+0x82>
    3506:	7d2b      	ldrb	r3, [r5, #20]
    3508:	2b00      	cmp	r3, #0
    350a:	d126      	bne.n	355a <dmPrivHciHandler+0x82>
    350c:	2001      	movs	r0, #1
    350e:	f003 fe0f 	bl	7130 <HciLeSetAddrResolutionEnable>
    3512:	2301      	movs	r3, #1
    3514:	7273      	strb	r3, [r6, #9]
    3516:	e020      	b.n	355a <dmPrivHciHandler+0x82>
    3518:	233a      	movs	r3, #58	; 0x3a
    351a:	70a3      	strb	r3, [r4, #2]
    351c:	4b12      	ldr	r3, [pc, #72]	; (3568 <dmPrivHciHandler+0x90>)
    351e:	88db      	ldrh	r3, [r3, #6]
    3520:	8023      	strh	r3, [r4, #0]
    3522:	e01a      	b.n	355a <dmPrivHciHandler+0x82>
    3524:	233b      	movs	r3, #59	; 0x3b
    3526:	78e6      	ldrb	r6, [r4, #3]
    3528:	70a3      	strb	r3, [r4, #2]
    352a:	2e00      	cmp	r6, #0
    352c:	d115      	bne.n	355a <dmPrivHciHandler+0x82>
    352e:	7d2b      	ldrb	r3, [r5, #20]
    3530:	2b00      	cmp	r3, #0
    3532:	d012      	beq.n	355a <dmPrivHciHandler+0x82>
    3534:	0030      	movs	r0, r6
    3536:	f003 fdfb 	bl	7130 <HciLeSetAddrResolutionEnable>
    353a:	4b0b      	ldr	r3, [pc, #44]	; (3568 <dmPrivHciHandler+0x90>)
    353c:	725e      	strb	r6, [r3, #9]
    353e:	e00c      	b.n	355a <dmPrivHciHandler+0x82>
    3540:	233c      	movs	r3, #60	; 0x3c
    3542:	e000      	b.n	3546 <dmPrivHciHandler+0x6e>
    3544:	233d      	movs	r3, #61	; 0x3d
    3546:	70a3      	strb	r3, [r4, #2]
    3548:	e007      	b.n	355a <dmPrivHciHandler+0x82>
    354a:	233e      	movs	r3, #62	; 0x3e
    354c:	70a3      	strb	r3, [r4, #2]
    354e:	78e3      	ldrb	r3, [r4, #3]
    3550:	2b00      	cmp	r3, #0
    3552:	d102      	bne.n	355a <dmPrivHciHandler+0x82>
    3554:	4b04      	ldr	r3, [pc, #16]	; (3568 <dmPrivHciHandler+0x90>)
    3556:	7a5b      	ldrb	r3, [r3, #9]
    3558:	752b      	strb	r3, [r5, #20]
    355a:	68ab      	ldr	r3, [r5, #8]
    355c:	0020      	movs	r0, r4
    355e:	4798      	blx	r3
    3560:	bd70      	pop	{r4, r5, r6, pc}
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	10001740 	.word	0x10001740
    3568:	10001758 	.word	0x10001758

0000356c <DmPrivInit>:
    356c:	4b02      	ldr	r3, [pc, #8]	; (3578 <DmPrivInit+0xc>)
    356e:	4a03      	ldr	r2, [pc, #12]	; (357c <DmPrivInit+0x10>)
    3570:	331c      	adds	r3, #28
    3572:	6193      	str	r3, [r2, #24]
    3574:	4770      	bx	lr
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	000123ec 	.word	0x000123ec
    357c:	10001054 	.word	0x10001054

00003580 <DmPrivResolveAddr>:
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3582:	0005      	movs	r5, r0
    3584:	201a      	movs	r0, #26
    3586:	000e      	movs	r6, r1
    3588:	0017      	movs	r7, r2
    358a:	f007 fc5a 	bl	ae42 <WsfMsgAlloc>
    358e:	1e04      	subs	r4, r0, #0
    3590:	d010      	beq.n	35b4 <DmPrivResolveAddr+0x34>
    3592:	2360      	movs	r3, #96	; 0x60
    3594:	8007      	strh	r7, [r0, #0]
    3596:	7083      	strb	r3, [r0, #2]
    3598:	0031      	movs	r1, r6
    359a:	3004      	adds	r0, #4
    359c:	f009 fe7f 	bl	d29e <Calc128Cpy>
    35a0:	0020      	movs	r0, r4
    35a2:	0029      	movs	r1, r5
    35a4:	3014      	adds	r0, #20
    35a6:	f009 fe2f 	bl	d208 <BdaCpy>
    35aa:	4b03      	ldr	r3, [pc, #12]	; (35b8 <DmPrivResolveAddr+0x38>)
    35ac:	0021      	movs	r1, r4
    35ae:	7b18      	ldrb	r0, [r3, #12]
    35b0:	f007 fc6b 	bl	ae8a <WsfMsgSend>
    35b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	10001740 	.word	0x10001740

000035bc <DmPrivAddDevToResList>:
    35bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35be:	b085      	sub	sp, #20
    35c0:	9302      	str	r3, [sp, #8]
    35c2:	ab0a      	add	r3, sp, #40	; 0x28
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	0006      	movs	r6, r0
    35c8:	9303      	str	r3, [sp, #12]
    35ca:	202c      	movs	r0, #44	; 0x2c
    35cc:	ab0b      	add	r3, sp, #44	; 0x2c
    35ce:	9101      	str	r1, [sp, #4]
    35d0:	0015      	movs	r5, r2
    35d2:	881f      	ldrh	r7, [r3, #0]
    35d4:	f007 fc35 	bl	ae42 <WsfMsgAlloc>
    35d8:	1e04      	subs	r4, r0, #0
    35da:	d01b      	beq.n	3614 <DmPrivAddDevToResList+0x58>
    35dc:	2362      	movs	r3, #98	; 0x62
    35de:	8007      	strh	r7, [r0, #0]
    35e0:	7083      	strb	r3, [r0, #2]
    35e2:	7106      	strb	r6, [r0, #4]
    35e4:	9901      	ldr	r1, [sp, #4]
    35e6:	3005      	adds	r0, #5
    35e8:	f009 fe0e 	bl	d208 <BdaCpy>
    35ec:	0020      	movs	r0, r4
    35ee:	0029      	movs	r1, r5
    35f0:	300b      	adds	r0, #11
    35f2:	f009 fe54 	bl	d29e <Calc128Cpy>
    35f6:	0020      	movs	r0, r4
    35f8:	9902      	ldr	r1, [sp, #8]
    35fa:	301b      	adds	r0, #27
    35fc:	f009 fe4f 	bl	d29e <Calc128Cpy>
    3600:	466a      	mov	r2, sp
    3602:	0023      	movs	r3, r4
    3604:	7b12      	ldrb	r2, [r2, #12]
    3606:	332b      	adds	r3, #43	; 0x2b
    3608:	701a      	strb	r2, [r3, #0]
    360a:	4b03      	ldr	r3, [pc, #12]	; (3618 <DmPrivAddDevToResList+0x5c>)
    360c:	0021      	movs	r1, r4
    360e:	7b18      	ldrb	r0, [r3, #12]
    3610:	f007 fc3b 	bl	ae8a <WsfMsgSend>
    3614:	b005      	add	sp, #20
    3616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3618:	10001740 	.word	0x10001740

0000361c <DmPrivRemDevFromResList>:
    361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361e:	0006      	movs	r6, r0
    3620:	200c      	movs	r0, #12
    3622:	000d      	movs	r5, r1
    3624:	0017      	movs	r7, r2
    3626:	f007 fc0c 	bl	ae42 <WsfMsgAlloc>
    362a:	1e04      	subs	r4, r0, #0
    362c:	d00c      	beq.n	3648 <DmPrivRemDevFromResList+0x2c>
    362e:	2363      	movs	r3, #99	; 0x63
    3630:	8007      	strh	r7, [r0, #0]
    3632:	7083      	strb	r3, [r0, #2]
    3634:	7106      	strb	r6, [r0, #4]
    3636:	0029      	movs	r1, r5
    3638:	3005      	adds	r0, #5
    363a:	f009 fde5 	bl	d208 <BdaCpy>
    363e:	4b03      	ldr	r3, [pc, #12]	; (364c <DmPrivRemDevFromResList+0x30>)
    3640:	0021      	movs	r1, r4
    3642:	7b18      	ldrb	r0, [r3, #12]
    3644:	f007 fc21 	bl	ae8a <WsfMsgSend>
    3648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    364a:	46c0      	nop			; (mov r8, r8)
    364c:	10001740 	.word	0x10001740

00003650 <DmPrivClearResList>:
    3650:	b510      	push	{r4, lr}
    3652:	202c      	movs	r0, #44	; 0x2c
    3654:	f007 fbf5 	bl	ae42 <WsfMsgAlloc>
    3658:	1e01      	subs	r1, r0, #0
    365a:	d005      	beq.n	3668 <DmPrivClearResList+0x18>
    365c:	2364      	movs	r3, #100	; 0x64
    365e:	7083      	strb	r3, [r0, #2]
    3660:	4b02      	ldr	r3, [pc, #8]	; (366c <DmPrivClearResList+0x1c>)
    3662:	7b18      	ldrb	r0, [r3, #12]
    3664:	f007 fc11 	bl	ae8a <WsfMsgSend>
    3668:	bd10      	pop	{r4, pc}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	10001740 	.word	0x10001740

00003670 <DmPrivReadPeerResolvableAddr>:
    3670:	b510      	push	{r4, lr}
    3672:	f003 fd13 	bl	709c <HciLeReadPeerResolvableAddr>
    3676:	bd10      	pop	{r4, pc}

00003678 <DmPrivReadLocalResolvableAddr>:
    3678:	b510      	push	{r4, lr}
    367a:	f003 fd34 	bl	70e6 <HciLeReadLocalResolvableAddr>
    367e:	bd10      	pop	{r4, pc}

00003680 <DmPrivSetAddrResEnable>:
    3680:	b510      	push	{r4, lr}
    3682:	0004      	movs	r4, r0
    3684:	202c      	movs	r0, #44	; 0x2c
    3686:	f007 fbdc 	bl	ae42 <WsfMsgAlloc>
    368a:	1e01      	subs	r1, r0, #0
    368c:	d008      	beq.n	36a0 <DmPrivSetAddrResEnable+0x20>
    368e:	2365      	movs	r3, #101	; 0x65
    3690:	7083      	strb	r3, [r0, #2]
    3692:	2300      	movs	r3, #0
    3694:	8003      	strh	r3, [r0, #0]
    3696:	4b03      	ldr	r3, [pc, #12]	; (36a4 <DmPrivSetAddrResEnable+0x24>)
    3698:	7104      	strb	r4, [r0, #4]
    369a:	7b18      	ldrb	r0, [r3, #12]
    369c:	f007 fbf5 	bl	ae8a <WsfMsgSend>
    36a0:	bd10      	pop	{r4, pc}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	10001740 	.word	0x10001740

000036a8 <DmPrivSetResolvablePrivateAddrTimeout>:
    36a8:	b510      	push	{r4, lr}
    36aa:	f003 fd5e 	bl	716a <HciLeSetResolvablePrivateAddrTimeout>
    36ae:	bd10      	pop	{r4, pc}

000036b0 <DmPrivSetPrivacyMode>:
    36b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36b2:	0007      	movs	r7, r0
    36b4:	200c      	movs	r0, #12
    36b6:	000e      	movs	r6, r1
    36b8:	0015      	movs	r5, r2
    36ba:	f007 fbc2 	bl	ae42 <WsfMsgAlloc>
    36be:	1e04      	subs	r4, r0, #0
    36c0:	d00c      	beq.n	36dc <DmPrivSetPrivacyMode+0x2c>
    36c2:	2366      	movs	r3, #102	; 0x66
    36c4:	7107      	strb	r7, [r0, #4]
    36c6:	7083      	strb	r3, [r0, #2]
    36c8:	0031      	movs	r1, r6
    36ca:	3005      	adds	r0, #5
    36cc:	f009 fd9c 	bl	d208 <BdaCpy>
    36d0:	4b03      	ldr	r3, [pc, #12]	; (36e0 <DmPrivSetPrivacyMode+0x30>)
    36d2:	72e5      	strb	r5, [r4, #11]
    36d4:	7b18      	ldrb	r0, [r3, #12]
    36d6:	0021      	movs	r1, r4
    36d8:	f007 fbd7 	bl	ae8a <WsfMsgSend>
    36dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	10001740 	.word	0x10001740

000036e4 <dmSecMsgHandler>:
    36e4:	b570      	push	{r4, r5, r6, lr}
    36e6:	0004      	movs	r4, r0
    36e8:	7800      	ldrb	r0, [r0, #0]
    36ea:	f7ff f9ab 	bl	2a44 <dmConnCcbById>
    36ee:	1e05      	subs	r5, r0, #0
    36f0:	d027      	beq.n	3742 <dmSecMsgHandler+0x5e>
    36f2:	78a3      	ldrb	r3, [r4, #2]
    36f4:	2b50      	cmp	r3, #80	; 0x50
    36f6:	d002      	beq.n	36fe <dmSecMsgHandler+0x1a>
    36f8:	2b51      	cmp	r3, #81	; 0x51
    36fa:	d011      	beq.n	3720 <dmSecMsgHandler+0x3c>
    36fc:	e021      	b.n	3742 <dmSecMsgHandler+0x5e>
    36fe:	7c00      	ldrb	r0, [r0, #16]
    3700:	2201      	movs	r2, #1
    3702:	2102      	movs	r1, #2
    3704:	f7ff fc1a 	bl	2f3c <DmConnSetIdle>
    3708:	7fa3      	ldrb	r3, [r4, #30]
    370a:	0021      	movs	r1, r4
    370c:	762b      	strb	r3, [r5, #24]
    370e:	2301      	movs	r3, #1
    3710:	74ab      	strb	r3, [r5, #18]
    3712:	8ba2      	ldrh	r2, [r4, #28]
    3714:	1d23      	adds	r3, r4, #4
    3716:	3114      	adds	r1, #20
    3718:	89a8      	ldrh	r0, [r5, #12]
    371a:	f003 fb3a 	bl	6d92 <HciLeStartEncryptionCmd>
    371e:	e010      	b.n	3742 <dmSecMsgHandler+0x5e>
    3720:	7d22      	ldrb	r2, [r4, #20]
    3722:	2a00      	cmp	r2, #0
    3724:	d006      	beq.n	3734 <dmSecMsgHandler+0x50>
    3726:	7d63      	ldrb	r3, [r4, #21]
    3728:	1d21      	adds	r1, r4, #4
    372a:	7603      	strb	r3, [r0, #24]
    372c:	8980      	ldrh	r0, [r0, #12]
    372e:	f003 f93a 	bl	69a6 <HciLeLtkReqReplCmd>
    3732:	e006      	b.n	3742 <dmSecMsgHandler+0x5e>
    3734:	7c00      	ldrb	r0, [r0, #16]
    3736:	2102      	movs	r1, #2
    3738:	f7ff fc00 	bl	2f3c <DmConnSetIdle>
    373c:	89a8      	ldrh	r0, [r5, #12]
    373e:	f003 f90c 	bl	695a <HciLeLtkReqNegReplCmd>
    3742:	bd70      	pop	{r4, r5, r6, pc}

00003744 <dmSecApiLtkMsg>:
    3744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3746:	0006      	movs	r6, r0
    3748:	2020      	movs	r0, #32
    374a:	9101      	str	r1, [sp, #4]
    374c:	0015      	movs	r5, r2
    374e:	001f      	movs	r7, r3
    3750:	f007 fb77 	bl	ae42 <WsfMsgAlloc>
    3754:	1e04      	subs	r4, r0, #0
    3756:	d00e      	beq.n	3776 <dmSecApiLtkMsg+0x32>
    3758:	466b      	mov	r3, sp
    375a:	791b      	ldrb	r3, [r3, #4]
    375c:	7087      	strb	r7, [r0, #2]
    375e:	70c3      	strb	r3, [r0, #3]
    3760:	8006      	strh	r6, [r0, #0]
    3762:	0029      	movs	r1, r5
    3764:	3004      	adds	r0, #4
    3766:	221a      	movs	r2, #26
    3768:	f00d fe87 	bl	1147a <memcpy>
    376c:	4b02      	ldr	r3, [pc, #8]	; (3778 <dmSecApiLtkMsg+0x34>)
    376e:	0021      	movs	r1, r4
    3770:	7b18      	ldrb	r0, [r3, #12]
    3772:	f007 fb8a 	bl	ae8a <WsfMsgSend>
    3776:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3778:	10001740 	.word	0x10001740

0000377c <DmSmpCbackExec>:
    377c:	22fd      	movs	r2, #253	; 0xfd
    377e:	b510      	push	{r4, lr}
    3780:	7883      	ldrb	r3, [r0, #2]
    3782:	0004      	movs	r4, r0
    3784:	3b2a      	subs	r3, #42	; 0x2a
    3786:	4213      	tst	r3, r2
    3788:	d105      	bne.n	3796 <DmSmpCbackExec+0x1a>
    378a:	4b05      	ldr	r3, [pc, #20]	; (37a0 <DmSmpCbackExec+0x24>)
    378c:	33fc      	adds	r3, #252	; 0xfc
    378e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3790:	2b00      	cmp	r3, #0
    3792:	d000      	beq.n	3796 <DmSmpCbackExec+0x1a>
    3794:	4798      	blx	r3
    3796:	4b03      	ldr	r3, [pc, #12]	; (37a4 <DmSmpCbackExec+0x28>)
    3798:	0020      	movs	r0, r4
    379a:	689b      	ldr	r3, [r3, #8]
    379c:	4798      	blx	r3
    379e:	bd10      	pop	{r4, pc}
    37a0:	100015b0 	.word	0x100015b0
    37a4:	10001740 	.word	0x10001740

000037a8 <dmSecHciHandler>:
    37a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    37aa:	0005      	movs	r5, r0
    37ac:	8800      	ldrh	r0, [r0, #0]
    37ae:	f7ff f860 	bl	2872 <dmConnCcbByHandle>
    37b2:	1e04      	subs	r4, r0, #0
    37b4:	d04e      	beq.n	3854 <dmSecHciHandler+0xac>
    37b6:	78ab      	ldrb	r3, [r5, #2]
    37b8:	2b10      	cmp	r3, #16
    37ba:	d127      	bne.n	380c <dmSecHciHandler+0x64>
    37bc:	89eb      	ldrh	r3, [r5, #14]
    37be:	2b00      	cmp	r3, #0
    37c0:	d114      	bne.n	37ec <dmSecHciHandler+0x44>
    37c2:	1da8      	adds	r0, r5, #6
    37c4:	2208      	movs	r2, #8
    37c6:	4924      	ldr	r1, [pc, #144]	; (3858 <dmSecHciHandler+0xb0>)
    37c8:	f00d fe48 	bl	1145c <memcmp>
    37cc:	1e06      	subs	r6, r0, #0
    37ce:	d10d      	bne.n	37ec <dmSecHciHandler+0x44>
    37d0:	4669      	mov	r1, sp
    37d2:	7c20      	ldrb	r0, [r4, #16]
    37d4:	f000 fd18 	bl	4208 <SmpDmGetStk>
    37d8:	1e01      	subs	r1, r0, #0
    37da:	d007      	beq.n	37ec <dmSecHciHandler+0x44>
    37dc:	466b      	mov	r3, sp
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	74a6      	strb	r6, [r4, #18]
    37e2:	7623      	strb	r3, [r4, #24]
    37e4:	8828      	ldrh	r0, [r5, #0]
    37e6:	f003 f8de 	bl	69a6 <HciLeLtkReqReplCmd>
    37ea:	e033      	b.n	3854 <dmSecHciHandler+0xac>
    37ec:	7c20      	ldrb	r0, [r4, #16]
    37ee:	2201      	movs	r2, #1
    37f0:	2102      	movs	r1, #2
    37f2:	f7ff fba3 	bl	2f3c <DmConnSetIdle>
    37f6:	2301      	movs	r3, #1
    37f8:	74a3      	strb	r3, [r4, #18]
    37fa:	7c23      	ldrb	r3, [r4, #16]
    37fc:	0028      	movs	r0, r5
    37fe:	802b      	strh	r3, [r5, #0]
    3800:	2330      	movs	r3, #48	; 0x30
    3802:	70ab      	strb	r3, [r5, #2]
    3804:	4b15      	ldr	r3, [pc, #84]	; (385c <dmSecHciHandler+0xb4>)
    3806:	689b      	ldr	r3, [r3, #8]
    3808:	4798      	blx	r3
    380a:	e023      	b.n	3854 <dmSecHciHandler+0xac>
    380c:	3b0e      	subs	r3, #14
    380e:	2b01      	cmp	r3, #1
    3810:	d820      	bhi.n	3854 <dmSecHciHandler+0xac>
    3812:	2200      	movs	r2, #0
    3814:	7c00      	ldrb	r0, [r0, #16]
    3816:	2102      	movs	r1, #2
    3818:	f7ff fb90 	bl	2f3c <DmConnSetIdle>
    381c:	466a      	mov	r2, sp
    381e:	7c23      	ldrb	r3, [r4, #16]
    3820:	8013      	strh	r3, [r2, #0]
    3822:	78eb      	ldrb	r3, [r5, #3]
    3824:	70d3      	strb	r3, [r2, #3]
    3826:	2b00      	cmp	r3, #0
    3828:	d106      	bne.n	3838 <dmSecHciHandler+0x90>
    382a:	332c      	adds	r3, #44	; 0x2c
    382c:	7093      	strb	r3, [r2, #2]
    382e:	7e23      	ldrb	r3, [r4, #24]
    3830:	75e3      	strb	r3, [r4, #23]
    3832:	7ca3      	ldrb	r3, [r4, #18]
    3834:	7113      	strb	r3, [r2, #4]
    3836:	e002      	b.n	383e <dmSecHciHandler+0x96>
    3838:	232d      	movs	r3, #45	; 0x2d
    383a:	466a      	mov	r2, sp
    383c:	7093      	strb	r3, [r2, #2]
    383e:	4668      	mov	r0, sp
    3840:	f7ff ff9c 	bl	377c <DmSmpCbackExec>
    3844:	466a      	mov	r2, sp
    3846:	7c23      	ldrb	r3, [r4, #16]
    3848:	4668      	mov	r0, sp
    384a:	8013      	strh	r3, [r2, #0]
    384c:	78eb      	ldrb	r3, [r5, #3]
    384e:	70d3      	strb	r3, [r2, #3]
    3850:	f000 fd58 	bl	4304 <SmpDmEncryptInd>
    3854:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	00014804 	.word	0x00014804
    385c:	10001740 	.word	0x10001740

00003860 <DmSecCancelReq>:
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	0005      	movs	r5, r0
    3864:	2004      	movs	r0, #4
    3866:	000c      	movs	r4, r1
    3868:	f007 faeb 	bl	ae42 <WsfMsgAlloc>
    386c:	2800      	cmp	r0, #0
    386e:	d005      	beq.n	387c <DmSecCancelReq+0x1c>
    3870:	2303      	movs	r3, #3
    3872:	8005      	strh	r5, [r0, #0]
    3874:	7083      	strb	r3, [r0, #2]
    3876:	70c4      	strb	r4, [r0, #3]
    3878:	f000 fcbb 	bl	41f2 <SmpDmMsgSend>
    387c:	bd70      	pop	{r4, r5, r6, pc}

0000387e <DmSecAuthRsp>:
    387e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3880:	0007      	movs	r7, r0
    3882:	2016      	movs	r0, #22
    3884:	000e      	movs	r6, r1
    3886:	0015      	movs	r5, r2
    3888:	f007 fadb 	bl	ae42 <WsfMsgAlloc>
    388c:	1e04      	subs	r4, r0, #0
    388e:	d00d      	beq.n	38ac <DmSecAuthRsp+0x2e>
    3890:	2304      	movs	r3, #4
    3892:	8007      	strh	r7, [r0, #0]
    3894:	7083      	strb	r3, [r0, #2]
    3896:	7506      	strb	r6, [r0, #20]
    3898:	2d00      	cmp	r5, #0
    389a:	d004      	beq.n	38a6 <DmSecAuthRsp+0x28>
    389c:	18c0      	adds	r0, r0, r3
    389e:	0032      	movs	r2, r6
    38a0:	0029      	movs	r1, r5
    38a2:	f00d fdea 	bl	1147a <memcpy>
    38a6:	0020      	movs	r0, r4
    38a8:	f000 fca3 	bl	41f2 <SmpDmMsgSend>
    38ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000038ae <DmSecInit>:
    38ae:	4a04      	ldr	r2, [pc, #16]	; (38c0 <DmSecInit+0x12>)
    38b0:	4b04      	ldr	r3, [pc, #16]	; (38c4 <DmSecInit+0x16>)
    38b2:	615a      	str	r2, [r3, #20]
    38b4:	4b04      	ldr	r3, [pc, #16]	; (38c8 <DmSecInit+0x1a>)
    38b6:	4a05      	ldr	r2, [pc, #20]	; (38cc <DmSecInit+0x1e>)
    38b8:	601a      	str	r2, [r3, #0]
    38ba:	605a      	str	r2, [r3, #4]
    38bc:	4770      	bx	lr
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	00012414 	.word	0x00012414
    38c4:	10001054 	.word	0x10001054
    38c8:	10001764 	.word	0x10001764
    38cc:	00014804 	.word	0x00014804

000038d0 <DmSecSetLocalCsrk>:
    38d0:	b510      	push	{r4, lr}
    38d2:	0004      	movs	r4, r0
    38d4:	f006 fbe6 	bl	a0a4 <WsfTaskLock>
    38d8:	4b02      	ldr	r3, [pc, #8]	; (38e4 <DmSecSetLocalCsrk+0x14>)
    38da:	605c      	str	r4, [r3, #4]
    38dc:	f006 fbe8 	bl	a0b0 <WsfTaskUnlock>
    38e0:	bd10      	pop	{r4, pc}
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	10001764 	.word	0x10001764

000038e8 <DmSecSetLocalIrk>:
    38e8:	b510      	push	{r4, lr}
    38ea:	0004      	movs	r4, r0
    38ec:	f006 fbda 	bl	a0a4 <WsfTaskLock>
    38f0:	4b02      	ldr	r3, [pc, #8]	; (38fc <DmSecSetLocalIrk+0x14>)
    38f2:	601c      	str	r4, [r3, #0]
    38f4:	f006 fbdc 	bl	a0b0 <WsfTaskUnlock>
    38f8:	bd10      	pop	{r4, pc}
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	10001764 	.word	0x10001764

00003900 <DmSecGetLocalCsrk>:
    3900:	4b01      	ldr	r3, [pc, #4]	; (3908 <DmSecGetLocalCsrk+0x8>)
    3902:	6858      	ldr	r0, [r3, #4]
    3904:	4770      	bx	lr
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	10001764 	.word	0x10001764

0000390c <DmSecGetLocalIrk>:
    390c:	4b01      	ldr	r3, [pc, #4]	; (3914 <DmSecGetLocalIrk+0x8>)
    390e:	6818      	ldr	r0, [r3, #0]
    3910:	4770      	bx	lr
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	10001764 	.word	0x10001764

00003918 <dmSecLescMsgHandler>:
    3918:	b570      	push	{r4, r5, r6, lr}
    391a:	7883      	ldrb	r3, [r0, #2]
    391c:	0004      	movs	r4, r0
    391e:	2b81      	cmp	r3, #129	; 0x81
    3920:	d102      	bne.n	3928 <dmSecLescMsgHandler+0x10>
    3922:	3b4d      	subs	r3, #77	; 0x4d
    3924:	7083      	strb	r3, [r0, #2]
    3926:	e010      	b.n	394a <dmSecLescMsgHandler+0x32>
    3928:	2b80      	cmp	r3, #128	; 0x80
    392a:	d112      	bne.n	3952 <dmSecLescMsgHandler+0x3a>
    392c:	3b4d      	subs	r3, #77	; 0x4d
    392e:	7083      	strb	r3, [r0, #2]
    3930:	6861      	ldr	r1, [r4, #4]
    3932:	3004      	adds	r0, #4
    3934:	f009 fcb3 	bl	d29e <Calc128Cpy>
    3938:	0020      	movs	r0, r4
    393a:	4d06      	ldr	r5, [pc, #24]	; (3954 <dmSecLescMsgHandler+0x3c>)
    393c:	3014      	adds	r0, #20
    393e:	6829      	ldr	r1, [r5, #0]
    3940:	f009 fcad 	bl	d29e <Calc128Cpy>
    3944:	6828      	ldr	r0, [r5, #0]
    3946:	f007 fa2d 	bl	ada4 <WsfBufFree>
    394a:	4b03      	ldr	r3, [pc, #12]	; (3958 <dmSecLescMsgHandler+0x40>)
    394c:	0020      	movs	r0, r4
    394e:	689b      	ldr	r3, [r3, #8]
    3950:	4798      	blx	r3
    3952:	bd70      	pop	{r4, r5, r6, pc}
    3954:	1000176c 	.word	0x1000176c
    3958:	10001740 	.word	0x10001740

0000395c <DmSecKeypressReq>:
    395c:	b570      	push	{r4, r5, r6, lr}
    395e:	0004      	movs	r4, r0
    3960:	2006      	movs	r0, #6
    3962:	000d      	movs	r5, r1
    3964:	f007 fa6d 	bl	ae42 <WsfMsgAlloc>
    3968:	2800      	cmp	r0, #0
    396a:	d005      	beq.n	3978 <DmSecKeypressReq+0x1c>
    396c:	2316      	movs	r3, #22
    396e:	7105      	strb	r5, [r0, #4]
    3970:	8004      	strh	r4, [r0, #0]
    3972:	7083      	strb	r3, [r0, #2]
    3974:	f000 fc3d 	bl	41f2 <SmpDmMsgSend>
    3978:	bd70      	pop	{r4, r5, r6, pc}

0000397a <DmSecSetOob>:
    397a:	b510      	push	{r4, lr}
    397c:	f000 fe6a 	bl	4654 <SmpScSetOobCfg>
    3980:	bd10      	pop	{r4, pc}

00003982 <DmSecCalcOobReq>:
    3982:	b5f0      	push	{r4, r5, r6, r7, lr}
    3984:	0005      	movs	r5, r0
    3986:	b08d      	sub	sp, #52	; 0x34
    3988:	2010      	movs	r0, #16
    398a:	000f      	movs	r7, r1
    398c:	f007 f9ca 	bl	ad24 <WsfBufAlloc>
    3990:	4c1b      	ldr	r4, [pc, #108]	; (3a00 <DmSecCalcOobReq+0x7e>)
    3992:	4e1c      	ldr	r6, [pc, #112]	; (3a04 <DmSecCalcOobReq+0x82>)
    3994:	6020      	str	r0, [r4, #0]
    3996:	2800      	cmp	r0, #0
    3998:	d022      	beq.n	39e0 <DmSecCalcOobReq+0x5e>
    399a:	0029      	movs	r1, r5
    399c:	f009 fc7f 	bl	d29e <Calc128Cpy>
    39a0:	2041      	movs	r0, #65	; 0x41
    39a2:	f007 f9bf 	bl	ad24 <WsfBufAlloc>
    39a6:	1e05      	subs	r5, r0, #0
    39a8:	d017      	beq.n	39da <DmSecCalcOobReq+0x58>
    39aa:	2220      	movs	r2, #32
    39ac:	0039      	movs	r1, r7
    39ae:	f000 fd73 	bl	4498 <SmpScCat>
    39b2:	2220      	movs	r2, #32
    39b4:	0039      	movs	r1, r7
    39b6:	f000 fd6f 	bl	4498 <SmpScCat>
    39ba:	2200      	movs	r2, #0
    39bc:	2180      	movs	r1, #128	; 0x80
    39be:	7002      	strb	r2, [r0, #0]
    39c0:	7b33      	ldrb	r3, [r6, #12]
    39c2:	9101      	str	r1, [sp, #4]
    39c4:	9200      	str	r2, [sp, #0]
    39c6:	0029      	movs	r1, r5
    39c8:	3241      	adds	r2, #65	; 0x41
    39ca:	6820      	ldr	r0, [r4, #0]
    39cc:	f006 ff3e 	bl	a84c <SecCmac>
    39d0:	2800      	cmp	r0, #0
    39d2:	d112      	bne.n	39fa <DmSecCalcOobReq+0x78>
    39d4:	0028      	movs	r0, r5
    39d6:	f007 f9e5 	bl	ada4 <WsfBufFree>
    39da:	6820      	ldr	r0, [r4, #0]
    39dc:	f007 f9e2 	bl	ada4 <WsfBufFree>
    39e0:	ac03      	add	r4, sp, #12
    39e2:	2224      	movs	r2, #36	; 0x24
    39e4:	2100      	movs	r1, #0
    39e6:	0020      	movs	r0, r4
    39e8:	f00d fd6c 	bl	114c4 <memset>
    39ec:	2333      	movs	r3, #51	; 0x33
    39ee:	70a3      	strb	r3, [r4, #2]
    39f0:	3b2c      	subs	r3, #44	; 0x2c
    39f2:	70e3      	strb	r3, [r4, #3]
    39f4:	0020      	movs	r0, r4
    39f6:	68b3      	ldr	r3, [r6, #8]
    39f8:	4798      	blx	r3
    39fa:	b00d      	add	sp, #52	; 0x34
    39fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	1000176c 	.word	0x1000176c
    3a04:	10001740 	.word	0x10001740

00003a08 <DmSecGenerateEccKeyReq>:
    3a08:	b510      	push	{r4, lr}
    3a0a:	4b03      	ldr	r3, [pc, #12]	; (3a18 <DmSecGenerateEccKeyReq+0x10>)
    3a0c:	2281      	movs	r2, #129	; 0x81
    3a0e:	7b18      	ldrb	r0, [r3, #12]
    3a10:	2100      	movs	r1, #0
    3a12:	f006 ffc1 	bl	a998 <SecEccGenKey>
    3a16:	bd10      	pop	{r4, pc}
    3a18:	10001740 	.word	0x10001740

00003a1c <DmSecSetDebugEccKey>:
    3a1c:	b530      	push	{r4, r5, lr}
    3a1e:	2420      	movs	r4, #32
    3a20:	4d12      	ldr	r5, [pc, #72]	; (3a6c <DmSecSetDebugEccKey+0x50>)
    3a22:	b099      	sub	sp, #100	; 0x64
    3a24:	0022      	movs	r2, r4
    3a26:	0029      	movs	r1, r5
    3a28:	4668      	mov	r0, sp
    3a2a:	f00d fd26 	bl	1147a <memcpy>
    3a2e:	1929      	adds	r1, r5, r4
    3a30:	0022      	movs	r2, r4
    3a32:	a808      	add	r0, sp, #32
    3a34:	f00d fd21 	bl	1147a <memcpy>
    3a38:	0029      	movs	r1, r5
    3a3a:	0022      	movs	r2, r4
    3a3c:	3140      	adds	r1, #64	; 0x40
    3a3e:	a810      	add	r0, sp, #64	; 0x40
    3a40:	f00d fd1b 	bl	1147a <memcpy>
    3a44:	4d0a      	ldr	r5, [pc, #40]	; (3a70 <DmSecSetDebugEccKey+0x54>)
    3a46:	0022      	movs	r2, r4
    3a48:	0028      	movs	r0, r5
    3a4a:	4669      	mov	r1, sp
    3a4c:	3044      	adds	r0, #68	; 0x44
    3a4e:	f00d fd14 	bl	1147a <memcpy>
    3a52:	0022      	movs	r2, r4
    3a54:	a908      	add	r1, sp, #32
    3a56:	1d28      	adds	r0, r5, #4
    3a58:	f00d fd0f 	bl	1147a <memcpy>
    3a5c:	0028      	movs	r0, r5
    3a5e:	0022      	movs	r2, r4
    3a60:	a910      	add	r1, sp, #64	; 0x40
    3a62:	3024      	adds	r0, #36	; 0x24
    3a64:	f00d fd09 	bl	1147a <memcpy>
    3a68:	b019      	add	sp, #100	; 0x64
    3a6a:	bd30      	pop	{r4, r5, pc}
    3a6c:	00012420 	.word	0x00012420
    3a70:	1000176c 	.word	0x1000176c

00003a74 <DmSecSetEccKey>:
    3a74:	b510      	push	{r4, lr}
    3a76:	0001      	movs	r1, r0
    3a78:	4802      	ldr	r0, [pc, #8]	; (3a84 <DmSecSetEccKey+0x10>)
    3a7a:	2260      	movs	r2, #96	; 0x60
    3a7c:	3004      	adds	r0, #4
    3a7e:	f00d fcfc 	bl	1147a <memcpy>
    3a82:	bd10      	pop	{r4, pc}
    3a84:	1000176c 	.word	0x1000176c

00003a88 <DmSecGetEccKey>:
    3a88:	4801      	ldr	r0, [pc, #4]	; (3a90 <DmSecGetEccKey+0x8>)
    3a8a:	3004      	adds	r0, #4
    3a8c:	4770      	bx	lr
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	1000176c 	.word	0x1000176c

00003a94 <DmSecCompareRsp>:
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	0005      	movs	r5, r0
    3a98:	2016      	movs	r0, #22
    3a9a:	000c      	movs	r4, r1
    3a9c:	f007 f9d1 	bl	ae42 <WsfMsgAlloc>
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d009      	beq.n	3ab8 <DmSecCompareRsp+0x24>
    3aa4:	8005      	strh	r5, [r0, #0]
    3aa6:	2315      	movs	r3, #21
    3aa8:	2c00      	cmp	r4, #0
    3aaa:	d102      	bne.n	3ab2 <DmSecCompareRsp+0x1e>
    3aac:	2304      	movs	r3, #4
    3aae:	70c3      	strb	r3, [r0, #3]
    3ab0:	3b01      	subs	r3, #1
    3ab2:	7083      	strb	r3, [r0, #2]
    3ab4:	f000 fb9d 	bl	41f2 <SmpDmMsgSend>
    3ab8:	bd70      	pop	{r4, r5, r6, pc}

00003aba <DmSecGetCompareValue>:
    3aba:	0002      	movs	r2, r0
    3abc:	b510      	push	{r4, lr}
    3abe:	7b83      	ldrb	r3, [r0, #14]
    3ac0:	4906      	ldr	r1, [pc, #24]	; (3adc <DmSecGetCompareValue+0x22>)
    3ac2:	0218      	lsls	r0, r3, #8
    3ac4:	7b53      	ldrb	r3, [r2, #13]
    3ac6:	041b      	lsls	r3, r3, #16
    3ac8:	18c3      	adds	r3, r0, r3
    3aca:	7bd0      	ldrb	r0, [r2, #15]
    3acc:	1818      	adds	r0, r3, r0
    3ace:	7b13      	ldrb	r3, [r2, #12]
    3ad0:	061b      	lsls	r3, r3, #24
    3ad2:	18c0      	adds	r0, r0, r3
    3ad4:	f002 fbb0 	bl	6238 <__aeabi_uidivmod>
    3ad8:	0008      	movs	r0, r1
    3ada:	bd10      	pop	{r4, pc}
    3adc:	000f4240 	.word	0x000f4240

00003ae0 <DmSecLescInit>:
    3ae0:	4b02      	ldr	r3, [pc, #8]	; (3aec <DmSecLescInit+0xc>)
    3ae2:	4a03      	ldr	r2, [pc, #12]	; (3af0 <DmSecLescInit+0x10>)
    3ae4:	3360      	adds	r3, #96	; 0x60
    3ae6:	6213      	str	r3, [r2, #32]
    3ae8:	4770      	bx	lr
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	00012420 	.word	0x00012420
    3af0:	10001054 	.word	0x10001054

00003af4 <l2cDefaultDataCback>:
    3af4:	4770      	bx	lr

00003af6 <l2cDefaultDataCidCback>:
    3af6:	4770      	bx	lr

00003af8 <l2cDefaultCtrlCback>:
    3af8:	4770      	bx	lr

00003afa <l2cHciFlowCback>:
    3afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3afc:	000d      	movs	r5, r1
    3afe:	f7ff f9bb 	bl	2e78 <DmConnIdByHandle>
    3b02:	ac01      	add	r4, sp, #4
    3b04:	b280      	uxth	r0, r0
    3b06:	8020      	strh	r0, [r4, #0]
    3b08:	2800      	cmp	r0, #0
    3b0a:	d00c      	beq.n	3b26 <l2cHciFlowCback+0x2c>
    3b0c:	4e06      	ldr	r6, [pc, #24]	; (3b28 <l2cHciFlowCback+0x2e>)
    3b0e:	0020      	movs	r0, r4
    3b10:	68f3      	ldr	r3, [r6, #12]
    3b12:	70a5      	strb	r5, [r4, #2]
    3b14:	4798      	blx	r3
    3b16:	0020      	movs	r0, r4
    3b18:	6933      	ldr	r3, [r6, #16]
    3b1a:	70a5      	strb	r5, [r4, #2]
    3b1c:	4798      	blx	r3
    3b1e:	70a5      	strb	r5, [r4, #2]
    3b20:	6973      	ldr	r3, [r6, #20]
    3b22:	0020      	movs	r0, r4
    3b24:	4798      	blx	r3
    3b26:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3b28:	100017d0 	.word	0x100017d0

00003b2c <l2cHciAclCback>:
    3b2c:	b570      	push	{r4, r5, r6, lr}
    3b2e:	78c3      	ldrb	r3, [r0, #3]
    3b30:	7882      	ldrb	r2, [r0, #2]
    3b32:	021b      	lsls	r3, r3, #8
    3b34:	18d3      	adds	r3, r2, r3
    3b36:	b29b      	uxth	r3, r3
    3b38:	0004      	movs	r4, r0
    3b3a:	2b03      	cmp	r3, #3
    3b3c:	d802      	bhi.n	3b44 <l2cHciAclCback+0x18>
    3b3e:	1d02      	adds	r2, r0, #4
    3b40:	2100      	movs	r1, #0
    3b42:	e005      	b.n	3b50 <l2cHciAclCback+0x24>
    3b44:	7941      	ldrb	r1, [r0, #5]
    3b46:	7902      	ldrb	r2, [r0, #4]
    3b48:	0209      	lsls	r1, r1, #8
    3b4a:	1851      	adds	r1, r2, r1
    3b4c:	b289      	uxth	r1, r1
    3b4e:	1d82      	adds	r2, r0, #6
    3b50:	1d08      	adds	r0, r1, #4
    3b52:	4283      	cmp	r3, r0
    3b54:	d11e      	bne.n	3b94 <l2cHciAclCback+0x68>
    3b56:	7860      	ldrb	r0, [r4, #1]
    3b58:	7823      	ldrb	r3, [r4, #0]
    3b5a:	0200      	lsls	r0, r0, #8
    3b5c:	7856      	ldrb	r6, [r2, #1]
    3b5e:	1818      	adds	r0, r3, r0
    3b60:	7813      	ldrb	r3, [r2, #0]
    3b62:	0236      	lsls	r6, r6, #8
    3b64:	199e      	adds	r6, r3, r6
    3b66:	0500      	lsls	r0, r0, #20
    3b68:	b2b6      	uxth	r6, r6
    3b6a:	0d00      	lsrs	r0, r0, #20
    3b6c:	4b0b      	ldr	r3, [pc, #44]	; (3b9c <l2cHciAclCback+0x70>)
    3b6e:	2e05      	cmp	r6, #5
    3b70:	d005      	beq.n	3b7e <l2cHciAclCback+0x52>
    3b72:	2e06      	cmp	r6, #6
    3b74:	d005      	beq.n	3b82 <l2cHciAclCback+0x56>
    3b76:	2e04      	cmp	r6, #4
    3b78:	d107      	bne.n	3b8a <l2cHciAclCback+0x5e>
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	e002      	b.n	3b84 <l2cHciAclCback+0x58>
    3b7e:	689b      	ldr	r3, [r3, #8]
    3b80:	e000      	b.n	3b84 <l2cHciAclCback+0x58>
    3b82:	685b      	ldr	r3, [r3, #4]
    3b84:	0022      	movs	r2, r4
    3b86:	4798      	blx	r3
    3b88:	e004      	b.n	3b94 <l2cHciAclCback+0x68>
    3b8a:	6a1d      	ldr	r5, [r3, #32]
    3b8c:	000a      	movs	r2, r1
    3b8e:	0023      	movs	r3, r4
    3b90:	0031      	movs	r1, r6
    3b92:	47a8      	blx	r5
    3b94:	0020      	movs	r0, r4
    3b96:	f007 f96b 	bl	ae70 <WsfMsgFree>
    3b9a:	bd70      	pop	{r4, r5, r6, pc}
    3b9c:	100017d0 	.word	0x100017d0

00003ba0 <l2cRxSignalingPkt>:
    3ba0:	b570      	push	{r4, r5, r6, lr}
    3ba2:	000d      	movs	r5, r1
    3ba4:	0016      	movs	r6, r2
    3ba6:	0004      	movs	r4, r0
    3ba8:	f7ff f966 	bl	2e78 <DmConnIdByHandle>
    3bac:	f7ff f9f2 	bl	2f94 <DmConnRole>
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d102      	bne.n	3bba <l2cRxSignalingPkt+0x1a>
    3bb4:	4b06      	ldr	r3, [pc, #24]	; (3bd0 <l2cRxSignalingPkt+0x30>)
    3bb6:	699b      	ldr	r3, [r3, #24]
    3bb8:	e003      	b.n	3bc2 <l2cRxSignalingPkt+0x22>
    3bba:	2801      	cmp	r0, #1
    3bbc:	d107      	bne.n	3bce <l2cRxSignalingPkt+0x2e>
    3bbe:	4b04      	ldr	r3, [pc, #16]	; (3bd0 <l2cRxSignalingPkt+0x30>)
    3bc0:	69db      	ldr	r3, [r3, #28]
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d003      	beq.n	3bce <l2cRxSignalingPkt+0x2e>
    3bc6:	0032      	movs	r2, r6
    3bc8:	0029      	movs	r1, r5
    3bca:	0020      	movs	r0, r4
    3bcc:	4798      	blx	r3
    3bce:	bd70      	pop	{r4, r5, r6, pc}
    3bd0:	100017d0 	.word	0x100017d0

00003bd4 <l2cMsgAlloc>:
    3bd4:	b510      	push	{r4, lr}
    3bd6:	2100      	movs	r1, #0
    3bd8:	f007 f91e 	bl	ae18 <WsfMsgDataAlloc>
    3bdc:	bd10      	pop	{r4, pc}

00003bde <L2cInit>:
    3bde:	4b0a      	ldr	r3, [pc, #40]	; (3c08 <L2cInit+0x2a>)
    3be0:	4a0a      	ldr	r2, [pc, #40]	; (3c0c <L2cInit+0x2e>)
    3be2:	b510      	push	{r4, lr}
    3be4:	601a      	str	r2, [r3, #0]
    3be6:	605a      	str	r2, [r3, #4]
    3be8:	4a09      	ldr	r2, [pc, #36]	; (3c10 <L2cInit+0x32>)
    3bea:	490a      	ldr	r1, [pc, #40]	; (3c14 <L2cInit+0x36>)
    3bec:	609a      	str	r2, [r3, #8]
    3bee:	4a0a      	ldr	r2, [pc, #40]	; (3c18 <L2cInit+0x3a>)
    3bf0:	480a      	ldr	r0, [pc, #40]	; (3c1c <L2cInit+0x3e>)
    3bf2:	60da      	str	r2, [r3, #12]
    3bf4:	611a      	str	r2, [r3, #16]
    3bf6:	615a      	str	r2, [r3, #20]
    3bf8:	4a09      	ldr	r2, [pc, #36]	; (3c20 <L2cInit+0x42>)
    3bfa:	621a      	str	r2, [r3, #32]
    3bfc:	2201      	movs	r2, #1
    3bfe:	3305      	adds	r3, #5
    3c00:	77da      	strb	r2, [r3, #31]
    3c02:	f008 ffb5 	bl	cb70 <HciAclRegister>
    3c06:	bd10      	pop	{r4, pc}
    3c08:	100017d0 	.word	0x100017d0
    3c0c:	00003af5 	.word	0x00003af5
    3c10:	00003ba1 	.word	0x00003ba1
    3c14:	00003afb 	.word	0x00003afb
    3c18:	00003af9 	.word	0x00003af9
    3c1c:	00003b2d 	.word	0x00003b2d
    3c20:	00003af7 	.word	0x00003af7

00003c24 <L2cRegister>:
    3c24:	4b04      	ldr	r3, [pc, #16]	; (3c38 <L2cRegister+0x14>)
    3c26:	2804      	cmp	r0, #4
    3c28:	d102      	bne.n	3c30 <L2cRegister+0xc>
    3c2a:	6019      	str	r1, [r3, #0]
    3c2c:	60da      	str	r2, [r3, #12]
    3c2e:	e001      	b.n	3c34 <L2cRegister+0x10>
    3c30:	6059      	str	r1, [r3, #4]
    3c32:	611a      	str	r2, [r3, #16]
    3c34:	4770      	bx	lr
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	100017d0 	.word	0x100017d0

00003c3c <L2cDataReq>:
    3c3c:	b510      	push	{r4, lr}
    3c3e:	7019      	strb	r1, [r3, #0]
    3c40:	b2d4      	uxtb	r4, r2
    3c42:	0a09      	lsrs	r1, r1, #8
    3c44:	7059      	strb	r1, [r3, #1]
    3c46:	1d21      	adds	r1, r4, #4
    3c48:	7099      	strb	r1, [r3, #2]
    3c4a:	1d11      	adds	r1, r2, #4
    3c4c:	1209      	asrs	r1, r1, #8
    3c4e:	0a12      	lsrs	r2, r2, #8
    3c50:	7198      	strb	r0, [r3, #6]
    3c52:	0a00      	lsrs	r0, r0, #8
    3c54:	71d8      	strb	r0, [r3, #7]
    3c56:	70d9      	strb	r1, [r3, #3]
    3c58:	711c      	strb	r4, [r3, #4]
    3c5a:	715a      	strb	r2, [r3, #5]
    3c5c:	0018      	movs	r0, r3
    3c5e:	f003 feff 	bl	7a60 <HciSendAclData>
    3c62:	bd10      	pop	{r4, pc}

00003c64 <l2cSendCmdReject>:
    3c64:	b570      	push	{r4, r5, r6, lr}
    3c66:	0005      	movs	r5, r0
    3c68:	200e      	movs	r0, #14
    3c6a:	000e      	movs	r6, r1
    3c6c:	0014      	movs	r4, r2
    3c6e:	f7ff ffb1 	bl	3bd4 <l2cMsgAlloc>
    3c72:	1e03      	subs	r3, r0, #0
    3c74:	d00e      	beq.n	3c94 <l2cSendCmdReject+0x30>
    3c76:	2201      	movs	r2, #1
    3c78:	7202      	strb	r2, [r0, #8]
    3c7a:	1892      	adds	r2, r2, r2
    3c7c:	7282      	strb	r2, [r0, #10]
    3c7e:	2200      	movs	r2, #0
    3c80:	7304      	strb	r4, [r0, #12]
    3c82:	0a24      	lsrs	r4, r4, #8
    3c84:	72c2      	strb	r2, [r0, #11]
    3c86:	7246      	strb	r6, [r0, #9]
    3c88:	7344      	strb	r4, [r0, #13]
    3c8a:	3206      	adds	r2, #6
    3c8c:	0029      	movs	r1, r5
    3c8e:	2005      	movs	r0, #5
    3c90:	f7ff ffd4 	bl	3c3c <L2cDataReq>
    3c94:	bd70      	pop	{r4, r5, r6, pc}
    3c96:	46c0      	nop			; (mov r8, r8)

00003c98 <l2cSlaveRxSignalingPkt>:
    3c98:	b570      	push	{r4, r5, r6, lr}
    3c9a:	0005      	movs	r5, r0
    3c9c:	7ad0      	ldrb	r0, [r2, #11]
    3c9e:	7a94      	ldrb	r4, [r2, #10]
    3ca0:	0200      	lsls	r0, r0, #8
    3ca2:	1820      	adds	r0, r4, r0
    3ca4:	b280      	uxth	r0, r0
    3ca6:	1d04      	adds	r4, r0, #4
    3ca8:	000b      	movs	r3, r1
    3caa:	7a51      	ldrb	r1, [r2, #9]
    3cac:	42a3      	cmp	r3, r4
    3cae:	d115      	bne.n	3cdc <l2cSlaveRxSignalingPkt+0x44>
    3cb0:	7a13      	ldrb	r3, [r2, #8]
    3cb2:	2b13      	cmp	r3, #19
    3cb4:	d107      	bne.n	3cc6 <l2cSlaveRxSignalingPkt+0x2e>
    3cb6:	2802      	cmp	r0, #2
    3cb8:	d110      	bne.n	3cdc <l2cSlaveRxSignalingPkt+0x44>
    3cba:	7b53      	ldrb	r3, [r2, #13]
    3cbc:	7b14      	ldrb	r4, [r2, #12]
    3cbe:	021b      	lsls	r3, r3, #8
    3cc0:	18e3      	adds	r3, r4, r3
    3cc2:	b29c      	uxth	r4, r3
    3cc4:	e002      	b.n	3ccc <l2cSlaveRxSignalingPkt+0x34>
    3cc6:	2b01      	cmp	r3, #1
    3cc8:	d108      	bne.n	3cdc <l2cSlaveRxSignalingPkt+0x44>
    3cca:	001c      	movs	r4, r3
    3ccc:	4806      	ldr	r0, [pc, #24]	; (3ce8 <l2cSlaveRxSignalingPkt+0x50>)
    3cce:	f007 fa97 	bl	b200 <WsfTimerStop>
    3cd2:	0021      	movs	r1, r4
    3cd4:	0028      	movs	r0, r5
    3cd6:	f7ff f9af 	bl	3038 <DmL2cConnUpdateCnf>
    3cda:	e003      	b.n	3ce4 <l2cSlaveRxSignalingPkt+0x4c>
    3cdc:	2200      	movs	r2, #0
    3cde:	0028      	movs	r0, r5
    3ce0:	f7ff ffc0 	bl	3c64 <l2cSendCmdReject>
    3ce4:	bd70      	pop	{r4, r5, r6, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	100017f8 	.word	0x100017f8

00003cec <L2cSlaveInit>:
    3cec:	4a01      	ldr	r2, [pc, #4]	; (3cf4 <L2cSlaveInit+0x8>)
    3cee:	4b02      	ldr	r3, [pc, #8]	; (3cf8 <L2cSlaveInit+0xc>)
    3cf0:	61da      	str	r2, [r3, #28]
    3cf2:	4770      	bx	lr
    3cf4:	00003c99 	.word	0x00003c99
    3cf8:	100017d0 	.word	0x100017d0

00003cfc <L2cDmConnUpdateReq>:
    3cfc:	b570      	push	{r4, r5, r6, lr}
    3cfe:	0005      	movs	r5, r0
    3d00:	4e1b      	ldr	r6, [pc, #108]	; (3d70 <L2cDmConnUpdateReq+0x74>)
    3d02:	000c      	movs	r4, r1
    3d04:	0030      	movs	r0, r6
    3d06:	211e      	movs	r1, #30
    3d08:	f007 fa54 	bl	b1b4 <WsfTimerStartSec>
    3d0c:	2014      	movs	r0, #20
    3d0e:	8175      	strh	r5, [r6, #10]
    3d10:	f7ff ff60 	bl	3bd4 <l2cMsgAlloc>
    3d14:	1e03      	subs	r3, r0, #0
    3d16:	d02a      	beq.n	3d6e <L2cDmConnUpdateReq+0x72>
    3d18:	2212      	movs	r2, #18
    3d1a:	7202      	strb	r2, [r0, #8]
    3d1c:	4a15      	ldr	r2, [pc, #84]	; (3d74 <L2cDmConnUpdateReq+0x78>)
    3d1e:	1d51      	adds	r1, r2, #5
    3d20:	7fc8      	ldrb	r0, [r1, #31]
    3d22:	7258      	strb	r0, [r3, #9]
    3d24:	7fc9      	ldrb	r1, [r1, #31]
    3d26:	2001      	movs	r0, #1
    3d28:	29ff      	cmp	r1, #255	; 0xff
    3d2a:	d001      	beq.n	3d30 <L2cDmConnUpdateReq+0x34>
    3d2c:	1809      	adds	r1, r1, r0
    3d2e:	b2c8      	uxtb	r0, r1
    3d30:	3205      	adds	r2, #5
    3d32:	77d0      	strb	r0, [r2, #31]
    3d34:	2208      	movs	r2, #8
    3d36:	729a      	strb	r2, [r3, #10]
    3d38:	2200      	movs	r2, #0
    3d3a:	72da      	strb	r2, [r3, #11]
    3d3c:	8822      	ldrh	r2, [r4, #0]
    3d3e:	0029      	movs	r1, r5
    3d40:	731a      	strb	r2, [r3, #12]
    3d42:	8822      	ldrh	r2, [r4, #0]
    3d44:	2005      	movs	r0, #5
    3d46:	0a12      	lsrs	r2, r2, #8
    3d48:	735a      	strb	r2, [r3, #13]
    3d4a:	8862      	ldrh	r2, [r4, #2]
    3d4c:	739a      	strb	r2, [r3, #14]
    3d4e:	8862      	ldrh	r2, [r4, #2]
    3d50:	0a12      	lsrs	r2, r2, #8
    3d52:	73da      	strb	r2, [r3, #15]
    3d54:	88a2      	ldrh	r2, [r4, #4]
    3d56:	741a      	strb	r2, [r3, #16]
    3d58:	88a2      	ldrh	r2, [r4, #4]
    3d5a:	0a12      	lsrs	r2, r2, #8
    3d5c:	745a      	strb	r2, [r3, #17]
    3d5e:	88e2      	ldrh	r2, [r4, #6]
    3d60:	749a      	strb	r2, [r3, #18]
    3d62:	88e2      	ldrh	r2, [r4, #6]
    3d64:	0a12      	lsrs	r2, r2, #8
    3d66:	74da      	strb	r2, [r3, #19]
    3d68:	220c      	movs	r2, #12
    3d6a:	f7ff ff67 	bl	3c3c <L2cDataReq>
    3d6e:	bd70      	pop	{r4, r5, r6, pc}
    3d70:	100017f8 	.word	0x100017f8
    3d74:	100017d0 	.word	0x100017d0

00003d78 <L2cSlaveHandlerInit>:
    3d78:	2201      	movs	r2, #1
    3d7a:	4b02      	ldr	r3, [pc, #8]	; (3d84 <L2cSlaveHandlerInit+0xc>)
    3d7c:	731a      	strb	r2, [r3, #12]
    3d7e:	7218      	strb	r0, [r3, #8]
    3d80:	7418      	strb	r0, [r3, #16]
    3d82:	4770      	bx	lr
    3d84:	100017f8 	.word	0x100017f8

00003d88 <L2cSlaveHandler>:
    3d88:	b510      	push	{r4, lr}
    3d8a:	1e0b      	subs	r3, r1, #0
    3d8c:	d005      	beq.n	3d9a <L2cSlaveHandler+0x12>
    3d8e:	7889      	ldrb	r1, [r1, #2]
    3d90:	2901      	cmp	r1, #1
    3d92:	d102      	bne.n	3d9a <L2cSlaveHandler+0x12>
    3d94:	8818      	ldrh	r0, [r3, #0]
    3d96:	f7ff f94f 	bl	3038 <DmL2cConnUpdateCnf>
    3d9a:	bd10      	pop	{r4, pc}

00003d9c <smpDmConnCback>:
    3d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3d9e:	0004      	movs	r4, r0
    3da0:	8802      	ldrh	r2, [r0, #0]
    3da2:	78a1      	ldrb	r1, [r4, #2]
    3da4:	b2d0      	uxtb	r0, r2
    3da6:	1e46      	subs	r6, r0, #1
    3da8:	4d22      	ldr	r5, [pc, #136]	; (3e34 <smpDmConnCback+0x98>)
    3daa:	2927      	cmp	r1, #39	; 0x27
    3dac:	d124      	bne.n	3df8 <smpDmConnCback+0x5c>
    3dae:	f7ff f8f1 	bl	2f94 <DmConnRole>
    3db2:	2338      	movs	r3, #56	; 0x38
    3db4:	4373      	muls	r3, r6
    3db6:	18eb      	adds	r3, r5, r3
    3db8:	001a      	movs	r2, r3
    3dba:	322a      	adds	r2, #42	; 0x2a
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d104      	bne.n	3dca <smpDmConnCback+0x2e>
    3dc0:	2101      	movs	r1, #1
    3dc2:	332f      	adds	r3, #47	; 0x2f
    3dc4:	7011      	strb	r1, [r2, #0]
    3dc6:	220b      	movs	r2, #11
    3dc8:	e003      	b.n	3dd2 <smpDmConnCback+0x36>
    3dca:	2100      	movs	r1, #0
    3dcc:	7011      	strb	r1, [r2, #0]
    3dce:	2201      	movs	r2, #1
    3dd0:	332f      	adds	r3, #47	; 0x2f
    3dd2:	701a      	strb	r2, [r3, #0]
    3dd4:	2338      	movs	r3, #56	; 0x38
    3dd6:	435e      	muls	r6, r3
    3dd8:	19ad      	adds	r5, r5, r6
    3dda:	002b      	movs	r3, r5
    3ddc:	88e2      	ldrh	r2, [r4, #6]
    3dde:	332d      	adds	r3, #45	; 0x2d
    3de0:	852a      	strh	r2, [r5, #40]	; 0x28
    3de2:	8822      	ldrh	r2, [r4, #0]
    3de4:	701a      	strb	r2, [r3, #0]
    3de6:	002a      	movs	r2, r5
    3de8:	2300      	movs	r3, #0
    3dea:	322b      	adds	r2, #43	; 0x2b
    3dec:	3533      	adds	r5, #51	; 0x33
    3dee:	7013      	strb	r3, [r2, #0]
    3df0:	7053      	strb	r3, [r2, #1]
    3df2:	71d3      	strb	r3, [r2, #7]
    3df4:	702b      	strb	r3, [r5, #0]
    3df6:	e01b      	b.n	3e30 <smpDmConnCback+0x94>
    3df8:	2338      	movs	r3, #56	; 0x38
    3dfa:	435e      	muls	r6, r3
    3dfc:	19ad      	adds	r5, r5, r6
    3dfe:	002e      	movs	r6, r5
    3e00:	362d      	adds	r6, #45	; 0x2d
    3e02:	7833      	ldrb	r3, [r6, #0]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d013      	beq.n	3e30 <smpDmConnCback+0x94>
    3e08:	2928      	cmp	r1, #40	; 0x28
    3e0a:	d111      	bne.n	3e30 <smpDmConnCback+0x94>
    3e0c:	230a      	movs	r3, #10
    3e0e:	a901      	add	r1, sp, #4
    3e10:	800a      	strh	r2, [r1, #0]
    3e12:	708b      	strb	r3, [r1, #2]
    3e14:	7a23      	ldrb	r3, [r4, #8]
    3e16:	2400      	movs	r4, #0
    3e18:	3320      	adds	r3, #32
    3e1a:	0028      	movs	r0, r5
    3e1c:	70cb      	strb	r3, [r1, #3]
    3e1e:	f001 fac2 	bl	53a6 <smpSmExecute>
    3e22:	6a68      	ldr	r0, [r5, #36]	; 0x24
    3e24:	7034      	strb	r4, [r6, #0]
    3e26:	42a0      	cmp	r0, r4
    3e28:	d002      	beq.n	3e30 <smpDmConnCback+0x94>
    3e2a:	f007 f821 	bl	ae70 <WsfMsgFree>
    3e2e:	626c      	str	r4, [r5, #36]	; 0x24
    3e30:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	1000180c 	.word	0x1000180c

00003e38 <smpCcbByHandle>:
    3e38:	b510      	push	{r4, lr}
    3e3a:	f7ff f81d 	bl	2e78 <DmConnIdByHandle>
    3e3e:	2800      	cmp	r0, #0
    3e40:	d004      	beq.n	3e4c <smpCcbByHandle+0x14>
    3e42:	2338      	movs	r3, #56	; 0x38
    3e44:	3801      	subs	r0, #1
    3e46:	4358      	muls	r0, r3
    3e48:	4b01      	ldr	r3, [pc, #4]	; (3e50 <smpCcbByHandle+0x18>)
    3e4a:	1818      	adds	r0, r3, r0
    3e4c:	bd10      	pop	{r4, pc}
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	1000180c 	.word	0x1000180c

00003e54 <smpL2cDataCback>:
    3e54:	b530      	push	{r4, r5, lr}
    3e56:	b087      	sub	sp, #28
    3e58:	000d      	movs	r5, r1
    3e5a:	0014      	movs	r4, r2
    3e5c:	f7ff ffec 	bl	3e38 <smpCcbByHandle>
    3e60:	2800      	cmp	r0, #0
    3e62:	d023      	beq.n	3eac <smpL2cDataCback+0x58>
    3e64:	7a23      	ldrb	r3, [r4, #8]
    3e66:	1e5a      	subs	r2, r3, #1
    3e68:	2a0d      	cmp	r2, #13
    3e6a:	d81f      	bhi.n	3eac <smpL2cDataCback+0x58>
    3e6c:	4a10      	ldr	r2, [pc, #64]	; (3eb0 <smpL2cDataCback+0x5c>)
    3e6e:	5cd2      	ldrb	r2, [r2, r3]
    3e70:	42aa      	cmp	r2, r5
    3e72:	d11b      	bne.n	3eac <smpL2cDataCback+0x58>
    3e74:	0002      	movs	r2, r0
    3e76:	322f      	adds	r2, #47	; 0x2f
    3e78:	7812      	ldrb	r2, [r2, #0]
    3e7a:	429a      	cmp	r2, r3
    3e7c:	d002      	beq.n	3e84 <smpL2cDataCback+0x30>
    3e7e:	2b05      	cmp	r3, #5
    3e80:	d114      	bne.n	3eac <smpL2cDataCback+0x58>
    3e82:	e001      	b.n	3e88 <smpL2cDataCback+0x34>
    3e84:	2a05      	cmp	r2, #5
    3e86:	d105      	bne.n	3e94 <smpL2cDataCback+0x40>
    3e88:	2307      	movs	r3, #7
    3e8a:	466a      	mov	r2, sp
    3e8c:	7093      	strb	r3, [r2, #2]
    3e8e:	7a63      	ldrb	r3, [r4, #9]
    3e90:	70d3      	strb	r3, [r2, #3]
    3e92:	e002      	b.n	3e9a <smpL2cDataCback+0x46>
    3e94:	2306      	movs	r3, #6
    3e96:	466a      	mov	r2, sp
    3e98:	7093      	strb	r3, [r2, #2]
    3e9a:	0003      	movs	r3, r0
    3e9c:	466a      	mov	r2, sp
    3e9e:	332d      	adds	r3, #45	; 0x2d
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	4669      	mov	r1, sp
    3ea4:	8013      	strh	r3, [r2, #0]
    3ea6:	9401      	str	r4, [sp, #4]
    3ea8:	f001 fa7d 	bl	53a6 <smpSmExecute>
    3eac:	b007      	add	sp, #28
    3eae:	bd30      	pop	{r4, r5, pc}
    3eb0:	0001248c 	.word	0x0001248c

00003eb4 <smpCcbByConnId>:
    3eb4:	2338      	movs	r3, #56	; 0x38
    3eb6:	3801      	subs	r0, #1
    3eb8:	4358      	muls	r0, r3
    3eba:	4b01      	ldr	r3, [pc, #4]	; (3ec0 <smpCcbByConnId+0xc>)
    3ebc:	1818      	adds	r0, r3, r0
    3ebe:	4770      	bx	lr
    3ec0:	1000180c 	.word	0x1000180c

00003ec4 <smpCalcC1Part1>:
    3ec4:	0003      	movs	r3, r0
    3ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ec8:	0004      	movs	r4, r0
    3eca:	b08b      	sub	sp, #44	; 0x2c
    3ecc:	9103      	str	r1, [sp, #12]
    3ece:	332a      	adds	r3, #42	; 0x2a
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	342d      	adds	r4, #45	; 0x2d
    3ed4:	0005      	movs	r5, r0
    3ed6:	0017      	movs	r7, r2
    3ed8:	7820      	ldrb	r0, [r4, #0]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d016      	beq.n	3f0c <smpCalcC1Part1+0x48>
    3ede:	f7ff f819 	bl	2f14 <DmConnLocalRpa>
    3ee2:	f009 f9c2 	bl	d26a <BdaIsZeros>
    3ee6:	2601      	movs	r6, #1
    3ee8:	2800      	cmp	r0, #0
    3eea:	d003      	beq.n	3ef4 <smpCalcC1Part1+0x30>
    3eec:	7820      	ldrb	r0, [r4, #0]
    3eee:	f7fe fff3 	bl	2ed8 <DmConnLocalAddrType>
    3ef2:	0006      	movs	r6, r0
    3ef4:	7820      	ldrb	r0, [r4, #0]
    3ef6:	f7ff f803 	bl	2f00 <DmConnPeerRpa>
    3efa:	f009 f9b6 	bl	d26a <BdaIsZeros>
    3efe:	2301      	movs	r3, #1
    3f00:	2800      	cmp	r0, #0
    3f02:	d01a      	beq.n	3f3a <smpCalcC1Part1+0x76>
    3f04:	7820      	ldrb	r0, [r4, #0]
    3f06:	f7fe ffd5 	bl	2eb4 <DmConnPeerAddrType>
    3f0a:	e015      	b.n	3f38 <smpCalcC1Part1+0x74>
    3f0c:	f7fe fff8 	bl	2f00 <DmConnPeerRpa>
    3f10:	f009 f9ab 	bl	d26a <BdaIsZeros>
    3f14:	2601      	movs	r6, #1
    3f16:	2800      	cmp	r0, #0
    3f18:	d003      	beq.n	3f22 <smpCalcC1Part1+0x5e>
    3f1a:	7820      	ldrb	r0, [r4, #0]
    3f1c:	f7fe ffca 	bl	2eb4 <DmConnPeerAddrType>
    3f20:	0006      	movs	r6, r0
    3f22:	7820      	ldrb	r0, [r4, #0]
    3f24:	f7fe fff6 	bl	2f14 <DmConnLocalRpa>
    3f28:	f009 f99f 	bl	d26a <BdaIsZeros>
    3f2c:	2301      	movs	r3, #1
    3f2e:	2800      	cmp	r0, #0
    3f30:	d003      	beq.n	3f3a <smpCalcC1Part1+0x76>
    3f32:	7820      	ldrb	r0, [r4, #0]
    3f34:	f7fe ffd0 	bl	2ed8 <DmConnLocalAddrType>
    3f38:	0003      	movs	r3, r0
    3f3a:	7878      	ldrb	r0, [r7, #1]
    3f3c:	aa06      	add	r2, sp, #24
    3f3e:	4043      	eors	r3, r0
    3f40:	7053      	strb	r3, [r2, #1]
    3f42:	2300      	movs	r3, #0
    3f44:	7839      	ldrb	r1, [r7, #0]
    3f46:	404e      	eors	r6, r1
    3f48:	7016      	strb	r6, [r2, #0]
    3f4a:	1cb9      	adds	r1, r7, #2
    3f4c:	18e8      	adds	r0, r5, r3
    3f4e:	7c07      	ldrb	r7, [r0, #16]
    3f50:	5cc8      	ldrb	r0, [r1, r3]
    3f52:	18d6      	adds	r6, r2, r3
    3f54:	4078      	eors	r0, r7
    3f56:	3301      	adds	r3, #1
    3f58:	70b0      	strb	r0, [r6, #2]
    3f5a:	2b07      	cmp	r3, #7
    3f5c:	d1f6      	bne.n	3f4c <smpCalcC1Part1+0x88>
    3f5e:	2300      	movs	r3, #0
    3f60:	aa06      	add	r2, sp, #24
    3f62:	18d0      	adds	r0, r2, r3
    3f64:	18ee      	adds	r6, r5, r3
    3f66:	18ca      	adds	r2, r1, r3
    3f68:	7df6      	ldrb	r6, [r6, #23]
    3f6a:	79d2      	ldrb	r2, [r2, #7]
    3f6c:	3301      	adds	r3, #1
    3f6e:	4072      	eors	r2, r6
    3f70:	7242      	strb	r2, [r0, #9]
    3f72:	2b07      	cmp	r3, #7
    3f74:	d1f4      	bne.n	3f60 <smpCalcC1Part1+0x9c>
    3f76:	22e4      	movs	r2, #228	; 0xe4
    3f78:	490c      	ldr	r1, [pc, #48]	; (3fac <smpCalcC1Part1+0xe8>)
    3f7a:	0052      	lsls	r2, r2, #1
    3f7c:	5c8a      	ldrb	r2, [r1, r2]
    3f7e:	210b      	movs	r1, #11
    3f80:	7823      	ldrb	r3, [r4, #0]
    3f82:	9803      	ldr	r0, [sp, #12]
    3f84:	9100      	str	r1, [sp, #0]
    3f86:	a906      	add	r1, sp, #24
    3f88:	f006 fa8a 	bl	a4a0 <SecAes>
    3f8c:	002b      	movs	r3, r5
    3f8e:	3331      	adds	r3, #49	; 0x31
    3f90:	7018      	strb	r0, [r3, #0]
    3f92:	28ff      	cmp	r0, #255	; 0xff
    3f94:	d107      	bne.n	3fa6 <smpCalcC1Part1+0xe2>
    3f96:	2308      	movs	r3, #8
    3f98:	a905      	add	r1, sp, #20
    3f9a:	70cb      	strb	r3, [r1, #3]
    3f9c:	0028      	movs	r0, r5
    3f9e:	3b05      	subs	r3, #5
    3fa0:	708b      	strb	r3, [r1, #2]
    3fa2:	f001 fa00 	bl	53a6 <smpSmExecute>
    3fa6:	b00b      	add	sp, #44	; 0x2c
    3fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	1000180c 	.word	0x1000180c

00003fb0 <smpCalcC1Part2>:
    3fb0:	0003      	movs	r3, r0
    3fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fb4:	0004      	movs	r4, r0
    3fb6:	b08b      	sub	sp, #44	; 0x2c
    3fb8:	9002      	str	r0, [sp, #8]
    3fba:	9103      	str	r1, [sp, #12]
    3fbc:	332a      	adds	r3, #42	; 0x2a
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	342d      	adds	r4, #45	; 0x2d
    3fc2:	0015      	movs	r5, r2
    3fc4:	7820      	ldrb	r0, [r4, #0]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d016      	beq.n	3ff8 <smpCalcC1Part2+0x48>
    3fca:	f7fe ffa3 	bl	2f14 <DmConnLocalRpa>
    3fce:	0006      	movs	r6, r0
    3fd0:	f009 f94b 	bl	d26a <BdaIsZeros>
    3fd4:	2800      	cmp	r0, #0
    3fd6:	d003      	beq.n	3fe0 <smpCalcC1Part2+0x30>
    3fd8:	7820      	ldrb	r0, [r4, #0]
    3fda:	f7fe ff87 	bl	2eec <DmConnLocalAddr>
    3fde:	0006      	movs	r6, r0
    3fe0:	7820      	ldrb	r0, [r4, #0]
    3fe2:	f7fe ff8d 	bl	2f00 <DmConnPeerRpa>
    3fe6:	0007      	movs	r7, r0
    3fe8:	f009 f93f 	bl	d26a <BdaIsZeros>
    3fec:	2800      	cmp	r0, #0
    3fee:	d01a      	beq.n	4026 <smpCalcC1Part2+0x76>
    3ff0:	7820      	ldrb	r0, [r4, #0]
    3ff2:	f7fe ff69 	bl	2ec8 <DmConnPeerAddr>
    3ff6:	e015      	b.n	4024 <smpCalcC1Part2+0x74>
    3ff8:	f7fe ff82 	bl	2f00 <DmConnPeerRpa>
    3ffc:	0006      	movs	r6, r0
    3ffe:	f009 f934 	bl	d26a <BdaIsZeros>
    4002:	2800      	cmp	r0, #0
    4004:	d003      	beq.n	400e <smpCalcC1Part2+0x5e>
    4006:	7820      	ldrb	r0, [r4, #0]
    4008:	f7fe ff5e 	bl	2ec8 <DmConnPeerAddr>
    400c:	0006      	movs	r6, r0
    400e:	7820      	ldrb	r0, [r4, #0]
    4010:	f7fe ff80 	bl	2f14 <DmConnLocalRpa>
    4014:	0007      	movs	r7, r0
    4016:	f009 f928 	bl	d26a <BdaIsZeros>
    401a:	2800      	cmp	r0, #0
    401c:	d003      	beq.n	4026 <smpCalcC1Part2+0x76>
    401e:	7820      	ldrb	r0, [r4, #0]
    4020:	f7fe ff64 	bl	2eec <DmConnLocalAddr>
    4024:	0007      	movs	r7, r0
    4026:	2300      	movs	r3, #0
    4028:	5cf8      	ldrb	r0, [r7, r3]
    402a:	5cea      	ldrb	r2, [r5, r3]
    402c:	a906      	add	r1, sp, #24
    402e:	4042      	eors	r2, r0
    4030:	545a      	strb	r2, [r3, r1]
    4032:	3301      	adds	r3, #1
    4034:	2b06      	cmp	r3, #6
    4036:	d1f7      	bne.n	4028 <smpCalcC1Part2+0x78>
    4038:	2300      	movs	r3, #0
    403a:	18ea      	adds	r2, r5, r3
    403c:	7997      	ldrb	r7, [r2, #6]
    403e:	5cf2      	ldrb	r2, [r6, r3]
    4040:	18c8      	adds	r0, r1, r3
    4042:	407a      	eors	r2, r7
    4044:	3301      	adds	r3, #1
    4046:	7182      	strb	r2, [r0, #6]
    4048:	2b06      	cmp	r3, #6
    404a:	d1f6      	bne.n	403a <smpCalcC1Part2+0x8a>
    404c:	22e4      	movs	r2, #228	; 0xe4
    404e:	7b2b      	ldrb	r3, [r5, #12]
    4050:	480f      	ldr	r0, [pc, #60]	; (4090 <smpCalcC1Part2+0xe0>)
    4052:	730b      	strb	r3, [r1, #12]
    4054:	7b6b      	ldrb	r3, [r5, #13]
    4056:	0052      	lsls	r2, r2, #1
    4058:	734b      	strb	r3, [r1, #13]
    405a:	7bab      	ldrb	r3, [r5, #14]
    405c:	738b      	strb	r3, [r1, #14]
    405e:	7beb      	ldrb	r3, [r5, #15]
    4060:	73cb      	strb	r3, [r1, #15]
    4062:	5c82      	ldrb	r2, [r0, r2]
    4064:	200b      	movs	r0, #11
    4066:	7823      	ldrb	r3, [r4, #0]
    4068:	9000      	str	r0, [sp, #0]
    406a:	9803      	ldr	r0, [sp, #12]
    406c:	f006 fa18 	bl	a4a0 <SecAes>
    4070:	9b02      	ldr	r3, [sp, #8]
    4072:	3331      	adds	r3, #49	; 0x31
    4074:	7018      	strb	r0, [r3, #0]
    4076:	28ff      	cmp	r0, #255	; 0xff
    4078:	d107      	bne.n	408a <smpCalcC1Part2+0xda>
    407a:	2308      	movs	r3, #8
    407c:	a905      	add	r1, sp, #20
    407e:	70cb      	strb	r3, [r1, #3]
    4080:	9802      	ldr	r0, [sp, #8]
    4082:	3b05      	subs	r3, #5
    4084:	708b      	strb	r3, [r1, #2]
    4086:	f001 f98e 	bl	53a6 <smpSmExecute>
    408a:	b00b      	add	sp, #44	; 0x2c
    408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	1000180c 	.word	0x1000180c

00004094 <smpCalcS1>:
    4094:	b570      	push	{r4, r5, r6, lr}
    4096:	0016      	movs	r6, r2
    4098:	b088      	sub	sp, #32
    409a:	0004      	movs	r4, r0
    409c:	000d      	movs	r5, r1
    409e:	a804      	add	r0, sp, #16
    40a0:	0019      	movs	r1, r3
    40a2:	f009 f90a 	bl	d2ba <Calc128Cpy64>
    40a6:	0031      	movs	r1, r6
    40a8:	a806      	add	r0, sp, #24
    40aa:	f009 f906 	bl	d2ba <Calc128Cpy64>
    40ae:	22e4      	movs	r2, #228	; 0xe4
    40b0:	490d      	ldr	r1, [pc, #52]	; (40e8 <smpCalcS1+0x54>)
    40b2:	0023      	movs	r3, r4
    40b4:	0052      	lsls	r2, r2, #1
    40b6:	5c8a      	ldrb	r2, [r1, r2]
    40b8:	210b      	movs	r1, #11
    40ba:	332d      	adds	r3, #45	; 0x2d
    40bc:	781b      	ldrb	r3, [r3, #0]
    40be:	0028      	movs	r0, r5
    40c0:	9100      	str	r1, [sp, #0]
    40c2:	a904      	add	r1, sp, #16
    40c4:	f006 f9ec 	bl	a4a0 <SecAes>
    40c8:	0023      	movs	r3, r4
    40ca:	3331      	adds	r3, #49	; 0x31
    40cc:	7018      	strb	r0, [r3, #0]
    40ce:	28ff      	cmp	r0, #255	; 0xff
    40d0:	d107      	bne.n	40e2 <smpCalcS1+0x4e>
    40d2:	2308      	movs	r3, #8
    40d4:	a903      	add	r1, sp, #12
    40d6:	70cb      	strb	r3, [r1, #3]
    40d8:	0020      	movs	r0, r4
    40da:	3b05      	subs	r3, #5
    40dc:	708b      	strb	r3, [r1, #2]
    40de:	f001 f962 	bl	53a6 <smpSmExecute>
    40e2:	b008      	add	sp, #32
    40e4:	bd70      	pop	{r4, r5, r6, pc}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	1000180c 	.word	0x1000180c

000040ec <smpGenerateLtk>:
    40ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ee:	6a04      	ldr	r4, [r0, #32]
    40f0:	0005      	movs	r5, r0
    40f2:	1d26      	adds	r6, r4, #4
    40f4:	1c67      	adds	r7, r4, #1
    40f6:	7ff9      	ldrb	r1, [r7, #31]
    40f8:	0030      	movs	r0, r6
    40fa:	f006 fd45 	bl	ab88 <SecRand>
    40fe:	2210      	movs	r2, #16
    4100:	7ff8      	ldrb	r0, [r7, #31]
    4102:	2100      	movs	r1, #0
    4104:	1a12      	subs	r2, r2, r0
    4106:	1830      	adds	r0, r6, r0
    4108:	f00d f9dc 	bl	114c4 <memset>
    410c:	0023      	movs	r3, r4
    410e:	0022      	movs	r2, r4
    4110:	0020      	movs	r0, r4
    4112:	0021      	movs	r1, r4
    4114:	3331      	adds	r3, #49	; 0x31
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	3230      	adds	r2, #48	; 0x30
    411a:	7812      	ldrb	r2, [r2, #0]
    411c:	021b      	lsls	r3, r3, #8
    411e:	18d3      	adds	r3, r2, r3
    4120:	83a3      	strh	r3, [r4, #28]
    4122:	3132      	adds	r1, #50	; 0x32
    4124:	2208      	movs	r2, #8
    4126:	3014      	adds	r0, #20
    4128:	f00d f9a7 	bl	1147a <memcpy>
    412c:	2301      	movs	r3, #1
    412e:	3530      	adds	r5, #48	; 0x30
    4130:	77a3      	strb	r3, [r4, #30]
    4132:	782b      	ldrb	r3, [r5, #0]
    4134:	0020      	movs	r0, r4
    4136:	075b      	lsls	r3, r3, #29
    4138:	0fdb      	lsrs	r3, r3, #31
    413a:	3301      	adds	r3, #1
    413c:	77e3      	strb	r3, [r4, #31]
    413e:	232f      	movs	r3, #47	; 0x2f
    4140:	70a3      	strb	r3, [r4, #2]
    4142:	f7ff fb1b 	bl	377c <DmSmpCbackExec>
    4146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004148 <smpSendPkt>:
    4148:	0003      	movs	r3, r0
    414a:	b570      	push	{r4, r5, r6, lr}
    414c:	332c      	adds	r3, #44	; 0x2c
    414e:	781b      	ldrb	r3, [r3, #0]
    4150:	0004      	movs	r4, r0
    4152:	000d      	movs	r5, r1
    4154:	2b00      	cmp	r3, #0
    4156:	d006      	beq.n	4166 <smpSendPkt+0x1e>
    4158:	6a40      	ldr	r0, [r0, #36]	; 0x24
    415a:	2800      	cmp	r0, #0
    415c:	d001      	beq.n	4162 <smpSendPkt+0x1a>
    415e:	f006 fe87 	bl	ae70 <WsfMsgFree>
    4162:	6265      	str	r5, [r4, #36]	; 0x24
    4164:	e007      	b.n	4176 <smpSendPkt+0x2e>
    4166:	7a0b      	ldrb	r3, [r1, #8]
    4168:	4a03      	ldr	r2, [pc, #12]	; (4178 <smpSendPkt+0x30>)
    416a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    416c:	5cd2      	ldrb	r2, [r2, r3]
    416e:	2006      	movs	r0, #6
    4170:	002b      	movs	r3, r5
    4172:	f7ff fd63 	bl	3c3c <L2cDataReq>
    4176:	bd70      	pop	{r4, r5, r6, pc}
    4178:	0001248c 	.word	0x0001248c

0000417c <smpL2cCtrlCback>:
    417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    417e:	2438      	movs	r4, #56	; 0x38
    4180:	7803      	ldrb	r3, [r0, #0]
    4182:	0005      	movs	r5, r0
    4184:	1e5f      	subs	r7, r3, #1
    4186:	437c      	muls	r4, r7
    4188:	4b13      	ldr	r3, [pc, #76]	; (41d8 <smpL2cCtrlCback+0x5c>)
    418a:	191c      	adds	r4, r3, r4
    418c:	0022      	movs	r2, r4
    418e:	322d      	adds	r2, #45	; 0x2d
    4190:	7812      	ldrb	r2, [r2, #0]
    4192:	001e      	movs	r6, r3
    4194:	2a00      	cmp	r2, #0
    4196:	d01d      	beq.n	41d4 <smpL2cCtrlCback+0x58>
    4198:	7881      	ldrb	r1, [r0, #2]
    419a:	1e4a      	subs	r2, r1, #1
    419c:	4253      	negs	r3, r2
    419e:	415a      	adcs	r2, r3
    41a0:	0023      	movs	r3, r4
    41a2:	332c      	adds	r3, #44	; 0x2c
    41a4:	701a      	strb	r2, [r3, #0]
    41a6:	2901      	cmp	r1, #1
    41a8:	d014      	beq.n	41d4 <smpL2cCtrlCback+0x58>
    41aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    41ac:	2900      	cmp	r1, #0
    41ae:	d004      	beq.n	41ba <smpL2cCtrlCback+0x3e>
    41b0:	2300      	movs	r3, #0
    41b2:	0020      	movs	r0, r4
    41b4:	6263      	str	r3, [r4, #36]	; 0x24
    41b6:	f7ff ffc7 	bl	4148 <smpSendPkt>
    41ba:	2338      	movs	r3, #56	; 0x38
    41bc:	437b      	muls	r3, r7
    41be:	18f3      	adds	r3, r6, r3
    41c0:	332e      	adds	r3, #46	; 0x2e
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d005      	beq.n	41d4 <smpL2cCtrlCback+0x58>
    41c8:	230c      	movs	r3, #12
    41ca:	0029      	movs	r1, r5
    41cc:	70ab      	strb	r3, [r5, #2]
    41ce:	0020      	movs	r0, r4
    41d0:	f001 f8e9 	bl	53a6 <smpSmExecute>
    41d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	1000180c 	.word	0x1000180c

000041dc <smpStateIdle>:
    41dc:	302e      	adds	r0, #46	; 0x2e
    41de:	7800      	ldrb	r0, [r0, #0]
    41e0:	4243      	negs	r3, r0
    41e2:	4158      	adcs	r0, r3
    41e4:	b2c0      	uxtb	r0, r0
    41e6:	4770      	bx	lr

000041e8 <smpMsgAlloc>:
    41e8:	b510      	push	{r4, lr}
    41ea:	2100      	movs	r1, #0
    41ec:	f006 fe14 	bl	ae18 <WsfMsgDataAlloc>
    41f0:	bd10      	pop	{r4, pc}

000041f2 <SmpDmMsgSend>:
    41f2:	23e4      	movs	r3, #228	; 0xe4
    41f4:	b510      	push	{r4, lr}
    41f6:	4a03      	ldr	r2, [pc, #12]	; (4204 <SmpDmMsgSend+0x12>)
    41f8:	005b      	lsls	r3, r3, #1
    41fa:	0001      	movs	r1, r0
    41fc:	5cd0      	ldrb	r0, [r2, r3]
    41fe:	f006 fe44 	bl	ae8a <WsfMsgSend>
    4202:	bd10      	pop	{r4, pc}
    4204:	1000180c 	.word	0x1000180c

00004208 <SmpDmGetStk>:
    4208:	23ea      	movs	r3, #234	; 0xea
    420a:	b530      	push	{r4, r5, lr}
    420c:	4c13      	ldr	r4, [pc, #76]	; (425c <SmpDmGetStk+0x54>)
    420e:	005b      	lsls	r3, r3, #1
    4210:	5ce2      	ldrb	r2, [r4, r3]
    4212:	3801      	subs	r0, #1
    4214:	0023      	movs	r3, r4
    4216:	2a00      	cmp	r2, #0
    4218:	d00f      	beq.n	423a <SmpDmGetStk+0x32>
    421a:	2238      	movs	r2, #56	; 0x38
    421c:	4342      	muls	r2, r0
    421e:	18a2      	adds	r2, r4, r2
    4220:	6b54      	ldr	r4, [r2, #52]	; 0x34
    4222:	7825      	ldrb	r5, [r4, #0]
    4224:	2d00      	cmp	r5, #0
    4226:	d008      	beq.n	423a <SmpDmGetStk+0x32>
    4228:	6924      	ldr	r4, [r4, #16]
    422a:	2c00      	cmp	r4, #0
    422c:	d005      	beq.n	423a <SmpDmGetStk+0x32>
    422e:	2303      	movs	r3, #3
    4230:	700b      	strb	r3, [r1, #0]
    4232:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4234:	6918      	ldr	r0, [r3, #16]
    4236:	3010      	adds	r0, #16
    4238:	e00e      	b.n	4258 <SmpDmGetStk+0x50>
    423a:	2238      	movs	r2, #56	; 0x38
    423c:	4350      	muls	r0, r2
    423e:	181b      	adds	r3, r3, r0
    4240:	6a18      	ldr	r0, [r3, #32]
    4242:	2800      	cmp	r0, #0
    4244:	d008      	beq.n	4258 <SmpDmGetStk+0x50>
    4246:	001a      	movs	r2, r3
    4248:	3230      	adds	r2, #48	; 0x30
    424a:	7812      	ldrb	r2, [r2, #0]
    424c:	0752      	lsls	r2, r2, #29
    424e:	0fd2      	lsrs	r2, r2, #31
    4250:	3201      	adds	r2, #1
    4252:	700a      	strb	r2, [r1, #0]
    4254:	6a18      	ldr	r0, [r3, #32]
    4256:	3020      	adds	r0, #32
    4258:	bd30      	pop	{r4, r5, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	1000180c 	.word	0x1000180c

00004260 <SmpDmGetLtk>:
    4260:	23ea      	movs	r3, #234	; 0xea
    4262:	4a07      	ldr	r2, [pc, #28]	; (4280 <SmpDmGetLtk+0x20>)
    4264:	005b      	lsls	r3, r3, #1
    4266:	5cd1      	ldrb	r1, [r2, r3]
    4268:	3801      	subs	r0, #1
    426a:	1e0b      	subs	r3, r1, #0
    426c:	d005      	beq.n	427a <SmpDmGetLtk+0x1a>
    426e:	2338      	movs	r3, #56	; 0x38
    4270:	4358      	muls	r0, r3
    4272:	1810      	adds	r0, r2, r0
    4274:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4276:	691b      	ldr	r3, [r3, #16]
    4278:	3310      	adds	r3, #16
    427a:	0018      	movs	r0, r3
    427c:	4770      	bx	lr
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	1000180c 	.word	0x1000180c

00004284 <SmpHandlerInit>:
    4284:	22e4      	movs	r2, #228	; 0xe4
    4286:	4b0c      	ldr	r3, [pc, #48]	; (42b8 <SmpHandlerInit+0x34>)
    4288:	0052      	lsls	r2, r2, #1
    428a:	b510      	push	{r4, lr}
    428c:	5498      	strb	r0, [r3, r2]
    428e:	3ac8      	subs	r2, #200	; 0xc8
    4290:	3308      	adds	r3, #8
    4292:	3aff      	subs	r2, #255	; 0xff
    4294:	805a      	strh	r2, [r3, #2]
    4296:	3201      	adds	r2, #1
    4298:	b292      	uxth	r2, r2
    429a:	7018      	strb	r0, [r3, #0]
    429c:	3338      	adds	r3, #56	; 0x38
    429e:	2a09      	cmp	r2, #9
    42a0:	d1f8      	bne.n	4294 <SmpHandlerInit+0x10>
    42a2:	4a06      	ldr	r2, [pc, #24]	; (42bc <SmpHandlerInit+0x38>)
    42a4:	4906      	ldr	r1, [pc, #24]	; (42c0 <SmpHandlerInit+0x3c>)
    42a6:	2006      	movs	r0, #6
    42a8:	f7ff fcbc 	bl	3c24 <L2cRegister>
    42ac:	4905      	ldr	r1, [pc, #20]	; (42c4 <SmpHandlerInit+0x40>)
    42ae:	2001      	movs	r0, #1
    42b0:	f7fe fcdc 	bl	2c6c <DmConnRegister>
    42b4:	bd10      	pop	{r4, pc}
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	1000180c 	.word	0x1000180c
    42bc:	0000417d 	.word	0x0000417d
    42c0:	00003e55 	.word	0x00003e55
    42c4:	00003d9d 	.word	0x00003d9d

000042c8 <SmpHandler>:
    42c8:	b510      	push	{r4, lr}
    42ca:	2900      	cmp	r1, #0
    42cc:	d017      	beq.n	42fe <SmpHandler+0x36>
    42ce:	2338      	movs	r3, #56	; 0x38
    42d0:	7808      	ldrb	r0, [r1, #0]
    42d2:	4a0b      	ldr	r2, [pc, #44]	; (4300 <SmpHandler+0x38>)
    42d4:	3801      	subs	r0, #1
    42d6:	4343      	muls	r3, r0
    42d8:	18d3      	adds	r3, r2, r3
    42da:	001c      	movs	r4, r3
    42dc:	342d      	adds	r4, #45	; 0x2d
    42de:	7824      	ldrb	r4, [r4, #0]
    42e0:	2c00      	cmp	r4, #0
    42e2:	d00c      	beq.n	42fe <SmpHandler+0x36>
    42e4:	788c      	ldrb	r4, [r1, #2]
    42e6:	2c0b      	cmp	r4, #11
    42e8:	d104      	bne.n	42f4 <SmpHandler+0x2c>
    42ea:	3331      	adds	r3, #49	; 0x31
    42ec:	781c      	ldrb	r4, [r3, #0]
    42ee:	78cb      	ldrb	r3, [r1, #3]
    42f0:	429c      	cmp	r4, r3
    42f2:	d104      	bne.n	42fe <SmpHandler+0x36>
    42f4:	2338      	movs	r3, #56	; 0x38
    42f6:	4358      	muls	r0, r3
    42f8:	1810      	adds	r0, r2, r0
    42fa:	f001 f854 	bl	53a6 <smpSmExecute>
    42fe:	bd10      	pop	{r4, pc}
    4300:	1000180c 	.word	0x1000180c

00004304 <SmpDmEncryptInd>:
    4304:	b510      	push	{r4, lr}
    4306:	78c3      	ldrb	r3, [r0, #3]
    4308:	0001      	movs	r1, r0
    430a:	425a      	negs	r2, r3
    430c:	4153      	adcs	r3, r2
    430e:	2209      	movs	r2, #9
    4310:	1ad3      	subs	r3, r2, r3
    4312:	7083      	strb	r3, [r0, #2]
    4314:	2000      	movs	r0, #0
    4316:	f7ff ffd7 	bl	42c8 <SmpHandler>
    431a:	bd10      	pop	{r4, pc}

0000431c <SmpScAllocScratchBuffers>:
    431c:	b570      	push	{r4, r5, r6, lr}
    431e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    4320:	0004      	movs	r4, r0
    4322:	68eb      	ldr	r3, [r5, #12]
    4324:	2b00      	cmp	r3, #0
    4326:	d103      	bne.n	4330 <SmpScAllocScratchBuffers+0x14>
    4328:	2060      	movs	r0, #96	; 0x60
    432a:	f006 fcfb 	bl	ad24 <WsfBufAlloc>
    432e:	60e8      	str	r0, [r5, #12]
    4330:	6b65      	ldr	r5, [r4, #52]	; 0x34
    4332:	68ab      	ldr	r3, [r5, #8]
    4334:	2b00      	cmp	r3, #0
    4336:	d103      	bne.n	4340 <SmpScAllocScratchBuffers+0x24>
    4338:	2040      	movs	r0, #64	; 0x40
    433a:	f006 fcf3 	bl	ad24 <WsfBufAlloc>
    433e:	60a8      	str	r0, [r5, #8]
    4340:	6b65      	ldr	r5, [r4, #52]	; 0x34
    4342:	692b      	ldr	r3, [r5, #16]
    4344:	2b00      	cmp	r3, #0
    4346:	d103      	bne.n	4350 <SmpScAllocScratchBuffers+0x34>
    4348:	2020      	movs	r0, #32
    434a:	f006 fceb 	bl	ad24 <WsfBufAlloc>
    434e:	6128      	str	r0, [r5, #16]
    4350:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4352:	68d8      	ldr	r0, [r3, #12]
    4354:	2800      	cmp	r0, #0
    4356:	d006      	beq.n	4366 <SmpScAllocScratchBuffers+0x4a>
    4358:	6898      	ldr	r0, [r3, #8]
    435a:	2800      	cmp	r0, #0
    435c:	d003      	beq.n	4366 <SmpScAllocScratchBuffers+0x4a>
    435e:	6918      	ldr	r0, [r3, #16]
    4360:	1e43      	subs	r3, r0, #1
    4362:	4198      	sbcs	r0, r3
    4364:	b2c0      	uxtb	r0, r0
    4366:	bd70      	pop	{r4, r5, r6, pc}

00004368 <SmpScFreeScratchBuffers>:
    4368:	6b43      	ldr	r3, [r0, #52]	; 0x34
    436a:	b510      	push	{r4, lr}
    436c:	0004      	movs	r4, r0
    436e:	68d8      	ldr	r0, [r3, #12]
    4370:	2800      	cmp	r0, #0
    4372:	d004      	beq.n	437e <SmpScFreeScratchBuffers+0x16>
    4374:	f006 fd16 	bl	ada4 <WsfBufFree>
    4378:	2200      	movs	r2, #0
    437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    437c:	60da      	str	r2, [r3, #12]
    437e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4380:	6898      	ldr	r0, [r3, #8]
    4382:	2800      	cmp	r0, #0
    4384:	d004      	beq.n	4390 <SmpScFreeScratchBuffers+0x28>
    4386:	f006 fd0d 	bl	ada4 <WsfBufFree>
    438a:	2200      	movs	r2, #0
    438c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    438e:	609a      	str	r2, [r3, #8]
    4390:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4392:	6918      	ldr	r0, [r3, #16]
    4394:	2800      	cmp	r0, #0
    4396:	d004      	beq.n	43a2 <SmpScFreeScratchBuffers+0x3a>
    4398:	f006 fd04 	bl	ada4 <WsfBufFree>
    439c:	2200      	movs	r2, #0
    439e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    43a0:	611a      	str	r2, [r3, #16]
    43a2:	bd10      	pop	{r4, pc}

000043a4 <SmpScCmac>:
    43a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    43a6:	001d      	movs	r5, r3
    43a8:	23e4      	movs	r3, #228	; 0xe4
    43aa:	4e0b      	ldr	r6, [pc, #44]	; (43d8 <SmpScCmac+0x34>)
    43ac:	005b      	lsls	r3, r3, #1
    43ae:	5cf3      	ldrb	r3, [r6, r3]
    43b0:	261b      	movs	r6, #27
    43b2:	9601      	str	r6, [sp, #4]
    43b4:	002e      	movs	r6, r5
    43b6:	362d      	adds	r6, #45	; 0x2d
    43b8:	7836      	ldrb	r6, [r6, #0]
    43ba:	9c06      	ldr	r4, [sp, #24]
    43bc:	9600      	str	r6, [sp, #0]
    43be:	f006 fa45 	bl	a84c <SecCmac>
    43c2:	2800      	cmp	r0, #0
    43c4:	d107      	bne.n	43d6 <SmpScCmac+0x32>
    43c6:	2308      	movs	r3, #8
    43c8:	70e3      	strb	r3, [r4, #3]
    43ca:	3b05      	subs	r3, #5
    43cc:	70a3      	strb	r3, [r4, #2]
    43ce:	0021      	movs	r1, r4
    43d0:	0028      	movs	r0, r5
    43d2:	f000 ffe8 	bl	53a6 <smpSmExecute>
    43d6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    43d8:	1000180c 	.word	0x1000180c

000043dc <SmpScAlloc>:
    43dc:	b570      	push	{r4, r5, r6, lr}
    43de:	b280      	uxth	r0, r0
    43e0:	000d      	movs	r5, r1
    43e2:	0014      	movs	r4, r2
    43e4:	f006 fc9e 	bl	ad24 <WsfBufAlloc>
    43e8:	1e06      	subs	r6, r0, #0
    43ea:	d107      	bne.n	43fc <SmpScAlloc+0x20>
    43ec:	2308      	movs	r3, #8
    43ee:	70e3      	strb	r3, [r4, #3]
    43f0:	3b05      	subs	r3, #5
    43f2:	70a3      	strb	r3, [r4, #2]
    43f4:	0021      	movs	r1, r4
    43f6:	0028      	movs	r0, r5
    43f8:	f000 ffd5 	bl	53a6 <smpSmExecute>
    43fc:	0030      	movs	r0, r6
    43fe:	bd70      	pop	{r4, r5, r6, pc}

00004400 <SmpScFree>:
    4400:	b510      	push	{r4, lr}
    4402:	f006 fccf 	bl	ada4 <WsfBufFree>
    4406:	bd10      	pop	{r4, pc}

00004408 <SmpScCalcF4>:
    4408:	b5f0      	push	{r4, r5, r6, r7, lr}
    440a:	b085      	sub	sp, #20
    440c:	9302      	str	r3, [sp, #8]
    440e:	ab0a      	add	r3, sp, #40	; 0x28
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	0005      	movs	r5, r0
    4414:	000e      	movs	r6, r1
    4416:	0017      	movs	r7, r2
    4418:	000a      	movs	r2, r1
    441a:	0001      	movs	r1, r0
    441c:	2041      	movs	r0, #65	; 0x41
    441e:	9303      	str	r3, [sp, #12]
    4420:	f7ff ffdc 	bl	43dc <SmpScAlloc>
    4424:	1e04      	subs	r4, r0, #0
    4426:	d015      	beq.n	4454 <SmpScCalcF4+0x4c>
    4428:	2220      	movs	r2, #32
    442a:	0039      	movs	r1, r7
    442c:	f00d f825 	bl	1147a <memcpy>
    4430:	0020      	movs	r0, r4
    4432:	2220      	movs	r2, #32
    4434:	9902      	ldr	r1, [sp, #8]
    4436:	3020      	adds	r0, #32
    4438:	f00d f81f 	bl	1147a <memcpy>
    443c:	466a      	mov	r2, sp
    443e:	0023      	movs	r3, r4
    4440:	7b12      	ldrb	r2, [r2, #12]
    4442:	3340      	adds	r3, #64	; 0x40
    4444:	701a      	strb	r2, [r3, #0]
    4446:	0021      	movs	r1, r4
    4448:	9600      	str	r6, [sp, #0]
    444a:	002b      	movs	r3, r5
    444c:	2241      	movs	r2, #65	; 0x41
    444e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4450:	f7ff ffa8 	bl	43a4 <SmpScCmac>
    4454:	b005      	add	sp, #20
    4456:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004458 <SmpScInit>:
    4458:	2300      	movs	r3, #0
    445a:	4a0a      	ldr	r2, [pc, #40]	; (4484 <SmpScInit+0x2c>)
    445c:	480a      	ldr	r0, [pc, #40]	; (4488 <SmpScInit+0x30>)
    445e:	18c1      	adds	r1, r0, r3
    4460:	3314      	adds	r3, #20
    4462:	6011      	str	r1, [r2, #0]
    4464:	3238      	adds	r2, #56	; 0x38
    4466:	2ba0      	cmp	r3, #160	; 0xa0
    4468:	d1f9      	bne.n	445e <SmpScInit+0x6>
    446a:	22e6      	movs	r2, #230	; 0xe6
    446c:	4b07      	ldr	r3, [pc, #28]	; (448c <SmpScInit+0x34>)
    446e:	4908      	ldr	r1, [pc, #32]	; (4490 <SmpScInit+0x38>)
    4470:	0052      	lsls	r2, r2, #1
    4472:	5099      	str	r1, [r3, r2]
    4474:	4907      	ldr	r1, [pc, #28]	; (4494 <SmpScInit+0x3c>)
    4476:	3204      	adds	r2, #4
    4478:	5099      	str	r1, [r3, r2]
    447a:	2101      	movs	r1, #1
    447c:	3204      	adds	r2, #4
    447e:	5499      	strb	r1, [r3, r2]
    4480:	4770      	bx	lr
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	10001840 	.word	0x10001840
    4488:	100019e4 	.word	0x100019e4
    448c:	1000180c 	.word	0x1000180c
    4490:	000047c5 	.word	0x000047c5
    4494:	0000498d 	.word	0x0000498d

00004498 <SmpScCat>:
    4498:	b570      	push	{r4, r5, r6, lr}
    449a:	0005      	movs	r5, r0
    449c:	0014      	movs	r4, r2
    449e:	f00c ffec 	bl	1147a <memcpy>
    44a2:	1928      	adds	r0, r5, r4
    44a4:	bd70      	pop	{r4, r5, r6, pc}

000044a6 <SmpScCat128>:
    44a6:	b510      	push	{r4, lr}
    44a8:	0004      	movs	r4, r0
    44aa:	f008 fef8 	bl	d29e <Calc128Cpy>
    44ae:	0020      	movs	r0, r4
    44b0:	3010      	adds	r0, #16
    44b2:	bd10      	pop	{r4, pc}

000044b4 <smpScSendPubKey>:
    44b4:	0003      	movs	r3, r0
    44b6:	2201      	movs	r2, #1
    44b8:	b570      	push	{r4, r5, r6, lr}
    44ba:	0005      	movs	r5, r0
    44bc:	332d      	adds	r3, #45	; 0x2d
    44be:	7818      	ldrb	r0, [r3, #0]
    44c0:	000e      	movs	r6, r1
    44c2:	0011      	movs	r1, r2
    44c4:	f7fe fd3a 	bl	2f3c <DmConnSetIdle>
    44c8:	0028      	movs	r0, r5
    44ca:	f000 fd4f 	bl	4f6c <smpStartRspTimer>
    44ce:	2049      	movs	r0, #73	; 0x49
    44d0:	f7ff fe8a 	bl	41e8 <smpMsgAlloc>
    44d4:	1e04      	subs	r4, r0, #0
    44d6:	d017      	beq.n	4508 <smpScSendPubKey+0x54>
    44d8:	230c      	movs	r3, #12
    44da:	7203      	strb	r3, [r0, #8]
    44dc:	f7ff fad4 	bl	3a88 <DmSecGetEccKey>
    44e0:	0001      	movs	r1, r0
    44e2:	0020      	movs	r0, r4
    44e4:	2220      	movs	r2, #32
    44e6:	3009      	adds	r0, #9
    44e8:	f008 ff14 	bl	d314 <WStrReverseCpy>
    44ec:	f7ff facc 	bl	3a88 <DmSecGetEccKey>
    44f0:	0001      	movs	r1, r0
    44f2:	0020      	movs	r0, r4
    44f4:	3120      	adds	r1, #32
    44f6:	3029      	adds	r0, #41	; 0x29
    44f8:	2220      	movs	r2, #32
    44fa:	f008 ff0b 	bl	d314 <WStrReverseCpy>
    44fe:	0021      	movs	r1, r4
    4500:	0028      	movs	r0, r5
    4502:	f7ff fe21 	bl	4148 <smpSendPkt>
    4506:	e007      	b.n	4518 <smpScSendPubKey+0x64>
    4508:	2308      	movs	r3, #8
    450a:	70f3      	strb	r3, [r6, #3]
    450c:	3b05      	subs	r3, #5
    450e:	70b3      	strb	r3, [r6, #2]
    4510:	0031      	movs	r1, r6
    4512:	0028      	movs	r0, r5
    4514:	f000 ff47 	bl	53a6 <smpSmExecute>
    4518:	bd70      	pop	{r4, r5, r6, pc}

0000451a <smpScSendDHKeyCheck>:
    451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451c:	0003      	movs	r3, r0
    451e:	0017      	movs	r7, r2
    4520:	2201      	movs	r2, #1
    4522:	0004      	movs	r4, r0
    4524:	332d      	adds	r3, #45	; 0x2d
    4526:	7818      	ldrb	r0, [r3, #0]
    4528:	000e      	movs	r6, r1
    452a:	0011      	movs	r1, r2
    452c:	f7fe fd06 	bl	2f3c <DmConnSetIdle>
    4530:	0020      	movs	r0, r4
    4532:	f000 fd1b 	bl	4f6c <smpStartRspTimer>
    4536:	2019      	movs	r0, #25
    4538:	f7ff fe56 	bl	41e8 <smpMsgAlloc>
    453c:	1e05      	subs	r5, r0, #0
    453e:	d00b      	beq.n	4558 <smpScSendDHKeyCheck+0x3e>
    4540:	230d      	movs	r3, #13
    4542:	0039      	movs	r1, r7
    4544:	7203      	strb	r3, [r0, #8]
    4546:	2210      	movs	r2, #16
    4548:	3009      	adds	r0, #9
    454a:	f008 fee3 	bl	d314 <WStrReverseCpy>
    454e:	0029      	movs	r1, r5
    4550:	0020      	movs	r0, r4
    4552:	f7ff fdf9 	bl	4148 <smpSendPkt>
    4556:	e007      	b.n	4568 <smpScSendDHKeyCheck+0x4e>
    4558:	2308      	movs	r3, #8
    455a:	70f3      	strb	r3, [r6, #3]
    455c:	3b05      	subs	r3, #5
    455e:	70b3      	strb	r3, [r6, #2]
    4560:	0031      	movs	r1, r6
    4562:	0020      	movs	r0, r4
    4564:	f000 ff1f 	bl	53a6 <smpSmExecute>
    4568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000456a <smpScSendRand>:
    456a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456c:	0003      	movs	r3, r0
    456e:	0017      	movs	r7, r2
    4570:	2201      	movs	r2, #1
    4572:	0004      	movs	r4, r0
    4574:	332d      	adds	r3, #45	; 0x2d
    4576:	7818      	ldrb	r0, [r3, #0]
    4578:	000e      	movs	r6, r1
    457a:	0011      	movs	r1, r2
    457c:	f7fe fcde 	bl	2f3c <DmConnSetIdle>
    4580:	0020      	movs	r0, r4
    4582:	f000 fcf3 	bl	4f6c <smpStartRspTimer>
    4586:	2019      	movs	r0, #25
    4588:	f7ff fe2e 	bl	41e8 <smpMsgAlloc>
    458c:	1e05      	subs	r5, r0, #0
    458e:	d00b      	beq.n	45a8 <smpScSendRand+0x3e>
    4590:	2304      	movs	r3, #4
    4592:	0039      	movs	r1, r7
    4594:	7203      	strb	r3, [r0, #8]
    4596:	2210      	movs	r2, #16
    4598:	3009      	adds	r0, #9
    459a:	f008 febb 	bl	d314 <WStrReverseCpy>
    459e:	0029      	movs	r1, r5
    45a0:	0020      	movs	r0, r4
    45a2:	f7ff fdd1 	bl	4148 <smpSendPkt>
    45a6:	e007      	b.n	45b8 <smpScSendRand+0x4e>
    45a8:	2308      	movs	r3, #8
    45aa:	70f3      	strb	r3, [r6, #3]
    45ac:	3b05      	subs	r3, #5
    45ae:	70b3      	strb	r3, [r6, #2]
    45b0:	0031      	movs	r1, r6
    45b2:	0020      	movs	r0, r4
    45b4:	f000 fef7 	bl	53a6 <smpSmExecute>
    45b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000045ba <smpScSendPairCnf>:
    45ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45bc:	0003      	movs	r3, r0
    45be:	0017      	movs	r7, r2
    45c0:	2201      	movs	r2, #1
    45c2:	0004      	movs	r4, r0
    45c4:	332d      	adds	r3, #45	; 0x2d
    45c6:	7818      	ldrb	r0, [r3, #0]
    45c8:	000e      	movs	r6, r1
    45ca:	0011      	movs	r1, r2
    45cc:	f7fe fcb6 	bl	2f3c <DmConnSetIdle>
    45d0:	0020      	movs	r0, r4
    45d2:	f000 fccb 	bl	4f6c <smpStartRspTimer>
    45d6:	2019      	movs	r0, #25
    45d8:	f7ff fe06 	bl	41e8 <smpMsgAlloc>
    45dc:	2303      	movs	r3, #3
    45de:	1e05      	subs	r5, r0, #0
    45e0:	d00a      	beq.n	45f8 <smpScSendPairCnf+0x3e>
    45e2:	7203      	strb	r3, [r0, #8]
    45e4:	0039      	movs	r1, r7
    45e6:	3009      	adds	r0, #9
    45e8:	2210      	movs	r2, #16
    45ea:	f008 fe93 	bl	d314 <WStrReverseCpy>
    45ee:	0029      	movs	r1, r5
    45f0:	0020      	movs	r0, r4
    45f2:	f7ff fda9 	bl	4148 <smpSendPkt>
    45f6:	e006      	b.n	4606 <smpScSendPairCnf+0x4c>
    45f8:	2208      	movs	r2, #8
    45fa:	70b3      	strb	r3, [r6, #2]
    45fc:	70f2      	strb	r2, [r6, #3]
    45fe:	0031      	movs	r1, r6
    4600:	0020      	movs	r0, r4
    4602:	f000 fed0 	bl	53a6 <smpSmExecute>
    4606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004608 <smpGetPkBit>:
    4608:	220f      	movs	r2, #15
    460a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    460c:	78d9      	ldrb	r1, [r3, #3]
    460e:	68d8      	ldr	r0, [r3, #12]
    4610:	08cb      	lsrs	r3, r1, #3
    4612:	1ad2      	subs	r2, r2, r3
    4614:	b2d3      	uxtb	r3, r2
    4616:	18c3      	adds	r3, r0, r3
    4618:	3301      	adds	r3, #1
    461a:	7fd8      	ldrb	r0, [r3, #31]
    461c:	2307      	movs	r3, #7
    461e:	400b      	ands	r3, r1
    4620:	4118      	asrs	r0, r3
    4622:	2301      	movs	r3, #1
    4624:	4018      	ands	r0, r3
    4626:	3080      	adds	r0, #128	; 0x80
    4628:	4770      	bx	lr

0000462a <smpGetPeerPublicKey>:
    462a:	b510      	push	{r4, lr}
    462c:	f7ff fc42 	bl	3eb4 <smpCcbByConnId>
    4630:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4632:	1e18      	subs	r0, r3, #0
    4634:	d000      	beq.n	4638 <smpGetPeerPublicKey+0xe>
    4636:	6898      	ldr	r0, [r3, #8]
    4638:	bd10      	pop	{r4, pc}

0000463a <smpSetPeerPublicKey>:
    463a:	b510      	push	{r4, lr}
    463c:	000c      	movs	r4, r1
    463e:	f7ff fc39 	bl	3eb4 <smpCcbByConnId>
    4642:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4644:	2b00      	cmp	r3, #0
    4646:	d004      	beq.n	4652 <smpSetPeerPublicKey+0x18>
    4648:	6898      	ldr	r0, [r3, #8]
    464a:	2240      	movs	r2, #64	; 0x40
    464c:	0021      	movs	r1, r4
    464e:	f00c ff14 	bl	1147a <memcpy>
    4652:	bd10      	pop	{r4, pc}

00004654 <SmpScSetOobCfg>:
    4654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4656:	000d      	movs	r5, r1
    4658:	f7ff fc2c 	bl	3eb4 <smpCcbByConnId>
    465c:	0003      	movs	r3, r0
    465e:	0029      	movs	r1, r5
    4660:	002f      	movs	r7, r5
    4662:	002e      	movs	r6, r5
    4664:	332a      	adds	r3, #42	; 0x2a
    4666:	781a      	ldrb	r2, [r3, #0]
    4668:	6b43      	ldr	r3, [r0, #52]	; 0x34
    466a:	0004      	movs	r4, r0
    466c:	3110      	adds	r1, #16
    466e:	3730      	adds	r7, #48	; 0x30
    4670:	3620      	adds	r6, #32
    4672:	68d8      	ldr	r0, [r3, #12]
    4674:	2a00      	cmp	r2, #0
    4676:	d012      	beq.n	469e <SmpScSetOobCfg+0x4a>
    4678:	3050      	adds	r0, #80	; 0x50
    467a:	f008 fe10 	bl	d29e <Calc128Cpy>
    467e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4680:	0029      	movs	r1, r5
    4682:	68d8      	ldr	r0, [r3, #12]
    4684:	3020      	adds	r0, #32
    4686:	f008 fe0a 	bl	d29e <Calc128Cpy>
    468a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    468c:	0039      	movs	r1, r7
    468e:	68d8      	ldr	r0, [r3, #12]
    4690:	3040      	adds	r0, #64	; 0x40
    4692:	f008 fe04 	bl	d29e <Calc128Cpy>
    4696:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4698:	68d8      	ldr	r0, [r3, #12]
    469a:	3030      	adds	r0, #48	; 0x30
    469c:	e011      	b.n	46c2 <SmpScSetOobCfg+0x6e>
    469e:	3040      	adds	r0, #64	; 0x40
    46a0:	f008 fdfd 	bl	d29e <Calc128Cpy>
    46a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    46a6:	0029      	movs	r1, r5
    46a8:	68d8      	ldr	r0, [r3, #12]
    46aa:	3030      	adds	r0, #48	; 0x30
    46ac:	f008 fdf7 	bl	d29e <Calc128Cpy>
    46b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    46b2:	0039      	movs	r1, r7
    46b4:	68d8      	ldr	r0, [r3, #12]
    46b6:	3050      	adds	r0, #80	; 0x50
    46b8:	f008 fdf1 	bl	d29e <Calc128Cpy>
    46bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    46be:	68d8      	ldr	r0, [r3, #12]
    46c0:	3020      	adds	r0, #32
    46c2:	0031      	movs	r1, r6
    46c4:	f008 fdeb 	bl	d29e <Calc128Cpy>
    46c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000046ca <smpEventStr>:
    46ca:	3801      	subs	r0, #1
    46cc:	b2c3      	uxtb	r3, r0
    46ce:	4803      	ldr	r0, [pc, #12]	; (46dc <smpEventStr+0x12>)
    46d0:	2b1b      	cmp	r3, #27
    46d2:	d802      	bhi.n	46da <smpEventStr+0x10>
    46d4:	4a02      	ldr	r2, [pc, #8]	; (46e0 <smpEventStr+0x16>)
    46d6:	009b      	lsls	r3, r3, #2
    46d8:	5898      	ldr	r0, [r3, r2]
    46da:	4770      	bx	lr
    46dc:	00014bc3 	.word	0x00014bc3
    46e0:	0001249c 	.word	0x0001249c

000046e4 <smpStateStr>:
    46e4:	b510      	push	{r4, lr}
    46e6:	4b05      	ldr	r3, [pc, #20]	; (46fc <smpStateStr+0x18>)
    46e8:	332a      	adds	r3, #42	; 0x2a
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d002      	beq.n	46f6 <smpStateStr+0x12>
    46f0:	f000 fbb6 	bl	4e60 <smpiStateStr>
    46f4:	e001      	b.n	46fa <smpStateStr+0x16>
    46f6:	f000 fbcf 	bl	4e98 <smprStateStr>
    46fa:	bd10      	pop	{r4, pc}
    46fc:	1000180c 	.word	0x1000180c

00004700 <smpLogByteArray>:
    4700:	4770      	bx	lr
    4702:	46c0      	nop			; (mov r8, r8)

00004704 <smpScCatInitiatorBdAddr>:
    4704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4706:	0003      	movs	r3, r0
    4708:	332d      	adds	r3, #45	; 0x2d
    470a:	0006      	movs	r6, r0
    470c:	7818      	ldrb	r0, [r3, #0]
    470e:	000d      	movs	r5, r1
    4710:	f7fe f998 	bl	2a44 <dmConnCcbById>
    4714:	1e04      	subs	r4, r0, #0
    4716:	d023      	beq.n	4760 <smpScCatInitiatorBdAddr+0x5c>
    4718:	362a      	adds	r6, #42	; 0x2a
    471a:	7833      	ldrb	r3, [r6, #0]
    471c:	0007      	movs	r7, r0
    471e:	1c6e      	adds	r6, r5, #1
    4720:	2b00      	cmp	r3, #0
    4722:	d00a      	beq.n	473a <smpScCatInitiatorBdAddr+0x36>
    4724:	371a      	adds	r7, #26
    4726:	0038      	movs	r0, r7
    4728:	f008 fd9f 	bl	d26a <BdaIsZeros>
    472c:	2800      	cmp	r0, #0
    472e:	d00a      	beq.n	4746 <smpScCatInitiatorBdAddr+0x42>
    4730:	7d23      	ldrb	r3, [r4, #20]
    4732:	1da1      	adds	r1, r4, #6
    4734:	702b      	strb	r3, [r5, #0]
    4736:	2206      	movs	r2, #6
    4738:	e00e      	b.n	4758 <smpScCatInitiatorBdAddr+0x54>
    473a:	3720      	adds	r7, #32
    473c:	0038      	movs	r0, r7
    473e:	f008 fd94 	bl	d26a <BdaIsZeros>
    4742:	2800      	cmp	r0, #0
    4744:	d104      	bne.n	4750 <smpScCatInitiatorBdAddr+0x4c>
    4746:	2301      	movs	r3, #1
    4748:	2206      	movs	r2, #6
    474a:	702b      	strb	r3, [r5, #0]
    474c:	0039      	movs	r1, r7
    474e:	e003      	b.n	4758 <smpScCatInitiatorBdAddr+0x54>
    4750:	2206      	movs	r2, #6
    4752:	0021      	movs	r1, r4
    4754:	7ce3      	ldrb	r3, [r4, #19]
    4756:	702b      	strb	r3, [r5, #0]
    4758:	0030      	movs	r0, r6
    475a:	f008 fddb 	bl	d314 <WStrReverseCpy>
    475e:	1db5      	adds	r5, r6, #6
    4760:	0028      	movs	r0, r5
    4762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004764 <smpScCatResponderBdAddr>:
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4766:	0003      	movs	r3, r0
    4768:	332d      	adds	r3, #45	; 0x2d
    476a:	0006      	movs	r6, r0
    476c:	7818      	ldrb	r0, [r3, #0]
    476e:	000d      	movs	r5, r1
    4770:	f7fe f968 	bl	2a44 <dmConnCcbById>
    4774:	1e04      	subs	r4, r0, #0
    4776:	d023      	beq.n	47c0 <smpScCatResponderBdAddr+0x5c>
    4778:	362a      	adds	r6, #42	; 0x2a
    477a:	7833      	ldrb	r3, [r6, #0]
    477c:	0007      	movs	r7, r0
    477e:	1c6e      	adds	r6, r5, #1
    4780:	2b00      	cmp	r3, #0
    4782:	d00a      	beq.n	479a <smpScCatResponderBdAddr+0x36>
    4784:	3720      	adds	r7, #32
    4786:	0038      	movs	r0, r7
    4788:	f008 fd6f 	bl	d26a <BdaIsZeros>
    478c:	2800      	cmp	r0, #0
    478e:	d00a      	beq.n	47a6 <smpScCatResponderBdAddr+0x42>
    4790:	7ce3      	ldrb	r3, [r4, #19]
    4792:	2206      	movs	r2, #6
    4794:	702b      	strb	r3, [r5, #0]
    4796:	0021      	movs	r1, r4
    4798:	e00e      	b.n	47b8 <smpScCatResponderBdAddr+0x54>
    479a:	371a      	adds	r7, #26
    479c:	0038      	movs	r0, r7
    479e:	f008 fd64 	bl	d26a <BdaIsZeros>
    47a2:	2800      	cmp	r0, #0
    47a4:	d104      	bne.n	47b0 <smpScCatResponderBdAddr+0x4c>
    47a6:	2301      	movs	r3, #1
    47a8:	2206      	movs	r2, #6
    47aa:	702b      	strb	r3, [r5, #0]
    47ac:	0039      	movs	r1, r7
    47ae:	e003      	b.n	47b8 <smpScCatResponderBdAddr+0x54>
    47b0:	2206      	movs	r2, #6
    47b2:	7d23      	ldrb	r3, [r4, #20]
    47b4:	1da1      	adds	r1, r4, #6
    47b6:	702b      	strb	r3, [r5, #0]
    47b8:	0030      	movs	r0, r6
    47ba:	f008 fdab 	bl	d314 <WStrReverseCpy>
    47be:	1db5      	adds	r5, r6, #6
    47c0:	0028      	movs	r0, r5
    47c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000047c4 <smpScProcPairing>:
    47c4:	2300      	movs	r3, #0
    47c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    47c8:	7013      	strb	r3, [r2, #0]
    47ca:	700b      	strb	r3, [r1, #0]
    47cc:	0004      	movs	r4, r0
    47ce:	7cc5      	ldrb	r5, [r0, #19]
    47d0:	2008      	movs	r0, #8
    47d2:	7ca3      	ldrb	r3, [r4, #18]
    47d4:	4205      	tst	r5, r0
    47d6:	d00c      	beq.n	47f2 <smpScProcPairing+0x2e>
    47d8:	7ea5      	ldrb	r5, [r4, #26]
    47da:	4205      	tst	r5, r0
    47dc:	d009      	beq.n	47f2 <smpScProcPairing+0x2e>
    47de:	2b01      	cmp	r3, #1
    47e0:	d003      	beq.n	47ea <smpScProcPairing+0x26>
    47e2:	2601      	movs	r6, #1
    47e4:	7e63      	ldrb	r3, [r4, #25]
    47e6:	42b3      	cmp	r3, r6
    47e8:	d108      	bne.n	47fc <smpScProcPairing+0x38>
    47ea:	2301      	movs	r3, #1
    47ec:	2600      	movs	r6, #0
    47ee:	700b      	strb	r3, [r1, #0]
    47f0:	e004      	b.n	47fc <smpScProcPairing+0x38>
    47f2:	2601      	movs	r6, #1
    47f4:	42b3      	cmp	r3, r6
    47f6:	d101      	bne.n	47fc <smpScProcPairing+0x38>
    47f8:	7e63      	ldrb	r3, [r4, #25]
    47fa:	e7f4      	b.n	47e6 <smpScProcPairing+0x22>
    47fc:	780b      	ldrb	r3, [r1, #0]
    47fe:	2b00      	cmp	r3, #0
    4800:	d12a      	bne.n	4858 <smpScProcPairing+0x94>
    4802:	7ce0      	ldrb	r0, [r4, #19]
    4804:	3304      	adds	r3, #4
    4806:	4218      	tst	r0, r3
    4808:	d102      	bne.n	4810 <smpScProcPairing+0x4c>
    480a:	7ea0      	ldrb	r0, [r4, #26]
    480c:	4218      	tst	r0, r3
    480e:	d023      	beq.n	4858 <smpScProcPairing+0x94>
    4810:	7c65      	ldrb	r5, [r4, #17]
    4812:	2d03      	cmp	r5, #3
    4814:	d020      	beq.n	4858 <smpScProcPairing+0x94>
    4816:	7e20      	ldrb	r0, [r4, #24]
    4818:	2803      	cmp	r0, #3
    481a:	d01d      	beq.n	4858 <smpScProcPairing+0x94>
    481c:	2d01      	cmp	r5, #1
    481e:	d803      	bhi.n	4828 <smpScProcPairing+0x64>
    4820:	2301      	movs	r3, #1
    4822:	4298      	cmp	r0, r3
    4824:	d808      	bhi.n	4838 <smpScProcPairing+0x74>
    4826:	e017      	b.n	4858 <smpScProcPairing+0x94>
    4828:	2300      	movs	r3, #0
    482a:	2d04      	cmp	r5, #4
    482c:	d104      	bne.n	4838 <smpScProcPairing+0x74>
    482e:	33fd      	adds	r3, #253	; 0xfd
    4830:	3802      	subs	r0, #2
    4832:	4018      	ands	r0, r3
    4834:	4243      	negs	r3, r0
    4836:	4143      	adcs	r3, r0
    4838:	7013      	strb	r3, [r2, #0]
    483a:	7e20      	ldrb	r0, [r4, #24]
    483c:	2802      	cmp	r0, #2
    483e:	d103      	bne.n	4848 <smpScProcPairing+0x84>
    4840:	7c60      	ldrb	r0, [r4, #17]
    4842:	2600      	movs	r6, #0
    4844:	2802      	cmp	r0, #2
    4846:	d007      	beq.n	4858 <smpScProcPairing+0x94>
    4848:	0020      	movs	r0, r4
    484a:	302a      	adds	r0, #42	; 0x2a
    484c:	7805      	ldrb	r5, [r0, #0]
    484e:	2600      	movs	r6, #0
    4850:	4268      	negs	r0, r5
    4852:	4168      	adcs	r0, r5
    4854:	4043      	eors	r3, r0
    4856:	7013      	strb	r3, [r2, #0]
    4858:	0027      	movs	r7, r4
    485a:	2308      	movs	r3, #8
    485c:	7ce0      	ldrb	r0, [r4, #19]
    485e:	ad01      	add	r5, sp, #4
    4860:	372d      	adds	r7, #45	; 0x2d
    4862:	4218      	tst	r0, r3
    4864:	d048      	beq.n	48f8 <smpScProcPairing+0x134>
    4866:	7ea0      	ldrb	r0, [r4, #26]
    4868:	4218      	tst	r0, r3
    486a:	d045      	beq.n	48f8 <smpScProcPairing+0x134>
    486c:	33cd      	adds	r3, #205	; 0xcd
    486e:	4845      	ldr	r0, [pc, #276]	; (4984 <smpScProcPairing+0x1c0>)
    4870:	33ff      	adds	r3, #255	; 0xff
    4872:	5cc3      	ldrb	r3, [r0, r3]
    4874:	2b00      	cmp	r3, #0
    4876:	d06b      	beq.n	4950 <smpScProcPairing+0x18c>
    4878:	2301      	movs	r3, #1
    487a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    487c:	7003      	strb	r3, [r0, #0]
    487e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4880:	7043      	strb	r3, [r0, #1]
    4882:	7813      	ldrb	r3, [r2, #0]
    4884:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4886:	7113      	strb	r3, [r2, #4]
    4888:	780b      	ldrb	r3, [r1, #0]
    488a:	2b00      	cmp	r3, #0
    488c:	d001      	beq.n	4892 <smpScProcPairing+0xce>
    488e:	2302      	movs	r3, #2
    4890:	e024      	b.n	48dc <smpScProcPairing+0x118>
    4892:	2e00      	cmp	r6, #0
    4894:	d11b      	bne.n	48ce <smpScProcPairing+0x10a>
    4896:	2303      	movs	r3, #3
    4898:	6b62      	ldr	r2, [r4, #52]	; 0x34
    489a:	7053      	strb	r3, [r2, #1]
    489c:	7e23      	ldrb	r3, [r4, #24]
    489e:	2b04      	cmp	r3, #4
    48a0:	d103      	bne.n	48aa <smpScProcPairing+0xe6>
    48a2:	7c63      	ldrb	r3, [r4, #17]
    48a4:	2b01      	cmp	r3, #1
    48a6:	d103      	bne.n	48b0 <smpScProcPairing+0xec>
    48a8:	e004      	b.n	48b4 <smpScProcPairing+0xf0>
    48aa:	2b01      	cmp	r3, #1
    48ac:	d104      	bne.n	48b8 <smpScProcPairing+0xf4>
    48ae:	7c63      	ldrb	r3, [r4, #17]
    48b0:	2b04      	cmp	r3, #4
    48b2:	d101      	bne.n	48b8 <smpScProcPairing+0xf4>
    48b4:	2304      	movs	r3, #4
    48b6:	e011      	b.n	48dc <smpScProcPairing+0x118>
    48b8:	2310      	movs	r3, #16
    48ba:	7ce2      	ldrb	r2, [r4, #19]
    48bc:	421a      	tst	r2, r3
    48be:	d00f      	beq.n	48e0 <smpScProcPairing+0x11c>
    48c0:	7ea2      	ldrb	r2, [r4, #26]
    48c2:	421a      	tst	r2, r3
    48c4:	d00c      	beq.n	48e0 <smpScProcPairing+0x11c>
    48c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    48c8:	3b0f      	subs	r3, #15
    48ca:	7093      	strb	r3, [r2, #2]
    48cc:	e008      	b.n	48e0 <smpScProcPairing+0x11c>
    48ce:	7e23      	ldrb	r3, [r4, #24]
    48d0:	2b01      	cmp	r3, #1
    48d2:	d105      	bne.n	48e0 <smpScProcPairing+0x11c>
    48d4:	7c63      	ldrb	r3, [r4, #17]
    48d6:	2b01      	cmp	r3, #1
    48d8:	d102      	bne.n	48e0 <smpScProcPairing+0x11c>
    48da:	3303      	adds	r3, #3
    48dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    48de:	7053      	strb	r3, [r2, #1]
    48e0:	783b      	ldrb	r3, [r7, #0]
    48e2:	0020      	movs	r0, r4
    48e4:	802b      	strh	r3, [r5, #0]
    48e6:	f7ff fd19 	bl	431c <SmpScAllocScratchBuffers>
    48ea:	2310      	movs	r3, #16
    48ec:	2800      	cmp	r0, #0
    48ee:	d10e      	bne.n	490e <smpScProcPairing+0x14a>
    48f0:	2308      	movs	r3, #8
    48f2:	70eb      	strb	r3, [r5, #3]
    48f4:	3b05      	subs	r3, #5
    48f6:	e00a      	b.n	490e <smpScProcPairing+0x14a>
    48f8:	4b23      	ldr	r3, [pc, #140]	; (4988 <smpScProcPairing+0x1c4>)
    48fa:	681b      	ldr	r3, [r3, #0]
    48fc:	799a      	ldrb	r2, [r3, #6]
    48fe:	2308      	movs	r3, #8
    4900:	4013      	ands	r3, r2
    4902:	d125      	bne.n	4950 <smpScProcPairing+0x18c>
    4904:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4906:	7013      	strb	r3, [r2, #0]
    4908:	783b      	ldrb	r3, [r7, #0]
    490a:	802b      	strh	r3, [r5, #0]
    490c:	2311      	movs	r3, #17
    490e:	0029      	movs	r1, r5
    4910:	0020      	movs	r0, r4
    4912:	70ab      	strb	r3, [r5, #2]
    4914:	f000 fd47 	bl	53a6 <smpSmExecute>
    4918:	0022      	movs	r2, r4
    491a:	7ce3      	ldrb	r3, [r4, #19]
    491c:	7ea0      	ldrb	r0, [r4, #26]
    491e:	2104      	movs	r1, #4
    4920:	3230      	adds	r2, #48	; 0x30
    4922:	4003      	ands	r3, r0
    4924:	2e00      	cmp	r6, #0
    4926:	d101      	bne.n	492c <smpScProcPairing+0x168>
    4928:	430b      	orrs	r3, r1
    492a:	e000      	b.n	492e <smpScProcPairing+0x16a>
    492c:	438b      	bics	r3, r1
    492e:	7013      	strb	r3, [r2, #0]
    4930:	0023      	movs	r3, r4
    4932:	332a      	adds	r3, #42	; 0x2a
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	2b00      	cmp	r3, #0
    4938:	d001      	beq.n	493e <smpScProcPairing+0x17a>
    493a:	7ce3      	ldrb	r3, [r4, #19]
    493c:	e000      	b.n	4940 <smpScProcPairing+0x17c>
    493e:	7ea3      	ldrb	r3, [r4, #26]
    4940:	4a11      	ldr	r2, [pc, #68]	; (4988 <smpScProcPairing+0x1c4>)
    4942:	2e00      	cmp	r6, #0
    4944:	d009      	beq.n	495a <smpScProcPairing+0x196>
    4946:	6811      	ldr	r1, [r2, #0]
    4948:	7989      	ldrb	r1, [r1, #6]
    494a:	400b      	ands	r3, r1
    494c:	075b      	lsls	r3, r3, #29
    494e:	d504      	bpl.n	495a <smpScProcPairing+0x196>
    4950:	783b      	ldrb	r3, [r7, #0]
    4952:	802b      	strh	r3, [r5, #0]
    4954:	2303      	movs	r3, #3
    4956:	70eb      	strb	r3, [r5, #3]
    4958:	e00d      	b.n	4976 <smpScProcPairing+0x1b2>
    495a:	6813      	ldr	r3, [r2, #0]
    495c:	7d22      	ldrb	r2, [r4, #20]
    495e:	78db      	ldrb	r3, [r3, #3]
    4960:	429a      	cmp	r2, r3
    4962:	d303      	bcc.n	496c <smpScProcPairing+0x1a8>
    4964:	7ee2      	ldrb	r2, [r4, #27]
    4966:	2001      	movs	r0, #1
    4968:	429a      	cmp	r2, r3
    496a:	d20a      	bcs.n	4982 <smpScProcPairing+0x1be>
    496c:	783b      	ldrb	r3, [r7, #0]
    496e:	802b      	strh	r3, [r5, #0]
    4970:	2306      	movs	r3, #6
    4972:	70eb      	strb	r3, [r5, #3]
    4974:	3b03      	subs	r3, #3
    4976:	0020      	movs	r0, r4
    4978:	0029      	movs	r1, r5
    497a:	70ab      	strb	r3, [r5, #2]
    497c:	f000 fd13 	bl	53a6 <smpSmExecute>
    4980:	2000      	movs	r0, #0
    4982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4984:	1000180c 	.word	0x1000180c
    4988:	1000108c 	.word	0x1000108c

0000498c <smpScAuthReq>:
    498c:	0003      	movs	r3, r0
    498e:	b530      	push	{r4, r5, lr}
    4990:	6b44      	ldr	r4, [r0, #52]	; 0x34
    4992:	b087      	sub	sp, #28
    4994:	7825      	ldrb	r5, [r4, #0]
    4996:	332d      	adds	r3, #45	; 0x2d
    4998:	2d00      	cmp	r5, #0
    499a:	d105      	bne.n	49a8 <smpScAuthReq+0x1c>
    499c:	0004      	movs	r4, r0
    499e:	3430      	adds	r4, #48	; 0x30
    49a0:	7824      	ldrb	r4, [r4, #0]
    49a2:	0764      	lsls	r4, r4, #29
    49a4:	d50d      	bpl.n	49c2 <smpScAuthReq+0x36>
    49a6:	e002      	b.n	49ae <smpScAuthReq+0x22>
    49a8:	7864      	ldrb	r4, [r4, #1]
    49aa:	2c02      	cmp	r4, #2
    49ac:	d109      	bne.n	49c2 <smpScAuthReq+0x36>
    49ae:	4668      	mov	r0, sp
    49b0:	781b      	ldrb	r3, [r3, #0]
    49b2:	7101      	strb	r1, [r0, #4]
    49b4:	8003      	strh	r3, [r0, #0]
    49b6:	232e      	movs	r3, #46	; 0x2e
    49b8:	7142      	strb	r2, [r0, #5]
    49ba:	7083      	strb	r3, [r0, #2]
    49bc:	f7fe fede 	bl	377c <DmSmpCbackExec>
    49c0:	e00d      	b.n	49de <smpScAuthReq+0x52>
    49c2:	466a      	mov	r2, sp
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	4669      	mov	r1, sp
    49c8:	8013      	strh	r3, [r2, #0]
    49ca:	2304      	movs	r3, #4
    49cc:	7093      	strb	r3, [r2, #2]
    49ce:	2300      	movs	r3, #0
    49d0:	7113      	strb	r3, [r2, #4]
    49d2:	7153      	strb	r3, [r2, #5]
    49d4:	7193      	strb	r3, [r2, #6]
    49d6:	3303      	adds	r3, #3
    49d8:	7513      	strb	r3, [r2, #20]
    49da:	f000 fce4 	bl	53a6 <smpSmExecute>
    49de:	b007      	add	sp, #28
    49e0:	bd30      	pop	{r4, r5, pc}

000049e2 <smpScActCleanup>:
    49e2:	b510      	push	{r4, lr}
    49e4:	0004      	movs	r4, r0
    49e6:	f000 fae8 	bl	4fba <smpActCleanup>
    49ea:	0020      	movs	r0, r4
    49ec:	f7ff fcbc 	bl	4368 <SmpScFreeScratchBuffers>
    49f0:	bd10      	pop	{r4, pc}

000049f2 <smpScActPairingFailed>:
    49f2:	b570      	push	{r4, r5, r6, lr}
    49f4:	000d      	movs	r5, r1
    49f6:	0004      	movs	r4, r0
    49f8:	f7ff fff3 	bl	49e2 <smpScActCleanup>
    49fc:	0029      	movs	r1, r5
    49fe:	0020      	movs	r0, r4
    4a00:	f000 faee 	bl	4fe0 <smpActPairingFailed>
    4a04:	bd70      	pop	{r4, r5, r6, pc}

00004a06 <smpScActPairingCancel>:
    4a06:	b570      	push	{r4, r5, r6, lr}
    4a08:	000d      	movs	r5, r1
    4a0a:	0004      	movs	r4, r0
    4a0c:	78c9      	ldrb	r1, [r1, #3]
    4a0e:	f000 fad8 	bl	4fc2 <smpSendPairingFailed>
    4a12:	0029      	movs	r1, r5
    4a14:	0020      	movs	r0, r4
    4a16:	f7ff ffec 	bl	49f2 <smpScActPairingFailed>
    4a1a:	bd70      	pop	{r4, r5, r6, pc}

00004a1c <smpScActAuthSelect>:
    4a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4a1e:	684d      	ldr	r5, [r1, #4]
    4a20:	0004      	movs	r4, r0
    4a22:	0029      	movs	r1, r5
    4a24:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4a26:	3109      	adds	r1, #9
    4a28:	6898      	ldr	r0, [r3, #8]
    4a2a:	2220      	movs	r2, #32
    4a2c:	f008 fc72 	bl	d314 <WStrReverseCpy>
    4a30:	0029      	movs	r1, r5
    4a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4a34:	3129      	adds	r1, #41	; 0x29
    4a36:	6898      	ldr	r0, [r3, #8]
    4a38:	2220      	movs	r2, #32
    4a3a:	3020      	adds	r0, #32
    4a3c:	f008 fc6a 	bl	d314 <WStrReverseCpy>
    4a40:	0023      	movs	r3, r4
    4a42:	332d      	adds	r3, #45	; 0x2d
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	a901      	add	r1, sp, #4
    4a48:	800b      	strh	r3, [r1, #0]
    4a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4a4c:	7858      	ldrb	r0, [r3, #1]
    4a4e:	3801      	subs	r0, #1
    4a50:	2803      	cmp	r0, #3
    4a52:	d809      	bhi.n	4a68 <smpScActAuthSelect+0x4c>
    4a54:	f001 fbdc 	bl	6210 <__gnu_thumb1_case_uqi>
    4a58:	02060402 	.word	0x02060402
    4a5c:	2312      	movs	r3, #18
    4a5e:	e006      	b.n	4a6e <smpScActAuthSelect+0x52>
    4a60:	2314      	movs	r3, #20
    4a62:	e004      	b.n	4a6e <smpScActAuthSelect+0x52>
    4a64:	2313      	movs	r3, #19
    4a66:	e002      	b.n	4a6e <smpScActAuthSelect+0x52>
    4a68:	2308      	movs	r3, #8
    4a6a:	70cb      	strb	r3, [r1, #3]
    4a6c:	3b05      	subs	r3, #5
    4a6e:	0020      	movs	r0, r4
    4a70:	708b      	strb	r3, [r1, #2]
    4a72:	f000 fc98 	bl	53a6 <smpSmExecute>
    4a76:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00004a78 <smpScActPkSetup>:
    4a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4a7a:	2300      	movs	r3, #0
    4a7c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4a7e:	2103      	movs	r1, #3
    4a80:	70d3      	strb	r3, [r2, #3]
    4a82:	0002      	movs	r2, r0
    4a84:	322f      	adds	r2, #47	; 0x2f
    4a86:	7011      	strb	r1, [r2, #0]
    4a88:	4669      	mov	r1, sp
    4a8a:	3a02      	subs	r2, #2
    4a8c:	7812      	ldrb	r2, [r2, #0]
    4a8e:	710b      	strb	r3, [r1, #4]
    4a90:	800a      	strh	r2, [r1, #0]
    4a92:	222e      	movs	r2, #46	; 0x2e
    4a94:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4a96:	708a      	strb	r2, [r1, #2]
    4a98:	791b      	ldrb	r3, [r3, #4]
    4a9a:	4668      	mov	r0, sp
    4a9c:	714b      	strb	r3, [r1, #5]
    4a9e:	f7fe fe6d 	bl	377c <DmSmpCbackExec>
    4aa2:	b007      	add	sp, #28
    4aa4:	bd00      	pop	{pc}

00004aa6 <smpScActJwncCalcF4>:
    4aa6:	0003      	movs	r3, r0
    4aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4aaa:	332a      	adds	r3, #42	; 0x2a
    4aac:	781e      	ldrb	r6, [r3, #0]
    4aae:	0004      	movs	r4, r0
    4ab0:	000d      	movs	r5, r1
    4ab2:	2e00      	cmp	r6, #0
    4ab4:	d00c      	beq.n	4ad0 <smpScActJwncCalcF4+0x2a>
    4ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4ab8:	689e      	ldr	r6, [r3, #8]
    4aba:	f7fe ffe5 	bl	3a88 <DmSecGetEccKey>
    4abe:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4ac0:	0003      	movs	r3, r0
    4ac2:	68d2      	ldr	r2, [r2, #12]
    4ac4:	3210      	adds	r2, #16
    4ac6:	9201      	str	r2, [sp, #4]
    4ac8:	2200      	movs	r2, #0
    4aca:	9200      	str	r2, [sp, #0]
    4acc:	0032      	movs	r2, r6
    4ace:	e008      	b.n	4ae2 <smpScActJwncCalcF4+0x3c>
    4ad0:	f7fe ffda 	bl	3a88 <DmSecGetEccKey>
    4ad4:	0002      	movs	r2, r0
    4ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4ad8:	68cb      	ldr	r3, [r1, #12]
    4ada:	9600      	str	r6, [sp, #0]
    4adc:	3310      	adds	r3, #16
    4ade:	9301      	str	r3, [sp, #4]
    4ae0:	688b      	ldr	r3, [r1, #8]
    4ae2:	0029      	movs	r1, r5
    4ae4:	0020      	movs	r0, r4
    4ae6:	f7ff fc8f 	bl	4408 <SmpScCalcF4>
    4aea:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004aec <smpScActJwncCalcG2>:
    4aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4aee:	000a      	movs	r2, r1
    4af0:	0004      	movs	r4, r0
    4af2:	000e      	movs	r6, r1
    4af4:	0001      	movs	r1, r0
    4af6:	2050      	movs	r0, #80	; 0x50
    4af8:	f7ff fc70 	bl	43dc <SmpScAlloc>
    4afc:	1e05      	subs	r5, r0, #0
    4afe:	d029      	beq.n	4b54 <smpScActJwncCalcG2+0x68>
    4b00:	0023      	movs	r3, r4
    4b02:	332a      	adds	r3, #42	; 0x2a
    4b04:	781b      	ldrb	r3, [r3, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d00a      	beq.n	4b20 <smpScActJwncCalcG2+0x34>
    4b0a:	f7fe ffbd 	bl	3a88 <DmSecGetEccKey>
    4b0e:	2220      	movs	r2, #32
    4b10:	0001      	movs	r1, r0
    4b12:	0028      	movs	r0, r5
    4b14:	f7ff fcc0 	bl	4498 <SmpScCat>
    4b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b1a:	2220      	movs	r2, #32
    4b1c:	6899      	ldr	r1, [r3, #8]
    4b1e:	e00a      	b.n	4b36 <smpScActJwncCalcG2+0x4a>
    4b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b22:	2220      	movs	r2, #32
    4b24:	6899      	ldr	r1, [r3, #8]
    4b26:	f7ff fcb7 	bl	4498 <SmpScCat>
    4b2a:	0007      	movs	r7, r0
    4b2c:	f7fe ffac 	bl	3a88 <DmSecGetEccKey>
    4b30:	2220      	movs	r2, #32
    4b32:	0001      	movs	r1, r0
    4b34:	0038      	movs	r0, r7
    4b36:	f7ff fcaf 	bl	4498 <SmpScCat>
    4b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b3c:	68d9      	ldr	r1, [r3, #12]
    4b3e:	3110      	adds	r1, #16
    4b40:	f7ff fcb1 	bl	44a6 <SmpScCat128>
    4b44:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4b46:	9600      	str	r6, [sp, #0]
    4b48:	0023      	movs	r3, r4
    4b4a:	2250      	movs	r2, #80	; 0x50
    4b4c:	0029      	movs	r1, r5
    4b4e:	68c0      	ldr	r0, [r0, #12]
    4b50:	f7ff fc28 	bl	43a4 <SmpScCmac>
    4b54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00004b56 <smpScActJwncDisplay>:
    4b56:	b530      	push	{r4, r5, lr}
    4b58:	0005      	movs	r5, r0
    4b5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4b5c:	b087      	sub	sp, #28
    4b5e:	785b      	ldrb	r3, [r3, #1]
    4b60:	ac01      	add	r4, sp, #4
    4b62:	352d      	adds	r5, #45	; 0x2d
    4b64:	2b04      	cmp	r3, #4
    4b66:	d10b      	bne.n	4b80 <smpScActJwncDisplay+0x2a>
    4b68:	a802      	add	r0, sp, #8
    4b6a:	6849      	ldr	r1, [r1, #4]
    4b6c:	f008 fb97 	bl	d29e <Calc128Cpy>
    4b70:	782b      	ldrb	r3, [r5, #0]
    4b72:	0020      	movs	r0, r4
    4b74:	8023      	strh	r3, [r4, #0]
    4b76:	2335      	movs	r3, #53	; 0x35
    4b78:	70a3      	strb	r3, [r4, #2]
    4b7a:	f7fe fdff 	bl	377c <DmSmpCbackExec>
    4b7e:	e006      	b.n	4b8e <smpScActJwncDisplay+0x38>
    4b80:	782b      	ldrb	r3, [r5, #0]
    4b82:	0021      	movs	r1, r4
    4b84:	8023      	strh	r3, [r4, #0]
    4b86:	2315      	movs	r3, #21
    4b88:	70a3      	strb	r3, [r4, #2]
    4b8a:	f000 fc0c 	bl	53a6 <smpSmExecute>
    4b8e:	b007      	add	sp, #28
    4b90:	bd30      	pop	{r4, r5, pc}

00004b92 <smpScActPkKeypress>:
    4b92:	b507      	push	{r0, r1, r2, lr}
    4b94:	684a      	ldr	r2, [r1, #4]
    4b96:	7a13      	ldrb	r3, [r2, #8]
    4b98:	2b0e      	cmp	r3, #14
    4b9a:	d10b      	bne.n	4bb4 <smpScActPkKeypress+0x22>
    4b9c:	7a53      	ldrb	r3, [r2, #9]
    4b9e:	466a      	mov	r2, sp
    4ba0:	302d      	adds	r0, #45	; 0x2d
    4ba2:	7113      	strb	r3, [r2, #4]
    4ba4:	7803      	ldrb	r3, [r0, #0]
    4ba6:	4668      	mov	r0, sp
    4ba8:	8013      	strh	r3, [r2, #0]
    4baa:	2336      	movs	r3, #54	; 0x36
    4bac:	7093      	strb	r3, [r2, #2]
    4bae:	f7fe fde5 	bl	377c <DmSmpCbackExec>
    4bb2:	e005      	b.n	4bc0 <smpScActPkKeypress+0x2e>
    4bb4:	2b03      	cmp	r3, #3
    4bb6:	d103      	bne.n	4bc0 <smpScActPkKeypress+0x2e>
    4bb8:	331a      	adds	r3, #26
    4bba:	708b      	strb	r3, [r1, #2]
    4bbc:	f000 fbf3 	bl	53a6 <smpSmExecute>
    4bc0:	bd07      	pop	{r0, r1, r2, pc}

00004bc2 <smpScActPkSendKeypress>:
    4bc2:	b570      	push	{r4, r5, r6, lr}
    4bc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4bc6:	0004      	movs	r4, r0
    4bc8:	789b      	ldrb	r3, [r3, #2]
    4bca:	000d      	movs	r5, r1
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d016      	beq.n	4bfe <smpScActPkSendKeypress+0x3c>
    4bd0:	f000 f9cc 	bl	4f6c <smpStartRspTimer>
    4bd4:	200a      	movs	r0, #10
    4bd6:	f7ff fb07 	bl	41e8 <smpMsgAlloc>
    4bda:	1e01      	subs	r1, r0, #0
    4bdc:	d007      	beq.n	4bee <smpScActPkSendKeypress+0x2c>
    4bde:	230e      	movs	r3, #14
    4be0:	7203      	strb	r3, [r0, #8]
    4be2:	792b      	ldrb	r3, [r5, #4]
    4be4:	7243      	strb	r3, [r0, #9]
    4be6:	0020      	movs	r0, r4
    4be8:	f7ff faae 	bl	4148 <smpSendPkt>
    4bec:	e007      	b.n	4bfe <smpScActPkSendKeypress+0x3c>
    4bee:	2308      	movs	r3, #8
    4bf0:	70eb      	strb	r3, [r5, #3]
    4bf2:	3b05      	subs	r3, #5
    4bf4:	70ab      	strb	r3, [r5, #2]
    4bf6:	0029      	movs	r1, r5
    4bf8:	0020      	movs	r0, r4
    4bfa:	f000 fbd4 	bl	53a6 <smpSmExecute>
    4bfe:	bd70      	pop	{r4, r5, r6, pc}

00004c00 <smpScActCalcSharedSecret>:
    4c00:	b570      	push	{r4, r5, r6, lr}
    4c02:	b098      	sub	sp, #96	; 0x60
    4c04:	0004      	movs	r4, r0
    4c06:	f7fe ff3f 	bl	3a88 <DmSecGetEccKey>
    4c0a:	2520      	movs	r5, #32
    4c0c:	0001      	movs	r1, r0
    4c0e:	002a      	movs	r2, r5
    4c10:	3140      	adds	r1, #64	; 0x40
    4c12:	a810      	add	r0, sp, #64	; 0x40
    4c14:	f00c fc31 	bl	1147a <memcpy>
    4c18:	6b66      	ldr	r6, [r4, #52]	; 0x34
    4c1a:	002a      	movs	r2, r5
    4c1c:	68b1      	ldr	r1, [r6, #8]
    4c1e:	4668      	mov	r0, sp
    4c20:	f00c fc2b 	bl	1147a <memcpy>
    4c24:	68b1      	ldr	r1, [r6, #8]
    4c26:	002a      	movs	r2, r5
    4c28:	1949      	adds	r1, r1, r5
    4c2a:	a808      	add	r0, sp, #32
    4c2c:	f00c fc25 	bl	1147a <memcpy>
    4c30:	23e4      	movs	r3, #228	; 0xe4
    4c32:	4906      	ldr	r1, [pc, #24]	; (4c4c <smpScActCalcSharedSecret+0x4c>)
    4c34:	005b      	lsls	r3, r3, #1
    4c36:	5cc9      	ldrb	r1, [r1, r3]
    4c38:	342d      	adds	r4, #45	; 0x2d
    4c3a:	3bb1      	subs	r3, #177	; 0xb1
    4c3c:	7822      	ldrb	r2, [r4, #0]
    4c3e:	3bff      	subs	r3, #255	; 0xff
    4c40:	4668      	mov	r0, sp
    4c42:	f005 fed7 	bl	a9f4 <SecEccGenSharedSecret>
    4c46:	b018      	add	sp, #96	; 0x60
    4c48:	bd70      	pop	{r4, r5, r6, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	1000180c 	.word	0x1000180c

00004c50 <smpScActCalcF5TKey>:
    4c50:	b570      	push	{r4, r5, r6, lr}
    4c52:	000a      	movs	r2, r1
    4c54:	b086      	sub	sp, #24
    4c56:	0006      	movs	r6, r0
    4c58:	000d      	movs	r5, r1
    4c5a:	0001      	movs	r1, r0
    4c5c:	2020      	movs	r0, #32
    4c5e:	f7ff fbbd 	bl	43dc <SmpScAlloc>
    4c62:	1e04      	subs	r4, r0, #0
    4c64:	d010      	beq.n	4c88 <smpScActCalcF5TKey+0x38>
    4c66:	2210      	movs	r2, #16
    4c68:	4908      	ldr	r1, [pc, #32]	; (4c8c <smpScActCalcF5TKey+0x3c>)
    4c6a:	a802      	add	r0, sp, #8
    4c6c:	f00c fc05 	bl	1147a <memcpy>
    4c70:	1d29      	adds	r1, r5, #4
    4c72:	2220      	movs	r2, #32
    4c74:	0020      	movs	r0, r4
    4c76:	f00c fc00 	bl	1147a <memcpy>
    4c7a:	9500      	str	r5, [sp, #0]
    4c7c:	0033      	movs	r3, r6
    4c7e:	2220      	movs	r2, #32
    4c80:	0021      	movs	r1, r4
    4c82:	a802      	add	r0, sp, #8
    4c84:	f7ff fb8e 	bl	43a4 <SmpScCmac>
    4c88:	b006      	add	sp, #24
    4c8a:	bd70      	pop	{r4, r5, r6, pc}
    4c8c:	0001250c 	.word	0x0001250c

00004c90 <smpScActCalcF5MacKey>:
    4c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c92:	0004      	movs	r4, r0
    4c94:	000e      	movs	r6, r1
    4c96:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4c98:	6849      	ldr	r1, [r1, #4]
    4c9a:	6918      	ldr	r0, [r3, #16]
    4c9c:	3010      	adds	r0, #16
    4c9e:	f008 fafe 	bl	d29e <Calc128Cpy>
    4ca2:	0032      	movs	r2, r6
    4ca4:	0021      	movs	r1, r4
    4ca6:	2035      	movs	r0, #53	; 0x35
    4ca8:	f7ff fb98 	bl	43dc <SmpScAlloc>
    4cac:	1e05      	subs	r5, r0, #0
    4cae:	d024      	beq.n	4cfa <smpScActCalcF5MacKey+0x6a>
    4cb0:	2700      	movs	r7, #0
    4cb2:	4912      	ldr	r1, [pc, #72]	; (4cfc <smpScActCalcF5MacKey+0x6c>)
    4cb4:	2204      	movs	r2, #4
    4cb6:	3110      	adds	r1, #16
    4cb8:	3001      	adds	r0, #1
    4cba:	702f      	strb	r7, [r5, #0]
    4cbc:	f7ff fbec 	bl	4498 <SmpScCat>
    4cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cc2:	68d9      	ldr	r1, [r3, #12]
    4cc4:	f7ff fbef 	bl	44a6 <SmpScCat128>
    4cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cca:	68d9      	ldr	r1, [r3, #12]
    4ccc:	3110      	adds	r1, #16
    4cce:	f7ff fbea 	bl	44a6 <SmpScCat128>
    4cd2:	0001      	movs	r1, r0
    4cd4:	0020      	movs	r0, r4
    4cd6:	f7ff fd15 	bl	4704 <smpScCatInitiatorBdAddr>
    4cda:	0001      	movs	r1, r0
    4cdc:	0020      	movs	r0, r4
    4cde:	f7ff fd41 	bl	4764 <smpScCatResponderBdAddr>
    4ce2:	2301      	movs	r3, #1
    4ce4:	7047      	strb	r7, [r0, #1]
    4ce6:	7003      	strb	r3, [r0, #0]
    4ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cea:	2235      	movs	r2, #53	; 0x35
    4cec:	6918      	ldr	r0, [r3, #16]
    4cee:	0029      	movs	r1, r5
    4cf0:	3010      	adds	r0, #16
    4cf2:	9600      	str	r6, [sp, #0]
    4cf4:	0023      	movs	r3, r4
    4cf6:	f7ff fb55 	bl	43a4 <SmpScCmac>
    4cfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4cfc:	0001250c 	.word	0x0001250c

00004d00 <smpScActCalcF5Ltk>:
    4d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d02:	0004      	movs	r4, r0
    4d04:	000e      	movs	r6, r1
    4d06:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4d08:	6849      	ldr	r1, [r1, #4]
    4d0a:	6918      	ldr	r0, [r3, #16]
    4d0c:	f008 fac7 	bl	d29e <Calc128Cpy>
    4d10:	0032      	movs	r2, r6
    4d12:	0021      	movs	r1, r4
    4d14:	2035      	movs	r0, #53	; 0x35
    4d16:	f7ff fb61 	bl	43dc <SmpScAlloc>
    4d1a:	1e05      	subs	r5, r0, #0
    4d1c:	d024      	beq.n	4d68 <smpScActCalcF5Ltk+0x68>
    4d1e:	2701      	movs	r7, #1
    4d20:	4912      	ldr	r1, [pc, #72]	; (4d6c <smpScActCalcF5Ltk+0x6c>)
    4d22:	2204      	movs	r2, #4
    4d24:	3110      	adds	r1, #16
    4d26:	3001      	adds	r0, #1
    4d28:	702f      	strb	r7, [r5, #0]
    4d2a:	f7ff fbb5 	bl	4498 <SmpScCat>
    4d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d30:	68d9      	ldr	r1, [r3, #12]
    4d32:	f7ff fbb8 	bl	44a6 <SmpScCat128>
    4d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d38:	68d9      	ldr	r1, [r3, #12]
    4d3a:	3110      	adds	r1, #16
    4d3c:	f7ff fbb3 	bl	44a6 <SmpScCat128>
    4d40:	0001      	movs	r1, r0
    4d42:	0020      	movs	r0, r4
    4d44:	f7ff fcde 	bl	4704 <smpScCatInitiatorBdAddr>
    4d48:	0001      	movs	r1, r0
    4d4a:	0020      	movs	r0, r4
    4d4c:	f7ff fd0a 	bl	4764 <smpScCatResponderBdAddr>
    4d50:	2300      	movs	r3, #0
    4d52:	7007      	strb	r7, [r0, #0]
    4d54:	7043      	strb	r3, [r0, #1]
    4d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d58:	2235      	movs	r2, #53	; 0x35
    4d5a:	6918      	ldr	r0, [r3, #16]
    4d5c:	0029      	movs	r1, r5
    4d5e:	3010      	adds	r0, #16
    4d60:	9600      	str	r6, [sp, #0]
    4d62:	0023      	movs	r3, r4
    4d64:	f7ff fb1e 	bl	43a4 <SmpScCmac>
    4d68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4d6a:	46c0      	nop			; (mov r8, r8)
    4d6c:	0001250c 	.word	0x0001250c

00004d70 <smpScActDHKeyCalcF6Ea>:
    4d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4d72:	0004      	movs	r4, r0
    4d74:	000e      	movs	r6, r1
    4d76:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4d78:	2210      	movs	r2, #16
    4d7a:	6918      	ldr	r0, [r3, #16]
    4d7c:	6849      	ldr	r1, [r1, #4]
    4d7e:	3010      	adds	r0, #16
    4d80:	f008 fac8 	bl	d314 <WStrReverseCpy>
    4d84:	0032      	movs	r2, r6
    4d86:	0021      	movs	r1, r4
    4d88:	2041      	movs	r0, #65	; 0x41
    4d8a:	f7ff fb27 	bl	43dc <SmpScAlloc>
    4d8e:	1e05      	subs	r5, r0, #0
    4d90:	d023      	beq.n	4dda <smpScActDHKeyCalcF6Ea+0x6a>
    4d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d94:	68d9      	ldr	r1, [r3, #12]
    4d96:	f7ff fb86 	bl	44a6 <SmpScCat128>
    4d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d9c:	68d9      	ldr	r1, [r3, #12]
    4d9e:	3110      	adds	r1, #16
    4da0:	f7ff fb81 	bl	44a6 <SmpScCat128>
    4da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4da6:	68d9      	ldr	r1, [r3, #12]
    4da8:	3130      	adds	r1, #48	; 0x30
    4daa:	f7ff fb7c 	bl	44a6 <SmpScCat128>
    4dae:	7ce3      	ldrb	r3, [r4, #19]
    4db0:	1cc1      	adds	r1, r0, #3
    4db2:	7003      	strb	r3, [r0, #0]
    4db4:	7ca3      	ldrb	r3, [r4, #18]
    4db6:	7043      	strb	r3, [r0, #1]
    4db8:	7c63      	ldrb	r3, [r4, #17]
    4dba:	7083      	strb	r3, [r0, #2]
    4dbc:	0020      	movs	r0, r4
    4dbe:	f7ff fca1 	bl	4704 <smpScCatInitiatorBdAddr>
    4dc2:	0001      	movs	r1, r0
    4dc4:	0020      	movs	r0, r4
    4dc6:	f7ff fccd 	bl	4764 <smpScCatResponderBdAddr>
    4dca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4dcc:	9600      	str	r6, [sp, #0]
    4dce:	0023      	movs	r3, r4
    4dd0:	2241      	movs	r2, #65	; 0x41
    4dd2:	0029      	movs	r1, r5
    4dd4:	6900      	ldr	r0, [r0, #16]
    4dd6:	f7ff fae5 	bl	43a4 <SmpScCmac>
    4dda:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004ddc <smpScActDHKeyCalcF6Eb>:
    4ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4dde:	000a      	movs	r2, r1
    4de0:	0004      	movs	r4, r0
    4de2:	000d      	movs	r5, r1
    4de4:	0001      	movs	r1, r0
    4de6:	2041      	movs	r0, #65	; 0x41
    4de8:	f7ff faf8 	bl	43dc <SmpScAlloc>
    4dec:	1e06      	subs	r6, r0, #0
    4dee:	d023      	beq.n	4e38 <smpScActDHKeyCalcF6Eb+0x5c>
    4df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4df2:	68d9      	ldr	r1, [r3, #12]
    4df4:	3110      	adds	r1, #16
    4df6:	f7ff fb56 	bl	44a6 <SmpScCat128>
    4dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dfc:	68d9      	ldr	r1, [r3, #12]
    4dfe:	f7ff fb52 	bl	44a6 <SmpScCat128>
    4e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e04:	68d9      	ldr	r1, [r3, #12]
    4e06:	3120      	adds	r1, #32
    4e08:	f7ff fb4d 	bl	44a6 <SmpScCat128>
    4e0c:	7ea3      	ldrb	r3, [r4, #26]
    4e0e:	1cc1      	adds	r1, r0, #3
    4e10:	7003      	strb	r3, [r0, #0]
    4e12:	7e63      	ldrb	r3, [r4, #25]
    4e14:	7043      	strb	r3, [r0, #1]
    4e16:	7e23      	ldrb	r3, [r4, #24]
    4e18:	7083      	strb	r3, [r0, #2]
    4e1a:	0020      	movs	r0, r4
    4e1c:	f7ff fca2 	bl	4764 <smpScCatResponderBdAddr>
    4e20:	0001      	movs	r1, r0
    4e22:	0020      	movs	r0, r4
    4e24:	f7ff fc6e 	bl	4704 <smpScCatInitiatorBdAddr>
    4e28:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4e2a:	9500      	str	r5, [sp, #0]
    4e2c:	0023      	movs	r3, r4
    4e2e:	2241      	movs	r2, #65	; 0x41
    4e30:	0031      	movs	r1, r6
    4e32:	6900      	ldr	r0, [r0, #16]
    4e34:	f7ff fab6 	bl	43a4 <SmpScCmac>
    4e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e3a:	6869      	ldr	r1, [r5, #4]
    4e3c:	68d8      	ldr	r0, [r3, #12]
    4e3e:	f008 fa2e 	bl	d29e <Calc128Cpy>
    4e42:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004e44 <SmpiScInit>:
    4e44:	23e2      	movs	r3, #226	; 0xe2
    4e46:	b510      	push	{r4, lr}
    4e48:	4903      	ldr	r1, [pc, #12]	; (4e58 <SmpiScInit+0x14>)
    4e4a:	4a04      	ldr	r2, [pc, #16]	; (4e5c <SmpiScInit+0x18>)
    4e4c:	005b      	lsls	r3, r3, #1
    4e4e:	50d1      	str	r1, [r2, r3]
    4e50:	f7ff fb02 	bl	4458 <SmpScInit>
    4e54:	bd10      	pop	{r4, pc}
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	00012520 	.word	0x00012520
    4e5c:	1000180c 	.word	0x1000180c

00004e60 <smpiStateStr>:
    4e60:	4b04      	ldr	r3, [pc, #16]	; (4e74 <smpiStateStr+0x14>)
    4e62:	2824      	cmp	r0, #36	; 0x24
    4e64:	d803      	bhi.n	4e6e <smpiStateStr+0xe>
    4e66:	4b04      	ldr	r3, [pc, #16]	; (4e78 <smpiStateStr+0x18>)
    4e68:	0080      	lsls	r0, r0, #2
    4e6a:	1818      	adds	r0, r3, r0
    4e6c:	68c3      	ldr	r3, [r0, #12]
    4e6e:	0018      	movs	r0, r3
    4e70:	4770      	bx	lr
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	00014bc1 	.word	0x00014bc1
    4e78:	00012520 	.word	0x00012520

00004e7c <SmprScInit>:
    4e7c:	23e0      	movs	r3, #224	; 0xe0
    4e7e:	b510      	push	{r4, lr}
    4e80:	4903      	ldr	r1, [pc, #12]	; (4e90 <SmprScInit+0x14>)
    4e82:	4a04      	ldr	r2, [pc, #16]	; (4e94 <SmprScInit+0x18>)
    4e84:	005b      	lsls	r3, r3, #1
    4e86:	50d1      	str	r1, [r2, r3]
    4e88:	f7ff fae6 	bl	4458 <SmpScInit>
    4e8c:	bd10      	pop	{r4, pc}
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	0001284c 	.word	0x0001284c
    4e94:	1000180c 	.word	0x1000180c

00004e98 <smprStateStr>:
    4e98:	4b04      	ldr	r3, [pc, #16]	; (4eac <smprStateStr+0x14>)
    4e9a:	2824      	cmp	r0, #36	; 0x24
    4e9c:	d803      	bhi.n	4ea6 <smprStateStr+0xe>
    4e9e:	4b04      	ldr	r3, [pc, #16]	; (4eb0 <smprStateStr+0x18>)
    4ea0:	0080      	lsls	r0, r0, #2
    4ea2:	1818      	adds	r0, r3, r0
    4ea4:	68c3      	ldr	r3, [r0, #12]
    4ea6:	0018      	movs	r0, r3
    4ea8:	4770      	bx	lr
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	00014d95 	.word	0x00014d95
    4eb0:	0001284c 	.word	0x0001284c

00004eb4 <SmprInit>:
    4eb4:	22e0      	movs	r2, #224	; 0xe0
    4eb6:	4b05      	ldr	r3, [pc, #20]	; (4ecc <SmprInit+0x18>)
    4eb8:	4905      	ldr	r1, [pc, #20]	; (4ed0 <SmprInit+0x1c>)
    4eba:	0052      	lsls	r2, r2, #1
    4ebc:	5099      	str	r1, [r3, r2]
    4ebe:	4905      	ldr	r1, [pc, #20]	; (4ed4 <SmprInit+0x20>)
    4ec0:	320c      	adds	r2, #12
    4ec2:	5099      	str	r1, [r3, r2]
    4ec4:	4904      	ldr	r1, [pc, #16]	; (4ed8 <SmprInit+0x24>)
    4ec6:	3204      	adds	r2, #4
    4ec8:	5099      	str	r1, [r3, r2]
    4eca:	4770      	bx	lr
    4ecc:	1000180c 	.word	0x1000180c
    4ed0:	00012b98 	.word	0x00012b98
    4ed4:	00005409 	.word	0x00005409
    4ed8:	000054f5 	.word	0x000054f5

00004edc <DmSmpEncryptReq>:
    4edc:	b570      	push	{r4, r5, r6, lr}
    4ede:	000d      	movs	r5, r1
    4ee0:	0014      	movs	r4, r2
    4ee2:	f7fd fdaf 	bl	2a44 <dmConnCcbById>
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d007      	beq.n	4efa <DmSmpEncryptReq+0x1e>
    4eea:	2200      	movs	r2, #0
    4eec:	7605      	strb	r5, [r0, #24]
    4eee:	7482      	strb	r2, [r0, #18]
    4ef0:	0023      	movs	r3, r4
    4ef2:	8980      	ldrh	r0, [r0, #12]
    4ef4:	4901      	ldr	r1, [pc, #4]	; (4efc <DmSmpEncryptReq+0x20>)
    4ef6:	f001 ff4c 	bl	6d92 <HciLeStartEncryptionCmd>
    4efa:	bd70      	pop	{r4, r5, r6, pc}
    4efc:	00014804 	.word	0x00014804

00004f00 <DmSecPairReq>:
    4f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f02:	001c      	movs	r4, r3
    4f04:	ab08      	add	r3, sp, #32
    4f06:	781b      	ldrb	r3, [r3, #0]
    4f08:	0007      	movs	r7, r0
    4f0a:	2008      	movs	r0, #8
    4f0c:	000e      	movs	r6, r1
    4f0e:	0015      	movs	r5, r2
    4f10:	9301      	str	r3, [sp, #4]
    4f12:	f005 ff96 	bl	ae42 <WsfMsgAlloc>
    4f16:	2800      	cmp	r0, #0
    4f18:	d00c      	beq.n	4f34 <DmSecPairReq+0x34>
    4f1a:	2301      	movs	r3, #1
    4f1c:	9a01      	ldr	r2, [sp, #4]
    4f1e:	7083      	strb	r3, [r0, #2]
    4f20:	3306      	adds	r3, #6
    4f22:	401c      	ands	r4, r3
    4f24:	401a      	ands	r2, r3
    4f26:	8007      	strh	r7, [r0, #0]
    4f28:	7106      	strb	r6, [r0, #4]
    4f2a:	7145      	strb	r5, [r0, #5]
    4f2c:	7184      	strb	r4, [r0, #6]
    4f2e:	71c2      	strb	r2, [r0, #7]
    4f30:	f7ff f95f 	bl	41f2 <SmpDmMsgSend>
    4f34:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00004f36 <DmSecEncryptReq>:
    4f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f38:	0007      	movs	r7, r0
    4f3a:	2020      	movs	r0, #32
    4f3c:	000d      	movs	r5, r1
    4f3e:	0016      	movs	r6, r2
    4f40:	f005 ff7f 	bl	ae42 <WsfMsgAlloc>
    4f44:	1e04      	subs	r4, r0, #0
    4f46:	d00d      	beq.n	4f64 <DmSecEncryptReq+0x2e>
    4f48:	2350      	movs	r3, #80	; 0x50
    4f4a:	8007      	strh	r7, [r0, #0]
    4f4c:	7083      	strb	r3, [r0, #2]
    4f4e:	0031      	movs	r1, r6
    4f50:	3004      	adds	r0, #4
    4f52:	221a      	movs	r2, #26
    4f54:	f00c fa91 	bl	1147a <memcpy>
    4f58:	4b03      	ldr	r3, [pc, #12]	; (4f68 <DmSecEncryptReq+0x32>)
    4f5a:	77a5      	strb	r5, [r4, #30]
    4f5c:	7b18      	ldrb	r0, [r3, #12]
    4f5e:	0021      	movs	r1, r4
    4f60:	f005 ff93 	bl	ae8a <WsfMsgSend>
    4f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	10001740 	.word	0x10001740

00004f6c <smpStartRspTimer>:
    4f6c:	230f      	movs	r3, #15
    4f6e:	b510      	push	{r4, lr}
    4f70:	7303      	strb	r3, [r0, #12]
    4f72:	33d2      	adds	r3, #210	; 0xd2
    4f74:	7343      	strb	r3, [r0, #13]
    4f76:	211e      	movs	r1, #30
    4f78:	f006 f91c 	bl	b1b4 <WsfTimerStartSec>
    4f7c:	bd10      	pop	{r4, pc}

00004f7e <smpActNone>:
    4f7e:	4770      	bx	lr

00004f80 <smpCleanup>:
    4f80:	b510      	push	{r4, lr}
    4f82:	0004      	movs	r4, r0
    4f84:	6a00      	ldr	r0, [r0, #32]
    4f86:	2800      	cmp	r0, #0
    4f88:	d003      	beq.n	4f92 <smpCleanup+0x12>
    4f8a:	f005 ff0b 	bl	ada4 <WsfBufFree>
    4f8e:	2300      	movs	r3, #0
    4f90:	6223      	str	r3, [r4, #32]
    4f92:	0020      	movs	r0, r4
    4f94:	f006 f934 	bl	b200 <WsfTimerStop>
    4f98:	0023      	movs	r3, r4
    4f9a:	2200      	movs	r2, #0
    4f9c:	332b      	adds	r3, #43	; 0x2b
    4f9e:	701a      	strb	r2, [r3, #0]
    4fa0:	3b01      	subs	r3, #1
    4fa2:	781a      	ldrb	r2, [r3, #0]
    4fa4:	230b      	movs	r3, #11
    4fa6:	2a00      	cmp	r2, #0
    4fa8:	d100      	bne.n	4fac <smpCleanup+0x2c>
    4faa:	3b0a      	subs	r3, #10
    4fac:	0022      	movs	r2, r4
    4fae:	322f      	adds	r2, #47	; 0x2f
    4fb0:	7013      	strb	r3, [r2, #0]
    4fb2:	2300      	movs	r3, #0
    4fb4:	3433      	adds	r4, #51	; 0x33
    4fb6:	7023      	strb	r3, [r4, #0]
    4fb8:	bd10      	pop	{r4, pc}

00004fba <smpActCleanup>:
    4fba:	b510      	push	{r4, lr}
    4fbc:	f7ff ffe0 	bl	4f80 <smpCleanup>
    4fc0:	bd10      	pop	{r4, pc}

00004fc2 <smpSendPairingFailed>:
    4fc2:	b570      	push	{r4, r5, r6, lr}
    4fc4:	0004      	movs	r4, r0
    4fc6:	200a      	movs	r0, #10
    4fc8:	000d      	movs	r5, r1
    4fca:	f7ff f90d 	bl	41e8 <smpMsgAlloc>
    4fce:	1e01      	subs	r1, r0, #0
    4fd0:	d005      	beq.n	4fde <smpSendPairingFailed+0x1c>
    4fd2:	2305      	movs	r3, #5
    4fd4:	7245      	strb	r5, [r0, #9]
    4fd6:	7203      	strb	r3, [r0, #8]
    4fd8:	0020      	movs	r0, r4
    4fda:	f7ff f8b5 	bl	4148 <smpSendPkt>
    4fde:	bd70      	pop	{r4, r5, r6, pc}

00004fe0 <smpActPairingFailed>:
    4fe0:	b570      	push	{r4, r5, r6, lr}
    4fe2:	0004      	movs	r4, r0
    4fe4:	342d      	adds	r4, #45	; 0x2d
    4fe6:	000d      	movs	r5, r1
    4fe8:	f7ff ffca 	bl	4f80 <smpCleanup>
    4fec:	7820      	ldrb	r0, [r4, #0]
    4fee:	2200      	movs	r2, #0
    4ff0:	2101      	movs	r1, #1
    4ff2:	f7fd ffa3 	bl	2f3c <DmConnSetIdle>
    4ff6:	232b      	movs	r3, #43	; 0x2b
    4ff8:	0028      	movs	r0, r5
    4ffa:	70ab      	strb	r3, [r5, #2]
    4ffc:	f7fe fbbe 	bl	377c <DmSmpCbackExec>
    5000:	bd70      	pop	{r4, r5, r6, pc}

00005002 <smpActPairingCancel>:
    5002:	b570      	push	{r4, r5, r6, lr}
    5004:	000d      	movs	r5, r1
    5006:	0004      	movs	r4, r0
    5008:	78c9      	ldrb	r1, [r1, #3]
    500a:	f7ff ffda 	bl	4fc2 <smpSendPairingFailed>
    500e:	0029      	movs	r1, r5
    5010:	0020      	movs	r0, r4
    5012:	f7ff ffe5 	bl	4fe0 <smpActPairingFailed>
    5016:	bd70      	pop	{r4, r5, r6, pc}

00005018 <smpActStorePin>:
    5018:	b570      	push	{r4, r5, r6, lr}
    501a:	000c      	movs	r4, r1
    501c:	7d0a      	ldrb	r2, [r1, #20]
    501e:	0005      	movs	r5, r0
    5020:	3104      	adds	r1, #4
    5022:	6a00      	ldr	r0, [r0, #32]
    5024:	f00c fa29 	bl	1147a <memcpy>
    5028:	7d23      	ldrb	r3, [r4, #20]
    502a:	2b03      	cmp	r3, #3
    502c:	d105      	bne.n	503a <smpActStorePin+0x22>
    502e:	6a28      	ldr	r0, [r5, #32]
    5030:	220d      	movs	r2, #13
    5032:	3003      	adds	r0, #3
    5034:	2100      	movs	r1, #0
    5036:	f00c fa45 	bl	114c4 <memset>
    503a:	bd70      	pop	{r4, r5, r6, pc}

0000503c <smpActPairCnfCalc1>:
    503c:	b510      	push	{r4, lr}
    503e:	0004      	movs	r4, r0
    5040:	f7ff ffea 	bl	5018 <smpActStorePin>
    5044:	6a20      	ldr	r0, [r4, #32]
    5046:	2110      	movs	r1, #16
    5048:	3030      	adds	r0, #48	; 0x30
    504a:	f005 fd9d 	bl	ab88 <SecRand>
    504e:	6a22      	ldr	r2, [r4, #32]
    5050:	6a21      	ldr	r1, [r4, #32]
    5052:	3230      	adds	r2, #48	; 0x30
    5054:	0020      	movs	r0, r4
    5056:	f7fe ff35 	bl	3ec4 <smpCalcC1Part1>
    505a:	bd10      	pop	{r4, pc}

0000505c <smpActSendPairCnf>:
    505c:	0003      	movs	r3, r0
    505e:	b570      	push	{r4, r5, r6, lr}
    5060:	332a      	adds	r3, #42	; 0x2a
    5062:	781b      	ldrb	r3, [r3, #0]
    5064:	0004      	movs	r4, r0
    5066:	1e5a      	subs	r2, r3, #1
    5068:	4193      	sbcs	r3, r2
    506a:	2204      	movs	r2, #4
    506c:	1ad3      	subs	r3, r2, r3
    506e:	0002      	movs	r2, r0
    5070:	322f      	adds	r2, #47	; 0x2f
    5072:	7013      	strb	r3, [r2, #0]
    5074:	000e      	movs	r6, r1
    5076:	f7ff ff79 	bl	4f6c <smpStartRspTimer>
    507a:	2019      	movs	r0, #25
    507c:	f7ff f8b4 	bl	41e8 <smpMsgAlloc>
    5080:	1e05      	subs	r5, r0, #0
    5082:	d00a      	beq.n	509a <smpActSendPairCnf+0x3e>
    5084:	2303      	movs	r3, #3
    5086:	7203      	strb	r3, [r0, #8]
    5088:	6871      	ldr	r1, [r6, #4]
    508a:	3009      	adds	r0, #9
    508c:	2210      	movs	r2, #16
    508e:	f00c f9f4 	bl	1147a <memcpy>
    5092:	0029      	movs	r1, r5
    5094:	0020      	movs	r0, r4
    5096:	f7ff f857 	bl	4148 <smpSendPkt>
    509a:	bd70      	pop	{r4, r5, r6, pc}

0000509c <smpActPairCnfVerCalc1>:
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	0005      	movs	r5, r0
    50a0:	684c      	ldr	r4, [r1, #4]
    50a2:	6a00      	ldr	r0, [r0, #32]
    50a4:	3409      	adds	r4, #9
    50a6:	0021      	movs	r1, r4
    50a8:	2210      	movs	r2, #16
    50aa:	3010      	adds	r0, #16
    50ac:	f00c f9e5 	bl	1147a <memcpy>
    50b0:	6a29      	ldr	r1, [r5, #32]
    50b2:	0028      	movs	r0, r5
    50b4:	0022      	movs	r2, r4
    50b6:	f7fe ff05 	bl	3ec4 <smpCalcC1Part1>
    50ba:	bd70      	pop	{r4, r5, r6, pc}

000050bc <smpActPairCnfVerCalc2>:
    50bc:	b510      	push	{r4, lr}
    50be:	684a      	ldr	r2, [r1, #4]
    50c0:	6a01      	ldr	r1, [r0, #32]
    50c2:	f7fe ff75 	bl	3fb0 <smpCalcC1Part2>
    50c6:	bd10      	pop	{r4, pc}

000050c8 <smpActPairCnfCalc2>:
    50c8:	b510      	push	{r4, lr}
    50ca:	f7ff fff7 	bl	50bc <smpActPairCnfVerCalc2>
    50ce:	bd10      	pop	{r4, pc}

000050d0 <smpSendKey>:
    50d0:	22ea      	movs	r2, #234	; 0xea
    50d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    50d4:	4b62      	ldr	r3, [pc, #392]	; (5260 <smpSendKey+0x190>)
    50d6:	0052      	lsls	r2, r2, #1
    50d8:	5c9a      	ldrb	r2, [r3, r2]
    50da:	b08d      	sub	sp, #52	; 0x34
    50dc:	0004      	movs	r4, r0
    50de:	000e      	movs	r6, r1
    50e0:	9301      	str	r3, [sp, #4]
    50e2:	2a00      	cmp	r2, #0
    50e4:	d02c      	beq.n	5140 <smpSendKey+0x70>
    50e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	2b00      	cmp	r3, #0
    50ec:	d028      	beq.n	5140 <smpSendKey+0x70>
    50ee:	0003      	movs	r3, r0
    50f0:	3333      	adds	r3, #51	; 0x33
    50f2:	9300      	str	r3, [sp, #0]
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d122      	bne.n	5140 <smpSendKey+0x70>
    50fa:	0007      	movs	r7, r0
    50fc:	372d      	adds	r7, #45	; 0x2d
    50fe:	7838      	ldrb	r0, [r7, #0]
    5100:	f7fd ff48 	bl	2f94 <DmConnRole>
    5104:	ad03      	add	r5, sp, #12
    5106:	2302      	movs	r3, #2
    5108:	2800      	cmp	r0, #0
    510a:	d000      	beq.n	510e <smpSendKey+0x3e>
    510c:	2301      	movs	r3, #1
    510e:	77ab      	strb	r3, [r5, #30]
    5110:	232f      	movs	r3, #47	; 0x2f
    5112:	70ab      	strb	r3, [r5, #2]
    5114:	783b      	ldrb	r3, [r7, #0]
    5116:	2100      	movs	r1, #0
    5118:	802b      	strh	r3, [r5, #0]
    511a:	2303      	movs	r3, #3
    511c:	2208      	movs	r2, #8
    511e:	a808      	add	r0, sp, #32
    5120:	77eb      	strb	r3, [r5, #31]
    5122:	83a9      	strh	r1, [r5, #28]
    5124:	f00c f9ce 	bl	114c4 <memset>
    5128:	6b63      	ldr	r3, [r4, #52]	; 0x34
    512a:	a804      	add	r0, sp, #16
    512c:	6919      	ldr	r1, [r3, #16]
    512e:	3110      	adds	r1, #16
    5130:	f008 f8b5 	bl	d29e <Calc128Cpy>
    5134:	0028      	movs	r0, r5
    5136:	f7fe fb21 	bl	377c <DmSmpCbackExec>
    513a:	2307      	movs	r3, #7
    513c:	9a00      	ldr	r2, [sp, #0]
    513e:	7013      	strb	r3, [r2, #0]
    5140:	2501      	movs	r5, #1
    5142:	2e00      	cmp	r6, #0
    5144:	d100      	bne.n	5148 <smpSendKey+0x78>
    5146:	e087      	b.n	5258 <smpSendKey+0x188>
    5148:	0027      	movs	r7, r4
    514a:	3733      	adds	r7, #51	; 0x33
    514c:	42ae      	cmp	r6, r5
    514e:	d103      	bne.n	5158 <smpSendKey+0x88>
    5150:	783b      	ldrb	r3, [r7, #0]
    5152:	2b07      	cmp	r3, #7
    5154:	d102      	bne.n	515c <smpSendKey+0x8c>
    5156:	e07f      	b.n	5258 <smpSendKey+0x188>
    5158:	2e03      	cmp	r6, #3
    515a:	d803      	bhi.n	5164 <smpSendKey+0x94>
    515c:	783b      	ldrb	r3, [r7, #0]
    515e:	2501      	movs	r5, #1
    5160:	2b09      	cmp	r3, #9
    5162:	d079      	beq.n	5258 <smpSendKey+0x188>
    5164:	783b      	ldrb	r3, [r7, #0]
    5166:	2501      	movs	r5, #1
    5168:	2b0a      	cmp	r3, #10
    516a:	d075      	beq.n	5258 <smpSendKey+0x188>
    516c:	0023      	movs	r3, r4
    516e:	332c      	adds	r3, #44	; 0x2c
    5170:	9300      	str	r3, [sp, #0]
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	2b00      	cmp	r3, #0
    5176:	d001      	beq.n	517c <smpSendKey+0xac>
    5178:	2500      	movs	r5, #0
    517a:	e06d      	b.n	5258 <smpSendKey+0x188>
    517c:	2019      	movs	r0, #25
    517e:	f7ff f833 	bl	41e8 <smpMsgAlloc>
    5182:	1e05      	subs	r5, r0, #0
    5184:	d0f8      	beq.n	5178 <smpSendKey+0xa8>
    5186:	783b      	ldrb	r3, [r7, #0]
    5188:	2b00      	cmp	r3, #0
    518a:	d109      	bne.n	51a0 <smpSendKey+0xd0>
    518c:	07f2      	lsls	r2, r6, #31
    518e:	d519      	bpl.n	51c4 <smpSendKey+0xf4>
    5190:	0020      	movs	r0, r4
    5192:	f7fe ffab 	bl	40ec <smpGenerateLtk>
    5196:	2306      	movs	r3, #6
    5198:	722b      	strb	r3, [r5, #8]
    519a:	6a23      	ldr	r3, [r4, #32]
    519c:	1d19      	adds	r1, r3, #4
    519e:	e01c      	b.n	51da <smpSendKey+0x10a>
    51a0:	2b06      	cmp	r3, #6
    51a2:	d10f      	bne.n	51c4 <smpSendKey+0xf4>
    51a4:	3301      	adds	r3, #1
    51a6:	7203      	strb	r3, [r0, #8]
    51a8:	6a23      	ldr	r3, [r4, #32]
    51aa:	2208      	movs	r2, #8
    51ac:	8b9b      	ldrh	r3, [r3, #28]
    51ae:	7243      	strb	r3, [r0, #9]
    51b0:	6a23      	ldr	r3, [r4, #32]
    51b2:	8b9b      	ldrh	r3, [r3, #28]
    51b4:	0a1b      	lsrs	r3, r3, #8
    51b6:	7283      	strb	r3, [r0, #10]
    51b8:	6a21      	ldr	r1, [r4, #32]
    51ba:	300b      	adds	r0, #11
    51bc:	3114      	adds	r1, #20
    51be:	f00c f95c 	bl	1147a <memcpy>
    51c2:	e02f      	b.n	5224 <smpSendKey+0x154>
    51c4:	07b2      	lsls	r2, r6, #30
    51c6:	d50d      	bpl.n	51e4 <smpSendKey+0x114>
    51c8:	2b00      	cmp	r3, #0
    51ca:	d001      	beq.n	51d0 <smpSendKey+0x100>
    51cc:	2b07      	cmp	r3, #7
    51ce:	d109      	bne.n	51e4 <smpSendKey+0x114>
    51d0:	2308      	movs	r3, #8
    51d2:	722b      	strb	r3, [r5, #8]
    51d4:	f7fe fb9a 	bl	390c <DmSecGetLocalIrk>
    51d8:	0001      	movs	r1, r0
    51da:	0028      	movs	r0, r5
    51dc:	3009      	adds	r0, #9
    51de:	f008 f85e 	bl	d29e <Calc128Cpy>
    51e2:	e01f      	b.n	5224 <smpSendKey+0x154>
    51e4:	2b08      	cmp	r3, #8
    51e6:	d10b      	bne.n	5200 <smpSendKey+0x130>
    51e8:	3301      	adds	r3, #1
    51ea:	722b      	strb	r3, [r5, #8]
    51ec:	2300      	movs	r3, #0
    51ee:	726b      	strb	r3, [r5, #9]
    51f0:	f002 fd8e 	bl	7d10 <HciGetBdAddr>
    51f4:	0001      	movs	r1, r0
    51f6:	0028      	movs	r0, r5
    51f8:	300a      	adds	r0, #10
    51fa:	f008 f805 	bl	d208 <BdaCpy>
    51fe:	e011      	b.n	5224 <smpSendKey+0x154>
    5200:	0772      	lsls	r2, r6, #29
    5202:	d50a      	bpl.n	521a <smpSendKey+0x14a>
    5204:	2b00      	cmp	r3, #0
    5206:	d003      	beq.n	5210 <smpSendKey+0x140>
    5208:	22fd      	movs	r2, #253	; 0xfd
    520a:	3b07      	subs	r3, #7
    520c:	4213      	tst	r3, r2
    520e:	d104      	bne.n	521a <smpSendKey+0x14a>
    5210:	230a      	movs	r3, #10
    5212:	722b      	strb	r3, [r5, #8]
    5214:	f7fe fb74 	bl	3900 <DmSecGetLocalCsrk>
    5218:	e7de      	b.n	51d8 <smpSendKey+0x108>
    521a:	0028      	movs	r0, r5
    521c:	f005 fe28 	bl	ae70 <WsfMsgFree>
    5220:	2501      	movs	r5, #1
    5222:	e019      	b.n	5258 <smpSendKey+0x188>
    5224:	7a2b      	ldrb	r3, [r5, #8]
    5226:	0029      	movs	r1, r5
    5228:	703b      	strb	r3, [r7, #0]
    522a:	0020      	movs	r0, r4
    522c:	f7fe ff8c 	bl	4148 <smpSendPkt>
    5230:	9b00      	ldr	r3, [sp, #0]
    5232:	781d      	ldrb	r5, [r3, #0]
    5234:	2d00      	cmp	r5, #0
    5236:	d19f      	bne.n	5178 <smpSendKey+0xa8>
    5238:	2004      	movs	r0, #4
    523a:	f005 fe02 	bl	ae42 <WsfMsgAlloc>
    523e:	1e01      	subs	r1, r0, #0
    5240:	d09a      	beq.n	5178 <smpSendKey+0xa8>
    5242:	230c      	movs	r3, #12
    5244:	342d      	adds	r4, #45	; 0x2d
    5246:	7083      	strb	r3, [r0, #2]
    5248:	7823      	ldrb	r3, [r4, #0]
    524a:	9a01      	ldr	r2, [sp, #4]
    524c:	8003      	strh	r3, [r0, #0]
    524e:	23e4      	movs	r3, #228	; 0xe4
    5250:	005b      	lsls	r3, r3, #1
    5252:	5cd0      	ldrb	r0, [r2, r3]
    5254:	f005 fe19 	bl	ae8a <WsfMsgSend>
    5258:	0028      	movs	r0, r5
    525a:	b00d      	add	sp, #52	; 0x34
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	1000180c 	.word	0x1000180c

00005264 <smpProcRcvKey>:
    5264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5266:	000c      	movs	r4, r1
    5268:	0011      	movs	r1, r2
    526a:	001e      	movs	r6, r3
    526c:	7a13      	ldrb	r3, [r2, #8]
    526e:	0005      	movs	r5, r0
    5270:	3109      	adds	r1, #9
    5272:	2b06      	cmp	r3, #6
    5274:	d018      	beq.n	52a8 <smpProcRcvKey+0x44>
    5276:	2b07      	cmp	r3, #7
    5278:	d114      	bne.n	52a4 <smpProcRcvKey+0x40>
    527a:	0020      	movs	r0, r4
    527c:	7a93      	ldrb	r3, [r2, #10]
    527e:	7a51      	ldrb	r1, [r2, #9]
    5280:	021b      	lsls	r3, r3, #8
    5282:	18cb      	adds	r3, r1, r3
    5284:	320b      	adds	r2, #11
    5286:	83a3      	strh	r3, [r4, #28]
    5288:	0011      	movs	r1, r2
    528a:	3014      	adds	r0, #20
    528c:	2208      	movs	r2, #8
    528e:	f00c f8f4 	bl	1147a <memcpy>
    5292:	002b      	movs	r3, r5
    5294:	3330      	adds	r3, #48	; 0x30
    5296:	781b      	ldrb	r3, [r3, #0]
    5298:	075b      	lsls	r3, r3, #29
    529a:	0fdb      	lsrs	r3, r3, #31
    529c:	3301      	adds	r3, #1
    529e:	77e3      	strb	r3, [r4, #31]
    52a0:	2302      	movs	r3, #2
    52a2:	e019      	b.n	52d8 <smpProcRcvKey+0x74>
    52a4:	2b08      	cmp	r3, #8
    52a6:	d104      	bne.n	52b2 <smpProcRcvKey+0x4e>
    52a8:	1d20      	adds	r0, r4, #4
    52aa:	f007 fff8 	bl	d29e <Calc128Cpy>
    52ae:	2200      	movs	r2, #0
    52b0:	e014      	b.n	52dc <smpProcRcvKey+0x78>
    52b2:	2b09      	cmp	r3, #9
    52b4:	d109      	bne.n	52ca <smpProcRcvKey+0x66>
    52b6:	0020      	movs	r0, r4
    52b8:	7a53      	ldrb	r3, [r2, #9]
    52ba:	320a      	adds	r2, #10
    52bc:	76a3      	strb	r3, [r4, #26]
    52be:	0011      	movs	r1, r2
    52c0:	3014      	adds	r0, #20
    52c2:	f007 ffa1 	bl	d208 <BdaCpy>
    52c6:	2304      	movs	r3, #4
    52c8:	e006      	b.n	52d8 <smpProcRcvKey+0x74>
    52ca:	2200      	movs	r2, #0
    52cc:	2b0a      	cmp	r3, #10
    52ce:	d105      	bne.n	52dc <smpProcRcvKey+0x78>
    52d0:	1d20      	adds	r0, r4, #4
    52d2:	f007 ffe4 	bl	d29e <Calc128Cpy>
    52d6:	2308      	movs	r3, #8
    52d8:	2201      	movs	r2, #1
    52da:	77a3      	strb	r3, [r4, #30]
    52dc:	0028      	movs	r0, r5
    52de:	302f      	adds	r0, #47	; 0x2f
    52e0:	7803      	ldrb	r3, [r0, #0]
    52e2:	2702      	movs	r7, #2
    52e4:	1f9d      	subs	r5, r3, #6
    52e6:	0029      	movs	r1, r5
    52e8:	43b9      	bics	r1, r7
    52ea:	b2cd      	uxtb	r5, r1
    52ec:	2d00      	cmp	r5, #0
    52ee:	d102      	bne.n	52f6 <smpProcRcvKey+0x92>
    52f0:	3301      	adds	r3, #1
    52f2:	7003      	strb	r3, [r0, #0]
    52f4:	e011      	b.n	531a <smpProcRcvKey+0xb6>
    52f6:	423e      	tst	r6, r7
    52f8:	d005      	beq.n	5306 <smpProcRcvKey+0xa2>
    52fa:	2b07      	cmp	r3, #7
    52fc:	d103      	bne.n	5306 <smpProcRcvKey+0xa2>
    52fe:	3301      	adds	r3, #1
    5300:	7003      	strb	r3, [r0, #0]
    5302:	2500      	movs	r5, #0
    5304:	e009      	b.n	531a <smpProcRcvKey+0xb6>
    5306:	2501      	movs	r5, #1
    5308:	0771      	lsls	r1, r6, #29
    530a:	d506      	bpl.n	531a <smpProcRcvKey+0xb6>
    530c:	21fd      	movs	r1, #253	; 0xfd
    530e:	3b07      	subs	r3, #7
    5310:	400b      	ands	r3, r1
    5312:	d102      	bne.n	531a <smpProcRcvKey+0xb6>
    5314:	001d      	movs	r5, r3
    5316:	39f3      	subs	r1, #243	; 0xf3
    5318:	7001      	strb	r1, [r0, #0]
    531a:	2a00      	cmp	r2, #0
    531c:	d004      	beq.n	5328 <smpProcRcvKey+0xc4>
    531e:	232f      	movs	r3, #47	; 0x2f
    5320:	0020      	movs	r0, r4
    5322:	70a3      	strb	r3, [r4, #2]
    5324:	f7fe fa2a 	bl	377c <DmSmpCbackExec>
    5328:	0028      	movs	r0, r5
    532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000532c <smpActMaxAttempts>:
    532c:	b510      	push	{r4, lr}
    532e:	0004      	movs	r4, r0
    5330:	f7ff fe67 	bl	5002 <smpActPairingCancel>
    5334:	230f      	movs	r3, #15
    5336:	7323      	strb	r3, [r4, #12]
    5338:	4b04      	ldr	r3, [pc, #16]	; (534c <smpActMaxAttempts+0x20>)
    533a:	0020      	movs	r0, r4
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	3432      	adds	r4, #50	; 0x32
    5340:	8819      	ldrh	r1, [r3, #0]
    5342:	f005 ff49 	bl	b1d8 <WsfTimerStartMs>
    5346:	2300      	movs	r3, #0
    5348:	7023      	strb	r3, [r4, #0]
    534a:	bd10      	pop	{r4, pc}
    534c:	1000108c 	.word	0x1000108c

00005350 <smpActAttemptRcvd>:
    5350:	2301      	movs	r3, #1
    5352:	3032      	adds	r0, #50	; 0x32
    5354:	7003      	strb	r3, [r0, #0]
    5356:	4770      	bx	lr

00005358 <smpActCheckAttempts>:
    5358:	0003      	movs	r3, r0
    535a:	b510      	push	{r4, lr}
    535c:	3332      	adds	r3, #50	; 0x32
    535e:	781a      	ldrb	r2, [r3, #0]
    5360:	0004      	movs	r4, r0
    5362:	2a00      	cmp	r2, #0
    5364:	d007      	beq.n	5376 <smpActCheckAttempts+0x1e>
    5366:	2200      	movs	r2, #0
    5368:	2109      	movs	r1, #9
    536a:	701a      	strb	r2, [r3, #0]
    536c:	f7ff fe29 	bl	4fc2 <smpSendPairingFailed>
    5370:	0020      	movs	r0, r4
    5372:	f7ff fe05 	bl	4f80 <smpCleanup>
    5376:	bd10      	pop	{r4, pc}

00005378 <smpActPairingCmpl>:
    5378:	b537      	push	{r0, r1, r2, r4, r5, lr}
    537a:	0004      	movs	r4, r0
    537c:	0025      	movs	r5, r4
    537e:	352d      	adds	r5, #45	; 0x2d
    5380:	f7ff fdfe 	bl	4f80 <smpCleanup>
    5384:	7828      	ldrb	r0, [r5, #0]
    5386:	2101      	movs	r1, #1
    5388:	2200      	movs	r2, #0
    538a:	f7fd fdd7 	bl	2f3c <DmConnSetIdle>
    538e:	466a      	mov	r2, sp
    5390:	3430      	adds	r4, #48	; 0x30
    5392:	7823      	ldrb	r3, [r4, #0]
    5394:	4668      	mov	r0, sp
    5396:	7113      	strb	r3, [r2, #4]
    5398:	782b      	ldrb	r3, [r5, #0]
    539a:	8013      	strh	r3, [r2, #0]
    539c:	232a      	movs	r3, #42	; 0x2a
    539e:	7093      	strb	r3, [r2, #2]
    53a0:	f7fe f9ec 	bl	377c <DmSmpCbackExec>
    53a4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000053a6 <smpSmExecute>:
    53a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53a8:	0003      	movs	r3, r0
    53aa:	332d      	adds	r3, #45	; 0x2d
    53ac:	0004      	movs	r4, r0
    53ae:	7818      	ldrb	r0, [r3, #0]
    53b0:	000d      	movs	r5, r1
    53b2:	f7fd fdef 	bl	2f94 <DmConnRole>
    53b6:	4b13      	ldr	r3, [pc, #76]	; (5404 <smpSmExecute+0x5e>)
    53b8:	22e0      	movs	r2, #224	; 0xe0
    53ba:	2801      	cmp	r0, #1
    53bc:	d000      	beq.n	53c0 <smpSmExecute+0x1a>
    53be:	22e2      	movs	r2, #226	; 0xe2
    53c0:	0020      	movs	r0, r4
    53c2:	0052      	lsls	r2, r2, #1
    53c4:	589a      	ldr	r2, [r3, r2]
    53c6:	302e      	adds	r0, #46	; 0x2e
    53c8:	7803      	ldrb	r3, [r0, #0]
    53ca:	6811      	ldr	r1, [r2, #0]
    53cc:	009b      	lsls	r3, r3, #2
    53ce:	5859      	ldr	r1, [r3, r1]
    53d0:	78af      	ldrb	r7, [r5, #2]
    53d2:	000b      	movs	r3, r1
    53d4:	7819      	ldrb	r1, [r3, #0]
    53d6:	42b9      	cmp	r1, r7
    53d8:	d109      	bne.n	53ee <smpSmExecute+0x48>
    53da:	7859      	ldrb	r1, [r3, #1]
    53dc:	7001      	strb	r1, [r0, #0]
    53de:	789b      	ldrb	r3, [r3, #2]
    53e0:	6852      	ldr	r2, [r2, #4]
    53e2:	009b      	lsls	r3, r3, #2
    53e4:	589b      	ldr	r3, [r3, r2]
    53e6:	0029      	movs	r1, r5
    53e8:	0020      	movs	r0, r4
    53ea:	4798      	blx	r3
    53ec:	e008      	b.n	5400 <smpSmExecute+0x5a>
    53ee:	3303      	adds	r3, #3
    53f0:	7819      	ldrb	r1, [r3, #0]
    53f2:	2900      	cmp	r1, #0
    53f4:	d1ee      	bne.n	53d4 <smpSmExecute+0x2e>
    53f6:	6891      	ldr	r1, [r2, #8]
    53f8:	000e      	movs	r6, r1
    53fa:	360c      	adds	r6, #12
    53fc:	42b3      	cmp	r3, r6
    53fe:	d1e8      	bne.n	53d2 <smpSmExecute+0x2c>
    5400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	1000180c 	.word	0x1000180c

00005408 <smpProcPairing>:
    5408:	2300      	movs	r3, #0
    540a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    540c:	0005      	movs	r5, r0
    540e:	0004      	movs	r4, r0
    5410:	7013      	strb	r3, [r2, #0]
    5412:	700b      	strb	r3, [r1, #0]
    5414:	7c83      	ldrb	r3, [r0, #18]
    5416:	352a      	adds	r5, #42	; 0x2a
    5418:	3430      	adds	r4, #48	; 0x30
    541a:	2b01      	cmp	r3, #1
    541c:	d104      	bne.n	5428 <smpProcPairing+0x20>
    541e:	7e43      	ldrb	r3, [r0, #25]
    5420:	2b01      	cmp	r3, #1
    5422:	d101      	bne.n	5428 <smpProcPairing+0x20>
    5424:	700b      	strb	r3, [r1, #0]
    5426:	e059      	b.n	54dc <smpProcPairing+0xd4>
    5428:	2104      	movs	r1, #4
    542a:	7cc3      	ldrb	r3, [r0, #19]
    542c:	420b      	tst	r3, r1
    542e:	d102      	bne.n	5436 <smpProcPairing+0x2e>
    5430:	7e86      	ldrb	r6, [r0, #26]
    5432:	420e      	tst	r6, r1
    5434:	d020      	beq.n	5478 <smpProcPairing+0x70>
    5436:	7c47      	ldrb	r7, [r0, #17]
    5438:	2f03      	cmp	r7, #3
    543a:	d01d      	beq.n	5478 <smpProcPairing+0x70>
    543c:	7e06      	ldrb	r6, [r0, #24]
    543e:	2e03      	cmp	r6, #3
    5440:	d01a      	beq.n	5478 <smpProcPairing+0x70>
    5442:	2f01      	cmp	r7, #1
    5444:	d803      	bhi.n	544e <smpProcPairing+0x46>
    5446:	2101      	movs	r1, #1
    5448:	428e      	cmp	r6, r1
    544a:	d808      	bhi.n	545e <smpProcPairing+0x56>
    544c:	e014      	b.n	5478 <smpProcPairing+0x70>
    544e:	2100      	movs	r1, #0
    5450:	2f04      	cmp	r7, #4
    5452:	d104      	bne.n	545e <smpProcPairing+0x56>
    5454:	31fd      	adds	r1, #253	; 0xfd
    5456:	3e02      	subs	r6, #2
    5458:	400e      	ands	r6, r1
    545a:	4271      	negs	r1, r6
    545c:	4171      	adcs	r1, r6
    545e:	7011      	strb	r1, [r2, #0]
    5460:	7e03      	ldrb	r3, [r0, #24]
    5462:	2b02      	cmp	r3, #2
    5464:	d102      	bne.n	546c <smpProcPairing+0x64>
    5466:	7c43      	ldrb	r3, [r0, #17]
    5468:	2b02      	cmp	r3, #2
    546a:	d037      	beq.n	54dc <smpProcPairing+0xd4>
    546c:	782e      	ldrb	r6, [r5, #0]
    546e:	4273      	negs	r3, r6
    5470:	4173      	adcs	r3, r6
    5472:	4059      	eors	r1, r3
    5474:	7011      	strb	r1, [r2, #0]
    5476:	e031      	b.n	54dc <smpProcPairing+0xd4>
    5478:	7e82      	ldrb	r2, [r0, #26]
    547a:	4013      	ands	r3, r2
    547c:	2204      	movs	r2, #4
    547e:	4393      	bics	r3, r2
    5480:	7023      	strb	r3, [r4, #0]
    5482:	3a03      	subs	r2, #3
    5484:	782b      	ldrb	r3, [r5, #0]
    5486:	2b00      	cmp	r3, #0
    5488:	d001      	beq.n	548e <smpProcPairing+0x86>
    548a:	7cc3      	ldrb	r3, [r0, #19]
    548c:	e000      	b.n	5490 <smpProcPairing+0x88>
    548e:	7e83      	ldrb	r3, [r0, #26]
    5490:	4917      	ldr	r1, [pc, #92]	; (54f0 <smpProcPairing+0xe8>)
    5492:	2a00      	cmp	r2, #0
    5494:	d00c      	beq.n	54b0 <smpProcPairing+0xa8>
    5496:	680a      	ldr	r2, [r1, #0]
    5498:	7992      	ldrb	r2, [r2, #6]
    549a:	4013      	ands	r3, r2
    549c:	075b      	lsls	r3, r3, #29
    549e:	d507      	bpl.n	54b0 <smpProcPairing+0xa8>
    54a0:	0003      	movs	r3, r0
    54a2:	332d      	adds	r3, #45	; 0x2d
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	a901      	add	r1, sp, #4
    54a8:	800b      	strh	r3, [r1, #0]
    54aa:	2303      	movs	r3, #3
    54ac:	70cb      	strb	r3, [r1, #3]
    54ae:	e010      	b.n	54d2 <smpProcPairing+0xca>
    54b0:	680b      	ldr	r3, [r1, #0]
    54b2:	78da      	ldrb	r2, [r3, #3]
    54b4:	7d03      	ldrb	r3, [r0, #20]
    54b6:	4293      	cmp	r3, r2
    54b8:	d303      	bcc.n	54c2 <smpProcPairing+0xba>
    54ba:	7ec1      	ldrb	r1, [r0, #27]
    54bc:	2301      	movs	r3, #1
    54be:	4291      	cmp	r1, r2
    54c0:	d214      	bcs.n	54ec <smpProcPairing+0xe4>
    54c2:	0003      	movs	r3, r0
    54c4:	332d      	adds	r3, #45	; 0x2d
    54c6:	781b      	ldrb	r3, [r3, #0]
    54c8:	a901      	add	r1, sp, #4
    54ca:	800b      	strh	r3, [r1, #0]
    54cc:	2306      	movs	r3, #6
    54ce:	70cb      	strb	r3, [r1, #3]
    54d0:	3b03      	subs	r3, #3
    54d2:	708b      	strb	r3, [r1, #2]
    54d4:	f7ff ff67 	bl	53a6 <smpSmExecute>
    54d8:	2300      	movs	r3, #0
    54da:	e007      	b.n	54ec <smpProcPairing+0xe4>
    54dc:	7e82      	ldrb	r2, [r0, #26]
    54de:	7cc3      	ldrb	r3, [r0, #19]
    54e0:	4013      	ands	r3, r2
    54e2:	2204      	movs	r2, #4
    54e4:	4313      	orrs	r3, r2
    54e6:	7023      	strb	r3, [r4, #0]
    54e8:	2200      	movs	r2, #0
    54ea:	e7cb      	b.n	5484 <smpProcPairing+0x7c>
    54ec:	0018      	movs	r0, r3
    54ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    54f0:	1000108c 	.word	0x1000108c

000054f4 <smpAuthReq>:
    54f4:	0003      	movs	r3, r0
    54f6:	b530      	push	{r4, r5, lr}
    54f8:	2404      	movs	r4, #4
    54fa:	0005      	movs	r5, r0
    54fc:	3330      	adds	r3, #48	; 0x30
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	b087      	sub	sp, #28
    5502:	4023      	ands	r3, r4
    5504:	352d      	adds	r5, #45	; 0x2d
    5506:	2b00      	cmp	r3, #0
    5508:	d009      	beq.n	551e <smpAuthReq+0x2a>
    550a:	4668      	mov	r0, sp
    550c:	782b      	ldrb	r3, [r5, #0]
    550e:	7101      	strb	r1, [r0, #4]
    5510:	8003      	strh	r3, [r0, #0]
    5512:	232e      	movs	r3, #46	; 0x2e
    5514:	7142      	strb	r2, [r0, #5]
    5516:	7083      	strb	r3, [r0, #2]
    5518:	f7fe f930 	bl	377c <DmSmpCbackExec>
    551c:	e00a      	b.n	5534 <smpAuthReq+0x40>
    551e:	4669      	mov	r1, sp
    5520:	782a      	ldrb	r2, [r5, #0]
    5522:	710b      	strb	r3, [r1, #4]
    5524:	714b      	strb	r3, [r1, #5]
    5526:	718b      	strb	r3, [r1, #6]
    5528:	2303      	movs	r3, #3
    552a:	800a      	strh	r2, [r1, #0]
    552c:	708c      	strb	r4, [r1, #2]
    552e:	750b      	strb	r3, [r1, #20]
    5530:	f7ff ff39 	bl	53a6 <smpSmExecute>
    5534:	b007      	add	sp, #28
    5536:	bd30      	pop	{r4, r5, pc}

00005538 <smpiActPairReq>:
    5538:	0003      	movs	r3, r0
    553a:	2201      	movs	r2, #1
    553c:	b570      	push	{r4, r5, r6, lr}
    553e:	0005      	movs	r5, r0
    5540:	332d      	adds	r3, #45	; 0x2d
    5542:	7818      	ldrb	r0, [r3, #0]
    5544:	000e      	movs	r6, r1
    5546:	0011      	movs	r1, r2
    5548:	f7fd fcf8 	bl	2f3c <DmConnSetIdle>
    554c:	002b      	movs	r3, r5
    554e:	2202      	movs	r2, #2
    5550:	332f      	adds	r3, #47	; 0x2f
    5552:	701a      	strb	r2, [r3, #0]
    5554:	0028      	movs	r0, r5
    5556:	f7ff fd09 	bl	4f6c <smpStartRspTimer>
    555a:	2040      	movs	r0, #64	; 0x40
    555c:	f005 fbe2 	bl	ad24 <WsfBufAlloc>
    5560:	6228      	str	r0, [r5, #32]
    5562:	200f      	movs	r0, #15
    5564:	f7fe fe40 	bl	41e8 <smpMsgAlloc>
    5568:	1e04      	subs	r4, r0, #0
    556a:	d01a      	beq.n	55a2 <smpiActPairReq+0x6a>
    556c:	2301      	movs	r3, #1
    556e:	7203      	strb	r3, [r0, #8]
    5570:	4b0c      	ldr	r3, [pc, #48]	; (55a4 <smpiActPairReq+0x6c>)
    5572:	0021      	movs	r1, r4
    5574:	681b      	ldr	r3, [r3, #0]
    5576:	3108      	adds	r1, #8
    5578:	789a      	ldrb	r2, [r3, #2]
    557a:	7242      	strb	r2, [r0, #9]
    557c:	7932      	ldrb	r2, [r6, #4]
    557e:	7282      	strb	r2, [r0, #10]
    5580:	7972      	ldrb	r2, [r6, #5]
    5582:	72c2      	strb	r2, [r0, #11]
    5584:	791b      	ldrb	r3, [r3, #4]
    5586:	2207      	movs	r2, #7
    5588:	7303      	strb	r3, [r0, #12]
    558a:	79b3      	ldrb	r3, [r6, #6]
    558c:	7343      	strb	r3, [r0, #13]
    558e:	79f3      	ldrb	r3, [r6, #7]
    5590:	7383      	strb	r3, [r0, #14]
    5592:	0028      	movs	r0, r5
    5594:	3010      	adds	r0, #16
    5596:	f00b ff70 	bl	1147a <memcpy>
    559a:	0021      	movs	r1, r4
    559c:	0028      	movs	r0, r5
    559e:	f7fe fdd3 	bl	4148 <smpSendPkt>
    55a2:	bd70      	pop	{r4, r5, r6, pc}
    55a4:	1000108c 	.word	0x1000108c

000055a8 <smpiActCheckSecurityReq>:
    55a8:	0003      	movs	r3, r0
    55aa:	b510      	push	{r4, lr}
    55ac:	332b      	adds	r3, #43	; 0x2b
    55ae:	781a      	ldrb	r2, [r3, #0]
    55b0:	2a00      	cmp	r2, #0
    55b2:	d004      	beq.n	55be <smpiActCheckSecurityReq+0x16>
    55b4:	2200      	movs	r2, #0
    55b6:	701a      	strb	r2, [r3, #0]
    55b8:	78c9      	ldrb	r1, [r1, #3]
    55ba:	f7ff fd02 	bl	4fc2 <smpSendPairingFailed>
    55be:	bd10      	pop	{r4, pc}

000055c0 <smpiActProcSecurityReq>:
    55c0:	0003      	movs	r3, r0
    55c2:	b507      	push	{r0, r1, r2, lr}
    55c4:	2201      	movs	r2, #1
    55c6:	332b      	adds	r3, #43	; 0x2b
    55c8:	701a      	strb	r2, [r3, #0]
    55ca:	466a      	mov	r2, sp
    55cc:	684b      	ldr	r3, [r1, #4]
    55ce:	302d      	adds	r0, #45	; 0x2d
    55d0:	7a5b      	ldrb	r3, [r3, #9]
    55d2:	7113      	strb	r3, [r2, #4]
    55d4:	7803      	ldrb	r3, [r0, #0]
    55d6:	4668      	mov	r0, sp
    55d8:	8013      	strh	r3, [r2, #0]
    55da:	2332      	movs	r3, #50	; 0x32
    55dc:	7093      	strb	r3, [r2, #2]
    55de:	f7fe f8cd 	bl	377c <DmSmpCbackExec>
    55e2:	bd07      	pop	{r0, r1, r2, pc}

000055e4 <smpiActProcPairRsp>:
    55e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55e6:	684e      	ldr	r6, [r1, #4]
    55e8:	000d      	movs	r5, r1
    55ea:	0031      	movs	r1, r6
    55ec:	0004      	movs	r4, r0
    55ee:	2207      	movs	r2, #7
    55f0:	3017      	adds	r0, #23
    55f2:	3108      	adds	r1, #8
    55f4:	f00b ff41 	bl	1147a <memcpy>
    55f8:	7d62      	ldrb	r2, [r4, #21]
    55fa:	7b73      	ldrb	r3, [r6, #13]
    55fc:	4393      	bics	r3, r2
    55fe:	d103      	bne.n	5608 <smpiActProcPairRsp+0x24>
    5600:	7da2      	ldrb	r2, [r4, #22]
    5602:	7bb3      	ldrb	r3, [r6, #14]
    5604:	4393      	bics	r3, r2
    5606:	d008      	beq.n	561a <smpiActProcPairRsp+0x36>
    5608:	230a      	movs	r3, #10
    560a:	70eb      	strb	r3, [r5, #3]
    560c:	3b07      	subs	r3, #7
    560e:	70ab      	strb	r3, [r5, #2]
    5610:	0029      	movs	r1, r5
    5612:	0020      	movs	r0, r4
    5614:	f7ff fec7 	bl	53a6 <smpSmExecute>
    5618:	e013      	b.n	5642 <smpiActProcPairRsp+0x5e>
    561a:	466b      	mov	r3, sp
    561c:	1ddf      	adds	r7, r3, #7
    561e:	1d9e      	adds	r6, r3, #6
    5620:	23e6      	movs	r3, #230	; 0xe6
    5622:	4d08      	ldr	r5, [pc, #32]	; (5644 <smpiActProcPairRsp+0x60>)
    5624:	005b      	lsls	r3, r3, #1
    5626:	58eb      	ldr	r3, [r5, r3]
    5628:	003a      	movs	r2, r7
    562a:	0031      	movs	r1, r6
    562c:	0020      	movs	r0, r4
    562e:	4798      	blx	r3
    5630:	2800      	cmp	r0, #0
    5632:	d006      	beq.n	5642 <smpiActProcPairRsp+0x5e>
    5634:	23e8      	movs	r3, #232	; 0xe8
    5636:	005b      	lsls	r3, r3, #1
    5638:	783a      	ldrb	r2, [r7, #0]
    563a:	7831      	ldrb	r1, [r6, #0]
    563c:	58eb      	ldr	r3, [r5, r3]
    563e:	0020      	movs	r0, r4
    5640:	4798      	blx	r3
    5642:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5644:	1000180c 	.word	0x1000180c

00005648 <smpiActProcPairCnf>:
    5648:	b570      	push	{r4, r5, r6, lr}
    564a:	0004      	movs	r4, r0
    564c:	6849      	ldr	r1, [r1, #4]
    564e:	6a00      	ldr	r0, [r0, #32]
    5650:	3109      	adds	r1, #9
    5652:	2210      	movs	r2, #16
    5654:	3020      	adds	r0, #32
    5656:	f00b ff10 	bl	1147a <memcpy>
    565a:	0023      	movs	r3, r4
    565c:	2604      	movs	r6, #4
    565e:	332f      	adds	r3, #47	; 0x2f
    5660:	701e      	strb	r6, [r3, #0]
    5662:	0020      	movs	r0, r4
    5664:	f7ff fc82 	bl	4f6c <smpStartRspTimer>
    5668:	2019      	movs	r0, #25
    566a:	f7fe fdbd 	bl	41e8 <smpMsgAlloc>
    566e:	1e05      	subs	r5, r0, #0
    5670:	d00a      	beq.n	5688 <smpiActProcPairCnf+0x40>
    5672:	7206      	strb	r6, [r0, #8]
    5674:	6a21      	ldr	r1, [r4, #32]
    5676:	3009      	adds	r0, #9
    5678:	3130      	adds	r1, #48	; 0x30
    567a:	2210      	movs	r2, #16
    567c:	f00b fefd 	bl	1147a <memcpy>
    5680:	0029      	movs	r1, r5
    5682:	0020      	movs	r0, r4
    5684:	f7fe fd60 	bl	4148 <smpSendPkt>
    5688:	bd70      	pop	{r4, r5, r6, pc}

0000568a <smpiActCnfVerify>:
    568a:	b570      	push	{r4, r5, r6, lr}
    568c:	6a06      	ldr	r6, [r0, #32]
    568e:	000c      	movs	r4, r1
    5690:	0031      	movs	r1, r6
    5692:	0005      	movs	r5, r0
    5694:	3120      	adds	r1, #32
    5696:	2210      	movs	r2, #16
    5698:	6860      	ldr	r0, [r4, #4]
    569a:	f00b fedf 	bl	1145c <memcmp>
    569e:	2800      	cmp	r0, #0
    56a0:	d01c      	beq.n	56dc <smpiActCnfVerify+0x52>
    56a2:	002b      	movs	r3, r5
    56a4:	332b      	adds	r3, #43	; 0x2b
    56a6:	781b      	ldrb	r3, [r3, #0]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d00e      	beq.n	56ca <smpiActCnfVerify+0x40>
    56ac:	002a      	movs	r2, r5
    56ae:	3232      	adds	r2, #50	; 0x32
    56b0:	7813      	ldrb	r3, [r2, #0]
    56b2:	3301      	adds	r3, #1
    56b4:	b2db      	uxtb	r3, r3
    56b6:	7013      	strb	r3, [r2, #0]
    56b8:	4a0d      	ldr	r2, [pc, #52]	; (56f0 <smpiActCnfVerify+0x66>)
    56ba:	6812      	ldr	r2, [r2, #0]
    56bc:	7952      	ldrb	r2, [r2, #5]
    56be:	429a      	cmp	r2, r3
    56c0:	d103      	bne.n	56ca <smpiActCnfVerify+0x40>
    56c2:	2309      	movs	r3, #9
    56c4:	70e3      	strb	r3, [r4, #3]
    56c6:	3304      	adds	r3, #4
    56c8:	e002      	b.n	56d0 <smpiActCnfVerify+0x46>
    56ca:	2304      	movs	r3, #4
    56cc:	70e3      	strb	r3, [r4, #3]
    56ce:	3b01      	subs	r3, #1
    56d0:	70a3      	strb	r3, [r4, #2]
    56d2:	0021      	movs	r1, r4
    56d4:	0028      	movs	r0, r5
    56d6:	f7ff fe66 	bl	53a6 <smpSmExecute>
    56da:	e007      	b.n	56ec <smpiActCnfVerify+0x62>
    56dc:	0033      	movs	r3, r6
    56de:	0032      	movs	r2, r6
    56e0:	3330      	adds	r3, #48	; 0x30
    56e2:	3210      	adds	r2, #16
    56e4:	0031      	movs	r1, r6
    56e6:	0028      	movs	r0, r5
    56e8:	f7fe fcd4 	bl	4094 <smpCalcS1>
    56ec:	bd70      	pop	{r4, r5, r6, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	1000108c 	.word	0x1000108c

000056f4 <smpiActStkEncrypt>:
    56f4:	b530      	push	{r4, r5, lr}
    56f6:	7ec2      	ldrb	r2, [r0, #27]
    56f8:	7d03      	ldrb	r3, [r0, #20]
    56fa:	b085      	sub	sp, #20
    56fc:	0005      	movs	r5, r0
    56fe:	1c14      	adds	r4, r2, #0
    5700:	429a      	cmp	r2, r3
    5702:	d900      	bls.n	5706 <smpiActStkEncrypt+0x12>
    5704:	1c1c      	adds	r4, r3, #0
    5706:	b2e4      	uxtb	r4, r4
    5708:	0022      	movs	r2, r4
    570a:	6849      	ldr	r1, [r1, #4]
    570c:	4668      	mov	r0, sp
    570e:	f00b feb4 	bl	1147a <memcpy>
    5712:	0020      	movs	r0, r4
    5714:	2210      	movs	r2, #16
    5716:	4468      	add	r0, sp
    5718:	1b12      	subs	r2, r2, r4
    571a:	2100      	movs	r1, #0
    571c:	f00b fed2 	bl	114c4 <memset>
    5720:	002b      	movs	r3, r5
    5722:	3330      	adds	r3, #48	; 0x30
    5724:	7819      	ldrb	r1, [r3, #0]
    5726:	352d      	adds	r5, #45	; 0x2d
    5728:	0749      	lsls	r1, r1, #29
    572a:	0fc9      	lsrs	r1, r1, #31
    572c:	3101      	adds	r1, #1
    572e:	7828      	ldrb	r0, [r5, #0]
    5730:	466a      	mov	r2, sp
    5732:	f7ff fbd3 	bl	4edc <DmSmpEncryptReq>
    5736:	b005      	add	sp, #20
    5738:	bd30      	pop	{r4, r5, pc}

0000573a <smpiActSetupKeyDist>:
    573a:	b570      	push	{r4, r5, r6, lr}
    573c:	0004      	movs	r4, r0
    573e:	000d      	movs	r5, r1
    5740:	f7ff fc14 	bl	4f6c <smpStartRspTimer>
    5744:	0023      	movs	r3, r4
    5746:	332d      	adds	r3, #45	; 0x2d
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	6a22      	ldr	r2, [r4, #32]
    574c:	8013      	strh	r3, [r2, #0]
    574e:	0023      	movs	r3, r4
    5750:	3330      	adds	r3, #48	; 0x30
    5752:	781b      	ldrb	r3, [r3, #0]
    5754:	6a22      	ldr	r2, [r4, #32]
    5756:	075b      	lsls	r3, r3, #29
    5758:	0fdb      	lsrs	r3, r3, #31
    575a:	3301      	adds	r3, #1
    575c:	77d3      	strb	r3, [r2, #31]
    575e:	7ee0      	ldrb	r0, [r4, #27]
    5760:	7d21      	ldrb	r1, [r4, #20]
    5762:	6a23      	ldr	r3, [r4, #32]
    5764:	1c02      	adds	r2, r0, #0
    5766:	4288      	cmp	r0, r1
    5768:	d900      	bls.n	576c <smpiActSetupKeyDist+0x32>
    576a:	1c0a      	adds	r2, r1, #0
    576c:	3301      	adds	r3, #1
    576e:	77da      	strb	r2, [r3, #31]
    5770:	0022      	movs	r2, r4
    5772:	2300      	movs	r3, #0
    5774:	322f      	adds	r2, #47	; 0x2f
    5776:	7013      	strb	r3, [r2, #0]
    5778:	7da3      	ldrb	r3, [r4, #22]
    577a:	7f61      	ldrb	r1, [r4, #29]
    577c:	400b      	ands	r3, r1
    577e:	07d9      	lsls	r1, r3, #31
    5780:	d50f      	bpl.n	57a2 <smpiActSetupKeyDist+0x68>
    5782:	21ea      	movs	r1, #234	; 0xea
    5784:	480f      	ldr	r0, [pc, #60]	; (57c4 <smpiActSetupKeyDist+0x8a>)
    5786:	0049      	lsls	r1, r1, #1
    5788:	5c41      	ldrb	r1, [r0, r1]
    578a:	2900      	cmp	r1, #0
    578c:	d007      	beq.n	579e <smpiActSetupKeyDist+0x64>
    578e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5790:	7809      	ldrb	r1, [r1, #0]
    5792:	2900      	cmp	r1, #0
    5794:	d003      	beq.n	579e <smpiActSetupKeyDist+0x64>
    5796:	079b      	lsls	r3, r3, #30
    5798:	d509      	bpl.n	57ae <smpiActSetupKeyDist+0x74>
    579a:	2308      	movs	r3, #8
    579c:	e006      	b.n	57ac <smpiActSetupKeyDist+0x72>
    579e:	2306      	movs	r3, #6
    57a0:	e004      	b.n	57ac <smpiActSetupKeyDist+0x72>
    57a2:	0799      	lsls	r1, r3, #30
    57a4:	d4f9      	bmi.n	579a <smpiActSetupKeyDist+0x60>
    57a6:	075b      	lsls	r3, r3, #29
    57a8:	d501      	bpl.n	57ae <smpiActSetupKeyDist+0x74>
    57aa:	230a      	movs	r3, #10
    57ac:	7013      	strb	r3, [r2, #0]
    57ae:	7813      	ldrb	r3, [r2, #0]
    57b0:	2b00      	cmp	r3, #0
    57b2:	d105      	bne.n	57c0 <smpiActSetupKeyDist+0x86>
    57b4:	330c      	adds	r3, #12
    57b6:	70ab      	strb	r3, [r5, #2]
    57b8:	0029      	movs	r1, r5
    57ba:	0020      	movs	r0, r4
    57bc:	f7ff fdf3 	bl	53a6 <smpSmExecute>
    57c0:	bd70      	pop	{r4, r5, r6, pc}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	1000180c 	.word	0x1000180c

000057c8 <smpiActRcvKey>:
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	7f42      	ldrb	r2, [r0, #29]
    57cc:	7d83      	ldrb	r3, [r0, #22]
    57ce:	000d      	movs	r5, r1
    57d0:	4013      	ands	r3, r2
    57d2:	684a      	ldr	r2, [r1, #4]
    57d4:	6a01      	ldr	r1, [r0, #32]
    57d6:	0004      	movs	r4, r0
    57d8:	f7ff fd44 	bl	5264 <smpProcRcvKey>
    57dc:	2800      	cmp	r0, #0
    57de:	d009      	beq.n	57f4 <smpiActRcvKey+0x2c>
    57e0:	0023      	movs	r3, r4
    57e2:	2200      	movs	r2, #0
    57e4:	332f      	adds	r3, #47	; 0x2f
    57e6:	701a      	strb	r2, [r3, #0]
    57e8:	230c      	movs	r3, #12
    57ea:	0029      	movs	r1, r5
    57ec:	70ab      	strb	r3, [r5, #2]
    57ee:	0020      	movs	r0, r4
    57f0:	f7ff fdd9 	bl	53a6 <smpSmExecute>
    57f4:	bd70      	pop	{r4, r5, r6, pc}

000057f6 <smpiActSendKey>:
    57f6:	b570      	push	{r4, r5, r6, lr}
    57f8:	000d      	movs	r5, r1
    57fa:	7d43      	ldrb	r3, [r0, #21]
    57fc:	7f01      	ldrb	r1, [r0, #28]
    57fe:	0004      	movs	r4, r0
    5800:	4019      	ands	r1, r3
    5802:	f7ff fc65 	bl	50d0 <smpSendKey>
    5806:	2800      	cmp	r0, #0
    5808:	d005      	beq.n	5816 <smpiActSendKey+0x20>
    580a:	230e      	movs	r3, #14
    580c:	0029      	movs	r1, r5
    580e:	70ab      	strb	r3, [r5, #2]
    5810:	0020      	movs	r0, r4
    5812:	f7ff fdc8 	bl	53a6 <smpSmExecute>
    5816:	bd70      	pop	{r4, r5, r6, pc}

00005818 <smpiScActAuthSelect>:
    5818:	b510      	push	{r4, lr}
    581a:	f7ff f8ff 	bl	4a1c <smpScActAuthSelect>
    581e:	bd10      	pop	{r4, pc}

00005820 <smpiScActSendPubKey>:
    5820:	0003      	movs	r3, r0
    5822:	220c      	movs	r2, #12
    5824:	b510      	push	{r4, lr}
    5826:	332f      	adds	r3, #47	; 0x2f
    5828:	701a      	strb	r2, [r3, #0]
    582a:	f7fe fe43 	bl	44b4 <smpScSendPubKey>
    582e:	bd10      	pop	{r4, pc}

00005830 <smpiScActJwncSetup>:
    5830:	b570      	push	{r4, r5, r6, lr}
    5832:	0004      	movs	r4, r0
    5834:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5836:	2110      	movs	r1, #16
    5838:	68d8      	ldr	r0, [r3, #12]
    583a:	f005 f9a5 	bl	ab88 <SecRand>
    583e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5840:	4d07      	ldr	r5, [pc, #28]	; (5860 <smpiScActJwncSetup+0x30>)
    5842:	68d8      	ldr	r0, [r3, #12]
    5844:	0029      	movs	r1, r5
    5846:	3020      	adds	r0, #32
    5848:	f007 fd29 	bl	d29e <Calc128Cpy>
    584c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    584e:	0029      	movs	r1, r5
    5850:	68d8      	ldr	r0, [r3, #12]
    5852:	342f      	adds	r4, #47	; 0x2f
    5854:	3030      	adds	r0, #48	; 0x30
    5856:	f007 fd22 	bl	d29e <Calc128Cpy>
    585a:	2303      	movs	r3, #3
    585c:	7023      	strb	r3, [r4, #0]
    585e:	bd70      	pop	{r4, r5, r6, pc}
    5860:	00014804 	.word	0x00014804

00005864 <smpiScActJwncCalcF4>:
    5864:	b570      	push	{r4, r5, r6, lr}
    5866:	000d      	movs	r5, r1
    5868:	0004      	movs	r4, r0
    586a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    586c:	6849      	ldr	r1, [r1, #4]
    586e:	68d8      	ldr	r0, [r3, #12]
    5870:	2210      	movs	r2, #16
    5872:	3109      	adds	r1, #9
    5874:	3010      	adds	r0, #16
    5876:	f007 fd4d 	bl	d314 <WStrReverseCpy>
    587a:	0029      	movs	r1, r5
    587c:	0020      	movs	r0, r4
    587e:	f7ff f912 	bl	4aa6 <smpScActJwncCalcF4>
    5882:	bd70      	pop	{r4, r5, r6, pc}

00005884 <smpiScActJwncCalcG2>:
    5884:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5886:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5888:	0004      	movs	r4, r0
    588a:	68d8      	ldr	r0, [r3, #12]
    588c:	000d      	movs	r5, r1
    588e:	3040      	adds	r0, #64	; 0x40
    5890:	2210      	movs	r2, #16
    5892:	6849      	ldr	r1, [r1, #4]
    5894:	f00b fde2 	bl	1145c <memcmp>
    5898:	2800      	cmp	r0, #0
    589a:	d00c      	beq.n	58b6 <smpiScActJwncCalcG2+0x32>
    589c:	0023      	movs	r3, r4
    589e:	332d      	adds	r3, #45	; 0x2d
    58a0:	781b      	ldrb	r3, [r3, #0]
    58a2:	a901      	add	r1, sp, #4
    58a4:	800b      	strh	r3, [r1, #0]
    58a6:	2304      	movs	r3, #4
    58a8:	0020      	movs	r0, r4
    58aa:	70cb      	strb	r3, [r1, #3]
    58ac:	3b01      	subs	r3, #1
    58ae:	708b      	strb	r3, [r1, #2]
    58b0:	f7ff fd79 	bl	53a6 <smpSmExecute>
    58b4:	e003      	b.n	58be <smpiScActJwncCalcG2+0x3a>
    58b6:	0029      	movs	r1, r5
    58b8:	0020      	movs	r0, r4
    58ba:	f7ff f917 	bl	4aec <smpScActJwncCalcG2>
    58be:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000058c0 <smpiScActPkCalcCa>:
    58c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    58c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    58c4:	0004      	movs	r4, r0
    58c6:	78da      	ldrb	r2, [r3, #3]
    58c8:	000d      	movs	r5, r1
    58ca:	2a00      	cmp	r2, #0
    58cc:	d11d      	bne.n	590a <smpiScActPkCalcCa+0x4a>
    58ce:	4e1b      	ldr	r6, [pc, #108]	; (593c <smpiScActPkCalcCa+0x7c>)
    58d0:	68d8      	ldr	r0, [r3, #12]
    58d2:	0031      	movs	r1, r6
    58d4:	3020      	adds	r0, #32
    58d6:	f007 fce2 	bl	d29e <Calc128Cpy>
    58da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58dc:	0031      	movs	r1, r6
    58de:	68d8      	ldr	r0, [r3, #12]
    58e0:	3030      	adds	r0, #48	; 0x30
    58e2:	f007 fcdc 	bl	d29e <Calc128Cpy>
    58e6:	7d2a      	ldrb	r2, [r5, #20]
    58e8:	2a03      	cmp	r2, #3
    58ea:	d80e      	bhi.n	590a <smpiScActPkCalcCa+0x4a>
    58ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58ee:	1d2e      	adds	r6, r5, #4
    58f0:	68d8      	ldr	r0, [r3, #12]
    58f2:	b292      	uxth	r2, r2
    58f4:	302d      	adds	r0, #45	; 0x2d
    58f6:	0031      	movs	r1, r6
    58f8:	f007 fd0c 	bl	d314 <WStrReverseCpy>
    58fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58fe:	7d2a      	ldrb	r2, [r5, #20]
    5900:	68d8      	ldr	r0, [r3, #12]
    5902:	0031      	movs	r1, r6
    5904:	303d      	adds	r0, #61	; 0x3d
    5906:	f007 fd05 	bl	d314 <WStrReverseCpy>
    590a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    590c:	2110      	movs	r1, #16
    590e:	68d8      	ldr	r0, [r3, #12]
    5910:	f005 f93a 	bl	ab88 <SecRand>
    5914:	f7fe f8b8 	bl	3a88 <DmSecGetEccKey>
    5918:	6b63      	ldr	r3, [r4, #52]	; 0x34
    591a:	0006      	movs	r6, r0
    591c:	0020      	movs	r0, r4
    591e:	689f      	ldr	r7, [r3, #8]
    5920:	f7fe fe72 	bl	4608 <smpGetPkBit>
    5924:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5926:	0032      	movs	r2, r6
    5928:	68db      	ldr	r3, [r3, #12]
    592a:	0029      	movs	r1, r5
    592c:	9301      	str	r3, [sp, #4]
    592e:	9000      	str	r0, [sp, #0]
    5930:	003b      	movs	r3, r7
    5932:	0020      	movs	r0, r4
    5934:	f7fe fd68 	bl	4408 <SmpScCalcF4>
    5938:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	00014804 	.word	0x00014804

00005940 <smpiScActPkCalcCb>:
    5940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5942:	0004      	movs	r4, r0
    5944:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5946:	000d      	movs	r5, r1
    5948:	68d8      	ldr	r0, [r3, #12]
    594a:	6849      	ldr	r1, [r1, #4]
    594c:	2210      	movs	r2, #16
    594e:	3109      	adds	r1, #9
    5950:	3010      	adds	r0, #16
    5952:	f007 fcdf 	bl	d314 <WStrReverseCpy>
    5956:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5958:	689e      	ldr	r6, [r3, #8]
    595a:	f7fe f895 	bl	3a88 <DmSecGetEccKey>
    595e:	0007      	movs	r7, r0
    5960:	0020      	movs	r0, r4
    5962:	f7fe fe51 	bl	4608 <smpGetPkBit>
    5966:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5968:	0032      	movs	r2, r6
    596a:	68db      	ldr	r3, [r3, #12]
    596c:	0029      	movs	r1, r5
    596e:	3310      	adds	r3, #16
    5970:	9301      	str	r3, [sp, #4]
    5972:	9000      	str	r0, [sp, #0]
    5974:	003b      	movs	r3, r7
    5976:	0020      	movs	r0, r4
    5978:	f7fe fd46 	bl	4408 <SmpScCalcF4>
    597c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000597e <smpiScActPkSendCnf>:
    597e:	b510      	push	{r4, lr}
    5980:	684a      	ldr	r2, [r1, #4]
    5982:	f7fe fe1a 	bl	45ba <smpScSendPairCnf>
    5986:	bd10      	pop	{r4, pc}

00005988 <smpiScActPkSendRand>:
    5988:	b570      	push	{r4, r5, r6, lr}
    598a:	0004      	movs	r4, r0
    598c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    598e:	000d      	movs	r5, r1
    5990:	68d8      	ldr	r0, [r3, #12]
    5992:	6849      	ldr	r1, [r1, #4]
    5994:	3040      	adds	r0, #64	; 0x40
    5996:	3109      	adds	r1, #9
    5998:	2210      	movs	r2, #16
    599a:	f007 fcbb 	bl	d314 <WStrReverseCpy>
    599e:	0023      	movs	r3, r4
    59a0:	2204      	movs	r2, #4
    59a2:	332f      	adds	r3, #47	; 0x2f
    59a4:	701a      	strb	r2, [r3, #0]
    59a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    59a8:	0029      	movs	r1, r5
    59aa:	68da      	ldr	r2, [r3, #12]
    59ac:	0020      	movs	r0, r4
    59ae:	f7fe fddc 	bl	456a <smpScSendRand>
    59b2:	bd70      	pop	{r4, r5, r6, pc}

000059b4 <smpiScActJwncSendRand>:
    59b4:	b510      	push	{r4, lr}
    59b6:	f7ff ffe7 	bl	5988 <smpiScActPkSendRand>
    59ba:	bd10      	pop	{r4, pc}

000059bc <smpiScActPkCheck>:
    59bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    59be:	0004      	movs	r4, r0
    59c0:	6b45      	ldr	r5, [r0, #52]	; 0x34
    59c2:	2210      	movs	r2, #16
    59c4:	68e8      	ldr	r0, [r5, #12]
    59c6:	6849      	ldr	r1, [r1, #4]
    59c8:	3040      	adds	r0, #64	; 0x40
    59ca:	f00b fd47 	bl	1145c <memcmp>
    59ce:	0022      	movs	r2, r4
    59d0:	a901      	add	r1, sp, #4
    59d2:	322d      	adds	r2, #45	; 0x2d
    59d4:	2800      	cmp	r0, #0
    59d6:	d006      	beq.n	59e6 <smpiScActPkCheck+0x2a>
    59d8:	7813      	ldrb	r3, [r2, #0]
    59da:	800b      	strh	r3, [r1, #0]
    59dc:	2304      	movs	r3, #4
    59de:	70cb      	strb	r3, [r1, #3]
    59e0:	3b01      	subs	r3, #1
    59e2:	708b      	strb	r3, [r1, #2]
    59e4:	e00f      	b.n	5a06 <smpiScActPkCheck+0x4a>
    59e6:	78eb      	ldrb	r3, [r5, #3]
    59e8:	3301      	adds	r3, #1
    59ea:	b2db      	uxtb	r3, r3
    59ec:	70eb      	strb	r3, [r5, #3]
    59ee:	2b13      	cmp	r3, #19
    59f0:	d901      	bls.n	59f6 <smpiScActPkCheck+0x3a>
    59f2:	231a      	movs	r3, #26
    59f4:	e004      	b.n	5a00 <smpiScActPkCheck+0x44>
    59f6:	0023      	movs	r3, r4
    59f8:	2003      	movs	r0, #3
    59fa:	332f      	adds	r3, #47	; 0x2f
    59fc:	7018      	strb	r0, [r3, #0]
    59fe:	2319      	movs	r3, #25
    5a00:	708b      	strb	r3, [r1, #2]
    5a02:	7813      	ldrb	r3, [r2, #0]
    5a04:	800b      	strh	r3, [r1, #0]
    5a06:	0020      	movs	r0, r4
    5a08:	f7ff fccd 	bl	53a6 <smpSmExecute>
    5a0c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00005a0e <smpiScActOobCalcCb>:
    5a0e:	b530      	push	{r4, r5, lr}
    5a10:	7c83      	ldrb	r3, [r0, #18]
    5a12:	b085      	sub	sp, #20
    5a14:	0004      	movs	r4, r0
    5a16:	000d      	movs	r5, r1
    5a18:	2b01      	cmp	r3, #1
    5a1a:	d005      	beq.n	5a28 <smpiScActOobCalcCb+0x1a>
    5a1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5a1e:	4913      	ldr	r1, [pc, #76]	; (5a6c <smpiScActOobCalcCb+0x5e>)
    5a20:	68d8      	ldr	r0, [r3, #12]
    5a22:	3020      	adds	r0, #32
    5a24:	f007 fc3b 	bl	d29e <Calc128Cpy>
    5a28:	7e62      	ldrb	r2, [r4, #25]
    5a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a2c:	2a01      	cmp	r2, #1
    5a2e:	d10b      	bne.n	5a48 <smpiScActOobCalcCb+0x3a>
    5a30:	689a      	ldr	r2, [r3, #8]
    5a32:	68db      	ldr	r3, [r3, #12]
    5a34:	0029      	movs	r1, r5
    5a36:	3330      	adds	r3, #48	; 0x30
    5a38:	9301      	str	r3, [sp, #4]
    5a3a:	2300      	movs	r3, #0
    5a3c:	0020      	movs	r0, r4
    5a3e:	9300      	str	r3, [sp, #0]
    5a40:	0013      	movs	r3, r2
    5a42:	f7fe fce1 	bl	4408 <SmpScCalcF4>
    5a46:	e00e      	b.n	5a66 <smpiScActOobCalcCb+0x58>
    5a48:	68d8      	ldr	r0, [r3, #12]
    5a4a:	4908      	ldr	r1, [pc, #32]	; (5a6c <smpiScActOobCalcCb+0x5e>)
    5a4c:	3030      	adds	r0, #48	; 0x30
    5a4e:	f007 fc26 	bl	d29e <Calc128Cpy>
    5a52:	0023      	movs	r3, r4
    5a54:	332d      	adds	r3, #45	; 0x2d
    5a56:	781b      	ldrb	r3, [r3, #0]
    5a58:	a903      	add	r1, sp, #12
    5a5a:	800b      	strh	r3, [r1, #0]
    5a5c:	231b      	movs	r3, #27
    5a5e:	0020      	movs	r0, r4
    5a60:	708b      	strb	r3, [r1, #2]
    5a62:	f7ff fca0 	bl	53a6 <smpSmExecute>
    5a66:	b005      	add	sp, #20
    5a68:	bd30      	pop	{r4, r5, pc}
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	00014804 	.word	0x00014804

00005a70 <smpiScActOobSendRand>:
    5a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5a72:	7e43      	ldrb	r3, [r0, #25]
    5a74:	0004      	movs	r4, r0
    5a76:	000d      	movs	r5, r1
    5a78:	2b01      	cmp	r3, #1
    5a7a:	d115      	bne.n	5aa8 <smpiScActOobSendRand+0x38>
    5a7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5a7e:	2210      	movs	r2, #16
    5a80:	68d8      	ldr	r0, [r3, #12]
    5a82:	6849      	ldr	r1, [r1, #4]
    5a84:	3040      	adds	r0, #64	; 0x40
    5a86:	f00b fce9 	bl	1145c <memcmp>
    5a8a:	2800      	cmp	r0, #0
    5a8c:	d00c      	beq.n	5aa8 <smpiScActOobSendRand+0x38>
    5a8e:	0023      	movs	r3, r4
    5a90:	332d      	adds	r3, #45	; 0x2d
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	a901      	add	r1, sp, #4
    5a96:	800b      	strh	r3, [r1, #0]
    5a98:	2304      	movs	r3, #4
    5a9a:	0020      	movs	r0, r4
    5a9c:	70cb      	strb	r3, [r1, #3]
    5a9e:	3b01      	subs	r3, #1
    5aa0:	708b      	strb	r3, [r1, #2]
    5aa2:	f7ff fc80 	bl	53a6 <smpSmExecute>
    5aa6:	e00e      	b.n	5ac6 <smpiScActOobSendRand+0x56>
    5aa8:	0023      	movs	r3, r4
    5aaa:	2204      	movs	r2, #4
    5aac:	332f      	adds	r3, #47	; 0x2f
    5aae:	701a      	strb	r2, [r3, #0]
    5ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ab2:	2110      	movs	r1, #16
    5ab4:	68d8      	ldr	r0, [r3, #12]
    5ab6:	f005 f867 	bl	ab88 <SecRand>
    5aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5abc:	0029      	movs	r1, r5
    5abe:	68da      	ldr	r2, [r3, #12]
    5ac0:	0020      	movs	r0, r4
    5ac2:	f7fe fd52 	bl	456a <smpScSendRand>
    5ac6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00005ac8 <smpiScActOobProcRand>:
    5ac8:	b570      	push	{r4, r5, r6, lr}
    5aca:	000d      	movs	r5, r1
    5acc:	0004      	movs	r4, r0
    5ace:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5ad0:	6849      	ldr	r1, [r1, #4]
    5ad2:	68d8      	ldr	r0, [r3, #12]
    5ad4:	2210      	movs	r2, #16
    5ad6:	3109      	adds	r1, #9
    5ad8:	3010      	adds	r0, #16
    5ada:	f007 fc1b 	bl	d314 <WStrReverseCpy>
    5ade:	0029      	movs	r1, r5
    5ae0:	0020      	movs	r0, r4
    5ae2:	f7ff f88d 	bl	4c00 <smpScActCalcSharedSecret>
    5ae6:	bd70      	pop	{r4, r5, r6, pc}

00005ae8 <smpiScActDHKeyCheckSend>:
    5ae8:	b570      	push	{r4, r5, r6, lr}
    5aea:	0004      	movs	r4, r0
    5aec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5aee:	000d      	movs	r5, r1
    5af0:	68d8      	ldr	r0, [r3, #12]
    5af2:	2210      	movs	r2, #16
    5af4:	3010      	adds	r0, #16
    5af6:	6849      	ldr	r1, [r1, #4]
    5af8:	f007 fc0c 	bl	d314 <WStrReverseCpy>
    5afc:	0023      	movs	r3, r4
    5afe:	220d      	movs	r2, #13
    5b00:	332f      	adds	r3, #47	; 0x2f
    5b02:	701a      	strb	r2, [r3, #0]
    5b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5b06:	0029      	movs	r1, r5
    5b08:	68da      	ldr	r2, [r3, #12]
    5b0a:	0020      	movs	r0, r4
    5b0c:	f7fe fd05 	bl	451a <smpScSendDHKeyCheck>
    5b10:	bd70      	pop	{r4, r5, r6, pc}

00005b12 <smpiScActDHKeyCheckVerify>:
    5b12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5b14:	0004      	movs	r4, r0
    5b16:	6b46      	ldr	r6, [r0, #52]	; 0x34
    5b18:	6848      	ldr	r0, [r1, #4]
    5b1a:	68f3      	ldr	r3, [r6, #12]
    5b1c:	3009      	adds	r0, #9
    5b1e:	3310      	adds	r3, #16
    5b20:	2210      	movs	r2, #16
    5b22:	0019      	movs	r1, r3
    5b24:	0025      	movs	r5, r4
    5b26:	f00b fc99 	bl	1145c <memcmp>
    5b2a:	352d      	adds	r5, #45	; 0x2d
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d119      	bne.n	5b64 <smpiScActDHKeyCheckVerify+0x52>
    5b30:	7d23      	ldrb	r3, [r4, #20]
    5b32:	7ee2      	ldrb	r2, [r4, #27]
    5b34:	1c14      	adds	r4, r2, #0
    5b36:	429a      	cmp	r2, r3
    5b38:	d900      	bls.n	5b3c <smpiScActDHKeyCheckVerify+0x2a>
    5b3a:	1c1c      	adds	r4, r3, #0
    5b3c:	6931      	ldr	r1, [r6, #16]
    5b3e:	b2e4      	uxtb	r4, r4
    5b40:	0022      	movs	r2, r4
    5b42:	3110      	adds	r1, #16
    5b44:	4668      	mov	r0, sp
    5b46:	f00b fc98 	bl	1147a <memcpy>
    5b4a:	0020      	movs	r0, r4
    5b4c:	2210      	movs	r2, #16
    5b4e:	4468      	add	r0, sp
    5b50:	1b12      	subs	r2, r2, r4
    5b52:	2100      	movs	r1, #0
    5b54:	f00b fcb6 	bl	114c4 <memset>
    5b58:	7828      	ldrb	r0, [r5, #0]
    5b5a:	466a      	mov	r2, sp
    5b5c:	2103      	movs	r1, #3
    5b5e:	f7ff f9bd 	bl	4edc <DmSmpEncryptReq>
    5b62:	e00a      	b.n	5b7a <smpiScActDHKeyCheckVerify+0x68>
    5b64:	466a      	mov	r2, sp
    5b66:	782b      	ldrb	r3, [r5, #0]
    5b68:	4669      	mov	r1, sp
    5b6a:	8013      	strh	r3, [r2, #0]
    5b6c:	230b      	movs	r3, #11
    5b6e:	0020      	movs	r0, r4
    5b70:	70d3      	strb	r3, [r2, #3]
    5b72:	3311      	adds	r3, #17
    5b74:	7093      	strb	r3, [r2, #2]
    5b76:	f7ff fc16 	bl	53a6 <smpSmExecute>
    5b7a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00005b7c <smprActSendSecurityReq>:
    5b7c:	0003      	movs	r3, r0
    5b7e:	2201      	movs	r2, #1
    5b80:	332b      	adds	r3, #43	; 0x2b
    5b82:	b570      	push	{r4, r5, r6, lr}
    5b84:	0004      	movs	r4, r0
    5b86:	701a      	strb	r2, [r3, #0]
    5b88:	200a      	movs	r0, #10
    5b8a:	000d      	movs	r5, r1
    5b8c:	f7fe fb2c 	bl	41e8 <smpMsgAlloc>
    5b90:	1e01      	subs	r1, r0, #0
    5b92:	d006      	beq.n	5ba2 <smprActSendSecurityReq+0x26>
    5b94:	230b      	movs	r3, #11
    5b96:	7203      	strb	r3, [r0, #8]
    5b98:	792b      	ldrb	r3, [r5, #4]
    5b9a:	7243      	strb	r3, [r0, #9]
    5b9c:	0020      	movs	r0, r4
    5b9e:	f7fe fad3 	bl	4148 <smpSendPkt>
    5ba2:	bd70      	pop	{r4, r5, r6, pc}

00005ba4 <smprActCheckSecurityReq>:
    5ba4:	0003      	movs	r3, r0
    5ba6:	b510      	push	{r4, lr}
    5ba8:	332b      	adds	r3, #43	; 0x2b
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	2b00      	cmp	r3, #0
    5bae:	d001      	beq.n	5bb4 <smprActCheckSecurityReq+0x10>
    5bb0:	f7ff fa16 	bl	4fe0 <smpActPairingFailed>
    5bb4:	bd10      	pop	{r4, pc}

00005bb6 <smprActClearSecurityReq>:
    5bb6:	2300      	movs	r3, #0
    5bb8:	302b      	adds	r0, #43	; 0x2b
    5bba:	7003      	strb	r3, [r0, #0]
    5bbc:	4770      	bx	lr

00005bbe <smprActProcPairReq>:
    5bbe:	6a03      	ldr	r3, [r0, #32]
    5bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5bc2:	0004      	movs	r4, r0
    5bc4:	000d      	movs	r5, r1
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d10e      	bne.n	5be8 <smprActProcPairReq+0x2a>
    5bca:	2040      	movs	r0, #64	; 0x40
    5bcc:	f005 f8aa 	bl	ad24 <WsfBufAlloc>
    5bd0:	6220      	str	r0, [r4, #32]
    5bd2:	2800      	cmp	r0, #0
    5bd4:	d108      	bne.n	5be8 <smprActProcPairReq+0x2a>
    5bd6:	2308      	movs	r3, #8
    5bd8:	70eb      	strb	r3, [r5, #3]
    5bda:	3b05      	subs	r3, #5
    5bdc:	70ab      	strb	r3, [r5, #2]
    5bde:	0029      	movs	r1, r5
    5be0:	0020      	movs	r0, r4
    5be2:	f7ff fbe0 	bl	53a6 <smpSmExecute>
    5be6:	e01e      	b.n	5c26 <smprActProcPairReq+0x68>
    5be8:	0026      	movs	r6, r4
    5bea:	2201      	movs	r2, #1
    5bec:	362d      	adds	r6, #45	; 0x2d
    5bee:	0011      	movs	r1, r2
    5bf0:	7830      	ldrb	r0, [r6, #0]
    5bf2:	f7fd f9a3 	bl	2f3c <DmConnSetIdle>
    5bf6:	686d      	ldr	r5, [r5, #4]
    5bf8:	0020      	movs	r0, r4
    5bfa:	0029      	movs	r1, r5
    5bfc:	2207      	movs	r2, #7
    5bfe:	3010      	adds	r0, #16
    5c00:	3108      	adds	r1, #8
    5c02:	f00b fc3a 	bl	1147a <memcpy>
    5c06:	466a      	mov	r2, sp
    5c08:	7aab      	ldrb	r3, [r5, #10]
    5c0a:	4668      	mov	r0, sp
    5c0c:	7153      	strb	r3, [r2, #5]
    5c0e:	7aeb      	ldrb	r3, [r5, #11]
    5c10:	7113      	strb	r3, [r2, #4]
    5c12:	7b6b      	ldrb	r3, [r5, #13]
    5c14:	7193      	strb	r3, [r2, #6]
    5c16:	7bab      	ldrb	r3, [r5, #14]
    5c18:	71d3      	strb	r3, [r2, #7]
    5c1a:	7833      	ldrb	r3, [r6, #0]
    5c1c:	8013      	strh	r3, [r2, #0]
    5c1e:	2331      	movs	r3, #49	; 0x31
    5c20:	7093      	strb	r3, [r2, #2]
    5c22:	f7fd fdab 	bl	377c <DmSmpCbackExec>
    5c26:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00005c28 <smprActSendPairRsp>:
    5c28:	2302      	movs	r3, #2
    5c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5c2c:	75c3      	strb	r3, [r0, #23]
    5c2e:	4b21      	ldr	r3, [pc, #132]	; (5cb4 <smprActSendPairRsp+0x8c>)
    5c30:	000d      	movs	r5, r1
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	4e20      	ldr	r6, [pc, #128]	; (5cb8 <smprActSendPairRsp+0x90>)
    5c36:	789a      	ldrb	r2, [r3, #2]
    5c38:	0004      	movs	r4, r0
    5c3a:	7602      	strb	r2, [r0, #24]
    5c3c:	790a      	ldrb	r2, [r1, #4]
    5c3e:	7642      	strb	r2, [r0, #25]
    5c40:	794a      	ldrb	r2, [r1, #5]
    5c42:	7682      	strb	r2, [r0, #26]
    5c44:	791b      	ldrb	r3, [r3, #4]
    5c46:	76c3      	strb	r3, [r0, #27]
    5c48:	798b      	ldrb	r3, [r1, #6]
    5c4a:	7703      	strb	r3, [r0, #28]
    5c4c:	79cb      	ldrb	r3, [r1, #7]
    5c4e:	4669      	mov	r1, sp
    5c50:	7743      	strb	r3, [r0, #29]
    5c52:	466b      	mov	r3, sp
    5c54:	1ddf      	adds	r7, r3, #7
    5c56:	23e6      	movs	r3, #230	; 0xe6
    5c58:	005b      	lsls	r3, r3, #1
    5c5a:	58f3      	ldr	r3, [r6, r3]
    5c5c:	003a      	movs	r2, r7
    5c5e:	3106      	adds	r1, #6
    5c60:	4798      	blx	r3
    5c62:	2800      	cmp	r0, #0
    5c64:	d024      	beq.n	5cb0 <smprActSendPairRsp+0x88>
    5c66:	796a      	ldrb	r2, [r5, #5]
    5c68:	7ce3      	ldrb	r3, [r4, #19]
    5c6a:	4013      	ands	r3, r2
    5c6c:	0022      	movs	r2, r4
    5c6e:	322f      	adds	r2, #47	; 0x2f
    5c70:	071b      	lsls	r3, r3, #28
    5c72:	d501      	bpl.n	5c78 <smprActSendPairRsp+0x50>
    5c74:	230c      	movs	r3, #12
    5c76:	e000      	b.n	5c7a <smprActSendPairRsp+0x52>
    5c78:	2303      	movs	r3, #3
    5c7a:	7013      	strb	r3, [r2, #0]
    5c7c:	0020      	movs	r0, r4
    5c7e:	f7ff f975 	bl	4f6c <smpStartRspTimer>
    5c82:	200f      	movs	r0, #15
    5c84:	f7fe fab0 	bl	41e8 <smpMsgAlloc>
    5c88:	1e05      	subs	r5, r0, #0
    5c8a:	d009      	beq.n	5ca0 <smprActSendPairRsp+0x78>
    5c8c:	0021      	movs	r1, r4
    5c8e:	3008      	adds	r0, #8
    5c90:	3117      	adds	r1, #23
    5c92:	2207      	movs	r2, #7
    5c94:	f00b fbf1 	bl	1147a <memcpy>
    5c98:	0029      	movs	r1, r5
    5c9a:	0020      	movs	r0, r4
    5c9c:	f7fe fa54 	bl	4148 <smpSendPkt>
    5ca0:	466b      	mov	r3, sp
    5ca2:	7999      	ldrb	r1, [r3, #6]
    5ca4:	23e8      	movs	r3, #232	; 0xe8
    5ca6:	005b      	lsls	r3, r3, #1
    5ca8:	783a      	ldrb	r2, [r7, #0]
    5caa:	58f3      	ldr	r3, [r6, r3]
    5cac:	0020      	movs	r0, r4
    5cae:	4798      	blx	r3
    5cb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	1000108c 	.word	0x1000108c
    5cb8:	1000180c 	.word	0x1000180c

00005cbc <smprActProcPairCnf>:
    5cbc:	b510      	push	{r4, lr}
    5cbe:	0004      	movs	r4, r0
    5cc0:	6849      	ldr	r1, [r1, #4]
    5cc2:	6a00      	ldr	r0, [r0, #32]
    5cc4:	3109      	adds	r1, #9
    5cc6:	2210      	movs	r2, #16
    5cc8:	3020      	adds	r0, #32
    5cca:	f00b fbd6 	bl	1147a <memcpy>
    5cce:	2300      	movs	r3, #0
    5cd0:	342f      	adds	r4, #47	; 0x2f
    5cd2:	7023      	strb	r3, [r4, #0]
    5cd4:	bd10      	pop	{r4, pc}

00005cd6 <smprActProcPairCnfCalc1>:
    5cd6:	b510      	push	{r4, lr}
    5cd8:	0004      	movs	r4, r0
    5cda:	f7ff ffef 	bl	5cbc <smprActProcPairCnf>
    5cde:	6a20      	ldr	r0, [r4, #32]
    5ce0:	2110      	movs	r1, #16
    5ce2:	3030      	adds	r0, #48	; 0x30
    5ce4:	f004 ff50 	bl	ab88 <SecRand>
    5ce8:	6a22      	ldr	r2, [r4, #32]
    5cea:	6a21      	ldr	r1, [r4, #32]
    5cec:	3230      	adds	r2, #48	; 0x30
    5cee:	0020      	movs	r0, r4
    5cf0:	f7fe f8e8 	bl	3ec4 <smpCalcC1Part1>
    5cf4:	bd10      	pop	{r4, pc}

00005cf6 <smprActCnfVerify>:
    5cf6:	b570      	push	{r4, r5, r6, lr}
    5cf8:	6a06      	ldr	r6, [r0, #32]
    5cfa:	000c      	movs	r4, r1
    5cfc:	0031      	movs	r1, r6
    5cfe:	0005      	movs	r5, r0
    5d00:	3120      	adds	r1, #32
    5d02:	2210      	movs	r2, #16
    5d04:	6860      	ldr	r0, [r4, #4]
    5d06:	f00b fba9 	bl	1145c <memcmp>
    5d0a:	2800      	cmp	r0, #0
    5d0c:	d015      	beq.n	5d3a <smprActCnfVerify+0x44>
    5d0e:	002a      	movs	r2, r5
    5d10:	3232      	adds	r2, #50	; 0x32
    5d12:	7813      	ldrb	r3, [r2, #0]
    5d14:	3301      	adds	r3, #1
    5d16:	b2db      	uxtb	r3, r3
    5d18:	7013      	strb	r3, [r2, #0]
    5d1a:	4a0c      	ldr	r2, [pc, #48]	; (5d4c <smprActCnfVerify+0x56>)
    5d1c:	6812      	ldr	r2, [r2, #0]
    5d1e:	7951      	ldrb	r1, [r2, #5]
    5d20:	2204      	movs	r2, #4
    5d22:	70e2      	strb	r2, [r4, #3]
    5d24:	4299      	cmp	r1, r3
    5d26:	d101      	bne.n	5d2c <smprActCnfVerify+0x36>
    5d28:	230d      	movs	r3, #13
    5d2a:	e000      	b.n	5d2e <smprActCnfVerify+0x38>
    5d2c:	2303      	movs	r3, #3
    5d2e:	70a3      	strb	r3, [r4, #2]
    5d30:	0021      	movs	r1, r4
    5d32:	0028      	movs	r0, r5
    5d34:	f7ff fb37 	bl	53a6 <smpSmExecute>
    5d38:	e007      	b.n	5d4a <smprActCnfVerify+0x54>
    5d3a:	0033      	movs	r3, r6
    5d3c:	0032      	movs	r2, r6
    5d3e:	3310      	adds	r3, #16
    5d40:	3230      	adds	r2, #48	; 0x30
    5d42:	0031      	movs	r1, r6
    5d44:	0028      	movs	r0, r5
    5d46:	f7fe f9a5 	bl	4094 <smpCalcS1>
    5d4a:	bd70      	pop	{r4, r5, r6, pc}
    5d4c:	1000108c 	.word	0x1000108c

00005d50 <smprActSendPairRandom>:
    5d50:	b570      	push	{r4, r5, r6, lr}
    5d52:	7ec2      	ldrb	r2, [r0, #27]
    5d54:	7d03      	ldrb	r3, [r0, #20]
    5d56:	0005      	movs	r5, r0
    5d58:	1c14      	adds	r4, r2, #0
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d900      	bls.n	5d60 <smprActSendPairRandom+0x10>
    5d5e:	1c1c      	adds	r4, r3, #0
    5d60:	2610      	movs	r6, #16
    5d62:	6a28      	ldr	r0, [r5, #32]
    5d64:	b2e4      	uxtb	r4, r4
    5d66:	0022      	movs	r2, r4
    5d68:	6849      	ldr	r1, [r1, #4]
    5d6a:	3020      	adds	r0, #32
    5d6c:	f00b fb85 	bl	1147a <memcpy>
    5d70:	6a28      	ldr	r0, [r5, #32]
    5d72:	1b32      	subs	r2, r6, r4
    5d74:	3020      	adds	r0, #32
    5d76:	2100      	movs	r1, #0
    5d78:	1900      	adds	r0, r0, r4
    5d7a:	f00b fba3 	bl	114c4 <memset>
    5d7e:	0028      	movs	r0, r5
    5d80:	f7ff f8f4 	bl	4f6c <smpStartRspTimer>
    5d84:	2019      	movs	r0, #25
    5d86:	f7fe fa2f 	bl	41e8 <smpMsgAlloc>
    5d8a:	1e04      	subs	r4, r0, #0
    5d8c:	d00b      	beq.n	5da6 <smprActSendPairRandom+0x56>
    5d8e:	2304      	movs	r3, #4
    5d90:	7203      	strb	r3, [r0, #8]
    5d92:	6a29      	ldr	r1, [r5, #32]
    5d94:	3009      	adds	r0, #9
    5d96:	3130      	adds	r1, #48	; 0x30
    5d98:	0032      	movs	r2, r6
    5d9a:	f00b fb6e 	bl	1147a <memcpy>
    5d9e:	0021      	movs	r1, r4
    5da0:	0028      	movs	r0, r5
    5da2:	f7fe f9d1 	bl	4148 <smpSendPkt>
    5da6:	bd70      	pop	{r4, r5, r6, pc}

00005da8 <smprActSendKey>:
    5da8:	b570      	push	{r4, r5, r6, lr}
    5daa:	000d      	movs	r5, r1
    5dac:	7d83      	ldrb	r3, [r0, #22]
    5dae:	7f41      	ldrb	r1, [r0, #29]
    5db0:	0004      	movs	r4, r0
    5db2:	4019      	ands	r1, r3
    5db4:	f7ff f98c 	bl	50d0 <smpSendKey>
    5db8:	2800      	cmp	r0, #0
    5dba:	d027      	beq.n	5e0c <smprActSendKey+0x64>
    5dbc:	0022      	movs	r2, r4
    5dbe:	2300      	movs	r3, #0
    5dc0:	322f      	adds	r2, #47	; 0x2f
    5dc2:	7013      	strb	r3, [r2, #0]
    5dc4:	7d63      	ldrb	r3, [r4, #21]
    5dc6:	7f21      	ldrb	r1, [r4, #28]
    5dc8:	400b      	ands	r3, r1
    5dca:	07d9      	lsls	r1, r3, #31
    5dcc:	d50f      	bpl.n	5dee <smprActSendKey+0x46>
    5dce:	21ea      	movs	r1, #234	; 0xea
    5dd0:	480f      	ldr	r0, [pc, #60]	; (5e10 <smprActSendKey+0x68>)
    5dd2:	0049      	lsls	r1, r1, #1
    5dd4:	5c41      	ldrb	r1, [r0, r1]
    5dd6:	2900      	cmp	r1, #0
    5dd8:	d007      	beq.n	5dea <smprActSendKey+0x42>
    5dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5ddc:	7809      	ldrb	r1, [r1, #0]
    5dde:	2900      	cmp	r1, #0
    5de0:	d003      	beq.n	5dea <smprActSendKey+0x42>
    5de2:	079b      	lsls	r3, r3, #30
    5de4:	d509      	bpl.n	5dfa <smprActSendKey+0x52>
    5de6:	2308      	movs	r3, #8
    5de8:	e006      	b.n	5df8 <smprActSendKey+0x50>
    5dea:	2306      	movs	r3, #6
    5dec:	e004      	b.n	5df8 <smprActSendKey+0x50>
    5dee:	0799      	lsls	r1, r3, #30
    5df0:	d4f9      	bmi.n	5de6 <smprActSendKey+0x3e>
    5df2:	075b      	lsls	r3, r3, #29
    5df4:	d501      	bpl.n	5dfa <smprActSendKey+0x52>
    5df6:	230a      	movs	r3, #10
    5df8:	7013      	strb	r3, [r2, #0]
    5dfa:	7813      	ldrb	r3, [r2, #0]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d105      	bne.n	5e0c <smprActSendKey+0x64>
    5e00:	330e      	adds	r3, #14
    5e02:	70ab      	strb	r3, [r5, #2]
    5e04:	0029      	movs	r1, r5
    5e06:	0020      	movs	r0, r4
    5e08:	f7ff facd 	bl	53a6 <smpSmExecute>
    5e0c:	bd70      	pop	{r4, r5, r6, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	1000180c 	.word	0x1000180c

00005e14 <smprActSetupKeyDist>:
    5e14:	0003      	movs	r3, r0
    5e16:	2200      	movs	r2, #0
    5e18:	b570      	push	{r4, r5, r6, lr}
    5e1a:	0004      	movs	r4, r0
    5e1c:	332f      	adds	r3, #47	; 0x2f
    5e1e:	701a      	strb	r2, [r3, #0]
    5e20:	000d      	movs	r5, r1
    5e22:	f7ff f8a3 	bl	4f6c <smpStartRspTimer>
    5e26:	0023      	movs	r3, r4
    5e28:	332d      	adds	r3, #45	; 0x2d
    5e2a:	781b      	ldrb	r3, [r3, #0]
    5e2c:	6a22      	ldr	r2, [r4, #32]
    5e2e:	8013      	strh	r3, [r2, #0]
    5e30:	0023      	movs	r3, r4
    5e32:	3330      	adds	r3, #48	; 0x30
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	6a22      	ldr	r2, [r4, #32]
    5e38:	075b      	lsls	r3, r3, #29
    5e3a:	0fdb      	lsrs	r3, r3, #31
    5e3c:	3301      	adds	r3, #1
    5e3e:	77d3      	strb	r3, [r2, #31]
    5e40:	7ee0      	ldrb	r0, [r4, #27]
    5e42:	7d21      	ldrb	r1, [r4, #20]
    5e44:	6a23      	ldr	r3, [r4, #32]
    5e46:	1c02      	adds	r2, r0, #0
    5e48:	4288      	cmp	r0, r1
    5e4a:	d900      	bls.n	5e4e <smprActSetupKeyDist+0x3a>
    5e4c:	1c0a      	adds	r2, r1, #0
    5e4e:	3301      	adds	r3, #1
    5e50:	0029      	movs	r1, r5
    5e52:	77da      	strb	r2, [r3, #31]
    5e54:	0020      	movs	r0, r4
    5e56:	f7ff ffa7 	bl	5da8 <smprActSendKey>
    5e5a:	bd70      	pop	{r4, r5, r6, pc}

00005e5c <smprActRcvKey>:
    5e5c:	b570      	push	{r4, r5, r6, lr}
    5e5e:	7f02      	ldrb	r2, [r0, #28]
    5e60:	7d43      	ldrb	r3, [r0, #21]
    5e62:	000d      	movs	r5, r1
    5e64:	4013      	ands	r3, r2
    5e66:	684a      	ldr	r2, [r1, #4]
    5e68:	6a01      	ldr	r1, [r0, #32]
    5e6a:	0004      	movs	r4, r0
    5e6c:	f7ff f9fa 	bl	5264 <smpProcRcvKey>
    5e70:	2800      	cmp	r0, #0
    5e72:	d005      	beq.n	5e80 <smprActRcvKey+0x24>
    5e74:	230e      	movs	r3, #14
    5e76:	0029      	movs	r1, r5
    5e78:	70ab      	strb	r3, [r5, #2]
    5e7a:	0020      	movs	r0, r4
    5e7c:	f7ff fa93 	bl	53a6 <smpSmExecute>
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	46c0      	nop			; (mov r8, r8)

00005e84 <smprScActStoreLescPin>:
    5e84:	b570      	push	{r4, r5, r6, lr}
    5e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5e88:	0004      	movs	r4, r0
    5e8a:	785a      	ldrb	r2, [r3, #1]
    5e8c:	000d      	movs	r5, r1
    5e8e:	2a03      	cmp	r2, #3
    5e90:	d11d      	bne.n	5ece <smprScActStoreLescPin+0x4a>
    5e92:	4e0f      	ldr	r6, [pc, #60]	; (5ed0 <smprScActStoreLescPin+0x4c>)
    5e94:	68d8      	ldr	r0, [r3, #12]
    5e96:	0031      	movs	r1, r6
    5e98:	3020      	adds	r0, #32
    5e9a:	f007 fa00 	bl	d29e <Calc128Cpy>
    5e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ea0:	0031      	movs	r1, r6
    5ea2:	68d8      	ldr	r0, [r3, #12]
    5ea4:	3030      	adds	r0, #48	; 0x30
    5ea6:	f007 f9fa 	bl	d29e <Calc128Cpy>
    5eaa:	7d2a      	ldrb	r2, [r5, #20]
    5eac:	2a03      	cmp	r2, #3
    5eae:	d80e      	bhi.n	5ece <smprScActStoreLescPin+0x4a>
    5eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5eb2:	1d2e      	adds	r6, r5, #4
    5eb4:	68d8      	ldr	r0, [r3, #12]
    5eb6:	b292      	uxth	r2, r2
    5eb8:	302d      	adds	r0, #45	; 0x2d
    5eba:	0031      	movs	r1, r6
    5ebc:	f007 fa2a 	bl	d314 <WStrReverseCpy>
    5ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ec2:	7d2a      	ldrb	r2, [r5, #20]
    5ec4:	68d8      	ldr	r0, [r3, #12]
    5ec6:	0031      	movs	r1, r6
    5ec8:	303d      	adds	r0, #61	; 0x3d
    5eca:	f007 fa23 	bl	d314 <WStrReverseCpy>
    5ece:	bd70      	pop	{r4, r5, r6, pc}
    5ed0:	00014804 	.word	0x00014804

00005ed4 <smprScActSendPubKey>:
    5ed4:	b570      	push	{r4, r5, r6, lr}
    5ed6:	000d      	movs	r5, r1
    5ed8:	0004      	movs	r4, r0
    5eda:	f7fe fd9f 	bl	4a1c <smpScActAuthSelect>
    5ede:	0029      	movs	r1, r5
    5ee0:	0020      	movs	r0, r4
    5ee2:	f7fe fae7 	bl	44b4 <smpScSendPubKey>
    5ee6:	bd70      	pop	{r4, r5, r6, pc}

00005ee8 <smprScActJwncSetup>:
    5ee8:	b570      	push	{r4, r5, r6, lr}
    5eea:	0004      	movs	r4, r0
    5eec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5eee:	000e      	movs	r6, r1
    5ef0:	68d8      	ldr	r0, [r3, #12]
    5ef2:	2110      	movs	r1, #16
    5ef4:	3010      	adds	r0, #16
    5ef6:	f004 fe47 	bl	ab88 <SecRand>
    5efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5efc:	4d0a      	ldr	r5, [pc, #40]	; (5f28 <smprScActJwncSetup+0x40>)
    5efe:	68d8      	ldr	r0, [r3, #12]
    5f00:	0029      	movs	r1, r5
    5f02:	3020      	adds	r0, #32
    5f04:	f007 f9cb 	bl	d29e <Calc128Cpy>
    5f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f0a:	0029      	movs	r1, r5
    5f0c:	68d8      	ldr	r0, [r3, #12]
    5f0e:	3030      	adds	r0, #48	; 0x30
    5f10:	f007 f9c5 	bl	d29e <Calc128Cpy>
    5f14:	0023      	movs	r3, r4
    5f16:	2204      	movs	r2, #4
    5f18:	332f      	adds	r3, #47	; 0x2f
    5f1a:	0031      	movs	r1, r6
    5f1c:	701a      	strb	r2, [r3, #0]
    5f1e:	0020      	movs	r0, r4
    5f20:	f7fe fdc1 	bl	4aa6 <smpScActJwncCalcF4>
    5f24:	bd70      	pop	{r4, r5, r6, pc}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	00014804 	.word	0x00014804

00005f2c <smprScActJwncCalcG2>:
    5f2c:	b570      	push	{r4, r5, r6, lr}
    5f2e:	000d      	movs	r5, r1
    5f30:	0004      	movs	r4, r0
    5f32:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f34:	6849      	ldr	r1, [r1, #4]
    5f36:	68d8      	ldr	r0, [r3, #12]
    5f38:	2210      	movs	r2, #16
    5f3a:	3109      	adds	r1, #9
    5f3c:	f007 f9ea 	bl	d314 <WStrReverseCpy>
    5f40:	0029      	movs	r1, r5
    5f42:	0020      	movs	r0, r4
    5f44:	f7fe fdd2 	bl	4aec <smpScActJwncCalcG2>
    5f48:	bd70      	pop	{r4, r5, r6, pc}

00005f4a <smprScActPkStoreCnf>:
    5f4a:	b510      	push	{r4, lr}
    5f4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f4e:	6849      	ldr	r1, [r1, #4]
    5f50:	68d8      	ldr	r0, [r3, #12]
    5f52:	3109      	adds	r1, #9
    5f54:	3050      	adds	r0, #80	; 0x50
    5f56:	2210      	movs	r2, #16
    5f58:	f007 f9dc 	bl	d314 <WStrReverseCpy>
    5f5c:	bd10      	pop	{r4, pc}

00005f5e <smprScActPkCalcCb>:
    5f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f60:	0004      	movs	r4, r0
    5f62:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f64:	000d      	movs	r5, r1
    5f66:	68d8      	ldr	r0, [r3, #12]
    5f68:	2110      	movs	r1, #16
    5f6a:	3010      	adds	r0, #16
    5f6c:	f004 fe0c 	bl	ab88 <SecRand>
    5f70:	0023      	movs	r3, r4
    5f72:	2204      	movs	r2, #4
    5f74:	332f      	adds	r3, #47	; 0x2f
    5f76:	701a      	strb	r2, [r3, #0]
    5f78:	f7fd fd86 	bl	3a88 <DmSecGetEccKey>
    5f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f7e:	0006      	movs	r6, r0
    5f80:	0020      	movs	r0, r4
    5f82:	689f      	ldr	r7, [r3, #8]
    5f84:	f7fe fb40 	bl	4608 <smpGetPkBit>
    5f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f8a:	0032      	movs	r2, r6
    5f8c:	68db      	ldr	r3, [r3, #12]
    5f8e:	0029      	movs	r1, r5
    5f90:	3310      	adds	r3, #16
    5f92:	9301      	str	r3, [sp, #4]
    5f94:	9000      	str	r0, [sp, #0]
    5f96:	003b      	movs	r3, r7
    5f98:	0020      	movs	r0, r4
    5f9a:	f7fe fa35 	bl	4408 <SmpScCalcF4>
    5f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00005fa0 <smprScActPkStoreCnfAndCalcCb>:
    5fa0:	b570      	push	{r4, r5, r6, lr}
    5fa2:	000d      	movs	r5, r1
    5fa4:	0004      	movs	r4, r0
    5fa6:	f7ff ffd0 	bl	5f4a <smprScActPkStoreCnf>
    5faa:	0029      	movs	r1, r5
    5fac:	0020      	movs	r0, r4
    5fae:	f7ff ffd6 	bl	5f5e <smprScActPkCalcCb>
    5fb2:	bd70      	pop	{r4, r5, r6, pc}

00005fb4 <smprScActPkStorePinAndCalcCb>:
    5fb4:	b570      	push	{r4, r5, r6, lr}
    5fb6:	000d      	movs	r5, r1
    5fb8:	0004      	movs	r4, r0
    5fba:	f7ff ff63 	bl	5e84 <smprScActStoreLescPin>
    5fbe:	0029      	movs	r1, r5
    5fc0:	0020      	movs	r0, r4
    5fc2:	f7ff ffcc 	bl	5f5e <smprScActPkCalcCb>
    5fc6:	bd70      	pop	{r4, r5, r6, pc}

00005fc8 <smprScActPkSendCnf>:
    5fc8:	b510      	push	{r4, lr}
    5fca:	684a      	ldr	r2, [r1, #4]
    5fcc:	f7fe faf5 	bl	45ba <smpScSendPairCnf>
    5fd0:	bd10      	pop	{r4, pc}

00005fd2 <smprScActJwncSendCnf>:
    5fd2:	b510      	push	{r4, lr}
    5fd4:	f7ff fff8 	bl	5fc8 <smprScActPkSendCnf>
    5fd8:	bd10      	pop	{r4, pc}

00005fda <smprScActPkCalcCa>:
    5fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5fdc:	0004      	movs	r4, r0
    5fde:	000d      	movs	r5, r1
    5fe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5fe2:	6849      	ldr	r1, [r1, #4]
    5fe4:	2210      	movs	r2, #16
    5fe6:	3109      	adds	r1, #9
    5fe8:	68d8      	ldr	r0, [r3, #12]
    5fea:	f007 f993 	bl	d314 <WStrReverseCpy>
    5fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ff0:	689e      	ldr	r6, [r3, #8]
    5ff2:	f7fd fd49 	bl	3a88 <DmSecGetEccKey>
    5ff6:	0007      	movs	r7, r0
    5ff8:	0020      	movs	r0, r4
    5ffa:	f7fe fb05 	bl	4608 <smpGetPkBit>
    5ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6000:	0032      	movs	r2, r6
    6002:	68db      	ldr	r3, [r3, #12]
    6004:	0029      	movs	r1, r5
    6006:	9301      	str	r3, [sp, #4]
    6008:	9000      	str	r0, [sp, #0]
    600a:	003b      	movs	r3, r7
    600c:	0020      	movs	r0, r4
    600e:	f7fe f9fb 	bl	4408 <SmpScCalcF4>
    6012:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00006014 <smprScActPkSendRand>:
    6014:	b5f0      	push	{r4, r5, r6, r7, lr}
    6016:	0005      	movs	r5, r0
    6018:	6b46      	ldr	r6, [r0, #52]	; 0x34
    601a:	b085      	sub	sp, #20
    601c:	68f0      	ldr	r0, [r6, #12]
    601e:	000f      	movs	r7, r1
    6020:	3050      	adds	r0, #80	; 0x50
    6022:	2210      	movs	r2, #16
    6024:	6849      	ldr	r1, [r1, #4]
    6026:	f00b fa19 	bl	1145c <memcmp>
    602a:	002b      	movs	r3, r5
    602c:	332d      	adds	r3, #45	; 0x2d
    602e:	ac03      	add	r4, sp, #12
    6030:	9301      	str	r3, [sp, #4]
    6032:	2800      	cmp	r0, #0
    6034:	d006      	beq.n	6044 <smprScActPkSendRand+0x30>
    6036:	781b      	ldrb	r3, [r3, #0]
    6038:	8023      	strh	r3, [r4, #0]
    603a:	2304      	movs	r3, #4
    603c:	70e3      	strb	r3, [r4, #3]
    603e:	3b01      	subs	r3, #1
    6040:	70a3      	strb	r3, [r4, #2]
    6042:	e018      	b.n	6076 <smprScActPkSendRand+0x62>
    6044:	78f3      	ldrb	r3, [r6, #3]
    6046:	3301      	adds	r3, #1
    6048:	b2db      	uxtb	r3, r3
    604a:	70f3      	strb	r3, [r6, #3]
    604c:	2b13      	cmp	r3, #19
    604e:	d902      	bls.n	6056 <smprScActPkSendRand+0x42>
    6050:	231a      	movs	r3, #26
    6052:	70a3      	strb	r3, [r4, #2]
    6054:	e00c      	b.n	6070 <smprScActPkSendRand+0x5c>
    6056:	002b      	movs	r3, r5
    6058:	2203      	movs	r2, #3
    605a:	332f      	adds	r3, #47	; 0x2f
    605c:	701a      	strb	r2, [r3, #0]
    605e:	2319      	movs	r3, #25
    6060:	70a3      	strb	r3, [r4, #2]
    6062:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6064:	0039      	movs	r1, r7
    6066:	68da      	ldr	r2, [r3, #12]
    6068:	0028      	movs	r0, r5
    606a:	3210      	adds	r2, #16
    606c:	f7fe fa7d 	bl	456a <smpScSendRand>
    6070:	9b01      	ldr	r3, [sp, #4]
    6072:	781b      	ldrb	r3, [r3, #0]
    6074:	8023      	strh	r3, [r4, #0]
    6076:	0021      	movs	r1, r4
    6078:	0028      	movs	r0, r5
    607a:	f7ff f994 	bl	53a6 <smpSmExecute>
    607e:	b005      	add	sp, #20
    6080:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006082 <smprScActOobSetup>:
    6082:	2304      	movs	r3, #4
    6084:	302f      	adds	r0, #47	; 0x2f
    6086:	7003      	strb	r3, [r0, #0]
    6088:	4770      	bx	lr

0000608a <smprScActOobCalcCa>:
    608a:	b530      	push	{r4, r5, lr}
    608c:	0004      	movs	r4, r0
    608e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6090:	000d      	movs	r5, r1
    6092:	6849      	ldr	r1, [r1, #4]
    6094:	68d8      	ldr	r0, [r3, #12]
    6096:	b085      	sub	sp, #20
    6098:	3109      	adds	r1, #9
    609a:	2210      	movs	r2, #16
    609c:	f007 f93a 	bl	d314 <WStrReverseCpy>
    60a0:	7e63      	ldrb	r3, [r4, #25]
    60a2:	2b01      	cmp	r3, #1
    60a4:	d005      	beq.n	60b2 <smprScActOobCalcCa+0x28>
    60a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    60a8:	4912      	ldr	r1, [pc, #72]	; (60f4 <smprScActOobCalcCa+0x6a>)
    60aa:	68d8      	ldr	r0, [r3, #12]
    60ac:	3030      	adds	r0, #48	; 0x30
    60ae:	f007 f8f6 	bl	d29e <Calc128Cpy>
    60b2:	7ca2      	ldrb	r2, [r4, #18]
    60b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    60b6:	2a01      	cmp	r2, #1
    60b8:	d10b      	bne.n	60d2 <smprScActOobCalcCa+0x48>
    60ba:	689a      	ldr	r2, [r3, #8]
    60bc:	68db      	ldr	r3, [r3, #12]
    60be:	0029      	movs	r1, r5
    60c0:	3320      	adds	r3, #32
    60c2:	9301      	str	r3, [sp, #4]
    60c4:	2300      	movs	r3, #0
    60c6:	0020      	movs	r0, r4
    60c8:	9300      	str	r3, [sp, #0]
    60ca:	0013      	movs	r3, r2
    60cc:	f7fe f99c 	bl	4408 <SmpScCalcF4>
    60d0:	e00e      	b.n	60f0 <smprScActOobCalcCa+0x66>
    60d2:	68d8      	ldr	r0, [r3, #12]
    60d4:	4907      	ldr	r1, [pc, #28]	; (60f4 <smprScActOobCalcCa+0x6a>)
    60d6:	3020      	adds	r0, #32
    60d8:	f007 f8e1 	bl	d29e <Calc128Cpy>
    60dc:	0023      	movs	r3, r4
    60de:	332d      	adds	r3, #45	; 0x2d
    60e0:	781b      	ldrb	r3, [r3, #0]
    60e2:	a903      	add	r1, sp, #12
    60e4:	800b      	strh	r3, [r1, #0]
    60e6:	231b      	movs	r3, #27
    60e8:	0020      	movs	r0, r4
    60ea:	708b      	strb	r3, [r1, #2]
    60ec:	f7ff f95b 	bl	53a6 <smpSmExecute>
    60f0:	b005      	add	sp, #20
    60f2:	bd30      	pop	{r4, r5, pc}
    60f4:	00014804 	.word	0x00014804

000060f8 <smprScActOobSendRand>:
    60f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    60fa:	7c83      	ldrb	r3, [r0, #18]
    60fc:	0004      	movs	r4, r0
    60fe:	000d      	movs	r5, r1
    6100:	2b01      	cmp	r3, #1
    6102:	d115      	bne.n	6130 <smprScActOobSendRand+0x38>
    6104:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6106:	2210      	movs	r2, #16
    6108:	68d8      	ldr	r0, [r3, #12]
    610a:	6849      	ldr	r1, [r1, #4]
    610c:	3050      	adds	r0, #80	; 0x50
    610e:	f00b f9a5 	bl	1145c <memcmp>
    6112:	2800      	cmp	r0, #0
    6114:	d00c      	beq.n	6130 <smprScActOobSendRand+0x38>
    6116:	0023      	movs	r3, r4
    6118:	332d      	adds	r3, #45	; 0x2d
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	a901      	add	r1, sp, #4
    611e:	800b      	strh	r3, [r1, #0]
    6120:	2304      	movs	r3, #4
    6122:	0020      	movs	r0, r4
    6124:	70cb      	strb	r3, [r1, #3]
    6126:	3b01      	subs	r3, #1
    6128:	708b      	strb	r3, [r1, #2]
    612a:	f7ff f93c 	bl	53a6 <smpSmExecute>
    612e:	e010      	b.n	6152 <smprScActOobSendRand+0x5a>
    6130:	0023      	movs	r3, r4
    6132:	220d      	movs	r2, #13
    6134:	332f      	adds	r3, #47	; 0x2f
    6136:	701a      	strb	r2, [r3, #0]
    6138:	6b63      	ldr	r3, [r4, #52]	; 0x34
    613a:	2110      	movs	r1, #16
    613c:	68d8      	ldr	r0, [r3, #12]
    613e:	3010      	adds	r0, #16
    6140:	f004 fd22 	bl	ab88 <SecRand>
    6144:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6146:	0029      	movs	r1, r5
    6148:	68da      	ldr	r2, [r3, #12]
    614a:	0020      	movs	r0, r4
    614c:	3210      	adds	r2, #16
    614e:	f7fe fa0c 	bl	456a <smpScSendRand>
    6152:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00006154 <smprScActWaitDhCheck>:
    6154:	0003      	movs	r3, r0
    6156:	220d      	movs	r2, #13
    6158:	b510      	push	{r4, lr}
    615a:	332f      	adds	r3, #47	; 0x2f
    615c:	701a      	strb	r2, [r3, #0]
    615e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6160:	785a      	ldrb	r2, [r3, #1]
    6162:	2a02      	cmp	r2, #2
    6164:	d003      	beq.n	616e <smprScActWaitDhCheck+0x1a>
    6166:	68da      	ldr	r2, [r3, #12]
    6168:	3210      	adds	r2, #16
    616a:	f7fe f9fe 	bl	456a <smpScSendRand>
    616e:	bd10      	pop	{r4, pc}

00006170 <smprScActCalcDHKey>:
    6170:	b570      	push	{r4, r5, r6, lr}
    6172:	000d      	movs	r5, r1
    6174:	0004      	movs	r4, r0
    6176:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6178:	6849      	ldr	r1, [r1, #4]
    617a:	68d8      	ldr	r0, [r3, #12]
    617c:	2210      	movs	r2, #16
    617e:	3109      	adds	r1, #9
    6180:	3050      	adds	r0, #80	; 0x50
    6182:	f007 f8c7 	bl	d314 <WStrReverseCpy>
    6186:	0029      	movs	r1, r5
    6188:	0020      	movs	r0, r4
    618a:	f7fe fd39 	bl	4c00 <smpScActCalcSharedSecret>
    618e:	bd70      	pop	{r4, r5, r6, pc}

00006190 <smprScActDHKeyCheckSend>:
    6190:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6192:	0004      	movs	r4, r0
    6194:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6196:	000d      	movs	r5, r1
    6198:	68d8      	ldr	r0, [r3, #12]
    619a:	6849      	ldr	r1, [r1, #4]
    619c:	3010      	adds	r0, #16
    619e:	f007 f87e 	bl	d29e <Calc128Cpy>
    61a2:	6b66      	ldr	r6, [r4, #52]	; 0x34
    61a4:	2210      	movs	r2, #16
    61a6:	68f0      	ldr	r0, [r6, #12]
    61a8:	68f1      	ldr	r1, [r6, #12]
    61aa:	3050      	adds	r0, #80	; 0x50
    61ac:	f00b f956 	bl	1145c <memcmp>
    61b0:	2800      	cmp	r0, #0
    61b2:	d116      	bne.n	61e2 <smprScActDHKeyCheckSend+0x52>
    61b4:	7ee1      	ldrb	r1, [r4, #27]
    61b6:	7d22      	ldrb	r2, [r4, #20]
    61b8:	1c0b      	adds	r3, r1, #0
    61ba:	4291      	cmp	r1, r2
    61bc:	d900      	bls.n	61c0 <smprScActDHKeyCheckSend+0x30>
    61be:	1c13      	adds	r3, r2, #0
    61c0:	2210      	movs	r2, #16
    61c2:	6930      	ldr	r0, [r6, #16]
    61c4:	b2db      	uxtb	r3, r3
    61c6:	3010      	adds	r0, #16
    61c8:	1ad2      	subs	r2, r2, r3
    61ca:	18c0      	adds	r0, r0, r3
    61cc:	2100      	movs	r1, #0
    61ce:	f00b f979 	bl	114c4 <memset>
    61d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61d4:	0029      	movs	r1, r5
    61d6:	68da      	ldr	r2, [r3, #12]
    61d8:	0020      	movs	r0, r4
    61da:	3210      	adds	r2, #16
    61dc:	f7fe f99d 	bl	451a <smpScSendDHKeyCheck>
    61e0:	e00b      	b.n	61fa <smprScActDHKeyCheckSend+0x6a>
    61e2:	0023      	movs	r3, r4
    61e4:	332d      	adds	r3, #45	; 0x2d
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	a901      	add	r1, sp, #4
    61ea:	800b      	strh	r3, [r1, #0]
    61ec:	230b      	movs	r3, #11
    61ee:	0020      	movs	r0, r4
    61f0:	70cb      	strb	r3, [r1, #3]
    61f2:	3311      	adds	r3, #17
    61f4:	708b      	strb	r3, [r1, #2]
    61f6:	f7ff f8d6 	bl	53a6 <smpSmExecute>
    61fa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

000061fc <__gnu_thumb1_case_sqi>:
    61fc:	b402      	push	{r1}
    61fe:	4671      	mov	r1, lr
    6200:	0849      	lsrs	r1, r1, #1
    6202:	0049      	lsls	r1, r1, #1
    6204:	5609      	ldrsb	r1, [r1, r0]
    6206:	0049      	lsls	r1, r1, #1
    6208:	448e      	add	lr, r1
    620a:	bc02      	pop	{r1}
    620c:	4770      	bx	lr
    620e:	bf00      	nop

00006210 <__gnu_thumb1_case_uqi>:
    6210:	b402      	push	{r1}
    6212:	4671      	mov	r1, lr
    6214:	0849      	lsrs	r1, r1, #1
    6216:	0049      	lsls	r1, r1, #1
    6218:	5c09      	ldrb	r1, [r1, r0]
    621a:	0049      	lsls	r1, r1, #1
    621c:	448e      	add	lr, r1
    621e:	bc02      	pop	{r1}
    6220:	4770      	bx	lr
    6222:	bf00      	nop

00006224 <__udivsi3>:
    6224:	2900      	cmp	r1, #0
    6226:	d002      	beq.n	622e <__udivsi3+0xa>
    6228:	fbb0 f0f1 	udiv	r0, r0, r1
    622c:	4770      	bx	lr
    622e:	b108      	cbz	r0, 6234 <__udivsi3+0x10>
    6230:	f04f 30ff 	mov.w	r0, #4294967295
    6234:	f000 b808 	b.w	6248 <__aeabi_idiv0>

00006238 <__aeabi_uidivmod>:
    6238:	2900      	cmp	r1, #0
    623a:	d0f8      	beq.n	622e <__udivsi3+0xa>
    623c:	4602      	mov	r2, r0
    623e:	fbb0 f0f1 	udiv	r0, r0, r1
    6242:	fb00 2111 	mls	r1, r0, r1, r2
    6246:	4770      	bx	lr

00006248 <__aeabi_idiv0>:
    6248:	4770      	bx	lr
    624a:	bf00      	nop

0000624c <__aeabi_d2f>:
    624c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6250:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6254:	bf24      	itt	cs
    6256:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    625a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    625e:	d90d      	bls.n	627c <__aeabi_d2f+0x30>
    6260:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6264:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6268:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    626c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6270:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6274:	bf08      	it	eq
    6276:	f020 0001 	biceq.w	r0, r0, #1
    627a:	4770      	bx	lr
    627c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6280:	d121      	bne.n	62c6 <__aeabi_d2f+0x7a>
    6282:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6286:	bfbc      	itt	lt
    6288:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    628c:	4770      	bxlt	lr
    628e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6292:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6296:	f1c2 0218 	rsb	r2, r2, #24
    629a:	f1c2 0c20 	rsb	ip, r2, #32
    629e:	fa10 f30c 	lsls.w	r3, r0, ip
    62a2:	fa20 f002 	lsr.w	r0, r0, r2
    62a6:	bf18      	it	ne
    62a8:	f040 0001 	orrne.w	r0, r0, #1
    62ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    62b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    62b4:	fa03 fc0c 	lsl.w	ip, r3, ip
    62b8:	ea40 000c 	orr.w	r0, r0, ip
    62bc:	fa23 f302 	lsr.w	r3, r3, r2
    62c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    62c4:	e7cc      	b.n	6260 <__aeabi_d2f+0x14>
    62c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    62ca:	d107      	bne.n	62dc <__aeabi_d2f+0x90>
    62cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    62d0:	bf1e      	ittt	ne
    62d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    62d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    62da:	4770      	bxne	lr
    62dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    62e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    62e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    62e8:	4770      	bx	lr
    62ea:	bf00      	nop

000062ec <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
    62ec:	b580      	push	{r7, lr}
    62ee:	b084      	sub	sp, #16
    62f0:	af00      	add	r7, sp, #0
    62f2:	4603      	mov	r3, r0
    62f4:	460a      	mov	r2, r1
    62f6:	80fb      	strh	r3, [r7, #6]
    62f8:	4613      	mov	r3, r2
    62fa:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    62fc:	88bb      	ldrh	r3, [r7, #4]
    62fe:	3303      	adds	r3, #3
    6300:	b29b      	uxth	r3, r3
    6302:	4618      	mov	r0, r3
    6304:	f004 fd9d 	bl	ae42 <WsfMsgAlloc>
    6308:	60f8      	str	r0, [r7, #12]
    630a:	68fb      	ldr	r3, [r7, #12]
    630c:	2b00      	cmp	r3, #0
    630e:	d016      	beq.n	633e <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	1c5a      	adds	r2, r3, #1
    6314:	60fa      	str	r2, [r7, #12]
    6316:	88fa      	ldrh	r2, [r7, #6]
    6318:	b2d2      	uxtb	r2, r2
    631a:	701a      	strb	r2, [r3, #0]
    631c:	68fb      	ldr	r3, [r7, #12]
    631e:	1c5a      	adds	r2, r3, #1
    6320:	60fa      	str	r2, [r7, #12]
    6322:	88fa      	ldrh	r2, [r7, #6]
    6324:	0a12      	lsrs	r2, r2, #8
    6326:	b292      	uxth	r2, r2
    6328:	b2d2      	uxtb	r2, r2
    632a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	1c5a      	adds	r2, r3, #1
    6330:	60fa      	str	r2, [r7, #12]
    6332:	88ba      	ldrh	r2, [r7, #4]
    6334:	b2d2      	uxtb	r2, r2
    6336:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	3b03      	subs	r3, #3
    633c:	60fb      	str	r3, [r7, #12]
  }

  return p;
    633e:	68fb      	ldr	r3, [r7, #12]
}
    6340:	4618      	mov	r0, r3
    6342:	3710      	adds	r7, #16
    6344:	46bd      	mov	sp, r7
    6346:	bd80      	pop	{r7, pc}

00006348 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
    6348:	b580      	push	{r7, lr}
    634a:	b084      	sub	sp, #16
    634c:	af00      	add	r7, sp, #0
    634e:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	2b00      	cmp	r3, #0
    6354:	d004      	beq.n	6360 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    6356:	687a      	ldr	r2, [r7, #4]
    6358:	2100      	movs	r1, #0
    635a:	4817      	ldr	r0, [pc, #92]	; (63b8 <hciCmdSend+0x70>)
    635c:	f004 fdad 	bl	aeba <WsfMsgEnq>

  /* service the HCI command queue; first check if controller can accept any commands */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  if (hciCmdCb.numCmdPkts > 0 && (hciCoreCb.availBufs > 0))
#else
  if (hciCmdCb.numCmdPkts > 0)
    6360:	4b16      	ldr	r3, [pc, #88]	; (63bc <hciCmdSend+0x74>)
    6362:	7e9b      	ldrb	r3, [r3, #26]
    6364:	2b00      	cmp	r3, #0
    6366:	d023      	beq.n	63b0 <hciCmdSend+0x68>
#endif
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    6368:	f107 030b 	add.w	r3, r7, #11
    636c:	4619      	mov	r1, r3
    636e:	4812      	ldr	r0, [pc, #72]	; (63b8 <hciCmdSend+0x70>)
    6370:	f004 fdb8 	bl	aee4 <WsfMsgDeq>
    6374:	60f8      	str	r0, [r7, #12]
    6376:	68fb      	ldr	r3, [r7, #12]
    6378:	2b00      	cmp	r3, #0
    637a:	d019      	beq.n	63b0 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
    637c:	4b0f      	ldr	r3, [pc, #60]	; (63bc <hciCmdSend+0x74>)
    637e:	7e9b      	ldrb	r3, [r3, #26]
    6380:	3b01      	subs	r3, #1
    6382:	b2da      	uxtb	r2, r3
    6384:	4b0d      	ldr	r3, [pc, #52]	; (63bc <hciCmdSend+0x74>)
    6386:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    6388:	68fb      	ldr	r3, [r7, #12]
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	b29a      	uxth	r2, r3
    638e:	68fb      	ldr	r3, [r7, #12]
    6390:	3301      	adds	r3, #1
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	b29b      	uxth	r3, r3
    6396:	021b      	lsls	r3, r3, #8
    6398:	b29b      	uxth	r3, r3
    639a:	4413      	add	r3, r2
    639c:	b29a      	uxth	r2, r3
    639e:	4b07      	ldr	r3, [pc, #28]	; (63bc <hciCmdSend+0x74>)
    63a0:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    63a2:	211e      	movs	r1, #30
    63a4:	4805      	ldr	r0, [pc, #20]	; (63bc <hciCmdSend+0x74>)
    63a6:	f004 ff05 	bl	b1b4 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
    63aa:	68f8      	ldr	r0, [r7, #12]
    63ac:	f003 fb51 	bl	9a52 <hciTrSendCmd>
    }
  }
}
    63b0:	bf00      	nop
    63b2:	3710      	adds	r7, #16
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	10002624 	.word	0x10002624
    63bc:	10002614 	.word	0x10002614

000063c0 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
    63c0:	b480      	push	{r7}
    63c2:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
    63c4:	4b0a      	ldr	r3, [pc, #40]	; (63f0 <hciCmdInit+0x30>)
    63c6:	2200      	movs	r2, #0
    63c8:	611a      	str	r2, [r3, #16]
    63ca:	4b09      	ldr	r3, [pc, #36]	; (63f0 <hciCmdInit+0x30>)
    63cc:	2200      	movs	r2, #0
    63ce:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
    63d0:	4b07      	ldr	r3, [pc, #28]	; (63f0 <hciCmdInit+0x30>)
    63d2:	2201      	movs	r2, #1
    63d4:	769a      	strb	r2, [r3, #26]
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  hciCoreCb.availBufs = 1;
#endif

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
    63d6:	4b06      	ldr	r3, [pc, #24]	; (63f0 <hciCmdInit+0x30>)
    63d8:	2201      	movs	r2, #1
    63da:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
    63dc:	4b05      	ldr	r3, [pc, #20]	; (63f4 <hciCmdInit+0x34>)
    63de:	7e1a      	ldrb	r2, [r3, #24]
    63e0:	4b03      	ldr	r3, [pc, #12]	; (63f0 <hciCmdInit+0x30>)
    63e2:	721a      	strb	r2, [r3, #8]
}
    63e4:	bf00      	nop
    63e6:	46bd      	mov	sp, r7
    63e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ec:	4770      	bx	lr
    63ee:	bf00      	nop
    63f0:	10002614 	.word	0x10002614
    63f4:	100028f4 	.word	0x100028f4

000063f8 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b082      	sub	sp, #8
    63fc:	af00      	add	r7, sp, #0
    63fe:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
    6400:	4805      	ldr	r0, [pc, #20]	; (6418 <hciCmdTimeout+0x20>)
    6402:	f003 ffa5 	bl	a350 <WsfTrace>
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.
  HciDrvRadioBoot(0);
    6406:	2000      	movs	r0, #0
    6408:	f006 fa90 	bl	c92c <HciDrvRadioBoot>
  DmDevReset();
    640c:	f7fc feba 	bl	3184 <DmDevReset>
}
    6410:	bf00      	nop
    6412:	3708      	adds	r7, #8
    6414:	46bd      	mov	sp, r7
    6416:	bd80      	pop	{r7, pc}
    6418:	000114d4 	.word	0x000114d4

0000641c <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
    641c:	b580      	push	{r7, lr}
    641e:	b082      	sub	sp, #8
    6420:	af00      	add	r7, sp, #0
    6422:	4603      	mov	r3, r0
    6424:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
    6426:	4806      	ldr	r0, [pc, #24]	; (6440 <hciCmdRecvCmpl+0x24>)
    6428:	f004 feea 	bl	b200 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
    642c:	4b04      	ldr	r3, [pc, #16]	; (6440 <hciCmdRecvCmpl+0x24>)
    642e:	2201      	movs	r2, #1
    6430:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
    6432:	2000      	movs	r0, #0
    6434:	f7ff ff88 	bl	6348 <hciCmdSend>
}
    6438:	bf00      	nop
    643a:	3708      	adds	r7, #8
    643c:	46bd      	mov	sp, r7
    643e:	bd80      	pop	{r7, pc}
    6440:	10002614 	.word	0x10002614

00006444 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
    6444:	b580      	push	{r7, lr}
    6446:	b084      	sub	sp, #16
    6448:	af00      	add	r7, sp, #0
    644a:	4603      	mov	r3, r0
    644c:	460a      	mov	r2, r1
    644e:	80fb      	strh	r3, [r7, #6]
    6450:	4613      	mov	r3, r2
    6452:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
    6454:	2103      	movs	r1, #3
    6456:	f240 4006 	movw	r0, #1030	; 0x406
    645a:	f7ff ff47 	bl	62ec <hciCmdAlloc>
    645e:	60f8      	str	r0, [r7, #12]
    6460:	68fb      	ldr	r3, [r7, #12]
    6462:	2b00      	cmp	r3, #0
    6464:	d018      	beq.n	6498 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6466:	68fb      	ldr	r3, [r7, #12]
    6468:	3303      	adds	r3, #3
    646a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    646c:	68bb      	ldr	r3, [r7, #8]
    646e:	1c5a      	adds	r2, r3, #1
    6470:	60ba      	str	r2, [r7, #8]
    6472:	88fa      	ldrh	r2, [r7, #6]
    6474:	b2d2      	uxtb	r2, r2
    6476:	701a      	strb	r2, [r3, #0]
    6478:	68bb      	ldr	r3, [r7, #8]
    647a:	1c5a      	adds	r2, r3, #1
    647c:	60ba      	str	r2, [r7, #8]
    647e:	88fa      	ldrh	r2, [r7, #6]
    6480:	0a12      	lsrs	r2, r2, #8
    6482:	b292      	uxth	r2, r2
    6484:	b2d2      	uxtb	r2, r2
    6486:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    6488:	68bb      	ldr	r3, [r7, #8]
    648a:	1c5a      	adds	r2, r3, #1
    648c:	60ba      	str	r2, [r7, #8]
    648e:	797a      	ldrb	r2, [r7, #5]
    6490:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6492:	68f8      	ldr	r0, [r7, #12]
    6494:	f7ff ff58 	bl	6348 <hciCmdSend>
  }
}
    6498:	bf00      	nop
    649a:	3710      	adds	r7, #16
    649c:	46bd      	mov	sp, r7
    649e:	bd80      	pop	{r7, pc}

000064a0 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
    64a0:	b580      	push	{r7, lr}
    64a2:	b084      	sub	sp, #16
    64a4:	af00      	add	r7, sp, #0
    64a6:	4603      	mov	r3, r0
    64a8:	6039      	str	r1, [r7, #0]
    64aa:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
    64ac:	2107      	movs	r1, #7
    64ae:	f242 0011 	movw	r0, #8209	; 0x2011
    64b2:	f7ff ff1b 	bl	62ec <hciCmdAlloc>
    64b6:	60f8      	str	r0, [r7, #12]
    64b8:	68fb      	ldr	r3, [r7, #12]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d011      	beq.n	64e2 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	3303      	adds	r3, #3
    64c2:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    64c4:	68bb      	ldr	r3, [r7, #8]
    64c6:	1c5a      	adds	r2, r3, #1
    64c8:	60ba      	str	r2, [r7, #8]
    64ca:	79fa      	ldrb	r2, [r7, #7]
    64cc:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    64ce:	6839      	ldr	r1, [r7, #0]
    64d0:	68b8      	ldr	r0, [r7, #8]
    64d2:	f006 fe99 	bl	d208 <BdaCpy>
    64d6:	68bb      	ldr	r3, [r7, #8]
    64d8:	3306      	adds	r3, #6
    64da:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    64dc:	68f8      	ldr	r0, [r7, #12]
    64de:	f7ff ff33 	bl	6348 <hciCmdSend>
  }
}
    64e2:	bf00      	nop
    64e4:	3710      	adds	r7, #16
    64e6:	46bd      	mov	sp, r7
    64e8:	bd80      	pop	{r7, pc}

000064ea <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
    64ea:	b580      	push	{r7, lr}
    64ec:	b082      	sub	sp, #8
    64ee:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
    64f0:	2100      	movs	r1, #0
    64f2:	f242 0010 	movw	r0, #8208	; 0x2010
    64f6:	f7ff fef9 	bl	62ec <hciCmdAlloc>
    64fa:	6078      	str	r0, [r7, #4]
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	2b00      	cmp	r3, #0
    6500:	d002      	beq.n	6508 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6502:	6878      	ldr	r0, [r7, #4]
    6504:	f7ff ff20 	bl	6348 <hciCmdSend>
  }
}
    6508:	bf00      	nop
    650a:	3708      	adds	r7, #8
    650c:	46bd      	mov	sp, r7
    650e:	bd80      	pop	{r7, pc}

00006510 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	4603      	mov	r3, r0
    6518:	6039      	str	r1, [r7, #0]
    651a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
    651c:	210e      	movs	r1, #14
    651e:	f242 0013 	movw	r0, #8211	; 0x2013
    6522:	f7ff fee3 	bl	62ec <hciCmdAlloc>
    6526:	60f8      	str	r0, [r7, #12]
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	2b00      	cmp	r3, #0
    652c:	d073      	beq.n	6616 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	3303      	adds	r3, #3
    6532:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6534:	68bb      	ldr	r3, [r7, #8]
    6536:	1c5a      	adds	r2, r3, #1
    6538:	60ba      	str	r2, [r7, #8]
    653a:	88fa      	ldrh	r2, [r7, #6]
    653c:	b2d2      	uxtb	r2, r2
    653e:	701a      	strb	r2, [r3, #0]
    6540:	68bb      	ldr	r3, [r7, #8]
    6542:	1c5a      	adds	r2, r3, #1
    6544:	60ba      	str	r2, [r7, #8]
    6546:	88fa      	ldrh	r2, [r7, #6]
    6548:	0a12      	lsrs	r2, r2, #8
    654a:	b292      	uxth	r2, r2
    654c:	b2d2      	uxtb	r2, r2
    654e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
    6550:	68bb      	ldr	r3, [r7, #8]
    6552:	1c5a      	adds	r2, r3, #1
    6554:	60ba      	str	r2, [r7, #8]
    6556:	683a      	ldr	r2, [r7, #0]
    6558:	8812      	ldrh	r2, [r2, #0]
    655a:	b2d2      	uxtb	r2, r2
    655c:	701a      	strb	r2, [r3, #0]
    655e:	68bb      	ldr	r3, [r7, #8]
    6560:	1c5a      	adds	r2, r3, #1
    6562:	60ba      	str	r2, [r7, #8]
    6564:	683a      	ldr	r2, [r7, #0]
    6566:	8812      	ldrh	r2, [r2, #0]
    6568:	0a12      	lsrs	r2, r2, #8
    656a:	b292      	uxth	r2, r2
    656c:	b2d2      	uxtb	r2, r2
    656e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
    6570:	68bb      	ldr	r3, [r7, #8]
    6572:	1c5a      	adds	r2, r3, #1
    6574:	60ba      	str	r2, [r7, #8]
    6576:	683a      	ldr	r2, [r7, #0]
    6578:	8852      	ldrh	r2, [r2, #2]
    657a:	b2d2      	uxtb	r2, r2
    657c:	701a      	strb	r2, [r3, #0]
    657e:	68bb      	ldr	r3, [r7, #8]
    6580:	1c5a      	adds	r2, r3, #1
    6582:	60ba      	str	r2, [r7, #8]
    6584:	683a      	ldr	r2, [r7, #0]
    6586:	8852      	ldrh	r2, [r2, #2]
    6588:	0a12      	lsrs	r2, r2, #8
    658a:	b292      	uxth	r2, r2
    658c:	b2d2      	uxtb	r2, r2
    658e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
    6590:	68bb      	ldr	r3, [r7, #8]
    6592:	1c5a      	adds	r2, r3, #1
    6594:	60ba      	str	r2, [r7, #8]
    6596:	683a      	ldr	r2, [r7, #0]
    6598:	8892      	ldrh	r2, [r2, #4]
    659a:	b2d2      	uxtb	r2, r2
    659c:	701a      	strb	r2, [r3, #0]
    659e:	68bb      	ldr	r3, [r7, #8]
    65a0:	1c5a      	adds	r2, r3, #1
    65a2:	60ba      	str	r2, [r7, #8]
    65a4:	683a      	ldr	r2, [r7, #0]
    65a6:	8892      	ldrh	r2, [r2, #4]
    65a8:	0a12      	lsrs	r2, r2, #8
    65aa:	b292      	uxth	r2, r2
    65ac:	b2d2      	uxtb	r2, r2
    65ae:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
    65b0:	68bb      	ldr	r3, [r7, #8]
    65b2:	1c5a      	adds	r2, r3, #1
    65b4:	60ba      	str	r2, [r7, #8]
    65b6:	683a      	ldr	r2, [r7, #0]
    65b8:	88d2      	ldrh	r2, [r2, #6]
    65ba:	b2d2      	uxtb	r2, r2
    65bc:	701a      	strb	r2, [r3, #0]
    65be:	68bb      	ldr	r3, [r7, #8]
    65c0:	1c5a      	adds	r2, r3, #1
    65c2:	60ba      	str	r2, [r7, #8]
    65c4:	683a      	ldr	r2, [r7, #0]
    65c6:	88d2      	ldrh	r2, [r2, #6]
    65c8:	0a12      	lsrs	r2, r2, #8
    65ca:	b292      	uxth	r2, r2
    65cc:	b2d2      	uxtb	r2, r2
    65ce:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
    65d0:	68bb      	ldr	r3, [r7, #8]
    65d2:	1c5a      	adds	r2, r3, #1
    65d4:	60ba      	str	r2, [r7, #8]
    65d6:	683a      	ldr	r2, [r7, #0]
    65d8:	8912      	ldrh	r2, [r2, #8]
    65da:	b2d2      	uxtb	r2, r2
    65dc:	701a      	strb	r2, [r3, #0]
    65de:	68bb      	ldr	r3, [r7, #8]
    65e0:	1c5a      	adds	r2, r3, #1
    65e2:	60ba      	str	r2, [r7, #8]
    65e4:	683a      	ldr	r2, [r7, #0]
    65e6:	8912      	ldrh	r2, [r2, #8]
    65e8:	0a12      	lsrs	r2, r2, #8
    65ea:	b292      	uxth	r2, r2
    65ec:	b2d2      	uxtb	r2, r2
    65ee:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
    65f0:	68bb      	ldr	r3, [r7, #8]
    65f2:	1c5a      	adds	r2, r3, #1
    65f4:	60ba      	str	r2, [r7, #8]
    65f6:	683a      	ldr	r2, [r7, #0]
    65f8:	8952      	ldrh	r2, [r2, #10]
    65fa:	b2d2      	uxtb	r2, r2
    65fc:	701a      	strb	r2, [r3, #0]
    65fe:	68bb      	ldr	r3, [r7, #8]
    6600:	1c5a      	adds	r2, r3, #1
    6602:	60ba      	str	r2, [r7, #8]
    6604:	683a      	ldr	r2, [r7, #0]
    6606:	8952      	ldrh	r2, [r2, #10]
    6608:	0a12      	lsrs	r2, r2, #8
    660a:	b292      	uxth	r2, r2
    660c:	b2d2      	uxtb	r2, r2
    660e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6610:	68f8      	ldr	r0, [r7, #12]
    6612:	f7ff fe99 	bl	6348 <hciCmdSend>
  }
}
    6616:	bf00      	nop
    6618:	3710      	adds	r7, #16
    661a:	46bd      	mov	sp, r7
    661c:	bd80      	pop	{r7, pc}

0000661e <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
    661e:	b590      	push	{r4, r7, lr}
    6620:	b085      	sub	sp, #20
    6622:	af00      	add	r7, sp, #0
    6624:	4604      	mov	r4, r0
    6626:	4608      	mov	r0, r1
    6628:	4611      	mov	r1, r2
    662a:	461a      	mov	r2, r3
    662c:	4623      	mov	r3, r4
    662e:	80fb      	strh	r3, [r7, #6]
    6630:	4603      	mov	r3, r0
    6632:	80bb      	strh	r3, [r7, #4]
    6634:	460b      	mov	r3, r1
    6636:	807b      	strh	r3, [r7, #2]
    6638:	4613      	mov	r3, r2
    663a:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
    663c:	210e      	movs	r1, #14
    663e:	f242 0020 	movw	r0, #8224	; 0x2020
    6642:	f7ff fe53 	bl	62ec <hciCmdAlloc>
    6646:	60f8      	str	r0, [r7, #12]
    6648:	68fb      	ldr	r3, [r7, #12]
    664a:	2b00      	cmp	r3, #0
    664c:	d067      	beq.n	671e <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    664e:	68fb      	ldr	r3, [r7, #12]
    6650:	3303      	adds	r3, #3
    6652:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6654:	68bb      	ldr	r3, [r7, #8]
    6656:	1c5a      	adds	r2, r3, #1
    6658:	60ba      	str	r2, [r7, #8]
    665a:	88fa      	ldrh	r2, [r7, #6]
    665c:	b2d2      	uxtb	r2, r2
    665e:	701a      	strb	r2, [r3, #0]
    6660:	68bb      	ldr	r3, [r7, #8]
    6662:	1c5a      	adds	r2, r3, #1
    6664:	60ba      	str	r2, [r7, #8]
    6666:	88fa      	ldrh	r2, [r7, #6]
    6668:	0a12      	lsrs	r2, r2, #8
    666a:	b292      	uxth	r2, r2
    666c:	b2d2      	uxtb	r2, r2
    666e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
    6670:	68bb      	ldr	r3, [r7, #8]
    6672:	1c5a      	adds	r2, r3, #1
    6674:	60ba      	str	r2, [r7, #8]
    6676:	88ba      	ldrh	r2, [r7, #4]
    6678:	b2d2      	uxtb	r2, r2
    667a:	701a      	strb	r2, [r3, #0]
    667c:	68bb      	ldr	r3, [r7, #8]
    667e:	1c5a      	adds	r2, r3, #1
    6680:	60ba      	str	r2, [r7, #8]
    6682:	88ba      	ldrh	r2, [r7, #4]
    6684:	0a12      	lsrs	r2, r2, #8
    6686:	b292      	uxth	r2, r2
    6688:	b2d2      	uxtb	r2, r2
    668a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
    668c:	68bb      	ldr	r3, [r7, #8]
    668e:	1c5a      	adds	r2, r3, #1
    6690:	60ba      	str	r2, [r7, #8]
    6692:	887a      	ldrh	r2, [r7, #2]
    6694:	b2d2      	uxtb	r2, r2
    6696:	701a      	strb	r2, [r3, #0]
    6698:	68bb      	ldr	r3, [r7, #8]
    669a:	1c5a      	adds	r2, r3, #1
    669c:	60ba      	str	r2, [r7, #8]
    669e:	887a      	ldrh	r2, [r7, #2]
    66a0:	0a12      	lsrs	r2, r2, #8
    66a2:	b292      	uxth	r2, r2
    66a4:	b2d2      	uxtb	r2, r2
    66a6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
    66a8:	68bb      	ldr	r3, [r7, #8]
    66aa:	1c5a      	adds	r2, r3, #1
    66ac:	60ba      	str	r2, [r7, #8]
    66ae:	883a      	ldrh	r2, [r7, #0]
    66b0:	b2d2      	uxtb	r2, r2
    66b2:	701a      	strb	r2, [r3, #0]
    66b4:	68bb      	ldr	r3, [r7, #8]
    66b6:	1c5a      	adds	r2, r3, #1
    66b8:	60ba      	str	r2, [r7, #8]
    66ba:	883a      	ldrh	r2, [r7, #0]
    66bc:	0a12      	lsrs	r2, r2, #8
    66be:	b292      	uxth	r2, r2
    66c0:	b2d2      	uxtb	r2, r2
    66c2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    66c4:	68bb      	ldr	r3, [r7, #8]
    66c6:	1c5a      	adds	r2, r3, #1
    66c8:	60ba      	str	r2, [r7, #8]
    66ca:	8c3a      	ldrh	r2, [r7, #32]
    66cc:	b2d2      	uxtb	r2, r2
    66ce:	701a      	strb	r2, [r3, #0]
    66d0:	68bb      	ldr	r3, [r7, #8]
    66d2:	1c5a      	adds	r2, r3, #1
    66d4:	60ba      	str	r2, [r7, #8]
    66d6:	8c3a      	ldrh	r2, [r7, #32]
    66d8:	0a12      	lsrs	r2, r2, #8
    66da:	b292      	uxth	r2, r2
    66dc:	b2d2      	uxtb	r2, r2
    66de:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
    66e0:	68bb      	ldr	r3, [r7, #8]
    66e2:	1c5a      	adds	r2, r3, #1
    66e4:	60ba      	str	r2, [r7, #8]
    66e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    66e8:	b2d2      	uxtb	r2, r2
    66ea:	701a      	strb	r2, [r3, #0]
    66ec:	68bb      	ldr	r3, [r7, #8]
    66ee:	1c5a      	adds	r2, r3, #1
    66f0:	60ba      	str	r2, [r7, #8]
    66f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    66f4:	0a12      	lsrs	r2, r2, #8
    66f6:	b292      	uxth	r2, r2
    66f8:	b2d2      	uxtb	r2, r2
    66fa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
    66fc:	68bb      	ldr	r3, [r7, #8]
    66fe:	1c5a      	adds	r2, r3, #1
    6700:	60ba      	str	r2, [r7, #8]
    6702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6704:	b2d2      	uxtb	r2, r2
    6706:	701a      	strb	r2, [r3, #0]
    6708:	68bb      	ldr	r3, [r7, #8]
    670a:	1c5a      	adds	r2, r3, #1
    670c:	60ba      	str	r2, [r7, #8]
    670e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6710:	0a12      	lsrs	r2, r2, #8
    6712:	b292      	uxth	r2, r2
    6714:	b2d2      	uxtb	r2, r2
    6716:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6718:	68f8      	ldr	r0, [r7, #12]
    671a:	f7ff fe15 	bl	6348 <hciCmdSend>
  }
}
    671e:	bf00      	nop
    6720:	3714      	adds	r7, #20
    6722:	46bd      	mov	sp, r7
    6724:	bd90      	pop	{r4, r7, pc}

00006726 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
    6726:	b580      	push	{r7, lr}
    6728:	b084      	sub	sp, #16
    672a:	af00      	add	r7, sp, #0
    672c:	4603      	mov	r3, r0
    672e:	460a      	mov	r2, r1
    6730:	80fb      	strh	r3, [r7, #6]
    6732:	4613      	mov	r3, r2
    6734:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
    6736:	2103      	movs	r1, #3
    6738:	f242 0021 	movw	r0, #8225	; 0x2021
    673c:	f7ff fdd6 	bl	62ec <hciCmdAlloc>
    6740:	60f8      	str	r0, [r7, #12]
    6742:	68fb      	ldr	r3, [r7, #12]
    6744:	2b00      	cmp	r3, #0
    6746:	d018      	beq.n	677a <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6748:	68fb      	ldr	r3, [r7, #12]
    674a:	3303      	adds	r3, #3
    674c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    674e:	68bb      	ldr	r3, [r7, #8]
    6750:	1c5a      	adds	r2, r3, #1
    6752:	60ba      	str	r2, [r7, #8]
    6754:	88fa      	ldrh	r2, [r7, #6]
    6756:	b2d2      	uxtb	r2, r2
    6758:	701a      	strb	r2, [r3, #0]
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	1c5a      	adds	r2, r3, #1
    675e:	60ba      	str	r2, [r7, #8]
    6760:	88fa      	ldrh	r2, [r7, #6]
    6762:	0a12      	lsrs	r2, r2, #8
    6764:	b292      	uxth	r2, r2
    6766:	b2d2      	uxtb	r2, r2
    6768:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    676a:	68bb      	ldr	r3, [r7, #8]
    676c:	1c5a      	adds	r2, r3, #1
    676e:	60ba      	str	r2, [r7, #8]
    6770:	797a      	ldrb	r2, [r7, #5]
    6772:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6774:	68f8      	ldr	r0, [r7, #12]
    6776:	f7ff fde7 	bl	6348 <hciCmdSend>
  }
}
    677a:	bf00      	nop
    677c:	3710      	adds	r7, #16
    677e:	46bd      	mov	sp, r7
    6780:	bd80      	pop	{r7, pc}

00006782 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
    6782:	b580      	push	{r7, lr}
    6784:	b084      	sub	sp, #16
    6786:	af00      	add	r7, sp, #0
    6788:	4603      	mov	r3, r0
    678a:	80fb      	strh	r3, [r7, #6]
    678c:	460b      	mov	r3, r1
    678e:	80bb      	strh	r3, [r7, #4]
    6790:	4613      	mov	r3, r2
    6792:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
    6794:	2106      	movs	r1, #6
    6796:	f242 0022 	movw	r0, #8226	; 0x2022
    679a:	f7ff fda7 	bl	62ec <hciCmdAlloc>
    679e:	60f8      	str	r0, [r7, #12]
    67a0:	68fb      	ldr	r3, [r7, #12]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d02f      	beq.n	6806 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    67a6:	68fb      	ldr	r3, [r7, #12]
    67a8:	3303      	adds	r3, #3
    67aa:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    67ac:	68bb      	ldr	r3, [r7, #8]
    67ae:	1c5a      	adds	r2, r3, #1
    67b0:	60ba      	str	r2, [r7, #8]
    67b2:	88fa      	ldrh	r2, [r7, #6]
    67b4:	b2d2      	uxtb	r2, r2
    67b6:	701a      	strb	r2, [r3, #0]
    67b8:	68bb      	ldr	r3, [r7, #8]
    67ba:	1c5a      	adds	r2, r3, #1
    67bc:	60ba      	str	r2, [r7, #8]
    67be:	88fa      	ldrh	r2, [r7, #6]
    67c0:	0a12      	lsrs	r2, r2, #8
    67c2:	b292      	uxth	r2, r2
    67c4:	b2d2      	uxtb	r2, r2
    67c6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
    67c8:	68bb      	ldr	r3, [r7, #8]
    67ca:	1c5a      	adds	r2, r3, #1
    67cc:	60ba      	str	r2, [r7, #8]
    67ce:	88ba      	ldrh	r2, [r7, #4]
    67d0:	b2d2      	uxtb	r2, r2
    67d2:	701a      	strb	r2, [r3, #0]
    67d4:	68bb      	ldr	r3, [r7, #8]
    67d6:	1c5a      	adds	r2, r3, #1
    67d8:	60ba      	str	r2, [r7, #8]
    67da:	88ba      	ldrh	r2, [r7, #4]
    67dc:	0a12      	lsrs	r2, r2, #8
    67de:	b292      	uxth	r2, r2
    67e0:	b2d2      	uxtb	r2, r2
    67e2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
    67e4:	68bb      	ldr	r3, [r7, #8]
    67e6:	1c5a      	adds	r2, r3, #1
    67e8:	60ba      	str	r2, [r7, #8]
    67ea:	887a      	ldrh	r2, [r7, #2]
    67ec:	b2d2      	uxtb	r2, r2
    67ee:	701a      	strb	r2, [r3, #0]
    67f0:	68bb      	ldr	r3, [r7, #8]
    67f2:	1c5a      	adds	r2, r3, #1
    67f4:	60ba      	str	r2, [r7, #8]
    67f6:	887a      	ldrh	r2, [r7, #2]
    67f8:	0a12      	lsrs	r2, r2, #8
    67fa:	b292      	uxth	r2, r2
    67fc:	b2d2      	uxtb	r2, r2
    67fe:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6800:	68f8      	ldr	r0, [r7, #12]
    6802:	f7ff fda1 	bl	6348 <hciCmdSend>
  }
}
    6806:	bf00      	nop
    6808:	3710      	adds	r7, #16
    680a:	46bd      	mov	sp, r7
    680c:	bd80      	pop	{r7, pc}

0000680e <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
    680e:	b580      	push	{r7, lr}
    6810:	b084      	sub	sp, #16
    6812:	af00      	add	r7, sp, #0
    6814:	4603      	mov	r3, r0
    6816:	460a      	mov	r2, r1
    6818:	80fb      	strh	r3, [r7, #6]
    681a:	4613      	mov	r3, r2
    681c:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
    681e:	2104      	movs	r1, #4
    6820:	f242 0024 	movw	r0, #8228	; 0x2024
    6824:	f7ff fd62 	bl	62ec <hciCmdAlloc>
    6828:	60f8      	str	r0, [r7, #12]
    682a:	68fb      	ldr	r3, [r7, #12]
    682c:	2b00      	cmp	r3, #0
    682e:	d021      	beq.n	6874 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6830:	68fb      	ldr	r3, [r7, #12]
    6832:	3303      	adds	r3, #3
    6834:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
    6836:	68bb      	ldr	r3, [r7, #8]
    6838:	1c5a      	adds	r2, r3, #1
    683a:	60ba      	str	r2, [r7, #8]
    683c:	88fa      	ldrh	r2, [r7, #6]
    683e:	b2d2      	uxtb	r2, r2
    6840:	701a      	strb	r2, [r3, #0]
    6842:	68bb      	ldr	r3, [r7, #8]
    6844:	1c5a      	adds	r2, r3, #1
    6846:	60ba      	str	r2, [r7, #8]
    6848:	88fa      	ldrh	r2, [r7, #6]
    684a:	0a12      	lsrs	r2, r2, #8
    684c:	b292      	uxth	r2, r2
    684e:	b2d2      	uxtb	r2, r2
    6850:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
    6852:	68bb      	ldr	r3, [r7, #8]
    6854:	1c5a      	adds	r2, r3, #1
    6856:	60ba      	str	r2, [r7, #8]
    6858:	88ba      	ldrh	r2, [r7, #4]
    685a:	b2d2      	uxtb	r2, r2
    685c:	701a      	strb	r2, [r3, #0]
    685e:	68bb      	ldr	r3, [r7, #8]
    6860:	1c5a      	adds	r2, r3, #1
    6862:	60ba      	str	r2, [r7, #8]
    6864:	88ba      	ldrh	r2, [r7, #4]
    6866:	0a12      	lsrs	r2, r2, #8
    6868:	b292      	uxth	r2, r2
    686a:	b2d2      	uxtb	r2, r2
    686c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    686e:	68f8      	ldr	r0, [r7, #12]
    6870:	f7ff fd6a 	bl	6348 <hciCmdSend>
  }
}
    6874:	bf00      	nop
    6876:	3710      	adds	r7, #16
    6878:	46bd      	mov	sp, r7
    687a:	bd80      	pop	{r7, pc}

0000687c <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
    687c:	b580      	push	{r7, lr}
    687e:	b082      	sub	sp, #8
    6880:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
    6882:	2100      	movs	r1, #0
    6884:	f242 0025 	movw	r0, #8229	; 0x2025
    6888:	f7ff fd30 	bl	62ec <hciCmdAlloc>
    688c:	6078      	str	r0, [r7, #4]
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	2b00      	cmp	r3, #0
    6892:	d002      	beq.n	689a <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
    6894:	6878      	ldr	r0, [r7, #4]
    6896:	f7ff fd57 	bl	6348 <hciCmdSend>
  }
}
    689a:	bf00      	nop
    689c:	3708      	adds	r7, #8
    689e:	46bd      	mov	sp, r7
    68a0:	bd80      	pop	{r7, pc}

000068a2 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
    68a2:	b580      	push	{r7, lr}
    68a4:	b084      	sub	sp, #16
    68a6:	af00      	add	r7, sp, #0
    68a8:	6078      	str	r0, [r7, #4]
    68aa:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
    68ac:	2140      	movs	r1, #64	; 0x40
    68ae:	f242 0026 	movw	r0, #8230	; 0x2026
    68b2:	f7ff fd1b 	bl	62ec <hciCmdAlloc>
    68b6:	60f8      	str	r0, [r7, #12]
    68b8:	68fb      	ldr	r3, [r7, #12]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d011      	beq.n	68e2 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    68be:	68fb      	ldr	r3, [r7, #12]
    68c0:	3303      	adds	r3, #3
    68c2:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
    68c4:	2220      	movs	r2, #32
    68c6:	6879      	ldr	r1, [r7, #4]
    68c8:	68b8      	ldr	r0, [r7, #8]
    68ca:	f00a fdd6 	bl	1147a <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
    68ce:	68bb      	ldr	r3, [r7, #8]
    68d0:	3320      	adds	r3, #32
    68d2:	2220      	movs	r2, #32
    68d4:	6839      	ldr	r1, [r7, #0]
    68d6:	4618      	mov	r0, r3
    68d8:	f00a fdcf 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    68dc:	68f8      	ldr	r0, [r7, #12]
    68de:	f7ff fd33 	bl	6348 <hciCmdSend>
  }
}
    68e2:	bf00      	nop
    68e4:	3710      	adds	r7, #16
    68e6:	46bd      	mov	sp, r7
    68e8:	bd80      	pop	{r7, pc}

000068ea <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
    68ea:	b580      	push	{r7, lr}
    68ec:	b082      	sub	sp, #8
    68ee:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
    68f0:	2100      	movs	r1, #0
    68f2:	f242 002f 	movw	r0, #8239	; 0x202f
    68f6:	f7ff fcf9 	bl	62ec <hciCmdAlloc>
    68fa:	6078      	str	r0, [r7, #4]
    68fc:	687b      	ldr	r3, [r7, #4]
    68fe:	2b00      	cmp	r3, #0
    6900:	d002      	beq.n	6908 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
    6902:	6878      	ldr	r0, [r7, #4]
    6904:	f7ff fd20 	bl	6348 <hciCmdSend>
  }
}
    6908:	bf00      	nop
    690a:	3708      	adds	r7, #8
    690c:	46bd      	mov	sp, r7
    690e:	bd80      	pop	{r7, pc}

00006910 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
    6910:	b580      	push	{r7, lr}
    6912:	b084      	sub	sp, #16
    6914:	af00      	add	r7, sp, #0
    6916:	6078      	str	r0, [r7, #4]
    6918:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
    691a:	2120      	movs	r1, #32
    691c:	f242 0017 	movw	r0, #8215	; 0x2017
    6920:	f7ff fce4 	bl	62ec <hciCmdAlloc>
    6924:	60f8      	str	r0, [r7, #12]
    6926:	68fb      	ldr	r3, [r7, #12]
    6928:	2b00      	cmp	r3, #0
    692a:	d012      	beq.n	6952 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    692c:	68fb      	ldr	r3, [r7, #12]
    692e:	3303      	adds	r3, #3
    6930:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
    6932:	2210      	movs	r2, #16
    6934:	6879      	ldr	r1, [r7, #4]
    6936:	68b8      	ldr	r0, [r7, #8]
    6938:	f00a fd9f 	bl	1147a <memcpy>
    p += HCI_KEY_LEN;
    693c:	68bb      	ldr	r3, [r7, #8]
    693e:	3310      	adds	r3, #16
    6940:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
    6942:	2210      	movs	r2, #16
    6944:	6839      	ldr	r1, [r7, #0]
    6946:	68b8      	ldr	r0, [r7, #8]
    6948:	f00a fd97 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    694c:	68f8      	ldr	r0, [r7, #12]
    694e:	f7ff fcfb 	bl	6348 <hciCmdSend>
  }
}
    6952:	bf00      	nop
    6954:	3710      	adds	r7, #16
    6956:	46bd      	mov	sp, r7
    6958:	bd80      	pop	{r7, pc}

0000695a <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
    695a:	b580      	push	{r7, lr}
    695c:	b084      	sub	sp, #16
    695e:	af00      	add	r7, sp, #0
    6960:	4603      	mov	r3, r0
    6962:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
    6964:	2102      	movs	r1, #2
    6966:	f242 001b 	movw	r0, #8219	; 0x201b
    696a:	f7ff fcbf 	bl	62ec <hciCmdAlloc>
    696e:	60f8      	str	r0, [r7, #12]
    6970:	68fb      	ldr	r3, [r7, #12]
    6972:	2b00      	cmp	r3, #0
    6974:	d013      	beq.n	699e <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6976:	68fb      	ldr	r3, [r7, #12]
    6978:	3303      	adds	r3, #3
    697a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    697c:	68bb      	ldr	r3, [r7, #8]
    697e:	1c5a      	adds	r2, r3, #1
    6980:	60ba      	str	r2, [r7, #8]
    6982:	88fa      	ldrh	r2, [r7, #6]
    6984:	b2d2      	uxtb	r2, r2
    6986:	701a      	strb	r2, [r3, #0]
    6988:	68bb      	ldr	r3, [r7, #8]
    698a:	1c5a      	adds	r2, r3, #1
    698c:	60ba      	str	r2, [r7, #8]
    698e:	88fa      	ldrh	r2, [r7, #6]
    6990:	0a12      	lsrs	r2, r2, #8
    6992:	b292      	uxth	r2, r2
    6994:	b2d2      	uxtb	r2, r2
    6996:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6998:	68f8      	ldr	r0, [r7, #12]
    699a:	f7ff fcd5 	bl	6348 <hciCmdSend>
  }
}
    699e:	bf00      	nop
    69a0:	3710      	adds	r7, #16
    69a2:	46bd      	mov	sp, r7
    69a4:	bd80      	pop	{r7, pc}

000069a6 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
    69a6:	b580      	push	{r7, lr}
    69a8:	b084      	sub	sp, #16
    69aa:	af00      	add	r7, sp, #0
    69ac:	4603      	mov	r3, r0
    69ae:	6039      	str	r1, [r7, #0]
    69b0:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
    69b2:	2112      	movs	r1, #18
    69b4:	f242 001a 	movw	r0, #8218	; 0x201a
    69b8:	f7ff fc98 	bl	62ec <hciCmdAlloc>
    69bc:	60f8      	str	r0, [r7, #12]
    69be:	68fb      	ldr	r3, [r7, #12]
    69c0:	2b00      	cmp	r3, #0
    69c2:	d018      	beq.n	69f6 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    69c4:	68fb      	ldr	r3, [r7, #12]
    69c6:	3303      	adds	r3, #3
    69c8:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    69ca:	68bb      	ldr	r3, [r7, #8]
    69cc:	1c5a      	adds	r2, r3, #1
    69ce:	60ba      	str	r2, [r7, #8]
    69d0:	88fa      	ldrh	r2, [r7, #6]
    69d2:	b2d2      	uxtb	r2, r2
    69d4:	701a      	strb	r2, [r3, #0]
    69d6:	68bb      	ldr	r3, [r7, #8]
    69d8:	1c5a      	adds	r2, r3, #1
    69da:	60ba      	str	r2, [r7, #8]
    69dc:	88fa      	ldrh	r2, [r7, #6]
    69de:	0a12      	lsrs	r2, r2, #8
    69e0:	b292      	uxth	r2, r2
    69e2:	b2d2      	uxtb	r2, r2
    69e4:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    69e6:	2210      	movs	r2, #16
    69e8:	6839      	ldr	r1, [r7, #0]
    69ea:	68b8      	ldr	r0, [r7, #8]
    69ec:	f00a fd45 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    69f0:	68f8      	ldr	r0, [r7, #12]
    69f2:	f7ff fca9 	bl	6348 <hciCmdSend>
  }
}
    69f6:	bf00      	nop
    69f8:	3710      	adds	r7, #16
    69fa:	46bd      	mov	sp, r7
    69fc:	bd80      	pop	{r7, pc}

000069fe <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
    69fe:	b580      	push	{r7, lr}
    6a00:	b082      	sub	sp, #8
    6a02:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
    6a04:	2100      	movs	r1, #0
    6a06:	f242 0018 	movw	r0, #8216	; 0x2018
    6a0a:	f7ff fc6f 	bl	62ec <hciCmdAlloc>
    6a0e:	6078      	str	r0, [r7, #4]
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	2b00      	cmp	r3, #0
    6a14:	d002      	beq.n	6a1c <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6a16:	6878      	ldr	r0, [r7, #4]
    6a18:	f7ff fc96 	bl	6348 <hciCmdSend>
  }
}
    6a1c:	bf00      	nop
    6a1e:	3708      	adds	r7, #8
    6a20:	46bd      	mov	sp, r7
    6a22:	bd80      	pop	{r7, pc}

00006a24 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
    6a24:	b580      	push	{r7, lr}
    6a26:	b082      	sub	sp, #8
    6a28:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
    6a2a:	2100      	movs	r1, #0
    6a2c:	f242 0002 	movw	r0, #8194	; 0x2002
    6a30:	f7ff fc5c 	bl	62ec <hciCmdAlloc>
    6a34:	6078      	str	r0, [r7, #4]
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d002      	beq.n	6a42 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6a3c:	6878      	ldr	r0, [r7, #4]
    6a3e:	f7ff fc83 	bl	6348 <hciCmdSend>
  }
}
    6a42:	bf00      	nop
    6a44:	3708      	adds	r7, #8
    6a46:	46bd      	mov	sp, r7
    6a48:	bd80      	pop	{r7, pc}

00006a4a <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
    6a4a:	b580      	push	{r7, lr}
    6a4c:	b082      	sub	sp, #8
    6a4e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
    6a50:	2100      	movs	r1, #0
    6a52:	f242 0003 	movw	r0, #8195	; 0x2003
    6a56:	f7ff fc49 	bl	62ec <hciCmdAlloc>
    6a5a:	6078      	str	r0, [r7, #4]
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d002      	beq.n	6a68 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6a62:	6878      	ldr	r0, [r7, #4]
    6a64:	f7ff fc70 	bl	6348 <hciCmdSend>
  }
}
    6a68:	bf00      	nop
    6a6a:	3708      	adds	r7, #8
    6a6c:	46bd      	mov	sp, r7
    6a6e:	bd80      	pop	{r7, pc}

00006a70 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	b084      	sub	sp, #16
    6a74:	af00      	add	r7, sp, #0
    6a76:	4603      	mov	r3, r0
    6a78:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
    6a7a:	2102      	movs	r1, #2
    6a7c:	f242 0016 	movw	r0, #8214	; 0x2016
    6a80:	f7ff fc34 	bl	62ec <hciCmdAlloc>
    6a84:	60f8      	str	r0, [r7, #12]
    6a86:	68fb      	ldr	r3, [r7, #12]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d013      	beq.n	6ab4 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6a8c:	68fb      	ldr	r3, [r7, #12]
    6a8e:	3303      	adds	r3, #3
    6a90:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6a92:	68bb      	ldr	r3, [r7, #8]
    6a94:	1c5a      	adds	r2, r3, #1
    6a96:	60ba      	str	r2, [r7, #8]
    6a98:	88fa      	ldrh	r2, [r7, #6]
    6a9a:	b2d2      	uxtb	r2, r2
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	68bb      	ldr	r3, [r7, #8]
    6aa0:	1c5a      	adds	r2, r3, #1
    6aa2:	60ba      	str	r2, [r7, #8]
    6aa4:	88fa      	ldrh	r2, [r7, #6]
    6aa6:	0a12      	lsrs	r2, r2, #8
    6aa8:	b292      	uxth	r2, r2
    6aaa:	b2d2      	uxtb	r2, r2
    6aac:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6aae:	68f8      	ldr	r0, [r7, #12]
    6ab0:	f7ff fc4a 	bl	6348 <hciCmdSend>
  }
}
    6ab4:	bf00      	nop
    6ab6:	3710      	adds	r7, #16
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd80      	pop	{r7, pc}

00006abc <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
    6abc:	b580      	push	{r7, lr}
    6abe:	b082      	sub	sp, #8
    6ac0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
    6ac2:	2100      	movs	r1, #0
    6ac4:	f242 001c 	movw	r0, #8220	; 0x201c
    6ac8:	f7ff fc10 	bl	62ec <hciCmdAlloc>
    6acc:	6078      	str	r0, [r7, #4]
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d002      	beq.n	6ada <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6ad4:	6878      	ldr	r0, [r7, #4]
    6ad6:	f7ff fc37 	bl	6348 <hciCmdSend>
  }
}
    6ada:	bf00      	nop
    6adc:	3708      	adds	r7, #8
    6ade:	46bd      	mov	sp, r7
    6ae0:	bd80      	pop	{r7, pc}

00006ae2 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
    6ae2:	b580      	push	{r7, lr}
    6ae4:	b082      	sub	sp, #8
    6ae6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
    6ae8:	2100      	movs	r1, #0
    6aea:	f242 000f 	movw	r0, #8207	; 0x200f
    6aee:	f7ff fbfd 	bl	62ec <hciCmdAlloc>
    6af2:	6078      	str	r0, [r7, #4]
    6af4:	687b      	ldr	r3, [r7, #4]
    6af6:	2b00      	cmp	r3, #0
    6af8:	d002      	beq.n	6b00 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6afa:	6878      	ldr	r0, [r7, #4]
    6afc:	f7ff fc24 	bl	6348 <hciCmdSend>
  }
}
    6b00:	bf00      	nop
    6b02:	3708      	adds	r7, #8
    6b04:	46bd      	mov	sp, r7
    6b06:	bd80      	pop	{r7, pc}

00006b08 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b084      	sub	sp, #16
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	4603      	mov	r3, r0
    6b10:	6039      	str	r1, [r7, #0]
    6b12:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
    6b14:	2107      	movs	r1, #7
    6b16:	f242 0012 	movw	r0, #8210	; 0x2012
    6b1a:	f7ff fbe7 	bl	62ec <hciCmdAlloc>
    6b1e:	60f8      	str	r0, [r7, #12]
    6b20:	68fb      	ldr	r3, [r7, #12]
    6b22:	2b00      	cmp	r3, #0
    6b24:	d011      	beq.n	6b4a <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6b26:	68fb      	ldr	r3, [r7, #12]
    6b28:	3303      	adds	r3, #3
    6b2a:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    6b2c:	68bb      	ldr	r3, [r7, #8]
    6b2e:	1c5a      	adds	r2, r3, #1
    6b30:	60ba      	str	r2, [r7, #8]
    6b32:	79fa      	ldrb	r2, [r7, #7]
    6b34:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    6b36:	6839      	ldr	r1, [r7, #0]
    6b38:	68b8      	ldr	r0, [r7, #8]
    6b3a:	f006 fb65 	bl	d208 <BdaCpy>
    6b3e:	68bb      	ldr	r3, [r7, #8]
    6b40:	3306      	adds	r3, #6
    6b42:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    6b44:	68f8      	ldr	r0, [r7, #12]
    6b46:	f7ff fbff 	bl	6348 <hciCmdSend>
  }
}
    6b4a:	bf00      	nop
    6b4c:	3710      	adds	r7, #16
    6b4e:	46bd      	mov	sp, r7
    6b50:	bd80      	pop	{r7, pc}

00006b52 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
    6b52:	b580      	push	{r7, lr}
    6b54:	b084      	sub	sp, #16
    6b56:	af00      	add	r7, sp, #0
    6b58:	4603      	mov	r3, r0
    6b5a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
    6b5c:	2101      	movs	r1, #1
    6b5e:	f242 000a 	movw	r0, #8202	; 0x200a
    6b62:	f7ff fbc3 	bl	62ec <hciCmdAlloc>
    6b66:	60f8      	str	r0, [r7, #12]
    6b68:	68fb      	ldr	r3, [r7, #12]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d00a      	beq.n	6b84 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6b6e:	68fb      	ldr	r3, [r7, #12]
    6b70:	3303      	adds	r3, #3
    6b72:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
    6b74:	68bb      	ldr	r3, [r7, #8]
    6b76:	1c5a      	adds	r2, r3, #1
    6b78:	60ba      	str	r2, [r7, #8]
    6b7a:	79fa      	ldrb	r2, [r7, #7]
    6b7c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6b7e:	68f8      	ldr	r0, [r7, #12]
    6b80:	f7ff fbe2 	bl	6348 <hciCmdSend>
  }
}
    6b84:	bf00      	nop
    6b86:	3710      	adds	r7, #16
    6b88:	46bd      	mov	sp, r7
    6b8a:	bd80      	pop	{r7, pc}

00006b8c <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
    6b8c:	b580      	push	{r7, lr}
    6b8e:	b084      	sub	sp, #16
    6b90:	af00      	add	r7, sp, #0
    6b92:	4603      	mov	r3, r0
    6b94:	6039      	str	r1, [r7, #0]
    6b96:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
    6b98:	2120      	movs	r1, #32
    6b9a:	f242 0008 	movw	r0, #8200	; 0x2008
    6b9e:	f7ff fba5 	bl	62ec <hciCmdAlloc>
    6ba2:	60f8      	str	r0, [r7, #12]
    6ba4:	68fb      	ldr	r3, [r7, #12]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d01c      	beq.n	6be4 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6baa:	68fb      	ldr	r3, [r7, #12]
    6bac:	3303      	adds	r3, #3
    6bae:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
    6bb0:	68bb      	ldr	r3, [r7, #8]
    6bb2:	1c5a      	adds	r2, r3, #1
    6bb4:	60ba      	str	r2, [r7, #8]
    6bb6:	79fa      	ldrb	r2, [r7, #7]
    6bb8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    6bba:	79fb      	ldrb	r3, [r7, #7]
    6bbc:	461a      	mov	r2, r3
    6bbe:	6839      	ldr	r1, [r7, #0]
    6bc0:	68b8      	ldr	r0, [r7, #8]
    6bc2:	f00a fc5a 	bl	1147a <memcpy>
    p += len;
    6bc6:	79fb      	ldrb	r3, [r7, #7]
    6bc8:	68ba      	ldr	r2, [r7, #8]
    6bca:	4413      	add	r3, r2
    6bcc:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
    6bce:	79fb      	ldrb	r3, [r7, #7]
    6bd0:	f1c3 031f 	rsb	r3, r3, #31
    6bd4:	461a      	mov	r2, r3
    6bd6:	2100      	movs	r1, #0
    6bd8:	68b8      	ldr	r0, [r7, #8]
    6bda:	f00a fc73 	bl	114c4 <memset>
    hciCmdSend(pBuf);
    6bde:	68f8      	ldr	r0, [r7, #12]
    6be0:	f7ff fbb2 	bl	6348 <hciCmdSend>
  }
}
    6be4:	bf00      	nop
    6be6:	3710      	adds	r7, #16
    6be8:	46bd      	mov	sp, r7
    6bea:	bd80      	pop	{r7, pc}

00006bec <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
    6bec:	b590      	push	{r4, r7, lr}
    6bee:	b085      	sub	sp, #20
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	4604      	mov	r4, r0
    6bf4:	4608      	mov	r0, r1
    6bf6:	4611      	mov	r1, r2
    6bf8:	461a      	mov	r2, r3
    6bfa:	4623      	mov	r3, r4
    6bfc:	80fb      	strh	r3, [r7, #6]
    6bfe:	4603      	mov	r3, r0
    6c00:	80bb      	strh	r3, [r7, #4]
    6c02:	460b      	mov	r3, r1
    6c04:	70fb      	strb	r3, [r7, #3]
    6c06:	4613      	mov	r3, r2
    6c08:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
    6c0a:	210f      	movs	r1, #15
    6c0c:	f242 0006 	movw	r0, #8198	; 0x2006
    6c10:	f7ff fb6c 	bl	62ec <hciCmdAlloc>
    6c14:	60b8      	str	r0, [r7, #8]
    6c16:	68bb      	ldr	r3, [r7, #8]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d04c      	beq.n	6cb6 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6c1c:	68bb      	ldr	r3, [r7, #8]
    6c1e:	3303      	adds	r3, #3
    6c20:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
    6c22:	68fb      	ldr	r3, [r7, #12]
    6c24:	1c5a      	adds	r2, r3, #1
    6c26:	60fa      	str	r2, [r7, #12]
    6c28:	88fa      	ldrh	r2, [r7, #6]
    6c2a:	b2d2      	uxtb	r2, r2
    6c2c:	701a      	strb	r2, [r3, #0]
    6c2e:	68fb      	ldr	r3, [r7, #12]
    6c30:	1c5a      	adds	r2, r3, #1
    6c32:	60fa      	str	r2, [r7, #12]
    6c34:	88fa      	ldrh	r2, [r7, #6]
    6c36:	0a12      	lsrs	r2, r2, #8
    6c38:	b292      	uxth	r2, r2
    6c3a:	b2d2      	uxtb	r2, r2
    6c3c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
    6c3e:	68fb      	ldr	r3, [r7, #12]
    6c40:	1c5a      	adds	r2, r3, #1
    6c42:	60fa      	str	r2, [r7, #12]
    6c44:	88ba      	ldrh	r2, [r7, #4]
    6c46:	b2d2      	uxtb	r2, r2
    6c48:	701a      	strb	r2, [r3, #0]
    6c4a:	68fb      	ldr	r3, [r7, #12]
    6c4c:	1c5a      	adds	r2, r3, #1
    6c4e:	60fa      	str	r2, [r7, #12]
    6c50:	88ba      	ldrh	r2, [r7, #4]
    6c52:	0a12      	lsrs	r2, r2, #8
    6c54:	b292      	uxth	r2, r2
    6c56:	b2d2      	uxtb	r2, r2
    6c58:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
    6c5a:	68fb      	ldr	r3, [r7, #12]
    6c5c:	1c5a      	adds	r2, r3, #1
    6c5e:	60fa      	str	r2, [r7, #12]
    6c60:	78fa      	ldrb	r2, [r7, #3]
    6c62:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	1c5a      	adds	r2, r3, #1
    6c68:	60fa      	str	r2, [r7, #12]
    6c6a:	78ba      	ldrb	r2, [r7, #2]
    6c6c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
    6c6e:	68fb      	ldr	r3, [r7, #12]
    6c70:	1c5a      	adds	r2, r3, #1
    6c72:	60fa      	str	r2, [r7, #12]
    6c74:	f897 2020 	ldrb.w	r2, [r7, #32]
    6c78:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
    6c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d007      	beq.n	6c90 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
    6c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c82:	68f8      	ldr	r0, [r7, #12]
    6c84:	f006 fac0 	bl	d208 <BdaCpy>
    6c88:	68fb      	ldr	r3, [r7, #12]
    6c8a:	3306      	adds	r3, #6
    6c8c:	60fb      	str	r3, [r7, #12]
    6c8e:	e003      	b.n	6c98 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
    6c90:	68f8      	ldr	r0, [r7, #12]
    6c92:	f006 fadb 	bl	d24c <BdaClr>
    6c96:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
    6c98:	68fb      	ldr	r3, [r7, #12]
    6c9a:	1c5a      	adds	r2, r3, #1
    6c9c:	60fa      	str	r2, [r7, #12]
    6c9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    6ca2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
    6ca4:	68fb      	ldr	r3, [r7, #12]
    6ca6:	1c5a      	adds	r2, r3, #1
    6ca8:	60fa      	str	r2, [r7, #12]
    6caa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    6cae:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6cb0:	68b8      	ldr	r0, [r7, #8]
    6cb2:	f7ff fb49 	bl	6348 <hciCmdSend>
  }
}
    6cb6:	bf00      	nop
    6cb8:	3714      	adds	r7, #20
    6cba:	46bd      	mov	sp, r7
    6cbc:	bd90      	pop	{r4, r7, pc}

00006cbe <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
    6cbe:	b580      	push	{r7, lr}
    6cc0:	b084      	sub	sp, #16
    6cc2:	af00      	add	r7, sp, #0
    6cc4:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
    6cc6:	2108      	movs	r1, #8
    6cc8:	f242 0001 	movw	r0, #8193	; 0x2001
    6ccc:	f7ff fb0e 	bl	62ec <hciCmdAlloc>
    6cd0:	60f8      	str	r0, [r7, #12]
    6cd2:	68fb      	ldr	r3, [r7, #12]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d00a      	beq.n	6cee <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6cd8:	68fb      	ldr	r3, [r7, #12]
    6cda:	3303      	adds	r3, #3
    6cdc:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
    6cde:	2208      	movs	r2, #8
    6ce0:	6879      	ldr	r1, [r7, #4]
    6ce2:	68b8      	ldr	r0, [r7, #8]
    6ce4:	f00a fbc9 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    6ce8:	68f8      	ldr	r0, [r7, #12]
    6cea:	f7ff fb2d 	bl	6348 <hciCmdSend>
  }
}
    6cee:	bf00      	nop
    6cf0:	3710      	adds	r7, #16
    6cf2:	46bd      	mov	sp, r7
    6cf4:	bd80      	pop	{r7, pc}

00006cf6 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
    6cf6:	b580      	push	{r7, lr}
    6cf8:	b084      	sub	sp, #16
    6cfa:	af00      	add	r7, sp, #0
    6cfc:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
    6cfe:	2106      	movs	r1, #6
    6d00:	f242 0005 	movw	r0, #8197	; 0x2005
    6d04:	f7ff faf2 	bl	62ec <hciCmdAlloc>
    6d08:	60f8      	str	r0, [r7, #12]
    6d0a:	68fb      	ldr	r3, [r7, #12]
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d00c      	beq.n	6d2a <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6d10:	68fb      	ldr	r3, [r7, #12]
    6d12:	3303      	adds	r3, #3
    6d14:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
    6d16:	6879      	ldr	r1, [r7, #4]
    6d18:	68b8      	ldr	r0, [r7, #8]
    6d1a:	f006 fa75 	bl	d208 <BdaCpy>
    6d1e:	68bb      	ldr	r3, [r7, #8]
    6d20:	3306      	adds	r3, #6
    6d22:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    6d24:	68f8      	ldr	r0, [r7, #12]
    6d26:	f7ff fb0f 	bl	6348 <hciCmdSend>
  }
}
    6d2a:	bf00      	nop
    6d2c:	3710      	adds	r7, #16
    6d2e:	46bd      	mov	sp, r7
    6d30:	bd80      	pop	{r7, pc}

00006d32 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
    6d32:	b580      	push	{r7, lr}
    6d34:	b084      	sub	sp, #16
    6d36:	af00      	add	r7, sp, #0
    6d38:	4603      	mov	r3, r0
    6d3a:	6039      	str	r1, [r7, #0]
    6d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
    6d3e:	2120      	movs	r1, #32
    6d40:	f242 0009 	movw	r0, #8201	; 0x2009
    6d44:	f7ff fad2 	bl	62ec <hciCmdAlloc>
    6d48:	60f8      	str	r0, [r7, #12]
    6d4a:	68fb      	ldr	r3, [r7, #12]
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d01c      	beq.n	6d8a <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6d50:	68fb      	ldr	r3, [r7, #12]
    6d52:	3303      	adds	r3, #3
    6d54:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
    6d56:	68bb      	ldr	r3, [r7, #8]
    6d58:	1c5a      	adds	r2, r3, #1
    6d5a:	60ba      	str	r2, [r7, #8]
    6d5c:	79fa      	ldrb	r2, [r7, #7]
    6d5e:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    6d60:	79fb      	ldrb	r3, [r7, #7]
    6d62:	461a      	mov	r2, r3
    6d64:	6839      	ldr	r1, [r7, #0]
    6d66:	68b8      	ldr	r0, [r7, #8]
    6d68:	f00a fb87 	bl	1147a <memcpy>
    p += len;
    6d6c:	79fb      	ldrb	r3, [r7, #7]
    6d6e:	68ba      	ldr	r2, [r7, #8]
    6d70:	4413      	add	r3, r2
    6d72:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
    6d74:	79fb      	ldrb	r3, [r7, #7]
    6d76:	f1c3 031f 	rsb	r3, r3, #31
    6d7a:	461a      	mov	r2, r3
    6d7c:	2100      	movs	r1, #0
    6d7e:	68b8      	ldr	r0, [r7, #8]
    6d80:	f00a fba0 	bl	114c4 <memset>
    hciCmdSend(pBuf);
    6d84:	68f8      	ldr	r0, [r7, #12]
    6d86:	f7ff fadf 	bl	6348 <hciCmdSend>
  }
}
    6d8a:	bf00      	nop
    6d8c:	3710      	adds	r7, #16
    6d8e:	46bd      	mov	sp, r7
    6d90:	bd80      	pop	{r7, pc}

00006d92 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
    6d92:	b580      	push	{r7, lr}
    6d94:	b086      	sub	sp, #24
    6d96:	af00      	add	r7, sp, #0
    6d98:	60b9      	str	r1, [r7, #8]
    6d9a:	607b      	str	r3, [r7, #4]
    6d9c:	4603      	mov	r3, r0
    6d9e:	81fb      	strh	r3, [r7, #14]
    6da0:	4613      	mov	r3, r2
    6da2:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
    6da4:	211c      	movs	r1, #28
    6da6:	f242 0019 	movw	r0, #8217	; 0x2019
    6daa:	f7ff fa9f 	bl	62ec <hciCmdAlloc>
    6dae:	6178      	str	r0, [r7, #20]
    6db0:	697b      	ldr	r3, [r7, #20]
    6db2:	2b00      	cmp	r3, #0
    6db4:	d02e      	beq.n	6e14 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6db6:	697b      	ldr	r3, [r7, #20]
    6db8:	3303      	adds	r3, #3
    6dba:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
    6dbc:	693b      	ldr	r3, [r7, #16]
    6dbe:	1c5a      	adds	r2, r3, #1
    6dc0:	613a      	str	r2, [r7, #16]
    6dc2:	89fa      	ldrh	r2, [r7, #14]
    6dc4:	b2d2      	uxtb	r2, r2
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	693b      	ldr	r3, [r7, #16]
    6dca:	1c5a      	adds	r2, r3, #1
    6dcc:	613a      	str	r2, [r7, #16]
    6dce:	89fa      	ldrh	r2, [r7, #14]
    6dd0:	0a12      	lsrs	r2, r2, #8
    6dd2:	b292      	uxth	r2, r2
    6dd4:	b2d2      	uxtb	r2, r2
    6dd6:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
    6dd8:	2208      	movs	r2, #8
    6dda:	68b9      	ldr	r1, [r7, #8]
    6ddc:	6938      	ldr	r0, [r7, #16]
    6dde:	f00a fb4c 	bl	1147a <memcpy>
    p += HCI_RAND_LEN;
    6de2:	693b      	ldr	r3, [r7, #16]
    6de4:	3308      	adds	r3, #8
    6de6:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
    6de8:	693b      	ldr	r3, [r7, #16]
    6dea:	1c5a      	adds	r2, r3, #1
    6dec:	613a      	str	r2, [r7, #16]
    6dee:	89ba      	ldrh	r2, [r7, #12]
    6df0:	b2d2      	uxtb	r2, r2
    6df2:	701a      	strb	r2, [r3, #0]
    6df4:	693b      	ldr	r3, [r7, #16]
    6df6:	1c5a      	adds	r2, r3, #1
    6df8:	613a      	str	r2, [r7, #16]
    6dfa:	89ba      	ldrh	r2, [r7, #12]
    6dfc:	0a12      	lsrs	r2, r2, #8
    6dfe:	b292      	uxth	r2, r2
    6e00:	b2d2      	uxtb	r2, r2
    6e02:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    6e04:	2210      	movs	r2, #16
    6e06:	6879      	ldr	r1, [r7, #4]
    6e08:	6938      	ldr	r0, [r7, #16]
    6e0a:	f00a fb36 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    6e0e:	6978      	ldr	r0, [r7, #20]
    6e10:	f7ff fa9a 	bl	6348 <hciCmdSend>
  }
}
    6e14:	bf00      	nop
    6e16:	3718      	adds	r7, #24
    6e18:	46bd      	mov	sp, r7
    6e1a:	bd80      	pop	{r7, pc}

00006e1c <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b082      	sub	sp, #8
    6e20:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
    6e22:	2100      	movs	r1, #0
    6e24:	f241 0009 	movw	r0, #4105	; 0x1009
    6e28:	f7ff fa60 	bl	62ec <hciCmdAlloc>
    6e2c:	6078      	str	r0, [r7, #4]
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d002      	beq.n	6e3a <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6e34:	6878      	ldr	r0, [r7, #4]
    6e36:	f7ff fa87 	bl	6348 <hciCmdSend>
  }
}
    6e3a:	bf00      	nop
    6e3c:	3708      	adds	r7, #8
    6e3e:	46bd      	mov	sp, r7
    6e40:	bd80      	pop	{r7, pc}

00006e42 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
    6e42:	b580      	push	{r7, lr}
    6e44:	b084      	sub	sp, #16
    6e46:	af00      	add	r7, sp, #0
    6e48:	4603      	mov	r3, r0
    6e4a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
    6e4c:	2102      	movs	r1, #2
    6e4e:	f241 4005 	movw	r0, #5125	; 0x1405
    6e52:	f7ff fa4b 	bl	62ec <hciCmdAlloc>
    6e56:	60f8      	str	r0, [r7, #12]
    6e58:	68fb      	ldr	r3, [r7, #12]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d013      	beq.n	6e86 <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6e5e:	68fb      	ldr	r3, [r7, #12]
    6e60:	3303      	adds	r3, #3
    6e62:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6e64:	68bb      	ldr	r3, [r7, #8]
    6e66:	1c5a      	adds	r2, r3, #1
    6e68:	60ba      	str	r2, [r7, #8]
    6e6a:	88fa      	ldrh	r2, [r7, #6]
    6e6c:	b2d2      	uxtb	r2, r2
    6e6e:	701a      	strb	r2, [r3, #0]
    6e70:	68bb      	ldr	r3, [r7, #8]
    6e72:	1c5a      	adds	r2, r3, #1
    6e74:	60ba      	str	r2, [r7, #8]
    6e76:	88fa      	ldrh	r2, [r7, #6]
    6e78:	0a12      	lsrs	r2, r2, #8
    6e7a:	b292      	uxth	r2, r2
    6e7c:	b2d2      	uxtb	r2, r2
    6e7e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6e80:	68f8      	ldr	r0, [r7, #12]
    6e82:	f7ff fa61 	bl	6348 <hciCmdSend>
  }
}
    6e86:	bf00      	nop
    6e88:	3710      	adds	r7, #16
    6e8a:	46bd      	mov	sp, r7
    6e8c:	bd80      	pop	{r7, pc}
	...

00006e90 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
    6e90:	b580      	push	{r7, lr}
    6e92:	b082      	sub	sp, #8
    6e94:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
    6e96:	4b09      	ldr	r3, [pc, #36]	; (6ebc <HciResetCmd+0x2c>)
    6e98:	2201      	movs	r2, #1
    6e9a:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
    6e9c:	2100      	movs	r1, #0
    6e9e:	f640 4003 	movw	r0, #3075	; 0xc03
    6ea2:	f7ff fa23 	bl	62ec <hciCmdAlloc>
    6ea6:	6078      	str	r0, [r7, #4]
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d002      	beq.n	6eb4 <HciResetCmd+0x24>
  {
    hciCmdSend(pBuf);
    6eae:	6878      	ldr	r0, [r7, #4]
    6eb0:	f7ff fa4a 	bl	6348 <hciCmdSend>
  }
}
    6eb4:	bf00      	nop
    6eb6:	3708      	adds	r7, #8
    6eb8:	46bd      	mov	sp, r7
    6eba:	bd80      	pop	{r7, pc}
    6ebc:	10002614 	.word	0x10002614

00006ec0 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b084      	sub	sp, #16
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
    6ec8:	2108      	movs	r1, #8
    6eca:	f640 4001 	movw	r0, #3073	; 0xc01
    6ece:	f7ff fa0d 	bl	62ec <hciCmdAlloc>
    6ed2:	60f8      	str	r0, [r7, #12]
    6ed4:	68fb      	ldr	r3, [r7, #12]
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d00a      	beq.n	6ef0 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	3303      	adds	r3, #3
    6ede:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
    6ee0:	2208      	movs	r2, #8
    6ee2:	6879      	ldr	r1, [r7, #4]
    6ee4:	68b8      	ldr	r0, [r7, #8]
    6ee6:	f00a fac8 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    6eea:	68f8      	ldr	r0, [r7, #12]
    6eec:	f7ff fa2c 	bl	6348 <hciCmdSend>
  }
}
    6ef0:	bf00      	nop
    6ef2:	3710      	adds	r7, #16
    6ef4:	46bd      	mov	sp, r7
    6ef6:	bd80      	pop	{r7, pc}

00006ef8 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
    6ef8:	b580      	push	{r7, lr}
    6efa:	b084      	sub	sp, #16
    6efc:	af00      	add	r7, sp, #0
    6efe:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
    6f00:	2108      	movs	r1, #8
    6f02:	f640 4063 	movw	r0, #3171	; 0xc63
    6f06:	f7ff f9f1 	bl	62ec <hciCmdAlloc>
    6f0a:	60f8      	str	r0, [r7, #12]
    6f0c:	68fb      	ldr	r3, [r7, #12]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d00a      	beq.n	6f28 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	3303      	adds	r3, #3
    6f16:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
    6f18:	2208      	movs	r2, #8
    6f1a:	6879      	ldr	r1, [r7, #4]
    6f1c:	68b8      	ldr	r0, [r7, #8]
    6f1e:	f00a faac 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    6f22:	68f8      	ldr	r0, [r7, #12]
    6f24:	f7ff fa10 	bl	6348 <hciCmdSend>
  }
}
    6f28:	bf00      	nop
    6f2a:	3710      	adds	r7, #16
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}

00006f30 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
    6f30:	b580      	push	{r7, lr}
    6f32:	b084      	sub	sp, #16
    6f34:	af00      	add	r7, sp, #0
    6f36:	4603      	mov	r3, r0
    6f38:	460a      	mov	r2, r1
    6f3a:	80fb      	strh	r3, [r7, #6]
    6f3c:	4613      	mov	r3, r2
    6f3e:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
    6f40:	2104      	movs	r1, #4
    6f42:	f640 407c 	movw	r0, #3196	; 0xc7c
    6f46:	f7ff f9d1 	bl	62ec <hciCmdAlloc>
    6f4a:	60f8      	str	r0, [r7, #12]
    6f4c:	68fb      	ldr	r3, [r7, #12]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d021      	beq.n	6f96 <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6f52:	68fb      	ldr	r3, [r7, #12]
    6f54:	3303      	adds	r3, #3
    6f56:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6f58:	68bb      	ldr	r3, [r7, #8]
    6f5a:	1c5a      	adds	r2, r3, #1
    6f5c:	60ba      	str	r2, [r7, #8]
    6f5e:	88fa      	ldrh	r2, [r7, #6]
    6f60:	b2d2      	uxtb	r2, r2
    6f62:	701a      	strb	r2, [r3, #0]
    6f64:	68bb      	ldr	r3, [r7, #8]
    6f66:	1c5a      	adds	r2, r3, #1
    6f68:	60ba      	str	r2, [r7, #8]
    6f6a:	88fa      	ldrh	r2, [r7, #6]
    6f6c:	0a12      	lsrs	r2, r2, #8
    6f6e:	b292      	uxth	r2, r2
    6f70:	b2d2      	uxtb	r2, r2
    6f72:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    6f74:	68bb      	ldr	r3, [r7, #8]
    6f76:	1c5a      	adds	r2, r3, #1
    6f78:	60ba      	str	r2, [r7, #8]
    6f7a:	88ba      	ldrh	r2, [r7, #4]
    6f7c:	b2d2      	uxtb	r2, r2
    6f7e:	701a      	strb	r2, [r3, #0]
    6f80:	68bb      	ldr	r3, [r7, #8]
    6f82:	1c5a      	adds	r2, r3, #1
    6f84:	60ba      	str	r2, [r7, #8]
    6f86:	88ba      	ldrh	r2, [r7, #4]
    6f88:	0a12      	lsrs	r2, r2, #8
    6f8a:	b292      	uxth	r2, r2
    6f8c:	b2d2      	uxtb	r2, r2
    6f8e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6f90:	68f8      	ldr	r0, [r7, #12]
    6f92:	f7ff f9d9 	bl	6348 <hciCmdSend>
  }
}
    6f96:	bf00      	nop
    6f98:	3710      	adds	r7, #16
    6f9a:	46bd      	mov	sp, r7
    6f9c:	bd80      	pop	{r7, pc}

00006f9e <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
    6f9e:	b580      	push	{r7, lr}
    6fa0:	b086      	sub	sp, #24
    6fa2:	af00      	add	r7, sp, #0
    6fa4:	60b9      	str	r1, [r7, #8]
    6fa6:	607a      	str	r2, [r7, #4]
    6fa8:	603b      	str	r3, [r7, #0]
    6faa:	4603      	mov	r3, r0
    6fac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
    6fae:	2127      	movs	r1, #39	; 0x27
    6fb0:	f242 0027 	movw	r0, #8231	; 0x2027
    6fb4:	f7ff f99a 	bl	62ec <hciCmdAlloc>
    6fb8:	6178      	str	r0, [r7, #20]
    6fba:	697b      	ldr	r3, [r7, #20]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d01e      	beq.n	6ffe <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6fc0:	697b      	ldr	r3, [r7, #20]
    6fc2:	3303      	adds	r3, #3
    6fc4:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
    6fc6:	693b      	ldr	r3, [r7, #16]
    6fc8:	1c5a      	adds	r2, r3, #1
    6fca:	613a      	str	r2, [r7, #16]
    6fcc:	7bfa      	ldrb	r2, [r7, #15]
    6fce:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    6fd0:	68b9      	ldr	r1, [r7, #8]
    6fd2:	6938      	ldr	r0, [r7, #16]
    6fd4:	f006 f918 	bl	d208 <BdaCpy>
    6fd8:	693b      	ldr	r3, [r7, #16]
    6fda:	3306      	adds	r3, #6
    6fdc:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
    6fde:	2210      	movs	r2, #16
    6fe0:	6879      	ldr	r1, [r7, #4]
    6fe2:	6938      	ldr	r0, [r7, #16]
    6fe4:	f00a fa49 	bl	1147a <memcpy>
    p += HCI_KEY_LEN;
    6fe8:	693b      	ldr	r3, [r7, #16]
    6fea:	3310      	adds	r3, #16
    6fec:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
    6fee:	2210      	movs	r2, #16
    6ff0:	6839      	ldr	r1, [r7, #0]
    6ff2:	6938      	ldr	r0, [r7, #16]
    6ff4:	f00a fa41 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    6ff8:	6978      	ldr	r0, [r7, #20]
    6ffa:	f7ff f9a5 	bl	6348 <hciCmdSend>
  }
}
    6ffe:	bf00      	nop
    7000:	3718      	adds	r7, #24
    7002:	46bd      	mov	sp, r7
    7004:	bd80      	pop	{r7, pc}

00007006 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
    7006:	b580      	push	{r7, lr}
    7008:	b084      	sub	sp, #16
    700a:	af00      	add	r7, sp, #0
    700c:	4603      	mov	r3, r0
    700e:	6039      	str	r1, [r7, #0]
    7010:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
    7012:	2107      	movs	r1, #7
    7014:	f242 0028 	movw	r0, #8232	; 0x2028
    7018:	f7ff f968 	bl	62ec <hciCmdAlloc>
    701c:	60f8      	str	r0, [r7, #12]
    701e:	68fb      	ldr	r3, [r7, #12]
    7020:	2b00      	cmp	r3, #0
    7022:	d011      	beq.n	7048 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7024:	68fb      	ldr	r3, [r7, #12]
    7026:	3303      	adds	r3, #3
    7028:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
    702a:	68bb      	ldr	r3, [r7, #8]
    702c:	1c5a      	adds	r2, r3, #1
    702e:	60ba      	str	r2, [r7, #8]
    7030:	79fa      	ldrb	r2, [r7, #7]
    7032:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    7034:	6839      	ldr	r1, [r7, #0]
    7036:	68b8      	ldr	r0, [r7, #8]
    7038:	f006 f8e6 	bl	d208 <BdaCpy>
    703c:	68bb      	ldr	r3, [r7, #8]
    703e:	3306      	adds	r3, #6
    7040:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    7042:	68f8      	ldr	r0, [r7, #12]
    7044:	f7ff f980 	bl	6348 <hciCmdSend>
  }
}
    7048:	bf00      	nop
    704a:	3710      	adds	r7, #16
    704c:	46bd      	mov	sp, r7
    704e:	bd80      	pop	{r7, pc}

00007050 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
    7050:	b580      	push	{r7, lr}
    7052:	b082      	sub	sp, #8
    7054:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
    7056:	2100      	movs	r1, #0
    7058:	f242 0029 	movw	r0, #8233	; 0x2029
    705c:	f7ff f946 	bl	62ec <hciCmdAlloc>
    7060:	6078      	str	r0, [r7, #4]
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	2b00      	cmp	r3, #0
    7066:	d002      	beq.n	706e <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
    7068:	6878      	ldr	r0, [r7, #4]
    706a:	f7ff f96d 	bl	6348 <hciCmdSend>
  }
}
    706e:	bf00      	nop
    7070:	3708      	adds	r7, #8
    7072:	46bd      	mov	sp, r7
    7074:	bd80      	pop	{r7, pc}

00007076 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
    7076:	b580      	push	{r7, lr}
    7078:	b082      	sub	sp, #8
    707a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
    707c:	2100      	movs	r1, #0
    707e:	f242 002a 	movw	r0, #8234	; 0x202a
    7082:	f7ff f933 	bl	62ec <hciCmdAlloc>
    7086:	6078      	str	r0, [r7, #4]
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	2b00      	cmp	r3, #0
    708c:	d002      	beq.n	7094 <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
    708e:	6878      	ldr	r0, [r7, #4]
    7090:	f7ff f95a 	bl	6348 <hciCmdSend>
  }
}
    7094:	bf00      	nop
    7096:	3708      	adds	r7, #8
    7098:	46bd      	mov	sp, r7
    709a:	bd80      	pop	{r7, pc}

0000709c <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
    709c:	b580      	push	{r7, lr}
    709e:	b084      	sub	sp, #16
    70a0:	af00      	add	r7, sp, #0
    70a2:	4603      	mov	r3, r0
    70a4:	6039      	str	r1, [r7, #0]
    70a6:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
    70a8:	2107      	movs	r1, #7
    70aa:	f242 002b 	movw	r0, #8235	; 0x202b
    70ae:	f7ff f91d 	bl	62ec <hciCmdAlloc>
    70b2:	60f8      	str	r0, [r7, #12]
    70b4:	68fb      	ldr	r3, [r7, #12]
    70b6:	2b00      	cmp	r3, #0
    70b8:	d011      	beq.n	70de <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	3303      	adds	r3, #3
    70be:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    70c0:	68bb      	ldr	r3, [r7, #8]
    70c2:	1c5a      	adds	r2, r3, #1
    70c4:	60ba      	str	r2, [r7, #8]
    70c6:	79fa      	ldrb	r2, [r7, #7]
    70c8:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
    70ca:	6839      	ldr	r1, [r7, #0]
    70cc:	68b8      	ldr	r0, [r7, #8]
    70ce:	f006 f89b 	bl	d208 <BdaCpy>
    70d2:	68bb      	ldr	r3, [r7, #8]
    70d4:	3306      	adds	r3, #6
    70d6:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    70d8:	68f8      	ldr	r0, [r7, #12]
    70da:	f7ff f935 	bl	6348 <hciCmdSend>
  }
}
    70de:	bf00      	nop
    70e0:	3710      	adds	r7, #16
    70e2:	46bd      	mov	sp, r7
    70e4:	bd80      	pop	{r7, pc}

000070e6 <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
    70e6:	b580      	push	{r7, lr}
    70e8:	b084      	sub	sp, #16
    70ea:	af00      	add	r7, sp, #0
    70ec:	4603      	mov	r3, r0
    70ee:	6039      	str	r1, [r7, #0]
    70f0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
    70f2:	2107      	movs	r1, #7
    70f4:	f242 002c 	movw	r0, #8236	; 0x202c
    70f8:	f7ff f8f8 	bl	62ec <hciCmdAlloc>
    70fc:	60f8      	str	r0, [r7, #12]
    70fe:	68fb      	ldr	r3, [r7, #12]
    7100:	2b00      	cmp	r3, #0
    7102:	d011      	beq.n	7128 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7104:	68fb      	ldr	r3, [r7, #12]
    7106:	3303      	adds	r3, #3
    7108:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    710a:	68bb      	ldr	r3, [r7, #8]
    710c:	1c5a      	adds	r2, r3, #1
    710e:	60ba      	str	r2, [r7, #8]
    7110:	79fa      	ldrb	r2, [r7, #7]
    7112:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
    7114:	6839      	ldr	r1, [r7, #0]
    7116:	68b8      	ldr	r0, [r7, #8]
    7118:	f006 f876 	bl	d208 <BdaCpy>
    711c:	68bb      	ldr	r3, [r7, #8]
    711e:	3306      	adds	r3, #6
    7120:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    7122:	68f8      	ldr	r0, [r7, #12]
    7124:	f7ff f910 	bl	6348 <hciCmdSend>
  }
}
    7128:	bf00      	nop
    712a:	3710      	adds	r7, #16
    712c:	46bd      	mov	sp, r7
    712e:	bd80      	pop	{r7, pc}

00007130 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
    7130:	b580      	push	{r7, lr}
    7132:	b084      	sub	sp, #16
    7134:	af00      	add	r7, sp, #0
    7136:	4603      	mov	r3, r0
    7138:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
    713a:	2101      	movs	r1, #1
    713c:	f242 002d 	movw	r0, #8237	; 0x202d
    7140:	f7ff f8d4 	bl	62ec <hciCmdAlloc>
    7144:	60f8      	str	r0, [r7, #12]
    7146:	68fb      	ldr	r3, [r7, #12]
    7148:	2b00      	cmp	r3, #0
    714a:	d00a      	beq.n	7162 <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    714c:	68fb      	ldr	r3, [r7, #12]
    714e:	3303      	adds	r3, #3
    7150:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
    7152:	68bb      	ldr	r3, [r7, #8]
    7154:	1c5a      	adds	r2, r3, #1
    7156:	60ba      	str	r2, [r7, #8]
    7158:	79fa      	ldrb	r2, [r7, #7]
    715a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    715c:	68f8      	ldr	r0, [r7, #12]
    715e:	f7ff f8f3 	bl	6348 <hciCmdSend>
  }
}
    7162:	bf00      	nop
    7164:	3710      	adds	r7, #16
    7166:	46bd      	mov	sp, r7
    7168:	bd80      	pop	{r7, pc}

0000716a <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
    716a:	b580      	push	{r7, lr}
    716c:	b084      	sub	sp, #16
    716e:	af00      	add	r7, sp, #0
    7170:	4603      	mov	r3, r0
    7172:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
    7174:	2102      	movs	r1, #2
    7176:	f242 002e 	movw	r0, #8238	; 0x202e
    717a:	f7ff f8b7 	bl	62ec <hciCmdAlloc>
    717e:	60f8      	str	r0, [r7, #12]
    7180:	68fb      	ldr	r3, [r7, #12]
    7182:	2b00      	cmp	r3, #0
    7184:	d013      	beq.n	71ae <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7186:	68fb      	ldr	r3, [r7, #12]
    7188:	3303      	adds	r3, #3
    718a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
    718c:	68bb      	ldr	r3, [r7, #8]
    718e:	1c5a      	adds	r2, r3, #1
    7190:	60ba      	str	r2, [r7, #8]
    7192:	88fa      	ldrh	r2, [r7, #6]
    7194:	b2d2      	uxtb	r2, r2
    7196:	701a      	strb	r2, [r3, #0]
    7198:	68bb      	ldr	r3, [r7, #8]
    719a:	1c5a      	adds	r2, r3, #1
    719c:	60ba      	str	r2, [r7, #8]
    719e:	88fa      	ldrh	r2, [r7, #6]
    71a0:	0a12      	lsrs	r2, r2, #8
    71a2:	b292      	uxth	r2, r2
    71a4:	b2d2      	uxtb	r2, r2
    71a6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    71a8:	68f8      	ldr	r0, [r7, #12]
    71aa:	f7ff f8cd 	bl	6348 <hciCmdSend>
  }
}
    71ae:	bf00      	nop
    71b0:	3710      	adds	r7, #16
    71b2:	46bd      	mov	sp, r7
    71b4:	bd80      	pop	{r7, pc}

000071b6 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
    71b6:	b580      	push	{r7, lr}
    71b8:	b084      	sub	sp, #16
    71ba:	af00      	add	r7, sp, #0
    71bc:	4603      	mov	r3, r0
    71be:	6039      	str	r1, [r7, #0]
    71c0:	71fb      	strb	r3, [r7, #7]
    71c2:	4613      	mov	r3, r2
    71c4:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
    71c6:	2108      	movs	r1, #8
    71c8:	f242 004e 	movw	r0, #8270	; 0x204e
    71cc:	f7ff f88e 	bl	62ec <hciCmdAlloc>
    71d0:	60f8      	str	r0, [r7, #12]
    71d2:	68fb      	ldr	r3, [r7, #12]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d016      	beq.n	7206 <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    71d8:	68fb      	ldr	r3, [r7, #12]
    71da:	3303      	adds	r3, #3
    71dc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    71de:	68bb      	ldr	r3, [r7, #8]
    71e0:	1c5a      	adds	r2, r3, #1
    71e2:	60ba      	str	r2, [r7, #8]
    71e4:	79fa      	ldrb	r2, [r7, #7]
    71e6:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    71e8:	6839      	ldr	r1, [r7, #0]
    71ea:	68b8      	ldr	r0, [r7, #8]
    71ec:	f006 f80c 	bl	d208 <BdaCpy>
    71f0:	68bb      	ldr	r3, [r7, #8]
    71f2:	3306      	adds	r3, #6
    71f4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
    71f6:	68bb      	ldr	r3, [r7, #8]
    71f8:	1c5a      	adds	r2, r3, #1
    71fa:	60ba      	str	r2, [r7, #8]
    71fc:	79ba      	ldrb	r2, [r7, #6]
    71fe:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    7200:	68f8      	ldr	r0, [r7, #12]
    7202:	f7ff f8a1 	bl	6348 <hciCmdSend>
  }
}
    7206:	bf00      	nop
    7208:	3710      	adds	r7, #16
    720a:	46bd      	mov	sp, r7
    720c:	bd80      	pop	{r7, pc}

0000720e <HciLeReceiverTestCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeReceiverTestCmd(uint8_t RX_Channel)
{
    720e:	b580      	push	{r7, lr}
    7210:	b084      	sub	sp, #16
    7212:	af00      	add	r7, sp, #0
    7214:	4603      	mov	r3, r0
    7216:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RECEIVER_TEST, HCI_LEN_LE_RECEIVER_TEST)) != NULL)
    7218:	2101      	movs	r1, #1
    721a:	f242 001d 	movw	r0, #8221	; 0x201d
    721e:	f7ff f865 	bl	62ec <hciCmdAlloc>
    7222:	60f8      	str	r0, [r7, #12]
    7224:	68fb      	ldr	r3, [r7, #12]
    7226:	2b00      	cmp	r3, #0
    7228:	d00a      	beq.n	7240 <HciLeReceiverTestCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    722a:	68fb      	ldr	r3, [r7, #12]
    722c:	3303      	adds	r3, #3
    722e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, RX_Channel);
    7230:	68bb      	ldr	r3, [r7, #8]
    7232:	1c5a      	adds	r2, r3, #1
    7234:	60ba      	str	r2, [r7, #8]
    7236:	79fa      	ldrb	r2, [r7, #7]
    7238:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    723a:	68f8      	ldr	r0, [r7, #12]
    723c:	f7ff f884 	bl	6348 <hciCmdSend>
  }
}
    7240:	bf00      	nop
    7242:	3710      	adds	r7, #16
    7244:	46bd      	mov	sp, r7
    7246:	bd80      	pop	{r7, pc}

00007248 <HciLeTestEndCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeTestEndCmd(void)
{
    7248:	b580      	push	{r7, lr}
    724a:	b082      	sub	sp, #8
    724c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_TEST_END, HCI_LEN_LE_TEST_END)) != NULL)
    724e:	2100      	movs	r1, #0
    7250:	f242 001f 	movw	r0, #8223	; 0x201f
    7254:	f7ff f84a 	bl	62ec <hciCmdAlloc>
    7258:	6078      	str	r0, [r7, #4]
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	2b00      	cmp	r3, #0
    725e:	d002      	beq.n	7266 <HciLeTestEndCmd+0x1e>
  {
    hciCmdSend(pBuf);
    7260:	6878      	ldr	r0, [r7, #4]
    7262:	f7ff f871 	bl	6348 <hciCmdSend>
  }
}
    7266:	bf00      	nop
    7268:	3708      	adds	r7, #8
    726a:	46bd      	mov	sp, r7
    726c:	bd80      	pop	{r7, pc}

0000726e <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
    726e:	b580      	push	{r7, lr}
    7270:	b084      	sub	sp, #16
    7272:	af00      	add	r7, sp, #0
    7274:	4603      	mov	r3, r0
    7276:	603a      	str	r2, [r7, #0]
    7278:	80fb      	strh	r3, [r7, #6]
    727a:	460b      	mov	r3, r1
    727c:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
    727e:	797b      	ldrb	r3, [r7, #5]
    7280:	b29a      	uxth	r2, r3
    7282:	88fb      	ldrh	r3, [r7, #6]
    7284:	4611      	mov	r1, r2
    7286:	4618      	mov	r0, r3
    7288:	f7ff f830 	bl	62ec <hciCmdAlloc>
    728c:	60f8      	str	r0, [r7, #12]
    728e:	68fb      	ldr	r3, [r7, #12]
    7290:	2b00      	cmp	r3, #0
    7292:	d00b      	beq.n	72ac <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7294:	68fb      	ldr	r3, [r7, #12]
    7296:	3303      	adds	r3, #3
    7298:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
    729a:	797b      	ldrb	r3, [r7, #5]
    729c:	461a      	mov	r2, r3
    729e:	6839      	ldr	r1, [r7, #0]
    72a0:	68b8      	ldr	r0, [r7, #8]
    72a2:	f00a f8ea 	bl	1147a <memcpy>
    hciCmdSend(pBuf);
    72a6:	68f8      	ldr	r0, [r7, #12]
    72a8:	f7ff f84e 	bl	6348 <hciCmdSend>
  }
}
    72ac:	bf00      	nop
    72ae:	3710      	adds	r7, #16
    72b0:	46bd      	mov	sp, r7
    72b2:	bd80      	pop	{r7, pc}

000072b4 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b084      	sub	sp, #16
    72b8:	af00      	add	r7, sp, #0
    72ba:	4603      	mov	r3, r0
    72bc:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    72be:	4b13      	ldr	r3, [pc, #76]	; (730c <hciCoreConnAlloc+0x58>)
    72c0:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    72c2:	2308      	movs	r3, #8
    72c4:	73fb      	strb	r3, [r7, #15]
    72c6:	e018      	b.n	72fa <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
    72c8:	68bb      	ldr	r3, [r7, #8]
    72ca:	8a1b      	ldrh	r3, [r3, #16]
    72cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    72d0:	4293      	cmp	r3, r2
    72d2:	d10c      	bne.n	72ee <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
    72d4:	68bb      	ldr	r3, [r7, #8]
    72d6:	88fa      	ldrh	r2, [r7, #6]
    72d8:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
    72da:	68bb      	ldr	r3, [r7, #8]
    72dc:	2200      	movs	r2, #0
    72de:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
    72e0:	68bb      	ldr	r3, [r7, #8]
    72e2:	2200      	movs	r2, #0
    72e4:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
    72e6:	68bb      	ldr	r3, [r7, #8]
    72e8:	2200      	movs	r2, #0
    72ea:	761a      	strb	r2, [r3, #24]

      return;
    72ec:	e00b      	b.n	7306 <hciCoreConnAlloc+0x52>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    72ee:	7bfb      	ldrb	r3, [r7, #15]
    72f0:	3b01      	subs	r3, #1
    72f2:	73fb      	strb	r3, [r7, #15]
    72f4:	68bb      	ldr	r3, [r7, #8]
    72f6:	331c      	adds	r3, #28
    72f8:	60bb      	str	r3, [r7, #8]
    72fa:	7bfb      	ldrb	r3, [r7, #15]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d1e3      	bne.n	72c8 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
    7300:	4803      	ldr	r0, [pc, #12]	; (7310 <hciCoreConnAlloc+0x5c>)
    7302:	f003 f825 	bl	a350 <WsfTrace>
}
    7306:	3710      	adds	r7, #16
    7308:	46bd      	mov	sp, r7
    730a:	bd80      	pop	{r7, pc}
    730c:	10002630 	.word	0x10002630
    7310:	000114e4 	.word	0x000114e4

00007314 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
    7314:	b580      	push	{r7, lr}
    7316:	b084      	sub	sp, #16
    7318:	af00      	add	r7, sp, #0
    731a:	4603      	mov	r3, r0
    731c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    731e:	4b20      	ldr	r3, [pc, #128]	; (73a0 <hciCoreConnFree+0x8c>)
    7320:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    7322:	2308      	movs	r3, #8
    7324:	73fb      	strb	r3, [r7, #15]
    7326:	e02f      	b.n	7388 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
    7328:	68bb      	ldr	r3, [r7, #8]
    732a:	8a1b      	ldrh	r3, [r3, #16]
    732c:	88fa      	ldrh	r2, [r7, #6]
    732e:	429a      	cmp	r2, r3
    7330:	d124      	bne.n	737c <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
    7332:	68bb      	ldr	r3, [r7, #8]
    7334:	681b      	ldr	r3, [r3, #0]
    7336:	2b00      	cmp	r3, #0
    7338:	d007      	beq.n	734a <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
    733a:	68bb      	ldr	r3, [r7, #8]
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	4618      	mov	r0, r3
    7340:	f003 fd96 	bl	ae70 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
    7344:	68bb      	ldr	r3, [r7, #8]
    7346:	2200      	movs	r2, #0
    7348:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
    734a:	68bb      	ldr	r3, [r7, #8]
    734c:	2200      	movs	r2, #0
    734e:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
    7350:	68bb      	ldr	r3, [r7, #8]
    7352:	689b      	ldr	r3, [r3, #8]
    7354:	2b00      	cmp	r3, #0
    7356:	d007      	beq.n	7368 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
    7358:	68bb      	ldr	r3, [r7, #8]
    735a:	689b      	ldr	r3, [r3, #8]
    735c:	4618      	mov	r0, r3
    735e:	f003 fd87 	bl	ae70 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    7362:	68bb      	ldr	r3, [r7, #8]
    7364:	2200      	movs	r2, #0
    7366:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
    7368:	68bb      	ldr	r3, [r7, #8]
    736a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    736e:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
    7370:	68bb      	ldr	r3, [r7, #8]
    7372:	7e5b      	ldrb	r3, [r3, #25]
    7374:	4618      	mov	r0, r3
    7376:	f000 f8a3 	bl	74c0 <hciCoreTxReady>

      return;
    737a:	e00d      	b.n	7398 <hciCoreConnFree+0x84>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    737c:	7bfb      	ldrb	r3, [r7, #15]
    737e:	3b01      	subs	r3, #1
    7380:	73fb      	strb	r3, [r7, #15]
    7382:	68bb      	ldr	r3, [r7, #8]
    7384:	331c      	adds	r3, #28
    7386:	60bb      	str	r3, [r7, #8]
    7388:	7bfb      	ldrb	r3, [r7, #15]
    738a:	2b00      	cmp	r3, #0
    738c:	d1cc      	bne.n	7328 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
    738e:	88fb      	ldrh	r3, [r7, #6]
    7390:	4619      	mov	r1, r3
    7392:	4804      	ldr	r0, [pc, #16]	; (73a4 <hciCoreConnFree+0x90>)
    7394:	f002 ffdc 	bl	a350 <WsfTrace>
}
    7398:	3710      	adds	r7, #16
    739a:	46bd      	mov	sp, r7
    739c:	bd80      	pop	{r7, pc}
    739e:	bf00      	nop
    73a0:	10002630 	.word	0x10002630
    73a4:	00011504 	.word	0x00011504

000073a8 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
    73a8:	b480      	push	{r7}
    73aa:	b085      	sub	sp, #20
    73ac:	af00      	add	r7, sp, #0
    73ae:	4603      	mov	r3, r0
    73b0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    73b2:	4b0e      	ldr	r3, [pc, #56]	; (73ec <hciCoreConnByHandle+0x44>)
    73b4:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73b6:	2308      	movs	r3, #8
    73b8:	73fb      	strb	r3, [r7, #15]
    73ba:	e00c      	b.n	73d6 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
    73bc:	68bb      	ldr	r3, [r7, #8]
    73be:	8a1b      	ldrh	r3, [r3, #16]
    73c0:	88fa      	ldrh	r2, [r7, #6]
    73c2:	429a      	cmp	r2, r3
    73c4:	d101      	bne.n	73ca <hciCoreConnByHandle+0x22>
    {
      return pConn;
    73c6:	68bb      	ldr	r3, [r7, #8]
    73c8:	e009      	b.n	73de <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73ca:	7bfb      	ldrb	r3, [r7, #15]
    73cc:	3b01      	subs	r3, #1
    73ce:	73fb      	strb	r3, [r7, #15]
    73d0:	68bb      	ldr	r3, [r7, #8]
    73d2:	331c      	adds	r3, #28
    73d4:	60bb      	str	r3, [r7, #8]
    73d6:	7bfb      	ldrb	r3, [r7, #15]
    73d8:	2b00      	cmp	r3, #0
    73da:	d1ef      	bne.n	73bc <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
    73dc:	2300      	movs	r3, #0
}
    73de:	4618      	mov	r0, r3
    73e0:	3714      	adds	r7, #20
    73e2:	46bd      	mov	sp, r7
    73e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73e8:	4770      	bx	lr
    73ea:	bf00      	nop
    73ec:	10002630 	.word	0x10002630

000073f0 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
    73f0:	b480      	push	{r7}
    73f2:	b083      	sub	sp, #12
    73f4:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    73f6:	4b10      	ldr	r3, [pc, #64]	; (7438 <hciCoreNextConnFragment+0x48>)
    73f8:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73fa:	2308      	movs	r3, #8
    73fc:	71fb      	strb	r3, [r7, #7]
    73fe:	e011      	b.n	7424 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
    7400:	683b      	ldr	r3, [r7, #0]
    7402:	8a1b      	ldrh	r3, [r3, #16]
    7404:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7408:	4293      	cmp	r3, r2
    740a:	d005      	beq.n	7418 <hciCoreNextConnFragment+0x28>
    740c:	683b      	ldr	r3, [r7, #0]
    740e:	7d9b      	ldrb	r3, [r3, #22]
    7410:	2b00      	cmp	r3, #0
    7412:	d001      	beq.n	7418 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
    7414:	683b      	ldr	r3, [r7, #0]
    7416:	e009      	b.n	742c <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    7418:	79fb      	ldrb	r3, [r7, #7]
    741a:	3b01      	subs	r3, #1
    741c:	71fb      	strb	r3, [r7, #7]
    741e:	683b      	ldr	r3, [r7, #0]
    7420:	331c      	adds	r3, #28
    7422:	603b      	str	r3, [r7, #0]
    7424:	79fb      	ldrb	r3, [r7, #7]
    7426:	2b00      	cmp	r3, #0
    7428:	d1ea      	bne.n	7400 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
    742a:	2300      	movs	r3, #0
}
    742c:	4618      	mov	r0, r3
    742e:	370c      	adds	r7, #12
    7430:	46bd      	mov	sp, r7
    7432:	f85d 7b04 	ldr.w	r7, [sp], #4
    7436:	4770      	bx	lr
    7438:	10002630 	.word	0x10002630

0000743c <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
    743c:	b580      	push	{r7, lr}
    743e:	b082      	sub	sp, #8
    7440:	af00      	add	r7, sp, #0
    7442:	4603      	mov	r3, r0
    7444:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
    7446:	88fb      	ldrh	r3, [r7, #6]
    7448:	4618      	mov	r0, r3
    744a:	f7ff ff33 	bl	72b4 <hciCoreConnAlloc>
}
    744e:	bf00      	nop
    7450:	3708      	adds	r7, #8
    7452:	46bd      	mov	sp, r7
    7454:	bd80      	pop	{r7, pc}

00007456 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
    7456:	b580      	push	{r7, lr}
    7458:	b082      	sub	sp, #8
    745a:	af00      	add	r7, sp, #0
    745c:	4603      	mov	r3, r0
    745e:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
    7460:	88fb      	ldrh	r3, [r7, #6]
    7462:	4618      	mov	r0, r3
    7464:	f7ff ff56 	bl	7314 <hciCoreConnFree>
}
    7468:	bf00      	nop
    746a:	3708      	adds	r7, #8
    746c:	46bd      	mov	sp, r7
    746e:	bd80      	pop	{r7, pc}

00007470 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
    7470:	b580      	push	{r7, lr}
    7472:	b082      	sub	sp, #8
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
    7478:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	7e5b      	ldrb	r3, [r3, #25]
    747e:	3301      	adds	r3, #1
    7480:	b2da      	uxtb	r2, r3
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
    7486:	6839      	ldr	r1, [r7, #0]
    7488:	6878      	ldr	r0, [r7, #4]
    748a:	f002 fab5 	bl	99f8 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
    748e:	4b0a      	ldr	r3, [pc, #40]	; (74b8 <hciCoreSendAclData+0x48>)
    7490:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7494:	2b00      	cmp	r3, #0
    7496:	d008      	beq.n	74aa <hciCoreSendAclData+0x3a>
  {
    hciCoreCb.availBufs--;
    7498:	4b07      	ldr	r3, [pc, #28]	; (74b8 <hciCoreSendAclData+0x48>)
    749a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    749e:	3b01      	subs	r3, #1
    74a0:	b2da      	uxtb	r2, r3
    74a2:	4b05      	ldr	r3, [pc, #20]	; (74b8 <hciCoreSendAclData+0x48>)
    74a4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
    74a8:	e002      	b.n	74b0 <hciCoreSendAclData+0x40>
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
    74aa:	4804      	ldr	r0, [pc, #16]	; (74bc <hciCoreSendAclData+0x4c>)
    74ac:	f002 ff50 	bl	a350 <WsfTrace>
}
    74b0:	bf00      	nop
    74b2:	3708      	adds	r7, #8
    74b4:	46bd      	mov	sp, r7
    74b6:	bd80      	pop	{r7, pc}
    74b8:	10002630 	.word	0x10002630
    74bc:	00011528 	.word	0x00011528

000074c0 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b086      	sub	sp, #24
    74c4:	af00      	add	r7, sp, #0
    74c6:	4603      	mov	r3, r0
    74c8:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
    74ca:	79fb      	ldrb	r3, [r7, #7]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d055      	beq.n	757c <hciCoreTxReady+0xbc>
  {
    hciCoreCb.availBufs += bufs;
    74d0:	4b30      	ldr	r3, [pc, #192]	; (7594 <hciCoreTxReady+0xd4>)
    74d2:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
    74d6:	79fb      	ldrb	r3, [r7, #7]
    74d8:	4413      	add	r3, r2
    74da:	b2da      	uxtb	r2, r3
    74dc:	4b2d      	ldr	r3, [pc, #180]	; (7594 <hciCoreTxReady+0xd4>)
    74de:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
    74e2:	4b2c      	ldr	r3, [pc, #176]	; (7594 <hciCoreTxReady+0xd4>)
    74e4:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
    74e8:	4b2a      	ldr	r3, [pc, #168]	; (7594 <hciCoreTxReady+0xd4>)
    74ea:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    74ee:	429a      	cmp	r2, r3
    74f0:	d944      	bls.n	757c <hciCoreTxReady+0xbc>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
    74f2:	4b28      	ldr	r3, [pc, #160]	; (7594 <hciCoreTxReady+0xd4>)
    74f4:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
    74f8:	4b26      	ldr	r3, [pc, #152]	; (7594 <hciCoreTxReady+0xd4>)
    74fa:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  /* service ACL data queue and send as many buffers as we can */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  while (hciCoreCb.availBufs > 0 && hciCmdCb.numCmdPkts > 0)
#else
  while (hciCoreCb.availBufs > 0)
    74fe:	e03d      	b.n	757c <hciCoreTxReady+0xbc>
#endif
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
    7500:	2000      	movs	r0, #0
    7502:	f000 f89b 	bl	763c <hciCoreTxAclContinue>
    7506:	4603      	mov	r3, r0
    7508:	2b00      	cmp	r3, #0
    750a:	d137      	bne.n	757c <hciCoreTxReady+0xbc>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
    750c:	f107 030b 	add.w	r3, r7, #11
    7510:	4619      	mov	r1, r3
    7512:	4821      	ldr	r0, [pc, #132]	; (7598 <hciCoreTxReady+0xd8>)
    7514:	f003 fce6 	bl	aee4 <WsfMsgDeq>
    7518:	6178      	str	r0, [r7, #20]
    751a:	697b      	ldr	r3, [r7, #20]
    751c:	2b00      	cmp	r3, #0
    751e:	d033      	beq.n	7588 <hciCoreTxReady+0xc8>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
    7520:	697b      	ldr	r3, [r7, #20]
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	b29a      	uxth	r2, r3
    7526:	697b      	ldr	r3, [r7, #20]
    7528:	3301      	adds	r3, #1
    752a:	781b      	ldrb	r3, [r3, #0]
    752c:	b29b      	uxth	r3, r3
    752e:	021b      	lsls	r3, r3, #8
    7530:	b29b      	uxth	r3, r3
    7532:	4413      	add	r3, r2
    7534:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
    7536:	697b      	ldr	r3, [r7, #20]
    7538:	3302      	adds	r3, #2
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	b29a      	uxth	r2, r3
    753e:	697b      	ldr	r3, [r7, #20]
    7540:	3303      	adds	r3, #3
    7542:	781b      	ldrb	r3, [r3, #0]
    7544:	b29b      	uxth	r3, r3
    7546:	021b      	lsls	r3, r3, #8
    7548:	b29b      	uxth	r3, r3
    754a:	4413      	add	r3, r2
    754c:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    754e:	8a7b      	ldrh	r3, [r7, #18]
    7550:	4618      	mov	r0, r3
    7552:	f7ff ff29 	bl	73a8 <hciCoreConnByHandle>
    7556:	60f8      	str	r0, [r7, #12]
    7558:	68fb      	ldr	r3, [r7, #12]
    755a:	2b00      	cmp	r3, #0
    755c:	d006      	beq.n	756c <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
    755e:	8a3b      	ldrh	r3, [r7, #16]
    7560:	697a      	ldr	r2, [r7, #20]
    7562:	4619      	mov	r1, r3
    7564:	68f8      	ldr	r0, [r7, #12]
    7566:	f000 f81b 	bl	75a0 <hciCoreTxAclStart>
    756a:	e007      	b.n	757c <hciCoreTxReady+0xbc>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
    756c:	6978      	ldr	r0, [r7, #20]
    756e:	f003 fc7f 	bl	ae70 <WsfMsgFree>

          HCI_TRACE_WARN1("hciCoreTxReady discarding buffer, handle=%u", handle);
    7572:	8a7b      	ldrh	r3, [r7, #18]
    7574:	4619      	mov	r1, r3
    7576:	4809      	ldr	r0, [pc, #36]	; (759c <hciCoreTxReady+0xdc>)
    7578:	f002 feea 	bl	a350 <WsfTrace>
  while (hciCoreCb.availBufs > 0)
    757c:	4b05      	ldr	r3, [pc, #20]	; (7594 <hciCoreTxReady+0xd4>)
    757e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7582:	2b00      	cmp	r3, #0
    7584:	d1bc      	bne.n	7500 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
    7586:	e000      	b.n	758a <hciCoreTxReady+0xca>
        break;
    7588:	bf00      	nop
}
    758a:	bf00      	nop
    758c:	3718      	adds	r7, #24
    758e:	46bd      	mov	sp, r7
    7590:	bd80      	pop	{r7, pc}
    7592:	bf00      	nop
    7594:	10002630 	.word	0x10002630
    7598:	10002720 	.word	0x10002720
    759c:	00011548 	.word	0x00011548

000075a0 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
    75a0:	b580      	push	{r7, lr}
    75a2:	b086      	sub	sp, #24
    75a4:	af00      	add	r7, sp, #0
    75a6:	60f8      	str	r0, [r7, #12]
    75a8:	460b      	mov	r3, r1
    75aa:	607a      	str	r2, [r7, #4]
    75ac:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
    75ae:	f000 fbb9 	bl	7d24 <HciGetBufSize>
    75b2:	4603      	mov	r3, r0
    75b4:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);
    75b6:	897b      	ldrh	r3, [r7, #10]
    75b8:	4619      	mov	r1, r3
    75ba:	481e      	ldr	r0, [pc, #120]	; (7634 <hciCoreTxAclStart+0x94>)
    75bc:	f002 fec8 	bl	a350 <WsfTrace>

  /* if acl len > controller acl buf len */
  if (len > hciLen)
    75c0:	897a      	ldrh	r2, [r7, #10]
    75c2:	8afb      	ldrh	r3, [r7, #22]
    75c4:	429a      	cmp	r2, r3
    75c6:	d92d      	bls.n	7624 <hciCoreTxAclStart+0x84>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
    75c8:	897a      	ldrh	r2, [r7, #10]
    75ca:	8afb      	ldrh	r3, [r7, #22]
    75cc:	1ad3      	subs	r3, r2, r3
    75ce:	b29a      	uxth	r2, r3
    75d0:	68fb      	ldr	r3, [r7, #12]
    75d2:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
    75d4:	8afb      	ldrh	r3, [r7, #22]
    75d6:	687a      	ldr	r2, [r7, #4]
    75d8:	441a      	add	r2, r3
    75da:	68fb      	ldr	r3, [r7, #12]
    75dc:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    75de:	68fb      	ldr	r3, [r7, #12]
    75e0:	687a      	ldr	r2, [r7, #4]
    75e2:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
    75e4:	68fb      	ldr	r3, [r7, #12]
    75e6:	2201      	movs	r2, #1
    75e8:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
    75ea:	687b      	ldr	r3, [r7, #4]
    75ec:	3302      	adds	r3, #2
    75ee:	8afa      	ldrh	r2, [r7, #22]
    75f0:	b2d2      	uxtb	r2, r2
    75f2:	701a      	strb	r2, [r3, #0]
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	3303      	adds	r3, #3
    75f8:	8afa      	ldrh	r2, [r7, #22]
    75fa:	0a12      	lsrs	r2, r2, #8
    75fc:	b292      	uxth	r2, r2
    75fe:	b2d2      	uxtb	r2, r2
    7600:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
    7602:	6879      	ldr	r1, [r7, #4]
    7604:	68f8      	ldr	r0, [r7, #12]
    7606:	f7ff ff33 	bl	7470 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn) && (hciCmdCb.numCmdPkts > 0));
#else
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    760a:	bf00      	nop
    760c:	4b0a      	ldr	r3, [pc, #40]	; (7638 <hciCoreTxAclStart+0x98>)
    760e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7612:	2b00      	cmp	r3, #0
    7614:	d00a      	beq.n	762c <hciCoreTxAclStart+0x8c>
    7616:	68f8      	ldr	r0, [r7, #12]
    7618:	f000 f810 	bl	763c <hciCoreTxAclContinue>
    761c:	4603      	mov	r3, r0
    761e:	2b00      	cmp	r3, #0
    7620:	d1f4      	bne.n	760c <hciCoreTxAclStart+0x6c>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
    7622:	e003      	b.n	762c <hciCoreTxAclStart+0x8c>
    hciCoreSendAclData(pConn, pData);
    7624:	6879      	ldr	r1, [r7, #4]
    7626:	68f8      	ldr	r0, [r7, #12]
    7628:	f7ff ff22 	bl	7470 <hciCoreSendAclData>
}
    762c:	bf00      	nop
    762e:	3718      	adds	r7, #24
    7630:	46bd      	mov	sp, r7
    7632:	bd80      	pop	{r7, pc}
    7634:	00011574 	.word	0x00011574
    7638:	10002630 	.word	0x10002630

0000763c <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
    763c:	b590      	push	{r4, r7, lr}
    763e:	b085      	sub	sp, #20
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	2b00      	cmp	r3, #0
    7648:	d102      	bne.n	7650 <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
    764a:	f7ff fed1 	bl	73f0 <hciCoreNextConnFragment>
    764e:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	2b00      	cmp	r3, #0
    7654:	d050      	beq.n	76f8 <hciCoreTxAclContinue+0xbc>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	8a5c      	ldrh	r4, [r3, #18]
    765a:	f000 fb63 	bl	7d24 <HciGetBufSize>
    765e:	4603      	mov	r3, r0
    7660:	429c      	cmp	r4, r3
    7662:	d202      	bcs.n	766a <hciCoreTxAclContinue+0x2e>
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	8a5b      	ldrh	r3, [r3, #18]
    7668:	e002      	b.n	7670 <hciCoreTxAclContinue+0x34>
    766a:	f000 fb5b 	bl	7d24 <HciGetBufSize>
    766e:	4603      	mov	r3, r0
    7670:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
    7672:	89fb      	ldrh	r3, [r7, #14]
    7674:	2b00      	cmp	r3, #0
    7676:	d03f      	beq.n	76f8 <hciCoreTxAclContinue+0xbc>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	8a5a      	ldrh	r2, [r3, #18]
    767c:	89fb      	ldrh	r3, [r7, #14]
    767e:	1ad3      	subs	r3, r2, r3
    7680:	b29a      	uxth	r2, r3
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    7686:	687b      	ldr	r3, [r7, #4]
    7688:	685b      	ldr	r3, [r3, #4]
    768a:	687a      	ldr	r2, [r7, #4]
    768c:	8a12      	ldrh	r2, [r2, #16]
    768e:	b2d2      	uxtb	r2, r2
    7690:	701a      	strb	r2, [r3, #0]
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	685b      	ldr	r3, [r3, #4]
    7696:	3301      	adds	r3, #1
    7698:	687a      	ldr	r2, [r7, #4]
    769a:	8a12      	ldrh	r2, [r2, #16]
    769c:	0a12      	lsrs	r2, r2, #8
    769e:	b292      	uxth	r2, r2
    76a0:	f042 0210 	orr.w	r2, r2, #16
    76a4:	b292      	uxth	r2, r2
    76a6:	b2d2      	uxtb	r2, r2
    76a8:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	685b      	ldr	r3, [r3, #4]
    76ae:	3302      	adds	r3, #2
    76b0:	89fa      	ldrh	r2, [r7, #14]
    76b2:	b2d2      	uxtb	r2, r2
    76b4:	701a      	strb	r2, [r3, #0]
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	685b      	ldr	r3, [r3, #4]
    76ba:	3303      	adds	r3, #3
    76bc:	89fa      	ldrh	r2, [r7, #14]
    76be:	0a12      	lsrs	r2, r2, #8
    76c0:	b292      	uxth	r2, r2
    76c2:	b2d2      	uxtb	r2, r2
    76c4:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);
    76c6:	89f9      	ldrh	r1, [r7, #14]
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	8a5b      	ldrh	r3, [r3, #18]
    76cc:	461a      	mov	r2, r3
    76ce:	480d      	ldr	r0, [pc, #52]	; (7704 <hciCoreTxAclContinue+0xc8>)
    76d0:	f002 fe3e 	bl	a350 <WsfTrace>

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	685b      	ldr	r3, [r3, #4]
    76d8:	4619      	mov	r1, r3
    76da:	6878      	ldr	r0, [r7, #4]
    76dc:	f7ff fec8 	bl	7470 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
    76e0:	687b      	ldr	r3, [r7, #4]
    76e2:	8a5b      	ldrh	r3, [r3, #18]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d005      	beq.n	76f4 <hciCoreTxAclContinue+0xb8>
      {
        pConn->pNextTxFrag += aclLen;
    76e8:	687b      	ldr	r3, [r7, #4]
    76ea:	685a      	ldr	r2, [r3, #4]
    76ec:	89fb      	ldrh	r3, [r7, #14]
    76ee:	441a      	add	r2, r3
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
    76f4:	2301      	movs	r3, #1
    76f6:	e000      	b.n	76fa <hciCoreTxAclContinue+0xbe>
    }
  }

  return FALSE;
    76f8:	2300      	movs	r3, #0
}
    76fa:	4618      	mov	r0, r3
    76fc:	3714      	adds	r7, #20
    76fe:	46bd      	mov	sp, r7
    7700:	bd90      	pop	{r4, r7, pc}
    7702:	bf00      	nop
    7704:	00011590 	.word	0x00011590

00007708 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
    7708:	b580      	push	{r7, lr}
    770a:	b082      	sub	sp, #8
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
    7710:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	7d9b      	ldrb	r3, [r3, #22]
    7716:	2b00      	cmp	r3, #0
    7718:	d012      	beq.n	7740 <hciCoreTxAclComplete+0x38>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
    771a:	687b      	ldr	r3, [r7, #4]
    771c:	8a5b      	ldrh	r3, [r3, #18]
    771e:	2b00      	cmp	r3, #0
    7720:	d114      	bne.n	774c <hciCoreTxAclComplete+0x44>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	681b      	ldr	r3, [r3, #0]
    7726:	4618      	mov	r0, r3
    7728:	f003 fba2 	bl	ae70 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
    772c:	687b      	ldr	r3, [r7, #4]
    772e:	2200      	movs	r2, #0
    7730:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	2200      	movs	r2, #0
    7736:	759a      	strb	r2, [r3, #22]
      HCI_TRACE_INFO0("hciCoreTxAclComplete free pTxAclPkt");
    7738:	4806      	ldr	r0, [pc, #24]	; (7754 <hciCoreTxAclComplete+0x4c>)
    773a:	f002 fe09 	bl	a350 <WsfTrace>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
    773e:	e005      	b.n	774c <hciCoreTxAclComplete+0x44>
  else if (pData != NULL)
    7740:	683b      	ldr	r3, [r7, #0]
    7742:	2b00      	cmp	r3, #0
    7744:	d002      	beq.n	774c <hciCoreTxAclComplete+0x44>
    WsfMsgFree(pData);
    7746:	6838      	ldr	r0, [r7, #0]
    7748:	f003 fb92 	bl	ae70 <WsfMsgFree>
}
    774c:	bf00      	nop
    774e:	3708      	adds	r7, #8
    7750:	46bd      	mov	sp, r7
    7752:	bd80      	pop	{r7, pc}
    7754:	000115bc 	.word	0x000115bc

00007758 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
    7758:	b580      	push	{r7, lr}
    775a:	b088      	sub	sp, #32
    775c:	af00      	add	r7, sp, #0
    775e:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
    7760:	2300      	movs	r3, #0
    7762:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
    7764:	2301      	movs	r3, #1
    7766:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	b29a      	uxth	r2, r3
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	3301      	adds	r3, #1
    7772:	781b      	ldrb	r3, [r3, #0]
    7774:	b29b      	uxth	r3, r3
    7776:	021b      	lsls	r3, r3, #8
    7778:	b29b      	uxth	r3, r3
    777a:	4413      	add	r3, r2
    777c:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
    777e:	8b3b      	ldrh	r3, [r7, #24]
    7780:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    7784:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
    7786:	8b3b      	ldrh	r3, [r7, #24]
    7788:	f3c3 030b 	ubfx	r3, r3, #0, #12
    778c:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
    778e:	687b      	ldr	r3, [r7, #4]
    7790:	3302      	adds	r3, #2
    7792:	781b      	ldrb	r3, [r3, #0]
    7794:	b29a      	uxth	r2, r3
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	3303      	adds	r3, #3
    779a:	781b      	ldrb	r3, [r3, #0]
    779c:	b29b      	uxth	r3, r3
    779e:	021b      	lsls	r3, r3, #8
    77a0:	b29b      	uxth	r3, r3
    77a2:	4413      	add	r3, r2
    77a4:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    77a6:	8b3b      	ldrh	r3, [r7, #24]
    77a8:	4618      	mov	r0, r3
    77aa:	f7ff fdfd 	bl	73a8 <hciCoreConnByHandle>
    77ae:	6138      	str	r0, [r7, #16]
    77b0:	693b      	ldr	r3, [r7, #16]
    77b2:	2b00      	cmp	r3, #0
    77b4:	f000 80d9 	beq.w	796a <hciCoreAclReassembly+0x212>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
    77b8:	8afb      	ldrh	r3, [r7, #22]
    77ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    77be:	f040 8093 	bne.w	78e8 <hciCoreAclReassembly+0x190>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
    77c2:	693b      	ldr	r3, [r7, #16]
    77c4:	689b      	ldr	r3, [r3, #8]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d00c      	beq.n	77e4 <hciCoreAclReassembly+0x8c>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
    77ca:	693b      	ldr	r3, [r7, #16]
    77cc:	689b      	ldr	r3, [r3, #8]
    77ce:	4618      	mov	r0, r3
    77d0:	f003 fb4e 	bl	ae70 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    77d4:	693b      	ldr	r3, [r7, #16]
    77d6:	2200      	movs	r2, #0
    77d8:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
    77da:	8b3b      	ldrh	r3, [r7, #24]
    77dc:	4619      	mov	r1, r3
    77de:	486c      	ldr	r0, [pc, #432]	; (7990 <hciCoreAclReassembly+0x238>)
    77e0:	f002 fdb6 	bl	a350 <WsfTrace>
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
    77e4:	8abb      	ldrh	r3, [r7, #20]
    77e6:	2b03      	cmp	r3, #3
    77e8:	d978      	bls.n	78dc <hciCoreAclReassembly+0x184>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	3304      	adds	r3, #4
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	b29a      	uxth	r2, r3
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	3305      	adds	r3, #5
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	b29b      	uxth	r3, r3
    77fa:	021b      	lsls	r3, r3, #8
    77fc:	b29b      	uxth	r3, r3
    77fe:	4413      	add	r3, r2
    7800:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
    7802:	89fb      	ldrh	r3, [r7, #14]
    7804:	3304      	adds	r3, #4
    7806:	4a63      	ldr	r2, [pc, #396]	; (7994 <hciCoreAclReassembly+0x23c>)
    7808:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
    780c:	4293      	cmp	r3, r2
    780e:	dd05      	ble.n	781c <hciCoreAclReassembly+0xc4>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
    7810:	89fb      	ldrh	r3, [r7, #14]
    7812:	4619      	mov	r1, r3
    7814:	4860      	ldr	r0, [pc, #384]	; (7998 <hciCoreAclReassembly+0x240>)
    7816:	f002 fd9b 	bl	a350 <WsfTrace>
    781a:	e0ad      	b.n	7978 <hciCoreAclReassembly+0x220>
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
    781c:	89fb      	ldrh	r3, [r7, #14]
    781e:	1d1a      	adds	r2, r3, #4
    7820:	8abb      	ldrh	r3, [r7, #20]
    7822:	429a      	cmp	r2, r3
    7824:	dd55      	ble.n	78d2 <hciCoreAclReassembly+0x17a>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
    7826:	89fb      	ldrh	r3, [r7, #14]
    7828:	3308      	adds	r3, #8
    782a:	b29b      	uxth	r3, r3
    782c:	2100      	movs	r1, #0
    782e:	4618      	mov	r0, r3
    7830:	f003 faf2 	bl	ae18 <WsfMsgDataAlloc>
    7834:	4602      	mov	r2, r0
    7836:	693b      	ldr	r3, [r7, #16]
    7838:	609a      	str	r2, [r3, #8]
    783a:	693b      	ldr	r3, [r7, #16]
    783c:	689b      	ldr	r3, [r3, #8]
    783e:	2b00      	cmp	r3, #0
    7840:	d040      	beq.n	78c4 <hciCoreAclReassembly+0x16c>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
    7842:	693b      	ldr	r3, [r7, #16]
    7844:	689a      	ldr	r2, [r3, #8]
    7846:	693b      	ldr	r3, [r7, #16]
    7848:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
    784a:	693b      	ldr	r3, [r7, #16]
    784c:	68db      	ldr	r3, [r3, #12]
    784e:	1c59      	adds	r1, r3, #1
    7850:	693a      	ldr	r2, [r7, #16]
    7852:	60d1      	str	r1, [r2, #12]
    7854:	8b3a      	ldrh	r2, [r7, #24]
    7856:	b2d2      	uxtb	r2, r2
    7858:	701a      	strb	r2, [r3, #0]
    785a:	693b      	ldr	r3, [r7, #16]
    785c:	68db      	ldr	r3, [r3, #12]
    785e:	1c59      	adds	r1, r3, #1
    7860:	693a      	ldr	r2, [r7, #16]
    7862:	60d1      	str	r1, [r2, #12]
    7864:	8b3a      	ldrh	r2, [r7, #24]
    7866:	0a12      	lsrs	r2, r2, #8
    7868:	b292      	uxth	r2, r2
    786a:	b2d2      	uxtb	r2, r2
    786c:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
    786e:	693b      	ldr	r3, [r7, #16]
    7870:	68db      	ldr	r3, [r3, #12]
    7872:	1c59      	adds	r1, r3, #1
    7874:	693a      	ldr	r2, [r7, #16]
    7876:	60d1      	str	r1, [r2, #12]
    7878:	89fa      	ldrh	r2, [r7, #14]
    787a:	b2d2      	uxtb	r2, r2
    787c:	3204      	adds	r2, #4
    787e:	b2d2      	uxtb	r2, r2
    7880:	701a      	strb	r2, [r3, #0]
    7882:	693b      	ldr	r3, [r7, #16]
    7884:	68db      	ldr	r3, [r3, #12]
    7886:	1c59      	adds	r1, r3, #1
    7888:	693a      	ldr	r2, [r7, #16]
    788a:	60d1      	str	r1, [r2, #12]
    788c:	89fa      	ldrh	r2, [r7, #14]
    788e:	3204      	adds	r2, #4
    7890:	1212      	asrs	r2, r2, #8
    7892:	b2d2      	uxtb	r2, r2
    7894:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
    7896:	693b      	ldr	r3, [r7, #16]
    7898:	68d8      	ldr	r0, [r3, #12]
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	3304      	adds	r3, #4
    789e:	8aba      	ldrh	r2, [r7, #20]
    78a0:	4619      	mov	r1, r3
    78a2:	f009 fdea 	bl	1147a <memcpy>
            pConn->pNextRxFrag += aclLen;
    78a6:	693b      	ldr	r3, [r7, #16]
    78a8:	68da      	ldr	r2, [r3, #12]
    78aa:	8abb      	ldrh	r3, [r7, #20]
    78ac:	441a      	add	r2, r3
    78ae:	693b      	ldr	r3, [r7, #16]
    78b0:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
    78b2:	89fa      	ldrh	r2, [r7, #14]
    78b4:	8abb      	ldrh	r3, [r7, #20]
    78b6:	1ad3      	subs	r3, r2, r3
    78b8:	b29b      	uxth	r3, r3
    78ba:	3304      	adds	r3, #4
    78bc:	b29a      	uxth	r2, r3
    78be:	693b      	ldr	r3, [r7, #16]
    78c0:	829a      	strh	r2, [r3, #20]
    78c2:	e059      	b.n	7978 <hciCoreAclReassembly+0x220>
          }
          else
          {
            /* alloc failed; discard */
            HCI_TRACE_WARN1("reassembly alloc failed len=%u", (l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN));
    78c4:	89fb      	ldrh	r3, [r7, #14]
    78c6:	3308      	adds	r3, #8
    78c8:	4619      	mov	r1, r3
    78ca:	4834      	ldr	r0, [pc, #208]	; (799c <hciCoreAclReassembly+0x244>)
    78cc:	f002 fd40 	bl	a350 <WsfTrace>
    78d0:	e052      	b.n	7978 <hciCoreAclReassembly+0x220>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
    78d6:	2300      	movs	r3, #0
    78d8:	76fb      	strb	r3, [r7, #27]
    78da:	e04d      	b.n	7978 <hciCoreAclReassembly+0x220>
        }
      }
      else
      {
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
    78dc:	8abb      	ldrh	r3, [r7, #20]
    78de:	4619      	mov	r1, r3
    78e0:	482f      	ldr	r0, [pc, #188]	; (79a0 <hciCoreAclReassembly+0x248>)
    78e2:	f002 fd35 	bl	a350 <WsfTrace>
    78e6:	e047      	b.n	7978 <hciCoreAclReassembly+0x220>
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
    78e8:	8afb      	ldrh	r3, [r7, #22]
    78ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    78ee:	d136      	bne.n	795e <hciCoreAclReassembly+0x206>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
    78f0:	693b      	ldr	r3, [r7, #16]
    78f2:	689b      	ldr	r3, [r3, #8]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d02c      	beq.n	7952 <hciCoreAclReassembly+0x1fa>
      {
        if (aclLen <= pConn->rxAclRemLen)
    78f8:	693b      	ldr	r3, [r7, #16]
    78fa:	8a9b      	ldrh	r3, [r3, #20]
    78fc:	8aba      	ldrh	r2, [r7, #20]
    78fe:	429a      	cmp	r2, r3
    7900:	d81f      	bhi.n	7942 <hciCoreAclReassembly+0x1ea>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
    7902:	693b      	ldr	r3, [r7, #16]
    7904:	68d8      	ldr	r0, [r3, #12]
    7906:	687b      	ldr	r3, [r7, #4]
    7908:	3304      	adds	r3, #4
    790a:	8aba      	ldrh	r2, [r7, #20]
    790c:	4619      	mov	r1, r3
    790e:	f009 fdb4 	bl	1147a <memcpy>
          pConn->pNextRxFrag += aclLen;
    7912:	693b      	ldr	r3, [r7, #16]
    7914:	68da      	ldr	r2, [r3, #12]
    7916:	8abb      	ldrh	r3, [r7, #20]
    7918:	441a      	add	r2, r3
    791a:	693b      	ldr	r3, [r7, #16]
    791c:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
    791e:	693b      	ldr	r3, [r7, #16]
    7920:	8a9a      	ldrh	r2, [r3, #20]
    7922:	8abb      	ldrh	r3, [r7, #20]
    7924:	1ad3      	subs	r3, r2, r3
    7926:	b29a      	uxth	r2, r3
    7928:	693b      	ldr	r3, [r7, #16]
    792a:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
    792c:	693b      	ldr	r3, [r7, #16]
    792e:	8a9b      	ldrh	r3, [r3, #20]
    7930:	2b00      	cmp	r3, #0
    7932:	d121      	bne.n	7978 <hciCoreAclReassembly+0x220>
          {
            pDataRtn = pConn->pRxAclPkt;
    7934:	693b      	ldr	r3, [r7, #16]
    7936:	689b      	ldr	r3, [r3, #8]
    7938:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
    793a:	693b      	ldr	r3, [r7, #16]
    793c:	2200      	movs	r2, #0
    793e:	609a      	str	r2, [r3, #8]
    7940:	e01a      	b.n	7978 <hciCoreAclReassembly+0x220>
          }
        }
        else
        {
          HCI_TRACE_WARN2("continuation pkt too long len=%u RemLen=%u", aclLen, pConn->rxAclRemLen);
    7942:	8ab9      	ldrh	r1, [r7, #20]
    7944:	693b      	ldr	r3, [r7, #16]
    7946:	8a9b      	ldrh	r3, [r3, #20]
    7948:	461a      	mov	r2, r3
    794a:	4816      	ldr	r0, [pc, #88]	; (79a4 <hciCoreAclReassembly+0x24c>)
    794c:	f002 fd00 	bl	a350 <WsfTrace>
    7950:	e012      	b.n	7978 <hciCoreAclReassembly+0x220>
        }
      }
      else
      {
        HCI_TRACE_WARN1("unexpected continuation pkt handle=0x%04x", handle);
    7952:	8b3b      	ldrh	r3, [r7, #24]
    7954:	4619      	mov	r1, r3
    7956:	4814      	ldr	r0, [pc, #80]	; (79a8 <hciCoreAclReassembly+0x250>)
    7958:	f002 fcfa 	bl	a350 <WsfTrace>
    795c:	e00c      	b.n	7978 <hciCoreAclReassembly+0x220>
      }
    }
    /* else unknown packet type */
    else
    {
      HCI_TRACE_WARN1("unknown pb flags=0x%04x", pbf);
    795e:	8afb      	ldrh	r3, [r7, #22]
    7960:	4619      	mov	r1, r3
    7962:	4812      	ldr	r0, [pc, #72]	; (79ac <hciCoreAclReassembly+0x254>)
    7964:	f002 fcf4 	bl	a350 <WsfTrace>
    7968:	e006      	b.n	7978 <hciCoreAclReassembly+0x220>
    }
  }
  else
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
    796a:	8b3b      	ldrh	r3, [r7, #24]
    796c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7970:	4619      	mov	r1, r3
    7972:	480f      	ldr	r0, [pc, #60]	; (79b0 <hciCoreAclReassembly+0x258>)
    7974:	f002 fcec 	bl	a350 <WsfTrace>
  }

  if (freeData)
    7978:	7efb      	ldrb	r3, [r7, #27]
    797a:	2b00      	cmp	r3, #0
    797c:	d002      	beq.n	7984 <hciCoreAclReassembly+0x22c>
  {
    WsfMsgFree(pData);
    797e:	6878      	ldr	r0, [r7, #4]
    7980:	f003 fa76 	bl	ae70 <WsfMsgFree>
  }

  return pDataRtn;
    7984:	69fb      	ldr	r3, [r7, #28]
}
    7986:	4618      	mov	r0, r3
    7988:	3720      	adds	r7, #32
    798a:	46bd      	mov	sp, r7
    798c:	bd80      	pop	{r7, pc}
    798e:	bf00      	nop
    7990:	000115e0 	.word	0x000115e0
    7994:	10002630 	.word	0x10002630
    7998:	00011604 	.word	0x00011604
    799c:	0001162c 	.word	0x0001162c
    79a0:	0001164c 	.word	0x0001164c
    79a4:	00011668 	.word	0x00011668
    79a8:	00011694 	.word	0x00011694
    79ac:	000116c0 	.word	0x000116c0
    79b0:	000116d8 	.word	0x000116d8

000079b4 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
    79b4:	b580      	push	{r7, lr}
    79b6:	b082      	sub	sp, #8
    79b8:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    79ba:	4b19      	ldr	r3, [pc, #100]	; (7a20 <HciCoreInit+0x6c>)
    79bc:	2200      	movs	r2, #0
    79be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    79c2:	4b17      	ldr	r3, [pc, #92]	; (7a20 <HciCoreInit+0x6c>)
    79c4:	2200      	movs	r2, #0
    79c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
    79ca:	2300      	movs	r3, #0
    79cc:	71fb      	strb	r3, [r7, #7]
    79ce:	e00d      	b.n	79ec <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
    79d0:	79fa      	ldrb	r2, [r7, #7]
    79d2:	4913      	ldr	r1, [pc, #76]	; (7a20 <HciCoreInit+0x6c>)
    79d4:	4613      	mov	r3, r2
    79d6:	00db      	lsls	r3, r3, #3
    79d8:	1a9b      	subs	r3, r3, r2
    79da:	009b      	lsls	r3, r3, #2
    79dc:	440b      	add	r3, r1
    79de:	3310      	adds	r3, #16
    79e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    79e4:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
    79e6:	79fb      	ldrb	r3, [r7, #7]
    79e8:	3301      	adds	r3, #1
    79ea:	71fb      	strb	r3, [r7, #7]
    79ec:	79fb      	ldrb	r3, [r7, #7]
    79ee:	2b07      	cmp	r3, #7
    79f0:	d9ee      	bls.n	79d0 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
    79f2:	4b0b      	ldr	r3, [pc, #44]	; (7a20 <HciCoreInit+0x6c>)
    79f4:	221b      	movs	r2, #27
    79f6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
    79fa:	4b09      	ldr	r3, [pc, #36]	; (7a20 <HciCoreInit+0x6c>)
    79fc:	2205      	movs	r2, #5
    79fe:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
    7a02:	4b07      	ldr	r3, [pc, #28]	; (7a20 <HciCoreInit+0x6c>)
    7a04:	2201      	movs	r2, #1
    7a06:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
    7a0a:	4b05      	ldr	r3, [pc, #20]	; (7a20 <HciCoreInit+0x6c>)
    7a0c:	2200      	movs	r2, #0
    7a0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
    7a12:	f000 f897 	bl	7b44 <hciCoreInit>
}
    7a16:	bf00      	nop
    7a18:	3708      	adds	r7, #8
    7a1a:	46bd      	mov	sp, r7
    7a1c:	bd80      	pop	{r7, pc}
    7a1e:	bf00      	nop
    7a20:	10002630 	.word	0x10002630

00007a24 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	af00      	add	r7, sp, #0
  /* set resetting state */
  hciCb.resetting = TRUE;
    7a28:	4b03      	ldr	r3, [pc, #12]	; (7a38 <HciResetSequence+0x14>)
    7a2a:	2201      	movs	r2, #1
    7a2c:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
    7a2e:	f002 f977 	bl	9d20 <hciCoreResetStart>
}
    7a32:	bf00      	nop
    7a34:	bd80      	pop	{r7, pc}
    7a36:	bf00      	nop
    7a38:	100028f4 	.word	0x100028f4

00007a3c <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
    7a3c:	b480      	push	{r7}
    7a3e:	b083      	sub	sp, #12
    7a40:	af00      	add	r7, sp, #0
    7a42:	4603      	mov	r3, r0
    7a44:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
    7a46:	4a05      	ldr	r2, [pc, #20]	; (7a5c <HciSetMaxRxAclLen+0x20>)
    7a48:	88fb      	ldrh	r3, [r7, #6]
    7a4a:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
    7a4e:	bf00      	nop
    7a50:	370c      	adds	r7, #12
    7a52:	46bd      	mov	sp, r7
    7a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a58:	4770      	bx	lr
    7a5a:	bf00      	nop
    7a5c:	10002630 	.word	0x10002630

00007a60 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
    7a60:	b590      	push	{r4, r7, lr}
    7a62:	b085      	sub	sp, #20
    7a64:	af00      	add	r7, sp, #0
    7a66:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	781b      	ldrb	r3, [r3, #0]
    7a6c:	b29a      	uxth	r2, r3
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	3301      	adds	r3, #1
    7a72:	781b      	ldrb	r3, [r3, #0]
    7a74:	b29b      	uxth	r3, r3
    7a76:	021b      	lsls	r3, r3, #8
    7a78:	b29b      	uxth	r3, r3
    7a7a:	4413      	add	r3, r2
    7a7c:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	3302      	adds	r3, #2
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	b29a      	uxth	r2, r3
    7a86:	687b      	ldr	r3, [r7, #4]
    7a88:	3303      	adds	r3, #3
    7a8a:	781b      	ldrb	r3, [r3, #0]
    7a8c:	b29b      	uxth	r3, r3
    7a8e:	021b      	lsls	r3, r3, #8
    7a90:	b29b      	uxth	r3, r3
    7a92:	4413      	add	r3, r2
    7a94:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    7a96:	89fb      	ldrh	r3, [r7, #14]
    7a98:	4618      	mov	r0, r3
    7a9a:	f7ff fc85 	bl	73a8 <hciCoreConnByHandle>
    7a9e:	60b8      	str	r0, [r7, #8]
    7aa0:	68bb      	ldr	r3, [r7, #8]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d03a      	beq.n	7b1c <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0 && hciCmdCb.numCmdPkts > 0)
#else
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
    7aa6:	4823      	ldr	r0, [pc, #140]	; (7b34 <HciSendAclData+0xd4>)
    7aa8:	f003 fafd 	bl	b0a6 <WsfQueueEmpty>
    7aac:	4603      	mov	r3, r0
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d00b      	beq.n	7aca <HciSendAclData+0x6a>
    7ab2:	4b21      	ldr	r3, [pc, #132]	; (7b38 <HciSendAclData+0xd8>)
    7ab4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7ab8:	2b00      	cmp	r3, #0
    7aba:	d006      	beq.n	7aca <HciSendAclData+0x6a>
#endif
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
    7abc:	89bb      	ldrh	r3, [r7, #12]
    7abe:	687a      	ldr	r2, [r7, #4]
    7ac0:	4619      	mov	r1, r3
    7ac2:	68b8      	ldr	r0, [r7, #8]
    7ac4:	f7ff fd6c 	bl	75a0 <hciCoreTxAclStart>
    7ac8:	e004      	b.n	7ad4 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
    7aca:	687a      	ldr	r2, [r7, #4]
    7acc:	2100      	movs	r1, #0
    7ace:	4819      	ldr	r0, [pc, #100]	; (7b34 <HciSendAclData+0xd4>)
    7ad0:	f003 f9f3 	bl	aeba <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
    7ad4:	89bb      	ldrh	r3, [r7, #12]
    7ad6:	1e5c      	subs	r4, r3, #1
    7ad8:	f000 f924 	bl	7d24 <HciGetBufSize>
    7adc:	4603      	mov	r3, r0
    7ade:	fb94 f3f3 	sdiv	r3, r4, r3
    7ae2:	1c59      	adds	r1, r3, #1
    7ae4:	68bb      	ldr	r3, [r7, #8]
    7ae6:	7e1a      	ldrb	r2, [r3, #24]
    7ae8:	b2cb      	uxtb	r3, r1
    7aea:	4413      	add	r3, r2
    7aec:	b2da      	uxtb	r2, r3
    7aee:	68bb      	ldr	r3, [r7, #8]
    7af0:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
    7af2:	68bb      	ldr	r3, [r7, #8]
    7af4:	7e1a      	ldrb	r2, [r3, #24]
    7af6:	4b10      	ldr	r3, [pc, #64]	; (7b38 <HciSendAclData+0xd8>)
    7af8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
    7afc:	429a      	cmp	r2, r3
    7afe:	d315      	bcc.n	7b2c <HciSendAclData+0xcc>
    7b00:	68bb      	ldr	r3, [r7, #8]
    7b02:	7ddb      	ldrb	r3, [r3, #23]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d111      	bne.n	7b2c <HciSendAclData+0xcc>
    {
      pConn->flowDisabled = TRUE;
    7b08:	68bb      	ldr	r3, [r7, #8]
    7b0a:	2201      	movs	r2, #1
    7b0c:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
    7b0e:	4b0b      	ldr	r3, [pc, #44]	; (7b3c <HciSendAclData+0xdc>)
    7b10:	695b      	ldr	r3, [r3, #20]
    7b12:	89fa      	ldrh	r2, [r7, #14]
    7b14:	2101      	movs	r1, #1
    7b16:	4610      	mov	r0, r2
    7b18:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
    7b1a:	e007      	b.n	7b2c <HciSendAclData+0xcc>
    WsfMsgFree(pData);
    7b1c:	6878      	ldr	r0, [r7, #4]
    7b1e:	f003 f9a7 	bl	ae70 <WsfMsgFree>
    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
    7b22:	89fb      	ldrh	r3, [r7, #14]
    7b24:	4619      	mov	r1, r3
    7b26:	4806      	ldr	r0, [pc, #24]	; (7b40 <HciSendAclData+0xe0>)
    7b28:	f002 fc12 	bl	a350 <WsfTrace>
}
    7b2c:	bf00      	nop
    7b2e:	3714      	adds	r7, #20
    7b30:	46bd      	mov	sp, r7
    7b32:	bd90      	pop	{r4, r7, pc}
    7b34:	10002720 	.word	0x10002720
    7b38:	10002630 	.word	0x10002630
    7b3c:	100028f4 	.word	0x100028f4
    7b40:	000116fc 	.word	0x000116fc

00007b44 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
    7b44:	b580      	push	{r7, lr}
    7b46:	af00      	add	r7, sp, #0
  hciCmdInit();
    7b48:	f7fe fc3a 	bl	63c0 <hciCmdInit>
}
    7b4c:	bf00      	nop
    7b4e:	bd80      	pop	{r7, pc}

00007b50 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
    7b50:	b580      	push	{r7, lr}
    7b52:	b086      	sub	sp, #24
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
    7b58:	2300      	movs	r3, #0
    7b5a:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	1c5a      	adds	r2, r3, #1
    7b60:	607a      	str	r2, [r7, #4]
    7b62:	781b      	ldrb	r3, [r3, #0]
    7b64:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
    7b66:	e04c      	b.n	7c02 <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	b29a      	uxth	r2, r3
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	3301      	adds	r3, #1
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	b29b      	uxth	r3, r3
    7b76:	021b      	lsls	r3, r3, #8
    7b78:	b29b      	uxth	r3, r3
    7b7a:	4413      	add	r3, r2
    7b7c:	82bb      	strh	r3, [r7, #20]
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	3302      	adds	r3, #2
    7b82:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	781b      	ldrb	r3, [r3, #0]
    7b88:	b29a      	uxth	r2, r3
    7b8a:	687b      	ldr	r3, [r7, #4]
    7b8c:	3301      	adds	r3, #1
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	b29b      	uxth	r3, r3
    7b92:	021b      	lsls	r3, r3, #8
    7b94:	b29b      	uxth	r3, r3
    7b96:	4413      	add	r3, r2
    7b98:	827b      	strh	r3, [r7, #18]
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	3302      	adds	r3, #2
    7b9e:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    7ba0:	8abb      	ldrh	r3, [r7, #20]
    7ba2:	4618      	mov	r0, r3
    7ba4:	f7ff fc00 	bl	73a8 <hciCoreConnByHandle>
    7ba8:	60f8      	str	r0, [r7, #12]
    7baa:	68fb      	ldr	r3, [r7, #12]
    7bac:	2b00      	cmp	r3, #0
    7bae:	d028      	beq.n	7c02 <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
    7bb0:	68fb      	ldr	r3, [r7, #12]
    7bb2:	7e5a      	ldrb	r2, [r3, #25]
    7bb4:	8a7b      	ldrh	r3, [r7, #18]
    7bb6:	b2db      	uxtb	r3, r3
    7bb8:	1ad3      	subs	r3, r2, r3
    7bba:	b2da      	uxtb	r2, r3
    7bbc:	68fb      	ldr	r3, [r7, #12]
    7bbe:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
    7bc0:	68fb      	ldr	r3, [r7, #12]
    7bc2:	7e1a      	ldrb	r2, [r3, #24]
    7bc4:	8a7b      	ldrh	r3, [r7, #18]
    7bc6:	b2db      	uxtb	r3, r3
    7bc8:	1ad3      	subs	r3, r2, r3
    7bca:	b2da      	uxtb	r2, r3
    7bcc:	68fb      	ldr	r3, [r7, #12]
    7bce:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
    7bd0:	8a7b      	ldrh	r3, [r7, #18]
    7bd2:	b2da      	uxtb	r2, r3
    7bd4:	7dbb      	ldrb	r3, [r7, #22]
    7bd6:	4413      	add	r3, r2
    7bd8:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    7bda:	68fb      	ldr	r3, [r7, #12]
    7bdc:	7ddb      	ldrb	r3, [r3, #23]
    7bde:	2b00      	cmp	r3, #0
    7be0:	d00f      	beq.n	7c02 <hciCoreNumCmplPkts+0xb2>
    7be2:	68fb      	ldr	r3, [r7, #12]
    7be4:	7e1a      	ldrb	r2, [r3, #24]
    7be6:	4b0d      	ldr	r3, [pc, #52]	; (7c1c <hciCoreNumCmplPkts+0xcc>)
    7be8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
    7bec:	429a      	cmp	r2, r3
    7bee:	d808      	bhi.n	7c02 <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
    7bf0:	68fb      	ldr	r3, [r7, #12]
    7bf2:	2200      	movs	r2, #0
    7bf4:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
    7bf6:	4b0a      	ldr	r3, [pc, #40]	; (7c20 <hciCoreNumCmplPkts+0xd0>)
    7bf8:	695b      	ldr	r3, [r3, #20]
    7bfa:	8aba      	ldrh	r2, [r7, #20]
    7bfc:	2100      	movs	r1, #0
    7bfe:	4610      	mov	r0, r2
    7c00:	4798      	blx	r3
  while (numHandles-- > 0)
    7c02:	7dfb      	ldrb	r3, [r7, #23]
    7c04:	1e5a      	subs	r2, r3, #1
    7c06:	75fa      	strb	r2, [r7, #23]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d1ad      	bne.n	7b68 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
    7c0c:	7dbb      	ldrb	r3, [r7, #22]
    7c0e:	4618      	mov	r0, r3
    7c10:	f7ff fc56 	bl	74c0 <hciCoreTxReady>
}
    7c14:	bf00      	nop
    7c16:	3718      	adds	r7, #24
    7c18:	46bd      	mov	sp, r7
    7c1a:	bd80      	pop	{r7, pc}
    7c1c:	10002630 	.word	0x10002630
    7c20:	100028f4 	.word	0x100028f4

00007c24 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
    7c24:	b580      	push	{r7, lr}
    7c26:	b082      	sub	sp, #8
    7c28:	af00      	add	r7, sp, #0
    7c2a:	4603      	mov	r3, r0
    7c2c:	6039      	str	r1, [r7, #0]
    7c2e:	71fb      	strb	r3, [r7, #7]
  /* dump event for protocol analysis */
  if (msgType == HCI_EVT_TYPE)
    7c30:	79fb      	ldrb	r3, [r7, #7]
    7c32:	2b04      	cmp	r3, #4
    7c34:	d109      	bne.n	7c4a <hciCoreRecv+0x26>
  {
    HCI_PDUMP_EVT(*(pCoreRecvMsg + 1) + HCI_EVT_HDR_LEN, pCoreRecvMsg);
    7c36:	683b      	ldr	r3, [r7, #0]
    7c38:	3301      	adds	r3, #1
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	3302      	adds	r3, #2
    7c3e:	683a      	ldr	r2, [r7, #0]
    7c40:	4619      	mov	r1, r3
    7c42:	2004      	movs	r0, #4
    7c44:	f002 fb50 	bl	a2e8 <WsfPacketTrace>
    7c48:	e00b      	b.n	7c62 <hciCoreRecv+0x3e>
  }
  else if (msgType == HCI_ACL_TYPE)
    7c4a:	79fb      	ldrb	r3, [r7, #7]
    7c4c:	2b02      	cmp	r3, #2
    7c4e:	d108      	bne.n	7c62 <hciCoreRecv+0x3e>
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
    7c50:	683b      	ldr	r3, [r7, #0]
    7c52:	3302      	adds	r3, #2
    7c54:	781b      	ldrb	r3, [r3, #0]
    7c56:	3304      	adds	r3, #4
    7c58:	683a      	ldr	r2, [r7, #0]
    7c5a:	4619      	mov	r1, r3
    7c5c:	2002      	movs	r0, #2
    7c5e:	f002 fb43 	bl	a2e8 <WsfPacketTrace>
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
    7c62:	79fb      	ldrb	r3, [r7, #7]
    7c64:	683a      	ldr	r2, [r7, #0]
    7c66:	4619      	mov	r1, r3
    7c68:	4806      	ldr	r0, [pc, #24]	; (7c84 <hciCoreRecv+0x60>)
    7c6a:	f003 f926 	bl	aeba <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
    7c6e:	4b05      	ldr	r3, [pc, #20]	; (7c84 <hciCoreRecv+0x60>)
    7c70:	7e1b      	ldrb	r3, [r3, #24]
    7c72:	2101      	movs	r1, #1
    7c74:	4618      	mov	r0, r3
    7c76:	f002 fa29 	bl	a0cc <WsfSetEvent>
}
    7c7a:	bf00      	nop
    7c7c:	3708      	adds	r7, #8
    7c7e:	46bd      	mov	sp, r7
    7c80:	bd80      	pop	{r7, pc}
    7c82:	bf00      	nop
    7c84:	100028f4 	.word	0x100028f4

00007c88 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    7c88:	b580      	push	{r7, lr}
    7c8a:	b084      	sub	sp, #16
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	4603      	mov	r3, r0
    7c90:	6039      	str	r1, [r7, #0]
    7c92:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
    7c94:	683b      	ldr	r3, [r7, #0]
    7c96:	2b00      	cmp	r3, #0
    7c98:	d007      	beq.n	7caa <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
    7c9a:	683b      	ldr	r3, [r7, #0]
    7c9c:	789b      	ldrb	r3, [r3, #2]
    7c9e:	2b01      	cmp	r3, #1
    7ca0:	d12f      	bne.n	7d02 <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
    7ca2:	6838      	ldr	r0, [r7, #0]
    7ca4:	f7fe fba8 	bl	63f8 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
    7ca8:	e02b      	b.n	7d02 <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
    7caa:	79fb      	ldrb	r3, [r7, #7]
    7cac:	f003 0301 	and.w	r3, r3, #1
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d026      	beq.n	7d02 <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    7cb4:	e01b      	b.n	7cee <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
    7cb6:	7afb      	ldrb	r3, [r7, #11]
    7cb8:	2b04      	cmp	r3, #4
    7cba:	d10d      	bne.n	7cd8 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
    7cbc:	68f8      	ldr	r0, [r7, #12]
    7cbe:	f001 fd01 	bl	96c4 <hciEvtProcessMsg>
        if (hciCb.resetting)
    7cc2:	4b12      	ldr	r3, [pc, #72]	; (7d0c <HciCoreHandler+0x84>)
    7cc4:	7e5b      	ldrb	r3, [r3, #25]
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d002      	beq.n	7cd0 <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
    7cca:	68f8      	ldr	r0, [r7, #12]
    7ccc:	f002 f82e 	bl	9d2c <hciCoreResetSequence>
        WsfMsgFree(pBuf);
    7cd0:	68f8      	ldr	r0, [r7, #12]
    7cd2:	f003 f8cd 	bl	ae70 <WsfMsgFree>
    7cd6:	e00a      	b.n	7cee <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
    7cd8:	68f8      	ldr	r0, [r7, #12]
    7cda:	f7ff fd3d 	bl	7758 <hciCoreAclReassembly>
    7cde:	60f8      	str	r0, [r7, #12]
    7ce0:	68fb      	ldr	r3, [r7, #12]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d003      	beq.n	7cee <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
    7ce6:	4b09      	ldr	r3, [pc, #36]	; (7d0c <HciCoreHandler+0x84>)
    7ce8:	691b      	ldr	r3, [r3, #16]
    7cea:	68f8      	ldr	r0, [r7, #12]
    7cec:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    7cee:	f107 030b 	add.w	r3, r7, #11
    7cf2:	4619      	mov	r1, r3
    7cf4:	4805      	ldr	r0, [pc, #20]	; (7d0c <HciCoreHandler+0x84>)
    7cf6:	f003 f8f5 	bl	aee4 <WsfMsgDeq>
    7cfa:	60f8      	str	r0, [r7, #12]
    7cfc:	68fb      	ldr	r3, [r7, #12]
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d1d9      	bne.n	7cb6 <HciCoreHandler+0x2e>
}
    7d02:	bf00      	nop
    7d04:	3710      	adds	r7, #16
    7d06:	46bd      	mov	sp, r7
    7d08:	bd80      	pop	{r7, pc}
    7d0a:	bf00      	nop
    7d0c:	100028f4 	.word	0x100028f4

00007d10 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
    7d10:	b480      	push	{r7}
    7d12:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
    7d14:	4b02      	ldr	r3, [pc, #8]	; (7d20 <HciGetBdAddr+0x10>)
}
    7d16:	4618      	mov	r0, r3
    7d18:	46bd      	mov	sp, r7
    7d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d1e:	4770      	bx	lr
    7d20:	10002718 	.word	0x10002718

00007d24 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
    7d24:	b480      	push	{r7}
    7d26:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
    7d28:	4b03      	ldr	r3, [pc, #12]	; (7d38 <HciGetBufSize+0x14>)
    7d2a:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
    7d2e:	4618      	mov	r0, r3
    7d30:	46bd      	mov	sp, r7
    7d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d36:	4770      	bx	lr
    7d38:	10002630 	.word	0x10002630

00007d3c <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
    7d3c:	b480      	push	{r7}
    7d3e:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
    7d40:	4b05      	ldr	r3, [pc, #20]	; (7d58 <HciGetLeSupFeat+0x1c>)
    7d42:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    7d46:	f023 0302 	bic.w	r3, r3, #2
    7d4a:	b29b      	uxth	r3, r3
}
    7d4c:	4618      	mov	r0, r3
    7d4e:	46bd      	mov	sp, r7
    7d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d54:	4770      	bx	lr
    7d56:	bf00      	nop
    7d58:	10002630 	.word	0x10002630

00007d5c <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
    7d5c:	b480      	push	{r7}
    7d5e:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
    7d60:	4b03      	ldr	r3, [pc, #12]	; (7d70 <HciGetMaxRxAclLen+0x14>)
    7d62:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
    7d66:	4618      	mov	r0, r3
    7d68:	46bd      	mov	sp, r7
    7d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6e:	4770      	bx	lr
    7d70:	10002630 	.word	0x10002630

00007d74 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b084      	sub	sp, #16
    7d78:	af00      	add	r7, sp, #0
    7d7a:	60f8      	str	r0, [r7, #12]
    7d7c:	60b9      	str	r1, [r7, #8]
    7d7e:	4613      	mov	r3, r2
    7d80:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    7d82:	68bb      	ldr	r3, [r7, #8]
    7d84:	1c5a      	adds	r2, r3, #1
    7d86:	60ba      	str	r2, [r7, #8]
    7d88:	781a      	ldrb	r2, [r3, #0]
    7d8a:	68fb      	ldr	r3, [r7, #12]
    7d8c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    7d8e:	68bb      	ldr	r3, [r7, #8]
    7d90:	781b      	ldrb	r3, [r3, #0]
    7d92:	b29a      	uxth	r2, r3
    7d94:	68bb      	ldr	r3, [r7, #8]
    7d96:	3301      	adds	r3, #1
    7d98:	781b      	ldrb	r3, [r3, #0]
    7d9a:	b29b      	uxth	r3, r3
    7d9c:	021b      	lsls	r3, r3, #8
    7d9e:	b29b      	uxth	r3, r3
    7da0:	4413      	add	r3, r2
    7da2:	b29a      	uxth	r2, r3
    7da4:	68fb      	ldr	r3, [r7, #12]
    7da6:	80da      	strh	r2, [r3, #6]
    7da8:	68bb      	ldr	r3, [r7, #8]
    7daa:	3302      	adds	r3, #2
    7dac:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    7dae:	68bb      	ldr	r3, [r7, #8]
    7db0:	1c5a      	adds	r2, r3, #1
    7db2:	60ba      	str	r2, [r7, #8]
    7db4:	781a      	ldrb	r2, [r3, #0]
    7db6:	68fb      	ldr	r3, [r7, #12]
    7db8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    7dba:	68bb      	ldr	r3, [r7, #8]
    7dbc:	1c5a      	adds	r2, r3, #1
    7dbe:	60ba      	str	r2, [r7, #8]
    7dc0:	781a      	ldrb	r2, [r3, #0]
    7dc2:	68fb      	ldr	r3, [r7, #12]
    7dc4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    7dc6:	68fb      	ldr	r3, [r7, #12]
    7dc8:	330a      	adds	r3, #10
    7dca:	68b9      	ldr	r1, [r7, #8]
    7dcc:	4618      	mov	r0, r3
    7dce:	f005 fa1b 	bl	d208 <BdaCpy>
    7dd2:	68bb      	ldr	r3, [r7, #8]
    7dd4:	3306      	adds	r3, #6
    7dd6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    7dd8:	68bb      	ldr	r3, [r7, #8]
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	b29a      	uxth	r2, r3
    7dde:	68bb      	ldr	r3, [r7, #8]
    7de0:	3301      	adds	r3, #1
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	b29b      	uxth	r3, r3
    7de6:	021b      	lsls	r3, r3, #8
    7de8:	b29b      	uxth	r3, r3
    7dea:	4413      	add	r3, r2
    7dec:	b29a      	uxth	r2, r3
    7dee:	68fb      	ldr	r3, [r7, #12]
    7df0:	821a      	strh	r2, [r3, #16]
    7df2:	68bb      	ldr	r3, [r7, #8]
    7df4:	3302      	adds	r3, #2
    7df6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    7df8:	68bb      	ldr	r3, [r7, #8]
    7dfa:	781b      	ldrb	r3, [r3, #0]
    7dfc:	b29a      	uxth	r2, r3
    7dfe:	68bb      	ldr	r3, [r7, #8]
    7e00:	3301      	adds	r3, #1
    7e02:	781b      	ldrb	r3, [r3, #0]
    7e04:	b29b      	uxth	r3, r3
    7e06:	021b      	lsls	r3, r3, #8
    7e08:	b29b      	uxth	r3, r3
    7e0a:	4413      	add	r3, r2
    7e0c:	b29a      	uxth	r2, r3
    7e0e:	68fb      	ldr	r3, [r7, #12]
    7e10:	825a      	strh	r2, [r3, #18]
    7e12:	68bb      	ldr	r3, [r7, #8]
    7e14:	3302      	adds	r3, #2
    7e16:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    7e18:	68bb      	ldr	r3, [r7, #8]
    7e1a:	781b      	ldrb	r3, [r3, #0]
    7e1c:	b29a      	uxth	r2, r3
    7e1e:	68bb      	ldr	r3, [r7, #8]
    7e20:	3301      	adds	r3, #1
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	b29b      	uxth	r3, r3
    7e26:	021b      	lsls	r3, r3, #8
    7e28:	b29b      	uxth	r3, r3
    7e2a:	4413      	add	r3, r2
    7e2c:	b29a      	uxth	r2, r3
    7e2e:	68fb      	ldr	r3, [r7, #12]
    7e30:	829a      	strh	r2, [r3, #20]
    7e32:	68bb      	ldr	r3, [r7, #8]
    7e34:	3302      	adds	r3, #2
    7e36:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    7e38:	68bb      	ldr	r3, [r7, #8]
    7e3a:	1c5a      	adds	r2, r3, #1
    7e3c:	60ba      	str	r2, [r7, #8]
    7e3e:	781a      	ldrb	r2, [r3, #0]
    7e40:	68fb      	ldr	r3, [r7, #12]
    7e42:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	3317      	adds	r3, #23
    7e48:	2206      	movs	r2, #6
    7e4a:	2100      	movs	r1, #0
    7e4c:	4618      	mov	r0, r3
    7e4e:	f009 fb39 	bl	114c4 <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
    7e52:	68fb      	ldr	r3, [r7, #12]
    7e54:	331d      	adds	r3, #29
    7e56:	2206      	movs	r2, #6
    7e58:	2100      	movs	r1, #0
    7e5a:	4618      	mov	r0, r3
    7e5c:	f009 fb32 	bl	114c4 <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    7e60:	68fb      	ldr	r3, [r7, #12]
    7e62:	88da      	ldrh	r2, [r3, #6]
    7e64:	68fb      	ldr	r3, [r7, #12]
    7e66:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    7e68:	68fb      	ldr	r3, [r7, #12]
    7e6a:	791a      	ldrb	r2, [r3, #4]
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	70da      	strb	r2, [r3, #3]
}
    7e70:	bf00      	nop
    7e72:	3710      	adds	r7, #16
    7e74:	46bd      	mov	sp, r7
    7e76:	bd80      	pop	{r7, pc}

00007e78 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7e78:	b580      	push	{r7, lr}
    7e7a:	b084      	sub	sp, #16
    7e7c:	af00      	add	r7, sp, #0
    7e7e:	60f8      	str	r0, [r7, #12]
    7e80:	60b9      	str	r1, [r7, #8]
    7e82:	4613      	mov	r3, r2
    7e84:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    7e86:	68bb      	ldr	r3, [r7, #8]
    7e88:	1c5a      	adds	r2, r3, #1
    7e8a:	60ba      	str	r2, [r7, #8]
    7e8c:	781a      	ldrb	r2, [r3, #0]
    7e8e:	68fb      	ldr	r3, [r7, #12]
    7e90:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    7e92:	68bb      	ldr	r3, [r7, #8]
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	b29a      	uxth	r2, r3
    7e98:	68bb      	ldr	r3, [r7, #8]
    7e9a:	3301      	adds	r3, #1
    7e9c:	781b      	ldrb	r3, [r3, #0]
    7e9e:	b29b      	uxth	r3, r3
    7ea0:	021b      	lsls	r3, r3, #8
    7ea2:	b29b      	uxth	r3, r3
    7ea4:	4413      	add	r3, r2
    7ea6:	b29a      	uxth	r2, r3
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	80da      	strh	r2, [r3, #6]
    7eac:	68bb      	ldr	r3, [r7, #8]
    7eae:	3302      	adds	r3, #2
    7eb0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    7eb2:	68bb      	ldr	r3, [r7, #8]
    7eb4:	1c5a      	adds	r2, r3, #1
    7eb6:	60ba      	str	r2, [r7, #8]
    7eb8:	781a      	ldrb	r2, [r3, #0]
    7eba:	68fb      	ldr	r3, [r7, #12]
    7ebc:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    7ebe:	68bb      	ldr	r3, [r7, #8]
    7ec0:	1c5a      	adds	r2, r3, #1
    7ec2:	60ba      	str	r2, [r7, #8]
    7ec4:	781a      	ldrb	r2, [r3, #0]
    7ec6:	68fb      	ldr	r3, [r7, #12]
    7ec8:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    7eca:	68fb      	ldr	r3, [r7, #12]
    7ecc:	330a      	adds	r3, #10
    7ece:	68b9      	ldr	r1, [r7, #8]
    7ed0:	4618      	mov	r0, r3
    7ed2:	f005 f999 	bl	d208 <BdaCpy>
    7ed6:	68bb      	ldr	r3, [r7, #8]
    7ed8:	3306      	adds	r3, #6
    7eda:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
    7edc:	68fb      	ldr	r3, [r7, #12]
    7ede:	3317      	adds	r3, #23
    7ee0:	68b9      	ldr	r1, [r7, #8]
    7ee2:	4618      	mov	r0, r3
    7ee4:	f005 f990 	bl	d208 <BdaCpy>
    7ee8:	68bb      	ldr	r3, [r7, #8]
    7eea:	3306      	adds	r3, #6
    7eec:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
    7eee:	68fb      	ldr	r3, [r7, #12]
    7ef0:	331d      	adds	r3, #29
    7ef2:	68b9      	ldr	r1, [r7, #8]
    7ef4:	4618      	mov	r0, r3
    7ef6:	f005 f987 	bl	d208 <BdaCpy>
    7efa:	68bb      	ldr	r3, [r7, #8]
    7efc:	3306      	adds	r3, #6
    7efe:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    7f00:	68bb      	ldr	r3, [r7, #8]
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	b29a      	uxth	r2, r3
    7f06:	68bb      	ldr	r3, [r7, #8]
    7f08:	3301      	adds	r3, #1
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	b29b      	uxth	r3, r3
    7f0e:	021b      	lsls	r3, r3, #8
    7f10:	b29b      	uxth	r3, r3
    7f12:	4413      	add	r3, r2
    7f14:	b29a      	uxth	r2, r3
    7f16:	68fb      	ldr	r3, [r7, #12]
    7f18:	821a      	strh	r2, [r3, #16]
    7f1a:	68bb      	ldr	r3, [r7, #8]
    7f1c:	3302      	adds	r3, #2
    7f1e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    7f20:	68bb      	ldr	r3, [r7, #8]
    7f22:	781b      	ldrb	r3, [r3, #0]
    7f24:	b29a      	uxth	r2, r3
    7f26:	68bb      	ldr	r3, [r7, #8]
    7f28:	3301      	adds	r3, #1
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	b29b      	uxth	r3, r3
    7f2e:	021b      	lsls	r3, r3, #8
    7f30:	b29b      	uxth	r3, r3
    7f32:	4413      	add	r3, r2
    7f34:	b29a      	uxth	r2, r3
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	825a      	strh	r2, [r3, #18]
    7f3a:	68bb      	ldr	r3, [r7, #8]
    7f3c:	3302      	adds	r3, #2
    7f3e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    7f40:	68bb      	ldr	r3, [r7, #8]
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	b29a      	uxth	r2, r3
    7f46:	68bb      	ldr	r3, [r7, #8]
    7f48:	3301      	adds	r3, #1
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	b29b      	uxth	r3, r3
    7f4e:	021b      	lsls	r3, r3, #8
    7f50:	b29b      	uxth	r3, r3
    7f52:	4413      	add	r3, r2
    7f54:	b29a      	uxth	r2, r3
    7f56:	68fb      	ldr	r3, [r7, #12]
    7f58:	829a      	strh	r2, [r3, #20]
    7f5a:	68bb      	ldr	r3, [r7, #8]
    7f5c:	3302      	adds	r3, #2
    7f5e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    7f60:	68bb      	ldr	r3, [r7, #8]
    7f62:	1c5a      	adds	r2, r3, #1
    7f64:	60ba      	str	r2, [r7, #8]
    7f66:	781a      	ldrb	r2, [r3, #0]
    7f68:	68fb      	ldr	r3, [r7, #12]
    7f6a:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    7f6c:	68fb      	ldr	r3, [r7, #12]
    7f6e:	88da      	ldrh	r2, [r3, #6]
    7f70:	68fb      	ldr	r3, [r7, #12]
    7f72:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    7f74:	68fb      	ldr	r3, [r7, #12]
    7f76:	791a      	ldrb	r2, [r3, #4]
    7f78:	68fb      	ldr	r3, [r7, #12]
    7f7a:	70da      	strb	r2, [r3, #3]
}
    7f7c:	bf00      	nop
    7f7e:	3710      	adds	r7, #16
    7f80:	46bd      	mov	sp, r7
    7f82:	bd80      	pop	{r7, pc}

00007f84 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7f84:	b480      	push	{r7}
    7f86:	b085      	sub	sp, #20
    7f88:	af00      	add	r7, sp, #0
    7f8a:	60f8      	str	r0, [r7, #12]
    7f8c:	60b9      	str	r1, [r7, #8]
    7f8e:	4613      	mov	r3, r2
    7f90:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
    7f92:	68bb      	ldr	r3, [r7, #8]
    7f94:	1c5a      	adds	r2, r3, #1
    7f96:	60ba      	str	r2, [r7, #8]
    7f98:	781a      	ldrb	r2, [r3, #0]
    7f9a:	68fb      	ldr	r3, [r7, #12]
    7f9c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
    7f9e:	68bb      	ldr	r3, [r7, #8]
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	b29a      	uxth	r2, r3
    7fa4:	68bb      	ldr	r3, [r7, #8]
    7fa6:	3301      	adds	r3, #1
    7fa8:	781b      	ldrb	r3, [r3, #0]
    7faa:	b29b      	uxth	r3, r3
    7fac:	021b      	lsls	r3, r3, #8
    7fae:	b29b      	uxth	r3, r3
    7fb0:	4413      	add	r3, r2
    7fb2:	b29a      	uxth	r2, r3
    7fb4:	68fb      	ldr	r3, [r7, #12]
    7fb6:	80da      	strh	r2, [r3, #6]
    7fb8:	68bb      	ldr	r3, [r7, #8]
    7fba:	3302      	adds	r3, #2
    7fbc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
    7fbe:	68bb      	ldr	r3, [r7, #8]
    7fc0:	1c5a      	adds	r2, r3, #1
    7fc2:	60ba      	str	r2, [r7, #8]
    7fc4:	781a      	ldrb	r2, [r3, #0]
    7fc6:	68fb      	ldr	r3, [r7, #12]
    7fc8:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
    7fca:	68fb      	ldr	r3, [r7, #12]
    7fcc:	88da      	ldrh	r2, [r3, #6]
    7fce:	68fb      	ldr	r3, [r7, #12]
    7fd0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
    7fd2:	68fb      	ldr	r3, [r7, #12]
    7fd4:	791a      	ldrb	r2, [r3, #4]
    7fd6:	68fb      	ldr	r3, [r7, #12]
    7fd8:	70da      	strb	r2, [r3, #3]
}
    7fda:	bf00      	nop
    7fdc:	3714      	adds	r7, #20
    7fde:	46bd      	mov	sp, r7
    7fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fe4:	4770      	bx	lr

00007fe6 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7fe6:	b480      	push	{r7}
    7fe8:	b085      	sub	sp, #20
    7fea:	af00      	add	r7, sp, #0
    7fec:	60f8      	str	r0, [r7, #12]
    7fee:	60b9      	str	r1, [r7, #8]
    7ff0:	4613      	mov	r3, r2
    7ff2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
    7ff4:	68bb      	ldr	r3, [r7, #8]
    7ff6:	1c5a      	adds	r2, r3, #1
    7ff8:	60ba      	str	r2, [r7, #8]
    7ffa:	781a      	ldrb	r2, [r3, #0]
    7ffc:	68fb      	ldr	r3, [r7, #12]
    7ffe:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
    8000:	68bb      	ldr	r3, [r7, #8]
    8002:	781b      	ldrb	r3, [r3, #0]
    8004:	b29a      	uxth	r2, r3
    8006:	68bb      	ldr	r3, [r7, #8]
    8008:	3301      	adds	r3, #1
    800a:	781b      	ldrb	r3, [r3, #0]
    800c:	b29b      	uxth	r3, r3
    800e:	021b      	lsls	r3, r3, #8
    8010:	b29b      	uxth	r3, r3
    8012:	4413      	add	r3, r2
    8014:	b29a      	uxth	r2, r3
    8016:	68fb      	ldr	r3, [r7, #12]
    8018:	80da      	strh	r2, [r3, #6]
    801a:	68bb      	ldr	r3, [r7, #8]
    801c:	3302      	adds	r3, #2
    801e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
    8020:	68bb      	ldr	r3, [r7, #8]
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	b29a      	uxth	r2, r3
    8026:	68bb      	ldr	r3, [r7, #8]
    8028:	3301      	adds	r3, #1
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	b29b      	uxth	r3, r3
    802e:	021b      	lsls	r3, r3, #8
    8030:	b29b      	uxth	r3, r3
    8032:	4413      	add	r3, r2
    8034:	b29a      	uxth	r2, r3
    8036:	68fb      	ldr	r3, [r7, #12]
    8038:	811a      	strh	r2, [r3, #8]
    803a:	68bb      	ldr	r3, [r7, #8]
    803c:	3302      	adds	r3, #2
    803e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
    8040:	68bb      	ldr	r3, [r7, #8]
    8042:	781b      	ldrb	r3, [r3, #0]
    8044:	b29a      	uxth	r2, r3
    8046:	68bb      	ldr	r3, [r7, #8]
    8048:	3301      	adds	r3, #1
    804a:	781b      	ldrb	r3, [r3, #0]
    804c:	b29b      	uxth	r3, r3
    804e:	021b      	lsls	r3, r3, #8
    8050:	b29b      	uxth	r3, r3
    8052:	4413      	add	r3, r2
    8054:	b29a      	uxth	r2, r3
    8056:	68fb      	ldr	r3, [r7, #12]
    8058:	815a      	strh	r2, [r3, #10]
    805a:	68bb      	ldr	r3, [r7, #8]
    805c:	3302      	adds	r3, #2
    805e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
    8060:	68bb      	ldr	r3, [r7, #8]
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	b29a      	uxth	r2, r3
    8066:	68bb      	ldr	r3, [r7, #8]
    8068:	3301      	adds	r3, #1
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	b29b      	uxth	r3, r3
    806e:	021b      	lsls	r3, r3, #8
    8070:	b29b      	uxth	r3, r3
    8072:	4413      	add	r3, r2
    8074:	b29a      	uxth	r2, r3
    8076:	68fb      	ldr	r3, [r7, #12]
    8078:	819a      	strh	r2, [r3, #12]
    807a:	68bb      	ldr	r3, [r7, #8]
    807c:	3302      	adds	r3, #2
    807e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
    8080:	68fb      	ldr	r3, [r7, #12]
    8082:	88da      	ldrh	r2, [r3, #6]
    8084:	68fb      	ldr	r3, [r7, #12]
    8086:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
    8088:	68fb      	ldr	r3, [r7, #12]
    808a:	791a      	ldrb	r2, [r3, #4]
    808c:	68fb      	ldr	r3, [r7, #12]
    808e:	70da      	strb	r2, [r3, #3]
}
    8090:	bf00      	nop
    8092:	3714      	adds	r7, #20
    8094:	46bd      	mov	sp, r7
    8096:	f85d 7b04 	ldr.w	r7, [sp], #4
    809a:	4770      	bx	lr

0000809c <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    809c:	b480      	push	{r7}
    809e:	b085      	sub	sp, #20
    80a0:	af00      	add	r7, sp, #0
    80a2:	60f8      	str	r0, [r7, #12]
    80a4:	60b9      	str	r1, [r7, #8]
    80a6:	4613      	mov	r3, r2
    80a8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
    80aa:	68bb      	ldr	r3, [r7, #8]
    80ac:	1c5a      	adds	r2, r3, #1
    80ae:	60ba      	str	r2, [r7, #8]
    80b0:	781a      	ldrb	r2, [r3, #0]
    80b2:	68fb      	ldr	r3, [r7, #12]
    80b4:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
    80b6:	68fb      	ldr	r3, [r7, #12]
    80b8:	791a      	ldrb	r2, [r3, #4]
    80ba:	68fb      	ldr	r3, [r7, #12]
    80bc:	70da      	strb	r2, [r3, #3]
}
    80be:	bf00      	nop
    80c0:	3714      	adds	r7, #20
    80c2:	46bd      	mov	sp, r7
    80c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c8:	4770      	bx	lr

000080ca <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    80ca:	b480      	push	{r7}
    80cc:	b085      	sub	sp, #20
    80ce:	af00      	add	r7, sp, #0
    80d0:	60f8      	str	r0, [r7, #12]
    80d2:	60b9      	str	r1, [r7, #8]
    80d4:	4613      	mov	r3, r2
    80d6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
    80d8:	68bb      	ldr	r3, [r7, #8]
    80da:	1c5a      	adds	r2, r3, #1
    80dc:	60ba      	str	r2, [r7, #8]
    80de:	781a      	ldrb	r2, [r3, #0]
    80e0:	68fb      	ldr	r3, [r7, #12]
    80e2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
    80e4:	68bb      	ldr	r3, [r7, #8]
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	b29a      	uxth	r2, r3
    80ea:	68bb      	ldr	r3, [r7, #8]
    80ec:	3301      	adds	r3, #1
    80ee:	781b      	ldrb	r3, [r3, #0]
    80f0:	b29b      	uxth	r3, r3
    80f2:	021b      	lsls	r3, r3, #8
    80f4:	b29b      	uxth	r3, r3
    80f6:	4413      	add	r3, r2
    80f8:	b29a      	uxth	r2, r3
    80fa:	68fb      	ldr	r3, [r7, #12]
    80fc:	80da      	strh	r2, [r3, #6]
    80fe:	68bb      	ldr	r3, [r7, #8]
    8100:	3302      	adds	r3, #2
    8102:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
    8104:	68bb      	ldr	r3, [r7, #8]
    8106:	1c5a      	adds	r2, r3, #1
    8108:	60ba      	str	r2, [r7, #8]
    810a:	781b      	ldrb	r3, [r3, #0]
    810c:	b25a      	sxtb	r2, r3
    810e:	68fb      	ldr	r3, [r7, #12]
    8110:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
    8112:	68fb      	ldr	r3, [r7, #12]
    8114:	88da      	ldrh	r2, [r3, #6]
    8116:	68fb      	ldr	r3, [r7, #12]
    8118:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
    811a:	68fb      	ldr	r3, [r7, #12]
    811c:	791a      	ldrb	r2, [r3, #4]
    811e:	68fb      	ldr	r3, [r7, #12]
    8120:	70da      	strb	r2, [r3, #3]
}
    8122:	bf00      	nop
    8124:	3714      	adds	r7, #20
    8126:	46bd      	mov	sp, r7
    8128:	f85d 7b04 	ldr.w	r7, [sp], #4
    812c:	4770      	bx	lr

0000812e <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    812e:	b580      	push	{r7, lr}
    8130:	b084      	sub	sp, #16
    8132:	af00      	add	r7, sp, #0
    8134:	60f8      	str	r0, [r7, #12]
    8136:	60b9      	str	r1, [r7, #8]
    8138:	4613      	mov	r3, r2
    813a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
    813c:	68bb      	ldr	r3, [r7, #8]
    813e:	1c5a      	adds	r2, r3, #1
    8140:	60ba      	str	r2, [r7, #8]
    8142:	781a      	ldrb	r2, [r3, #0]
    8144:	68fb      	ldr	r3, [r7, #12]
    8146:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
    8148:	68bb      	ldr	r3, [r7, #8]
    814a:	781b      	ldrb	r3, [r3, #0]
    814c:	b29a      	uxth	r2, r3
    814e:	68bb      	ldr	r3, [r7, #8]
    8150:	3301      	adds	r3, #1
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	b29b      	uxth	r3, r3
    8156:	021b      	lsls	r3, r3, #8
    8158:	b29b      	uxth	r3, r3
    815a:	4413      	add	r3, r2
    815c:	b29a      	uxth	r2, r3
    815e:	68fb      	ldr	r3, [r7, #12]
    8160:	80da      	strh	r2, [r3, #6]
    8162:	68bb      	ldr	r3, [r7, #8]
    8164:	3302      	adds	r3, #2
    8166:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
    8168:	68fb      	ldr	r3, [r7, #12]
    816a:	3308      	adds	r3, #8
    816c:	2205      	movs	r2, #5
    816e:	68b9      	ldr	r1, [r7, #8]
    8170:	4618      	mov	r0, r3
    8172:	f009 f982 	bl	1147a <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
    8176:	68fb      	ldr	r3, [r7, #12]
    8178:	88da      	ldrh	r2, [r3, #6]
    817a:	68fb      	ldr	r3, [r7, #12]
    817c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
    817e:	68fb      	ldr	r3, [r7, #12]
    8180:	791a      	ldrb	r2, [r3, #4]
    8182:	68fb      	ldr	r3, [r7, #12]
    8184:	70da      	strb	r2, [r3, #3]
}
    8186:	bf00      	nop
    8188:	3710      	adds	r7, #16
    818a:	46bd      	mov	sp, r7
    818c:	bd80      	pop	{r7, pc}

0000818e <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    818e:	b480      	push	{r7}
    8190:	b085      	sub	sp, #20
    8192:	af00      	add	r7, sp, #0
    8194:	60f8      	str	r0, [r7, #12]
    8196:	60b9      	str	r1, [r7, #8]
    8198:	4613      	mov	r3, r2
    819a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
    819c:	68bb      	ldr	r3, [r7, #8]
    819e:	1c5a      	adds	r2, r3, #1
    81a0:	60ba      	str	r2, [r7, #8]
    81a2:	781a      	ldrb	r2, [r3, #0]
    81a4:	68fb      	ldr	r3, [r7, #12]
    81a6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
    81a8:	68bb      	ldr	r3, [r7, #8]
    81aa:	781a      	ldrb	r2, [r3, #0]
    81ac:	68fb      	ldr	r3, [r7, #12]
    81ae:	715a      	strb	r2, [r3, #5]
    81b0:	68bb      	ldr	r3, [r7, #8]
    81b2:	3302      	adds	r3, #2
    81b4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
    81b6:	68bb      	ldr	r3, [r7, #8]
    81b8:	1c5a      	adds	r2, r3, #1
    81ba:	60ba      	str	r2, [r7, #8]
    81bc:	781b      	ldrb	r3, [r3, #0]
    81be:	b25a      	sxtb	r2, r3
    81c0:	68fb      	ldr	r3, [r7, #12]
    81c2:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
    81c4:	68fb      	ldr	r3, [r7, #12]
    81c6:	795b      	ldrb	r3, [r3, #5]
    81c8:	b29a      	uxth	r2, r3
    81ca:	68fb      	ldr	r3, [r7, #12]
    81cc:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
    81ce:	68fb      	ldr	r3, [r7, #12]
    81d0:	791a      	ldrb	r2, [r3, #4]
    81d2:	68fb      	ldr	r3, [r7, #12]
    81d4:	70da      	strb	r2, [r3, #3]
}
    81d6:	bf00      	nop
    81d8:	3714      	adds	r7, #20
    81da:	46bd      	mov	sp, r7
    81dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e0:	4770      	bx	lr

000081e2 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    81e2:	b480      	push	{r7}
    81e4:	b085      	sub	sp, #20
    81e6:	af00      	add	r7, sp, #0
    81e8:	60f8      	str	r0, [r7, #12]
    81ea:	60b9      	str	r1, [r7, #8]
    81ec:	4613      	mov	r3, r2
    81ee:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
    81f0:	68bb      	ldr	r3, [r7, #8]
    81f2:	1c5a      	adds	r2, r3, #1
    81f4:	60ba      	str	r2, [r7, #8]
    81f6:	781a      	ldrb	r2, [r3, #0]
    81f8:	68fb      	ldr	r3, [r7, #12]
    81fa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
    81fc:	68bb      	ldr	r3, [r7, #8]
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	b29a      	uxth	r2, r3
    8202:	68bb      	ldr	r3, [r7, #8]
    8204:	3301      	adds	r3, #1
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	b29b      	uxth	r3, r3
    820a:	021b      	lsls	r3, r3, #8
    820c:	b29b      	uxth	r3, r3
    820e:	4413      	add	r3, r2
    8210:	b29a      	uxth	r2, r3
    8212:	68fb      	ldr	r3, [r7, #12]
    8214:	80da      	strh	r2, [r3, #6]
    8216:	68bb      	ldr	r3, [r7, #8]
    8218:	3302      	adds	r3, #2
    821a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
    821c:	68bb      	ldr	r3, [r7, #8]
    821e:	1c5a      	adds	r2, r3, #1
    8220:	60ba      	str	r2, [r7, #8]
    8222:	781a      	ldrb	r2, [r3, #0]
    8224:	68fb      	ldr	r3, [r7, #12]
    8226:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
    8228:	68bb      	ldr	r3, [r7, #8]
    822a:	781b      	ldrb	r3, [r3, #0]
    822c:	b29a      	uxth	r2, r3
    822e:	68bb      	ldr	r3, [r7, #8]
    8230:	3301      	adds	r3, #1
    8232:	781b      	ldrb	r3, [r3, #0]
    8234:	b29b      	uxth	r3, r3
    8236:	021b      	lsls	r3, r3, #8
    8238:	b29b      	uxth	r3, r3
    823a:	4413      	add	r3, r2
    823c:	b29a      	uxth	r2, r3
    823e:	68fb      	ldr	r3, [r7, #12]
    8240:	815a      	strh	r2, [r3, #10]
    8242:	68bb      	ldr	r3, [r7, #8]
    8244:	3302      	adds	r3, #2
    8246:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
    8248:	68bb      	ldr	r3, [r7, #8]
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	b29a      	uxth	r2, r3
    824e:	68bb      	ldr	r3, [r7, #8]
    8250:	3301      	adds	r3, #1
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	b29b      	uxth	r3, r3
    8256:	021b      	lsls	r3, r3, #8
    8258:	b29b      	uxth	r3, r3
    825a:	4413      	add	r3, r2
    825c:	b29a      	uxth	r2, r3
    825e:	68fb      	ldr	r3, [r7, #12]
    8260:	819a      	strh	r2, [r3, #12]
    8262:	68bb      	ldr	r3, [r7, #8]
    8264:	3302      	adds	r3, #2
    8266:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
    8268:	68fb      	ldr	r3, [r7, #12]
    826a:	88da      	ldrh	r2, [r3, #6]
    826c:	68fb      	ldr	r3, [r7, #12]
    826e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
    8270:	68fb      	ldr	r3, [r7, #12]
    8272:	791a      	ldrb	r2, [r3, #4]
    8274:	68fb      	ldr	r3, [r7, #12]
    8276:	70da      	strb	r2, [r3, #3]
}
    8278:	bf00      	nop
    827a:	3714      	adds	r7, #20
    827c:	46bd      	mov	sp, r7
    827e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8282:	4770      	bx	lr

00008284 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8284:	b580      	push	{r7, lr}
    8286:	b084      	sub	sp, #16
    8288:	af00      	add	r7, sp, #0
    828a:	60f8      	str	r0, [r7, #12]
    828c:	60b9      	str	r1, [r7, #8]
    828e:	4613      	mov	r3, r2
    8290:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
    8292:	68bb      	ldr	r3, [r7, #8]
    8294:	1c5a      	adds	r2, r3, #1
    8296:	60ba      	str	r2, [r7, #8]
    8298:	781a      	ldrb	r2, [r3, #0]
    829a:	68fb      	ldr	r3, [r7, #12]
    829c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
    829e:	68bb      	ldr	r3, [r7, #8]
    82a0:	781b      	ldrb	r3, [r3, #0]
    82a2:	b29a      	uxth	r2, r3
    82a4:	68bb      	ldr	r3, [r7, #8]
    82a6:	3301      	adds	r3, #1
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	b29b      	uxth	r3, r3
    82ac:	021b      	lsls	r3, r3, #8
    82ae:	b29b      	uxth	r3, r3
    82b0:	4413      	add	r3, r2
    82b2:	b29a      	uxth	r2, r3
    82b4:	68fb      	ldr	r3, [r7, #12]
    82b6:	80da      	strh	r2, [r3, #6]
    82b8:	68bb      	ldr	r3, [r7, #8]
    82ba:	3302      	adds	r3, #2
    82bc:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
    82be:	68fb      	ldr	r3, [r7, #12]
    82c0:	3308      	adds	r3, #8
    82c2:	2208      	movs	r2, #8
    82c4:	68b9      	ldr	r1, [r7, #8]
    82c6:	4618      	mov	r0, r3
    82c8:	f009 f8d7 	bl	1147a <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
    82cc:	68fb      	ldr	r3, [r7, #12]
    82ce:	88da      	ldrh	r2, [r3, #6]
    82d0:	68fb      	ldr	r3, [r7, #12]
    82d2:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
    82d4:	68fb      	ldr	r3, [r7, #12]
    82d6:	791a      	ldrb	r2, [r3, #4]
    82d8:	68fb      	ldr	r3, [r7, #12]
    82da:	70da      	strb	r2, [r3, #3]
}
    82dc:	bf00      	nop
    82de:	3710      	adds	r7, #16
    82e0:	46bd      	mov	sp, r7
    82e2:	bd80      	pop	{r7, pc}

000082e4 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    82e4:	b480      	push	{r7}
    82e6:	b085      	sub	sp, #20
    82e8:	af00      	add	r7, sp, #0
    82ea:	60f8      	str	r0, [r7, #12]
    82ec:	60b9      	str	r1, [r7, #8]
    82ee:	4613      	mov	r3, r2
    82f0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
    82f2:	68bb      	ldr	r3, [r7, #8]
    82f4:	1c5a      	adds	r2, r3, #1
    82f6:	60ba      	str	r2, [r7, #8]
    82f8:	781a      	ldrb	r2, [r3, #0]
    82fa:	68fb      	ldr	r3, [r7, #12]
    82fc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
    82fe:	68bb      	ldr	r3, [r7, #8]
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	b29a      	uxth	r2, r3
    8304:	68bb      	ldr	r3, [r7, #8]
    8306:	3301      	adds	r3, #1
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	b29b      	uxth	r3, r3
    830c:	021b      	lsls	r3, r3, #8
    830e:	b29b      	uxth	r3, r3
    8310:	4413      	add	r3, r2
    8312:	b29a      	uxth	r2, r3
    8314:	68fb      	ldr	r3, [r7, #12]
    8316:	80da      	strh	r2, [r3, #6]
    8318:	68bb      	ldr	r3, [r7, #8]
    831a:	3302      	adds	r3, #2
    831c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
    831e:	68fb      	ldr	r3, [r7, #12]
    8320:	88da      	ldrh	r2, [r3, #6]
    8322:	68fb      	ldr	r3, [r7, #12]
    8324:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
    8326:	68fb      	ldr	r3, [r7, #12]
    8328:	791a      	ldrb	r2, [r3, #4]
    832a:	68fb      	ldr	r3, [r7, #12]
    832c:	70da      	strb	r2, [r3, #3]
}
    832e:	bf00      	nop
    8330:	3714      	adds	r7, #20
    8332:	46bd      	mov	sp, r7
    8334:	f85d 7b04 	ldr.w	r7, [sp], #4
    8338:	4770      	bx	lr

0000833a <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    833a:	b480      	push	{r7}
    833c:	b085      	sub	sp, #20
    833e:	af00      	add	r7, sp, #0
    8340:	60f8      	str	r0, [r7, #12]
    8342:	60b9      	str	r1, [r7, #8]
    8344:	4613      	mov	r3, r2
    8346:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
    8348:	68bb      	ldr	r3, [r7, #8]
    834a:	1c5a      	adds	r2, r3, #1
    834c:	60ba      	str	r2, [r7, #8]
    834e:	781a      	ldrb	r2, [r3, #0]
    8350:	68fb      	ldr	r3, [r7, #12]
    8352:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
    8354:	68bb      	ldr	r3, [r7, #8]
    8356:	781b      	ldrb	r3, [r3, #0]
    8358:	b29a      	uxth	r2, r3
    835a:	68bb      	ldr	r3, [r7, #8]
    835c:	3301      	adds	r3, #1
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	b29b      	uxth	r3, r3
    8362:	021b      	lsls	r3, r3, #8
    8364:	b29b      	uxth	r3, r3
    8366:	4413      	add	r3, r2
    8368:	b29a      	uxth	r2, r3
    836a:	68fb      	ldr	r3, [r7, #12]
    836c:	80da      	strh	r2, [r3, #6]
    836e:	68bb      	ldr	r3, [r7, #8]
    8370:	3302      	adds	r3, #2
    8372:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
    8374:	68fb      	ldr	r3, [r7, #12]
    8376:	88da      	ldrh	r2, [r3, #6]
    8378:	68fb      	ldr	r3, [r7, #12]
    837a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
    837c:	68fb      	ldr	r3, [r7, #12]
    837e:	791a      	ldrb	r2, [r3, #4]
    8380:	68fb      	ldr	r3, [r7, #12]
    8382:	70da      	strb	r2, [r3, #3]
}
    8384:	bf00      	nop
    8386:	3714      	adds	r7, #20
    8388:	46bd      	mov	sp, r7
    838a:	f85d 7b04 	ldr.w	r7, [sp], #4
    838e:	4770      	bx	lr

00008390 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8390:	b480      	push	{r7}
    8392:	b085      	sub	sp, #20
    8394:	af00      	add	r7, sp, #0
    8396:	60f8      	str	r0, [r7, #12]
    8398:	60b9      	str	r1, [r7, #8]
    839a:	4613      	mov	r3, r2
    839c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
    839e:	68bb      	ldr	r3, [r7, #8]
    83a0:	1c5a      	adds	r2, r3, #1
    83a2:	60ba      	str	r2, [r7, #8]
    83a4:	781a      	ldrb	r2, [r3, #0]
    83a6:	68fb      	ldr	r3, [r7, #12]
    83a8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
    83aa:	68bb      	ldr	r3, [r7, #8]
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	b29a      	uxth	r2, r3
    83b0:	68bb      	ldr	r3, [r7, #8]
    83b2:	3301      	adds	r3, #1
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	b29b      	uxth	r3, r3
    83b8:	021b      	lsls	r3, r3, #8
    83ba:	b29b      	uxth	r3, r3
    83bc:	4413      	add	r3, r2
    83be:	b29a      	uxth	r2, r3
    83c0:	68fb      	ldr	r3, [r7, #12]
    83c2:	80da      	strh	r2, [r3, #6]
    83c4:	68bb      	ldr	r3, [r7, #8]
    83c6:	3302      	adds	r3, #2
    83c8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
    83ca:	68fb      	ldr	r3, [r7, #12]
    83cc:	88da      	ldrh	r2, [r3, #6]
    83ce:	68fb      	ldr	r3, [r7, #12]
    83d0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
    83d2:	68fb      	ldr	r3, [r7, #12]
    83d4:	791a      	ldrb	r2, [r3, #4]
    83d6:	68fb      	ldr	r3, [r7, #12]
    83d8:	70da      	strb	r2, [r3, #3]
}
    83da:	bf00      	nop
    83dc:	3714      	adds	r7, #20
    83de:	46bd      	mov	sp, r7
    83e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e4:	4770      	bx	lr

000083e6 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    83e6:	b480      	push	{r7}
    83e8:	b085      	sub	sp, #20
    83ea:	af00      	add	r7, sp, #0
    83ec:	60f8      	str	r0, [r7, #12]
    83ee:	60b9      	str	r1, [r7, #8]
    83f0:	4613      	mov	r3, r2
    83f2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
    83f4:	68bb      	ldr	r3, [r7, #8]
    83f6:	1c5a      	adds	r2, r3, #1
    83f8:	60ba      	str	r2, [r7, #8]
    83fa:	781a      	ldrb	r2, [r3, #0]
    83fc:	68fb      	ldr	r3, [r7, #12]
    83fe:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
    8400:	68bb      	ldr	r3, [r7, #8]
    8402:	781b      	ldrb	r3, [r3, #0]
    8404:	b29a      	uxth	r2, r3
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	3301      	adds	r3, #1
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	b29b      	uxth	r3, r3
    840e:	021b      	lsls	r3, r3, #8
    8410:	b29b      	uxth	r3, r3
    8412:	4413      	add	r3, r2
    8414:	b29a      	uxth	r2, r3
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	80da      	strh	r2, [r3, #6]
    841a:	68bb      	ldr	r3, [r7, #8]
    841c:	3302      	adds	r3, #2
    841e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
    8420:	68bb      	ldr	r3, [r7, #8]
    8422:	1c5a      	adds	r2, r3, #1
    8424:	60ba      	str	r2, [r7, #8]
    8426:	781a      	ldrb	r2, [r3, #0]
    8428:	68fb      	ldr	r3, [r7, #12]
    842a:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
    842c:	68fb      	ldr	r3, [r7, #12]
    842e:	88da      	ldrh	r2, [r3, #6]
    8430:	68fb      	ldr	r3, [r7, #12]
    8432:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
    8434:	68fb      	ldr	r3, [r7, #12]
    8436:	791a      	ldrb	r2, [r3, #4]
    8438:	68fb      	ldr	r3, [r7, #12]
    843a:	70da      	strb	r2, [r3, #3]
}
    843c:	bf00      	nop
    843e:	3714      	adds	r7, #20
    8440:	46bd      	mov	sp, r7
    8442:	f85d 7b04 	ldr.w	r7, [sp], #4
    8446:	4770      	bx	lr

00008448 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8448:	b580      	push	{r7, lr}
    844a:	b084      	sub	sp, #16
    844c:	af00      	add	r7, sp, #0
    844e:	60f8      	str	r0, [r7, #12]
    8450:	60b9      	str	r1, [r7, #8]
    8452:	4613      	mov	r3, r2
    8454:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
    8456:	68bb      	ldr	r3, [r7, #8]
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	b29a      	uxth	r2, r3
    845c:	68bb      	ldr	r3, [r7, #8]
    845e:	3301      	adds	r3, #1
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	b29b      	uxth	r3, r3
    8464:	021b      	lsls	r3, r3, #8
    8466:	b29b      	uxth	r3, r3
    8468:	4413      	add	r3, r2
    846a:	b29a      	uxth	r2, r3
    846c:	68fb      	ldr	r3, [r7, #12]
    846e:	809a      	strh	r2, [r3, #4]
    8470:	68bb      	ldr	r3, [r7, #8]
    8472:	3302      	adds	r3, #2
    8474:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
    8476:	68fb      	ldr	r3, [r7, #12]
    8478:	3306      	adds	r3, #6
    847a:	2208      	movs	r2, #8
    847c:	68b9      	ldr	r1, [r7, #8]
    847e:	4618      	mov	r0, r3
    8480:	f008 fffb 	bl	1147a <memcpy>
  p += HCI_RAND_LEN;
    8484:	68bb      	ldr	r3, [r7, #8]
    8486:	3308      	adds	r3, #8
    8488:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
    848a:	68bb      	ldr	r3, [r7, #8]
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	b29a      	uxth	r2, r3
    8490:	68bb      	ldr	r3, [r7, #8]
    8492:	3301      	adds	r3, #1
    8494:	781b      	ldrb	r3, [r3, #0]
    8496:	b29b      	uxth	r3, r3
    8498:	021b      	lsls	r3, r3, #8
    849a:	b29b      	uxth	r3, r3
    849c:	4413      	add	r3, r2
    849e:	b29a      	uxth	r2, r3
    84a0:	68fb      	ldr	r3, [r7, #12]
    84a2:	81da      	strh	r2, [r3, #14]
    84a4:	68bb      	ldr	r3, [r7, #8]
    84a6:	3302      	adds	r3, #2
    84a8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
    84aa:	68fb      	ldr	r3, [r7, #12]
    84ac:	889a      	ldrh	r2, [r3, #4]
    84ae:	68fb      	ldr	r3, [r7, #12]
    84b0:	801a      	strh	r2, [r3, #0]
}
    84b2:	bf00      	nop
    84b4:	3710      	adds	r7, #16
    84b6:	46bd      	mov	sp, r7
    84b8:	bd80      	pop	{r7, pc}

000084ba <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    84ba:	b480      	push	{r7}
    84bc:	b085      	sub	sp, #20
    84be:	af00      	add	r7, sp, #0
    84c0:	60f8      	str	r0, [r7, #12]
    84c2:	60b9      	str	r1, [r7, #8]
    84c4:	4613      	mov	r3, r2
    84c6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
    84c8:	68bb      	ldr	r3, [r7, #8]
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	b29a      	uxth	r2, r3
    84ce:	68bb      	ldr	r3, [r7, #8]
    84d0:	3301      	adds	r3, #1
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	b29b      	uxth	r3, r3
    84d6:	021b      	lsls	r3, r3, #8
    84d8:	b29b      	uxth	r3, r3
    84da:	4413      	add	r3, r2
    84dc:	b29a      	uxth	r2, r3
    84de:	68fb      	ldr	r3, [r7, #12]
    84e0:	809a      	strh	r2, [r3, #4]
    84e2:	68bb      	ldr	r3, [r7, #8]
    84e4:	3302      	adds	r3, #2
    84e6:	60bb      	str	r3, [r7, #8]
}
    84e8:	bf00      	nop
    84ea:	3714      	adds	r7, #20
    84ec:	46bd      	mov	sp, r7
    84ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f2:	4770      	bx	lr

000084f4 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    84f4:	b480      	push	{r7}
    84f6:	b085      	sub	sp, #20
    84f8:	af00      	add	r7, sp, #0
    84fa:	60f8      	str	r0, [r7, #12]
    84fc:	60b9      	str	r1, [r7, #8]
    84fe:	4613      	mov	r3, r2
    8500:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
    8502:	68bb      	ldr	r3, [r7, #8]
    8504:	3b02      	subs	r3, #2
    8506:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
    8508:	68bb      	ldr	r3, [r7, #8]
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	b29a      	uxth	r2, r3
    850e:	68bb      	ldr	r3, [r7, #8]
    8510:	3301      	adds	r3, #1
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	b29b      	uxth	r3, r3
    8516:	021b      	lsls	r3, r3, #8
    8518:	b29b      	uxth	r3, r3
    851a:	4413      	add	r3, r2
    851c:	b29a      	uxth	r2, r3
    851e:	68fb      	ldr	r3, [r7, #12]
    8520:	809a      	strh	r2, [r3, #4]
    8522:	68bb      	ldr	r3, [r7, #8]
    8524:	3302      	adds	r3, #2
    8526:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    8528:	68bb      	ldr	r3, [r7, #8]
    852a:	1c5a      	adds	r2, r3, #1
    852c:	60ba      	str	r2, [r7, #8]
    852e:	781a      	ldrb	r2, [r3, #0]
    8530:	68fb      	ldr	r3, [r7, #12]
    8532:	70da      	strb	r2, [r3, #3]
  BSTREAM_TO_UINT8(pMsg->vendorSpecCmdCmpl.param[0], p);
    8534:	68bb      	ldr	r3, [r7, #8]
    8536:	1c5a      	adds	r2, r3, #1
    8538:	60ba      	str	r2, [r7, #8]
    853a:	781a      	ldrb	r2, [r3, #0]
    853c:	68fb      	ldr	r3, [r7, #12]
    853e:	719a      	strb	r2, [r3, #6]
}
    8540:	bf00      	nop
    8542:	3714      	adds	r7, #20
    8544:	46bd      	mov	sp, r7
    8546:	f85d 7b04 	ldr.w	r7, [sp], #4
    854a:	4770      	bx	lr

0000854c <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    854c:	b580      	push	{r7, lr}
    854e:	b084      	sub	sp, #16
    8550:	af00      	add	r7, sp, #0
    8552:	60f8      	str	r0, [r7, #12]
    8554:	60b9      	str	r1, [r7, #8]
    8556:	4613      	mov	r3, r2
    8558:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	3304      	adds	r3, #4
    855e:	79fa      	ldrb	r2, [r7, #7]
    8560:	68b9      	ldr	r1, [r7, #8]
    8562:	4618      	mov	r0, r3
    8564:	f008 ff89 	bl	1147a <memcpy>
}
    8568:	bf00      	nop
    856a:	3710      	adds	r7, #16
    856c:	46bd      	mov	sp, r7
    856e:	bd80      	pop	{r7, pc}

00008570 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8570:	b480      	push	{r7}
    8572:	b085      	sub	sp, #20
    8574:	af00      	add	r7, sp, #0
    8576:	60f8      	str	r0, [r7, #12]
    8578:	60b9      	str	r1, [r7, #8]
    857a:	4613      	mov	r3, r2
    857c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
    857e:	68bb      	ldr	r3, [r7, #8]
    8580:	1c5a      	adds	r2, r3, #1
    8582:	60ba      	str	r2, [r7, #8]
    8584:	781a      	ldrb	r2, [r3, #0]
    8586:	68fb      	ldr	r3, [r7, #12]
    8588:	711a      	strb	r2, [r3, #4]
}
    858a:	bf00      	nop
    858c:	3714      	adds	r7, #20
    858e:	46bd      	mov	sp, r7
    8590:	f85d 7b04 	ldr.w	r7, [sp], #4
    8594:	4770      	bx	lr

00008596 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8596:	b580      	push	{r7, lr}
    8598:	b084      	sub	sp, #16
    859a:	af00      	add	r7, sp, #0
    859c:	60f8      	str	r0, [r7, #12]
    859e:	60b9      	str	r1, [r7, #8]
    85a0:	4613      	mov	r3, r2
    85a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
    85a4:	68bb      	ldr	r3, [r7, #8]
    85a6:	1c5a      	adds	r2, r3, #1
    85a8:	60ba      	str	r2, [r7, #8]
    85aa:	781a      	ldrb	r2, [r3, #0]
    85ac:	68fb      	ldr	r3, [r7, #12]
    85ae:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
    85b0:	68fb      	ldr	r3, [r7, #12]
    85b2:	3305      	adds	r3, #5
    85b4:	2210      	movs	r2, #16
    85b6:	68b9      	ldr	r1, [r7, #8]
    85b8:	4618      	mov	r0, r3
    85ba:	f008 ff5e 	bl	1147a <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
    85be:	68fb      	ldr	r3, [r7, #12]
    85c0:	791a      	ldrb	r2, [r3, #4]
    85c2:	68fb      	ldr	r3, [r7, #12]
    85c4:	70da      	strb	r2, [r3, #3]
}
    85c6:	bf00      	nop
    85c8:	3710      	adds	r7, #16
    85ca:	46bd      	mov	sp, r7
    85cc:	bd80      	pop	{r7, pc}

000085ce <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    85ce:	b580      	push	{r7, lr}
    85d0:	b084      	sub	sp, #16
    85d2:	af00      	add	r7, sp, #0
    85d4:	60f8      	str	r0, [r7, #12]
    85d6:	60b9      	str	r1, [r7, #8]
    85d8:	4613      	mov	r3, r2
    85da:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
    85dc:	68bb      	ldr	r3, [r7, #8]
    85de:	1c5a      	adds	r2, r3, #1
    85e0:	60ba      	str	r2, [r7, #8]
    85e2:	781a      	ldrb	r2, [r3, #0]
    85e4:	68fb      	ldr	r3, [r7, #12]
    85e6:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
    85e8:	68fb      	ldr	r3, [r7, #12]
    85ea:	3305      	adds	r3, #5
    85ec:	2208      	movs	r2, #8
    85ee:	68b9      	ldr	r1, [r7, #8]
    85f0:	4618      	mov	r0, r3
    85f2:	f008 ff42 	bl	1147a <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
    85f6:	68fb      	ldr	r3, [r7, #12]
    85f8:	791a      	ldrb	r2, [r3, #4]
    85fa:	68fb      	ldr	r3, [r7, #12]
    85fc:	70da      	strb	r2, [r3, #3]
}
    85fe:	bf00      	nop
    8600:	3710      	adds	r7, #16
    8602:	46bd      	mov	sp, r7
    8604:	bd80      	pop	{r7, pc}

00008606 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8606:	b480      	push	{r7}
    8608:	b085      	sub	sp, #20
    860a:	af00      	add	r7, sp, #0
    860c:	60f8      	str	r0, [r7, #12]
    860e:	60b9      	str	r1, [r7, #8]
    8610:	4613      	mov	r3, r2
    8612:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
    8614:	68bb      	ldr	r3, [r7, #8]
    8616:	1c5a      	adds	r2, r3, #1
    8618:	60ba      	str	r2, [r7, #8]
    861a:	781a      	ldrb	r2, [r3, #0]
    861c:	68fb      	ldr	r3, [r7, #12]
    861e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
    8620:	68fb      	ldr	r3, [r7, #12]
    8622:	791a      	ldrb	r2, [r3, #4]
    8624:	68fb      	ldr	r3, [r7, #12]
    8626:	70da      	strb	r2, [r3, #3]
}
    8628:	bf00      	nop
    862a:	3714      	adds	r7, #20
    862c:	46bd      	mov	sp, r7
    862e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8632:	4770      	bx	lr

00008634 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8634:	b480      	push	{r7}
    8636:	b085      	sub	sp, #20
    8638:	af00      	add	r7, sp, #0
    863a:	60f8      	str	r0, [r7, #12]
    863c:	60b9      	str	r1, [r7, #8]
    863e:	4613      	mov	r3, r2
    8640:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
    8642:	68bb      	ldr	r3, [r7, #8]
    8644:	1c5a      	adds	r2, r3, #1
    8646:	60ba      	str	r2, [r7, #8]
    8648:	781a      	ldrb	r2, [r3, #0]
    864a:	68fb      	ldr	r3, [r7, #12]
    864c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
    864e:	68fb      	ldr	r3, [r7, #12]
    8650:	791a      	ldrb	r2, [r3, #4]
    8652:	68fb      	ldr	r3, [r7, #12]
    8654:	70da      	strb	r2, [r3, #3]
}
    8656:	bf00      	nop
    8658:	3714      	adds	r7, #20
    865a:	46bd      	mov	sp, r7
    865c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8660:	4770      	bx	lr

00008662 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8662:	b480      	push	{r7}
    8664:	b085      	sub	sp, #20
    8666:	af00      	add	r7, sp, #0
    8668:	60f8      	str	r0, [r7, #12]
    866a:	60b9      	str	r1, [r7, #8]
    866c:	4613      	mov	r3, r2
    866e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
    8670:	68bb      	ldr	r3, [r7, #8]
    8672:	1c5a      	adds	r2, r3, #1
    8674:	60ba      	str	r2, [r7, #8]
    8676:	781a      	ldrb	r2, [r3, #0]
    8678:	68fb      	ldr	r3, [r7, #12]
    867a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
    867c:	68fb      	ldr	r3, [r7, #12]
    867e:	791a      	ldrb	r2, [r3, #4]
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	70da      	strb	r2, [r3, #3]
}
    8684:	bf00      	nop
    8686:	3714      	adds	r7, #20
    8688:	46bd      	mov	sp, r7
    868a:	f85d 7b04 	ldr.w	r7, [sp], #4
    868e:	4770      	bx	lr

00008690 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8690:	b580      	push	{r7, lr}
    8692:	b084      	sub	sp, #16
    8694:	af00      	add	r7, sp, #0
    8696:	60f8      	str	r0, [r7, #12]
    8698:	60b9      	str	r1, [r7, #8]
    869a:	4613      	mov	r3, r2
    869c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
    869e:	68bb      	ldr	r3, [r7, #8]
    86a0:	1c5a      	adds	r2, r3, #1
    86a2:	60ba      	str	r2, [r7, #8]
    86a4:	781a      	ldrb	r2, [r3, #0]
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
    86aa:	68fb      	ldr	r3, [r7, #12]
    86ac:	3305      	adds	r3, #5
    86ae:	68b9      	ldr	r1, [r7, #8]
    86b0:	4618      	mov	r0, r3
    86b2:	f004 fda9 	bl	d208 <BdaCpy>
    86b6:	68bb      	ldr	r3, [r7, #8]
    86b8:	3306      	adds	r3, #6
    86ba:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
    86bc:	68fb      	ldr	r3, [r7, #12]
    86be:	791a      	ldrb	r2, [r3, #4]
    86c0:	68fb      	ldr	r3, [r7, #12]
    86c2:	70da      	strb	r2, [r3, #3]
}
    86c4:	bf00      	nop
    86c6:	3710      	adds	r7, #16
    86c8:	46bd      	mov	sp, r7
    86ca:	bd80      	pop	{r7, pc}

000086cc <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    86cc:	b580      	push	{r7, lr}
    86ce:	b084      	sub	sp, #16
    86d0:	af00      	add	r7, sp, #0
    86d2:	60f8      	str	r0, [r7, #12]
    86d4:	60b9      	str	r1, [r7, #8]
    86d6:	4613      	mov	r3, r2
    86d8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
    86da:	68bb      	ldr	r3, [r7, #8]
    86dc:	1c5a      	adds	r2, r3, #1
    86de:	60ba      	str	r2, [r7, #8]
    86e0:	781a      	ldrb	r2, [r3, #0]
    86e2:	68fb      	ldr	r3, [r7, #12]
    86e4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
    86e6:	68fb      	ldr	r3, [r7, #12]
    86e8:	3305      	adds	r3, #5
    86ea:	68b9      	ldr	r1, [r7, #8]
    86ec:	4618      	mov	r0, r3
    86ee:	f004 fd8b 	bl	d208 <BdaCpy>
    86f2:	68bb      	ldr	r3, [r7, #8]
    86f4:	3306      	adds	r3, #6
    86f6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
    86f8:	68fb      	ldr	r3, [r7, #12]
    86fa:	791a      	ldrb	r2, [r3, #4]
    86fc:	68fb      	ldr	r3, [r7, #12]
    86fe:	70da      	strb	r2, [r3, #3]
}
    8700:	bf00      	nop
    8702:	3710      	adds	r7, #16
    8704:	46bd      	mov	sp, r7
    8706:	bd80      	pop	{r7, pc}

00008708 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8708:	b480      	push	{r7}
    870a:	b085      	sub	sp, #20
    870c:	af00      	add	r7, sp, #0
    870e:	60f8      	str	r0, [r7, #12]
    8710:	60b9      	str	r1, [r7, #8]
    8712:	4613      	mov	r3, r2
    8714:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
    8716:	68bb      	ldr	r3, [r7, #8]
    8718:	1c5a      	adds	r2, r3, #1
    871a:	60ba      	str	r2, [r7, #8]
    871c:	781a      	ldrb	r2, [r3, #0]
    871e:	68fb      	ldr	r3, [r7, #12]
    8720:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
    8722:	68fb      	ldr	r3, [r7, #12]
    8724:	791a      	ldrb	r2, [r3, #4]
    8726:	68fb      	ldr	r3, [r7, #12]
    8728:	70da      	strb	r2, [r3, #3]
}
    872a:	bf00      	nop
    872c:	3714      	adds	r7, #20
    872e:	46bd      	mov	sp, r7
    8730:	f85d 7b04 	ldr.w	r7, [sp], #4
    8734:	4770      	bx	lr

00008736 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8736:	b480      	push	{r7}
    8738:	b085      	sub	sp, #20
    873a:	af00      	add	r7, sp, #0
    873c:	60f8      	str	r0, [r7, #12]
    873e:	60b9      	str	r1, [r7, #8]
    8740:	4613      	mov	r3, r2
    8742:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
    8744:	68bb      	ldr	r3, [r7, #8]
    8746:	1c5a      	adds	r2, r3, #1
    8748:	60ba      	str	r2, [r7, #8]
    874a:	781a      	ldrb	r2, [r3, #0]
    874c:	68fb      	ldr	r3, [r7, #12]
    874e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
    8750:	68bb      	ldr	r3, [r7, #8]
    8752:	781b      	ldrb	r3, [r3, #0]
    8754:	b29a      	uxth	r2, r3
    8756:	68bb      	ldr	r3, [r7, #8]
    8758:	3301      	adds	r3, #1
    875a:	781b      	ldrb	r3, [r3, #0]
    875c:	b29b      	uxth	r3, r3
    875e:	021b      	lsls	r3, r3, #8
    8760:	b29b      	uxth	r3, r3
    8762:	4413      	add	r3, r2
    8764:	b29a      	uxth	r2, r3
    8766:	68fb      	ldr	r3, [r7, #12]
    8768:	80da      	strh	r2, [r3, #6]
    876a:	68bb      	ldr	r3, [r7, #8]
    876c:	3302      	adds	r3, #2
    876e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
    8770:	68fb      	ldr	r3, [r7, #12]
    8772:	791a      	ldrb	r2, [r3, #4]
    8774:	68fb      	ldr	r3, [r7, #12]
    8776:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
    8778:	68fb      	ldr	r3, [r7, #12]
    877a:	88da      	ldrh	r2, [r3, #6]
    877c:	68fb      	ldr	r3, [r7, #12]
    877e:	801a      	strh	r2, [r3, #0]
}
    8780:	bf00      	nop
    8782:	3714      	adds	r7, #20
    8784:	46bd      	mov	sp, r7
    8786:	f85d 7b04 	ldr.w	r7, [sp], #4
    878a:	4770      	bx	lr

0000878c <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    878c:	b480      	push	{r7}
    878e:	b085      	sub	sp, #20
    8790:	af00      	add	r7, sp, #0
    8792:	60f8      	str	r0, [r7, #12]
    8794:	60b9      	str	r1, [r7, #8]
    8796:	4613      	mov	r3, r2
    8798:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
    879a:	68bb      	ldr	r3, [r7, #8]
    879c:	1c5a      	adds	r2, r3, #1
    879e:	60ba      	str	r2, [r7, #8]
    87a0:	781a      	ldrb	r2, [r3, #0]
    87a2:	68fb      	ldr	r3, [r7, #12]
    87a4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
    87a6:	68bb      	ldr	r3, [r7, #8]
    87a8:	781b      	ldrb	r3, [r3, #0]
    87aa:	b29a      	uxth	r2, r3
    87ac:	68bb      	ldr	r3, [r7, #8]
    87ae:	3301      	adds	r3, #1
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	b29b      	uxth	r3, r3
    87b4:	021b      	lsls	r3, r3, #8
    87b6:	b29b      	uxth	r3, r3
    87b8:	4413      	add	r3, r2
    87ba:	b29a      	uxth	r2, r3
    87bc:	68fb      	ldr	r3, [r7, #12]
    87be:	80da      	strh	r2, [r3, #6]
    87c0:	68bb      	ldr	r3, [r7, #8]
    87c2:	3302      	adds	r3, #2
    87c4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
    87c6:	68fb      	ldr	r3, [r7, #12]
    87c8:	791a      	ldrb	r2, [r3, #4]
    87ca:	68fb      	ldr	r3, [r7, #12]
    87cc:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
    87ce:	68fb      	ldr	r3, [r7, #12]
    87d0:	88da      	ldrh	r2, [r3, #6]
    87d2:	68fb      	ldr	r3, [r7, #12]
    87d4:	801a      	strh	r2, [r3, #0]
}
    87d6:	bf00      	nop
    87d8:	3714      	adds	r7, #20
    87da:	46bd      	mov	sp, r7
    87dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    87e0:	4770      	bx	lr

000087e2 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    87e2:	b480      	push	{r7}
    87e4:	b085      	sub	sp, #20
    87e6:	af00      	add	r7, sp, #0
    87e8:	60f8      	str	r0, [r7, #12]
    87ea:	60b9      	str	r1, [r7, #8]
    87ec:	4613      	mov	r3, r2
    87ee:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
    87f0:	68bb      	ldr	r3, [r7, #8]
    87f2:	1c5a      	adds	r2, r3, #1
    87f4:	60ba      	str	r2, [r7, #8]
    87f6:	781a      	ldrb	r2, [r3, #0]
    87f8:	68fb      	ldr	r3, [r7, #12]
    87fa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
    87fc:	68bb      	ldr	r3, [r7, #8]
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	b29a      	uxth	r2, r3
    8802:	68bb      	ldr	r3, [r7, #8]
    8804:	3301      	adds	r3, #1
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	b29b      	uxth	r3, r3
    880a:	021b      	lsls	r3, r3, #8
    880c:	b29b      	uxth	r3, r3
    880e:	4413      	add	r3, r2
    8810:	b29a      	uxth	r2, r3
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	80da      	strh	r2, [r3, #6]
    8816:	68bb      	ldr	r3, [r7, #8]
    8818:	3302      	adds	r3, #2
    881a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
    881c:	68bb      	ldr	r3, [r7, #8]
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	b29a      	uxth	r2, r3
    8822:	68bb      	ldr	r3, [r7, #8]
    8824:	3301      	adds	r3, #1
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	b29b      	uxth	r3, r3
    882a:	021b      	lsls	r3, r3, #8
    882c:	b29b      	uxth	r3, r3
    882e:	4413      	add	r3, r2
    8830:	b29a      	uxth	r2, r3
    8832:	68fb      	ldr	r3, [r7, #12]
    8834:	811a      	strh	r2, [r3, #8]
    8836:	68bb      	ldr	r3, [r7, #8]
    8838:	3302      	adds	r3, #2
    883a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
    883c:	68fb      	ldr	r3, [r7, #12]
    883e:	791a      	ldrb	r2, [r3, #4]
    8840:	68fb      	ldr	r3, [r7, #12]
    8842:	70da      	strb	r2, [r3, #3]
}
    8844:	bf00      	nop
    8846:	3714      	adds	r7, #20
    8848:	46bd      	mov	sp, r7
    884a:	f85d 7b04 	ldr.w	r7, [sp], #4
    884e:	4770      	bx	lr

00008850 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8850:	b480      	push	{r7}
    8852:	b085      	sub	sp, #20
    8854:	af00      	add	r7, sp, #0
    8856:	60f8      	str	r0, [r7, #12]
    8858:	60b9      	str	r1, [r7, #8]
    885a:	4613      	mov	r3, r2
    885c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
    885e:	68bb      	ldr	r3, [r7, #8]
    8860:	1c5a      	adds	r2, r3, #1
    8862:	60ba      	str	r2, [r7, #8]
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	68fb      	ldr	r3, [r7, #12]
    8868:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	791a      	ldrb	r2, [r3, #4]
    886e:	68fb      	ldr	r3, [r7, #12]
    8870:	70da      	strb	r2, [r3, #3]
}
    8872:	bf00      	nop
    8874:	3714      	adds	r7, #20
    8876:	46bd      	mov	sp, r7
    8878:	f85d 7b04 	ldr.w	r7, [sp], #4
    887c:	4770      	bx	lr

0000887e <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    887e:	b480      	push	{r7}
    8880:	b085      	sub	sp, #20
    8882:	af00      	add	r7, sp, #0
    8884:	60f8      	str	r0, [r7, #12]
    8886:	60b9      	str	r1, [r7, #8]
    8888:	4613      	mov	r3, r2
    888a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
    888c:	68bb      	ldr	r3, [r7, #8]
    888e:	1c5a      	adds	r2, r3, #1
    8890:	60ba      	str	r2, [r7, #8]
    8892:	781a      	ldrb	r2, [r3, #0]
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
    8898:	68bb      	ldr	r3, [r7, #8]
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	b29a      	uxth	r2, r3
    889e:	68bb      	ldr	r3, [r7, #8]
    88a0:	3301      	adds	r3, #1
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	b29b      	uxth	r3, r3
    88a6:	021b      	lsls	r3, r3, #8
    88a8:	b29b      	uxth	r3, r3
    88aa:	4413      	add	r3, r2
    88ac:	b29a      	uxth	r2, r3
    88ae:	68fb      	ldr	r3, [r7, #12]
    88b0:	80da      	strh	r2, [r3, #6]
    88b2:	68bb      	ldr	r3, [r7, #8]
    88b4:	3302      	adds	r3, #2
    88b6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
    88b8:	68fb      	ldr	r3, [r7, #12]
    88ba:	791a      	ldrb	r2, [r3, #4]
    88bc:	68fb      	ldr	r3, [r7, #12]
    88be:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
    88c0:	68fb      	ldr	r3, [r7, #12]
    88c2:	88da      	ldrh	r2, [r3, #6]
    88c4:	68fb      	ldr	r3, [r7, #12]
    88c6:	801a      	strh	r2, [r3, #0]
}
    88c8:	bf00      	nop
    88ca:	3714      	adds	r7, #20
    88cc:	46bd      	mov	sp, r7
    88ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d2:	4770      	bx	lr

000088d4 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    88d4:	b480      	push	{r7}
    88d6:	b085      	sub	sp, #20
    88d8:	af00      	add	r7, sp, #0
    88da:	60f8      	str	r0, [r7, #12]
    88dc:	60b9      	str	r1, [r7, #8]
    88de:	4613      	mov	r3, r2
    88e0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
    88e2:	68bb      	ldr	r3, [r7, #8]
    88e4:	1c5a      	adds	r2, r3, #1
    88e6:	60ba      	str	r2, [r7, #8]
    88e8:	781a      	ldrb	r2, [r3, #0]
    88ea:	68fb      	ldr	r3, [r7, #12]
    88ec:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
    88ee:	68bb      	ldr	r3, [r7, #8]
    88f0:	781b      	ldrb	r3, [r3, #0]
    88f2:	b29a      	uxth	r2, r3
    88f4:	68bb      	ldr	r3, [r7, #8]
    88f6:	3301      	adds	r3, #1
    88f8:	781b      	ldrb	r3, [r3, #0]
    88fa:	b29b      	uxth	r3, r3
    88fc:	021b      	lsls	r3, r3, #8
    88fe:	b29b      	uxth	r3, r3
    8900:	4413      	add	r3, r2
    8902:	b29a      	uxth	r2, r3
    8904:	68fb      	ldr	r3, [r7, #12]
    8906:	80da      	strh	r2, [r3, #6]
    8908:	68bb      	ldr	r3, [r7, #8]
    890a:	3302      	adds	r3, #2
    890c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
    890e:	68bb      	ldr	r3, [r7, #8]
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	b29a      	uxth	r2, r3
    8914:	68bb      	ldr	r3, [r7, #8]
    8916:	3301      	adds	r3, #1
    8918:	781b      	ldrb	r3, [r3, #0]
    891a:	b29b      	uxth	r3, r3
    891c:	021b      	lsls	r3, r3, #8
    891e:	b29b      	uxth	r3, r3
    8920:	4413      	add	r3, r2
    8922:	b29a      	uxth	r2, r3
    8924:	68fb      	ldr	r3, [r7, #12]
    8926:	811a      	strh	r2, [r3, #8]
    8928:	68bb      	ldr	r3, [r7, #8]
    892a:	3302      	adds	r3, #2
    892c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
    892e:	68bb      	ldr	r3, [r7, #8]
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	b29a      	uxth	r2, r3
    8934:	68bb      	ldr	r3, [r7, #8]
    8936:	3301      	adds	r3, #1
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	b29b      	uxth	r3, r3
    893c:	021b      	lsls	r3, r3, #8
    893e:	b29b      	uxth	r3, r3
    8940:	4413      	add	r3, r2
    8942:	b29a      	uxth	r2, r3
    8944:	68fb      	ldr	r3, [r7, #12]
    8946:	815a      	strh	r2, [r3, #10]
    8948:	68bb      	ldr	r3, [r7, #8]
    894a:	3302      	adds	r3, #2
    894c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
    894e:	68bb      	ldr	r3, [r7, #8]
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	b29a      	uxth	r2, r3
    8954:	68bb      	ldr	r3, [r7, #8]
    8956:	3301      	adds	r3, #1
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	b29b      	uxth	r3, r3
    895c:	021b      	lsls	r3, r3, #8
    895e:	b29b      	uxth	r3, r3
    8960:	4413      	add	r3, r2
    8962:	b29a      	uxth	r2, r3
    8964:	68fb      	ldr	r3, [r7, #12]
    8966:	819a      	strh	r2, [r3, #12]
    8968:	68bb      	ldr	r3, [r7, #8]
    896a:	3302      	adds	r3, #2
    896c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
    896e:	68fb      	ldr	r3, [r7, #12]
    8970:	791a      	ldrb	r2, [r3, #4]
    8972:	68fb      	ldr	r3, [r7, #12]
    8974:	70da      	strb	r2, [r3, #3]
}
    8976:	bf00      	nop
    8978:	3714      	adds	r7, #20
    897a:	46bd      	mov	sp, r7
    897c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8980:	4770      	bx	lr

00008982 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8982:	b480      	push	{r7}
    8984:	b085      	sub	sp, #20
    8986:	af00      	add	r7, sp, #0
    8988:	60f8      	str	r0, [r7, #12]
    898a:	60b9      	str	r1, [r7, #8]
    898c:	4613      	mov	r3, r2
    898e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
    8990:	68bb      	ldr	r3, [r7, #8]
    8992:	781b      	ldrb	r3, [r3, #0]
    8994:	b29a      	uxth	r2, r3
    8996:	68bb      	ldr	r3, [r7, #8]
    8998:	3301      	adds	r3, #1
    899a:	781b      	ldrb	r3, [r3, #0]
    899c:	b29b      	uxth	r3, r3
    899e:	021b      	lsls	r3, r3, #8
    89a0:	b29b      	uxth	r3, r3
    89a2:	4413      	add	r3, r2
    89a4:	b29a      	uxth	r2, r3
    89a6:	68fb      	ldr	r3, [r7, #12]
    89a8:	809a      	strh	r2, [r3, #4]
    89aa:	68bb      	ldr	r3, [r7, #8]
    89ac:	3302      	adds	r3, #2
    89ae:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
    89b0:	68bb      	ldr	r3, [r7, #8]
    89b2:	781b      	ldrb	r3, [r3, #0]
    89b4:	b29a      	uxth	r2, r3
    89b6:	68bb      	ldr	r3, [r7, #8]
    89b8:	3301      	adds	r3, #1
    89ba:	781b      	ldrb	r3, [r3, #0]
    89bc:	b29b      	uxth	r3, r3
    89be:	021b      	lsls	r3, r3, #8
    89c0:	b29b      	uxth	r3, r3
    89c2:	4413      	add	r3, r2
    89c4:	b29a      	uxth	r2, r3
    89c6:	68fb      	ldr	r3, [r7, #12]
    89c8:	80da      	strh	r2, [r3, #6]
    89ca:	68bb      	ldr	r3, [r7, #8]
    89cc:	3302      	adds	r3, #2
    89ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
    89d0:	68bb      	ldr	r3, [r7, #8]
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	b29a      	uxth	r2, r3
    89d6:	68bb      	ldr	r3, [r7, #8]
    89d8:	3301      	adds	r3, #1
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	b29b      	uxth	r3, r3
    89de:	021b      	lsls	r3, r3, #8
    89e0:	b29b      	uxth	r3, r3
    89e2:	4413      	add	r3, r2
    89e4:	b29a      	uxth	r2, r3
    89e6:	68fb      	ldr	r3, [r7, #12]
    89e8:	811a      	strh	r2, [r3, #8]
    89ea:	68bb      	ldr	r3, [r7, #8]
    89ec:	3302      	adds	r3, #2
    89ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
    89f0:	68bb      	ldr	r3, [r7, #8]
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	b29a      	uxth	r2, r3
    89f6:	68bb      	ldr	r3, [r7, #8]
    89f8:	3301      	adds	r3, #1
    89fa:	781b      	ldrb	r3, [r3, #0]
    89fc:	b29b      	uxth	r3, r3
    89fe:	021b      	lsls	r3, r3, #8
    8a00:	b29b      	uxth	r3, r3
    8a02:	4413      	add	r3, r2
    8a04:	b29a      	uxth	r2, r3
    8a06:	68fb      	ldr	r3, [r7, #12]
    8a08:	815a      	strh	r2, [r3, #10]
    8a0a:	68bb      	ldr	r3, [r7, #8]
    8a0c:	3302      	adds	r3, #2
    8a0e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
    8a10:	68bb      	ldr	r3, [r7, #8]
    8a12:	781b      	ldrb	r3, [r3, #0]
    8a14:	b29a      	uxth	r2, r3
    8a16:	68bb      	ldr	r3, [r7, #8]
    8a18:	3301      	adds	r3, #1
    8a1a:	781b      	ldrb	r3, [r3, #0]
    8a1c:	b29b      	uxth	r3, r3
    8a1e:	021b      	lsls	r3, r3, #8
    8a20:	b29b      	uxth	r3, r3
    8a22:	4413      	add	r3, r2
    8a24:	b29a      	uxth	r2, r3
    8a26:	68fb      	ldr	r3, [r7, #12]
    8a28:	819a      	strh	r2, [r3, #12]
    8a2a:	68bb      	ldr	r3, [r7, #8]
    8a2c:	3302      	adds	r3, #2
    8a2e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
    8a30:	68fb      	ldr	r3, [r7, #12]
    8a32:	889a      	ldrh	r2, [r3, #4]
    8a34:	68fb      	ldr	r3, [r7, #12]
    8a36:	801a      	strh	r2, [r3, #0]
}
    8a38:	bf00      	nop
    8a3a:	3714      	adds	r7, #20
    8a3c:	46bd      	mov	sp, r7
    8a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a42:	4770      	bx	lr

00008a44 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8a44:	b480      	push	{r7}
    8a46:	b085      	sub	sp, #20
    8a48:	af00      	add	r7, sp, #0
    8a4a:	60f8      	str	r0, [r7, #12]
    8a4c:	60b9      	str	r1, [r7, #8]
    8a4e:	4613      	mov	r3, r2
    8a50:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
    8a52:	68bb      	ldr	r3, [r7, #8]
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	b29a      	uxth	r2, r3
    8a58:	68bb      	ldr	r3, [r7, #8]
    8a5a:	3301      	adds	r3, #1
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	b29b      	uxth	r3, r3
    8a60:	021b      	lsls	r3, r3, #8
    8a62:	b29b      	uxth	r3, r3
    8a64:	4413      	add	r3, r2
    8a66:	b29a      	uxth	r2, r3
    8a68:	68fb      	ldr	r3, [r7, #12]
    8a6a:	809a      	strh	r2, [r3, #4]
    8a6c:	68bb      	ldr	r3, [r7, #8]
    8a6e:	3302      	adds	r3, #2
    8a70:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
    8a72:	68bb      	ldr	r3, [r7, #8]
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	b29a      	uxth	r2, r3
    8a78:	68bb      	ldr	r3, [r7, #8]
    8a7a:	3301      	adds	r3, #1
    8a7c:	781b      	ldrb	r3, [r3, #0]
    8a7e:	b29b      	uxth	r3, r3
    8a80:	021b      	lsls	r3, r3, #8
    8a82:	b29b      	uxth	r3, r3
    8a84:	4413      	add	r3, r2
    8a86:	b29a      	uxth	r2, r3
    8a88:	68fb      	ldr	r3, [r7, #12]
    8a8a:	80da      	strh	r2, [r3, #6]
    8a8c:	68bb      	ldr	r3, [r7, #8]
    8a8e:	3302      	adds	r3, #2
    8a90:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
    8a92:	68bb      	ldr	r3, [r7, #8]
    8a94:	781b      	ldrb	r3, [r3, #0]
    8a96:	b29a      	uxth	r2, r3
    8a98:	68bb      	ldr	r3, [r7, #8]
    8a9a:	3301      	adds	r3, #1
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	b29b      	uxth	r3, r3
    8aa0:	021b      	lsls	r3, r3, #8
    8aa2:	b29b      	uxth	r3, r3
    8aa4:	4413      	add	r3, r2
    8aa6:	b29a      	uxth	r2, r3
    8aa8:	68fb      	ldr	r3, [r7, #12]
    8aaa:	811a      	strh	r2, [r3, #8]
    8aac:	68bb      	ldr	r3, [r7, #8]
    8aae:	3302      	adds	r3, #2
    8ab0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
    8ab2:	68bb      	ldr	r3, [r7, #8]
    8ab4:	781b      	ldrb	r3, [r3, #0]
    8ab6:	b29a      	uxth	r2, r3
    8ab8:	68bb      	ldr	r3, [r7, #8]
    8aba:	3301      	adds	r3, #1
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	b29b      	uxth	r3, r3
    8ac0:	021b      	lsls	r3, r3, #8
    8ac2:	b29b      	uxth	r3, r3
    8ac4:	4413      	add	r3, r2
    8ac6:	b29a      	uxth	r2, r3
    8ac8:	68fb      	ldr	r3, [r7, #12]
    8aca:	815a      	strh	r2, [r3, #10]
    8acc:	68bb      	ldr	r3, [r7, #8]
    8ace:	3302      	adds	r3, #2
    8ad0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
    8ad2:	68bb      	ldr	r3, [r7, #8]
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	b29a      	uxth	r2, r3
    8ad8:	68bb      	ldr	r3, [r7, #8]
    8ada:	3301      	adds	r3, #1
    8adc:	781b      	ldrb	r3, [r3, #0]
    8ade:	b29b      	uxth	r3, r3
    8ae0:	021b      	lsls	r3, r3, #8
    8ae2:	b29b      	uxth	r3, r3
    8ae4:	4413      	add	r3, r2
    8ae6:	b29a      	uxth	r2, r3
    8ae8:	68fb      	ldr	r3, [r7, #12]
    8aea:	819a      	strh	r2, [r3, #12]
    8aec:	68bb      	ldr	r3, [r7, #8]
    8aee:	3302      	adds	r3, #2
    8af0:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
    8af2:	68fb      	ldr	r3, [r7, #12]
    8af4:	889a      	ldrh	r2, [r3, #4]
    8af6:	68fb      	ldr	r3, [r7, #12]
    8af8:	801a      	strh	r2, [r3, #0]
}
    8afa:	bf00      	nop
    8afc:	3714      	adds	r7, #20
    8afe:	46bd      	mov	sp, r7
    8b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b04:	4770      	bx	lr

00008b06 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8b06:	b580      	push	{r7, lr}
    8b08:	b084      	sub	sp, #16
    8b0a:	af00      	add	r7, sp, #0
    8b0c:	60f8      	str	r0, [r7, #12]
    8b0e:	60b9      	str	r1, [r7, #8]
    8b10:	4613      	mov	r3, r2
    8b12:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
    8b14:	68bb      	ldr	r3, [r7, #8]
    8b16:	1c5a      	adds	r2, r3, #1
    8b18:	60ba      	str	r2, [r7, #8]
    8b1a:	781a      	ldrb	r2, [r3, #0]
    8b1c:	68fb      	ldr	r3, [r7, #12]
    8b1e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
    8b20:	68fb      	ldr	r3, [r7, #12]
    8b22:	3305      	adds	r3, #5
    8b24:	2240      	movs	r2, #64	; 0x40
    8b26:	68b9      	ldr	r1, [r7, #8]
    8b28:	4618      	mov	r0, r3
    8b2a:	f008 fca6 	bl	1147a <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
    8b2e:	68fb      	ldr	r3, [r7, #12]
    8b30:	791a      	ldrb	r2, [r3, #4]
    8b32:	68fb      	ldr	r3, [r7, #12]
    8b34:	70da      	strb	r2, [r3, #3]
}
    8b36:	bf00      	nop
    8b38:	3710      	adds	r7, #16
    8b3a:	46bd      	mov	sp, r7
    8b3c:	bd80      	pop	{r7, pc}

00008b3e <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8b3e:	b580      	push	{r7, lr}
    8b40:	b084      	sub	sp, #16
    8b42:	af00      	add	r7, sp, #0
    8b44:	60f8      	str	r0, [r7, #12]
    8b46:	60b9      	str	r1, [r7, #8]
    8b48:	4613      	mov	r3, r2
    8b4a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
    8b4c:	68bb      	ldr	r3, [r7, #8]
    8b4e:	1c5a      	adds	r2, r3, #1
    8b50:	60ba      	str	r2, [r7, #8]
    8b52:	781a      	ldrb	r2, [r3, #0]
    8b54:	68fb      	ldr	r3, [r7, #12]
    8b56:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
    8b58:	68fb      	ldr	r3, [r7, #12]
    8b5a:	3305      	adds	r3, #5
    8b5c:	2220      	movs	r2, #32
    8b5e:	68b9      	ldr	r1, [r7, #8]
    8b60:	4618      	mov	r0, r3
    8b62:	f008 fc8a 	bl	1147a <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
    8b66:	68fb      	ldr	r3, [r7, #12]
    8b68:	791a      	ldrb	r2, [r3, #4]
    8b6a:	68fb      	ldr	r3, [r7, #12]
    8b6c:	70da      	strb	r2, [r3, #3]
}
    8b6e:	bf00      	nop
    8b70:	3710      	adds	r7, #16
    8b72:	46bd      	mov	sp, r7
    8b74:	bd80      	pop	{r7, pc}

00008b76 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8b76:	b480      	push	{r7}
    8b78:	b085      	sub	sp, #20
    8b7a:	af00      	add	r7, sp, #0
    8b7c:	60f8      	str	r0, [r7, #12]
    8b7e:	60b9      	str	r1, [r7, #8]
    8b80:	4613      	mov	r3, r2
    8b82:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
    8b84:	68bb      	ldr	r3, [r7, #8]
    8b86:	1c5a      	adds	r2, r3, #1
    8b88:	60ba      	str	r2, [r7, #8]
    8b8a:	781a      	ldrb	r2, [r3, #0]
    8b8c:	68fb      	ldr	r3, [r7, #12]
    8b8e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
    8b90:	68bb      	ldr	r3, [r7, #8]
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	b29a      	uxth	r2, r3
    8b96:	68bb      	ldr	r3, [r7, #8]
    8b98:	3301      	adds	r3, #1
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	b29b      	uxth	r3, r3
    8b9e:	021b      	lsls	r3, r3, #8
    8ba0:	b29b      	uxth	r3, r3
    8ba2:	4413      	add	r3, r2
    8ba4:	b29a      	uxth	r2, r3
    8ba6:	68fb      	ldr	r3, [r7, #12]
    8ba8:	80da      	strh	r2, [r3, #6]
    8baa:	68bb      	ldr	r3, [r7, #8]
    8bac:	3302      	adds	r3, #2
    8bae:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
    8bb0:	68fb      	ldr	r3, [r7, #12]
    8bb2:	791a      	ldrb	r2, [r3, #4]
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
    8bb8:	68fb      	ldr	r3, [r7, #12]
    8bba:	88da      	ldrh	r2, [r3, #6]
    8bbc:	68fb      	ldr	r3, [r7, #12]
    8bbe:	801a      	strh	r2, [r3, #0]
}
    8bc0:	bf00      	nop
    8bc2:	3714      	adds	r7, #20
    8bc4:	46bd      	mov	sp, r7
    8bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bca:	4770      	bx	lr

00008bcc <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8bcc:	b480      	push	{r7}
    8bce:	b085      	sub	sp, #20
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	60f8      	str	r0, [r7, #12]
    8bd4:	60b9      	str	r1, [r7, #8]
    8bd6:	4613      	mov	r3, r2
    8bd8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
    8bda:	68bb      	ldr	r3, [r7, #8]
    8bdc:	781b      	ldrb	r3, [r3, #0]
    8bde:	b29a      	uxth	r2, r3
    8be0:	68bb      	ldr	r3, [r7, #8]
    8be2:	3301      	adds	r3, #1
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	b29b      	uxth	r3, r3
    8be8:	021b      	lsls	r3, r3, #8
    8bea:	b29b      	uxth	r3, r3
    8bec:	4413      	add	r3, r2
    8bee:	b29a      	uxth	r2, r3
    8bf0:	68fb      	ldr	r3, [r7, #12]
    8bf2:	809a      	strh	r2, [r3, #4]
    8bf4:	68bb      	ldr	r3, [r7, #8]
    8bf6:	3302      	adds	r3, #2
    8bf8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
    8bfa:	68fb      	ldr	r3, [r7, #12]
    8bfc:	889a      	ldrh	r2, [r3, #4]
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	801a      	strh	r2, [r3, #0]
}
    8c02:	bf00      	nop
    8c04:	3714      	adds	r7, #20
    8c06:	46bd      	mov	sp, r7
    8c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c0c:	4770      	bx	lr

00008c0e <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8c0e:	b480      	push	{r7}
    8c10:	b085      	sub	sp, #20
    8c12:	af00      	add	r7, sp, #0
    8c14:	60f8      	str	r0, [r7, #12]
    8c16:	60b9      	str	r1, [r7, #8]
    8c18:	4613      	mov	r3, r2
    8c1a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
    8c1c:	68bb      	ldr	r3, [r7, #8]
    8c1e:	1c5a      	adds	r2, r3, #1
    8c20:	60ba      	str	r2, [r7, #8]
    8c22:	781a      	ldrb	r2, [r3, #0]
    8c24:	68fb      	ldr	r3, [r7, #12]
    8c26:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
    8c28:	68bb      	ldr	r3, [r7, #8]
    8c2a:	781b      	ldrb	r3, [r3, #0]
    8c2c:	b29a      	uxth	r2, r3
    8c2e:	68bb      	ldr	r3, [r7, #8]
    8c30:	3301      	adds	r3, #1
    8c32:	781b      	ldrb	r3, [r3, #0]
    8c34:	b29b      	uxth	r3, r3
    8c36:	021b      	lsls	r3, r3, #8
    8c38:	b29b      	uxth	r3, r3
    8c3a:	4413      	add	r3, r2
    8c3c:	b29a      	uxth	r2, r3
    8c3e:	68fb      	ldr	r3, [r7, #12]
    8c40:	80da      	strh	r2, [r3, #6]
    8c42:	68bb      	ldr	r3, [r7, #8]
    8c44:	3302      	adds	r3, #2
    8c46:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
    8c48:	68bb      	ldr	r3, [r7, #8]
    8c4a:	1c5a      	adds	r2, r3, #1
    8c4c:	60ba      	str	r2, [r7, #8]
    8c4e:	781a      	ldrb	r2, [r3, #0]
    8c50:	68fb      	ldr	r3, [r7, #12]
    8c52:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
    8c54:	68bb      	ldr	r3, [r7, #8]
    8c56:	1c5a      	adds	r2, r3, #1
    8c58:	60ba      	str	r2, [r7, #8]
    8c5a:	781a      	ldrb	r2, [r3, #0]
    8c5c:	68fb      	ldr	r3, [r7, #12]
    8c5e:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
    8c60:	68fb      	ldr	r3, [r7, #12]
    8c62:	791a      	ldrb	r2, [r3, #4]
    8c64:	68fb      	ldr	r3, [r7, #12]
    8c66:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
    8c68:	68fb      	ldr	r3, [r7, #12]
    8c6a:	88da      	ldrh	r2, [r3, #6]
    8c6c:	68fb      	ldr	r3, [r7, #12]
    8c6e:	801a      	strh	r2, [r3, #0]
}
    8c70:	bf00      	nop
    8c72:	3714      	adds	r7, #20
    8c74:	46bd      	mov	sp, r7
    8c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c7a:	4770      	bx	lr

00008c7c <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8c7c:	b480      	push	{r7}
    8c7e:	b085      	sub	sp, #20
    8c80:	af00      	add	r7, sp, #0
    8c82:	60f8      	str	r0, [r7, #12]
    8c84:	60b9      	str	r1, [r7, #8]
    8c86:	4613      	mov	r3, r2
    8c88:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
    8c8a:	68bb      	ldr	r3, [r7, #8]
    8c8c:	1c5a      	adds	r2, r3, #1
    8c8e:	60ba      	str	r2, [r7, #8]
    8c90:	781a      	ldrb	r2, [r3, #0]
    8c92:	68fb      	ldr	r3, [r7, #12]
    8c94:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
    8c96:	68fb      	ldr	r3, [r7, #12]
    8c98:	791a      	ldrb	r2, [r3, #4]
    8c9a:	68fb      	ldr	r3, [r7, #12]
    8c9c:	70da      	strb	r2, [r3, #3]
}
    8c9e:	bf00      	nop
    8ca0:	3714      	adds	r7, #20
    8ca2:	46bd      	mov	sp, r7
    8ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca8:	4770      	bx	lr

00008caa <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8caa:	b480      	push	{r7}
    8cac:	b085      	sub	sp, #20
    8cae:	af00      	add	r7, sp, #0
    8cb0:	60f8      	str	r0, [r7, #12]
    8cb2:	60b9      	str	r1, [r7, #8]
    8cb4:	4613      	mov	r3, r2
    8cb6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
    8cb8:	68bb      	ldr	r3, [r7, #8]
    8cba:	1c5a      	adds	r2, r3, #1
    8cbc:	60ba      	str	r2, [r7, #8]
    8cbe:	781a      	ldrb	r2, [r3, #0]
    8cc0:	68fb      	ldr	r3, [r7, #12]
    8cc2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
    8cc4:	68bb      	ldr	r3, [r7, #8]
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	b29a      	uxth	r2, r3
    8cca:	68bb      	ldr	r3, [r7, #8]
    8ccc:	3301      	adds	r3, #1
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	b29b      	uxth	r3, r3
    8cd2:	021b      	lsls	r3, r3, #8
    8cd4:	b29b      	uxth	r3, r3
    8cd6:	4413      	add	r3, r2
    8cd8:	b29a      	uxth	r2, r3
    8cda:	68fb      	ldr	r3, [r7, #12]
    8cdc:	80da      	strh	r2, [r3, #6]
    8cde:	68bb      	ldr	r3, [r7, #8]
    8ce0:	3302      	adds	r3, #2
    8ce2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
    8ce4:	68bb      	ldr	r3, [r7, #8]
    8ce6:	1c5a      	adds	r2, r3, #1
    8ce8:	60ba      	str	r2, [r7, #8]
    8cea:	781a      	ldrb	r2, [r3, #0]
    8cec:	68fb      	ldr	r3, [r7, #12]
    8cee:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
    8cf0:	68bb      	ldr	r3, [r7, #8]
    8cf2:	1c5a      	adds	r2, r3, #1
    8cf4:	60ba      	str	r2, [r7, #8]
    8cf6:	781a      	ldrb	r2, [r3, #0]
    8cf8:	68fb      	ldr	r3, [r7, #12]
    8cfa:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
    8cfc:	68fb      	ldr	r3, [r7, #12]
    8cfe:	791a      	ldrb	r2, [r3, #4]
    8d00:	68fb      	ldr	r3, [r7, #12]
    8d02:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
    8d04:	68fb      	ldr	r3, [r7, #12]
    8d06:	88da      	ldrh	r2, [r3, #6]
    8d08:	68fb      	ldr	r3, [r7, #12]
    8d0a:	801a      	strh	r2, [r3, #0]
}
    8d0c:	bf00      	nop
    8d0e:	3714      	adds	r7, #20
    8d10:	46bd      	mov	sp, r7
    8d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d16:	4770      	bx	lr

00008d18 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	b084      	sub	sp, #16
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
    8d20:	460b      	mov	r3, r1
    8d22:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	1c5a      	adds	r2, r3, #1
    8d28:	607a      	str	r2, [r7, #4]
    8d2a:	781b      	ldrb	r3, [r3, #0]
    8d2c:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);
    8d2e:	7bfb      	ldrb	r3, [r7, #15]
    8d30:	4619      	mov	r1, r3
    8d32:	483a      	ldr	r0, [pc, #232]	; (8e1c <hciEvtProcessLeAdvReport+0x104>)
    8d34:	f001 fb0c 	bl	a350 <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    8d38:	7bfb      	ldrb	r3, [r7, #15]
    8d3a:	2b0f      	cmp	r3, #15
    8d3c:	d86a      	bhi.n	8e14 <hciEvtProcessLeAdvReport+0xfc>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
    8d3e:	203b      	movs	r0, #59	; 0x3b
    8d40:	f001 fff0 	bl	ad24 <WsfBufAlloc>
    8d44:	60b8      	str	r0, [r7, #8]
    8d46:	68bb      	ldr	r3, [r7, #8]
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d064      	beq.n	8e16 <hciEvtProcessLeAdvReport+0xfe>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    8d4c:	e059      	b.n	8e02 <hciEvtProcessLeAdvReport+0xea>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	1c5a      	adds	r2, r3, #1
    8d52:	607a      	str	r2, [r7, #4]
    8d54:	781a      	ldrb	r2, [r3, #0]
    8d56:	68bb      	ldr	r3, [r7, #8]
    8d58:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	1c5a      	adds	r2, r3, #1
    8d5e:	607a      	str	r2, [r7, #4]
    8d60:	781a      	ldrb	r2, [r3, #0]
    8d62:	68bb      	ldr	r3, [r7, #8]
    8d64:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    8d66:	68bb      	ldr	r3, [r7, #8]
    8d68:	330c      	adds	r3, #12
    8d6a:	6879      	ldr	r1, [r7, #4]
    8d6c:	4618      	mov	r0, r3
    8d6e:	f004 fa4b 	bl	d208 <BdaCpy>
    8d72:	687b      	ldr	r3, [r7, #4]
    8d74:	3306      	adds	r3, #6
    8d76:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    8d78:	687b      	ldr	r3, [r7, #4]
    8d7a:	1c5a      	adds	r2, r3, #1
    8d7c:	607a      	str	r2, [r7, #4]
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	68bb      	ldr	r3, [r7, #8]
    8d82:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);
    8d84:	68bb      	ldr	r3, [r7, #8]
    8d86:	7a1b      	ldrb	r3, [r3, #8]
    8d88:	4619      	mov	r1, r3
    8d8a:	4825      	ldr	r0, [pc, #148]	; (8e20 <hciEvtProcessLeAdvReport+0x108>)
    8d8c:	f001 fae0 	bl	a350 <WsfTrace>

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
    8d90:	68bb      	ldr	r3, [r7, #8]
    8d92:	7a1b      	ldrb	r3, [r3, #8]
    8d94:	2b1f      	cmp	r3, #31
    8d96:	d903      	bls.n	8da0 <hciEvtProcessLeAdvReport+0x88>
      {
        HCI_TRACE_WARN0("Invalid adv report data len");
    8d98:	4822      	ldr	r0, [pc, #136]	; (8e24 <hciEvtProcessLeAdvReport+0x10c>)
    8d9a:	f001 fad9 	bl	a350 <WsfTrace>
        break;
    8d9e:	e035      	b.n	8e0c <hciEvtProcessLeAdvReport+0xf4>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
    8da0:	68bb      	ldr	r3, [r7, #8]
    8da2:	f103 021c 	add.w	r2, r3, #28
    8da6:	68bb      	ldr	r3, [r7, #8]
    8da8:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
    8daa:	68bb      	ldr	r3, [r7, #8]
    8dac:	6858      	ldr	r0, [r3, #4]
    8dae:	68bb      	ldr	r3, [r7, #8]
    8db0:	7a1b      	ldrb	r3, [r3, #8]
    8db2:	461a      	mov	r2, r3
    8db4:	6879      	ldr	r1, [r7, #4]
    8db6:	f008 fb60 	bl	1147a <memcpy>
      p += pMsg->len;
    8dba:	68bb      	ldr	r3, [r7, #8]
    8dbc:	7a1b      	ldrb	r3, [r3, #8]
    8dbe:	461a      	mov	r2, r3
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	4413      	add	r3, r2
    8dc4:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	1c5a      	adds	r2, r3, #1
    8dca:	607a      	str	r2, [r7, #4]
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	b25a      	sxtb	r2, r3
    8dd0:	68bb      	ldr	r3, [r7, #8]
    8dd2:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
    8dd4:	68bb      	ldr	r3, [r7, #8]
    8dd6:	2200      	movs	r2, #0
    8dd8:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
    8dda:	68bb      	ldr	r3, [r7, #8]
    8ddc:	3313      	adds	r3, #19
    8dde:	2206      	movs	r2, #6
    8de0:	2100      	movs	r1, #0
    8de2:	4618      	mov	r0, r3
    8de4:	f008 fb6e 	bl	114c4 <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
    8de8:	68bb      	ldr	r3, [r7, #8]
    8dea:	2200      	movs	r2, #0
    8dec:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    8dee:	68bb      	ldr	r3, [r7, #8]
    8df0:	2206      	movs	r2, #6
    8df2:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    8df4:	68bb      	ldr	r3, [r7, #8]
    8df6:	2200      	movs	r2, #0
    8df8:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    8dfa:	4b0b      	ldr	r3, [pc, #44]	; (8e28 <hciEvtProcessLeAdvReport+0x110>)
    8dfc:	689b      	ldr	r3, [r3, #8]
    8dfe:	68b8      	ldr	r0, [r7, #8]
    8e00:	4798      	blx	r3
    while (i-- > 0)
    8e02:	7bfb      	ldrb	r3, [r7, #15]
    8e04:	1e5a      	subs	r2, r3, #1
    8e06:	73fa      	strb	r2, [r7, #15]
    8e08:	2b00      	cmp	r3, #0
    8e0a:	d1a0      	bne.n	8d4e <hciEvtProcessLeAdvReport+0x36>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    8e0c:	68b8      	ldr	r0, [r7, #8]
    8e0e:	f001 ffc9 	bl	ada4 <WsfBufFree>
    8e12:	e000      	b.n	8e16 <hciEvtProcessLeAdvReport+0xfe>
    return;
    8e14:	bf00      	nop
  }
}
    8e16:	3710      	adds	r7, #16
    8e18:	46bd      	mov	sp, r7
    8e1a:	bd80      	pop	{r7, pc}
    8e1c:	00011728 	.word	0x00011728
    8e20:	00011748 	.word	0x00011748
    8e24:	00011768 	.word	0x00011768
    8e28:	100028f4 	.word	0x100028f4

00008e2c <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	b086      	sub	sp, #24
    8e30:	af00      	add	r7, sp, #0
    8e32:	6078      	str	r0, [r7, #4]
    8e34:	460b      	mov	r3, r1
    8e36:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
    8e38:	687b      	ldr	r3, [r7, #4]
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);
    8e3e:	7dfb      	ldrb	r3, [r7, #23]
    8e40:	4619      	mov	r1, r3
    8e42:	486b      	ldr	r0, [pc, #428]	; (8ff0 <hciEvtProcessLeExtAdvReport+0x1c4>)
    8e44:	f001 fa84 	bl	a350 <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    8e48:	7dfb      	ldrb	r3, [r7, #23]
    8e4a:	2b0f      	cmp	r3, #15
    8e4c:	f200 80cc 	bhi.w	8fe8 <hciEvtProcessLeExtAdvReport+0x1bc>
  {
    return;
  }

  ptr = p + 1;
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	3301      	adds	r3, #1
    8e54:	613b      	str	r3, [r7, #16]
  maxLen = 0;
    8e56:	2300      	movs	r3, #0
    8e58:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
    8e5a:	e011      	b.n	8e80 <hciEvtProcessLeExtAdvReport+0x54>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
    8e5c:	693b      	ldr	r3, [r7, #16]
    8e5e:	3317      	adds	r3, #23
    8e60:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
    8e62:	693b      	ldr	r3, [r7, #16]
    8e64:	1c5a      	adds	r2, r3, #1
    8e66:	613a      	str	r2, [r7, #16]
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
    8e6c:	7bbb      	ldrb	r3, [r7, #14]
    8e6e:	693a      	ldr	r2, [r7, #16]
    8e70:	4413      	add	r3, r2
    8e72:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
    8e74:	7bba      	ldrb	r2, [r7, #14]
    8e76:	7bfb      	ldrb	r3, [r7, #15]
    8e78:	429a      	cmp	r2, r3
    8e7a:	d901      	bls.n	8e80 <hciEvtProcessLeExtAdvReport+0x54>
    {
      /* update max len */
      maxLen = dataLen;
    8e7c:	7bbb      	ldrb	r3, [r7, #14]
    8e7e:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
    8e80:	7dfb      	ldrb	r3, [r7, #23]
    8e82:	1e5a      	subs	r2, r3, #1
    8e84:	75fa      	strb	r2, [r7, #23]
    8e86:	2b00      	cmp	r3, #0
    8e88:	d1e8      	bne.n	8e5c <hciEvtProcessLeExtAdvReport+0x30>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
    8e8a:	7bfb      	ldrb	r3, [r7, #15]
    8e8c:	b29b      	uxth	r3, r3
    8e8e:	3320      	adds	r3, #32
    8e90:	b29b      	uxth	r3, r3
    8e92:	4618      	mov	r0, r3
    8e94:	f001 ff46 	bl	ad24 <WsfBufAlloc>
    8e98:	60b8      	str	r0, [r7, #8]
    8e9a:	68bb      	ldr	r3, [r7, #8]
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	f000 80a4 	beq.w	8fea <hciEvtProcessLeExtAdvReport+0x1be>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	1c5a      	adds	r2, r3, #1
    8ea6:	607a      	str	r2, [r7, #4]
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
    8eac:	e092      	b.n	8fd4 <hciEvtProcessLeExtAdvReport+0x1a8>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	b29a      	uxth	r2, r3
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	3301      	adds	r3, #1
    8eb8:	781b      	ldrb	r3, [r3, #0]
    8eba:	b29b      	uxth	r3, r3
    8ebc:	021b      	lsls	r3, r3, #8
    8ebe:	b29b      	uxth	r3, r3
    8ec0:	4413      	add	r3, r2
    8ec2:	b29a      	uxth	r2, r3
    8ec4:	68bb      	ldr	r3, [r7, #8]
    8ec6:	809a      	strh	r2, [r3, #4]
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	3302      	adds	r3, #2
    8ecc:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	1c5a      	adds	r2, r3, #1
    8ed2:	607a      	str	r2, [r7, #4]
    8ed4:	781a      	ldrb	r2, [r3, #0]
    8ed6:	68bb      	ldr	r3, [r7, #8]
    8ed8:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
    8eda:	68bb      	ldr	r3, [r7, #8]
    8edc:	3307      	adds	r3, #7
    8ede:	6879      	ldr	r1, [r7, #4]
    8ee0:	4618      	mov	r0, r3
    8ee2:	f004 f991 	bl	d208 <BdaCpy>
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	3306      	adds	r3, #6
    8eea:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	1c5a      	adds	r2, r3, #1
    8ef0:	607a      	str	r2, [r7, #4]
    8ef2:	781a      	ldrb	r2, [r3, #0]
    8ef4:	68bb      	ldr	r3, [r7, #8]
    8ef6:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	1c5a      	adds	r2, r3, #1
    8efc:	607a      	str	r2, [r7, #4]
    8efe:	781a      	ldrb	r2, [r3, #0]
    8f00:	68bb      	ldr	r3, [r7, #8]
    8f02:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	1c5a      	adds	r2, r3, #1
    8f08:	607a      	str	r2, [r7, #4]
    8f0a:	781a      	ldrb	r2, [r3, #0]
    8f0c:	68bb      	ldr	r3, [r7, #8]
    8f0e:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
    8f10:	687b      	ldr	r3, [r7, #4]
    8f12:	1c5a      	adds	r2, r3, #1
    8f14:	607a      	str	r2, [r7, #4]
    8f16:	781b      	ldrb	r3, [r3, #0]
    8f18:	b25a      	sxtb	r2, r3
    8f1a:	68bb      	ldr	r3, [r7, #8]
    8f1c:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	1c5a      	adds	r2, r3, #1
    8f22:	607a      	str	r2, [r7, #4]
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	b25a      	sxtb	r2, r3
    8f28:	68bb      	ldr	r3, [r7, #8]
    8f2a:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	781b      	ldrb	r3, [r3, #0]
    8f30:	b29a      	uxth	r2, r3
    8f32:	687b      	ldr	r3, [r7, #4]
    8f34:	3301      	adds	r3, #1
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	b29b      	uxth	r3, r3
    8f3a:	021b      	lsls	r3, r3, #8
    8f3c:	b29b      	uxth	r3, r3
    8f3e:	4413      	add	r3, r2
    8f40:	b29b      	uxth	r3, r3
    8f42:	b21a      	sxth	r2, r3
    8f44:	68bb      	ldr	r3, [r7, #8]
    8f46:	825a      	strh	r2, [r3, #18]
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	3302      	adds	r3, #2
    8f4c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	1c5a      	adds	r2, r3, #1
    8f52:	607a      	str	r2, [r7, #4]
    8f54:	781a      	ldrb	r2, [r3, #0]
    8f56:	68bb      	ldr	r3, [r7, #8]
    8f58:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    8f5a:	68bb      	ldr	r3, [r7, #8]
    8f5c:	3315      	adds	r3, #21
    8f5e:	6879      	ldr	r1, [r7, #4]
    8f60:	4618      	mov	r0, r3
    8f62:	f004 f951 	bl	d208 <BdaCpy>
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	3306      	adds	r3, #6
    8f6a:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	1c5a      	adds	r2, r3, #1
    8f70:	607a      	str	r2, [r7, #4]
    8f72:	781a      	ldrb	r2, [r3, #0]
    8f74:	68bb      	ldr	r3, [r7, #8]
    8f76:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);
    8f78:	68bb      	ldr	r3, [r7, #8]
    8f7a:	7edb      	ldrb	r3, [r3, #27]
    8f7c:	4619      	mov	r1, r3
    8f7e:	481d      	ldr	r0, [pc, #116]	; (8ff4 <hciEvtProcessLeExtAdvReport+0x1c8>)
    8f80:	f001 f9e6 	bl	a350 <WsfTrace>

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
    8f84:	68bb      	ldr	r3, [r7, #8]
    8f86:	7edb      	ldrb	r3, [r3, #27]
    8f88:	2be5      	cmp	r3, #229	; 0xe5
    8f8a:	d903      	bls.n	8f94 <hciEvtProcessLeExtAdvReport+0x168>
      {
        HCI_TRACE_WARN0("Invalid ext adv report data len");
    8f8c:	481a      	ldr	r0, [pc, #104]	; (8ff8 <hciEvtProcessLeExtAdvReport+0x1cc>)
    8f8e:	f001 f9df 	bl	a350 <WsfTrace>
        break;
    8f92:	e025      	b.n	8fe0 <hciEvtProcessLeExtAdvReport+0x1b4>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
    8f94:	68bb      	ldr	r3, [r7, #8]
    8f96:	f103 0220 	add.w	r2, r3, #32
    8f9a:	68bb      	ldr	r3, [r7, #8]
    8f9c:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
    8f9e:	68bb      	ldr	r3, [r7, #8]
    8fa0:	69d8      	ldr	r0, [r3, #28]
    8fa2:	68bb      	ldr	r3, [r7, #8]
    8fa4:	7edb      	ldrb	r3, [r3, #27]
    8fa6:	461a      	mov	r2, r3
    8fa8:	6879      	ldr	r1, [r7, #4]
    8faa:	f008 fa66 	bl	1147a <memcpy>
      p += pMsg->len;
    8fae:	68bb      	ldr	r3, [r7, #8]
    8fb0:	7edb      	ldrb	r3, [r3, #27]
    8fb2:	461a      	mov	r2, r3
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	4413      	add	r3, r2
    8fb8:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    8fba:	68bb      	ldr	r3, [r7, #8]
    8fbc:	2200      	movs	r2, #0
    8fbe:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
    8fc0:	68bb      	ldr	r3, [r7, #8]
    8fc2:	222c      	movs	r2, #44	; 0x2c
    8fc4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    8fc6:	68bb      	ldr	r3, [r7, #8]
    8fc8:	2200      	movs	r2, #0
    8fca:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    8fcc:	4b0b      	ldr	r3, [pc, #44]	; (8ffc <hciEvtProcessLeExtAdvReport+0x1d0>)
    8fce:	689b      	ldr	r3, [r3, #8]
    8fd0:	68b8      	ldr	r0, [r7, #8]
    8fd2:	4798      	blx	r3
    while (i-- > 0)
    8fd4:	7dfb      	ldrb	r3, [r7, #23]
    8fd6:	1e5a      	subs	r2, r3, #1
    8fd8:	75fa      	strb	r2, [r7, #23]
    8fda:	2b00      	cmp	r3, #0
    8fdc:	f47f af67 	bne.w	8eae <hciEvtProcessLeExtAdvReport+0x82>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    8fe0:	68b8      	ldr	r0, [r7, #8]
    8fe2:	f001 fedf 	bl	ada4 <WsfBufFree>
    8fe6:	e000      	b.n	8fea <hciEvtProcessLeExtAdvReport+0x1be>
    return;
    8fe8:	bf00      	nop
  }
}
    8fea:	3718      	adds	r7, #24
    8fec:	46bd      	mov	sp, r7
    8fee:	bd80      	pop	{r7, pc}
    8ff0:	00011784 	.word	0x00011784
    8ff4:	000117a8 	.word	0x000117a8
    8ff8:	000117cc 	.word	0x000117cc
    8ffc:	100028f4 	.word	0x100028f4

00009000 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9000:	b480      	push	{r7}
    9002:	b085      	sub	sp, #20
    9004:	af00      	add	r7, sp, #0
    9006:	60f8      	str	r0, [r7, #12]
    9008:	60b9      	str	r1, [r7, #8]
    900a:	4613      	mov	r3, r2
    900c:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
    900e:	bf00      	nop
    9010:	3714      	adds	r7, #20
    9012:	46bd      	mov	sp, r7
    9014:	f85d 7b04 	ldr.w	r7, [sp], #4
    9018:	4770      	bx	lr

0000901a <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    901a:	b480      	push	{r7}
    901c:	b085      	sub	sp, #20
    901e:	af00      	add	r7, sp, #0
    9020:	60f8      	str	r0, [r7, #12]
    9022:	60b9      	str	r1, [r7, #8]
    9024:	4613      	mov	r3, r2
    9026:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
    9028:	68bb      	ldr	r3, [r7, #8]
    902a:	1c5a      	adds	r2, r3, #1
    902c:	60ba      	str	r2, [r7, #8]
    902e:	781a      	ldrb	r2, [r3, #0]
    9030:	68fb      	ldr	r3, [r7, #12]
    9032:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
    9034:	68bb      	ldr	r3, [r7, #8]
    9036:	1c5a      	adds	r2, r3, #1
    9038:	60ba      	str	r2, [r7, #8]
    903a:	781a      	ldrb	r2, [r3, #0]
    903c:	68fb      	ldr	r3, [r7, #12]
    903e:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
    9040:	68bb      	ldr	r3, [r7, #8]
    9042:	781b      	ldrb	r3, [r3, #0]
    9044:	b29a      	uxth	r2, r3
    9046:	68bb      	ldr	r3, [r7, #8]
    9048:	3301      	adds	r3, #1
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	b29b      	uxth	r3, r3
    904e:	021b      	lsls	r3, r3, #8
    9050:	b29b      	uxth	r3, r3
    9052:	4413      	add	r3, r2
    9054:	b29a      	uxth	r2, r3
    9056:	68fb      	ldr	r3, [r7, #12]
    9058:	80da      	strh	r2, [r3, #6]
    905a:	68bb      	ldr	r3, [r7, #8]
    905c:	3302      	adds	r3, #2
    905e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
    9060:	68bb      	ldr	r3, [r7, #8]
    9062:	1c5a      	adds	r2, r3, #1
    9064:	60ba      	str	r2, [r7, #8]
    9066:	781a      	ldrb	r2, [r3, #0]
    9068:	68fb      	ldr	r3, [r7, #12]
    906a:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
    906c:	68fb      	ldr	r3, [r7, #12]
    906e:	791a      	ldrb	r2, [r3, #4]
    9070:	68fb      	ldr	r3, [r7, #12]
    9072:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
    9074:	68fb      	ldr	r3, [r7, #12]
    9076:	88da      	ldrh	r2, [r3, #6]
    9078:	68fb      	ldr	r3, [r7, #12]
    907a:	801a      	strh	r2, [r3, #0]
}
    907c:	bf00      	nop
    907e:	3714      	adds	r7, #20
    9080:	46bd      	mov	sp, r7
    9082:	f85d 7b04 	ldr.w	r7, [sp], #4
    9086:	4770      	bx	lr

00009088 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9088:	b580      	push	{r7, lr}
    908a:	b084      	sub	sp, #16
    908c:	af00      	add	r7, sp, #0
    908e:	60f8      	str	r0, [r7, #12]
    9090:	60b9      	str	r1, [r7, #8]
    9092:	4613      	mov	r3, r2
    9094:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
    9096:	68bb      	ldr	r3, [r7, #8]
    9098:	1c5a      	adds	r2, r3, #1
    909a:	60ba      	str	r2, [r7, #8]
    909c:	781a      	ldrb	r2, [r3, #0]
    909e:	68fb      	ldr	r3, [r7, #12]
    90a0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
    90a2:	68bb      	ldr	r3, [r7, #8]
    90a4:	1c5a      	adds	r2, r3, #1
    90a6:	60ba      	str	r2, [r7, #8]
    90a8:	781a      	ldrb	r2, [r3, #0]
    90aa:	68fb      	ldr	r3, [r7, #12]
    90ac:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
    90ae:	68fb      	ldr	r3, [r7, #12]
    90b0:	3306      	adds	r3, #6
    90b2:	68b9      	ldr	r1, [r7, #8]
    90b4:	4618      	mov	r0, r3
    90b6:	f004 f8a7 	bl	d208 <BdaCpy>
    90ba:	68bb      	ldr	r3, [r7, #8]
    90bc:	3306      	adds	r3, #6
    90be:	60bb      	str	r3, [r7, #8]
}
    90c0:	bf00      	nop
    90c2:	3710      	adds	r7, #16
    90c4:	46bd      	mov	sp, r7
    90c6:	bd80      	pop	{r7, pc}

000090c8 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    90c8:	b580      	push	{r7, lr}
    90ca:	b084      	sub	sp, #16
    90cc:	af00      	add	r7, sp, #0
    90ce:	60f8      	str	r0, [r7, #12]
    90d0:	60b9      	str	r1, [r7, #8]
    90d2:	4613      	mov	r3, r2
    90d4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
    90d6:	68bb      	ldr	r3, [r7, #8]
    90d8:	1c5a      	adds	r2, r3, #1
    90da:	60ba      	str	r2, [r7, #8]
    90dc:	781a      	ldrb	r2, [r3, #0]
    90de:	68fb      	ldr	r3, [r7, #12]
    90e0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
    90e2:	68bb      	ldr	r3, [r7, #8]
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	b29a      	uxth	r2, r3
    90e8:	68bb      	ldr	r3, [r7, #8]
    90ea:	3301      	adds	r3, #1
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	b29b      	uxth	r3, r3
    90f0:	021b      	lsls	r3, r3, #8
    90f2:	b29b      	uxth	r3, r3
    90f4:	4413      	add	r3, r2
    90f6:	b29a      	uxth	r2, r3
    90f8:	68fb      	ldr	r3, [r7, #12]
    90fa:	80da      	strh	r2, [r3, #6]
    90fc:	68bb      	ldr	r3, [r7, #8]
    90fe:	3302      	adds	r3, #2
    9100:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
    9102:	68bb      	ldr	r3, [r7, #8]
    9104:	1c5a      	adds	r2, r3, #1
    9106:	60ba      	str	r2, [r7, #8]
    9108:	781a      	ldrb	r2, [r3, #0]
    910a:	68fb      	ldr	r3, [r7, #12]
    910c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
    910e:	68bb      	ldr	r3, [r7, #8]
    9110:	1c5a      	adds	r2, r3, #1
    9112:	60ba      	str	r2, [r7, #8]
    9114:	781a      	ldrb	r2, [r3, #0]
    9116:	68fb      	ldr	r3, [r7, #12]
    9118:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
    911a:	68fb      	ldr	r3, [r7, #12]
    911c:	330a      	adds	r3, #10
    911e:	68b9      	ldr	r1, [r7, #8]
    9120:	4618      	mov	r0, r3
    9122:	f004 f871 	bl	d208 <BdaCpy>
    9126:	68bb      	ldr	r3, [r7, #8]
    9128:	3306      	adds	r3, #6
    912a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
    912c:	68bb      	ldr	r3, [r7, #8]
    912e:	1c5a      	adds	r2, r3, #1
    9130:	60ba      	str	r2, [r7, #8]
    9132:	781a      	ldrb	r2, [r3, #0]
    9134:	68fb      	ldr	r3, [r7, #12]
    9136:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
    9138:	68bb      	ldr	r3, [r7, #8]
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	b29a      	uxth	r2, r3
    913e:	68bb      	ldr	r3, [r7, #8]
    9140:	3301      	adds	r3, #1
    9142:	781b      	ldrb	r3, [r3, #0]
    9144:	b29b      	uxth	r3, r3
    9146:	021b      	lsls	r3, r3, #8
    9148:	b29b      	uxth	r3, r3
    914a:	4413      	add	r3, r2
    914c:	b29a      	uxth	r2, r3
    914e:	68fb      	ldr	r3, [r7, #12]
    9150:	825a      	strh	r2, [r3, #18]
    9152:	68bb      	ldr	r3, [r7, #8]
    9154:	3302      	adds	r3, #2
    9156:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
    9158:	68bb      	ldr	r3, [r7, #8]
    915a:	1c5a      	adds	r2, r3, #1
    915c:	60ba      	str	r2, [r7, #8]
    915e:	781a      	ldrb	r2, [r3, #0]
    9160:	68fb      	ldr	r3, [r7, #12]
    9162:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
    9164:	68fb      	ldr	r3, [r7, #12]
    9166:	791a      	ldrb	r2, [r3, #4]
    9168:	68fb      	ldr	r3, [r7, #12]
    916a:	70da      	strb	r2, [r3, #3]
}
    916c:	bf00      	nop
    916e:	3710      	adds	r7, #16
    9170:	46bd      	mov	sp, r7
    9172:	bd80      	pop	{r7, pc}

00009174 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
    917c:	460b      	mov	r3, r1
    917e:	70fb      	strb	r3, [r7, #3]
  hciLePerAdvReportEvt_t *pMsg;
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");
    9180:	4837      	ldr	r0, [pc, #220]	; (9260 <hciEvtProcessLePerAdvReport+0xec>)
    9182:	f001 f8e5 	bl	a350 <WsfTrace>

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	795b      	ldrb	r3, [r3, #5]
    918a:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
    918c:	7bfb      	ldrb	r3, [r7, #15]
    918e:	2bf8      	cmp	r3, #248	; 0xf8
    9190:	d905      	bls.n	919e <hciEvtProcessLePerAdvReport+0x2a>
  {
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    9192:	7bfb      	ldrb	r3, [r7, #15]
    9194:	4619      	mov	r1, r3
    9196:	4833      	ldr	r0, [pc, #204]	; (9264 <hciEvtProcessLePerAdvReport+0xf0>)
    9198:	f001 f8da 	bl	a350 <WsfTrace>
    return;
    919c:	e05c      	b.n	9258 <hciEvtProcessLePerAdvReport+0xe4>
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
    919e:	7bfb      	ldrb	r3, [r7, #15]
    91a0:	b29b      	uxth	r3, r3
    91a2:	3310      	adds	r3, #16
    91a4:	b29b      	uxth	r3, r3
    91a6:	4618      	mov	r0, r3
    91a8:	f001 fdbc 	bl	ad24 <WsfBufAlloc>
    91ac:	60b8      	str	r0, [r7, #8]
    91ae:	68bb      	ldr	r3, [r7, #8]
    91b0:	2b00      	cmp	r3, #0
    91b2:	d051      	beq.n	9258 <hciEvtProcessLePerAdvReport+0xe4>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	781b      	ldrb	r3, [r3, #0]
    91b8:	b29a      	uxth	r2, r3
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	3301      	adds	r3, #1
    91be:	781b      	ldrb	r3, [r3, #0]
    91c0:	b29b      	uxth	r3, r3
    91c2:	021b      	lsls	r3, r3, #8
    91c4:	b29b      	uxth	r3, r3
    91c6:	4413      	add	r3, r2
    91c8:	b29a      	uxth	r2, r3
    91ca:	68bb      	ldr	r3, [r7, #8]
    91cc:	809a      	strh	r2, [r3, #4]
    91ce:	687b      	ldr	r3, [r7, #4]
    91d0:	3302      	adds	r3, #2
    91d2:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	1c5a      	adds	r2, r3, #1
    91d8:	607a      	str	r2, [r7, #4]
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	68bb      	ldr	r3, [r7, #8]
    91de:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
    91e0:	687b      	ldr	r3, [r7, #4]
    91e2:	1c5a      	adds	r2, r3, #1
    91e4:	607a      	str	r2, [r7, #4]
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	68bb      	ldr	r3, [r7, #8]
    91ea:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
    91ec:	687b      	ldr	r3, [r7, #4]
    91ee:	1c5a      	adds	r2, r3, #1
    91f0:	607a      	str	r2, [r7, #4]
    91f2:	781a      	ldrb	r2, [r3, #0]
    91f4:	68bb      	ldr	r3, [r7, #8]
    91f6:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
    91f8:	687b      	ldr	r3, [r7, #4]
    91fa:	1c5a      	adds	r2, r3, #1
    91fc:	607a      	str	r2, [r7, #4]
    91fe:	781a      	ldrb	r2, [r3, #0]
    9200:	68bb      	ldr	r3, [r7, #8]
    9202:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
    9204:	687b      	ldr	r3, [r7, #4]
    9206:	1c5a      	adds	r2, r3, #1
    9208:	607a      	str	r2, [r7, #4]
    920a:	781a      	ldrb	r2, [r3, #0]
    920c:	68bb      	ldr	r3, [r7, #8]
    920e:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);
    9210:	68bb      	ldr	r3, [r7, #8]
    9212:	7a9b      	ldrb	r3, [r3, #10]
    9214:	4619      	mov	r1, r3
    9216:	4814      	ldr	r0, [pc, #80]	; (9268 <hciEvtProcessLePerAdvReport+0xf4>)
    9218:	f001 f89a 	bl	a350 <WsfTrace>

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
    921c:	68bb      	ldr	r3, [r7, #8]
    921e:	f103 0210 	add.w	r2, r3, #16
    9222:	68bb      	ldr	r3, [r7, #8]
    9224:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
    9226:	68bb      	ldr	r3, [r7, #8]
    9228:	68d8      	ldr	r0, [r3, #12]
    922a:	68bb      	ldr	r3, [r7, #8]
    922c:	7a9b      	ldrb	r3, [r3, #10]
    922e:	461a      	mov	r2, r3
    9230:	6879      	ldr	r1, [r7, #4]
    9232:	f008 f922 	bl	1147a <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
    9236:	68bb      	ldr	r3, [r7, #8]
    9238:	2200      	movs	r2, #0
    923a:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
    923c:	68bb      	ldr	r3, [r7, #8]
    923e:	2231      	movs	r2, #49	; 0x31
    9240:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
    9242:	68bb      	ldr	r3, [r7, #8]
    9244:	7a5a      	ldrb	r2, [r3, #9]
    9246:	68bb      	ldr	r3, [r7, #8]
    9248:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
    924a:	4b08      	ldr	r3, [pc, #32]	; (926c <hciEvtProcessLePerAdvReport+0xf8>)
    924c:	689b      	ldr	r3, [r3, #8]
    924e:	68b8      	ldr	r0, [r7, #8]
    9250:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
    9252:	68b8      	ldr	r0, [r7, #8]
    9254:	f001 fda6 	bl	ada4 <WsfBufFree>
  }
}
    9258:	3710      	adds	r7, #16
    925a:	46bd      	mov	sp, r7
    925c:	bd80      	pop	{r7, pc}
    925e:	bf00      	nop
    9260:	000117ec 	.word	0x000117ec
    9264:	00011800 	.word	0x00011800
    9268:	00011824 	.word	0x00011824
    926c:	100028f4 	.word	0x100028f4

00009270 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9270:	b480      	push	{r7}
    9272:	b085      	sub	sp, #20
    9274:	af00      	add	r7, sp, #0
    9276:	60f8      	str	r0, [r7, #12]
    9278:	60b9      	str	r1, [r7, #8]
    927a:	4613      	mov	r3, r2
    927c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    927e:	68bb      	ldr	r3, [r7, #8]
    9280:	1c5a      	adds	r2, r3, #1
    9282:	60ba      	str	r2, [r7, #8]
    9284:	781a      	ldrb	r2, [r3, #0]
    9286:	68fb      	ldr	r3, [r7, #12]
    9288:	70da      	strb	r2, [r3, #3]
}
    928a:	bf00      	nop
    928c:	3714      	adds	r7, #20
    928e:	46bd      	mov	sp, r7
    9290:	f85d 7b04 	ldr.w	r7, [sp], #4
    9294:	4770      	bx	lr

00009296 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9296:	b480      	push	{r7}
    9298:	b085      	sub	sp, #20
    929a:	af00      	add	r7, sp, #0
    929c:	60f8      	str	r0, [r7, #12]
    929e:	60b9      	str	r1, [r7, #8]
    92a0:	4613      	mov	r3, r2
    92a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
    92a4:	68bb      	ldr	r3, [r7, #8]
    92a6:	781b      	ldrb	r3, [r3, #0]
    92a8:	b29a      	uxth	r2, r3
    92aa:	68bb      	ldr	r3, [r7, #8]
    92ac:	3301      	adds	r3, #1
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	b29b      	uxth	r3, r3
    92b2:	021b      	lsls	r3, r3, #8
    92b4:	b29b      	uxth	r3, r3
    92b6:	4413      	add	r3, r2
    92b8:	b29a      	uxth	r2, r3
    92ba:	68fb      	ldr	r3, [r7, #12]
    92bc:	809a      	strh	r2, [r3, #4]
    92be:	68bb      	ldr	r3, [r7, #8]
    92c0:	3302      	adds	r3, #2
    92c2:	60bb      	str	r3, [r7, #8]
}
    92c4:	bf00      	nop
    92c6:	3714      	adds	r7, #20
    92c8:	46bd      	mov	sp, r7
    92ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ce:	4770      	bx	lr

000092d0 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
    92d0:	b580      	push	{r7, lr}
    92d2:	b084      	sub	sp, #16
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]
    92d8:	460b      	mov	r3, r1
    92da:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	1c5a      	adds	r2, r3, #1
    92e0:	607a      	str	r2, [r7, #4]
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);
    92e6:	7bfb      	ldrb	r3, [r7, #15]
    92e8:	4619      	mov	r1, r3
    92ea:	482c      	ldr	r0, [pc, #176]	; (939c <hciEvtProcessLeDirectAdvReport+0xcc>)
    92ec:	f001 f830 	bl	a350 <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    92f0:	7bfb      	ldrb	r3, [r7, #15]
    92f2:	2b0f      	cmp	r3, #15
    92f4:	d84e      	bhi.n	9394 <hciEvtProcessLeDirectAdvReport+0xc4>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
    92f6:	201c      	movs	r0, #28
    92f8:	f001 fd14 	bl	ad24 <WsfBufAlloc>
    92fc:	60b8      	str	r0, [r7, #8]
    92fe:	68bb      	ldr	r3, [r7, #8]
    9300:	2b00      	cmp	r3, #0
    9302:	d048      	beq.n	9396 <hciEvtProcessLeDirectAdvReport+0xc6>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    9304:	e03d      	b.n	9382 <hciEvtProcessLeDirectAdvReport+0xb2>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	1c5a      	adds	r2, r3, #1
    930a:	607a      	str	r2, [r7, #4]
    930c:	781a      	ldrb	r2, [r3, #0]
    930e:	68bb      	ldr	r3, [r7, #8]
    9310:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	1c5a      	adds	r2, r3, #1
    9316:	607a      	str	r2, [r7, #4]
    9318:	781a      	ldrb	r2, [r3, #0]
    931a:	68bb      	ldr	r3, [r7, #8]
    931c:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    931e:	68bb      	ldr	r3, [r7, #8]
    9320:	330c      	adds	r3, #12
    9322:	6879      	ldr	r1, [r7, #4]
    9324:	4618      	mov	r0, r3
    9326:	f003 ff6f 	bl	d208 <BdaCpy>
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	3306      	adds	r3, #6
    932e:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    9330:	687b      	ldr	r3, [r7, #4]
    9332:	1c5a      	adds	r2, r3, #1
    9334:	607a      	str	r2, [r7, #4]
    9336:	781a      	ldrb	r2, [r3, #0]
    9338:	68bb      	ldr	r3, [r7, #8]
    933a:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    933c:	68bb      	ldr	r3, [r7, #8]
    933e:	3313      	adds	r3, #19
    9340:	6879      	ldr	r1, [r7, #4]
    9342:	4618      	mov	r0, r3
    9344:	f003 ff60 	bl	d208 <BdaCpy>
    9348:	687b      	ldr	r3, [r7, #4]
    934a:	3306      	adds	r3, #6
    934c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	1c5a      	adds	r2, r3, #1
    9352:	607a      	str	r2, [r7, #4]
    9354:	781b      	ldrb	r3, [r3, #0]
    9356:	b25a      	sxtb	r2, r3
    9358:	68bb      	ldr	r3, [r7, #8]
    935a:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
    935c:	68bb      	ldr	r3, [r7, #8]
    935e:	2200      	movs	r2, #0
    9360:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
    9362:	68bb      	ldr	r3, [r7, #8]
    9364:	2200      	movs	r2, #0
    9366:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    9368:	68bb      	ldr	r3, [r7, #8]
    936a:	2200      	movs	r2, #0
    936c:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    936e:	68bb      	ldr	r3, [r7, #8]
    9370:	2206      	movs	r2, #6
    9372:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    9374:	68bb      	ldr	r3, [r7, #8]
    9376:	2200      	movs	r2, #0
    9378:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    937a:	4b09      	ldr	r3, [pc, #36]	; (93a0 <hciEvtProcessLeDirectAdvReport+0xd0>)
    937c:	689b      	ldr	r3, [r3, #8]
    937e:	68b8      	ldr	r0, [r7, #8]
    9380:	4798      	blx	r3
    while (i-- > 0)
    9382:	7bfb      	ldrb	r3, [r7, #15]
    9384:	1e5a      	subs	r2, r3, #1
    9386:	73fa      	strb	r2, [r7, #15]
    9388:	2b00      	cmp	r3, #0
    938a:	d1bc      	bne.n	9306 <hciEvtProcessLeDirectAdvReport+0x36>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    938c:	68b8      	ldr	r0, [r7, #8]
    938e:	f001 fd09 	bl	ada4 <WsfBufFree>
    9392:	e000      	b.n	9396 <hciEvtProcessLeDirectAdvReport+0xc6>
    return;
    9394:	bf00      	nop
  }
}
    9396:	3710      	adds	r7, #16
    9398:	46bd      	mov	sp, r7
    939a:	bd80      	pop	{r7, pc}
    939c:	00011728 	.word	0x00011728
    93a0:	100028f4 	.word	0x100028f4

000093a4 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
    93a4:	b480      	push	{r7}
    93a6:	b083      	sub	sp, #12
    93a8:	af00      	add	r7, sp, #0
    93aa:	4603      	mov	r3, r0
    93ac:	460a      	mov	r2, r1
    93ae:	71fb      	strb	r3, [r7, #7]
    93b0:	4613      	mov	r3, r2
    93b2:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
    93b4:	bf00      	nop
    93b6:	370c      	adds	r7, #12
    93b8:	46bd      	mov	sp, r7
    93ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    93be:	4770      	bx	lr

000093c0 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
    93c0:	b580      	push	{r7, lr}
    93c2:	b084      	sub	sp, #16
    93c4:	af00      	add	r7, sp, #0
    93c6:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
    93c8:	687b      	ldr	r3, [r7, #4]
    93ca:	1c5a      	adds	r2, r3, #1
    93cc:	607a      	str	r2, [r7, #4]
    93ce:	781b      	ldrb	r3, [r3, #0]
    93d0:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	1c5a      	adds	r2, r3, #1
    93d6:	607a      	str	r2, [r7, #4]
    93d8:	781b      	ldrb	r3, [r3, #0]
    93da:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	781b      	ldrb	r3, [r3, #0]
    93e0:	b29a      	uxth	r2, r3
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	3301      	adds	r3, #1
    93e6:	781b      	ldrb	r3, [r3, #0]
    93e8:	b29b      	uxth	r3, r3
    93ea:	021b      	lsls	r3, r3, #8
    93ec:	b29b      	uxth	r3, r3
    93ee:	4413      	add	r3, r2
    93f0:	81bb      	strh	r3, [r7, #12]
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	3302      	adds	r3, #2
    93f6:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
    93f8:	7bfb      	ldrb	r3, [r7, #15]
    93fa:	2b00      	cmp	r3, #0
    93fc:	d005      	beq.n	940a <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
    93fe:	89ba      	ldrh	r2, [r7, #12]
    9400:	7bfb      	ldrb	r3, [r7, #15]
    9402:	4611      	mov	r1, r2
    9404:	4618      	mov	r0, r3
    9406:	f7ff ffcd 	bl	93a4 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
    940a:	7bbb      	ldrb	r3, [r7, #14]
    940c:	4618      	mov	r0, r3
    940e:	f7fd f805 	bl	641c <hciCmdRecvCmpl>
}
    9412:	bf00      	nop
    9414:	3710      	adds	r7, #16
    9416:	46bd      	mov	sp, r7
    9418:	bd80      	pop	{r7, pc}
	...

0000941c <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
    941c:	b580      	push	{r7, lr}
    941e:	b086      	sub	sp, #24
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
    9424:	460b      	mov	r3, r1
    9426:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
    9428:	2300      	movs	r3, #0
    942a:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
    942c:	4ba2      	ldr	r3, [pc, #648]	; (96b8 <hciEvtProcessCmdCmpl+0x29c>)
    942e:	689b      	ldr	r3, [r3, #8]
    9430:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	1c5a      	adds	r2, r3, #1
    9436:	607a      	str	r2, [r7, #4]
    9438:	781b      	ldrb	r3, [r3, #0]
    943a:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
    943c:	687b      	ldr	r3, [r7, #4]
    943e:	781b      	ldrb	r3, [r3, #0]
    9440:	b29a      	uxth	r2, r3
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	3301      	adds	r3, #1
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	b29b      	uxth	r3, r3
    944a:	021b      	lsls	r3, r3, #8
    944c:	b29b      	uxth	r3, r3
    944e:	4413      	add	r3, r2
    9450:	81bb      	strh	r3, [r7, #12]
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	3302      	adds	r3, #2
    9456:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
    9458:	89bb      	ldrh	r3, [r7, #12]
    945a:	f242 0222 	movw	r2, #8226	; 0x2022
    945e:	4293      	cmp	r3, r2
    9460:	f000 80aa 	beq.w	95b8 <hciEvtProcessCmdCmpl+0x19c>
    9464:	f242 0222 	movw	r2, #8226	; 0x2022
    9468:	4293      	cmp	r3, r2
    946a:	dc49      	bgt.n	9500 <hciEvtProcessCmdCmpl+0xe4>
    946c:	f242 0215 	movw	r2, #8213	; 0x2015
    9470:	4293      	cmp	r3, r2
    9472:	f000 80b3 	beq.w	95dc <hciEvtProcessCmdCmpl+0x1c0>
    9476:	f242 0215 	movw	r2, #8213	; 0x2015
    947a:	4293      	cmp	r3, r2
    947c:	dc22      	bgt.n	94c4 <hciEvtProcessCmdCmpl+0xa8>
    947e:	f241 4205 	movw	r2, #5125	; 0x1405
    9482:	4293      	cmp	r3, r2
    9484:	f000 80ad 	beq.w	95e2 <hciEvtProcessCmdCmpl+0x1c6>
    9488:	f241 4205 	movw	r2, #5125	; 0x1405
    948c:	4293      	cmp	r3, r2
    948e:	dc0a      	bgt.n	94a6 <hciEvtProcessCmdCmpl+0x8a>
    9490:	f640 422d 	movw	r2, #3117	; 0xc2d
    9494:	4293      	cmp	r3, r2
    9496:	f000 80a7 	beq.w	95e8 <hciEvtProcessCmdCmpl+0x1cc>
    949a:	f640 427c 	movw	r2, #3196	; 0xc7c
    949e:	4293      	cmp	r3, r2
    94a0:	f000 80b7 	beq.w	9612 <hciEvtProcessCmdCmpl+0x1f6>
    94a4:	e0cd      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    94a6:	f242 020c 	movw	r2, #8204	; 0x200c
    94aa:	4293      	cmp	r3, r2
    94ac:	f000 80ba 	beq.w	9624 <hciEvtProcessCmdCmpl+0x208>
    94b0:	f242 020e 	movw	r2, #8206	; 0x200e
    94b4:	4293      	cmp	r3, r2
    94b6:	d06a      	beq.n	958e <hciEvtProcessCmdCmpl+0x172>
    94b8:	f242 020a 	movw	r2, #8202	; 0x200a
    94bc:	4293      	cmp	r3, r2
    94be:	f000 80b4 	beq.w	962a <hciEvtProcessCmdCmpl+0x20e>
    94c2:	e0be      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    94c4:	f242 021a 	movw	r2, #8218	; 0x201a
    94c8:	4293      	cmp	r3, r2
    94ca:	d07b      	beq.n	95c4 <hciEvtProcessCmdCmpl+0x1a8>
    94cc:	f242 021a 	movw	r2, #8218	; 0x201a
    94d0:	4293      	cmp	r3, r2
    94d2:	dc08      	bgt.n	94e6 <hciEvtProcessCmdCmpl+0xca>
    94d4:	f242 0217 	movw	r2, #8215	; 0x2017
    94d8:	4293      	cmp	r3, r2
    94da:	d05b      	beq.n	9594 <hciEvtProcessCmdCmpl+0x178>
    94dc:	f242 0218 	movw	r2, #8216	; 0x2018
    94e0:	4293      	cmp	r3, r2
    94e2:	d075      	beq.n	95d0 <hciEvtProcessCmdCmpl+0x1b4>
    94e4:	e0ad      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    94e6:	f242 0220 	movw	r2, #8224	; 0x2020
    94ea:	4293      	cmp	r3, r2
    94ec:	d058      	beq.n	95a0 <hciEvtProcessCmdCmpl+0x184>
    94ee:	f242 0220 	movw	r2, #8224	; 0x2020
    94f2:	4293      	cmp	r3, r2
    94f4:	dc57      	bgt.n	95a6 <hciEvtProcessCmdCmpl+0x18a>
    94f6:	f242 021b 	movw	r2, #8219	; 0x201b
    94fa:	4293      	cmp	r3, r2
    94fc:	d065      	beq.n	95ca <hciEvtProcessCmdCmpl+0x1ae>
    94fe:	e0a0      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    9500:	f242 022c 	movw	r2, #8236	; 0x202c
    9504:	4293      	cmp	r3, r2
    9506:	d07e      	beq.n	9606 <hciEvtProcessCmdCmpl+0x1ea>
    9508:	f242 022c 	movw	r2, #8236	; 0x202c
    950c:	4293      	cmp	r3, r2
    950e:	dc1d      	bgt.n	954c <hciEvtProcessCmdCmpl+0x130>
    9510:	f242 0227 	movw	r2, #8231	; 0x2027
    9514:	4293      	cmp	r3, r2
    9516:	d06a      	beq.n	95ee <hciEvtProcessCmdCmpl+0x1d2>
    9518:	f242 0227 	movw	r2, #8231	; 0x2027
    951c:	4293      	cmp	r3, r2
    951e:	dc08      	bgt.n	9532 <hciEvtProcessCmdCmpl+0x116>
    9520:	f242 0223 	movw	r2, #8227	; 0x2023
    9524:	4293      	cmp	r3, r2
    9526:	d041      	beq.n	95ac <hciEvtProcessCmdCmpl+0x190>
    9528:	f242 0224 	movw	r2, #8228	; 0x2024
    952c:	4293      	cmp	r3, r2
    952e:	d040      	beq.n	95b2 <hciEvtProcessCmdCmpl+0x196>
    9530:	e087      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    9532:	f242 0229 	movw	r2, #8233	; 0x2029
    9536:	4293      	cmp	r3, r2
    9538:	d05f      	beq.n	95fa <hciEvtProcessCmdCmpl+0x1de>
    953a:	f242 0229 	movw	r2, #8233	; 0x2029
    953e:	4293      	cmp	r3, r2
    9540:	db58      	blt.n	95f4 <hciEvtProcessCmdCmpl+0x1d8>
    9542:	f242 022b 	movw	r2, #8235	; 0x202b
    9546:	4293      	cmp	r3, r2
    9548:	d05a      	beq.n	9600 <hciEvtProcessCmdCmpl+0x1e4>
    954a:	e07a      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    954c:	f242 0231 	movw	r2, #8241	; 0x2031
    9550:	4293      	cmp	r3, r2
    9552:	d064      	beq.n	961e <hciEvtProcessCmdCmpl+0x202>
    9554:	f242 0231 	movw	r2, #8241	; 0x2031
    9558:	4293      	cmp	r3, r2
    955a:	dc0c      	bgt.n	9576 <hciEvtProcessCmdCmpl+0x15a>
    955c:	f242 022f 	movw	r2, #8239	; 0x202f
    9560:	4293      	cmp	r3, r2
    9562:	d02c      	beq.n	95be <hciEvtProcessCmdCmpl+0x1a2>
    9564:	f242 022f 	movw	r2, #8239	; 0x202f
    9568:	4293      	cmp	r3, r2
    956a:	dc55      	bgt.n	9618 <hciEvtProcessCmdCmpl+0x1fc>
    956c:	f242 022d 	movw	r2, #8237	; 0x202d
    9570:	4293      	cmp	r3, r2
    9572:	d04b      	beq.n	960c <hciEvtProcessCmdCmpl+0x1f0>
    9574:	e065      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
    9576:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
    957a:	d05f      	beq.n	963c <hciEvtProcessCmdCmpl+0x220>
    957c:	f242 0242 	movw	r2, #8258	; 0x2042
    9580:	4293      	cmp	r3, r2
    9582:	d055      	beq.n	9630 <hciEvtProcessCmdCmpl+0x214>
    9584:	f242 0239 	movw	r2, #8249	; 0x2039
    9588:	4293      	cmp	r3, r2
    958a:	d054      	beq.n	9636 <hciEvtProcessCmdCmpl+0x21a>
    958c:	e059      	b.n	9642 <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
    958e:	2305      	movs	r3, #5
    9590:	75fb      	strb	r3, [r7, #23]
    break;
    9592:	e064      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
    9594:	231b      	movs	r3, #27
    9596:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
    9598:	4b47      	ldr	r3, [pc, #284]	; (96b8 <hciEvtProcessCmdCmpl+0x29c>)
    959a:	68db      	ldr	r3, [r3, #12]
    959c:	613b      	str	r3, [r7, #16]
    break;
    959e:	e05e      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
    95a0:	231d      	movs	r3, #29
    95a2:	75fb      	strb	r3, [r7, #23]
    break;
    95a4:	e05b      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
    95a6:	231e      	movs	r3, #30
    95a8:	75fb      	strb	r3, [r7, #23]
    break;
    95aa:	e058      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    95ac:	231f      	movs	r3, #31
    95ae:	75fb      	strb	r3, [r7, #23]
    break;
    95b0:	e055      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    95b2:	2320      	movs	r3, #32
    95b4:	75fb      	strb	r3, [r7, #23]
    break;
    95b6:	e052      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
    95b8:	2321      	movs	r3, #33	; 0x21
    95ba:	75fb      	strb	r3, [r7, #23]
    break;
    95bc:	e04f      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
    95be:	2322      	movs	r3, #34	; 0x22
    95c0:	75fb      	strb	r3, [r7, #23]
    break;
    95c2:	e04c      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
    95c4:	230c      	movs	r3, #12
    95c6:	75fb      	strb	r3, [r7, #23]
    break;
    95c8:	e049      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
    95ca:	230d      	movs	r3, #13
    95cc:	75fb      	strb	r3, [r7, #23]
    break;
    95ce:	e046      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
    95d0:	231c      	movs	r3, #28
    95d2:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
    95d4:	4b38      	ldr	r3, [pc, #224]	; (96b8 <hciEvtProcessCmdCmpl+0x29c>)
    95d6:	68db      	ldr	r3, [r3, #12]
    95d8:	613b      	str	r3, [r7, #16]
    break;
    95da:	e040      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    95dc:	2308      	movs	r3, #8
    95de:	75fb      	strb	r3, [r7, #23]
    break;
    95e0:	e03d      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
    95e2:	2307      	movs	r3, #7
    95e4:	75fb      	strb	r3, [r7, #23]
    break;
    95e6:	e03a      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
    95e8:	2309      	movs	r3, #9
    95ea:	75fb      	strb	r3, [r7, #23]
    break;
    95ec:	e037      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
    95ee:	2315      	movs	r3, #21
    95f0:	75fb      	strb	r3, [r7, #23]
    break;
    95f2:	e034      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
    95f4:	2316      	movs	r3, #22
    95f6:	75fb      	strb	r3, [r7, #23]
    break;
    95f8:	e031      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
    95fa:	2317      	movs	r3, #23
    95fc:	75fb      	strb	r3, [r7, #23]
    break;
    95fe:	e02e      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
    9600:	2318      	movs	r3, #24
    9602:	75fb      	strb	r3, [r7, #23]
    break;
    9604:	e02b      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
    9606:	2319      	movs	r3, #25
    9608:	75fb      	strb	r3, [r7, #23]
    break;
    960a:	e028      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
    960c:	231a      	movs	r3, #26
    960e:	75fb      	strb	r3, [r7, #23]
    break;
    9610:	e025      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
    9612:	2327      	movs	r3, #39	; 0x27
    9614:	75fb      	strb	r3, [r7, #23]
    break;
    9616:	e022      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
    9618:	2329      	movs	r3, #41	; 0x29
    961a:	75fb      	strb	r3, [r7, #23]
    break;
    961c:	e01f      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
    961e:	232a      	movs	r3, #42	; 0x2a
    9620:	75fb      	strb	r3, [r7, #23]
    break;
    9622:	e01c      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
    9624:	2334      	movs	r3, #52	; 0x34
    9626:	75fb      	strb	r3, [r7, #23]
    break;
    9628:	e019      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
    962a:	2335      	movs	r3, #53	; 0x35
    962c:	75fb      	strb	r3, [r7, #23]
    break;
    962e:	e016      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
    9630:	2336      	movs	r3, #54	; 0x36
    9632:	75fb      	strb	r3, [r7, #23]
    break;
    9634:	e013      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
    9636:	2337      	movs	r3, #55	; 0x37
    9638:	75fb      	strb	r3, [r7, #23]
    break;
    963a:	e010      	b.n	965e <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
    963c:	2338      	movs	r3, #56	; 0x38
    963e:	75fb      	strb	r3, [r7, #23]
    break;
    9640:	e00d      	b.n	965e <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
    9642:	89bb      	ldrh	r3, [r7, #12]
    9644:	0a9b      	lsrs	r3, r3, #10
    9646:	b29b      	uxth	r3, r3
    9648:	2b3f      	cmp	r3, #63	; 0x3f
    964a:	d107      	bne.n	965c <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
    964c:	78fa      	ldrb	r2, [r7, #3]
    964e:	89bb      	ldrh	r3, [r7, #12]
    9650:	6879      	ldr	r1, [r7, #4]
    9652:	4618      	mov	r0, r3
    9654:	f000 fcd0 	bl	9ff8 <hciCoreVsCmdCmplRcvd>
    9658:	4603      	mov	r3, r0
    965a:	75fb      	strb	r3, [r7, #23]
    }
    break;
    965c:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
    965e:	7dfb      	ldrb	r3, [r7, #23]
    9660:	2b00      	cmp	r3, #0
    9662:	d021      	beq.n	96a8 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    9664:	7dfb      	ldrb	r3, [r7, #23]
    9666:	4a15      	ldr	r2, [pc, #84]	; (96bc <hciEvtProcessCmdCmpl+0x2a0>)
    9668:	5cd3      	ldrb	r3, [r2, r3]
    966a:	b29b      	uxth	r3, r3
    966c:	4618      	mov	r0, r3
    966e:	f001 fb59 	bl	ad24 <WsfBufAlloc>
    9672:	60b8      	str	r0, [r7, #8]
    9674:	68bb      	ldr	r3, [r7, #8]
    9676:	2b00      	cmp	r3, #0
    9678:	d016      	beq.n	96a8 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
    967a:	68bb      	ldr	r3, [r7, #8]
    967c:	2200      	movs	r2, #0
    967e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
    9680:	68bb      	ldr	r3, [r7, #8]
    9682:	7dfa      	ldrb	r2, [r7, #23]
    9684:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    9686:	68bb      	ldr	r3, [r7, #8]
    9688:	2200      	movs	r2, #0
    968a:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
    968c:	7dfb      	ldrb	r3, [r7, #23]
    968e:	4a0c      	ldr	r2, [pc, #48]	; (96c0 <hciEvtProcessCmdCmpl+0x2a4>)
    9690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9694:	78fa      	ldrb	r2, [r7, #3]
    9696:	6879      	ldr	r1, [r7, #4]
    9698:	68b8      	ldr	r0, [r7, #8]
    969a:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
    969c:	693b      	ldr	r3, [r7, #16]
    969e:	68b8      	ldr	r0, [r7, #8]
    96a0:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
    96a2:	68b8      	ldr	r0, [r7, #8]
    96a4:	f001 fb7e 	bl	ada4 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
    96a8:	7bfb      	ldrb	r3, [r7, #15]
    96aa:	4618      	mov	r0, r3
    96ac:	f7fc feb6 	bl	641c <hciCmdRecvCmpl>
}
    96b0:	bf00      	nop
    96b2:	3718      	adds	r7, #24
    96b4:	46bd      	mov	sp, r7
    96b6:	bd80      	pop	{r7, pc}
    96b8:	100028f4 	.word	0x100028f4
    96bc:	00012dd8 	.word	0x00012dd8
    96c0:	00012cf4 	.word	0x00012cf4

000096c4 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b088      	sub	sp, #32
    96c8:	af00      	add	r7, sp, #0
    96ca:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
    96cc:	2300      	movs	r3, #0
    96ce:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
    96d0:	4ba1      	ldr	r3, [pc, #644]	; (9958 <hciEvtProcessMsg+0x294>)
    96d2:	689b      	ldr	r3, [r3, #8]
    96d4:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	1c5a      	adds	r2, r3, #1
    96da:	607a      	str	r2, [r7, #4]
    96dc:	781b      	ldrb	r3, [r3, #0]
    96de:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	1c5a      	adds	r2, r3, #1
    96e4:	607a      	str	r2, [r7, #4]
    96e6:	781b      	ldrb	r3, [r3, #0]
    96e8:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
    96ea:	7dfb      	ldrb	r3, [r7, #23]
    96ec:	2b10      	cmp	r3, #16
    96ee:	f000 8121 	beq.w	9934 <hciEvtProcessMsg+0x270>
    96f2:	2b10      	cmp	r3, #16
    96f4:	dc10      	bgt.n	9718 <hciEvtProcessMsg+0x54>
    96f6:	2b0c      	cmp	r3, #12
    96f8:	f000 8103 	beq.w	9902 <hciEvtProcessMsg+0x23e>
    96fc:	2b0c      	cmp	r3, #12
    96fe:	dc06      	bgt.n	970e <hciEvtProcessMsg+0x4a>
    9700:	2b05      	cmp	r3, #5
    9702:	f000 80ec 	beq.w	98de <hciEvtProcessMsg+0x21a>
    9706:	2b08      	cmp	r3, #8
    9708:	f000 80f2 	beq.w	98f0 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
    970c:	e131      	b.n	9972 <hciEvtProcessMsg+0x2ae>
  switch (evt)
    970e:	2b0e      	cmp	r3, #14
    9710:	d020      	beq.n	9754 <hciEvtProcessMsg+0x90>
    9712:	2b0f      	cmp	r3, #15
    9714:	d014      	beq.n	9740 <hciEvtProcessMsg+0x7c>
      break;
    9716:	e12c      	b.n	9972 <hciEvtProcessMsg+0x2ae>
  switch (evt)
    9718:	2b30      	cmp	r3, #48	; 0x30
    971a:	f000 80fb 	beq.w	9914 <hciEvtProcessMsg+0x250>
    971e:	2b30      	cmp	r3, #48	; 0x30
    9720:	dc05      	bgt.n	972e <hciEvtProcessMsg+0x6a>
    9722:	2b13      	cmp	r3, #19
    9724:	d022      	beq.n	976c <hciEvtProcessMsg+0xa8>
    9726:	2b1a      	cmp	r3, #26
    9728:	f000 80fd 	beq.w	9926 <hciEvtProcessMsg+0x262>
      break;
    972c:	e121      	b.n	9972 <hciEvtProcessMsg+0x2ae>
  switch (evt)
    972e:	2b57      	cmp	r3, #87	; 0x57
    9730:	f000 8109 	beq.w	9946 <hciEvtProcessMsg+0x282>
    9734:	2bff      	cmp	r3, #255	; 0xff
    9736:	f000 8113 	beq.w	9960 <hciEvtProcessMsg+0x29c>
    973a:	2b3e      	cmp	r3, #62	; 0x3e
    973c:	d020      	beq.n	9780 <hciEvtProcessMsg+0xbc>
      break;
    973e:	e118      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
    9740:	4b86      	ldr	r3, [pc, #536]	; (995c <hciEvtProcessMsg+0x298>)
    9742:	891b      	ldrh	r3, [r3, #8]
    9744:	3301      	adds	r3, #1
    9746:	b29a      	uxth	r2, r3
    9748:	4b84      	ldr	r3, [pc, #528]	; (995c <hciEvtProcessMsg+0x298>)
    974a:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
    974c:	6878      	ldr	r0, [r7, #4]
    974e:	f7ff fe37 	bl	93c0 <hciEvtProcessCmdStatus>
      break;
    9752:	e10e      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
    9754:	4b81      	ldr	r3, [pc, #516]	; (995c <hciEvtProcessMsg+0x298>)
    9756:	88db      	ldrh	r3, [r3, #6]
    9758:	3301      	adds	r3, #1
    975a:	b29a      	uxth	r2, r3
    975c:	4b7f      	ldr	r3, [pc, #508]	; (995c <hciEvtProcessMsg+0x298>)
    975e:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
    9760:	7dbb      	ldrb	r3, [r7, #22]
    9762:	4619      	mov	r1, r3
    9764:	6878      	ldr	r0, [r7, #4]
    9766:	f7ff fe59 	bl	941c <hciEvtProcessCmdCmpl>
      break;
    976a:	e102      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
    976c:	6878      	ldr	r0, [r7, #4]
    976e:	f7fe f9ef 	bl	7b50 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
    9772:	4b7a      	ldr	r3, [pc, #488]	; (995c <hciEvtProcessMsg+0x298>)
    9774:	899b      	ldrh	r3, [r3, #12]
    9776:	3301      	adds	r3, #1
    9778:	b29a      	uxth	r2, r3
    977a:	4b78      	ldr	r3, [pc, #480]	; (995c <hciEvtProcessMsg+0x298>)
    977c:	819a      	strh	r2, [r3, #12]
      break;
    977e:	e0f8      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	1c5a      	adds	r2, r3, #1
    9784:	607a      	str	r2, [r7, #4]
    9786:	781b      	ldrb	r3, [r3, #0]
    9788:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
    978a:	4b74      	ldr	r3, [pc, #464]	; (995c <hciEvtProcessMsg+0x298>)
    978c:	8a5b      	ldrh	r3, [r3, #18]
    978e:	3301      	adds	r3, #1
    9790:	b29a      	uxth	r2, r3
    9792:	4b72      	ldr	r3, [pc, #456]	; (995c <hciEvtProcessMsg+0x298>)
    9794:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
    9796:	7d7b      	ldrb	r3, [r7, #21]
    9798:	3b01      	subs	r3, #1
    979a:	2b12      	cmp	r3, #18
    979c:	f200 809d 	bhi.w	98da <hciEvtProcessMsg+0x216>
    97a0:	a201      	add	r2, pc, #4	; (adr r2, 97a8 <hciEvtProcessMsg+0xe4>)
    97a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    97a6:	bf00      	nop
    97a8:	000097f5 	.word	0x000097f5
    97ac:	00009823 	.word	0x00009823
    97b0:	0000982f 	.word	0x0000982f
    97b4:	00009835 	.word	0x00009835
    97b8:	0000983b 	.word	0x0000983b
    97bc:	0000987b 	.word	0x0000987b
    97c0:	00009881 	.word	0x00009881
    97c4:	00009887 	.word	0x00009887
    97c8:	00009893 	.word	0x00009893
    97cc:	00009841 	.word	0x00009841
    97d0:	0000986f 	.word	0x0000986f
    97d4:	0000989f 	.word	0x0000989f
    97d8:	000098a5 	.word	0x000098a5
    97dc:	000098c3 	.word	0x000098c3
    97e0:	000098c9 	.word	0x000098c9
    97e4:	000098d5 	.word	0x000098d5
    97e8:	000098b1 	.word	0x000098b1
    97ec:	000098b7 	.word	0x000098b7
    97f0:	000098bd 	.word	0x000098bd
          if (*pEvt == HCI_SUCCESS)
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d10f      	bne.n	981c <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	3301      	adds	r3, #1
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	b29a      	uxth	r2, r3
    9804:	687b      	ldr	r3, [r7, #4]
    9806:	3302      	adds	r3, #2
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	b29b      	uxth	r3, r3
    980c:	021b      	lsls	r3, r3, #8
    980e:	b29b      	uxth	r3, r3
    9810:	4413      	add	r3, r2
    9812:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
    9814:	8a7b      	ldrh	r3, [r7, #18]
    9816:	4618      	mov	r0, r3
    9818:	f7fd fe10 	bl	743c <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
    981c:	2301      	movs	r3, #1
    981e:	77fb      	strb	r3, [r7, #31]
          break;
    9820:	e05c      	b.n	98dc <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
    9822:	7dbb      	ldrb	r3, [r7, #22]
    9824:	4619      	mov	r1, r3
    9826:	6878      	ldr	r0, [r7, #4]
    9828:	f7ff fa76 	bl	8d18 <hciEvtProcessLeAdvReport>
          break;
    982c:	e056      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
    982e:	2304      	movs	r3, #4
    9830:	77fb      	strb	r3, [r7, #31]
          break;
    9832:	e053      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
    9834:	230b      	movs	r3, #11
    9836:	77fb      	strb	r3, [r7, #31]
          break;
    9838:	e050      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
    983a:	2310      	movs	r3, #16
    983c:	77fb      	strb	r3, [r7, #31]
          break;
    983e:	e04d      	b.n	98dc <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	781b      	ldrb	r3, [r3, #0]
    9844:	2b00      	cmp	r3, #0
    9846:	d10f      	bne.n	9868 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	3301      	adds	r3, #1
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	b29a      	uxth	r2, r3
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	3302      	adds	r3, #2
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	b29b      	uxth	r3, r3
    9858:	021b      	lsls	r3, r3, #8
    985a:	b29b      	uxth	r3, r3
    985c:	4413      	add	r3, r2
    985e:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
    9860:	8a7b      	ldrh	r3, [r7, #18]
    9862:	4618      	mov	r0, r3
    9864:	f7fd fdea 	bl	743c <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
    9868:	2302      	movs	r3, #2
    986a:	77fb      	strb	r3, [r7, #31]
          break;
    986c:	e036      	b.n	98dc <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
    986e:	7dbb      	ldrb	r3, [r7, #22]
    9870:	4619      	mov	r1, r3
    9872:	6878      	ldr	r0, [r7, #4]
    9874:	f7ff fd2c 	bl	92d0 <hciEvtProcessLeDirectAdvReport>
          break;
    9878:	e030      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
    987a:	2323      	movs	r3, #35	; 0x23
    987c:	77fb      	strb	r3, [r7, #31]
          break;
    987e:	e02d      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
    9880:	2324      	movs	r3, #36	; 0x24
    9882:	77fb      	strb	r3, [r7, #31]
          break;
    9884:	e02a      	b.n	98dc <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
    9886:	4b34      	ldr	r3, [pc, #208]	; (9958 <hciEvtProcessMsg+0x294>)
    9888:	68db      	ldr	r3, [r3, #12]
    988a:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
    988c:	2325      	movs	r3, #37	; 0x25
    988e:	77fb      	strb	r3, [r7, #31]
          break;
    9890:	e024      	b.n	98dc <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
    9892:	4b31      	ldr	r3, [pc, #196]	; (9958 <hciEvtProcessMsg+0x294>)
    9894:	68db      	ldr	r3, [r3, #12]
    9896:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
    9898:	2326      	movs	r3, #38	; 0x26
    989a:	77fb      	strb	r3, [r7, #31]
          break;
    989c:	e01e      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
    989e:	232b      	movs	r3, #43	; 0x2b
    98a0:	77fb      	strb	r3, [r7, #31]
          break;
    98a2:	e01b      	b.n	98dc <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
    98a4:	7dbb      	ldrb	r3, [r7, #22]
    98a6:	4619      	mov	r1, r3
    98a8:	6878      	ldr	r0, [r7, #4]
    98aa:	f7ff fabf 	bl	8e2c <hciEvtProcessLeExtAdvReport>
          break;
    98ae:	e015      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
    98b0:	232d      	movs	r3, #45	; 0x2d
    98b2:	77fb      	strb	r3, [r7, #31]
          break;
    98b4:	e012      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
    98b6:	232e      	movs	r3, #46	; 0x2e
    98b8:	77fb      	strb	r3, [r7, #31]
          break;
    98ba:	e00f      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
    98bc:	232f      	movs	r3, #47	; 0x2f
    98be:	77fb      	strb	r3, [r7, #31]
          break;
    98c0:	e00c      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
    98c2:	2330      	movs	r3, #48	; 0x30
    98c4:	77fb      	strb	r3, [r7, #31]
          break;
    98c6:	e009      	b.n	98dc <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
    98c8:	7dbb      	ldrb	r3, [r7, #22]
    98ca:	4619      	mov	r1, r3
    98cc:	6878      	ldr	r0, [r7, #4]
    98ce:	f7ff fc51 	bl	9174 <hciEvtProcessLePerAdvReport>
          break;
    98d2:	e003      	b.n	98dc <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
    98d4:	2332      	movs	r3, #50	; 0x32
    98d6:	77fb      	strb	r3, [r7, #31]
          break;
    98d8:	e000      	b.n	98dc <hciEvtProcessMsg+0x218>
          break;
    98da:	bf00      	nop
      break;
    98dc:	e049      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
    98de:	4b1f      	ldr	r3, [pc, #124]	; (995c <hciEvtProcessMsg+0x298>)
    98e0:	881b      	ldrh	r3, [r3, #0]
    98e2:	3301      	adds	r3, #1
    98e4:	b29a      	uxth	r2, r3
    98e6:	4b1d      	ldr	r3, [pc, #116]	; (995c <hciEvtProcessMsg+0x298>)
    98e8:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
    98ea:	2303      	movs	r3, #3
    98ec:	77fb      	strb	r3, [r7, #31]
      break;
    98ee:	e040      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
    98f0:	4b1a      	ldr	r3, [pc, #104]	; (995c <hciEvtProcessMsg+0x298>)
    98f2:	885b      	ldrh	r3, [r3, #2]
    98f4:	3301      	adds	r3, #1
    98f6:	b29a      	uxth	r2, r3
    98f8:	4b18      	ldr	r3, [pc, #96]	; (995c <hciEvtProcessMsg+0x298>)
    98fa:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
    98fc:	230f      	movs	r3, #15
    98fe:	77fb      	strb	r3, [r7, #31]
      break;
    9900:	e037      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
    9902:	4b16      	ldr	r3, [pc, #88]	; (995c <hciEvtProcessMsg+0x298>)
    9904:	889b      	ldrh	r3, [r3, #4]
    9906:	3301      	adds	r3, #1
    9908:	b29a      	uxth	r2, r3
    990a:	4b14      	ldr	r3, [pc, #80]	; (995c <hciEvtProcessMsg+0x298>)
    990c:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
    990e:	230a      	movs	r3, #10
    9910:	77fb      	strb	r3, [r7, #31]
      break;
    9912:	e02e      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
    9914:	4b11      	ldr	r3, [pc, #68]	; (995c <hciEvtProcessMsg+0x298>)
    9916:	8a1b      	ldrh	r3, [r3, #16]
    9918:	3301      	adds	r3, #1
    991a:	b29a      	uxth	r2, r3
    991c:	4b0f      	ldr	r3, [pc, #60]	; (995c <hciEvtProcessMsg+0x298>)
    991e:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
    9920:	230e      	movs	r3, #14
    9922:	77fb      	strb	r3, [r7, #31]
      break;
    9924:	e025      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
    9926:	4b0d      	ldr	r3, [pc, #52]	; (995c <hciEvtProcessMsg+0x298>)
    9928:	89db      	ldrh	r3, [r3, #14]
    992a:	3301      	adds	r3, #1
    992c:	b29a      	uxth	r2, r3
    992e:	4b0b      	ldr	r3, [pc, #44]	; (995c <hciEvtProcessMsg+0x298>)
    9930:	81da      	strh	r2, [r3, #14]
      break;
    9932:	e01e      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
    9934:	4b09      	ldr	r3, [pc, #36]	; (995c <hciEvtProcessMsg+0x298>)
    9936:	895b      	ldrh	r3, [r3, #10]
    9938:	3301      	adds	r3, #1
    993a:	b29a      	uxth	r2, r3
    993c:	4b07      	ldr	r3, [pc, #28]	; (995c <hciEvtProcessMsg+0x298>)
    993e:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
    9940:	2314      	movs	r3, #20
    9942:	77fb      	strb	r3, [r7, #31]
      break;
    9944:	e015      	b.n	9972 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
    9946:	4b05      	ldr	r3, [pc, #20]	; (995c <hciEvtProcessMsg+0x298>)
    9948:	8adb      	ldrh	r3, [r3, #22]
    994a:	3301      	adds	r3, #1
    994c:	b29a      	uxth	r2, r3
    994e:	4b03      	ldr	r3, [pc, #12]	; (995c <hciEvtProcessMsg+0x298>)
    9950:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
    9952:	2328      	movs	r3, #40	; 0x28
    9954:	77fb      	strb	r3, [r7, #31]
      break;
    9956:	e00c      	b.n	9972 <hciEvtProcessMsg+0x2ae>
    9958:	100028f4 	.word	0x100028f4
    995c:	10001a84 	.word	0x10001a84
      hciEvtStats.numVendorSpecEvt++;
    9960:	4b22      	ldr	r3, [pc, #136]	; (99ec <hciEvtProcessMsg+0x328>)
    9962:	8a9b      	ldrh	r3, [r3, #20]
    9964:	3301      	adds	r3, #1
    9966:	b29a      	uxth	r2, r3
    9968:	4b20      	ldr	r3, [pc, #128]	; (99ec <hciEvtProcessMsg+0x328>)
    996a:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
    996c:	2313      	movs	r3, #19
    996e:	77fb      	strb	r3, [r7, #31]
      break;
    9970:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
    9972:	7ffb      	ldrb	r3, [r7, #31]
    9974:	2b00      	cmp	r3, #0
    9976:	d034      	beq.n	99e2 <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    9978:	7ffb      	ldrb	r3, [r7, #31]
    997a:	4a1d      	ldr	r2, [pc, #116]	; (99f0 <hciEvtProcessMsg+0x32c>)
    997c:	5cd3      	ldrb	r3, [r2, r3]
    997e:	b29b      	uxth	r3, r3
    9980:	4618      	mov	r0, r3
    9982:	f001 f9cf 	bl	ad24 <WsfBufAlloc>
    9986:	60f8      	str	r0, [r7, #12]
    9988:	68fb      	ldr	r3, [r7, #12]
    998a:	2b00      	cmp	r3, #0
    998c:	d016      	beq.n	99bc <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
    998e:	68fb      	ldr	r3, [r7, #12]
    9990:	2200      	movs	r2, #0
    9992:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
    9994:	68fb      	ldr	r3, [r7, #12]
    9996:	7ffa      	ldrb	r2, [r7, #31]
    9998:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    999a:	68fb      	ldr	r3, [r7, #12]
    999c:	2200      	movs	r2, #0
    999e:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    99a0:	7ffb      	ldrb	r3, [r7, #31]
    99a2:	4a14      	ldr	r2, [pc, #80]	; (99f4 <hciEvtProcessMsg+0x330>)
    99a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a8:	7dba      	ldrb	r2, [r7, #22]
    99aa:	6879      	ldr	r1, [r7, #4]
    99ac:	68f8      	ldr	r0, [r7, #12]
    99ae:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
    99b0:	69bb      	ldr	r3, [r7, #24]
    99b2:	68f8      	ldr	r0, [r7, #12]
    99b4:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
    99b6:	68f8      	ldr	r0, [r7, #12]
    99b8:	f001 f9f4 	bl	ada4 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
    99bc:	7ffb      	ldrb	r3, [r7, #31]
    99be:	2b03      	cmp	r3, #3
    99c0:	d10f      	bne.n	99e2 <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	3301      	adds	r3, #1
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	b29a      	uxth	r2, r3
    99ca:	687b      	ldr	r3, [r7, #4]
    99cc:	3302      	adds	r3, #2
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	b29b      	uxth	r3, r3
    99d2:	021b      	lsls	r3, r3, #8
    99d4:	b29b      	uxth	r3, r3
    99d6:	4413      	add	r3, r2
    99d8:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
    99da:	8a7b      	ldrh	r3, [r7, #18]
    99dc:	4618      	mov	r0, r3
    99de:	f7fd fd3a 	bl	7456 <hciCoreConnClose>
    }
  }
}
    99e2:	bf00      	nop
    99e4:	3720      	adds	r7, #32
    99e6:	46bd      	mov	sp, r7
    99e8:	bd80      	pop	{r7, pc}
    99ea:	bf00      	nop
    99ec:	10001a84 	.word	0x10001a84
    99f0:	00012dd8 	.word	0x00012dd8
    99f4:	00012cf4 	.word	0x00012cf4

000099f8 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
    99f8:	b580      	push	{r7, lr}
    99fa:	b084      	sub	sp, #16
    99fc:	af00      	add	r7, sp, #0
    99fe:	6078      	str	r0, [r7, #4]
    9a00:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
    9a02:	683b      	ldr	r3, [r7, #0]
    9a04:	3302      	adds	r3, #2
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	b29a      	uxth	r2, r3
    9a0a:	683b      	ldr	r3, [r7, #0]
    9a0c:	3303      	adds	r3, #3
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	b29b      	uxth	r3, r3
    9a12:	021b      	lsls	r3, r3, #8
    9a14:	b29b      	uxth	r3, r3
    9a16:	4413      	add	r3, r2
    9a18:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
    9a1a:	89fb      	ldrh	r3, [r7, #14]
    9a1c:	3304      	adds	r3, #4
    9a1e:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);
    9a20:	89fb      	ldrh	r3, [r7, #14]
    9a22:	683a      	ldr	r2, [r7, #0]
    9a24:	4619      	mov	r1, r3
    9a26:	2002      	movs	r0, #2
    9a28:	f000 fc5e 	bl	a2e8 <WsfPacketTrace>

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
    9a2c:	89fb      	ldrh	r3, [r7, #14]
    9a2e:	683a      	ldr	r2, [r7, #0]
    9a30:	4619      	mov	r1, r3
    9a32:	2002      	movs	r0, #2
    9a34:	f002 fe9c 	bl	c770 <hciDrvWrite>
    9a38:	4603      	mov	r3, r0
    9a3a:	461a      	mov	r2, r3
    9a3c:	89fb      	ldrh	r3, [r7, #14]
    9a3e:	4293      	cmp	r3, r2
    9a40:	d103      	bne.n	9a4a <hciTrSendAclData+0x52>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
    9a42:	6839      	ldr	r1, [r7, #0]
    9a44:	6878      	ldr	r0, [r7, #4]
    9a46:	f7fd fe5f 	bl	7708 <hciCoreTxAclComplete>
  }
}
    9a4a:	bf00      	nop
    9a4c:	3710      	adds	r7, #16
    9a4e:	46bd      	mov	sp, r7
    9a50:	bd80      	pop	{r7, pc}

00009a52 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
    9a52:	b580      	push	{r7, lr}
    9a54:	b084      	sub	sp, #16
    9a56:	af00      	add	r7, sp, #0
    9a58:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	3302      	adds	r3, #2
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	3303      	adds	r3, #3
    9a62:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);
    9a64:	7bfb      	ldrb	r3, [r7, #15]
    9a66:	687a      	ldr	r2, [r7, #4]
    9a68:	4619      	mov	r1, r3
    9a6a:	2001      	movs	r0, #1
    9a6c:	f000 fc3c 	bl	a2e8 <WsfPacketTrace>

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
    9a70:	7bfb      	ldrb	r3, [r7, #15]
    9a72:	b29b      	uxth	r3, r3
    9a74:	687a      	ldr	r2, [r7, #4]
    9a76:	4619      	mov	r1, r3
    9a78:	2001      	movs	r0, #1
    9a7a:	f002 fe79 	bl	c770 <hciDrvWrite>
    9a7e:	4603      	mov	r3, r0
    9a80:	461a      	mov	r2, r3
    9a82:	7bfb      	ldrb	r3, [r7, #15]
    9a84:	b29b      	uxth	r3, r3
    9a86:	429a      	cmp	r2, r3
    9a88:	d102      	bne.n	9a90 <hciTrSendCmd+0x3e>
  {
    /* free buffer */
    WsfMsgFree(pData);
    9a8a:	6878      	ldr	r0, [r7, #4]
    9a8c:	f001 f9f0 	bl	ae70 <WsfMsgFree>
  }
}
    9a90:	bf00      	nop
    9a92:	3710      	adds	r7, #16
    9a94:	46bd      	mov	sp, r7
    9a96:	bd80      	pop	{r7, pc}

00009a98 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint8_t hciTrSerialRxIncoming(uint8_t *pBuf, uint8_t len)
{
    9a98:	b580      	push	{r7, lr}
    9a9a:	b084      	sub	sp, #16
    9a9c:	af00      	add	r7, sp, #0
    9a9e:	6078      	str	r0, [r7, #4]
    9aa0:	460b      	mov	r3, r1
    9aa2:	70fb      	strb	r3, [r7, #3]
  static uint8_t    *pPktRx;
  static uint8_t    *pDataRx;

  uint8_t dataByte, consumed_bytes;

  consumed_bytes = 0;
    9aa4:	2300      	movs	r3, #0
    9aa6:	73fb      	strb	r3, [r7, #15]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
    9aa8:	e0e9      	b.n	9c7e <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
    9aaa:	687b      	ldr	r3, [r7, #4]
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	72bb      	strb	r3, [r7, #10]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
    9ab0:	4b77      	ldr	r3, [pc, #476]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9ab2:	781b      	ldrb	r3, [r3, #0]
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	d115      	bne.n	9ae4 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
    9ab8:	4a76      	ldr	r2, [pc, #472]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9aba:	7abb      	ldrb	r3, [r7, #10]
    9abc:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
    9abe:	4b76      	ldr	r3, [pc, #472]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9ac0:	2200      	movs	r2, #0
    9ac2:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
    9ac4:	4b72      	ldr	r3, [pc, #456]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9ac6:	2201      	movs	r2, #1
    9ac8:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
    9aca:	4b74      	ldr	r3, [pc, #464]	; (9c9c <hciTrSerialRxIncoming+0x204>)
    9acc:	2201      	movs	r2, #1
    9ace:	701a      	strb	r2, [r3, #0]
      pBuf++;
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	3301      	adds	r3, #1
    9ad4:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
    9ad6:	7bfb      	ldrb	r3, [r7, #15]
    9ad8:	3301      	adds	r3, #1
    9ada:	73fb      	strb	r3, [r7, #15]
      len--;
    9adc:	78fb      	ldrb	r3, [r7, #3]
    9ade:	3b01      	subs	r3, #1
    9ae0:	70fb      	strb	r3, [r7, #3]
    9ae2:	e0b6      	b.n	9c52 <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
    9ae4:	4b6a      	ldr	r3, [pc, #424]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	2b01      	cmp	r3, #1
    9aea:	f040 8091 	bne.w	9c10 <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
    9aee:	2300      	movs	r3, #0
    9af0:	73bb      	strb	r3, [r7, #14]
      uint16_t dataLen = 0;
    9af2:	2300      	movs	r3, #0
    9af4:	81bb      	strh	r3, [r7, #12]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
    9af6:	4b67      	ldr	r3, [pc, #412]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	2b04      	cmp	r3, #4
    9afc:	d102      	bne.n	9b04 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
    9afe:	2302      	movs	r3, #2
    9b00:	73bb      	strb	r3, [r7, #14]
    9b02:	e008      	b.n	9b16 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
    9b04:	4b63      	ldr	r3, [pc, #396]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9b06:	781b      	ldrb	r3, [r3, #0]
    9b08:	2b02      	cmp	r3, #2
    9b0a:	d102      	bne.n	9b12 <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
    9b0c:	2304      	movs	r3, #4
    9b0e:	73bb      	strb	r3, [r7, #14]
    9b10:	e001      	b.n	9b16 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
    9b12:	7bfb      	ldrb	r3, [r7, #15]
    9b14:	e0b8      	b.n	9c88 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
    9b16:	7bbb      	ldrb	r3, [r7, #14]
    9b18:	b29a      	uxth	r2, r3
    9b1a:	4b5f      	ldr	r3, [pc, #380]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9b1c:	881b      	ldrh	r3, [r3, #0]
    9b1e:	429a      	cmp	r2, r3
    9b20:	d012      	beq.n	9b48 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
    9b22:	4b5d      	ldr	r3, [pc, #372]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9b24:	881b      	ldrh	r3, [r3, #0]
    9b26:	1c5a      	adds	r2, r3, #1
    9b28:	b291      	uxth	r1, r2
    9b2a:	4a5b      	ldr	r2, [pc, #364]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9b2c:	8011      	strh	r1, [r2, #0]
    9b2e:	4619      	mov	r1, r3
    9b30:	4a5b      	ldr	r2, [pc, #364]	; (9ca0 <hciTrSerialRxIncoming+0x208>)
    9b32:	7abb      	ldrb	r3, [r7, #10]
    9b34:	5453      	strb	r3, [r2, r1]
        pBuf++;
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	3301      	adds	r3, #1
    9b3a:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
    9b3c:	7bfb      	ldrb	r3, [r7, #15]
    9b3e:	3301      	adds	r3, #1
    9b40:	73fb      	strb	r3, [r7, #15]
        len--;
    9b42:	78fb      	ldrb	r3, [r7, #3]
    9b44:	3b01      	subs	r3, #1
    9b46:	70fb      	strb	r3, [r7, #3]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
    9b48:	7bbb      	ldrb	r3, [r7, #14]
    9b4a:	b29a      	uxth	r2, r3
    9b4c:	4b52      	ldr	r3, [pc, #328]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9b4e:	881b      	ldrh	r3, [r3, #0]
    9b50:	429a      	cmp	r2, r3
    9b52:	d17e      	bne.n	9c52 <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
    9b54:	4b4f      	ldr	r3, [pc, #316]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	2b04      	cmp	r3, #4
    9b5a:	d103      	bne.n	9b64 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
    9b5c:	4b50      	ldr	r3, [pc, #320]	; (9ca0 <hciTrSerialRxIncoming+0x208>)
    9b5e:	785b      	ldrb	r3, [r3, #1]
    9b60:	81bb      	strh	r3, [r7, #12]
    9b62:	e00d      	b.n	9b80 <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
    9b64:	4b4b      	ldr	r3, [pc, #300]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	2b02      	cmp	r3, #2
    9b6a:	d109      	bne.n	9b80 <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
    9b6c:	4b4c      	ldr	r3, [pc, #304]	; (9ca0 <hciTrSerialRxIncoming+0x208>)
    9b6e:	789b      	ldrb	r3, [r3, #2]
    9b70:	b29a      	uxth	r2, r3
    9b72:	4b4c      	ldr	r3, [pc, #304]	; (9ca4 <hciTrSerialRxIncoming+0x20c>)
    9b74:	781b      	ldrb	r3, [r3, #0]
    9b76:	b29b      	uxth	r3, r3
    9b78:	021b      	lsls	r3, r3, #8
    9b7a:	b29b      	uxth	r3, r3
    9b7c:	4413      	add	r3, r2
    9b7e:	81bb      	strh	r3, [r7, #12]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
    9b80:	4b44      	ldr	r3, [pc, #272]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	2b02      	cmp	r3, #2
    9b86:	d10c      	bne.n	9ba2 <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
    9b88:	7bbb      	ldrb	r3, [r7, #14]
    9b8a:	b29a      	uxth	r2, r3
    9b8c:	89bb      	ldrh	r3, [r7, #12]
    9b8e:	4413      	add	r3, r2
    9b90:	b29b      	uxth	r3, r3
    9b92:	2100      	movs	r1, #0
    9b94:	4618      	mov	r0, r3
    9b96:	f001 f93f 	bl	ae18 <WsfMsgDataAlloc>
    9b9a:	4602      	mov	r2, r0
    9b9c:	4b42      	ldr	r3, [pc, #264]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9b9e:	601a      	str	r2, [r3, #0]
    9ba0:	e00a      	b.n	9bb8 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
    9ba2:	7bbb      	ldrb	r3, [r7, #14]
    9ba4:	b29a      	uxth	r2, r3
    9ba6:	89bb      	ldrh	r3, [r7, #12]
    9ba8:	4413      	add	r3, r2
    9baa:	b29b      	uxth	r3, r3
    9bac:	4618      	mov	r0, r3
    9bae:	f001 f948 	bl	ae42 <WsfMsgAlloc>
    9bb2:	4602      	mov	r2, r0
    9bb4:	4b3c      	ldr	r3, [pc, #240]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9bb6:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
    9bb8:	4b3b      	ldr	r3, [pc, #236]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9bba:	681b      	ldr	r3, [r3, #0]
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	d025      	beq.n	9c0c <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
    9bc0:	4b39      	ldr	r3, [pc, #228]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9bc2:	681b      	ldr	r3, [r3, #0]
    9bc4:	4a39      	ldr	r2, [pc, #228]	; (9cac <hciTrSerialRxIncoming+0x214>)
    9bc6:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
    9bc8:	2300      	movs	r3, #0
    9bca:	72fb      	strb	r3, [r7, #11]
    9bcc:	e00b      	b.n	9be6 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
    9bce:	4b37      	ldr	r3, [pc, #220]	; (9cac <hciTrSerialRxIncoming+0x214>)
    9bd0:	681b      	ldr	r3, [r3, #0]
    9bd2:	1c5a      	adds	r2, r3, #1
    9bd4:	4935      	ldr	r1, [pc, #212]	; (9cac <hciTrSerialRxIncoming+0x214>)
    9bd6:	600a      	str	r2, [r1, #0]
    9bd8:	7afa      	ldrb	r2, [r7, #11]
    9bda:	4931      	ldr	r1, [pc, #196]	; (9ca0 <hciTrSerialRxIncoming+0x208>)
    9bdc:	5c8a      	ldrb	r2, [r1, r2]
    9bde:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
    9be0:	7afb      	ldrb	r3, [r7, #11]
    9be2:	3301      	adds	r3, #1
    9be4:	72fb      	strb	r3, [r7, #11]
    9be6:	7afa      	ldrb	r2, [r7, #11]
    9be8:	7bbb      	ldrb	r3, [r7, #14]
    9bea:	429a      	cmp	r2, r3
    9bec:	d3ef      	bcc.n	9bce <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
    9bee:	4a2a      	ldr	r2, [pc, #168]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9bf0:	89bb      	ldrh	r3, [r7, #12]
    9bf2:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
    9bf4:	4b28      	ldr	r3, [pc, #160]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9bf6:	881b      	ldrh	r3, [r3, #0]
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d103      	bne.n	9c04 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
    9bfc:	4b24      	ldr	r3, [pc, #144]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9bfe:	2203      	movs	r2, #3
    9c00:	701a      	strb	r2, [r3, #0]
    9c02:	e026      	b.n	9c52 <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
    9c04:	4b22      	ldr	r3, [pc, #136]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9c06:	2202      	movs	r2, #2
    9c08:	701a      	strb	r2, [r3, #0]
    9c0a:	e022      	b.n	9c52 <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
    9c0c:	7bfb      	ldrb	r3, [r7, #15]
    9c0e:	e03b      	b.n	9c88 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
    9c10:	4b1f      	ldr	r3, [pc, #124]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9c12:	781b      	ldrb	r3, [r3, #0]
    9c14:	2b02      	cmp	r3, #2
    9c16:	d11c      	bne.n	9c52 <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
    9c18:	4b24      	ldr	r3, [pc, #144]	; (9cac <hciTrSerialRxIncoming+0x214>)
    9c1a:	681b      	ldr	r3, [r3, #0]
    9c1c:	1c5a      	adds	r2, r3, #1
    9c1e:	4923      	ldr	r1, [pc, #140]	; (9cac <hciTrSerialRxIncoming+0x214>)
    9c20:	600a      	str	r2, [r1, #0]
    9c22:	7aba      	ldrb	r2, [r7, #10]
    9c24:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
    9c26:	4b1c      	ldr	r3, [pc, #112]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9c28:	881b      	ldrh	r3, [r3, #0]
    9c2a:	3b01      	subs	r3, #1
    9c2c:	b29a      	uxth	r2, r3
    9c2e:	4b1a      	ldr	r3, [pc, #104]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9c30:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
    9c32:	4b19      	ldr	r3, [pc, #100]	; (9c98 <hciTrSerialRxIncoming+0x200>)
    9c34:	881b      	ldrh	r3, [r3, #0]
    9c36:	2b00      	cmp	r3, #0
    9c38:	d102      	bne.n	9c40 <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
    9c3a:	4b15      	ldr	r3, [pc, #84]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9c3c:	2203      	movs	r2, #3
    9c3e:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
    9c40:	687b      	ldr	r3, [r7, #4]
    9c42:	3301      	adds	r3, #1
    9c44:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
    9c46:	7bfb      	ldrb	r3, [r7, #15]
    9c48:	3301      	adds	r3, #1
    9c4a:	73fb      	strb	r3, [r7, #15]
      len--;
    9c4c:	78fb      	ldrb	r3, [r7, #3]
    9c4e:	3b01      	subs	r3, #1
    9c50:	70fb      	strb	r3, [r7, #3]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
    9c52:	4b0f      	ldr	r3, [pc, #60]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	2b03      	cmp	r3, #3
    9c58:	d111      	bne.n	9c7e <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
    9c5a:	4b10      	ldr	r3, [pc, #64]	; (9c9c <hciTrSerialRxIncoming+0x204>)
    9c5c:	2200      	movs	r2, #0
    9c5e:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
    9c60:	4b11      	ldr	r3, [pc, #68]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9c62:	681b      	ldr	r3, [r3, #0]
    9c64:	2b00      	cmp	r3, #0
    9c66:	d007      	beq.n	9c78 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
    9c68:	4b0a      	ldr	r3, [pc, #40]	; (9c94 <hciTrSerialRxIncoming+0x1fc>)
    9c6a:	781a      	ldrb	r2, [r3, #0]
    9c6c:	4b0e      	ldr	r3, [pc, #56]	; (9ca8 <hciTrSerialRxIncoming+0x210>)
    9c6e:	681b      	ldr	r3, [r3, #0]
    9c70:	4619      	mov	r1, r3
    9c72:	4610      	mov	r0, r2
    9c74:	f7fd ffd6 	bl	7c24 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
    9c78:	4b05      	ldr	r3, [pc, #20]	; (9c90 <hciTrSerialRxIncoming+0x1f8>)
    9c7a:	2200      	movs	r2, #0
    9c7c:	701a      	strb	r2, [r3, #0]
  while (len)
    9c7e:	78fb      	ldrb	r3, [r7, #3]
    9c80:	2b00      	cmp	r3, #0
    9c82:	f47f af12 	bne.w	9aaa <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
    9c86:	7bfb      	ldrb	r3, [r7, #15]
}
    9c88:	4618      	mov	r0, r3
    9c8a:	3710      	adds	r7, #16
    9c8c:	46bd      	mov	sp, r7
    9c8e:	bd80      	pop	{r7, pc}
    9c90:	10001a9d 	.word	0x10001a9d
    9c94:	10001a9e 	.word	0x10001a9e
    9c98:	10001aa0 	.word	0x10001aa0
    9c9c:	10001a9c 	.word	0x10001a9c
    9ca0:	10001aa4 	.word	0x10001aa4
    9ca4:	10001aa7 	.word	0x10001aa7
    9ca8:	10001aa8 	.word	0x10001aa8
    9cac:	10001aac 	.word	0x10001aac

00009cb0 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
    9cb0:	b580      	push	{r7, lr}
    9cb2:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    9cb4:	4b0b      	ldr	r3, [pc, #44]	; (9ce4 <hciCoreReadResolvingListSize+0x34>)
    9cb6:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    9cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	d008      	beq.n	9cd4 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
    9cc2:	4b09      	ldr	r3, [pc, #36]	; (9ce8 <hciCoreReadResolvingListSize+0x38>)
    9cc4:	881b      	ldrh	r3, [r3, #0]
    9cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d002      	beq.n	9cd4 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
    9cce:	f7fd f9d2 	bl	7076 <HciLeReadResolvingListSize>
    9cd2:	e005      	b.n	9ce0 <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
    9cd4:	4b03      	ldr	r3, [pc, #12]	; (9ce4 <hciCoreReadResolvingListSize+0x34>)
    9cd6:	2200      	movs	r2, #0
    9cd8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
    9cdc:	f000 f806 	bl	9cec <hciCoreReadMaxDataLen>
  }
}
    9ce0:	bf00      	nop
    9ce2:	bd80      	pop	{r7, pc}
    9ce4:	10002630 	.word	0x10002630
    9ce8:	10001084 	.word	0x10001084

00009cec <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    9cf0:	4b09      	ldr	r3, [pc, #36]	; (9d18 <hciCoreReadMaxDataLen+0x2c>)
    9cf2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    9cf6:	f003 0320 	and.w	r3, r3, #32
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d008      	beq.n	9d10 <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
    9cfe:	4b07      	ldr	r3, [pc, #28]	; (9d1c <hciCoreReadMaxDataLen+0x30>)
    9d00:	881b      	ldrh	r3, [r3, #0]
    9d02:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    9d06:	2b00      	cmp	r3, #0
    9d08:	d002      	beq.n	9d10 <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
    9d0a:	f7fc fdee 	bl	68ea <HciLeReadMaxDataLen>
    9d0e:	e001      	b.n	9d14 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
    9d10:	f7fc fe75 	bl	69fe <HciLeRandCmd>
  }
}
    9d14:	bf00      	nop
    9d16:	bd80      	pop	{r7, pc}
    9d18:	10002630 	.word	0x10002630
    9d1c:	10001084 	.word	0x10001084

00009d20 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
    9d20:	b580      	push	{r7, lr}
    9d22:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
    9d24:	f7fd f8b4 	bl	6e90 <HciResetCmd>
}
    9d28:	bf00      	nop
    9d2a:	bd80      	pop	{r7, pc}

00009d2c <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b086      	sub	sp, #24
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
    9d34:	687b      	ldr	r3, [r7, #4]
    9d36:	781b      	ldrb	r3, [r3, #0]
    9d38:	2b0e      	cmp	r3, #14
    9d3a:	f040 8149 	bne.w	9fd0 <hciCoreResetSequence+0x2a4>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	3302      	adds	r3, #2
    9d42:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	3301      	adds	r3, #1
    9d48:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	b29a      	uxth	r2, r3
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	3301      	adds	r3, #1
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	b29b      	uxth	r3, r3
    9d58:	021b      	lsls	r3, r3, #8
    9d5a:	b29b      	uxth	r3, r3
    9d5c:	4413      	add	r3, r2
    9d5e:	82fb      	strh	r3, [r7, #22]
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	3302      	adds	r3, #2
    9d64:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	3301      	adds	r3, #1
    9d6a:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
    9d6c:	8afb      	ldrh	r3, [r7, #22]
    9d6e:	f242 020f 	movw	r2, #8207	; 0x200f
    9d72:	4293      	cmp	r3, r2
    9d74:	f000 809c 	beq.w	9eb0 <hciCoreResetSequence+0x184>
    9d78:	f242 020f 	movw	r2, #8207	; 0x200f
    9d7c:	4293      	cmp	r3, r2
    9d7e:	dc22      	bgt.n	9dc6 <hciCoreResetSequence+0x9a>
    9d80:	f241 0209 	movw	r2, #4105	; 0x1009
    9d84:	4293      	cmp	r3, r2
    9d86:	d062      	beq.n	9e4e <hciCoreResetSequence+0x122>
    9d88:	f241 0209 	movw	r2, #4105	; 0x1009
    9d8c:	4293      	cmp	r3, r2
    9d8e:	dc0c      	bgt.n	9daa <hciCoreResetSequence+0x7e>
    9d90:	f640 4203 	movw	r2, #3075	; 0xc03
    9d94:	4293      	cmp	r3, r2
    9d96:	d042      	beq.n	9e1e <hciCoreResetSequence+0xf2>
    9d98:	f640 4263 	movw	r2, #3171	; 0xc63
    9d9c:	4293      	cmp	r3, r2
    9d9e:	d053      	beq.n	9e48 <hciCoreResetSequence+0x11c>
    9da0:	f640 4201 	movw	r2, #3073	; 0xc01
    9da4:	4293      	cmp	r3, r2
    9da6:	d047      	beq.n	9e38 <hciCoreResetSequence+0x10c>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
    9da8:	e112      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9daa:	f242 0202 	movw	r2, #8194	; 0x2002
    9dae:	4293      	cmp	r3, r2
    9db0:	d054      	beq.n	9e5c <hciCoreResetSequence+0x130>
    9db2:	f242 0203 	movw	r2, #8195	; 0x2003
    9db6:	4293      	cmp	r3, r2
    9db8:	f000 8084 	beq.w	9ec4 <hciCoreResetSequence+0x198>
    9dbc:	f242 0201 	movw	r2, #8193	; 0x2001
    9dc0:	4293      	cmp	r3, r2
    9dc2:	d03d      	beq.n	9e40 <hciCoreResetSequence+0x114>
        break;
    9dc4:	e104      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9dc6:	f242 022a 	movw	r2, #8234	; 0x202a
    9dca:	4293      	cmp	r3, r2
    9dcc:	f000 808e 	beq.w	9eec <hciCoreResetSequence+0x1c0>
    9dd0:	f242 022a 	movw	r2, #8234	; 0x202a
    9dd4:	4293      	cmp	r3, r2
    9dd6:	dc0e      	bgt.n	9df6 <hciCoreResetSequence+0xca>
    9dd8:	f242 021c 	movw	r2, #8220	; 0x201c
    9ddc:	4293      	cmp	r3, r2
    9dde:	d05e      	beq.n	9e9e <hciCoreResetSequence+0x172>
    9de0:	f242 0224 	movw	r2, #8228	; 0x2024
    9de4:	4293      	cmp	r3, r2
    9de6:	f000 80ae 	beq.w	9f46 <hciCoreResetSequence+0x21a>
    9dea:	f242 0218 	movw	r2, #8216	; 0x2018
    9dee:	4293      	cmp	r3, r2
    9df0:	f000 80d2 	beq.w	9f98 <hciCoreResetSequence+0x26c>
        break;
    9df4:	e0ec      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9df6:	f242 023b 	movw	r2, #8251	; 0x203b
    9dfa:	4293      	cmp	r3, r2
    9dfc:	dc09      	bgt.n	9e12 <hciCoreResetSequence+0xe6>
    9dfe:	f242 023a 	movw	r2, #8250	; 0x203a
    9e02:	4293      	cmp	r3, r2
    9e04:	f280 80bb 	bge.w	9f7e <hciCoreResetSequence+0x252>
    9e08:	f242 022f 	movw	r2, #8239	; 0x202f
    9e0c:	4293      	cmp	r3, r2
    9e0e:	d077      	beq.n	9f00 <hciCoreResetSequence+0x1d4>
        break;
    9e10:	e0de      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9e12:	f242 024a 	movw	r2, #8266	; 0x204a
    9e16:	4293      	cmp	r3, r2
    9e18:	f000 80b1 	beq.w	9f7e <hciCoreResetSequence+0x252>
        break;
    9e1c:	e0d8      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        randCnt = 0;
    9e1e:	4b6e      	ldr	r3, [pc, #440]	; (9fd8 <hciCoreResetSequence+0x2ac>)
    9e20:	2200      	movs	r2, #0
    9e22:	701a      	strb	r2, [r3, #0]
        HciVendorSpecificCmd(0xFC02, 6, g_BLEMacAddress);
    9e24:	4a6d      	ldr	r2, [pc, #436]	; (9fdc <hciCoreResetSequence+0x2b0>)
    9e26:	2106      	movs	r1, #6
    9e28:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9e2c:	f7fd fa1f 	bl	726e <HciVendorSpecificCmd>
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
    9e30:	486b      	ldr	r0, [pc, #428]	; (9fe0 <hciCoreResetSequence+0x2b4>)
    9e32:	f7fd f845 	bl	6ec0 <HciSetEventMaskCmd>
        break;
    9e36:	e0cb      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
    9e38:	486a      	ldr	r0, [pc, #424]	; (9fe4 <hciCoreResetSequence+0x2b8>)
    9e3a:	f7fc ff40 	bl	6cbe <HciLeSetEventMaskCmd>
        break;
    9e3e:	e0c7      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
    9e40:	4869      	ldr	r0, [pc, #420]	; (9fe8 <hciCoreResetSequence+0x2bc>)
    9e42:	f7fd f859 	bl	6ef8 <HciSetEventMaskPage2Cmd>
        break;
    9e46:	e0c3      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        HciReadBdAddrCmd();
    9e48:	f7fc ffe8 	bl	6e1c <HciReadBdAddrCmd>
        break;
    9e4c:	e0c0      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
    9e4e:	6879      	ldr	r1, [r7, #4]
    9e50:	4866      	ldr	r0, [pc, #408]	; (9fec <hciCoreResetSequence+0x2c0>)
    9e52:	f003 f9d9 	bl	d208 <BdaCpy>
        HciLeReadBufSizeCmd();
    9e56:	f7fc fde5 	bl	6a24 <HciLeReadBufSizeCmd>
        break;
    9e5a:	e0b9      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
    9e5c:	687b      	ldr	r3, [r7, #4]
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	b29a      	uxth	r2, r3
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	3301      	adds	r3, #1
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	b29b      	uxth	r3, r3
    9e6a:	021b      	lsls	r3, r3, #8
    9e6c:	b29b      	uxth	r3, r3
    9e6e:	4413      	add	r3, r2
    9e70:	b29a      	uxth	r2, r3
    9e72:	4b5f      	ldr	r3, [pc, #380]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9e74:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	3302      	adds	r3, #2
    9e7c:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	1c5a      	adds	r2, r3, #1
    9e82:	607a      	str	r2, [r7, #4]
    9e84:	781a      	ldrb	r2, [r3, #0]
    9e86:	4b5a      	ldr	r3, [pc, #360]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9e88:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
    9e8c:	4b58      	ldr	r3, [pc, #352]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9e8e:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
    9e92:	4b57      	ldr	r3, [pc, #348]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9e94:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
    9e98:	f7fc fe10 	bl	6abc <HciLeReadSupStatesCmd>
        break;
    9e9c:	e098      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
    9e9e:	4b54      	ldr	r3, [pc, #336]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9ea0:	687a      	ldr	r2, [r7, #4]
    9ea2:	33e0      	adds	r3, #224	; 0xe0
    9ea4:	6810      	ldr	r0, [r2, #0]
    9ea6:	6851      	ldr	r1, [r2, #4]
    9ea8:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
    9eaa:	f7fc fe1a 	bl	6ae2 <HciLeReadWhiteListSizeCmd>
        break;
    9eae:	e08f      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
    9eb0:	687b      	ldr	r3, [r7, #4]
    9eb2:	1c5a      	adds	r2, r3, #1
    9eb4:	607a      	str	r2, [r7, #4]
    9eb6:	781a      	ldrb	r2, [r3, #0]
    9eb8:	4b4d      	ldr	r3, [pc, #308]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9eba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
    9ebe:	f7fc fdc4 	bl	6a4a <HciLeReadLocalSupFeatCmd>
        break;
    9ec2:	e085      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	b29a      	uxth	r2, r3
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	3301      	adds	r3, #1
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	b29b      	uxth	r3, r3
    9ed2:	021b      	lsls	r3, r3, #8
    9ed4:	b29b      	uxth	r3, r3
    9ed6:	4413      	add	r3, r2
    9ed8:	b29a      	uxth	r2, r3
    9eda:	4b45      	ldr	r3, [pc, #276]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9edc:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	3302      	adds	r3, #2
    9ee4:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
    9ee6:	f7ff fee3 	bl	9cb0 <hciCoreReadResolvingListSize>
        break;
    9eea:	e071      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	1c5a      	adds	r2, r3, #1
    9ef0:	607a      	str	r2, [r7, #4]
    9ef2:	781a      	ldrb	r2, [r3, #0]
    9ef4:	4b3e      	ldr	r3, [pc, #248]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9ef6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
    9efa:	f7ff fef7 	bl	9cec <hciCoreReadMaxDataLen>
        break;
    9efe:	e067      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	b29a      	uxth	r2, r3
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	3301      	adds	r3, #1
    9f0a:	781b      	ldrb	r3, [r3, #0]
    9f0c:	b29b      	uxth	r3, r3
    9f0e:	021b      	lsls	r3, r3, #8
    9f10:	b29b      	uxth	r3, r3
    9f12:	4413      	add	r3, r2
    9f14:	82bb      	strh	r3, [r7, #20]
    9f16:	687b      	ldr	r3, [r7, #4]
    9f18:	3302      	adds	r3, #2
    9f1a:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	b29a      	uxth	r2, r3
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	3301      	adds	r3, #1
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	b29b      	uxth	r3, r3
    9f2a:	021b      	lsls	r3, r3, #8
    9f2c:	b29b      	uxth	r3, r3
    9f2e:	4413      	add	r3, r2
    9f30:	827b      	strh	r3, [r7, #18]
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	3302      	adds	r3, #2
    9f36:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
    9f38:	8a7a      	ldrh	r2, [r7, #18]
    9f3a:	8abb      	ldrh	r3, [r7, #20]
    9f3c:	4611      	mov	r1, r2
    9f3e:	4618      	mov	r0, r3
    9f40:	f7fc fc65 	bl	680e <HciLeWriteDefDataLen>
        break;
    9f44:	e044      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        if (hciCoreCb.extResetSeq)
    9f46:	4b2a      	ldr	r3, [pc, #168]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d007      	beq.n	9f60 <hciCoreResetSequence+0x234>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    9f50:	4b27      	ldr	r3, [pc, #156]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f52:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f56:	8afa      	ldrh	r2, [r7, #22]
    9f58:	4611      	mov	r1, r2
    9f5a:	6878      	ldr	r0, [r7, #4]
    9f5c:	4798      	blx	r3
        break;
    9f5e:	e037      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
          hciCoreCb.maxAdvDataLen = 0;
    9f60:	4b23      	ldr	r3, [pc, #140]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f62:	2200      	movs	r2, #0
    9f64:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
    9f68:	4b21      	ldr	r3, [pc, #132]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f6a:	2200      	movs	r2, #0
    9f6c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
    9f70:	4b1f      	ldr	r3, [pc, #124]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f72:	2200      	movs	r2, #0
    9f74:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
    9f78:	f7fc fd41 	bl	69fe <HciLeRandCmd>
        break;
    9f7c:	e028      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        if (hciCoreCb.extResetSeq)
    9f7e:	4b1c      	ldr	r3, [pc, #112]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f80:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f84:	2b00      	cmp	r3, #0
    9f86:	d022      	beq.n	9fce <hciCoreResetSequence+0x2a2>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    9f88:	4b19      	ldr	r3, [pc, #100]	; (9ff0 <hciCoreResetSequence+0x2c4>)
    9f8a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f8e:	8afa      	ldrh	r2, [r7, #22]
    9f90:	4611      	mov	r1, r2
    9f92:	6878      	ldr	r0, [r7, #4]
    9f94:	4798      	blx	r3
        break;
    9f96:	e01a      	b.n	9fce <hciCoreResetSequence+0x2a2>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
    9f98:	4b0f      	ldr	r3, [pc, #60]	; (9fd8 <hciCoreResetSequence+0x2ac>)
    9f9a:	781b      	ldrb	r3, [r3, #0]
    9f9c:	2b02      	cmp	r3, #2
    9f9e:	d808      	bhi.n	9fb2 <hciCoreResetSequence+0x286>
          randCnt++;
    9fa0:	4b0d      	ldr	r3, [pc, #52]	; (9fd8 <hciCoreResetSequence+0x2ac>)
    9fa2:	781b      	ldrb	r3, [r3, #0]
    9fa4:	3301      	adds	r3, #1
    9fa6:	b2da      	uxtb	r2, r3
    9fa8:	4b0b      	ldr	r3, [pc, #44]	; (9fd8 <hciCoreResetSequence+0x2ac>)
    9faa:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
    9fac:	f7fc fd27 	bl	69fe <HciLeRandCmd>
        break;
    9fb0:	e00e      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
          hciCb.resetting = FALSE;
    9fb2:	4b10      	ldr	r3, [pc, #64]	; (9ff4 <hciCoreResetSequence+0x2c8>)
    9fb4:	2200      	movs	r2, #0
    9fb6:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
    9fb8:	2300      	movs	r3, #0
    9fba:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
    9fbc:	2300      	movs	r3, #0
    9fbe:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
    9fc0:	4b0c      	ldr	r3, [pc, #48]	; (9ff4 <hciCoreResetSequence+0x2c8>)
    9fc2:	689b      	ldr	r3, [r3, #8]
    9fc4:	f107 020c 	add.w	r2, r7, #12
    9fc8:	4610      	mov	r0, r2
    9fca:	4798      	blx	r3
        break;
    9fcc:	e000      	b.n	9fd0 <hciCoreResetSequence+0x2a4>
        break;
    9fce:	bf00      	nop
    }
  }
}
    9fd0:	bf00      	nop
    9fd2:	3718      	adds	r7, #24
    9fd4:	46bd      	mov	sp, r7
    9fd6:	bd80      	pop	{r7, pc}
    9fd8:	10001ab0 	.word	0x10001ab0
    9fdc:	10001090 	.word	0x10001090
    9fe0:	00012cdc 	.word	0x00012cdc
    9fe4:	00012ce4 	.word	0x00012ce4
    9fe8:	00012cec 	.word	0x00012cec
    9fec:	10002718 	.word	0x10002718
    9ff0:	10002630 	.word	0x10002630
    9ff4:	100028f4 	.word	0x100028f4

00009ff8 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
    9ff8:	b480      	push	{r7}
    9ffa:	b083      	sub	sp, #12
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	4603      	mov	r3, r0
    a000:	6039      	str	r1, [r7, #0]
    a002:	80fb      	strh	r3, [r7, #6]
    a004:	4613      	mov	r3, r2
    a006:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
    a008:	2312      	movs	r3, #18
}
    a00a:	4618      	mov	r0, r3
    a00c:	370c      	adds	r7, #12
    a00e:	46bd      	mov	sp, r7
    a010:	f85d 7b04 	ldr.w	r7, [sp], #4
    a014:	4770      	bx	lr

0000a016 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
    a016:	b480      	push	{r7}
    a018:	b083      	sub	sp, #12
    a01a:	af00      	add	r7, sp, #0
    a01c:	4603      	mov	r3, r0
    a01e:	71fb      	strb	r3, [r7, #7]

}
    a020:	bf00      	nop
    a022:	370c      	adds	r7, #12
    a024:	46bd      	mov	sp, r7
    a026:	f85d 7b04 	ldr.w	r7, [sp], #4
    a02a:	4770      	bx	lr

0000a02c <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
    a02c:	b480      	push	{r7}
    a02e:	b085      	sub	sp, #20
    a030:	af00      	add	r7, sp, #0
    a032:	6078      	str	r0, [r7, #4]
    a034:	460b      	mov	r3, r1
    a036:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
    a038:	2300      	movs	r3, #0
    a03a:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
    a03c:	7bfb      	ldrb	r3, [r7, #15]
    a03e:	b2db      	uxtb	r3, r3
    a040:	2b00      	cmp	r3, #0
    a042:	d100      	bne.n	a046 <WsfAssert+0x1a>
    a044:	e7fa      	b.n	a03c <WsfAssert+0x10>
    {
      break;
    a046:	bf00      	nop
    }
  }
}
    a048:	bf00      	nop
    a04a:	3714      	adds	r7, #20
    a04c:	46bd      	mov	sp, r7
    a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a052:	4770      	bx	lr

0000a054 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
    a054:	b480      	push	{r7}
    a056:	af00      	add	r7, sp, #0
  if (csNesting == 0)
    a058:	4b07      	ldr	r3, [pc, #28]	; (a078 <WsfCsEnter+0x24>)
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	2b00      	cmp	r3, #0
    a05e:	d100      	bne.n	a062 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
    a060:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
    a062:	4b05      	ldr	r3, [pc, #20]	; (a078 <WsfCsEnter+0x24>)
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	3301      	adds	r3, #1
    a068:	b2da      	uxtb	r2, r3
    a06a:	4b03      	ldr	r3, [pc, #12]	; (a078 <WsfCsEnter+0x24>)
    a06c:	701a      	strb	r2, [r3, #0]
}
    a06e:	bf00      	nop
    a070:	46bd      	mov	sp, r7
    a072:	f85d 7b04 	ldr.w	r7, [sp], #4
    a076:	4770      	bx	lr
    a078:	10001ab1 	.word	0x10001ab1

0000a07c <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
    a07c:	b480      	push	{r7}
    a07e:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
    a080:	4b07      	ldr	r3, [pc, #28]	; (a0a0 <WsfCsExit+0x24>)
    a082:	781b      	ldrb	r3, [r3, #0]
    a084:	3b01      	subs	r3, #1
    a086:	b2da      	uxtb	r2, r3
    a088:	4b05      	ldr	r3, [pc, #20]	; (a0a0 <WsfCsExit+0x24>)
    a08a:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
    a08c:	4b04      	ldr	r3, [pc, #16]	; (a0a0 <WsfCsExit+0x24>)
    a08e:	781b      	ldrb	r3, [r3, #0]
    a090:	2b00      	cmp	r3, #0
    a092:	d100      	bne.n	a096 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
    a094:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
    a096:	bf00      	nop
    a098:	46bd      	mov	sp, r7
    a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a09e:	4770      	bx	lr
    a0a0:	10001ab1 	.word	0x10001ab1

0000a0a4 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
    a0a4:	b580      	push	{r7, lr}
    a0a6:	af00      	add	r7, sp, #0
  WsfCsEnter();
    a0a8:	f7ff ffd4 	bl	a054 <WsfCsEnter>
}
    a0ac:	bf00      	nop
    a0ae:	bd80      	pop	{r7, pc}

0000a0b0 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	af00      	add	r7, sp, #0
  WsfCsExit();
    a0b4:	f7ff ffe2 	bl	a07c <WsfCsExit>
}
    a0b8:	bf00      	nop
    a0ba:	bd80      	pop	{r7, pc}

0000a0bc <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
    a0bc:	b480      	push	{r7}
    a0be:	af00      	add	r7, sp, #0
          }
      }

  }    
#endif
}
    a0c0:	bf00      	nop
    a0c2:	46bd      	mov	sp, r7
    a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0c8:	4770      	bx	lr
	...

0000a0cc <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
    a0cc:	b580      	push	{r7, lr}
    a0ce:	b082      	sub	sp, #8
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	4603      	mov	r3, r0
    a0d4:	460a      	mov	r2, r1
    a0d6:	71fb      	strb	r3, [r7, #7]
    a0d8:	4613      	mov	r3, r2
    a0da:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
    a0dc:	f7ff ffba 	bl	a054 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    a0e0:	79fb      	ldrb	r3, [r7, #7]
    a0e2:	f003 030f 	and.w	r3, r3, #15
    a0e6:	79fa      	ldrb	r2, [r7, #7]
    a0e8:	f002 020f 	and.w	r2, r2, #15
    a0ec:	490e      	ldr	r1, [pc, #56]	; (a128 <WsfSetEvent+0x5c>)
    a0ee:	440a      	add	r2, r1
    a0f0:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
    a0f4:	79ba      	ldrb	r2, [r7, #6]
    a0f6:	430a      	orrs	r2, r1
    a0f8:	b2d1      	uxtb	r1, r2
    a0fa:	4a0b      	ldr	r2, [pc, #44]	; (a128 <WsfSetEvent+0x5c>)
    a0fc:	4413      	add	r3, r2
    a0fe:	460a      	mov	r2, r1
    a100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    a104:	4b08      	ldr	r3, [pc, #32]	; (a128 <WsfSetEvent+0x5c>)
    a106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a10a:	f043 0304 	orr.w	r3, r3, #4
    a10e:	b2da      	uxtb	r2, r3
    a110:	4b05      	ldr	r3, [pc, #20]	; (a128 <WsfSetEvent+0x5c>)
    a112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    a116:	f7ff ffb1 	bl	a07c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    a11a:	f7ff ffcf 	bl	a0bc <WsfSetOsSpecificEvent>
}
    a11e:	bf00      	nop
    a120:	3708      	adds	r7, #8
    a122:	46bd      	mov	sp, r7
    a124:	bd80      	pop	{r7, pc}
    a126:	bf00      	nop
    a128:	10002744 	.word	0x10002744

0000a12c <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
    a12c:	b580      	push	{r7, lr}
    a12e:	b082      	sub	sp, #8
    a130:	af00      	add	r7, sp, #0
    a132:	4603      	mov	r3, r0
    a134:	460a      	mov	r2, r1
    a136:	71fb      	strb	r3, [r7, #7]
    a138:	4613      	mov	r3, r2
    a13a:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
    a13c:	f7ff ff8a 	bl	a054 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
    a140:	4b08      	ldr	r3, [pc, #32]	; (a164 <WsfTaskSetReady+0x38>)
    a142:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    a146:	79bb      	ldrb	r3, [r7, #6]
    a148:	4313      	orrs	r3, r2
    a14a:	b2da      	uxtb	r2, r3
    a14c:	4b05      	ldr	r3, [pc, #20]	; (a164 <WsfTaskSetReady+0x38>)
    a14e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    a152:	f7ff ff93 	bl	a07c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    a156:	f7ff ffb1 	bl	a0bc <WsfSetOsSpecificEvent>
}
    a15a:	bf00      	nop
    a15c:	3708      	adds	r7, #8
    a15e:	46bd      	mov	sp, r7
    a160:	bd80      	pop	{r7, pc}
    a162:	bf00      	nop
    a164:	10002744 	.word	0x10002744

0000a168 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
    a168:	b480      	push	{r7}
    a16a:	b083      	sub	sp, #12
    a16c:	af00      	add	r7, sp, #0
    a16e:	4603      	mov	r3, r0
    a170:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
    a172:	4b03      	ldr	r3, [pc, #12]	; (a180 <WsfTaskMsgQueue+0x18>)
}
    a174:	4618      	mov	r0, r3
    a176:	370c      	adds	r7, #12
    a178:	46bd      	mov	sp, r7
    a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a17e:	4770      	bx	lr
    a180:	10002774 	.word	0x10002774

0000a184 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
    a184:	b480      	push	{r7}
    a186:	b085      	sub	sp, #20
    a188:	af00      	add	r7, sp, #0
    a18a:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
    a18c:	4b0a      	ldr	r3, [pc, #40]	; (a1b8 <WsfOsSetNextHandler+0x34>)
    a18e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    a192:	1c5a      	adds	r2, r3, #1
    a194:	b2d1      	uxtb	r1, r2
    a196:	4a08      	ldr	r2, [pc, #32]	; (a1b8 <WsfOsSetNextHandler+0x34>)
    a198:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    a19c:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
    a19e:	7bfb      	ldrb	r3, [r7, #15]
    a1a0:	4905      	ldr	r1, [pc, #20]	; (a1b8 <WsfOsSetNextHandler+0x34>)
    a1a2:	687a      	ldr	r2, [r7, #4]
    a1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
    a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
    a1aa:	4618      	mov	r0, r3
    a1ac:	3714      	adds	r7, #20
    a1ae:	46bd      	mov	sp, r7
    a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b4:	4770      	bx	lr
    a1b6:	bf00      	nop
    a1b8:	10002744 	.word	0x10002744

0000a1bc <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
    a1bc:	b480      	push	{r7}
    a1be:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
    a1c0:	4b06      	ldr	r3, [pc, #24]	; (a1dc <wsfOsReadyToSleep+0x20>)
    a1c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	bf0c      	ite	eq
    a1ca:	2301      	moveq	r3, #1
    a1cc:	2300      	movne	r3, #0
    a1ce:	b2db      	uxtb	r3, r3
}
    a1d0:	4618      	mov	r0, r3
    a1d2:	46bd      	mov	sp, r7
    a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1d8:	4770      	bx	lr
    a1da:	bf00      	nop
    a1dc:	10002744 	.word	0x10002744

0000a1e0 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	b086      	sub	sp, #24
    a1e4:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
    a1e6:	4b3f      	ldr	r3, [pc, #252]	; (a2e4 <wsfOsDispatcher+0x104>)
    a1e8:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
    a1ea:	e072      	b.n	a2d2 <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
    a1ec:	f7ff ff32 	bl	a054 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
    a1f0:	693b      	ldr	r3, [r7, #16]
    a1f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a1f6:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
    a1f8:	693b      	ldr	r3, [r7, #16]
    a1fa:	2200      	movs	r2, #0
    a1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
    a200:	f7ff ff3c 	bl	a07c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    a204:	7bfb      	ldrb	r3, [r7, #15]
    a206:	f003 0301 	and.w	r3, r3, #1
    a20a:	2b00      	cmp	r3, #0
    a20c:	d016      	beq.n	a23c <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    a20e:	e00a      	b.n	a226 <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
    a210:	78bb      	ldrb	r3, [r7, #2]
    a212:	461a      	mov	r2, r3
    a214:	693b      	ldr	r3, [r7, #16]
    a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a21a:	68b9      	ldr	r1, [r7, #8]
    a21c:	2000      	movs	r0, #0
    a21e:	4798      	blx	r3
        WsfMsgFree(pMsg);
    a220:	68b8      	ldr	r0, [r7, #8]
    a222:	f000 fe25 	bl	ae70 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    a226:	693b      	ldr	r3, [r7, #16]
    a228:	3330      	adds	r3, #48	; 0x30
    a22a:	1cba      	adds	r2, r7, #2
    a22c:	4611      	mov	r1, r2
    a22e:	4618      	mov	r0, r3
    a230:	f000 fe58 	bl	aee4 <WsfMsgDeq>
    a234:	60b8      	str	r0, [r7, #8]
    a236:	68bb      	ldr	r3, [r7, #8]
    a238:	2b00      	cmp	r3, #0
    a23a:	d1e9      	bne.n	a210 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
    a23c:	7bfb      	ldrb	r3, [r7, #15]
    a23e:	f003 0302 	and.w	r3, r3, #2
    a242:	2b00      	cmp	r3, #0
    a244:	d012      	beq.n	a26c <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    a246:	e00a      	b.n	a25e <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	7a1b      	ldrb	r3, [r3, #8]
    a24c:	461a      	mov	r2, r3
    a24e:	693b      	ldr	r3, [r7, #16]
    a250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a254:	687a      	ldr	r2, [r7, #4]
    a256:	320a      	adds	r2, #10
    a258:	4611      	mov	r1, r2
    a25a:	2000      	movs	r0, #0
    a25c:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    a25e:	2000      	movs	r0, #0
    a260:	f001 f82c 	bl	b2bc <WsfTimerServiceExpired>
    a264:	6078      	str	r0, [r7, #4]
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	2b00      	cmp	r3, #0
    a26a:	d1ed      	bne.n	a248 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
    a26c:	7bfb      	ldrb	r3, [r7, #15]
    a26e:	f003 0304 	and.w	r3, r3, #4
    a272:	2b00      	cmp	r3, #0
    a274:	d02d      	beq.n	a2d2 <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    a276:	2300      	movs	r3, #0
    a278:	75fb      	strb	r3, [r7, #23]
    a27a:	e027      	b.n	a2cc <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
    a27c:	7dfb      	ldrb	r3, [r7, #23]
    a27e:	693a      	ldr	r2, [r7, #16]
    a280:	4413      	add	r3, r2
    a282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a286:	2b00      	cmp	r3, #0
    a288:	d01d      	beq.n	a2c6 <wsfOsDispatcher+0xe6>
    a28a:	7dfa      	ldrb	r2, [r7, #23]
    a28c:	693b      	ldr	r3, [r7, #16]
    a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a292:	2b00      	cmp	r3, #0
    a294:	d017      	beq.n	a2c6 <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
    a296:	f7ff fedd 	bl	a054 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
    a29a:	7dfb      	ldrb	r3, [r7, #23]
    a29c:	693a      	ldr	r2, [r7, #16]
    a29e:	4413      	add	r3, r2
    a2a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a2a4:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
    a2a6:	7dfb      	ldrb	r3, [r7, #23]
    a2a8:	693a      	ldr	r2, [r7, #16]
    a2aa:	4413      	add	r3, r2
    a2ac:	2200      	movs	r2, #0
    a2ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
    a2b2:	f7ff fee3 	bl	a07c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
    a2b6:	7dfa      	ldrb	r2, [r7, #23]
    a2b8:	693b      	ldr	r3, [r7, #16]
    a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2be:	78fa      	ldrb	r2, [r7, #3]
    a2c0:	2100      	movs	r1, #0
    a2c2:	4610      	mov	r0, r2
    a2c4:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    a2c6:	7dfb      	ldrb	r3, [r7, #23]
    a2c8:	3301      	adds	r3, #1
    a2ca:	75fb      	strb	r3, [r7, #23]
    a2cc:	7dfb      	ldrb	r3, [r7, #23]
    a2ce:	2b08      	cmp	r3, #8
    a2d0:	d9d4      	bls.n	a27c <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
    a2d2:	693b      	ldr	r3, [r7, #16]
    a2d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d187      	bne.n	a1ec <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
    a2dc:	bf00      	nop
    a2de:	3718      	adds	r7, #24
    a2e0:	46bd      	mov	sp, r7
    a2e2:	bd80      	pop	{r7, pc}
    a2e4:	10002744 	.word	0x10002744

0000a2e8 <WsfPacketTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfPacketTrace(uint8_t ui8Type, uint32_t ui32Len, uint8_t *pui8Buf)
{
    a2e8:	b580      	push	{r7, lr}
    a2ea:	b086      	sub	sp, #24
    a2ec:	af00      	add	r7, sp, #0
    a2ee:	4603      	mov	r3, r0
    a2f0:	60b9      	str	r1, [r7, #8]
    a2f2:	607a      	str	r2, [r7, #4]
    a2f4:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  am_util_debug_printf("%02X ", ui8Type);
    a2f6:	7bfb      	ldrb	r3, [r7, #15]
    a2f8:	4619      	mov	r1, r3
    a2fa:	4812      	ldr	r0, [pc, #72]	; (a344 <WsfPacketTrace+0x5c>)
    a2fc:	f003 ff82 	bl	e204 <am_util_stdio_printf>

  for(i = 0; i < ui32Len; i++)
    a300:	2300      	movs	r3, #0
    a302:	617b      	str	r3, [r7, #20]
    a304:	e012      	b.n	a32c <WsfPacketTrace+0x44>
  {
    if ((i % 8) == 0)
    a306:	697b      	ldr	r3, [r7, #20]
    a308:	f003 0307 	and.w	r3, r3, #7
    a30c:	2b00      	cmp	r3, #0
    a30e:	d102      	bne.n	a316 <WsfPacketTrace+0x2e>
    {
      am_util_debug_printf("\n");
    a310:	480d      	ldr	r0, [pc, #52]	; (a348 <WsfPacketTrace+0x60>)
    a312:	f003 ff77 	bl	e204 <am_util_stdio_printf>
    }

    am_util_debug_printf("%02X ", *pui8Buf++);
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	1c5a      	adds	r2, r3, #1
    a31a:	607a      	str	r2, [r7, #4]
    a31c:	781b      	ldrb	r3, [r3, #0]
    a31e:	4619      	mov	r1, r3
    a320:	4808      	ldr	r0, [pc, #32]	; (a344 <WsfPacketTrace+0x5c>)
    a322:	f003 ff6f 	bl	e204 <am_util_stdio_printf>
  for(i = 0; i < ui32Len; i++)
    a326:	697b      	ldr	r3, [r7, #20]
    a328:	3301      	adds	r3, #1
    a32a:	617b      	str	r3, [r7, #20]
    a32c:	697a      	ldr	r2, [r7, #20]
    a32e:	68bb      	ldr	r3, [r7, #8]
    a330:	429a      	cmp	r2, r3
    a332:	d3e8      	bcc.n	a306 <WsfPacketTrace+0x1e>
  }

  am_util_debug_printf("\n\n");
    a334:	4805      	ldr	r0, [pc, #20]	; (a34c <WsfPacketTrace+0x64>)
    a336:	f003 ff65 	bl	e204 <am_util_stdio_printf>
}
    a33a:	bf00      	nop
    a33c:	3718      	adds	r7, #24
    a33e:	46bd      	mov	sp, r7
    a340:	bd80      	pop	{r7, pc}
    a342:	bf00      	nop
    a344:	00011848 	.word	0x00011848
    a348:	00011850 	.word	0x00011850
    a34c:	00011854 	.word	0x00011854

0000a350 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
    a350:	b40f      	push	{r0, r1, r2, r3}
    a352:	b580      	push	{r7, lr}
    a354:	b0c2      	sub	sp, #264	; 0x108
    a356:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
    a358:	f507 728a 	add.w	r2, r7, #276	; 0x114
    a35c:	463b      	mov	r3, r7
    a35e:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
    a360:	463b      	mov	r3, r7
    a362:	1d38      	adds	r0, r7, #4
    a364:	681a      	ldr	r2, [r3, #0]
    a366:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
    a36a:	f003 fc45 	bl	dbf8 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
    a36e:	1d3b      	adds	r3, r7, #4
    a370:	4618      	mov	r0, r3
    a372:	f003 ff47 	bl	e204 <am_util_stdio_printf>
    a376:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
    a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    a37e:	2bff      	cmp	r3, #255	; 0xff
    a380:	d903      	bls.n	a38a <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
    a382:	2183      	movs	r1, #131	; 0x83
    a384:	4806      	ldr	r0, [pc, #24]	; (a3a0 <WsfTrace+0x50>)
    a386:	f7ff fe51 	bl	a02c <WsfAssert>
  am_util_debug_printf("\n");
    a38a:	4806      	ldr	r0, [pc, #24]	; (a3a4 <WsfTrace+0x54>)
    a38c:	f003 ff3a 	bl	e204 <am_util_stdio_printf>
}
    a390:	bf00      	nop
    a392:	f507 7784 	add.w	r7, r7, #264	; 0x108
    a396:	46bd      	mov	sp, r7
    a398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    a39c:	b004      	add	sp, #16
    a39e:	4770      	bx	lr
    a3a0:	00011858 	.word	0x00011858
    a3a4:	00011850 	.word	0x00011850

0000a3a8 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b082      	sub	sp, #8
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
    a3b0:	687b      	ldr	r3, [r7, #4]
    a3b2:	789b      	ldrb	r3, [r3, #2]
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d002      	beq.n	a3be <appProcMsg+0x16>
    a3b8:	2b01      	cmp	r3, #1
    a3ba:	d003      	beq.n	a3c4 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
    a3bc:	e006      	b.n	a3cc <appProcMsg+0x24>
      appUiBtnPoll();
    a3be:	f002 fb94 	bl	caea <appUiBtnPoll>
      break;
    a3c2:	e003      	b.n	a3cc <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
    a3c4:	6878      	ldr	r0, [r7, #4]
    a3c6:	f002 fb86 	bl	cad6 <appUiTimerExpired>
      break;
    a3ca:	bf00      	nop
  }
}
    a3cc:	bf00      	nop
    a3ce:	3708      	adds	r7, #8
    a3d0:	46bd      	mov	sp, r7
    a3d2:	bd80      	pop	{r7, pc}

0000a3d4 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
    a3d4:	b580      	push	{r7, lr}
    a3d6:	b082      	sub	sp, #8
    a3d8:	af00      	add	r7, sp, #0
    a3da:	4603      	mov	r3, r0
    a3dc:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
    a3de:	4a04      	ldr	r2, [pc, #16]	; (a3f0 <AppHandlerInit+0x1c>)
    a3e0:	79fb      	ldrb	r3, [r7, #7]
    a3e2:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
    a3e4:	f002 fb70 	bl	cac8 <AppDbInit>
}
    a3e8:	bf00      	nop
    a3ea:	3708      	adds	r7, #8
    a3ec:	46bd      	mov	sp, r7
    a3ee:	bd80      	pop	{r7, pc}
    a3f0:	1000279c 	.word	0x1000279c

0000a3f4 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b082      	sub	sp, #8
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	4603      	mov	r3, r0
    a3fc:	6039      	str	r1, [r7, #0]
    a3fe:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
    a400:	683b      	ldr	r3, [r7, #0]
    a402:	2b00      	cmp	r3, #0
    a404:	d01b      	beq.n	a43e <AppHandler+0x4a>
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
    a406:	683b      	ldr	r3, [r7, #0]
    a408:	789b      	ldrb	r3, [r3, #2]
    a40a:	4619      	mov	r1, r3
    a40c:	4811      	ldr	r0, [pc, #68]	; (a454 <AppHandler+0x60>)
    a40e:	f7ff ff9f 	bl	a350 <WsfTrace>
    
    if (pMsg->event >= APP_MASTER_MSG_START)
    a412:	683b      	ldr	r3, [r7, #0]
    a414:	789b      	ldrb	r3, [r3, #2]
    a416:	2b1f      	cmp	r3, #31
    a418:	d904      	bls.n	a424 <AppHandler+0x30>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
    a41a:	4b0f      	ldr	r3, [pc, #60]	; (a458 <AppHandler+0x64>)
    a41c:	685b      	ldr	r3, [r3, #4]
    a41e:	6838      	ldr	r0, [r7, #0]
    a420:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
    a422:	e013      	b.n	a44c <AppHandler+0x58>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
    a424:	683b      	ldr	r3, [r7, #0]
    a426:	789b      	ldrb	r3, [r3, #2]
    a428:	2b0f      	cmp	r3, #15
    a42a:	d904      	bls.n	a436 <AppHandler+0x42>
      (*appCb.slaveCback)(pMsg);    
    a42c:	4b0a      	ldr	r3, [pc, #40]	; (a458 <AppHandler+0x64>)
    a42e:	681b      	ldr	r3, [r3, #0]
    a430:	6838      	ldr	r0, [r7, #0]
    a432:	4798      	blx	r3
}
    a434:	e00a      	b.n	a44c <AppHandler+0x58>
      appProcMsg(pMsg);
    a436:	6838      	ldr	r0, [r7, #0]
    a438:	f7ff ffb6 	bl	a3a8 <appProcMsg>
}
    a43c:	e006      	b.n	a44c <AppHandler+0x58>
    if (event & APP_BTN_DOWN_EVT)
    a43e:	79fb      	ldrb	r3, [r7, #7]
    a440:	f003 0310 	and.w	r3, r3, #16
    a444:	2b00      	cmp	r3, #0
    a446:	d001      	beq.n	a44c <AppHandler+0x58>
      AppUiBtnPressed();
    a448:	f002 fb56 	bl	caf8 <AppUiBtnPressed>
}
    a44c:	bf00      	nop
    a44e:	3708      	adds	r7, #8
    a450:	46bd      	mov	sp, r7
    a452:	bd80      	pop	{r7, pc}
    a454:	000118a0 	.word	0x000118a0
    a458:	1000278c 	.word	0x1000278c

0000a45c <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
    a45c:	b480      	push	{r7}
    a45e:	b083      	sub	sp, #12
    a460:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
    a462:	4b0e      	ldr	r3, [pc, #56]	; (a49c <getNextToken+0x40>)
    a464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a468:	1c5a      	adds	r2, r3, #1
    a46a:	b2d1      	uxtb	r1, r2
    a46c:	4a0b      	ldr	r2, [pc, #44]	; (a49c <getNextToken+0x40>)
    a46e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a472:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
    a474:	79fb      	ldrb	r3, [r7, #7]
    a476:	2bff      	cmp	r3, #255	; 0xff
    a478:	d108      	bne.n	a48c <getNextToken+0x30>
  {
    token = secCb.token++;
    a47a:	4b08      	ldr	r3, [pc, #32]	; (a49c <getNextToken+0x40>)
    a47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a480:	1c5a      	adds	r2, r3, #1
    a482:	b2d1      	uxtb	r1, r2
    a484:	4a05      	ldr	r2, [pc, #20]	; (a49c <getNextToken+0x40>)
    a486:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a48a:	71fb      	strb	r3, [r7, #7]
  }

  return token;
    a48c:	79fb      	ldrb	r3, [r7, #7]
}
    a48e:	4618      	mov	r0, r3
    a490:	370c      	adds	r7, #12
    a492:	46bd      	mov	sp, r7
    a494:	f85d 7b04 	ldr.w	r7, [sp], #4
    a498:	4770      	bx	lr
    a49a:	bf00      	nop
    a49c:	100028b0 	.word	0x100028b0

0000a4a0 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b086      	sub	sp, #24
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	60f8      	str	r0, [r7, #12]
    a4a8:	60b9      	str	r1, [r7, #8]
    a4aa:	4611      	mov	r1, r2
    a4ac:	461a      	mov	r2, r3
    a4ae:	460b      	mov	r3, r1
    a4b0:	71fb      	strb	r3, [r7, #7]
    a4b2:	4613      	mov	r3, r2
    a4b4:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
    a4b6:	2030      	movs	r0, #48	; 0x30
    a4b8:	f000 fcc3 	bl	ae42 <WsfMsgAlloc>
    a4bc:	6178      	str	r0, [r7, #20]
    a4be:	697b      	ldr	r3, [r7, #20]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d01d      	beq.n	a500 <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
    a4c4:	f7ff ffca 	bl	a45c <getNextToken>
    a4c8:	4603      	mov	r3, r0
    a4ca:	461a      	mov	r2, r3
    a4cc:	697b      	ldr	r3, [r7, #20]
    a4ce:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
    a4d0:	697b      	ldr	r3, [r7, #20]
    a4d2:	88ba      	ldrh	r2, [r7, #4]
    a4d4:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a4d6:	697b      	ldr	r3, [r7, #20]
    a4d8:	f897 2020 	ldrb.w	r2, [r7, #32]
    a4dc:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
    a4de:	697b      	ldr	r3, [r7, #20]
    a4e0:	2200      	movs	r2, #0
    a4e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    a4e6:	79fb      	ldrb	r3, [r7, #7]
    a4e8:	697a      	ldr	r2, [r7, #20]
    a4ea:	4619      	mov	r1, r3
    a4ec:	4807      	ldr	r0, [pc, #28]	; (a50c <SecAes+0x6c>)
    a4ee:	f000 fce4 	bl	aeba <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
    a4f2:	68b9      	ldr	r1, [r7, #8]
    a4f4:	68f8      	ldr	r0, [r7, #12]
    a4f6:	f7fc fa0b 	bl	6910 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
    a4fa:	697b      	ldr	r3, [r7, #20]
    a4fc:	78db      	ldrb	r3, [r3, #3]
    a4fe:	e000      	b.n	a502 <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
    a500:	23ff      	movs	r3, #255	; 0xff
}
    a502:	4618      	mov	r0, r3
    a504:	3718      	adds	r7, #24
    a506:	46bd      	mov	sp, r7
    a508:	bd80      	pop	{r7, pc}
    a50a:	bf00      	nop
    a50c:	100028d0 	.word	0x100028d0

0000a510 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a510:	b580      	push	{r7, lr}
    a512:	b086      	sub	sp, #24
    a514:	af00      	add	r7, sp, #0
    a516:	60f8      	str	r0, [r7, #12]
    a518:	60b9      	str	r1, [r7, #8]
    a51a:	4613      	mov	r3, r2
    a51c:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
    a51e:	68fb      	ldr	r3, [r7, #12]
    a520:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
    a522:	68fb      	ldr	r3, [r7, #12]
    a524:	f103 0208 	add.w	r2, r3, #8
    a528:	697b      	ldr	r3, [r7, #20]
    a52a:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
    a52c:	697b      	ldr	r3, [r7, #20]
    a52e:	685a      	ldr	r2, [r3, #4]
    a530:	68bb      	ldr	r3, [r7, #8]
    a532:	3305      	adds	r3, #5
    a534:	4619      	mov	r1, r3
    a536:	4610      	mov	r0, r2
    a538:	f002 feb1 	bl	d29e <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
    a53c:	79fb      	ldrb	r3, [r7, #7]
    a53e:	6979      	ldr	r1, [r7, #20]
    a540:	4618      	mov	r0, r3
    a542:	f000 fca2 	bl	ae8a <WsfMsgSend>
}
    a546:	bf00      	nop
    a548:	3718      	adds	r7, #24
    a54a:	46bd      	mov	sp, r7
    a54c:	bd80      	pop	{r7, pc}
	...

0000a550 <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
    a550:	b480      	push	{r7}
    a552:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
    a554:	4b03      	ldr	r3, [pc, #12]	; (a564 <SecAesInit+0x14>)
    a556:	4a04      	ldr	r2, [pc, #16]	; (a568 <SecAesInit+0x18>)
    a558:	62da      	str	r2, [r3, #44]	; 0x2c
}
    a55a:	bf00      	nop
    a55c:	46bd      	mov	sp, r7
    a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a562:	4770      	bx	lr
    a564:	100028b0 	.word	0x100028b0
    a568:	0000a511 	.word	0x0000a511

0000a56c <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
    a56c:	b580      	push	{r7, lr}
    a56e:	b08a      	sub	sp, #40	; 0x28
    a570:	af00      	add	r7, sp, #0
    a572:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a578:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
    a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a57c:	681b      	ldr	r3, [r3, #0]
    a57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a580:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    a582:	4413      	add	r3, r2
    a584:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
    a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a58a:	b2da      	uxtb	r2, r3
    a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a58e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a590:	b2db      	uxtb	r3, r3
    a592:	1ad3      	subs	r3, r2, r3
    a594:	b2db      	uxtb	r3, r3
    a596:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
    a598:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a59c:	2b10      	cmp	r3, #16
    a59e:	dc2d      	bgt.n	a5fc <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
    a5a0:	f107 030c 	add.w	r3, r7, #12
    a5a4:	2210      	movs	r2, #16
    a5a6:	6a39      	ldr	r1, [r7, #32]
    a5a8:	4618      	mov	r0, r3
    a5aa:	f002 feb3 	bl	d314 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
    a5ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a5b2:	2b10      	cmp	r3, #16
    a5b4:	d014      	beq.n	a5e0 <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
    a5b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a5ba:	f1c3 0310 	rsb	r3, r3, #16
    a5be:	461a      	mov	r2, r3
    a5c0:	f107 030c 	add.w	r3, r7, #12
    a5c4:	2100      	movs	r1, #0
    a5c6:	4618      	mov	r0, r3
    a5c8:	f006 ff7c 	bl	114c4 <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
    a5cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a5d0:	f1c3 030f 	rsb	r3, r3, #15
    a5d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
    a5d8:	4413      	add	r3, r2
    a5da:	2280      	movs	r2, #128	; 0x80
    a5dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
    a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5e2:	f103 0214 	add.w	r2, r3, #20
    a5e6:	f107 030c 	add.w	r3, r7, #12
    a5ea:	4611      	mov	r1, r2
    a5ec:	4618      	mov	r0, r3
    a5ee:	f002 fe72 	bl	d2d6 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
    a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5f4:	2202      	movs	r2, #2
    a5f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    a5fa:	e006      	b.n	a60a <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
    a5fc:	f107 030c 	add.w	r3, r7, #12
    a600:	2210      	movs	r2, #16
    a602:	6a39      	ldr	r1, [r7, #32]
    a604:	4618      	mov	r0, r3
    a606:	f002 fe85 	bl	d314 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
    a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a60c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a60e:	2b00      	cmp	r3, #0
    a610:	d008      	beq.n	a624 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
    a612:	687b      	ldr	r3, [r7, #4]
    a614:	f103 0208 	add.w	r2, r3, #8
    a618:	f107 030c 	add.w	r3, r7, #12
    a61c:	4611      	mov	r1, r2
    a61e:	4618      	mov	r0, r3
    a620:	f002 fe59 	bl	d2d6 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
    a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a626:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a628:	3310      	adds	r3, #16
    a62a:	b29a      	uxth	r2, r3
    a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a62e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
    a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a636:	687a      	ldr	r2, [r7, #4]
    a638:	4619      	mov	r1, r3
    a63a:	4807      	ldr	r0, [pc, #28]	; (a658 <secCmacProcessBlock+0xec>)
    a63c:	f000 fc3d 	bl	aeba <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
    a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a642:	3304      	adds	r3, #4
    a644:	f107 020c 	add.w	r2, r7, #12
    a648:	4611      	mov	r1, r2
    a64a:	4618      	mov	r0, r3
    a64c:	f7fc f960 	bl	6910 <HciLeEncryptCmd>
}
    a650:	bf00      	nop
    a652:	3728      	adds	r7, #40	; 0x28
    a654:	46bd      	mov	sp, r7
    a656:	bd80      	pop	{r7, pc}
    a658:	100028d0 	.word	0x100028d0

0000a65c <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
    a65c:	b580      	push	{r7, lr}
    a65e:	b088      	sub	sp, #32
    a660:	af00      	add	r7, sp, #0
    a662:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a664:	687b      	ldr	r3, [r7, #4]
    a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a668:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
    a66a:	f107 030c 	add.w	r3, r7, #12
    a66e:	2210      	movs	r2, #16
    a670:	2100      	movs	r1, #0
    a672:	4618      	mov	r0, r3
    a674:	f006 ff26 	bl	114c4 <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
    a678:	69fb      	ldr	r3, [r7, #28]
    a67a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a67e:	687a      	ldr	r2, [r7, #4]
    a680:	4619      	mov	r1, r3
    a682:	4807      	ldr	r0, [pc, #28]	; (a6a0 <secCmacGenSubkey1+0x44>)
    a684:	f000 fc19 	bl	aeba <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
    a688:	69fb      	ldr	r3, [r7, #28]
    a68a:	3304      	adds	r3, #4
    a68c:	f107 020c 	add.w	r2, r7, #12
    a690:	4611      	mov	r1, r2
    a692:	4618      	mov	r0, r3
    a694:	f7fc f93c 	bl	6910 <HciLeEncryptCmd>
}
    a698:	bf00      	nop
    a69a:	3720      	adds	r7, #32
    a69c:	46bd      	mov	sp, r7
    a69e:	bd80      	pop	{r7, pc}
    a6a0:	100028d0 	.word	0x100028d0

0000a6a4 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
    a6a4:	b480      	push	{r7}
    a6a6:	b085      	sub	sp, #20
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	6078      	str	r0, [r7, #4]
    a6ac:	460b      	mov	r3, r1
    a6ae:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
    a6b0:	2300      	movs	r3, #0
    a6b2:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
    a6b4:	2300      	movs	r3, #0
    a6b6:	73fb      	strb	r3, [r7, #15]
    a6b8:	e021      	b.n	a6fe <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
    a6ba:	7bfb      	ldrb	r3, [r7, #15]
    a6bc:	687a      	ldr	r2, [r7, #4]
    a6be:	4413      	add	r3, r2
    a6c0:	781b      	ldrb	r3, [r3, #0]
    a6c2:	461a      	mov	r2, r3
    a6c4:	78fb      	ldrb	r3, [r7, #3]
    a6c6:	f1c3 0308 	rsb	r3, r3, #8
    a6ca:	fa42 f303 	asr.w	r3, r2, r3
    a6ce:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
    a6d0:	7bfb      	ldrb	r3, [r7, #15]
    a6d2:	687a      	ldr	r2, [r7, #4]
    a6d4:	4413      	add	r3, r2
    a6d6:	7bfa      	ldrb	r2, [r7, #15]
    a6d8:	6879      	ldr	r1, [r7, #4]
    a6da:	440a      	add	r2, r1
    a6dc:	7812      	ldrb	r2, [r2, #0]
    a6de:	4611      	mov	r1, r2
    a6e0:	78fa      	ldrb	r2, [r7, #3]
    a6e2:	fa01 f202 	lsl.w	r2, r1, r2
    a6e6:	b251      	sxtb	r1, r2
    a6e8:	f997 200e 	ldrsb.w	r2, [r7, #14]
    a6ec:	430a      	orrs	r2, r1
    a6ee:	b252      	sxtb	r2, r2
    a6f0:	b2d2      	uxtb	r2, r2
    a6f2:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
    a6f4:	7b7b      	ldrb	r3, [r7, #13]
    a6f6:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
    a6f8:	7bfb      	ldrb	r3, [r7, #15]
    a6fa:	3301      	adds	r3, #1
    a6fc:	73fb      	strb	r3, [r7, #15]
    a6fe:	7bfb      	ldrb	r3, [r7, #15]
    a700:	2b0f      	cmp	r3, #15
    a702:	d9da      	bls.n	a6ba <secCmacKeyShift+0x16>
  }

  return prevBits;
    a704:	7bbb      	ldrb	r3, [r7, #14]
}
    a706:	4618      	mov	r0, r3
    a708:	3714      	adds	r7, #20
    a70a:	46bd      	mov	sp, r7
    a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a710:	4770      	bx	lr

0000a712 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
    a712:	b580      	push	{r7, lr}
    a714:	b084      	sub	sp, #16
    a716:	af00      	add	r7, sp, #0
    a718:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a71e:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
    a720:	68fb      	ldr	r3, [r7, #12]
    a722:	f103 0214 	add.w	r2, r3, #20
    a726:	687b      	ldr	r3, [r7, #4]
    a728:	3308      	adds	r3, #8
    a72a:	4619      	mov	r1, r3
    a72c:	4610      	mov	r0, r2
    a72e:	f002 fdb6 	bl	d29e <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
    a732:	68fb      	ldr	r3, [r7, #12]
    a734:	3314      	adds	r3, #20
    a736:	2101      	movs	r1, #1
    a738:	4618      	mov	r0, r3
    a73a:	f7ff ffb3 	bl	a6a4 <secCmacKeyShift>
    a73e:	4603      	mov	r3, r0
    a740:	72fb      	strb	r3, [r7, #11]

  if (overflow)
    a742:	7afb      	ldrb	r3, [r7, #11]
    a744:	2b00      	cmp	r3, #0
    a746:	d007      	beq.n	a758 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
    a748:	68fb      	ldr	r3, [r7, #12]
    a74a:	7d1b      	ldrb	r3, [r3, #20]
    a74c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
    a750:	43db      	mvns	r3, r3
    a752:	b2da      	uxtb	r2, r3
    a754:	68fb      	ldr	r3, [r7, #12]
    a756:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
    a758:	68fb      	ldr	r3, [r7, #12]
    a75a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a75c:	f003 030f 	and.w	r3, r3, #15
    a760:	b29b      	uxth	r3, r3
    a762:	2b00      	cmp	r3, #0
    a764:	d012      	beq.n	a78c <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
    a766:	68fb      	ldr	r3, [r7, #12]
    a768:	3314      	adds	r3, #20
    a76a:	2101      	movs	r1, #1
    a76c:	4618      	mov	r0, r3
    a76e:	f7ff ff99 	bl	a6a4 <secCmacKeyShift>
    a772:	4603      	mov	r3, r0
    a774:	72fb      	strb	r3, [r7, #11]

    if (overflow)
    a776:	7afb      	ldrb	r3, [r7, #11]
    a778:	2b00      	cmp	r3, #0
    a77a:	d007      	beq.n	a78c <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
    a77c:	68fb      	ldr	r3, [r7, #12]
    a77e:	7d1b      	ldrb	r3, [r3, #20]
    a780:	f083 0378 	eor.w	r3, r3, #120	; 0x78
    a784:	43db      	mvns	r3, r3
    a786:	b2da      	uxtb	r2, r3
    a788:	68fb      	ldr	r3, [r7, #12]
    a78a:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
    a78c:	68fb      	ldr	r3, [r7, #12]
    a78e:	2201      	movs	r2, #1
    a790:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
    a794:	6878      	ldr	r0, [r7, #4]
    a796:	f7ff fee9 	bl	a56c <secCmacProcessBlock>
}
    a79a:	bf00      	nop
    a79c:	3710      	adds	r7, #16
    a79e:	46bd      	mov	sp, r7
    a7a0:	bd80      	pop	{r7, pc}

0000a7a2 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
    a7a2:	b580      	push	{r7, lr}
    a7a4:	b084      	sub	sp, #16
    a7a6:	af00      	add	r7, sp, #0
    a7a8:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a7b2:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
    a7b4:	687b      	ldr	r3, [r7, #4]
    a7b6:	3308      	adds	r3, #8
    a7b8:	2110      	movs	r1, #16
    a7ba:	4618      	mov	r0, r3
    a7bc:	f002 fdd3 	bl	d366 <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	f103 0208 	add.w	r2, r3, #8
    a7c6:	68fb      	ldr	r3, [r7, #12]
    a7c8:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
    a7ca:	68bb      	ldr	r3, [r7, #8]
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	4618      	mov	r0, r3
    a7d0:	f000 fae8 	bl	ada4 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
    a7d4:	68bb      	ldr	r3, [r7, #8]
    a7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a7da:	68f9      	ldr	r1, [r7, #12]
    a7dc:	4618      	mov	r0, r3
    a7de:	f000 fb54 	bl	ae8a <WsfMsgSend>
}
    a7e2:	bf00      	nop
    a7e4:	3710      	adds	r7, #16
    a7e6:	46bd      	mov	sp, r7
    a7e8:	bd80      	pop	{r7, pc}

0000a7ea <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a7ea:	b580      	push	{r7, lr}
    a7ec:	b086      	sub	sp, #24
    a7ee:	af00      	add	r7, sp, #0
    a7f0:	60f8      	str	r0, [r7, #12]
    a7f2:	60b9      	str	r1, [r7, #8]
    a7f4:	4613      	mov	r3, r2
    a7f6:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
    a7f8:	68fb      	ldr	r3, [r7, #12]
    a7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a7fc:	617b      	str	r3, [r7, #20]

  if (pCmac)
    a7fe:	697b      	ldr	r3, [r7, #20]
    a800:	2b00      	cmp	r3, #0
    a802:	d01e      	beq.n	a842 <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
    a804:	68fb      	ldr	r3, [r7, #12]
    a806:	f103 0208 	add.w	r2, r3, #8
    a80a:	68bb      	ldr	r3, [r7, #8]
    a80c:	3305      	adds	r3, #5
    a80e:	4619      	mov	r1, r3
    a810:	4610      	mov	r0, r2
    a812:	f002 fd44 	bl	d29e <Calc128Cpy>

    switch (pCmac->state)
    a816:	697b      	ldr	r3, [r7, #20]
    a818:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    a81c:	2b01      	cmp	r3, #1
    a81e:	d008      	beq.n	a832 <SecCmacHciCback+0x48>
    a820:	2b02      	cmp	r3, #2
    a822:	d00a      	beq.n	a83a <SecCmacHciCback+0x50>
    a824:	2b00      	cmp	r3, #0
    a826:	d000      	beq.n	a82a <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
    a828:	e00b      	b.n	a842 <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
    a82a:	68f8      	ldr	r0, [r7, #12]
    a82c:	f7ff ff71 	bl	a712 <secCmacGenSubkey2>
      break;
    a830:	e007      	b.n	a842 <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
    a832:	68f8      	ldr	r0, [r7, #12]
    a834:	f7ff fe9a 	bl	a56c <secCmacProcessBlock>
      break;
    a838:	e003      	b.n	a842 <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
    a83a:	68f8      	ldr	r0, [r7, #12]
    a83c:	f7ff ffb1 	bl	a7a2 <secCmacComplete>
      break;
    a840:	bf00      	nop
}
    a842:	bf00      	nop
    a844:	3718      	adds	r7, #24
    a846:	46bd      	mov	sp, r7
    a848:	bd80      	pop	{r7, pc}
	...

0000a84c <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
    a84c:	b580      	push	{r7, lr}
    a84e:	b088      	sub	sp, #32
    a850:	af00      	add	r7, sp, #0
    a852:	60f8      	str	r0, [r7, #12]
    a854:	60b9      	str	r1, [r7, #8]
    a856:	4611      	mov	r1, r2
    a858:	461a      	mov	r2, r3
    a85a:	460b      	mov	r3, r1
    a85c:	71fb      	strb	r3, [r7, #7]
    a85e:	4613      	mov	r3, r2
    a860:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
    a862:	235c      	movs	r3, #92	; 0x5c
    a864:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    a866:	8bfb      	ldrh	r3, [r7, #30]
    a868:	4618      	mov	r0, r3
    a86a:	f000 faea 	bl	ae42 <WsfMsgAlloc>
    a86e:	61b8      	str	r0, [r7, #24]
    a870:	69bb      	ldr	r3, [r7, #24]
    a872:	2b00      	cmp	r3, #0
    a874:	d038      	beq.n	a8e8 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
    a876:	69bb      	ldr	r3, [r7, #24]
    a878:	3330      	adds	r3, #48	; 0x30
    a87a:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
    a87c:	69bb      	ldr	r3, [r7, #24]
    a87e:	697a      	ldr	r2, [r7, #20]
    a880:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
    a882:	69bb      	ldr	r3, [r7, #24]
    a884:	2201      	movs	r2, #1
    a886:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
    a88a:	4b1a      	ldr	r3, [pc, #104]	; (a8f4 <SecCmac+0xa8>)
    a88c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a890:	1c5a      	adds	r2, r3, #1
    a892:	b2d1      	uxtb	r1, r2
    a894:	4a17      	ldr	r2, [pc, #92]	; (a8f4 <SecCmac+0xa8>)
    a896:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a89a:	69ba      	ldr	r2, [r7, #24]
    a89c:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
    a89e:	69bb      	ldr	r3, [r7, #24]
    a8a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    a8a2:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a8a4:	69bb      	ldr	r3, [r7, #24]
    a8a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    a8aa:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
    a8ac:	697b      	ldr	r3, [r7, #20]
    a8ae:	68ba      	ldr	r2, [r7, #8]
    a8b0:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
    a8b2:	79fb      	ldrb	r3, [r7, #7]
    a8b4:	b29a      	uxth	r2, r3
    a8b6:	697b      	ldr	r3, [r7, #20]
    a8b8:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
    a8ba:	697b      	ldr	r3, [r7, #20]
    a8bc:	2200      	movs	r2, #0
    a8be:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
    a8c0:	697b      	ldr	r3, [r7, #20]
    a8c2:	79ba      	ldrb	r2, [r7, #6]
    a8c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
    a8c8:	697b      	ldr	r3, [r7, #20]
    a8ca:	2200      	movs	r2, #0
    a8cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
    a8d0:	697b      	ldr	r3, [r7, #20]
    a8d2:	3304      	adds	r3, #4
    a8d4:	2210      	movs	r2, #16
    a8d6:	68f9      	ldr	r1, [r7, #12]
    a8d8:	4618      	mov	r0, r3
    a8da:	f002 fd1b 	bl	d314 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
    a8de:	69b8      	ldr	r0, [r7, #24]
    a8e0:	f7ff febc 	bl	a65c <secCmacGenSubkey1>

    return TRUE;
    a8e4:	2301      	movs	r3, #1
    a8e6:	e000      	b.n	a8ea <SecCmac+0x9e>
  }

  return FALSE;
    a8e8:	2300      	movs	r3, #0
}
    a8ea:	4618      	mov	r0, r3
    a8ec:	3720      	adds	r7, #32
    a8ee:	46bd      	mov	sp, r7
    a8f0:	bd80      	pop	{r7, pc}
    a8f2:	bf00      	nop
    a8f4:	100028b0 	.word	0x100028b0

0000a8f8 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
    a8f8:	b480      	push	{r7}
    a8fa:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
    a8fc:	4b03      	ldr	r3, [pc, #12]	; (a90c <SecCmacInit+0x14>)
    a8fe:	4a04      	ldr	r2, [pc, #16]	; (a910 <SecCmacInit+0x18>)
    a900:	631a      	str	r2, [r3, #48]	; 0x30
}
    a902:	bf00      	nop
    a904:	46bd      	mov	sp, r7
    a906:	f85d 7b04 	ldr.w	r7, [sp], #4
    a90a:	4770      	bx	lr
    a90c:	100028b0 	.word	0x100028b0
    a910:	0000a7eb 	.word	0x0000a7eb

0000a914 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a914:	b580      	push	{r7, lr}
    a916:	b086      	sub	sp, #24
    a918:	af00      	add	r7, sp, #0
    a91a:	60f8      	str	r0, [r7, #12]
    a91c:	60b9      	str	r1, [r7, #8]
    a91e:	4613      	mov	r3, r2
    a920:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
    a922:	68fb      	ldr	r3, [r7, #12]
    a924:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
    a926:	68bb      	ldr	r3, [r7, #8]
    a928:	789b      	ldrb	r3, [r3, #2]
    a92a:	2b25      	cmp	r3, #37	; 0x25
    a92c:	d11b      	bne.n	a966 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
    a92e:	697b      	ldr	r3, [r7, #20]
    a930:	1d18      	adds	r0, r3, #4
    a932:	68bb      	ldr	r3, [r7, #8]
    a934:	3305      	adds	r3, #5
    a936:	2220      	movs	r2, #32
    a938:	4619      	mov	r1, r3
    a93a:	f002 fceb 	bl	d314 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
    a93e:	697b      	ldr	r3, [r7, #20]
    a940:	f103 0024 	add.w	r0, r3, #36	; 0x24
    a944:	68bb      	ldr	r3, [r7, #8]
    a946:	3305      	adds	r3, #5
    a948:	3320      	adds	r3, #32
    a94a:	2220      	movs	r2, #32
    a94c:	4619      	mov	r1, r3
    a94e:	f002 fce1 	bl	d314 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
    a952:	68bb      	ldr	r3, [r7, #8]
    a954:	791a      	ldrb	r2, [r3, #4]
    a956:	697b      	ldr	r3, [r7, #20]
    a958:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
    a95a:	79fb      	ldrb	r3, [r7, #7]
    a95c:	6979      	ldr	r1, [r7, #20]
    a95e:	4618      	mov	r0, r3
    a960:	f000 fa93 	bl	ae8a <WsfMsgSend>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
    a964:	e014      	b.n	a990 <SecEccHciCback+0x7c>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
    a966:	68bb      	ldr	r3, [r7, #8]
    a968:	789b      	ldrb	r3, [r3, #2]
    a96a:	2b26      	cmp	r3, #38	; 0x26
    a96c:	d110      	bne.n	a990 <SecEccHciCback+0x7c>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
    a96e:	697b      	ldr	r3, [r7, #20]
    a970:	1d18      	adds	r0, r3, #4
    a972:	68bb      	ldr	r3, [r7, #8]
    a974:	3305      	adds	r3, #5
    a976:	2220      	movs	r2, #32
    a978:	4619      	mov	r1, r3
    a97a:	f002 fccb 	bl	d314 <WStrReverseCpy>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    a97e:	68bb      	ldr	r3, [r7, #8]
    a980:	791a      	ldrb	r2, [r3, #4]
    a982:	697b      	ldr	r3, [r7, #20]
    a984:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
    a986:	79fb      	ldrb	r3, [r7, #7]
    a988:	6979      	ldr	r1, [r7, #20]
    a98a:	4618      	mov	r0, r3
    a98c:	f000 fa7d 	bl	ae8a <WsfMsgSend>
}
    a990:	bf00      	nop
    a992:	3718      	adds	r7, #24
    a994:	46bd      	mov	sp, r7
    a996:	bd80      	pop	{r7, pc}

0000a998 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b084      	sub	sp, #16
    a99c:	af00      	add	r7, sp, #0
    a99e:	4603      	mov	r3, r0
    a9a0:	71fb      	strb	r3, [r7, #7]
    a9a2:	460b      	mov	r3, r1
    a9a4:	80bb      	strh	r3, [r7, #4]
    a9a6:	4613      	mov	r3, r2
    a9a8:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
    a9aa:	2394      	movs	r3, #148	; 0x94
    a9ac:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    a9ae:	89fb      	ldrh	r3, [r7, #14]
    a9b0:	4618      	mov	r0, r3
    a9b2:	f000 fa46 	bl	ae42 <WsfMsgAlloc>
    a9b6:	60b8      	str	r0, [r7, #8]
    a9b8:	68bb      	ldr	r3, [r7, #8]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d013      	beq.n	a9e6 <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
    a9be:	68bb      	ldr	r3, [r7, #8]
    a9c0:	88ba      	ldrh	r2, [r7, #4]
    a9c2:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a9c4:	68bb      	ldr	r3, [r7, #8]
    a9c6:	79ba      	ldrb	r2, [r7, #6]
    a9c8:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
    a9ca:	68bb      	ldr	r3, [r7, #8]
    a9cc:	2202      	movs	r2, #2
    a9ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    a9d2:	79fb      	ldrb	r3, [r7, #7]
    a9d4:	68ba      	ldr	r2, [r7, #8]
    a9d6:	4619      	mov	r1, r3
    a9d8:	4805      	ldr	r0, [pc, #20]	; (a9f0 <SecEccGenKey+0x58>)
    a9da:	f000 fa6e 	bl	aeba <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
    a9de:	f7fb ff4d 	bl	687c <HciLeReadLocalP256PubKey>

    return TRUE;
    a9e2:	2301      	movs	r3, #1
    a9e4:	e000      	b.n	a9e8 <SecEccGenKey+0x50>
  }

  return FALSE;
    a9e6:	2300      	movs	r3, #0
}
    a9e8:	4618      	mov	r0, r3
    a9ea:	3710      	adds	r7, #16
    a9ec:	46bd      	mov	sp, r7
    a9ee:	bd80      	pop	{r7, pc}
    a9f0:	100028d0 	.word	0x100028d0

0000a9f4 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    a9f4:	b580      	push	{r7, lr}
    a9f6:	b094      	sub	sp, #80	; 0x50
    a9f8:	af00      	add	r7, sp, #0
    a9fa:	6078      	str	r0, [r7, #4]
    a9fc:	4608      	mov	r0, r1
    a9fe:	4611      	mov	r1, r2
    aa00:	461a      	mov	r2, r3
    aa02:	4603      	mov	r3, r0
    aa04:	70fb      	strb	r3, [r7, #3]
    aa06:	460b      	mov	r3, r1
    aa08:	803b      	strh	r3, [r7, #0]
    aa0a:	4613      	mov	r3, r2
    aa0c:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
    aa0e:	2394      	movs	r3, #148	; 0x94
    aa10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    aa14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    aa18:	4618      	mov	r0, r3
    aa1a:	f000 fa12 	bl	ae42 <WsfMsgAlloc>
    aa1e:	64b8      	str	r0, [r7, #72]	; 0x48
    aa20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa22:	2b00      	cmp	r3, #0
    aa24:	d029      	beq.n	aa7a <SecEccGenSharedSecret+0x86>
  {
    uint8_t pubKeyX[SEC_ECC_KEY_LEN];
    uint8_t pubKeyY[SEC_ECC_KEY_LEN];

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
    aa26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa28:	883a      	ldrh	r2, [r7, #0]
    aa2a:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    aa2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa2e:	78ba      	ldrb	r2, [r7, #2]
    aa30:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
    aa32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa34:	2202      	movs	r2, #2
    aa36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    aa3a:	78fb      	ldrb	r3, [r7, #3]
    aa3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    aa3e:	4619      	mov	r1, r3
    aa40:	4810      	ldr	r0, [pc, #64]	; (aa84 <SecEccGenSharedSecret+0x90>)
    aa42:	f000 fa3a 	bl	aeba <WsfMsgEnq>

    /* Reverse keys (to little endian) */
    WStrReverseCpy(pubKeyX, pKey->pubKey_x, SEC_ECC_KEY_LEN);
    aa46:	6879      	ldr	r1, [r7, #4]
    aa48:	f107 0308 	add.w	r3, r7, #8
    aa4c:	2220      	movs	r2, #32
    aa4e:	4618      	mov	r0, r3
    aa50:	f002 fc60 	bl	d314 <WStrReverseCpy>
    WStrReverseCpy(pubKeyY, pKey->pubKey_y, SEC_ECC_KEY_LEN);
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	f103 0120 	add.w	r1, r3, #32
    aa5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    aa5e:	2220      	movs	r2, #32
    aa60:	4618      	mov	r0, r3
    aa62:	f002 fc57 	bl	d314 <WStrReverseCpy>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(pubKeyX, pubKeyY);
    aa66:	f107 0228 	add.w	r2, r7, #40	; 0x28
    aa6a:	f107 0308 	add.w	r3, r7, #8
    aa6e:	4611      	mov	r1, r2
    aa70:	4618      	mov	r0, r3
    aa72:	f7fb ff16 	bl	68a2 <HciLeGenerateDHKey>

    return TRUE;
    aa76:	2301      	movs	r3, #1
    aa78:	e000      	b.n	aa7c <SecEccGenSharedSecret+0x88>
  }

  return FALSE;
    aa7a:	2300      	movs	r3, #0
}
    aa7c:	4618      	mov	r0, r3
    aa7e:	3750      	adds	r7, #80	; 0x50
    aa80:	46bd      	mov	sp, r7
    aa82:	bd80      	pop	{r7, pc}
    aa84:	100028d0 	.word	0x100028d0

0000aa88 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
    aa88:	b480      	push	{r7}
    aa8a:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
    aa8c:	4b03      	ldr	r3, [pc, #12]	; (aa9c <SecEccInit+0x14>)
    aa8e:	4a04      	ldr	r2, [pc, #16]	; (aaa0 <SecEccInit+0x18>)
    aa90:	635a      	str	r2, [r3, #52]	; 0x34
}
    aa92:	bf00      	nop
    aa94:	46bd      	mov	sp, r7
    aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa9a:	4770      	bx	lr
    aa9c:	100028b0 	.word	0x100028b0
    aaa0:	0000a915 	.word	0x0000a915

0000aaa4 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b084      	sub	sp, #16
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
    aaac:	2300      	movs	r3, #0
    aaae:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
    aab0:	2300      	movs	r3, #0
    aab2:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
    aab4:	687b      	ldr	r3, [r7, #4]
    aab6:	789b      	ldrb	r3, [r3, #2]
    aab8:	2b1c      	cmp	r3, #28
    aaba:	d10c      	bne.n	aad6 <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memcpy(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
    aabc:	2218      	movs	r2, #24
    aabe:	4922      	ldr	r1, [pc, #136]	; (ab48 <secHciCback+0xa4>)
    aac0:	4822      	ldr	r0, [pc, #136]	; (ab4c <secHciCback+0xa8>)
    aac2:	f006 fcda 	bl	1147a <memcpy>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
    aac6:	687b      	ldr	r3, [r7, #4]
    aac8:	3305      	adds	r3, #5
    aaca:	2208      	movs	r2, #8
    aacc:	4619      	mov	r1, r3
    aace:	481e      	ldr	r0, [pc, #120]	; (ab48 <secHciCback+0xa4>)
    aad0:	f006 fcd3 	bl	1147a <memcpy>
    else
    {
      WSF_TRACE_WARN0("WSF sec queue empty!");
    }
  }
}
    aad4:	e033      	b.n	ab3e <secHciCback+0x9a>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	789b      	ldrb	r3, [r3, #2]
    aada:	2b1b      	cmp	r3, #27
    aadc:	d007      	beq.n	aaee <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
    aade:	687b      	ldr	r3, [r7, #4]
    aae0:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
    aae2:	2b25      	cmp	r3, #37	; 0x25
    aae4:	d003      	beq.n	aaee <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
    aae6:	687b      	ldr	r3, [r7, #4]
    aae8:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
    aaea:	2b26      	cmp	r3, #38	; 0x26
    aaec:	d127      	bne.n	ab3e <secHciCback+0x9a>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
    aaee:	f107 030b 	add.w	r3, r7, #11
    aaf2:	4619      	mov	r1, r3
    aaf4:	4816      	ldr	r0, [pc, #88]	; (ab50 <secHciCback+0xac>)
    aaf6:	f000 f9f5 	bl	aee4 <WsfMsgDeq>
    aafa:	60f8      	str	r0, [r7, #12]
    aafc:	68fb      	ldr	r3, [r7, #12]
    aafe:	2b00      	cmp	r3, #0
    ab00:	d01a      	beq.n	ab38 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
    ab02:	68fb      	ldr	r3, [r7, #12]
    ab04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ab08:	4a0f      	ldr	r2, [pc, #60]	; (ab48 <secHciCback+0xa4>)
    ab0a:	330a      	adds	r3, #10
    ab0c:	009b      	lsls	r3, r3, #2
    ab0e:	4413      	add	r3, r2
    ab10:	685b      	ldr	r3, [r3, #4]
    ab12:	2b00      	cmp	r3, #0
    ab14:	d00c      	beq.n	ab30 <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
    ab16:	68fb      	ldr	r3, [r7, #12]
    ab18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ab1c:	4a0a      	ldr	r2, [pc, #40]	; (ab48 <secHciCback+0xa4>)
    ab1e:	330a      	adds	r3, #10
    ab20:	009b      	lsls	r3, r3, #2
    ab22:	4413      	add	r3, r2
    ab24:	685b      	ldr	r3, [r3, #4]
    ab26:	7afa      	ldrb	r2, [r7, #11]
    ab28:	6879      	ldr	r1, [r7, #4]
    ab2a:	68f8      	ldr	r0, [r7, #12]
    ab2c:	4798      	blx	r3
}
    ab2e:	e006      	b.n	ab3e <secHciCback+0x9a>
        WSF_TRACE_WARN0("WSF sec not registered");
    ab30:	4808      	ldr	r0, [pc, #32]	; (ab54 <secHciCback+0xb0>)
    ab32:	f7ff fc0d 	bl	a350 <WsfTrace>
}
    ab36:	e002      	b.n	ab3e <secHciCback+0x9a>
      WSF_TRACE_WARN0("WSF sec queue empty!");
    ab38:	4807      	ldr	r0, [pc, #28]	; (ab58 <secHciCback+0xb4>)
    ab3a:	f7ff fc09 	bl	a350 <WsfTrace>
}
    ab3e:	bf00      	nop
    ab40:	3710      	adds	r7, #16
    ab42:	46bd      	mov	sp, r7
    ab44:	bd80      	pop	{r7, pc}
    ab46:	bf00      	nop
    ab48:	100028b0 	.word	0x100028b0
    ab4c:	100028b8 	.word	0x100028b8
    ab50:	100028d0 	.word	0x100028d0
    ab54:	000118b0 	.word	0x000118b0
    ab58:	000118c8 	.word	0x000118c8

0000ab5c <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
    ab60:	4b07      	ldr	r3, [pc, #28]	; (ab80 <SecInit+0x24>)
    ab62:	2200      	movs	r2, #0
    ab64:	621a      	str	r2, [r3, #32]
    ab66:	4b06      	ldr	r3, [pc, #24]	; (ab80 <SecInit+0x24>)
    ab68:	2200      	movs	r2, #0
    ab6a:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
    ab6c:	4b04      	ldr	r3, [pc, #16]	; (ab80 <SecInit+0x24>)
    ab6e:	2200      	movs	r2, #0
    ab70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
    ab74:	4803      	ldr	r0, [pc, #12]	; (ab84 <SecInit+0x28>)
    ab76:	f001 ffeb 	bl	cb50 <HciSecRegister>
}
    ab7a:	bf00      	nop
    ab7c:	bd80      	pop	{r7, pc}
    ab7e:	bf00      	nop
    ab80:	100028b0 	.word	0x100028b0
    ab84:	0000aaa5 	.word	0x0000aaa5

0000ab88 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	b084      	sub	sp, #16
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	6078      	str	r0, [r7, #4]
    ab90:	460b      	mov	r3, r1
    ab92:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
    ab94:	78fb      	ldrb	r3, [r7, #3]
    ab96:	3307      	adds	r3, #7
    ab98:	2b00      	cmp	r3, #0
    ab9a:	da00      	bge.n	ab9e <SecRand+0x16>
    ab9c:	3307      	adds	r3, #7
    ab9e:	10db      	asrs	r3, r3, #3
    aba0:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
    aba2:	78fb      	ldrb	r3, [r7, #3]
    aba4:	461a      	mov	r2, r3
    aba6:	4909      	ldr	r1, [pc, #36]	; (abcc <SecRand+0x44>)
    aba8:	6878      	ldr	r0, [r7, #4]
    abaa:	f006 fc66 	bl	1147a <memcpy>
  
  /* get new random numbers */
  while (count--)
    abae:	e001      	b.n	abb4 <SecRand+0x2c>
  {
    HciLeRandCmd();
    abb0:	f7fb ff25 	bl	69fe <HciLeRandCmd>
  while (count--)
    abb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    abb8:	b2da      	uxtb	r2, r3
    abba:	3a01      	subs	r2, #1
    abbc:	b2d2      	uxtb	r2, r2
    abbe:	73fa      	strb	r2, [r7, #15]
    abc0:	2b00      	cmp	r3, #0
    abc2:	d1f5      	bne.n	abb0 <SecRand+0x28>
  }
}
    abc4:	bf00      	nop
    abc6:	3710      	adds	r7, #16
    abc8:	46bd      	mov	sp, r7
    abca:	bd80      	pop	{r7, pc}
    abcc:	100028b0 	.word	0x100028b0

0000abd0 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
    abd0:	b480      	push	{r7}
    abd2:	b089      	sub	sp, #36	; 0x24
    abd4:	af00      	add	r7, sp, #0
    abd6:	60b9      	str	r1, [r7, #8]
    abd8:	607b      	str	r3, [r7, #4]
    abda:	4603      	mov	r3, r0
    abdc:	81fb      	strh	r3, [r7, #14]
    abde:	4613      	mov	r3, r2
    abe0:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
    abe2:	4a4d      	ldr	r2, [pc, #308]	; (ad18 <WsfBufInit+0x148>)
    abe4:	68bb      	ldr	r3, [r7, #8]
    abe6:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
    abe8:	4b4b      	ldr	r3, [pc, #300]	; (ad18 <WsfBufInit+0x148>)
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
    abee:	7b7a      	ldrb	r2, [r7, #13]
    abf0:	4613      	mov	r3, r2
    abf2:	005b      	lsls	r3, r3, #1
    abf4:	4413      	add	r3, r2
    abf6:	009b      	lsls	r3, r3, #2
    abf8:	461a      	mov	r2, r3
    abfa:	69fb      	ldr	r3, [r7, #28]
    abfc:	4413      	add	r3, r2
    abfe:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
    ac00:	4a46      	ldr	r2, [pc, #280]	; (ad1c <WsfBufInit+0x14c>)
    ac02:	7b7b      	ldrb	r3, [r7, #13]
    ac04:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    ac06:	4b44      	ldr	r3, [pc, #272]	; (ad18 <WsfBufInit+0x148>)
    ac08:	681a      	ldr	r2, [r3, #0]
    ac0a:	89fb      	ldrh	r3, [r7, #14]
    ac0c:	08db      	lsrs	r3, r3, #3
    ac0e:	b29b      	uxth	r3, r3
    ac10:	00db      	lsls	r3, r3, #3
    ac12:	441a      	add	r2, r3
    ac14:	69bb      	ldr	r3, [r7, #24]
    ac16:	429a      	cmp	r2, r3
    ac18:	d201      	bcs.n	ac1e <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
    ac1a:	2300      	movs	r3, #0
    ac1c:	e075      	b.n	ad0a <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
    ac1e:	7b7b      	ldrb	r3, [r7, #13]
    ac20:	1e5a      	subs	r2, r3, #1
    ac22:	737a      	strb	r2, [r7, #13]
    ac24:	2b00      	cmp	r3, #0
    ac26:	d066      	beq.n	acf6 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	881b      	ldrh	r3, [r3, #0]
    ac2c:	2b07      	cmp	r3, #7
    ac2e:	d803      	bhi.n	ac38 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
    ac30:	69fb      	ldr	r3, [r7, #28]
    ac32:	2208      	movs	r2, #8
    ac34:	801a      	strh	r2, [r3, #0]
    ac36:	e014      	b.n	ac62 <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	881b      	ldrh	r3, [r3, #0]
    ac3c:	f003 0307 	and.w	r3, r3, #7
    ac40:	b29b      	uxth	r3, r3
    ac42:	2b00      	cmp	r3, #0
    ac44:	d009      	beq.n	ac5a <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	881b      	ldrh	r3, [r3, #0]
    ac4a:	f023 0307 	bic.w	r3, r3, #7
    ac4e:	b29b      	uxth	r3, r3
    ac50:	3308      	adds	r3, #8
    ac52:	b29a      	uxth	r2, r3
    ac54:	69fb      	ldr	r3, [r7, #28]
    ac56:	801a      	strh	r2, [r3, #0]
    ac58:	e003      	b.n	ac62 <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
    ac5a:	687b      	ldr	r3, [r7, #4]
    ac5c:	881a      	ldrh	r2, [r3, #0]
    ac5e:	69fb      	ldr	r3, [r7, #28]
    ac60:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
    ac62:	687b      	ldr	r3, [r7, #4]
    ac64:	789a      	ldrb	r2, [r3, #2]
    ac66:	69fb      	ldr	r3, [r7, #28]
    ac68:	709a      	strb	r2, [r3, #2]
    pDesc++;
    ac6a:	687b      	ldr	r3, [r7, #4]
    ac6c:	3304      	adds	r3, #4
    ac6e:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
    ac70:	69fb      	ldr	r3, [r7, #28]
    ac72:	69ba      	ldr	r2, [r7, #24]
    ac74:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
    ac76:	69fb      	ldr	r3, [r7, #28]
    ac78:	69ba      	ldr	r2, [r7, #24]
    ac7a:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
    ac7c:	69fb      	ldr	r3, [r7, #28]
    ac7e:	881b      	ldrh	r3, [r3, #0]
    ac80:	08db      	lsrs	r3, r3, #3
    ac82:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
    ac84:	69fb      	ldr	r3, [r7, #28]
    ac86:	789b      	ldrb	r3, [r3, #2]
    ac88:	75fb      	strb	r3, [r7, #23]
    ac8a:	e019      	b.n	acc0 <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    ac8c:	4b22      	ldr	r3, [pc, #136]	; (ad18 <WsfBufInit+0x148>)
    ac8e:	681a      	ldr	r2, [r3, #0]
    ac90:	89fb      	ldrh	r3, [r7, #14]
    ac92:	08db      	lsrs	r3, r3, #3
    ac94:	b29b      	uxth	r3, r3
    ac96:	00db      	lsls	r3, r3, #3
    ac98:	441a      	add	r2, r3
    ac9a:	69bb      	ldr	r3, [r7, #24]
    ac9c:	429a      	cmp	r2, r3
    ac9e:	d201      	bcs.n	aca4 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
    aca0:	2300      	movs	r3, #0
    aca2:	e032      	b.n	ad0a <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
    aca4:	8abb      	ldrh	r3, [r7, #20]
    aca6:	00db      	lsls	r3, r3, #3
    aca8:	69ba      	ldr	r2, [r7, #24]
    acaa:	441a      	add	r2, r3
    acac:	69bb      	ldr	r3, [r7, #24]
    acae:	601a      	str	r2, [r3, #0]
      pStart += len;
    acb0:	8abb      	ldrh	r3, [r7, #20]
    acb2:	00db      	lsls	r3, r3, #3
    acb4:	69ba      	ldr	r2, [r7, #24]
    acb6:	4413      	add	r3, r2
    acb8:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
    acba:	7dfb      	ldrb	r3, [r7, #23]
    acbc:	3b01      	subs	r3, #1
    acbe:	75fb      	strb	r3, [r7, #23]
    acc0:	7dfb      	ldrb	r3, [r7, #23]
    acc2:	2b01      	cmp	r3, #1
    acc4:	d8e2      	bhi.n	ac8c <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    acc6:	4b14      	ldr	r3, [pc, #80]	; (ad18 <WsfBufInit+0x148>)
    acc8:	681a      	ldr	r2, [r3, #0]
    acca:	89fb      	ldrh	r3, [r7, #14]
    accc:	08db      	lsrs	r3, r3, #3
    acce:	b29b      	uxth	r3, r3
    acd0:	00db      	lsls	r3, r3, #3
    acd2:	441a      	add	r2, r3
    acd4:	69bb      	ldr	r3, [r7, #24]
    acd6:	429a      	cmp	r2, r3
    acd8:	d201      	bcs.n	acde <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
    acda:	2300      	movs	r3, #0
    acdc:	e015      	b.n	ad0a <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
    acde:	69bb      	ldr	r3, [r7, #24]
    ace0:	2200      	movs	r2, #0
    ace2:	601a      	str	r2, [r3, #0]
    pStart += len;
    ace4:	8abb      	ldrh	r3, [r7, #20]
    ace6:	00db      	lsls	r3, r3, #3
    ace8:	69ba      	ldr	r2, [r7, #24]
    acea:	4413      	add	r3, r2
    acec:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
    acee:	69fb      	ldr	r3, [r7, #28]
    acf0:	330c      	adds	r3, #12
    acf2:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    acf4:	e787      	b.n	ac06 <WsfBufInit+0x36>
      break;
    acf6:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
    acf8:	69bb      	ldr	r3, [r7, #24]
    acfa:	4a07      	ldr	r2, [pc, #28]	; (ad18 <WsfBufInit+0x148>)
    acfc:	6812      	ldr	r2, [r2, #0]
    acfe:	1a9b      	subs	r3, r3, r2
    ad00:	b29a      	uxth	r2, r3
    ad02:	4b07      	ldr	r3, [pc, #28]	; (ad20 <WsfBufInit+0x150>)
    ad04:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
    ad06:	4b06      	ldr	r3, [pc, #24]	; (ad20 <WsfBufInit+0x150>)
    ad08:	881b      	ldrh	r3, [r3, #0]
}
    ad0a:	4618      	mov	r0, r3
    ad0c:	3724      	adds	r7, #36	; 0x24
    ad0e:	46bd      	mov	sp, r7
    ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad14:	4770      	bx	lr
    ad16:	bf00      	nop
    ad18:	10001ab4 	.word	0x10001ab4
    ad1c:	100028ea 	.word	0x100028ea
    ad20:	100028e8 	.word	0x100028e8

0000ad24 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b086      	sub	sp, #24
    ad28:	af00      	add	r7, sp, #0
    ad2a:	4603      	mov	r3, r0
    ad2c:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
    ad2e:	4b1a      	ldr	r3, [pc, #104]	; (ad98 <WsfBufAlloc+0x74>)
    ad30:	681b      	ldr	r3, [r3, #0]
    ad32:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    ad34:	4b19      	ldr	r3, [pc, #100]	; (ad9c <WsfBufAlloc+0x78>)
    ad36:	781b      	ldrb	r3, [r3, #0]
    ad38:	74fb      	strb	r3, [r7, #19]
    ad3a:	e020      	b.n	ad7e <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
    ad3c:	697b      	ldr	r3, [r7, #20]
    ad3e:	881b      	ldrh	r3, [r3, #0]
    ad40:	88fa      	ldrh	r2, [r7, #6]
    ad42:	429a      	cmp	r2, r3
    ad44:	d815      	bhi.n	ad72 <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    ad46:	f7ff f985 	bl	a054 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
    ad4a:	697b      	ldr	r3, [r7, #20]
    ad4c:	689b      	ldr	r3, [r3, #8]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d00d      	beq.n	ad6e <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
    ad52:	697b      	ldr	r3, [r7, #20]
    ad54:	689b      	ldr	r3, [r3, #8]
    ad56:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
    ad58:	68fb      	ldr	r3, [r7, #12]
    ad5a:	681a      	ldr	r2, [r3, #0]
    ad5c:	697b      	ldr	r3, [r7, #20]
    ad5e:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
    ad60:	68fb      	ldr	r3, [r7, #12]
    ad62:	2200      	movs	r2, #0
    ad64:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
    ad66:	f7ff f989 	bl	a07c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
    ad6a:	68fb      	ldr	r3, [r7, #12]
    ad6c:	e010      	b.n	ad90 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
    ad6e:	f7ff f985 	bl	a07c <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    ad72:	7cfb      	ldrb	r3, [r7, #19]
    ad74:	3b01      	subs	r3, #1
    ad76:	74fb      	strb	r3, [r7, #19]
    ad78:	697b      	ldr	r3, [r7, #20]
    ad7a:	330c      	adds	r3, #12
    ad7c:	617b      	str	r3, [r7, #20]
    ad7e:	7cfb      	ldrb	r3, [r7, #19]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d1db      	bne.n	ad3c <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
    ad84:	88fb      	ldrh	r3, [r7, #6]
    ad86:	4619      	mov	r1, r3
    ad88:	4805      	ldr	r0, [pc, #20]	; (ada0 <WsfBufAlloc+0x7c>)
    ad8a:	f7ff fae1 	bl	a350 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
    ad8e:	2300      	movs	r3, #0
}
    ad90:	4618      	mov	r0, r3
    ad92:	3718      	adds	r7, #24
    ad94:	46bd      	mov	sp, r7
    ad96:	bd80      	pop	{r7, pc}
    ad98:	10001ab4 	.word	0x10001ab4
    ad9c:	100028ea 	.word	0x100028ea
    ada0:	000118e0 	.word	0x000118e0

0000ada4 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
    ada4:	b580      	push	{r7, lr}
    ada6:	b084      	sub	sp, #16
    ada8:	af00      	add	r7, sp, #0
    adaa:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
    adac:	687b      	ldr	r3, [r7, #4]
    adae:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
    adb0:	4b16      	ldr	r3, [pc, #88]	; (ae0c <WsfBufFree+0x68>)
    adb2:	681a      	ldr	r2, [r3, #0]
    adb4:	4b16      	ldr	r3, [pc, #88]	; (ae10 <WsfBufFree+0x6c>)
    adb6:	781b      	ldrb	r3, [r3, #0]
    adb8:	4619      	mov	r1, r3
    adba:	460b      	mov	r3, r1
    adbc:	005b      	lsls	r3, r3, #1
    adbe:	440b      	add	r3, r1
    adc0:	009b      	lsls	r3, r3, #2
    adc2:	3b0c      	subs	r3, #12
    adc4:	4413      	add	r3, r2
    adc6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    adc8:	e016      	b.n	adf8 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
    adca:	68fb      	ldr	r3, [r7, #12]
    adcc:	685a      	ldr	r2, [r3, #4]
    adce:	68bb      	ldr	r3, [r7, #8]
    add0:	429a      	cmp	r2, r3
    add2:	d80e      	bhi.n	adf2 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    add4:	f7ff f93e 	bl	a054 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
    add8:	68bb      	ldr	r3, [r7, #8]
    adda:	4a0e      	ldr	r2, [pc, #56]	; (ae14 <WsfBufFree+0x70>)
    addc:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
    adde:	68fb      	ldr	r3, [r7, #12]
    ade0:	689a      	ldr	r2, [r3, #8]
    ade2:	68bb      	ldr	r3, [r7, #8]
    ade4:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
    ade6:	68fb      	ldr	r3, [r7, #12]
    ade8:	68ba      	ldr	r2, [r7, #8]
    adea:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
    adec:	f7ff f946 	bl	a07c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
    adf0:	e008      	b.n	ae04 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
    adf2:	68fb      	ldr	r3, [r7, #12]
    adf4:	3b0c      	subs	r3, #12
    adf6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    adf8:	4b04      	ldr	r3, [pc, #16]	; (ae0c <WsfBufFree+0x68>)
    adfa:	681b      	ldr	r3, [r3, #0]
    adfc:	68fa      	ldr	r2, [r7, #12]
    adfe:	429a      	cmp	r2, r3
    ae00:	d2e3      	bcs.n	adca <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
    ae02:	bf00      	nop
}
    ae04:	3710      	adds	r7, #16
    ae06:	46bd      	mov	sp, r7
    ae08:	bd80      	pop	{r7, pc}
    ae0a:	bf00      	nop
    ae0c:	10001ab4 	.word	0x10001ab4
    ae10:	100028ea 	.word	0x100028ea
    ae14:	faabd00d 	.word	0xfaabd00d

0000ae18 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
    ae18:	b580      	push	{r7, lr}
    ae1a:	b082      	sub	sp, #8
    ae1c:	af00      	add	r7, sp, #0
    ae1e:	4603      	mov	r3, r0
    ae20:	460a      	mov	r2, r1
    ae22:	80fb      	strh	r3, [r7, #6]
    ae24:	4613      	mov	r3, r2
    ae26:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
    ae28:	797b      	ldrb	r3, [r7, #5]
    ae2a:	b29a      	uxth	r2, r3
    ae2c:	88fb      	ldrh	r3, [r7, #6]
    ae2e:	4413      	add	r3, r2
    ae30:	b29b      	uxth	r3, r3
    ae32:	4618      	mov	r0, r3
    ae34:	f000 f805 	bl	ae42 <WsfMsgAlloc>
    ae38:	4603      	mov	r3, r0
}
    ae3a:	4618      	mov	r0, r3
    ae3c:	3708      	adds	r7, #8
    ae3e:	46bd      	mov	sp, r7
    ae40:	bd80      	pop	{r7, pc}

0000ae42 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
    ae42:	b580      	push	{r7, lr}
    ae44:	b084      	sub	sp, #16
    ae46:	af00      	add	r7, sp, #0
    ae48:	4603      	mov	r3, r0
    ae4a:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    ae4c:	88fb      	ldrh	r3, [r7, #6]
    ae4e:	3308      	adds	r3, #8
    ae50:	b29b      	uxth	r3, r3
    ae52:	4618      	mov	r0, r3
    ae54:	f7ff ff66 	bl	ad24 <WsfBufAlloc>
    ae58:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
    ae5a:	68fb      	ldr	r3, [r7, #12]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d002      	beq.n	ae66 <WsfMsgAlloc+0x24>
  {
    pMsg++;
    ae60:	68fb      	ldr	r3, [r7, #12]
    ae62:	3308      	adds	r3, #8
    ae64:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
    ae66:	68fb      	ldr	r3, [r7, #12]
}
    ae68:	4618      	mov	r0, r3
    ae6a:	3710      	adds	r7, #16
    ae6c:	46bd      	mov	sp, r7
    ae6e:	bd80      	pop	{r7, pc}

0000ae70 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
    ae70:	b580      	push	{r7, lr}
    ae72:	b082      	sub	sp, #8
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	3b08      	subs	r3, #8
    ae7c:	4618      	mov	r0, r3
    ae7e:	f7ff ff91 	bl	ada4 <WsfBufFree>
}
    ae82:	bf00      	nop
    ae84:	3708      	adds	r7, #8
    ae86:	46bd      	mov	sp, r7
    ae88:	bd80      	pop	{r7, pc}

0000ae8a <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
    ae8a:	b580      	push	{r7, lr}
    ae8c:	b082      	sub	sp, #8
    ae8e:	af00      	add	r7, sp, #0
    ae90:	4603      	mov	r3, r0
    ae92:	6039      	str	r1, [r7, #0]
    ae94:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
    ae96:	79fb      	ldrb	r3, [r7, #7]
    ae98:	4618      	mov	r0, r3
    ae9a:	f7ff f965 	bl	a168 <WsfTaskMsgQueue>
    ae9e:	79fb      	ldrb	r3, [r7, #7]
    aea0:	683a      	ldr	r2, [r7, #0]
    aea2:	4619      	mov	r1, r3
    aea4:	f000 f809 	bl	aeba <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
    aea8:	79fb      	ldrb	r3, [r7, #7]
    aeaa:	2101      	movs	r1, #1
    aeac:	4618      	mov	r0, r3
    aeae:	f7ff f93d 	bl	a12c <WsfTaskSetReady>
}
    aeb2:	bf00      	nop
    aeb4:	3708      	adds	r7, #8
    aeb6:	46bd      	mov	sp, r7
    aeb8:	bd80      	pop	{r7, pc}

0000aeba <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
    aeba:	b580      	push	{r7, lr}
    aebc:	b086      	sub	sp, #24
    aebe:	af00      	add	r7, sp, #0
    aec0:	60f8      	str	r0, [r7, #12]
    aec2:	460b      	mov	r3, r1
    aec4:	607a      	str	r2, [r7, #4]
    aec6:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
    aec8:	687b      	ldr	r3, [r7, #4]
    aeca:	3b08      	subs	r3, #8
    aecc:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
    aece:	697b      	ldr	r3, [r7, #20]
    aed0:	7afa      	ldrb	r2, [r7, #11]
    aed2:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
    aed4:	6979      	ldr	r1, [r7, #20]
    aed6:	68f8      	ldr	r0, [r7, #12]
    aed8:	f000 f81c 	bl	af14 <WsfQueueEnq>
}
    aedc:	bf00      	nop
    aede:	3718      	adds	r7, #24
    aee0:	46bd      	mov	sp, r7
    aee2:	bd80      	pop	{r7, pc}

0000aee4 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b084      	sub	sp, #16
    aee8:	af00      	add	r7, sp, #0
    aeea:	6078      	str	r0, [r7, #4]
    aeec:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
    aeee:	6878      	ldr	r0, [r7, #4]
    aef0:	f000 f832 	bl	af58 <WsfQueueDeq>
    aef4:	60f8      	str	r0, [r7, #12]
    aef6:	68fb      	ldr	r3, [r7, #12]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d006      	beq.n	af0a <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
    aefc:	68fb      	ldr	r3, [r7, #12]
    aefe:	791a      	ldrb	r2, [r3, #4]
    af00:	683b      	ldr	r3, [r7, #0]
    af02:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
    af04:	68fb      	ldr	r3, [r7, #12]
    af06:	3308      	adds	r3, #8
    af08:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
    af0a:	68fb      	ldr	r3, [r7, #12]
}
    af0c:	4618      	mov	r0, r3
    af0e:	3710      	adds	r7, #16
    af10:	46bd      	mov	sp, r7
    af12:	bd80      	pop	{r7, pc}

0000af14 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
    af14:	b580      	push	{r7, lr}
    af16:	b082      	sub	sp, #8
    af18:	af00      	add	r7, sp, #0
    af1a:	6078      	str	r0, [r7, #4]
    af1c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
    af1e:	683b      	ldr	r3, [r7, #0]
    af20:	2200      	movs	r2, #0
    af22:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af24:	f7ff f896 	bl	a054 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
    af28:	687b      	ldr	r3, [r7, #4]
    af2a:	681b      	ldr	r3, [r3, #0]
    af2c:	2b00      	cmp	r3, #0
    af2e:	d106      	bne.n	af3e <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	683a      	ldr	r2, [r7, #0]
    af34:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	683a      	ldr	r2, [r7, #0]
    af3a:	605a      	str	r2, [r3, #4]
    af3c:	e006      	b.n	af4c <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    af3e:	687b      	ldr	r3, [r7, #4]
    af40:	685b      	ldr	r3, [r3, #4]
    af42:	683a      	ldr	r2, [r7, #0]
    af44:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    af46:	687b      	ldr	r3, [r7, #4]
    af48:	683a      	ldr	r2, [r7, #0]
    af4a:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    af4c:	f7ff f896 	bl	a07c <WsfCsExit>
}
    af50:	bf00      	nop
    af52:	3708      	adds	r7, #8
    af54:	46bd      	mov	sp, r7
    af56:	bd80      	pop	{r7, pc}

0000af58 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
    af58:	b580      	push	{r7, lr}
    af5a:	b084      	sub	sp, #16
    af5c:	af00      	add	r7, sp, #0
    af5e:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af60:	f7ff f878 	bl	a054 <WsfCsEnter>

  pElem = pQueue->pHead;
    af64:	687b      	ldr	r3, [r7, #4]
    af66:	681b      	ldr	r3, [r3, #0]
    af68:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
    af6a:	68fb      	ldr	r3, [r7, #12]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d00a      	beq.n	af86 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    af70:	68fb      	ldr	r3, [r7, #12]
    af72:	681a      	ldr	r2, [r3, #0]
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	681b      	ldr	r3, [r3, #0]
    af7c:	2b00      	cmp	r3, #0
    af7e:	d102      	bne.n	af86 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
    af80:	687b      	ldr	r3, [r7, #4]
    af82:	2200      	movs	r2, #0
    af84:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    af86:	f7ff f879 	bl	a07c <WsfCsExit>

  return pElem;
    af8a:	68fb      	ldr	r3, [r7, #12]
}
    af8c:	4618      	mov	r0, r3
    af8e:	3710      	adds	r7, #16
    af90:	46bd      	mov	sp, r7
    af92:	bd80      	pop	{r7, pc}

0000af94 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
    af94:	b580      	push	{r7, lr}
    af96:	b082      	sub	sp, #8
    af98:	af00      	add	r7, sp, #0
    af9a:	6078      	str	r0, [r7, #4]
    af9c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af9e:	f7ff f859 	bl	a054 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
    afa2:	687b      	ldr	r3, [r7, #4]
    afa4:	681a      	ldr	r2, [r3, #0]
    afa6:	683b      	ldr	r3, [r7, #0]
    afa8:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
    afaa:	687b      	ldr	r3, [r7, #4]
    afac:	681b      	ldr	r3, [r3, #0]
    afae:	2b00      	cmp	r3, #0
    afb0:	d102      	bne.n	afb8 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
    afb2:	687b      	ldr	r3, [r7, #4]
    afb4:	683a      	ldr	r2, [r7, #0]
    afb6:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
    afb8:	687b      	ldr	r3, [r7, #4]
    afba:	683a      	ldr	r2, [r7, #0]
    afbc:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    afbe:	f7ff f85d 	bl	a07c <WsfCsExit>
}
    afc2:	bf00      	nop
    afc4:	3708      	adds	r7, #8
    afc6:	46bd      	mov	sp, r7
    afc8:	bd80      	pop	{r7, pc}

0000afca <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    afca:	b580      	push	{r7, lr}
    afcc:	b084      	sub	sp, #16
    afce:	af00      	add	r7, sp, #0
    afd0:	60f8      	str	r0, [r7, #12]
    afd2:	60b9      	str	r1, [r7, #8]
    afd4:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    afd6:	f7ff f83d 	bl	a054 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
    afda:	68fb      	ldr	r3, [r7, #12]
    afdc:	681b      	ldr	r3, [r3, #0]
    afde:	2b00      	cmp	r3, #0
    afe0:	d004      	beq.n	afec <WsfQueueInsert+0x22>
    afe2:	68fb      	ldr	r3, [r7, #12]
    afe4:	685a      	ldr	r2, [r3, #4]
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	429a      	cmp	r2, r3
    afea:	d104      	bne.n	aff6 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
    afec:	68b9      	ldr	r1, [r7, #8]
    afee:	68f8      	ldr	r0, [r7, #12]
    aff0:	f7ff ff90 	bl	af14 <WsfQueueEnq>
    aff4:	e00e      	b.n	b014 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
    aff6:	687b      	ldr	r3, [r7, #4]
    aff8:	2b00      	cmp	r3, #0
    affa:	d104      	bne.n	b006 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
    affc:	68b9      	ldr	r1, [r7, #8]
    affe:	68f8      	ldr	r0, [r7, #12]
    b000:	f7ff ffc8 	bl	af94 <WsfQueuePush>
    b004:	e006      	b.n	b014 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
    b006:	687b      	ldr	r3, [r7, #4]
    b008:	681a      	ldr	r2, [r3, #0]
    b00a:	68bb      	ldr	r3, [r7, #8]
    b00c:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
    b00e:	687b      	ldr	r3, [r7, #4]
    b010:	68ba      	ldr	r2, [r7, #8]
    b012:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b014:	f7ff f832 	bl	a07c <WsfCsExit>
}
    b018:	bf00      	nop
    b01a:	3710      	adds	r7, #16
    b01c:	46bd      	mov	sp, r7
    b01e:	bd80      	pop	{r7, pc}

0000b020 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    b020:	b580      	push	{r7, lr}
    b022:	b084      	sub	sp, #16
    b024:	af00      	add	r7, sp, #0
    b026:	60f8      	str	r0, [r7, #12]
    b028:	60b9      	str	r1, [r7, #8]
    b02a:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b02c:	f7ff f812 	bl	a054 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
    b030:	68fb      	ldr	r3, [r7, #12]
    b032:	681a      	ldr	r2, [r3, #0]
    b034:	68bb      	ldr	r3, [r7, #8]
    b036:	429a      	cmp	r2, r3
    b038:	d104      	bne.n	b044 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    b03a:	68bb      	ldr	r3, [r7, #8]
    b03c:	681a      	ldr	r2, [r3, #0]
    b03e:	68fb      	ldr	r3, [r7, #12]
    b040:	601a      	str	r2, [r3, #0]
    b042:	e006      	b.n	b052 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
    b044:	687b      	ldr	r3, [r7, #4]
    b046:	2b00      	cmp	r3, #0
    b048:	d003      	beq.n	b052 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
    b04a:	68bb      	ldr	r3, [r7, #8]
    b04c:	681a      	ldr	r2, [r3, #0]
    b04e:	687b      	ldr	r3, [r7, #4]
    b050:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
    b052:	68fb      	ldr	r3, [r7, #12]
    b054:	685a      	ldr	r2, [r3, #4]
    b056:	68bb      	ldr	r3, [r7, #8]
    b058:	429a      	cmp	r2, r3
    b05a:	d102      	bne.n	b062 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
    b05c:	68fb      	ldr	r3, [r7, #12]
    b05e:	687a      	ldr	r2, [r7, #4]
    b060:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b062:	f7ff f80b 	bl	a07c <WsfCsExit>
}
    b066:	bf00      	nop
    b068:	3710      	adds	r7, #16
    b06a:	46bd      	mov	sp, r7
    b06c:	bd80      	pop	{r7, pc}

0000b06e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
    b06e:	b580      	push	{r7, lr}
    b070:	b084      	sub	sp, #16
    b072:	af00      	add	r7, sp, #0
    b074:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
    b076:	2300      	movs	r3, #0
    b078:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b07a:	f7fe ffeb 	bl	a054 <WsfCsEnter>

  pElem = pQueue->pHead;
    b07e:	687b      	ldr	r3, [r7, #4]
    b080:	681b      	ldr	r3, [r3, #0]
    b082:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
    b084:	e005      	b.n	b092 <WsfQueueCount+0x24>
  {
    count++;
    b086:	897b      	ldrh	r3, [r7, #10]
    b088:	3301      	adds	r3, #1
    b08a:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
    b08c:	68fb      	ldr	r3, [r7, #12]
    b08e:	681b      	ldr	r3, [r3, #0]
    b090:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b092:	68fb      	ldr	r3, [r7, #12]
    b094:	2b00      	cmp	r3, #0
    b096:	d1f6      	bne.n	b086 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b098:	f7fe fff0 	bl	a07c <WsfCsExit>

  return count;
    b09c:	897b      	ldrh	r3, [r7, #10]
}
    b09e:	4618      	mov	r0, r3
    b0a0:	3710      	adds	r7, #16
    b0a2:	46bd      	mov	sp, r7
    b0a4:	bd80      	pop	{r7, pc}

0000b0a6 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
    b0a6:	b580      	push	{r7, lr}
    b0a8:	b084      	sub	sp, #16
    b0aa:	af00      	add	r7, sp, #0
    b0ac:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b0ae:	f7fe ffd1 	bl	a054 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	bf0c      	ite	eq
    b0ba:	2301      	moveq	r3, #1
    b0bc:	2300      	movne	r3, #0
    b0be:	b2db      	uxtb	r3, r3
    b0c0:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b0c2:	f7fe ffdb 	bl	a07c <WsfCsExit>

  return empty;
    b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
    b0c8:	4618      	mov	r0, r3
    b0ca:	3710      	adds	r7, #16
    b0cc:	46bd      	mov	sp, r7
    b0ce:	bd80      	pop	{r7, pc}

0000b0d0 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b084      	sub	sp, #16
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b0d8:	2300      	movs	r3, #0
    b0da:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b0dc:	4b10      	ldr	r3, [pc, #64]	; (b120 <wsfTimerRemove+0x50>)
    b0de:	681b      	ldr	r3, [r3, #0]
    b0e0:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
    b0e2:	e008      	b.n	b0f6 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
    b0e4:	68fa      	ldr	r2, [r7, #12]
    b0e6:	687b      	ldr	r3, [r7, #4]
    b0e8:	429a      	cmp	r2, r3
    b0ea:	d008      	beq.n	b0fe <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
    b0ec:	68fb      	ldr	r3, [r7, #12]
    b0ee:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
    b0f0:	68fb      	ldr	r3, [r7, #12]
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b0f6:	68fb      	ldr	r3, [r7, #12]
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d1f3      	bne.n	b0e4 <wsfTimerRemove+0x14>
    b0fc:	e000      	b.n	b100 <wsfTimerRemove+0x30>
      break;
    b0fe:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
    b100:	68fb      	ldr	r3, [r7, #12]
    b102:	2b00      	cmp	r3, #0
    b104:	d007      	beq.n	b116 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    b106:	68ba      	ldr	r2, [r7, #8]
    b108:	6879      	ldr	r1, [r7, #4]
    b10a:	4805      	ldr	r0, [pc, #20]	; (b120 <wsfTimerRemove+0x50>)
    b10c:	f7ff ff88 	bl	b020 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	2200      	movs	r2, #0
    b114:	725a      	strb	r2, [r3, #9]
  }
}
    b116:	bf00      	nop
    b118:	3710      	adds	r7, #16
    b11a:	46bd      	mov	sp, r7
    b11c:	bd80      	pop	{r7, pc}
    b11e:	bf00      	nop
    b120:	100028ec 	.word	0x100028ec

0000b124 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
    b124:	b580      	push	{r7, lr}
    b126:	b084      	sub	sp, #16
    b128:	af00      	add	r7, sp, #0
    b12a:	6078      	str	r0, [r7, #4]
    b12c:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b12e:	2300      	movs	r3, #0
    b130:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
    b132:	f7fe ffb7 	bl	a0a4 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
    b136:	687b      	ldr	r3, [r7, #4]
    b138:	7a5b      	ldrb	r3, [r3, #9]
    b13a:	2b00      	cmp	r3, #0
    b13c:	d002      	beq.n	b144 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
    b13e:	6878      	ldr	r0, [r7, #4]
    b140:	f7ff ffc6 	bl	b0d0 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
    b144:	687b      	ldr	r3, [r7, #4]
    b146:	2201      	movs	r2, #1
    b148:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
    b14a:	687b      	ldr	r3, [r7, #4]
    b14c:	683a      	ldr	r2, [r7, #0]
    b14e:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b150:	4b0f      	ldr	r3, [pc, #60]	; (b190 <wsfTimerInsert+0x6c>)
    b152:	681b      	ldr	r3, [r3, #0]
    b154:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
    b156:	e00a      	b.n	b16e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
    b158:	687b      	ldr	r3, [r7, #4]
    b15a:	685a      	ldr	r2, [r3, #4]
    b15c:	68fb      	ldr	r3, [r7, #12]
    b15e:	685b      	ldr	r3, [r3, #4]
    b160:	429a      	cmp	r2, r3
    b162:	d308      	bcc.n	b176 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
    b164:	68fb      	ldr	r3, [r7, #12]
    b166:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
    b168:	68fb      	ldr	r3, [r7, #12]
    b16a:	681b      	ldr	r3, [r3, #0]
    b16c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b16e:	68fb      	ldr	r3, [r7, #12]
    b170:	2b00      	cmp	r3, #0
    b172:	d1f1      	bne.n	b158 <wsfTimerInsert+0x34>
    b174:	e000      	b.n	b178 <wsfTimerInsert+0x54>
      break;
    b176:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
    b178:	68ba      	ldr	r2, [r7, #8]
    b17a:	6879      	ldr	r1, [r7, #4]
    b17c:	4804      	ldr	r0, [pc, #16]	; (b190 <wsfTimerInsert+0x6c>)
    b17e:	f7ff ff24 	bl	afca <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
    b182:	f7fe ff95 	bl	a0b0 <WsfTaskUnlock>
}
    b186:	bf00      	nop
    b188:	3710      	adds	r7, #16
    b18a:	46bd      	mov	sp, r7
    b18c:	bd80      	pop	{r7, pc}
    b18e:	bf00      	nop
    b190:	100028ec 	.word	0x100028ec

0000b194 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
    b194:	b480      	push	{r7}
    b196:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
    b198:	4b05      	ldr	r3, [pc, #20]	; (b1b0 <WsfTimerInit+0x1c>)
    b19a:	2200      	movs	r2, #0
    b19c:	601a      	str	r2, [r3, #0]
    b19e:	4b04      	ldr	r3, [pc, #16]	; (b1b0 <WsfTimerInit+0x1c>)
    b1a0:	2200      	movs	r2, #0
    b1a2:	605a      	str	r2, [r3, #4]
}
    b1a4:	bf00      	nop
    b1a6:	46bd      	mov	sp, r7
    b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ac:	4770      	bx	lr
    b1ae:	bf00      	nop
    b1b0:	100028ec 	.word	0x100028ec

0000b1b4 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
    b1b4:	b580      	push	{r7, lr}
    b1b6:	b082      	sub	sp, #8
    b1b8:	af00      	add	r7, sp, #0
    b1ba:	6078      	str	r0, [r7, #4]
    b1bc:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
    b1be:	683b      	ldr	r3, [r7, #0]
    b1c0:	2264      	movs	r2, #100	; 0x64
    b1c2:	fb02 f303 	mul.w	r3, r2, r3
    b1c6:	4619      	mov	r1, r3
    b1c8:	6878      	ldr	r0, [r7, #4]
    b1ca:	f7ff ffab 	bl	b124 <wsfTimerInsert>
}
    b1ce:	bf00      	nop
    b1d0:	3708      	adds	r7, #8
    b1d2:	46bd      	mov	sp, r7
    b1d4:	bd80      	pop	{r7, pc}
	...

0000b1d8 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
    b1d8:	b580      	push	{r7, lr}
    b1da:	b082      	sub	sp, #8
    b1dc:	af00      	add	r7, sp, #0
    b1de:	6078      	str	r0, [r7, #4]
    b1e0:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    b1e2:	683b      	ldr	r3, [r7, #0]
    b1e4:	4a05      	ldr	r2, [pc, #20]	; (b1fc <WsfTimerStartMs+0x24>)
    b1e6:	fba2 2303 	umull	r2, r3, r2, r3
    b1ea:	08db      	lsrs	r3, r3, #3
    b1ec:	4619      	mov	r1, r3
    b1ee:	6878      	ldr	r0, [r7, #4]
    b1f0:	f7ff ff98 	bl	b124 <wsfTimerInsert>
}
    b1f4:	bf00      	nop
    b1f6:	3708      	adds	r7, #8
    b1f8:	46bd      	mov	sp, r7
    b1fa:	bd80      	pop	{r7, pc}
    b1fc:	cccccccd 	.word	0xcccccccd

0000b200 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
    b200:	b580      	push	{r7, lr}
    b202:	b082      	sub	sp, #8
    b204:	af00      	add	r7, sp, #0
    b206:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
    b208:	f7fe ff4c 	bl	a0a4 <WsfTaskLock>

  wsfTimerRemove(pTimer);
    b20c:	6878      	ldr	r0, [r7, #4]
    b20e:	f7ff ff5f 	bl	b0d0 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
    b212:	f7fe ff4d 	bl	a0b0 <WsfTaskUnlock>
}
    b216:	bf00      	nop
    b218:	3708      	adds	r7, #8
    b21a:	46bd      	mov	sp, r7
    b21c:	bd80      	pop	{r7, pc}
	...

0000b220 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
    b220:	b580      	push	{r7, lr}
    b222:	b084      	sub	sp, #16
    b224:	af00      	add	r7, sp, #0
    b226:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
    b228:	f7fe ff3c 	bl	a0a4 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b22c:	4b12      	ldr	r3, [pc, #72]	; (b278 <WsfTimerUpdate+0x58>)
    b22e:	681b      	ldr	r3, [r3, #0]
    b230:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
    b232:	e017      	b.n	b264 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
    b234:	68fb      	ldr	r3, [r7, #12]
    b236:	685a      	ldr	r2, [r3, #4]
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	429a      	cmp	r2, r3
    b23c:	d906      	bls.n	b24c <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
    b23e:	68fb      	ldr	r3, [r7, #12]
    b240:	685a      	ldr	r2, [r3, #4]
    b242:	687b      	ldr	r3, [r7, #4]
    b244:	1ad2      	subs	r2, r2, r3
    b246:	68fb      	ldr	r3, [r7, #12]
    b248:	605a      	str	r2, [r3, #4]
    b24a:	e008      	b.n	b25e <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
    b24c:	68fb      	ldr	r3, [r7, #12]
    b24e:	2200      	movs	r2, #0
    b250:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
    b252:	68fb      	ldr	r3, [r7, #12]
    b254:	7a1b      	ldrb	r3, [r3, #8]
    b256:	2102      	movs	r1, #2
    b258:	4618      	mov	r0, r3
    b25a:	f7fe ff67 	bl	a12c <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
    b25e:	68fb      	ldr	r3, [r7, #12]
    b260:	681b      	ldr	r3, [r3, #0]
    b262:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b264:	68fb      	ldr	r3, [r7, #12]
    b266:	2b00      	cmp	r3, #0
    b268:	d1e4      	bne.n	b234 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b26a:	f7fe ff21 	bl	a0b0 <WsfTaskUnlock>
}
    b26e:	bf00      	nop
    b270:	3710      	adds	r7, #16
    b272:	46bd      	mov	sp, r7
    b274:	bd80      	pop	{r7, pc}
    b276:	bf00      	nop
    b278:	100028ec 	.word	0x100028ec

0000b27c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b084      	sub	sp, #16
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
    b284:	f7fe ff0e 	bl	a0a4 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
    b288:	4b0b      	ldr	r3, [pc, #44]	; (b2b8 <WsfTimerNextExpiration+0x3c>)
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	2b00      	cmp	r3, #0
    b28e:	d105      	bne.n	b29c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	2200      	movs	r2, #0
    b294:	701a      	strb	r2, [r3, #0]
    ticks = 0;
    b296:	2300      	movs	r3, #0
    b298:	60fb      	str	r3, [r7, #12]
    b29a:	e006      	b.n	b2aa <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	2201      	movs	r2, #1
    b2a0:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
    b2a2:	4b05      	ldr	r3, [pc, #20]	; (b2b8 <WsfTimerNextExpiration+0x3c>)
    b2a4:	681b      	ldr	r3, [r3, #0]
    b2a6:	685b      	ldr	r3, [r3, #4]
    b2a8:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b2aa:	f7fe ff01 	bl	a0b0 <WsfTaskUnlock>

  return ticks;
    b2ae:	68fb      	ldr	r3, [r7, #12]
}
    b2b0:	4618      	mov	r0, r3
    b2b2:	3710      	adds	r7, #16
    b2b4:	46bd      	mov	sp, r7
    b2b6:	bd80      	pop	{r7, pc}
    b2b8:	100028ec 	.word	0x100028ec

0000b2bc <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
    b2bc:	b580      	push	{r7, lr}
    b2be:	b084      	sub	sp, #16
    b2c0:	af00      	add	r7, sp, #0
    b2c2:	4603      	mov	r3, r0
    b2c4:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b2c6:	2300      	movs	r3, #0
    b2c8:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
    b2ca:	f7fe feeb 	bl	a0a4 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    b2ce:	4b0e      	ldr	r3, [pc, #56]	; (b308 <WsfTimerServiceExpired+0x4c>)
    b2d0:	681b      	ldr	r3, [r3, #0]
    b2d2:	60bb      	str	r3, [r7, #8]
    b2d4:	68bb      	ldr	r3, [r7, #8]
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	d00f      	beq.n	b2fa <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
    b2da:	68bb      	ldr	r3, [r7, #8]
    b2dc:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d10b      	bne.n	b2fa <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
    b2e2:	68fa      	ldr	r2, [r7, #12]
    b2e4:	68b9      	ldr	r1, [r7, #8]
    b2e6:	4808      	ldr	r0, [pc, #32]	; (b308 <WsfTimerServiceExpired+0x4c>)
    b2e8:	f7ff fe9a 	bl	b020 <WsfQueueRemove>

    pElem->isStarted = FALSE;
    b2ec:	68bb      	ldr	r3, [r7, #8]
    b2ee:	2200      	movs	r2, #0
    b2f0:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
    b2f2:	f7fe fedd 	bl	a0b0 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
    b2f6:	68bb      	ldr	r3, [r7, #8]
    b2f8:	e002      	b.n	b300 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b2fa:	f7fe fed9 	bl	a0b0 <WsfTaskUnlock>

  return NULL;
    b2fe:	2300      	movs	r3, #0
}
    b300:	4618      	mov	r0, r3
    b302:	3710      	adds	r7, #16
    b304:	46bd      	mov	sp, r7
    b306:	bd80      	pop	{r7, pc}
    b308:	100028ec 	.word	0x100028ec

0000b30c <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
    b30c:	b590      	push	{r4, r7, lr}
    b30e:	b085      	sub	sp, #20
    b310:	af00      	add	r7, sp, #0
    b312:	6078      	str	r0, [r7, #4]
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    b314:	687b      	ldr	r3, [r7, #4]
    b316:	681b      	ldr	r3, [r3, #0]
    b318:	2b31      	cmp	r3, #49	; 0x31
    b31a:	d866      	bhi.n	b3ea <am_devices_button_init+0xde>
    b31c:	f003 fc92 	bl	ec44 <am_hal_interrupt_master_disable>
    b320:	4603      	mov	r3, r0
    b322:	60fb      	str	r3, [r7, #12]
    b324:	4b37      	ldr	r3, [pc, #220]	; (b404 <am_devices_button_init+0xf8>)
    b326:	2273      	movs	r2, #115	; 0x73
    b328:	601a      	str	r2, [r3, #0]
    b32a:	687b      	ldr	r3, [r7, #4]
    b32c:	681b      	ldr	r3, [r3, #0]
    b32e:	085b      	lsrs	r3, r3, #1
    b330:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b334:	4b34      	ldr	r3, [pc, #208]	; (b408 <am_devices_button_init+0xfc>)
    b336:	4413      	add	r3, r2
    b338:	4618      	mov	r0, r3
    b33a:	687b      	ldr	r3, [r7, #4]
    b33c:	681b      	ldr	r3, [r3, #0]
    b33e:	085b      	lsrs	r3, r3, #1
    b340:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b344:	4b30      	ldr	r3, [pc, #192]	; (b408 <am_devices_button_init+0xfc>)
    b346:	4413      	add	r3, r2
    b348:	681a      	ldr	r2, [r3, #0]
    b34a:	687b      	ldr	r3, [r7, #4]
    b34c:	681b      	ldr	r3, [r3, #0]
    b34e:	009b      	lsls	r3, r3, #2
    b350:	f003 031c 	and.w	r3, r3, #28
    b354:	2107      	movs	r1, #7
    b356:	fa01 f303 	lsl.w	r3, r1, r3
    b35a:	43db      	mvns	r3, r3
    b35c:	4013      	ands	r3, r2
    b35e:	6003      	str	r3, [r0, #0]
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	681b      	ldr	r3, [r3, #0]
    b364:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b36c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b370:	461c      	mov	r4, r3
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	681b      	ldr	r3, [r3, #0]
    b376:	00db      	lsls	r3, r3, #3
    b378:	f003 0318 	and.w	r3, r3, #24
    b37c:	2218      	movs	r2, #24
    b37e:	409a      	lsls	r2, r3
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	681b      	ldr	r3, [r3, #0]
    b384:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b38c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b390:	6819      	ldr	r1, [r3, #0]
    b392:	687b      	ldr	r3, [r7, #4]
    b394:	681b      	ldr	r3, [r3, #0]
    b396:	00db      	lsls	r3, r3, #3
    b398:	f003 0318 	and.w	r3, r3, #24
    b39c:	20ff      	movs	r0, #255	; 0xff
    b39e:	fa00 f303 	lsl.w	r3, r0, r3
    b3a2:	43db      	mvns	r3, r3
    b3a4:	400b      	ands	r3, r1
    b3a6:	4313      	orrs	r3, r2
    b3a8:	6023      	str	r3, [r4, #0]
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	681b      	ldr	r3, [r3, #0]
    b3ae:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b3b2:	4b16      	ldr	r3, [pc, #88]	; (b40c <am_devices_button_init+0x100>)
    b3b4:	4413      	add	r3, r2
    b3b6:	4618      	mov	r0, r3
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	681b      	ldr	r3, [r3, #0]
    b3bc:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b3c0:	4b12      	ldr	r3, [pc, #72]	; (b40c <am_devices_button_init+0x100>)
    b3c2:	4413      	add	r3, r2
    b3c4:	681a      	ldr	r2, [r3, #0]
    b3c6:	687b      	ldr	r3, [r7, #4]
    b3c8:	681b      	ldr	r3, [r3, #0]
    b3ca:	00db      	lsls	r3, r3, #3
    b3cc:	f003 0318 	and.w	r3, r3, #24
    b3d0:	21ff      	movs	r1, #255	; 0xff
    b3d2:	fa01 f303 	lsl.w	r3, r1, r3
    b3d6:	43db      	mvns	r3, r3
    b3d8:	4013      	ands	r3, r2
    b3da:	6003      	str	r3, [r0, #0]
    b3dc:	4b09      	ldr	r3, [pc, #36]	; (b404 <am_devices_button_init+0xf8>)
    b3de:	2200      	movs	r2, #0
    b3e0:	601a      	str	r2, [r3, #0]
    b3e2:	68fb      	ldr	r3, [r7, #12]
    b3e4:	4618      	mov	r0, r3
    b3e6:	f003 fc31 	bl	ec4c <am_hal_interrupt_master_set>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
    b3ea:	687b      	ldr	r3, [r7, #4]
    b3ec:	2200      	movs	r2, #0
    b3ee:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
    b3f0:	687b      	ldr	r3, [r7, #4]
    b3f2:	2200      	movs	r2, #0
    b3f4:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
    b3f6:	687b      	ldr	r3, [r7, #4]
    b3f8:	2200      	movs	r2, #0
    b3fa:	735a      	strb	r2, [r3, #13]
}
    b3fc:	bf00      	nop
    b3fe:	3714      	adds	r7, #20
    b400:	46bd      	mov	sp, r7
    b402:	bd90      	pop	{r4, r7, pc}
    b404:	40010060 	.word	0x40010060
    b408:	40010040 	.word	0x40010040
    b40c:	400100e0 	.word	0x400100e0

0000b410 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
    b410:	b580      	push	{r7, lr}
    b412:	b084      	sub	sp, #16
    b414:	af00      	add	r7, sp, #0
    b416:	6078      	str	r0, [r7, #4]
    b418:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
    b41a:	2300      	movs	r3, #0
    b41c:	60fb      	str	r3, [r7, #12]
    b41e:	e009      	b.n	b434 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
    b420:	68fb      	ldr	r3, [r7, #12]
    b422:	011b      	lsls	r3, r3, #4
    b424:	687a      	ldr	r2, [r7, #4]
    b426:	4413      	add	r3, r2
    b428:	4618      	mov	r0, r3
    b42a:	f7ff ff6f 	bl	b30c <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
    b42e:	68fb      	ldr	r3, [r7, #12]
    b430:	3301      	adds	r3, #1
    b432:	60fb      	str	r3, [r7, #12]
    b434:	68fa      	ldr	r2, [r7, #12]
    b436:	683b      	ldr	r3, [r7, #0]
    b438:	429a      	cmp	r2, r3
    b43a:	d3f1      	bcc.n	b420 <am_devices_button_array_init+0x10>
    }
}
    b43c:	bf00      	nop
    b43e:	3710      	adds	r7, #16
    b440:	46bd      	mov	sp, r7
    b442:	bd80      	pop	{r7, pc}

0000b444 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
    b444:	b590      	push	{r4, r7, lr}
    b446:	b087      	sub	sp, #28
    b448:	af00      	add	r7, sp, #0
    b44a:	6078      	str	r0, [r7, #4]
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_INPUT);
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	681b      	ldr	r3, [r3, #0]
    b450:	2b31      	cmp	r3, #49	; 0x31
    b452:	d866      	bhi.n	b522 <am_devices_button_tick+0xde>
    b454:	f003 fbf6 	bl	ec44 <am_hal_interrupt_master_disable>
    b458:	4603      	mov	r3, r0
    b45a:	60fb      	str	r3, [r7, #12]
    b45c:	4b87      	ldr	r3, [pc, #540]	; (b67c <am_devices_button_tick+0x238>)
    b45e:	2273      	movs	r2, #115	; 0x73
    b460:	601a      	str	r2, [r3, #0]
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	681b      	ldr	r3, [r3, #0]
    b466:	085b      	lsrs	r3, r3, #1
    b468:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b46c:	4b84      	ldr	r3, [pc, #528]	; (b680 <am_devices_button_tick+0x23c>)
    b46e:	4413      	add	r3, r2
    b470:	4618      	mov	r0, r3
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	681b      	ldr	r3, [r3, #0]
    b476:	085b      	lsrs	r3, r3, #1
    b478:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b47c:	4b80      	ldr	r3, [pc, #512]	; (b680 <am_devices_button_tick+0x23c>)
    b47e:	4413      	add	r3, r2
    b480:	681a      	ldr	r2, [r3, #0]
    b482:	687b      	ldr	r3, [r7, #4]
    b484:	681b      	ldr	r3, [r3, #0]
    b486:	009b      	lsls	r3, r3, #2
    b488:	f003 031c 	and.w	r3, r3, #28
    b48c:	2107      	movs	r1, #7
    b48e:	fa01 f303 	lsl.w	r3, r1, r3
    b492:	43db      	mvns	r3, r3
    b494:	4013      	ands	r3, r2
    b496:	6003      	str	r3, [r0, #0]
    b498:	687b      	ldr	r3, [r7, #4]
    b49a:	681b      	ldr	r3, [r3, #0]
    b49c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b4a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b4a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b4a8:	461c      	mov	r4, r3
    b4aa:	687b      	ldr	r3, [r7, #4]
    b4ac:	681b      	ldr	r3, [r3, #0]
    b4ae:	00db      	lsls	r3, r3, #3
    b4b0:	f003 0318 	and.w	r3, r3, #24
    b4b4:	221a      	movs	r2, #26
    b4b6:	409a      	lsls	r2, r3
    b4b8:	687b      	ldr	r3, [r7, #4]
    b4ba:	681b      	ldr	r3, [r3, #0]
    b4bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b4c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b4c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b4c8:	6819      	ldr	r1, [r3, #0]
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	681b      	ldr	r3, [r3, #0]
    b4ce:	00db      	lsls	r3, r3, #3
    b4d0:	f003 0318 	and.w	r3, r3, #24
    b4d4:	20ff      	movs	r0, #255	; 0xff
    b4d6:	fa00 f303 	lsl.w	r3, r0, r3
    b4da:	43db      	mvns	r3, r3
    b4dc:	400b      	ands	r3, r1
    b4de:	4313      	orrs	r3, r2
    b4e0:	6023      	str	r3, [r4, #0]
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	681b      	ldr	r3, [r3, #0]
    b4e6:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b4ea:	4b66      	ldr	r3, [pc, #408]	; (b684 <am_devices_button_tick+0x240>)
    b4ec:	4413      	add	r3, r2
    b4ee:	4618      	mov	r0, r3
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	681b      	ldr	r3, [r3, #0]
    b4f4:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b4f8:	4b62      	ldr	r3, [pc, #392]	; (b684 <am_devices_button_tick+0x240>)
    b4fa:	4413      	add	r3, r2
    b4fc:	681a      	ldr	r2, [r3, #0]
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	681b      	ldr	r3, [r3, #0]
    b502:	00db      	lsls	r3, r3, #3
    b504:	f003 0318 	and.w	r3, r3, #24
    b508:	21ff      	movs	r1, #255	; 0xff
    b50a:	fa01 f303 	lsl.w	r3, r1, r3
    b50e:	43db      	mvns	r3, r3
    b510:	4013      	ands	r3, r2
    b512:	6003      	str	r3, [r0, #0]
    b514:	4b59      	ldr	r3, [pc, #356]	; (b67c <am_devices_button_tick+0x238>)
    b516:	2200      	movs	r2, #0
    b518:	601a      	str	r2, [r3, #0]
    b51a:	68fb      	ldr	r3, [r7, #12]
    b51c:	4618      	mov	r0, r3
    b51e:	f003 fb95 	bl	ec4c <am_hal_interrupt_master_set>
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
#else
    ui32PinState = am_hal_gpio_input_bit_read(psButton->ui32GPIONumber);
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	681b      	ldr	r3, [r3, #0]
    b526:	08db      	lsrs	r3, r3, #3
    b528:	f003 0204 	and.w	r2, r3, #4
    b52c:	4b56      	ldr	r3, [pc, #344]	; (b688 <am_devices_button_tick+0x244>)
    b52e:	4413      	add	r3, r2
    b530:	681a      	ldr	r2, [r3, #0]
    b532:	687b      	ldr	r3, [r7, #4]
    b534:	681b      	ldr	r3, [r3, #0]
    b536:	f003 031f 	and.w	r3, r3, #31
    b53a:	fa22 f303 	lsr.w	r3, r2, r3
    b53e:	f003 0301 	and.w	r3, r3, #1
    b542:	2b00      	cmp	r3, #0
    b544:	bf14      	ite	ne
    b546:	2301      	movne	r3, #1
    b548:	2300      	moveq	r3, #0
    b54a:	b2db      	uxtb	r3, r3
    b54c:	617b      	str	r3, [r7, #20]
#endif

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
    b54e:	687b      	ldr	r3, [r7, #4]
    b550:	685a      	ldr	r2, [r3, #4]
    b552:	697b      	ldr	r3, [r7, #20]
    b554:	429a      	cmp	r2, r3
    b556:	bf14      	ite	ne
    b558:	2301      	movne	r3, #1
    b55a:	2300      	moveq	r3, #0
    b55c:	74fb      	strb	r3, [r7, #19]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
    b55e:	687b      	ldr	r3, [r7, #4]
    b560:	7b1b      	ldrb	r3, [r3, #12]
    b562:	7cfa      	ldrb	r2, [r7, #19]
    b564:	429a      	cmp	r2, r3
    b566:	d005      	beq.n	b574 <am_devices_button_tick+0x130>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	689b      	ldr	r3, [r3, #8]
    b56c:	1c5a      	adds	r2, r3, #1
    b56e:	687b      	ldr	r3, [r7, #4]
    b570:	609a      	str	r2, [r3, #8]
    b572:	e002      	b.n	b57a <am_devices_button_tick+0x136>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	2200      	movs	r2, #0
    b578:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
    b57a:	687b      	ldr	r3, [r7, #4]
    b57c:	689b      	ldr	r3, [r3, #8]
    b57e:	2b03      	cmp	r3, #3
    b580:	d909      	bls.n	b596 <am_devices_button_tick+0x152>
    {
        psButton->bPressed = bRawButtonPressed;
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	7cfa      	ldrb	r2, [r7, #19]
    b586:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
    b588:	687b      	ldr	r3, [r7, #4]
    b58a:	2201      	movs	r2, #1
    b58c:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	2200      	movs	r2, #0
    b592:	609a      	str	r2, [r3, #8]
    b594:	e002      	b.n	b59c <am_devices_button_tick+0x158>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	2200      	movs	r2, #0
    b59a:	735a      	strb	r2, [r3, #13]
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	681b      	ldr	r3, [r3, #0]
    b5a0:	2b31      	cmp	r3, #49	; 0x31
    b5a2:	d866      	bhi.n	b672 <am_devices_button_tick+0x22e>
    b5a4:	f003 fb4e 	bl	ec44 <am_hal_interrupt_master_disable>
    b5a8:	4603      	mov	r3, r0
    b5aa:	60bb      	str	r3, [r7, #8]
    b5ac:	4b33      	ldr	r3, [pc, #204]	; (b67c <am_devices_button_tick+0x238>)
    b5ae:	2273      	movs	r2, #115	; 0x73
    b5b0:	601a      	str	r2, [r3, #0]
    b5b2:	687b      	ldr	r3, [r7, #4]
    b5b4:	681b      	ldr	r3, [r3, #0]
    b5b6:	085b      	lsrs	r3, r3, #1
    b5b8:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b5bc:	4b30      	ldr	r3, [pc, #192]	; (b680 <am_devices_button_tick+0x23c>)
    b5be:	4413      	add	r3, r2
    b5c0:	4618      	mov	r0, r3
    b5c2:	687b      	ldr	r3, [r7, #4]
    b5c4:	681b      	ldr	r3, [r3, #0]
    b5c6:	085b      	lsrs	r3, r3, #1
    b5c8:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b5cc:	4b2c      	ldr	r3, [pc, #176]	; (b680 <am_devices_button_tick+0x23c>)
    b5ce:	4413      	add	r3, r2
    b5d0:	681a      	ldr	r2, [r3, #0]
    b5d2:	687b      	ldr	r3, [r7, #4]
    b5d4:	681b      	ldr	r3, [r3, #0]
    b5d6:	009b      	lsls	r3, r3, #2
    b5d8:	f003 031c 	and.w	r3, r3, #28
    b5dc:	2107      	movs	r1, #7
    b5de:	fa01 f303 	lsl.w	r3, r1, r3
    b5e2:	43db      	mvns	r3, r3
    b5e4:	4013      	ands	r3, r2
    b5e6:	6003      	str	r3, [r0, #0]
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	681b      	ldr	r3, [r3, #0]
    b5ec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b5f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b5f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b5f8:	461c      	mov	r4, r3
    b5fa:	687b      	ldr	r3, [r7, #4]
    b5fc:	681b      	ldr	r3, [r3, #0]
    b5fe:	00db      	lsls	r3, r3, #3
    b600:	f003 0318 	and.w	r3, r3, #24
    b604:	2218      	movs	r2, #24
    b606:	409a      	lsls	r2, r3
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	681b      	ldr	r3, [r3, #0]
    b60c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b614:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b618:	6819      	ldr	r1, [r3, #0]
    b61a:	687b      	ldr	r3, [r7, #4]
    b61c:	681b      	ldr	r3, [r3, #0]
    b61e:	00db      	lsls	r3, r3, #3
    b620:	f003 0318 	and.w	r3, r3, #24
    b624:	20ff      	movs	r0, #255	; 0xff
    b626:	fa00 f303 	lsl.w	r3, r0, r3
    b62a:	43db      	mvns	r3, r3
    b62c:	400b      	ands	r3, r1
    b62e:	4313      	orrs	r3, r2
    b630:	6023      	str	r3, [r4, #0]
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	681b      	ldr	r3, [r3, #0]
    b636:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b63a:	4b12      	ldr	r3, [pc, #72]	; (b684 <am_devices_button_tick+0x240>)
    b63c:	4413      	add	r3, r2
    b63e:	4618      	mov	r0, r3
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	681b      	ldr	r3, [r3, #0]
    b644:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    b648:	4b0e      	ldr	r3, [pc, #56]	; (b684 <am_devices_button_tick+0x240>)
    b64a:	4413      	add	r3, r2
    b64c:	681a      	ldr	r2, [r3, #0]
    b64e:	687b      	ldr	r3, [r7, #4]
    b650:	681b      	ldr	r3, [r3, #0]
    b652:	00db      	lsls	r3, r3, #3
    b654:	f003 0318 	and.w	r3, r3, #24
    b658:	21ff      	movs	r1, #255	; 0xff
    b65a:	fa01 f303 	lsl.w	r3, r1, r3
    b65e:	43db      	mvns	r3, r3
    b660:	4013      	ands	r3, r2
    b662:	6003      	str	r3, [r0, #0]
    b664:	4b05      	ldr	r3, [pc, #20]	; (b67c <am_devices_button_tick+0x238>)
    b666:	2200      	movs	r2, #0
    b668:	601a      	str	r2, [r3, #0]
    b66a:	68bb      	ldr	r3, [r7, #8]
    b66c:	4618      	mov	r0, r3
    b66e:	f003 faed 	bl	ec4c <am_hal_interrupt_master_set>
#endif // AM_APOLLO3_GPIO
}
    b672:	bf00      	nop
    b674:	371c      	adds	r7, #28
    b676:	46bd      	mov	sp, r7
    b678:	bd90      	pop	{r4, r7, pc}
    b67a:	bf00      	nop
    b67c:	40010060 	.word	0x40010060
    b680:	40010040 	.word	0x40010040
    b684:	400100e0 	.word	0x400100e0
    b688:	40010080 	.word	0x40010080

0000b68c <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
    b68c:	b580      	push	{r7, lr}
    b68e:	b084      	sub	sp, #16
    b690:	af00      	add	r7, sp, #0
    b692:	6078      	str	r0, [r7, #4]
    b694:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
    b696:	2300      	movs	r3, #0
    b698:	60fb      	str	r3, [r7, #12]
    b69a:	e009      	b.n	b6b0 <am_devices_button_array_tick+0x24>
    {
        am_devices_button_tick(psButtons + i);
    b69c:	68fb      	ldr	r3, [r7, #12]
    b69e:	011b      	lsls	r3, r3, #4
    b6a0:	687a      	ldr	r2, [r7, #4]
    b6a2:	4413      	add	r3, r2
    b6a4:	4618      	mov	r0, r3
    b6a6:	f7ff fecd 	bl	b444 <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
    b6aa:	68fb      	ldr	r3, [r7, #12]
    b6ac:	3301      	adds	r3, #1
    b6ae:	60fb      	str	r3, [r7, #12]
    b6b0:	68fa      	ldr	r2, [r7, #12]
    b6b2:	683b      	ldr	r3, [r7, #0]
    b6b4:	429a      	cmp	r2, r3
    b6b6:	d3f1      	bcc.n	b69c <am_devices_button_array_tick+0x10>
    }
}
    b6b8:	bf00      	nop
    b6ba:	3710      	adds	r7, #16
    b6bc:	46bd      	mov	sp, r7
    b6be:	bd80      	pop	{r7, pc}

0000b6c0 <iom_write_complete>:
// IOM write complete callback
//
//*****************************************************************************
static void
iom_write_complete(void)
{
    b6c0:	b480      	push	{r7}
    b6c2:	af00      	add	r7, sp, #0
    gIomDone = true;
    b6c4:	4b03      	ldr	r3, [pc, #12]	; (b6d4 <iom_write_complete+0x14>)
    b6c6:	2201      	movs	r2, #1
    b6c8:	701a      	strb	r2, [r3, #0]
}
    b6ca:	bf00      	nop
    b6cc:	46bd      	mov	sp, r7
    b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6d2:	4770      	bx	lr
    b6d4:	10001ab9 	.word	0x10001ab9

0000b6d8 <am_iomaster0_isr>:
//
//*****************************************************************************
#if (0 == AM_BSP_EM9304_IOM)
void
am_iomaster0_isr(void)
{
    b6d8:	b580      	push	{r7, lr}
    b6da:	b082      	sub	sp, #8
    b6dc:	af00      	add	r7, sp, #0
    uint32_t ui32IntStatus;

    //
    // Read and clear the interrupt status.
    //
    ui32IntStatus = am_hal_iom_int_status_get(0, false);
    b6de:	2100      	movs	r1, #0
    b6e0:	2000      	movs	r0, #0
    b6e2:	f005 fc05 	bl	10ef0 <am_hal_iom_int_status_get>
    b6e6:	6078      	str	r0, [r7, #4]
    am_hal_iom_int_clear(0, ui32IntStatus);
    b6e8:	6879      	ldr	r1, [r7, #4]
    b6ea:	2000      	movs	r0, #0
    b6ec:	f005 fbf6 	bl	10edc <am_hal_iom_int_clear>

    //
    // Service FIFO interrupts as necessary, and call IOM callbacks as
    // transfers are completed.
    //
    am_hal_iom_int_service(0, ui32IntStatus);
    b6f0:	6879      	ldr	r1, [r7, #4]
    b6f2:	2000      	movs	r0, #0
    b6f4:	f005 fbe0 	bl	10eb8 <am_hal_iom_int_service>
}
    b6f8:	bf00      	nop
    b6fa:	3708      	adds	r7, #8
    b6fc:	46bd      	mov	sp, r7
    b6fe:	bd80      	pop	{r7, pc}

0000b700 <isRevB2>:
// Checks to see if this processor is a Rev B2 device.
//
//*****************************************************************************
static bool
isRevB2(void)
{
    b700:	b480      	push	{r7}
    b702:	af00      	add	r7, sp, #0
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    b704:	4b06      	ldr	r3, [pc, #24]	; (b720 <isRevB2+0x20>)
    b706:	681b      	ldr	r3, [r3, #0]
    b708:	b2db      	uxtb	r3, r3
    b70a:	2b22      	cmp	r3, #34	; 0x22
    b70c:	d101      	bne.n	b712 <isRevB2+0x12>
         (AM_REG_MCUCTRL_CHIPREV_REVMAJ_B | AM_REG_MCUCTRL_CHIPREV_REVMIN_REV2) )
    {
        return true;
    b70e:	2301      	movs	r3, #1
    b710:	e000      	b.n	b714 <isRevB2+0x14>
    }
    else
    {
        return false;
    b712:	2300      	movs	r3, #0
    }
}
    b714:	4618      	mov	r0, r3
    b716:	46bd      	mov	sp, r7
    b718:	f85d 7b04 	ldr.w	r7, [sp], #4
    b71c:	4770      	bx	lr
    b71e:	bf00      	nop
    b720:	4002000c 	.word	0x4002000c

0000b724 <am_devices_em9304_tx_starts>:
//! @return Number of bytes that can be written to EM9304.
//
//*****************************************************************************
uint8_t
am_devices_em9304_tx_starts(const am_devices_em9304_t *psDevice)
{
    b724:	b590      	push	{r4, r7, lr}
    b726:	b087      	sub	sp, #28
    b728:	af02      	add	r7, sp, #8
    b72a:	6078      	str	r0, [r7, #4]
  // Indicates that a SPI transfer is in progress
  spiTxInProgress = 1;
    b72c:	4b2e      	ldr	r3, [pc, #184]	; (b7e8 <am_devices_em9304_tx_starts+0xc4>)
    b72e:	2201      	movs	r2, #1
    b730:	701a      	strb	r2, [r3, #0]

  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  sCommand.bytes[0] = EM9304_SPI_HEADER_TX;
    b732:	2342      	movs	r3, #66	; 0x42
    b734:	733b      	strb	r3, [r7, #12]
  sCommand.bytes[1] = 0x0;
    b736:	2300      	movs	r3, #0
    b738:	737b      	strb	r3, [r7, #13]

  // Select the EM9304
  EM9304_SPISLAVESELECT();
    b73a:	4b2c      	ldr	r3, [pc, #176]	; (b7ec <am_devices_em9304_tx_starts+0xc8>)
    b73c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b740:	601a      	str	r2, [r3, #0]

  // Wait EM9304 RDY signal
  while ( !EM9304_RDY_INT() );
    b742:	bf00      	nop
    b744:	f003 f9da 	bl	eafc <am_hal_gpio_input_read>
    b748:	460a      	mov	r2, r1
    b74a:	4601      	mov	r1, r0
    b74c:	f04f 0300 	mov.w	r3, #0
    b750:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    b754:	ea03 0301 	and.w	r3, r3, r1
    b758:	ea04 0402 	and.w	r4, r4, r2
    b75c:	4323      	orrs	r3, r4
    b75e:	d0f1      	beq.n	b744 <am_devices_em9304_tx_starts+0x20>

#if defined(AM_PART_APOLLO2)
  //
  // Full-Duplex operation is only supported for Apollo2 B2 Silicon.
  //
  if (isRevB2())
    b760:	f7ff ffce 	bl	b700 <isRevB2>
    b764:	4603      	mov	r3, r0
    b766:	2b00      	cmp	r3, #0
    b768:	d023      	beq.n	b7b2 <am_devices_em9304_tx_starts+0x8e>
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_fullduplex(psDevice->ui32IOMModule,
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	6858      	ldr	r0, [r3, #4]
    b76e:	f107 0108 	add.w	r1, r7, #8
    b772:	f107 020c 	add.w	r2, r7, #12
    b776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b77a:	9301      	str	r3, [sp, #4]
    b77c:	2302      	movs	r3, #2
    b77e:	9300      	str	r3, [sp, #0]
    b780:	460b      	mov	r3, r1
    b782:	2100      	movs	r1, #0
    b784:	f005 fb1a 	bl	10dbc <am_hal_iom_spi_fullduplex>
                              AM_HAL_IOM_RAW);

    //
    // Check that the EM9304 is ready.
    //
    if (sStas.bytes[0] != EM9304_STS1_READY_VALUE)
    b788:	7a3b      	ldrb	r3, [r7, #8]
    b78a:	2bc0      	cmp	r3, #192	; 0xc0
    b78c:	d00f      	beq.n	b7ae <am_devices_em9304_tx_starts+0x8a>
    {
      // Error
      EM9304_SPISLAVEDESELECT();
    b78e:	4b18      	ldr	r3, [pc, #96]	; (b7f0 <am_devices_em9304_tx_starts+0xcc>)
    b790:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b794:	601a      	str	r2, [r3, #0]
      am_util_debug_printf("HCI TX Failed to starts\n");
    b796:	4817      	ldr	r0, [pc, #92]	; (b7f4 <am_devices_em9304_tx_starts+0xd0>)
    b798:	f002 fd34 	bl	e204 <am_util_stdio_printf>
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
    b79c:	7a3b      	ldrb	r3, [r7, #8]
    b79e:	4619      	mov	r1, r3
    b7a0:	7a7b      	ldrb	r3, [r7, #9]
    b7a2:	461a      	mov	r2, r3
    b7a4:	4814      	ldr	r0, [pc, #80]	; (b7f8 <am_devices_em9304_tx_starts+0xd4>)
    b7a6:	f002 fd2d 	bl	e204 <am_util_stdio_printf>
      return 0;
    b7aa:	2300      	movs	r3, #0
    b7ac:	e018      	b.n	b7e0 <am_devices_em9304_tx_starts+0xbc>
    }

    return sStas.bytes[1];
    b7ae:	7a7b      	ldrb	r3, [r7, #9]
    b7b0:	e016      	b.n	b7e0 <am_devices_em9304_tx_starts+0xbc>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
    b7b2:	687b      	ldr	r3, [r7, #4]
    b7b4:	6858      	ldr	r0, [r3, #4]
    b7b6:	f107 020c 	add.w	r2, r7, #12
    b7ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7be:	9300      	str	r3, [sp, #0]
    b7c0:	2301      	movs	r3, #1
    b7c2:	2100      	movs	r1, #0
    b7c4:	f004 fdac 	bl	10320 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
    b7c8:	687b      	ldr	r3, [r7, #4]
    b7ca:	6858      	ldr	r0, [r3, #4]
    b7cc:	f107 0208 	add.w	r2, r7, #8
    b7d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7d4:	9300      	str	r3, [sp, #0]
    b7d6:	2301      	movs	r3, #1
    b7d8:	2100      	movs	r1, #0
    b7da:	f004 fff3 	bl	107c4 <am_hal_iom_spi_read>
                        0, sStas.words, 1,
                        AM_HAL_IOM_RAW);

    return sStas.bytes[0];
    b7de:	7a3b      	ldrb	r3, [r7, #8]
  }
}
    b7e0:	4618      	mov	r0, r3
    b7e2:	3714      	adds	r7, #20
    b7e4:	46bd      	mov	sp, r7
    b7e6:	bd90      	pop	{r4, r7, pc}
    b7e8:	10001ab8 	.word	0x10001ab8
    b7ec:	4001009c 	.word	0x4001009c
    b7f0:	40010094 	.word	0x40010094
    b7f4:	000118fc 	.word	0x000118fc
    b7f8:	00011918 	.word	0x00011918

0000b7fc <am_devices_em9304_tx_ends>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_tx_ends(void)
{
    b7fc:	b580      	push	{r7, lr}
    b7fe:	af00      	add	r7, sp, #0
    am_hal_iom_poll_complete(g_sEm9304.ui32IOMModule);
    b800:	2300      	movs	r3, #0
    b802:	4618      	mov	r0, r3
    b804:	f005 fb4e 	bl	10ea4 <am_hal_iom_poll_complete>
    // Deselect the EM9304
    EM9304_SPISLAVEDESELECT();
    b808:	4b04      	ldr	r3, [pc, #16]	; (b81c <am_devices_em9304_tx_ends+0x20>)
    b80a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b80e:	601a      	str	r2, [r3, #0]

    // Indicates that the SPI transfer is finished
    spiTxInProgress = 0;
    b810:	4b03      	ldr	r3, [pc, #12]	; (b820 <am_devices_em9304_tx_ends+0x24>)
    b812:	2200      	movs	r2, #0
    b814:	701a      	strb	r2, [r3, #0]
}
    b816:	bf00      	nop
    b818:	bd80      	pop	{r7, pc}
    b81a:	bf00      	nop
    b81c:	40010094 	.word	0x40010094
    b820:	10001ab8 	.word	0x10001ab8

0000b824 <am_devices_em9304_block_write>:
void
am_devices_em9304_block_write(const am_devices_em9304_t *psDevice,
                              uint8_t type,
                              uint8_t *pui8Values,
                              uint32_t ui32NumBytes)
{
    b824:	b590      	push	{r4, r7, lr}
    b826:	b0cb      	sub	sp, #300	; 0x12c
    b828:	af02      	add	r7, sp, #8
    b82a:	f107 040c 	add.w	r4, r7, #12
    b82e:	6020      	str	r0, [r4, #0]
    b830:	4608      	mov	r0, r1
    b832:	1d39      	adds	r1, r7, #4
    b834:	600a      	str	r2, [r1, #0]
    b836:	463a      	mov	r2, r7
    b838:	6013      	str	r3, [r2, #0]
    b83a:	f107 030b 	add.w	r3, r7, #11
    b83e:	4602      	mov	r2, r0
    b840:	701a      	strb	r2, [r3, #0]
  am_hal_iom_buffer(EM9304_BUFFER_SIZE) sData;
  uint8_t em9304BufSize = 0;
    b842:	2300      	movs	r3, #0
    b844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t hci_type_sent = 0;
    b848:	2300      	movs	r3, #0
    b84a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Check that we are not going to overwrite buffer.
  if ((ui32NumBytes + 1) > EM9304_BUFFER_SIZE)
    b84e:	463b      	mov	r3, r7
    b850:	681b      	ldr	r3, [r3, #0]
    b852:	3301      	adds	r3, #1
    b854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b858:	d903      	bls.n	b862 <am_devices_em9304_block_write+0x3e>
  {
    am_util_debug_printf("HCI TX Error (STATUS ERROR) Packet Too Large\n");
    b85a:	4850      	ldr	r0, [pc, #320]	; (b99c <am_devices_em9304_block_write+0x178>)
    b85c:	f002 fcd2 	bl	e204 <am_util_stdio_printf>
    b860:	e098      	b.n	b994 <am_devices_em9304_block_write+0x170>
    return;
  }

  for ( uint32_t i = 0; i < ui32NumBytes; )
    b862:	2300      	movs	r3, #0
    b864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    b868:	e08d      	b.n	b986 <am_devices_em9304_block_write+0x162>
  {
    if ( i < ui32NumBytes )
    b86a:	463b      	mov	r3, r7
    b86c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	429a      	cmp	r2, r3
    b874:	d207      	bcs.n	b886 <am_devices_em9304_block_write+0x62>
    {
      em9304BufSize = am_devices_em9304_tx_starts(psDevice);
    b876:	f107 030c 	add.w	r3, r7, #12
    b87a:	6818      	ldr	r0, [r3, #0]
    b87c:	f7ff ff52 	bl	b724 <am_devices_em9304_tx_starts>
    b880:	4603      	mov	r3, r0
    b882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    uint32_t len = (em9304BufSize < (ui32NumBytes - i)) ? em9304BufSize : (ui32NumBytes - i);
    b886:	463b      	mov	r3, r7
    b888:	681a      	ldr	r2, [r3, #0]
    b88a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b88e:	1ad2      	subs	r2, r2, r3
    b890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
    b894:	4293      	cmp	r3, r2
    b896:	bf28      	it	cs
    b898:	4613      	movcs	r3, r2
    b89a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    if (len > 0)  // check again if there is room to send more data
    b89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d06d      	beq.n	b982 <am_devices_em9304_block_write+0x15e>
    {
      if (hci_type_sent == 0)
    b8a6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d11c      	bne.n	b8e8 <am_devices_em9304_block_write+0xc4>
      {
        sData.bytes[0] = type;
    b8ae:	f107 0310 	add.w	r3, r7, #16
    b8b2:	f107 020b 	add.w	r2, r7, #11
    b8b6:	7812      	ldrb	r2, [r2, #0]
    b8b8:	701a      	strb	r2, [r3, #0]
        memcpy(&(sData.bytes[1]), pui8Values, len - 1);
    b8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b8be:	1e59      	subs	r1, r3, #1
    b8c0:	1d3b      	adds	r3, r7, #4
    b8c2:	f107 0210 	add.w	r2, r7, #16
    b8c6:	1c50      	adds	r0, r2, #1
    b8c8:	460a      	mov	r2, r1
    b8ca:	6819      	ldr	r1, [r3, #0]
    b8cc:	f005 fdd5 	bl	1147a <memcpy>
        i += len -1;
    b8d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    b8d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b8d8:	4413      	add	r3, r2
    b8da:	3b01      	subs	r3, #1
    b8dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        hci_type_sent = 1;
    b8e0:	2301      	movs	r3, #1
    b8e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    b8e6:	e012      	b.n	b90e <am_devices_em9304_block_write+0xea>
      }
      else
      {
        memcpy(&(sData.bytes[0]), pui8Values + i, len);
    b8e8:	1d3b      	adds	r3, r7, #4
    b8ea:	681a      	ldr	r2, [r3, #0]
    b8ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b8f0:	18d1      	adds	r1, r2, r3
    b8f2:	f107 0310 	add.w	r3, r7, #16
    b8f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    b8fa:	4618      	mov	r0, r3
    b8fc:	f005 fdbd 	bl	1147a <memcpy>
        i += len;
    b900:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b908:	4413      	add	r3, r2
    b90a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      }

      while ( !EM9304_RDY_INT() );
    b90e:	bf00      	nop
    b910:	f003 f8f4 	bl	eafc <am_hal_gpio_input_read>
    b914:	460a      	mov	r2, r1
    b916:	4601      	mov	r1, r0
    b918:	f04f 0300 	mov.w	r3, #0
    b91c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    b920:	ea03 0301 	and.w	r3, r3, r1
    b924:	ea04 0402 	and.w	r4, r4, r2
    b928:	4323      	orrs	r3, r4
    b92a:	d0f1      	beq.n	b910 <am_devices_em9304_block_write+0xec>

#if defined(USE_IOM_NONBLOCKING)
      gIomDone = false;
    b92c:	4b1c      	ldr	r3, [pc, #112]	; (b9a0 <am_devices_em9304_block_write+0x17c>)
    b92e:	2200      	movs	r2, #0
    b930:	701a      	strb	r2, [r3, #0]
      am_hal_iom_spi_write_nb(psDevice->ui32IOMModule,
    b932:	f107 030c 	add.w	r3, r7, #12
    b936:	681b      	ldr	r3, [r3, #0]
    b938:	6858      	ldr	r0, [r3, #4]
    b93a:	f107 0210 	add.w	r2, r7, #16
    b93e:	4b19      	ldr	r3, [pc, #100]	; (b9a4 <am_devices_em9304_block_write+0x180>)
    b940:	9301      	str	r3, [sp, #4]
    b942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b946:	9300      	str	r3, [sp, #0]
    b948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b94c:	2100      	movs	r1, #0
    b94e:	f005 fa5d 	bl	10e0c <am_hal_iom_spi_write_nb>
      while(1)
      {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    b952:	f003 f977 	bl	ec44 <am_hal_interrupt_master_disable>
    b956:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        if (!gIomDone)
    b95a:	4b11      	ldr	r3, [pc, #68]	; (b9a0 <am_devices_em9304_block_write+0x17c>)
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	b2db      	uxtb	r3, r3
    b960:	f083 0301 	eor.w	r3, r3, #1
    b964:	b2db      	uxtb	r3, r3
    b966:	2b00      	cmp	r3, #0
    b968:	d007      	beq.n	b97a <am_devices_em9304_block_write+0x156>
        {
          //
          // Sleep while waiting for the IOM transaction to finish.
          //
          am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    b96a:	2001      	movs	r0, #1
    b96c:	f005 fc7a 	bl	11264 <am_hal_sysctrl_sleep>
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
    b970:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
    b974:	f003 f96a 	bl	ec4c <am_hal_interrupt_master_set>
    b978:	e7eb      	b.n	b952 <am_devices_em9304_block_write+0x12e>
        else
        {
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
    b97a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
    b97e:	f003 f965 	bl	ec4c <am_hal_interrupt_master_set>
                           0, sData.words, len,
                           AM_HAL_IOM_RAW);
#endif
    }

    am_devices_em9304_tx_ends();
    b982:	f7ff ff3b 	bl	b7fc <am_devices_em9304_tx_ends>
  for ( uint32_t i = 0; i < ui32NumBytes; )
    b986:	463b      	mov	r3, r7
    b988:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b98c:	681b      	ldr	r3, [r3, #0]
    b98e:	429a      	cmp	r2, r3
    b990:	f4ff af6b 	bcc.w	b86a <am_devices_em9304_block_write+0x46>

  }
}
    b994:	f507 7792 	add.w	r7, r7, #292	; 0x124
    b998:	46bd      	mov	sp, r7
    b99a:	bd90      	pop	{r4, r7, pc}
    b99c:	00011920 	.word	0x00011920
    b9a0:	10001ab9 	.word	0x10001ab9
    b9a4:	0000b6c1 	.word	0x0000b6c1

0000b9a8 <am_devices_em9304_block_read>:
//*****************************************************************************
uint32_t
am_devices_em9304_block_read(const am_devices_em9304_t *psDevice,
                             uint32_t *pui32Values,
                             uint32_t ui32NumBytes)
{
    b9a8:	b590      	push	{r4, r7, lr}
    b9aa:	b08d      	sub	sp, #52	; 0x34
    b9ac:	af02      	add	r7, sp, #8
    b9ae:	60f8      	str	r0, [r7, #12]
    b9b0:	60b9      	str	r1, [r7, #8]
    b9b2:	607a      	str	r2, [r7, #4]
  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  uint8_t ui8RxBytes;
  uint8_t spiRxTotalBytesCount = 0;
    b9b4:	2300      	movs	r3, #0
    b9b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


  sCommand.bytes[0] = EM9304_SPI_HEADER_RX;
    b9ba:	2381      	movs	r3, #129	; 0x81
    b9bc:	763b      	strb	r3, [r7, #24]
  sCommand.bytes[1] = 0x0;
    b9be:	2300      	movs	r3, #0
    b9c0:	767b      	strb	r3, [r7, #25]

  //
  // Check if the SPI is free
  //
  if ( spiTxInProgress )
    b9c2:	4b62      	ldr	r3, [pc, #392]	; (bb4c <am_devices_em9304_block_read+0x1a4>)
    b9c4:	781b      	ldrb	r3, [r3, #0]
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	d004      	beq.n	b9d4 <am_devices_em9304_block_read+0x2c>
  {
    //
    // TX in progress -> Ignore RDY interrupt
    //
    am_util_debug_printf("HCI TX in progress\n");
    b9ca:	4861      	ldr	r0, [pc, #388]	; (bb50 <am_devices_em9304_block_read+0x1a8>)
    b9cc:	f002 fc1a 	bl	e204 <am_util_stdio_printf>
    return 0;
    b9d0:	2300      	movs	r3, #0
    b9d2:	e0b6      	b.n	bb42 <am_devices_em9304_block_read+0x19a>
  }

  //
  // Check if they are still data to read
  //
  if ( !EM9304_RDY_INT() )
    b9d4:	f003 f892 	bl	eafc <am_hal_gpio_input_read>
    b9d8:	460a      	mov	r2, r1
    b9da:	4601      	mov	r1, r0
    b9dc:	f04f 0300 	mov.w	r3, #0
    b9e0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    b9e4:	ea03 0301 	and.w	r3, r3, r1
    b9e8:	ea04 0402 	and.w	r4, r4, r2
    b9ec:	4323      	orrs	r3, r4
    b9ee:	d101      	bne.n	b9f4 <am_devices_em9304_block_read+0x4c>
  {
    // No data
    //am_util_debug_printf("HCI No data\n");
    return 0;
    b9f0:	2300      	movs	r3, #0
    b9f2:	e0a6      	b.n	bb42 <am_devices_em9304_block_read+0x19a>
  }

  //
  // Select the EM9304
  //
  EM9304_SPISLAVESELECT();
    b9f4:	4b57      	ldr	r3, [pc, #348]	; (bb54 <am_devices_em9304_block_read+0x1ac>)
    b9f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b9fa:	601a      	str	r2, [r3, #0]

#if defined(AM_PART_APOLLO2)
  //
  // Full-Duplex operation is only supported for Apollo2 B2 Silicon.
  //
  if (isRevB2())
    b9fc:	f7ff fe80 	bl	b700 <isRevB2>
    ba00:	4603      	mov	r3, r0
    ba02:	2b00      	cmp	r3, #0
    ba04:	d025      	beq.n	ba52 <am_devices_em9304_block_read+0xaa>
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_fullduplex(psDevice->ui32IOMModule,
    ba06:	68fb      	ldr	r3, [r7, #12]
    ba08:	6858      	ldr	r0, [r3, #4]
    ba0a:	f107 0114 	add.w	r1, r7, #20
    ba0e:	f107 0218 	add.w	r2, r7, #24
    ba12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ba16:	9301      	str	r3, [sp, #4]
    ba18:	2302      	movs	r3, #2
    ba1a:	9300      	str	r3, [sp, #0]
    ba1c:	460b      	mov	r3, r1
    ba1e:	2100      	movs	r1, #0
    ba20:	f005 f9cc 	bl	10dbc <am_hal_iom_spi_fullduplex>
                              AM_HAL_IOM_RAW);

    //
    // Check that the EM9304 is ready.
    //
    if ( sStas.bytes[0] != EM9304_STS1_READY_VALUE )
    ba24:	7d3b      	ldrb	r3, [r7, #20]
    ba26:	2bc0      	cmp	r3, #192	; 0xc0
    ba28:	d00f      	beq.n	ba4a <am_devices_em9304_block_read+0xa2>
    {
      // Error
      EM9304_SPISLAVEDESELECT();
    ba2a:	4b4b      	ldr	r3, [pc, #300]	; (bb58 <am_devices_em9304_block_read+0x1b0>)
    ba2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ba30:	601a      	str	r2, [r3, #0]
      am_util_debug_printf("HCI RX Error (STATUS ERROR) EM9304 Not Ready\n");
    ba32:	484a      	ldr	r0, [pc, #296]	; (bb5c <am_devices_em9304_block_read+0x1b4>)
    ba34:	f002 fbe6 	bl	e204 <am_util_stdio_printf>
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
    ba38:	7d3b      	ldrb	r3, [r7, #20]
    ba3a:	4619      	mov	r1, r3
    ba3c:	7d7b      	ldrb	r3, [r7, #21]
    ba3e:	461a      	mov	r2, r3
    ba40:	4847      	ldr	r0, [pc, #284]	; (bb60 <am_devices_em9304_block_read+0x1b8>)
    ba42:	f002 fbdf 	bl	e204 <am_util_stdio_printf>
      return 0;
    ba46:	2300      	movs	r3, #0
    ba48:	e07b      	b.n	bb42 <am_devices_em9304_block_read+0x19a>
    }

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[1];
    ba4a:	7d7b      	ldrb	r3, [r7, #21]
    ba4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ba50:	e059      	b.n	bb06 <am_devices_em9304_block_read+0x15e>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
    ba52:	68fb      	ldr	r3, [r7, #12]
    ba54:	6858      	ldr	r0, [r3, #4]
    ba56:	f107 0218 	add.w	r2, r7, #24
    ba5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ba5e:	9300      	str	r3, [sp, #0]
    ba60:	2301      	movs	r3, #1
    ba62:	2100      	movs	r1, #0
    ba64:	f004 fc5c 	bl	10320 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
    ba68:	68fb      	ldr	r3, [r7, #12]
    ba6a:	6858      	ldr	r0, [r3, #4]
    ba6c:	f107 0214 	add.w	r2, r7, #20
    ba70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ba74:	9300      	str	r3, [sp, #0]
    ba76:	2301      	movs	r3, #1
    ba78:	2100      	movs	r1, #0
    ba7a:	f004 fea3 	bl	107c4 <am_hal_iom_spi_read>
                        AM_HAL_IOM_RAW);

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[0];
    ba7e:	7d3b      	ldrb	r3, [r7, #20]
    ba80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
    ba84:	e03f      	b.n	bb06 <am_devices_em9304_block_read+0x15e>
  {
    uint32_t len = 1;
    ba86:	2301      	movs	r3, #1
    ba88:	623b      	str	r3, [r7, #32]

    if ( (ui8RxBytes - spiRxTotalBytesCount) >= EM9304_BUFFER_SIZE )
    ba8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    ba8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    ba92:	1ad3      	subs	r3, r2, r3
    ba94:	2bff      	cmp	r3, #255	; 0xff
    ba96:	dd0b      	ble.n	bab0 <am_devices_em9304_block_read+0x108>
    {
      //
      // Error. Packet too large.
      //
      am_util_debug_printf("HCI RX Error (STATUS ERROR) Packet Too Large\n");
    ba98:	4832      	ldr	r0, [pc, #200]	; (bb64 <am_devices_em9304_block_read+0x1bc>)
    ba9a:	f002 fbb3 	bl	e204 <am_util_stdio_printf>
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
    ba9e:	7d3b      	ldrb	r3, [r7, #20]
    baa0:	4619      	mov	r1, r3
    baa2:	7d7b      	ldrb	r3, [r7, #21]
    baa4:	461a      	mov	r2, r3
    baa6:	482e      	ldr	r0, [pc, #184]	; (bb60 <am_devices_em9304_block_read+0x1b8>)
    baa8:	f002 fbac 	bl	e204 <am_util_stdio_printf>
      return 0;
    baac:	2300      	movs	r3, #0
    baae:	e048      	b.n	bb42 <am_devices_em9304_block_read+0x19a>
    }
    else
    {
      len = ui8RxBytes;
    bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bab4:	623b      	str	r3, [r7, #32]
    }

#if defined(USE_IOM_NONBLOCKING)
    gIomDone = false;
    bab6:	4b2c      	ldr	r3, [pc, #176]	; (bb68 <am_devices_em9304_block_read+0x1c0>)
    bab8:	2200      	movs	r2, #0
    baba:	701a      	strb	r2, [r3, #0]
    am_hal_iom_spi_read_nb(psDevice->ui32IOMModule,
    babc:	68fb      	ldr	r3, [r7, #12]
    babe:	6858      	ldr	r0, [r3, #4]
    bac0:	4b2a      	ldr	r3, [pc, #168]	; (bb6c <am_devices_em9304_block_read+0x1c4>)
    bac2:	9301      	str	r3, [sp, #4]
    bac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bac8:	9300      	str	r3, [sp, #0]
    baca:	6a3b      	ldr	r3, [r7, #32]
    bacc:	68ba      	ldr	r2, [r7, #8]
    bace:	2100      	movs	r1, #0
    bad0:	f005 f9c2 	bl	10e58 <am_hal_iom_spi_read_nb>
    while(1)
    {
      //
      // Disable interrupt while we decide whether we're going to sleep.
      //
      uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    bad4:	f003 f8b6 	bl	ec44 <am_hal_interrupt_master_disable>
    bad8:	61f8      	str	r0, [r7, #28]

      if (!gIomDone)
    bada:	4b23      	ldr	r3, [pc, #140]	; (bb68 <am_devices_em9304_block_read+0x1c0>)
    badc:	781b      	ldrb	r3, [r3, #0]
    bade:	b2db      	uxtb	r3, r3
    bae0:	f083 0301 	eor.w	r3, r3, #1
    bae4:	b2db      	uxtb	r3, r3
    bae6:	2b00      	cmp	r3, #0
    bae8:	d006      	beq.n	baf8 <am_devices_em9304_block_read+0x150>
      {
        //
        // Sleep while waiting for the IOM transaction to finish.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    baea:	2001      	movs	r0, #1
    baec:	f005 fbba 	bl	11264 <am_hal_sysctrl_sleep>
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
    baf0:	69f8      	ldr	r0, [r7, #28]
    baf2:	f003 f8ab 	bl	ec4c <am_hal_interrupt_master_set>
    baf6:	e7ed      	b.n	bad4 <am_devices_em9304_block_read+0x12c>
      else
      {
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
    baf8:	69f8      	ldr	r0, [r7, #28]
    bafa:	f003 f8a7 	bl	ec4c <am_hal_interrupt_master_set>
        break;
    bafe:	bf00      	nop
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
                        0, pui32Values,
                        len, AM_HAL_IOM_RAW);
#endif

    spiRxTotalBytesCount = len;
    bb00:	6a3b      	ldr	r3, [r7, #32]
    bb02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
    bb06:	f002 fff9 	bl	eafc <am_hal_gpio_input_read>
    bb0a:	460a      	mov	r2, r1
    bb0c:	4601      	mov	r1, r0
    bb0e:	f04f 0300 	mov.w	r3, #0
    bb12:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    bb16:	ea03 0301 	and.w	r3, r3, r1
    bb1a:	ea04 0402 	and.w	r4, r4, r2
    bb1e:	4323      	orrs	r3, r4
    bb20:	d009      	beq.n	bb36 <am_devices_em9304_block_read+0x18e>
    bb22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    bb26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb2a:	429a      	cmp	r2, r3
    bb2c:	d203      	bcs.n	bb36 <am_devices_em9304_block_read+0x18e>
    bb2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb32:	2b00      	cmp	r3, #0
    bb34:	d1a7      	bne.n	ba86 <am_devices_em9304_block_read+0xde>
  }

  // Deselect the EM9304
  EM9304_SPISLAVEDESELECT();
    bb36:	4b08      	ldr	r3, [pc, #32]	; (bb58 <am_devices_em9304_block_read+0x1b0>)
    bb38:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bb3c:	601a      	str	r2, [r3, #0]

  return spiRxTotalBytesCount;
    bb3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
    bb42:	4618      	mov	r0, r3
    bb44:	372c      	adds	r7, #44	; 0x2c
    bb46:	46bd      	mov	sp, r7
    bb48:	bd90      	pop	{r4, r7, pc}
    bb4a:	bf00      	nop
    bb4c:	10001ab8 	.word	0x10001ab8
    bb50:	00011950 	.word	0x00011950
    bb54:	4001009c 	.word	0x4001009c
    bb58:	40010094 	.word	0x40010094
    bb5c:	00011964 	.word	0x00011964
    bb60:	00011918 	.word	0x00011918
    bb64:	00011994 	.word	0x00011994
    bb68:	10001ab9 	.word	0x10001ab9
    bb6c:	0000b6c1 	.word	0x0000b6c1

0000bb70 <am_devices_em9304_spi_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_init(uint32_t ui32Module, const am_hal_iom_config_t *psIomConfig)
{
    bb70:	b580      	push	{r7, lr}
    bb72:	b082      	sub	sp, #8
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
    bb78:	6039      	str	r1, [r7, #0]
    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    bb80:	3304      	adds	r3, #4
    bb82:	031b      	lsls	r3, r3, #12
    bb84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    bb88:	681b      	ldr	r3, [r3, #0]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	db1b      	blt.n	bbc6 <am_devices_em9304_spi_init+0x56>
    {
        return;
    }

#if defined(AM_PART_APOLLO2)
    am_hal_iom_pwrctrl_enable(ui32Module);
    bb8e:	6878      	ldr	r0, [r7, #4]
    bb90:	f003 fb20 	bl	f1d4 <am_hal_iom_pwrctrl_enable>
#endif
    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
    bb94:	6878      	ldr	r0, [r7, #4]
    bb96:	f002 fb53 	bl	e240 <am_bsp_iom_spi_pins_enable>

    //
    // Set the required configuration settings for the IOM.
    //
    am_hal_iom_config(ui32Module, psIomConfig);
    bb9a:	6839      	ldr	r1, [r7, #0]
    bb9c:	6878      	ldr	r0, [r7, #4]
    bb9e:	f003 fbb5 	bl	f30c <am_hal_iom_config>

    // Enable spi
    am_hal_iom_enable(ui32Module);
    bba2:	6878      	ldr	r0, [r7, #4]
    bba4:	f003 fb2a 	bl	f1fc <am_hal_iom_enable>

#if defined(USE_IOM_NONBLOCKING)
    //
    // Enable interrupts.
    //
    am_hal_iom_int_clear(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
    bba8:	2103      	movs	r1, #3
    bbaa:	6878      	ldr	r0, [r7, #4]
    bbac:	f005 f996 	bl	10edc <am_hal_iom_int_clear>
    am_hal_iom_int_enable(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
    bbb0:	2103      	movs	r1, #3
    bbb2:	6878      	ldr	r0, [r7, #4]
    bbb4:	f005 f986 	bl	10ec4 <am_hal_iom_int_enable>

#if (0 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER0);
    bbb8:	2016      	movs	r0, #22
    bbba:	f003 f817 	bl	ebec <am_hal_interrupt_enable>
#endif

    //
    // Reset the IOM Done flag.
    //
    gIomDone = false;
    bbbe:	4b04      	ldr	r3, [pc, #16]	; (bbd0 <am_devices_em9304_spi_init+0x60>)
    bbc0:	2200      	movs	r2, #0
    bbc2:	701a      	strb	r2, [r3, #0]
    bbc4:	e000      	b.n	bbc8 <am_devices_em9304_spi_init+0x58>
        return;
    bbc6:	bf00      	nop
#endif

}
    bbc8:	3708      	adds	r7, #8
    bbca:	46bd      	mov	sp, r7
    bbcc:	bd80      	pop	{r7, pc}
    bbce:	bf00      	nop
    bbd0:	10001ab9 	.word	0x10001ab9

0000bbd4 <am_devices_em9304_spi_awake>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_awake(uint32_t ui32Module)
{
    bbd4:	b580      	push	{r7, lr}
    bbd6:	b082      	sub	sp, #8
    bbd8:	af00      	add	r7, sp, #0
    bbda:	6078      	str	r0, [r7, #4]

    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
    bbdc:	687b      	ldr	r3, [r7, #4]
    bbde:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    bbe2:	3304      	adds	r3, #4
    bbe4:	031b      	lsls	r3, r3, #12
    bbe6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    bbea:	681b      	ldr	r3, [r3, #0]
    bbec:	2b00      	cmp	r3, #0
    bbee:	db09      	blt.n	bc04 <am_devices_em9304_spi_awake+0x30>
    {
        return;
    }

#if defined(AM_PART_APOLLO2)
    am_hal_iom_power_on_restore(ui32Module);
    bbf0:	6878      	ldr	r0, [r7, #4]
    bbf2:	f003 fb2d 	bl	f250 <am_hal_iom_power_on_restore>
#endif

    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
    bbf6:	6878      	ldr	r0, [r7, #4]
    bbf8:	f002 fb22 	bl	e240 <am_bsp_iom_spi_pins_enable>

    // Enable spi
    am_hal_iom_enable(ui32Module);
    bbfc:	6878      	ldr	r0, [r7, #4]
    bbfe:	f003 fafd 	bl	f1fc <am_hal_iom_enable>
    bc02:	e000      	b.n	bc06 <am_devices_em9304_spi_awake+0x32>
        return;
    bc04:	bf00      	nop
}
    bc06:	3708      	adds	r7, #8
    bc08:	46bd      	mov	sp, r7
    bc0a:	bd80      	pop	{r7, pc}

0000bc0c <am_devices_em9304_configure_spi_sleep>:

void
am_devices_em9304_configure_spi_sleep(void)
{
    bc0c:	b580      	push	{r7, lr}
    bc0e:	b084      	sub	sp, #16
    bc10:	af00      	add	r7, sp, #0
  am_hal_gpio_state_write(AM_BSP_GPIO_IOM5_MISO, AM_HAL_GPIO_OUTPUT_CLEAR);
  am_hal_gpio_state_write(AM_BSP_GPIO_IOM5_MOSI, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif
#else
#if (0 == AM_BSP_EM9304_IOM)
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_SCK, AM_HAL_PIN_OUTPUT);
    bc12:	f003 f817 	bl	ec44 <am_hal_interrupt_master_disable>
    bc16:	4603      	mov	r3, r0
    bc18:	60fb      	str	r3, [r7, #12]
    bc1a:	4b3a      	ldr	r3, [pc, #232]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bc1c:	2273      	movs	r2, #115	; 0x73
    bc1e:	601a      	str	r2, [r3, #0]
    bc20:	4a39      	ldr	r2, [pc, #228]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bc22:	4b39      	ldr	r3, [pc, #228]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bc24:	681b      	ldr	r3, [r3, #0]
    bc26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    bc2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    bc2e:	6013      	str	r3, [r2, #0]
    bc30:	4a36      	ldr	r2, [pc, #216]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bc32:	4b36      	ldr	r3, [pc, #216]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bc34:	681b      	ldr	r3, [r3, #0]
    bc36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    bc3a:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
    bc3e:	6013      	str	r3, [r2, #0]
    bc40:	4a33      	ldr	r2, [pc, #204]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bc42:	4b33      	ldr	r3, [pc, #204]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bc44:	681b      	ldr	r3, [r3, #0]
    bc46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    bc4a:	6013      	str	r3, [r2, #0]
    bc4c:	4b2d      	ldr	r3, [pc, #180]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bc4e:	2200      	movs	r2, #0
    bc50:	601a      	str	r2, [r3, #0]
    bc52:	68fb      	ldr	r3, [r7, #12]
    bc54:	4618      	mov	r0, r3
    bc56:	f002 fff9 	bl	ec4c <am_hal_interrupt_master_set>
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_MISO, AM_HAL_PIN_OUTPUT);
    bc5a:	f002 fff3 	bl	ec44 <am_hal_interrupt_master_disable>
    bc5e:	4603      	mov	r3, r0
    bc60:	60bb      	str	r3, [r7, #8]
    bc62:	4b28      	ldr	r3, [pc, #160]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bc64:	2273      	movs	r2, #115	; 0x73
    bc66:	601a      	str	r2, [r3, #0]
    bc68:	4a27      	ldr	r2, [pc, #156]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bc6a:	4b27      	ldr	r3, [pc, #156]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bc6c:	681b      	ldr	r3, [r3, #0]
    bc6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    bc72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    bc76:	6013      	str	r3, [r2, #0]
    bc78:	4a24      	ldr	r2, [pc, #144]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bc7a:	4b24      	ldr	r3, [pc, #144]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    bc82:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    bc86:	6013      	str	r3, [r2, #0]
    bc88:	4a21      	ldr	r2, [pc, #132]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bc8a:	4b21      	ldr	r3, [pc, #132]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bc8c:	681b      	ldr	r3, [r3, #0]
    bc8e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    bc92:	6013      	str	r3, [r2, #0]
    bc94:	4b1b      	ldr	r3, [pc, #108]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bc96:	2200      	movs	r2, #0
    bc98:	601a      	str	r2, [r3, #0]
    bc9a:	68bb      	ldr	r3, [r7, #8]
    bc9c:	4618      	mov	r0, r3
    bc9e:	f002 ffd5 	bl	ec4c <am_hal_interrupt_master_set>
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM0_MOSI, AM_HAL_PIN_OUTPUT);
    bca2:	f002 ffcf 	bl	ec44 <am_hal_interrupt_master_disable>
    bca6:	4603      	mov	r3, r0
    bca8:	607b      	str	r3, [r7, #4]
    bcaa:	4b16      	ldr	r3, [pc, #88]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bcac:	2273      	movs	r2, #115	; 0x73
    bcae:	601a      	str	r2, [r3, #0]
    bcb0:	4a15      	ldr	r2, [pc, #84]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bcb2:	4b15      	ldr	r3, [pc, #84]	; (bd08 <am_devices_em9304_configure_spi_sleep+0xfc>)
    bcb4:	681b      	ldr	r3, [r3, #0]
    bcb6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    bcba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    bcbe:	6013      	str	r3, [r2, #0]
    bcc0:	4a12      	ldr	r2, [pc, #72]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bcc2:	4b12      	ldr	r3, [pc, #72]	; (bd0c <am_devices_em9304_configure_spi_sleep+0x100>)
    bcc4:	681b      	ldr	r3, [r3, #0]
    bcc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bcca:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
    bcce:	6013      	str	r3, [r2, #0]
    bcd0:	4a0f      	ldr	r2, [pc, #60]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bcd2:	4b0f      	ldr	r3, [pc, #60]	; (bd10 <am_devices_em9304_configure_spi_sleep+0x104>)
    bcd4:	681b      	ldr	r3, [r3, #0]
    bcd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bcda:	6013      	str	r3, [r2, #0]
    bcdc:	4b09      	ldr	r3, [pc, #36]	; (bd04 <am_devices_em9304_configure_spi_sleep+0xf8>)
    bcde:	2200      	movs	r2, #0
    bce0:	601a      	str	r2, [r3, #0]
    bce2:	687b      	ldr	r3, [r7, #4]
    bce4:	4618      	mov	r0, r3
    bce6:	f002 ffb1 	bl	ec4c <am_hal_interrupt_master_set>

  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM0_SCK);
    bcea:	4b0a      	ldr	r3, [pc, #40]	; (bd14 <am_devices_em9304_configure_spi_sleep+0x108>)
    bcec:	2220      	movs	r2, #32
    bcee:	601a      	str	r2, [r3, #0]
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM0_MISO);
    bcf0:	4b08      	ldr	r3, [pc, #32]	; (bd14 <am_devices_em9304_configure_spi_sleep+0x108>)
    bcf2:	2240      	movs	r2, #64	; 0x40
    bcf4:	601a      	str	r2, [r3, #0]
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM0_MOSI);
    bcf6:	4b07      	ldr	r3, [pc, #28]	; (bd14 <am_devices_em9304_configure_spi_sleep+0x108>)
    bcf8:	2280      	movs	r2, #128	; 0x80
    bcfa:	601a      	str	r2, [r3, #0]
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM5_MISO);
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM5_MOSI);
#endif
#endif // AM_APOLLO3_GPIO

}
    bcfc:	bf00      	nop
    bcfe:	3710      	adds	r7, #16
    bd00:	46bd      	mov	sp, r7
    bd02:	bd80      	pop	{r7, pc}
    bd04:	40010060 	.word	0x40010060
    bd08:	40010040 	.word	0x40010040
    bd0c:	40010004 	.word	0x40010004
    bd10:	400100e4 	.word	0x400100e4
    bd14:	40010098 	.word	0x40010098

0000bd18 <am_devices_em9304_spi_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_sleep(uint32_t ui32Module)
{
    bd18:	b580      	push	{r7, lr}
    bd1a:	b082      	sub	sp, #8
    bd1c:	af00      	add	r7, sp, #0
    bd1e:	6078      	str	r0, [r7, #4]
    if ( !(AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M) )
    bd20:	687b      	ldr	r3, [r7, #4]
    bd22:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    bd26:	3304      	adds	r3, #4
    bd28:	031b      	lsls	r3, r3, #12
    bd2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    bd2e:	681b      	ldr	r3, [r3, #0]
    bd30:	2b00      	cmp	r3, #0
    bd32:	da08      	bge.n	bd46 <am_devices_em9304_spi_sleep+0x2e>
    {
        return;
    }

    am_hal_iom_disable(ui32Module);
    bd34:	6878      	ldr	r0, [r7, #4]
    bd36:	f003 fa77 	bl	f228 <am_hal_iom_disable>

#if defined(AM_PART_APOLLO)
    am_bsp_iom_spi_pins_disable(ui32Module);
#else
    am_hal_iom_power_off_save(ui32Module);
    bd3a:	6878      	ldr	r0, [r7, #4]
    bd3c:	f003 fab8 	bl	f2b0 <am_hal_iom_power_off_save>
    am_devices_em9304_configure_spi_sleep();
    bd40:	f7ff ff64 	bl	bc0c <am_devices_em9304_configure_spi_sleep>
    bd44:	e000      	b.n	bd48 <am_devices_em9304_spi_sleep+0x30>
        return;
    bd46:	bf00      	nop
#endif
}
    bd48:	3708      	adds	r7, #8
    bd4a:	46bd      	mov	sp, r7
    bd4c:	bd80      	pop	{r7, pc}
	...

0000bd50 <am_devices_em9304_config_pins>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_config_pins(void)
{
    bd50:	b580      	push	{r7, lr}
    bd52:	b084      	sub	sp, #16
    bd54:	af00      	add	r7, sp, #0
    am_hal_gpio_state_write(AM_BSP_GPIO_EM9304_CS, AM_HAL_GPIO_OUTPUT_SET);

    // Note - interrupt polarity is handled by the pin configuration.
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_bsp_pin_enable(EM9304_CS);
    bd56:	f002 ff75 	bl	ec44 <am_hal_interrupt_master_disable>
    bd5a:	4603      	mov	r3, r0
    bd5c:	60fb      	str	r3, [r7, #12]
    bd5e:	4b32      	ldr	r3, [pc, #200]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    bd60:	2273      	movs	r2, #115	; 0x73
    bd62:	601a      	str	r2, [r3, #0]
    bd64:	4a31      	ldr	r2, [pc, #196]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bd66:	4b31      	ldr	r3, [pc, #196]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bd68:	681b      	ldr	r3, [r3, #0]
    bd6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    bd6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bd72:	6013      	str	r3, [r2, #0]
    bd74:	4a2e      	ldr	r2, [pc, #184]	; (be30 <am_devices_em9304_config_pins+0xe0>)
    bd76:	4b2e      	ldr	r3, [pc, #184]	; (be30 <am_devices_em9304_config_pins+0xe0>)
    bd78:	681b      	ldr	r3, [r3, #0]
    bd7a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    bd7e:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    bd82:	6013      	str	r3, [r2, #0]
    bd84:	4a2b      	ldr	r2, [pc, #172]	; (be34 <am_devices_em9304_config_pins+0xe4>)
    bd86:	4b2b      	ldr	r3, [pc, #172]	; (be34 <am_devices_em9304_config_pins+0xe4>)
    bd88:	681b      	ldr	r3, [r3, #0]
    bd8a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    bd8e:	6013      	str	r3, [r2, #0]
    bd90:	4b25      	ldr	r3, [pc, #148]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    bd92:	2200      	movs	r2, #0
    bd94:	601a      	str	r2, [r3, #0]
    bd96:	68fb      	ldr	r3, [r7, #12]
    bd98:	4618      	mov	r0, r3
    bd9a:	f002 ff57 	bl	ec4c <am_hal_interrupt_master_set>
    am_bsp_pin_enable(EM9304_INT);
    bd9e:	f002 ff51 	bl	ec44 <am_hal_interrupt_master_disable>
    bda2:	4603      	mov	r3, r0
    bda4:	60bb      	str	r3, [r7, #8]
    bda6:	4b20      	ldr	r3, [pc, #128]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    bda8:	2273      	movs	r2, #115	; 0x73
    bdaa:	601a      	str	r2, [r3, #0]
    bdac:	4a1f      	ldr	r2, [pc, #124]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bdae:	4b1f      	ldr	r3, [pc, #124]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bdb0:	681b      	ldr	r3, [r3, #0]
    bdb2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    bdb6:	6013      	str	r3, [r2, #0]
    bdb8:	4a1f      	ldr	r2, [pc, #124]	; (be38 <am_devices_em9304_config_pins+0xe8>)
    bdba:	4b1f      	ldr	r3, [pc, #124]	; (be38 <am_devices_em9304_config_pins+0xe8>)
    bdbc:	681b      	ldr	r3, [r3, #0]
    bdbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bdc2:	f043 031a 	orr.w	r3, r3, #26
    bdc6:	6013      	str	r3, [r2, #0]
    bdc8:	4a1c      	ldr	r2, [pc, #112]	; (be3c <am_devices_em9304_config_pins+0xec>)
    bdca:	4b1c      	ldr	r3, [pc, #112]	; (be3c <am_devices_em9304_config_pins+0xec>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bdd2:	6013      	str	r3, [r2, #0]
    bdd4:	4b14      	ldr	r3, [pc, #80]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    bdd6:	2200      	movs	r2, #0
    bdd8:	601a      	str	r2, [r3, #0]
    bdda:	68bb      	ldr	r3, [r7, #8]
    bddc:	4618      	mov	r0, r3
    bdde:	f002 ff35 	bl	ec4c <am_hal_interrupt_master_set>

    am_hal_gpio_out_bit_set(AM_BSP_GPIO_EM9304_CS);
    bde2:	4b17      	ldr	r3, [pc, #92]	; (be40 <am_devices_em9304_config_pins+0xf0>)
    bde4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bde8:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_EM9304_INT, AM_HAL_GPIO_RISING);
    bdea:	f002 ff2b 	bl	ec44 <am_hal_interrupt_master_disable>
    bdee:	4603      	mov	r3, r0
    bdf0:	607b      	str	r3, [r7, #4]
    bdf2:	4b0d      	ldr	r3, [pc, #52]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    bdf4:	2273      	movs	r2, #115	; 0x73
    bdf6:	601a      	str	r2, [r3, #0]
    bdf8:	4a0c      	ldr	r2, [pc, #48]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bdfa:	4b0c      	ldr	r3, [pc, #48]	; (be2c <am_devices_em9304_config_pins+0xdc>)
    bdfc:	681b      	ldr	r3, [r3, #0]
    bdfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    be02:	6013      	str	r3, [r2, #0]
    be04:	4b08      	ldr	r3, [pc, #32]	; (be28 <am_devices_em9304_config_pins+0xd8>)
    be06:	2200      	movs	r2, #0
    be08:	601a      	str	r2, [r3, #0]
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	4618      	mov	r0, r3
    be0e:	f002 ff1d 	bl	ec4c <am_hal_interrupt_master_set>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    be12:	f04f 0000 	mov.w	r0, #0
    be16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    be1a:	f002 fea9 	bl	eb70 <am_hal_gpio_int_clear>
#endif // AM_APOLLO3_GPIO
}
    be1e:	bf00      	nop
    be20:	3710      	adds	r7, #16
    be22:	46bd      	mov	sp, r7
    be24:	bd80      	pop	{r7, pc}
    be26:	bf00      	nop
    be28:	40010060 	.word	0x40010060
    be2c:	40010054 	.word	0x40010054
    be30:	40010028 	.word	0x40010028
    be34:	40010108 	.word	0x40010108
    be38:	4001002c 	.word	0x4001002c
    be3c:	4001010c 	.word	0x4001010c
    be40:	40010094 	.word	0x40010094

0000be44 <am_devices_em9304_mac_set>:
//! @return Success.
//
//*****************************************************************************
bool
am_devices_em9304_mac_set(const uint8_t *pui8MacAddress)
{
    be44:	b480      	push	{r7}
    be46:	b085      	sub	sp, #20
    be48:	af00      	add	r7, sp, #0
    be4a:	6078      	str	r0, [r7, #4]
    uint32_t i;

    //
    // Copy the 6-byte MAC address into our global variable.
    //
    for ( i = 0; i < 6; i++ )
    be4c:	2300      	movs	r3, #0
    be4e:	60fb      	str	r3, [r7, #12]
    be50:	e00b      	b.n	be6a <am_devices_em9304_mac_set+0x26>
    {
        g_BLEMacAddress[i] = *pui8MacAddress++;
    be52:	687b      	ldr	r3, [r7, #4]
    be54:	1c5a      	adds	r2, r3, #1
    be56:	607a      	str	r2, [r7, #4]
    be58:	7819      	ldrb	r1, [r3, #0]
    be5a:	4a09      	ldr	r2, [pc, #36]	; (be80 <am_devices_em9304_mac_set+0x3c>)
    be5c:	68fb      	ldr	r3, [r7, #12]
    be5e:	4413      	add	r3, r2
    be60:	460a      	mov	r2, r1
    be62:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < 6; i++ )
    be64:	68fb      	ldr	r3, [r7, #12]
    be66:	3301      	adds	r3, #1
    be68:	60fb      	str	r3, [r7, #12]
    be6a:	68fb      	ldr	r3, [r7, #12]
    be6c:	2b05      	cmp	r3, #5
    be6e:	d9f0      	bls.n	be52 <am_devices_em9304_mac_set+0xe>
    }

    //HciVendorSpecificCmd(0xFC02, 6, g_BLEMacAddress);

    return true;
    be70:	2301      	movs	r3, #1
}
    be72:	4618      	mov	r0, r3
    be74:	3714      	adds	r7, #20
    be76:	46bd      	mov	sp, r7
    be78:	f85d 7b04 	ldr.w	r7, [sp], #4
    be7c:	4770      	bx	lr
    be7e:	bf00      	nop
    be80:	10001090 	.word	0x10001090

0000be84 <am_devices_em9304_enable_interrupt>:

void am_devices_em9304_enable_interrupt(void)
{
    be84:	b580      	push	{r7, lr}
    be86:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    be88:	f04f 0000 	mov.w	r0, #0
    be8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    be90:	f002 fe44 	bl	eb1c <am_hal_gpio_int_enable>
#endif
}
    be94:	bf00      	nop
    be96:	bd80      	pop	{r7, pc}

0000be98 <am_devices_em9304_disable_interrupt>:

void am_devices_em9304_disable_interrupt(void)
{
    be98:	b580      	push	{r7, lr}
    be9a:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    be9c:	f04f 0000 	mov.w	r0, #0
    bea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    bea4:	f002 fe4a 	bl	eb3c <am_hal_gpio_int_disable>
#endif
}
    bea8:	bf00      	nop
    beaa:	bd80      	pop	{r7, pc}

0000beac <waitEM9304Response>:
//! @return none.
//
//*****************************************************************************
uint32_t
waitEM9304Response(void)
{
    beac:	b580      	push	{r7, lr}
    beae:	b082      	sub	sp, #8
    beb0:	af00      	add	r7, sp, #0
  uint32_t numBytesRx;
  
  // HCI Respone should return in 1-2 messages at most, but driver returns
  // 0 bytes when nothing is available, so wait up to 10msec.
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    beb2:	2300      	movs	r3, #0
    beb4:	607b      	str	r3, [r7, #4]
    beb6:	e01a      	b.n	beee <waitEM9304Response+0x42>
  {
    numBytesRx = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer,0);
    beb8:	2200      	movs	r2, #0
    beba:	4911      	ldr	r1, [pc, #68]	; (bf00 <waitEM9304Response+0x54>)
    bebc:	4811      	ldr	r0, [pc, #68]	; (bf04 <waitEM9304Response+0x58>)
    bebe:	f7ff fd73 	bl	b9a8 <am_devices_em9304_block_read>
    bec2:	6038      	str	r0, [r7, #0]
    // Look for "no message" return while filtering out the EM9304 vendor specific events.
    if ((numBytesRx !=0) && (!((numBytesRx == 4) && (0x0000FF04 == (g_pui32HCIRXBuffer[0] & 0x0000FFFF)))))
    bec4:	683b      	ldr	r3, [r7, #0]
    bec6:	2b00      	cmp	r3, #0
    bec8:	d00b      	beq.n	bee2 <waitEM9304Response+0x36>
    beca:	683b      	ldr	r3, [r7, #0]
    becc:	2b04      	cmp	r3, #4
    bece:	d106      	bne.n	bede <waitEM9304Response+0x32>
    bed0:	4b0b      	ldr	r3, [pc, #44]	; (bf00 <waitEM9304Response+0x54>)
    bed2:	681b      	ldr	r3, [r3, #0]
    bed4:	b29b      	uxth	r3, r3
    bed6:	f64f 7204 	movw	r2, #65284	; 0xff04
    beda:	4293      	cmp	r3, r2
    bedc:	d001      	beq.n	bee2 <waitEM9304Response+0x36>
    {
      return EM9304_INIT_STATUS_SUCCESS;
    bede:	2300      	movs	r3, #0
    bee0:	e009      	b.n	bef6 <waitEM9304Response+0x4a>
    }
    am_util_delay_ms(EM9304_ATTEMPT_DELAY_MS);
    bee2:	2001      	movs	r0, #1
    bee4:	f001 fa70 	bl	d3c8 <am_util_delay_ms>
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    bee8:	687b      	ldr	r3, [r7, #4]
    beea:	3301      	adds	r3, #1
    beec:	607b      	str	r3, [r7, #4]
    beee:	687b      	ldr	r3, [r7, #4]
    bef0:	2b63      	cmp	r3, #99	; 0x63
    bef2:	d9e1      	bls.n	beb8 <waitEM9304Response+0xc>
  }
  return EM9304_INIT_STATUS_ERROR;
    bef4:	2301      	movs	r3, #1
  
}
    bef6:	4618      	mov	r0, r3
    bef8:	3708      	adds	r7, #8
    befa:	46bd      	mov	sp, r7
    befc:	bd80      	pop	{r7, pc}
    befe:	bf00      	nop
    bf00:	10001abc 	.word	0x10001abc
    bf04:	00012e30 	.word	0x00012e30

0000bf08 <validEM9304Patches>:
//! @return bool (TRUE = patches are valid).
//
//*****************************************************************************
bool
validEM9304Patches(void)
{
    bf08:	b580      	push	{r7, lr}
    bf0a:	af00      	add	r7, sp, #0
		am_util_debug_printf("em9304_patches.c contains NULL patch only\n");
    return false;
  }
  else
  {
		am_util_debug_printf("Valid em9304_patches.c file found\n");
    bf0c:	4802      	ldr	r0, [pc, #8]	; (bf18 <validEM9304Patches+0x10>)
    bf0e:	f002 f979 	bl	e204 <am_util_stdio_printf>
    return true;
    bf12:	2301      	movs	r3, #1
  }
}
    bf14:	4618      	mov	r0, r3
    bf16:	bd80      	pop	{r7, pc}
    bf18:	000119c4 	.word	0x000119c4

0000bf1c <invalidateEM9304Patch>:
//! @return status.
//
//*****************************************************************************
#ifdef INVALIDATE_UNKNOWN_PATCHES
static uint32_t invalidateEM9304Patch(uint32_t addr, uint32_t size)
{
    bf1c:	b590      	push	{r4, r7, lr}
    bf1e:	b089      	sub	sp, #36	; 0x24
    bf20:	af00      	add	r7, sp, #0
    bf22:	6078      	str	r0, [r7, #4]
    bf24:	6039      	str	r1, [r7, #0]
  uint8_t   *bytePtr = (uint8_t *)&g_pui32HCIRXBuffer;
    bf26:	4b24      	ldr	r3, [pc, #144]	; (bfb8 <invalidateEM9304Patch+0x9c>)
    bf28:	61fb      	str	r3, [r7, #28]
  
  uint8_t payload[] = { 0x22, 0xFC, //WriteAtAddr command
    bf2a:	4b24      	ldr	r3, [pc, #144]	; (bfbc <invalidateEM9304Patch+0xa0>)
    bf2c:	f107 040c 	add.w	r4, r7, #12
    bf30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    bf32:	c407      	stmia	r4!, {r0, r1, r2}
    bf34:	8023      	strh	r3, [r4, #0]
    bf36:	3402      	adds	r4, #2
    bf38:	0c1b      	lsrs	r3, r3, #16
    bf3a:	7023      	strb	r3, [r4, #0]
  0, 0, 0, 0, // container address placeholder
  0x33, 0x39, 0x6D, 0x65, //signature
  0, 0, 0, 0 }; //size placeholder
  
  
  am_util_debug_printf("Invalidating patch at %x\n", addr);
    bf3c:	6879      	ldr	r1, [r7, #4]
    bf3e:	4820      	ldr	r0, [pc, #128]	; (bfc0 <invalidateEM9304Patch+0xa4>)
    bf40:	f002 f960 	bl	e204 <am_util_stdio_printf>
  
  payload[3] = (uint8_t)(addr & 0xFF);
    bf44:	687b      	ldr	r3, [r7, #4]
    bf46:	b2db      	uxtb	r3, r3
    bf48:	73fb      	strb	r3, [r7, #15]
  payload[4] = (uint8_t)((addr & 0xFF00) >> 8);
    bf4a:	687b      	ldr	r3, [r7, #4]
    bf4c:	0a1b      	lsrs	r3, r3, #8
    bf4e:	b2db      	uxtb	r3, r3
    bf50:	743b      	strb	r3, [r7, #16]
  payload[5] = (uint8_t)((addr & 0xFF0000) >> 16);
    bf52:	687b      	ldr	r3, [r7, #4]
    bf54:	0c1b      	lsrs	r3, r3, #16
    bf56:	b2db      	uxtb	r3, r3
    bf58:	747b      	strb	r3, [r7, #17]
  payload[6] = (uint8_t)((addr & 0xFF000000) >> 24);
    bf5a:	687b      	ldr	r3, [r7, #4]
    bf5c:	0e1b      	lsrs	r3, r3, #24
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	74bb      	strb	r3, [r7, #18]
  
  size |= 0x36000000;  // mask the size to change the patch (invalidate it).
    bf62:	683b      	ldr	r3, [r7, #0]
    bf64:	f043 5358 	orr.w	r3, r3, #905969664	; 0x36000000
    bf68:	603b      	str	r3, [r7, #0]
  
  payload[11] = (uint8_t)(size & 0xFF);
    bf6a:	683b      	ldr	r3, [r7, #0]
    bf6c:	b2db      	uxtb	r3, r3
    bf6e:	75fb      	strb	r3, [r7, #23]
  payload[12] = (uint8_t)((size & 0xFF00) >> 8);
    bf70:	683b      	ldr	r3, [r7, #0]
    bf72:	0a1b      	lsrs	r3, r3, #8
    bf74:	b2db      	uxtb	r3, r3
    bf76:	763b      	strb	r3, [r7, #24]
  payload[13] = (uint8_t)((size & 0xFF0000) >> 16);
    bf78:	683b      	ldr	r3, [r7, #0]
    bf7a:	0c1b      	lsrs	r3, r3, #16
    bf7c:	b2db      	uxtb	r3, r3
    bf7e:	767b      	strb	r3, [r7, #25]
  payload[14] = (uint8_t)((size & 0xFF000000) >> 24);
    bf80:	683b      	ldr	r3, [r7, #0]
    bf82:	0e1b      	lsrs	r3, r3, #24
    bf84:	b2db      	uxtb	r3, r3
    bf86:	76bb      	strb	r3, [r7, #26]
  
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, payload, sizeof(payload));
    bf88:	f107 020c 	add.w	r2, r7, #12
    bf8c:	230f      	movs	r3, #15
    bf8e:	2101      	movs	r1, #1
    bf90:	480c      	ldr	r0, [pc, #48]	; (bfc4 <invalidateEM9304Patch+0xa8>)
    bf92:	f7ff fc47 	bl	b824 <am_devices_em9304_block_write>
  
  if ((EM9304_INIT_STATUS_SUCCESS != waitEM9304Response()) || (bytePtr[HCI_STATUS_OFFSET] != 0))
    bf96:	f7ff ff89 	bl	beac <waitEM9304Response>
    bf9a:	4603      	mov	r3, r0
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d104      	bne.n	bfaa <invalidateEM9304Patch+0x8e>
    bfa0:	69fb      	ldr	r3, [r7, #28]
    bfa2:	3306      	adds	r3, #6
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d001      	beq.n	bfae <invalidateEM9304Patch+0x92>
  {
    return EM9304_INIT_STATUS_ERROR;
    bfaa:	2301      	movs	r3, #1
    bfac:	e000      	b.n	bfb0 <invalidateEM9304Patch+0x94>
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    bfae:	2300      	movs	r3, #0
}
    bfb0:	4618      	mov	r0, r3
    bfb2:	3724      	adds	r7, #36	; 0x24
    bfb4:	46bd      	mov	sp, r7
    bfb6:	bd90      	pop	{r4, r7, pc}
    bfb8:	10001abc 	.word	0x10001abc
    bfbc:	00011a04 	.word	0x00011a04
    bfc0:	000119e8 	.word	0x000119e8
    bfc4:	00012e30 	.word	0x00012e30

0000bfc8 <queryEM9304Patches>:
//! @return status.
//
//*****************************************************************************
uint32_t
queryEM9304Patches(void)
{
    bfc8:	b580      	push	{r7, lr}
    bfca:	b096      	sub	sp, #88	; 0x58
    bfcc:	af06      	add	r7, sp, #24
  uint32_t	containerCount;
  uint32_t	buildNumber, userBuildNumber, containerVersion, containerType, containerID;
#ifdef INVALIDATE_UNKNOWN_PATCHES
  uint32_t  containerAddr, containerSize;
  bool      invalidatePatch = false;
    bfce:	2300      	movs	r3, #0
    bfd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif
  uint8_t	*pBuf = (uint8_t *)g_pui32HCIRXBuffer;
    bfd4:	4b7b      	ldr	r3, [pc, #492]	; (c1c4 <queryEM9304Patches+0x1fc>)
    bfd6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  // Initialize the container info patch status
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    bfd8:	2300      	movs	r3, #0
    bfda:	637b      	str	r3, [r7, #52]	; 0x34
    bfdc:	e064      	b.n	c0a8 <queryEM9304Patches+0xe0>
  {
    // Check patch for enabling 32Khz clck from Apollo MCU
    if ( (g_pEm9304Patches[patch].userBuildNumber == 2)
    bfde:	497a      	ldr	r1, [pc, #488]	; (c1c8 <queryEM9304Patches+0x200>)
    bfe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bfe2:	4613      	mov	r3, r2
    bfe4:	009b      	lsls	r3, r3, #2
    bfe6:	4413      	add	r3, r2
    bfe8:	005b      	lsls	r3, r3, #1
    bfea:	440b      	add	r3, r1
    bfec:	3302      	adds	r3, #2
    bfee:	881b      	ldrh	r3, [r3, #0]
    bff0:	2b02      	cmp	r3, #2
    bff2:	d14a      	bne.n	c08a <queryEM9304Patches+0xc2>
        && (g_pEm9304Patches[patch].containerID == SLEEP_CLK_PATCH_CONTAINER_ID))
    bff4:	4974      	ldr	r1, [pc, #464]	; (c1c8 <queryEM9304Patches+0x200>)
    bff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bff8:	4613      	mov	r3, r2
    bffa:	009b      	lsls	r3, r3, #2
    bffc:	4413      	add	r3, r2
    bffe:	005b      	lsls	r3, r3, #1
    c000:	440b      	add	r3, r1
    c002:	3306      	adds	r3, #6
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	2b16      	cmp	r3, #22
    c008:	d13f      	bne.n	c08a <queryEM9304Patches+0xc2>
      uint32_t  ui32PN;

      //
      // Device identification
      //
      ui32PN = AM_REG(MCUCTRL, CHIP_INFO)  &
    c00a:	4b70      	ldr	r3, [pc, #448]	; (c1cc <queryEM9304Patches+0x204>)
    c00c:	681b      	ldr	r3, [r3, #0]
    c00e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c012:	627b      	str	r3, [r7, #36]	; 0x24
               AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

      #ifdef ENABLE_32K_CLK_FROM_APOLLO
      // Currently only enable this for Apollo2-Blue
      if (ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLOBL) {
    c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c016:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
    c01a:	d141      	bne.n	c0a0 <queryEM9304Patches+0xd8>
        g_pEm9304Patches[patch].applyPatch = true;
    c01c:	496a      	ldr	r1, [pc, #424]	; (c1c8 <queryEM9304Patches+0x200>)
    c01e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c020:	4613      	mov	r3, r2
    c022:	009b      	lsls	r3, r3, #2
    c024:	4413      	add	r3, r2
    c026:	005b      	lsls	r3, r3, #1
    c028:	440b      	add	r3, r1
    c02a:	3307      	adds	r3, #7
    c02c:	2201      	movs	r2, #1
    c02e:	701a      	strb	r2, [r3, #0]

        // GPIO 24 in Apollo2-blue connected to LFCLK in EM9304
        am_hal_gpio_pin_config(24, AM_HAL_PIN_24_CLKOUT);
    c030:	f002 fe08 	bl	ec44 <am_hal_interrupt_master_disable>
    c034:	4603      	mov	r3, r0
    c036:	607b      	str	r3, [r7, #4]
    c038:	4b65      	ldr	r3, [pc, #404]	; (c1d0 <queryEM9304Patches+0x208>)
    c03a:	2273      	movs	r2, #115	; 0x73
    c03c:	601a      	str	r2, [r3, #0]
    c03e:	4a65      	ldr	r2, [pc, #404]	; (c1d4 <queryEM9304Patches+0x20c>)
    c040:	4b64      	ldr	r3, [pc, #400]	; (c1d4 <queryEM9304Patches+0x20c>)
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	f023 0307 	bic.w	r3, r3, #7
    c048:	6013      	str	r3, [r2, #0]
    c04a:	4a63      	ldr	r2, [pc, #396]	; (c1d8 <queryEM9304Patches+0x210>)
    c04c:	4b62      	ldr	r3, [pc, #392]	; (c1d8 <queryEM9304Patches+0x210>)
    c04e:	681b      	ldr	r3, [r3, #0]
    c050:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c054:	f043 0310 	orr.w	r3, r3, #16
    c058:	6013      	str	r3, [r2, #0]
    c05a:	4a60      	ldr	r2, [pc, #384]	; (c1dc <queryEM9304Patches+0x214>)
    c05c:	4b5f      	ldr	r3, [pc, #380]	; (c1dc <queryEM9304Patches+0x214>)
    c05e:	681b      	ldr	r3, [r3, #0]
    c060:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c064:	6013      	str	r3, [r2, #0]
    c066:	4b5a      	ldr	r3, [pc, #360]	; (c1d0 <queryEM9304Patches+0x208>)
    c068:	2200      	movs	r2, #0
    c06a:	601a      	str	r2, [r3, #0]
    c06c:	687b      	ldr	r3, [r7, #4]
    c06e:	4618      	mov	r0, r3
    c070:	f002 fdec 	bl	ec4c <am_hal_interrupt_master_set>
        am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
    c074:	2001      	movs	r0, #1
    c076:	f002 fad3 	bl	e620 <am_hal_clkgen_osc_start>
        am_util_delay_ms(500);
    c07a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    c07e:	f001 f9a3 	bl	d3c8 <am_util_delay_ms>
        am_hal_clkgen_clkout_enable(AM_HAL_CLKGEN_CLKOUT_CKSEL_XT);
    c082:	2017      	movs	r0, #23
    c084:	f002 fad6 	bl	e634 <am_hal_clkgen_clkout_enable>
    {
    c088:	e00a      	b.n	c0a0 <queryEM9304Patches+0xd8>
      }
      #endif
    }
    else {
      g_pEm9304Patches[patch].applyPatch = true;
    c08a:	494f      	ldr	r1, [pc, #316]	; (c1c8 <queryEM9304Patches+0x200>)
    c08c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c08e:	4613      	mov	r3, r2
    c090:	009b      	lsls	r3, r3, #2
    c092:	4413      	add	r3, r2
    c094:	005b      	lsls	r3, r3, #1
    c096:	440b      	add	r3, r1
    c098:	3307      	adds	r3, #7
    c09a:	2201      	movs	r2, #1
    c09c:	701a      	strb	r2, [r3, #0]
    c09e:	e000      	b.n	c0a2 <queryEM9304Patches+0xda>
    {
    c0a0:	bf00      	nop
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c0a4:	3301      	adds	r3, #1
    c0a6:	637b      	str	r3, [r7, #52]	; 0x34
    c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c0aa:	2b05      	cmp	r3, #5
    c0ac:	d997      	bls.n	bfde <queryEM9304Patches+0x16>
    }
  }
  
  // Send the EM_SetSleepOptions command to disable sleep and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SleepDisable, sizeof(g_pui8EM_SleepDisable) );
    c0ae:	2304      	movs	r3, #4
    c0b0:	4a4b      	ldr	r2, [pc, #300]	; (c1e0 <queryEM9304Patches+0x218>)
    c0b2:	2101      	movs	r1, #1
    c0b4:	484b      	ldr	r0, [pc, #300]	; (c1e4 <queryEM9304Patches+0x21c>)
    c0b6:	f7ff fbb5 	bl	b824 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c0ba:	f7ff fef7 	bl	beac <waitEM9304Response>
    c0be:	4603      	mov	r3, r0
    c0c0:	2b00      	cmp	r3, #0
    c0c2:	d004      	beq.n	c0ce <queryEM9304Patches+0x106>
  {
    am_util_debug_printf("No Response to EM9304 Sleep Disable\n");
    c0c4:	4848      	ldr	r0, [pc, #288]	; (c1e8 <queryEM9304Patches+0x220>)
    c0c6:	f002 f89d 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c0ca:	2301      	movs	r3, #1
    c0cc:	e1ca      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Check that the response is to the Sleep Disable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2D != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c0ce:	4b3d      	ldr	r3, [pc, #244]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c0d0:	681b      	ldr	r3, [r3, #0]
    c0d2:	4a46      	ldr	r2, [pc, #280]	; (c1ec <queryEM9304Patches+0x224>)
    c0d4:	4293      	cmp	r3, r2
    c0d6:	d106      	bne.n	c0e6 <queryEM9304Patches+0x11e>
    c0d8:	4b3a      	ldr	r3, [pc, #232]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c0da:	685b      	ldr	r3, [r3, #4]
    c0dc:	b29b      	uxth	r3, r3
    c0de:	f64f 422d 	movw	r2, #64557	; 0xfc2d
    c0e2:	4293      	cmp	r3, r2
    c0e4:	d004      	beq.n	c0f0 <queryEM9304Patches+0x128>
  {
    am_util_debug_printf("Invalid Response to EM9304 Sleep Disable\n");
    c0e6:	4842      	ldr	r0, [pc, #264]	; (c1f0 <queryEM9304Patches+0x228>)
    c0e8:	f002 f88c 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c0ec:	2301      	movs	r3, #1
    c0ee:	e1b9      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Send the EM_SetMemoryMode command to turn on OTP and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetOTPOn, sizeof(g_pui8EM_SetOTPOn) );
    c0f0:	2304      	movs	r3, #4
    c0f2:	4a40      	ldr	r2, [pc, #256]	; (c1f4 <queryEM9304Patches+0x22c>)
    c0f4:	2101      	movs	r1, #1
    c0f6:	483b      	ldr	r0, [pc, #236]	; (c1e4 <queryEM9304Patches+0x21c>)
    c0f8:	f7ff fb94 	bl	b824 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c0fc:	f7ff fed6 	bl	beac <waitEM9304Response>
    c100:	4603      	mov	r3, r0
    c102:	2b00      	cmp	r3, #0
    c104:	d004      	beq.n	c110 <queryEM9304Patches+0x148>
  {
    am_util_debug_printf("No Response to EM9304 OTP Enable\n");
    c106:	483c      	ldr	r0, [pc, #240]	; (c1f8 <queryEM9304Patches+0x230>)
    c108:	f002 f87c 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c10c:	2301      	movs	r3, #1
    c10e:	e1a9      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Check that the response is to the OTP enable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c110:	4b2c      	ldr	r3, [pc, #176]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c112:	681b      	ldr	r3, [r3, #0]
    c114:	4a35      	ldr	r2, [pc, #212]	; (c1ec <queryEM9304Patches+0x224>)
    c116:	4293      	cmp	r3, r2
    c118:	d106      	bne.n	c128 <queryEM9304Patches+0x160>
    c11a:	4b2a      	ldr	r3, [pc, #168]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c11c:	685b      	ldr	r3, [r3, #4]
    c11e:	b29b      	uxth	r3, r3
    c120:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    c124:	4293      	cmp	r3, r2
    c126:	d004      	beq.n	c132 <queryEM9304Patches+0x16a>
  {
    am_util_debug_printf("Invalid Response to EM9304 OTP Enable\n");
    c128:	4834      	ldr	r0, [pc, #208]	; (c1fc <queryEM9304Patches+0x234>)
    c12a:	f002 f86b 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c12e:	2301      	movs	r3, #1
    c130:	e198      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Query the EM9304 with the EM_PatchQuery and Patch Index = 0.  This will return the Container Count.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_PatchQuery, sizeof(g_pui8EM_PatchQuery) );
    c132:	2305      	movs	r3, #5
    c134:	4a32      	ldr	r2, [pc, #200]	; (c200 <queryEM9304Patches+0x238>)
    c136:	2101      	movs	r1, #1
    c138:	482a      	ldr	r0, [pc, #168]	; (c1e4 <queryEM9304Patches+0x21c>)
    c13a:	f7ff fb73 	bl	b824 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c13e:	f7ff feb5 	bl	beac <waitEM9304Response>
    c142:	4603      	mov	r3, r0
    c144:	2b00      	cmp	r3, #0
    c146:	d004      	beq.n	c152 <queryEM9304Patches+0x18a>
  {
    am_util_debug_printf("No Response to EM9304 Patch Query\n");
    c148:	482e      	ldr	r0, [pc, #184]	; (c204 <queryEM9304Patches+0x23c>)
    c14a:	f002 f85b 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c14e:	2301      	movs	r3, #1
    c150:	e188      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Check that the response is to the Patch Query.
  if ((0x01200E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC34 != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c152:	4b1c      	ldr	r3, [pc, #112]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c154:	681b      	ldr	r3, [r3, #0]
    c156:	4a2c      	ldr	r2, [pc, #176]	; (c208 <queryEM9304Patches+0x240>)
    c158:	4293      	cmp	r3, r2
    c15a:	d106      	bne.n	c16a <queryEM9304Patches+0x1a2>
    c15c:	4b19      	ldr	r3, [pc, #100]	; (c1c4 <queryEM9304Patches+0x1fc>)
    c15e:	685b      	ldr	r3, [r3, #4]
    c160:	b29b      	uxth	r3, r3
    c162:	f64f 4234 	movw	r2, #64564	; 0xfc34
    c166:	4293      	cmp	r3, r2
    c168:	d004      	beq.n	c174 <queryEM9304Patches+0x1ac>
  {
    am_util_debug_printf("Invalid Response to EM9304 Patch Query\n");
    c16a:	4828      	ldr	r0, [pc, #160]	; (c20c <queryEM9304Patches+0x244>)
    c16c:	f002 f84a 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c170:	2301      	movs	r3, #1
    c172:	e177      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  // Extract the container information from the query response.
  containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c176:	3307      	adds	r3, #7
    c178:	781b      	ldrb	r3, [r3, #0]
    c17a:	461a      	mov	r2, r3
    ((uint32_t)pBuf[CONTAINER_COUNT_INDEX + 1] << 8);
    c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c17e:	3308      	adds	r3, #8
    c180:	781b      	ldrb	r3, [r3, #0]
    c182:	021b      	lsls	r3, r3, #8
  containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    c184:	4413      	add	r3, r2
    c186:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  // Assume the first patch is the manufacturing trim patch.
  // This is the only patch that never should be invalidated.
  am_util_debug_printf("Number of patch containers on EM9304 excluding Patch#0: %d\n",containerCount-1);
    c188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c18a:	3b01      	subs	r3, #1
    c18c:	4619      	mov	r1, r3
    c18e:	4820      	ldr	r0, [pc, #128]	; (c210 <queryEM9304Patches+0x248>)
    c190:	f002 f838 	bl	e204 <am_util_stdio_printf>
  
  // For each container in Container Count
  for (uint32_t container = 1; container < containerCount; container++)
    c194:	2301      	movs	r3, #1
    c196:	633b      	str	r3, [r7, #48]	; 0x30
    c198:	e11c      	b.n	c3d4 <queryEM9304Patches+0x40c>
  {
    // Send the EM_PatchQuery for the Container.
    g_pui8EM_PatchQuery[PATCH_INDEX_OFFSET] = container;
    c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c19c:	b2da      	uxtb	r2, r3
    c19e:	4b18      	ldr	r3, [pc, #96]	; (c200 <queryEM9304Patches+0x238>)
    c1a0:	70da      	strb	r2, [r3, #3]
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_PatchQuery, sizeof(g_pui8EM_PatchQuery) );
    c1a2:	2305      	movs	r3, #5
    c1a4:	4a16      	ldr	r2, [pc, #88]	; (c200 <queryEM9304Patches+0x238>)
    c1a6:	2101      	movs	r1, #1
    c1a8:	480e      	ldr	r0, [pc, #56]	; (c1e4 <queryEM9304Patches+0x21c>)
    c1aa:	f7ff fb3b 	bl	b824 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c1ae:	f7ff fe7d 	bl	beac <waitEM9304Response>
    c1b2:	4603      	mov	r3, r0
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d02d      	beq.n	c214 <queryEM9304Patches+0x24c>
    {
      am_util_debug_printf("No Response to EM9304 Patch Query\n");
    c1b8:	4812      	ldr	r0, [pc, #72]	; (c204 <queryEM9304Patches+0x23c>)
    c1ba:	f002 f823 	bl	e204 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c1be:	2301      	movs	r3, #1
    c1c0:	e150      	b.n	c464 <queryEM9304Patches+0x49c>
    c1c2:	bf00      	nop
    c1c4:	10001abc 	.word	0x10001abc
    c1c8:	100010b8 	.word	0x100010b8
    c1cc:	40020000 	.word	0x40020000
    c1d0:	40010060 	.word	0x40010060
    c1d4:	4001004c 	.word	0x4001004c
    c1d8:	40010018 	.word	0x40010018
    c1dc:	400100f8 	.word	0x400100f8
    c1e0:	10001098 	.word	0x10001098
    c1e4:	00012e30 	.word	0x00012e30
    c1e8:	00011a14 	.word	0x00011a14
    c1ec:	01040e04 	.word	0x01040e04
    c1f0:	00011a3c 	.word	0x00011a3c
    c1f4:	1000109c 	.word	0x1000109c
    c1f8:	00011a68 	.word	0x00011a68
    c1fc:	00011a8c 	.word	0x00011a8c
    c200:	100010a8 	.word	0x100010a8
    c204:	00011ab4 	.word	0x00011ab4
    c208:	01200e04 	.word	0x01200e04
    c20c:	00011ad8 	.word	0x00011ad8
    c210:	00011b00 	.word	0x00011b00
    }
    
    // Extract the container information from the query response.
    containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c216:	3307      	adds	r3, #7
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	461a      	mov	r2, r3
      ((uint32_t)pBuf[CONTAINER_COUNT_INDEX + 1] << 8);
    c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c21e:	3308      	adds	r3, #8
    c220:	781b      	ldrb	r3, [r3, #0]
    c222:	021b      	lsls	r3, r3, #8
    containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    c224:	4413      	add	r3, r2
    c226:	63fb      	str	r3, [r7, #60]	; 0x3c
    buildNumber = (uint32_t)pBuf[BUILD_NUMBER_INDEX] + 
    c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c22a:	331b      	adds	r3, #27
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	461a      	mov	r2, r3
      ((uint32_t)(pBuf[BUILD_NUMBER_INDEX+1] << 8));
    c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c232:	331c      	adds	r3, #28
    c234:	781b      	ldrb	r3, [r3, #0]
    c236:	021b      	lsls	r3, r3, #8
    buildNumber = (uint32_t)pBuf[BUILD_NUMBER_INDEX] + 
    c238:	4413      	add	r3, r2
    c23a:	623b      	str	r3, [r7, #32]
    userBuildNumber = (uint32_t)pBuf[USER_BUILD_NUMBER_INDEX] + 
    c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c23e:	331d      	adds	r3, #29
    c240:	781b      	ldrb	r3, [r3, #0]
    c242:	461a      	mov	r2, r3
      ((uint32_t)(pBuf[USER_BUILD_NUMBER_INDEX+1] << 8));
    c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c246:	331e      	adds	r3, #30
    c248:	781b      	ldrb	r3, [r3, #0]
    c24a:	021b      	lsls	r3, r3, #8
    userBuildNumber = (uint32_t)pBuf[USER_BUILD_NUMBER_INDEX] + 
    c24c:	4413      	add	r3, r2
    c24e:	61fb      	str	r3, [r7, #28]
    containerVersion = pBuf[CONTAINER_VERSION_INDEX];
    c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c252:	3320      	adds	r3, #32
    c254:	781b      	ldrb	r3, [r3, #0]
    c256:	61bb      	str	r3, [r7, #24]
    containerType = pBuf[CONTAINER_TYPE_INDEX];
    c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c25a:	3321      	adds	r3, #33	; 0x21
    c25c:	781b      	ldrb	r3, [r3, #0]
    c25e:	617b      	str	r3, [r7, #20]
    containerID = pBuf[CONTAINER_ID_INDEX];
    c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c262:	3322      	adds	r3, #34	; 0x22
    c264:	781b      	ldrb	r3, [r3, #0]
    c266:	613b      	str	r3, [r7, #16]
#ifdef INVALIDATE_UNKNOWN_PATCHES
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c26a:	3312      	adds	r3, #18
    c26c:	781b      	ldrb	r3, [r3, #0]
    c26e:	061a      	lsls	r2, r3, #24
                               (pBuf[CONTAINER_ADDR_INDEX+2] << 16) +
    c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c272:	3311      	adds	r3, #17
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	041b      	lsls	r3, r3, #16
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    c278:	441a      	add	r2, r3
                                 (pBuf[CONTAINER_ADDR_INDEX+1] << 8) +
    c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c27c:	3310      	adds	r3, #16
    c27e:	781b      	ldrb	r3, [r3, #0]
    c280:	021b      	lsls	r3, r3, #8
                               (pBuf[CONTAINER_ADDR_INDEX+2] << 16) +
    c282:	4413      	add	r3, r2
                                   pBuf[CONTAINER_ADDR_INDEX]);
    c284:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c286:	320f      	adds	r2, #15
    c288:	7812      	ldrb	r2, [r2, #0]
                                 (pBuf[CONTAINER_ADDR_INDEX+1] << 8) +
    c28a:	4413      	add	r3, r2
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    c28c:	60fb      	str	r3, [r7, #12]
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c290:	3316      	adds	r3, #22
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	061a      	lsls	r2, r3, #24
                               (pBuf[CONTAINER_SIZE_INDEX+2] << 16) +
    c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c298:	3315      	adds	r3, #21
    c29a:	781b      	ldrb	r3, [r3, #0]
    c29c:	041b      	lsls	r3, r3, #16
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    c29e:	441a      	add	r2, r3
                                 (pBuf[CONTAINER_SIZE_INDEX+1] << 8) +
    c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2a2:	3314      	adds	r3, #20
    c2a4:	781b      	ldrb	r3, [r3, #0]
    c2a6:	021b      	lsls	r3, r3, #8
                               (pBuf[CONTAINER_SIZE_INDEX+2] << 16) +
    c2a8:	4413      	add	r3, r2
                                   pBuf[CONTAINER_SIZE_INDEX]);
    c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2ac:	3213      	adds	r2, #19
    c2ae:	7812      	ldrb	r2, [r2, #0]
                                 (pBuf[CONTAINER_SIZE_INDEX+1] << 8) +
    c2b0:	4413      	add	r3, r2
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    c2b2:	60bb      	str	r3, [r7, #8]

    am_util_debug_printf("Patch #%d: Container Address = %8.8X Container Size = %4.4d Container Type=%d Container ID=%d Container Version=%d Build Number=%d User Build Number=%d\n",
    c2b4:	69fb      	ldr	r3, [r7, #28]
    c2b6:	9304      	str	r3, [sp, #16]
    c2b8:	6a3b      	ldr	r3, [r7, #32]
    c2ba:	9303      	str	r3, [sp, #12]
    c2bc:	69bb      	ldr	r3, [r7, #24]
    c2be:	9302      	str	r3, [sp, #8]
    c2c0:	693b      	ldr	r3, [r7, #16]
    c2c2:	9301      	str	r3, [sp, #4]
    c2c4:	697b      	ldr	r3, [r7, #20]
    c2c6:	9300      	str	r3, [sp, #0]
    c2c8:	68bb      	ldr	r3, [r7, #8]
    c2ca:	68fa      	ldr	r2, [r7, #12]
    c2cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c2ce:	4867      	ldr	r0, [pc, #412]	; (c46c <queryEM9304Patches+0x4a4>)
    c2d0:	f001 ff98 	bl	e204 <am_util_stdio_printf>
		  container, containerAddr, containerSize, containerType, containerID, containerVersion, buildNumber, userBuildNumber);

    // Check for patches that are likely not configuration managed by the customer.
    // Avoid invalidating these patches.
    if ( ((CONTAINER_TYPE_CONFIG_DATA_WORD == containerType) || 
    c2d4:	697b      	ldr	r3, [r7, #20]
    c2d6:	2b01      	cmp	r3, #1
    c2d8:	d008      	beq.n	c2ec <queryEM9304Patches+0x324>
    c2da:	697b      	ldr	r3, [r7, #20]
    c2dc:	2b02      	cmp	r3, #2
    c2de:	d005      	beq.n	c2ec <queryEM9304Patches+0x324>
          (CONTAINER_TYPE_RANDOM_DATA_WORD == containerType)  ||
    c2e0:	697b      	ldr	r3, [r7, #20]
    c2e2:	2b0b      	cmp	r3, #11
    c2e4:	d002      	beq.n	c2ec <queryEM9304Patches+0x324>
            (CONTAINER_TYPE_CONFIG_DATA_BYTE == containerType) || 
    c2e6:	697b      	ldr	r3, [r7, #20]
    c2e8:	2b03      	cmp	r3, #3
    c2ea:	d10e      	bne.n	c30a <queryEM9304Patches+0x342>
              (CONTAINER_TYPE_RANDOM_DATA_BYTE == containerType)) &&
    c2ec:	6a3b      	ldr	r3, [r7, #32]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d004      	beq.n	c2fc <queryEM9304Patches+0x334>
        ((0 == buildNumber) || (3089 == buildNumber)) &&
    c2f2:	6a3b      	ldr	r3, [r7, #32]
    c2f4:	f640 4211 	movw	r2, #3089	; 0xc11
    c2f8:	4293      	cmp	r3, r2
    c2fa:	d106      	bne.n	c30a <queryEM9304Patches+0x342>
    c2fc:	69fb      	ldr	r3, [r7, #28]
    c2fe:	2b00      	cmp	r3, #0
    c300:	d103      	bne.n	c30a <queryEM9304Patches+0x342>
          (0 == userBuildNumber) )
    {
      invalidatePatch = false;
    c302:	2300      	movs	r3, #0
    c304:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    c308:	e002      	b.n	c310 <queryEM9304Patches+0x348>
    }
    else
    {
      // Initialize the invalidate flag.
      invalidatePatch = true;
    c30a:	2301      	movs	r3, #1
    c30c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
#endif	
    
    // For each local patch, compare the Container Version, Container Type, and Container ID to the container info.
    for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c310:	2300      	movs	r3, #0
    c312:	62fb      	str	r3, [r7, #44]	; 0x2c
    c314:	e050      	b.n	c3b8 <queryEM9304Patches+0x3f0>
    {
      if ((g_pEm9304Patches[patch].buildNumber == buildNumber) &&
    c316:	4956      	ldr	r1, [pc, #344]	; (c470 <queryEM9304Patches+0x4a8>)
    c318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c31a:	4613      	mov	r3, r2
    c31c:	009b      	lsls	r3, r3, #2
    c31e:	4413      	add	r3, r2
    c320:	005b      	lsls	r3, r3, #1
    c322:	440b      	add	r3, r1
    c324:	881b      	ldrh	r3, [r3, #0]
    c326:	461a      	mov	r2, r3
    c328:	6a3b      	ldr	r3, [r7, #32]
    c32a:	429a      	cmp	r2, r3
    c32c:	d141      	bne.n	c3b2 <queryEM9304Patches+0x3ea>
          (g_pEm9304Patches[patch].userBuildNumber == userBuildNumber) &&
    c32e:	4950      	ldr	r1, [pc, #320]	; (c470 <queryEM9304Patches+0x4a8>)
    c330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c332:	4613      	mov	r3, r2
    c334:	009b      	lsls	r3, r3, #2
    c336:	4413      	add	r3, r2
    c338:	005b      	lsls	r3, r3, #1
    c33a:	440b      	add	r3, r1
    c33c:	3302      	adds	r3, #2
    c33e:	881b      	ldrh	r3, [r3, #0]
    c340:	461a      	mov	r2, r3
      if ((g_pEm9304Patches[patch].buildNumber == buildNumber) &&
    c342:	69fb      	ldr	r3, [r7, #28]
    c344:	429a      	cmp	r2, r3
    c346:	d134      	bne.n	c3b2 <queryEM9304Patches+0x3ea>
            (g_pEm9304Patches[patch].containerVersion == containerVersion) &&
    c348:	4949      	ldr	r1, [pc, #292]	; (c470 <queryEM9304Patches+0x4a8>)
    c34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c34c:	4613      	mov	r3, r2
    c34e:	009b      	lsls	r3, r3, #2
    c350:	4413      	add	r3, r2
    c352:	005b      	lsls	r3, r3, #1
    c354:	440b      	add	r3, r1
    c356:	3304      	adds	r3, #4
    c358:	781b      	ldrb	r3, [r3, #0]
    c35a:	461a      	mov	r2, r3
          (g_pEm9304Patches[patch].userBuildNumber == userBuildNumber) &&
    c35c:	69bb      	ldr	r3, [r7, #24]
    c35e:	429a      	cmp	r2, r3
    c360:	d127      	bne.n	c3b2 <queryEM9304Patches+0x3ea>
              (g_pEm9304Patches[patch].containerType == containerType) &&
    c362:	4943      	ldr	r1, [pc, #268]	; (c470 <queryEM9304Patches+0x4a8>)
    c364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c366:	4613      	mov	r3, r2
    c368:	009b      	lsls	r3, r3, #2
    c36a:	4413      	add	r3, r2
    c36c:	005b      	lsls	r3, r3, #1
    c36e:	440b      	add	r3, r1
    c370:	3305      	adds	r3, #5
    c372:	781b      	ldrb	r3, [r3, #0]
    c374:	461a      	mov	r2, r3
            (g_pEm9304Patches[patch].containerVersion == containerVersion) &&
    c376:	697b      	ldr	r3, [r7, #20]
    c378:	429a      	cmp	r2, r3
    c37a:	d11a      	bne.n	c3b2 <queryEM9304Patches+0x3ea>
                (g_pEm9304Patches[patch].containerID == containerID))
    c37c:	493c      	ldr	r1, [pc, #240]	; (c470 <queryEM9304Patches+0x4a8>)
    c37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c380:	4613      	mov	r3, r2
    c382:	009b      	lsls	r3, r3, #2
    c384:	4413      	add	r3, r2
    c386:	005b      	lsls	r3, r3, #1
    c388:	440b      	add	r3, r1
    c38a:	3306      	adds	r3, #6
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	461a      	mov	r2, r3
              (g_pEm9304Patches[patch].containerType == containerType) &&
    c390:	693b      	ldr	r3, [r7, #16]
    c392:	429a      	cmp	r2, r3
    c394:	d10d      	bne.n	c3b2 <queryEM9304Patches+0x3ea>
      {
        g_pEm9304Patches[patch].applyPatch = false;		// Patch is already installed, so don't apply.
    c396:	4936      	ldr	r1, [pc, #216]	; (c470 <queryEM9304Patches+0x4a8>)
    c398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c39a:	4613      	mov	r3, r2
    c39c:	009b      	lsls	r3, r3, #2
    c39e:	4413      	add	r3, r2
    c3a0:	005b      	lsls	r3, r3, #1
    c3a2:	440b      	add	r3, r1
    c3a4:	3307      	adds	r3, #7
    c3a6:	2200      	movs	r2, #0
    c3a8:	701a      	strb	r2, [r3, #0]
#ifdef INVALIDATE_UNKNOWN_PATCHES
        // Note that we will "re-enable" patches here even if they met the criteria above (which can happen!)
        invalidatePatch = false;
    c3aa:	2300      	movs	r3, #0
    c3ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif	
        break;
    c3b0:	e005      	b.n	c3be <queryEM9304Patches+0x3f6>
    for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3b4:	3301      	adds	r3, #1
    c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3ba:	2b05      	cmp	r3, #5
    c3bc:	d9ab      	bls.n	c316 <queryEM9304Patches+0x34e>
      }
    }
    
#ifdef INVALIDATE_UNKNOWN_PATCHES		
    // Check to see if we need to invalidate the patch.
    if (invalidatePatch)
    c3be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d003      	beq.n	c3ce <queryEM9304Patches+0x406>
    {
      invalidateEM9304Patch(containerAddr, containerSize);
    c3c6:	68b9      	ldr	r1, [r7, #8]
    c3c8:	68f8      	ldr	r0, [r7, #12]
    c3ca:	f7ff fda7 	bl	bf1c <invalidateEM9304Patch>
  for (uint32_t container = 1; container < containerCount; container++)
    c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3d0:	3301      	adds	r3, #1
    c3d2:	633b      	str	r3, [r7, #48]	; 0x30
    c3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3d8:	429a      	cmp	r2, r3
    c3da:	f4ff aede 	bcc.w	c19a <queryEM9304Patches+0x1d2>


  if (DEST_MEMORY_IRAM == EM9304_PATCHES_DEST_MEMORY)
  {
    // Send the EM_SetMemoryMode command to turn off OTP and check the response.
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetOTPOff, sizeof(g_pui8EM_SetOTPOff) );
    c3de:	2304      	movs	r3, #4
    c3e0:	4a24      	ldr	r2, [pc, #144]	; (c474 <queryEM9304Patches+0x4ac>)
    c3e2:	2101      	movs	r1, #1
    c3e4:	4824      	ldr	r0, [pc, #144]	; (c478 <queryEM9304Patches+0x4b0>)
    c3e6:	f7ff fa1d 	bl	b824 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c3ea:	f7ff fd5f 	bl	beac <waitEM9304Response>
    c3ee:	4603      	mov	r3, r0
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	d004      	beq.n	c3fe <queryEM9304Patches+0x436>
    {
      am_util_debug_printf("No Response to EM9304 OTP Disable\n");
    c3f4:	4821      	ldr	r0, [pc, #132]	; (c47c <queryEM9304Patches+0x4b4>)
    c3f6:	f001 ff05 	bl	e204 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c3fa:	2301      	movs	r3, #1
    c3fc:	e032      	b.n	c464 <queryEM9304Patches+0x49c>
    }
    
    // Check that the response is to the OTP Disable.
    if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c3fe:	4b20      	ldr	r3, [pc, #128]	; (c480 <queryEM9304Patches+0x4b8>)
    c400:	681b      	ldr	r3, [r3, #0]
    c402:	4a20      	ldr	r2, [pc, #128]	; (c484 <queryEM9304Patches+0x4bc>)
    c404:	4293      	cmp	r3, r2
    c406:	d106      	bne.n	c416 <queryEM9304Patches+0x44e>
    c408:	4b1d      	ldr	r3, [pc, #116]	; (c480 <queryEM9304Patches+0x4b8>)
    c40a:	685b      	ldr	r3, [r3, #4]
    c40c:	b29b      	uxth	r3, r3
    c40e:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    c412:	4293      	cmp	r3, r2
    c414:	d004      	beq.n	c420 <queryEM9304Patches+0x458>
    {
      am_util_debug_printf("Invalid Response to EM9304 OTP Disable\n");
    c416:	481c      	ldr	r0, [pc, #112]	; (c488 <queryEM9304Patches+0x4c0>)
    c418:	f001 fef4 	bl	e204 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c41c:	2301      	movs	r3, #1
    c41e:	e021      	b.n	c464 <queryEM9304Patches+0x49c>
    }
  }
  
  // Send the EM_SetSleepOptions command to disable sleep and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SleepEnable, sizeof(g_pui8EM_SleepEnable) );
    c420:	2304      	movs	r3, #4
    c422:	4a1a      	ldr	r2, [pc, #104]	; (c48c <queryEM9304Patches+0x4c4>)
    c424:	2101      	movs	r1, #1
    c426:	4814      	ldr	r0, [pc, #80]	; (c478 <queryEM9304Patches+0x4b0>)
    c428:	f7ff f9fc 	bl	b824 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c42c:	f7ff fd3e 	bl	beac <waitEM9304Response>
    c430:	4603      	mov	r3, r0
    c432:	2b00      	cmp	r3, #0
    c434:	d004      	beq.n	c440 <queryEM9304Patches+0x478>
  {
    am_util_debug_printf("No Response to EM9304 Sleep Enable\n");
    c436:	4816      	ldr	r0, [pc, #88]	; (c490 <queryEM9304Patches+0x4c8>)
    c438:	f001 fee4 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c43c:	2301      	movs	r3, #1
    c43e:	e011      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  
  // Check that the response is to the Sleep Enable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2D != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c440:	4b0f      	ldr	r3, [pc, #60]	; (c480 <queryEM9304Patches+0x4b8>)
    c442:	681b      	ldr	r3, [r3, #0]
    c444:	4a0f      	ldr	r2, [pc, #60]	; (c484 <queryEM9304Patches+0x4bc>)
    c446:	4293      	cmp	r3, r2
    c448:	d106      	bne.n	c458 <queryEM9304Patches+0x490>
    c44a:	4b0d      	ldr	r3, [pc, #52]	; (c480 <queryEM9304Patches+0x4b8>)
    c44c:	685b      	ldr	r3, [r3, #4]
    c44e:	b29b      	uxth	r3, r3
    c450:	f64f 422d 	movw	r2, #64557	; 0xfc2d
    c454:	4293      	cmp	r3, r2
    c456:	d004      	beq.n	c462 <queryEM9304Patches+0x49a>
  {
    am_util_debug_printf("Invalid Response to EM9304 Sleep Enable\n");
    c458:	480e      	ldr	r0, [pc, #56]	; (c494 <queryEM9304Patches+0x4cc>)
    c45a:	f001 fed3 	bl	e204 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c45e:	2301      	movs	r3, #1
    c460:	e000      	b.n	c464 <queryEM9304Patches+0x49c>
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    c462:	2300      	movs	r3, #0
  
}
    c464:	4618      	mov	r0, r3
    c466:	3740      	adds	r7, #64	; 0x40
    c468:	46bd      	mov	sp, r7
    c46a:	bd80      	pop	{r7, pc}
    c46c:	00011b3c 	.word	0x00011b3c
    c470:	100010b8 	.word	0x100010b8
    c474:	100010a0 	.word	0x100010a0
    c478:	00012e30 	.word	0x00012e30
    c47c:	00011bd8 	.word	0x00011bd8
    c480:	10001abc 	.word	0x10001abc
    c484:	01040e04 	.word	0x01040e04
    c488:	00011bfc 	.word	0x00011bfc
    c48c:	100010b0 	.word	0x100010b0
    c490:	00011c24 	.word	0x00011c24
    c494:	00011c48 	.word	0x00011c48

0000c498 <applyEM9304Patches>:
//! @return Returns the status of the patch application (< 0 is an error).
//
//*****************************************************************************
uint32_t
applyEM9304Patches(void)
{
    c498:	b5f0      	push	{r4, r5, r6, r7, lr}
    c49a:	b089      	sub	sp, #36	; 0x24
    c49c:	af04      	add	r7, sp, #16
  uint8_t   *bytePtr = (uint8_t *)&g_pui32HCIRXBuffer;
    c49e:	4b7d      	ldr	r3, [pc, #500]	; (c694 <applyEM9304Patches+0x1fc>)
    c4a0:	607b      	str	r3, [r7, #4]
  uint32_t  ui32PN;
  
  g_EMPatchErrors = 0;
    c4a2:	4b7d      	ldr	r3, [pc, #500]	; (c698 <applyEM9304Patches+0x200>)
    c4a4:	2200      	movs	r2, #0
    c4a6:	601a      	str	r2, [r3, #0]

  //
  // Device identification
  //
  ui32PN = AM_REG(MCUCTRL, CHIP_INFO)  &
    c4a8:	4b7c      	ldr	r3, [pc, #496]	; (c69c <applyEM9304Patches+0x204>)
    c4aa:	681b      	ldr	r3, [r3, #0]
    c4ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c4b0:	603b      	str	r3, [r7, #0]
  }

  if (DEST_MEMORY_IRAM == EM9304_PATCHES_DEST_MEMORY)
  {
    // Send the EM_SetMemoryMode command to turn on IRAM and check the response.
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetIRAMOn, sizeof(g_pui8EM_SetIRAMOn) );
    c4b2:	2304      	movs	r3, #4
    c4b4:	4a7a      	ldr	r2, [pc, #488]	; (c6a0 <applyEM9304Patches+0x208>)
    c4b6:	2101      	movs	r1, #1
    c4b8:	487a      	ldr	r0, [pc, #488]	; (c6a4 <applyEM9304Patches+0x20c>)
    c4ba:	f7ff f9b3 	bl	b824 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c4be:	f7ff fcf5 	bl	beac <waitEM9304Response>
    c4c2:	4603      	mov	r3, r0
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d004      	beq.n	c4d2 <applyEM9304Patches+0x3a>
    {
      am_util_debug_printf("No Response to EM9304 IRAM Enable\n");
    c4c8:	4877      	ldr	r0, [pc, #476]	; (c6a8 <applyEM9304Patches+0x210>)
    c4ca:	f001 fe9b 	bl	e204 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c4ce:	2301      	movs	r3, #1
    c4d0:	e0dc      	b.n	c68c <applyEM9304Patches+0x1f4>
    }
    
    // Check that the response is to the IRAM enable.
    if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c4d2:	4b70      	ldr	r3, [pc, #448]	; (c694 <applyEM9304Patches+0x1fc>)
    c4d4:	681b      	ldr	r3, [r3, #0]
    c4d6:	4a75      	ldr	r2, [pc, #468]	; (c6ac <applyEM9304Patches+0x214>)
    c4d8:	4293      	cmp	r3, r2
    c4da:	d106      	bne.n	c4ea <applyEM9304Patches+0x52>
    c4dc:	4b6d      	ldr	r3, [pc, #436]	; (c694 <applyEM9304Patches+0x1fc>)
    c4de:	685b      	ldr	r3, [r3, #4]
    c4e0:	b29b      	uxth	r3, r3
    c4e2:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    c4e6:	4293      	cmp	r3, r2
    c4e8:	d004      	beq.n	c4f4 <applyEM9304Patches+0x5c>
    {
      am_util_debug_printf("Invalid Response to EM9304 IRAM Enable\n");
    c4ea:	4871      	ldr	r0, [pc, #452]	; (c6b0 <applyEM9304Patches+0x218>)
    c4ec:	f001 fe8a 	bl	e204 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c4f0:	2301      	movs	r3, #1
    c4f2:	e0cb      	b.n	c68c <applyEM9304Patches+0x1f4>
    }
  }
  
  // Loop through the patches and apply those that are not already there.
  // For each local patch, compare the Container Version, Container Type, and Container ID to the container info.
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c4f4:	2300      	movs	r3, #0
    c4f6:	60fb      	str	r3, [r7, #12]
    c4f8:	e0c3      	b.n	c682 <applyEM9304Patches+0x1ea>
  {
    if (g_pEm9304Patches[patch].applyPatch)
    c4fa:	496e      	ldr	r1, [pc, #440]	; (c6b4 <applyEM9304Patches+0x21c>)
    c4fc:	68fa      	ldr	r2, [r7, #12]
    c4fe:	4613      	mov	r3, r2
    c500:	009b      	lsls	r3, r3, #2
    c502:	4413      	add	r3, r2
    c504:	005b      	lsls	r3, r3, #1
    c506:	440b      	add	r3, r1
    c508:	3307      	adds	r3, #7
    c50a:	781b      	ldrb	r3, [r3, #0]
    c50c:	2b00      	cmp	r3, #0
    c50e:	f000 80b5 	beq.w	c67c <applyEM9304Patches+0x1e4>
    {
			am_util_debug_printf("Applying Patch #%d: Container Type=%d Container ID=%d Container Version=%d Build Number=%d User Build Number=%d\n",
    c512:	4968      	ldr	r1, [pc, #416]	; (c6b4 <applyEM9304Patches+0x21c>)
    c514:	68fa      	ldr	r2, [r7, #12]
    c516:	4613      	mov	r3, r2
    c518:	009b      	lsls	r3, r3, #2
    c51a:	4413      	add	r3, r2
    c51c:	005b      	lsls	r3, r3, #1
    c51e:	440b      	add	r3, r1
    c520:	3305      	adds	r3, #5
    c522:	781b      	ldrb	r3, [r3, #0]
    c524:	461d      	mov	r5, r3
    c526:	4963      	ldr	r1, [pc, #396]	; (c6b4 <applyEM9304Patches+0x21c>)
    c528:	68fa      	ldr	r2, [r7, #12]
    c52a:	4613      	mov	r3, r2
    c52c:	009b      	lsls	r3, r3, #2
    c52e:	4413      	add	r3, r2
    c530:	005b      	lsls	r3, r3, #1
    c532:	440b      	add	r3, r1
    c534:	3306      	adds	r3, #6
    c536:	781b      	ldrb	r3, [r3, #0]
    c538:	461e      	mov	r6, r3
    c53a:	495e      	ldr	r1, [pc, #376]	; (c6b4 <applyEM9304Patches+0x21c>)
    c53c:	68fa      	ldr	r2, [r7, #12]
    c53e:	4613      	mov	r3, r2
    c540:	009b      	lsls	r3, r3, #2
    c542:	4413      	add	r3, r2
    c544:	005b      	lsls	r3, r3, #1
    c546:	440b      	add	r3, r1
    c548:	3304      	adds	r3, #4
    c54a:	781b      	ldrb	r3, [r3, #0]
    c54c:	4618      	mov	r0, r3
    c54e:	4959      	ldr	r1, [pc, #356]	; (c6b4 <applyEM9304Patches+0x21c>)
    c550:	68fa      	ldr	r2, [r7, #12]
    c552:	4613      	mov	r3, r2
    c554:	009b      	lsls	r3, r3, #2
    c556:	4413      	add	r3, r2
    c558:	005b      	lsls	r3, r3, #1
    c55a:	440b      	add	r3, r1
    c55c:	881b      	ldrh	r3, [r3, #0]
    c55e:	461c      	mov	r4, r3
    c560:	4954      	ldr	r1, [pc, #336]	; (c6b4 <applyEM9304Patches+0x21c>)
    c562:	68fa      	ldr	r2, [r7, #12]
    c564:	4613      	mov	r3, r2
    c566:	009b      	lsls	r3, r3, #2
    c568:	4413      	add	r3, r2
    c56a:	005b      	lsls	r3, r3, #1
    c56c:	440b      	add	r3, r1
    c56e:	3302      	adds	r3, #2
    c570:	881b      	ldrh	r3, [r3, #0]
    c572:	9302      	str	r3, [sp, #8]
    c574:	9401      	str	r4, [sp, #4]
    c576:	9000      	str	r0, [sp, #0]
    c578:	4633      	mov	r3, r6
    c57a:	462a      	mov	r2, r5
    c57c:	68f9      	ldr	r1, [r7, #12]
    c57e:	484e      	ldr	r0, [pc, #312]	; (c6b8 <applyEM9304Patches+0x220>)
    c580:	f001 fe40 	bl	e204 <am_util_stdio_printf>
		    patch, g_pEm9304Patches[patch].containerType, g_pEm9304Patches[patch].containerID, g_pEm9304Patches[patch].containerVersion, 
			    g_pEm9304Patches[patch].buildNumber, g_pEm9304Patches[patch].userBuildNumber);


      for (uint32_t index = g_pEm9304Patches[patch].startingPatch; index < g_pEm9304Patches[patch].endingPatch; index ++)
    c584:	494b      	ldr	r1, [pc, #300]	; (c6b4 <applyEM9304Patches+0x21c>)
    c586:	68fa      	ldr	r2, [r7, #12]
    c588:	4613      	mov	r3, r2
    c58a:	009b      	lsls	r3, r3, #2
    c58c:	4413      	add	r3, r2
    c58e:	005b      	lsls	r3, r3, #1
    c590:	440b      	add	r3, r1
    c592:	3308      	adds	r3, #8
    c594:	781b      	ldrb	r3, [r3, #0]
    c596:	60bb      	str	r3, [r7, #8]
    c598:	e063      	b.n	c662 <applyEM9304Patches+0x1ca>
      {
        am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, (uint8_t *)g_pEm9304PatchesHCICmd[index], 
    c59a:	68ba      	ldr	r2, [r7, #8]
    c59c:	4613      	mov	r3, r2
    c59e:	011b      	lsls	r3, r3, #4
    c5a0:	4413      	add	r3, r2
    c5a2:	009b      	lsls	r3, r3, #2
    c5a4:	4a45      	ldr	r2, [pc, #276]	; (c6bc <applyEM9304Patches+0x224>)
    c5a6:	1898      	adds	r0, r3, r2
                                      g_pEm9304PatchesHCICmd[index][PATCH_LENGTH_OFFSET]+3 );
    c5a8:	4944      	ldr	r1, [pc, #272]	; (c6bc <applyEM9304Patches+0x224>)
    c5aa:	68ba      	ldr	r2, [r7, #8]
    c5ac:	4613      	mov	r3, r2
    c5ae:	011b      	lsls	r3, r3, #4
    c5b0:	4413      	add	r3, r2
    c5b2:	009b      	lsls	r3, r3, #2
    c5b4:	440b      	add	r3, r1
    c5b6:	3302      	adds	r3, #2
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	3303      	adds	r3, #3
        am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, (uint8_t *)g_pEm9304PatchesHCICmd[index], 
    c5bc:	4602      	mov	r2, r0
    c5be:	2101      	movs	r1, #1
    c5c0:	4838      	ldr	r0, [pc, #224]	; (c6a4 <applyEM9304Patches+0x20c>)
    c5c2:	f7ff f92f 	bl	b824 <am_devices_em9304_block_write>
	
        if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c5c6:	f7ff fc71 	bl	beac <waitEM9304Response>
    c5ca:	4603      	mov	r3, r0
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d004      	beq.n	c5da <applyEM9304Patches+0x142>
        {
          am_util_debug_printf("No Response to EM9304 Patch Write\n");
    c5d0:	483b      	ldr	r0, [pc, #236]	; (c6c0 <applyEM9304Patches+0x228>)
    c5d2:	f001 fe17 	bl	e204 <am_util_stdio_printf>
          return EM9304_INIT_STATUS_ERROR;
    c5d6:	2301      	movs	r3, #1
    c5d8:	e058      	b.n	c68c <applyEM9304Patches+0x1f4>
        }
        
        if ((g_pEm9304PatchesHCICmd[index][1] == 0x27) &&
    c5da:	4938      	ldr	r1, [pc, #224]	; (c6bc <applyEM9304Patches+0x224>)
    c5dc:	68ba      	ldr	r2, [r7, #8]
    c5de:	4613      	mov	r3, r2
    c5e0:	011b      	lsls	r3, r3, #4
    c5e2:	4413      	add	r3, r2
    c5e4:	009b      	lsls	r3, r3, #2
    c5e6:	440b      	add	r3, r1
    c5e8:	3301      	adds	r3, #1
    c5ea:	781b      	ldrb	r3, [r3, #0]
    c5ec:	2b27      	cmp	r3, #39	; 0x27
    c5ee:	d109      	bne.n	c604 <applyEM9304Patches+0x16c>
            (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_APPLIED))
    c5f0:	687b      	ldr	r3, [r7, #4]
    c5f2:	3307      	adds	r3, #7
    c5f4:	781b      	ldrb	r3, [r3, #0]
        if ((g_pEm9304PatchesHCICmd[index][1] == 0x27) &&
    c5f6:	2b01      	cmp	r3, #1
    c5f8:	d004      	beq.n	c604 <applyEM9304Patches+0x16c>
        {
          am_util_debug_printf("Error Response to EM9304 Patch Write\n");
    c5fa:	4832      	ldr	r0, [pc, #200]	; (c6c4 <applyEM9304Patches+0x22c>)
    c5fc:	f001 fe02 	bl	e204 <am_util_stdio_printf>
          return EM9304_INIT_STATUS_ERROR;
    c600:	2301      	movs	r3, #1
    c602:	e043      	b.n	c68c <applyEM9304Patches+0x1f4>
        }
        else if (g_pEm9304PatchesHCICmd[index][1] == 0x28)
    c604:	492d      	ldr	r1, [pc, #180]	; (c6bc <applyEM9304Patches+0x224>)
    c606:	68ba      	ldr	r2, [r7, #8]
    c608:	4613      	mov	r3, r2
    c60a:	011b      	lsls	r3, r3, #4
    c60c:	4413      	add	r3, r2
    c60e:	009b      	lsls	r3, r3, #2
    c610:	440b      	add	r3, r1
    c612:	3301      	adds	r3, #1
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	2b28      	cmp	r3, #40	; 0x28
    c618:	d120      	bne.n	c65c <applyEM9304Patches+0x1c4>
        {
          if (((index + 1) == g_pEm9304Patches[patch].endingPatch) && (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_APPLIED))
    c61a:	68bb      	ldr	r3, [r7, #8]
    c61c:	1c59      	adds	r1, r3, #1
    c61e:	4825      	ldr	r0, [pc, #148]	; (c6b4 <applyEM9304Patches+0x21c>)
    c620:	68fa      	ldr	r2, [r7, #12]
    c622:	4613      	mov	r3, r2
    c624:	009b      	lsls	r3, r3, #2
    c626:	4413      	add	r3, r2
    c628:	005b      	lsls	r3, r3, #1
    c62a:	4403      	add	r3, r0
    c62c:	3309      	adds	r3, #9
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	4299      	cmp	r1, r3
    c632:	d109      	bne.n	c648 <applyEM9304Patches+0x1b0>
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	3307      	adds	r3, #7
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	2b01      	cmp	r3, #1
    c63c:	d004      	beq.n	c648 <applyEM9304Patches+0x1b0>
          {
            am_util_debug_printf("Error Response to EM9304 Patch Continue (next to last patch segment)\n");
    c63e:	4822      	ldr	r0, [pc, #136]	; (c6c8 <applyEM9304Patches+0x230>)
    c640:	f001 fde0 	bl	e204 <am_util_stdio_printf>
            return EM9304_INIT_STATUS_ERROR;
    c644:	2301      	movs	r3, #1
    c646:	e021      	b.n	c68c <applyEM9304Patches+0x1f4>
          }
          else if (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_CONTINUE)
    c648:	687b      	ldr	r3, [r7, #4]
    c64a:	3307      	adds	r3, #7
    c64c:	781b      	ldrb	r3, [r3, #0]
    c64e:	2b02      	cmp	r3, #2
    c650:	d004      	beq.n	c65c <applyEM9304Patches+0x1c4>
          {
            am_util_debug_printf("Error Response to EM9304 Patch Continue (last patch segment)\n");
    c652:	481e      	ldr	r0, [pc, #120]	; (c6cc <applyEM9304Patches+0x234>)
    c654:	f001 fdd6 	bl	e204 <am_util_stdio_printf>
            return EM9304_INIT_STATUS_ERROR;
    c658:	2301      	movs	r3, #1
    c65a:	e017      	b.n	c68c <applyEM9304Patches+0x1f4>
      for (uint32_t index = g_pEm9304Patches[patch].startingPatch; index < g_pEm9304Patches[patch].endingPatch; index ++)
    c65c:	68bb      	ldr	r3, [r7, #8]
    c65e:	3301      	adds	r3, #1
    c660:	60bb      	str	r3, [r7, #8]
    c662:	4914      	ldr	r1, [pc, #80]	; (c6b4 <applyEM9304Patches+0x21c>)
    c664:	68fa      	ldr	r2, [r7, #12]
    c666:	4613      	mov	r3, r2
    c668:	009b      	lsls	r3, r3, #2
    c66a:	4413      	add	r3, r2
    c66c:	005b      	lsls	r3, r3, #1
    c66e:	440b      	add	r3, r1
    c670:	3309      	adds	r3, #9
    c672:	781b      	ldrb	r3, [r3, #0]
    c674:	461a      	mov	r2, r3
    c676:	68bb      	ldr	r3, [r7, #8]
    c678:	429a      	cmp	r2, r3
    c67a:	d88e      	bhi.n	c59a <applyEM9304Patches+0x102>
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c67c:	68fb      	ldr	r3, [r7, #12]
    c67e:	3301      	adds	r3, #1
    c680:	60fb      	str	r3, [r7, #12]
    c682:	68fb      	ldr	r3, [r7, #12]
    c684:	2b05      	cmp	r3, #5
    c686:	f67f af38 	bls.w	c4fa <applyEM9304Patches+0x62>
        }
      }
    }
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    c68a:	2300      	movs	r3, #0
}
    c68c:	4618      	mov	r0, r3
    c68e:	3714      	adds	r7, #20
    c690:	46bd      	mov	sp, r7
    c692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c694:	10001abc 	.word	0x10001abc
    c698:	10001bbc 	.word	0x10001bbc
    c69c:	40020000 	.word	0x40020000
    c6a0:	100010a4 	.word	0x100010a4
    c6a4:	00012e30 	.word	0x00012e30
    c6a8:	00011c74 	.word	0x00011c74
    c6ac:	01040e04 	.word	0x01040e04
    c6b0:	00011c98 	.word	0x00011c98
    c6b4:	100010b8 	.word	0x100010b8
    c6b8:	00011cc0 	.word	0x00011cc0
    c6bc:	00012e40 	.word	0x00012e40
    c6c0:	00011d34 	.word	0x00011d34
    c6c4:	00011d58 	.word	0x00011d58
    c6c8:	00011d80 	.word	0x00011d80
    c6cc:	00011dc8 	.word	0x00011dc8

0000c6d0 <initEM9304>:
// Configure the necessary pins and start the EM9304 radio.
//
//*****************************************************************************
void
initEM9304(void)
{
    c6d0:	b580      	push	{r7, lr}
    c6d2:	b082      	sub	sp, #8
    c6d4:	af00      	add	r7, sp, #0
  uint32_t numBytesRx;
  
  if (validEM9304Patches())
    c6d6:	f7ff fc17 	bl	bf08 <validEM9304Patches>
    c6da:	4603      	mov	r3, r0
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d010      	beq.n	c702 <initEM9304+0x32>
  {
    //
    // Query the EM9304 for patches
    //
    if (EM9304_INIT_STATUS_SUCCESS == queryEM9304Patches())
    c6e0:	f7ff fc72 	bl	bfc8 <queryEM9304Patches>
    c6e4:	4603      	mov	r3, r0
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	d108      	bne.n	c6fc <initEM9304+0x2c>
    {
      //
      // Apply the patches not already in the EM9304
      //
      if (EM9304_INIT_STATUS_SUCCESS != applyEM9304Patches())
    c6ea:	f7ff fed5 	bl	c498 <applyEM9304Patches>
    c6ee:	4603      	mov	r3, r0
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d006      	beq.n	c702 <initEM9304+0x32>
      {
        am_util_debug_printf("EM9304 Patch Application Failed\n");
    c6f4:	4818      	ldr	r0, [pc, #96]	; (c758 <initEM9304+0x88>)
    c6f6:	f001 fd85 	bl	e204 <am_util_stdio_printf>
    c6fa:	e002      	b.n	c702 <initEM9304+0x32>
      }
    }
    else
    {
      am_util_debug_printf("EM9304 Patching Query Failed.  Patch update not applied\n");
    c6fc:	4817      	ldr	r0, [pc, #92]	; (c75c <initEM9304+0x8c>)
    c6fe:	f001 fd81 	bl	e204 <am_util_stdio_printf>
    }
    
  }
  // Send EM_CpuReset HCI command.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_CpuReset, sizeof(g_pui8EM_CpuReset) );
    c702:	2303      	movs	r3, #3
    c704:	4a16      	ldr	r2, [pc, #88]	; (c760 <initEM9304+0x90>)
    c706:	2101      	movs	r1, #1
    c708:	4816      	ldr	r0, [pc, #88]	; (c764 <initEM9304+0x94>)
    c70a:	f7ff f88b 	bl	b824 <am_devices_em9304_block_write>
  
  // HCI Respone should return in 1-2 messages at most, but driver returns
  // 0 bytes when nothing is available, so wait up to 10msec.
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    c70e:	2300      	movs	r3, #0
    c710:	607b      	str	r3, [r7, #4]
    c712:	e019      	b.n	c748 <initEM9304+0x78>
  {
    numBytesRx = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer,0);
    c714:	2200      	movs	r2, #0
    c716:	4914      	ldr	r1, [pc, #80]	; (c768 <initEM9304+0x98>)
    c718:	4812      	ldr	r0, [pc, #72]	; (c764 <initEM9304+0x94>)
    c71a:	f7ff f945 	bl	b9a8 <am_devices_em9304_block_read>
    c71e:	6038      	str	r0, [r7, #0]
    if ((numBytesRx == 7) && (0x0000FC32 == (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c720:	683b      	ldr	r3, [r7, #0]
    c722:	2b07      	cmp	r3, #7
    c724:	d10a      	bne.n	c73c <initEM9304+0x6c>
    c726:	4b10      	ldr	r3, [pc, #64]	; (c768 <initEM9304+0x98>)
    c728:	685b      	ldr	r3, [r3, #4]
    c72a:	b29b      	uxth	r3, r3
    c72c:	f64f 4232 	movw	r2, #64562	; 0xfc32
    c730:	4293      	cmp	r3, r2
    c732:	d103      	bne.n	c73c <initEM9304+0x6c>
    {
      am_util_debug_printf("EM9304 CPU Reset Successfully\n");
    c734:	480d      	ldr	r0, [pc, #52]	; (c76c <initEM9304+0x9c>)
    c736:	f001 fd65 	bl	e204 <am_util_stdio_printf>
      break;
    c73a:	e008      	b.n	c74e <initEM9304+0x7e>
    }
    am_util_delay_ms(EM9304_ATTEMPT_DELAY_MS);
    c73c:	2001      	movs	r0, #1
    c73e:	f000 fe43 	bl	d3c8 <am_util_delay_ms>
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	3301      	adds	r3, #1
    c746:	607b      	str	r3, [r7, #4]
    c748:	687b      	ldr	r3, [r7, #4]
    c74a:	2b63      	cmp	r3, #99	; 0x63
    c74c:	d9e2      	bls.n	c714 <initEM9304+0x44>
  }
  
}
    c74e:	bf00      	nop
    c750:	3708      	adds	r7, #8
    c752:	46bd      	mov	sp, r7
    c754:	bd80      	pop	{r7, pc}
    c756:	bf00      	nop
    c758:	00011e08 	.word	0x00011e08
    c75c:	00011e2c 	.word	0x00011e2c
    c760:	100010b4 	.word	0x100010b4
    c764:	00012e30 	.word	0x00012e30
    c768:	10001abc 	.word	0x10001abc
    c76c:	00011e68 	.word	0x00011e68

0000c770 <hciDrvWrite>:
//! @return Returns the number of bytes written.
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
    c770:	b580      	push	{r7, lr}
    c772:	b082      	sub	sp, #8
    c774:	af00      	add	r7, sp, #0
    c776:	4603      	mov	r3, r0
    c778:	603a      	str	r2, [r7, #0]
    c77a:	71fb      	strb	r3, [r7, #7]
    c77c:	460b      	mov	r3, r1
    c77e:	80bb      	strh	r3, [r7, #4]
    //
    // Turn on the IOM for this operation.
    //
    am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
    c780:	4b0a      	ldr	r3, [pc, #40]	; (c7ac <hciDrvWrite+0x3c>)
    c782:	685b      	ldr	r3, [r3, #4]
    c784:	4618      	mov	r0, r3
    c786:	f7ff fa25 	bl	bbd4 <am_devices_em9304_spi_awake>

	  //
	  // Write the HCI packet.
	  //
    am_devices_em9304_block_write(&g_sEm9304, type, pData, len );
    c78a:	88bb      	ldrh	r3, [r7, #4]
    c78c:	79f9      	ldrb	r1, [r7, #7]
    c78e:	683a      	ldr	r2, [r7, #0]
    c790:	4806      	ldr	r0, [pc, #24]	; (c7ac <hciDrvWrite+0x3c>)
    c792:	f7ff f847 	bl	b824 <am_devices_em9304_block_write>
	
    //
    // Disable IOM SPI pins and turn off the IOM after operation
    //
    am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
    c796:	4b05      	ldr	r3, [pc, #20]	; (c7ac <hciDrvWrite+0x3c>)
    c798:	685b      	ldr	r3, [r3, #4]
    c79a:	4618      	mov	r0, r3
    c79c:	f7ff fabc 	bl	bd18 <am_devices_em9304_spi_sleep>

    return len;
    c7a0:	88bb      	ldrh	r3, [r7, #4]
}
    c7a2:	4618      	mov	r0, r3
    c7a4:	3708      	adds	r7, #8
    c7a6:	46bd      	mov	sp, r7
    c7a8:	bd80      	pop	{r7, pc}
    c7aa:	bf00      	nop
    c7ac:	00012e30 	.word	0x00012e30

0000c7b0 <HciDataReadyISR>:
    return TRUE;
}

bool_t
HciDataReadyISR(void)
{
    c7b0:	b580      	push	{r7, lr}
    c7b2:	af00      	add	r7, sp, #0
  //
  // If the radio boot has not yet completed, then do not process HCI packets
  if (!radio_boot_complete)
    c7b4:	4b52      	ldr	r3, [pc, #328]	; (c900 <HciDataReadyISR+0x150>)
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d101      	bne.n	c7c0 <HciDataReadyISR+0x10>
  {
    return TRUE;
    c7bc:	2301      	movs	r3, #1
    c7be:	e09c      	b.n	c8fa <HciDataReadyISR+0x14a>
  }

  // check if there's pending HCI data from last time
  if (g_ui32HCIPacketSize > g_consumed_bytes)
    c7c0:	4b50      	ldr	r3, [pc, #320]	; (c904 <HciDataReadyISR+0x154>)
    c7c2:	781b      	ldrb	r3, [r3, #0]
    c7c4:	461a      	mov	r2, r3
    c7c6:	4b50      	ldr	r3, [pc, #320]	; (c908 <HciDataReadyISR+0x158>)
    c7c8:	681b      	ldr	r3, [r3, #0]
    c7ca:	429a      	cmp	r2, r3
    c7cc:	d226      	bcs.n	c81c <HciDataReadyISR+0x6c>
  {
    g_consumed_bytes += hciTrSerialRxIncoming(
    c7ce:	4b4d      	ldr	r3, [pc, #308]	; (c904 <HciDataReadyISR+0x154>)
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	461a      	mov	r2, r3
    c7d4:	4b4d      	ldr	r3, [pc, #308]	; (c90c <HciDataReadyISR+0x15c>)
    c7d6:	18d0      	adds	r0, r2, r3
    c7d8:	4b4b      	ldr	r3, [pc, #300]	; (c908 <HciDataReadyISR+0x158>)
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	b2da      	uxtb	r2, r3
    c7de:	4b49      	ldr	r3, [pc, #292]	; (c904 <HciDataReadyISR+0x154>)
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	1ad3      	subs	r3, r2, r3
    c7e4:	b2db      	uxtb	r3, r3
    c7e6:	4619      	mov	r1, r3
    c7e8:	f7fd f956 	bl	9a98 <hciTrSerialRxIncoming>
    c7ec:	4603      	mov	r3, r0
    c7ee:	461a      	mov	r2, r3
    c7f0:	4b44      	ldr	r3, [pc, #272]	; (c904 <HciDataReadyISR+0x154>)
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	4413      	add	r3, r2
    c7f6:	b2da      	uxtb	r2, r3
    c7f8:	4b42      	ldr	r3, [pc, #264]	; (c904 <HciDataReadyISR+0x154>)
    c7fa:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)g_pui32HCIRXBuffer) + g_consumed_bytes, 
              g_ui32HCIPacketSize - g_consumed_bytes);

    if (g_consumed_bytes == g_ui32HCIPacketSize) {
    c7fc:	4b41      	ldr	r3, [pc, #260]	; (c904 <HciDataReadyISR+0x154>)
    c7fe:	781b      	ldrb	r3, [r3, #0]
    c800:	461a      	mov	r2, r3
    c802:	4b41      	ldr	r3, [pc, #260]	; (c908 <HciDataReadyISR+0x158>)
    c804:	681b      	ldr	r3, [r3, #0]
    c806:	429a      	cmp	r2, r3
    c808:	d106      	bne.n	c818 <HciDataReadyISR+0x68>
      g_ui32HCIPacketSize = 0;
    c80a:	4b3f      	ldr	r3, [pc, #252]	; (c908 <HciDataReadyISR+0x158>)
    c80c:	2200      	movs	r2, #0
    c80e:	601a      	str	r2, [r3, #0]
      g_consumed_bytes    = 0;
    c810:	4b3c      	ldr	r3, [pc, #240]	; (c904 <HciDataReadyISR+0x154>)
    c812:	2200      	movs	r2, #0
    c814:	701a      	strb	r2, [r3, #0]
    c816:	e001      	b.n	c81c <HciDataReadyISR+0x6c>
    }
    else {
      return FALSE;
    c818:	2300      	movs	r3, #0
    c81a:	e06e      	b.n	c8fa <HciDataReadyISR+0x14a>
  }

  //
  // Turn on the IOM for this operation.
  //
  am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
    c81c:	4b3c      	ldr	r3, [pc, #240]	; (c910 <HciDataReadyISR+0x160>)
    c81e:	685b      	ldr	r3, [r3, #4]
    c820:	4618      	mov	r0, r3
    c822:	f7ff f9d7 	bl	bbd4 <am_devices_em9304_spi_awake>

  g_ui32HCIPacketSize = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer, 0);
    c826:	2200      	movs	r2, #0
    c828:	4938      	ldr	r1, [pc, #224]	; (c90c <HciDataReadyISR+0x15c>)
    c82a:	4839      	ldr	r0, [pc, #228]	; (c910 <HciDataReadyISR+0x160>)
    c82c:	f7ff f8bc 	bl	b9a8 <am_devices_em9304_block_read>
    c830:	4602      	mov	r2, r0
    c832:	4b35      	ldr	r3, [pc, #212]	; (c908 <HciDataReadyISR+0x158>)
    c834:	601a      	str	r2, [r3, #0]

  // Check for EM9304 Vendor Specific events and record them.
	if ( (g_ui32HCIPacketSize > 3) && (0x0001FF04 == (g_pui32HCIRXBuffer[0] & 0x00FFFFFF)) )
    c836:	4b34      	ldr	r3, [pc, #208]	; (c908 <HciDataReadyISR+0x158>)
    c838:	681b      	ldr	r3, [r3, #0]
    c83a:	2b03      	cmp	r3, #3
    c83c:	d931      	bls.n	c8a2 <HciDataReadyISR+0xf2>
    c83e:	4b33      	ldr	r3, [pc, #204]	; (c90c <HciDataReadyISR+0x15c>)
    c840:	681b      	ldr	r3, [r3, #0]
    c842:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c846:	4a33      	ldr	r2, [pc, #204]	; (c914 <HciDataReadyISR+0x164>)
    c848:	4293      	cmp	r3, r2
    c84a:	d12a      	bne.n	c8a2 <HciDataReadyISR+0xf2>
	{
		switch((g_pui32HCIRXBuffer[0] & 0xFF000000) >> 24)
    c84c:	4b2f      	ldr	r3, [pc, #188]	; (c90c <HciDataReadyISR+0x15c>)
    c84e:	681b      	ldr	r3, [r3, #0]
    c850:	0e1b      	lsrs	r3, r3, #24
    c852:	2b03      	cmp	r3, #3
    c854:	d00c      	beq.n	c870 <HciDataReadyISR+0xc0>
    c856:	2b04      	cmp	r3, #4
    c858:	d013      	beq.n	c882 <HciDataReadyISR+0xd2>
    c85a:	2b01      	cmp	r3, #1
    c85c:	d11a      	bne.n	c894 <HciDataReadyISR+0xe4>
		{
			case 0x01:
				g_EMVendorSpecificEvents.EM_ActiveStateEntered++;
    c85e:	4b2e      	ldr	r3, [pc, #184]	; (c918 <HciDataReadyISR+0x168>)
    c860:	681b      	ldr	r3, [r3, #0]
    c862:	3301      	adds	r3, #1
    c864:	4a2c      	ldr	r2, [pc, #176]	; (c918 <HciDataReadyISR+0x168>)
    c866:	6013      	str	r3, [r2, #0]
				am_util_debug_printf("Received EM_ActiveStateEntered Event\n");					
    c868:	482c      	ldr	r0, [pc, #176]	; (c91c <HciDataReadyISR+0x16c>)
    c86a:	f001 fccb 	bl	e204 <am_util_stdio_printf>
				break;
    c86e:	e015      	b.n	c89c <HciDataReadyISR+0xec>
			case 0x03:
				g_EMVendorSpecificEvents.EM_TestModeEntered++;
    c870:	4b29      	ldr	r3, [pc, #164]	; (c918 <HciDataReadyISR+0x168>)
    c872:	685b      	ldr	r3, [r3, #4]
    c874:	3301      	adds	r3, #1
    c876:	4a28      	ldr	r2, [pc, #160]	; (c918 <HciDataReadyISR+0x168>)
    c878:	6053      	str	r3, [r2, #4]
				am_util_debug_printf("Received EM_TestModeEntered Event\n");					
    c87a:	4829      	ldr	r0, [pc, #164]	; (c920 <HciDataReadyISR+0x170>)
    c87c:	f001 fcc2 	bl	e204 <am_util_stdio_printf>
				break;
    c880:	e00c      	b.n	c89c <HciDataReadyISR+0xec>
			case 0x04:
				g_EMVendorSpecificEvents.EM_HalNotification++;
    c882:	4b25      	ldr	r3, [pc, #148]	; (c918 <HciDataReadyISR+0x168>)
    c884:	689b      	ldr	r3, [r3, #8]
    c886:	3301      	adds	r3, #1
    c888:	4a23      	ldr	r2, [pc, #140]	; (c918 <HciDataReadyISR+0x168>)
    c88a:	6093      	str	r3, [r2, #8]
				am_util_debug_printf("Received EM_HalNotification Event\n");		
    c88c:	4825      	ldr	r0, [pc, #148]	; (c924 <HciDataReadyISR+0x174>)
    c88e:	f001 fcb9 	bl	e204 <am_util_stdio_printf>
				break;
    c892:	e003      	b.n	c89c <HciDataReadyISR+0xec>
			default:
				am_util_debug_printf("Received Unknown Vendor Specific Event from EM9304\n");
    c894:	4824      	ldr	r0, [pc, #144]	; (c928 <HciDataReadyISR+0x178>)
    c896:	f001 fcb5 	bl	e204 <am_util_stdio_printf>
				break;
    c89a:	bf00      	nop
		}
		
		//
		// Reset the packet size to 0 so that this packet will not be processed by the host stack.
		//
		g_ui32HCIPacketSize = 0;
    c89c:	4b1a      	ldr	r3, [pc, #104]	; (c908 <HciDataReadyISR+0x158>)
    c89e:	2200      	movs	r2, #0
    c8a0:	601a      	str	r2, [r3, #0]
	}
		
	if (g_ui32HCIPacketSize > 0)
    c8a2:	4b19      	ldr	r3, [pc, #100]	; (c908 <HciDataReadyISR+0x158>)
    c8a4:	681b      	ldr	r3, [r3, #0]
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d01b      	beq.n	c8e2 <HciDataReadyISR+0x132>
  {
    g_consumed_bytes += hciTrSerialRxIncoming((uint8_t *)g_pui32HCIRXBuffer, g_ui32HCIPacketSize);
    c8aa:	4b17      	ldr	r3, [pc, #92]	; (c908 <HciDataReadyISR+0x158>)
    c8ac:	681b      	ldr	r3, [r3, #0]
    c8ae:	b2db      	uxtb	r3, r3
    c8b0:	4619      	mov	r1, r3
    c8b2:	4816      	ldr	r0, [pc, #88]	; (c90c <HciDataReadyISR+0x15c>)
    c8b4:	f7fd f8f0 	bl	9a98 <hciTrSerialRxIncoming>
    c8b8:	4603      	mov	r3, r0
    c8ba:	461a      	mov	r2, r3
    c8bc:	4b11      	ldr	r3, [pc, #68]	; (c904 <HciDataReadyISR+0x154>)
    c8be:	781b      	ldrb	r3, [r3, #0]
    c8c0:	4413      	add	r3, r2
    c8c2:	b2da      	uxtb	r2, r3
    c8c4:	4b0f      	ldr	r3, [pc, #60]	; (c904 <HciDataReadyISR+0x154>)
    c8c6:	701a      	strb	r2, [r3, #0]
    if (g_consumed_bytes == g_ui32HCIPacketSize) {
    c8c8:	4b0e      	ldr	r3, [pc, #56]	; (c904 <HciDataReadyISR+0x154>)
    c8ca:	781b      	ldrb	r3, [r3, #0]
    c8cc:	461a      	mov	r2, r3
    c8ce:	4b0e      	ldr	r3, [pc, #56]	; (c908 <HciDataReadyISR+0x158>)
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	429a      	cmp	r2, r3
    c8d4:	d105      	bne.n	c8e2 <HciDataReadyISR+0x132>
      g_ui32HCIPacketSize = 0;
    c8d6:	4b0c      	ldr	r3, [pc, #48]	; (c908 <HciDataReadyISR+0x158>)
    c8d8:	2200      	movs	r2, #0
    c8da:	601a      	str	r2, [r3, #0]
      g_consumed_bytes = 0;
    c8dc:	4b09      	ldr	r3, [pc, #36]	; (c904 <HciDataReadyISR+0x154>)
    c8de:	2200      	movs	r2, #0
    c8e0:	701a      	strb	r2, [r3, #0]
  }

  //
  // Disable IOM SPI pins and turn off the IOM after operation
  //
  am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
    c8e2:	4b0b      	ldr	r3, [pc, #44]	; (c910 <HciDataReadyISR+0x160>)
    c8e4:	685b      	ldr	r3, [r3, #4]
    c8e6:	4618      	mov	r0, r3
    c8e8:	f7ff fa16 	bl	bd18 <am_devices_em9304_spi_sleep>

  return (g_ui32HCIPacketSize == 0);
    c8ec:	4b06      	ldr	r3, [pc, #24]	; (c908 <HciDataReadyISR+0x158>)
    c8ee:	681b      	ldr	r3, [r3, #0]
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	bf0c      	ite	eq
    c8f4:	2301      	moveq	r3, #1
    c8f6:	2300      	movne	r3, #0
    c8f8:	b2db      	uxtb	r3, r3
}
    c8fa:	4618      	mov	r0, r3
    c8fc:	bd80      	pop	{r7, pc}
    c8fe:	bf00      	nop
    c900:	10001bc0 	.word	0x10001bc0
    c904:	10001cc8 	.word	0x10001cc8
    c908:	10001cc4 	.word	0x10001cc4
    c90c:	10001bc4 	.word	0x10001bc4
    c910:	00012e30 	.word	0x00012e30
    c914:	0001ff04 	.word	0x0001ff04
    c918:	10001ccc 	.word	0x10001ccc
    c91c:	00011e88 	.word	0x00011e88
    c920:	00011eb0 	.word	0x00011eb0
    c924:	00011ed4 	.word	0x00011ed4
    c928:	00011ef8 	.word	0x00011ef8

0000c92c <HciDrvRadioBoot>:
// Configure the necessary pins and start the EM9304 radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(uint32_t ui32UartModule)
{
    c92c:	b580      	push	{r7, lr}
    c92e:	b084      	sub	sp, #16
    c930:	af00      	add	r7, sp, #0
    c932:	6078      	str	r0, [r7, #4]
    // disable interrupt during EM9304 initialization.
    am_devices_em9304_disable_interrupt();
    c934:	f7ff fab0 	bl	be98 <am_devices_em9304_disable_interrupt>

    radio_boot_complete = 0;
    c938:	4b32      	ldr	r3, [pc, #200]	; (ca04 <HciDrvRadioBoot+0xd8>)
    c93a:	2200      	movs	r2, #0
    c93c:	701a      	strb	r2, [r3, #0]
#endif

    //
    // Assert RESET to the EM9304 device.
    //
    am_hal_gpio_pin_config(HCI_APOLLO_RESET_PIN, AM_HAL_GPIO_OUTPUT);
    c93e:	f002 f981 	bl	ec44 <am_hal_interrupt_master_disable>
    c942:	4603      	mov	r3, r0
    c944:	60fb      	str	r3, [r7, #12]
    c946:	4b30      	ldr	r3, [pc, #192]	; (ca08 <HciDrvRadioBoot+0xdc>)
    c948:	2273      	movs	r2, #115	; 0x73
    c94a:	601a      	str	r2, [r3, #0]
    c94c:	4a2f      	ldr	r2, [pc, #188]	; (ca0c <HciDrvRadioBoot+0xe0>)
    c94e:	4b2f      	ldr	r3, [pc, #188]	; (ca0c <HciDrvRadioBoot+0xe0>)
    c950:	681b      	ldr	r3, [r3, #0]
    c952:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    c956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    c95a:	6013      	str	r3, [r2, #0]
    c95c:	4a2c      	ldr	r2, [pc, #176]	; (ca10 <HciDrvRadioBoot+0xe4>)
    c95e:	4b2c      	ldr	r3, [pc, #176]	; (ca10 <HciDrvRadioBoot+0xe4>)
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    c966:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    c96a:	6013      	str	r3, [r2, #0]
    c96c:	4a29      	ldr	r2, [pc, #164]	; (ca14 <HciDrvRadioBoot+0xe8>)
    c96e:	4b29      	ldr	r3, [pc, #164]	; (ca14 <HciDrvRadioBoot+0xe8>)
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    c976:	6013      	str	r3, [r2, #0]
    c978:	4b23      	ldr	r3, [pc, #140]	; (ca08 <HciDrvRadioBoot+0xdc>)
    c97a:	2200      	movs	r2, #0
    c97c:	601a      	str	r2, [r3, #0]
    c97e:	68fb      	ldr	r3, [r7, #12]
    c980:	4618      	mov	r0, r3
    c982:	f002 f963 	bl	ec4c <am_hal_interrupt_master_set>
    am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
    c986:	4b24      	ldr	r3, [pc, #144]	; (ca18 <HciDrvRadioBoot+0xec>)
    c988:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c98c:	601a      	str	r2, [r3, #0]

    //
    // Setup SPI interface for EM9304
    //
    am_devices_em9304_config_pins();
    c98e:	f7ff f9df 	bl	bd50 <am_devices_em9304_config_pins>
    am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
    c992:	4b22      	ldr	r3, [pc, #136]	; (ca1c <HciDrvRadioBoot+0xf0>)
    c994:	685b      	ldr	r3, [r3, #4]
    c996:	4922      	ldr	r1, [pc, #136]	; (ca20 <HciDrvRadioBoot+0xf4>)
    c998:	4618      	mov	r0, r3
    c99a:	f7ff f8e9 	bl	bb70 <am_devices_em9304_spi_init>
  
    //
    // Enable the IOM and GPIO interrupt handlers.
    //
    am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
    c99e:	4b21      	ldr	r3, [pc, #132]	; (ca24 <HciDrvRadioBoot+0xf8>)
    c9a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c9a4:	601a      	str	r2, [r3, #0]

    //
    // Delay for 20ms to make sure the em device gets ready for commands.
    //
    am_util_delay_ms(20);
    c9a6:	2014      	movs	r0, #20
    c9a8:	f000 fd0e 	bl	d3c8 <am_util_delay_ms>

    //
    // Initialize the EM9304.
    //
    initEM9304();
    c9ac:	f7ff fe90 	bl	c6d0 <initEM9304>

    // delay here to make sure EM9304 is ready for operation after
    // patch is loaded.
    am_util_delay_ms(20);
    c9b0:	2014      	movs	r0, #20
    c9b2:	f000 fd09 	bl	d3c8 <am_util_delay_ms>
    // Set the MAC address. Use the CHIPID1 register for additional
    // randomization if the config file requested it.
    //
    if (HCI_APOLLO_USE_CHIPID_FOR_MAC)
    {
        g_pui8BLEMacAddress[0] = AM_REG(MCUCTRL, CHIPID1);
    c9b6:	4b1c      	ldr	r3, [pc, #112]	; (ca28 <HciDrvRadioBoot+0xfc>)
    c9b8:	681b      	ldr	r3, [r3, #0]
    c9ba:	b2da      	uxtb	r2, r3
    c9bc:	4b1b      	ldr	r3, [pc, #108]	; (ca2c <HciDrvRadioBoot+0x100>)
    c9be:	701a      	strb	r2, [r3, #0]
        g_pui8BLEMacAddress[1] = AM_REG(MCUCTRL, CHIPID1) >> 8;
    c9c0:	4b19      	ldr	r3, [pc, #100]	; (ca28 <HciDrvRadioBoot+0xfc>)
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	0a1b      	lsrs	r3, r3, #8
    c9c6:	b2da      	uxtb	r2, r3
    c9c8:	4b18      	ldr	r3, [pc, #96]	; (ca2c <HciDrvRadioBoot+0x100>)
    c9ca:	705a      	strb	r2, [r3, #1]
        g_pui8BLEMacAddress[2] = AM_REG(MCUCTRL, CHIPID1) >> 16;
    c9cc:	4b16      	ldr	r3, [pc, #88]	; (ca28 <HciDrvRadioBoot+0xfc>)
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	0c1b      	lsrs	r3, r3, #16
    c9d2:	b2da      	uxtb	r2, r3
    c9d4:	4b15      	ldr	r3, [pc, #84]	; (ca2c <HciDrvRadioBoot+0x100>)
    c9d6:	709a      	strb	r2, [r3, #2]
    }

    am_devices_em9304_mac_set(g_pui8BLEMacAddress);
    c9d8:	4814      	ldr	r0, [pc, #80]	; (ca2c <HciDrvRadioBoot+0x100>)
    c9da:	f7ff fa33 	bl	be44 <am_devices_em9304_mac_set>

    // Initialization of the EM9304 is complete.
    radio_boot_complete = 1;
    c9de:	4b09      	ldr	r3, [pc, #36]	; (ca04 <HciDrvRadioBoot+0xd8>)
    c9e0:	2201      	movs	r2, #1
    c9e2:	701a      	strb	r2, [r3, #0]
    g_ui32HCIPacketSize = 0;
    c9e4:	4b12      	ldr	r3, [pc, #72]	; (ca30 <HciDrvRadioBoot+0x104>)
    c9e6:	2200      	movs	r2, #0
    c9e8:	601a      	str	r2, [r3, #0]
    g_consumed_bytes    = 0;
    c9ea:	4b12      	ldr	r3, [pc, #72]	; (ca34 <HciDrvRadioBoot+0x108>)
    c9ec:	2200      	movs	r2, #0
    c9ee:	701a      	strb	r2, [r3, #0]
    am_util_debug_printf("HciDrvRadioBoot complete\n");
    c9f0:	4811      	ldr	r0, [pc, #68]	; (ca38 <HciDrvRadioBoot+0x10c>)
    c9f2:	f001 fc07 	bl	e204 <am_util_stdio_printf>

    // enable interrupt after EM9304 initialization is done.
    am_devices_em9304_enable_interrupt();
    c9f6:	f7ff fa45 	bl	be84 <am_devices_em9304_enable_interrupt>
}
    c9fa:	bf00      	nop
    c9fc:	3710      	adds	r7, #16
    c9fe:	46bd      	mov	sp, r7
    ca00:	bd80      	pop	{r7, pc}
    ca02:	bf00      	nop
    ca04:	10001bc0 	.word	0x10001bc0
    ca08:	40010060 	.word	0x40010060
    ca0c:	40010054 	.word	0x40010054
    ca10:	4001002c 	.word	0x4001002c
    ca14:	4001010c 	.word	0x4001010c
    ca18:	4001009c 	.word	0x4001009c
    ca1c:	00012e30 	.word	0x00012e30
    ca20:	00012e24 	.word	0x00012e24
    ca24:	40010094 	.word	0x40010094
    ca28:	40020008 	.word	0x40020008
    ca2c:	100010f4 	.word	0x100010f4
    ca30:	10001cc4 	.word	0x10001cc4
    ca34:	10001cc8 	.word	0x10001cc8
    ca38:	00011f2c 	.word	0x00011f2c

0000ca3c <HciVsEM_SetRfPowerLevelEx>:
 *
 *  \return true when success, otherwise false
 */
/*************************************************************************************************/
uint32_t HciVsEM_SetRfPowerLevelEx(txPowerLevel_t txPowerlevel)
{
    ca3c:	b580      	push	{r7, lr}
    ca3e:	b084      	sub	sp, #16
    ca40:	af00      	add	r7, sp, #0
    ca42:	4603      	mov	r3, r0
    ca44:	71fb      	strb	r3, [r7, #7]
  // make sure it's 8 bit
  uint8_t tx_power_level = (uint8_t)txPowerlevel;
    ca46:	79fb      	ldrb	r3, [r7, #7]
    ca48:	73fb      	strb	r3, [r7, #15]

  if(tx_power_level < TX_POWER_LEVEL_INVALID) {
    ca4a:	7bfb      	ldrb	r3, [r7, #15]
    ca4c:	2b11      	cmp	r3, #17
    ca4e:	d809      	bhi.n	ca64 <HciVsEM_SetRfPowerLevelEx+0x28>
    HciVendorSpecificCmd(0xFC26, sizeof(tx_power_level), &tx_power_level);
    ca50:	f107 030f 	add.w	r3, r7, #15
    ca54:	461a      	mov	r2, r3
    ca56:	2101      	movs	r1, #1
    ca58:	f64f 4026 	movw	r0, #64550	; 0xfc26
    ca5c:	f7fa fc07 	bl	726e <HciVendorSpecificCmd>
    return true;
    ca60:	2301      	movs	r3, #1
    ca62:	e000      	b.n	ca66 <HciVsEM_SetRfPowerLevelEx+0x2a>
  }
  else {
    return false;
    ca64:	2300      	movs	r3, #0
  }

}
    ca66:	4618      	mov	r0, r3
    ca68:	3710      	adds	r7, #16
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd80      	pop	{r7, pc}

0000ca6e <HciVsEM_TransmitterTest>:
 *
 *  \return None
 */
/*************************************************************************************************/
void HciVsEM_TransmitterTest(uint8_t test_mode, uint8_t channel_number, uint8_t packet_len, uint8_t packet_payload_type)
{
    ca6e:	b590      	push	{r4, r7, lr}
    ca70:	b085      	sub	sp, #20
    ca72:	af00      	add	r7, sp, #0
    ca74:	4604      	mov	r4, r0
    ca76:	4608      	mov	r0, r1
    ca78:	4611      	mov	r1, r2
    ca7a:	461a      	mov	r2, r3
    ca7c:	4623      	mov	r3, r4
    ca7e:	71fb      	strb	r3, [r7, #7]
    ca80:	4603      	mov	r3, r0
    ca82:	71bb      	strb	r3, [r7, #6]
    ca84:	460b      	mov	r3, r1
    ca86:	717b      	strb	r3, [r7, #5]
    ca88:	4613      	mov	r3, r2
    ca8a:	713b      	strb	r3, [r7, #4]
    uint8_t params[4] = {
    ca8c:	79fb      	ldrb	r3, [r7, #7]
    ca8e:	733b      	strb	r3, [r7, #12]
    ca90:	79bb      	ldrb	r3, [r7, #6]
    ca92:	737b      	strb	r3, [r7, #13]
    ca94:	797b      	ldrb	r3, [r7, #5]
    ca96:	73bb      	strb	r3, [r7, #14]
    ca98:	793b      	ldrb	r3, [r7, #4]
    ca9a:	73fb      	strb	r3, [r7, #15]
      channel_number,
      packet_len,
      packet_payload_type
    };

    HciVendorSpecificCmd(0xFC11, sizeof(params), &params[0]);
    ca9c:	f107 030c 	add.w	r3, r7, #12
    caa0:	461a      	mov	r2, r3
    caa2:	2104      	movs	r1, #4
    caa4:	f64f 4011 	movw	r0, #64529	; 0xfc11
    caa8:	f7fa fbe1 	bl	726e <HciVendorSpecificCmd>

}
    caac:	bf00      	nop
    caae:	3714      	adds	r7, #20
    cab0:	46bd      	mov	sp, r7
    cab2:	bd90      	pop	{r4, r7, pc}

0000cab4 <HciVsEM_TransmitterTestEnd>:
 *
 *  \return None
 */
/*************************************************************************************************/
void HciVsEM_TransmitterTestEnd(void)
{
    cab4:	b580      	push	{r7, lr}
    cab6:	af00      	add	r7, sp, #0
    HciVendorSpecificCmd(0xFC12, 0, NULL);
    cab8:	2200      	movs	r2, #0
    caba:	2100      	movs	r1, #0
    cabc:	f64f 4012 	movw	r0, #64530	; 0xfc12
    cac0:	f7fa fbd5 	bl	726e <HciVendorSpecificCmd>
}
    cac4:	bf00      	nop
    cac6:	bd80      	pop	{r7, pc}

0000cac8 <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
    cac8:	b480      	push	{r7}
    caca:	af00      	add	r7, sp, #0
  return;
    cacc:	bf00      	nop
}
    cace:	46bd      	mov	sp, r7
    cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cad4:	4770      	bx	lr

0000cad6 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
    cad6:	b480      	push	{r7}
    cad8:	b083      	sub	sp, #12
    cada:	af00      	add	r7, sp, #0
    cadc:	6078      	str	r0, [r7, #4]

}
    cade:	bf00      	nop
    cae0:	370c      	adds	r7, #12
    cae2:	46bd      	mov	sp, r7
    cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae8:	4770      	bx	lr

0000caea <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
    caea:	b480      	push	{r7}
    caec:	af00      	add	r7, sp, #0

}
    caee:	bf00      	nop
    caf0:	46bd      	mov	sp, r7
    caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    caf6:	4770      	bx	lr

0000caf8 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
    caf8:	b480      	push	{r7}
    cafa:	af00      	add	r7, sp, #0

}
    cafc:	bf00      	nop
    cafe:	46bd      	mov	sp, r7
    cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb04:	4770      	bx	lr
	...

0000cb08 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
    cb08:	b580      	push	{r7, lr}
    cb0a:	b082      	sub	sp, #8
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	4603      	mov	r3, r0
    cb10:	71fb      	strb	r3, [r7, #7]
  if(appUiBtn.cback) {
    cb12:	4b06      	ldr	r3, [pc, #24]	; (cb2c <AppUiBtnTest+0x24>)
    cb14:	681b      	ldr	r3, [r3, #0]
    cb16:	2b00      	cmp	r3, #0
    cb18:	d004      	beq.n	cb24 <AppUiBtnTest+0x1c>
    (*appUiBtn.cback)(btn);
    cb1a:	4b04      	ldr	r3, [pc, #16]	; (cb2c <AppUiBtnTest+0x24>)
    cb1c:	681b      	ldr	r3, [r3, #0]
    cb1e:	79fa      	ldrb	r2, [r7, #7]
    cb20:	4610      	mov	r0, r2
    cb22:	4798      	blx	r3
  }
}
    cb24:	bf00      	nop
    cb26:	3708      	adds	r7, #8
    cb28:	46bd      	mov	sp, r7
    cb2a:	bd80      	pop	{r7, pc}
    cb2c:	10001ce8 	.word	0x10001ce8

0000cb30 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
    cb30:	b480      	push	{r7}
    cb32:	b083      	sub	sp, #12
    cb34:	af00      	add	r7, sp, #0
    cb36:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
    cb38:	4a04      	ldr	r2, [pc, #16]	; (cb4c <HciEvtRegister+0x1c>)
    cb3a:	687b      	ldr	r3, [r7, #4]
    cb3c:	6093      	str	r3, [r2, #8]
}
    cb3e:	bf00      	nop
    cb40:	370c      	adds	r7, #12
    cb42:	46bd      	mov	sp, r7
    cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb48:	4770      	bx	lr
    cb4a:	bf00      	nop
    cb4c:	100028f4 	.word	0x100028f4

0000cb50 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
    cb50:	b480      	push	{r7}
    cb52:	b083      	sub	sp, #12
    cb54:	af00      	add	r7, sp, #0
    cb56:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
    cb58:	4a04      	ldr	r2, [pc, #16]	; (cb6c <HciSecRegister+0x1c>)
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	60d3      	str	r3, [r2, #12]
}
    cb5e:	bf00      	nop
    cb60:	370c      	adds	r7, #12
    cb62:	46bd      	mov	sp, r7
    cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb68:	4770      	bx	lr
    cb6a:	bf00      	nop
    cb6c:	100028f4 	.word	0x100028f4

0000cb70 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
    cb70:	b480      	push	{r7}
    cb72:	b083      	sub	sp, #12
    cb74:	af00      	add	r7, sp, #0
    cb76:	6078      	str	r0, [r7, #4]
    cb78:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
    cb7a:	4a06      	ldr	r2, [pc, #24]	; (cb94 <HciAclRegister+0x24>)
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
    cb80:	4a04      	ldr	r2, [pc, #16]	; (cb94 <HciAclRegister+0x24>)
    cb82:	683b      	ldr	r3, [r7, #0]
    cb84:	6153      	str	r3, [r2, #20]
}
    cb86:	bf00      	nop
    cb88:	370c      	adds	r7, #12
    cb8a:	46bd      	mov	sp, r7
    cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb90:	4770      	bx	lr
    cb92:	bf00      	nop
    cb94:	100028f4 	.word	0x100028f4

0000cb98 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
    cb98:	b580      	push	{r7, lr}
    cb9a:	b082      	sub	sp, #8
    cb9c:	af00      	add	r7, sp, #0
    cb9e:	4603      	mov	r3, r0
    cba0:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
    cba2:	4a07      	ldr	r2, [pc, #28]	; (cbc0 <HciHandlerInit+0x28>)
    cba4:	79fb      	ldrb	r3, [r7, #7]
    cba6:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
    cba8:	4b05      	ldr	r3, [pc, #20]	; (cbc0 <HciHandlerInit+0x28>)
    cbaa:	2200      	movs	r2, #0
    cbac:	601a      	str	r2, [r3, #0]
    cbae:	4b04      	ldr	r3, [pc, #16]	; (cbc0 <HciHandlerInit+0x28>)
    cbb0:	2200      	movs	r2, #0
    cbb2:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
    cbb4:	f7fa fefe 	bl	79b4 <HciCoreInit>
}
    cbb8:	bf00      	nop
    cbba:	3708      	adds	r7, #8
    cbbc:	46bd      	mov	sp, r7
    cbbe:	bd80      	pop	{r7, pc}
    cbc0:	100028f4 	.word	0x100028f4

0000cbc4 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    cbc4:	b580      	push	{r7, lr}
    cbc6:	b082      	sub	sp, #8
    cbc8:	af00      	add	r7, sp, #0
    cbca:	4603      	mov	r3, r0
    cbcc:	6039      	str	r1, [r7, #0]
    cbce:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
    cbd0:	79fb      	ldrb	r3, [r7, #7]
    cbd2:	6839      	ldr	r1, [r7, #0]
    cbd4:	4618      	mov	r0, r3
    cbd6:	f7fb f857 	bl	7c88 <HciCoreHandler>
}
    cbda:	bf00      	nop
    cbdc:	3708      	adds	r7, #8
    cbde:	46bd      	mov	sp, r7
    cbe0:	bd80      	pop	{r7, pc}
	...

0000cbe4 <ble_data_ready_handler>:
//
//*****************************************************************************
uint32_t g_ui32LastTime = 0;

void ble_data_ready_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b082      	sub	sp, #8
    cbe8:	af00      	add	r7, sp, #0
    cbea:	4603      	mov	r3, r0
    cbec:	6039      	str	r1, [r7, #0]
    cbee:	71fb      	strb	r3, [r7, #7]
    if (FALSE == HciDataReadyISR()) {
    cbf0:	f7ff fdde 	bl	c7b0 <HciDataReadyISR>
    cbf4:	4603      	mov	r3, r0
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d105      	bne.n	cc06 <ble_data_ready_handler+0x22>
        // trigger event again to handle pending data from BLE controller
        WsfSetEvent(g_bleDataReadyHandlerId, BLE_DATA_READY_EVENT);
    cbfa:	4b05      	ldr	r3, [pc, #20]	; (cc10 <ble_data_ready_handler+0x2c>)
    cbfc:	781b      	ldrb	r3, [r3, #0]
    cbfe:	2101      	movs	r1, #1
    cc00:	4618      	mov	r0, r3
    cc02:	f7fd fa63 	bl	a0cc <WsfSetEvent>
    }
}
    cc06:	bf00      	nop
    cc08:	3708      	adds	r7, #8
    cc0a:	46bd      	mov	sp, r7
    cc0c:	bd80      	pop	{r7, pc}
    cc0e:	bf00      	nop
    cc10:	10002910 	.word	0x10002910

0000cc14 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;

    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
    cc1a:	f000 f891 	bl	cd40 <scheduler_timer_init>
    WsfTimerInit();
    cc1e:	f7fe fab9 	bl	b194 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    WsfBufInit(sizeof(g_pui32BufMem), (uint8_t*)g_pui32BufMem, WSF_BUF_POOLS, g_psPoolDescriptors);
    cc22:	4b3b      	ldr	r3, [pc, #236]	; (cd10 <exactle_stack_init+0xfc>)
    cc24:	2204      	movs	r2, #4
    cc26:	493b      	ldr	r1, [pc, #236]	; (cd14 <exactle_stack_init+0x100>)
    cc28:	f44f 6000 	mov.w	r0, #2048	; 0x800
    cc2c:	f7fd ffd0 	bl	abd0 <WsfBufInit>

    //
    // Initialize security.
    //
    SecInit();
    cc30:	f7fd ff94 	bl	ab5c <SecInit>
    SecAesInit();
    cc34:	f7fd fc8c 	bl	a550 <SecAesInit>
    SecCmacInit();
    cc38:	f7fd fe5e 	bl	a8f8 <SecCmacInit>
    SecEccInit();
    cc3c:	f7fd ff24 	bl	aa88 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
    cc40:	4835      	ldr	r0, [pc, #212]	; (cd18 <exactle_stack_init+0x104>)
    cc42:	f7fd fa9f 	bl	a184 <WsfOsSetNextHandler>
    cc46:	4603      	mov	r3, r0
    cc48:	71fb      	strb	r3, [r7, #7]
    HciHandlerInit(handlerId);
    cc4a:	79fb      	ldrb	r3, [r7, #7]
    cc4c:	4618      	mov	r0, r3
    cc4e:	f7ff ffa3 	bl	cb98 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
    cc52:	4832      	ldr	r0, [pc, #200]	; (cd1c <exactle_stack_init+0x108>)
    cc54:	f7fd fa96 	bl	a184 <WsfOsSetNextHandler>
    cc58:	4603      	mov	r3, r0
    cc5a:	71fb      	strb	r3, [r7, #7]
    DmDevVsInit(0);
    cc5c:	2000      	movs	r0, #0
    cc5e:	f7f6 fae4 	bl	322a <DmDevVsInit>
    DmAdvInit();
    cc62:	f7f5 fd67 	bl	2734 <DmAdvInit>
    DmConnInit();
    cc66:	f7f5 ffef 	bl	2c48 <DmConnInit>
    DmConnSlaveInit();
    cc6a:	f7f6 fa33 	bl	30d4 <DmConnSlaveInit>
    DmSecInit();
    cc6e:	f7f6 fe1e 	bl	38ae <DmSecInit>
    DmSecLescInit();
    cc72:	f7f6 ff35 	bl	3ae0 <DmSecLescInit>
    DmPrivInit();
    cc76:	f7f6 fc79 	bl	356c <DmPrivInit>
    DmHandlerInit(handlerId);
    cc7a:	79fb      	ldrb	r3, [r7, #7]
    cc7c:	4618      	mov	r0, r3
    cc7e:	f7f6 fb29 	bl	32d4 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
    cc82:	4827      	ldr	r0, [pc, #156]	; (cd20 <exactle_stack_init+0x10c>)
    cc84:	f7fd fa7e 	bl	a184 <WsfOsSetNextHandler>
    cc88:	4603      	mov	r3, r0
    cc8a:	71fb      	strb	r3, [r7, #7]
    L2cSlaveHandlerInit(handlerId);
    cc8c:	79fb      	ldrb	r3, [r7, #7]
    cc8e:	4618      	mov	r0, r3
    cc90:	f7f7 f872 	bl	3d78 <L2cSlaveHandlerInit>
    L2cInit();
    cc94:	f7f6 ffa3 	bl	3bde <L2cInit>
    L2cSlaveInit();
    cc98:	f7f7 f828 	bl	3cec <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
    cc9c:	4821      	ldr	r0, [pc, #132]	; (cd24 <exactle_stack_init+0x110>)
    cc9e:	f7fd fa71 	bl	a184 <WsfOsSetNextHandler>
    cca2:	4603      	mov	r3, r0
    cca4:	71fb      	strb	r3, [r7, #7]
    AttHandlerInit(handlerId);
    cca6:	79fb      	ldrb	r3, [r7, #7]
    cca8:	4618      	mov	r0, r3
    ccaa:	f7f3 fac4 	bl	236 <AttHandlerInit>
    AttsInit();
    ccae:	f7f4 fb17 	bl	12e0 <AttsInit>
    AttsIndInit();
    ccb2:	f7f4 fa25 	bl	1100 <AttsIndInit>
    AttcInit();
    ccb6:	f7f3 fd25 	bl	704 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
    ccba:	481b      	ldr	r0, [pc, #108]	; (cd28 <exactle_stack_init+0x114>)
    ccbc:	f7fd fa62 	bl	a184 <WsfOsSetNextHandler>
    ccc0:	4603      	mov	r3, r0
    ccc2:	71fb      	strb	r3, [r7, #7]
    SmpHandlerInit(handlerId);
    ccc4:	79fb      	ldrb	r3, [r7, #7]
    ccc6:	4618      	mov	r0, r3
    ccc8:	f7f7 fadc 	bl	4284 <SmpHandlerInit>
    SmprInit();
    cccc:	f7f8 f8f2 	bl	4eb4 <SmprInit>
    SmprScInit();
    ccd0:	f7f8 f8d4 	bl	4e7c <SmprScInit>
    HciSetMaxRxAclLen(251);
    ccd4:	20fb      	movs	r0, #251	; 0xfb
    ccd6:	f7fa feb1 	bl	7a3c <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
    ccda:	4814      	ldr	r0, [pc, #80]	; (cd2c <exactle_stack_init+0x118>)
    ccdc:	f7fd fa52 	bl	a184 <WsfOsSetNextHandler>
    cce0:	4603      	mov	r3, r0
    cce2:	71fb      	strb	r3, [r7, #7]
    AppHandlerInit(handlerId);
    cce4:	79fb      	ldrb	r3, [r7, #7]
    cce6:	4618      	mov	r0, r3
    cce8:	f7fd fb74 	bl	a3d4 <AppHandlerInit>

    g_bleDataReadyHandlerId = WsfOsSetNextHandler(ble_data_ready_handler);
    ccec:	4810      	ldr	r0, [pc, #64]	; (cd30 <exactle_stack_init+0x11c>)
    ccee:	f7fd fa49 	bl	a184 <WsfOsSetNextHandler>
    ccf2:	4603      	mov	r3, r0
    ccf4:	461a      	mov	r2, r3
    ccf6:	4b0f      	ldr	r3, [pc, #60]	; (cd34 <exactle_stack_init+0x120>)
    ccf8:	701a      	strb	r2, [r3, #0]

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
    ccfa:	480f      	ldr	r0, [pc, #60]	; (cd38 <exactle_stack_init+0x124>)
    ccfc:	f7fd fa42 	bl	a184 <WsfOsSetNextHandler>
    cd00:	4603      	mov	r3, r0
    cd02:	461a      	mov	r2, r3
    cd04:	4b0d      	ldr	r3, [pc, #52]	; (cd3c <exactle_stack_init+0x128>)
    cd06:	701a      	strb	r2, [r3, #0]
}
    cd08:	bf00      	nop
    cd0a:	3708      	adds	r7, #8
    cd0c:	46bd      	mov	sp, r7
    cd0e:	bd80      	pop	{r7, pc}
    cd10:	100010fc 	.word	0x100010fc
    cd14:	10001cec 	.word	0x10001cec
    cd18:	0000cbc5 	.word	0x0000cbc5
    cd1c:	000032f1 	.word	0x000032f1
    cd20:	00003d89 	.word	0x00003d89
    cd24:	00000271 	.word	0x00000271
    cd28:	000042c9 	.word	0x000042c9
    cd2c:	0000a3f5 	.word	0x0000a3f5
    cd30:	0000cbe5 	.word	0x0000cbe5
    cd34:	10002910 	.word	0x10002910
    cd38:	0000ce55 	.word	0x0000ce55
    cd3c:	10002911 	.word	0x10002911

0000cd40 <scheduler_timer_init>:
// Set up a pair of timers to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
    cd40:	b580      	push	{r7, lr}
    cd42:	af00      	add	r7, sp, #0
    //
    // One of the timers will run in one-shot mode and provide interrupts for
    // scheduled events.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    cd44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cd48:	2000      	movs	r0, #0
    cd4a:	f001 fd35 	bl	e7b8 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    cd4e:	f44f 7205 	mov.w	r2, #532	; 0x214
    cd52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cd56:	2000      	movs	r0, #0
    cd58:	f001 fc86 	bl	e668 <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_ONCE));

    //
    // The other timer will run continuously and provide a constant time-base.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERB);
    cd5c:	490a      	ldr	r1, [pc, #40]	; (cd88 <scheduler_timer_init+0x48>)
    cd5e:	2000      	movs	r0, #0
    cd60:	f001 fd2a 	bl	e7b8 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERB,
    cd64:	f44f 728a 	mov.w	r2, #276	; 0x114
    cd68:	4907      	ldr	r1, [pc, #28]	; (cd88 <scheduler_timer_init+0x48>)
    cd6a:	2000      	movs	r0, #0
    cd6c:	f001 fc7c 	bl	e668 <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_CONTINUOUS));

    //
    // Start the continuous timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERB);
    cd70:	4905      	ldr	r1, [pc, #20]	; (cd88 <scheduler_timer_init+0x48>)
    cd72:	2000      	movs	r0, #0
    cd74:	f001 fcf2 	bl	e75c <am_hal_ctimer_start>

    //
    // Enable the timer interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    cd78:	2001      	movs	r0, #1
    cd7a:	f001 fde5 	bl	e948 <am_hal_ctimer_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    cd7e:	201d      	movs	r0, #29
    cd80:	f001 ff34 	bl	ebec <am_hal_interrupt_enable>
}
    cd84:	bf00      	nop
    cd86:	bd80      	pop	{r7, pc}
    cd88:	ffff0000 	.word	0xffff0000

0000cd8c <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
    cd8c:	b580      	push	{r7, lr}
    cd8e:	b082      	sub	sp, #8
    cd90:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = am_hal_ctimer_read(0, AM_HAL_CTIMER_TIMERB);
    cd92:	4914      	ldr	r1, [pc, #80]	; (cde4 <update_scheduler_timers+0x58>)
    cd94:	2000      	movs	r0, #0
    cd96:	f001 fd23 	bl	e7e0 <am_hal_ctimer_read>
    cd9a:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
    cd9c:	4b12      	ldr	r3, [pc, #72]	; (cde8 <update_scheduler_timers+0x5c>)
    cd9e:	681b      	ldr	r3, [r3, #0]
                       (ui32CurrentTime - g_ui32LastTime) :
    cda0:	687a      	ldr	r2, [r7, #4]
    cda2:	429a      	cmp	r2, r3
    cda4:	d304      	bcc.n	cdb0 <update_scheduler_timers+0x24>
    cda6:	4b10      	ldr	r3, [pc, #64]	; (cde8 <update_scheduler_timers+0x5c>)
    cda8:	681b      	ldr	r3, [r3, #0]
    cdaa:	687a      	ldr	r2, [r7, #4]
    cdac:	1ad3      	subs	r3, r2, r3
    cdae:	e005      	b.n	cdbc <update_scheduler_timers+0x30>
                       (0x10000 + ui32CurrentTime - g_ui32LastTime));
    cdb0:	4b0d      	ldr	r3, [pc, #52]	; (cde8 <update_scheduler_timers+0x5c>)
    cdb2:	681b      	ldr	r3, [r3, #0]
    cdb4:	687a      	ldr	r2, [r7, #4]
    cdb6:	1ad3      	subs	r3, r2, r3
                       (ui32CurrentTime - g_ui32LastTime) :
    cdb8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
    cdbc:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
    cdbe:	683b      	ldr	r3, [r7, #0]
    cdc0:	2b04      	cmp	r3, #4
    cdc2:	d90a      	bls.n	cdda <update_scheduler_timers+0x4e>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
    cdc4:	683b      	ldr	r3, [r7, #0]
    cdc6:	4a09      	ldr	r2, [pc, #36]	; (cdec <update_scheduler_timers+0x60>)
    cdc8:	fba2 2303 	umull	r2, r3, r2, r3
    cdcc:	089b      	lsrs	r3, r3, #2
    cdce:	4618      	mov	r0, r3
    cdd0:	f7fe fa26 	bl	b220 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
    cdd4:	4a04      	ldr	r2, [pc, #16]	; (cde8 <update_scheduler_timers+0x5c>)
    cdd6:	687b      	ldr	r3, [r7, #4]
    cdd8:	6013      	str	r3, [r2, #0]
    }
}
    cdda:	bf00      	nop
    cddc:	3708      	adds	r7, #8
    cdde:	46bd      	mov	sp, r7
    cde0:	bd80      	pop	{r7, pc}
    cde2:	bf00      	nop
    cde4:	ffff0000 	.word	0xffff0000
    cde8:	100024f0 	.word	0x100024f0
    cdec:	cccccccd 	.word	0xcccccccd

0000cdf0 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
    cdf0:	b580      	push	{r7, lr}
    cdf2:	b082      	sub	sp, #8
    cdf4:	af00      	add	r7, sp, #0
    wsfTimerTicks_t xNextExpiration;

    //
    // Stop and clear the scheduling timer.
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    cdf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cdfa:	2000      	movs	r0, #0
    cdfc:	f001 fcc6 	bl	e78c <am_hal_ctimer_stop>
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    ce00:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce04:	2000      	movs	r0, #0
    ce06:	f001 fcd7 	bl	e7b8 <am_hal_ctimer_clear>

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
    ce0a:	1cfb      	adds	r3, r7, #3
    ce0c:	4618      	mov	r0, r3
    ce0e:	f7fe fa35 	bl	b27c <WsfTimerNextExpiration>
    ce12:	6078      	str	r0, [r7, #4]
    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it. Otherwise, set an interrupt to wake us up in time to
    // prevent a double-overflow of our continuous timer.
    //
    if ( xNextExpiration )
    ce14:	687b      	ldr	r3, [r7, #4]
    ce16:	2b00      	cmp	r3, #0
    ce18:	d00a      	beq.n	ce30 <set_next_wakeup+0x40>
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA,
    ce1a:	687a      	ldr	r2, [r7, #4]
    ce1c:	4613      	mov	r3, r2
    ce1e:	009b      	lsls	r3, r3, #2
    ce20:	441a      	add	r2, r3
    ce22:	2300      	movs	r3, #0
    ce24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce28:	2000      	movs	r0, #0
    ce2a:	f001 fd33 	bl	e894 <am_hal_ctimer_period_set>
    ce2e:	e007      	b.n	ce40 <set_next_wakeup+0x50>
                                 xNextExpiration * CLK_TICKS_PER_WSF_TICKS, 0);
    }
    else
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 0x8000, 0);
    ce30:	2300      	movs	r3, #0
    ce32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ce36:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce3a:	2000      	movs	r0, #0
    ce3c:	f001 fd2a 	bl	e894 <am_hal_ctimer_period_set>
    }

    //
    // Start the scheduling timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    ce40:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce44:	2000      	movs	r0, #0
    ce46:	f001 fc89 	bl	e75c <am_hal_ctimer_start>
}
    ce4a:	bf00      	nop
    ce4c:	3708      	adds	r7, #8
    ce4e:	46bd      	mov	sp, r7
    ce50:	bd80      	pop	{r7, pc}
	...

0000ce54 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    ce54:	b580      	push	{r7, lr}
    ce56:	b082      	sub	sp, #8
    ce58:	af00      	add	r7, sp, #0
    ce5a:	4603      	mov	r3, r0
    ce5c:	6039      	str	r1, [r7, #0]
    ce5e:	71fb      	strb	r3, [r7, #7]
    //
    // Restart the button timer.
    //
    WsfTimerStartMs(&ButtonTimer, 10);
    ce60:	210a      	movs	r1, #10
    ce62:	4862      	ldr	r0, [pc, #392]	; (cfec <button_handler+0x198>)
    ce64:	f7fe f9b8 	bl	b1d8 <WsfTimerStartMs>

    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    ce68:	2103      	movs	r1, #3
    ce6a:	4861      	ldr	r0, [pc, #388]	; (cff0 <button_handler+0x19c>)
    ce6c:	f7fe fc0e 	bl	b68c <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
    ce70:	4b5f      	ldr	r3, [pc, #380]	; (cff0 <button_handler+0x19c>)
    ce72:	7b1b      	ldrb	r3, [r3, #12]
    ce74:	f083 0301 	eor.w	r3, r3, #1
    ce78:	b2db      	uxtb	r3, r3
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d009      	beq.n	ce92 <button_handler+0x3e>
    ce7e:	4b5c      	ldr	r3, [pc, #368]	; (cff0 <button_handler+0x19c>)
    ce80:	7b5b      	ldrb	r3, [r3, #13]
    ce82:	2b00      	cmp	r3, #0
    ce84:	d005      	beq.n	ce92 <button_handler+0x3e>
    {
        am_util_debug_printf("Got Button 0 Press\n");
    ce86:	485b      	ldr	r0, [pc, #364]	; (cff4 <button_handler+0x1a0>)
    ce88:	f001 f9bc 	bl	e204 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    ce8c:	2002      	movs	r0, #2
    ce8e:	f7ff fe3b 	bl	cb08 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
    ce92:	4b57      	ldr	r3, [pc, #348]	; (cff0 <button_handler+0x19c>)
    ce94:	7f1b      	ldrb	r3, [r3, #28]
    ce96:	f083 0301 	eor.w	r3, r3, #1
    ce9a:	b2db      	uxtb	r3, r3
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	f000 8090 	beq.w	cfc2 <button_handler+0x16e>
    cea2:	4b53      	ldr	r3, [pc, #332]	; (cff0 <button_handler+0x19c>)
    cea4:	7f5b      	ldrb	r3, [r3, #29]
    cea6:	2b00      	cmp	r3, #0
    cea8:	f000 808b 	beq.w	cfc2 <button_handler+0x16e>
    {
      AppUiBtnTest(APP_UI_BTN_1_SHORT);
    ceac:	2002      	movs	r0, #2
    ceae:	f7ff fe2b 	bl	cb08 <AppUiBtnTest>

      switch ( current_test_case++ )
    ceb2:	4b51      	ldr	r3, [pc, #324]	; (cff8 <button_handler+0x1a4>)
    ceb4:	781b      	ldrb	r3, [r3, #0]
    ceb6:	1c5a      	adds	r2, r3, #1
    ceb8:	b2d1      	uxtb	r1, r2
    ceba:	4a4f      	ldr	r2, [pc, #316]	; (cff8 <button_handler+0x1a4>)
    cebc:	7011      	strb	r1, [r2, #0]
    cebe:	2b08      	cmp	r3, #8
    cec0:	d877      	bhi.n	cfb2 <button_handler+0x15e>
    cec2:	a201      	add	r2, pc, #4	; (adr r2, cec8 <button_handler+0x74>)
    cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cec8:	0000ceed 	.word	0x0000ceed
    cecc:	0000cf05 	.word	0x0000cf05
    ced0:	0000cf1d 	.word	0x0000cf1d
    ced4:	0000cf35 	.word	0x0000cf35
    ced8:	0000cf4d 	.word	0x0000cf4d
    cedc:	0000cf65 	.word	0x0000cf65
    cee0:	0000cf7d 	.word	0x0000cf7d
    cee4:	0000cf8f 	.word	0x0000cf8f
    cee8:	0000cfa1 	.word	0x0000cfa1
      {
        case 0:
            HciVsEM_TransmitterTestEnd();
    ceec:	f7ff fde2 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(4, 0, 0, 0);
    cef0:	2300      	movs	r3, #0
    cef2:	2200      	movs	r2, #0
    cef4:	2100      	movs	r1, #0
    cef6:	2004      	movs	r0, #4
    cef8:	f7ff fdb9 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Wave on Channel 2402 MHz\n");
    cefc:	483f      	ldr	r0, [pc, #252]	; (cffc <button_handler+0x1a8>)
    cefe:	f001 f981 	bl	e204 <am_util_stdio_printf>
            break;
    cf02:	e057      	b.n	cfb4 <button_handler+0x160>
        case 1:
            HciVsEM_TransmitterTestEnd();
    cf04:	f7ff fdd6 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(4, 19, 0, 0);
    cf08:	2300      	movs	r3, #0
    cf0a:	2200      	movs	r2, #0
    cf0c:	2113      	movs	r1, #19
    cf0e:	2004      	movs	r0, #4
    cf10:	f7ff fdad 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Wave on Channel 2440 MHz\n");
    cf14:	483a      	ldr	r0, [pc, #232]	; (d000 <button_handler+0x1ac>)
    cf16:	f001 f975 	bl	e204 <am_util_stdio_printf>
            break;
    cf1a:	e04b      	b.n	cfb4 <button_handler+0x160>
        case 2:
            HciVsEM_TransmitterTestEnd();
    cf1c:	f7ff fdca 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(4, 39, 0, 0);
    cf20:	2300      	movs	r3, #0
    cf22:	2200      	movs	r2, #0
    cf24:	2127      	movs	r1, #39	; 0x27
    cf26:	2004      	movs	r0, #4
    cf28:	f7ff fda1 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Wave on Channel 2480 MHz\n");
    cf2c:	4835      	ldr	r0, [pc, #212]	; (d004 <button_handler+0x1b0>)
    cf2e:	f001 f969 	bl	e204 <am_util_stdio_printf>
            break;
    cf32:	e03f      	b.n	cfb4 <button_handler+0x160>
        case 3:
            HciVsEM_TransmitterTestEnd();
    cf34:	f7ff fdbe 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(1, 0, 0, 0);
    cf38:	2300      	movs	r3, #0
    cf3a:	2200      	movs	r2, #0
    cf3c:	2100      	movs	r1, #0
    cf3e:	2001      	movs	r0, #1
    cf40:	f7ff fd95 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Modulation on Channel 2402 MHz\n");
    cf44:	4830      	ldr	r0, [pc, #192]	; (d008 <button_handler+0x1b4>)
    cf46:	f001 f95d 	bl	e204 <am_util_stdio_printf>
            break;
    cf4a:	e033      	b.n	cfb4 <button_handler+0x160>
        case 4:
            HciVsEM_TransmitterTestEnd();
    cf4c:	f7ff fdb2 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(1, 19, 0, 0);
    cf50:	2300      	movs	r3, #0
    cf52:	2200      	movs	r2, #0
    cf54:	2113      	movs	r1, #19
    cf56:	2001      	movs	r0, #1
    cf58:	f7ff fd89 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Modulation on Channel 2440 MHz\n");
    cf5c:	482b      	ldr	r0, [pc, #172]	; (d00c <button_handler+0x1b8>)
    cf5e:	f001 f951 	bl	e204 <am_util_stdio_printf>
            break;
    cf62:	e027      	b.n	cfb4 <button_handler+0x160>
        case 5:
            HciVsEM_TransmitterTestEnd();
    cf64:	f7ff fda6 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciVsEM_TransmitterTest(1, 39, 0, 0);
    cf68:	2300      	movs	r3, #0
    cf6a:	2200      	movs	r2, #0
    cf6c:	2127      	movs	r1, #39	; 0x27
    cf6e:	2001      	movs	r0, #1
    cf70:	f7ff fd7d 	bl	ca6e <HciVsEM_TransmitterTest>

            am_util_debug_printf("Continuous Modulation on Channel 2480 MHz\n");
    cf74:	4826      	ldr	r0, [pc, #152]	; (d010 <button_handler+0x1bc>)
    cf76:	f001 f945 	bl	e204 <am_util_stdio_printf>
            break;
    cf7a:	e01b      	b.n	cfb4 <button_handler+0x160>
        case 6:
            HciVsEM_TransmitterTestEnd();
    cf7c:	f7ff fd9a 	bl	cab4 <HciVsEM_TransmitterTestEnd>
            HciLeReceiverTestCmd(0);
    cf80:	2000      	movs	r0, #0
    cf82:	f7fa f944 	bl	720e <HciLeReceiverTestCmd>

            am_util_debug_printf("Receiver Test on Channel 2402 MHz\n");
    cf86:	4823      	ldr	r0, [pc, #140]	; (d014 <button_handler+0x1c0>)
    cf88:	f001 f93c 	bl	e204 <am_util_stdio_printf>
            break;
    cf8c:	e012      	b.n	cfb4 <button_handler+0x160>
        case 7:
            HciLeTestEndCmd();
    cf8e:	f7fa f95b 	bl	7248 <HciLeTestEndCmd>
            HciLeReceiverTestCmd(19);
    cf92:	2013      	movs	r0, #19
    cf94:	f7fa f93b 	bl	720e <HciLeReceiverTestCmd>

            am_util_debug_printf("Receiver Test on Channel 2440 MHz\n");
    cf98:	481f      	ldr	r0, [pc, #124]	; (d018 <button_handler+0x1c4>)
    cf9a:	f001 f933 	bl	e204 <am_util_stdio_printf>
            break;
    cf9e:	e009      	b.n	cfb4 <button_handler+0x160>
        case 8:
            HciLeTestEndCmd();
    cfa0:	f7fa f952 	bl	7248 <HciLeTestEndCmd>
            HciLeReceiverTestCmd(39);
    cfa4:	2027      	movs	r0, #39	; 0x27
    cfa6:	f7fa f932 	bl	720e <HciLeReceiverTestCmd>

            am_util_debug_printf("Receiver Test on Channel 2480 MHz\n");
    cfaa:	481c      	ldr	r0, [pc, #112]	; (d01c <button_handler+0x1c8>)
    cfac:	f001 f92a 	bl	e204 <am_util_stdio_printf>
            break;
    cfb0:	e000      	b.n	cfb4 <button_handler+0x160>
        default:
            break;
    cfb2:	bf00      	nop
      }

      if ( current_test_case >= 9 )
    cfb4:	4b10      	ldr	r3, [pc, #64]	; (cff8 <button_handler+0x1a4>)
    cfb6:	781b      	ldrb	r3, [r3, #0]
    cfb8:	2b08      	cmp	r3, #8
    cfba:	d902      	bls.n	cfc2 <button_handler+0x16e>
      {
        current_test_case = 0;
    cfbc:	4b0e      	ldr	r3, [pc, #56]	; (cff8 <button_handler+0x1a4>)
    cfbe:	2200      	movs	r2, #0
    cfc0:	701a      	strb	r2, [r3, #0]
      }
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
    cfc2:	4b0b      	ldr	r3, [pc, #44]	; (cff0 <button_handler+0x19c>)
    cfc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    cfc8:	f083 0301 	eor.w	r3, r3, #1
    cfcc:	b2db      	uxtb	r3, r3
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d007      	beq.n	cfe2 <button_handler+0x18e>
    cfd2:	4b07      	ldr	r3, [pc, #28]	; (cff0 <button_handler+0x19c>)
    cfd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d002      	beq.n	cfe2 <button_handler+0x18e>
    {
        AppUiBtnTest(APP_UI_BTN_2_SHORT);
    cfdc:	2007      	movs	r0, #7
    cfde:	f7ff fd93 	bl	cb08 <AppUiBtnTest>
    }
}
    cfe2:	bf00      	nop
    cfe4:	3708      	adds	r7, #8
    cfe6:	46bd      	mov	sp, r7
    cfe8:	bd80      	pop	{r7, pc}
    cfea:	bf00      	nop
    cfec:	10002914 	.word	0x10002914
    cff0:	1000110c 	.word	0x1000110c
    cff4:	00011f48 	.word	0x00011f48
    cff8:	100024ec 	.word	0x100024ec
    cffc:	00011f5c 	.word	0x00011f5c
    d000:	00011f84 	.word	0x00011f84
    d004:	00011fac 	.word	0x00011fac
    d008:	00011fd4 	.word	0x00011fd4
    d00c:	00012000 	.word	0x00012000
    d010:	0001202c 	.word	0x0001202c
    d014:	00012058 	.word	0x00012058
    d018:	0001207c 	.word	0x0001207c
    d01c:	000120a0 	.word	0x000120a0

0000d020 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
    d020:	b580      	push	{r7, lr}
    d022:	af00      	add	r7, sp, #0
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    d024:	2103      	movs	r1, #3
    d026:	4806      	ldr	r0, [pc, #24]	; (d040 <setup_buttons+0x20>)
    d028:	f7fe f9f2 	bl	b410 <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
    d02c:	4b05      	ldr	r3, [pc, #20]	; (d044 <setup_buttons+0x24>)
    d02e:	781a      	ldrb	r2, [r3, #0]
    d030:	4b05      	ldr	r3, [pc, #20]	; (d048 <setup_buttons+0x28>)
    d032:	721a      	strb	r2, [r3, #8]
    WsfTimerStartSec(&ButtonTimer, 2);
    d034:	2102      	movs	r1, #2
    d036:	4804      	ldr	r0, [pc, #16]	; (d048 <setup_buttons+0x28>)
    d038:	f7fe f8bc 	bl	b1b4 <WsfTimerStartSec>
}
    d03c:	bf00      	nop
    d03e:	bd80      	pop	{r7, pc}
    d040:	1000110c 	.word	0x1000110c
    d044:	10002911 	.word	0x10002911
    d048:	10002914 	.word	0x10002914

0000d04c <am_ctimer_isr>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    d04c:	b580      	push	{r7, lr}
    d04e:	b082      	sub	sp, #8
    d050:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check and clear any active CTIMER interrupts.
    //
    ui32Status = am_hal_ctimer_int_status_get(true);
    d052:	2001      	movs	r0, #1
    d054:	f001 fc90 	bl	e978 <am_hal_ctimer_int_status_get>
    d058:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
    d05a:	6878      	ldr	r0, [r7, #4]
    d05c:	f001 fc86 	bl	e96c <am_hal_ctimer_int_clear>
}
    d060:	bf00      	nop
    d062:	3708      	adds	r7, #8
    d064:	46bd      	mov	sp, r7
    d066:	bd80      	pop	{r7, pc}

0000d068 <am_gpio_isr>:
// Interrupt handler for the GPIO module
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    d068:	b590      	push	{r4, r7, lr}
    d06a:	b083      	sub	sp, #12
    d06c:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Check and clear the GPIO interrupt status
    //
    ui64Status = am_hal_gpio_int_status_get(true);
    d06e:	2001      	movs	r0, #1
    d070:	f001 fd92 	bl	eb98 <am_hal_gpio_int_status_get>
    d074:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
    d078:	e9d7 0100 	ldrd	r0, r1, [r7]
    d07c:	f001 fd78 	bl	eb70 <am_hal_gpio_int_clear>

    //
    // Check to see if this was a wakeup event from the BLE radio.
    //
    if ( ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT) )
    d080:	e897 0018 	ldmia.w	r7, {r3, r4}
    d084:	f04f 0100 	mov.w	r1, #0
    d088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d08c:	ea03 0301 	and.w	r3, r3, r1
    d090:	ea04 0402 	and.w	r4, r4, r2
    d094:	4323      	orrs	r3, r4
    d096:	d005      	beq.n	d0a4 <am_gpio_isr+0x3c>
    {
        WsfSetEvent(g_bleDataReadyHandlerId, BLE_DATA_READY_EVENT);
    d098:	4b04      	ldr	r3, [pc, #16]	; (d0ac <am_gpio_isr+0x44>)
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	2101      	movs	r1, #1
    d09e:	4618      	mov	r0, r3
    d0a0:	f7fd f814 	bl	a0cc <WsfSetEvent>
    }
}
    d0a4:	bf00      	nop
    d0a6:	370c      	adds	r7, #12
    d0a8:	46bd      	mov	sp, r7
    d0aa:	bd90      	pop	{r4, r7, pc}
    d0ac:	10002910 	.word	0x10002910

0000d0b0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    d0b0:	b580      	push	{r7, lr}
    d0b2:	b082      	sub	sp, #8
    d0b4:	af00      	add	r7, sp, #0
    //
    // Configure the system clock to run at 24 MHz
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    d0b6:	2000      	movs	r0, #0
    d0b8:	f001 fa8a 	bl	e5d0 <am_hal_clkgen_sysclk_select>

    //
    // Configure the MCU for low power operation, but leave the LFRC on.
    //
    am_hal_pwrctrl_bucks_enable();
    d0bc:	f003 fff8 	bl	110b0 <am_hal_pwrctrl_bucks_enable>
    am_hal_vcomp_disable();
    d0c0:	f004 f9c6 	bl	11450 <am_hal_vcomp_disable>

#ifdef AM_DEBUG_PRINTF
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
    d0c4:	482a      	ldr	r0, [pc, #168]	; (d170 <main+0xc0>)
    d0c6:	f000 fa19 	bl	d4fc <am_util_stdio_printf_init>
    am_bsp_pin_enable(ITM_SWO);
    d0ca:	f001 fdbb 	bl	ec44 <am_hal_interrupt_master_disable>
    d0ce:	4603      	mov	r3, r0
    d0d0:	607b      	str	r3, [r7, #4]
    d0d2:	4b28      	ldr	r3, [pc, #160]	; (d174 <main+0xc4>)
    d0d4:	2273      	movs	r2, #115	; 0x73
    d0d6:	601a      	str	r2, [r3, #0]
    d0d8:	4a27      	ldr	r2, [pc, #156]	; (d178 <main+0xc8>)
    d0da:	4b27      	ldr	r3, [pc, #156]	; (d178 <main+0xc8>)
    d0dc:	681b      	ldr	r3, [r3, #0]
    d0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    d0e2:	6013      	str	r3, [r2, #0]
    d0e4:	4a25      	ldr	r2, [pc, #148]	; (d17c <main+0xcc>)
    d0e6:	4b25      	ldr	r3, [pc, #148]	; (d17c <main+0xcc>)
    d0e8:	681b      	ldr	r3, [r3, #0]
    d0ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    d0ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d0f2:	6013      	str	r3, [r2, #0]
    d0f4:	4a22      	ldr	r2, [pc, #136]	; (d180 <main+0xd0>)
    d0f6:	4b22      	ldr	r3, [pc, #136]	; (d180 <main+0xd0>)
    d0f8:	681b      	ldr	r3, [r3, #0]
    d0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    d0fe:	6013      	str	r3, [r2, #0]
    d100:	4b1c      	ldr	r3, [pc, #112]	; (d174 <main+0xc4>)
    d102:	2200      	movs	r2, #0
    d104:	601a      	str	r2, [r3, #0]
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	4618      	mov	r0, r3
    d10a:	f001 fd9f 	bl	ec4c <am_hal_interrupt_master_set>
    am_hal_itm_enable();
    d10e:	f003 ff01 	bl	10f14 <am_hal_itm_enable>
    am_bsp_debug_printf_enable();
    d112:	f001 fa1b 	bl	e54c <am_bsp_debug_printf_enable>
#endif

    am_util_debug_printf("Apollo2 Cordio FCC Test Example\n");
    d116:	481b      	ldr	r0, [pc, #108]	; (d184 <main+0xd4>)
    d118:	f001 f874 	bl	e204 <am_util_stdio_printf>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(0);
    d11c:	2000      	movs	r0, #0
    d11e:	f7ff fc05 	bl	c92c <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
    d122:	f7ff fd77 	bl	cc14 <exactle_stack_init>

    //
    // Enable BLE data ready interrupt
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    d126:	201c      	movs	r0, #28
    d128:	f001 fd60 	bl	ebec <am_hal_interrupt_enable>

    //
    // Prep the buttons for use
    //
    setup_buttons();
    d12c:	f7ff ff78 	bl	d020 <setup_buttons>

    am_util_debug_printf("Usage as below:\n");
    d130:	4815      	ldr	r0, [pc, #84]	; (d188 <main+0xd8>)
    d132:	f001 f867 	bl	e204 <am_util_stdio_printf>
    am_util_debug_printf("Short press Button 1 to go through different test modes\n");
    d136:	4815      	ldr	r0, [pc, #84]	; (d18c <main+0xdc>)
    d138:	f001 f864 	bl	e204 <am_util_stdio_printf>
    am_util_debug_printf("TX power is set to +6.2 dBm (max) \n");
    d13c:	4814      	ldr	r0, [pc, #80]	; (d190 <main+0xe0>)
    d13e:	f001 f861 	bl	e204 <am_util_stdio_printf>

    HciVsEM_SetRfPowerLevelEx(TX_POWER_LEVEL_PLUS_6P2_dBm);
    d142:	2011      	movs	r0, #17
    d144:	f7ff fc7a 	bl	ca3c <HciVsEM_SetRfPowerLevelEx>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
    d148:	f7ff fe20 	bl	cd8c <update_scheduler_timers>
        wsfOsDispatcher();
    d14c:	f7fd f848 	bl	a1e0 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled event.
        //
        set_next_wakeup();
    d150:	f7ff fe4e 	bl	cdf0 <set_next_wakeup>

        am_hal_interrupt_master_disable();
    d154:	f001 fd76 	bl	ec44 <am_hal_interrupt_master_disable>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
    d158:	f7fd f830 	bl	a1bc <wsfOsReadyToSleep>
    d15c:	4603      	mov	r3, r0
    d15e:	2b00      	cmp	r3, #0
    d160:	d002      	beq.n	d168 <main+0xb8>
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    d162:	2001      	movs	r0, #1
    d164:	f004 f87e 	bl	11264 <am_hal_sysctrl_sleep>
        }
        am_hal_interrupt_master_enable();
    d168:	f001 fd68 	bl	ec3c <am_hal_interrupt_master_enable>
        update_scheduler_timers();
    d16c:	e7ec      	b.n	d148 <main+0x98>
    d16e:	bf00      	nop
    d170:	0000e5cd 	.word	0x0000e5cd
    d174:	40010060 	.word	0x40010060
    d178:	40010054 	.word	0x40010054
    d17c:	40010028 	.word	0x40010028
    d180:	40010108 	.word	0x40010108
    d184:	000120c4 	.word	0x000120c4
    d188:	000120e8 	.word	0x000120e8
    d18c:	000120fc 	.word	0x000120fc
    d190:	00012138 	.word	0x00012138

0000d194 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d194:	4811      	ldr	r0, [pc, #68]	; (d1dc <zero_loop+0x12>)
    d196:	4912      	ldr	r1, [pc, #72]	; (d1e0 <zero_loop+0x16>)
    d198:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d19a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d19e:	4811      	ldr	r0, [pc, #68]	; (d1e4 <zero_loop+0x1a>)
    d1a0:	6801      	ldr	r1, [r0, #0]
    d1a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d1a6:	6001      	str	r1, [r0, #0]
    d1a8:	f3bf 8f4f 	dsb	sy
    d1ac:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d1b0:	480d      	ldr	r0, [pc, #52]	; (d1e8 <zero_loop+0x1e>)
    d1b2:	490e      	ldr	r1, [pc, #56]	; (d1ec <zero_loop+0x22>)
    d1b4:	4a0e      	ldr	r2, [pc, #56]	; (d1f0 <zero_loop+0x26>)

0000d1b6 <copy_loop>:
    d1b6:	f850 3b04 	ldr.w	r3, [r0], #4
    d1ba:	f841 3b04 	str.w	r3, [r1], #4
    d1be:	4291      	cmp	r1, r2
    d1c0:	dbf9      	blt.n	d1b6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d1c2:	480c      	ldr	r0, [pc, #48]	; (d1f4 <zero_loop+0x2a>)
    d1c4:	490c      	ldr	r1, [pc, #48]	; (d1f8 <zero_loop+0x2e>)
    d1c6:	f04f 0200 	mov.w	r2, #0

0000d1ca <zero_loop>:
    d1ca:	4288      	cmp	r0, r1
    d1cc:	bfb8      	it	lt
    d1ce:	f840 2b04 	strlt.w	r2, [r0], #4
    d1d2:	dbfa      	blt.n	d1ca <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d1d4:	f7ff ff6c 	bl	d0b0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d1d8:	be00      	bkpt	0x0000
}
    d1da:	bf00      	nop
    d1dc:	e000ed08 	.word	0xe000ed08
    d1e0:	00000000 	.word	0x00000000
    d1e4:	e000ed88 	.word	0xe000ed88
    d1e8:	00014f68 	.word	0x00014f68
    d1ec:	10001000 	.word	0x10001000
    d1f0:	10001140 	.word	0x10001140
    d1f4:	10001140 	.word	0x10001140
    d1f8:	10002ac0 	.word	0x10002ac0

0000d1fc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    d1fc:	b480      	push	{r7}
    d1fe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d200:	e7fe      	b.n	d200 <am_nmi_isr+0x4>

0000d202 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d202:	b480      	push	{r7}
    d204:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d206:	e7fe      	b.n	d206 <am_adc_isr+0x4>

0000d208 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
    d208:	b580      	push	{r7, lr}
    d20a:	b082      	sub	sp, #8
    d20c:	af00      	add	r7, sp, #0
    d20e:	6078      	str	r0, [r7, #4]
    d210:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
    d212:	2206      	movs	r2, #6
    d214:	6839      	ldr	r1, [r7, #0]
    d216:	6878      	ldr	r0, [r7, #4]
    d218:	f004 f92f 	bl	1147a <memcpy>
}
    d21c:	bf00      	nop
    d21e:	3708      	adds	r7, #8
    d220:	46bd      	mov	sp, r7
    d222:	bd80      	pop	{r7, pc}

0000d224 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
    d224:	b580      	push	{r7, lr}
    d226:	b082      	sub	sp, #8
    d228:	af00      	add	r7, sp, #0
    d22a:	6078      	str	r0, [r7, #4]
    d22c:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
    d22e:	2206      	movs	r2, #6
    d230:	6839      	ldr	r1, [r7, #0]
    d232:	6878      	ldr	r0, [r7, #4]
    d234:	f004 f912 	bl	1145c <memcmp>
    d238:	4603      	mov	r3, r0
    d23a:	2b00      	cmp	r3, #0
    d23c:	bf0c      	ite	eq
    d23e:	2301      	moveq	r3, #1
    d240:	2300      	movne	r3, #0
    d242:	b2db      	uxtb	r3, r3
}
    d244:	4618      	mov	r0, r3
    d246:	3708      	adds	r7, #8
    d248:	46bd      	mov	sp, r7
    d24a:	bd80      	pop	{r7, pc}

0000d24c <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
    d24c:	b580      	push	{r7, lr}
    d24e:	b082      	sub	sp, #8
    d250:	af00      	add	r7, sp, #0
    d252:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
    d254:	2206      	movs	r2, #6
    d256:	2100      	movs	r1, #0
    d258:	6878      	ldr	r0, [r7, #4]
    d25a:	f004 f933 	bl	114c4 <memset>

  return (pDst + BDA_ADDR_LEN);
    d25e:	687b      	ldr	r3, [r7, #4]
    d260:	3306      	adds	r3, #6
}
    d262:	4618      	mov	r0, r3
    d264:	3708      	adds	r7, #8
    d266:	46bd      	mov	sp, r7
    d268:	bd80      	pop	{r7, pc}

0000d26a <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
    d26a:	b580      	push	{r7, lr}
    d26c:	b084      	sub	sp, #16
    d26e:	af00      	add	r7, sp, #0
    d270:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
    d272:	f107 0308 	add.w	r3, r7, #8
    d276:	2200      	movs	r2, #0
    d278:	601a      	str	r2, [r3, #0]
    d27a:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
    d27c:	f107 0308 	add.w	r3, r7, #8
    d280:	2206      	movs	r2, #6
    d282:	4619      	mov	r1, r3
    d284:	6878      	ldr	r0, [r7, #4]
    d286:	f004 f8e9 	bl	1145c <memcmp>
    d28a:	4603      	mov	r3, r0
    d28c:	2b00      	cmp	r3, #0
    d28e:	bf0c      	ite	eq
    d290:	2301      	moveq	r3, #1
    d292:	2300      	movne	r3, #0
    d294:	b2db      	uxtb	r3, r3
}
    d296:	4618      	mov	r0, r3
    d298:	3710      	adds	r7, #16
    d29a:	46bd      	mov	sp, r7
    d29c:	bd80      	pop	{r7, pc}

0000d29e <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
    d29e:	b580      	push	{r7, lr}
    d2a0:	b082      	sub	sp, #8
    d2a2:	af00      	add	r7, sp, #0
    d2a4:	6078      	str	r0, [r7, #4]
    d2a6:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
    d2a8:	2210      	movs	r2, #16
    d2aa:	6839      	ldr	r1, [r7, #0]
    d2ac:	6878      	ldr	r0, [r7, #4]
    d2ae:	f004 f8e4 	bl	1147a <memcpy>
}
    d2b2:	bf00      	nop
    d2b4:	3708      	adds	r7, #8
    d2b6:	46bd      	mov	sp, r7
    d2b8:	bd80      	pop	{r7, pc}

0000d2ba <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
    d2ba:	b580      	push	{r7, lr}
    d2bc:	b082      	sub	sp, #8
    d2be:	af00      	add	r7, sp, #0
    d2c0:	6078      	str	r0, [r7, #4]
    d2c2:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
    d2c4:	2208      	movs	r2, #8
    d2c6:	6839      	ldr	r1, [r7, #0]
    d2c8:	6878      	ldr	r0, [r7, #4]
    d2ca:	f004 f8d6 	bl	1147a <memcpy>
}
    d2ce:	bf00      	nop
    d2d0:	3708      	adds	r7, #8
    d2d2:	46bd      	mov	sp, r7
    d2d4:	bd80      	pop	{r7, pc}

0000d2d6 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
    d2d6:	b480      	push	{r7}
    d2d8:	b085      	sub	sp, #20
    d2da:	af00      	add	r7, sp, #0
    d2dc:	6078      	str	r0, [r7, #4]
    d2de:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
    d2e0:	2310      	movs	r3, #16
    d2e2:	73fb      	strb	r3, [r7, #15]
    d2e4:	e00d      	b.n	d302 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
    d2e6:	683b      	ldr	r3, [r7, #0]
    d2e8:	1c5a      	adds	r2, r3, #1
    d2ea:	603a      	str	r2, [r7, #0]
    d2ec:	781a      	ldrb	r2, [r3, #0]
    d2ee:	687b      	ldr	r3, [r7, #4]
    d2f0:	1c59      	adds	r1, r3, #1
    d2f2:	6079      	str	r1, [r7, #4]
    d2f4:	7819      	ldrb	r1, [r3, #0]
    d2f6:	404a      	eors	r2, r1
    d2f8:	b2d2      	uxtb	r2, r2
    d2fa:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
    d2fc:	7bfb      	ldrb	r3, [r7, #15]
    d2fe:	3b01      	subs	r3, #1
    d300:	73fb      	strb	r3, [r7, #15]
    d302:	7bfb      	ldrb	r3, [r7, #15]
    d304:	2b00      	cmp	r3, #0
    d306:	d1ee      	bne.n	d2e6 <Calc128Xor+0x10>
  }
}
    d308:	bf00      	nop
    d30a:	3714      	adds	r7, #20
    d30c:	46bd      	mov	sp, r7
    d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d312:	4770      	bx	lr

0000d314 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
    d314:	b480      	push	{r7}
    d316:	b087      	sub	sp, #28
    d318:	af00      	add	r7, sp, #0
    d31a:	60f8      	str	r0, [r7, #12]
    d31c:	60b9      	str	r1, [r7, #8]
    d31e:	4613      	mov	r3, r2
    d320:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
    d322:	2300      	movs	r3, #0
    d324:	82fb      	strh	r3, [r7, #22]
    d326:	e013      	b.n	d350 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
    d328:	88fb      	ldrh	r3, [r7, #6]
    d32a:	1e5a      	subs	r2, r3, #1
    d32c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d330:	1ad3      	subs	r3, r2, r3
    d332:	461a      	mov	r2, r3
    d334:	68fb      	ldr	r3, [r7, #12]
    d336:	4413      	add	r3, r2
    d338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    d33c:	68b9      	ldr	r1, [r7, #8]
    d33e:	440a      	add	r2, r1
    d340:	7812      	ldrb	r2, [r2, #0]
    d342:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
    d344:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d348:	b29b      	uxth	r3, r3
    d34a:	3301      	adds	r3, #1
    d34c:	b29b      	uxth	r3, r3
    d34e:	82fb      	strh	r3, [r7, #22]
    d350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    d354:	88fb      	ldrh	r3, [r7, #6]
    d356:	429a      	cmp	r2, r3
    d358:	dbe6      	blt.n	d328 <WStrReverseCpy+0x14>
  }
}
    d35a:	bf00      	nop
    d35c:	371c      	adds	r7, #28
    d35e:	46bd      	mov	sp, r7
    d360:	f85d 7b04 	ldr.w	r7, [sp], #4
    d364:	4770      	bx	lr

0000d366 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
    d366:	b480      	push	{r7}
    d368:	b085      	sub	sp, #20
    d36a:	af00      	add	r7, sp, #0
    d36c:	6078      	str	r0, [r7, #4]
    d36e:	460b      	mov	r3, r1
    d370:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
    d372:	2300      	movs	r3, #0
    d374:	73fb      	strb	r3, [r7, #15]
    d376:	e01a      	b.n	d3ae <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
    d378:	78fa      	ldrb	r2, [r7, #3]
    d37a:	7bfb      	ldrb	r3, [r7, #15]
    d37c:	1ad3      	subs	r3, r2, r3
    d37e:	3b01      	subs	r3, #1
    d380:	687a      	ldr	r2, [r7, #4]
    d382:	4413      	add	r3, r2
    d384:	781b      	ldrb	r3, [r3, #0]
    d386:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
    d388:	78fa      	ldrb	r2, [r7, #3]
    d38a:	7bfb      	ldrb	r3, [r7, #15]
    d38c:	1ad3      	subs	r3, r2, r3
    d38e:	3b01      	subs	r3, #1
    d390:	687a      	ldr	r2, [r7, #4]
    d392:	4413      	add	r3, r2
    d394:	7bfa      	ldrb	r2, [r7, #15]
    d396:	6879      	ldr	r1, [r7, #4]
    d398:	440a      	add	r2, r1
    d39a:	7812      	ldrb	r2, [r2, #0]
    d39c:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
    d39e:	7bfb      	ldrb	r3, [r7, #15]
    d3a0:	687a      	ldr	r2, [r7, #4]
    d3a2:	4413      	add	r3, r2
    d3a4:	7bba      	ldrb	r2, [r7, #14]
    d3a6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
    d3a8:	7bfb      	ldrb	r3, [r7, #15]
    d3aa:	3301      	adds	r3, #1
    d3ac:	73fb      	strb	r3, [r7, #15]
    d3ae:	78fb      	ldrb	r3, [r7, #3]
    d3b0:	085b      	lsrs	r3, r3, #1
    d3b2:	b2db      	uxtb	r3, r3
    d3b4:	7bfa      	ldrb	r2, [r7, #15]
    d3b6:	429a      	cmp	r2, r3
    d3b8:	d3de      	bcc.n	d378 <WStrReverse+0x12>
  }
}
    d3ba:	bf00      	nop
    d3bc:	3714      	adds	r7, #20
    d3be:	46bd      	mov	sp, r7
    d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3c4:	4770      	bx	lr
	...

0000d3c8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	b084      	sub	sp, #16
    d3cc:	af00      	add	r7, sp, #0
    d3ce:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    d3d0:	f001 f916 	bl	e600 <am_hal_clkgen_sysclk_get>
    d3d4:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d3d6:	68fb      	ldr	r3, [r7, #12]
    d3d8:	4a07      	ldr	r2, [pc, #28]	; (d3f8 <am_util_delay_ms+0x30>)
    d3da:	fba2 2303 	umull	r2, r3, r2, r3
    d3de:	099b      	lsrs	r3, r3, #6
    d3e0:	687a      	ldr	r2, [r7, #4]
    d3e2:	fb02 f303 	mul.w	r3, r2, r3
    d3e6:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d3e8:	68b8      	ldr	r0, [r7, #8]
    d3ea:	f001 fae1 	bl	e9b0 <am_hal_flash_delay>
}
    d3ee:	bf00      	nop
    d3f0:	3710      	adds	r7, #16
    d3f2:	46bd      	mov	sp, r7
    d3f4:	bd80      	pop	{r7, pc}
    d3f6:	bf00      	nop
    d3f8:	057619f1 	.word	0x057619f1

0000d3fc <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    d3fc:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    d3fe:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    d400:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d402:	f000 f809 	bl	d418 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    d406:	bd01      	pop	{r0, pc}
}
    d408:	bf00      	nop
    d40a:	4618      	mov	r0, r3

0000d40c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d40c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d40e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d410:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d412:	4770      	bx	lr
}
    d414:	bf00      	nop
    d416:	4618      	mov	r0, r3

0000d418 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d418:	b580      	push	{r7, lr}
    d41a:	b096      	sub	sp, #88	; 0x58
    d41c:	af00      	add	r7, sp, #0
    d41e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d420:	f107 030c 	add.w	r3, r7, #12
    d424:	2200      	movs	r2, #0
    d426:	601a      	str	r2, [r3, #0]
    d428:	605a      	str	r2, [r3, #4]
    d42a:	609a      	str	r2, [r3, #8]
    d42c:	60da      	str	r2, [r3, #12]
    d42e:	611a      	str	r2, [r3, #16]
    d430:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d432:	2300      	movs	r3, #0
    d434:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d438:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d43a:	4b2e      	ldr	r3, [pc, #184]	; (d4f4 <am_util_faultisr_collect_data+0xdc>)
    d43c:	681b      	ldr	r3, [r3, #0]
    d43e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d442:	b2db      	uxtb	r3, r3
    d444:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d44a:	0a1b      	lsrs	r3, r3, #8
    d44c:	b2db      	uxtb	r3, r3
    d44e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d454:	0c1b      	lsrs	r3, r3, #16
    d456:	b29b      	uxth	r3, r3
    d458:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d45c:	4b26      	ldr	r3, [pc, #152]	; (d4f8 <am_util_faultisr_collect_data+0xe0>)
    d45e:	681b      	ldr	r3, [r3, #0]
    d460:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d462:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d466:	b2db      	uxtb	r3, r3
    d468:	f003 0302 	and.w	r3, r3, #2
    d46c:	2b00      	cmp	r3, #0
    d46e:	d005      	beq.n	d47c <am_util_faultisr_collect_data+0x64>
    d470:	6879      	ldr	r1, [r7, #4]
    d472:	2006      	movs	r0, #6
    d474:	f7ff ffca 	bl	d40c <getStackedReg>
    d478:	4603      	mov	r3, r0
    d47a:	e001      	b.n	d480 <am_util_faultisr_collect_data+0x68>
    d47c:	f04f 33ff 	mov.w	r3, #4294967295
    d480:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d482:	6879      	ldr	r1, [r7, #4]
    d484:	2000      	movs	r0, #0
    d486:	f7ff ffc1 	bl	d40c <getStackedReg>
    d48a:	4603      	mov	r3, r0
    d48c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d48e:	6879      	ldr	r1, [r7, #4]
    d490:	2001      	movs	r0, #1
    d492:	f7ff ffbb 	bl	d40c <getStackedReg>
    d496:	4603      	mov	r3, r0
    d498:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d49a:	6879      	ldr	r1, [r7, #4]
    d49c:	2002      	movs	r0, #2
    d49e:	f7ff ffb5 	bl	d40c <getStackedReg>
    d4a2:	4603      	mov	r3, r0
    d4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4a6:	6879      	ldr	r1, [r7, #4]
    d4a8:	2003      	movs	r0, #3
    d4aa:	f7ff ffaf 	bl	d40c <getStackedReg>
    d4ae:	4603      	mov	r3, r0
    d4b0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d4b2:	6879      	ldr	r1, [r7, #4]
    d4b4:	2004      	movs	r0, #4
    d4b6:	f7ff ffa9 	bl	d40c <getStackedReg>
    d4ba:	4603      	mov	r3, r0
    d4bc:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d4be:	6879      	ldr	r1, [r7, #4]
    d4c0:	2005      	movs	r0, #5
    d4c2:	f7ff ffa3 	bl	d40c <getStackedReg>
    d4c6:	4603      	mov	r3, r0
    d4c8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d4ca:	6879      	ldr	r1, [r7, #4]
    d4cc:	2006      	movs	r0, #6
    d4ce:	f7ff ff9d 	bl	d40c <getStackedReg>
    d4d2:	4603      	mov	r3, r0
    d4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d4d6:	6879      	ldr	r1, [r7, #4]
    d4d8:	2007      	movs	r0, #7
    d4da:	f7ff ff97 	bl	d40c <getStackedReg>
    d4de:	4603      	mov	r3, r0
    d4e0:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    d4e2:	f107 030c 	add.w	r3, r7, #12
    d4e6:	4618      	mov	r0, r3
    d4e8:	f003 fd5a 	bl	10fa0 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    d4ec:	2300      	movs	r3, #0
    d4ee:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d4f0:	e7fe      	b.n	d4f0 <am_util_faultisr_collect_data+0xd8>
    d4f2:	bf00      	nop
    d4f4:	e000ed28 	.word	0xe000ed28
    d4f8:	e000ed38 	.word	0xe000ed38

0000d4fc <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d4fc:	b480      	push	{r7}
    d4fe:	b083      	sub	sp, #12
    d500:	af00      	add	r7, sp, #0
    d502:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d504:	4a04      	ldr	r2, [pc, #16]	; (d518 <am_util_stdio_printf_init+0x1c>)
    d506:	687b      	ldr	r3, [r7, #4]
    d508:	6013      	str	r3, [r2, #0]
}
    d50a:	bf00      	nop
    d50c:	370c      	adds	r7, #12
    d50e:	46bd      	mov	sp, r7
    d510:	f85d 7b04 	ldr.w	r7, [sp], #4
    d514:	4770      	bx	lr
    d516:	bf00      	nop
    d518:	10002924 	.word	0x10002924

0000d51c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d51c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d520:	b096      	sub	sp, #88	; 0x58
    d522:	af00      	add	r7, sp, #0
    d524:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d528:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d52c:	0025      	movs	r5, r4
    d52e:	2600      	movs	r6, #0
    d530:	ea55 0306 	orrs.w	r3, r5, r6
    d534:	f000 80a0 	beq.w	d678 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d538:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d53c:	0862      	lsrs	r2, r4, #1
    d53e:	ea4f 0133 	mov.w	r1, r3, rrx
    d542:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d546:	ea4f 0893 	mov.w	r8, r3, lsr #2
    d54a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    d54e:	ea4f 0994 	mov.w	r9, r4, lsr #2
    d552:	eb11 0308 	adds.w	r3, r1, r8
    d556:	eb42 0409 	adc.w	r4, r2, r9
    d55a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    d55e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d562:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    d566:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    d56a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    d56e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d572:	eb13 030a 	adds.w	r3, r3, sl
    d576:	eb44 040b 	adc.w	r4, r4, fp
    d57a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    d57e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d582:	0a1a      	lsrs	r2, r3, #8
    d584:	62ba      	str	r2, [r7, #40]	; 0x28
    d586:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d588:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    d58c:	62ba      	str	r2, [r7, #40]	; 0x28
    d58e:	0a23      	lsrs	r3, r4, #8
    d590:	62fb      	str	r3, [r7, #44]	; 0x2c
    d592:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d596:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    d59a:	18c9      	adds	r1, r1, r3
    d59c:	eb42 0204 	adc.w	r2, r2, r4
    d5a0:	460b      	mov	r3, r1
    d5a2:	4614      	mov	r4, r2
    d5a4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    d5a8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d5ac:	0c1a      	lsrs	r2, r3, #16
    d5ae:	623a      	str	r2, [r7, #32]
    d5b0:	6a3a      	ldr	r2, [r7, #32]
    d5b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    d5b6:	623a      	str	r2, [r7, #32]
    d5b8:	0c23      	lsrs	r3, r4, #16
    d5ba:	627b      	str	r3, [r7, #36]	; 0x24
    d5bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d5c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    d5c4:	18c9      	adds	r1, r1, r3
    d5c6:	eb42 0204 	adc.w	r2, r2, r4
    d5ca:	460b      	mov	r3, r1
    d5cc:	4614      	mov	r4, r2
    d5ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    d5d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d5d6:	0023      	movs	r3, r4
    d5d8:	603b      	str	r3, [r7, #0]
    d5da:	2300      	movs	r3, #0
    d5dc:	607b      	str	r3, [r7, #4]
    d5de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d5e2:	e897 0006 	ldmia.w	r7, {r1, r2}
    d5e6:	18c9      	adds	r1, r1, r3
    d5e8:	eb42 0204 	adc.w	r2, r2, r4
    d5ec:	460b      	mov	r3, r1
    d5ee:	4614      	mov	r4, r2
    d5f0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    d5f4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d5f8:	08da      	lsrs	r2, r3, #3
    d5fa:	613a      	str	r2, [r7, #16]
    d5fc:	693a      	ldr	r2, [r7, #16]
    d5fe:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    d602:	613a      	str	r2, [r7, #16]
    d604:	08e3      	lsrs	r3, r4, #3
    d606:	617b      	str	r3, [r7, #20]
    d608:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d60c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    d610:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    d614:	460b      	mov	r3, r1
    d616:	4614      	mov	r4, r2
    d618:	00a0      	lsls	r0, r4, #2
    d61a:	60f8      	str	r0, [r7, #12]
    d61c:	68f8      	ldr	r0, [r7, #12]
    d61e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    d622:	60f8      	str	r0, [r7, #12]
    d624:	009b      	lsls	r3, r3, #2
    d626:	60bb      	str	r3, [r7, #8]
    d628:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d62c:	185b      	adds	r3, r3, r1
    d62e:	eb44 0402 	adc.w	r4, r4, r2
    d632:	18db      	adds	r3, r3, r3
    d634:	eb44 0404 	adc.w	r4, r4, r4
    d638:	4619      	mov	r1, r3
    d63a:	4622      	mov	r2, r4
    d63c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d640:	1a5b      	subs	r3, r3, r1
    d642:	eb64 0402 	sbc.w	r4, r4, r2
    d646:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    d64a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    d64e:	3306      	adds	r3, #6
    d650:	f144 0400 	adc.w	r4, r4, #0
    d654:	091a      	lsrs	r2, r3, #4
    d656:	61ba      	str	r2, [r7, #24]
    d658:	69ba      	ldr	r2, [r7, #24]
    d65a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    d65e:	61ba      	str	r2, [r7, #24]
    d660:	0923      	lsrs	r3, r4, #4
    d662:	61fb      	str	r3, [r7, #28]
    d664:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d668:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d66c:	18c9      	adds	r1, r1, r3
    d66e:	eb42 0204 	adc.w	r2, r2, r4
    d672:	460b      	mov	r3, r1
    d674:	4614      	mov	r4, r2
    d676:	e029      	b.n	d6cc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d67a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d67e:	085a      	lsrs	r2, r3, #1
    d680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d682:	089b      	lsrs	r3, r3, #2
    d684:	4413      	add	r3, r2
    d686:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    d688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d68a:	091b      	lsrs	r3, r3, #4
    d68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d68e:	4413      	add	r3, r2
    d690:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    d692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d694:	0a1b      	lsrs	r3, r3, #8
    d696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d698:	4413      	add	r3, r2
    d69a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    d69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d69e:	0c1b      	lsrs	r3, r3, #16
    d6a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d6a2:	4413      	add	r3, r2
    d6a4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    d6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d6a8:	08db      	lsrs	r3, r3, #3
    d6aa:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    d6ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d6ae:	4613      	mov	r3, r2
    d6b0:	009b      	lsls	r3, r3, #2
    d6b2:	4413      	add	r3, r2
    d6b4:	005b      	lsls	r3, r3, #1
    d6b6:	461a      	mov	r2, r3
    d6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d6ba:	1a9b      	subs	r3, r3, r2
    d6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6c0:	3306      	adds	r3, #6
    d6c2:	091a      	lsrs	r2, r3, #4
    d6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d6c6:	4413      	add	r3, r2
    d6c8:	f04f 0400 	mov.w	r4, #0
    }
}
    d6cc:	4618      	mov	r0, r3
    d6ce:	4621      	mov	r1, r4
    d6d0:	3758      	adds	r7, #88	; 0x58
    d6d2:	46bd      	mov	sp, r7
    d6d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d6d8:	4770      	bx	lr

0000d6da <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d6da:	b590      	push	{r4, r7, lr}
    d6dc:	b085      	sub	sp, #20
    d6de:	af00      	add	r7, sp, #0
    d6e0:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d6e4:	683a      	ldr	r2, [r7, #0]
    d6e6:	687b      	ldr	r3, [r7, #4]
    d6e8:	4313      	orrs	r3, r2
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	bf0c      	ite	eq
    d6ee:	2301      	moveq	r3, #1
    d6f0:	2300      	movne	r3, #0
    d6f2:	b2db      	uxtb	r3, r3
    d6f4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d6f6:	e008      	b.n	d70a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d6f8:	e9d7 0100 	ldrd	r0, r1, [r7]
    d6fc:	f7ff ff0e 	bl	d51c <divu64_10>
    d700:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d704:	68fb      	ldr	r3, [r7, #12]
    d706:	3301      	adds	r3, #1
    d708:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d70a:	e897 0018 	ldmia.w	r7, {r3, r4}
    d70e:	4323      	orrs	r3, r4
    d710:	d1f2      	bne.n	d6f8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d712:	68fb      	ldr	r3, [r7, #12]
}
    d714:	4618      	mov	r0, r3
    d716:	3714      	adds	r7, #20
    d718:	46bd      	mov	sp, r7
    d71a:	bd90      	pop	{r4, r7, pc}

0000d71c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d71c:	b590      	push	{r4, r7, lr}
    d71e:	b083      	sub	sp, #12
    d720:	af00      	add	r7, sp, #0
    d722:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d726:	e897 0018 	ldmia.w	r7, {r3, r4}
    d72a:	2b00      	cmp	r3, #0
    d72c:	f174 0300 	sbcs.w	r3, r4, #0
    d730:	da06      	bge.n	d740 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d732:	e897 0018 	ldmia.w	r7, {r3, r4}
    d736:	425b      	negs	r3, r3
    d738:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d73c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d740:	e897 0018 	ldmia.w	r7, {r3, r4}
    d744:	4618      	mov	r0, r3
    d746:	4621      	mov	r1, r4
    d748:	f7ff ffc7 	bl	d6da <ndigits_in_u64>
    d74c:	4603      	mov	r3, r0
}
    d74e:	4618      	mov	r0, r3
    d750:	370c      	adds	r7, #12
    d752:	46bd      	mov	sp, r7
    d754:	bd90      	pop	{r4, r7, pc}

0000d756 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d756:	b490      	push	{r4, r7}
    d758:	b084      	sub	sp, #16
    d75a:	af00      	add	r7, sp, #0
    d75c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d760:	6839      	ldr	r1, [r7, #0]
    d762:	687a      	ldr	r2, [r7, #4]
    d764:	430a      	orrs	r2, r1
    d766:	2a00      	cmp	r2, #0
    d768:	bf0c      	ite	eq
    d76a:	2201      	moveq	r2, #1
    d76c:	2200      	movne	r2, #0
    d76e:	b2d2      	uxtb	r2, r2
    d770:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    d772:	e00a      	b.n	d78a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    d774:	e897 0006 	ldmia.w	r7, {r1, r2}
    d778:	090b      	lsrs	r3, r1, #4
    d77a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d77e:	0914      	lsrs	r4, r2, #4
    d780:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    d784:	68fa      	ldr	r2, [r7, #12]
    d786:	3201      	adds	r2, #1
    d788:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    d78a:	e897 0006 	ldmia.w	r7, {r1, r2}
    d78e:	430a      	orrs	r2, r1
    d790:	d1f0      	bne.n	d774 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d792:	68fb      	ldr	r3, [r7, #12]
}
    d794:	4618      	mov	r0, r3
    d796:	3710      	adds	r7, #16
    d798:	46bd      	mov	sp, r7
    d79a:	bc90      	pop	{r4, r7}
    d79c:	4770      	bx	lr

0000d79e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d79e:	b480      	push	{r7}
    d7a0:	b087      	sub	sp, #28
    d7a2:	af00      	add	r7, sp, #0
    d7a4:	6078      	str	r0, [r7, #4]
    d7a6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d7a8:	2300      	movs	r3, #0
    d7aa:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d7ac:	2300      	movs	r3, #0
    d7ae:	613b      	str	r3, [r7, #16]
    d7b0:	2300      	movs	r3, #0
    d7b2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d7b4:	687b      	ldr	r3, [r7, #4]
    d7b6:	781b      	ldrb	r3, [r3, #0]
    d7b8:	2b2d      	cmp	r3, #45	; 0x2d
    d7ba:	d11b      	bne.n	d7f4 <decstr_to_int+0x56>
    {
        bNeg = true;
    d7bc:	2301      	movs	r3, #1
    d7be:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	3301      	adds	r3, #1
    d7c4:	607b      	str	r3, [r7, #4]
        uCnt++;
    d7c6:	68fb      	ldr	r3, [r7, #12]
    d7c8:	3301      	adds	r3, #1
    d7ca:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7cc:	e012      	b.n	d7f4 <decstr_to_int+0x56>
    {
        ++uCnt;
    d7ce:	68fb      	ldr	r3, [r7, #12]
    d7d0:	3301      	adds	r3, #1
    d7d2:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d7d4:	693a      	ldr	r2, [r7, #16]
    d7d6:	4613      	mov	r3, r2
    d7d8:	009b      	lsls	r3, r3, #2
    d7da:	4413      	add	r3, r2
    d7dc:	005b      	lsls	r3, r3, #1
    d7de:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d7e0:	687b      	ldr	r3, [r7, #4]
    d7e2:	781b      	ldrb	r3, [r3, #0]
    d7e4:	461a      	mov	r2, r3
    d7e6:	693b      	ldr	r3, [r7, #16]
    d7e8:	4413      	add	r3, r2
    d7ea:	3b30      	subs	r3, #48	; 0x30
    d7ec:	613b      	str	r3, [r7, #16]
        pcStr++;
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	3301      	adds	r3, #1
    d7f2:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7f4:	687b      	ldr	r3, [r7, #4]
    d7f6:	781b      	ldrb	r3, [r3, #0]
    d7f8:	2b2f      	cmp	r3, #47	; 0x2f
    d7fa:	d903      	bls.n	d804 <decstr_to_int+0x66>
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	781b      	ldrb	r3, [r3, #0]
    d800:	2b39      	cmp	r3, #57	; 0x39
    d802:	d9e4      	bls.n	d7ce <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d804:	683b      	ldr	r3, [r7, #0]
    d806:	2b00      	cmp	r3, #0
    d808:	d002      	beq.n	d810 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d80a:	683b      	ldr	r3, [r7, #0]
    d80c:	68fa      	ldr	r2, [r7, #12]
    d80e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d810:	7dfb      	ldrb	r3, [r7, #23]
    d812:	2b00      	cmp	r3, #0
    d814:	d002      	beq.n	d81c <decstr_to_int+0x7e>
    d816:	693b      	ldr	r3, [r7, #16]
    d818:	425b      	negs	r3, r3
    d81a:	e000      	b.n	d81e <decstr_to_int+0x80>
    d81c:	693b      	ldr	r3, [r7, #16]
}
    d81e:	4618      	mov	r0, r3
    d820:	371c      	adds	r7, #28
    d822:	46bd      	mov	sp, r7
    d824:	f85d 7b04 	ldr.w	r7, [sp], #4
    d828:	4770      	bx	lr

0000d82a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d82a:	b590      	push	{r4, r7, lr}
    d82c:	b091      	sub	sp, #68	; 0x44
    d82e:	af00      	add	r7, sp, #0
    d830:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d834:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d836:	2300      	movs	r3, #0
    d838:	63fb      	str	r3, [r7, #60]	; 0x3c
    d83a:	2300      	movs	r3, #0
    d83c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d83e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d842:	f7ff fe6b 	bl	d51c <divu64_10>
    d846:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d84a:	68b9      	ldr	r1, [r7, #8]
    d84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d84e:	4613      	mov	r3, r2
    d850:	009b      	lsls	r3, r3, #2
    d852:	4413      	add	r3, r2
    d854:	005b      	lsls	r3, r3, #1
    d856:	1acb      	subs	r3, r1, r3
    d858:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d85c:	1c5a      	adds	r2, r3, #1
    d85e:	63fa      	str	r2, [r7, #60]	; 0x3c
    d860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d862:	b2d2      	uxtb	r2, r2
    d864:	3230      	adds	r2, #48	; 0x30
    d866:	b2d2      	uxtb	r2, r2
    d868:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d86c:	440b      	add	r3, r1
    d86e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d872:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d876:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d87a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d87e:	4323      	orrs	r3, r4
    d880:	d1dd      	bne.n	d83e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d884:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	2b00      	cmp	r3, #0
    d88a:	d011      	beq.n	d8b0 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d88c:	e008      	b.n	d8a0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	1c5a      	adds	r2, r3, #1
    d892:	607a      	str	r2, [r7, #4]
    d894:	f107 0110 	add.w	r1, r7, #16
    d898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d89a:	440a      	add	r2, r1
    d89c:	7812      	ldrb	r2, [r2, #0]
    d89e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d8a2:	1e5a      	subs	r2, r3, #1
    d8a4:	63fa      	str	r2, [r7, #60]	; 0x3c
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d1f1      	bne.n	d88e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	2200      	movs	r2, #0
    d8ae:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d8b2:	4618      	mov	r0, r3
    d8b4:	3744      	adds	r7, #68	; 0x44
    d8b6:	46bd      	mov	sp, r7
    d8b8:	bd90      	pop	{r4, r7, pc}

0000d8ba <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d8ba:	b4b0      	push	{r4, r5, r7}
    d8bc:	b08d      	sub	sp, #52	; 0x34
    d8be:	af00      	add	r7, sp, #0
    d8c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d8c4:	607a      	str	r2, [r7, #4]
    d8c6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d8c8:	2300      	movs	r3, #0
    d8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d8cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d8d0:	4313      	orrs	r3, r2
    d8d2:	d131      	bne.n	d938 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8d6:	1c5a      	adds	r2, r3, #1
    d8d8:	62fa      	str	r2, [r7, #44]	; 0x2c
    d8da:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d8de:	4413      	add	r3, r2
    d8e0:	2230      	movs	r2, #48	; 0x30
    d8e2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d8e6:	e027      	b.n	d938 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    d8e8:	7a3b      	ldrb	r3, [r7, #8]
    d8ea:	f003 030f 	and.w	r3, r3, #15
    d8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d8f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d8f6:	2b09      	cmp	r3, #9
    d8f8:	d90a      	bls.n	d910 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d8fa:	78fb      	ldrb	r3, [r7, #3]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d001      	beq.n	d904 <uint64_to_hexstr+0x4a>
    d900:	2227      	movs	r2, #39	; 0x27
    d902:	e000      	b.n	d906 <uint64_to_hexstr+0x4c>
    d904:	2207      	movs	r2, #7
    d906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d90a:	4413      	add	r3, r2
    d90c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d912:	1c5a      	adds	r2, r3, #1
    d914:	62fa      	str	r2, [r7, #44]	; 0x2c
    d916:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d91a:	3230      	adds	r2, #48	; 0x30
    d91c:	b2d2      	uxtb	r2, r2
    d91e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d922:	440b      	add	r3, r1
    d924:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d92c:	0914      	lsrs	r4, r2, #4
    d92e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    d932:	091d      	lsrs	r5, r3, #4
    d934:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    d938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d93c:	4313      	orrs	r3, r2
    d93e:	d1d3      	bne.n	d8e8 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d942:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d944:	687b      	ldr	r3, [r7, #4]
    d946:	2b00      	cmp	r3, #0
    d948:	d011      	beq.n	d96e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    d94a:	e008      	b.n	d95e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    d94c:	687b      	ldr	r3, [r7, #4]
    d94e:	1c5a      	adds	r2, r3, #1
    d950:	607a      	str	r2, [r7, #4]
    d952:	f107 0110 	add.w	r1, r7, #16
    d956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d958:	440a      	add	r2, r1
    d95a:	7812      	ldrb	r2, [r2, #0]
    d95c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d960:	1e5a      	subs	r2, r3, #1
    d962:	62fa      	str	r2, [r7, #44]	; 0x2c
    d964:	2b00      	cmp	r3, #0
    d966:	d1f1      	bne.n	d94c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	2200      	movs	r2, #0
    d96c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d970:	4618      	mov	r0, r3
    d972:	3734      	adds	r7, #52	; 0x34
    d974:	46bd      	mov	sp, r7
    d976:	bcb0      	pop	{r4, r5, r7}
    d978:	4770      	bx	lr

0000d97a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d97a:	b480      	push	{r7}
    d97c:	b085      	sub	sp, #20
    d97e:	af00      	add	r7, sp, #0
    d980:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d982:	2300      	movs	r3, #0
    d984:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	2b00      	cmp	r3, #0
    d98a:	d104      	bne.n	d996 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d98c:	68fb      	ldr	r3, [r7, #12]
    d98e:	e009      	b.n	d9a4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d990:	68fb      	ldr	r3, [r7, #12]
    d992:	3301      	adds	r3, #1
    d994:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d996:	687b      	ldr	r3, [r7, #4]
    d998:	1c5a      	adds	r2, r3, #1
    d99a:	607a      	str	r2, [r7, #4]
    d99c:	781b      	ldrb	r3, [r3, #0]
    d99e:	2b00      	cmp	r3, #0
    d9a0:	d1f6      	bne.n	d990 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d9a2:	68fb      	ldr	r3, [r7, #12]
}
    d9a4:	4618      	mov	r0, r3
    d9a6:	3714      	adds	r7, #20
    d9a8:	46bd      	mov	sp, r7
    d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9ae:	4770      	bx	lr

0000d9b0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d9b0:	b480      	push	{r7}
    d9b2:	b087      	sub	sp, #28
    d9b4:	af00      	add	r7, sp, #0
    d9b6:	60f8      	str	r0, [r7, #12]
    d9b8:	460b      	mov	r3, r1
    d9ba:	607a      	str	r2, [r7, #4]
    d9bc:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d9be:	2300      	movs	r3, #0
    d9c0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	dc0c      	bgt.n	d9e2 <padbuffer+0x32>
    {
        return i32Cnt;
    d9c8:	697b      	ldr	r3, [r7, #20]
    d9ca:	e010      	b.n	d9ee <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d9cc:	68fb      	ldr	r3, [r7, #12]
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	d004      	beq.n	d9dc <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d9d2:	68fb      	ldr	r3, [r7, #12]
    d9d4:	1c5a      	adds	r2, r3, #1
    d9d6:	60fa      	str	r2, [r7, #12]
    d9d8:	7afa      	ldrb	r2, [r7, #11]
    d9da:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d9dc:	697b      	ldr	r3, [r7, #20]
    d9de:	3301      	adds	r3, #1
    d9e0:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d9e2:	687b      	ldr	r3, [r7, #4]
    d9e4:	1e5a      	subs	r2, r3, #1
    d9e6:	607a      	str	r2, [r7, #4]
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d1ef      	bne.n	d9cc <padbuffer+0x1c>
    }

    return i32Cnt;
    d9ec:	697b      	ldr	r3, [r7, #20]
}
    d9ee:	4618      	mov	r0, r3
    d9f0:	371c      	adds	r7, #28
    d9f2:	46bd      	mov	sp, r7
    d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9f8:	4770      	bx	lr
	...

0000d9fc <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d9fc:	b590      	push	{r4, r7, lr}
    d9fe:	b08f      	sub	sp, #60	; 0x3c
    da00:	af00      	add	r7, sp, #0
    da02:	60f8      	str	r0, [r7, #12]
    da04:	60b9      	str	r1, [r7, #8]
    da06:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    da08:	68bb      	ldr	r3, [r7, #8]
    da0a:	681b      	ldr	r3, [r3, #0]
    da0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da10:	2b03      	cmp	r3, #3
    da12:	dc02      	bgt.n	da1a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    da14:	f06f 0302 	mvn.w	r3, #2
    da18:	e0e7      	b.n	dbea <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    da1a:	edd7 7a03 	vldr	s15, [r7, #12]
    da1e:	eef5 7a40 	vcmp.f32	s15, #0.0
    da22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da26:	d104      	bne.n	da32 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    da28:	68bb      	ldr	r3, [r7, #8]
    da2a:	4a72      	ldr	r2, [pc, #456]	; (dbf4 <ftoa+0x1f8>)
    da2c:	601a      	str	r2, [r3, #0]
        return 3;
    da2e:	2303      	movs	r3, #3
    da30:	e0db      	b.n	dbea <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    da32:	68bb      	ldr	r3, [r7, #8]
    da34:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    da36:	68fb      	ldr	r3, [r7, #12]
    da38:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    da3a:	693b      	ldr	r3, [r7, #16]
    da3c:	15db      	asrs	r3, r3, #23
    da3e:	b2db      	uxtb	r3, r3
    da40:	3b7f      	subs	r3, #127	; 0x7f
    da42:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    da44:	693b      	ldr	r3, [r7, #16]
    da46:	f3c3 0316 	ubfx	r3, r3, #0, #23
    da4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    da4e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    da50:	2300      	movs	r3, #0
    da52:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    da54:	2300      	movs	r3, #0
    da56:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    da58:	69fb      	ldr	r3, [r7, #28]
    da5a:	2b1e      	cmp	r3, #30
    da5c:	dd02      	ble.n	da64 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    da5e:	f06f 0301 	mvn.w	r3, #1
    da62:	e0c2      	b.n	dbea <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    da64:	69fb      	ldr	r3, [r7, #28]
    da66:	f113 0f17 	cmn.w	r3, #23
    da6a:	da02      	bge.n	da72 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    da6c:	f04f 33ff 	mov.w	r3, #4294967295
    da70:	e0bb      	b.n	dbea <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    da72:	69fb      	ldr	r3, [r7, #28]
    da74:	2b16      	cmp	r3, #22
    da76:	dd06      	ble.n	da86 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    da78:	69fb      	ldr	r3, [r7, #28]
    da7a:	3b17      	subs	r3, #23
    da7c:	69ba      	ldr	r2, [r7, #24]
    da7e:	fa02 f303 	lsl.w	r3, r2, r3
    da82:	637b      	str	r3, [r7, #52]	; 0x34
    da84:	e01a      	b.n	dabc <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    da86:	69fb      	ldr	r3, [r7, #28]
    da88:	2b00      	cmp	r3, #0
    da8a:	db0f      	blt.n	daac <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    da8c:	69fb      	ldr	r3, [r7, #28]
    da8e:	f1c3 0317 	rsb	r3, r3, #23
    da92:	69ba      	ldr	r2, [r7, #24]
    da94:	fa42 f303 	asr.w	r3, r2, r3
    da98:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    da9a:	69fb      	ldr	r3, [r7, #28]
    da9c:	3301      	adds	r3, #1
    da9e:	69ba      	ldr	r2, [r7, #24]
    daa0:	fa02 f303 	lsl.w	r3, r2, r3
    daa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    daa8:	633b      	str	r3, [r7, #48]	; 0x30
    daaa:	e007      	b.n	dabc <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    daac:	69bb      	ldr	r3, [r7, #24]
    daae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    dab2:	69fb      	ldr	r3, [r7, #28]
    dab4:	43db      	mvns	r3, r3
    dab6:	fa42 f303 	asr.w	r3, r2, r3
    daba:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    dabc:	693b      	ldr	r3, [r7, #16]
    dabe:	2b00      	cmp	r3, #0
    dac0:	da04      	bge.n	dacc <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    dac2:	68bb      	ldr	r3, [r7, #8]
    dac4:	1c5a      	adds	r2, r3, #1
    dac6:	60ba      	str	r2, [r7, #8]
    dac8:	222d      	movs	r2, #45	; 0x2d
    daca:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    dacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dace:	2b00      	cmp	r3, #0
    dad0:	d105      	bne.n	dade <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    dad2:	68bb      	ldr	r3, [r7, #8]
    dad4:	1c5a      	adds	r2, r3, #1
    dad6:	60ba      	str	r2, [r7, #8]
    dad8:	2230      	movs	r2, #48	; 0x30
    dada:	701a      	strb	r2, [r3, #0]
    dadc:	e021      	b.n	db22 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    dade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dae0:	2b00      	cmp	r3, #0
    dae2:	dd08      	ble.n	daf6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dae6:	ea4f 74e3 	mov.w	r4, r3, asr #31
    daea:	68ba      	ldr	r2, [r7, #8]
    daec:	4618      	mov	r0, r3
    daee:	4621      	mov	r1, r4
    daf0:	f7ff fe9b 	bl	d82a <uint64_to_str>
    daf4:	e011      	b.n	db1a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    daf6:	68bb      	ldr	r3, [r7, #8]
    daf8:	1c5a      	adds	r2, r3, #1
    dafa:	60ba      	str	r2, [r7, #8]
    dafc:	222d      	movs	r2, #45	; 0x2d
    dafe:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    db00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db02:	425b      	negs	r3, r3
    db04:	ea4f 74e3 	mov.w	r4, r3, asr #31
    db08:	68ba      	ldr	r2, [r7, #8]
    db0a:	4618      	mov	r0, r3
    db0c:	4621      	mov	r1, r4
    db0e:	f7ff fe8c 	bl	d82a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    db12:	e002      	b.n	db1a <ftoa+0x11e>
        {
            pcBuf++;
    db14:	68bb      	ldr	r3, [r7, #8]
    db16:	3301      	adds	r3, #1
    db18:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    db1a:	68bb      	ldr	r3, [r7, #8]
    db1c:	781b      	ldrb	r3, [r3, #0]
    db1e:	2b00      	cmp	r3, #0
    db20:	d1f8      	bne.n	db14 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    db22:	68bb      	ldr	r3, [r7, #8]
    db24:	1c5a      	adds	r2, r3, #1
    db26:	60ba      	str	r2, [r7, #8]
    db28:	222e      	movs	r2, #46	; 0x2e
    db2a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db2e:	2b00      	cmp	r3, #0
    db30:	d105      	bne.n	db3e <ftoa+0x142>
    {
        *pcBuf++ = '0';
    db32:	68bb      	ldr	r3, [r7, #8]
    db34:	1c5a      	adds	r2, r3, #1
    db36:	60ba      	str	r2, [r7, #8]
    db38:	2230      	movs	r2, #48	; 0x30
    db3a:	701a      	strb	r2, [r3, #0]
    db3c:	e04f      	b.n	dbde <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    db3e:	68ba      	ldr	r2, [r7, #8]
    db40:	6a3b      	ldr	r3, [r7, #32]
    db42:	1ad3      	subs	r3, r2, r3
    db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    db46:	1ad3      	subs	r3, r2, r3
    db48:	3b01      	subs	r3, #1
    db4a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    db4c:	697a      	ldr	r2, [r7, #20]
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	4293      	cmp	r3, r2
    db52:	bfa8      	it	ge
    db54:	4613      	movge	r3, r2
    db56:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    db58:	2300      	movs	r3, #0
    db5a:	62bb      	str	r3, [r7, #40]	; 0x28
    db5c:	e015      	b.n	db8a <ftoa+0x18e>
        {
            i32FracPart *= 10;
    db5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db60:	4613      	mov	r3, r2
    db62:	009b      	lsls	r3, r3, #2
    db64:	4413      	add	r3, r2
    db66:	005b      	lsls	r3, r3, #1
    db68:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    db6a:	68bb      	ldr	r3, [r7, #8]
    db6c:	1c5a      	adds	r2, r3, #1
    db6e:	60ba      	str	r2, [r7, #8]
    db70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db72:	1612      	asrs	r2, r2, #24
    db74:	b2d2      	uxtb	r2, r2
    db76:	3230      	adds	r2, #48	; 0x30
    db78:	b2d2      	uxtb	r2, r2
    db7a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    db82:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db86:	3301      	adds	r3, #1
    db88:	62bb      	str	r3, [r7, #40]	; 0x28
    db8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    db8c:	697b      	ldr	r3, [r7, #20]
    db8e:	429a      	cmp	r2, r3
    db90:	dbe5      	blt.n	db5e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    db92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db94:	4613      	mov	r3, r2
    db96:	009b      	lsls	r3, r3, #2
    db98:	4413      	add	r3, r2
    db9a:	005b      	lsls	r3, r3, #1
    db9c:	161b      	asrs	r3, r3, #24
    db9e:	2b04      	cmp	r3, #4
    dba0:	dd1d      	ble.n	dbde <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    dba2:	68bb      	ldr	r3, [r7, #8]
    dba4:	3b01      	subs	r3, #1
    dba6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    dba8:	e015      	b.n	dbd6 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbac:	781b      	ldrb	r3, [r3, #0]
    dbae:	2b2e      	cmp	r3, #46	; 0x2e
    dbb0:	d00e      	beq.n	dbd0 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbb4:	781b      	ldrb	r3, [r3, #0]
    dbb6:	2b39      	cmp	r3, #57	; 0x39
    dbb8:	d103      	bne.n	dbc2 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbbc:	2230      	movs	r2, #48	; 0x30
    dbbe:	701a      	strb	r2, [r3, #0]
    dbc0:	e006      	b.n	dbd0 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbc4:	781b      	ldrb	r3, [r3, #0]
    dbc6:	3301      	adds	r3, #1
    dbc8:	b2da      	uxtb	r2, r3
    dbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbcc:	701a      	strb	r2, [r3, #0]
                    break;
    dbce:	e006      	b.n	dbde <ftoa+0x1e2>
                }
                pcBuftmp--;
    dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbd2:	3b01      	subs	r3, #1
    dbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    dbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dbd8:	6a3b      	ldr	r3, [r7, #32]
    dbda:	429a      	cmp	r2, r3
    dbdc:	d2e5      	bcs.n	dbaa <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    dbde:	68bb      	ldr	r3, [r7, #8]
    dbe0:	2200      	movs	r2, #0
    dbe2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    dbe4:	68ba      	ldr	r2, [r7, #8]
    dbe6:	6a3b      	ldr	r3, [r7, #32]
    dbe8:	1ad3      	subs	r3, r2, r3
} // ftoa()
    dbea:	4618      	mov	r0, r3
    dbec:	373c      	adds	r7, #60	; 0x3c
    dbee:	46bd      	mov	sp, r7
    dbf0:	bd90      	pop	{r4, r7, pc}
    dbf2:	bf00      	nop
    dbf4:	00302e30 	.word	0x00302e30

0000dbf8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    dbf8:	b590      	push	{r4, r7, lr}
    dbfa:	b095      	sub	sp, #84	; 0x54
    dbfc:	af00      	add	r7, sp, #0
    dbfe:	60f8      	str	r0, [r7, #12]
    dc00:	60b9      	str	r1, [r7, #8]
    dc02:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    dc04:	2300      	movs	r3, #0
    dc06:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    dc08:	2300      	movs	r3, #0
    dc0a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    dc0c:	e2e3      	b.n	e1d6 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    dc0e:	2306      	movs	r3, #6
    dc10:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    dc12:	68bb      	ldr	r3, [r7, #8]
    dc14:	781b      	ldrb	r3, [r3, #0]
    dc16:	2b25      	cmp	r3, #37	; 0x25
    dc18:	d01f      	beq.n	dc5a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    dc1a:	68fb      	ldr	r3, [r7, #12]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d015      	beq.n	dc4c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    dc20:	68bb      	ldr	r3, [r7, #8]
    dc22:	781b      	ldrb	r3, [r3, #0]
    dc24:	2b0a      	cmp	r3, #10
    dc26:	d10b      	bne.n	dc40 <am_util_stdio_vsprintf+0x48>
    dc28:	4bb1      	ldr	r3, [pc, #708]	; (def0 <am_util_stdio_vsprintf+0x2f8>)
    dc2a:	781b      	ldrb	r3, [r3, #0]
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d007      	beq.n	dc40 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    dc30:	68fb      	ldr	r3, [r7, #12]
    dc32:	1c5a      	adds	r2, r3, #1
    dc34:	60fa      	str	r2, [r7, #12]
    dc36:	220d      	movs	r2, #13
    dc38:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    dc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc3c:	3301      	adds	r3, #1
    dc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    dc40:	68fb      	ldr	r3, [r7, #12]
    dc42:	1c5a      	adds	r2, r3, #1
    dc44:	60fa      	str	r2, [r7, #12]
    dc46:	68ba      	ldr	r2, [r7, #8]
    dc48:	7812      	ldrb	r2, [r2, #0]
    dc4a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    dc4c:	68bb      	ldr	r3, [r7, #8]
    dc4e:	3301      	adds	r3, #1
    dc50:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    dc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc54:	3301      	adds	r3, #1
    dc56:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    dc58:	e2bd      	b.n	e1d6 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    dc5a:	68bb      	ldr	r3, [r7, #8]
    dc5c:	3301      	adds	r3, #1
    dc5e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    dc60:	2300      	movs	r3, #0
    dc62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    dc66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    dc6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    dc6e:	2320      	movs	r3, #32
    dc70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    dc74:	68bb      	ldr	r3, [r7, #8]
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	2b30      	cmp	r3, #48	; 0x30
    dc7a:	d105      	bne.n	dc88 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    dc7c:	2330      	movs	r3, #48	; 0x30
    dc7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    dc82:	68bb      	ldr	r3, [r7, #8]
    dc84:	3301      	adds	r3, #1
    dc86:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    dc88:	f107 0310 	add.w	r3, r7, #16
    dc8c:	4619      	mov	r1, r3
    dc8e:	68b8      	ldr	r0, [r7, #8]
    dc90:	f7ff fd85 	bl	d79e <decstr_to_int>
    dc94:	4603      	mov	r3, r0
    dc96:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    dc98:	693b      	ldr	r3, [r7, #16]
    dc9a:	68ba      	ldr	r2, [r7, #8]
    dc9c:	4413      	add	r3, r2
    dc9e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    dca0:	68bb      	ldr	r3, [r7, #8]
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	2b73      	cmp	r3, #115	; 0x73
    dca6:	d005      	beq.n	dcb4 <am_util_stdio_vsprintf+0xbc>
    dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dcaa:	2b00      	cmp	r3, #0
    dcac:	da02      	bge.n	dcb4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    dcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dcb0:	425b      	negs	r3, r3
    dcb2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    dcb4:	68bb      	ldr	r3, [r7, #8]
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	2b2e      	cmp	r3, #46	; 0x2e
    dcba:	d10e      	bne.n	dcda <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    dcbc:	68bb      	ldr	r3, [r7, #8]
    dcbe:	3301      	adds	r3, #1
    dcc0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    dcc2:	f107 0310 	add.w	r3, r7, #16
    dcc6:	4619      	mov	r1, r3
    dcc8:	68b8      	ldr	r0, [r7, #8]
    dcca:	f7ff fd68 	bl	d79e <decstr_to_int>
    dcce:	4603      	mov	r3, r0
    dcd0:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    dcd2:	693b      	ldr	r3, [r7, #16]
    dcd4:	68ba      	ldr	r2, [r7, #8]
    dcd6:	4413      	add	r3, r2
    dcd8:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dcda:	68bb      	ldr	r3, [r7, #8]
    dcdc:	781b      	ldrb	r3, [r3, #0]
    dcde:	2b6c      	cmp	r3, #108	; 0x6c
    dce0:	d10c      	bne.n	dcfc <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dce2:	68bb      	ldr	r3, [r7, #8]
    dce4:	3301      	adds	r3, #1
    dce6:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dce8:	68bb      	ldr	r3, [r7, #8]
    dcea:	781b      	ldrb	r3, [r3, #0]
    dcec:	2b6c      	cmp	r3, #108	; 0x6c
    dcee:	d105      	bne.n	dcfc <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dcf0:	68bb      	ldr	r3, [r7, #8]
    dcf2:	3301      	adds	r3, #1
    dcf4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dcf6:	2301      	movs	r3, #1
    dcf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    dcfc:	68bb      	ldr	r3, [r7, #8]
    dcfe:	781b      	ldrb	r3, [r3, #0]
    dd00:	3b46      	subs	r3, #70	; 0x46
    dd02:	2b32      	cmp	r3, #50	; 0x32
    dd04:	f200 8254 	bhi.w	e1b0 <am_util_stdio_vsprintf+0x5b8>
    dd08:	a201      	add	r2, pc, #4	; (adr r2, dd10 <am_util_stdio_vsprintf+0x118>)
    dd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dd0e:	bf00      	nop
    dd10:	0000e13b 	.word	0x0000e13b
    dd14:	0000e1b1 	.word	0x0000e1b1
    dd18:	0000e1b1 	.word	0x0000e1b1
    dd1c:	0000e1b1 	.word	0x0000e1b1
    dd20:	0000e1b1 	.word	0x0000e1b1
    dd24:	0000e1b1 	.word	0x0000e1b1
    dd28:	0000e1b1 	.word	0x0000e1b1
    dd2c:	0000e1b1 	.word	0x0000e1b1
    dd30:	0000e1b1 	.word	0x0000e1b1
    dd34:	0000e1b1 	.word	0x0000e1b1
    dd38:	0000e1b1 	.word	0x0000e1b1
    dd3c:	0000e1b1 	.word	0x0000e1b1
    dd40:	0000e1b1 	.word	0x0000e1b1
    dd44:	0000e1b1 	.word	0x0000e1b1
    dd48:	0000e1b1 	.word	0x0000e1b1
    dd4c:	0000e1b1 	.word	0x0000e1b1
    dd50:	0000e1b1 	.word	0x0000e1b1
    dd54:	0000e1b1 	.word	0x0000e1b1
    dd58:	0000ded7 	.word	0x0000ded7
    dd5c:	0000e1b1 	.word	0x0000e1b1
    dd60:	0000e1b1 	.word	0x0000e1b1
    dd64:	0000e1b1 	.word	0x0000e1b1
    dd68:	0000e1b1 	.word	0x0000e1b1
    dd6c:	0000e1b1 	.word	0x0000e1b1
    dd70:	0000e1b1 	.word	0x0000e1b1
    dd74:	0000e1b1 	.word	0x0000e1b1
    dd78:	0000e1b1 	.word	0x0000e1b1
    dd7c:	0000e1b1 	.word	0x0000e1b1
    dd80:	0000e1b1 	.word	0x0000e1b1
    dd84:	0000dddd 	.word	0x0000dddd
    dd88:	0000e003 	.word	0x0000e003
    dd8c:	0000e1b1 	.word	0x0000e1b1
    dd90:	0000e13b 	.word	0x0000e13b
    dd94:	0000e1b1 	.word	0x0000e1b1
    dd98:	0000e1b1 	.word	0x0000e1b1
    dd9c:	0000e003 	.word	0x0000e003
    dda0:	0000e1b1 	.word	0x0000e1b1
    dda4:	0000e1b1 	.word	0x0000e1b1
    dda8:	0000e1b1 	.word	0x0000e1b1
    ddac:	0000e1b1 	.word	0x0000e1b1
    ddb0:	0000e1b1 	.word	0x0000e1b1
    ddb4:	0000e1b1 	.word	0x0000e1b1
    ddb8:	0000e1b1 	.word	0x0000e1b1
    ddbc:	0000e1b1 	.word	0x0000e1b1
    ddc0:	0000e1b1 	.word	0x0000e1b1
    ddc4:	0000de03 	.word	0x0000de03
    ddc8:	0000e1b1 	.word	0x0000e1b1
    ddcc:	0000df71 	.word	0x0000df71
    ddd0:	0000e1b1 	.word	0x0000e1b1
    ddd4:	0000e1b1 	.word	0x0000e1b1
    ddd8:	0000ded1 	.word	0x0000ded1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    dddc:	687b      	ldr	r3, [r7, #4]
    ddde:	1d1a      	adds	r2, r3, #4
    dde0:	607a      	str	r2, [r7, #4]
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    dde8:	68fb      	ldr	r3, [r7, #12]
    ddea:	2b00      	cmp	r3, #0
    ddec:	d005      	beq.n	ddfa <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ddee:	68fb      	ldr	r3, [r7, #12]
    ddf0:	1c5a      	adds	r2, r3, #1
    ddf2:	60fa      	str	r2, [r7, #12]
    ddf4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    ddf8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddfc:	3301      	adds	r3, #1
    ddfe:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    de00:	e1e6      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    de02:	687b      	ldr	r3, [r7, #4]
    de04:	1d1a      	adds	r2, r3, #4
    de06:	607a      	str	r2, [r7, #4]
    de08:	681b      	ldr	r3, [r3, #0]
    de0a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    de0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    de0e:	f7ff fdb4 	bl	d97a <simple_strlen>
    de12:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de16:	2b00      	cmp	r3, #0
    de18:	dd2e      	ble.n	de78 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    de1e:	429a      	cmp	r2, r3
    de20:	d22a      	bcs.n	de78 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    de22:	6bba      	ldr	r2, [r7, #56]	; 0x38
    de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de26:	1ad3      	subs	r3, r2, r3
    de28:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    de2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    de2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    de30:	4619      	mov	r1, r3
    de32:	68f8      	ldr	r0, [r7, #12]
    de34:	f7ff fdbc 	bl	d9b0 <padbuffer>
    de38:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    de3a:	68fb      	ldr	r3, [r7, #12]
    de3c:	2b00      	cmp	r3, #0
    de3e:	d001      	beq.n	de44 <am_util_stdio_vsprintf+0x24c>
    de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de42:	e000      	b.n	de46 <am_util_stdio_vsprintf+0x24e>
    de44:	2300      	movs	r3, #0
    de46:	68fa      	ldr	r2, [r7, #12]
    de48:	4413      	add	r3, r2
    de4a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    de50:	4413      	add	r3, r2
    de52:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    de54:	2300      	movs	r3, #0
    de56:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    de58:	e00e      	b.n	de78 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    de5a:	68fb      	ldr	r3, [r7, #12]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d005      	beq.n	de6c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    de60:	68fb      	ldr	r3, [r7, #12]
    de62:	1c5a      	adds	r2, r3, #1
    de64:	60fa      	str	r2, [r7, #12]
    de66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    de68:	7812      	ldrb	r2, [r2, #0]
    de6a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    de6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    de6e:	3301      	adds	r3, #1
    de70:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de74:	3301      	adds	r3, #1
    de76:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    de78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	2b00      	cmp	r3, #0
    de7e:	d1ec      	bne.n	de5a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de82:	2b00      	cmp	r3, #0
    de84:	f000 81a1 	beq.w	e1ca <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    de88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de8a:	425b      	negs	r3, r3
    de8c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    de8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    de92:	429a      	cmp	r2, r3
    de94:	f080 8199 	bcs.w	e1ca <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    de98:	6bba      	ldr	r2, [r7, #56]	; 0x38
    de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de9c:	1ad3      	subs	r3, r2, r3
    de9e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    dea6:	4619      	mov	r1, r3
    dea8:	68f8      	ldr	r0, [r7, #12]
    deaa:	f7ff fd81 	bl	d9b0 <padbuffer>
    deae:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    deb0:	68fb      	ldr	r3, [r7, #12]
    deb2:	2b00      	cmp	r3, #0
    deb4:	d001      	beq.n	deba <am_util_stdio_vsprintf+0x2c2>
    deb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    deb8:	e000      	b.n	debc <am_util_stdio_vsprintf+0x2c4>
    deba:	2300      	movs	r3, #0
    debc:	68fa      	ldr	r2, [r7, #12]
    debe:	4413      	add	r3, r2
    dec0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dec6:	4413      	add	r3, r2
    dec8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    deca:	2300      	movs	r3, #0
    decc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    dece:	e17c      	b.n	e1ca <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    ded0:	2301      	movs	r3, #1
    ded2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ded6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    deda:	2b00      	cmp	r3, #0
    dedc:	d00a      	beq.n	def4 <am_util_stdio_vsprintf+0x2fc>
    dede:	687b      	ldr	r3, [r7, #4]
    dee0:	3307      	adds	r3, #7
    dee2:	f023 0307 	bic.w	r3, r3, #7
    dee6:	f103 0208 	add.w	r2, r3, #8
    deea:	607a      	str	r2, [r7, #4]
    deec:	cb18      	ldmia	r3, {r3, r4}
    deee:	e007      	b.n	df00 <am_util_stdio_vsprintf+0x308>
    def0:	100025f4 	.word	0x100025f4
                                      va_arg(pArgs, uint32_t);
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	1d1a      	adds	r2, r3, #4
    def8:	607a      	str	r2, [r7, #4]
    defa:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    defc:	f04f 0400 	mov.w	r4, #0
    df00:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    df06:	2b00      	cmp	r3, #0
    df08:	d01e      	beq.n	df48 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    df0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    df0e:	f7ff fc22 	bl	d756 <ndigits_in_hex>
    df12:	4602      	mov	r2, r0
    df14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    df16:	1a9b      	subs	r3, r3, r2
    df18:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    df1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    df1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    df20:	4619      	mov	r1, r3
    df22:	68f8      	ldr	r0, [r7, #12]
    df24:	f7ff fd44 	bl	d9b0 <padbuffer>
    df28:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    df2a:	68fb      	ldr	r3, [r7, #12]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d001      	beq.n	df34 <am_util_stdio_vsprintf+0x33c>
    df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    df32:	e000      	b.n	df36 <am_util_stdio_vsprintf+0x33e>
    df34:	2300      	movs	r3, #0
    df36:	68fa      	ldr	r2, [r7, #12]
    df38:	4413      	add	r3, r2
    df3a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    df3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    df40:	4413      	add	r3, r2
    df42:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    df44:	2300      	movs	r3, #0
    df46:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    df48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    df4c:	68fa      	ldr	r2, [r7, #12]
    df4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    df52:	f7ff fcb2 	bl	d8ba <uint64_to_hexstr>
    df56:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    df58:	68fb      	ldr	r3, [r7, #12]
    df5a:	2b00      	cmp	r3, #0
    df5c:	d003      	beq.n	df66 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    df5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    df60:	68fa      	ldr	r2, [r7, #12]
    df62:	4413      	add	r3, r2
    df64:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    df66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    df68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    df6a:	4413      	add	r3, r2
    df6c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    df6e:	e12f      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    df70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    df74:	2b00      	cmp	r3, #0
    df76:	d008      	beq.n	df8a <am_util_stdio_vsprintf+0x392>
    df78:	687b      	ldr	r3, [r7, #4]
    df7a:	3307      	adds	r3, #7
    df7c:	f023 0307 	bic.w	r3, r3, #7
    df80:	f103 0208 	add.w	r2, r3, #8
    df84:	607a      	str	r2, [r7, #4]
    df86:	cb18      	ldmia	r3, {r3, r4}
    df88:	e005      	b.n	df96 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	1d1a      	adds	r2, r3, #4
    df8e:	607a      	str	r2, [r7, #4]
    df90:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    df92:	f04f 0400 	mov.w	r4, #0
    df96:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    df9c:	2b00      	cmp	r3, #0
    df9e:	d01e      	beq.n	dfde <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    dfa0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dfa4:	f7ff fb99 	bl	d6da <ndigits_in_u64>
    dfa8:	4602      	mov	r2, r0
    dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dfac:	1a9b      	subs	r3, r3, r2
    dfae:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dfb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    dfb6:	4619      	mov	r1, r3
    dfb8:	68f8      	ldr	r0, [r7, #12]
    dfba:	f7ff fcf9 	bl	d9b0 <padbuffer>
    dfbe:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    dfc0:	68fb      	ldr	r3, [r7, #12]
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d001      	beq.n	dfca <am_util_stdio_vsprintf+0x3d2>
    dfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dfc8:	e000      	b.n	dfcc <am_util_stdio_vsprintf+0x3d4>
    dfca:	2300      	movs	r3, #0
    dfcc:	68fa      	ldr	r2, [r7, #12]
    dfce:	4413      	add	r3, r2
    dfd0:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dfd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dfd6:	4413      	add	r3, r2
    dfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    dfda:	2300      	movs	r3, #0
    dfdc:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dfde:	68fa      	ldr	r2, [r7, #12]
    dfe0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dfe4:	f7ff fc21 	bl	d82a <uint64_to_str>
    dfe8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    dfea:	68fb      	ldr	r3, [r7, #12]
    dfec:	2b00      	cmp	r3, #0
    dfee:	d003      	beq.n	dff8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    dff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dff2:	68fa      	ldr	r2, [r7, #12]
    dff4:	4413      	add	r3, r2
    dff6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dffc:	4413      	add	r3, r2
    dffe:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    e000:	e0e6      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    e006:	2b00      	cmp	r3, #0
    e008:	d008      	beq.n	e01c <am_util_stdio_vsprintf+0x424>
    e00a:	687b      	ldr	r3, [r7, #4]
    e00c:	3307      	adds	r3, #7
    e00e:	f023 0307 	bic.w	r3, r3, #7
    e012:	f103 0208 	add.w	r2, r3, #8
    e016:	607a      	str	r2, [r7, #4]
    e018:	cb18      	ldmia	r3, {r3, r4}
    e01a:	e005      	b.n	e028 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	1d1a      	adds	r2, r3, #4
    e020:	607a      	str	r2, [r7, #4]
    e022:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e024:	ea4f 74e3 	mov.w	r4, r3, asr #31
    e028:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    e02c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    e030:	2b00      	cmp	r3, #0
    e032:	f174 0300 	sbcs.w	r3, r4, #0
    e036:	da0a      	bge.n	e04e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    e038:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    e03c:	425b      	negs	r3, r3
    e03e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    e042:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    e046:	2301      	movs	r3, #1
    e048:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    e04c:	e006      	b.n	e05c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    e04e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    e052:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    e056:	2300      	movs	r3, #0
    e058:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e05e:	2b00      	cmp	r3, #0
    e060:	d04a      	beq.n	e0f8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    e062:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    e066:	4618      	mov	r0, r3
    e068:	4621      	mov	r1, r4
    e06a:	f7ff fb57 	bl	d71c <ndigits_in_i64>
    e06e:	4602      	mov	r2, r0
    e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e072:	1a9b      	subs	r3, r3, r2
    e074:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    e076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e07a:	2b00      	cmp	r3, #0
    e07c:	d011      	beq.n	e0a2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    e07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e080:	3b01      	subs	r3, #1
    e082:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    e084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    e088:	2b30      	cmp	r3, #48	; 0x30
    e08a:	d10a      	bne.n	e0a2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    e08c:	68fb      	ldr	r3, [r7, #12]
    e08e:	2b00      	cmp	r3, #0
    e090:	d004      	beq.n	e09c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    e092:	68fb      	ldr	r3, [r7, #12]
    e094:	1c5a      	adds	r2, r3, #1
    e096:	60fa      	str	r2, [r7, #12]
    e098:	222d      	movs	r2, #45	; 0x2d
    e09a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e09e:	3301      	adds	r3, #1
    e0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    e0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    e0a8:	4619      	mov	r1, r3
    e0aa:	68f8      	ldr	r0, [r7, #12]
    e0ac:	f7ff fc80 	bl	d9b0 <padbuffer>
    e0b0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    e0b2:	68fb      	ldr	r3, [r7, #12]
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d001      	beq.n	e0bc <am_util_stdio_vsprintf+0x4c4>
    e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0ba:	e000      	b.n	e0be <am_util_stdio_vsprintf+0x4c6>
    e0bc:	2300      	movs	r3, #0
    e0be:	68fa      	ldr	r2, [r7, #12]
    e0c0:	4413      	add	r3, r2
    e0c2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e0c8:	4413      	add	r3, r2
    e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    e0cc:	2300      	movs	r3, #0
    e0ce:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e0d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	d01e      	beq.n	e116 <am_util_stdio_vsprintf+0x51e>
    e0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    e0dc:	2b20      	cmp	r3, #32
    e0de:	d11a      	bne.n	e116 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e0e0:	68fb      	ldr	r3, [r7, #12]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d004      	beq.n	e0f0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	1c5a      	adds	r2, r3, #1
    e0ea:	60fa      	str	r2, [r7, #12]
    e0ec:	222d      	movs	r2, #45	; 0x2d
    e0ee:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0f2:	3301      	adds	r3, #1
    e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    e0f6:	e00e      	b.n	e116 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    e0f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d00a      	beq.n	e116 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    e100:	68fb      	ldr	r3, [r7, #12]
    e102:	2b00      	cmp	r3, #0
    e104:	d004      	beq.n	e110 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    e106:	68fb      	ldr	r3, [r7, #12]
    e108:	1c5a      	adds	r2, r3, #1
    e10a:	60fa      	str	r2, [r7, #12]
    e10c:	222d      	movs	r2, #45	; 0x2d
    e10e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e112:	3301      	adds	r3, #1
    e114:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e116:	68fa      	ldr	r2, [r7, #12]
    e118:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    e11c:	f7ff fb85 	bl	d82a <uint64_to_str>
    e120:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    e122:	68fb      	ldr	r3, [r7, #12]
    e124:	2b00      	cmp	r3, #0
    e126:	d003      	beq.n	e130 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    e128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e12a:	68fa      	ldr	r2, [r7, #12]
    e12c:	4413      	add	r3, r2
    e12e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e134:	4413      	add	r3, r2
    e136:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    e138:	e04a      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    e13a:	68fb      	ldr	r3, [r7, #12]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d046      	beq.n	e1ce <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	3307      	adds	r3, #7
    e144:	f023 0307 	bic.w	r3, r3, #7
    e148:	f103 0208 	add.w	r2, r3, #8
    e14c:	607a      	str	r2, [r7, #4]
    e14e:	cb18      	ldmia	r3, {r3, r4}
    e150:	4618      	mov	r0, r3
    e152:	4621      	mov	r1, r4
    e154:	f7f8 f87a 	bl	624c <__aeabi_d2f>
    e158:	4603      	mov	r3, r0
    e15a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e15c:	68fb      	ldr	r3, [r7, #12]
    e15e:	2214      	movs	r2, #20
    e160:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e164:	68f9      	ldr	r1, [r7, #12]
    e166:	6978      	ldr	r0, [r7, #20]
    e168:	f7ff fc48 	bl	d9fc <ftoa>
    e16c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    e16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e170:	2b00      	cmp	r3, #0
    e172:	da14      	bge.n	e19e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e176:	f1b3 3fff 	cmp.w	r3, #4294967295
    e17a:	d102      	bne.n	e182 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e17c:	4b1e      	ldr	r3, [pc, #120]	; (e1f8 <am_util_stdio_vsprintf+0x600>)
    e17e:	62bb      	str	r3, [r7, #40]	; 0x28
    e180:	e008      	b.n	e194 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e184:	f113 0f02 	cmn.w	r3, #2
    e188:	d102      	bne.n	e190 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e18a:	4b1c      	ldr	r3, [pc, #112]	; (e1fc <am_util_stdio_vsprintf+0x604>)
    e18c:	62bb      	str	r3, [r7, #40]	; 0x28
    e18e:	e001      	b.n	e194 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e190:	4b1b      	ldr	r3, [pc, #108]	; (e200 <am_util_stdio_vsprintf+0x608>)
    e192:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e194:	68fb      	ldr	r3, [r7, #12]
    e196:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e198:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e19a:	2303      	movs	r3, #3
    e19c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    e19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e1a2:	4413      	add	r3, r2
    e1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    e1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1a8:	68fa      	ldr	r2, [r7, #12]
    e1aa:	4413      	add	r3, r2
    e1ac:	60fb      	str	r3, [r7, #12]
                }
                break;
    e1ae:	e00e      	b.n	e1ce <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e1b0:	68fb      	ldr	r3, [r7, #12]
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d005      	beq.n	e1c2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    e1b6:	68fb      	ldr	r3, [r7, #12]
    e1b8:	1c5a      	adds	r2, r3, #1
    e1ba:	60fa      	str	r2, [r7, #12]
    e1bc:	68ba      	ldr	r2, [r7, #8]
    e1be:	7812      	ldrb	r2, [r2, #0]
    e1c0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e1c4:	3301      	adds	r3, #1
    e1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    e1c8:	e002      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>
                break;
    e1ca:	bf00      	nop
    e1cc:	e000      	b.n	e1d0 <am_util_stdio_vsprintf+0x5d8>
                break;
    e1ce:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e1d0:	68bb      	ldr	r3, [r7, #8]
    e1d2:	3301      	adds	r3, #1
    e1d4:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e1d6:	68bb      	ldr	r3, [r7, #8]
    e1d8:	781b      	ldrb	r3, [r3, #0]
    e1da:	2b00      	cmp	r3, #0
    e1dc:	f47f ad17 	bne.w	dc0e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e1e0:	68fb      	ldr	r3, [r7, #12]
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d002      	beq.n	e1ec <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    e1e6:	68fb      	ldr	r3, [r7, #12]
    e1e8:	2200      	movs	r2, #0
    e1ea:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    e1ee:	4618      	mov	r0, r3
    e1f0:	3754      	adds	r7, #84	; 0x54
    e1f2:	46bd      	mov	sp, r7
    e1f4:	bd90      	pop	{r4, r7, pc}
    e1f6:	bf00      	nop
    e1f8:	00302e30 	.word	0x00302e30
    e1fc:	00232e23 	.word	0x00232e23
    e200:	003f2e3f 	.word	0x003f2e3f

0000e204 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e204:	b40f      	push	{r0, r1, r2, r3}
    e206:	b580      	push	{r7, lr}
    e208:	b082      	sub	sp, #8
    e20a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e20c:	f107 0314 	add.w	r3, r7, #20
    e210:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e212:	683a      	ldr	r2, [r7, #0]
    e214:	6939      	ldr	r1, [r7, #16]
    e216:	4808      	ldr	r0, [pc, #32]	; (e238 <am_util_stdio_printf+0x34>)
    e218:	f7ff fcee 	bl	dbf8 <am_util_stdio_vsprintf>
    e21c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e21e:	4b07      	ldr	r3, [pc, #28]	; (e23c <am_util_stdio_printf+0x38>)
    e220:	681b      	ldr	r3, [r3, #0]
    e222:	4805      	ldr	r0, [pc, #20]	; (e238 <am_util_stdio_printf+0x34>)
    e224:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e226:	687b      	ldr	r3, [r7, #4]
}
    e228:	4618      	mov	r0, r3
    e22a:	3708      	adds	r7, #8
    e22c:	46bd      	mov	sp, r7
    e22e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e232:	b004      	add	sp, #16
    e234:	4770      	bx	lr
    e236:	bf00      	nop
    e238:	100024f4 	.word	0x100024f4
    e23c:	10002924 	.word	0x10002924

0000e240 <am_bsp_iom_spi_pins_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
    e240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e244:	b08d      	sub	sp, #52	; 0x34
    switch(ui32Module)
    e246:	2805      	cmp	r0, #5
    e248:	f200 815d 	bhi.w	e506 <am_bsp_iom_spi_pins_enable+0x2c6>
    e24c:	e8df f010 	tbh	[pc, r0, lsl #1]
    e250:	00b30106 	.word	0x00b30106
    e254:	015b005e 	.word	0x015b005e
    e258:	0006015b 	.word	0x0006015b
            break;
#endif

#ifdef AM_BSP_GPIO_IOM5_SCK
        case 5:
            am_bsp_pin_enable(IOM5_SCK);
    e25c:	f000 fcf2 	bl	ec44 <am_hal_interrupt_master_disable>
    e260:	4ca9      	ldr	r4, [pc, #676]	; (e508 <am_bsp_iom_spi_pins_enable+0x2c8>)
    e262:	f8df 92e4 	ldr.w	r9, [pc, #740]	; e548 <am_bsp_iom_spi_pins_enable+0x308>
    e266:	9009      	str	r0, [sp, #36]	; 0x24
    e268:	f04f 0873 	mov.w	r8, #115	; 0x73
    e26c:	f8c4 8000 	str.w	r8, [r4]
    e270:	f8d9 3000 	ldr.w	r3, [r9]
    e274:	4ea5      	ldr	r6, [pc, #660]	; (e50c <am_bsp_iom_spi_pins_enable+0x2cc>)
    e276:	4da6      	ldr	r5, [pc, #664]	; (e510 <am_bsp_iom_spi_pins_enable+0x2d0>)
    e278:	f023 0007 	bic.w	r0, r3, #7
    e27c:	f8c9 0000 	str.w	r0, [r9]
    e280:	6831      	ldr	r1, [r6, #0]
    e282:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
    e286:	f042 072a 	orr.w	r7, r2, #42	; 0x2a
    e28a:	6037      	str	r7, [r6, #0]
    e28c:	682b      	ldr	r3, [r5, #0]
    e28e:	2700      	movs	r7, #0
    e290:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
    e294:	6028      	str	r0, [r5, #0]
    e296:	6027      	str	r7, [r4, #0]
    e298:	9809      	ldr	r0, [sp, #36]	; 0x24
    e29a:	f000 fcd7 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM5_MISO);
    e29e:	f000 fcd1 	bl	ec44 <am_hal_interrupt_master_disable>
    e2a2:	900a      	str	r0, [sp, #40]	; 0x28
    e2a4:	f8c4 8000 	str.w	r8, [r4]
    e2a8:	f8d9 1000 	ldr.w	r1, [r9]
    e2ac:	f021 0270 	bic.w	r2, r1, #112	; 0x70
    e2b0:	f8c9 2000 	str.w	r2, [r9]
    e2b4:	6833      	ldr	r3, [r6, #0]
    e2b6:	f423 407f 	bic.w	r0, r3, #65280	; 0xff00
    e2ba:	f440 5128 	orr.w	r1, r0, #10752	; 0x2a00
    e2be:	6031      	str	r1, [r6, #0]
    e2c0:	682e      	ldr	r6, [r5, #0]
    e2c2:	f426 427f 	bic.w	r2, r6, #65280	; 0xff00
    e2c6:	602a      	str	r2, [r5, #0]
    e2c8:	6027      	str	r7, [r4, #0]
    e2ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    e2cc:	f000 fcbe 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM5_MOSI);
    e2d0:	f000 fcb8 	bl	ec44 <am_hal_interrupt_master_disable>
    e2d4:	900b      	str	r0, [sp, #44]	; 0x2c
    e2d6:	f8c4 8000 	str.w	r8, [r4]
    e2da:	f855 3cbc 	ldr.w	r3, [r5, #-188]
    e2de:	488d      	ldr	r0, [pc, #564]	; (e514 <am_bsp_iom_spi_pins_enable+0x2d4>)
    e2e0:	498d      	ldr	r1, [pc, #564]	; (e518 <am_bsp_iom_spi_pins_enable+0x2d8>)
    e2e2:	f023 46e0 	bic.w	r6, r3, #1879048192	; 0x70000000
    e2e6:	f845 6cbc 	str.w	r6, [r5, #-188]
    e2ea:	6805      	ldr	r5, [r0, #0]
    e2ec:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
    e2f0:	f042 5320 	orr.w	r3, r2, #671088640	; 0x28000000
    e2f4:	6003      	str	r3, [r0, #0]
    e2f6:	6808      	ldr	r0, [r1, #0]
    e2f8:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    e2fc:	600e      	str	r6, [r1, #0]
    e2fe:	6027      	str	r7, [r4, #0]
    e300:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e302:	f000 fca3 	bl	ec4c <am_hal_interrupt_master_set>
        // debugging.
        //
        default:
            while(1);
    }
}
    e306:	b00d      	add	sp, #52	; 0x34
    e308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM2_SCK);
    e30c:	f000 fc9a 	bl	ec44 <am_hal_interrupt_master_disable>
    e310:	4c7d      	ldr	r4, [pc, #500]	; (e508 <am_bsp_iom_spi_pins_enable+0x2c8>)
    e312:	4d82      	ldr	r5, [pc, #520]	; (e51c <am_bsp_iom_spi_pins_enable+0x2dc>)
    e314:	9006      	str	r0, [sp, #24]
    e316:	f04f 0973 	mov.w	r9, #115	; 0x73
    e31a:	f8c4 9000 	str.w	r9, [r4]
    e31e:	6829      	ldr	r1, [r5, #0]
    e320:	4f7f      	ldr	r7, [pc, #508]	; (e520 <am_bsp_iom_spi_pins_enable+0x2e0>)
    e322:	4e80      	ldr	r6, [pc, #512]	; (e524 <am_bsp_iom_spi_pins_enable+0x2e4>)
    e324:	f421 42e0 	bic.w	r2, r1, #28672	; 0x7000
    e328:	602a      	str	r2, [r5, #0]
    e32a:	683b      	ldr	r3, [r7, #0]
    e32c:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    e330:	f040 5138 	orr.w	r1, r0, #771751936	; 0x2e000000
    e334:	6039      	str	r1, [r7, #0]
    e336:	6832      	ldr	r2, [r6, #0]
    e338:	f04f 0800 	mov.w	r8, #0
    e33c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    e340:	6033      	str	r3, [r6, #0]
    e342:	f8c4 8000 	str.w	r8, [r4]
    e346:	9806      	ldr	r0, [sp, #24]
    e348:	f000 fc80 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM2_MISO);
    e34c:	f000 fc7a 	bl	ec44 <am_hal_interrupt_master_disable>
    e350:	9007      	str	r0, [sp, #28]
    e352:	f8c4 9000 	str.w	r9, [r4]
    e356:	6828      	ldr	r0, [r5, #0]
    e358:	f020 0170 	bic.w	r1, r0, #112	; 0x70
    e35c:	6029      	str	r1, [r5, #0]
    e35e:	683a      	ldr	r2, [r7, #0]
    e360:	f422 4c7f 	bic.w	ip, r2, #65280	; 0xff00
    e364:	f44c 5328 	orr.w	r3, ip, #10752	; 0x2a00
    e368:	603b      	str	r3, [r7, #0]
    e36a:	6837      	ldr	r7, [r6, #0]
    e36c:	f427 407f 	bic.w	r0, r7, #65280	; 0xff00
    e370:	6030      	str	r0, [r6, #0]
    e372:	f8c4 8000 	str.w	r8, [r4]
    e376:	9807      	ldr	r0, [sp, #28]
    e378:	f000 fc68 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM2_MOSI);
    e37c:	f000 fc62 	bl	ec44 <am_hal_interrupt_master_disable>
    e380:	9008      	str	r0, [sp, #32]
    e382:	f8c4 9000 	str.w	r9, [r4]
    e386:	682e      	ldr	r6, [r5, #0]
    e388:	4967      	ldr	r1, [pc, #412]	; (e528 <am_bsp_iom_spi_pins_enable+0x2e8>)
    e38a:	4a68      	ldr	r2, [pc, #416]	; (e52c <am_bsp_iom_spi_pins_enable+0x2ec>)
    e38c:	f426 23e0 	bic.w	r3, r6, #458752	; 0x70000
    e390:	602b      	str	r3, [r5, #0]
    e392:	680d      	ldr	r5, [r1, #0]
    e394:	f025 07ff 	bic.w	r7, r5, #255	; 0xff
    e398:	f047 0028 	orr.w	r0, r7, #40	; 0x28
    e39c:	6008      	str	r0, [r1, #0]
    e39e:	6816      	ldr	r6, [r2, #0]
    e3a0:	f026 01ff 	bic.w	r1, r6, #255	; 0xff
    e3a4:	6011      	str	r1, [r2, #0]
    e3a6:	f8c4 8000 	str.w	r8, [r4]
    e3aa:	9808      	ldr	r0, [sp, #32]
    e3ac:	f000 fc4e 	bl	ec4c <am_hal_interrupt_master_set>
}
    e3b0:	b00d      	add	sp, #52	; 0x34
    e3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM1_SCK);
    e3b6:	f000 fc45 	bl	ec44 <am_hal_interrupt_master_disable>
    e3ba:	4c53      	ldr	r4, [pc, #332]	; (e508 <am_bsp_iom_spi_pins_enable+0x2c8>)
    e3bc:	4f5c      	ldr	r7, [pc, #368]	; (e530 <am_bsp_iom_spi_pins_enable+0x2f0>)
    e3be:	9003      	str	r0, [sp, #12]
    e3c0:	f04f 0973 	mov.w	r9, #115	; 0x73
    e3c4:	f8c4 9000 	str.w	r9, [r4]
    e3c8:	683a      	ldr	r2, [r7, #0]
    e3ca:	4e5a      	ldr	r6, [pc, #360]	; (e534 <am_bsp_iom_spi_pins_enable+0x2f4>)
    e3cc:	4d5a      	ldr	r5, [pc, #360]	; (e538 <am_bsp_iom_spi_pins_enable+0x2f8>)
    e3ce:	f022 0307 	bic.w	r3, r2, #7
    e3d2:	603b      	str	r3, [r7, #0]
    e3d4:	6830      	ldr	r0, [r6, #0]
    e3d6:	f020 01ff 	bic.w	r1, r0, #255	; 0xff
    e3da:	f041 020e 	orr.w	r2, r1, #14
    e3de:	6032      	str	r2, [r6, #0]
    e3e0:	682b      	ldr	r3, [r5, #0]
    e3e2:	f04f 0800 	mov.w	r8, #0
    e3e6:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
    e3ea:	6028      	str	r0, [r5, #0]
    e3ec:	f8c4 8000 	str.w	r8, [r4]
    e3f0:	9803      	ldr	r0, [sp, #12]
    e3f2:	f000 fc2b 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM1_MISO);
    e3f6:	f000 fc25 	bl	ec44 <am_hal_interrupt_master_disable>
    e3fa:	9004      	str	r0, [sp, #16]
    e3fc:	f8c4 9000 	str.w	r9, [r4]
    e400:	6839      	ldr	r1, [r7, #0]
    e402:	f021 0270 	bic.w	r2, r1, #112	; 0x70
    e406:	603a      	str	r2, [r7, #0]
    e408:	6833      	ldr	r3, [r6, #0]
    e40a:	f423 407f 	bic.w	r0, r3, #65280	; 0xff00
    e40e:	f440 6120 	orr.w	r1, r0, #2560	; 0xa00
    e412:	6031      	str	r1, [r6, #0]
    e414:	682a      	ldr	r2, [r5, #0]
    e416:	f422 437f 	bic.w	r3, r2, #65280	; 0xff00
    e41a:	602b      	str	r3, [r5, #0]
    e41c:	f8c4 8000 	str.w	r8, [r4]
    e420:	9804      	ldr	r0, [sp, #16]
    e422:	f000 fc13 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM1_MOSI);
    e426:	f000 fc0d 	bl	ec44 <am_hal_interrupt_master_disable>
    e42a:	9005      	str	r0, [sp, #20]
    e42c:	f8c4 9000 	str.w	r9, [r4]
    e430:	6838      	ldr	r0, [r7, #0]
    e432:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
    e436:	6039      	str	r1, [r7, #0]
    e438:	6837      	ldr	r7, [r6, #0]
    e43a:	f427 027f 	bic.w	r2, r7, #16711680	; 0xff0000
    e43e:	f442 2300 	orr.w	r3, r2, #524288	; 0x80000
    e442:	6033      	str	r3, [r6, #0]
    e444:	682e      	ldr	r6, [r5, #0]
    e446:	f426 007f 	bic.w	r0, r6, #16711680	; 0xff0000
    e44a:	6028      	str	r0, [r5, #0]
    e44c:	f8c4 8000 	str.w	r8, [r4]
    e450:	9805      	ldr	r0, [sp, #20]
    e452:	f000 fbfb 	bl	ec4c <am_hal_interrupt_master_set>
}
    e456:	b00d      	add	sp, #52	; 0x34
    e458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM0_SCK);
    e45c:	f000 fbf2 	bl	ec44 <am_hal_interrupt_master_disable>
    e460:	4c29      	ldr	r4, [pc, #164]	; (e508 <am_bsp_iom_spi_pins_enable+0x2c8>)
    e462:	4f36      	ldr	r7, [pc, #216]	; (e53c <am_bsp_iom_spi_pins_enable+0x2fc>)
    e464:	9000      	str	r0, [sp, #0]
    e466:	f04f 0973 	mov.w	r9, #115	; 0x73
    e46a:	f8c4 9000 	str.w	r9, [r4]
    e46e:	6839      	ldr	r1, [r7, #0]
    e470:	4e33      	ldr	r6, [pc, #204]	; (e540 <am_bsp_iom_spi_pins_enable+0x300>)
    e472:	4d34      	ldr	r5, [pc, #208]	; (e544 <am_bsp_iom_spi_pins_enable+0x304>)
    e474:	f421 02e0 	bic.w	r2, r1, #7340032	; 0x700000
    e478:	f442 1300 	orr.w	r3, r2, #2097152	; 0x200000
    e47c:	603b      	str	r3, [r7, #0]
    e47e:	6830      	ldr	r0, [r6, #0]
    e480:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
    e484:	f441 6260 	orr.w	r2, r1, #3584	; 0xe00
    e488:	6032      	str	r2, [r6, #0]
    e48a:	682b      	ldr	r3, [r5, #0]
    e48c:	f04f 0800 	mov.w	r8, #0
    e490:	f423 407f 	bic.w	r0, r3, #65280	; 0xff00
    e494:	6028      	str	r0, [r5, #0]
    e496:	f8c4 8000 	str.w	r8, [r4]
    e49a:	9800      	ldr	r0, [sp, #0]
    e49c:	f000 fbd6 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM0_MISO);
    e4a0:	f000 fbd0 	bl	ec44 <am_hal_interrupt_master_disable>
    e4a4:	9001      	str	r0, [sp, #4]
    e4a6:	f8c4 9000 	str.w	r9, [r4]
    e4aa:	6839      	ldr	r1, [r7, #0]
    e4ac:	f021 62e0 	bic.w	r2, r1, #117440512	; 0x7000000
    e4b0:	603a      	str	r2, [r7, #0]
    e4b2:	6833      	ldr	r3, [r6, #0]
    e4b4:	f423 007f 	bic.w	r0, r3, #16711680	; 0xff0000
    e4b8:	f440 2120 	orr.w	r1, r0, #655360	; 0xa0000
    e4bc:	6031      	str	r1, [r6, #0]
    e4be:	682a      	ldr	r2, [r5, #0]
    e4c0:	f422 037f 	bic.w	r3, r2, #16711680	; 0xff0000
    e4c4:	602b      	str	r3, [r5, #0]
    e4c6:	f8c4 8000 	str.w	r8, [r4]
    e4ca:	9801      	ldr	r0, [sp, #4]
    e4cc:	f000 fbbe 	bl	ec4c <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM0_MOSI);
    e4d0:	f000 fbb8 	bl	ec44 <am_hal_interrupt_master_disable>
    e4d4:	9002      	str	r0, [sp, #8]
    e4d6:	f8c4 9000 	str.w	r9, [r4]
    e4da:	6838      	ldr	r0, [r7, #0]
    e4dc:	f020 41e0 	bic.w	r1, r0, #1879048192	; 0x70000000
    e4e0:	6039      	str	r1, [r7, #0]
    e4e2:	6837      	ldr	r7, [r6, #0]
    e4e4:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    e4e8:	f042 6300 	orr.w	r3, r2, #134217728	; 0x8000000
    e4ec:	6033      	str	r3, [r6, #0]
    e4ee:	682e      	ldr	r6, [r5, #0]
    e4f0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    e4f4:	6028      	str	r0, [r5, #0]
    e4f6:	f8c4 8000 	str.w	r8, [r4]
    e4fa:	9802      	ldr	r0, [sp, #8]
    e4fc:	f000 fba6 	bl	ec4c <am_hal_interrupt_master_set>
}
    e500:	b00d      	add	sp, #52	; 0x34
    e502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e506:	e7fe      	b.n	e506 <am_bsp_iom_spi_pins_enable+0x2c6>
    e508:	40010060 	.word	0x40010060
    e50c:	40010030 	.word	0x40010030
    e510:	40010110 	.word	0x40010110
    e514:	4001002c 	.word	0x4001002c
    e518:	4001010c 	.word	0x4001010c
    e51c:	4001004c 	.word	0x4001004c
    e520:	40010018 	.word	0x40010018
    e524:	400100f8 	.word	0x400100f8
    e528:	4001001c 	.word	0x4001001c
    e52c:	400100fc 	.word	0x400100fc
    e530:	40010044 	.word	0x40010044
    e534:	40010008 	.word	0x40010008
    e538:	400100e8 	.word	0x400100e8
    e53c:	40010040 	.word	0x40010040
    e540:	40010004 	.word	0x40010004
    e544:	400100e4 	.word	0x400100e4
    e548:	40010058 	.word	0x40010058

0000e54c <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    e54c:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    e54e:	4b17      	ldr	r3, [pc, #92]	; (e5ac <am_bsp_debug_printf_enable+0x60>)
    e550:	681c      	ldr	r4, [r3, #0]
    e552:	f014 0401 	ands.w	r4, r4, #1
{
    e556:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    e558:	d001      	beq.n	e55e <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    e55a:	b007      	add	sp, #28
    e55c:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    e55e:	4a14      	ldr	r2, [pc, #80]	; (e5b0 <am_bsp_debug_printf_enable+0x64>)
    e560:	4914      	ldr	r1, [pc, #80]	; (e5b4 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    e562:	4d15      	ldr	r5, [pc, #84]	; (e5b8 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    e564:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    e566:	a806      	add	r0, sp, #24
    e568:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    e56c:	f002 ff18 	bl	113a0 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    e570:	f000 fb68 	bl	ec44 <am_hal_interrupt_master_disable>
    e574:	4a11      	ldr	r2, [pc, #68]	; (e5bc <am_bsp_debug_printf_enable+0x70>)
    e576:	9000      	str	r0, [sp, #0]
    e578:	4d11      	ldr	r5, [pc, #68]	; (e5c0 <am_bsp_debug_printf_enable+0x74>)
    e57a:	4912      	ldr	r1, [pc, #72]	; (e5c4 <am_bsp_debug_printf_enable+0x78>)
    e57c:	2073      	movs	r0, #115	; 0x73
    e57e:	6010      	str	r0, [r2, #0]
    e580:	682b      	ldr	r3, [r5, #0]
    e582:	4811      	ldr	r0, [pc, #68]	; (e5c8 <am_bsp_debug_printf_enable+0x7c>)
    e584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    e588:	602b      	str	r3, [r5, #0]
    e58a:	6805      	ldr	r5, [r0, #0]
    e58c:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    e590:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    e594:	6003      	str	r3, [r0, #0]
    e596:	6808      	ldr	r0, [r1, #0]
    e598:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    e59c:	600d      	str	r5, [r1, #0]
    e59e:	6014      	str	r4, [r2, #0]
    e5a0:	9800      	ldr	r0, [sp, #0]
    e5a2:	f000 fb53 	bl	ec4c <am_hal_interrupt_master_set>
}
    e5a6:	b007      	add	sp, #28
    e5a8:	bd30      	pop	{r4, r5, pc}
    e5aa:	bf00      	nop
    e5ac:	100025f8 	.word	0x100025f8
    e5b0:	e0000e80 	.word	0xe0000e80
    e5b4:	00150511 	.word	0x00150511
    e5b8:	000f4240 	.word	0x000f4240
    e5bc:	40010060 	.word	0x40010060
    e5c0:	40010054 	.word	0x40010054
    e5c4:	40010108 	.word	0x40010108
    e5c8:	40010028 	.word	0x40010028

0000e5cc <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    e5cc:	f002 bcce 	b.w	10f6c <am_hal_itm_print>

0000e5d0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    e5d0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    e5d2:	4604      	mov	r4, r0
    e5d4:	b120      	cbz	r0, e5e0 <am_hal_clkgen_sysclk_select+0x10>
    e5d6:	4a06      	ldr	r2, [pc, #24]	; (e5f0 <am_hal_clkgen_sysclk_select+0x20>)
    e5d8:	4806      	ldr	r0, [pc, #24]	; (e5f4 <am_hal_clkgen_sysclk_select+0x24>)
    e5da:	2153      	movs	r1, #83	; 0x53
    e5dc:	f000 f9e6 	bl	e9ac <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    e5e0:	4b05      	ldr	r3, [pc, #20]	; (e5f8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    e5e2:	4906      	ldr	r1, [pc, #24]	; (e5fc <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    e5e4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    e5e6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    e5e8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    e5ea:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    e5ec:	601a      	str	r2, [r3, #0]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	00014814 	.word	0x00014814
    e5f4:	0001484c 	.word	0x0001484c
    e5f8:	40004014 	.word	0x40004014
    e5fc:	40004018 	.word	0x40004018

0000e600 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    e600:	4b04      	ldr	r3, [pc, #16]	; (e614 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    e602:	4905      	ldr	r1, [pc, #20]	; (e618 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    e604:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    e606:	4805      	ldr	r0, [pc, #20]	; (e61c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    e608:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    e60c:	bf08      	it	eq
    e60e:	4608      	moveq	r0, r1
    e610:	4770      	bx	lr
    e612:	bf00      	nop
    e614:	40004018 	.word	0x40004018
    e618:	02dc6c00 	.word	0x02dc6c00
    e61c:	016e3600 	.word	0x016e3600

0000e620 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    e620:	0783      	lsls	r3, r0, #30
    e622:	d004      	beq.n	e62e <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    e624:	4a02      	ldr	r2, [pc, #8]	; (e630 <am_hal_clkgen_osc_start+0x10>)
    e626:	6813      	ldr	r3, [r2, #0]
    e628:	ea23 0000 	bic.w	r0, r3, r0
    e62c:	6010      	str	r0, [r2, #0]
    e62e:	4770      	bx	lr
    e630:	4000400c 	.word	0x4000400c

0000e634 <am_hal_clkgen_clkout_enable>:
am_hal_clkgen_clkout_enable(uint32_t ui32Signal)
{
    //
    // Enable the clock out on desired signal.
    //
    AM_REG(CLKGEN, CLKOUT) = AM_REG_CLKGEN_CLKOUT_CKEN_M | ui32Signal;
    e634:	4b02      	ldr	r3, [pc, #8]	; (e640 <am_hal_clkgen_clkout_enable+0xc>)
    e636:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    e63a:	6018      	str	r0, [r3, #0]
    e63c:	4770      	bx	lr
    e63e:	bf00      	nop
    e640:	40004010 	.word	0x40004010

0000e644 <back2back_reads>:
void
back2back_reads(uint32_t u32TimerAddr, uint32_t u32Data[])
{
    // u32TimerAddr = address of the timer to be read.
    // u32Data[] is a pointer to a 3 word data array provided by the caller.
    __asm
    e644:	b410      	push	{r4}
    e646:	b402      	push	{r1}
    e648:	4602      	mov	r2, r0
    e64a:	f3ef 8410 	mrs	r4, PRIMASK
    e64e:	b672      	cpsid	i
    e650:	bf00      	nop
    e652:	6810      	ldr	r0, [r2, #0]
    e654:	6811      	ldr	r1, [r2, #0]
    e656:	6813      	ldr	r3, [r2, #0]
    e658:	f384 8810 	msr	PRIMASK, r4
    e65c:	bc04      	pop	{r2}
    e65e:	6010      	str	r0, [r2, #0]
    e660:	6051      	str	r1, [r2, #4]
    e662:	6093      	str	r3, [r2, #8]
    e664:	bc10      	pop	{r4}
    e666:	4770      	bx	lr

0000e668 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    e668:	b5f0      	push	{r4, r5, r6, r7, lr}
    e66a:	b083      	sub	sp, #12
    e66c:	460d      	mov	r5, r1
    e66e:	4614      	mov	r4, r2

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e670:	0107      	lsls	r7, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    e672:	f000 fae7 	bl	ec44 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e676:	4e33      	ldr	r6, [pc, #204]	; (e744 <am_hal_ctimer_config_single+0xdc>)
    AM_CRITICAL_BEGIN_ASM
    e678:	9001      	str	r0, [sp, #4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e67a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    e67e:	59ba      	ldr	r2, [r7, r6]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e680:	d05b      	beq.n	e73a <am_hal_ctimer_config_single+0xd2>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    e682:	ea22 0005 	bic.w	r0, r2, r5
    e686:	4320      	orrs	r0, r4

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    e688:	3501      	adds	r5, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    e68a:	bf08      	it	eq
    e68c:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    e690:	51b8      	str	r0, [r7, r6]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    e692:	4b2d      	ldr	r3, [pc, #180]	; (e748 <am_hal_ctimer_config_single+0xe0>)
    e694:	681d      	ldr	r5, [r3, #0]
    e696:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    e69a:	f10c 34ff 	add.w	r4, ip, #4294967295
    e69e:	2c01      	cmp	r4, #1
    e6a0:	d941      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    e6a2:	4f28      	ldr	r7, [pc, #160]	; (e744 <am_hal_ctimer_config_single+0xdc>)
    e6a4:	683e      	ldr	r6, [r7, #0]
    e6a6:	f3c6 0e44 	ubfx	lr, r6, #1, #5
    e6aa:	f10e 32ff 	add.w	r2, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6ae:	f3c6 4044 	ubfx	r0, r6, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6b2:	2a04      	cmp	r2, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6b4:	f100 31ff 	add.w	r1, r0, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6b8:	d935      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    e6ba:	2904      	cmp	r1, #4
    e6bc:	d933      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    e6be:	4b23      	ldr	r3, [pc, #140]	; (e74c <am_hal_ctimer_config_single+0xe4>)
    e6c0:	681d      	ldr	r5, [r3, #0]
    e6c2:	f3c5 0c44 	ubfx	ip, r5, #1, #5
    e6c6:	f10c 34ff 	add.w	r4, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6ca:	f3c5 4744 	ubfx	r7, r5, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6ce:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6d0:	f107 36ff 	add.w	r6, r7, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6d4:	d927      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    e6d6:	2e04      	cmp	r6, #4
    e6d8:	d925      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    e6da:	4a1d      	ldr	r2, [pc, #116]	; (e750 <am_hal_ctimer_config_single+0xe8>)
    e6dc:	6810      	ldr	r0, [r2, #0]
    e6de:	f3c0 0e44 	ubfx	lr, r0, #1, #5
    e6e2:	f10e 31ff 	add.w	r1, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6e6:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6ea:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e6ec:	f103 35ff 	add.w	r5, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e6f0:	d919      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    e6f2:	2d04      	cmp	r5, #4
    e6f4:	d917      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    e6f6:	4c17      	ldr	r4, [pc, #92]	; (e754 <am_hal_ctimer_config_single+0xec>)
    e6f8:	6827      	ldr	r7, [r4, #0]
    e6fa:	f3c7 0c44 	ubfx	ip, r7, #1, #5
    e6fe:	f10c 36ff 	add.w	r6, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e702:	f3c7 4244 	ubfx	r2, r7, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e706:	2e04      	cmp	r6, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    e708:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    e70c:	d90b      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    e70e:	2804      	cmp	r0, #4
    e710:	d909      	bls.n	e726 <am_hal_ctimer_config_single+0xbe>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    e712:	4911      	ldr	r1, [pc, #68]	; (e758 <am_hal_ctimer_config_single+0xf0>)
    e714:	680b      	ldr	r3, [r1, #0]
    e716:	f043 0504 	orr.w	r5, r3, #4
    e71a:	600d      	str	r5, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e71c:	9801      	ldr	r0, [sp, #4]
    e71e:	f000 fa95 	bl	ec4c <am_hal_interrupt_master_set>

} // am_hal_ctimer_config_single()
    e722:	b003      	add	sp, #12
    e724:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    e726:	4c0c      	ldr	r4, [pc, #48]	; (e758 <am_hal_ctimer_config_single+0xf0>)
    e728:	6827      	ldr	r7, [r4, #0]
    e72a:	f027 0604 	bic.w	r6, r7, #4
    e72e:	6026      	str	r6, [r4, #0]
    AM_CRITICAL_END_ASM
    e730:	9801      	ldr	r0, [sp, #4]
    e732:	f000 fa8b 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_config_single()
    e736:	b003      	add	sp, #12
    e738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    e73a:	b291      	uxth	r1, r2
    e73c:	ea41 4004 	orr.w	r0, r1, r4, lsl #16
    e740:	e7a6      	b.n	e690 <am_hal_ctimer_config_single+0x28>
    e742:	bf00      	nop
    e744:	4000800c 	.word	0x4000800c
    e748:	40008100 	.word	0x40008100
    e74c:	4000801c 	.word	0x4000801c
    e750:	4000802c 	.word	0x4000802c
    e754:	4000803c 	.word	0x4000803c
    e758:	40021020 	.word	0x40021020

0000e75c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e75c:	b570      	push	{r4, r5, r6, lr}
    e75e:	b082      	sub	sp, #8
    e760:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e762:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    e764:	f000 fa6e 	bl	ec44 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e768:	4d07      	ldr	r5, [pc, #28]	; (e788 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    e76a:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    e76c:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    e76e:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    e772:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    e776:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    e77a:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    e77c:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e77e:	9801      	ldr	r0, [sp, #4]
    e780:	f000 fa64 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    e784:	b002      	add	sp, #8
    e786:	bd70      	pop	{r4, r5, r6, pc}
    e788:	4000800c 	.word	0x4000800c

0000e78c <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e78c:	b570      	push	{r4, r5, r6, lr}
    e78e:	b082      	sub	sp, #8

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e790:	0106      	lsls	r6, r0, #4
{
    e792:	460c      	mov	r4, r1

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    e794:	f000 fa56 	bl	ec44 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e798:	4d06      	ldr	r5, [pc, #24]	; (e7b4 <am_hal_ctimer_stop+0x28>)
    AM_CRITICAL_BEGIN_ASM
    e79a:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    e79c:	5973      	ldr	r3, [r6, r5]
    e79e:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e7a2:	ea23 0001 	bic.w	r0, r3, r1
    e7a6:	5170      	str	r0, [r6, r5]
                                    AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e7a8:	9801      	ldr	r0, [sp, #4]
    e7aa:	f000 fa4f 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_stop()
    e7ae:	b002      	add	sp, #8
    e7b0:	bd70      	pop	{r4, r5, r6, pc}
    e7b2:	bf00      	nop
    e7b4:	4000800c 	.word	0x4000800c

0000e7b8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e7b8:	b570      	push	{r4, r5, r6, lr}
    e7ba:	b082      	sub	sp, #8
    e7bc:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e7be:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    e7c0:	f000 fa40 	bl	ec44 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e7c4:	4d05      	ldr	r5, [pc, #20]	; (e7dc <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    e7c6:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    e7c8:	5971      	ldr	r1, [r6, r5]
    e7ca:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    e7ce:	4308      	orrs	r0, r1
    e7d0:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e7d2:	9801      	ldr	r0, [sp, #4]
    e7d4:	f000 fa3a 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    e7d8:	b002      	add	sp, #8
    e7da:	bd70      	pop	{r4, r5, r6, pc}
    e7dc:	4000800c 	.word	0x4000800c

0000e7e0 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e7e0:	b530      	push	{r4, r5, lr}
    volatile uint32_t ui32Value = 0;
    uint32_t ui32Values[4] = {0, };
    uint32_t ui32TimerAddrTbl[4] =
    e7e2:	4b29      	ldr	r3, [pc, #164]	; (e888 <am_hal_ctimer_read+0xa8>)
{
    e7e4:	4604      	mov	r4, r0
    e7e6:	460d      	mov	r5, r1
    uint32_t ui32TimerAddrTbl[4] =
    e7e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    e7ea:	b08b      	sub	sp, #44	; 0x2c
    uint32_t ui32TimerAddrTbl[4] =
    e7ec:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    e7f0:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    // to increment once, and that only one of the three reads can be wrong.
    // This routine will perform the back-to-back reads and return all three
    // values. The rest of this fuction determines which value we should
    // actually use.
    //
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], ui32Values);
    e7f4:	eb0e 0084 	add.w	r0, lr, r4, lsl #2
    volatile uint32_t ui32Value = 0;
    e7f8:	2200      	movs	r2, #0
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], ui32Values);
    e7fa:	f850 0c10 	ldr.w	r0, [r0, #-16]
    uint32_t ui32Values[4] = {0, };
    e7fe:	9203      	str	r2, [sp, #12]
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], ui32Values);
    e800:	a902      	add	r1, sp, #8
    volatile uint32_t ui32Value = 0;
    e802:	9201      	str	r2, [sp, #4]
    uint32_t ui32Values[4] = {0, };
    e804:	9202      	str	r2, [sp, #8]
    e806:	9204      	str	r2, [sp, #16]
    e808:	9205      	str	r2, [sp, #20]
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], ui32Values);
    e80a:	f7ff ff1b 	bl	e644 <back2back_reads>

    //
    // Shift or mask the values based on the given timer segment.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e80e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    e812:	d017      	beq.n	e844 <am_hal_ctimer_read+0x64>
    {
        ui32Values[0] >>= 16;
        ui32Values[1] >>= 16;
        ui32Values[2] >>= 16;
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e818:	428d      	cmp	r5, r1
    e81a:	d022      	beq.n	e862 <am_hal_ctimer_read+0x82>
    e81c:	9c02      	ldr	r4, [sp, #8]
    e81e:	9b03      	ldr	r3, [sp, #12]
    }

    //
    // Now, we'll figure out which of the three values is the correct time.
    //
    if (ui32Values[0] == ui32Values[1])
    e820:	429c      	cmp	r4, r3
    e822:	d01a      	beq.n	e85a <am_hal_ctimer_read+0x7a>
        //
        // If the first two values didn't match, then one of them might be bad.
        // If one of the first two values is bad, then the third one should
        // always be correct. We'll take the third value as the correct time.
        //
        ui32Value = ui32Values[2];
    e824:	9a04      	ldr	r2, [sp, #16]
    e826:	9201      	str	r2, [sp, #4]
        // flag it as a "bad read", and fail this assert statement.
        //
        // This shouldn't ever happen, and it hasn't ever happened in any of
        // our tests so far.
        //
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    e828:	429a      	cmp	r2, r3
    e82a:	d008      	beq.n	e83e <am_hal_ctimer_read+0x5e>
    e82c:	3301      	adds	r3, #1
    e82e:	429a      	cmp	r2, r3
    e830:	d005      	beq.n	e83e <am_hal_ctimer_read+0x5e>
    e832:	42a2      	cmp	r2, r4
    e834:	d003      	beq.n	e83e <am_hal_ctimer_read+0x5e>
    e836:	3401      	adds	r4, #1
    e838:	42a2      	cmp	r2, r4
    e83a:	d000      	beq.n	e83e <am_hal_ctimer_read+0x5e>
    e83c:	b9da      	cbnz	r2, e876 <am_hal_ctimer_read+0x96>
                                 adjacent(ui32Values[0], ui32Values[2])),
                                "Bad CTIMER read");
    }

    return ui32Value;
    e83e:	9801      	ldr	r0, [sp, #4]
} // am_hal_ctimer_read()
    e840:	b00b      	add	sp, #44	; 0x2c
    e842:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] >>= 16;
    e844:	f8bd 400a 	ldrh.w	r4, [sp, #10]
        ui32Values[1] >>= 16;
    e848:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        ui32Values[2] >>= 16;
    e84c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
        ui32Values[0] >>= 16;
    e850:	9402      	str	r4, [sp, #8]
    if (ui32Values[0] == ui32Values[1])
    e852:	429c      	cmp	r4, r3
        ui32Values[1] >>= 16;
    e854:	9303      	str	r3, [sp, #12]
        ui32Values[2] >>= 16;
    e856:	9004      	str	r0, [sp, #16]
    if (ui32Values[0] == ui32Values[1])
    e858:	d1e4      	bne.n	e824 <am_hal_ctimer_read+0x44>
        ui32Value = ui32Values[1];
    e85a:	9401      	str	r4, [sp, #4]
    return ui32Value;
    e85c:	9801      	ldr	r0, [sp, #4]
} // am_hal_ctimer_read()
    e85e:	b00b      	add	sp, #44	; 0x2c
    e860:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] &= 0xFFFF;
    e862:	f8bd 4008 	ldrh.w	r4, [sp, #8]
        ui32Values[1] &= 0xFFFF;
    e866:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        ui32Values[2] &= 0xFFFF;
    e86a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
        ui32Values[0] &= 0xFFFF;
    e86e:	9402      	str	r4, [sp, #8]
        ui32Values[1] &= 0xFFFF;
    e870:	9303      	str	r3, [sp, #12]
        ui32Values[2] &= 0xFFFF;
    e872:	9504      	str	r5, [sp, #16]
    e874:	e7d4      	b.n	e820 <am_hal_ctimer_read+0x40>
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    e876:	4a05      	ldr	r2, [pc, #20]	; (e88c <am_hal_ctimer_read+0xac>)
    e878:	4805      	ldr	r0, [pc, #20]	; (e890 <am_hal_ctimer_read+0xb0>)
    e87a:	f240 31a7 	movw	r1, #935	; 0x3a7
    e87e:	f000 f895 	bl	e9ac <am_hal_debug_error>
    return ui32Value;
    e882:	9801      	ldr	r0, [sp, #4]
} // am_hal_ctimer_read()
    e884:	b00b      	add	sp, #44	; 0x2c
    e886:	bd30      	pop	{r4, r5, pc}
    e888:	0001215c 	.word	0x0001215c
    e88c:	000148a4 	.word	0x000148a4
    e890:	0001488c 	.word	0x0001488c

0000e894 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    e894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e898:	b082      	sub	sp, #8
    e89a:	4688      	mov	r8, r1
    e89c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    e89e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    e8a2:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    e8a4:	f000 f9ce 	bl	ec44 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e8a8:	f8df a098 	ldr.w	sl, [pc, #152]	; e944 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    e8ac:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e8ae:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    e8b2:	4d21      	ldr	r5, [pc, #132]	; (e938 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    e8b4:	4e21      	ldr	r6, [pc, #132]	; (e93c <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    e8b6:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e8ba:	d01b      	beq.n	e8f4 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e8bc:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    e8c0:	2880      	cmp	r0, #128	; 0x80
    e8c2:	d01c      	beq.n	e8fe <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e8c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e8c8:	2300      	movs	r3, #0
    e8ca:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    e8cc:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e8ce:	d01d      	beq.n	e90c <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e8d0:	491b      	ldr	r1, [pc, #108]	; (e940 <am_hal_ctimer_period_set+0xac>)
    e8d2:	4588      	cmp	r8, r1
    e8d4:	d025      	beq.n	e922 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    e8d6:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e8d8:	b2a0      	uxth	r0, r4
    e8da:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    e8dc:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e8e0:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    e8e4:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e8e8:	9801      	ldr	r0, [sp, #4]
    e8ea:	f000 f9af 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    e8ee:	b002      	add	sp, #8
    e8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    e8f4:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e8f6:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    e8fa:	2880      	cmp	r0, #128	; 0x80
    e8fc:	d110      	bne.n	e920 <am_hal_ctimer_period_set+0x8c>
    e8fe:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    e900:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    e902:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e904:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e908:	45b8      	cmp	r8, r7
    e90a:	d1e1      	bne.n	e8d0 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e90c:	b2a6      	uxth	r6, r4
    e90e:	4333      	orrs	r3, r6
    e910:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    e914:	9801      	ldr	r0, [sp, #4]
    e916:	f000 f999 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    e91a:	b002      	add	sp, #8
    e91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e920:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e922:	b2a5      	uxth	r5, r4
    e924:	432b      	orrs	r3, r5
    e926:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    e92a:	9801      	ldr	r0, [sp, #4]
    e92c:	f000 f98e 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    e930:	b002      	add	sp, #8
    e932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e936:	bf00      	nop
    e938:	40008004 	.word	0x40008004
    e93c:	40008008 	.word	0x40008008
    e940:	ffff0000 	.word	0xffff0000
    e944:	4000800c 	.word	0x4000800c

0000e948 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    e948:	b510      	push	{r4, lr}
    e94a:	b082      	sub	sp, #8
    e94c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    e94e:	f000 f979 	bl	ec44 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    e952:	4b05      	ldr	r3, [pc, #20]	; (e968 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    e954:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    e956:	6818      	ldr	r0, [r3, #0]
    e958:	4320      	orrs	r0, r4
    e95a:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    e95c:	9801      	ldr	r0, [sp, #4]
    e95e:	f000 f975 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    e962:	b002      	add	sp, #8
    e964:	bd10      	pop	{r4, pc}
    e966:	bf00      	nop
    e968:	40008200 	.word	0x40008200

0000e96c <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    e96c:	4b01      	ldr	r3, [pc, #4]	; (e974 <am_hal_ctimer_int_clear+0x8>)
    e96e:	6018      	str	r0, [r3, #0]
    e970:	4770      	bx	lr
    e972:	bf00      	nop
    e974:	40008208 	.word	0x40008208

0000e978 <am_hal_ctimer_int_status_get>:
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    e978:	b510      	push	{r4, lr}
    e97a:	b082      	sub	sp, #8
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    e97c:	b920      	cbnz	r0, e988 <am_hal_ctimer_int_status_get+0x10>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    e97e:	4b09      	ldr	r3, [pc, #36]	; (e9a4 <am_hal_ctimer_int_status_get+0x2c>)
    e980:	681c      	ldr	r4, [r3, #0]
    }
} // am_hal_ctimer_int_status_get()
    e982:	4620      	mov	r0, r4
    e984:	b002      	add	sp, #8
    e986:	bd10      	pop	{r4, pc}
        AM_CRITICAL_BEGIN_ASM
    e988:	f000 f95c 	bl	ec44 <am_hal_interrupt_master_disable>
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    e98c:	4a05      	ldr	r2, [pc, #20]	; (e9a4 <am_hal_ctimer_int_status_get+0x2c>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    e98e:	4906      	ldr	r1, [pc, #24]	; (e9a8 <am_hal_ctimer_int_status_get+0x30>)
        AM_CRITICAL_BEGIN_ASM
    e990:	9001      	str	r0, [sp, #4]
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    e992:	6814      	ldr	r4, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    e994:	680b      	ldr	r3, [r1, #0]
        AM_CRITICAL_END_ASM
    e996:	9801      	ldr	r0, [sp, #4]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    e998:	401c      	ands	r4, r3
        AM_CRITICAL_END_ASM
    e99a:	f000 f957 	bl	ec4c <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_status_get()
    e99e:	4620      	mov	r0, r4
    e9a0:	b002      	add	sp, #8
    e9a2:	bd10      	pop	{r4, pc}
    e9a4:	40008204 	.word	0x40008204
    e9a8:	40008200 	.word	0x40008200

0000e9ac <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    e9ac:	e7fe      	b.n	e9ac <am_hal_debug_error>
    e9ae:	bf00      	nop

0000e9b0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    e9b0:	4b00      	ldr	r3, [pc, #0]	; (e9b4 <am_hal_flash_delay+0x4>)
    e9b2:	4718      	bx	r3
    e9b4:	0800009d 	.word	0x0800009d

0000e9b8 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    e9b8:	2800      	cmp	r0, #0
    e9ba:	f000 809a 	beq.w	eaf2 <am_hal_flash_delay_status_change+0x13a>
{
    e9be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e9c2:	1e44      	subs	r4, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e9c4:	6808      	ldr	r0, [r1, #0]
    e9c6:	4010      	ands	r0, r2
    e9c8:	4283      	cmp	r3, r0
    e9ca:	f000 808c 	beq.w	eae6 <am_hal_flash_delay_status_change+0x12e>
    e9ce:	f014 0907 	ands.w	r9, r4, #7
    e9d2:	461d      	mov	r5, r3
    e9d4:	4616      	mov	r6, r2
    e9d6:	460f      	mov	r7, r1
    g_am_hal_flash.delay_cycles(ui32Iterations);
    e9d8:	f8df 811c 	ldr.w	r8, [pc, #284]	; eaf8 <am_hal_flash_delay_status_change+0x140>
    e9dc:	d049      	beq.n	ea72 <am_hal_flash_delay_status_change+0xba>
    e9de:	200c      	movs	r0, #12
    e9e0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e9e2:	683b      	ldr	r3, [r7, #0]
    e9e4:	4033      	ands	r3, r6
    e9e6:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    e9e8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e9ec:	d07b      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    e9ee:	f1b9 0f01 	cmp.w	r9, #1
    e9f2:	d03e      	beq.n	ea72 <am_hal_flash_delay_status_change+0xba>
    e9f4:	f1b9 0f02 	cmp.w	r9, #2
    e9f8:	d033      	beq.n	ea62 <am_hal_flash_delay_status_change+0xaa>
    e9fa:	f1b9 0f03 	cmp.w	r9, #3
    e9fe:	d028      	beq.n	ea52 <am_hal_flash_delay_status_change+0x9a>
    ea00:	f1b9 0f04 	cmp.w	r9, #4
    ea04:	d01d      	beq.n	ea42 <am_hal_flash_delay_status_change+0x8a>
    ea06:	f1b9 0f05 	cmp.w	r9, #5
    ea0a:	d012      	beq.n	ea32 <am_hal_flash_delay_status_change+0x7a>
    ea0c:	f1b9 0f06 	cmp.w	r9, #6
    ea10:	d007      	beq.n	ea22 <am_hal_flash_delay_status_change+0x6a>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea12:	200c      	movs	r0, #12
    ea14:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea16:	6839      	ldr	r1, [r7, #0]
    ea18:	4031      	ands	r1, r6
    ea1a:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    ea1c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea20:	d061      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea22:	200c      	movs	r0, #12
    ea24:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea26:	683a      	ldr	r2, [r7, #0]
    ea28:	4032      	ands	r2, r6
    ea2a:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    ea2c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea30:	d059      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea32:	200c      	movs	r0, #12
    ea34:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea36:	6838      	ldr	r0, [r7, #0]
    ea38:	4030      	ands	r0, r6
    ea3a:	42a8      	cmp	r0, r5
    while ( ui32usMaxDelay-- )
    ea3c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea40:	d051      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea42:	200c      	movs	r0, #12
    ea44:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea46:	683b      	ldr	r3, [r7, #0]
    ea48:	4033      	ands	r3, r6
    ea4a:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    ea4c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea50:	d049      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea52:	200c      	movs	r0, #12
    ea54:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea56:	6839      	ldr	r1, [r7, #0]
    ea58:	4031      	ands	r1, r6
    ea5a:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    ea5c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea60:	d041      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea62:	200c      	movs	r0, #12
    ea64:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea66:	683a      	ldr	r2, [r7, #0]
    ea68:	4032      	ands	r2, r6
    ea6a:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    ea6c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea70:	d039      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea72:	200c      	movs	r0, #12
    ea74:	47c0      	blx	r8
    ea76:	200c      	movs	r0, #12
    while ( ui32usMaxDelay-- )
    ea78:	2c00      	cmp	r4, #0
    ea7a:	d037      	beq.n	eaec <am_hal_flash_delay_status_change+0x134>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea7c:	683b      	ldr	r3, [r7, #0]
    ea7e:	4033      	ands	r3, r6
    ea80:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    ea82:	f1a4 0408 	sub.w	r4, r4, #8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea86:	d02e      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea88:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea8a:	6839      	ldr	r1, [r7, #0]
    ea8c:	4031      	ands	r1, r6
    ea8e:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea90:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea94:	d027      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea96:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ea98:	683a      	ldr	r2, [r7, #0]
    ea9a:	4032      	ands	r2, r6
    ea9c:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ea9e:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eaa2:	d020      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eaa4:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eaa6:	683b      	ldr	r3, [r7, #0]
    eaa8:	4033      	ands	r3, r6
    eaaa:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eaac:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eab0:	d019      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eab2:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eab4:	6839      	ldr	r1, [r7, #0]
    eab6:	4031      	ands	r1, r6
    eab8:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eaba:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eabe:	d012      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eac0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eac2:	683a      	ldr	r2, [r7, #0]
    eac4:	4032      	ands	r2, r6
    eac6:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eac8:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eacc:	d00b      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eace:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ead0:	683b      	ldr	r3, [r7, #0]
    ead2:	4033      	ands	r3, r6
    ead4:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    ead6:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eada:	d004      	beq.n	eae6 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    eadc:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eade:	6838      	ldr	r0, [r7, #0]
    eae0:	4030      	ands	r0, r6
    eae2:	42a8      	cmp	r0, r5
    eae4:	d1c5      	bne.n	ea72 <am_hal_flash_delay_status_change+0xba>
        {
            return 1;
    eae6:	2001      	movs	r0, #1
    eae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
    eaec:	2000      	movs	r0, #0
    eaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eaf2:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    eaf4:	4770      	bx	lr
    eaf6:	bf00      	nop
    eaf8:	0800009d 	.word	0x0800009d

0000eafc <am_hal_gpio_input_read>:
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    uint64_t ui64RetVal;

    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    eafc:	4a05      	ldr	r2, [pc, #20]	; (eb14 <am_hal_gpio_input_read+0x18>)
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    eafe:	4b06      	ldr	r3, [pc, #24]	; (eb18 <am_hal_gpio_input_read+0x1c>)
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    eb00:	6811      	ldr	r1, [r2, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    eb02:	6818      	ldr	r0, [r3, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    eb04:	2200      	movs	r2, #0
    eb06:	460b      	mov	r3, r1

    return ui64RetVal;
}
    eb08:	ea42 0200 	orr.w	r2, r2, r0
    eb0c:	4610      	mov	r0, r2
    eb0e:	4619      	mov	r1, r3
    eb10:	4770      	bx	lr
    eb12:	bf00      	nop
    eb14:	40010084 	.word	0x40010084
    eb18:	40010080 	.word	0x40010080

0000eb1c <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    eb1c:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    eb1e:	4c05      	ldr	r4, [pc, #20]	; (eb34 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    eb20:	4a05      	ldr	r2, [pc, #20]	; (eb38 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    eb22:	6823      	ldr	r3, [r4, #0]
    eb24:	4319      	orrs	r1, r3
    eb26:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    eb28:	6811      	ldr	r1, [r2, #0]
}
    eb2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    eb2e:	4308      	orrs	r0, r1
    eb30:	6010      	str	r0, [r2, #0]
}
    eb32:	4770      	bx	lr
    eb34:	40010210 	.word	0x40010210
    eb38:	40010200 	.word	0x40010200

0000eb3c <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    eb3c:	b570      	push	{r4, r5, r6, lr}
    eb3e:	b082      	sub	sp, #8
    eb40:	460e      	mov	r6, r1
    eb42:	4605      	mov	r5, r0
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    eb44:	f000 f87e 	bl	ec44 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    eb48:	4c07      	ldr	r4, [pc, #28]	; (eb68 <am_hal_gpio_int_disable+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    eb4a:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    eb4c:	6823      	ldr	r3, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    eb4e:	4a07      	ldr	r2, [pc, #28]	; (eb6c <am_hal_gpio_int_disable+0x30>)
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    eb50:	ea23 0006 	bic.w	r0, r3, r6
    eb54:	6020      	str	r0, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    eb56:	6811      	ldr	r1, [r2, #0]
    eb58:	ea21 0505 	bic.w	r5, r1, r5
    eb5c:	6015      	str	r5, [r2, #0]
    AM_CRITICAL_END_ASM
    eb5e:	9801      	ldr	r0, [sp, #4]
    eb60:	f000 f874 	bl	ec4c <am_hal_interrupt_master_set>
}
    eb64:	b002      	add	sp, #8
    eb66:	bd70      	pop	{r4, r5, r6, pc}
    eb68:	40010210 	.word	0x40010210
    eb6c:	40010200 	.word	0x40010200

0000eb70 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    eb70:	b530      	push	{r4, r5, lr}
    eb72:	b083      	sub	sp, #12
    eb74:	460d      	mov	r5, r1
    eb76:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    eb78:	f000 f864 	bl	ec44 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    eb7c:	4a04      	ldr	r2, [pc, #16]	; (eb90 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    eb7e:	4b05      	ldr	r3, [pc, #20]	; (eb94 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    eb80:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    eb82:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    eb84:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
    eb86:	9801      	ldr	r0, [sp, #4]
    eb88:	f000 f860 	bl	ec4c <am_hal_interrupt_master_set>
}
    eb8c:	b003      	add	sp, #12
    eb8e:	bd30      	pop	{r4, r5, pc}
    eb90:	40010218 	.word	0x40010218
    eb94:	40010208 	.word	0x40010208

0000eb98 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    eb98:	b570      	push	{r4, r5, r6, lr}
    eb9a:	b082      	sub	sp, #8
    eb9c:	4606      	mov	r6, r0
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    eb9e:	f000 f851 	bl	ec44 <am_hal_interrupt_master_disable>
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    eba2:	4b0f      	ldr	r3, [pc, #60]	; (ebe0 <am_hal_gpio_int_status_get+0x48>)
    AM_CRITICAL_BEGIN_ASM
    eba4:	9001      	str	r0, [sp, #4]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    eba6:	f1a3 0110 	sub.w	r1, r3, #16
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    ebaa:	681d      	ldr	r5, [r3, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    ebac:	680a      	ldr	r2, [r1, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    ebae:	2000      	movs	r0, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    ebb0:	ea40 0402 	orr.w	r4, r0, r2

    if ( bEnabledOnly )
    ebb4:	b176      	cbz	r6, ebd4 <am_hal_gpio_int_status_get+0x3c>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    ebb6:	490b      	ldr	r1, [pc, #44]	; (ebe4 <am_hal_gpio_int_status_get+0x4c>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    ebb8:	4a0b      	ldr	r2, [pc, #44]	; (ebe8 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    ebba:	680b      	ldr	r3, [r1, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    ebbc:	6811      	ldr	r1, [r2, #0]
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    ebbe:	4606      	mov	r6, r0
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    ebc0:	430e      	orrs	r6, r1
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
    ebc2:	9801      	ldr	r0, [sp, #4]
    ui64RetVal &= ui64Mask;
    ebc4:	401d      	ands	r5, r3
    AM_CRITICAL_END_ASM
    ebc6:	f000 f841 	bl	ec4c <am_hal_interrupt_master_set>
    ui64RetVal &= ui64Mask;
    ebca:	4034      	ands	r4, r6

    return ui64RetVal;
}
    ebcc:	4620      	mov	r0, r4
    ebce:	4629      	mov	r1, r5
    ebd0:	b002      	add	sp, #8
    ebd2:	bd70      	pop	{r4, r5, r6, pc}
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    ebd4:	f04f 36ff 	mov.w	r6, #4294967295
    ebd8:	f04f 33ff 	mov.w	r3, #4294967295
    ebdc:	e7f1      	b.n	ebc2 <am_hal_gpio_int_status_get+0x2a>
    ebde:	bf00      	nop
    ebe0:	40010214 	.word	0x40010214
    ebe4:	40010210 	.word	0x40010210
    ebe8:	40010200 	.word	0x40010200

0000ebec <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    ebec:	280f      	cmp	r0, #15
    ebee:	d80b      	bhi.n	ec08 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    ebf0:	2805      	cmp	r0, #5
    ebf2:	d013      	beq.n	ec1c <am_hal_interrupt_enable+0x30>
    ebf4:	2806      	cmp	r0, #6
    ebf6:	d017      	beq.n	ec28 <am_hal_interrupt_enable+0x3c>
    ebf8:	2804      	cmp	r0, #4
    ebfa:	d104      	bne.n	ec06 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    ebfc:	4a0d      	ldr	r2, [pc, #52]	; (ec34 <am_hal_interrupt_enable+0x48>)
    ebfe:	6813      	ldr	r3, [r2, #0]
    ec00:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    ec04:	6010      	str	r0, [r2, #0]
    ec06:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    ec08:	f1a0 0310 	sub.w	r3, r0, #16
    ec0c:	f003 0c1f 	and.w	ip, r3, #31
    ec10:	2001      	movs	r0, #1
    ec12:	4909      	ldr	r1, [pc, #36]	; (ec38 <am_hal_interrupt_enable+0x4c>)
    ec14:	fa00 f20c 	lsl.w	r2, r0, ip
    ec18:	600a      	str	r2, [r1, #0]
    ec1a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    ec1c:	4805      	ldr	r0, [pc, #20]	; (ec34 <am_hal_interrupt_enable+0x48>)
    ec1e:	6801      	ldr	r1, [r0, #0]
    ec20:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    ec24:	6002      	str	r2, [r0, #0]
            break;
    ec26:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    ec28:	4902      	ldr	r1, [pc, #8]	; (ec34 <am_hal_interrupt_enable+0x48>)
    ec2a:	680a      	ldr	r2, [r1, #0]
    ec2c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    ec30:	600b      	str	r3, [r1, #0]
            break;
    ec32:	4770      	bx	lr
    ec34:	e000ed24 	.word	0xe000ed24
    ec38:	e000e100 	.word	0xe000e100

0000ec3c <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    ec3c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    ec40:	b662      	cpsie	i
    __asm("    bx lr");
    ec42:	4770      	bx	lr

0000ec44 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    ec44:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    ec48:	b672      	cpsid	i
    __asm("    bx lr");
    ec4a:	4770      	bx	lr

0000ec4c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    ec4c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    ec50:	4770      	bx	lr
    ec52:	bf00      	nop

0000ec54 <iom_workaround_loop>:
                    bool bRising)
{
    //
    // Check to see if this is a "rising edge" or "falling edge" detector.
    //
    __asm("    cbz      r2, falling_edge");
    ec54:	b132      	cbz	r2, ec64 <falling_edge>

0000ec56 <rising_edge>:

    //
    // Read GPIO pin 44, and loop until it's HIGH.
    //
    __asm("rising_edge:");
    __asm("    ldr      r2, =0x40010084");
    ec56:	4a07      	ldr	r2, [pc, #28]	; (ec74 <falling_check_mosi+0xe>)

0000ec58 <rising_check_mosi>:
    __asm("rising_check_mosi:");
    __asm("    ldr      r3, [r2]");
    ec58:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    ec5a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    beq      rising_check_mosi");
    ec5e:	d0fb      	beq.n	ec58 <rising_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    ec60:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    ec62:	4770      	bx	lr

0000ec64 <falling_edge>:

    //
    // Read GPIO pin 44, and loop until it's LOW.
    //
    __asm("falling_edge:");
    __asm("    ldr      r2, =0x40010084");
    ec64:	4a03      	ldr	r2, [pc, #12]	; (ec74 <falling_check_mosi+0xe>)

0000ec66 <falling_check_mosi>:
    __asm("falling_check_mosi:");
    __asm("    ldr      r3, [r2]");
    ec66:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    ec68:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    bne      falling_check_mosi");
    ec6c:	d1fb      	bne.n	ec66 <falling_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    ec6e:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    ec70:	4770      	bx	lr
    ec72:	0000      	.short	0x0000
    ec74:	40010084 	.word	0x40010084

0000ec78 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    ec78:	2805      	cmp	r0, #5
    ec7a:	d819      	bhi.n	ecb0 <am_hal_iom_sleeping_queue_flush+0x38>
{
    ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec7e:	4f0d      	ldr	r7, [pc, #52]	; (ecb4 <am_hal_iom_sleeping_queue_flush+0x3c>)
    ec80:	4e0d      	ldr	r6, [pc, #52]	; (ecb8 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    ec82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ec86:	4604      	mov	r4, r0
    ec88:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    ec8c:	f7ff ffda 	bl	ec44 <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    ec90:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    ec92:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    ec94:	b929      	cbnz	r1, eca2 <am_hal_iom_sleeping_queue_flush+0x2a>
    ec96:	68ba      	ldr	r2, [r7, #8]
    ec98:	b91a      	cbnz	r2, eca2 <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    ec9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    ec9e:	f7ff bfd5 	b.w	ec4c <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    eca2:	2000      	movs	r0, #0
    eca4:	f002 fade 	bl	11264 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    eca8:	4628      	mov	r0, r5
    ecaa:	f7ff ffcf 	bl	ec4c <am_hal_interrupt_master_set>
    ecae:	e7ed      	b.n	ec8c <am_hal_iom_sleeping_queue_flush+0x14>
    ecb0:	4770      	bx	lr
    ecb2:	bf00      	nop
    ecb4:	100029b8 	.word	0x100029b8
    ecb8:	100025fc 	.word	0x100025fc

0000ecbc <am_hal_iom_int_service.part.20>:
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    ecbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_iom_error_status[ui32Module] |= ui32Status;
    ecc0:	4da8      	ldr	r5, [pc, #672]	; (ef64 <am_hal_iom_int_service.part.20+0x2a8>)
    ecc2:	5c2b      	ldrb	r3, [r5, r0]
    ecc4:	430b      	orrs	r3, r1
    ecc6:	b2db      	uxtb	r3, r3
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    ecc8:	07ca      	lsls	r2, r1, #31
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    ecca:	b085      	sub	sp, #20
    eccc:	4604      	mov	r4, r0
    g_iom_error_status[ui32Module] |= ui32Status;
    ecce:	542b      	strb	r3, [r5, r0]
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    ecd0:	f140 8094 	bpl.w	edfc <am_hal_iom_int_service.part.20+0x140>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    ecd4:	0086      	lsls	r6, r0, #2
    ecd6:	1830      	adds	r0, r6, r0
    ecd8:	0082      	lsls	r2, r0, #2
    ecda:	4fa3      	ldr	r7, [pc, #652]	; (ef68 <am_hal_iom_int_service.part.20+0x2ac>)
        g_bIomBusy[ui32Module] = false;
    ecdc:	48a3      	ldr	r0, [pc, #652]	; (ef6c <am_hal_iom_int_service.part.20+0x2b0>)
        if ( psBuffer->ui32State == BUFFER_IDLE )
    ecde:	58b9      	ldr	r1, [r7, r2]
        g_bIomBusy[ui32Module] = false;
    ece0:	f04f 0e00 	mov.w	lr, #0
        if ( psBuffer->ui32State == BUFFER_IDLE )
    ece4:	443a      	add	r2, r7
        g_bIomBusy[ui32Module] = false;
    ece6:	f800 e004 	strb.w	lr, [r0, r4]
        if ( psBuffer->ui32State == BUFFER_IDLE )
    ecea:	2900      	cmp	r1, #0
    ecec:	f000 8083 	beq.w	edf6 <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ecf0:	f504 28a0 	add.w	r8, r4, #327680	; 0x50000
    ecf4:	f108 0004 	add.w	r0, r8, #4
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    ecf8:	2902      	cmp	r1, #2
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ecfa:	ea4f 3800 	mov.w	r8, r0, lsl #12
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    ecfe:	f000 81e3 	beq.w	f0c8 <am_hal_iom_int_service.part.20+0x40c>
        psBuffer->ui32State = BUFFER_IDLE;
    ed02:	1932      	adds	r2, r6, r4
    ed04:	0090      	lsls	r0, r2, #2
    ed06:	2100      	movs	r1, #0
    ed08:	5039      	str	r1, [r7, r0]
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    ed0a:	f8d8 2204 	ldr.w	r2, [r8, #516]	; 0x204
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);
    ed0e:	4313      	orrs	r3, r2
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    ed10:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    ed14:	f040 8098 	bne.w	ee48 <am_hal_iom_int_service.part.20+0x18c>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    ed18:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    ed1c:	f040 8096 	bne.w	ee4c <am_hal_iom_int_service.part.20+0x190>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    ed20:	f013 0f10 	tst.w	r3, #16
    ed24:	bf14      	ite	ne
    ed26:	2306      	movne	r3, #6
    ed28:	460b      	moveq	r3, r1
        if ( psBuffer->pfnCallback )
    ed2a:	4426      	add	r6, r4
    ed2c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
        g_iom_error_status[ui32Module] = internal_iom_get_int_err(ui32Module, g_iom_error_status[ui32Module]);
    ed30:	552b      	strb	r3, [r5, r4]
        if ( psBuffer->pfnCallback )
    ed32:	6930      	ldr	r0, [r6, #16]
    ed34:	2800      	cmp	r0, #0
    ed36:	d05e      	beq.n	edf6 <am_hal_iom_int_service.part.20+0x13a>
}
    ed38:	b005      	add	sp, #20
    ed3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            psBuffer->pfnCallback();
    ed3e:	4700      	bx	r0
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    ed40:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    ed44:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    ed48:	f8dc 5004 	ldr.w	r5, [ip, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    ed4c:	0719      	lsls	r1, r3, #28
    ed4e:	d40a      	bmi.n	ed66 <am_hal_iom_int_service.part.20+0xaa>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ed50:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    ed54:	b2f0      	uxtb	r0, r6
    ed56:	4284      	cmp	r4, r0
    ed58:	d905      	bls.n	ed66 <am_hal_iom_int_service.part.20+0xaa>
    ed5a:	4a85      	ldr	r2, [pc, #532]	; (ef70 <am_hal_iom_int_service.part.20+0x2b4>)
    ed5c:	4885      	ldr	r0, [pc, #532]	; (ef74 <am_hal_iom_int_service.part.20+0x2b8>)
    ed5e:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    ed62:	f7ff fe23 	bl	e9ac <am_hal_debug_error>
    for ( i = 0; i < ui32NumWords; i++ )
    ed66:	ea5f 0994 	movs.w	r9, r4, lsr #2
    ed6a:	f007 0203 	and.w	r2, r7, #3
    ed6e:	d038      	beq.n	ede2 <am_hal_iom_int_service.part.20+0x126>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ed70:	462f      	mov	r7, r5
    ed72:	f8d8 1000 	ldr.w	r1, [r8]
    ed76:	f847 1b04 	str.w	r1, [r7], #4
    ed7a:	eb05 0389 	add.w	r3, r5, r9, lsl #2
    ed7e:	1b5c      	subs	r4, r3, r5
    ed80:	1f26      	subs	r6, r4, #4
    for ( i = 0; i < ui32NumWords; i++ )
    ed82:	429f      	cmp	r7, r3
    ed84:	f3c6 0182 	ubfx	r1, r6, #2, #3
    ed88:	d02b      	beq.n	ede2 <am_hal_iom_int_service.part.20+0x126>
    ed8a:	2900      	cmp	r1, #0
    ed8c:	d060      	beq.n	ee50 <am_hal_iom_int_service.part.20+0x194>
    ed8e:	2901      	cmp	r1, #1
    ed90:	d021      	beq.n	edd6 <am_hal_iom_int_service.part.20+0x11a>
    ed92:	2902      	cmp	r1, #2
    ed94:	d01b      	beq.n	edce <am_hal_iom_int_service.part.20+0x112>
    ed96:	2903      	cmp	r1, #3
    ed98:	d015      	beq.n	edc6 <am_hal_iom_int_service.part.20+0x10a>
    ed9a:	2904      	cmp	r1, #4
    ed9c:	d00f      	beq.n	edbe <am_hal_iom_int_service.part.20+0x102>
    ed9e:	2905      	cmp	r1, #5
    eda0:	d009      	beq.n	edb6 <am_hal_iom_int_service.part.20+0xfa>
    eda2:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    eda4:	bf1c      	itt	ne
    eda6:	f8d8 1000 	ldrne.w	r1, [r8]
    edaa:	f847 1b04 	strne.w	r1, [r7], #4
    edae:	f8d8 4000 	ldr.w	r4, [r8]
    edb2:	f847 4b04 	str.w	r4, [r7], #4
    edb6:	f8d8 6000 	ldr.w	r6, [r8]
    edba:	f847 6b04 	str.w	r6, [r7], #4
    edbe:	f8d8 1000 	ldr.w	r1, [r8]
    edc2:	f847 1b04 	str.w	r1, [r7], #4
    edc6:	f8d8 4000 	ldr.w	r4, [r8]
    edca:	f847 4b04 	str.w	r4, [r7], #4
    edce:	f8d8 6000 	ldr.w	r6, [r8]
    edd2:	f847 6b04 	str.w	r6, [r7], #4
    edd6:	f8d8 1000 	ldr.w	r1, [r8]
    edda:	f847 1b04 	str.w	r1, [r7], #4
    for ( i = 0; i < ui32NumWords; i++ )
    edde:	429f      	cmp	r7, r3
    ede0:	d136      	bne.n	ee50 <am_hal_iom_int_service.part.20+0x194>
    if ( ui32Leftovers )
    ede2:	b142      	cbz	r2, edf6 <am_hal_iom_int_service.part.20+0x13a>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ede4:	a904      	add	r1, sp, #16
    ede6:	f8d8 7000 	ldr.w	r7, [r8]
    edea:	f841 7d04 	str.w	r7, [r1, #-4]!
    edee:	eb05 0089 	add.w	r0, r5, r9, lsl #2
    edf2:	f002 fb42 	bl	1147a <memcpy>
}
    edf6:	b005      	add	sp, #20
    edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( ui32Status & AM_HAL_IOM_INT_THR )
    edfc:	0788      	lsls	r0, r1, #30
    edfe:	d5fa      	bpl.n	edf6 <am_hal_iom_int_service.part.20+0x13a>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    ee00:	eb04 0b84 	add.w	fp, r4, r4, lsl #2
    ee04:	ea4f 068b 	mov.w	r6, fp, lsl #2
    ee08:	4b57      	ldr	r3, [pc, #348]	; (ef68 <am_hal_iom_int_service.part.20+0x2ac>)
    ee0a:	599a      	ldr	r2, [r3, r6]
    ee0c:	441e      	add	r6, r3
    ee0e:	2a00      	cmp	r2, #0
    ee10:	d0f1      	beq.n	edf6 <am_hal_iom_int_service.part.20+0x13a>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    ee12:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
        if ( psBuffer->ui32State == BUFFER_SENDING )
    ee16:	2a01      	cmp	r2, #1
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    ee18:	f104 0404 	add.w	r4, r4, #4
        if ( psBuffer->ui32State == BUFFER_SENDING )
    ee1c:	f000 80ac 	beq.w	ef78 <am_hal_iom_int_service.part.20+0x2bc>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    ee20:	ea4f 3804 	mov.w	r8, r4, lsl #12
    ee24:	f508 7a80 	add.w	sl, r8, #256	; 0x100
    ee28:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
    ee2c:	f000 097f 	and.w	r9, r0, #127	; 0x7f
    ee30:	e004      	b.n	ee3c <am_hal_iom_int_service.part.20+0x180>
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    ee32:	68b4      	ldr	r4, [r6, #8]
    ee34:	42ac      	cmp	r4, r5
    ee36:	d083      	beq.n	ed40 <am_hal_iom_int_service.part.20+0x84>
                else if ( ui32NumBytes >= 4 )
    ee38:	2d03      	cmp	r5, #3
    ee3a:	d828      	bhi.n	ee8e <am_hal_iom_int_service.part.20+0x1d2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ee3c:	f8da 7000 	ldr.w	r7, [sl]
    ee40:	b2fd      	uxtb	r5, r7
            while ( (ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module)) >= thresh )
    ee42:	45a9      	cmp	r9, r5
    ee44:	d9f5      	bls.n	ee32 <am_hal_iom_int_service.part.20+0x176>
    ee46:	e7d6      	b.n	edf6 <am_hal_iom_int_service.part.20+0x13a>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    ee48:	2305      	movs	r3, #5
    ee4a:	e76e      	b.n	ed2a <am_hal_iom_int_service.part.20+0x6e>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    ee4c:	2307      	movs	r3, #7
    ee4e:	e76c      	b.n	ed2a <am_hal_iom_int_service.part.20+0x6e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ee50:	46ba      	mov	sl, r7
    ee52:	f8d8 0000 	ldr.w	r0, [r8]
    ee56:	f84a 0b04 	str.w	r0, [sl], #4
    ee5a:	f8d8 4000 	ldr.w	r4, [r8]
    ee5e:	607c      	str	r4, [r7, #4]
    ee60:	f8d8 6000 	ldr.w	r6, [r8]
    ee64:	f8ca 6004 	str.w	r6, [sl, #4]
    ee68:	f8d8 1000 	ldr.w	r1, [r8]
    ee6c:	60f9      	str	r1, [r7, #12]
    ee6e:	f8d8 0000 	ldr.w	r0, [r8]
    ee72:	6138      	str	r0, [r7, #16]
    ee74:	f8d8 4000 	ldr.w	r4, [r8]
    ee78:	617c      	str	r4, [r7, #20]
    ee7a:	f8d8 6000 	ldr.w	r6, [r8]
    ee7e:	61be      	str	r6, [r7, #24]
    ee80:	f8d8 1000 	ldr.w	r1, [r8]
    ee84:	61f9      	str	r1, [r7, #28]
    ee86:	3720      	adds	r7, #32
    for ( i = 0; i < ui32NumWords; i++ )
    ee88:	429f      	cmp	r7, r3
    ee8a:	d1e1      	bne.n	ee50 <am_hal_iom_int_service.part.20+0x194>
    ee8c:	e7a9      	b.n	ede2 <am_hal_iom_int_service.part.20+0x126>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    ee8e:	f8d8 111c 	ldr.w	r1, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    ee92:	6874      	ldr	r4, [r6, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    ee94:	070a      	lsls	r2, r1, #28
                    ui32NumBytes = (ui32NumBytes & (~0x3));
    ee96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    ee9a:	f140 8106 	bpl.w	f0aa <am_hal_iom_int_service.part.20+0x3ee>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ee9e:	4622      	mov	r2, r4
    eea0:	f8d8 1000 	ldr.w	r1, [r8]
    eea4:	f842 1b04 	str.w	r1, [r2], #4
    eea8:	f005 0cfc 	and.w	ip, r5, #252	; 0xfc
    eeac:	f1ac 0504 	sub.w	r5, ip, #4
    eeb0:	44a4      	add	ip, r4
    for ( i = 0; i < ui32NumWords; i++ )
    eeb2:	4594      	cmp	ip, r2
    eeb4:	f3c5 0082 	ubfx	r0, r5, #2, #3
    eeb8:	d047      	beq.n	ef4a <am_hal_iom_int_service.part.20+0x28e>
    eeba:	b348      	cbz	r0, ef10 <am_hal_iom_int_service.part.20+0x254>
    eebc:	2801      	cmp	r0, #1
    eebe:	d021      	beq.n	ef04 <am_hal_iom_int_service.part.20+0x248>
    eec0:	2802      	cmp	r0, #2
    eec2:	d01b      	beq.n	eefc <am_hal_iom_int_service.part.20+0x240>
    eec4:	2803      	cmp	r0, #3
    eec6:	d015      	beq.n	eef4 <am_hal_iom_int_service.part.20+0x238>
    eec8:	2804      	cmp	r0, #4
    eeca:	d00f      	beq.n	eeec <am_hal_iom_int_service.part.20+0x230>
    eecc:	2805      	cmp	r0, #5
    eece:	d009      	beq.n	eee4 <am_hal_iom_int_service.part.20+0x228>
    eed0:	2806      	cmp	r0, #6
    eed2:	d003      	beq.n	eedc <am_hal_iom_int_service.part.20+0x220>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    eed4:	f8d8 1000 	ldr.w	r1, [r8]
    eed8:	6061      	str	r1, [r4, #4]
    eeda:	3204      	adds	r2, #4
    eedc:	f8d8 4000 	ldr.w	r4, [r8]
    eee0:	f842 4b04 	str.w	r4, [r2], #4
    eee4:	f8d8 5000 	ldr.w	r5, [r8]
    eee8:	f842 5b04 	str.w	r5, [r2], #4
    eeec:	f8d8 0000 	ldr.w	r0, [r8]
    eef0:	f842 0b04 	str.w	r0, [r2], #4
    eef4:	f8d8 1000 	ldr.w	r1, [r8]
    eef8:	f842 1b04 	str.w	r1, [r2], #4
    eefc:	f8d8 4000 	ldr.w	r4, [r8]
    ef00:	f842 4b04 	str.w	r4, [r2], #4
    ef04:	f8d8 5000 	ldr.w	r5, [r8]
    ef08:	f842 5b04 	str.w	r5, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    ef0c:	4594      	cmp	ip, r2
    ef0e:	d01c      	beq.n	ef4a <am_hal_iom_int_service.part.20+0x28e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ef10:	4610      	mov	r0, r2
    ef12:	f8d8 1000 	ldr.w	r1, [r8]
    ef16:	f840 1b04 	str.w	r1, [r0], #4
    ef1a:	f8d8 4000 	ldr.w	r4, [r8]
    ef1e:	6054      	str	r4, [r2, #4]
    ef20:	f8d8 5000 	ldr.w	r5, [r8]
    ef24:	6045      	str	r5, [r0, #4]
    ef26:	f8d8 0000 	ldr.w	r0, [r8]
    ef2a:	60d0      	str	r0, [r2, #12]
    ef2c:	f8d8 1000 	ldr.w	r1, [r8]
    ef30:	6111      	str	r1, [r2, #16]
    ef32:	f8d8 4000 	ldr.w	r4, [r8]
    ef36:	6154      	str	r4, [r2, #20]
    ef38:	f8d8 5000 	ldr.w	r5, [r8]
    ef3c:	6195      	str	r5, [r2, #24]
    ef3e:	f8d8 0000 	ldr.w	r0, [r8]
    ef42:	61d0      	str	r0, [r2, #28]
    ef44:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    ef46:	4594      	cmp	ip, r2
    ef48:	d1e2      	bne.n	ef10 <am_hal_iom_int_service.part.20+0x254>
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    ef4a:	68b1      	ldr	r1, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    ef4c:	6872      	ldr	r2, [r6, #4]
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    ef4e:	1bcc      	subs	r4, r1, r7
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    ef50:	4417      	add	r7, r2
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    ef52:	60b4      	str	r4, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    ef54:	6077      	str	r7, [r6, #4]
                    AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    ef56:	f8d8 7208 	ldr.w	r7, [r8, #520]	; 0x208
    ef5a:	f047 0502 	orr.w	r5, r7, #2
    ef5e:	f8c8 5208 	str.w	r5, [r8, #520]	; 0x208
    ef62:	e76b      	b.n	ee3c <am_hal_iom_int_service.part.20+0x180>
    ef64:	10002604 	.word	0x10002604
    ef68:	10002940 	.word	0x10002940
    ef6c:	100025fc 	.word	0x100025fc
    ef70:	000148fc 	.word	0x000148fc
    ef74:	000148e8 	.word	0x000148e8
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    ef78:	0324      	lsls	r4, r4, #12
    ef7a:	6877      	ldr	r7, [r6, #4]
    ef7c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    ef80:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    ef84:	f3c2 2b06 	ubfx	fp, r2, #8, #7
    ef88:	f504 798e 	add.w	r9, r4, #284	; 0x11c
    ef8c:	f504 7880 	add.w	r8, r4, #256	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    ef90:	f8d9 3000 	ldr.w	r3, [r9]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    ef94:	f8d8 5000 	ldr.w	r5, [r8]
    ef98:	68b2      	ldr	r2, [r6, #8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    ef9a:	f8d9 1000 	ldr.w	r1, [r9]
    ef9e:	f013 0f08 	tst.w	r3, #8
    efa2:	bf14      	ite	ne
    efa4:	2340      	movne	r3, #64	; 0x40
    efa6:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    efa8:	1b58      	subs	r0, r3, r5
                ui32SpaceInFifo = am_hal_iom_fifo_empty_slots(ui32Module);
    efaa:	f000 05fc 	and.w	r5, r0, #252	; 0xfc
    efae:	4295      	cmp	r5, r2
    efb0:	bf28      	it	cs
    efb2:	4615      	movcs	r5, r2
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    efb4:	f8d8 3000 	ldr.w	r3, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    efb8:	f011 0f08 	tst.w	r1, #8
    efbc:	bf14      	ite	ne
    efbe:	2240      	movne	r2, #64	; 0x40
    efc0:	2280      	moveq	r2, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    efc2:	1ad2      	subs	r2, r2, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    efc4:	f002 01fc 	and.w	r1, r2, #252	; 0xfc
    efc8:	428d      	cmp	r5, r1
    efca:	d867      	bhi.n	f09c <am_hal_iom_int_service.part.20+0x3e0>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    efcc:	2d00      	cmp	r5, #0
    efce:	d04d      	beq.n	f06c <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    efd0:	463b      	mov	r3, r7
    efd2:	43fa      	mvns	r2, r7
    efd4:	f853 0b04 	ldr.w	r0, [r3], #4
    efd8:	6020      	str	r0, [r4, #0]
    efda:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    efdc:	1bd8      	subs	r0, r3, r7
    efde:	442a      	add	r2, r5
    efe0:	4285      	cmp	r5, r0
    efe2:	f3c2 0182 	ubfx	r1, r2, #2, #3
    efe6:	d941      	bls.n	f06c <am_hal_iom_int_service.part.20+0x3b0>
    efe8:	b319      	cbz	r1, f032 <am_hal_iom_int_service.part.20+0x376>
    efea:	2901      	cmp	r1, #1
    efec:	d01b      	beq.n	f026 <am_hal_iom_int_service.part.20+0x36a>
    efee:	2902      	cmp	r1, #2
    eff0:	d016      	beq.n	f020 <am_hal_iom_int_service.part.20+0x364>
    eff2:	2903      	cmp	r1, #3
    eff4:	d011      	beq.n	f01a <am_hal_iom_int_service.part.20+0x35e>
    eff6:	2904      	cmp	r1, #4
    eff8:	d00c      	beq.n	f014 <am_hal_iom_int_service.part.20+0x358>
    effa:	2905      	cmp	r1, #5
    effc:	d007      	beq.n	f00e <am_hal_iom_int_service.part.20+0x352>
    effe:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f000:	bf1c      	itt	ne
    f002:	f853 1b04 	ldrne.w	r1, [r3], #4
    f006:	6021      	strne	r1, [r4, #0]
    f008:	f853 2b04 	ldr.w	r2, [r3], #4
    f00c:	6022      	str	r2, [r4, #0]
    f00e:	f853 0b04 	ldr.w	r0, [r3], #4
    f012:	6020      	str	r0, [r4, #0]
    f014:	f853 1b04 	ldr.w	r1, [r3], #4
    f018:	6021      	str	r1, [r4, #0]
    f01a:	f853 2b04 	ldr.w	r2, [r3], #4
    f01e:	6022      	str	r2, [r4, #0]
    f020:	f853 0b04 	ldr.w	r0, [r3], #4
    f024:	6020      	str	r0, [r4, #0]
    f026:	f853 1b04 	ldr.w	r1, [r3], #4
    f02a:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f02c:	1bda      	subs	r2, r3, r7
    f02e:	4295      	cmp	r5, r2
    f030:	d91c      	bls.n	f06c <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f032:	469c      	mov	ip, r3
    f034:	3320      	adds	r3, #32
    f036:	f85c 0b04 	ldr.w	r0, [ip], #4
    f03a:	6020      	str	r0, [r4, #0]
    f03c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
    f040:	6021      	str	r1, [r4, #0]
    f042:	f8dc 2004 	ldr.w	r2, [ip, #4]
    f046:	6022      	str	r2, [r4, #0]
    f048:	f853 0c14 	ldr.w	r0, [r3, #-20]
    f04c:	6020      	str	r0, [r4, #0]
    f04e:	f853 1c10 	ldr.w	r1, [r3, #-16]
    f052:	6021      	str	r1, [r4, #0]
    f054:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    f058:	6022      	str	r2, [r4, #0]
    f05a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    f05e:	6020      	str	r0, [r4, #0]
    f060:	f853 1c04 	ldr.w	r1, [r3, #-4]
    f064:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f066:	1bda      	subs	r2, r3, r7
    f068:	4295      	cmp	r5, r2
    f06a:	d8e2      	bhi.n	f032 <am_hal_iom_int_service.part.20+0x376>
                AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    f06c:	f8da 7000 	ldr.w	r7, [sl]
    f070:	f047 0302 	orr.w	r3, r7, #2
    f074:	f8ca 3000 	str.w	r3, [sl]
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    f078:	68b0      	ldr	r0, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    f07a:	6877      	ldr	r7, [r6, #4]
    f07c:	f025 0c03 	bic.w	ip, r5, #3
    f080:	4467      	add	r7, ip
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    f082:	1b45      	subs	r5, r0, r5
    f084:	60b5      	str	r5, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    f086:	6077      	str	r7, [r6, #4]
                if ( 0 == psBuffer->ui32BytesLeft )
    f088:	2d00      	cmp	r5, #0
    f08a:	f43f aeb4 	beq.w	edf6 <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f08e:	f8d8 1000 	ldr.w	r1, [r8]
            } while ( am_hal_iom_fifo_full_slots(ui32Module) <= thresh );
    f092:	b2ca      	uxtb	r2, r1
    f094:	4593      	cmp	fp, r2
    f096:	f4bf af7b 	bcs.w	ef90 <am_hal_iom_int_service.part.20+0x2d4>
    f09a:	e6ac      	b.n	edf6 <am_hal_iom_int_service.part.20+0x13a>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f09c:	4a4a      	ldr	r2, [pc, #296]	; (f1c8 <am_hal_iom_int_service.part.20+0x50c>)
    f09e:	484b      	ldr	r0, [pc, #300]	; (f1cc <am_hal_iom_int_service.part.20+0x510>)
    f0a0:	f640 7145 	movw	r1, #3909	; 0xf45
    f0a4:	f7ff fc82 	bl	e9ac <am_hal_debug_error>
    f0a8:	e792      	b.n	efd0 <am_hal_iom_int_service.part.20+0x314>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f0aa:	f8da 2000 	ldr.w	r2, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f0ae:	b2d0      	uxtb	r0, r2
    f0b0:	4287      	cmp	r7, r0
    f0b2:	f67f aef4 	bls.w	ee9e <am_hal_iom_int_service.part.20+0x1e2>
    f0b6:	4a46      	ldr	r2, [pc, #280]	; (f1d0 <am_hal_iom_int_service.part.20+0x514>)
    f0b8:	4844      	ldr	r0, [pc, #272]	; (f1cc <am_hal_iom_int_service.part.20+0x510>)
    f0ba:	9301      	str	r3, [sp, #4]
    f0bc:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    f0c0:	f7ff fc74 	bl	e9ac <am_hal_debug_error>
    f0c4:	9b01      	ldr	r3, [sp, #4]
    f0c6:	e6ea      	b.n	ee9e <am_hal_iom_int_service.part.20+0x1e2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f0c8:	f8d8 b100 	ldr.w	fp, [r8, #256]	; 0x100
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    f0cc:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    f0d0:	f8d2 9004 	ldr.w	r9, [r2, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    f0d4:	071b      	lsls	r3, r3, #28
    f0d6:	fa5f fa8b 	uxtb.w	sl, fp
    f0da:	d569      	bpl.n	f1b0 <am_hal_iom_int_service.part.20+0x4f4>
    for ( i = 0; i < ui32NumWords; i++ )
    f0dc:	ea5f 009a 	movs.w	r0, sl, lsr #2
    f0e0:	f00b 0203 	and.w	r2, fp, #3
    f0e4:	d058      	beq.n	f198 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f0e6:	464b      	mov	r3, r9
    f0e8:	f8d8 1000 	ldr.w	r1, [r8]
    f0ec:	f843 1b04 	str.w	r1, [r3], #4
    f0f0:	eb09 0e80 	add.w	lr, r9, r0, lsl #2
    f0f4:	ebae 0c09 	sub.w	ip, lr, r9
    f0f8:	f1ac 0b04 	sub.w	fp, ip, #4
    for ( i = 0; i < ui32NumWords; i++ )
    f0fc:	4573      	cmp	r3, lr
    f0fe:	f3cb 0182 	ubfx	r1, fp, #2, #3
    f102:	d049      	beq.n	f198 <am_hal_iom_int_service.part.20+0x4dc>
    f104:	b349      	cbz	r1, f15a <am_hal_iom_int_service.part.20+0x49e>
    f106:	2901      	cmp	r1, #1
    f108:	d021      	beq.n	f14e <am_hal_iom_int_service.part.20+0x492>
    f10a:	2902      	cmp	r1, #2
    f10c:	d01b      	beq.n	f146 <am_hal_iom_int_service.part.20+0x48a>
    f10e:	2903      	cmp	r1, #3
    f110:	d015      	beq.n	f13e <am_hal_iom_int_service.part.20+0x482>
    f112:	2904      	cmp	r1, #4
    f114:	d00f      	beq.n	f136 <am_hal_iom_int_service.part.20+0x47a>
    f116:	2905      	cmp	r1, #5
    f118:	d009      	beq.n	f12e <am_hal_iom_int_service.part.20+0x472>
    f11a:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f11c:	bf1c      	itt	ne
    f11e:	f8d8 1000 	ldrne.w	r1, [r8]
    f122:	f843 1b04 	strne.w	r1, [r3], #4
    f126:	f8d8 1000 	ldr.w	r1, [r8]
    f12a:	f843 1b04 	str.w	r1, [r3], #4
    f12e:	f8d8 1000 	ldr.w	r1, [r8]
    f132:	f843 1b04 	str.w	r1, [r3], #4
    f136:	f8d8 1000 	ldr.w	r1, [r8]
    f13a:	f843 1b04 	str.w	r1, [r3], #4
    f13e:	f8d8 1000 	ldr.w	r1, [r8]
    f142:	f843 1b04 	str.w	r1, [r3], #4
    f146:	f8d8 1000 	ldr.w	r1, [r8]
    f14a:	f843 1b04 	str.w	r1, [r3], #4
    f14e:	f8d8 1000 	ldr.w	r1, [r8]
    f152:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    f156:	4573      	cmp	r3, lr
    f158:	d01e      	beq.n	f198 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f15a:	469a      	mov	sl, r3
    f15c:	f8d8 c000 	ldr.w	ip, [r8]
    f160:	f84a cb04 	str.w	ip, [sl], #4
    f164:	f8d8 b000 	ldr.w	fp, [r8]
    f168:	f8c3 b004 	str.w	fp, [r3, #4]
    f16c:	f8d8 c000 	ldr.w	ip, [r8]
    f170:	f8ca c004 	str.w	ip, [sl, #4]
    f174:	f8d8 1000 	ldr.w	r1, [r8]
    f178:	60d9      	str	r1, [r3, #12]
    f17a:	f8d8 1000 	ldr.w	r1, [r8]
    f17e:	6119      	str	r1, [r3, #16]
    f180:	f8d8 1000 	ldr.w	r1, [r8]
    f184:	6159      	str	r1, [r3, #20]
    f186:	f8d8 1000 	ldr.w	r1, [r8]
    f18a:	6199      	str	r1, [r3, #24]
    f18c:	f8d8 1000 	ldr.w	r1, [r8]
    f190:	61d9      	str	r1, [r3, #28]
    f192:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    f194:	4573      	cmp	r3, lr
    f196:	d1e0      	bne.n	f15a <am_hal_iom_int_service.part.20+0x49e>
    if ( ui32Leftovers )
    f198:	b142      	cbz	r2, f1ac <am_hal_iom_int_service.part.20+0x4f0>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f19a:	a904      	add	r1, sp, #16
    f19c:	f8d8 3000 	ldr.w	r3, [r8]
    f1a0:	f841 3d04 	str.w	r3, [r1, #-4]!
    f1a4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    f1a8:	f002 f967 	bl	1147a <memcpy>
    f1ac:	5d2b      	ldrb	r3, [r5, r4]
    f1ae:	e5a8      	b.n	ed02 <am_hal_iom_int_service.part.20+0x46>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f1b0:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f1b4:	b2d1      	uxtb	r1, r2
    f1b6:	458a      	cmp	sl, r1
    f1b8:	d990      	bls.n	f0dc <am_hal_iom_int_service.part.20+0x420>
    f1ba:	4a05      	ldr	r2, [pc, #20]	; (f1d0 <am_hal_iom_int_service.part.20+0x514>)
    f1bc:	4803      	ldr	r0, [pc, #12]	; (f1cc <am_hal_iom_int_service.part.20+0x510>)
    f1be:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    f1c2:	f7ff fbf3 	bl	e9ac <am_hal_debug_error>
    f1c6:	e789      	b.n	f0dc <am_hal_iom_int_service.part.20+0x420>
    f1c8:	000148b4 	.word	0x000148b4
    f1cc:	000148e8 	.word	0x000148e8
    f1d0:	000148fc 	.word	0x000148fc

0000f1d4 <am_hal_iom_pwrctrl_enable>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f1d4:	2805      	cmp	r0, #5
{
    f1d6:	b510      	push	{r4, lr}
    f1d8:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f1da:	d905      	bls.n	f1e8 <am_hal_iom_pwrctrl_enable+0x14>
    f1dc:	4a05      	ldr	r2, [pc, #20]	; (f1f4 <am_hal_iom_pwrctrl_enable+0x20>)
    f1de:	4806      	ldr	r0, [pc, #24]	; (f1f8 <am_hal_iom_pwrctrl_enable+0x24>)
    f1e0:	f240 21d5 	movw	r1, #725	; 0x2d5
    f1e4:	f7ff fbe2 	bl	e9ac <am_hal_debug_error>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f1e8:	2002      	movs	r0, #2
    f1ea:	40a0      	lsls	r0, r4
}
    f1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f1f0:	f001 befa 	b.w	10fe8 <am_hal_pwrctrl_periph_enable>
    f1f4:	00014968 	.word	0x00014968
    f1f8:	000148e8 	.word	0x000148e8

0000f1fc <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    f1fc:	2805      	cmp	r0, #5
    f1fe:	d80f      	bhi.n	f220 <am_hal_iom_enable+0x24>
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    f200:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    f204:	3304      	adds	r3, #4
    f206:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    f208:	4906      	ldr	r1, [pc, #24]	; (f224 <am_hal_iom_enable+0x28>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    f20a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
{
    f20e:	b410      	push	{r4}
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    f210:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
    f214:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    f216:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    f21a:	540c      	strb	r4, [r1, r0]
}
    f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f220:	4770      	bx	lr
    f222:	bf00      	nop
    f224:	100025fc 	.word	0x100025fc

0000f228 <am_hal_iom_disable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    f228:	2805      	cmp	r0, #5
    f22a:	d80d      	bhi.n	f248 <am_hal_iom_disable+0x20>
    f22c:	4a07      	ldr	r2, [pc, #28]	; (f24c <am_hal_iom_disable+0x24>)
    while ( g_bIomBusy[ui32Module] );
    f22e:	5c13      	ldrb	r3, [r2, r0]
    f230:	2b00      	cmp	r3, #0
    f232:	d1fc      	bne.n	f22e <am_hal_iom_disable+0x6>
        AM_REGn(IOMSTR, ui32Module, CFG) &= ~(AM_REG_IOMSTR_CFG_IFCEN(1));
    f234:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    f238:	3004      	adds	r0, #4
    f23a:	0301      	lsls	r1, r0, #12
    f23c:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    f240:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    f244:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
    f248:	4770      	bx	lr
    f24a:	bf00      	nop
    f24c:	100025fc 	.word	0x100025fc

0000f250 <am_hal_iom_power_on_restore>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f250:	2805      	cmp	r0, #5
{
    f252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f254:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f256:	d81d      	bhi.n	f294 <am_hal_iom_power_on_restore+0x44>
    if ( am_hal_iom_pwrsave[ui32Module].bValid == 0 )
    f258:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    f25c:	4f11      	ldr	r7, [pc, #68]	; (f2a4 <am_hal_iom_power_on_restore+0x54>)
    f25e:	00ad      	lsls	r5, r5, #2
    f260:	197e      	adds	r6, r7, r5
    f262:	6933      	ldr	r3, [r6, #16]
    f264:	b1ab      	cbz	r3, f292 <am_hal_iom_power_on_restore+0x42>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f266:	2002      	movs	r0, #2
    f268:	40a0      	lsls	r0, r4
    f26a:	f001 febd 	bl	10fe8 <am_hal_pwrctrl_periph_enable>
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) = am_hal_iom_pwrsave[ui32Module].FIFOTHR;
    f26e:	f504 20a0 	add.w	r0, r4, #327680	; 0x50000
    f272:	3004      	adds	r0, #4
    f274:	0301      	lsls	r1, r0, #12
    f276:	597a      	ldr	r2, [r7, r5]
    f278:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    AM_REGn(IOMSTR, ui32Module, CLKCFG) = am_hal_iom_pwrsave[ui32Module].CLKCFG;
    f27c:	6874      	ldr	r4, [r6, #4]
    f27e:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    AM_REGn(IOMSTR, ui32Module, CFG) = am_hal_iom_pwrsave[ui32Module].CFG;
    f282:	68b7      	ldr	r7, [r6, #8]
    f284:	f8c1 711c 	str.w	r7, [r1, #284]	; 0x11c
    AM_REGn(IOMSTR, ui32Module, INTEN) = am_hal_iom_pwrsave[ui32Module].INTEN;
    f288:	68f5      	ldr	r5, [r6, #12]
    f28a:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    am_hal_iom_pwrsave[ui32Module].bValid = 0;
    f28e:	2300      	movs	r3, #0
    f290:	6133      	str	r3, [r6, #16]
    f292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f294:	4a04      	ldr	r2, [pc, #16]	; (f2a8 <am_hal_iom_power_on_restore+0x58>)
    f296:	4805      	ldr	r0, [pc, #20]	; (f2ac <am_hal_iom_power_on_restore+0x5c>)
    f298:	f240 3136 	movw	r1, #822	; 0x336
    f29c:	f7ff fb86 	bl	e9ac <am_hal_debug_error>
    f2a0:	e7da      	b.n	f258 <am_hal_iom_power_on_restore+0x8>
    f2a2:	bf00      	nop
    f2a4:	10002a48 	.word	0x10002a48
    f2a8:	00014968 	.word	0x00014968
    f2ac:	000148e8 	.word	0x000148e8

0000f2b0 <am_hal_iom_power_off_save>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f2b0:	2805      	cmp	r0, #5
{
    f2b2:	b510      	push	{r4, lr}
    f2b4:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f2b6:	d905      	bls.n	f2c4 <am_hal_iom_power_off_save+0x14>
    f2b8:	4a11      	ldr	r2, [pc, #68]	; (f300 <am_hal_iom_power_off_save+0x50>)
    f2ba:	4812      	ldr	r0, [pc, #72]	; (f304 <am_hal_iom_power_off_save+0x54>)
    f2bc:	f240 316a 	movw	r1, #874	; 0x36a
    f2c0:	f7ff fb74 	bl	e9ac <am_hal_debug_error>
    am_hal_iom_pwrsave[ui32Module].FIFOTHR = AM_REGn(IOMSTR, ui32Module, FIFOTHR);
    f2c4:	f504 23a0 	add.w	r3, r4, #327680	; 0x50000
    f2c8:	3304      	adds	r3, #4
    f2ca:	031b      	lsls	r3, r3, #12
    f2cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    f2d0:	0091      	lsls	r1, r2, #2
    f2d2:	4a0d      	ldr	r2, [pc, #52]	; (f308 <am_hal_iom_power_off_save+0x58>)
    f2d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    f2d8:	5050      	str	r0, [r2, r1]
    f2da:	440a      	add	r2, r1
    am_hal_iom_pwrsave[ui32Module].CLKCFG = AM_REGn(IOMSTR, ui32Module, CLKCFG);
    f2dc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    f2e0:	6051      	str	r1, [r2, #4]
    am_hal_iom_pwrsave[ui32Module].CFG = AM_REGn(IOMSTR, ui32Module, CFG);
    f2e2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
    f2e6:	6090      	str	r0, [r2, #8]
    am_hal_iom_pwrsave[ui32Module].INTEN = AM_REGn(IOMSTR, ui32Module, INTEN);
    f2e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    f2ec:	60d3      	str	r3, [r2, #12]
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f2ee:	2002      	movs	r0, #2
    am_hal_iom_pwrsave[ui32Module].bValid = 1;
    f2f0:	2101      	movs	r1, #1
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f2f2:	40a0      	lsls	r0, r4
    am_hal_iom_pwrsave[ui32Module].bValid = 1;
    f2f4:	6111      	str	r1, [r2, #16]
}
    f2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    f2fa:	f001 beb7 	b.w	1106c <am_hal_pwrctrl_periph_disable>
    f2fe:	bf00      	nop
    f300:	00014934 	.word	0x00014934
    f304:	000148e8 	.word	0x000148e8
    f308:	10002a48 	.word	0x10002a48

0000f30c <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f30c:	2805      	cmp	r0, #5
    f30e:	f200 80e0 	bhi.w	f4d2 <am_hal_iom_config+0x1c6>
{
    f312:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( psConfig->bSPHA )
    f316:	7a0d      	ldrb	r5, [r1, #8]
    ui32Config = psConfig->ui32InterfaceMode;
    f318:	680b      	ldr	r3, [r1, #0]
    if ( psConfig->bSPHA )
    f31a:	b10d      	cbz	r5, f320 <am_hal_iom_config+0x14>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    f31c:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    f320:	7a4a      	ldrb	r2, [r1, #9]
    f322:	b10a      	cbz	r2, f328 <am_hal_iom_config+0x1c>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    f324:	f043 0302 	orr.w	r3, r3, #2
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    f328:	684c      	ldr	r4, [r1, #4]
    f32a:	4e83      	ldr	r6, [pc, #524]	; (f538 <am_hal_iom_config+0x22c>)
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    f32c:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    f330:	3704      	adds	r7, #4
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    f332:	42b4      	cmp	r4, r6
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    f334:	ea4f 3407 	mov.w	r4, r7, lsl #12
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
    f338:	bf88      	it	hi
    f33a:	f043 0320 	orrhi.w	r3, r3, #32
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    f33e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    f342:	7a8a      	ldrb	r2, [r1, #10]
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    f344:	7acb      	ldrb	r3, [r1, #11]
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    f346:	2a7c      	cmp	r2, #124	; 0x7c
    f348:	bf28      	it	cs
    f34a:	227c      	movcs	r2, #124	; 0x7c
    f34c:	2a04      	cmp	r2, #4
    f34e:	bf38      	it	cc
    f350:	2204      	movcc	r2, #4
    f352:	0216      	lsls	r6, r2, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    f354:	2b7c      	cmp	r3, #124	; 0x7c
    f356:	bf28      	it	cs
    f358:	237c      	movcs	r3, #124	; 0x7c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    f35a:	f406 47fe 	and.w	r7, r6, #32512	; 0x7f00
    f35e:	2b04      	cmp	r3, #4
    f360:	bf2c      	ite	cs
    f362:	ea47 0203 	orrcs.w	r2, r7, r3
    f366:	f047 0204 	orrcc.w	r2, r7, #4
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    f36a:	f030 0304 	bics.w	r3, r0, #4
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    f36e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    f372:	d005      	beq.n	f380 <am_hal_iom_config+0x74>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    f374:	4b71      	ldr	r3, [pc, #452]	; (f53c <am_hal_iom_config+0x230>)
    f376:	681e      	ldr	r6, [r3, #0]
    f378:	b2f7      	uxtb	r7, r6
    f37a:	2f22      	cmp	r7, #34	; 0x22
    f37c:	f000 80ae 	beq.w	f4dc <am_hal_iom_config+0x1d0>
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    f380:	f8d1 e004 	ldr.w	lr, [r1, #4]
    if ( ui32FreqHz == 0 )
    f384:	f1be 0f00 	cmp.w	lr, #0
    f388:	f000 8093 	beq.w	f4b2 <am_hal_iom_config+0x1a6>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    f38c:	4b6c      	ldr	r3, [pc, #432]	; (f540 <am_hal_iom_config+0x234>)
    f38e:	fbb3 f7fe 	udiv	r7, r3, lr
    f392:	fb0e 3617 	mls	r6, lr, r7, r3
    f396:	2e00      	cmp	r6, #0
    f398:	bf18      	it	ne
    f39a:	3701      	addne	r7, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    f39c:	427a      	negs	r2, r7
    f39e:	403a      	ands	r2, r7
    f3a0:	fab2 f882 	clz	r8, r2
    f3a4:	f1c8 031f 	rsb	r3, r8, #31
    f3a8:	2b06      	cmp	r3, #6
    f3aa:	bfa8      	it	ge
    f3ac:	2306      	movge	r3, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    f3ae:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    f3b2:	f240 808f 	bls.w	f4d4 <am_hal_iom_config+0x1c8>
    f3b6:	f5ae 0974 	sub.w	r9, lr, #15990784	; 0xf40000
    f3ba:	4e62      	ldr	r6, [pc, #392]	; (f544 <am_hal_iom_config+0x238>)
    f3bc:	f5a9 5210 	sub.w	r2, r9, #9216	; 0x2400
    f3c0:	42b2      	cmp	r2, r6
    f3c2:	bf8b      	itete	hi
    f3c4:	f04f 0c00 	movhi.w	ip, #0
    f3c8:	f44f 6c00 	movls.w	ip, #2048	; 0x800
    f3cc:	2201      	movhi	r2, #1
    f3ce:	2203      	movls	r2, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    f3d0:	fa02 fa03 	lsl.w	sl, r2, r3
    ui32TotPer = i32Div / ui32Denom;
    f3d4:	fbb7 f6fa 	udiv	r6, r7, sl
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    f3d8:	fb0a 7b16 	mls	fp, sl, r6, r7
    f3dc:	f1bb 0f00 	cmp.w	fp, #0
    f3e0:	bf18      	it	ne
    f3e2:	3601      	addne	r6, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    f3e4:	fab6 f886 	clz	r8, r6
    f3e8:	f1c8 091f 	rsb	r9, r8, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    f3ec:	f1b9 0f07 	cmp.w	r9, #7
    f3f0:	f240 808f 	bls.w	f512 <am_hal_iom_config+0x206>
    f3f4:	3b07      	subs	r3, #7
    f3f6:	444b      	add	r3, r9
    ui32Fsel++;
    f3f8:	f103 0b01 	add.w	fp, r3, #1
    if ( ui32Fsel > 7 )
    f3fc:	f1bb 0f07 	cmp.w	fp, #7
    f400:	d857      	bhi.n	f4b2 <am_hal_iom_config+0x1a6>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    f402:	f1a9 0807 	sub.w	r8, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    f406:	f04f 0a01 	mov.w	sl, #1
    f40a:	fa0a f908 	lsl.w	r9, sl, r8
    f40e:	f109 3aff 	add.w	sl, r9, #4294967295
    f412:	ea0a 0906 	and.w	r9, sl, r6
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    f416:	fa26 f608 	lsr.w	r6, r6, r8
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f41a:	f8df 814c 	ldr.w	r8, [pc, #332]	; f568 <am_hal_iom_config+0x25c>
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    f41e:	f1b9 0f00 	cmp.w	r9, #0
    f422:	bf18      	it	ne
    f424:	3601      	addne	r6, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f426:	45c6      	cmp	lr, r8
    f428:	d879      	bhi.n	f51e <am_hal_iom_config+0x212>
    f42a:	f04f 0e01 	mov.w	lr, #1
    f42e:	fa0e fa03 	lsl.w	sl, lr, r3
    f432:	4557      	cmp	r7, sl
    f434:	d073      	beq.n	f51e <am_hal_iom_config+0x212>
    f436:	1e77      	subs	r7, r6, #1
    f438:	46b1      	mov	r9, r6
    f43a:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    if (ui32Phase == 1)
    f43e:	2d00      	cmp	r5, #0
    f440:	d173      	bne.n	f52a <am_hal_iom_config+0x21e>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    f442:	087e      	lsrs	r6, r7, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f444:	409a      	lsls	r2, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f446:	4b3e      	ldr	r3, [pc, #248]	; (f540 <am_hal_iom_config+0x234>)
    if ( (ui32ClkFreq % 250000) == 0 )
    f448:	f8df 8120 	ldr.w	r8, [pc, #288]	; f56c <am_hal_iom_config+0x260>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f44c:	fb09 f202 	mul.w	r2, r9, r2
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    f450:	ea4f 250b 	mov.w	r5, fp, lsl #8
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f454:	fbb3 fbf2 	udiv	fp, r3, r2
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f458:	fb02 331b 	mls	r3, r2, fp, r3
    f45c:	0852      	lsrs	r2, r2, #1
    f45e:	429a      	cmp	r2, r3
    f460:	bf2c      	ite	cs
    f462:	465b      	movcs	r3, fp
    f464:	f10b 0301 	addcc.w	r3, fp, #1
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    f468:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
    f46c:	ea45 020c 	orr.w	r2, r5, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    f470:	f8df 90fc 	ldr.w	r9, [pc, #252]	; f570 <am_hal_iom_config+0x264>
    f474:	fba8 ba03 	umull	fp, sl, r8, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    f478:	ea42 020e 	orr.w	r2, r2, lr
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    f47c:	0436      	lsls	r6, r6, #16
    if ( (ui32ClkFreq % 250000) == 0 )
    f47e:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    f482:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    f486:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
    if ( (ui32ClkFreq % 250000) == 0 )
    f48a:	fb09 371e 	mls	r7, r9, lr, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    f48e:	ea42 020c 	orr.w	r2, r2, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    f492:	b93f      	cbnz	r7, f4a4 <am_hal_iom_config+0x198>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    f494:	f1be 0f00 	cmp.w	lr, #0
    f498:	d004      	beq.n	f4a4 <am_hal_iom_config+0x198>
    f49a:	f10e 33ff 	add.w	r3, lr, #4294967295
    f49e:	ea13 0f0e 	tst.w	r3, lr
    f4a2:	d033      	beq.n	f50c <am_hal_iom_config+0x200>
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
    f4a4:	2500      	movs	r5, #0
    f4a6:	ea45 0602 	orr.w	r6, r5, r2
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    f4aa:	4637      	mov	r7, r6
    if ( ui32ClkCfg )
    f4ac:	b10e      	cbz	r6, f4b2 <am_hal_iom_config+0x1a6>
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
    f4ae:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    f4b2:	468b      	mov	fp, r1
    f4b4:	4604      	mov	r4, r0
    ui32HFRC = am_hal_clkgen_sysclk_get();
    f4b6:	f7ff f8a3 	bl	e600 <am_hal_clkgen_sysclk_get>
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    f4ba:	4f23      	ldr	r7, [pc, #140]	; (f548 <am_hal_iom_config+0x23c>)
      IOM_OVERHEAD_FACTOR * (ui32HFRC / psConfig->ui32ClockFrequency);
    f4bc:	f8db 1004 	ldr.w	r1, [fp, #4]
    f4c0:	fbb0 f0f1 	udiv	r0, r0, r1
    f4c4:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    f4c8:	0216      	lsls	r6, r2, #8
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    f4ca:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
    f4ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4d2:	4770      	bx	lr
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    f4d4:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    f4d8:	2203      	movs	r2, #3
    f4da:	e779      	b.n	f3d0 <am_hal_iom_config+0xc4>
            isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    f4dc:	680a      	ldr	r2, [r1, #0]
    f4de:	2a00      	cmp	r2, #0
    f4e0:	f47f af4e 	bne.w	f380 <am_hal_iom_config+0x74>
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    f4e4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    f4e8:	4d18      	ldr	r5, [pc, #96]	; (f54c <am_hal_iom_config+0x240>)
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    f4ea:	f043 0204 	orr.w	r2, r3, #4
    f4ee:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
    f4f2:	684a      	ldr	r2, [r1, #4]
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    f4f4:	42aa      	cmp	r2, r5
    f4f6:	d01b      	beq.n	f530 <am_hal_iom_config+0x224>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    f4f8:	4e15      	ldr	r6, [pc, #84]	; (f550 <am_hal_iom_config+0x244>)
    f4fa:	42b2      	cmp	r2, r6
    f4fc:	d01a      	beq.n	f534 <am_hal_iom_config+0x228>
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
    f4fe:	4b15      	ldr	r3, [pc, #84]	; (f554 <am_hal_iom_config+0x248>)
    f500:	4f15      	ldr	r7, [pc, #84]	; (f558 <am_hal_iom_config+0x24c>)
    f502:	4d16      	ldr	r5, [pc, #88]	; (f55c <am_hal_iom_config+0x250>)
    f504:	429a      	cmp	r2, r3
    f506:	bf08      	it	eq
    f508:	462f      	moveq	r7, r5
    f50a:	e7d0      	b.n	f4ae <am_hal_iom_config+0x1a2>
            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
    f50c:	f445 6200 	orr.w	r2, r5, #2048	; 0x800
    f510:	e7c8      	b.n	f4a4 <am_hal_iom_config+0x198>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f512:	f8df 8054 	ldr.w	r8, [pc, #84]	; f568 <am_hal_iom_config+0x25c>
    f516:	45c6      	cmp	lr, r8
    ui32Fsel++;
    f518:	f103 0b01 	add.w	fp, r3, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f51c:	d985      	bls.n	f42a <am_hal_iom_config+0x11e>
    f51e:	1e77      	subs	r7, r6, #1
    f520:	f04f 0901 	mov.w	r9, #1
    f524:	f04f 0e00 	mov.w	lr, #0
    f528:	e789      	b.n	f43e <am_hal_iom_config+0x132>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    f52a:	1eb5      	subs	r5, r6, #2
    f52c:	086e      	lsrs	r6, r5, #1
    f52e:	e789      	b.n	f444 <am_hal_iom_config+0x138>
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    f530:	4f0b      	ldr	r7, [pc, #44]	; (f560 <am_hal_iom_config+0x254>)
    f532:	e7bc      	b.n	f4ae <am_hal_iom_config+0x1a2>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    f534:	4f0b      	ldr	r7, [pc, #44]	; (f564 <am_hal_iom_config+0x258>)
    f536:	e7ba      	b.n	f4ae <am_hal_iom_config+0x1a2>
    f538:	00f423ff 	.word	0x00f423ff
    f53c:	4002000c 	.word	0x4002000c
    f540:	02dc6c00 	.word	0x02dc6c00
    f544:	007a11ff 	.word	0x007a11ff
    f548:	10002928 	.word	0x10002928
    f54c:	000c3500 	.word	0x000c3500
    f550:	00061a80 	.word	0x00061a80
    f554:	00030d40 	.word	0x00030d40
    f558:	1d0e1500 	.word	0x1d0e1500
    f55c:	1d0e1400 	.word	0x1d0e1400
    f560:	1d0e1200 	.word	0x1d0e1200
    f564:	1d0e1300 	.word	0x1d0e1300
    f568:	00b71aff 	.word	0x00b71aff
    f56c:	431bde83 	.word	0x431bde83
    f570:	0003d090 	.word	0x0003d090

0000f574 <am_hal_iom_workaround_word_write>:
{
    f574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    f578:	4cc9      	ldr	r4, [pc, #804]	; (f8a0 <am_hal_iom_workaround_word_write+0x32c>)
    f57a:	6825      	ldr	r5, [r4, #0]
{
    f57c:	4691      	mov	r9, r2
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f57e:	f015 0f08 	tst.w	r5, #8
{
    f582:	b08d      	sub	sp, #52	; 0x34
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    f584:	f640 72fb 	movw	r2, #4091	; 0xffb
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f588:	bf14      	ite	ne
    f58a:	2640      	movne	r6, #64	; 0x40
    f58c:	2680      	moveq	r6, #128	; 0x80
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    f58e:	4591      	cmp	r9, r2
{
    f590:	4604      	mov	r4, r0
    f592:	4688      	mov	r8, r1
    f594:	9301      	str	r3, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    f596:	f200 832b 	bhi.w	fbf0 <am_hal_iom_workaround_word_write+0x67c>
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    f59a:	4bc2      	ldr	r3, [pc, #776]	; (f8a4 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f59c:	4fc2      	ldr	r7, [pc, #776]	; (f8a8 <am_hal_iom_workaround_word_write+0x334>)
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    f59e:	681d      	ldr	r5, [r3, #0]
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    f5a0:	681a      	ldr	r2, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f5a2:	49c2      	ldr	r1, [pc, #776]	; (f8ac <am_hal_iom_workaround_word_write+0x338>)
    f5a4:	f3c2 3e00 	ubfx	lr, r2, #12, #1
    f5a8:	f3c2 20c0 	ubfx	r0, r2, #11, #1
    f5ac:	0e13      	lsrs	r3, r2, #24
    f5ae:	fb03 f30e 	mul.w	r3, r3, lr
    f5b2:	0040      	lsls	r0, r0, #1
    f5b4:	3001      	adds	r0, #1
    f5b6:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f5b8:	fb03 fa00 	mul.w	sl, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f5bc:	ea4f 0c5a 	mov.w	ip, sl, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f5c0:	fbb7 fbfa 	udiv	fp, r7, sl
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f5c4:	fb0a 721b 	mls	r2, sl, fp, r7
    f5c8:	4594      	cmp	ip, r2
    f5ca:	bf2c      	ite	cs
    f5cc:	46de      	movcs	lr, fp
    f5ce:	f10b 0e01 	addcc.w	lr, fp, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f5d2:	458e      	cmp	lr, r1
    f5d4:	f240 835d 	bls.w	fc92 <am_hal_iom_workaround_word_write+0x71e>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f5d8:	0040      	lsls	r0, r0, #1
    f5da:	fb03 f300 	mul.w	r3, r3, r0
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f5de:	fbb7 faf3 	udiv	sl, r7, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f5e2:	fb03 771a 	mls	r7, r3, sl, r7
    f5e6:	085b      	lsrs	r3, r3, #1
    f5e8:	42bb      	cmp	r3, r7
    f5ea:	bf2c      	ite	cs
    f5ec:	4652      	movcs	r2, sl
    f5ee:	f10a 0201 	addcc.w	r2, sl, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    f5f2:	428a      	cmp	r2, r1
    f5f4:	bf8c      	ite	hi
    f5f6:	f04f 0c03 	movhi.w	ip, #3
    f5fa:	f04f 0c02 	movls.w	ip, #2
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f5fe:	f3c5 21c0 	ubfx	r1, r5, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f602:	0048      	lsls	r0, r1, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f604:	f3c5 2b02 	ubfx	fp, r5, #8, #3
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f608:	f10b 33ff 	add.w	r3, fp, #4294967295
    f60c:	1c47      	adds	r7, r0, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f60e:	f3c5 3200 	ubfx	r2, r5, #12, #1
    f612:	0e29      	lsrs	r1, r5, #24
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f614:	f8df b290 	ldr.w	fp, [pc, #656]	; f8a8 <am_hal_iom_workaround_word_write+0x334>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f618:	fa07 f003 	lsl.w	r0, r7, r3
    f61c:	fb01 f102 	mul.w	r1, r1, r2
    f620:	fb01 0300 	mla	r3, r1, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f624:	0859      	lsrs	r1, r3, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f626:	fbbb fef3 	udiv	lr, fp, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f62a:	fb03 b01e 	mls	r0, r3, lr, fp
    f62e:	4281      	cmp	r1, r0
    f630:	bf2c      	ite	cs
    f632:	4677      	movcs	r7, lr
    f634:	f10e 0701 	addcc.w	r7, lr, #1
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    f638:	4a9a      	ldr	r2, [pc, #616]	; (f8a4 <am_hal_iom_workaround_word_write+0x330>)
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    f63a:	499d      	ldr	r1, [pc, #628]	; (f8b0 <am_hal_iom_workaround_word_write+0x33c>)
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    f63c:	f425 6ae0 	bic.w	sl, r5, #1792	; 0x700
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    f640:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    f644:	ea4a 270c 	orr.w	r7, sl, ip, lsl #8
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    f648:	fbb1 f0f3 	udiv	r0, r1, r3
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    f64c:	6017      	str	r7, [r2, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    f64e:	4b99      	ldr	r3, [pc, #612]	; (f8b4 <am_hal_iom_workaround_word_write+0x340>)
    f650:	4798      	blx	r3
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f652:	f3c7 22c0 	ubfx	r2, r7, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f656:	0050      	lsls	r0, r2, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f658:	f3c7 2c01 	ubfx	ip, r7, #8, #2
    f65c:	f3c7 3100 	ubfx	r1, r7, #12, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f660:	3001      	adds	r0, #1
    f662:	f10c 33ff 	add.w	r3, ip, #4294967295
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    f666:	0e3f      	lsrs	r7, r7, #24
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f668:	fb07 f701 	mul.w	r7, r7, r1
    f66c:	4098      	lsls	r0, r3
    f66e:	fb07 0000 	mla	r0, r7, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f672:	0842      	lsrs	r2, r0, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f674:	fbbb f7f0 	udiv	r7, fp, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f678:	fb00 bb17 	mls	fp, r0, r7, fp
    f67c:	455a      	cmp	r2, fp
    f67e:	bf38      	it	cc
    f680:	3701      	addcc	r7, #1
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    f682:	2f00      	cmp	r7, #0
    f684:	f000 82ad 	beq.w	fbe2 <am_hal_iom_workaround_word_write+0x66e>
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    f688:	4b86      	ldr	r3, [pc, #536]	; (f8a4 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f68a:	4a87      	ldr	r2, [pc, #540]	; (f8a8 <am_hal_iom_workaround_word_write+0x334>)
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    f68c:	681b      	ldr	r3, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f68e:	f8df e234 	ldr.w	lr, [pc, #564]	; f8c4 <am_hal_iom_workaround_word_write+0x350>
    f692:	f3c3 3000 	ubfx	r0, r3, #12, #1
    f696:	f3c3 21c0 	ubfx	r1, r3, #11, #1
    f69a:	0e1b      	lsrs	r3, r3, #24
    f69c:	fb03 f300 	mul.w	r3, r3, r0
    f6a0:	0049      	lsls	r1, r1, #1
    f6a2:	3101      	adds	r1, #1
    f6a4:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f6a6:	fb03 f001 	mul.w	r0, r3, r1
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6aa:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f6ae:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6b2:	fb00 201c 	mls	r0, r0, ip, r2
    f6b6:	4583      	cmp	fp, r0
    f6b8:	bf2c      	ite	cs
    f6ba:	46e3      	movcs	fp, ip
    f6bc:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f6c0:	45f3      	cmp	fp, lr
    f6c2:	f240 82e4 	bls.w	fc8e <am_hal_iom_workaround_word_write+0x71a>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f6c6:	0048      	lsls	r0, r1, #1
    f6c8:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6cc:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f6d0:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6d4:	fb00 201c 	mls	r0, r0, ip, r2
    f6d8:	4583      	cmp	fp, r0
    f6da:	bf2c      	ite	cs
    f6dc:	46e3      	movcs	fp, ip
    f6de:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f6e2:	45f3      	cmp	fp, lr
    f6e4:	f240 82d8 	bls.w	fc98 <am_hal_iom_workaround_word_write+0x724>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f6e8:	0088      	lsls	r0, r1, #2
    f6ea:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6ee:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f6f2:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f6f6:	fb00 201c 	mls	r0, r0, ip, r2
    f6fa:	4583      	cmp	fp, r0
    f6fc:	bf2c      	ite	cs
    f6fe:	46e3      	movcs	fp, ip
    f700:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f704:	45f3      	cmp	fp, lr
    f706:	f240 82c9 	bls.w	fc9c <am_hal_iom_workaround_word_write+0x728>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f70a:	00c8      	lsls	r0, r1, #3
    f70c:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f710:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f714:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f718:	fb00 201c 	mls	r0, r0, ip, r2
    f71c:	4583      	cmp	fp, r0
    f71e:	bf2c      	ite	cs
    f720:	46e3      	movcs	fp, ip
    f722:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f726:	45f3      	cmp	fp, lr
    f728:	f240 82ba 	bls.w	fca0 <am_hal_iom_workaround_word_write+0x72c>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f72c:	0108      	lsls	r0, r1, #4
    f72e:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f732:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f736:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f73a:	fb00 201c 	mls	r0, r0, ip, r2
    f73e:	4583      	cmp	fp, r0
    f740:	bf2c      	ite	cs
    f742:	46e3      	movcs	fp, ip
    f744:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    f748:	45f3      	cmp	fp, lr
    f74a:	f240 82ab 	bls.w	fca4 <am_hal_iom_workaround_word_write+0x730>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f74e:	0149      	lsls	r1, r1, #5
    f750:	fb03 f301 	mul.w	r3, r3, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f754:	fbb2 f0f3 	udiv	r0, r2, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f758:	fb03 2210 	mls	r2, r3, r0, r2
    f75c:	085b      	lsrs	r3, r3, #1
    f75e:	4293      	cmp	r3, r2
    f760:	bf2c      	ite	cs
    f762:	4601      	movcs	r1, r0
    f764:	1c41      	addcc	r1, r0, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    f766:	4571      	cmp	r1, lr
    f768:	bf8c      	ite	hi
    f76a:	2007      	movhi	r0, #7
    f76c:	2006      	movls	r0, #6
    if ( ui32Options & AM_HAL_IOM_RAW )
    f76e:	9b01      	ldr	r3, [sp, #4]
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    f770:	ea4a 2200 	orr.w	r2, sl, r0, lsl #8
    if ( ui32Options & AM_HAL_IOM_RAW )
    f774:	f013 4080 	ands.w	r0, r3, #1073741824	; 0x40000000
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    f778:	9203      	str	r2, [sp, #12]
    if ( ui32Options & AM_HAL_IOM_RAW )
    f77a:	f000 813d 	beq.w	f9f8 <am_hal_iom_workaround_word_write+0x484>
        if ( pui32Data[0] & 0x80 )
    f77e:	f8d8 1000 	ldr.w	r1, [r8]
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    f782:	4a4d      	ldr	r2, [pc, #308]	; (f8b8 <am_hal_iom_workaround_word_write+0x344>)
        if ( pui32Data[0] & 0x80 )
    f784:	f001 0380 	and.w	r3, r1, #128	; 0x80
            ui32FirstWord = 0x00000000;
    f788:	2b00      	cmp	r3, #0
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    f78a:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    f78e:	fbb2 f1f0 	udiv	r1, r2, r0
    f792:	9107      	str	r1, [sp, #28]
            ui32FirstWord = 0x00000000;
    f794:	bf0b      	itete	eq
    f796:	2100      	moveq	r1, #0
    f798:	2101      	movne	r1, #1
    f79a:	f06f 07ff 	mvneq.w	r7, #255	; 0xff
    f79e:	2700      	movne	r7, #0
    f7a0:	9106      	str	r1, [sp, #24]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7a2:	4b3f      	ldr	r3, [pc, #252]	; (f8a0 <am_hal_iom_workaround_word_write+0x32c>)
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7a4:	4a45      	ldr	r2, [pc, #276]	; (f8bc <am_hal_iom_workaround_word_write+0x348>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7a6:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7a8:	6813      	ldr	r3, [r2, #0]
    ui32NumBytes += 4;
    f7aa:	f109 0104 	add.w	r1, r9, #4
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    f7ae:	428e      	cmp	r6, r1
    f7b0:	bf28      	it	cs
    f7b2:	460e      	movcs	r6, r1
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7b4:	f010 0f08 	tst.w	r0, #8
    f7b8:	bf14      	ite	ne
    f7ba:	2040      	movne	r0, #64	; 0x40
    f7bc:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7be:	1ac2      	subs	r2, r0, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f7c0:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    f7c4:	2803      	cmp	r0, #3
    ui32NumBytes += 4;
    f7c6:	9104      	str	r1, [sp, #16]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f7c8:	f240 8204 	bls.w	fbd4 <am_hal_iom_workaround_word_write+0x660>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f7cc:	493c      	ldr	r1, [pc, #240]	; (f8c0 <am_hal_iom_workaround_word_write+0x34c>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7ce:	4b34      	ldr	r3, [pc, #208]	; (f8a0 <am_hal_iom_workaround_word_write+0x32c>)
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f7d0:	600f      	str	r7, [r1, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7d2:	681f      	ldr	r7, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7d4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7d8:	f017 0f08 	tst.w	r7, #8
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7dc:	f1a3 001c 	sub.w	r0, r3, #28
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    f7e0:	bf14      	ite	ne
    f7e2:	2040      	movne	r0, #64	; 0x40
    f7e4:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f7e6:	1a81      	subs	r1, r0, r2
    am_hal_iom_fifo_write(WORKAROUND_IOM, pui32Data, ui32TransferSize - 4);
    f7e8:	3e04      	subs	r6, #4
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f7ea:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
    f7ee:	454e      	cmp	r6, r9
    f7f0:	f200 81e9 	bhi.w	fbc6 <am_hal_iom_workaround_word_write+0x652>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f7f4:	2e00      	cmp	r6, #0
    f7f6:	d067      	beq.n	f8c8 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f7f8:	4643      	mov	r3, r8
    f7fa:	ea6f 0c08 	mvn.w	ip, r8
    f7fe:	f853 7b04 	ldr.w	r7, [r3], #4
    f802:	4a2f      	ldr	r2, [pc, #188]	; (f8c0 <am_hal_iom_workaround_word_write+0x34c>)
    f804:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f806:	eba3 0b08 	sub.w	fp, r3, r8
    f80a:	44b4      	add	ip, r6
    f80c:	455e      	cmp	r6, fp
    f80e:	f3cc 0082 	ubfx	r0, ip, #2, #3
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f812:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f814:	d958      	bls.n	f8c8 <am_hal_iom_workaround_word_write+0x354>
    f816:	b320      	cbz	r0, f862 <am_hal_iom_workaround_word_write+0x2ee>
    f818:	2801      	cmp	r0, #1
    f81a:	d01b      	beq.n	f854 <am_hal_iom_workaround_word_write+0x2e0>
    f81c:	2802      	cmp	r0, #2
    f81e:	d016      	beq.n	f84e <am_hal_iom_workaround_word_write+0x2da>
    f820:	2803      	cmp	r0, #3
    f822:	d011      	beq.n	f848 <am_hal_iom_workaround_word_write+0x2d4>
    f824:	2804      	cmp	r0, #4
    f826:	d00c      	beq.n	f842 <am_hal_iom_workaround_word_write+0x2ce>
    f828:	2805      	cmp	r0, #5
    f82a:	d007      	beq.n	f83c <am_hal_iom_workaround_word_write+0x2c8>
    f82c:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f82e:	bf1c      	itt	ne
    f830:	f853 0b04 	ldrne.w	r0, [r3], #4
    f834:	6010      	strne	r0, [r2, #0]
    f836:	f853 1b04 	ldr.w	r1, [r3], #4
    f83a:	6011      	str	r1, [r2, #0]
    f83c:	f853 7b04 	ldr.w	r7, [r3], #4
    f840:	6017      	str	r7, [r2, #0]
    f842:	f853 0b04 	ldr.w	r0, [r3], #4
    f846:	6010      	str	r0, [r2, #0]
    f848:	f853 1b04 	ldr.w	r1, [r3], #4
    f84c:	6011      	str	r1, [r2, #0]
    f84e:	f853 7b04 	ldr.w	r7, [r3], #4
    f852:	6017      	str	r7, [r2, #0]
    f854:	f853 0b04 	ldr.w	r0, [r3], #4
    f858:	6010      	str	r0, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f85a:	eba3 0a08 	sub.w	sl, r3, r8
    f85e:	4556      	cmp	r6, sl
    f860:	d932      	bls.n	f8c8 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f862:	469e      	mov	lr, r3
    f864:	3320      	adds	r3, #32
    f866:	f85e 1b04 	ldr.w	r1, [lr], #4
    f86a:	6011      	str	r1, [r2, #0]
    f86c:	f853 7c1c 	ldr.w	r7, [r3, #-28]
    f870:	6017      	str	r7, [r2, #0]
    f872:	f8de 0004 	ldr.w	r0, [lr, #4]
    f876:	6010      	str	r0, [r2, #0]
    f878:	f853 1c14 	ldr.w	r1, [r3, #-20]
    f87c:	6011      	str	r1, [r2, #0]
    f87e:	f853 7c10 	ldr.w	r7, [r3, #-16]
    f882:	6017      	str	r7, [r2, #0]
    f884:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f888:	6010      	str	r0, [r2, #0]
    f88a:	f853 1c08 	ldr.w	r1, [r3, #-8]
    f88e:	6011      	str	r1, [r2, #0]
    f890:	f853 7c04 	ldr.w	r7, [r3, #-4]
    f894:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f896:	eba3 0008 	sub.w	r0, r3, r8
    f89a:	4286      	cmp	r6, r0
    f89c:	d8e1      	bhi.n	f862 <am_hal_iom_workaround_word_write+0x2ee>
    f89e:	e013      	b.n	f8c8 <am_hal_iom_workaround_word_write+0x354>
    f8a0:	5000811c 	.word	0x5000811c
    f8a4:	5000810c 	.word	0x5000810c
    f8a8:	02dc6c00 	.word	0x02dc6c00
    f8ac:	00f42400 	.word	0x00f42400
    f8b0:	05b8d800 	.word	0x05b8d800
    f8b4:	0800009d 	.word	0x0800009d
    f8b8:	4d3f6400 	.word	0x4d3f6400
    f8bc:	50008100 	.word	0x50008100
    f8c0:	50008000 	.word	0x50008000
    f8c4:	000f4240 	.word	0x000f4240
        if ( g_IOMPads[index].channel == ui32ChipSelect )
    f8c8:	2c00      	cmp	r4, #0
    f8ca:	f000 8198 	beq.w	fbfe <am_hal_iom_workaround_word_write+0x68a>
    f8ce:	2c01      	cmp	r4, #1
    f8d0:	f000 80a3 	beq.w	fa1a <am_hal_iom_workaround_word_write+0x4a6>
    f8d4:	2c02      	cmp	r4, #2
    f8d6:	f000 80b8 	beq.w	fa4a <am_hal_iom_workaround_word_write+0x4d6>
    f8da:	2c03      	cmp	r4, #3
    f8dc:	f000 80c6 	beq.w	fa6c <am_hal_iom_workaround_word_write+0x4f8>
    f8e0:	2c04      	cmp	r4, #4
    f8e2:	f000 811e 	beq.w	fb22 <am_hal_iom_workaround_word_write+0x5ae>
    f8e6:	2c05      	cmp	r4, #5
    f8e8:	f000 8133 	beq.w	fb52 <am_hal_iom_workaround_word_write+0x5de>
    f8ec:	2c06      	cmp	r4, #6
    f8ee:	f000 8148 	beq.w	fb82 <am_hal_iom_workaround_word_write+0x60e>
    f8f2:	2c07      	cmp	r4, #7
    f8f4:	f000 8156 	beq.w	fba4 <am_hal_iom_workaround_word_write+0x630>
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    f8f8:	2200      	movs	r2, #0
    f8fa:	48cc      	ldr	r0, [pc, #816]	; (fc2c <am_hal_iom_workaround_word_write+0x6b8>)
    ui32CSPadregVal = *pui32CSPadreg;
    f8fc:	4fcc      	ldr	r7, [pc, #816]	; (fc30 <am_hal_iom_workaround_word_write+0x6bc>)
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    f8fe:	f240 512d 	movw	r1, #1325	; 0x52d
    f902:	f7ff f853 	bl	e9ac <am_hal_debug_error>
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    f906:	48cb      	ldr	r0, [pc, #812]	; (fc34 <am_hal_iom_workaround_word_write+0x6c0>)
    ui32CSPadregVal = *pui32CSPadreg;
    f908:	683a      	ldr	r2, [r7, #0]
    f90a:	9202      	str	r2, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    f90c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    f910:	46bb      	mov	fp, r7
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    f912:	6003      	str	r3, [r0, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG | AM_HAL_PIN_DIR_INPUT);
    f914:	f7ff f996 	bl	ec44 <am_hal_interrupt_master_disable>
    f918:	4ec7      	ldr	r6, [pc, #796]	; (fc38 <am_hal_iom_workaround_word_write+0x6c4>)
    f91a:	f8df 9360 	ldr.w	r9, [pc, #864]	; fc7c <am_hal_iom_workaround_word_write+0x708>
    f91e:	900a      	str	r0, [sp, #40]	; 0x28
    f920:	2173      	movs	r1, #115	; 0x73
    f922:	6031      	str	r1, [r6, #0]
    f924:	f8d9 0000 	ldr.w	r0, [r9]
    f928:	f8df 8354 	ldr.w	r8, [pc, #852]	; fc80 <am_hal_iom_workaround_word_write+0x70c>
    f92c:	9105      	str	r1, [sp, #20]
    f92e:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    f932:	f8c9 2000 	str.w	r2, [r9]
    f936:	f8d8 3000 	ldr.w	r3, [r8]
    f93a:	4fc0      	ldr	r7, [pc, #768]	; (fc3c <am_hal_iom_workaround_word_write+0x6c8>)
    f93c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    f940:	f041 002a 	orr.w	r0, r1, #42	; 0x2a
    f944:	f8c8 0000 	str.w	r0, [r8]
    f948:	683a      	ldr	r2, [r7, #0]
    f94a:	f04f 0a00 	mov.w	sl, #0
    f94e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    f952:	603b      	str	r3, [r7, #0]
    f954:	f8c6 a000 	str.w	sl, [r6]
    f958:	980a      	ldr	r0, [sp, #40]	; 0x28
    f95a:	f7ff f977 	bl	ec4c <am_hal_interrupt_master_set>
    ui32Command |= ui32Options & 0x5C00FF00;
    f95e:	9901      	ldr	r1, [sp, #4]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    f960:	0424      	lsls	r4, r4, #16
    f962:	f404 20e0 	and.w	r0, r4, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    f966:	f021 4323 	bic.w	r3, r1, #2734686208	; 0xa3000000
    ui32Command |= (ui32NumBytes & 0xFF);
    f96a:	9904      	ldr	r1, [sp, #16]
    ui32Command |= ui32Options & 0x5C00FF00;
    f96c:	f003 24ff 	and.w	r4, r3, #4278255360	; 0xff00ff00
    f970:	f040 4280 	orr.w	r2, r0, #1073741824	; 0x40000000
    f974:	4322      	orrs	r2, r4
    ui32Command |= (ui32NumBytes & 0xFF);
    f976:	b2c8      	uxtb	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    f978:	03cc      	lsls	r4, r1, #15
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    f97a:	9b05      	ldr	r3, [sp, #20]
    f97c:	6033      	str	r3, [r6, #0]
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    f97e:	f004 61f0 	and.w	r1, r4, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    f982:	4302      	orrs	r2, r0
    f984:	430a      	orrs	r2, r1
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    f986:	9305      	str	r3, [sp, #20]
    ui32Command |= ui32Options & 0x5C00FF00;
    f988:	9204      	str	r2, [sp, #16]
    ui32Critical = am_hal_interrupt_master_disable();
    f98a:	f7ff f95b 	bl	ec44 <am_hal_interrupt_master_disable>
    f98e:	9001      	str	r0, [sp, #4]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    f990:	48ab      	ldr	r0, [pc, #684]	; (fc40 <am_hal_iom_workaround_word_write+0x6cc>)
    f992:	9a04      	ldr	r2, [sp, #16]
    f994:	6002      	str	r2, [r0, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    f996:	4cab      	ldr	r4, [pc, #684]	; (fc44 <am_hal_iom_workaround_word_write+0x6d0>)
    f998:	9807      	ldr	r0, [sp, #28]
    f99a:	47a0      	blx	r4
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    f99c:	4baa      	ldr	r3, [pc, #680]	; (fc48 <am_hal_iom_workaround_word_write+0x6d4>)
    f99e:	9c03      	ldr	r4, [sp, #12]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    f9a0:	9a06      	ldr	r2, [sp, #24]
    f9a2:	9802      	ldr	r0, [sp, #8]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    f9a4:	601c      	str	r4, [r3, #0]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    f9a6:	4659      	mov	r1, fp
    f9a8:	f7ff f954 	bl	ec54 <iom_workaround_loop>
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32ClkCfg;
    f9ac:	49a6      	ldr	r1, [pc, #664]	; (fc48 <am_hal_iom_workaround_word_write+0x6d4>)
    f9ae:	600d      	str	r5, [r1, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG);
    f9b0:	f7ff f948 	bl	ec44 <am_hal_interrupt_master_disable>
    f9b4:	9d05      	ldr	r5, [sp, #20]
    f9b6:	900b      	str	r0, [sp, #44]	; 0x2c
    f9b8:	6035      	str	r5, [r6, #0]
    f9ba:	f8d9 0000 	ldr.w	r0, [r9]
    f9be:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    f9c2:	f8c9 2000 	str.w	r2, [r9]
    f9c6:	f8d8 3000 	ldr.w	r3, [r8]
    f9ca:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    f9ce:	f044 0128 	orr.w	r1, r4, #40	; 0x28
    f9d2:	f8c8 1000 	str.w	r1, [r8]
    f9d6:	683d      	ldr	r5, [r7, #0]
    f9d8:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    f9dc:	6038      	str	r0, [r7, #0]
    f9de:	f8c6 a000 	str.w	sl, [r6]
    f9e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f9e4:	f7ff f932 	bl	ec4c <am_hal_interrupt_master_set>
    am_hal_interrupt_master_set(ui32Critical);
    f9e8:	9801      	ldr	r0, [sp, #4]
    f9ea:	f7ff f92f 	bl	ec4c <am_hal_interrupt_master_set>
    AM_REGn(GPIO, 0, PADKEY) = 0;
    f9ee:	f8c6 a000 	str.w	sl, [r6]
}
    f9f2:	b00d      	add	sp, #52	; 0x34
    f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
    f9f8:	041a      	lsls	r2, r3, #16
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    f9fa:	eb07 0a47 	add.w	sl, r7, r7, lsl #1
    f9fe:	4f93      	ldr	r7, [pc, #588]	; (fc4c <am_hal_iom_workaround_word_write+0x6d8>)
    fa00:	fbb7 f1fa 	udiv	r1, r7, sl
        if ( ui32FirstWord & 0x80000000 )
    fa04:	f012 477f 	ands.w	r7, r2, #4278190080	; 0xff000000
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    fa08:	9107      	str	r1, [sp, #28]
        if ( ui32FirstWord & 0x80000000 )
    fa0a:	f100 813d 	bmi.w	fc88 <am_hal_iom_workaround_word_write+0x714>
            ui32FirstWord |= 0x00FFFF00;
    fa0e:	f447 037f 	orr.w	r3, r7, #16711680	; 0xff0000
    fa12:	f443 477f 	orr.w	r7, r3, #65280	; 0xff00
            bRising = false;
    fa16:	9006      	str	r0, [sp, #24]
    fa18:	e6c3      	b.n	f7a2 <am_hal_iom_workaround_word_write+0x22e>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa1a:	4a8d      	ldr	r2, [pc, #564]	; (fc50 <am_hal_iom_workaround_word_write+0x6dc>)
    fa1c:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fa1e:	f3c3 46c2 	ubfx	r6, r3, #19, #3
    fa22:	2e04      	cmp	r6, #4
    fa24:	f000 814a 	beq.w	fcbc <am_hal_iom_workaround_word_write+0x748>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa28:	3214      	adds	r2, #20
    fa2a:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fa2c:	f3c1 27c2 	ubfx	r7, r1, #11, #3
    fa30:	2f05      	cmp	r7, #5
    fa32:	f47f af61 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa36:	f04f 0825 	mov.w	r8, #37	; 0x25
    fa3a:	4693      	mov	fp, r2
    fa3c:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fa3e:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fa42:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa46:	2624      	movs	r6, #36	; 0x24
    fa48:	e027      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fa4a:	4982      	ldr	r1, [pc, #520]	; (fc54 <am_hal_iom_workaround_word_write+0x6e0>)
    fa4c:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fa4e:	f3c7 20c2 	ubfx	r0, r7, #11, #3
    fa52:	2806      	cmp	r0, #6
    fa54:	f47f af50 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa58:	f04f 0829 	mov.w	r8, #41	; 0x29
    fa5c:	468b      	mov	fp, r1
    fa5e:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fa60:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fa64:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa68:	2628      	movs	r6, #40	; 0x28
    fa6a:	e016      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fa6c:	4f78      	ldr	r7, [pc, #480]	; (fc50 <am_hal_iom_workaround_word_write+0x6dc>)
    fa6e:	6838      	ldr	r0, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fa70:	f3c0 22c2 	ubfx	r2, r0, #11, #3
    fa74:	2a04      	cmp	r2, #4
    fa76:	f000 812b 	beq.w	fcd0 <am_hal_iom_workaround_word_write+0x75c>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa7a:	371c      	adds	r7, #28
    fa7c:	683b      	ldr	r3, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fa7e:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    fa82:	2e04      	cmp	r6, #4
    fa84:	f47f af38 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa88:	f04f 082d 	mov.w	r8, #45	; 0x2d
    fa8c:	46bb      	mov	fp, r7
    fa8e:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fa90:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fa94:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fa98:	262c      	movs	r6, #44	; 0x2c
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    fa9a:	ea4f 01d8 	mov.w	r1, r8, lsr #3
    fa9e:	f001 0e04 	and.w	lr, r1, #4
    faa2:	f00c 001f 	and.w	r0, ip, #31
    faa6:	4b6c      	ldr	r3, [pc, #432]	; (fc58 <am_hal_iom_workaround_word_write+0x6e4>)
    ui32CSPadregVal = *pui32CSPadreg;
    faa8:	f8db 7000 	ldr.w	r7, [fp]
    faac:	9702      	str	r7, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    faae:	2201      	movs	r2, #1
    fab0:	4082      	lsls	r2, r0
    fab2:	f84e 2003 	str.w	r2, [lr, r3]
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    fab6:	f7ff f8c5 	bl	ec44 <am_hal_interrupt_master_disable>
    faba:	4f5f      	ldr	r7, [pc, #380]	; (fc38 <am_hal_iom_workaround_word_write+0x6c4>)
    fabc:	9009      	str	r0, [sp, #36]	; 0x24
    fabe:	ea4f 0c58 	mov.w	ip, r8, lsr #1
    fac2:	f00c 017c 	and.w	r1, ip, #124	; 0x7c
    fac6:	f8df e1bc 	ldr.w	lr, [pc, #444]	; fc84 <am_hal_iom_workaround_word_write+0x710>
    faca:	2073      	movs	r0, #115	; 0x73
    facc:	6038      	str	r0, [r7, #0]
    face:	ea4f 0288 	mov.w	r2, r8, lsl #2
    fad2:	f002 031c 	and.w	r3, r2, #28
    fad6:	f851 800e 	ldr.w	r8, [r1, lr]
    fada:	4860      	ldr	r0, [pc, #384]	; (fc5c <am_hal_iom_workaround_word_write+0x6e8>)
    fadc:	2207      	movs	r2, #7
    fade:	409a      	lsls	r2, r3
    fae0:	f04f 0c02 	mov.w	ip, #2
    fae4:	ea28 0202 	bic.w	r2, r8, r2
    fae8:	fa0c f303 	lsl.w	r3, ip, r3
    faec:	4313      	orrs	r3, r2
    faee:	f841 300e 	str.w	r3, [r1, lr]
    faf2:	f8db 1000 	ldr.w	r1, [fp]
    faf6:	ea6f 0909 	mvn.w	r9, r9
    fafa:	f04f 0e18 	mov.w	lr, #24
    fafe:	ea01 0809 	and.w	r8, r1, r9
    fb02:	fa0e f20a 	lsl.w	r2, lr, sl
    fb06:	ea42 0308 	orr.w	r3, r2, r8
    fb0a:	f8cb 3000 	str.w	r3, [fp]
    fb0e:	5831      	ldr	r1, [r6, r0]
    fb10:	2200      	movs	r2, #0
    fb12:	ea09 0301 	and.w	r3, r9, r1
    fb16:	5033      	str	r3, [r6, r0]
    fb18:	603a      	str	r2, [r7, #0]
    fb1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    fb1c:	f7ff f896 	bl	ec4c <am_hal_interrupt_master_set>
    fb20:	e6f8      	b.n	f914 <am_hal_iom_workaround_word_write+0x3a0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb22:	484f      	ldr	r0, [pc, #316]	; (fc60 <am_hal_iom_workaround_word_write+0x6ec>)
    fb24:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fb26:	f3c2 43c2 	ubfx	r3, r2, #19, #3
    fb2a:	2b06      	cmp	r3, #6
    fb2c:	f000 80da 	beq.w	fce4 <am_hal_iom_workaround_word_write+0x770>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb30:	3024      	adds	r0, #36	; 0x24
    fb32:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fb34:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    fb38:	2906      	cmp	r1, #6
    fb3a:	f47f aedd 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb3e:	f04f 082e 	mov.w	r8, #46	; 0x2e
    fb42:	4683      	mov	fp, r0
    fb44:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fb46:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    fb4a:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb4e:	262c      	movs	r6, #44	; 0x2c
    fb50:	e7a3      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fb52:	4a43      	ldr	r2, [pc, #268]	; (fc60 <am_hal_iom_workaround_word_write+0x6ec>)
    fb54:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fb56:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    fb5a:	2e04      	cmp	r6, #4
    fb5c:	f000 80cc 	beq.w	fcf8 <am_hal_iom_workaround_word_write+0x784>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb60:	3224      	adds	r2, #36	; 0x24
    fb62:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fb64:	f3c1 67c2 	ubfx	r7, r1, #27, #3
    fb68:	2f06      	cmp	r7, #6
    fb6a:	f47f aec5 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb6e:	f04f 082f 	mov.w	r8, #47	; 0x2f
    fb72:	4693      	mov	fp, r2
    fb74:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fb76:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    fb7a:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb7e:	262c      	movs	r6, #44	; 0x2c
    fb80:	e78b      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fb82:	4938      	ldr	r1, [pc, #224]	; (fc64 <am_hal_iom_workaround_word_write+0x6f0>)
    fb84:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fb86:	f3c7 60c2 	ubfx	r0, r7, #27, #3
    fb8a:	2804      	cmp	r0, #4
    fb8c:	f47f aeb4 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fb90:	f04f 0823 	mov.w	r8, #35	; 0x23
    fb94:	468b      	mov	fp, r1
    fb96:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fb98:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    fb9c:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fba0:	2620      	movs	r6, #32
    fba2:	e77a      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fba4:	4e30      	ldr	r6, [pc, #192]	; (fc68 <am_hal_iom_workaround_word_write+0x6f4>)
    fba6:	6833      	ldr	r3, [r6, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fba8:	f3c3 42c2 	ubfx	r2, r3, #19, #3
    fbac:	2a06      	cmp	r2, #6
    fbae:	f47f aea3 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fbb2:	f04f 0826 	mov.w	r8, #38	; 0x26
    fbb6:	46b3      	mov	fp, r6
    fbb8:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fbba:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    fbbe:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fbc2:	2624      	movs	r6, #36	; 0x24
    fbc4:	e769      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    fbc6:	4a29      	ldr	r2, [pc, #164]	; (fc6c <am_hal_iom_workaround_word_write+0x6f8>)
    fbc8:	4818      	ldr	r0, [pc, #96]	; (fc2c <am_hal_iom_workaround_word_write+0x6b8>)
    fbca:	f640 7145 	movw	r1, #3909	; 0xf45
    fbce:	f7fe feed 	bl	e9ac <am_hal_debug_error>
    fbd2:	e611      	b.n	f7f8 <am_hal_iom_workaround_word_write+0x284>
    fbd4:	4a25      	ldr	r2, [pc, #148]	; (fc6c <am_hal_iom_workaround_word_write+0x6f8>)
    fbd6:	4815      	ldr	r0, [pc, #84]	; (fc2c <am_hal_iom_workaround_word_write+0x6b8>)
    fbd8:	f640 7145 	movw	r1, #3909	; 0xf45
    fbdc:	f7fe fee6 	bl	e9ac <am_hal_debug_error>
    fbe0:	e5f4      	b.n	f7cc <am_hal_iom_workaround_word_write+0x258>
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    fbe2:	4a23      	ldr	r2, [pc, #140]	; (fc70 <am_hal_iom_workaround_word_write+0x6fc>)
    fbe4:	4811      	ldr	r0, [pc, #68]	; (fc2c <am_hal_iom_workaround_word_write+0x6b8>)
    fbe6:	f240 41e5 	movw	r1, #1253	; 0x4e5
    fbea:	f7fe fedf 	bl	e9ac <am_hal_debug_error>
    fbee:	e54b      	b.n	f688 <am_hal_iom_workaround_word_write+0x114>
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    fbf0:	4a20      	ldr	r2, [pc, #128]	; (fc74 <am_hal_iom_workaround_word_write+0x700>)
    fbf2:	480e      	ldr	r0, [pc, #56]	; (fc2c <am_hal_iom_workaround_word_write+0x6b8>)
    fbf4:	f240 41ba 	movw	r1, #1210	; 0x4ba
    fbf8:	f7fe fed8 	bl	e9ac <am_hal_debug_error>
    fbfc:	e4cd      	b.n	f59a <am_hal_iom_workaround_word_write+0x26>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fbfe:	481e      	ldr	r0, [pc, #120]	; (fc78 <am_hal_iom_workaround_word_write+0x704>)
    fc00:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fc02:	f3c2 23c2 	ubfx	r3, r2, #11, #3
    fc06:	2b06      	cmp	r3, #6
    fc08:	d04e      	beq.n	fca8 <am_hal_iom_workaround_word_write+0x734>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fc0a:	3004      	adds	r0, #4
    fc0c:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    fc0e:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    fc12:	2906      	cmp	r1, #6
    fc14:	f47f ae70 	bne.w	f8f8 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fc18:	f04f 0822 	mov.w	r8, #34	; 0x22
    fc1c:	4683      	mov	fp, r0
    fc1e:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fc20:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    fc24:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fc28:	2620      	movs	r6, #32
    fc2a:	e736      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fc2c:	000148e8 	.word	0x000148e8
    fc30:	400100ec 	.word	0x400100ec
    fc34:	40010094 	.word	0x40010094
    fc38:	40010060 	.word	0x40010060
    fc3c:	4001010c 	.word	0x4001010c
    fc40:	50008110 	.word	0x50008110
    fc44:	0800009d 	.word	0x0800009d
    fc48:	5000810c 	.word	0x5000810c
    fc4c:	365c0400 	.word	0x365c0400
    fc50:	40010010 	.word	0x40010010
    fc54:	40010028 	.word	0x40010028
    fc58:	40010090 	.word	0x40010090
    fc5c:	400100e0 	.word	0x400100e0
    fc60:	40010008 	.word	0x40010008
    fc64:	40010020 	.word	0x40010020
    fc68:	40010024 	.word	0x40010024
    fc6c:	000148b4 	.word	0x000148b4
    fc70:	000149d8 	.word	0x000149d8
    fc74:	000149c0 	.word	0x000149c0
    fc78:	4001001c 	.word	0x4001001c
    fc7c:	40010054 	.word	0x40010054
    fc80:	4001002c 	.word	0x4001002c
    fc84:	40010040 	.word	0x40010040
            bRising = true;
    fc88:	2001      	movs	r0, #1
    fc8a:	9006      	str	r0, [sp, #24]
    fc8c:	e589      	b.n	f7a2 <am_hal_iom_workaround_word_write+0x22e>
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    fc8e:	2001      	movs	r0, #1
    fc90:	e56d      	b.n	f76e <am_hal_iom_workaround_word_write+0x1fa>
    fc92:	f04f 0c01 	mov.w	ip, #1
    fc96:	e4b2      	b.n	f5fe <am_hal_iom_workaround_word_write+0x8a>
    fc98:	2002      	movs	r0, #2
    fc9a:	e568      	b.n	f76e <am_hal_iom_workaround_word_write+0x1fa>
    fc9c:	2003      	movs	r0, #3
    fc9e:	e566      	b.n	f76e <am_hal_iom_workaround_word_write+0x1fa>
    fca0:	2004      	movs	r0, #4
    fca2:	e564      	b.n	f76e <am_hal_iom_workaround_word_write+0x1fa>
    fca4:	2005      	movs	r0, #5
    fca6:	e562      	b.n	f76e <am_hal_iom_workaround_word_write+0x1fa>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fca8:	f04f 081d 	mov.w	r8, #29
    fcac:	4683      	mov	fp, r0
    fcae:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcb0:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fcb4:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fcb8:	261c      	movs	r6, #28
    fcba:	e6ee      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcbc:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fcc0:	f04f 0812 	mov.w	r8, #18
    fcc4:	4693      	mov	fp, r2
    fcc6:	4656      	mov	r6, sl
    fcc8:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcca:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    fcce:	e6e4      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fcd0:	f04f 0811 	mov.w	r8, #17
    fcd4:	46bb      	mov	fp, r7
    fcd6:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcd8:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fcdc:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fce0:	2610      	movs	r6, #16
    fce2:	e6da      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
    fce4:	f04f 080a 	mov.w	r8, #10
    fce8:	4683      	mov	fp, r0
    fcea:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcec:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    fcf0:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fcf4:	2608      	movs	r6, #8
    fcf6:	e6d0      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fcf8:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    fcfc:	f04f 0809 	mov.w	r8, #9
    fd00:	4693      	mov	fp, r2
    fd02:	4656      	mov	r6, sl
    fd04:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    fd06:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    fd0a:	e6c6      	b.n	fa9a <am_hal_iom_workaround_word_write+0x526>

0000fd0c <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    fd10:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    fd14:	3404      	adds	r4, #4
    fd16:	0324      	lsls	r4, r4, #12
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fd18:	4606      	mov	r6, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    fd1a:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    fd1e:	4d6b      	ldr	r5, [pc, #428]	; (fecc <am_hal_iom_spi_write_nb.part.6+0x1c0>)
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fd20:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    fd24:	f000 0708 	and.w	r7, r0, #8
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    fd28:	2f00      	cmp	r7, #0
    g_bIomBusy[ui32Module] = true;
    fd2a:	f04f 0e01 	mov.w	lr, #1
    fd2e:	f805 e006 	strb.w	lr, [r5, r6]
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fd32:	4617      	mov	r7, r2
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    fd34:	f240 70ff 	movw	r0, #2047	; 0x7ff
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    fd38:	bf15      	itete	ne
    fd3a:	223c      	movne	r2, #60	; 0x3c
    fd3c:	227c      	moveq	r2, #124	; 0x7c
    fd3e:	2540      	movne	r5, #64	; 0x40
    fd40:	2580      	moveq	r5, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    fd42:	2e04      	cmp	r6, #4
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fd44:	4688      	mov	r8, r1
    fd46:	469a      	mov	sl, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    fd48:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    fd4c:	f000 808f 	beq.w	fe6e <am_hal_iom_spi_write_nb.part.6+0x162>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    fd50:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    fd54:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    fd58:	4555      	cmp	r5, sl
    fd5a:	bf28      	it	cs
    fd5c:	4655      	movcs	r5, sl
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    fd5e:	f013 0f08 	tst.w	r3, #8
    fd62:	bf14      	ite	ne
    fd64:	2340      	movne	r3, #64	; 0x40
    fd66:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    fd68:	1a99      	subs	r1, r3, r2
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    fd6a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    fd6e:	4285      	cmp	r5, r0
    fd70:	f200 809d 	bhi.w	feae <am_hal_iom_spi_write_nb.part.6+0x1a2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    fd74:	2d00      	cmp	r5, #0
    fd76:	d077      	beq.n	fe68 <am_hal_iom_spi_write_nb.part.6+0x15c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    fd78:	463a      	mov	r2, r7
    fd7a:	43f9      	mvns	r1, r7
    fd7c:	f852 3b04 	ldr.w	r3, [r2], #4
    fd80:	6023      	str	r3, [r4, #0]
    fd82:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    fd84:	1bd0      	subs	r0, r2, r7
    fd86:	4429      	add	r1, r5
    fd88:	4285      	cmp	r5, r0
    fd8a:	f3c1 0182 	ubfx	r1, r1, #2, #3
    fd8e:	d941      	bls.n	fe14 <am_hal_iom_spi_write_nb.part.6+0x108>
    fd90:	b319      	cbz	r1, fdda <am_hal_iom_spi_write_nb.part.6+0xce>
    fd92:	2901      	cmp	r1, #1
    fd94:	d01b      	beq.n	fdce <am_hal_iom_spi_write_nb.part.6+0xc2>
    fd96:	2902      	cmp	r1, #2
    fd98:	d016      	beq.n	fdc8 <am_hal_iom_spi_write_nb.part.6+0xbc>
    fd9a:	2903      	cmp	r1, #3
    fd9c:	d011      	beq.n	fdc2 <am_hal_iom_spi_write_nb.part.6+0xb6>
    fd9e:	2904      	cmp	r1, #4
    fda0:	d00c      	beq.n	fdbc <am_hal_iom_spi_write_nb.part.6+0xb0>
    fda2:	2905      	cmp	r1, #5
    fda4:	d007      	beq.n	fdb6 <am_hal_iom_spi_write_nb.part.6+0xaa>
    fda6:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    fda8:	bf1c      	itt	ne
    fdaa:	f852 0b04 	ldrne.w	r0, [r2], #4
    fdae:	6020      	strne	r0, [r4, #0]
    fdb0:	f852 3b04 	ldr.w	r3, [r2], #4
    fdb4:	6023      	str	r3, [r4, #0]
    fdb6:	f852 0b04 	ldr.w	r0, [r2], #4
    fdba:	6020      	str	r0, [r4, #0]
    fdbc:	f852 1b04 	ldr.w	r1, [r2], #4
    fdc0:	6021      	str	r1, [r4, #0]
    fdc2:	f852 3b04 	ldr.w	r3, [r2], #4
    fdc6:	6023      	str	r3, [r4, #0]
    fdc8:	f852 0b04 	ldr.w	r0, [r2], #4
    fdcc:	6020      	str	r0, [r4, #0]
    fdce:	f852 1b04 	ldr.w	r1, [r2], #4
    fdd2:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    fdd4:	1bd3      	subs	r3, r2, r7
    fdd6:	429d      	cmp	r5, r3
    fdd8:	d91c      	bls.n	fe14 <am_hal_iom_spi_write_nb.part.6+0x108>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    fdda:	4694      	mov	ip, r2
    fddc:	3220      	adds	r2, #32
    fdde:	f85c 0b04 	ldr.w	r0, [ip], #4
    fde2:	6020      	str	r0, [r4, #0]
    fde4:	f852 1c1c 	ldr.w	r1, [r2, #-28]
    fde8:	6021      	str	r1, [r4, #0]
    fdea:	f8dc 3004 	ldr.w	r3, [ip, #4]
    fdee:	6023      	str	r3, [r4, #0]
    fdf0:	f852 0c14 	ldr.w	r0, [r2, #-20]
    fdf4:	6020      	str	r0, [r4, #0]
    fdf6:	f852 1c10 	ldr.w	r1, [r2, #-16]
    fdfa:	6021      	str	r1, [r4, #0]
    fdfc:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    fe00:	6023      	str	r3, [r4, #0]
    fe02:	f852 0c08 	ldr.w	r0, [r2, #-8]
    fe06:	6020      	str	r0, [r4, #0]
    fe08:	f852 1c04 	ldr.w	r1, [r2, #-4]
    fe0c:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    fe0e:	1bd3      	subs	r3, r2, r7
    fe10:	429d      	cmp	r5, r3
    fe12:	d8e2      	bhi.n	fdda <am_hal_iom_spi_write_nb.part.6+0xce>
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    fe14:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    fe18:	4a2d      	ldr	r2, [pc, #180]	; (fed0 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    fe1a:	00b0      	lsls	r0, r6, #2
    fe1c:	1813      	adds	r3, r2, r0
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    fe1e:	f025 0c03 	bic.w	ip, r5, #3
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    fe22:	2101      	movs	r1, #1
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    fe24:	ebaa 0505 	sub.w	r5, sl, r5
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    fe28:	4467      	add	r7, ip
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    fe2a:	9e09      	ldr	r6, [sp, #36]	; 0x24
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    fe2c:	5011      	str	r1, [r2, r0]
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    fe2e:	611e      	str	r6, [r3, #16]
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    fe30:	f8c3 900c 	str.w	r9, [r3, #12]
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    fe34:	609d      	str	r5, [r3, #8]
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    fe36:	605f      	str	r7, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    fe38:	f1ba 0f00 	cmp.w	sl, #0
    fe3c:	d03e      	beq.n	febc <am_hal_iom_spi_write_nb.part.6+0x1b0>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    fe3e:	ea4f 4708 	mov.w	r7, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    fe42:	f029 4223 	bic.w	r2, r9, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    fe46:	f407 20e0 	and.w	r0, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    fe4a:	f002 23ff 	and.w	r3, r2, #4278255360	; 0xff00ff00
    fe4e:	ea40 0103 	orr.w	r1, r0, r3
    ui32Command |= (ui32NumBytes & 0xFF);
    fe52:	fa5f f58a 	uxtb.w	r5, sl
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    fe56:	ea4f 36ca 	mov.w	r6, sl, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    fe5a:	4329      	orrs	r1, r5
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    fe5c:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    fe60:	ea41 0207 	orr.w	r2, r1, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    fe64:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
}
    fe68:	2000      	movs	r0, #0
    fe6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    fe6e:	4b19      	ldr	r3, [pc, #100]	; (fed4 <am_hal_iom_spi_write_nb.part.6+0x1c8>)
    fe70:	6819      	ldr	r1, [r3, #0]
    fe72:	b2c8      	uxtb	r0, r1
    fe74:	2820      	cmp	r0, #32
    fe76:	f47f af6b 	bne.w	fd50 <am_hal_iom_spi_write_nb.part.6+0x44>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ?  ui32NumBytes :
    fe7a:	4552      	cmp	r2, sl
    fe7c:	bf28      	it	cs
    fe7e:	4652      	movcs	r2, sl
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    fe80:	4d13      	ldr	r5, [pc, #76]	; (fed0 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    fe82:	f022 0603 	bic.w	r6, r2, #3
    fe86:	443e      	add	r6, r7
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    fe88:	ebaa 0402 	sub.w	r4, sl, r2
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    fe8c:	4639      	mov	r1, r7
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    fe8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    fe90:	656e      	str	r6, [r5, #84]	; 0x54
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    fe92:	4640      	mov	r0, r8
    fe94:	4652      	mov	r2, sl
    fe96:	464b      	mov	r3, r9
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    fe98:	65ac      	str	r4, [r5, #88]	; 0x58
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    fe9a:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    fe9e:	662f      	str	r7, [r5, #96]	; 0x60
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    fea0:	f8c5 905c 	str.w	r9, [r5, #92]	; 0x5c
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    fea4:	f7ff fb66 	bl	f574 <am_hal_iom_workaround_word_write>
}
    fea8:	2000      	movs	r0, #0
    feaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    feae:	4a0a      	ldr	r2, [pc, #40]	; (fed8 <am_hal_iom_spi_write_nb.part.6+0x1cc>)
    feb0:	480a      	ldr	r0, [pc, #40]	; (fedc <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    feb2:	f640 7145 	movw	r1, #3909	; 0xf45
    feb6:	f7fe fd79 	bl	e9ac <am_hal_debug_error>
    feba:	e75d      	b.n	fd78 <am_hal_iom_spi_write_nb.part.6+0x6c>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    febc:	4a08      	ldr	r2, [pc, #32]	; (fee0 <am_hal_iom_spi_write_nb.part.6+0x1d4>)
    febe:	4807      	ldr	r0, [pc, #28]	; (fedc <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    fec0:	f640 21da 	movw	r1, #2778	; 0xada
    fec4:	f7fe fd72 	bl	e9ac <am_hal_debug_error>
    fec8:	e7b9      	b.n	fe3e <am_hal_iom_spi_write_nb.part.6+0x132>
    feca:	bf00      	nop
    fecc:	100025fc 	.word	0x100025fc
    fed0:	10002940 	.word	0x10002940
    fed4:	4002000c 	.word	0x4002000c
    fed8:	000148b4 	.word	0x000148b4
    fedc:	000148e8 	.word	0x000148e8
    fee0:	0001499c 	.word	0x0001499c

0000fee4 <am_hal_iom_spi_read_nb.part.7>:
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    fee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    fee8:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    feec:	3704      	adds	r7, #4
    feee:	033f      	lsls	r7, r7, #12
    g_bIomBusy[ui32Module] = true;
    fef0:	f8df a0f8 	ldr.w	sl, [pc, #248]	; ffec <am_hal_iom_spi_read_nb.part.7+0x108>
    fef4:	f04f 0801 	mov.w	r8, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    fef8:	f240 7bff 	movw	fp, #2047	; 0x7ff
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    fefc:	2804      	cmp	r0, #4
    g_bIomBusy[ui32Module] = true;
    fefe:	f80a 8000 	strb.w	r8, [sl, r0]
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    ff02:	b083      	sub	sp, #12
    ff04:	4604      	mov	r4, r0
    ff06:	460e      	mov	r6, r1
    ff08:	4691      	mov	r9, r2
    ff0a:	461d      	mov	r5, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    ff0c:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    ff10:	d02c      	beq.n	ff6c <am_hal_iom_spi_read_nb.part.7+0x88>
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    ff12:	482f      	ldr	r0, [pc, #188]	; (ffd0 <am_hal_iom_spi_read_nb.part.7+0xec>)
    ff14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ff18:	00a2      	lsls	r2, r4, #2
    ff1a:	1883      	adds	r3, r0, r2
    ff1c:	2102      	movs	r1, #2
    ff1e:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    ff20:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    ff22:	980c      	ldr	r0, [sp, #48]	; 0x30
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    ff24:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    ff28:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    ff2a:	611c      	str	r4, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    ff2c:	60d8      	str	r0, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ff2e:	b92d      	cbnz	r5, ff3c <am_hal_iom_spi_read_nb.part.7+0x58>
    ff30:	4a28      	ldr	r2, [pc, #160]	; (ffd4 <am_hal_iom_spi_read_nb.part.7+0xf0>)
    ff32:	4829      	ldr	r0, [pc, #164]	; (ffd8 <am_hal_iom_spi_read_nb.part.7+0xf4>)
    ff34:	f640 21da 	movw	r1, #2778	; 0xada
    ff38:	f7fe fd38 	bl	e9ac <am_hal_debug_error>
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ff3c:	03ea      	lsls	r2, r5, #15
    ui32Command |= (ui32NumBytes & 0xFF);
    ff3e:	fa5f fc85 	uxtb.w	ip, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    ff42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    ff44:	f002 61f0 	and.w	r1, r2, #125829120	; 0x7800000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    ff48:	0436      	lsls	r6, r6, #16
    ui32Command |= (ui32NumBytes & 0xFF);
    ff4a:	f04c 4500 	orr.w	r5, ip, #2147483648	; 0x80000000
    ui32Command |= ui32Options & 0x5C00FF00;
    ff4e:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    ff52:	f406 24e0 	and.w	r4, r6, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    ff56:	430d      	orrs	r5, r1
    ui32Command |= ui32Options & 0x5C00FF00;
    ff58:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    ff5c:	432c      	orrs	r4, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    ff5e:	4322      	orrs	r2, r4
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    ff60:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
    return ui32Status;
    ff64:	2000      	movs	r0, #0
}
    ff66:	b003      	add	sp, #12
    ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    ff6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff6e:	f013 4180 	ands.w	r1, r3, #1073741824	; 0x40000000
    ff72:	d1ce      	bne.n	ff12 <am_hal_iom_spi_read_nb.part.7+0x2e>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    ff74:	4819      	ldr	r0, [pc, #100]	; (ffdc <am_hal_iom_spi_read_nb.part.7+0xf8>)
    ff76:	6802      	ldr	r2, [r0, #0]
    ff78:	b2d3      	uxtb	r3, r2
    ff7a:	2b20      	cmp	r3, #32
    ff7c:	d1c9      	bne.n	ff12 <am_hal_iom_spi_read_nb.part.7+0x2e>
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    ff7e:	4818      	ldr	r0, [pc, #96]	; (ffe0 <am_hal_iom_spi_read_nb.part.7+0xfc>)
    ff80:	6803      	ldr	r3, [r0, #0]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    ff82:	4817      	ldr	r0, [pc, #92]	; (ffe0 <am_hal_iom_spi_read_nb.part.7+0xfc>)
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    ff84:	9301      	str	r3, [sp, #4]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    ff86:	6001      	str	r1, [r0, #0]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    ff88:	460a      	mov	r2, r1
    ff8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff8c:	4630      	mov	r0, r6
    ff8e:	f041 5380 	orr.w	r3, r1, #268435456	; 0x10000000
    ff92:	4649      	mov	r1, r9
    ff94:	f7ff faee 	bl	f574 <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    ff98:	4a12      	ldr	r2, [pc, #72]	; (ffe4 <am_hal_iom_spi_read_nb.part.7+0x100>)
    ff9a:	4643      	mov	r3, r8
    ff9c:	6910      	ldr	r0, [r2, #16]
    ff9e:	f507 7101 	add.w	r1, r7, #516	; 0x204
    ffa2:	4642      	mov	r2, r8
    ffa4:	f7fe fd08 	bl	e9b8 <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    ffa8:	2801      	cmp	r0, #1
    ffaa:	d004      	beq.n	ffb6 <am_hal_iom_spi_read_nb.part.7+0xd2>
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    ffac:	4f0e      	ldr	r7, [pc, #56]	; (ffe8 <am_hal_iom_spi_read_nb.part.7+0x104>)
            return ui32Status;
    ffae:	4640      	mov	r0, r8
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    ffb0:	f887 8004 	strb.w	r8, [r7, #4]
    ffb4:	e7d7      	b.n	ff66 <am_hal_iom_spi_read_nb.part.7+0x82>
        ui32Options |= AM_HAL_IOM_RAW;
    ffb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    ffb8:	4909      	ldr	r1, [pc, #36]	; (ffe0 <am_hal_iom_spi_read_nb.part.7+0xfc>)
        g_bIomBusy[ui32Module] = true;
    ffba:	f88a 0004 	strb.w	r0, [sl, #4]
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    ffbe:	9a01      	ldr	r2, [sp, #4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    ffc0:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    ffc4:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    ffc8:	900c      	str	r0, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    ffca:	600a      	str	r2, [r1, #0]
    ffcc:	e7a1      	b.n	ff12 <am_hal_iom_spi_read_nb.part.7+0x2e>
    ffce:	bf00      	nop
    ffd0:	10002940 	.word	0x10002940
    ffd4:	0001499c 	.word	0x0001499c
    ffd8:	000148e8 	.word	0x000148e8
    ffdc:	4002000c 	.word	0x4002000c
    ffe0:	50008200 	.word	0x50008200
    ffe4:	10002928 	.word	0x10002928
    ffe8:	10002604 	.word	0x10002604
    ffec:	100025fc 	.word	0x100025fc

0000fff0 <am_hal_iom_spi_write_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    fff0:	2805      	cmp	r0, #5
    fff2:	d901      	bls.n	fff8 <am_hal_iom_spi_write_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    fff4:	2002      	movs	r0, #2
    fff6:	4770      	bx	lr
{
    fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fffc:	4dc1      	ldr	r5, [pc, #772]	; (10304 <am_hal_iom_spi_write_nq+0x314>)
    fffe:	b083      	sub	sp, #12
    while ( g_bIomBusy[ui32Module] );
   10000:	5c2c      	ldrb	r4, [r5, r0]
   10002:	f004 06ff 	and.w	r6, r4, #255	; 0xff
   10006:	2c00      	cmp	r4, #0
   10008:	d1fa      	bne.n	10000 <am_hal_iom_spi_write_nq+0x10>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   1000a:	f8df 930c 	ldr.w	r9, [pc, #780]	; 10318 <am_hal_iom_spi_write_nq+0x328>
    if (ui32NumBytes == 0)
   1000e:	1e5f      	subs	r7, r3, #1
   10010:	f640 75fe 	movw	r5, #4094	; 0xffe
   10014:	42af      	cmp	r7, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10016:	f809 6000 	strb.w	r6, [r9, r0]
    if (ui32NumBytes == 0)
   1001a:	d906      	bls.n	1002a <am_hal_iom_spi_write_nq+0x3a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   1001c:	2403      	movs	r4, #3
   1001e:	f809 4000 	strb.w	r4, [r9, r0]
        return ui32Status;
   10022:	4620      	mov	r0, r4
}
   10024:	b003      	add	sp, #12
   10026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1002a:	468b      	mov	fp, r1
   1002c:	9000      	str	r0, [sp, #0]
   1002e:	4601      	mov	r1, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
   10030:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   10034:	3004      	adds	r0, #4
   10036:	0304      	lsls	r4, r0, #12
   10038:	4698      	mov	r8, r3
   1003a:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   1003e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
   10042:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
   10046:	f005 0008 	and.w	r0, r5, #8
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1004a:	2800      	cmp	r0, #0
   1004c:	4617      	mov	r7, r2
   1004e:	bf18      	it	ne
   10050:	f04f 0e3c 	movne.w	lr, #60	; 0x3c
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10054:	f240 72ff 	movw	r2, #2047	; 0x7ff
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   10058:	bf0a      	itet	eq
   1005a:	f04f 0e7c 	moveq.w	lr, #124	; 0x7c
   1005e:	2640      	movne	r6, #64	; 0x40
   10060:	2680      	moveq	r6, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
   10062:	2904      	cmp	r1, #4
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10064:	9301      	str	r3, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10066:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
   1006a:	f504 7a8e 	add.w	sl, r4, #284	; 0x11c
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
   1006e:	d105      	bne.n	1007c <am_hal_iom_spi_write_nq+0x8c>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
   10070:	4aa5      	ldr	r2, [pc, #660]	; (10308 <am_hal_iom_spi_write_nq+0x318>)
   10072:	6815      	ldr	r5, [r2, #0]
   10074:	b2eb      	uxtb	r3, r5
   10076:	2b20      	cmp	r3, #32
   10078:	f000 8136 	beq.w	102e8 <am_hal_iom_spi_write_nq+0x2f8>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1007c:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10080:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
   10084:	4546      	cmp	r6, r8
   10086:	bf28      	it	cs
   10088:	4646      	movcs	r6, r8
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1008a:	f010 0f08 	tst.w	r0, #8
   1008e:	bf14      	ite	ne
   10090:	2040      	movne	r0, #64	; 0x40
   10092:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10094:	1a42      	subs	r2, r0, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   10096:	f002 05fc 	and.w	r5, r2, #252	; 0xfc
   1009a:	42ae      	cmp	r6, r5
   1009c:	f200 811d 	bhi.w	102da <am_hal_iom_spi_write_nq+0x2ea>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   100a0:	463b      	mov	r3, r7
   100a2:	43f8      	mvns	r0, r7
   100a4:	f853 1b04 	ldr.w	r1, [r3], #4
   100a8:	6021      	str	r1, [r4, #0]
   100aa:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   100ac:	1bdd      	subs	r5, r3, r7
   100ae:	4430      	add	r0, r6
   100b0:	42ae      	cmp	r6, r5
   100b2:	f3c0 0282 	ubfx	r2, r0, #2, #3
   100b6:	d941      	bls.n	1013c <am_hal_iom_spi_write_nq+0x14c>
   100b8:	b31a      	cbz	r2, 10102 <am_hal_iom_spi_write_nq+0x112>
   100ba:	2a01      	cmp	r2, #1
   100bc:	d01b      	beq.n	100f6 <am_hal_iom_spi_write_nq+0x106>
   100be:	2a02      	cmp	r2, #2
   100c0:	d016      	beq.n	100f0 <am_hal_iom_spi_write_nq+0x100>
   100c2:	2a03      	cmp	r2, #3
   100c4:	d011      	beq.n	100ea <am_hal_iom_spi_write_nq+0xfa>
   100c6:	2a04      	cmp	r2, #4
   100c8:	d00c      	beq.n	100e4 <am_hal_iom_spi_write_nq+0xf4>
   100ca:	2a05      	cmp	r2, #5
   100cc:	d007      	beq.n	100de <am_hal_iom_spi_write_nq+0xee>
   100ce:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   100d0:	bf1c      	itt	ne
   100d2:	f853 2b04 	ldrne.w	r2, [r3], #4
   100d6:	6022      	strne	r2, [r4, #0]
   100d8:	f853 0b04 	ldr.w	r0, [r3], #4
   100dc:	6020      	str	r0, [r4, #0]
   100de:	f853 1b04 	ldr.w	r1, [r3], #4
   100e2:	6021      	str	r1, [r4, #0]
   100e4:	f853 5b04 	ldr.w	r5, [r3], #4
   100e8:	6025      	str	r5, [r4, #0]
   100ea:	f853 2b04 	ldr.w	r2, [r3], #4
   100ee:	6022      	str	r2, [r4, #0]
   100f0:	f853 0b04 	ldr.w	r0, [r3], #4
   100f4:	6020      	str	r0, [r4, #0]
   100f6:	f853 1b04 	ldr.w	r1, [r3], #4
   100fa:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   100fc:	1bdd      	subs	r5, r3, r7
   100fe:	42ae      	cmp	r6, r5
   10100:	d91c      	bls.n	1013c <am_hal_iom_spi_write_nq+0x14c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10102:	469c      	mov	ip, r3
   10104:	3320      	adds	r3, #32
   10106:	f85c 2b04 	ldr.w	r2, [ip], #4
   1010a:	6022      	str	r2, [r4, #0]
   1010c:	f853 0c1c 	ldr.w	r0, [r3, #-28]
   10110:	6020      	str	r0, [r4, #0]
   10112:	f8dc 1004 	ldr.w	r1, [ip, #4]
   10116:	6021      	str	r1, [r4, #0]
   10118:	f853 5c14 	ldr.w	r5, [r3, #-20]
   1011c:	6025      	str	r5, [r4, #0]
   1011e:	f853 2c10 	ldr.w	r2, [r3, #-16]
   10122:	6022      	str	r2, [r4, #0]
   10124:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   10128:	6020      	str	r0, [r4, #0]
   1012a:	f853 1c08 	ldr.w	r1, [r3, #-8]
   1012e:	6021      	str	r1, [r4, #0]
   10130:	f853 5c04 	ldr.w	r5, [r3, #-4]
   10134:	6025      	str	r5, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10136:	1bda      	subs	r2, r3, r7
   10138:	4296      	cmp	r6, r2
   1013a:	d8e2      	bhi.n	10102 <am_hal_iom_spi_write_nq+0x112>
    ui32Command |= ui32Options & 0x5C00FF00;
   1013c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   1013e:	ea4f 4e0b 	mov.w	lr, fp, lsl #16
   10142:	f40e 20e0 	and.w	r0, lr, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
   10146:	fa5f f388 	uxtb.w	r3, r8
    ui32Command |= ui32Options & 0x5C00FF00;
   1014a:	f021 4523 	bic.w	r5, r1, #2734686208	; 0xa3000000
   1014e:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   10150:	ea4f 3cc8 	mov.w	ip, r8, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
   10154:	f005 20ff 	and.w	r0, r5, #4278255360	; 0xff00ff00
   10158:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   1015a:	f00c 62f0 	and.w	r2, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
   1015e:	4313      	orrs	r3, r2
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
   10160:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pui32Data += ui32TransferSize >> 2;
   10164:	f026 0e03 	bic.w	lr, r6, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
   10168:	ebb8 0606 	subs.w	r6, r8, r6
    pui32Data += ui32TransferSize >> 2;
   1016c:	4477      	add	r7, lr
   1016e:	bf08      	it	eq
   10170:	f504 7b01 	addeq.w	fp, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
   10174:	f000 8083 	beq.w	1027e <am_hal_iom_spi_write_nq+0x28e>
   10178:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1017c:	07da      	lsls	r2, r3, #31
   1017e:	f504 7b01 	add.w	fp, r4, #516	; 0x204
   10182:	d47c      	bmi.n	1027e <am_hal_iom_spi_write_nq+0x28e>
   10184:	f504 7580 	add.w	r5, r4, #256	; 0x100
   10188:	46a8      	mov	r8, r5
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1018a:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   1018e:	f8d8 0000 	ldr.w	r0, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   10192:	f011 0f08 	tst.w	r1, #8
   10196:	bf14      	ite	ne
   10198:	2140      	movne	r1, #64	; 0x40
   1019a:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   1019c:	1a0a      	subs	r2, r1, r0
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
   1019e:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
   101a2:	42b3      	cmp	r3, r6
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   101a4:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   101a8:	f8d8 0000 	ldr.w	r0, [r8]
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
   101ac:	bf3b      	ittet	cc
   101ae:	f023 0303 	biccc.w	r3, r3, #3
   101b2:	1af5      	subcc	r5, r6, r3
        if ( ui32NumBytes <= ui32SpaceInFifo )
   101b4:	2500      	movcs	r5, #0
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
   101b6:	461e      	movcc	r6, r3
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   101b8:	f011 0f08 	tst.w	r1, #8
   101bc:	bf14      	ite	ne
   101be:	2140      	movne	r1, #64	; 0x40
   101c0:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   101c2:	1a0a      	subs	r2, r1, r0
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   101c4:	f002 0cfc 	and.w	ip, r2, #252	; 0xfc
   101c8:	4566      	cmp	r6, ip
   101ca:	d86e      	bhi.n	102aa <am_hal_iom_spi_write_nq+0x2ba>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   101cc:	2e00      	cmp	r6, #0
   101ce:	d04d      	beq.n	1026c <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   101d0:	463b      	mov	r3, r7
   101d2:	43f8      	mvns	r0, r7
   101d4:	f853 1b04 	ldr.w	r1, [r3], #4
   101d8:	6021      	str	r1, [r4, #0]
   101da:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   101dc:	1bd9      	subs	r1, r3, r7
   101de:	4430      	add	r0, r6
   101e0:	428e      	cmp	r6, r1
   101e2:	f3c0 0282 	ubfx	r2, r0, #2, #3
   101e6:	d941      	bls.n	1026c <am_hal_iom_spi_write_nq+0x27c>
   101e8:	b31a      	cbz	r2, 10232 <am_hal_iom_spi_write_nq+0x242>
   101ea:	2a01      	cmp	r2, #1
   101ec:	d01b      	beq.n	10226 <am_hal_iom_spi_write_nq+0x236>
   101ee:	2a02      	cmp	r2, #2
   101f0:	d016      	beq.n	10220 <am_hal_iom_spi_write_nq+0x230>
   101f2:	2a03      	cmp	r2, #3
   101f4:	d011      	beq.n	1021a <am_hal_iom_spi_write_nq+0x22a>
   101f6:	2a04      	cmp	r2, #4
   101f8:	d00c      	beq.n	10214 <am_hal_iom_spi_write_nq+0x224>
   101fa:	2a05      	cmp	r2, #5
   101fc:	d007      	beq.n	1020e <am_hal_iom_spi_write_nq+0x21e>
   101fe:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10200:	bf1c      	itt	ne
   10202:	f853 2b04 	ldrne.w	r2, [r3], #4
   10206:	6022      	strne	r2, [r4, #0]
   10208:	f853 0b04 	ldr.w	r0, [r3], #4
   1020c:	6020      	str	r0, [r4, #0]
   1020e:	f853 1b04 	ldr.w	r1, [r3], #4
   10212:	6021      	str	r1, [r4, #0]
   10214:	f853 2b04 	ldr.w	r2, [r3], #4
   10218:	6022      	str	r2, [r4, #0]
   1021a:	f853 0b04 	ldr.w	r0, [r3], #4
   1021e:	6020      	str	r0, [r4, #0]
   10220:	f853 1b04 	ldr.w	r1, [r3], #4
   10224:	6021      	str	r1, [r4, #0]
   10226:	f853 2b04 	ldr.w	r2, [r3], #4
   1022a:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   1022c:	1bd8      	subs	r0, r3, r7
   1022e:	4286      	cmp	r6, r0
   10230:	d91c      	bls.n	1026c <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10232:	469e      	mov	lr, r3
   10234:	3320      	adds	r3, #32
   10236:	f85e 1b04 	ldr.w	r1, [lr], #4
   1023a:	6021      	str	r1, [r4, #0]
   1023c:	f853 2c1c 	ldr.w	r2, [r3, #-28]
   10240:	6022      	str	r2, [r4, #0]
   10242:	f8de 0004 	ldr.w	r0, [lr, #4]
   10246:	6020      	str	r0, [r4, #0]
   10248:	f853 1c14 	ldr.w	r1, [r3, #-20]
   1024c:	6021      	str	r1, [r4, #0]
   1024e:	f853 2c10 	ldr.w	r2, [r3, #-16]
   10252:	6022      	str	r2, [r4, #0]
   10254:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   10258:	6020      	str	r0, [r4, #0]
   1025a:	f853 1c08 	ldr.w	r1, [r3, #-8]
   1025e:	6021      	str	r1, [r4, #0]
   10260:	f853 2c04 	ldr.w	r2, [r3, #-4]
   10264:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10266:	1bd8      	subs	r0, r3, r7
   10268:	4286      	cmp	r6, r0
   1026a:	d8e2      	bhi.n	10232 <am_hal_iom_spi_write_nq+0x242>
        pui32Data += ui32TransferSize >> 2;
   1026c:	f026 0603 	bic.w	r6, r6, #3
   10270:	4437      	add	r7, r6
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
   10272:	b125      	cbz	r5, 1027e <am_hal_iom_spi_write_nq+0x28e>
   10274:	f8db 3000 	ldr.w	r3, [fp]
   10278:	07db      	lsls	r3, r3, #31
   1027a:	462e      	mov	r6, r5
   1027c:	d585      	bpl.n	1018a <am_hal_iom_spi_write_nq+0x19a>
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
   1027e:	9d00      	ldr	r5, [sp, #0]
   10280:	4f22      	ldr	r7, [pc, #136]	; (1030c <am_hal_iom_spi_write_nq+0x31c>)
   10282:	2301      	movs	r3, #1
   10284:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   10288:	461a      	mov	r2, r3
   1028a:	4659      	mov	r1, fp
   1028c:	f7fe fb94 	bl	e9b8 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
   10290:	2801      	cmp	r0, #1
   10292:	d011      	beq.n	102b8 <am_hal_iom_spi_write_nq+0x2c8>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
   10294:	2001      	movs	r0, #1
   10296:	f809 0005 	strb.w	r0, [r9, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   1029a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   1029e:	9e01      	ldr	r6, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   102a0:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   102a4:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
   102a8:	e6bc      	b.n	10024 <am_hal_iom_spi_write_nq+0x34>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   102aa:	4a19      	ldr	r2, [pc, #100]	; (10310 <am_hal_iom_spi_write_nq+0x320>)
   102ac:	4819      	ldr	r0, [pc, #100]	; (10314 <am_hal_iom_spi_write_nq+0x324>)
   102ae:	f640 7145 	movw	r1, #3909	; 0xf45
   102b2:	f7fe fb7b 	bl	e9ac <am_hal_debug_error>
   102b6:	e78b      	b.n	101d0 <am_hal_iom_spi_write_nq+0x1e0>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
   102b8:	f8db 1000 	ldr.w	r1, [fp]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   102bc:	f011 0fcc 	tst.w	r1, #204	; 0xcc
   102c0:	d11d      	bne.n	102fe <am_hal_iom_spi_write_nq+0x30e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   102c2:	f411 6fe0 	tst.w	r1, #1792	; 0x700
   102c6:	d129      	bne.n	1031c <am_hal_iom_spi_write_nq+0x32c>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
   102c8:	f011 0f10 	tst.w	r1, #16
   102cc:	bf14      	ite	ne
   102ce:	2006      	movne	r0, #6
   102d0:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
   102d2:	9a00      	ldr	r2, [sp, #0]
   102d4:	f809 0002 	strb.w	r0, [r9, r2]
   102d8:	e7df      	b.n	1029a <am_hal_iom_spi_write_nq+0x2aa>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   102da:	4a0d      	ldr	r2, [pc, #52]	; (10310 <am_hal_iom_spi_write_nq+0x320>)
   102dc:	480d      	ldr	r0, [pc, #52]	; (10314 <am_hal_iom_spi_write_nq+0x324>)
   102de:	f640 7145 	movw	r1, #3909	; 0xf45
   102e2:	f7fe fb63 	bl	e9ac <am_hal_debug_error>
   102e6:	e6db      	b.n	100a0 <am_hal_iom_spi_write_nq+0xb0>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
   102e8:	45c6      	cmp	lr, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
   102ea:	4658      	mov	r0, fp
   102ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102ee:	4642      	mov	r2, r8
   102f0:	4639      	mov	r1, r7
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
   102f2:	4676      	mov	r6, lr
   102f4:	bf28      	it	cs
   102f6:	4646      	movcs	r6, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
   102f8:	f7ff f93c 	bl	f574 <am_hal_iom_workaround_word_write>
   102fc:	e732      	b.n	10164 <am_hal_iom_spi_write_nq+0x174>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   102fe:	2005      	movs	r0, #5
   10300:	e7e7      	b.n	102d2 <am_hal_iom_spi_write_nq+0x2e2>
   10302:	bf00      	nop
   10304:	100025fc 	.word	0x100025fc
   10308:	4002000c 	.word	0x4002000c
   1030c:	10002928 	.word	0x10002928
   10310:	000148b4 	.word	0x000148b4
   10314:	000148e8 	.word	0x000148e8
   10318:	10002604 	.word	0x10002604
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   1031c:	2007      	movs	r0, #7
   1031e:	e7d8      	b.n	102d2 <am_hal_iom_spi_write_nq+0x2e2>

00010320 <am_hal_iom_spi_write>:
{
   10320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10324:	2805      	cmp	r0, #5
{
   10326:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10328:	d904      	bls.n	10334 <am_hal_iom_spi_write+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   1032a:	2502      	movs	r5, #2
}
   1032c:	4628      	mov	r0, r5
   1032e:	b00d      	add	sp, #52	; 0x34
   10330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10334:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 10410 <am_hal_iom_spi_write+0xf0>
   10338:	f04f 0e00 	mov.w	lr, #0
   1033c:	4604      	mov	r4, r0
   1033e:	461d      	mov	r5, r3
   10340:	f808 e000 	strb.w	lr, [r8, r0]
    if (ui32NumBytes == 0)
   10344:	b933      	cbnz	r3, 10354 <am_hal_iom_spi_write+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10346:	2503      	movs	r5, #3
   10348:	f808 5000 	strb.w	r5, [r8, r0]
}
   1034c:	4628      	mov	r0, r5
   1034e:	b00d      	add	sp, #52	; 0x34
   10350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
   10354:	ea4f 0a40 	mov.w	sl, r0, lsl #1
   10358:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 10414 <am_hal_iom_spi_write+0xf4>
   1035c:	9103      	str	r1, [sp, #12]
   1035e:	eb0a 0700 	add.w	r7, sl, r0
   10362:	eb0b 09c7 	add.w	r9, fp, r7, lsl #3
   10366:	f8d9 6014 	ldr.w	r6, [r9, #20]
   1036a:	2e00      	cmp	r6, #0
   1036c:	d045      	beq.n	103fa <am_hal_iom_spi_write+0xda>
   1036e:	4617      	mov	r7, r2
    ui32Critical = am_hal_interrupt_master_disable();
   10370:	f7fe fc68 	bl	ec44 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
   10374:	4b24      	ldr	r3, [pc, #144]	; (10408 <am_hal_iom_spi_write+0xe8>)
   10376:	5d1a      	ldrb	r2, [r3, r4]
    ui32Critical = am_hal_interrupt_master_disable();
   10378:	4606      	mov	r6, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
   1037a:	b912      	cbnz	r2, 10382 <am_hal_iom_spi_write+0x62>
   1037c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   10380:	b1c8      	cbz	r0, 103b6 <am_hal_iom_spi_write+0x96>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10382:	eb0a 0104 	add.w	r1, sl, r4
   10386:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
   1038a:	9903      	ldr	r1, [sp, #12]
   1038c:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
   1038e:	2300      	movs	r3, #0
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
   10390:	9509      	str	r5, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10392:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
   10394:	9d16      	ldr	r5, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
   10396:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10398:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
   1039a:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
   1039c:	950a      	str	r5, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
   1039e:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
   103a0:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   103a2:	f000 fecf 	bl	11144 <am_hal_queue_item_add>
   103a6:	b9f0      	cbnz	r0, 103e6 <am_hal_iom_spi_write+0xc6>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
   103a8:	2508      	movs	r5, #8
    am_hal_interrupt_master_set(ui32Critical);
   103aa:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status;
   103ac:	f808 5004 	strb.w	r5, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
   103b0:	f7fe fc4c 	bl	ec4c <am_hal_interrupt_master_set>
   103b4:	e7ba      	b.n	1032c <am_hal_iom_spi_write+0xc>
    while ( g_bIomBusy[ui32Module] );
   103b6:	5d1a      	ldrb	r2, [r3, r4]
   103b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   103bc:	2a00      	cmp	r2, #0
   103be:	d1fa      	bne.n	103b6 <am_hal_iom_spi_write+0x96>
    if (ui32NumBytes >= 4096)
   103c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   103c4:	f808 0004 	strb.w	r0, [r8, r4]
    if (ui32NumBytes >= 4096)
   103c8:	d301      	bcc.n	103ce <am_hal_iom_spi_write+0xae>
        return ui32Status;
   103ca:	2503      	movs	r5, #3
   103cc:	e7ed      	b.n	103aa <am_hal_iom_spi_write+0x8a>
   103ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   103d0:	9001      	str	r0, [sp, #4]
   103d2:	9300      	str	r3, [sp, #0]
   103d4:	463a      	mov	r2, r7
   103d6:	462b      	mov	r3, r5
   103d8:	9903      	ldr	r1, [sp, #12]
   103da:	4620      	mov	r0, r4
   103dc:	f7ff fc96 	bl	fd0c <am_hal_iom_spi_write_nb.part.6>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
   103e0:	4605      	mov	r5, r0
   103e2:	2800      	cmp	r0, #0
   103e4:	d1e1      	bne.n	103aa <am_hal_iom_spi_write+0x8a>
            am_hal_iom_queue_flush(ui32Module);
   103e6:	4f09      	ldr	r7, [pc, #36]	; (1040c <am_hal_iom_spi_write+0xec>)
    am_hal_interrupt_master_set(ui32Critical);
   103e8:	4630      	mov	r0, r6
   103ea:	f7fe fc2f 	bl	ec4c <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
   103ee:	4620      	mov	r0, r4
   103f0:	683e      	ldr	r6, [r7, #0]
   103f2:	47b0      	blx	r6
            ui32Status = g_iom_error_status[ui32Module];
   103f4:	f818 5004 	ldrb.w	r5, [r8, r4]
   103f8:	e798      	b.n	1032c <am_hal_iom_spi_write+0xc>
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
   103fa:	9c16      	ldr	r4, [sp, #88]	; 0x58
   103fc:	9400      	str	r4, [sp, #0]
   103fe:	f7ff fdf7 	bl	fff0 <am_hal_iom_spi_write_nq>
   10402:	4605      	mov	r5, r0
   10404:	e792      	b.n	1032c <am_hal_iom_spi_write+0xc>
   10406:	bf00      	nop
   10408:	100025fc 	.word	0x100025fc
   1040c:	1000113c 	.word	0x1000113c
   10410:	10002604 	.word	0x10002604
   10414:	100029b8 	.word	0x100029b8

00010418 <am_hal_iom_spi_read_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10418:	2805      	cmp	r0, #5
   1041a:	d901      	bls.n	10420 <am_hal_iom_spi_read_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   1041c:	2002      	movs	r0, #2
   1041e:	4770      	bx	lr
{
   10420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10424:	4688      	mov	r8, r1
   10426:	49b9      	ldr	r1, [pc, #740]	; (1070c <am_hal_iom_spi_read_nq+0x2f4>)
   10428:	b085      	sub	sp, #20
   1042a:	4604      	mov	r4, r0
   1042c:	4617      	mov	r7, r2
   1042e:	461e      	mov	r6, r3
    while ( g_bIomBusy[ui32Module] );
   10430:	5d0b      	ldrb	r3, [r1, r4]
   10432:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   10436:	2b00      	cmp	r3, #0
   10438:	d1fa      	bne.n	10430 <am_hal_iom_spi_read_nq+0x18>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   1043a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 1071c <am_hal_iom_spi_read_nq+0x304>
    if (ui32NumBytes == 0)
   1043e:	1e70      	subs	r0, r6, #1
   10440:	f640 75fe 	movw	r5, #4094	; 0xffe
   10444:	42a8      	cmp	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10446:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
   1044a:	d905      	bls.n	10458 <am_hal_iom_spi_read_nq+0x40>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   1044c:	2003      	movs	r0, #3
   1044e:	f809 0004 	strb.w	r0, [r9, r4]
}
   10452:	b005      	add	sp, #20
   10454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10458:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
   1045c:	3104      	adds	r1, #4
   1045e:	030b      	lsls	r3, r1, #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10460:	f240 7bff 	movw	fp, #2047	; 0x7ff
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10464:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
   10468:	9300      	str	r3, [sp, #0]
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
   1046a:	2c04      	cmp	r4, #4
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
   1046c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10470:	4618      	mov	r0, r3
   10472:	9501      	str	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10474:	f8c3 b208 	str.w	fp, [r3, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
   10478:	f000 8152 	beq.w	10720 <am_hal_iom_spi_read_nq+0x308>
   1047c:	4aa4      	ldr	r2, [pc, #656]	; (10710 <am_hal_iom_spi_read_nq+0x2f8>)
   1047e:	9202      	str	r2, [sp, #8]
   10480:	f503 7a01 	add.w	sl, r3, #516	; 0x204
   10484:	461d      	mov	r5, r3
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   10486:	ea4f 4108 	mov.w	r1, r8, lsl #16
   1048a:	f401 20e0 	and.w	r0, r1, #458752	; 0x70000
   1048e:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
   10492:	b2f3      	uxtb	r3, r6
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   10494:	4313      	orrs	r3, r2
    ui32Command |= ui32Options & 0x5C00FF00;
   10496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   10498:	03f1      	lsls	r1, r6, #15
   1049a:	f001 60f0 	and.w	r0, r1, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
   1049e:	f022 4123 	bic.w	r1, r2, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   104a2:	4303      	orrs	r3, r0
    ui32Command |= ui32Options & 0x5C00FF00;
   104a4:	f001 20ff 	and.w	r0, r1, #4278255360	; 0xff00ff00
   104a8:	4303      	orrs	r3, r0
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
   104aa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   104ae:	f505 7b80 	add.w	fp, r5, #256	; 0x100
    uint32_t bCmdCmp = false;
   104b2:	2300      	movs	r3, #0
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   104b4:	f8db 2000 	ldr.w	r2, [fp]
   104b8:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
   104bc:	4546      	cmp	r6, r8
   104be:	d910      	bls.n	104e2 <am_hal_iom_spi_read_nq+0xca>
        else if ( ui32BytesInFifo >= 4 )
   104c0:	f1b8 0f03 	cmp.w	r8, #3
   104c4:	f200 809f 	bhi.w	10606 <am_hal_iom_spi_read_nq+0x1ee>
        if ( bCmdCmp == true )
   104c8:	2b00      	cmp	r3, #0
   104ca:	f040 80ff 	bne.w	106cc <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
   104ce:	f8da 3000 	ldr.w	r3, [sl]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   104d2:	f8db 2000 	ldr.w	r2, [fp]
   104d6:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
   104da:	4546      	cmp	r6, r8
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
   104dc:	f003 0301 	and.w	r3, r3, #1
        if ( ui32BytesInFifo >= ui32NumBytes )
   104e0:	d8ee      	bhi.n	104c0 <am_hal_iom_spi_read_nq+0xa8>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   104e2:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
   104e6:	9500      	str	r5, [sp, #0]
   104e8:	0710      	lsls	r0, r2, #28
   104ea:	f140 80f1 	bpl.w	106d0 <am_hal_iom_spi_read_nq+0x2b8>
   104ee:	f006 0003 	and.w	r0, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
   104f2:	08b6      	lsrs	r6, r6, #2
   104f4:	d05a      	beq.n	105ac <am_hal_iom_spi_read_nq+0x194>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   104f6:	9d00      	ldr	r5, [sp, #0]
   104f8:	463a      	mov	r2, r7
   104fa:	6829      	ldr	r1, [r5, #0]
   104fc:	f842 1b04 	str.w	r1, [r2], #4
   10500:	eb07 0b86 	add.w	fp, r7, r6, lsl #2
   10504:	ebab 0807 	sub.w	r8, fp, r7
   10508:	f1a8 0504 	sub.w	r5, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
   1050c:	455a      	cmp	r2, fp
   1050e:	f3c5 0182 	ubfx	r1, r5, #2, #3
   10512:	d04b      	beq.n	105ac <am_hal_iom_spi_read_nq+0x194>
   10514:	b349      	cbz	r1, 1056a <am_hal_iom_spi_read_nq+0x152>
   10516:	2901      	cmp	r1, #1
   10518:	d021      	beq.n	1055e <am_hal_iom_spi_read_nq+0x146>
   1051a:	2902      	cmp	r1, #2
   1051c:	d01b      	beq.n	10556 <am_hal_iom_spi_read_nq+0x13e>
   1051e:	2903      	cmp	r1, #3
   10520:	d015      	beq.n	1054e <am_hal_iom_spi_read_nq+0x136>
   10522:	2904      	cmp	r1, #4
   10524:	d00f      	beq.n	10546 <am_hal_iom_spi_read_nq+0x12e>
   10526:	2905      	cmp	r1, #5
   10528:	d009      	beq.n	1053e <am_hal_iom_spi_read_nq+0x126>
   1052a:	2906      	cmp	r1, #6
   1052c:	d003      	beq.n	10536 <am_hal_iom_spi_read_nq+0x11e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   1052e:	9d00      	ldr	r5, [sp, #0]
   10530:	6829      	ldr	r1, [r5, #0]
   10532:	f842 1b04 	str.w	r1, [r2], #4
   10536:	9d00      	ldr	r5, [sp, #0]
   10538:	6829      	ldr	r1, [r5, #0]
   1053a:	f842 1b04 	str.w	r1, [r2], #4
   1053e:	9d00      	ldr	r5, [sp, #0]
   10540:	6829      	ldr	r1, [r5, #0]
   10542:	f842 1b04 	str.w	r1, [r2], #4
   10546:	9d00      	ldr	r5, [sp, #0]
   10548:	6829      	ldr	r1, [r5, #0]
   1054a:	f842 1b04 	str.w	r1, [r2], #4
   1054e:	9d00      	ldr	r5, [sp, #0]
   10550:	6829      	ldr	r1, [r5, #0]
   10552:	f842 1b04 	str.w	r1, [r2], #4
   10556:	9d00      	ldr	r5, [sp, #0]
   10558:	6829      	ldr	r1, [r5, #0]
   1055a:	f842 1b04 	str.w	r1, [r2], #4
   1055e:	9d00      	ldr	r5, [sp, #0]
   10560:	6829      	ldr	r1, [r5, #0]
   10562:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
   10566:	455a      	cmp	r2, fp
   10568:	d020      	beq.n	105ac <am_hal_iom_spi_read_nq+0x194>
   1056a:	9d00      	ldr	r5, [sp, #0]
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   1056c:	f8d5 c000 	ldr.w	ip, [r5]
   10570:	4696      	mov	lr, r2
   10572:	3220      	adds	r2, #32
   10574:	f84e cb04 	str.w	ip, [lr], #4
   10578:	f8d5 8000 	ldr.w	r8, [r5]
   1057c:	f842 8c1c 	str.w	r8, [r2, #-28]
   10580:	f8d5 c000 	ldr.w	ip, [r5]
   10584:	f8ce c004 	str.w	ip, [lr, #4]
   10588:	6829      	ldr	r1, [r5, #0]
   1058a:	f842 1c14 	str.w	r1, [r2, #-20]
   1058e:	6829      	ldr	r1, [r5, #0]
   10590:	f842 1c10 	str.w	r1, [r2, #-16]
   10594:	6829      	ldr	r1, [r5, #0]
   10596:	f842 1c0c 	str.w	r1, [r2, #-12]
   1059a:	6829      	ldr	r1, [r5, #0]
   1059c:	f842 1c08 	str.w	r1, [r2, #-8]
   105a0:	6829      	ldr	r1, [r5, #0]
   105a2:	f842 1c04 	str.w	r1, [r2, #-4]
    for ( i = 0; i < ui32NumWords; i++ )
   105a6:	455a      	cmp	r2, fp
   105a8:	d1e0      	bne.n	1056c <am_hal_iom_spi_read_nq+0x154>
   105aa:	9500      	str	r5, [sp, #0]
    if ( ui32Leftovers )
   105ac:	b188      	cbz	r0, 105d2 <am_hal_iom_spi_read_nq+0x1ba>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
   105ae:	9a00      	ldr	r2, [sp, #0]
        for ( j = 0; j < ui32Leftovers; j++ )
   105b0:	2801      	cmp	r0, #1
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
   105b2:	6815      	ldr	r5, [r2, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
   105b4:	f807 5026 	strb.w	r5, [r7, r6, lsl #2]
        pui8Data = (uint8_t *) (&pui32Data[i]);
   105b8:	ea4f 0686 	mov.w	r6, r6, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
   105bc:	d009      	beq.n	105d2 <am_hal_iom_spi_read_nq+0x1ba>
            pui8Data[j] = sTempBuffer.bytes[j];
   105be:	4437      	add	r7, r6
        for ( j = 0; j < ui32Leftovers; j++ )
   105c0:	2803      	cmp	r0, #3
            pui8Data[j] = sTempBuffer.bytes[j];
   105c2:	f3c5 2107 	ubfx	r1, r5, #8, #8
   105c6:	bf08      	it	eq
   105c8:	f3c5 4507 	ubfxeq	r5, r5, #16, #8
   105cc:	7079      	strb	r1, [r7, #1]
   105ce:	bf08      	it	eq
   105d0:	70bd      	strbeq	r5, [r7, #2]
        if ( bCmdCmp == true )
   105d2:	b90b      	cbnz	r3, 105d8 <am_hal_iom_spi_read_nq+0x1c0>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
   105d4:	f8da 3000 	ldr.w	r3, [sl]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
   105d8:	9f02      	ldr	r7, [sp, #8]
   105da:	2301      	movs	r3, #1
   105dc:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   105e0:	461a      	mov	r2, r3
   105e2:	4651      	mov	r1, sl
   105e4:	f7fe f9e8 	bl	e9b8 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
   105e8:	2801      	cmp	r0, #1
   105ea:	f000 80a8 	beq.w	1073e <am_hal_iom_spi_read_nq+0x326>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
   105ee:	2001      	movs	r0, #1
   105f0:	f809 0004 	strb.w	r0, [r9, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   105f4:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   105f6:	9d01      	ldr	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   105f8:	f240 74ff 	movw	r4, #2047	; 0x7ff
   105fc:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   10600:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
   10604:	e725      	b.n	10452 <am_hal_iom_spi_read_nq+0x3a>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10606:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
   1060a:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   1060e:	0709      	lsls	r1, r1, #28
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
   10610:	9000      	str	r0, [sp, #0]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10612:	d56c      	bpl.n	106ee <am_hal_iom_spi_read_nq+0x2d6>
    for ( i = 0; i < ui32NumWords; i++ )
   10614:	9a00      	ldr	r2, [sp, #0]
   10616:	0890      	lsrs	r0, r2, #2
   10618:	2a00      	cmp	r2, #0
   1061a:	d04b      	beq.n	106b4 <am_hal_iom_spi_read_nq+0x29c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   1061c:	463a      	mov	r2, r7
   1061e:	6829      	ldr	r1, [r5, #0]
   10620:	f842 1b04 	str.w	r1, [r2], #4
   10624:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   10628:	1bc1      	subs	r1, r0, r7
   1062a:	f1a1 0c04 	sub.w	ip, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
   1062e:	4290      	cmp	r0, r2
   10630:	f3cc 0182 	ubfx	r1, ip, #2, #3
   10634:	d03d      	beq.n	106b2 <am_hal_iom_spi_read_nq+0x29a>
   10636:	b311      	cbz	r1, 1067e <am_hal_iom_spi_read_nq+0x266>
   10638:	2901      	cmp	r1, #1
   1063a:	d01b      	beq.n	10674 <am_hal_iom_spi_read_nq+0x25c>
   1063c:	2902      	cmp	r1, #2
   1063e:	d016      	beq.n	1066e <am_hal_iom_spi_read_nq+0x256>
   10640:	2903      	cmp	r1, #3
   10642:	d011      	beq.n	10668 <am_hal_iom_spi_read_nq+0x250>
   10644:	2904      	cmp	r1, #4
   10646:	d00c      	beq.n	10662 <am_hal_iom_spi_read_nq+0x24a>
   10648:	2905      	cmp	r1, #5
   1064a:	d007      	beq.n	1065c <am_hal_iom_spi_read_nq+0x244>
   1064c:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   1064e:	bf1c      	itt	ne
   10650:	6829      	ldrne	r1, [r5, #0]
   10652:	f842 1b04 	strne.w	r1, [r2], #4
   10656:	6829      	ldr	r1, [r5, #0]
   10658:	f842 1b04 	str.w	r1, [r2], #4
   1065c:	6829      	ldr	r1, [r5, #0]
   1065e:	f842 1b04 	str.w	r1, [r2], #4
   10662:	6829      	ldr	r1, [r5, #0]
   10664:	f842 1b04 	str.w	r1, [r2], #4
   10668:	6829      	ldr	r1, [r5, #0]
   1066a:	f842 1b04 	str.w	r1, [r2], #4
   1066e:	6829      	ldr	r1, [r5, #0]
   10670:	f842 1b04 	str.w	r1, [r2], #4
   10674:	6829      	ldr	r1, [r5, #0]
   10676:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
   1067a:	4290      	cmp	r0, r2
   1067c:	d019      	beq.n	106b2 <am_hal_iom_spi_read_nq+0x29a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   1067e:	4694      	mov	ip, r2
   10680:	f8d5 e000 	ldr.w	lr, [r5]
   10684:	f84c eb04 	str.w	lr, [ip], #4
   10688:	f8d5 e000 	ldr.w	lr, [r5]
   1068c:	f8c2 e004 	str.w	lr, [r2, #4]
   10690:	f8d5 e000 	ldr.w	lr, [r5]
   10694:	f8cc e004 	str.w	lr, [ip, #4]
   10698:	6829      	ldr	r1, [r5, #0]
   1069a:	60d1      	str	r1, [r2, #12]
   1069c:	6829      	ldr	r1, [r5, #0]
   1069e:	6111      	str	r1, [r2, #16]
   106a0:	6829      	ldr	r1, [r5, #0]
   106a2:	6151      	str	r1, [r2, #20]
   106a4:	6829      	ldr	r1, [r5, #0]
   106a6:	6191      	str	r1, [r2, #24]
   106a8:	6829      	ldr	r1, [r5, #0]
   106aa:	61d1      	str	r1, [r2, #28]
   106ac:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
   106ae:	4290      	cmp	r0, r2
   106b0:	d1e5      	bne.n	1067e <am_hal_iom_spi_read_nq+0x266>
   106b2:	9a00      	ldr	r2, [sp, #0]
            pui32Data += ui32BytesInFifo >> 2;
   106b4:	f008 00fc 	and.w	r0, r8, #252	; 0xfc
   106b8:	4407      	add	r7, r0
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
   106ba:	1ab6      	subs	r6, r6, r2
        if ( bCmdCmp == true )
   106bc:	b933      	cbnz	r3, 106cc <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
   106be:	f8da 3000 	ldr.w	r3, [sl]
   106c2:	f003 0301 	and.w	r3, r3, #1
    while ( ui32NumBytes )
   106c6:	2e00      	cmp	r6, #0
   106c8:	f47f aef4 	bne.w	104b4 <am_hal_iom_spi_read_nq+0x9c>
   106cc:	9500      	str	r5, [sp, #0]
   106ce:	e783      	b.n	105d8 <am_hal_iom_spi_read_nq+0x1c0>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   106d0:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
   106d4:	b2c1      	uxtb	r1, r0
   106d6:	42b1      	cmp	r1, r6
   106d8:	f4bf af09 	bcs.w	104ee <am_hal_iom_spi_read_nq+0xd6>
   106dc:	4a0d      	ldr	r2, [pc, #52]	; (10714 <am_hal_iom_spi_read_nq+0x2fc>)
   106de:	480e      	ldr	r0, [pc, #56]	; (10718 <am_hal_iom_spi_read_nq+0x300>)
   106e0:	9303      	str	r3, [sp, #12]
   106e2:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   106e6:	f7fe f961 	bl	e9ac <am_hal_debug_error>
   106ea:	9b03      	ldr	r3, [sp, #12]
   106ec:	e6ff      	b.n	104ee <am_hal_iom_spi_read_nq+0xd6>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   106ee:	f8db 2000 	ldr.w	r2, [fp]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
   106f2:	b2d1      	uxtb	r1, r2
   106f4:	4288      	cmp	r0, r1
   106f6:	d98d      	bls.n	10614 <am_hal_iom_spi_read_nq+0x1fc>
   106f8:	4a06      	ldr	r2, [pc, #24]	; (10714 <am_hal_iom_spi_read_nq+0x2fc>)
   106fa:	4807      	ldr	r0, [pc, #28]	; (10718 <am_hal_iom_spi_read_nq+0x300>)
   106fc:	9303      	str	r3, [sp, #12]
   106fe:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   10702:	f7fe f953 	bl	e9ac <am_hal_debug_error>
   10706:	9b03      	ldr	r3, [sp, #12]
   10708:	e784      	b.n	10614 <am_hal_iom_spi_read_nq+0x1fc>
   1070a:	bf00      	nop
   1070c:	100025fc 	.word	0x100025fc
   10710:	10002928 	.word	0x10002928
   10714:	000148fc 	.word	0x000148fc
   10718:	000148e8 	.word	0x000148e8
   1071c:	10002604 	.word	0x10002604
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
   10720:	990e      	ldr	r1, [sp, #56]	; 0x38
   10722:	f011 4280 	ands.w	r2, r1, #1073741824	; 0x40000000
   10726:	d104      	bne.n	10732 <am_hal_iom_spi_read_nq+0x31a>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
   10728:	4b24      	ldr	r3, [pc, #144]	; (107bc <am_hal_iom_spi_read_nq+0x3a4>)
   1072a:	681d      	ldr	r5, [r3, #0]
   1072c:	b2e9      	uxtb	r1, r5
   1072e:	2920      	cmp	r1, #32
   10730:	d017      	beq.n	10762 <am_hal_iom_spi_read_nq+0x34a>
   10732:	f500 7a01 	add.w	sl, r0, #516	; 0x204
   10736:	4822      	ldr	r0, [pc, #136]	; (107c0 <am_hal_iom_spi_read_nq+0x3a8>)
   10738:	9002      	str	r0, [sp, #8]
   1073a:	9d00      	ldr	r5, [sp, #0]
   1073c:	e6a3      	b.n	10486 <am_hal_iom_spi_read_nq+0x6e>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
   1073e:	f8da 3000 	ldr.w	r3, [sl]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   10742:	f013 0fcc 	tst.w	r3, #204	; 0xcc
   10746:	d10a      	bne.n	1075e <am_hal_iom_spi_read_nq+0x346>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   10748:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   1074c:	d127      	bne.n	1079e <am_hal_iom_spi_read_nq+0x386>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
   1074e:	f013 0f10 	tst.w	r3, #16
   10752:	bf14      	ite	ne
   10754:	2006      	movne	r0, #6
   10756:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
   10758:	f809 0004 	strb.w	r0, [r9, r4]
   1075c:	e74a      	b.n	105f4 <am_hal_iom_spi_read_nq+0x1dc>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   1075e:	2005      	movs	r0, #5
   10760:	e7fa      	b.n	10758 <am_hal_iom_spi_read_nq+0x340>
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
   10762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
   10764:	4d16      	ldr	r5, [pc, #88]	; (107c0 <am_hal_iom_spi_read_nq+0x3a8>)
   10766:	9502      	str	r5, [sp, #8]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
   10768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1076c:	4639      	mov	r1, r7
   1076e:	4640      	mov	r0, r8
   10770:	f7fe ff00 	bl	f574 <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
   10774:	9a00      	ldr	r2, [sp, #0]
   10776:	6928      	ldr	r0, [r5, #16]
   10778:	f502 7a01 	add.w	sl, r2, #516	; 0x204
   1077c:	2301      	movs	r3, #1
   1077e:	4651      	mov	r1, sl
   10780:	461a      	mov	r2, r3
   10782:	f7fe f919 	bl	e9b8 <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
   10786:	2801      	cmp	r0, #1
   10788:	d00b      	beq.n	107a2 <am_hal_iom_spi_read_nq+0x38a>
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   1078a:	9e00      	ldr	r6, [sp, #0]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   1078c:	9901      	ldr	r1, [sp, #4]
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   1078e:	f8c6 b208 	str.w	fp, [r6, #520]	; 0x208
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
   10792:	2001      	movs	r0, #1
   10794:	f889 0004 	strb.w	r0, [r9, #4]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   10798:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
   1079c:	e659      	b.n	10452 <am_hal_iom_spi_read_nq+0x3a>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   1079e:	2007      	movs	r0, #7
   107a0:	e7da      	b.n	10758 <am_hal_iom_spi_read_nq+0x340>
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
   107a2:	9d00      	ldr	r5, [sp, #0]
        ui32Options |= AM_HAL_IOM_RAW;
   107a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
   107a6:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
   107aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
   107ae:	f041 0001 	orr.w	r0, r1, #1
        ui32Options |= AM_HAL_IOM_RAW;
   107b2:	920e      	str	r2, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
   107b4:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
   107b8:	e665      	b.n	10486 <am_hal_iom_spi_read_nq+0x6e>
   107ba:	bf00      	nop
   107bc:	4002000c 	.word	0x4002000c
   107c0:	10002928 	.word	0x10002928

000107c4 <am_hal_iom_spi_read>:
{
   107c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   107c8:	2805      	cmp	r0, #5
{
   107ca:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   107cc:	d904      	bls.n	107d8 <am_hal_iom_spi_read+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   107ce:	2602      	movs	r6, #2
}
   107d0:	4630      	mov	r0, r6
   107d2:	b00d      	add	sp, #52	; 0x34
   107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   107d8:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
   107dc:	3704      	adds	r7, #4
   107de:	033d      	lsls	r5, r7, #12
   107e0:	f240 7cff 	movw	ip, #2047	; 0x7ff
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   107e4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 108c4 <am_hal_iom_spi_read+0x100>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   107e8:	f8c5 c208 	str.w	ip, [r5, #520]	; 0x208
    if (ui32NumBytes == 0)
   107ec:	f640 79fe 	movw	r9, #4094	; 0xffe
   107f0:	1e5d      	subs	r5, r3, #1
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   107f2:	2600      	movs	r6, #0
    if (ui32NumBytes == 0)
   107f4:	454d      	cmp	r5, r9
   107f6:	4604      	mov	r4, r0
   107f8:	469e      	mov	lr, r3
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   107fa:	f808 6000 	strb.w	r6, [r8, r0]
    if (ui32NumBytes == 0)
   107fe:	d906      	bls.n	1080e <am_hal_iom_spi_read+0x4a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10800:	2603      	movs	r6, #3
   10802:	f808 6000 	strb.w	r6, [r8, r0]
}
   10806:	4630      	mov	r0, r6
   10808:	b00d      	add	sp, #52	; 0x34
   1080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
   1080e:	ea4f 0a40 	mov.w	sl, r0, lsl #1
   10812:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 108c8 <am_hal_iom_spi_read+0x104>
   10816:	9202      	str	r2, [sp, #8]
   10818:	eb0a 0500 	add.w	r5, sl, r0
   1081c:	eb0b 09c5 	add.w	r9, fp, r5, lsl #3
   10820:	461f      	mov	r7, r3
   10822:	f8d9 6014 	ldr.w	r6, [r9, #20]
   10826:	2e00      	cmp	r6, #0
   10828:	d042      	beq.n	108b0 <am_hal_iom_spi_read+0xec>
   1082a:	460d      	mov	r5, r1
    ui32Critical = am_hal_interrupt_master_disable();
   1082c:	f7fe fa0a 	bl	ec44 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
   10830:	4b22      	ldr	r3, [pc, #136]	; (108bc <am_hal_iom_spi_read+0xf8>)
    ui32Critical = am_hal_interrupt_master_disable();
   10832:	9003      	str	r0, [sp, #12]
    if ( (g_bIomBusy[ui32Module] == false) &&
   10834:	5d1a      	ldrb	r2, [r3, r4]
   10836:	b912      	cbnz	r2, 1083e <am_hal_iom_spi_read+0x7a>
   10838:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1083c:	b1d0      	cbz	r0, 10874 <am_hal_iom_spi_read+0xb0>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   1083e:	eb0a 0104 	add.w	r1, sl, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
   10842:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10844:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
   10848:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
   1084a:	2600      	movs	r6, #0
        sIOMTransaction.pui32Data = pui32Data;
   1084c:	9d02      	ldr	r5, [sp, #8]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
   1084e:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10850:	461a      	mov	r2, r3
        sIOMTransaction.ui32Options = ui32Options;
   10852:	9f16      	ldr	r7, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
   10854:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10856:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
   10858:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
   1085a:	970a      	str	r7, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
   1085c:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
   1085e:	960b      	str	r6, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
   10860:	f000 fc70 	bl	11144 <am_hal_queue_item_add>
   10864:	b9d0      	cbnz	r0, 1089c <am_hal_iom_spi_read+0xd8>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
   10866:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
   10868:	9803      	ldr	r0, [sp, #12]
        g_iom_error_status[ui32Module] = ui32Status;
   1086a:	f808 6004 	strb.w	r6, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
   1086e:	f7fe f9ed 	bl	ec4c <am_hal_interrupt_master_set>
   10872:	e7ad      	b.n	107d0 <am_hal_iom_spi_read+0xc>
    while ( g_bIomBusy[ui32Module] );
   10874:	5d1a      	ldrb	r2, [r3, r4]
   10876:	f002 0eff 	and.w	lr, r2, #255	; 0xff
   1087a:	2a00      	cmp	r2, #0
   1087c:	d1fa      	bne.n	10874 <am_hal_iom_spi_read+0xb0>
   1087e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10880:	9000      	str	r0, [sp, #0]
   10882:	f8cd e004 	str.w	lr, [sp, #4]
   10886:	463b      	mov	r3, r7
   10888:	9a02      	ldr	r2, [sp, #8]
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   1088a:	f808 e004 	strb.w	lr, [r8, r4]
   1088e:	4629      	mov	r1, r5
   10890:	4620      	mov	r0, r4
   10892:	f7ff fb27 	bl	fee4 <am_hal_iom_spi_read_nb.part.7>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
   10896:	4606      	mov	r6, r0
   10898:	2800      	cmp	r0, #0
   1089a:	d1e5      	bne.n	10868 <am_hal_iom_spi_read+0xa4>
    am_hal_interrupt_master_set(ui32Critical);
   1089c:	9803      	ldr	r0, [sp, #12]
   1089e:	f7fe f9d5 	bl	ec4c <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
   108a2:	4907      	ldr	r1, [pc, #28]	; (108c0 <am_hal_iom_spi_read+0xfc>)
   108a4:	4620      	mov	r0, r4
   108a6:	680b      	ldr	r3, [r1, #0]
   108a8:	4798      	blx	r3
            ui32Status = g_iom_error_status[ui32Module];
   108aa:	f818 6004 	ldrb.w	r6, [r8, r4]
   108ae:	e78f      	b.n	107d0 <am_hal_iom_spi_read+0xc>
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
   108b0:	9c16      	ldr	r4, [sp, #88]	; 0x58
   108b2:	9400      	str	r4, [sp, #0]
   108b4:	f7ff fdb0 	bl	10418 <am_hal_iom_spi_read_nq>
   108b8:	4606      	mov	r6, r0
   108ba:	e789      	b.n	107d0 <am_hal_iom_spi_read+0xc>
   108bc:	100025fc 	.word	0x100025fc
   108c0:	1000113c 	.word	0x1000113c
   108c4:	10002604 	.word	0x10002604
   108c8:	100029b8 	.word	0x100029b8

000108cc <am_hal_iom_spi_fullduplex_nq>:
{
   108cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   108d0:	2805      	cmp	r0, #5
{
   108d2:	b087      	sub	sp, #28
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   108d4:	d904      	bls.n	108e0 <am_hal_iom_spi_fullduplex_nq+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   108d6:	2602      	movs	r6, #2
}
   108d8:	4630      	mov	r0, r6
   108da:	b007      	add	sp, #28
   108dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108e0:	460f      	mov	r7, r1
   108e2:	4911      	ldr	r1, [pc, #68]	; (10928 <am_hal_iom_spi_fullduplex_nq+0x5c>)
   108e4:	4604      	mov	r4, r0
   108e6:	4616      	mov	r6, r2
   108e8:	4698      	mov	r8, r3
    while ( g_bIomBusy[ui32Module] );
   108ea:	5d0b      	ldrb	r3, [r1, r4]
   108ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   108f0:	2b00      	cmp	r3, #0
   108f2:	d1fa      	bne.n	108ea <am_hal_iom_spi_fullduplex_nq+0x1e>
    if (ui32NumBytes == 0)
   108f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   108f6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 10930 <am_hal_iom_spi_fullduplex_nq+0x64>
    if (ui32NumBytes == 0)
   108fa:	1e45      	subs	r5, r0, #1
   108fc:	f640 71fe 	movw	r1, #4094	; 0xffe
   10900:	428d      	cmp	r5, r1
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10902:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
   10906:	d906      	bls.n	10916 <am_hal_iom_spi_fullduplex_nq+0x4a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10908:	2603      	movs	r6, #3
}
   1090a:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   1090c:	f809 6004 	strb.w	r6, [r9, r4]
}
   10910:	b007      	add	sp, #28
   10912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
   10916:	4b05      	ldr	r3, [pc, #20]	; (1092c <am_hal_iom_spi_fullduplex_nq+0x60>)
   10918:	6818      	ldr	r0, [r3, #0]
   1091a:	b2c5      	uxtb	r5, r0
   1091c:	2d22      	cmp	r5, #34	; 0x22
   1091e:	d009      	beq.n	10934 <am_hal_iom_spi_fullduplex_nq+0x68>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   10920:	2605      	movs	r6, #5
   10922:	f809 6004 	strb.w	r6, [r9, r4]
        return ui32Status;
   10926:	e7d7      	b.n	108d8 <am_hal_iom_spi_fullduplex_nq+0xc>
   10928:	100025fc 	.word	0x100025fc
   1092c:	4002000c 	.word	0x4002000c
   10930:	10002604 	.word	0x10002604
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
   10934:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
   10938:	3104      	adds	r1, #4
   1093a:	030d      	lsls	r5, r1, #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   1093c:	f240 70ff 	movw	r0, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
   10940:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   10944:	f043 0108 	orr.w	r1, r3, #8
   10948:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
   1094c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10950:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
   10954:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10958:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1095c:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
   10960:	9302      	str	r3, [sp, #8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   10962:	f010 0f08 	tst.w	r0, #8
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
   10966:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10968:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   1096c:	bf14      	ite	ne
   1096e:	2040      	movne	r0, #64	; 0x40
   10970:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10972:	1a81      	subs	r1, r0, r2
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
   10974:	2b40      	cmp	r3, #64	; 0x40
   10976:	bf28      	it	cs
   10978:	2340      	movcs	r3, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   1097a:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
   1097e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   10982:	4563      	cmp	r3, ip
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
   10984:	469b      	mov	fp, r3
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
   10986:	9001      	str	r0, [sp, #4]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10988:	f505 7a80 	add.w	sl, r5, #256	; 0x100
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   1098c:	d905      	bls.n	1099a <am_hal_iom_spi_fullduplex_nq+0xce>
   1098e:	4ab6      	ldr	r2, [pc, #728]	; (10c68 <am_hal_iom_spi_fullduplex_nq+0x39c>)
   10990:	48b6      	ldr	r0, [pc, #728]	; (10c6c <am_hal_iom_spi_fullduplex_nq+0x3a0>)
   10992:	f640 7145 	movw	r1, #3909	; 0xf45
   10996:	f7fe f809 	bl	e9ac <am_hal_debug_error>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   1099a:	4633      	mov	r3, r6
   1099c:	43f2      	mvns	r2, r6
   1099e:	f853 1b04 	ldr.w	r1, [r3], #4
   109a2:	6029      	str	r1, [r5, #0]
   109a4:	4432      	add	r2, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   109a6:	1b98      	subs	r0, r3, r6
   109a8:	445a      	add	r2, fp
   109aa:	4583      	cmp	fp, r0
   109ac:	f3c2 0282 	ubfx	r2, r2, #2, #3
   109b0:	d941      	bls.n	10a36 <am_hal_iom_spi_fullduplex_nq+0x16a>
   109b2:	b31a      	cbz	r2, 109fc <am_hal_iom_spi_fullduplex_nq+0x130>
   109b4:	2a01      	cmp	r2, #1
   109b6:	d01b      	beq.n	109f0 <am_hal_iom_spi_fullduplex_nq+0x124>
   109b8:	2a02      	cmp	r2, #2
   109ba:	d016      	beq.n	109ea <am_hal_iom_spi_fullduplex_nq+0x11e>
   109bc:	2a03      	cmp	r2, #3
   109be:	d011      	beq.n	109e4 <am_hal_iom_spi_fullduplex_nq+0x118>
   109c0:	2a04      	cmp	r2, #4
   109c2:	d00c      	beq.n	109de <am_hal_iom_spi_fullduplex_nq+0x112>
   109c4:	2a05      	cmp	r2, #5
   109c6:	d007      	beq.n	109d8 <am_hal_iom_spi_fullduplex_nq+0x10c>
   109c8:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   109ca:	bf1c      	itt	ne
   109cc:	f853 2b04 	ldrne.w	r2, [r3], #4
   109d0:	602a      	strne	r2, [r5, #0]
   109d2:	f853 1b04 	ldr.w	r1, [r3], #4
   109d6:	6029      	str	r1, [r5, #0]
   109d8:	f853 0b04 	ldr.w	r0, [r3], #4
   109dc:	6028      	str	r0, [r5, #0]
   109de:	f853 2b04 	ldr.w	r2, [r3], #4
   109e2:	602a      	str	r2, [r5, #0]
   109e4:	f853 1b04 	ldr.w	r1, [r3], #4
   109e8:	6029      	str	r1, [r5, #0]
   109ea:	f853 0b04 	ldr.w	r0, [r3], #4
   109ee:	6028      	str	r0, [r5, #0]
   109f0:	f853 2b04 	ldr.w	r2, [r3], #4
   109f4:	602a      	str	r2, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   109f6:	1b99      	subs	r1, r3, r6
   109f8:	458b      	cmp	fp, r1
   109fa:	d91c      	bls.n	10a36 <am_hal_iom_spi_fullduplex_nq+0x16a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   109fc:	469e      	mov	lr, r3
   109fe:	3320      	adds	r3, #32
   10a00:	f85e 0b04 	ldr.w	r0, [lr], #4
   10a04:	6028      	str	r0, [r5, #0]
   10a06:	f853 2c1c 	ldr.w	r2, [r3, #-28]
   10a0a:	602a      	str	r2, [r5, #0]
   10a0c:	f8de 1004 	ldr.w	r1, [lr, #4]
   10a10:	6029      	str	r1, [r5, #0]
   10a12:	f853 0c14 	ldr.w	r0, [r3, #-20]
   10a16:	6028      	str	r0, [r5, #0]
   10a18:	f853 2c10 	ldr.w	r2, [r3, #-16]
   10a1c:	602a      	str	r2, [r5, #0]
   10a1e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   10a22:	6029      	str	r1, [r5, #0]
   10a24:	f853 0c08 	ldr.w	r0, [r3, #-8]
   10a28:	6028      	str	r0, [r5, #0]
   10a2a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   10a2e:	602a      	str	r2, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10a30:	1b99      	subs	r1, r3, r6
   10a32:	458b      	cmp	fp, r1
   10a34:	d8e2      	bhi.n	109fc <am_hal_iom_spi_fullduplex_nq+0x130>
    ui32Command |= ui32Options & 0x5C00FF00;
   10a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ui32Command |= (ui32NumBytes & 0xFF);
   10a38:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
    ui32Command |= ui32Options & 0x5C00FF00;
   10a3c:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   10a40:	043f      	lsls	r7, r7, #16
    ui32Command |= ui32Options & 0x5C00FF00;
   10a42:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   10a46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
   10a48:	f407 27e0 	and.w	r7, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
   10a4c:	4317      	orrs	r7, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   10a4e:	03d8      	lsls	r0, r3, #15
    ui32Command |= ui32Options & 0x5C00FF00;
   10a50:	430f      	orrs	r7, r1
    while (ui32DataWritten < ui32NumBytes)
   10a52:	9910      	ldr	r1, [sp, #64]	; 0x40
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
   10a54:	f000 62f0 	and.w	r2, r0, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
   10a58:	4317      	orrs	r7, r2
    pui32TxData += ui32WriteSize >> 2;
   10a5a:	f02b 0303 	bic.w	r3, fp, #3
    while (ui32DataWritten < ui32NumBytes)
   10a5e:	4559      	cmp	r1, fp
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
   10a60:	f8c5 7110 	str.w	r7, [r5, #272]	; 0x110
    pui32TxData += ui32WriteSize >> 2;
   10a64:	441e      	add	r6, r3
    while (ui32DataWritten < ui32NumBytes)
   10a66:	f04f 0700 	mov.w	r7, #0
   10a6a:	bf88      	it	hi
   10a6c:	9403      	strhi	r4, [sp, #12]
   10a6e:	f240 8091 	bls.w	10b94 <am_hal_iom_spi_fullduplex_nq+0x2c8>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   10a72:	f8da 4000 	ldr.w	r4, [sl]
        uint32_t ui32DataSent = ui32DataWritten - am_hal_iom_fifo_full_slots(ui32Module);
   10a76:	b2e0      	uxtb	r0, r4
   10a78:	ebab 0200 	sub.w	r2, fp, r0
        ui32ReadSize = (ui32DataSent - ui32DataRead) & (~0x3);
   10a7c:	1bd3      	subs	r3, r2, r7
   10a7e:	f023 0103 	bic.w	r1, r3, #3
        if (ui32ReadSize <= 4)
   10a82:	2904      	cmp	r1, #4
   10a84:	f200 8115 	bhi.w	10cb2 <am_hal_iom_spi_fullduplex_nq+0x3e6>
   10a88:	f04f 0e00 	mov.w	lr, #0
            ui32ReadSize = 0;
   10a8c:	4674      	mov	r4, lr
        ui32DataRead += ui32ReadSize;
   10a8e:	4427      	add	r7, r4
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   10a90:	f8da 2000 	ldr.w	r2, [sl]
        uint32_t ui32WritesRemaining = ui32NumBytes - ui32DataWritten;
   10a94:	9c10      	ldr	r4, [sp, #64]	; 0x40
        uint32_t ui32ReadWriteDelta = ui32DataWritten - ui32DataRead;
   10a96:	ebab 0107 	sub.w	r1, fp, r7
        uint32_t ui32FifoSpace = 64 - am_hal_iom_fifo_full_slots(ui32Module);
   10a9a:	b2d3      	uxtb	r3, r2
        if (ui32ReadWriteDelta > 64)
   10a9c:	2940      	cmp	r1, #64	; 0x40
        pui32RxData += ui32ReadSize >> 2;
   10a9e:	44f0      	add	r8, lr
        uint32_t ui32FifoSpace = 64 - am_hal_iom_fifo_full_slots(ui32Module);
   10aa0:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
        uint32_t ui32WritesRemaining = ui32NumBytes - ui32DataWritten;
   10aa4:	eba4 040b 	sub.w	r4, r4, fp
        if (ui32ReadWriteDelta > 64)
   10aa8:	f200 80fb 	bhi.w	10ca2 <am_hal_iom_spi_fullduplex_nq+0x3d6>
        uint32_t ui32ReadFifoSpace = 64 - ui32ReadWriteDelta;
   10aac:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
        if ((ui32WritesRemaining <= ui32ReadFifoSpace) &&
   10ab0:	4294      	cmp	r4, r2
   10ab2:	d801      	bhi.n	10ab8 <am_hal_iom_spi_fullduplex_nq+0x1ec>
   10ab4:	4284      	cmp	r4, r0
   10ab6:	d905      	bls.n	10ac4 <am_hal_iom_spi_fullduplex_nq+0x1f8>
        else if (ui32FifoSpace <= ui32ReadFifoSpace)
   10ab8:	4290      	cmp	r0, r2
            ui32WriteSize = ui32FifoSpace & (~0x3);
   10aba:	bf94      	ite	ls
   10abc:	f020 0403 	bicls.w	r4, r0, #3
            ui32WriteSize = ui32ReadFifoSpace & (~0x3);
   10ac0:	f022 0403 	bichi.w	r4, r2, #3
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   10ac4:	9b01      	ldr	r3, [sp, #4]
   10ac6:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10ac8:	f8da 1000 	ldr.w	r1, [sl]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
   10acc:	f010 0f08 	tst.w	r0, #8
   10ad0:	bf14      	ite	ne
   10ad2:	2040      	movne	r0, #64	; 0x40
   10ad4:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
   10ad6:	1a42      	subs	r2, r0, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   10ad8:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
   10adc:	429c      	cmp	r4, r3
   10ade:	f200 80e1 	bhi.w	10ca4 <am_hal_iom_spi_fullduplex_nq+0x3d8>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10ae2:	2c00      	cmp	r4, #0
   10ae4:	d04d      	beq.n	10b82 <am_hal_iom_spi_fullduplex_nq+0x2b6>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10ae6:	4632      	mov	r2, r6
   10ae8:	43f1      	mvns	r1, r6
   10aea:	f852 0b04 	ldr.w	r0, [r2], #4
   10aee:	6028      	str	r0, [r5, #0]
   10af0:	4431      	add	r1, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10af2:	1b93      	subs	r3, r2, r6
   10af4:	4421      	add	r1, r4
   10af6:	429c      	cmp	r4, r3
   10af8:	f3c1 0182 	ubfx	r1, r1, #2, #3
   10afc:	d941      	bls.n	10b82 <am_hal_iom_spi_fullduplex_nq+0x2b6>
   10afe:	b319      	cbz	r1, 10b48 <am_hal_iom_spi_fullduplex_nq+0x27c>
   10b00:	2901      	cmp	r1, #1
   10b02:	d01b      	beq.n	10b3c <am_hal_iom_spi_fullduplex_nq+0x270>
   10b04:	2902      	cmp	r1, #2
   10b06:	d016      	beq.n	10b36 <am_hal_iom_spi_fullduplex_nq+0x26a>
   10b08:	2903      	cmp	r1, #3
   10b0a:	d011      	beq.n	10b30 <am_hal_iom_spi_fullduplex_nq+0x264>
   10b0c:	2904      	cmp	r1, #4
   10b0e:	d00c      	beq.n	10b2a <am_hal_iom_spi_fullduplex_nq+0x25e>
   10b10:	2905      	cmp	r1, #5
   10b12:	d007      	beq.n	10b24 <am_hal_iom_spi_fullduplex_nq+0x258>
   10b14:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10b16:	bf1c      	itt	ne
   10b18:	f852 1b04 	ldrne.w	r1, [r2], #4
   10b1c:	6029      	strne	r1, [r5, #0]
   10b1e:	f852 0b04 	ldr.w	r0, [r2], #4
   10b22:	6028      	str	r0, [r5, #0]
   10b24:	f852 3b04 	ldr.w	r3, [r2], #4
   10b28:	602b      	str	r3, [r5, #0]
   10b2a:	f852 1b04 	ldr.w	r1, [r2], #4
   10b2e:	6029      	str	r1, [r5, #0]
   10b30:	f852 0b04 	ldr.w	r0, [r2], #4
   10b34:	6028      	str	r0, [r5, #0]
   10b36:	f852 3b04 	ldr.w	r3, [r2], #4
   10b3a:	602b      	str	r3, [r5, #0]
   10b3c:	f852 1b04 	ldr.w	r1, [r2], #4
   10b40:	6029      	str	r1, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10b42:	1b90      	subs	r0, r2, r6
   10b44:	4284      	cmp	r4, r0
   10b46:	d91c      	bls.n	10b82 <am_hal_iom_spi_fullduplex_nq+0x2b6>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
   10b48:	4694      	mov	ip, r2
   10b4a:	3220      	adds	r2, #32
   10b4c:	f85c 3b04 	ldr.w	r3, [ip], #4
   10b50:	602b      	str	r3, [r5, #0]
   10b52:	f852 1c1c 	ldr.w	r1, [r2, #-28]
   10b56:	6029      	str	r1, [r5, #0]
   10b58:	f8dc 0004 	ldr.w	r0, [ip, #4]
   10b5c:	6028      	str	r0, [r5, #0]
   10b5e:	f852 3c14 	ldr.w	r3, [r2, #-20]
   10b62:	602b      	str	r3, [r5, #0]
   10b64:	f852 1c10 	ldr.w	r1, [r2, #-16]
   10b68:	6029      	str	r1, [r5, #0]
   10b6a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
   10b6e:	6028      	str	r0, [r5, #0]
   10b70:	f852 3c08 	ldr.w	r3, [r2, #-8]
   10b74:	602b      	str	r3, [r5, #0]
   10b76:	f852 1c04 	ldr.w	r1, [r2, #-4]
   10b7a:	6029      	str	r1, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10b7c:	1b90      	subs	r0, r2, r6
   10b7e:	4284      	cmp	r4, r0
   10b80:	d8e2      	bhi.n	10b48 <am_hal_iom_spi_fullduplex_nq+0x27c>
    while (ui32DataWritten < ui32NumBytes)
   10b82:	9a10      	ldr	r2, [sp, #64]	; 0x40
        ui32DataWritten += ui32WriteSize;
   10b84:	44a3      	add	fp, r4
        pui32TxData += ui32WriteSize >> 2;
   10b86:	f024 0e03 	bic.w	lr, r4, #3
    while (ui32DataWritten < ui32NumBytes)
   10b8a:	455a      	cmp	r2, fp
        pui32TxData += ui32WriteSize >> 2;
   10b8c:	4476      	add	r6, lr
    while (ui32DataWritten < ui32NumBytes)
   10b8e:	f63f af70 	bhi.w	10a72 <am_hal_iom_spi_fullduplex_nq+0x1a6>
   10b92:	9c03      	ldr	r4, [sp, #12]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
   10b94:	4936      	ldr	r1, [pc, #216]	; (10c70 <am_hal_iom_spi_fullduplex_nq+0x3a4>)
   10b96:	2301      	movs	r3, #1
   10b98:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
   10b9c:	461a      	mov	r2, r3
   10b9e:	f505 7101 	add.w	r1, r5, #516	; 0x204
   10ba2:	f7fd ff09 	bl	e9b8 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
   10ba6:	2801      	cmp	r0, #1
   10ba8:	f000 80ee 	beq.w	10d88 <am_hal_iom_spi_fullduplex_nq+0x4bc>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
   10bac:	2601      	movs	r6, #1
   10bae:	f809 6004 	strb.w	r6, [r9, r4]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   10bb2:	f8da 4000 	ldr.w	r4, [sl]
    while (am_hal_iom_fifo_full_slots(ui32Module));
   10bb6:	f014 0fff 	tst.w	r4, #255	; 0xff
   10bba:	d1fa      	bne.n	10bb2 <am_hal_iom_spi_fullduplex_nq+0x2e6>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10bbc:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    ui32ReadSize = ui32NumBytes - ui32DataRead;
   10bc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10bc2:	0703      	lsls	r3, r0, #28
    ui32ReadSize = ui32NumBytes - ui32DataRead;
   10bc4:	eba2 0707 	sub.w	r7, r2, r7
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10bc8:	f140 80d0 	bpl.w	10d6c <am_hal_iom_spi_fullduplex_nq+0x4a0>
    for ( i = 0; i < ui32NumWords; i++ )
   10bcc:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   10bd0:	f007 0203 	and.w	r2, r7, #3
   10bd4:	d04e      	beq.n	10c74 <am_hal_iom_spi_fullduplex_nq+0x3a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10bd6:	4643      	mov	r3, r8
   10bd8:	682c      	ldr	r4, [r5, #0]
   10bda:	f843 4b04 	str.w	r4, [r3], #4
   10bde:	eb08 0b8c 	add.w	fp, r8, ip, lsl #2
   10be2:	ebab 0a08 	sub.w	sl, fp, r8
   10be6:	f1aa 0004 	sub.w	r0, sl, #4
    for ( i = 0; i < ui32NumWords; i++ )
   10bea:	459b      	cmp	fp, r3
   10bec:	f3c0 0182 	ubfx	r1, r0, #2, #3
   10bf0:	d040      	beq.n	10c74 <am_hal_iom_spi_fullduplex_nq+0x3a8>
   10bf2:	b311      	cbz	r1, 10c3a <am_hal_iom_spi_fullduplex_nq+0x36e>
   10bf4:	2901      	cmp	r1, #1
   10bf6:	d01b      	beq.n	10c30 <am_hal_iom_spi_fullduplex_nq+0x364>
   10bf8:	2902      	cmp	r1, #2
   10bfa:	d016      	beq.n	10c2a <am_hal_iom_spi_fullduplex_nq+0x35e>
   10bfc:	2903      	cmp	r1, #3
   10bfe:	d011      	beq.n	10c24 <am_hal_iom_spi_fullduplex_nq+0x358>
   10c00:	2904      	cmp	r1, #4
   10c02:	d00c      	beq.n	10c1e <am_hal_iom_spi_fullduplex_nq+0x352>
   10c04:	2905      	cmp	r1, #5
   10c06:	d007      	beq.n	10c18 <am_hal_iom_spi_fullduplex_nq+0x34c>
   10c08:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10c0a:	bf1c      	itt	ne
   10c0c:	6829      	ldrne	r1, [r5, #0]
   10c0e:	f843 1b04 	strne.w	r1, [r3], #4
   10c12:	682c      	ldr	r4, [r5, #0]
   10c14:	f843 4b04 	str.w	r4, [r3], #4
   10c18:	6828      	ldr	r0, [r5, #0]
   10c1a:	f843 0b04 	str.w	r0, [r3], #4
   10c1e:	6829      	ldr	r1, [r5, #0]
   10c20:	f843 1b04 	str.w	r1, [r3], #4
   10c24:	682c      	ldr	r4, [r5, #0]
   10c26:	f843 4b04 	str.w	r4, [r3], #4
   10c2a:	6828      	ldr	r0, [r5, #0]
   10c2c:	f843 0b04 	str.w	r0, [r3], #4
   10c30:	6829      	ldr	r1, [r5, #0]
   10c32:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
   10c36:	459b      	cmp	fp, r3
   10c38:	d01c      	beq.n	10c74 <am_hal_iom_spi_fullduplex_nq+0x3a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10c3a:	469e      	mov	lr, r3
   10c3c:	682f      	ldr	r7, [r5, #0]
   10c3e:	f84e 7b04 	str.w	r7, [lr], #4
   10c42:	682c      	ldr	r4, [r5, #0]
   10c44:	605c      	str	r4, [r3, #4]
   10c46:	6828      	ldr	r0, [r5, #0]
   10c48:	f8ce 0004 	str.w	r0, [lr, #4]
   10c4c:	6829      	ldr	r1, [r5, #0]
   10c4e:	60d9      	str	r1, [r3, #12]
   10c50:	682f      	ldr	r7, [r5, #0]
   10c52:	611f      	str	r7, [r3, #16]
   10c54:	682c      	ldr	r4, [r5, #0]
   10c56:	615c      	str	r4, [r3, #20]
   10c58:	6828      	ldr	r0, [r5, #0]
   10c5a:	6198      	str	r0, [r3, #24]
   10c5c:	6829      	ldr	r1, [r5, #0]
   10c5e:	61d9      	str	r1, [r3, #28]
   10c60:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
   10c62:	459b      	cmp	fp, r3
   10c64:	d1e9      	bne.n	10c3a <am_hal_iom_spi_fullduplex_nq+0x36e>
   10c66:	e005      	b.n	10c74 <am_hal_iom_spi_fullduplex_nq+0x3a8>
   10c68:	000148b4 	.word	0x000148b4
   10c6c:	000148e8 	.word	0x000148e8
   10c70:	10002928 	.word	0x10002928
    if ( ui32Leftovers )
   10c74:	b13a      	cbz	r2, 10c86 <am_hal_iom_spi_fullduplex_nq+0x3ba>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10c76:	a906      	add	r1, sp, #24
   10c78:	682b      	ldr	r3, [r5, #0]
   10c7a:	f841 3d04 	str.w	r3, [r1, #-4]!
   10c7e:	eb08 008c 	add.w	r0, r8, ip, lsl #2
   10c82:	f000 fbfa 	bl	1147a <memcpy>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10c86:	f240 72ff 	movw	r2, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   10c8a:	9f02      	ldr	r7, [sp, #8]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
   10c8c:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
   10c90:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, CFG) &= ~AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
   10c94:	f8d5 411c 	ldr.w	r4, [r5, #284]	; 0x11c
   10c98:	f024 0008 	bic.w	r0, r4, #8
   10c9c:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
   10ca0:	e61a      	b.n	108d8 <am_hal_iom_spi_fullduplex_nq+0xc>
   10ca2:	e7fe      	b.n	10ca2 <am_hal_iom_spi_fullduplex_nq+0x3d6>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
   10ca4:	4a42      	ldr	r2, [pc, #264]	; (10db0 <am_hal_iom_spi_fullduplex_nq+0x4e4>)
   10ca6:	4843      	ldr	r0, [pc, #268]	; (10db4 <am_hal_iom_spi_fullduplex_nq+0x4e8>)
   10ca8:	f640 7145 	movw	r1, #3909	; 0xf45
   10cac:	f7fd fe7e 	bl	e9ac <am_hal_debug_error>
   10cb0:	e719      	b.n	10ae6 <am_hal_iom_spi_fullduplex_nq+0x21a>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10cb2:	9c01      	ldr	r4, [sp, #4]
   10cb4:	6820      	ldr	r0, [r4, #0]
   10cb6:	0702      	lsls	r2, r0, #28
            ui32ReadSize -= 4;
   10cb8:	f1a1 0404 	sub.w	r4, r1, #4
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
   10cbc:	d54a      	bpl.n	10d54 <am_hal_iom_spi_fullduplex_nq+0x488>
    for ( i = 0; i < ui32NumWords; i++ )
   10cbe:	08a1      	lsrs	r1, r4, #2
   10cc0:	2c00      	cmp	r4, #0
   10cc2:	d045      	beq.n	10d50 <am_hal_iom_spi_fullduplex_nq+0x484>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10cc4:	4642      	mov	r2, r8
   10cc6:	6828      	ldr	r0, [r5, #0]
   10cc8:	f842 0b04 	str.w	r0, [r2], #4
   10ccc:	0089      	lsls	r1, r1, #2
   10cce:	eb08 0e01 	add.w	lr, r8, r1
   10cd2:	1f0b      	subs	r3, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
   10cd4:	4596      	cmp	lr, r2
   10cd6:	f3c3 0082 	ubfx	r0, r3, #2, #3
   10cda:	d039      	beq.n	10d50 <am_hal_iom_spi_fullduplex_nq+0x484>
   10cdc:	b310      	cbz	r0, 10d24 <am_hal_iom_spi_fullduplex_nq+0x458>
   10cde:	2801      	cmp	r0, #1
   10ce0:	d01b      	beq.n	10d1a <am_hal_iom_spi_fullduplex_nq+0x44e>
   10ce2:	2802      	cmp	r0, #2
   10ce4:	d016      	beq.n	10d14 <am_hal_iom_spi_fullduplex_nq+0x448>
   10ce6:	2803      	cmp	r0, #3
   10ce8:	d011      	beq.n	10d0e <am_hal_iom_spi_fullduplex_nq+0x442>
   10cea:	2804      	cmp	r0, #4
   10cec:	d00c      	beq.n	10d08 <am_hal_iom_spi_fullduplex_nq+0x43c>
   10cee:	2805      	cmp	r0, #5
   10cf0:	d007      	beq.n	10d02 <am_hal_iom_spi_fullduplex_nq+0x436>
   10cf2:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10cf4:	bf1c      	itt	ne
   10cf6:	6828      	ldrne	r0, [r5, #0]
   10cf8:	f842 0b04 	strne.w	r0, [r2], #4
   10cfc:	682b      	ldr	r3, [r5, #0]
   10cfe:	f842 3b04 	str.w	r3, [r2], #4
   10d02:	6828      	ldr	r0, [r5, #0]
   10d04:	f842 0b04 	str.w	r0, [r2], #4
   10d08:	682b      	ldr	r3, [r5, #0]
   10d0a:	f842 3b04 	str.w	r3, [r2], #4
   10d0e:	6828      	ldr	r0, [r5, #0]
   10d10:	f842 0b04 	str.w	r0, [r2], #4
   10d14:	682b      	ldr	r3, [r5, #0]
   10d16:	f842 3b04 	str.w	r3, [r2], #4
   10d1a:	6828      	ldr	r0, [r5, #0]
   10d1c:	f842 0b04 	str.w	r0, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
   10d20:	4596      	cmp	lr, r2
   10d22:	d015      	beq.n	10d50 <am_hal_iom_spi_fullduplex_nq+0x484>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
   10d24:	4694      	mov	ip, r2
   10d26:	682b      	ldr	r3, [r5, #0]
   10d28:	f84c 3b04 	str.w	r3, [ip], #4
   10d2c:	6828      	ldr	r0, [r5, #0]
   10d2e:	6050      	str	r0, [r2, #4]
   10d30:	682b      	ldr	r3, [r5, #0]
   10d32:	f8cc 3004 	str.w	r3, [ip, #4]
   10d36:	6828      	ldr	r0, [r5, #0]
   10d38:	60d0      	str	r0, [r2, #12]
   10d3a:	682b      	ldr	r3, [r5, #0]
   10d3c:	6113      	str	r3, [r2, #16]
   10d3e:	6828      	ldr	r0, [r5, #0]
   10d40:	6150      	str	r0, [r2, #20]
   10d42:	682b      	ldr	r3, [r5, #0]
   10d44:	6193      	str	r3, [r2, #24]
   10d46:	6828      	ldr	r0, [r5, #0]
   10d48:	61d0      	str	r0, [r2, #28]
   10d4a:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
   10d4c:	4596      	cmp	lr, r2
   10d4e:	d1e9      	bne.n	10d24 <am_hal_iom_spi_fullduplex_nq+0x458>
   10d50:	468e      	mov	lr, r1
   10d52:	e69c      	b.n	10a8e <am_hal_iom_spi_fullduplex_nq+0x1c2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   10d54:	f8da 2000 	ldr.w	r2, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
   10d58:	b2d3      	uxtb	r3, r2
   10d5a:	429c      	cmp	r4, r3
   10d5c:	d9af      	bls.n	10cbe <am_hal_iom_spi_fullduplex_nq+0x3f2>
   10d5e:	4a16      	ldr	r2, [pc, #88]	; (10db8 <am_hal_iom_spi_fullduplex_nq+0x4ec>)
   10d60:	4814      	ldr	r0, [pc, #80]	; (10db4 <am_hal_iom_spi_fullduplex_nq+0x4e8>)
   10d62:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   10d66:	f7fd fe21 	bl	e9ac <am_hal_debug_error>
   10d6a:	e7a8      	b.n	10cbe <am_hal_iom_spi_fullduplex_nq+0x3f2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
   10d6c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
   10d70:	fa5f f981 	uxtb.w	r9, r1
   10d74:	454f      	cmp	r7, r9
   10d76:	f67f af29 	bls.w	10bcc <am_hal_iom_spi_fullduplex_nq+0x300>
   10d7a:	4a0f      	ldr	r2, [pc, #60]	; (10db8 <am_hal_iom_spi_fullduplex_nq+0x4ec>)
   10d7c:	480d      	ldr	r0, [pc, #52]	; (10db4 <am_hal_iom_spi_fullduplex_nq+0x4e8>)
   10d7e:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   10d82:	f7fd fe13 	bl	e9ac <am_hal_debug_error>
   10d86:	e721      	b.n	10bcc <am_hal_iom_spi_fullduplex_nq+0x300>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
   10d88:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   10d8c:	f013 0fcc 	tst.w	r3, #204	; 0xcc
   10d90:	d10a      	bne.n	10da8 <am_hal_iom_spi_fullduplex_nq+0x4dc>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   10d92:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   10d96:	d109      	bne.n	10dac <am_hal_iom_spi_fullduplex_nq+0x4e0>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
   10d98:	f013 0f10 	tst.w	r3, #16
   10d9c:	bf14      	ite	ne
   10d9e:	2606      	movne	r6, #6
   10da0:	2600      	moveq	r6, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
   10da2:	f809 6004 	strb.w	r6, [r9, r4]
   10da6:	e704      	b.n	10bb2 <am_hal_iom_spi_fullduplex_nq+0x2e6>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   10da8:	2605      	movs	r6, #5
   10daa:	e7fa      	b.n	10da2 <am_hal_iom_spi_fullduplex_nq+0x4d6>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   10dac:	2607      	movs	r6, #7
   10dae:	e7f8      	b.n	10da2 <am_hal_iom_spi_fullduplex_nq+0x4d6>
   10db0:	000148b4 	.word	0x000148b4
   10db4:	000148e8 	.word	0x000148e8
   10db8:	000148fc 	.word	0x000148fc

00010dbc <am_hal_iom_spi_fullduplex>:
{
   10dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10dbe:	2805      	cmp	r0, #5
{
   10dc0:	9d05      	ldr	r5, [sp, #20]
   10dc2:	9e06      	ldr	r6, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10dc4:	d901      	bls.n	10dca <am_hal_iom_spi_fullduplex+0xe>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   10dc6:	2002      	movs	r0, #2
   10dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10dca:	4f0e      	ldr	r7, [pc, #56]	; (10e04 <am_hal_iom_spi_fullduplex+0x48>)
   10dcc:	f04f 0e00 	mov.w	lr, #0
   10dd0:	4604      	mov	r4, r0
   10dd2:	f807 e000 	strb.w	lr, [r7, r0]
    if (ui32NumBytes == 0)
   10dd6:	b915      	cbnz	r5, 10dde <am_hal_iom_spi_fullduplex+0x22>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10dd8:	2003      	movs	r0, #3
   10dda:	5538      	strb	r0, [r7, r4]
        return ui32Status;
   10ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
   10dde:	f8df e028 	ldr.w	lr, [pc, #40]	; 10e08 <am_hal_iom_spi_fullduplex+0x4c>
   10de2:	f8de c000 	ldr.w	ip, [lr]
   10de6:	fa5f fe8c 	uxtb.w	lr, ip
   10dea:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   10dee:	d002      	beq.n	10df6 <am_hal_iom_spi_fullduplex+0x3a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   10df0:	2005      	movs	r0, #5
   10df2:	5538      	strb	r0, [r7, r4]
        return ui32Status;
   10df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Status = am_hal_iom_spi_fullduplex_nq(ui32Module, ui32ChipSelect,
   10df6:	9606      	str	r6, [sp, #24]
   10df8:	9505      	str	r5, [sp, #20]
}
   10dfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ui32Status = am_hal_iom_spi_fullduplex_nq(ui32Module, ui32ChipSelect,
   10dfe:	f7ff bd65 	b.w	108cc <am_hal_iom_spi_fullduplex_nq>
   10e02:	bf00      	nop
   10e04:	10002604 	.word	0x10002604
   10e08:	4002000c 	.word	0x4002000c

00010e0c <am_hal_iom_spi_write_nb>:
{
   10e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10e0e:	2805      	cmp	r0, #5
{
   10e10:	9f05      	ldr	r7, [sp, #20]
   10e12:	f8dd e018 	ldr.w	lr, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10e16:	d901      	bls.n	10e1c <am_hal_iom_spi_write_nb+0x10>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   10e18:	2002      	movs	r0, #2
}
   10e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e1c:	4e0c      	ldr	r6, [pc, #48]	; (10e50 <am_hal_iom_spi_write_nb+0x44>)
    while ( g_bIomBusy[ui32Module] );
   10e1e:	5c34      	ldrb	r4, [r6, r0]
   10e20:	f004 05ff 	and.w	r5, r4, #255	; 0xff
   10e24:	2c00      	cmp	r4, #0
   10e26:	d1fa      	bne.n	10e1e <am_hal_iom_spi_write_nb+0x12>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10e28:	4c0a      	ldr	r4, [pc, #40]	; (10e54 <am_hal_iom_spi_write_nb+0x48>)
    if (ui32NumBytes == 0)
   10e2a:	f103 3cff 	add.w	ip, r3, #4294967295
   10e2e:	f640 76fe 	movw	r6, #4094	; 0xffe
   10e32:	45b4      	cmp	ip, r6
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10e34:	5425      	strb	r5, [r4, r0]
    if (ui32NumBytes == 0)
   10e36:	d903      	bls.n	10e40 <am_hal_iom_spi_write_nb+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10e38:	2303      	movs	r3, #3
   10e3a:	5423      	strb	r3, [r4, r0]
        return ui32Status;
   10e3c:	4618      	mov	r0, r3
   10e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e40:	f8cd e018 	str.w	lr, [sp, #24]
   10e44:	9705      	str	r7, [sp, #20]
}
   10e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10e4a:	f7fe bf5f 	b.w	fd0c <am_hal_iom_spi_write_nb.part.6>
   10e4e:	bf00      	nop
   10e50:	100025fc 	.word	0x100025fc
   10e54:	10002604 	.word	0x10002604

00010e58 <am_hal_iom_spi_read_nb>:
{
   10e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10e5a:	2805      	cmp	r0, #5
{
   10e5c:	9f05      	ldr	r7, [sp, #20]
   10e5e:	f8dd e018 	ldr.w	lr, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10e62:	d901      	bls.n	10e68 <am_hal_iom_spi_read_nb+0x10>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
   10e64:	2002      	movs	r0, #2
}
   10e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e68:	4e0c      	ldr	r6, [pc, #48]	; (10e9c <am_hal_iom_spi_read_nb+0x44>)
    while ( g_bIomBusy[ui32Module] );
   10e6a:	5c34      	ldrb	r4, [r6, r0]
   10e6c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
   10e70:	2c00      	cmp	r4, #0
   10e72:	d1fa      	bne.n	10e6a <am_hal_iom_spi_read_nb+0x12>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10e74:	4c0a      	ldr	r4, [pc, #40]	; (10ea0 <am_hal_iom_spi_read_nb+0x48>)
    if (ui32NumBytes == 0)
   10e76:	f103 3cff 	add.w	ip, r3, #4294967295
   10e7a:	f640 76fe 	movw	r6, #4094	; 0xffe
   10e7e:	45b4      	cmp	ip, r6
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
   10e80:	5425      	strb	r5, [r4, r0]
    if (ui32NumBytes == 0)
   10e82:	d903      	bls.n	10e8c <am_hal_iom_spi_read_nb+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
   10e84:	2303      	movs	r3, #3
   10e86:	5423      	strb	r3, [r4, r0]
        return ui32Status;
   10e88:	4618      	mov	r0, r3
   10e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e8c:	f8cd e018 	str.w	lr, [sp, #24]
   10e90:	9705      	str	r7, [sp, #20]
}
   10e92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10e96:	f7ff b825 	b.w	fee4 <am_hal_iom_spi_read_nb.part.7>
   10e9a:	bf00      	nop
   10e9c:	100025fc 	.word	0x100025fc
   10ea0:	10002604 	.word	0x10002604

00010ea4 <am_hal_iom_poll_complete>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10ea4:	2805      	cmp	r0, #5
   10ea6:	d803      	bhi.n	10eb0 <am_hal_iom_poll_complete+0xc>
   10ea8:	4a02      	ldr	r2, [pc, #8]	; (10eb4 <am_hal_iom_poll_complete+0x10>)
    while ( g_bIomBusy[ui32Module] );
   10eaa:	5c13      	ldrb	r3, [r2, r0]
   10eac:	2b00      	cmp	r3, #0
   10eae:	d1fc      	bne.n	10eaa <am_hal_iom_poll_complete+0x6>
   10eb0:	4770      	bx	lr
   10eb2:	bf00      	nop
   10eb4:	100025fc 	.word	0x100025fc

00010eb8 <am_hal_iom_int_service>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10eb8:	2805      	cmp	r0, #5
   10eba:	d801      	bhi.n	10ec0 <am_hal_iom_int_service+0x8>
   10ebc:	f7fd befe 	b.w	ecbc <am_hal_iom_int_service.part.20>
   10ec0:	4770      	bx	lr
   10ec2:	bf00      	nop

00010ec4 <am_hal_iom_int_enable>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10ec4:	2805      	cmp	r0, #5
   10ec6:	d808      	bhi.n	10eda <am_hal_iom_int_enable+0x16>
    AM_REGn(IOMSTR, ui32Module, INTEN) |= ui32Interrupt;
   10ec8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   10ecc:	3004      	adds	r0, #4
   10ece:	0302      	lsls	r2, r0, #12
   10ed0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   10ed4:	4319      	orrs	r1, r3
   10ed6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   10eda:	4770      	bx	lr

00010edc <am_hal_iom_int_clear>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10edc:	2805      	cmp	r0, #5
   10ede:	d805      	bhi.n	10eec <am_hal_iom_int_clear+0x10>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
   10ee0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   10ee4:	3004      	adds	r0, #4
   10ee6:	0302      	lsls	r2, r0, #12
   10ee8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
   10eec:	4770      	bx	lr
   10eee:	bf00      	nop

00010ef0 <am_hal_iom_int_status_get>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
   10ef0:	2805      	cmp	r0, #5
   10ef2:	d80d      	bhi.n	10f10 <am_hal_iom_int_status_get+0x20>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
   10ef4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   10ef8:	3004      	adds	r0, #4
   10efa:	0302      	lsls	r2, r0, #12
    if ( bEnabledOnly )
   10efc:	b911      	cbnz	r1, 10f04 <am_hal_iom_int_status_get+0x14>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
   10efe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
   10f02:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
   10f04:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
   10f08:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   10f0c:	4018      	ands	r0, r3
   10f0e:	4770      	bx	lr
        return 0;
   10f10:	2000      	movs	r0, #0
    }
}
   10f12:	4770      	bx	lr

00010f14 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
   10f14:	4b0d      	ldr	r3, [pc, #52]	; (10f4c <am_hal_itm_enable+0x38>)
   10f16:	6818      	ldr	r0, [r3, #0]
   10f18:	07c2      	lsls	r2, r0, #31
   10f1a:	d416      	bmi.n	10f4a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
   10f1c:	4a0c      	ldr	r2, [pc, #48]	; (10f50 <am_hal_itm_enable+0x3c>)
   10f1e:	6811      	ldr	r1, [r2, #0]
{
   10f20:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
   10f22:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
   10f26:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
   10f28:	6815      	ldr	r5, [r2, #0]
   10f2a:	01eb      	lsls	r3, r5, #7
   10f2c:	d5fc      	bpl.n	10f28 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
   10f2e:	4809      	ldr	r0, [pc, #36]	; (10f54 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
   10f30:	4c09      	ldr	r4, [pc, #36]	; (10f58 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
   10f32:	4d0a      	ldr	r5, [pc, #40]	; (10f5c <am_hal_itm_enable+0x48>)
   10f34:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
   10f36:	250f      	movs	r5, #15
   10f38:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
   10f3a:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
   10f3c:	4908      	ldr	r1, [pc, #32]	; (10f60 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
   10f3e:	4b09      	ldr	r3, [pc, #36]	; (10f64 <am_hal_itm_enable+0x50>)
   10f40:	4a09      	ldr	r2, [pc, #36]	; (10f68 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
   10f42:	f04f 30ff 	mov.w	r0, #4294967295
   10f46:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
   10f48:	601a      	str	r2, [r3, #0]
}
   10f4a:	4770      	bx	lr
   10f4c:	100025f8 	.word	0x100025f8
   10f50:	e000edfc 	.word	0xe000edfc
   10f54:	e0000fb0 	.word	0xe0000fb0
   10f58:	e0000e40 	.word	0xe0000e40
   10f5c:	c5acce55 	.word	0xc5acce55
   10f60:	e0000e00 	.word	0xe0000e00
   10f64:	e0000e80 	.word	0xe0000e80
   10f68:	00150511 	.word	0x00150511

00010f6c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
   10f6c:	7803      	ldrb	r3, [r0, #0]
   10f6e:	b1b3      	cbz	r3, 10f9e <am_hal_itm_print+0x32>
{
   10f70:	b410      	push	{r4}
   10f72:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
   10f74:	2400      	movs	r4, #0
   10f76:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
   10f7a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
   10f7c:	2900      	cmp	r1, #0
   10f7e:	d1fa      	bne.n	10f76 <am_hal_itm_print+0xa>
   10f80:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
   10f82:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
   10f86:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
   10f8a:	f8dc 3000 	ldr.w	r3, [ip]
   10f8e:	2b00      	cmp	r3, #0
   10f90:	d0fb      	beq.n	10f8a <am_hal_itm_print+0x1e>
    while (ui32Length)
   10f92:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
   10f94:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
   10f98:	d1f5      	bne.n	10f86 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
   10f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f9e:	4770      	bx	lr

00010fa0 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
   10fa0:	490d      	ldr	r1, [pc, #52]	; (10fd8 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
   10fa2:	4b0e      	ldr	r3, [pc, #56]	; (10fdc <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
   10fa4:	4a0e      	ldr	r2, [pc, #56]	; (10fe0 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
   10fa6:	681b      	ldr	r3, [r3, #0]
{
   10fa8:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
   10faa:	680d      	ldr	r5, [r1, #0]
   10fac:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
   10fae:	6815      	ldr	r5, [r2, #0]
   10fb0:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
   10fb2:	4c0c      	ldr	r4, [pc, #48]	; (10fe4 <am_hal_mcuctrl_fault_status+0x44>)
   10fb4:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
   10fb6:	4329      	orrs	r1, r5
   10fb8:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
   10fba:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
   10fbc:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
   10fc0:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
   10fc2:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
   10fc4:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
   10fc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
   10fcc:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
   10fce:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
   10fd0:	6142      	str	r2, [r0, #20]
}
   10fd2:	bc70      	pop	{r4, r5, r6}
   10fd4:	4770      	bx	lr
   10fd6:	bf00      	nop
   10fd8:	400201c4 	.word	0x400201c4
   10fdc:	400201cc 	.word	0x400201cc
   10fe0:	400201c0 	.word	0x400201c0
   10fe4:	400201c8 	.word	0x400201c8

00010fe8 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
   10fe8:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
   10fea:	4604      	mov	r4, r0
{
   10fec:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
   10fee:	b1b8      	cbz	r0, 11020 <am_hal_pwrctrl_periph_enable+0x38>
   10ff0:	1e43      	subs	r3, r0, #1
   10ff2:	4203      	tst	r3, r0
   10ff4:	d114      	bne.n	11020 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
   10ff6:	f7fd fe25 	bl	ec44 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
   10ffa:	4a18      	ldr	r2, [pc, #96]	; (1105c <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
   10ffc:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
   10ffe:	6810      	ldr	r0, [r2, #0]
   11000:	4320      	orrs	r0, r4
   11002:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
   11004:	9801      	ldr	r0, [sp, #4]
   11006:	f7fd fe21 	bl	ec4c <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
   1100a:	200e      	movs	r0, #14
   1100c:	f7fd fcd0 	bl	e9b0 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
   11010:	f014 0f0e 	tst.w	r4, #14
   11014:	d10a      	bne.n	1102c <am_hal_pwrctrl_periph_enable+0x44>
   11016:	f014 0f70 	tst.w	r4, #112	; 0x70
   1101a:	d00e      	beq.n	1103a <am_hal_pwrctrl_periph_enable+0x52>
   1101c:	2408      	movs	r4, #8
   1101e:	e006      	b.n	1102e <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
   11020:	4a0f      	ldr	r2, [pc, #60]	; (11060 <am_hal_pwrctrl_periph_enable+0x78>)
   11022:	4810      	ldr	r0, [pc, #64]	; (11064 <am_hal_pwrctrl_periph_enable+0x7c>)
   11024:	2160      	movs	r1, #96	; 0x60
   11026:	f7fd fcc1 	bl	e9ac <am_hal_debug_error>
   1102a:	e7e4      	b.n	10ff6 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
   1102c:	2404      	movs	r4, #4
   1102e:	4a0e      	ldr	r2, [pc, #56]	; (11068 <am_hal_pwrctrl_periph_enable+0x80>)
   11030:	6813      	ldr	r3, [r2, #0]
   11032:	421c      	tst	r4, r3
   11034:	d0fc      	beq.n	11030 <am_hal_pwrctrl_periph_enable+0x48>
}
   11036:	b002      	add	sp, #8
   11038:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
   1103a:	f240 1181 	movw	r1, #385	; 0x181
   1103e:	420c      	tst	r4, r1
   11040:	d108      	bne.n	11054 <am_hal_pwrctrl_periph_enable+0x6c>
   11042:	05a3      	lsls	r3, r4, #22
   11044:	d408      	bmi.n	11058 <am_hal_pwrctrl_periph_enable+0x70>
   11046:	f414 6f80 	tst.w	r4, #1024	; 0x400
   1104a:	bf14      	ite	ne
   1104c:	2410      	movne	r4, #16
   1104e:	f04f 34ff 	moveq.w	r4, #4294967295
   11052:	e7ec      	b.n	1102e <am_hal_pwrctrl_periph_enable+0x46>
   11054:	2402      	movs	r4, #2
   11056:	e7ea      	b.n	1102e <am_hal_pwrctrl_periph_enable+0x46>
   11058:	2480      	movs	r4, #128	; 0x80
   1105a:	e7e8      	b.n	1102e <am_hal_pwrctrl_periph_enable+0x46>
   1105c:	40021008 	.word	0x40021008
   11060:	000149f8 	.word	0x000149f8
   11064:	00014a2c 	.word	0x00014a2c
   11068:	40021014 	.word	0x40021014

0001106c <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
   1106c:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
   1106e:	4604      	mov	r4, r0
{
   11070:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
   11072:	b110      	cbz	r0, 1107a <am_hal_pwrctrl_periph_disable+0xe>
   11074:	1e43      	subs	r3, r0, #1
   11076:	4203      	tst	r3, r0
   11078:	d004      	beq.n	11084 <am_hal_pwrctrl_periph_disable+0x18>
   1107a:	4a0a      	ldr	r2, [pc, #40]	; (110a4 <am_hal_pwrctrl_periph_disable+0x38>)
   1107c:	480a      	ldr	r0, [pc, #40]	; (110a8 <am_hal_pwrctrl_periph_disable+0x3c>)
   1107e:	2190      	movs	r1, #144	; 0x90
   11080:	f7fd fc94 	bl	e9ac <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
   11084:	f7fd fdde 	bl	ec44 <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
   11088:	4a08      	ldr	r2, [pc, #32]	; (110ac <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
   1108a:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
   1108c:	6810      	ldr	r0, [r2, #0]
   1108e:	ea20 0104 	bic.w	r1, r0, r4
   11092:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
   11094:	9801      	ldr	r0, [sp, #4]
   11096:	f7fd fdd9 	bl	ec4c <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
   1109a:	200e      	movs	r0, #14
   1109c:	f7fd fc88 	bl	e9b0 <am_hal_flash_delay>
}
   110a0:	b002      	add	sp, #8
   110a2:	bd10      	pop	{r4, pc}
   110a4:	000149f8 	.word	0x000149f8
   110a8:	00014a2c 	.word	0x00014a2c
   110ac:	40021008 	.word	0x40021008

000110b0 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
   110b0:	4b0b      	ldr	r3, [pc, #44]	; (110e0 <am_hal_pwrctrl_bucks_enable+0x30>)
   110b2:	681a      	ldr	r2, [r3, #0]
   110b4:	0792      	lsls	r2, r2, #30
   110b6:	d502      	bpl.n	110be <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
   110b8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
   110ba:	07c3      	lsls	r3, r0, #31
   110bc:	d40e      	bmi.n	110dc <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
   110be:	4b09      	ldr	r3, [pc, #36]	; (110e4 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
   110c0:	4a07      	ldr	r2, [pc, #28]	; (110e0 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
   110c2:	6819      	ldr	r1, [r3, #0]
   110c4:	f041 0002 	orr.w	r0, r1, #2
   110c8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
   110ca:	6819      	ldr	r1, [r3, #0]
   110cc:	f041 0001 	orr.w	r0, r1, #1
   110d0:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
   110d2:	6813      	ldr	r3, [r2, #0]
   110d4:	f003 0103 	and.w	r1, r3, #3
   110d8:	2903      	cmp	r1, #3
   110da:	d1fa      	bne.n	110d2 <am_hal_pwrctrl_bucks_enable+0x22>
   110dc:	4770      	bx	lr
   110de:	bf00      	nop
   110e0:	40021004 	.word	0x40021004
   110e4:	40021000 	.word	0x40021000

000110e8 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
   110e8:	4b12      	ldr	r3, [pc, #72]	; (11134 <am_hal_pwrctrl_bucks_disable+0x4c>)
   110ea:	681a      	ldr	r2, [r3, #0]
   110ec:	0792      	lsls	r2, r2, #30
   110ee:	d402      	bmi.n	110f6 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
   110f0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
   110f2:	07c3      	lsls	r3, r0, #31
   110f4:	d51c      	bpl.n	11130 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
   110f6:	4910      	ldr	r1, [pc, #64]	; (11138 <am_hal_pwrctrl_bucks_disable+0x50>)
   110f8:	680b      	ldr	r3, [r1, #0]
   110fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
   110fe:	2a20      	cmp	r2, #32
   11100:	d00b      	beq.n	1111a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
   11102:	4b0e      	ldr	r3, [pc, #56]	; (1113c <am_hal_pwrctrl_bucks_disable+0x54>)
   11104:	681a      	ldr	r2, [r3, #0]
   11106:	f022 0002 	bic.w	r0, r2, #2
   1110a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
   1110c:	6819      	ldr	r1, [r3, #0]
   1110e:	f021 0201 	bic.w	r2, r1, #1
   11112:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
   11114:	200a      	movs	r0, #10
   11116:	f7fd bc4b 	b.w	e9b0 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
   1111a:	4809      	ldr	r0, [pc, #36]	; (11140 <am_hal_pwrctrl_bucks_disable+0x58>)
   1111c:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
   1111e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11122:	d1ee      	bne.n	11102 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
   11124:	4805      	ldr	r0, [pc, #20]	; (1113c <am_hal_pwrctrl_bucks_disable+0x54>)
   11126:	6803      	ldr	r3, [r0, #0]
   11128:	f003 0105 	and.w	r1, r3, #5
   1112c:	6001      	str	r1, [r0, #0]
   1112e:	e7f1      	b.n	11114 <am_hal_pwrctrl_bucks_disable+0x2c>
   11130:	4770      	bx	lr
   11132:	bf00      	nop
   11134:	40021004 	.word	0x40021004
   11138:	4002000c 	.word	0x4002000c
   1113c:	40021000 	.word	0x40021000
   11140:	40021008 	.word	0x40021008

00011144 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
   11144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11146:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   11148:	6907      	ldr	r7, [r0, #16]
{
   1114a:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   1114c:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
   11150:	f7fd fd78 	bl	ec44 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
   11154:	68a5      	ldr	r5, [r4, #8]
   11156:	68e3      	ldr	r3, [r4, #12]
   11158:	1b59      	subs	r1, r3, r5
   1115a:	428f      	cmp	r7, r1
   1115c:	d87c      	bhi.n	11258 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
   1115e:	2f00      	cmp	r7, #0
   11160:	d073      	beq.n	1124a <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11162:	4635      	mov	r5, r6
   11164:	6823      	ldr	r3, [r4, #0]
   11166:	6962      	ldr	r2, [r4, #20]
   11168:	f815 1b01 	ldrb.w	r1, [r5], #1
   1116c:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1116e:	6823      	ldr	r3, [r4, #0]
   11170:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   11174:	1c5a      	adds	r2, r3, #1
   11176:	19f1      	adds	r1, r6, r7
   11178:	f107 3cff 	add.w	ip, r7, #4294967295
   1117c:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
   11180:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11182:	fb0e 2316 	mls	r3, lr, r6, r2
   11186:	6023      	str	r3, [r4, #0]
   11188:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
   1118c:	d05c      	beq.n	11248 <am_hal_queue_item_add+0x104>
   1118e:	b34a      	cbz	r2, 111e4 <am_hal_queue_item_add+0xa0>
   11190:	2a01      	cmp	r2, #1
   11192:	d019      	beq.n	111c8 <am_hal_queue_item_add+0x84>
   11194:	2a02      	cmp	r2, #2
   11196:	d00b      	beq.n	111b0 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11198:	6962      	ldr	r2, [r4, #20]
   1119a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1119e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   111a0:	6823      	ldr	r3, [r4, #0]
   111a2:	68e6      	ldr	r6, [r4, #12]
   111a4:	1c5a      	adds	r2, r3, #1
   111a6:	fbb2 fef6 	udiv	lr, r2, r6
   111aa:	fb06 231e 	mls	r3, r6, lr, r2
   111ae:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   111b0:	6962      	ldr	r2, [r4, #20]
   111b2:	f815 6b01 	ldrb.w	r6, [r5], #1
   111b6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   111b8:	6823      	ldr	r3, [r4, #0]
   111ba:	68e6      	ldr	r6, [r4, #12]
   111bc:	1c5a      	adds	r2, r3, #1
   111be:	fbb2 fcf6 	udiv	ip, r2, r6
   111c2:	fb06 231c 	mls	r3, r6, ip, r2
   111c6:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   111c8:	6962      	ldr	r2, [r4, #20]
   111ca:	f815 6b01 	ldrb.w	r6, [r5], #1
   111ce:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   111d0:	6823      	ldr	r3, [r4, #0]
   111d2:	68e6      	ldr	r6, [r4, #12]
   111d4:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
   111d6:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   111d8:	fbb2 fef6 	udiv	lr, r2, r6
   111dc:	fb06 231e 	mls	r3, r6, lr, r2
   111e0:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
   111e2:	d031      	beq.n	11248 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   111e4:	46ac      	mov	ip, r5
   111e6:	6962      	ldr	r2, [r4, #20]
   111e8:	f81c 6b01 	ldrb.w	r6, [ip], #1
   111ec:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   111ee:	6823      	ldr	r3, [r4, #0]
   111f0:	68e2      	ldr	r2, [r4, #12]
   111f2:	1c5e      	adds	r6, r3, #1
   111f4:	fbb6 fef2 	udiv	lr, r6, r2
   111f8:	fb02 631e 	mls	r3, r2, lr, r6
   111fc:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   111fe:	6962      	ldr	r2, [r4, #20]
   11200:	786e      	ldrb	r6, [r5, #1]
   11202:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11204:	6823      	ldr	r3, [r4, #0]
   11206:	68e2      	ldr	r2, [r4, #12]
   11208:	1c5e      	adds	r6, r3, #1
   1120a:	fbb6 fef2 	udiv	lr, r6, r2
   1120e:	fb02 631e 	mls	r3, r2, lr, r6
   11212:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11214:	6962      	ldr	r2, [r4, #20]
   11216:	f89c 6001 	ldrb.w	r6, [ip, #1]
   1121a:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1121c:	6823      	ldr	r3, [r4, #0]
   1121e:	68e2      	ldr	r2, [r4, #12]
   11220:	1c5e      	adds	r6, r3, #1
   11222:	fbb6 fcf2 	udiv	ip, r6, r2
   11226:	fb02 631c 	mls	r3, r2, ip, r6
   1122a:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   1122c:	6962      	ldr	r2, [r4, #20]
   1122e:	78ee      	ldrb	r6, [r5, #3]
   11230:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11232:	6823      	ldr	r3, [r4, #0]
   11234:	68e2      	ldr	r2, [r4, #12]
   11236:	1c5e      	adds	r6, r3, #1
   11238:	3504      	adds	r5, #4
   1123a:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
   1123e:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11240:	fb02 631e 	mls	r3, r2, lr, r6
   11244:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
   11246:	d1cd      	bne.n	111e4 <am_hal_queue_item_add+0xa0>
   11248:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
   1124a:	443d      	add	r5, r7
   1124c:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
   1124e:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
   11250:	f7fd fcfc 	bl	ec4c <am_hal_interrupt_master_set>

    return bSuccess;
}
   11254:	4620      	mov	r0, r4
   11256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
   11258:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
   1125a:	f7fd fcf7 	bl	ec4c <am_hal_interrupt_master_set>
}
   1125e:	4620      	mov	r0, r4
   11260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11262:	bf00      	nop

00011264 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
   11264:	b5f0      	push	{r4, r5, r6, r7, lr}
   11266:	b083      	sub	sp, #12
   11268:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
   1126a:	f7fd fceb 	bl	ec44 <am_hal_interrupt_master_disable>
   1126e:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
   11270:	b124      	cbz	r4, 1127c <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
   11272:	4b42      	ldr	r3, [pc, #264]	; (1137c <am_hal_sysctrl_sleep+0x118>)
   11274:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
   11276:	f010 0c01 	ands.w	ip, r0, #1
   1127a:	d00a      	beq.n	11292 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
   1127c:	4a40      	ldr	r2, [pc, #256]	; (11380 <am_hal_sysctrl_sleep+0x11c>)
   1127e:	6811      	ldr	r1, [r2, #0]
   11280:	f021 0604 	bic.w	r6, r1, #4
   11284:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
   11286:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
   11288:	4628      	mov	r0, r5
   1128a:	f7fd fcdf 	bl	ec4c <am_hal_interrupt_master_set>
}
   1128e:	b003      	add	sp, #12
   11290:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
   11292:	4c3b      	ldr	r4, [pc, #236]	; (11380 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
   11294:	4b3b      	ldr	r3, [pc, #236]	; (11384 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
   11296:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
   11298:	4e3b      	ldr	r6, [pc, #236]	; (11388 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
   1129a:	4f3c      	ldr	r7, [pc, #240]	; (1138c <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
   1129c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1139c <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
   112a0:	f040 0204 	orr.w	r2, r0, #4
   112a4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
   112a6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
   112a8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
   112aa:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
   112ae:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
   112b0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
   112b4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
   112b6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
   112ba:	bf14      	ite	ne
   112bc:	2700      	movne	r7, #0
   112be:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
   112c0:	2803      	cmp	r0, #3
   112c2:	bf98      	it	ls
   112c4:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
   112c8:	f012 0403 	ands.w	r4, r2, #3
   112cc:	bf18      	it	ne
   112ce:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
   112d0:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
   112d4:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
   112d6:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
   112da:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
   112de:	d103      	bne.n	112e8 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
   112e0:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
   112e4:	2c0f      	cmp	r4, #15
   112e6:	d00a      	beq.n	112fe <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
   112e8:	bf30      	wfi
        if ( bBuckZX_chk )
   112ea:	2c0f      	cmp	r4, #15
   112ec:	d01a      	beq.n	11324 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
   112ee:	4e28      	ldr	r6, [pc, #160]	; (11390 <am_hal_sysctrl_sleep+0x12c>)
   112f0:	2001      	movs	r0, #1
   112f2:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
   112f4:	4628      	mov	r0, r5
   112f6:	f7fd fca9 	bl	ec4c <am_hal_interrupt_master_set>
}
   112fa:	b003      	add	sp, #12
   112fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
   112fe:	6832      	ldr	r2, [r6, #0]
   11300:	1e51      	subs	r1, r2, #1
   11302:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
   11304:	9800      	ldr	r0, [sp, #0]
   11306:	f04f 31ff 	mov.w	r1, #4294967295
   1130a:	f7fd fa55 	bl	e7b8 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
   1130e:	9800      	ldr	r0, [sp, #0]
   11310:	463b      	mov	r3, r7
   11312:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   11316:	f04f 31ff 	mov.w	r1, #4294967295
   1131a:	f7fd fabb 	bl	e894 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
   1131e:	f7ff fee3 	bl	110e8 <am_hal_pwrctrl_bucks_disable>
   11322:	e7e1      	b.n	112e8 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
   11324:	f7fd fc8e 	bl	ec44 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
   11328:	4b1a      	ldr	r3, [pc, #104]	; (11394 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
   1132a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
   1132c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
   1132e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
   11330:	681f      	ldr	r7, [r3, #0]
   11332:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
   11336:	f044 021c 	orr.w	r2, r4, #28
   1133a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
   1133c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
   1133e:	4c14      	ldr	r4, [pc, #80]	; (11390 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
   11340:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
   11344:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
   11348:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
   1134a:	9801      	ldr	r0, [sp, #4]
   1134c:	f7fd fc7e 	bl	ec4c <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
   11350:	201c      	movs	r0, #28
   11352:	f7fd fb2d 	bl	e9b0 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
   11356:	f7ff feab 	bl	110b0 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
   1135a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
   1135c:	490e      	ldr	r1, [pc, #56]	; (11398 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
   1135e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
   11360:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
   11362:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
   11364:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
   11366:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
   11368:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
   1136a:	f7fd fb21 	bl	e9b0 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
   1136e:	9800      	ldr	r0, [sp, #0]
   11370:	f04f 31ff 	mov.w	r1, #4294967295
   11374:	f7fd f9f2 	bl	e75c <am_hal_ctimer_start>
   11378:	e786      	b.n	11288 <am_hal_sysctrl_sleep+0x24>
   1137a:	bf00      	nop
   1137c:	40020250 	.word	0x40020250
   11380:	e000ed10 	.word	0xe000ed10
   11384:	4002000c 	.word	0x4002000c
   11388:	10002610 	.word	0x10002610
   1138c:	40021008 	.word	0x40021008
   11390:	1000260b 	.word	0x1000260b
   11394:	40020068 	.word	0x40020068
   11398:	1000260c 	.word	0x1000260c
   1139c:	40021000 	.word	0x40021000

000113a0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
   113a0:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
   113a2:	4a23      	ldr	r2, [pc, #140]	; (11430 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
   113a4:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
   113a6:	2100      	movs	r1, #0
   113a8:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
   113aa:	b33b      	cbz	r3, 113fc <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
   113ac:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
   113b0:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
   113b2:	4c20      	ldr	r4, [pc, #128]	; (11434 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
   113b4:	4d20      	ldr	r5, [pc, #128]	; (11438 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
   113b6:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
   113ba:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
   113be:	45a6      	cmp	lr, r4
   113c0:	bf94      	ite	ls
   113c2:	461c      	movls	r4, r3
   113c4:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
   113c6:	f7fd f91b 	bl	e600 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
   113ca:	1c43      	adds	r3, r0, #1
   113cc:	d02d      	beq.n	1142a <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
   113ce:	08c2      	lsrs	r2, r0, #3
   113d0:	fbb2 f3f4 	udiv	r3, r2, r4
   113d4:	1e5d      	subs	r5, r3, #1
   113d6:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
   113d8:	4a18      	ldr	r2, [pc, #96]	; (1143c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
   113da:	4c19      	ldr	r4, [pc, #100]	; (11440 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
   113dc:	4b19      	ldr	r3, [pc, #100]	; (11444 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
   113de:	491a      	ldr	r1, [pc, #104]	; (11448 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
   113e0:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
   113e2:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
   113e4:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
   113e6:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
   113ea:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
   113ec:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
   113ee:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   113f0:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
   113f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   113f8:	f7fd bada 	b.w	e9b0 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
   113fc:	4c0f      	ldr	r4, [pc, #60]	; (1143c <am_hal_tpiu_enable+0x9c>)
   113fe:	6905      	ldr	r5, [r0, #16]
   11400:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
   11402:	6882      	ldr	r2, [r0, #8]
   11404:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
   11408:	68c3      	ldr	r3, [r0, #12]
   1140a:	4c10      	ldr	r4, [pc, #64]	; (1144c <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
   1140c:	490d      	ldr	r1, [pc, #52]	; (11444 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
   1140e:	1e5d      	subs	r5, r3, #1
   11410:	2201      	movs	r2, #1
   11412:	40aa      	lsls	r2, r5
   11414:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
   11416:	6840      	ldr	r0, [r0, #4]
   11418:	680b      	ldr	r3, [r1, #0]
   1141a:	4303      	orrs	r3, r0
   1141c:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   1141e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
   11422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   11426:	f7fd bac3 	b.w	e9b0 <am_hal_flash_delay>
   1142a:	2005      	movs	r0, #5
   1142c:	e7d4      	b.n	113d8 <am_hal_tpiu_enable+0x38>
   1142e:	bf00      	nop
   11430:	e0040304 	.word	0xe0040304
   11434:	001da380 	.word	0x001da380
   11438:	000f4240 	.word	0x000f4240
   1143c:	e0040010 	.word	0xe0040010
   11440:	e00400f0 	.word	0xe00400f0
   11444:	40020250 	.word	0x40020250
   11448:	e0040f00 	.word	0xe0040f00
   1144c:	e0040004 	.word	0xe0040004

00011450 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
   11450:	4b01      	ldr	r3, [pc, #4]	; (11458 <am_hal_vcomp_disable+0x8>)
   11452:	2237      	movs	r2, #55	; 0x37
   11454:	601a      	str	r2, [r3, #0]
   11456:	4770      	bx	lr
   11458:	4000c008 	.word	0x4000c008

0001145c <memcmp>:
   1145c:	b510      	push	{r4, lr}
   1145e:	3901      	subs	r1, #1
   11460:	4402      	add	r2, r0
   11462:	4290      	cmp	r0, r2
   11464:	d101      	bne.n	1146a <memcmp+0xe>
   11466:	2000      	movs	r0, #0
   11468:	bd10      	pop	{r4, pc}
   1146a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1146e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11472:	42a3      	cmp	r3, r4
   11474:	d0f5      	beq.n	11462 <memcmp+0x6>
   11476:	1b18      	subs	r0, r3, r4
   11478:	bd10      	pop	{r4, pc}

0001147a <memcpy>:
   1147a:	b510      	push	{r4, lr}
   1147c:	1e43      	subs	r3, r0, #1
   1147e:	440a      	add	r2, r1
   11480:	4291      	cmp	r1, r2
   11482:	d100      	bne.n	11486 <memcpy+0xc>
   11484:	bd10      	pop	{r4, pc}
   11486:	f811 4b01 	ldrb.w	r4, [r1], #1
   1148a:	f803 4f01 	strb.w	r4, [r3, #1]!
   1148e:	e7f7      	b.n	11480 <memcpy+0x6>

00011490 <memmove>:
   11490:	4288      	cmp	r0, r1
   11492:	b510      	push	{r4, lr}
   11494:	eb01 0302 	add.w	r3, r1, r2
   11498:	d803      	bhi.n	114a2 <memmove+0x12>
   1149a:	1e42      	subs	r2, r0, #1
   1149c:	4299      	cmp	r1, r3
   1149e:	d10c      	bne.n	114ba <memmove+0x2a>
   114a0:	bd10      	pop	{r4, pc}
   114a2:	4298      	cmp	r0, r3
   114a4:	d2f9      	bcs.n	1149a <memmove+0xa>
   114a6:	1881      	adds	r1, r0, r2
   114a8:	1ad2      	subs	r2, r2, r3
   114aa:	42d3      	cmn	r3, r2
   114ac:	d100      	bne.n	114b0 <memmove+0x20>
   114ae:	bd10      	pop	{r4, pc}
   114b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   114b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
   114b8:	e7f7      	b.n	114aa <memmove+0x1a>
   114ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   114be:	f802 4f01 	strb.w	r4, [r2, #1]!
   114c2:	e7eb      	b.n	1149c <memmove+0xc>

000114c4 <memset>:
   114c4:	4402      	add	r2, r0
   114c6:	4603      	mov	r3, r0
   114c8:	4293      	cmp	r3, r2
   114ca:	d100      	bne.n	114ce <memset+0xa>
   114cc:	4770      	bx	lr
   114ce:	f803 1b01 	strb.w	r1, [r3], #1
   114d2:	e7f9      	b.n	114c8 <memset+0x4>
   114d4:	43696368 	.word	0x43696368
   114d8:	6954646d 	.word	0x6954646d
   114dc:	756f656d 	.word	0x756f656d
   114e0:	00000074 	.word	0x00000074
   114e4:	20494348 	.word	0x20494348
   114e8:	6e6e6f63 	.word	0x6e6e6f63
   114ec:	72747320 	.word	0x72747320
   114f0:	20746375 	.word	0x20746375
   114f4:	6f6c6c61 	.word	0x6f6c6c61
   114f8:	61662063 	.word	0x61662063
   114fc:	72756c69 	.word	0x72756c69
   11500:	00000065 	.word	0x00000065
   11504:	43696368 	.word	0x43696368
   11508:	4365726f 	.word	0x4365726f
   1150c:	466e6e6f 	.word	0x466e6e6f
   11510:	20656572 	.word	0x20656572
   11514:	646e6168 	.word	0x646e6168
   11518:	6e20656c 	.word	0x6e20656c
   1151c:	6620746f 	.word	0x6620746f
   11520:	646e756f 	.word	0x646e756f
   11524:	0075253a 	.word	0x0075253a
   11528:	43696368 	.word	0x43696368
   1152c:	5365726f 	.word	0x5365726f
   11530:	41646e65 	.word	0x41646e65
   11534:	61446c63 	.word	0x61446c63
   11538:	61206174 	.word	0x61206174
   1153c:	6c696176 	.word	0x6c696176
   11540:	73667542 	.word	0x73667542
   11544:	0000303d 	.word	0x0000303d
   11548:	43696368 	.word	0x43696368
   1154c:	5465726f 	.word	0x5465726f
   11550:	61655278 	.word	0x61655278
   11554:	64207964 	.word	0x64207964
   11558:	61637369 	.word	0x61637369
   1155c:	6e696472 	.word	0x6e696472
   11560:	75622067 	.word	0x75622067
   11564:	72656666 	.word	0x72656666
   11568:	6168202c 	.word	0x6168202c
   1156c:	656c646e 	.word	0x656c646e
   11570:	0075253d 	.word	0x0075253d
   11574:	43696368 	.word	0x43696368
   11578:	5465726f 	.word	0x5465726f
   1157c:	6c634178 	.word	0x6c634178
   11580:	72617453 	.word	0x72617453
   11584:	656c2074 	.word	0x656c2074
   11588:	75253d6e 	.word	0x75253d6e
   1158c:	00000000 	.word	0x00000000
   11590:	43696368 	.word	0x43696368
   11594:	5465726f 	.word	0x5465726f
   11598:	6c634178 	.word	0x6c634178
   1159c:	746e6f43 	.word	0x746e6f43
   115a0:	65756e69 	.word	0x65756e69
   115a4:	6c636120 	.word	0x6c636120
   115a8:	3d6e654c 	.word	0x3d6e654c
   115ac:	72207525 	.word	0x72207525
   115b0:	654c6d65 	.word	0x654c6d65
   115b4:	75253d6e 	.word	0x75253d6e
   115b8:	00000000 	.word	0x00000000
   115bc:	43696368 	.word	0x43696368
   115c0:	5465726f 	.word	0x5465726f
   115c4:	6c634178 	.word	0x6c634178
   115c8:	706d6f43 	.word	0x706d6f43
   115cc:	6574656c 	.word	0x6574656c
   115d0:	65726620 	.word	0x65726620
   115d4:	54702065 	.word	0x54702065
   115d8:	6c634178 	.word	0x6c634178
   115dc:	00746b50 	.word	0x00746b50
   115e0:	61736964 	.word	0x61736964
   115e4:	64656472 	.word	0x64656472
   115e8:	69636820 	.word	0x69636820
   115ec:	20787220 	.word	0x20787220
   115f0:	20746b70 	.word	0x20746b70
   115f4:	646e6168 	.word	0x646e6168
   115f8:	303d656c 	.word	0x303d656c
   115fc:	34302578 	.word	0x34302578
   11600:	00000078 	.word	0x00000078
   11604:	2063326c 	.word	0x2063326c
   11608:	3d6e656c 	.word	0x3d6e656c
   1160c:	30257830 	.word	0x30257830
   11610:	74207834 	.word	0x74207834
   11614:	616c206f 	.word	0x616c206f
   11618:	20656772 	.word	0x20656772
   1161c:	20726f66 	.word	0x20726f66
   11620:	73616572 	.word	0x73616572
   11624:	626d6573 	.word	0x626d6573
   11628:	0000796c 	.word	0x0000796c
   1162c:	73616572 	.word	0x73616572
   11630:	626d6573 	.word	0x626d6573
   11634:	6120796c 	.word	0x6120796c
   11638:	636f6c6c 	.word	0x636f6c6c
   1163c:	69616620 	.word	0x69616620
   11640:	2064656c 	.word	0x2064656c
   11644:	3d6e656c 	.word	0x3d6e656c
   11648:	00007525 	.word	0x00007525
   1164c:	61766e69 	.word	0x61766e69
   11650:	2064696c 	.word	0x2064696c
   11654:	2063326c 	.word	0x2063326c
   11658:	20746b70 	.word	0x20746b70
   1165c:	4c6c6361 	.word	0x4c6c6361
   11660:	253d6e65 	.word	0x253d6e65
   11664:	00000075 	.word	0x00000075
   11668:	746e6f63 	.word	0x746e6f63
   1166c:	61756e69 	.word	0x61756e69
   11670:	6e6f6974 	.word	0x6e6f6974
   11674:	746b7020 	.word	0x746b7020
   11678:	6f6f7420 	.word	0x6f6f7420
   1167c:	6e6f6c20 	.word	0x6e6f6c20
   11680:	656c2067 	.word	0x656c2067
   11684:	75253d6e 	.word	0x75253d6e
   11688:	6d655220 	.word	0x6d655220
   1168c:	3d6e654c 	.word	0x3d6e654c
   11690:	00007525 	.word	0x00007525
   11694:	78656e75 	.word	0x78656e75
   11698:	74636570 	.word	0x74636570
   1169c:	63206465 	.word	0x63206465
   116a0:	69746e6f 	.word	0x69746e6f
   116a4:	7461756e 	.word	0x7461756e
   116a8:	206e6f69 	.word	0x206e6f69
   116ac:	20746b70 	.word	0x20746b70
   116b0:	646e6168 	.word	0x646e6168
   116b4:	303d656c 	.word	0x303d656c
   116b8:	34302578 	.word	0x34302578
   116bc:	00000078 	.word	0x00000078
   116c0:	6e6b6e75 	.word	0x6e6b6e75
   116c4:	206e776f 	.word	0x206e776f
   116c8:	66206270 	.word	0x66206270
   116cc:	7367616c 	.word	0x7367616c
   116d0:	2578303d 	.word	0x2578303d
   116d4:	00783430 	.word	0x00783430
   116d8:	20746b70 	.word	0x20746b70
   116dc:	64766372 	.word	0x64766372
   116e0:	206e6f20 	.word	0x206e6f20
   116e4:	6e6b6e75 	.word	0x6e6b6e75
   116e8:	206e776f 	.word	0x206e776f
   116ec:	646e6168 	.word	0x646e6168
   116f0:	303d656c 	.word	0x303d656c
   116f4:	34302578 	.word	0x34302578
   116f8:	00000078 	.word	0x00000078
   116fc:	53696348 	.word	0x53696348
   11700:	41646e65 	.word	0x41646e65
   11704:	61446c63 	.word	0x61446c63
   11708:	64206174 	.word	0x64206174
   1170c:	61637369 	.word	0x61637369
   11710:	6e696472 	.word	0x6e696472
   11714:	75622067 	.word	0x75622067
   11718:	72656666 	.word	0x72656666
   1171c:	6168202c 	.word	0x6168202c
   11720:	656c646e 	.word	0x656c646e
   11724:	0075253d 	.word	0x0075253d
   11728:	20494348 	.word	0x20494348
   1172c:	20766441 	.word	0x20766441
   11730:	6f706572 	.word	0x6f706572
   11734:	202c7472 	.word	0x202c7472
   11738:	206d756e 	.word	0x206d756e
   1173c:	6f706572 	.word	0x6f706572
   11740:	3a737472 	.word	0x3a737472
   11744:	00642520 	.word	0x00642520
   11748:	20494348 	.word	0x20494348
   1174c:	20766441 	.word	0x20766441
   11750:	6f706572 	.word	0x6f706572
   11754:	202c7472 	.word	0x202c7472
   11758:	61746164 	.word	0x61746164
   1175c:	6e656c20 	.word	0x6e656c20
   11760:	6425203a 	.word	0x6425203a
   11764:	00000000 	.word	0x00000000
   11768:	61766e49 	.word	0x61766e49
   1176c:	2064696c 	.word	0x2064696c
   11770:	20766461 	.word	0x20766461
   11774:	6f706572 	.word	0x6f706572
   11778:	64207472 	.word	0x64207472
   1177c:	20617461 	.word	0x20617461
   11780:	006e656c 	.word	0x006e656c
   11784:	20494348 	.word	0x20494348
   11788:	20747845 	.word	0x20747845
   1178c:	20766441 	.word	0x20766441
   11790:	6f706572 	.word	0x6f706572
   11794:	202c7472 	.word	0x202c7472
   11798:	206d756e 	.word	0x206d756e
   1179c:	6f706572 	.word	0x6f706572
   117a0:	3a737472 	.word	0x3a737472
   117a4:	00642520 	.word	0x00642520
   117a8:	20494348 	.word	0x20494348
   117ac:	20747845 	.word	0x20747845
   117b0:	20766441 	.word	0x20766441
   117b4:	6f706572 	.word	0x6f706572
   117b8:	202c7472 	.word	0x202c7472
   117bc:	61746164 	.word	0x61746164
   117c0:	6e656c20 	.word	0x6e656c20
   117c4:	6425203a 	.word	0x6425203a
   117c8:	00000000 	.word	0x00000000
   117cc:	61766e49 	.word	0x61766e49
   117d0:	2064696c 	.word	0x2064696c
   117d4:	20747865 	.word	0x20747865
   117d8:	20766461 	.word	0x20766461
   117dc:	6f706572 	.word	0x6f706572
   117e0:	64207472 	.word	0x64207472
   117e4:	20617461 	.word	0x20617461
   117e8:	006e656c 	.word	0x006e656c
   117ec:	20494348 	.word	0x20494348
   117f0:	20726550 	.word	0x20726550
   117f4:	20766441 	.word	0x20766441
   117f8:	6f706572 	.word	0x6f706572
   117fc:	00007472 	.word	0x00007472
   11800:	61766e49 	.word	0x61766e49
   11804:	2064696c 	.word	0x2064696c
   11808:	20726570 	.word	0x20726570
   1180c:	20766461 	.word	0x20766461
   11810:	6f706572 	.word	0x6f706572
   11814:	64207472 	.word	0x64207472
   11818:	20617461 	.word	0x20617461
   1181c:	3a6e656c 	.word	0x3a6e656c
   11820:	00642520 	.word	0x00642520
   11824:	20494348 	.word	0x20494348
   11828:	20726550 	.word	0x20726550
   1182c:	20766441 	.word	0x20766441
   11830:	6f706572 	.word	0x6f706572
   11834:	202c7472 	.word	0x202c7472
   11838:	61746164 	.word	0x61746164
   1183c:	6e656c20 	.word	0x6e656c20
   11840:	6425203a 	.word	0x6425203a
   11844:	00000000 	.word	0x00000000
   11848:	58323025 	.word	0x58323025
   1184c:	00000020 	.word	0x00000020
   11850:	0000000a 	.word	0x0000000a
   11854:	00000a0a 	.word	0x00000a0a
   11858:	2e5c2e2e 	.word	0x2e5c2e2e
   1185c:	2e2e5c2e 	.word	0x2e2e5c2e
   11860:	5c2e2e5c 	.word	0x5c2e2e5c
   11864:	2e5c2e2e 	.word	0x2e5c2e2e
   11868:	68745c2e 	.word	0x68745c2e
   1186c:	5f647269 	.word	0x5f647269
   11870:	74726170 	.word	0x74726170
   11874:	78655c79 	.word	0x78655c79
   11878:	6c746361 	.word	0x6c746361
   1187c:	73775c65 	.word	0x73775c65
   11880:	726f632d 	.word	0x726f632d
   11884:	77735c65 	.word	0x77735c65
   11888:	6673775c 	.word	0x6673775c
   1188c:	626d615c 	.word	0x626d615c
   11890:	775c7169 	.word	0x775c7169
   11894:	745f6673 	.word	0x745f6673
   11898:	65636172 	.word	0x65636172
   1189c:	0000632e 	.word	0x0000632e
   118a0:	20707041 	.word	0x20707041
   118a4:	20746f67 	.word	0x20746f67
   118a8:	20747665 	.word	0x20747665
   118ac:	00006425 	.word	0x00006425
   118b0:	20465357 	.word	0x20465357
   118b4:	20636573 	.word	0x20636573
   118b8:	20746f6e 	.word	0x20746f6e
   118bc:	69676572 	.word	0x69676572
   118c0:	72657473 	.word	0x72657473
   118c4:	00006465 	.word	0x00006465
   118c8:	20465357 	.word	0x20465357
   118cc:	20636573 	.word	0x20636573
   118d0:	75657571 	.word	0x75657571
   118d4:	6d652065 	.word	0x6d652065
   118d8:	21797470 	.word	0x21797470
   118dc:	00000000 	.word	0x00000000
   118e0:	42667357 	.word	0x42667357
   118e4:	6c416675 	.word	0x6c416675
   118e8:	20636f6c 	.word	0x20636f6c
   118ec:	6c696166 	.word	0x6c696166
   118f0:	6c206465 	.word	0x6c206465
   118f4:	253a6e65 	.word	0x253a6e65
   118f8:	00000075 	.word	0x00000075
   118fc:	20494348 	.word	0x20494348
   11900:	46205854 	.word	0x46205854
   11904:	656c6961 	.word	0x656c6961
   11908:	6f742064 	.word	0x6f742064
   1190c:	61747320 	.word	0x61747320
   11910:	0a737472 	.word	0x0a737472
   11914:	00000000 	.word	0x00000000
   11918:	202c6425 	.word	0x202c6425
   1191c:	000a6425 	.word	0x000a6425
   11920:	20494348 	.word	0x20494348
   11924:	45205854 	.word	0x45205854
   11928:	726f7272 	.word	0x726f7272
   1192c:	54532820 	.word	0x54532820
   11930:	53555441 	.word	0x53555441
   11934:	52524520 	.word	0x52524520
   11938:	2029524f 	.word	0x2029524f
   1193c:	6b636150 	.word	0x6b636150
   11940:	54207465 	.word	0x54207465
   11944:	4c206f6f 	.word	0x4c206f6f
   11948:	65677261 	.word	0x65677261
   1194c:	0000000a 	.word	0x0000000a
   11950:	20494348 	.word	0x20494348
   11954:	69205854 	.word	0x69205854
   11958:	7270206e 	.word	0x7270206e
   1195c:	6572676f 	.word	0x6572676f
   11960:	000a7373 	.word	0x000a7373
   11964:	20494348 	.word	0x20494348
   11968:	45205852 	.word	0x45205852
   1196c:	726f7272 	.word	0x726f7272
   11970:	54532820 	.word	0x54532820
   11974:	53555441 	.word	0x53555441
   11978:	52524520 	.word	0x52524520
   1197c:	2029524f 	.word	0x2029524f
   11980:	33394d45 	.word	0x33394d45
   11984:	4e203430 	.word	0x4e203430
   11988:	5220746f 	.word	0x5220746f
   1198c:	79646165 	.word	0x79646165
   11990:	0000000a 	.word	0x0000000a
   11994:	20494348 	.word	0x20494348
   11998:	45205852 	.word	0x45205852
   1199c:	726f7272 	.word	0x726f7272
   119a0:	54532820 	.word	0x54532820
   119a4:	53555441 	.word	0x53555441
   119a8:	52524520 	.word	0x52524520
   119ac:	2029524f 	.word	0x2029524f
   119b0:	6b636150 	.word	0x6b636150
   119b4:	54207465 	.word	0x54207465
   119b8:	4c206f6f 	.word	0x4c206f6f
   119bc:	65677261 	.word	0x65677261
   119c0:	0000000a 	.word	0x0000000a
   119c4:	696c6156 	.word	0x696c6156
   119c8:	6d652064 	.word	0x6d652064
   119cc:	34303339 	.word	0x34303339
   119d0:	7461705f 	.word	0x7461705f
   119d4:	73656863 	.word	0x73656863
   119d8:	6620632e 	.word	0x6620632e
   119dc:	20656c69 	.word	0x20656c69
   119e0:	6e756f66 	.word	0x6e756f66
   119e4:	00000a64 	.word	0x00000a64
   119e8:	61766e49 	.word	0x61766e49
   119ec:	6164696c 	.word	0x6164696c
   119f0:	676e6974 	.word	0x676e6974
   119f4:	74617020 	.word	0x74617020
   119f8:	61206863 	.word	0x61206863
   119fc:	78252074 	.word	0x78252074
   11a00:	0000000a 	.word	0x0000000a
   11a04:	000cfc22 	.word	0x000cfc22
   11a08:	33000000 	.word	0x33000000
   11a0c:	00656d39 	.word	0x00656d39
   11a10:	00000000 	.word	0x00000000
   11a14:	52206f4e 	.word	0x52206f4e
   11a18:	6f707365 	.word	0x6f707365
   11a1c:	2065736e 	.word	0x2065736e
   11a20:	45206f74 	.word	0x45206f74
   11a24:	3033394d 	.word	0x3033394d
   11a28:	6c532034 	.word	0x6c532034
   11a2c:	20706565 	.word	0x20706565
   11a30:	61736944 	.word	0x61736944
   11a34:	0a656c62 	.word	0x0a656c62
   11a38:	00000000 	.word	0x00000000
   11a3c:	61766e49 	.word	0x61766e49
   11a40:	2064696c 	.word	0x2064696c
   11a44:	70736552 	.word	0x70736552
   11a48:	65736e6f 	.word	0x65736e6f
   11a4c:	206f7420 	.word	0x206f7420
   11a50:	33394d45 	.word	0x33394d45
   11a54:	53203430 	.word	0x53203430
   11a58:	7065656c 	.word	0x7065656c
   11a5c:	73694420 	.word	0x73694420
   11a60:	656c6261 	.word	0x656c6261
   11a64:	0000000a 	.word	0x0000000a
   11a68:	52206f4e 	.word	0x52206f4e
   11a6c:	6f707365 	.word	0x6f707365
   11a70:	2065736e 	.word	0x2065736e
   11a74:	45206f74 	.word	0x45206f74
   11a78:	3033394d 	.word	0x3033394d
   11a7c:	544f2034 	.word	0x544f2034
   11a80:	6e452050 	.word	0x6e452050
   11a84:	656c6261 	.word	0x656c6261
   11a88:	0000000a 	.word	0x0000000a
   11a8c:	61766e49 	.word	0x61766e49
   11a90:	2064696c 	.word	0x2064696c
   11a94:	70736552 	.word	0x70736552
   11a98:	65736e6f 	.word	0x65736e6f
   11a9c:	206f7420 	.word	0x206f7420
   11aa0:	33394d45 	.word	0x33394d45
   11aa4:	4f203430 	.word	0x4f203430
   11aa8:	45205054 	.word	0x45205054
   11aac:	6c62616e 	.word	0x6c62616e
   11ab0:	00000a65 	.word	0x00000a65
   11ab4:	52206f4e 	.word	0x52206f4e
   11ab8:	6f707365 	.word	0x6f707365
   11abc:	2065736e 	.word	0x2065736e
   11ac0:	45206f74 	.word	0x45206f74
   11ac4:	3033394d 	.word	0x3033394d
   11ac8:	61502034 	.word	0x61502034
   11acc:	20686374 	.word	0x20686374
   11ad0:	72657551 	.word	0x72657551
   11ad4:	00000a79 	.word	0x00000a79
   11ad8:	61766e49 	.word	0x61766e49
   11adc:	2064696c 	.word	0x2064696c
   11ae0:	70736552 	.word	0x70736552
   11ae4:	65736e6f 	.word	0x65736e6f
   11ae8:	206f7420 	.word	0x206f7420
   11aec:	33394d45 	.word	0x33394d45
   11af0:	50203430 	.word	0x50203430
   11af4:	68637461 	.word	0x68637461
   11af8:	65755120 	.word	0x65755120
   11afc:	000a7972 	.word	0x000a7972
   11b00:	626d754e 	.word	0x626d754e
   11b04:	6f207265 	.word	0x6f207265
   11b08:	61702066 	.word	0x61702066
   11b0c:	20686374 	.word	0x20686374
   11b10:	746e6f63 	.word	0x746e6f63
   11b14:	656e6961 	.word	0x656e6961
   11b18:	6f207372 	.word	0x6f207372
   11b1c:	4d45206e 	.word	0x4d45206e
   11b20:	34303339 	.word	0x34303339
   11b24:	63786520 	.word	0x63786520
   11b28:	6964756c 	.word	0x6964756c
   11b2c:	5020676e 	.word	0x5020676e
   11b30:	68637461 	.word	0x68637461
   11b34:	203a3023 	.word	0x203a3023
   11b38:	000a6425 	.word	0x000a6425
   11b3c:	63746150 	.word	0x63746150
   11b40:	25232068 	.word	0x25232068
   11b44:	43203a64 	.word	0x43203a64
   11b48:	61746e6f 	.word	0x61746e6f
   11b4c:	72656e69 	.word	0x72656e69
   11b50:	64644120 	.word	0x64644120
   11b54:	73736572 	.word	0x73736572
   11b58:	25203d20 	.word	0x25203d20
   11b5c:	58382e38 	.word	0x58382e38
   11b60:	6e6f4320 	.word	0x6e6f4320
   11b64:	6e696174 	.word	0x6e696174
   11b68:	53207265 	.word	0x53207265
   11b6c:	20657a69 	.word	0x20657a69
   11b70:	3425203d 	.word	0x3425203d
   11b74:	2064342e 	.word	0x2064342e
   11b78:	746e6f43 	.word	0x746e6f43
   11b7c:	656e6961 	.word	0x656e6961
   11b80:	79542072 	.word	0x79542072
   11b84:	253d6570 	.word	0x253d6570
   11b88:	6f432064 	.word	0x6f432064
   11b8c:	6961746e 	.word	0x6961746e
   11b90:	2072656e 	.word	0x2072656e
   11b94:	253d4449 	.word	0x253d4449
   11b98:	6f432064 	.word	0x6f432064
   11b9c:	6961746e 	.word	0x6961746e
   11ba0:	2072656e 	.word	0x2072656e
   11ba4:	73726556 	.word	0x73726556
   11ba8:	3d6e6f69 	.word	0x3d6e6f69
   11bac:	42206425 	.word	0x42206425
   11bb0:	646c6975 	.word	0x646c6975
   11bb4:	6d754e20 	.word	0x6d754e20
   11bb8:	3d726562 	.word	0x3d726562
   11bbc:	55206425 	.word	0x55206425
   11bc0:	20726573 	.word	0x20726573
   11bc4:	6c697542 	.word	0x6c697542
   11bc8:	754e2064 	.word	0x754e2064
   11bcc:	7265626d 	.word	0x7265626d
   11bd0:	0a64253d 	.word	0x0a64253d
   11bd4:	00000000 	.word	0x00000000
   11bd8:	52206f4e 	.word	0x52206f4e
   11bdc:	6f707365 	.word	0x6f707365
   11be0:	2065736e 	.word	0x2065736e
   11be4:	45206f74 	.word	0x45206f74
   11be8:	3033394d 	.word	0x3033394d
   11bec:	544f2034 	.word	0x544f2034
   11bf0:	69442050 	.word	0x69442050
   11bf4:	6c626173 	.word	0x6c626173
   11bf8:	00000a65 	.word	0x00000a65
   11bfc:	61766e49 	.word	0x61766e49
   11c00:	2064696c 	.word	0x2064696c
   11c04:	70736552 	.word	0x70736552
   11c08:	65736e6f 	.word	0x65736e6f
   11c0c:	206f7420 	.word	0x206f7420
   11c10:	33394d45 	.word	0x33394d45
   11c14:	4f203430 	.word	0x4f203430
   11c18:	44205054 	.word	0x44205054
   11c1c:	62617369 	.word	0x62617369
   11c20:	000a656c 	.word	0x000a656c
   11c24:	52206f4e 	.word	0x52206f4e
   11c28:	6f707365 	.word	0x6f707365
   11c2c:	2065736e 	.word	0x2065736e
   11c30:	45206f74 	.word	0x45206f74
   11c34:	3033394d 	.word	0x3033394d
   11c38:	6c532034 	.word	0x6c532034
   11c3c:	20706565 	.word	0x20706565
   11c40:	62616e45 	.word	0x62616e45
   11c44:	000a656c 	.word	0x000a656c
   11c48:	61766e49 	.word	0x61766e49
   11c4c:	2064696c 	.word	0x2064696c
   11c50:	70736552 	.word	0x70736552
   11c54:	65736e6f 	.word	0x65736e6f
   11c58:	206f7420 	.word	0x206f7420
   11c5c:	33394d45 	.word	0x33394d45
   11c60:	53203430 	.word	0x53203430
   11c64:	7065656c 	.word	0x7065656c
   11c68:	616e4520 	.word	0x616e4520
   11c6c:	0a656c62 	.word	0x0a656c62
   11c70:	00000000 	.word	0x00000000
   11c74:	52206f4e 	.word	0x52206f4e
   11c78:	6f707365 	.word	0x6f707365
   11c7c:	2065736e 	.word	0x2065736e
   11c80:	45206f74 	.word	0x45206f74
   11c84:	3033394d 	.word	0x3033394d
   11c88:	52492034 	.word	0x52492034
   11c8c:	45204d41 	.word	0x45204d41
   11c90:	6c62616e 	.word	0x6c62616e
   11c94:	00000a65 	.word	0x00000a65
   11c98:	61766e49 	.word	0x61766e49
   11c9c:	2064696c 	.word	0x2064696c
   11ca0:	70736552 	.word	0x70736552
   11ca4:	65736e6f 	.word	0x65736e6f
   11ca8:	206f7420 	.word	0x206f7420
   11cac:	33394d45 	.word	0x33394d45
   11cb0:	49203430 	.word	0x49203430
   11cb4:	204d4152 	.word	0x204d4152
   11cb8:	62616e45 	.word	0x62616e45
   11cbc:	000a656c 	.word	0x000a656c
   11cc0:	6c707041 	.word	0x6c707041
   11cc4:	676e6979 	.word	0x676e6979
   11cc8:	74615020 	.word	0x74615020
   11ccc:	23206863 	.word	0x23206863
   11cd0:	203a6425 	.word	0x203a6425
   11cd4:	746e6f43 	.word	0x746e6f43
   11cd8:	656e6961 	.word	0x656e6961
   11cdc:	79542072 	.word	0x79542072
   11ce0:	253d6570 	.word	0x253d6570
   11ce4:	6f432064 	.word	0x6f432064
   11ce8:	6961746e 	.word	0x6961746e
   11cec:	2072656e 	.word	0x2072656e
   11cf0:	253d4449 	.word	0x253d4449
   11cf4:	6f432064 	.word	0x6f432064
   11cf8:	6961746e 	.word	0x6961746e
   11cfc:	2072656e 	.word	0x2072656e
   11d00:	73726556 	.word	0x73726556
   11d04:	3d6e6f69 	.word	0x3d6e6f69
   11d08:	42206425 	.word	0x42206425
   11d0c:	646c6975 	.word	0x646c6975
   11d10:	6d754e20 	.word	0x6d754e20
   11d14:	3d726562 	.word	0x3d726562
   11d18:	55206425 	.word	0x55206425
   11d1c:	20726573 	.word	0x20726573
   11d20:	6c697542 	.word	0x6c697542
   11d24:	754e2064 	.word	0x754e2064
   11d28:	7265626d 	.word	0x7265626d
   11d2c:	0a64253d 	.word	0x0a64253d
   11d30:	00000000 	.word	0x00000000
   11d34:	52206f4e 	.word	0x52206f4e
   11d38:	6f707365 	.word	0x6f707365
   11d3c:	2065736e 	.word	0x2065736e
   11d40:	45206f74 	.word	0x45206f74
   11d44:	3033394d 	.word	0x3033394d
   11d48:	61502034 	.word	0x61502034
   11d4c:	20686374 	.word	0x20686374
   11d50:	74697257 	.word	0x74697257
   11d54:	00000a65 	.word	0x00000a65
   11d58:	6f727245 	.word	0x6f727245
   11d5c:	65522072 	.word	0x65522072
   11d60:	6e6f7073 	.word	0x6e6f7073
   11d64:	74206573 	.word	0x74206573
   11d68:	4d45206f 	.word	0x4d45206f
   11d6c:	34303339 	.word	0x34303339
   11d70:	74615020 	.word	0x74615020
   11d74:	57206863 	.word	0x57206863
   11d78:	65746972 	.word	0x65746972
   11d7c:	0000000a 	.word	0x0000000a
   11d80:	6f727245 	.word	0x6f727245
   11d84:	65522072 	.word	0x65522072
   11d88:	6e6f7073 	.word	0x6e6f7073
   11d8c:	74206573 	.word	0x74206573
   11d90:	4d45206f 	.word	0x4d45206f
   11d94:	34303339 	.word	0x34303339
   11d98:	74615020 	.word	0x74615020
   11d9c:	43206863 	.word	0x43206863
   11da0:	69746e6f 	.word	0x69746e6f
   11da4:	2065756e 	.word	0x2065756e
   11da8:	78656e28 	.word	0x78656e28
   11dac:	6f742074 	.word	0x6f742074
   11db0:	73616c20 	.word	0x73616c20
   11db4:	61702074 	.word	0x61702074
   11db8:	20686374 	.word	0x20686374
   11dbc:	6d676573 	.word	0x6d676573
   11dc0:	29746e65 	.word	0x29746e65
   11dc4:	0000000a 	.word	0x0000000a
   11dc8:	6f727245 	.word	0x6f727245
   11dcc:	65522072 	.word	0x65522072
   11dd0:	6e6f7073 	.word	0x6e6f7073
   11dd4:	74206573 	.word	0x74206573
   11dd8:	4d45206f 	.word	0x4d45206f
   11ddc:	34303339 	.word	0x34303339
   11de0:	74615020 	.word	0x74615020
   11de4:	43206863 	.word	0x43206863
   11de8:	69746e6f 	.word	0x69746e6f
   11dec:	2065756e 	.word	0x2065756e
   11df0:	73616c28 	.word	0x73616c28
   11df4:	61702074 	.word	0x61702074
   11df8:	20686374 	.word	0x20686374
   11dfc:	6d676573 	.word	0x6d676573
   11e00:	29746e65 	.word	0x29746e65
   11e04:	0000000a 	.word	0x0000000a
   11e08:	33394d45 	.word	0x33394d45
   11e0c:	50203430 	.word	0x50203430
   11e10:	68637461 	.word	0x68637461
   11e14:	70704120 	.word	0x70704120
   11e18:	6163696c 	.word	0x6163696c
   11e1c:	6e6f6974 	.word	0x6e6f6974
   11e20:	69614620 	.word	0x69614620
   11e24:	0a64656c 	.word	0x0a64656c
   11e28:	00000000 	.word	0x00000000
   11e2c:	33394d45 	.word	0x33394d45
   11e30:	50203430 	.word	0x50203430
   11e34:	68637461 	.word	0x68637461
   11e38:	20676e69 	.word	0x20676e69
   11e3c:	72657551 	.word	0x72657551
   11e40:	61462079 	.word	0x61462079
   11e44:	64656c69 	.word	0x64656c69
   11e48:	5020202e 	.word	0x5020202e
   11e4c:	68637461 	.word	0x68637461
   11e50:	64707520 	.word	0x64707520
   11e54:	20657461 	.word	0x20657461
   11e58:	20746f6e 	.word	0x20746f6e
   11e5c:	6c707061 	.word	0x6c707061
   11e60:	0a646569 	.word	0x0a646569
   11e64:	00000000 	.word	0x00000000
   11e68:	33394d45 	.word	0x33394d45
   11e6c:	43203430 	.word	0x43203430
   11e70:	52205550 	.word	0x52205550
   11e74:	74657365 	.word	0x74657365
   11e78:	63755320 	.word	0x63755320
   11e7c:	73736563 	.word	0x73736563
   11e80:	6c6c7566 	.word	0x6c6c7566
   11e84:	00000a79 	.word	0x00000a79
   11e88:	65636552 	.word	0x65636552
   11e8c:	64657669 	.word	0x64657669
   11e90:	5f4d4520 	.word	0x5f4d4520
   11e94:	69746341 	.word	0x69746341
   11e98:	74536576 	.word	0x74536576
   11e9c:	45657461 	.word	0x45657461
   11ea0:	7265746e 	.word	0x7265746e
   11ea4:	45206465 	.word	0x45206465
   11ea8:	746e6576 	.word	0x746e6576
   11eac:	0000000a 	.word	0x0000000a
   11eb0:	65636552 	.word	0x65636552
   11eb4:	64657669 	.word	0x64657669
   11eb8:	5f4d4520 	.word	0x5f4d4520
   11ebc:	74736554 	.word	0x74736554
   11ec0:	65646f4d 	.word	0x65646f4d
   11ec4:	65746e45 	.word	0x65746e45
   11ec8:	20646572 	.word	0x20646572
   11ecc:	6e657645 	.word	0x6e657645
   11ed0:	00000a74 	.word	0x00000a74
   11ed4:	65636552 	.word	0x65636552
   11ed8:	64657669 	.word	0x64657669
   11edc:	5f4d4520 	.word	0x5f4d4520
   11ee0:	4e6c6148 	.word	0x4e6c6148
   11ee4:	6669746f 	.word	0x6669746f
   11ee8:	74616369 	.word	0x74616369
   11eec:	206e6f69 	.word	0x206e6f69
   11ef0:	6e657645 	.word	0x6e657645
   11ef4:	00000a74 	.word	0x00000a74
   11ef8:	65636552 	.word	0x65636552
   11efc:	64657669 	.word	0x64657669
   11f00:	6b6e5520 	.word	0x6b6e5520
   11f04:	6e776f6e 	.word	0x6e776f6e
   11f08:	6e655620 	.word	0x6e655620
   11f0c:	20726f64 	.word	0x20726f64
   11f10:	63657053 	.word	0x63657053
   11f14:	63696669 	.word	0x63696669
   11f18:	65764520 	.word	0x65764520
   11f1c:	6620746e 	.word	0x6620746e
   11f20:	206d6f72 	.word	0x206d6f72
   11f24:	33394d45 	.word	0x33394d45
   11f28:	000a3430 	.word	0x000a3430
   11f2c:	44696348 	.word	0x44696348
   11f30:	61527672 	.word	0x61527672
   11f34:	426f6964 	.word	0x426f6964
   11f38:	20746f6f 	.word	0x20746f6f
   11f3c:	706d6f63 	.word	0x706d6f63
   11f40:	6574656c 	.word	0x6574656c
   11f44:	0000000a 	.word	0x0000000a
   11f48:	20746f47 	.word	0x20746f47
   11f4c:	74747542 	.word	0x74747542
   11f50:	30206e6f 	.word	0x30206e6f
   11f54:	65725020 	.word	0x65725020
   11f58:	000a7373 	.word	0x000a7373
   11f5c:	746e6f43 	.word	0x746e6f43
   11f60:	6f756e69 	.word	0x6f756e69
   11f64:	57207375 	.word	0x57207375
   11f68:	20657661 	.word	0x20657661
   11f6c:	43206e6f 	.word	0x43206e6f
   11f70:	6e6e6168 	.word	0x6e6e6168
   11f74:	32206c65 	.word	0x32206c65
   11f78:	20323034 	.word	0x20323034
   11f7c:	0a7a484d 	.word	0x0a7a484d
   11f80:	00000000 	.word	0x00000000
   11f84:	746e6f43 	.word	0x746e6f43
   11f88:	6f756e69 	.word	0x6f756e69
   11f8c:	57207375 	.word	0x57207375
   11f90:	20657661 	.word	0x20657661
   11f94:	43206e6f 	.word	0x43206e6f
   11f98:	6e6e6168 	.word	0x6e6e6168
   11f9c:	32206c65 	.word	0x32206c65
   11fa0:	20303434 	.word	0x20303434
   11fa4:	0a7a484d 	.word	0x0a7a484d
   11fa8:	00000000 	.word	0x00000000
   11fac:	746e6f43 	.word	0x746e6f43
   11fb0:	6f756e69 	.word	0x6f756e69
   11fb4:	57207375 	.word	0x57207375
   11fb8:	20657661 	.word	0x20657661
   11fbc:	43206e6f 	.word	0x43206e6f
   11fc0:	6e6e6168 	.word	0x6e6e6168
   11fc4:	32206c65 	.word	0x32206c65
   11fc8:	20303834 	.word	0x20303834
   11fcc:	0a7a484d 	.word	0x0a7a484d
   11fd0:	00000000 	.word	0x00000000
   11fd4:	746e6f43 	.word	0x746e6f43
   11fd8:	6f756e69 	.word	0x6f756e69
   11fdc:	4d207375 	.word	0x4d207375
   11fe0:	6c75646f 	.word	0x6c75646f
   11fe4:	6f697461 	.word	0x6f697461
   11fe8:	6e6f206e 	.word	0x6e6f206e
   11fec:	61684320 	.word	0x61684320
   11ff0:	6c656e6e 	.word	0x6c656e6e
   11ff4:	30343220 	.word	0x30343220
   11ff8:	484d2032 	.word	0x484d2032
   11ffc:	00000a7a 	.word	0x00000a7a
   12000:	746e6f43 	.word	0x746e6f43
   12004:	6f756e69 	.word	0x6f756e69
   12008:	4d207375 	.word	0x4d207375
   1200c:	6c75646f 	.word	0x6c75646f
   12010:	6f697461 	.word	0x6f697461
   12014:	6e6f206e 	.word	0x6e6f206e
   12018:	61684320 	.word	0x61684320
   1201c:	6c656e6e 	.word	0x6c656e6e
   12020:	34343220 	.word	0x34343220
   12024:	484d2030 	.word	0x484d2030
   12028:	00000a7a 	.word	0x00000a7a
   1202c:	746e6f43 	.word	0x746e6f43
   12030:	6f756e69 	.word	0x6f756e69
   12034:	4d207375 	.word	0x4d207375
   12038:	6c75646f 	.word	0x6c75646f
   1203c:	6f697461 	.word	0x6f697461
   12040:	6e6f206e 	.word	0x6e6f206e
   12044:	61684320 	.word	0x61684320
   12048:	6c656e6e 	.word	0x6c656e6e
   1204c:	38343220 	.word	0x38343220
   12050:	484d2030 	.word	0x484d2030
   12054:	00000a7a 	.word	0x00000a7a
   12058:	65636552 	.word	0x65636552
   1205c:	72657669 	.word	0x72657669
   12060:	73655420 	.word	0x73655420
   12064:	6e6f2074 	.word	0x6e6f2074
   12068:	61684320 	.word	0x61684320
   1206c:	6c656e6e 	.word	0x6c656e6e
   12070:	30343220 	.word	0x30343220
   12074:	484d2032 	.word	0x484d2032
   12078:	00000a7a 	.word	0x00000a7a
   1207c:	65636552 	.word	0x65636552
   12080:	72657669 	.word	0x72657669
   12084:	73655420 	.word	0x73655420
   12088:	6e6f2074 	.word	0x6e6f2074
   1208c:	61684320 	.word	0x61684320
   12090:	6c656e6e 	.word	0x6c656e6e
   12094:	34343220 	.word	0x34343220
   12098:	484d2030 	.word	0x484d2030
   1209c:	00000a7a 	.word	0x00000a7a
   120a0:	65636552 	.word	0x65636552
   120a4:	72657669 	.word	0x72657669
   120a8:	73655420 	.word	0x73655420
   120ac:	6e6f2074 	.word	0x6e6f2074
   120b0:	61684320 	.word	0x61684320
   120b4:	6c656e6e 	.word	0x6c656e6e
   120b8:	38343220 	.word	0x38343220
   120bc:	484d2030 	.word	0x484d2030
   120c0:	00000a7a 	.word	0x00000a7a
   120c4:	6c6f7041 	.word	0x6c6f7041
   120c8:	20326f6c 	.word	0x20326f6c
   120cc:	64726f43 	.word	0x64726f43
   120d0:	46206f69 	.word	0x46206f69
   120d4:	54204343 	.word	0x54204343
   120d8:	20747365 	.word	0x20747365
   120dc:	6d617845 	.word	0x6d617845
   120e0:	0a656c70 	.word	0x0a656c70
   120e4:	00000000 	.word	0x00000000
   120e8:	67617355 	.word	0x67617355
   120ec:	73612065 	.word	0x73612065
   120f0:	6c656220 	.word	0x6c656220
   120f4:	0a3a776f 	.word	0x0a3a776f
   120f8:	00000000 	.word	0x00000000
   120fc:	726f6853 	.word	0x726f6853
   12100:	72702074 	.word	0x72702074
   12104:	20737365 	.word	0x20737365
   12108:	74747542 	.word	0x74747542
   1210c:	31206e6f 	.word	0x31206e6f
   12110:	206f7420 	.word	0x206f7420
   12114:	74206f67 	.word	0x74206f67
   12118:	756f7268 	.word	0x756f7268
   1211c:	64206867 	.word	0x64206867
   12120:	65666669 	.word	0x65666669
   12124:	746e6572 	.word	0x746e6572
   12128:	73657420 	.word	0x73657420
   1212c:	6f6d2074 	.word	0x6f6d2074
   12130:	0a736564 	.word	0x0a736564
   12134:	00000000 	.word	0x00000000
   12138:	70205854 	.word	0x70205854
   1213c:	7265776f 	.word	0x7265776f
   12140:	20736920 	.word	0x20736920
   12144:	20746573 	.word	0x20746573
   12148:	2b206f74 	.word	0x2b206f74
   1214c:	20322e36 	.word	0x20322e36
   12150:	206d4264 	.word	0x206d4264
   12154:	78616d28 	.word	0x78616d28
   12158:	000a2029 	.word	0x000a2029
   1215c:	40008000 	.word	0x40008000
   12160:	40008010 	.word	0x40008010
   12164:	40008020 	.word	0x40008020
   12168:	40008030 	.word	0x40008030

0001216c <attFcnDefault>:
   1216c:	0000012d 00000129 00000129 0000012b     -...)...)...+...

0001217c <attcSendReqTbl>:
   1217c:	00000000 000003f9 00000501 00000501     ................
   1218c:	00000501 00000319 00000501 00000319     ................
   1219c:	00000501 00000319 0000042b 00000469     ........+...i...
   121ac:	00000319                                ....

000121b0 <attcFcnIf>:
   121b0:	000003b5 00000129 0000064d 00000585     ....)...M.......

000121c0 <attcProcRspTbl>:
   121c0:	00000749 00000841 0000077b 00000b45     I...A...{...E...
   121d0:	0000077b 00000839 00000bb9 00000839     {...9.......9...
   121e0:	0000077b 0000083b 00000000 00000d51     {...;.......Q...
   121f0:	0000083b                                ;...

000121f4 <attsIndFcnIf>:
   121f4:	0000012d 00000eb1 00000ec9 00001089     -...............

00012204 <attsMinPduLen>:
   12204:	07050300 05050305 05030305 01000002     ................
   12214:	0000000f                                ....

00012218 <attsFcnIf>:
   12218:	000011e7 0000117d 0000118d 0000126b     ....}.......k...
   12228:	00002801                                .(..

0001222c <dmAdvAct>:
   1222c:	00002589 000025ad 000025d5 000025fd     .%...%...%...%..
   1223c:	000026d1 000024e9 00002621              .&...$..!&..

00012248 <dmAdvFcnIf>:
   12248:	0000254d 00002629 000024eb              M%..)&...$..

00012254 <dmConnSpecDefaults>:
   12254:	00280018 07d00000 00000000              ..(.........

00012260 <dmConnFcnIf>:
   12260:	00002795 000029bd 00002a61              .'...)..a*..

0001226c <dmConn2FcnIf>:
   1226c:	00003261 00002899 00002a77              a2...(..w*..

00012278 <dmConnActSetMain>:
   12278:	00002771 00002789 00002b05 00002b83     q'...'...+...+..
   12288:	00002b71 00002773                       q+..s'..

00012290 <dmConnActSetSlave>:
   12290:	0000307d 00003099 00002fa9 000030ad     }0...0.../...0..
   122a0:	000030c1 00003001                       .0...0..

000122a8 <dmConnStateTbl>:
   122a8:	00001001 00002002 00000000 00000000     ..... ..........
   122b8:	00002303 00000000 00010000 00011104     .#..............
   122c8:	00010001 00010001 02030300 00010300     ................
   122d8:	00010001 21000002 00020002 00020002     .......!........
   122e8:	24000002 24002303 00020002 00030002     ...$.#.$........
   122f8:	00030104 22031203 25031303 00030003     ......."...%....
   12308:	05030400 05030003 00040004 00040004     ................
   12318:	00040004 04000004 04000104 00040004     ................
   12328:	00000004                                ....

0001232c <dmDevFcnIf>:
   1232c:	00003261 00003125 0000317d              a2..%1..}1..

00012338 <dmHciToIdTbl>:
   12338:	03030307 04020303 04040404 05050505     ................
   12348:	07070705 06060607 05060606 07040405     ................
   12358:	04070407 04050504 09090904 00000202     ................
   12368:	070b0b0b 00020002 0000000a              ............

00012374 <dmFcnDefault>:
   12374:	00003261 00003263 00003263              a2..c2..c2..

00012380 <dmEvtCbackLen>:
   12380:	00040004 000c0004 00040004 0024001c     ..............$.
   12390:	000e000a 00040006 00040006 00220006     ..............".
   123a0:	00080010 00240006 00140064 00040006     ......$.d.......
   123b0:	0006000a 00060006 000c000c 000e0006     ................
   123c0:	0008000e 000a0006 000a0006 000a0006     ................
   123d0:	0004000c 00200004 00060006 00060016     ...... .........
   123e0:	00100010 00060004 00000004              ............

000123ec <dmPrivAct>:
   123ec:	00003463 000033d5 0000340d 00003435     c4...3...4..54..
   123fc:	0000344d 000034c5 00003455              M4...4..U4..

00012408 <dmPrivFcnIf>:
   12408:	000033c1 000034d9 000033a9              .3...4...3..

00012414 <dmSecFcnIf>:
   12414:	00003261 000037a9 000036e5 d4f6493f     a2...7...6..?I..
   12424:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   12434:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   12444:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   12454:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   12464:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   12474:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00012480 <dmSecLescFcnIf>:
   12480:	00003261 00003263 00003919              a2..c2...9..

0001248c <smpPktLenTbl>:
   1248c:	11070700 0b110211 02110811 00021141     ............A...

0001249c <CSWTCH.23>:
   1249c:	00014a44 00014da8 00014a51 00014a60     DJ...M..QJ..`J..
   124ac:	00014a6d 00014a7e 00014a86 00014a99     mJ..~J...J...J..
   124bc:	00014aa9 00014abb 00014ac9 00014ad6     .J...J...J...J..
   124cc:	00014ae8 00014af9 00014b0a 00014b16     .J...J...K...K..
   124dc:	00014b1f 00014b2a 00014b34 00014b40     .K..*K..4K..@K..
   124ec:	00014b48 00014b59 00014b6b 00014b7d     HK..YK..kK..}K..
   124fc:	00014b8a 00014b96 00014ba2 00014bb0     .K...K...K...K..
   1250c:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

0001251c <smpScF5Key>:
   1251c:	656c7462                                btle

00012520 <smpiScSmIf>:
   12520:	000125c0 00012788 00012777              .%...'..w'..

0001252c <CSWTCH.2>:
   1252c:	00014bcb 00014daa 00014bd2 00014be0     .K...M...K...K..
   1253c:	00014beb 00014bf5 00014c03 00014c13     .K...K...L...L..
   1254c:	00014c1f 00014c2e 00014c3d 00014c4e     .L...L..=L..NL..
   1255c:	00014c5c 00014c66 00014c6f 00014c79     \L..fL..oL..yL..
   1256c:	00014c84 00014c90 00014ca0 00014bc1     .L...L...L...K..
   1257c:	00014cb0 00014cbf 00014cd0 00014cde     .L...L...L...L..
   1258c:	00014ceb 00014cf8 00014d0a 00014d17     .L...L...M...M..
   1259c:	00014d24 00014d31 00014d3c 00014d48     $M..1M..<M..HM..
   125ac:	00014d59 00014d6a 00014d75 00014d7f     YM..jM..uM...M..
   125bc:	00014d8a                                .M..

000125c0 <smpiScStateTbl>:
   125c0:	00012762 0001275c 00012753 0001274d     b'..\'..S'..M'..
   125d0:	00012747 0001273b 00012735 0001272f     G'..;'..5'../'..
   125e0:	00012729 00012723 0001271d 00012711     )'..#'...'...'..
   125f0:	0001270b 00012705 000126ff 000126f9     .'...'...&...&..
   12600:	000126f0 000126ea 000126e4 000126de     .&...&...&...&..
   12610:	000126d8 000126d2 000126cc 000126c6     .&...&...&...&..
   12620:	000126c0 000126ba 000126b4 000126ae     .&...&...&...&..
   12630:	000126a8 000126a2 0001269c 00012696     .&...&...&...&..
   12640:	00012690 00012687 00012678 00012669     .&...&..x&..i&..
   12650:	00012654                                T&..

00012654 <smpiScStateTblAttempts>:
   12654:	060b000f 01010a24 01000a0d 07010003     ....$...........
   12664:	00000024 15230600                                $....

00012669 <smpiScStateTblKeyDist>:
   12669:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

00012678 <smpiScStateTblEncrypt>:
   12678:	09142308 22030200 03001c00 0b000000              .#.....".......

00012687 <smpiScStateTblStkCalc>:
   12687:	0d13220b 00000924 12210b00                       ."..$....

00012690 <smpiScStateTblCnfVerCalc2>:
   12690:	0012210b 200b0000                                .!....

00012696 <smpiScStateTblCnfVerCalc1>:
   12696:	0008200b 1f060000                                . ....

0001269c <smpiScStateTblPairRand>:
   1269c:	00071f06 1e060000                                ......

000126a2 <smpiScStateTblPairCnf>:
   126a2:	00111e06 1d0b0000                                ......

000126a8 <smpiScStateTblCnfCalc2>:
   126a8:	00061d0b 1c0b0000                                ......

000126ae <smpiScStateTblCnfCalc1>:
   126ae:	00051c0b 1b040000                                ......

000126b4 <smpiScStateTblLegacyPin>:
   126b4:	00041b04 22060000                                ......

000126ba <smpiScStateTblVerifyDHCheck>:
   126ba:	00302206 191b0000                                ."0...

000126c0 <smpiScStateTblDhCalcF6Eb>:
   126c0:	002f191b 181b0000                                ../...

000126c6 <smpiScStateTblDhCalcF6Ea>:
   126c6:	002e181b 171b0000                                ......

000126cc <smpiScStateTblCalcF5LTK>:
   126cc:	002d171b 161b0000                                ..-...

000126d2 <smpiScStateTblCalcF5MacKey>:
   126d2:	002c161b 151b0000                                ..,...

000126d8 <smpiScStateTblCalcF5TKey>:
   126d8:	002b151b 14180000                                ..+...

000126de <smpiScStateTblCalcDHKey>:
   126de:	002a1418 13060000                                ..*...

000126e4 <smpiScStateTblOobWaitRand>:
   126e4:	00281306 121b0000                                ..(...

000126ea <smpiScStateTblOobSendRand>:
   126ea:	0027121b 0c190000                                ..'...

000126f0 <smpiScStateTblPasskeyRepeat>:
   126f0:	1a210c19 00002913 25101b00                       ..!..)...

000126f9 <smpiScStateTblPasskeyCheck>:
   126f9:	0025101b 0f060000                                ..%...

000126ff <smpiScStateTblPasskeyRand>:
   126ff:	00220f06 0e060000                                .."...

00012705 <smpiScStateTblPasskeyCnf>:
   12705:	00240e06 0d1b0000                                ..$...

0001270b <smpiScStateTblPasskeyCalc>:
   1270b:	00230d1b 0b060000                                ..#...

00012711 <smprScStateTblPasskeyKeypress>:
   12711:	161f0b06 0c04200b 00000021              ..... ..!...

0001271d <smpiScStateTblJwNcWaitUser>:
   1271d:	00291315 0a1b0000                                ..)...

00012723 <smpiScStateTblJwNcCheck2>:
   12723:	001d0a1b 091b0000                                ......

00012729 <smpiScStateTblJwNcCheck1>:
   12729:	001c091b 08060000                                ......

0001272f <smpiScStateTblJwNcRand>:
   1272f:	001b0806 07060000                                ......

00012735 <smpiScStateTblJwNcWaitCnf>:
   12735:	001a0706 06120000                                ......

0001273b <smpiScStateTblAuthSelect>:
   1273b:	13190612 11141e0b 00000026              ........&...

00012747 <smpiScStateTblPubKey>:
   12747:	00180506 04040000                                ......

0001274d <smpiScStateTblLescPin>:
   1274d:	00170404 03100000                                ......

00012753 <smpiScStateTblModeSelect>:
   12753:	11000310 0000001a 10020600                       .........

0001275c <smpiScStateTblPairRsp>:
   1275c:	00100206 01010000                                ......

00012762 <smpiScStateTblIdle>:
   12762:	0a0d0101 00030100 0f00060e 0f000007     ................
   12772:	00000000 02000a00                                .....

00012777 <smpiScStateTblCommon>:
   12777:	0702000a 00030200 02000f03 00000000     ................
	...

00012788 <smpiScActionTbl>:
   12788:	00004f7f 000049e3 000049f3 00004a07     .O...I...I...J..
   12798:	0000503d 000050c9 0000505d 0000509d     =P...P..]P...P..
   127a8:	000050bd 0000532d 00005351 00005359     .P..-S..QS..YS..
   127b8:	00005379 00005539 000055a9 000055c1     yS..9U...U...U..
   127c8:	000055e5 00005649 0000568b 000056f5     .U..IV...V...V..
   127d8:	0000573b 000057c9 000057f7 00005821     ;W...W...W..!X..
   127e8:	00005819 00005831 000059b5 00005865     .X..1X...Y..eX..
   127f8:	00005885 00004b57 00004a79 00004b93     .X..WK..yJ...K..
   12808:	00004bc3 000058c1 00005941 0000597f     .K...X..AY...Y..
   12818:	00005989 000059bd 00005a0f 00005a71     .Y...Y...Z..qZ..
   12828:	00005ac9 00004c01 00004c51 00004c91     .Z...L..QL...L..
   12838:	00004d01 00004d71 00004ddd 00005ae9     .M..qM...M...Z..
   12848:	00005b13                                .[..

0001284c <smprScSmIf>:
   1284c:	000128ec 00012ac4 00012ab2              .(...*...*..

00012858 <CSWTCH.2>:
   12858:	00014d9f 00014da6 00014db5 00014dc3     .M...M...M...M..
   12868:	00014d95 00014dcd 00014ddb 00014de8     .M...M...M...M..
   12878:	00014df9 00014e08 00014e19 00014d95     .M...N...N...M..
   12888:	00014e27 00014e35 00014e3f 00014e49     'N..5N..?N..IN..
   12898:	00014e54 00014e60 00014e70 00014e80     TN..`N..pN...N..
   128a8:	00014d95 00014e90 00014e9f 00014eb0     .M...N...N...N..
   128b8:	00014ebe 00014ecb 00014ed8 00014ee5     .N...N...N...N..
   128c8:	00014ef2 00014eff 00014f0c 00014f18     .N...N...O...O..
   128d8:	00014f29 00014f3a 00014f45 00014f4f     )O..:O..EO..OO..
   128e8:	00014f5a                                ZO..

000128ec <smprScStateTbl>:
   128ec:	00012a97 00012a91 00012a88 00012a7c     .*...*...*..|*..
   128fc:	00012a82 00012a70 00012a6a 00012a64     .*..p*..j*..d*..
   1290c:	00012a5e 00012a58 00012a49 00012a43     ^*..X*..I*..C*..
   1291c:	00012a3d 00012a37 00012a31 00012a2b     =*..7*..1*..+*..
   1292c:	00012a22 00012a16 00012a1c 00012a10     "*...*...*...*..
   1293c:	00012a0a 00012a04 000129fe 000129f8     .*...*...)...)..
   1294c:	000129f2 000129ec 000129e3 000129da     .)...)...)...)..
   1295c:	000129d4 000129ce 000129c8 000129c2     .)...)...)...)..
   1296c:	000129bc 000129b3 000129a4 00012995     .)...)...)...)..
   1297c:	00012980                                .)..

00012980 <smprScStateTblAttempts>:
   12980:	060e000f 00050f24 01000a10 07010003     ....$...........
   12990:	00000024 33230600                                $....

00012995 <smprScStateTblKeyDist>:
   12995:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

000129a4 <smprScStateTblEncrypt>:
   129a4:	09322308 22030200 03001c00 0b000000              .#2....".......

000129b3 <smprScStateTblStkCalc>:
   129b3:	0d31220b 00000c24 30210b00                       ."1.$....

000129bc <smprStateTblCnfVerCalc2>:
   129bc:	0030210b 200b0000                                .!0...

000129c2 <smprStateTblCnfVerCalc1>:
   129c2:	000b200b 1f060000                                . ....

000129c8 <smprStateTblPairRand>:
   129c8:	000a1f06 1e0b0000                                ......

000129ce <smprStateTblCnfCalc2>:
   129ce:	00091e0b 1d0b0000                                ......

000129d4 <smprStateTblCnfCalc1>:
   129d4:	00081d0b 1c040000                                ......

000129da <smprStateTblPinPair2>:
   129da:	06071c04 00002f1c 051b0400                       ...../...

000129e3 <smprStateTblPinPair1>:
   129e3:	06051b04 0000151b 2e221b00                       .........

000129ec <smprScStateTblDhCalcF6Eb>:
   129ec:	002e221b 191b0000                                ."....

000129f2 <smprScStateTblDhCalcF6Ea>:
   129f2:	002d191b 181b0000                                ..-...

000129f8 <smprScStateTblCalcF5LTK>:
   129f8:	002c181b 171b0000                                ..,...

000129fe <smprScStateTblCalcF5MacKey>:
   129fe:	002b171b 161b0000                                ..+...

00012a04 <smprScStateTblCalcF5TKey>:
   12a04:	002a161b 15180000                                ..*...

00012a0a <smprScStateTblCalcDHKey>:
   12a0a:	00291518 14060000                                ..)...

00012a10 <smprScStateTblWaitDhCheck>:
   12a10:	00281406 131b0000                                ..(...

00012a16 <smprScStateTblOobSendRand>:
   12a16:	0026131b 11060000                                ..&...

00012a1c <smprScStateTblOobWaitRand>:
   12a1c:	00251106 0c190000                                ..%...

00012a22 <smprScStateTblPasskeyRepeat>:
   12a22:	1a000c19 00002713 23101b00                       .....'...

00012a2b <smprScStateTblPasskeyCheck>:
   12a2b:	0023101b 0f060000                                ..#...

00012a31 <smprScStateTblPasskeyRand>:
   12a31:	00220f06 0e1b0000                                .."...

00012a37 <smprScStateTblPasskeyCalc>:
   12a37:	00210e1b 0d060000                                ..!...

00012a3d <smprScStateTblPasskeyWaitCnf>:
   12a3d:	001e0d06 0d040000                                ......

00012a43 <smprScStateTblPassWaitAuthRsp>:
   12a43:	001f0d04 0a060000                                ......

00012a49 <smprScStateTblPassKeyKeypress>:
   12a49:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00012a58 <smprScStateTblJwNcWaitUser>:
   12a58:	00271315 091b0000                                ..'...

00012a5e <smprScStateTblJwNcCalcG2>:
   12a5e:	0019091b 08060000                                ......

00012a64 <smprScStateTblJwNcWaitRand>:
   12a64:	00180806 071b0000                                ......

00012a6a <smprScStateTblJwNcSetup>:
   12a6a:	0017071b 06120000                                ......

00012a70 <smprScStateTblAuthSelect>:
   12a70:	13160612 12141a0a 00000024              ........$...

00012a7c <smprScStateTblPubKey>:
   12a7c:	00040506 03040000                                ......

00012a82 <smprScStateTblLescPin>:
   12a82:	00060304 04100000                                ......

00012a88 <smprScStateTblModeSelect>:
   12a88:	11000410 0000001a 14020200                       .........

00012a91 <smprScStateTblApiPairRsp>:
   12a91:	00140202 00050000                                ......

00012a97 <smprScStateTblIdle>:
   12a97:	0a100005 00080100 12000912 07130106     ................
   12aa7:	00031100 00000f01 0a000000                       ...........

00012ab2 <smprScStateTblCommon>:
   12ab2:	0702000a 00030200 02000f03 00000000     ................
	...

00012ac4 <smprScActionTbl>:
   12ac4:	00004f7f 000049e3 000049f3 00004a07     .O...I...I...J..
   12ad4:	00005ed5 00005019 00005e85 0000503d     .^...P...^..=P..
   12ae4:	000050c9 0000505d 0000509d 000050bd     .P..]P...P...P..
   12af4:	0000532d 00005379 00005359 00005351     -S..yS..YS..QS..
   12b04:	00005b7d 00005ba5 00005bb7 00005bbf     }[...[...[...[..
   12b14:	00005c29 00005cbd 00005ee9 00005fd3     )\...\...^..._..
   12b24:	00005f2d 00004b57 00004a79 00004b93     -_..WK..yJ...K..
   12b34:	00004bc3 00005f4b 00005fa1 00005fb5     .K..K_..._..._..
   12b44:	00005f5f 00005fc9 00005fdb 00006015     __..._..._...`..
   12b54:	00006083 0000608b 000060f9 00006155     .`...`...`..Ua..
   12b64:	00006171 00004c51 00004c91 00004d01     qa..QL...L...M..
   12b74:	00004d71 00004ddd 00006191 00005cd7     qM...M...a...\..
   12b84:	00005cf7 00005d51 00005e15 00005e5d     .\..Q]...^..]^..
   12b94:	00005da9                                .]..

00012b98 <smprSmIf>:
   12b98:	00012ba4 00012c74 00012c62              .+..t,..b,..

00012ba4 <smprStateTbl>:
   12ba4:	00012c47 00012c41 00012c38 00012c2f     G,..A,..8,../,..
   12bb4:	00012c29 00012c23 00012c1d 00012c17     ),..#,...,...,..
   12bc4:	00012c11 00012c08 00012bfc 00012bed     .,...,...+...+..
   12bd4:	00012bd8                                .+..

00012bd8 <smprStateTblAttempts>:
   12bd8:	060c000f 00050b0c 01000a0e 07010003     ................
   12be8:	0000000c 180b0c00                                .....

00012bed <smprStateTblKeyDist>:
   12bed:	06180b0c 000e190b 000b030d 08000000              ...............

00012bfc <smprStateTblEncrypt>:
   12bfc:	09170b08 0a030200 00000000              ............

00012c08 <smprStateTblStkCalc>:
   12c08:	0d160a0b 00000a0c 15090b00                       .........

00012c11 <smprStateTblCnfVerCalc2>:
   12c11:	0015090b 080b0000                                ......

00012c17 <smprStateTblCnfVerCalc1>:
   12c17:	0009080b 07060000                                ......

00012c1d <smprStateTblPairRand>:
   12c1d:	00080706 060b0000                                ......

00012c23 <smprStateTblCnfCalc2>:
   12c23:	0007060b 050b0000                                ......

00012c29 <smprStateTblCnfCalc1>:
   12c29:	0006050b 04040000                                ......

00012c2f <smprStateTblPinPair2>:
   12c2f:	06050404 00001404 04030400                       .........

00012c38 <smprStateTblPinPair1>:
   12c38:	06040304 00001303 12020200                       .........

00012c41 <smprStateTblApiPairRsp>:
   12c41:	00120202 00050000                                ......

00012c47 <smprStateTblIdle>:
   12c47:	0a0e0005 00080100 10000910 07110106     ................
   12c57:	00030f00 00000f01 0a000000                       ...........

00012c62 <smprStateTblCommon>:
   12c62:	0702000a 00030200 02000f03 00000000     ................
	...

00012c74 <smprActionTbl>:
   12c74:	00004f7f 00004fbb 00004fe1 00005003     .O...O...O...P..
   12c84:	00005019 0000503d 000050c9 0000505d     .P..=P...P..]P..
   12c94:	0000509d 000050bd 0000532d 00005351     .P...P..-S..QS..
   12ca4:	00005359 00005379 00005b7d 00005ba5     YS..yS..}[...[..
   12cb4:	00005bb7 00005bbf 00005c29 00005cbd     .[...[..)\...\..
   12cc4:	00005cd7 00005cf7 00005d51 00005e15     .\...\..Q]...^..
   12cd4:	00005da9 00005e5d                       .]..]^..

00012cdc <hciEventMask>:
   12cdc:	02008890 20008000                       ....... 

00012ce4 <hciLeEventMask>:
   12ce4:	000fffff 00000000                       ........

00012cec <hciEventMaskPage2>:
   12cec:	00800000 00000000                       ........

00012cf4 <hciEvtParseFcnTbl>:
   12cf4:	00000000 00007d75 00007e79 00007f85     ....u}..y~......
   12d04:	00007fe7 0000809d 00000000 000080cb     ................
   12d14:	0000812f 0000818f 000081e3 00008285     /...............
   12d24:	000082e5 0000833b 00008391 000083e7     ....;...........
   12d34:	00008449 000084bb 000084f5 0000854d     I...........M...
   12d44:	00008571 00008607 00008635 00008663     q.......5...c...
   12d54:	00008691 000086cd 00008709 00008597     ................
   12d64:	000085cf 00008737 0000878d 000087e3     ....7...........
   12d74:	00008851 0000887f 000088d5 00008983     Q...............
   12d84:	00008a45 00008b07 00008b3f 00008b77     E.......?...w...
   12d94:	00008bcd 00008c0f 00008c7d 00008cab     ........}.......
   12da4:	00000000 00009001 0000901b 00009089     ................
   12db4:	000090c9 00000000 00009297 00000000     ................
   12dc4:	00009271 00009271 00009271 00009271     q...q...q...q...
   12dd4:	00009271                                q...

00012dd8 <hciEvtCbackLen>:
   12dd8:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   12de8:	06080610 06060606 16060c0c 0a08080e     ................
   12df8:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   12e08:	04061016 04040404 00000004              ............

00012e14 <attCfg>:
   12e14:	0000000f 041e00f7                       ........

00012e1c <smpCfg>:
   12e1c:	07030bb8 00000310                       ........

00012e24 <g_sEm9304IOMConfigSPI>:
   12e24:	00000001 007a1200 14140000              ......z.....

00012e30 <g_sEm9304>:
	...
   12e38:	0000002a 0000002c                       *...,...

00012e40 <g_pEm9304PatchesHCICmd>:
   12e40:	0025fc27 ec06a3c6 656d3933 00000020     '.%.....39me ...
   12e50:	14150b01 00020c11 34f1553c 00000230     ........<U.40...
   12e60:	00000001 000000fb 00000000 00000000     ................
	...
   12e84:	0025fc27 762eab0a 656d3933 00000020     '.%....v39me ...
   12e94:	14140b01 00020c11 2fa9ffa5 00000235     .........../5...
   12ea4:	00000001 00000008 00000000 00000000     ................
	...
   12ec8:	0025fc27 86ca4cd8 656d3933 00000020     '.%..L..39me ...
   12ed8:	14160b01 00020c11 f02b5427 00000108     ........'T+.....
   12ee8:	00000002 00000202 00000000 00000000     ................
	...
   12f0c:	0040fc27 eb2cab73 656d3933 000001fc     '.@.s.,.39me....
   12f1c:	141f0201 00000c11 63bc1bca 00805844     ...........cDX..
   12f2c:	00000000 00805440 00000000 00805444     ....@T......DT..
   12f3c:	00000000 00805448 00000000 0080544c     ....HT......LT..
   12f4c:	00000000 0140fc28 4d45e600 54500075     ....(.@...EMu.PT
   12f5c:	00000080 54540000 00000080 54580000     ......TT......XT
   12f6c:	00000080 545c0000 00000080 54600000     ......\T......`T
   12f7c:	00000080 54640000 00000080 54680000     ......dT......hT
   12f8c:	00000080 006c0000 0240fc28 20af3d00     ......l.(.@..=. 
   12f9c:	008054cc 00000000 00805470 00000000     .T......pT......
   12fac:	00805474 00000000 00805478 00000000     tT......xT......
   12fbc:	0080547c 00000000 00805480 00000000     |T.......T......
   12fcc:	00805484 00000000 00805488 0340fc28     .T.......T..(.@.
   12fdc:	17e82d00 000000f2 548c0000 00000080     .-.........T....
   12fec:	54900000 00000080 54940000 00000080     ...T.......T....
   12ffc:	54980000 00000080 549c0000 00000080     ...T.......T....
   1300c:	54a00000 00000080 54a40000 00000080     ...T.......T....
   1301c:	0440fc28 a27bed00 0000004f 008054a8     (.@...{.O....T..
   1302c:	00000000 008054ac 00000000 008054b0     .....T.......T..
   1303c:	00000000 008054b4 00000000 008054b8     .....T.......T..
   1304c:	00000000 008054bc 00000000 008054c0     .....T.......T..
   1305c:	00000000 0540fc28 e0efbd00 54c400b2     ....(.@........T
   1306c:	00000080 54c80000 00000080 54cc0000     .......T.......T
   1307c:	00000080 54d00000 00000080 54d40000     .......T.......T
   1308c:	00000080 54d80000 00000080 54dc0000     .......T.......T
   1309c:	00000080 00e00000 0640fc28 68c59d00     ........(.@....h
   130ac:	0080545e 00000000 008054e4 00000000     ^T.......T......
   130bc:	008054e8 00000000 008054ec 00000000     .T.......T......
   130cc:	008054f0 00000000 008054f4 00000000     .T.......T......
   130dc:	008054f8 00000000 008054fc 0740fc28     .T.......T..(.@.
   130ec:	a8887f00 00000066 56940000 00000080     ....f......V....
   130fc:	56980000 00000080 569c0000 00000080     ...V.......V....
   1310c:	56a00000 00000080 56a40000 00000080     ...V.......V....
   1311c:	56a80000 00000080 56ac0000 00000080     ...V.......V....
   1312c:	0831fc28 8b31ea00 0000002b 008056b0     (.1...1.+....V..
   1313c:	00000000 008056b4 00000000 008056b8     .....V.......V..
   1314c:	00000000 008056bc 00000000 008056c0     .....V.......V..
	...
   13170:	0025fc27 640a1033 656d3933 00000020     '.%.3..d39me ...
   13180:	142b0b01 00000c11 fbb1ddef 0000011c     ..+.............
   13190:	00000002 000004e2 00000000 00000000     ................
	...
   131b4:	0040fc27 ccb6a888 656d3933 00001304     '.@.....39me....
   131c4:	143b0502 00000c11 063e3145 0000001c     ..;.....E1>.....
   131d4:	00000022 00000023 00000024 000000a2     "...#...$.......
   131e4:	000000b8 000000c9 000000e2 00000116     ................
   131f4:	0000016f 0140fc28 28d3a000 019b008a     o...(.@....(....
   13204:	01a10000 01a60000 01a90000 01ac0000     ................
   13214:	01bc0000 01c60000 01dd0000 01de0000     ................
   13224:	01df0000 01e00000 01e70000 01e80000     ................
   13234:	01e90000 00f80000 0240fc28 21a49500     ........(.@....!
   13244:	0000010d 0000021a 0000026c 000002e7     ........l.......
   13254:	00000341 00000200 00000214 00000228     A...........(...
   13264:	0000023c 00000314 00000474 000004a0     <.......t.......
   13274:	0000052c 00000620 00000660 0340fc28     ,... ...`...(.@.
   13284:	17c13600 071400f0 079c0000 0a780000     .6............x.
   13294:	0b540000 0bf40000 0e980000 0fb80000     ..T.............
   132a4:	0fcc0000 0fe40000 0ff80000 100c0000     ................
   132b4:	10200000 10340000 10480000 005c0000     .. ...4...H...\.
   132c4:	0440fc28 375e5e00 000010e6 0000107c     (.@..^^7....|...
   132d4:	000010cc 00001174 000011e8 00001054     ....t.......T...
   132e4:	00000044 00440000 00000001 00400000     D.....D.......@.
   132f4:	00600000 0000002d 44000236 00012ccc     ..`.-...6..D.,..
   13304:	00000246 0540fc28 5a62eb00 2c6c4497     F...(.@...bZ.Dl,
   13314:	027e0001 2c6c4400 02c80001 00006d00     ..~..Dl,.....m..
   13324:	035c0000 6fa04400 036c0000 2c0c4400     ..\..D.o..l..D.,
   13334:	038c0001 2ca04400 05780001 0f386c00     .....D.,..x..l8.
   13344:	05a20000 00046d00 0640fc28 f008be00     .....m..(.@.....
   13354:	0000008a 6d0005ae 00000024 6c0005c6     .......m$......l
   13364:	000011c0 6c0005d2 000011b8 440005fa     .......l.......D
   13374:	0000df24 44000612 00012ce4 6c0006c4     $......D.,.....l
   13384:	0000073c 400006c8 0001bb20 0740fc28     <......@ ...(.@.
   13394:	34780a00 0702007e 00046d00 07080000     ..x4~....m......
   133a4:	00246d00 07400000 11d86c00 07c00000     .m$...@..l......
   133b4:	d08c4400 080a0001 00006d00 087a0000     .D.......m....z.
   133c4:	d08c4400 08b80001 d08c4400 00f80001     .D.......D......
   133d4:	0840fc28 b275e300 440008a8 0001d08c     (.@...u....D....
   133e4:	44000a30 000062e0 6d000a5a 00000000     0..D.b..Z..m....
   133f4:	44000afc 000062e0 44000c06 000062e0     ...D.b.....D.b..
   13404:	44000c3c 000062e0 44000c5c 000062e0     <..D.b..\..D.b..
   13414:	00000dfe 0940fc28 bd69a800 13144434     ....(.@...i.4D..
   13424:	0e100001 13144400 0eb00001 20744400     .....D.......Dt 
   13434:	0ef60001 70244400 0f3c0000 4c784400     .....D$p..<..DxL
   13444:	0f700001 2e3c4400 0fa00001 23f04400     ..p..D<......D.#
   13454:	10e80000 00b46c00 0a40fc28 d1d8be00     .....l..(.@.....
   13464:	000010d5 44001124 0001fd70 4400112e     ....$..Dp......D
   13474:	0001fd70 44001152 0001c888 4400115a     p...R..D....Z..D
   13484:	0001c888 100011b8 00000588 100011c8     ................
   13494:	000006cc 100011d8 000011c4 0b40fc28     ............(.@.
   134a4:	30ee9f00 ffff0069 0000ffff c3e40000     ...0i...........
   134b4:	45cbc1ac 02e00080 c48085c0 5802a580     ...E...........X
   134c4:	c7c4a5c0 c3e478e0 45cbc1bc 02e00080     .....x.....E....
   134d4:	c48085c0 5800a580 c7c4a5c0 00e478e0     .......X.....x..
   134e4:	0c40fc28 12f50500 c1bcc343 008045cb     (.@.....C....E..
   134f4:	85c002e0 a580c480 a5c05801 78e0c7c4     .........X.....x
   13504:	c1a1c3ea 5b074708 008046cb 86000654     .....G.[.F..T...
   13514:	000140d3 0899066c 70ad0030 58c9c080     .@..l...0..p...X
   13524:	00088622 0d40fc28 2250ac00 770c4355     "...(.@...P"UC.w
   13534:	812342c1 23ca7171 23541045 00071a08     .B#.qq.#E.T#....
   13544:	6b440000 eb128260 0af98340 702c83e0     ..Dk`...@.....,p
   13554:	74118283 12cc2402 030d21ca 7030a223     ...t.$...!..#.0p
   13564:	004d20ca 008d25ca 0e40fc28 196f0200     . M..%..(.@...o.
   13574:	f1ee109e 27408722 70301411 40c1a723     ....".@'..0p#..@
   13584:	0a9a4122 25ca096e e88813cd 40c1704c     "A..n..%....Lp.@
   13594:	0a2a4122 a7e4096e 40c3c100 02f80080     "A*.n......@....
   135a4:	13e00d3f 8602a020 00c00837 0f40fc28     ?... ...7...(.@.
   135b4:	78520f00 40c3036e 02f40080 8503a020     ..Rxn..@.... ...
   135c4:	70001e00 02fc0080 8702f017 4fa8a7e4     ...p...........O
   135d4:	704ca703 096e09f2 a6e240c1 874258ce     ..Lp..n..@...XB.
   135e4:	41e14002 f00758c3 a6a258cf 00028543     .@.A.X...X..C...
   135f4:	1040fc28 412a5000 41a14049 5b0858c3     (.@..P*AI@.A.X.[
   13604:	78e0c7ca 258ac2e8 651d1d07 15f14608     ...x...%...e.F..
   13614:	080d9080 47280fb1 92031df1 08158e01     ......(G........
   13624:	8f010411 40c3e806 00000060 00431800     .......@`.....C.
   13634:	0093ea09 1140fc28 82c47700 10801678     ....(.@..w..x...
   13644:	71047254 10021e93 f05ff290 10031e93     Tr.q......_.....
   13654:	d8498e20 8f0058aa b8228d21 080bb8c0      .I..X..!.".....
   13664:	40c10061 f00659b5 00402179 40c1ad01     a..@.Y..y!@....@
   13674:	8f0059b4 00238d20 1240fc28 8f6d5600     .Y.. .#.(.@..Vm.
   13684:	2941b807 bac00102 0887b8c0 215000a1     ..A)..........P!
   13694:	b9840100 20ca7054 ad000041 e8398f01     ....Tp. A.....9.
   136a4:	083b8d14 169d011e 77141600 7104f205     ..;........w...q
   136b4:	10181e9d 40c1f00e 00191e9d 1340fc28     .......@....(.@.
   136c4:	de399500 20801042 88200c49 f704e1fe     ..9.B.. I. .....
   136d4:	a8207124 1800f004 0c460003 089f034e     $q .......F.N...
   136e4:	d83d0030 008040c3 08a20868 4010096e     0.=..@..h...n..@
   136f4:	165880a0 6f221100 b3018560 00048f00     ..X..."o`.......
   13704:	1440fc28 c2d8f300 8f41ad72 b5436b06     (.@.....r.A..kC.
   13714:	4d9c581e 096e0916 21002040 d8228e20     .X.M..n.@ .! .".
   13724:	169358a9 780f1080 00950829 08198e01     .X.....x).......
   13734:	8f000811 013f0811 208040c1 88000d87     ......?..@. ....
   13744:	001e0811 1540fc28 caee6500 d8320027     ....(.@..e..'.2.
   13754:	40c1ae02 081159a6 712c0051 59a940c1     ...@.Y..Q.,q.@.Y
   13764:	d84a8e20 8f2058aa 008040c3 a8200864      .J..X ..@..d. .
   13774:	081d8e01 16950411 080d1080 08110050     ............P...
   13784:	1e9500d1 007a1043 1640fc28 1154f600     ....C.z.(.@...T.
   13794:	1100165e 10041e96 1df1c6c8 40c19002     ^..............@
   137a4:	c6c8599d c1a1c3e2 40c34508 180800f0     .Y.......E.@....
   137b4:	5aaac180 40c3a500 02f40080 c0008020     ...Z...@.... ...
   137c4:	28497822 28450601 008b0600 1740fc28     "xI(..E(....(.@.
   137d4:	d4012000 20c0e182 c7c2006d c3e878e0     . ..... m....x..
   137e4:	45cbc1a1 03180080 40508d00 00b0082b     ...E......P@+...
   137f4:	08494728 71cd0071 598e5b09 5b0aa501     (GI.q..q.[.Y...[
   13804:	e82f8501 a70070cd 20c11800 0001b5c1     ../..p..... ....
   13814:	1840fc28 72a28100 10831d43 8d08f02b     (.@....rC...+...
   13824:	00700843 5afcde12 a501598f 85015afd     C.p....Z.Y...Z..
   13834:	e819de11 a70070cd 21011800 1d01b5c1     .....p.....!....
   13844:	f01910c3 30c31c03 1800a7a0 15082380     .......0.....#..
   13854:	00101084 1940fc28 a4135f00 712cd8fa     ....(.@.._....,q
   13864:	30c22440 58a1706c f0095990 1800a7a0     @$.0lp.X.Y......
   13874:	f0052041 1800a7a0 de112041 c7c840c1     A ......A ...@..
   13884:	c3e478e0 4528c1a5 4608c184 7014593a     .x....(E...F:Y.p
   13894:	f456710c 00d7d80a 1a40fc28 9426d400     .qV.....(.@...&.
   138a4:	73145905 f252730c 8802c004 00500863     .Y.s.sR.....c.P.
   138b4:	c660e8b8 1c01be28 95003382 1c02c280     ..`.(....3......
   138c4:	b8283002 30021c03 c0619501 1c05b828     .0(....0..a.(...
   138d4:	95023002 30021c06 0007b828 1b40fc28     .0.....0(...(.@.
   138e4:	acf8fc00 30021cf9 c0629503 1c09b828     .......0..b.(...
   138f4:	95243002 b88dd813 30421c0a 1c0bb928     .0$.......B0(...
   13904:	95653042 c363d90e 1c0dbb28 594b30c2     B0e...c.(....0KY
   13914:	720c7114 f00af420 11041506 00419562     .q.r .......b.A.
   13924:	1c40fc28 b797d900 95209586 5b4240c1     (.@....... ..@B[
   13934:	0051080d 59d7710c c7c4710c 41c3c004     ..Q..q.Y.q.....A
   13944:	27100000 00581869 00181868 0f981867     ...'i.X.h...g...
   13954:	0f380040 07062080 720c59cb 78e0c7c4     @.8.. ...Y.r...x
   13964:	0000c2e2 1d40fc28 3b1ba000 70841681     ....(.@....;...p
   13974:	03200080 45084220 742cd80f 58a1706c     .. . B.E..,tlp.X
   13984:	40c36d23 00040060 581eda20 40c34dcb     #m.@`... ..X.M.@
   13994:	00240060 581eda20 5895d83b c6c2700c     `.$. ..X;..X.p..
   139a4:	c3e278e0 00c3c1b1 1e40fc28 16b0ac00     .x......(.@.....
   139b4:	00404229 450811c0 82409000 004041c3     )B@....E..@..A@.
   139c4:	596111b8 218ae811 1c000004 95203044     ..aY...!....D0 .
   139d4:	30421c02 1c03b928 80403042 7a60c180     ..B0(...B0@...`z
   139e4:	700c40a1 092ec7c2 00a106ee 1f40fc28     .@.p........(.@.
   139f4:	fc929400 c7c24024 c3ea78e0 46cbc1a1     ....$@...x.....F
   13a04:	06540080 48a84508 092e0ed6 860240c1     ..T..E.H.....@..
   13a14:	036108a1 58c9c080 40108622 8103c200     ..a....X"..@....
   13a24:	008041c3 a14002f8 20ca7012 00cf2005     .A....@..p. . ..
   13a34:	2040fc28 9ba37a00 70ad58cc 41b147c9     (.@ .z...X.p.G.A
   13a44:	8140f004 81017a60 e81b8700 08138020     ..@.`z...... ...
   13a54:	81432030 20a50815 04022202 e2d0a143     0 C.... ."..C...
   13a64:	68e4f7c5 f1f24110 8660a1a3 080f8041     ...h.A....`.A...
   13a74:	00e400e0 2140fc28 73550100 190468e4     ....(.@!..Us.h..
   13a84:	f1e52080 f1e3a640 e80f8600 8060702c     . ..@.......,p`.
   13a94:	80016989 74508343 10c625ca 008621ca     .i..C.Pt.%...!..
   13aa4:	2179e8f8 f0020000 ed0a700c a6a2e80a     ..y!.....p......
   13ab4:	40c38543 006c0001 2240fc28 613cbe00     C..@..l.(.@"..<a
   13ac4:	41a10681 c7ca58c3 10011e08 78e0c7ca     ...A.X.........x
   13ad4:	008040c3 41c300c0 073c0040 0d8e0459     .@.....A@.<.Y...
   13ae4:	c1b1c0f1 0931882c 700c0ef0 0eb1095f     ....,.1....p_...
   13af4:	38812440 30802440 00031c00 2340fc28     @$.8@$.0....(.@#
   13b04:	b66a5c00 59ea32d5 70841600 03200080     .\j..2.Y...p.. .
   13b14:	dc1f7014 102124ca d942d83e 40c3f017     .p...$!.>.B....@
   13b24:	00040060 006041c3 24400024 1c003082     `....A`.$.@$.0..
   13b34:	59eb3243 70841600 03200080 001f7014     C2.Y...p.. ..p..
   13b44:	2440fc28 335cc100 24cadcf2 d83e1021     (.@$..\3...$!.>.
   13b54:	c280d922 1c01706c 58a13302 c0b1730c     "...lp...3.X.s..
   13b64:	7ee0c0d1 0f801808 11d80040 d8097fe0     ...~....@.......
   13b74:	c1aac3ea 30011c24 88024708 2d07218a     ....$..0.G...!.-
   13b84:	00b3081d 2540fc28 5a95e300 210006b3     ....(.@%...Z...!
   13b94:	089b23d1 08270090 08ed0410 764c0530     .#....'.....0.Lv
   13ba4:	0590081f 0887f0cf e0a20cb0 008045cb     .............E..
   13bb4:	f28a07bc f2a7e0b1 f4c3e09a 8d00d532     ............2...
   13bc4:	46cbdb0c 00be0080 2640fc28 7b75ca00     ...F....(.@&..u{
   13bd4:	68530663 b8c26832 0142226c 21847114     c.Sh2h..l"B..q.!
   13be4:	78450002 c0607825 8e00f203 17e06866     ..Ex%x`.....fh..
   13bf4:	10047010 24402401 764c3080 0e6e08ce     .p...$@$.0Lv..n.
   13c04:	30c21c01 21538d20 00630080 2740fc28     ...0 .S!..c.(.@'
   13c14:	1be4f900 007108e1 21c02040 008040c3     ......q.@ .!.@..
   13c24:	880009a0 007e0859 c289b925 4002b9c1     ....Y.~.%......@
   13c34:	0849596a 76cd0071 b887c020 f021c060     jYI.q..v ...`.!.
   13c44:	c289c180 59b040e1 30801401 00c3e807     .....@.Y...0....
   13c54:	2840fc28 4aac5400 006040f8 18000000     (.@(.T.J.@`.....
   13c64:	71ad0043 72148f02 1775f47f 87391082     C..q...r..u...9.
   13c74:	716c8718 58ee4460 58f5710c 8ec0f07d     ..lq`D.X.q.X}...
   13c84:	f005c049 1c2476cd 8f023400 da25700e     I....v$..4...p%.
   13c94:	0097e090 2940fc28 6b3c7700 e09af228     ....(.@).w<k(...
   13ca4:	e096f28f da26f48f 0677f091 17fc0080     ......&...w.....
   13cb4:	8920f001 008045cb 8d6006de d40bb903     .. ..E....`.....
   13cc4:	21847664 1c010003 214f30c2 84200083     dv.!.....0O!.. .
   13cd4:	30802440 006e0816 2a40fc28 1292de00     @$.0..n.(.@*....
   13ce4:	c3600eb9 40c38dc0 06bf0080 2200204a     ..`....@....J ."
   13cf4:	f0c5c049 00800694 43c38520 06e00080     I....... ..C....
   13d04:	24408b84 89203080 764cbc06 2184793b     ..@$.0 ...Lv;y.!
   13d14:	79850002 00c12145 0020c160 2b40fc28     ...yE!..`. .(.@+
   13d24:	31392c00 0fd68381 1c010e2e 85203303     .,91.........3 .
   13d34:	764cc082 581e7224 2380204a f0a370cd     ..Lv$r.XJ .#.p..
   13d44:	8d6c8580 de228525 bb038c80 00032384     ..l.%."......#..
   13d54:	24847c9b 7b851002 30802440 0045764c     .|.$...{@$.0LvE.
   13d64:	2c40fc28 63046500 01432377 33821c01     (.@,.e.cw#C....3
   13d74:	0e2e0f96 8500c360 0030089d c0826822     ....`.....0."h..
   13d84:	581e764c 700cf04a 71ad58bb 58c7f088     Lv.XJ..p.X.q...X
   13d94:	30821401 7956d9e6 01047030 11000005     ...0..Vy0p......
   13da4:	00012081 2d40fc28 6df02600 20801100     . ..(.@-.&.m... 
   13db4:	208c1102 c220b922 24446873 21441040     ... ". .shD$@.D!
   13dc4:	68940101 00c02105 78857845 1114c060     ...h.!..Ex.x`...
   13dd4:	14012080 08c3308e 720e013e 712c8f00     . ...0..>..r..,q
   13de4:	f05b59af 0005da27 2e40fc28 9c3beb00     .Y[.'...(.@...;.
   13df4:	700cf04f 710e58bb 716c704c 8e8940c3     O..p.X.qLplq.@..
   13e04:	41c3bed6 55550055 58ee4460 b8c28d00     ...AU.UU`D.X....
   13e14:	00b10809 f003700c 58f5710c 71ad7016     .....p...q.X.p.q
   13e24:	2200204a f03ff446 00bb700c 2f40fc28     J ."F.?..p..(.@/
   13e34:	f2b98200 85065849 8d3e954e 30041c0e     ....IX..N.>....0
   13e44:	70cdb830 43c3c165 07e00080 30841c12     0..pe..C.......0
   13e54:	30041c10 2103197f 139c1f99 93239382     ...0...!......#.
   13e64:	95519304 008b1300 33821c17 001ac466     ..Q........3f...
   13e74:	3040fc28 f1e2fb00 30421c45 1c20c067     (.@0....E.B0g. .
   13e84:	95503084 bc288b6c 30841c1e 8d6d6b55     .0P.l.(....0Ukm.
   13e94:	b828b928 1c157a65 204a3103 1c162900     (.(.ez...1J .)..
   13ea4:	1c223382 1c1932c2 1c1b3302 1c1d3042     .3"..2...3..B0..
   13eb4:	00233002 3140fc28 e6a65100 30821c99     .0#.(.@1.Q.....0
   13ec4:	c180c309 420240e1 58b044c1 40a14508     .....@.B.D.X.E.@
   13ed4:	c2e4c7ca 45084628 08b2d809 712c02ee     ....(F.E......,q
   13ee4:	10710e1f 268046a9 58fb1c0a 10051e00     ..q..F.&...X....
   13ef4:	008041c3 000007ec 3240fc28 21935e00     .A......(.@2.^.!
   13f04:	b8a38948 8d21a900 0411092f 006040c3     H.....!./....@`.
   13f14:	15950000 0a131082 88200071 0051090b     ........q. ...Q.
   13f24:	11031d95 0a0df006 e9840111 10431d95     ..............C.
   13f34:	00031800 09158d21 00950810 3340fc28     ....!.......(.@3
   13f44:	d2baee00 10801507 0051080d 1100156e     ..........Q.n...
   13f54:	1592e88f da771083 1e002554 1ec12554     ......w.T%..T%..
   13f64:	bbc462ba 8d2159e2 10021d75 04310949     .b...Y!.u...I.1.
   13f74:	020a208a 880060b8 0823b8c2 008a0131     . ...`....#.1...
   13f84:	3440fc28 e4e97500 058a205e 900060b8     (.@4.u..^ ...`..
   13f94:	1101157a 09137704 40a10021 0d872080     z....w..!..@. ..
   13fa4:	b9838820 1595a820 08151080 156e0051      ... .......Q.n.
   13fb4:	70141100 0022099c 034220ca 702cd809     ...p..".. B...,p
   13fc4:	00431d02 3540fc28 0c347c00 0fe61093     ..C.(.@5.|4.....
   13fd4:	1d9302ae c6c41003 c2e678e0 208a4508     .........x...E. 
   13fe4:	651e038a 910016fc 11011568 00210915     ...e....h.....!.
   13ff4:	16fa71ed b8239080 004f2044 1d68f00b     .q....#.D O...h.
   14004:	96001004 00041d6c 3640fc28 ccc78600     ....l...(.@6....
   14014:	16fe104c 1d6a9100 96221004 1100156e     L.....j...".n...
   14024:	0040080d 402071ed 10441d6e 1d95e803     ..@..q @n.D.....
   14034:	960310c3 11011578 0000090d 410071ed     ....x........q.A
   14044:	10041d78 908c16fb 001f9601 3740fc28     x...........(.@7
   14054:	7474e500 0f832137 27100000 93021ee5     ..tt7!.....'....
   14064:	101c1d99 1e022540 248a4dc8 40a10901     ....@%...M.$...@
   14074:	16fa59a3 ef099080 00c1204f 90421efa     .Y......O ....B.
   14084:	d8258d20 c6c658b7 0080206c 00021efa      .%..X..l ......
   14094:	3840fc28 dc40b100 c6c69080 4508c2e6     (.@8..@........E
   140a4:	268a8802 084d1d87 66be0db0 0d10086b     ...&..M....fk...
   140b4:	0091088b 02d10a8b 08898d01 25540431     ............1.T%
   140c4:	8e001a82 204f4dfc 44cb004f 000a0080     .....MO O..D....
   140d4:	008043c3 3940fc28 25ed1600 006c0001     .C..(.@9...%..l.
   140e4:	00ff0881 d834aee0 100e1580 9400ad02     ......4.........
   140f4:	248a9360 78d40981 0a4ff042 d8080171     `..$...xB.O.q...
   14104:	02ae0ede 1584712c 08471080 712c00b5     ....,q....G...,q
   14114:	59a940a1 00001694 3a40fc28 699bb500     .@.Y....(.@:...i
   14124:	e89f11a9 10831d84 0a2bf01b 15950151     ..........+.Q...
   14134:	080b1080 080b0050 1d950111 d80810c3     ....P...........
   14144:	02ae0ea6 712c712c 59a940a1 1900f009     ....,q,q.@.Y....
   14154:	c6c60043 ad02d832 00a1c6c6 3b40fc28     C...2.......(.@;
   14164:	6dcc6900 59ae4022 0e86d808 702c02ae     .i.m"@.Y......,p
   14174:	d836c6c6 100f1580 167dad02 94801080     ..6.......}.....
   14184:	209f9360 60980893 0981248a 631b78f4     `.. ...`.$...x.c
   14194:	59a340a1 c2f8c6c6 208a4508 006e208a     .@.Y.....E. . n.
   141a4:	3c40fc28 0fe1f700 0100109a 1103157a     (.@<........z...
   141b4:	23502000 20821006 68c16319 0a5dbac2     . P#... .c.h..].
   141c4:	71240131 210c1014 43cb7830 80000000     1.$q...!0x.C....
   141d4:	10230c0f 489271ed 10840b0d 4c12f008     ..#..q.H.......L
   141e4:	00840b0d 3d40fc28 c8816d00 7091108e     ....(.@=.m.....p
   141f4:	442870ed 40a1f418 0d872080 b9838820     .p(D...@. .. ...
   14204:	ef11a820 7890712c 01567070 b98f002e      ...,q.xppV.....
   14214:	0e134876 20071044 00000f8e 667effff     vH..D.. ......~f
   14224:	4428f003 00801000 3e40fc28 44c4cf00     ..(D....(.@>...D
   14234:	706e207b 0837b8c2 702c0131 208040a1     { np..7.1.,p.@. 
   14244:	9000000a 68497990 00450a15 702c4950     .....yIh..E.PI,p
   14254:	0f85081b 80010000 f0094a71 702c7a22     ........qJ.."z,p
   14264:	0f840a0b 80010000 002f4b11 3f40fc28     .........K/.(.@?
   14274:	c00e7800 904827fe d992d875 2554da77     .x...'H.u...w.T%
   14284:	25541ed8 212f1e17 25002388 25001015     ..T%../!.#.%...%
   14294:	25001052 f2251094 10562742 120070cd     R..%..%.B'V..p..
   142a4:	40e22083 bbc44103 59e24282 00021d00     . .@.A...B.Y....
   142b4:	4040fc28 87965500 773220cc 958126cc     (.@@.U... 2w.&..
   142c4:	157af206 71041100 10041d7a 0edd71c5     ..z....qz....q..
   142d4:	41a193c4 2180754c 40e200ca 1000581e     ...ALu.!...@.X..
   142e4:	206c2080 18000080 270e2002 2742144f     . l ..... .'O.B'
   142f4:	00031050 4140fc28 7e337200 7166f080     P...(.@A.r3~..fq
   14304:	14c8262f 13e30e29 120040e2 41032083     /&..)....@... .A
   14314:	4282bbc4 0ee959e2 1d009420 157a2002     ...B.Y.. .... z.
   14324:	71041100 10041d7a 095df1ec 214220b4     ...qz.....].. B!
   14334:	1568204e 00921101 4240fc28 e7089300     N h.....(.@B....
   14344:	10801573 219f855f a5230893 b82579cc     s..._..!..#..y%.
   14354:	0d1a6159 a53f082e 008041c3 892007ec     Ya....?..A.... .
   14364:	b9c24708 082e0d06 853f4020 856360f8     .G...... @?..`c.
   14374:	0a0f2985 17022540 008a7bcc 4340fc28     .)..@%...{..(.@C
   14384:	843e1e00 08012460 782ca563 0a0f2885     ..>.`$..c.,x.(..
   14394:	1d806d24 40a11000 c6d859a3 76304b16     $m.....@.Y...K0v
   143a4:	ffc506c2 0f8e2307 ffff0000 f159661e     .....#.......fY.
   143b4:	c2e678e0 45084728 1d87268a 005758a7     .x..(G.E.&...XW.
   143c4:	4440fc28 f6212300 03610852 8d2166be     (.@D.#!.R.a..f!.
   143d4:	0810090b 04310945 8d0240a1 0c910845     ....E.1..@..E...
   143e4:	08478e00 70ed017f 0411098f 10801594     ..G....p........
   143f4:	00900841 0051086f 1600154e 8000e833     A...o.Q.N...3...
   14404:	00008000 4540fc28 ecec6c00 085f8864     ....(.@E.l..d._.
   14414:	8e120151 01d0083f 0091083f 16431e12     Q...?...?.....C.
   14424:	09c6f01b 41e108ae 1f00c6c6 c6c61043     .......A....C...
   14434:	ae00b8a5 59ae40a1 15b0c6c6 082f1080     .....@.Y....../.
   14444:	41a102f1 0080700c 4640fc28 cd6d0800     ...A.p..(.@F..m.
   14454:	02082193 01431900 1e12f00d d97f1603     .!....C.........
   14464:	10031e7b 10191d9d 10421e7a 1d9b710c     {.......z.B..q..
   14474:	09321fd9 40c3030e 08640080 080f8800     ..2....@..d.....
   14484:	8e00011f 001f0807 00c771ed 4740fc28     .........q..(.@G
   14494:	4f39a400 ef9058b9 0f840821 08de0000     ..9O.X..!.......
   144a4:	599f8518 ad02d834 08938e12 702c813e     ...Y4.......>.,p
   144b4:	59af8d00 712cc6c6 59a940a1 c3e2c6c6     ...Y..,q.@.Y....
   144c4:	0d3ec1a1 450809ee 02b10837 0060dc3b     ..>....E7...;.`.
   144d4:	4840fc28 7a1c0a00 1c0295a3 c3603302     (.@H...z.....3`.
   144e4:	208abb28 732c0190 1c01c280 1d6930c2     (.. ..,s.....0i.
   144f4:	594b1019 00710813 59d7710c 712cd810     ..KY..q..q.Y..,q
   14504:	08ee0ece c7c2704c 2482c3e4 45cb3802     ....Lp.....$.8.E
   14514:	00e00080 4940fc28 4b303a00 85c00253     ....(.@I.:0KS...
   14524:	a580c480 a5c05808 c3e4c7c4 38022482     .....X.......$.8
   14534:	008045cb 85c002e0 0c52c480 a58000ae     .E........R.....
   14544:	c7c4a5c0 c3e478e0 38022482 008045cb     .....x...$.8.E..
   14554:	85c002e0 0060c380 4a40fc28 45455c00     ......`.(.@J.\EE
   14564:	580aa5e5 c7c4a5c0 2482c3e4 45cb3802     ...X.......$.8.E
   14574:	02e00080 c48085c0 580ca580 c7c4a5c0     ...........X....
   14584:	2482c3e4 45cb300a 02e00080 c28085c0     ...$.0.E........
   14594:	580ea540 c7c4a5c0 0082c3e4 4b40fc28     @..X........(.@K
   145a4:	ce315800 300a24ee 008045cb 85c002e0     .X1..$.0.E......
   145b4:	a560c380 a5c0580f c3e4c7c4 300a2482     ..`..X.......$.0
   145c4:	008045cb 85c002e0 a520c180 a5c05810     .E........ ..X..
   145d4:	c3e4c7c4 38022482 008045cb 00c002e0     .....$.8.E......
   145e4:	4c40fc28 f2ada700 c28085a3 5812a540     (.@L........@..X
   145f4:	c7c4a5c0 2482c3e4 45cb3802 02e00080     .......$.8.E....
   14604:	c18085c0 5813a520 c7c4a5c0 d81ec0f1     .... ..X........
   14614:	c0d15a1d 78e07ee0 1600c0f1 00807000     .Z...~.x.....p..
   14624:	00005c68 4d40fc28 49abe200 00011818     h\..(.@M...I....
   14634:	70001600 040400f0 b8c1b83a 70001e00     ...p....:......p
   14644:	02500080 16005b32 00807001 710c5c68     ..P.2[...p..h\.q
   14654:	0fc3190c 710c5b33 712c5b3d 00f040c3     ....3[.q=[,q.@..
   14664:	a0200988 003f236f 4e40fc28 0a8f9a00     .. .o#?.(.@N....
   14674:	18e400aa c0d18040 18f07fe0 78e08040     ....@.......@..x
   14684:	c1a4c3e6 003f276f 003f236f 70801600     ....o'?.o#?....p
   14694:	5aa30080 0030088b 45cb70ed 040400f0     ...Z..0..p.E....
   146a4:	087f8500 bf91047e 003b5a8e 4f40fc28     ....~....Z;.(.@O
   146b4:	0c238500 46cbe81a 00000010 004040c3     ..#....F.....@@.
   146c4:	086b10b4 208a03a5 85200008 210478fb     ..k.... .. ..x.!
   146d4:	f402800d 47cb5a22 00000012 0007c641     ...."Z.G....A...
   146e4:	c6010000 13e50e43 c381c282 00e140c1     ....C........@..
   146f4:	5040fc28 2f89ed00 5a864121 c602e899     (.@P.../!A.Z....
   14704:	744cc083 0f6e0c4e 4e984e9c 0c46c080     ..LtN.n..N.N..F.
   14714:	744c0f6e 30801401 825108d5 30801402     n.Lt...0..Q....0
   14724:	8ed108cd 30801403 5a7660d8 ed835ae7     .......0.`vZ.Z..
   14734:	003a5a21 5140fc28 8528f400 0d8e0f06     !Z:.(.@Q..(.....
   14744:	5a37702c 0d8e0f32 c0e678e0 008041c3     ,p7Z2....x...A..
   14754:	11000268 daff00c0 f6857714 0432080b     h........w....2.
   14764:	da0f4200 1600a940 00807003 700c5c68     .B..@....p..h\.p
   14774:	71cd7f4d 008a8bab 5240fc28 8c3fd600     M..q....(.@R..?.
   14784:	702c8b3e 00000007 081f7104 0cfd0345     >.,p.....q..E...
   14794:	631a902e 00c21204 90a20ff1 10022e00     ...c............
   147a4:	7945792f ab2cf1f2 0000c4c6 00400588     /yEy..,.......@.
   147b4:	02402026 00000001 00000000 533bfc28     & @.........(.;S
   147c4:	ce7cd000 06cc0062 00000040 00000000     ..|.b...@.......
   147d4:	00000000 11c40000 00000040 00000000     ........@.......
   147e4:	00000000 4e490000 00000249 ffbc0060     ......INI...`...
   147f4:	0000ffff 00000000 00000000 00000000     ................

00014804 <calc128Zeros>:
	...
   14814:	685f6d61 635f6c61 65676b6c 79735f6e     am_hal_clkgen_sy
   14824:	6b6c6373 6c65735f 28746365 69203a29     sclk_select(): i
   14834:	6c61766e 63206469 6b636f6c 74657320     nvalid clock set
   14844:	676e6974 0000002e 2e5c2e2e 6d615c2e     ting......\..\am
   14854:	6c61685f 6b6c635f 2e6e6567 00000063     _hal_clkgen.c...
   14864:	6d695443 69207265 7265746e 74707572     CTimer interrupt
   14874:	6d756e20 20726562 2074756f 7220666f      number out of r
   14884:	65676e61 0000002e 2e5c2e2e 6d615c2e     ange......\..\am
   14894:	6c61685f 6974635f 2e72656d 00000063     _hal_ctimer.c...
   148a4:	20646142 4d495443 72205245 00646165     Bad CTIMER read.
   148b4:	20656854 6f666966 756f6320 276e646c     The fifo couldn'
   148c4:	69662074 68742074 65722065 73657571     t fit the reques
   148d4:	20646574 626d756e 6f207265 79622066     ted number of by
   148e4:	00736574 2e5c2e2e 6d615c2e 6c61685f     tes...\..\am_hal
   148f4:	6d6f695f 0000632e 20656854 6f666966     _iom.c..The fifo
   14904:	656f6420 74276e73 6e6f6320 6e696174      doesn't contain
   14914:	65687420 71657220 74736575 6e206465      the requested n
   14924:	65626d75 666f2072 74796220 002e7365     umber of bytes..
   14934:	69797254 7420676e 6964206f 6c626173     Trying to disabl
   14944:	6e612065 4d4f4920 646f6d20 20656c75     e an IOM module 
   14954:	74616874 656f6420 74276e73 69786520     that doesn't exi
   14964:	002e7473 69797254 7420676e 6e65206f     st..Trying to en
   14974:	656c6261 206e6120 204d4f49 75646f6d     able an IOM modu
   14984:	7420656c 20746168 73656f64 2074276e     le that doesn't 
   14994:	73697865 00002e74 69797254 7420676e     exist...Trying t
   149a4:	6f64206f 30206120 74796220 72742065     o do a 0 byte tr
   149b4:	61736e61 6f697463 0000006e 20495053     ansaction...SPI 
   149c4:	6e617274 72656673 6f6f7420 67696220     transfer too big
   149d4:	0000002e 61766e49 2064696c 46206948     ....Invalid Hi F
   149e4:	75716572 79636e65 726f6620 4d4f4920     requency for IOM
   149f4:	0000002e 6e6e6143 6520746f 6c62616e     ....Cannot enabl
   14a04:	6f6d2065 74206572 206e6168 20656e6f     e more than one 
   14a14:	69726570 72656870 61206c61 20612074     peripheral at a 
   14a24:	656d6974 0000002e 2e5c2e2e 6d615c2e     time......\..\am
   14a34:	6c61685f 7277705f 6c727463 0000632e     _hal_pwrctrl.c..
   14a44:	5f495041 52494150 5145525f 49504100     API_PAIR_REQ.API
   14a54:	4e41435f 5f4c4543 00514552 5f495041     _CANCEL_REQ.API_
   14a64:	48545541 5053525f 49504100 4345535f     AUTH_RSP.API_SEC
   14a74:	54495255 45525f59 4d430051 4b505f44     URITY_REQ.CMD_PK
   14a84:	4d430054 41505f44 4e495249 41465f47     T.CMD_PAIRING_FA
   14a94:	44454c49 5f4d4400 52434e45 5f545059     ILED.DM_ENCRYPT_
   14aa4:	4c504d43 5f4d4400 52434e45 5f545059     CMPL.DM_ENCRYPT_
   14ab4:	4c494146 44004445 4f435f4d 435f4e4e     FAILED.DM_CONN_C
   14ac4:	45534f4c 46535700 5345415f 504d435f     LOSE.WSF_AES_CMP
   14ad4:	4e49004c 45535f54 4e5f444e 5f545845     L.INT_SEND_NEXT_
   14ae4:	0059454b 5f544e49 5f58414d 45545441     KEY.INT_MAX_ATTE
   14af4:	5354504d 544e4900 4941505f 474e4952     MPTS.INT_PAIRING
   14b04:	504d435f 4e49004c 49545f54 554f454d     _CMPL.INT_TIMEOU
   14b14:	4e490054 454c5f54 49004353 4c5f544e     T.INT_LESC.INT_L
   14b24:	43414745 4e490059 574a5f54 00434e5f     EGACY.INT_JW_NC.
   14b34:	5f544e49 53534150 0059454b 5f544e49     INT_PASSKEY.INT_
   14b44:	00424f4f 5f495041 52455355 4e4f435f     OOB.API_USER_CON
   14b54:	4d524946 49504100 4553555f 454b5f52     FIRM.API_USER_KE
   14b64:	45525059 41005353 4b5f4950 52505945     YPRESS.API_KEYPR
   14b74:	5f535345 4c504d43 46535700 4343455f     ESS_CMPL.WSF_ECC
   14b84:	504d435f 4e49004c 4b505f54 58454e5f     _CMPL.INT_PK_NEX
   14b94:	4e490054 4b505f54 504d435f 5357004c     T.INT_PK_CMPL.WS
   14ba4:	4d435f46 435f4341 004c504d 435f4844     F_CMAC_CMPL.DH_C
   14bb4:	4b434548 4941465f 4552554c 555f4900     HECK_FAILURE.I_U
   14bc4:	6f6e6b6e 49006e77 4c44495f 5f490045     nknown.I_IDLE.I_
   14bd4:	45444f4d 4c45535f 00544345 454c5f49     MODE_SELECT.I_LE
   14be4:	505f4353 49004e49 4255505f 59454b5f     SC_PIN.I_PUB_KEY
   14bf4:	415f4900 5f485455 454c4553 49005443     .I_AUTH_SELECT.I
   14c04:	4e574a5f 41575f43 435f5449 4900464e     _JWNC_WAIT_CNF.I
   14c14:	4e574a5f 41525f43 4900444e 4e574a5f     _JWNC_RAND.I_JWN
   14c24:	48435f43 5f4b4345 5f490031 434e574a     C_CHECK_1.I_JWNC
   14c34:	4548435f 325f4b43 4a5f4900 5f434e57     _CHECK_2.I_JWNC_
   14c44:	54494157 4553555f 5f490052 4b5f4b50     WAIT_USER.I_PK_K
   14c54:	52505945 00535345 4b505f49 4c41435f     EYPRESS.I_PK_CAL
   14c64:	5f490043 435f4b50 4900464e 5f4b505f     C.I_PK_CNF.I_PK_
   14c74:	444e4152 505f4900 48435f4b 004b4345     RAND.I_PK_CHECK.
   14c84:	4b505f49 5045525f 00544145 4f4f5f49     I_PK_REPEAT.I_OO
   14c94:	45535f42 525f444e 00444e41 4f4f5f49     B_SEND_RAND.I_OO
   14ca4:	41575f42 525f5449 00444e41 41435f49     B_WAIT_RAND.I_CA
   14cb4:	465f434c 4b545f35 49005945 4c41435f     LC_F5_TKEY.I_CAL
   14cc4:	35465f43 43414d5f 0059454b 41435f49     C_F5_MACKEY.I_CA
   14cd4:	465f434c 544c5f35 5f49004b 434c4143     LC_F5_LTK.I_CALC
   14ce4:	5f36465f 49004145 4c41435f 36465f43     _F6_EA.I_CALC_F6
   14cf4:	0042455f 45565f49 59464952 5f48445f     _EB.I_VERIFY_DH_
   14d04:	43454843 5f49004b 4147454c 505f5943     CHECK.I_LEGACY_P
   14d14:	49004e49 464e435f 4c41435f 00315f43     IN.I_CNF_CALC_1.
   14d24:	4e435f49 41435f46 325f434c 505f4900     I_CNF_CALC_2.I_P
   14d34:	5f524941 00464e43 41505f49 525f5249     AIR_CNF.I_PAIR_R
   14d44:	00444e41 4e435f49 45565f46 41435f52     AND.I_CNF_VER_CA
   14d54:	315f434c 435f4900 565f464e 435f5245     LC_1.I_CNF_VER_C
   14d64:	5f434c41 5f490032 5f4b5453 434c4143     ALC_2.I_STK_CALC
   14d74:	455f4900 5952434e 49005450 59454b5f     .I_ENCRYPT.I_KEY
   14d84:	5349445f 5f490054 45545441 5354504d     _DIST.I_ATTEMPTS
   14d94:	555f5200 6f6e6b6e 52006e77 4c44495f     .R_Unknown.R_IDL
   14da4:	5f520045 5f495041 52494150 5053525f     E.R_API_PAIR_RSP
   14db4:	4d5f5200 5f45444f 454c4553 52005443     .R_MODE_SELECT.R
   14dc4:	4255505f 59454b5f 415f5200 5f485455     _PUB_KEY.R_AUTH_
   14dd4:	454c4553 52005443 4e574a5f 45535f43     SELECT.R_JWNC_SE
   14de4:	00505554 574a5f52 575f434e 5f544941     TUP.R_JWNC_WAIT_
   14df4:	444e4152 4a5f5200 5f434e57 434c4143     RAND.R_JWNC_CALC
   14e04:	0032475f 574a5f52 575f434e 5f544941     _G2.R_JWNC_WAIT_
   14e14:	52455355 505f5200 454b5f4b 45525059     USER.R_PK_KEYPRE
   14e24:	52005353 5f4b505f 54494157 464e435f     SS.R_PK_WAIT_CNF
   14e34:	505f5200 41435f4b 5200434c 5f4b505f     .R_PK_CALC.R_PK_
   14e44:	444e4152 505f5200 48435f4b 004b4345     RAND.R_PK_CHECK.
   14e54:	4b505f52 5045525f 00544145 4f4f5f52     R_PK_REPEAT.R_OO
   14e64:	45535f42 525f444e 00444e41 4f4f5f52     B_SEND_RAND.R_OO
   14e74:	41575f42 525f5449 00444e41 41575f52     B_WAIT_RAND.R_WA
   14e84:	445f5449 48435f48 004b4345 41435f52     IT_DH_CHECK.R_CA
   14e94:	465f434c 4b545f35 52005945 4c41435f     LC_F5_TKEY.R_CAL
   14ea4:	35465f43 43414d5f 0059454b 41435f52     C_F5_MACKEY.R_CA
   14eb4:	465f434c 544c5f35 5f52004b 434c4143     LC_F5_LTK.R_CALC
   14ec4:	5f36465f 52004145 4c41435f 36465f43     _F6_EA.R_CALC_F6
   14ed4:	0042455f 49505f52 41505f4e 315f5249     _EB.R_PIN_PAIR_1
   14ee4:	505f5200 505f4e49 5f524941 5f520032     .R_PIN_PAIR_2.R_
   14ef4:	5f464e43 434c4143 5200315f 464e435f     CNF_CALC_1.R_CNF
   14f04:	4c41435f 00325f43 41505f52 525f5249     _CALC_2.R_PAIR_R
   14f14:	00444e41 4e435f52 45565f46 41435f52     AND.R_CNF_VER_CA
   14f24:	315f434c 435f5200 565f464e 435f5245     LC_1.R_CNF_VER_C
   14f34:	5f434c41 5f520032 5f4b5453 434c4143     ALC_2.R_STK_CALC
   14f44:	455f5200 5952434e 52005450 59454b5f     .R_ENCRYPT.R_KEY
   14f54:	5349445f 5f520054 45545441 5354504d     _DIST.R_ATTEMPTS
   14f64:	00000000                                ....
