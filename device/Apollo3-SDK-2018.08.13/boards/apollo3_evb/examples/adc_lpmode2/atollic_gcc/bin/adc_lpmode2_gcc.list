
adc_lpmode2_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce4  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000ece4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000154  10001028  0000ed0c  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   00026bce  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000344f  00000000  00000000  00037c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000800  00000000  00000000  0003b07c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000013e0  00000000  00000000  0003b87c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006124  00000000  00000000  0003cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000c07e  00000000  00000000  00042d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004edfe  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017b8  00000000  00000000  0004ee7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006799  00000000  00000000  00050634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 d9 c4 00 00 41 c5 00 00 89 c5 00 00     ........A.......
    c010:	89 c5 00 00 89 c5 00 00 89 c5 00 00 00 00 00 00     ................
	...
    c02c:	47 c5 00 00 47 c5 00 00 00 00 00 00 47 c5 00 00     G...G.......G...
    c03c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c04c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c05c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c06c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 dd c1 00 00     G...G...G.......
    c07c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 fd c1 00 00     G...G...G.......
    c08c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c09c:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c0ac:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c0bc:	47 c5 00 00 47 c5 00 00 47 c5 00 00 47 c5 00 00     G...G...G...G...
    c0cc:	47 c5 00 00                                         G...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <am_ctimer_isr>:
// Interrupt handler for the CTIMER
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	af00      	add	r7, sp, #0
  //
  // Clear TimerA0 Interrupt.
  //
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c1e0:	2001      	movs	r0, #1
    c1e2:	f001 fc93 	bl	db0c <am_hal_ctimer_int_clear>
  //
  // Re-configure the ADC. We lose configuation data in the power-down, so
  // we'll reconfigure the ADC here. If you don't shut down the ADC, this
  // step is unnecessary.
  //
  adc_config();
    c1e6:	f000 f85f 	bl	c2a8 <adc_config>

  //
  // Trigger the ADC
  //
  am_hal_adc_sw_trigger(g_ADCHandle);
    c1ea:	4b03      	ldr	r3, [pc, #12]	; (c1f8 <am_ctimer_isr+0x1c>)
    c1ec:	681b      	ldr	r3, [r3, #0]
    c1ee:	4618      	mov	r0, r3
    c1f0:	f001 fabe 	bl	d770 <am_hal_adc_sw_trigger>
}
    c1f4:	bf00      	nop
    c1f6:	bd80      	pop	{r7, pc}
    c1f8:	10001028 	.word	0x10001028

0000c1fc <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b084      	sub	sp, #16
    c200:	af00      	add	r7, sp, #0
  am_hal_adc_sample_t Sample;

  //
  // Read the interrupt status.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c202:	4b1f      	ldr	r3, [pc, #124]	; (c280 <am_adc_isr+0x84>)
    c204:	681b      	ldr	r3, [r3, #0]
    c206:	f107 010c 	add.w	r1, r7, #12
    c20a:	2200      	movs	r2, #0
    c20c:	4618      	mov	r0, r3
    c20e:	f001 fa39 	bl	d684 <am_hal_adc_interrupt_status>
    c212:	4603      	mov	r3, r0
    c214:	2b00      	cmp	r3, #0
    c216:	d002      	beq.n	c21e <am_adc_isr+0x22>
  {
    am_util_stdio_printf("Error reading ADC interrupt status\n");
    c218:	481a      	ldr	r0, [pc, #104]	; (c284 <am_adc_isr+0x88>)
    c21a:	f001 f8b9 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Clear the ADC interrupt.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c21e:	4b18      	ldr	r3, [pc, #96]	; (c280 <am_adc_isr+0x84>)
    c220:	681b      	ldr	r3, [r3, #0]
    c222:	68fa      	ldr	r2, [r7, #12]
    c224:	4611      	mov	r1, r2
    c226:	4618      	mov	r0, r3
    c228:	f001 fa4a 	bl	d6c0 <am_hal_adc_interrupt_clear>
    c22c:	4603      	mov	r3, r0
    c22e:	2b00      	cmp	r3, #0
    c230:	d002      	beq.n	c238 <am_adc_isr+0x3c>
  {
    am_util_stdio_printf("Error clearing ADC interrupt status\n");
    c232:	4815      	ldr	r0, [pc, #84]	; (c288 <am_adc_isr+0x8c>)
    c234:	f001 f8ac 	bl	d390 <am_util_stdio_printf>
  }
  //
  // If we got a conversion completion interrupt (which should be our only
  // ADC interrupt), go ahead and read the data.
  //
  if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    c238:	68fb      	ldr	r3, [r7, #12]
    c23a:	f003 0301 	and.w	r3, r3, #1
    c23e:	2b00      	cmp	r3, #0
    c240:	d018      	beq.n	c274 <am_adc_isr+0x78>
  {
    uint32_t    ui32NumSamples = 1;
    c242:	2301      	movs	r3, #1
    c244:	603b      	str	r3, [r7, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    c246:	4b0e      	ldr	r3, [pc, #56]	; (c280 <am_adc_isr+0x84>)
    c248:	6818      	ldr	r0, [r3, #0]
    c24a:	1d3b      	adds	r3, r7, #4
    c24c:	463a      	mov	r2, r7
    c24e:	2100      	movs	r1, #0
    c250:	f001 fa48 	bl	d6e4 <am_hal_adc_samples_read>
    c254:	4603      	mov	r3, r0
    c256:	2b00      	cmp	r3, #0
    c258:	d002      	beq.n	c260 <am_adc_isr+0x64>
                                                         NULL,
                                                         &ui32NumSamples,
                                                         &Sample))
    {
      am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    c25a:	480c      	ldr	r0, [pc, #48]	; (c28c <am_adc_isr+0x90>)
    c25c:	f001 f898 	bl	d390 <am_util_stdio_printf>
    }

#if (1 == ADC_EXAMPLE_DEBUG)
    am_util_stdio_printf("ADC Slot =  %d\n", Sample.ui32Slot);
    c260:	68bb      	ldr	r3, [r7, #8]
    c262:	4619      	mov	r1, r3
    c264:	480a      	ldr	r0, [pc, #40]	; (c290 <am_adc_isr+0x94>)
    c266:	f001 f893 	bl	d390 <am_util_stdio_printf>
    am_util_stdio_printf("ADC Value = %8.8X\n", Sample.ui32Sample);
    c26a:	687b      	ldr	r3, [r7, #4]
    c26c:	4619      	mov	r1, r3
    c26e:	4809      	ldr	r0, [pc, #36]	; (c294 <am_adc_isr+0x98>)
    c270:	f001 f88e 	bl	d390 <am_util_stdio_printf>
#endif
  }

  adc_deconfig();
    c274:	f000 f886 	bl	c384 <adc_deconfig>

}
    c278:	bf00      	nop
    c27a:	3710      	adds	r7, #16
    c27c:	46bd      	mov	sp, r7
    c27e:	bd80      	pop	{r7, pc}
    c280:	10001028 	.word	0x10001028
    c284:	0000e5c8 	.word	0x0000e5c8
    c288:	0000e5ec 	.word	0x0000e5ec
    c28c:	0000e614 	.word	0x0000e614
    c290:	0000e640 	.word	0x0000e640
    c294:	0000e650 	.word	0x0000e650

0000c298 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c298:	b580      	push	{r7, lr}
    c29a:	af00      	add	r7, sp, #0
#endif

  //
  // Go to Deep Sleep.
  //
  am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c29c:	2001      	movs	r0, #1
    c29e:	f002 f91d 	bl	e4dc <am_hal_sysctrl_sleep>
  // Re-enable peripherals for run mode.
  //
#if (0 == ADC_EXAMPLE_DEBUG)
  am_bsp_debug_printf_enable();
#endif
}
    c2a2:	bf00      	nop
    c2a4:	bd80      	pop	{r7, pc}
	...

0000c2a8 <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
    c2a8:	b580      	push	{r7, lr}
    c2aa:	b084      	sub	sp, #16
    c2ac:	af00      	add	r7, sp, #0
  am_hal_adc_slot_config_t      ADCSlotConfig;

  //
  // Initialize the ADC and get the handle.
  //
  if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2ae:	492f      	ldr	r1, [pc, #188]	; (c36c <adc_config+0xc4>)
    c2b0:	2000      	movs	r0, #0
    c2b2:	f001 f8e7 	bl	d484 <am_hal_adc_initialize>
    c2b6:	4603      	mov	r3, r0
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d002      	beq.n	c2c2 <adc_config+0x1a>
  {
    am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c2bc:	482c      	ldr	r0, [pc, #176]	; (c370 <adc_config+0xc8>)
    c2be:	f001 f867 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Power on the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2c2:	4b2a      	ldr	r3, [pc, #168]	; (c36c <adc_config+0xc4>)
    c2c4:	681b      	ldr	r3, [r3, #0]
    c2c6:	2200      	movs	r2, #0
    c2c8:	2100      	movs	r1, #0
    c2ca:	4618      	mov	r0, r3
    c2cc:	f001 fa62 	bl	d794 <am_hal_adc_power_control>
    c2d0:	4603      	mov	r3, r0
    c2d2:	2b00      	cmp	r3, #0
    c2d4:	d002      	beq.n	c2dc <adc_config+0x34>
                                                        AM_HAL_SYSCTRL_WAKE,
                                                        false) )
  {
    am_util_stdio_printf("Error - ADC power on failed.\n");
    c2d6:	4827      	ldr	r0, [pc, #156]	; (c374 <adc_config+0xcc>)
    c2d8:	f001 f85a 	bl	d390 <am_util_stdio_printf>

  //
  // Set up the ADC configuration parameters. These settings are reasonable
  // for accurate measurements at a low sample rate.
  //
  ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    c2dc:	2301      	movs	r3, #1
    c2de:	723b      	strb	r3, [r7, #8]
  ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2e0:	2300      	movs	r3, #0
    c2e2:	727b      	strb	r3, [r7, #9]
  ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c2e4:	2307      	movs	r3, #7
    c2e6:	72bb      	strb	r3, [r7, #10]
  ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    c2e8:	2300      	movs	r3, #0
    c2ea:	72fb      	strb	r3, [r7, #11]
  ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    c2ec:	2300      	movs	r3, #0
    c2ee:	733b      	strb	r3, [r7, #12]
  ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c2f0:	2300      	movs	r3, #0
    c2f2:	737b      	strb	r3, [r7, #13]
  ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c2f4:	2301      	movs	r3, #1
    c2f6:	73bb      	strb	r3, [r7, #14]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c2f8:	4b1c      	ldr	r3, [pc, #112]	; (c36c <adc_config+0xc4>)
    c2fa:	681b      	ldr	r3, [r3, #0]
    c2fc:	f107 0208 	add.w	r2, r7, #8
    c300:	4611      	mov	r1, r2
    c302:	4618      	mov	r0, r3
    c304:	f001 f902 	bl	d50c <am_hal_adc_configure>
    c308:	4603      	mov	r3, r0
    c30a:	2b00      	cmp	r3, #0
    c30c:	d002      	beq.n	c314 <adc_config+0x6c>
  {
    am_util_stdio_printf("Error - configuring ADC failed.\n");
    c30e:	481a      	ldr	r0, [pc, #104]	; (c378 <adc_config+0xd0>)
    c310:	f001 f83e 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Set up an ADC slot
  //
  ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    c314:	2300      	movs	r3, #0
    c316:	703b      	strb	r3, [r7, #0]
  ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c318:	2300      	movs	r3, #0
    c31a:	707b      	strb	r3, [r7, #1]
  ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    c31c:	2300      	movs	r3, #0
    c31e:	70bb      	strb	r3, [r7, #2]
  ADCSlotConfig.bWindowCompare  = false;
    c320:	2300      	movs	r3, #0
    c322:	70fb      	strb	r3, [r7, #3]
  ADCSlotConfig.bEnabled        = true;
    c324:	2301      	movs	r3, #1
    c326:	713b      	strb	r3, [r7, #4]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c328:	4b10      	ldr	r3, [pc, #64]	; (c36c <adc_config+0xc4>)
    c32a:	681b      	ldr	r3, [r3, #0]
    c32c:	463a      	mov	r2, r7
    c32e:	2100      	movs	r1, #0
    c330:	4618      	mov	r0, r3
    c332:	f001 f927 	bl	d584 <am_hal_adc_configure_slot>
    c336:	4603      	mov	r3, r0
    c338:	2b00      	cmp	r3, #0
    c33a:	d002      	beq.n	c342 <adc_config+0x9a>
  {
    am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    c33c:	480f      	ldr	r0, [pc, #60]	; (c37c <adc_config+0xd4>)
    c33e:	f001 f827 	bl	d390 <am_util_stdio_printf>

  //
  // For this example, the samples will be coming in slowly. This means we
  // can afford to wake up for every conversion.
  //
  am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    c342:	4b0a      	ldr	r3, [pc, #40]	; (c36c <adc_config+0xc4>)
    c344:	681b      	ldr	r3, [r3, #0]
    c346:	2101      	movs	r1, #1
    c348:	4618      	mov	r0, r3
    c34a:	f001 f985 	bl	d658 <am_hal_adc_interrupt_enable>

  //
  // Enable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c34e:	4b07      	ldr	r3, [pc, #28]	; (c36c <adc_config+0xc4>)
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	4618      	mov	r0, r3
    c354:	f001 f94a 	bl	d5ec <am_hal_adc_enable>
    c358:	4603      	mov	r3, r0
    c35a:	2b00      	cmp	r3, #0
    c35c:	d002      	beq.n	c364 <adc_config+0xbc>
  {
    am_util_stdio_printf("Error - enabling ADC failed.\n");
    c35e:	4808      	ldr	r0, [pc, #32]	; (c380 <adc_config+0xd8>)
    c360:	f001 f816 	bl	d390 <am_util_stdio_printf>
  }
}
    c364:	bf00      	nop
    c366:	3710      	adds	r7, #16
    c368:	46bd      	mov	sp, r7
    c36a:	bd80      	pop	{r7, pc}
    c36c:	10001028 	.word	0x10001028
    c370:	0000e664 	.word	0x0000e664
    c374:	0000e698 	.word	0x0000e698
    c378:	0000e6b8 	.word	0x0000e6b8
    c37c:	0000e6dc 	.word	0x0000e6dc
    c380:	0000e704 	.word	0x0000e704

0000c384 <adc_deconfig>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_deconfig(void)
{
    c384:	b580      	push	{r7, lr}
    c386:	af00      	add	r7, sp, #0
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    c388:	4b10      	ldr	r3, [pc, #64]	; (c3cc <adc_deconfig+0x48>)
    c38a:	681b      	ldr	r3, [r3, #0]
    c38c:	4618      	mov	r0, r3
    c38e:	f001 f94b 	bl	d628 <am_hal_adc_disable>
    c392:	4603      	mov	r3, r0
    c394:	2b00      	cmp	r3, #0
    c396:	d002      	beq.n	c39e <adc_deconfig+0x1a>
  {
    am_util_stdio_printf("Error - disable ADC failed.\n");
    c398:	480d      	ldr	r0, [pc, #52]	; (c3d0 <adc_deconfig+0x4c>)
    c39a:	f000 fff9 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    c39e:	200a      	movs	r0, #10
    c3a0:	f001 ffd4 	bl	e34c <am_hal_pwrctrl_periph_disable>
    c3a4:	4603      	mov	r3, r0
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d002      	beq.n	c3b0 <adc_deconfig+0x2c>
  {
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    c3aa:	480a      	ldr	r0, [pc, #40]	; (c3d4 <adc_deconfig+0x50>)
    c3ac:	f000 fff0 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    c3b0:	4b06      	ldr	r3, [pc, #24]	; (c3cc <adc_deconfig+0x48>)
    c3b2:	681b      	ldr	r3, [r3, #0]
    c3b4:	4618      	mov	r0, r3
    c3b6:	f001 f887 	bl	d4c8 <am_hal_adc_deinitialize>
    c3ba:	4603      	mov	r3, r0
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d002      	beq.n	c3c6 <adc_deconfig+0x42>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    c3c0:	4805      	ldr	r0, [pc, #20]	; (c3d8 <adc_deconfig+0x54>)
    c3c2:	f000 ffe5 	bl	d390 <am_util_stdio_printf>
  }

}
    c3c6:	bf00      	nop
    c3c8:	bd80      	pop	{r7, pc}
    c3ca:	bf00      	nop
    c3cc:	10001028 	.word	0x10001028
    c3d0:	0000e724 	.word	0x0000e724
    c3d4:	0000e744 	.word	0x0000e744
    c3d8:	0000e774 	.word	0x0000e774

0000c3dc <init_timerA1_for_ADC>:
// Start sampling
//
//*****************************************************************************
void
init_timerA1_for_ADC(void)
{
    c3dc:	b580      	push	{r7, lr}
    c3de:	af00      	add	r7, sp, #0
  // Start a timer to trigger the ADC periodically. This timer won't actually
  // be connected to the ADC (as can be done with Timer 3). Instead, we'll
  // generate interrupts to the CPU, and then use the CPU to trigger the ADC
  // in the CTIMER interrupt handler.
  //
  am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    c3e0:	f44f 7215 	mov.w	r2, #596	; 0x254
    c3e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3e8:	2000      	movs	r0, #0
    c3ea:	f001 fae9 	bl	d9c0 <am_hal_ctimer_config_single>
                              AM_HAL_CTIMER_LFRC_512HZ |
                                AM_HAL_CTIMER_FN_REPEAT |
                                  AM_HAL_CTIMER_INT_ENABLE);

  am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c3ee:	2001      	movs	r0, #1
    c3f0:	f001 fb78 	bl	dae4 <am_hal_ctimer_int_enable>

  am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 511, 0);
    c3f4:	2300      	movs	r3, #0
    c3f6:	f240 12ff 	movw	r2, #511	; 0x1ff
    c3fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3fe:	2000      	movs	r0, #0
    c400:	f001 fb16 	bl	da30 <am_hal_ctimer_period_set>


  //
  // Start the timer.
  //
  am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c404:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c408:	2000      	movs	r0, #0
    c40a:	f001 faf9 	bl	da00 <am_hal_ctimer_start>
}
    c40e:	bf00      	nop
    c410:	bd80      	pop	{r7, pc}
	...

0000c414 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c414:	b580      	push	{r7, lr}
    c416:	af00      	add	r7, sp, #0
  //
  // Set the clock frequency.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c418:	2100      	movs	r1, #0
    c41a:	2000      	movs	r0, #0
    c41c:	f001 fa56 	bl	d8cc <am_hal_clkgen_control>
    c420:	4603      	mov	r3, r0
    c422:	2b00      	cmp	r3, #0
    c424:	d002      	beq.n	c42c <main+0x18>
  {
    am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c426:	4824      	ldr	r0, [pc, #144]	; (c4b8 <main+0xa4>)
    c428:	f000 ffb2 	bl	d390 <am_util_stdio_printf>


  //
  // Set the default cache configuration and enable it.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c42c:	4823      	ldr	r0, [pc, #140]	; (c4bc <main+0xa8>)
    c42e:	f001 fa19 	bl	d864 <am_hal_cachectrl_config>
    c432:	4603      	mov	r3, r0
    c434:	2b00      	cmp	r3, #0
    c436:	d002      	beq.n	c43e <main+0x2a>
  {
    am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c438:	4821      	ldr	r0, [pc, #132]	; (c4c0 <main+0xac>)
    c43a:	f000 ffa9 	bl	d390 <am_util_stdio_printf>
  }
  if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c43e:	f001 fa3b 	bl	d8b8 <am_hal_cachectrl_enable>
    c442:	4603      	mov	r3, r0
    c444:	2b00      	cmp	r3, #0
    c446:	d002      	beq.n	c44e <main+0x3a>
  {
    am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c448:	481e      	ldr	r0, [pc, #120]	; (c4c4 <main+0xb0>)
    c44a:	f000 ffa1 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Configure the board for low power operation.
  //
  am_bsp_low_power_init();
    c44e:	f000 ffc7 	bl	d3e0 <am_bsp_low_power_init>

  //
  // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K))
    c452:	200e      	movs	r0, #14
    c454:	f001 ffa6 	bl	e3a4 <am_hal_pwrctrl_memory_enable>
    c458:	4603      	mov	r3, r0
    c45a:	2b00      	cmp	r3, #0
    c45c:	d002      	beq.n	c464 <main+0x50>
  {
    am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c45e:	481a      	ldr	r0, [pc, #104]	; (c4c8 <main+0xb4>)
    c460:	f000 ff96 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Enable the first 32K of TCM SRAM.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c464:	2002      	movs	r0, #2
    c466:	f001 ff9d 	bl	e3a4 <am_hal_pwrctrl_memory_enable>
    c46a:	4603      	mov	r3, r0
    c46c:	2b00      	cmp	r3, #0
    c46e:	d002      	beq.n	c476 <main+0x62>
  {
    am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c470:	4816      	ldr	r0, [pc, #88]	; (c4cc <main+0xb8>)
    c472:	f000 ff8d 	bl	d390 <am_util_stdio_printf>
  }

  //
  // Start the ITM interface.
  //
  am_bsp_itm_printf_enable();
    c476:	f000 ffe5 	bl	d444 <am_bsp_itm_printf_enable>

  //
  // Set a pin to act as our ADC input
  //
    am_hal_gpio_pinconfig(16, g_AM_PIN_16_ADCSE0);
    c47a:	4b15      	ldr	r3, [pc, #84]	; (c4d0 <main+0xbc>)
    c47c:	6819      	ldr	r1, [r3, #0]
    c47e:	2010      	movs	r0, #16
    c480:	f001 fc84 	bl	dd8c <am_hal_gpio_pinconfig>

  //
  // Start the timer-based ADC measurements.
  //
  init_timerA1_for_ADC();
    c484:	f7ff ffaa 	bl	c3dc <init_timerA1_for_ADC>

  //
  // Print the banner.
  //
  am_util_stdio_terminal_clear();
    c488:	f000 ffa0 	bl	d3cc <am_util_stdio_terminal_clear>
  am_util_stdio_printf("ADC Example at 1Hz with ADC disabled between samples\n");
    c48c:	4811      	ldr	r0, [pc, #68]	; (c4d4 <main+0xc0>)
    c48e:	f000 ff7f 	bl	d390 <am_util_stdio_printf>

  //
  // Allow time for all printing to finish.
  //
  am_util_delay_ms(10);
    c492:	200a      	movs	r0, #10
    c494:	f000 f85a 	bl	c54c <am_util_delay_ms>

  //
  // Enable interrupts.
  //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(ADC_IRQn);
    c498:	2012      	movs	r0, #18
    c49a:	f7ff fe81 	bl	c1a0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    c49e:	200e      	movs	r0, #14
    c4a0:	f7ff fe7e 	bl	c1a0 <__NVIC_EnableIRQ>
#else // AM_CMSIS_REGS
  am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
  am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
#endif // AM_CMSIS_REGS

  am_hal_interrupt_master_enable();
    c4a4:	f001 fdf8 	bl	e098 <am_hal_interrupt_master_enable>
  while(1)
  {
    //
    // Disable interrupts
    //
    am_hal_interrupt_master_disable();
    c4a8:	f001 fdfa 	bl	e0a0 <am_hal_interrupt_master_disable>

    //
    // Put the core to sleep.
    //
    sleep();
    c4ac:	f7ff fef4 	bl	c298 <sleep>

    //
    // Enable interrupts.
    //
    am_hal_interrupt_master_enable();
    c4b0:	f001 fdf2 	bl	e098 <am_hal_interrupt_master_enable>
    am_hal_interrupt_master_disable();
    c4b4:	e7f8      	b.n	c4a8 <main+0x94>
    c4b6:	bf00      	nop
    c4b8:	0000e7a0 	.word	0x0000e7a0
    c4bc:	0000e8d8 	.word	0x0000e8d8
    c4c0:	0000e7d0 	.word	0x0000e7d0
    c4c4:	0000e800 	.word	0x0000e800
    c4c8:	0000e82c 	.word	0x0000e82c
    c4cc:	0000e85c 	.word	0x0000e85c
    c4d0:	0000e8d0 	.word	0x0000e8d0
    c4d4:	0000e884 	.word	0x0000e884

0000c4d8 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c4d8:	4811      	ldr	r0, [pc, #68]	; (c520 <zero_loop+0x12>)
    c4da:	4912      	ldr	r1, [pc, #72]	; (c524 <zero_loop+0x16>)
    c4dc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c4de:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c4e2:	4811      	ldr	r0, [pc, #68]	; (c528 <zero_loop+0x1a>)
    c4e4:	6801      	ldr	r1, [r0, #0]
    c4e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c4ea:	6001      	str	r1, [r0, #0]
    c4ec:	f3bf 8f4f 	dsb	sy
    c4f0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c4f4:	480d      	ldr	r0, [pc, #52]	; (c52c <zero_loop+0x1e>)
    c4f6:	490e      	ldr	r1, [pc, #56]	; (c530 <zero_loop+0x22>)
    c4f8:	4a0e      	ldr	r2, [pc, #56]	; (c534 <zero_loop+0x26>)

0000c4fa <copy_loop>:
    c4fa:	f850 3b04 	ldr.w	r3, [r0], #4
    c4fe:	f841 3b04 	str.w	r3, [r1], #4
    c502:	4291      	cmp	r1, r2
    c504:	dbf9      	blt.n	c4fa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c506:	480c      	ldr	r0, [pc, #48]	; (c538 <zero_loop+0x2a>)
    c508:	490c      	ldr	r1, [pc, #48]	; (c53c <zero_loop+0x2e>)
    c50a:	f04f 0200 	mov.w	r2, #0

0000c50e <zero_loop>:
    c50e:	4288      	cmp	r0, r1
    c510:	bfb8      	it	lt
    c512:	f840 2b04 	strlt.w	r2, [r0], #4
    c516:	dbfa      	blt.n	c50e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c518:	f7ff ff7c 	bl	c414 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c51c:	be00      	bkpt	0x0000
}
    c51e:	bf00      	nop
    c520:	e000ed08 	.word	0xe000ed08
    c524:	0000c000 	.word	0x0000c000
    c528:	e000ed88 	.word	0xe000ed88
    c52c:	0000ece4 	.word	0x0000ece4
    c530:	10001000 	.word	0x10001000
    c534:	10001028 	.word	0x10001028
    c538:	10001028 	.word	0x10001028
    c53c:	1000117c 	.word	0x1000117c

0000c540 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c540:	b480      	push	{r7}
    c542:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c544:	e7fe      	b.n	c544 <NMI_Handler+0x4>

0000c546 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c546:	b480      	push	{r7}
    c548:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c54a:	e7fe      	b.n	c54a <DebugMon_Handler+0x4>

0000c54c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c54c:	b580      	push	{r7, lr}
    c54e:	b088      	sub	sp, #32
    c550:	af00      	add	r7, sp, #0
    c552:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c554:	f107 030c 	add.w	r3, r7, #12
    c558:	4618      	mov	r0, r3
    c55a:	f001 fa13 	bl	d984 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c55e:	68fb      	ldr	r3, [r7, #12]
    c560:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c562:	69fb      	ldr	r3, [r7, #28]
    c564:	4a07      	ldr	r2, [pc, #28]	; (c584 <am_util_delay_ms+0x38>)
    c566:	fba2 2303 	umull	r2, r3, r2, r3
    c56a:	099b      	lsrs	r3, r3, #6
    c56c:	687a      	ldr	r2, [r7, #4]
    c56e:	fb02 f303 	mul.w	r3, r2, r3
    c572:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c574:	69b8      	ldr	r0, [r7, #24]
    c576:	f001 fad9 	bl	db2c <am_hal_flash_delay>
}
    c57a:	bf00      	nop
    c57c:	3720      	adds	r7, #32
    c57e:	46bd      	mov	sp, r7
    c580:	bd80      	pop	{r7, pc}
    c582:	bf00      	nop
    c584:	057619f1 	.word	0x057619f1

0000c588 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c588:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c58a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c58c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c58e:	f000 f809 	bl	c5a4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c592:	bd01      	pop	{r0, pc}
}
    c594:	bf00      	nop
    c596:	4618      	mov	r0, r3

0000c598 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c598:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c59a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c59c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c59e:	4770      	bx	lr
}
    c5a0:	bf00      	nop
    c5a2:	4618      	mov	r0, r3

0000c5a4 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c5a4:	b580      	push	{r7, lr}
    c5a6:	b096      	sub	sp, #88	; 0x58
    c5a8:	af00      	add	r7, sp, #0
    c5aa:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c5ac:	f107 030c 	add.w	r3, r7, #12
    c5b0:	2200      	movs	r2, #0
    c5b2:	601a      	str	r2, [r3, #0]
    c5b4:	605a      	str	r2, [r3, #4]
    c5b6:	609a      	str	r2, [r3, #8]
    c5b8:	60da      	str	r2, [r3, #12]
    c5ba:	611a      	str	r2, [r3, #16]
    c5bc:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c5be:	2300      	movs	r3, #0
    c5c0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c5c6:	4b2e      	ldr	r3, [pc, #184]	; (c680 <am_util_faultisr_collect_data+0xdc>)
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5ce:	b2db      	uxtb	r3, r3
    c5d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5d6:	0a1b      	lsrs	r3, r3, #8
    c5d8:	b2db      	uxtb	r3, r3
    c5da:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5e0:	0c1b      	lsrs	r3, r3, #16
    c5e2:	b29b      	uxth	r3, r3
    c5e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c5e8:	4b26      	ldr	r3, [pc, #152]	; (c684 <am_util_faultisr_collect_data+0xe0>)
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c5ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c5f2:	b2db      	uxtb	r3, r3
    c5f4:	f003 0302 	and.w	r3, r3, #2
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d005      	beq.n	c608 <am_util_faultisr_collect_data+0x64>
    c5fc:	6879      	ldr	r1, [r7, #4]
    c5fe:	2006      	movs	r0, #6
    c600:	f7ff ffca 	bl	c598 <getStackedReg>
    c604:	4603      	mov	r3, r0
    c606:	e001      	b.n	c60c <am_util_faultisr_collect_data+0x68>
    c608:	f04f 33ff 	mov.w	r3, #4294967295
    c60c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c60e:	6879      	ldr	r1, [r7, #4]
    c610:	2000      	movs	r0, #0
    c612:	f7ff ffc1 	bl	c598 <getStackedReg>
    c616:	4603      	mov	r3, r0
    c618:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c61a:	6879      	ldr	r1, [r7, #4]
    c61c:	2001      	movs	r0, #1
    c61e:	f7ff ffbb 	bl	c598 <getStackedReg>
    c622:	4603      	mov	r3, r0
    c624:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c626:	6879      	ldr	r1, [r7, #4]
    c628:	2002      	movs	r0, #2
    c62a:	f7ff ffb5 	bl	c598 <getStackedReg>
    c62e:	4603      	mov	r3, r0
    c630:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c632:	6879      	ldr	r1, [r7, #4]
    c634:	2003      	movs	r0, #3
    c636:	f7ff ffaf 	bl	c598 <getStackedReg>
    c63a:	4603      	mov	r3, r0
    c63c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c63e:	6879      	ldr	r1, [r7, #4]
    c640:	2004      	movs	r0, #4
    c642:	f7ff ffa9 	bl	c598 <getStackedReg>
    c646:	4603      	mov	r3, r0
    c648:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c64a:	6879      	ldr	r1, [r7, #4]
    c64c:	2005      	movs	r0, #5
    c64e:	f7ff ffa3 	bl	c598 <getStackedReg>
    c652:	4603      	mov	r3, r0
    c654:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c656:	6879      	ldr	r1, [r7, #4]
    c658:	2006      	movs	r0, #6
    c65a:	f7ff ff9d 	bl	c598 <getStackedReg>
    c65e:	4603      	mov	r3, r0
    c660:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c662:	6879      	ldr	r1, [r7, #4]
    c664:	2007      	movs	r0, #7
    c666:	f7ff ff97 	bl	c598 <getStackedReg>
    c66a:	4603      	mov	r3, r0
    c66c:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c66e:	f107 030c 	add.w	r3, r7, #12
    c672:	4619      	mov	r1, r3
    c674:	2002      	movs	r0, #2
    c676:	f001 fda7 	bl	e1c8 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c67a:	2300      	movs	r3, #0
    c67c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c67e:	e7fe      	b.n	c67e <am_util_faultisr_collect_data+0xda>
    c680:	e000ed28 	.word	0xe000ed28
    c684:	e000ed38 	.word	0xe000ed38

0000c688 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c688:	b480      	push	{r7}
    c68a:	b083      	sub	sp, #12
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c690:	4a04      	ldr	r2, [pc, #16]	; (c6a4 <am_util_stdio_printf_init+0x1c>)
    c692:	687b      	ldr	r3, [r7, #4]
    c694:	6013      	str	r3, [r2, #0]
}
    c696:	bf00      	nop
    c698:	370c      	adds	r7, #12
    c69a:	46bd      	mov	sp, r7
    c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6a0:	4770      	bx	lr
    c6a2:	bf00      	nop
    c6a4:	10001134 	.word	0x10001134

0000c6a8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c6a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6ac:	b096      	sub	sp, #88	; 0x58
    c6ae:	af00      	add	r7, sp, #0
    c6b0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c6b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6b8:	0025      	movs	r5, r4
    c6ba:	2600      	movs	r6, #0
    c6bc:	ea55 0306 	orrs.w	r3, r5, r6
    c6c0:	f000 80a0 	beq.w	c804 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6c8:	0862      	lsrs	r2, r4, #1
    c6ca:	ea4f 0133 	mov.w	r1, r3, rrx
    c6ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6d2:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c6d6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c6da:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c6de:	eb11 0308 	adds.w	r3, r1, r8
    c6e2:	eb42 0409 	adc.w	r4, r2, r9
    c6e6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c6ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6ee:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c6f2:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c6f6:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c6fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6fe:	eb13 030a 	adds.w	r3, r3, sl
    c702:	eb44 040b 	adc.w	r4, r4, fp
    c706:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c70a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c70e:	0a1a      	lsrs	r2, r3, #8
    c710:	62ba      	str	r2, [r7, #40]	; 0x28
    c712:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c714:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c718:	62ba      	str	r2, [r7, #40]	; 0x28
    c71a:	0a23      	lsrs	r3, r4, #8
    c71c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c71e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c722:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c726:	18c9      	adds	r1, r1, r3
    c728:	eb42 0204 	adc.w	r2, r2, r4
    c72c:	460b      	mov	r3, r1
    c72e:	4614      	mov	r4, r2
    c730:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c734:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c738:	0c1a      	lsrs	r2, r3, #16
    c73a:	623a      	str	r2, [r7, #32]
    c73c:	6a3a      	ldr	r2, [r7, #32]
    c73e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c742:	623a      	str	r2, [r7, #32]
    c744:	0c23      	lsrs	r3, r4, #16
    c746:	627b      	str	r3, [r7, #36]	; 0x24
    c748:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c74c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c750:	18c9      	adds	r1, r1, r3
    c752:	eb42 0204 	adc.w	r2, r2, r4
    c756:	460b      	mov	r3, r1
    c758:	4614      	mov	r4, r2
    c75a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c75e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c762:	0023      	movs	r3, r4
    c764:	603b      	str	r3, [r7, #0]
    c766:	2300      	movs	r3, #0
    c768:	607b      	str	r3, [r7, #4]
    c76a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c76e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c772:	18c9      	adds	r1, r1, r3
    c774:	eb42 0204 	adc.w	r2, r2, r4
    c778:	460b      	mov	r3, r1
    c77a:	4614      	mov	r4, r2
    c77c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c780:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c784:	08da      	lsrs	r2, r3, #3
    c786:	613a      	str	r2, [r7, #16]
    c788:	693a      	ldr	r2, [r7, #16]
    c78a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c78e:	613a      	str	r2, [r7, #16]
    c790:	08e3      	lsrs	r3, r4, #3
    c792:	617b      	str	r3, [r7, #20]
    c794:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c798:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c79c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c7a0:	460b      	mov	r3, r1
    c7a2:	4614      	mov	r4, r2
    c7a4:	00a0      	lsls	r0, r4, #2
    c7a6:	60f8      	str	r0, [r7, #12]
    c7a8:	68f8      	ldr	r0, [r7, #12]
    c7aa:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c7ae:	60f8      	str	r0, [r7, #12]
    c7b0:	009b      	lsls	r3, r3, #2
    c7b2:	60bb      	str	r3, [r7, #8]
    c7b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c7b8:	185b      	adds	r3, r3, r1
    c7ba:	eb44 0402 	adc.w	r4, r4, r2
    c7be:	18db      	adds	r3, r3, r3
    c7c0:	eb44 0404 	adc.w	r4, r4, r4
    c7c4:	4619      	mov	r1, r3
    c7c6:	4622      	mov	r2, r4
    c7c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c7cc:	1a5b      	subs	r3, r3, r1
    c7ce:	eb64 0402 	sbc.w	r4, r4, r2
    c7d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c7d6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c7da:	3306      	adds	r3, #6
    c7dc:	f144 0400 	adc.w	r4, r4, #0
    c7e0:	091a      	lsrs	r2, r3, #4
    c7e2:	61ba      	str	r2, [r7, #24]
    c7e4:	69ba      	ldr	r2, [r7, #24]
    c7e6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c7ea:	61ba      	str	r2, [r7, #24]
    c7ec:	0923      	lsrs	r3, r4, #4
    c7ee:	61fb      	str	r3, [r7, #28]
    c7f0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c7f8:	18c9      	adds	r1, r1, r3
    c7fa:	eb42 0204 	adc.w	r2, r2, r4
    c7fe:	460b      	mov	r3, r1
    c800:	4614      	mov	r4, r2
    c802:	e029      	b.n	c858 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c806:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c80a:	085a      	lsrs	r2, r3, #1
    c80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c80e:	089b      	lsrs	r3, r3, #2
    c810:	4413      	add	r3, r2
    c812:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c816:	091b      	lsrs	r3, r3, #4
    c818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c81a:	4413      	add	r3, r2
    c81c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c820:	0a1b      	lsrs	r3, r3, #8
    c822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c824:	4413      	add	r3, r2
    c826:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c82a:	0c1b      	lsrs	r3, r3, #16
    c82c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c82e:	4413      	add	r3, r2
    c830:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c834:	08db      	lsrs	r3, r3, #3
    c836:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c83a:	4613      	mov	r3, r2
    c83c:	009b      	lsls	r3, r3, #2
    c83e:	4413      	add	r3, r2
    c840:	005b      	lsls	r3, r3, #1
    c842:	461a      	mov	r2, r3
    c844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c846:	1a9b      	subs	r3, r3, r2
    c848:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c84c:	3306      	adds	r3, #6
    c84e:	091a      	lsrs	r2, r3, #4
    c850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c852:	4413      	add	r3, r2
    c854:	f04f 0400 	mov.w	r4, #0
    }
}
    c858:	4618      	mov	r0, r3
    c85a:	4621      	mov	r1, r4
    c85c:	3758      	adds	r7, #88	; 0x58
    c85e:	46bd      	mov	sp, r7
    c860:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c864:	4770      	bx	lr

0000c866 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c866:	b590      	push	{r4, r7, lr}
    c868:	b085      	sub	sp, #20
    c86a:	af00      	add	r7, sp, #0
    c86c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c870:	683a      	ldr	r2, [r7, #0]
    c872:	687b      	ldr	r3, [r7, #4]
    c874:	4313      	orrs	r3, r2
    c876:	2b00      	cmp	r3, #0
    c878:	bf0c      	ite	eq
    c87a:	2301      	moveq	r3, #1
    c87c:	2300      	movne	r3, #0
    c87e:	b2db      	uxtb	r3, r3
    c880:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c882:	e008      	b.n	c896 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c884:	e9d7 0100 	ldrd	r0, r1, [r7]
    c888:	f7ff ff0e 	bl	c6a8 <divu64_10>
    c88c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c890:	68fb      	ldr	r3, [r7, #12]
    c892:	3301      	adds	r3, #1
    c894:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c896:	e897 0018 	ldmia.w	r7, {r3, r4}
    c89a:	4323      	orrs	r3, r4
    c89c:	d1f2      	bne.n	c884 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c89e:	68fb      	ldr	r3, [r7, #12]
}
    c8a0:	4618      	mov	r0, r3
    c8a2:	3714      	adds	r7, #20
    c8a4:	46bd      	mov	sp, r7
    c8a6:	bd90      	pop	{r4, r7, pc}

0000c8a8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c8a8:	b590      	push	{r4, r7, lr}
    c8aa:	b083      	sub	sp, #12
    c8ac:	af00      	add	r7, sp, #0
    c8ae:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c8b2:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	f174 0300 	sbcs.w	r3, r4, #0
    c8bc:	da06      	bge.n	c8cc <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8be:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8c2:	425b      	negs	r3, r3
    c8c4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c8c8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c8cc:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8d0:	4618      	mov	r0, r3
    c8d2:	4621      	mov	r1, r4
    c8d4:	f7ff ffc7 	bl	c866 <ndigits_in_u64>
    c8d8:	4603      	mov	r3, r0
}
    c8da:	4618      	mov	r0, r3
    c8dc:	370c      	adds	r7, #12
    c8de:	46bd      	mov	sp, r7
    c8e0:	bd90      	pop	{r4, r7, pc}

0000c8e2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c8e2:	b490      	push	{r4, r7}
    c8e4:	b084      	sub	sp, #16
    c8e6:	af00      	add	r7, sp, #0
    c8e8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c8ec:	6839      	ldr	r1, [r7, #0]
    c8ee:	687a      	ldr	r2, [r7, #4]
    c8f0:	430a      	orrs	r2, r1
    c8f2:	2a00      	cmp	r2, #0
    c8f4:	bf0c      	ite	eq
    c8f6:	2201      	moveq	r2, #1
    c8f8:	2200      	movne	r2, #0
    c8fa:	b2d2      	uxtb	r2, r2
    c8fc:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c8fe:	e00a      	b.n	c916 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c900:	e897 0006 	ldmia.w	r7, {r1, r2}
    c904:	090b      	lsrs	r3, r1, #4
    c906:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c90a:	0914      	lsrs	r4, r2, #4
    c90c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c910:	68fa      	ldr	r2, [r7, #12]
    c912:	3201      	adds	r2, #1
    c914:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c916:	e897 0006 	ldmia.w	r7, {r1, r2}
    c91a:	430a      	orrs	r2, r1
    c91c:	d1f0      	bne.n	c900 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c91e:	68fb      	ldr	r3, [r7, #12]
}
    c920:	4618      	mov	r0, r3
    c922:	3710      	adds	r7, #16
    c924:	46bd      	mov	sp, r7
    c926:	bc90      	pop	{r4, r7}
    c928:	4770      	bx	lr

0000c92a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c92a:	b480      	push	{r7}
    c92c:	b087      	sub	sp, #28
    c92e:	af00      	add	r7, sp, #0
    c930:	6078      	str	r0, [r7, #4]
    c932:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c934:	2300      	movs	r3, #0
    c936:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c938:	2300      	movs	r3, #0
    c93a:	613b      	str	r3, [r7, #16]
    c93c:	2300      	movs	r3, #0
    c93e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c940:	687b      	ldr	r3, [r7, #4]
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	2b2d      	cmp	r3, #45	; 0x2d
    c946:	d11b      	bne.n	c980 <decstr_to_int+0x56>
    {
        bNeg = true;
    c948:	2301      	movs	r3, #1
    c94a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c94c:	687b      	ldr	r3, [r7, #4]
    c94e:	3301      	adds	r3, #1
    c950:	607b      	str	r3, [r7, #4]
        uCnt++;
    c952:	68fb      	ldr	r3, [r7, #12]
    c954:	3301      	adds	r3, #1
    c956:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c958:	e012      	b.n	c980 <decstr_to_int+0x56>
    {
        ++uCnt;
    c95a:	68fb      	ldr	r3, [r7, #12]
    c95c:	3301      	adds	r3, #1
    c95e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c960:	693a      	ldr	r2, [r7, #16]
    c962:	4613      	mov	r3, r2
    c964:	009b      	lsls	r3, r3, #2
    c966:	4413      	add	r3, r2
    c968:	005b      	lsls	r3, r3, #1
    c96a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	461a      	mov	r2, r3
    c972:	693b      	ldr	r3, [r7, #16]
    c974:	4413      	add	r3, r2
    c976:	3b30      	subs	r3, #48	; 0x30
    c978:	613b      	str	r3, [r7, #16]
        pcStr++;
    c97a:	687b      	ldr	r3, [r7, #4]
    c97c:	3301      	adds	r3, #1
    c97e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	781b      	ldrb	r3, [r3, #0]
    c984:	2b2f      	cmp	r3, #47	; 0x2f
    c986:	d903      	bls.n	c990 <decstr_to_int+0x66>
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	781b      	ldrb	r3, [r3, #0]
    c98c:	2b39      	cmp	r3, #57	; 0x39
    c98e:	d9e4      	bls.n	c95a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c990:	683b      	ldr	r3, [r7, #0]
    c992:	2b00      	cmp	r3, #0
    c994:	d002      	beq.n	c99c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c996:	683b      	ldr	r3, [r7, #0]
    c998:	68fa      	ldr	r2, [r7, #12]
    c99a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c99c:	7dfb      	ldrb	r3, [r7, #23]
    c99e:	2b00      	cmp	r3, #0
    c9a0:	d002      	beq.n	c9a8 <decstr_to_int+0x7e>
    c9a2:	693b      	ldr	r3, [r7, #16]
    c9a4:	425b      	negs	r3, r3
    c9a6:	e000      	b.n	c9aa <decstr_to_int+0x80>
    c9a8:	693b      	ldr	r3, [r7, #16]
}
    c9aa:	4618      	mov	r0, r3
    c9ac:	371c      	adds	r7, #28
    c9ae:	46bd      	mov	sp, r7
    c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9b4:	4770      	bx	lr

0000c9b6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c9b6:	b590      	push	{r4, r7, lr}
    c9b8:	b091      	sub	sp, #68	; 0x44
    c9ba:	af00      	add	r7, sp, #0
    c9bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c9c0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9c2:	2300      	movs	r3, #0
    c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c9c6:	2300      	movs	r3, #0
    c9c8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c9ce:	f7ff fe6b 	bl	c6a8 <divu64_10>
    c9d2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c9d6:	68b9      	ldr	r1, [r7, #8]
    c9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c9da:	4613      	mov	r3, r2
    c9dc:	009b      	lsls	r3, r3, #2
    c9de:	4413      	add	r3, r2
    c9e0:	005b      	lsls	r3, r3, #1
    c9e2:	1acb      	subs	r3, r1, r3
    c9e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9e8:	1c5a      	adds	r2, r3, #1
    c9ea:	63fa      	str	r2, [r7, #60]	; 0x3c
    c9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c9ee:	b2d2      	uxtb	r2, r2
    c9f0:	3230      	adds	r2, #48	; 0x30
    c9f2:	b2d2      	uxtb	r2, r2
    c9f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c9f8:	440b      	add	r3, r1
    c9fa:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c9fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    ca02:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    ca06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    ca0a:	4323      	orrs	r3, r4
    ca0c:	d1dd      	bne.n	c9ca <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca10:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca12:	687b      	ldr	r3, [r7, #4]
    ca14:	2b00      	cmp	r3, #0
    ca16:	d011      	beq.n	ca3c <uint64_to_str+0x86>
    {
        while ( ix-- )
    ca18:	e008      	b.n	ca2c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	1c5a      	adds	r2, r3, #1
    ca1e:	607a      	str	r2, [r7, #4]
    ca20:	f107 0110 	add.w	r1, r7, #16
    ca24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ca26:	440a      	add	r2, r1
    ca28:	7812      	ldrb	r2, [r2, #0]
    ca2a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca2e:	1e5a      	subs	r2, r3, #1
    ca30:	63fa      	str	r2, [r7, #60]	; 0x3c
    ca32:	2b00      	cmp	r3, #0
    ca34:	d1f1      	bne.n	ca1a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	2200      	movs	r2, #0
    ca3a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    ca3e:	4618      	mov	r0, r3
    ca40:	3744      	adds	r7, #68	; 0x44
    ca42:	46bd      	mov	sp, r7
    ca44:	bd90      	pop	{r4, r7, pc}

0000ca46 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca46:	b4b0      	push	{r4, r5, r7}
    ca48:	b08d      	sub	sp, #52	; 0x34
    ca4a:	af00      	add	r7, sp, #0
    ca4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    ca50:	607a      	str	r2, [r7, #4]
    ca52:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    ca54:	2300      	movs	r3, #0
    ca56:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca5c:	4313      	orrs	r3, r2
    ca5e:	d131      	bne.n	cac4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca62:	1c5a      	adds	r2, r3, #1
    ca64:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca66:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ca6a:	4413      	add	r3, r2
    ca6c:	2230      	movs	r2, #48	; 0x30
    ca6e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca72:	e027      	b.n	cac4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    ca74:	7a3b      	ldrb	r3, [r7, #8]
    ca76:	f003 030f 	and.w	r3, r3, #15
    ca7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    ca7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ca82:	2b09      	cmp	r3, #9
    ca84:	d90a      	bls.n	ca9c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca86:	78fb      	ldrb	r3, [r7, #3]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d001      	beq.n	ca90 <uint64_to_hexstr+0x4a>
    ca8c:	2227      	movs	r2, #39	; 0x27
    ca8e:	e000      	b.n	ca92 <uint64_to_hexstr+0x4c>
    ca90:	2207      	movs	r2, #7
    ca92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ca96:	4413      	add	r3, r2
    ca98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca9e:	1c5a      	adds	r2, r3, #1
    caa0:	62fa      	str	r2, [r7, #44]	; 0x2c
    caa2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    caa6:	3230      	adds	r2, #48	; 0x30
    caa8:	b2d2      	uxtb	r2, r2
    caaa:	f107 0130 	add.w	r1, r7, #48	; 0x30
    caae:	440b      	add	r3, r1
    cab0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cab8:	0914      	lsrs	r4, r2, #4
    caba:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cabe:	091d      	lsrs	r5, r3, #4
    cac0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cac8:	4313      	orrs	r3, r2
    caca:	d1d3      	bne.n	ca74 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cace:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d011      	beq.n	cafa <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cad6:	e008      	b.n	caea <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cad8:	687b      	ldr	r3, [r7, #4]
    cada:	1c5a      	adds	r2, r3, #1
    cadc:	607a      	str	r2, [r7, #4]
    cade:	f107 0110 	add.w	r1, r7, #16
    cae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cae4:	440a      	add	r2, r1
    cae6:	7812      	ldrb	r2, [r2, #0]
    cae8:	701a      	strb	r2, [r3, #0]
        while (ix--)
    caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caec:	1e5a      	subs	r2, r3, #1
    caee:	62fa      	str	r2, [r7, #44]	; 0x2c
    caf0:	2b00      	cmp	r3, #0
    caf2:	d1f1      	bne.n	cad8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	2200      	movs	r2, #0
    caf8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cafc:	4618      	mov	r0, r3
    cafe:	3734      	adds	r7, #52	; 0x34
    cb00:	46bd      	mov	sp, r7
    cb02:	bcb0      	pop	{r4, r5, r7}
    cb04:	4770      	bx	lr

0000cb06 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb06:	b480      	push	{r7}
    cb08:	b085      	sub	sp, #20
    cb0a:	af00      	add	r7, sp, #0
    cb0c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cb0e:	2300      	movs	r3, #0
    cb10:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d104      	bne.n	cb22 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cb18:	68fb      	ldr	r3, [r7, #12]
    cb1a:	e009      	b.n	cb30 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cb1c:	68fb      	ldr	r3, [r7, #12]
    cb1e:	3301      	adds	r3, #1
    cb20:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	1c5a      	adds	r2, r3, #1
    cb26:	607a      	str	r2, [r7, #4]
    cb28:	781b      	ldrb	r3, [r3, #0]
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	d1f6      	bne.n	cb1c <simple_strlen+0x16>
    }
    return ui32RetVal;
    cb2e:	68fb      	ldr	r3, [r7, #12]
}
    cb30:	4618      	mov	r0, r3
    cb32:	3714      	adds	r7, #20
    cb34:	46bd      	mov	sp, r7
    cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb3a:	4770      	bx	lr

0000cb3c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb3c:	b480      	push	{r7}
    cb3e:	b087      	sub	sp, #28
    cb40:	af00      	add	r7, sp, #0
    cb42:	60f8      	str	r0, [r7, #12]
    cb44:	460b      	mov	r3, r1
    cb46:	607a      	str	r2, [r7, #4]
    cb48:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cb4a:	2300      	movs	r3, #0
    cb4c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cb4e:	687b      	ldr	r3, [r7, #4]
    cb50:	2b00      	cmp	r3, #0
    cb52:	dc0c      	bgt.n	cb6e <padbuffer+0x32>
    {
        return i32Cnt;
    cb54:	697b      	ldr	r3, [r7, #20]
    cb56:	e010      	b.n	cb7a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb58:	68fb      	ldr	r3, [r7, #12]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d004      	beq.n	cb68 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	1c5a      	adds	r2, r3, #1
    cb62:	60fa      	str	r2, [r7, #12]
    cb64:	7afa      	ldrb	r2, [r7, #11]
    cb66:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb68:	697b      	ldr	r3, [r7, #20]
    cb6a:	3301      	adds	r3, #1
    cb6c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cb6e:	687b      	ldr	r3, [r7, #4]
    cb70:	1e5a      	subs	r2, r3, #1
    cb72:	607a      	str	r2, [r7, #4]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d1ef      	bne.n	cb58 <padbuffer+0x1c>
    }

    return i32Cnt;
    cb78:	697b      	ldr	r3, [r7, #20]
}
    cb7a:	4618      	mov	r0, r3
    cb7c:	371c      	adds	r7, #28
    cb7e:	46bd      	mov	sp, r7
    cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb84:	4770      	bx	lr
	...

0000cb88 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb88:	b590      	push	{r4, r7, lr}
    cb8a:	b08f      	sub	sp, #60	; 0x3c
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	60f8      	str	r0, [r7, #12]
    cb90:	60b9      	str	r1, [r7, #8]
    cb92:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb94:	68bb      	ldr	r3, [r7, #8]
    cb96:	681b      	ldr	r3, [r3, #0]
    cb98:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb9c:	2b03      	cmp	r3, #3
    cb9e:	dc02      	bgt.n	cba6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cba0:	f06f 0302 	mvn.w	r3, #2
    cba4:	e0e7      	b.n	cd76 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cba6:	edd7 7a03 	vldr	s15, [r7, #12]
    cbaa:	eef5 7a40 	vcmp.f32	s15, #0.0
    cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbb2:	d104      	bne.n	cbbe <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cbb4:	68bb      	ldr	r3, [r7, #8]
    cbb6:	4a72      	ldr	r2, [pc, #456]	; (cd80 <ftoa+0x1f8>)
    cbb8:	601a      	str	r2, [r3, #0]
        return 3;
    cbba:	2303      	movs	r3, #3
    cbbc:	e0db      	b.n	cd76 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cbbe:	68bb      	ldr	r3, [r7, #8]
    cbc0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cbc2:	68fb      	ldr	r3, [r7, #12]
    cbc4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cbc6:	693b      	ldr	r3, [r7, #16]
    cbc8:	15db      	asrs	r3, r3, #23
    cbca:	b2db      	uxtb	r3, r3
    cbcc:	3b7f      	subs	r3, #127	; 0x7f
    cbce:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbd0:	693b      	ldr	r3, [r7, #16]
    cbd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cbda:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cbdc:	2300      	movs	r3, #0
    cbde:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cbe0:	2300      	movs	r3, #0
    cbe2:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cbe4:	69fb      	ldr	r3, [r7, #28]
    cbe6:	2b1e      	cmp	r3, #30
    cbe8:	dd02      	ble.n	cbf0 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cbea:	f06f 0301 	mvn.w	r3, #1
    cbee:	e0c2      	b.n	cd76 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cbf0:	69fb      	ldr	r3, [r7, #28]
    cbf2:	f113 0f17 	cmn.w	r3, #23
    cbf6:	da02      	bge.n	cbfe <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cbf8:	f04f 33ff 	mov.w	r3, #4294967295
    cbfc:	e0bb      	b.n	cd76 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cbfe:	69fb      	ldr	r3, [r7, #28]
    cc00:	2b16      	cmp	r3, #22
    cc02:	dd06      	ble.n	cc12 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc04:	69fb      	ldr	r3, [r7, #28]
    cc06:	3b17      	subs	r3, #23
    cc08:	69ba      	ldr	r2, [r7, #24]
    cc0a:	fa02 f303 	lsl.w	r3, r2, r3
    cc0e:	637b      	str	r3, [r7, #52]	; 0x34
    cc10:	e01a      	b.n	cc48 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc12:	69fb      	ldr	r3, [r7, #28]
    cc14:	2b00      	cmp	r3, #0
    cc16:	db0f      	blt.n	cc38 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cc18:	69fb      	ldr	r3, [r7, #28]
    cc1a:	f1c3 0317 	rsb	r3, r3, #23
    cc1e:	69ba      	ldr	r2, [r7, #24]
    cc20:	fa42 f303 	asr.w	r3, r2, r3
    cc24:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc26:	69fb      	ldr	r3, [r7, #28]
    cc28:	3301      	adds	r3, #1
    cc2a:	69ba      	ldr	r2, [r7, #24]
    cc2c:	fa02 f303 	lsl.w	r3, r2, r3
    cc30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc34:	633b      	str	r3, [r7, #48]	; 0x30
    cc36:	e007      	b.n	cc48 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc38:	69bb      	ldr	r3, [r7, #24]
    cc3a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc3e:	69fb      	ldr	r3, [r7, #28]
    cc40:	43db      	mvns	r3, r3
    cc42:	fa42 f303 	asr.w	r3, r2, r3
    cc46:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc48:	693b      	ldr	r3, [r7, #16]
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	da04      	bge.n	cc58 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc4e:	68bb      	ldr	r3, [r7, #8]
    cc50:	1c5a      	adds	r2, r3, #1
    cc52:	60ba      	str	r2, [r7, #8]
    cc54:	222d      	movs	r2, #45	; 0x2d
    cc56:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc5a:	2b00      	cmp	r3, #0
    cc5c:	d105      	bne.n	cc6a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc5e:	68bb      	ldr	r3, [r7, #8]
    cc60:	1c5a      	adds	r2, r3, #1
    cc62:	60ba      	str	r2, [r7, #8]
    cc64:	2230      	movs	r2, #48	; 0x30
    cc66:	701a      	strb	r2, [r3, #0]
    cc68:	e021      	b.n	ccae <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	dd08      	ble.n	cc82 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc72:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc76:	68ba      	ldr	r2, [r7, #8]
    cc78:	4618      	mov	r0, r3
    cc7a:	4621      	mov	r1, r4
    cc7c:	f7ff fe9b 	bl	c9b6 <uint64_to_str>
    cc80:	e011      	b.n	cca6 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cc82:	68bb      	ldr	r3, [r7, #8]
    cc84:	1c5a      	adds	r2, r3, #1
    cc86:	60ba      	str	r2, [r7, #8]
    cc88:	222d      	movs	r2, #45	; 0x2d
    cc8a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc8e:	425b      	negs	r3, r3
    cc90:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc94:	68ba      	ldr	r2, [r7, #8]
    cc96:	4618      	mov	r0, r3
    cc98:	4621      	mov	r1, r4
    cc9a:	f7ff fe8c 	bl	c9b6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc9e:	e002      	b.n	cca6 <ftoa+0x11e>
        {
            pcBuf++;
    cca0:	68bb      	ldr	r3, [r7, #8]
    cca2:	3301      	adds	r3, #1
    cca4:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cca6:	68bb      	ldr	r3, [r7, #8]
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d1f8      	bne.n	cca0 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ccae:	68bb      	ldr	r3, [r7, #8]
    ccb0:	1c5a      	adds	r2, r3, #1
    ccb2:	60ba      	str	r2, [r7, #8]
    ccb4:	222e      	movs	r2, #46	; 0x2e
    ccb6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d105      	bne.n	ccca <ftoa+0x142>
    {
        *pcBuf++ = '0';
    ccbe:	68bb      	ldr	r3, [r7, #8]
    ccc0:	1c5a      	adds	r2, r3, #1
    ccc2:	60ba      	str	r2, [r7, #8]
    ccc4:	2230      	movs	r2, #48	; 0x30
    ccc6:	701a      	strb	r2, [r3, #0]
    ccc8:	e04f      	b.n	cd6a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccca:	68ba      	ldr	r2, [r7, #8]
    cccc:	6a3b      	ldr	r3, [r7, #32]
    ccce:	1ad3      	subs	r3, r2, r3
    ccd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ccd2:	1ad3      	subs	r3, r2, r3
    ccd4:	3b01      	subs	r3, #1
    ccd6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ccd8:	697a      	ldr	r2, [r7, #20]
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	4293      	cmp	r3, r2
    ccde:	bfa8      	it	ge
    cce0:	4613      	movge	r3, r2
    cce2:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cce4:	2300      	movs	r3, #0
    cce6:	62bb      	str	r3, [r7, #40]	; 0x28
    cce8:	e015      	b.n	cd16 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    ccea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ccec:	4613      	mov	r3, r2
    ccee:	009b      	lsls	r3, r3, #2
    ccf0:	4413      	add	r3, r2
    ccf2:	005b      	lsls	r3, r3, #1
    ccf4:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ccf6:	68bb      	ldr	r3, [r7, #8]
    ccf8:	1c5a      	adds	r2, r3, #1
    ccfa:	60ba      	str	r2, [r7, #8]
    ccfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ccfe:	1612      	asrs	r2, r2, #24
    cd00:	b2d2      	uxtb	r2, r2
    cd02:	3230      	adds	r2, #48	; 0x30
    cd04:	b2d2      	uxtb	r2, r2
    cd06:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd0e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cd12:	3301      	adds	r3, #1
    cd14:	62bb      	str	r3, [r7, #40]	; 0x28
    cd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd18:	697b      	ldr	r3, [r7, #20]
    cd1a:	429a      	cmp	r2, r3
    cd1c:	dbe5      	blt.n	ccea <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd20:	4613      	mov	r3, r2
    cd22:	009b      	lsls	r3, r3, #2
    cd24:	4413      	add	r3, r2
    cd26:	005b      	lsls	r3, r3, #1
    cd28:	161b      	asrs	r3, r3, #24
    cd2a:	2b04      	cmp	r3, #4
    cd2c:	dd1d      	ble.n	cd6a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd2e:	68bb      	ldr	r3, [r7, #8]
    cd30:	3b01      	subs	r3, #1
    cd32:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd34:	e015      	b.n	cd62 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	2b2e      	cmp	r3, #46	; 0x2e
    cd3c:	d00e      	beq.n	cd5c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd40:	781b      	ldrb	r3, [r3, #0]
    cd42:	2b39      	cmp	r3, #57	; 0x39
    cd44:	d103      	bne.n	cd4e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd48:	2230      	movs	r2, #48	; 0x30
    cd4a:	701a      	strb	r2, [r3, #0]
    cd4c:	e006      	b.n	cd5c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd50:	781b      	ldrb	r3, [r3, #0]
    cd52:	3301      	adds	r3, #1
    cd54:	b2da      	uxtb	r2, r3
    cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd58:	701a      	strb	r2, [r3, #0]
                    break;
    cd5a:	e006      	b.n	cd6a <ftoa+0x1e2>
                }
                pcBuftmp--;
    cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd5e:	3b01      	subs	r3, #1
    cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd64:	6a3b      	ldr	r3, [r7, #32]
    cd66:	429a      	cmp	r2, r3
    cd68:	d2e5      	bcs.n	cd36 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd6a:	68bb      	ldr	r3, [r7, #8]
    cd6c:	2200      	movs	r2, #0
    cd6e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd70:	68ba      	ldr	r2, [r7, #8]
    cd72:	6a3b      	ldr	r3, [r7, #32]
    cd74:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd76:	4618      	mov	r0, r3
    cd78:	373c      	adds	r7, #60	; 0x3c
    cd7a:	46bd      	mov	sp, r7
    cd7c:	bd90      	pop	{r4, r7, pc}
    cd7e:	bf00      	nop
    cd80:	00302e30 	.word	0x00302e30

0000cd84 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd84:	b590      	push	{r4, r7, lr}
    cd86:	b095      	sub	sp, #84	; 0x54
    cd88:	af00      	add	r7, sp, #0
    cd8a:	60f8      	str	r0, [r7, #12]
    cd8c:	60b9      	str	r1, [r7, #8]
    cd8e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd90:	2300      	movs	r3, #0
    cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd94:	2300      	movs	r3, #0
    cd96:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cd98:	e2e3      	b.n	d362 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd9a:	2306      	movs	r3, #6
    cd9c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cd9e:	68bb      	ldr	r3, [r7, #8]
    cda0:	781b      	ldrb	r3, [r3, #0]
    cda2:	2b25      	cmp	r3, #37	; 0x25
    cda4:	d01f      	beq.n	cde6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cda6:	68fb      	ldr	r3, [r7, #12]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d015      	beq.n	cdd8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cdac:	68bb      	ldr	r3, [r7, #8]
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	2b0a      	cmp	r3, #10
    cdb2:	d10b      	bne.n	cdcc <am_util_stdio_vsprintf+0x48>
    cdb4:	4bb1      	ldr	r3, [pc, #708]	; (d07c <am_util_stdio_vsprintf+0x2f8>)
    cdb6:	781b      	ldrb	r3, [r3, #0]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d007      	beq.n	cdcc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cdbc:	68fb      	ldr	r3, [r7, #12]
    cdbe:	1c5a      	adds	r2, r3, #1
    cdc0:	60fa      	str	r2, [r7, #12]
    cdc2:	220d      	movs	r2, #13
    cdc4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdc8:	3301      	adds	r3, #1
    cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cdcc:	68fb      	ldr	r3, [r7, #12]
    cdce:	1c5a      	adds	r2, r3, #1
    cdd0:	60fa      	str	r2, [r7, #12]
    cdd2:	68ba      	ldr	r2, [r7, #8]
    cdd4:	7812      	ldrb	r2, [r2, #0]
    cdd6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cdd8:	68bb      	ldr	r3, [r7, #8]
    cdda:	3301      	adds	r3, #1
    cddc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cde0:	3301      	adds	r3, #1
    cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cde4:	e2bd      	b.n	d362 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cde6:	68bb      	ldr	r3, [r7, #8]
    cde8:	3301      	adds	r3, #1
    cdea:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cdec:	2300      	movs	r3, #0
    cdee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cdf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cdf6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cdfa:	2320      	movs	r3, #32
    cdfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    ce00:	68bb      	ldr	r3, [r7, #8]
    ce02:	781b      	ldrb	r3, [r3, #0]
    ce04:	2b30      	cmp	r3, #48	; 0x30
    ce06:	d105      	bne.n	ce14 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce08:	2330      	movs	r3, #48	; 0x30
    ce0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    ce0e:	68bb      	ldr	r3, [r7, #8]
    ce10:	3301      	adds	r3, #1
    ce12:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce14:	f107 0310 	add.w	r3, r7, #16
    ce18:	4619      	mov	r1, r3
    ce1a:	68b8      	ldr	r0, [r7, #8]
    ce1c:	f7ff fd85 	bl	c92a <decstr_to_int>
    ce20:	4603      	mov	r3, r0
    ce22:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    ce24:	693b      	ldr	r3, [r7, #16]
    ce26:	68ba      	ldr	r2, [r7, #8]
    ce28:	4413      	add	r3, r2
    ce2a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce2c:	68bb      	ldr	r3, [r7, #8]
    ce2e:	781b      	ldrb	r3, [r3, #0]
    ce30:	2b73      	cmp	r3, #115	; 0x73
    ce32:	d005      	beq.n	ce40 <am_util_stdio_vsprintf+0xbc>
    ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce36:	2b00      	cmp	r3, #0
    ce38:	da02      	bge.n	ce40 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce3c:	425b      	negs	r3, r3
    ce3e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce40:	68bb      	ldr	r3, [r7, #8]
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	2b2e      	cmp	r3, #46	; 0x2e
    ce46:	d10e      	bne.n	ce66 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    ce48:	68bb      	ldr	r3, [r7, #8]
    ce4a:	3301      	adds	r3, #1
    ce4c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce4e:	f107 0310 	add.w	r3, r7, #16
    ce52:	4619      	mov	r1, r3
    ce54:	68b8      	ldr	r0, [r7, #8]
    ce56:	f7ff fd68 	bl	c92a <decstr_to_int>
    ce5a:	4603      	mov	r3, r0
    ce5c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    ce5e:	693b      	ldr	r3, [r7, #16]
    ce60:	68ba      	ldr	r2, [r7, #8]
    ce62:	4413      	add	r3, r2
    ce64:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce66:	68bb      	ldr	r3, [r7, #8]
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	2b6c      	cmp	r3, #108	; 0x6c
    ce6c:	d10c      	bne.n	ce88 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	3301      	adds	r3, #1
    ce72:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce74:	68bb      	ldr	r3, [r7, #8]
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	2b6c      	cmp	r3, #108	; 0x6c
    ce7a:	d105      	bne.n	ce88 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    ce7c:	68bb      	ldr	r3, [r7, #8]
    ce7e:	3301      	adds	r3, #1
    ce80:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    ce82:	2301      	movs	r3, #1
    ce84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    ce88:	68bb      	ldr	r3, [r7, #8]
    ce8a:	781b      	ldrb	r3, [r3, #0]
    ce8c:	3b46      	subs	r3, #70	; 0x46
    ce8e:	2b32      	cmp	r3, #50	; 0x32
    ce90:	f200 8254 	bhi.w	d33c <am_util_stdio_vsprintf+0x5b8>
    ce94:	a201      	add	r2, pc, #4	; (adr r2, ce9c <am_util_stdio_vsprintf+0x118>)
    ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce9a:	bf00      	nop
    ce9c:	0000d2c7 	.word	0x0000d2c7
    cea0:	0000d33d 	.word	0x0000d33d
    cea4:	0000d33d 	.word	0x0000d33d
    cea8:	0000d33d 	.word	0x0000d33d
    ceac:	0000d33d 	.word	0x0000d33d
    ceb0:	0000d33d 	.word	0x0000d33d
    ceb4:	0000d33d 	.word	0x0000d33d
    ceb8:	0000d33d 	.word	0x0000d33d
    cebc:	0000d33d 	.word	0x0000d33d
    cec0:	0000d33d 	.word	0x0000d33d
    cec4:	0000d33d 	.word	0x0000d33d
    cec8:	0000d33d 	.word	0x0000d33d
    cecc:	0000d33d 	.word	0x0000d33d
    ced0:	0000d33d 	.word	0x0000d33d
    ced4:	0000d33d 	.word	0x0000d33d
    ced8:	0000d33d 	.word	0x0000d33d
    cedc:	0000d33d 	.word	0x0000d33d
    cee0:	0000d33d 	.word	0x0000d33d
    cee4:	0000d063 	.word	0x0000d063
    cee8:	0000d33d 	.word	0x0000d33d
    ceec:	0000d33d 	.word	0x0000d33d
    cef0:	0000d33d 	.word	0x0000d33d
    cef4:	0000d33d 	.word	0x0000d33d
    cef8:	0000d33d 	.word	0x0000d33d
    cefc:	0000d33d 	.word	0x0000d33d
    cf00:	0000d33d 	.word	0x0000d33d
    cf04:	0000d33d 	.word	0x0000d33d
    cf08:	0000d33d 	.word	0x0000d33d
    cf0c:	0000d33d 	.word	0x0000d33d
    cf10:	0000cf69 	.word	0x0000cf69
    cf14:	0000d18f 	.word	0x0000d18f
    cf18:	0000d33d 	.word	0x0000d33d
    cf1c:	0000d2c7 	.word	0x0000d2c7
    cf20:	0000d33d 	.word	0x0000d33d
    cf24:	0000d33d 	.word	0x0000d33d
    cf28:	0000d18f 	.word	0x0000d18f
    cf2c:	0000d33d 	.word	0x0000d33d
    cf30:	0000d33d 	.word	0x0000d33d
    cf34:	0000d33d 	.word	0x0000d33d
    cf38:	0000d33d 	.word	0x0000d33d
    cf3c:	0000d33d 	.word	0x0000d33d
    cf40:	0000d33d 	.word	0x0000d33d
    cf44:	0000d33d 	.word	0x0000d33d
    cf48:	0000d33d 	.word	0x0000d33d
    cf4c:	0000d33d 	.word	0x0000d33d
    cf50:	0000cf8f 	.word	0x0000cf8f
    cf54:	0000d33d 	.word	0x0000d33d
    cf58:	0000d0fd 	.word	0x0000d0fd
    cf5c:	0000d33d 	.word	0x0000d33d
    cf60:	0000d33d 	.word	0x0000d33d
    cf64:	0000d05d 	.word	0x0000d05d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf68:	687b      	ldr	r3, [r7, #4]
    cf6a:	1d1a      	adds	r2, r3, #4
    cf6c:	607a      	str	r2, [r7, #4]
    cf6e:	681b      	ldr	r3, [r3, #0]
    cf70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d005      	beq.n	cf86 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	1c5a      	adds	r2, r3, #1
    cf7e:	60fa      	str	r2, [r7, #12]
    cf80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cf84:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf88:	3301      	adds	r3, #1
    cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf8c:	e1e6      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf8e:	687b      	ldr	r3, [r7, #4]
    cf90:	1d1a      	adds	r2, r3, #4
    cf92:	607a      	str	r2, [r7, #4]
    cf94:	681b      	ldr	r3, [r3, #0]
    cf96:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cf9a:	f7ff fdb4 	bl	cb06 <simple_strlen>
    cf9e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	dd2e      	ble.n	d004 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cfaa:	429a      	cmp	r2, r3
    cfac:	d22a      	bcs.n	d004 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfae:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfb2:	1ad3      	subs	r3, r2, r3
    cfb4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfba:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfbc:	4619      	mov	r1, r3
    cfbe:	68f8      	ldr	r0, [r7, #12]
    cfc0:	f7ff fdbc 	bl	cb3c <padbuffer>
    cfc4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cfc6:	68fb      	ldr	r3, [r7, #12]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d001      	beq.n	cfd0 <am_util_stdio_vsprintf+0x24c>
    cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfce:	e000      	b.n	cfd2 <am_util_stdio_vsprintf+0x24e>
    cfd0:	2300      	movs	r3, #0
    cfd2:	68fa      	ldr	r2, [r7, #12]
    cfd4:	4413      	add	r3, r2
    cfd6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfdc:	4413      	add	r3, r2
    cfde:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cfe0:	2300      	movs	r3, #0
    cfe2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cfe4:	e00e      	b.n	d004 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cfe6:	68fb      	ldr	r3, [r7, #12]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d005      	beq.n	cff8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cfec:	68fb      	ldr	r3, [r7, #12]
    cfee:	1c5a      	adds	r2, r3, #1
    cff0:	60fa      	str	r2, [r7, #12]
    cff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cff4:	7812      	ldrb	r2, [r2, #0]
    cff6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cffa:	3301      	adds	r3, #1
    cffc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d000:	3301      	adds	r3, #1
    d002:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	2b00      	cmp	r3, #0
    d00a:	d1ec      	bne.n	cfe6 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d00e:	2b00      	cmp	r3, #0
    d010:	f000 81a1 	beq.w	d356 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d016:	425b      	negs	r3, r3
    d018:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d01e:	429a      	cmp	r2, r3
    d020:	f080 8199 	bcs.w	d356 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d024:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d028:	1ad3      	subs	r3, r2, r3
    d02a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d02c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d030:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d032:	4619      	mov	r1, r3
    d034:	68f8      	ldr	r0, [r7, #12]
    d036:	f7ff fd81 	bl	cb3c <padbuffer>
    d03a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d03c:	68fb      	ldr	r3, [r7, #12]
    d03e:	2b00      	cmp	r3, #0
    d040:	d001      	beq.n	d046 <am_util_stdio_vsprintf+0x2c2>
    d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d044:	e000      	b.n	d048 <am_util_stdio_vsprintf+0x2c4>
    d046:	2300      	movs	r3, #0
    d048:	68fa      	ldr	r2, [r7, #12]
    d04a:	4413      	add	r3, r2
    d04c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d052:	4413      	add	r3, r2
    d054:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d056:	2300      	movs	r3, #0
    d058:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d05a:	e17c      	b.n	d356 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d05c:	2301      	movs	r3, #1
    d05e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d066:	2b00      	cmp	r3, #0
    d068:	d00a      	beq.n	d080 <am_util_stdio_vsprintf+0x2fc>
    d06a:	687b      	ldr	r3, [r7, #4]
    d06c:	3307      	adds	r3, #7
    d06e:	f023 0307 	bic.w	r3, r3, #7
    d072:	f103 0208 	add.w	r2, r3, #8
    d076:	607a      	str	r2, [r7, #4]
    d078:	cb18      	ldmia	r3, {r3, r4}
    d07a:	e007      	b.n	d08c <am_util_stdio_vsprintf+0x308>
    d07c:	1000112c 	.word	0x1000112c
                                      va_arg(pArgs, uint32_t);
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	1d1a      	adds	r2, r3, #4
    d084:	607a      	str	r2, [r7, #4]
    d086:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d088:	f04f 0400 	mov.w	r4, #0
    d08c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d092:	2b00      	cmp	r3, #0
    d094:	d01e      	beq.n	d0d4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d09a:	f7ff fc22 	bl	c8e2 <ndigits_in_hex>
    d09e:	4602      	mov	r2, r0
    d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0a2:	1a9b      	subs	r3, r3, r2
    d0a4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ac:	4619      	mov	r1, r3
    d0ae:	68f8      	ldr	r0, [r7, #12]
    d0b0:	f7ff fd44 	bl	cb3c <padbuffer>
    d0b4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d0b6:	68fb      	ldr	r3, [r7, #12]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d001      	beq.n	d0c0 <am_util_stdio_vsprintf+0x33c>
    d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0be:	e000      	b.n	d0c2 <am_util_stdio_vsprintf+0x33e>
    d0c0:	2300      	movs	r3, #0
    d0c2:	68fa      	ldr	r2, [r7, #12]
    d0c4:	4413      	add	r3, r2
    d0c6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0cc:	4413      	add	r3, r2
    d0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0d0:	2300      	movs	r3, #0
    d0d2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d0d8:	68fa      	ldr	r2, [r7, #12]
    d0da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0de:	f7ff fcb2 	bl	ca46 <uint64_to_hexstr>
    d0e2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0e4:	68fb      	ldr	r3, [r7, #12]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d003      	beq.n	d0f2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0ec:	68fa      	ldr	r2, [r7, #12]
    d0ee:	4413      	add	r3, r2
    d0f0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0f6:	4413      	add	r3, r2
    d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0fa:	e12f      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d100:	2b00      	cmp	r3, #0
    d102:	d008      	beq.n	d116 <am_util_stdio_vsprintf+0x392>
    d104:	687b      	ldr	r3, [r7, #4]
    d106:	3307      	adds	r3, #7
    d108:	f023 0307 	bic.w	r3, r3, #7
    d10c:	f103 0208 	add.w	r2, r3, #8
    d110:	607a      	str	r2, [r7, #4]
    d112:	cb18      	ldmia	r3, {r3, r4}
    d114:	e005      	b.n	d122 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d116:	687b      	ldr	r3, [r7, #4]
    d118:	1d1a      	adds	r2, r3, #4
    d11a:	607a      	str	r2, [r7, #4]
    d11c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d11e:	f04f 0400 	mov.w	r4, #0
    d122:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d128:	2b00      	cmp	r3, #0
    d12a:	d01e      	beq.n	d16a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d12c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d130:	f7ff fb99 	bl	c866 <ndigits_in_u64>
    d134:	4602      	mov	r2, r0
    d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d138:	1a9b      	subs	r3, r3, r2
    d13a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d13c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d140:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d142:	4619      	mov	r1, r3
    d144:	68f8      	ldr	r0, [r7, #12]
    d146:	f7ff fcf9 	bl	cb3c <padbuffer>
    d14a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d14c:	68fb      	ldr	r3, [r7, #12]
    d14e:	2b00      	cmp	r3, #0
    d150:	d001      	beq.n	d156 <am_util_stdio_vsprintf+0x3d2>
    d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d154:	e000      	b.n	d158 <am_util_stdio_vsprintf+0x3d4>
    d156:	2300      	movs	r3, #0
    d158:	68fa      	ldr	r2, [r7, #12]
    d15a:	4413      	add	r3, r2
    d15c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d162:	4413      	add	r3, r2
    d164:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d166:	2300      	movs	r3, #0
    d168:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d16a:	68fa      	ldr	r2, [r7, #12]
    d16c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d170:	f7ff fc21 	bl	c9b6 <uint64_to_str>
    d174:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d176:	68fb      	ldr	r3, [r7, #12]
    d178:	2b00      	cmp	r3, #0
    d17a:	d003      	beq.n	d184 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d17e:	68fa      	ldr	r2, [r7, #12]
    d180:	4413      	add	r3, r2
    d182:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d188:	4413      	add	r3, r2
    d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d18c:	e0e6      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d18e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d192:	2b00      	cmp	r3, #0
    d194:	d008      	beq.n	d1a8 <am_util_stdio_vsprintf+0x424>
    d196:	687b      	ldr	r3, [r7, #4]
    d198:	3307      	adds	r3, #7
    d19a:	f023 0307 	bic.w	r3, r3, #7
    d19e:	f103 0208 	add.w	r2, r3, #8
    d1a2:	607a      	str	r2, [r7, #4]
    d1a4:	cb18      	ldmia	r3, {r3, r4}
    d1a6:	e005      	b.n	d1b4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d1a8:	687b      	ldr	r3, [r7, #4]
    d1aa:	1d1a      	adds	r2, r3, #4
    d1ac:	607a      	str	r2, [r7, #4]
    d1ae:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d1b4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d1b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	f174 0300 	sbcs.w	r3, r4, #0
    d1c2:	da0a      	bge.n	d1da <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d1c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1c8:	425b      	negs	r3, r3
    d1ca:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d1ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d1d2:	2301      	movs	r3, #1
    d1d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d1d8:	e006      	b.n	d1e8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d1da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d1e2:	2300      	movs	r3, #0
    d1e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d04a      	beq.n	d284 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d1ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d1f2:	4618      	mov	r0, r3
    d1f4:	4621      	mov	r1, r4
    d1f6:	f7ff fb57 	bl	c8a8 <ndigits_in_i64>
    d1fa:	4602      	mov	r2, r0
    d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1fe:	1a9b      	subs	r3, r3, r2
    d200:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d206:	2b00      	cmp	r3, #0
    d208:	d011      	beq.n	d22e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d20c:	3b01      	subs	r3, #1
    d20e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d214:	2b30      	cmp	r3, #48	; 0x30
    d216:	d10a      	bne.n	d22e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d218:	68fb      	ldr	r3, [r7, #12]
    d21a:	2b00      	cmp	r3, #0
    d21c:	d004      	beq.n	d228 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d21e:	68fb      	ldr	r3, [r7, #12]
    d220:	1c5a      	adds	r2, r3, #1
    d222:	60fa      	str	r2, [r7, #12]
    d224:	222d      	movs	r2, #45	; 0x2d
    d226:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d22a:	3301      	adds	r3, #1
    d22c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d22e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d232:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d234:	4619      	mov	r1, r3
    d236:	68f8      	ldr	r0, [r7, #12]
    d238:	f7ff fc80 	bl	cb3c <padbuffer>
    d23c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d23e:	68fb      	ldr	r3, [r7, #12]
    d240:	2b00      	cmp	r3, #0
    d242:	d001      	beq.n	d248 <am_util_stdio_vsprintf+0x4c4>
    d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d246:	e000      	b.n	d24a <am_util_stdio_vsprintf+0x4c6>
    d248:	2300      	movs	r3, #0
    d24a:	68fa      	ldr	r2, [r7, #12]
    d24c:	4413      	add	r3, r2
    d24e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d254:	4413      	add	r3, r2
    d256:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d258:	2300      	movs	r3, #0
    d25a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d25c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d260:	2b00      	cmp	r3, #0
    d262:	d01e      	beq.n	d2a2 <am_util_stdio_vsprintf+0x51e>
    d264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d268:	2b20      	cmp	r3, #32
    d26a:	d11a      	bne.n	d2a2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d26c:	68fb      	ldr	r3, [r7, #12]
    d26e:	2b00      	cmp	r3, #0
    d270:	d004      	beq.n	d27c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d272:	68fb      	ldr	r3, [r7, #12]
    d274:	1c5a      	adds	r2, r3, #1
    d276:	60fa      	str	r2, [r7, #12]
    d278:	222d      	movs	r2, #45	; 0x2d
    d27a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d27e:	3301      	adds	r3, #1
    d280:	63fb      	str	r3, [r7, #60]	; 0x3c
    d282:	e00e      	b.n	d2a2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d288:	2b00      	cmp	r3, #0
    d28a:	d00a      	beq.n	d2a2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d28c:	68fb      	ldr	r3, [r7, #12]
    d28e:	2b00      	cmp	r3, #0
    d290:	d004      	beq.n	d29c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d292:	68fb      	ldr	r3, [r7, #12]
    d294:	1c5a      	adds	r2, r3, #1
    d296:	60fa      	str	r2, [r7, #12]
    d298:	222d      	movs	r2, #45	; 0x2d
    d29a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d29e:	3301      	adds	r3, #1
    d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2a2:	68fa      	ldr	r2, [r7, #12]
    d2a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2a8:	f7ff fb85 	bl	c9b6 <uint64_to_str>
    d2ac:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d2ae:	68fb      	ldr	r3, [r7, #12]
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d003      	beq.n	d2bc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2b6:	68fa      	ldr	r2, [r7, #12]
    d2b8:	4413      	add	r3, r2
    d2ba:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2c0:	4413      	add	r3, r2
    d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2c4:	e04a      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2c6:	68fb      	ldr	r3, [r7, #12]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d046      	beq.n	d35a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	3307      	adds	r3, #7
    d2d0:	f023 0307 	bic.w	r3, r3, #7
    d2d4:	f103 0208 	add.w	r2, r3, #8
    d2d8:	607a      	str	r2, [r7, #4]
    d2da:	cb18      	ldmia	r3, {r3, r4}
    d2dc:	4618      	mov	r0, r3
    d2de:	4621      	mov	r1, r4
    d2e0:	f7fe ff0e 	bl	c100 <__aeabi_d2f>
    d2e4:	4603      	mov	r3, r0
    d2e6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d2e8:	68fb      	ldr	r3, [r7, #12]
    d2ea:	2214      	movs	r2, #20
    d2ec:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d2f0:	68f9      	ldr	r1, [r7, #12]
    d2f2:	6978      	ldr	r0, [r7, #20]
    d2f4:	f7ff fc48 	bl	cb88 <ftoa>
    d2f8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	da14      	bge.n	d32a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d302:	f1b3 3fff 	cmp.w	r3, #4294967295
    d306:	d102      	bne.n	d30e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d308:	4b1e      	ldr	r3, [pc, #120]	; (d384 <am_util_stdio_vsprintf+0x600>)
    d30a:	62bb      	str	r3, [r7, #40]	; 0x28
    d30c:	e008      	b.n	d320 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d310:	f113 0f02 	cmn.w	r3, #2
    d314:	d102      	bne.n	d31c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d316:	4b1c      	ldr	r3, [pc, #112]	; (d388 <am_util_stdio_vsprintf+0x604>)
    d318:	62bb      	str	r3, [r7, #40]	; 0x28
    d31a:	e001      	b.n	d320 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d31c:	4b1b      	ldr	r3, [pc, #108]	; (d38c <am_util_stdio_vsprintf+0x608>)
    d31e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d320:	68fb      	ldr	r3, [r7, #12]
    d322:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d324:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d326:	2303      	movs	r3, #3
    d328:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d32c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d32e:	4413      	add	r3, r2
    d330:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d334:	68fa      	ldr	r2, [r7, #12]
    d336:	4413      	add	r3, r2
    d338:	60fb      	str	r3, [r7, #12]
                }
                break;
    d33a:	e00e      	b.n	d35a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d33c:	68fb      	ldr	r3, [r7, #12]
    d33e:	2b00      	cmp	r3, #0
    d340:	d005      	beq.n	d34e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d342:	68fb      	ldr	r3, [r7, #12]
    d344:	1c5a      	adds	r2, r3, #1
    d346:	60fa      	str	r2, [r7, #12]
    d348:	68ba      	ldr	r2, [r7, #8]
    d34a:	7812      	ldrb	r2, [r2, #0]
    d34c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d350:	3301      	adds	r3, #1
    d352:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d354:	e002      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>
                break;
    d356:	bf00      	nop
    d358:	e000      	b.n	d35c <am_util_stdio_vsprintf+0x5d8>
                break;
    d35a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d35c:	68bb      	ldr	r3, [r7, #8]
    d35e:	3301      	adds	r3, #1
    d360:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d362:	68bb      	ldr	r3, [r7, #8]
    d364:	781b      	ldrb	r3, [r3, #0]
    d366:	2b00      	cmp	r3, #0
    d368:	f47f ad17 	bne.w	cd9a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d36c:	68fb      	ldr	r3, [r7, #12]
    d36e:	2b00      	cmp	r3, #0
    d370:	d002      	beq.n	d378 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d372:	68fb      	ldr	r3, [r7, #12]
    d374:	2200      	movs	r2, #0
    d376:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d37a:	4618      	mov	r0, r3
    d37c:	3754      	adds	r7, #84	; 0x54
    d37e:	46bd      	mov	sp, r7
    d380:	bd90      	pop	{r4, r7, pc}
    d382:	bf00      	nop
    d384:	00302e30 	.word	0x00302e30
    d388:	00232e23 	.word	0x00232e23
    d38c:	003f2e3f 	.word	0x003f2e3f

0000d390 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d390:	b40f      	push	{r0, r1, r2, r3}
    d392:	b580      	push	{r7, lr}
    d394:	b082      	sub	sp, #8
    d396:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d398:	f107 0314 	add.w	r3, r7, #20
    d39c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d39e:	683a      	ldr	r2, [r7, #0]
    d3a0:	6939      	ldr	r1, [r7, #16]
    d3a2:	4808      	ldr	r0, [pc, #32]	; (d3c4 <am_util_stdio_printf+0x34>)
    d3a4:	f7ff fcee 	bl	cd84 <am_util_stdio_vsprintf>
    d3a8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3aa:	4b07      	ldr	r3, [pc, #28]	; (d3c8 <am_util_stdio_printf+0x38>)
    d3ac:	681b      	ldr	r3, [r3, #0]
    d3ae:	4805      	ldr	r0, [pc, #20]	; (d3c4 <am_util_stdio_printf+0x34>)
    d3b0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3b2:	687b      	ldr	r3, [r7, #4]
}
    d3b4:	4618      	mov	r0, r3
    d3b6:	3708      	adds	r7, #8
    d3b8:	46bd      	mov	sp, r7
    d3ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d3be:	b004      	add	sp, #16
    d3c0:	4770      	bx	lr
    d3c2:	bf00      	nop
    d3c4:	1000102c 	.word	0x1000102c
    d3c8:	10001134 	.word	0x10001134

0000d3cc <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3cc:	b580      	push	{r7, lr}
    d3ce:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3d0:	4802      	ldr	r0, [pc, #8]	; (d3dc <am_util_stdio_terminal_clear+0x10>)
    d3d2:	f7ff ffdd 	bl	d390 <am_util_stdio_printf>
}
    d3d6:	bf00      	nop
    d3d8:	bd80      	pop	{r7, pc}
    d3da:	bf00      	nop
    d3dc:	0000e8bc 	.word	0x0000e8bc

0000d3e0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d3e2:	f000 fe83 	bl	e0ec <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d3e6:	2000      	movs	r0, #0
    d3e8:	f7ff f94e 	bl	c688 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d3ec:	4b12      	ldr	r3, [pc, #72]	; (d438 <am_bsp_low_power_init+0x58>)
    d3ee:	4f13      	ldr	r7, [pc, #76]	; (d43c <am_bsp_low_power_init+0x5c>)
    d3f0:	6819      	ldr	r1, [r3, #0]
    d3f2:	2029      	movs	r0, #41	; 0x29
    d3f4:	f000 fcca 	bl	dd8c <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d3f8:	f001 f81c 	bl	e434 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d3fc:	2001      	movs	r0, #1
    d3fe:	f001 f857 	bl	e4b0 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d402:	2100      	movs	r1, #0
    d404:	2003      	movs	r0, #3
    d406:	f000 fa61 	bl	d8cc <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d40a:	f001 f85d 	bl	e4c8 <am_hal_rtc_osc_disable>
    d40e:	480c      	ldr	r0, [pc, #48]	; (d440 <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d410:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d412:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d414:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d418:	4631      	mov	r1, r6
    d41a:	4628      	mov	r0, r5
    d41c:	f000 fcb6 	bl	dd8c <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d420:	2103      	movs	r1, #3
    d422:	4628      	mov	r0, r5
    d424:	f000 fdf4 	bl	e010 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d428:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d42a:	4628      	mov	r0, r5
    d42c:	2100      	movs	r1, #0
    d42e:	f000 fdef 	bl	e010 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d432:	2c05      	cmp	r4, #5
    d434:	d1ee      	bne.n	d414 <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d438:	0000e8dc 	.word	0x0000e8dc
    d43c:	10001000 	.word	0x10001000
    d440:	0000e8e0 	.word	0x0000e8e0

0000d444 <am_bsp_itm_printf_enable>:
{
    d444:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d446:	4b0b      	ldr	r3, [pc, #44]	; (d474 <am_bsp_itm_printf_enable+0x30>)
{
    d448:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d44a:	2201      	movs	r2, #1
    d44c:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d44e:	f000 fe2f 	bl	e0b0 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d452:	a806      	add	r0, sp, #24
    d454:	4908      	ldr	r1, [pc, #32]	; (d478 <am_bsp_itm_printf_enable+0x34>)
    d456:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d45a:	f001 f863 	bl	e524 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d45e:	4b07      	ldr	r3, [pc, #28]	; (d47c <am_bsp_itm_printf_enable+0x38>)
    d460:	2029      	movs	r0, #41	; 0x29
    d462:	6819      	ldr	r1, [r3, #0]
    d464:	f000 fc92 	bl	dd8c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d468:	4805      	ldr	r0, [pc, #20]	; (d480 <am_bsp_itm_printf_enable+0x3c>)
    d46a:	f7ff f90d 	bl	c688 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d46e:	b007      	add	sp, #28
    d470:	f85d fb04 	ldr.w	pc, [sp], #4
    d474:	10001130 	.word	0x10001130
    d478:	000f4240 	.word	0x000f4240
    d47c:	0000e8d4 	.word	0x0000e8d4
    d480:	0000e195 	.word	0x0000e195

0000d484 <am_hal_adc_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_ADC_NUM_MODULES )
    d484:	b108      	cbz	r0, d48a <am_hal_adc_initialize+0x6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d486:	2005      	movs	r0, #5
    d488:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if ( !ppHandle )
    d48a:	b1a9      	cbz	r1, d4b8 <am_hal_adc_initialize+0x34>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_ADCState[ui32Module].prefix.s.bInit )
    d48c:	4a0b      	ldr	r2, [pc, #44]	; (d4bc <am_hal_adc_initialize+0x38>)
    d48e:	78d3      	ldrb	r3, [r2, #3]
    d490:	f013 0001 	ands.w	r0, r3, #1
    d494:	d001      	beq.n	d49a <am_hal_adc_initialize+0x16>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    d496:	2007      	movs	r0, #7
    d498:	4770      	bx	lr
{
    d49a:	b430      	push	{r4, r5}
#endif

    //
    // Initialize the handle.
    //
    g_ADCState[ui32Module].prefix.s.bInit = true;
    d49c:	f043 0401 	orr.w	r4, r3, #1
    d4a0:	70d4      	strb	r4, [r2, #3]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
    d4a2:	6813      	ldr	r3, [r2, #0]
    d4a4:	4d06      	ldr	r5, [pc, #24]	; (d4c0 <am_hal_adc_initialize+0x3c>)
    g_ADCState[ui32Module].ui32Module = ui32Module;

    //
    // Initialize the number of slots configured.
    //
    g_ADCSlotsConfigured = 0;
    d4a6:	4c07      	ldr	r4, [pc, #28]	; (d4c4 <am_hal_adc_initialize+0x40>)
    g_ADCState[ui32Module].ui32Module = ui32Module;
    d4a8:	6050      	str	r0, [r2, #4]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
    d4aa:	f365 0317 	bfi	r3, r5, #0, #24
    d4ae:	6013      	str	r3, [r2, #0]
    g_ADCSlotsConfigured = 0;
    d4b0:	6020      	str	r0, [r4, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_ADCState[ui32Module];
    d4b2:	600a      	str	r2, [r1, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d4b4:	bc30      	pop	{r4, r5}
    d4b6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d4b8:	2006      	movs	r0, #6
    d4ba:	4770      	bx	lr
    d4bc:	1000113c 	.word	0x1000113c
    d4c0:	00afafaf 	.word	0x00afafaf
    d4c4:	10001138 	.word	0x10001138

0000d4c8 <am_hal_adc_deinitialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d4c8:	b128      	cbz	r0, d4d6 <am_hal_adc_deinitialize+0xe>
    d4ca:	6803      	ldr	r3, [r0, #0]
    d4cc:	4a0d      	ldr	r2, [pc, #52]	; (d504 <am_hal_adc_deinitialize+0x3c>)
    d4ce:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    d4d2:	4291      	cmp	r1, r2
    d4d4:	d001      	beq.n	d4da <am_hal_adc_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d4d6:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return status;
}
    d4d8:	4770      	bx	lr
    if ( pADCState->prefix.s.bEnable )
    d4da:	f890 c003 	ldrb.w	ip, [r0, #3]
    d4de:	ea5f 738c 	movs.w	r3, ip, lsl #30
    d4e2:	d508      	bpl.n	d4f6 <am_hal_adc_deinitialize+0x2e>

    //
    // Disable the ADC.
    //
#if AM_CMSIS_REGS
    ADCn(ui32Module)->CFG_b.ADCEN = 0x0;
    d4e4:	4b08      	ldr	r3, [pc, #32]	; (d508 <am_hal_adc_deinitialize+0x40>)
    d4e6:	681a      	ldr	r2, [r3, #0]
    d4e8:	f36f 0200 	bfc	r2, #0, #1
    d4ec:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS

    //
    // Set flag to indicate module is disabled.
    //
    pADCState->prefix.s.bEnable = false;
    d4ee:	78c1      	ldrb	r1, [r0, #3]
    d4f0:	f36f 0141 	bfc	r1, #1, #1
    d4f4:	70c1      	strb	r1, [r0, #3]
    pADCState->prefix.s.bInit = false;
    d4f6:	78c3      	ldrb	r3, [r0, #3]
    d4f8:	f36f 0300 	bfc	r3, #0, #1
    d4fc:	70c3      	strb	r3, [r0, #3]
    return status;
    d4fe:	2000      	movs	r0, #0
    d500:	4770      	bx	lr
    d502:	bf00      	nop
    d504:	01afafaf 	.word	0x01afafaf
    d508:	50010000 	.word	0x50010000

0000d50c <am_hal_adc_configure>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d50c:	b128      	cbz	r0, d51a <am_hal_adc_configure+0xe>
    d50e:	6803      	ldr	r3, [r0, #0]
    d510:	4a1a      	ldr	r2, [pc, #104]	; (d57c <am_hal_adc_configure+0x70>)
    d512:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d516:	4290      	cmp	r0, r2
    d518:	d001      	beq.n	d51e <am_hal_adc_configure+0x12>
        return AM_HAL_STATUS_INVALID_HANDLE;
    d51a:	2002      	movs	r0, #2
    d51c:	4770      	bx	lr
{
    d51e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d520:	780b      	ldrb	r3, [r1, #0]
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d522:	f891 e001 	ldrb.w	lr, [r1, #1]
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d526:	790d      	ldrb	r5, [r1, #4]
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d528:	794c      	ldrb	r4, [r1, #5]
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d52a:	798a      	ldrb	r2, [r1, #6]
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
    d52c:	788f      	ldrb	r7, [r1, #2]
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
    d52e:	78ce      	ldrb	r6, [r1, #3]
    ADCn(ui32Module)->CFG = ui32Config;
    d530:	4813      	ldr	r0, [pc, #76]	; (d580 <am_hal_adc_configure+0x74>)
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d532:	ea4f 41ce 	mov.w	r1, lr, lsl #19
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d536:	061b      	lsls	r3, r3, #24
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d538:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d53c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d540:	430b      	orrs	r3, r1
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
    d542:	043f      	lsls	r7, r7, #16
    d544:	f407 21e0 	and.w	r1, r7, #458752	; 0x70000
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
    d548:	0236      	lsls	r6, r6, #8
    d54a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d54e:	430b      	orrs	r3, r1
    d550:	f406 7740 	and.w	r7, r6, #768	; 0x300
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d554:	0129      	lsls	r1, r5, #4
    ui32Config |= _VAL2FLD(ADC_CFG_DFIFORDEN, 1);
    d556:	ea47 0c03 	orr.w	ip, r7, r3
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d55a:	f001 0510 	and.w	r5, r1, #16
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d55e:	00e3      	lsls	r3, r4, #3
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d560:	0097      	lsls	r7, r2, #2
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d562:	ea45 040c 	orr.w	r4, r5, ip
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d566:	f003 0608 	and.w	r6, r3, #8
    d56a:	ea46 0204 	orr.w	r2, r6, r4
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d56e:	f007 0104 	and.w	r1, r7, #4
    d572:	4311      	orrs	r1, r2
    ADCn(ui32Module)->CFG = ui32Config;
    d574:	6001      	str	r1, [r0, #0]
    return AM_HAL_STATUS_SUCCESS;
    d576:	2000      	movs	r0, #0
    d578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d57a:	bf00      	nop
    d57c:	01afafaf 	.word	0x01afafaf
    d580:	50010000 	.word	0x50010000

0000d584 <am_hal_adc_configure_slot>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d584:	b128      	cbz	r0, d592 <am_hal_adc_configure_slot+0xe>
    d586:	6803      	ldr	r3, [r0, #0]
    d588:	4815      	ldr	r0, [pc, #84]	; (d5e0 <am_hal_adc_configure_slot+0x5c>)
    d58a:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d58e:	4584      	cmp	ip, r0
    d590:	d001      	beq.n	d596 <am_hal_adc_configure_slot+0x12>
        return AM_HAL_STATUS_INVALID_HANDLE;
    d592:	2002      	movs	r0, #2
    d594:	4770      	bx	lr
    if ( ui32SlotNumber >= AM_HAL_ADC_MAX_SLOTS )
    d596:	2907      	cmp	r1, #7
    d598:	d901      	bls.n	d59e <am_hal_adc_configure_slot+0x1a>
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d59a:	2005      	movs	r0, #5
    d59c:	4770      	bx	lr
{
    d59e:	b4f0      	push	{r4, r5, r6, r7}
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5a0:	7813      	ldrb	r3, [r2, #0]
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5a2:	7856      	ldrb	r6, [r2, #1]
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5a4:	7895      	ldrb	r5, [r2, #2]
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
    d5a6:	7917      	ldrb	r7, [r2, #4]
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5a8:	480e      	ldr	r0, [pc, #56]	; (d5e4 <am_hal_adc_configure_slot+0x60>)
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5aa:	78d2      	ldrb	r2, [r2, #3]
    g_ADCSlotsConfigured++;
    d5ac:	4c0e      	ldr	r4, [pc, #56]	; (d5e8 <am_hal_adc_configure_slot+0x64>)
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5ae:	061b      	lsls	r3, r3, #24
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5b0:	0436      	lsls	r6, r6, #16
    d5b2:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5ba:	4333      	orrs	r3, r6
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5bc:	022d      	lsls	r5, r5, #8
    d5be:	433b      	orrs	r3, r7
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5c0:	4408      	add	r0, r1
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5c2:	f405 6770 	and.w	r7, r5, #3840	; 0xf00
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5c6:	0052      	lsls	r2, r2, #1
    d5c8:	433b      	orrs	r3, r7
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5ca:	0080      	lsls	r0, r0, #2
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5cc:	f002 0102 	and.w	r1, r2, #2
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
    d5d0:	430b      	orrs	r3, r1
    AM_REGVAL(ui32RegOffset) = ui32Config;
    d5d2:	6003      	str	r3, [r0, #0]
    g_ADCSlotsConfigured++;
    d5d4:	6823      	ldr	r3, [r4, #0]
    d5d6:	3301      	adds	r3, #1
    d5d8:	6023      	str	r3, [r4, #0]
    return AM_HAL_STATUS_SUCCESS;
    d5da:	2000      	movs	r0, #0
}
    d5dc:	bcf0      	pop	{r4, r5, r6, r7}
    d5de:	4770      	bx	lr
    d5e0:	01afafaf 	.word	0x01afafaf
    d5e4:	14004003 	.word	0x14004003
    d5e8:	10001138 	.word	0x10001138

0000d5ec <am_hal_adc_enable>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d5ec:	4603      	mov	r3, r0
    d5ee:	b128      	cbz	r0, d5fc <am_hal_adc_enable+0x10>
    d5f0:	6802      	ldr	r2, [r0, #0]
    d5f2:	490b      	ldr	r1, [pc, #44]	; (d620 <am_hal_adc_enable+0x34>)
    d5f4:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
    d5f8:	4288      	cmp	r0, r1
    d5fa:	d001      	beq.n	d600 <am_hal_adc_enable+0x14>
        return AM_HAL_STATUS_INVALID_HANDLE;
    d5fc:	2002      	movs	r0, #2
    d5fe:	4770      	bx	lr
    if ( pADCState->prefix.s.bEnable )
    d600:	78da      	ldrb	r2, [r3, #3]
    d602:	f012 0002 	ands.w	r0, r2, #2
    d606:	d109      	bne.n	d61c <am_hal_adc_enable+0x30>
    ADCn(ui32Module)->CFG_b.ADCEN = 0x1;
    d608:	4906      	ldr	r1, [pc, #24]	; (d624 <am_hal_adc_enable+0x38>)
    d60a:	680a      	ldr	r2, [r1, #0]
    d60c:	f042 0201 	orr.w	r2, r2, #1
    d610:	600a      	str	r2, [r1, #0]
    pADCState->prefix.s.bEnable = true;
    d612:	78d9      	ldrb	r1, [r3, #3]
    d614:	f041 0202 	orr.w	r2, r1, #2
    d618:	70da      	strb	r2, [r3, #3]
    return AM_HAL_STATUS_SUCCESS;
    d61a:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
    d61c:	2000      	movs	r0, #0
}
    d61e:	4770      	bx	lr
    d620:	01afafaf 	.word	0x01afafaf
    d624:	50010000 	.word	0x50010000

0000d628 <am_hal_adc_disable>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d628:	b128      	cbz	r0, d636 <am_hal_adc_disable+0xe>
    d62a:	6803      	ldr	r3, [r0, #0]
    d62c:	4a08      	ldr	r2, [pc, #32]	; (d650 <am_hal_adc_disable+0x28>)
    d62e:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    d632:	4291      	cmp	r1, r2
    d634:	d001      	beq.n	d63a <am_hal_adc_disable+0x12>
        return AM_HAL_STATUS_INVALID_HANDLE;
    d636:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d638:	4770      	bx	lr
    ADCn(ui32Module)->CFG_b.ADCEN = 0x0;
    d63a:	4b06      	ldr	r3, [pc, #24]	; (d654 <am_hal_adc_disable+0x2c>)
    d63c:	681a      	ldr	r2, [r3, #0]
    d63e:	f36f 0200 	bfc	r2, #0, #1
    d642:	601a      	str	r2, [r3, #0]
    pADCState->prefix.s.bEnable = false;
    d644:	78c1      	ldrb	r1, [r0, #3]
    d646:	f36f 0141 	bfc	r1, #1, #1
    d64a:	70c1      	strb	r1, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
    d64c:	2000      	movs	r0, #0
    d64e:	4770      	bx	lr
    d650:	01afafaf 	.word	0x01afafaf
    d654:	50010000 	.word	0x50010000

0000d658 <am_hal_adc_interrupt_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d658:	b128      	cbz	r0, d666 <am_hal_adc_interrupt_enable+0xe>
    d65a:	6803      	ldr	r3, [r0, #0]
    d65c:	4a07      	ldr	r2, [pc, #28]	; (d67c <am_hal_adc_interrupt_enable+0x24>)
    d65e:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d662:	4290      	cmp	r0, r2
    d664:	d001      	beq.n	d66a <am_hal_adc_interrupt_enable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d666:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d668:	4770      	bx	lr
    ADCn(ui32Module)->INTEN |= ui32IntMask;
    d66a:	4a05      	ldr	r2, [pc, #20]	; (d680 <am_hal_adc_interrupt_enable+0x28>)
    d66c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d670:	4319      	orrs	r1, r3
    d672:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return AM_HAL_STATUS_SUCCESS;
    d676:	2000      	movs	r0, #0
    d678:	4770      	bx	lr
    d67a:	bf00      	nop
    d67c:	01afafaf 	.word	0x01afafaf
    d680:	50010000 	.word	0x50010000

0000d684 <am_hal_adc_interrupt_status>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d684:	b128      	cbz	r0, d692 <am_hal_adc_interrupt_status+0xe>
    d686:	6803      	ldr	r3, [r0, #0]
    d688:	480b      	ldr	r0, [pc, #44]	; (d6b8 <am_hal_adc_interrupt_status+0x34>)
    d68a:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d68e:	4584      	cmp	ip, r0
    d690:	d001      	beq.n	d696 <am_hal_adc_interrupt_status+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d692:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d694:	4770      	bx	lr
    if ( bEnabledOnly )
    d696:	b92a      	cbnz	r2, d6a4 <am_hal_adc_interrupt_status+0x20>
        *pui32Status = ADCn(ui32Module)->INTSTAT;
    d698:	4b08      	ldr	r3, [pc, #32]	; (d6bc <am_hal_adc_interrupt_status+0x38>)
    d69a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
    d69e:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d6a0:	4610      	mov	r0, r2
    d6a2:	4770      	bx	lr
        uint32_t ui32RetVal = ADCn(ui32Module)->INTSTAT;
    d6a4:	4a05      	ldr	r2, [pc, #20]	; (d6bc <am_hal_adc_interrupt_status+0x38>)
    d6a6:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        *pui32Status = ADCn(ui32Module)->INTEN & ui32RetVal;
    d6aa:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    d6ae:	4003      	ands	r3, r0
    d6b0:	600b      	str	r3, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d6b2:	2000      	movs	r0, #0
    d6b4:	4770      	bx	lr
    d6b6:	bf00      	nop
    d6b8:	01afafaf 	.word	0x01afafaf
    d6bc:	50010000 	.word	0x50010000

0000d6c0 <am_hal_adc_interrupt_clear>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d6c0:	b128      	cbz	r0, d6ce <am_hal_adc_interrupt_clear+0xe>
    d6c2:	6803      	ldr	r3, [r0, #0]
    d6c4:	4a05      	ldr	r2, [pc, #20]	; (d6dc <am_hal_adc_interrupt_clear+0x1c>)
    d6c6:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d6ca:	4290      	cmp	r0, r2
    d6cc:	d001      	beq.n	d6d2 <am_hal_adc_interrupt_clear+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d6ce:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d6d0:	4770      	bx	lr
    ADCn(ui32Module)->INTCLR = ui32IntMask;
    d6d2:	4b03      	ldr	r3, [pc, #12]	; (d6e0 <am_hal_adc_interrupt_clear+0x20>)
    return AM_HAL_STATUS_SUCCESS;
    d6d4:	2000      	movs	r0, #0
    ADCn(ui32Module)->INTCLR = ui32IntMask;
    d6d6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    return AM_HAL_STATUS_SUCCESS;
    d6da:	4770      	bx	lr
    d6dc:	01afafaf 	.word	0x01afafaf
    d6e0:	50010000 	.word	0x50010000

0000d6e4 <am_hal_adc_samples_read>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d6e4:	b148      	cbz	r0, d6fa <am_hal_adc_samples_read+0x16>
{
    d6e6:	b470      	push	{r4, r5, r6}
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d6e8:	6800      	ldr	r0, [r0, #0]
    d6ea:	4c1f      	ldr	r4, [pc, #124]	; (d768 <am_hal_adc_samples_read+0x84>)
    d6ec:	f020 457e 	bic.w	r5, r0, #4261412864	; 0xfe000000
    d6f0:	42a5      	cmp	r5, r4
    d6f2:	d004      	beq.n	d6fe <am_hal_adc_samples_read+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d6f4:	2002      	movs	r0, #2

    //
    // Return FIFO valid bits.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d6f6:	bc70      	pop	{r4, r5, r6}
    d6f8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    d6fa:	2002      	movs	r0, #2
    d6fc:	4770      	bx	lr
    if ( NULL == pui32OutBuffer )
    d6fe:	b1db      	cbz	r3, d738 <am_hal_adc_samples_read+0x54>
    *pui32InOutNumberSamples = 0;
    d700:	2600      	movs	r6, #0
    uint32_t      ui32RequestedSamples = *pui32InOutNumberSamples;
    d702:	6814      	ldr	r4, [r2, #0]
    *pui32InOutNumberSamples = 0;
    d704:	6016      	str	r6, [r2, #0]
    if ( NULL == pui32InSampleBuffer )
    d706:	b1c9      	cbz	r1, d73c <am_hal_adc_samples_read+0x58>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d708:	4d18      	ldr	r5, [pc, #96]	; (d76c <am_hal_adc_samples_read+0x88>)
    d70a:	3308      	adds	r3, #8
    d70c:	3904      	subs	r1, #4
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
    d70e:	6848      	ldr	r0, [r1, #4]
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d710:	6bee      	ldr	r6, [r5, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
    d712:	f3c0 7602 	ubfx	r6, r0, #28, #3
    d716:	f843 6c04 	str.w	r6, [r3, #-4]
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(*pui32InSampleBuffer);
    d71a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    d71e:	f3c0 168d 	ubfx	r6, r0, #6, #14
    d722:	f843 6c08 	str.w	r6, [r3, #-8]
            (*pui32InOutNumberSamples)++;
    d726:	6810      	ldr	r0, [r2, #0]
    d728:	3001      	adds	r0, #1
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
    d72a:	4284      	cmp	r4, r0
    d72c:	f103 0308 	add.w	r3, r3, #8
            (*pui32InOutNumberSamples)++;
    d730:	6010      	str	r0, [r2, #0]
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
    d732:	d8ec      	bhi.n	d70e <am_hal_adc_samples_read+0x2a>
    return AM_HAL_STATUS_SUCCESS;
    d734:	2000      	movs	r0, #0
    d736:	e7de      	b.n	d6f6 <am_hal_adc_samples_read+0x12>
        return AM_HAL_STATUS_INVALID_ARG;
    d738:	2006      	movs	r0, #6
    d73a:	e7dc      	b.n	d6f6 <am_hal_adc_samples_read+0x12>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d73c:	4e0b      	ldr	r6, [pc, #44]	; (d76c <am_hal_adc_samples_read+0x88>)
    d73e:	3308      	adds	r3, #8
    d740:	e001      	b.n	d746 <am_hal_adc_samples_read+0x62>
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
    d742:	42ac      	cmp	r4, r5
    d744:	d9f6      	bls.n	d734 <am_hal_adc_samples_read+0x50>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d746:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(ui32Sample);
    d748:	f3c1 7502 	ubfx	r5, r1, #28, #3
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(ui32Sample);
    d74c:	f3c1 108d 	ubfx	r0, r1, #6, #14
    d750:	e903 0021 	stmdb	r3, {r0, r5}
            (*pui32InOutNumberSamples)++;
    d754:	6815      	ldr	r5, [r2, #0]
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
    d756:	f3c1 5007 	ubfx	r0, r1, #20, #8
            (*pui32InOutNumberSamples)++;
    d75a:	3501      	adds	r5, #1
    d75c:	3308      	adds	r3, #8
    d75e:	6015      	str	r5, [r2, #0]
                 (*pui32InOutNumberSamples < ui32RequestedSamples));
    d760:	2800      	cmp	r0, #0
    d762:	d1ee      	bne.n	d742 <am_hal_adc_samples_read+0x5e>
    d764:	e7e6      	b.n	d734 <am_hal_adc_samples_read+0x50>
    d766:	bf00      	nop
    d768:	01afafaf 	.word	0x01afafaf
    d76c:	50010000 	.word	0x50010000

0000d770 <am_hal_adc_sw_trigger>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d770:	b128      	cbz	r0, d77e <am_hal_adc_sw_trigger+0xe>
    d772:	6803      	ldr	r3, [r0, #0]
    d774:	4a05      	ldr	r2, [pc, #20]	; (d78c <am_hal_adc_sw_trigger+0x1c>)
    d776:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d77a:	4290      	cmp	r0, r2
    d77c:	d001      	beq.n	d782 <am_hal_adc_sw_trigger+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d77e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d780:	4770      	bx	lr
    ADCn(ui32Module)->SWT = 0x37;
    d782:	4903      	ldr	r1, [pc, #12]	; (d790 <am_hal_adc_sw_trigger+0x20>)
    d784:	2337      	movs	r3, #55	; 0x37
    d786:	608b      	str	r3, [r1, #8]
    return AM_HAL_STATUS_SUCCESS;
    d788:	2000      	movs	r0, #0
    d78a:	4770      	bx	lr
    d78c:	01afafaf 	.word	0x01afafaf
    d790:	50010000 	.word	0x50010000

0000d794 <am_hal_adc_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d794:	b150      	cbz	r0, d7ac <am_hal_adc_power_control+0x18>
{
    d796:	b510      	push	{r4, lr}
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d798:	6803      	ldr	r3, [r0, #0]
    d79a:	4c30      	ldr	r4, [pc, #192]	; (d85c <am_hal_adc_power_control+0xc8>)
    d79c:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d7a0:	45a4      	cmp	ip, r4
{
    d7a2:	b082      	sub	sp, #8
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d7a4:	d004      	beq.n	d7b0 <am_hal_adc_power_control+0x1c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d7a6:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d7a8:	b002      	add	sp, #8
    d7aa:	bd10      	pop	{r4, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    d7ac:	2002      	movs	r0, #2
    d7ae:	4770      	bx	lr
    d7b0:	4604      	mov	r4, r0
    switch (ePowerState)
    d7b2:	b329      	cbz	r1, d800 <am_hal_adc_power_control+0x6c>
    d7b4:	2902      	cmp	r1, #2
    d7b6:	d821      	bhi.n	d7fc <am_hal_adc_power_control+0x68>
            if ( bRetainState )
    d7b8:	b1da      	cbz	r2, d7f2 <am_hal_adc_power_control+0x5e>
                pADCState->registerState.regSL0CFG  = ADCn(ui32Module)->SL0CFG;
    d7ba:	4829      	ldr	r0, [pc, #164]	; (d860 <am_hal_adc_power_control+0xcc>)
    d7bc:	68c2      	ldr	r2, [r0, #12]
    d7be:	6162      	str	r2, [r4, #20]
                pADCState->registerState.regSL1CFG  = ADCn(ui32Module)->SL1CFG;
    d7c0:	6901      	ldr	r1, [r0, #16]
    d7c2:	61a1      	str	r1, [r4, #24]
                pADCState->registerState.regSL2CFG  = ADCn(ui32Module)->SL2CFG;
    d7c4:	6943      	ldr	r3, [r0, #20]
    d7c6:	61e3      	str	r3, [r4, #28]
                pADCState->registerState.regSL3CFG  = ADCn(ui32Module)->SL3CFG;
    d7c8:	6982      	ldr	r2, [r0, #24]
    d7ca:	6222      	str	r2, [r4, #32]
                pADCState->registerState.regSL4CFG  = ADCn(ui32Module)->SL4CFG;
    d7cc:	69c1      	ldr	r1, [r0, #28]
    d7ce:	6261      	str	r1, [r4, #36]	; 0x24
                pADCState->registerState.regSL5CFG  = ADCn(ui32Module)->SL5CFG;
    d7d0:	6a03      	ldr	r3, [r0, #32]
    d7d2:	62a3      	str	r3, [r4, #40]	; 0x28
                pADCState->registerState.regSL6CFG  = ADCn(ui32Module)->SL6CFG;
    d7d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
    d7d6:	62e2      	str	r2, [r4, #44]	; 0x2c
                pADCState->registerState.regSL7CFG  = ADCn(ui32Module)->SL7CFG;
    d7d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d7da:	6321      	str	r1, [r4, #48]	; 0x30
                pADCState->registerState.regWULIM   = ADCn(ui32Module)->WULIM;
    d7dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    d7de:	6363      	str	r3, [r4, #52]	; 0x34
                pADCState->registerState.regWLLIM   = ADCn(ui32Module)->WLLIM;
    d7e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
    d7e2:	63a2      	str	r2, [r4, #56]	; 0x38
                pADCState->registerState.regINTEN   = ADCn(ui32Module)->INTEN;
    d7e4:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d7e8:	63e1      	str	r1, [r4, #60]	; 0x3c
                pADCState->registerState.regCFG     = ADCn(ui32Module)->CFG;
    d7ea:	6800      	ldr	r0, [r0, #0]
    d7ec:	6120      	str	r0, [r4, #16]
                pADCState->registerState.bValid     = true;
    d7ee:	2301      	movs	r3, #1
    d7f0:	7323      	strb	r3, [r4, #12]
            am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d7f2:	200a      	movs	r0, #10
    d7f4:	f000 fdaa 	bl	e34c <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    d7f8:	2000      	movs	r0, #0
            break;
    d7fa:	e7d5      	b.n	d7a8 <am_hal_adc_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    d7fc:	2006      	movs	r0, #6
    d7fe:	e7d3      	b.n	d7a8 <am_hal_adc_power_control+0x14>
            if ( bRetainState  &&  !pADCState->registerState.bValid )
    d800:	b11a      	cbz	r2, d80a <am_hal_adc_power_control+0x76>
    d802:	7b02      	ldrb	r2, [r0, #12]
    d804:	b93a      	cbnz	r2, d816 <am_hal_adc_power_control+0x82>
                return AM_HAL_STATUS_INVALID_OPERATION;
    d806:	2007      	movs	r0, #7
    d808:	e7ce      	b.n	d7a8 <am_hal_adc_power_control+0x14>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d80a:	200a      	movs	r0, #10
    d80c:	9201      	str	r2, [sp, #4]
    d80e:	f000 fd73 	bl	e2f8 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    d812:	9801      	ldr	r0, [sp, #4]
    d814:	e7c8      	b.n	d7a8 <am_hal_adc_power_control+0x14>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d816:	200a      	movs	r0, #10
    d818:	9101      	str	r1, [sp, #4]
    d81a:	f000 fd6d 	bl	e2f8 <am_hal_pwrctrl_periph_enable>
                ADCn(ui32Module)->SL0CFG = pADCState->registerState.regSL0CFG;
    d81e:	4910      	ldr	r1, [pc, #64]	; (d860 <am_hal_adc_power_control+0xcc>)
    d820:	6963      	ldr	r3, [r4, #20]
    d822:	60cb      	str	r3, [r1, #12]
                ADCn(ui32Module)->SL1CFG = pADCState->registerState.regSL1CFG;
    d824:	69a0      	ldr	r0, [r4, #24]
    d826:	6108      	str	r0, [r1, #16]
                ADCn(ui32Module)->SL2CFG = pADCState->registerState.regSL2CFG;
    d828:	69e2      	ldr	r2, [r4, #28]
    d82a:	614a      	str	r2, [r1, #20]
                ADCn(ui32Module)->SL3CFG = pADCState->registerState.regSL3CFG;
    d82c:	6a23      	ldr	r3, [r4, #32]
    d82e:	618b      	str	r3, [r1, #24]
                ADCn(ui32Module)->SL4CFG = pADCState->registerState.regSL4CFG;
    d830:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d832:	61c8      	str	r0, [r1, #28]
                ADCn(ui32Module)->SL5CFG = pADCState->registerState.regSL5CFG;
    d834:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d836:	620a      	str	r2, [r1, #32]
                ADCn(ui32Module)->SL6CFG = pADCState->registerState.regSL6CFG;
    d838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d83a:	624b      	str	r3, [r1, #36]	; 0x24
                ADCn(ui32Module)->SL7CFG = pADCState->registerState.regSL7CFG;
    d83c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d83e:	6288      	str	r0, [r1, #40]	; 0x28
                ADCn(ui32Module)->WULIM  = pADCState->registerState.regWULIM;
    d840:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d842:	62ca      	str	r2, [r1, #44]	; 0x2c
                ADCn(ui32Module)->WLLIM  = pADCState->registerState.regWLLIM;
    d844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d846:	630b      	str	r3, [r1, #48]	; 0x30
                ADCn(ui32Module)->INTEN  = pADCState->registerState.regINTEN;
    d848:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d84a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
                ADCn(ui32Module)->CFG    = pADCState->registerState.regCFG;
    d84e:	6922      	ldr	r2, [r4, #16]
    d850:	600a      	str	r2, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d852:	9901      	ldr	r1, [sp, #4]
                pADCState->registerState.bValid     = false;
    d854:	7321      	strb	r1, [r4, #12]
    return AM_HAL_STATUS_SUCCESS;
    d856:	4608      	mov	r0, r1
    d858:	e7a6      	b.n	d7a8 <am_hal_adc_power_control+0x14>
    d85a:	bf00      	nop
    d85c:	01afafaf 	.word	0x01afafaf
    d860:	50010000 	.word	0x50010000

0000d864 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d864:	b530      	push	{r4, r5, lr}
    d866:	b083      	sub	sp, #12
    d868:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d86a:	f000 fc19 	bl	e0a0 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d86e:	4c11      	ldr	r4, [pc, #68]	; (d8b4 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d870:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d872:	6823      	ldr	r3, [r4, #0]
    d874:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d878:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d87a:	9801      	ldr	r0, [sp, #4]
    d87c:	f000 fc14 	bl	e0a8 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d880:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d882:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d884:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d886:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d888:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d88a:	005d      	lsls	r5, r3, #1
    d88c:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d890:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d892:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d894:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d898:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d89a:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d89e:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d8a2:	0212      	lsls	r2, r2, #8
    d8a4:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d8a8:	432b      	orrs	r3, r5
    d8aa:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d8ac:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d8ae:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d8b0:	b003      	add	sp, #12
    d8b2:	bd30      	pop	{r4, r5, pc}
    d8b4:	40018000 	.word	0x40018000

0000d8b8 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d8b8:	4a03      	ldr	r2, [pc, #12]	; (d8c8 <am_hal_cachectrl_enable+0x10>)
    d8ba:	6813      	ldr	r3, [r2, #0]
    d8bc:	f043 0001 	orr.w	r0, r3, #1
    d8c0:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d8c2:	2000      	movs	r0, #0
    d8c4:	4770      	bx	lr
    d8c6:	bf00      	nop
    d8c8:	40018000 	.word	0x40018000

0000d8cc <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d8cc:	2809      	cmp	r0, #9
    d8ce:	d852      	bhi.n	d976 <am_hal_clkgen_control+0xaa>
    d8d0:	e8df f000 	tbb	[pc, r0]
    d8d4:	2b21190d 	.word	0x2b21190d
    d8d8:	51513d33 	.word	0x51513d33
    d8dc:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d8de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d8e2:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d8e4:	6a1a      	ldr	r2, [r3, #32]
    d8e6:	f36f 0200 	bfc	r2, #0, #1
    d8ea:	621a      	str	r2, [r3, #32]
            break;
    d8ec:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d8ee:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d8f2:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d8f4:	2047      	movs	r0, #71	; 0x47
    d8f6:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d8fa:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d8fe:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d900:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d904:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d906:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d90a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d90c:	68ca      	ldr	r2, [r1, #12]
    d90e:	f022 0301 	bic.w	r3, r2, #1
    d912:	60cb      	str	r3, [r1, #12]
            break;
    d914:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d916:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d91a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d91c:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d920:	f022 0302 	bic.w	r3, r2, #2
    d924:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d928:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d92a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d92e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d930:	68d3      	ldr	r3, [r2, #12]
    d932:	f043 0101 	orr.w	r1, r3, #1
    d936:	60d1      	str	r1, [r2, #12]
            break;
    d938:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d93a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d93e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d940:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d944:	f043 0102 	orr.w	r1, r3, #2
    d948:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d94c:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d94e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d952:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d954:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d956:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d958:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d95a:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d95c:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d95e:	615a      	str	r2, [r3, #20]
            break;
    d960:	4770      	bx	lr
            if ( pArgs == 0 )
    d962:	b151      	cbz	r1, d97a <am_hal_clkgen_control+0xae>
    d964:	6808      	ldr	r0, [r1, #0]
    d966:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d96a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d96e:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d970:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d974:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d976:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d978:	4770      	bx	lr
    d97a:	4901      	ldr	r1, [pc, #4]	; (d980 <am_hal_clkgen_control+0xb4>)
    d97c:	e7f5      	b.n	d96a <am_hal_clkgen_control+0x9e>
    d97e:	bf00      	nop
    d980:	0025b801 	.word	0x0025b801

0000d984 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d984:	b1a8      	cbz	r0, d9b2 <am_hal_clkgen_status_get+0x2e>
{
    d986:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d988:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d98c:	490a      	ldr	r1, [pc, #40]	; (d9b8 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d98e:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d990:	4b0a      	ldr	r3, [pc, #40]	; (d9bc <am_hal_clkgen_status_get+0x38>)
    d992:	f014 0f01 	tst.w	r4, #1
    d996:	bf08      	it	eq
    d998:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d99a:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d99c:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d99e:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d9a2:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d9a6:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d9a8:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d9ae:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d9b0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d9b2:	2006      	movs	r0, #6
    d9b4:	4770      	bx	lr
    d9b6:	bf00      	nop
    d9b8:	02dc6c00 	.word	0x02dc6c00
    d9bc:	016e3600 	.word	0x016e3600

0000d9c0 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9c2:	b083      	sub	sp, #12
    d9c4:	460d      	mov	r5, r1
    d9c6:	4614      	mov	r4, r2

    //
    // Find the correct register to write based on the timer number.
    //
#if AM_CMSIS_REGS
    pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    d9c8:	0147      	lsls	r7, r0, #5
#endif // AM_CMSIS_REGS

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    d9ca:	f000 fb69 	bl	e0a0 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    d9ce:	4e0b      	ldr	r6, [pc, #44]	; (d9fc <am_hal_ctimer_config_single+0x3c>)
    AM_CRITICAL_BEGIN
    d9d0:	9001      	str	r0, [sp, #4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d9d2:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    d9d6:	59ba      	ldr	r2, [r7, r6]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d9d8:	d00c      	beq.n	d9f4 <am_hal_ctimer_config_single+0x34>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    d9da:	ea22 0005 	bic.w	r0, r2, r5
    d9de:	4320      	orrs	r0, r4

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    d9e0:	3501      	adds	r5, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    d9e2:	bf08      	it	eq
    d9e4:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    d9e8:	51b8      	str	r0, [r7, r6]


    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d9ea:	9801      	ldr	r0, [sp, #4]
    d9ec:	f000 fb5c 	bl	e0a8 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config_single()
    d9f0:	b003      	add	sp, #12
    d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    d9f4:	b291      	uxth	r1, r2
    d9f6:	ea41 4004 	orr.w	r0, r1, r4, lsl #16
    d9fa:	e7f5      	b.n	d9e8 <am_hal_ctimer_config_single+0x28>
    d9fc:	4000800c 	.word	0x4000800c

0000da00 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    da00:	b570      	push	{r4, r5, r6, lr}
    da02:	b082      	sub	sp, #8
    da04:	460c      	mov	r4, r1
    //
    // Find the correct control register.
    //
#if AM_CMSIS_REGS
    volatile uint32_t *pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da06:	0146      	lsls	r6, r0, #5
#endif // AM_CMSIS_REGS

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    da08:	f000 fb4a 	bl	e0a0 <am_hal_interrupt_master_disable>
    volatile uint32_t *pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da0c:	4d07      	ldr	r5, [pc, #28]	; (da2c <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN
    da0e:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    da10:	5971      	ldr	r1, [r6, r5]

#if AM_CMSIS_REGS
    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    da12:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    da16:	ea21 0003 	bic.w	r0, r1, r3
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    da1a:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    da1e:	4302      	orrs	r2, r0
#endif // AM_CMSIS_REGS

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    da20:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    da22:	9801      	ldr	r0, [sp, #4]
    da24:	f000 fb40 	bl	e0a8 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    da28:	b002      	add	sp, #8
    da2a:	bd70      	pop	{r4, r5, r6, pc}
    da2c:	4000800c 	.word	0x4000800c

0000da30 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    da30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da34:	b082      	sub	sp, #8
    da36:	4688      	mov	r8, r1
    da38:	461f      	mov	r7, r3
#if AM_CMSIS_REGS
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da3a:	ea4f 1940 	mov.w	r9, r0, lsl #5
{
    da3e:	4614      	mov	r4, r2
#endif // AM_CMSIS_REGS

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    da40:	f000 fb2e 	bl	e0a0 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da44:	f8df a098 	ldr.w	sl, [pc, #152]	; dae0 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN
    da48:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    da4a:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
    pui32CompareRegA = (uint32_t *)(&CTIMERn(0)->CMPRA0 +
    da4e:	4d21      	ldr	r5, [pc, #132]	; (dad4 <am_hal_ctimer_period_set+0xa4>)
    pui32CompareRegB = (uint32_t *)(&CTIMERn(0)->CMPRB0 +
    da50:	4e21      	ldr	r6, [pc, #132]	; (dad8 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    da52:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    da56:	d01b      	beq.n	da90 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    da58:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    da5c:	2880      	cmp	r0, #128	; 0x80
    da5e:	d01c      	beq.n	da9a <am_hal_ctimer_period_set+0x6a>
    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
#if AM_CMSIS_REGS
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    da60:	f64f 77ff 	movw	r7, #65535	; 0xffff
    da64:	2300      	movs	r3, #0
    da66:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    da68:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    da6a:	d01d      	beq.n	daa8 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    da6c:	491b      	ldr	r1, [pc, #108]	; (dadc <am_hal_ctimer_period_set+0xac>)
    da6e:	4588      	cmp	r8, r1
    da70:	d025      	beq.n	dabe <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    da72:	400a      	ands	r2, r1
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    da74:	b2a0      	uxth	r0, r4
    da76:	4303      	orrs	r3, r0
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    da78:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    da7c:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    da80:	f849 4006 	str.w	r4, [r9, r6]
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    da84:	9801      	ldr	r0, [sp, #4]
    da86:	f000 fb0f 	bl	e0a8 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    da8a:	b002      	add	sp, #8
    da8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    da90:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    da92:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    da96:	2880      	cmp	r0, #128	; 0x80
    da98:	d110      	bne.n	dabc <am_hal_ctimer_period_set+0x8c>
    da9a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    da9c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    da9e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    daa0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    daa4:	45b8      	cmp	r8, r7
    daa6:	d1e1      	bne.n	da6c <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    daa8:	b2a6      	uxth	r6, r4
    daaa:	4333      	orrs	r3, r6
    daac:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END
    dab0:	9801      	ldr	r0, [sp, #4]
    dab2:	f000 faf9 	bl	e0a8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    dab6:	b002      	add	sp, #8
    dab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    dabc:	2300      	movs	r3, #0
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    dabe:	b2a5      	uxth	r5, r4
    dac0:	432b      	orrs	r3, r5
    dac2:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END
    dac6:	9801      	ldr	r0, [sp, #4]
    dac8:	f000 faee 	bl	e0a8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    dacc:	b002      	add	sp, #8
    dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dad2:	bf00      	nop
    dad4:	40008004 	.word	0x40008004
    dad8:	40008008 	.word	0x40008008
    dadc:	ffff0000 	.word	0xffff0000
    dae0:	4000800c 	.word	0x4000800c

0000dae4 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    dae4:	b510      	push	{r4, lr}
    dae6:	b082      	sub	sp, #8
    dae8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    daea:	f000 fad9 	bl	e0a0 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->INTEN |= ui32Interrupt;
    daee:	4b06      	ldr	r3, [pc, #24]	; (db08 <am_hal_ctimer_int_enable+0x24>)
    AM_CRITICAL_BEGIN
    daf0:	9001      	str	r0, [sp, #4]
    CTIMERn(0)->INTEN |= ui32Interrupt;
    daf2:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    daf6:	4320      	orrs	r0, r4
    daf8:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    dafc:	9801      	ldr	r0, [sp, #4]
    dafe:	f000 fad3 	bl	e0a8 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    db02:	b002      	add	sp, #8
    db04:	bd10      	pop	{r4, pc}
    db06:	bf00      	nop
    db08:	40008000 	.word	0x40008000

0000db0c <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    db0c:	b510      	push	{r4, lr}
    db0e:	b082      	sub	sp, #8
    db10:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    db12:	f000 fac5 	bl	e0a0 <am_hal_interrupt_master_disable>

    //
    // Disable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->INTCLR = ui32Interrupt;
    db16:	4b04      	ldr	r3, [pc, #16]	; (db28 <am_hal_ctimer_int_clear+0x1c>)
    AM_CRITICAL_BEGIN
    db18:	9001      	str	r0, [sp, #4]
    CTIMERn(0)->INTCLR = ui32Interrupt;
    db1a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    db1e:	9801      	ldr	r0, [sp, #4]
    db20:	f000 fac2 	bl	e0a8 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
    db24:	b002      	add	sp, #8
    db26:	bd10      	pop	{r4, pc}
    db28:	40008000 	.word	0x40008000

0000db2c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db2c:	4b00      	ldr	r3, [pc, #0]	; (db30 <am_hal_flash_delay+0x4>)
    db2e:	4718      	bx	r3
    db30:	0800009d 	.word	0x0800009d

0000db34 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    db34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db38:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db3c:	f8df 8248 	ldr.w	r8, [pc, #584]	; dd88 <am_hal_flash_delay_status_check+0x254>
{
    db40:	4607      	mov	r7, r0
    db42:	460c      	mov	r4, r1
    db44:	4615      	mov	r5, r2
    db46:	461e      	mov	r6, r3
    db48:	f1be 0f00 	cmp.w	lr, #0
    db4c:	f000 808e 	beq.w	dc6c <am_hal_flash_delay_status_check+0x138>
    db50:	f010 0907 	ands.w	r9, r0, #7
    db54:	d044      	beq.n	dbe0 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db56:	680b      	ldr	r3, [r1, #0]
    db58:	4013      	ands	r3, r2
    db5a:	429e      	cmp	r6, r3
    db5c:	f000 8083 	beq.w	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db60:	2001      	movs	r0, #1
    db62:	47c0      	blx	r8
    db64:	f1b9 0f01 	cmp.w	r9, #1
    db68:	f107 37ff 	add.w	r7, r7, #4294967295
    db6c:	d038      	beq.n	dbe0 <am_hal_flash_delay_status_check+0xac>
    db6e:	f1b9 0f02 	cmp.w	r9, #2
    db72:	d02e      	beq.n	dbd2 <am_hal_flash_delay_status_check+0x9e>
    db74:	f1b9 0f03 	cmp.w	r9, #3
    db78:	d024      	beq.n	dbc4 <am_hal_flash_delay_status_check+0x90>
    db7a:	f1b9 0f04 	cmp.w	r9, #4
    db7e:	d01a      	beq.n	dbb6 <am_hal_flash_delay_status_check+0x82>
    db80:	f1b9 0f05 	cmp.w	r9, #5
    db84:	d010      	beq.n	dba8 <am_hal_flash_delay_status_check+0x74>
    db86:	f1b9 0f06 	cmp.w	r9, #6
    db8a:	d006      	beq.n	db9a <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db8c:	6820      	ldr	r0, [r4, #0]
    db8e:	4028      	ands	r0, r5
    db90:	4286      	cmp	r6, r0
    db92:	d068      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db94:	2001      	movs	r0, #1
    db96:	47c0      	blx	r8
    db98:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db9a:	6821      	ldr	r1, [r4, #0]
    db9c:	4029      	ands	r1, r5
    db9e:	428e      	cmp	r6, r1
    dba0:	d061      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dba2:	2001      	movs	r0, #1
    dba4:	47c0      	blx	r8
    dba6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dba8:	6822      	ldr	r2, [r4, #0]
    dbaa:	402a      	ands	r2, r5
    dbac:	4296      	cmp	r6, r2
    dbae:	d05a      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbb0:	2001      	movs	r0, #1
    dbb2:	47c0      	blx	r8
    dbb4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbb6:	6823      	ldr	r3, [r4, #0]
    dbb8:	402b      	ands	r3, r5
    dbba:	429e      	cmp	r6, r3
    dbbc:	d053      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbbe:	2001      	movs	r0, #1
    dbc0:	47c0      	blx	r8
    dbc2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbc4:	6820      	ldr	r0, [r4, #0]
    dbc6:	4028      	ands	r0, r5
    dbc8:	4286      	cmp	r6, r0
    dbca:	d04c      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbcc:	2001      	movs	r0, #1
    dbce:	47c0      	blx	r8
    dbd0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbd2:	6821      	ldr	r1, [r4, #0]
    dbd4:	4029      	ands	r1, r5
    dbd6:	428e      	cmp	r6, r1
    dbd8:	d045      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbda:	2001      	movs	r0, #1
    dbdc:	3f01      	subs	r7, #1
    dbde:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbe0:	6822      	ldr	r2, [r4, #0]
    dbe2:	402a      	ands	r2, r5
    dbe4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbe6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbea:	d03c      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    dbec:	2f00      	cmp	r7, #0
    dbee:	f000 80c8 	beq.w	dd82 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbf2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbf4:	6823      	ldr	r3, [r4, #0]
    dbf6:	402b      	ands	r3, r5
    dbf8:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbfa:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbfe:	d032      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc00:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc02:	6821      	ldr	r1, [r4, #0]
    dc04:	4029      	ands	r1, r5
    dc06:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc08:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc0c:	d02b      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc0e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc10:	6822      	ldr	r2, [r4, #0]
    dc12:	402a      	ands	r2, r5
    dc14:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc16:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc1a:	d024      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc1e:	6823      	ldr	r3, [r4, #0]
    dc20:	402b      	ands	r3, r5
    dc22:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc24:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc28:	d01d      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc2a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc2c:	6821      	ldr	r1, [r4, #0]
    dc2e:	4029      	ands	r1, r5
    dc30:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc32:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc36:	d016      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc38:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc3a:	6822      	ldr	r2, [r4, #0]
    dc3c:	402a      	ands	r2, r5
    dc3e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc40:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc44:	d00f      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc46:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc48:	6820      	ldr	r0, [r4, #0]
    dc4a:	4028      	ands	r0, r5
    dc4c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc4e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc52:	d008      	beq.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc54:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc56:	6822      	ldr	r2, [r4, #0]
    dc58:	402a      	ands	r2, r5
    dc5a:	4296      	cmp	r6, r2
    dc5c:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc60:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc64:	d1c2      	bne.n	dbec <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dc66:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dc68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc6c:	f010 0907 	ands.w	r9, r0, #7
    dc70:	d043      	beq.n	dcfa <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc72:	680b      	ldr	r3, [r1, #0]
    dc74:	4013      	ands	r3, r2
    dc76:	429e      	cmp	r6, r3
    dc78:	d1f5      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc7a:	2001      	movs	r0, #1
    dc7c:	47c0      	blx	r8
    dc7e:	f1b9 0f01 	cmp.w	r9, #1
    dc82:	f107 37ff 	add.w	r7, r7, #4294967295
    dc86:	d038      	beq.n	dcfa <am_hal_flash_delay_status_check+0x1c6>
    dc88:	f1b9 0f02 	cmp.w	r9, #2
    dc8c:	d02e      	beq.n	dcec <am_hal_flash_delay_status_check+0x1b8>
    dc8e:	f1b9 0f03 	cmp.w	r9, #3
    dc92:	d024      	beq.n	dcde <am_hal_flash_delay_status_check+0x1aa>
    dc94:	f1b9 0f04 	cmp.w	r9, #4
    dc98:	d01a      	beq.n	dcd0 <am_hal_flash_delay_status_check+0x19c>
    dc9a:	f1b9 0f05 	cmp.w	r9, #5
    dc9e:	d010      	beq.n	dcc2 <am_hal_flash_delay_status_check+0x18e>
    dca0:	f1b9 0f06 	cmp.w	r9, #6
    dca4:	d006      	beq.n	dcb4 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dca6:	6821      	ldr	r1, [r4, #0]
    dca8:	4029      	ands	r1, r5
    dcaa:	428e      	cmp	r6, r1
    dcac:	d1db      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcae:	2001      	movs	r0, #1
    dcb0:	47c0      	blx	r8
    dcb2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcb4:	6822      	ldr	r2, [r4, #0]
    dcb6:	402a      	ands	r2, r5
    dcb8:	4296      	cmp	r6, r2
    dcba:	d1d4      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcbc:	2001      	movs	r0, #1
    dcbe:	47c0      	blx	r8
    dcc0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcc2:	6820      	ldr	r0, [r4, #0]
    dcc4:	4028      	ands	r0, r5
    dcc6:	4286      	cmp	r6, r0
    dcc8:	d1cd      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcca:	2001      	movs	r0, #1
    dccc:	47c0      	blx	r8
    dcce:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcd0:	6823      	ldr	r3, [r4, #0]
    dcd2:	402b      	ands	r3, r5
    dcd4:	429e      	cmp	r6, r3
    dcd6:	d1c6      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcd8:	2001      	movs	r0, #1
    dcda:	47c0      	blx	r8
    dcdc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcde:	6821      	ldr	r1, [r4, #0]
    dce0:	4029      	ands	r1, r5
    dce2:	428e      	cmp	r6, r1
    dce4:	d1bf      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce6:	2001      	movs	r0, #1
    dce8:	47c0      	blx	r8
    dcea:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcec:	6822      	ldr	r2, [r4, #0]
    dcee:	402a      	ands	r2, r5
    dcf0:	4296      	cmp	r6, r2
    dcf2:	d1b8      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcf4:	2001      	movs	r0, #1
    dcf6:	3f01      	subs	r7, #1
    dcf8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcfa:	6823      	ldr	r3, [r4, #0]
    dcfc:	402b      	ands	r3, r5
    dcfe:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd00:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd04:	d1af      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    dd06:	2f00      	cmp	r7, #0
    dd08:	d03b      	beq.n	dd82 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd0a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd0c:	6821      	ldr	r1, [r4, #0]
    dd0e:	4029      	ands	r1, r5
    dd10:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd12:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd16:	d1a6      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd18:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd1a:	6822      	ldr	r2, [r4, #0]
    dd1c:	402a      	ands	r2, r5
    dd1e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd20:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd24:	d19f      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd26:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd28:	6823      	ldr	r3, [r4, #0]
    dd2a:	402b      	ands	r3, r5
    dd2c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd2e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd32:	d198      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd34:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd36:	6821      	ldr	r1, [r4, #0]
    dd38:	4029      	ands	r1, r5
    dd3a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd3c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd40:	d191      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd42:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd44:	6822      	ldr	r2, [r4, #0]
    dd46:	402a      	ands	r2, r5
    dd48:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd4a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd4e:	d18a      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd50:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd52:	6823      	ldr	r3, [r4, #0]
    dd54:	402b      	ands	r3, r5
    dd56:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd58:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd5c:	d183      	bne.n	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd5e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd60:	6820      	ldr	r0, [r4, #0]
    dd62:	4028      	ands	r0, r5
    dd64:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd66:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd6a:	f47f af7c 	bne.w	dc66 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd6e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd70:	6823      	ldr	r3, [r4, #0]
    dd72:	402b      	ands	r3, r5
    dd74:	429e      	cmp	r6, r3
    dd76:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd7a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd7e:	d0c2      	beq.n	dd06 <am_hal_flash_delay_status_check+0x1d2>
    dd80:	e771      	b.n	dc66 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    dd82:	2004      	movs	r0, #4
    dd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd88:	0800009d 	.word	0x0800009d

0000dd8c <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    dd8c:	2831      	cmp	r0, #49	; 0x31
    dd8e:	d901      	bls.n	dd94 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    dd90:	2006      	movs	r0, #6
    dd92:	4770      	bx	lr
{
    dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    dd98:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    dd9c:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    dda0:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    dda2:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    dda6:	d014      	beq.n	ddd2 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    dda8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    ddac:	1db2      	adds	r2, r6, #6
    ddae:	f002 0707 	and.w	r7, r2, #7
    ddb2:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    ddb4:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ddb8:	f200 80ab 	bhi.w	df12 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    ddbc:	4a85      	ldr	r2, [pc, #532]	; (dfd4 <am_hal_gpio_pinconfig+0x248>)
    ddbe:	5c17      	ldrb	r7, [r2, r0]
    ddc0:	07ff      	lsls	r7, r7, #31
    ddc2:	d403      	bmi.n	ddcc <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    ddc4:	4884      	ldr	r0, [pc, #528]	; (dfd8 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    ddc6:	b007      	add	sp, #28
    ddc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    ddcc:	1eb4      	subs	r4, r6, #2
    ddce:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    ddd2:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    ddd6:	2e00      	cmp	r6, #0
    ddd8:	f040 8095 	bne.w	df06 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dddc:	4a7f      	ldr	r2, [pc, #508]	; (dfdc <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ddde:	4f80      	ldr	r7, [pc, #512]	; (dfe0 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dde0:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    dde2:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dde6:	411e      	asrs	r6, r3
    dde8:	f016 0f01 	tst.w	r6, #1
    ddec:	bf0c      	ite	eq
    ddee:	2600      	moveq	r6, #0
    ddf0:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ddf2:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ddf4:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ddf8:	f000 8097 	beq.w	df2a <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ddfc:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de00:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de02:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de06:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    de0a:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    de0c:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de10:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de14:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de18:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de1c:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de1e:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de22:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de26:	f000 808d 	beq.w	df44 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    de2a:	4a6e      	ldr	r2, [pc, #440]	; (dfe4 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de2c:	6816      	ldr	r6, [r2, #0]
    de2e:	1b8c      	subs	r4, r1, r6
    de30:	fab4 f384 	clz	r3, r4
    de34:	095f      	lsrs	r7, r3, #5
    de36:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    de38:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    de3c:	bf04      	itt	eq
    de3e:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    de42:	f367 0800 	bfieq	r8, r7, #0, #1
    de46:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    de48:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de4c:	2902      	cmp	r1, #2
    de4e:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    de52:	d07a      	beq.n	df4a <am_hal_gpio_pinconfig+0x1be>
    de54:	d87f      	bhi.n	df56 <am_hal_gpio_pinconfig+0x1ca>
    de56:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    de58:	bf08      	it	eq
    de5a:	f045 0504 	orreq.w	r5, r5, #4
    de5e:	f004 0a18 	and.w	sl, r4, #24
            break;
    de62:	2200      	movs	r2, #0
    de64:	4604      	mov	r4, r0
    de66:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de68:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    de6c:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de70:	485d      	ldr	r0, [pc, #372]	; (dfe8 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    de72:	495e      	ldr	r1, [pc, #376]	; (dfec <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de74:	4f5e      	ldr	r7, [pc, #376]	; (dff0 <am_hal_gpio_pinconfig+0x264>)
    de76:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de78:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    de7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    de80:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    de84:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    de86:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de8a:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de8c:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    de90:	f000 f906 	bl	e0a0 <am_hal_interrupt_master_disable>
    de94:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    de96:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    de9a:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    de9e:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    dea2:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    dea6:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    dea8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    deac:	9902      	ldr	r1, [sp, #8]
    deae:	9a03      	ldr	r2, [sp, #12]
    deb0:	b150      	cbz	r0, dec8 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    deb2:	f004 001f 	and.w	r0, r4, #31
    deb6:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    deba:	f04f 0c01 	mov.w	ip, #1
    debe:	4c4d      	ldr	r4, [pc, #308]	; (dff4 <am_hal_gpio_pinconfig+0x268>)
    dec0:	fa0c f000 	lsl.w	r0, ip, r0
    dec4:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    dec8:	484b      	ldr	r0, [pc, #300]	; (dff8 <am_hal_gpio_pinconfig+0x26c>)
    deca:	2473      	movs	r4, #115	; 0x73
    decc:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    dece:	f8da 4000 	ldr.w	r4, [sl]
    ded2:	4034      	ands	r4, r6
    ded4:	4325      	orrs	r5, r4
    ded6:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    deda:	f859 5001 	ldr.w	r5, [r9, r1]
    dede:	402f      	ands	r7, r5
    dee0:	ea47 0708 	orr.w	r7, r7, r8
    dee4:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    dee8:	f85b 1003 	ldr.w	r1, [fp, r3]
    deec:	400e      	ands	r6, r1
    deee:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    def0:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    def2:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    def6:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    def8:	9805      	ldr	r0, [sp, #20]
    defa:	f000 f8d5 	bl	e0a8 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    defe:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    df00:	b007      	add	sp, #28
    df02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df06:	2e01      	cmp	r6, #1
    df08:	d015      	beq.n	df36 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df0a:	2e02      	cmp	r6, #2
    df0c:	d030      	beq.n	df70 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    df0e:	483b      	ldr	r0, [pc, #236]	; (dffc <am_hal_gpio_pinconfig+0x270>)
    df10:	e759      	b.n	ddc6 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    df12:	2cc0      	cmp	r4, #192	; 0xc0
    df14:	d027      	beq.n	df66 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    df16:	2c20      	cmp	r4, #32
    df18:	f47f af5b 	bne.w	ddd2 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    df1c:	4c2d      	ldr	r4, [pc, #180]	; (dfd4 <am_hal_gpio_pinconfig+0x248>)
    df1e:	5c26      	ldrb	r6, [r4, r0]
    df20:	f016 0f09 	tst.w	r6, #9
    df24:	f47f af4e 	bne.w	ddc4 <am_hal_gpio_pinconfig+0x38>
    df28:	e753      	b.n	ddd2 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    df2a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    df2e:	2a07      	cmp	r2, #7
    df30:	d125      	bne.n	df7e <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    df32:	4833      	ldr	r0, [pc, #204]	; (e000 <am_hal_gpio_pinconfig+0x274>)
    df34:	e747      	b.n	ddc6 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    df36:	4c27      	ldr	r4, [pc, #156]	; (dfd4 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df38:	5c26      	ldrb	r6, [r4, r0]
    df3a:	07b4      	lsls	r4, r6, #30
    df3c:	d5e7      	bpl.n	df0e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    df3e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    df42:	e74b      	b.n	dddc <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    df44:	2701      	movs	r7, #1
    df46:	9700      	str	r7, [sp, #0]
    df48:	e776      	b.n	de38 <am_hal_gpio_pinconfig+0xac>
    df4a:	f004 0a18 	and.w	sl, r4, #24
    df4e:	2301      	movs	r3, #1
    df50:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    df54:	e786      	b.n	de64 <am_hal_gpio_pinconfig+0xd8>
    df56:	f004 0a18 	and.w	sl, r4, #24
    df5a:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    df5c:	f045 0504 	orr.w	r5, r5, #4
    df60:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    df64:	e77e      	b.n	de64 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    df66:	2814      	cmp	r0, #20
    df68:	f43f af33 	beq.w	ddd2 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    df6c:	4825      	ldr	r0, [pc, #148]	; (e004 <am_hal_gpio_pinconfig+0x278>)
    df6e:	e72a      	b.n	ddc6 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    df70:	4a18      	ldr	r2, [pc, #96]	; (dfd4 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df72:	5c17      	ldrb	r7, [r2, r0]
    df74:	077a      	lsls	r2, r7, #29
    df76:	d5ca      	bpl.n	df0e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    df78:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    df7c:	e72e      	b.n	dddc <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df7e:	4c22      	ldr	r4, [pc, #136]	; (e008 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    df80:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df84:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    df88:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df8c:	45b0      	cmp	r8, r6
    df8e:	d010      	beq.n	dfb2 <am_hal_gpio_pinconfig+0x226>
    df90:	0087      	lsls	r7, r0, #2
    df92:	eb04 0907 	add.w	r9, r4, r7
    df96:	f899 3001 	ldrb.w	r3, [r9, #1]
    df9a:	42b3      	cmp	r3, r6
    df9c:	d015      	beq.n	dfca <am_hal_gpio_pinconfig+0x23e>
    df9e:	f899 2002 	ldrb.w	r2, [r9, #2]
    dfa2:	42b2      	cmp	r2, r6
    dfa4:	d00f      	beq.n	dfc6 <am_hal_gpio_pinconfig+0x23a>
    dfa6:	f899 4003 	ldrb.w	r4, [r9, #3]
    dfaa:	42b4      	cmp	r4, r6
    dfac:	d00f      	beq.n	dfce <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    dfae:	4817      	ldr	r0, [pc, #92]	; (e00c <am_hal_gpio_pinconfig+0x280>)
    dfb0:	e709      	b.n	ddc6 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dfb2:	2600      	movs	r6, #0
    dfb4:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    dfb6:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dfb8:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    dfbc:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dfbe:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    dfc2:	9300      	str	r3, [sp, #0]
    dfc4:	e740      	b.n	de48 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dfc6:	2602      	movs	r6, #2
    dfc8:	e7f5      	b.n	dfb6 <am_hal_gpio_pinconfig+0x22a>
    dfca:	2601      	movs	r6, #1
    dfcc:	e7f3      	b.n	dfb6 <am_hal_gpio_pinconfig+0x22a>
    dfce:	2603      	movs	r6, #3
    dfd0:	e7f1      	b.n	dfb6 <am_hal_gpio_pinconfig+0x22a>
    dfd2:	bf00      	nop
    dfd4:	0000e8e4 	.word	0x0000e8e4
    dfd8:	08000100 	.word	0x08000100
    dfdc:	0000e918 	.word	0x0000e918
    dfe0:	0000ea14 	.word	0x0000ea14
    dfe4:	0000e8dc 	.word	0x0000e8dc
    dfe8:	7ffffffc 	.word	0x7ffffffc
    dfec:	400100e0 	.word	0x400100e0
    dff0:	40010040 	.word	0x40010040
    dff4:	400100b4 	.word	0x400100b4
    dff8:	40010000 	.word	0x40010000
    dffc:	08000102 	.word	0x08000102
    e000:	08000103 	.word	0x08000103
    e004:	08000101 	.word	0x08000101
    e008:	0000e94c 	.word	0x0000e94c
    e00c:	08000104 	.word	0x08000104

0000e010 <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    e010:	2831      	cmp	r0, #49	; 0x31
    e012:	d901      	bls.n	e018 <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    e014:	2005      	movs	r0, #5
    e016:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    e018:	2905      	cmp	r1, #5
    e01a:	d901      	bls.n	e020 <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    e01c:	2006      	movs	r0, #6
    e01e:	4770      	bx	lr
{
    e020:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e022:	f000 031f 	and.w	r3, r0, #31
{
    e026:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e028:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e02a:	2201      	movs	r2, #1
    e02c:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e02e:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e032:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    e036:	f000 f833 	bl	e0a0 <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    e03a:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    e03c:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    e03e:	2904      	cmp	r1, #4
    e040:	d817      	bhi.n	e072 <am_hal_gpio_state_write+0x62>
    e042:	e8df f001 	tbb	[pc, r1]
    e046:	0e13      	.short	0x0e13
    e048:	030b      	.short	0x030b
    e04a:	19          	.byte	0x19
    e04b:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    e04c:	4d0d      	ldr	r5, [pc, #52]	; (e084 <am_hal_gpio_state_write+0x74>)
    e04e:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    e050:	9801      	ldr	r0, [sp, #4]
    e052:	f000 f829 	bl	e0a8 <am_hal_interrupt_master_set>

    return ui32Return;
    e056:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    e058:	b002      	add	sp, #8
    e05a:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    e05c:	4b0a      	ldr	r3, [pc, #40]	; (e088 <am_hal_gpio_state_write+0x78>)
    e05e:	50e6      	str	r6, [r4, r3]
            break;
    e060:	e7f6      	b.n	e050 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    e062:	480a      	ldr	r0, [pc, #40]	; (e08c <am_hal_gpio_state_write+0x7c>)
    e064:	5822      	ldr	r2, [r4, r0]
    e066:	4072      	eors	r2, r6
    e068:	5022      	str	r2, [r4, r0]
            break;
    e06a:	e7f1      	b.n	e050 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    e06c:	4908      	ldr	r1, [pc, #32]	; (e090 <am_hal_gpio_state_write+0x80>)
    e06e:	5066      	str	r6, [r4, r1]
            break;
    e070:	e7ee      	b.n	e050 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    e072:	4d08      	ldr	r5, [pc, #32]	; (e094 <am_hal_gpio_state_write+0x84>)
    e074:	5166      	str	r6, [r4, r5]
            break;
    e076:	e7eb      	b.n	e050 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    e078:	4803      	ldr	r0, [pc, #12]	; (e088 <am_hal_gpio_state_write+0x78>)
    e07a:	5823      	ldr	r3, [r4, r0]
    e07c:	4073      	eors	r3, r6
    e07e:	5023      	str	r3, [r4, r0]
            break;
    e080:	e7e6      	b.n	e050 <am_hal_gpio_state_write+0x40>
    e082:	bf00      	nop
    e084:	400100a8 	.word	0x400100a8
    e088:	400100b4 	.word	0x400100b4
    e08c:	40010088 	.word	0x40010088
    e090:	40010090 	.word	0x40010090
    e094:	40010098 	.word	0x40010098

0000e098 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e098:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    e09c:	b662      	cpsie	i
    __asm("    bx lr");
    e09e:	4770      	bx	lr

0000e0a0 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e0a0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e0a4:	b672      	cpsid	i
    __asm("    bx lr");
    e0a6:	4770      	bx	lr

0000e0a8 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e0a8:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e0ac:	4770      	bx	lr
    e0ae:	bf00      	nop

0000e0b0 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e0b0:	4a0b      	ldr	r2, [pc, #44]	; (e0e0 <am_hal_itm_enable+0x30>)
    e0b2:	68d3      	ldr	r3, [r2, #12]
    e0b4:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    e0b8:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e0ba:	68d1      	ldr	r1, [r2, #12]
    e0bc:	01cb      	lsls	r3, r1, #7
    e0be:	d5fc      	bpl.n	e0ba <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    e0c0:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e0c4:	4b07      	ldr	r3, [pc, #28]	; (e0e4 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    e0c6:	4a08      	ldr	r2, [pc, #32]	; (e0e8 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e0c8:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e0cc:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    e0ce:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e0d2:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e0d6:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e0da:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    e0de:	4770      	bx	lr
    e0e0:	e000edf0 	.word	0xe000edf0
    e0e4:	c5acce55 	.word	0xc5acce55
    e0e8:	00150511 	.word	0x00150511

0000e0ec <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    e0ec:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    e0ee:	4b24      	ldr	r3, [pc, #144]	; (e180 <am_hal_itm_disable+0x94>)
    e0f0:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e0f4:	b9b0      	cbnz	r0, e124 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e0f6:	4923      	ldr	r1, [pc, #140]	; (e184 <am_hal_itm_disable+0x98>)
    e0f8:	68ca      	ldr	r2, [r1, #12]
    e0fa:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e0fe:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e100:	68cb      	ldr	r3, [r1, #12]
    e102:	01da      	lsls	r2, r3, #7
    e104:	d5fc      	bpl.n	e100 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e106:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e10a:	481f      	ldr	r0, [pc, #124]	; (e188 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e10c:	4a1f      	ldr	r2, [pc, #124]	; (e18c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e10e:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e112:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e114:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e118:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e11c:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e120:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e124:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e128:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e12c:	021b      	lsls	r3, r3, #8
    e12e:	d4fb      	bmi.n	e128 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e130:	f240 20f7 	movw	r0, #759	; 0x2f7
    e134:	f7ff fcfa 	bl	db2c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e138:	4813      	ldr	r0, [pc, #76]	; (e188 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e13a:	4915      	ldr	r1, [pc, #84]	; (e190 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e13c:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e140:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e144:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e146:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e14a:	f022 0401 	bic.w	r4, r2, #1
    e14e:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e152:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e156:	420b      	tst	r3, r1
    e158:	d1fb      	bne.n	e152 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e15a:	3801      	subs	r0, #1
    e15c:	d1f3      	bne.n	e146 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e15e:	4909      	ldr	r1, [pc, #36]	; (e184 <am_hal_itm_disable+0x98>)
    e160:	68ca      	ldr	r2, [r1, #12]
    e162:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e166:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e168:	68cb      	ldr	r3, [r1, #12]
    e16a:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e16e:	d1fb      	bne.n	e168 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e170:	4903      	ldr	r1, [pc, #12]	; (e180 <am_hal_itm_disable+0x94>)
    e172:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e176:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e17a:	2a00      	cmp	r2, #0
    e17c:	d1fb      	bne.n	e176 <am_hal_itm_disable+0x8a>
}
    e17e:	bd10      	pop	{r4, pc}
    e180:	40020000 	.word	0x40020000
    e184:	e000edf0 	.word	0xe000edf0
    e188:	c5acce55 	.word	0xc5acce55
    e18c:	00150511 	.word	0x00150511
    e190:	00800001 	.word	0x00800001

0000e194 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    e194:	7803      	ldrb	r3, [r0, #0]
    e196:	b1b3      	cbz	r3, e1c6 <am_hal_itm_print+0x32>
{
    e198:	b410      	push	{r4}
    e19a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    e19c:	2400      	movs	r4, #0
    e19e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    e1a2:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    e1a4:	2900      	cmp	r1, #0
    e1a6:	d1fa      	bne.n	e19e <am_hal_itm_print+0xa>
    e1a8:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    e1aa:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    e1ae:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    e1b2:	f8dc 3000 	ldr.w	r3, [ip]
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d0fb      	beq.n	e1b2 <am_hal_itm_print+0x1e>
    while (ui32Length)
    e1ba:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    e1bc:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    e1c0:	d1f5      	bne.n	e1ae <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    e1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    e1c6:	4770      	bx	lr

0000e1c8 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e1c8:	b141      	cbz	r1, e1dc <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e1ca:	2801      	cmp	r0, #1
{
    e1cc:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e1ce:	d03a      	beq.n	e246 <am_hal_mcuctrl_info_get+0x7e>
    e1d0:	d322      	bcc.n	e218 <am_hal_mcuctrl_info_get+0x50>
    e1d2:	2802      	cmp	r0, #2
    e1d4:	d004      	beq.n	e1e0 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e1d6:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e1d8:	bcf0      	pop	{r4, r5, r6, r7}
    e1da:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e1dc:	2006      	movs	r0, #6
    e1de:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1e0:	4a41      	ldr	r2, [pc, #260]	; (e2e8 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e1e2:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1e4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e1e8:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1ea:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1ee:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1f2:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1f6:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1f8:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1fa:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e1fc:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e200:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e202:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e206:	4334      	orrs	r4, r6
    e208:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e20a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e20e:	4310      	orrs	r0, r2
    e210:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e212:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e214:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e216:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e218:	4c33      	ldr	r4, [pc, #204]	; (e2e8 <am_hal_mcuctrl_info_get+0x120>)
    e21a:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e21c:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e220:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e224:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e226:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e228:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e22c:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e230:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e232:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e234:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e238:	f004 0501 	and.w	r5, r4, #1
    e23c:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e23e:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e240:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e242:	bcf0      	pop	{r4, r5, r6, r7}
    e244:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e246:	4a28      	ldr	r2, [pc, #160]	; (e2e8 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e248:	4c28      	ldr	r4, [pc, #160]	; (e2ec <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e24a:	6813      	ldr	r3, [r2, #0]
    e24c:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e24e:	6850      	ldr	r0, [r2, #4]
    e250:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e252:	6897      	ldr	r7, [r2, #8]
    e254:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e256:	68d6      	ldr	r6, [r2, #12]
    e258:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e25a:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e25c:	4824      	ldr	r0, [pc, #144]	; (e2f0 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e25e:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e260:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e264:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e268:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e26a:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e26e:	4a21      	ldr	r2, [pc, #132]	; (e2f4 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e270:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e274:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e276:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e27a:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e27c:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e27e:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e280:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e284:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e288:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e28a:	f000 040f 	and.w	r4, r0, #15
    e28e:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e292:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e294:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e298:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e29c:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e2a0:	f007 0c0f 	and.w	ip, r7, #15
    e2a4:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e2a8:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e2aa:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e2ae:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e2b2:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e2b6:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e2ba:	433b      	orrs	r3, r7
    e2bc:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e2be:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e2c2:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e2c6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2ca:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e2ce:	b2e5      	uxtb	r5, r4
    e2d0:	042b      	lsls	r3, r5, #16
    e2d2:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2d6:	b2d6      	uxtb	r6, r2
    e2d8:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e2da:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2dc:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e2e0:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e2e2:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e2e4:	bcf0      	pop	{r4, r5, r6, r7}
    e2e6:	4770      	bx	lr
    e2e8:	40020000 	.word	0x40020000
    e2ec:	0000ea48 	.word	0x0000ea48
    e2f0:	0000ea88 	.word	0x0000ea88
    e2f4:	f0000f00 	.word	0xf0000f00

0000e2f8 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e2f8:	b570      	push	{r4, r5, r6, lr}
    e2fa:	b082      	sub	sp, #8
    e2fc:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    e2fe:	f7ff fecf 	bl	e0a0 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e302:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e306:	008c      	lsls	r4, r1, #2
    e308:	4e0e      	ldr	r6, [pc, #56]	; (e344 <am_hal_pwrctrl_periph_enable+0x4c>)
    e30a:	4d0f      	ldr	r5, [pc, #60]	; (e348 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    e30c:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e30e:	592a      	ldr	r2, [r5, r4]
    e310:	68b3      	ldr	r3, [r6, #8]
    e312:	4313      	orrs	r3, r2
    e314:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    e316:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e318:	442c      	add	r4, r5
    AM_CRITICAL_END
    e31a:	f7ff fec5 	bl	e0a8 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e31e:	2077      	movs	r0, #119	; 0x77
    e320:	f7ff fc04 	bl	db2c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e324:	69b0      	ldr	r0, [r6, #24]
    e326:	6864      	ldr	r4, [r4, #4]
    e328:	4220      	tst	r0, r4
    e32a:	d103      	bne.n	e334 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e32c:	2077      	movs	r0, #119	; 0x77
    e32e:	f7ff fbfd 	bl	db2c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e332:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    e334:	4903      	ldr	r1, [pc, #12]	; (e344 <am_hal_pwrctrl_periph_enable+0x4c>)
    e336:	698d      	ldr	r5, [r1, #24]
    e338:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    e33a:	bf0c      	ite	eq
    e33c:	2001      	moveq	r0, #1
    e33e:	2000      	movne	r0, #0
    e340:	b002      	add	sp, #8
    e342:	bd70      	pop	{r4, r5, r6, pc}
    e344:	40021000 	.word	0x40021000
    e348:	0000ec30 	.word	0x0000ec30

0000e34c <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e34c:	b570      	push	{r4, r5, r6, lr}
    e34e:	b082      	sub	sp, #8
    e350:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    e352:	f7ff fea5 	bl	e0a0 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e356:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e35a:	008c      	lsls	r4, r1, #2
    e35c:	4e0f      	ldr	r6, [pc, #60]	; (e39c <am_hal_pwrctrl_periph_disable+0x50>)
    e35e:	4d10      	ldr	r5, [pc, #64]	; (e3a0 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    e360:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e362:	68b3      	ldr	r3, [r6, #8]
    e364:	592a      	ldr	r2, [r5, r4]
    e366:	ea23 0002 	bic.w	r0, r3, r2
    e36a:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    e36c:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e36e:	442c      	add	r4, r5
    AM_CRITICAL_END
    e370:	f7ff fe9a 	bl	e0a8 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e374:	2077      	movs	r0, #119	; 0x77
    e376:	f7ff fbd9 	bl	db2c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e37a:	69b1      	ldr	r1, [r6, #24]
    e37c:	6864      	ldr	r4, [r4, #4]
    e37e:	4221      	tst	r1, r4
    e380:	d003      	beq.n	e38a <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e382:	2077      	movs	r0, #119	; 0x77
    e384:	f7ff fbd2 	bl	db2c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e388:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e38a:	4d04      	ldr	r5, [pc, #16]	; (e39c <am_hal_pwrctrl_periph_disable+0x50>)
    e38c:	69ae      	ldr	r6, [r5, #24]
    e38e:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e390:	bf14      	ite	ne
    e392:	2001      	movne	r0, #1
    e394:	2000      	moveq	r0, #0
    e396:	b002      	add	sp, #8
    e398:	bd70      	pop	{r4, r5, r6, pc}
    e39a:	bf00      	nop
    e39c:	40021000 	.word	0x40021000
    e3a0:	0000ec30 	.word	0x0000ec30

0000e3a4 <am_hal_pwrctrl_memory_enable>:
//  Enable a configuration of memory.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_memory_enable(am_hal_pwrctrl_mem_e eMemConfig)
{
    e3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if 0
    uint32_t ui32MemEventMask;
#endif
// #### INTERNAL END ####

    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e3a8:	ea4f 0980 	mov.w	r9, r0, lsl #2
    e3ac:	eb09 0300 	add.w	r3, r9, r0
    e3b0:	4f1e      	ldr	r7, [pc, #120]	; (e42c <am_hal_pwrctrl_memory_enable+0x88>)
{
    e3b2:	4604      	mov	r4, r0
    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e3b4:	0098      	lsls	r0, r3, #2
    e3b6:	183a      	adds	r2, r7, r0
    e3b8:	583d      	ldr	r5, [r7, r0]
#if 0
    ui32MemEventMask  = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEvent;
#endif
// #### INTERNAL END ####
    ui32MemRegionMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryMask;
    ui32MemStatusMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32StatusMask;
    e3ba:	6916      	ldr	r6, [r2, #16]
    //
    // Note that a deliberate disable step using a disable mask is taken here
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    e3bc:	43eb      	mvns	r3, r5
    e3be:	d126      	bne.n	e40e <am_hal_pwrctrl_memory_enable+0x6a>
// #### INTERNAL END ####

    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    e3c0:	b965      	cbnz	r5, e3dc <am_hal_pwrctrl_memory_enable+0x38>
    e3c2:	444c      	add	r4, r9
    e3c4:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
    e3c8:	f8dc 5004 	ldr.w	r5, [ip, #4]

    //
    // Return status based on whether the power control memory status has reached the desired state.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3cc:	4918      	ldr	r1, [pc, #96]	; (e430 <am_hal_pwrctrl_memory_enable+0x8c>)
    e3ce:	694a      	ldr	r2, [r1, #20]
    e3d0:	4032      	ands	r2, r6
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e3d2:	1b50      	subs	r0, r2, r5
    e3d4:	bf18      	it	ne
    e3d6:	2001      	movne	r0, #1
    e3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3dc:	f8df 8050 	ldr.w	r8, [pc, #80]	; e430 <am_hal_pwrctrl_memory_enable+0x8c>
    e3e0:	f8d8 0010 	ldr.w	r0, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3e4:	444c      	add	r4, r9
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3e6:	4305      	orrs	r5, r0
    e3e8:	f8c8 5010 	str.w	r5, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3ec:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e3f0:	2077      	movs	r0, #119	; 0x77
    e3f2:	f7ff fb9b 	bl	db2c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3f6:	f8d8 7014 	ldr.w	r7, [r8, #20]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3fa:	6865      	ldr	r5, [r4, #4]
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3fc:	4037      	ands	r7, r6
    e3fe:	42af      	cmp	r7, r5
    e400:	d0e4      	beq.n	e3cc <am_hal_pwrctrl_memory_enable+0x28>
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e402:	2077      	movs	r0, #119	; 0x77
    e404:	f7ff fb92 	bl	db2c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e408:	f8d8 3014 	ldr.w	r3, [r8, #20]
    e40c:	e7de      	b.n	e3cc <am_hal_pwrctrl_memory_enable+0x28>
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e40e:	68d0      	ldr	r0, [r2, #12]
        PWRCTRL->MEMPWREN &=
    e410:	4907      	ldr	r1, [pc, #28]	; (e430 <am_hal_pwrctrl_memory_enable+0x8c>)
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e412:	4003      	ands	r3, r0
        PWRCTRL->MEMPWREN &=
    e414:	690a      	ldr	r2, [r1, #16]
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e416:	f242 0801 	movw	r8, #8193	; 0x2001
    e41a:	ea68 0303 	orn	r3, r8, r3
        PWRCTRL->MEMPWREN &=
    e41e:	4013      	ands	r3, r2
    e420:	610b      	str	r3, [r1, #16]
        am_hal_flash_delay(FLASH_CYCLES_US(1));
    e422:	2001      	movs	r0, #1
    e424:	f7ff fb82 	bl	db2c <am_hal_flash_delay>
    e428:	e7ca      	b.n	e3c0 <am_hal_pwrctrl_memory_enable+0x1c>
    e42a:	bf00      	nop
    e42c:	0000eac8 	.word	0x0000eac8
    e430:	40021000 	.word	0x40021000

0000e434 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e434:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e436:	4c1b      	ldr	r4, [pc, #108]	; (e4a4 <am_hal_pwrctrl_low_power_init+0x70>)
    e438:	69a3      	ldr	r3, [r4, #24]
    e43a:	05db      	lsls	r3, r3, #23
{
    e43c:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e43e:	d502      	bpl.n	e446 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e440:	2000      	movs	r0, #0
}
    e442:	b003      	add	sp, #12
    e444:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e446:	4d18      	ldr	r5, [pc, #96]	; (e4a8 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e448:	4918      	ldr	r1, [pc, #96]	; (e4ac <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e44a:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e44c:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e44e:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e450:	461a      	mov	r2, r3
    e452:	9000      	str	r0, [sp, #0]
    e454:	f242 7010 	movw	r0, #10000	; 0x2710
    e458:	f7ff fb6c 	bl	db34 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e45c:	b110      	cbz	r0, e464 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e45e:	2004      	movs	r0, #4
}
    e460:	b003      	add	sp, #12
    e462:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e464:	6821      	ldr	r1, [r4, #0]
    e466:	f041 0201 	orr.w	r2, r1, #1
    e46a:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e46c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e46e:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e472:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e474:	68ec      	ldr	r4, [r5, #12]
    e476:	b2e2      	uxtb	r2, r4
    e478:	2a11      	cmp	r2, #17
    e47a:	d1e1      	bne.n	e440 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e47c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e480:	f360 5356 	bfi	r3, r0, #21, #2
    e484:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e488:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e48c:	240f      	movs	r4, #15
    e48e:	f364 118b 	bfi	r1, r4, #6, #6
    e492:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e496:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e49a:	f364 0205 	bfi	r2, r4, #0, #6
    e49e:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e4a2:	e7ce      	b.n	e442 <am_hal_pwrctrl_low_power_init+0xe>
    e4a4:	40021000 	.word	0x40021000
    e4a8:	40020000 	.word	0x40020000
    e4ac:	40020018 	.word	0x40020018

0000e4b0 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e4b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e4b4:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e4b6:	68d3      	ldr	r3, [r2, #12]
    e4b8:	bf0c      	ite	eq
    e4ba:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e4be:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e4c2:	60d3      	str	r3, [r2, #12]
    e4c4:	4770      	bx	lr
    e4c6:	bf00      	nop

0000e4c8 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e4c8:	4a03      	ldr	r2, [pc, #12]	; (e4d8 <am_hal_rtc_osc_disable+0x10>)
    e4ca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e4ce:	f043 0010 	orr.w	r0, r3, #16
    e4d2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e4d6:	4770      	bx	lr
    e4d8:	40004200 	.word	0x40004200

0000e4dc <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    e4dc:	b510      	push	{r4, lr}
    e4de:	b082      	sub	sp, #8
    e4e0:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    e4e2:	f7ff fddd 	bl	e0a0 <am_hal_interrupt_master_disable>
    e4e6:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e4e8:	b124      	cbz	r4, e4f4 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    e4ea:	4b0c      	ldr	r3, [pc, #48]	; (e51c <am_hal_sysctrl_sleep+0x40>)
    e4ec:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e4f0:	07c3      	lsls	r3, r0, #31
    e4f2:	d50a      	bpl.n	e50a <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e4f4:	4a0a      	ldr	r2, [pc, #40]	; (e520 <am_hal_sysctrl_sleep+0x44>)
    e4f6:	6911      	ldr	r1, [r2, #16]
    e4f8:	f021 0404 	bic.w	r4, r1, #4
    e4fc:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    e4fe:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    e500:	9801      	ldr	r0, [sp, #4]
    e502:	f7ff fdd1 	bl	e0a8 <am_hal_interrupt_master_set>
}
    e506:	b002      	add	sp, #8
    e508:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e50a:	4b05      	ldr	r3, [pc, #20]	; (e520 <am_hal_sysctrl_sleep+0x44>)
    e50c:	2004      	movs	r0, #4
    e50e:	6118      	str	r0, [r3, #16]
        __WFI();
    e510:	bf30      	wfi
    AM_CRITICAL_END
    e512:	9801      	ldr	r0, [sp, #4]
    e514:	f7ff fdc8 	bl	e0a8 <am_hal_interrupt_master_set>
}
    e518:	b002      	add	sp, #8
    e51a:	bd10      	pop	{r4, pc}
    e51c:	40020000 	.word	0x40020000
    e520:	e000ed00 	.word	0xe000ed00

0000e524 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    e524:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    e526:	4a24      	ldr	r2, [pc, #144]	; (e5b8 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    e528:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    e52a:	2100      	movs	r1, #0
{
    e52c:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    e52e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    e532:	b33b      	cbz	r3, e584 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e534:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e536:	4921      	ldr	r1, [pc, #132]	; (e5bc <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e538:	4c21      	ldr	r4, [pc, #132]	; (e5c0 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e53a:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e53c:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    e540:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e542:	458c      	cmp	ip, r1
    e544:	bf98      	it	ls
    e546:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    e548:	f7ff fa1c 	bl	d984 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    e54c:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    e54e:	1c5a      	adds	r2, r3, #1
    e550:	d02f      	beq.n	e5b2 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    e552:	08da      	lsrs	r2, r3, #3
    e554:	fbb2 fef4 	udiv	lr, r2, r4
    e558:	f10e 31ff 	add.w	r1, lr, #4294967295
    e55c:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e55e:	4a16      	ldr	r2, [pc, #88]	; (e5b8 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e560:	4918      	ldr	r1, [pc, #96]	; (e5c4 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e562:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e564:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e568:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e56a:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e56c:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e570:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e574:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e578:	f240 20f7 	movw	r0, #759	; 0x2f7
    e57c:	f7ff fad6 	bl	db2c <am_hal_flash_delay>
}
    e580:	b004      	add	sp, #16
    e582:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e584:	6904      	ldr	r4, [r0, #16]
    e586:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e588:	6883      	ldr	r3, [r0, #8]
    e58a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e58e:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e590:	4c0c      	ldr	r4, [pc, #48]	; (e5c4 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e592:	3901      	subs	r1, #1
    e594:	2301      	movs	r3, #1
    e596:	408b      	lsls	r3, r1
    e598:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e59a:	6840      	ldr	r0, [r0, #4]
    e59c:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e5a0:	4302      	orrs	r2, r0
    e5a2:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e5a6:	f240 20f7 	movw	r0, #759	; 0x2f7
    e5aa:	f7ff fabf 	bl	db2c <am_hal_flash_delay>
}
    e5ae:	b004      	add	sp, #16
    e5b0:	bd10      	pop	{r4, pc}
    e5b2:	2005      	movs	r0, #5
    e5b4:	e7d3      	b.n	e55e <am_hal_tpiu_enable+0x3a>
    e5b6:	bf00      	nop
    e5b8:	e0040000 	.word	0xe0040000
    e5bc:	001da380 	.word	0x001da380
    e5c0:	000f4240 	.word	0x000f4240
    e5c4:	40020000 	.word	0x40020000
    e5c8:	6f727245 	.word	0x6f727245
    e5cc:	65722072 	.word	0x65722072
    e5d0:	6e696461 	.word	0x6e696461
    e5d4:	44412067 	.word	0x44412067
    e5d8:	6e692043 	.word	0x6e692043
    e5dc:	72726574 	.word	0x72726574
    e5e0:	20747075 	.word	0x20747075
    e5e4:	74617473 	.word	0x74617473
    e5e8:	000a7375 	.word	0x000a7375
    e5ec:	6f727245 	.word	0x6f727245
    e5f0:	6c632072 	.word	0x6c632072
    e5f4:	69726165 	.word	0x69726165
    e5f8:	4120676e 	.word	0x4120676e
    e5fc:	69204344 	.word	0x69204344
    e600:	7265746e 	.word	0x7265746e
    e604:	74707572 	.word	0x74707572
    e608:	61747320 	.word	0x61747320
    e60c:	0a737574 	.word	0x0a737574
    e610:	00000000 	.word	0x00000000
    e614:	6f727245 	.word	0x6f727245
    e618:	202d2072 	.word	0x202d2072
    e61c:	20434441 	.word	0x20434441
    e620:	706d6173 	.word	0x706d6173
    e624:	7220656c 	.word	0x7220656c
    e628:	20646165 	.word	0x20646165
    e62c:	6d6f7266 	.word	0x6d6f7266
    e630:	46494620 	.word	0x46494620
    e634:	6166204f 	.word	0x6166204f
    e638:	64656c69 	.word	0x64656c69
    e63c:	00000a2e 	.word	0x00000a2e
    e640:	20434441 	.word	0x20434441
    e644:	746f6c53 	.word	0x746f6c53
    e648:	20203d20 	.word	0x20203d20
    e64c:	000a6425 	.word	0x000a6425
    e650:	20434441 	.word	0x20434441
    e654:	756c6156 	.word	0x756c6156
    e658:	203d2065 	.word	0x203d2065
    e65c:	382e3825 	.word	0x382e3825
    e660:	00000a58 	.word	0x00000a58
    e664:	6f727245 	.word	0x6f727245
    e668:	202d2072 	.word	0x202d2072
    e66c:	65736572 	.word	0x65736572
    e670:	74617672 	.word	0x74617672
    e674:	206e6f69 	.word	0x206e6f69
    e678:	7420666f 	.word	0x7420666f
    e67c:	41206568 	.word	0x41206568
    e680:	69204344 	.word	0x69204344
    e684:	6174736e 	.word	0x6174736e
    e688:	2065636e 	.word	0x2065636e
    e68c:	6c696166 	.word	0x6c696166
    e690:	0a2e6465 	.word	0x0a2e6465
    e694:	00000000 	.word	0x00000000
    e698:	6f727245 	.word	0x6f727245
    e69c:	202d2072 	.word	0x202d2072
    e6a0:	20434441 	.word	0x20434441
    e6a4:	65776f70 	.word	0x65776f70
    e6a8:	6e6f2072 	.word	0x6e6f2072
    e6ac:	69616620 	.word	0x69616620
    e6b0:	2e64656c 	.word	0x2e64656c
    e6b4:	0000000a 	.word	0x0000000a
    e6b8:	6f727245 	.word	0x6f727245
    e6bc:	202d2072 	.word	0x202d2072
    e6c0:	666e6f63 	.word	0x666e6f63
    e6c4:	72756769 	.word	0x72756769
    e6c8:	20676e69 	.word	0x20676e69
    e6cc:	20434441 	.word	0x20434441
    e6d0:	6c696166 	.word	0x6c696166
    e6d4:	0a2e6465 	.word	0x0a2e6465
    e6d8:	00000000 	.word	0x00000000
    e6dc:	6f727245 	.word	0x6f727245
    e6e0:	202d2072 	.word	0x202d2072
    e6e4:	666e6f63 	.word	0x666e6f63
    e6e8:	72756769 	.word	0x72756769
    e6ec:	20676e69 	.word	0x20676e69
    e6f0:	20434441 	.word	0x20434441
    e6f4:	746f6c53 	.word	0x746f6c53
    e6f8:	66203020 	.word	0x66203020
    e6fc:	656c6961 	.word	0x656c6961
    e700:	000a2e64 	.word	0x000a2e64
    e704:	6f727245 	.word	0x6f727245
    e708:	202d2072 	.word	0x202d2072
    e70c:	62616e65 	.word	0x62616e65
    e710:	676e696c 	.word	0x676e696c
    e714:	43444120 	.word	0x43444120
    e718:	69616620 	.word	0x69616620
    e71c:	2e64656c 	.word	0x2e64656c
    e720:	0000000a 	.word	0x0000000a
    e724:	6f727245 	.word	0x6f727245
    e728:	202d2072 	.word	0x202d2072
    e72c:	61736964 	.word	0x61736964
    e730:	20656c62 	.word	0x20656c62
    e734:	20434441 	.word	0x20434441
    e738:	6c696166 	.word	0x6c696166
    e73c:	0a2e6465 	.word	0x0a2e6465
    e740:	00000000 	.word	0x00000000
    e744:	6f727245 	.word	0x6f727245
    e748:	202d2072 	.word	0x202d2072
    e74c:	61736964 	.word	0x61736964
    e750:	6e696c62 	.word	0x6e696c62
    e754:	68742067 	.word	0x68742067
    e758:	44412065 	.word	0x44412065
    e75c:	6f702043 	.word	0x6f702043
    e760:	20726577 	.word	0x20726577
    e764:	616d6f64 	.word	0x616d6f64
    e768:	66206e69 	.word	0x66206e69
    e76c:	656c6961 	.word	0x656c6961
    e770:	000a2e64 	.word	0x000a2e64
    e774:	6f727245 	.word	0x6f727245
    e778:	202d2072 	.word	0x202d2072
    e77c:	75746572 	.word	0x75746572
    e780:	6f206e72 	.word	0x6f206e72
    e784:	68742066 	.word	0x68742066
    e788:	44412065 	.word	0x44412065
    e78c:	6e692043 	.word	0x6e692043
    e790:	6e617473 	.word	0x6e617473
    e794:	66206563 	.word	0x66206563
    e798:	656c6961 	.word	0x656c6961
    e79c:	000a2e64 	.word	0x000a2e64
    e7a0:	6f727245 	.word	0x6f727245
    e7a4:	202d2072 	.word	0x202d2072
    e7a8:	666e6f63 	.word	0x666e6f63
    e7ac:	72756769 	.word	0x72756769
    e7b0:	20676e69 	.word	0x20676e69
    e7b4:	20656874 	.word	0x20656874
    e7b8:	74737973 	.word	0x74737973
    e7bc:	63206d65 	.word	0x63206d65
    e7c0:	6b636f6c 	.word	0x6b636f6c
    e7c4:	69616620 	.word	0x69616620
    e7c8:	2e64656c 	.word	0x2e64656c
    e7cc:	0000000a 	.word	0x0000000a
    e7d0:	6f727245 	.word	0x6f727245
    e7d4:	202d2072 	.word	0x202d2072
    e7d8:	666e6f63 	.word	0x666e6f63
    e7dc:	72756769 	.word	0x72756769
    e7e0:	20676e69 	.word	0x20676e69
    e7e4:	20656874 	.word	0x20656874
    e7e8:	74737973 	.word	0x74737973
    e7ec:	63206d65 	.word	0x63206d65
    e7f0:	65686361 	.word	0x65686361
    e7f4:	69616620 	.word	0x69616620
    e7f8:	2e64656c 	.word	0x2e64656c
    e7fc:	0000000a 	.word	0x0000000a
    e800:	6f727245 	.word	0x6f727245
    e804:	202d2072 	.word	0x202d2072
    e808:	62616e65 	.word	0x62616e65
    e80c:	676e696c 	.word	0x676e696c
    e810:	65687420 	.word	0x65687420
    e814:	73797320 	.word	0x73797320
    e818:	206d6574 	.word	0x206d6574
    e81c:	68636163 	.word	0x68636163
    e820:	61662065 	.word	0x61662065
    e824:	64656c69 	.word	0x64656c69
    e828:	00000a2e 	.word	0x00000a2e
    e82c:	6f727245 	.word	0x6f727245
    e830:	202d2072 	.word	0x202d2072
    e834:	666e6f63 	.word	0x666e6f63
    e838:	72756769 	.word	0x72756769
    e83c:	20676e69 	.word	0x20676e69
    e840:	20656874 	.word	0x20656874
    e844:	73616c66 	.word	0x73616c66
    e848:	656d2068 	.word	0x656d2068
    e84c:	79726f6d 	.word	0x79726f6d
    e850:	69616620 	.word	0x69616620
    e854:	2e64656c 	.word	0x2e64656c
    e858:	0000000a 	.word	0x0000000a
    e85c:	6f727245 	.word	0x6f727245
    e860:	202d2072 	.word	0x202d2072
    e864:	666e6f63 	.word	0x666e6f63
    e868:	72756769 	.word	0x72756769
    e86c:	20676e69 	.word	0x20676e69
    e870:	20656874 	.word	0x20656874
    e874:	4d415253 	.word	0x4d415253
    e878:	69616620 	.word	0x69616620
    e87c:	2e64656c 	.word	0x2e64656c
    e880:	0000000a 	.word	0x0000000a
    e884:	20434441 	.word	0x20434441
    e888:	6d617845 	.word	0x6d617845
    e88c:	20656c70 	.word	0x20656c70
    e890:	31207461 	.word	0x31207461
    e894:	77207a48 	.word	0x77207a48
    e898:	20687469 	.word	0x20687469
    e89c:	20434441 	.word	0x20434441
    e8a0:	61736964 	.word	0x61736964
    e8a4:	64656c62 	.word	0x64656c62
    e8a8:	74656220 	.word	0x74656220
    e8ac:	6e656577 	.word	0x6e656577
    e8b0:	6d617320 	.word	0x6d617320
    e8b4:	73656c70 	.word	0x73656c70
    e8b8:	0000000a 	.word	0x0000000a
    e8bc:	0a0a0a0a 	.word	0x0a0a0a0a
    e8c0:	0a0a0a0a 	.word	0x0a0a0a0a
    e8c4:	0a0a0a0a 	.word	0x0a0a0a0a
    e8c8:	0a0a0a0a 	.word	0x0a0a0a0a
    e8cc:	00000a0a 	.word	0x00000a0a

0000e8d0 <g_AM_PIN_16_ADCSE0>:
    e8d0:	00000000                                ....

0000e8d4 <g_AM_BSP_GPIO_ITM_SWO>:
    e8d4:	00000002                                ....

0000e8d8 <am_hal_cachectrl_defaults>:
    e8d8:	00000308                                ....

0000e8dc <g_AM_HAL_GPIO_DISABLE>:
    e8dc:	00000003                                ....

0000e8e0 <g_AM_HAL_GPIO_OUTPUT>:
    e8e0:	00000403                                ....

0000e8e4 <g_ui8Bit76Capabilities>:
    e8e4:	02800101 80010180 80800101 80808080     ................
    e8f4:	80808080 80808008 01800180 80808080     ................
    e904:	80808080 01800402 01010401 80808080     ................
    e914:	00000101                                ....

0000e918 <g_ui8Inpen>:
    e918:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e928:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e938:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e948:	00003130                                01..

0000e94c <g_ui8NCEtable>:
    e94c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e95c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e96c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e97c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e98c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e99c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e9ac:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e9bc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e9cc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e9dc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e9ec:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e9fc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ea0c:	32221202 43231303                       .."2..#C

0000ea14 <g_ui8nCEpins>:
    ea14:	02070707 00080802 01020202 01010101     ................
    ea24:	01010101 01010101 01010101 01010101     ................
    ea34:	01010101 08010101 01010008 01010101     ................
    ea44:	00000101                                ....

0000ea48 <g_am_hal_mcuctrl_flash_size>:
    ea48:	00004000 00008000 00010000 00020000     .@..............
    ea58:	00040000 00080000 00100000 00200000     .............. .
	...

0000ea88 <g_am_hal_mcuctrl_sram_size>:
    ea88:	00004000 00008000 00010000 00020000     .@..............
    ea98:	00040000 00080000 00100000 00060000     ................
	...

0000eac8 <am_hal_pwrctrl_memory_control>:
	...
    eadc:	00000001 00000001 00000001 00001fff     ................
    eaec:	00001fff 00000003 00000003 00000003     ................
    eafc:	00001fff 00001fff 00000007 00000007     ................
    eb0c:	00000007 00001fff 00001fff 0000000f     ................
    eb1c:	0000000f 0000000f 00001fff 00001fff     ................
    eb2c:	0000001f 0000001f 0000001f 00001fff     ................
    eb3c:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    eb4c:	00001fff 00001fff 0000007f 0000007f     ................
    eb5c:	0000007f 00001fff 00001fff 000000ff     ................
    eb6c:	000000ff 000000ff 00001fff 00001fff     ................
    eb7c:	000001ff 000001ff 000001ff 00001fff     ................
    eb8c:	00001fff 000003ff 000003ff 000003ff     ................
    eb9c:	00001fff 00001fff 000007ff 000007ff     ................
    ebac:	000007ff 00001fff 00001fff 00000fff     ................
    ebbc:	00000fff 00000fff 00001fff 00001fff     ................
    ebcc:	00001fff 00001fff 00001fff 00001fff     ................
    ebdc:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    ebec:	00006000 00006000 00006000 00006000     .`...`...`...`..
    ebfc:	00006000 00006000 00006000 c0000000     .`...`...`......
    ec0c:	00018000 c0000000 c0000000 00018000     ................
    ec1c:	c0007fff 0001ffff c0007fff c0007fff     ................
    ec2c:	0001ffff                                ....

0000ec30 <am_hal_pwrctrl_peripheral_control>:
	...
    ec3c:	00000001 00000004 00000004 00000002     ................
    ec4c:	00000008 00000008 00000004 00000008     ................
    ec5c:	00000008 00000008 00000008 00000008     ................
    ec6c:	00000010 00000010 00000010 00000020     ............ ...
    ec7c:	00000010 00000010 00000040 00000010     ........@.......
    ec8c:	00000010 00000080 00000004 00000004     ................
    ec9c:	00000100 00000004 00000004 00000200     ................
    ecac:	00000020 00000020 00000400 00000004      ... ...........
    ecbc:	00000004 00000800 00000040 00000040     ........@...@...
    eccc:	00001000 00000080 00000080 00002000     ............. ..
    ecdc:	00000100 00000100                       ........
