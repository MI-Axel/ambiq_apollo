
stimer_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002528  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000e528  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000114  10001028  0000e550  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   00027078  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003639  00000000  00000000  000380d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007d8  00000000  00000000  0003b710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001508  00000000  00000000  0003bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000656a  00000000  00000000  0003d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b87a  00000000  00000000  0004395a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001630  00000000  00000000  0004f250  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006f10  00000000  00000000  00050880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 21 c4 00 00 89 c4 00 00 d1 c4 00 00     ....!...........
    c010:	d1 c4 00 00 d1 c4 00 00 d1 c4 00 00 00 00 00 00     ................
	...
    c02c:	8f c4 00 00 8f c4 00 00 00 00 00 00 8f c4 00 00     ................
    c03c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c04c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c05c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c06c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c07c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c08c:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c09c:	95 c3 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c0ac:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c0bc:	8f c4 00 00 8f c4 00 00 8f c4 00 00 8f c4 00 00     ................
    c0cc:	8f c4 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b082      	sub	sp, #8
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    c1a8:	687b      	ldr	r3, [r7, #4]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d043      	beq.n	c236 <am_devices_led_init+0x96>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c1ae:	687b      	ldr	r3, [r7, #4]
    c1b0:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    c1b2:	2b31      	cmp	r3, #49	; 0x31
    c1b4:	d83f      	bhi.n	c236 <am_devices_led_init+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    c1b6:	687b      	ldr	r3, [r7, #4]
    c1b8:	685b      	ldr	r3, [r3, #4]
    c1ba:	f003 0302 	and.w	r3, r3, #2
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d01c      	beq.n	c1fc <am_devices_led_init+0x5c>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    c1c2:	687b      	ldr	r3, [r7, #4]
    c1c4:	681a      	ldr	r2, [r3, #0]
    c1c6:	4b1e      	ldr	r3, [pc, #120]	; (c240 <am_devices_led_init+0xa0>)
    c1c8:	6819      	ldr	r1, [r3, #0]
    c1ca:	4610      	mov	r0, r2
    c1cc:	f001 fb12 	bl	d7f4 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	681b      	ldr	r3, [r3, #0]
    c1d4:	2103      	movs	r1, #3
    c1d6:	4618      	mov	r0, r3
    c1d8:	f001 fc82 	bl	dae0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c1e0:	687b      	ldr	r3, [r7, #4]
    c1e2:	685b      	ldr	r3, [r3, #4]
    c1e4:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	bf14      	ite	ne
    c1ec:	2301      	movne	r3, #1
    c1ee:	2300      	moveq	r3, #0
    c1f0:	b2db      	uxtb	r3, r3
    c1f2:	4619      	mov	r1, r3
    c1f4:	4610      	mov	r0, r2
    c1f6:	f001 fc73 	bl	dae0 <am_hal_gpio_state_write>
    c1fa:	e01d      	b.n	c238 <am_devices_led_init+0x98>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    c1fc:	687b      	ldr	r3, [r7, #4]
    c1fe:	681a      	ldr	r2, [r3, #0]
    c200:	4b10      	ldr	r3, [pc, #64]	; (c244 <am_devices_led_init+0xa4>)
    c202:	6819      	ldr	r1, [r3, #0]
    c204:	4610      	mov	r0, r2
    c206:	f001 faf5 	bl	d7f4 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c20a:	687b      	ldr	r3, [r7, #4]
    c20c:	681b      	ldr	r3, [r3, #0]
    c20e:	2103      	movs	r1, #3
    c210:	4618      	mov	r0, r3
    c212:	f001 fc65 	bl	dae0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c21a:	687b      	ldr	r3, [r7, #4]
    c21c:	685b      	ldr	r3, [r3, #4]
    c21e:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c222:	2b00      	cmp	r3, #0
    c224:	bf14      	ite	ne
    c226:	2301      	movne	r3, #1
    c228:	2300      	moveq	r3, #0
    c22a:	b2db      	uxtb	r3, r3
    c22c:	4619      	mov	r1, r3
    c22e:	4610      	mov	r0, r2
    c230:	f001 fc56 	bl	dae0 <am_hal_gpio_state_write>
    c234:	e000      	b.n	c238 <am_devices_led_init+0x98>
        return;
    c236:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
    c238:	3708      	adds	r7, #8
    c23a:	46bd      	mov	sp, r7
    c23c:	bd80      	pop	{r7, pc}
    c23e:	bf00      	nop
    c240:	0000e288 	.word	0x0000e288
    c244:	0000e28c 	.word	0x0000e28c

0000c248 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    c248:	b580      	push	{r7, lr}
    c24a:	b084      	sub	sp, #16
    c24c:	af00      	add	r7, sp, #0
    c24e:	6078      	str	r0, [r7, #4]
    c250:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    c252:	687b      	ldr	r3, [r7, #4]
    c254:	2b00      	cmp	r3, #0
    c256:	d014      	beq.n	c282 <am_devices_led_array_init+0x3a>
    c258:	683b      	ldr	r3, [r7, #0]
    c25a:	2b1f      	cmp	r3, #31
    c25c:	d811      	bhi.n	c282 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    c25e:	2300      	movs	r3, #0
    c260:	60fb      	str	r3, [r7, #12]
    c262:	e009      	b.n	c278 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    c264:	68fb      	ldr	r3, [r7, #12]
    c266:	00db      	lsls	r3, r3, #3
    c268:	687a      	ldr	r2, [r7, #4]
    c26a:	4413      	add	r3, r2
    c26c:	4618      	mov	r0, r3
    c26e:	f7ff ff97 	bl	c1a0 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    c272:	68fb      	ldr	r3, [r7, #12]
    c274:	3301      	adds	r3, #1
    c276:	60fb      	str	r3, [r7, #12]
    c278:	68fa      	ldr	r2, [r7, #12]
    c27a:	683b      	ldr	r3, [r7, #0]
    c27c:	429a      	cmp	r2, r3
    c27e:	d3f1      	bcc.n	c264 <am_devices_led_array_init+0x1c>
    c280:	e000      	b.n	c284 <am_devices_led_array_init+0x3c>
        return;
    c282:	bf00      	nop
    }
}
    c284:	3710      	adds	r7, #16
    c286:	46bd      	mov	sp, r7
    c288:	bd80      	pop	{r7, pc}

0000c28a <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c28a:	b580      	push	{r7, lr}
    c28c:	b084      	sub	sp, #16
    c28e:	af00      	add	r7, sp, #0
    c290:	6078      	str	r0, [r7, #4]
    c292:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    c294:	687b      	ldr	r3, [r7, #4]
    c296:	2b00      	cmp	r3, #0
    c298:	d042      	beq.n	c320 <am_devices_led_toggle+0x96>
    c29a:	683b      	ldr	r3, [r7, #0]
    c29c:	2b1e      	cmp	r3, #30
    c29e:	d83f      	bhi.n	c320 <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c2a0:	683b      	ldr	r3, [r7, #0]
    c2a2:	00db      	lsls	r3, r3, #3
    c2a4:	687a      	ldr	r2, [r7, #4]
    c2a6:	4413      	add	r3, r2
    c2a8:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c2aa:	2b31      	cmp	r3, #49	; 0x31
    c2ac:	d838      	bhi.n	c320 <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c2ae:	683b      	ldr	r3, [r7, #0]
    c2b0:	00db      	lsls	r3, r3, #3
    c2b2:	687a      	ldr	r2, [r7, #4]
    c2b4:	4413      	add	r3, r2
    c2b6:	685b      	ldr	r3, [r3, #4]
    c2b8:	f003 0302 	and.w	r3, r3, #2
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d009      	beq.n	c2d4 <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c2c0:	683b      	ldr	r3, [r7, #0]
    c2c2:	00db      	lsls	r3, r3, #3
    c2c4:	687a      	ldr	r2, [r7, #4]
    c2c6:	4413      	add	r3, r2
    c2c8:	681b      	ldr	r3, [r3, #0]
    c2ca:	2102      	movs	r1, #2
    c2cc:	4618      	mov	r0, r3
    c2ce:	f001 fc07 	bl	dae0 <am_hal_gpio_state_write>
    c2d2:	e026      	b.n	c322 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    c2d4:	683b      	ldr	r3, [r7, #0]
    c2d6:	00db      	lsls	r3, r3, #3
    c2d8:	687a      	ldr	r2, [r7, #4]
    c2da:	4413      	add	r3, r2
    c2dc:	681b      	ldr	r3, [r3, #0]
    c2de:	f107 0208 	add.w	r2, r7, #8
    c2e2:	2102      	movs	r1, #2
    c2e4:	4618      	mov	r0, r3
    c2e6:	f001 fbc7 	bl	da78 <am_hal_gpio_state_read>
    c2ea:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    c2ec:	68fb      	ldr	r3, [r7, #12]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d117      	bne.n	c322 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    c2f2:	68bb      	ldr	r3, [r7, #8]
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	d009      	beq.n	c30c <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c2f8:	683b      	ldr	r3, [r7, #0]
    c2fa:	00db      	lsls	r3, r3, #3
    c2fc:	687a      	ldr	r2, [r7, #4]
    c2fe:	4413      	add	r3, r2
    c300:	681b      	ldr	r3, [r3, #0]
    c302:	2103      	movs	r1, #3
    c304:	4618      	mov	r0, r3
    c306:	f001 fbeb 	bl	dae0 <am_hal_gpio_state_write>
    c30a:	e00a      	b.n	c322 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c30c:	683b      	ldr	r3, [r7, #0]
    c30e:	00db      	lsls	r3, r3, #3
    c310:	687a      	ldr	r2, [r7, #4]
    c312:	4413      	add	r3, r2
    c314:	681b      	ldr	r3, [r3, #0]
    c316:	2104      	movs	r1, #4
    c318:	4618      	mov	r0, r3
    c31a:	f001 fbe1 	bl	dae0 <am_hal_gpio_state_write>
    c31e:	e000      	b.n	c322 <am_devices_led_toggle+0x98>
        return;
    c320:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif
}
    c322:	3710      	adds	r7, #16
    c324:	46bd      	mov	sp, r7
    c326:	bd80      	pop	{r7, pc}

0000c328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c328:	b480      	push	{r7}
    c32a:	b083      	sub	sp, #12
    c32c:	af00      	add	r7, sp, #0
    c32e:	4603      	mov	r3, r0
    c330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c332:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c336:	2b00      	cmp	r3, #0
    c338:	db0b      	blt.n	c352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c33a:	4909      	ldr	r1, [pc, #36]	; (c360 <__NVIC_EnableIRQ+0x38>)
    c33c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c340:	095b      	lsrs	r3, r3, #5
    c342:	79fa      	ldrb	r2, [r7, #7]
    c344:	f002 021f 	and.w	r2, r2, #31
    c348:	2001      	movs	r0, #1
    c34a:	fa00 f202 	lsl.w	r2, r0, r2
    c34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c352:	bf00      	nop
    c354:	370c      	adds	r7, #12
    c356:	46bd      	mov	sp, r7
    c358:	f85d 7b04 	ldr.w	r7, [sp], #4
    c35c:	4770      	bx	lr
    c35e:	bf00      	nop
    c360:	e000e100 	.word	0xe000e100

0000c364 <stimer_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
stimer_init(void)
{
    c364:	b580      	push	{r7, lr}
    c366:	af00      	add	r7, sp, #0
    //
    // Enable compare A interrupt in STIMER
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
    c368:	2001      	movs	r0, #1
    c36a:	f001 fe37 	bl	dfdc <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
    c36e:	2017      	movs	r0, #23
    c370:	f7ff ffda 	bl	c328 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER and run
    //
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c374:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c378:	f001 fdd0 	bl	df1c <am_hal_stimer_config>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c37c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c380:	2000      	movs	r0, #0
    c382:	f001 fdd5 	bl	df30 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ |
    c386:	f240 1003 	movw	r0, #259	; 0x103
    c38a:	f001 fdc7 	bl	df1c <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);

}
    c38e:	bf00      	nop
    c390:	bd80      	pop	{r7, pc}
	...

0000c394 <am_stimer_cmpr0_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
    c394:	b580      	push	{r7, lr}
    c396:	af00      	add	r7, sp, #0
    //
    // Check the timer interrupt status.
    //
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    c398:	2001      	movs	r0, #1
    c39a:	f001 fe29 	bl	dff0 <am_hal_stimer_int_clear>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c39e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c3a2:	2000      	movs	r0, #0
    c3a4:	f001 fdc4 	bl	df30 <am_hal_stimer_compare_delta_set>

    g_ui32Count++;
    c3a8:	4b05      	ldr	r3, [pc, #20]	; (c3c0 <am_stimer_cmpr0_isr+0x2c>)
    c3aa:	681b      	ldr	r3, [r3, #0]
    c3ac:	3301      	adds	r3, #1
    c3ae:	4a04      	ldr	r2, [pc, #16]	; (c3c0 <am_stimer_cmpr0_isr+0x2c>)
    c3b0:	6013      	str	r3, [r2, #0]

#ifdef AM_BSP_NUM_LEDS
    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 1);
    c3b2:	2101      	movs	r1, #1
    c3b4:	4803      	ldr	r0, [pc, #12]	; (c3c4 <am_stimer_cmpr0_isr+0x30>)
    c3b6:	f7ff ff68 	bl	c28a <am_devices_led_toggle>
    if ( (g_ui32Count & 0x1F) == 0 )
    {
        am_util_stdio_printf("\n");
    }
#endif
}
    c3ba:	bf00      	nop
    c3bc:	bd80      	pop	{r7, pc}
    c3be:	bf00      	nop
    c3c0:	10001028 	.word	0x10001028
    c3c4:	10001000 	.word	0x10001000

0000c3c8 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c3c8:	b580      	push	{r7, lr}
    c3ca:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c3cc:	2100      	movs	r1, #0
    c3ce:	2000      	movs	r0, #0
    c3d0:	f001 f866 	bl	d4a0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c3d4:	480f      	ldr	r0, [pc, #60]	; (c414 <main+0x4c>)
    c3d6:	f001 f82f 	bl	d438 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c3da:	f001 f857 	bl	d48c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c3de:	f000 ffa3 	bl	d328 <am_bsp_low_power_init>

#ifdef AM_BSP_NUM_LEDS
    //
    // Configure the pins for this board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c3e2:	2105      	movs	r1, #5
    c3e4:	480c      	ldr	r0, [pc, #48]	; (c418 <main+0x50>)
    c3e6:	f7ff ff2f 	bl	c248 <am_devices_led_array_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c3ea:	f001 f805 	bl	d3f8 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c3ee:	f000 ff91 	bl	d314 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("STimer Example\n");
    c3f2:	480a      	ldr	r0, [pc, #40]	; (c41c <main+0x54>)
    c3f4:	f000 ff70 	bl	d2d8 <am_util_stdio_printf>
    am_util_delay_ms(10);
    c3f8:	200a      	movs	r0, #10
    c3fa:	f000 f84b 	bl	c494 <am_util_delay_ms>

    //
    // STIMER init.
    //
    stimer_init();
    c3fe:	f7ff ffb1 	bl	c364 <stimer_init>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_master_enable();
    c402:	f001 fbb1 	bl	db68 <am_hal_interrupt_master_enable>

#ifdef AM_BSP_NUM_LEDS
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c406:	f000 ffc1 	bl	d38c <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c40a:	2001      	movs	r0, #1
    c40c:	f001 fdf6 	bl	dffc <am_hal_sysctrl_sleep>
    c410:	e7fb      	b.n	c40a <main+0x42>
    c412:	bf00      	nop
    c414:	0000e280 	.word	0x0000e280
    c418:	10001000 	.word	0x10001000
    c41c:	0000e258 	.word	0x0000e258

0000c420 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c420:	4811      	ldr	r0, [pc, #68]	; (c468 <zero_loop+0x12>)
    c422:	4912      	ldr	r1, [pc, #72]	; (c46c <zero_loop+0x16>)
    c424:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c426:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c42a:	4811      	ldr	r0, [pc, #68]	; (c470 <zero_loop+0x1a>)
    c42c:	6801      	ldr	r1, [r0, #0]
    c42e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c432:	6001      	str	r1, [r0, #0]
    c434:	f3bf 8f4f 	dsb	sy
    c438:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c43c:	480d      	ldr	r0, [pc, #52]	; (c474 <zero_loop+0x1e>)
    c43e:	490e      	ldr	r1, [pc, #56]	; (c478 <zero_loop+0x22>)
    c440:	4a0e      	ldr	r2, [pc, #56]	; (c47c <zero_loop+0x26>)

0000c442 <copy_loop>:
    c442:	f850 3b04 	ldr.w	r3, [r0], #4
    c446:	f841 3b04 	str.w	r3, [r1], #4
    c44a:	4291      	cmp	r1, r2
    c44c:	dbf9      	blt.n	c442 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c44e:	480c      	ldr	r0, [pc, #48]	; (c480 <zero_loop+0x2a>)
    c450:	490c      	ldr	r1, [pc, #48]	; (c484 <zero_loop+0x2e>)
    c452:	f04f 0200 	mov.w	r2, #0

0000c456 <zero_loop>:
    c456:	4288      	cmp	r0, r1
    c458:	bfb8      	it	lt
    c45a:	f840 2b04 	strlt.w	r2, [r0], #4
    c45e:	dbfa      	blt.n	c456 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c460:	f7ff ffb2 	bl	c3c8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c464:	be00      	bkpt	0x0000
}
    c466:	bf00      	nop
    c468:	e000ed08 	.word	0xe000ed08
    c46c:	0000c000 	.word	0x0000c000
    c470:	e000ed88 	.word	0xe000ed88
    c474:	0000e528 	.word	0x0000e528
    c478:	10001000 	.word	0x10001000
    c47c:	10001028 	.word	0x10001028
    c480:	10001028 	.word	0x10001028
    c484:	1000113c 	.word	0x1000113c

0000c488 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c488:	b480      	push	{r7}
    c48a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c48c:	e7fe      	b.n	c48c <NMI_Handler+0x4>

0000c48e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c48e:	b480      	push	{r7}
    c490:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c492:	e7fe      	b.n	c492 <DebugMon_Handler+0x4>

0000c494 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c494:	b580      	push	{r7, lr}
    c496:	b088      	sub	sp, #32
    c498:	af00      	add	r7, sp, #0
    c49a:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c49c:	f107 030c 	add.w	r3, r7, #12
    c4a0:	4618      	mov	r0, r3
    c4a2:	f001 f859 	bl	d558 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c4a6:	68fb      	ldr	r3, [r7, #12]
    c4a8:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c4aa:	69fb      	ldr	r3, [r7, #28]
    c4ac:	4a07      	ldr	r2, [pc, #28]	; (c4cc <am_util_delay_ms+0x38>)
    c4ae:	fba2 2303 	umull	r2, r3, r2, r3
    c4b2:	099b      	lsrs	r3, r3, #6
    c4b4:	687a      	ldr	r2, [r7, #4]
    c4b6:	fb02 f303 	mul.w	r3, r2, r3
    c4ba:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c4bc:	69b8      	ldr	r0, [r7, #24]
    c4be:	f001 f869 	bl	d594 <am_hal_flash_delay>
}
    c4c2:	bf00      	nop
    c4c4:	3720      	adds	r7, #32
    c4c6:	46bd      	mov	sp, r7
    c4c8:	bd80      	pop	{r7, pc}
    c4ca:	bf00      	nop
    c4cc:	057619f1 	.word	0x057619f1

0000c4d0 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c4d0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c4d2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c4d4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c4d6:	f000 f809 	bl	c4ec <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c4da:	bd01      	pop	{r0, pc}
}
    c4dc:	bf00      	nop
    c4de:	4618      	mov	r0, r3

0000c4e0 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c4e0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c4e2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c4e4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c4e6:	4770      	bx	lr
}
    c4e8:	bf00      	nop
    c4ea:	4618      	mov	r0, r3

0000c4ec <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c4ec:	b580      	push	{r7, lr}
    c4ee:	b096      	sub	sp, #88	; 0x58
    c4f0:	af00      	add	r7, sp, #0
    c4f2:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c4f4:	f107 030c 	add.w	r3, r7, #12
    c4f8:	2200      	movs	r2, #0
    c4fa:	601a      	str	r2, [r3, #0]
    c4fc:	605a      	str	r2, [r3, #4]
    c4fe:	609a      	str	r2, [r3, #8]
    c500:	60da      	str	r2, [r3, #12]
    c502:	611a      	str	r2, [r3, #16]
    c504:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c506:	2300      	movs	r3, #0
    c508:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c50a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c50c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c50e:	4b2e      	ldr	r3, [pc, #184]	; (c5c8 <am_util_faultisr_collect_data+0xdc>)
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c516:	b2db      	uxtb	r3, r3
    c518:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c51e:	0a1b      	lsrs	r3, r3, #8
    c520:	b2db      	uxtb	r3, r3
    c522:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c528:	0c1b      	lsrs	r3, r3, #16
    c52a:	b29b      	uxth	r3, r3
    c52c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c530:	4b26      	ldr	r3, [pc, #152]	; (c5cc <am_util_faultisr_collect_data+0xe0>)
    c532:	681b      	ldr	r3, [r3, #0]
    c534:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c536:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c53a:	b2db      	uxtb	r3, r3
    c53c:	f003 0302 	and.w	r3, r3, #2
    c540:	2b00      	cmp	r3, #0
    c542:	d005      	beq.n	c550 <am_util_faultisr_collect_data+0x64>
    c544:	6879      	ldr	r1, [r7, #4]
    c546:	2006      	movs	r0, #6
    c548:	f7ff ffca 	bl	c4e0 <getStackedReg>
    c54c:	4603      	mov	r3, r0
    c54e:	e001      	b.n	c554 <am_util_faultisr_collect_data+0x68>
    c550:	f04f 33ff 	mov.w	r3, #4294967295
    c554:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c556:	6879      	ldr	r1, [r7, #4]
    c558:	2000      	movs	r0, #0
    c55a:	f7ff ffc1 	bl	c4e0 <getStackedReg>
    c55e:	4603      	mov	r3, r0
    c560:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c562:	6879      	ldr	r1, [r7, #4]
    c564:	2001      	movs	r0, #1
    c566:	f7ff ffbb 	bl	c4e0 <getStackedReg>
    c56a:	4603      	mov	r3, r0
    c56c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c56e:	6879      	ldr	r1, [r7, #4]
    c570:	2002      	movs	r0, #2
    c572:	f7ff ffb5 	bl	c4e0 <getStackedReg>
    c576:	4603      	mov	r3, r0
    c578:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c57a:	6879      	ldr	r1, [r7, #4]
    c57c:	2003      	movs	r0, #3
    c57e:	f7ff ffaf 	bl	c4e0 <getStackedReg>
    c582:	4603      	mov	r3, r0
    c584:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c586:	6879      	ldr	r1, [r7, #4]
    c588:	2004      	movs	r0, #4
    c58a:	f7ff ffa9 	bl	c4e0 <getStackedReg>
    c58e:	4603      	mov	r3, r0
    c590:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c592:	6879      	ldr	r1, [r7, #4]
    c594:	2005      	movs	r0, #5
    c596:	f7ff ffa3 	bl	c4e0 <getStackedReg>
    c59a:	4603      	mov	r3, r0
    c59c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c59e:	6879      	ldr	r1, [r7, #4]
    c5a0:	2006      	movs	r0, #6
    c5a2:	f7ff ff9d 	bl	c4e0 <getStackedReg>
    c5a6:	4603      	mov	r3, r0
    c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5aa:	6879      	ldr	r1, [r7, #4]
    c5ac:	2007      	movs	r0, #7
    c5ae:	f7ff ff97 	bl	c4e0 <getStackedReg>
    c5b2:	4603      	mov	r3, r0
    c5b4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c5b6:	f107 030c 	add.w	r3, r7, #12
    c5ba:	4619      	mov	r1, r3
    c5bc:	2002      	movs	r0, #2
    c5be:	f001 fb6b 	bl	dc98 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c5c2:	2300      	movs	r3, #0
    c5c4:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c5c6:	e7fe      	b.n	c5c6 <am_util_faultisr_collect_data+0xda>
    c5c8:	e000ed28 	.word	0xe000ed28
    c5cc:	e000ed38 	.word	0xe000ed38

0000c5d0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c5d0:	b480      	push	{r7}
    c5d2:	b083      	sub	sp, #12
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c5d8:	4a04      	ldr	r2, [pc, #16]	; (c5ec <am_util_stdio_printf_init+0x1c>)
    c5da:	687b      	ldr	r3, [r7, #4]
    c5dc:	6013      	str	r3, [r2, #0]
}
    c5de:	bf00      	nop
    c5e0:	370c      	adds	r7, #12
    c5e2:	46bd      	mov	sp, r7
    c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5e8:	4770      	bx	lr
    c5ea:	bf00      	nop
    c5ec:	10001138 	.word	0x10001138

0000c5f0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c5f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5f4:	b096      	sub	sp, #88	; 0x58
    c5f6:	af00      	add	r7, sp, #0
    c5f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c5fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c600:	0025      	movs	r5, r4
    c602:	2600      	movs	r6, #0
    c604:	ea55 0306 	orrs.w	r3, r5, r6
    c608:	f000 80a0 	beq.w	c74c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c60c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c610:	0862      	lsrs	r2, r4, #1
    c612:	ea4f 0133 	mov.w	r1, r3, rrx
    c616:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c61a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c61e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c622:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c626:	eb11 0308 	adds.w	r3, r1, r8
    c62a:	eb42 0409 	adc.w	r4, r2, r9
    c62e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c632:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c636:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c63a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c63e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c642:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c646:	eb13 030a 	adds.w	r3, r3, sl
    c64a:	eb44 040b 	adc.w	r4, r4, fp
    c64e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c652:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c656:	0a1a      	lsrs	r2, r3, #8
    c658:	62ba      	str	r2, [r7, #40]	; 0x28
    c65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c65c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c660:	62ba      	str	r2, [r7, #40]	; 0x28
    c662:	0a23      	lsrs	r3, r4, #8
    c664:	62fb      	str	r3, [r7, #44]	; 0x2c
    c666:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c66a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c66e:	18c9      	adds	r1, r1, r3
    c670:	eb42 0204 	adc.w	r2, r2, r4
    c674:	460b      	mov	r3, r1
    c676:	4614      	mov	r4, r2
    c678:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c67c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c680:	0c1a      	lsrs	r2, r3, #16
    c682:	623a      	str	r2, [r7, #32]
    c684:	6a3a      	ldr	r2, [r7, #32]
    c686:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c68a:	623a      	str	r2, [r7, #32]
    c68c:	0c23      	lsrs	r3, r4, #16
    c68e:	627b      	str	r3, [r7, #36]	; 0x24
    c690:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c694:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c698:	18c9      	adds	r1, r1, r3
    c69a:	eb42 0204 	adc.w	r2, r2, r4
    c69e:	460b      	mov	r3, r1
    c6a0:	4614      	mov	r4, r2
    c6a2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c6a6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6aa:	0023      	movs	r3, r4
    c6ac:	603b      	str	r3, [r7, #0]
    c6ae:	2300      	movs	r3, #0
    c6b0:	607b      	str	r3, [r7, #4]
    c6b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6b6:	e897 0006 	ldmia.w	r7, {r1, r2}
    c6ba:	18c9      	adds	r1, r1, r3
    c6bc:	eb42 0204 	adc.w	r2, r2, r4
    c6c0:	460b      	mov	r3, r1
    c6c2:	4614      	mov	r4, r2
    c6c4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c6c8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6cc:	08da      	lsrs	r2, r3, #3
    c6ce:	613a      	str	r2, [r7, #16]
    c6d0:	693a      	ldr	r2, [r7, #16]
    c6d2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c6d6:	613a      	str	r2, [r7, #16]
    c6d8:	08e3      	lsrs	r3, r4, #3
    c6da:	617b      	str	r3, [r7, #20]
    c6dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c6e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c6e4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c6e8:	460b      	mov	r3, r1
    c6ea:	4614      	mov	r4, r2
    c6ec:	00a0      	lsls	r0, r4, #2
    c6ee:	60f8      	str	r0, [r7, #12]
    c6f0:	68f8      	ldr	r0, [r7, #12]
    c6f2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c6f6:	60f8      	str	r0, [r7, #12]
    c6f8:	009b      	lsls	r3, r3, #2
    c6fa:	60bb      	str	r3, [r7, #8]
    c6fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c700:	185b      	adds	r3, r3, r1
    c702:	eb44 0402 	adc.w	r4, r4, r2
    c706:	18db      	adds	r3, r3, r3
    c708:	eb44 0404 	adc.w	r4, r4, r4
    c70c:	4619      	mov	r1, r3
    c70e:	4622      	mov	r2, r4
    c710:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c714:	1a5b      	subs	r3, r3, r1
    c716:	eb64 0402 	sbc.w	r4, r4, r2
    c71a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c71e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c722:	3306      	adds	r3, #6
    c724:	f144 0400 	adc.w	r4, r4, #0
    c728:	091a      	lsrs	r2, r3, #4
    c72a:	61ba      	str	r2, [r7, #24]
    c72c:	69ba      	ldr	r2, [r7, #24]
    c72e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c732:	61ba      	str	r2, [r7, #24]
    c734:	0923      	lsrs	r3, r4, #4
    c736:	61fb      	str	r3, [r7, #28]
    c738:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c73c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c740:	18c9      	adds	r1, r1, r3
    c742:	eb42 0204 	adc.w	r2, r2, r4
    c746:	460b      	mov	r3, r1
    c748:	4614      	mov	r4, r2
    c74a:	e029      	b.n	c7a0 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c74e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c752:	085a      	lsrs	r2, r3, #1
    c754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c756:	089b      	lsrs	r3, r3, #2
    c758:	4413      	add	r3, r2
    c75a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c75e:	091b      	lsrs	r3, r3, #4
    c760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c762:	4413      	add	r3, r2
    c764:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c768:	0a1b      	lsrs	r3, r3, #8
    c76a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c76c:	4413      	add	r3, r2
    c76e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c772:	0c1b      	lsrs	r3, r3, #16
    c774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c776:	4413      	add	r3, r2
    c778:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c77c:	08db      	lsrs	r3, r3, #3
    c77e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c782:	4613      	mov	r3, r2
    c784:	009b      	lsls	r3, r3, #2
    c786:	4413      	add	r3, r2
    c788:	005b      	lsls	r3, r3, #1
    c78a:	461a      	mov	r2, r3
    c78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c78e:	1a9b      	subs	r3, r3, r2
    c790:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c794:	3306      	adds	r3, #6
    c796:	091a      	lsrs	r2, r3, #4
    c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c79a:	4413      	add	r3, r2
    c79c:	f04f 0400 	mov.w	r4, #0
    }
}
    c7a0:	4618      	mov	r0, r3
    c7a2:	4621      	mov	r1, r4
    c7a4:	3758      	adds	r7, #88	; 0x58
    c7a6:	46bd      	mov	sp, r7
    c7a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c7ac:	4770      	bx	lr

0000c7ae <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c7ae:	b590      	push	{r4, r7, lr}
    c7b0:	b085      	sub	sp, #20
    c7b2:	af00      	add	r7, sp, #0
    c7b4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c7b8:	683a      	ldr	r2, [r7, #0]
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	4313      	orrs	r3, r2
    c7be:	2b00      	cmp	r3, #0
    c7c0:	bf0c      	ite	eq
    c7c2:	2301      	moveq	r3, #1
    c7c4:	2300      	movne	r3, #0
    c7c6:	b2db      	uxtb	r3, r3
    c7c8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c7ca:	e008      	b.n	c7de <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c7cc:	e9d7 0100 	ldrd	r0, r1, [r7]
    c7d0:	f7ff ff0e 	bl	c5f0 <divu64_10>
    c7d4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c7d8:	68fb      	ldr	r3, [r7, #12]
    c7da:	3301      	adds	r3, #1
    c7dc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c7de:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7e2:	4323      	orrs	r3, r4
    c7e4:	d1f2      	bne.n	c7cc <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c7e6:	68fb      	ldr	r3, [r7, #12]
}
    c7e8:	4618      	mov	r0, r3
    c7ea:	3714      	adds	r7, #20
    c7ec:	46bd      	mov	sp, r7
    c7ee:	bd90      	pop	{r4, r7, pc}

0000c7f0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c7f0:	b590      	push	{r4, r7, lr}
    c7f2:	b083      	sub	sp, #12
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c7fa:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7fe:	2b00      	cmp	r3, #0
    c800:	f174 0300 	sbcs.w	r3, r4, #0
    c804:	da06      	bge.n	c814 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c806:	e897 0018 	ldmia.w	r7, {r3, r4}
    c80a:	425b      	negs	r3, r3
    c80c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c810:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c814:	e897 0018 	ldmia.w	r7, {r3, r4}
    c818:	4618      	mov	r0, r3
    c81a:	4621      	mov	r1, r4
    c81c:	f7ff ffc7 	bl	c7ae <ndigits_in_u64>
    c820:	4603      	mov	r3, r0
}
    c822:	4618      	mov	r0, r3
    c824:	370c      	adds	r7, #12
    c826:	46bd      	mov	sp, r7
    c828:	bd90      	pop	{r4, r7, pc}

0000c82a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c82a:	b490      	push	{r4, r7}
    c82c:	b084      	sub	sp, #16
    c82e:	af00      	add	r7, sp, #0
    c830:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c834:	6839      	ldr	r1, [r7, #0]
    c836:	687a      	ldr	r2, [r7, #4]
    c838:	430a      	orrs	r2, r1
    c83a:	2a00      	cmp	r2, #0
    c83c:	bf0c      	ite	eq
    c83e:	2201      	moveq	r2, #1
    c840:	2200      	movne	r2, #0
    c842:	b2d2      	uxtb	r2, r2
    c844:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c846:	e00a      	b.n	c85e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c848:	e897 0006 	ldmia.w	r7, {r1, r2}
    c84c:	090b      	lsrs	r3, r1, #4
    c84e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c852:	0914      	lsrs	r4, r2, #4
    c854:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c858:	68fa      	ldr	r2, [r7, #12]
    c85a:	3201      	adds	r2, #1
    c85c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c85e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c862:	430a      	orrs	r2, r1
    c864:	d1f0      	bne.n	c848 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c866:	68fb      	ldr	r3, [r7, #12]
}
    c868:	4618      	mov	r0, r3
    c86a:	3710      	adds	r7, #16
    c86c:	46bd      	mov	sp, r7
    c86e:	bc90      	pop	{r4, r7}
    c870:	4770      	bx	lr

0000c872 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c872:	b480      	push	{r7}
    c874:	b087      	sub	sp, #28
    c876:	af00      	add	r7, sp, #0
    c878:	6078      	str	r0, [r7, #4]
    c87a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c87c:	2300      	movs	r3, #0
    c87e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c880:	2300      	movs	r3, #0
    c882:	613b      	str	r3, [r7, #16]
    c884:	2300      	movs	r3, #0
    c886:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	781b      	ldrb	r3, [r3, #0]
    c88c:	2b2d      	cmp	r3, #45	; 0x2d
    c88e:	d11b      	bne.n	c8c8 <decstr_to_int+0x56>
    {
        bNeg = true;
    c890:	2301      	movs	r3, #1
    c892:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c894:	687b      	ldr	r3, [r7, #4]
    c896:	3301      	adds	r3, #1
    c898:	607b      	str	r3, [r7, #4]
        uCnt++;
    c89a:	68fb      	ldr	r3, [r7, #12]
    c89c:	3301      	adds	r3, #1
    c89e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8a0:	e012      	b.n	c8c8 <decstr_to_int+0x56>
    {
        ++uCnt;
    c8a2:	68fb      	ldr	r3, [r7, #12]
    c8a4:	3301      	adds	r3, #1
    c8a6:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c8a8:	693a      	ldr	r2, [r7, #16]
    c8aa:	4613      	mov	r3, r2
    c8ac:	009b      	lsls	r3, r3, #2
    c8ae:	4413      	add	r3, r2
    c8b0:	005b      	lsls	r3, r3, #1
    c8b2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	461a      	mov	r2, r3
    c8ba:	693b      	ldr	r3, [r7, #16]
    c8bc:	4413      	add	r3, r2
    c8be:	3b30      	subs	r3, #48	; 0x30
    c8c0:	613b      	str	r3, [r7, #16]
        pcStr++;
    c8c2:	687b      	ldr	r3, [r7, #4]
    c8c4:	3301      	adds	r3, #1
    c8c6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8c8:	687b      	ldr	r3, [r7, #4]
    c8ca:	781b      	ldrb	r3, [r3, #0]
    c8cc:	2b2f      	cmp	r3, #47	; 0x2f
    c8ce:	d903      	bls.n	c8d8 <decstr_to_int+0x66>
    c8d0:	687b      	ldr	r3, [r7, #4]
    c8d2:	781b      	ldrb	r3, [r3, #0]
    c8d4:	2b39      	cmp	r3, #57	; 0x39
    c8d6:	d9e4      	bls.n	c8a2 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c8d8:	683b      	ldr	r3, [r7, #0]
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d002      	beq.n	c8e4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c8de:	683b      	ldr	r3, [r7, #0]
    c8e0:	68fa      	ldr	r2, [r7, #12]
    c8e2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c8e4:	7dfb      	ldrb	r3, [r7, #23]
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d002      	beq.n	c8f0 <decstr_to_int+0x7e>
    c8ea:	693b      	ldr	r3, [r7, #16]
    c8ec:	425b      	negs	r3, r3
    c8ee:	e000      	b.n	c8f2 <decstr_to_int+0x80>
    c8f0:	693b      	ldr	r3, [r7, #16]
}
    c8f2:	4618      	mov	r0, r3
    c8f4:	371c      	adds	r7, #28
    c8f6:	46bd      	mov	sp, r7
    c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8fc:	4770      	bx	lr

0000c8fe <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8fe:	b590      	push	{r4, r7, lr}
    c900:	b091      	sub	sp, #68	; 0x44
    c902:	af00      	add	r7, sp, #0
    c904:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c908:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c90a:	2300      	movs	r3, #0
    c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
    c90e:	2300      	movs	r3, #0
    c910:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c916:	f7ff fe6b 	bl	c5f0 <divu64_10>
    c91a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c91e:	68b9      	ldr	r1, [r7, #8]
    c920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c922:	4613      	mov	r3, r2
    c924:	009b      	lsls	r3, r3, #2
    c926:	4413      	add	r3, r2
    c928:	005b      	lsls	r3, r3, #1
    c92a:	1acb      	subs	r3, r1, r3
    c92c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c930:	1c5a      	adds	r2, r3, #1
    c932:	63fa      	str	r2, [r7, #60]	; 0x3c
    c934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c936:	b2d2      	uxtb	r2, r2
    c938:	3230      	adds	r2, #48	; 0x30
    c93a:	b2d2      	uxtb	r2, r2
    c93c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c940:	440b      	add	r3, r1
    c942:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c946:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c94a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c94e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c952:	4323      	orrs	r3, r4
    c954:	d1dd      	bne.n	c912 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c958:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	2b00      	cmp	r3, #0
    c95e:	d011      	beq.n	c984 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c960:	e008      	b.n	c974 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	1c5a      	adds	r2, r3, #1
    c966:	607a      	str	r2, [r7, #4]
    c968:	f107 0110 	add.w	r1, r7, #16
    c96c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c96e:	440a      	add	r2, r1
    c970:	7812      	ldrb	r2, [r2, #0]
    c972:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c976:	1e5a      	subs	r2, r3, #1
    c978:	63fa      	str	r2, [r7, #60]	; 0x3c
    c97a:	2b00      	cmp	r3, #0
    c97c:	d1f1      	bne.n	c962 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c97e:	687b      	ldr	r3, [r7, #4]
    c980:	2200      	movs	r2, #0
    c982:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c986:	4618      	mov	r0, r3
    c988:	3744      	adds	r7, #68	; 0x44
    c98a:	46bd      	mov	sp, r7
    c98c:	bd90      	pop	{r4, r7, pc}

0000c98e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c98e:	b4b0      	push	{r4, r5, r7}
    c990:	b08d      	sub	sp, #52	; 0x34
    c992:	af00      	add	r7, sp, #0
    c994:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c998:	607a      	str	r2, [r7, #4]
    c99a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c99c:	2300      	movs	r3, #0
    c99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c9a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c9a4:	4313      	orrs	r3, r2
    c9a6:	d131      	bne.n	ca0c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9aa:	1c5a      	adds	r2, r3, #1
    c9ac:	62fa      	str	r2, [r7, #44]	; 0x2c
    c9ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c9b2:	4413      	add	r3, r2
    c9b4:	2230      	movs	r2, #48	; 0x30
    c9b6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c9ba:	e027      	b.n	ca0c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c9bc:	7a3b      	ldrb	r3, [r7, #8]
    c9be:	f003 030f 	and.w	r3, r3, #15
    c9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c9c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c9ca:	2b09      	cmp	r3, #9
    c9cc:	d90a      	bls.n	c9e4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c9ce:	78fb      	ldrb	r3, [r7, #3]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d001      	beq.n	c9d8 <uint64_to_hexstr+0x4a>
    c9d4:	2227      	movs	r2, #39	; 0x27
    c9d6:	e000      	b.n	c9da <uint64_to_hexstr+0x4c>
    c9d8:	2207      	movs	r2, #7
    c9da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c9de:	4413      	add	r3, r2
    c9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9e6:	1c5a      	adds	r2, r3, #1
    c9e8:	62fa      	str	r2, [r7, #44]	; 0x2c
    c9ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c9ee:	3230      	adds	r2, #48	; 0x30
    c9f0:	b2d2      	uxtb	r2, r2
    c9f2:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c9f6:	440b      	add	r3, r1
    c9f8:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c9fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca00:	0914      	lsrs	r4, r2, #4
    ca02:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    ca06:	091d      	lsrs	r5, r3, #4
    ca08:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    ca0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca10:	4313      	orrs	r3, r2
    ca12:	d1d3      	bne.n	c9bc <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca16:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ca18:	687b      	ldr	r3, [r7, #4]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d011      	beq.n	ca42 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    ca1e:	e008      	b.n	ca32 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    ca20:	687b      	ldr	r3, [r7, #4]
    ca22:	1c5a      	adds	r2, r3, #1
    ca24:	607a      	str	r2, [r7, #4]
    ca26:	f107 0110 	add.w	r1, r7, #16
    ca2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca2c:	440a      	add	r2, r1
    ca2e:	7812      	ldrb	r2, [r2, #0]
    ca30:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca34:	1e5a      	subs	r2, r3, #1
    ca36:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca38:	2b00      	cmp	r3, #0
    ca3a:	d1f1      	bne.n	ca20 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	2200      	movs	r2, #0
    ca40:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ca44:	4618      	mov	r0, r3
    ca46:	3734      	adds	r7, #52	; 0x34
    ca48:	46bd      	mov	sp, r7
    ca4a:	bcb0      	pop	{r4, r5, r7}
    ca4c:	4770      	bx	lr

0000ca4e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca4e:	b480      	push	{r7}
    ca50:	b085      	sub	sp, #20
    ca52:	af00      	add	r7, sp, #0
    ca54:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    ca56:	2300      	movs	r3, #0
    ca58:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    ca5a:	687b      	ldr	r3, [r7, #4]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d104      	bne.n	ca6a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    ca60:	68fb      	ldr	r3, [r7, #12]
    ca62:	e009      	b.n	ca78 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca64:	68fb      	ldr	r3, [r7, #12]
    ca66:	3301      	adds	r3, #1
    ca68:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    ca6a:	687b      	ldr	r3, [r7, #4]
    ca6c:	1c5a      	adds	r2, r3, #1
    ca6e:	607a      	str	r2, [r7, #4]
    ca70:	781b      	ldrb	r3, [r3, #0]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d1f6      	bne.n	ca64 <simple_strlen+0x16>
    }
    return ui32RetVal;
    ca76:	68fb      	ldr	r3, [r7, #12]
}
    ca78:	4618      	mov	r0, r3
    ca7a:	3714      	adds	r7, #20
    ca7c:	46bd      	mov	sp, r7
    ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca82:	4770      	bx	lr

0000ca84 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ca84:	b480      	push	{r7}
    ca86:	b087      	sub	sp, #28
    ca88:	af00      	add	r7, sp, #0
    ca8a:	60f8      	str	r0, [r7, #12]
    ca8c:	460b      	mov	r3, r1
    ca8e:	607a      	str	r2, [r7, #4]
    ca90:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    ca92:	2300      	movs	r3, #0
    ca94:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    ca96:	687b      	ldr	r3, [r7, #4]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	dc0c      	bgt.n	cab6 <padbuffer+0x32>
    {
        return i32Cnt;
    ca9c:	697b      	ldr	r3, [r7, #20]
    ca9e:	e010      	b.n	cac2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    caa0:	68fb      	ldr	r3, [r7, #12]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d004      	beq.n	cab0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    caa6:	68fb      	ldr	r3, [r7, #12]
    caa8:	1c5a      	adds	r2, r3, #1
    caaa:	60fa      	str	r2, [r7, #12]
    caac:	7afa      	ldrb	r2, [r7, #11]
    caae:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cab0:	697b      	ldr	r3, [r7, #20]
    cab2:	3301      	adds	r3, #1
    cab4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	1e5a      	subs	r2, r3, #1
    caba:	607a      	str	r2, [r7, #4]
    cabc:	2b00      	cmp	r3, #0
    cabe:	d1ef      	bne.n	caa0 <padbuffer+0x1c>
    }

    return i32Cnt;
    cac0:	697b      	ldr	r3, [r7, #20]
}
    cac2:	4618      	mov	r0, r3
    cac4:	371c      	adds	r7, #28
    cac6:	46bd      	mov	sp, r7
    cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cacc:	4770      	bx	lr
	...

0000cad0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cad0:	b590      	push	{r4, r7, lr}
    cad2:	b08f      	sub	sp, #60	; 0x3c
    cad4:	af00      	add	r7, sp, #0
    cad6:	60f8      	str	r0, [r7, #12]
    cad8:	60b9      	str	r1, [r7, #8]
    cada:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cadc:	68bb      	ldr	r3, [r7, #8]
    cade:	681b      	ldr	r3, [r3, #0]
    cae0:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cae4:	2b03      	cmp	r3, #3
    cae6:	dc02      	bgt.n	caee <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cae8:	f06f 0302 	mvn.w	r3, #2
    caec:	e0e7      	b.n	ccbe <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    caee:	edd7 7a03 	vldr	s15, [r7, #12]
    caf2:	eef5 7a40 	vcmp.f32	s15, #0.0
    caf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cafa:	d104      	bne.n	cb06 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cafc:	68bb      	ldr	r3, [r7, #8]
    cafe:	4a72      	ldr	r2, [pc, #456]	; (ccc8 <ftoa+0x1f8>)
    cb00:	601a      	str	r2, [r3, #0]
        return 3;
    cb02:	2303      	movs	r3, #3
    cb04:	e0db      	b.n	ccbe <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cb06:	68bb      	ldr	r3, [r7, #8]
    cb08:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cb0a:	68fb      	ldr	r3, [r7, #12]
    cb0c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb0e:	693b      	ldr	r3, [r7, #16]
    cb10:	15db      	asrs	r3, r3, #23
    cb12:	b2db      	uxtb	r3, r3
    cb14:	3b7f      	subs	r3, #127	; 0x7f
    cb16:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb18:	693b      	ldr	r3, [r7, #16]
    cb1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cb1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cb22:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cb24:	2300      	movs	r3, #0
    cb26:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cb28:	2300      	movs	r3, #0
    cb2a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cb2c:	69fb      	ldr	r3, [r7, #28]
    cb2e:	2b1e      	cmp	r3, #30
    cb30:	dd02      	ble.n	cb38 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb32:	f06f 0301 	mvn.w	r3, #1
    cb36:	e0c2      	b.n	ccbe <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cb38:	69fb      	ldr	r3, [r7, #28]
    cb3a:	f113 0f17 	cmn.w	r3, #23
    cb3e:	da02      	bge.n	cb46 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb40:	f04f 33ff 	mov.w	r3, #4294967295
    cb44:	e0bb      	b.n	ccbe <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cb46:	69fb      	ldr	r3, [r7, #28]
    cb48:	2b16      	cmp	r3, #22
    cb4a:	dd06      	ble.n	cb5a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb4c:	69fb      	ldr	r3, [r7, #28]
    cb4e:	3b17      	subs	r3, #23
    cb50:	69ba      	ldr	r2, [r7, #24]
    cb52:	fa02 f303 	lsl.w	r3, r2, r3
    cb56:	637b      	str	r3, [r7, #52]	; 0x34
    cb58:	e01a      	b.n	cb90 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cb5a:	69fb      	ldr	r3, [r7, #28]
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	db0f      	blt.n	cb80 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb60:	69fb      	ldr	r3, [r7, #28]
    cb62:	f1c3 0317 	rsb	r3, r3, #23
    cb66:	69ba      	ldr	r2, [r7, #24]
    cb68:	fa42 f303 	asr.w	r3, r2, r3
    cb6c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cb6e:	69fb      	ldr	r3, [r7, #28]
    cb70:	3301      	adds	r3, #1
    cb72:	69ba      	ldr	r2, [r7, #24]
    cb74:	fa02 f303 	lsl.w	r3, r2, r3
    cb78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb7c:	633b      	str	r3, [r7, #48]	; 0x30
    cb7e:	e007      	b.n	cb90 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cb80:	69bb      	ldr	r3, [r7, #24]
    cb82:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cb86:	69fb      	ldr	r3, [r7, #28]
    cb88:	43db      	mvns	r3, r3
    cb8a:	fa42 f303 	asr.w	r3, r2, r3
    cb8e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cb90:	693b      	ldr	r3, [r7, #16]
    cb92:	2b00      	cmp	r3, #0
    cb94:	da04      	bge.n	cba0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cb96:	68bb      	ldr	r3, [r7, #8]
    cb98:	1c5a      	adds	r2, r3, #1
    cb9a:	60ba      	str	r2, [r7, #8]
    cb9c:	222d      	movs	r2, #45	; 0x2d
    cb9e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cba2:	2b00      	cmp	r3, #0
    cba4:	d105      	bne.n	cbb2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	1c5a      	adds	r2, r3, #1
    cbaa:	60ba      	str	r2, [r7, #8]
    cbac:	2230      	movs	r2, #48	; 0x30
    cbae:	701a      	strb	r2, [r3, #0]
    cbb0:	e021      	b.n	cbf6 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	dd08      	ble.n	cbca <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbba:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cbbe:	68ba      	ldr	r2, [r7, #8]
    cbc0:	4618      	mov	r0, r3
    cbc2:	4621      	mov	r1, r4
    cbc4:	f7ff fe9b 	bl	c8fe <uint64_to_str>
    cbc8:	e011      	b.n	cbee <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cbca:	68bb      	ldr	r3, [r7, #8]
    cbcc:	1c5a      	adds	r2, r3, #1
    cbce:	60ba      	str	r2, [r7, #8]
    cbd0:	222d      	movs	r2, #45	; 0x2d
    cbd2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbd6:	425b      	negs	r3, r3
    cbd8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cbdc:	68ba      	ldr	r2, [r7, #8]
    cbde:	4618      	mov	r0, r3
    cbe0:	4621      	mov	r1, r4
    cbe2:	f7ff fe8c 	bl	c8fe <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cbe6:	e002      	b.n	cbee <ftoa+0x11e>
        {
            pcBuf++;
    cbe8:	68bb      	ldr	r3, [r7, #8]
    cbea:	3301      	adds	r3, #1
    cbec:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cbee:	68bb      	ldr	r3, [r7, #8]
    cbf0:	781b      	ldrb	r3, [r3, #0]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d1f8      	bne.n	cbe8 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cbf6:	68bb      	ldr	r3, [r7, #8]
    cbf8:	1c5a      	adds	r2, r3, #1
    cbfa:	60ba      	str	r2, [r7, #8]
    cbfc:	222e      	movs	r2, #46	; 0x2e
    cbfe:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc02:	2b00      	cmp	r3, #0
    cc04:	d105      	bne.n	cc12 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cc06:	68bb      	ldr	r3, [r7, #8]
    cc08:	1c5a      	adds	r2, r3, #1
    cc0a:	60ba      	str	r2, [r7, #8]
    cc0c:	2230      	movs	r2, #48	; 0x30
    cc0e:	701a      	strb	r2, [r3, #0]
    cc10:	e04f      	b.n	ccb2 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cc12:	68ba      	ldr	r2, [r7, #8]
    cc14:	6a3b      	ldr	r3, [r7, #32]
    cc16:	1ad3      	subs	r3, r2, r3
    cc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cc1a:	1ad3      	subs	r3, r2, r3
    cc1c:	3b01      	subs	r3, #1
    cc1e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cc20:	697a      	ldr	r2, [r7, #20]
    cc22:	687b      	ldr	r3, [r7, #4]
    cc24:	4293      	cmp	r3, r2
    cc26:	bfa8      	it	ge
    cc28:	4613      	movge	r3, r2
    cc2a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cc2c:	2300      	movs	r3, #0
    cc2e:	62bb      	str	r3, [r7, #40]	; 0x28
    cc30:	e015      	b.n	cc5e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cc32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc34:	4613      	mov	r3, r2
    cc36:	009b      	lsls	r3, r3, #2
    cc38:	4413      	add	r3, r2
    cc3a:	005b      	lsls	r3, r3, #1
    cc3c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc3e:	68bb      	ldr	r3, [r7, #8]
    cc40:	1c5a      	adds	r2, r3, #1
    cc42:	60ba      	str	r2, [r7, #8]
    cc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc46:	1612      	asrs	r2, r2, #24
    cc48:	b2d2      	uxtb	r2, r2
    cc4a:	3230      	adds	r2, #48	; 0x30
    cc4c:	b2d2      	uxtb	r2, r2
    cc4e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc56:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cc5a:	3301      	adds	r3, #1
    cc5c:	62bb      	str	r3, [r7, #40]	; 0x28
    cc5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cc60:	697b      	ldr	r3, [r7, #20]
    cc62:	429a      	cmp	r2, r3
    cc64:	dbe5      	blt.n	cc32 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc68:	4613      	mov	r3, r2
    cc6a:	009b      	lsls	r3, r3, #2
    cc6c:	4413      	add	r3, r2
    cc6e:	005b      	lsls	r3, r3, #1
    cc70:	161b      	asrs	r3, r3, #24
    cc72:	2b04      	cmp	r3, #4
    cc74:	dd1d      	ble.n	ccb2 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cc76:	68bb      	ldr	r3, [r7, #8]
    cc78:	3b01      	subs	r3, #1
    cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc7c:	e015      	b.n	ccaa <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	2b2e      	cmp	r3, #46	; 0x2e
    cc84:	d00e      	beq.n	cca4 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	2b39      	cmp	r3, #57	; 0x39
    cc8c:	d103      	bne.n	cc96 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc90:	2230      	movs	r2, #48	; 0x30
    cc92:	701a      	strb	r2, [r3, #0]
    cc94:	e006      	b.n	cca4 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	3301      	adds	r3, #1
    cc9c:	b2da      	uxtb	r2, r3
    cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cca0:	701a      	strb	r2, [r3, #0]
                    break;
    cca2:	e006      	b.n	ccb2 <ftoa+0x1e2>
                }
                pcBuftmp--;
    cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cca6:	3b01      	subs	r3, #1
    cca8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ccaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ccac:	6a3b      	ldr	r3, [r7, #32]
    ccae:	429a      	cmp	r2, r3
    ccb0:	d2e5      	bcs.n	cc7e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ccb2:	68bb      	ldr	r3, [r7, #8]
    ccb4:	2200      	movs	r2, #0
    ccb6:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ccb8:	68ba      	ldr	r2, [r7, #8]
    ccba:	6a3b      	ldr	r3, [r7, #32]
    ccbc:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ccbe:	4618      	mov	r0, r3
    ccc0:	373c      	adds	r7, #60	; 0x3c
    ccc2:	46bd      	mov	sp, r7
    ccc4:	bd90      	pop	{r4, r7, pc}
    ccc6:	bf00      	nop
    ccc8:	00302e30 	.word	0x00302e30

0000cccc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cccc:	b590      	push	{r4, r7, lr}
    ccce:	b095      	sub	sp, #84	; 0x54
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	60f8      	str	r0, [r7, #12]
    ccd4:	60b9      	str	r1, [r7, #8]
    ccd6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ccd8:	2300      	movs	r3, #0
    ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ccdc:	2300      	movs	r3, #0
    ccde:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cce0:	e2e3      	b.n	d2aa <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cce2:	2306      	movs	r3, #6
    cce4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cce6:	68bb      	ldr	r3, [r7, #8]
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	2b25      	cmp	r3, #37	; 0x25
    ccec:	d01f      	beq.n	cd2e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ccee:	68fb      	ldr	r3, [r7, #12]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d015      	beq.n	cd20 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ccf4:	68bb      	ldr	r3, [r7, #8]
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	2b0a      	cmp	r3, #10
    ccfa:	d10b      	bne.n	cd14 <am_util_stdio_vsprintf+0x48>
    ccfc:	4bb1      	ldr	r3, [pc, #708]	; (cfc4 <am_util_stdio_vsprintf+0x2f8>)
    ccfe:	781b      	ldrb	r3, [r3, #0]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d007      	beq.n	cd14 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd04:	68fb      	ldr	r3, [r7, #12]
    cd06:	1c5a      	adds	r2, r3, #1
    cd08:	60fa      	str	r2, [r7, #12]
    cd0a:	220d      	movs	r2, #13
    cd0c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd10:	3301      	adds	r3, #1
    cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cd14:	68fb      	ldr	r3, [r7, #12]
    cd16:	1c5a      	adds	r2, r3, #1
    cd18:	60fa      	str	r2, [r7, #12]
    cd1a:	68ba      	ldr	r2, [r7, #8]
    cd1c:	7812      	ldrb	r2, [r2, #0]
    cd1e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cd20:	68bb      	ldr	r3, [r7, #8]
    cd22:	3301      	adds	r3, #1
    cd24:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd28:	3301      	adds	r3, #1
    cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cd2c:	e2bd      	b.n	d2aa <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd2e:	68bb      	ldr	r3, [r7, #8]
    cd30:	3301      	adds	r3, #1
    cd32:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cd34:	2300      	movs	r3, #0
    cd36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cd3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cd3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd42:	2320      	movs	r3, #32
    cd44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cd48:	68bb      	ldr	r3, [r7, #8]
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	2b30      	cmp	r3, #48	; 0x30
    cd4e:	d105      	bne.n	cd5c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd50:	2330      	movs	r3, #48	; 0x30
    cd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cd56:	68bb      	ldr	r3, [r7, #8]
    cd58:	3301      	adds	r3, #1
    cd5a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd5c:	f107 0310 	add.w	r3, r7, #16
    cd60:	4619      	mov	r1, r3
    cd62:	68b8      	ldr	r0, [r7, #8]
    cd64:	f7ff fd85 	bl	c872 <decstr_to_int>
    cd68:	4603      	mov	r3, r0
    cd6a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cd6c:	693b      	ldr	r3, [r7, #16]
    cd6e:	68ba      	ldr	r2, [r7, #8]
    cd70:	4413      	add	r3, r2
    cd72:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cd74:	68bb      	ldr	r3, [r7, #8]
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	2b73      	cmp	r3, #115	; 0x73
    cd7a:	d005      	beq.n	cd88 <am_util_stdio_vsprintf+0xbc>
    cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd7e:	2b00      	cmp	r3, #0
    cd80:	da02      	bge.n	cd88 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd84:	425b      	negs	r3, r3
    cd86:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cd88:	68bb      	ldr	r3, [r7, #8]
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	2b2e      	cmp	r3, #46	; 0x2e
    cd8e:	d10e      	bne.n	cdae <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cd90:	68bb      	ldr	r3, [r7, #8]
    cd92:	3301      	adds	r3, #1
    cd94:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd96:	f107 0310 	add.w	r3, r7, #16
    cd9a:	4619      	mov	r1, r3
    cd9c:	68b8      	ldr	r0, [r7, #8]
    cd9e:	f7ff fd68 	bl	c872 <decstr_to_int>
    cda2:	4603      	mov	r3, r0
    cda4:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cda6:	693b      	ldr	r3, [r7, #16]
    cda8:	68ba      	ldr	r2, [r7, #8]
    cdaa:	4413      	add	r3, r2
    cdac:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cdae:	68bb      	ldr	r3, [r7, #8]
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	2b6c      	cmp	r3, #108	; 0x6c
    cdb4:	d10c      	bne.n	cdd0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cdb6:	68bb      	ldr	r3, [r7, #8]
    cdb8:	3301      	adds	r3, #1
    cdba:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cdbc:	68bb      	ldr	r3, [r7, #8]
    cdbe:	781b      	ldrb	r3, [r3, #0]
    cdc0:	2b6c      	cmp	r3, #108	; 0x6c
    cdc2:	d105      	bne.n	cdd0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cdc4:	68bb      	ldr	r3, [r7, #8]
    cdc6:	3301      	adds	r3, #1
    cdc8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cdca:	2301      	movs	r3, #1
    cdcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cdd0:	68bb      	ldr	r3, [r7, #8]
    cdd2:	781b      	ldrb	r3, [r3, #0]
    cdd4:	3b46      	subs	r3, #70	; 0x46
    cdd6:	2b32      	cmp	r3, #50	; 0x32
    cdd8:	f200 8254 	bhi.w	d284 <am_util_stdio_vsprintf+0x5b8>
    cddc:	a201      	add	r2, pc, #4	; (adr r2, cde4 <am_util_stdio_vsprintf+0x118>)
    cdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cde2:	bf00      	nop
    cde4:	0000d20f 	.word	0x0000d20f
    cde8:	0000d285 	.word	0x0000d285
    cdec:	0000d285 	.word	0x0000d285
    cdf0:	0000d285 	.word	0x0000d285
    cdf4:	0000d285 	.word	0x0000d285
    cdf8:	0000d285 	.word	0x0000d285
    cdfc:	0000d285 	.word	0x0000d285
    ce00:	0000d285 	.word	0x0000d285
    ce04:	0000d285 	.word	0x0000d285
    ce08:	0000d285 	.word	0x0000d285
    ce0c:	0000d285 	.word	0x0000d285
    ce10:	0000d285 	.word	0x0000d285
    ce14:	0000d285 	.word	0x0000d285
    ce18:	0000d285 	.word	0x0000d285
    ce1c:	0000d285 	.word	0x0000d285
    ce20:	0000d285 	.word	0x0000d285
    ce24:	0000d285 	.word	0x0000d285
    ce28:	0000d285 	.word	0x0000d285
    ce2c:	0000cfab 	.word	0x0000cfab
    ce30:	0000d285 	.word	0x0000d285
    ce34:	0000d285 	.word	0x0000d285
    ce38:	0000d285 	.word	0x0000d285
    ce3c:	0000d285 	.word	0x0000d285
    ce40:	0000d285 	.word	0x0000d285
    ce44:	0000d285 	.word	0x0000d285
    ce48:	0000d285 	.word	0x0000d285
    ce4c:	0000d285 	.word	0x0000d285
    ce50:	0000d285 	.word	0x0000d285
    ce54:	0000d285 	.word	0x0000d285
    ce58:	0000ceb1 	.word	0x0000ceb1
    ce5c:	0000d0d7 	.word	0x0000d0d7
    ce60:	0000d285 	.word	0x0000d285
    ce64:	0000d20f 	.word	0x0000d20f
    ce68:	0000d285 	.word	0x0000d285
    ce6c:	0000d285 	.word	0x0000d285
    ce70:	0000d0d7 	.word	0x0000d0d7
    ce74:	0000d285 	.word	0x0000d285
    ce78:	0000d285 	.word	0x0000d285
    ce7c:	0000d285 	.word	0x0000d285
    ce80:	0000d285 	.word	0x0000d285
    ce84:	0000d285 	.word	0x0000d285
    ce88:	0000d285 	.word	0x0000d285
    ce8c:	0000d285 	.word	0x0000d285
    ce90:	0000d285 	.word	0x0000d285
    ce94:	0000d285 	.word	0x0000d285
    ce98:	0000ced7 	.word	0x0000ced7
    ce9c:	0000d285 	.word	0x0000d285
    cea0:	0000d045 	.word	0x0000d045
    cea4:	0000d285 	.word	0x0000d285
    cea8:	0000d285 	.word	0x0000d285
    ceac:	0000cfa5 	.word	0x0000cfa5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ceb0:	687b      	ldr	r3, [r7, #4]
    ceb2:	1d1a      	adds	r2, r3, #4
    ceb4:	607a      	str	r2, [r7, #4]
    ceb6:	681b      	ldr	r3, [r3, #0]
    ceb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cebc:	68fb      	ldr	r3, [r7, #12]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d005      	beq.n	cece <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cec2:	68fb      	ldr	r3, [r7, #12]
    cec4:	1c5a      	adds	r2, r3, #1
    cec6:	60fa      	str	r2, [r7, #12]
    cec8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cecc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ced0:	3301      	adds	r3, #1
    ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    ced4:	e1e6      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	1d1a      	adds	r2, r3, #4
    ceda:	607a      	str	r2, [r7, #4]
    cedc:	681b      	ldr	r3, [r3, #0]
    cede:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cee0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cee2:	f7ff fdb4 	bl	ca4e <simple_strlen>
    cee6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceea:	2b00      	cmp	r3, #0
    ceec:	dd2e      	ble.n	cf4c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cef2:	429a      	cmp	r2, r3
    cef4:	d22a      	bcs.n	cf4c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cefa:	1ad3      	subs	r3, r2, r3
    cefc:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cefe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf02:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf04:	4619      	mov	r1, r3
    cf06:	68f8      	ldr	r0, [r7, #12]
    cf08:	f7ff fdbc 	bl	ca84 <padbuffer>
    cf0c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cf0e:	68fb      	ldr	r3, [r7, #12]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d001      	beq.n	cf18 <am_util_stdio_vsprintf+0x24c>
    cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf16:	e000      	b.n	cf1a <am_util_stdio_vsprintf+0x24e>
    cf18:	2300      	movs	r3, #0
    cf1a:	68fa      	ldr	r2, [r7, #12]
    cf1c:	4413      	add	r3, r2
    cf1e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf24:	4413      	add	r3, r2
    cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cf28:	2300      	movs	r3, #0
    cf2a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cf2c:	e00e      	b.n	cf4c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cf2e:	68fb      	ldr	r3, [r7, #12]
    cf30:	2b00      	cmp	r3, #0
    cf32:	d005      	beq.n	cf40 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cf34:	68fb      	ldr	r3, [r7, #12]
    cf36:	1c5a      	adds	r2, r3, #1
    cf38:	60fa      	str	r2, [r7, #12]
    cf3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cf3c:	7812      	ldrb	r2, [r2, #0]
    cf3e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf42:	3301      	adds	r3, #1
    cf44:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cf46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf48:	3301      	adds	r3, #1
    cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cf4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf4e:	781b      	ldrb	r3, [r3, #0]
    cf50:	2b00      	cmp	r3, #0
    cf52:	d1ec      	bne.n	cf2e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf56:	2b00      	cmp	r3, #0
    cf58:	f000 81a1 	beq.w	d29e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf5e:	425b      	negs	r3, r3
    cf60:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf66:	429a      	cmp	r2, r3
    cf68:	f080 8199 	bcs.w	d29e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf70:	1ad3      	subs	r3, r2, r3
    cf72:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf78:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf7a:	4619      	mov	r1, r3
    cf7c:	68f8      	ldr	r0, [r7, #12]
    cf7e:	f7ff fd81 	bl	ca84 <padbuffer>
    cf82:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cf84:	68fb      	ldr	r3, [r7, #12]
    cf86:	2b00      	cmp	r3, #0
    cf88:	d001      	beq.n	cf8e <am_util_stdio_vsprintf+0x2c2>
    cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf8c:	e000      	b.n	cf90 <am_util_stdio_vsprintf+0x2c4>
    cf8e:	2300      	movs	r3, #0
    cf90:	68fa      	ldr	r2, [r7, #12]
    cf92:	4413      	add	r3, r2
    cf94:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf9a:	4413      	add	r3, r2
    cf9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cf9e:	2300      	movs	r3, #0
    cfa0:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    cfa2:	e17c      	b.n	d29e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    cfa4:	2301      	movs	r3, #1
    cfa6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfae:	2b00      	cmp	r3, #0
    cfb0:	d00a      	beq.n	cfc8 <am_util_stdio_vsprintf+0x2fc>
    cfb2:	687b      	ldr	r3, [r7, #4]
    cfb4:	3307      	adds	r3, #7
    cfb6:	f023 0307 	bic.w	r3, r3, #7
    cfba:	f103 0208 	add.w	r2, r3, #8
    cfbe:	607a      	str	r2, [r7, #4]
    cfc0:	cb18      	ldmia	r3, {r3, r4}
    cfc2:	e007      	b.n	cfd4 <am_util_stdio_vsprintf+0x308>
    cfc4:	1000112c 	.word	0x1000112c
                                      va_arg(pArgs, uint32_t);
    cfc8:	687b      	ldr	r3, [r7, #4]
    cfca:	1d1a      	adds	r2, r3, #4
    cfcc:	607a      	str	r2, [r7, #4]
    cfce:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfd0:	f04f 0400 	mov.w	r4, #0
    cfd4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d01e      	beq.n	d01c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cfde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cfe2:	f7ff fc22 	bl	c82a <ndigits_in_hex>
    cfe6:	4602      	mov	r2, r0
    cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfea:	1a9b      	subs	r3, r3, r2
    cfec:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cff4:	4619      	mov	r1, r3
    cff6:	68f8      	ldr	r0, [r7, #12]
    cff8:	f7ff fd44 	bl	ca84 <padbuffer>
    cffc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cffe:	68fb      	ldr	r3, [r7, #12]
    d000:	2b00      	cmp	r3, #0
    d002:	d001      	beq.n	d008 <am_util_stdio_vsprintf+0x33c>
    d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d006:	e000      	b.n	d00a <am_util_stdio_vsprintf+0x33e>
    d008:	2300      	movs	r3, #0
    d00a:	68fa      	ldr	r2, [r7, #12]
    d00c:	4413      	add	r3, r2
    d00e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d014:	4413      	add	r3, r2
    d016:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d018:	2300      	movs	r3, #0
    d01a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d01c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d020:	68fa      	ldr	r2, [r7, #12]
    d022:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d026:	f7ff fcb2 	bl	c98e <uint64_to_hexstr>
    d02a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d02c:	68fb      	ldr	r3, [r7, #12]
    d02e:	2b00      	cmp	r3, #0
    d030:	d003      	beq.n	d03a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d034:	68fa      	ldr	r2, [r7, #12]
    d036:	4413      	add	r3, r2
    d038:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d03c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d03e:	4413      	add	r3, r2
    d040:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d042:	e12f      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d048:	2b00      	cmp	r3, #0
    d04a:	d008      	beq.n	d05e <am_util_stdio_vsprintf+0x392>
    d04c:	687b      	ldr	r3, [r7, #4]
    d04e:	3307      	adds	r3, #7
    d050:	f023 0307 	bic.w	r3, r3, #7
    d054:	f103 0208 	add.w	r2, r3, #8
    d058:	607a      	str	r2, [r7, #4]
    d05a:	cb18      	ldmia	r3, {r3, r4}
    d05c:	e005      	b.n	d06a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	1d1a      	adds	r2, r3, #4
    d062:	607a      	str	r2, [r7, #4]
    d064:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d066:	f04f 0400 	mov.w	r4, #0
    d06a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d070:	2b00      	cmp	r3, #0
    d072:	d01e      	beq.n	d0b2 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d074:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d078:	f7ff fb99 	bl	c7ae <ndigits_in_u64>
    d07c:	4602      	mov	r2, r0
    d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d080:	1a9b      	subs	r3, r3, r2
    d082:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d088:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d08a:	4619      	mov	r1, r3
    d08c:	68f8      	ldr	r0, [r7, #12]
    d08e:	f7ff fcf9 	bl	ca84 <padbuffer>
    d092:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d094:	68fb      	ldr	r3, [r7, #12]
    d096:	2b00      	cmp	r3, #0
    d098:	d001      	beq.n	d09e <am_util_stdio_vsprintf+0x3d2>
    d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d09c:	e000      	b.n	d0a0 <am_util_stdio_vsprintf+0x3d4>
    d09e:	2300      	movs	r3, #0
    d0a0:	68fa      	ldr	r2, [r7, #12]
    d0a2:	4413      	add	r3, r2
    d0a4:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0aa:	4413      	add	r3, r2
    d0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0ae:	2300      	movs	r3, #0
    d0b0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0b2:	68fa      	ldr	r2, [r7, #12]
    d0b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0b8:	f7ff fc21 	bl	c8fe <uint64_to_str>
    d0bc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0be:	68fb      	ldr	r3, [r7, #12]
    d0c0:	2b00      	cmp	r3, #0
    d0c2:	d003      	beq.n	d0cc <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0c6:	68fa      	ldr	r2, [r7, #12]
    d0c8:	4413      	add	r3, r2
    d0ca:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0d0:	4413      	add	r3, r2
    d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0d4:	e0e6      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d0da:	2b00      	cmp	r3, #0
    d0dc:	d008      	beq.n	d0f0 <am_util_stdio_vsprintf+0x424>
    d0de:	687b      	ldr	r3, [r7, #4]
    d0e0:	3307      	adds	r3, #7
    d0e2:	f023 0307 	bic.w	r3, r3, #7
    d0e6:	f103 0208 	add.w	r2, r3, #8
    d0ea:	607a      	str	r2, [r7, #4]
    d0ec:	cb18      	ldmia	r3, {r3, r4}
    d0ee:	e005      	b.n	d0fc <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d0f0:	687b      	ldr	r3, [r7, #4]
    d0f2:	1d1a      	adds	r2, r3, #4
    d0f4:	607a      	str	r2, [r7, #4]
    d0f6:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d0fc:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d100:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d104:	2b00      	cmp	r3, #0
    d106:	f174 0300 	sbcs.w	r3, r4, #0
    d10a:	da0a      	bge.n	d122 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d10c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d110:	425b      	negs	r3, r3
    d112:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d116:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d11a:	2301      	movs	r3, #1
    d11c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d120:	e006      	b.n	d130 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d122:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d126:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d12a:	2300      	movs	r3, #0
    d12c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d132:	2b00      	cmp	r3, #0
    d134:	d04a      	beq.n	d1cc <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d136:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d13a:	4618      	mov	r0, r3
    d13c:	4621      	mov	r1, r4
    d13e:	f7ff fb57 	bl	c7f0 <ndigits_in_i64>
    d142:	4602      	mov	r2, r0
    d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d146:	1a9b      	subs	r3, r3, r2
    d148:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d14a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d14e:	2b00      	cmp	r3, #0
    d150:	d011      	beq.n	d176 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d154:	3b01      	subs	r3, #1
    d156:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d15c:	2b30      	cmp	r3, #48	; 0x30
    d15e:	d10a      	bne.n	d176 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d160:	68fb      	ldr	r3, [r7, #12]
    d162:	2b00      	cmp	r3, #0
    d164:	d004      	beq.n	d170 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d166:	68fb      	ldr	r3, [r7, #12]
    d168:	1c5a      	adds	r2, r3, #1
    d16a:	60fa      	str	r2, [r7, #12]
    d16c:	222d      	movs	r2, #45	; 0x2d
    d16e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d172:	3301      	adds	r3, #1
    d174:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d17a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d17c:	4619      	mov	r1, r3
    d17e:	68f8      	ldr	r0, [r7, #12]
    d180:	f7ff fc80 	bl	ca84 <padbuffer>
    d184:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d186:	68fb      	ldr	r3, [r7, #12]
    d188:	2b00      	cmp	r3, #0
    d18a:	d001      	beq.n	d190 <am_util_stdio_vsprintf+0x4c4>
    d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d18e:	e000      	b.n	d192 <am_util_stdio_vsprintf+0x4c6>
    d190:	2300      	movs	r3, #0
    d192:	68fa      	ldr	r2, [r7, #12]
    d194:	4413      	add	r3, r2
    d196:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d19a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d19c:	4413      	add	r3, r2
    d19e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d1a0:	2300      	movs	r3, #0
    d1a2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	d01e      	beq.n	d1ea <am_util_stdio_vsprintf+0x51e>
    d1ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1b0:	2b20      	cmp	r3, #32
    d1b2:	d11a      	bne.n	d1ea <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d1b4:	68fb      	ldr	r3, [r7, #12]
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d004      	beq.n	d1c4 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d1ba:	68fb      	ldr	r3, [r7, #12]
    d1bc:	1c5a      	adds	r2, r3, #1
    d1be:	60fa      	str	r2, [r7, #12]
    d1c0:	222d      	movs	r2, #45	; 0x2d
    d1c2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1c6:	3301      	adds	r3, #1
    d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d1ca:	e00e      	b.n	d1ea <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d1cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d00a      	beq.n	d1ea <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d1d4:	68fb      	ldr	r3, [r7, #12]
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d004      	beq.n	d1e4 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d1da:	68fb      	ldr	r3, [r7, #12]
    d1dc:	1c5a      	adds	r2, r3, #1
    d1de:	60fa      	str	r2, [r7, #12]
    d1e0:	222d      	movs	r2, #45	; 0x2d
    d1e2:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1e6:	3301      	adds	r3, #1
    d1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1ea:	68fa      	ldr	r2, [r7, #12]
    d1ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d1f0:	f7ff fb85 	bl	c8fe <uint64_to_str>
    d1f4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d1f6:	68fb      	ldr	r3, [r7, #12]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d003      	beq.n	d204 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1fe:	68fa      	ldr	r2, [r7, #12]
    d200:	4413      	add	r3, r2
    d202:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d208:	4413      	add	r3, r2
    d20a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d20c:	e04a      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d20e:	68fb      	ldr	r3, [r7, #12]
    d210:	2b00      	cmp	r3, #0
    d212:	d046      	beq.n	d2a2 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	3307      	adds	r3, #7
    d218:	f023 0307 	bic.w	r3, r3, #7
    d21c:	f103 0208 	add.w	r2, r3, #8
    d220:	607a      	str	r2, [r7, #4]
    d222:	cb18      	ldmia	r3, {r3, r4}
    d224:	4618      	mov	r0, r3
    d226:	4621      	mov	r1, r4
    d228:	f7fe ff6a 	bl	c100 <__aeabi_d2f>
    d22c:	4603      	mov	r3, r0
    d22e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d230:	68fb      	ldr	r3, [r7, #12]
    d232:	2214      	movs	r2, #20
    d234:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d238:	68f9      	ldr	r1, [r7, #12]
    d23a:	6978      	ldr	r0, [r7, #20]
    d23c:	f7ff fc48 	bl	cad0 <ftoa>
    d240:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d244:	2b00      	cmp	r3, #0
    d246:	da14      	bge.n	d272 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d24a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d24e:	d102      	bne.n	d256 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d250:	4b1e      	ldr	r3, [pc, #120]	; (d2cc <am_util_stdio_vsprintf+0x600>)
    d252:	62bb      	str	r3, [r7, #40]	; 0x28
    d254:	e008      	b.n	d268 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d258:	f113 0f02 	cmn.w	r3, #2
    d25c:	d102      	bne.n	d264 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d25e:	4b1c      	ldr	r3, [pc, #112]	; (d2d0 <am_util_stdio_vsprintf+0x604>)
    d260:	62bb      	str	r3, [r7, #40]	; 0x28
    d262:	e001      	b.n	d268 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d264:	4b1b      	ldr	r3, [pc, #108]	; (d2d4 <am_util_stdio_vsprintf+0x608>)
    d266:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d268:	68fb      	ldr	r3, [r7, #12]
    d26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d26c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d26e:	2303      	movs	r3, #3
    d270:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d276:	4413      	add	r3, r2
    d278:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d27c:	68fa      	ldr	r2, [r7, #12]
    d27e:	4413      	add	r3, r2
    d280:	60fb      	str	r3, [r7, #12]
                }
                break;
    d282:	e00e      	b.n	d2a2 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d284:	68fb      	ldr	r3, [r7, #12]
    d286:	2b00      	cmp	r3, #0
    d288:	d005      	beq.n	d296 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d28a:	68fb      	ldr	r3, [r7, #12]
    d28c:	1c5a      	adds	r2, r3, #1
    d28e:	60fa      	str	r2, [r7, #12]
    d290:	68ba      	ldr	r2, [r7, #8]
    d292:	7812      	ldrb	r2, [r2, #0]
    d294:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d298:	3301      	adds	r3, #1
    d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d29c:	e002      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>
                break;
    d29e:	bf00      	nop
    d2a0:	e000      	b.n	d2a4 <am_util_stdio_vsprintf+0x5d8>
                break;
    d2a2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d2a4:	68bb      	ldr	r3, [r7, #8]
    d2a6:	3301      	adds	r3, #1
    d2a8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d2aa:	68bb      	ldr	r3, [r7, #8]
    d2ac:	781b      	ldrb	r3, [r3, #0]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	f47f ad17 	bne.w	cce2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d2b4:	68fb      	ldr	r3, [r7, #12]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d002      	beq.n	d2c0 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d2ba:	68fb      	ldr	r3, [r7, #12]
    d2bc:	2200      	movs	r2, #0
    d2be:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d2c2:	4618      	mov	r0, r3
    d2c4:	3754      	adds	r7, #84	; 0x54
    d2c6:	46bd      	mov	sp, r7
    d2c8:	bd90      	pop	{r4, r7, pc}
    d2ca:	bf00      	nop
    d2cc:	00302e30 	.word	0x00302e30
    d2d0:	00232e23 	.word	0x00232e23
    d2d4:	003f2e3f 	.word	0x003f2e3f

0000d2d8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2d8:	b40f      	push	{r0, r1, r2, r3}
    d2da:	b580      	push	{r7, lr}
    d2dc:	b082      	sub	sp, #8
    d2de:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2e0:	f107 0314 	add.w	r3, r7, #20
    d2e4:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2e6:	683a      	ldr	r2, [r7, #0]
    d2e8:	6939      	ldr	r1, [r7, #16]
    d2ea:	4808      	ldr	r0, [pc, #32]	; (d30c <am_util_stdio_printf+0x34>)
    d2ec:	f7ff fcee 	bl	cccc <am_util_stdio_vsprintf>
    d2f0:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2f2:	4b07      	ldr	r3, [pc, #28]	; (d310 <am_util_stdio_printf+0x38>)
    d2f4:	681b      	ldr	r3, [r3, #0]
    d2f6:	4805      	ldr	r0, [pc, #20]	; (d30c <am_util_stdio_printf+0x34>)
    d2f8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d2fa:	687b      	ldr	r3, [r7, #4]
}
    d2fc:	4618      	mov	r0, r3
    d2fe:	3708      	adds	r7, #8
    d300:	46bd      	mov	sp, r7
    d302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d306:	b004      	add	sp, #16
    d308:	4770      	bx	lr
    d30a:	bf00      	nop
    d30c:	1000102c 	.word	0x1000102c
    d310:	10001138 	.word	0x10001138

0000d314 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d314:	b580      	push	{r7, lr}
    d316:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d318:	4802      	ldr	r0, [pc, #8]	; (d324 <am_util_stdio_terminal_clear+0x10>)
    d31a:	f7ff ffdd 	bl	d2d8 <am_util_stdio_printf>
}
    d31e:	bf00      	nop
    d320:	bd80      	pop	{r7, pc}
    d322:	bf00      	nop
    d324:	0000e268 	.word	0x0000e268

0000d328 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d32a:	f000 fc47 	bl	dbbc <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d32e:	2000      	movs	r0, #0
    d330:	f7ff f94e 	bl	c5d0 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d334:	4b12      	ldr	r3, [pc, #72]	; (d380 <am_bsp_low_power_init+0x58>)
    d336:	4f13      	ldr	r7, [pc, #76]	; (d384 <am_bsp_low_power_init+0x5c>)
    d338:	6819      	ldr	r1, [r3, #0]
    d33a:	2029      	movs	r0, #41	; 0x29
    d33c:	f000 fa5a 	bl	d7f4 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d340:	f000 fd98 	bl	de74 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d344:	2001      	movs	r0, #1
    d346:	f000 fdd3 	bl	def0 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d34a:	2100      	movs	r1, #0
    d34c:	2003      	movs	r0, #3
    d34e:	f000 f8a7 	bl	d4a0 <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d352:	f000 fdd9 	bl	df08 <am_hal_rtc_osc_disable>
    d356:	480c      	ldr	r0, [pc, #48]	; (d388 <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d358:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d35a:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d35c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d360:	4631      	mov	r1, r6
    d362:	4628      	mov	r0, r5
    d364:	f000 fa46 	bl	d7f4 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d368:	2103      	movs	r1, #3
    d36a:	4628      	mov	r0, r5
    d36c:	f000 fbb8 	bl	dae0 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d370:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d372:	4628      	mov	r0, r5
    d374:	2100      	movs	r1, #0
    d376:	f000 fbb3 	bl	dae0 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d37a:	2c05      	cmp	r4, #5
    d37c:	d1ee      	bne.n	d35c <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d380:	0000e284 	.word	0x0000e284
    d384:	10001000 	.word	0x10001000
    d388:	0000e288 	.word	0x0000e288

0000d38c <am_bsp_debug_printf_disable>:
{
    d38c:	b538      	push	{r3, r4, r5, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d38e:	4b17      	ldr	r3, [pc, #92]	; (d3ec <am_bsp_debug_printf_disable+0x60>)
    d390:	681c      	ldr	r4, [r3, #0]
    d392:	2c01      	cmp	r4, #1
    d394:	d01d      	beq.n	d3d2 <am_bsp_debug_printf_disable+0x46>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d396:	2c02      	cmp	r4, #2
    d398:	d000      	beq.n	d39c <am_bsp_debug_printf_disable+0x10>
    d39a:	bd38      	pop	{r3, r4, r5, pc}
am_bsp_uart_printf_disable(void)
{
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d39c:	4d14      	ldr	r5, [pc, #80]	; (d3f0 <am_bsp_debug_printf_disable+0x64>)
    d39e:	6828      	ldr	r0, [r5, #0]
    d3a0:	f000 ff28 	bl	e1f4 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d3a4:	2000      	movs	r0, #0
    d3a6:	f7ff f913 	bl	c5d0 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d3aa:	4621      	mov	r1, r4
    d3ac:	2200      	movs	r2, #0
    d3ae:	6828      	ldr	r0, [r5, #0]
    d3b0:	f000 feae 	bl	e110 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d3b4:	6828      	ldr	r0, [r5, #0]
    d3b6:	f000 fe97 	bl	e0e8 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d3ba:	480e      	ldr	r0, [pc, #56]	; (d3f4 <am_bsp_debug_printf_disable+0x68>)
    d3bc:	6804      	ldr	r4, [r0, #0]
    d3be:	2016      	movs	r0, #22
    d3c0:	4621      	mov	r1, r4
    d3c2:	f000 fa17 	bl	d7f4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d3c6:	4621      	mov	r1, r4
    d3c8:	2017      	movs	r0, #23
} // am_bsp_debug_printf_disable()
    d3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d3ce:	f000 ba11 	b.w	d7f4 <am_hal_gpio_pinconfig>
    am_hal_itm_disable();
    d3d2:	f000 fbf3 	bl	dbbc <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d3d6:	2000      	movs	r0, #0
    d3d8:	f7ff f8fa 	bl	c5d0 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d3dc:	4905      	ldr	r1, [pc, #20]	; (d3f4 <am_bsp_debug_printf_disable+0x68>)
    d3de:	2029      	movs	r0, #41	; 0x29
    d3e0:	6809      	ldr	r1, [r1, #0]
} // am_bsp_debug_printf_disable()
    d3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d3e6:	f000 ba05 	b.w	d7f4 <am_hal_gpio_pinconfig>
    d3ea:	bf00      	nop
    d3ec:	10001134 	.word	0x10001134
    d3f0:	10001130 	.word	0x10001130
    d3f4:	0000e284 	.word	0x0000e284

0000d3f8 <am_bsp_itm_printf_enable>:
{
    d3f8:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d3fa:	4b0b      	ldr	r3, [pc, #44]	; (d428 <am_bsp_itm_printf_enable+0x30>)
{
    d3fc:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d3fe:	2201      	movs	r2, #1
    d400:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d402:	f000 fbbd 	bl	db80 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d406:	a806      	add	r0, sp, #24
    d408:	4908      	ldr	r1, [pc, #32]	; (d42c <am_bsp_itm_printf_enable+0x34>)
    d40a:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d40e:	f000 fe19 	bl	e044 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d412:	4b07      	ldr	r3, [pc, #28]	; (d430 <am_bsp_itm_printf_enable+0x38>)
    d414:	2029      	movs	r0, #41	; 0x29
    d416:	6819      	ldr	r1, [r3, #0]
    d418:	f000 f9ec 	bl	d7f4 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d41c:	4805      	ldr	r0, [pc, #20]	; (d434 <am_bsp_itm_printf_enable+0x3c>)
    d41e:	f7ff f8d7 	bl	c5d0 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d422:	b007      	add	sp, #28
    d424:	f85d fb04 	ldr.w	pc, [sp], #4
    d428:	10001134 	.word	0x10001134
    d42c:	000f4240 	.word	0x000f4240
    d430:	0000e27c 	.word	0x0000e27c
    d434:	0000dc65 	.word	0x0000dc65

0000d438 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d438:	b530      	push	{r4, r5, lr}
    d43a:	b083      	sub	sp, #12
    d43c:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d43e:	f000 fb97 	bl	db70 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d442:	4c11      	ldr	r4, [pc, #68]	; (d488 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d444:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d446:	6823      	ldr	r3, [r4, #0]
    d448:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d44c:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d44e:	9801      	ldr	r0, [sp, #4]
    d450:	f000 fb92 	bl	db78 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d454:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d456:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d458:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d45a:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d45c:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d45e:	005d      	lsls	r5, r3, #1
    d460:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d464:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d466:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d468:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d46c:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d46e:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d472:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d476:	0212      	lsls	r2, r2, #8
    d478:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d47c:	432b      	orrs	r3, r5
    d47e:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d480:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d482:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d484:	b003      	add	sp, #12
    d486:	bd30      	pop	{r4, r5, pc}
    d488:	40018000 	.word	0x40018000

0000d48c <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d48c:	4a03      	ldr	r2, [pc, #12]	; (d49c <am_hal_cachectrl_enable+0x10>)
    d48e:	6813      	ldr	r3, [r2, #0]
    d490:	f043 0001 	orr.w	r0, r3, #1
    d494:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d496:	2000      	movs	r0, #0
    d498:	4770      	bx	lr
    d49a:	bf00      	nop
    d49c:	40018000 	.word	0x40018000

0000d4a0 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d4a0:	2809      	cmp	r0, #9
    d4a2:	d852      	bhi.n	d54a <am_hal_clkgen_control+0xaa>
    d4a4:	e8df f000 	tbb	[pc, r0]
    d4a8:	2b21190d 	.word	0x2b21190d
    d4ac:	51513d33 	.word	0x51513d33
    d4b0:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d4b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d4b6:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d4b8:	6a1a      	ldr	r2, [r3, #32]
    d4ba:	f36f 0200 	bfc	r2, #0, #1
    d4be:	621a      	str	r2, [r3, #32]
            break;
    d4c0:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4c2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d4c6:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4c8:	2047      	movs	r0, #71	; 0x47
    d4ca:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d4ce:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d4d2:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d4d4:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d4d8:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d4da:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4de:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d4e0:	68ca      	ldr	r2, [r1, #12]
    d4e2:	f022 0301 	bic.w	r3, r2, #1
    d4e6:	60cb      	str	r3, [r1, #12]
            break;
    d4e8:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4ea:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4ee:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d4f4:	f022 0302 	bic.w	r3, r2, #2
    d4f8:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d4fc:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d4fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d502:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d504:	68d3      	ldr	r3, [r2, #12]
    d506:	f043 0101 	orr.w	r1, r3, #1
    d50a:	60d1      	str	r1, [r2, #12]
            break;
    d50c:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d50e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d512:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d514:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d518:	f043 0102 	orr.w	r1, r3, #2
    d51c:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d520:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d526:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d528:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d52a:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d52c:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d52e:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d530:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d532:	615a      	str	r2, [r3, #20]
            break;
    d534:	4770      	bx	lr
            if ( pArgs == 0 )
    d536:	b151      	cbz	r1, d54e <am_hal_clkgen_control+0xae>
    d538:	6808      	ldr	r0, [r1, #0]
    d53a:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d53e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d542:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d544:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d548:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d54a:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d54c:	4770      	bx	lr
    d54e:	4901      	ldr	r1, [pc, #4]	; (d554 <am_hal_clkgen_control+0xb4>)
    d550:	e7f5      	b.n	d53e <am_hal_clkgen_control+0x9e>
    d552:	bf00      	nop
    d554:	0025b801 	.word	0x0025b801

0000d558 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d558:	b1a8      	cbz	r0, d586 <am_hal_clkgen_status_get+0x2e>
{
    d55a:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d55c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d560:	490a      	ldr	r1, [pc, #40]	; (d58c <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d562:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d564:	4b0a      	ldr	r3, [pc, #40]	; (d590 <am_hal_clkgen_status_get+0x38>)
    d566:	f014 0f01 	tst.w	r4, #1
    d56a:	bf08      	it	eq
    d56c:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d56e:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d570:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d572:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d576:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d57a:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d57c:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d57e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d582:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d584:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d586:	2006      	movs	r0, #6
    d588:	4770      	bx	lr
    d58a:	bf00      	nop
    d58c:	02dc6c00 	.word	0x02dc6c00
    d590:	016e3600 	.word	0x016e3600

0000d594 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d594:	4b00      	ldr	r3, [pc, #0]	; (d598 <am_hal_flash_delay+0x4>)
    d596:	4718      	bx	r3
    d598:	0800009d 	.word	0x0800009d

0000d59c <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5a0:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5a4:	f8df 8248 	ldr.w	r8, [pc, #584]	; d7f0 <am_hal_flash_delay_status_check+0x254>
{
    d5a8:	4607      	mov	r7, r0
    d5aa:	460c      	mov	r4, r1
    d5ac:	4615      	mov	r5, r2
    d5ae:	461e      	mov	r6, r3
    d5b0:	f1be 0f00 	cmp.w	lr, #0
    d5b4:	f000 808e 	beq.w	d6d4 <am_hal_flash_delay_status_check+0x138>
    d5b8:	f010 0907 	ands.w	r9, r0, #7
    d5bc:	d044      	beq.n	d648 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5be:	680b      	ldr	r3, [r1, #0]
    d5c0:	4013      	ands	r3, r2
    d5c2:	429e      	cmp	r6, r3
    d5c4:	f000 8083 	beq.w	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5c8:	2001      	movs	r0, #1
    d5ca:	47c0      	blx	r8
    d5cc:	f1b9 0f01 	cmp.w	r9, #1
    d5d0:	f107 37ff 	add.w	r7, r7, #4294967295
    d5d4:	d038      	beq.n	d648 <am_hal_flash_delay_status_check+0xac>
    d5d6:	f1b9 0f02 	cmp.w	r9, #2
    d5da:	d02e      	beq.n	d63a <am_hal_flash_delay_status_check+0x9e>
    d5dc:	f1b9 0f03 	cmp.w	r9, #3
    d5e0:	d024      	beq.n	d62c <am_hal_flash_delay_status_check+0x90>
    d5e2:	f1b9 0f04 	cmp.w	r9, #4
    d5e6:	d01a      	beq.n	d61e <am_hal_flash_delay_status_check+0x82>
    d5e8:	f1b9 0f05 	cmp.w	r9, #5
    d5ec:	d010      	beq.n	d610 <am_hal_flash_delay_status_check+0x74>
    d5ee:	f1b9 0f06 	cmp.w	r9, #6
    d5f2:	d006      	beq.n	d602 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5f4:	6820      	ldr	r0, [r4, #0]
    d5f6:	4028      	ands	r0, r5
    d5f8:	4286      	cmp	r6, r0
    d5fa:	d068      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5fc:	2001      	movs	r0, #1
    d5fe:	47c0      	blx	r8
    d600:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d602:	6821      	ldr	r1, [r4, #0]
    d604:	4029      	ands	r1, r5
    d606:	428e      	cmp	r6, r1
    d608:	d061      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d60a:	2001      	movs	r0, #1
    d60c:	47c0      	blx	r8
    d60e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d610:	6822      	ldr	r2, [r4, #0]
    d612:	402a      	ands	r2, r5
    d614:	4296      	cmp	r6, r2
    d616:	d05a      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d618:	2001      	movs	r0, #1
    d61a:	47c0      	blx	r8
    d61c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d61e:	6823      	ldr	r3, [r4, #0]
    d620:	402b      	ands	r3, r5
    d622:	429e      	cmp	r6, r3
    d624:	d053      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d626:	2001      	movs	r0, #1
    d628:	47c0      	blx	r8
    d62a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d62c:	6820      	ldr	r0, [r4, #0]
    d62e:	4028      	ands	r0, r5
    d630:	4286      	cmp	r6, r0
    d632:	d04c      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d634:	2001      	movs	r0, #1
    d636:	47c0      	blx	r8
    d638:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d63a:	6821      	ldr	r1, [r4, #0]
    d63c:	4029      	ands	r1, r5
    d63e:	428e      	cmp	r6, r1
    d640:	d045      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d642:	2001      	movs	r0, #1
    d644:	3f01      	subs	r7, #1
    d646:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d648:	6822      	ldr	r2, [r4, #0]
    d64a:	402a      	ands	r2, r5
    d64c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d64e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d652:	d03c      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d654:	2f00      	cmp	r7, #0
    d656:	f000 80c8 	beq.w	d7ea <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d65a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d65c:	6823      	ldr	r3, [r4, #0]
    d65e:	402b      	ands	r3, r5
    d660:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d662:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d666:	d032      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d668:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d66a:	6821      	ldr	r1, [r4, #0]
    d66c:	4029      	ands	r1, r5
    d66e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d670:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d674:	d02b      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d676:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d678:	6822      	ldr	r2, [r4, #0]
    d67a:	402a      	ands	r2, r5
    d67c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d67e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d682:	d024      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d684:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d686:	6823      	ldr	r3, [r4, #0]
    d688:	402b      	ands	r3, r5
    d68a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d68c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d690:	d01d      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d692:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d694:	6821      	ldr	r1, [r4, #0]
    d696:	4029      	ands	r1, r5
    d698:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d69a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d69e:	d016      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6a0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6a2:	6822      	ldr	r2, [r4, #0]
    d6a4:	402a      	ands	r2, r5
    d6a6:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6a8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6ac:	d00f      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ae:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6b0:	6820      	ldr	r0, [r4, #0]
    d6b2:	4028      	ands	r0, r5
    d6b4:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6b6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6ba:	d008      	beq.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6bc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6be:	6822      	ldr	r2, [r4, #0]
    d6c0:	402a      	ands	r2, r5
    d6c2:	4296      	cmp	r6, r2
    d6c4:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6c8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6cc:	d1c2      	bne.n	d654 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d6ce:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6d4:	f010 0907 	ands.w	r9, r0, #7
    d6d8:	d043      	beq.n	d762 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6da:	680b      	ldr	r3, [r1, #0]
    d6dc:	4013      	ands	r3, r2
    d6de:	429e      	cmp	r6, r3
    d6e0:	d1f5      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6e2:	2001      	movs	r0, #1
    d6e4:	47c0      	blx	r8
    d6e6:	f1b9 0f01 	cmp.w	r9, #1
    d6ea:	f107 37ff 	add.w	r7, r7, #4294967295
    d6ee:	d038      	beq.n	d762 <am_hal_flash_delay_status_check+0x1c6>
    d6f0:	f1b9 0f02 	cmp.w	r9, #2
    d6f4:	d02e      	beq.n	d754 <am_hal_flash_delay_status_check+0x1b8>
    d6f6:	f1b9 0f03 	cmp.w	r9, #3
    d6fa:	d024      	beq.n	d746 <am_hal_flash_delay_status_check+0x1aa>
    d6fc:	f1b9 0f04 	cmp.w	r9, #4
    d700:	d01a      	beq.n	d738 <am_hal_flash_delay_status_check+0x19c>
    d702:	f1b9 0f05 	cmp.w	r9, #5
    d706:	d010      	beq.n	d72a <am_hal_flash_delay_status_check+0x18e>
    d708:	f1b9 0f06 	cmp.w	r9, #6
    d70c:	d006      	beq.n	d71c <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d70e:	6821      	ldr	r1, [r4, #0]
    d710:	4029      	ands	r1, r5
    d712:	428e      	cmp	r6, r1
    d714:	d1db      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d716:	2001      	movs	r0, #1
    d718:	47c0      	blx	r8
    d71a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d71c:	6822      	ldr	r2, [r4, #0]
    d71e:	402a      	ands	r2, r5
    d720:	4296      	cmp	r6, r2
    d722:	d1d4      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d724:	2001      	movs	r0, #1
    d726:	47c0      	blx	r8
    d728:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d72a:	6820      	ldr	r0, [r4, #0]
    d72c:	4028      	ands	r0, r5
    d72e:	4286      	cmp	r6, r0
    d730:	d1cd      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d732:	2001      	movs	r0, #1
    d734:	47c0      	blx	r8
    d736:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d738:	6823      	ldr	r3, [r4, #0]
    d73a:	402b      	ands	r3, r5
    d73c:	429e      	cmp	r6, r3
    d73e:	d1c6      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d740:	2001      	movs	r0, #1
    d742:	47c0      	blx	r8
    d744:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d746:	6821      	ldr	r1, [r4, #0]
    d748:	4029      	ands	r1, r5
    d74a:	428e      	cmp	r6, r1
    d74c:	d1bf      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d74e:	2001      	movs	r0, #1
    d750:	47c0      	blx	r8
    d752:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d754:	6822      	ldr	r2, [r4, #0]
    d756:	402a      	ands	r2, r5
    d758:	4296      	cmp	r6, r2
    d75a:	d1b8      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d75c:	2001      	movs	r0, #1
    d75e:	3f01      	subs	r7, #1
    d760:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d762:	6823      	ldr	r3, [r4, #0]
    d764:	402b      	ands	r3, r5
    d766:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d768:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d76c:	d1af      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d76e:	2f00      	cmp	r7, #0
    d770:	d03b      	beq.n	d7ea <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d772:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d774:	6821      	ldr	r1, [r4, #0]
    d776:	4029      	ands	r1, r5
    d778:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d77a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d77e:	d1a6      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d780:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d782:	6822      	ldr	r2, [r4, #0]
    d784:	402a      	ands	r2, r5
    d786:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d788:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d78c:	d19f      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d78e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d790:	6823      	ldr	r3, [r4, #0]
    d792:	402b      	ands	r3, r5
    d794:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d796:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d79a:	d198      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d79c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d79e:	6821      	ldr	r1, [r4, #0]
    d7a0:	4029      	ands	r1, r5
    d7a2:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7a4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7a8:	d191      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7aa:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7ac:	6822      	ldr	r2, [r4, #0]
    d7ae:	402a      	ands	r2, r5
    d7b0:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7b2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7b6:	d18a      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7b8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7ba:	6823      	ldr	r3, [r4, #0]
    d7bc:	402b      	ands	r3, r5
    d7be:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7c0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7c4:	d183      	bne.n	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7c6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7c8:	6820      	ldr	r0, [r4, #0]
    d7ca:	4028      	ands	r0, r5
    d7cc:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ce:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7d2:	f47f af7c 	bne.w	d6ce <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7d6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7d8:	6823      	ldr	r3, [r4, #0]
    d7da:	402b      	ands	r3, r5
    d7dc:	429e      	cmp	r6, r3
    d7de:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7e2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7e6:	d0c2      	beq.n	d76e <am_hal_flash_delay_status_check+0x1d2>
    d7e8:	e771      	b.n	d6ce <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d7ea:	2004      	movs	r0, #4
    d7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d7f0:	0800009d 	.word	0x0800009d

0000d7f4 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d7f4:	2831      	cmp	r0, #49	; 0x31
    d7f6:	d901      	bls.n	d7fc <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d7f8:	2006      	movs	r0, #6
    d7fa:	4770      	bx	lr
{
    d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d800:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d804:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d808:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d80a:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d80e:	d014      	beq.n	d83a <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d810:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d814:	1db2      	adds	r2, r6, #6
    d816:	f002 0707 	and.w	r7, r2, #7
    d81a:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d81c:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d820:	f200 80ab 	bhi.w	d97a <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d824:	4a85      	ldr	r2, [pc, #532]	; (da3c <am_hal_gpio_pinconfig+0x248>)
    d826:	5c17      	ldrb	r7, [r2, r0]
    d828:	07ff      	lsls	r7, r7, #31
    d82a:	d403      	bmi.n	d834 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d82c:	4884      	ldr	r0, [pc, #528]	; (da40 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d82e:	b007      	add	sp, #28
    d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d834:	1eb4      	subs	r4, r6, #2
    d836:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d83a:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d83e:	2e00      	cmp	r6, #0
    d840:	f040 8095 	bne.w	d96e <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d844:	4a7f      	ldr	r2, [pc, #508]	; (da44 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d846:	4f80      	ldr	r7, [pc, #512]	; (da48 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d848:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d84a:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d84e:	411e      	asrs	r6, r3
    d850:	f016 0f01 	tst.w	r6, #1
    d854:	bf0c      	ite	eq
    d856:	2600      	moveq	r6, #0
    d858:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d85a:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d85c:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d860:	f000 8097 	beq.w	d992 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d864:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d868:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d86a:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d86e:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d872:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d874:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d878:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d87c:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d880:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d884:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d886:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d88a:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d88e:	f000 808d 	beq.w	d9ac <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d892:	4a6e      	ldr	r2, [pc, #440]	; (da4c <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d894:	6816      	ldr	r6, [r2, #0]
    d896:	1b8c      	subs	r4, r1, r6
    d898:	fab4 f384 	clz	r3, r4
    d89c:	095f      	lsrs	r7, r3, #5
    d89e:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d8a0:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d8a4:	bf04      	itt	eq
    d8a6:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d8aa:	f367 0800 	bfieq	r8, r7, #0, #1
    d8ae:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d8b0:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d8b4:	2902      	cmp	r1, #2
    d8b6:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d8ba:	d07a      	beq.n	d9b2 <am_hal_gpio_pinconfig+0x1be>
    d8bc:	d87f      	bhi.n	d9be <am_hal_gpio_pinconfig+0x1ca>
    d8be:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d8c0:	bf08      	it	eq
    d8c2:	f045 0504 	orreq.w	r5, r5, #4
    d8c6:	f004 0a18 	and.w	sl, r4, #24
            break;
    d8ca:	2200      	movs	r2, #0
    d8cc:	4604      	mov	r4, r0
    d8ce:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d8d0:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d8d4:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d8d8:	485d      	ldr	r0, [pc, #372]	; (da50 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d8da:	495e      	ldr	r1, [pc, #376]	; (da54 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d8dc:	4f5e      	ldr	r7, [pc, #376]	; (da58 <am_hal_gpio_pinconfig+0x264>)
    d8de:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d8e0:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d8e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d8e8:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d8ec:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d8ee:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d8f2:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d8f4:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d8f8:	f000 f93a 	bl	db70 <am_hal_interrupt_master_disable>
    d8fc:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d8fe:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d902:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d906:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d90a:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d90e:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d910:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d914:	9902      	ldr	r1, [sp, #8]
    d916:	9a03      	ldr	r2, [sp, #12]
    d918:	b150      	cbz	r0, d930 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d91a:	f004 001f 	and.w	r0, r4, #31
    d91e:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d922:	f04f 0c01 	mov.w	ip, #1
    d926:	4c4d      	ldr	r4, [pc, #308]	; (da5c <am_hal_gpio_pinconfig+0x268>)
    d928:	fa0c f000 	lsl.w	r0, ip, r0
    d92c:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d930:	484b      	ldr	r0, [pc, #300]	; (da60 <am_hal_gpio_pinconfig+0x26c>)
    d932:	2473      	movs	r4, #115	; 0x73
    d934:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d936:	f8da 4000 	ldr.w	r4, [sl]
    d93a:	4034      	ands	r4, r6
    d93c:	4325      	orrs	r5, r4
    d93e:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d942:	f859 5001 	ldr.w	r5, [r9, r1]
    d946:	402f      	ands	r7, r5
    d948:	ea47 0708 	orr.w	r7, r7, r8
    d94c:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d950:	f85b 1003 	ldr.w	r1, [fp, r3]
    d954:	400e      	ands	r6, r1
    d956:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d958:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d95a:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d95e:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d960:	9805      	ldr	r0, [sp, #20]
    d962:	f000 f909 	bl	db78 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d966:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d968:	b007      	add	sp, #28
    d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d96e:	2e01      	cmp	r6, #1
    d970:	d015      	beq.n	d99e <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d972:	2e02      	cmp	r6, #2
    d974:	d030      	beq.n	d9d8 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d976:	483b      	ldr	r0, [pc, #236]	; (da64 <am_hal_gpio_pinconfig+0x270>)
    d978:	e759      	b.n	d82e <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d97a:	2cc0      	cmp	r4, #192	; 0xc0
    d97c:	d027      	beq.n	d9ce <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d97e:	2c20      	cmp	r4, #32
    d980:	f47f af5b 	bne.w	d83a <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d984:	4c2d      	ldr	r4, [pc, #180]	; (da3c <am_hal_gpio_pinconfig+0x248>)
    d986:	5c26      	ldrb	r6, [r4, r0]
    d988:	f016 0f09 	tst.w	r6, #9
    d98c:	f47f af4e 	bne.w	d82c <am_hal_gpio_pinconfig+0x38>
    d990:	e753      	b.n	d83a <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d992:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d996:	2a07      	cmp	r2, #7
    d998:	d125      	bne.n	d9e6 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d99a:	4833      	ldr	r0, [pc, #204]	; (da68 <am_hal_gpio_pinconfig+0x274>)
    d99c:	e747      	b.n	d82e <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d99e:	4c27      	ldr	r4, [pc, #156]	; (da3c <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d9a0:	5c26      	ldrb	r6, [r4, r0]
    d9a2:	07b4      	lsls	r4, r6, #30
    d9a4:	d5e7      	bpl.n	d976 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d9a6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d9aa:	e74b      	b.n	d844 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d9ac:	2701      	movs	r7, #1
    d9ae:	9700      	str	r7, [sp, #0]
    d9b0:	e776      	b.n	d8a0 <am_hal_gpio_pinconfig+0xac>
    d9b2:	f004 0a18 	and.w	sl, r4, #24
    d9b6:	2301      	movs	r3, #1
    d9b8:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d9bc:	e786      	b.n	d8cc <am_hal_gpio_pinconfig+0xd8>
    d9be:	f004 0a18 	and.w	sl, r4, #24
    d9c2:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d9c4:	f045 0504 	orr.w	r5, r5, #4
    d9c8:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d9cc:	e77e      	b.n	d8cc <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d9ce:	2814      	cmp	r0, #20
    d9d0:	f43f af33 	beq.w	d83a <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d9d4:	4825      	ldr	r0, [pc, #148]	; (da6c <am_hal_gpio_pinconfig+0x278>)
    d9d6:	e72a      	b.n	d82e <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d9d8:	4a18      	ldr	r2, [pc, #96]	; (da3c <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d9da:	5c17      	ldrb	r7, [r2, r0]
    d9dc:	077a      	lsls	r2, r7, #29
    d9de:	d5ca      	bpl.n	d976 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d9e0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d9e4:	e72e      	b.n	d844 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d9e6:	4c22      	ldr	r4, [pc, #136]	; (da70 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d9e8:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d9ec:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d9f0:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d9f4:	45b0      	cmp	r8, r6
    d9f6:	d010      	beq.n	da1a <am_hal_gpio_pinconfig+0x226>
    d9f8:	0087      	lsls	r7, r0, #2
    d9fa:	eb04 0907 	add.w	r9, r4, r7
    d9fe:	f899 3001 	ldrb.w	r3, [r9, #1]
    da02:	42b3      	cmp	r3, r6
    da04:	d015      	beq.n	da32 <am_hal_gpio_pinconfig+0x23e>
    da06:	f899 2002 	ldrb.w	r2, [r9, #2]
    da0a:	42b2      	cmp	r2, r6
    da0c:	d00f      	beq.n	da2e <am_hal_gpio_pinconfig+0x23a>
    da0e:	f899 4003 	ldrb.w	r4, [r9, #3]
    da12:	42b4      	cmp	r4, r6
    da14:	d00f      	beq.n	da36 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    da16:	4817      	ldr	r0, [pc, #92]	; (da74 <am_hal_gpio_pinconfig+0x280>)
    da18:	e709      	b.n	d82e <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    da1a:	2600      	movs	r6, #0
    da1c:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    da1e:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    da20:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    da24:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    da26:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    da2a:	9300      	str	r3, [sp, #0]
    da2c:	e740      	b.n	d8b0 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    da2e:	2602      	movs	r6, #2
    da30:	e7f5      	b.n	da1e <am_hal_gpio_pinconfig+0x22a>
    da32:	2601      	movs	r6, #1
    da34:	e7f3      	b.n	da1e <am_hal_gpio_pinconfig+0x22a>
    da36:	2603      	movs	r6, #3
    da38:	e7f1      	b.n	da1e <am_hal_gpio_pinconfig+0x22a>
    da3a:	bf00      	nop
    da3c:	0000e290 	.word	0x0000e290
    da40:	08000100 	.word	0x08000100
    da44:	0000e2c4 	.word	0x0000e2c4
    da48:	0000e3c0 	.word	0x0000e3c0
    da4c:	0000e284 	.word	0x0000e284
    da50:	7ffffffc 	.word	0x7ffffffc
    da54:	400100e0 	.word	0x400100e0
    da58:	40010040 	.word	0x40010040
    da5c:	400100b4 	.word	0x400100b4
    da60:	40010000 	.word	0x40010000
    da64:	08000102 	.word	0x08000102
    da68:	08000103 	.word	0x08000103
    da6c:	08000101 	.word	0x08000101
    da70:	0000e2f8 	.word	0x0000e2f8
    da74:	08000104 	.word	0x08000104

0000da78 <am_hal_gpio_state_read>:
{
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    da78:	b1ca      	cbz	r2, daae <am_hal_gpio_state_read+0x36>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    da7a:	2831      	cmp	r0, #49	; 0x31
    da7c:	d904      	bls.n	da88 <am_hal_gpio_state_read+0x10>
    {
        *pui32ReadState = ui32ReadValue;
    da7e:	f04f 31ff 	mov.w	r1, #4294967295
    da82:	6011      	str	r1, [r2, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    da84:	2005      	movs	r0, #5
    da86:	4770      	bx	lr
#if AM_CMSIS_REGS
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    ui32Shift    = ui32Pin & 0x1F;
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    da88:	2901      	cmp	r1, #1
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    da8a:	ea4f 1350 	mov.w	r3, r0, lsr #5
    ui32Shift    = ui32Pin & 0x1F;
    da8e:	f000 001f 	and.w	r0, r0, #31
    switch ( eReadType )
    da92:	d00e      	beq.n	dab2 <am_hal_gpio_state_read+0x3a>
    da94:	d315      	bcc.n	dac2 <am_hal_gpio_state_read+0x4a>
    da96:	2902      	cmp	r1, #2
    da98:	d109      	bne.n	daae <am_hal_gpio_state_read+0x36>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
            break;
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    da9a:	490e      	ldr	r1, [pc, #56]	; (dad4 <am_hal_gpio_state_read+0x5c>)
    da9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    daa0:	fa23 fc00 	lsr.w	ip, r3, r0
    daa4:	f00c 0001 	and.w	r0, ip, #1
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    }
#endif // AM_CMSIS_REGS

    *pui32ReadState = ui32ReadValue;
    daa8:	6010      	str	r0, [r2, #0]

    return AM_HAL_STATUS_SUCCESS;
    daaa:	2000      	movs	r0, #0
    daac:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    daae:	2006      	movs	r0, #6
} // am_hal_gpio_state_read()
    dab0:	4770      	bx	lr
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    dab2:	4909      	ldr	r1, [pc, #36]	; (dad8 <am_hal_gpio_state_read+0x60>)
    dab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    dab8:	fa23 f000 	lsr.w	r0, r3, r0
    dabc:	f000 0001 	and.w	r0, r0, #1
            break;
    dac0:	e7f2      	b.n	daa8 <am_hal_gpio_state_read+0x30>
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    dac2:	4906      	ldr	r1, [pc, #24]	; (dadc <am_hal_gpio_state_read+0x64>)
    dac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    dac8:	fa23 fc00 	lsr.w	ip, r3, r0
    dacc:	f00c 0001 	and.w	r0, ip, #1
            break;
    dad0:	e7ea      	b.n	daa8 <am_hal_gpio_state_read+0x30>
    dad2:	bf00      	nop
    dad4:	400100a0 	.word	0x400100a0
    dad8:	40010088 	.word	0x40010088
    dadc:	40010080 	.word	0x40010080

0000dae0 <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    dae0:	2831      	cmp	r0, #49	; 0x31
    dae2:	d901      	bls.n	dae8 <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    dae4:	2005      	movs	r0, #5
    dae6:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    dae8:	2905      	cmp	r1, #5
    daea:	d901      	bls.n	daf0 <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    daec:	2006      	movs	r0, #6
    daee:	4770      	bx	lr
{
    daf0:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    daf2:	f000 031f 	and.w	r3, r0, #31
{
    daf6:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    daf8:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    dafa:	2201      	movs	r2, #1
    dafc:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    dafe:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    db02:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    db06:	f000 f833 	bl	db70 <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    db0a:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    db0c:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    db0e:	2904      	cmp	r1, #4
    db10:	d817      	bhi.n	db42 <am_hal_gpio_state_write+0x62>
    db12:	e8df f001 	tbb	[pc, r1]
    db16:	0e13      	.short	0x0e13
    db18:	030b      	.short	0x030b
    db1a:	19          	.byte	0x19
    db1b:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    db1c:	4d0d      	ldr	r5, [pc, #52]	; (db54 <am_hal_gpio_state_write+0x74>)
    db1e:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    db20:	9801      	ldr	r0, [sp, #4]
    db22:	f000 f829 	bl	db78 <am_hal_interrupt_master_set>

    return ui32Return;
    db26:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    db28:	b002      	add	sp, #8
    db2a:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    db2c:	4b0a      	ldr	r3, [pc, #40]	; (db58 <am_hal_gpio_state_write+0x78>)
    db2e:	50e6      	str	r6, [r4, r3]
            break;
    db30:	e7f6      	b.n	db20 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    db32:	480a      	ldr	r0, [pc, #40]	; (db5c <am_hal_gpio_state_write+0x7c>)
    db34:	5822      	ldr	r2, [r4, r0]
    db36:	4072      	eors	r2, r6
    db38:	5022      	str	r2, [r4, r0]
            break;
    db3a:	e7f1      	b.n	db20 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    db3c:	4908      	ldr	r1, [pc, #32]	; (db60 <am_hal_gpio_state_write+0x80>)
    db3e:	5066      	str	r6, [r4, r1]
            break;
    db40:	e7ee      	b.n	db20 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    db42:	4d08      	ldr	r5, [pc, #32]	; (db64 <am_hal_gpio_state_write+0x84>)
    db44:	5166      	str	r6, [r4, r5]
            break;
    db46:	e7eb      	b.n	db20 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    db48:	4803      	ldr	r0, [pc, #12]	; (db58 <am_hal_gpio_state_write+0x78>)
    db4a:	5823      	ldr	r3, [r4, r0]
    db4c:	4073      	eors	r3, r6
    db4e:	5023      	str	r3, [r4, r0]
            break;
    db50:	e7e6      	b.n	db20 <am_hal_gpio_state_write+0x40>
    db52:	bf00      	nop
    db54:	400100a8 	.word	0x400100a8
    db58:	400100b4 	.word	0x400100b4
    db5c:	40010088 	.word	0x40010088
    db60:	40010090 	.word	0x40010090
    db64:	40010098 	.word	0x40010098

0000db68 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    db68:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    db6c:	b662      	cpsie	i
    __asm("    bx lr");
    db6e:	4770      	bx	lr

0000db70 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    db70:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    db74:	b672      	cpsid	i
    __asm("    bx lr");
    db76:	4770      	bx	lr

0000db78 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    db78:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    db7c:	4770      	bx	lr
    db7e:	bf00      	nop

0000db80 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    db80:	4a0b      	ldr	r2, [pc, #44]	; (dbb0 <am_hal_itm_enable+0x30>)
    db82:	68d3      	ldr	r3, [r2, #12]
    db84:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    db88:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    db8a:	68d1      	ldr	r1, [r2, #12]
    db8c:	01cb      	lsls	r3, r1, #7
    db8e:	d5fc      	bpl.n	db8a <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    db90:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    db94:	4b07      	ldr	r3, [pc, #28]	; (dbb4 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    db96:	4a08      	ldr	r2, [pc, #32]	; (dbb8 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    db98:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    db9c:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    db9e:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dba2:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dba6:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dbaa:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    dbae:	4770      	bx	lr
    dbb0:	e000edf0 	.word	0xe000edf0
    dbb4:	c5acce55 	.word	0xc5acce55
    dbb8:	00150511 	.word	0x00150511

0000dbbc <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    dbbc:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    dbbe:	4b24      	ldr	r3, [pc, #144]	; (dc50 <am_hal_itm_disable+0x94>)
    dbc0:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    dbc4:	b9b0      	cbnz	r0, dbf4 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dbc6:	4923      	ldr	r1, [pc, #140]	; (dc54 <am_hal_itm_disable+0x98>)
    dbc8:	68ca      	ldr	r2, [r1, #12]
    dbca:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    dbce:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    dbd0:	68cb      	ldr	r3, [r1, #12]
    dbd2:	01da      	lsls	r2, r3, #7
    dbd4:	d5fc      	bpl.n	dbd0 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    dbd6:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    dbda:	481f      	ldr	r0, [pc, #124]	; (dc58 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    dbdc:	4a1f      	ldr	r2, [pc, #124]	; (dc5c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dbde:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    dbe2:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    dbe4:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dbe8:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dbec:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dbf0:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    dbf4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dbf8:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    dbfc:	021b      	lsls	r3, r3, #8
    dbfe:	d4fb      	bmi.n	dbf8 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dc00:	f240 20f7 	movw	r0, #759	; 0x2f7
    dc04:	f7ff fcc6 	bl	d594 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dc08:	4813      	ldr	r0, [pc, #76]	; (dc58 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dc0a:	4915      	ldr	r1, [pc, #84]	; (dc60 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dc0c:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dc10:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dc14:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dc16:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    dc1a:	f022 0401 	bic.w	r4, r2, #1
    dc1e:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dc22:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dc26:	420b      	tst	r3, r1
    dc28:	d1fb      	bne.n	dc22 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dc2a:	3801      	subs	r0, #1
    dc2c:	d1f3      	bne.n	dc16 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dc2e:	4909      	ldr	r1, [pc, #36]	; (dc54 <am_hal_itm_disable+0x98>)
    dc30:	68ca      	ldr	r2, [r1, #12]
    dc32:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dc36:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dc38:	68cb      	ldr	r3, [r1, #12]
    dc3a:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    dc3e:	d1fb      	bne.n	dc38 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    dc40:	4903      	ldr	r1, [pc, #12]	; (dc50 <am_hal_itm_disable+0x94>)
    dc42:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    dc46:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    dc4a:	2a00      	cmp	r2, #0
    dc4c:	d1fb      	bne.n	dc46 <am_hal_itm_disable+0x8a>
}
    dc4e:	bd10      	pop	{r4, pc}
    dc50:	40020000 	.word	0x40020000
    dc54:	e000edf0 	.word	0xe000edf0
    dc58:	c5acce55 	.word	0xc5acce55
    dc5c:	00150511 	.word	0x00150511
    dc60:	00800001 	.word	0x00800001

0000dc64 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    dc64:	7803      	ldrb	r3, [r0, #0]
    dc66:	b1b3      	cbz	r3, dc96 <am_hal_itm_print+0x32>
{
    dc68:	b410      	push	{r4}
    dc6a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    dc6c:	2400      	movs	r4, #0
    dc6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    dc72:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    dc74:	2900      	cmp	r1, #0
    dc76:	d1fa      	bne.n	dc6e <am_hal_itm_print+0xa>
    dc78:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    dc7a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    dc7e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    dc82:	f8dc 3000 	ldr.w	r3, [ip]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d0fb      	beq.n	dc82 <am_hal_itm_print+0x1e>
    while (ui32Length)
    dc8a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    dc8c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    dc90:	d1f5      	bne.n	dc7e <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    dc92:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc96:	4770      	bx	lr

0000dc98 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    dc98:	b141      	cbz	r1, dcac <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    dc9a:	2801      	cmp	r0, #1
{
    dc9c:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    dc9e:	d03a      	beq.n	dd16 <am_hal_mcuctrl_info_get+0x7e>
    dca0:	d322      	bcc.n	dce8 <am_hal_mcuctrl_info_get+0x50>
    dca2:	2802      	cmp	r0, #2
    dca4:	d004      	beq.n	dcb0 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    dca6:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    dca8:	bcf0      	pop	{r4, r5, r6, r7}
    dcaa:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dcac:	2006      	movs	r0, #6
    dcae:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dcb0:	4a41      	ldr	r2, [pc, #260]	; (ddb8 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dcb2:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dcb4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dcb8:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dcba:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dcbe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dcc2:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dcc6:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dcc8:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dcca:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    dccc:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dcd0:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dcd2:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    dcd6:	4334      	orrs	r4, r6
    dcd8:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dcda:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dcde:	4310      	orrs	r0, r2
    dce0:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    dce2:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    dce4:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dce6:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    dce8:	4c33      	ldr	r4, [pc, #204]	; (ddb8 <am_hal_mcuctrl_info_get+0x120>)
    dcea:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dcec:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dcf0:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dcf4:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dcf6:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dcf8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dcfc:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dd00:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    dd02:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dd04:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    dd08:	f004 0501 	and.w	r5, r4, #1
    dd0c:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    dd0e:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dd10:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dd12:	bcf0      	pop	{r4, r5, r6, r7}
    dd14:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dd16:	4a28      	ldr	r2, [pc, #160]	; (ddb8 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    dd18:	4c28      	ldr	r4, [pc, #160]	; (ddbc <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dd1a:	6813      	ldr	r3, [r2, #0]
    dd1c:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    dd1e:	6850      	ldr	r0, [r2, #4]
    dd20:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    dd22:	6897      	ldr	r7, [r2, #8]
    dd24:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    dd26:	68d6      	ldr	r6, [r2, #12]
    dd28:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dd2a:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    dd2c:	4824      	ldr	r0, [pc, #144]	; (ddc0 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dd2e:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    dd30:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    dd34:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    dd38:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    dd3a:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd3e:	4a21      	ldr	r2, [pc, #132]	; (ddc4 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    dd40:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    dd44:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dd46:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    dd4a:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    dd4c:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dd4e:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd50:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dd54:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd58:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dd5a:	f000 040f 	and.w	r4, r0, #15
    dd5e:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dd62:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dd64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dd68:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dd6c:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dd70:	f007 0c0f 	and.w	ip, r7, #15
    dd74:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    dd78:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dd7a:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dd7e:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dd82:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dd86:	f3c5 1703 	ubfx	r7, r5, #4, #4
    dd8a:	433b      	orrs	r3, r7
    dd8c:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    dd8e:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dd92:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dd96:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dd9a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dd9e:	b2e5      	uxtb	r5, r4
    dda0:	042b      	lsls	r3, r5, #16
    dda2:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dda6:	b2d6      	uxtb	r6, r2
    dda8:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    ddaa:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    ddac:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    ddb0:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    ddb2:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    ddb4:	bcf0      	pop	{r4, r5, r6, r7}
    ddb6:	4770      	bx	lr
    ddb8:	40020000 	.word	0x40020000
    ddbc:	0000e3f4 	.word	0x0000e3f4
    ddc0:	0000e434 	.word	0x0000e434
    ddc4:	f0000f00 	.word	0xf0000f00

0000ddc8 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    ddc8:	b570      	push	{r4, r5, r6, lr}
    ddca:	b082      	sub	sp, #8
    ddcc:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    ddce:	f7ff fecf 	bl	db70 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    ddd2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    ddd6:	008c      	lsls	r4, r1, #2
    ddd8:	4e0e      	ldr	r6, [pc, #56]	; (de14 <am_hal_pwrctrl_periph_enable+0x4c>)
    ddda:	4d0f      	ldr	r5, [pc, #60]	; (de18 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    dddc:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    ddde:	592a      	ldr	r2, [r5, r4]
    dde0:	68b3      	ldr	r3, [r6, #8]
    dde2:	4313      	orrs	r3, r2
    dde4:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    dde6:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dde8:	442c      	add	r4, r5
    AM_CRITICAL_END
    ddea:	f7ff fec5 	bl	db78 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    ddee:	2077      	movs	r0, #119	; 0x77
    ddf0:	f7ff fbd0 	bl	d594 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    ddf4:	69b0      	ldr	r0, [r6, #24]
    ddf6:	6864      	ldr	r4, [r4, #4]
    ddf8:	4220      	tst	r0, r4
    ddfa:	d103      	bne.n	de04 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    ddfc:	2077      	movs	r0, #119	; 0x77
    ddfe:	f7ff fbc9 	bl	d594 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    de02:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    de04:	4903      	ldr	r1, [pc, #12]	; (de14 <am_hal_pwrctrl_periph_enable+0x4c>)
    de06:	698d      	ldr	r5, [r1, #24]
    de08:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    de0a:	bf0c      	ite	eq
    de0c:	2001      	moveq	r0, #1
    de0e:	2000      	movne	r0, #0
    de10:	b002      	add	sp, #8
    de12:	bd70      	pop	{r4, r5, r6, pc}
    de14:	40021000 	.word	0x40021000
    de18:	0000e474 	.word	0x0000e474

0000de1c <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    de1c:	b570      	push	{r4, r5, r6, lr}
    de1e:	b082      	sub	sp, #8
    de20:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    de22:	f7ff fea5 	bl	db70 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de26:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    de2a:	008c      	lsls	r4, r1, #2
    de2c:	4e0f      	ldr	r6, [pc, #60]	; (de6c <am_hal_pwrctrl_periph_disable+0x50>)
    de2e:	4d10      	ldr	r5, [pc, #64]	; (de70 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    de30:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de32:	68b3      	ldr	r3, [r6, #8]
    de34:	592a      	ldr	r2, [r5, r4]
    de36:	ea23 0002 	bic.w	r0, r3, r2
    de3a:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    de3c:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de3e:	442c      	add	r4, r5
    AM_CRITICAL_END
    de40:	f7ff fe9a 	bl	db78 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de44:	2077      	movs	r0, #119	; 0x77
    de46:	f7ff fba5 	bl	d594 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de4a:	69b1      	ldr	r1, [r6, #24]
    de4c:	6864      	ldr	r4, [r4, #4]
    de4e:	4221      	tst	r1, r4
    de50:	d003      	beq.n	de5a <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de52:	2077      	movs	r0, #119	; 0x77
    de54:	f7ff fb9e 	bl	d594 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de58:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de5a:	4d04      	ldr	r5, [pc, #16]	; (de6c <am_hal_pwrctrl_periph_disable+0x50>)
    de5c:	69ae      	ldr	r6, [r5, #24]
    de5e:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    de60:	bf14      	ite	ne
    de62:	2001      	movne	r0, #1
    de64:	2000      	moveq	r0, #0
    de66:	b002      	add	sp, #8
    de68:	bd70      	pop	{r4, r5, r6, pc}
    de6a:	bf00      	nop
    de6c:	40021000 	.word	0x40021000
    de70:	0000e474 	.word	0x0000e474

0000de74 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    de74:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    de76:	4c1b      	ldr	r4, [pc, #108]	; (dee4 <am_hal_pwrctrl_low_power_init+0x70>)
    de78:	69a3      	ldr	r3, [r4, #24]
    de7a:	05db      	lsls	r3, r3, #23
{
    de7c:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    de7e:	d502      	bpl.n	de86 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    de80:	2000      	movs	r0, #0
}
    de82:	b003      	add	sp, #12
    de84:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de86:	4d18      	ldr	r5, [pc, #96]	; (dee8 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    de88:	4918      	ldr	r1, [pc, #96]	; (deec <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de8a:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    de8c:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de8e:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    de90:	461a      	mov	r2, r3
    de92:	9000      	str	r0, [sp, #0]
    de94:	f242 7010 	movw	r0, #10000	; 0x2710
    de98:	f7ff fb80 	bl	d59c <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    de9c:	b110      	cbz	r0, dea4 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    de9e:	2004      	movs	r0, #4
}
    dea0:	b003      	add	sp, #12
    dea2:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    dea4:	6821      	ldr	r1, [r4, #0]
    dea6:	f041 0201 	orr.w	r2, r1, #1
    deaa:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    deac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    deae:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    deb2:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    deb4:	68ec      	ldr	r4, [r5, #12]
    deb6:	b2e2      	uxtb	r2, r4
    deb8:	2a11      	cmp	r2, #17
    deba:	d1e1      	bne.n	de80 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    debc:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    dec0:	f360 5356 	bfi	r3, r0, #21, #2
    dec4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    dec8:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    decc:	240f      	movs	r4, #15
    dece:	f364 118b 	bfi	r1, r4, #6, #6
    ded2:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    ded6:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    deda:	f364 0205 	bfi	r2, r4, #0, #6
    dede:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    dee2:	e7ce      	b.n	de82 <am_hal_pwrctrl_low_power_init+0xe>
    dee4:	40021000 	.word	0x40021000
    dee8:	40020000 	.word	0x40020000
    deec:	40020018 	.word	0x40020018

0000def0 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    def0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    def4:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    def6:	68d3      	ldr	r3, [r2, #12]
    def8:	bf0c      	ite	eq
    defa:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    defe:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    df02:	60d3      	str	r3, [r2, #12]
    df04:	4770      	bx	lr
    df06:	bf00      	nop

0000df08 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    df08:	4a03      	ldr	r2, [pc, #12]	; (df18 <am_hal_rtc_osc_disable+0x10>)
    df0a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    df0e:	f043 0010 	orr.w	r0, r3, #16
    df12:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    df16:	4770      	bx	lr
    df18:	40004200 	.word	0x40004200

0000df1c <am_hal_stimer_config>:

    //
    // Read the current config
    //
#if AM_CMSIS_REGS
    ui32CurrVal = CTIMER->STCFG;
    df1c:	4b03      	ldr	r3, [pc, #12]	; (df2c <am_hal_stimer_config+0x10>)
    df1e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
    df22:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    }
#endif // AM_CMSIS_REGS
#endif

    return ui32CurrVal;
}
    df26:	4610      	mov	r0, r2
    df28:	4770      	bx	lr
    df2a:	bf00      	nop
    df2c:	40008000 	.word	0x40008000

0000df30 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
    df30:	2807      	cmp	r0, #7
    df32:	d900      	bls.n	df36 <am_hal_stimer_compare_delta_set+0x6>
    df34:	4770      	bx	lr
{
    df36:	b5f0      	push	{r4, r5, r6, r7, lr}
    df38:	b083      	sub	sp, #12
    df3a:	460c      	mov	r4, r1
    df3c:	4605      	mov	r5, r0
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
    df3e:	f7ff fe17 	bl	db70 <am_hal_interrupt_master_disable>

    //
    // Get current CFG value
    //
#if AM_CMSIS_REGS
    cfgVal = CTIMER->STCFG;
    df42:	4a24      	ldr	r2, [pc, #144]	; (dfd4 <am_hal_stimer_compare_delta_set+0xa4>)
    AM_CRITICAL_BEGIN
    df44:	9001      	str	r0, [sp, #4]
    df46:	4f24      	ldr	r7, [pc, #144]	; (dfd8 <am_hal_stimer_compare_delta_set+0xa8>)
    cfgVal = CTIMER->STCFG;
    df48:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
#if AM_CMSIS_REGS
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    df4c:	f8d2 6140 	ldr.w	r6, [r2, #320]	; 0x140
    df50:	f44f 7380 	mov.w	r3, #256	; 0x100
    df54:	fa03 f005 	lsl.w	r0, r3, r5
    df58:	442f      	add	r7, r5
    df5a:	00bf      	lsls	r7, r7, #2
    df5c:	ea26 0500 	bic.w	r5, r6, r0
    df60:	f8c2 5140 	str.w	r5, [r2, #320]	; 0x140
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
#if AM_CMSIS_REGS
        expVal = CTIMER->STTMR + ui32Delta;
    df64:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
        // Max allowed - taking care of latency
        expMax = expVal + 10;
        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    df68:	603c      	str	r4, [r7, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    df6a:	683b      	ldr	r3, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    df6c:	4422      	add	r2, r4
        // Make sure the value is in expected range
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    df6e:	1a9e      	subs	r6, r3, r2
    df70:	2e00      	cmp	r6, #0
    df72:	db03      	blt.n	df7c <am_hal_stimer_compare_delta_set+0x4c>
        expMax = expVal + 10;
    df74:	320a      	adds	r2, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    df76:	1a9d      	subs	r5, r3, r2
    df78:	2d00      	cmp	r5, #0
    df7a:	dd1e      	ble.n	dfba <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    df7c:	4a15      	ldr	r2, [pc, #84]	; (dfd4 <am_hal_stimer_compare_delta_set+0xa4>)
    df7e:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    df82:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    df84:	683d      	ldr	r5, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    df86:	4423      	add	r3, r4
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    df88:	1aee      	subs	r6, r5, r3
    df8a:	2e00      	cmp	r6, #0
    df8c:	db03      	blt.n	df96 <am_hal_stimer_compare_delta_set+0x66>
        expMax = expVal + 10;
    df8e:	330a      	adds	r3, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    df90:	1aea      	subs	r2, r5, r3
    df92:	2a00      	cmp	r2, #0
    df94:	dd11      	ble.n	dfba <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    df96:	4b0f      	ldr	r3, [pc, #60]	; (dfd4 <am_hal_stimer_compare_delta_set+0xa4>)
    df98:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    df9c:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    df9e:	683d      	ldr	r5, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    dfa0:	4422      	add	r2, r4
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dfa2:	1aae      	subs	r6, r5, r2
    dfa4:	2e00      	cmp	r6, #0
    dfa6:	db03      	blt.n	dfb0 <am_hal_stimer_compare_delta_set+0x80>
        expMax = expVal + 10;
    dfa8:	320a      	adds	r2, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dfaa:	1aab      	subs	r3, r5, r2
    dfac:	2b00      	cmp	r3, #0
    dfae:	dd04      	ble.n	dfba <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    dfb0:	4a08      	ldr	r2, [pc, #32]	; (dfd4 <am_hal_stimer_compare_delta_set+0xa4>)
    dfb2:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    dfb6:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    dfb8:	683b      	ldr	r3, [r7, #0]

    //
    // Restore Compare Enable bit
    //
#if AM_CMSIS_REGS
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    dfba:	4f06      	ldr	r7, [pc, #24]	; (dfd4 <am_hal_stimer_compare_delta_set+0xa4>)
    dfbc:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
    dfc0:	4001      	ands	r1, r0
    dfc2:	4321      	orrs	r1, r4
    dfc4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
#endif // AM_CMSIS_REGS

    //
    // End the critical section.
    //
    AM_CRITICAL_END
    dfc8:	9801      	ldr	r0, [sp, #4]
    dfca:	f7ff fdd5 	bl	db78 <am_hal_interrupt_master_set>
}
    dfce:	b003      	add	sp, #12
    dfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfd2:	bf00      	nop
    dfd4:	40008000 	.word	0x40008000
    dfd8:	10002054 	.word	0x10002054

0000dfdc <am_hal_stimer_int_enable>:
{
    //
    // Enable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
    dfdc:	4a03      	ldr	r2, [pc, #12]	; (dfec <am_hal_stimer_int_enable+0x10>)
    dfde:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    dfe2:	4318      	orrs	r0, r3
    dfe4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    dfe8:	4770      	bx	lr
    dfea:	bf00      	nop
    dfec:	40008000 	.word	0x40008000

0000dff0 <am_hal_stimer_int_clear>:
{
    //
    // Disable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
    dff0:	4b01      	ldr	r3, [pc, #4]	; (dff8 <am_hal_stimer_int_clear+0x8>)
    dff2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    dff6:	4770      	bx	lr
    dff8:	40008000 	.word	0x40008000

0000dffc <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    dffc:	b510      	push	{r4, lr}
    dffe:	b082      	sub	sp, #8
    e000:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    e002:	f7ff fdb5 	bl	db70 <am_hal_interrupt_master_disable>
    e006:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e008:	b124      	cbz	r4, e014 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    e00a:	4b0c      	ldr	r3, [pc, #48]	; (e03c <am_hal_sysctrl_sleep+0x40>)
    e00c:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e010:	07c3      	lsls	r3, r0, #31
    e012:	d50a      	bpl.n	e02a <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e014:	4a0a      	ldr	r2, [pc, #40]	; (e040 <am_hal_sysctrl_sleep+0x44>)
    e016:	6911      	ldr	r1, [r2, #16]
    e018:	f021 0404 	bic.w	r4, r1, #4
    e01c:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    e01e:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    e020:	9801      	ldr	r0, [sp, #4]
    e022:	f7ff fda9 	bl	db78 <am_hal_interrupt_master_set>
}
    e026:	b002      	add	sp, #8
    e028:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e02a:	4b05      	ldr	r3, [pc, #20]	; (e040 <am_hal_sysctrl_sleep+0x44>)
    e02c:	2004      	movs	r0, #4
    e02e:	6118      	str	r0, [r3, #16]
        __WFI();
    e030:	bf30      	wfi
    AM_CRITICAL_END
    e032:	9801      	ldr	r0, [sp, #4]
    e034:	f7ff fda0 	bl	db78 <am_hal_interrupt_master_set>
}
    e038:	b002      	add	sp, #8
    e03a:	bd10      	pop	{r4, pc}
    e03c:	40020000 	.word	0x40020000
    e040:	e000ed00 	.word	0xe000ed00

0000e044 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    e044:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    e046:	4a24      	ldr	r2, [pc, #144]	; (e0d8 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    e048:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    e04a:	2100      	movs	r1, #0
{
    e04c:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    e04e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    e052:	b33b      	cbz	r3, e0a4 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e054:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e056:	4921      	ldr	r1, [pc, #132]	; (e0dc <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e058:	4c21      	ldr	r4, [pc, #132]	; (e0e0 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e05a:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e05c:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    e060:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e062:	458c      	cmp	ip, r1
    e064:	bf98      	it	ls
    e066:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    e068:	f7ff fa76 	bl	d558 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    e06c:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    e06e:	1c5a      	adds	r2, r3, #1
    e070:	d02f      	beq.n	e0d2 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    e072:	08da      	lsrs	r2, r3, #3
    e074:	fbb2 fef4 	udiv	lr, r2, r4
    e078:	f10e 31ff 	add.w	r1, lr, #4294967295
    e07c:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e07e:	4a16      	ldr	r2, [pc, #88]	; (e0d8 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e080:	4918      	ldr	r1, [pc, #96]	; (e0e4 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e082:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e084:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e088:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e08a:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e08c:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e090:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e094:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e098:	f240 20f7 	movw	r0, #759	; 0x2f7
    e09c:	f7ff fa7a 	bl	d594 <am_hal_flash_delay>
}
    e0a0:	b004      	add	sp, #16
    e0a2:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e0a4:	6904      	ldr	r4, [r0, #16]
    e0a6:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e0a8:	6883      	ldr	r3, [r0, #8]
    e0aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e0ae:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e0b0:	4c0c      	ldr	r4, [pc, #48]	; (e0e4 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e0b2:	3901      	subs	r1, #1
    e0b4:	2301      	movs	r3, #1
    e0b6:	408b      	lsls	r3, r1
    e0b8:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e0ba:	6840      	ldr	r0, [r0, #4]
    e0bc:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e0c0:	4302      	orrs	r2, r0
    e0c2:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e0c6:	f240 20f7 	movw	r0, #759	; 0x2f7
    e0ca:	f7ff fa63 	bl	d594 <am_hal_flash_delay>
}
    e0ce:	b004      	add	sp, #16
    e0d0:	bd10      	pop	{r4, pc}
    e0d2:	2005      	movs	r0, #5
    e0d4:	e7d3      	b.n	e07e <am_hal_tpiu_enable+0x3a>
    e0d6:	bf00      	nop
    e0d8:	e0040000 	.word	0xe0040000
    e0dc:	001da380 	.word	0x001da380
    e0e0:	000f4240 	.word	0x000f4240
    e0e4:	40020000 	.word	0x40020000

0000e0e8 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e0e8:	b128      	cbz	r0, e0f6 <am_hal_uart_deinitialize+0xe>
    e0ea:	6803      	ldr	r3, [r0, #0]
    e0ec:	4a07      	ldr	r2, [pc, #28]	; (e10c <am_hal_uart_deinitialize+0x24>)
    e0ee:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e0f2:	4291      	cmp	r1, r2
    e0f4:	d001      	beq.n	e0fa <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e0f6:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    e0f8:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    e0fa:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    e0fc:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    e0fe:	f36f 0200 	bfc	r2, #0, #1
    e102:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    e104:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    e106:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    e108:	4618      	mov	r0, r3
    e10a:	4770      	bx	lr
    e10c:	01ea9e06 	.word	0x01ea9e06

0000e110 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e114:	6804      	ldr	r4, [r0, #0]
    e116:	4b36      	ldr	r3, [pc, #216]	; (e1f0 <am_hal_uart_power_control+0xe0>)
    e118:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e11c:	429c      	cmp	r4, r3
{
    e11e:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e120:	d003      	beq.n	e12a <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e122:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e124:	b004      	add	sp, #16
    e126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e12a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e12c:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e12e:	f107 0008 	add.w	r0, r7, #8
    e132:	460e      	mov	r6, r1
    e134:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e138:	b181      	cbz	r1, e15c <am_hal_uart_power_control+0x4c>
    e13a:	2902      	cmp	r1, #2
    e13c:	d80c      	bhi.n	e158 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e13e:	b992      	cbnz	r2, e166 <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e140:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e144:	341c      	adds	r4, #28
    e146:	0325      	lsls	r5, r4, #12
    e148:	f04f 31ff 	mov.w	r1, #4294967295
    e14c:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e14e:	4640      	mov	r0, r8
    e150:	f7ff fe64 	bl	de1c <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e154:	2000      	movs	r0, #0
            break;
    e156:	e7e5      	b.n	e124 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e158:	2006      	movs	r0, #6
    e15a:	e7e3      	b.n	e124 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e15c:	b322      	cbz	r2, e1a8 <am_hal_uart_power_control+0x98>
    e15e:	792a      	ldrb	r2, [r5, #4]
    e160:	bb42      	cbnz	r2, e1b4 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e162:	2007      	movs	r0, #7
    e164:	e7de      	b.n	e124 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e166:	f7ff fd03 	bl	db70 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e16a:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e16e:	311c      	adds	r1, #28
    e170:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e172:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e174:	6a3a      	ldr	r2, [r7, #32]
    e176:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e17a:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e17c:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e17e:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e182:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e184:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e186:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e18a:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e18c:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e18e:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e190:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e192:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e194:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e196:	f7ff fcef 	bl	db78 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e19a:	682e      	ldr	r6, [r5, #0]
    e19c:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e1a0:	42a0      	cmp	r0, r4
    e1a2:	d1d4      	bne.n	e14e <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e1a4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e1a6:	e7cb      	b.n	e140 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e1a8:	4640      	mov	r0, r8
    e1aa:	9201      	str	r2, [sp, #4]
    e1ac:	f7ff fe0c 	bl	ddc8 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e1b0:	9801      	ldr	r0, [sp, #4]
    e1b2:	e7b7      	b.n	e124 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e1b4:	4640      	mov	r0, r8
    e1b6:	f7ff fe07 	bl	ddc8 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e1ba:	f7ff fcd9 	bl	db70 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e1be:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e1c2:	331c      	adds	r3, #28
    e1c4:	031f      	lsls	r7, r3, #12
    e1c6:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e1c8:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e1ca:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e1cc:	68e9      	ldr	r1, [r5, #12]
    e1ce:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e1d0:	6928      	ldr	r0, [r5, #16]
    e1d2:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e1d4:	696a      	ldr	r2, [r5, #20]
    e1d6:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e1d8:	69ab      	ldr	r3, [r5, #24]
    e1da:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e1dc:	69ec      	ldr	r4, [r5, #28]
    e1de:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e1e0:	6a29      	ldr	r1, [r5, #32]
    e1e2:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e1e4:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e1e6:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e1e8:	f7ff fcc6 	bl	db78 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e1ec:	4630      	mov	r0, r6
    e1ee:	e799      	b.n	e124 <am_hal_uart_power_control+0x14>
    e1f0:	01ea9e06 	.word	0x01ea9e06

0000e1f4 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    e1f4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    e1f8:	b570      	push	{r4, r5, r6, lr}
    e1fa:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    e1fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    e1fe:	b183      	cbz	r3, e222 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e200:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e202:	b170      	cbz	r0, e222 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    e204:	4e13      	ldr	r6, [pc, #76]	; (e254 <am_hal_uart_tx_flush+0x60>)
    e206:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e208:	fbb6 f2f1 	udiv	r2, r6, r1
    e20c:	2a02      	cmp	r2, #2
    e20e:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e212:	bf8c      	ite	hi
    e214:	3829      	subhi	r0, #41	; 0x29
    e216:	2001      	movls	r0, #1
    e218:	f7ff f9bc 	bl	d594 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e21e:	2b00      	cmp	r3, #0
    e220:	d1f1      	bne.n	e206 <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e222:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e226:	351c      	adds	r5, #28
    e228:	032d      	lsls	r5, r5, #12
    e22a:	69a8      	ldr	r0, [r5, #24]
    e22c:	0702      	lsls	r2, r0, #28
    e22e:	d50e      	bpl.n	e24e <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    e230:	4e08      	ldr	r6, [pc, #32]	; (e254 <am_hal_uart_tx_flush+0x60>)
    e232:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e234:	fbb6 f2f1 	udiv	r2, r6, r1
    e238:	2a02      	cmp	r2, #2
    e23a:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e23e:	bf8c      	ite	hi
    e240:	3829      	subhi	r0, #41	; 0x29
    e242:	2001      	movls	r0, #1
    e244:	f7ff f9a6 	bl	d594 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e248:	69ab      	ldr	r3, [r5, #24]
    e24a:	071b      	lsls	r3, r3, #28
    e24c:	d4f1      	bmi.n	e232 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    e24e:	2000      	movs	r0, #0
    e250:	bd70      	pop	{r4, r5, r6, pc}
    e252:	bf00      	nop
    e254:	00b71b00 	.word	0x00b71b00
    e258:	6d695453 	.word	0x6d695453
    e25c:	45207265 	.word	0x45207265
    e260:	706d6178 	.word	0x706d6178
    e264:	000a656c 	.word	0x000a656c
    e268:	0a0a0a0a 	.word	0x0a0a0a0a
    e26c:	0a0a0a0a 	.word	0x0a0a0a0a
    e270:	0a0a0a0a 	.word	0x0a0a0a0a
    e274:	0a0a0a0a 	.word	0x0a0a0a0a
    e278:	00000a0a 	.word	0x00000a0a

0000e27c <g_AM_BSP_GPIO_ITM_SWO>:
    e27c:	00000002                                ....

0000e280 <am_hal_cachectrl_defaults>:
    e280:	00000308                                ....

0000e284 <g_AM_HAL_GPIO_DISABLE>:
    e284:	00000003                                ....

0000e288 <g_AM_HAL_GPIO_OUTPUT>:
    e288:	00000403                                ....

0000e28c <g_AM_HAL_GPIO_TRISTATE>:
    e28c:	00000c03                                ....

0000e290 <g_ui8Bit76Capabilities>:
    e290:	02800101 80010180 80800101 80808080     ................
    e2a0:	80808080 80808008 01800180 80808080     ................
    e2b0:	80808080 01800402 01010401 80808080     ................
    e2c0:	00000101                                ....

0000e2c4 <g_ui8Inpen>:
    e2c4:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e2d4:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e2e4:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e2f4:	00003130                                01..

0000e2f8 <g_ui8NCEtable>:
    e2f8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e308:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e318:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e328:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e338:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e348:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e358:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e368:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e378:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e388:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e398:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e3a8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e3b8:	32221202 43231303                       .."2..#C

0000e3c0 <g_ui8nCEpins>:
    e3c0:	02070707 00080802 01020202 01010101     ................
    e3d0:	01010101 01010101 01010101 01010101     ................
    e3e0:	01010101 08010101 01010008 01010101     ................
    e3f0:	00000101                                ....

0000e3f4 <g_am_hal_mcuctrl_flash_size>:
    e3f4:	00004000 00008000 00010000 00020000     .@..............
    e404:	00040000 00080000 00100000 00200000     .............. .
	...

0000e434 <g_am_hal_mcuctrl_sram_size>:
    e434:	00004000 00008000 00010000 00020000     .@..............
    e444:	00040000 00080000 00100000 00060000     ................
	...

0000e474 <am_hal_pwrctrl_peripheral_control>:
	...
    e480:	00000001 00000004 00000004 00000002     ................
    e490:	00000008 00000008 00000004 00000008     ................
    e4a0:	00000008 00000008 00000008 00000008     ................
    e4b0:	00000010 00000010 00000010 00000020     ............ ...
    e4c0:	00000010 00000010 00000040 00000010     ........@.......
    e4d0:	00000010 00000080 00000004 00000004     ................
    e4e0:	00000100 00000004 00000004 00000200     ................
    e4f0:	00000020 00000020 00000400 00000004      ... ...........
    e500:	00000004 00000800 00000040 00000040     ........@...@...
    e510:	00001000 00000080 00000080 00002000     ............. ..
    e520:	00000100 00000100                       ........
