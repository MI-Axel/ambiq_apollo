
fast_gpio_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000310c  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000f10c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001028  0000f134  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0002117d  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000313b  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000098bb  00000000  00000000  00035317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000640  00000000  00000000  0003ebd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001718  00000000  00000000  0003f212  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005cd5  00000000  00000000  0004092a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009f40  00000000  00000000  000465ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  0005053f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000112c  00000000  00000000  000505bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 ed c3 00 00 e5 c3 00 00 7d c4 00 00     ............}...
    c010:	7d c4 00 00 7d c4 00 00 7d c4 00 00 00 00 00 00     }...}...}.......
	...
    c02c:	e9 c3 00 00 e9 c3 00 00 00 00 00 00 e9 c3 00 00     ................
    c03c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c04c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c05c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c06c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c07c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c08c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c09c:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c0ac:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c0bc:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 e9 c3 00 00     ................
    c0cc:	e9 c3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t ui32Ret, ux;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
{
    c1a4:	b0cd      	sub	sp, #308	; 0x134
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	4608      	mov	r0, r1
    c1a8:	f001 fca4 	bl	daf4 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	487a      	ldr	r0, [pc, #488]	; (c398 <main+0x1f8>)
    //
    // Configure the pins that are to be used for Fast GPIO.
    //
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c1ae:	4e7b      	ldr	r6, [pc, #492]	; (c39c <main+0x1fc>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b0:	f001 fc6c 	bl	da8c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b4:	f001 fc94 	bl	dae0 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c1b8:	f001 fbe0 	bl	d97c <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
    c1bc:	f001 fc46 	bl	da4c <am_bsp_itm_printf_enable>
    am_util_stdio_terminal_clear();
    c1c0:	f001 fbd6 	bl	d970 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Fast GPIO Example\n");
    c1c4:	4876      	ldr	r0, [pc, #472]	; (c3a0 <main+0x200>)
    c1c6:	f001 fbb9 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf("When run on an Apollo3 EVB:\n");
    c1ca:	4876      	ldr	r0, [pc, #472]	; (c3a4 <main+0x204>)
    c1cc:	f001 fbb6 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf(" - An ~24MHz waveform (after instructions have cached) is output on Pin %d.\n", FASTGPIO_PIN_B);
    c1d0:	2101      	movs	r1, #1
    c1d2:	4875      	ldr	r0, [pc, #468]	; (c3a8 <main+0x208>)
    c1d4:	f001 fbb2 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf(" - Then the Apollo3 EVB LEDs display a short pattern.\n");
    c1d8:	4874      	ldr	r0, [pc, #464]	; (c3ac <main+0x20c>)
    c1da:	f001 fbaf 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf(" - LED0=pin %d, LED1=%d, LED2=%d, LED3=%d, LED4=%d.\n", AM_BSP_GPIO_LED0, AM_BSP_GPIO_LED1,
    c1de:	220e      	movs	r2, #14
    c1e0:	2311      	movs	r3, #17
    c1e2:	e88d 000c 	stmia.w	sp, {r2, r3}
    c1e6:	210a      	movs	r1, #10
    c1e8:	230f      	movs	r3, #15
    c1ea:	221e      	movs	r2, #30
    c1ec:	4870      	ldr	r0, [pc, #448]	; (c3b0 <main+0x210>)
    c1ee:	f001 fba5 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf(" - Note that LED1 and LED3 of the EVB are located on the same Fast GPIO row (%d and %d).\n",
    c1f2:	2206      	movs	r2, #6
    c1f4:	4611      	mov	r1, r2
    c1f6:	486f      	ldr	r0, [pc, #444]	; (c3b4 <main+0x214>)
    c1f8:	f001 fba0 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf("   Because of that, LED3 is disabled during the walk sequence and is thus skipped in the\n");
    c1fc:	486e      	ldr	r0, [pc, #440]	; (c3b8 <main+0x218>)
    c1fe:	f001 fb9d 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf("   sequence. Then it is enabled during the all-blink and blinks along with LED1.\n");
    c202:	486e      	ldr	r0, [pc, #440]	; (c3bc <main+0x21c>)
    c204:	f001 fb9a 	bl	d93c <am_util_stdio_printf>
    am_util_stdio_printf("\n");
    c208:	486d      	ldr	r0, [pc, #436]	; (c3c0 <main+0x220>)
    c20a:	f001 fb97 	bl	d93c <am_util_stdio_printf>
    am_util_delay_ms(100);
    c20e:	2064      	movs	r0, #100	; 0x64
    c210:	f000 f920 	bl	c454 <am_util_delay_ms>
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c214:	4b6b      	ldr	r3, [pc, #428]	; (c3c4 <main+0x224>)
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c216:	496c      	ldr	r1, [pc, #432]	; (c3c8 <main+0x228>)
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c218:	6832      	ldr	r2, [r6, #0]
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c21a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c21e:	2402      	movs	r4, #2
    c220:	601c      	str	r4, [r3, #0]
    am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c222:	6048      	str	r0, [r1, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << FASTGPIO_PIN_B,
    c224:	2300      	movs	r3, #0
    c226:	2002      	movs	r0, #2
    c228:	2100      	movs	r1, #0
    c22a:	f001 ff4f 	bl	e0cc <am_hal_gpio_fast_pinconfig>
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c22e:	2800      	cmp	r0, #0
    c230:	f040 80a8 	bne.w	c384 <main+0x1e4>
    }

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c234:	f001 fbd4 	bl	d9e0 <am_bsp_debug_printf_disable>
    {
        //
        // Do 20 iterations in a loop so we can achieve a 24MHz waveform.
        // With -O3, each macro call compiles into a single instruction.
        //
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c238:	4c63      	ldr	r4, [pc, #396]	; (c3c8 <main+0x228>)
    c23a:	2002      	movs	r0, #2
    c23c:	4602      	mov	r2, r0
    am_bsp_debug_printf_disable();
    c23e:	230a      	movs	r3, #10
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c240:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    while (ux--)
    c244:	3b01      	subs	r3, #1
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 0
    c246:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c248:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 1
    c24a:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c24c:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 2
    c24e:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c250:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 3
    c252:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c254:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 4
    c256:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c258:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 5
    c25a:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c25c:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 6
    c25e:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c260:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 7
    c262:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c264:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 8
    c266:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c268:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 9
    c26a:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c26c:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 10
    c26e:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c270:	6065      	str	r5, [r4, #4]


        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 11
    c272:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c274:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 12
    c276:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c278:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 13
    c27a:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c27c:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 14
    c27e:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c280:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 15
    c282:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c284:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 16
    c286:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c288:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 17
    c28a:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c28c:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 18
    c28e:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c290:	6065      	str	r5, [r4, #4]
        am_hal_gpio_fastgpio_set(FASTGPIO_PIN_B); // 19
    c292:	6062      	str	r2, [r4, #4]
        am_hal_gpio_fastgpio_clr(FASTGPIO_PIN_B);
    c294:	6065      	str	r5, [r4, #4]
    while (ux--)
    c296:	d1d5      	bne.n	c244 <main+0xa4>
    }

    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c298:	494a      	ldr	r1, [pc, #296]	; (c3c4 <main+0x224>)
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED4);
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c29a:	6832      	ldr	r2, [r6, #0]
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c29c:	f44f 077f 	mov.w	r7, #16711680	; 0xff0000
    c2a0:	6067      	str	r7, [r4, #4]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c2a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    am_hal_gpio_fastgpio_disable(FASTGPIO_PIN_B);
    c2a6:	6008      	str	r0, [r1, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c2a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c2ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c2b0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    c2b4:	f8c1 e000 	str.w	lr, [r1]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c2b8:	600f      	str	r7, [r1, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c2ba:	600e      	str	r6, [r1, #0]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    c2bc:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c2c0:	6008      	str	r0, [r1, #0]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c2c2:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c2c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c2ca:	600d      	str	r5, [r1, #0]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED0);
    c2cc:	6067      	str	r7, [r4, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c2ce:	2100      	movs	r1, #0
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED1);
    c2d0:	6066      	str	r6, [r4, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED2);
    c2d2:	6060      	str	r0, [r4, #4]
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED3);
    c2d4:	6066      	str	r6, [r4, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c2d6:	483d      	ldr	r0, [pc, #244]	; (c3cc <main+0x22c>)
    am_hal_gpio_fastgpio_clr(AM_BSP_GPIO_LED4);
    c2d8:	6065      	str	r5, [r4, #4]
    ui32Ret = am_hal_gpio_fast_pinconfig((uint64_t)0x1 << AM_BSP_GPIO_LED0 |
    c2da:	f001 fef7 	bl	e0cc <am_hal_gpio_fast_pinconfig>
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED1 |
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED2 |
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED3 |
                                         (uint64_t)0x1 << AM_BSP_GPIO_LED4,
                                         g_AM_HAL_GPIO_OUTPUT_12, 0);
    if ( ui32Ret )
    c2de:	2800      	cmp	r0, #0
    c2e0:	d155      	bne.n	c38e <main+0x1ee>
    // We know for Apollo3 EVB that LED1 and 3 are on the same row. Knowing
    // that, we can demonstrate how the 2 pins will display the same value.
    // For the 4 bit sequence, we'll disable LED3 so it doesn't turn on with
    // LED1.
    //
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c2e2:	4b38      	ldr	r3, [pc, #224]	; (c3c4 <main+0x224>)

const uint32_t g_ui32LED_pattern[][2] =
    c2e4:	493a      	ldr	r1, [pc, #232]	; (c3d0 <main+0x230>)
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c2e6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c2ea:	601c      	str	r4, [r3, #0]
const uint32_t g_ui32LED_pattern[][2] =
    c2ec:	a802      	add	r0, sp, #8
    c2ee:	f44f 7294 	mov.w	r2, #296	; 0x128
    c2f2:	f002 fbcf 	bl	ea94 <memcpy>
    {0x00, 300},
    {0xFFFFFFFF, 0xFFFFFFFF},
};

    ux = 0;
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c2f6:	9b02      	ldr	r3, [sp, #8]
    c2f8:	1c59      	adds	r1, r3, #1
    c2fa:	d02c      	beq.n	c356 <main+0x1b6>
    {
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c2fc:	4e35      	ldr	r6, [pc, #212]	; (c3d4 <main+0x234>)
            am_hal_gpio_fastgpio_set(ui32Led);
    c2fe:	4d32      	ldr	r5, [pc, #200]	; (c3c8 <main+0x228>)
        {
            // Enable LED3. After this, it will react the same as LED1.
            am_hal_gpio_fastgpio_enable(AM_BSP_GPIO_LED3);
    c300:	4f35      	ldr	r7, [pc, #212]	; (c3d8 <main+0x238>)
    c302:	ac02      	add	r4, sp, #8
    c304:	e006      	b.n	c314 <main+0x174>
    c306:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c30a:	6038      	str	r0, [r7, #0]
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c30c:	f854 3f08 	ldr.w	r3, [r4, #8]!
    c310:	1c5a      	adds	r2, r3, #1
    c312:	d020      	beq.n	c356 <main+0x1b6>
        if ( g_ui32LED_pattern[ux][0] == 0xA5000001 )
    c314:	42b3      	cmp	r3, r6
    c316:	d0f6      	beq.n	c306 <main+0x166>
        if ( ui32Value & 1 )
    c318:	07da      	lsls	r2, r3, #31
            am_hal_gpio_fastgpio_clr(ui32Led);
    c31a:	bf54      	ite	pl
    c31c:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
            am_hal_gpio_fastgpio_set(ui32Led);
    c320:	2204      	movmi	r2, #4
        if ( ui32Value & 1 )
    c322:	0799      	lsls	r1, r3, #30
        }
        else
        {
            set_leds(g_ui32LED_pattern[ux][0], g_ui32LED_pattern[ux][1]);
    c324:	6860      	ldr	r0, [r4, #4]
            am_hal_gpio_fastgpio_set(ui32Led);
    c326:	606a      	str	r2, [r5, #4]
            am_hal_gpio_fastgpio_clr(ui32Led);
    c328:	bf54      	ite	pl
    c32a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
            am_hal_gpio_fastgpio_set(ui32Led);
    c32e:	2240      	movmi	r2, #64	; 0x40
        if ( ui32Value & 1 )
    c330:	0759      	lsls	r1, r3, #29
            am_hal_gpio_fastgpio_clr(ui32Led);
    c332:	bf54      	ite	pl
    c334:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
            am_hal_gpio_fastgpio_set(ui32Led);
    c338:	2180      	movmi	r1, #128	; 0x80
    c33a:	606a      	str	r2, [r5, #4]
    c33c:	6069      	str	r1, [r5, #4]
        if ( ui32Value & 1 )
    c33e:	0719      	lsls	r1, r3, #28
            am_hal_gpio_fastgpio_clr(ui32Led);
    c340:	bf54      	ite	pl
    c342:	f44f 3300 	movpl.w	r3, #131072	; 0x20000
            am_hal_gpio_fastgpio_set(ui32Led);
    c346:	2302      	movmi	r3, #2
    c348:	606b      	str	r3, [r5, #4]
    am_util_delay_ms(ui32delayms);
    c34a:	f000 f883 	bl	c454 <am_util_delay_ms>
    while ( g_ui32LED_pattern[ux][0] != 0xFFFFFFFF )
    c34e:	f854 3f08 	ldr.w	r3, [r4, #8]!
    c352:	1c5a      	adds	r2, r3, #1
    c354:	d1de      	bne.n	c314 <main+0x174>

    //
    // Disable everything.
    //
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c356:	4b1b      	ldr	r3, [pc, #108]	; (c3c4 <main+0x224>)
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c358:	4e1b      	ldr	r6, [pc, #108]	; (c3c8 <main+0x228>)
    c35a:	f44f 077f 	mov.w	r7, #16711680	; 0xff0000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c35e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c362:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    APBDMA->BBSETCLEAR = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, 0xff);
    c36a:	6077      	str	r7, [r6, #4]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c36c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED0);
    c370:	601d      	str	r5, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED1);
    c376:	601c      	str	r4, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED2);
    c378:	6018      	str	r0, [r3, #0]
}
    c37a:	2000      	movs	r0, #0
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED3);
    c37c:	6019      	str	r1, [r3, #0]
    am_hal_gpio_fastgpio_disable(AM_BSP_GPIO_LED4);
    c37e:	601a      	str	r2, [r3, #0]
}
    c380:	b04d      	add	sp, #308	; 0x134
    c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Error returned from am_hal_gpio_fast_pinconfig() = .\n", ui32Ret);
    c384:	4601      	mov	r1, r0
    c386:	4815      	ldr	r0, [pc, #84]	; (c3dc <main+0x23c>)
    c388:	f001 fad8 	bl	d93c <am_util_stdio_printf>
    c38c:	e752      	b.n	c234 <main+0x94>
        am_util_stdio_printf("Error returned from LED am_hal_gpio_fast_pinconfig() = 0x%X.\n", ui32Ret);
    c38e:	4601      	mov	r1, r0
    c390:	4813      	ldr	r0, [pc, #76]	; (c3e0 <main+0x240>)
    c392:	f001 fad3 	bl	d93c <am_util_stdio_printf>
    c396:	e7a4      	b.n	c2e2 <main+0x142>
    c398:	0000ee64 	.word	0x0000ee64
    c39c:	0000ee70 	.word	0x0000ee70
    c3a0:	0000ebd4 	.word	0x0000ebd4
    c3a4:	0000ebe8 	.word	0x0000ebe8
    c3a8:	0000ec08 	.word	0x0000ec08
    c3ac:	0000ec58 	.word	0x0000ec58
    c3b0:	0000ec90 	.word	0x0000ec90
    c3b4:	0000ecc8 	.word	0x0000ecc8
    c3b8:	0000ed24 	.word	0x0000ed24
    c3bc:	0000ed80 	.word	0x0000ed80
    c3c0:	0000ee08 	.word	0x0000ee08
    c3c4:	400100b4 	.word	0x400100b4
    c3c8:	40011000 	.word	0x40011000
    c3cc:	4002c400 	.word	0x4002c400
    c3d0:	0000eaac 	.word	0x0000eaac
    c3d4:	a5000001 	.word	0xa5000001
    c3d8:	400100a8 	.word	0x400100a8
    c3dc:	0000edd4 	.word	0x0000edd4
    c3e0:	0000ee0c 	.word	0x0000ee0c

0000c3e4 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c3e4:	e7fe      	b.n	c3e4 <NMI_Handler>
    c3e6:	bf00      	nop

0000c3e8 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c3e8:	e7fe      	b.n	c3e8 <DebugMon_Handler>
    c3ea:	bf00      	nop

0000c3ec <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    c3ec:	4811      	ldr	r0, [pc, #68]	; (c434 <zero_loop+0x12>)
    c3ee:	4912      	ldr	r1, [pc, #72]	; (c438 <zero_loop+0x16>)
    c3f0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    c3f2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    c3f6:	4811      	ldr	r0, [pc, #68]	; (c43c <zero_loop+0x1a>)
    c3f8:	6801      	ldr	r1, [r0, #0]
    c3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c3fe:	6001      	str	r1, [r0, #0]
    c400:	f3bf 8f4f 	dsb	sy
    c404:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    c408:	480d      	ldr	r0, [pc, #52]	; (c440 <zero_loop+0x1e>)
    c40a:	490e      	ldr	r1, [pc, #56]	; (c444 <zero_loop+0x22>)
    c40c:	4a0e      	ldr	r2, [pc, #56]	; (c448 <zero_loop+0x26>)

0000c40e <copy_loop>:
    c40e:	f850 3b04 	ldr.w	r3, [r0], #4
    c412:	f841 3b04 	str.w	r3, [r1], #4
    c416:	4291      	cmp	r1, r2
    c418:	dbf9      	blt.n	c40e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    c41a:	480c      	ldr	r0, [pc, #48]	; (c44c <zero_loop+0x2a>)
    c41c:	490c      	ldr	r1, [pc, #48]	; (c450 <zero_loop+0x2e>)
    c41e:	f04f 0200 	mov.w	r2, #0

0000c422 <zero_loop>:
    c422:	4288      	cmp	r0, r1
    c424:	bfb8      	it	lt
    c426:	f840 2b04 	strlt.w	r2, [r0], #4
    c42a:	dbfa      	blt.n	c422 <zero_loop>
    main();
    c42c:	f7ff feb8 	bl	c1a0 <main>
    __asm("    bkpt     ");
    c430:	be00      	bkpt	0x0000
    c432:	0000      	.short	0x0000
    c434:	e000ed08 	.word	0xe000ed08
    c438:	0000c000 	.word	0x0000c000
    c43c:	e000ed88 	.word	0xe000ed88
    c440:	0000f10c 	.word	0x0000f10c
    c444:	10001000 	.word	0x10001000
    c448:	10001028 	.word	0x10001028
    c44c:	10001028 	.word	0x10001028
    c450:	10001138 	.word	0x10001138

0000c454 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c454:	b510      	push	{r4, lr}
    c456:	b084      	sub	sp, #16
    c458:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c45a:	a801      	add	r0, sp, #4
    c45c:	f001 fba6 	bl	dbac <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c460:	9801      	ldr	r0, [sp, #4]
    c462:	4b05      	ldr	r3, [pc, #20]	; (c478 <am_util_delay_ms+0x24>)
    c464:	fba3 3100 	umull	r3, r1, r3, r0
    c468:	0988      	lsrs	r0, r1, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c46a:	fb04 f000 	mul.w	r0, r4, r0
    c46e:	f001 fbbb 	bl	dbe8 <am_hal_flash_delay>
}
    c472:	b004      	add	sp, #16
    c474:	bd10      	pop	{r4, pc}
    c476:	bf00      	nop
    c478:	057619f1 	.word	0x057619f1

0000c47c <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c47c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c47e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c480:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c482:	f000 f805 	bl	c490 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c486:	bd01      	pop	{r0, pc}

0000c488 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c488:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c48a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c48c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c48e:	4770      	bx	lr

0000c490 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c490:	b500      	push	{lr}
    c492:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c494:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c496:	4a2e      	ldr	r2, [pc, #184]	; (c550 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c498:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c49a:	9301      	str	r3, [sp, #4]
    c49c:	9300      	str	r3, [sp, #0]
    c49e:	9302      	str	r3, [sp, #8]
    c4a0:	9303      	str	r3, [sp, #12]
    c4a2:	9304      	str	r3, [sp, #16]
    c4a4:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c4a6:	6811      	ldr	r1, [r2, #0]
    c4a8:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c4aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c4ac:	b2d9      	uxtb	r1, r3
    c4ae:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c4b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c4b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c4b8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c4bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c4be:	0c19      	lsrs	r1, r3, #16
    c4c0:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c4c4:	6912      	ldr	r2, [r2, #16]
    c4c6:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4c8:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    c4cc:	078a      	lsls	r2, r1, #30
{
    c4ce:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4d0:	d437      	bmi.n	c542 <am_util_faultisr_collect_data+0xb2>
    c4d2:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4d6:	4619      	mov	r1, r3
    c4d8:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4da:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4dc:	f7ff ffd4 	bl	c488 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4e0:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4e2:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4e4:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c4e6:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4e8:	f7ff ffce 	bl	c488 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4ec:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4ee:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4f0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4f2:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4f4:	f7ff ffc8 	bl	c488 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4f8:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4fa:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4fc:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4fe:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c500:	f7ff ffc2 	bl	c488 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c504:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c506:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c508:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c50a:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c50c:	f7ff ffbc 	bl	c488 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c510:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c512:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c514:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c516:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c518:	f7ff ffb6 	bl	c488 <getStackedReg>
    c51c:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c51e:	4619      	mov	r1, r3
    c520:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c522:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c524:	f7ff ffb0 	bl	c488 <getStackedReg>
    c528:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c52a:	4619      	mov	r1, r3
    c52c:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c52e:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c530:	f7ff ffaa 	bl	c488 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c534:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c536:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c538:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c53a:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c53c:	f002 f85e 	bl	e5fc <am_hal_mcuctrl_info_get>
    c540:	e7fe      	b.n	c540 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c542:	4601      	mov	r1, r0
    c544:	2006      	movs	r0, #6
    c546:	f7ff ff9f 	bl	c488 <getStackedReg>
    c54a:	4602      	mov	r2, r0
    c54c:	e7c3      	b.n	c4d6 <am_util_faultisr_collect_data+0x46>
    c54e:	bf00      	nop
    c550:	e000ed28 	.word	0xe000ed28

0000c554 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c558:	b095      	sub	sp, #84	; 0x54
    c55a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    c55e:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c560:	2001      	movs	r0, #1
{
    c562:	460d      	mov	r5, r1
    c564:	920b      	str	r2, [sp, #44]	; 0x2c
    c566:	46f4      	mov	ip, lr
    c568:	900a      	str	r0, [sp, #40]	; 0x28
    c56a:	e00b      	b.n	c584 <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
    c56c:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c570:	4604      	mov	r4, r0
    c572:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c574:	2800      	cmp	r0, #0
    c576:	f000 8083 	beq.w	c680 <uint64_to_str+0x12c>
    c57a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c57c:	3101      	adds	r1, #1
    c57e:	910a      	str	r1, [sp, #40]	; 0x28
    c580:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c584:	08a3      	lsrs	r3, r4, #2
    c586:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    c58a:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    c58e:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c592:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    c596:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c598:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
    c59a:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c59e:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    c5a2:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
    c5a6:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
    c5a8:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
    c5ac:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
    c5ae:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
    c5b2:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
    c5b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
    c5ba:	d0d7      	beq.n	c56c <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5bc:	08a0      	lsrs	r0, r4, #2
    c5be:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    c5c2:	08ae      	lsrs	r6, r5, #2
    c5c4:	9304      	str	r3, [sp, #16]
    c5c6:	9605      	str	r6, [sp, #20]
    c5c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5cc:	086b      	lsrs	r3, r5, #1
    c5ce:	ea4f 0234 	mov.w	r2, r4, rrx
    c5d2:	1882      	adds	r2, r0, r2
    c5d4:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
    c5d8:	0911      	lsrs	r1, r2, #4
    c5da:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
    c5de:	1812      	adds	r2, r2, r0
    c5e0:	ea4f 1613 	mov.w	r6, r3, lsr #4
    c5e4:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
    c5e6:	0a11      	lsrs	r1, r2, #8
    c5e8:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
    c5ec:	0a1e      	lsrs	r6, r3, #8
    c5ee:	9601      	str	r6, [sp, #4]
    c5f0:	9000      	str	r0, [sp, #0]
    c5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
    c5f6:	1882      	adds	r2, r0, r2
    c5f8:	4616      	mov	r6, r2
    c5fa:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
    c5fe:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
    c600:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
    c602:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
    c606:	0c1b      	lsrs	r3, r3, #16
    c608:	9303      	str	r3, [sp, #12]
    c60a:	9002      	str	r0, [sp, #8]
    c60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c610:	eb10 0806 	adds.w	r8, r0, r6
    c614:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
    c618:	9308      	str	r3, [sp, #32]
    c61a:	9709      	str	r7, [sp, #36]	; 0x24
    c61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c620:	eb10 0208 	adds.w	r2, r0, r8
    c624:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
    c628:	08d1      	lsrs	r1, r2, #3
    c62a:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
    c62e:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
    c630:	00b8      	lsls	r0, r7, #2
    c632:	ea4f 0a86 	mov.w	sl, r6, lsl #2
    c636:	eb1a 0906 	adds.w	r9, sl, r6
    c63a:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
    c63e:	eb48 0307 	adc.w	r3, r8, r7
    c642:	eb19 0209 	adds.w	r2, r9, r9
    c646:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    c648:	f114 0b06 	adds.w	fp, r4, #6
    c64c:	f145 0500 	adc.w	r5, r5, #0
    c650:	ebbb 0202 	subs.w	r2, fp, r2
    c654:	eb65 0303 	sbc.w	r3, r5, r3
    c658:	0915      	lsrs	r5, r2, #4
    c65a:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
    c65e:	091b      	lsrs	r3, r3, #4
    c660:	9206      	str	r2, [sp, #24]
    c662:	9307      	str	r3, [sp, #28]
    c664:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    c668:	1996      	adds	r6, r2, r6
    c66a:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
    c66e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    c672:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    c676:	3430      	adds	r4, #48	; 0x30
    c678:	f88c 4000 	strb.w	r4, [ip]
    c67c:	4634      	mov	r4, r6
    c67e:	e77c      	b.n	c57a <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c680:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c682:	980a      	ldr	r0, [sp, #40]	; 0x28
    c684:	2e00      	cmp	r6, #0
    c686:	d059      	beq.n	c73c <uint64_to_str+0x1e8>
    c688:	eb0e 0a00 	add.w	sl, lr, r0
    c68c:	46d3      	mov	fp, sl
    c68e:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c692:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c696:	7037      	strb	r7, [r6, #0]
    c698:	44d4      	add	ip, sl
        while ( ix-- )
    c69a:	45de      	cmp	lr, fp
    c69c:	4632      	mov	r2, r6
    c69e:	f00c 0107 	and.w	r1, ip, #7
    c6a2:	bf08      	it	eq
    c6a4:	4632      	moveq	r2, r6
    c6a6:	d047      	beq.n	c738 <uint64_to_str+0x1e4>
    c6a8:	b349      	cbz	r1, c6fe <uint64_to_str+0x1aa>
    c6aa:	2901      	cmp	r1, #1
    c6ac:	d021      	beq.n	c6f2 <uint64_to_str+0x19e>
    c6ae:	2902      	cmp	r1, #2
    c6b0:	d01b      	beq.n	c6ea <uint64_to_str+0x196>
    c6b2:	2903      	cmp	r1, #3
    c6b4:	d015      	beq.n	c6e2 <uint64_to_str+0x18e>
    c6b6:	2904      	cmp	r1, #4
    c6b8:	d00f      	beq.n	c6da <uint64_to_str+0x186>
    c6ba:	2905      	cmp	r1, #5
    c6bc:	d009      	beq.n	c6d2 <uint64_to_str+0x17e>
    c6be:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
    c6c0:	bf1c      	itt	ne
    c6c2:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    c6c6:	f802 1f01 	strbne.w	r1, [r2, #1]!
    c6ca:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c6ce:	f802 3f01 	strb.w	r3, [r2, #1]!
    c6d2:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    c6d6:	f802 6f01 	strb.w	r6, [r2, #1]!
    c6da:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    c6de:	f802 4f01 	strb.w	r4, [r2, #1]!
    c6e2:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c6e6:	f802 7f01 	strb.w	r7, [r2, #1]!
    c6ea:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    c6ee:	f802 5f01 	strb.w	r5, [r2, #1]!
    c6f2:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    c6f6:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
    c6fa:	45de      	cmp	lr, fp
    c6fc:	d01b      	beq.n	c736 <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
    c6fe:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    c702:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    c706:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    c70a:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    c70e:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    c712:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    c716:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    c71a:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    c71e:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
    c720:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
    c722:	7093      	strb	r3, [r2, #2]
    c724:	f882 9003 	strb.w	r9, [r2, #3]
    c728:	7117      	strb	r7, [r2, #4]
    c72a:	7156      	strb	r6, [r2, #5]
    c72c:	7195      	strb	r5, [r2, #6]
    c72e:	71d4      	strb	r4, [r2, #7]
    c730:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
    c734:	d1e3      	bne.n	c6fe <uint64_to_str+0x1aa>
    c736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c738:	2100      	movs	r1, #0
    c73a:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    c73c:	b015      	add	sp, #84	; 0x54
    c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c742:	bf00      	nop

0000c744 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c744:	4b01      	ldr	r3, [pc, #4]	; (c74c <am_util_stdio_printf_init+0x8>)
    c746:	6018      	str	r0, [r3, #0]
    c748:	4770      	bx	lr
    c74a:	bf00      	nop
    c74c:	10001134 	.word	0x10001134

0000c750 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c754:	4680      	mov	r8, r0
    c756:	b0b1      	sub	sp, #196	; 0xc4
    c758:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c75a:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c75e:	780b      	ldrb	r3, [r1, #0]
    c760:	b183      	cbz	r3, c784 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c762:	2b25      	cmp	r3, #37	; 0x25
    c764:	d017      	beq.n	c796 <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c766:	f1b8 0f00 	cmp.w	r8, #0
    c76a:	d005      	beq.n	c778 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c76c:	2b0a      	cmp	r3, #10
    c76e:	d038      	beq.n	c7e2 <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c770:	f888 3000 	strb.w	r3, [r8]
    c774:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
    c778:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    c77a:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    c77c:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    c780:	2b00      	cmp	r3, #0
    c782:	d1ee      	bne.n	c762 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c784:	f1b8 0f00 	cmp.w	r8, #0
    c788:	d001      	beq.n	c78e <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    c78a:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
    c78e:	4648      	mov	r0, r9
    c790:	b031      	add	sp, #196	; 0xc4
    c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c796:	784a      	ldrb	r2, [r1, #1]
    c798:	2a30      	cmp	r2, #48	; 0x30
    c79a:	d03b      	beq.n	c814 <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
    c79c:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    c79e:	2520      	movs	r5, #32
    if ( *pcStr == '-')
    c7a0:	2a2d      	cmp	r2, #45	; 0x2d
    c7a2:	d02c      	beq.n	c7fe <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7a4:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c7a8:	2809      	cmp	r0, #9
    c7aa:	d837      	bhi.n	c81c <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
    c7ac:	2100      	movs	r1, #0
    bool bNeg = false;
    c7ae:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7b0:	4630      	mov	r0, r6
        bNeg = true;
    c7b2:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
    c7b6:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
    c7ba:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7be:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    c7c2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c7c6:	2c09      	cmp	r4, #9
        ++uCnt;
    c7c8:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    c7cc:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7d0:	d9f1      	bls.n	c7b6 <am_util_stdio_vsprintf+0x66>
    c7d2:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
    c7d4:	f1be 0f00 	cmp.w	lr, #0
    c7d8:	f041 80a1 	bne.w	d91e <am_util_stdio_vsprintf+0x11ce>
    c7dc:	4664      	mov	r4, ip
    c7de:	7832      	ldrb	r2, [r6, #0]
    c7e0:	e01e      	b.n	c820 <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c7e2:	4ebd      	ldr	r6, [pc, #756]	; (cad8 <am_util_stdio_vsprintf+0x388>)
    c7e4:	7837      	ldrb	r7, [r6, #0]
    c7e6:	2f00      	cmp	r7, #0
    c7e8:	d0c2      	beq.n	c770 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    c7ea:	f04f 0c0d 	mov.w	ip, #13
    c7ee:	f888 c000 	strb.w	ip, [r8]
    c7f2:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    c7f4:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    c7f8:	f108 0801 	add.w	r8, r8, #1
    c7fc:	e7b8      	b.n	c770 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7fe:	7872      	ldrb	r2, [r6, #1]
    c800:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c804:	2c09      	cmp	r4, #9
        pcStr++;
    c806:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c80a:	f200 8611 	bhi.w	d430 <am_util_stdio_vsprintf+0xce0>
        uCnt++;
    c80e:	2101      	movs	r1, #1
        bNeg = true;
    c810:	468e      	mov	lr, r1
    c812:	e7ce      	b.n	c7b2 <am_util_stdio_vsprintf+0x62>
    c814:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    c816:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
    c818:	2530      	movs	r5, #48	; 0x30
    c81a:	e7c1      	b.n	c7a0 <am_util_stdio_vsprintf+0x50>
    c81c:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c81e:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c820:	2a73      	cmp	r2, #115	; 0x73
    c822:	f000 8304 	beq.w	ce2e <am_util_stdio_vsprintf+0x6de>
    c826:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
    c82a:	2a2e      	cmp	r2, #46	; 0x2e
    c82c:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
    c830:	f000 82ae 	beq.w	cd90 <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
    c834:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
    c838:	2a6c      	cmp	r2, #108	; 0x6c
    c83a:	f000 82a3 	beq.w	cd84 <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
    c83e:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    c842:	2832      	cmp	r0, #50	; 0x32
    c844:	f200 8294 	bhi.w	cd70 <am_util_stdio_vsprintf+0x620>
    c848:	e8df f010 	tbh	[pc, r0, lsl #1]
    c84c:	02920115 	.word	0x02920115
    c850:	02920292 	.word	0x02920292
    c854:	02920292 	.word	0x02920292
    c858:	02920292 	.word	0x02920292
    c85c:	02920292 	.word	0x02920292
    c860:	02920292 	.word	0x02920292
    c864:	02920292 	.word	0x02920292
    c868:	02920292 	.word	0x02920292
    c86c:	02920292 	.word	0x02920292
    c870:	02920033 	.word	0x02920033
    c874:	02920292 	.word	0x02920292
    c878:	02920292 	.word	0x02920292
    c87c:	02920292 	.word	0x02920292
    c880:	02920292 	.word	0x02920292
    c884:	01360292 	.word	0x01360292
    c888:	0292014a 	.word	0x0292014a
    c88c:	02920115 	.word	0x02920115
    c890:	014a0292 	.word	0x014a0292
    c894:	02920292 	.word	0x02920292
    c898:	02920292 	.word	0x02920292
    c89c:	02920292 	.word	0x02920292
    c8a0:	02920292 	.word	0x02920292
    c8a4:	02f00292 	.word	0x02f00292
    c8a8:	01f20292 	.word	0x01f20292
    c8ac:	02920292 	.word	0x02920292
    c8b0:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
    c8b2:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8b6:	f8db 2000 	ldr.w	r2, [fp]
    c8ba:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
    c8bc:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    c8c0:	2c00      	cmp	r4, #0
    c8c2:	d06d      	beq.n	c9a0 <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
    c8c4:	ea52 0103 	orrs.w	r1, r2, r3
    c8c8:	bf0c      	ite	eq
    c8ca:	f04f 0e01 	moveq.w	lr, #1
    c8ce:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    c8d2:	ea52 0103 	orrs.w	r1, r2, r3
    c8d6:	d00b      	beq.n	c8f0 <am_util_stdio_vsprintf+0x1a0>
    c8d8:	4610      	mov	r0, r2
    c8da:	4619      	mov	r1, r3
        ui64Val >>= 4;
    c8dc:	090c      	lsrs	r4, r1, #4
    c8de:	0900      	lsrs	r0, r0, #4
    c8e0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c8e4:	4621      	mov	r1, r4
    while ( ui64Val )
    c8e6:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
    c8ea:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c8ee:	d1f5      	bne.n	c8dc <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
    c8f0:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    c8f4:	2f00      	cmp	r7, #0
    c8f6:	f340 855f 	ble.w	d3b8 <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
    c8fa:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
    c8fe:	f1b8 0f00 	cmp.w	r8, #0
    c902:	f000 855a 	beq.w	d3ba <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
    c906:	4641      	mov	r1, r8
    c908:	f00a 0707 	and.w	r7, sl, #7
    c90c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c910:	f10a 30ff 	add.w	r0, sl, #4294967295
    c914:	eba1 0408 	sub.w	r4, r1, r8
    c918:	f1ba 0f00 	cmp.w	sl, #0
    c91c:	d03d      	beq.n	c99a <am_util_stdio_vsprintf+0x24a>
    c91e:	b32f      	cbz	r7, c96c <am_util_stdio_vsprintf+0x21c>
    c920:	2f01      	cmp	r7, #1
    c922:	d01c      	beq.n	c95e <am_util_stdio_vsprintf+0x20e>
    c924:	2f02      	cmp	r7, #2
    c926:	d017      	beq.n	c958 <am_util_stdio_vsprintf+0x208>
    c928:	2f03      	cmp	r7, #3
    c92a:	d012      	beq.n	c952 <am_util_stdio_vsprintf+0x202>
    c92c:	2f04      	cmp	r7, #4
    c92e:	d00d      	beq.n	c94c <am_util_stdio_vsprintf+0x1fc>
    c930:	2f05      	cmp	r7, #5
    c932:	d008      	beq.n	c946 <am_util_stdio_vsprintf+0x1f6>
    c934:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
    c936:	bf1c      	itt	ne
    c938:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
    c93c:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
    c940:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c944:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c946:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c94a:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c94c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c950:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c952:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c956:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c958:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c95c:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c95e:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c962:	3801      	subs	r0, #1
    c964:	1c47      	adds	r7, r0, #1
    c966:	eba1 0408 	sub.w	r4, r1, r8
    c96a:	d016      	beq.n	c99a <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
    c96c:	468a      	mov	sl, r1
    while ( i32NumChars-- )
    c96e:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
    c970:	f80a 5b01 	strb.w	r5, [sl], #1
    c974:	3108      	adds	r1, #8
    c976:	f88a 5000 	strb.w	r5, [sl]
    c97a:	f801 5c06 	strb.w	r5, [r1, #-6]
    c97e:	f801 5c05 	strb.w	r5, [r1, #-5]
    c982:	f801 5c04 	strb.w	r5, [r1, #-4]
    c986:	f801 5c03 	strb.w	r5, [r1, #-3]
    c98a:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
    c98e:	1c47      	adds	r7, r0, #1
    c990:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
    c994:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
    c998:	d1e8      	bne.n	c96c <am_util_stdio_vsprintf+0x21c>
    c99a:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
    c99c:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
    c99e:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    c9a0:	ea52 0103 	orrs.w	r1, r2, r3
    c9a4:	f040 821a 	bne.w	cddc <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
    c9a8:	f04f 0530 	mov.w	r5, #48	; 0x30
    c9ac:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
    c9b0:	2701      	movs	r7, #1
    c9b2:	f1b8 0f00 	cmp.w	r8, #0
    c9b6:	f000 8235 	beq.w	ce24 <am_util_stdio_vsprintf+0x6d4>
    c9ba:	4639      	mov	r1, r7
        while (ix--)
    c9bc:	2000      	movs	r0, #0
    c9be:	ac2b      	add	r4, sp, #172	; 0xac
    c9c0:	1863      	adds	r3, r4, r1
    c9c2:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
    c9c6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    c9ca:	f888 c000 	strb.w	ip, [r8]
    c9ce:	1e4d      	subs	r5, r1, #1
        while (ix--)
    c9d0:	45a2      	cmp	sl, r4
    c9d2:	f005 0107 	and.w	r1, r5, #7
    c9d6:	4643      	mov	r3, r8
    c9d8:	d047      	beq.n	ca6a <am_util_stdio_vsprintf+0x31a>
    c9da:	b359      	cbz	r1, ca34 <am_util_stdio_vsprintf+0x2e4>
    c9dc:	2901      	cmp	r1, #1
    c9de:	d023      	beq.n	ca28 <am_util_stdio_vsprintf+0x2d8>
    c9e0:	2902      	cmp	r1, #2
    c9e2:	d01d      	beq.n	ca20 <am_util_stdio_vsprintf+0x2d0>
    c9e4:	2903      	cmp	r1, #3
    c9e6:	d017      	beq.n	ca18 <am_util_stdio_vsprintf+0x2c8>
    c9e8:	2904      	cmp	r1, #4
    c9ea:	d011      	beq.n	ca10 <am_util_stdio_vsprintf+0x2c0>
    c9ec:	2905      	cmp	r1, #5
    c9ee:	d00b      	beq.n	ca08 <am_util_stdio_vsprintf+0x2b8>
    c9f0:	2906      	cmp	r1, #6
    c9f2:	d005      	beq.n	ca00 <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
    c9f4:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    c9f8:	f888 2001 	strb.w	r2, [r8, #1]
    c9fc:	f108 0301 	add.w	r3, r8, #1
    ca00:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    ca04:	f803 5f01 	strb.w	r5, [r3, #1]!
    ca08:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    ca0c:	f803 cf01 	strb.w	ip, [r3, #1]!
    ca10:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    ca14:	f803 1f01 	strb.w	r1, [r3, #1]!
    ca18:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    ca1c:	f803 2f01 	strb.w	r2, [r3, #1]!
    ca20:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    ca24:	f803 5f01 	strb.w	r5, [r3, #1]!
    ca28:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    ca2c:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
    ca30:	45a2      	cmp	sl, r4
    ca32:	d01a      	beq.n	ca6a <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
    ca34:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    ca38:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
    ca3c:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    ca40:	705a      	strb	r2, [r3, #1]
    ca42:	70dd      	strb	r5, [r3, #3]
    ca44:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
    ca48:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
    ca4c:	7099      	strb	r1, [r3, #2]
    ca4e:	711a      	strb	r2, [r3, #4]
    ca50:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    ca54:	715d      	strb	r5, [r3, #5]
    ca56:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
    ca5a:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
    ca5e:	7199      	strb	r1, [r3, #6]
        while (ix--)
    ca60:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
    ca62:	71da      	strb	r2, [r3, #7]
    ca64:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
    ca68:	d1e4      	bne.n	ca34 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
    ca6a:	4440      	add	r0, r8
    ca6c:	2400      	movs	r4, #0
                    pcBuf += iVal;
    ca6e:	44b8      	add	r8, r7
        *pcBuf = 0;
    ca70:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
    ca72:	44b9      	add	r9, r7
                break;
    ca74:	e01e      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
    ca76:	f1b8 0f00 	cmp.w	r8, #0
    ca7a:	d01b      	beq.n	cab4 <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
    ca7c:	f10b 0307 	add.w	r3, fp, #7
    ca80:	f023 0b07 	bic.w	fp, r3, #7
    ca84:	e9db 0100 	ldrd	r0, r1, [fp]
    ca88:	f7ff fb3a 	bl	c100 <__aeabi_d2f>
    ca8c:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    ca90:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    ca94:	2014      	movs	r0, #20
    if (fValue == 0.0f)
    ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
    ca9a:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
    ca9e:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
    caa2:	f040 848d 	bne.w	d3c0 <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    caa6:	490d      	ldr	r1, [pc, #52]	; (cadc <am_util_stdio_vsprintf+0x38c>)
    caa8:	f8c8 1000 	str.w	r1, [r8]
    caac:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
    cab0:	44d1      	add	r9, sl
                    pcBuf += iVal;
    cab2:	44d0      	add	r8, sl
        ++pcFmt;
    cab4:	1c71      	adds	r1, r6, #1
    cab6:	e652      	b.n	c75e <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cab8:	f10b 0404 	add.w	r4, fp, #4
    cabc:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
    cac0:	f1b8 0f00 	cmp.w	r8, #0
    cac4:	d003      	beq.n	cace <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
    cac6:	f888 1000 	strb.w	r1, [r8]
    caca:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    cace:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cad2:	46a3      	mov	fp, r4
                break;
    cad4:	e7ee      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
    cad6:	bf00      	nop
    cad8:	10001028 	.word	0x10001028
    cadc:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cae0:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
    cae4:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cae8:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    caea:	2800      	cmp	r0, #0
    caec:	f171 0300 	sbcs.w	r3, r1, #0
    caf0:	f2c0 83ac 	blt.w	d24c <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
    caf4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    caf8:	2c00      	cmp	r4, #0
    cafa:	f000 83ba 	beq.w	d272 <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
    cafe:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cb02:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
    cb04:	bf0c      	ite	eq
    cb06:	2401      	moveq	r4, #1
    cb08:	2400      	movne	r4, #0
    while ( ui64Val )
    cb0a:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cb0c:	460b      	mov	r3, r1
                    bNeg = false;
    cb0e:	bf18      	it	ne
    cb10:	2000      	movne	r0, #0
    while ( ui64Val )
    cb12:	f000 86ba 	beq.w	d88a <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
    cb16:	901b      	str	r0, [sp, #108]	; 0x6c
    cb18:	9620      	str	r6, [sp, #128]	; 0x80
    cb1a:	9521      	str	r5, [sp, #132]	; 0x84
    cb1c:	9722      	str	r7, [sp, #136]	; 0x88
    cb1e:	941a      	str	r4, [sp, #104]	; 0x68
    cb20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    cb24:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    cb28:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    cb2c:	e009      	b.n	cb42 <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb2e:	464a      	mov	r2, r9
    cb30:	2300      	movs	r3, #0
        ++iNDigits;
    cb32:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cb34:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cb38:	f105 0501 	add.w	r5, r5, #1
    cb3c:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cb3e:	f000 83a5 	beq.w	d28c <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb42:	0896      	lsrs	r6, r2, #2
    cb44:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
    cb48:	089f      	lsrs	r7, r3, #2
    cb4a:	970b      	str	r7, [sp, #44]	; 0x2c
    cb4c:	950a      	str	r5, [sp, #40]	; 0x28
    cb4e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    cb52:	0859      	lsrs	r1, r3, #1
    cb54:	ea4f 0032 	mov.w	r0, r2, rrx
    cb58:	1820      	adds	r0, r4, r0
    cb5a:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    cb5e:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb60:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    cb62:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
    cb66:	0908      	lsrs	r0, r1, #4
    cb68:	9005      	str	r0, [sp, #20]
    cb6a:	9504      	str	r5, [sp, #16]
    cb6c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    cb70:	19a0      	adds	r0, r4, r6
    cb72:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    cb76:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
    cb78:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    cb7a:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
    cb7e:	0a08      	lsrs	r0, r1, #8
    cb80:	9007      	str	r0, [sp, #28]
    cb82:	9506      	str	r5, [sp, #24]
    cb84:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    cb88:	19a0      	adds	r0, r4, r6
    cb8a:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    cb8e:	0c06      	lsrs	r6, r0, #16
    cb90:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    cb94:	eb10 070a 	adds.w	r7, r0, sl
    cb98:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    cb9c:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    cba0:	2400      	movs	r4, #0
    cba2:	900e      	str	r0, [sp, #56]	; 0x38
    cba4:	940f      	str	r4, [sp, #60]	; 0x3c
    cba6:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cbaa:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    cbac:	eb18 0807 	adds.w	r8, r8, r7
    cbb0:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cbb4:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    cbb8:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    cbba:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    cbbe:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    cbc0:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    cbc4:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    cbc6:	9312      	str	r3, [sp, #72]	; 0x48
    cbc8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
    cbcc:	08ff      	lsrs	r7, r7, #3
    cbce:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    cbd2:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
    cbd6:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    cbda:	00bd      	lsls	r5, r7, #2
    cbdc:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    cbe0:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    cbe2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbe6:	f102 0e06 	add.w	lr, r2, #6
    cbea:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    cbee:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    cbf2:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbf6:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    cbfa:	d098      	beq.n	cb2e <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
    cbfc:	eb10 0e06 	adds.w	lr, r0, r6
    cc00:	4179      	adcs	r1, r7
    cc02:	eb1e 000e 	adds.w	r0, lr, lr
    cc06:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cc08:	3206      	adds	r2, #6
    cc0a:	f143 0300 	adc.w	r3, r3, #0
    cc0e:	1a15      	subs	r5, r2, r0
    cc10:	eb63 0401 	sbc.w	r4, r3, r1
    cc14:	0929      	lsrs	r1, r5, #4
    cc16:	0922      	lsrs	r2, r4, #4
    cc18:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cc1c:	9016      	str	r0, [sp, #88]	; 0x58
    cc1e:	9217      	str	r2, [sp, #92]	; 0x5c
    cc20:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    cc24:	1992      	adds	r2, r2, r6
    cc26:	417b      	adcs	r3, r7
    cc28:	e783      	b.n	cb32 <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
    cc2a:	f04f 0c01 	mov.w	ip, #1
    cc2e:	e642      	b.n	c8b6 <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc30:	f8db 1000 	ldr.w	r1, [fp]
    cc34:	2200      	movs	r2, #0
    cc36:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
    cc3a:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    cc3e:	2c00      	cmp	r4, #0
    cc40:	f000 8269 	beq.w	d116 <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
    cc44:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    cc48:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
    cc4c:	4602      	mov	r2, r0
    cc4e:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    cc50:	bf0c      	ite	eq
    cc52:	2401      	moveq	r4, #1
    cc54:	2400      	movne	r4, #0
    while ( ui64Val )
    cc56:	ea52 0103 	orrs.w	r1, r2, r3
    cc5a:	f000 81fe 	beq.w	d05a <am_util_stdio_vsprintf+0x90a>
    cc5e:	961b      	str	r6, [sp, #108]	; 0x6c
    cc60:	9520      	str	r5, [sp, #128]	; 0x80
    cc62:	9721      	str	r7, [sp, #132]	; 0x84
    cc64:	941a      	str	r4, [sp, #104]	; 0x68
    cc66:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    cc6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    cc6e:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    cc72:	e009      	b.n	cc88 <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc74:	464a      	mov	r2, r9
    cc76:	2300      	movs	r3, #0
        ++iNDigits;
    cc78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cc7a:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cc7e:	f105 0501 	add.w	r5, r5, #1
    cc82:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cc84:	f000 81db 	beq.w	d03e <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc88:	0895      	lsrs	r5, r2, #2
    cc8a:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
    cc8e:	089c      	lsrs	r4, r3, #2
    cc90:	9708      	str	r7, [sp, #32]
    cc92:	9409      	str	r4, [sp, #36]	; 0x24
    cc94:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    cc98:	0859      	lsrs	r1, r3, #1
    cc9a:	ea4f 0032 	mov.w	r0, r2, rrx
    cc9e:	1820      	adds	r0, r4, r0
    cca0:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    cca4:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cca6:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    cca8:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
    ccac:	0908      	lsrs	r0, r1, #4
    ccae:	9001      	str	r0, [sp, #4]
    ccb0:	9400      	str	r4, [sp, #0]
    ccb2:	e9dd 4500 	ldrd	r4, r5, [sp]
    ccb6:	19a0      	adds	r0, r4, r6
    ccb8:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    ccbc:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
    ccbe:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    ccc0:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    ccc4:	0a08      	lsrs	r0, r1, #8
    ccc6:	9003      	str	r0, [sp, #12]
    ccc8:	9402      	str	r4, [sp, #8]
    ccca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    ccce:	19a0      	adds	r0, r4, r6
    ccd0:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    ccd4:	0c06      	lsrs	r6, r0, #16
    ccd6:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    ccda:	eb10 070a 	adds.w	r7, r0, sl
    ccde:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    cce2:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    cce6:	2400      	movs	r4, #0
    cce8:	900c      	str	r0, [sp, #48]	; 0x30
    ccea:	940d      	str	r4, [sp, #52]	; 0x34
    ccec:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ccf0:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    ccf2:	eb18 0807 	adds.w	r8, r8, r7
    ccf6:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ccfa:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    ccfe:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    cd00:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    cd04:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    cd06:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    cd0a:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    cd0c:	9310      	str	r3, [sp, #64]	; 0x40
    cd0e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
    cd12:	08ff      	lsrs	r7, r7, #3
    cd14:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    cd18:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
    cd1c:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    cd20:	00bd      	lsls	r5, r7, #2
    cd22:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    cd26:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    cd28:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd2c:	f102 0e06 	add.w	lr, r2, #6
    cd30:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    cd34:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    cd38:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd3c:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    cd40:	d098      	beq.n	cc74 <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
    cd42:	eb10 0e06 	adds.w	lr, r0, r6
    cd46:	4179      	adcs	r1, r7
    cd48:	eb1e 000e 	adds.w	r0, lr, lr
    cd4c:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cd4e:	3206      	adds	r2, #6
    cd50:	f143 0300 	adc.w	r3, r3, #0
    cd54:	1a15      	subs	r5, r2, r0
    cd56:	eb63 0401 	sbc.w	r4, r3, r1
    cd5a:	0929      	lsrs	r1, r5, #4
    cd5c:	0922      	lsrs	r2, r4, #4
    cd5e:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cd62:	9014      	str	r0, [sp, #80]	; 0x50
    cd64:	9215      	str	r2, [sp, #84]	; 0x54
    cd66:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    cd6a:	1992      	adds	r2, r2, r6
    cd6c:	417b      	adcs	r3, r7
    cd6e:	e783      	b.n	cc78 <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
    cd70:	f1b8 0f00 	cmp.w	r8, #0
    cd74:	d003      	beq.n	cd7e <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
    cd76:	f888 2000 	strb.w	r2, [r8]
    cd7a:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    cd7e:	f109 0901 	add.w	r9, r9, #1
                break;
    cd82:	e697      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd84:	7872      	ldrb	r2, [r6, #1]
    cd86:	2a6c      	cmp	r2, #108	; 0x6c
    cd88:	f000 81db 	beq.w	d142 <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
    cd8c:	3601      	adds	r6, #1
    cd8e:	e556      	b.n	c83e <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
    cd90:	7873      	ldrb	r3, [r6, #1]
    cd92:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
    cd94:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
    cd98:	f000 81c8 	beq.w	d12c <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd9c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    cda0:	2e09      	cmp	r6, #9
    cda2:	f200 8349 	bhi.w	d438 <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
    cda6:	2200      	movs	r2, #0
    bool bNeg = false;
    cda8:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdaa:	4606      	mov	r6, r0
    bool bNeg = false;
    cdac:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
    cdb0:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
    cdb4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdb8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    cdbc:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    cdc0:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    cdc4:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
    cdc8:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cdcc:	d9f0      	bls.n	cdb0 <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
    cdce:	f1bc 0f00 	cmp.w	ip, #0
    cdd2:	f000 8334 	beq.w	d43e <am_util_stdio_vsprintf+0xcee>
    cdd6:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
    cdda:	e330      	b.n	d43e <am_util_stdio_vsprintf+0xcee>
    cddc:	f1bc 0f00 	cmp.w	ip, #0
    cde0:	bf14      	ite	ne
    cde2:	2727      	movne	r7, #39	; 0x27
    cde4:	2707      	moveq	r7, #7
    cde6:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
    cdea:	2000      	movs	r0, #0
    cdec:	e000      	b.n	cdf0 <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
    cdee:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
    cdf0:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cdf4:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
    cdf8:	2909      	cmp	r1, #9
    cdfa:	bf88      	it	hi
    cdfc:	4671      	movhi	r1, lr
        ui64Val >>= 4;
    cdfe:	0912      	lsrs	r2, r2, #4
    ce00:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    ce04:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    ce08:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
    ce0a:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    ce0c:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
    ce10:	f804 1f01 	strb.w	r1, [r4, #1]!
    ce14:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
    ce18:	d1e9      	bne.n	cdee <am_util_stdio_vsprintf+0x69e>
    ce1a:	460f      	mov	r7, r1
    if (pcBuf)
    ce1c:	f1b8 0f00 	cmp.w	r8, #0
    ce20:	f47f adcd 	bne.w	c9be <am_util_stdio_vsprintf+0x26e>
    ce24:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    ce28:	44b9      	add	r9, r7
    ce2a:	e643      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
    ce2c:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
    ce2e:	f8db 0000 	ldr.w	r0, [fp]
    ce32:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
    ce36:	2800      	cmp	r0, #0
    ce38:	f000 8085 	beq.w	cf46 <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
    ce3c:	7801      	ldrb	r1, [r0, #0]
    ce3e:	1c42      	adds	r2, r0, #1
    ce40:	4613      	mov	r3, r2
    ce42:	2900      	cmp	r1, #0
    ce44:	f000 84f3 	beq.w	d82e <am_util_stdio_vsprintf+0x10de>
    ce48:	eba3 0e00 	sub.w	lr, r3, r0
    ce4c:	f813 7b01 	ldrb.w	r7, [r3], #1
    ce50:	2f00      	cmp	r7, #0
    ce52:	d1f9      	bne.n	ce48 <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
    ce54:	2c00      	cmp	r4, #0
    ce56:	4677      	mov	r7, lr
    ce58:	dd01      	ble.n	ce5e <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
    ce5a:	4574      	cmp	r4, lr
    ce5c:	d877      	bhi.n	cf4e <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
    ce5e:	f1b8 0f00 	cmp.w	r8, #0
    ce62:	f000 80e1 	beq.w	d028 <am_util_stdio_vsprintf+0x8d8>
    ce66:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
    ce6a:	f808 1b01 	strb.w	r1, [r8], #1
    ce6e:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
    ce72:	f812 1b01 	ldrb.w	r1, [r2], #1
    ce76:	2900      	cmp	r1, #0
    ce78:	d1f7      	bne.n	ce6a <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
    ce7a:	2c00      	cmp	r4, #0
    ce7c:	f43f ae1a 	beq.w	cab4 <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
    ce80:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
    ce82:	42bb      	cmp	r3, r7
    ce84:	f67f ae16 	bls.w	cab4 <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
    ce88:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
    ce8a:	2a00      	cmp	r2, #0
    ce8c:	f340 84c3 	ble.w	d816 <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
    ce90:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
    ce92:	f1b8 0f00 	cmp.w	r8, #0
    ce96:	f000 84bf 	beq.w	d818 <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
    ce9a:	4643      	mov	r3, r8
    ce9c:	f007 0407 	and.w	r4, r7, #7
    cea0:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cea4:	f107 3cff 	add.w	ip, r7, #4294967295
    cea8:	eba3 0108 	sub.w	r1, r3, r8
    ceac:	2f00      	cmp	r7, #0
    ceae:	d045      	beq.n	cf3c <am_util_stdio_vsprintf+0x7ec>
    ceb0:	b364      	cbz	r4, cf0c <am_util_stdio_vsprintf+0x7bc>
    ceb2:	2c01      	cmp	r4, #1
    ceb4:	d021      	beq.n	cefa <am_util_stdio_vsprintf+0x7aa>
    ceb6:	2c02      	cmp	r4, #2
    ceb8:	d01b      	beq.n	cef2 <am_util_stdio_vsprintf+0x7a2>
    ceba:	2c03      	cmp	r4, #3
    cebc:	d015      	beq.n	ceea <am_util_stdio_vsprintf+0x79a>
    cebe:	2c04      	cmp	r4, #4
    cec0:	d00f      	beq.n	cee2 <am_util_stdio_vsprintf+0x792>
    cec2:	2c05      	cmp	r4, #5
    cec4:	d009      	beq.n	ceda <am_util_stdio_vsprintf+0x78a>
    cec6:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    cec8:	bf1c      	itt	ne
    ceca:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    cece:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ced2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ced6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ceda:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cede:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cee2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cee6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ceea:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ceee:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cef2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cef6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cefa:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cefe:	f10c 3cff 	add.w	ip, ip, #4294967295
    cf02:	f11c 0701 	adds.w	r7, ip, #1
    cf06:	eba3 0108 	sub.w	r1, r3, r8
    cf0a:	d017      	beq.n	cf3c <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
    cf0c:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    cf0e:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
    cf12:	f800 5b01 	strb.w	r5, [r0], #1
    cf16:	3308      	adds	r3, #8
    cf18:	7005      	strb	r5, [r0, #0]
    cf1a:	f803 5c06 	strb.w	r5, [r3, #-6]
    cf1e:	f803 5c05 	strb.w	r5, [r3, #-5]
    cf22:	f803 5c04 	strb.w	r5, [r3, #-4]
    cf26:	f803 5c03 	strb.w	r5, [r3, #-3]
    cf2a:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cf2e:	f11c 0001 	adds.w	r0, ip, #1
    cf32:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    cf36:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    cf3a:	d1e7      	bne.n	cf0c <am_util_stdio_vsprintf+0x7bc>
    cf3c:	460d      	mov	r5, r1
    cf3e:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cf40:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    cf42:	4491      	add	r9, r2
    cf44:	e5b6      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    cf46:	2c00      	cmp	r4, #0
    cf48:	f340 8443 	ble.w	d7d2 <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    cf4c:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    cf4e:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    cf50:	2a00      	cmp	r2, #0
    cf52:	f340 8464 	ble.w	d81e <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    cf56:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    cf5a:	f1b8 0f00 	cmp.w	r8, #0
    cf5e:	d05c      	beq.n	d01a <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    cf60:	4643      	mov	r3, r8
    cf62:	f00e 0407 	and.w	r4, lr, #7
    cf66:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf6a:	f10e 3aff 	add.w	sl, lr, #4294967295
    cf6e:	eba3 0c08 	sub.w	ip, r3, r8
    cf72:	f1be 0f00 	cmp.w	lr, #0
    cf76:	d045      	beq.n	d004 <am_util_stdio_vsprintf+0x8b4>
    cf78:	b364      	cbz	r4, cfd4 <am_util_stdio_vsprintf+0x884>
    cf7a:	2c01      	cmp	r4, #1
    cf7c:	d021      	beq.n	cfc2 <am_util_stdio_vsprintf+0x872>
    cf7e:	2c02      	cmp	r4, #2
    cf80:	d01b      	beq.n	cfba <am_util_stdio_vsprintf+0x86a>
    cf82:	2c03      	cmp	r4, #3
    cf84:	d015      	beq.n	cfb2 <am_util_stdio_vsprintf+0x862>
    cf86:	2c04      	cmp	r4, #4
    cf88:	d00f      	beq.n	cfaa <am_util_stdio_vsprintf+0x85a>
    cf8a:	2c05      	cmp	r4, #5
    cf8c:	d009      	beq.n	cfa2 <am_util_stdio_vsprintf+0x852>
    cf8e:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    cf90:	bf1c      	itt	ne
    cf92:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf96:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf9a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf9e:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cfa2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cfa6:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cfaa:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cfae:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cfb2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cfb6:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cfba:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cfbe:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cfc2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cfc6:	f10a 3aff 	add.w	sl, sl, #4294967295
    cfca:	f11a 0401 	adds.w	r4, sl, #1
    cfce:	eba3 0c08 	sub.w	ip, r3, r8
    cfd2:	d017      	beq.n	d004 <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    cfd4:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cfd6:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    cfda:	f801 5b01 	strb.w	r5, [r1], #1
    cfde:	3308      	adds	r3, #8
    cfe0:	700d      	strb	r5, [r1, #0]
    cfe2:	f803 5c06 	strb.w	r5, [r3, #-6]
    cfe6:	f803 5c05 	strb.w	r5, [r3, #-5]
    cfea:	f803 5c04 	strb.w	r5, [r3, #-4]
    cfee:	f803 5c03 	strb.w	r5, [r3, #-3]
    cff2:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cff6:	f11a 0401 	adds.w	r4, sl, #1
    cffa:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    cffe:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    d002:	d1e7      	bne.n	cfd4 <am_util_stdio_vsprintf+0x884>
    d004:	4664      	mov	r4, ip
    d006:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    d008:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d00a:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    d00c:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    d00e:	2900      	cmp	r1, #0
    d010:	f43f ad50 	beq.w	cab4 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    d014:	2400      	movs	r4, #0
    d016:	1c42      	adds	r2, r0, #1
    d018:	e721      	b.n	ce5e <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    d01a:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    d01c:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    d01e:	2b00      	cmp	r3, #0
    d020:	f43f ad48 	beq.w	cab4 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    d024:	2400      	movs	r4, #0
    d026:	1c42      	adds	r2, r0, #1
    d028:	4690      	mov	r8, r2
    d02a:	eba9 0000 	sub.w	r0, r9, r0
    d02e:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    d032:	f818 1b01 	ldrb.w	r1, [r8], #1
    d036:	2900      	cmp	r1, #0
    d038:	d1f9      	bne.n	d02e <am_util_stdio_vsprintf+0x8de>
    d03a:	4688      	mov	r8, r1
    d03c:	e71d      	b.n	ce7a <am_util_stdio_vsprintf+0x72a>
    d03e:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    d042:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    d046:	9d20      	ldr	r5, [sp, #128]	; 0x80
    d048:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    d04a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    d04c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    d04e:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    d052:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    d056:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    d05a:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    d05c:	2c00      	cmp	r4, #0
    d05e:	f340 81e3 	ble.w	d428 <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    d062:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    d064:	f1b8 0f00 	cmp.w	r8, #0
    d068:	f000 81df 	beq.w	d42a <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    d06c:	4643      	mov	r3, r8
    d06e:	f007 0007 	and.w	r0, r7, #7
    d072:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d076:	f1a4 0a02 	sub.w	sl, r4, #2
    d07a:	eba3 0c08 	sub.w	ip, r3, r8
    d07e:	2f00      	cmp	r7, #0
    d080:	d046      	beq.n	d110 <am_util_stdio_vsprintf+0x9c0>
    d082:	b360      	cbz	r0, d0de <am_util_stdio_vsprintf+0x98e>
    d084:	2801      	cmp	r0, #1
    d086:	d021      	beq.n	d0cc <am_util_stdio_vsprintf+0x97c>
    d088:	2802      	cmp	r0, #2
    d08a:	d01b      	beq.n	d0c4 <am_util_stdio_vsprintf+0x974>
    d08c:	2803      	cmp	r0, #3
    d08e:	d015      	beq.n	d0bc <am_util_stdio_vsprintf+0x96c>
    d090:	2804      	cmp	r0, #4
    d092:	d00f      	beq.n	d0b4 <am_util_stdio_vsprintf+0x964>
    d094:	2805      	cmp	r0, #5
    d096:	d009      	beq.n	d0ac <am_util_stdio_vsprintf+0x95c>
    d098:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    d09a:	bf1c      	itt	ne
    d09c:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0a0:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0a4:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0a8:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0ac:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0b0:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0b4:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0b8:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0bc:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0c0:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0c4:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0c8:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d0cc:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d0d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    d0d4:	f11a 0001 	adds.w	r0, sl, #1
    d0d8:	eba3 0c08 	sub.w	ip, r3, r8
    d0dc:	d018      	beq.n	d110 <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    d0de:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    d0e0:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    d0e4:	f80e 5b01 	strb.w	r5, [lr], #1
    d0e8:	3308      	adds	r3, #8
    d0ea:	f88e 5000 	strb.w	r5, [lr]
    d0ee:	f803 5c06 	strb.w	r5, [r3, #-6]
    d0f2:	f803 5c05 	strb.w	r5, [r3, #-5]
    d0f6:	f803 5c04 	strb.w	r5, [r3, #-4]
    d0fa:	f803 5c03 	strb.w	r5, [r3, #-3]
    d0fe:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    d102:	f11a 0701 	adds.w	r7, sl, #1
    d106:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    d10a:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    d10e:	d1e6      	bne.n	d0de <am_util_stdio_vsprintf+0x98e>
    d110:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    d112:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    d114:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    d116:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d11a:	4642      	mov	r2, r8
    d11c:	f7ff fa1a 	bl	c554 <uint64_to_str>
                if ( pcBuf )
    d120:	f1b8 0f00 	cmp.w	r8, #0
    d124:	d000      	beq.n	d128 <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    d126:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    d128:	4481      	add	r9, r0
                break;
    d12a:	e4c3      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d12c:	78b3      	ldrb	r3, [r6, #2]
    d12e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d132:	2909      	cmp	r1, #9
        pcStr++;
    d134:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d138:	f200 8391 	bhi.w	d85e <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    d13c:	2201      	movs	r2, #1
        bNeg = true;
    d13e:	4694      	mov	ip, r2
    d140:	e634      	b.n	cdac <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    d142:	78b2      	ldrb	r2, [r6, #2]
    d144:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    d148:	3602      	adds	r6, #2
        switch ( *pcFmt )
    d14a:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    d14e:	f63f ae0f 	bhi.w	cd70 <am_util_stdio_vsprintf+0x620>
    d152:	a101      	add	r1, pc, #4	; (adr r1, d158 <am_util_stdio_vsprintf+0xa08>)
    d154:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    d158:	0000ca77 	.word	0x0000ca77
    d15c:	0000cd71 	.word	0x0000cd71
    d160:	0000cd71 	.word	0x0000cd71
    d164:	0000cd71 	.word	0x0000cd71
    d168:	0000cd71 	.word	0x0000cd71
    d16c:	0000cd71 	.word	0x0000cd71
    d170:	0000cd71 	.word	0x0000cd71
    d174:	0000cd71 	.word	0x0000cd71
    d178:	0000cd71 	.word	0x0000cd71
    d17c:	0000cd71 	.word	0x0000cd71
    d180:	0000cd71 	.word	0x0000cd71
    d184:	0000cd71 	.word	0x0000cd71
    d188:	0000cd71 	.word	0x0000cd71
    d18c:	0000cd71 	.word	0x0000cd71
    d190:	0000cd71 	.word	0x0000cd71
    d194:	0000cd71 	.word	0x0000cd71
    d198:	0000cd71 	.word	0x0000cd71
    d19c:	0000cd71 	.word	0x0000cd71
    d1a0:	0000d929 	.word	0x0000d929
    d1a4:	0000cd71 	.word	0x0000cd71
    d1a8:	0000cd71 	.word	0x0000cd71
    d1ac:	0000cd71 	.word	0x0000cd71
    d1b0:	0000cd71 	.word	0x0000cd71
    d1b4:	0000cd71 	.word	0x0000cd71
    d1b8:	0000cd71 	.word	0x0000cd71
    d1bc:	0000cd71 	.word	0x0000cd71
    d1c0:	0000cd71 	.word	0x0000cd71
    d1c4:	0000cd71 	.word	0x0000cd71
    d1c8:	0000cd71 	.word	0x0000cd71
    d1cc:	0000cab9 	.word	0x0000cab9
    d1d0:	0000d23b 	.word	0x0000d23b
    d1d4:	0000cd71 	.word	0x0000cd71
    d1d8:	0000ca77 	.word	0x0000ca77
    d1dc:	0000cd71 	.word	0x0000cd71
    d1e0:	0000cd71 	.word	0x0000cd71
    d1e4:	0000d23b 	.word	0x0000d23b
    d1e8:	0000cd71 	.word	0x0000cd71
    d1ec:	0000cd71 	.word	0x0000cd71
    d1f0:	0000cd71 	.word	0x0000cd71
    d1f4:	0000cd71 	.word	0x0000cd71
    d1f8:	0000cd71 	.word	0x0000cd71
    d1fc:	0000cd71 	.word	0x0000cd71
    d200:	0000cd71 	.word	0x0000cd71
    d204:	0000cd71 	.word	0x0000cd71
    d208:	0000cd71 	.word	0x0000cd71
    d20c:	0000ce2d 	.word	0x0000ce2d
    d210:	0000cd71 	.word	0x0000cd71
    d214:	0000d225 	.word	0x0000d225
    d218:	0000cd71 	.word	0x0000cd71
    d21c:	0000cd71 	.word	0x0000cd71
    d220:	0000d7bb 	.word	0x0000d7bb
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d224:	f10b 0207 	add.w	r2, fp, #7
    d228:	f022 0b07 	bic.w	fp, r2, #7
    d22c:	e9db 0100 	ldrd	r0, r1, [fp]
    d230:	f10b 0b08 	add.w	fp, fp, #8
    d234:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    d238:	e501      	b.n	cc3e <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d23a:	f10b 0307 	add.w	r3, fp, #7
    d23e:	f023 0b07 	bic.w	fp, r3, #7
    d242:	e9db 0100 	ldrd	r0, r1, [fp]
    d246:	f10b 0b08 	add.w	fp, fp, #8
    d24a:	e44e      	b.n	caea <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    d24c:	4240      	negs	r0, r0
    d24e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d252:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    d256:	2c00      	cmp	r4, #0
    d258:	f040 834e 	bne.w	d8f8 <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    d25c:	f1b8 0f00 	cmp.w	r8, #0
    d260:	f000 82d1 	beq.w	d806 <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    d264:	252d      	movs	r5, #45	; 0x2d
    d266:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    d26a:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    d26e:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d272:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d276:	4642      	mov	r2, r8
    d278:	f7ff f96c 	bl	c554 <uint64_to_str>
                if ( pcBuf )
    d27c:	f1b8 0f00 	cmp.w	r8, #0
    d280:	f47f af51 	bne.w	d126 <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    d284:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d288:	4481      	add	r9, r0
    d28a:	e413      	b.n	cab4 <am_util_stdio_vsprintf+0x364>
    d28c:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    d290:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d292:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    d294:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    d296:	9d21      	ldr	r5, [sp, #132]	; 0x84
    d298:	9e20      	ldr	r6, [sp, #128]	; 0x80
    d29a:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    d29e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    d2a2:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    d2a6:	1aff      	subs	r7, r7, r3
    d2a8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    d2ac:	b13c      	cbz	r4, d2be <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    d2ae:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    d2b0:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    d2b4:	f000 82c3 	beq.w	d83e <am_util_stdio_vsprintf+0x10ee>
    d2b8:	2001      	movs	r0, #1
                        --iWidth;
    d2ba:	460f      	mov	r7, r1
    d2bc:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    d2be:	2f00      	cmp	r7, #0
    d2c0:	f340 82d3 	ble.w	d86a <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    d2c4:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    d2c6:	f1b8 0f00 	cmp.w	r8, #0
    d2ca:	d067      	beq.n	d39c <am_util_stdio_vsprintf+0xc4c>
    d2cc:	f010 0107 	ands.w	r1, r0, #7
    d2d0:	f1a7 0a02 	sub.w	sl, r7, #2
    d2d4:	4643      	mov	r3, r8
    d2d6:	d03a      	beq.n	d34e <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    d2d8:	4643      	mov	r3, r8
    d2da:	2901      	cmp	r1, #1
    d2dc:	f1a7 0a03 	sub.w	sl, r7, #3
    d2e0:	f803 5b01 	strb.w	r5, [r3], #1
    d2e4:	d033      	beq.n	d34e <am_util_stdio_vsprintf+0xbfe>
    d2e6:	2902      	cmp	r1, #2
    d2e8:	d01b      	beq.n	d322 <am_util_stdio_vsprintf+0xbd2>
    d2ea:	2903      	cmp	r1, #3
    d2ec:	d015      	beq.n	d31a <am_util_stdio_vsprintf+0xbca>
    d2ee:	2904      	cmp	r1, #4
    d2f0:	d00f      	beq.n	d312 <am_util_stdio_vsprintf+0xbc2>
    d2f2:	2905      	cmp	r1, #5
    d2f4:	d009      	beq.n	d30a <am_util_stdio_vsprintf+0xbba>
    d2f6:	2906      	cmp	r1, #6
    d2f8:	bf1c      	itt	ne
    d2fa:	f803 5b01 	strbne.w	r5, [r3], #1
    d2fe:	f1a7 0a04 	subne.w	sl, r7, #4
    d302:	f803 5b01 	strb.w	r5, [r3], #1
    d306:	f10a 3aff 	add.w	sl, sl, #4294967295
    d30a:	f803 5b01 	strb.w	r5, [r3], #1
    d30e:	f10a 3aff 	add.w	sl, sl, #4294967295
    d312:	f803 5b01 	strb.w	r5, [r3], #1
    d316:	f10a 3aff 	add.w	sl, sl, #4294967295
    d31a:	f803 5b01 	strb.w	r5, [r3], #1
    d31e:	f10a 3aff 	add.w	sl, sl, #4294967295
    d322:	f803 5b01 	strb.w	r5, [r3], #1
    d326:	f10a 3aff 	add.w	sl, sl, #4294967295
    d32a:	e010      	b.n	d34e <am_util_stdio_vsprintf+0xbfe>
    d32c:	f88c 5000 	strb.w	r5, [ip]
    d330:	3308      	adds	r3, #8
    d332:	f803 5c06 	strb.w	r5, [r3, #-6]
    d336:	f803 5c05 	strb.w	r5, [r3, #-5]
    d33a:	f803 5c04 	strb.w	r5, [r3, #-4]
    d33e:	f803 5c03 	strb.w	r5, [r3, #-3]
    d342:	f803 5c02 	strb.w	r5, [r3, #-2]
    d346:	f1aa 0a08 	sub.w	sl, sl, #8
    d34a:	f803 5c01 	strb.w	r5, [r3, #-1]
    d34e:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    d350:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    d354:	f80c 5b01 	strb.w	r5, [ip], #1
    d358:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    d35c:	d1e6      	bne.n	d32c <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d35e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d360:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    d362:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d364:	2a00      	cmp	r2, #0
    d366:	d084      	beq.n	d272 <am_util_stdio_vsprintf+0xb22>
    d368:	2d20      	cmp	r5, #32
    d36a:	d182      	bne.n	d272 <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    d36c:	f1b8 0f00 	cmp.w	r8, #0
    d370:	f47f af78 	bne.w	d264 <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d374:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d378:	2200      	movs	r2, #0
    d37a:	f7ff f8eb 	bl	c554 <uint64_to_str>
                        ++ui32CharCnt;
    d37e:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d382:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d386:	4481      	add	r9, r0
    d388:	f7ff bb94 	b.w	cab4 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d38c:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    d38e:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    d392:	f340 82bc 	ble.w	d90e <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    d396:	2201      	movs	r2, #1
    d398:	1eb8      	subs	r0, r7, #2
    d39a:	921b      	str	r2, [sp, #108]	; 0x6c
    d39c:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d39e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    d3a0:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d3a2:	2f00      	cmp	r7, #0
    d3a4:	f000 821b 	beq.w	d7de <am_util_stdio_vsprintf+0x108e>
    d3a8:	2d20      	cmp	r5, #32
    d3aa:	d0e3      	beq.n	d374 <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3ac:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d3b0:	2200      	movs	r2, #0
    d3b2:	f7ff f8cf 	bl	c554 <uint64_to_str>
    d3b6:	e765      	b.n	d284 <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    d3b8:	2700      	movs	r7, #0
    d3ba:	2400      	movs	r4, #0
    d3bc:	f7ff baee 	b.w	c99c <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d3c0:	ee17 7a90 	vmov	r7, s15
    d3c4:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    d3c8:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d3cc:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    d3d0:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d3d2:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    d3d6:	f300 8246 	bgt.w	d866 <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    d3da:	f111 0f17 	cmn.w	r1, #23
    d3de:	f2c0 823c 	blt.w	d85a <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    d3e2:	2916      	cmp	r1, #22
    d3e4:	dd2f      	ble.n	d446 <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    d3e6:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    d3ea:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    d3ec:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d3f0:	f2c0 825c 	blt.w	d8ac <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    d3f4:	2800      	cmp	r0, #0
    d3f6:	f040 824c 	bne.w	d892 <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    d3fa:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    d3fc:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    d400:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    d404:	f888 4000 	strb.w	r4, [r8]
    d408:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    d40c:	1caa      	adds	r2, r5, #2
    d40e:	f04f 0430 	mov.w	r4, #48	; 0x30
    d412:	706c      	strb	r4, [r5, #1]
    d414:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    d418:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    d41a:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    d41c:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    d41e:	f2c0 81e7 	blt.w	d7f0 <am_util_stdio_vsprintf+0x10a0>
    d422:	4682      	mov	sl, r0
    d424:	f7ff bb44 	b.w	cab0 <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    d428:	2400      	movs	r4, #0
    d42a:	f04f 0c00 	mov.w	ip, #0
    d42e:	e670      	b.n	d112 <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d430:	4606      	mov	r6, r0
    d432:	2400      	movs	r4, #0
    d434:	f7ff b9f4 	b.w	c820 <am_util_stdio_vsprintf+0xd0>
    d438:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    d43c:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    d43e:	1886      	adds	r6, r0, r2
    d440:	5c82      	ldrb	r2, [r0, r2]
    d442:	f7ff b9f9 	b.w	c838 <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    d446:	2900      	cmp	r1, #0
    d448:	f2c0 8214 	blt.w	d874 <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d44c:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    d450:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d454:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    d458:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d45a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d45e:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    d462:	f2c0 823b 	blt.w	d8dc <am_util_stdio_vsprintf+0x118c>
    d466:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    d468:	462a      	mov	r2, r5
    d46a:	17c1      	asrs	r1, r0, #31
    d46c:	f7ff f872 	bl	c554 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d470:	7829      	ldrb	r1, [r5, #0]
    d472:	b119      	cbz	r1, d47c <am_util_stdio_vsprintf+0xd2c>
    d474:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    d478:	2800      	cmp	r0, #0
    d47a:	d1fb      	bne.n	d474 <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    d47c:	222e      	movs	r2, #46	; 0x2e
    d47e:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    d480:	2c00      	cmp	r4, #0
    d482:	d0c3      	beq.n	d40c <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    d484:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d486:	eba2 0008 	sub.w	r0, r2, r8
    d48a:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d48e:	45e2      	cmp	sl, ip
    d490:	bfa8      	it	ge
    d492:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    d494:	f1ba 0f00 	cmp.w	sl, #0
    d498:	f340 80b2 	ble.w	d600 <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    d49c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d4a0:	0067      	lsls	r7, r4, #1
    d4a2:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4a6:	1639      	asrs	r1, r7, #24
    d4a8:	3130      	adds	r1, #48	; 0x30
    d4aa:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    d4ae:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4b0:	7069      	strb	r1, [r5, #1]
    d4b2:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    d4b4:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    d4b8:	f00e 0507 	and.w	r5, lr, #7
    d4bc:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    d4be:	f000 809c 	beq.w	d5fa <am_util_stdio_vsprintf+0xeaa>
    d4c2:	2d00      	cmp	r5, #0
    d4c4:	d04d      	beq.n	d562 <am_util_stdio_vsprintf+0xe12>
    d4c6:	2d01      	cmp	r5, #1
    d4c8:	d03f      	beq.n	d54a <am_util_stdio_vsprintf+0xdfa>
    d4ca:	2d02      	cmp	r5, #2
    d4cc:	d034      	beq.n	d538 <am_util_stdio_vsprintf+0xde8>
    d4ce:	2d03      	cmp	r5, #3
    d4d0:	d029      	beq.n	d526 <am_util_stdio_vsprintf+0xdd6>
    d4d2:	2d04      	cmp	r5, #4
    d4d4:	d01e      	beq.n	d514 <am_util_stdio_vsprintf+0xdc4>
    d4d6:	2d05      	cmp	r5, #5
    d4d8:	d013      	beq.n	d502 <am_util_stdio_vsprintf+0xdb2>
    d4da:	2d06      	cmp	r5, #6
    d4dc:	d008      	beq.n	d4f0 <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    d4de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d4e2:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4e4:	1639      	asrs	r1, r7, #24
    d4e6:	3130      	adds	r1, #48	; 0x30
    d4e8:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4ec:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4f0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d4f4:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4f6:	162c      	asrs	r4, r5, #24
    d4f8:	3430      	adds	r4, #48	; 0x30
    d4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4fe:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d502:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    d506:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d508:	1601      	asrs	r1, r0, #24
    d50a:	3130      	adds	r1, #48	; 0x30
    d50c:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d510:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d514:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d518:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d51a:	1627      	asrs	r7, r4, #24
    d51c:	3730      	adds	r7, #48	; 0x30
    d51e:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d522:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d526:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d52a:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d52c:	1629      	asrs	r1, r5, #24
    d52e:	3130      	adds	r1, #48	; 0x30
    d530:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d534:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d538:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d53c:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d53e:	1638      	asrs	r0, r7, #24
    d540:	3030      	adds	r0, #48	; 0x30
    d542:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d546:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d54a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d54e:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d550:	1621      	asrs	r1, r4, #24
    d552:	3130      	adds	r1, #48	; 0x30
    d554:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    d558:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    d55a:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d55c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d560:	d04b      	beq.n	d5fa <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    d562:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d566:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d568:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d56c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    d570:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    d572:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d576:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    d57a:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d57e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d582:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    d586:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d58a:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d58e:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    d592:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d594:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d598:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    d59c:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d59e:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d5a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5a6:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    d5a8:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5aa:	3130      	adds	r1, #48	; 0x30
    d5ac:	1624      	asrs	r4, r4, #24
    d5ae:	3430      	adds	r4, #48	; 0x30
    d5b0:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    d5b2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5b6:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    d5b8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    d5bc:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5be:	1601      	asrs	r1, r0, #24
    d5c0:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    d5c4:	1620      	asrs	r0, r4, #24
    d5c6:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    d5ca:	163f      	asrs	r7, r7, #24
    d5cc:	162d      	asrs	r5, r5, #24
    d5ce:	3730      	adds	r7, #48	; 0x30
    d5d0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d5d4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    d5d8:	3530      	adds	r5, #48	; 0x30
    d5da:	3130      	adds	r1, #48	; 0x30
    d5dc:	3030      	adds	r0, #48	; 0x30
    d5de:	715f      	strb	r7, [r3, #5]
    d5e0:	f883 c003 	strb.w	ip, [r3, #3]
    d5e4:	f883 e004 	strb.w	lr, [r3, #4]
    d5e8:	719d      	strb	r5, [r3, #6]
    d5ea:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    d5ec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5ee:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    d5f2:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d5f4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d5f8:	d1b3      	bne.n	d562 <am_util_stdio_vsprintf+0xe12>
    d5fa:	4452      	add	r2, sl
    d5fc:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d600:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d604:	f343 55c7 	sbfx	r5, r3, #23, #8
    d608:	2d04      	cmp	r5, #4
    d60a:	f77f af05 	ble.w	d418 <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    d60e:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d610:	4598      	cmp	r8, r3
    d612:	f63f af01 	bhi.w	d418 <am_util_stdio_vsprintf+0xcc8>
    d616:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    d61a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    d61e:	1afc      	subs	r4, r7, r3
    d620:	43e5      	mvns	r5, r4
    d622:	292e      	cmp	r1, #46	; 0x2e
    d624:	f005 0407 	and.w	r4, r5, #7
    d628:	d005      	beq.n	d636 <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    d62a:	2939      	cmp	r1, #57	; 0x39
    d62c:	f040 8161 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d630:	f04f 0130 	mov.w	r1, #48	; 0x30
    d634:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d636:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d638:	42bb      	cmp	r3, r7
    d63a:	f43f aeed 	beq.w	d418 <am_util_stdio_vsprintf+0xcc8>
    d63e:	2c00      	cmp	r4, #0
    d640:	d054      	beq.n	d6ec <am_util_stdio_vsprintf+0xf9c>
    d642:	2c01      	cmp	r4, #1
    d644:	d045      	beq.n	d6d2 <am_util_stdio_vsprintf+0xf82>
    d646:	2c02      	cmp	r4, #2
    d648:	d039      	beq.n	d6be <am_util_stdio_vsprintf+0xf6e>
    d64a:	2c03      	cmp	r4, #3
    d64c:	d02d      	beq.n	d6aa <am_util_stdio_vsprintf+0xf5a>
    d64e:	2c04      	cmp	r4, #4
    d650:	d021      	beq.n	d696 <am_util_stdio_vsprintf+0xf46>
    d652:	2c05      	cmp	r4, #5
    d654:	d015      	beq.n	d682 <am_util_stdio_vsprintf+0xf32>
    d656:	2c06      	cmp	r4, #6
    d658:	d009      	beq.n	d66e <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    d65a:	7819      	ldrb	r1, [r3, #0]
    d65c:	292e      	cmp	r1, #46	; 0x2e
    d65e:	d005      	beq.n	d66c <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    d660:	2939      	cmp	r1, #57	; 0x39
    d662:	f040 8146 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d666:	f04f 0530 	mov.w	r5, #48	; 0x30
    d66a:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d66c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d66e:	7819      	ldrb	r1, [r3, #0]
    d670:	292e      	cmp	r1, #46	; 0x2e
    d672:	d005      	beq.n	d680 <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    d674:	2939      	cmp	r1, #57	; 0x39
    d676:	f040 813c 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d67a:	f04f 0430 	mov.w	r4, #48	; 0x30
    d67e:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d680:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d682:	7819      	ldrb	r1, [r3, #0]
    d684:	292e      	cmp	r1, #46	; 0x2e
    d686:	d005      	beq.n	d694 <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    d688:	2939      	cmp	r1, #57	; 0x39
    d68a:	f040 8132 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d68e:	f04f 0130 	mov.w	r1, #48	; 0x30
    d692:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d694:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d696:	7819      	ldrb	r1, [r3, #0]
    d698:	292e      	cmp	r1, #46	; 0x2e
    d69a:	d005      	beq.n	d6a8 <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    d69c:	2939      	cmp	r1, #57	; 0x39
    d69e:	f040 8128 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6a2:	f04f 0530 	mov.w	r5, #48	; 0x30
    d6a6:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d6a8:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d6aa:	7819      	ldrb	r1, [r3, #0]
    d6ac:	292e      	cmp	r1, #46	; 0x2e
    d6ae:	d005      	beq.n	d6bc <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    d6b0:	2939      	cmp	r1, #57	; 0x39
    d6b2:	f040 811e 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6b6:	f04f 0430 	mov.w	r4, #48	; 0x30
    d6ba:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d6bc:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d6be:	7819      	ldrb	r1, [r3, #0]
    d6c0:	292e      	cmp	r1, #46	; 0x2e
    d6c2:	d005      	beq.n	d6d0 <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    d6c4:	2939      	cmp	r1, #57	; 0x39
    d6c6:	f040 8114 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6ca:	f04f 0130 	mov.w	r1, #48	; 0x30
    d6ce:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d6d0:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d6d2:	7819      	ldrb	r1, [r3, #0]
    d6d4:	292e      	cmp	r1, #46	; 0x2e
    d6d6:	d005      	beq.n	d6e4 <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    d6d8:	2939      	cmp	r1, #57	; 0x39
    d6da:	f040 810a 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6de:	f04f 0530 	mov.w	r5, #48	; 0x30
    d6e2:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d6e4:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d6e6:	42bb      	cmp	r3, r7
    d6e8:	f43f ae96 	beq.w	d418 <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    d6ec:	7819      	ldrb	r1, [r3, #0]
    d6ee:	292e      	cmp	r1, #46	; 0x2e
    d6f0:	d005      	beq.n	d6fe <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    d6f2:	2939      	cmp	r1, #57	; 0x39
    d6f4:	f040 80fd 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6f8:	f04f 0430 	mov.w	r4, #48	; 0x30
    d6fc:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d6fe:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d700:	7819      	ldrb	r1, [r3, #0]
    d702:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d704:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    d706:	d005      	beq.n	d714 <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    d708:	2939      	cmp	r1, #57	; 0x39
    d70a:	f040 80f2 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d70e:	f04f 0130 	mov.w	r1, #48	; 0x30
    d712:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    d714:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    d718:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d71a:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    d71e:	d006      	beq.n	d72e <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    d720:	2939      	cmp	r1, #57	; 0x39
    d722:	f040 80e6 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d726:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d72a:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    d72e:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    d732:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d734:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    d738:	d006      	beq.n	d748 <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    d73a:	2939      	cmp	r1, #57	; 0x39
    d73c:	f040 80d9 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d740:	f04f 0330 	mov.w	r3, #48	; 0x30
    d744:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    d748:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    d74c:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d74e:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    d752:	d006      	beq.n	d762 <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    d754:	2939      	cmp	r1, #57	; 0x39
    d756:	f040 80cc 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d75a:	f04f 0530 	mov.w	r5, #48	; 0x30
    d75e:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    d762:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    d766:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d768:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    d76c:	d006      	beq.n	d77c <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    d76e:	2939      	cmp	r1, #57	; 0x39
    d770:	f040 80bf 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d774:	f04f 0430 	mov.w	r4, #48	; 0x30
    d778:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    d77c:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    d780:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d782:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    d786:	d006      	beq.n	d796 <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    d788:	2939      	cmp	r1, #57	; 0x39
    d78a:	f040 80b2 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d78e:	f04f 0130 	mov.w	r1, #48	; 0x30
    d792:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    d796:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    d79a:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d79c:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    d7a0:	d006      	beq.n	d7b0 <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    d7a2:	2939      	cmp	r1, #57	; 0x39
    d7a4:	f040 80a5 	bne.w	d8f2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d7a8:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d7ac:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    d7b0:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    d7b4:	42bb      	cmp	r3, r7
    d7b6:	d199      	bne.n	d6ec <am_util_stdio_vsprintf+0xf9c>
    d7b8:	e62e      	b.n	d418 <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    d7ba:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d7be:	f10b 0307 	add.w	r3, fp, #7
    d7c2:	f023 0a07 	bic.w	sl, r3, #7
    d7c6:	f10a 0b08 	add.w	fp, sl, #8
    d7ca:	e9da 2300 	ldrd	r2, r3, [sl]
    d7ce:	f7ff b877 	b.w	c8c0 <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    d7d2:	7801      	ldrb	r1, [r0, #0]
    d7d4:	b369      	cbz	r1, d832 <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    d7d6:	4607      	mov	r7, r0
    d7d8:	2201      	movs	r2, #1
    d7da:	f7ff bb40 	b.w	ce5e <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d7de:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d7e2:	463a      	mov	r2, r7
    d7e4:	f7fe feb6 	bl	c554 <uint64_to_str>
    d7e8:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    d7ea:	4481      	add	r9, r0
    d7ec:	f7ff b962 	b.w	cab4 <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d7f0:	1c43      	adds	r3, r0, #1
    d7f2:	d032      	beq.n	d85a <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d7f4:	3002      	adds	r0, #2
    d7f6:	d036      	beq.n	d866 <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d7f8:	4a4d      	ldr	r2, [pc, #308]	; (d930 <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d7fa:	f8c8 2000 	str.w	r2, [r8]
    d7fe:	f04f 0a03 	mov.w	sl, #3
    d802:	f7ff b955 	b.w	cab0 <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d806:	4642      	mov	r2, r8
    d808:	f7fe fea4 	bl	c554 <uint64_to_str>
                        ++ui32CharCnt;
    d80c:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    d810:	4481      	add	r9, r0
    d812:	f7ff b94f 	b.w	cab4 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d816:	2200      	movs	r2, #0
    d818:	2500      	movs	r5, #0
    d81a:	f7ff bb91 	b.w	cf40 <am_util_stdio_vsprintf+0x7f0>
    d81e:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    d820:	f1b8 0f00 	cmp.w	r8, #0
    d824:	f43f abf9 	beq.w	d01a <am_util_stdio_vsprintf+0x8ca>
    d828:	4614      	mov	r4, r2
    d82a:	f7ff bbed 	b.w	d008 <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    d82e:	2c00      	cmp	r4, #0
    d830:	dc02      	bgt.n	d838 <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    d832:	460f      	mov	r7, r1
    d834:	f7ff bb21 	b.w	ce7a <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    d838:	460f      	mov	r7, r1
    d83a:	f7ff bb88 	b.w	cf4e <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    d83e:	f1b8 0f00 	cmp.w	r8, #0
    d842:	f43f ada3 	beq.w	d38c <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    d846:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    d848:	232d      	movs	r3, #45	; 0x2d
    d84a:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    d84e:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    d852:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    d854:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    d856:	44a0      	add	r8, r4
    d858:	e531      	b.n	d2be <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d85a:	4a36      	ldr	r2, [pc, #216]	; (d934 <am_util_stdio_vsprintf+0x11e4>)
    d85c:	e7cd      	b.n	d7fa <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d85e:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    d862:	2201      	movs	r2, #1
    d864:	e5eb      	b.n	d43e <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d866:	4a34      	ldr	r2, [pc, #208]	; (d938 <am_util_stdio_vsprintf+0x11e8>)
    d868:	e7c7      	b.n	d7fa <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    d86a:	f1b8 0f00 	cmp.w	r8, #0
    d86e:	d13d      	bne.n	d8ec <am_util_stdio_vsprintf+0x119c>
    d870:	4640      	mov	r0, r8
    d872:	e594      	b.n	d39e <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d874:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    d876:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d878:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    d87c:	db27      	blt.n	d8ce <am_util_stdio_vsprintf+0x117e>
    d87e:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    d880:	f04f 0030 	mov.w	r0, #48	; 0x30
    d884:	7018      	strb	r0, [r3, #0]
    d886:	1c5d      	adds	r5, r3, #1
    d888:	e5f8      	b.n	d47c <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    d88a:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    d88c:	2400      	movs	r4, #0
    d88e:	941b      	str	r4, [sp, #108]	; 0x6c
    d890:	e515      	b.n	d2be <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    d892:	4643      	mov	r3, r8
    i32FracPart = 0;
    d894:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    d896:	2800      	cmp	r0, #0
    d898:	dc37      	bgt.n	d90a <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    d89a:	1c5d      	adds	r5, r3, #1
    d89c:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    d89e:	4240      	negs	r0, r0
    d8a0:	17c1      	asrs	r1, r0, #31
    d8a2:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    d8a4:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d8a6:	f7fe fe55 	bl	c554 <uint64_to_str>
    d8aa:	e5e1      	b.n	d470 <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    d8ac:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    d8b0:	f888 e000 	strb.w	lr, [r8]
    d8b4:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d8b8:	bb78      	cbnz	r0, d91a <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    d8ba:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    d8bc:	f04f 0030 	mov.w	r0, #48	; 0x30
    d8c0:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    d8c4:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    d8c8:	f108 0502 	add.w	r5, r8, #2
    d8cc:	e59e      	b.n	d40c <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    d8ce:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    d8d2:	f888 c000 	strb.w	ip, [r8]
    d8d6:	f108 0301 	add.w	r3, r8, #1
    d8da:	e7d1      	b.n	d880 <am_util_stdio_vsprintf+0x1130>
    d8dc:	272d      	movs	r7, #45	; 0x2d
    d8de:	f888 7000 	strb.w	r7, [r8]
    d8e2:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d8e6:	2800      	cmp	r0, #0
    d8e8:	d0ca      	beq.n	d880 <am_util_stdio_vsprintf+0x1130>
    d8ea:	e7d4      	b.n	d896 <am_util_stdio_vsprintf+0x1146>
    d8ec:	f04f 0e00 	mov.w	lr, #0
    d8f0:	e535      	b.n	d35e <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    d8f2:	3101      	adds	r1, #1
    d8f4:	7019      	strb	r1, [r3, #0]
    d8f6:	e58f      	b.n	d418 <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    d8f8:	460b      	mov	r3, r1
    d8fa:	4301      	orrs	r1, r0
    d8fc:	4602      	mov	r2, r0
    d8fe:	bf0c      	ite	eq
    d900:	2401      	moveq	r4, #1
    d902:	2400      	movne	r4, #0
                    bNeg = true;
    d904:	2001      	movs	r0, #1
    d906:	f7ff b906 	b.w	cb16 <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    d90a:	461d      	mov	r5, r3
    d90c:	e5ac      	b.n	d468 <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d90e:	4642      	mov	r2, r8
    d910:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d914:	f7fe fe1e 	bl	c554 <uint64_to_str>
    d918:	e4b4      	b.n	d284 <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    d91a:	2400      	movs	r4, #0
    d91c:	e7bb      	b.n	d896 <am_util_stdio_vsprintf+0x1146>
    d91e:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    d922:	7832      	ldrb	r2, [r6, #0]
    d924:	f7fe bf7c 	b.w	c820 <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    d928:	f04f 0c00 	mov.w	ip, #0
    d92c:	e747      	b.n	d7be <am_util_stdio_vsprintf+0x106e>
    d92e:	bf00      	nop
    d930:	003f2e3f 	.word	0x003f2e3f
    d934:	00302e30 	.word	0x00302e30
    d938:	00232e23 	.word	0x00232e23

0000d93c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d93c:	b40f      	push	{r0, r1, r2, r3}
    d93e:	b530      	push	{r4, r5, lr}
    d940:	b083      	sub	sp, #12
    d942:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d944:	4c08      	ldr	r4, [pc, #32]	; (d968 <am_util_stdio_printf+0x2c>)
{
    d946:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    d94a:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d94c:	4620      	mov	r0, r4
    d94e:	f7fe feff 	bl	c750 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d952:	4b06      	ldr	r3, [pc, #24]	; (d96c <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d954:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    d956:	6819      	ldr	r1, [r3, #0]
    d958:	4620      	mov	r0, r4
    d95a:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d95c:	4628      	mov	r0, r5
    d95e:	b003      	add	sp, #12
    d960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d964:	b004      	add	sp, #16
    d966:	4770      	bx	lr
    d968:	1000102c 	.word	0x1000102c
    d96c:	10001134 	.word	0x10001134

0000d970 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d970:	4801      	ldr	r0, [pc, #4]	; (d978 <am_util_stdio_terminal_clear+0x8>)
    d972:	f7ff bfe3 	b.w	d93c <am_util_stdio_printf>
    d976:	bf00      	nop
    d978:	0000ee4c 	.word	0x0000ee4c

0000d97c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d97e:	f000 fdcf 	bl	e520 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d982:	2000      	movs	r0, #0
    d984:	f7fe fede 	bl	c744 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d988:	4b12      	ldr	r3, [pc, #72]	; (d9d4 <am_bsp_low_power_init+0x58>)
    d98a:	4f13      	ldr	r7, [pc, #76]	; (d9d8 <am_bsp_low_power_init+0x5c>)
    d98c:	6819      	ldr	r1, [r3, #0]
    d98e:	2029      	movs	r0, #41	; 0x29
    d990:	f000 fa5a 	bl	de48 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d994:	f000 ff20 	bl	e7d8 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d998:	2001      	movs	r0, #1
    d99a:	f000 ff5b 	bl	e854 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d99e:	2100      	movs	r1, #0
    d9a0:	2003      	movs	r0, #3
    d9a2:	f000 f8a7 	bl	daf4 <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d9a6:	f000 ff61 	bl	e86c <am_hal_rtc_osc_disable>
    d9aa:	480c      	ldr	r0, [pc, #48]	; (d9dc <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d9ac:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9ae:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d9b0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d9b4:	4631      	mov	r1, r6
    d9b6:	4628      	mov	r0, r5
    d9b8:	f000 fa46 	bl	de48 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d9bc:	2103      	movs	r1, #3
    d9be:	4628      	mov	r0, r5
    d9c0:	f000 fd44 	bl	e44c <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9c4:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d9c6:	4628      	mov	r0, r5
    d9c8:	2100      	movs	r1, #0
    d9ca:	f000 fd3f 	bl	e44c <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9ce:	2c05      	cmp	r4, #5
    d9d0:	d1ee      	bne.n	d9b0 <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9d4:	0000ee68 	.word	0x0000ee68
    d9d8:	10001000 	.word	0x10001000
    d9dc:	0000ee6c 	.word	0x0000ee6c

0000d9e0 <am_bsp_debug_printf_disable>:
{
    d9e0:	b538      	push	{r3, r4, r5, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d9e2:	4b17      	ldr	r3, [pc, #92]	; (da40 <am_bsp_debug_printf_disable+0x60>)
    d9e4:	681c      	ldr	r4, [r3, #0]
    d9e6:	2c01      	cmp	r4, #1
    d9e8:	d01d      	beq.n	da26 <am_bsp_debug_printf_disable+0x46>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d9ea:	2c02      	cmp	r4, #2
    d9ec:	d000      	beq.n	d9f0 <am_bsp_debug_printf_disable+0x10>
    d9ee:	bd38      	pop	{r3, r4, r5, pc}
am_bsp_uart_printf_disable(void)
{
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d9f0:	4d14      	ldr	r5, [pc, #80]	; (da44 <am_bsp_debug_printf_disable+0x64>)
    d9f2:	6828      	ldr	r0, [r5, #0]
    d9f4:	f001 f81c 	bl	ea30 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d9f8:	2000      	movs	r0, #0
    d9fa:	f7fe fea3 	bl	c744 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d9fe:	4621      	mov	r1, r4
    da00:	2200      	movs	r2, #0
    da02:	6828      	ldr	r0, [r5, #0]
    da04:	f000 ffa2 	bl	e94c <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    da08:	6828      	ldr	r0, [r5, #0]
    da0a:	f000 ff8b 	bl	e924 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    da0e:	480e      	ldr	r0, [pc, #56]	; (da48 <am_bsp_debug_printf_disable+0x68>)
    da10:	6804      	ldr	r4, [r0, #0]
    da12:	2016      	movs	r0, #22
    da14:	4621      	mov	r1, r4
    da16:	f000 fa17 	bl	de48 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    da1a:	4621      	mov	r1, r4
    da1c:	2017      	movs	r0, #23
} // am_bsp_debug_printf_disable()
    da1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    da22:	f000 ba11 	b.w	de48 <am_hal_gpio_pinconfig>
    am_hal_itm_disable();
    da26:	f000 fd7b 	bl	e520 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    da2a:	2000      	movs	r0, #0
    da2c:	f7fe fe8a 	bl	c744 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    da30:	4905      	ldr	r1, [pc, #20]	; (da48 <am_bsp_debug_printf_disable+0x68>)
    da32:	2029      	movs	r0, #41	; 0x29
    da34:	6809      	ldr	r1, [r1, #0]
} // am_bsp_debug_printf_disable()
    da36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    da3a:	f000 ba05 	b.w	de48 <am_hal_gpio_pinconfig>
    da3e:	bf00      	nop
    da40:	10001130 	.word	0x10001130
    da44:	1000112c 	.word	0x1000112c
    da48:	0000ee68 	.word	0x0000ee68

0000da4c <am_bsp_itm_printf_enable>:
{
    da4c:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    da4e:	4b0b      	ldr	r3, [pc, #44]	; (da7c <am_bsp_itm_printf_enable+0x30>)
{
    da50:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    da52:	2201      	movs	r2, #1
    da54:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    da56:	f000 fd45 	bl	e4e4 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    da5a:	a806      	add	r0, sp, #24
    da5c:	4908      	ldr	r1, [pc, #32]	; (da80 <am_bsp_itm_printf_enable+0x34>)
    da5e:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    da62:	f000 ff0d 	bl	e880 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    da66:	4b07      	ldr	r3, [pc, #28]	; (da84 <am_bsp_itm_printf_enable+0x38>)
    da68:	2029      	movs	r0, #41	; 0x29
    da6a:	6819      	ldr	r1, [r3, #0]
    da6c:	f000 f9ec 	bl	de48 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    da70:	4805      	ldr	r0, [pc, #20]	; (da88 <am_bsp_itm_printf_enable+0x3c>)
    da72:	f7fe fe67 	bl	c744 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    da76:	b007      	add	sp, #28
    da78:	f85d fb04 	ldr.w	pc, [sp], #4
    da7c:	10001130 	.word	0x10001130
    da80:	000f4240 	.word	0x000f4240
    da84:	0000ee60 	.word	0x0000ee60
    da88:	0000e5c9 	.word	0x0000e5c9

0000da8c <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    da8c:	b530      	push	{r4, r5, lr}
    da8e:	b083      	sub	sp, #12
    da90:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    da92:	f000 fd1f 	bl	e4d4 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    da96:	4c11      	ldr	r4, [pc, #68]	; (dadc <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    da98:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    da9a:	6823      	ldr	r3, [r4, #0]
    da9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    daa0:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    daa2:	9801      	ldr	r0, [sp, #4]
    daa4:	f000 fd1a 	bl	e4dc <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    daa8:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    daaa:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    daac:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    daae:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    dab0:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    dab2:	005d      	lsls	r5, r3, #1
    dab4:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    dab8:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    daba:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    dabc:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    dac0:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    dac2:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    dac6:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    daca:	0212      	lsls	r2, r2, #8
    dacc:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    dad0:	432b      	orrs	r3, r5
    dad2:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    dad4:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    dad6:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    dad8:	b003      	add	sp, #12
    dada:	bd30      	pop	{r4, r5, pc}
    dadc:	40018000 	.word	0x40018000

0000dae0 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    dae0:	4a03      	ldr	r2, [pc, #12]	; (daf0 <am_hal_cachectrl_enable+0x10>)
    dae2:	6813      	ldr	r3, [r2, #0]
    dae4:	f043 0001 	orr.w	r0, r3, #1
    dae8:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    daea:	2000      	movs	r0, #0
    daec:	4770      	bx	lr
    daee:	bf00      	nop
    daf0:	40018000 	.word	0x40018000

0000daf4 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    daf4:	2809      	cmp	r0, #9
    daf6:	d852      	bhi.n	db9e <am_hal_clkgen_control+0xaa>
    daf8:	e8df f000 	tbb	[pc, r0]
    dafc:	2b21190d 	.word	0x2b21190d
    db00:	51513d33 	.word	0x51513d33
    db04:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    db06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    db0a:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    db0c:	6a1a      	ldr	r2, [r3, #32]
    db0e:	f36f 0200 	bfc	r2, #0, #1
    db12:	621a      	str	r2, [r3, #32]
            break;
    db14:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db16:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    db1a:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db1c:	2047      	movs	r0, #71	; 0x47
    db1e:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    db22:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    db26:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    db28:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    db2c:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db2e:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db32:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db34:	68ca      	ldr	r2, [r1, #12]
    db36:	f022 0301 	bic.w	r3, r2, #1
    db3a:	60cb      	str	r3, [r1, #12]
            break;
    db3c:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db3e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db42:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db44:	f8dc 200c 	ldr.w	r2, [ip, #12]
    db48:	f022 0302 	bic.w	r3, r2, #2
    db4c:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    db50:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db52:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db56:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db58:	68d3      	ldr	r3, [r2, #12]
    db5a:	f043 0101 	orr.w	r1, r3, #1
    db5e:	60d1      	str	r1, [r2, #12]
            break;
    db60:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db62:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db66:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db68:	f8dc 300c 	ldr.w	r3, [ip, #12]
    db6c:	f043 0102 	orr.w	r1, r3, #2
    db70:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    db74:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    db7a:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db7c:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db7e:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db80:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db82:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    db84:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    db86:	615a      	str	r2, [r3, #20]
            break;
    db88:	4770      	bx	lr
            if ( pArgs == 0 )
    db8a:	b151      	cbz	r1, dba2 <am_hal_clkgen_control+0xae>
    db8c:	6808      	ldr	r0, [r1, #0]
    db8e:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    db92:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db96:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    db98:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    db9c:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    db9e:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    dba0:	4770      	bx	lr
    dba2:	4901      	ldr	r1, [pc, #4]	; (dba8 <am_hal_clkgen_control+0xb4>)
    dba4:	e7f5      	b.n	db92 <am_hal_clkgen_control+0x9e>
    dba6:	bf00      	nop
    dba8:	0025b801 	.word	0x0025b801

0000dbac <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    dbac:	b1a8      	cbz	r0, dbda <am_hal_clkgen_status_get+0x2e>
{
    dbae:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    dbb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    dbb4:	490a      	ldr	r1, [pc, #40]	; (dbe0 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    dbb6:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    dbb8:	4b0a      	ldr	r3, [pc, #40]	; (dbe4 <am_hal_clkgen_status_get+0x38>)
    dbba:	f014 0f01 	tst.w	r4, #1
    dbbe:	bf08      	it	eq
    dbc0:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    dbc2:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    dbc4:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    dbc6:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    dbca:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    dbce:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    dbd0:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    dbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    dbd6:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    dbd8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dbda:	2006      	movs	r0, #6
    dbdc:	4770      	bx	lr
    dbde:	bf00      	nop
    dbe0:	02dc6c00 	.word	0x02dc6c00
    dbe4:	016e3600 	.word	0x016e3600

0000dbe8 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbe8:	4b00      	ldr	r3, [pc, #0]	; (dbec <am_hal_flash_delay+0x4>)
    dbea:	4718      	bx	r3
    dbec:	0800009d 	.word	0x0800009d

0000dbf0 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    dbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbf4:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbf8:	f8df 8248 	ldr.w	r8, [pc, #584]	; de44 <am_hal_flash_delay_status_check+0x254>
{
    dbfc:	4607      	mov	r7, r0
    dbfe:	460c      	mov	r4, r1
    dc00:	4615      	mov	r5, r2
    dc02:	461e      	mov	r6, r3
    dc04:	f1be 0f00 	cmp.w	lr, #0
    dc08:	f000 808e 	beq.w	dd28 <am_hal_flash_delay_status_check+0x138>
    dc0c:	f010 0907 	ands.w	r9, r0, #7
    dc10:	d044      	beq.n	dc9c <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc12:	680b      	ldr	r3, [r1, #0]
    dc14:	4013      	ands	r3, r2
    dc16:	429e      	cmp	r6, r3
    dc18:	f000 8083 	beq.w	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1c:	2001      	movs	r0, #1
    dc1e:	47c0      	blx	r8
    dc20:	f1b9 0f01 	cmp.w	r9, #1
    dc24:	f107 37ff 	add.w	r7, r7, #4294967295
    dc28:	d038      	beq.n	dc9c <am_hal_flash_delay_status_check+0xac>
    dc2a:	f1b9 0f02 	cmp.w	r9, #2
    dc2e:	d02e      	beq.n	dc8e <am_hal_flash_delay_status_check+0x9e>
    dc30:	f1b9 0f03 	cmp.w	r9, #3
    dc34:	d024      	beq.n	dc80 <am_hal_flash_delay_status_check+0x90>
    dc36:	f1b9 0f04 	cmp.w	r9, #4
    dc3a:	d01a      	beq.n	dc72 <am_hal_flash_delay_status_check+0x82>
    dc3c:	f1b9 0f05 	cmp.w	r9, #5
    dc40:	d010      	beq.n	dc64 <am_hal_flash_delay_status_check+0x74>
    dc42:	f1b9 0f06 	cmp.w	r9, #6
    dc46:	d006      	beq.n	dc56 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc48:	6820      	ldr	r0, [r4, #0]
    dc4a:	4028      	ands	r0, r5
    dc4c:	4286      	cmp	r6, r0
    dc4e:	d068      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc50:	2001      	movs	r0, #1
    dc52:	47c0      	blx	r8
    dc54:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc56:	6821      	ldr	r1, [r4, #0]
    dc58:	4029      	ands	r1, r5
    dc5a:	428e      	cmp	r6, r1
    dc5c:	d061      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc5e:	2001      	movs	r0, #1
    dc60:	47c0      	blx	r8
    dc62:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc64:	6822      	ldr	r2, [r4, #0]
    dc66:	402a      	ands	r2, r5
    dc68:	4296      	cmp	r6, r2
    dc6a:	d05a      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc6c:	2001      	movs	r0, #1
    dc6e:	47c0      	blx	r8
    dc70:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc72:	6823      	ldr	r3, [r4, #0]
    dc74:	402b      	ands	r3, r5
    dc76:	429e      	cmp	r6, r3
    dc78:	d053      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc7a:	2001      	movs	r0, #1
    dc7c:	47c0      	blx	r8
    dc7e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc80:	6820      	ldr	r0, [r4, #0]
    dc82:	4028      	ands	r0, r5
    dc84:	4286      	cmp	r6, r0
    dc86:	d04c      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc88:	2001      	movs	r0, #1
    dc8a:	47c0      	blx	r8
    dc8c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc8e:	6821      	ldr	r1, [r4, #0]
    dc90:	4029      	ands	r1, r5
    dc92:	428e      	cmp	r6, r1
    dc94:	d045      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc96:	2001      	movs	r0, #1
    dc98:	3f01      	subs	r7, #1
    dc9a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc9c:	6822      	ldr	r2, [r4, #0]
    dc9e:	402a      	ands	r2, r5
    dca0:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dca2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dca6:	d03c      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    dca8:	2f00      	cmp	r7, #0
    dcaa:	f000 80c8 	beq.w	de3e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcae:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcb0:	6823      	ldr	r3, [r4, #0]
    dcb2:	402b      	ands	r3, r5
    dcb4:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcb6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcba:	d032      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcbc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcbe:	6821      	ldr	r1, [r4, #0]
    dcc0:	4029      	ands	r1, r5
    dcc2:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcc4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcc8:	d02b      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcca:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dccc:	6822      	ldr	r2, [r4, #0]
    dcce:	402a      	ands	r2, r5
    dcd0:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcd2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcd6:	d024      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcd8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcda:	6823      	ldr	r3, [r4, #0]
    dcdc:	402b      	ands	r3, r5
    dcde:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dce4:	d01d      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dce8:	6821      	ldr	r1, [r4, #0]
    dcea:	4029      	ands	r1, r5
    dcec:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcee:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcf2:	d016      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcf4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcf6:	6822      	ldr	r2, [r4, #0]
    dcf8:	402a      	ands	r2, r5
    dcfa:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcfc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dd00:	d00f      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd02:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dd04:	6820      	ldr	r0, [r4, #0]
    dd06:	4028      	ands	r0, r5
    dd08:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd0a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dd0e:	d008      	beq.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd10:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dd12:	6822      	ldr	r2, [r4, #0]
    dd14:	402a      	ands	r2, r5
    dd16:	4296      	cmp	r6, r2
    dd18:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd1c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dd20:	d1c2      	bne.n	dca8 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dd22:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd28:	f010 0907 	ands.w	r9, r0, #7
    dd2c:	d043      	beq.n	ddb6 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd2e:	680b      	ldr	r3, [r1, #0]
    dd30:	4013      	ands	r3, r2
    dd32:	429e      	cmp	r6, r3
    dd34:	d1f5      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd36:	2001      	movs	r0, #1
    dd38:	47c0      	blx	r8
    dd3a:	f1b9 0f01 	cmp.w	r9, #1
    dd3e:	f107 37ff 	add.w	r7, r7, #4294967295
    dd42:	d038      	beq.n	ddb6 <am_hal_flash_delay_status_check+0x1c6>
    dd44:	f1b9 0f02 	cmp.w	r9, #2
    dd48:	d02e      	beq.n	dda8 <am_hal_flash_delay_status_check+0x1b8>
    dd4a:	f1b9 0f03 	cmp.w	r9, #3
    dd4e:	d024      	beq.n	dd9a <am_hal_flash_delay_status_check+0x1aa>
    dd50:	f1b9 0f04 	cmp.w	r9, #4
    dd54:	d01a      	beq.n	dd8c <am_hal_flash_delay_status_check+0x19c>
    dd56:	f1b9 0f05 	cmp.w	r9, #5
    dd5a:	d010      	beq.n	dd7e <am_hal_flash_delay_status_check+0x18e>
    dd5c:	f1b9 0f06 	cmp.w	r9, #6
    dd60:	d006      	beq.n	dd70 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd62:	6821      	ldr	r1, [r4, #0]
    dd64:	4029      	ands	r1, r5
    dd66:	428e      	cmp	r6, r1
    dd68:	d1db      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd6a:	2001      	movs	r0, #1
    dd6c:	47c0      	blx	r8
    dd6e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd70:	6822      	ldr	r2, [r4, #0]
    dd72:	402a      	ands	r2, r5
    dd74:	4296      	cmp	r6, r2
    dd76:	d1d4      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd78:	2001      	movs	r0, #1
    dd7a:	47c0      	blx	r8
    dd7c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd7e:	6820      	ldr	r0, [r4, #0]
    dd80:	4028      	ands	r0, r5
    dd82:	4286      	cmp	r6, r0
    dd84:	d1cd      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd86:	2001      	movs	r0, #1
    dd88:	47c0      	blx	r8
    dd8a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd8c:	6823      	ldr	r3, [r4, #0]
    dd8e:	402b      	ands	r3, r5
    dd90:	429e      	cmp	r6, r3
    dd92:	d1c6      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd94:	2001      	movs	r0, #1
    dd96:	47c0      	blx	r8
    dd98:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd9a:	6821      	ldr	r1, [r4, #0]
    dd9c:	4029      	ands	r1, r5
    dd9e:	428e      	cmp	r6, r1
    dda0:	d1bf      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dda2:	2001      	movs	r0, #1
    dda4:	47c0      	blx	r8
    dda6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dda8:	6822      	ldr	r2, [r4, #0]
    ddaa:	402a      	ands	r2, r5
    ddac:	4296      	cmp	r6, r2
    ddae:	d1b8      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddb0:	2001      	movs	r0, #1
    ddb2:	3f01      	subs	r7, #1
    ddb4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddb6:	6823      	ldr	r3, [r4, #0]
    ddb8:	402b      	ands	r3, r5
    ddba:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddbc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddc0:	d1af      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    ddc2:	2f00      	cmp	r7, #0
    ddc4:	d03b      	beq.n	de3e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddc6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddc8:	6821      	ldr	r1, [r4, #0]
    ddca:	4029      	ands	r1, r5
    ddcc:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddce:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddd2:	d1a6      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddd4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddd6:	6822      	ldr	r2, [r4, #0]
    ddd8:	402a      	ands	r2, r5
    ddda:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dddc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dde0:	d19f      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dde2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dde4:	6823      	ldr	r3, [r4, #0]
    dde6:	402b      	ands	r3, r5
    dde8:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddea:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddee:	d198      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddf0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddf2:	6821      	ldr	r1, [r4, #0]
    ddf4:	4029      	ands	r1, r5
    ddf6:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddf8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddfc:	d191      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddfe:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de00:	6822      	ldr	r2, [r4, #0]
    de02:	402a      	ands	r2, r5
    de04:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de06:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de0a:	d18a      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de0c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de0e:	6823      	ldr	r3, [r4, #0]
    de10:	402b      	ands	r3, r5
    de12:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de14:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de18:	d183      	bne.n	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de1a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de1c:	6820      	ldr	r0, [r4, #0]
    de1e:	4028      	ands	r0, r5
    de20:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de22:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de26:	f47f af7c 	bne.w	dd22 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de2a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de2c:	6823      	ldr	r3, [r4, #0]
    de2e:	402b      	ands	r3, r5
    de30:	429e      	cmp	r6, r3
    de32:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    de36:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    de3a:	d0c2      	beq.n	ddc2 <am_hal_flash_delay_status_check+0x1d2>
    de3c:	e771      	b.n	dd22 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    de3e:	2004      	movs	r0, #4
    de40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    de44:	0800009d 	.word	0x0800009d

0000de48 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    de48:	2831      	cmp	r0, #49	; 0x31
    de4a:	d901      	bls.n	de50 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    de4c:	2006      	movs	r0, #6
    de4e:	4770      	bx	lr
{
    de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    de54:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    de58:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    de5c:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    de5e:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    de62:	d014      	beq.n	de8e <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de64:	f3c1 1642 	ubfx	r6, r1, #5, #3
    de68:	1db2      	adds	r2, r6, #6
    de6a:	f002 0707 	and.w	r7, r2, #7
    de6e:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    de70:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de74:	f200 80ab 	bhi.w	dfce <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    de78:	4a85      	ldr	r2, [pc, #532]	; (e090 <am_hal_gpio_pinconfig+0x248>)
    de7a:	5c17      	ldrb	r7, [r2, r0]
    de7c:	07ff      	lsls	r7, r7, #31
    de7e:	d403      	bmi.n	de88 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    de80:	4884      	ldr	r0, [pc, #528]	; (e094 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    de82:	b007      	add	sp, #28
    de84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    de88:	1eb4      	subs	r4, r6, #2
    de8a:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    de8e:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    de92:	2e00      	cmp	r6, #0
    de94:	f040 8095 	bne.w	dfc2 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de98:	4a7f      	ldr	r2, [pc, #508]	; (e098 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de9a:	4f80      	ldr	r7, [pc, #512]	; (e09c <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de9c:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de9e:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dea2:	411e      	asrs	r6, r3
    dea4:	f016 0f01 	tst.w	r6, #1
    dea8:	bf0c      	ite	eq
    deaa:	2600      	moveq	r6, #0
    deac:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    deae:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    deb0:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    deb4:	f000 8097 	beq.w	dfe6 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    deb8:	f3c1 3341 	ubfx	r3, r1, #13, #2
    debc:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    debe:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    dec2:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    dec6:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    dec8:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    decc:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ded0:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ded4:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ded8:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    deda:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    dede:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    dee2:	f000 808d 	beq.w	e000 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    dee6:	4a6e      	ldr	r2, [pc, #440]	; (e0a0 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    dee8:	6816      	ldr	r6, [r2, #0]
    deea:	1b8c      	subs	r4, r1, r6
    deec:	fab4 f384 	clz	r3, r4
    def0:	095f      	lsrs	r7, r3, #5
    def2:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    def4:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    def8:	bf04      	itt	eq
    defa:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    defe:	f367 0800 	bfieq	r8, r7, #0, #1
    df02:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    df04:	f3c1 2101 	ubfx	r1, r1, #8, #2
    df08:	2902      	cmp	r1, #2
    df0a:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    df0e:	d07a      	beq.n	e006 <am_hal_gpio_pinconfig+0x1be>
    df10:	d87f      	bhi.n	e012 <am_hal_gpio_pinconfig+0x1ca>
    df12:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    df14:	bf08      	it	eq
    df16:	f045 0504 	orreq.w	r5, r5, #4
    df1a:	f004 0a18 	and.w	sl, r4, #24
            break;
    df1e:	2200      	movs	r2, #0
    df20:	4604      	mov	r4, r0
    df22:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    df24:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    df28:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    df2c:	485d      	ldr	r0, [pc, #372]	; (e0a4 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    df2e:	495e      	ldr	r1, [pc, #376]	; (e0a8 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    df30:	4f5e      	ldr	r7, [pc, #376]	; (e0ac <am_hal_gpio_pinconfig+0x264>)
    df32:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    df34:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    df38:	f04f 0cff 	mov.w	ip, #255	; 0xff
    df3c:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    df40:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    df42:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    df46:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    df48:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    df4c:	f000 fac2 	bl	e4d4 <am_hal_interrupt_master_disable>
    df50:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    df52:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df56:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    df5a:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df5e:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    df62:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df64:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    df68:	9902      	ldr	r1, [sp, #8]
    df6a:	9a03      	ldr	r2, [sp, #12]
    df6c:	b150      	cbz	r0, df84 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    df6e:	f004 001f 	and.w	r0, r4, #31
    df72:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    df76:	f04f 0c01 	mov.w	ip, #1
    df7a:	4c4d      	ldr	r4, [pc, #308]	; (e0b0 <am_hal_gpio_pinconfig+0x268>)
    df7c:	fa0c f000 	lsl.w	r0, ip, r0
    df80:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    df84:	484b      	ldr	r0, [pc, #300]	; (e0b4 <am_hal_gpio_pinconfig+0x26c>)
    df86:	2473      	movs	r4, #115	; 0x73
    df88:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    df8a:	f8da 4000 	ldr.w	r4, [sl]
    df8e:	4034      	ands	r4, r6
    df90:	4325      	orrs	r5, r4
    df92:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    df96:	f859 5001 	ldr.w	r5, [r9, r1]
    df9a:	402f      	ands	r7, r5
    df9c:	ea47 0708 	orr.w	r7, r7, r8
    dfa0:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    dfa4:	f85b 1003 	ldr.w	r1, [fp, r3]
    dfa8:	400e      	ands	r6, r1
    dfaa:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    dfac:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    dfae:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    dfb2:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    dfb4:	9805      	ldr	r0, [sp, #20]
    dfb6:	f000 fa91 	bl	e4dc <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    dfba:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    dfbc:	b007      	add	sp, #28
    dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    dfc2:	2e01      	cmp	r6, #1
    dfc4:	d015      	beq.n	dff2 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    dfc6:	2e02      	cmp	r6, #2
    dfc8:	d030      	beq.n	e02c <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    dfca:	483b      	ldr	r0, [pc, #236]	; (e0b8 <am_hal_gpio_pinconfig+0x270>)
    dfcc:	e759      	b.n	de82 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    dfce:	2cc0      	cmp	r4, #192	; 0xc0
    dfd0:	d027      	beq.n	e022 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    dfd2:	2c20      	cmp	r4, #32
    dfd4:	f47f af5b 	bne.w	de8e <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    dfd8:	4c2d      	ldr	r4, [pc, #180]	; (e090 <am_hal_gpio_pinconfig+0x248>)
    dfda:	5c26      	ldrb	r6, [r4, r0]
    dfdc:	f016 0f09 	tst.w	r6, #9
    dfe0:	f47f af4e 	bne.w	de80 <am_hal_gpio_pinconfig+0x38>
    dfe4:	e753      	b.n	de8e <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    dfe6:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dfea:	2a07      	cmp	r2, #7
    dfec:	d125      	bne.n	e03a <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    dfee:	4833      	ldr	r0, [pc, #204]	; (e0bc <am_hal_gpio_pinconfig+0x274>)
    dff0:	e747      	b.n	de82 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    dff2:	4c27      	ldr	r4, [pc, #156]	; (e090 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    dff4:	5c26      	ldrb	r6, [r4, r0]
    dff6:	07b4      	lsls	r4, r6, #30
    dff8:	d5e7      	bpl.n	dfca <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    dffa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    dffe:	e74b      	b.n	de98 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    e000:	2701      	movs	r7, #1
    e002:	9700      	str	r7, [sp, #0]
    e004:	e776      	b.n	def4 <am_hal_gpio_pinconfig+0xac>
    e006:	f004 0a18 	and.w	sl, r4, #24
    e00a:	2301      	movs	r3, #1
    e00c:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    e010:	e786      	b.n	df20 <am_hal_gpio_pinconfig+0xd8>
    e012:	f004 0a18 	and.w	sl, r4, #24
    e016:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    e018:	f045 0504 	orr.w	r5, r5, #4
    e01c:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    e020:	e77e      	b.n	df20 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    e022:	2814      	cmp	r0, #20
    e024:	f43f af33 	beq.w	de8e <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    e028:	4825      	ldr	r0, [pc, #148]	; (e0c0 <am_hal_gpio_pinconfig+0x278>)
    e02a:	e72a      	b.n	de82 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    e02c:	4a18      	ldr	r2, [pc, #96]	; (e090 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    e02e:	5c17      	ldrb	r7, [r2, r0]
    e030:	077a      	lsls	r2, r7, #29
    e032:	d5ca      	bpl.n	dfca <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    e034:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    e038:	e72e      	b.n	de98 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    e03a:	4c22      	ldr	r4, [pc, #136]	; (e0c4 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    e03c:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    e040:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    e044:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    e048:	45b0      	cmp	r8, r6
    e04a:	d010      	beq.n	e06e <am_hal_gpio_pinconfig+0x226>
    e04c:	0087      	lsls	r7, r0, #2
    e04e:	eb04 0907 	add.w	r9, r4, r7
    e052:	f899 3001 	ldrb.w	r3, [r9, #1]
    e056:	42b3      	cmp	r3, r6
    e058:	d015      	beq.n	e086 <am_hal_gpio_pinconfig+0x23e>
    e05a:	f899 2002 	ldrb.w	r2, [r9, #2]
    e05e:	42b2      	cmp	r2, r6
    e060:	d00f      	beq.n	e082 <am_hal_gpio_pinconfig+0x23a>
    e062:	f899 4003 	ldrb.w	r4, [r9, #3]
    e066:	42b4      	cmp	r4, r6
    e068:	d00f      	beq.n	e08a <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    e06a:	4817      	ldr	r0, [pc, #92]	; (e0c8 <am_hal_gpio_pinconfig+0x280>)
    e06c:	e709      	b.n	de82 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e06e:	2600      	movs	r6, #0
    e070:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    e072:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e074:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    e078:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e07a:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    e07e:	9300      	str	r3, [sp, #0]
    e080:	e740      	b.n	df04 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e082:	2602      	movs	r6, #2
    e084:	e7f5      	b.n	e072 <am_hal_gpio_pinconfig+0x22a>
    e086:	2601      	movs	r6, #1
    e088:	e7f3      	b.n	e072 <am_hal_gpio_pinconfig+0x22a>
    e08a:	2603      	movs	r6, #3
    e08c:	e7f1      	b.n	e072 <am_hal_gpio_pinconfig+0x22a>
    e08e:	bf00      	nop
    e090:	0000ee74 	.word	0x0000ee74
    e094:	08000100 	.word	0x08000100
    e098:	0000eea8 	.word	0x0000eea8
    e09c:	0000efa4 	.word	0x0000efa4
    e0a0:	0000ee68 	.word	0x0000ee68
    e0a4:	7ffffffc 	.word	0x7ffffffc
    e0a8:	400100e0 	.word	0x400100e0
    e0ac:	40010040 	.word	0x40010040
    e0b0:	400100b4 	.word	0x400100b4
    e0b4:	40010000 	.word	0x40010000
    e0b8:	08000102 	.word	0x08000102
    e0bc:	08000103 	.word	0x08000103
    e0c0:	08000101 	.word	0x08000101
    e0c4:	0000eedc 	.word	0x0000eedc
    e0c8:	08000104 	.word	0x08000104

0000e0cc <am_hal_gpio_fast_pinconfig>:
                           uint32_t ui32Masks[])
{
    uint32_t ux, ui32pinnum, ui32retval, ui32Mask;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( (ui64PinMask > ((uint64_t)1 << 49))    ||
    e0cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    e0d0:	bf08      	it	eq
    e0d2:	2801      	cmpeq	r0, #1
    e0d4:	d301      	bcc.n	e0da <am_hal_gpio_fast_pinconfig+0xe>
         (num_bits64(ui64PinMask) > 8)          ||
         (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_TRISTATE) )
    {
        return AM_HAL_STATUS_INVALID_ARG;
    e0d6:	2006      	movs	r0, #6
        ui64PinMask >>= 1;
    }

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_fast_pinconfig()
    e0d8:	4770      	bx	lr
{
    e0da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0de:	4680      	mov	r8, r0
    e0e0:	4689      	mov	r9, r1
    e0e2:	469a      	mov	sl, r3
    while ( ui64bitmask )
    e0e4:	ea58 0309 	orrs.w	r3, r8, r9
{
    e0e8:	b08f      	sub	sp, #60	; 0x3c
    e0ea:	4693      	mov	fp, r2
    while ( ui64bitmask )
    e0ec:	f000 8115 	beq.w	e31a <am_hal_gpio_fast_pinconfig+0x24e>
    e0f0:	460b      	mov	r3, r1
    e0f2:	4602      	mov	r2, r0
    e0f4:	2100      	movs	r1, #0
        ux += ui64bitmask & 1;
    e0f6:	f002 0401 	and.w	r4, r2, #1
        ui64bitmask >>= 1;
    e0fa:	085b      	lsrs	r3, r3, #1
    e0fc:	ea4f 0232 	mov.w	r2, r2, rrx
    while ( ui64bitmask )
    e100:	ea52 0003 	orrs.w	r0, r2, r3
        ux += ui64bitmask & 1;
    e104:	4421      	add	r1, r4
    while ( ui64bitmask )
    e106:	d1f6      	bne.n	e0f6 <am_hal_gpio_fast_pinconfig+0x2a>
    if ( (ui64PinMask > ((uint64_t)1 << 49))    ||
    e108:	2908      	cmp	r1, #8
    e10a:	d903      	bls.n	e114 <am_hal_gpio_fast_pinconfig+0x48>
        return AM_HAL_STATUS_INVALID_ARG;
    e10c:	2006      	movs	r0, #6
} // am_hal_gpio_fast_pinconfig()
    e10e:	b00f      	add	sp, #60	; 0x3c
    e110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_TRISTATE) )
    e114:	f3cb 2207 	ubfx	r2, fp, #8, #8
         (num_bits64(ui64PinMask) > 8)          ||
    e118:	f002 050c 	and.w	r5, r2, #12
    e11c:	2d0c      	cmp	r5, #12
    e11e:	d0f5      	beq.n	e10c <am_hal_gpio_fast_pinconfig+0x40>
    e120:	4bba      	ldr	r3, [pc, #744]	; (e40c <am_hal_gpio_fast_pinconfig+0x340>)
    e122:	48bb      	ldr	r0, [pc, #748]	; (e410 <am_hal_gpio_fast_pinconfig+0x344>)
    e124:	f8cd b014 	str.w	fp, [sp, #20]
    e128:	2700      	movs	r7, #0
    e12a:	f8cd a00c 	str.w	sl, [sp, #12]
    e12e:	9701      	str	r7, [sp, #4]
    e130:	463e      	mov	r6, r7
    e132:	9702      	str	r7, [sp, #8]
    e134:	4683      	mov	fp, r0
    e136:	469a      	mov	sl, r3
    e138:	e00d      	b.n	e156 <am_hal_gpio_fast_pinconfig+0x8a>
        ui64PinMask >>= 1;
    e13a:	ea5f 0959 	movs.w	r9, r9, lsr #1
    e13e:	ea4f 0838 	mov.w	r8, r8, rrx
    while ( ui64PinMask )
    e142:	ea58 0309 	orrs.w	r3, r8, r9
        ui32pinnum++;
    e146:	f106 0601 	add.w	r6, r6, #1
    e14a:	f10a 0a01 	add.w	sl, sl, #1
    e14e:	f10b 0b04 	add.w	fp, fp, #4
    while ( ui64PinMask )
    e152:	f000 80e9 	beq.w	e328 <am_hal_gpio_fast_pinconfig+0x25c>
        if ( ui64PinMask & 0x1 )
    e156:	f008 0201 	and.w	r2, r8, #1
    e15a:	2300      	movs	r3, #0
    e15c:	4313      	orrs	r3, r2
    e15e:	d0ec      	beq.n	e13a <am_hal_gpio_fast_pinconfig+0x6e>
    if ( ui32Pin > 49 )
    e160:	2e31      	cmp	r6, #49	; 0x31
    e162:	d8d3      	bhi.n	e10c <am_hal_gpio_fast_pinconfig+0x40>
    ui32Funcsel = bfGpioCfg.uFuncSel;
    e164:	9905      	ldr	r1, [sp, #20]
    e166:	f001 0707 	and.w	r7, r1, #7
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    e16a:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    e16e:	ea4f 02c7 	mov.w	r2, r7, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    e172:	d012      	beq.n	e19a <am_hal_gpio_fast_pinconfig+0xce>
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    e174:	f3c1 1342 	ubfx	r3, r1, #5, #3
    e178:	1d98      	adds	r0, r3, #6
    e17a:	f000 0107 	and.w	r1, r0, #7
    e17e:	2903      	cmp	r1, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    e180:	f042 0201 	orr.w	r2, r2, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    e184:	f200 80d6 	bhi.w	e334 <am_hal_gpio_fast_pinconfig+0x268>
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    e188:	f89a 5000 	ldrb.w	r5, [sl]
    e18c:	07ed      	lsls	r5, r5, #31
    e18e:	d401      	bmi.n	e194 <am_hal_gpio_fast_pinconfig+0xc8>
                return AM_HAL_GPIO_ERR_PULLUP;
    e190:	48a0      	ldr	r0, [pc, #640]	; (e414 <am_hal_gpio_fast_pinconfig+0x348>)
    e192:	e7bc      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    e194:	3b02      	subs	r3, #2
    e196:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    e19a:	9805      	ldr	r0, [sp, #20]
    e19c:	f3c0 01c1 	ubfx	r1, r0, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    e1a0:	2900      	cmp	r1, #0
    e1a2:	f040 80b4 	bne.w	e30e <am_hal_gpio_fast_pinconfig+0x242>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    e1a6:	4b9c      	ldr	r3, [pc, #624]	; (e418 <am_hal_gpio_fast_pinconfig+0x34c>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    e1a8:	489c      	ldr	r0, [pc, #624]	; (e41c <am_hal_gpio_fast_pinconfig+0x350>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    e1aa:	5cf1      	ldrb	r1, [r6, r3]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    e1ac:	5c34      	ldrb	r4, [r6, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    e1ae:	4139      	asrs	r1, r7
    e1b0:	f011 0f01 	tst.w	r1, #1
    e1b4:	bf0c      	ite	eq
    e1b6:	f04f 0e00 	moveq.w	lr, #0
    e1ba:	f04f 0e02 	movne.w	lr, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    e1be:	42a7      	cmp	r7, r4
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    e1c0:	ea42 0e0e 	orr.w	lr, r2, lr
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    e1c4:	f000 80d0 	beq.w	e368 <am_hal_gpio_fast_pinconfig+0x29c>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    e1c8:	9d05      	ldr	r5, [sp, #20]
    e1ca:	f3c5 3741 	ubfx	r7, r5, #13, #2
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    e1ce:	1078      	asrs	r0, r7, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    e1d0:	f3c5 2481 	ubfx	r4, r5, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    e1d4:	f3c5 2c07 	ubfx	ip, r5, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    e1d8:	00fb      	lsls	r3, r7, #3
    e1da:	ea40 0744 	orr.w	r7, r0, r4, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    e1de:	f00c 000c 	and.w	r0, ip, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    e1e2:	f003 0208 	and.w	r2, r3, #8
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    e1e6:	f3c5 3400 	ubfx	r4, r5, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    e1ea:	2804      	cmp	r0, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    e1ec:	ea47 0702 	orr.w	r7, r7, r2
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    e1f0:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    e1f4:	f000 80c6 	beq.w	e384 <am_hal_gpio_fast_pinconfig+0x2b8>
    ui32B = *((uint32_t*)cfg2);
    e1f8:	4989      	ldr	r1, [pc, #548]	; (e420 <am_hal_gpio_fast_pinconfig+0x354>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    e1fa:	680a      	ldr	r2, [r1, #0]
    e1fc:	1aad      	subs	r5, r5, r2
    e1fe:	fab5 f085 	clz	r0, r5
    e202:	0943      	lsrs	r3, r0, #5
    e204:	9304      	str	r3, [sp, #16]
        if ( bfGpioCfg.eIntDir == 0 )
    e206:	f01c 0f60 	tst.w	ip, #96	; 0x60
    e20a:	d104      	bne.n	e216 <am_hal_gpio_fast_pinconfig+0x14a>
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    e20c:	9a05      	ldr	r2, [sp, #20]
    e20e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
    e212:	f364 0700 	bfi	r7, r4, #0, #1
    switch ( bfGpioCfg.eDriveStrength )
    e216:	9a05      	ldr	r2, [sp, #20]
    e218:	f3c2 2401 	ubfx	r4, r2, #8, #2
    e21c:	2c02      	cmp	r4, #2
    e21e:	ea4f 05c6 	mov.w	r5, r6, lsl #3
    e222:	f000 80ba 	beq.w	e39a <am_hal_gpio_fast_pinconfig+0x2ce>
    e226:	f200 80b0 	bhi.w	e38a <am_hal_gpio_fast_pinconfig+0x2be>
    e22a:	2c01      	cmp	r4, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    e22c:	f04f 0000 	mov.w	r0, #0
    e230:	bf08      	it	eq
    e232:	f04e 0e04 	orreq.w	lr, lr, #4
    e236:	f005 0218 	and.w	r2, r5, #24
    e23a:	9006      	str	r0, [sp, #24]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    e23c:	00b4      	lsls	r4, r6, #2
    e23e:	f004 011c 	and.w	r1, r4, #28
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    e242:	250f      	movs	r5, #15
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e244:	f026 0303 	bic.w	r3, r6, #3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    e248:	4876      	ldr	r0, [pc, #472]	; (e424 <am_hal_gpio_fast_pinconfig+0x358>)
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e24a:	930a      	str	r3, [sp, #40]	; 0x28
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    e24c:	408d      	lsls	r5, r1
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    e24e:	24ff      	movs	r4, #255	; 0xff
    ui32GPCfg     <<= ui32GPCfgShft;
    e250:	408f      	lsls	r7, r1
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    e252:	4094      	lsls	r4, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    e254:	43e9      	mvns	r1, r5
    ui32Padreg    <<= ui32PadShft;
    e256:	fa0e f202 	lsl.w	r2, lr, r2
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e25a:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
    ui32Padreg    <<= ui32PadShft;
    e25e:	920b      	str	r2, [sp, #44]	; 0x2c
    ui32GPCfg     <<= ui32GPCfgShft;
    e260:	9708      	str	r7, [sp, #32]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    e262:	9107      	str	r1, [sp, #28]
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    e264:	ea00 0756 	and.w	r7, r0, r6, lsr #1
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e268:	9509      	str	r5, [sp, #36]	; 0x24
    AM_CRITICAL_BEGIN
    e26a:	f000 f933 	bl	e4d4 <am_hal_interrupt_master_disable>
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    AM_CRITICAL_BEGIN
    e270:	900d      	str	r0, [sp, #52]	; 0x34
    if ( bClearEnable )
    e272:	9804      	ldr	r0, [sp, #16]
    e274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    e276:	f503 3c80 	add.w	ip, r3, #65536	; 0x10000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    e27a:	43e4      	mvns	r4, r4
    if ( bClearEnable )
    e27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e27e:	2800      	cmp	r0, #0
    e280:	d164      	bne.n	e34c <am_hal_gpio_fast_pinconfig+0x280>
    e282:	f006 011f 	and.w	r1, r6, #31
    e286:	2501      	movs	r5, #1
    e288:	fa05 f001 	lsl.w	r0, r5, r1
    e28c:	0971      	lsrs	r1, r6, #5
    e28e:	9004      	str	r0, [sp, #16]
    e290:	9109      	str	r1, [sp, #36]	; 0x24
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    e292:	4865      	ldr	r0, [pc, #404]	; (e428 <am_hal_gpio_fast_pinconfig+0x35c>)
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    e294:	4d65      	ldr	r5, [pc, #404]	; (e42c <am_hal_gpio_fast_pinconfig+0x360>)
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    e296:	f04f 0e73 	mov.w	lr, #115	; 0x73
    e29a:	f8c0 e060 	str.w	lr, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    e29e:	f8dc e000 	ldr.w	lr, [ip]
    e2a2:	ea04 010e 	and.w	r1, r4, lr
    e2a6:	430a      	orrs	r2, r1
    e2a8:	f8cc 2000 	str.w	r2, [ip]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    e2ac:	5979      	ldr	r1, [r7, r5]
    e2ae:	9a07      	ldr	r2, [sp, #28]
    e2b0:	9d08      	ldr	r5, [sp, #32]
    e2b2:	400a      	ands	r2, r1
    e2b4:	495d      	ldr	r1, [pc, #372]	; (e42c <am_hal_gpio_fast_pinconfig+0x360>)
    e2b6:	4315      	orrs	r5, r2
    e2b8:	507d      	str	r5, [r7, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    e2ba:	31a0      	adds	r1, #160	; 0xa0
    e2bc:	9a06      	ldr	r2, [sp, #24]
    e2be:	585f      	ldr	r7, [r3, r1]
    e2c0:	495b      	ldr	r1, [pc, #364]	; (e430 <am_hal_gpio_fast_pinconfig+0x364>)
    e2c2:	403c      	ands	r4, r7
    e2c4:	4314      	orrs	r4, r2
    GPIO->PADKEY = 0;
    e2c6:	2500      	movs	r5, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    e2c8:	505c      	str	r4, [r3, r1]
    GPIO->PADKEY = 0;
    e2ca:	6605      	str	r5, [r0, #96]	; 0x60
    AM_CRITICAL_END
    e2cc:	980d      	ldr	r0, [sp, #52]	; 0x34
    e2ce:	f000 f905 	bl	e4dc <am_hal_interrupt_master_set>
            am_hal_gpio_fastgpio_enable(ui32pinnum);
    e2d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
            ui32Mask |= 1 << (ui32pinnum & 0x7);
    e2d4:	9901      	ldr	r1, [sp, #4]
            am_hal_gpio_fastgpio_enable(ui32pinnum);
    e2d6:	4a57      	ldr	r2, [pc, #348]	; (e434 <am_hal_gpio_fast_pinconfig+0x368>)
    e2d8:	9d04      	ldr	r5, [sp, #16]
            ui32Mask |= 1 << (ui32pinnum & 0x7);
    e2da:	f006 0707 	and.w	r7, r6, #7
    e2de:	2301      	movs	r3, #1
            am_hal_gpio_fastgpio_enable(ui32pinnum);
    e2e0:	f004 0001 	and.w	r0, r4, #1
            ui32Mask |= 1 << (ui32pinnum & 0x7);
    e2e4:	40bb      	lsls	r3, r7
            if ( ui32Masks )
    e2e6:	9c03      	ldr	r4, [sp, #12]
            am_hal_gpio_fastgpio_enable(ui32pinnum);
    e2e8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
            ui32Mask |= 1 << (ui32pinnum & 0x7);
    e2ec:	4319      	orrs	r1, r3
    e2ee:	9101      	str	r1, [sp, #4]
            if ( ui32Masks )
    e2f0:	b1e4      	cbz	r4, e32c <am_hal_gpio_fast_pinconfig+0x260>
    e2f2:	4625      	mov	r5, r4
                ui32Masks[ux + 1] = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, ui32Mask);
    e2f4:	9c02      	ldr	r4, [sp, #8]
    e2f6:	040b      	lsls	r3, r1, #16
    e2f8:	eb05 0084 	add.w	r0, r5, r4, lsl #2
                ui32Masks[ux + 0] = _VAL2FLD(APBDMA_BBSETCLEAR_SET,   ui32Mask);
    e2fc:	b2c9      	uxtb	r1, r1
    e2fe:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
                ui32Masks[ux + 1] = _VAL2FLD(APBDMA_BBSETCLEAR_CLEAR, ui32Mask);
    e302:	f403 077f 	and.w	r7, r3, #16711680	; 0xff0000
    e306:	1c65      	adds	r5, r4, #1
    e308:	6047      	str	r7, [r0, #4]
    e30a:	9502      	str	r5, [sp, #8]
    e30c:	e715      	b.n	e13a <am_hal_gpio_fast_pinconfig+0x6e>
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    e30e:	2901      	cmp	r1, #1
    e310:	d031      	beq.n	e376 <am_hal_gpio_fast_pinconfig+0x2aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    e312:	2902      	cmp	r1, #2
    e314:	d04c      	beq.n	e3b0 <am_hal_gpio_fast_pinconfig+0x2e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    e316:	4848      	ldr	r0, [pc, #288]	; (e438 <am_hal_gpio_fast_pinconfig+0x36c>)
    e318:	e6f9      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
         (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_TRISTATE) )
    e31a:	f3c2 2307 	ubfx	r3, r2, #8, #8
         (num_bits64(ui64PinMask) > 8)          ||
    e31e:	f003 000c 	and.w	r0, r3, #12
    e322:	280c      	cmp	r0, #12
    e324:	f43f aef2 	beq.w	e10c <am_hal_gpio_fast_pinconfig+0x40>
    return AM_HAL_STATUS_SUCCESS;
    e328:	2000      	movs	r0, #0
    e32a:	e6f0      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
    e32c:	9802      	ldr	r0, [sp, #8]
    e32e:	3001      	adds	r0, #1
    e330:	9002      	str	r0, [sp, #8]
    e332:	e702      	b.n	e13a <am_hal_gpio_fast_pinconfig+0x6e>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    e334:	2dc0      	cmp	r5, #192	; 0xc0
    e336:	d036      	beq.n	e3a6 <am_hal_gpio_fast_pinconfig+0x2da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    e338:	2d20      	cmp	r5, #32
    e33a:	f47f af2e 	bne.w	e19a <am_hal_gpio_fast_pinconfig+0xce>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    e33e:	f89a 4000 	ldrb.w	r4, [sl]
    e342:	f014 0f09 	tst.w	r4, #9
    e346:	f47f af23 	bne.w	e190 <am_hal_gpio_fast_pinconfig+0xc4>
    e34a:	e726      	b.n	e19a <am_hal_gpio_fast_pinconfig+0xce>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    e34c:	f006 051f 	and.w	r5, r6, #31
    e350:	2101      	movs	r1, #1
    e352:	0970      	lsrs	r0, r6, #5
    e354:	9009      	str	r0, [sp, #36]	; 0x24
    e356:	fa01 f005 	lsl.w	r0, r1, r5
    e35a:	9004      	str	r0, [sp, #16]
    e35c:	4937      	ldr	r1, [pc, #220]	; (e43c <am_hal_gpio_fast_pinconfig+0x370>)
    e35e:	9d04      	ldr	r5, [sp, #16]
    e360:	0970      	lsrs	r0, r6, #5
    e362:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    e366:	e794      	b.n	e292 <am_hal_gpio_fast_pinconfig+0x1c6>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    e368:	9f05      	ldr	r7, [sp, #20]
    e36a:	f3c7 4502 	ubfx	r5, r7, #16, #3
    e36e:	2d07      	cmp	r5, #7
    e370:	d125      	bne.n	e3be <am_hal_gpio_fast_pinconfig+0x2f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    e372:	4833      	ldr	r0, [pc, #204]	; (e440 <am_hal_gpio_fast_pinconfig+0x374>)
    e374:	e6cb      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    e376:	f89a 5000 	ldrb.w	r5, [sl]
    e37a:	07a8      	lsls	r0, r5, #30
    e37c:	d5cb      	bpl.n	e316 <am_hal_gpio_fast_pinconfig+0x24a>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    e37e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e382:	e710      	b.n	e1a6 <am_hal_gpio_fast_pinconfig+0xda>
            bClearEnable = true;
    e384:	2101      	movs	r1, #1
    e386:	9104      	str	r1, [sp, #16]
    e388:	e73d      	b.n	e206 <am_hal_gpio_fast_pinconfig+0x13a>
    e38a:	f005 0218 	and.w	r2, r5, #24
    e38e:	2301      	movs	r3, #1
    e390:	4093      	lsls	r3, r2
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    e392:	f04e 0e04 	orr.w	lr, lr, #4
    e396:	9306      	str	r3, [sp, #24]
    e398:	e750      	b.n	e23c <am_hal_gpio_fast_pinconfig+0x170>
    e39a:	f005 0218 	and.w	r2, r5, #24
    e39e:	2101      	movs	r1, #1
    e3a0:	4091      	lsls	r1, r2
    e3a2:	9106      	str	r1, [sp, #24]
    e3a4:	e74a      	b.n	e23c <am_hal_gpio_fast_pinconfig+0x170>
            if ( ui32Pin != 20 )
    e3a6:	2e14      	cmp	r6, #20
    e3a8:	f43f aef7 	beq.w	e19a <am_hal_gpio_fast_pinconfig+0xce>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    e3ac:	4825      	ldr	r0, [pc, #148]	; (e444 <am_hal_gpio_fast_pinconfig+0x378>)
    e3ae:	e6ae      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    e3b0:	f89a 4000 	ldrb.w	r4, [sl]
    e3b4:	0761      	lsls	r1, r4, #29
    e3b6:	d5ae      	bpl.n	e316 <am_hal_gpio_fast_pinconfig+0x24a>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    e3b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e3bc:	e6f3      	b.n	e1a6 <am_hal_gpio_fast_pinconfig+0xda>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    e3be:	f3c7 40c1 	ubfx	r0, r7, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    e3c2:	f89b c000 	ldrb.w	ip, [fp]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    e3c6:	ea40 1305 	orr.w	r3, r0, r5, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    e3ca:	459c      	cmp	ip, r3
    e3cc:	d00d      	beq.n	e3ea <am_hal_gpio_fast_pinconfig+0x31e>
    e3ce:	f89b 1001 	ldrb.w	r1, [fp, #1]
    e3d2:	4299      	cmp	r1, r3
    e3d4:	d017      	beq.n	e406 <am_hal_gpio_fast_pinconfig+0x33a>
    e3d6:	f89b 2002 	ldrb.w	r2, [fp, #2]
    e3da:	429a      	cmp	r2, r3
    e3dc:	d011      	beq.n	e402 <am_hal_gpio_fast_pinconfig+0x336>
    e3de:	f89b 4003 	ldrb.w	r4, [fp, #3]
    e3e2:	429c      	cmp	r4, r3
    e3e4:	d00b      	beq.n	e3fe <am_hal_gpio_fast_pinconfig+0x332>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    e3e6:	4818      	ldr	r0, [pc, #96]	; (e448 <am_hal_gpio_fast_pinconfig+0x37c>)
    e3e8:	e691      	b.n	e10e <am_hal_gpio_fast_pinconfig+0x42>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e3ea:	2700      	movs	r7, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e3ec:	9805      	ldr	r0, [sp, #20]
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    e3ee:	007d      	lsls	r5, r7, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e3f0:	f3c0 5340 	ubfx	r3, r0, #21, #1
    bool bClearEnable = false;
    e3f4:	2100      	movs	r1, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e3f6:	ea45 07c3 	orr.w	r7, r5, r3, lsl #3
    bool bClearEnable = false;
    e3fa:	9104      	str	r1, [sp, #16]
    e3fc:	e70b      	b.n	e216 <am_hal_gpio_fast_pinconfig+0x14a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e3fe:	2703      	movs	r7, #3
    e400:	e7f4      	b.n	e3ec <am_hal_gpio_fast_pinconfig+0x320>
    e402:	2702      	movs	r7, #2
    e404:	e7f2      	b.n	e3ec <am_hal_gpio_fast_pinconfig+0x320>
    e406:	2701      	movs	r7, #1
    e408:	e7f0      	b.n	e3ec <am_hal_gpio_fast_pinconfig+0x320>
    e40a:	bf00      	nop
    e40c:	0000ee74 	.word	0x0000ee74
    e410:	0000eedc 	.word	0x0000eedc
    e414:	08000100 	.word	0x08000100
    e418:	0000eea8 	.word	0x0000eea8
    e41c:	0000efa4 	.word	0x0000efa4
    e420:	0000ee68 	.word	0x0000ee68
    e424:	7ffffffc 	.word	0x7ffffffc
    e428:	40010000 	.word	0x40010000
    e42c:	40010040 	.word	0x40010040
    e430:	400100e0 	.word	0x400100e0
    e434:	400100a8 	.word	0x400100a8
    e438:	08000102 	.word	0x08000102
    e43c:	400100b4 	.word	0x400100b4
    e440:	08000103 	.word	0x08000103
    e444:	08000101 	.word	0x08000101
    e448:	08000104 	.word	0x08000104

0000e44c <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    e44c:	2831      	cmp	r0, #49	; 0x31
    e44e:	d901      	bls.n	e454 <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    e450:	2005      	movs	r0, #5
    e452:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    e454:	2905      	cmp	r1, #5
    e456:	d901      	bls.n	e45c <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    e458:	2006      	movs	r0, #6
    e45a:	4770      	bx	lr
{
    e45c:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e45e:	f000 031f 	and.w	r3, r0, #31
{
    e462:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e464:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e466:	2201      	movs	r2, #1
    e468:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e46a:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e46e:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    e472:	f000 f82f 	bl	e4d4 <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    e476:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    e478:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    e47a:	2904      	cmp	r1, #4
    e47c:	d817      	bhi.n	e4ae <am_hal_gpio_state_write+0x62>
    e47e:	e8df f001 	tbb	[pc, r1]
    e482:	0e13      	.short	0x0e13
    e484:	030b      	.short	0x030b
    e486:	19          	.byte	0x19
    e487:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    e488:	4d0d      	ldr	r5, [pc, #52]	; (e4c0 <am_hal_gpio_state_write+0x74>)
    e48a:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    e48c:	9801      	ldr	r0, [sp, #4]
    e48e:	f000 f825 	bl	e4dc <am_hal_interrupt_master_set>

    return ui32Return;
    e492:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    e494:	b002      	add	sp, #8
    e496:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    e498:	4b0a      	ldr	r3, [pc, #40]	; (e4c4 <am_hal_gpio_state_write+0x78>)
    e49a:	50e6      	str	r6, [r4, r3]
            break;
    e49c:	e7f6      	b.n	e48c <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    e49e:	480a      	ldr	r0, [pc, #40]	; (e4c8 <am_hal_gpio_state_write+0x7c>)
    e4a0:	5822      	ldr	r2, [r4, r0]
    e4a2:	4072      	eors	r2, r6
    e4a4:	5022      	str	r2, [r4, r0]
            break;
    e4a6:	e7f1      	b.n	e48c <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    e4a8:	4908      	ldr	r1, [pc, #32]	; (e4cc <am_hal_gpio_state_write+0x80>)
    e4aa:	5066      	str	r6, [r4, r1]
            break;
    e4ac:	e7ee      	b.n	e48c <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    e4ae:	4d08      	ldr	r5, [pc, #32]	; (e4d0 <am_hal_gpio_state_write+0x84>)
    e4b0:	5166      	str	r6, [r4, r5]
            break;
    e4b2:	e7eb      	b.n	e48c <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    e4b4:	4803      	ldr	r0, [pc, #12]	; (e4c4 <am_hal_gpio_state_write+0x78>)
    e4b6:	5823      	ldr	r3, [r4, r0]
    e4b8:	4073      	eors	r3, r6
    e4ba:	5023      	str	r3, [r4, r0]
            break;
    e4bc:	e7e6      	b.n	e48c <am_hal_gpio_state_write+0x40>
    e4be:	bf00      	nop
    e4c0:	400100a8 	.word	0x400100a8
    e4c4:	400100b4 	.word	0x400100b4
    e4c8:	40010088 	.word	0x40010088
    e4cc:	40010090 	.word	0x40010090
    e4d0:	40010098 	.word	0x40010098

0000e4d4 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e4d4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e4d8:	b672      	cpsid	i
    __asm("    bx lr");
    e4da:	4770      	bx	lr

0000e4dc <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e4dc:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e4e0:	4770      	bx	lr
    e4e2:	bf00      	nop

0000e4e4 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e4e4:	4a0b      	ldr	r2, [pc, #44]	; (e514 <am_hal_itm_enable+0x30>)
    e4e6:	68d3      	ldr	r3, [r2, #12]
    e4e8:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    e4ec:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e4ee:	68d1      	ldr	r1, [r2, #12]
    e4f0:	01cb      	lsls	r3, r1, #7
    e4f2:	d5fc      	bpl.n	e4ee <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    e4f4:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e4f8:	4b07      	ldr	r3, [pc, #28]	; (e518 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    e4fa:	4a08      	ldr	r2, [pc, #32]	; (e51c <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e4fc:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e500:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    e502:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e506:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e50a:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e50e:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    e512:	4770      	bx	lr
    e514:	e000edf0 	.word	0xe000edf0
    e518:	c5acce55 	.word	0xc5acce55
    e51c:	00150511 	.word	0x00150511

0000e520 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    e520:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    e522:	4b24      	ldr	r3, [pc, #144]	; (e5b4 <am_hal_itm_disable+0x94>)
    e524:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e528:	b9b0      	cbnz	r0, e558 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e52a:	4923      	ldr	r1, [pc, #140]	; (e5b8 <am_hal_itm_disable+0x98>)
    e52c:	68ca      	ldr	r2, [r1, #12]
    e52e:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e532:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e534:	68cb      	ldr	r3, [r1, #12]
    e536:	01da      	lsls	r2, r3, #7
    e538:	d5fc      	bpl.n	e534 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e53a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e53e:	481f      	ldr	r0, [pc, #124]	; (e5bc <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e540:	4a1f      	ldr	r2, [pc, #124]	; (e5c0 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e542:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e546:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e548:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e54c:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e550:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e554:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e558:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e55c:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e560:	021b      	lsls	r3, r3, #8
    e562:	d4fb      	bmi.n	e55c <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e564:	f240 20f7 	movw	r0, #759	; 0x2f7
    e568:	f7ff fb3e 	bl	dbe8 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e56c:	4813      	ldr	r0, [pc, #76]	; (e5bc <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e56e:	4915      	ldr	r1, [pc, #84]	; (e5c4 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e570:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e574:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e578:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e57a:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e57e:	f022 0401 	bic.w	r4, r2, #1
    e582:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e586:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e58a:	420b      	tst	r3, r1
    e58c:	d1fb      	bne.n	e586 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e58e:	3801      	subs	r0, #1
    e590:	d1f3      	bne.n	e57a <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e592:	4909      	ldr	r1, [pc, #36]	; (e5b8 <am_hal_itm_disable+0x98>)
    e594:	68ca      	ldr	r2, [r1, #12]
    e596:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e59a:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e59c:	68cb      	ldr	r3, [r1, #12]
    e59e:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e5a2:	d1fb      	bne.n	e59c <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e5a4:	4903      	ldr	r1, [pc, #12]	; (e5b4 <am_hal_itm_disable+0x94>)
    e5a6:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e5aa:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e5ae:	2a00      	cmp	r2, #0
    e5b0:	d1fb      	bne.n	e5aa <am_hal_itm_disable+0x8a>
}
    e5b2:	bd10      	pop	{r4, pc}
    e5b4:	40020000 	.word	0x40020000
    e5b8:	e000edf0 	.word	0xe000edf0
    e5bc:	c5acce55 	.word	0xc5acce55
    e5c0:	00150511 	.word	0x00150511
    e5c4:	00800001 	.word	0x00800001

0000e5c8 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    e5c8:	7803      	ldrb	r3, [r0, #0]
    e5ca:	b1b3      	cbz	r3, e5fa <am_hal_itm_print+0x32>
{
    e5cc:	b410      	push	{r4}
    e5ce:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    e5d0:	2400      	movs	r4, #0
    e5d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    e5d6:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    e5d8:	2900      	cmp	r1, #0
    e5da:	d1fa      	bne.n	e5d2 <am_hal_itm_print+0xa>
    e5dc:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    e5de:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    e5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    e5e6:	f8dc 3000 	ldr.w	r3, [ip]
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	d0fb      	beq.n	e5e6 <am_hal_itm_print+0x1e>
    while (ui32Length)
    e5ee:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    e5f0:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    e5f4:	d1f5      	bne.n	e5e2 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    e5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5fa:	4770      	bx	lr

0000e5fc <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e5fc:	b141      	cbz	r1, e610 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e5fe:	2801      	cmp	r0, #1
{
    e600:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e602:	d03a      	beq.n	e67a <am_hal_mcuctrl_info_get+0x7e>
    e604:	d322      	bcc.n	e64c <am_hal_mcuctrl_info_get+0x50>
    e606:	2802      	cmp	r0, #2
    e608:	d004      	beq.n	e614 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e60a:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e60c:	bcf0      	pop	{r4, r5, r6, r7}
    e60e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e610:	2006      	movs	r0, #6
    e612:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e614:	4a41      	ldr	r2, [pc, #260]	; (e71c <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e616:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e618:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e61c:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e61e:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e622:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e626:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e62a:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e62c:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e62e:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e630:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e634:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e636:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e63a:	4334      	orrs	r4, r6
    e63c:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e63e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e642:	4310      	orrs	r0, r2
    e644:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e646:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e648:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e64a:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e64c:	4c33      	ldr	r4, [pc, #204]	; (e71c <am_hal_mcuctrl_info_get+0x120>)
    e64e:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e650:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e654:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e658:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e65a:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e65c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e660:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e664:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e666:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e668:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e66c:	f004 0501 	and.w	r5, r4, #1
    e670:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e672:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e674:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e676:	bcf0      	pop	{r4, r5, r6, r7}
    e678:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e67a:	4a28      	ldr	r2, [pc, #160]	; (e71c <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e67c:	4c28      	ldr	r4, [pc, #160]	; (e720 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e67e:	6813      	ldr	r3, [r2, #0]
    e680:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e682:	6850      	ldr	r0, [r2, #4]
    e684:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e686:	6897      	ldr	r7, [r2, #8]
    e688:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e68a:	68d6      	ldr	r6, [r2, #12]
    e68c:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e68e:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e690:	4824      	ldr	r0, [pc, #144]	; (e724 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e692:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e694:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e698:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e69c:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e69e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e6a2:	4a21      	ldr	r2, [pc, #132]	; (e728 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e6a4:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e6a8:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e6aa:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e6ae:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e6b0:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e6b2:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e6b4:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e6b8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e6bc:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e6be:	f000 040f 	and.w	r4, r0, #15
    e6c2:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e6c6:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e6c8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e6cc:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e6d0:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e6d4:	f007 0c0f 	and.w	ip, r7, #15
    e6d8:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e6dc:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e6de:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e6e2:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e6e6:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e6ea:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e6ee:	433b      	orrs	r3, r7
    e6f0:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e6f2:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e6f6:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e6fa:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e6fe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e702:	b2e5      	uxtb	r5, r4
    e704:	042b      	lsls	r3, r5, #16
    e706:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e70a:	b2d6      	uxtb	r6, r2
    e70c:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e70e:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e710:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e714:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e716:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e718:	bcf0      	pop	{r4, r5, r6, r7}
    e71a:	4770      	bx	lr
    e71c:	40020000 	.word	0x40020000
    e720:	0000efd8 	.word	0x0000efd8
    e724:	0000f018 	.word	0x0000f018
    e728:	f0000f00 	.word	0xf0000f00

0000e72c <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e72c:	b570      	push	{r4, r5, r6, lr}
    e72e:	b082      	sub	sp, #8
    e730:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    e732:	f7ff fecf 	bl	e4d4 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e736:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e73a:	008c      	lsls	r4, r1, #2
    e73c:	4e0e      	ldr	r6, [pc, #56]	; (e778 <am_hal_pwrctrl_periph_enable+0x4c>)
    e73e:	4d0f      	ldr	r5, [pc, #60]	; (e77c <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    e740:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e742:	592a      	ldr	r2, [r5, r4]
    e744:	68b3      	ldr	r3, [r6, #8]
    e746:	4313      	orrs	r3, r2
    e748:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    e74a:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e74c:	442c      	add	r4, r5
    AM_CRITICAL_END
    e74e:	f7ff fec5 	bl	e4dc <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e752:	2077      	movs	r0, #119	; 0x77
    e754:	f7ff fa48 	bl	dbe8 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e758:	69b0      	ldr	r0, [r6, #24]
    e75a:	6864      	ldr	r4, [r4, #4]
    e75c:	4220      	tst	r0, r4
    e75e:	d103      	bne.n	e768 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e760:	2077      	movs	r0, #119	; 0x77
    e762:	f7ff fa41 	bl	dbe8 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e766:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    e768:	4903      	ldr	r1, [pc, #12]	; (e778 <am_hal_pwrctrl_periph_enable+0x4c>)
    e76a:	698d      	ldr	r5, [r1, #24]
    e76c:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    e76e:	bf0c      	ite	eq
    e770:	2001      	moveq	r0, #1
    e772:	2000      	movne	r0, #0
    e774:	b002      	add	sp, #8
    e776:	bd70      	pop	{r4, r5, r6, pc}
    e778:	40021000 	.word	0x40021000
    e77c:	0000f058 	.word	0x0000f058

0000e780 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e780:	b570      	push	{r4, r5, r6, lr}
    e782:	b082      	sub	sp, #8
    e784:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    e786:	f7ff fea5 	bl	e4d4 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e78a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e78e:	008c      	lsls	r4, r1, #2
    e790:	4e0f      	ldr	r6, [pc, #60]	; (e7d0 <am_hal_pwrctrl_periph_disable+0x50>)
    e792:	4d10      	ldr	r5, [pc, #64]	; (e7d4 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    e794:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e796:	68b3      	ldr	r3, [r6, #8]
    e798:	592a      	ldr	r2, [r5, r4]
    e79a:	ea23 0002 	bic.w	r0, r3, r2
    e79e:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    e7a0:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e7a2:	442c      	add	r4, r5
    AM_CRITICAL_END
    e7a4:	f7ff fe9a 	bl	e4dc <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e7a8:	2077      	movs	r0, #119	; 0x77
    e7aa:	f7ff fa1d 	bl	dbe8 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e7ae:	69b1      	ldr	r1, [r6, #24]
    e7b0:	6864      	ldr	r4, [r4, #4]
    e7b2:	4221      	tst	r1, r4
    e7b4:	d003      	beq.n	e7be <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e7b6:	2077      	movs	r0, #119	; 0x77
    e7b8:	f7ff fa16 	bl	dbe8 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e7bc:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e7be:	4d04      	ldr	r5, [pc, #16]	; (e7d0 <am_hal_pwrctrl_periph_disable+0x50>)
    e7c0:	69ae      	ldr	r6, [r5, #24]
    e7c2:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e7c4:	bf14      	ite	ne
    e7c6:	2001      	movne	r0, #1
    e7c8:	2000      	moveq	r0, #0
    e7ca:	b002      	add	sp, #8
    e7cc:	bd70      	pop	{r4, r5, r6, pc}
    e7ce:	bf00      	nop
    e7d0:	40021000 	.word	0x40021000
    e7d4:	0000f058 	.word	0x0000f058

0000e7d8 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e7d8:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e7da:	4c1b      	ldr	r4, [pc, #108]	; (e848 <am_hal_pwrctrl_low_power_init+0x70>)
    e7dc:	69a3      	ldr	r3, [r4, #24]
    e7de:	05db      	lsls	r3, r3, #23
{
    e7e0:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e7e2:	d502      	bpl.n	e7ea <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e7e4:	2000      	movs	r0, #0
}
    e7e6:	b003      	add	sp, #12
    e7e8:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e7ea:	4d18      	ldr	r5, [pc, #96]	; (e84c <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e7ec:	4918      	ldr	r1, [pc, #96]	; (e850 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e7ee:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e7f0:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e7f2:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e7f4:	461a      	mov	r2, r3
    e7f6:	9000      	str	r0, [sp, #0]
    e7f8:	f242 7010 	movw	r0, #10000	; 0x2710
    e7fc:	f7ff f9f8 	bl	dbf0 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e800:	b110      	cbz	r0, e808 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e802:	2004      	movs	r0, #4
}
    e804:	b003      	add	sp, #12
    e806:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e808:	6821      	ldr	r1, [r4, #0]
    e80a:	f041 0201 	orr.w	r2, r1, #1
    e80e:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e810:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e812:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e816:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e818:	68ec      	ldr	r4, [r5, #12]
    e81a:	b2e2      	uxtb	r2, r4
    e81c:	2a11      	cmp	r2, #17
    e81e:	d1e1      	bne.n	e7e4 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e820:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e824:	f360 5356 	bfi	r3, r0, #21, #2
    e828:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e82c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e830:	240f      	movs	r4, #15
    e832:	f364 118b 	bfi	r1, r4, #6, #6
    e836:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e83a:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e83e:	f364 0205 	bfi	r2, r4, #0, #6
    e842:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e846:	e7ce      	b.n	e7e6 <am_hal_pwrctrl_low_power_init+0xe>
    e848:	40021000 	.word	0x40021000
    e84c:	40020000 	.word	0x40020000
    e850:	40020018 	.word	0x40020018

0000e854 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e854:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e858:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e85a:	68d3      	ldr	r3, [r2, #12]
    e85c:	bf0c      	ite	eq
    e85e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e862:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e866:	60d3      	str	r3, [r2, #12]
    e868:	4770      	bx	lr
    e86a:	bf00      	nop

0000e86c <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e86c:	4a03      	ldr	r2, [pc, #12]	; (e87c <am_hal_rtc_osc_disable+0x10>)
    e86e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e872:	f043 0010 	orr.w	r0, r3, #16
    e876:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e87a:	4770      	bx	lr
    e87c:	40004200 	.word	0x40004200

0000e880 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    e880:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    e882:	4a24      	ldr	r2, [pc, #144]	; (e914 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    e884:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    e886:	2100      	movs	r1, #0
{
    e888:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    e88a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    e88e:	b33b      	cbz	r3, e8e0 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e890:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e892:	4921      	ldr	r1, [pc, #132]	; (e918 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e894:	4c21      	ldr	r4, [pc, #132]	; (e91c <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e896:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e898:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    e89c:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e89e:	458c      	cmp	ip, r1
    e8a0:	bf98      	it	ls
    e8a2:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    e8a4:	f7ff f982 	bl	dbac <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    e8a8:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    e8aa:	1c5a      	adds	r2, r3, #1
    e8ac:	d02f      	beq.n	e90e <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    e8ae:	08da      	lsrs	r2, r3, #3
    e8b0:	fbb2 fef4 	udiv	lr, r2, r4
    e8b4:	f10e 31ff 	add.w	r1, lr, #4294967295
    e8b8:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e8ba:	4a16      	ldr	r2, [pc, #88]	; (e914 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e8bc:	4918      	ldr	r1, [pc, #96]	; (e920 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e8be:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e8c0:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e8c4:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e8c6:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e8c8:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e8cc:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e8d0:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e8d4:	f240 20f7 	movw	r0, #759	; 0x2f7
    e8d8:	f7ff f986 	bl	dbe8 <am_hal_flash_delay>
}
    e8dc:	b004      	add	sp, #16
    e8de:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e8e0:	6904      	ldr	r4, [r0, #16]
    e8e2:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e8e4:	6883      	ldr	r3, [r0, #8]
    e8e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e8ea:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e8ec:	4c0c      	ldr	r4, [pc, #48]	; (e920 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e8ee:	3901      	subs	r1, #1
    e8f0:	2301      	movs	r3, #1
    e8f2:	408b      	lsls	r3, r1
    e8f4:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e8f6:	6840      	ldr	r0, [r0, #4]
    e8f8:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e8fc:	4302      	orrs	r2, r0
    e8fe:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e902:	f240 20f7 	movw	r0, #759	; 0x2f7
    e906:	f7ff f96f 	bl	dbe8 <am_hal_flash_delay>
}
    e90a:	b004      	add	sp, #16
    e90c:	bd10      	pop	{r4, pc}
    e90e:	2005      	movs	r0, #5
    e910:	e7d3      	b.n	e8ba <am_hal_tpiu_enable+0x3a>
    e912:	bf00      	nop
    e914:	e0040000 	.word	0xe0040000
    e918:	001da380 	.word	0x001da380
    e91c:	000f4240 	.word	0x000f4240
    e920:	40020000 	.word	0x40020000

0000e924 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e924:	b128      	cbz	r0, e932 <am_hal_uart_deinitialize+0xe>
    e926:	6803      	ldr	r3, [r0, #0]
    e928:	4a07      	ldr	r2, [pc, #28]	; (e948 <am_hal_uart_deinitialize+0x24>)
    e92a:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e92e:	4291      	cmp	r1, r2
    e930:	d001      	beq.n	e936 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e932:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    e934:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    e936:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    e938:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    e93a:	f36f 0200 	bfc	r2, #0, #1
    e93e:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    e940:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    e942:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    e944:	4618      	mov	r0, r3
    e946:	4770      	bx	lr
    e948:	01ea9e06 	.word	0x01ea9e06

0000e94c <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e950:	6804      	ldr	r4, [r0, #0]
    e952:	4b36      	ldr	r3, [pc, #216]	; (ea2c <am_hal_uart_power_control+0xe0>)
    e954:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e958:	429c      	cmp	r4, r3
{
    e95a:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e95c:	d003      	beq.n	e966 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e95e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e960:	b004      	add	sp, #16
    e962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e966:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e968:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e96a:	f107 0008 	add.w	r0, r7, #8
    e96e:	460e      	mov	r6, r1
    e970:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e974:	b181      	cbz	r1, e998 <am_hal_uart_power_control+0x4c>
    e976:	2902      	cmp	r1, #2
    e978:	d80c      	bhi.n	e994 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e97a:	b992      	cbnz	r2, e9a2 <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e97c:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e980:	341c      	adds	r4, #28
    e982:	0325      	lsls	r5, r4, #12
    e984:	f04f 31ff 	mov.w	r1, #4294967295
    e988:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e98a:	4640      	mov	r0, r8
    e98c:	f7ff fef8 	bl	e780 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e990:	2000      	movs	r0, #0
            break;
    e992:	e7e5      	b.n	e960 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e994:	2006      	movs	r0, #6
    e996:	e7e3      	b.n	e960 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e998:	b322      	cbz	r2, e9e4 <am_hal_uart_power_control+0x98>
    e99a:	792a      	ldrb	r2, [r5, #4]
    e99c:	bb42      	cbnz	r2, e9f0 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e99e:	2007      	movs	r0, #7
    e9a0:	e7de      	b.n	e960 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e9a2:	f7ff fd97 	bl	e4d4 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e9a6:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e9aa:	311c      	adds	r1, #28
    e9ac:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e9ae:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e9b0:	6a3a      	ldr	r2, [r7, #32]
    e9b2:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e9b6:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e9b8:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e9ba:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e9be:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e9c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e9c2:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e9c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e9c6:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e9c8:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e9ca:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e9cc:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e9ce:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e9d0:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e9d2:	f7ff fd83 	bl	e4dc <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e9d6:	682e      	ldr	r6, [r5, #0]
    e9d8:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e9dc:	42a0      	cmp	r0, r4
    e9de:	d1d4      	bne.n	e98a <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e9e0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e9e2:	e7cb      	b.n	e97c <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e9e4:	4640      	mov	r0, r8
    e9e6:	9201      	str	r2, [sp, #4]
    e9e8:	f7ff fea0 	bl	e72c <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e9ec:	9801      	ldr	r0, [sp, #4]
    e9ee:	e7b7      	b.n	e960 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e9f0:	4640      	mov	r0, r8
    e9f2:	f7ff fe9b 	bl	e72c <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e9f6:	f7ff fd6d 	bl	e4d4 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e9fa:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e9fe:	331c      	adds	r3, #28
    ea00:	031f      	lsls	r7, r3, #12
    ea02:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    ea04:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    ea06:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    ea08:	68e9      	ldr	r1, [r5, #12]
    ea0a:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    ea0c:	6928      	ldr	r0, [r5, #16]
    ea0e:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    ea10:	696a      	ldr	r2, [r5, #20]
    ea12:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    ea14:	69ab      	ldr	r3, [r5, #24]
    ea16:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    ea18:	69ec      	ldr	r4, [r5, #28]
    ea1a:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    ea1c:	6a29      	ldr	r1, [r5, #32]
    ea1e:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    ea20:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    ea22:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    ea24:	f7ff fd5a 	bl	e4dc <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    ea28:	4630      	mov	r0, r6
    ea2a:	e799      	b.n	e960 <am_hal_uart_power_control+0x14>
    ea2c:	01ea9e06 	.word	0x01ea9e06

0000ea30 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    ea30:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    ea34:	b570      	push	{r4, r5, r6, lr}
    ea36:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    ea38:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    ea3a:	b183      	cbz	r3, ea5e <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    ea3c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ea3e:	b170      	cbz	r0, ea5e <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    ea40:	4e13      	ldr	r6, [pc, #76]	; (ea90 <am_hal_uart_tx_flush+0x60>)
    ea42:	6e21      	ldr	r1, [r4, #96]	; 0x60
    ea44:	fbb6 f2f1 	udiv	r2, r6, r1
    ea48:	2a02      	cmp	r2, #2
    ea4a:	ea4f 1002 	mov.w	r0, r2, lsl #4
    ea4e:	bf8c      	ite	hi
    ea50:	3829      	subhi	r0, #41	; 0x29
    ea52:	2001      	movls	r0, #1
    ea54:	f7ff f8c8 	bl	dbe8 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    ea58:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d1f1      	bne.n	ea42 <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ea5e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea62:	351c      	adds	r5, #28
    ea64:	032d      	lsls	r5, r5, #12
    ea66:	69a8      	ldr	r0, [r5, #24]
    ea68:	0702      	lsls	r2, r0, #28
    ea6a:	d50e      	bpl.n	ea8a <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    ea6c:	4e08      	ldr	r6, [pc, #32]	; (ea90 <am_hal_uart_tx_flush+0x60>)
    ea6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    ea70:	fbb6 f2f1 	udiv	r2, r6, r1
    ea74:	2a02      	cmp	r2, #2
    ea76:	ea4f 1002 	mov.w	r0, r2, lsl #4
    ea7a:	bf8c      	ite	hi
    ea7c:	3829      	subhi	r0, #41	; 0x29
    ea7e:	2001      	movls	r0, #1
    ea80:	f7ff f8b2 	bl	dbe8 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ea84:	69ab      	ldr	r3, [r5, #24]
    ea86:	071b      	lsls	r3, r3, #28
    ea88:	d4f1      	bmi.n	ea6e <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    ea8a:	2000      	movs	r0, #0
    ea8c:	bd70      	pop	{r4, r5, r6, pc}
    ea8e:	bf00      	nop
    ea90:	00b71b00 	.word	0x00b71b00

0000ea94 <memcpy>:
    ea94:	b510      	push	{r4, lr}
    ea96:	1e43      	subs	r3, r0, #1
    ea98:	440a      	add	r2, r1
    ea9a:	4291      	cmp	r1, r2
    ea9c:	d100      	bne.n	eaa0 <memcpy+0xc>
    ea9e:	bd10      	pop	{r4, pc}
    eaa0:	f811 4b01 	ldrb.w	r4, [r1], #1
    eaa4:	f803 4f01 	strb.w	r4, [r3, #1]!
    eaa8:	e7f7      	b.n	ea9a <memcpy+0x6>
    eaaa:	0000      	movs	r0, r0
    eaac:	00000000 	.word	0x00000000
    eab0:	00000064 	.word	0x00000064
    eab4:	00000001 	.word	0x00000001
    eab8:	00000064 	.word	0x00000064
    eabc:	00000000 	.word	0x00000000
    eac0:	00000064 	.word	0x00000064
    eac4:	00000001 	.word	0x00000001
    eac8:	00000064 	.word	0x00000064
    eacc:	00000000 	.word	0x00000000
    ead0:	00000064 	.word	0x00000064
    ead4:	00000001 	.word	0x00000001
    ead8:	00000064 	.word	0x00000064
    eadc:	00000000 	.word	0x00000000
    eae0:	00000064 	.word	0x00000064
    eae4:	00000001 	.word	0x00000001
    eae8:	00000064 	.word	0x00000064
    eaec:	00000000 	.word	0x00000000
    eaf0:	00000064 	.word	0x00000064
    eaf4:	00000001 	.word	0x00000001
    eaf8:	00000064 	.word	0x00000064
    eafc:	00000000 	.word	0x00000000
    eb00:	00000064 	.word	0x00000064
    eb04:	00000001 	.word	0x00000001
    eb08:	00000064 	.word	0x00000064
    eb0c:	00000000 	.word	0x00000000
    eb10:	00000064 	.word	0x00000064
    eb14:	00000001 	.word	0x00000001
    eb18:	00000064 	.word	0x00000064
    eb1c:	00000000 	.word	0x00000000
    eb20:	00000064 	.word	0x00000064
    eb24:	00000001 	.word	0x00000001
    eb28:	00000064 	.word	0x00000064
    eb2c:	00000000 	.word	0x00000000
    eb30:	00000064 	.word	0x00000064
    eb34:	00000001 	.word	0x00000001
    eb38:	00000064 	.word	0x00000064
    eb3c:	00000000 	.word	0x00000000
    eb40:	00000064 	.word	0x00000064
    eb44:	00000001 	.word	0x00000001
    eb48:	00000064 	.word	0x00000064
    eb4c:	00000000 	.word	0x00000000
    eb50:	000000c8 	.word	0x000000c8
    eb54:	00000001 	.word	0x00000001
    eb58:	000000c8 	.word	0x000000c8
    eb5c:	00000002 	.word	0x00000002
    eb60:	000000c8 	.word	0x000000c8
    eb64:	00000004 	.word	0x00000004
    eb68:	000000c8 	.word	0x000000c8
    eb6c:	00000008 	.word	0x00000008
    eb70:	000000c8 	.word	0x000000c8
    eb74:	00000008 	.word	0x00000008
    eb78:	000000c8 	.word	0x000000c8
    eb7c:	00000004 	.word	0x00000004
    eb80:	000000c8 	.word	0x000000c8
    eb84:	00000002 	.word	0x00000002
    eb88:	000000c8 	.word	0x000000c8
    eb8c:	00000001 	.word	0x00000001
    eb90:	000000c8 	.word	0x000000c8
    eb94:	a5000001 	.word	0xa5000001
    eb98:	a5a5a5a5 	.word	0xa5a5a5a5
    eb9c:	0000000f 	.word	0x0000000f
    eba0:	0000012c 	.word	0x0000012c
    eba4:	00000000 	.word	0x00000000
    eba8:	0000012c 	.word	0x0000012c
    ebac:	0000000f 	.word	0x0000000f
    ebb0:	0000012c 	.word	0x0000012c
    ebb4:	00000000 	.word	0x00000000
    ebb8:	0000012c 	.word	0x0000012c
    ebbc:	0000000f 	.word	0x0000000f
    ebc0:	0000012c 	.word	0x0000012c
    ebc4:	00000000 	.word	0x00000000
    ebc8:	0000012c 	.word	0x0000012c
    ebcc:	ffffffff 	.word	0xffffffff
    ebd0:	ffffffff 	.word	0xffffffff
    ebd4:	74736146 	.word	0x74736146
    ebd8:	49504720 	.word	0x49504720
    ebdc:	7845204f 	.word	0x7845204f
    ebe0:	6c706d61 	.word	0x6c706d61
    ebe4:	00000a65 	.word	0x00000a65
    ebe8:	6e656857 	.word	0x6e656857
    ebec:	6e757220 	.word	0x6e757220
    ebf0:	206e6f20 	.word	0x206e6f20
    ebf4:	41206e61 	.word	0x41206e61
    ebf8:	6c6c6f70 	.word	0x6c6c6f70
    ebfc:	4520336f 	.word	0x4520336f
    ec00:	0a3a4256 	.word	0x0a3a4256
    ec04:	00000000 	.word	0x00000000
    ec08:	41202d20 	.word	0x41202d20
    ec0c:	327e206e 	.word	0x327e206e
    ec10:	7a484d34 	.word	0x7a484d34
    ec14:	76617720 	.word	0x76617720
    ec18:	726f6665 	.word	0x726f6665
    ec1c:	6128206d 	.word	0x6128206d
    ec20:	72657466 	.word	0x72657466
    ec24:	736e6920 	.word	0x736e6920
    ec28:	63757274 	.word	0x63757274
    ec2c:	6e6f6974 	.word	0x6e6f6974
    ec30:	61682073 	.word	0x61682073
    ec34:	63206576 	.word	0x63206576
    ec38:	65686361 	.word	0x65686361
    ec3c:	69202964 	.word	0x69202964
    ec40:	756f2073 	.word	0x756f2073
    ec44:	74757074 	.word	0x74757074
    ec48:	206e6f20 	.word	0x206e6f20
    ec4c:	206e6950 	.word	0x206e6950
    ec50:	0a2e6425 	.word	0x0a2e6425
    ec54:	00000000 	.word	0x00000000
    ec58:	54202d20 	.word	0x54202d20
    ec5c:	206e6568 	.word	0x206e6568
    ec60:	20656874 	.word	0x20656874
    ec64:	6c6f7041 	.word	0x6c6f7041
    ec68:	20336f6c 	.word	0x20336f6c
    ec6c:	20425645 	.word	0x20425645
    ec70:	7344454c 	.word	0x7344454c
    ec74:	73696420 	.word	0x73696420
    ec78:	79616c70 	.word	0x79616c70
    ec7c:	73206120 	.word	0x73206120
    ec80:	74726f68 	.word	0x74726f68
    ec84:	74617020 	.word	0x74617020
    ec88:	6e726574 	.word	0x6e726574
    ec8c:	00000a2e 	.word	0x00000a2e
    ec90:	4c202d20 	.word	0x4c202d20
    ec94:	3d304445 	.word	0x3d304445
    ec98:	206e6970 	.word	0x206e6970
    ec9c:	202c6425 	.word	0x202c6425
    eca0:	3144454c 	.word	0x3144454c
    eca4:	2c64253d 	.word	0x2c64253d
    eca8:	44454c20 	.word	0x44454c20
    ecac:	64253d32 	.word	0x64253d32
    ecb0:	454c202c 	.word	0x454c202c
    ecb4:	253d3344 	.word	0x253d3344
    ecb8:	4c202c64 	.word	0x4c202c64
    ecbc:	3d344445 	.word	0x3d344445
    ecc0:	0a2e6425 	.word	0x0a2e6425
    ecc4:	00000000 	.word	0x00000000
    ecc8:	4e202d20 	.word	0x4e202d20
    eccc:	2065746f 	.word	0x2065746f
    ecd0:	74616874 	.word	0x74616874
    ecd4:	44454c20 	.word	0x44454c20
    ecd8:	6e612031 	.word	0x6e612031
    ecdc:	454c2064 	.word	0x454c2064
    ece0:	6f203344 	.word	0x6f203344
    ece4:	68742066 	.word	0x68742066
    ece8:	56452065 	.word	0x56452065
    ecec:	72612042 	.word	0x72612042
    ecf0:	6f6c2065 	.word	0x6f6c2065
    ecf4:	65746163 	.word	0x65746163
    ecf8:	6e6f2064 	.word	0x6e6f2064
    ecfc:	65687420 	.word	0x65687420
    ed00:	6d617320 	.word	0x6d617320
    ed04:	61462065 	.word	0x61462065
    ed08:	47207473 	.word	0x47207473
    ed0c:	204f4950 	.word	0x204f4950
    ed10:	20776f72 	.word	0x20776f72
    ed14:	20642528 	.word	0x20642528
    ed18:	20646e61 	.word	0x20646e61
    ed1c:	2e296425 	.word	0x2e296425
    ed20:	0000000a 	.word	0x0000000a
    ed24:	42202020 	.word	0x42202020
    ed28:	75616365 	.word	0x75616365
    ed2c:	6f206573 	.word	0x6f206573
    ed30:	68742066 	.word	0x68742066
    ed34:	202c7461 	.word	0x202c7461
    ed38:	3344454c 	.word	0x3344454c
    ed3c:	20736920 	.word	0x20736920
    ed40:	61736964 	.word	0x61736964
    ed44:	64656c62 	.word	0x64656c62
    ed48:	72756420 	.word	0x72756420
    ed4c:	20676e69 	.word	0x20676e69
    ed50:	20656874 	.word	0x20656874
    ed54:	6b6c6177 	.word	0x6b6c6177
    ed58:	71657320 	.word	0x71657320
    ed5c:	636e6575 	.word	0x636e6575
    ed60:	6e612065 	.word	0x6e612065
    ed64:	73692064 	.word	0x73692064
    ed68:	75687420 	.word	0x75687420
    ed6c:	6b732073 	.word	0x6b732073
    ed70:	65707069 	.word	0x65707069
    ed74:	6e692064 	.word	0x6e692064
    ed78:	65687420 	.word	0x65687420
    ed7c:	0000000a 	.word	0x0000000a
    ed80:	73202020 	.word	0x73202020
    ed84:	65757165 	.word	0x65757165
    ed88:	2e65636e 	.word	0x2e65636e
    ed8c:	65685420 	.word	0x65685420
    ed90:	7469206e 	.word	0x7469206e
    ed94:	20736920 	.word	0x20736920
    ed98:	62616e65 	.word	0x62616e65
    ed9c:	2064656c 	.word	0x2064656c
    eda0:	69727564 	.word	0x69727564
    eda4:	7420676e 	.word	0x7420676e
    eda8:	61206568 	.word	0x61206568
    edac:	622d6c6c 	.word	0x622d6c6c
    edb0:	6b6e696c 	.word	0x6b6e696c
    edb4:	646e6120 	.word	0x646e6120
    edb8:	696c6220 	.word	0x696c6220
    edbc:	20736b6e 	.word	0x20736b6e
    edc0:	6e6f6c61 	.word	0x6e6f6c61
    edc4:	69772067 	.word	0x69772067
    edc8:	4c206874 	.word	0x4c206874
    edcc:	2e314445 	.word	0x2e314445
    edd0:	0000000a 	.word	0x0000000a
    edd4:	6f727245 	.word	0x6f727245
    edd8:	65722072 	.word	0x65722072
    eddc:	6e727574 	.word	0x6e727574
    ede0:	66206465 	.word	0x66206465
    ede4:	206d6f72 	.word	0x206d6f72
    ede8:	685f6d61 	.word	0x685f6d61
    edec:	675f6c61 	.word	0x675f6c61
    edf0:	5f6f6970 	.word	0x5f6f6970
    edf4:	74736166 	.word	0x74736166
    edf8:	6e69705f 	.word	0x6e69705f
    edfc:	666e6f63 	.word	0x666e6f63
    ee00:	29286769 	.word	0x29286769
    ee04:	2e203d20 	.word	0x2e203d20
    ee08:	0000000a 	.word	0x0000000a
    ee0c:	6f727245 	.word	0x6f727245
    ee10:	65722072 	.word	0x65722072
    ee14:	6e727574 	.word	0x6e727574
    ee18:	66206465 	.word	0x66206465
    ee1c:	206d6f72 	.word	0x206d6f72
    ee20:	2044454c 	.word	0x2044454c
    ee24:	685f6d61 	.word	0x685f6d61
    ee28:	675f6c61 	.word	0x675f6c61
    ee2c:	5f6f6970 	.word	0x5f6f6970
    ee30:	74736166 	.word	0x74736166
    ee34:	6e69705f 	.word	0x6e69705f
    ee38:	666e6f63 	.word	0x666e6f63
    ee3c:	29286769 	.word	0x29286769
    ee40:	30203d20 	.word	0x30203d20
    ee44:	2e582578 	.word	0x2e582578
    ee48:	0000000a 	.word	0x0000000a
    ee4c:	0a0a0a0a 	.word	0x0a0a0a0a
    ee50:	0a0a0a0a 	.word	0x0a0a0a0a
    ee54:	0a0a0a0a 	.word	0x0a0a0a0a
    ee58:	0a0a0a0a 	.word	0x0a0a0a0a
    ee5c:	00000a0a 	.word	0x00000a0a

0000ee60 <g_AM_BSP_GPIO_ITM_SWO>:
    ee60:	00000002                                ....

0000ee64 <am_hal_cachectrl_defaults>:
    ee64:	00000308                                ....

0000ee68 <g_AM_HAL_GPIO_DISABLE>:
    ee68:	00000003                                ....

0000ee6c <g_AM_HAL_GPIO_OUTPUT>:
    ee6c:	00000403                                ....

0000ee70 <g_AM_HAL_GPIO_OUTPUT_12>:
    ee70:	00000703                                ....

0000ee74 <g_ui8Bit76Capabilities>:
    ee74:	02800101 80010180 80800101 80808080     ................
    ee84:	80808080 80808008 01800180 80808080     ................
    ee94:	80808080 01800402 01010401 80808080     ................
    eea4:	00000101                                ....

0000eea8 <g_ui8Inpen>:
    eea8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    eeb8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    eec8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    eed8:	00003130                                01..

0000eedc <g_ui8NCEtable>:
    eedc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    eeec:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    eefc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ef0c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ef1c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ef2c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ef3c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ef4c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ef5c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ef6c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ef7c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ef8c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ef9c:	32221202 43231303                       .."2..#C

0000efa4 <g_ui8nCEpins>:
    efa4:	02070707 00080802 01020202 01010101     ................
    efb4:	01010101 01010101 01010101 01010101     ................
    efc4:	01010101 08010101 01010008 01010101     ................
    efd4:	00000101                                ....

0000efd8 <g_am_hal_mcuctrl_flash_size>:
    efd8:	00004000 00008000 00010000 00020000     .@..............
    efe8:	00040000 00080000 00100000 00200000     .............. .
	...

0000f018 <g_am_hal_mcuctrl_sram_size>:
    f018:	00004000 00008000 00010000 00020000     .@..............
    f028:	00040000 00080000 00100000 00060000     ................
	...

0000f058 <am_hal_pwrctrl_peripheral_control>:
	...
    f064:	00000001 00000004 00000004 00000002     ................
    f074:	00000008 00000008 00000004 00000008     ................
    f084:	00000008 00000008 00000008 00000008     ................
    f094:	00000010 00000010 00000010 00000020     ............ ...
    f0a4:	00000010 00000010 00000040 00000010     ........@.......
    f0b4:	00000010 00000080 00000004 00000004     ................
    f0c4:	00000100 00000004 00000004 00000200     ................
    f0d4:	00000020 00000020 00000400 00000004      ... ...........
    f0e4:	00000004 00000800 00000040 00000040     ........@...@...
    f0f4:	00001000 00000080 00000080 00002000     ............. ..
    f104:	00000100 00000100                       ........
