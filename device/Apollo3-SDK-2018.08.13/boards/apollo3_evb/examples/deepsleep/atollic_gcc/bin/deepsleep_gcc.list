
deepsleep_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031dc  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000f1dc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001d8  10001028  0000f204  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0001d346  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e22  00000000  00000000  0002e3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000678  00000000  00000000  000311c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001438  00000000  00000000  0003183f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000059f5  00000000  00000000  00032c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a0c3  00000000  00000000  0003866c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004272f  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000012b4  00000000  00000000  000427ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006d0f  00000000  00000000  00043a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 fd c1 00 00 65 c2 00 00 71 c2 00 00     ........e...q...
    c010:	71 c2 00 00 71 c2 00 00 71 c2 00 00 00 00 00 00     q...q...q.......
	...
    c02c:	6b c2 00 00 6b c2 00 00 00 00 00 00 6b c2 00 00     k...k.......k...
    c03c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c04c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c05c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c06c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c07c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c08c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c09c:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c0ac:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c0bc:	6b c2 00 00 6b c2 00 00 6b c2 00 00 6b c2 00 00     k...k...k...k...
    c0cc:	6b c2 00 00                                         k...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a4:	2100      	movs	r1, #0
    c1a6:	2000      	movs	r0, #0
    c1a8:	f001 f866 	bl	d278 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	4810      	ldr	r0, [pc, #64]	; (c1f0 <main+0x50>)
    c1ae:	f001 f82f 	bl	d210 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b2:	f001 f857 	bl	d264 <am_hal_cachectrl_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_bsp_uart_printf_enable();
    c1b6:	f000 ffdd 	bl	d174 <am_bsp_uart_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1ba:	f000 ff7b 	bl	d0b4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Example\n");
    c1be:	480d      	ldr	r0, [pc, #52]	; (c1f4 <main+0x54>)
    c1c0:	f000 ff5a 	bl	d078 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    am_bsp_uart_printf_disable();
    c1c4:	f001 f804 	bl	d1d0 <am_bsp_uart_printf_disable>

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    c1c8:	f000 ffa2 	bl	d110 <am_bsp_low_power_init>

#ifdef AM_PART_APOLLO3
    //
    // Turn OFF Flash1
    //
    if ( am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K) )
    c1cc:	200e      	movs	r0, #14
    c1ce:	f001 fcaf 	bl	db30 <am_hal_pwrctrl_memory_enable>
    c1d2:	4603      	mov	r3, r0
    c1d4:	2b00      	cmp	r3, #0
    c1d6:	d000      	beq.n	c1da <main+0x3a>
    {
        while(1);
    c1d8:	e7fe      	b.n	c1d8 <main+0x38>

    //
    // Power down SRAM
    //
#if AM_CMSIS_REGS
    PWRCTRL->MEMPWDINSLEEP_b.SRAMPWDSLP = PWRCTRL_MEMPWDINSLEEP_SRAMPWDSLP_ALLBUTLOWER32K;
    c1da:	4a07      	ldr	r2, [pc, #28]	; (c1f8 <main+0x58>)
    c1dc:	68d3      	ldr	r3, [r2, #12]
    c1de:	f240 31fe 	movw	r1, #1022	; 0x3fe
    c1e2:	f361 03cc 	bfi	r3, r1, #3, #10
    c1e6:	60d3      	str	r3, [r2, #12]
    while (1)
    {
        //
        // Go to Deep Sleep and stay there.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c1e8:	2001      	movs	r0, #1
    c1ea:	f001 fd3d 	bl	dc68 <am_hal_sysctrl_sleep>
    c1ee:	e7fb      	b.n	c1e8 <main+0x48>
    c1f0:	0000edd0 	.word	0x0000edd0
    c1f4:	0000ed78 	.word	0x0000ed78
    c1f8:	40021000 	.word	0x40021000

0000c1fc <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c1fc:	4811      	ldr	r0, [pc, #68]	; (c244 <zero_loop+0x12>)
    c1fe:	4912      	ldr	r1, [pc, #72]	; (c248 <zero_loop+0x16>)
    c200:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c202:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c206:	4811      	ldr	r0, [pc, #68]	; (c24c <zero_loop+0x1a>)
    c208:	6801      	ldr	r1, [r0, #0]
    c20a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c20e:	6001      	str	r1, [r0, #0]
    c210:	f3bf 8f4f 	dsb	sy
    c214:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c218:	480d      	ldr	r0, [pc, #52]	; (c250 <zero_loop+0x1e>)
    c21a:	490e      	ldr	r1, [pc, #56]	; (c254 <zero_loop+0x22>)
    c21c:	4a0e      	ldr	r2, [pc, #56]	; (c258 <zero_loop+0x26>)

0000c21e <copy_loop>:
    c21e:	f850 3b04 	ldr.w	r3, [r0], #4
    c222:	f841 3b04 	str.w	r3, [r1], #4
    c226:	4291      	cmp	r1, r2
    c228:	dbf9      	blt.n	c21e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c22a:	480c      	ldr	r0, [pc, #48]	; (c25c <zero_loop+0x2a>)
    c22c:	490c      	ldr	r1, [pc, #48]	; (c260 <zero_loop+0x2e>)
    c22e:	f04f 0200 	mov.w	r2, #0

0000c232 <zero_loop>:
    c232:	4288      	cmp	r0, r1
    c234:	bfb8      	it	lt
    c236:	f840 2b04 	strlt.w	r2, [r0], #4
    c23a:	dbfa      	blt.n	c232 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c23c:	f7ff ffb0 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c240:	be00      	bkpt	0x0000
}
    c242:	bf00      	nop
    c244:	e000ed08 	.word	0xe000ed08
    c248:	0000c000 	.word	0x0000c000
    c24c:	e000ed88 	.word	0xe000ed88
    c250:	0000f1dc 	.word	0x0000f1dc
    c254:	10001000 	.word	0x10001000
    c258:	10001028 	.word	0x10001028
    c25c:	10001028 	.word	0x10001028
    c260:	10001200 	.word	0x10001200

0000c264 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c264:	b480      	push	{r7}
    c266:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c268:	e7fe      	b.n	c268 <NMI_Handler+0x4>

0000c26a <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c26a:	b480      	push	{r7}
    c26c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c26e:	e7fe      	b.n	c26e <DebugMon_Handler+0x4>

0000c270 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c270:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c272:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c274:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c276:	f000 f809 	bl	c28c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c27a:	bd01      	pop	{r0, pc}
}
    c27c:	bf00      	nop
    c27e:	4618      	mov	r0, r3

0000c280 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c280:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c282:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c284:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c286:	4770      	bx	lr
}
    c288:	bf00      	nop
    c28a:	4618      	mov	r0, r3

0000c28c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c28c:	b580      	push	{r7, lr}
    c28e:	b096      	sub	sp, #88	; 0x58
    c290:	af00      	add	r7, sp, #0
    c292:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c294:	f107 030c 	add.w	r3, r7, #12
    c298:	2200      	movs	r2, #0
    c29a:	601a      	str	r2, [r3, #0]
    c29c:	605a      	str	r2, [r3, #4]
    c29e:	609a      	str	r2, [r3, #8]
    c2a0:	60da      	str	r2, [r3, #12]
    c2a2:	611a      	str	r2, [r3, #16]
    c2a4:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c2a6:	2300      	movs	r3, #0
    c2a8:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c2ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2ae:	4b2e      	ldr	r3, [pc, #184]	; (c368 <am_util_faultisr_collect_data+0xdc>)
    c2b0:	681b      	ldr	r3, [r3, #0]
    c2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c2b6:	b2db      	uxtb	r3, r3
    c2b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c2be:	0a1b      	lsrs	r3, r3, #8
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c2c8:	0c1b      	lsrs	r3, r3, #16
    c2ca:	b29b      	uxth	r3, r3
    c2cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2d0:	4b26      	ldr	r3, [pc, #152]	; (c36c <am_util_faultisr_collect_data+0xe0>)
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2d6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c2da:	b2db      	uxtb	r3, r3
    c2dc:	f003 0302 	and.w	r3, r3, #2
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d005      	beq.n	c2f0 <am_util_faultisr_collect_data+0x64>
    c2e4:	6879      	ldr	r1, [r7, #4]
    c2e6:	2006      	movs	r0, #6
    c2e8:	f7ff ffca 	bl	c280 <getStackedReg>
    c2ec:	4603      	mov	r3, r0
    c2ee:	e001      	b.n	c2f4 <am_util_faultisr_collect_data+0x68>
    c2f0:	f04f 33ff 	mov.w	r3, #4294967295
    c2f4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2f6:	6879      	ldr	r1, [r7, #4]
    c2f8:	2000      	movs	r0, #0
    c2fa:	f7ff ffc1 	bl	c280 <getStackedReg>
    c2fe:	4603      	mov	r3, r0
    c300:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c302:	6879      	ldr	r1, [r7, #4]
    c304:	2001      	movs	r0, #1
    c306:	f7ff ffbb 	bl	c280 <getStackedReg>
    c30a:	4603      	mov	r3, r0
    c30c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c30e:	6879      	ldr	r1, [r7, #4]
    c310:	2002      	movs	r0, #2
    c312:	f7ff ffb5 	bl	c280 <getStackedReg>
    c316:	4603      	mov	r3, r0
    c318:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c31a:	6879      	ldr	r1, [r7, #4]
    c31c:	2003      	movs	r0, #3
    c31e:	f7ff ffaf 	bl	c280 <getStackedReg>
    c322:	4603      	mov	r3, r0
    c324:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c326:	6879      	ldr	r1, [r7, #4]
    c328:	2004      	movs	r0, #4
    c32a:	f7ff ffa9 	bl	c280 <getStackedReg>
    c32e:	4603      	mov	r3, r0
    c330:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c332:	6879      	ldr	r1, [r7, #4]
    c334:	2005      	movs	r0, #5
    c336:	f7ff ffa3 	bl	c280 <getStackedReg>
    c33a:	4603      	mov	r3, r0
    c33c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c33e:	6879      	ldr	r1, [r7, #4]
    c340:	2006      	movs	r0, #6
    c342:	f7ff ff9d 	bl	c280 <getStackedReg>
    c346:	4603      	mov	r3, r0
    c348:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c34a:	6879      	ldr	r1, [r7, #4]
    c34c:	2007      	movs	r0, #7
    c34e:	f7ff ff97 	bl	c280 <getStackedReg>
    c352:	4603      	mov	r3, r0
    c354:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c356:	f107 030c 	add.w	r3, r7, #12
    c35a:	4619      	mov	r1, r3
    c35c:	2002      	movs	r0, #2
    c35e:	f001 faf9 	bl	d954 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c362:	2300      	movs	r3, #0
    c364:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c366:	e7fe      	b.n	c366 <am_util_faultisr_collect_data+0xda>
    c368:	e000ed28 	.word	0xe000ed28
    c36c:	e000ed38 	.word	0xe000ed38

0000c370 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c370:	b480      	push	{r7}
    c372:	b083      	sub	sp, #12
    c374:	af00      	add	r7, sp, #0
    c376:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c378:	4a04      	ldr	r2, [pc, #16]	; (c38c <am_util_stdio_printf_init+0x1c>)
    c37a:	687b      	ldr	r3, [r7, #4]
    c37c:	6013      	str	r3, [r2, #0]
}
    c37e:	bf00      	nop
    c380:	370c      	adds	r7, #12
    c382:	46bd      	mov	sp, r7
    c384:	f85d 7b04 	ldr.w	r7, [sp], #4
    c388:	4770      	bx	lr
    c38a:	bf00      	nop
    c38c:	10001134 	.word	0x10001134

0000c390 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c390:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c394:	b096      	sub	sp, #88	; 0x58
    c396:	af00      	add	r7, sp, #0
    c398:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c39c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c3a0:	0025      	movs	r5, r4
    c3a2:	2600      	movs	r6, #0
    c3a4:	ea55 0306 	orrs.w	r3, r5, r6
    c3a8:	f000 80a0 	beq.w	c4ec <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c3b0:	0862      	lsrs	r2, r4, #1
    c3b2:	ea4f 0133 	mov.w	r1, r3, rrx
    c3b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c3ba:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c3be:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c3c2:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c3c6:	eb11 0308 	adds.w	r3, r1, r8
    c3ca:	eb42 0409 	adc.w	r4, r2, r9
    c3ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c3d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c3d6:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c3da:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c3de:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c3e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c3e6:	eb13 030a 	adds.w	r3, r3, sl
    c3ea:	eb44 040b 	adc.w	r4, r4, fp
    c3ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c3f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c3f6:	0a1a      	lsrs	r2, r3, #8
    c3f8:	62ba      	str	r2, [r7, #40]	; 0x28
    c3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3fc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c400:	62ba      	str	r2, [r7, #40]	; 0x28
    c402:	0a23      	lsrs	r3, r4, #8
    c404:	62fb      	str	r3, [r7, #44]	; 0x2c
    c406:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c40a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c40e:	18c9      	adds	r1, r1, r3
    c410:	eb42 0204 	adc.w	r2, r2, r4
    c414:	460b      	mov	r3, r1
    c416:	4614      	mov	r4, r2
    c418:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c41c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c420:	0c1a      	lsrs	r2, r3, #16
    c422:	623a      	str	r2, [r7, #32]
    c424:	6a3a      	ldr	r2, [r7, #32]
    c426:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c42a:	623a      	str	r2, [r7, #32]
    c42c:	0c23      	lsrs	r3, r4, #16
    c42e:	627b      	str	r3, [r7, #36]	; 0x24
    c430:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c434:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c438:	18c9      	adds	r1, r1, r3
    c43a:	eb42 0204 	adc.w	r2, r2, r4
    c43e:	460b      	mov	r3, r1
    c440:	4614      	mov	r4, r2
    c442:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c446:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c44a:	0023      	movs	r3, r4
    c44c:	603b      	str	r3, [r7, #0]
    c44e:	2300      	movs	r3, #0
    c450:	607b      	str	r3, [r7, #4]
    c452:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c456:	e897 0006 	ldmia.w	r7, {r1, r2}
    c45a:	18c9      	adds	r1, r1, r3
    c45c:	eb42 0204 	adc.w	r2, r2, r4
    c460:	460b      	mov	r3, r1
    c462:	4614      	mov	r4, r2
    c464:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c468:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c46c:	08da      	lsrs	r2, r3, #3
    c46e:	613a      	str	r2, [r7, #16]
    c470:	693a      	ldr	r2, [r7, #16]
    c472:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c476:	613a      	str	r2, [r7, #16]
    c478:	08e3      	lsrs	r3, r4, #3
    c47a:	617b      	str	r3, [r7, #20]
    c47c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c480:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c484:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c488:	460b      	mov	r3, r1
    c48a:	4614      	mov	r4, r2
    c48c:	00a0      	lsls	r0, r4, #2
    c48e:	60f8      	str	r0, [r7, #12]
    c490:	68f8      	ldr	r0, [r7, #12]
    c492:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c496:	60f8      	str	r0, [r7, #12]
    c498:	009b      	lsls	r3, r3, #2
    c49a:	60bb      	str	r3, [r7, #8]
    c49c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c4a0:	185b      	adds	r3, r3, r1
    c4a2:	eb44 0402 	adc.w	r4, r4, r2
    c4a6:	18db      	adds	r3, r3, r3
    c4a8:	eb44 0404 	adc.w	r4, r4, r4
    c4ac:	4619      	mov	r1, r3
    c4ae:	4622      	mov	r2, r4
    c4b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c4b4:	1a5b      	subs	r3, r3, r1
    c4b6:	eb64 0402 	sbc.w	r4, r4, r2
    c4ba:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c4be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c4c2:	3306      	adds	r3, #6
    c4c4:	f144 0400 	adc.w	r4, r4, #0
    c4c8:	091a      	lsrs	r2, r3, #4
    c4ca:	61ba      	str	r2, [r7, #24]
    c4cc:	69ba      	ldr	r2, [r7, #24]
    c4ce:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c4d2:	61ba      	str	r2, [r7, #24]
    c4d4:	0923      	lsrs	r3, r4, #4
    c4d6:	61fb      	str	r3, [r7, #28]
    c4d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c4e0:	18c9      	adds	r1, r1, r3
    c4e2:	eb42 0204 	adc.w	r2, r2, r4
    c4e6:	460b      	mov	r3, r1
    c4e8:	4614      	mov	r4, r2
    c4ea:	e029      	b.n	c540 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4ee:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c4f2:	085a      	lsrs	r2, r3, #1
    c4f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c4f6:	089b      	lsrs	r3, r3, #2
    c4f8:	4413      	add	r3, r2
    c4fa:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4fe:	091b      	lsrs	r3, r3, #4
    c500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c502:	4413      	add	r3, r2
    c504:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c508:	0a1b      	lsrs	r3, r3, #8
    c50a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c50c:	4413      	add	r3, r2
    c50e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c512:	0c1b      	lsrs	r3, r3, #16
    c514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c516:	4413      	add	r3, r2
    c518:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c51c:	08db      	lsrs	r3, r3, #3
    c51e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c522:	4613      	mov	r3, r2
    c524:	009b      	lsls	r3, r3, #2
    c526:	4413      	add	r3, r2
    c528:	005b      	lsls	r3, r3, #1
    c52a:	461a      	mov	r2, r3
    c52c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c52e:	1a9b      	subs	r3, r3, r2
    c530:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c534:	3306      	adds	r3, #6
    c536:	091a      	lsrs	r2, r3, #4
    c538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c53a:	4413      	add	r3, r2
    c53c:	f04f 0400 	mov.w	r4, #0
    }
}
    c540:	4618      	mov	r0, r3
    c542:	4621      	mov	r1, r4
    c544:	3758      	adds	r7, #88	; 0x58
    c546:	46bd      	mov	sp, r7
    c548:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c54c:	4770      	bx	lr

0000c54e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c54e:	b590      	push	{r4, r7, lr}
    c550:	b085      	sub	sp, #20
    c552:	af00      	add	r7, sp, #0
    c554:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c558:	683a      	ldr	r2, [r7, #0]
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	4313      	orrs	r3, r2
    c55e:	2b00      	cmp	r3, #0
    c560:	bf0c      	ite	eq
    c562:	2301      	moveq	r3, #1
    c564:	2300      	movne	r3, #0
    c566:	b2db      	uxtb	r3, r3
    c568:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c56a:	e008      	b.n	c57e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c56c:	e9d7 0100 	ldrd	r0, r1, [r7]
    c570:	f7ff ff0e 	bl	c390 <divu64_10>
    c574:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c578:	68fb      	ldr	r3, [r7, #12]
    c57a:	3301      	adds	r3, #1
    c57c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c57e:	e897 0018 	ldmia.w	r7, {r3, r4}
    c582:	4323      	orrs	r3, r4
    c584:	d1f2      	bne.n	c56c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c586:	68fb      	ldr	r3, [r7, #12]
}
    c588:	4618      	mov	r0, r3
    c58a:	3714      	adds	r7, #20
    c58c:	46bd      	mov	sp, r7
    c58e:	bd90      	pop	{r4, r7, pc}

0000c590 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c590:	b590      	push	{r4, r7, lr}
    c592:	b083      	sub	sp, #12
    c594:	af00      	add	r7, sp, #0
    c596:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c59a:	e897 0018 	ldmia.w	r7, {r3, r4}
    c59e:	2b00      	cmp	r3, #0
    c5a0:	f174 0300 	sbcs.w	r3, r4, #0
    c5a4:	da06      	bge.n	c5b4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c5a6:	e897 0018 	ldmia.w	r7, {r3, r4}
    c5aa:	425b      	negs	r3, r3
    c5ac:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c5b0:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c5b4:	e897 0018 	ldmia.w	r7, {r3, r4}
    c5b8:	4618      	mov	r0, r3
    c5ba:	4621      	mov	r1, r4
    c5bc:	f7ff ffc7 	bl	c54e <ndigits_in_u64>
    c5c0:	4603      	mov	r3, r0
}
    c5c2:	4618      	mov	r0, r3
    c5c4:	370c      	adds	r7, #12
    c5c6:	46bd      	mov	sp, r7
    c5c8:	bd90      	pop	{r4, r7, pc}

0000c5ca <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c5ca:	b490      	push	{r4, r7}
    c5cc:	b084      	sub	sp, #16
    c5ce:	af00      	add	r7, sp, #0
    c5d0:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c5d4:	6839      	ldr	r1, [r7, #0]
    c5d6:	687a      	ldr	r2, [r7, #4]
    c5d8:	430a      	orrs	r2, r1
    c5da:	2a00      	cmp	r2, #0
    c5dc:	bf0c      	ite	eq
    c5de:	2201      	moveq	r2, #1
    c5e0:	2200      	movne	r2, #0
    c5e2:	b2d2      	uxtb	r2, r2
    c5e4:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c5e6:	e00a      	b.n	c5fe <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c5e8:	e897 0006 	ldmia.w	r7, {r1, r2}
    c5ec:	090b      	lsrs	r3, r1, #4
    c5ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c5f2:	0914      	lsrs	r4, r2, #4
    c5f4:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c5f8:	68fa      	ldr	r2, [r7, #12]
    c5fa:	3201      	adds	r2, #1
    c5fc:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c5fe:	e897 0006 	ldmia.w	r7, {r1, r2}
    c602:	430a      	orrs	r2, r1
    c604:	d1f0      	bne.n	c5e8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c606:	68fb      	ldr	r3, [r7, #12]
}
    c608:	4618      	mov	r0, r3
    c60a:	3710      	adds	r7, #16
    c60c:	46bd      	mov	sp, r7
    c60e:	bc90      	pop	{r4, r7}
    c610:	4770      	bx	lr

0000c612 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c612:	b480      	push	{r7}
    c614:	b087      	sub	sp, #28
    c616:	af00      	add	r7, sp, #0
    c618:	6078      	str	r0, [r7, #4]
    c61a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c61c:	2300      	movs	r3, #0
    c61e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c620:	2300      	movs	r3, #0
    c622:	613b      	str	r3, [r7, #16]
    c624:	2300      	movs	r3, #0
    c626:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c628:	687b      	ldr	r3, [r7, #4]
    c62a:	781b      	ldrb	r3, [r3, #0]
    c62c:	2b2d      	cmp	r3, #45	; 0x2d
    c62e:	d11b      	bne.n	c668 <decstr_to_int+0x56>
    {
        bNeg = true;
    c630:	2301      	movs	r3, #1
    c632:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	3301      	adds	r3, #1
    c638:	607b      	str	r3, [r7, #4]
        uCnt++;
    c63a:	68fb      	ldr	r3, [r7, #12]
    c63c:	3301      	adds	r3, #1
    c63e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c640:	e012      	b.n	c668 <decstr_to_int+0x56>
    {
        ++uCnt;
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	3301      	adds	r3, #1
    c646:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c648:	693a      	ldr	r2, [r7, #16]
    c64a:	4613      	mov	r3, r2
    c64c:	009b      	lsls	r3, r3, #2
    c64e:	4413      	add	r3, r2
    c650:	005b      	lsls	r3, r3, #1
    c652:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	461a      	mov	r2, r3
    c65a:	693b      	ldr	r3, [r7, #16]
    c65c:	4413      	add	r3, r2
    c65e:	3b30      	subs	r3, #48	; 0x30
    c660:	613b      	str	r3, [r7, #16]
        pcStr++;
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	3301      	adds	r3, #1
    c666:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c668:	687b      	ldr	r3, [r7, #4]
    c66a:	781b      	ldrb	r3, [r3, #0]
    c66c:	2b2f      	cmp	r3, #47	; 0x2f
    c66e:	d903      	bls.n	c678 <decstr_to_int+0x66>
    c670:	687b      	ldr	r3, [r7, #4]
    c672:	781b      	ldrb	r3, [r3, #0]
    c674:	2b39      	cmp	r3, #57	; 0x39
    c676:	d9e4      	bls.n	c642 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c678:	683b      	ldr	r3, [r7, #0]
    c67a:	2b00      	cmp	r3, #0
    c67c:	d002      	beq.n	c684 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c67e:	683b      	ldr	r3, [r7, #0]
    c680:	68fa      	ldr	r2, [r7, #12]
    c682:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c684:	7dfb      	ldrb	r3, [r7, #23]
    c686:	2b00      	cmp	r3, #0
    c688:	d002      	beq.n	c690 <decstr_to_int+0x7e>
    c68a:	693b      	ldr	r3, [r7, #16]
    c68c:	425b      	negs	r3, r3
    c68e:	e000      	b.n	c692 <decstr_to_int+0x80>
    c690:	693b      	ldr	r3, [r7, #16]
}
    c692:	4618      	mov	r0, r3
    c694:	371c      	adds	r7, #28
    c696:	46bd      	mov	sp, r7
    c698:	f85d 7b04 	ldr.w	r7, [sp], #4
    c69c:	4770      	bx	lr

0000c69e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c69e:	b590      	push	{r4, r7, lr}
    c6a0:	b091      	sub	sp, #68	; 0x44
    c6a2:	af00      	add	r7, sp, #0
    c6a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c6a8:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c6aa:	2300      	movs	r3, #0
    c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    c6ae:	2300      	movs	r3, #0
    c6b0:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c6b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c6b6:	f7ff fe6b 	bl	c390 <divu64_10>
    c6ba:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c6be:	68b9      	ldr	r1, [r7, #8]
    c6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c6c2:	4613      	mov	r3, r2
    c6c4:	009b      	lsls	r3, r3, #2
    c6c6:	4413      	add	r3, r2
    c6c8:	005b      	lsls	r3, r3, #1
    c6ca:	1acb      	subs	r3, r1, r3
    c6cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6d0:	1c5a      	adds	r2, r3, #1
    c6d2:	63fa      	str	r2, [r7, #60]	; 0x3c
    c6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c6d6:	b2d2      	uxtb	r2, r2
    c6d8:	3230      	adds	r2, #48	; 0x30
    c6da:	b2d2      	uxtb	r2, r2
    c6dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c6e0:	440b      	add	r3, r1
    c6e2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c6e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c6ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c6f2:	4323      	orrs	r3, r4
    c6f4:	d1dd      	bne.n	c6b2 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6f8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	d011      	beq.n	c724 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c700:	e008      	b.n	c714 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	1c5a      	adds	r2, r3, #1
    c706:	607a      	str	r2, [r7, #4]
    c708:	f107 0110 	add.w	r1, r7, #16
    c70c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c70e:	440a      	add	r2, r1
    c710:	7812      	ldrb	r2, [r2, #0]
    c712:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c716:	1e5a      	subs	r2, r3, #1
    c718:	63fa      	str	r2, [r7, #60]	; 0x3c
    c71a:	2b00      	cmp	r3, #0
    c71c:	d1f1      	bne.n	c702 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c71e:	687b      	ldr	r3, [r7, #4]
    c720:	2200      	movs	r2, #0
    c722:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c726:	4618      	mov	r0, r3
    c728:	3744      	adds	r7, #68	; 0x44
    c72a:	46bd      	mov	sp, r7
    c72c:	bd90      	pop	{r4, r7, pc}

0000c72e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c72e:	b4b0      	push	{r4, r5, r7}
    c730:	b08d      	sub	sp, #52	; 0x34
    c732:	af00      	add	r7, sp, #0
    c734:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c738:	607a      	str	r2, [r7, #4]
    c73a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c73c:	2300      	movs	r3, #0
    c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c744:	4313      	orrs	r3, r2
    c746:	d131      	bne.n	c7ac <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c74a:	1c5a      	adds	r2, r3, #1
    c74c:	62fa      	str	r2, [r7, #44]	; 0x2c
    c74e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c752:	4413      	add	r3, r2
    c754:	2230      	movs	r2, #48	; 0x30
    c756:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c75a:	e027      	b.n	c7ac <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c75c:	7a3b      	ldrb	r3, [r7, #8]
    c75e:	f003 030f 	and.w	r3, r3, #15
    c762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c76a:	2b09      	cmp	r3, #9
    c76c:	d90a      	bls.n	c784 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c76e:	78fb      	ldrb	r3, [r7, #3]
    c770:	2b00      	cmp	r3, #0
    c772:	d001      	beq.n	c778 <uint64_to_hexstr+0x4a>
    c774:	2227      	movs	r2, #39	; 0x27
    c776:	e000      	b.n	c77a <uint64_to_hexstr+0x4c>
    c778:	2207      	movs	r2, #7
    c77a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c77e:	4413      	add	r3, r2
    c780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c786:	1c5a      	adds	r2, r3, #1
    c788:	62fa      	str	r2, [r7, #44]	; 0x2c
    c78a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c78e:	3230      	adds	r2, #48	; 0x30
    c790:	b2d2      	uxtb	r2, r2
    c792:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c796:	440b      	add	r3, r1
    c798:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c79c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c7a0:	0914      	lsrs	r4, r2, #4
    c7a2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c7a6:	091d      	lsrs	r5, r3, #4
    c7a8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    c7ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c7b0:	4313      	orrs	r3, r2
    c7b2:	d1d3      	bne.n	c75c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7b6:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c7b8:	687b      	ldr	r3, [r7, #4]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d011      	beq.n	c7e2 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    c7be:	e008      	b.n	c7d2 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	1c5a      	adds	r2, r3, #1
    c7c4:	607a      	str	r2, [r7, #4]
    c7c6:	f107 0110 	add.w	r1, r7, #16
    c7ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c7cc:	440a      	add	r2, r1
    c7ce:	7812      	ldrb	r2, [r2, #0]
    c7d0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7d4:	1e5a      	subs	r2, r3, #1
    c7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d1f1      	bne.n	c7c0 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	2200      	movs	r2, #0
    c7e0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c7e4:	4618      	mov	r0, r3
    c7e6:	3734      	adds	r7, #52	; 0x34
    c7e8:	46bd      	mov	sp, r7
    c7ea:	bcb0      	pop	{r4, r5, r7}
    c7ec:	4770      	bx	lr

0000c7ee <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c7ee:	b480      	push	{r7}
    c7f0:	b085      	sub	sp, #20
    c7f2:	af00      	add	r7, sp, #0
    c7f4:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c7f6:	2300      	movs	r3, #0
    c7f8:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c7fa:	687b      	ldr	r3, [r7, #4]
    c7fc:	2b00      	cmp	r3, #0
    c7fe:	d104      	bne.n	c80a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c800:	68fb      	ldr	r3, [r7, #12]
    c802:	e009      	b.n	c818 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c804:	68fb      	ldr	r3, [r7, #12]
    c806:	3301      	adds	r3, #1
    c808:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	1c5a      	adds	r2, r3, #1
    c80e:	607a      	str	r2, [r7, #4]
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	2b00      	cmp	r3, #0
    c814:	d1f6      	bne.n	c804 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c816:	68fb      	ldr	r3, [r7, #12]
}
    c818:	4618      	mov	r0, r3
    c81a:	3714      	adds	r7, #20
    c81c:	46bd      	mov	sp, r7
    c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c822:	4770      	bx	lr

0000c824 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c824:	b480      	push	{r7}
    c826:	b087      	sub	sp, #28
    c828:	af00      	add	r7, sp, #0
    c82a:	60f8      	str	r0, [r7, #12]
    c82c:	460b      	mov	r3, r1
    c82e:	607a      	str	r2, [r7, #4]
    c830:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c832:	2300      	movs	r3, #0
    c834:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	2b00      	cmp	r3, #0
    c83a:	dc0c      	bgt.n	c856 <padbuffer+0x32>
    {
        return i32Cnt;
    c83c:	697b      	ldr	r3, [r7, #20]
    c83e:	e010      	b.n	c862 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c840:	68fb      	ldr	r3, [r7, #12]
    c842:	2b00      	cmp	r3, #0
    c844:	d004      	beq.n	c850 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c846:	68fb      	ldr	r3, [r7, #12]
    c848:	1c5a      	adds	r2, r3, #1
    c84a:	60fa      	str	r2, [r7, #12]
    c84c:	7afa      	ldrb	r2, [r7, #11]
    c84e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c850:	697b      	ldr	r3, [r7, #20]
    c852:	3301      	adds	r3, #1
    c854:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c856:	687b      	ldr	r3, [r7, #4]
    c858:	1e5a      	subs	r2, r3, #1
    c85a:	607a      	str	r2, [r7, #4]
    c85c:	2b00      	cmp	r3, #0
    c85e:	d1ef      	bne.n	c840 <padbuffer+0x1c>
    }

    return i32Cnt;
    c860:	697b      	ldr	r3, [r7, #20]
}
    c862:	4618      	mov	r0, r3
    c864:	371c      	adds	r7, #28
    c866:	46bd      	mov	sp, r7
    c868:	f85d 7b04 	ldr.w	r7, [sp], #4
    c86c:	4770      	bx	lr
	...

0000c870 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c870:	b590      	push	{r4, r7, lr}
    c872:	b08f      	sub	sp, #60	; 0x3c
    c874:	af00      	add	r7, sp, #0
    c876:	60f8      	str	r0, [r7, #12]
    c878:	60b9      	str	r1, [r7, #8]
    c87a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c87c:	68bb      	ldr	r3, [r7, #8]
    c87e:	681b      	ldr	r3, [r3, #0]
    c880:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c884:	2b03      	cmp	r3, #3
    c886:	dc02      	bgt.n	c88e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c888:	f06f 0302 	mvn.w	r3, #2
    c88c:	e0e7      	b.n	ca5e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    c88e:	edd7 7a03 	vldr	s15, [r7, #12]
    c892:	eef5 7a40 	vcmp.f32	s15, #0.0
    c896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c89a:	d104      	bne.n	c8a6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c89c:	68bb      	ldr	r3, [r7, #8]
    c89e:	4a72      	ldr	r2, [pc, #456]	; (ca68 <ftoa+0x1f8>)
    c8a0:	601a      	str	r2, [r3, #0]
        return 3;
    c8a2:	2303      	movs	r3, #3
    c8a4:	e0db      	b.n	ca5e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    c8a6:	68bb      	ldr	r3, [r7, #8]
    c8a8:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c8aa:	68fb      	ldr	r3, [r7, #12]
    c8ac:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c8ae:	693b      	ldr	r3, [r7, #16]
    c8b0:	15db      	asrs	r3, r3, #23
    c8b2:	b2db      	uxtb	r3, r3
    c8b4:	3b7f      	subs	r3, #127	; 0x7f
    c8b6:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c8b8:	693b      	ldr	r3, [r7, #16]
    c8ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c8be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c8c2:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    c8c4:	2300      	movs	r3, #0
    c8c6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    c8c8:	2300      	movs	r3, #0
    c8ca:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    c8cc:	69fb      	ldr	r3, [r7, #28]
    c8ce:	2b1e      	cmp	r3, #30
    c8d0:	dd02      	ble.n	c8d8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c8d2:	f06f 0301 	mvn.w	r3, #1
    c8d6:	e0c2      	b.n	ca5e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    c8d8:	69fb      	ldr	r3, [r7, #28]
    c8da:	f113 0f17 	cmn.w	r3, #23
    c8de:	da02      	bge.n	c8e6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c8e0:	f04f 33ff 	mov.w	r3, #4294967295
    c8e4:	e0bb      	b.n	ca5e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    c8e6:	69fb      	ldr	r3, [r7, #28]
    c8e8:	2b16      	cmp	r3, #22
    c8ea:	dd06      	ble.n	c8fa <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c8ec:	69fb      	ldr	r3, [r7, #28]
    c8ee:	3b17      	subs	r3, #23
    c8f0:	69ba      	ldr	r2, [r7, #24]
    c8f2:	fa02 f303 	lsl.w	r3, r2, r3
    c8f6:	637b      	str	r3, [r7, #52]	; 0x34
    c8f8:	e01a      	b.n	c930 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c8fa:	69fb      	ldr	r3, [r7, #28]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	db0f      	blt.n	c920 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c900:	69fb      	ldr	r3, [r7, #28]
    c902:	f1c3 0317 	rsb	r3, r3, #23
    c906:	69ba      	ldr	r2, [r7, #24]
    c908:	fa42 f303 	asr.w	r3, r2, r3
    c90c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c90e:	69fb      	ldr	r3, [r7, #28]
    c910:	3301      	adds	r3, #1
    c912:	69ba      	ldr	r2, [r7, #24]
    c914:	fa02 f303 	lsl.w	r3, r2, r3
    c918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c91c:	633b      	str	r3, [r7, #48]	; 0x30
    c91e:	e007      	b.n	c930 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c920:	69bb      	ldr	r3, [r7, #24]
    c922:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c926:	69fb      	ldr	r3, [r7, #28]
    c928:	43db      	mvns	r3, r3
    c92a:	fa42 f303 	asr.w	r3, r2, r3
    c92e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c930:	693b      	ldr	r3, [r7, #16]
    c932:	2b00      	cmp	r3, #0
    c934:	da04      	bge.n	c940 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    c936:	68bb      	ldr	r3, [r7, #8]
    c938:	1c5a      	adds	r2, r3, #1
    c93a:	60ba      	str	r2, [r7, #8]
    c93c:	222d      	movs	r2, #45	; 0x2d
    c93e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c942:	2b00      	cmp	r3, #0
    c944:	d105      	bne.n	c952 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    c946:	68bb      	ldr	r3, [r7, #8]
    c948:	1c5a      	adds	r2, r3, #1
    c94a:	60ba      	str	r2, [r7, #8]
    c94c:	2230      	movs	r2, #48	; 0x30
    c94e:	701a      	strb	r2, [r3, #0]
    c950:	e021      	b.n	c996 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    c952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c954:	2b00      	cmp	r3, #0
    c956:	dd08      	ble.n	c96a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    c958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c95a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    c95e:	68ba      	ldr	r2, [r7, #8]
    c960:	4618      	mov	r0, r3
    c962:	4621      	mov	r1, r4
    c964:	f7ff fe9b 	bl	c69e <uint64_to_str>
    c968:	e011      	b.n	c98e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    c96a:	68bb      	ldr	r3, [r7, #8]
    c96c:	1c5a      	adds	r2, r3, #1
    c96e:	60ba      	str	r2, [r7, #8]
    c970:	222d      	movs	r2, #45	; 0x2d
    c972:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    c974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c976:	425b      	negs	r3, r3
    c978:	ea4f 74e3 	mov.w	r4, r3, asr #31
    c97c:	68ba      	ldr	r2, [r7, #8]
    c97e:	4618      	mov	r0, r3
    c980:	4621      	mov	r1, r4
    c982:	f7ff fe8c 	bl	c69e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    c986:	e002      	b.n	c98e <ftoa+0x11e>
        {
            pcBuf++;
    c988:	68bb      	ldr	r3, [r7, #8]
    c98a:	3301      	adds	r3, #1
    c98c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    c98e:	68bb      	ldr	r3, [r7, #8]
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	2b00      	cmp	r3, #0
    c994:	d1f8      	bne.n	c988 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    c996:	68bb      	ldr	r3, [r7, #8]
    c998:	1c5a      	adds	r2, r3, #1
    c99a:	60ba      	str	r2, [r7, #8]
    c99c:	222e      	movs	r2, #46	; 0x2e
    c99e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d105      	bne.n	c9b2 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    c9a6:	68bb      	ldr	r3, [r7, #8]
    c9a8:	1c5a      	adds	r2, r3, #1
    c9aa:	60ba      	str	r2, [r7, #8]
    c9ac:	2230      	movs	r2, #48	; 0x30
    c9ae:	701a      	strb	r2, [r3, #0]
    c9b0:	e04f      	b.n	ca52 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    c9b2:	68ba      	ldr	r2, [r7, #8]
    c9b4:	6a3b      	ldr	r3, [r7, #32]
    c9b6:	1ad3      	subs	r3, r2, r3
    c9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c9ba:	1ad3      	subs	r3, r2, r3
    c9bc:	3b01      	subs	r3, #1
    c9be:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    c9c0:	697a      	ldr	r2, [r7, #20]
    c9c2:	687b      	ldr	r3, [r7, #4]
    c9c4:	4293      	cmp	r3, r2
    c9c6:	bfa8      	it	ge
    c9c8:	4613      	movge	r3, r2
    c9ca:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    c9cc:	2300      	movs	r3, #0
    c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
    c9d0:	e015      	b.n	c9fe <ftoa+0x18e>
        {
            i32FracPart *= 10;
    c9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c9d4:	4613      	mov	r3, r2
    c9d6:	009b      	lsls	r3, r3, #2
    c9d8:	4413      	add	r3, r2
    c9da:	005b      	lsls	r3, r3, #1
    c9dc:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    c9de:	68bb      	ldr	r3, [r7, #8]
    c9e0:	1c5a      	adds	r2, r3, #1
    c9e2:	60ba      	str	r2, [r7, #8]
    c9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c9e6:	1612      	asrs	r2, r2, #24
    c9e8:	b2d2      	uxtb	r2, r2
    c9ea:	3230      	adds	r2, #48	; 0x30
    c9ec:	b2d2      	uxtb	r2, r2
    c9ee:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c9f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c9f6:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9fa:	3301      	adds	r3, #1
    c9fc:	62bb      	str	r3, [r7, #40]	; 0x28
    c9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ca00:	697b      	ldr	r3, [r7, #20]
    ca02:	429a      	cmp	r2, r3
    ca04:	dbe5      	blt.n	c9d2 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ca06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ca08:	4613      	mov	r3, r2
    ca0a:	009b      	lsls	r3, r3, #2
    ca0c:	4413      	add	r3, r2
    ca0e:	005b      	lsls	r3, r3, #1
    ca10:	161b      	asrs	r3, r3, #24
    ca12:	2b04      	cmp	r3, #4
    ca14:	dd1d      	ble.n	ca52 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ca16:	68bb      	ldr	r3, [r7, #8]
    ca18:	3b01      	subs	r3, #1
    ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ca1c:	e015      	b.n	ca4a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    ca1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca20:	781b      	ldrb	r3, [r3, #0]
    ca22:	2b2e      	cmp	r3, #46	; 0x2e
    ca24:	d00e      	beq.n	ca44 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca28:	781b      	ldrb	r3, [r3, #0]
    ca2a:	2b39      	cmp	r3, #57	; 0x39
    ca2c:	d103      	bne.n	ca36 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca30:	2230      	movs	r2, #48	; 0x30
    ca32:	701a      	strb	r2, [r3, #0]
    ca34:	e006      	b.n	ca44 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca38:	781b      	ldrb	r3, [r3, #0]
    ca3a:	3301      	adds	r3, #1
    ca3c:	b2da      	uxtb	r2, r3
    ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca40:	701a      	strb	r2, [r3, #0]
                    break;
    ca42:	e006      	b.n	ca52 <ftoa+0x1e2>
                }
                pcBuftmp--;
    ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca46:	3b01      	subs	r3, #1
    ca48:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ca4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca4c:	6a3b      	ldr	r3, [r7, #32]
    ca4e:	429a      	cmp	r2, r3
    ca50:	d2e5      	bcs.n	ca1e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ca52:	68bb      	ldr	r3, [r7, #8]
    ca54:	2200      	movs	r2, #0
    ca56:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ca58:	68ba      	ldr	r2, [r7, #8]
    ca5a:	6a3b      	ldr	r3, [r7, #32]
    ca5c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ca5e:	4618      	mov	r0, r3
    ca60:	373c      	adds	r7, #60	; 0x3c
    ca62:	46bd      	mov	sp, r7
    ca64:	bd90      	pop	{r4, r7, pc}
    ca66:	bf00      	nop
    ca68:	00302e30 	.word	0x00302e30

0000ca6c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ca6c:	b590      	push	{r4, r7, lr}
    ca6e:	b095      	sub	sp, #84	; 0x54
    ca70:	af00      	add	r7, sp, #0
    ca72:	60f8      	str	r0, [r7, #12]
    ca74:	60b9      	str	r1, [r7, #8]
    ca76:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ca78:	2300      	movs	r3, #0
    ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ca7c:	2300      	movs	r3, #0
    ca7e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    ca80:	e2e3      	b.n	d04a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ca82:	2306      	movs	r3, #6
    ca84:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    ca86:	68bb      	ldr	r3, [r7, #8]
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	2b25      	cmp	r3, #37	; 0x25
    ca8c:	d01f      	beq.n	cace <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ca8e:	68fb      	ldr	r3, [r7, #12]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d015      	beq.n	cac0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ca94:	68bb      	ldr	r3, [r7, #8]
    ca96:	781b      	ldrb	r3, [r3, #0]
    ca98:	2b0a      	cmp	r3, #10
    ca9a:	d10b      	bne.n	cab4 <am_util_stdio_vsprintf+0x48>
    ca9c:	4bb1      	ldr	r3, [pc, #708]	; (cd64 <am_util_stdio_vsprintf+0x2f8>)
    ca9e:	781b      	ldrb	r3, [r3, #0]
    caa0:	2b00      	cmp	r3, #0
    caa2:	d007      	beq.n	cab4 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    caa4:	68fb      	ldr	r3, [r7, #12]
    caa6:	1c5a      	adds	r2, r3, #1
    caa8:	60fa      	str	r2, [r7, #12]
    caaa:	220d      	movs	r2, #13
    caac:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    caae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cab0:	3301      	adds	r3, #1
    cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cab4:	68fb      	ldr	r3, [r7, #12]
    cab6:	1c5a      	adds	r2, r3, #1
    cab8:	60fa      	str	r2, [r7, #12]
    caba:	68ba      	ldr	r2, [r7, #8]
    cabc:	7812      	ldrb	r2, [r2, #0]
    cabe:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cac0:	68bb      	ldr	r3, [r7, #8]
    cac2:	3301      	adds	r3, #1
    cac4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cac8:	3301      	adds	r3, #1
    caca:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cacc:	e2bd      	b.n	d04a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cace:	68bb      	ldr	r3, [r7, #8]
    cad0:	3301      	adds	r3, #1
    cad2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cad4:	2300      	movs	r3, #0
    cad6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cada:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cade:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cae2:	2320      	movs	r3, #32
    cae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cae8:	68bb      	ldr	r3, [r7, #8]
    caea:	781b      	ldrb	r3, [r3, #0]
    caec:	2b30      	cmp	r3, #48	; 0x30
    caee:	d105      	bne.n	cafc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    caf0:	2330      	movs	r3, #48	; 0x30
    caf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    caf6:	68bb      	ldr	r3, [r7, #8]
    caf8:	3301      	adds	r3, #1
    cafa:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cafc:	f107 0310 	add.w	r3, r7, #16
    cb00:	4619      	mov	r1, r3
    cb02:	68b8      	ldr	r0, [r7, #8]
    cb04:	f7ff fd85 	bl	c612 <decstr_to_int>
    cb08:	4603      	mov	r3, r0
    cb0a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cb0c:	693b      	ldr	r3, [r7, #16]
    cb0e:	68ba      	ldr	r2, [r7, #8]
    cb10:	4413      	add	r3, r2
    cb12:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cb14:	68bb      	ldr	r3, [r7, #8]
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	2b73      	cmp	r3, #115	; 0x73
    cb1a:	d005      	beq.n	cb28 <am_util_stdio_vsprintf+0xbc>
    cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cb1e:	2b00      	cmp	r3, #0
    cb20:	da02      	bge.n	cb28 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cb24:	425b      	negs	r3, r3
    cb26:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cb28:	68bb      	ldr	r3, [r7, #8]
    cb2a:	781b      	ldrb	r3, [r3, #0]
    cb2c:	2b2e      	cmp	r3, #46	; 0x2e
    cb2e:	d10e      	bne.n	cb4e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cb30:	68bb      	ldr	r3, [r7, #8]
    cb32:	3301      	adds	r3, #1
    cb34:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cb36:	f107 0310 	add.w	r3, r7, #16
    cb3a:	4619      	mov	r1, r3
    cb3c:	68b8      	ldr	r0, [r7, #8]
    cb3e:	f7ff fd68 	bl	c612 <decstr_to_int>
    cb42:	4603      	mov	r3, r0
    cb44:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cb46:	693b      	ldr	r3, [r7, #16]
    cb48:	68ba      	ldr	r2, [r7, #8]
    cb4a:	4413      	add	r3, r2
    cb4c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cb4e:	68bb      	ldr	r3, [r7, #8]
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2b6c      	cmp	r3, #108	; 0x6c
    cb54:	d10c      	bne.n	cb70 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cb56:	68bb      	ldr	r3, [r7, #8]
    cb58:	3301      	adds	r3, #1
    cb5a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cb5c:	68bb      	ldr	r3, [r7, #8]
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	2b6c      	cmp	r3, #108	; 0x6c
    cb62:	d105      	bne.n	cb70 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cb64:	68bb      	ldr	r3, [r7, #8]
    cb66:	3301      	adds	r3, #1
    cb68:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cb6a:	2301      	movs	r3, #1
    cb6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cb70:	68bb      	ldr	r3, [r7, #8]
    cb72:	781b      	ldrb	r3, [r3, #0]
    cb74:	3b46      	subs	r3, #70	; 0x46
    cb76:	2b32      	cmp	r3, #50	; 0x32
    cb78:	f200 8254 	bhi.w	d024 <am_util_stdio_vsprintf+0x5b8>
    cb7c:	a201      	add	r2, pc, #4	; (adr r2, cb84 <am_util_stdio_vsprintf+0x118>)
    cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb82:	bf00      	nop
    cb84:	0000cfaf 	.word	0x0000cfaf
    cb88:	0000d025 	.word	0x0000d025
    cb8c:	0000d025 	.word	0x0000d025
    cb90:	0000d025 	.word	0x0000d025
    cb94:	0000d025 	.word	0x0000d025
    cb98:	0000d025 	.word	0x0000d025
    cb9c:	0000d025 	.word	0x0000d025
    cba0:	0000d025 	.word	0x0000d025
    cba4:	0000d025 	.word	0x0000d025
    cba8:	0000d025 	.word	0x0000d025
    cbac:	0000d025 	.word	0x0000d025
    cbb0:	0000d025 	.word	0x0000d025
    cbb4:	0000d025 	.word	0x0000d025
    cbb8:	0000d025 	.word	0x0000d025
    cbbc:	0000d025 	.word	0x0000d025
    cbc0:	0000d025 	.word	0x0000d025
    cbc4:	0000d025 	.word	0x0000d025
    cbc8:	0000d025 	.word	0x0000d025
    cbcc:	0000cd4b 	.word	0x0000cd4b
    cbd0:	0000d025 	.word	0x0000d025
    cbd4:	0000d025 	.word	0x0000d025
    cbd8:	0000d025 	.word	0x0000d025
    cbdc:	0000d025 	.word	0x0000d025
    cbe0:	0000d025 	.word	0x0000d025
    cbe4:	0000d025 	.word	0x0000d025
    cbe8:	0000d025 	.word	0x0000d025
    cbec:	0000d025 	.word	0x0000d025
    cbf0:	0000d025 	.word	0x0000d025
    cbf4:	0000d025 	.word	0x0000d025
    cbf8:	0000cc51 	.word	0x0000cc51
    cbfc:	0000ce77 	.word	0x0000ce77
    cc00:	0000d025 	.word	0x0000d025
    cc04:	0000cfaf 	.word	0x0000cfaf
    cc08:	0000d025 	.word	0x0000d025
    cc0c:	0000d025 	.word	0x0000d025
    cc10:	0000ce77 	.word	0x0000ce77
    cc14:	0000d025 	.word	0x0000d025
    cc18:	0000d025 	.word	0x0000d025
    cc1c:	0000d025 	.word	0x0000d025
    cc20:	0000d025 	.word	0x0000d025
    cc24:	0000d025 	.word	0x0000d025
    cc28:	0000d025 	.word	0x0000d025
    cc2c:	0000d025 	.word	0x0000d025
    cc30:	0000d025 	.word	0x0000d025
    cc34:	0000d025 	.word	0x0000d025
    cc38:	0000cc77 	.word	0x0000cc77
    cc3c:	0000d025 	.word	0x0000d025
    cc40:	0000cde5 	.word	0x0000cde5
    cc44:	0000d025 	.word	0x0000d025
    cc48:	0000d025 	.word	0x0000d025
    cc4c:	0000cd45 	.word	0x0000cd45
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc50:	687b      	ldr	r3, [r7, #4]
    cc52:	1d1a      	adds	r2, r3, #4
    cc54:	607a      	str	r2, [r7, #4]
    cc56:	681b      	ldr	r3, [r3, #0]
    cc58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cc5c:	68fb      	ldr	r3, [r7, #12]
    cc5e:	2b00      	cmp	r3, #0
    cc60:	d005      	beq.n	cc6e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cc62:	68fb      	ldr	r3, [r7, #12]
    cc64:	1c5a      	adds	r2, r3, #1
    cc66:	60fa      	str	r2, [r7, #12]
    cc68:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cc6c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc70:	3301      	adds	r3, #1
    cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cc74:	e1e6      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cc76:	687b      	ldr	r3, [r7, #4]
    cc78:	1d1a      	adds	r2, r3, #4
    cc7a:	607a      	str	r2, [r7, #4]
    cc7c:	681b      	ldr	r3, [r3, #0]
    cc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cc80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cc82:	f7ff fdb4 	bl	c7ee <simple_strlen>
    cc86:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	dd2e      	ble.n	ccec <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cc92:	429a      	cmp	r2, r3
    cc94:	d22a      	bcs.n	ccec <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cc96:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc9a:	1ad3      	subs	r3, r2, r3
    cc9c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cc9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cca4:	4619      	mov	r1, r3
    cca6:	68f8      	ldr	r0, [r7, #12]
    cca8:	f7ff fdbc 	bl	c824 <padbuffer>
    ccac:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ccae:	68fb      	ldr	r3, [r7, #12]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d001      	beq.n	ccb8 <am_util_stdio_vsprintf+0x24c>
    ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ccb6:	e000      	b.n	ccba <am_util_stdio_vsprintf+0x24e>
    ccb8:	2300      	movs	r3, #0
    ccba:	68fa      	ldr	r2, [r7, #12]
    ccbc:	4413      	add	r3, r2
    ccbe:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ccc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ccc4:	4413      	add	r3, r2
    ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ccc8:	2300      	movs	r3, #0
    ccca:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cccc:	e00e      	b.n	ccec <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    ccce:	68fb      	ldr	r3, [r7, #12]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d005      	beq.n	cce0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    ccd4:	68fb      	ldr	r3, [r7, #12]
    ccd6:	1c5a      	adds	r2, r3, #1
    ccd8:	60fa      	str	r2, [r7, #12]
    ccda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ccdc:	7812      	ldrb	r2, [r2, #0]
    ccde:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cce2:	3301      	adds	r3, #1
    cce4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cce8:	3301      	adds	r3, #1
    ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    ccec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d1ec      	bne.n	ccce <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	f000 81a1 	beq.w	d03e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ccfe:	425b      	negs	r3, r3
    cd00:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd06:	429a      	cmp	r2, r3
    cd08:	f080 8199 	bcs.w	d03e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd10:	1ad3      	subs	r3, r2, r3
    cd12:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd1a:	4619      	mov	r1, r3
    cd1c:	68f8      	ldr	r0, [r7, #12]
    cd1e:	f7ff fd81 	bl	c824 <padbuffer>
    cd22:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cd24:	68fb      	ldr	r3, [r7, #12]
    cd26:	2b00      	cmp	r3, #0
    cd28:	d001      	beq.n	cd2e <am_util_stdio_vsprintf+0x2c2>
    cd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd2c:	e000      	b.n	cd30 <am_util_stdio_vsprintf+0x2c4>
    cd2e:	2300      	movs	r3, #0
    cd30:	68fa      	ldr	r2, [r7, #12]
    cd32:	4413      	add	r3, r2
    cd34:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cd3a:	4413      	add	r3, r2
    cd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cd3e:	2300      	movs	r3, #0
    cd40:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    cd42:	e17c      	b.n	d03e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    cd44:	2301      	movs	r3, #1
    cd46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cd4e:	2b00      	cmp	r3, #0
    cd50:	d00a      	beq.n	cd68 <am_util_stdio_vsprintf+0x2fc>
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	3307      	adds	r3, #7
    cd56:	f023 0307 	bic.w	r3, r3, #7
    cd5a:	f103 0208 	add.w	r2, r3, #8
    cd5e:	607a      	str	r2, [r7, #4]
    cd60:	cb18      	ldmia	r3, {r3, r4}
    cd62:	e007      	b.n	cd74 <am_util_stdio_vsprintf+0x308>
    cd64:	10001128 	.word	0x10001128
                                      va_arg(pArgs, uint32_t);
    cd68:	687b      	ldr	r3, [r7, #4]
    cd6a:	1d1a      	adds	r2, r3, #4
    cd6c:	607a      	str	r2, [r7, #4]
    cd6e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd70:	f04f 0400 	mov.w	r4, #0
    cd74:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	d01e      	beq.n	cdbc <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cd7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cd82:	f7ff fc22 	bl	c5ca <ndigits_in_hex>
    cd86:	4602      	mov	r2, r0
    cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd8a:	1a9b      	subs	r3, r3, r2
    cd8c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cd92:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd94:	4619      	mov	r1, r3
    cd96:	68f8      	ldr	r0, [r7, #12]
    cd98:	f7ff fd44 	bl	c824 <padbuffer>
    cd9c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cd9e:	68fb      	ldr	r3, [r7, #12]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d001      	beq.n	cda8 <am_util_stdio_vsprintf+0x33c>
    cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cda6:	e000      	b.n	cdaa <am_util_stdio_vsprintf+0x33e>
    cda8:	2300      	movs	r3, #0
    cdaa:	68fa      	ldr	r2, [r7, #12]
    cdac:	4413      	add	r3, r2
    cdae:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cdb4:	4413      	add	r3, r2
    cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cdb8:	2300      	movs	r3, #0
    cdba:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cdbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cdc0:	68fa      	ldr	r2, [r7, #12]
    cdc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cdc6:	f7ff fcb2 	bl	c72e <uint64_to_hexstr>
    cdca:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cdcc:	68fb      	ldr	r3, [r7, #12]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d003      	beq.n	cdda <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdd4:	68fa      	ldr	r2, [r7, #12]
    cdd6:	4413      	add	r3, r2
    cdd8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cdde:	4413      	add	r3, r2
    cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cde2:	e12f      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cde4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cde8:	2b00      	cmp	r3, #0
    cdea:	d008      	beq.n	cdfe <am_util_stdio_vsprintf+0x392>
    cdec:	687b      	ldr	r3, [r7, #4]
    cdee:	3307      	adds	r3, #7
    cdf0:	f023 0307 	bic.w	r3, r3, #7
    cdf4:	f103 0208 	add.w	r2, r3, #8
    cdf8:	607a      	str	r2, [r7, #4]
    cdfa:	cb18      	ldmia	r3, {r3, r4}
    cdfc:	e005      	b.n	ce0a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	1d1a      	adds	r2, r3, #4
    ce02:	607a      	str	r2, [r7, #4]
    ce04:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce06:	f04f 0400 	mov.w	r4, #0
    ce0a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce10:	2b00      	cmp	r3, #0
    ce12:	d01e      	beq.n	ce52 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    ce14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ce18:	f7ff fb99 	bl	c54e <ndigits_in_u64>
    ce1c:	4602      	mov	r2, r0
    ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce20:	1a9b      	subs	r3, r3, r2
    ce22:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce2a:	4619      	mov	r1, r3
    ce2c:	68f8      	ldr	r0, [r7, #12]
    ce2e:	f7ff fcf9 	bl	c824 <padbuffer>
    ce32:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    ce34:	68fb      	ldr	r3, [r7, #12]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d001      	beq.n	ce3e <am_util_stdio_vsprintf+0x3d2>
    ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce3c:	e000      	b.n	ce40 <am_util_stdio_vsprintf+0x3d4>
    ce3e:	2300      	movs	r3, #0
    ce40:	68fa      	ldr	r2, [r7, #12]
    ce42:	4413      	add	r3, r2
    ce44:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce4a:	4413      	add	r3, r2
    ce4c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    ce4e:	2300      	movs	r3, #0
    ce50:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    ce52:	68fa      	ldr	r2, [r7, #12]
    ce54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ce58:	f7ff fc21 	bl	c69e <uint64_to_str>
    ce5c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    ce5e:	68fb      	ldr	r3, [r7, #12]
    ce60:	2b00      	cmp	r3, #0
    ce62:	d003      	beq.n	ce6c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    ce64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce66:	68fa      	ldr	r2, [r7, #12]
    ce68:	4413      	add	r3, r2
    ce6a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    ce6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce70:	4413      	add	r3, r2
    ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    ce74:	e0e6      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d008      	beq.n	ce90 <am_util_stdio_vsprintf+0x424>
    ce7e:	687b      	ldr	r3, [r7, #4]
    ce80:	3307      	adds	r3, #7
    ce82:	f023 0307 	bic.w	r3, r3, #7
    ce86:	f103 0208 	add.w	r2, r3, #8
    ce8a:	607a      	str	r2, [r7, #4]
    ce8c:	cb18      	ldmia	r3, {r3, r4}
    ce8e:	e005      	b.n	ce9c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    ce90:	687b      	ldr	r3, [r7, #4]
    ce92:	1d1a      	adds	r2, r3, #4
    ce94:	607a      	str	r2, [r7, #4]
    ce96:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce98:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ce9c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cea0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cea4:	2b00      	cmp	r3, #0
    cea6:	f174 0300 	sbcs.w	r3, r4, #0
    ceaa:	da0a      	bge.n	cec2 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    ceac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    ceb0:	425b      	negs	r3, r3
    ceb2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    ceb6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    ceba:	2301      	movs	r3, #1
    cebc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    cec0:	e006      	b.n	ced0 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    cec2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cec6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    ceca:	2300      	movs	r3, #0
    cecc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ced2:	2b00      	cmp	r3, #0
    ced4:	d04a      	beq.n	cf6c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    ced6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    ceda:	4618      	mov	r0, r3
    cedc:	4621      	mov	r1, r4
    cede:	f7ff fb57 	bl	c590 <ndigits_in_i64>
    cee2:	4602      	mov	r2, r0
    cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cee6:	1a9b      	subs	r3, r3, r2
    cee8:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    ceea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    ceee:	2b00      	cmp	r3, #0
    cef0:	d011      	beq.n	cf16 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cef4:	3b01      	subs	r3, #1
    cef6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cefc:	2b30      	cmp	r3, #48	; 0x30
    cefe:	d10a      	bne.n	cf16 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cf00:	68fb      	ldr	r3, [r7, #12]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d004      	beq.n	cf10 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	1c5a      	adds	r2, r3, #1
    cf0a:	60fa      	str	r2, [r7, #12]
    cf0c:	222d      	movs	r2, #45	; 0x2d
    cf0e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf12:	3301      	adds	r3, #1
    cf14:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf1c:	4619      	mov	r1, r3
    cf1e:	68f8      	ldr	r0, [r7, #12]
    cf20:	f7ff fc80 	bl	c824 <padbuffer>
    cf24:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf26:	68fb      	ldr	r3, [r7, #12]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d001      	beq.n	cf30 <am_util_stdio_vsprintf+0x4c4>
    cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf2e:	e000      	b.n	cf32 <am_util_stdio_vsprintf+0x4c6>
    cf30:	2300      	movs	r3, #0
    cf32:	68fa      	ldr	r2, [r7, #12]
    cf34:	4413      	add	r3, r2
    cf36:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf3c:	4413      	add	r3, r2
    cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf40:	2300      	movs	r3, #0
    cf42:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cf44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d01e      	beq.n	cf8a <am_util_stdio_vsprintf+0x51e>
    cf4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf50:	2b20      	cmp	r3, #32
    cf52:	d11a      	bne.n	cf8a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    cf54:	68fb      	ldr	r3, [r7, #12]
    cf56:	2b00      	cmp	r3, #0
    cf58:	d004      	beq.n	cf64 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    cf5a:	68fb      	ldr	r3, [r7, #12]
    cf5c:	1c5a      	adds	r2, r3, #1
    cf5e:	60fa      	str	r2, [r7, #12]
    cf60:	222d      	movs	r2, #45	; 0x2d
    cf62:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    cf64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf66:	3301      	adds	r3, #1
    cf68:	63fb      	str	r3, [r7, #60]	; 0x3c
    cf6a:	e00e      	b.n	cf8a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    cf6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    cf70:	2b00      	cmp	r3, #0
    cf72:	d00a      	beq.n	cf8a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d004      	beq.n	cf84 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	1c5a      	adds	r2, r3, #1
    cf7e:	60fa      	str	r2, [r7, #12]
    cf80:	222d      	movs	r2, #45	; 0x2d
    cf82:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf86:	3301      	adds	r3, #1
    cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf8a:	68fa      	ldr	r2, [r7, #12]
    cf8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf90:	f7ff fb85 	bl	c69e <uint64_to_str>
    cf94:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf96:	68fb      	ldr	r3, [r7, #12]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d003      	beq.n	cfa4 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf9e:	68fa      	ldr	r2, [r7, #12]
    cfa0:	4413      	add	r3, r2
    cfa2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfa8:	4413      	add	r3, r2
    cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cfac:	e04a      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    cfae:	68fb      	ldr	r3, [r7, #12]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d046      	beq.n	d042 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    cfb4:	687b      	ldr	r3, [r7, #4]
    cfb6:	3307      	adds	r3, #7
    cfb8:	f023 0307 	bic.w	r3, r3, #7
    cfbc:	f103 0208 	add.w	r2, r3, #8
    cfc0:	607a      	str	r2, [r7, #4]
    cfc2:	cb18      	ldmia	r3, {r3, r4}
    cfc4:	4618      	mov	r0, r3
    cfc6:	4621      	mov	r1, r4
    cfc8:	f7ff f89a 	bl	c100 <__aeabi_d2f>
    cfcc:	4603      	mov	r3, r0
    cfce:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    cfd0:	68fb      	ldr	r3, [r7, #12]
    cfd2:	2214      	movs	r2, #20
    cfd4:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    cfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cfd8:	68f9      	ldr	r1, [r7, #12]
    cfda:	6978      	ldr	r0, [r7, #20]
    cfdc:	f7ff fc48 	bl	c870 <ftoa>
    cfe0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    cfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	da14      	bge.n	d012 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfea:	f1b3 3fff 	cmp.w	r3, #4294967295
    cfee:	d102      	bne.n	cff6 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cff0:	4b1e      	ldr	r3, [pc, #120]	; (d06c <am_util_stdio_vsprintf+0x600>)
    cff2:	62bb      	str	r3, [r7, #40]	; 0x28
    cff4:	e008      	b.n	d008 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cff8:	f113 0f02 	cmn.w	r3, #2
    cffc:	d102      	bne.n	d004 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cffe:	4b1c      	ldr	r3, [pc, #112]	; (d070 <am_util_stdio_vsprintf+0x604>)
    d000:	62bb      	str	r3, [r7, #40]	; 0x28
    d002:	e001      	b.n	d008 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d004:	4b1b      	ldr	r3, [pc, #108]	; (d074 <am_util_stdio_vsprintf+0x608>)
    d006:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d008:	68fb      	ldr	r3, [r7, #12]
    d00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d00c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d00e:	2303      	movs	r3, #3
    d010:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d016:	4413      	add	r3, r2
    d018:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d01c:	68fa      	ldr	r2, [r7, #12]
    d01e:	4413      	add	r3, r2
    d020:	60fb      	str	r3, [r7, #12]
                }
                break;
    d022:	e00e      	b.n	d042 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d024:	68fb      	ldr	r3, [r7, #12]
    d026:	2b00      	cmp	r3, #0
    d028:	d005      	beq.n	d036 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d02a:	68fb      	ldr	r3, [r7, #12]
    d02c:	1c5a      	adds	r2, r3, #1
    d02e:	60fa      	str	r2, [r7, #12]
    d030:	68ba      	ldr	r2, [r7, #8]
    d032:	7812      	ldrb	r2, [r2, #0]
    d034:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d038:	3301      	adds	r3, #1
    d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d03c:	e002      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>
                break;
    d03e:	bf00      	nop
    d040:	e000      	b.n	d044 <am_util_stdio_vsprintf+0x5d8>
                break;
    d042:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d044:	68bb      	ldr	r3, [r7, #8]
    d046:	3301      	adds	r3, #1
    d048:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d04a:	68bb      	ldr	r3, [r7, #8]
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	2b00      	cmp	r3, #0
    d050:	f47f ad17 	bne.w	ca82 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d054:	68fb      	ldr	r3, [r7, #12]
    d056:	2b00      	cmp	r3, #0
    d058:	d002      	beq.n	d060 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d05a:	68fb      	ldr	r3, [r7, #12]
    d05c:	2200      	movs	r2, #0
    d05e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d062:	4618      	mov	r0, r3
    d064:	3754      	adds	r7, #84	; 0x54
    d066:	46bd      	mov	sp, r7
    d068:	bd90      	pop	{r4, r7, pc}
    d06a:	bf00      	nop
    d06c:	00302e30 	.word	0x00302e30
    d070:	00232e23 	.word	0x00232e23
    d074:	003f2e3f 	.word	0x003f2e3f

0000d078 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d078:	b40f      	push	{r0, r1, r2, r3}
    d07a:	b580      	push	{r7, lr}
    d07c:	b082      	sub	sp, #8
    d07e:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d080:	f107 0314 	add.w	r3, r7, #20
    d084:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d086:	683a      	ldr	r2, [r7, #0]
    d088:	6939      	ldr	r1, [r7, #16]
    d08a:	4808      	ldr	r0, [pc, #32]	; (d0ac <am_util_stdio_printf+0x34>)
    d08c:	f7ff fcee 	bl	ca6c <am_util_stdio_vsprintf>
    d090:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d092:	4b07      	ldr	r3, [pc, #28]	; (d0b0 <am_util_stdio_printf+0x38>)
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	4805      	ldr	r0, [pc, #20]	; (d0ac <am_util_stdio_printf+0x34>)
    d098:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d09a:	687b      	ldr	r3, [r7, #4]
}
    d09c:	4618      	mov	r0, r3
    d09e:	3708      	adds	r7, #8
    d0a0:	46bd      	mov	sp, r7
    d0a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d0a6:	b004      	add	sp, #16
    d0a8:	4770      	bx	lr
    d0aa:	bf00      	nop
    d0ac:	10001028 	.word	0x10001028
    d0b0:	10001134 	.word	0x10001134

0000d0b4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d0b8:	4802      	ldr	r0, [pc, #8]	; (d0c4 <am_util_stdio_terminal_clear+0x10>)
    d0ba:	f7ff ffdd 	bl	d078 <am_util_stdio_printf>
}
    d0be:	bf00      	nop
    d0c0:	bd80      	pop	{r7, pc}
    d0c2:	bf00      	nop
    d0c4:	0000ed8c 	.word	0x0000ed8c

0000d0c8 <am_bsp_uart_string_print>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    d0c8:	b510      	push	{r4, lr}
    d0ca:	b086      	sub	sp, #24
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcString[ui32StrLen] != 0)
    d0cc:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    d0ce:	2300      	movs	r3, #0
    d0d0:	9300      	str	r3, [sp, #0]
    while (pcString[ui32StrLen] != 0)
    d0d2:	b134      	cbz	r4, d0e2 <am_bsp_uart_string_print+0x1a>
    d0d4:	461c      	mov	r4, r3
    d0d6:	4601      	mov	r1, r0
    d0d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        ui32StrLen++;
    d0dc:	3401      	adds	r4, #1
    while (pcString[ui32StrLen] != 0)
    d0de:	2a00      	cmp	r2, #0
    d0e0:	d1fa      	bne.n	d0d8 <am_bsp_uart_string_print+0x10>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d0e2:	4b0a      	ldr	r3, [pc, #40]	; (d10c <am_bsp_uart_string_print+0x44>)
    const am_hal_uart_transfer_t sUartWrite =
    d0e4:	9002      	str	r0, [sp, #8]
    d0e6:	2200      	movs	r2, #0
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d0e8:	6818      	ldr	r0, [r3, #0]
    const am_hal_uart_transfer_t sUartWrite =
    d0ea:	9403      	str	r4, [sp, #12]
    d0ec:	f04f 33ff 	mov.w	r3, #4294967295
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d0f0:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    d0f2:	9201      	str	r2, [sp, #4]
    d0f4:	9304      	str	r3, [sp, #16]
    d0f6:	f8cd d014 	str.w	sp, [sp, #20]
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d0fa:	f000 ff71 	bl	dfe0 <am_hal_uart_transfer>

    if (ui32BytesWritten != ui32StrLen)
    d0fe:	9800      	ldr	r0, [sp, #0]
    d100:	42a0      	cmp	r0, r4
    d102:	d000      	beq.n	d106 <am_bsp_uart_string_print+0x3e>
    d104:	e7fe      	b.n	d104 <am_bsp_uart_string_print+0x3c>
        //
        // Couldn't send the whole string!!
        //
        while(1);
    }
} // am_bsp_uart_string_print()
    d106:	b006      	add	sp, #24
    d108:	bd10      	pop	{r4, pc}
    d10a:	bf00      	nop
    d10c:	1000112c 	.word	0x1000112c

0000d110 <am_bsp_low_power_init>:
{
    d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    am_hal_itm_disable();
    d112:	f000 fbcb 	bl	d8ac <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d116:	2000      	movs	r0, #0
    d118:	f7ff f92a 	bl	c370 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d11c:	4b12      	ldr	r3, [pc, #72]	; (d168 <am_bsp_low_power_init+0x58>)
    d11e:	4f13      	ldr	r7, [pc, #76]	; (d16c <am_bsp_low_power_init+0x5c>)
    d120:	6819      	ldr	r1, [r3, #0]
    d122:	2029      	movs	r0, #41	; 0x29
    d124:	f000 fa34 	bl	d590 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d128:	f000 fd4a 	bl	dbc0 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d12c:	2001      	movs	r0, #1
    d12e:	f000 fd85 	bl	dc3c <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d132:	2100      	movs	r1, #0
    d134:	2003      	movs	r0, #3
    d136:	f000 f89f 	bl	d278 <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d13a:	f000 fd8b 	bl	dc54 <am_hal_rtc_osc_disable>
    d13e:	480c      	ldr	r0, [pc, #48]	; (d170 <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d140:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d142:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d144:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d148:	4631      	mov	r1, r6
    d14a:	4628      	mov	r0, r5
    d14c:	f000 fa20 	bl	d590 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d150:	2103      	movs	r1, #3
    d152:	4628      	mov	r0, r5
    d154:	f000 fb5e 	bl	d814 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d158:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d15a:	4628      	mov	r0, r5
    d15c:	2100      	movs	r1, #0
    d15e:	f000 fb59 	bl	d814 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d162:	2c05      	cmp	r4, #5
    d164:	d1ee      	bne.n	d144 <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d168:	0000edd4 	.word	0x0000edd4
    d16c:	10001000 	.word	0x10001000
    d170:	0000edd8 	.word	0x0000edd8

0000d174 <am_bsp_uart_printf_enable>:
// Initialize and configure the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_enable(void)
{
    d174:	b510      	push	{r4, lr}
    //
    // Initialize, power up, and configure the communication UART. Use the
    // custom configuration if it was provided. Otherwise, just use the default
    // configuration.
    //
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d176:	4c10      	ldr	r4, [pc, #64]	; (d1b8 <am_bsp_uart_printf_enable+0x44>)
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d178:	4b10      	ldr	r3, [pc, #64]	; (d1bc <am_bsp_uart_printf_enable+0x48>)
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d17a:	4621      	mov	r1, r4
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d17c:	2202      	movs	r2, #2
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d17e:	2000      	movs	r0, #0
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d180:	601a      	str	r2, [r3, #0]
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d182:	f000 fd95 	bl	dcb0 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    d186:	2200      	movs	r2, #0
    d188:	4611      	mov	r1, r2
    d18a:	6820      	ldr	r0, [r4, #0]
    d18c:	f000 fdcc 	bl	dd28 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d190:	6820      	ldr	r0, [r4, #0]
    d192:	490b      	ldr	r1, [pc, #44]	; (d1c0 <am_bsp_uart_printf_enable+0x4c>)

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d194:	4c0b      	ldr	r4, [pc, #44]	; (d1c4 <am_bsp_uart_printf_enable+0x50>)
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d196:	f000 fe39 	bl	de0c <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    d19a:	490b      	ldr	r1, [pc, #44]	; (d1c8 <am_bsp_uart_printf_enable+0x54>)
    d19c:	2016      	movs	r0, #22
    d19e:	6809      	ldr	r1, [r1, #0]
    d1a0:	f000 f9f6 	bl	d590 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d1a4:	6821      	ldr	r1, [r4, #0]
    d1a6:	2017      	movs	r0, #23
    d1a8:	f000 f9f2 	bl	d590 <am_hal_gpio_pinconfig>

    //
    // Register the BSP print function to the STDIO driver.
    //
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d1ac:	4807      	ldr	r0, [pc, #28]	; (d1cc <am_bsp_uart_printf_enable+0x58>)
} // am_bsp_uart_printf_enable()
    d1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d1b2:	f7ff b8dd 	b.w	c370 <am_util_stdio_printf_init>
    d1b6:	bf00      	nop
    d1b8:	1000112c 	.word	0x1000112c
    d1bc:	10001130 	.word	0x10001130
    d1c0:	0000eda0 	.word	0x0000eda0
    d1c4:	0000edc8 	.word	0x0000edc8
    d1c8:	0000edcc 	.word	0x0000edcc
    d1cc:	0000d0c9 	.word	0x0000d0c9

0000d1d0 <am_bsp_uart_printf_disable>:
// Disable the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_disable(void)
{
    d1d0:	b510      	push	{r4, lr}
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d1d2:	4c0d      	ldr	r4, [pc, #52]	; (d208 <am_bsp_uart_printf_disable+0x38>)
    d1d4:	6820      	ldr	r0, [r4, #0]
    d1d6:	f001 fb87 	bl	e8e8 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d1da:	2000      	movs	r0, #0
    d1dc:	f7ff f8c8 	bl	c370 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d1e0:	2200      	movs	r2, #0
    d1e2:	2102      	movs	r1, #2
    d1e4:	6820      	ldr	r0, [r4, #0]
    d1e6:	f000 fd9f 	bl	dd28 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d1ea:	6820      	ldr	r0, [r4, #0]
    d1ec:	f000 fd88 	bl	dd00 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d1f0:	4b06      	ldr	r3, [pc, #24]	; (d20c <am_bsp_uart_printf_disable+0x3c>)
    d1f2:	681c      	ldr	r4, [r3, #0]
    d1f4:	2016      	movs	r0, #22
    d1f6:	4621      	mov	r1, r4
    d1f8:	f000 f9ca 	bl	d590 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d1fc:	4621      	mov	r1, r4
    d1fe:	2017      	movs	r0, #23

} // am_bsp_uart_printf_disable()
    d200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d204:	f000 b9c4 	b.w	d590 <am_hal_gpio_pinconfig>
    d208:	1000112c 	.word	0x1000112c
    d20c:	0000edd4 	.word	0x0000edd4

0000d210 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d210:	b530      	push	{r4, r5, lr}
    d212:	b083      	sub	sp, #12
    d214:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d216:	f000 fb41 	bl	d89c <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d21a:	4c11      	ldr	r4, [pc, #68]	; (d260 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d21c:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d21e:	6823      	ldr	r3, [r4, #0]
    d220:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d224:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d226:	9801      	ldr	r0, [sp, #4]
    d228:	f000 fb3c 	bl	d8a4 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d22c:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d22e:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d230:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d232:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d234:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d236:	005d      	lsls	r5, r3, #1
    d238:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d23c:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d23e:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d240:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d244:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d246:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d24a:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d24e:	0212      	lsls	r2, r2, #8
    d250:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d254:	432b      	orrs	r3, r5
    d256:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d258:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d25a:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d25c:	b003      	add	sp, #12
    d25e:	bd30      	pop	{r4, r5, pc}
    d260:	40018000 	.word	0x40018000

0000d264 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d264:	4a03      	ldr	r2, [pc, #12]	; (d274 <am_hal_cachectrl_enable+0x10>)
    d266:	6813      	ldr	r3, [r2, #0]
    d268:	f043 0001 	orr.w	r0, r3, #1
    d26c:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d26e:	2000      	movs	r0, #0
    d270:	4770      	bx	lr
    d272:	bf00      	nop
    d274:	40018000 	.word	0x40018000

0000d278 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d278:	2809      	cmp	r0, #9
    d27a:	d852      	bhi.n	d322 <am_hal_clkgen_control+0xaa>
    d27c:	e8df f000 	tbb	[pc, r0]
    d280:	2b21190d 	.word	0x2b21190d
    d284:	51513d33 	.word	0x51513d33
    d288:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d28a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d28e:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d290:	6a1a      	ldr	r2, [r3, #32]
    d292:	f36f 0200 	bfc	r2, #0, #1
    d296:	621a      	str	r2, [r3, #32]
            break;
    d298:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d29a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d29e:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d2a0:	2047      	movs	r0, #71	; 0x47
    d2a2:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d2a6:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d2aa:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d2ac:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d2b0:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2b2:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2b6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2b8:	68ca      	ldr	r2, [r1, #12]
    d2ba:	f022 0301 	bic.w	r3, r2, #1
    d2be:	60cb      	str	r3, [r1, #12]
            break;
    d2c0:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2c2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2c6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d2cc:	f022 0302 	bic.w	r3, r2, #2
    d2d0:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d2d4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2da:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2dc:	68d3      	ldr	r3, [r2, #12]
    d2de:	f043 0101 	orr.w	r1, r3, #1
    d2e2:	60d1      	str	r1, [r2, #12]
            break;
    d2e4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2e6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2ea:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2ec:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d2f0:	f043 0102 	orr.w	r1, r3, #2
    d2f4:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d2f8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d2fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d2fe:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d300:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d302:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d304:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d306:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d308:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d30a:	615a      	str	r2, [r3, #20]
            break;
    d30c:	4770      	bx	lr
            if ( pArgs == 0 )
    d30e:	b151      	cbz	r1, d326 <am_hal_clkgen_control+0xae>
    d310:	6808      	ldr	r0, [r1, #0]
    d312:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d316:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d31a:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d31c:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d320:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d322:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d324:	4770      	bx	lr
    d326:	4901      	ldr	r1, [pc, #4]	; (d32c <am_hal_clkgen_control+0xb4>)
    d328:	e7f5      	b.n	d316 <am_hal_clkgen_control+0x9e>
    d32a:	bf00      	nop
    d32c:	0025b801 	.word	0x0025b801

0000d330 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d330:	4b00      	ldr	r3, [pc, #0]	; (d334 <am_hal_flash_delay+0x4>)
    d332:	4718      	bx	r3
    d334:	0800009d 	.word	0x0800009d

0000d338 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d33c:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d340:	f8df 8248 	ldr.w	r8, [pc, #584]	; d58c <am_hal_flash_delay_status_check+0x254>
{
    d344:	4607      	mov	r7, r0
    d346:	460c      	mov	r4, r1
    d348:	4615      	mov	r5, r2
    d34a:	461e      	mov	r6, r3
    d34c:	f1be 0f00 	cmp.w	lr, #0
    d350:	f000 808e 	beq.w	d470 <am_hal_flash_delay_status_check+0x138>
    d354:	f010 0907 	ands.w	r9, r0, #7
    d358:	d044      	beq.n	d3e4 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d35a:	680b      	ldr	r3, [r1, #0]
    d35c:	4013      	ands	r3, r2
    d35e:	429e      	cmp	r6, r3
    d360:	f000 8083 	beq.w	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d364:	2001      	movs	r0, #1
    d366:	47c0      	blx	r8
    d368:	f1b9 0f01 	cmp.w	r9, #1
    d36c:	f107 37ff 	add.w	r7, r7, #4294967295
    d370:	d038      	beq.n	d3e4 <am_hal_flash_delay_status_check+0xac>
    d372:	f1b9 0f02 	cmp.w	r9, #2
    d376:	d02e      	beq.n	d3d6 <am_hal_flash_delay_status_check+0x9e>
    d378:	f1b9 0f03 	cmp.w	r9, #3
    d37c:	d024      	beq.n	d3c8 <am_hal_flash_delay_status_check+0x90>
    d37e:	f1b9 0f04 	cmp.w	r9, #4
    d382:	d01a      	beq.n	d3ba <am_hal_flash_delay_status_check+0x82>
    d384:	f1b9 0f05 	cmp.w	r9, #5
    d388:	d010      	beq.n	d3ac <am_hal_flash_delay_status_check+0x74>
    d38a:	f1b9 0f06 	cmp.w	r9, #6
    d38e:	d006      	beq.n	d39e <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d390:	6820      	ldr	r0, [r4, #0]
    d392:	4028      	ands	r0, r5
    d394:	4286      	cmp	r6, r0
    d396:	d068      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d398:	2001      	movs	r0, #1
    d39a:	47c0      	blx	r8
    d39c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d39e:	6821      	ldr	r1, [r4, #0]
    d3a0:	4029      	ands	r1, r5
    d3a2:	428e      	cmp	r6, r1
    d3a4:	d061      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3a6:	2001      	movs	r0, #1
    d3a8:	47c0      	blx	r8
    d3aa:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3ac:	6822      	ldr	r2, [r4, #0]
    d3ae:	402a      	ands	r2, r5
    d3b0:	4296      	cmp	r6, r2
    d3b2:	d05a      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3b4:	2001      	movs	r0, #1
    d3b6:	47c0      	blx	r8
    d3b8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3ba:	6823      	ldr	r3, [r4, #0]
    d3bc:	402b      	ands	r3, r5
    d3be:	429e      	cmp	r6, r3
    d3c0:	d053      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3c2:	2001      	movs	r0, #1
    d3c4:	47c0      	blx	r8
    d3c6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3c8:	6820      	ldr	r0, [r4, #0]
    d3ca:	4028      	ands	r0, r5
    d3cc:	4286      	cmp	r6, r0
    d3ce:	d04c      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3d0:	2001      	movs	r0, #1
    d3d2:	47c0      	blx	r8
    d3d4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3d6:	6821      	ldr	r1, [r4, #0]
    d3d8:	4029      	ands	r1, r5
    d3da:	428e      	cmp	r6, r1
    d3dc:	d045      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3de:	2001      	movs	r0, #1
    d3e0:	3f01      	subs	r7, #1
    d3e2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3e4:	6822      	ldr	r2, [r4, #0]
    d3e6:	402a      	ands	r2, r5
    d3e8:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3ea:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3ee:	d03c      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d3f0:	2f00      	cmp	r7, #0
    d3f2:	f000 80c8 	beq.w	d586 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3f6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3f8:	6823      	ldr	r3, [r4, #0]
    d3fa:	402b      	ands	r3, r5
    d3fc:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3fe:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d402:	d032      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d404:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d406:	6821      	ldr	r1, [r4, #0]
    d408:	4029      	ands	r1, r5
    d40a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d40c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d410:	d02b      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d412:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d414:	6822      	ldr	r2, [r4, #0]
    d416:	402a      	ands	r2, r5
    d418:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d41a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d41e:	d024      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d420:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d422:	6823      	ldr	r3, [r4, #0]
    d424:	402b      	ands	r3, r5
    d426:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d428:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d42c:	d01d      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d42e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d430:	6821      	ldr	r1, [r4, #0]
    d432:	4029      	ands	r1, r5
    d434:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d436:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d43a:	d016      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d43c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d43e:	6822      	ldr	r2, [r4, #0]
    d440:	402a      	ands	r2, r5
    d442:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d444:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d448:	d00f      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d44a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d44c:	6820      	ldr	r0, [r4, #0]
    d44e:	4028      	ands	r0, r5
    d450:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d452:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d456:	d008      	beq.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d458:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d45a:	6822      	ldr	r2, [r4, #0]
    d45c:	402a      	ands	r2, r5
    d45e:	4296      	cmp	r6, r2
    d460:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d464:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d468:	d1c2      	bne.n	d3f0 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d46a:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d470:	f010 0907 	ands.w	r9, r0, #7
    d474:	d043      	beq.n	d4fe <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d476:	680b      	ldr	r3, [r1, #0]
    d478:	4013      	ands	r3, r2
    d47a:	429e      	cmp	r6, r3
    d47c:	d1f5      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d47e:	2001      	movs	r0, #1
    d480:	47c0      	blx	r8
    d482:	f1b9 0f01 	cmp.w	r9, #1
    d486:	f107 37ff 	add.w	r7, r7, #4294967295
    d48a:	d038      	beq.n	d4fe <am_hal_flash_delay_status_check+0x1c6>
    d48c:	f1b9 0f02 	cmp.w	r9, #2
    d490:	d02e      	beq.n	d4f0 <am_hal_flash_delay_status_check+0x1b8>
    d492:	f1b9 0f03 	cmp.w	r9, #3
    d496:	d024      	beq.n	d4e2 <am_hal_flash_delay_status_check+0x1aa>
    d498:	f1b9 0f04 	cmp.w	r9, #4
    d49c:	d01a      	beq.n	d4d4 <am_hal_flash_delay_status_check+0x19c>
    d49e:	f1b9 0f05 	cmp.w	r9, #5
    d4a2:	d010      	beq.n	d4c6 <am_hal_flash_delay_status_check+0x18e>
    d4a4:	f1b9 0f06 	cmp.w	r9, #6
    d4a8:	d006      	beq.n	d4b8 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4aa:	6821      	ldr	r1, [r4, #0]
    d4ac:	4029      	ands	r1, r5
    d4ae:	428e      	cmp	r6, r1
    d4b0:	d1db      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4b2:	2001      	movs	r0, #1
    d4b4:	47c0      	blx	r8
    d4b6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4b8:	6822      	ldr	r2, [r4, #0]
    d4ba:	402a      	ands	r2, r5
    d4bc:	4296      	cmp	r6, r2
    d4be:	d1d4      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4c0:	2001      	movs	r0, #1
    d4c2:	47c0      	blx	r8
    d4c4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4c6:	6820      	ldr	r0, [r4, #0]
    d4c8:	4028      	ands	r0, r5
    d4ca:	4286      	cmp	r6, r0
    d4cc:	d1cd      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4ce:	2001      	movs	r0, #1
    d4d0:	47c0      	blx	r8
    d4d2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4d4:	6823      	ldr	r3, [r4, #0]
    d4d6:	402b      	ands	r3, r5
    d4d8:	429e      	cmp	r6, r3
    d4da:	d1c6      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4dc:	2001      	movs	r0, #1
    d4de:	47c0      	blx	r8
    d4e0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4e2:	6821      	ldr	r1, [r4, #0]
    d4e4:	4029      	ands	r1, r5
    d4e6:	428e      	cmp	r6, r1
    d4e8:	d1bf      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4ea:	2001      	movs	r0, #1
    d4ec:	47c0      	blx	r8
    d4ee:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4f0:	6822      	ldr	r2, [r4, #0]
    d4f2:	402a      	ands	r2, r5
    d4f4:	4296      	cmp	r6, r2
    d4f6:	d1b8      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4f8:	2001      	movs	r0, #1
    d4fa:	3f01      	subs	r7, #1
    d4fc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4fe:	6823      	ldr	r3, [r4, #0]
    d500:	402b      	ands	r3, r5
    d502:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d504:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d508:	d1af      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d50a:	2f00      	cmp	r7, #0
    d50c:	d03b      	beq.n	d586 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d50e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d510:	6821      	ldr	r1, [r4, #0]
    d512:	4029      	ands	r1, r5
    d514:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d516:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d51a:	d1a6      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d51c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d51e:	6822      	ldr	r2, [r4, #0]
    d520:	402a      	ands	r2, r5
    d522:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d524:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d528:	d19f      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d52a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d52c:	6823      	ldr	r3, [r4, #0]
    d52e:	402b      	ands	r3, r5
    d530:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d532:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d536:	d198      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d538:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d53a:	6821      	ldr	r1, [r4, #0]
    d53c:	4029      	ands	r1, r5
    d53e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d540:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d544:	d191      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d546:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d548:	6822      	ldr	r2, [r4, #0]
    d54a:	402a      	ands	r2, r5
    d54c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d54e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d552:	d18a      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d554:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d556:	6823      	ldr	r3, [r4, #0]
    d558:	402b      	ands	r3, r5
    d55a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d55c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d560:	d183      	bne.n	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d562:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d564:	6820      	ldr	r0, [r4, #0]
    d566:	4028      	ands	r0, r5
    d568:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d56a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d56e:	f47f af7c 	bne.w	d46a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d572:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d574:	6823      	ldr	r3, [r4, #0]
    d576:	402b      	ands	r3, r5
    d578:	429e      	cmp	r6, r3
    d57a:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d57e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d582:	d0c2      	beq.n	d50a <am_hal_flash_delay_status_check+0x1d2>
    d584:	e771      	b.n	d46a <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d586:	2004      	movs	r0, #4
    d588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d58c:	0800009d 	.word	0x0800009d

0000d590 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d590:	2831      	cmp	r0, #49	; 0x31
    d592:	d901      	bls.n	d598 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d594:	2006      	movs	r0, #6
    d596:	4770      	bx	lr
{
    d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d59c:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d5a0:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d5a4:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d5a6:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d5aa:	d014      	beq.n	d5d6 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d5ac:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d5b0:	1db2      	adds	r2, r6, #6
    d5b2:	f002 0707 	and.w	r7, r2, #7
    d5b6:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d5b8:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d5bc:	f200 80ab 	bhi.w	d716 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d5c0:	4a85      	ldr	r2, [pc, #532]	; (d7d8 <am_hal_gpio_pinconfig+0x248>)
    d5c2:	5c17      	ldrb	r7, [r2, r0]
    d5c4:	07ff      	lsls	r7, r7, #31
    d5c6:	d403      	bmi.n	d5d0 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d5c8:	4884      	ldr	r0, [pc, #528]	; (d7dc <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d5ca:	b007      	add	sp, #28
    d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d5d0:	1eb4      	subs	r4, r6, #2
    d5d2:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d5d6:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d5da:	2e00      	cmp	r6, #0
    d5dc:	f040 8095 	bne.w	d70a <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d5e0:	4a7f      	ldr	r2, [pc, #508]	; (d7e0 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d5e2:	4f80      	ldr	r7, [pc, #512]	; (d7e4 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d5e4:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d5e6:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d5ea:	411e      	asrs	r6, r3
    d5ec:	f016 0f01 	tst.w	r6, #1
    d5f0:	bf0c      	ite	eq
    d5f2:	2600      	moveq	r6, #0
    d5f4:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d5f6:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d5f8:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d5fc:	f000 8097 	beq.w	d72e <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d600:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d604:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d606:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d60a:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d60e:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d610:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d614:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d618:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d61c:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d620:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d622:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d626:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d62a:	f000 808d 	beq.w	d748 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d62e:	4a6e      	ldr	r2, [pc, #440]	; (d7e8 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d630:	6816      	ldr	r6, [r2, #0]
    d632:	1b8c      	subs	r4, r1, r6
    d634:	fab4 f384 	clz	r3, r4
    d638:	095f      	lsrs	r7, r3, #5
    d63a:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d63c:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d640:	bf04      	itt	eq
    d642:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d646:	f367 0800 	bfieq	r8, r7, #0, #1
    d64a:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d64c:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d650:	2902      	cmp	r1, #2
    d652:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d656:	d07a      	beq.n	d74e <am_hal_gpio_pinconfig+0x1be>
    d658:	d87f      	bhi.n	d75a <am_hal_gpio_pinconfig+0x1ca>
    d65a:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d65c:	bf08      	it	eq
    d65e:	f045 0504 	orreq.w	r5, r5, #4
    d662:	f004 0a18 	and.w	sl, r4, #24
            break;
    d666:	2200      	movs	r2, #0
    d668:	4604      	mov	r4, r0
    d66a:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d66c:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d670:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d674:	485d      	ldr	r0, [pc, #372]	; (d7ec <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d676:	495e      	ldr	r1, [pc, #376]	; (d7f0 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d678:	4f5e      	ldr	r7, [pc, #376]	; (d7f4 <am_hal_gpio_pinconfig+0x264>)
    d67a:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d67c:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d680:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d684:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d688:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d68a:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d68e:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d690:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d694:	f000 f902 	bl	d89c <am_hal_interrupt_master_disable>
    d698:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d69a:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d69e:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d6a2:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d6a6:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d6aa:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d6ac:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d6b0:	9902      	ldr	r1, [sp, #8]
    d6b2:	9a03      	ldr	r2, [sp, #12]
    d6b4:	b150      	cbz	r0, d6cc <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d6b6:	f004 001f 	and.w	r0, r4, #31
    d6ba:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d6be:	f04f 0c01 	mov.w	ip, #1
    d6c2:	4c4d      	ldr	r4, [pc, #308]	; (d7f8 <am_hal_gpio_pinconfig+0x268>)
    d6c4:	fa0c f000 	lsl.w	r0, ip, r0
    d6c8:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d6cc:	484b      	ldr	r0, [pc, #300]	; (d7fc <am_hal_gpio_pinconfig+0x26c>)
    d6ce:	2473      	movs	r4, #115	; 0x73
    d6d0:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d6d2:	f8da 4000 	ldr.w	r4, [sl]
    d6d6:	4034      	ands	r4, r6
    d6d8:	4325      	orrs	r5, r4
    d6da:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d6de:	f859 5001 	ldr.w	r5, [r9, r1]
    d6e2:	402f      	ands	r7, r5
    d6e4:	ea47 0708 	orr.w	r7, r7, r8
    d6e8:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d6ec:	f85b 1003 	ldr.w	r1, [fp, r3]
    d6f0:	400e      	ands	r6, r1
    d6f2:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d6f4:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d6f6:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d6fa:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d6fc:	9805      	ldr	r0, [sp, #20]
    d6fe:	f000 f8d1 	bl	d8a4 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d702:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d704:	b007      	add	sp, #28
    d706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d70a:	2e01      	cmp	r6, #1
    d70c:	d015      	beq.n	d73a <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d70e:	2e02      	cmp	r6, #2
    d710:	d030      	beq.n	d774 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d712:	483b      	ldr	r0, [pc, #236]	; (d800 <am_hal_gpio_pinconfig+0x270>)
    d714:	e759      	b.n	d5ca <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d716:	2cc0      	cmp	r4, #192	; 0xc0
    d718:	d027      	beq.n	d76a <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d71a:	2c20      	cmp	r4, #32
    d71c:	f47f af5b 	bne.w	d5d6 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d720:	4c2d      	ldr	r4, [pc, #180]	; (d7d8 <am_hal_gpio_pinconfig+0x248>)
    d722:	5c26      	ldrb	r6, [r4, r0]
    d724:	f016 0f09 	tst.w	r6, #9
    d728:	f47f af4e 	bne.w	d5c8 <am_hal_gpio_pinconfig+0x38>
    d72c:	e753      	b.n	d5d6 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d72e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d732:	2a07      	cmp	r2, #7
    d734:	d125      	bne.n	d782 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d736:	4833      	ldr	r0, [pc, #204]	; (d804 <am_hal_gpio_pinconfig+0x274>)
    d738:	e747      	b.n	d5ca <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d73a:	4c27      	ldr	r4, [pc, #156]	; (d7d8 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d73c:	5c26      	ldrb	r6, [r4, r0]
    d73e:	07b4      	lsls	r4, r6, #30
    d740:	d5e7      	bpl.n	d712 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d742:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d746:	e74b      	b.n	d5e0 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d748:	2701      	movs	r7, #1
    d74a:	9700      	str	r7, [sp, #0]
    d74c:	e776      	b.n	d63c <am_hal_gpio_pinconfig+0xac>
    d74e:	f004 0a18 	and.w	sl, r4, #24
    d752:	2301      	movs	r3, #1
    d754:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d758:	e786      	b.n	d668 <am_hal_gpio_pinconfig+0xd8>
    d75a:	f004 0a18 	and.w	sl, r4, #24
    d75e:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d760:	f045 0504 	orr.w	r5, r5, #4
    d764:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d768:	e77e      	b.n	d668 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d76a:	2814      	cmp	r0, #20
    d76c:	f43f af33 	beq.w	d5d6 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d770:	4825      	ldr	r0, [pc, #148]	; (d808 <am_hal_gpio_pinconfig+0x278>)
    d772:	e72a      	b.n	d5ca <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d774:	4a18      	ldr	r2, [pc, #96]	; (d7d8 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d776:	5c17      	ldrb	r7, [r2, r0]
    d778:	077a      	lsls	r2, r7, #29
    d77a:	d5ca      	bpl.n	d712 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d77c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d780:	e72e      	b.n	d5e0 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d782:	4c22      	ldr	r4, [pc, #136]	; (d80c <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d784:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d788:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d78c:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d790:	45b0      	cmp	r8, r6
    d792:	d010      	beq.n	d7b6 <am_hal_gpio_pinconfig+0x226>
    d794:	0087      	lsls	r7, r0, #2
    d796:	eb04 0907 	add.w	r9, r4, r7
    d79a:	f899 3001 	ldrb.w	r3, [r9, #1]
    d79e:	42b3      	cmp	r3, r6
    d7a0:	d015      	beq.n	d7ce <am_hal_gpio_pinconfig+0x23e>
    d7a2:	f899 2002 	ldrb.w	r2, [r9, #2]
    d7a6:	42b2      	cmp	r2, r6
    d7a8:	d00f      	beq.n	d7ca <am_hal_gpio_pinconfig+0x23a>
    d7aa:	f899 4003 	ldrb.w	r4, [r9, #3]
    d7ae:	42b4      	cmp	r4, r6
    d7b0:	d00f      	beq.n	d7d2 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d7b2:	4817      	ldr	r0, [pc, #92]	; (d810 <am_hal_gpio_pinconfig+0x280>)
    d7b4:	e709      	b.n	d5ca <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d7b6:	2600      	movs	r6, #0
    d7b8:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d7ba:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d7bc:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    d7c0:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d7c2:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    d7c6:	9300      	str	r3, [sp, #0]
    d7c8:	e740      	b.n	d64c <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d7ca:	2602      	movs	r6, #2
    d7cc:	e7f5      	b.n	d7ba <am_hal_gpio_pinconfig+0x22a>
    d7ce:	2601      	movs	r6, #1
    d7d0:	e7f3      	b.n	d7ba <am_hal_gpio_pinconfig+0x22a>
    d7d2:	2603      	movs	r6, #3
    d7d4:	e7f1      	b.n	d7ba <am_hal_gpio_pinconfig+0x22a>
    d7d6:	bf00      	nop
    d7d8:	0000eddc 	.word	0x0000eddc
    d7dc:	08000100 	.word	0x08000100
    d7e0:	0000ee10 	.word	0x0000ee10
    d7e4:	0000ef0c 	.word	0x0000ef0c
    d7e8:	0000edd4 	.word	0x0000edd4
    d7ec:	7ffffffc 	.word	0x7ffffffc
    d7f0:	400100e0 	.word	0x400100e0
    d7f4:	40010040 	.word	0x40010040
    d7f8:	400100b4 	.word	0x400100b4
    d7fc:	40010000 	.word	0x40010000
    d800:	08000102 	.word	0x08000102
    d804:	08000103 	.word	0x08000103
    d808:	08000101 	.word	0x08000101
    d80c:	0000ee44 	.word	0x0000ee44
    d810:	08000104 	.word	0x08000104

0000d814 <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d814:	2831      	cmp	r0, #49	; 0x31
    d816:	d901      	bls.n	d81c <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d818:	2005      	movs	r0, #5
    d81a:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d81c:	2905      	cmp	r1, #5
    d81e:	d901      	bls.n	d824 <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d820:	2006      	movs	r0, #6
    d822:	4770      	bx	lr
{
    d824:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d826:	f000 031f 	and.w	r3, r0, #31
{
    d82a:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d82c:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d82e:	2201      	movs	r2, #1
    d830:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d832:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d836:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    d83a:	f000 f82f 	bl	d89c <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    d83e:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    d840:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    d842:	2904      	cmp	r1, #4
    d844:	d817      	bhi.n	d876 <am_hal_gpio_state_write+0x62>
    d846:	e8df f001 	tbb	[pc, r1]
    d84a:	0e13      	.short	0x0e13
    d84c:	030b      	.short	0x030b
    d84e:	19          	.byte	0x19
    d84f:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    d850:	4d0d      	ldr	r5, [pc, #52]	; (d888 <am_hal_gpio_state_write+0x74>)
    d852:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    d854:	9801      	ldr	r0, [sp, #4]
    d856:	f000 f825 	bl	d8a4 <am_hal_interrupt_master_set>

    return ui32Return;
    d85a:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    d85c:	b002      	add	sp, #8
    d85e:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    d860:	4b0a      	ldr	r3, [pc, #40]	; (d88c <am_hal_gpio_state_write+0x78>)
    d862:	50e6      	str	r6, [r4, r3]
            break;
    d864:	e7f6      	b.n	d854 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    d866:	480a      	ldr	r0, [pc, #40]	; (d890 <am_hal_gpio_state_write+0x7c>)
    d868:	5822      	ldr	r2, [r4, r0]
    d86a:	4072      	eors	r2, r6
    d86c:	5022      	str	r2, [r4, r0]
            break;
    d86e:	e7f1      	b.n	d854 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    d870:	4908      	ldr	r1, [pc, #32]	; (d894 <am_hal_gpio_state_write+0x80>)
    d872:	5066      	str	r6, [r4, r1]
            break;
    d874:	e7ee      	b.n	d854 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    d876:	4d08      	ldr	r5, [pc, #32]	; (d898 <am_hal_gpio_state_write+0x84>)
    d878:	5166      	str	r6, [r4, r5]
            break;
    d87a:	e7eb      	b.n	d854 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    d87c:	4803      	ldr	r0, [pc, #12]	; (d88c <am_hal_gpio_state_write+0x78>)
    d87e:	5823      	ldr	r3, [r4, r0]
    d880:	4073      	eors	r3, r6
    d882:	5023      	str	r3, [r4, r0]
            break;
    d884:	e7e6      	b.n	d854 <am_hal_gpio_state_write+0x40>
    d886:	bf00      	nop
    d888:	400100a8 	.word	0x400100a8
    d88c:	400100b4 	.word	0x400100b4
    d890:	40010088 	.word	0x40010088
    d894:	40010090 	.word	0x40010090
    d898:	40010098 	.word	0x40010098

0000d89c <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    d89c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    d8a0:	b672      	cpsid	i
    __asm("    bx lr");
    d8a2:	4770      	bx	lr

0000d8a4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    d8a4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    d8a8:	4770      	bx	lr
    d8aa:	bf00      	nop

0000d8ac <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    d8ac:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    d8ae:	4b24      	ldr	r3, [pc, #144]	; (d940 <am_hal_itm_disable+0x94>)
    d8b0:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    d8b4:	b9b0      	cbnz	r0, d8e4 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d8b6:	4923      	ldr	r1, [pc, #140]	; (d944 <am_hal_itm_disable+0x98>)
    d8b8:	68ca      	ldr	r2, [r1, #12]
    d8ba:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    d8be:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    d8c0:	68cb      	ldr	r3, [r1, #12]
    d8c2:	01da      	lsls	r2, r3, #7
    d8c4:	d5fc      	bpl.n	d8c0 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    d8c6:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    d8ca:	481f      	ldr	r0, [pc, #124]	; (d948 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    d8cc:	4a1f      	ldr	r2, [pc, #124]	; (d94c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d8ce:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    d8d2:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    d8d4:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    d8d8:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    d8dc:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    d8e0:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    d8e4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    d8e8:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    d8ec:	021b      	lsls	r3, r3, #8
    d8ee:	d4fb      	bmi.n	d8e8 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    d8f0:	f240 20f7 	movw	r0, #759	; 0x2f7
    d8f4:	f7ff fd1c 	bl	d330 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    d8f8:	4813      	ldr	r0, [pc, #76]	; (d948 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d8fa:	4915      	ldr	r1, [pc, #84]	; (d950 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d8fc:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d900:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    d904:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d906:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    d90a:	f022 0401 	bic.w	r4, r2, #1
    d90e:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d912:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    d916:	420b      	tst	r3, r1
    d918:	d1fb      	bne.n	d912 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    d91a:	3801      	subs	r0, #1
    d91c:	d1f3      	bne.n	d906 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d91e:	4909      	ldr	r1, [pc, #36]	; (d944 <am_hal_itm_disable+0x98>)
    d920:	68ca      	ldr	r2, [r1, #12]
    d922:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    d926:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    d928:	68cb      	ldr	r3, [r1, #12]
    d92a:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    d92e:	d1fb      	bne.n	d928 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    d930:	4903      	ldr	r1, [pc, #12]	; (d940 <am_hal_itm_disable+0x94>)
    d932:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    d936:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    d93a:	2a00      	cmp	r2, #0
    d93c:	d1fb      	bne.n	d936 <am_hal_itm_disable+0x8a>
}
    d93e:	bd10      	pop	{r4, pc}
    d940:	40020000 	.word	0x40020000
    d944:	e000edf0 	.word	0xe000edf0
    d948:	c5acce55 	.word	0xc5acce55
    d94c:	00150511 	.word	0x00150511
    d950:	00800001 	.word	0x00800001

0000d954 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    d954:	b141      	cbz	r1, d968 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    d956:	2801      	cmp	r0, #1
{
    d958:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    d95a:	d03a      	beq.n	d9d2 <am_hal_mcuctrl_info_get+0x7e>
    d95c:	d322      	bcc.n	d9a4 <am_hal_mcuctrl_info_get+0x50>
    d95e:	2802      	cmp	r0, #2
    d960:	d004      	beq.n	d96c <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d962:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    d964:	bcf0      	pop	{r4, r5, r6, r7}
    d966:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d968:	2006      	movs	r0, #6
    d96a:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    d96c:	4a41      	ldr	r2, [pc, #260]	; (da74 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    d96e:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    d970:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    d974:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    d976:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    d97a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    d97e:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    d982:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    d984:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    d986:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    d988:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    d98c:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    d98e:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    d992:	4334      	orrs	r4, r6
    d994:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    d996:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    d99a:	4310      	orrs	r0, r2
    d99c:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    d99e:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    d9a0:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    d9a2:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    d9a4:	4c33      	ldr	r4, [pc, #204]	; (da74 <am_hal_mcuctrl_info_get+0x120>)
    d9a6:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    d9a8:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    d9ac:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    d9b0:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    d9b2:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    d9b4:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    d9b8:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    d9bc:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    d9be:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    d9c0:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    d9c4:	f004 0501 	and.w	r5, r4, #1
    d9c8:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    d9ca:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    d9cc:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    d9ce:	bcf0      	pop	{r4, r5, r6, r7}
    d9d0:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    d9d2:	4a28      	ldr	r2, [pc, #160]	; (da74 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    d9d4:	4c28      	ldr	r4, [pc, #160]	; (da78 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    d9d6:	6813      	ldr	r3, [r2, #0]
    d9d8:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    d9da:	6850      	ldr	r0, [r2, #4]
    d9dc:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    d9de:	6897      	ldr	r7, [r2, #8]
    d9e0:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    d9e2:	68d6      	ldr	r6, [r2, #12]
    d9e4:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    d9e6:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    d9e8:	4824      	ldr	r0, [pc, #144]	; (da7c <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    d9ea:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    d9ec:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    d9f0:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    d9f4:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    d9f6:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    d9fa:	4a21      	ldr	r2, [pc, #132]	; (da80 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    d9fc:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    da00:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    da02:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    da06:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    da08:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    da0a:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    da0c:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    da10:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    da14:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    da16:	f000 040f 	and.w	r4, r0, #15
    da1a:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    da1e:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    da20:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    da24:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    da28:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    da2c:	f007 0c0f 	and.w	ip, r7, #15
    da30:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    da34:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    da36:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    da3a:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    da3e:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    da42:	f3c5 1703 	ubfx	r7, r5, #4, #4
    da46:	433b      	orrs	r3, r7
    da48:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    da4a:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    da4e:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    da52:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    da56:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    da5a:	b2e5      	uxtb	r5, r4
    da5c:	042b      	lsls	r3, r5, #16
    da5e:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    da62:	b2d6      	uxtb	r6, r2
    da64:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    da66:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    da68:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    da6c:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    da6e:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    da70:	bcf0      	pop	{r4, r5, r6, r7}
    da72:	4770      	bx	lr
    da74:	40020000 	.word	0x40020000
    da78:	0000ef40 	.word	0x0000ef40
    da7c:	0000ef80 	.word	0x0000ef80
    da80:	f0000f00 	.word	0xf0000f00

0000da84 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    da84:	b570      	push	{r4, r5, r6, lr}
    da86:	b082      	sub	sp, #8
    da88:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    da8a:	f7ff ff07 	bl	d89c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    da8e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    da92:	008c      	lsls	r4, r1, #2
    da94:	4e0e      	ldr	r6, [pc, #56]	; (dad0 <am_hal_pwrctrl_periph_enable+0x4c>)
    da96:	4d0f      	ldr	r5, [pc, #60]	; (dad4 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    da98:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    da9a:	592a      	ldr	r2, [r5, r4]
    da9c:	68b3      	ldr	r3, [r6, #8]
    da9e:	4313      	orrs	r3, r2
    daa0:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    daa2:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    daa4:	442c      	add	r4, r5
    AM_CRITICAL_END
    daa6:	f7ff fefd 	bl	d8a4 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    daaa:	2077      	movs	r0, #119	; 0x77
    daac:	f7ff fc40 	bl	d330 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dab0:	69b0      	ldr	r0, [r6, #24]
    dab2:	6864      	ldr	r4, [r4, #4]
    dab4:	4220      	tst	r0, r4
    dab6:	d103      	bne.n	dac0 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dab8:	2077      	movs	r0, #119	; 0x77
    daba:	f7ff fc39 	bl	d330 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dabe:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    dac0:	4903      	ldr	r1, [pc, #12]	; (dad0 <am_hal_pwrctrl_periph_enable+0x4c>)
    dac2:	698d      	ldr	r5, [r1, #24]
    dac4:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    dac6:	bf0c      	ite	eq
    dac8:	2001      	moveq	r0, #1
    daca:	2000      	movne	r0, #0
    dacc:	b002      	add	sp, #8
    dace:	bd70      	pop	{r4, r5, r6, pc}
    dad0:	40021000 	.word	0x40021000
    dad4:	0000f128 	.word	0x0000f128

0000dad8 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dad8:	b570      	push	{r4, r5, r6, lr}
    dada:	b082      	sub	sp, #8
    dadc:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    dade:	f7ff fedd 	bl	d89c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dae2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dae6:	008c      	lsls	r4, r1, #2
    dae8:	4e0f      	ldr	r6, [pc, #60]	; (db28 <am_hal_pwrctrl_periph_disable+0x50>)
    daea:	4d10      	ldr	r5, [pc, #64]	; (db2c <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    daec:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    daee:	68b3      	ldr	r3, [r6, #8]
    daf0:	592a      	ldr	r2, [r5, r4]
    daf2:	ea23 0002 	bic.w	r0, r3, r2
    daf6:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    daf8:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dafa:	442c      	add	r4, r5
    AM_CRITICAL_END
    dafc:	f7ff fed2 	bl	d8a4 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    db00:	2077      	movs	r0, #119	; 0x77
    db02:	f7ff fc15 	bl	d330 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    db06:	69b1      	ldr	r1, [r6, #24]
    db08:	6864      	ldr	r4, [r4, #4]
    db0a:	4221      	tst	r1, r4
    db0c:	d003      	beq.n	db16 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    db0e:	2077      	movs	r0, #119	; 0x77
    db10:	f7ff fc0e 	bl	d330 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    db14:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    db16:	4d04      	ldr	r5, [pc, #16]	; (db28 <am_hal_pwrctrl_periph_disable+0x50>)
    db18:	69ae      	ldr	r6, [r5, #24]
    db1a:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    db1c:	bf14      	ite	ne
    db1e:	2001      	movne	r0, #1
    db20:	2000      	moveq	r0, #0
    db22:	b002      	add	sp, #8
    db24:	bd70      	pop	{r4, r5, r6, pc}
    db26:	bf00      	nop
    db28:	40021000 	.word	0x40021000
    db2c:	0000f128 	.word	0x0000f128

0000db30 <am_hal_pwrctrl_memory_enable>:
//  Enable a configuration of memory.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_memory_enable(am_hal_pwrctrl_mem_e eMemConfig)
{
    db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if 0
    uint32_t ui32MemEventMask;
#endif
// #### INTERNAL END ####

    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    db34:	ea4f 0980 	mov.w	r9, r0, lsl #2
    db38:	eb09 0300 	add.w	r3, r9, r0
    db3c:	4f1e      	ldr	r7, [pc, #120]	; (dbb8 <am_hal_pwrctrl_memory_enable+0x88>)
{
    db3e:	4604      	mov	r4, r0
    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    db40:	0098      	lsls	r0, r3, #2
    db42:	183a      	adds	r2, r7, r0
    db44:	583d      	ldr	r5, [r7, r0]
#if 0
    ui32MemEventMask  = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEvent;
#endif
// #### INTERNAL END ####
    ui32MemRegionMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryMask;
    ui32MemStatusMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32StatusMask;
    db46:	6916      	ldr	r6, [r2, #16]
    //
    // Note that a deliberate disable step using a disable mask is taken here
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    db48:	43eb      	mvns	r3, r5
    db4a:	d126      	bne.n	db9a <am_hal_pwrctrl_memory_enable+0x6a>
// #### INTERNAL END ####

    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    db4c:	b965      	cbnz	r5, db68 <am_hal_pwrctrl_memory_enable+0x38>
    db4e:	444c      	add	r4, r9
    db50:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
    db54:	f8dc 5004 	ldr.w	r5, [ip, #4]

    //
    // Return status based on whether the power control memory status has reached the desired state.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    db58:	4918      	ldr	r1, [pc, #96]	; (dbbc <am_hal_pwrctrl_memory_enable+0x8c>)
    db5a:	694a      	ldr	r2, [r1, #20]
    db5c:	4032      	ands	r2, r6
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    db5e:	1b50      	subs	r0, r2, r5
    db60:	bf18      	it	ne
    db62:	2001      	movne	r0, #1
    db64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    db68:	f8df 8050 	ldr.w	r8, [pc, #80]	; dbbc <am_hal_pwrctrl_memory_enable+0x8c>
    db6c:	f8d8 0010 	ldr.w	r0, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    db70:	444c      	add	r4, r9
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    db72:	4305      	orrs	r5, r0
    db74:	f8c8 5010 	str.w	r5, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    db78:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    db7c:	2077      	movs	r0, #119	; 0x77
    db7e:	f7ff fbd7 	bl	d330 <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    db82:	f8d8 7014 	ldr.w	r7, [r8, #20]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    db86:	6865      	ldr	r5, [r4, #4]
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    db88:	4037      	ands	r7, r6
    db8a:	42af      	cmp	r7, r5
    db8c:	d0e4      	beq.n	db58 <am_hal_pwrctrl_memory_enable+0x28>
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    db8e:	2077      	movs	r0, #119	; 0x77
    db90:	f7ff fbce 	bl	d330 <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    db94:	f8d8 3014 	ldr.w	r3, [r8, #20]
    db98:	e7de      	b.n	db58 <am_hal_pwrctrl_memory_enable+0x28>
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    db9a:	68d0      	ldr	r0, [r2, #12]
        PWRCTRL->MEMPWREN &=
    db9c:	4907      	ldr	r1, [pc, #28]	; (dbbc <am_hal_pwrctrl_memory_enable+0x8c>)
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    db9e:	4003      	ands	r3, r0
        PWRCTRL->MEMPWREN &=
    dba0:	690a      	ldr	r2, [r1, #16]
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    dba2:	f242 0801 	movw	r8, #8193	; 0x2001
    dba6:	ea68 0303 	orn	r3, r8, r3
        PWRCTRL->MEMPWREN &=
    dbaa:	4013      	ands	r3, r2
    dbac:	610b      	str	r3, [r1, #16]
        am_hal_flash_delay(FLASH_CYCLES_US(1));
    dbae:	2001      	movs	r0, #1
    dbb0:	f7ff fbbe 	bl	d330 <am_hal_flash_delay>
    dbb4:	e7ca      	b.n	db4c <am_hal_pwrctrl_memory_enable+0x1c>
    dbb6:	bf00      	nop
    dbb8:	0000efc0 	.word	0x0000efc0
    dbbc:	40021000 	.word	0x40021000

0000dbc0 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dbc0:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dbc2:	4c1b      	ldr	r4, [pc, #108]	; (dc30 <am_hal_pwrctrl_low_power_init+0x70>)
    dbc4:	69a3      	ldr	r3, [r4, #24]
    dbc6:	05db      	lsls	r3, r3, #23
{
    dbc8:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dbca:	d502      	bpl.n	dbd2 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    dbcc:	2000      	movs	r0, #0
}
    dbce:	b003      	add	sp, #12
    dbd0:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbd2:	4d18      	ldr	r5, [pc, #96]	; (dc34 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbd4:	4918      	ldr	r1, [pc, #96]	; (dc38 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbd6:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbd8:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbda:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbdc:	461a      	mov	r2, r3
    dbde:	9000      	str	r0, [sp, #0]
    dbe0:	f242 7010 	movw	r0, #10000	; 0x2710
    dbe4:	f7ff fba8 	bl	d338 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dbe8:	b110      	cbz	r0, dbf0 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    dbea:	2004      	movs	r0, #4
}
    dbec:	b003      	add	sp, #12
    dbee:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    dbf0:	6821      	ldr	r1, [r4, #0]
    dbf2:	f041 0201 	orr.w	r2, r1, #1
    dbf6:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    dbf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dbfa:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    dbfe:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    dc00:	68ec      	ldr	r4, [r5, #12]
    dc02:	b2e2      	uxtb	r2, r4
    dc04:	2a11      	cmp	r2, #17
    dc06:	d1e1      	bne.n	dbcc <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    dc08:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    dc0c:	f360 5356 	bfi	r3, r0, #21, #2
    dc10:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    dc14:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    dc18:	240f      	movs	r4, #15
    dc1a:	f364 118b 	bfi	r1, r4, #6, #6
    dc1e:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    dc22:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    dc26:	f364 0205 	bfi	r2, r4, #0, #6
    dc2a:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    dc2e:	e7ce      	b.n	dbce <am_hal_pwrctrl_low_power_init+0xe>
    dc30:	40021000 	.word	0x40021000
    dc34:	40020000 	.word	0x40020000
    dc38:	40020018 	.word	0x40020018

0000dc3c <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    dc3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    dc40:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    dc42:	68d3      	ldr	r3, [r2, #12]
    dc44:	bf0c      	ite	eq
    dc46:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    dc4a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    dc4e:	60d3      	str	r3, [r2, #12]
    dc50:	4770      	bx	lr
    dc52:	bf00      	nop

0000dc54 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    dc54:	4a03      	ldr	r2, [pc, #12]	; (dc64 <am_hal_rtc_osc_disable+0x10>)
    dc56:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dc5a:	f043 0010 	orr.w	r0, r3, #16
    dc5e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    dc62:	4770      	bx	lr
    dc64:	40004200 	.word	0x40004200

0000dc68 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    dc68:	b510      	push	{r4, lr}
    dc6a:	b082      	sub	sp, #8
    dc6c:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    dc6e:	f7ff fe15 	bl	d89c <am_hal_interrupt_master_disable>
    dc72:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    dc74:	b124      	cbz	r4, dc80 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    dc76:	4b0c      	ldr	r3, [pc, #48]	; (dca8 <am_hal_sysctrl_sleep+0x40>)
    dc78:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    dc7c:	07c3      	lsls	r3, r0, #31
    dc7e:	d50a      	bpl.n	dc96 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dc80:	4a0a      	ldr	r2, [pc, #40]	; (dcac <am_hal_sysctrl_sleep+0x44>)
    dc82:	6911      	ldr	r1, [r2, #16]
    dc84:	f021 0404 	bic.w	r4, r1, #4
    dc88:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    dc8a:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    dc8c:	9801      	ldr	r0, [sp, #4]
    dc8e:	f7ff fe09 	bl	d8a4 <am_hal_interrupt_master_set>
}
    dc92:	b002      	add	sp, #8
    dc94:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dc96:	4b05      	ldr	r3, [pc, #20]	; (dcac <am_hal_sysctrl_sleep+0x44>)
    dc98:	2004      	movs	r0, #4
    dc9a:	6118      	str	r0, [r3, #16]
        __WFI();
    dc9c:	bf30      	wfi
    AM_CRITICAL_END
    dc9e:	9801      	ldr	r0, [sp, #4]
    dca0:	f7ff fe00 	bl	d8a4 <am_hal_interrupt_master_set>
}
    dca4:	b002      	add	sp, #8
    dca6:	bd10      	pop	{r4, pc}
    dca8:	40020000 	.word	0x40020000
    dcac:	e000ed00 	.word	0xe000ed00

0000dcb0 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    dcb0:	2801      	cmp	r0, #1
    dcb2:	d901      	bls.n	dcb8 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    dcb4:	2005      	movs	r0, #5
    dcb6:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    dcb8:	b169      	cbz	r1, dcd6 <am_hal_uart_initialize+0x26>
{
    dcba:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    dcbc:	2264      	movs	r2, #100	; 0x64
    dcbe:	4e0e      	ldr	r6, [pc, #56]	; (dcf8 <am_hal_uart_initialize+0x48>)
    dcc0:	fb02 f200 	mul.w	r2, r2, r0
    dcc4:	18b4      	adds	r4, r6, r2
    dcc6:	4603      	mov	r3, r0
    dcc8:	78e0      	ldrb	r0, [r4, #3]
    dcca:	f3c0 0700 	ubfx	r7, r0, #0, #1
    dcce:	b2fd      	uxtb	r5, r7
    dcd0:	b11d      	cbz	r5, dcda <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    dcd2:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
    dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
    dcd6:	2006      	movs	r0, #6
    dcd8:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    dcda:	f040 0001 	orr.w	r0, r0, #1
    dcde:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    dce0:	58b0      	ldr	r0, [r6, r2]
    dce2:	f8df e018 	ldr.w	lr, [pc, #24]	; dcfc <am_hal_uart_initialize+0x4c>
    dce6:	f36e 0017 	bfi	r0, lr, #0, #24
    dcea:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    dcec:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    dcee:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    dcf0:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
    dcf2:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    dcf4:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    dcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcf8:	10001138 	.word	0x10001138
    dcfc:	00ea9e06 	.word	0x00ea9e06

0000dd00 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dd00:	b128      	cbz	r0, dd0e <am_hal_uart_deinitialize+0xe>
    dd02:	6803      	ldr	r3, [r0, #0]
    dd04:	4a07      	ldr	r2, [pc, #28]	; (dd24 <am_hal_uart_deinitialize+0x24>)
    dd06:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    dd0a:	4291      	cmp	r1, r2
    dd0c:	d001      	beq.n	dd12 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    dd0e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    dd10:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    dd12:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    dd14:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    dd16:	f36f 0200 	bfc	r2, #0, #1
    dd1a:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    dd1c:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    dd1e:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    dd20:	4618      	mov	r0, r3
    dd22:	4770      	bx	lr
    dd24:	01ea9e06 	.word	0x01ea9e06

0000dd28 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dd2c:	6804      	ldr	r4, [r0, #0]
    dd2e:	4b36      	ldr	r3, [pc, #216]	; (de08 <am_hal_uart_power_control+0xe0>)
    dd30:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    dd34:	429c      	cmp	r4, r3
{
    dd36:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dd38:	d003      	beq.n	dd42 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    dd3a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    dd3c:	b004      	add	sp, #16
    dd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    dd42:	6a47      	ldr	r7, [r0, #36]	; 0x24
    dd44:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    dd46:	f107 0008 	add.w	r0, r7, #8
    dd4a:	460e      	mov	r6, r1
    dd4c:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    dd50:	b181      	cbz	r1, dd74 <am_hal_uart_power_control+0x4c>
    dd52:	2902      	cmp	r1, #2
    dd54:	d80c      	bhi.n	dd70 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    dd56:	b992      	cbnz	r2, dd7e <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    dd58:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    dd5c:	341c      	adds	r4, #28
    dd5e:	0325      	lsls	r5, r4, #12
    dd60:	f04f 31ff 	mov.w	r1, #4294967295
    dd64:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    dd66:	4640      	mov	r0, r8
    dd68:	f7ff feb6 	bl	dad8 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    dd6c:	2000      	movs	r0, #0
            break;
    dd6e:	e7e5      	b.n	dd3c <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    dd70:	2006      	movs	r0, #6
    dd72:	e7e3      	b.n	dd3c <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    dd74:	b322      	cbz	r2, ddc0 <am_hal_uart_power_control+0x98>
    dd76:	792a      	ldrb	r2, [r5, #4]
    dd78:	bb42      	cbnz	r2, ddcc <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    dd7a:	2007      	movs	r0, #7
    dd7c:	e7de      	b.n	dd3c <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    dd7e:	f7ff fd8d 	bl	d89c <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    dd82:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    dd86:	311c      	adds	r1, #28
    dd88:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    dd8a:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    dd8c:	6a3a      	ldr	r2, [r7, #32]
    dd8e:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd92:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    dd94:	6abe      	ldr	r6, [r7, #40]	; 0x28
    dd96:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    dd98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dd9a:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    dd9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    dd9e:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    dda0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    dda2:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    dda4:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    dda6:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    dda8:	2301      	movs	r3, #1
                AM_CRITICAL_END
    ddaa:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    ddac:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    ddae:	f7ff fd79 	bl	d8a4 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ddb2:	682e      	ldr	r6, [r5, #0]
    ddb4:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    ddb8:	42a0      	cmp	r0, r4
    ddba:	d1d4      	bne.n	dd66 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    ddbc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ddbe:	e7cb      	b.n	dd58 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    ddc0:	4640      	mov	r0, r8
    ddc2:	9201      	str	r2, [sp, #4]
    ddc4:	f7ff fe5e 	bl	da84 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    ddc8:	9801      	ldr	r0, [sp, #4]
    ddca:	e7b7      	b.n	dd3c <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    ddcc:	4640      	mov	r0, r8
    ddce:	f7ff fe59 	bl	da84 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    ddd2:	f7ff fd63 	bl	d89c <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    ddd6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    ddda:	331c      	adds	r3, #28
    dddc:	031f      	lsls	r7, r3, #12
    ddde:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    dde0:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    dde2:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    dde4:	68e9      	ldr	r1, [r5, #12]
    dde6:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    dde8:	6928      	ldr	r0, [r5, #16]
    ddea:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    ddec:	696a      	ldr	r2, [r5, #20]
    ddee:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    ddf0:	69ab      	ldr	r3, [r5, #24]
    ddf2:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    ddf4:	69ec      	ldr	r4, [r5, #28]
    ddf6:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    ddf8:	6a29      	ldr	r1, [r5, #32]
    ddfa:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    ddfc:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    ddfe:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    de00:	f7ff fd50 	bl	d8a4 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    de04:	4630      	mov	r0, r6
    de06:	e799      	b.n	dd3c <am_hal_uart_power_control+0x14>
    de08:	01ea9e06 	.word	0x01ea9e06

0000de0c <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    de0c:	6803      	ldr	r3, [r0, #0]
    de0e:	4a69      	ldr	r2, [pc, #420]	; (dfb4 <am_hal_uart_configure+0x1a8>)
    de10:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    de14:	4594      	cmp	ip, r2
    de16:	d001      	beq.n	de1c <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    de18:	2002      	movs	r0, #2
    de1a:	4770      	bx	lr
{
    de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
    de20:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
    de22:	b084      	sub	sp, #16
    de24:	460d      	mov	r5, r1
    de26:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    de28:	f7ff fd38 	bl	d89c <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    de2c:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
    de30:	311c      	adds	r1, #28
    de32:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
    de34:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    de36:	6b38      	ldr	r0, [r7, #48]	; 0x30
    de38:	f040 0208 	orr.w	r2, r0, #8
    de3c:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
    de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    de40:	f043 0610 	orr.w	r6, r3, #16
    de44:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
    de46:	9801      	ldr	r0, [sp, #4]
    de48:	f7ff fd2c 	bl	d8a4 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    de4c:	f7ff fd26 	bl	d89c <am_hal_interrupt_master_disable>
    de50:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
    de52:	6b39      	ldr	r1, [r7, #48]	; 0x30
    de54:	f421 7040 	bic.w	r0, r1, #768	; 0x300
    de58:	f020 0201 	bic.w	r2, r0, #1
    de5c:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
    de5e:	9802      	ldr	r0, [sp, #8]
    de60:	f7ff fd20 	bl	d8a4 <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    de66:	f3c3 1802 	ubfx	r8, r3, #4, #3
    de6a:	f108 36ff 	add.w	r6, r8, #4294967295
    de6e:	2e03      	cmp	r6, #3
    de70:	d846      	bhi.n	df00 <am_hal_uart_configure+0xf4>
    de72:	e8df f006 	tbb	[pc, r6]
    de76:	020e      	.short	0x020e
    de78:	1114      	.short	0x1114
    de7a:	494f      	ldr	r1, [pc, #316]	; (dfb8 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
    de7c:	484f      	ldr	r0, [pc, #316]	; (dfbc <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    de7e:	682a      	ldr	r2, [r5, #0]
    de80:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    de82:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
    de86:	b96b      	cbnz	r3, dea4 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    de88:	484d      	ldr	r0, [pc, #308]	; (dfc0 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
    de8a:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
    de8c:	b004      	add	sp, #16
    de8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    de92:	494c      	ldr	r1, [pc, #304]	; (dfc4 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
    de94:	484c      	ldr	r0, [pc, #304]	; (dfc8 <am_hal_uart_configure+0x1bc>)
    de96:	e7f2      	b.n	de7e <am_hal_uart_configure+0x72>
    de98:	494c      	ldr	r1, [pc, #304]	; (dfcc <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
    de9a:	484d      	ldr	r0, [pc, #308]	; (dfd0 <am_hal_uart_configure+0x1c4>)
    de9c:	e7ef      	b.n	de7e <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    de9e:	494d      	ldr	r1, [pc, #308]	; (dfd4 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
    dea0:	484d      	ldr	r0, [pc, #308]	; (dfd8 <am_hal_uart_configure+0x1cc>)
    dea2:	e7ec      	b.n	de7e <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    dea4:	fbb1 f1f6 	udiv	r1, r1, r6
    dea8:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    deac:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    deae:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    deb2:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    deb4:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    deb8:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    deba:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
    debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    debe:	6929      	ldr	r1, [r5, #16]
    dec0:	430b      	orrs	r3, r1
    dec2:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
    dec4:	696a      	ldr	r2, [r5, #20]
    dec6:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    dec8:	686e      	ldr	r6, [r5, #4]
    deca:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
    decc:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    dece:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
    ded0:	f046 0310 	orr.w	r3, r6, #16
    ded4:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    ded6:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    ded8:	f7ff fce0 	bl	d89c <am_hal_interrupt_master_disable>
    dedc:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
    dede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dee0:	f442 7640 	orr.w	r6, r2, #768	; 0x300
    dee4:	f046 0001 	orr.w	r0, r6, #1
    dee8:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
    deea:	9803      	ldr	r0, [sp, #12]
    deec:	f7ff fcda 	bl	d8a4 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    def0:	6827      	ldr	r7, [r4, #0]
    def2:	4930      	ldr	r1, [pc, #192]	; (dfb4 <am_hal_uart_configure+0x1a8>)
    def4:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
    def8:	428e      	cmp	r6, r1
    defa:	d005      	beq.n	df08 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
    defc:	2000      	movs	r0, #0
    defe:	e7c5      	b.n	de8c <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
    df00:	2600      	movs	r6, #0
    df02:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    df04:	4835      	ldr	r0, [pc, #212]	; (dfdc <am_hal_uart_configure+0x1d0>)
    df06:	e7c1      	b.n	de8c <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
    df08:	69a9      	ldr	r1, [r5, #24]
    df0a:	6a2f      	ldr	r7, [r5, #32]
    df0c:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
    df10:	b109      	cbz	r1, df16 <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
    df12:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
    df14:	b9f3      	cbnz	r3, df54 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    df16:	6a65      	ldr	r5, [r4, #36]	; 0x24
    df18:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    df1c:	331c      	adds	r3, #28
    df1e:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
    df20:	f04f 0e00 	mov.w	lr, #0
    df24:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    df28:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    df2a:	f022 0020 	bic.w	r0, r2, #32
    df2e:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
    df30:	b117      	cbz	r7, df38 <am_hal_uart_configure+0x12c>
    df32:	f1b8 0f00 	cmp.w	r8, #0
    df36:	d123      	bne.n	df80 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df38:	6827      	ldr	r7, [r4, #0]
    df3a:	491e      	ldr	r1, [pc, #120]	; (dfb4 <am_hal_uart_configure+0x1a8>)
    df3c:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
    df40:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df42:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
    df44:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df48:	d1d8      	bne.n	defc <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    df4a:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    df4c:	f024 0350 	bic.w	r3, r4, #80	; 0x50
    df50:	63b3      	str	r3, [r6, #56]	; 0x38
    df52:	e79b      	b.n	de8c <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
    df54:	2201      	movs	r2, #1
    df56:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    df5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    df5e:	f000 fcf5 	bl	e94c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df62:	6821      	ldr	r1, [r4, #0]
    df64:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
    df68:	42b5      	cmp	r5, r6
    df6a:	d1c7      	bne.n	defc <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    df6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    df6e:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
    df72:	361c      	adds	r6, #28
    df74:	0336      	lsls	r6, r6, #12
    df76:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    df78:	f042 0020 	orr.w	r0, r2, #32
    df7c:	63b0      	str	r0, [r6, #56]	; 0x38
    df7e:	e7d7      	b.n	df30 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
    df80:	2201      	movs	r2, #1
    df82:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    df86:	f104 0048 	add.w	r0, r4, #72	; 0x48
    df8a:	4643      	mov	r3, r8
    df8c:	4639      	mov	r1, r7
    df8e:	f000 fcdd 	bl	e94c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df92:	6826      	ldr	r6, [r4, #0]
    df94:	4a07      	ldr	r2, [pc, #28]	; (dfb4 <am_hal_uart_configure+0x1a8>)
    df96:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    df9a:	4290      	cmp	r0, r2
    df9c:	d1ae      	bne.n	defc <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    df9e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dfa0:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    dfa4:	311c      	adds	r1, #28
    dfa6:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
    dfa8:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
    dfaa:	6bac      	ldr	r4, [r5, #56]	; 0x38
    dfac:	f044 0350 	orr.w	r3, r4, #80	; 0x50
    dfb0:	63ab      	str	r3, [r5, #56]	; 0x38
    dfb2:	e76b      	b.n	de8c <am_hal_uart_configure+0x80>
    dfb4:	01ea9e06 	.word	0x01ea9e06
    dfb8:	2dc6c000 	.word	0x2dc6c000
    dfbc:	00b71b00 	.word	0x00b71b00
    dfc0:	08000003 	.word	0x08000003
    dfc4:	5b8d8000 	.word	0x5b8d8000
    dfc8:	016e3600 	.word	0x016e3600
    dfcc:	0b71b000 	.word	0x0b71b000
    dfd0:	002dc6c0 	.word	0x002dc6c0
    dfd4:	16e36000 	.word	0x16e36000
    dfd8:	005b8d80 	.word	0x005b8d80
    dfdc:	08000002 	.word	0x08000002

0000dfe0 <am_hal_uart_transfer>:
{
    dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    dfe4:	680e      	ldr	r6, [r1, #0]
{
    dfe6:	b091      	sub	sp, #68	; 0x44
    dfe8:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    dfea:	b14e      	cbz	r6, e000 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    dfec:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
    dfee:	bf18      	it	ne
    dff0:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    dff4:	f000 80f6 	beq.w	e1e4 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
    dff8:	4658      	mov	r0, fp
    dffa:	b011      	add	sp, #68	; 0x44
    dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
    e000:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e004:	684c      	ldr	r4, [r1, #4]
    e006:	9401      	str	r4, [sp, #4]
    e008:	688d      	ldr	r5, [r1, #8]
    e00a:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
    e00e:	f1bb 0f00 	cmp.w	fp, #0
    e012:	f000 8107 	beq.w	e224 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e016:	2d00      	cmp	r5, #0
    e018:	f000 8393 	beq.w	e742 <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e01c:	2800      	cmp	r0, #0
    e01e:	f000 80df 	beq.w	e1e0 <am_hal_uart_transfer+0x200>
    e022:	6807      	ldr	r7, [r0, #0]
    e024:	497e      	ldr	r1, [pc, #504]	; (e220 <am_hal_uart_transfer+0x240>)
    e026:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
    e02a:	4589      	cmp	r9, r1
    e02c:	d00a      	beq.n	e044 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
    e02e:	f1ba 0f00 	cmp.w	sl, #0
    e032:	d001      	beq.n	e038 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
    e034:	f8ca 6000 	str.w	r6, [sl]
    e038:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
    e03c:	4658      	mov	r0, fp
    e03e:	b011      	add	sp, #68	; 0x44
    e040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e044:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e046:	4637      	mov	r7, r6
    e048:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e04a:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
    e04c:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    e050:	2a00      	cmp	r2, #0
    e052:	f040 822c 	bne.w	e4ae <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
    e056:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e05a:	2d00      	cmp	r5, #0
    e05c:	f000 80a1 	beq.w	e1a2 <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e060:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
    e064:	341c      	adds	r4, #28
    e066:	0322      	lsls	r2, r4, #12
    e068:	6990      	ldr	r0, [r2, #24]
    e06a:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e06e:	2c00      	cmp	r4, #0
    e070:	f040 80a3 	bne.w	e1ba <am_hal_uart_transfer+0x1da>
    e074:	1e6b      	subs	r3, r5, #1
    e076:	f013 0e07 	ands.w	lr, r3, #7
    e07a:	f101 3cff 	add.w	ip, r1, #4294967295
    e07e:	d048      	beq.n	e112 <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e080:	780c      	ldrb	r4, [r1, #0]
    e082:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e084:	6993      	ldr	r3, [r2, #24]
    e086:	069b      	lsls	r3, r3, #26
    e088:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
    e08a:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e08e:	f100 8085 	bmi.w	e19c <am_hal_uart_transfer+0x1bc>
    e092:	45a6      	cmp	lr, r4
    e094:	d03d      	beq.n	e112 <am_hal_uart_transfer+0x132>
    e096:	f1be 0f02 	cmp.w	lr, #2
    e09a:	d032      	beq.n	e102 <am_hal_uart_transfer+0x122>
    e09c:	f1be 0f03 	cmp.w	lr, #3
    e0a0:	d027      	beq.n	e0f2 <am_hal_uart_transfer+0x112>
    e0a2:	f1be 0f04 	cmp.w	lr, #4
    e0a6:	d01c      	beq.n	e0e2 <am_hal_uart_transfer+0x102>
    e0a8:	f1be 0f05 	cmp.w	lr, #5
    e0ac:	d011      	beq.n	e0d2 <am_hal_uart_transfer+0xf2>
    e0ae:	f1be 0f06 	cmp.w	lr, #6
    e0b2:	d006      	beq.n	e0c2 <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0b4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e0b8:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0ba:	6990      	ldr	r0, [r2, #24]
    e0bc:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0be:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0c0:	d46c      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0c2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e0c6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0c8:	6991      	ldr	r1, [r2, #24]
    e0ca:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0cc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0d0:	d464      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0d2:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e0d6:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0d8:	6993      	ldr	r3, [r2, #24]
    e0da:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0dc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0e0:	d45c      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0e2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e0e6:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0e8:	6990      	ldr	r0, [r2, #24]
    e0ea:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0ec:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0f0:	d454      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0f2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e0f6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e0f8:	6991      	ldr	r1, [r2, #24]
    e0fa:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e0fc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e100:	d44c      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e102:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e106:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e108:	6993      	ldr	r3, [r2, #24]
    e10a:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e10c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e110:	d444      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e112:	3401      	adds	r4, #1
    e114:	f89c 1001 	ldrb.w	r1, [ip, #1]
    e118:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
    e11a:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e11c:	4620      	mov	r0, r4
    e11e:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
    e122:	f000 81c2 	beq.w	e4aa <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e126:	6993      	ldr	r3, [r2, #24]
    e128:	0699      	lsls	r1, r3, #26
    e12a:	d437      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e12c:	f89e 1001 	ldrb.w	r1, [lr, #1]
    e130:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e132:	6993      	ldr	r3, [r2, #24]
    e134:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e136:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e13a:	d42f      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e13c:	f89c 4003 	ldrb.w	r4, [ip, #3]
    e140:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e142:	6991      	ldr	r1, [r2, #24]
    e144:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e146:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e14a:	d427      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e14c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    e150:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e152:	6991      	ldr	r1, [r2, #24]
    e154:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e156:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e15a:	d41f      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e15c:	f89c 4005 	ldrb.w	r4, [ip, #5]
    e160:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e162:	6993      	ldr	r3, [r2, #24]
    e164:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e166:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e16a:	d417      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e16c:	f89c 1006 	ldrb.w	r1, [ip, #6]
    e170:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e172:	6993      	ldr	r3, [r2, #24]
    e174:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e176:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e17a:	d40f      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e17c:	f89c 4007 	ldrb.w	r4, [ip, #7]
    e180:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e182:	6991      	ldr	r1, [r2, #24]
    e184:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e186:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e18a:	d407      	bmi.n	e19c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e18c:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
    e190:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e192:	6991      	ldr	r1, [r2, #24]
    e194:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e196:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e19a:	d5ba      	bpl.n	e112 <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
    e19c:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
    e19e:	4426      	add	r6, r4
        if (ui32RemainingBytes)
    e1a0:	d10b      	bne.n	e1ba <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
    e1a2:	f1ba 0f00 	cmp.w	sl, #0
    e1a6:	f000 817d 	beq.w	e4a4 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
    e1aa:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
    e1ae:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
    e1b0:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
    e1b4:	b011      	add	sp, #68	; 0x44
    e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e1ba:	2001      	movs	r0, #1
    e1bc:	f7ff f8b8 	bl	d330 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e1c0:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e1c4:	bf18      	it	ne
    e1c6:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e1c8:	45bb      	cmp	fp, r7
    e1ca:	d9ea      	bls.n	e1a2 <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1cc:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e1d0:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1d2:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
    e1d6:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e1d8:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1da:	f47f af28 	bne.w	e02e <am_hal_uart_transfer+0x4e>
    e1de:	e735      	b.n	e04c <am_hal_uart_transfer+0x6c>
    e1e0:	4606      	mov	r6, r0
    e1e2:	e724      	b.n	e02e <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
    e1e4:	684b      	ldr	r3, [r1, #4]
    e1e6:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e1ea:	688c      	ldr	r4, [r1, #8]
    e1ec:	690f      	ldr	r7, [r1, #16]
    e1ee:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
    e1f0:	f1bb 0f00 	cmp.w	fp, #0
    e1f4:	f000 80c9 	beq.w	e38a <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e1f8:	2c00      	cmp	r4, #0
    e1fa:	f000 8150 	beq.w	e49e <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1fe:	b130      	cbz	r0, e20e <am_hal_uart_transfer+0x22e>
    e200:	6800      	ldr	r0, [r0, #0]
    e202:	4a07      	ldr	r2, [pc, #28]	; (e220 <am_hal_uart_transfer+0x240>)
    e204:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e208:	4291      	cmp	r1, r2
    e20a:	f000 8186 	beq.w	e51a <am_hal_uart_transfer+0x53a>
    e20e:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
    e210:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
    e214:	2f00      	cmp	r7, #0
    e216:	f43f aeef 	beq.w	dff8 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
    e21a:	603d      	str	r5, [r7, #0]
    e21c:	e6ec      	b.n	dff8 <am_hal_uart_transfer+0x18>
    e21e:	bf00      	nop
    e220:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e224:	2800      	cmp	r0, #0
    e226:	f43f af07 	beq.w	e038 <am_hal_uart_transfer+0x58>
    e22a:	6807      	ldr	r7, [r0, #0]
    e22c:	4cac      	ldr	r4, [pc, #688]	; (e4e0 <am_hal_uart_transfer+0x500>)
    e22e:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
    e232:	42a3      	cmp	r3, r4
    e234:	f47f af00 	bne.w	e038 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
    e238:	f1ba 0f00 	cmp.w	sl, #0
    e23c:	d001      	beq.n	e242 <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
    e23e:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
    e242:	2d00      	cmp	r5, #0
    e244:	f000 812e 	beq.w	e4a4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
    e248:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
    e24c:	2c00      	cmp	r4, #0
    e24e:	f040 8290 	bne.w	e772 <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e252:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e256:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    e25a:	311c      	adds	r1, #28
    e25c:	030a      	lsls	r2, r1, #12
    e25e:	6996      	ldr	r6, [r2, #24]
    e260:	f3c6 1740 	ubfx	r7, r6, #5, #1
    e264:	2f00      	cmp	r7, #0
    e266:	f040 8089 	bne.w	e37c <am_hal_uart_transfer+0x39c>
    e26a:	f105 38ff 	add.w	r8, r5, #4294967295
    e26e:	9b01      	ldr	r3, [sp, #4]
    e270:	f018 0007 	ands.w	r0, r8, #7
    e274:	463c      	mov	r4, r7
    e276:	f103 31ff 	add.w	r1, r3, #4294967295
    e27a:	d042      	beq.n	e302 <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e27c:	781e      	ldrb	r6, [r3, #0]
    e27e:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e280:	6997      	ldr	r7, [r2, #24]
    e282:	4619      	mov	r1, r3
    e284:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e286:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e28a:	d477      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
    e28c:	42a0      	cmp	r0, r4
    e28e:	d038      	beq.n	e302 <am_hal_uart_transfer+0x322>
    e290:	2802      	cmp	r0, #2
    e292:	d02e      	beq.n	e2f2 <am_hal_uart_transfer+0x312>
    e294:	2803      	cmp	r0, #3
    e296:	d024      	beq.n	e2e2 <am_hal_uart_transfer+0x302>
    e298:	2804      	cmp	r0, #4
    e29a:	d01a      	beq.n	e2d2 <am_hal_uart_transfer+0x2f2>
    e29c:	2805      	cmp	r0, #5
    e29e:	d010      	beq.n	e2c2 <am_hal_uart_transfer+0x2e2>
    e2a0:	2806      	cmp	r0, #6
    e2a2:	d006      	beq.n	e2b2 <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e2a8:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2aa:	6990      	ldr	r0, [r2, #24]
    e2ac:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2ae:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2b0:	d464      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2b2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e2b6:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2b8:	6997      	ldr	r7, [r2, #24]
    e2ba:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2bc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2c0:	d45c      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e2c6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2c8:	6990      	ldr	r0, [r2, #24]
    e2ca:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2cc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2d0:	d454      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2d2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e2d6:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2d8:	6997      	ldr	r7, [r2, #24]
    e2da:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2dc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2e0:	d44c      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e2e6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2e8:	6990      	ldr	r0, [r2, #24]
    e2ea:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2ec:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2f0:	d444      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2f2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e2f6:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e2f8:	6997      	ldr	r7, [r2, #24]
    e2fa:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e2fc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e300:	d43c      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e302:	3401      	adds	r4, #1
    e304:	784b      	ldrb	r3, [r1, #1]
    e306:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
    e308:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e30a:	4623      	mov	r3, r4
    e30c:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
    e310:	d034      	beq.n	e37c <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e312:	6996      	ldr	r6, [r2, #24]
    e314:	06b6      	lsls	r6, r6, #26
    e316:	d431      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e318:	7847      	ldrb	r7, [r0, #1]
    e31a:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e31c:	6990      	ldr	r0, [r2, #24]
    e31e:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e320:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e324:	d42a      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e326:	78cc      	ldrb	r4, [r1, #3]
    e328:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e32a:	6996      	ldr	r6, [r2, #24]
    e32c:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e32e:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e332:	d423      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e334:	790f      	ldrb	r7, [r1, #4]
    e336:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e338:	6990      	ldr	r0, [r2, #24]
    e33a:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e33c:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e340:	d41c      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e342:	794c      	ldrb	r4, [r1, #5]
    e344:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e346:	6996      	ldr	r6, [r2, #24]
    e348:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e34a:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e34e:	d415      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e350:	798f      	ldrb	r7, [r1, #6]
    e352:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e354:	6990      	ldr	r0, [r2, #24]
    e356:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e358:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e35c:	d40e      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e35e:	79cc      	ldrb	r4, [r1, #7]
    e360:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e362:	6996      	ldr	r6, [r2, #24]
    e364:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e366:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e36a:	d407      	bmi.n	e37c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e36c:	f811 7f08 	ldrb.w	r7, [r1, #8]!
    e370:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e372:	6990      	ldr	r0, [r2, #24]
    e374:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e376:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e37a:	d5c2      	bpl.n	e302 <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
    e37c:	f1ba 0f00 	cmp.w	sl, #0
    e380:	f000 8090 	beq.w	e4a4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
    e384:	f8ca 4000 	str.w	r4, [sl]
    e388:	e636      	b.n	dff8 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e38a:	2800      	cmp	r0, #0
    e38c:	f43f ae54 	beq.w	e038 <am_hal_uart_transfer+0x58>
    e390:	6805      	ldr	r5, [r0, #0]
    e392:	4e53      	ldr	r6, [pc, #332]	; (e4e0 <am_hal_uart_transfer+0x500>)
    e394:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    e398:	45b4      	cmp	ip, r6
    e39a:	f47f ae4d 	bne.w	e038 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
    e39e:	b10f      	cbz	r7, e3a4 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
    e3a0:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
    e3a4:	2c00      	cmp	r4, #0
    e3a6:	d07d      	beq.n	e4a4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
    e3a8:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e3ac:	2800      	cmp	r0, #0
    e3ae:	f040 8213 	bne.w	e7d8 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e3b2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e3b6:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    e3ba:	311c      	adds	r1, #28
    e3bc:	0309      	lsls	r1, r1, #12
    e3be:	698a      	ldr	r2, [r1, #24]
    e3c0:	f3c2 1500 	ubfx	r5, r2, #4, #1
    e3c4:	2d00      	cmp	r5, #0
    e3c6:	f040 8287 	bne.w	e8d8 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
    e3ca:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e3cc:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
    e3d0:	f040 81cc 	bne.w	e76c <am_hal_uart_transfer+0x78c>
    e3d4:	1e66      	subs	r6, r4, #1
    e3d6:	f016 0203 	ands.w	r2, r6, #3
    e3da:	4655      	mov	r5, sl
    e3dc:	f109 30ff 	add.w	r0, r9, #4294967295
    e3e0:	d02b      	beq.n	e43a <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e3e2:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e3e6:	698b      	ldr	r3, [r1, #24]
    e3e8:	06de      	lsls	r6, r3, #27
    e3ea:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e3ec:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e3f0:	f53f af10 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e3f4:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e3f6:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e3fa:	f040 81b7 	bne.w	e76c <am_hal_uart_transfer+0x78c>
    e3fe:	42aa      	cmp	r2, r5
    e400:	d01b      	beq.n	e43a <am_hal_uart_transfer+0x45a>
    e402:	2a02      	cmp	r2, #2
    e404:	d00c      	beq.n	e420 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e406:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e40a:	698e      	ldr	r6, [r1, #24]
    e40c:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e40e:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e412:	f53f aeff 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e416:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e418:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e41c:	f040 81a6 	bne.w	e76c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e420:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e424:	698a      	ldr	r2, [r1, #24]
    e426:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e428:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e42c:	f53f aef2 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e430:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e432:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e436:	f040 8199 	bne.w	e76c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e43a:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
    e43c:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
    e43e:	7043      	strb	r3, [r0, #1]
    e440:	f100 0601 	add.w	r6, r0, #1
    e444:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
    e446:	f43f aee5 	beq.w	e214 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e44a:	698a      	ldr	r2, [r1, #24]
    e44c:	06d2      	lsls	r2, r2, #27
    e44e:	f53f aee1 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e452:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e454:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e458:	f040 8188 	bne.w	e76c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e45c:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e45e:	698e      	ldr	r6, [r1, #24]
    e460:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e462:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e466:	f53f aed5 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e46a:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e46c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e470:	f040 817c 	bne.w	e76c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e474:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e476:	698e      	ldr	r6, [r1, #24]
    e478:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e47a:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e47e:	f53f aec9 	bmi.w	e214 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e482:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e484:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e488:	f040 8170 	bne.w	e76c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e48c:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e490:	698e      	ldr	r6, [r1, #24]
    e492:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e494:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e498:	f53f aebc 	bmi.w	e214 <am_hal_uart_transfer+0x234>
    e49c:	e7c8      	b.n	e430 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e49e:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
    e4a0:	b107      	cbz	r7, e4a4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
    e4a2:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
    e4a4:	f04f 0b00 	mov.w	fp, #0
    e4a8:	e5a6      	b.n	dff8 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
    e4aa:	442e      	add	r6, r5
    e4ac:	e679      	b.n	e1a2 <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    e4ae:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    e4b2:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    e4b6:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
    e4b8:	42ac      	cmp	r4, r5
    e4ba:	bf28      	it	cs
    e4bc:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e4be:	4622      	mov	r2, r4
    e4c0:	9802      	ldr	r0, [sp, #8]
    e4c2:	f000 fa4f 	bl	e964 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    e4c6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e4ca:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
    e4cc:	f7ff f9e6 	bl	d89c <am_hal_interrupt_master_disable>
    e4d0:	9903      	ldr	r1, [sp, #12]
    e4d2:	9008      	str	r0, [sp, #32]
    e4d4:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    e4d8:	321c      	adds	r2, #28
    e4da:	0313      	lsls	r3, r2, #12
    e4dc:	9303      	str	r3, [sp, #12]
    e4de:	e010      	b.n	e502 <am_hal_uart_transfer+0x522>
    e4e0:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e4e4:	f000 fb42 	bl	eb6c <am_hal_queue_item_get>
    e4e8:	b198      	cbz	r0, e512 <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e4ea:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e4ee:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
    e4f2:	331c      	adds	r3, #28
    e4f4:	0318      	lsls	r0, r3, #12
    e4f6:	6981      	ldr	r1, [r0, #24]
    e4f8:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e4fa:	bf5c      	itt	pl
    e4fc:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e500:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e502:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e504:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e506:	699b      	ldr	r3, [r3, #24]
    e508:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e50a:	f04f 0201 	mov.w	r2, #1
    e50e:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e510:	d5e8      	bpl.n	e4e4 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
    e512:	9808      	ldr	r0, [sp, #32]
    e514:	f7ff f9c6 	bl	d8a4 <am_hal_interrupt_master_set>
    e518:	e640      	b.n	e19c <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e51a:	2600      	movs	r6, #0
    e51c:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e51e:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e522:	9101      	str	r1, [sp, #4]
    e524:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e526:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
    e528:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e52c:	2800      	cmp	r0, #0
    e52e:	f040 8089 	bne.w	e644 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
    e532:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e536:	2c00      	cmp	r4, #0
    e538:	d0b2      	beq.n	e4a0 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e53a:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
    e53e:	311c      	adds	r1, #28
    e540:	030a      	lsls	r2, r1, #12
    e542:	6993      	ldr	r3, [r2, #24]
    e544:	06d8      	lsls	r0, r3, #27
    e546:	d466      	bmi.n	e616 <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
    e548:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e54a:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
    e54e:	f040 810d 	bne.w	e76c <am_hal_uart_transfer+0x78c>
    e552:	f104 3eff 	add.w	lr, r4, #4294967295
    e556:	f01e 0e03 	ands.w	lr, lr, #3
    e55a:	f109 30ff 	add.w	r0, r9, #4294967295
    e55e:	d029      	beq.n	e5b4 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e560:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e564:	6991      	ldr	r1, [r2, #24]
    e566:	06c9      	lsls	r1, r1, #27
    e568:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e56a:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e56e:	d44e      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e570:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e572:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e576:	f040 80e0 	bne.w	e73a <am_hal_uart_transfer+0x75a>
    e57a:	459e      	cmp	lr, r3
    e57c:	d01a      	beq.n	e5b4 <am_hal_uart_transfer+0x5d4>
    e57e:	f1be 0f02 	cmp.w	lr, #2
    e582:	d00b      	beq.n	e59c <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e584:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e588:	6991      	ldr	r1, [r2, #24]
    e58a:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e58c:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e590:	d43d      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e592:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e594:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e598:	f040 80cf 	bne.w	e73a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e59c:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5a0:	6991      	ldr	r1, [r2, #24]
    e5a2:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5a4:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5a8:	d431      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e5aa:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e5ac:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e5b0:	f040 80c3 	bne.w	e73a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5b4:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
    e5b6:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5b8:	7041      	strb	r1, [r0, #1]
    e5ba:	469e      	mov	lr, r3
    e5bc:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
    e5c0:	d025      	beq.n	e60e <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5c2:	6991      	ldr	r1, [r2, #24]
    e5c4:	06c9      	lsls	r1, r1, #27
    e5c6:	d422      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e5c8:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e5ca:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e5ce:	f040 80b4 	bne.w	e73a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5d2:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5d6:	6991      	ldr	r1, [r2, #24]
    e5d8:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5da:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5de:	d416      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e5e0:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e5e2:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e5e6:	f040 80a8 	bne.w	e73a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5ea:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5ec:	6991      	ldr	r1, [r2, #24]
    e5ee:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e5f0:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e5f4:	d40b      	bmi.n	e60e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e5f6:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e5f8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e5fc:	f040 809d 	bne.w	e73a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e600:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e604:	6991      	ldr	r1, [r2, #24]
    e606:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e608:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e60c:	d5cd      	bpl.n	e5aa <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
    e60e:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
    e610:	441d      	add	r5, r3
        if (ui32RemainingBytes)
    e612:	f43f af45 	beq.w	e4a0 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e616:	2001      	movs	r0, #1
    e618:	f7fe fe8a 	bl	d330 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e61c:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e620:	bf18      	it	ne
    e622:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e624:	45b3      	cmp	fp, r6
    e626:	f67f af3b 	bls.w	e4a0 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e62a:	f8d8 0000 	ldr.w	r0, [r8]
    e62e:	9a01      	ldr	r2, [sp, #4]
    e630:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e634:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
    e636:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e63a:	f43f af75 	beq.w	e528 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e63e:	f04f 0b02 	mov.w	fp, #2
    e642:	e5e7      	b.n	e214 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
    e644:	f7ff f92a 	bl	d89c <am_hal_interrupt_master_disable>
    e648:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e64c:	9007      	str	r0, [sp, #28]
    e64e:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e652:	301c      	adds	r0, #28
    uint32_t i = 0;
    e654:	f8cd a00c 	str.w	sl, [sp, #12]
    e658:	0303      	lsls	r3, r0, #12
    e65a:	f10d 0c20 	add.w	ip, sp, #32
    e65e:	2200      	movs	r2, #0
    e660:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e662:	699c      	ldr	r4, [r3, #24]
    e664:	06e1      	lsls	r1, r4, #27
    e666:	d45a      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e668:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e66a:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e66e:	d17a      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e670:	46e6      	mov	lr, ip
    e672:	3201      	adds	r2, #1
    e674:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e678:	6999      	ldr	r1, [r3, #24]
    e67a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e67c:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e67e:	d44e      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e680:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e682:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e686:	d16e      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e688:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e68c:	6999      	ldr	r1, [r3, #24]
    e68e:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e690:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e694:	d443      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e696:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e698:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e69c:	d163      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e69e:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6a2:	699c      	ldr	r4, [r3, #24]
    e6a4:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6a6:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6aa:	d438      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6ac:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6ae:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e6b2:	d158      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6b4:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6b8:	699c      	ldr	r4, [r3, #24]
    e6ba:	06e4      	lsls	r4, r4, #27
    e6bc:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6c0:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6c4:	d42b      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6c6:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6c8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e6cc:	d14b      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6ce:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6d2:	6999      	ldr	r1, [r3, #24]
    e6d4:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6d6:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6da:	d420      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6dc:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6de:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e6e2:	d140      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6e4:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6e8:	6999      	ldr	r1, [r3, #24]
    e6ea:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6ec:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6f0:	d415      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6f2:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6f4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e6f8:	d135      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6fa:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6fe:	699c      	ldr	r4, [r3, #24]
    e700:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e702:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e706:	d40a      	bmi.n	e71e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e708:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e70a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e70e:	d12a      	bne.n	e766 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e710:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    e712:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    e714:	f88e 1006 	strb.w	r1, [lr, #6]
    e718:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
    e71c:	d1a1      	bne.n	e662 <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e71e:	a908      	add	r1, sp, #32
    e720:	9802      	ldr	r0, [sp, #8]
    e722:	4654      	mov	r4, sl
    e724:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e728:	f000 f91c 	bl	e964 <am_hal_queue_item_add>
    e72c:	b958      	cbnz	r0, e746 <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    e72e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; e8e4 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    e732:	9807      	ldr	r0, [sp, #28]
    e734:	f7ff f8b6 	bl	d8a4 <am_hal_interrupt_master_set>
    e738:	e56c      	b.n	e214 <am_hal_uart_transfer+0x234>
    e73a:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    e73c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    e740:	e568      	b.n	e214 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e742:	462e      	mov	r6, r5
    e744:	e52d      	b.n	e1a2 <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
    e746:	9807      	ldr	r0, [sp, #28]
    e748:	f7ff f8ac 	bl	d8a4 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    e74c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    e750:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
    e752:	42a3      	cmp	r3, r4
    e754:	bf28      	it	cs
    e756:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    e758:	461a      	mov	r2, r3
    e75a:	4649      	mov	r1, r9
    e75c:	9303      	str	r3, [sp, #12]
    e75e:	f000 fa05 	bl	eb6c <am_hal_queue_item_get>
    e762:	9b03      	ldr	r3, [sp, #12]
    e764:	e753      	b.n	e60e <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    e766:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    e76a:	e7e2      	b.n	e732 <am_hal_uart_transfer+0x752>
    e76c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    e770:	e550      	b.n	e214 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    e772:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    e776:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    e77a:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
    e77c:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e77e:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
    e782:	bf28      	it	cs
    e784:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e786:	9901      	ldr	r1, [sp, #4]
    e788:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
    e78a:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e78c:	f000 f8ea 	bl	e964 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    e790:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
    e794:	f7ff f882 	bl	d89c <am_hal_interrupt_master_disable>
    e798:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    e79c:	331c      	adds	r3, #28
    e79e:	031d      	lsls	r5, r3, #12
    e7a0:	9005      	str	r0, [sp, #20]
    e7a2:	e00e      	b.n	e7c2 <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7a4:	f000 f9e2 	bl	eb6c <am_hal_queue_item_get>
    e7a8:	b190      	cbz	r0, e7d0 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e7aa:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e7ae:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    e7b2:	321c      	adds	r2, #28
    e7b4:	0311      	lsls	r1, r2, #12
    e7b6:	698e      	ldr	r6, [r1, #24]
    e7b8:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e7ba:	bf5c      	itt	pl
    e7bc:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e7c0:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7c2:	69af      	ldr	r7, [r5, #24]
    e7c4:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7c6:	f04f 0201 	mov.w	r2, #1
    e7ca:	a908      	add	r1, sp, #32
    e7cc:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7ce:	d5e9      	bpl.n	e7a4 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
    e7d0:	9805      	ldr	r0, [sp, #20]
    e7d2:	f7ff f867 	bl	d8a4 <am_hal_interrupt_master_set>
    e7d6:	e5d1      	b.n	e37c <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
    e7d8:	f7ff f860 	bl	d89c <am_hal_interrupt_master_disable>
    e7dc:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    e7e0:	9006      	str	r0, [sp, #24]
    e7e2:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
    e7e6:	301c      	adds	r0, #28
    e7e8:	0301      	lsls	r1, r0, #12
    e7ea:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
    e7ec:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e7ee:	698e      	ldr	r6, [r1, #24]
    e7f0:	06f0      	lsls	r0, r6, #27
    e7f2:	d455      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e7f4:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e7f6:	f415 6f70 	tst.w	r5, #3840	; 0xf00
    e7fa:	d16f      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e7fc:	4618      	mov	r0, r3
    e7fe:	3201      	adds	r2, #1
    e800:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e804:	698e      	ldr	r6, [r1, #24]
    e806:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e808:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e80a:	d449      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e80c:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e80e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    e812:	d163      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e814:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e816:	698e      	ldr	r6, [r1, #24]
    e818:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e81a:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e81e:	d43f      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e820:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e822:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e826:	d159      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e828:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e82a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    e82e:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    e832:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e836:	d133      	bne.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e838:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e83a:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    e83e:	d14d      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e840:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e842:	698e      	ldr	r6, [r1, #24]
    e844:	06f6      	lsls	r6, r6, #27
    e846:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e84a:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e84e:	d427      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e850:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e852:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e856:	d141      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e858:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e85a:	698b      	ldr	r3, [r1, #24]
    e85c:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e85e:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e862:	d41d      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e864:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e866:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    e86a:	d137      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e86c:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e86e:	698b      	ldr	r3, [r1, #24]
    e870:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e872:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e876:	d413      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e878:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e87a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e87e:	d12d      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e880:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e882:	698e      	ldr	r6, [r1, #24]
    e884:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e886:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e88a:	d409      	bmi.n	e8a0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    e88c:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e88e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e892:	d123      	bne.n	e8dc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e894:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
    e896:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    e898:	7183      	strb	r3, [r0, #6]
    e89a:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
    e89e:	d1a6      	bne.n	e7ee <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e8a0:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    e8a4:	a908      	add	r1, sp, #32
    e8a6:	4650      	mov	r0, sl
    e8a8:	f000 f85c 	bl	e964 <am_hal_queue_item_add>
    e8ac:	b930      	cbnz	r0, e8bc <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    e8ae:	f8df b034 	ldr.w	fp, [pc, #52]	; e8e4 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    e8b2:	9806      	ldr	r0, [sp, #24]
    e8b4:	f7fe fff6 	bl	d8a4 <am_hal_interrupt_master_set>
    e8b8:	f7ff bb9e 	b.w	dff8 <am_hal_uart_transfer+0x18>
    e8bc:	9806      	ldr	r0, [sp, #24]
    e8be:	f7fe fff1 	bl	d8a4 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    e8c2:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    e8c6:	42a5      	cmp	r5, r4
    e8c8:	bf28      	it	cs
    e8ca:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    e8cc:	4649      	mov	r1, r9
    e8ce:	4650      	mov	r0, sl
    e8d0:	462a      	mov	r2, r5
    e8d2:	f000 f94b 	bl	eb6c <am_hal_queue_item_get>
    e8d6:	e49d      	b.n	e214 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
    e8d8:	4605      	mov	r5, r0
    e8da:	e49b      	b.n	e214 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    e8dc:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    e8e0:	e7e7      	b.n	e8b2 <am_hal_uart_transfer+0x8d2>
    e8e2:	bf00      	nop
    e8e4:	08000001 	.word	0x08000001

0000e8e8 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    e8e8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    e8ec:	b570      	push	{r4, r5, r6, lr}
    e8ee:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    e8f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    e8f2:	b183      	cbz	r3, e916 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e8f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e8f6:	b170      	cbz	r0, e916 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    e8f8:	4e13      	ldr	r6, [pc, #76]	; (e948 <am_hal_uart_tx_flush+0x60>)
    e8fa:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e8fc:	fbb6 f2f1 	udiv	r2, r6, r1
    e900:	2a02      	cmp	r2, #2
    e902:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e906:	bf8c      	ite	hi
    e908:	3829      	subhi	r0, #41	; 0x29
    e90a:	2001      	movls	r0, #1
    e90c:	f7fe fd10 	bl	d330 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e910:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e912:	2b00      	cmp	r3, #0
    e914:	d1f1      	bne.n	e8fa <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e916:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e91a:	351c      	adds	r5, #28
    e91c:	032d      	lsls	r5, r5, #12
    e91e:	69a8      	ldr	r0, [r5, #24]
    e920:	0702      	lsls	r2, r0, #28
    e922:	d50e      	bpl.n	e942 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    e924:	4e08      	ldr	r6, [pc, #32]	; (e948 <am_hal_uart_tx_flush+0x60>)
    e926:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e928:	fbb6 f2f1 	udiv	r2, r6, r1
    e92c:	2a02      	cmp	r2, #2
    e92e:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e932:	bf8c      	ite	hi
    e934:	3829      	subhi	r0, #41	; 0x29
    e936:	2001      	movls	r0, #1
    e938:	f7fe fcfa 	bl	d330 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e93c:	69ab      	ldr	r3, [r5, #24]
    e93e:	071b      	lsls	r3, r3, #28
    e940:	d4f1      	bmi.n	e926 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    e942:	2000      	movs	r0, #0
    e944:	bd70      	pop	{r4, r5, r6, pc}
    e946:	bf00      	nop
    e948:	00b71b00 	.word	0x00b71b00

0000e94c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    e94c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    e94e:	2400      	movs	r4, #0
    e950:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    e952:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    e954:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    e956:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    e958:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    e95a:	6141      	str	r1, [r0, #20]
}
    e95c:	f85d 4b04 	ldr.w	r4, [sp], #4
    e960:	4770      	bx	lr
    e962:	bf00      	nop

0000e964 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    e964:	b5f0      	push	{r4, r5, r6, r7, lr}
    e966:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    e968:	6905      	ldr	r5, [r0, #16]
{
    e96a:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    e96c:	fb05 f502 	mul.w	r5, r5, r2
{
    e970:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
    e972:	f7fe ff93 	bl	d89c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    e976:	68e3      	ldr	r3, [r4, #12]
    e978:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
    e97a:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    e97c:	1a99      	subs	r1, r3, r2
    e97e:	428d      	cmp	r5, r1
    e980:	f200 8081 	bhi.w	ea86 <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    e984:	2d00      	cmp	r5, #0
    e986:	d075      	beq.n	ea74 <am_hal_queue_item_add+0x110>
    e988:	6826      	ldr	r6, [r4, #0]
    e98a:	2f00      	cmp	r7, #0
    e98c:	d07d      	beq.n	ea8a <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    e98e:	4638      	mov	r0, r7
    e990:	6963      	ldr	r3, [r4, #20]
    e992:	f810 2b01 	ldrb.w	r2, [r0], #1
    e996:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    e998:	6821      	ldr	r1, [r4, #0]
    e99a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    e99e:	1c4a      	adds	r2, r1, #1
    e9a0:	197e      	adds	r6, r7, r5
    e9a2:	43ff      	mvns	r7, r7
    e9a4:	fbb2 fcfe 	udiv	ip, r2, lr
    e9a8:	4437      	add	r7, r6
    e9aa:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    e9ae:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    e9b0:	6023      	str	r3, [r4, #0]
    e9b2:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    e9b6:	d05c      	beq.n	ea72 <am_hal_queue_item_add+0x10e>
    e9b8:	b349      	cbz	r1, ea0e <am_hal_queue_item_add+0xaa>
    e9ba:	2901      	cmp	r1, #1
    e9bc:	d019      	beq.n	e9f2 <am_hal_queue_item_add+0x8e>
    e9be:	2902      	cmp	r1, #2
    e9c0:	d00b      	beq.n	e9da <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    e9c2:	6962      	ldr	r2, [r4, #20]
    e9c4:	f810 7b01 	ldrb.w	r7, [r0], #1
    e9c8:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    e9ca:	6823      	ldr	r3, [r4, #0]
    e9cc:	68e1      	ldr	r1, [r4, #12]
    e9ce:	1c5a      	adds	r2, r3, #1
    e9d0:	fbb2 f7f1 	udiv	r7, r2, r1
    e9d4:	fb01 2317 	mls	r3, r1, r7, r2
    e9d8:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    e9da:	6962      	ldr	r2, [r4, #20]
    e9dc:	f810 1b01 	ldrb.w	r1, [r0], #1
    e9e0:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    e9e2:	6823      	ldr	r3, [r4, #0]
    e9e4:	68e7      	ldr	r7, [r4, #12]
    e9e6:	1c5a      	adds	r2, r3, #1
    e9e8:	fbb2 f1f7 	udiv	r1, r2, r7
    e9ec:	fb07 2311 	mls	r3, r7, r1, r2
    e9f0:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    e9f2:	6967      	ldr	r7, [r4, #20]
    e9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
    e9f8:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    e9fa:	6823      	ldr	r3, [r4, #0]
    e9fc:	68e1      	ldr	r1, [r4, #12]
    e9fe:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ea00:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea02:	fbb7 f2f1 	udiv	r2, r7, r1
    ea06:	fb01 7312 	mls	r3, r1, r2, r7
    ea0a:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ea0c:	d031      	beq.n	ea72 <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ea0e:	4686      	mov	lr, r0
    ea10:	6967      	ldr	r7, [r4, #20]
    ea12:	f81e 1b01 	ldrb.w	r1, [lr], #1
    ea16:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea18:	6823      	ldr	r3, [r4, #0]
    ea1a:	68e2      	ldr	r2, [r4, #12]
    ea1c:	1c5f      	adds	r7, r3, #1
    ea1e:	fbb7 f1f2 	udiv	r1, r7, r2
    ea22:	fb02 7311 	mls	r3, r2, r1, r7
    ea26:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ea28:	6962      	ldr	r2, [r4, #20]
    ea2a:	7847      	ldrb	r7, [r0, #1]
    ea2c:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea2e:	6823      	ldr	r3, [r4, #0]
    ea30:	68e1      	ldr	r1, [r4, #12]
    ea32:	1c5f      	adds	r7, r3, #1
    ea34:	fbb7 f2f1 	udiv	r2, r7, r1
    ea38:	fb01 7312 	mls	r3, r1, r2, r7
    ea3c:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ea3e:	6961      	ldr	r1, [r4, #20]
    ea40:	f89e 7001 	ldrb.w	r7, [lr, #1]
    ea44:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea46:	6822      	ldr	r2, [r4, #0]
    ea48:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ea4a:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea4c:	3201      	adds	r2, #1
    ea4e:	fbb2 fcf7 	udiv	ip, r2, r7
    ea52:	fb07 231c 	mls	r3, r7, ip, r2
    ea56:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ea58:	78c7      	ldrb	r7, [r0, #3]
    ea5a:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea5c:	6822      	ldr	r2, [r4, #0]
    ea5e:	68e1      	ldr	r1, [r4, #12]
    ea60:	1c57      	adds	r7, r2, #1
    ea62:	3004      	adds	r0, #4
    ea64:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ea68:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea6a:	fb01 7312 	mls	r3, r1, r2, r7
    ea6e:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ea70:	d1cd      	bne.n	ea0e <am_hal_queue_item_add+0xaa>
    ea72:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    ea74:	442a      	add	r2, r5
    ea76:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    ea78:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    ea7a:	9801      	ldr	r0, [sp, #4]
    ea7c:	f7fe ff12 	bl	d8a4 <am_hal_interrupt_master_set>

    return bSuccess;
}
    ea80:	4620      	mov	r0, r4
    ea82:	b003      	add	sp, #12
    ea84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    ea86:	2400      	movs	r4, #0
    ea88:	e7f7      	b.n	ea7a <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ea8a:	1c70      	adds	r0, r6, #1
    ea8c:	fbb0 fef3 	udiv	lr, r0, r3
    ea90:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ea94:	2001      	movs	r0, #1
    ea96:	1e6e      	subs	r6, r5, #1
    ea98:	4285      	cmp	r5, r0
    ea9a:	f006 0707 	and.w	r7, r6, #7
    ea9e:	d063      	beq.n	eb68 <am_hal_queue_item_add+0x204>
    eaa0:	b3bf      	cbz	r7, eb12 <am_hal_queue_item_add+0x1ae>
    eaa2:	2f01      	cmp	r7, #1
    eaa4:	d02d      	beq.n	eb02 <am_hal_queue_item_add+0x19e>
    eaa6:	2f02      	cmp	r7, #2
    eaa8:	d025      	beq.n	eaf6 <am_hal_queue_item_add+0x192>
    eaaa:	2f03      	cmp	r7, #3
    eaac:	d01d      	beq.n	eaea <am_hal_queue_item_add+0x186>
    eaae:	2f04      	cmp	r7, #4
    eab0:	d015      	beq.n	eade <am_hal_queue_item_add+0x17a>
    eab2:	2f05      	cmp	r7, #5
    eab4:	d00d      	beq.n	ead2 <am_hal_queue_item_add+0x16e>
    eab6:	2f06      	cmp	r7, #6
    eab8:	d005      	beq.n	eac6 <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eaba:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eabc:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eabe:	fbb1 fcf3 	udiv	ip, r1, r3
    eac2:	fb03 111c 	mls	r1, r3, ip, r1
    eac6:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eac8:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eaca:	fbb1 f6f3 	udiv	r6, r1, r3
    eace:	fb03 1116 	mls	r1, r3, r6, r1
    ead2:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ead4:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ead6:	fbb1 f7f3 	udiv	r7, r1, r3
    eada:	fb03 1117 	mls	r1, r3, r7, r1
    eade:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eae0:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eae2:	fbb1 fef3 	udiv	lr, r1, r3
    eae6:	fb03 111e 	mls	r1, r3, lr, r1
    eaea:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eaec:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eaee:	fbb1 fcf3 	udiv	ip, r1, r3
    eaf2:	fb03 111c 	mls	r1, r3, ip, r1
    eaf6:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eaf8:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eafa:	fbb1 f6f3 	udiv	r6, r1, r3
    eafe:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb02:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eb04:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb06:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eb08:	fbb1 f7f3 	udiv	r7, r1, r3
    eb0c:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb10:	d02a      	beq.n	eb68 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eb12:	3101      	adds	r1, #1
    eb14:	fbb1 fef3 	udiv	lr, r1, r3
    eb18:	fb03 161e 	mls	r6, r3, lr, r1
    eb1c:	1c77      	adds	r7, r6, #1
    eb1e:	fbb7 fcf3 	udiv	ip, r7, r3
    eb22:	fb03 711c 	mls	r1, r3, ip, r7
    eb26:	1c4e      	adds	r6, r1, #1
    eb28:	fbb6 f7f3 	udiv	r7, r6, r3
    eb2c:	fb03 6117 	mls	r1, r3, r7, r6
    eb30:	1c4e      	adds	r6, r1, #1
    eb32:	fbb6 f7f3 	udiv	r7, r6, r3
    eb36:	fb03 6117 	mls	r1, r3, r7, r6
    eb3a:	1c4e      	adds	r6, r1, #1
    eb3c:	fbb6 f7f3 	udiv	r7, r6, r3
    eb40:	fb03 6117 	mls	r1, r3, r7, r6
    eb44:	1c4e      	adds	r6, r1, #1
    eb46:	fbb6 f7f3 	udiv	r7, r6, r3
    eb4a:	fb03 6117 	mls	r1, r3, r7, r6
    eb4e:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb50:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eb52:	fbb6 f7f3 	udiv	r7, r6, r3
    eb56:	fb03 6117 	mls	r1, r3, r7, r6
    eb5a:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb5c:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eb5e:	fbb6 f7f3 	udiv	r7, r6, r3
    eb62:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb66:	d1d4      	bne.n	eb12 <am_hal_queue_item_add+0x1ae>
    eb68:	6021      	str	r1, [r4, #0]
    eb6a:	e783      	b.n	ea74 <am_hal_queue_item_add+0x110>

0000eb6c <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    eb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb6e:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eb70:	6905      	ldr	r5, [r0, #16]
{
    eb72:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eb74:	fb05 f502 	mul.w	r5, r5, r2
{
    eb78:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
    eb7a:	f7fe fe8f 	bl	d89c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    eb7e:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
    eb80:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    eb82:	42bd      	cmp	r5, r7
    eb84:	f200 8083 	bhi.w	ec8e <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eb88:	2d00      	cmp	r5, #0
    eb8a:	d077      	beq.n	ec7c <am_hal_queue_item_get+0x110>
    eb8c:	6863      	ldr	r3, [r4, #4]
    eb8e:	2e00      	cmp	r6, #0
    eb90:	d07f      	beq.n	ec92 <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    eb92:	6962      	ldr	r2, [r4, #20]
    eb94:	4630      	mov	r0, r6
    eb96:	5cd1      	ldrb	r1, [r2, r3]
    eb98:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    eb9c:	6863      	ldr	r3, [r4, #4]
    eb9e:	68e7      	ldr	r7, [r4, #12]
    eba0:	1c5a      	adds	r2, r3, #1
    eba2:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eba4:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    eba6:	fbb2 f6f7 	udiv	r6, r2, r7
    ebaa:	fb07 2316 	mls	r3, r7, r6, r2
    ebae:	f105 37ff 	add.w	r7, r5, #4294967295
    ebb2:	6063      	str	r3, [r4, #4]
    ebb4:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ebb8:	d05f      	beq.n	ec7a <am_hal_queue_item_get+0x10e>
    ebba:	b362      	cbz	r2, ec16 <am_hal_queue_item_get+0xaa>
    ebbc:	2a01      	cmp	r2, #1
    ebbe:	d01b      	beq.n	ebf8 <am_hal_queue_item_get+0x8c>
    ebc0:	2a02      	cmp	r2, #2
    ebc2:	d00c      	beq.n	ebde <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ebc4:	6966      	ldr	r6, [r4, #20]
    ebc6:	f816 c003 	ldrb.w	ip, [r6, r3]
    ebca:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ebce:	6863      	ldr	r3, [r4, #4]
    ebd0:	68e7      	ldr	r7, [r4, #12]
    ebd2:	1c5a      	adds	r2, r3, #1
    ebd4:	fbb2 f6f7 	udiv	r6, r2, r7
    ebd8:	fb07 2316 	mls	r3, r7, r6, r2
    ebdc:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ebde:	6967      	ldr	r7, [r4, #20]
    ebe0:	f817 e003 	ldrb.w	lr, [r7, r3]
    ebe4:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ebe8:	6863      	ldr	r3, [r4, #4]
    ebea:	68e6      	ldr	r6, [r4, #12]
    ebec:	1c5a      	adds	r2, r3, #1
    ebee:	fbb2 f7f6 	udiv	r7, r2, r6
    ebf2:	fb06 2317 	mls	r3, r6, r7, r2
    ebf6:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ebf8:	6966      	ldr	r6, [r4, #20]
    ebfa:	f816 c003 	ldrb.w	ip, [r6, r3]
    ebfe:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec02:	6863      	ldr	r3, [r4, #4]
    ec04:	68e7      	ldr	r7, [r4, #12]
    ec06:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ec08:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec0a:	fbb2 f6f7 	udiv	r6, r2, r7
    ec0e:	fb07 2316 	mls	r3, r7, r6, r2
    ec12:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ec14:	d031      	beq.n	ec7a <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec16:	6962      	ldr	r2, [r4, #20]
    ec18:	4686      	mov	lr, r0
    ec1a:	5cd6      	ldrb	r6, [r2, r3]
    ec1c:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec20:	6863      	ldr	r3, [r4, #4]
    ec22:	68e7      	ldr	r7, [r4, #12]
    ec24:	1c5a      	adds	r2, r3, #1
    ec26:	fbb2 f6f7 	udiv	r6, r2, r7
    ec2a:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec2e:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec30:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec32:	5cfa      	ldrb	r2, [r7, r3]
    ec34:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec36:	6863      	ldr	r3, [r4, #4]
    ec38:	68e6      	ldr	r6, [r4, #12]
    ec3a:	1c5f      	adds	r7, r3, #1
    ec3c:	fbb7 f2f6 	udiv	r2, r7, r6
    ec40:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec44:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec46:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec48:	5cf7      	ldrb	r7, [r6, r3]
    ec4a:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec4e:	6862      	ldr	r2, [r4, #4]
    ec50:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec52:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec54:	3201      	adds	r2, #1
    ec56:	fbb2 fcf7 	udiv	ip, r2, r7
    ec5a:	fb07 231c 	mls	r3, r7, ip, r2
    ec5e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ec60:	5cf7      	ldrb	r7, [r6, r3]
    ec62:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec64:	6866      	ldr	r6, [r4, #4]
    ec66:	68e7      	ldr	r7, [r4, #12]
    ec68:	1c72      	adds	r2, r6, #1
    ec6a:	3004      	adds	r0, #4
    ec6c:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ec70:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec72:	fb07 2316 	mls	r3, r7, r6, r2
    ec76:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ec78:	d1cd      	bne.n	ec16 <am_hal_queue_item_get+0xaa>
    ec7a:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    ec7c:	1b7f      	subs	r7, r7, r5
    ec7e:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    ec80:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    ec82:	9801      	ldr	r0, [sp, #4]
    ec84:	f7fe fe0e 	bl	d8a4 <am_hal_interrupt_master_set>

    return bSuccess;
}
    ec88:	4620      	mov	r0, r4
    ec8a:	b003      	add	sp, #12
    ec8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    ec8e:	2400      	movs	r4, #0
    ec90:	e7f7      	b.n	ec82 <am_hal_queue_item_get+0x116>
    ec92:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ec94:	1c58      	adds	r0, r3, #1
    ec96:	fbb0 fef1 	udiv	lr, r0, r1
    ec9a:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ec9e:	2001      	movs	r0, #1
    eca0:	1e6a      	subs	r2, r5, #1
    eca2:	4285      	cmp	r5, r0
    eca4:	f002 0607 	and.w	r6, r2, #7
    eca8:	d063      	beq.n	ed72 <am_hal_queue_item_get+0x206>
    ecaa:	b3be      	cbz	r6, ed1c <am_hal_queue_item_get+0x1b0>
    ecac:	2e01      	cmp	r6, #1
    ecae:	d02d      	beq.n	ed0c <am_hal_queue_item_get+0x1a0>
    ecb0:	2e02      	cmp	r6, #2
    ecb2:	d025      	beq.n	ed00 <am_hal_queue_item_get+0x194>
    ecb4:	2e03      	cmp	r6, #3
    ecb6:	d01d      	beq.n	ecf4 <am_hal_queue_item_get+0x188>
    ecb8:	2e04      	cmp	r6, #4
    ecba:	d015      	beq.n	ece8 <am_hal_queue_item_get+0x17c>
    ecbc:	2e05      	cmp	r6, #5
    ecbe:	d00d      	beq.n	ecdc <am_hal_queue_item_get+0x170>
    ecc0:	2e06      	cmp	r6, #6
    ecc2:	d005      	beq.n	ecd0 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ecc4:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecc6:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ecc8:	fbb3 f2f1 	udiv	r2, r3, r1
    eccc:	fb01 3312 	mls	r3, r1, r2, r3
    ecd0:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecd2:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ecd4:	fbb3 fcf1 	udiv	ip, r3, r1
    ecd8:	fb01 331c 	mls	r3, r1, ip, r3
    ecdc:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecde:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ece0:	fbb3 fef1 	udiv	lr, r3, r1
    ece4:	fb01 331e 	mls	r3, r1, lr, r3
    ece8:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecea:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ecec:	fbb3 f6f1 	udiv	r6, r3, r1
    ecf0:	fb01 3316 	mls	r3, r1, r6, r3
    ecf4:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecf6:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ecf8:	fbb3 f2f1 	udiv	r2, r3, r1
    ecfc:	fb01 3312 	mls	r3, r1, r2, r3
    ed00:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed02:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed04:	fbb3 fcf1 	udiv	ip, r3, r1
    ed08:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed0c:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed0e:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed10:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed12:	fbb3 fef1 	udiv	lr, r3, r1
    ed16:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed1a:	d02a      	beq.n	ed72 <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed1c:	3301      	adds	r3, #1
    ed1e:	fbb3 f6f1 	udiv	r6, r3, r1
    ed22:	fb01 3216 	mls	r2, r1, r6, r3
    ed26:	1c56      	adds	r6, r2, #1
    ed28:	fbb6 fcf1 	udiv	ip, r6, r1
    ed2c:	fb01 631c 	mls	r3, r1, ip, r6
    ed30:	1c5a      	adds	r2, r3, #1
    ed32:	fbb2 f6f1 	udiv	r6, r2, r1
    ed36:	fb01 2316 	mls	r3, r1, r6, r2
    ed3a:	1c5a      	adds	r2, r3, #1
    ed3c:	fbb2 f6f1 	udiv	r6, r2, r1
    ed40:	fb01 2316 	mls	r3, r1, r6, r2
    ed44:	1c5a      	adds	r2, r3, #1
    ed46:	fbb2 f6f1 	udiv	r6, r2, r1
    ed4a:	fb01 2316 	mls	r3, r1, r6, r2
    ed4e:	1c5a      	adds	r2, r3, #1
    ed50:	fbb2 f6f1 	udiv	r6, r2, r1
    ed54:	fb01 2316 	mls	r3, r1, r6, r2
    ed58:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed5a:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed5c:	fbb2 f6f1 	udiv	r6, r2, r1
    ed60:	fb01 2316 	mls	r3, r1, r6, r2
    ed64:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed66:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ed68:	fbb2 f6f1 	udiv	r6, r2, r1
    ed6c:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed70:	d1d4      	bne.n	ed1c <am_hal_queue_item_get+0x1b0>
    ed72:	6063      	str	r3, [r4, #4]
    ed74:	e782      	b.n	ec7c <am_hal_queue_item_get+0x110>
    ed76:	bf00      	nop
    ed78:	70656544 	.word	0x70656544
    ed7c:	65656c73 	.word	0x65656c73
    ed80:	78452070 	.word	0x78452070
    ed84:	6c706d61 	.word	0x6c706d61
    ed88:	00000a65 	.word	0x00000a65
    ed8c:	0a0a0a0a 	.word	0x0a0a0a0a
    ed90:	0a0a0a0a 	.word	0x0a0a0a0a
    ed94:	0a0a0a0a 	.word	0x0a0a0a0a
    ed98:	0a0a0a0a 	.word	0x0a0a0a0a
    ed9c:	00000a0a 	.word	0x00000a0a

0000eda0 <g_sBspUartConfig>:
    eda0:	0001c200 00000060 00000000 00000000     ....`...........
    edb0:	00000000 00000012 00000000 00000000     ................
	...

0000edc8 <g_AM_BSP_GPIO_COM_UART_RX>:
    edc8:	00000000                                ....

0000edcc <g_AM_BSP_GPIO_COM_UART_TX>:
    edcc:	00000000                                ....

0000edd0 <am_hal_cachectrl_defaults>:
    edd0:	00000308                                ....

0000edd4 <g_AM_HAL_GPIO_DISABLE>:
    edd4:	00000003                                ....

0000edd8 <g_AM_HAL_GPIO_OUTPUT>:
    edd8:	00000403                                ....

0000eddc <g_ui8Bit76Capabilities>:
    eddc:	02800101 80010180 80800101 80808080     ................
    edec:	80808080 80808008 01800180 80808080     ................
    edfc:	80808080 01800402 01010401 80808080     ................
    ee0c:	00000101                                ....

0000ee10 <g_ui8Inpen>:
    ee10:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    ee20:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    ee30:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    ee40:	00003130                                01..

0000ee44 <g_ui8NCEtable>:
    ee44:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ee54:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ee64:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ee74:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ee84:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ee94:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eea4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    eeb4:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    eec4:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    eed4:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    eee4:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    eef4:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ef04:	32221202 43231303                       .."2..#C

0000ef0c <g_ui8nCEpins>:
    ef0c:	02070707 00080802 01020202 01010101     ................
    ef1c:	01010101 01010101 01010101 01010101     ................
    ef2c:	01010101 08010101 01010008 01010101     ................
    ef3c:	00000101                                ....

0000ef40 <g_am_hal_mcuctrl_flash_size>:
    ef40:	00004000 00008000 00010000 00020000     .@..............
    ef50:	00040000 00080000 00100000 00200000     .............. .
	...

0000ef80 <g_am_hal_mcuctrl_sram_size>:
    ef80:	00004000 00008000 00010000 00020000     .@..............
    ef90:	00040000 00080000 00100000 00060000     ................
	...

0000efc0 <am_hal_pwrctrl_memory_control>:
	...
    efd4:	00000001 00000001 00000001 00001fff     ................
    efe4:	00001fff 00000003 00000003 00000003     ................
    eff4:	00001fff 00001fff 00000007 00000007     ................
    f004:	00000007 00001fff 00001fff 0000000f     ................
    f014:	0000000f 0000000f 00001fff 00001fff     ................
    f024:	0000001f 0000001f 0000001f 00001fff     ................
    f034:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    f044:	00001fff 00001fff 0000007f 0000007f     ................
    f054:	0000007f 00001fff 00001fff 000000ff     ................
    f064:	000000ff 000000ff 00001fff 00001fff     ................
    f074:	000001ff 000001ff 000001ff 00001fff     ................
    f084:	00001fff 000003ff 000003ff 000003ff     ................
    f094:	00001fff 00001fff 000007ff 000007ff     ................
    f0a4:	000007ff 00001fff 00001fff 00000fff     ................
    f0b4:	00000fff 00000fff 00001fff 00001fff     ................
    f0c4:	00001fff 00001fff 00001fff 00001fff     ................
    f0d4:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    f0e4:	00006000 00006000 00006000 00006000     .`...`...`...`..
    f0f4:	00006000 00006000 00006000 c0000000     .`...`...`......
    f104:	00018000 c0000000 c0000000 00018000     ................
    f114:	c0007fff 0001ffff c0007fff c0007fff     ................
    f124:	0001ffff                                ....

0000f128 <am_hal_pwrctrl_peripheral_control>:
	...
    f134:	00000001 00000004 00000004 00000002     ................
    f144:	00000008 00000008 00000004 00000008     ................
    f154:	00000008 00000008 00000008 00000008     ................
    f164:	00000010 00000010 00000010 00000020     ............ ...
    f174:	00000010 00000010 00000040 00000010     ........@.......
    f184:	00000010 00000080 00000004 00000004     ................
    f194:	00000100 00000004 00000004 00000200     ................
    f1a4:	00000020 00000020 00000400 00000004      ... ...........
    f1b4:	00000004 00000800 00000040 00000040     ........@...@...
    f1c4:	00001000 00000080 00000080 00002000     ............. ..
    f1d4:	00000100 00000100                       ........
