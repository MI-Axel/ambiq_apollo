
burst_mode_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002788  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000e788  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001028  0000e7b0  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   00023ebd  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ec8  00000000  00000000  00034f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000006b8  00000000  00000000  00037de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001100  00000000  00000000  0003849c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005497  00000000  00000000  0003959c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b37e  00000000  00000000  0003ea33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00049db1  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000012e4  00000000  00000000  00049e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004240  00000000  00000000  0004b114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 75 c3 00 00 dd c3 00 00 e9 c3 00 00     ....u...........
    c010:	e9 c3 00 00 e9 c3 00 00 e9 c3 00 00 00 00 00 00     ................
	...
    c02c:	e3 c3 00 00 e3 c3 00 00 00 00 00 00 e3 c3 00 00     ................
    c03c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c04c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c05c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c06c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c07c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c08c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c09c:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c0ac:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c0bc:	e3 c3 00 00 e3 c3 00 00 e3 c3 00 00 e3 c3 00 00     ................
    c0cc:	e3 c3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <stimer_init>:
// Init function for the STimer.
//
//*****************************************************************************
void
stimer_init(void)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	af00      	add	r7, sp, #0
  //
  // Configure the STIMER and run
  //
  am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c1a4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c1a8:	f001 ff02 	bl	dfb0 <am_hal_stimer_config>
  am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ);
    c1ac:	2003      	movs	r0, #3
    c1ae:	f001 feff 	bl	dfb0 <am_hal_stimer_config>

}
    c1b2:	bf00      	nop
    c1b4:	bd80      	pop	{r7, pc}

0000c1b6 <prime_number>:
//    Output, int PRIME_NUMBER, the number of prime numbers up to N.
//
//*****************************************************************************
uint32_t
prime_number(int32_t i32n)
{
    c1b6:	b480      	push	{r7}
    c1b8:	b087      	sub	sp, #28
    c1ba:	af00      	add	r7, sp, #0
    c1bc:	6078      	str	r0, [r7, #4]
    uint32_t ui32Total, ui32Prime;
    int32_t ix, jx;

    ui32Total = 0;
    c1be:	2300      	movs	r3, #0
    c1c0:	617b      	str	r3, [r7, #20]

    for ( ix = 2; ix <= i32n; ix++ )
    c1c2:	2302      	movs	r3, #2
    c1c4:	60fb      	str	r3, [r7, #12]
    c1c6:	e01f      	b.n	c208 <prime_number+0x52>
    {
        ui32Prime = 1;
    c1c8:	2301      	movs	r3, #1
    c1ca:	613b      	str	r3, [r7, #16]
        for ( jx = 2; jx < ix; jx++ )
    c1cc:	2302      	movs	r3, #2
    c1ce:	60bb      	str	r3, [r7, #8]
    c1d0:	e00f      	b.n	c1f2 <prime_number+0x3c>
        {
            if ( (ix % jx) == 0 )
    c1d2:	68fb      	ldr	r3, [r7, #12]
    c1d4:	68ba      	ldr	r2, [r7, #8]
    c1d6:	fb93 f2f2 	sdiv	r2, r3, r2
    c1da:	68b9      	ldr	r1, [r7, #8]
    c1dc:	fb01 f202 	mul.w	r2, r1, r2
    c1e0:	1a9b      	subs	r3, r3, r2
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d102      	bne.n	c1ec <prime_number+0x36>
            {
                ui32Prime = 0;
    c1e6:	2300      	movs	r3, #0
    c1e8:	613b      	str	r3, [r7, #16]
                break;
    c1ea:	e006      	b.n	c1fa <prime_number+0x44>
        for ( jx = 2; jx < ix; jx++ )
    c1ec:	68bb      	ldr	r3, [r7, #8]
    c1ee:	3301      	adds	r3, #1
    c1f0:	60bb      	str	r3, [r7, #8]
    c1f2:	68ba      	ldr	r2, [r7, #8]
    c1f4:	68fb      	ldr	r3, [r7, #12]
    c1f6:	429a      	cmp	r2, r3
    c1f8:	dbeb      	blt.n	c1d2 <prime_number+0x1c>
            }
        }
        ui32Total += ui32Prime;
    c1fa:	697a      	ldr	r2, [r7, #20]
    c1fc:	693b      	ldr	r3, [r7, #16]
    c1fe:	4413      	add	r3, r2
    c200:	617b      	str	r3, [r7, #20]
    for ( ix = 2; ix <= i32n; ix++ )
    c202:	68fb      	ldr	r3, [r7, #12]
    c204:	3301      	adds	r3, #1
    c206:	60fb      	str	r3, [r7, #12]
    c208:	68fa      	ldr	r2, [r7, #12]
    c20a:	687b      	ldr	r3, [r7, #4]
    c20c:	429a      	cmp	r2, r3
    c20e:	dddb      	ble.n	c1c8 <prime_number+0x12>
    }
    return ui32Total;
    c210:	697b      	ldr	r3, [r7, #20]
}
    c212:	4618      	mov	r0, r3
    c214:	371c      	adds	r7, #28
    c216:	46bd      	mov	sp, r7
    c218:	f85d 7b04 	ldr.w	r7, [sp], #4
    c21c:	4770      	bx	lr
	...

0000c220 <main>:
// Test cases for the main program to run.
//
//*****************************************************************************
int
main(void)
{
    c220:	b580      	push	{r7, lr}
    c222:	b086      	sub	sp, #24
    c224:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e           eBurstMode;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c226:	2100      	movs	r1, #0
    c228:	2000      	movs	r0, #0
    c22a:	f001 fa11 	bl	d650 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c22e:	4843      	ldr	r0, [pc, #268]	; (c33c <main+0x11c>)
    c230:	f001 f9da 	bl	d5e8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c234:	f001 fa02 	bl	d63c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c238:	f001 f8e6 	bl	d408 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c23c:	f001 f916 	bl	d46c <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c240:	f001 f8d8 	bl	d3f4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Apollo3 Burst Mode Example\n\n");
    c244:	483e      	ldr	r0, [pc, #248]	; (c340 <main+0x120>)
    c246:	f001 f8b7 	bl	d3b8 <am_util_stdio_printf>


    // Initialize the STimer.
    stimer_init();
    c24a:	f7ff ffa9 	bl	c1a0 <stimer_init>

    // Check that the Burst Feature is available.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    c24e:	1dfb      	adds	r3, r7, #7
    c250:	4618      	mov	r0, r3
    c252:	f001 f92b 	bl	d4ac <am_hal_burst_mode_initialize>
    c256:	4603      	mov	r3, r0
    c258:	2b00      	cmp	r3, #0
    c25a:	d10a      	bne.n	c272 <main+0x52>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    c25c:	79fb      	ldrb	r3, [r7, #7]
    c25e:	2b00      	cmp	r3, #0
    c260:	d103      	bne.n	c26a <main+0x4a>
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Available\n");
    c262:	4838      	ldr	r0, [pc, #224]	; (c344 <main+0x124>)
    c264:	f001 f8a8 	bl	d3b8 <am_util_stdio_printf>
    c268:	e006      	b.n	c278 <main+0x58>
        }
        else
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Not Available\n");
    c26a:	4837      	ldr	r0, [pc, #220]	; (c348 <main+0x128>)
    c26c:	f001 f8a4 	bl	d3b8 <am_util_stdio_printf>
    c270:	e002      	b.n	c278 <main+0x58>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\n");
    c272:	4836      	ldr	r0, [pc, #216]	; (c34c <main+0x12c>)
    c274:	f001 f8a0 	bl	d3b8 <am_util_stdio_printf>
    }

    // Make sure we are in "Normal" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    c278:	1dbb      	adds	r3, r7, #6
    c27a:	4618      	mov	r0, r3
    c27c:	f001 f98e 	bl	d59c <am_hal_burst_mode_disable>
    c280:	4603      	mov	r3, r0
    c282:	2b00      	cmp	r3, #0
    c284:	d106      	bne.n	c294 <main+0x74>
    {
        if (AM_HAL_NORMAL_MODE == eBurstMode)
    c286:	79bb      	ldrb	r3, [r7, #6]
    c288:	2b01      	cmp	r3, #1
    c28a:	d106      	bne.n	c29a <main+0x7a>
        {
            am_util_stdio_printf("Apollo3 operating in Normal Mode (48MHz)\n");
    c28c:	4830      	ldr	r0, [pc, #192]	; (c350 <main+0x130>)
    c28e:	f001 f893 	bl	d3b8 <am_util_stdio_printf>
    c292:	e002      	b.n	c29a <main+0x7a>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Disable Burst Mode operation\n");
    c294:	482f      	ldr	r0, [pc, #188]	; (c354 <main+0x134>)
    c296:	f001 f88f 	bl	d3b8 <am_util_stdio_printf>
    }

    // Capture the start time.
    ui32StartTime = am_hal_stimer_counter_get();
    c29a:	f001 fe93 	bl	dfc4 <am_hal_stimer_counter_get>
    c29e:	6178      	str	r0, [r7, #20]

    // Execute the example algorithm.
    am_util_stdio_printf("\nStarted calculating primes in Normal Mode\n");
    c2a0:	482d      	ldr	r0, [pc, #180]	; (c358 <main+0x138>)
    c2a2:	f001 f889 	bl	d3b8 <am_util_stdio_printf>
    prime_number(NUM_OF_PRIMES_IN);
    c2a6:	f241 3088 	movw	r0, #5000	; 0x1388
    c2aa:	f7ff ff84 	bl	c1b6 <prime_number>

    // Stop the timer and calculate the elapsed time.
    ui32StopTime = am_hal_stimer_counter_get();
    c2ae:	f001 fe89 	bl	dfc4 <am_hal_stimer_counter_get>
    c2b2:	6138      	str	r0, [r7, #16]

    // Calculate the Burst Mode delta time.
    ui32NormalModeDelta = ui32StopTime - ui32StartTime;
    c2b4:	693a      	ldr	r2, [r7, #16]
    c2b6:	697b      	ldr	r3, [r7, #20]
    c2b8:	1ad3      	subs	r3, r2, r3
    c2ba:	60fb      	str	r3, [r7, #12]
    am_util_stdio_printf("Normal Mode Delta: %d\n", ui32NormalModeDelta);
    c2bc:	68f9      	ldr	r1, [r7, #12]
    c2be:	4827      	ldr	r0, [pc, #156]	; (c35c <main+0x13c>)
    c2c0:	f001 f87a 	bl	d3b8 <am_util_stdio_printf>

    // Put the MCU into "Burst" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    c2c4:	1dbb      	adds	r3, r7, #6
    c2c6:	4618      	mov	r0, r3
    c2c8:	f001 f93a 	bl	d540 <am_hal_burst_mode_enable>
    c2cc:	4603      	mov	r3, r0
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d106      	bne.n	c2e0 <main+0xc0>
    {
        if (AM_HAL_BURST_MODE == eBurstMode)
    c2d2:	79bb      	ldrb	r3, [r7, #6]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d106      	bne.n	c2e6 <main+0xc6>
        {
            am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\n");
    c2d8:	4821      	ldr	r0, [pc, #132]	; (c360 <main+0x140>)
    c2da:	f001 f86d 	bl	d3b8 <am_util_stdio_printf>
    c2de:	e002      	b.n	c2e6 <main+0xc6>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Enable Burst Mode operation\n");
    c2e0:	4820      	ldr	r0, [pc, #128]	; (c364 <main+0x144>)
    c2e2:	f001 f869 	bl	d3b8 <am_util_stdio_printf>
    }

    // Capture the start time.
    ui32StartTime = am_hal_stimer_counter_get();
    c2e6:	f001 fe6d 	bl	dfc4 <am_hal_stimer_counter_get>
    c2ea:	6178      	str	r0, [r7, #20]

    // Execute the example algorithm.
    am_util_stdio_printf("\nStarted calculating primes in Burst Mode\n");
    c2ec:	481e      	ldr	r0, [pc, #120]	; (c368 <main+0x148>)
    c2ee:	f001 f863 	bl	d3b8 <am_util_stdio_printf>
    prime_number(NUM_OF_PRIMES_IN);
    c2f2:	f241 3088 	movw	r0, #5000	; 0x1388
    c2f6:	f7ff ff5e 	bl	c1b6 <prime_number>

    // Stop the timer and calculate the elapsed time.
    ui32StopTime = am_hal_stimer_counter_get();
    c2fa:	f001 fe63 	bl	dfc4 <am_hal_stimer_counter_get>
    c2fe:	6138      	str	r0, [r7, #16]

    // Disable Burst Mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    c300:	1dbb      	adds	r3, r7, #6
    c302:	4618      	mov	r0, r3
    c304:	f001 f94a 	bl	d59c <am_hal_burst_mode_disable>
    c308:	4603      	mov	r3, r0
    c30a:	2b00      	cmp	r3, #0
    c30c:	d106      	bne.n	c31c <main+0xfc>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    c30e:	79bb      	ldrb	r3, [r7, #6]
    c310:	2b01      	cmp	r3, #1
    c312:	d006      	beq.n	c322 <main+0x102>
        {
            am_util_stdio_printf("Apollo3 failed to return to Normal Mode (48MHz)\n");
    c314:	4815      	ldr	r0, [pc, #84]	; (c36c <main+0x14c>)
    c316:	f001 f84f 	bl	d3b8 <am_util_stdio_printf>
    c31a:	e002      	b.n	c322 <main+0x102>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Disable Burst Mode operation\n");
    c31c:	480d      	ldr	r0, [pc, #52]	; (c354 <main+0x134>)
    c31e:	f001 f84b 	bl	d3b8 <am_util_stdio_printf>
    }

    // Calculate the Burst Mode delta time.
    ui32BurstModeDelta = ui32StopTime - ui32StartTime;
    c322:	693a      	ldr	r2, [r7, #16]
    c324:	697b      	ldr	r3, [r7, #20]
    c326:	1ad3      	subs	r3, r2, r3
    c328:	60bb      	str	r3, [r7, #8]
    am_util_stdio_printf("Burst Mode Delta: %d\n", ui32BurstModeDelta);
    c32a:	68b9      	ldr	r1, [r7, #8]
    c32c:	4810      	ldr	r0, [pc, #64]	; (c370 <main+0x150>)
    c32e:	f001 f843 	bl	d3b8 <am_util_stdio_printf>
    c332:	2300      	movs	r3, #0

}
    c334:	4618      	mov	r0, r3
    c336:	3718      	adds	r7, #24
    c338:	46bd      	mov	sp, r7
    c33a:	bd80      	pop	{r7, pc}
    c33c:	0000e598 	.word	0x0000e598
    c340:	0000e074 	.word	0x0000e074
    c344:	0000e094 	.word	0x0000e094
    c348:	0000e0b8 	.word	0x0000e0b8
    c34c:	0000e0e0 	.word	0x0000e0e0
    c350:	0000e110 	.word	0x0000e110
    c354:	0000e13c 	.word	0x0000e13c
    c358:	0000e164 	.word	0x0000e164
    c35c:	0000e190 	.word	0x0000e190
    c360:	0000e1a8 	.word	0x0000e1a8
    c364:	0000e1d4 	.word	0x0000e1d4
    c368:	0000e1fc 	.word	0x0000e1fc
    c36c:	0000e228 	.word	0x0000e228
    c370:	0000e25c 	.word	0x0000e25c

0000c374 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c374:	4811      	ldr	r0, [pc, #68]	; (c3bc <zero_loop+0x12>)
    c376:	4912      	ldr	r1, [pc, #72]	; (c3c0 <zero_loop+0x16>)
    c378:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c37a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c37e:	4811      	ldr	r0, [pc, #68]	; (c3c4 <zero_loop+0x1a>)
    c380:	6801      	ldr	r1, [r0, #0]
    c382:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c386:	6001      	str	r1, [r0, #0]
    c388:	f3bf 8f4f 	dsb	sy
    c38c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c390:	480d      	ldr	r0, [pc, #52]	; (c3c8 <zero_loop+0x1e>)
    c392:	490e      	ldr	r1, [pc, #56]	; (c3cc <zero_loop+0x22>)
    c394:	4a0e      	ldr	r2, [pc, #56]	; (c3d0 <zero_loop+0x26>)

0000c396 <copy_loop>:
    c396:	f850 3b04 	ldr.w	r3, [r0], #4
    c39a:	f841 3b04 	str.w	r3, [r1], #4
    c39e:	4291      	cmp	r1, r2
    c3a0:	dbf9      	blt.n	c396 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c3a2:	480c      	ldr	r0, [pc, #48]	; (c3d4 <zero_loop+0x2a>)
    c3a4:	490c      	ldr	r1, [pc, #48]	; (c3d8 <zero_loop+0x2e>)
    c3a6:	f04f 0200 	mov.w	r2, #0

0000c3aa <zero_loop>:
    c3aa:	4288      	cmp	r0, r1
    c3ac:	bfb8      	it	lt
    c3ae:	f840 2b04 	strlt.w	r2, [r0], #4
    c3b2:	dbfa      	blt.n	c3aa <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c3b4:	f7ff ff34 	bl	c220 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c3b8:	be00      	bkpt	0x0000
}
    c3ba:	bf00      	nop
    c3bc:	e000ed08 	.word	0xe000ed08
    c3c0:	0000c000 	.word	0x0000c000
    c3c4:	e000ed88 	.word	0xe000ed88
    c3c8:	0000e788 	.word	0x0000e788
    c3cc:	10001000 	.word	0x10001000
    c3d0:	10001028 	.word	0x10001028
    c3d4:	10001028 	.word	0x10001028
    c3d8:	10001138 	.word	0x10001138

0000c3dc <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c3dc:	b480      	push	{r7}
    c3de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c3e0:	e7fe      	b.n	c3e0 <NMI_Handler+0x4>

0000c3e2 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c3e2:	b480      	push	{r7}
    c3e4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c3e6:	e7fe      	b.n	c3e6 <DebugMon_Handler+0x4>

0000c3e8 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c3e8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c3ea:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c3ec:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c3ee:	f000 f809 	bl	c404 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c3f2:	bd01      	pop	{r0, pc}
}
    c3f4:	bf00      	nop
    c3f6:	4618      	mov	r0, r3

0000c3f8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c3f8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c3fa:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c3fc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c3fe:	4770      	bx	lr
}
    c400:	bf00      	nop
    c402:	4618      	mov	r0, r3

0000c404 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c404:	b580      	push	{r7, lr}
    c406:	b096      	sub	sp, #88	; 0x58
    c408:	af00      	add	r7, sp, #0
    c40a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c40c:	f107 030c 	add.w	r3, r7, #12
    c410:	2200      	movs	r2, #0
    c412:	601a      	str	r2, [r3, #0]
    c414:	605a      	str	r2, [r3, #4]
    c416:	609a      	str	r2, [r3, #8]
    c418:	60da      	str	r2, [r3, #12]
    c41a:	611a      	str	r2, [r3, #16]
    c41c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c41e:	2300      	movs	r3, #0
    c420:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c424:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c426:	4b85      	ldr	r3, [pc, #532]	; (c63c <am_util_faultisr_collect_data+0x238>)
    c428:	681b      	ldr	r3, [r3, #0]
    c42a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c42e:	b2db      	uxtb	r3, r3
    c430:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c436:	0a1b      	lsrs	r3, r3, #8
    c438:	b2db      	uxtb	r3, r3
    c43a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c440:	0c1b      	lsrs	r3, r3, #16
    c442:	b29b      	uxth	r3, r3
    c444:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c448:	4b7d      	ldr	r3, [pc, #500]	; (c640 <am_util_faultisr_collect_data+0x23c>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c44e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c452:	b2db      	uxtb	r3, r3
    c454:	f003 0302 	and.w	r3, r3, #2
    c458:	2b00      	cmp	r3, #0
    c45a:	d005      	beq.n	c468 <am_util_faultisr_collect_data+0x64>
    c45c:	6879      	ldr	r1, [r7, #4]
    c45e:	2006      	movs	r0, #6
    c460:	f7ff ffca 	bl	c3f8 <getStackedReg>
    c464:	4603      	mov	r3, r0
    c466:	e001      	b.n	c46c <am_util_faultisr_collect_data+0x68>
    c468:	f04f 33ff 	mov.w	r3, #4294967295
    c46c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c46e:	6879      	ldr	r1, [r7, #4]
    c470:	2000      	movs	r0, #0
    c472:	f7ff ffc1 	bl	c3f8 <getStackedReg>
    c476:	4603      	mov	r3, r0
    c478:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c47a:	6879      	ldr	r1, [r7, #4]
    c47c:	2001      	movs	r0, #1
    c47e:	f7ff ffbb 	bl	c3f8 <getStackedReg>
    c482:	4603      	mov	r3, r0
    c484:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c486:	6879      	ldr	r1, [r7, #4]
    c488:	2002      	movs	r0, #2
    c48a:	f7ff ffb5 	bl	c3f8 <getStackedReg>
    c48e:	4603      	mov	r3, r0
    c490:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c492:	6879      	ldr	r1, [r7, #4]
    c494:	2003      	movs	r0, #3
    c496:	f7ff ffaf 	bl	c3f8 <getStackedReg>
    c49a:	4603      	mov	r3, r0
    c49c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c49e:	6879      	ldr	r1, [r7, #4]
    c4a0:	2004      	movs	r0, #4
    c4a2:	f7ff ffa9 	bl	c3f8 <getStackedReg>
    c4a6:	4603      	mov	r3, r0
    c4a8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4aa:	6879      	ldr	r1, [r7, #4]
    c4ac:	2005      	movs	r0, #5
    c4ae:	f7ff ffa3 	bl	c3f8 <getStackedReg>
    c4b2:	4603      	mov	r3, r0
    c4b4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4b6:	6879      	ldr	r1, [r7, #4]
    c4b8:	2006      	movs	r0, #6
    c4ba:	f7ff ff9d 	bl	c3f8 <getStackedReg>
    c4be:	4603      	mov	r3, r0
    c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4c2:	6879      	ldr	r1, [r7, #4]
    c4c4:	2007      	movs	r0, #7
    c4c6:	f7ff ff97 	bl	c3f8 <getStackedReg>
    c4ca:	4603      	mov	r3, r0
    c4cc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4ce:	f107 030c 	add.w	r3, r7, #12
    c4d2:	4619      	mov	r1, r3
    c4d4:	2002      	movs	r0, #2
    c4d6:	f001 fc7f 	bl	ddd8 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    c4da:	485a      	ldr	r0, [pc, #360]	; (c644 <am_util_faultisr_collect_data+0x240>)
    c4dc:	f000 ff6c 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4e2:	4619      	mov	r1, r3
    c4e4:	4858      	ldr	r0, [pc, #352]	; (c648 <am_util_faultisr_collect_data+0x244>)
    c4e6:	f000 ff67 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c4ec:	4619      	mov	r1, r3
    c4ee:	4857      	ldr	r0, [pc, #348]	; (c64c <am_util_faultisr_collect_data+0x248>)
    c4f0:	f000 ff62 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4f6:	4619      	mov	r1, r3
    c4f8:	4855      	ldr	r0, [pc, #340]	; (c650 <am_util_faultisr_collect_data+0x24c>)
    c4fa:	f000 ff5d 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c500:	4619      	mov	r1, r3
    c502:	4854      	ldr	r0, [pc, #336]	; (c654 <am_util_faultisr_collect_data+0x250>)
    c504:	f000 ff58 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c50a:	4619      	mov	r1, r3
    c50c:	4852      	ldr	r0, [pc, #328]	; (c658 <am_util_faultisr_collect_data+0x254>)
    c50e:	f000 ff53 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c514:	4619      	mov	r1, r3
    c516:	4851      	ldr	r0, [pc, #324]	; (c65c <am_util_faultisr_collect_data+0x258>)
    c518:	f000 ff4e 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    c51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c51e:	4619      	mov	r1, r3
    c520:	484f      	ldr	r0, [pc, #316]	; (c660 <am_util_faultisr_collect_data+0x25c>)
    c522:	f000 ff49 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    c526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c528:	4619      	mov	r1, r3
    c52a:	484e      	ldr	r0, [pc, #312]	; (c664 <am_util_faultisr_collect_data+0x260>)
    c52c:	f000 ff44 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    c530:	484d      	ldr	r0, [pc, #308]	; (c668 <am_util_faultisr_collect_data+0x264>)
    c532:	f000 ff41 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    c536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c538:	4619      	mov	r1, r3
    c53a:	484c      	ldr	r0, [pc, #304]	; (c66c <am_util_faultisr_collect_data+0x268>)
    c53c:	f000 ff3c 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    c540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c542:	4619      	mov	r1, r3
    c544:	484a      	ldr	r0, [pc, #296]	; (c670 <am_util_faultisr_collect_data+0x26c>)
    c546:	f000 ff37 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    c54a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    c54e:	b2db      	uxtb	r3, r3
    c550:	4619      	mov	r1, r3
    c552:	4848      	ldr	r0, [pc, #288]	; (c674 <am_util_faultisr_collect_data+0x270>)
    c554:	f000 ff30 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    c558:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c55c:	b2db      	uxtb	r3, r3
    c55e:	4619      	mov	r1, r3
    c560:	4845      	ldr	r0, [pc, #276]	; (c678 <am_util_faultisr_collect_data+0x274>)
    c562:	f000 ff29 	bl	d3b8 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    c566:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    c56a:	b29b      	uxth	r3, r3
    c56c:	4619      	mov	r1, r3
    c56e:	4843      	ldr	r0, [pc, #268]	; (c67c <am_util_faultisr_collect_data+0x278>)
    c570:	f000 ff22 	bl	d3b8 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    c574:	2380      	movs	r3, #128	; 0x80
    c576:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
    c578:	e03f      	b.n	c5fa <am_util_faultisr_collect_data+0x1f6>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    c57a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c57e:	b2db      	uxtb	r3, r3
    c580:	461a      	mov	r2, r3
    c582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c584:	4013      	ands	r3, r2
    c586:	2b08      	cmp	r3, #8
    c588:	d024      	beq.n	c5d4 <am_util_faultisr_collect_data+0x1d0>
    c58a:	2b08      	cmp	r3, #8
    c58c:	d806      	bhi.n	c59c <am_util_faultisr_collect_data+0x198>
    c58e:	2b02      	cmp	r3, #2
    c590:	d028      	beq.n	c5e4 <am_util_faultisr_collect_data+0x1e0>
    c592:	2b04      	cmp	r3, #4
    c594:	d022      	beq.n	c5dc <am_util_faultisr_collect_data+0x1d8>
    c596:	2b01      	cmp	r3, #1
    c598:	d028      	beq.n	c5ec <am_util_faultisr_collect_data+0x1e8>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
    c59a:	e02b      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
        switch (sFaultData.u8BFSR & u32Mask)
    c59c:	2b20      	cmp	r3, #32
    c59e:	d011      	beq.n	c5c4 <am_util_faultisr_collect_data+0x1c0>
    c5a0:	2b20      	cmp	r3, #32
    c5a2:	d802      	bhi.n	c5aa <am_util_faultisr_collect_data+0x1a6>
    c5a4:	2b10      	cmp	r3, #16
    c5a6:	d011      	beq.n	c5cc <am_util_faultisr_collect_data+0x1c8>
                break;
    c5a8:	e024      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
        switch (sFaultData.u8BFSR & u32Mask)
    c5aa:	2b40      	cmp	r3, #64	; 0x40
    c5ac:	d006      	beq.n	c5bc <am_util_faultisr_collect_data+0x1b8>
    c5ae:	2b80      	cmp	r3, #128	; 0x80
    c5b0:	d000      	beq.n	c5b4 <am_util_faultisr_collect_data+0x1b0>
                break;
    c5b2:	e01f      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    c5b4:	4832      	ldr	r0, [pc, #200]	; (c680 <am_util_faultisr_collect_data+0x27c>)
    c5b6:	f000 feff 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5ba:	e01b      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    c5bc:	4831      	ldr	r0, [pc, #196]	; (c684 <am_util_faultisr_collect_data+0x280>)
    c5be:	f000 fefb 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5c2:	e017      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    c5c4:	4830      	ldr	r0, [pc, #192]	; (c688 <am_util_faultisr_collect_data+0x284>)
    c5c6:	f000 fef7 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5ca:	e013      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    c5cc:	482f      	ldr	r0, [pc, #188]	; (c68c <am_util_faultisr_collect_data+0x288>)
    c5ce:	f000 fef3 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5d2:	e00f      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    c5d4:	482e      	ldr	r0, [pc, #184]	; (c690 <am_util_faultisr_collect_data+0x28c>)
    c5d6:	f000 feef 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5da:	e00b      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    c5dc:	482d      	ldr	r0, [pc, #180]	; (c694 <am_util_faultisr_collect_data+0x290>)
    c5de:	f000 feeb 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5e2:	e007      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    c5e4:	482c      	ldr	r0, [pc, #176]	; (c698 <am_util_faultisr_collect_data+0x294>)
    c5e6:	f000 fee7 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5ea:	e003      	b.n	c5f4 <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    c5ec:	482b      	ldr	r0, [pc, #172]	; (c69c <am_util_faultisr_collect_data+0x298>)
    c5ee:	f000 fee3 	bl	d3b8 <am_util_stdio_printf>
                break;
    c5f2:	bf00      	nop
        }
        u32Mask >>= 1;
    c5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5f6:	085b      	lsrs	r3, r3, #1
    c5f8:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
    c5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d1bc      	bne.n	c57a <am_util_faultisr_collect_data+0x176>
    }

    //
    // Print out any Apollo2 Internal fault information.
    //
    am_util_stdio_printf("Apollo2 Fault data:\n");
    c600:	4827      	ldr	r0, [pc, #156]	; (c6a0 <am_util_faultisr_collect_data+0x29c>)
    c602:	f000 fed9 	bl	d3b8 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    c606:	7b3b      	ldrb	r3, [r7, #12]
    c608:	2b00      	cmp	r3, #0
    c60a:	d004      	beq.n	c616 <am_util_faultisr_collect_data+0x212>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    c60c:	693b      	ldr	r3, [r7, #16]
    c60e:	4619      	mov	r1, r3
    c610:	4824      	ldr	r0, [pc, #144]	; (c6a4 <am_util_faultisr_collect_data+0x2a0>)
    c612:	f000 fed1 	bl	d3b8 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
    c616:	7d3b      	ldrb	r3, [r7, #20]
    c618:	2b00      	cmp	r3, #0
    c61a:	d004      	beq.n	c626 <am_util_faultisr_collect_data+0x222>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    c61c:	69bb      	ldr	r3, [r7, #24]
    c61e:	4619      	mov	r1, r3
    c620:	4821      	ldr	r0, [pc, #132]	; (c6a8 <am_util_faultisr_collect_data+0x2a4>)
    c622:	f000 fec9 	bl	d3b8 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
    c626:	7f3b      	ldrb	r3, [r7, #28]
    c628:	2b00      	cmp	r3, #0
    c62a:	d004      	beq.n	c636 <am_util_faultisr_collect_data+0x232>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    c62c:	6a3b      	ldr	r3, [r7, #32]
    c62e:	4619      	mov	r1, r3
    c630:	481e      	ldr	r0, [pc, #120]	; (c6ac <am_util_faultisr_collect_data+0x2a8>)
    c632:	f000 fec1 	bl	d3b8 <am_util_stdio_printf>
    }


#endif

    u32Mask = 0;
    c636:	2300      	movs	r3, #0
    c638:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c63a:	e7fe      	b.n	c63a <am_util_faultisr_collect_data+0x236>
    c63c:	e000ed28 	.word	0xe000ed28
    c640:	e000ed38 	.word	0xe000ed38
    c644:	0000e274 	.word	0x0000e274
    c648:	0000e290 	.word	0x0000e290
    c64c:	0000e2a4 	.word	0x0000e2a4
    c650:	0000e2b8 	.word	0x0000e2b8
    c654:	0000e2cc 	.word	0x0000e2cc
    c658:	0000e2e0 	.word	0x0000e2e0
    c65c:	0000e2f4 	.word	0x0000e2f4
    c660:	0000e308 	.word	0x0000e308
    c664:	0000e31c 	.word	0x0000e31c
    c668:	0000e330 	.word	0x0000e330
    c66c:	0000e348 	.word	0x0000e348
    c670:	0000e364 	.word	0x0000e364
    c674:	0000e38c 	.word	0x0000e38c
    c678:	0000e3bc 	.word	0x0000e3bc
    c67c:	0000e3e8 	.word	0x0000e3e8
    c680:	0000e414 	.word	0x0000e414
    c684:	0000e434 	.word	0x0000e434
    c688:	0000e454 	.word	0x0000e454
    c68c:	0000e470 	.word	0x0000e470
    c690:	0000e48c 	.word	0x0000e48c
    c694:	0000e4ac 	.word	0x0000e4ac
    c698:	0000e4cc 	.word	0x0000e4cc
    c69c:	0000e4ec 	.word	0x0000e4ec
    c6a0:	0000e508 	.word	0x0000e508
    c6a4:	0000e520 	.word	0x0000e520
    c6a8:	0000e540 	.word	0x0000e540
    c6ac:	0000e560 	.word	0x0000e560

0000c6b0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c6b0:	b480      	push	{r7}
    c6b2:	b083      	sub	sp, #12
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c6b8:	4a04      	ldr	r2, [pc, #16]	; (c6cc <am_util_stdio_printf_init+0x1c>)
    c6ba:	687b      	ldr	r3, [r7, #4]
    c6bc:	6013      	str	r3, [r2, #0]
}
    c6be:	bf00      	nop
    c6c0:	370c      	adds	r7, #12
    c6c2:	46bd      	mov	sp, r7
    c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6c8:	4770      	bx	lr
    c6ca:	bf00      	nop
    c6cc:	10001134 	.word	0x10001134

0000c6d0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c6d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6d4:	b096      	sub	sp, #88	; 0x58
    c6d6:	af00      	add	r7, sp, #0
    c6d8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c6dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6e0:	0025      	movs	r5, r4
    c6e2:	2600      	movs	r6, #0
    c6e4:	ea55 0306 	orrs.w	r3, r5, r6
    c6e8:	f000 80a0 	beq.w	c82c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6f0:	0862      	lsrs	r2, r4, #1
    c6f2:	ea4f 0133 	mov.w	r1, r3, rrx
    c6f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6fa:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c6fe:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c702:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c706:	eb11 0308 	adds.w	r3, r1, r8
    c70a:	eb42 0409 	adc.w	r4, r2, r9
    c70e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c712:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c716:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c71a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c71e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c722:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c726:	eb13 030a 	adds.w	r3, r3, sl
    c72a:	eb44 040b 	adc.w	r4, r4, fp
    c72e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c732:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c736:	0a1a      	lsrs	r2, r3, #8
    c738:	62ba      	str	r2, [r7, #40]	; 0x28
    c73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c73c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c740:	62ba      	str	r2, [r7, #40]	; 0x28
    c742:	0a23      	lsrs	r3, r4, #8
    c744:	62fb      	str	r3, [r7, #44]	; 0x2c
    c746:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c74a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c74e:	18c9      	adds	r1, r1, r3
    c750:	eb42 0204 	adc.w	r2, r2, r4
    c754:	460b      	mov	r3, r1
    c756:	4614      	mov	r4, r2
    c758:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c75c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c760:	0c1a      	lsrs	r2, r3, #16
    c762:	623a      	str	r2, [r7, #32]
    c764:	6a3a      	ldr	r2, [r7, #32]
    c766:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c76a:	623a      	str	r2, [r7, #32]
    c76c:	0c23      	lsrs	r3, r4, #16
    c76e:	627b      	str	r3, [r7, #36]	; 0x24
    c770:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c774:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c778:	18c9      	adds	r1, r1, r3
    c77a:	eb42 0204 	adc.w	r2, r2, r4
    c77e:	460b      	mov	r3, r1
    c780:	4614      	mov	r4, r2
    c782:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c786:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c78a:	0023      	movs	r3, r4
    c78c:	603b      	str	r3, [r7, #0]
    c78e:	2300      	movs	r3, #0
    c790:	607b      	str	r3, [r7, #4]
    c792:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c796:	e897 0006 	ldmia.w	r7, {r1, r2}
    c79a:	18c9      	adds	r1, r1, r3
    c79c:	eb42 0204 	adc.w	r2, r2, r4
    c7a0:	460b      	mov	r3, r1
    c7a2:	4614      	mov	r4, r2
    c7a4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c7a8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7ac:	08da      	lsrs	r2, r3, #3
    c7ae:	613a      	str	r2, [r7, #16]
    c7b0:	693a      	ldr	r2, [r7, #16]
    c7b2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c7b6:	613a      	str	r2, [r7, #16]
    c7b8:	08e3      	lsrs	r3, r4, #3
    c7ba:	617b      	str	r3, [r7, #20]
    c7bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c7c0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c7c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c7c8:	460b      	mov	r3, r1
    c7ca:	4614      	mov	r4, r2
    c7cc:	00a0      	lsls	r0, r4, #2
    c7ce:	60f8      	str	r0, [r7, #12]
    c7d0:	68f8      	ldr	r0, [r7, #12]
    c7d2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c7d6:	60f8      	str	r0, [r7, #12]
    c7d8:	009b      	lsls	r3, r3, #2
    c7da:	60bb      	str	r3, [r7, #8]
    c7dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c7e0:	185b      	adds	r3, r3, r1
    c7e2:	eb44 0402 	adc.w	r4, r4, r2
    c7e6:	18db      	adds	r3, r3, r3
    c7e8:	eb44 0404 	adc.w	r4, r4, r4
    c7ec:	4619      	mov	r1, r3
    c7ee:	4622      	mov	r2, r4
    c7f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c7f4:	1a5b      	subs	r3, r3, r1
    c7f6:	eb64 0402 	sbc.w	r4, r4, r2
    c7fa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c7fe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c802:	3306      	adds	r3, #6
    c804:	f144 0400 	adc.w	r4, r4, #0
    c808:	091a      	lsrs	r2, r3, #4
    c80a:	61ba      	str	r2, [r7, #24]
    c80c:	69ba      	ldr	r2, [r7, #24]
    c80e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c812:	61ba      	str	r2, [r7, #24]
    c814:	0923      	lsrs	r3, r4, #4
    c816:	61fb      	str	r3, [r7, #28]
    c818:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c81c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c820:	18c9      	adds	r1, r1, r3
    c822:	eb42 0204 	adc.w	r2, r2, r4
    c826:	460b      	mov	r3, r1
    c828:	4614      	mov	r4, r2
    c82a:	e029      	b.n	c880 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c82e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c832:	085a      	lsrs	r2, r3, #1
    c834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c836:	089b      	lsrs	r3, r3, #2
    c838:	4413      	add	r3, r2
    c83a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c83e:	091b      	lsrs	r3, r3, #4
    c840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c842:	4413      	add	r3, r2
    c844:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c848:	0a1b      	lsrs	r3, r3, #8
    c84a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c84c:	4413      	add	r3, r2
    c84e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c852:	0c1b      	lsrs	r3, r3, #16
    c854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c856:	4413      	add	r3, r2
    c858:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c85c:	08db      	lsrs	r3, r3, #3
    c85e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c862:	4613      	mov	r3, r2
    c864:	009b      	lsls	r3, r3, #2
    c866:	4413      	add	r3, r2
    c868:	005b      	lsls	r3, r3, #1
    c86a:	461a      	mov	r2, r3
    c86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c86e:	1a9b      	subs	r3, r3, r2
    c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c874:	3306      	adds	r3, #6
    c876:	091a      	lsrs	r2, r3, #4
    c878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c87a:	4413      	add	r3, r2
    c87c:	f04f 0400 	mov.w	r4, #0
    }
}
    c880:	4618      	mov	r0, r3
    c882:	4621      	mov	r1, r4
    c884:	3758      	adds	r7, #88	; 0x58
    c886:	46bd      	mov	sp, r7
    c888:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c88c:	4770      	bx	lr

0000c88e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c88e:	b590      	push	{r4, r7, lr}
    c890:	b085      	sub	sp, #20
    c892:	af00      	add	r7, sp, #0
    c894:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c898:	683a      	ldr	r2, [r7, #0]
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	4313      	orrs	r3, r2
    c89e:	2b00      	cmp	r3, #0
    c8a0:	bf0c      	ite	eq
    c8a2:	2301      	moveq	r3, #1
    c8a4:	2300      	movne	r3, #0
    c8a6:	b2db      	uxtb	r3, r3
    c8a8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c8aa:	e008      	b.n	c8be <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c8ac:	e9d7 0100 	ldrd	r0, r1, [r7]
    c8b0:	f7ff ff0e 	bl	c6d0 <divu64_10>
    c8b4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	3301      	adds	r3, #1
    c8bc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c8be:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8c2:	4323      	orrs	r3, r4
    c8c4:	d1f2      	bne.n	c8ac <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c8c6:	68fb      	ldr	r3, [r7, #12]
}
    c8c8:	4618      	mov	r0, r3
    c8ca:	3714      	adds	r7, #20
    c8cc:	46bd      	mov	sp, r7
    c8ce:	bd90      	pop	{r4, r7, pc}

0000c8d0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c8d0:	b590      	push	{r4, r7, lr}
    c8d2:	b083      	sub	sp, #12
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c8da:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8de:	2b00      	cmp	r3, #0
    c8e0:	f174 0300 	sbcs.w	r3, r4, #0
    c8e4:	da06      	bge.n	c8f4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8e6:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8ea:	425b      	negs	r3, r3
    c8ec:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c8f0:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c8f4:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8f8:	4618      	mov	r0, r3
    c8fa:	4621      	mov	r1, r4
    c8fc:	f7ff ffc7 	bl	c88e <ndigits_in_u64>
    c900:	4603      	mov	r3, r0
}
    c902:	4618      	mov	r0, r3
    c904:	370c      	adds	r7, #12
    c906:	46bd      	mov	sp, r7
    c908:	bd90      	pop	{r4, r7, pc}

0000c90a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c90a:	b490      	push	{r4, r7}
    c90c:	b084      	sub	sp, #16
    c90e:	af00      	add	r7, sp, #0
    c910:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c914:	6839      	ldr	r1, [r7, #0]
    c916:	687a      	ldr	r2, [r7, #4]
    c918:	430a      	orrs	r2, r1
    c91a:	2a00      	cmp	r2, #0
    c91c:	bf0c      	ite	eq
    c91e:	2201      	moveq	r2, #1
    c920:	2200      	movne	r2, #0
    c922:	b2d2      	uxtb	r2, r2
    c924:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c926:	e00a      	b.n	c93e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c928:	e897 0006 	ldmia.w	r7, {r1, r2}
    c92c:	090b      	lsrs	r3, r1, #4
    c92e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c932:	0914      	lsrs	r4, r2, #4
    c934:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c938:	68fa      	ldr	r2, [r7, #12]
    c93a:	3201      	adds	r2, #1
    c93c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c93e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c942:	430a      	orrs	r2, r1
    c944:	d1f0      	bne.n	c928 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c946:	68fb      	ldr	r3, [r7, #12]
}
    c948:	4618      	mov	r0, r3
    c94a:	3710      	adds	r7, #16
    c94c:	46bd      	mov	sp, r7
    c94e:	bc90      	pop	{r4, r7}
    c950:	4770      	bx	lr

0000c952 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c952:	b480      	push	{r7}
    c954:	b087      	sub	sp, #28
    c956:	af00      	add	r7, sp, #0
    c958:	6078      	str	r0, [r7, #4]
    c95a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c95c:	2300      	movs	r3, #0
    c95e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c960:	2300      	movs	r3, #0
    c962:	613b      	str	r3, [r7, #16]
    c964:	2300      	movs	r3, #0
    c966:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	2b2d      	cmp	r3, #45	; 0x2d
    c96e:	d11b      	bne.n	c9a8 <decstr_to_int+0x56>
    {
        bNeg = true;
    c970:	2301      	movs	r3, #1
    c972:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c974:	687b      	ldr	r3, [r7, #4]
    c976:	3301      	adds	r3, #1
    c978:	607b      	str	r3, [r7, #4]
        uCnt++;
    c97a:	68fb      	ldr	r3, [r7, #12]
    c97c:	3301      	adds	r3, #1
    c97e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c980:	e012      	b.n	c9a8 <decstr_to_int+0x56>
    {
        ++uCnt;
    c982:	68fb      	ldr	r3, [r7, #12]
    c984:	3301      	adds	r3, #1
    c986:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c988:	693a      	ldr	r2, [r7, #16]
    c98a:	4613      	mov	r3, r2
    c98c:	009b      	lsls	r3, r3, #2
    c98e:	4413      	add	r3, r2
    c990:	005b      	lsls	r3, r3, #1
    c992:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c994:	687b      	ldr	r3, [r7, #4]
    c996:	781b      	ldrb	r3, [r3, #0]
    c998:	461a      	mov	r2, r3
    c99a:	693b      	ldr	r3, [r7, #16]
    c99c:	4413      	add	r3, r2
    c99e:	3b30      	subs	r3, #48	; 0x30
    c9a0:	613b      	str	r3, [r7, #16]
        pcStr++;
    c9a2:	687b      	ldr	r3, [r7, #4]
    c9a4:	3301      	adds	r3, #1
    c9a6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9a8:	687b      	ldr	r3, [r7, #4]
    c9aa:	781b      	ldrb	r3, [r3, #0]
    c9ac:	2b2f      	cmp	r3, #47	; 0x2f
    c9ae:	d903      	bls.n	c9b8 <decstr_to_int+0x66>
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	781b      	ldrb	r3, [r3, #0]
    c9b4:	2b39      	cmp	r3, #57	; 0x39
    c9b6:	d9e4      	bls.n	c982 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c9b8:	683b      	ldr	r3, [r7, #0]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d002      	beq.n	c9c4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c9be:	683b      	ldr	r3, [r7, #0]
    c9c0:	68fa      	ldr	r2, [r7, #12]
    c9c2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c9c4:	7dfb      	ldrb	r3, [r7, #23]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d002      	beq.n	c9d0 <decstr_to_int+0x7e>
    c9ca:	693b      	ldr	r3, [r7, #16]
    c9cc:	425b      	negs	r3, r3
    c9ce:	e000      	b.n	c9d2 <decstr_to_int+0x80>
    c9d0:	693b      	ldr	r3, [r7, #16]
}
    c9d2:	4618      	mov	r0, r3
    c9d4:	371c      	adds	r7, #28
    c9d6:	46bd      	mov	sp, r7
    c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9dc:	4770      	bx	lr

0000c9de <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c9de:	b590      	push	{r4, r7, lr}
    c9e0:	b091      	sub	sp, #68	; 0x44
    c9e2:	af00      	add	r7, sp, #0
    c9e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c9e8:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9ea:	2300      	movs	r3, #0
    c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    c9ee:	2300      	movs	r3, #0
    c9f0:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c9f6:	f7ff fe6b 	bl	c6d0 <divu64_10>
    c9fa:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c9fe:	68b9      	ldr	r1, [r7, #8]
    ca00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ca02:	4613      	mov	r3, r2
    ca04:	009b      	lsls	r3, r3, #2
    ca06:	4413      	add	r3, r2
    ca08:	005b      	lsls	r3, r3, #1
    ca0a:	1acb      	subs	r3, r1, r3
    ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca10:	1c5a      	adds	r2, r3, #1
    ca12:	63fa      	str	r2, [r7, #60]	; 0x3c
    ca14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca16:	b2d2      	uxtb	r2, r2
    ca18:	3230      	adds	r2, #48	; 0x30
    ca1a:	b2d2      	uxtb	r2, r2
    ca1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    ca20:	440b      	add	r3, r1
    ca22:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ca26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    ca2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    ca2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    ca32:	4323      	orrs	r3, r4
    ca34:	d1dd      	bne.n	c9f2 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca38:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d011      	beq.n	ca64 <uint64_to_str+0x86>
    {
        while ( ix-- )
    ca40:	e008      	b.n	ca54 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    ca42:	687b      	ldr	r3, [r7, #4]
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	607a      	str	r2, [r7, #4]
    ca48:	f107 0110 	add.w	r1, r7, #16
    ca4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ca4e:	440a      	add	r2, r1
    ca50:	7812      	ldrb	r2, [r2, #0]
    ca52:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca56:	1e5a      	subs	r2, r3, #1
    ca58:	63fa      	str	r2, [r7, #60]	; 0x3c
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d1f1      	bne.n	ca42 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca5e:	687b      	ldr	r3, [r7, #4]
    ca60:	2200      	movs	r2, #0
    ca62:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    ca66:	4618      	mov	r0, r3
    ca68:	3744      	adds	r7, #68	; 0x44
    ca6a:	46bd      	mov	sp, r7
    ca6c:	bd90      	pop	{r4, r7, pc}

0000ca6e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca6e:	b4b0      	push	{r4, r5, r7}
    ca70:	b08d      	sub	sp, #52	; 0x34
    ca72:	af00      	add	r7, sp, #0
    ca74:	e9c7 0102 	strd	r0, r1, [r7, #8]
    ca78:	607a      	str	r2, [r7, #4]
    ca7a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    ca7c:	2300      	movs	r3, #0
    ca7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca84:	4313      	orrs	r3, r2
    ca86:	d131      	bne.n	caec <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca8a:	1c5a      	adds	r2, r3, #1
    ca8c:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ca92:	4413      	add	r3, r2
    ca94:	2230      	movs	r2, #48	; 0x30
    ca96:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca9a:	e027      	b.n	caec <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    ca9c:	7a3b      	ldrb	r3, [r7, #8]
    ca9e:	f003 030f 	and.w	r3, r3, #15
    caa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    caa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    caaa:	2b09      	cmp	r3, #9
    caac:	d90a      	bls.n	cac4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    caae:	78fb      	ldrb	r3, [r7, #3]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d001      	beq.n	cab8 <uint64_to_hexstr+0x4a>
    cab4:	2227      	movs	r2, #39	; 0x27
    cab6:	e000      	b.n	caba <uint64_to_hexstr+0x4c>
    cab8:	2207      	movs	r2, #7
    caba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cabe:	4413      	add	r3, r2
    cac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cac6:	1c5a      	adds	r2, r3, #1
    cac8:	62fa      	str	r2, [r7, #44]	; 0x2c
    caca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cace:	3230      	adds	r2, #48	; 0x30
    cad0:	b2d2      	uxtb	r2, r2
    cad2:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cad6:	440b      	add	r3, r1
    cad8:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cadc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cae0:	0914      	lsrs	r4, r2, #4
    cae2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cae6:	091d      	lsrs	r5, r3, #4
    cae8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    caec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    caf0:	4313      	orrs	r3, r2
    caf2:	d1d3      	bne.n	ca9c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caf6:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    caf8:	687b      	ldr	r3, [r7, #4]
    cafa:	2b00      	cmp	r3, #0
    cafc:	d011      	beq.n	cb22 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cafe:	e008      	b.n	cb12 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	1c5a      	adds	r2, r3, #1
    cb04:	607a      	str	r2, [r7, #4]
    cb06:	f107 0110 	add.w	r1, r7, #16
    cb0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb0c:	440a      	add	r2, r1
    cb0e:	7812      	ldrb	r2, [r2, #0]
    cb10:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb14:	1e5a      	subs	r2, r3, #1
    cb16:	62fa      	str	r2, [r7, #44]	; 0x2c
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d1f1      	bne.n	cb00 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	2200      	movs	r2, #0
    cb20:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cb24:	4618      	mov	r0, r3
    cb26:	3734      	adds	r7, #52	; 0x34
    cb28:	46bd      	mov	sp, r7
    cb2a:	bcb0      	pop	{r4, r5, r7}
    cb2c:	4770      	bx	lr

0000cb2e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb2e:	b480      	push	{r7}
    cb30:	b085      	sub	sp, #20
    cb32:	af00      	add	r7, sp, #0
    cb34:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cb36:	2300      	movs	r3, #0
    cb38:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cb3a:	687b      	ldr	r3, [r7, #4]
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d104      	bne.n	cb4a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	e009      	b.n	cb58 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cb44:	68fb      	ldr	r3, [r7, #12]
    cb46:	3301      	adds	r3, #1
    cb48:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cb4a:	687b      	ldr	r3, [r7, #4]
    cb4c:	1c5a      	adds	r2, r3, #1
    cb4e:	607a      	str	r2, [r7, #4]
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2b00      	cmp	r3, #0
    cb54:	d1f6      	bne.n	cb44 <simple_strlen+0x16>
    }
    return ui32RetVal;
    cb56:	68fb      	ldr	r3, [r7, #12]
}
    cb58:	4618      	mov	r0, r3
    cb5a:	3714      	adds	r7, #20
    cb5c:	46bd      	mov	sp, r7
    cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb62:	4770      	bx	lr

0000cb64 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb64:	b480      	push	{r7}
    cb66:	b087      	sub	sp, #28
    cb68:	af00      	add	r7, sp, #0
    cb6a:	60f8      	str	r0, [r7, #12]
    cb6c:	460b      	mov	r3, r1
    cb6e:	607a      	str	r2, [r7, #4]
    cb70:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cb72:	2300      	movs	r3, #0
    cb74:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cb76:	687b      	ldr	r3, [r7, #4]
    cb78:	2b00      	cmp	r3, #0
    cb7a:	dc0c      	bgt.n	cb96 <padbuffer+0x32>
    {
        return i32Cnt;
    cb7c:	697b      	ldr	r3, [r7, #20]
    cb7e:	e010      	b.n	cba2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb80:	68fb      	ldr	r3, [r7, #12]
    cb82:	2b00      	cmp	r3, #0
    cb84:	d004      	beq.n	cb90 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb86:	68fb      	ldr	r3, [r7, #12]
    cb88:	1c5a      	adds	r2, r3, #1
    cb8a:	60fa      	str	r2, [r7, #12]
    cb8c:	7afa      	ldrb	r2, [r7, #11]
    cb8e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb90:	697b      	ldr	r3, [r7, #20]
    cb92:	3301      	adds	r3, #1
    cb94:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	1e5a      	subs	r2, r3, #1
    cb9a:	607a      	str	r2, [r7, #4]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d1ef      	bne.n	cb80 <padbuffer+0x1c>
    }

    return i32Cnt;
    cba0:	697b      	ldr	r3, [r7, #20]
}
    cba2:	4618      	mov	r0, r3
    cba4:	371c      	adds	r7, #28
    cba6:	46bd      	mov	sp, r7
    cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbac:	4770      	bx	lr
	...

0000cbb0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cbb0:	b590      	push	{r4, r7, lr}
    cbb2:	b08f      	sub	sp, #60	; 0x3c
    cbb4:	af00      	add	r7, sp, #0
    cbb6:	60f8      	str	r0, [r7, #12]
    cbb8:	60b9      	str	r1, [r7, #8]
    cbba:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cbbc:	68bb      	ldr	r3, [r7, #8]
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cbc4:	2b03      	cmp	r3, #3
    cbc6:	dc02      	bgt.n	cbce <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cbc8:	f06f 0302 	mvn.w	r3, #2
    cbcc:	e0e7      	b.n	cd9e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cbce:	edd7 7a03 	vldr	s15, [r7, #12]
    cbd2:	eef5 7a40 	vcmp.f32	s15, #0.0
    cbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbda:	d104      	bne.n	cbe6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cbdc:	68bb      	ldr	r3, [r7, #8]
    cbde:	4a72      	ldr	r2, [pc, #456]	; (cda8 <ftoa+0x1f8>)
    cbe0:	601a      	str	r2, [r3, #0]
        return 3;
    cbe2:	2303      	movs	r3, #3
    cbe4:	e0db      	b.n	cd9e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cbe6:	68bb      	ldr	r3, [r7, #8]
    cbe8:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cbea:	68fb      	ldr	r3, [r7, #12]
    cbec:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cbee:	693b      	ldr	r3, [r7, #16]
    cbf0:	15db      	asrs	r3, r3, #23
    cbf2:	b2db      	uxtb	r3, r3
    cbf4:	3b7f      	subs	r3, #127	; 0x7f
    cbf6:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbf8:	693b      	ldr	r3, [r7, #16]
    cbfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cc02:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cc04:	2300      	movs	r3, #0
    cc06:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cc08:	2300      	movs	r3, #0
    cc0a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cc0c:	69fb      	ldr	r3, [r7, #28]
    cc0e:	2b1e      	cmp	r3, #30
    cc10:	dd02      	ble.n	cc18 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc12:	f06f 0301 	mvn.w	r3, #1
    cc16:	e0c2      	b.n	cd9e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cc18:	69fb      	ldr	r3, [r7, #28]
    cc1a:	f113 0f17 	cmn.w	r3, #23
    cc1e:	da02      	bge.n	cc26 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc20:	f04f 33ff 	mov.w	r3, #4294967295
    cc24:	e0bb      	b.n	cd9e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cc26:	69fb      	ldr	r3, [r7, #28]
    cc28:	2b16      	cmp	r3, #22
    cc2a:	dd06      	ble.n	cc3a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc2c:	69fb      	ldr	r3, [r7, #28]
    cc2e:	3b17      	subs	r3, #23
    cc30:	69ba      	ldr	r2, [r7, #24]
    cc32:	fa02 f303 	lsl.w	r3, r2, r3
    cc36:	637b      	str	r3, [r7, #52]	; 0x34
    cc38:	e01a      	b.n	cc70 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc3a:	69fb      	ldr	r3, [r7, #28]
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	db0f      	blt.n	cc60 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cc40:	69fb      	ldr	r3, [r7, #28]
    cc42:	f1c3 0317 	rsb	r3, r3, #23
    cc46:	69ba      	ldr	r2, [r7, #24]
    cc48:	fa42 f303 	asr.w	r3, r2, r3
    cc4c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc4e:	69fb      	ldr	r3, [r7, #28]
    cc50:	3301      	adds	r3, #1
    cc52:	69ba      	ldr	r2, [r7, #24]
    cc54:	fa02 f303 	lsl.w	r3, r2, r3
    cc58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc5c:	633b      	str	r3, [r7, #48]	; 0x30
    cc5e:	e007      	b.n	cc70 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc60:	69bb      	ldr	r3, [r7, #24]
    cc62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc66:	69fb      	ldr	r3, [r7, #28]
    cc68:	43db      	mvns	r3, r3
    cc6a:	fa42 f303 	asr.w	r3, r2, r3
    cc6e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc70:	693b      	ldr	r3, [r7, #16]
    cc72:	2b00      	cmp	r3, #0
    cc74:	da04      	bge.n	cc80 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc76:	68bb      	ldr	r3, [r7, #8]
    cc78:	1c5a      	adds	r2, r3, #1
    cc7a:	60ba      	str	r2, [r7, #8]
    cc7c:	222d      	movs	r2, #45	; 0x2d
    cc7e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc82:	2b00      	cmp	r3, #0
    cc84:	d105      	bne.n	cc92 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc86:	68bb      	ldr	r3, [r7, #8]
    cc88:	1c5a      	adds	r2, r3, #1
    cc8a:	60ba      	str	r2, [r7, #8]
    cc8c:	2230      	movs	r2, #48	; 0x30
    cc8e:	701a      	strb	r2, [r3, #0]
    cc90:	e021      	b.n	ccd6 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc94:	2b00      	cmp	r3, #0
    cc96:	dd08      	ble.n	ccaa <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc9e:	68ba      	ldr	r2, [r7, #8]
    cca0:	4618      	mov	r0, r3
    cca2:	4621      	mov	r1, r4
    cca4:	f7ff fe9b 	bl	c9de <uint64_to_str>
    cca8:	e011      	b.n	ccce <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    ccaa:	68bb      	ldr	r3, [r7, #8]
    ccac:	1c5a      	adds	r2, r3, #1
    ccae:	60ba      	str	r2, [r7, #8]
    ccb0:	222d      	movs	r2, #45	; 0x2d
    ccb2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ccb6:	425b      	negs	r3, r3
    ccb8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ccbc:	68ba      	ldr	r2, [r7, #8]
    ccbe:	4618      	mov	r0, r3
    ccc0:	4621      	mov	r1, r4
    ccc2:	f7ff fe8c 	bl	c9de <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ccc6:	e002      	b.n	ccce <ftoa+0x11e>
        {
            pcBuf++;
    ccc8:	68bb      	ldr	r3, [r7, #8]
    ccca:	3301      	adds	r3, #1
    cccc:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ccce:	68bb      	ldr	r3, [r7, #8]
    ccd0:	781b      	ldrb	r3, [r3, #0]
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	d1f8      	bne.n	ccc8 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ccd6:	68bb      	ldr	r3, [r7, #8]
    ccd8:	1c5a      	adds	r2, r3, #1
    ccda:	60ba      	str	r2, [r7, #8]
    ccdc:	222e      	movs	r2, #46	; 0x2e
    ccde:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cce2:	2b00      	cmp	r3, #0
    cce4:	d105      	bne.n	ccf2 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cce6:	68bb      	ldr	r3, [r7, #8]
    cce8:	1c5a      	adds	r2, r3, #1
    ccea:	60ba      	str	r2, [r7, #8]
    ccec:	2230      	movs	r2, #48	; 0x30
    ccee:	701a      	strb	r2, [r3, #0]
    ccf0:	e04f      	b.n	cd92 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccf2:	68ba      	ldr	r2, [r7, #8]
    ccf4:	6a3b      	ldr	r3, [r7, #32]
    ccf6:	1ad3      	subs	r3, r2, r3
    ccf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ccfa:	1ad3      	subs	r3, r2, r3
    ccfc:	3b01      	subs	r3, #1
    ccfe:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd00:	697a      	ldr	r2, [r7, #20]
    cd02:	687b      	ldr	r3, [r7, #4]
    cd04:	4293      	cmp	r3, r2
    cd06:	bfa8      	it	ge
    cd08:	4613      	movge	r3, r2
    cd0a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cd0c:	2300      	movs	r3, #0
    cd0e:	62bb      	str	r3, [r7, #40]	; 0x28
    cd10:	e015      	b.n	cd3e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cd12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd14:	4613      	mov	r3, r2
    cd16:	009b      	lsls	r3, r3, #2
    cd18:	4413      	add	r3, r2
    cd1a:	005b      	lsls	r3, r3, #1
    cd1c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd1e:	68bb      	ldr	r3, [r7, #8]
    cd20:	1c5a      	adds	r2, r3, #1
    cd22:	60ba      	str	r2, [r7, #8]
    cd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd26:	1612      	asrs	r2, r2, #24
    cd28:	b2d2      	uxtb	r2, r2
    cd2a:	3230      	adds	r2, #48	; 0x30
    cd2c:	b2d2      	uxtb	r2, r2
    cd2e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd36:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cd3a:	3301      	adds	r3, #1
    cd3c:	62bb      	str	r3, [r7, #40]	; 0x28
    cd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cd40:	697b      	ldr	r3, [r7, #20]
    cd42:	429a      	cmp	r2, r3
    cd44:	dbe5      	blt.n	cd12 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd48:	4613      	mov	r3, r2
    cd4a:	009b      	lsls	r3, r3, #2
    cd4c:	4413      	add	r3, r2
    cd4e:	005b      	lsls	r3, r3, #1
    cd50:	161b      	asrs	r3, r3, #24
    cd52:	2b04      	cmp	r3, #4
    cd54:	dd1d      	ble.n	cd92 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd56:	68bb      	ldr	r3, [r7, #8]
    cd58:	3b01      	subs	r3, #1
    cd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd5c:	e015      	b.n	cd8a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd60:	781b      	ldrb	r3, [r3, #0]
    cd62:	2b2e      	cmp	r3, #46	; 0x2e
    cd64:	d00e      	beq.n	cd84 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b39      	cmp	r3, #57	; 0x39
    cd6c:	d103      	bne.n	cd76 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd70:	2230      	movs	r2, #48	; 0x30
    cd72:	701a      	strb	r2, [r3, #0]
    cd74:	e006      	b.n	cd84 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd78:	781b      	ldrb	r3, [r3, #0]
    cd7a:	3301      	adds	r3, #1
    cd7c:	b2da      	uxtb	r2, r3
    cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd80:	701a      	strb	r2, [r3, #0]
                    break;
    cd82:	e006      	b.n	cd92 <ftoa+0x1e2>
                }
                pcBuftmp--;
    cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd86:	3b01      	subs	r3, #1
    cd88:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd8c:	6a3b      	ldr	r3, [r7, #32]
    cd8e:	429a      	cmp	r2, r3
    cd90:	d2e5      	bcs.n	cd5e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd92:	68bb      	ldr	r3, [r7, #8]
    cd94:	2200      	movs	r2, #0
    cd96:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd98:	68ba      	ldr	r2, [r7, #8]
    cd9a:	6a3b      	ldr	r3, [r7, #32]
    cd9c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd9e:	4618      	mov	r0, r3
    cda0:	373c      	adds	r7, #60	; 0x3c
    cda2:	46bd      	mov	sp, r7
    cda4:	bd90      	pop	{r4, r7, pc}
    cda6:	bf00      	nop
    cda8:	00302e30 	.word	0x00302e30

0000cdac <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cdac:	b590      	push	{r4, r7, lr}
    cdae:	b095      	sub	sp, #84	; 0x54
    cdb0:	af00      	add	r7, sp, #0
    cdb2:	60f8      	str	r0, [r7, #12]
    cdb4:	60b9      	str	r1, [r7, #8]
    cdb6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cdb8:	2300      	movs	r3, #0
    cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cdbc:	2300      	movs	r3, #0
    cdbe:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cdc0:	e2e3      	b.n	d38a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cdc2:	2306      	movs	r3, #6
    cdc4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cdc6:	68bb      	ldr	r3, [r7, #8]
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	2b25      	cmp	r3, #37	; 0x25
    cdcc:	d01f      	beq.n	ce0e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cdce:	68fb      	ldr	r3, [r7, #12]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d015      	beq.n	ce00 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cdd4:	68bb      	ldr	r3, [r7, #8]
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	2b0a      	cmp	r3, #10
    cdda:	d10b      	bne.n	cdf4 <am_util_stdio_vsprintf+0x48>
    cddc:	4bb1      	ldr	r3, [pc, #708]	; (d0a4 <am_util_stdio_vsprintf+0x2f8>)
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	2b00      	cmp	r3, #0
    cde2:	d007      	beq.n	cdf4 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cde4:	68fb      	ldr	r3, [r7, #12]
    cde6:	1c5a      	adds	r2, r3, #1
    cde8:	60fa      	str	r2, [r7, #12]
    cdea:	220d      	movs	r2, #13
    cdec:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdf0:	3301      	adds	r3, #1
    cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cdf4:	68fb      	ldr	r3, [r7, #12]
    cdf6:	1c5a      	adds	r2, r3, #1
    cdf8:	60fa      	str	r2, [r7, #12]
    cdfa:	68ba      	ldr	r2, [r7, #8]
    cdfc:	7812      	ldrb	r2, [r2, #0]
    cdfe:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ce00:	68bb      	ldr	r3, [r7, #8]
    ce02:	3301      	adds	r3, #1
    ce04:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce08:	3301      	adds	r3, #1
    ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    ce0c:	e2bd      	b.n	d38a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce0e:	68bb      	ldr	r3, [r7, #8]
    ce10:	3301      	adds	r3, #1
    ce12:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    ce14:	2300      	movs	r3, #0
    ce16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ce1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce22:	2320      	movs	r3, #32
    ce24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    ce28:	68bb      	ldr	r3, [r7, #8]
    ce2a:	781b      	ldrb	r3, [r3, #0]
    ce2c:	2b30      	cmp	r3, #48	; 0x30
    ce2e:	d105      	bne.n	ce3c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce30:	2330      	movs	r3, #48	; 0x30
    ce32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    ce36:	68bb      	ldr	r3, [r7, #8]
    ce38:	3301      	adds	r3, #1
    ce3a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce3c:	f107 0310 	add.w	r3, r7, #16
    ce40:	4619      	mov	r1, r3
    ce42:	68b8      	ldr	r0, [r7, #8]
    ce44:	f7ff fd85 	bl	c952 <decstr_to_int>
    ce48:	4603      	mov	r3, r0
    ce4a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    ce4c:	693b      	ldr	r3, [r7, #16]
    ce4e:	68ba      	ldr	r2, [r7, #8]
    ce50:	4413      	add	r3, r2
    ce52:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce54:	68bb      	ldr	r3, [r7, #8]
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	2b73      	cmp	r3, #115	; 0x73
    ce5a:	d005      	beq.n	ce68 <am_util_stdio_vsprintf+0xbc>
    ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce5e:	2b00      	cmp	r3, #0
    ce60:	da02      	bge.n	ce68 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce64:	425b      	negs	r3, r3
    ce66:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce68:	68bb      	ldr	r3, [r7, #8]
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	2b2e      	cmp	r3, #46	; 0x2e
    ce6e:	d10e      	bne.n	ce8e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    ce70:	68bb      	ldr	r3, [r7, #8]
    ce72:	3301      	adds	r3, #1
    ce74:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce76:	f107 0310 	add.w	r3, r7, #16
    ce7a:	4619      	mov	r1, r3
    ce7c:	68b8      	ldr	r0, [r7, #8]
    ce7e:	f7ff fd68 	bl	c952 <decstr_to_int>
    ce82:	4603      	mov	r3, r0
    ce84:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    ce86:	693b      	ldr	r3, [r7, #16]
    ce88:	68ba      	ldr	r2, [r7, #8]
    ce8a:	4413      	add	r3, r2
    ce8c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce8e:	68bb      	ldr	r3, [r7, #8]
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	2b6c      	cmp	r3, #108	; 0x6c
    ce94:	d10c      	bne.n	ceb0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    ce96:	68bb      	ldr	r3, [r7, #8]
    ce98:	3301      	adds	r3, #1
    ce9a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce9c:	68bb      	ldr	r3, [r7, #8]
    ce9e:	781b      	ldrb	r3, [r3, #0]
    cea0:	2b6c      	cmp	r3, #108	; 0x6c
    cea2:	d105      	bne.n	ceb0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cea4:	68bb      	ldr	r3, [r7, #8]
    cea6:	3301      	adds	r3, #1
    cea8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    ceaa:	2301      	movs	r3, #1
    ceac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    ceb0:	68bb      	ldr	r3, [r7, #8]
    ceb2:	781b      	ldrb	r3, [r3, #0]
    ceb4:	3b46      	subs	r3, #70	; 0x46
    ceb6:	2b32      	cmp	r3, #50	; 0x32
    ceb8:	f200 8254 	bhi.w	d364 <am_util_stdio_vsprintf+0x5b8>
    cebc:	a201      	add	r2, pc, #4	; (adr r2, cec4 <am_util_stdio_vsprintf+0x118>)
    cebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cec2:	bf00      	nop
    cec4:	0000d2ef 	.word	0x0000d2ef
    cec8:	0000d365 	.word	0x0000d365
    cecc:	0000d365 	.word	0x0000d365
    ced0:	0000d365 	.word	0x0000d365
    ced4:	0000d365 	.word	0x0000d365
    ced8:	0000d365 	.word	0x0000d365
    cedc:	0000d365 	.word	0x0000d365
    cee0:	0000d365 	.word	0x0000d365
    cee4:	0000d365 	.word	0x0000d365
    cee8:	0000d365 	.word	0x0000d365
    ceec:	0000d365 	.word	0x0000d365
    cef0:	0000d365 	.word	0x0000d365
    cef4:	0000d365 	.word	0x0000d365
    cef8:	0000d365 	.word	0x0000d365
    cefc:	0000d365 	.word	0x0000d365
    cf00:	0000d365 	.word	0x0000d365
    cf04:	0000d365 	.word	0x0000d365
    cf08:	0000d365 	.word	0x0000d365
    cf0c:	0000d08b 	.word	0x0000d08b
    cf10:	0000d365 	.word	0x0000d365
    cf14:	0000d365 	.word	0x0000d365
    cf18:	0000d365 	.word	0x0000d365
    cf1c:	0000d365 	.word	0x0000d365
    cf20:	0000d365 	.word	0x0000d365
    cf24:	0000d365 	.word	0x0000d365
    cf28:	0000d365 	.word	0x0000d365
    cf2c:	0000d365 	.word	0x0000d365
    cf30:	0000d365 	.word	0x0000d365
    cf34:	0000d365 	.word	0x0000d365
    cf38:	0000cf91 	.word	0x0000cf91
    cf3c:	0000d1b7 	.word	0x0000d1b7
    cf40:	0000d365 	.word	0x0000d365
    cf44:	0000d2ef 	.word	0x0000d2ef
    cf48:	0000d365 	.word	0x0000d365
    cf4c:	0000d365 	.word	0x0000d365
    cf50:	0000d1b7 	.word	0x0000d1b7
    cf54:	0000d365 	.word	0x0000d365
    cf58:	0000d365 	.word	0x0000d365
    cf5c:	0000d365 	.word	0x0000d365
    cf60:	0000d365 	.word	0x0000d365
    cf64:	0000d365 	.word	0x0000d365
    cf68:	0000d365 	.word	0x0000d365
    cf6c:	0000d365 	.word	0x0000d365
    cf70:	0000d365 	.word	0x0000d365
    cf74:	0000d365 	.word	0x0000d365
    cf78:	0000cfb7 	.word	0x0000cfb7
    cf7c:	0000d365 	.word	0x0000d365
    cf80:	0000d125 	.word	0x0000d125
    cf84:	0000d365 	.word	0x0000d365
    cf88:	0000d365 	.word	0x0000d365
    cf8c:	0000d085 	.word	0x0000d085
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	1d1a      	adds	r2, r3, #4
    cf94:	607a      	str	r2, [r7, #4]
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cf9c:	68fb      	ldr	r3, [r7, #12]
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	d005      	beq.n	cfae <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cfa2:	68fb      	ldr	r3, [r7, #12]
    cfa4:	1c5a      	adds	r2, r3, #1
    cfa6:	60fa      	str	r2, [r7, #12]
    cfa8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cfac:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfb0:	3301      	adds	r3, #1
    cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cfb4:	e1e6      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cfb6:	687b      	ldr	r3, [r7, #4]
    cfb8:	1d1a      	adds	r2, r3, #4
    cfba:	607a      	str	r2, [r7, #4]
    cfbc:	681b      	ldr	r3, [r3, #0]
    cfbe:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cfc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cfc2:	f7ff fdb4 	bl	cb2e <simple_strlen>
    cfc6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfca:	2b00      	cmp	r3, #0
    cfcc:	dd2e      	ble.n	d02c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cfd2:	429a      	cmp	r2, r3
    cfd4:	d22a      	bcs.n	d02c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfda:	1ad3      	subs	r3, r2, r3
    cfdc:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfe4:	4619      	mov	r1, r3
    cfe6:	68f8      	ldr	r0, [r7, #12]
    cfe8:	f7ff fdbc 	bl	cb64 <padbuffer>
    cfec:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cfee:	68fb      	ldr	r3, [r7, #12]
    cff0:	2b00      	cmp	r3, #0
    cff2:	d001      	beq.n	cff8 <am_util_stdio_vsprintf+0x24c>
    cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cff6:	e000      	b.n	cffa <am_util_stdio_vsprintf+0x24e>
    cff8:	2300      	movs	r3, #0
    cffa:	68fa      	ldr	r2, [r7, #12]
    cffc:	4413      	add	r3, r2
    cffe:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d004:	4413      	add	r3, r2
    d006:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d008:	2300      	movs	r3, #0
    d00a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d00c:	e00e      	b.n	d02c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d00e:	68fb      	ldr	r3, [r7, #12]
    d010:	2b00      	cmp	r3, #0
    d012:	d005      	beq.n	d020 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d014:	68fb      	ldr	r3, [r7, #12]
    d016:	1c5a      	adds	r2, r3, #1
    d018:	60fa      	str	r2, [r7, #12]
    d01a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d01c:	7812      	ldrb	r2, [r2, #0]
    d01e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d022:	3301      	adds	r3, #1
    d024:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d028:	3301      	adds	r3, #1
    d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d02e:	781b      	ldrb	r3, [r3, #0]
    d030:	2b00      	cmp	r3, #0
    d032:	d1ec      	bne.n	d00e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d036:	2b00      	cmp	r3, #0
    d038:	f000 81a1 	beq.w	d37e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d03e:	425b      	negs	r3, r3
    d040:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d046:	429a      	cmp	r2, r3
    d048:	f080 8199 	bcs.w	d37e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d050:	1ad3      	subs	r3, r2, r3
    d052:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d058:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d05a:	4619      	mov	r1, r3
    d05c:	68f8      	ldr	r0, [r7, #12]
    d05e:	f7ff fd81 	bl	cb64 <padbuffer>
    d062:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d064:	68fb      	ldr	r3, [r7, #12]
    d066:	2b00      	cmp	r3, #0
    d068:	d001      	beq.n	d06e <am_util_stdio_vsprintf+0x2c2>
    d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d06c:	e000      	b.n	d070 <am_util_stdio_vsprintf+0x2c4>
    d06e:	2300      	movs	r3, #0
    d070:	68fa      	ldr	r2, [r7, #12]
    d072:	4413      	add	r3, r2
    d074:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d07a:	4413      	add	r3, r2
    d07c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d07e:	2300      	movs	r3, #0
    d080:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d082:	e17c      	b.n	d37e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d084:	2301      	movs	r3, #1
    d086:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d08a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d08e:	2b00      	cmp	r3, #0
    d090:	d00a      	beq.n	d0a8 <am_util_stdio_vsprintf+0x2fc>
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	3307      	adds	r3, #7
    d096:	f023 0307 	bic.w	r3, r3, #7
    d09a:	f103 0208 	add.w	r2, r3, #8
    d09e:	607a      	str	r2, [r7, #4]
    d0a0:	cb18      	ldmia	r3, {r3, r4}
    d0a2:	e007      	b.n	d0b4 <am_util_stdio_vsprintf+0x308>
    d0a4:	10001128 	.word	0x10001128
                                      va_arg(pArgs, uint32_t);
    d0a8:	687b      	ldr	r3, [r7, #4]
    d0aa:	1d1a      	adds	r2, r3, #4
    d0ac:	607a      	str	r2, [r7, #4]
    d0ae:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0b0:	f04f 0400 	mov.w	r4, #0
    d0b4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d01e      	beq.n	d0fc <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d0be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0c2:	f7ff fc22 	bl	c90a <ndigits_in_hex>
    d0c6:	4602      	mov	r2, r0
    d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0ca:	1a9b      	subs	r3, r3, r2
    d0cc:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0d4:	4619      	mov	r1, r3
    d0d6:	68f8      	ldr	r0, [r7, #12]
    d0d8:	f7ff fd44 	bl	cb64 <padbuffer>
    d0dc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d0de:	68fb      	ldr	r3, [r7, #12]
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d001      	beq.n	d0e8 <am_util_stdio_vsprintf+0x33c>
    d0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0e6:	e000      	b.n	d0ea <am_util_stdio_vsprintf+0x33e>
    d0e8:	2300      	movs	r3, #0
    d0ea:	68fa      	ldr	r2, [r7, #12]
    d0ec:	4413      	add	r3, r2
    d0ee:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0f4:	4413      	add	r3, r2
    d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0f8:	2300      	movs	r3, #0
    d0fa:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d100:	68fa      	ldr	r2, [r7, #12]
    d102:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d106:	f7ff fcb2 	bl	ca6e <uint64_to_hexstr>
    d10a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d10c:	68fb      	ldr	r3, [r7, #12]
    d10e:	2b00      	cmp	r3, #0
    d110:	d003      	beq.n	d11a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d114:	68fa      	ldr	r2, [r7, #12]
    d116:	4413      	add	r3, r2
    d118:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d11c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d11e:	4413      	add	r3, r2
    d120:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d122:	e12f      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d124:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d128:	2b00      	cmp	r3, #0
    d12a:	d008      	beq.n	d13e <am_util_stdio_vsprintf+0x392>
    d12c:	687b      	ldr	r3, [r7, #4]
    d12e:	3307      	adds	r3, #7
    d130:	f023 0307 	bic.w	r3, r3, #7
    d134:	f103 0208 	add.w	r2, r3, #8
    d138:	607a      	str	r2, [r7, #4]
    d13a:	cb18      	ldmia	r3, {r3, r4}
    d13c:	e005      	b.n	d14a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d13e:	687b      	ldr	r3, [r7, #4]
    d140:	1d1a      	adds	r2, r3, #4
    d142:	607a      	str	r2, [r7, #4]
    d144:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d146:	f04f 0400 	mov.w	r4, #0
    d14a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d150:	2b00      	cmp	r3, #0
    d152:	d01e      	beq.n	d192 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d154:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d158:	f7ff fb99 	bl	c88e <ndigits_in_u64>
    d15c:	4602      	mov	r2, r0
    d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d160:	1a9b      	subs	r3, r3, r2
    d162:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d168:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d16a:	4619      	mov	r1, r3
    d16c:	68f8      	ldr	r0, [r7, #12]
    d16e:	f7ff fcf9 	bl	cb64 <padbuffer>
    d172:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d174:	68fb      	ldr	r3, [r7, #12]
    d176:	2b00      	cmp	r3, #0
    d178:	d001      	beq.n	d17e <am_util_stdio_vsprintf+0x3d2>
    d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d17c:	e000      	b.n	d180 <am_util_stdio_vsprintf+0x3d4>
    d17e:	2300      	movs	r3, #0
    d180:	68fa      	ldr	r2, [r7, #12]
    d182:	4413      	add	r3, r2
    d184:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d18a:	4413      	add	r3, r2
    d18c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d18e:	2300      	movs	r3, #0
    d190:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d192:	68fa      	ldr	r2, [r7, #12]
    d194:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d198:	f7ff fc21 	bl	c9de <uint64_to_str>
    d19c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d19e:	68fb      	ldr	r3, [r7, #12]
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d003      	beq.n	d1ac <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1a6:	68fa      	ldr	r2, [r7, #12]
    d1a8:	4413      	add	r3, r2
    d1aa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1b0:	4413      	add	r3, r2
    d1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d1b4:	e0e6      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d008      	beq.n	d1d0 <am_util_stdio_vsprintf+0x424>
    d1be:	687b      	ldr	r3, [r7, #4]
    d1c0:	3307      	adds	r3, #7
    d1c2:	f023 0307 	bic.w	r3, r3, #7
    d1c6:	f103 0208 	add.w	r2, r3, #8
    d1ca:	607a      	str	r2, [r7, #4]
    d1cc:	cb18      	ldmia	r3, {r3, r4}
    d1ce:	e005      	b.n	d1dc <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d1d0:	687b      	ldr	r3, [r7, #4]
    d1d2:	1d1a      	adds	r2, r3, #4
    d1d4:	607a      	str	r2, [r7, #4]
    d1d6:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d1dc:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d1e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	f174 0300 	sbcs.w	r3, r4, #0
    d1ea:	da0a      	bge.n	d202 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d1ec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1f0:	425b      	negs	r3, r3
    d1f2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d1f6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d1fa:	2301      	movs	r3, #1
    d1fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d200:	e006      	b.n	d210 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d202:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d206:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d20a:	2300      	movs	r3, #0
    d20c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d212:	2b00      	cmp	r3, #0
    d214:	d04a      	beq.n	d2ac <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d216:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d21a:	4618      	mov	r0, r3
    d21c:	4621      	mov	r1, r4
    d21e:	f7ff fb57 	bl	c8d0 <ndigits_in_i64>
    d222:	4602      	mov	r2, r0
    d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d226:	1a9b      	subs	r3, r3, r2
    d228:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d22a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d22e:	2b00      	cmp	r3, #0
    d230:	d011      	beq.n	d256 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d234:	3b01      	subs	r3, #1
    d236:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d23c:	2b30      	cmp	r3, #48	; 0x30
    d23e:	d10a      	bne.n	d256 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	2b00      	cmp	r3, #0
    d244:	d004      	beq.n	d250 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d246:	68fb      	ldr	r3, [r7, #12]
    d248:	1c5a      	adds	r2, r3, #1
    d24a:	60fa      	str	r2, [r7, #12]
    d24c:	222d      	movs	r2, #45	; 0x2d
    d24e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d252:	3301      	adds	r3, #1
    d254:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d25a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d25c:	4619      	mov	r1, r3
    d25e:	68f8      	ldr	r0, [r7, #12]
    d260:	f7ff fc80 	bl	cb64 <padbuffer>
    d264:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d266:	68fb      	ldr	r3, [r7, #12]
    d268:	2b00      	cmp	r3, #0
    d26a:	d001      	beq.n	d270 <am_util_stdio_vsprintf+0x4c4>
    d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d26e:	e000      	b.n	d272 <am_util_stdio_vsprintf+0x4c6>
    d270:	2300      	movs	r3, #0
    d272:	68fa      	ldr	r2, [r7, #12]
    d274:	4413      	add	r3, r2
    d276:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d27a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d27c:	4413      	add	r3, r2
    d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d280:	2300      	movs	r3, #0
    d282:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d288:	2b00      	cmp	r3, #0
    d28a:	d01e      	beq.n	d2ca <am_util_stdio_vsprintf+0x51e>
    d28c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d290:	2b20      	cmp	r3, #32
    d292:	d11a      	bne.n	d2ca <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d294:	68fb      	ldr	r3, [r7, #12]
    d296:	2b00      	cmp	r3, #0
    d298:	d004      	beq.n	d2a4 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d29a:	68fb      	ldr	r3, [r7, #12]
    d29c:	1c5a      	adds	r2, r3, #1
    d29e:	60fa      	str	r2, [r7, #12]
    d2a0:	222d      	movs	r2, #45	; 0x2d
    d2a2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2a6:	3301      	adds	r3, #1
    d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d2aa:	e00e      	b.n	d2ca <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d2ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d00a      	beq.n	d2ca <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d2b4:	68fb      	ldr	r3, [r7, #12]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d004      	beq.n	d2c4 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d2ba:	68fb      	ldr	r3, [r7, #12]
    d2bc:	1c5a      	adds	r2, r3, #1
    d2be:	60fa      	str	r2, [r7, #12]
    d2c0:	222d      	movs	r2, #45	; 0x2d
    d2c2:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2c6:	3301      	adds	r3, #1
    d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2ca:	68fa      	ldr	r2, [r7, #12]
    d2cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2d0:	f7ff fb85 	bl	c9de <uint64_to_str>
    d2d4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d2d6:	68fb      	ldr	r3, [r7, #12]
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d003      	beq.n	d2e4 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2de:	68fa      	ldr	r2, [r7, #12]
    d2e0:	4413      	add	r3, r2
    d2e2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2e8:	4413      	add	r3, r2
    d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2ec:	e04a      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2ee:	68fb      	ldr	r3, [r7, #12]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d046      	beq.n	d382 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d2f4:	687b      	ldr	r3, [r7, #4]
    d2f6:	3307      	adds	r3, #7
    d2f8:	f023 0307 	bic.w	r3, r3, #7
    d2fc:	f103 0208 	add.w	r2, r3, #8
    d300:	607a      	str	r2, [r7, #4]
    d302:	cb18      	ldmia	r3, {r3, r4}
    d304:	4618      	mov	r0, r3
    d306:	4621      	mov	r1, r4
    d308:	f7fe fefa 	bl	c100 <__aeabi_d2f>
    d30c:	4603      	mov	r3, r0
    d30e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d310:	68fb      	ldr	r3, [r7, #12]
    d312:	2214      	movs	r2, #20
    d314:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d318:	68f9      	ldr	r1, [r7, #12]
    d31a:	6978      	ldr	r0, [r7, #20]
    d31c:	f7ff fc48 	bl	cbb0 <ftoa>
    d320:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d324:	2b00      	cmp	r3, #0
    d326:	da14      	bge.n	d352 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d32a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d32e:	d102      	bne.n	d336 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d330:	4b1e      	ldr	r3, [pc, #120]	; (d3ac <am_util_stdio_vsprintf+0x600>)
    d332:	62bb      	str	r3, [r7, #40]	; 0x28
    d334:	e008      	b.n	d348 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d338:	f113 0f02 	cmn.w	r3, #2
    d33c:	d102      	bne.n	d344 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d33e:	4b1c      	ldr	r3, [pc, #112]	; (d3b0 <am_util_stdio_vsprintf+0x604>)
    d340:	62bb      	str	r3, [r7, #40]	; 0x28
    d342:	e001      	b.n	d348 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d344:	4b1b      	ldr	r3, [pc, #108]	; (d3b4 <am_util_stdio_vsprintf+0x608>)
    d346:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d348:	68fb      	ldr	r3, [r7, #12]
    d34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d34c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d34e:	2303      	movs	r3, #3
    d350:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d356:	4413      	add	r3, r2
    d358:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d35c:	68fa      	ldr	r2, [r7, #12]
    d35e:	4413      	add	r3, r2
    d360:	60fb      	str	r3, [r7, #12]
                }
                break;
    d362:	e00e      	b.n	d382 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d364:	68fb      	ldr	r3, [r7, #12]
    d366:	2b00      	cmp	r3, #0
    d368:	d005      	beq.n	d376 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d36a:	68fb      	ldr	r3, [r7, #12]
    d36c:	1c5a      	adds	r2, r3, #1
    d36e:	60fa      	str	r2, [r7, #12]
    d370:	68ba      	ldr	r2, [r7, #8]
    d372:	7812      	ldrb	r2, [r2, #0]
    d374:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d378:	3301      	adds	r3, #1
    d37a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d37c:	e002      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>
                break;
    d37e:	bf00      	nop
    d380:	e000      	b.n	d384 <am_util_stdio_vsprintf+0x5d8>
                break;
    d382:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d384:	68bb      	ldr	r3, [r7, #8]
    d386:	3301      	adds	r3, #1
    d388:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d38a:	68bb      	ldr	r3, [r7, #8]
    d38c:	781b      	ldrb	r3, [r3, #0]
    d38e:	2b00      	cmp	r3, #0
    d390:	f47f ad17 	bne.w	cdc2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d394:	68fb      	ldr	r3, [r7, #12]
    d396:	2b00      	cmp	r3, #0
    d398:	d002      	beq.n	d3a0 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d39a:	68fb      	ldr	r3, [r7, #12]
    d39c:	2200      	movs	r2, #0
    d39e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d3a2:	4618      	mov	r0, r3
    d3a4:	3754      	adds	r7, #84	; 0x54
    d3a6:	46bd      	mov	sp, r7
    d3a8:	bd90      	pop	{r4, r7, pc}
    d3aa:	bf00      	nop
    d3ac:	00302e30 	.word	0x00302e30
    d3b0:	00232e23 	.word	0x00232e23
    d3b4:	003f2e3f 	.word	0x003f2e3f

0000d3b8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3b8:	b40f      	push	{r0, r1, r2, r3}
    d3ba:	b580      	push	{r7, lr}
    d3bc:	b082      	sub	sp, #8
    d3be:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3c0:	f107 0314 	add.w	r3, r7, #20
    d3c4:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3c6:	683a      	ldr	r2, [r7, #0]
    d3c8:	6939      	ldr	r1, [r7, #16]
    d3ca:	4808      	ldr	r0, [pc, #32]	; (d3ec <am_util_stdio_printf+0x34>)
    d3cc:	f7ff fcee 	bl	cdac <am_util_stdio_vsprintf>
    d3d0:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3d2:	4b07      	ldr	r3, [pc, #28]	; (d3f0 <am_util_stdio_printf+0x38>)
    d3d4:	681b      	ldr	r3, [r3, #0]
    d3d6:	4805      	ldr	r0, [pc, #20]	; (d3ec <am_util_stdio_printf+0x34>)
    d3d8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3da:	687b      	ldr	r3, [r7, #4]
}
    d3dc:	4618      	mov	r0, r3
    d3de:	3708      	adds	r7, #8
    d3e0:	46bd      	mov	sp, r7
    d3e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d3e6:	b004      	add	sp, #16
    d3e8:	4770      	bx	lr
    d3ea:	bf00      	nop
    d3ec:	10001028 	.word	0x10001028
    d3f0:	10001134 	.word	0x10001134

0000d3f4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3f4:	b580      	push	{r7, lr}
    d3f6:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3f8:	4802      	ldr	r0, [pc, #8]	; (d404 <am_util_stdio_terminal_clear+0x10>)
    d3fa:	f7ff ffdd 	bl	d3b8 <am_util_stdio_printf>
}
    d3fe:	bf00      	nop
    d400:	bd80      	pop	{r7, pc}
    d402:	bf00      	nop
    d404:	0000e580 	.word	0x0000e580

0000d408 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d40a:	f000 fc77 	bl	dcfc <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d40e:	2000      	movs	r0, #0
    d410:	f7ff f94e 	bl	c6b0 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d414:	4b12      	ldr	r3, [pc, #72]	; (d460 <am_bsp_low_power_init+0x58>)
    d416:	4f13      	ldr	r7, [pc, #76]	; (d464 <am_bsp_low_power_init+0x5c>)
    d418:	6819      	ldr	r1, [r3, #0]
    d41a:	2029      	movs	r0, #41	; 0x29
    d41c:	f000 fac2 	bl	d9a4 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d420:	f000 fd72 	bl	df08 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d424:	2001      	movs	r0, #1
    d426:	f000 fdad 	bl	df84 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d42a:	2100      	movs	r1, #0
    d42c:	2003      	movs	r0, #3
    d42e:	f000 f90f 	bl	d650 <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d432:	f000 fdb3 	bl	df9c <am_hal_rtc_osc_disable>
    d436:	480c      	ldr	r0, [pc, #48]	; (d468 <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d438:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d43a:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d43c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d440:	4631      	mov	r1, r6
    d442:	4628      	mov	r0, r5
    d444:	f000 faae 	bl	d9a4 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d448:	2103      	movs	r1, #3
    d44a:	4628      	mov	r0, r5
    d44c:	f000 fbec 	bl	dc28 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d450:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d452:	4628      	mov	r0, r5
    d454:	2100      	movs	r1, #0
    d456:	f000 fbe7 	bl	dc28 <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d45a:	2c05      	cmp	r4, #5
    d45c:	d1ee      	bne.n	d43c <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d460:	0000e59c 	.word	0x0000e59c
    d464:	10001000 	.word	0x10001000
    d468:	0000e5a0 	.word	0x0000e5a0

0000d46c <am_bsp_itm_printf_enable>:
{
    d46c:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d46e:	4b0b      	ldr	r3, [pc, #44]	; (d49c <am_bsp_itm_printf_enable+0x30>)
{
    d470:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d472:	2201      	movs	r2, #1
    d474:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d476:	f000 fc23 	bl	dcc0 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d47a:	a806      	add	r0, sp, #24
    d47c:	4908      	ldr	r1, [pc, #32]	; (d4a0 <am_bsp_itm_printf_enable+0x34>)
    d47e:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d482:	f000 fda5 	bl	dfd0 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d486:	4b07      	ldr	r3, [pc, #28]	; (d4a4 <am_bsp_itm_printf_enable+0x38>)
    d488:	2029      	movs	r0, #41	; 0x29
    d48a:	6819      	ldr	r1, [r3, #0]
    d48c:	f000 fa8a 	bl	d9a4 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d490:	4805      	ldr	r0, [pc, #20]	; (d4a8 <am_bsp_itm_printf_enable+0x3c>)
    d492:	f7ff f90d 	bl	c6b0 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d496:	b007      	add	sp, #28
    d498:	f85d fb04 	ldr.w	pc, [sp], #4
    d49c:	1000112c 	.word	0x1000112c
    d4a0:	000f4240 	.word	0x000f4240
    d4a4:	0000e594 	.word	0x0000e594
    d4a8:	0000dda5 	.word	0x0000dda5

0000d4ac <am_hal_burst_mode_initialize>:
//  Burst mode initialization function
//
// ****************************************************************************
uint32_t
am_hal_burst_mode_initialize(am_hal_burst_avail_e *peBurstAvail)
{
    d4ac:	b570      	push	{r4, r5, r6, lr}
    uint32_t    ui32Status;
    //
    // Check if the Burst Mode feature is available based on the SKU.
    //
#if AM_CMSIS_REGS
    if ( 0 == MCUCTRL->SKU_b.ALLOWBURST )
    d4ae:	4b1f      	ldr	r3, [pc, #124]	; (d52c <am_hal_burst_mode_initialize+0x80>)
    d4b0:	695a      	ldr	r2, [r3, #20]
{
    d4b2:	4604      	mov	r4, r0
    if ( 0 == MCUCTRL->SKU_b.ALLOWBURST )
    d4b4:	07d0      	lsls	r0, r2, #31
{
    d4b6:	b082      	sub	sp, #8
    if ( 0 == MCUCTRL->SKU_b.ALLOWBURST )
    d4b8:	d407      	bmi.n	d4ca <am_hal_burst_mode_initialize+0x1e>
    {
        //
        // Burst mode is not available.
        //
        g_am_hal_burst_mode_available = false;
    d4ba:	481d      	ldr	r0, [pc, #116]	; (d530 <am_hal_burst_mode_initialize+0x84>)
    d4bc:	2600      	movs	r6, #0
        *peBurstAvail = AM_HAL_BURST_NOTAVAIL;
    d4be:	2501      	movs	r5, #1
        g_am_hal_burst_mode_available = false;
    d4c0:	7006      	strb	r6, [r0, #0]
        return AM_HAL_STATUS_INVALID_OPERATION;
    d4c2:	2007      	movs	r0, #7
        *peBurstAvail = AM_HAL_BURST_NOTAVAIL;
    d4c4:	7025      	strb	r5, [r4, #0]
    // Return Availability
    //
    g_am_hal_burst_mode_available = true;
    *peBurstAvail = AM_HAL_BURST_AVAIL;
    return AM_HAL_STATUS_SUCCESS;
}
    d4c6:	b002      	add	sp, #8
    d4c8:	bd70      	pop	{r4, r5, r6, pc}
    PWRCTRL->DEVPWREVENTEN_b.BURSTEVEN = 1;
    d4ca:	481a      	ldr	r0, [pc, #104]	; (d534 <am_hal_burst_mode_initialize+0x88>)
    d4cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d4ce:	f041 4500 	orr.w	r5, r1, #2147483648	; 0x80000000
    d4d2:	6285      	str	r5, [r0, #40]	; 0x28
    if (PWRCTRL->SUPPLYSRC_b.BLEBUCKEN)
    d4d4:	6806      	ldr	r6, [r0, #0]
    d4d6:	07f1      	lsls	r1, r6, #31
    d4d8:	d418      	bmi.n	d50c <am_hal_burst_mode_initialize+0x60>
    MCUCTRL->FEATUREENABLE_b.BURSTREQ = 1;
    d4da:	4d14      	ldr	r5, [pc, #80]	; (d52c <am_hal_burst_mode_initialize+0x80>)
    ui32Status = am_hal_flash_delay_status_check(10000,
    d4dc:	4916      	ldr	r1, [pc, #88]	; (d538 <am_hal_burst_mode_initialize+0x8c>)
    MCUCTRL->FEATUREENABLE_b.BURSTREQ = 1;
    d4de:	7e2b      	ldrb	r3, [r5, #24]
    ui32Status = am_hal_flash_delay_status_check(10000,
    d4e0:	2601      	movs	r6, #1
    MCUCTRL->FEATUREENABLE_b.BURSTREQ = 1;
    d4e2:	f043 0210 	orr.w	r2, r3, #16
    ui32Status = am_hal_flash_delay_status_check(10000,
    d4e6:	2320      	movs	r3, #32
    MCUCTRL->FEATUREENABLE_b.BURSTREQ = 1;
    d4e8:	762a      	strb	r2, [r5, #24]
    ui32Status = am_hal_flash_delay_status_check(10000,
    d4ea:	f242 7010 	movw	r0, #10000	; 0x2710
    d4ee:	461a      	mov	r2, r3
    d4f0:	9600      	str	r6, [sp, #0]
    d4f2:	f000 f92b 	bl	d74c <am_hal_flash_delay_status_check>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
    d4f6:	b998      	cbnz	r0, d520 <am_hal_burst_mode_initialize+0x74>
    if ( 0 == MCUCTRL->FEATUREENABLE_b.BURSTAVAIL )
    d4f8:	69a9      	ldr	r1, [r5, #24]
    d4fa:	064a      	lsls	r2, r1, #25
    d4fc:	d5dd      	bpl.n	d4ba <am_hal_burst_mode_initialize+0xe>
    if ( MCUCTRL->FEATUREENABLE_b.BURSTACK == 0 )
    d4fe:	69ad      	ldr	r5, [r5, #24]
    d500:	06ab      	lsls	r3, r5, #26
    d502:	d5da      	bpl.n	d4ba <am_hal_burst_mode_initialize+0xe>
    g_am_hal_burst_mode_available = true;
    d504:	4b0a      	ldr	r3, [pc, #40]	; (d530 <am_hal_burst_mode_initialize+0x84>)
    d506:	701e      	strb	r6, [r3, #0]
    *peBurstAvail = AM_HAL_BURST_AVAIL;
    d508:	7020      	strb	r0, [r4, #0]
    return AM_HAL_STATUS_SUCCESS;
    d50a:	e7dc      	b.n	d4c6 <am_hal_burst_mode_initialize+0x1a>
        if ( APOLLO3_A1 )
    d50c:	68db      	ldr	r3, [r3, #12]
    d50e:	b2da      	uxtb	r2, r3
    d510:	2a12      	cmp	r2, #18
    d512:	d1e2      	bne.n	d4da <am_hal_burst_mode_initialize+0x2e>
            CLKGEN->BLEBUCKTONADJ =
    d514:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    d518:	4808      	ldr	r0, [pc, #32]	; (d53c <am_hal_burst_mode_initialize+0x90>)
    d51a:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
    d51e:	e7dc      	b.n	d4da <am_hal_burst_mode_initialize+0x2e>
        g_am_hal_burst_mode_available = false;
    d520:	4903      	ldr	r1, [pc, #12]	; (d530 <am_hal_burst_mode_initialize+0x84>)
    d522:	2200      	movs	r2, #0
    d524:	700a      	strb	r2, [r1, #0]
        *peBurstAvail = AM_HAL_BURST_NOTAVAIL;
    d526:	7026      	strb	r6, [r4, #0]
}
    d528:	b002      	add	sp, #8
    d52a:	bd70      	pop	{r4, r5, r6, pc}
    d52c:	40020000 	.word	0x40020000
    d530:	10001130 	.word	0x10001130
    d534:	40021000 	.word	0x40021000
    d538:	40020018 	.word	0x40020018
    d53c:	0fc0640f 	.word	0x0fc0640f

0000d540 <am_hal_burst_mode_enable>:
    uint32_t    ui32Status;

    //
    // Check if Burst Mode is allowed and return status if it is not.
    //
    if (!g_am_hal_burst_mode_available)
    d540:	4b14      	ldr	r3, [pc, #80]	; (d594 <am_hal_burst_mode_enable+0x54>)
    d542:	7819      	ldrb	r1, [r3, #0]
    d544:	b919      	cbnz	r1, d54e <am_hal_burst_mode_enable+0xe>
    {
        *peBurstStatus = AM_HAL_NORMAL_MODE;
    d546:	2201      	movs	r2, #1
    d548:	7002      	strb	r2, [r0, #0]
        return AM_HAL_STATUS_INVALID_OPERATION;
    d54a:	2007      	movs	r0, #7
    d54c:	4770      	bx	lr
{
    d54e:	b570      	push	{r4, r5, r6, lr}

    //
    // Request Burst Mode Enable (FREQCTRL)
    //
#if AM_CMSIS_REGS
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_EN;
    d550:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
{
    d554:	b082      	sub	sp, #8
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_EN;
    d556:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34

//    while (0 == AM_BFR(CLKGEN, FREQCTRL, BURSTACK));
    ui32Status = am_hal_flash_delay_status_check(10000,
    d55a:	490f      	ldr	r1, [pc, #60]	; (d598 <am_hal_burst_mode_enable+0x58>)
    d55c:	2601      	movs	r6, #1
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_EN;
    d55e:	4332      	orrs	r2, r6
    ui32Status = am_hal_flash_delay_status_check(10000,
    d560:	2304      	movs	r3, #4
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_EN;
    d562:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d566:	4604      	mov	r4, r0
    ui32Status = am_hal_flash_delay_status_check(10000,
    d568:	461a      	mov	r2, r3
    d56a:	9600      	str	r6, [sp, #0]
    d56c:	f242 7010 	movw	r0, #10000	; 0x2710
    d570:	f000 f8ec 	bl	d74c <am_hal_flash_delay_status_check>
                            AM_REG_CLKGEN_FREQCTRL_BURSTSTATUS_M,
                            AM_REG_CLKGEN_FREQCTRL_BURSTSTATUS_M,
                            true);
#endif // AM_CMSIS_REGS

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
    d574:	b938      	cbnz	r0, d586 <am_hal_burst_mode_enable+0x46>

    //
    // Check that the Burst Request was ACK'd.
    //
#if AM_CMSIS_REGS
    if ( 0 == CLKGEN->FREQCTRL_b.BURSTACK )
    d576:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d578:	079b      	lsls	r3, r3, #30
    d57a:	d507      	bpl.n	d58c <am_hal_burst_mode_enable+0x4c>
    }

    //
    // Check the Burst Mode Status (FREQCTRL)
    //
    if ( CLKGEN->FREQCTRL_b.BURSTSTATUS > 0)
    d57c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    {
        *peBurstStatus =  AM_HAL_BURST_MODE;
    d57e:	f011 0f04 	tst.w	r1, #4
    d582:	bf18      	it	ne
    d584:	4606      	movne	r6, r0
    d586:	7026      	strb	r6, [r4, #0]
        *peBurstStatus =  AM_HAL_NORMAL_MODE;
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
}
    d588:	b002      	add	sp, #8
    d58a:	bd70      	pop	{r4, r5, r6, pc}
        *peBurstStatus = AM_HAL_NORMAL_MODE;
    d58c:	7026      	strb	r6, [r4, #0]
        return AM_HAL_STATUS_FAIL;
    d58e:	4630      	mov	r0, r6
    d590:	e7fa      	b.n	d588 <am_hal_burst_mode_enable+0x48>
    d592:	bf00      	nop
    d594:	10001130 	.word	0x10001130
    d598:	40004034 	.word	0x40004034

0000d59c <am_hal_burst_mode_disable>:
//  Burst mode disable function
//
// ****************************************************************************
uint32_t
am_hal_burst_mode_disable(am_hal_burst_mode_e *peBurstStatus)
{
    d59c:	b570      	push	{r4, r5, r6, lr}

    //
    // Request Burst Mode Enable (FREQCTRL)
    //
#if AM_CMSIS_REGS
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_DIS;
    d59e:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000

    //
    // Disable the Burst Feature Event (DEVPWREVENTEN).
    //
    PWRCTRL->DEVPWREVENTEN_b.BURSTEVEN = 0;
    d5a2:	4a0f      	ldr	r2, [pc, #60]	; (d5e0 <am_hal_burst_mode_disable+0x44>)
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_DIS;
    d5a4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34

//  while (1 == CLKGEN->FREQCTRL_b.BURSTACK);
    ui32Status = am_hal_flash_delay_status_check(10000,
    d5a8:	490e      	ldr	r1, [pc, #56]	; (d5e4 <am_hal_burst_mode_disable+0x48>)
    CLKGEN->FREQCTRL_b.BURSTREQ = CLKGEN_FREQCTRL_BURSTREQ_DIS;
    d5aa:	f36f 0300 	bfc	r3, #0, #1
    d5ae:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    PWRCTRL->DEVPWREVENTEN_b.BURSTEVEN = 0;
    d5b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
    d5b4:	b082      	sub	sp, #8
    PWRCTRL->DEVPWREVENTEN_b.BURSTEVEN = 0;
    d5b6:	f36f 73df 	bfc	r3, #31, #1
    ui32Status = am_hal_flash_delay_status_check(10000,
    d5ba:	2401      	movs	r4, #1
    PWRCTRL->DEVPWREVENTEN_b.BURSTEVEN = 0;
    d5bc:	6293      	str	r3, [r2, #40]	; 0x28
{
    d5be:	4606      	mov	r6, r0
    ui32Status = am_hal_flash_delay_status_check(10000,
    d5c0:	2300      	movs	r3, #0
    d5c2:	9400      	str	r4, [sp, #0]
    d5c4:	2204      	movs	r2, #4
    d5c6:	f242 7010 	movw	r0, #10000	; 0x2710
    d5ca:	f000 f8bf 	bl	d74c <am_hal_flash_delay_status_check>
                            AM_REG_CLKGEN_FREQCTRL_BURSTSTATUS_M,
                            0,
                            true);
#endif // AM_CMSIS_REGS

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
    d5ce:	b920      	cbnz	r0, d5da <am_hal_burst_mode_disable+0x3e>
    //
#if AM_CMSIS_REGS
    //
    // Check the Burst Mode Status (FREQCTRL)
    //
    if ( CLKGEN->FREQCTRL_b.BURSTSTATUS > 0 )
    d5d0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    d5d2:	f011 0f04 	tst.w	r1, #4
    {
        *peBurstStatus = AM_HAL_BURST_MODE;
    d5d6:	bf18      	it	ne
    d5d8:	4604      	movne	r4, r0
    d5da:	7034      	strb	r4, [r6, #0]
        *peBurstStatus = AM_HAL_NORMAL_MODE;
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
}
    d5dc:	b002      	add	sp, #8
    d5de:	bd70      	pop	{r4, r5, r6, pc}
    d5e0:	40021000 	.word	0x40021000
    d5e4:	40004034 	.word	0x40004034

0000d5e8 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d5e8:	b530      	push	{r4, r5, lr}
    d5ea:	b083      	sub	sp, #12
    d5ec:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d5ee:	f000 fb5f 	bl	dcb0 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d5f2:	4c11      	ldr	r4, [pc, #68]	; (d638 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d5f4:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d5f6:	6823      	ldr	r3, [r4, #0]
    d5f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d5fc:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d5fe:	9801      	ldr	r0, [sp, #4]
    d600:	f000 fb5a 	bl	dcb8 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d604:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d606:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d608:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d60a:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d60c:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d60e:	005d      	lsls	r5, r3, #1
    d610:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d614:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d616:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d618:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d61c:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d61e:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d622:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d626:	0212      	lsls	r2, r2, #8
    d628:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d62c:	432b      	orrs	r3, r5
    d62e:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d630:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d632:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d634:	b003      	add	sp, #12
    d636:	bd30      	pop	{r4, r5, pc}
    d638:	40018000 	.word	0x40018000

0000d63c <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d63c:	4a03      	ldr	r2, [pc, #12]	; (d64c <am_hal_cachectrl_enable+0x10>)
    d63e:	6813      	ldr	r3, [r2, #0]
    d640:	f043 0001 	orr.w	r0, r3, #1
    d644:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d646:	2000      	movs	r0, #0
    d648:	4770      	bx	lr
    d64a:	bf00      	nop
    d64c:	40018000 	.word	0x40018000

0000d650 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d650:	2809      	cmp	r0, #9
    d652:	d852      	bhi.n	d6fa <am_hal_clkgen_control+0xaa>
    d654:	e8df f000 	tbb	[pc, r0]
    d658:	2b21190d 	.word	0x2b21190d
    d65c:	51513d33 	.word	0x51513d33
    d660:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d666:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d668:	6a1a      	ldr	r2, [r3, #32]
    d66a:	f36f 0200 	bfc	r2, #0, #1
    d66e:	621a      	str	r2, [r3, #32]
            break;
    d670:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d672:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d676:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d678:	2047      	movs	r0, #71	; 0x47
    d67a:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d67e:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d682:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d684:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d688:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d68a:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d68e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d690:	68ca      	ldr	r2, [r1, #12]
    d692:	f022 0301 	bic.w	r3, r2, #1
    d696:	60cb      	str	r3, [r1, #12]
            break;
    d698:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d69a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d69e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d6a4:	f022 0302 	bic.w	r3, r2, #2
    d6a8:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d6ac:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6b2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6b4:	68d3      	ldr	r3, [r2, #12]
    d6b6:	f043 0101 	orr.w	r1, r3, #1
    d6ba:	60d1      	str	r1, [r2, #12]
            break;
    d6bc:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6be:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6c2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6c4:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d6c8:	f043 0102 	orr.w	r1, r3, #2
    d6cc:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d6d0:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d6d6:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6d8:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d6da:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6dc:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d6de:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d6e0:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d6e2:	615a      	str	r2, [r3, #20]
            break;
    d6e4:	4770      	bx	lr
            if ( pArgs == 0 )
    d6e6:	b151      	cbz	r1, d6fe <am_hal_clkgen_control+0xae>
    d6e8:	6808      	ldr	r0, [r1, #0]
    d6ea:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d6ee:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6f2:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d6f4:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d6f8:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d6fa:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d6fc:	4770      	bx	lr
    d6fe:	4901      	ldr	r1, [pc, #4]	; (d704 <am_hal_clkgen_control+0xb4>)
    d700:	e7f5      	b.n	d6ee <am_hal_clkgen_control+0x9e>
    d702:	bf00      	nop
    d704:	0025b801 	.word	0x0025b801

0000d708 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d708:	b1a8      	cbz	r0, d736 <am_hal_clkgen_status_get+0x2e>
{
    d70a:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d70c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d710:	490a      	ldr	r1, [pc, #40]	; (d73c <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d712:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d714:	4b0a      	ldr	r3, [pc, #40]	; (d740 <am_hal_clkgen_status_get+0x38>)
    d716:	f014 0f01 	tst.w	r4, #1
    d71a:	bf08      	it	eq
    d71c:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d71e:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d720:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d722:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d726:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d72a:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d72c:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d72e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d732:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d734:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d736:	2006      	movs	r0, #6
    d738:	4770      	bx	lr
    d73a:	bf00      	nop
    d73c:	02dc6c00 	.word	0x02dc6c00
    d740:	016e3600 	.word	0x016e3600

0000d744 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d744:	4b00      	ldr	r3, [pc, #0]	; (d748 <am_hal_flash_delay+0x4>)
    d746:	4718      	bx	r3
    d748:	0800009d 	.word	0x0800009d

0000d74c <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d750:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d754:	f8df 8248 	ldr.w	r8, [pc, #584]	; d9a0 <am_hal_flash_delay_status_check+0x254>
{
    d758:	4607      	mov	r7, r0
    d75a:	460c      	mov	r4, r1
    d75c:	4615      	mov	r5, r2
    d75e:	461e      	mov	r6, r3
    d760:	f1be 0f00 	cmp.w	lr, #0
    d764:	f000 808e 	beq.w	d884 <am_hal_flash_delay_status_check+0x138>
    d768:	f010 0907 	ands.w	r9, r0, #7
    d76c:	d044      	beq.n	d7f8 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d76e:	680b      	ldr	r3, [r1, #0]
    d770:	4013      	ands	r3, r2
    d772:	429e      	cmp	r6, r3
    d774:	f000 8083 	beq.w	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d778:	2001      	movs	r0, #1
    d77a:	47c0      	blx	r8
    d77c:	f1b9 0f01 	cmp.w	r9, #1
    d780:	f107 37ff 	add.w	r7, r7, #4294967295
    d784:	d038      	beq.n	d7f8 <am_hal_flash_delay_status_check+0xac>
    d786:	f1b9 0f02 	cmp.w	r9, #2
    d78a:	d02e      	beq.n	d7ea <am_hal_flash_delay_status_check+0x9e>
    d78c:	f1b9 0f03 	cmp.w	r9, #3
    d790:	d024      	beq.n	d7dc <am_hal_flash_delay_status_check+0x90>
    d792:	f1b9 0f04 	cmp.w	r9, #4
    d796:	d01a      	beq.n	d7ce <am_hal_flash_delay_status_check+0x82>
    d798:	f1b9 0f05 	cmp.w	r9, #5
    d79c:	d010      	beq.n	d7c0 <am_hal_flash_delay_status_check+0x74>
    d79e:	f1b9 0f06 	cmp.w	r9, #6
    d7a2:	d006      	beq.n	d7b2 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7a4:	6820      	ldr	r0, [r4, #0]
    d7a6:	4028      	ands	r0, r5
    d7a8:	4286      	cmp	r6, r0
    d7aa:	d068      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ac:	2001      	movs	r0, #1
    d7ae:	47c0      	blx	r8
    d7b0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7b2:	6821      	ldr	r1, [r4, #0]
    d7b4:	4029      	ands	r1, r5
    d7b6:	428e      	cmp	r6, r1
    d7b8:	d061      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ba:	2001      	movs	r0, #1
    d7bc:	47c0      	blx	r8
    d7be:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7c0:	6822      	ldr	r2, [r4, #0]
    d7c2:	402a      	ands	r2, r5
    d7c4:	4296      	cmp	r6, r2
    d7c6:	d05a      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7c8:	2001      	movs	r0, #1
    d7ca:	47c0      	blx	r8
    d7cc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7ce:	6823      	ldr	r3, [r4, #0]
    d7d0:	402b      	ands	r3, r5
    d7d2:	429e      	cmp	r6, r3
    d7d4:	d053      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7d6:	2001      	movs	r0, #1
    d7d8:	47c0      	blx	r8
    d7da:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7dc:	6820      	ldr	r0, [r4, #0]
    d7de:	4028      	ands	r0, r5
    d7e0:	4286      	cmp	r6, r0
    d7e2:	d04c      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7e4:	2001      	movs	r0, #1
    d7e6:	47c0      	blx	r8
    d7e8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7ea:	6821      	ldr	r1, [r4, #0]
    d7ec:	4029      	ands	r1, r5
    d7ee:	428e      	cmp	r6, r1
    d7f0:	d045      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7f2:	2001      	movs	r0, #1
    d7f4:	3f01      	subs	r7, #1
    d7f6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7f8:	6822      	ldr	r2, [r4, #0]
    d7fa:	402a      	ands	r2, r5
    d7fc:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7fe:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d802:	d03c      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d804:	2f00      	cmp	r7, #0
    d806:	f000 80c8 	beq.w	d99a <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d80a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d80c:	6823      	ldr	r3, [r4, #0]
    d80e:	402b      	ands	r3, r5
    d810:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d812:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d816:	d032      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d818:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d81a:	6821      	ldr	r1, [r4, #0]
    d81c:	4029      	ands	r1, r5
    d81e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d820:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d824:	d02b      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d826:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d828:	6822      	ldr	r2, [r4, #0]
    d82a:	402a      	ands	r2, r5
    d82c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d82e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d832:	d024      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d834:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d836:	6823      	ldr	r3, [r4, #0]
    d838:	402b      	ands	r3, r5
    d83a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d83c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d840:	d01d      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d842:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d844:	6821      	ldr	r1, [r4, #0]
    d846:	4029      	ands	r1, r5
    d848:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d84a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d84e:	d016      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d850:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d852:	6822      	ldr	r2, [r4, #0]
    d854:	402a      	ands	r2, r5
    d856:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d858:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d85c:	d00f      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d85e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d860:	6820      	ldr	r0, [r4, #0]
    d862:	4028      	ands	r0, r5
    d864:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d866:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d86a:	d008      	beq.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d86c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d86e:	6822      	ldr	r2, [r4, #0]
    d870:	402a      	ands	r2, r5
    d872:	4296      	cmp	r6, r2
    d874:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d878:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d87c:	d1c2      	bne.n	d804 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d87e:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d884:	f010 0907 	ands.w	r9, r0, #7
    d888:	d043      	beq.n	d912 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d88a:	680b      	ldr	r3, [r1, #0]
    d88c:	4013      	ands	r3, r2
    d88e:	429e      	cmp	r6, r3
    d890:	d1f5      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d892:	2001      	movs	r0, #1
    d894:	47c0      	blx	r8
    d896:	f1b9 0f01 	cmp.w	r9, #1
    d89a:	f107 37ff 	add.w	r7, r7, #4294967295
    d89e:	d038      	beq.n	d912 <am_hal_flash_delay_status_check+0x1c6>
    d8a0:	f1b9 0f02 	cmp.w	r9, #2
    d8a4:	d02e      	beq.n	d904 <am_hal_flash_delay_status_check+0x1b8>
    d8a6:	f1b9 0f03 	cmp.w	r9, #3
    d8aa:	d024      	beq.n	d8f6 <am_hal_flash_delay_status_check+0x1aa>
    d8ac:	f1b9 0f04 	cmp.w	r9, #4
    d8b0:	d01a      	beq.n	d8e8 <am_hal_flash_delay_status_check+0x19c>
    d8b2:	f1b9 0f05 	cmp.w	r9, #5
    d8b6:	d010      	beq.n	d8da <am_hal_flash_delay_status_check+0x18e>
    d8b8:	f1b9 0f06 	cmp.w	r9, #6
    d8bc:	d006      	beq.n	d8cc <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8be:	6821      	ldr	r1, [r4, #0]
    d8c0:	4029      	ands	r1, r5
    d8c2:	428e      	cmp	r6, r1
    d8c4:	d1db      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8c6:	2001      	movs	r0, #1
    d8c8:	47c0      	blx	r8
    d8ca:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8cc:	6822      	ldr	r2, [r4, #0]
    d8ce:	402a      	ands	r2, r5
    d8d0:	4296      	cmp	r6, r2
    d8d2:	d1d4      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8d4:	2001      	movs	r0, #1
    d8d6:	47c0      	blx	r8
    d8d8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8da:	6820      	ldr	r0, [r4, #0]
    d8dc:	4028      	ands	r0, r5
    d8de:	4286      	cmp	r6, r0
    d8e0:	d1cd      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8e2:	2001      	movs	r0, #1
    d8e4:	47c0      	blx	r8
    d8e6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8e8:	6823      	ldr	r3, [r4, #0]
    d8ea:	402b      	ands	r3, r5
    d8ec:	429e      	cmp	r6, r3
    d8ee:	d1c6      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8f0:	2001      	movs	r0, #1
    d8f2:	47c0      	blx	r8
    d8f4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8f6:	6821      	ldr	r1, [r4, #0]
    d8f8:	4029      	ands	r1, r5
    d8fa:	428e      	cmp	r6, r1
    d8fc:	d1bf      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8fe:	2001      	movs	r0, #1
    d900:	47c0      	blx	r8
    d902:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d904:	6822      	ldr	r2, [r4, #0]
    d906:	402a      	ands	r2, r5
    d908:	4296      	cmp	r6, r2
    d90a:	d1b8      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d90c:	2001      	movs	r0, #1
    d90e:	3f01      	subs	r7, #1
    d910:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d912:	6823      	ldr	r3, [r4, #0]
    d914:	402b      	ands	r3, r5
    d916:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d918:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d91c:	d1af      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d91e:	2f00      	cmp	r7, #0
    d920:	d03b      	beq.n	d99a <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d922:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d924:	6821      	ldr	r1, [r4, #0]
    d926:	4029      	ands	r1, r5
    d928:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d92a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d92e:	d1a6      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d930:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d932:	6822      	ldr	r2, [r4, #0]
    d934:	402a      	ands	r2, r5
    d936:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d938:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d93c:	d19f      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d93e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d940:	6823      	ldr	r3, [r4, #0]
    d942:	402b      	ands	r3, r5
    d944:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d946:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d94a:	d198      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d94c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d94e:	6821      	ldr	r1, [r4, #0]
    d950:	4029      	ands	r1, r5
    d952:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d954:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d958:	d191      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d95a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d95c:	6822      	ldr	r2, [r4, #0]
    d95e:	402a      	ands	r2, r5
    d960:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d962:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d966:	d18a      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d968:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d96a:	6823      	ldr	r3, [r4, #0]
    d96c:	402b      	ands	r3, r5
    d96e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d970:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d974:	d183      	bne.n	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d976:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d978:	6820      	ldr	r0, [r4, #0]
    d97a:	4028      	ands	r0, r5
    d97c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d97e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d982:	f47f af7c 	bne.w	d87e <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d986:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d988:	6823      	ldr	r3, [r4, #0]
    d98a:	402b      	ands	r3, r5
    d98c:	429e      	cmp	r6, r3
    d98e:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d992:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d996:	d0c2      	beq.n	d91e <am_hal_flash_delay_status_check+0x1d2>
    d998:	e771      	b.n	d87e <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d99a:	2004      	movs	r0, #4
    d99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9a0:	0800009d 	.word	0x0800009d

0000d9a4 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d9a4:	2831      	cmp	r0, #49	; 0x31
    d9a6:	d901      	bls.n	d9ac <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d9a8:	2006      	movs	r0, #6
    d9aa:	4770      	bx	lr
{
    d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d9b0:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d9b4:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d9b8:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d9ba:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d9be:	d014      	beq.n	d9ea <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d9c0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d9c4:	1db2      	adds	r2, r6, #6
    d9c6:	f002 0707 	and.w	r7, r2, #7
    d9ca:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d9cc:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d9d0:	f200 80ab 	bhi.w	db2a <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d9d4:	4a85      	ldr	r2, [pc, #532]	; (dbec <am_hal_gpio_pinconfig+0x248>)
    d9d6:	5c17      	ldrb	r7, [r2, r0]
    d9d8:	07ff      	lsls	r7, r7, #31
    d9da:	d403      	bmi.n	d9e4 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d9dc:	4884      	ldr	r0, [pc, #528]	; (dbf0 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d9de:	b007      	add	sp, #28
    d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d9e4:	1eb4      	subs	r4, r6, #2
    d9e6:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d9ea:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d9ee:	2e00      	cmp	r6, #0
    d9f0:	f040 8095 	bne.w	db1e <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9f4:	4a7f      	ldr	r2, [pc, #508]	; (dbf4 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9f6:	4f80      	ldr	r7, [pc, #512]	; (dbf8 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9f8:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9fa:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9fe:	411e      	asrs	r6, r3
    da00:	f016 0f01 	tst.w	r6, #1
    da04:	bf0c      	ite	eq
    da06:	2600      	moveq	r6, #0
    da08:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    da0a:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    da0c:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    da10:	f000 8097 	beq.w	db42 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da14:	f3c1 3341 	ubfx	r3, r1, #13, #2
    da18:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da1a:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da1e:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    da22:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    da24:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da28:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da2c:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    da30:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da34:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da36:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    da3a:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da3e:	f000 808d 	beq.w	db5c <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    da42:	4a6e      	ldr	r2, [pc, #440]	; (dbfc <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da44:	6816      	ldr	r6, [r2, #0]
    da46:	1b8c      	subs	r4, r1, r6
    da48:	fab4 f384 	clz	r3, r4
    da4c:	095f      	lsrs	r7, r3, #5
    da4e:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    da50:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    da54:	bf04      	itt	eq
    da56:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    da5a:	f367 0800 	bfieq	r8, r7, #0, #1
    da5e:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    da60:	f3c1 2101 	ubfx	r1, r1, #8, #2
    da64:	2902      	cmp	r1, #2
    da66:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    da6a:	d07a      	beq.n	db62 <am_hal_gpio_pinconfig+0x1be>
    da6c:	d87f      	bhi.n	db6e <am_hal_gpio_pinconfig+0x1ca>
    da6e:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    da70:	bf08      	it	eq
    da72:	f045 0504 	orreq.w	r5, r5, #4
    da76:	f004 0a18 	and.w	sl, r4, #24
            break;
    da7a:	2200      	movs	r2, #0
    da7c:	4604      	mov	r4, r0
    da7e:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    da80:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    da84:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    da88:	485d      	ldr	r0, [pc, #372]	; (dc00 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    da8a:	495e      	ldr	r1, [pc, #376]	; (dc04 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    da8c:	4f5e      	ldr	r7, [pc, #376]	; (dc08 <am_hal_gpio_pinconfig+0x264>)
    da8e:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    da90:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    da94:	f04f 0cff 	mov.w	ip, #255	; 0xff
    da98:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    da9c:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    da9e:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    daa2:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    daa4:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    daa8:	f000 f902 	bl	dcb0 <am_hal_interrupt_master_disable>
    daac:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    daae:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    dab2:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    dab6:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    daba:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    dabe:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    dac0:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    dac4:	9902      	ldr	r1, [sp, #8]
    dac6:	9a03      	ldr	r2, [sp, #12]
    dac8:	b150      	cbz	r0, dae0 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    daca:	f004 001f 	and.w	r0, r4, #31
    dace:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    dad2:	f04f 0c01 	mov.w	ip, #1
    dad6:	4c4d      	ldr	r4, [pc, #308]	; (dc0c <am_hal_gpio_pinconfig+0x268>)
    dad8:	fa0c f000 	lsl.w	r0, ip, r0
    dadc:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    dae0:	484b      	ldr	r0, [pc, #300]	; (dc10 <am_hal_gpio_pinconfig+0x26c>)
    dae2:	2473      	movs	r4, #115	; 0x73
    dae4:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    dae6:	f8da 4000 	ldr.w	r4, [sl]
    daea:	4034      	ands	r4, r6
    daec:	4325      	orrs	r5, r4
    daee:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    daf2:	f859 5001 	ldr.w	r5, [r9, r1]
    daf6:	402f      	ands	r7, r5
    daf8:	ea47 0708 	orr.w	r7, r7, r8
    dafc:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    db00:	f85b 1003 	ldr.w	r1, [fp, r3]
    db04:	400e      	ands	r6, r1
    db06:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    db08:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    db0a:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    db0e:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    db10:	9805      	ldr	r0, [sp, #20]
    db12:	f000 f8d1 	bl	dcb8 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    db16:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    db18:	b007      	add	sp, #28
    db1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    db1e:	2e01      	cmp	r6, #1
    db20:	d015      	beq.n	db4e <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    db22:	2e02      	cmp	r6, #2
    db24:	d030      	beq.n	db88 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    db26:	483b      	ldr	r0, [pc, #236]	; (dc14 <am_hal_gpio_pinconfig+0x270>)
    db28:	e759      	b.n	d9de <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    db2a:	2cc0      	cmp	r4, #192	; 0xc0
    db2c:	d027      	beq.n	db7e <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    db2e:	2c20      	cmp	r4, #32
    db30:	f47f af5b 	bne.w	d9ea <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    db34:	4c2d      	ldr	r4, [pc, #180]	; (dbec <am_hal_gpio_pinconfig+0x248>)
    db36:	5c26      	ldrb	r6, [r4, r0]
    db38:	f016 0f09 	tst.w	r6, #9
    db3c:	f47f af4e 	bne.w	d9dc <am_hal_gpio_pinconfig+0x38>
    db40:	e753      	b.n	d9ea <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    db42:	f3c1 4202 	ubfx	r2, r1, #16, #3
    db46:	2a07      	cmp	r2, #7
    db48:	d125      	bne.n	db96 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    db4a:	4833      	ldr	r0, [pc, #204]	; (dc18 <am_hal_gpio_pinconfig+0x274>)
    db4c:	e747      	b.n	d9de <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    db4e:	4c27      	ldr	r4, [pc, #156]	; (dbec <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    db50:	5c26      	ldrb	r6, [r4, r0]
    db52:	07b4      	lsls	r4, r6, #30
    db54:	d5e7      	bpl.n	db26 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    db56:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    db5a:	e74b      	b.n	d9f4 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    db5c:	2701      	movs	r7, #1
    db5e:	9700      	str	r7, [sp, #0]
    db60:	e776      	b.n	da50 <am_hal_gpio_pinconfig+0xac>
    db62:	f004 0a18 	and.w	sl, r4, #24
    db66:	2301      	movs	r3, #1
    db68:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    db6c:	e786      	b.n	da7c <am_hal_gpio_pinconfig+0xd8>
    db6e:	f004 0a18 	and.w	sl, r4, #24
    db72:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    db74:	f045 0504 	orr.w	r5, r5, #4
    db78:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    db7c:	e77e      	b.n	da7c <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    db7e:	2814      	cmp	r0, #20
    db80:	f43f af33 	beq.w	d9ea <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    db84:	4825      	ldr	r0, [pc, #148]	; (dc1c <am_hal_gpio_pinconfig+0x278>)
    db86:	e72a      	b.n	d9de <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    db88:	4a18      	ldr	r2, [pc, #96]	; (dbec <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    db8a:	5c17      	ldrb	r7, [r2, r0]
    db8c:	077a      	lsls	r2, r7, #29
    db8e:	d5ca      	bpl.n	db26 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    db90:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    db94:	e72e      	b.n	d9f4 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    db96:	4c22      	ldr	r4, [pc, #136]	; (dc20 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    db98:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    db9c:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dba0:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dba4:	45b0      	cmp	r8, r6
    dba6:	d010      	beq.n	dbca <am_hal_gpio_pinconfig+0x226>
    dba8:	0087      	lsls	r7, r0, #2
    dbaa:	eb04 0907 	add.w	r9, r4, r7
    dbae:	f899 3001 	ldrb.w	r3, [r9, #1]
    dbb2:	42b3      	cmp	r3, r6
    dbb4:	d015      	beq.n	dbe2 <am_hal_gpio_pinconfig+0x23e>
    dbb6:	f899 2002 	ldrb.w	r2, [r9, #2]
    dbba:	42b2      	cmp	r2, r6
    dbbc:	d00f      	beq.n	dbde <am_hal_gpio_pinconfig+0x23a>
    dbbe:	f899 4003 	ldrb.w	r4, [r9, #3]
    dbc2:	42b4      	cmp	r4, r6
    dbc4:	d00f      	beq.n	dbe6 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    dbc6:	4817      	ldr	r0, [pc, #92]	; (dc24 <am_hal_gpio_pinconfig+0x280>)
    dbc8:	e709      	b.n	d9de <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dbca:	2600      	movs	r6, #0
    dbcc:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    dbce:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dbd0:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    dbd4:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dbd6:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    dbda:	9300      	str	r3, [sp, #0]
    dbdc:	e740      	b.n	da60 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dbde:	2602      	movs	r6, #2
    dbe0:	e7f5      	b.n	dbce <am_hal_gpio_pinconfig+0x22a>
    dbe2:	2601      	movs	r6, #1
    dbe4:	e7f3      	b.n	dbce <am_hal_gpio_pinconfig+0x22a>
    dbe6:	2603      	movs	r6, #3
    dbe8:	e7f1      	b.n	dbce <am_hal_gpio_pinconfig+0x22a>
    dbea:	bf00      	nop
    dbec:	0000e5a4 	.word	0x0000e5a4
    dbf0:	08000100 	.word	0x08000100
    dbf4:	0000e5d8 	.word	0x0000e5d8
    dbf8:	0000e6d4 	.word	0x0000e6d4
    dbfc:	0000e59c 	.word	0x0000e59c
    dc00:	7ffffffc 	.word	0x7ffffffc
    dc04:	400100e0 	.word	0x400100e0
    dc08:	40010040 	.word	0x40010040
    dc0c:	400100b4 	.word	0x400100b4
    dc10:	40010000 	.word	0x40010000
    dc14:	08000102 	.word	0x08000102
    dc18:	08000103 	.word	0x08000103
    dc1c:	08000101 	.word	0x08000101
    dc20:	0000e60c 	.word	0x0000e60c
    dc24:	08000104 	.word	0x08000104

0000dc28 <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    dc28:	2831      	cmp	r0, #49	; 0x31
    dc2a:	d901      	bls.n	dc30 <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    dc2c:	2005      	movs	r0, #5
    dc2e:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    dc30:	2905      	cmp	r1, #5
    dc32:	d901      	bls.n	dc38 <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    dc34:	2006      	movs	r0, #6
    dc36:	4770      	bx	lr
{
    dc38:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    dc3a:	f000 031f 	and.w	r3, r0, #31
{
    dc3e:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    dc40:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    dc42:	2201      	movs	r2, #1
    dc44:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    dc46:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    dc4a:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    dc4e:	f000 f82f 	bl	dcb0 <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    dc52:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    dc54:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    dc56:	2904      	cmp	r1, #4
    dc58:	d817      	bhi.n	dc8a <am_hal_gpio_state_write+0x62>
    dc5a:	e8df f001 	tbb	[pc, r1]
    dc5e:	0e13      	.short	0x0e13
    dc60:	030b      	.short	0x030b
    dc62:	19          	.byte	0x19
    dc63:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    dc64:	4d0d      	ldr	r5, [pc, #52]	; (dc9c <am_hal_gpio_state_write+0x74>)
    dc66:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    dc68:	9801      	ldr	r0, [sp, #4]
    dc6a:	f000 f825 	bl	dcb8 <am_hal_interrupt_master_set>

    return ui32Return;
    dc6e:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    dc70:	b002      	add	sp, #8
    dc72:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    dc74:	4b0a      	ldr	r3, [pc, #40]	; (dca0 <am_hal_gpio_state_write+0x78>)
    dc76:	50e6      	str	r6, [r4, r3]
            break;
    dc78:	e7f6      	b.n	dc68 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    dc7a:	480a      	ldr	r0, [pc, #40]	; (dca4 <am_hal_gpio_state_write+0x7c>)
    dc7c:	5822      	ldr	r2, [r4, r0]
    dc7e:	4072      	eors	r2, r6
    dc80:	5022      	str	r2, [r4, r0]
            break;
    dc82:	e7f1      	b.n	dc68 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    dc84:	4908      	ldr	r1, [pc, #32]	; (dca8 <am_hal_gpio_state_write+0x80>)
    dc86:	5066      	str	r6, [r4, r1]
            break;
    dc88:	e7ee      	b.n	dc68 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    dc8a:	4d08      	ldr	r5, [pc, #32]	; (dcac <am_hal_gpio_state_write+0x84>)
    dc8c:	5166      	str	r6, [r4, r5]
            break;
    dc8e:	e7eb      	b.n	dc68 <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    dc90:	4803      	ldr	r0, [pc, #12]	; (dca0 <am_hal_gpio_state_write+0x78>)
    dc92:	5823      	ldr	r3, [r4, r0]
    dc94:	4073      	eors	r3, r6
    dc96:	5023      	str	r3, [r4, r0]
            break;
    dc98:	e7e6      	b.n	dc68 <am_hal_gpio_state_write+0x40>
    dc9a:	bf00      	nop
    dc9c:	400100a8 	.word	0x400100a8
    dca0:	400100b4 	.word	0x400100b4
    dca4:	40010088 	.word	0x40010088
    dca8:	40010090 	.word	0x40010090
    dcac:	40010098 	.word	0x40010098

0000dcb0 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    dcb0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    dcb4:	b672      	cpsid	i
    __asm("    bx lr");
    dcb6:	4770      	bx	lr

0000dcb8 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    dcb8:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    dcbc:	4770      	bx	lr
    dcbe:	bf00      	nop

0000dcc0 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dcc0:	4a0b      	ldr	r2, [pc, #44]	; (dcf0 <am_hal_itm_enable+0x30>)
    dcc2:	68d3      	ldr	r3, [r2, #12]
    dcc4:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    dcc8:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    dcca:	68d1      	ldr	r1, [r2, #12]
    dccc:	01cb      	lsls	r3, r1, #7
    dcce:	d5fc      	bpl.n	dcca <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    dcd0:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    dcd4:	4b07      	ldr	r3, [pc, #28]	; (dcf4 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    dcd6:	4a08      	ldr	r2, [pc, #32]	; (dcf8 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dcd8:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    dcdc:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    dcde:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dce2:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dce6:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dcea:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    dcee:	4770      	bx	lr
    dcf0:	e000edf0 	.word	0xe000edf0
    dcf4:	c5acce55 	.word	0xc5acce55
    dcf8:	00150511 	.word	0x00150511

0000dcfc <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    dcfc:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    dcfe:	4b24      	ldr	r3, [pc, #144]	; (dd90 <am_hal_itm_disable+0x94>)
    dd00:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    dd04:	b9b0      	cbnz	r0, dd34 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dd06:	4923      	ldr	r1, [pc, #140]	; (dd94 <am_hal_itm_disable+0x98>)
    dd08:	68ca      	ldr	r2, [r1, #12]
    dd0a:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    dd0e:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    dd10:	68cb      	ldr	r3, [r1, #12]
    dd12:	01da      	lsls	r2, r3, #7
    dd14:	d5fc      	bpl.n	dd10 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    dd16:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    dd1a:	481f      	ldr	r0, [pc, #124]	; (dd98 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    dd1c:	4a1f      	ldr	r2, [pc, #124]	; (dd9c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dd1e:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    dd22:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    dd24:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dd28:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dd2c:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dd30:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    dd34:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dd38:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    dd3c:	021b      	lsls	r3, r3, #8
    dd3e:	d4fb      	bmi.n	dd38 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dd40:	f240 20f7 	movw	r0, #759	; 0x2f7
    dd44:	f7ff fcfe 	bl	d744 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dd48:	4813      	ldr	r0, [pc, #76]	; (dd98 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dd4a:	4915      	ldr	r1, [pc, #84]	; (dda0 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dd4c:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dd50:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dd54:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dd56:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    dd5a:	f022 0401 	bic.w	r4, r2, #1
    dd5e:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dd62:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dd66:	420b      	tst	r3, r1
    dd68:	d1fb      	bne.n	dd62 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dd6a:	3801      	subs	r0, #1
    dd6c:	d1f3      	bne.n	dd56 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dd6e:	4909      	ldr	r1, [pc, #36]	; (dd94 <am_hal_itm_disable+0x98>)
    dd70:	68ca      	ldr	r2, [r1, #12]
    dd72:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dd76:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dd78:	68cb      	ldr	r3, [r1, #12]
    dd7a:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    dd7e:	d1fb      	bne.n	dd78 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    dd80:	4903      	ldr	r1, [pc, #12]	; (dd90 <am_hal_itm_disable+0x94>)
    dd82:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    dd86:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    dd8a:	2a00      	cmp	r2, #0
    dd8c:	d1fb      	bne.n	dd86 <am_hal_itm_disable+0x8a>
}
    dd8e:	bd10      	pop	{r4, pc}
    dd90:	40020000 	.word	0x40020000
    dd94:	e000edf0 	.word	0xe000edf0
    dd98:	c5acce55 	.word	0xc5acce55
    dd9c:	00150511 	.word	0x00150511
    dda0:	00800001 	.word	0x00800001

0000dda4 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    dda4:	7803      	ldrb	r3, [r0, #0]
    dda6:	b1b3      	cbz	r3, ddd6 <am_hal_itm_print+0x32>
{
    dda8:	b410      	push	{r4}
    ddaa:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    ddac:	2400      	movs	r4, #0
    ddae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    ddb2:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    ddb4:	2900      	cmp	r1, #0
    ddb6:	d1fa      	bne.n	ddae <am_hal_itm_print+0xa>
    ddb8:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    ddba:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    ddbe:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    ddc2:	f8dc 3000 	ldr.w	r3, [ip]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d0fb      	beq.n	ddc2 <am_hal_itm_print+0x1e>
    while (ui32Length)
    ddca:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    ddcc:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    ddd0:	d1f5      	bne.n	ddbe <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    ddd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    ddd6:	4770      	bx	lr

0000ddd8 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    ddd8:	b141      	cbz	r1, ddec <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    ddda:	2801      	cmp	r0, #1
{
    dddc:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    ddde:	d03a      	beq.n	de56 <am_hal_mcuctrl_info_get+0x7e>
    dde0:	d322      	bcc.n	de28 <am_hal_mcuctrl_info_get+0x50>
    dde2:	2802      	cmp	r0, #2
    dde4:	d004      	beq.n	ddf0 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    dde6:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    dde8:	bcf0      	pop	{r4, r5, r6, r7}
    ddea:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    ddec:	2006      	movs	r0, #6
    ddee:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    ddf0:	4a41      	ldr	r2, [pc, #260]	; (def8 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    ddf2:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    ddf4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    ddf8:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    ddfa:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    ddfe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    de02:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    de06:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    de08:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    de0a:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    de0c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    de10:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    de12:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    de16:	4334      	orrs	r4, r6
    de18:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    de1a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    de1e:	4310      	orrs	r0, r2
    de20:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    de22:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    de24:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    de26:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    de28:	4c33      	ldr	r4, [pc, #204]	; (def8 <am_hal_mcuctrl_info_get+0x120>)
    de2a:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    de2c:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    de30:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    de34:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    de36:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    de38:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    de3c:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    de40:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    de42:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    de44:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    de48:	f004 0501 	and.w	r5, r4, #1
    de4c:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    de4e:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    de50:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    de52:	bcf0      	pop	{r4, r5, r6, r7}
    de54:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    de56:	4a28      	ldr	r2, [pc, #160]	; (def8 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    de58:	4c28      	ldr	r4, [pc, #160]	; (defc <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    de5a:	6813      	ldr	r3, [r2, #0]
    de5c:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    de5e:	6850      	ldr	r0, [r2, #4]
    de60:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    de62:	6897      	ldr	r7, [r2, #8]
    de64:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    de66:	68d6      	ldr	r6, [r2, #12]
    de68:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    de6a:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    de6c:	4824      	ldr	r0, [pc, #144]	; (df00 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    de6e:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    de70:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    de74:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    de78:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    de7a:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    de7e:	4a21      	ldr	r2, [pc, #132]	; (df04 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    de80:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    de84:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    de86:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    de8a:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    de8c:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    de8e:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    de90:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    de94:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    de98:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    de9a:	f000 040f 	and.w	r4, r0, #15
    de9e:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dea2:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dea4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dea8:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    deac:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    deb0:	f007 0c0f 	and.w	ip, r7, #15
    deb4:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    deb8:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    deba:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    debe:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dec2:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dec6:	f3c5 1703 	ubfx	r7, r5, #4, #4
    deca:	433b      	orrs	r3, r7
    decc:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    dece:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    ded2:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    ded6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    deda:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dede:	b2e5      	uxtb	r5, r4
    dee0:	042b      	lsls	r3, r5, #16
    dee2:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dee6:	b2d6      	uxtb	r6, r2
    dee8:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    deea:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    deec:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    def0:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    def2:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    def4:	bcf0      	pop	{r4, r5, r6, r7}
    def6:	4770      	bx	lr
    def8:	40020000 	.word	0x40020000
    defc:	0000e708 	.word	0x0000e708
    df00:	0000e748 	.word	0x0000e748
    df04:	f0000f00 	.word	0xf0000f00

0000df08 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    df08:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    df0a:	4c1b      	ldr	r4, [pc, #108]	; (df78 <am_hal_pwrctrl_low_power_init+0x70>)
    df0c:	69a3      	ldr	r3, [r4, #24]
    df0e:	05db      	lsls	r3, r3, #23
{
    df10:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    df12:	d502      	bpl.n	df1a <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    df14:	2000      	movs	r0, #0
}
    df16:	b003      	add	sp, #12
    df18:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    df1a:	4d18      	ldr	r5, [pc, #96]	; (df7c <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    df1c:	4918      	ldr	r1, [pc, #96]	; (df80 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    df1e:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    df20:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    df22:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    df24:	461a      	mov	r2, r3
    df26:	9000      	str	r0, [sp, #0]
    df28:	f242 7010 	movw	r0, #10000	; 0x2710
    df2c:	f7ff fc0e 	bl	d74c <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    df30:	b110      	cbz	r0, df38 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    df32:	2004      	movs	r0, #4
}
    df34:	b003      	add	sp, #12
    df36:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    df38:	6821      	ldr	r1, [r4, #0]
    df3a:	f041 0201 	orr.w	r2, r1, #1
    df3e:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    df40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    df42:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    df46:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    df48:	68ec      	ldr	r4, [r5, #12]
    df4a:	b2e2      	uxtb	r2, r4
    df4c:	2a11      	cmp	r2, #17
    df4e:	d1e1      	bne.n	df14 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    df50:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    df54:	f360 5356 	bfi	r3, r0, #21, #2
    df58:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    df5c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    df60:	240f      	movs	r4, #15
    df62:	f364 118b 	bfi	r1, r4, #6, #6
    df66:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    df6a:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    df6e:	f364 0205 	bfi	r2, r4, #0, #6
    df72:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    df76:	e7ce      	b.n	df16 <am_hal_pwrctrl_low_power_init+0xe>
    df78:	40021000 	.word	0x40021000
    df7c:	40020000 	.word	0x40020000
    df80:	40020018 	.word	0x40020018

0000df84 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    df84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    df88:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    df8a:	68d3      	ldr	r3, [r2, #12]
    df8c:	bf0c      	ite	eq
    df8e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    df92:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    df96:	60d3      	str	r3, [r2, #12]
    df98:	4770      	bx	lr
    df9a:	bf00      	nop

0000df9c <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    df9c:	4a03      	ldr	r2, [pc, #12]	; (dfac <am_hal_rtc_osc_disable+0x10>)
    df9e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dfa2:	f043 0010 	orr.w	r0, r3, #16
    dfa6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    dfaa:	4770      	bx	lr
    dfac:	40004200 	.word	0x40004200

0000dfb0 <am_hal_stimer_config>:

    //
    // Read the current config
    //
#if AM_CMSIS_REGS
    ui32CurrVal = CTIMER->STCFG;
    dfb0:	4b03      	ldr	r3, [pc, #12]	; (dfc0 <am_hal_stimer_config+0x10>)
    dfb2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
    dfb6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    }
#endif // AM_CMSIS_REGS
#endif

    return ui32CurrVal;
}
    dfba:	4610      	mov	r0, r2
    dfbc:	4770      	bx	lr
    dfbe:	bf00      	nop
    dfc0:	40008000 	.word	0x40008000

0000dfc4 <am_hal_stimer_counter_get>:
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
#if AM_CMSIS_REGS
    return CTIMER->STTMR;
    dfc4:	4b01      	ldr	r3, [pc, #4]	; (dfcc <am_hal_stimer_counter_get+0x8>)
    dfc6:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
#else // AM_CMSIS_REGS
    return AM_REG(CTIMER, STTMR);
#endif // AM_CMSIS_REGS
}
    dfca:	4770      	bx	lr
    dfcc:	40008000 	.word	0x40008000

0000dfd0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    dfd0:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    dfd2:	4a24      	ldr	r2, [pc, #144]	; (e064 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    dfd4:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    dfd6:	2100      	movs	r1, #0
{
    dfd8:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    dfda:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    dfde:	b33b      	cbz	r3, e030 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dfe0:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dfe2:	4921      	ldr	r1, [pc, #132]	; (e068 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dfe4:	4c21      	ldr	r4, [pc, #132]	; (e06c <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dfe6:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dfe8:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    dfec:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dfee:	458c      	cmp	ip, r1
    dff0:	bf98      	it	ls
    dff2:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    dff4:	f7ff fb88 	bl	d708 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    dff8:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    dffa:	1c5a      	adds	r2, r3, #1
    dffc:	d02f      	beq.n	e05e <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    dffe:	08da      	lsrs	r2, r3, #3
    e000:	fbb2 fef4 	udiv	lr, r2, r4
    e004:	f10e 31ff 	add.w	r1, lr, #4294967295
    e008:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e00a:	4a16      	ldr	r2, [pc, #88]	; (e064 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e00c:	4918      	ldr	r1, [pc, #96]	; (e070 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e00e:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e010:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e014:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e016:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e018:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e01c:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e020:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e024:	f240 20f7 	movw	r0, #759	; 0x2f7
    e028:	f7ff fb8c 	bl	d744 <am_hal_flash_delay>
}
    e02c:	b004      	add	sp, #16
    e02e:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e030:	6904      	ldr	r4, [r0, #16]
    e032:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e034:	6883      	ldr	r3, [r0, #8]
    e036:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e03a:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e03c:	4c0c      	ldr	r4, [pc, #48]	; (e070 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e03e:	3901      	subs	r1, #1
    e040:	2301      	movs	r3, #1
    e042:	408b      	lsls	r3, r1
    e044:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e046:	6840      	ldr	r0, [r0, #4]
    e048:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e04c:	4302      	orrs	r2, r0
    e04e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e052:	f240 20f7 	movw	r0, #759	; 0x2f7
    e056:	f7ff fb75 	bl	d744 <am_hal_flash_delay>
}
    e05a:	b004      	add	sp, #16
    e05c:	bd10      	pop	{r4, pc}
    e05e:	2005      	movs	r0, #5
    e060:	e7d3      	b.n	e00a <am_hal_tpiu_enable+0x3a>
    e062:	bf00      	nop
    e064:	e0040000 	.word	0xe0040000
    e068:	001da380 	.word	0x001da380
    e06c:	000f4240 	.word	0x000f4240
    e070:	40020000 	.word	0x40020000
    e074:	6c6f7041 	.word	0x6c6f7041
    e078:	20336f6c 	.word	0x20336f6c
    e07c:	73727542 	.word	0x73727542
    e080:	6f4d2074 	.word	0x6f4d2074
    e084:	45206564 	.word	0x45206564
    e088:	706d6178 	.word	0x706d6178
    e08c:	0a0a656c 	.word	0x0a0a656c
    e090:	00000000 	.word	0x00000000
    e094:	6c6f7041 	.word	0x6c6f7041
    e098:	20336f6c 	.word	0x20336f6c
    e09c:	73727542 	.word	0x73727542
    e0a0:	6f4d2074 	.word	0x6f4d2074
    e0a4:	69206564 	.word	0x69206564
    e0a8:	76412073 	.word	0x76412073
    e0ac:	616c6961 	.word	0x616c6961
    e0b0:	0a656c62 	.word	0x0a656c62
    e0b4:	00000000 	.word	0x00000000
    e0b8:	6c6f7041 	.word	0x6c6f7041
    e0bc:	20336f6c 	.word	0x20336f6c
    e0c0:	73727542 	.word	0x73727542
    e0c4:	6f4d2074 	.word	0x6f4d2074
    e0c8:	69206564 	.word	0x69206564
    e0cc:	6f4e2073 	.word	0x6f4e2073
    e0d0:	76412074 	.word	0x76412074
    e0d4:	616c6961 	.word	0x616c6961
    e0d8:	0a656c62 	.word	0x0a656c62
    e0dc:	00000000 	.word	0x00000000
    e0e0:	6c696146 	.word	0x6c696146
    e0e4:	74206465 	.word	0x74206465
    e0e8:	6e49206f 	.word	0x6e49206f
    e0ec:	61697469 	.word	0x61697469
    e0f0:	657a696c 	.word	0x657a696c
    e0f4:	726f6620 	.word	0x726f6620
    e0f8:	72754220 	.word	0x72754220
    e0fc:	4d207473 	.word	0x4d207473
    e100:	2065646f 	.word	0x2065646f
    e104:	7265706f 	.word	0x7265706f
    e108:	6f697461 	.word	0x6f697461
    e10c:	00000a6e 	.word	0x00000a6e
    e110:	6c6f7041 	.word	0x6c6f7041
    e114:	20336f6c 	.word	0x20336f6c
    e118:	7265706f 	.word	0x7265706f
    e11c:	6e697461 	.word	0x6e697461
    e120:	6e692067 	.word	0x6e692067
    e124:	726f4e20 	.word	0x726f4e20
    e128:	206c616d 	.word	0x206c616d
    e12c:	65646f4d 	.word	0x65646f4d
    e130:	38342820 	.word	0x38342820
    e134:	297a484d 	.word	0x297a484d
    e138:	0000000a 	.word	0x0000000a
    e13c:	6c696146 	.word	0x6c696146
    e140:	74206465 	.word	0x74206465
    e144:	6944206f 	.word	0x6944206f
    e148:	6c626173 	.word	0x6c626173
    e14c:	75422065 	.word	0x75422065
    e150:	20747372 	.word	0x20747372
    e154:	65646f4d 	.word	0x65646f4d
    e158:	65706f20 	.word	0x65706f20
    e15c:	69746172 	.word	0x69746172
    e160:	000a6e6f 	.word	0x000a6e6f
    e164:	6174530a 	.word	0x6174530a
    e168:	64657472 	.word	0x64657472
    e16c:	6c616320 	.word	0x6c616320
    e170:	616c7563 	.word	0x616c7563
    e174:	676e6974 	.word	0x676e6974
    e178:	69727020 	.word	0x69727020
    e17c:	2073656d 	.word	0x2073656d
    e180:	4e206e69 	.word	0x4e206e69
    e184:	616d726f 	.word	0x616d726f
    e188:	6f4d206c 	.word	0x6f4d206c
    e18c:	000a6564 	.word	0x000a6564
    e190:	6d726f4e 	.word	0x6d726f4e
    e194:	4d206c61 	.word	0x4d206c61
    e198:	2065646f 	.word	0x2065646f
    e19c:	746c6544 	.word	0x746c6544
    e1a0:	25203a61 	.word	0x25203a61
    e1a4:	00000a64 	.word	0x00000a64
    e1a8:	6c6f7041 	.word	0x6c6f7041
    e1ac:	20336f6c 	.word	0x20336f6c
    e1b0:	7265706f 	.word	0x7265706f
    e1b4:	6e697461 	.word	0x6e697461
    e1b8:	6e692067 	.word	0x6e692067
    e1bc:	72754220 	.word	0x72754220
    e1c0:	4d207473 	.word	0x4d207473
    e1c4:	2065646f 	.word	0x2065646f
    e1c8:	4d363928 	.word	0x4d363928
    e1cc:	0a297a48 	.word	0x0a297a48
    e1d0:	00000000 	.word	0x00000000
    e1d4:	6c696146 	.word	0x6c696146
    e1d8:	74206465 	.word	0x74206465
    e1dc:	6e45206f 	.word	0x6e45206f
    e1e0:	656c6261 	.word	0x656c6261
    e1e4:	72754220 	.word	0x72754220
    e1e8:	4d207473 	.word	0x4d207473
    e1ec:	2065646f 	.word	0x2065646f
    e1f0:	7265706f 	.word	0x7265706f
    e1f4:	6f697461 	.word	0x6f697461
    e1f8:	00000a6e 	.word	0x00000a6e
    e1fc:	6174530a 	.word	0x6174530a
    e200:	64657472 	.word	0x64657472
    e204:	6c616320 	.word	0x6c616320
    e208:	616c7563 	.word	0x616c7563
    e20c:	676e6974 	.word	0x676e6974
    e210:	69727020 	.word	0x69727020
    e214:	2073656d 	.word	0x2073656d
    e218:	42206e69 	.word	0x42206e69
    e21c:	74737275 	.word	0x74737275
    e220:	646f4d20 	.word	0x646f4d20
    e224:	00000a65 	.word	0x00000a65
    e228:	6c6f7041 	.word	0x6c6f7041
    e22c:	20336f6c 	.word	0x20336f6c
    e230:	6c696166 	.word	0x6c696166
    e234:	74206465 	.word	0x74206465
    e238:	6572206f 	.word	0x6572206f
    e23c:	6e727574 	.word	0x6e727574
    e240:	206f7420 	.word	0x206f7420
    e244:	6d726f4e 	.word	0x6d726f4e
    e248:	4d206c61 	.word	0x4d206c61
    e24c:	2065646f 	.word	0x2065646f
    e250:	4d383428 	.word	0x4d383428
    e254:	0a297a48 	.word	0x0a297a48
    e258:	00000000 	.word	0x00000000
    e25c:	73727542 	.word	0x73727542
    e260:	6f4d2074 	.word	0x6f4d2074
    e264:	44206564 	.word	0x44206564
    e268:	61746c65 	.word	0x61746c65
    e26c:	6425203a 	.word	0x6425203a
    e270:	0000000a 	.word	0x0000000a
    e274:	64726148 	.word	0x64726148
    e278:	75614620 	.word	0x75614620
    e27c:	7320746c 	.word	0x7320746c
    e280:	6b636174 	.word	0x6b636174
    e284:	64206465 	.word	0x64206465
    e288:	3a617461 	.word	0x3a617461
    e28c:	0000000a 	.word	0x0000000a
    e290:	20202020 	.word	0x20202020
    e294:	20203052 	.word	0x20203052
    e298:	7830203d 	.word	0x7830203d
    e29c:	58383025 	.word	0x58383025
    e2a0:	0000000a 	.word	0x0000000a
    e2a4:	20202020 	.word	0x20202020
    e2a8:	20203152 	.word	0x20203152
    e2ac:	7830203d 	.word	0x7830203d
    e2b0:	58383025 	.word	0x58383025
    e2b4:	0000000a 	.word	0x0000000a
    e2b8:	20202020 	.word	0x20202020
    e2bc:	20203252 	.word	0x20203252
    e2c0:	7830203d 	.word	0x7830203d
    e2c4:	58383025 	.word	0x58383025
    e2c8:	0000000a 	.word	0x0000000a
    e2cc:	20202020 	.word	0x20202020
    e2d0:	20203352 	.word	0x20203352
    e2d4:	7830203d 	.word	0x7830203d
    e2d8:	58383025 	.word	0x58383025
    e2dc:	0000000a 	.word	0x0000000a
    e2e0:	20202020 	.word	0x20202020
    e2e4:	20323152 	.word	0x20323152
    e2e8:	7830203d 	.word	0x7830203d
    e2ec:	58383025 	.word	0x58383025
    e2f0:	0000000a 	.word	0x0000000a
    e2f4:	20202020 	.word	0x20202020
    e2f8:	2020524c 	.word	0x2020524c
    e2fc:	7830203d 	.word	0x7830203d
    e300:	58383025 	.word	0x58383025
    e304:	0000000a 	.word	0x0000000a
    e308:	20202020 	.word	0x20202020
    e30c:	20204350 	.word	0x20204350
    e310:	7830203d 	.word	0x7830203d
    e314:	58383025 	.word	0x58383025
    e318:	0000000a 	.word	0x0000000a
    e31c:	20202020 	.word	0x20202020
    e320:	20525350 	.word	0x20525350
    e324:	7830203d 	.word	0x7830203d
    e328:	58383025 	.word	0x58383025
    e32c:	0000000a 	.word	0x0000000a
    e330:	6568744f 	.word	0x6568744f
    e334:	61482072 	.word	0x61482072
    e338:	46206472 	.word	0x46206472
    e33c:	746c7561 	.word	0x746c7561
    e340:	74616420 	.word	0x74616420
    e344:	000a3a61 	.word	0x000a3a61
    e348:	20202020 	.word	0x20202020
    e34c:	6c756146 	.word	0x6c756146
    e350:	64612074 	.word	0x64612074
    e354:	73657264 	.word	0x73657264
    e358:	203d2073 	.word	0x203d2073
    e35c:	30257830 	.word	0x30257830
    e360:	000a5838 	.word	0x000a5838
    e364:	20202020 	.word	0x20202020
    e368:	52414642 	.word	0x52414642
    e36c:	75422820 	.word	0x75422820
    e370:	61462073 	.word	0x61462073
    e374:	20746c75 	.word	0x20746c75
    e378:	72646441 	.word	0x72646441
    e37c:	67655220 	.word	0x67655220
    e380:	203d2029 	.word	0x203d2029
    e384:	30257830 	.word	0x30257830
    e388:	000a5838 	.word	0x000a5838
    e38c:	20202020 	.word	0x20202020
    e390:	52534d4d 	.word	0x52534d4d
    e394:	654d2820 	.word	0x654d2820
    e398:	674d206d 	.word	0x674d206d
    e39c:	4620746d 	.word	0x4620746d
    e3a0:	746c7561 	.word	0x746c7561
    e3a4:	61745320 	.word	0x61745320
    e3a8:	20737574 	.word	0x20737574
    e3ac:	29676552 	.word	0x29676552
    e3b0:	30203d20 	.word	0x30203d20
    e3b4:	32302578 	.word	0x32302578
    e3b8:	00000a58 	.word	0x00000a58
    e3bc:	20202020 	.word	0x20202020
    e3c0:	52534642 	.word	0x52534642
    e3c4:	75422820 	.word	0x75422820
    e3c8:	61462073 	.word	0x61462073
    e3cc:	20746c75 	.word	0x20746c75
    e3d0:	74617453 	.word	0x74617453
    e3d4:	52207375 	.word	0x52207375
    e3d8:	20296765 	.word	0x20296765
    e3dc:	7830203d 	.word	0x7830203d
    e3e0:	58323025 	.word	0x58323025
    e3e4:	0000000a 	.word	0x0000000a
    e3e8:	20202020 	.word	0x20202020
    e3ec:	52534655 	.word	0x52534655
    e3f0:	73552820 	.word	0x73552820
    e3f4:	20656761 	.word	0x20656761
    e3f8:	6c756146 	.word	0x6c756146
    e3fc:	74532074 	.word	0x74532074
    e400:	73757461 	.word	0x73757461
    e404:	67655220 	.word	0x67655220
    e408:	203d2029 	.word	0x203d2029
    e40c:	30257830 	.word	0x30257830
    e410:	000a5834 	.word	0x000a5834
    e414:	20202020 	.word	0x20202020
    e418:	20202020 	.word	0x20202020
    e41c:	52534642 	.word	0x52534642
    e420:	74696220 	.word	0x74696220
    e424:	42203a37 	.word	0x42203a37
    e428:	56524146 	.word	0x56524146
    e42c:	44494c41 	.word	0x44494c41
    e430:	0000000a 	.word	0x0000000a
    e434:	20202020 	.word	0x20202020
    e438:	20202020 	.word	0x20202020
    e43c:	52534642 	.word	0x52534642
    e440:	74696220 	.word	0x74696220
    e444:	52203a36 	.word	0x52203a36
    e448:	52455345 	.word	0x52455345
    e44c:	0a444556 	.word	0x0a444556
    e450:	00000000 	.word	0x00000000
    e454:	20202020 	.word	0x20202020
    e458:	20202020 	.word	0x20202020
    e45c:	52534642 	.word	0x52534642
    e460:	74696220 	.word	0x74696220
    e464:	4c203a35 	.word	0x4c203a35
    e468:	52455053 	.word	0x52455053
    e46c:	00000a52 	.word	0x00000a52
    e470:	20202020 	.word	0x20202020
    e474:	20202020 	.word	0x20202020
    e478:	52534642 	.word	0x52534642
    e47c:	74696220 	.word	0x74696220
    e480:	53203a34 	.word	0x53203a34
    e484:	52454b54 	.word	0x52454b54
    e488:	00000a52 	.word	0x00000a52
    e48c:	20202020 	.word	0x20202020
    e490:	20202020 	.word	0x20202020
    e494:	52534642 	.word	0x52534642
    e498:	74696220 	.word	0x74696220
    e49c:	55203a33 	.word	0x55203a33
    e4a0:	4b54534e 	.word	0x4b54534e
    e4a4:	0a525245 	.word	0x0a525245
    e4a8:	00000000 	.word	0x00000000
    e4ac:	20202020 	.word	0x20202020
    e4b0:	20202020 	.word	0x20202020
    e4b4:	52534642 	.word	0x52534642
    e4b8:	74696220 	.word	0x74696220
    e4bc:	49203a32 	.word	0x49203a32
    e4c0:	4552504d 	.word	0x4552504d
    e4c4:	45534943 	.word	0x45534943
    e4c8:	000a5252 	.word	0x000a5252
    e4cc:	20202020 	.word	0x20202020
    e4d0:	20202020 	.word	0x20202020
    e4d4:	52534642 	.word	0x52534642
    e4d8:	74696220 	.word	0x74696220
    e4dc:	50203a31 	.word	0x50203a31
    e4e0:	49434552 	.word	0x49434552
    e4e4:	52454553 	.word	0x52454553
    e4e8:	00000a52 	.word	0x00000a52
    e4ec:	20202020 	.word	0x20202020
    e4f0:	20202020 	.word	0x20202020
    e4f4:	52534642 	.word	0x52534642
    e4f8:	74696220 	.word	0x74696220
    e4fc:	49203a30 	.word	0x49203a30
    e500:	45535542 	.word	0x45535542
    e504:	000a5252 	.word	0x000a5252
    e508:	6c6f7041 	.word	0x6c6f7041
    e50c:	20326f6c 	.word	0x20326f6c
    e510:	6c756146 	.word	0x6c756146
    e514:	61642074 	.word	0x61642074
    e518:	0a3a6174 	.word	0x0a3a6174
    e51c:	00000000 	.word	0x00000000
    e520:	49202020 	.word	0x49202020
    e524:	45444f43 	.word	0x45444f43
    e528:	75614620 	.word	0x75614620
    e52c:	4120746c 	.word	0x4120746c
    e530:	65726464 	.word	0x65726464
    e534:	203a7373 	.word	0x203a7373
    e538:	30257830 	.word	0x30257830
    e53c:	000a5838 	.word	0x000a5838
    e540:	44202020 	.word	0x44202020
    e544:	45444f43 	.word	0x45444f43
    e548:	75614620 	.word	0x75614620
    e54c:	4120746c 	.word	0x4120746c
    e550:	65726464 	.word	0x65726464
    e554:	203a7373 	.word	0x203a7373
    e558:	30257830 	.word	0x30257830
    e55c:	000a5838 	.word	0x000a5838
    e560:	53202020 	.word	0x53202020
    e564:	46205359 	.word	0x46205359
    e568:	746c7561 	.word	0x746c7561
    e56c:	64644120 	.word	0x64644120
    e570:	73736572 	.word	0x73736572
    e574:	7830203a 	.word	0x7830203a
    e578:	58383025 	.word	0x58383025
    e57c:	0000000a 	.word	0x0000000a
    e580:	0a0a0a0a 	.word	0x0a0a0a0a
    e584:	0a0a0a0a 	.word	0x0a0a0a0a
    e588:	0a0a0a0a 	.word	0x0a0a0a0a
    e58c:	0a0a0a0a 	.word	0x0a0a0a0a
    e590:	00000a0a 	.word	0x00000a0a

0000e594 <g_AM_BSP_GPIO_ITM_SWO>:
    e594:	00000002                                ....

0000e598 <am_hal_cachectrl_defaults>:
    e598:	00000308                                ....

0000e59c <g_AM_HAL_GPIO_DISABLE>:
    e59c:	00000003                                ....

0000e5a0 <g_AM_HAL_GPIO_OUTPUT>:
    e5a0:	00000403                                ....

0000e5a4 <g_ui8Bit76Capabilities>:
    e5a4:	02800101 80010180 80800101 80808080     ................
    e5b4:	80808080 80808008 01800180 80808080     ................
    e5c4:	80808080 01800402 01010401 80808080     ................
    e5d4:	00000101                                ....

0000e5d8 <g_ui8Inpen>:
    e5d8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e5e8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e5f8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e608:	00003130                                01..

0000e60c <g_ui8NCEtable>:
    e60c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e61c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e62c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e63c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e64c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e65c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e66c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e67c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e68c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e69c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e6ac:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e6bc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e6cc:	32221202 43231303                       .."2..#C

0000e6d4 <g_ui8nCEpins>:
    e6d4:	02070707 00080802 01020202 01010101     ................
    e6e4:	01010101 01010101 01010101 01010101     ................
    e6f4:	01010101 08010101 01010008 01010101     ................
    e704:	00000101                                ....

0000e708 <g_am_hal_mcuctrl_flash_size>:
    e708:	00004000 00008000 00010000 00020000     .@..............
    e718:	00040000 00080000 00100000 00200000     .............. .
	...

0000e748 <g_am_hal_mcuctrl_sram_size>:
    e748:	00004000 00008000 00010000 00020000     .@..............
    e758:	00040000 00080000 00100000 00060000     ................
	...
