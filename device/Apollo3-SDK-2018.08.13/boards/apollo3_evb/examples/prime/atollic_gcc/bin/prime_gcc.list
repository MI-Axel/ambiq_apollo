
prime_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b94  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000fb94  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001d8  10001028  0000fbbc  00011028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0001d30b  00000000  00000000  0001105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002fb3  00000000  00000000  0002e36a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000099f2  00000000  00000000  0003131d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000628  00000000  00000000  0003ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001758  00000000  00000000  0003b337  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005d49  00000000  00000000  0003ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009d9f  00000000  00000000  000427d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  0004c577  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000010b0  00000000  00000000  0004c5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 c9 c3 00 00 c1 c3 00 00 31 c4 00 00     ............1...
    c010:	31 c4 00 00 31 c4 00 00 31 c4 00 00 00 00 00 00     1...1...1.......
	...
    c02c:	c5 c3 00 00 c5 c3 00 00 00 00 00 00 c5 c3 00 00     ................
    c03c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c04c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c05c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c06c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c07c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c08c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c09c:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c0ac:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c0bc:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 c5 c3 00 00     ................
    c0cc:	c5 c3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:

    //
    // Set the clock frequency.
    //
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a0:	2100      	movs	r1, #0
{
    c1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a4:	4608      	mov	r0, r1
    c1a6:	f001 fc9b 	bl	dae0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
#if AM_APOLLO3_CACHECTRL
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1aa:	4829      	ldr	r0, [pc, #164]	; (c250 <main+0xb0>)
    PWRCTRL->DEVPWREN = 0;
    c1ac:	4d29      	ldr	r5, [pc, #164]	; (c254 <main+0xb4>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ae:	4606      	mov	r6, r0
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b0:	f001 fc62 	bl	da78 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b4:	f001 fc8a 	bl	dacc <am_hal_cachectrl_enable>
#endif

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1b8:	f001 fbde 	bl	d978 <am_bsp_low_power_init>

#if (PRINT_UART == 1)
    am_bsp_uart_printf_enable();
    c1bc:	f001 fc0e 	bl	d9dc <am_bsp_uart_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c1c0:	f001 fbb0 	bl	d924 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro 'prime' example.\n\n");
    c1c4:	4824      	ldr	r0, [pc, #144]	; (c258 <main+0xb8>)
    c1c6:	f001 fb93 	bl	d8f0 <am_util_stdio_printf>

    //
    // Brief description
    //
    am_util_stdio_printf("Used for measuring power while computing the number of prime numbers in a range.\n");
    c1ca:	4824      	ldr	r0, [pc, #144]	; (c25c <main+0xbc>)
    c1cc:	f001 fb90 	bl	d8f0 <am_util_stdio_printf>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c1d0:	4923      	ldr	r1, [pc, #140]	; (c260 <main+0xc0>)
    c1d2:	4824      	ldr	r0, [pc, #144]	; (c264 <main+0xc4>)
    c1d4:	f001 fb8c 	bl	d8f0 <am_util_stdio_printf>
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c1d8:	4923      	ldr	r1, [pc, #140]	; (c268 <main+0xc8>)
    c1da:	4824      	ldr	r0, [pc, #144]	; (c26c <main+0xcc>)
    c1dc:	f001 fb88 	bl	d8f0 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
                         g_ui32HALversion.s.Minor,
                         g_ui32HALversion.s.Revision);
    c1e0:	4923      	ldr	r1, [pc, #140]	; (c270 <main+0xd0>)
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c1e2:	4824      	ldr	r0, [pc, #144]	; (c274 <main+0xd4>)
    c1e4:	784b      	ldrb	r3, [r1, #1]
    c1e6:	788a      	ldrb	r2, [r1, #2]
    c1e8:	78c9      	ldrb	r1, [r1, #3]
    c1ea:	f001 fb81 	bl	d8f0 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(10000));
    c1ee:	4822      	ldr	r0, [pc, #136]	; (c278 <main+0xd8>)
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c1f0:	4f22      	ldr	r7, [pc, #136]	; (c27c <main+0xdc>)
    am_hal_flash_delay(FLASH_CYCLES_US(10000));
    c1f2:	f001 fcd1 	bl	db98 <am_hal_flash_delay>
    am_bsp_uart_printf_disable();
    c1f6:	f001 fc1f 	bl	da38 <am_bsp_uart_printf_disable>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1fa:	4630      	mov	r0, r6
    c1fc:	f001 fc3c 	bl	da78 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c200:	f001 fc64 	bl	dacc <am_hal_cachectrl_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K);
    c204:	200e      	movs	r0, #14
    c206:	f002 f8c7 	bl	e398 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_8K_DTCM);
    c20a:	2001      	movs	r0, #1
    c20c:	f002 f8c4 	bl	e398 <am_hal_pwrctrl_memory_enable>
    CLKGEN->OCTRL_b.OSEL = 1;
    c210:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c214:	f04f 0e37 	mov.w	lr, #55	; 0x37
    CLKGEN->OCTRL_b.OSEL = 1;
    c218:	8993      	ldrh	r3, [r2, #12]
        set_for_min_power();

        //
        // Determine the number of primes for the given value.
        //
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    c21a:	4819      	ldr	r0, [pc, #100]	; (c280 <main+0xe0>)
    CLKGEN->OCTRL_b.OSEL = 1;
    c21c:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    PWRCTRL->DEVPWREN = 0;
    c220:	2400      	movs	r4, #0
    CLKGEN->OCTRL_b.OSEL = 1;
    c222:	8191      	strh	r1, [r2, #12]
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c224:	f8c7 e008 	str.w	lr, [r7, #8]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    c228:	4621      	mov	r1, r4
    c22a:	2201      	movs	r2, #1
    PWRCTRL->DEVPWREN = 0;
    c22c:	60ac      	str	r4, [r5, #8]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    c22e:	f000 f82d 	bl	c28c <prime_number>
    c232:	4607      	mov	r7, r0

#if (PRINT_UART == 1)
        //
        // Print the result
        //
        am_bsp_uart_printf_enable();
    c234:	f001 fbd2 	bl	d9dc <am_bsp_uart_printf_enable>

        if ( ui32Result == EXP_PRIMES )
    c238:	f242 5078 	movw	r0, #9592	; 0x2578
    c23c:	4287      	cmp	r7, r0
        {
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
        }
        else
        {
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c23e:	463a      	mov	r2, r7
    c240:	490f      	ldr	r1, [pc, #60]	; (c280 <main+0xe0>)
    c242:	4810      	ldr	r0, [pc, #64]	; (c284 <main+0xe4>)
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c244:	bf08      	it	eq
    c246:	4810      	ldreq	r0, [pc, #64]	; (c288 <main+0xe8>)
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    c248:	f001 fb52 	bl	d8f0 <am_util_stdio_printf>
    c24c:	e7cf      	b.n	c1ee <main+0x4e>
    c24e:	bf00      	nop
    c250:	0000f73c 	.word	0x0000f73c
    c254:	40021000 	.word	0x40021000
    c258:	0000f598 	.word	0x0000f598
    c25c:	0000f5b8 	.word	0x0000f5b8
    c260:	0000f60c 	.word	0x0000f60c
    c264:	0000f654 	.word	0x0000f654
    c268:	0000f744 	.word	0x0000f744
    c26c:	0000f66c 	.word	0x0000f66c
    c270:	0000f740 	.word	0x0000f740
    c274:	0000f684 	.word	0x0000f684
    c278:	000270d7 	.word	0x000270d7
    c27c:	4000c000 	.word	0x4000c000
    c280:	000186a0 	.word	0x000186a0
    c284:	0000f6c8 	.word	0x0000f6c8
    c288:	0000f6a0 	.word	0x0000f6a0

0000c28c <prime_number>:
  int prime;
  int total;

  total = 0;

  for ( i = 2 + id; i <= n; i = i + p )
    c28c:	3102      	adds	r1, #2
    c28e:	4281      	cmp	r1, r0
    c290:	f300 8093 	bgt.w	c3ba <prime_number+0x12e>
{
    c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for ( i = 2 + id; i <= n; i = i + p )
    c298:	f04f 0c00 	mov.w	ip, #0
  {
    prime = 1;
    for ( j = 2; j < i; j++ )
    c29c:	2902      	cmp	r1, #2
    c29e:	f340 8089 	ble.w	c3b4 <prime_number+0x128>
    {
      if ( ( i % j ) == 0 )
    c2a2:	f011 0e01 	ands.w	lr, r1, #1
    c2a6:	d07d      	beq.n	c3a4 <prime_number+0x118>
    c2a8:	1ecc      	subs	r4, r1, #3
    c2aa:	f014 0607 	ands.w	r6, r4, #7
    c2ae:	f04f 0302 	mov.w	r3, #2
    c2b2:	d03b      	beq.n	c32c <prime_number+0xa0>
    for ( j = 2; j < i; j++ )
    c2b4:	2303      	movs	r3, #3
      if ( ( i % j ) == 0 )
    c2b6:	fb91 f5f3 	sdiv	r5, r1, r3
    c2ba:	fb03 1715 	mls	r7, r3, r5, r1
    c2be:	2f00      	cmp	r7, #0
    c2c0:	d06e      	beq.n	c3a0 <prime_number+0x114>
    c2c2:	2e01      	cmp	r6, #1
    c2c4:	d032      	beq.n	c32c <prime_number+0xa0>
    c2c6:	2e02      	cmp	r6, #2
    c2c8:	d02a      	beq.n	c320 <prime_number+0x94>
    c2ca:	429e      	cmp	r6, r3
    c2cc:	d021      	beq.n	c312 <prime_number+0x86>
    c2ce:	2e04      	cmp	r6, #4
    c2d0:	d018      	beq.n	c304 <prime_number+0x78>
    c2d2:	2e05      	cmp	r6, #5
    c2d4:	d00f      	beq.n	c2f6 <prime_number+0x6a>
    c2d6:	2e06      	cmp	r6, #6
    c2d8:	d006      	beq.n	c2e8 <prime_number+0x5c>
    for ( j = 2; j < i; j++ )
    c2da:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c2dc:	fb91 f8f3 	sdiv	r8, r1, r3
    c2e0:	fb03 1418 	mls	r4, r3, r8, r1
    c2e4:	2c00      	cmp	r4, #0
    c2e6:	d05b      	beq.n	c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c2e8:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c2ea:	fb91 f6f3 	sdiv	r6, r1, r3
    c2ee:	fb03 1516 	mls	r5, r3, r6, r1
    c2f2:	2d00      	cmp	r5, #0
    c2f4:	d054      	beq.n	c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c2f6:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c2f8:	fb91 f7f3 	sdiv	r7, r1, r3
    c2fc:	fb03 1417 	mls	r4, r3, r7, r1
    c300:	2c00      	cmp	r4, #0
    c302:	d04d      	beq.n	c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c304:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c306:	fb91 f6f3 	sdiv	r6, r1, r3
    c30a:	fb03 1516 	mls	r5, r3, r6, r1
    c30e:	2d00      	cmp	r5, #0
    c310:	d046      	beq.n	c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c312:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c314:	fb91 f7f3 	sdiv	r7, r1, r3
    c318:	fb03 1417 	mls	r4, r3, r7, r1
    c31c:	2c00      	cmp	r4, #0
    c31e:	d03f      	beq.n	c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c320:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    c322:	fb91 f6f3 	sdiv	r6, r1, r3
    c326:	fb03 1516 	mls	r5, r3, r6, r1
    c32a:	b3cd      	cbz	r5, c3a0 <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    c32c:	1c5c      	adds	r4, r3, #1
    c32e:	428c      	cmp	r4, r1
    c330:	f103 0603 	add.w	r6, r3, #3
    c334:	f103 0704 	add.w	r7, r3, #4
    c338:	f103 0805 	add.w	r8, r3, #5
    c33c:	f103 0906 	add.w	r9, r3, #6
    c340:	f103 0a07 	add.w	sl, r3, #7
    c344:	f104 0501 	add.w	r5, r4, #1
    c348:	f103 0308 	add.w	r3, r3, #8
    c34c:	d02a      	beq.n	c3a4 <prime_number+0x118>
      if ( ( i % j ) == 0 )
    c34e:	fb91 fbf4 	sdiv	fp, r1, r4
    c352:	fb04 141b 	mls	r4, r4, fp, r1
    c356:	b31c      	cbz	r4, c3a0 <prime_number+0x114>
    c358:	fb91 fbf5 	sdiv	fp, r1, r5
    c35c:	fb05 151b 	mls	r5, r5, fp, r1
    c360:	b1f5      	cbz	r5, c3a0 <prime_number+0x114>
    c362:	fb91 f4f6 	sdiv	r4, r1, r6
    c366:	fb06 1614 	mls	r6, r6, r4, r1
    c36a:	b1ce      	cbz	r6, c3a0 <prime_number+0x114>
    c36c:	fb91 f5f7 	sdiv	r5, r1, r7
    c370:	fb07 1715 	mls	r7, r7, r5, r1
    c374:	b1a7      	cbz	r7, c3a0 <prime_number+0x114>
    c376:	fb91 fbf8 	sdiv	fp, r1, r8
    c37a:	fb08 141b 	mls	r4, r8, fp, r1
    c37e:	b17c      	cbz	r4, c3a0 <prime_number+0x114>
    c380:	fb91 f6f9 	sdiv	r6, r1, r9
    c384:	fb09 1516 	mls	r5, r9, r6, r1
    c388:	b155      	cbz	r5, c3a0 <prime_number+0x114>
    c38a:	fb91 f7fa 	sdiv	r7, r1, sl
    c38e:	fb0a 1417 	mls	r4, sl, r7, r1
    c392:	b12c      	cbz	r4, c3a0 <prime_number+0x114>
    c394:	fb91 f6f3 	sdiv	r6, r1, r3
    c398:	fb03 1516 	mls	r5, r3, r6, r1
    c39c:	2d00      	cmp	r5, #0
    c39e:	d1c5      	bne.n	c32c <prime_number+0xa0>
      {
        prime = 0;
    c3a0:	f04f 0e00 	mov.w	lr, #0
  for ( i = 2 + id; i <= n; i = i + p )
    c3a4:	4411      	add	r1, r2
    c3a6:	4288      	cmp	r0, r1
        break;
      }
    }
    total = total + prime;
    c3a8:	44f4      	add	ip, lr
  for ( i = 2 + id; i <= n; i = i + p )
    c3aa:	f6bf af77 	bge.w	c29c <prime_number+0x10>
  }
  return total;
}
    c3ae:	4660      	mov	r0, ip
    c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    prime = 1;
    c3b4:	f04f 0e01 	mov.w	lr, #1
    c3b8:	e7f4      	b.n	c3a4 <prime_number+0x118>
  total = 0;
    c3ba:	2000      	movs	r0, #0
}
    c3bc:	4770      	bx	lr
    c3be:	bf00      	nop

0000c3c0 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c3c0:	e7fe      	b.n	c3c0 <NMI_Handler>
    c3c2:	bf00      	nop

0000c3c4 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c3c4:	e7fe      	b.n	c3c4 <DebugMon_Handler>
    c3c6:	bf00      	nop

0000c3c8 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    c3c8:	4811      	ldr	r0, [pc, #68]	; (c410 <zero_loop+0x12>)
    c3ca:	4912      	ldr	r1, [pc, #72]	; (c414 <zero_loop+0x16>)
    c3cc:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    c3ce:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    c3d2:	4811      	ldr	r0, [pc, #68]	; (c418 <zero_loop+0x1a>)
    c3d4:	6801      	ldr	r1, [r0, #0]
    c3d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c3da:	6001      	str	r1, [r0, #0]
    c3dc:	f3bf 8f4f 	dsb	sy
    c3e0:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    c3e4:	480d      	ldr	r0, [pc, #52]	; (c41c <zero_loop+0x1e>)
    c3e6:	490e      	ldr	r1, [pc, #56]	; (c420 <zero_loop+0x22>)
    c3e8:	4a0e      	ldr	r2, [pc, #56]	; (c424 <zero_loop+0x26>)

0000c3ea <copy_loop>:
    c3ea:	f850 3b04 	ldr.w	r3, [r0], #4
    c3ee:	f841 3b04 	str.w	r3, [r1], #4
    c3f2:	4291      	cmp	r1, r2
    c3f4:	dbf9      	blt.n	c3ea <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    c3f6:	480c      	ldr	r0, [pc, #48]	; (c428 <zero_loop+0x2a>)
    c3f8:	490c      	ldr	r1, [pc, #48]	; (c42c <zero_loop+0x2e>)
    c3fa:	f04f 0200 	mov.w	r2, #0

0000c3fe <zero_loop>:
    c3fe:	4288      	cmp	r0, r1
    c400:	bfb8      	it	lt
    c402:	f840 2b04 	strlt.w	r2, [r0], #4
    c406:	dbfa      	blt.n	c3fe <zero_loop>
    main();
    c408:	f7ff feca 	bl	c1a0 <main>
    __asm("    bkpt     ");
    c40c:	be00      	bkpt	0x0000
    c40e:	0000      	.short	0x0000
    c410:	e000ed08 	.word	0xe000ed08
    c414:	0000c000 	.word	0x0000c000
    c418:	e000ed88 	.word	0xe000ed88
    c41c:	0000fb94 	.word	0x0000fb94
    c420:	10001000 	.word	0x10001000
    c424:	10001028 	.word	0x10001028
    c428:	10001028 	.word	0x10001028
    c42c:	10001200 	.word	0x10001200

0000c430 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c430:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c432:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c434:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c436:	f000 f805 	bl	c444 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c43a:	bd01      	pop	{r0, pc}

0000c43c <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c43c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c43e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c440:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c442:	4770      	bx	lr

0000c444 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c444:	b500      	push	{lr}
    c446:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c448:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c44a:	4a2e      	ldr	r2, [pc, #184]	; (c504 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c44c:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c44e:	9301      	str	r3, [sp, #4]
    c450:	9300      	str	r3, [sp, #0]
    c452:	9302      	str	r3, [sp, #8]
    c454:	9303      	str	r3, [sp, #12]
    c456:	9304      	str	r3, [sp, #16]
    c458:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c45a:	6811      	ldr	r1, [r2, #0]
    c45c:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c45e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c460:	b2d9      	uxtb	r1, r3
    c462:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c466:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c468:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c46c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c470:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c472:	0c19      	lsrs	r1, r3, #16
    c474:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c478:	6912      	ldr	r2, [r2, #16]
    c47a:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c47c:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    c480:	078a      	lsls	r2, r1, #30
{
    c482:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c484:	d437      	bmi.n	c4f6 <am_util_faultisr_collect_data+0xb2>
    c486:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c48a:	4619      	mov	r1, r3
    c48c:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c48e:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c490:	f7ff ffd4 	bl	c43c <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c494:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c496:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c498:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c49a:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c49c:	f7ff ffce 	bl	c43c <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4a0:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4a2:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4a4:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4a6:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4a8:	f7ff ffc8 	bl	c43c <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4ac:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4ae:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4b0:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4b2:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4b4:	f7ff ffc2 	bl	c43c <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4b8:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4ba:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4bc:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4be:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4c0:	f7ff ffbc 	bl	c43c <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4c4:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4c6:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4c8:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4ca:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4cc:	f7ff ffb6 	bl	c43c <getStackedReg>
    c4d0:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4d2:	4619      	mov	r1, r3
    c4d4:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4d6:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4d8:	f7ff ffb0 	bl	c43c <getStackedReg>
    c4dc:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4de:	4619      	mov	r1, r3
    c4e0:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4e2:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4e4:	f7ff ffaa 	bl	c43c <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4e8:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4ea:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4ec:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4ee:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4f0:	f001 fe64 	bl	e1bc <am_hal_mcuctrl_info_get>
    c4f4:	e7fe      	b.n	c4f4 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c4f6:	4601      	mov	r1, r0
    c4f8:	2006      	movs	r0, #6
    c4fa:	f7ff ff9f 	bl	c43c <getStackedReg>
    c4fe:	4602      	mov	r2, r0
    c500:	e7c3      	b.n	c48a <am_util_faultisr_collect_data+0x46>
    c502:	bf00      	nop
    c504:	e000ed28 	.word	0xe000ed28

0000c508 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c50c:	b095      	sub	sp, #84	; 0x54
    c50e:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    c512:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c514:	2001      	movs	r0, #1
{
    c516:	460d      	mov	r5, r1
    c518:	920b      	str	r2, [sp, #44]	; 0x2c
    c51a:	46f4      	mov	ip, lr
    c51c:	900a      	str	r0, [sp, #40]	; 0x28
    c51e:	e00b      	b.n	c538 <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
    c520:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c524:	4604      	mov	r4, r0
    c526:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c528:	2800      	cmp	r0, #0
    c52a:	f000 8083 	beq.w	c634 <uint64_to_str+0x12c>
    c52e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c530:	3101      	adds	r1, #1
    c532:	910a      	str	r1, [sp, #40]	; 0x28
    c534:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c538:	08a3      	lsrs	r3, r4, #2
    c53a:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    c53e:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    c542:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c546:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    c54a:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c54c:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
    c54e:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c552:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    c556:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
    c55a:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
    c55c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
    c560:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
    c562:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
    c566:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
    c56a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
    c56e:	d0d7      	beq.n	c520 <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c570:	08a0      	lsrs	r0, r4, #2
    c572:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    c576:	08ae      	lsrs	r6, r5, #2
    c578:	9304      	str	r3, [sp, #16]
    c57a:	9605      	str	r6, [sp, #20]
    c57c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c580:	086b      	lsrs	r3, r5, #1
    c582:	ea4f 0234 	mov.w	r2, r4, rrx
    c586:	1882      	adds	r2, r0, r2
    c588:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
    c58c:	0911      	lsrs	r1, r2, #4
    c58e:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
    c592:	1812      	adds	r2, r2, r0
    c594:	ea4f 1613 	mov.w	r6, r3, lsr #4
    c598:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
    c59a:	0a11      	lsrs	r1, r2, #8
    c59c:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
    c5a0:	0a1e      	lsrs	r6, r3, #8
    c5a2:	9601      	str	r6, [sp, #4]
    c5a4:	9000      	str	r0, [sp, #0]
    c5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
    c5aa:	1882      	adds	r2, r0, r2
    c5ac:	4616      	mov	r6, r2
    c5ae:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
    c5b2:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
    c5b4:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
    c5b6:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
    c5ba:	0c1b      	lsrs	r3, r3, #16
    c5bc:	9303      	str	r3, [sp, #12]
    c5be:	9002      	str	r0, [sp, #8]
    c5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c5c4:	eb10 0806 	adds.w	r8, r0, r6
    c5c8:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
    c5cc:	9308      	str	r3, [sp, #32]
    c5ce:	9709      	str	r7, [sp, #36]	; 0x24
    c5d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c5d4:	eb10 0208 	adds.w	r2, r0, r8
    c5d8:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
    c5dc:	08d1      	lsrs	r1, r2, #3
    c5de:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
    c5e2:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
    c5e4:	00b8      	lsls	r0, r7, #2
    c5e6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
    c5ea:	eb1a 0906 	adds.w	r9, sl, r6
    c5ee:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
    c5f2:	eb48 0307 	adc.w	r3, r8, r7
    c5f6:	eb19 0209 	adds.w	r2, r9, r9
    c5fa:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    c5fc:	f114 0b06 	adds.w	fp, r4, #6
    c600:	f145 0500 	adc.w	r5, r5, #0
    c604:	ebbb 0202 	subs.w	r2, fp, r2
    c608:	eb65 0303 	sbc.w	r3, r5, r3
    c60c:	0915      	lsrs	r5, r2, #4
    c60e:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
    c612:	091b      	lsrs	r3, r3, #4
    c614:	9206      	str	r2, [sp, #24]
    c616:	9307      	str	r3, [sp, #28]
    c618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    c61c:	1996      	adds	r6, r2, r6
    c61e:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
    c622:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    c626:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    c62a:	3430      	adds	r4, #48	; 0x30
    c62c:	f88c 4000 	strb.w	r4, [ip]
    c630:	4634      	mov	r4, r6
    c632:	e77c      	b.n	c52e <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c634:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c636:	980a      	ldr	r0, [sp, #40]	; 0x28
    c638:	2e00      	cmp	r6, #0
    c63a:	d059      	beq.n	c6f0 <uint64_to_str+0x1e8>
    c63c:	eb0e 0a00 	add.w	sl, lr, r0
    c640:	46d3      	mov	fp, sl
    c642:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c646:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c64a:	7037      	strb	r7, [r6, #0]
    c64c:	44d4      	add	ip, sl
        while ( ix-- )
    c64e:	45de      	cmp	lr, fp
    c650:	4632      	mov	r2, r6
    c652:	f00c 0107 	and.w	r1, ip, #7
    c656:	bf08      	it	eq
    c658:	4632      	moveq	r2, r6
    c65a:	d047      	beq.n	c6ec <uint64_to_str+0x1e4>
    c65c:	b349      	cbz	r1, c6b2 <uint64_to_str+0x1aa>
    c65e:	2901      	cmp	r1, #1
    c660:	d021      	beq.n	c6a6 <uint64_to_str+0x19e>
    c662:	2902      	cmp	r1, #2
    c664:	d01b      	beq.n	c69e <uint64_to_str+0x196>
    c666:	2903      	cmp	r1, #3
    c668:	d015      	beq.n	c696 <uint64_to_str+0x18e>
    c66a:	2904      	cmp	r1, #4
    c66c:	d00f      	beq.n	c68e <uint64_to_str+0x186>
    c66e:	2905      	cmp	r1, #5
    c670:	d009      	beq.n	c686 <uint64_to_str+0x17e>
    c672:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
    c674:	bf1c      	itt	ne
    c676:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    c67a:	f802 1f01 	strbne.w	r1, [r2, #1]!
    c67e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c682:	f802 3f01 	strb.w	r3, [r2, #1]!
    c686:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    c68a:	f802 6f01 	strb.w	r6, [r2, #1]!
    c68e:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    c692:	f802 4f01 	strb.w	r4, [r2, #1]!
    c696:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c69a:	f802 7f01 	strb.w	r7, [r2, #1]!
    c69e:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    c6a2:	f802 5f01 	strb.w	r5, [r2, #1]!
    c6a6:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    c6aa:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
    c6ae:	45de      	cmp	lr, fp
    c6b0:	d01b      	beq.n	c6ea <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
    c6b2:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    c6b6:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    c6ba:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    c6be:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    c6c2:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    c6c6:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    c6ca:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    c6ce:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    c6d2:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
    c6d4:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
    c6d6:	7093      	strb	r3, [r2, #2]
    c6d8:	f882 9003 	strb.w	r9, [r2, #3]
    c6dc:	7117      	strb	r7, [r2, #4]
    c6de:	7156      	strb	r6, [r2, #5]
    c6e0:	7195      	strb	r5, [r2, #6]
    c6e2:	71d4      	strb	r4, [r2, #7]
    c6e4:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
    c6e8:	d1e3      	bne.n	c6b2 <uint64_to_str+0x1aa>
    c6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c6ec:	2100      	movs	r1, #0
    c6ee:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    c6f0:	b015      	add	sp, #84	; 0x54
    c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6f6:	bf00      	nop

0000c6f8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c6f8:	4b01      	ldr	r3, [pc, #4]	; (c700 <am_util_stdio_printf_init+0x8>)
    c6fa:	6018      	str	r0, [r3, #0]
    c6fc:	4770      	bx	lr
    c6fe:	bf00      	nop
    c700:	10001134 	.word	0x10001134

0000c704 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c708:	4680      	mov	r8, r0
    c70a:	b0b1      	sub	sp, #196	; 0xc4
    c70c:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c70e:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c712:	780b      	ldrb	r3, [r1, #0]
    c714:	b183      	cbz	r3, c738 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c716:	2b25      	cmp	r3, #37	; 0x25
    c718:	d017      	beq.n	c74a <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c71a:	f1b8 0f00 	cmp.w	r8, #0
    c71e:	d005      	beq.n	c72c <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c720:	2b0a      	cmp	r3, #10
    c722:	d038      	beq.n	c796 <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c724:	f888 3000 	strb.w	r3, [r8]
    c728:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
    c72c:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    c72e:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    c730:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    c734:	2b00      	cmp	r3, #0
    c736:	d1ee      	bne.n	c716 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c738:	f1b8 0f00 	cmp.w	r8, #0
    c73c:	d001      	beq.n	c742 <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    c73e:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
    c742:	4648      	mov	r0, r9
    c744:	b031      	add	sp, #196	; 0xc4
    c746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c74a:	784a      	ldrb	r2, [r1, #1]
    c74c:	2a30      	cmp	r2, #48	; 0x30
    c74e:	d03b      	beq.n	c7c8 <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
    c750:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    c752:	2520      	movs	r5, #32
    if ( *pcStr == '-')
    c754:	2a2d      	cmp	r2, #45	; 0x2d
    c756:	d02c      	beq.n	c7b2 <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c758:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c75c:	2809      	cmp	r0, #9
    c75e:	d837      	bhi.n	c7d0 <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
    c760:	2100      	movs	r1, #0
    bool bNeg = false;
    c762:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c764:	4630      	mov	r0, r6
        bNeg = true;
    c766:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
    c76a:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
    c76e:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c772:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    c776:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c77a:	2c09      	cmp	r4, #9
        ++uCnt;
    c77c:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    c780:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c784:	d9f1      	bls.n	c76a <am_util_stdio_vsprintf+0x66>
    c786:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
    c788:	f1be 0f00 	cmp.w	lr, #0
    c78c:	f041 80a1 	bne.w	d8d2 <am_util_stdio_vsprintf+0x11ce>
    c790:	4664      	mov	r4, ip
    c792:	7832      	ldrb	r2, [r6, #0]
    c794:	e01e      	b.n	c7d4 <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c796:	4ebd      	ldr	r6, [pc, #756]	; (ca8c <am_util_stdio_vsprintf+0x388>)
    c798:	7837      	ldrb	r7, [r6, #0]
    c79a:	2f00      	cmp	r7, #0
    c79c:	d0c2      	beq.n	c724 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    c79e:	f04f 0c0d 	mov.w	ip, #13
    c7a2:	f888 c000 	strb.w	ip, [r8]
    c7a6:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    c7a8:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    c7ac:	f108 0801 	add.w	r8, r8, #1
    c7b0:	e7b8      	b.n	c724 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7b2:	7872      	ldrb	r2, [r6, #1]
    c7b4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c7b8:	2c09      	cmp	r4, #9
        pcStr++;
    c7ba:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7be:	f200 8611 	bhi.w	d3e4 <am_util_stdio_vsprintf+0xce0>
        uCnt++;
    c7c2:	2101      	movs	r1, #1
        bNeg = true;
    c7c4:	468e      	mov	lr, r1
    c7c6:	e7ce      	b.n	c766 <am_util_stdio_vsprintf+0x62>
    c7c8:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    c7ca:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
    c7cc:	2530      	movs	r5, #48	; 0x30
    c7ce:	e7c1      	b.n	c754 <am_util_stdio_vsprintf+0x50>
    c7d0:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7d2:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c7d4:	2a73      	cmp	r2, #115	; 0x73
    c7d6:	f000 8304 	beq.w	cde2 <am_util_stdio_vsprintf+0x6de>
    c7da:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
    c7de:	2a2e      	cmp	r2, #46	; 0x2e
    c7e0:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
    c7e4:	f000 82ae 	beq.w	cd44 <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
    c7e8:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
    c7ec:	2a6c      	cmp	r2, #108	; 0x6c
    c7ee:	f000 82a3 	beq.w	cd38 <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
    c7f2:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    c7f6:	2832      	cmp	r0, #50	; 0x32
    c7f8:	f200 8294 	bhi.w	cd24 <am_util_stdio_vsprintf+0x620>
    c7fc:	e8df f010 	tbh	[pc, r0, lsl #1]
    c800:	02920115 	.word	0x02920115
    c804:	02920292 	.word	0x02920292
    c808:	02920292 	.word	0x02920292
    c80c:	02920292 	.word	0x02920292
    c810:	02920292 	.word	0x02920292
    c814:	02920292 	.word	0x02920292
    c818:	02920292 	.word	0x02920292
    c81c:	02920292 	.word	0x02920292
    c820:	02920292 	.word	0x02920292
    c824:	02920033 	.word	0x02920033
    c828:	02920292 	.word	0x02920292
    c82c:	02920292 	.word	0x02920292
    c830:	02920292 	.word	0x02920292
    c834:	02920292 	.word	0x02920292
    c838:	01360292 	.word	0x01360292
    c83c:	0292014a 	.word	0x0292014a
    c840:	02920115 	.word	0x02920115
    c844:	014a0292 	.word	0x014a0292
    c848:	02920292 	.word	0x02920292
    c84c:	02920292 	.word	0x02920292
    c850:	02920292 	.word	0x02920292
    c854:	02920292 	.word	0x02920292
    c858:	02f00292 	.word	0x02f00292
    c85c:	01f20292 	.word	0x01f20292
    c860:	02920292 	.word	0x02920292
    c864:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
    c866:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c86a:	f8db 2000 	ldr.w	r2, [fp]
    c86e:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
    c870:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    c874:	2c00      	cmp	r4, #0
    c876:	d06d      	beq.n	c954 <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
    c878:	ea52 0103 	orrs.w	r1, r2, r3
    c87c:	bf0c      	ite	eq
    c87e:	f04f 0e01 	moveq.w	lr, #1
    c882:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    c886:	ea52 0103 	orrs.w	r1, r2, r3
    c88a:	d00b      	beq.n	c8a4 <am_util_stdio_vsprintf+0x1a0>
    c88c:	4610      	mov	r0, r2
    c88e:	4619      	mov	r1, r3
        ui64Val >>= 4;
    c890:	090c      	lsrs	r4, r1, #4
    c892:	0900      	lsrs	r0, r0, #4
    c894:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c898:	4621      	mov	r1, r4
    while ( ui64Val )
    c89a:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
    c89e:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c8a2:	d1f5      	bne.n	c890 <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
    c8a4:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    c8a8:	2f00      	cmp	r7, #0
    c8aa:	f340 855f 	ble.w	d36c <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
    c8ae:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
    c8b2:	f1b8 0f00 	cmp.w	r8, #0
    c8b6:	f000 855a 	beq.w	d36e <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
    c8ba:	4641      	mov	r1, r8
    c8bc:	f00a 0707 	and.w	r7, sl, #7
    c8c0:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c8c4:	f10a 30ff 	add.w	r0, sl, #4294967295
    c8c8:	eba1 0408 	sub.w	r4, r1, r8
    c8cc:	f1ba 0f00 	cmp.w	sl, #0
    c8d0:	d03d      	beq.n	c94e <am_util_stdio_vsprintf+0x24a>
    c8d2:	b32f      	cbz	r7, c920 <am_util_stdio_vsprintf+0x21c>
    c8d4:	2f01      	cmp	r7, #1
    c8d6:	d01c      	beq.n	c912 <am_util_stdio_vsprintf+0x20e>
    c8d8:	2f02      	cmp	r7, #2
    c8da:	d017      	beq.n	c90c <am_util_stdio_vsprintf+0x208>
    c8dc:	2f03      	cmp	r7, #3
    c8de:	d012      	beq.n	c906 <am_util_stdio_vsprintf+0x202>
    c8e0:	2f04      	cmp	r7, #4
    c8e2:	d00d      	beq.n	c900 <am_util_stdio_vsprintf+0x1fc>
    c8e4:	2f05      	cmp	r7, #5
    c8e6:	d008      	beq.n	c8fa <am_util_stdio_vsprintf+0x1f6>
    c8e8:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
    c8ea:	bf1c      	itt	ne
    c8ec:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
    c8f0:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
    c8f4:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c8f8:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c8fa:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c8fe:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c900:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c904:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c906:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c90a:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c90c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c910:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c912:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c916:	3801      	subs	r0, #1
    c918:	1c47      	adds	r7, r0, #1
    c91a:	eba1 0408 	sub.w	r4, r1, r8
    c91e:	d016      	beq.n	c94e <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
    c920:	468a      	mov	sl, r1
    while ( i32NumChars-- )
    c922:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
    c924:	f80a 5b01 	strb.w	r5, [sl], #1
    c928:	3108      	adds	r1, #8
    c92a:	f88a 5000 	strb.w	r5, [sl]
    c92e:	f801 5c06 	strb.w	r5, [r1, #-6]
    c932:	f801 5c05 	strb.w	r5, [r1, #-5]
    c936:	f801 5c04 	strb.w	r5, [r1, #-4]
    c93a:	f801 5c03 	strb.w	r5, [r1, #-3]
    c93e:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
    c942:	1c47      	adds	r7, r0, #1
    c944:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
    c948:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
    c94c:	d1e8      	bne.n	c920 <am_util_stdio_vsprintf+0x21c>
    c94e:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
    c950:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
    c952:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    c954:	ea52 0103 	orrs.w	r1, r2, r3
    c958:	f040 821a 	bne.w	cd90 <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
    c95c:	f04f 0530 	mov.w	r5, #48	; 0x30
    c960:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
    c964:	2701      	movs	r7, #1
    c966:	f1b8 0f00 	cmp.w	r8, #0
    c96a:	f000 8235 	beq.w	cdd8 <am_util_stdio_vsprintf+0x6d4>
    c96e:	4639      	mov	r1, r7
        while (ix--)
    c970:	2000      	movs	r0, #0
    c972:	ac2b      	add	r4, sp, #172	; 0xac
    c974:	1863      	adds	r3, r4, r1
    c976:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
    c97a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    c97e:	f888 c000 	strb.w	ip, [r8]
    c982:	1e4d      	subs	r5, r1, #1
        while (ix--)
    c984:	45a2      	cmp	sl, r4
    c986:	f005 0107 	and.w	r1, r5, #7
    c98a:	4643      	mov	r3, r8
    c98c:	d047      	beq.n	ca1e <am_util_stdio_vsprintf+0x31a>
    c98e:	b359      	cbz	r1, c9e8 <am_util_stdio_vsprintf+0x2e4>
    c990:	2901      	cmp	r1, #1
    c992:	d023      	beq.n	c9dc <am_util_stdio_vsprintf+0x2d8>
    c994:	2902      	cmp	r1, #2
    c996:	d01d      	beq.n	c9d4 <am_util_stdio_vsprintf+0x2d0>
    c998:	2903      	cmp	r1, #3
    c99a:	d017      	beq.n	c9cc <am_util_stdio_vsprintf+0x2c8>
    c99c:	2904      	cmp	r1, #4
    c99e:	d011      	beq.n	c9c4 <am_util_stdio_vsprintf+0x2c0>
    c9a0:	2905      	cmp	r1, #5
    c9a2:	d00b      	beq.n	c9bc <am_util_stdio_vsprintf+0x2b8>
    c9a4:	2906      	cmp	r1, #6
    c9a6:	d005      	beq.n	c9b4 <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
    c9a8:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    c9ac:	f888 2001 	strb.w	r2, [r8, #1]
    c9b0:	f108 0301 	add.w	r3, r8, #1
    c9b4:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    c9b8:	f803 5f01 	strb.w	r5, [r3, #1]!
    c9bc:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    c9c0:	f803 cf01 	strb.w	ip, [r3, #1]!
    c9c4:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    c9c8:	f803 1f01 	strb.w	r1, [r3, #1]!
    c9cc:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    c9d0:	f803 2f01 	strb.w	r2, [r3, #1]!
    c9d4:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    c9d8:	f803 5f01 	strb.w	r5, [r3, #1]!
    c9dc:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    c9e0:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
    c9e4:	45a2      	cmp	sl, r4
    c9e6:	d01a      	beq.n	ca1e <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
    c9e8:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    c9ec:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
    c9f0:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    c9f4:	705a      	strb	r2, [r3, #1]
    c9f6:	70dd      	strb	r5, [r3, #3]
    c9f8:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
    c9fc:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
    ca00:	7099      	strb	r1, [r3, #2]
    ca02:	711a      	strb	r2, [r3, #4]
    ca04:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    ca08:	715d      	strb	r5, [r3, #5]
    ca0a:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
    ca0e:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
    ca12:	7199      	strb	r1, [r3, #6]
        while (ix--)
    ca14:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
    ca16:	71da      	strb	r2, [r3, #7]
    ca18:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
    ca1c:	d1e4      	bne.n	c9e8 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
    ca1e:	4440      	add	r0, r8
    ca20:	2400      	movs	r4, #0
                    pcBuf += iVal;
    ca22:	44b8      	add	r8, r7
        *pcBuf = 0;
    ca24:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
    ca26:	44b9      	add	r9, r7
                break;
    ca28:	e01e      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
    ca2a:	f1b8 0f00 	cmp.w	r8, #0
    ca2e:	d01b      	beq.n	ca68 <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
    ca30:	f10b 0307 	add.w	r3, fp, #7
    ca34:	f023 0b07 	bic.w	fp, r3, #7
    ca38:	e9db 0100 	ldrd	r0, r1, [fp]
    ca3c:	f7ff fb60 	bl	c100 <__aeabi_d2f>
    ca40:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    ca44:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    ca48:	2014      	movs	r0, #20
    if (fValue == 0.0f)
    ca4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
    ca4e:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
    ca52:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
    ca56:	f040 848d 	bne.w	d374 <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ca5a:	490d      	ldr	r1, [pc, #52]	; (ca90 <am_util_stdio_vsprintf+0x38c>)
    ca5c:	f8c8 1000 	str.w	r1, [r8]
    ca60:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
    ca64:	44d1      	add	r9, sl
                    pcBuf += iVal;
    ca66:	44d0      	add	r8, sl
        ++pcFmt;
    ca68:	1c71      	adds	r1, r6, #1
    ca6a:	e652      	b.n	c712 <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ca6c:	f10b 0404 	add.w	r4, fp, #4
    ca70:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
    ca74:	f1b8 0f00 	cmp.w	r8, #0
    ca78:	d003      	beq.n	ca82 <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
    ca7a:	f888 1000 	strb.w	r1, [r8]
    ca7e:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    ca82:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ca86:	46a3      	mov	fp, r4
                break;
    ca88:	e7ee      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
    ca8a:	bf00      	nop
    ca8c:	10001028 	.word	0x10001028
    ca90:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ca94:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
    ca98:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ca9c:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    ca9e:	2800      	cmp	r0, #0
    caa0:	f171 0300 	sbcs.w	r3, r1, #0
    caa4:	f2c0 83ac 	blt.w	d200 <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
    caa8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    caac:	2c00      	cmp	r4, #0
    caae:	f000 83ba 	beq.w	d226 <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
    cab2:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cab6:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
    cab8:	bf0c      	ite	eq
    caba:	2401      	moveq	r4, #1
    cabc:	2400      	movne	r4, #0
    while ( ui64Val )
    cabe:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    cac0:	460b      	mov	r3, r1
                    bNeg = false;
    cac2:	bf18      	it	ne
    cac4:	2000      	movne	r0, #0
    while ( ui64Val )
    cac6:	f000 86ba 	beq.w	d83e <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
    caca:	901b      	str	r0, [sp, #108]	; 0x6c
    cacc:	9620      	str	r6, [sp, #128]	; 0x80
    cace:	9521      	str	r5, [sp, #132]	; 0x84
    cad0:	9722      	str	r7, [sp, #136]	; 0x88
    cad2:	941a      	str	r4, [sp, #104]	; 0x68
    cad4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    cad8:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    cadc:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    cae0:	e009      	b.n	caf6 <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cae2:	464a      	mov	r2, r9
    cae4:	2300      	movs	r3, #0
        ++iNDigits;
    cae6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cae8:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    caec:	f105 0501 	add.w	r5, r5, #1
    caf0:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    caf2:	f000 83a5 	beq.w	d240 <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    caf6:	0896      	lsrs	r6, r2, #2
    caf8:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
    cafc:	089f      	lsrs	r7, r3, #2
    cafe:	970b      	str	r7, [sp, #44]	; 0x2c
    cb00:	950a      	str	r5, [sp, #40]	; 0x28
    cb02:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    cb06:	0859      	lsrs	r1, r3, #1
    cb08:	ea4f 0032 	mov.w	r0, r2, rrx
    cb0c:	1820      	adds	r0, r4, r0
    cb0e:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    cb12:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb14:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    cb16:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
    cb1a:	0908      	lsrs	r0, r1, #4
    cb1c:	9005      	str	r0, [sp, #20]
    cb1e:	9504      	str	r5, [sp, #16]
    cb20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    cb24:	19a0      	adds	r0, r4, r6
    cb26:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    cb2a:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
    cb2c:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    cb2e:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
    cb32:	0a08      	lsrs	r0, r1, #8
    cb34:	9007      	str	r0, [sp, #28]
    cb36:	9506      	str	r5, [sp, #24]
    cb38:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    cb3c:	19a0      	adds	r0, r4, r6
    cb3e:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    cb42:	0c06      	lsrs	r6, r0, #16
    cb44:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    cb48:	eb10 070a 	adds.w	r7, r0, sl
    cb4c:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    cb50:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    cb54:	2400      	movs	r4, #0
    cb56:	900e      	str	r0, [sp, #56]	; 0x38
    cb58:	940f      	str	r4, [sp, #60]	; 0x3c
    cb5a:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb5e:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    cb60:	eb18 0807 	adds.w	r8, r8, r7
    cb64:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb68:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    cb6c:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    cb6e:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    cb72:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    cb74:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    cb78:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    cb7a:	9312      	str	r3, [sp, #72]	; 0x48
    cb7c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
    cb80:	08ff      	lsrs	r7, r7, #3
    cb82:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    cb86:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
    cb8a:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    cb8e:	00bd      	lsls	r5, r7, #2
    cb90:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    cb94:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    cb96:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb9a:	f102 0e06 	add.w	lr, r2, #6
    cb9e:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    cba2:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    cba6:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbaa:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    cbae:	d098      	beq.n	cae2 <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
    cbb0:	eb10 0e06 	adds.w	lr, r0, r6
    cbb4:	4179      	adcs	r1, r7
    cbb6:	eb1e 000e 	adds.w	r0, lr, lr
    cbba:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cbbc:	3206      	adds	r2, #6
    cbbe:	f143 0300 	adc.w	r3, r3, #0
    cbc2:	1a15      	subs	r5, r2, r0
    cbc4:	eb63 0401 	sbc.w	r4, r3, r1
    cbc8:	0929      	lsrs	r1, r5, #4
    cbca:	0922      	lsrs	r2, r4, #4
    cbcc:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cbd0:	9016      	str	r0, [sp, #88]	; 0x58
    cbd2:	9217      	str	r2, [sp, #92]	; 0x5c
    cbd4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    cbd8:	1992      	adds	r2, r2, r6
    cbda:	417b      	adcs	r3, r7
    cbdc:	e783      	b.n	cae6 <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
    cbde:	f04f 0c01 	mov.w	ip, #1
    cbe2:	e642      	b.n	c86a <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cbe4:	f8db 1000 	ldr.w	r1, [fp]
    cbe8:	2200      	movs	r2, #0
    cbea:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
    cbee:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    cbf2:	2c00      	cmp	r4, #0
    cbf4:	f000 8269 	beq.w	d0ca <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
    cbf8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    cbfc:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
    cc00:	4602      	mov	r2, r0
    cc02:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    cc04:	bf0c      	ite	eq
    cc06:	2401      	moveq	r4, #1
    cc08:	2400      	movne	r4, #0
    while ( ui64Val )
    cc0a:	ea52 0103 	orrs.w	r1, r2, r3
    cc0e:	f000 81fe 	beq.w	d00e <am_util_stdio_vsprintf+0x90a>
    cc12:	961b      	str	r6, [sp, #108]	; 0x6c
    cc14:	9520      	str	r5, [sp, #128]	; 0x80
    cc16:	9721      	str	r7, [sp, #132]	; 0x84
    cc18:	941a      	str	r4, [sp, #104]	; 0x68
    cc1a:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    cc1e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    cc22:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    cc26:	e009      	b.n	cc3c <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc28:	464a      	mov	r2, r9
    cc2a:	2300      	movs	r3, #0
        ++iNDigits;
    cc2c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cc2e:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cc32:	f105 0501 	add.w	r5, r5, #1
    cc36:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cc38:	f000 81db 	beq.w	cff2 <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc3c:	0895      	lsrs	r5, r2, #2
    cc3e:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
    cc42:	089c      	lsrs	r4, r3, #2
    cc44:	9708      	str	r7, [sp, #32]
    cc46:	9409      	str	r4, [sp, #36]	; 0x24
    cc48:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    cc4c:	0859      	lsrs	r1, r3, #1
    cc4e:	ea4f 0032 	mov.w	r0, r2, rrx
    cc52:	1820      	adds	r0, r4, r0
    cc54:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    cc58:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc5a:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    cc5c:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
    cc60:	0908      	lsrs	r0, r1, #4
    cc62:	9001      	str	r0, [sp, #4]
    cc64:	9400      	str	r4, [sp, #0]
    cc66:	e9dd 4500 	ldrd	r4, r5, [sp]
    cc6a:	19a0      	adds	r0, r4, r6
    cc6c:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    cc70:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
    cc72:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    cc74:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    cc78:	0a08      	lsrs	r0, r1, #8
    cc7a:	9003      	str	r0, [sp, #12]
    cc7c:	9402      	str	r4, [sp, #8]
    cc7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    cc82:	19a0      	adds	r0, r4, r6
    cc84:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    cc88:	0c06      	lsrs	r6, r0, #16
    cc8a:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    cc8e:	eb10 070a 	adds.w	r7, r0, sl
    cc92:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    cc96:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    cc9a:	2400      	movs	r4, #0
    cc9c:	900c      	str	r0, [sp, #48]	; 0x30
    cc9e:	940d      	str	r4, [sp, #52]	; 0x34
    cca0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cca4:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    cca6:	eb18 0807 	adds.w	r8, r8, r7
    ccaa:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ccae:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    ccb2:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    ccb4:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    ccb8:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    ccba:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    ccbe:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    ccc0:	9310      	str	r3, [sp, #64]	; 0x40
    ccc2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
    ccc6:	08ff      	lsrs	r7, r7, #3
    ccc8:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    cccc:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
    ccd0:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    ccd4:	00bd      	lsls	r5, r7, #2
    ccd6:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    ccda:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    ccdc:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cce0:	f102 0e06 	add.w	lr, r2, #6
    cce4:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    cce8:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    ccec:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccf0:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    ccf4:	d098      	beq.n	cc28 <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
    ccf6:	eb10 0e06 	adds.w	lr, r0, r6
    ccfa:	4179      	adcs	r1, r7
    ccfc:	eb1e 000e 	adds.w	r0, lr, lr
    cd00:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cd02:	3206      	adds	r2, #6
    cd04:	f143 0300 	adc.w	r3, r3, #0
    cd08:	1a15      	subs	r5, r2, r0
    cd0a:	eb63 0401 	sbc.w	r4, r3, r1
    cd0e:	0929      	lsrs	r1, r5, #4
    cd10:	0922      	lsrs	r2, r4, #4
    cd12:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cd16:	9014      	str	r0, [sp, #80]	; 0x50
    cd18:	9215      	str	r2, [sp, #84]	; 0x54
    cd1a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    cd1e:	1992      	adds	r2, r2, r6
    cd20:	417b      	adcs	r3, r7
    cd22:	e783      	b.n	cc2c <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
    cd24:	f1b8 0f00 	cmp.w	r8, #0
    cd28:	d003      	beq.n	cd32 <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
    cd2a:	f888 2000 	strb.w	r2, [r8]
    cd2e:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    cd32:	f109 0901 	add.w	r9, r9, #1
                break;
    cd36:	e697      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd38:	7872      	ldrb	r2, [r6, #1]
    cd3a:	2a6c      	cmp	r2, #108	; 0x6c
    cd3c:	f000 81db 	beq.w	d0f6 <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
    cd40:	3601      	adds	r6, #1
    cd42:	e556      	b.n	c7f2 <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
    cd44:	7873      	ldrb	r3, [r6, #1]
    cd46:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
    cd48:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
    cd4c:	f000 81c8 	beq.w	d0e0 <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd50:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    cd54:	2e09      	cmp	r6, #9
    cd56:	f200 8349 	bhi.w	d3ec <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
    cd5a:	2200      	movs	r2, #0
    bool bNeg = false;
    cd5c:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd5e:	4606      	mov	r6, r0
    bool bNeg = false;
    cd60:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
    cd64:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
    cd68:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd6c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    cd70:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    cd74:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    cd78:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
    cd7c:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd80:	d9f0      	bls.n	cd64 <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
    cd82:	f1bc 0f00 	cmp.w	ip, #0
    cd86:	f000 8334 	beq.w	d3f2 <am_util_stdio_vsprintf+0xcee>
    cd8a:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
    cd8e:	e330      	b.n	d3f2 <am_util_stdio_vsprintf+0xcee>
    cd90:	f1bc 0f00 	cmp.w	ip, #0
    cd94:	bf14      	ite	ne
    cd96:	2727      	movne	r7, #39	; 0x27
    cd98:	2707      	moveq	r7, #7
    cd9a:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
    cd9e:	2000      	movs	r0, #0
    cda0:	e000      	b.n	cda4 <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
    cda2:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
    cda4:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cda8:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
    cdac:	2909      	cmp	r1, #9
    cdae:	bf88      	it	hi
    cdb0:	4671      	movhi	r1, lr
        ui64Val >>= 4;
    cdb2:	0912      	lsrs	r2, r2, #4
    cdb4:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    cdb8:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    cdbc:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
    cdbe:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    cdc0:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
    cdc4:	f804 1f01 	strb.w	r1, [r4, #1]!
    cdc8:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
    cdcc:	d1e9      	bne.n	cda2 <am_util_stdio_vsprintf+0x69e>
    cdce:	460f      	mov	r7, r1
    if (pcBuf)
    cdd0:	f1b8 0f00 	cmp.w	r8, #0
    cdd4:	f47f adcd 	bne.w	c972 <am_util_stdio_vsprintf+0x26e>
    cdd8:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    cddc:	44b9      	add	r9, r7
    cdde:	e643      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
    cde0:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
    cde2:	f8db 0000 	ldr.w	r0, [fp]
    cde6:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
    cdea:	2800      	cmp	r0, #0
    cdec:	f000 8085 	beq.w	cefa <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
    cdf0:	7801      	ldrb	r1, [r0, #0]
    cdf2:	1c42      	adds	r2, r0, #1
    cdf4:	4613      	mov	r3, r2
    cdf6:	2900      	cmp	r1, #0
    cdf8:	f000 84f3 	beq.w	d7e2 <am_util_stdio_vsprintf+0x10de>
    cdfc:	eba3 0e00 	sub.w	lr, r3, r0
    ce00:	f813 7b01 	ldrb.w	r7, [r3], #1
    ce04:	2f00      	cmp	r7, #0
    ce06:	d1f9      	bne.n	cdfc <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
    ce08:	2c00      	cmp	r4, #0
    ce0a:	4677      	mov	r7, lr
    ce0c:	dd01      	ble.n	ce12 <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
    ce0e:	4574      	cmp	r4, lr
    ce10:	d877      	bhi.n	cf02 <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
    ce12:	f1b8 0f00 	cmp.w	r8, #0
    ce16:	f000 80e1 	beq.w	cfdc <am_util_stdio_vsprintf+0x8d8>
    ce1a:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
    ce1e:	f808 1b01 	strb.w	r1, [r8], #1
    ce22:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
    ce26:	f812 1b01 	ldrb.w	r1, [r2], #1
    ce2a:	2900      	cmp	r1, #0
    ce2c:	d1f7      	bne.n	ce1e <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
    ce2e:	2c00      	cmp	r4, #0
    ce30:	f43f ae1a 	beq.w	ca68 <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
    ce34:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
    ce36:	42bb      	cmp	r3, r7
    ce38:	f67f ae16 	bls.w	ca68 <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
    ce3c:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
    ce3e:	2a00      	cmp	r2, #0
    ce40:	f340 84c3 	ble.w	d7ca <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
    ce44:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
    ce46:	f1b8 0f00 	cmp.w	r8, #0
    ce4a:	f000 84bf 	beq.w	d7cc <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
    ce4e:	4643      	mov	r3, r8
    ce50:	f007 0407 	and.w	r4, r7, #7
    ce54:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce58:	f107 3cff 	add.w	ip, r7, #4294967295
    ce5c:	eba3 0108 	sub.w	r1, r3, r8
    ce60:	2f00      	cmp	r7, #0
    ce62:	d045      	beq.n	cef0 <am_util_stdio_vsprintf+0x7ec>
    ce64:	b364      	cbz	r4, cec0 <am_util_stdio_vsprintf+0x7bc>
    ce66:	2c01      	cmp	r4, #1
    ce68:	d021      	beq.n	ceae <am_util_stdio_vsprintf+0x7aa>
    ce6a:	2c02      	cmp	r4, #2
    ce6c:	d01b      	beq.n	cea6 <am_util_stdio_vsprintf+0x7a2>
    ce6e:	2c03      	cmp	r4, #3
    ce70:	d015      	beq.n	ce9e <am_util_stdio_vsprintf+0x79a>
    ce72:	2c04      	cmp	r4, #4
    ce74:	d00f      	beq.n	ce96 <am_util_stdio_vsprintf+0x792>
    ce76:	2c05      	cmp	r4, #5
    ce78:	d009      	beq.n	ce8e <am_util_stdio_vsprintf+0x78a>
    ce7a:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    ce7c:	bf1c      	itt	ne
    ce7e:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce82:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ce86:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce8a:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ce8e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce92:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ce96:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce9a:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ce9e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cea2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cea6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ceaa:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ceae:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ceb2:	f10c 3cff 	add.w	ip, ip, #4294967295
    ceb6:	f11c 0701 	adds.w	r7, ip, #1
    ceba:	eba3 0108 	sub.w	r1, r3, r8
    cebe:	d017      	beq.n	cef0 <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
    cec0:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    cec2:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
    cec6:	f800 5b01 	strb.w	r5, [r0], #1
    ceca:	3308      	adds	r3, #8
    cecc:	7005      	strb	r5, [r0, #0]
    cece:	f803 5c06 	strb.w	r5, [r3, #-6]
    ced2:	f803 5c05 	strb.w	r5, [r3, #-5]
    ced6:	f803 5c04 	strb.w	r5, [r3, #-4]
    ceda:	f803 5c03 	strb.w	r5, [r3, #-3]
    cede:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cee2:	f11c 0001 	adds.w	r0, ip, #1
    cee6:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    ceea:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    ceee:	d1e7      	bne.n	cec0 <am_util_stdio_vsprintf+0x7bc>
    cef0:	460d      	mov	r5, r1
    cef2:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cef4:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    cef6:	4491      	add	r9, r2
    cef8:	e5b6      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    cefa:	2c00      	cmp	r4, #0
    cefc:	f340 8443 	ble.w	d786 <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    cf00:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    cf02:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    cf04:	2a00      	cmp	r2, #0
    cf06:	f340 8464 	ble.w	d7d2 <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    cf0a:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    cf0e:	f1b8 0f00 	cmp.w	r8, #0
    cf12:	d05c      	beq.n	cfce <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    cf14:	4643      	mov	r3, r8
    cf16:	f00e 0407 	and.w	r4, lr, #7
    cf1a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf1e:	f10e 3aff 	add.w	sl, lr, #4294967295
    cf22:	eba3 0c08 	sub.w	ip, r3, r8
    cf26:	f1be 0f00 	cmp.w	lr, #0
    cf2a:	d045      	beq.n	cfb8 <am_util_stdio_vsprintf+0x8b4>
    cf2c:	b364      	cbz	r4, cf88 <am_util_stdio_vsprintf+0x884>
    cf2e:	2c01      	cmp	r4, #1
    cf30:	d021      	beq.n	cf76 <am_util_stdio_vsprintf+0x872>
    cf32:	2c02      	cmp	r4, #2
    cf34:	d01b      	beq.n	cf6e <am_util_stdio_vsprintf+0x86a>
    cf36:	2c03      	cmp	r4, #3
    cf38:	d015      	beq.n	cf66 <am_util_stdio_vsprintf+0x862>
    cf3a:	2c04      	cmp	r4, #4
    cf3c:	d00f      	beq.n	cf5e <am_util_stdio_vsprintf+0x85a>
    cf3e:	2c05      	cmp	r4, #5
    cf40:	d009      	beq.n	cf56 <am_util_stdio_vsprintf+0x852>
    cf42:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    cf44:	bf1c      	itt	ne
    cf46:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf4a:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf4e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf52:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf56:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf5a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf5e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf62:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf66:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf6a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf6e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf72:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf76:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf7a:	f10a 3aff 	add.w	sl, sl, #4294967295
    cf7e:	f11a 0401 	adds.w	r4, sl, #1
    cf82:	eba3 0c08 	sub.w	ip, r3, r8
    cf86:	d017      	beq.n	cfb8 <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    cf88:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cf8a:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    cf8e:	f801 5b01 	strb.w	r5, [r1], #1
    cf92:	3308      	adds	r3, #8
    cf94:	700d      	strb	r5, [r1, #0]
    cf96:	f803 5c06 	strb.w	r5, [r3, #-6]
    cf9a:	f803 5c05 	strb.w	r5, [r3, #-5]
    cf9e:	f803 5c04 	strb.w	r5, [r3, #-4]
    cfa2:	f803 5c03 	strb.w	r5, [r3, #-3]
    cfa6:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cfaa:	f11a 0401 	adds.w	r4, sl, #1
    cfae:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    cfb2:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    cfb6:	d1e7      	bne.n	cf88 <am_util_stdio_vsprintf+0x884>
    cfb8:	4664      	mov	r4, ip
    cfba:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    cfbc:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    cfbe:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    cfc0:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    cfc2:	2900      	cmp	r1, #0
    cfc4:	f43f ad50 	beq.w	ca68 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    cfc8:	2400      	movs	r4, #0
    cfca:	1c42      	adds	r2, r0, #1
    cfcc:	e721      	b.n	ce12 <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    cfce:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    cfd0:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	f43f ad48 	beq.w	ca68 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    cfd8:	2400      	movs	r4, #0
    cfda:	1c42      	adds	r2, r0, #1
    cfdc:	4690      	mov	r8, r2
    cfde:	eba9 0000 	sub.w	r0, r9, r0
    cfe2:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    cfe6:	f818 1b01 	ldrb.w	r1, [r8], #1
    cfea:	2900      	cmp	r1, #0
    cfec:	d1f9      	bne.n	cfe2 <am_util_stdio_vsprintf+0x8de>
    cfee:	4688      	mov	r8, r1
    cff0:	e71d      	b.n	ce2e <am_util_stdio_vsprintf+0x72a>
    cff2:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    cff6:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    cffa:	9d20      	ldr	r5, [sp, #128]	; 0x80
    cffc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    cffe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    d000:	9f21      	ldr	r7, [sp, #132]	; 0x84
    d002:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    d006:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    d00a:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    d00e:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    d010:	2c00      	cmp	r4, #0
    d012:	f340 81e3 	ble.w	d3dc <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    d016:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    d018:	f1b8 0f00 	cmp.w	r8, #0
    d01c:	f000 81df 	beq.w	d3de <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    d020:	4643      	mov	r3, r8
    d022:	f007 0007 	and.w	r0, r7, #7
    d026:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d02a:	f1a4 0a02 	sub.w	sl, r4, #2
    d02e:	eba3 0c08 	sub.w	ip, r3, r8
    d032:	2f00      	cmp	r7, #0
    d034:	d046      	beq.n	d0c4 <am_util_stdio_vsprintf+0x9c0>
    d036:	b360      	cbz	r0, d092 <am_util_stdio_vsprintf+0x98e>
    d038:	2801      	cmp	r0, #1
    d03a:	d021      	beq.n	d080 <am_util_stdio_vsprintf+0x97c>
    d03c:	2802      	cmp	r0, #2
    d03e:	d01b      	beq.n	d078 <am_util_stdio_vsprintf+0x974>
    d040:	2803      	cmp	r0, #3
    d042:	d015      	beq.n	d070 <am_util_stdio_vsprintf+0x96c>
    d044:	2804      	cmp	r0, #4
    d046:	d00f      	beq.n	d068 <am_util_stdio_vsprintf+0x964>
    d048:	2805      	cmp	r0, #5
    d04a:	d009      	beq.n	d060 <am_util_stdio_vsprintf+0x95c>
    d04c:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    d04e:	bf1c      	itt	ne
    d050:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    d054:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d058:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d05c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d060:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d064:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d068:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d06c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d070:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d074:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d078:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d07c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    d080:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    d084:	f10a 3aff 	add.w	sl, sl, #4294967295
    d088:	f11a 0001 	adds.w	r0, sl, #1
    d08c:	eba3 0c08 	sub.w	ip, r3, r8
    d090:	d018      	beq.n	d0c4 <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    d092:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    d094:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    d098:	f80e 5b01 	strb.w	r5, [lr], #1
    d09c:	3308      	adds	r3, #8
    d09e:	f88e 5000 	strb.w	r5, [lr]
    d0a2:	f803 5c06 	strb.w	r5, [r3, #-6]
    d0a6:	f803 5c05 	strb.w	r5, [r3, #-5]
    d0aa:	f803 5c04 	strb.w	r5, [r3, #-4]
    d0ae:	f803 5c03 	strb.w	r5, [r3, #-3]
    d0b2:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    d0b6:	f11a 0701 	adds.w	r7, sl, #1
    d0ba:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    d0be:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    d0c2:	d1e6      	bne.n	d092 <am_util_stdio_vsprintf+0x98e>
    d0c4:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    d0c6:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    d0c8:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    d0ca:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d0ce:	4642      	mov	r2, r8
    d0d0:	f7ff fa1a 	bl	c508 <uint64_to_str>
                if ( pcBuf )
    d0d4:	f1b8 0f00 	cmp.w	r8, #0
    d0d8:	d000      	beq.n	d0dc <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    d0da:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    d0dc:	4481      	add	r9, r0
                break;
    d0de:	e4c3      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d0e0:	78b3      	ldrb	r3, [r6, #2]
    d0e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d0e6:	2909      	cmp	r1, #9
        pcStr++;
    d0e8:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d0ec:	f200 8391 	bhi.w	d812 <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    d0f0:	2201      	movs	r2, #1
        bNeg = true;
    d0f2:	4694      	mov	ip, r2
    d0f4:	e634      	b.n	cd60 <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    d0f6:	78b2      	ldrb	r2, [r6, #2]
    d0f8:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    d0fc:	3602      	adds	r6, #2
        switch ( *pcFmt )
    d0fe:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    d102:	f63f ae0f 	bhi.w	cd24 <am_util_stdio_vsprintf+0x620>
    d106:	a101      	add	r1, pc, #4	; (adr r1, d10c <am_util_stdio_vsprintf+0xa08>)
    d108:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    d10c:	0000ca2b 	.word	0x0000ca2b
    d110:	0000cd25 	.word	0x0000cd25
    d114:	0000cd25 	.word	0x0000cd25
    d118:	0000cd25 	.word	0x0000cd25
    d11c:	0000cd25 	.word	0x0000cd25
    d120:	0000cd25 	.word	0x0000cd25
    d124:	0000cd25 	.word	0x0000cd25
    d128:	0000cd25 	.word	0x0000cd25
    d12c:	0000cd25 	.word	0x0000cd25
    d130:	0000cd25 	.word	0x0000cd25
    d134:	0000cd25 	.word	0x0000cd25
    d138:	0000cd25 	.word	0x0000cd25
    d13c:	0000cd25 	.word	0x0000cd25
    d140:	0000cd25 	.word	0x0000cd25
    d144:	0000cd25 	.word	0x0000cd25
    d148:	0000cd25 	.word	0x0000cd25
    d14c:	0000cd25 	.word	0x0000cd25
    d150:	0000cd25 	.word	0x0000cd25
    d154:	0000d8dd 	.word	0x0000d8dd
    d158:	0000cd25 	.word	0x0000cd25
    d15c:	0000cd25 	.word	0x0000cd25
    d160:	0000cd25 	.word	0x0000cd25
    d164:	0000cd25 	.word	0x0000cd25
    d168:	0000cd25 	.word	0x0000cd25
    d16c:	0000cd25 	.word	0x0000cd25
    d170:	0000cd25 	.word	0x0000cd25
    d174:	0000cd25 	.word	0x0000cd25
    d178:	0000cd25 	.word	0x0000cd25
    d17c:	0000cd25 	.word	0x0000cd25
    d180:	0000ca6d 	.word	0x0000ca6d
    d184:	0000d1ef 	.word	0x0000d1ef
    d188:	0000cd25 	.word	0x0000cd25
    d18c:	0000ca2b 	.word	0x0000ca2b
    d190:	0000cd25 	.word	0x0000cd25
    d194:	0000cd25 	.word	0x0000cd25
    d198:	0000d1ef 	.word	0x0000d1ef
    d19c:	0000cd25 	.word	0x0000cd25
    d1a0:	0000cd25 	.word	0x0000cd25
    d1a4:	0000cd25 	.word	0x0000cd25
    d1a8:	0000cd25 	.word	0x0000cd25
    d1ac:	0000cd25 	.word	0x0000cd25
    d1b0:	0000cd25 	.word	0x0000cd25
    d1b4:	0000cd25 	.word	0x0000cd25
    d1b8:	0000cd25 	.word	0x0000cd25
    d1bc:	0000cd25 	.word	0x0000cd25
    d1c0:	0000cde1 	.word	0x0000cde1
    d1c4:	0000cd25 	.word	0x0000cd25
    d1c8:	0000d1d9 	.word	0x0000d1d9
    d1cc:	0000cd25 	.word	0x0000cd25
    d1d0:	0000cd25 	.word	0x0000cd25
    d1d4:	0000d76f 	.word	0x0000d76f
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1d8:	f10b 0207 	add.w	r2, fp, #7
    d1dc:	f022 0b07 	bic.w	fp, r2, #7
    d1e0:	e9db 0100 	ldrd	r0, r1, [fp]
    d1e4:	f10b 0b08 	add.w	fp, fp, #8
    d1e8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    d1ec:	e501      	b.n	cbf2 <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1ee:	f10b 0307 	add.w	r3, fp, #7
    d1f2:	f023 0b07 	bic.w	fp, r3, #7
    d1f6:	e9db 0100 	ldrd	r0, r1, [fp]
    d1fa:	f10b 0b08 	add.w	fp, fp, #8
    d1fe:	e44e      	b.n	ca9e <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    d200:	4240      	negs	r0, r0
    d202:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d206:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    d20a:	2c00      	cmp	r4, #0
    d20c:	f040 834e 	bne.w	d8ac <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    d210:	f1b8 0f00 	cmp.w	r8, #0
    d214:	f000 82d1 	beq.w	d7ba <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    d218:	252d      	movs	r5, #45	; 0x2d
    d21a:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    d21e:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    d222:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d226:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d22a:	4642      	mov	r2, r8
    d22c:	f7ff f96c 	bl	c508 <uint64_to_str>
                if ( pcBuf )
    d230:	f1b8 0f00 	cmp.w	r8, #0
    d234:	f47f af51 	bne.w	d0da <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    d238:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d23c:	4481      	add	r9, r0
    d23e:	e413      	b.n	ca68 <am_util_stdio_vsprintf+0x364>
    d240:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    d244:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d246:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    d248:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    d24a:	9d21      	ldr	r5, [sp, #132]	; 0x84
    d24c:	9e20      	ldr	r6, [sp, #128]	; 0x80
    d24e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    d252:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    d256:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    d25a:	1aff      	subs	r7, r7, r3
    d25c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    d260:	b13c      	cbz	r4, d272 <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    d262:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    d264:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    d268:	f000 82c3 	beq.w	d7f2 <am_util_stdio_vsprintf+0x10ee>
    d26c:	2001      	movs	r0, #1
                        --iWidth;
    d26e:	460f      	mov	r7, r1
    d270:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    d272:	2f00      	cmp	r7, #0
    d274:	f340 82d3 	ble.w	d81e <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    d278:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    d27a:	f1b8 0f00 	cmp.w	r8, #0
    d27e:	d067      	beq.n	d350 <am_util_stdio_vsprintf+0xc4c>
    d280:	f010 0107 	ands.w	r1, r0, #7
    d284:	f1a7 0a02 	sub.w	sl, r7, #2
    d288:	4643      	mov	r3, r8
    d28a:	d03a      	beq.n	d302 <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    d28c:	4643      	mov	r3, r8
    d28e:	2901      	cmp	r1, #1
    d290:	f1a7 0a03 	sub.w	sl, r7, #3
    d294:	f803 5b01 	strb.w	r5, [r3], #1
    d298:	d033      	beq.n	d302 <am_util_stdio_vsprintf+0xbfe>
    d29a:	2902      	cmp	r1, #2
    d29c:	d01b      	beq.n	d2d6 <am_util_stdio_vsprintf+0xbd2>
    d29e:	2903      	cmp	r1, #3
    d2a0:	d015      	beq.n	d2ce <am_util_stdio_vsprintf+0xbca>
    d2a2:	2904      	cmp	r1, #4
    d2a4:	d00f      	beq.n	d2c6 <am_util_stdio_vsprintf+0xbc2>
    d2a6:	2905      	cmp	r1, #5
    d2a8:	d009      	beq.n	d2be <am_util_stdio_vsprintf+0xbba>
    d2aa:	2906      	cmp	r1, #6
    d2ac:	bf1c      	itt	ne
    d2ae:	f803 5b01 	strbne.w	r5, [r3], #1
    d2b2:	f1a7 0a04 	subne.w	sl, r7, #4
    d2b6:	f803 5b01 	strb.w	r5, [r3], #1
    d2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
    d2be:	f803 5b01 	strb.w	r5, [r3], #1
    d2c2:	f10a 3aff 	add.w	sl, sl, #4294967295
    d2c6:	f803 5b01 	strb.w	r5, [r3], #1
    d2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
    d2ce:	f803 5b01 	strb.w	r5, [r3], #1
    d2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
    d2d6:	f803 5b01 	strb.w	r5, [r3], #1
    d2da:	f10a 3aff 	add.w	sl, sl, #4294967295
    d2de:	e010      	b.n	d302 <am_util_stdio_vsprintf+0xbfe>
    d2e0:	f88c 5000 	strb.w	r5, [ip]
    d2e4:	3308      	adds	r3, #8
    d2e6:	f803 5c06 	strb.w	r5, [r3, #-6]
    d2ea:	f803 5c05 	strb.w	r5, [r3, #-5]
    d2ee:	f803 5c04 	strb.w	r5, [r3, #-4]
    d2f2:	f803 5c03 	strb.w	r5, [r3, #-3]
    d2f6:	f803 5c02 	strb.w	r5, [r3, #-2]
    d2fa:	f1aa 0a08 	sub.w	sl, sl, #8
    d2fe:	f803 5c01 	strb.w	r5, [r3, #-1]
    d302:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    d304:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    d308:	f80c 5b01 	strb.w	r5, [ip], #1
    d30c:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    d310:	d1e6      	bne.n	d2e0 <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d312:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d314:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    d316:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d318:	2a00      	cmp	r2, #0
    d31a:	d084      	beq.n	d226 <am_util_stdio_vsprintf+0xb22>
    d31c:	2d20      	cmp	r5, #32
    d31e:	d182      	bne.n	d226 <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    d320:	f1b8 0f00 	cmp.w	r8, #0
    d324:	f47f af78 	bne.w	d218 <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d328:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d32c:	2200      	movs	r2, #0
    d32e:	f7ff f8eb 	bl	c508 <uint64_to_str>
                        ++ui32CharCnt;
    d332:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d336:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d33a:	4481      	add	r9, r0
    d33c:	f7ff bb94 	b.w	ca68 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d340:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    d342:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    d346:	f340 82bc 	ble.w	d8c2 <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    d34a:	2201      	movs	r2, #1
    d34c:	1eb8      	subs	r0, r7, #2
    d34e:	921b      	str	r2, [sp, #108]	; 0x6c
    d350:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d352:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    d354:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d356:	2f00      	cmp	r7, #0
    d358:	f000 821b 	beq.w	d792 <am_util_stdio_vsprintf+0x108e>
    d35c:	2d20      	cmp	r5, #32
    d35e:	d0e3      	beq.n	d328 <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d360:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d364:	2200      	movs	r2, #0
    d366:	f7ff f8cf 	bl	c508 <uint64_to_str>
    d36a:	e765      	b.n	d238 <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    d36c:	2700      	movs	r7, #0
    d36e:	2400      	movs	r4, #0
    d370:	f7ff baee 	b.w	c950 <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d374:	ee17 7a90 	vmov	r7, s15
    d378:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    d37c:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d380:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    d384:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d386:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    d38a:	f300 8246 	bgt.w	d81a <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    d38e:	f111 0f17 	cmn.w	r1, #23
    d392:	f2c0 823c 	blt.w	d80e <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    d396:	2916      	cmp	r1, #22
    d398:	dd2f      	ble.n	d3fa <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    d39a:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    d39e:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    d3a0:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d3a4:	f2c0 825c 	blt.w	d860 <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    d3a8:	2800      	cmp	r0, #0
    d3aa:	f040 824c 	bne.w	d846 <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    d3ae:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    d3b0:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    d3b4:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    d3b8:	f888 4000 	strb.w	r4, [r8]
    d3bc:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    d3c0:	1caa      	adds	r2, r5, #2
    d3c2:	f04f 0430 	mov.w	r4, #48	; 0x30
    d3c6:	706c      	strb	r4, [r5, #1]
    d3c8:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    d3cc:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    d3ce:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    d3d0:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    d3d2:	f2c0 81e7 	blt.w	d7a4 <am_util_stdio_vsprintf+0x10a0>
    d3d6:	4682      	mov	sl, r0
    d3d8:	f7ff bb44 	b.w	ca64 <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    d3dc:	2400      	movs	r4, #0
    d3de:	f04f 0c00 	mov.w	ip, #0
    d3e2:	e670      	b.n	d0c6 <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d3e4:	4606      	mov	r6, r0
    d3e6:	2400      	movs	r4, #0
    d3e8:	f7ff b9f4 	b.w	c7d4 <am_util_stdio_vsprintf+0xd0>
    d3ec:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    d3f0:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    d3f2:	1886      	adds	r6, r0, r2
    d3f4:	5c82      	ldrb	r2, [r0, r2]
    d3f6:	f7ff b9f9 	b.w	c7ec <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    d3fa:	2900      	cmp	r1, #0
    d3fc:	f2c0 8214 	blt.w	d828 <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d400:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    d404:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d408:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    d40c:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d40e:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d412:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    d416:	f2c0 823b 	blt.w	d890 <am_util_stdio_vsprintf+0x118c>
    d41a:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    d41c:	462a      	mov	r2, r5
    d41e:	17c1      	asrs	r1, r0, #31
    d420:	f7ff f872 	bl	c508 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d424:	7829      	ldrb	r1, [r5, #0]
    d426:	b119      	cbz	r1, d430 <am_util_stdio_vsprintf+0xd2c>
    d428:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    d42c:	2800      	cmp	r0, #0
    d42e:	d1fb      	bne.n	d428 <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    d430:	222e      	movs	r2, #46	; 0x2e
    d432:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    d434:	2c00      	cmp	r4, #0
    d436:	d0c3      	beq.n	d3c0 <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    d438:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d43a:	eba2 0008 	sub.w	r0, r2, r8
    d43e:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d442:	45e2      	cmp	sl, ip
    d444:	bfa8      	it	ge
    d446:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    d448:	f1ba 0f00 	cmp.w	sl, #0
    d44c:	f340 80b2 	ble.w	d5b4 <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    d450:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d454:	0067      	lsls	r7, r4, #1
    d456:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d45a:	1639      	asrs	r1, r7, #24
    d45c:	3130      	adds	r1, #48	; 0x30
    d45e:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    d462:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d464:	7069      	strb	r1, [r5, #1]
    d466:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    d468:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    d46c:	f00e 0507 	and.w	r5, lr, #7
    d470:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    d472:	f000 809c 	beq.w	d5ae <am_util_stdio_vsprintf+0xeaa>
    d476:	2d00      	cmp	r5, #0
    d478:	d04d      	beq.n	d516 <am_util_stdio_vsprintf+0xe12>
    d47a:	2d01      	cmp	r5, #1
    d47c:	d03f      	beq.n	d4fe <am_util_stdio_vsprintf+0xdfa>
    d47e:	2d02      	cmp	r5, #2
    d480:	d034      	beq.n	d4ec <am_util_stdio_vsprintf+0xde8>
    d482:	2d03      	cmp	r5, #3
    d484:	d029      	beq.n	d4da <am_util_stdio_vsprintf+0xdd6>
    d486:	2d04      	cmp	r5, #4
    d488:	d01e      	beq.n	d4c8 <am_util_stdio_vsprintf+0xdc4>
    d48a:	2d05      	cmp	r5, #5
    d48c:	d013      	beq.n	d4b6 <am_util_stdio_vsprintf+0xdb2>
    d48e:	2d06      	cmp	r5, #6
    d490:	d008      	beq.n	d4a4 <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    d492:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d496:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d498:	1639      	asrs	r1, r7, #24
    d49a:	3130      	adds	r1, #48	; 0x30
    d49c:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4a0:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4a4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d4a8:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4aa:	162c      	asrs	r4, r5, #24
    d4ac:	3430      	adds	r4, #48	; 0x30
    d4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4b2:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4b6:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    d4ba:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4bc:	1601      	asrs	r1, r0, #24
    d4be:	3130      	adds	r1, #48	; 0x30
    d4c0:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4c4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4c8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d4cc:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4ce:	1627      	asrs	r7, r4, #24
    d4d0:	3730      	adds	r7, #48	; 0x30
    d4d2:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4da:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d4de:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4e0:	1629      	asrs	r1, r5, #24
    d4e2:	3130      	adds	r1, #48	; 0x30
    d4e4:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4e8:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d4f0:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4f2:	1638      	asrs	r0, r7, #24
    d4f4:	3030      	adds	r0, #48	; 0x30
    d4f6:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d4fa:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d4fe:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d502:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d504:	1621      	asrs	r1, r4, #24
    d506:	3130      	adds	r1, #48	; 0x30
    d508:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    d50c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    d50e:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d510:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d514:	d04b      	beq.n	d5ae <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    d516:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d51a:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d51c:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d520:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    d524:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    d526:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d52a:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    d52e:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d532:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d536:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    d53a:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d53e:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d542:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    d546:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d548:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d54c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    d550:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d552:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d556:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d55a:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    d55c:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d55e:	3130      	adds	r1, #48	; 0x30
    d560:	1624      	asrs	r4, r4, #24
    d562:	3430      	adds	r4, #48	; 0x30
    d564:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    d566:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d56a:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    d56c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    d570:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d572:	1601      	asrs	r1, r0, #24
    d574:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    d578:	1620      	asrs	r0, r4, #24
    d57a:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    d57e:	163f      	asrs	r7, r7, #24
    d580:	162d      	asrs	r5, r5, #24
    d582:	3730      	adds	r7, #48	; 0x30
    d584:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d588:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    d58c:	3530      	adds	r5, #48	; 0x30
    d58e:	3130      	adds	r1, #48	; 0x30
    d590:	3030      	adds	r0, #48	; 0x30
    d592:	715f      	strb	r7, [r3, #5]
    d594:	f883 c003 	strb.w	ip, [r3, #3]
    d598:	f883 e004 	strb.w	lr, [r3, #4]
    d59c:	719d      	strb	r5, [r3, #6]
    d59e:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    d5a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d5a2:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    d5a6:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d5a8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d5ac:	d1b3      	bne.n	d516 <am_util_stdio_vsprintf+0xe12>
    d5ae:	4452      	add	r2, sl
    d5b0:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d5b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d5b8:	f343 55c7 	sbfx	r5, r3, #23, #8
    d5bc:	2d04      	cmp	r5, #4
    d5be:	f77f af05 	ble.w	d3cc <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    d5c2:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d5c4:	4598      	cmp	r8, r3
    d5c6:	f63f af01 	bhi.w	d3cc <am_util_stdio_vsprintf+0xcc8>
    d5ca:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    d5ce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    d5d2:	1afc      	subs	r4, r7, r3
    d5d4:	43e5      	mvns	r5, r4
    d5d6:	292e      	cmp	r1, #46	; 0x2e
    d5d8:	f005 0407 	and.w	r4, r5, #7
    d5dc:	d005      	beq.n	d5ea <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    d5de:	2939      	cmp	r1, #57	; 0x39
    d5e0:	f040 8161 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d5e4:	f04f 0130 	mov.w	r1, #48	; 0x30
    d5e8:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d5ea:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d5ec:	42bb      	cmp	r3, r7
    d5ee:	f43f aeed 	beq.w	d3cc <am_util_stdio_vsprintf+0xcc8>
    d5f2:	2c00      	cmp	r4, #0
    d5f4:	d054      	beq.n	d6a0 <am_util_stdio_vsprintf+0xf9c>
    d5f6:	2c01      	cmp	r4, #1
    d5f8:	d045      	beq.n	d686 <am_util_stdio_vsprintf+0xf82>
    d5fa:	2c02      	cmp	r4, #2
    d5fc:	d039      	beq.n	d672 <am_util_stdio_vsprintf+0xf6e>
    d5fe:	2c03      	cmp	r4, #3
    d600:	d02d      	beq.n	d65e <am_util_stdio_vsprintf+0xf5a>
    d602:	2c04      	cmp	r4, #4
    d604:	d021      	beq.n	d64a <am_util_stdio_vsprintf+0xf46>
    d606:	2c05      	cmp	r4, #5
    d608:	d015      	beq.n	d636 <am_util_stdio_vsprintf+0xf32>
    d60a:	2c06      	cmp	r4, #6
    d60c:	d009      	beq.n	d622 <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    d60e:	7819      	ldrb	r1, [r3, #0]
    d610:	292e      	cmp	r1, #46	; 0x2e
    d612:	d005      	beq.n	d620 <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    d614:	2939      	cmp	r1, #57	; 0x39
    d616:	f040 8146 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d61a:	f04f 0530 	mov.w	r5, #48	; 0x30
    d61e:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d620:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d622:	7819      	ldrb	r1, [r3, #0]
    d624:	292e      	cmp	r1, #46	; 0x2e
    d626:	d005      	beq.n	d634 <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    d628:	2939      	cmp	r1, #57	; 0x39
    d62a:	f040 813c 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d62e:	f04f 0430 	mov.w	r4, #48	; 0x30
    d632:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d634:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d636:	7819      	ldrb	r1, [r3, #0]
    d638:	292e      	cmp	r1, #46	; 0x2e
    d63a:	d005      	beq.n	d648 <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    d63c:	2939      	cmp	r1, #57	; 0x39
    d63e:	f040 8132 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d642:	f04f 0130 	mov.w	r1, #48	; 0x30
    d646:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d648:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d64a:	7819      	ldrb	r1, [r3, #0]
    d64c:	292e      	cmp	r1, #46	; 0x2e
    d64e:	d005      	beq.n	d65c <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    d650:	2939      	cmp	r1, #57	; 0x39
    d652:	f040 8128 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d656:	f04f 0530 	mov.w	r5, #48	; 0x30
    d65a:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d65c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d65e:	7819      	ldrb	r1, [r3, #0]
    d660:	292e      	cmp	r1, #46	; 0x2e
    d662:	d005      	beq.n	d670 <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    d664:	2939      	cmp	r1, #57	; 0x39
    d666:	f040 811e 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d66a:	f04f 0430 	mov.w	r4, #48	; 0x30
    d66e:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d670:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d672:	7819      	ldrb	r1, [r3, #0]
    d674:	292e      	cmp	r1, #46	; 0x2e
    d676:	d005      	beq.n	d684 <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    d678:	2939      	cmp	r1, #57	; 0x39
    d67a:	f040 8114 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d67e:	f04f 0130 	mov.w	r1, #48	; 0x30
    d682:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d684:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d686:	7819      	ldrb	r1, [r3, #0]
    d688:	292e      	cmp	r1, #46	; 0x2e
    d68a:	d005      	beq.n	d698 <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    d68c:	2939      	cmp	r1, #57	; 0x39
    d68e:	f040 810a 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d692:	f04f 0530 	mov.w	r5, #48	; 0x30
    d696:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d698:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d69a:	42bb      	cmp	r3, r7
    d69c:	f43f ae96 	beq.w	d3cc <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    d6a0:	7819      	ldrb	r1, [r3, #0]
    d6a2:	292e      	cmp	r1, #46	; 0x2e
    d6a4:	d005      	beq.n	d6b2 <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    d6a6:	2939      	cmp	r1, #57	; 0x39
    d6a8:	f040 80fd 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6ac:	f04f 0430 	mov.w	r4, #48	; 0x30
    d6b0:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d6b2:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d6b4:	7819      	ldrb	r1, [r3, #0]
    d6b6:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d6b8:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    d6ba:	d005      	beq.n	d6c8 <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    d6bc:	2939      	cmp	r1, #57	; 0x39
    d6be:	f040 80f2 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6c2:	f04f 0130 	mov.w	r1, #48	; 0x30
    d6c6:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    d6c8:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    d6cc:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d6ce:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    d6d2:	d006      	beq.n	d6e2 <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    d6d4:	2939      	cmp	r1, #57	; 0x39
    d6d6:	f040 80e6 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6da:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d6de:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    d6e2:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    d6e6:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d6e8:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    d6ec:	d006      	beq.n	d6fc <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    d6ee:	2939      	cmp	r1, #57	; 0x39
    d6f0:	f040 80d9 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d6f4:	f04f 0330 	mov.w	r3, #48	; 0x30
    d6f8:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    d6fc:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    d700:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d702:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    d706:	d006      	beq.n	d716 <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    d708:	2939      	cmp	r1, #57	; 0x39
    d70a:	f040 80cc 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d70e:	f04f 0530 	mov.w	r5, #48	; 0x30
    d712:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    d716:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    d71a:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d71c:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    d720:	d006      	beq.n	d730 <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    d722:	2939      	cmp	r1, #57	; 0x39
    d724:	f040 80bf 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d728:	f04f 0430 	mov.w	r4, #48	; 0x30
    d72c:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    d730:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    d734:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d736:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    d73a:	d006      	beq.n	d74a <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    d73c:	2939      	cmp	r1, #57	; 0x39
    d73e:	f040 80b2 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d742:	f04f 0130 	mov.w	r1, #48	; 0x30
    d746:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    d74a:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    d74e:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d750:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    d754:	d006      	beq.n	d764 <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    d756:	2939      	cmp	r1, #57	; 0x39
    d758:	f040 80a5 	bne.w	d8a6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d75c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d760:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    d764:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    d768:	42bb      	cmp	r3, r7
    d76a:	d199      	bne.n	d6a0 <am_util_stdio_vsprintf+0xf9c>
    d76c:	e62e      	b.n	d3cc <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    d76e:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d772:	f10b 0307 	add.w	r3, fp, #7
    d776:	f023 0a07 	bic.w	sl, r3, #7
    d77a:	f10a 0b08 	add.w	fp, sl, #8
    d77e:	e9da 2300 	ldrd	r2, r3, [sl]
    d782:	f7ff b877 	b.w	c874 <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    d786:	7801      	ldrb	r1, [r0, #0]
    d788:	b369      	cbz	r1, d7e6 <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    d78a:	4607      	mov	r7, r0
    d78c:	2201      	movs	r2, #1
    d78e:	f7ff bb40 	b.w	ce12 <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d792:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d796:	463a      	mov	r2, r7
    d798:	f7fe feb6 	bl	c508 <uint64_to_str>
    d79c:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    d79e:	4481      	add	r9, r0
    d7a0:	f7ff b962 	b.w	ca68 <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d7a4:	1c43      	adds	r3, r0, #1
    d7a6:	d032      	beq.n	d80e <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d7a8:	3002      	adds	r0, #2
    d7aa:	d036      	beq.n	d81a <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d7ac:	4a4d      	ldr	r2, [pc, #308]	; (d8e4 <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d7ae:	f8c8 2000 	str.w	r2, [r8]
    d7b2:	f04f 0a03 	mov.w	sl, #3
    d7b6:	f7ff b955 	b.w	ca64 <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d7ba:	4642      	mov	r2, r8
    d7bc:	f7fe fea4 	bl	c508 <uint64_to_str>
                        ++ui32CharCnt;
    d7c0:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    d7c4:	4481      	add	r9, r0
    d7c6:	f7ff b94f 	b.w	ca68 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d7ca:	2200      	movs	r2, #0
    d7cc:	2500      	movs	r5, #0
    d7ce:	f7ff bb91 	b.w	cef4 <am_util_stdio_vsprintf+0x7f0>
    d7d2:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    d7d4:	f1b8 0f00 	cmp.w	r8, #0
    d7d8:	f43f abf9 	beq.w	cfce <am_util_stdio_vsprintf+0x8ca>
    d7dc:	4614      	mov	r4, r2
    d7de:	f7ff bbed 	b.w	cfbc <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    d7e2:	2c00      	cmp	r4, #0
    d7e4:	dc02      	bgt.n	d7ec <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    d7e6:	460f      	mov	r7, r1
    d7e8:	f7ff bb21 	b.w	ce2e <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    d7ec:	460f      	mov	r7, r1
    d7ee:	f7ff bb88 	b.w	cf02 <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    d7f2:	f1b8 0f00 	cmp.w	r8, #0
    d7f6:	f43f ada3 	beq.w	d340 <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    d7fa:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    d7fc:	232d      	movs	r3, #45	; 0x2d
    d7fe:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    d802:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    d806:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    d808:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    d80a:	44a0      	add	r8, r4
    d80c:	e531      	b.n	d272 <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d80e:	4a36      	ldr	r2, [pc, #216]	; (d8e8 <am_util_stdio_vsprintf+0x11e4>)
    d810:	e7cd      	b.n	d7ae <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d812:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    d816:	2201      	movs	r2, #1
    d818:	e5eb      	b.n	d3f2 <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d81a:	4a34      	ldr	r2, [pc, #208]	; (d8ec <am_util_stdio_vsprintf+0x11e8>)
    d81c:	e7c7      	b.n	d7ae <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    d81e:	f1b8 0f00 	cmp.w	r8, #0
    d822:	d13d      	bne.n	d8a0 <am_util_stdio_vsprintf+0x119c>
    d824:	4640      	mov	r0, r8
    d826:	e594      	b.n	d352 <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d828:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    d82a:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d82c:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    d830:	db27      	blt.n	d882 <am_util_stdio_vsprintf+0x117e>
    d832:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    d834:	f04f 0030 	mov.w	r0, #48	; 0x30
    d838:	7018      	strb	r0, [r3, #0]
    d83a:	1c5d      	adds	r5, r3, #1
    d83c:	e5f8      	b.n	d430 <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    d83e:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    d840:	2400      	movs	r4, #0
    d842:	941b      	str	r4, [sp, #108]	; 0x6c
    d844:	e515      	b.n	d272 <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    d846:	4643      	mov	r3, r8
    i32FracPart = 0;
    d848:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    d84a:	2800      	cmp	r0, #0
    d84c:	dc37      	bgt.n	d8be <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    d84e:	1c5d      	adds	r5, r3, #1
    d850:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    d852:	4240      	negs	r0, r0
    d854:	17c1      	asrs	r1, r0, #31
    d856:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    d858:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d85a:	f7fe fe55 	bl	c508 <uint64_to_str>
    d85e:	e5e1      	b.n	d424 <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    d860:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    d864:	f888 e000 	strb.w	lr, [r8]
    d868:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d86c:	bb78      	cbnz	r0, d8ce <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    d86e:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    d870:	f04f 0030 	mov.w	r0, #48	; 0x30
    d874:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    d878:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    d87c:	f108 0502 	add.w	r5, r8, #2
    d880:	e59e      	b.n	d3c0 <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    d882:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    d886:	f888 c000 	strb.w	ip, [r8]
    d88a:	f108 0301 	add.w	r3, r8, #1
    d88e:	e7d1      	b.n	d834 <am_util_stdio_vsprintf+0x1130>
    d890:	272d      	movs	r7, #45	; 0x2d
    d892:	f888 7000 	strb.w	r7, [r8]
    d896:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d89a:	2800      	cmp	r0, #0
    d89c:	d0ca      	beq.n	d834 <am_util_stdio_vsprintf+0x1130>
    d89e:	e7d4      	b.n	d84a <am_util_stdio_vsprintf+0x1146>
    d8a0:	f04f 0e00 	mov.w	lr, #0
    d8a4:	e535      	b.n	d312 <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    d8a6:	3101      	adds	r1, #1
    d8a8:	7019      	strb	r1, [r3, #0]
    d8aa:	e58f      	b.n	d3cc <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    d8ac:	460b      	mov	r3, r1
    d8ae:	4301      	orrs	r1, r0
    d8b0:	4602      	mov	r2, r0
    d8b2:	bf0c      	ite	eq
    d8b4:	2401      	moveq	r4, #1
    d8b6:	2400      	movne	r4, #0
                    bNeg = true;
    d8b8:	2001      	movs	r0, #1
    d8ba:	f7ff b906 	b.w	caca <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    d8be:	461d      	mov	r5, r3
    d8c0:	e5ac      	b.n	d41c <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d8c2:	4642      	mov	r2, r8
    d8c4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d8c8:	f7fe fe1e 	bl	c508 <uint64_to_str>
    d8cc:	e4b4      	b.n	d238 <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    d8ce:	2400      	movs	r4, #0
    d8d0:	e7bb      	b.n	d84a <am_util_stdio_vsprintf+0x1146>
    d8d2:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    d8d6:	7832      	ldrb	r2, [r6, #0]
    d8d8:	f7fe bf7c 	b.w	c7d4 <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    d8dc:	f04f 0c00 	mov.w	ip, #0
    d8e0:	e747      	b.n	d772 <am_util_stdio_vsprintf+0x106e>
    d8e2:	bf00      	nop
    d8e4:	003f2e3f 	.word	0x003f2e3f
    d8e8:	00302e30 	.word	0x00302e30
    d8ec:	00232e23 	.word	0x00232e23

0000d8f0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d8f0:	b40f      	push	{r0, r1, r2, r3}
    d8f2:	b530      	push	{r4, r5, lr}
    d8f4:	b083      	sub	sp, #12
    d8f6:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d8f8:	4c08      	ldr	r4, [pc, #32]	; (d91c <am_util_stdio_printf+0x2c>)
{
    d8fa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    d8fe:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d900:	4620      	mov	r0, r4
    d902:	f7fe feff 	bl	c704 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d906:	4b06      	ldr	r3, [pc, #24]	; (d920 <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d908:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    d90a:	6819      	ldr	r1, [r3, #0]
    d90c:	4620      	mov	r0, r4
    d90e:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d910:	4628      	mov	r0, r5
    d912:	b003      	add	sp, #12
    d914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d918:	b004      	add	sp, #16
    d91a:	4770      	bx	lr
    d91c:	1000102c 	.word	0x1000102c
    d920:	10001134 	.word	0x10001134

0000d924 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d924:	4801      	ldr	r0, [pc, #4]	; (d92c <am_util_stdio_terminal_clear+0x8>)
    d926:	f7ff bfe3 	b.w	d8f0 <am_util_stdio_printf>
    d92a:	bf00      	nop
    d92c:	0000f6f8 	.word	0x0000f6f8

0000d930 <am_bsp_uart_string_print>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    d930:	b510      	push	{r4, lr}
    d932:	b086      	sub	sp, #24
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcString[ui32StrLen] != 0)
    d934:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    d936:	2300      	movs	r3, #0
    d938:	9300      	str	r3, [sp, #0]
    while (pcString[ui32StrLen] != 0)
    d93a:	b134      	cbz	r4, d94a <am_bsp_uart_string_print+0x1a>
    d93c:	461c      	mov	r4, r3
    d93e:	4601      	mov	r1, r0
    d940:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        ui32StrLen++;
    d944:	3401      	adds	r4, #1
    while (pcString[ui32StrLen] != 0)
    d946:	2a00      	cmp	r2, #0
    d948:	d1fa      	bne.n	d940 <am_bsp_uart_string_print+0x10>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d94a:	4b0a      	ldr	r3, [pc, #40]	; (d974 <am_bsp_uart_string_print+0x44>)
    const am_hal_uart_transfer_t sUartWrite =
    d94c:	9002      	str	r0, [sp, #8]
    d94e:	2200      	movs	r2, #0
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d950:	6818      	ldr	r0, [r3, #0]
    const am_hal_uart_transfer_t sUartWrite =
    d952:	9403      	str	r4, [sp, #12]
    d954:	f04f 33ff 	mov.w	r3, #4294967295
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d958:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    d95a:	9201      	str	r2, [sp, #4]
    d95c:	9304      	str	r3, [sp, #16]
    d95e:	f8cd d014 	str.w	sp, [sp, #20]
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d962:	f000 ff4d 	bl	e800 <am_hal_uart_transfer>

    if (ui32BytesWritten != ui32StrLen)
    d966:	9800      	ldr	r0, [sp, #0]
    d968:	42a0      	cmp	r0, r4
    d96a:	d000      	beq.n	d96e <am_bsp_uart_string_print+0x3e>
    d96c:	e7fe      	b.n	d96c <am_bsp_uart_string_print+0x3c>
        //
        // Couldn't send the whole string!!
        //
        while(1);
    }
} // am_bsp_uart_string_print()
    d96e:	b006      	add	sp, #24
    d970:	bd10      	pop	{r4, pc}
    d972:	bf00      	nop
    d974:	1000112c 	.word	0x1000112c

0000d978 <am_bsp_low_power_init>:
{
    d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    am_hal_itm_disable();
    d97a:	f000 fbcb 	bl	e114 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d97e:	2000      	movs	r0, #0
    d980:	f7fe feba 	bl	c6f8 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d984:	4b12      	ldr	r3, [pc, #72]	; (d9d0 <am_bsp_low_power_init+0x58>)
    d986:	4f13      	ldr	r7, [pc, #76]	; (d9d4 <am_bsp_low_power_init+0x5c>)
    d988:	6819      	ldr	r1, [r3, #0]
    d98a:	2029      	movs	r0, #41	; 0x29
    d98c:	f000 fa34 	bl	ddf8 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d990:	f000 fd4a 	bl	e428 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d994:	2001      	movs	r0, #1
    d996:	f000 fd85 	bl	e4a4 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d99a:	2100      	movs	r1, #0
    d99c:	2003      	movs	r0, #3
    d99e:	f000 f89f 	bl	dae0 <am_hal_clkgen_control>
    am_hal_rtc_osc_disable();
    d9a2:	f000 fd8b 	bl	e4bc <am_hal_rtc_osc_disable>
    d9a6:	480c      	ldr	r0, [pc, #48]	; (d9d8 <am_bsp_low_power_init+0x60>)
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d9a8:	6806      	ldr	r6, [r0, #0]
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9aa:	2400      	movs	r4, #0
        ui32GPIONumber = am_bsp_psLEDs[ux].ui32GPIONumber;
    d9ac:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
        am_hal_gpio_pinconfig(ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d9b0:	4631      	mov	r1, r6
    d9b2:	4628      	mov	r0, r5
    d9b4:	f000 fa20 	bl	ddf8 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d9b8:	2103      	movs	r1, #3
    d9ba:	4628      	mov	r0, r5
    d9bc:	f000 fb5e 	bl	e07c <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9c0:	3401      	adds	r4, #1
        am_hal_gpio_state_write(ui32GPIONumber, AM_HAL_GPIO_OUTPUT_CLEAR);
    d9c2:	4628      	mov	r0, r5
    d9c4:	2100      	movs	r1, #0
    d9c6:	f000 fb59 	bl	e07c <am_hal_gpio_state_write>
    for (ux = 0; ux < AM_BSP_NUM_LEDS; ux++)
    d9ca:	2c05      	cmp	r4, #5
    d9cc:	d1ee      	bne.n	d9ac <am_bsp_low_power_init+0x34>
} // am_bsp_low_power_init()
    d9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9d0:	0000f78c 	.word	0x0000f78c
    d9d4:	10001000 	.word	0x10001000
    d9d8:	0000f790 	.word	0x0000f790

0000d9dc <am_bsp_uart_printf_enable>:
// Initialize and configure the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_enable(void)
{
    d9dc:	b510      	push	{r4, lr}
    //
    // Initialize, power up, and configure the communication UART. Use the
    // custom configuration if it was provided. Otherwise, just use the default
    // configuration.
    //
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d9de:	4c10      	ldr	r4, [pc, #64]	; (da20 <am_bsp_uart_printf_enable+0x44>)
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d9e0:	4b10      	ldr	r3, [pc, #64]	; (da24 <am_bsp_uart_printf_enable+0x48>)
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d9e2:	4621      	mov	r1, r4
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d9e4:	2202      	movs	r2, #2
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d9e6:	2000      	movs	r0, #0
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d9e8:	601a      	str	r2, [r3, #0]
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d9ea:	f000 fd71 	bl	e4d0 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    d9ee:	2200      	movs	r2, #0
    d9f0:	4611      	mov	r1, r2
    d9f2:	6820      	ldr	r0, [r4, #0]
    d9f4:	f000 fda8 	bl	e548 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d9f8:	6820      	ldr	r0, [r4, #0]
    d9fa:	490b      	ldr	r1, [pc, #44]	; (da28 <am_bsp_uart_printf_enable+0x4c>)

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d9fc:	4c0b      	ldr	r4, [pc, #44]	; (da2c <am_bsp_uart_printf_enable+0x50>)
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d9fe:	f000 fe15 	bl	e62c <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    da02:	490b      	ldr	r1, [pc, #44]	; (da30 <am_bsp_uart_printf_enable+0x54>)
    da04:	2016      	movs	r0, #22
    da06:	6809      	ldr	r1, [r1, #0]
    da08:	f000 f9f6 	bl	ddf8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    da0c:	6821      	ldr	r1, [r4, #0]
    da0e:	2017      	movs	r0, #23
    da10:	f000 f9f2 	bl	ddf8 <am_hal_gpio_pinconfig>

    //
    // Register the BSP print function to the STDIO driver.
    //
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    da14:	4807      	ldr	r0, [pc, #28]	; (da34 <am_bsp_uart_printf_enable+0x58>)
} // am_bsp_uart_printf_enable()
    da16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    da1a:	f7fe be6d 	b.w	c6f8 <am_util_stdio_printf_init>
    da1e:	bf00      	nop
    da20:	1000112c 	.word	0x1000112c
    da24:	10001130 	.word	0x10001130
    da28:	0000f70c 	.word	0x0000f70c
    da2c:	0000f734 	.word	0x0000f734
    da30:	0000f738 	.word	0x0000f738
    da34:	0000d931 	.word	0x0000d931

0000da38 <am_bsp_uart_printf_disable>:
// Disable the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_disable(void)
{
    da38:	b510      	push	{r4, lr}
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    da3a:	4c0d      	ldr	r4, [pc, #52]	; (da70 <am_bsp_uart_printf_disable+0x38>)
    da3c:	6820      	ldr	r0, [r4, #0]
    da3e:	f001 fb63 	bl	f108 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    da42:	2000      	movs	r0, #0
    da44:	f7fe fe58 	bl	c6f8 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    da48:	2200      	movs	r2, #0
    da4a:	2102      	movs	r1, #2
    da4c:	6820      	ldr	r0, [r4, #0]
    da4e:	f000 fd7b 	bl	e548 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    da52:	6820      	ldr	r0, [r4, #0]
    da54:	f000 fd64 	bl	e520 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    da58:	4b06      	ldr	r3, [pc, #24]	; (da74 <am_bsp_uart_printf_disable+0x3c>)
    da5a:	681c      	ldr	r4, [r3, #0]
    da5c:	2016      	movs	r0, #22
    da5e:	4621      	mov	r1, r4
    da60:	f000 f9ca 	bl	ddf8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    da64:	4621      	mov	r1, r4
    da66:	2017      	movs	r0, #23

} // am_bsp_uart_printf_disable()
    da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    da6c:	f000 b9c4 	b.w	ddf8 <am_hal_gpio_pinconfig>
    da70:	1000112c 	.word	0x1000112c
    da74:	0000f78c 	.word	0x0000f78c

0000da78 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    da78:	b530      	push	{r4, r5, lr}
    da7a:	b083      	sub	sp, #12
    da7c:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    da7e:	f000 fb41 	bl	e104 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    da82:	4c11      	ldr	r4, [pc, #68]	; (dac8 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    da84:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    da86:	6823      	ldr	r3, [r4, #0]
    da88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    da8c:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    da8e:	9801      	ldr	r0, [sp, #4]
    da90:	f000 fb3c 	bl	e10c <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    da94:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    da96:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    da98:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    da9a:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    da9c:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    da9e:	005d      	lsls	r5, r3, #1
    daa0:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    daa4:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    daa6:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    daa8:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    daac:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    daae:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    dab2:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    dab6:	0212      	lsls	r2, r2, #8
    dab8:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    dabc:	432b      	orrs	r3, r5
    dabe:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    dac0:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    dac2:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    dac4:	b003      	add	sp, #12
    dac6:	bd30      	pop	{r4, r5, pc}
    dac8:	40018000 	.word	0x40018000

0000dacc <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    dacc:	4a03      	ldr	r2, [pc, #12]	; (dadc <am_hal_cachectrl_enable+0x10>)
    dace:	6813      	ldr	r3, [r2, #0]
    dad0:	f043 0001 	orr.w	r0, r3, #1
    dad4:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    dad6:	2000      	movs	r0, #0
    dad8:	4770      	bx	lr
    dada:	bf00      	nop
    dadc:	40018000 	.word	0x40018000

0000dae0 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    dae0:	2809      	cmp	r0, #9
    dae2:	d852      	bhi.n	db8a <am_hal_clkgen_control+0xaa>
    dae4:	e8df f000 	tbb	[pc, r0]
    dae8:	2b21190d 	.word	0x2b21190d
    daec:	51513d33 	.word	0x51513d33
    daf0:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    daf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    daf6:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    daf8:	6a1a      	ldr	r2, [r3, #32]
    dafa:	f36f 0200 	bfc	r2, #0, #1
    dafe:	621a      	str	r2, [r3, #32]
            break;
    db00:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db02:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    db06:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db08:	2047      	movs	r0, #71	; 0x47
    db0a:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    db0e:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    db12:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    db14:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    db18:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db1a:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db1e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db20:	68ca      	ldr	r2, [r1, #12]
    db22:	f022 0301 	bic.w	r3, r2, #1
    db26:	60cb      	str	r3, [r1, #12]
            break;
    db28:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db2a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db2e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db30:	f8dc 200c 	ldr.w	r2, [ip, #12]
    db34:	f022 0302 	bic.w	r3, r2, #2
    db38:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    db3c:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db3e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db42:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    db44:	68d3      	ldr	r3, [r2, #12]
    db46:	f043 0101 	orr.w	r1, r3, #1
    db4a:	60d1      	str	r1, [r2, #12]
            break;
    db4c:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db4e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db52:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    db54:	f8dc 300c 	ldr.w	r3, [ip, #12]
    db58:	f043 0102 	orr.w	r1, r3, #2
    db5c:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    db60:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    db66:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db68:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db6a:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db6c:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db6e:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    db70:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    db72:	615a      	str	r2, [r3, #20]
            break;
    db74:	4770      	bx	lr
            if ( pArgs == 0 )
    db76:	b151      	cbz	r1, db8e <am_hal_clkgen_control+0xae>
    db78:	6808      	ldr	r0, [r1, #0]
    db7a:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    db7e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db82:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    db84:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    db88:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    db8a:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    db8c:	4770      	bx	lr
    db8e:	4901      	ldr	r1, [pc, #4]	; (db94 <am_hal_clkgen_control+0xb4>)
    db90:	e7f5      	b.n	db7e <am_hal_clkgen_control+0x9e>
    db92:	bf00      	nop
    db94:	0025b801 	.word	0x0025b801

0000db98 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db98:	4b00      	ldr	r3, [pc, #0]	; (db9c <am_hal_flash_delay+0x4>)
    db9a:	4718      	bx	r3
    db9c:	0800009d 	.word	0x0800009d

0000dba0 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    dba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dba4:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dba8:	f8df 8248 	ldr.w	r8, [pc, #584]	; ddf4 <am_hal_flash_delay_status_check+0x254>
{
    dbac:	4607      	mov	r7, r0
    dbae:	460c      	mov	r4, r1
    dbb0:	4615      	mov	r5, r2
    dbb2:	461e      	mov	r6, r3
    dbb4:	f1be 0f00 	cmp.w	lr, #0
    dbb8:	f000 808e 	beq.w	dcd8 <am_hal_flash_delay_status_check+0x138>
    dbbc:	f010 0907 	ands.w	r9, r0, #7
    dbc0:	d044      	beq.n	dc4c <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbc2:	680b      	ldr	r3, [r1, #0]
    dbc4:	4013      	ands	r3, r2
    dbc6:	429e      	cmp	r6, r3
    dbc8:	f000 8083 	beq.w	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbcc:	2001      	movs	r0, #1
    dbce:	47c0      	blx	r8
    dbd0:	f1b9 0f01 	cmp.w	r9, #1
    dbd4:	f107 37ff 	add.w	r7, r7, #4294967295
    dbd8:	d038      	beq.n	dc4c <am_hal_flash_delay_status_check+0xac>
    dbda:	f1b9 0f02 	cmp.w	r9, #2
    dbde:	d02e      	beq.n	dc3e <am_hal_flash_delay_status_check+0x9e>
    dbe0:	f1b9 0f03 	cmp.w	r9, #3
    dbe4:	d024      	beq.n	dc30 <am_hal_flash_delay_status_check+0x90>
    dbe6:	f1b9 0f04 	cmp.w	r9, #4
    dbea:	d01a      	beq.n	dc22 <am_hal_flash_delay_status_check+0x82>
    dbec:	f1b9 0f05 	cmp.w	r9, #5
    dbf0:	d010      	beq.n	dc14 <am_hal_flash_delay_status_check+0x74>
    dbf2:	f1b9 0f06 	cmp.w	r9, #6
    dbf6:	d006      	beq.n	dc06 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbf8:	6820      	ldr	r0, [r4, #0]
    dbfa:	4028      	ands	r0, r5
    dbfc:	4286      	cmp	r6, r0
    dbfe:	d068      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc00:	2001      	movs	r0, #1
    dc02:	47c0      	blx	r8
    dc04:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc06:	6821      	ldr	r1, [r4, #0]
    dc08:	4029      	ands	r1, r5
    dc0a:	428e      	cmp	r6, r1
    dc0c:	d061      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc0e:	2001      	movs	r0, #1
    dc10:	47c0      	blx	r8
    dc12:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc14:	6822      	ldr	r2, [r4, #0]
    dc16:	402a      	ands	r2, r5
    dc18:	4296      	cmp	r6, r2
    dc1a:	d05a      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1c:	2001      	movs	r0, #1
    dc1e:	47c0      	blx	r8
    dc20:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc22:	6823      	ldr	r3, [r4, #0]
    dc24:	402b      	ands	r3, r5
    dc26:	429e      	cmp	r6, r3
    dc28:	d053      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc2a:	2001      	movs	r0, #1
    dc2c:	47c0      	blx	r8
    dc2e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc30:	6820      	ldr	r0, [r4, #0]
    dc32:	4028      	ands	r0, r5
    dc34:	4286      	cmp	r6, r0
    dc36:	d04c      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc38:	2001      	movs	r0, #1
    dc3a:	47c0      	blx	r8
    dc3c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc3e:	6821      	ldr	r1, [r4, #0]
    dc40:	4029      	ands	r1, r5
    dc42:	428e      	cmp	r6, r1
    dc44:	d045      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc46:	2001      	movs	r0, #1
    dc48:	3f01      	subs	r7, #1
    dc4a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc4c:	6822      	ldr	r2, [r4, #0]
    dc4e:	402a      	ands	r2, r5
    dc50:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc52:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc56:	d03c      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    dc58:	2f00      	cmp	r7, #0
    dc5a:	f000 80c8 	beq.w	ddee <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc5e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc60:	6823      	ldr	r3, [r4, #0]
    dc62:	402b      	ands	r3, r5
    dc64:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc66:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc6a:	d032      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc6c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc6e:	6821      	ldr	r1, [r4, #0]
    dc70:	4029      	ands	r1, r5
    dc72:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc74:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc78:	d02b      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc7a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc7c:	6822      	ldr	r2, [r4, #0]
    dc7e:	402a      	ands	r2, r5
    dc80:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc82:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc86:	d024      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc88:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc8a:	6823      	ldr	r3, [r4, #0]
    dc8c:	402b      	ands	r3, r5
    dc8e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc90:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc94:	d01d      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc96:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc98:	6821      	ldr	r1, [r4, #0]
    dc9a:	4029      	ands	r1, r5
    dc9c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc9e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dca2:	d016      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dca4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dca6:	6822      	ldr	r2, [r4, #0]
    dca8:	402a      	ands	r2, r5
    dcaa:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcac:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcb0:	d00f      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcb2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcb4:	6820      	ldr	r0, [r4, #0]
    dcb6:	4028      	ands	r0, r5
    dcb8:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcba:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcbe:	d008      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcc0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcc2:	6822      	ldr	r2, [r4, #0]
    dcc4:	402a      	ands	r2, r5
    dcc6:	4296      	cmp	r6, r2
    dcc8:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dccc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcd0:	d1c2      	bne.n	dc58 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dcd2:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcd8:	f010 0907 	ands.w	r9, r0, #7
    dcdc:	d043      	beq.n	dd66 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcde:	680b      	ldr	r3, [r1, #0]
    dce0:	4013      	ands	r3, r2
    dce2:	429e      	cmp	r6, r3
    dce4:	d1f5      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce6:	2001      	movs	r0, #1
    dce8:	47c0      	blx	r8
    dcea:	f1b9 0f01 	cmp.w	r9, #1
    dcee:	f107 37ff 	add.w	r7, r7, #4294967295
    dcf2:	d038      	beq.n	dd66 <am_hal_flash_delay_status_check+0x1c6>
    dcf4:	f1b9 0f02 	cmp.w	r9, #2
    dcf8:	d02e      	beq.n	dd58 <am_hal_flash_delay_status_check+0x1b8>
    dcfa:	f1b9 0f03 	cmp.w	r9, #3
    dcfe:	d024      	beq.n	dd4a <am_hal_flash_delay_status_check+0x1aa>
    dd00:	f1b9 0f04 	cmp.w	r9, #4
    dd04:	d01a      	beq.n	dd3c <am_hal_flash_delay_status_check+0x19c>
    dd06:	f1b9 0f05 	cmp.w	r9, #5
    dd0a:	d010      	beq.n	dd2e <am_hal_flash_delay_status_check+0x18e>
    dd0c:	f1b9 0f06 	cmp.w	r9, #6
    dd10:	d006      	beq.n	dd20 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd12:	6821      	ldr	r1, [r4, #0]
    dd14:	4029      	ands	r1, r5
    dd16:	428e      	cmp	r6, r1
    dd18:	d1db      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd1a:	2001      	movs	r0, #1
    dd1c:	47c0      	blx	r8
    dd1e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd20:	6822      	ldr	r2, [r4, #0]
    dd22:	402a      	ands	r2, r5
    dd24:	4296      	cmp	r6, r2
    dd26:	d1d4      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd28:	2001      	movs	r0, #1
    dd2a:	47c0      	blx	r8
    dd2c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd2e:	6820      	ldr	r0, [r4, #0]
    dd30:	4028      	ands	r0, r5
    dd32:	4286      	cmp	r6, r0
    dd34:	d1cd      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd36:	2001      	movs	r0, #1
    dd38:	47c0      	blx	r8
    dd3a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd3c:	6823      	ldr	r3, [r4, #0]
    dd3e:	402b      	ands	r3, r5
    dd40:	429e      	cmp	r6, r3
    dd42:	d1c6      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd44:	2001      	movs	r0, #1
    dd46:	47c0      	blx	r8
    dd48:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd4a:	6821      	ldr	r1, [r4, #0]
    dd4c:	4029      	ands	r1, r5
    dd4e:	428e      	cmp	r6, r1
    dd50:	d1bf      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd52:	2001      	movs	r0, #1
    dd54:	47c0      	blx	r8
    dd56:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd58:	6822      	ldr	r2, [r4, #0]
    dd5a:	402a      	ands	r2, r5
    dd5c:	4296      	cmp	r6, r2
    dd5e:	d1b8      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd60:	2001      	movs	r0, #1
    dd62:	3f01      	subs	r7, #1
    dd64:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd66:	6823      	ldr	r3, [r4, #0]
    dd68:	402b      	ands	r3, r5
    dd6a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd6c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd70:	d1af      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    dd72:	2f00      	cmp	r7, #0
    dd74:	d03b      	beq.n	ddee <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd76:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd78:	6821      	ldr	r1, [r4, #0]
    dd7a:	4029      	ands	r1, r5
    dd7c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd7e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd82:	d1a6      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd84:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd86:	6822      	ldr	r2, [r4, #0]
    dd88:	402a      	ands	r2, r5
    dd8a:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd8c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd90:	d19f      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd92:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd94:	6823      	ldr	r3, [r4, #0]
    dd96:	402b      	ands	r3, r5
    dd98:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd9a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd9e:	d198      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dda0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dda2:	6821      	ldr	r1, [r4, #0]
    dda4:	4029      	ands	r1, r5
    dda6:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dda8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddac:	d191      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddae:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddb0:	6822      	ldr	r2, [r4, #0]
    ddb2:	402a      	ands	r2, r5
    ddb4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddb6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddba:	d18a      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddbc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddbe:	6823      	ldr	r3, [r4, #0]
    ddc0:	402b      	ands	r3, r5
    ddc2:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddc4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddc8:	d183      	bne.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddca:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddcc:	6820      	ldr	r0, [r4, #0]
    ddce:	4028      	ands	r0, r5
    ddd0:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddd2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddd6:	f47f af7c 	bne.w	dcd2 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddda:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dddc:	6823      	ldr	r3, [r4, #0]
    ddde:	402b      	ands	r3, r5
    dde0:	429e      	cmp	r6, r3
    dde2:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dde6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddea:	d0c2      	beq.n	dd72 <am_hal_flash_delay_status_check+0x1d2>
    ddec:	e771      	b.n	dcd2 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    ddee:	2004      	movs	r0, #4
    ddf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ddf4:	0800009d 	.word	0x0800009d

0000ddf8 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    ddf8:	2831      	cmp	r0, #49	; 0x31
    ddfa:	d901      	bls.n	de00 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    ddfc:	2006      	movs	r0, #6
    ddfe:	4770      	bx	lr
{
    de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    de04:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    de08:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    de0c:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    de0e:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    de12:	d014      	beq.n	de3e <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de14:	f3c1 1642 	ubfx	r6, r1, #5, #3
    de18:	1db2      	adds	r2, r6, #6
    de1a:	f002 0707 	and.w	r7, r2, #7
    de1e:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    de20:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de24:	f200 80ab 	bhi.w	df7e <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    de28:	4a85      	ldr	r2, [pc, #532]	; (e040 <am_hal_gpio_pinconfig+0x248>)
    de2a:	5c17      	ldrb	r7, [r2, r0]
    de2c:	07ff      	lsls	r7, r7, #31
    de2e:	d403      	bmi.n	de38 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    de30:	4884      	ldr	r0, [pc, #528]	; (e044 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    de32:	b007      	add	sp, #28
    de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    de38:	1eb4      	subs	r4, r6, #2
    de3a:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    de3e:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    de42:	2e00      	cmp	r6, #0
    de44:	f040 8095 	bne.w	df72 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de48:	4a7f      	ldr	r2, [pc, #508]	; (e048 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de4a:	4f80      	ldr	r7, [pc, #512]	; (e04c <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de4c:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de4e:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de52:	411e      	asrs	r6, r3
    de54:	f016 0f01 	tst.w	r6, #1
    de58:	bf0c      	ite	eq
    de5a:	2600      	moveq	r6, #0
    de5c:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de5e:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de60:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de64:	f000 8097 	beq.w	df96 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de68:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de6c:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de6e:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de72:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    de76:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    de78:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de7c:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de80:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de84:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de88:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de8a:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de8e:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de92:	f000 808d 	beq.w	dfb0 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    de96:	4a6e      	ldr	r2, [pc, #440]	; (e050 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de98:	6816      	ldr	r6, [r2, #0]
    de9a:	1b8c      	subs	r4, r1, r6
    de9c:	fab4 f384 	clz	r3, r4
    dea0:	095f      	lsrs	r7, r3, #5
    dea2:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    dea4:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    dea8:	bf04      	itt	eq
    deaa:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    deae:	f367 0800 	bfieq	r8, r7, #0, #1
    deb2:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    deb4:	f3c1 2101 	ubfx	r1, r1, #8, #2
    deb8:	2902      	cmp	r1, #2
    deba:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    debe:	d07a      	beq.n	dfb6 <am_hal_gpio_pinconfig+0x1be>
    dec0:	d87f      	bhi.n	dfc2 <am_hal_gpio_pinconfig+0x1ca>
    dec2:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    dec4:	bf08      	it	eq
    dec6:	f045 0504 	orreq.w	r5, r5, #4
    deca:	f004 0a18 	and.w	sl, r4, #24
            break;
    dece:	2200      	movs	r2, #0
    ded0:	4604      	mov	r4, r0
    ded2:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    ded4:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    ded8:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    dedc:	485d      	ldr	r0, [pc, #372]	; (e054 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    dede:	495e      	ldr	r1, [pc, #376]	; (e058 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    dee0:	4f5e      	ldr	r7, [pc, #376]	; (e05c <am_hal_gpio_pinconfig+0x264>)
    dee2:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    dee4:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    dee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    deec:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    def0:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    def2:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    def6:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    def8:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    defc:	f000 f902 	bl	e104 <am_hal_interrupt_master_disable>
    df00:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    df02:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df06:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    df0a:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df0e:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    df12:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df14:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    df18:	9902      	ldr	r1, [sp, #8]
    df1a:	9a03      	ldr	r2, [sp, #12]
    df1c:	b150      	cbz	r0, df34 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    df1e:	f004 001f 	and.w	r0, r4, #31
    df22:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    df26:	f04f 0c01 	mov.w	ip, #1
    df2a:	4c4d      	ldr	r4, [pc, #308]	; (e060 <am_hal_gpio_pinconfig+0x268>)
    df2c:	fa0c f000 	lsl.w	r0, ip, r0
    df30:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    df34:	484b      	ldr	r0, [pc, #300]	; (e064 <am_hal_gpio_pinconfig+0x26c>)
    df36:	2473      	movs	r4, #115	; 0x73
    df38:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    df3a:	f8da 4000 	ldr.w	r4, [sl]
    df3e:	4034      	ands	r4, r6
    df40:	4325      	orrs	r5, r4
    df42:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    df46:	f859 5001 	ldr.w	r5, [r9, r1]
    df4a:	402f      	ands	r7, r5
    df4c:	ea47 0708 	orr.w	r7, r7, r8
    df50:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df54:	f85b 1003 	ldr.w	r1, [fp, r3]
    df58:	400e      	ands	r6, r1
    df5a:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    df5c:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df5e:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    df62:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    df64:	9805      	ldr	r0, [sp, #20]
    df66:	f000 f8d1 	bl	e10c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    df6a:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    df6c:	b007      	add	sp, #28
    df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df72:	2e01      	cmp	r6, #1
    df74:	d015      	beq.n	dfa2 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df76:	2e02      	cmp	r6, #2
    df78:	d030      	beq.n	dfdc <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    df7a:	483b      	ldr	r0, [pc, #236]	; (e068 <am_hal_gpio_pinconfig+0x270>)
    df7c:	e759      	b.n	de32 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    df7e:	2cc0      	cmp	r4, #192	; 0xc0
    df80:	d027      	beq.n	dfd2 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    df82:	2c20      	cmp	r4, #32
    df84:	f47f af5b 	bne.w	de3e <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    df88:	4c2d      	ldr	r4, [pc, #180]	; (e040 <am_hal_gpio_pinconfig+0x248>)
    df8a:	5c26      	ldrb	r6, [r4, r0]
    df8c:	f016 0f09 	tst.w	r6, #9
    df90:	f47f af4e 	bne.w	de30 <am_hal_gpio_pinconfig+0x38>
    df94:	e753      	b.n	de3e <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    df96:	f3c1 4202 	ubfx	r2, r1, #16, #3
    df9a:	2a07      	cmp	r2, #7
    df9c:	d125      	bne.n	dfea <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    df9e:	4833      	ldr	r0, [pc, #204]	; (e06c <am_hal_gpio_pinconfig+0x274>)
    dfa0:	e747      	b.n	de32 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    dfa2:	4c27      	ldr	r4, [pc, #156]	; (e040 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    dfa4:	5c26      	ldrb	r6, [r4, r0]
    dfa6:	07b4      	lsls	r4, r6, #30
    dfa8:	d5e7      	bpl.n	df7a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    dfaa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    dfae:	e74b      	b.n	de48 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    dfb0:	2701      	movs	r7, #1
    dfb2:	9700      	str	r7, [sp, #0]
    dfb4:	e776      	b.n	dea4 <am_hal_gpio_pinconfig+0xac>
    dfb6:	f004 0a18 	and.w	sl, r4, #24
    dfba:	2301      	movs	r3, #1
    dfbc:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    dfc0:	e786      	b.n	ded0 <am_hal_gpio_pinconfig+0xd8>
    dfc2:	f004 0a18 	and.w	sl, r4, #24
    dfc6:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    dfc8:	f045 0504 	orr.w	r5, r5, #4
    dfcc:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    dfd0:	e77e      	b.n	ded0 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    dfd2:	2814      	cmp	r0, #20
    dfd4:	f43f af33 	beq.w	de3e <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    dfd8:	4825      	ldr	r0, [pc, #148]	; (e070 <am_hal_gpio_pinconfig+0x278>)
    dfda:	e72a      	b.n	de32 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    dfdc:	4a18      	ldr	r2, [pc, #96]	; (e040 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    dfde:	5c17      	ldrb	r7, [r2, r0]
    dfe0:	077a      	lsls	r2, r7, #29
    dfe2:	d5ca      	bpl.n	df7a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    dfe4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    dfe8:	e72e      	b.n	de48 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfea:	4c22      	ldr	r4, [pc, #136]	; (e074 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dfec:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dff0:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dff4:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dff8:	45b0      	cmp	r8, r6
    dffa:	d010      	beq.n	e01e <am_hal_gpio_pinconfig+0x226>
    dffc:	0087      	lsls	r7, r0, #2
    dffe:	eb04 0907 	add.w	r9, r4, r7
    e002:	f899 3001 	ldrb.w	r3, [r9, #1]
    e006:	42b3      	cmp	r3, r6
    e008:	d015      	beq.n	e036 <am_hal_gpio_pinconfig+0x23e>
    e00a:	f899 2002 	ldrb.w	r2, [r9, #2]
    e00e:	42b2      	cmp	r2, r6
    e010:	d00f      	beq.n	e032 <am_hal_gpio_pinconfig+0x23a>
    e012:	f899 4003 	ldrb.w	r4, [r9, #3]
    e016:	42b4      	cmp	r4, r6
    e018:	d00f      	beq.n	e03a <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    e01a:	4817      	ldr	r0, [pc, #92]	; (e078 <am_hal_gpio_pinconfig+0x280>)
    e01c:	e709      	b.n	de32 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e01e:	2600      	movs	r6, #0
    e020:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    e022:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e024:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    e028:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e02a:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    e02e:	9300      	str	r3, [sp, #0]
    e030:	e740      	b.n	deb4 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e032:	2602      	movs	r6, #2
    e034:	e7f5      	b.n	e022 <am_hal_gpio_pinconfig+0x22a>
    e036:	2601      	movs	r6, #1
    e038:	e7f3      	b.n	e022 <am_hal_gpio_pinconfig+0x22a>
    e03a:	2603      	movs	r6, #3
    e03c:	e7f1      	b.n	e022 <am_hal_gpio_pinconfig+0x22a>
    e03e:	bf00      	nop
    e040:	0000f794 	.word	0x0000f794
    e044:	08000100 	.word	0x08000100
    e048:	0000f7c8 	.word	0x0000f7c8
    e04c:	0000f8c4 	.word	0x0000f8c4
    e050:	0000f78c 	.word	0x0000f78c
    e054:	7ffffffc 	.word	0x7ffffffc
    e058:	400100e0 	.word	0x400100e0
    e05c:	40010040 	.word	0x40010040
    e060:	400100b4 	.word	0x400100b4
    e064:	40010000 	.word	0x40010000
    e068:	08000102 	.word	0x08000102
    e06c:	08000103 	.word	0x08000103
    e070:	08000101 	.word	0x08000101
    e074:	0000f7fc 	.word	0x0000f7fc
    e078:	08000104 	.word	0x08000104

0000e07c <am_hal_gpio_state_write>:
{
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    e07c:	2831      	cmp	r0, #49	; 0x31
    e07e:	d901      	bls.n	e084 <am_hal_gpio_state_write+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    e080:	2005      	movs	r0, #5
    e082:	4770      	bx	lr
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    e084:	2905      	cmp	r1, #5
    e086:	d901      	bls.n	e08c <am_hal_gpio_state_write+0x10>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    e088:	2006      	movs	r0, #6
    e08a:	4770      	bx	lr
{
    e08c:	b570      	push	{r4, r5, r6, lr}
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e08e:	f000 031f 	and.w	r3, r0, #31
{
    e092:	b082      	sub	sp, #8
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e094:	08c0      	lsrs	r0, r0, #3
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e096:	2201      	movs	r2, #1
    e098:	460d      	mov	r5, r1
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    e09a:	f000 0404 	and.w	r4, r0, #4
    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    e09e:	fa02 f603 	lsl.w	r6, r2, r3

    AM_CRITICAL_BEGIN;
    e0a2:	f000 f82f 	bl	e104 <am_hal_interrupt_master_disable>

#if AM_CMSIS_REGS
    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    switch ( eWriteType )
    e0a6:	1e69      	subs	r1, r5, #1
    AM_CRITICAL_BEGIN;
    e0a8:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    e0aa:	2904      	cmp	r1, #4
    e0ac:	d817      	bhi.n	e0de <am_hal_gpio_state_write+0x62>
    e0ae:	e8df f001 	tbb	[pc, r1]
    e0b2:	0e13      	.short	0x0e13
    e0b4:	030b      	.short	0x030b
    e0b6:	19          	.byte	0x19
    e0b7:	00          	.byte	0x00
            break;
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
            break;
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    e0b8:	4d0d      	ldr	r5, [pc, #52]	; (e0f0 <am_hal_gpio_state_write+0x74>)
    e0ba:	5166      	str	r6, [r4, r5]
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }
#endif // AM_CMSIS_REGS

    AM_CRITICAL_END;
    e0bc:	9801      	ldr	r0, [sp, #4]
    e0be:	f000 f825 	bl	e10c <am_hal_interrupt_master_set>

    return ui32Return;
    e0c2:	2000      	movs	r0, #0
} // am_hal_gpio_state_write()
    e0c4:	b002      	add	sp, #8
    e0c6:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    e0c8:	4b0a      	ldr	r3, [pc, #40]	; (e0f4 <am_hal_gpio_state_write+0x78>)
    e0ca:	50e6      	str	r6, [r4, r3]
            break;
    e0cc:	e7f6      	b.n	e0bc <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    e0ce:	480a      	ldr	r0, [pc, #40]	; (e0f8 <am_hal_gpio_state_write+0x7c>)
    e0d0:	5822      	ldr	r2, [r4, r0]
    e0d2:	4072      	eors	r2, r6
    e0d4:	5022      	str	r2, [r4, r0]
            break;
    e0d6:	e7f1      	b.n	e0bc <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    e0d8:	4908      	ldr	r1, [pc, #32]	; (e0fc <am_hal_gpio_state_write+0x80>)
    e0da:	5066      	str	r6, [r4, r1]
            break;
    e0dc:	e7ee      	b.n	e0bc <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    e0de:	4d08      	ldr	r5, [pc, #32]	; (e100 <am_hal_gpio_state_write+0x84>)
    e0e0:	5166      	str	r6, [r4, r5]
            break;
    e0e2:	e7eb      	b.n	e0bc <am_hal_gpio_state_write+0x40>
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    e0e4:	4803      	ldr	r0, [pc, #12]	; (e0f4 <am_hal_gpio_state_write+0x78>)
    e0e6:	5823      	ldr	r3, [r4, r0]
    e0e8:	4073      	eors	r3, r6
    e0ea:	5023      	str	r3, [r4, r0]
            break;
    e0ec:	e7e6      	b.n	e0bc <am_hal_gpio_state_write+0x40>
    e0ee:	bf00      	nop
    e0f0:	400100a8 	.word	0x400100a8
    e0f4:	400100b4 	.word	0x400100b4
    e0f8:	40010088 	.word	0x40010088
    e0fc:	40010090 	.word	0x40010090
    e100:	40010098 	.word	0x40010098

0000e104 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e104:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e108:	b672      	cpsid	i
    __asm("    bx lr");
    e10a:	4770      	bx	lr

0000e10c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e10c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e110:	4770      	bx	lr
    e112:	bf00      	nop

0000e114 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    e114:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    e116:	4b24      	ldr	r3, [pc, #144]	; (e1a8 <am_hal_itm_disable+0x94>)
    e118:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e11c:	b9b0      	cbnz	r0, e14c <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e11e:	4923      	ldr	r1, [pc, #140]	; (e1ac <am_hal_itm_disable+0x98>)
    e120:	68ca      	ldr	r2, [r1, #12]
    e122:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e126:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e128:	68cb      	ldr	r3, [r1, #12]
    e12a:	01da      	lsls	r2, r3, #7
    e12c:	d5fc      	bpl.n	e128 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e12e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e132:	481f      	ldr	r0, [pc, #124]	; (e1b0 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e134:	4a1f      	ldr	r2, [pc, #124]	; (e1b4 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e136:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e13a:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e13c:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e140:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e144:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e148:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e14c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e150:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e154:	021b      	lsls	r3, r3, #8
    e156:	d4fb      	bmi.n	e150 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e158:	f240 20f7 	movw	r0, #759	; 0x2f7
    e15c:	f7ff fd1c 	bl	db98 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e160:	4813      	ldr	r0, [pc, #76]	; (e1b0 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e162:	4915      	ldr	r1, [pc, #84]	; (e1b8 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e164:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e168:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e16c:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e16e:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e172:	f022 0401 	bic.w	r4, r2, #1
    e176:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e17a:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e17e:	420b      	tst	r3, r1
    e180:	d1fb      	bne.n	e17a <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e182:	3801      	subs	r0, #1
    e184:	d1f3      	bne.n	e16e <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e186:	4909      	ldr	r1, [pc, #36]	; (e1ac <am_hal_itm_disable+0x98>)
    e188:	68ca      	ldr	r2, [r1, #12]
    e18a:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e18e:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e190:	68cb      	ldr	r3, [r1, #12]
    e192:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e196:	d1fb      	bne.n	e190 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e198:	4903      	ldr	r1, [pc, #12]	; (e1a8 <am_hal_itm_disable+0x94>)
    e19a:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e19e:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e1a2:	2a00      	cmp	r2, #0
    e1a4:	d1fb      	bne.n	e19e <am_hal_itm_disable+0x8a>
}
    e1a6:	bd10      	pop	{r4, pc}
    e1a8:	40020000 	.word	0x40020000
    e1ac:	e000edf0 	.word	0xe000edf0
    e1b0:	c5acce55 	.word	0xc5acce55
    e1b4:	00150511 	.word	0x00150511
    e1b8:	00800001 	.word	0x00800001

0000e1bc <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e1bc:	b141      	cbz	r1, e1d0 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e1be:	2801      	cmp	r0, #1
{
    e1c0:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e1c2:	d03a      	beq.n	e23a <am_hal_mcuctrl_info_get+0x7e>
    e1c4:	d322      	bcc.n	e20c <am_hal_mcuctrl_info_get+0x50>
    e1c6:	2802      	cmp	r0, #2
    e1c8:	d004      	beq.n	e1d4 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e1ca:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e1cc:	bcf0      	pop	{r4, r5, r6, r7}
    e1ce:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e1d0:	2006      	movs	r0, #6
    e1d2:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1d4:	4a41      	ldr	r2, [pc, #260]	; (e2dc <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e1d6:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1d8:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e1dc:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1de:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1e2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1e6:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1ea:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1ec:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1ee:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e1f0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e1f4:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e1f6:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e1fa:	4334      	orrs	r4, r6
    e1fc:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e1fe:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e202:	4310      	orrs	r0, r2
    e204:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e206:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e208:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e20a:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e20c:	4c33      	ldr	r4, [pc, #204]	; (e2dc <am_hal_mcuctrl_info_get+0x120>)
    e20e:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e210:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e214:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e218:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e21a:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e21c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e220:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e224:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e226:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e228:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e22c:	f004 0501 	and.w	r5, r4, #1
    e230:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e232:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e234:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e236:	bcf0      	pop	{r4, r5, r6, r7}
    e238:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e23a:	4a28      	ldr	r2, [pc, #160]	; (e2dc <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e23c:	4c28      	ldr	r4, [pc, #160]	; (e2e0 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e23e:	6813      	ldr	r3, [r2, #0]
    e240:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e242:	6850      	ldr	r0, [r2, #4]
    e244:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e246:	6897      	ldr	r7, [r2, #8]
    e248:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e24a:	68d6      	ldr	r6, [r2, #12]
    e24c:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e24e:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e250:	4824      	ldr	r0, [pc, #144]	; (e2e4 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e252:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e254:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e258:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e25c:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e25e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e262:	4a21      	ldr	r2, [pc, #132]	; (e2e8 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e264:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e268:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e26a:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e26e:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e270:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e272:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e274:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e278:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e27c:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e27e:	f000 040f 	and.w	r4, r0, #15
    e282:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e286:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e288:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e28c:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e290:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e294:	f007 0c0f 	and.w	ip, r7, #15
    e298:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e29c:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e29e:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e2a2:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e2a6:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e2aa:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e2ae:	433b      	orrs	r3, r7
    e2b0:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e2b2:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e2b6:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e2ba:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2be:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e2c2:	b2e5      	uxtb	r5, r4
    e2c4:	042b      	lsls	r3, r5, #16
    e2c6:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2ca:	b2d6      	uxtb	r6, r2
    e2cc:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e2ce:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2d0:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e2d4:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e2d6:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e2d8:	bcf0      	pop	{r4, r5, r6, r7}
    e2da:	4770      	bx	lr
    e2dc:	40020000 	.word	0x40020000
    e2e0:	0000f8f8 	.word	0x0000f8f8
    e2e4:	0000f938 	.word	0x0000f938
    e2e8:	f0000f00 	.word	0xf0000f00

0000e2ec <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e2ec:	b570      	push	{r4, r5, r6, lr}
    e2ee:	b082      	sub	sp, #8
    e2f0:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    e2f2:	f7ff ff07 	bl	e104 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e2f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e2fa:	008c      	lsls	r4, r1, #2
    e2fc:	4e0e      	ldr	r6, [pc, #56]	; (e338 <am_hal_pwrctrl_periph_enable+0x4c>)
    e2fe:	4d0f      	ldr	r5, [pc, #60]	; (e33c <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    e300:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e302:	592a      	ldr	r2, [r5, r4]
    e304:	68b3      	ldr	r3, [r6, #8]
    e306:	4313      	orrs	r3, r2
    e308:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    e30a:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e30c:	442c      	add	r4, r5
    AM_CRITICAL_END
    e30e:	f7ff fefd 	bl	e10c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e312:	2077      	movs	r0, #119	; 0x77
    e314:	f7ff fc40 	bl	db98 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e318:	69b0      	ldr	r0, [r6, #24]
    e31a:	6864      	ldr	r4, [r4, #4]
    e31c:	4220      	tst	r0, r4
    e31e:	d103      	bne.n	e328 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e320:	2077      	movs	r0, #119	; 0x77
    e322:	f7ff fc39 	bl	db98 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e326:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    e328:	4903      	ldr	r1, [pc, #12]	; (e338 <am_hal_pwrctrl_periph_enable+0x4c>)
    e32a:	698d      	ldr	r5, [r1, #24]
    e32c:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    e32e:	bf0c      	ite	eq
    e330:	2001      	moveq	r0, #1
    e332:	2000      	movne	r0, #0
    e334:	b002      	add	sp, #8
    e336:	bd70      	pop	{r4, r5, r6, pc}
    e338:	40021000 	.word	0x40021000
    e33c:	0000fae0 	.word	0x0000fae0

0000e340 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e340:	b570      	push	{r4, r5, r6, lr}
    e342:	b082      	sub	sp, #8
    e344:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    e346:	f7ff fedd 	bl	e104 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e34a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e34e:	008c      	lsls	r4, r1, #2
    e350:	4e0f      	ldr	r6, [pc, #60]	; (e390 <am_hal_pwrctrl_periph_disable+0x50>)
    e352:	4d10      	ldr	r5, [pc, #64]	; (e394 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    e354:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e356:	68b3      	ldr	r3, [r6, #8]
    e358:	592a      	ldr	r2, [r5, r4]
    e35a:	ea23 0002 	bic.w	r0, r3, r2
    e35e:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    e360:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e362:	442c      	add	r4, r5
    AM_CRITICAL_END
    e364:	f7ff fed2 	bl	e10c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e368:	2077      	movs	r0, #119	; 0x77
    e36a:	f7ff fc15 	bl	db98 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e36e:	69b1      	ldr	r1, [r6, #24]
    e370:	6864      	ldr	r4, [r4, #4]
    e372:	4221      	tst	r1, r4
    e374:	d003      	beq.n	e37e <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e376:	2077      	movs	r0, #119	; 0x77
    e378:	f7ff fc0e 	bl	db98 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e37c:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e37e:	4d04      	ldr	r5, [pc, #16]	; (e390 <am_hal_pwrctrl_periph_disable+0x50>)
    e380:	69ae      	ldr	r6, [r5, #24]
    e382:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e384:	bf14      	ite	ne
    e386:	2001      	movne	r0, #1
    e388:	2000      	moveq	r0, #0
    e38a:	b002      	add	sp, #8
    e38c:	bd70      	pop	{r4, r5, r6, pc}
    e38e:	bf00      	nop
    e390:	40021000 	.word	0x40021000
    e394:	0000fae0 	.word	0x0000fae0

0000e398 <am_hal_pwrctrl_memory_enable>:
//  Enable a configuration of memory.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_memory_enable(am_hal_pwrctrl_mem_e eMemConfig)
{
    e398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if 0
    uint32_t ui32MemEventMask;
#endif
// #### INTERNAL END ####

    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e39c:	ea4f 0980 	mov.w	r9, r0, lsl #2
    e3a0:	eb09 0300 	add.w	r3, r9, r0
    e3a4:	4f1e      	ldr	r7, [pc, #120]	; (e420 <am_hal_pwrctrl_memory_enable+0x88>)
{
    e3a6:	4604      	mov	r4, r0
    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e3a8:	0098      	lsls	r0, r3, #2
    e3aa:	183a      	adds	r2, r7, r0
    e3ac:	583d      	ldr	r5, [r7, r0]
#if 0
    ui32MemEventMask  = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEvent;
#endif
// #### INTERNAL END ####
    ui32MemRegionMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryMask;
    ui32MemStatusMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32StatusMask;
    e3ae:	6916      	ldr	r6, [r2, #16]
    //
    // Note that a deliberate disable step using a disable mask is taken here
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    e3b0:	43eb      	mvns	r3, r5
    e3b2:	d126      	bne.n	e402 <am_hal_pwrctrl_memory_enable+0x6a>
// #### INTERNAL END ####

    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    e3b4:	b965      	cbnz	r5, e3d0 <am_hal_pwrctrl_memory_enable+0x38>
    e3b6:	444c      	add	r4, r9
    e3b8:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
    e3bc:	f8dc 5004 	ldr.w	r5, [ip, #4]

    //
    // Return status based on whether the power control memory status has reached the desired state.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3c0:	4918      	ldr	r1, [pc, #96]	; (e424 <am_hal_pwrctrl_memory_enable+0x8c>)
    e3c2:	694a      	ldr	r2, [r1, #20]
    e3c4:	4032      	ands	r2, r6
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e3c6:	1b50      	subs	r0, r2, r5
    e3c8:	bf18      	it	ne
    e3ca:	2001      	movne	r0, #1
    e3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3d0:	f8df 8050 	ldr.w	r8, [pc, #80]	; e424 <am_hal_pwrctrl_memory_enable+0x8c>
    e3d4:	f8d8 0010 	ldr.w	r0, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3d8:	444c      	add	r4, r9
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3da:	4305      	orrs	r5, r0
    e3dc:	f8c8 5010 	str.w	r5, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3e0:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e3e4:	2077      	movs	r0, #119	; 0x77
    e3e6:	f7ff fbd7 	bl	db98 <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3ea:	f8d8 7014 	ldr.w	r7, [r8, #20]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3ee:	6865      	ldr	r5, [r4, #4]
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3f0:	4037      	ands	r7, r6
    e3f2:	42af      	cmp	r7, r5
    e3f4:	d0e4      	beq.n	e3c0 <am_hal_pwrctrl_memory_enable+0x28>
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e3f6:	2077      	movs	r0, #119	; 0x77
    e3f8:	f7ff fbce 	bl	db98 <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
    e400:	e7de      	b.n	e3c0 <am_hal_pwrctrl_memory_enable+0x28>
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e402:	68d0      	ldr	r0, [r2, #12]
        PWRCTRL->MEMPWREN &=
    e404:	4907      	ldr	r1, [pc, #28]	; (e424 <am_hal_pwrctrl_memory_enable+0x8c>)
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e406:	4003      	ands	r3, r0
        PWRCTRL->MEMPWREN &=
    e408:	690a      	ldr	r2, [r1, #16]
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e40a:	f242 0801 	movw	r8, #8193	; 0x2001
    e40e:	ea68 0303 	orn	r3, r8, r3
        PWRCTRL->MEMPWREN &=
    e412:	4013      	ands	r3, r2
    e414:	610b      	str	r3, [r1, #16]
        am_hal_flash_delay(FLASH_CYCLES_US(1));
    e416:	2001      	movs	r0, #1
    e418:	f7ff fbbe 	bl	db98 <am_hal_flash_delay>
    e41c:	e7ca      	b.n	e3b4 <am_hal_pwrctrl_memory_enable+0x1c>
    e41e:	bf00      	nop
    e420:	0000f978 	.word	0x0000f978
    e424:	40021000 	.word	0x40021000

0000e428 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e428:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e42a:	4c1b      	ldr	r4, [pc, #108]	; (e498 <am_hal_pwrctrl_low_power_init+0x70>)
    e42c:	69a3      	ldr	r3, [r4, #24]
    e42e:	05db      	lsls	r3, r3, #23
{
    e430:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e432:	d502      	bpl.n	e43a <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e434:	2000      	movs	r0, #0
}
    e436:	b003      	add	sp, #12
    e438:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e43a:	4d18      	ldr	r5, [pc, #96]	; (e49c <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e43c:	4918      	ldr	r1, [pc, #96]	; (e4a0 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e43e:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e440:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e442:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e444:	461a      	mov	r2, r3
    e446:	9000      	str	r0, [sp, #0]
    e448:	f242 7010 	movw	r0, #10000	; 0x2710
    e44c:	f7ff fba8 	bl	dba0 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e450:	b110      	cbz	r0, e458 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e452:	2004      	movs	r0, #4
}
    e454:	b003      	add	sp, #12
    e456:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e458:	6821      	ldr	r1, [r4, #0]
    e45a:	f041 0201 	orr.w	r2, r1, #1
    e45e:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e460:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e462:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e466:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e468:	68ec      	ldr	r4, [r5, #12]
    e46a:	b2e2      	uxtb	r2, r4
    e46c:	2a11      	cmp	r2, #17
    e46e:	d1e1      	bne.n	e434 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e470:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e474:	f360 5356 	bfi	r3, r0, #21, #2
    e478:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e47c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e480:	240f      	movs	r4, #15
    e482:	f364 118b 	bfi	r1, r4, #6, #6
    e486:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e48a:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e48e:	f364 0205 	bfi	r2, r4, #0, #6
    e492:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e496:	e7ce      	b.n	e436 <am_hal_pwrctrl_low_power_init+0xe>
    e498:	40021000 	.word	0x40021000
    e49c:	40020000 	.word	0x40020000
    e4a0:	40020018 	.word	0x40020018

0000e4a4 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e4a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e4a8:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e4aa:	68d3      	ldr	r3, [r2, #12]
    e4ac:	bf0c      	ite	eq
    e4ae:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e4b2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e4b6:	60d3      	str	r3, [r2, #12]
    e4b8:	4770      	bx	lr
    e4ba:	bf00      	nop

0000e4bc <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e4bc:	4a03      	ldr	r2, [pc, #12]	; (e4cc <am_hal_rtc_osc_disable+0x10>)
    e4be:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e4c2:	f043 0010 	orr.w	r0, r3, #16
    e4c6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e4ca:	4770      	bx	lr
    e4cc:	40004200 	.word	0x40004200

0000e4d0 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    e4d0:	2801      	cmp	r0, #1
    e4d2:	d901      	bls.n	e4d8 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    e4d4:	2005      	movs	r0, #5
    e4d6:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    e4d8:	b169      	cbz	r1, e4f6 <am_hal_uart_initialize+0x26>
{
    e4da:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    e4dc:	2264      	movs	r2, #100	; 0x64
    e4de:	4e0e      	ldr	r6, [pc, #56]	; (e518 <am_hal_uart_initialize+0x48>)
    e4e0:	fb02 f200 	mul.w	r2, r2, r0
    e4e4:	18b4      	adds	r4, r6, r2
    e4e6:	4603      	mov	r3, r0
    e4e8:	78e0      	ldrb	r0, [r4, #3]
    e4ea:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e4ee:	b2fd      	uxtb	r5, r7
    e4f0:	b11d      	cbz	r5, e4fa <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    e4f2:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
    e4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
    e4f6:	2006      	movs	r0, #6
    e4f8:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    e4fa:	f040 0001 	orr.w	r0, r0, #1
    e4fe:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    e500:	58b0      	ldr	r0, [r6, r2]
    e502:	f8df e018 	ldr.w	lr, [pc, #24]	; e51c <am_hal_uart_initialize+0x4c>
    e506:	f36e 0017 	bfi	r0, lr, #0, #24
    e50a:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    e50c:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    e50e:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    e510:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
    e512:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    e514:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    e516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e518:	10001138 	.word	0x10001138
    e51c:	00ea9e06 	.word	0x00ea9e06

0000e520 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e520:	b128      	cbz	r0, e52e <am_hal_uart_deinitialize+0xe>
    e522:	6803      	ldr	r3, [r0, #0]
    e524:	4a07      	ldr	r2, [pc, #28]	; (e544 <am_hal_uart_deinitialize+0x24>)
    e526:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e52a:	4291      	cmp	r1, r2
    e52c:	d001      	beq.n	e532 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e52e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    e530:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    e532:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    e534:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    e536:	f36f 0200 	bfc	r2, #0, #1
    e53a:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    e53c:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    e53e:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    e540:	4618      	mov	r0, r3
    e542:	4770      	bx	lr
    e544:	01ea9e06 	.word	0x01ea9e06

0000e548 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e54c:	6804      	ldr	r4, [r0, #0]
    e54e:	4b36      	ldr	r3, [pc, #216]	; (e628 <am_hal_uart_power_control+0xe0>)
    e550:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e554:	429c      	cmp	r4, r3
{
    e556:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e558:	d003      	beq.n	e562 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e55a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e55c:	b004      	add	sp, #16
    e55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e562:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e564:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e566:	f107 0008 	add.w	r0, r7, #8
    e56a:	460e      	mov	r6, r1
    e56c:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e570:	b181      	cbz	r1, e594 <am_hal_uart_power_control+0x4c>
    e572:	2902      	cmp	r1, #2
    e574:	d80c      	bhi.n	e590 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e576:	b992      	cbnz	r2, e59e <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e578:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e57c:	341c      	adds	r4, #28
    e57e:	0325      	lsls	r5, r4, #12
    e580:	f04f 31ff 	mov.w	r1, #4294967295
    e584:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e586:	4640      	mov	r0, r8
    e588:	f7ff feda 	bl	e340 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e58c:	2000      	movs	r0, #0
            break;
    e58e:	e7e5      	b.n	e55c <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e590:	2006      	movs	r0, #6
    e592:	e7e3      	b.n	e55c <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e594:	b322      	cbz	r2, e5e0 <am_hal_uart_power_control+0x98>
    e596:	792a      	ldrb	r2, [r5, #4]
    e598:	bb42      	cbnz	r2, e5ec <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e59a:	2007      	movs	r0, #7
    e59c:	e7de      	b.n	e55c <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e59e:	f7ff fdb1 	bl	e104 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e5a2:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e5a6:	311c      	adds	r1, #28
    e5a8:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e5aa:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e5ac:	6a3a      	ldr	r2, [r7, #32]
    e5ae:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5b2:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e5b4:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e5b6:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e5b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e5ba:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e5bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e5be:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e5c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e5c2:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e5c4:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e5c6:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e5c8:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e5ca:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e5cc:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e5ce:	f7ff fd9d 	bl	e10c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e5d2:	682e      	ldr	r6, [r5, #0]
    e5d4:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e5d8:	42a0      	cmp	r0, r4
    e5da:	d1d4      	bne.n	e586 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e5dc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e5de:	e7cb      	b.n	e578 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e5e0:	4640      	mov	r0, r8
    e5e2:	9201      	str	r2, [sp, #4]
    e5e4:	f7ff fe82 	bl	e2ec <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e5e8:	9801      	ldr	r0, [sp, #4]
    e5ea:	e7b7      	b.n	e55c <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e5ec:	4640      	mov	r0, r8
    e5ee:	f7ff fe7d 	bl	e2ec <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e5f2:	f7ff fd87 	bl	e104 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e5f6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e5fa:	331c      	adds	r3, #28
    e5fc:	031f      	lsls	r7, r3, #12
    e5fe:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e600:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e602:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e604:	68e9      	ldr	r1, [r5, #12]
    e606:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e608:	6928      	ldr	r0, [r5, #16]
    e60a:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e60c:	696a      	ldr	r2, [r5, #20]
    e60e:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e610:	69ab      	ldr	r3, [r5, #24]
    e612:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e614:	69ec      	ldr	r4, [r5, #28]
    e616:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e618:	6a29      	ldr	r1, [r5, #32]
    e61a:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e61c:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e61e:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e620:	f7ff fd74 	bl	e10c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e624:	4630      	mov	r0, r6
    e626:	e799      	b.n	e55c <am_hal_uart_power_control+0x14>
    e628:	01ea9e06 	.word	0x01ea9e06

0000e62c <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e62c:	6803      	ldr	r3, [r0, #0]
    e62e:	4a69      	ldr	r2, [pc, #420]	; (e7d4 <am_hal_uart_configure+0x1a8>)
    e630:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    e634:	4594      	cmp	ip, r2
    e636:	d001      	beq.n	e63c <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e638:	2002      	movs	r0, #2
    e63a:	4770      	bx	lr
{
    e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
    e640:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
    e642:	b084      	sub	sp, #16
    e644:	460d      	mov	r5, r1
    e646:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    e648:	f7ff fd5c 	bl	e104 <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e64c:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
    e650:	311c      	adds	r1, #28
    e652:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
    e654:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e656:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e658:	f040 0208 	orr.w	r2, r0, #8
    e65c:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
    e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e660:	f043 0610 	orr.w	r6, r3, #16
    e664:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e666:	9801      	ldr	r0, [sp, #4]
    e668:	f7ff fd50 	bl	e10c <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    e66c:	f7ff fd4a 	bl	e104 <am_hal_interrupt_master_disable>
    e670:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
    e672:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e674:	f421 7040 	bic.w	r0, r1, #768	; 0x300
    e678:	f020 0201 	bic.w	r2, r0, #1
    e67c:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e67e:	9802      	ldr	r0, [sp, #8]
    e680:	f7ff fd44 	bl	e10c <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e686:	f3c3 1802 	ubfx	r8, r3, #4, #3
    e68a:	f108 36ff 	add.w	r6, r8, #4294967295
    e68e:	2e03      	cmp	r6, #3
    e690:	d846      	bhi.n	e720 <am_hal_uart_configure+0xf4>
    e692:	e8df f006 	tbb	[pc, r6]
    e696:	020e      	.short	0x020e
    e698:	1114      	.short	0x1114
    e69a:	494f      	ldr	r1, [pc, #316]	; (e7d8 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
    e69c:	484f      	ldr	r0, [pc, #316]	; (e7dc <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    e69e:	682a      	ldr	r2, [r5, #0]
    e6a0:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    e6a2:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
    e6a6:	b96b      	cbnz	r3, e6c4 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    e6a8:	484d      	ldr	r0, [pc, #308]	; (e7e0 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
    e6aa:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
    e6ac:	b004      	add	sp, #16
    e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e6b2:	494c      	ldr	r1, [pc, #304]	; (e7e4 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
    e6b4:	484c      	ldr	r0, [pc, #304]	; (e7e8 <am_hal_uart_configure+0x1bc>)
    e6b6:	e7f2      	b.n	e69e <am_hal_uart_configure+0x72>
    e6b8:	494c      	ldr	r1, [pc, #304]	; (e7ec <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
    e6ba:	484d      	ldr	r0, [pc, #308]	; (e7f0 <am_hal_uart_configure+0x1c4>)
    e6bc:	e7ef      	b.n	e69e <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e6be:	494d      	ldr	r1, [pc, #308]	; (e7f4 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
    e6c0:	484d      	ldr	r0, [pc, #308]	; (e7f8 <am_hal_uart_configure+0x1cc>)
    e6c2:	e7ec      	b.n	e69e <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    e6c4:	fbb1 f1f6 	udiv	r1, r1, r6
    e6c8:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e6cc:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e6ce:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e6d2:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e6d4:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    e6d8:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e6da:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
    e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e6de:	6929      	ldr	r1, [r5, #16]
    e6e0:	430b      	orrs	r3, r1
    e6e2:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
    e6e4:	696a      	ldr	r2, [r5, #20]
    e6e6:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e6e8:	686e      	ldr	r6, [r5, #4]
    e6ea:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
    e6ec:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e6ee:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
    e6f0:	f046 0310 	orr.w	r3, r6, #16
    e6f4:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    e6f8:	f7ff fd04 	bl	e104 <am_hal_interrupt_master_disable>
    e6fc:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
    e6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e700:	f442 7640 	orr.w	r6, r2, #768	; 0x300
    e704:	f046 0001 	orr.w	r0, r6, #1
    e708:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e70a:	9803      	ldr	r0, [sp, #12]
    e70c:	f7ff fcfe 	bl	e10c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e710:	6827      	ldr	r7, [r4, #0]
    e712:	4930      	ldr	r1, [pc, #192]	; (e7d4 <am_hal_uart_configure+0x1a8>)
    e714:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
    e718:	428e      	cmp	r6, r1
    e71a:	d005      	beq.n	e728 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
    e71c:	2000      	movs	r0, #0
    e71e:	e7c5      	b.n	e6ac <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
    e720:	2600      	movs	r6, #0
    e722:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    e724:	4835      	ldr	r0, [pc, #212]	; (e7fc <am_hal_uart_configure+0x1d0>)
    e726:	e7c1      	b.n	e6ac <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
    e728:	69a9      	ldr	r1, [r5, #24]
    e72a:	6a2f      	ldr	r7, [r5, #32]
    e72c:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
    e730:	b109      	cbz	r1, e736 <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
    e732:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
    e734:	b9f3      	cbnz	r3, e774 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e736:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e738:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    e73c:	331c      	adds	r3, #28
    e73e:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
    e740:	f04f 0e00 	mov.w	lr, #0
    e744:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e748:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e74a:	f022 0020 	bic.w	r0, r2, #32
    e74e:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
    e750:	b117      	cbz	r7, e758 <am_hal_uart_configure+0x12c>
    e752:	f1b8 0f00 	cmp.w	r8, #0
    e756:	d123      	bne.n	e7a0 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e758:	6827      	ldr	r7, [r4, #0]
    e75a:	491e      	ldr	r1, [pc, #120]	; (e7d4 <am_hal_uart_configure+0x1a8>)
    e75c:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
    e760:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e762:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
    e764:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e768:	d1d8      	bne.n	e71c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e76a:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    e76c:	f024 0350 	bic.w	r3, r4, #80	; 0x50
    e770:	63b3      	str	r3, [r6, #56]	; 0x38
    e772:	e79b      	b.n	e6ac <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
    e774:	2201      	movs	r2, #1
    e776:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    e77a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e77e:	f000 fcf5 	bl	f16c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e782:	6821      	ldr	r1, [r4, #0]
    e784:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
    e788:	42b5      	cmp	r5, r6
    e78a:	d1c7      	bne.n	e71c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e78c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e78e:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
    e792:	361c      	adds	r6, #28
    e794:	0336      	lsls	r6, r6, #12
    e796:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e798:	f042 0020 	orr.w	r0, r2, #32
    e79c:	63b0      	str	r0, [r6, #56]	; 0x38
    e79e:	e7d7      	b.n	e750 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
    e7a0:	2201      	movs	r2, #1
    e7a2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    e7a6:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e7aa:	4643      	mov	r3, r8
    e7ac:	4639      	mov	r1, r7
    e7ae:	f000 fcdd 	bl	f16c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e7b2:	6826      	ldr	r6, [r4, #0]
    e7b4:	4a07      	ldr	r2, [pc, #28]	; (e7d4 <am_hal_uart_configure+0x1a8>)
    e7b6:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e7ba:	4290      	cmp	r0, r2
    e7bc:	d1ae      	bne.n	e71c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e7be:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e7c0:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e7c4:	311c      	adds	r1, #28
    e7c6:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
    e7c8:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
    e7ca:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e7cc:	f044 0350 	orr.w	r3, r4, #80	; 0x50
    e7d0:	63ab      	str	r3, [r5, #56]	; 0x38
    e7d2:	e76b      	b.n	e6ac <am_hal_uart_configure+0x80>
    e7d4:	01ea9e06 	.word	0x01ea9e06
    e7d8:	2dc6c000 	.word	0x2dc6c000
    e7dc:	00b71b00 	.word	0x00b71b00
    e7e0:	08000003 	.word	0x08000003
    e7e4:	5b8d8000 	.word	0x5b8d8000
    e7e8:	016e3600 	.word	0x016e3600
    e7ec:	0b71b000 	.word	0x0b71b000
    e7f0:	002dc6c0 	.word	0x002dc6c0
    e7f4:	16e36000 	.word	0x16e36000
    e7f8:	005b8d80 	.word	0x005b8d80
    e7fc:	08000002 	.word	0x08000002

0000e800 <am_hal_uart_transfer>:
{
    e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e804:	680e      	ldr	r6, [r1, #0]
{
    e806:	b091      	sub	sp, #68	; 0x44
    e808:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e80a:	b14e      	cbz	r6, e820 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e80c:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
    e80e:	bf18      	it	ne
    e810:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e814:	f000 80f6 	beq.w	ea04 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
    e818:	4658      	mov	r0, fp
    e81a:	b011      	add	sp, #68	; 0x44
    e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
    e820:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e824:	684c      	ldr	r4, [r1, #4]
    e826:	9401      	str	r4, [sp, #4]
    e828:	688d      	ldr	r5, [r1, #8]
    e82a:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
    e82e:	f1bb 0f00 	cmp.w	fp, #0
    e832:	f000 8107 	beq.w	ea44 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e836:	2d00      	cmp	r5, #0
    e838:	f000 8393 	beq.w	ef62 <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e83c:	2800      	cmp	r0, #0
    e83e:	f000 80df 	beq.w	ea00 <am_hal_uart_transfer+0x200>
    e842:	6807      	ldr	r7, [r0, #0]
    e844:	497e      	ldr	r1, [pc, #504]	; (ea40 <am_hal_uart_transfer+0x240>)
    e846:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
    e84a:	4589      	cmp	r9, r1
    e84c:	d00a      	beq.n	e864 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
    e84e:	f1ba 0f00 	cmp.w	sl, #0
    e852:	d001      	beq.n	e858 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
    e854:	f8ca 6000 	str.w	r6, [sl]
    e858:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
    e85c:	4658      	mov	r0, fp
    e85e:	b011      	add	sp, #68	; 0x44
    e860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e864:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e866:	4637      	mov	r7, r6
    e868:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e86a:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
    e86c:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    e870:	2a00      	cmp	r2, #0
    e872:	f040 822c 	bne.w	ecce <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
    e876:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e87a:	2d00      	cmp	r5, #0
    e87c:	f000 80a1 	beq.w	e9c2 <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e880:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
    e884:	341c      	adds	r4, #28
    e886:	0322      	lsls	r2, r4, #12
    e888:	6990      	ldr	r0, [r2, #24]
    e88a:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e88e:	2c00      	cmp	r4, #0
    e890:	f040 80a3 	bne.w	e9da <am_hal_uart_transfer+0x1da>
    e894:	1e6b      	subs	r3, r5, #1
    e896:	f013 0e07 	ands.w	lr, r3, #7
    e89a:	f101 3cff 	add.w	ip, r1, #4294967295
    e89e:	d048      	beq.n	e932 <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8a0:	780c      	ldrb	r4, [r1, #0]
    e8a2:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8a4:	6993      	ldr	r3, [r2, #24]
    e8a6:	069b      	lsls	r3, r3, #26
    e8a8:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8aa:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8ae:	f100 8085 	bmi.w	e9bc <am_hal_uart_transfer+0x1bc>
    e8b2:	45a6      	cmp	lr, r4
    e8b4:	d03d      	beq.n	e932 <am_hal_uart_transfer+0x132>
    e8b6:	f1be 0f02 	cmp.w	lr, #2
    e8ba:	d032      	beq.n	e922 <am_hal_uart_transfer+0x122>
    e8bc:	f1be 0f03 	cmp.w	lr, #3
    e8c0:	d027      	beq.n	e912 <am_hal_uart_transfer+0x112>
    e8c2:	f1be 0f04 	cmp.w	lr, #4
    e8c6:	d01c      	beq.n	e902 <am_hal_uart_transfer+0x102>
    e8c8:	f1be 0f05 	cmp.w	lr, #5
    e8cc:	d011      	beq.n	e8f2 <am_hal_uart_transfer+0xf2>
    e8ce:	f1be 0f06 	cmp.w	lr, #6
    e8d2:	d006      	beq.n	e8e2 <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8d4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e8d8:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8da:	6990      	ldr	r0, [r2, #24]
    e8dc:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8de:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8e0:	d46c      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8e2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e8e6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8e8:	6991      	ldr	r1, [r2, #24]
    e8ea:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8ec:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8f0:	d464      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8f2:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e8f6:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8f8:	6993      	ldr	r3, [r2, #24]
    e8fa:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8fc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e900:	d45c      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e902:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e906:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e908:	6990      	ldr	r0, [r2, #24]
    e90a:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e90c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e910:	d454      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e912:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e916:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e918:	6991      	ldr	r1, [r2, #24]
    e91a:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e91c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e920:	d44c      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e922:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e926:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e928:	6993      	ldr	r3, [r2, #24]
    e92a:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e92c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e930:	d444      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e932:	3401      	adds	r4, #1
    e934:	f89c 1001 	ldrb.w	r1, [ip, #1]
    e938:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
    e93a:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e93c:	4620      	mov	r0, r4
    e93e:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
    e942:	f000 81c2 	beq.w	ecca <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e946:	6993      	ldr	r3, [r2, #24]
    e948:	0699      	lsls	r1, r3, #26
    e94a:	d437      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e94c:	f89e 1001 	ldrb.w	r1, [lr, #1]
    e950:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e952:	6993      	ldr	r3, [r2, #24]
    e954:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e956:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e95a:	d42f      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e95c:	f89c 4003 	ldrb.w	r4, [ip, #3]
    e960:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e962:	6991      	ldr	r1, [r2, #24]
    e964:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e966:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e96a:	d427      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e96c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    e970:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e972:	6991      	ldr	r1, [r2, #24]
    e974:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e976:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e97a:	d41f      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e97c:	f89c 4005 	ldrb.w	r4, [ip, #5]
    e980:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e982:	6993      	ldr	r3, [r2, #24]
    e984:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e986:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e98a:	d417      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e98c:	f89c 1006 	ldrb.w	r1, [ip, #6]
    e990:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e992:	6993      	ldr	r3, [r2, #24]
    e994:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e996:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e99a:	d40f      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e99c:	f89c 4007 	ldrb.w	r4, [ip, #7]
    e9a0:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9a2:	6991      	ldr	r1, [r2, #24]
    e9a4:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9a6:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9aa:	d407      	bmi.n	e9bc <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9ac:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
    e9b0:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9b2:	6991      	ldr	r1, [r2, #24]
    e9b4:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9b6:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9ba:	d5ba      	bpl.n	e932 <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
    e9bc:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
    e9be:	4426      	add	r6, r4
        if (ui32RemainingBytes)
    e9c0:	d10b      	bne.n	e9da <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
    e9c2:	f1ba 0f00 	cmp.w	sl, #0
    e9c6:	f000 817d 	beq.w	ecc4 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
    e9ca:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
    e9ce:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
    e9d0:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
    e9d4:	b011      	add	sp, #68	; 0x44
    e9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e9da:	2001      	movs	r0, #1
    e9dc:	f7ff f8dc 	bl	db98 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e9e0:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e9e4:	bf18      	it	ne
    e9e6:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e9e8:	45bb      	cmp	fp, r7
    e9ea:	d9ea      	bls.n	e9c2 <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e9ec:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e9f0:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e9f2:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
    e9f6:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e9f8:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e9fa:	f47f af28 	bne.w	e84e <am_hal_uart_transfer+0x4e>
    e9fe:	e735      	b.n	e86c <am_hal_uart_transfer+0x6c>
    ea00:	4606      	mov	r6, r0
    ea02:	e724      	b.n	e84e <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
    ea04:	684b      	ldr	r3, [r1, #4]
    ea06:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    ea0a:	688c      	ldr	r4, [r1, #8]
    ea0c:	690f      	ldr	r7, [r1, #16]
    ea0e:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
    ea10:	f1bb 0f00 	cmp.w	fp, #0
    ea14:	f000 80c9 	beq.w	ebaa <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ea18:	2c00      	cmp	r4, #0
    ea1a:	f000 8150 	beq.w	ecbe <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ea1e:	b130      	cbz	r0, ea2e <am_hal_uart_transfer+0x22e>
    ea20:	6800      	ldr	r0, [r0, #0]
    ea22:	4a07      	ldr	r2, [pc, #28]	; (ea40 <am_hal_uart_transfer+0x240>)
    ea24:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    ea28:	4291      	cmp	r1, r2
    ea2a:	f000 8186 	beq.w	ed3a <am_hal_uart_transfer+0x53a>
    ea2e:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
    ea30:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
    ea34:	2f00      	cmp	r7, #0
    ea36:	f43f aeef 	beq.w	e818 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
    ea3a:	603d      	str	r5, [r7, #0]
    ea3c:	e6ec      	b.n	e818 <am_hal_uart_transfer+0x18>
    ea3e:	bf00      	nop
    ea40:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ea44:	2800      	cmp	r0, #0
    ea46:	f43f af07 	beq.w	e858 <am_hal_uart_transfer+0x58>
    ea4a:	6807      	ldr	r7, [r0, #0]
    ea4c:	4cac      	ldr	r4, [pc, #688]	; (ed00 <am_hal_uart_transfer+0x500>)
    ea4e:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
    ea52:	42a3      	cmp	r3, r4
    ea54:	f47f af00 	bne.w	e858 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
    ea58:	f1ba 0f00 	cmp.w	sl, #0
    ea5c:	d001      	beq.n	ea62 <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
    ea5e:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
    ea62:	2d00      	cmp	r5, #0
    ea64:	f000 812e 	beq.w	ecc4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
    ea68:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
    ea6c:	2c00      	cmp	r4, #0
    ea6e:	f040 8290 	bne.w	ef92 <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea72:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    ea76:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    ea7a:	311c      	adds	r1, #28
    ea7c:	030a      	lsls	r2, r1, #12
    ea7e:	6996      	ldr	r6, [r2, #24]
    ea80:	f3c6 1740 	ubfx	r7, r6, #5, #1
    ea84:	2f00      	cmp	r7, #0
    ea86:	f040 8089 	bne.w	eb9c <am_hal_uart_transfer+0x39c>
    ea8a:	f105 38ff 	add.w	r8, r5, #4294967295
    ea8e:	9b01      	ldr	r3, [sp, #4]
    ea90:	f018 0007 	ands.w	r0, r8, #7
    ea94:	463c      	mov	r4, r7
    ea96:	f103 31ff 	add.w	r1, r3, #4294967295
    ea9a:	d042      	beq.n	eb22 <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea9c:	781e      	ldrb	r6, [r3, #0]
    ea9e:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaa0:	6997      	ldr	r7, [r2, #24]
    eaa2:	4619      	mov	r1, r3
    eaa4:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaa6:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaaa:	d477      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
    eaac:	42a0      	cmp	r0, r4
    eaae:	d038      	beq.n	eb22 <am_hal_uart_transfer+0x322>
    eab0:	2802      	cmp	r0, #2
    eab2:	d02e      	beq.n	eb12 <am_hal_uart_transfer+0x312>
    eab4:	2803      	cmp	r0, #3
    eab6:	d024      	beq.n	eb02 <am_hal_uart_transfer+0x302>
    eab8:	2804      	cmp	r0, #4
    eaba:	d01a      	beq.n	eaf2 <am_hal_uart_transfer+0x2f2>
    eabc:	2805      	cmp	r0, #5
    eabe:	d010      	beq.n	eae2 <am_hal_uart_transfer+0x2e2>
    eac0:	2806      	cmp	r0, #6
    eac2:	d006      	beq.n	ead2 <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    eac8:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaca:	6990      	ldr	r0, [r2, #24]
    eacc:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eace:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ead0:	d464      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ead2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    ead6:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ead8:	6997      	ldr	r7, [r2, #24]
    eada:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eadc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eae0:	d45c      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eae2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    eae6:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eae8:	6990      	ldr	r0, [r2, #24]
    eaea:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaec:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaf0:	d454      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaf2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    eaf6:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaf8:	6997      	ldr	r7, [r2, #24]
    eafa:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eafc:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb00:	d44c      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    eb06:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb08:	6990      	ldr	r0, [r2, #24]
    eb0a:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb0c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb10:	d444      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    eb16:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb18:	6997      	ldr	r7, [r2, #24]
    eb1a:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb1c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb20:	d43c      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb22:	3401      	adds	r4, #1
    eb24:	784b      	ldrb	r3, [r1, #1]
    eb26:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
    eb28:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb2a:	4623      	mov	r3, r4
    eb2c:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
    eb30:	d034      	beq.n	eb9c <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb32:	6996      	ldr	r6, [r2, #24]
    eb34:	06b6      	lsls	r6, r6, #26
    eb36:	d431      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb38:	7847      	ldrb	r7, [r0, #1]
    eb3a:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb3c:	6990      	ldr	r0, [r2, #24]
    eb3e:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb40:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb44:	d42a      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb46:	78cc      	ldrb	r4, [r1, #3]
    eb48:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb4a:	6996      	ldr	r6, [r2, #24]
    eb4c:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb4e:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb52:	d423      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb54:	790f      	ldrb	r7, [r1, #4]
    eb56:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb58:	6990      	ldr	r0, [r2, #24]
    eb5a:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb5c:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb60:	d41c      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb62:	794c      	ldrb	r4, [r1, #5]
    eb64:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb66:	6996      	ldr	r6, [r2, #24]
    eb68:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb6a:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb6e:	d415      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb70:	798f      	ldrb	r7, [r1, #6]
    eb72:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb74:	6990      	ldr	r0, [r2, #24]
    eb76:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb78:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb7c:	d40e      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb7e:	79cc      	ldrb	r4, [r1, #7]
    eb80:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb82:	6996      	ldr	r6, [r2, #24]
    eb84:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb86:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb8a:	d407      	bmi.n	eb9c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb8c:	f811 7f08 	ldrb.w	r7, [r1, #8]!
    eb90:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb92:	6990      	ldr	r0, [r2, #24]
    eb94:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eb96:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eb9a:	d5c2      	bpl.n	eb22 <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
    eb9c:	f1ba 0f00 	cmp.w	sl, #0
    eba0:	f000 8090 	beq.w	ecc4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
    eba4:	f8ca 4000 	str.w	r4, [sl]
    eba8:	e636      	b.n	e818 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ebaa:	2800      	cmp	r0, #0
    ebac:	f43f ae54 	beq.w	e858 <am_hal_uart_transfer+0x58>
    ebb0:	6805      	ldr	r5, [r0, #0]
    ebb2:	4e53      	ldr	r6, [pc, #332]	; (ed00 <am_hal_uart_transfer+0x500>)
    ebb4:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    ebb8:	45b4      	cmp	ip, r6
    ebba:	f47f ae4d 	bne.w	e858 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
    ebbe:	b10f      	cbz	r7, ebc4 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
    ebc0:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
    ebc4:	2c00      	cmp	r4, #0
    ebc6:	d07d      	beq.n	ecc4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
    ebc8:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    ebcc:	2800      	cmp	r0, #0
    ebce:	f040 8213 	bne.w	eff8 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebd2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    ebd6:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    ebda:	311c      	adds	r1, #28
    ebdc:	0309      	lsls	r1, r1, #12
    ebde:	698a      	ldr	r2, [r1, #24]
    ebe0:	f3c2 1500 	ubfx	r5, r2, #4, #1
    ebe4:	2d00      	cmp	r5, #0
    ebe6:	f040 8287 	bne.w	f0f8 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
    ebea:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ebec:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
    ebf0:	f040 81cc 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
    ebf4:	1e66      	subs	r6, r4, #1
    ebf6:	f016 0203 	ands.w	r2, r6, #3
    ebfa:	4655      	mov	r5, sl
    ebfc:	f109 30ff 	add.w	r0, r9, #4294967295
    ec00:	d02b      	beq.n	ec5a <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec02:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec06:	698b      	ldr	r3, [r1, #24]
    ec08:	06de      	lsls	r6, r3, #27
    ec0a:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec0c:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec10:	f53f af10 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec14:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec16:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ec1a:	f040 81b7 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
    ec1e:	42aa      	cmp	r2, r5
    ec20:	d01b      	beq.n	ec5a <am_hal_uart_transfer+0x45a>
    ec22:	2a02      	cmp	r2, #2
    ec24:	d00c      	beq.n	ec40 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec26:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec2a:	698e      	ldr	r6, [r1, #24]
    ec2c:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec2e:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec32:	f53f aeff 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec36:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec38:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ec3c:	f040 81a6 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec40:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec44:	698a      	ldr	r2, [r1, #24]
    ec46:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec48:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec4c:	f53f aef2 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec50:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec52:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ec56:	f040 8199 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec5a:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
    ec5c:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec5e:	7043      	strb	r3, [r0, #1]
    ec60:	f100 0601 	add.w	r6, r0, #1
    ec64:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
    ec66:	f43f aee5 	beq.w	ea34 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec6a:	698a      	ldr	r2, [r1, #24]
    ec6c:	06d2      	lsls	r2, r2, #27
    ec6e:	f53f aee1 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec72:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec74:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ec78:	f040 8188 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec7c:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec7e:	698e      	ldr	r6, [r1, #24]
    ec80:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec82:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec86:	f53f aed5 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec8a:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec8c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ec90:	f040 817c 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec94:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec96:	698e      	ldr	r6, [r1, #24]
    ec98:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ec9a:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec9e:	f53f aec9 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    eca2:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eca4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eca8:	f040 8170 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecac:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecb0:	698e      	ldr	r6, [r1, #24]
    ecb2:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecb4:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecb8:	f53f aebc 	bmi.w	ea34 <am_hal_uart_transfer+0x234>
    ecbc:	e7c8      	b.n	ec50 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ecbe:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
    ecc0:	b107      	cbz	r7, ecc4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
    ecc2:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
    ecc4:	f04f 0b00 	mov.w	fp, #0
    ecc8:	e5a6      	b.n	e818 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
    ecca:	442e      	add	r6, r5
    eccc:	e679      	b.n	e9c2 <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    ecce:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    ecd2:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    ecd6:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
    ecd8:	42ac      	cmp	r4, r5
    ecda:	bf28      	it	cs
    ecdc:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ecde:	4622      	mov	r2, r4
    ece0:	9802      	ldr	r0, [sp, #8]
    ece2:	f000 fa4f 	bl	f184 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    ece6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    ecea:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
    ecec:	f7ff fa0a 	bl	e104 <am_hal_interrupt_master_disable>
    ecf0:	9903      	ldr	r1, [sp, #12]
    ecf2:	9008      	str	r0, [sp, #32]
    ecf4:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    ecf8:	321c      	adds	r2, #28
    ecfa:	0313      	lsls	r3, r2, #12
    ecfc:	9303      	str	r3, [sp, #12]
    ecfe:	e010      	b.n	ed22 <am_hal_uart_transfer+0x522>
    ed00:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ed04:	f000 fb42 	bl	f38c <am_hal_queue_item_get>
    ed08:	b198      	cbz	r0, ed32 <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ed0a:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    ed0e:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
    ed12:	331c      	adds	r3, #28
    ed14:	0318      	lsls	r0, r3, #12
    ed16:	6981      	ldr	r1, [r0, #24]
    ed18:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ed1a:	bf5c      	itt	pl
    ed1c:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    ed20:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ed22:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ed24:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ed26:	699b      	ldr	r3, [r3, #24]
    ed28:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ed2a:	f04f 0201 	mov.w	r2, #1
    ed2e:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ed30:	d5e8      	bpl.n	ed04 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
    ed32:	9808      	ldr	r0, [sp, #32]
    ed34:	f7ff f9ea 	bl	e10c <am_hal_interrupt_master_set>
    ed38:	e640      	b.n	e9bc <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ed3a:	2600      	movs	r6, #0
    ed3c:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ed3e:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ed42:	9101      	str	r1, [sp, #4]
    ed44:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ed46:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
    ed48:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    ed4c:	2800      	cmp	r0, #0
    ed4e:	f040 8089 	bne.w	ee64 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
    ed52:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    ed56:	2c00      	cmp	r4, #0
    ed58:	d0b2      	beq.n	ecc0 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed5a:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
    ed5e:	311c      	adds	r1, #28
    ed60:	030a      	lsls	r2, r1, #12
    ed62:	6993      	ldr	r3, [r2, #24]
    ed64:	06d8      	lsls	r0, r3, #27
    ed66:	d466      	bmi.n	ee36 <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed68:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed6a:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
    ed6e:	f040 810d 	bne.w	ef8c <am_hal_uart_transfer+0x78c>
    ed72:	f104 3eff 	add.w	lr, r4, #4294967295
    ed76:	f01e 0e03 	ands.w	lr, lr, #3
    ed7a:	f109 30ff 	add.w	r0, r9, #4294967295
    ed7e:	d029      	beq.n	edd4 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed80:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed84:	6991      	ldr	r1, [r2, #24]
    ed86:	06c9      	lsls	r1, r1, #27
    ed88:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed8a:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed8e:	d44e      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed90:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed92:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ed96:	f040 80e0 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
    ed9a:	459e      	cmp	lr, r3
    ed9c:	d01a      	beq.n	edd4 <am_hal_uart_transfer+0x5d4>
    ed9e:	f1be 0f02 	cmp.w	lr, #2
    eda2:	d00b      	beq.n	edbc <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eda4:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eda8:	6991      	ldr	r1, [r2, #24]
    edaa:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edac:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edb0:	d43d      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edb2:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edb4:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    edb8:	f040 80cf 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edbc:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edc0:	6991      	ldr	r1, [r2, #24]
    edc2:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edc4:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edc8:	d431      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edca:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edcc:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    edd0:	f040 80c3 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edd4:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
    edd6:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
    edd8:	7041      	strb	r1, [r0, #1]
    edda:	469e      	mov	lr, r3
    eddc:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
    ede0:	d025      	beq.n	ee2e <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ede2:	6991      	ldr	r1, [r2, #24]
    ede4:	06c9      	lsls	r1, r1, #27
    ede6:	d422      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ede8:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edea:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    edee:	f040 80b4 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edf2:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edf6:	6991      	ldr	r1, [r2, #24]
    edf8:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edfa:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edfe:	d416      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee00:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee02:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ee06:	f040 80a8 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee0a:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee0c:	6991      	ldr	r1, [r2, #24]
    ee0e:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee10:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee14:	d40b      	bmi.n	ee2e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee16:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee18:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ee1c:	f040 809d 	bne.w	ef5a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee20:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee24:	6991      	ldr	r1, [r2, #24]
    ee26:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee28:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee2c:	d5cd      	bpl.n	edca <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
    ee2e:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
    ee30:	441d      	add	r5, r3
        if (ui32RemainingBytes)
    ee32:	f43f af45 	beq.w	ecc0 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ee36:	2001      	movs	r0, #1
    ee38:	f7fe feae 	bl	db98 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    ee3c:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    ee40:	bf18      	it	ne
    ee42:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ee44:	45b3      	cmp	fp, r6
    ee46:	f67f af3b 	bls.w	ecc0 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee4a:	f8d8 0000 	ldr.w	r0, [r8]
    ee4e:	9a01      	ldr	r2, [sp, #4]
    ee50:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    ee54:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
    ee56:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee5a:	f43f af75 	beq.w	ed48 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ee5e:	f04f 0b02 	mov.w	fp, #2
    ee62:	e5e7      	b.n	ea34 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
    ee64:	f7ff f94e 	bl	e104 <am_hal_interrupt_master_disable>
    ee68:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    ee6c:	9007      	str	r0, [sp, #28]
    ee6e:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    ee72:	301c      	adds	r0, #28
    uint32_t i = 0;
    ee74:	f8cd a00c 	str.w	sl, [sp, #12]
    ee78:	0303      	lsls	r3, r0, #12
    ee7a:	f10d 0c20 	add.w	ip, sp, #32
    ee7e:	2200      	movs	r2, #0
    ee80:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee82:	699c      	ldr	r4, [r3, #24]
    ee84:	06e1      	lsls	r1, r4, #27
    ee86:	d45a      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee88:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee8a:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    ee8e:	d17a      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee90:	46e6      	mov	lr, ip
    ee92:	3201      	adds	r2, #1
    ee94:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee98:	6999      	ldr	r1, [r3, #24]
    ee9a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee9c:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee9e:	d44e      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eea0:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eea2:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    eea6:	d16e      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eea8:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eeac:	6999      	ldr	r1, [r3, #24]
    eeae:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eeb0:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eeb4:	d443      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eeb6:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eeb8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eebc:	d163      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eebe:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eec2:	699c      	ldr	r4, [r3, #24]
    eec4:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eec6:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eeca:	d438      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eecc:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eece:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    eed2:	d158      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eed4:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eed8:	699c      	ldr	r4, [r3, #24]
    eeda:	06e4      	lsls	r4, r4, #27
    eedc:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    eee0:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eee4:	d42b      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eee6:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eee8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eeec:	d14b      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eeee:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eef2:	6999      	ldr	r1, [r3, #24]
    eef4:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eef6:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eefa:	d420      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eefc:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eefe:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ef02:	d140      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef04:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef08:	6999      	ldr	r1, [r3, #24]
    ef0a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef0c:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef10:	d415      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef12:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef14:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ef18:	d135      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef1a:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef1e:	699c      	ldr	r4, [r3, #24]
    ef20:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef22:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef26:	d40a      	bmi.n	ef3e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef28:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef2a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ef2e:	d12a      	bne.n	ef86 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef30:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    ef32:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef34:	f88e 1006 	strb.w	r1, [lr, #6]
    ef38:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
    ef3c:	d1a1      	bne.n	ee82 <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ef3e:	a908      	add	r1, sp, #32
    ef40:	9802      	ldr	r0, [sp, #8]
    ef42:	4654      	mov	r4, sl
    ef44:	f8dd a00c 	ldr.w	sl, [sp, #12]
    ef48:	f000 f91c 	bl	f184 <am_hal_queue_item_add>
    ef4c:	b958      	cbnz	r0, ef66 <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    ef4e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; f104 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    ef52:	9807      	ldr	r0, [sp, #28]
    ef54:	f7ff f8da 	bl	e10c <am_hal_interrupt_master_set>
    ef58:	e56c      	b.n	ea34 <am_hal_uart_transfer+0x234>
    ef5a:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ef5c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ef60:	e568      	b.n	ea34 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ef62:	462e      	mov	r6, r5
    ef64:	e52d      	b.n	e9c2 <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
    ef66:	9807      	ldr	r0, [sp, #28]
    ef68:	f7ff f8d0 	bl	e10c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    ef6c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    ef70:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
    ef72:	42a3      	cmp	r3, r4
    ef74:	bf28      	it	cs
    ef76:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    ef78:	461a      	mov	r2, r3
    ef7a:	4649      	mov	r1, r9
    ef7c:	9303      	str	r3, [sp, #12]
    ef7e:	f000 fa05 	bl	f38c <am_hal_queue_item_get>
    ef82:	9b03      	ldr	r3, [sp, #12]
    ef84:	e753      	b.n	ee2e <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ef86:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ef8a:	e7e2      	b.n	ef52 <am_hal_uart_transfer+0x752>
    ef8c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ef90:	e550      	b.n	ea34 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    ef92:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    ef96:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    ef9a:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
    ef9c:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ef9e:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
    efa2:	bf28      	it	cs
    efa4:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    efa6:	9901      	ldr	r1, [sp, #4]
    efa8:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
    efaa:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    efac:	f000 f8ea 	bl	f184 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    efb0:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
    efb4:	f7ff f8a6 	bl	e104 <am_hal_interrupt_master_disable>
    efb8:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    efbc:	331c      	adds	r3, #28
    efbe:	031d      	lsls	r5, r3, #12
    efc0:	9005      	str	r0, [sp, #20]
    efc2:	e00e      	b.n	efe2 <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    efc4:	f000 f9e2 	bl	f38c <am_hal_queue_item_get>
    efc8:	b190      	cbz	r0, eff0 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    efca:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    efce:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    efd2:	321c      	adds	r2, #28
    efd4:	0311      	lsls	r1, r2, #12
    efd6:	698e      	ldr	r6, [r1, #24]
    efd8:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    efda:	bf5c      	itt	pl
    efdc:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    efe0:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    efe2:	69af      	ldr	r7, [r5, #24]
    efe4:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    efe6:	f04f 0201 	mov.w	r2, #1
    efea:	a908      	add	r1, sp, #32
    efec:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    efee:	d5e9      	bpl.n	efc4 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
    eff0:	9805      	ldr	r0, [sp, #20]
    eff2:	f7ff f88b 	bl	e10c <am_hal_interrupt_master_set>
    eff6:	e5d1      	b.n	eb9c <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
    eff8:	f7ff f884 	bl	e104 <am_hal_interrupt_master_disable>
    effc:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    f000:	9006      	str	r0, [sp, #24]
    f002:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
    f006:	301c      	adds	r0, #28
    f008:	0301      	lsls	r1, r0, #12
    f00a:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
    f00c:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f00e:	698e      	ldr	r6, [r1, #24]
    f010:	06f0      	lsls	r0, r6, #27
    f012:	d455      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f014:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f016:	f415 6f70 	tst.w	r5, #3840	; 0xf00
    f01a:	d16f      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f01c:	4618      	mov	r0, r3
    f01e:	3201      	adds	r2, #1
    f020:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f024:	698e      	ldr	r6, [r1, #24]
    f026:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    f028:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f02a:	d449      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f02c:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f02e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    f032:	d163      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f034:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f036:	698e      	ldr	r6, [r1, #24]
    f038:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    f03a:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f03e:	d43f      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f040:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f042:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f046:	d159      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f048:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f04a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f04e:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    f052:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f056:	d133      	bne.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f058:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f05a:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    f05e:	d14d      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f060:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f062:	698e      	ldr	r6, [r1, #24]
    f064:	06f6      	lsls	r6, r6, #27
    f066:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    f06a:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f06e:	d427      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f070:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f072:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f076:	d141      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f078:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f07a:	698b      	ldr	r3, [r1, #24]
    f07c:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    f07e:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f082:	d41d      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f084:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f086:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    f08a:	d137      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f08c:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f08e:	698b      	ldr	r3, [r1, #24]
    f090:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    f092:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f096:	d413      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f098:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f09a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    f09e:	d12d      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f0a0:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f0a2:	698e      	ldr	r6, [r1, #24]
    f0a4:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    f0a6:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    f0aa:	d409      	bmi.n	f0c0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    f0ac:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    f0ae:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    f0b2:	d123      	bne.n	f0fc <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    f0b4:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
    f0b6:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    f0b8:	7183      	strb	r3, [r0, #6]
    f0ba:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
    f0be:	d1a6      	bne.n	f00e <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    f0c0:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    f0c4:	a908      	add	r1, sp, #32
    f0c6:	4650      	mov	r0, sl
    f0c8:	f000 f85c 	bl	f184 <am_hal_queue_item_add>
    f0cc:	b930      	cbnz	r0, f0dc <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    f0ce:	f8df b034 	ldr.w	fp, [pc, #52]	; f104 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    f0d2:	9806      	ldr	r0, [sp, #24]
    f0d4:	f7ff f81a 	bl	e10c <am_hal_interrupt_master_set>
    f0d8:	f7ff bb9e 	b.w	e818 <am_hal_uart_transfer+0x18>
    f0dc:	9806      	ldr	r0, [sp, #24]
    f0de:	f7ff f815 	bl	e10c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    f0e2:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    f0e6:	42a5      	cmp	r5, r4
    f0e8:	bf28      	it	cs
    f0ea:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    f0ec:	4649      	mov	r1, r9
    f0ee:	4650      	mov	r0, sl
    f0f0:	462a      	mov	r2, r5
    f0f2:	f000 f94b 	bl	f38c <am_hal_queue_item_get>
    f0f6:	e49d      	b.n	ea34 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
    f0f8:	4605      	mov	r5, r0
    f0fa:	e49b      	b.n	ea34 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    f0fc:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    f100:	e7e7      	b.n	f0d2 <am_hal_uart_transfer+0x8d2>
    f102:	bf00      	nop
    f104:	08000001 	.word	0x08000001

0000f108 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    f108:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    f10c:	b570      	push	{r4, r5, r6, lr}
    f10e:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    f110:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    f112:	b183      	cbz	r3, f136 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    f114:	6b40      	ldr	r0, [r0, #52]	; 0x34
    f116:	b170      	cbz	r0, f136 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    f118:	4e13      	ldr	r6, [pc, #76]	; (f168 <am_hal_uart_tx_flush+0x60>)
    f11a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f11c:	fbb6 f2f1 	udiv	r2, r6, r1
    f120:	2a02      	cmp	r2, #2
    f122:	ea4f 1002 	mov.w	r0, r2, lsl #4
    f126:	bf8c      	ite	hi
    f128:	3829      	subhi	r0, #41	; 0x29
    f12a:	2001      	movls	r0, #1
    f12c:	f7fe fd34 	bl	db98 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    f130:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f132:	2b00      	cmp	r3, #0
    f134:	d1f1      	bne.n	f11a <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    f136:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f13a:	351c      	adds	r5, #28
    f13c:	032d      	lsls	r5, r5, #12
    f13e:	69a8      	ldr	r0, [r5, #24]
    f140:	0702      	lsls	r2, r0, #28
    f142:	d50e      	bpl.n	f162 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    f144:	4e08      	ldr	r6, [pc, #32]	; (f168 <am_hal_uart_tx_flush+0x60>)
    f146:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f148:	fbb6 f2f1 	udiv	r2, r6, r1
    f14c:	2a02      	cmp	r2, #2
    f14e:	ea4f 1002 	mov.w	r0, r2, lsl #4
    f152:	bf8c      	ite	hi
    f154:	3829      	subhi	r0, #41	; 0x29
    f156:	2001      	movls	r0, #1
    f158:	f7fe fd1e 	bl	db98 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    f15c:	69ab      	ldr	r3, [r5, #24]
    f15e:	071b      	lsls	r3, r3, #28
    f160:	d4f1      	bmi.n	f146 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    f162:	2000      	movs	r0, #0
    f164:	bd70      	pop	{r4, r5, r6, pc}
    f166:	bf00      	nop
    f168:	00b71b00 	.word	0x00b71b00

0000f16c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    f16c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    f16e:	2400      	movs	r4, #0
    f170:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    f172:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    f174:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    f176:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    f178:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    f17a:	6141      	str	r1, [r0, #20]
}
    f17c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f180:	4770      	bx	lr
    f182:	bf00      	nop

0000f184 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    f184:	b5f0      	push	{r4, r5, r6, r7, lr}
    f186:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f188:	6905      	ldr	r5, [r0, #16]
{
    f18a:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f18c:	fb05 f502 	mul.w	r5, r5, r2
{
    f190:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
    f192:	f7fe ffb7 	bl	e104 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    f196:	68e3      	ldr	r3, [r4, #12]
    f198:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
    f19a:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    f19c:	1a99      	subs	r1, r3, r2
    f19e:	428d      	cmp	r5, r1
    f1a0:	f200 8081 	bhi.w	f2a6 <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1a4:	2d00      	cmp	r5, #0
    f1a6:	d075      	beq.n	f294 <am_hal_queue_item_add+0x110>
    f1a8:	6826      	ldr	r6, [r4, #0]
    f1aa:	2f00      	cmp	r7, #0
    f1ac:	d07d      	beq.n	f2aa <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f1ae:	4638      	mov	r0, r7
    f1b0:	6963      	ldr	r3, [r4, #20]
    f1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
    f1b6:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1b8:	6821      	ldr	r1, [r4, #0]
    f1ba:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    f1be:	1c4a      	adds	r2, r1, #1
    f1c0:	197e      	adds	r6, r7, r5
    f1c2:	43ff      	mvns	r7, r7
    f1c4:	fbb2 fcfe 	udiv	ip, r2, lr
    f1c8:	4437      	add	r7, r6
    f1ca:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1ce:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1d0:	6023      	str	r3, [r4, #0]
    f1d2:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1d6:	d05c      	beq.n	f292 <am_hal_queue_item_add+0x10e>
    f1d8:	b349      	cbz	r1, f22e <am_hal_queue_item_add+0xaa>
    f1da:	2901      	cmp	r1, #1
    f1dc:	d019      	beq.n	f212 <am_hal_queue_item_add+0x8e>
    f1de:	2902      	cmp	r1, #2
    f1e0:	d00b      	beq.n	f1fa <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f1e2:	6962      	ldr	r2, [r4, #20]
    f1e4:	f810 7b01 	ldrb.w	r7, [r0], #1
    f1e8:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1ea:	6823      	ldr	r3, [r4, #0]
    f1ec:	68e1      	ldr	r1, [r4, #12]
    f1ee:	1c5a      	adds	r2, r3, #1
    f1f0:	fbb2 f7f1 	udiv	r7, r2, r1
    f1f4:	fb01 2317 	mls	r3, r1, r7, r2
    f1f8:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f1fa:	6962      	ldr	r2, [r4, #20]
    f1fc:	f810 1b01 	ldrb.w	r1, [r0], #1
    f200:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f202:	6823      	ldr	r3, [r4, #0]
    f204:	68e7      	ldr	r7, [r4, #12]
    f206:	1c5a      	adds	r2, r3, #1
    f208:	fbb2 f1f7 	udiv	r1, r2, r7
    f20c:	fb07 2311 	mls	r3, r7, r1, r2
    f210:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f212:	6967      	ldr	r7, [r4, #20]
    f214:	f810 2b01 	ldrb.w	r2, [r0], #1
    f218:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f21a:	6823      	ldr	r3, [r4, #0]
    f21c:	68e1      	ldr	r1, [r4, #12]
    f21e:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f220:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f222:	fbb7 f2f1 	udiv	r2, r7, r1
    f226:	fb01 7312 	mls	r3, r1, r2, r7
    f22a:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f22c:	d031      	beq.n	f292 <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f22e:	4686      	mov	lr, r0
    f230:	6967      	ldr	r7, [r4, #20]
    f232:	f81e 1b01 	ldrb.w	r1, [lr], #1
    f236:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f238:	6823      	ldr	r3, [r4, #0]
    f23a:	68e2      	ldr	r2, [r4, #12]
    f23c:	1c5f      	adds	r7, r3, #1
    f23e:	fbb7 f1f2 	udiv	r1, r7, r2
    f242:	fb02 7311 	mls	r3, r2, r1, r7
    f246:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f248:	6962      	ldr	r2, [r4, #20]
    f24a:	7847      	ldrb	r7, [r0, #1]
    f24c:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f24e:	6823      	ldr	r3, [r4, #0]
    f250:	68e1      	ldr	r1, [r4, #12]
    f252:	1c5f      	adds	r7, r3, #1
    f254:	fbb7 f2f1 	udiv	r2, r7, r1
    f258:	fb01 7312 	mls	r3, r1, r2, r7
    f25c:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f25e:	6961      	ldr	r1, [r4, #20]
    f260:	f89e 7001 	ldrb.w	r7, [lr, #1]
    f264:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f266:	6822      	ldr	r2, [r4, #0]
    f268:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f26a:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f26c:	3201      	adds	r2, #1
    f26e:	fbb2 fcf7 	udiv	ip, r2, r7
    f272:	fb07 231c 	mls	r3, r7, ip, r2
    f276:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f278:	78c7      	ldrb	r7, [r0, #3]
    f27a:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f27c:	6822      	ldr	r2, [r4, #0]
    f27e:	68e1      	ldr	r1, [r4, #12]
    f280:	1c57      	adds	r7, r2, #1
    f282:	3004      	adds	r0, #4
    f284:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f288:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f28a:	fb01 7312 	mls	r3, r1, r2, r7
    f28e:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f290:	d1cd      	bne.n	f22e <am_hal_queue_item_add+0xaa>
    f292:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    f294:	442a      	add	r2, r5
    f296:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    f298:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    f29a:	9801      	ldr	r0, [sp, #4]
    f29c:	f7fe ff36 	bl	e10c <am_hal_interrupt_master_set>

    return bSuccess;
}
    f2a0:	4620      	mov	r0, r4
    f2a2:	b003      	add	sp, #12
    f2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    f2a6:	2400      	movs	r4, #0
    f2a8:	e7f7      	b.n	f29a <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2aa:	1c70      	adds	r0, r6, #1
    f2ac:	fbb0 fef3 	udiv	lr, r0, r3
    f2b0:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2b4:	2001      	movs	r0, #1
    f2b6:	1e6e      	subs	r6, r5, #1
    f2b8:	4285      	cmp	r5, r0
    f2ba:	f006 0707 	and.w	r7, r6, #7
    f2be:	d063      	beq.n	f388 <am_hal_queue_item_add+0x204>
    f2c0:	b3bf      	cbz	r7, f332 <am_hal_queue_item_add+0x1ae>
    f2c2:	2f01      	cmp	r7, #1
    f2c4:	d02d      	beq.n	f322 <am_hal_queue_item_add+0x19e>
    f2c6:	2f02      	cmp	r7, #2
    f2c8:	d025      	beq.n	f316 <am_hal_queue_item_add+0x192>
    f2ca:	2f03      	cmp	r7, #3
    f2cc:	d01d      	beq.n	f30a <am_hal_queue_item_add+0x186>
    f2ce:	2f04      	cmp	r7, #4
    f2d0:	d015      	beq.n	f2fe <am_hal_queue_item_add+0x17a>
    f2d2:	2f05      	cmp	r7, #5
    f2d4:	d00d      	beq.n	f2f2 <am_hal_queue_item_add+0x16e>
    f2d6:	2f06      	cmp	r7, #6
    f2d8:	d005      	beq.n	f2e6 <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2da:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2dc:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2de:	fbb1 fcf3 	udiv	ip, r1, r3
    f2e2:	fb03 111c 	mls	r1, r3, ip, r1
    f2e6:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2e8:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2ea:	fbb1 f6f3 	udiv	r6, r1, r3
    f2ee:	fb03 1116 	mls	r1, r3, r6, r1
    f2f2:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2f4:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2f6:	fbb1 f7f3 	udiv	r7, r1, r3
    f2fa:	fb03 1117 	mls	r1, r3, r7, r1
    f2fe:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f300:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f302:	fbb1 fef3 	udiv	lr, r1, r3
    f306:	fb03 111e 	mls	r1, r3, lr, r1
    f30a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f30c:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f30e:	fbb1 fcf3 	udiv	ip, r1, r3
    f312:	fb03 111c 	mls	r1, r3, ip, r1
    f316:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f318:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f31a:	fbb1 f6f3 	udiv	r6, r1, r3
    f31e:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f322:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f324:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f326:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f328:	fbb1 f7f3 	udiv	r7, r1, r3
    f32c:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f330:	d02a      	beq.n	f388 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f332:	3101      	adds	r1, #1
    f334:	fbb1 fef3 	udiv	lr, r1, r3
    f338:	fb03 161e 	mls	r6, r3, lr, r1
    f33c:	1c77      	adds	r7, r6, #1
    f33e:	fbb7 fcf3 	udiv	ip, r7, r3
    f342:	fb03 711c 	mls	r1, r3, ip, r7
    f346:	1c4e      	adds	r6, r1, #1
    f348:	fbb6 f7f3 	udiv	r7, r6, r3
    f34c:	fb03 6117 	mls	r1, r3, r7, r6
    f350:	1c4e      	adds	r6, r1, #1
    f352:	fbb6 f7f3 	udiv	r7, r6, r3
    f356:	fb03 6117 	mls	r1, r3, r7, r6
    f35a:	1c4e      	adds	r6, r1, #1
    f35c:	fbb6 f7f3 	udiv	r7, r6, r3
    f360:	fb03 6117 	mls	r1, r3, r7, r6
    f364:	1c4e      	adds	r6, r1, #1
    f366:	fbb6 f7f3 	udiv	r7, r6, r3
    f36a:	fb03 6117 	mls	r1, r3, r7, r6
    f36e:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f370:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f372:	fbb6 f7f3 	udiv	r7, r6, r3
    f376:	fb03 6117 	mls	r1, r3, r7, r6
    f37a:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f37c:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f37e:	fbb6 f7f3 	udiv	r7, r6, r3
    f382:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f386:	d1d4      	bne.n	f332 <am_hal_queue_item_add+0x1ae>
    f388:	6021      	str	r1, [r4, #0]
    f38a:	e783      	b.n	f294 <am_hal_queue_item_add+0x110>

0000f38c <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f38e:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f390:	6905      	ldr	r5, [r0, #16]
{
    f392:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f394:	fb05 f502 	mul.w	r5, r5, r2
{
    f398:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
    f39a:	f7fe feb3 	bl	e104 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f39e:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
    f3a0:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f3a2:	42bd      	cmp	r5, r7
    f3a4:	f200 8083 	bhi.w	f4ae <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3a8:	2d00      	cmp	r5, #0
    f3aa:	d077      	beq.n	f49c <am_hal_queue_item_get+0x110>
    f3ac:	6863      	ldr	r3, [r4, #4]
    f3ae:	2e00      	cmp	r6, #0
    f3b0:	d07f      	beq.n	f4b2 <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f3b2:	6962      	ldr	r2, [r4, #20]
    f3b4:	4630      	mov	r0, r6
    f3b6:	5cd1      	ldrb	r1, [r2, r3]
    f3b8:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3bc:	6863      	ldr	r3, [r4, #4]
    f3be:	68e7      	ldr	r7, [r4, #12]
    f3c0:	1c5a      	adds	r2, r3, #1
    f3c2:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3c4:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3c6:	fbb2 f6f7 	udiv	r6, r2, r7
    f3ca:	fb07 2316 	mls	r3, r7, r6, r2
    f3ce:	f105 37ff 	add.w	r7, r5, #4294967295
    f3d2:	6063      	str	r3, [r4, #4]
    f3d4:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3d8:	d05f      	beq.n	f49a <am_hal_queue_item_get+0x10e>
    f3da:	b362      	cbz	r2, f436 <am_hal_queue_item_get+0xaa>
    f3dc:	2a01      	cmp	r2, #1
    f3de:	d01b      	beq.n	f418 <am_hal_queue_item_get+0x8c>
    f3e0:	2a02      	cmp	r2, #2
    f3e2:	d00c      	beq.n	f3fe <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f3e4:	6966      	ldr	r6, [r4, #20]
    f3e6:	f816 c003 	ldrb.w	ip, [r6, r3]
    f3ea:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3ee:	6863      	ldr	r3, [r4, #4]
    f3f0:	68e7      	ldr	r7, [r4, #12]
    f3f2:	1c5a      	adds	r2, r3, #1
    f3f4:	fbb2 f6f7 	udiv	r6, r2, r7
    f3f8:	fb07 2316 	mls	r3, r7, r6, r2
    f3fc:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f3fe:	6967      	ldr	r7, [r4, #20]
    f400:	f817 e003 	ldrb.w	lr, [r7, r3]
    f404:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f408:	6863      	ldr	r3, [r4, #4]
    f40a:	68e6      	ldr	r6, [r4, #12]
    f40c:	1c5a      	adds	r2, r3, #1
    f40e:	fbb2 f7f6 	udiv	r7, r2, r6
    f412:	fb06 2317 	mls	r3, r6, r7, r2
    f416:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f418:	6966      	ldr	r6, [r4, #20]
    f41a:	f816 c003 	ldrb.w	ip, [r6, r3]
    f41e:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f422:	6863      	ldr	r3, [r4, #4]
    f424:	68e7      	ldr	r7, [r4, #12]
    f426:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f428:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f42a:	fbb2 f6f7 	udiv	r6, r2, r7
    f42e:	fb07 2316 	mls	r3, r7, r6, r2
    f432:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f434:	d031      	beq.n	f49a <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f436:	6962      	ldr	r2, [r4, #20]
    f438:	4686      	mov	lr, r0
    f43a:	5cd6      	ldrb	r6, [r2, r3]
    f43c:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f440:	6863      	ldr	r3, [r4, #4]
    f442:	68e7      	ldr	r7, [r4, #12]
    f444:	1c5a      	adds	r2, r3, #1
    f446:	fbb2 f6f7 	udiv	r6, r2, r7
    f44a:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f44e:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f450:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f452:	5cfa      	ldrb	r2, [r7, r3]
    f454:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f456:	6863      	ldr	r3, [r4, #4]
    f458:	68e6      	ldr	r6, [r4, #12]
    f45a:	1c5f      	adds	r7, r3, #1
    f45c:	fbb7 f2f6 	udiv	r2, r7, r6
    f460:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f464:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f466:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f468:	5cf7      	ldrb	r7, [r6, r3]
    f46a:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f46e:	6862      	ldr	r2, [r4, #4]
    f470:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f472:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f474:	3201      	adds	r2, #1
    f476:	fbb2 fcf7 	udiv	ip, r2, r7
    f47a:	fb07 231c 	mls	r3, r7, ip, r2
    f47e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f480:	5cf7      	ldrb	r7, [r6, r3]
    f482:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f484:	6866      	ldr	r6, [r4, #4]
    f486:	68e7      	ldr	r7, [r4, #12]
    f488:	1c72      	adds	r2, r6, #1
    f48a:	3004      	adds	r0, #4
    f48c:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f490:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f492:	fb07 2316 	mls	r3, r7, r6, r2
    f496:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f498:	d1cd      	bne.n	f436 <am_hal_queue_item_get+0xaa>
    f49a:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    f49c:	1b7f      	subs	r7, r7, r5
    f49e:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    f4a0:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    f4a2:	9801      	ldr	r0, [sp, #4]
    f4a4:	f7fe fe32 	bl	e10c <am_hal_interrupt_master_set>

    return bSuccess;
}
    f4a8:	4620      	mov	r0, r4
    f4aa:	b003      	add	sp, #12
    f4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    f4ae:	2400      	movs	r4, #0
    f4b0:	e7f7      	b.n	f4a2 <am_hal_queue_item_get+0x116>
    f4b2:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4b4:	1c58      	adds	r0, r3, #1
    f4b6:	fbb0 fef1 	udiv	lr, r0, r1
    f4ba:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4be:	2001      	movs	r0, #1
    f4c0:	1e6a      	subs	r2, r5, #1
    f4c2:	4285      	cmp	r5, r0
    f4c4:	f002 0607 	and.w	r6, r2, #7
    f4c8:	d063      	beq.n	f592 <am_hal_queue_item_get+0x206>
    f4ca:	b3be      	cbz	r6, f53c <am_hal_queue_item_get+0x1b0>
    f4cc:	2e01      	cmp	r6, #1
    f4ce:	d02d      	beq.n	f52c <am_hal_queue_item_get+0x1a0>
    f4d0:	2e02      	cmp	r6, #2
    f4d2:	d025      	beq.n	f520 <am_hal_queue_item_get+0x194>
    f4d4:	2e03      	cmp	r6, #3
    f4d6:	d01d      	beq.n	f514 <am_hal_queue_item_get+0x188>
    f4d8:	2e04      	cmp	r6, #4
    f4da:	d015      	beq.n	f508 <am_hal_queue_item_get+0x17c>
    f4dc:	2e05      	cmp	r6, #5
    f4de:	d00d      	beq.n	f4fc <am_hal_queue_item_get+0x170>
    f4e0:	2e06      	cmp	r6, #6
    f4e2:	d005      	beq.n	f4f0 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4e4:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4e6:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4e8:	fbb3 f2f1 	udiv	r2, r3, r1
    f4ec:	fb01 3312 	mls	r3, r1, r2, r3
    f4f0:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4f2:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4f4:	fbb3 fcf1 	udiv	ip, r3, r1
    f4f8:	fb01 331c 	mls	r3, r1, ip, r3
    f4fc:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4fe:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f500:	fbb3 fef1 	udiv	lr, r3, r1
    f504:	fb01 331e 	mls	r3, r1, lr, r3
    f508:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f50a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f50c:	fbb3 f6f1 	udiv	r6, r3, r1
    f510:	fb01 3316 	mls	r3, r1, r6, r3
    f514:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f516:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f518:	fbb3 f2f1 	udiv	r2, r3, r1
    f51c:	fb01 3312 	mls	r3, r1, r2, r3
    f520:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f522:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f524:	fbb3 fcf1 	udiv	ip, r3, r1
    f528:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f52c:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f52e:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f530:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f532:	fbb3 fef1 	udiv	lr, r3, r1
    f536:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f53a:	d02a      	beq.n	f592 <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f53c:	3301      	adds	r3, #1
    f53e:	fbb3 f6f1 	udiv	r6, r3, r1
    f542:	fb01 3216 	mls	r2, r1, r6, r3
    f546:	1c56      	adds	r6, r2, #1
    f548:	fbb6 fcf1 	udiv	ip, r6, r1
    f54c:	fb01 631c 	mls	r3, r1, ip, r6
    f550:	1c5a      	adds	r2, r3, #1
    f552:	fbb2 f6f1 	udiv	r6, r2, r1
    f556:	fb01 2316 	mls	r3, r1, r6, r2
    f55a:	1c5a      	adds	r2, r3, #1
    f55c:	fbb2 f6f1 	udiv	r6, r2, r1
    f560:	fb01 2316 	mls	r3, r1, r6, r2
    f564:	1c5a      	adds	r2, r3, #1
    f566:	fbb2 f6f1 	udiv	r6, r2, r1
    f56a:	fb01 2316 	mls	r3, r1, r6, r2
    f56e:	1c5a      	adds	r2, r3, #1
    f570:	fbb2 f6f1 	udiv	r6, r2, r1
    f574:	fb01 2316 	mls	r3, r1, r6, r2
    f578:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f57a:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f57c:	fbb2 f6f1 	udiv	r6, r2, r1
    f580:	fb01 2316 	mls	r3, r1, r6, r2
    f584:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f586:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f588:	fbb2 f6f1 	udiv	r6, r2, r1
    f58c:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f590:	d1d4      	bne.n	f53c <am_hal_queue_item_get+0x1b0>
    f592:	6063      	str	r3, [r4, #4]
    f594:	e782      	b.n	f49c <am_hal_queue_item_get+0x110>
    f596:	bf00      	nop
    f598:	69626d41 	.word	0x69626d41
    f59c:	694d2071 	.word	0x694d2071
    f5a0:	206f7263 	.word	0x206f7263
    f5a4:	69727027 	.word	0x69727027
    f5a8:	2027656d 	.word	0x2027656d
    f5ac:	6d617865 	.word	0x6d617865
    f5b0:	2e656c70 	.word	0x2e656c70
    f5b4:	00000a0a 	.word	0x00000a0a
    f5b8:	64657355 	.word	0x64657355
    f5bc:	726f6620 	.word	0x726f6620
    f5c0:	61656d20 	.word	0x61656d20
    f5c4:	69727573 	.word	0x69727573
    f5c8:	7020676e 	.word	0x7020676e
    f5cc:	7265776f 	.word	0x7265776f
    f5d0:	69687720 	.word	0x69687720
    f5d4:	6320656c 	.word	0x6320656c
    f5d8:	75706d6f 	.word	0x75706d6f
    f5dc:	676e6974 	.word	0x676e6974
    f5e0:	65687420 	.word	0x65687420
    f5e4:	6d756e20 	.word	0x6d756e20
    f5e8:	20726562 	.word	0x20726562
    f5ec:	7020666f 	.word	0x7020666f
    f5f0:	656d6972 	.word	0x656d6972
    f5f4:	6d756e20 	.word	0x6d756e20
    f5f8:	73726562 	.word	0x73726562
    f5fc:	206e6920 	.word	0x206e6920
    f600:	61722061 	.word	0x61722061
    f604:	2e65676e 	.word	0x2e65676e
    f608:	0000000a 	.word	0x0000000a
    f60c:	20434347 	.word	0x20434347
    f610:	2e332e36 	.word	0x2e332e36
    f614:	30322031 	.word	0x30322031
    f618:	32303731 	.word	0x32303731
    f61c:	28203531 	.word	0x28203531
    f620:	656c6572 	.word	0x656c6572
    f624:	29657361 	.word	0x29657361
    f628:	52415b20 	.word	0x52415b20
    f62c:	6d652f4d 	.word	0x6d652f4d
    f630:	64646562 	.word	0x64646562
    f634:	362d6465 	.word	0x362d6465
    f638:	6172622d 	.word	0x6172622d
    f63c:	2068636e 	.word	0x2068636e
    f640:	69766572 	.word	0x69766572
    f644:	6e6f6973 	.word	0x6e6f6973
    f648:	35343220 	.word	0x35343220
    f64c:	5d323135 	.word	0x5d323135
    f650:	00000000 	.word	0x00000000
    f654:	20707041 	.word	0x20707041
    f658:	706d6f43 	.word	0x706d6f43
    f65c:	72656c69 	.word	0x72656c69
    f660:	2020203a 	.word	0x2020203a
    f664:	0a732520 	.word	0x0a732520
    f668:	00000000 	.word	0x00000000
    f66c:	204c4148 	.word	0x204c4148
    f670:	706d6f43 	.word	0x706d6f43
    f674:	72656c69 	.word	0x72656c69
    f678:	2020203a 	.word	0x2020203a
    f67c:	0a732520 	.word	0x0a732520
    f680:	00000000 	.word	0x00000000
    f684:	204c4148 	.word	0x204c4148
    f688:	204b4453 	.word	0x204b4453
    f68c:	73726576 	.word	0x73726576
    f690:	3a6e6f69 	.word	0x3a6e6f69
    f694:	2e642520 	.word	0x2e642520
    f698:	252e6425 	.word	0x252e6425
    f69c:	00000a64 	.word	0x00000a64
    f6a0:	73736150 	.word	0x73736150
    f6a4:	756e203a 	.word	0x756e203a
    f6a8:	7265626d 	.word	0x7265626d
    f6ac:	20666f20 	.word	0x20666f20
    f6b0:	6d697270 	.word	0x6d697270
    f6b4:	66207365 	.word	0x66207365
    f6b8:	2520726f 	.word	0x2520726f
    f6bc:	73692064 	.word	0x73692064
    f6c0:	2e642520 	.word	0x2e642520
    f6c4:	0000000a 	.word	0x0000000a
    f6c8:	4f525245 	.word	0x4f525245
    f6cc:	49203a52 	.word	0x49203a52
    f6d0:	6c61766e 	.word	0x6c61766e
    f6d4:	72206469 	.word	0x72206469
    f6d8:	6c757365 	.word	0x6c757365
    f6dc:	45202e74 	.word	0x45202e74
    f6e0:	63657078 	.word	0x63657078
    f6e4:	20646574 	.word	0x20646574
    f6e8:	202c6425 	.word	0x202c6425
    f6ec:	20746f67 	.word	0x20746f67
    f6f0:	0a2e6425 	.word	0x0a2e6425
    f6f4:	00000000 	.word	0x00000000
    f6f8:	0a0a0a0a 	.word	0x0a0a0a0a
    f6fc:	0a0a0a0a 	.word	0x0a0a0a0a
    f700:	0a0a0a0a 	.word	0x0a0a0a0a
    f704:	0a0a0a0a 	.word	0x0a0a0a0a
    f708:	00000a0a 	.word	0x00000a0a

0000f70c <g_sBspUartConfig>:
    f70c:	0001c200 00000060 00000000 00000000     ....`...........
    f71c:	00000000 00000012 00000000 00000000     ................
	...

0000f734 <g_AM_BSP_GPIO_COM_UART_RX>:
    f734:	00000000                                ....

0000f738 <g_AM_BSP_GPIO_COM_UART_TX>:
    f738:	00000000                                ....

0000f73c <am_hal_cachectrl_defaults>:
    f73c:	00000308                                ....

0000f740 <g_ui32HALversion>:
    f740:	01020d00                                ....

0000f744 <g_ui8HALcompiler>:
    f744:	20434347 2e332e36 30322031 32303731     GCC 6.3.1 201702
    f754:	28203531 656c6572 29657361 52415b20     15 (release) [AR
    f764:	6d652f4d 64646562 362d6465 6172622d     M/embedded-6-bra
    f774:	2068636e 69766572 6e6f6973 35343220     nch revision 245
    f784:	5d323135 00000000                       512]....

0000f78c <g_AM_HAL_GPIO_DISABLE>:
    f78c:	00000003                                ....

0000f790 <g_AM_HAL_GPIO_OUTPUT>:
    f790:	00000403                                ....

0000f794 <g_ui8Bit76Capabilities>:
    f794:	02800101 80010180 80800101 80808080     ................
    f7a4:	80808080 80808008 01800180 80808080     ................
    f7b4:	80808080 01800402 01010401 80808080     ................
    f7c4:	00000101                                ....

0000f7c8 <g_ui8Inpen>:
    f7c8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f7d8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f7e8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f7f8:	00003130                                01..

0000f7fc <g_ui8NCEtable>:
    f7fc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f80c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f81c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f82c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f83c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f84c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f85c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f86c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f87c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f88c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f89c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f8ac:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f8bc:	32221202 43231303                       .."2..#C

0000f8c4 <g_ui8nCEpins>:
    f8c4:	02070707 00080802 01020202 01010101     ................
    f8d4:	01010101 01010101 01010101 01010101     ................
    f8e4:	01010101 08010101 01010008 01010101     ................
    f8f4:	00000101                                ....

0000f8f8 <g_am_hal_mcuctrl_flash_size>:
    f8f8:	00004000 00008000 00010000 00020000     .@..............
    f908:	00040000 00080000 00100000 00200000     .............. .
	...

0000f938 <g_am_hal_mcuctrl_sram_size>:
    f938:	00004000 00008000 00010000 00020000     .@..............
    f948:	00040000 00080000 00100000 00060000     ................
	...

0000f978 <am_hal_pwrctrl_memory_control>:
	...
    f98c:	00000001 00000001 00000001 00001fff     ................
    f99c:	00001fff 00000003 00000003 00000003     ................
    f9ac:	00001fff 00001fff 00000007 00000007     ................
    f9bc:	00000007 00001fff 00001fff 0000000f     ................
    f9cc:	0000000f 0000000f 00001fff 00001fff     ................
    f9dc:	0000001f 0000001f 0000001f 00001fff     ................
    f9ec:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    f9fc:	00001fff 00001fff 0000007f 0000007f     ................
    fa0c:	0000007f 00001fff 00001fff 000000ff     ................
    fa1c:	000000ff 000000ff 00001fff 00001fff     ................
    fa2c:	000001ff 000001ff 000001ff 00001fff     ................
    fa3c:	00001fff 000003ff 000003ff 000003ff     ................
    fa4c:	00001fff 00001fff 000007ff 000007ff     ................
    fa5c:	000007ff 00001fff 00001fff 00000fff     ................
    fa6c:	00000fff 00000fff 00001fff 00001fff     ................
    fa7c:	00001fff 00001fff 00001fff 00001fff     ................
    fa8c:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    fa9c:	00006000 00006000 00006000 00006000     .`...`...`...`..
    faac:	00006000 00006000 00006000 c0000000     .`...`...`......
    fabc:	00018000 c0000000 c0000000 00018000     ................
    facc:	c0007fff 0001ffff c0007fff c0007fff     ................
    fadc:	0001ffff                                ....

0000fae0 <am_hal_pwrctrl_peripheral_control>:
	...
    faec:	00000001 00000004 00000004 00000002     ................
    fafc:	00000008 00000008 00000004 00000008     ................
    fb0c:	00000008 00000008 00000008 00000008     ................
    fb1c:	00000010 00000010 00000010 00000020     ............ ...
    fb2c:	00000010 00000010 00000040 00000010     ........@.......
    fb3c:	00000010 00000080 00000004 00000004     ................
    fb4c:	00000100 00000004 00000004 00000200     ................
    fb5c:	00000020 00000020 00000400 00000004      ... ...........
    fb6c:	00000004 00000800 00000040 00000040     ........@...@...
    fb7c:	00001000 00000080 00000080 00002000     ............. ..
    fb8c:	00000100 00000100                       ........
