
stimer_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f50  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000df50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001000  0000df50  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000df50  2**0
                  CONTENTS, READONLY
  5 .debug_info   00023613  00000000  00000000  0000df87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003084  00000000  00000000  0003159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000708  00000000  00000000  0003461e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001158  00000000  00000000  00034d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000553b  00000000  00000000  00035e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000af12  00000000  00000000  0003b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000462cb  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001374  00000000  00000000  00046348  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004178  00000000  00000000  000476bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 a5 c2 00 00 0d c3 00 00 55 c3 00 00     ............U...
    c010:	55 c3 00 00 55 c3 00 00 55 c3 00 00 00 00 00 00     U...U...U.......
	...
    c02c:	13 c3 00 00 13 c3 00 00 00 00 00 00 13 c3 00 00     ................
    c03c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c04c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c05c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c06c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c07c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c08c:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c09c:	0d c2 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c0ac:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c0bc:	13 c3 00 00 13 c3 00 00 13 c3 00 00 13 c3 00 00     ................
    c0cc:	13 c3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <stimer_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
stimer_init(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	af00      	add	r7, sp, #0
    //
    // Enable compare A interrupt in STIMER
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
    c1e0:	2001      	movs	r0, #1
    c1e2:	f001 fd21 	bl	dc28 <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
    c1e6:	2017      	movs	r0, #23
    c1e8:	f7ff ffda 	bl	c1a0 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER and run
    //
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c1ec:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c1f0:	f001 fcba 	bl	db68 <am_hal_stimer_config>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c1f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c1f8:	2000      	movs	r0, #0
    c1fa:	f001 fcbf 	bl	db7c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(AM_HAL_STIMER_XTAL_32KHZ |
    c1fe:	f240 1003 	movw	r0, #259	; 0x103
    c202:	f001 fcb1 	bl	db68 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);

}
    c206:	bf00      	nop
    c208:	bd80      	pop	{r7, pc}
	...

0000c20c <am_stimer_cmpr0_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
    c20c:	b580      	push	{r7, lr}
    c20e:	af00      	add	r7, sp, #0
    //
    // Check the timer interrupt status.
    //
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    c210:	2001      	movs	r0, #1
    c212:	f001 fd13 	bl	dc3c <am_hal_stimer_int_clear>
    am_hal_stimer_compare_delta_set(0, WAKE_INTERVAL);
    c216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c21a:	2000      	movs	r0, #0
    c21c:	f001 fcae 	bl	db7c <am_hal_stimer_compare_delta_set>

    g_ui32Count++;
    c220:	4b0b      	ldr	r3, [pc, #44]	; (c250 <am_stimer_cmpr0_isr+0x44>)
    c222:	681b      	ldr	r3, [r3, #0]
    c224:	3301      	adds	r3, #1
    c226:	4a0a      	ldr	r2, [pc, #40]	; (c250 <am_stimer_cmpr0_isr+0x44>)
    c228:	6013      	str	r3, [r2, #0]
    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 1);
#else
    am_util_stdio_printf("%d ", g_ui32Count & 7);
    c22a:	4b09      	ldr	r3, [pc, #36]	; (c250 <am_stimer_cmpr0_isr+0x44>)
    c22c:	681b      	ldr	r3, [r3, #0]
    c22e:	f003 0307 	and.w	r3, r3, #7
    c232:	4619      	mov	r1, r3
    c234:	4807      	ldr	r0, [pc, #28]	; (c254 <am_stimer_cmpr0_isr+0x48>)
    c236:	f000 ff91 	bl	d15c <am_util_stdio_printf>

    if ( (g_ui32Count & 0x1F) == 0 )
    c23a:	4b05      	ldr	r3, [pc, #20]	; (c250 <am_stimer_cmpr0_isr+0x44>)
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	f003 031f 	and.w	r3, r3, #31
    c242:	2b00      	cmp	r3, #0
    c244:	d102      	bne.n	c24c <am_stimer_cmpr0_isr+0x40>
    {
        am_util_stdio_printf("\n");
    c246:	4804      	ldr	r0, [pc, #16]	; (c258 <am_stimer_cmpr0_isr+0x4c>)
    c248:	f000 ff88 	bl	d15c <am_util_stdio_printf>
    }
#endif
}
    c24c:	bf00      	nop
    c24e:	bd80      	pop	{r7, pc}
    c250:	10001000 	.word	0x10001000
    c254:	0000dd34 	.word	0x0000dd34
    c258:	0000dd38 	.word	0x0000dd38

0000c25c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c25c:	b580      	push	{r7, lr}
    c25e:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c260:	2100      	movs	r1, #0
    c262:	2000      	movs	r0, #0
    c264:	f001 f810 	bl	d288 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c268:	480c      	ldr	r0, [pc, #48]	; (c29c <main+0x40>)
    c26a:	f000 ffd9 	bl	d220 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c26e:	f001 f801 	bl	d274 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c272:	f000 ff9b 	bl	d1ac <am_bsp_low_power_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c276:	f000 ffb3 	bl	d1e0 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c27a:	f000 ff8d 	bl	d198 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("STimer Example\n");
    c27e:	4808      	ldr	r0, [pc, #32]	; (c2a0 <main+0x44>)
    c280:	f000 ff6c 	bl	d15c <am_util_stdio_printf>
    am_util_delay_ms(10);
    c284:	200a      	movs	r0, #10
    c286:	f000 f847 	bl	c318 <am_util_delay_ms>

    //
    // STIMER init.
    //
    stimer_init();
    c28a:	f7ff ffa7 	bl	c1dc <stimer_init>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_master_enable();
    c28e:	f001 fae7 	bl	d860 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c292:	2001      	movs	r0, #1
    c294:	f001 fcd8 	bl	dc48 <am_hal_sysctrl_sleep>
    c298:	e7fb      	b.n	c292 <main+0x36>
    c29a:	bf00      	nop
    c29c:	0000dd64 	.word	0x0000dd64
    c2a0:	0000dd3c 	.word	0x0000dd3c

0000c2a4 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c2a4:	4811      	ldr	r0, [pc, #68]	; (c2ec <zero_loop+0x12>)
    c2a6:	4912      	ldr	r1, [pc, #72]	; (c2f0 <zero_loop+0x16>)
    c2a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c2aa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c2ae:	4811      	ldr	r0, [pc, #68]	; (c2f4 <zero_loop+0x1a>)
    c2b0:	6801      	ldr	r1, [r0, #0]
    c2b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2b6:	6001      	str	r1, [r0, #0]
    c2b8:	f3bf 8f4f 	dsb	sy
    c2bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c2c0:	480d      	ldr	r0, [pc, #52]	; (c2f8 <zero_loop+0x1e>)
    c2c2:	490e      	ldr	r1, [pc, #56]	; (c2fc <zero_loop+0x22>)
    c2c4:	4a0e      	ldr	r2, [pc, #56]	; (c300 <zero_loop+0x26>)

0000c2c6 <copy_loop>:
    c2c6:	f850 3b04 	ldr.w	r3, [r0], #4
    c2ca:	f841 3b04 	str.w	r3, [r1], #4
    c2ce:	4291      	cmp	r1, r2
    c2d0:	dbf9      	blt.n	c2c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c2d2:	480c      	ldr	r0, [pc, #48]	; (c304 <zero_loop+0x2a>)
    c2d4:	490c      	ldr	r1, [pc, #48]	; (c308 <zero_loop+0x2e>)
    c2d6:	f04f 0200 	mov.w	r2, #0

0000c2da <zero_loop>:
    c2da:	4288      	cmp	r0, r1
    c2dc:	bfb8      	it	lt
    c2de:	f840 2b04 	strlt.w	r2, [r0], #4
    c2e2:	dbfa      	blt.n	c2da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c2e4:	f7ff ffba 	bl	c25c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c2e8:	be00      	bkpt	0x0000
}
    c2ea:	bf00      	nop
    c2ec:	e000ed08 	.word	0xe000ed08
    c2f0:	0000c000 	.word	0x0000c000
    c2f4:	e000ed88 	.word	0xe000ed88
    c2f8:	0000df50 	.word	0x0000df50
    c2fc:	10001000 	.word	0x10001000
    c300:	10001000 	.word	0x10001000
    c304:	10001000 	.word	0x10001000
    c308:	10001110 	.word	0x10001110

0000c30c <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c30c:	b480      	push	{r7}
    c30e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c310:	e7fe      	b.n	c310 <NMI_Handler+0x4>

0000c312 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c312:	b480      	push	{r7}
    c314:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c316:	e7fe      	b.n	c316 <DebugMon_Handler+0x4>

0000c318 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c318:	b580      	push	{r7, lr}
    c31a:	b088      	sub	sp, #32
    c31c:	af00      	add	r7, sp, #0
    c31e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c320:	f107 030c 	add.w	r3, r7, #12
    c324:	4618      	mov	r0, r3
    c326:	f001 f80b 	bl	d340 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c32a:	68fb      	ldr	r3, [r7, #12]
    c32c:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c32e:	69fb      	ldr	r3, [r7, #28]
    c330:	4a07      	ldr	r2, [pc, #28]	; (c350 <am_util_delay_ms+0x38>)
    c332:	fba2 2303 	umull	r2, r3, r2, r3
    c336:	099b      	lsrs	r3, r3, #6
    c338:	687a      	ldr	r2, [r7, #4]
    c33a:	fb02 f303 	mul.w	r3, r2, r3
    c33e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c340:	69b8      	ldr	r0, [r7, #24]
    c342:	f001 f81b 	bl	d37c <am_hal_flash_delay>
}
    c346:	bf00      	nop
    c348:	3720      	adds	r7, #32
    c34a:	46bd      	mov	sp, r7
    c34c:	bd80      	pop	{r7, pc}
    c34e:	bf00      	nop
    c350:	057619f1 	.word	0x057619f1

0000c354 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c354:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c356:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c358:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c35a:	f000 f809 	bl	c370 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c35e:	bd01      	pop	{r0, pc}
}
    c360:	bf00      	nop
    c362:	4618      	mov	r0, r3

0000c364 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c364:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c366:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c368:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c36a:	4770      	bx	lr
}
    c36c:	bf00      	nop
    c36e:	4618      	mov	r0, r3

0000c370 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c370:	b580      	push	{r7, lr}
    c372:	b096      	sub	sp, #88	; 0x58
    c374:	af00      	add	r7, sp, #0
    c376:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c378:	f107 030c 	add.w	r3, r7, #12
    c37c:	2200      	movs	r2, #0
    c37e:	601a      	str	r2, [r3, #0]
    c380:	605a      	str	r2, [r3, #4]
    c382:	609a      	str	r2, [r3, #8]
    c384:	60da      	str	r2, [r3, #12]
    c386:	611a      	str	r2, [r3, #16]
    c388:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c38a:	2300      	movs	r3, #0
    c38c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c390:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c392:	4b2e      	ldr	r3, [pc, #184]	; (c44c <am_util_faultisr_collect_data+0xdc>)
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c39a:	b2db      	uxtb	r3, r3
    c39c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3a2:	0a1b      	lsrs	r3, r3, #8
    c3a4:	b2db      	uxtb	r3, r3
    c3a6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3ac:	0c1b      	lsrs	r3, r3, #16
    c3ae:	b29b      	uxth	r3, r3
    c3b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3b4:	4b26      	ldr	r3, [pc, #152]	; (c450 <am_util_faultisr_collect_data+0xe0>)
    c3b6:	681b      	ldr	r3, [r3, #0]
    c3b8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3ba:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c3be:	b2db      	uxtb	r3, r3
    c3c0:	f003 0302 	and.w	r3, r3, #2
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d005      	beq.n	c3d4 <am_util_faultisr_collect_data+0x64>
    c3c8:	6879      	ldr	r1, [r7, #4]
    c3ca:	2006      	movs	r0, #6
    c3cc:	f7ff ffca 	bl	c364 <getStackedReg>
    c3d0:	4603      	mov	r3, r0
    c3d2:	e001      	b.n	c3d8 <am_util_faultisr_collect_data+0x68>
    c3d4:	f04f 33ff 	mov.w	r3, #4294967295
    c3d8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3da:	6879      	ldr	r1, [r7, #4]
    c3dc:	2000      	movs	r0, #0
    c3de:	f7ff ffc1 	bl	c364 <getStackedReg>
    c3e2:	4603      	mov	r3, r0
    c3e4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3e6:	6879      	ldr	r1, [r7, #4]
    c3e8:	2001      	movs	r0, #1
    c3ea:	f7ff ffbb 	bl	c364 <getStackedReg>
    c3ee:	4603      	mov	r3, r0
    c3f0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3f2:	6879      	ldr	r1, [r7, #4]
    c3f4:	2002      	movs	r0, #2
    c3f6:	f7ff ffb5 	bl	c364 <getStackedReg>
    c3fa:	4603      	mov	r3, r0
    c3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3fe:	6879      	ldr	r1, [r7, #4]
    c400:	2003      	movs	r0, #3
    c402:	f7ff ffaf 	bl	c364 <getStackedReg>
    c406:	4603      	mov	r3, r0
    c408:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c40a:	6879      	ldr	r1, [r7, #4]
    c40c:	2004      	movs	r0, #4
    c40e:	f7ff ffa9 	bl	c364 <getStackedReg>
    c412:	4603      	mov	r3, r0
    c414:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c416:	6879      	ldr	r1, [r7, #4]
    c418:	2005      	movs	r0, #5
    c41a:	f7ff ffa3 	bl	c364 <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c422:	6879      	ldr	r1, [r7, #4]
    c424:	2006      	movs	r0, #6
    c426:	f7ff ff9d 	bl	c364 <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c42e:	6879      	ldr	r1, [r7, #4]
    c430:	2007      	movs	r0, #7
    c432:	f7ff ff97 	bl	c364 <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c43a:	f107 030c 	add.w	r3, r7, #12
    c43e:	4619      	mov	r1, r3
    c440:	2002      	movs	r0, #2
    c442:	f001 faa5 	bl	d990 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c446:	2300      	movs	r3, #0
    c448:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c44a:	e7fe      	b.n	c44a <am_util_faultisr_collect_data+0xda>
    c44c:	e000ed28 	.word	0xe000ed28
    c450:	e000ed38 	.word	0xe000ed38

0000c454 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c454:	b480      	push	{r7}
    c456:	b083      	sub	sp, #12
    c458:	af00      	add	r7, sp, #0
    c45a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c45c:	4a04      	ldr	r2, [pc, #16]	; (c470 <am_util_stdio_printf_init+0x1c>)
    c45e:	687b      	ldr	r3, [r7, #4]
    c460:	6013      	str	r3, [r2, #0]
}
    c462:	bf00      	nop
    c464:	370c      	adds	r7, #12
    c466:	46bd      	mov	sp, r7
    c468:	f85d 7b04 	ldr.w	r7, [sp], #4
    c46c:	4770      	bx	lr
    c46e:	bf00      	nop
    c470:	1000110c 	.word	0x1000110c

0000c474 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c474:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c478:	b096      	sub	sp, #88	; 0x58
    c47a:	af00      	add	r7, sp, #0
    c47c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c480:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c484:	0025      	movs	r5, r4
    c486:	2600      	movs	r6, #0
    c488:	ea55 0306 	orrs.w	r3, r5, r6
    c48c:	f000 80a0 	beq.w	c5d0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c490:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c494:	0862      	lsrs	r2, r4, #1
    c496:	ea4f 0133 	mov.w	r1, r3, rrx
    c49a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c49e:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c4a2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c4a6:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c4aa:	eb11 0308 	adds.w	r3, r1, r8
    c4ae:	eb42 0409 	adc.w	r4, r2, r9
    c4b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c4b6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4ba:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c4be:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c4c2:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c4c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4ca:	eb13 030a 	adds.w	r3, r3, sl
    c4ce:	eb44 040b 	adc.w	r4, r4, fp
    c4d2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c4d6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4da:	0a1a      	lsrs	r2, r3, #8
    c4dc:	62ba      	str	r2, [r7, #40]	; 0x28
    c4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4e0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c4e4:	62ba      	str	r2, [r7, #40]	; 0x28
    c4e6:	0a23      	lsrs	r3, r4, #8
    c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c4f2:	18c9      	adds	r1, r1, r3
    c4f4:	eb42 0204 	adc.w	r2, r2, r4
    c4f8:	460b      	mov	r3, r1
    c4fa:	4614      	mov	r4, r2
    c4fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c500:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c504:	0c1a      	lsrs	r2, r3, #16
    c506:	623a      	str	r2, [r7, #32]
    c508:	6a3a      	ldr	r2, [r7, #32]
    c50a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c50e:	623a      	str	r2, [r7, #32]
    c510:	0c23      	lsrs	r3, r4, #16
    c512:	627b      	str	r3, [r7, #36]	; 0x24
    c514:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c518:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c51c:	18c9      	adds	r1, r1, r3
    c51e:	eb42 0204 	adc.w	r2, r2, r4
    c522:	460b      	mov	r3, r1
    c524:	4614      	mov	r4, r2
    c526:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c52a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c52e:	0023      	movs	r3, r4
    c530:	603b      	str	r3, [r7, #0]
    c532:	2300      	movs	r3, #0
    c534:	607b      	str	r3, [r7, #4]
    c536:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c53a:	e897 0006 	ldmia.w	r7, {r1, r2}
    c53e:	18c9      	adds	r1, r1, r3
    c540:	eb42 0204 	adc.w	r2, r2, r4
    c544:	460b      	mov	r3, r1
    c546:	4614      	mov	r4, r2
    c548:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c54c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c550:	08da      	lsrs	r2, r3, #3
    c552:	613a      	str	r2, [r7, #16]
    c554:	693a      	ldr	r2, [r7, #16]
    c556:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c55a:	613a      	str	r2, [r7, #16]
    c55c:	08e3      	lsrs	r3, r4, #3
    c55e:	617b      	str	r3, [r7, #20]
    c560:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c564:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c568:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c56c:	460b      	mov	r3, r1
    c56e:	4614      	mov	r4, r2
    c570:	00a0      	lsls	r0, r4, #2
    c572:	60f8      	str	r0, [r7, #12]
    c574:	68f8      	ldr	r0, [r7, #12]
    c576:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c57a:	60f8      	str	r0, [r7, #12]
    c57c:	009b      	lsls	r3, r3, #2
    c57e:	60bb      	str	r3, [r7, #8]
    c580:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c584:	185b      	adds	r3, r3, r1
    c586:	eb44 0402 	adc.w	r4, r4, r2
    c58a:	18db      	adds	r3, r3, r3
    c58c:	eb44 0404 	adc.w	r4, r4, r4
    c590:	4619      	mov	r1, r3
    c592:	4622      	mov	r2, r4
    c594:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c598:	1a5b      	subs	r3, r3, r1
    c59a:	eb64 0402 	sbc.w	r4, r4, r2
    c59e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c5a2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c5a6:	3306      	adds	r3, #6
    c5a8:	f144 0400 	adc.w	r4, r4, #0
    c5ac:	091a      	lsrs	r2, r3, #4
    c5ae:	61ba      	str	r2, [r7, #24]
    c5b0:	69ba      	ldr	r2, [r7, #24]
    c5b2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c5b6:	61ba      	str	r2, [r7, #24]
    c5b8:	0923      	lsrs	r3, r4, #4
    c5ba:	61fb      	str	r3, [r7, #28]
    c5bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c5c4:	18c9      	adds	r1, r1, r3
    c5c6:	eb42 0204 	adc.w	r2, r2, r4
    c5ca:	460b      	mov	r3, r1
    c5cc:	4614      	mov	r4, r2
    c5ce:	e029      	b.n	c624 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5d2:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c5d6:	085a      	lsrs	r2, r3, #1
    c5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c5da:	089b      	lsrs	r3, r3, #2
    c5dc:	4413      	add	r3, r2
    c5de:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c5e2:	091b      	lsrs	r3, r3, #4
    c5e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c5e6:	4413      	add	r3, r2
    c5e8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c5ec:	0a1b      	lsrs	r3, r3, #8
    c5ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c5f0:	4413      	add	r3, r2
    c5f2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c5f6:	0c1b      	lsrs	r3, r3, #16
    c5f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c5fa:	4413      	add	r3, r2
    c5fc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c600:	08db      	lsrs	r3, r3, #3
    c602:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c606:	4613      	mov	r3, r2
    c608:	009b      	lsls	r3, r3, #2
    c60a:	4413      	add	r3, r2
    c60c:	005b      	lsls	r3, r3, #1
    c60e:	461a      	mov	r2, r3
    c610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c612:	1a9b      	subs	r3, r3, r2
    c614:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c618:	3306      	adds	r3, #6
    c61a:	091a      	lsrs	r2, r3, #4
    c61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c61e:	4413      	add	r3, r2
    c620:	f04f 0400 	mov.w	r4, #0
    }
}
    c624:	4618      	mov	r0, r3
    c626:	4621      	mov	r1, r4
    c628:	3758      	adds	r7, #88	; 0x58
    c62a:	46bd      	mov	sp, r7
    c62c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c630:	4770      	bx	lr

0000c632 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c632:	b590      	push	{r4, r7, lr}
    c634:	b085      	sub	sp, #20
    c636:	af00      	add	r7, sp, #0
    c638:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c63c:	683a      	ldr	r2, [r7, #0]
    c63e:	687b      	ldr	r3, [r7, #4]
    c640:	4313      	orrs	r3, r2
    c642:	2b00      	cmp	r3, #0
    c644:	bf0c      	ite	eq
    c646:	2301      	moveq	r3, #1
    c648:	2300      	movne	r3, #0
    c64a:	b2db      	uxtb	r3, r3
    c64c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c64e:	e008      	b.n	c662 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c650:	e9d7 0100 	ldrd	r0, r1, [r7]
    c654:	f7ff ff0e 	bl	c474 <divu64_10>
    c658:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c65c:	68fb      	ldr	r3, [r7, #12]
    c65e:	3301      	adds	r3, #1
    c660:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c662:	e897 0018 	ldmia.w	r7, {r3, r4}
    c666:	4323      	orrs	r3, r4
    c668:	d1f2      	bne.n	c650 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c66a:	68fb      	ldr	r3, [r7, #12]
}
    c66c:	4618      	mov	r0, r3
    c66e:	3714      	adds	r7, #20
    c670:	46bd      	mov	sp, r7
    c672:	bd90      	pop	{r4, r7, pc}

0000c674 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c674:	b590      	push	{r4, r7, lr}
    c676:	b083      	sub	sp, #12
    c678:	af00      	add	r7, sp, #0
    c67a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c67e:	e897 0018 	ldmia.w	r7, {r3, r4}
    c682:	2b00      	cmp	r3, #0
    c684:	f174 0300 	sbcs.w	r3, r4, #0
    c688:	da06      	bge.n	c698 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c68a:	e897 0018 	ldmia.w	r7, {r3, r4}
    c68e:	425b      	negs	r3, r3
    c690:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c694:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c698:	e897 0018 	ldmia.w	r7, {r3, r4}
    c69c:	4618      	mov	r0, r3
    c69e:	4621      	mov	r1, r4
    c6a0:	f7ff ffc7 	bl	c632 <ndigits_in_u64>
    c6a4:	4603      	mov	r3, r0
}
    c6a6:	4618      	mov	r0, r3
    c6a8:	370c      	adds	r7, #12
    c6aa:	46bd      	mov	sp, r7
    c6ac:	bd90      	pop	{r4, r7, pc}

0000c6ae <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c6ae:	b490      	push	{r4, r7}
    c6b0:	b084      	sub	sp, #16
    c6b2:	af00      	add	r7, sp, #0
    c6b4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c6b8:	6839      	ldr	r1, [r7, #0]
    c6ba:	687a      	ldr	r2, [r7, #4]
    c6bc:	430a      	orrs	r2, r1
    c6be:	2a00      	cmp	r2, #0
    c6c0:	bf0c      	ite	eq
    c6c2:	2201      	moveq	r2, #1
    c6c4:	2200      	movne	r2, #0
    c6c6:	b2d2      	uxtb	r2, r2
    c6c8:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c6ca:	e00a      	b.n	c6e2 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c6cc:	e897 0006 	ldmia.w	r7, {r1, r2}
    c6d0:	090b      	lsrs	r3, r1, #4
    c6d2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c6d6:	0914      	lsrs	r4, r2, #4
    c6d8:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c6dc:	68fa      	ldr	r2, [r7, #12]
    c6de:	3201      	adds	r2, #1
    c6e0:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c6e2:	e897 0006 	ldmia.w	r7, {r1, r2}
    c6e6:	430a      	orrs	r2, r1
    c6e8:	d1f0      	bne.n	c6cc <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c6ea:	68fb      	ldr	r3, [r7, #12]
}
    c6ec:	4618      	mov	r0, r3
    c6ee:	3710      	adds	r7, #16
    c6f0:	46bd      	mov	sp, r7
    c6f2:	bc90      	pop	{r4, r7}
    c6f4:	4770      	bx	lr

0000c6f6 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c6f6:	b480      	push	{r7}
    c6f8:	b087      	sub	sp, #28
    c6fa:	af00      	add	r7, sp, #0
    c6fc:	6078      	str	r0, [r7, #4]
    c6fe:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c700:	2300      	movs	r3, #0
    c702:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c704:	2300      	movs	r3, #0
    c706:	613b      	str	r3, [r7, #16]
    c708:	2300      	movs	r3, #0
    c70a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c70c:	687b      	ldr	r3, [r7, #4]
    c70e:	781b      	ldrb	r3, [r3, #0]
    c710:	2b2d      	cmp	r3, #45	; 0x2d
    c712:	d11b      	bne.n	c74c <decstr_to_int+0x56>
    {
        bNeg = true;
    c714:	2301      	movs	r3, #1
    c716:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	3301      	adds	r3, #1
    c71c:	607b      	str	r3, [r7, #4]
        uCnt++;
    c71e:	68fb      	ldr	r3, [r7, #12]
    c720:	3301      	adds	r3, #1
    c722:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c724:	e012      	b.n	c74c <decstr_to_int+0x56>
    {
        ++uCnt;
    c726:	68fb      	ldr	r3, [r7, #12]
    c728:	3301      	adds	r3, #1
    c72a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c72c:	693a      	ldr	r2, [r7, #16]
    c72e:	4613      	mov	r3, r2
    c730:	009b      	lsls	r3, r3, #2
    c732:	4413      	add	r3, r2
    c734:	005b      	lsls	r3, r3, #1
    c736:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c738:	687b      	ldr	r3, [r7, #4]
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	461a      	mov	r2, r3
    c73e:	693b      	ldr	r3, [r7, #16]
    c740:	4413      	add	r3, r2
    c742:	3b30      	subs	r3, #48	; 0x30
    c744:	613b      	str	r3, [r7, #16]
        pcStr++;
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	3301      	adds	r3, #1
    c74a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	781b      	ldrb	r3, [r3, #0]
    c750:	2b2f      	cmp	r3, #47	; 0x2f
    c752:	d903      	bls.n	c75c <decstr_to_int+0x66>
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	2b39      	cmp	r3, #57	; 0x39
    c75a:	d9e4      	bls.n	c726 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c75c:	683b      	ldr	r3, [r7, #0]
    c75e:	2b00      	cmp	r3, #0
    c760:	d002      	beq.n	c768 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c762:	683b      	ldr	r3, [r7, #0]
    c764:	68fa      	ldr	r2, [r7, #12]
    c766:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c768:	7dfb      	ldrb	r3, [r7, #23]
    c76a:	2b00      	cmp	r3, #0
    c76c:	d002      	beq.n	c774 <decstr_to_int+0x7e>
    c76e:	693b      	ldr	r3, [r7, #16]
    c770:	425b      	negs	r3, r3
    c772:	e000      	b.n	c776 <decstr_to_int+0x80>
    c774:	693b      	ldr	r3, [r7, #16]
}
    c776:	4618      	mov	r0, r3
    c778:	371c      	adds	r7, #28
    c77a:	46bd      	mov	sp, r7
    c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c780:	4770      	bx	lr

0000c782 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c782:	b590      	push	{r4, r7, lr}
    c784:	b091      	sub	sp, #68	; 0x44
    c786:	af00      	add	r7, sp, #0
    c788:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c78c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c78e:	2300      	movs	r3, #0
    c790:	63fb      	str	r3, [r7, #60]	; 0x3c
    c792:	2300      	movs	r3, #0
    c794:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c79a:	f7ff fe6b 	bl	c474 <divu64_10>
    c79e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7a2:	68b9      	ldr	r1, [r7, #8]
    c7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c7a6:	4613      	mov	r3, r2
    c7a8:	009b      	lsls	r3, r3, #2
    c7aa:	4413      	add	r3, r2
    c7ac:	005b      	lsls	r3, r3, #1
    c7ae:	1acb      	subs	r3, r1, r3
    c7b0:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7b4:	1c5a      	adds	r2, r3, #1
    c7b6:	63fa      	str	r2, [r7, #60]	; 0x3c
    c7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c7ba:	b2d2      	uxtb	r2, r2
    c7bc:	3230      	adds	r2, #48	; 0x30
    c7be:	b2d2      	uxtb	r2, r2
    c7c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c7c4:	440b      	add	r3, r1
    c7c6:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c7ca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c7ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c7d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c7d6:	4323      	orrs	r3, r4
    c7d8:	d1dd      	bne.n	c796 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7dc:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c7de:	687b      	ldr	r3, [r7, #4]
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d011      	beq.n	c808 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c7e4:	e008      	b.n	c7f8 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c7e6:	687b      	ldr	r3, [r7, #4]
    c7e8:	1c5a      	adds	r2, r3, #1
    c7ea:	607a      	str	r2, [r7, #4]
    c7ec:	f107 0110 	add.w	r1, r7, #16
    c7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c7f2:	440a      	add	r2, r1
    c7f4:	7812      	ldrb	r2, [r2, #0]
    c7f6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7fa:	1e5a      	subs	r2, r3, #1
    c7fc:	63fa      	str	r2, [r7, #60]	; 0x3c
    c7fe:	2b00      	cmp	r3, #0
    c800:	d1f1      	bne.n	c7e6 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	2200      	movs	r2, #0
    c806:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c80a:	4618      	mov	r0, r3
    c80c:	3744      	adds	r7, #68	; 0x44
    c80e:	46bd      	mov	sp, r7
    c810:	bd90      	pop	{r4, r7, pc}

0000c812 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c812:	b4b0      	push	{r4, r5, r7}
    c814:	b08d      	sub	sp, #52	; 0x34
    c816:	af00      	add	r7, sp, #0
    c818:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c81c:	607a      	str	r2, [r7, #4]
    c81e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c820:	2300      	movs	r3, #0
    c822:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c828:	4313      	orrs	r3, r2
    c82a:	d131      	bne.n	c890 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c82e:	1c5a      	adds	r2, r3, #1
    c830:	62fa      	str	r2, [r7, #44]	; 0x2c
    c832:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c836:	4413      	add	r3, r2
    c838:	2230      	movs	r2, #48	; 0x30
    c83a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c83e:	e027      	b.n	c890 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c840:	7a3b      	ldrb	r3, [r7, #8]
    c842:	f003 030f 	and.w	r3, r3, #15
    c846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c84a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c84e:	2b09      	cmp	r3, #9
    c850:	d90a      	bls.n	c868 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c852:	78fb      	ldrb	r3, [r7, #3]
    c854:	2b00      	cmp	r3, #0
    c856:	d001      	beq.n	c85c <uint64_to_hexstr+0x4a>
    c858:	2227      	movs	r2, #39	; 0x27
    c85a:	e000      	b.n	c85e <uint64_to_hexstr+0x4c>
    c85c:	2207      	movs	r2, #7
    c85e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c862:	4413      	add	r3, r2
    c864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c86a:	1c5a      	adds	r2, r3, #1
    c86c:	62fa      	str	r2, [r7, #44]	; 0x2c
    c86e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c872:	3230      	adds	r2, #48	; 0x30
    c874:	b2d2      	uxtb	r2, r2
    c876:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c87a:	440b      	add	r3, r1
    c87c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c884:	0914      	lsrs	r4, r2, #4
    c886:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c88a:	091d      	lsrs	r5, r3, #4
    c88c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    c890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c894:	4313      	orrs	r3, r2
    c896:	d1d3      	bne.n	c840 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c89a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c89c:	687b      	ldr	r3, [r7, #4]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d011      	beq.n	c8c6 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    c8a2:	e008      	b.n	c8b6 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	1c5a      	adds	r2, r3, #1
    c8a8:	607a      	str	r2, [r7, #4]
    c8aa:	f107 0110 	add.w	r1, r7, #16
    c8ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c8b0:	440a      	add	r2, r1
    c8b2:	7812      	ldrb	r2, [r2, #0]
    c8b4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8b8:	1e5a      	subs	r2, r3, #1
    c8ba:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8bc:	2b00      	cmp	r3, #0
    c8be:	d1f1      	bne.n	c8a4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c8c0:	687b      	ldr	r3, [r7, #4]
    c8c2:	2200      	movs	r2, #0
    c8c4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c8c8:	4618      	mov	r0, r3
    c8ca:	3734      	adds	r7, #52	; 0x34
    c8cc:	46bd      	mov	sp, r7
    c8ce:	bcb0      	pop	{r4, r5, r7}
    c8d0:	4770      	bx	lr

0000c8d2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c8d2:	b480      	push	{r7}
    c8d4:	b085      	sub	sp, #20
    c8d6:	af00      	add	r7, sp, #0
    c8d8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c8da:	2300      	movs	r3, #0
    c8dc:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c8de:	687b      	ldr	r3, [r7, #4]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	d104      	bne.n	c8ee <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c8e4:	68fb      	ldr	r3, [r7, #12]
    c8e6:	e009      	b.n	c8fc <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c8e8:	68fb      	ldr	r3, [r7, #12]
    c8ea:	3301      	adds	r3, #1
    c8ec:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	1c5a      	adds	r2, r3, #1
    c8f2:	607a      	str	r2, [r7, #4]
    c8f4:	781b      	ldrb	r3, [r3, #0]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d1f6      	bne.n	c8e8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c8fa:	68fb      	ldr	r3, [r7, #12]
}
    c8fc:	4618      	mov	r0, r3
    c8fe:	3714      	adds	r7, #20
    c900:	46bd      	mov	sp, r7
    c902:	f85d 7b04 	ldr.w	r7, [sp], #4
    c906:	4770      	bx	lr

0000c908 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c908:	b480      	push	{r7}
    c90a:	b087      	sub	sp, #28
    c90c:	af00      	add	r7, sp, #0
    c90e:	60f8      	str	r0, [r7, #12]
    c910:	460b      	mov	r3, r1
    c912:	607a      	str	r2, [r7, #4]
    c914:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c916:	2300      	movs	r3, #0
    c918:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	2b00      	cmp	r3, #0
    c91e:	dc0c      	bgt.n	c93a <padbuffer+0x32>
    {
        return i32Cnt;
    c920:	697b      	ldr	r3, [r7, #20]
    c922:	e010      	b.n	c946 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c924:	68fb      	ldr	r3, [r7, #12]
    c926:	2b00      	cmp	r3, #0
    c928:	d004      	beq.n	c934 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c92a:	68fb      	ldr	r3, [r7, #12]
    c92c:	1c5a      	adds	r2, r3, #1
    c92e:	60fa      	str	r2, [r7, #12]
    c930:	7afa      	ldrb	r2, [r7, #11]
    c932:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c934:	697b      	ldr	r3, [r7, #20]
    c936:	3301      	adds	r3, #1
    c938:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c93a:	687b      	ldr	r3, [r7, #4]
    c93c:	1e5a      	subs	r2, r3, #1
    c93e:	607a      	str	r2, [r7, #4]
    c940:	2b00      	cmp	r3, #0
    c942:	d1ef      	bne.n	c924 <padbuffer+0x1c>
    }

    return i32Cnt;
    c944:	697b      	ldr	r3, [r7, #20]
}
    c946:	4618      	mov	r0, r3
    c948:	371c      	adds	r7, #28
    c94a:	46bd      	mov	sp, r7
    c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c950:	4770      	bx	lr
	...

0000c954 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c954:	b590      	push	{r4, r7, lr}
    c956:	b08f      	sub	sp, #60	; 0x3c
    c958:	af00      	add	r7, sp, #0
    c95a:	60f8      	str	r0, [r7, #12]
    c95c:	60b9      	str	r1, [r7, #8]
    c95e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c960:	68bb      	ldr	r3, [r7, #8]
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c968:	2b03      	cmp	r3, #3
    c96a:	dc02      	bgt.n	c972 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c96c:	f06f 0302 	mvn.w	r3, #2
    c970:	e0e7      	b.n	cb42 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    c972:	edd7 7a03 	vldr	s15, [r7, #12]
    c976:	eef5 7a40 	vcmp.f32	s15, #0.0
    c97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c97e:	d104      	bne.n	c98a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c980:	68bb      	ldr	r3, [r7, #8]
    c982:	4a72      	ldr	r2, [pc, #456]	; (cb4c <ftoa+0x1f8>)
    c984:	601a      	str	r2, [r3, #0]
        return 3;
    c986:	2303      	movs	r3, #3
    c988:	e0db      	b.n	cb42 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    c98a:	68bb      	ldr	r3, [r7, #8]
    c98c:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c98e:	68fb      	ldr	r3, [r7, #12]
    c990:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c992:	693b      	ldr	r3, [r7, #16]
    c994:	15db      	asrs	r3, r3, #23
    c996:	b2db      	uxtb	r3, r3
    c998:	3b7f      	subs	r3, #127	; 0x7f
    c99a:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c99c:	693b      	ldr	r3, [r7, #16]
    c99e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c9a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9a6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    c9a8:	2300      	movs	r3, #0
    c9aa:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    c9ac:	2300      	movs	r3, #0
    c9ae:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    c9b0:	69fb      	ldr	r3, [r7, #28]
    c9b2:	2b1e      	cmp	r3, #30
    c9b4:	dd02      	ble.n	c9bc <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9b6:	f06f 0301 	mvn.w	r3, #1
    c9ba:	e0c2      	b.n	cb42 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    c9bc:	69fb      	ldr	r3, [r7, #28]
    c9be:	f113 0f17 	cmn.w	r3, #23
    c9c2:	da02      	bge.n	c9ca <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c9c4:	f04f 33ff 	mov.w	r3, #4294967295
    c9c8:	e0bb      	b.n	cb42 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    c9ca:	69fb      	ldr	r3, [r7, #28]
    c9cc:	2b16      	cmp	r3, #22
    c9ce:	dd06      	ble.n	c9de <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c9d0:	69fb      	ldr	r3, [r7, #28]
    c9d2:	3b17      	subs	r3, #23
    c9d4:	69ba      	ldr	r2, [r7, #24]
    c9d6:	fa02 f303 	lsl.w	r3, r2, r3
    c9da:	637b      	str	r3, [r7, #52]	; 0x34
    c9dc:	e01a      	b.n	ca14 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c9de:	69fb      	ldr	r3, [r7, #28]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	db0f      	blt.n	ca04 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c9e4:	69fb      	ldr	r3, [r7, #28]
    c9e6:	f1c3 0317 	rsb	r3, r3, #23
    c9ea:	69ba      	ldr	r2, [r7, #24]
    c9ec:	fa42 f303 	asr.w	r3, r2, r3
    c9f0:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c9f2:	69fb      	ldr	r3, [r7, #28]
    c9f4:	3301      	adds	r3, #1
    c9f6:	69ba      	ldr	r2, [r7, #24]
    c9f8:	fa02 f303 	lsl.w	r3, r2, r3
    c9fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca00:	633b      	str	r3, [r7, #48]	; 0x30
    ca02:	e007      	b.n	ca14 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca04:	69bb      	ldr	r3, [r7, #24]
    ca06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca0a:	69fb      	ldr	r3, [r7, #28]
    ca0c:	43db      	mvns	r3, r3
    ca0e:	fa42 f303 	asr.w	r3, r2, r3
    ca12:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca14:	693b      	ldr	r3, [r7, #16]
    ca16:	2b00      	cmp	r3, #0
    ca18:	da04      	bge.n	ca24 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ca1a:	68bb      	ldr	r3, [r7, #8]
    ca1c:	1c5a      	adds	r2, r3, #1
    ca1e:	60ba      	str	r2, [r7, #8]
    ca20:	222d      	movs	r2, #45	; 0x2d
    ca22:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca26:	2b00      	cmp	r3, #0
    ca28:	d105      	bne.n	ca36 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ca2a:	68bb      	ldr	r3, [r7, #8]
    ca2c:	1c5a      	adds	r2, r3, #1
    ca2e:	60ba      	str	r2, [r7, #8]
    ca30:	2230      	movs	r2, #48	; 0x30
    ca32:	701a      	strb	r2, [r3, #0]
    ca34:	e021      	b.n	ca7a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    ca36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca38:	2b00      	cmp	r3, #0
    ca3a:	dd08      	ble.n	ca4e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca42:	68ba      	ldr	r2, [r7, #8]
    ca44:	4618      	mov	r0, r3
    ca46:	4621      	mov	r1, r4
    ca48:	f7ff fe9b 	bl	c782 <uint64_to_str>
    ca4c:	e011      	b.n	ca72 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    ca4e:	68bb      	ldr	r3, [r7, #8]
    ca50:	1c5a      	adds	r2, r3, #1
    ca52:	60ba      	str	r2, [r7, #8]
    ca54:	222d      	movs	r2, #45	; 0x2d
    ca56:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca5a:	425b      	negs	r3, r3
    ca5c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca60:	68ba      	ldr	r2, [r7, #8]
    ca62:	4618      	mov	r0, r3
    ca64:	4621      	mov	r1, r4
    ca66:	f7ff fe8c 	bl	c782 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca6a:	e002      	b.n	ca72 <ftoa+0x11e>
        {
            pcBuf++;
    ca6c:	68bb      	ldr	r3, [r7, #8]
    ca6e:	3301      	adds	r3, #1
    ca70:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ca72:	68bb      	ldr	r3, [r7, #8]
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d1f8      	bne.n	ca6c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca7a:	68bb      	ldr	r3, [r7, #8]
    ca7c:	1c5a      	adds	r2, r3, #1
    ca7e:	60ba      	str	r2, [r7, #8]
    ca80:	222e      	movs	r2, #46	; 0x2e
    ca82:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca86:	2b00      	cmp	r3, #0
    ca88:	d105      	bne.n	ca96 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    ca8a:	68bb      	ldr	r3, [r7, #8]
    ca8c:	1c5a      	adds	r2, r3, #1
    ca8e:	60ba      	str	r2, [r7, #8]
    ca90:	2230      	movs	r2, #48	; 0x30
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	e04f      	b.n	cb36 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ca96:	68ba      	ldr	r2, [r7, #8]
    ca98:	6a3b      	ldr	r3, [r7, #32]
    ca9a:	1ad3      	subs	r3, r2, r3
    ca9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ca9e:	1ad3      	subs	r3, r2, r3
    caa0:	3b01      	subs	r3, #1
    caa2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    caa4:	697a      	ldr	r2, [r7, #20]
    caa6:	687b      	ldr	r3, [r7, #4]
    caa8:	4293      	cmp	r3, r2
    caaa:	bfa8      	it	ge
    caac:	4613      	movge	r3, r2
    caae:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cab0:	2300      	movs	r3, #0
    cab2:	62bb      	str	r3, [r7, #40]	; 0x28
    cab4:	e015      	b.n	cae2 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cab8:	4613      	mov	r3, r2
    caba:	009b      	lsls	r3, r3, #2
    cabc:	4413      	add	r3, r2
    cabe:	005b      	lsls	r3, r3, #1
    cac0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cac2:	68bb      	ldr	r3, [r7, #8]
    cac4:	1c5a      	adds	r2, r3, #1
    cac6:	60ba      	str	r2, [r7, #8]
    cac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    caca:	1612      	asrs	r2, r2, #24
    cacc:	b2d2      	uxtb	r2, r2
    cace:	3230      	adds	r2, #48	; 0x30
    cad0:	b2d2      	uxtb	r2, r2
    cad2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cad6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cada:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cade:	3301      	adds	r3, #1
    cae0:	62bb      	str	r3, [r7, #40]	; 0x28
    cae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cae4:	697b      	ldr	r3, [r7, #20]
    cae6:	429a      	cmp	r2, r3
    cae8:	dbe5      	blt.n	cab6 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    caea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    caec:	4613      	mov	r3, r2
    caee:	009b      	lsls	r3, r3, #2
    caf0:	4413      	add	r3, r2
    caf2:	005b      	lsls	r3, r3, #1
    caf4:	161b      	asrs	r3, r3, #24
    caf6:	2b04      	cmp	r3, #4
    caf8:	dd1d      	ble.n	cb36 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cafa:	68bb      	ldr	r3, [r7, #8]
    cafc:	3b01      	subs	r3, #1
    cafe:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb00:	e015      	b.n	cb2e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb04:	781b      	ldrb	r3, [r3, #0]
    cb06:	2b2e      	cmp	r3, #46	; 0x2e
    cb08:	d00e      	beq.n	cb28 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	2b39      	cmp	r3, #57	; 0x39
    cb10:	d103      	bne.n	cb1a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb14:	2230      	movs	r2, #48	; 0x30
    cb16:	701a      	strb	r2, [r3, #0]
    cb18:	e006      	b.n	cb28 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb1c:	781b      	ldrb	r3, [r3, #0]
    cb1e:	3301      	adds	r3, #1
    cb20:	b2da      	uxtb	r2, r3
    cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb24:	701a      	strb	r2, [r3, #0]
                    break;
    cb26:	e006      	b.n	cb36 <ftoa+0x1e2>
                }
                pcBuftmp--;
    cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb2a:	3b01      	subs	r3, #1
    cb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb30:	6a3b      	ldr	r3, [r7, #32]
    cb32:	429a      	cmp	r2, r3
    cb34:	d2e5      	bcs.n	cb02 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb36:	68bb      	ldr	r3, [r7, #8]
    cb38:	2200      	movs	r2, #0
    cb3a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb3c:	68ba      	ldr	r2, [r7, #8]
    cb3e:	6a3b      	ldr	r3, [r7, #32]
    cb40:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb42:	4618      	mov	r0, r3
    cb44:	373c      	adds	r7, #60	; 0x3c
    cb46:	46bd      	mov	sp, r7
    cb48:	bd90      	pop	{r4, r7, pc}
    cb4a:	bf00      	nop
    cb4c:	00302e30 	.word	0x00302e30

0000cb50 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb50:	b590      	push	{r4, r7, lr}
    cb52:	b095      	sub	sp, #84	; 0x54
    cb54:	af00      	add	r7, sp, #0
    cb56:	60f8      	str	r0, [r7, #12]
    cb58:	60b9      	str	r1, [r7, #8]
    cb5a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb5c:	2300      	movs	r3, #0
    cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb60:	2300      	movs	r3, #0
    cb62:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cb64:	e2e3      	b.n	d12e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb66:	2306      	movs	r3, #6
    cb68:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cb6a:	68bb      	ldr	r3, [r7, #8]
    cb6c:	781b      	ldrb	r3, [r3, #0]
    cb6e:	2b25      	cmp	r3, #37	; 0x25
    cb70:	d01f      	beq.n	cbb2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb72:	68fb      	ldr	r3, [r7, #12]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d015      	beq.n	cba4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb78:	68bb      	ldr	r3, [r7, #8]
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	2b0a      	cmp	r3, #10
    cb7e:	d10b      	bne.n	cb98 <am_util_stdio_vsprintf+0x48>
    cb80:	4bb1      	ldr	r3, [pc, #708]	; (ce48 <am_util_stdio_vsprintf+0x2f8>)
    cb82:	781b      	ldrb	r3, [r3, #0]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d007      	beq.n	cb98 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cb88:	68fb      	ldr	r3, [r7, #12]
    cb8a:	1c5a      	adds	r2, r3, #1
    cb8c:	60fa      	str	r2, [r7, #12]
    cb8e:	220d      	movs	r2, #13
    cb90:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb94:	3301      	adds	r3, #1
    cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cb98:	68fb      	ldr	r3, [r7, #12]
    cb9a:	1c5a      	adds	r2, r3, #1
    cb9c:	60fa      	str	r2, [r7, #12]
    cb9e:	68ba      	ldr	r2, [r7, #8]
    cba0:	7812      	ldrb	r2, [r2, #0]
    cba2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cba4:	68bb      	ldr	r3, [r7, #8]
    cba6:	3301      	adds	r3, #1
    cba8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbac:	3301      	adds	r3, #1
    cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cbb0:	e2bd      	b.n	d12e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbb2:	68bb      	ldr	r3, [r7, #8]
    cbb4:	3301      	adds	r3, #1
    cbb6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cbb8:	2300      	movs	r3, #0
    cbba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cbbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cbc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cbc6:	2320      	movs	r3, #32
    cbc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cbcc:	68bb      	ldr	r3, [r7, #8]
    cbce:	781b      	ldrb	r3, [r3, #0]
    cbd0:	2b30      	cmp	r3, #48	; 0x30
    cbd2:	d105      	bne.n	cbe0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cbd4:	2330      	movs	r3, #48	; 0x30
    cbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cbda:	68bb      	ldr	r3, [r7, #8]
    cbdc:	3301      	adds	r3, #1
    cbde:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cbe0:	f107 0310 	add.w	r3, r7, #16
    cbe4:	4619      	mov	r1, r3
    cbe6:	68b8      	ldr	r0, [r7, #8]
    cbe8:	f7ff fd85 	bl	c6f6 <decstr_to_int>
    cbec:	4603      	mov	r3, r0
    cbee:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cbf0:	693b      	ldr	r3, [r7, #16]
    cbf2:	68ba      	ldr	r2, [r7, #8]
    cbf4:	4413      	add	r3, r2
    cbf6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cbf8:	68bb      	ldr	r3, [r7, #8]
    cbfa:	781b      	ldrb	r3, [r3, #0]
    cbfc:	2b73      	cmp	r3, #115	; 0x73
    cbfe:	d005      	beq.n	cc0c <am_util_stdio_vsprintf+0xbc>
    cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc02:	2b00      	cmp	r3, #0
    cc04:	da02      	bge.n	cc0c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc08:	425b      	negs	r3, r3
    cc0a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc0c:	68bb      	ldr	r3, [r7, #8]
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	2b2e      	cmp	r3, #46	; 0x2e
    cc12:	d10e      	bne.n	cc32 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cc14:	68bb      	ldr	r3, [r7, #8]
    cc16:	3301      	adds	r3, #1
    cc18:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc1a:	f107 0310 	add.w	r3, r7, #16
    cc1e:	4619      	mov	r1, r3
    cc20:	68b8      	ldr	r0, [r7, #8]
    cc22:	f7ff fd68 	bl	c6f6 <decstr_to_int>
    cc26:	4603      	mov	r3, r0
    cc28:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cc2a:	693b      	ldr	r3, [r7, #16]
    cc2c:	68ba      	ldr	r2, [r7, #8]
    cc2e:	4413      	add	r3, r2
    cc30:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc32:	68bb      	ldr	r3, [r7, #8]
    cc34:	781b      	ldrb	r3, [r3, #0]
    cc36:	2b6c      	cmp	r3, #108	; 0x6c
    cc38:	d10c      	bne.n	cc54 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cc3a:	68bb      	ldr	r3, [r7, #8]
    cc3c:	3301      	adds	r3, #1
    cc3e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc40:	68bb      	ldr	r3, [r7, #8]
    cc42:	781b      	ldrb	r3, [r3, #0]
    cc44:	2b6c      	cmp	r3, #108	; 0x6c
    cc46:	d105      	bne.n	cc54 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cc48:	68bb      	ldr	r3, [r7, #8]
    cc4a:	3301      	adds	r3, #1
    cc4c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cc4e:	2301      	movs	r3, #1
    cc50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cc54:	68bb      	ldr	r3, [r7, #8]
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	3b46      	subs	r3, #70	; 0x46
    cc5a:	2b32      	cmp	r3, #50	; 0x32
    cc5c:	f200 8254 	bhi.w	d108 <am_util_stdio_vsprintf+0x5b8>
    cc60:	a201      	add	r2, pc, #4	; (adr r2, cc68 <am_util_stdio_vsprintf+0x118>)
    cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc66:	bf00      	nop
    cc68:	0000d093 	.word	0x0000d093
    cc6c:	0000d109 	.word	0x0000d109
    cc70:	0000d109 	.word	0x0000d109
    cc74:	0000d109 	.word	0x0000d109
    cc78:	0000d109 	.word	0x0000d109
    cc7c:	0000d109 	.word	0x0000d109
    cc80:	0000d109 	.word	0x0000d109
    cc84:	0000d109 	.word	0x0000d109
    cc88:	0000d109 	.word	0x0000d109
    cc8c:	0000d109 	.word	0x0000d109
    cc90:	0000d109 	.word	0x0000d109
    cc94:	0000d109 	.word	0x0000d109
    cc98:	0000d109 	.word	0x0000d109
    cc9c:	0000d109 	.word	0x0000d109
    cca0:	0000d109 	.word	0x0000d109
    cca4:	0000d109 	.word	0x0000d109
    cca8:	0000d109 	.word	0x0000d109
    ccac:	0000d109 	.word	0x0000d109
    ccb0:	0000ce2f 	.word	0x0000ce2f
    ccb4:	0000d109 	.word	0x0000d109
    ccb8:	0000d109 	.word	0x0000d109
    ccbc:	0000d109 	.word	0x0000d109
    ccc0:	0000d109 	.word	0x0000d109
    ccc4:	0000d109 	.word	0x0000d109
    ccc8:	0000d109 	.word	0x0000d109
    cccc:	0000d109 	.word	0x0000d109
    ccd0:	0000d109 	.word	0x0000d109
    ccd4:	0000d109 	.word	0x0000d109
    ccd8:	0000d109 	.word	0x0000d109
    ccdc:	0000cd35 	.word	0x0000cd35
    cce0:	0000cf5b 	.word	0x0000cf5b
    cce4:	0000d109 	.word	0x0000d109
    cce8:	0000d093 	.word	0x0000d093
    ccec:	0000d109 	.word	0x0000d109
    ccf0:	0000d109 	.word	0x0000d109
    ccf4:	0000cf5b 	.word	0x0000cf5b
    ccf8:	0000d109 	.word	0x0000d109
    ccfc:	0000d109 	.word	0x0000d109
    cd00:	0000d109 	.word	0x0000d109
    cd04:	0000d109 	.word	0x0000d109
    cd08:	0000d109 	.word	0x0000d109
    cd0c:	0000d109 	.word	0x0000d109
    cd10:	0000d109 	.word	0x0000d109
    cd14:	0000d109 	.word	0x0000d109
    cd18:	0000d109 	.word	0x0000d109
    cd1c:	0000cd5b 	.word	0x0000cd5b
    cd20:	0000d109 	.word	0x0000d109
    cd24:	0000cec9 	.word	0x0000cec9
    cd28:	0000d109 	.word	0x0000d109
    cd2c:	0000d109 	.word	0x0000d109
    cd30:	0000ce29 	.word	0x0000ce29
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd34:	687b      	ldr	r3, [r7, #4]
    cd36:	1d1a      	adds	r2, r3, #4
    cd38:	607a      	str	r2, [r7, #4]
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cd40:	68fb      	ldr	r3, [r7, #12]
    cd42:	2b00      	cmp	r3, #0
    cd44:	d005      	beq.n	cd52 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd46:	68fb      	ldr	r3, [r7, #12]
    cd48:	1c5a      	adds	r2, r3, #1
    cd4a:	60fa      	str	r2, [r7, #12]
    cd4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cd50:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd54:	3301      	adds	r3, #1
    cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cd58:	e1e6      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd5a:	687b      	ldr	r3, [r7, #4]
    cd5c:	1d1a      	adds	r2, r3, #4
    cd5e:	607a      	str	r2, [r7, #4]
    cd60:	681b      	ldr	r3, [r3, #0]
    cd62:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cd66:	f7ff fdb4 	bl	c8d2 <simple_strlen>
    cd6a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd6e:	2b00      	cmp	r3, #0
    cd70:	dd2e      	ble.n	cdd0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd76:	429a      	cmp	r2, r3
    cd78:	d22a      	bcs.n	cdd0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd7e:	1ad3      	subs	r3, r2, r3
    cd80:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cd86:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd88:	4619      	mov	r1, r3
    cd8a:	68f8      	ldr	r0, [r7, #12]
    cd8c:	f7ff fdbc 	bl	c908 <padbuffer>
    cd90:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cd92:	68fb      	ldr	r3, [r7, #12]
    cd94:	2b00      	cmp	r3, #0
    cd96:	d001      	beq.n	cd9c <am_util_stdio_vsprintf+0x24c>
    cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd9a:	e000      	b.n	cd9e <am_util_stdio_vsprintf+0x24e>
    cd9c:	2300      	movs	r3, #0
    cd9e:	68fa      	ldr	r2, [r7, #12]
    cda0:	4413      	add	r3, r2
    cda2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cda6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cda8:	4413      	add	r3, r2
    cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cdac:	2300      	movs	r3, #0
    cdae:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cdb0:	e00e      	b.n	cdd0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cdb2:	68fb      	ldr	r3, [r7, #12]
    cdb4:	2b00      	cmp	r3, #0
    cdb6:	d005      	beq.n	cdc4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cdb8:	68fb      	ldr	r3, [r7, #12]
    cdba:	1c5a      	adds	r2, r3, #1
    cdbc:	60fa      	str	r2, [r7, #12]
    cdbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cdc0:	7812      	ldrb	r2, [r2, #0]
    cdc2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdc6:	3301      	adds	r3, #1
    cdc8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdcc:	3301      	adds	r3, #1
    cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cdd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdd2:	781b      	ldrb	r3, [r3, #0]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d1ec      	bne.n	cdb2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdda:	2b00      	cmp	r3, #0
    cddc:	f000 81a1 	beq.w	d122 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cde2:	425b      	negs	r3, r3
    cde4:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cdea:	429a      	cmp	r2, r3
    cdec:	f080 8199 	bcs.w	d122 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cdf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cdf4:	1ad3      	subs	r3, r2, r3
    cdf6:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cdfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cdfe:	4619      	mov	r1, r3
    ce00:	68f8      	ldr	r0, [r7, #12]
    ce02:	f7ff fd81 	bl	c908 <padbuffer>
    ce06:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ce08:	68fb      	ldr	r3, [r7, #12]
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d001      	beq.n	ce12 <am_util_stdio_vsprintf+0x2c2>
    ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce10:	e000      	b.n	ce14 <am_util_stdio_vsprintf+0x2c4>
    ce12:	2300      	movs	r3, #0
    ce14:	68fa      	ldr	r2, [r7, #12]
    ce16:	4413      	add	r3, r2
    ce18:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce1e:	4413      	add	r3, r2
    ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce22:	2300      	movs	r3, #0
    ce24:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    ce26:	e17c      	b.n	d122 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    ce28:	2301      	movs	r3, #1
    ce2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce32:	2b00      	cmp	r3, #0
    ce34:	d00a      	beq.n	ce4c <am_util_stdio_vsprintf+0x2fc>
    ce36:	687b      	ldr	r3, [r7, #4]
    ce38:	3307      	adds	r3, #7
    ce3a:	f023 0307 	bic.w	r3, r3, #7
    ce3e:	f103 0208 	add.w	r2, r3, #8
    ce42:	607a      	str	r2, [r7, #4]
    ce44:	cb18      	ldmia	r3, {r3, r4}
    ce46:	e007      	b.n	ce58 <am_util_stdio_vsprintf+0x308>
    ce48:	10001104 	.word	0x10001104
                                      va_arg(pArgs, uint32_t);
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	1d1a      	adds	r2, r3, #4
    ce50:	607a      	str	r2, [r7, #4]
    ce52:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce54:	f04f 0400 	mov.w	r4, #0
    ce58:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d01e      	beq.n	cea0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ce66:	f7ff fc22 	bl	c6ae <ndigits_in_hex>
    ce6a:	4602      	mov	r2, r0
    ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce6e:	1a9b      	subs	r3, r3, r2
    ce70:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce76:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce78:	4619      	mov	r1, r3
    ce7a:	68f8      	ldr	r0, [r7, #12]
    ce7c:	f7ff fd44 	bl	c908 <padbuffer>
    ce80:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    ce82:	68fb      	ldr	r3, [r7, #12]
    ce84:	2b00      	cmp	r3, #0
    ce86:	d001      	beq.n	ce8c <am_util_stdio_vsprintf+0x33c>
    ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce8a:	e000      	b.n	ce8e <am_util_stdio_vsprintf+0x33e>
    ce8c:	2300      	movs	r3, #0
    ce8e:	68fa      	ldr	r2, [r7, #12]
    ce90:	4413      	add	r3, r2
    ce92:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce98:	4413      	add	r3, r2
    ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    ce9c:	2300      	movs	r3, #0
    ce9e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cea0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cea4:	68fa      	ldr	r2, [r7, #12]
    cea6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ceaa:	f7ff fcb2 	bl	c812 <uint64_to_hexstr>
    ceae:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    ceb0:	68fb      	ldr	r3, [r7, #12]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d003      	beq.n	cebe <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ceb8:	68fa      	ldr	r2, [r7, #12]
    ceba:	4413      	add	r3, r2
    cebc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cec2:	4413      	add	r3, r2
    cec4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cec6:	e12f      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cec8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cecc:	2b00      	cmp	r3, #0
    cece:	d008      	beq.n	cee2 <am_util_stdio_vsprintf+0x392>
    ced0:	687b      	ldr	r3, [r7, #4]
    ced2:	3307      	adds	r3, #7
    ced4:	f023 0307 	bic.w	r3, r3, #7
    ced8:	f103 0208 	add.w	r2, r3, #8
    cedc:	607a      	str	r2, [r7, #4]
    cede:	cb18      	ldmia	r3, {r3, r4}
    cee0:	e005      	b.n	ceee <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    cee2:	687b      	ldr	r3, [r7, #4]
    cee4:	1d1a      	adds	r2, r3, #4
    cee6:	607a      	str	r2, [r7, #4]
    cee8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ceea:	f04f 0400 	mov.w	r4, #0
    ceee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cef4:	2b00      	cmp	r3, #0
    cef6:	d01e      	beq.n	cf36 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cef8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cefc:	f7ff fb99 	bl	c632 <ndigits_in_u64>
    cf00:	4602      	mov	r2, r0
    cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf04:	1a9b      	subs	r3, r3, r2
    cf06:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf0e:	4619      	mov	r1, r3
    cf10:	68f8      	ldr	r0, [r7, #12]
    cf12:	f7ff fcf9 	bl	c908 <padbuffer>
    cf16:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf18:	68fb      	ldr	r3, [r7, #12]
    cf1a:	2b00      	cmp	r3, #0
    cf1c:	d001      	beq.n	cf22 <am_util_stdio_vsprintf+0x3d2>
    cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf20:	e000      	b.n	cf24 <am_util_stdio_vsprintf+0x3d4>
    cf22:	2300      	movs	r3, #0
    cf24:	68fa      	ldr	r2, [r7, #12]
    cf26:	4413      	add	r3, r2
    cf28:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf2e:	4413      	add	r3, r2
    cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf32:	2300      	movs	r3, #0
    cf34:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf36:	68fa      	ldr	r2, [r7, #12]
    cf38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf3c:	f7ff fc21 	bl	c782 <uint64_to_str>
    cf40:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf42:	68fb      	ldr	r3, [r7, #12]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d003      	beq.n	cf50 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    cf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf4a:	68fa      	ldr	r2, [r7, #12]
    cf4c:	4413      	add	r3, r2
    cf4e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf54:	4413      	add	r3, r2
    cf56:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf58:	e0e6      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d008      	beq.n	cf74 <am_util_stdio_vsprintf+0x424>
    cf62:	687b      	ldr	r3, [r7, #4]
    cf64:	3307      	adds	r3, #7
    cf66:	f023 0307 	bic.w	r3, r3, #7
    cf6a:	f103 0208 	add.w	r2, r3, #8
    cf6e:	607a      	str	r2, [r7, #4]
    cf70:	cb18      	ldmia	r3, {r3, r4}
    cf72:	e005      	b.n	cf80 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	1d1a      	adds	r2, r3, #4
    cf78:	607a      	str	r2, [r7, #4]
    cf7a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf7c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cf80:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf84:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cf88:	2b00      	cmp	r3, #0
    cf8a:	f174 0300 	sbcs.w	r3, r4, #0
    cf8e:	da0a      	bge.n	cfa6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cf90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cf94:	425b      	negs	r3, r3
    cf96:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cf9a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    cf9e:	2301      	movs	r3, #1
    cfa0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    cfa4:	e006      	b.n	cfb4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    cfa6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfaa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    cfae:	2300      	movs	r3, #0
    cfb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d04a      	beq.n	d050 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cfba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    cfbe:	4618      	mov	r0, r3
    cfc0:	4621      	mov	r1, r4
    cfc2:	f7ff fb57 	bl	c674 <ndigits_in_i64>
    cfc6:	4602      	mov	r2, r0
    cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfca:	1a9b      	subs	r3, r3, r2
    cfcc:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    cfce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d011      	beq.n	cffa <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfd8:	3b01      	subs	r3, #1
    cfda:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cfdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfe0:	2b30      	cmp	r3, #48	; 0x30
    cfe2:	d10a      	bne.n	cffa <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cfe4:	68fb      	ldr	r3, [r7, #12]
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d004      	beq.n	cff4 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    cfea:	68fb      	ldr	r3, [r7, #12]
    cfec:	1c5a      	adds	r2, r3, #1
    cfee:	60fa      	str	r2, [r7, #12]
    cff0:	222d      	movs	r2, #45	; 0x2d
    cff2:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cff6:	3301      	adds	r3, #1
    cff8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d000:	4619      	mov	r1, r3
    d002:	68f8      	ldr	r0, [r7, #12]
    d004:	f7ff fc80 	bl	c908 <padbuffer>
    d008:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d00a:	68fb      	ldr	r3, [r7, #12]
    d00c:	2b00      	cmp	r3, #0
    d00e:	d001      	beq.n	d014 <am_util_stdio_vsprintf+0x4c4>
    d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d012:	e000      	b.n	d016 <am_util_stdio_vsprintf+0x4c6>
    d014:	2300      	movs	r3, #0
    d016:	68fa      	ldr	r2, [r7, #12]
    d018:	4413      	add	r3, r2
    d01a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d01e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d020:	4413      	add	r3, r2
    d022:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d024:	2300      	movs	r3, #0
    d026:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d02c:	2b00      	cmp	r3, #0
    d02e:	d01e      	beq.n	d06e <am_util_stdio_vsprintf+0x51e>
    d030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d034:	2b20      	cmp	r3, #32
    d036:	d11a      	bne.n	d06e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d038:	68fb      	ldr	r3, [r7, #12]
    d03a:	2b00      	cmp	r3, #0
    d03c:	d004      	beq.n	d048 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d03e:	68fb      	ldr	r3, [r7, #12]
    d040:	1c5a      	adds	r2, r3, #1
    d042:	60fa      	str	r2, [r7, #12]
    d044:	222d      	movs	r2, #45	; 0x2d
    d046:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d04a:	3301      	adds	r3, #1
    d04c:	63fb      	str	r3, [r7, #60]	; 0x3c
    d04e:	e00e      	b.n	d06e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d050:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d054:	2b00      	cmp	r3, #0
    d056:	d00a      	beq.n	d06e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d058:	68fb      	ldr	r3, [r7, #12]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d004      	beq.n	d068 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d05e:	68fb      	ldr	r3, [r7, #12]
    d060:	1c5a      	adds	r2, r3, #1
    d062:	60fa      	str	r2, [r7, #12]
    d064:	222d      	movs	r2, #45	; 0x2d
    d066:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d06a:	3301      	adds	r3, #1
    d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d06e:	68fa      	ldr	r2, [r7, #12]
    d070:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d074:	f7ff fb85 	bl	c782 <uint64_to_str>
    d078:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d07a:	68fb      	ldr	r3, [r7, #12]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d003      	beq.n	d088 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d082:	68fa      	ldr	r2, [r7, #12]
    d084:	4413      	add	r3, r2
    d086:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d08a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d08c:	4413      	add	r3, r2
    d08e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d090:	e04a      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d092:	68fb      	ldr	r3, [r7, #12]
    d094:	2b00      	cmp	r3, #0
    d096:	d046      	beq.n	d126 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	3307      	adds	r3, #7
    d09c:	f023 0307 	bic.w	r3, r3, #7
    d0a0:	f103 0208 	add.w	r2, r3, #8
    d0a4:	607a      	str	r2, [r7, #4]
    d0a6:	cb18      	ldmia	r3, {r3, r4}
    d0a8:	4618      	mov	r0, r3
    d0aa:	4621      	mov	r1, r4
    d0ac:	f7ff f828 	bl	c100 <__aeabi_d2f>
    d0b0:	4603      	mov	r3, r0
    d0b2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0b4:	68fb      	ldr	r3, [r7, #12]
    d0b6:	2214      	movs	r2, #20
    d0b8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d0bc:	68f9      	ldr	r1, [r7, #12]
    d0be:	6978      	ldr	r0, [r7, #20]
    d0c0:	f7ff fc48 	bl	c954 <ftoa>
    d0c4:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	da14      	bge.n	d0f6 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    d0d2:	d102      	bne.n	d0da <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d0d4:	4b1e      	ldr	r3, [pc, #120]	; (d150 <am_util_stdio_vsprintf+0x600>)
    d0d6:	62bb      	str	r3, [r7, #40]	; 0x28
    d0d8:	e008      	b.n	d0ec <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0dc:	f113 0f02 	cmn.w	r3, #2
    d0e0:	d102      	bne.n	d0e8 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d0e2:	4b1c      	ldr	r3, [pc, #112]	; (d154 <am_util_stdio_vsprintf+0x604>)
    d0e4:	62bb      	str	r3, [r7, #40]	; 0x28
    d0e6:	e001      	b.n	d0ec <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d0e8:	4b1b      	ldr	r3, [pc, #108]	; (d158 <am_util_stdio_vsprintf+0x608>)
    d0ea:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d0ec:	68fb      	ldr	r3, [r7, #12]
    d0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d0f0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d0f2:	2303      	movs	r3, #3
    d0f4:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0fa:	4413      	add	r3, r2
    d0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d100:	68fa      	ldr	r2, [r7, #12]
    d102:	4413      	add	r3, r2
    d104:	60fb      	str	r3, [r7, #12]
                }
                break;
    d106:	e00e      	b.n	d126 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d108:	68fb      	ldr	r3, [r7, #12]
    d10a:	2b00      	cmp	r3, #0
    d10c:	d005      	beq.n	d11a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d10e:	68fb      	ldr	r3, [r7, #12]
    d110:	1c5a      	adds	r2, r3, #1
    d112:	60fa      	str	r2, [r7, #12]
    d114:	68ba      	ldr	r2, [r7, #8]
    d116:	7812      	ldrb	r2, [r2, #0]
    d118:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d11c:	3301      	adds	r3, #1
    d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d120:	e002      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>
                break;
    d122:	bf00      	nop
    d124:	e000      	b.n	d128 <am_util_stdio_vsprintf+0x5d8>
                break;
    d126:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d128:	68bb      	ldr	r3, [r7, #8]
    d12a:	3301      	adds	r3, #1
    d12c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d12e:	68bb      	ldr	r3, [r7, #8]
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	2b00      	cmp	r3, #0
    d134:	f47f ad17 	bne.w	cb66 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d138:	68fb      	ldr	r3, [r7, #12]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d002      	beq.n	d144 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d13e:	68fb      	ldr	r3, [r7, #12]
    d140:	2200      	movs	r2, #0
    d142:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d146:	4618      	mov	r0, r3
    d148:	3754      	adds	r7, #84	; 0x54
    d14a:	46bd      	mov	sp, r7
    d14c:	bd90      	pop	{r4, r7, pc}
    d14e:	bf00      	nop
    d150:	00302e30 	.word	0x00302e30
    d154:	00232e23 	.word	0x00232e23
    d158:	003f2e3f 	.word	0x003f2e3f

0000d15c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d15c:	b40f      	push	{r0, r1, r2, r3}
    d15e:	b580      	push	{r7, lr}
    d160:	b082      	sub	sp, #8
    d162:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d164:	f107 0314 	add.w	r3, r7, #20
    d168:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d16a:	683a      	ldr	r2, [r7, #0]
    d16c:	6939      	ldr	r1, [r7, #16]
    d16e:	4808      	ldr	r0, [pc, #32]	; (d190 <am_util_stdio_printf+0x34>)
    d170:	f7ff fcee 	bl	cb50 <am_util_stdio_vsprintf>
    d174:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d176:	4b07      	ldr	r3, [pc, #28]	; (d194 <am_util_stdio_printf+0x38>)
    d178:	681b      	ldr	r3, [r3, #0]
    d17a:	4805      	ldr	r0, [pc, #20]	; (d190 <am_util_stdio_printf+0x34>)
    d17c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d17e:	687b      	ldr	r3, [r7, #4]
}
    d180:	4618      	mov	r0, r3
    d182:	3708      	adds	r7, #8
    d184:	46bd      	mov	sp, r7
    d186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d18a:	b004      	add	sp, #16
    d18c:	4770      	bx	lr
    d18e:	bf00      	nop
    d190:	10001004 	.word	0x10001004
    d194:	1000110c 	.word	0x1000110c

0000d198 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d198:	b580      	push	{r7, lr}
    d19a:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d19c:	4802      	ldr	r0, [pc, #8]	; (d1a8 <am_util_stdio_terminal_clear+0x10>)
    d19e:	f7ff ffdd 	bl	d15c <am_util_stdio_printf>
}
    d1a2:	bf00      	nop
    d1a4:	bd80      	pop	{r7, pc}
    d1a6:	bf00      	nop
    d1a8:	0000dd4c 	.word	0x0000dd4c

0000d1ac <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d1ac:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d1ae:	f000 fb81 	bl	d8b4 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d1b2:	2000      	movs	r0, #0
    d1b4:	f7ff f94e 	bl	c454 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d1b8:	4b08      	ldr	r3, [pc, #32]	; (d1dc <am_bsp_low_power_init+0x30>)
    d1ba:	2029      	movs	r0, #41	; 0x29
    d1bc:	6819      	ldr	r1, [r3, #0]
    d1be:	f000 fa0d 	bl	d5dc <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d1c2:	f000 fc7d 	bl	dac0 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d1c6:	2001      	movs	r0, #1
    d1c8:	f000 fcb8 	bl	db3c <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d1cc:	2100      	movs	r1, #0
    d1ce:	2003      	movs	r0, #3
    d1d0:	f000 f85a 	bl	d288 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d1d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d1d8:	f000 bcbc 	b.w	db54 <am_hal_rtc_osc_disable>
    d1dc:	0000dd68 	.word	0x0000dd68

0000d1e0 <am_bsp_itm_printf_enable>:
{
    d1e0:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d1e2:	4b0b      	ldr	r3, [pc, #44]	; (d210 <am_bsp_itm_printf_enable+0x30>)
{
    d1e4:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d1e6:	2201      	movs	r2, #1
    d1e8:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d1ea:	f000 fb45 	bl	d878 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d1ee:	a806      	add	r0, sp, #24
    d1f0:	4908      	ldr	r1, [pc, #32]	; (d214 <am_bsp_itm_printf_enable+0x34>)
    d1f2:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d1f6:	f000 fd4b 	bl	dc90 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d1fa:	4b07      	ldr	r3, [pc, #28]	; (d218 <am_bsp_itm_printf_enable+0x38>)
    d1fc:	2029      	movs	r0, #41	; 0x29
    d1fe:	6819      	ldr	r1, [r3, #0]
    d200:	f000 f9ec 	bl	d5dc <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d204:	4805      	ldr	r0, [pc, #20]	; (d21c <am_bsp_itm_printf_enable+0x3c>)
    d206:	f7ff f925 	bl	c454 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d20a:	b007      	add	sp, #28
    d20c:	f85d fb04 	ldr.w	pc, [sp], #4
    d210:	10001108 	.word	0x10001108
    d214:	000f4240 	.word	0x000f4240
    d218:	0000dd60 	.word	0x0000dd60
    d21c:	0000d95d 	.word	0x0000d95d

0000d220 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d220:	b530      	push	{r4, r5, lr}
    d222:	b083      	sub	sp, #12
    d224:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d226:	f000 fb1f 	bl	d868 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d22a:	4c11      	ldr	r4, [pc, #68]	; (d270 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d22c:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d22e:	6823      	ldr	r3, [r4, #0]
    d230:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d234:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d236:	9801      	ldr	r0, [sp, #4]
    d238:	f000 fb1a 	bl	d870 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d23c:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d23e:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d240:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d242:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d244:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d246:	005d      	lsls	r5, r3, #1
    d248:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d24c:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d24e:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d250:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d254:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d256:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d25a:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d25e:	0212      	lsls	r2, r2, #8
    d260:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d264:	432b      	orrs	r3, r5
    d266:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d268:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d26a:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d26c:	b003      	add	sp, #12
    d26e:	bd30      	pop	{r4, r5, pc}
    d270:	40018000 	.word	0x40018000

0000d274 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d274:	4a03      	ldr	r2, [pc, #12]	; (d284 <am_hal_cachectrl_enable+0x10>)
    d276:	6813      	ldr	r3, [r2, #0]
    d278:	f043 0001 	orr.w	r0, r3, #1
    d27c:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d27e:	2000      	movs	r0, #0
    d280:	4770      	bx	lr
    d282:	bf00      	nop
    d284:	40018000 	.word	0x40018000

0000d288 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d288:	2809      	cmp	r0, #9
    d28a:	d852      	bhi.n	d332 <am_hal_clkgen_control+0xaa>
    d28c:	e8df f000 	tbb	[pc, r0]
    d290:	2b21190d 	.word	0x2b21190d
    d294:	51513d33 	.word	0x51513d33
    d298:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d29a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d29e:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d2a0:	6a1a      	ldr	r2, [r3, #32]
    d2a2:	f36f 0200 	bfc	r2, #0, #1
    d2a6:	621a      	str	r2, [r3, #32]
            break;
    d2a8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d2aa:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d2ae:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d2b0:	2047      	movs	r0, #71	; 0x47
    d2b2:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d2b6:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d2ba:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d2bc:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d2c0:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2c2:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2c6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2c8:	68ca      	ldr	r2, [r1, #12]
    d2ca:	f022 0301 	bic.w	r3, r2, #1
    d2ce:	60cb      	str	r3, [r1, #12]
            break;
    d2d0:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2d2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2d6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d2dc:	f022 0302 	bic.w	r3, r2, #2
    d2e0:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d2e4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2ea:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d2ec:	68d3      	ldr	r3, [r2, #12]
    d2ee:	f043 0101 	orr.w	r1, r3, #1
    d2f2:	60d1      	str	r1, [r2, #12]
            break;
    d2f4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2f6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d2fa:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d2fc:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d300:	f043 0102 	orr.w	r1, r3, #2
    d304:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d308:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d30a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d30e:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d310:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d312:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d314:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d316:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d318:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d31a:	615a      	str	r2, [r3, #20]
            break;
    d31c:	4770      	bx	lr
            if ( pArgs == 0 )
    d31e:	b151      	cbz	r1, d336 <am_hal_clkgen_control+0xae>
    d320:	6808      	ldr	r0, [r1, #0]
    d322:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d326:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d32a:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d32c:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d330:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d332:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d334:	4770      	bx	lr
    d336:	4901      	ldr	r1, [pc, #4]	; (d33c <am_hal_clkgen_control+0xb4>)
    d338:	e7f5      	b.n	d326 <am_hal_clkgen_control+0x9e>
    d33a:	bf00      	nop
    d33c:	0025b801 	.word	0x0025b801

0000d340 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d340:	b1a8      	cbz	r0, d36e <am_hal_clkgen_status_get+0x2e>
{
    d342:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d344:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d348:	490a      	ldr	r1, [pc, #40]	; (d374 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d34a:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d34c:	4b0a      	ldr	r3, [pc, #40]	; (d378 <am_hal_clkgen_status_get+0x38>)
    d34e:	f014 0f01 	tst.w	r4, #1
    d352:	bf08      	it	eq
    d354:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d356:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d358:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d35a:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d35e:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d362:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d364:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d366:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d36a:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d36c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d36e:	2006      	movs	r0, #6
    d370:	4770      	bx	lr
    d372:	bf00      	nop
    d374:	02dc6c00 	.word	0x02dc6c00
    d378:	016e3600 	.word	0x016e3600

0000d37c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d37c:	4b00      	ldr	r3, [pc, #0]	; (d380 <am_hal_flash_delay+0x4>)
    d37e:	4718      	bx	r3
    d380:	0800009d 	.word	0x0800009d

0000d384 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d388:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d38c:	f8df 8248 	ldr.w	r8, [pc, #584]	; d5d8 <am_hal_flash_delay_status_check+0x254>
{
    d390:	4607      	mov	r7, r0
    d392:	460c      	mov	r4, r1
    d394:	4615      	mov	r5, r2
    d396:	461e      	mov	r6, r3
    d398:	f1be 0f00 	cmp.w	lr, #0
    d39c:	f000 808e 	beq.w	d4bc <am_hal_flash_delay_status_check+0x138>
    d3a0:	f010 0907 	ands.w	r9, r0, #7
    d3a4:	d044      	beq.n	d430 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3a6:	680b      	ldr	r3, [r1, #0]
    d3a8:	4013      	ands	r3, r2
    d3aa:	429e      	cmp	r6, r3
    d3ac:	f000 8083 	beq.w	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3b0:	2001      	movs	r0, #1
    d3b2:	47c0      	blx	r8
    d3b4:	f1b9 0f01 	cmp.w	r9, #1
    d3b8:	f107 37ff 	add.w	r7, r7, #4294967295
    d3bc:	d038      	beq.n	d430 <am_hal_flash_delay_status_check+0xac>
    d3be:	f1b9 0f02 	cmp.w	r9, #2
    d3c2:	d02e      	beq.n	d422 <am_hal_flash_delay_status_check+0x9e>
    d3c4:	f1b9 0f03 	cmp.w	r9, #3
    d3c8:	d024      	beq.n	d414 <am_hal_flash_delay_status_check+0x90>
    d3ca:	f1b9 0f04 	cmp.w	r9, #4
    d3ce:	d01a      	beq.n	d406 <am_hal_flash_delay_status_check+0x82>
    d3d0:	f1b9 0f05 	cmp.w	r9, #5
    d3d4:	d010      	beq.n	d3f8 <am_hal_flash_delay_status_check+0x74>
    d3d6:	f1b9 0f06 	cmp.w	r9, #6
    d3da:	d006      	beq.n	d3ea <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3dc:	6820      	ldr	r0, [r4, #0]
    d3de:	4028      	ands	r0, r5
    d3e0:	4286      	cmp	r6, r0
    d3e2:	d068      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3e4:	2001      	movs	r0, #1
    d3e6:	47c0      	blx	r8
    d3e8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3ea:	6821      	ldr	r1, [r4, #0]
    d3ec:	4029      	ands	r1, r5
    d3ee:	428e      	cmp	r6, r1
    d3f0:	d061      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3f2:	2001      	movs	r0, #1
    d3f4:	47c0      	blx	r8
    d3f6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d3f8:	6822      	ldr	r2, [r4, #0]
    d3fa:	402a      	ands	r2, r5
    d3fc:	4296      	cmp	r6, r2
    d3fe:	d05a      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d400:	2001      	movs	r0, #1
    d402:	47c0      	blx	r8
    d404:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d406:	6823      	ldr	r3, [r4, #0]
    d408:	402b      	ands	r3, r5
    d40a:	429e      	cmp	r6, r3
    d40c:	d053      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d40e:	2001      	movs	r0, #1
    d410:	47c0      	blx	r8
    d412:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d414:	6820      	ldr	r0, [r4, #0]
    d416:	4028      	ands	r0, r5
    d418:	4286      	cmp	r6, r0
    d41a:	d04c      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d41c:	2001      	movs	r0, #1
    d41e:	47c0      	blx	r8
    d420:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d422:	6821      	ldr	r1, [r4, #0]
    d424:	4029      	ands	r1, r5
    d426:	428e      	cmp	r6, r1
    d428:	d045      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d42a:	2001      	movs	r0, #1
    d42c:	3f01      	subs	r7, #1
    d42e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d430:	6822      	ldr	r2, [r4, #0]
    d432:	402a      	ands	r2, r5
    d434:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d436:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d43a:	d03c      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d43c:	2f00      	cmp	r7, #0
    d43e:	f000 80c8 	beq.w	d5d2 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d442:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d444:	6823      	ldr	r3, [r4, #0]
    d446:	402b      	ands	r3, r5
    d448:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d44a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d44e:	d032      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d450:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d452:	6821      	ldr	r1, [r4, #0]
    d454:	4029      	ands	r1, r5
    d456:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d458:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d45c:	d02b      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d45e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d460:	6822      	ldr	r2, [r4, #0]
    d462:	402a      	ands	r2, r5
    d464:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d466:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d46a:	d024      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d46c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d46e:	6823      	ldr	r3, [r4, #0]
    d470:	402b      	ands	r3, r5
    d472:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d474:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d478:	d01d      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d47a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d47c:	6821      	ldr	r1, [r4, #0]
    d47e:	4029      	ands	r1, r5
    d480:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d482:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d486:	d016      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d488:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d48a:	6822      	ldr	r2, [r4, #0]
    d48c:	402a      	ands	r2, r5
    d48e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d490:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d494:	d00f      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d496:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d498:	6820      	ldr	r0, [r4, #0]
    d49a:	4028      	ands	r0, r5
    d49c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d49e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4a2:	d008      	beq.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4a4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4a6:	6822      	ldr	r2, [r4, #0]
    d4a8:	402a      	ands	r2, r5
    d4aa:	4296      	cmp	r6, r2
    d4ac:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4b0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4b4:	d1c2      	bne.n	d43c <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d4b6:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d4bc:	f010 0907 	ands.w	r9, r0, #7
    d4c0:	d043      	beq.n	d54a <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4c2:	680b      	ldr	r3, [r1, #0]
    d4c4:	4013      	ands	r3, r2
    d4c6:	429e      	cmp	r6, r3
    d4c8:	d1f5      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4ca:	2001      	movs	r0, #1
    d4cc:	47c0      	blx	r8
    d4ce:	f1b9 0f01 	cmp.w	r9, #1
    d4d2:	f107 37ff 	add.w	r7, r7, #4294967295
    d4d6:	d038      	beq.n	d54a <am_hal_flash_delay_status_check+0x1c6>
    d4d8:	f1b9 0f02 	cmp.w	r9, #2
    d4dc:	d02e      	beq.n	d53c <am_hal_flash_delay_status_check+0x1b8>
    d4de:	f1b9 0f03 	cmp.w	r9, #3
    d4e2:	d024      	beq.n	d52e <am_hal_flash_delay_status_check+0x1aa>
    d4e4:	f1b9 0f04 	cmp.w	r9, #4
    d4e8:	d01a      	beq.n	d520 <am_hal_flash_delay_status_check+0x19c>
    d4ea:	f1b9 0f05 	cmp.w	r9, #5
    d4ee:	d010      	beq.n	d512 <am_hal_flash_delay_status_check+0x18e>
    d4f0:	f1b9 0f06 	cmp.w	r9, #6
    d4f4:	d006      	beq.n	d504 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d4f6:	6821      	ldr	r1, [r4, #0]
    d4f8:	4029      	ands	r1, r5
    d4fa:	428e      	cmp	r6, r1
    d4fc:	d1db      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4fe:	2001      	movs	r0, #1
    d500:	47c0      	blx	r8
    d502:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d504:	6822      	ldr	r2, [r4, #0]
    d506:	402a      	ands	r2, r5
    d508:	4296      	cmp	r6, r2
    d50a:	d1d4      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d50c:	2001      	movs	r0, #1
    d50e:	47c0      	blx	r8
    d510:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d512:	6820      	ldr	r0, [r4, #0]
    d514:	4028      	ands	r0, r5
    d516:	4286      	cmp	r6, r0
    d518:	d1cd      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d51a:	2001      	movs	r0, #1
    d51c:	47c0      	blx	r8
    d51e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d520:	6823      	ldr	r3, [r4, #0]
    d522:	402b      	ands	r3, r5
    d524:	429e      	cmp	r6, r3
    d526:	d1c6      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d528:	2001      	movs	r0, #1
    d52a:	47c0      	blx	r8
    d52c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d52e:	6821      	ldr	r1, [r4, #0]
    d530:	4029      	ands	r1, r5
    d532:	428e      	cmp	r6, r1
    d534:	d1bf      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d536:	2001      	movs	r0, #1
    d538:	47c0      	blx	r8
    d53a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d53c:	6822      	ldr	r2, [r4, #0]
    d53e:	402a      	ands	r2, r5
    d540:	4296      	cmp	r6, r2
    d542:	d1b8      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d544:	2001      	movs	r0, #1
    d546:	3f01      	subs	r7, #1
    d548:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d54a:	6823      	ldr	r3, [r4, #0]
    d54c:	402b      	ands	r3, r5
    d54e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d550:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d554:	d1af      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d556:	2f00      	cmp	r7, #0
    d558:	d03b      	beq.n	d5d2 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d55a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d55c:	6821      	ldr	r1, [r4, #0]
    d55e:	4029      	ands	r1, r5
    d560:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d562:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d566:	d1a6      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d568:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d56a:	6822      	ldr	r2, [r4, #0]
    d56c:	402a      	ands	r2, r5
    d56e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d570:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d574:	d19f      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d576:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d578:	6823      	ldr	r3, [r4, #0]
    d57a:	402b      	ands	r3, r5
    d57c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d57e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d582:	d198      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d584:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d586:	6821      	ldr	r1, [r4, #0]
    d588:	4029      	ands	r1, r5
    d58a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d58c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d590:	d191      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d592:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d594:	6822      	ldr	r2, [r4, #0]
    d596:	402a      	ands	r2, r5
    d598:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d59a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d59e:	d18a      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5a0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5a2:	6823      	ldr	r3, [r4, #0]
    d5a4:	402b      	ands	r3, r5
    d5a6:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5a8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5ac:	d183      	bne.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5ae:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5b0:	6820      	ldr	r0, [r4, #0]
    d5b2:	4028      	ands	r0, r5
    d5b4:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5b6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5ba:	f47f af7c 	bne.w	d4b6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5be:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5c0:	6823      	ldr	r3, [r4, #0]
    d5c2:	402b      	ands	r3, r5
    d5c4:	429e      	cmp	r6, r3
    d5c6:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5ca:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5ce:	d0c2      	beq.n	d556 <am_hal_flash_delay_status_check+0x1d2>
    d5d0:	e771      	b.n	d4b6 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d5d2:	2004      	movs	r0, #4
    d5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d5d8:	0800009d 	.word	0x0800009d

0000d5dc <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d5dc:	2831      	cmp	r0, #49	; 0x31
    d5de:	d901      	bls.n	d5e4 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d5e0:	2006      	movs	r0, #6
    d5e2:	4770      	bx	lr
{
    d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d5e8:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d5ec:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d5f0:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d5f2:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d5f6:	d014      	beq.n	d622 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d5f8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d5fc:	1db2      	adds	r2, r6, #6
    d5fe:	f002 0707 	and.w	r7, r2, #7
    d602:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d604:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d608:	f200 80ab 	bhi.w	d762 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d60c:	4a85      	ldr	r2, [pc, #532]	; (d824 <am_hal_gpio_pinconfig+0x248>)
    d60e:	5c17      	ldrb	r7, [r2, r0]
    d610:	07ff      	lsls	r7, r7, #31
    d612:	d403      	bmi.n	d61c <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d614:	4884      	ldr	r0, [pc, #528]	; (d828 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d616:	b007      	add	sp, #28
    d618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d61c:	1eb4      	subs	r4, r6, #2
    d61e:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d622:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d626:	2e00      	cmp	r6, #0
    d628:	f040 8095 	bne.w	d756 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d62c:	4a7f      	ldr	r2, [pc, #508]	; (d82c <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d62e:	4f80      	ldr	r7, [pc, #512]	; (d830 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d630:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d632:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d636:	411e      	asrs	r6, r3
    d638:	f016 0f01 	tst.w	r6, #1
    d63c:	bf0c      	ite	eq
    d63e:	2600      	moveq	r6, #0
    d640:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d642:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d644:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d648:	f000 8097 	beq.w	d77a <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d64c:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d650:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d652:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d656:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d65a:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d65c:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d660:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d664:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d668:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d66c:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d66e:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d672:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d676:	f000 808d 	beq.w	d794 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d67a:	4a6e      	ldr	r2, [pc, #440]	; (d834 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d67c:	6816      	ldr	r6, [r2, #0]
    d67e:	1b8c      	subs	r4, r1, r6
    d680:	fab4 f384 	clz	r3, r4
    d684:	095f      	lsrs	r7, r3, #5
    d686:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d688:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d68c:	bf04      	itt	eq
    d68e:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d692:	f367 0800 	bfieq	r8, r7, #0, #1
    d696:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d698:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d69c:	2902      	cmp	r1, #2
    d69e:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d6a2:	d07a      	beq.n	d79a <am_hal_gpio_pinconfig+0x1be>
    d6a4:	d87f      	bhi.n	d7a6 <am_hal_gpio_pinconfig+0x1ca>
    d6a6:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d6a8:	bf08      	it	eq
    d6aa:	f045 0504 	orreq.w	r5, r5, #4
    d6ae:	f004 0a18 	and.w	sl, r4, #24
            break;
    d6b2:	2200      	movs	r2, #0
    d6b4:	4604      	mov	r4, r0
    d6b6:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d6b8:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d6bc:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d6c0:	485d      	ldr	r0, [pc, #372]	; (d838 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d6c2:	495e      	ldr	r1, [pc, #376]	; (d83c <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d6c4:	4f5e      	ldr	r7, [pc, #376]	; (d840 <am_hal_gpio_pinconfig+0x264>)
    d6c6:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d6c8:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d6cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d6d0:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d6d4:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d6d6:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d6da:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d6dc:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d6e0:	f000 f8c2 	bl	d868 <am_hal_interrupt_master_disable>
    d6e4:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d6e6:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d6ea:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d6ee:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d6f2:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d6f6:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d6f8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d6fc:	9902      	ldr	r1, [sp, #8]
    d6fe:	9a03      	ldr	r2, [sp, #12]
    d700:	b150      	cbz	r0, d718 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d702:	f004 001f 	and.w	r0, r4, #31
    d706:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d70a:	f04f 0c01 	mov.w	ip, #1
    d70e:	4c4d      	ldr	r4, [pc, #308]	; (d844 <am_hal_gpio_pinconfig+0x268>)
    d710:	fa0c f000 	lsl.w	r0, ip, r0
    d714:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d718:	484b      	ldr	r0, [pc, #300]	; (d848 <am_hal_gpio_pinconfig+0x26c>)
    d71a:	2473      	movs	r4, #115	; 0x73
    d71c:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d71e:	f8da 4000 	ldr.w	r4, [sl]
    d722:	4034      	ands	r4, r6
    d724:	4325      	orrs	r5, r4
    d726:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d72a:	f859 5001 	ldr.w	r5, [r9, r1]
    d72e:	402f      	ands	r7, r5
    d730:	ea47 0708 	orr.w	r7, r7, r8
    d734:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d738:	f85b 1003 	ldr.w	r1, [fp, r3]
    d73c:	400e      	ands	r6, r1
    d73e:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d740:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d742:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d746:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d748:	9805      	ldr	r0, [sp, #20]
    d74a:	f000 f891 	bl	d870 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d74e:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d750:	b007      	add	sp, #28
    d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d756:	2e01      	cmp	r6, #1
    d758:	d015      	beq.n	d786 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d75a:	2e02      	cmp	r6, #2
    d75c:	d030      	beq.n	d7c0 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d75e:	483b      	ldr	r0, [pc, #236]	; (d84c <am_hal_gpio_pinconfig+0x270>)
    d760:	e759      	b.n	d616 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d762:	2cc0      	cmp	r4, #192	; 0xc0
    d764:	d027      	beq.n	d7b6 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d766:	2c20      	cmp	r4, #32
    d768:	f47f af5b 	bne.w	d622 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d76c:	4c2d      	ldr	r4, [pc, #180]	; (d824 <am_hal_gpio_pinconfig+0x248>)
    d76e:	5c26      	ldrb	r6, [r4, r0]
    d770:	f016 0f09 	tst.w	r6, #9
    d774:	f47f af4e 	bne.w	d614 <am_hal_gpio_pinconfig+0x38>
    d778:	e753      	b.n	d622 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d77a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d77e:	2a07      	cmp	r2, #7
    d780:	d125      	bne.n	d7ce <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d782:	4833      	ldr	r0, [pc, #204]	; (d850 <am_hal_gpio_pinconfig+0x274>)
    d784:	e747      	b.n	d616 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d786:	4c27      	ldr	r4, [pc, #156]	; (d824 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d788:	5c26      	ldrb	r6, [r4, r0]
    d78a:	07b4      	lsls	r4, r6, #30
    d78c:	d5e7      	bpl.n	d75e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d78e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d792:	e74b      	b.n	d62c <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d794:	2701      	movs	r7, #1
    d796:	9700      	str	r7, [sp, #0]
    d798:	e776      	b.n	d688 <am_hal_gpio_pinconfig+0xac>
    d79a:	f004 0a18 	and.w	sl, r4, #24
    d79e:	2301      	movs	r3, #1
    d7a0:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d7a4:	e786      	b.n	d6b4 <am_hal_gpio_pinconfig+0xd8>
    d7a6:	f004 0a18 	and.w	sl, r4, #24
    d7aa:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d7ac:	f045 0504 	orr.w	r5, r5, #4
    d7b0:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d7b4:	e77e      	b.n	d6b4 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d7b6:	2814      	cmp	r0, #20
    d7b8:	f43f af33 	beq.w	d622 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d7bc:	4825      	ldr	r0, [pc, #148]	; (d854 <am_hal_gpio_pinconfig+0x278>)
    d7be:	e72a      	b.n	d616 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d7c0:	4a18      	ldr	r2, [pc, #96]	; (d824 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d7c2:	5c17      	ldrb	r7, [r2, r0]
    d7c4:	077a      	lsls	r2, r7, #29
    d7c6:	d5ca      	bpl.n	d75e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d7c8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d7cc:	e72e      	b.n	d62c <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d7ce:	4c22      	ldr	r4, [pc, #136]	; (d858 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d7d0:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d7d4:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d7d8:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d7dc:	45b0      	cmp	r8, r6
    d7de:	d010      	beq.n	d802 <am_hal_gpio_pinconfig+0x226>
    d7e0:	0087      	lsls	r7, r0, #2
    d7e2:	eb04 0907 	add.w	r9, r4, r7
    d7e6:	f899 3001 	ldrb.w	r3, [r9, #1]
    d7ea:	42b3      	cmp	r3, r6
    d7ec:	d015      	beq.n	d81a <am_hal_gpio_pinconfig+0x23e>
    d7ee:	f899 2002 	ldrb.w	r2, [r9, #2]
    d7f2:	42b2      	cmp	r2, r6
    d7f4:	d00f      	beq.n	d816 <am_hal_gpio_pinconfig+0x23a>
    d7f6:	f899 4003 	ldrb.w	r4, [r9, #3]
    d7fa:	42b4      	cmp	r4, r6
    d7fc:	d00f      	beq.n	d81e <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d7fe:	4817      	ldr	r0, [pc, #92]	; (d85c <am_hal_gpio_pinconfig+0x280>)
    d800:	e709      	b.n	d616 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d802:	2600      	movs	r6, #0
    d804:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d806:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d808:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    d80c:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d80e:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    d812:	9300      	str	r3, [sp, #0]
    d814:	e740      	b.n	d698 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d816:	2602      	movs	r6, #2
    d818:	e7f5      	b.n	d806 <am_hal_gpio_pinconfig+0x22a>
    d81a:	2601      	movs	r6, #1
    d81c:	e7f3      	b.n	d806 <am_hal_gpio_pinconfig+0x22a>
    d81e:	2603      	movs	r6, #3
    d820:	e7f1      	b.n	d806 <am_hal_gpio_pinconfig+0x22a>
    d822:	bf00      	nop
    d824:	0000dd6c 	.word	0x0000dd6c
    d828:	08000100 	.word	0x08000100
    d82c:	0000dda0 	.word	0x0000dda0
    d830:	0000de9c 	.word	0x0000de9c
    d834:	0000dd68 	.word	0x0000dd68
    d838:	7ffffffc 	.word	0x7ffffffc
    d83c:	400100e0 	.word	0x400100e0
    d840:	40010040 	.word	0x40010040
    d844:	400100b4 	.word	0x400100b4
    d848:	40010000 	.word	0x40010000
    d84c:	08000102 	.word	0x08000102
    d850:	08000103 	.word	0x08000103
    d854:	08000101 	.word	0x08000101
    d858:	0000ddd4 	.word	0x0000ddd4
    d85c:	08000104 	.word	0x08000104

0000d860 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    d860:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    d864:	b662      	cpsie	i
    __asm("    bx lr");
    d866:	4770      	bx	lr

0000d868 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    d868:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    d86c:	b672      	cpsid	i
    __asm("    bx lr");
    d86e:	4770      	bx	lr

0000d870 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    d870:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    d874:	4770      	bx	lr
    d876:	bf00      	nop

0000d878 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d878:	4a0b      	ldr	r2, [pc, #44]	; (d8a8 <am_hal_itm_enable+0x30>)
    d87a:	68d3      	ldr	r3, [r2, #12]
    d87c:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    d880:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    d882:	68d1      	ldr	r1, [r2, #12]
    d884:	01cb      	lsls	r3, r1, #7
    d886:	d5fc      	bpl.n	d882 <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    d888:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    d88c:	4b07      	ldr	r3, [pc, #28]	; (d8ac <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    d88e:	4a08      	ldr	r2, [pc, #32]	; (d8b0 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d890:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    d894:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    d896:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    d89a:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    d89e:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    d8a2:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    d8a6:	4770      	bx	lr
    d8a8:	e000edf0 	.word	0xe000edf0
    d8ac:	c5acce55 	.word	0xc5acce55
    d8b0:	00150511 	.word	0x00150511

0000d8b4 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    d8b4:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    d8b6:	4b24      	ldr	r3, [pc, #144]	; (d948 <am_hal_itm_disable+0x94>)
    d8b8:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    d8bc:	b9b0      	cbnz	r0, d8ec <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d8be:	4923      	ldr	r1, [pc, #140]	; (d94c <am_hal_itm_disable+0x98>)
    d8c0:	68ca      	ldr	r2, [r1, #12]
    d8c2:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    d8c6:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    d8c8:	68cb      	ldr	r3, [r1, #12]
    d8ca:	01da      	lsls	r2, r3, #7
    d8cc:	d5fc      	bpl.n	d8c8 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    d8ce:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    d8d2:	481f      	ldr	r0, [pc, #124]	; (d950 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    d8d4:	4a1f      	ldr	r2, [pc, #124]	; (d954 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d8d6:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    d8da:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    d8dc:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    d8e0:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    d8e4:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    d8e8:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    d8ec:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    d8f0:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    d8f4:	021b      	lsls	r3, r3, #8
    d8f6:	d4fb      	bmi.n	d8f0 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    d8f8:	f240 20f7 	movw	r0, #759	; 0x2f7
    d8fc:	f7ff fd3e 	bl	d37c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    d900:	4813      	ldr	r0, [pc, #76]	; (d950 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d902:	4915      	ldr	r1, [pc, #84]	; (d958 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d904:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d908:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    d90c:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d90e:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    d912:	f022 0401 	bic.w	r4, r2, #1
    d916:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d91a:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    d91e:	420b      	tst	r3, r1
    d920:	d1fb      	bne.n	d91a <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    d922:	3801      	subs	r0, #1
    d924:	d1f3      	bne.n	d90e <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d926:	4909      	ldr	r1, [pc, #36]	; (d94c <am_hal_itm_disable+0x98>)
    d928:	68ca      	ldr	r2, [r1, #12]
    d92a:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    d92e:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    d930:	68cb      	ldr	r3, [r1, #12]
    d932:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    d936:	d1fb      	bne.n	d930 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    d938:	4903      	ldr	r1, [pc, #12]	; (d948 <am_hal_itm_disable+0x94>)
    d93a:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    d93e:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    d942:	2a00      	cmp	r2, #0
    d944:	d1fb      	bne.n	d93e <am_hal_itm_disable+0x8a>
}
    d946:	bd10      	pop	{r4, pc}
    d948:	40020000 	.word	0x40020000
    d94c:	e000edf0 	.word	0xe000edf0
    d950:	c5acce55 	.word	0xc5acce55
    d954:	00150511 	.word	0x00150511
    d958:	00800001 	.word	0x00800001

0000d95c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    d95c:	7803      	ldrb	r3, [r0, #0]
    d95e:	b1b3      	cbz	r3, d98e <am_hal_itm_print+0x32>
{
    d960:	b410      	push	{r4}
    d962:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    d964:	2400      	movs	r4, #0
    d966:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    d96a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    d96c:	2900      	cmp	r1, #0
    d96e:	d1fa      	bne.n	d966 <am_hal_itm_print+0xa>
    d970:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    d972:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    d976:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    d97a:	f8dc 3000 	ldr.w	r3, [ip]
    d97e:	2b00      	cmp	r3, #0
    d980:	d0fb      	beq.n	d97a <am_hal_itm_print+0x1e>
    while (ui32Length)
    d982:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    d984:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    d988:	d1f5      	bne.n	d976 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    d98a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d98e:	4770      	bx	lr

0000d990 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    d990:	b141      	cbz	r1, d9a4 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    d992:	2801      	cmp	r0, #1
{
    d994:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    d996:	d03a      	beq.n	da0e <am_hal_mcuctrl_info_get+0x7e>
    d998:	d322      	bcc.n	d9e0 <am_hal_mcuctrl_info_get+0x50>
    d99a:	2802      	cmp	r0, #2
    d99c:	d004      	beq.n	d9a8 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d99e:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    d9a0:	bcf0      	pop	{r4, r5, r6, r7}
    d9a2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d9a4:	2006      	movs	r0, #6
    d9a6:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    d9a8:	4a41      	ldr	r2, [pc, #260]	; (dab0 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    d9aa:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    d9ac:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    d9b0:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    d9b2:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    d9b6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    d9ba:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    d9be:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    d9c0:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    d9c2:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    d9c4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    d9c8:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    d9ca:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    d9ce:	4334      	orrs	r4, r6
    d9d0:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    d9d2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    d9d6:	4310      	orrs	r0, r2
    d9d8:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    d9da:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    d9dc:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    d9de:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    d9e0:	4c33      	ldr	r4, [pc, #204]	; (dab0 <am_hal_mcuctrl_info_get+0x120>)
    d9e2:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    d9e4:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    d9e8:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    d9ec:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    d9ee:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    d9f0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    d9f4:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    d9f8:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    d9fa:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    d9fc:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    da00:	f004 0501 	and.w	r5, r4, #1
    da04:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    da06:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    da08:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    da0a:	bcf0      	pop	{r4, r5, r6, r7}
    da0c:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    da0e:	4a28      	ldr	r2, [pc, #160]	; (dab0 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    da10:	4c28      	ldr	r4, [pc, #160]	; (dab4 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    da12:	6813      	ldr	r3, [r2, #0]
    da14:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    da16:	6850      	ldr	r0, [r2, #4]
    da18:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    da1a:	6897      	ldr	r7, [r2, #8]
    da1c:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    da1e:	68d6      	ldr	r6, [r2, #12]
    da20:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    da22:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    da24:	4824      	ldr	r0, [pc, #144]	; (dab8 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    da26:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    da28:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    da2c:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    da30:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    da32:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    da36:	4a21      	ldr	r2, [pc, #132]	; (dabc <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    da38:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    da3c:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    da3e:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    da42:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    da44:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    da46:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    da48:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    da4c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    da50:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    da52:	f000 040f 	and.w	r4, r0, #15
    da56:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    da5a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    da5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    da60:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    da64:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    da68:	f007 0c0f 	and.w	ip, r7, #15
    da6c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    da70:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    da72:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    da76:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    da7a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    da7e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    da82:	433b      	orrs	r3, r7
    da84:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    da86:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    da8a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    da8e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    da92:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    da96:	b2e5      	uxtb	r5, r4
    da98:	042b      	lsls	r3, r5, #16
    da9a:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    da9e:	b2d6      	uxtb	r6, r2
    daa0:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    daa2:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    daa4:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    daa8:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    daaa:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    daac:	bcf0      	pop	{r4, r5, r6, r7}
    daae:	4770      	bx	lr
    dab0:	40020000 	.word	0x40020000
    dab4:	0000ded0 	.word	0x0000ded0
    dab8:	0000df10 	.word	0x0000df10
    dabc:	f0000f00 	.word	0xf0000f00

0000dac0 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dac0:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dac2:	4c1b      	ldr	r4, [pc, #108]	; (db30 <am_hal_pwrctrl_low_power_init+0x70>)
    dac4:	69a3      	ldr	r3, [r4, #24]
    dac6:	05db      	lsls	r3, r3, #23
{
    dac8:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    daca:	d502      	bpl.n	dad2 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    dacc:	2000      	movs	r0, #0
}
    dace:	b003      	add	sp, #12
    dad0:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dad2:	4d18      	ldr	r5, [pc, #96]	; (db34 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    dad4:	4918      	ldr	r1, [pc, #96]	; (db38 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dad6:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dad8:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dada:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dadc:	461a      	mov	r2, r3
    dade:	9000      	str	r0, [sp, #0]
    dae0:	f242 7010 	movw	r0, #10000	; 0x2710
    dae4:	f7ff fc4e 	bl	d384 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dae8:	b110      	cbz	r0, daf0 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    daea:	2004      	movs	r0, #4
}
    daec:	b003      	add	sp, #12
    daee:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    daf0:	6821      	ldr	r1, [r4, #0]
    daf2:	f041 0201 	orr.w	r2, r1, #1
    daf6:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    daf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dafa:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    dafe:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    db00:	68ec      	ldr	r4, [r5, #12]
    db02:	b2e2      	uxtb	r2, r4
    db04:	2a11      	cmp	r2, #17
    db06:	d1e1      	bne.n	dacc <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    db08:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    db0c:	f360 5356 	bfi	r3, r0, #21, #2
    db10:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    db14:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    db18:	240f      	movs	r4, #15
    db1a:	f364 118b 	bfi	r1, r4, #6, #6
    db1e:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    db22:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    db26:	f364 0205 	bfi	r2, r4, #0, #6
    db2a:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    db2e:	e7ce      	b.n	dace <am_hal_pwrctrl_low_power_init+0xe>
    db30:	40021000 	.word	0x40021000
    db34:	40020000 	.word	0x40020000
    db38:	40020018 	.word	0x40020018

0000db3c <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    db3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    db40:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    db42:	68d3      	ldr	r3, [r2, #12]
    db44:	bf0c      	ite	eq
    db46:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    db4a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    db4e:	60d3      	str	r3, [r2, #12]
    db50:	4770      	bx	lr
    db52:	bf00      	nop

0000db54 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    db54:	4a03      	ldr	r2, [pc, #12]	; (db64 <am_hal_rtc_osc_disable+0x10>)
    db56:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    db5a:	f043 0010 	orr.w	r0, r3, #16
    db5e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    db62:	4770      	bx	lr
    db64:	40004200 	.word	0x40004200

0000db68 <am_hal_stimer_config>:

    //
    // Read the current config
    //
#if AM_CMSIS_REGS
    ui32CurrVal = CTIMER->STCFG;
    db68:	4b03      	ldr	r3, [pc, #12]	; (db78 <am_hal_stimer_config+0x10>)
    db6a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
    db6e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    }
#endif // AM_CMSIS_REGS
#endif

    return ui32CurrVal;
}
    db72:	4610      	mov	r0, r2
    db74:	4770      	bx	lr
    db76:	bf00      	nop
    db78:	40008000 	.word	0x40008000

0000db7c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
    db7c:	2807      	cmp	r0, #7
    db7e:	d900      	bls.n	db82 <am_hal_stimer_compare_delta_set+0x6>
    db80:	4770      	bx	lr
{
    db82:	b5f0      	push	{r4, r5, r6, r7, lr}
    db84:	b083      	sub	sp, #12
    db86:	460c      	mov	r4, r1
    db88:	4605      	mov	r5, r0
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
    db8a:	f7ff fe6d 	bl	d868 <am_hal_interrupt_master_disable>

    //
    // Get current CFG value
    //
#if AM_CMSIS_REGS
    cfgVal = CTIMER->STCFG;
    db8e:	4a24      	ldr	r2, [pc, #144]	; (dc20 <am_hal_stimer_compare_delta_set+0xa4>)
    AM_CRITICAL_BEGIN
    db90:	9001      	str	r0, [sp, #4]
    db92:	4f24      	ldr	r7, [pc, #144]	; (dc24 <am_hal_stimer_compare_delta_set+0xa8>)
    cfgVal = CTIMER->STCFG;
    db94:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
#if AM_CMSIS_REGS
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    db98:	f8d2 6140 	ldr.w	r6, [r2, #320]	; 0x140
    db9c:	f44f 7380 	mov.w	r3, #256	; 0x100
    dba0:	fa03 f005 	lsl.w	r0, r3, r5
    dba4:	442f      	add	r7, r5
    dba6:	00bf      	lsls	r7, r7, #2
    dba8:	ea26 0500 	bic.w	r5, r6, r0
    dbac:	f8c2 5140 	str.w	r5, [r2, #320]	; 0x140
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
#if AM_CMSIS_REGS
        expVal = CTIMER->STTMR + ui32Delta;
    dbb0:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
        // Max allowed - taking care of latency
        expMax = expVal + 10;
        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    dbb4:	603c      	str	r4, [r7, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    dbb6:	683b      	ldr	r3, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    dbb8:	4422      	add	r2, r4
        // Make sure the value is in expected range
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbba:	1a9e      	subs	r6, r3, r2
    dbbc:	2e00      	cmp	r6, #0
    dbbe:	db03      	blt.n	dbc8 <am_hal_stimer_compare_delta_set+0x4c>
        expMax = expVal + 10;
    dbc0:	320a      	adds	r2, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbc2:	1a9d      	subs	r5, r3, r2
    dbc4:	2d00      	cmp	r5, #0
    dbc6:	dd1e      	ble.n	dc06 <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    dbc8:	4a15      	ldr	r2, [pc, #84]	; (dc20 <am_hal_stimer_compare_delta_set+0xa4>)
    dbca:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    dbce:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    dbd0:	683d      	ldr	r5, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    dbd2:	4423      	add	r3, r4
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbd4:	1aee      	subs	r6, r5, r3
    dbd6:	2e00      	cmp	r6, #0
    dbd8:	db03      	blt.n	dbe2 <am_hal_stimer_compare_delta_set+0x66>
        expMax = expVal + 10;
    dbda:	330a      	adds	r3, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbdc:	1aea      	subs	r2, r5, r3
    dbde:	2a00      	cmp	r2, #0
    dbe0:	dd11      	ble.n	dc06 <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    dbe2:	4b0f      	ldr	r3, [pc, #60]	; (dc20 <am_hal_stimer_compare_delta_set+0xa4>)
    dbe4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    dbe8:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    dbea:	683d      	ldr	r5, [r7, #0]
        expVal = CTIMER->STTMR + ui32Delta;
    dbec:	4422      	add	r2, r4
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbee:	1aae      	subs	r6, r5, r2
    dbf0:	2e00      	cmp	r6, #0
    dbf2:	db03      	blt.n	dbfc <am_hal_stimer_compare_delta_set+0x80>
        expMax = expVal + 10;
    dbf4:	320a      	adds	r2, #10
        if (!U32_SMALLER(cmpVal, expVal) && !U32_GREATER(cmpVal, expMax))
    dbf6:	1aab      	subs	r3, r5, r2
    dbf8:	2b00      	cmp	r3, #0
    dbfa:	dd04      	ble.n	dc06 <am_hal_stimer_compare_delta_set+0x8a>
        expVal = CTIMER->STTMR + ui32Delta;
    dbfc:	4a08      	ldr	r2, [pc, #32]	; (dc20 <am_hal_stimer_compare_delta_set+0xa4>)
    dbfe:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    dc02:	603c      	str	r4, [r7, #0]
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    dc04:	683b      	ldr	r3, [r7, #0]

    //
    // Restore Compare Enable bit
    //
#if AM_CMSIS_REGS
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    dc06:	4f06      	ldr	r7, [pc, #24]	; (dc20 <am_hal_stimer_compare_delta_set+0xa4>)
    dc08:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
    dc0c:	4001      	ands	r1, r0
    dc0e:	4321      	orrs	r1, r4
    dc10:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
#endif // AM_CMSIS_REGS

    //
    // End the critical section.
    //
    AM_CRITICAL_END
    dc14:	9801      	ldr	r0, [sp, #4]
    dc16:	f7ff fe2b 	bl	d870 <am_hal_interrupt_master_set>
}
    dc1a:	b003      	add	sp, #12
    dc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc1e:	bf00      	nop
    dc20:	40008000 	.word	0x40008000
    dc24:	10002054 	.word	0x10002054

0000dc28 <am_hal_stimer_int_enable>:
{
    //
    // Enable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
    dc28:	4a03      	ldr	r2, [pc, #12]	; (dc38 <am_hal_stimer_int_enable+0x10>)
    dc2a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    dc2e:	4318      	orrs	r0, r3
    dc30:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    dc34:	4770      	bx	lr
    dc36:	bf00      	nop
    dc38:	40008000 	.word	0x40008000

0000dc3c <am_hal_stimer_int_clear>:
{
    //
    // Disable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
    dc3c:	4b01      	ldr	r3, [pc, #4]	; (dc44 <am_hal_stimer_int_clear+0x8>)
    dc3e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    dc42:	4770      	bx	lr
    dc44:	40008000 	.word	0x40008000

0000dc48 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    dc48:	b510      	push	{r4, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    dc4e:	f7ff fe0b 	bl	d868 <am_hal_interrupt_master_disable>
    dc52:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    dc54:	b124      	cbz	r4, dc60 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    dc56:	4b0c      	ldr	r3, [pc, #48]	; (dc88 <am_hal_sysctrl_sleep+0x40>)
    dc58:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    dc5c:	07c3      	lsls	r3, r0, #31
    dc5e:	d50a      	bpl.n	dc76 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dc60:	4a0a      	ldr	r2, [pc, #40]	; (dc8c <am_hal_sysctrl_sleep+0x44>)
    dc62:	6911      	ldr	r1, [r2, #16]
    dc64:	f021 0404 	bic.w	r4, r1, #4
    dc68:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    dc6a:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    dc6c:	9801      	ldr	r0, [sp, #4]
    dc6e:	f7ff fdff 	bl	d870 <am_hal_interrupt_master_set>
}
    dc72:	b002      	add	sp, #8
    dc74:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dc76:	4b05      	ldr	r3, [pc, #20]	; (dc8c <am_hal_sysctrl_sleep+0x44>)
    dc78:	2004      	movs	r0, #4
    dc7a:	6118      	str	r0, [r3, #16]
        __WFI();
    dc7c:	bf30      	wfi
    AM_CRITICAL_END
    dc7e:	9801      	ldr	r0, [sp, #4]
    dc80:	f7ff fdf6 	bl	d870 <am_hal_interrupt_master_set>
}
    dc84:	b002      	add	sp, #8
    dc86:	bd10      	pop	{r4, pc}
    dc88:	40020000 	.word	0x40020000
    dc8c:	e000ed00 	.word	0xe000ed00

0000dc90 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    dc90:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    dc92:	4a24      	ldr	r2, [pc, #144]	; (dd24 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    dc94:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    dc96:	2100      	movs	r1, #0
{
    dc98:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    dc9a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    dc9e:	b33b      	cbz	r3, dcf0 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dca0:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dca2:	4921      	ldr	r1, [pc, #132]	; (dd28 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dca4:	4c21      	ldr	r4, [pc, #132]	; (dd2c <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dca6:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dca8:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    dcac:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dcae:	458c      	cmp	ip, r1
    dcb0:	bf98      	it	ls
    dcb2:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    dcb4:	f7ff fb44 	bl	d340 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    dcb8:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    dcba:	1c5a      	adds	r2, r3, #1
    dcbc:	d02f      	beq.n	dd1e <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    dcbe:	08da      	lsrs	r2, r3, #3
    dcc0:	fbb2 fef4 	udiv	lr, r2, r4
    dcc4:	f10e 31ff 	add.w	r1, lr, #4294967295
    dcc8:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dcca:	4a16      	ldr	r2, [pc, #88]	; (dd24 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    dccc:	4918      	ldr	r1, [pc, #96]	; (dd30 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dcce:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    dcd0:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    dcd4:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    dcd6:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    dcd8:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    dcdc:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    dce0:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dce4:	f240 20f7 	movw	r0, #759	; 0x2f7
    dce8:	f7ff fb48 	bl	d37c <am_hal_flash_delay>
}
    dcec:	b004      	add	sp, #16
    dcee:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    dcf0:	6904      	ldr	r4, [r0, #16]
    dcf2:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    dcf4:	6883      	ldr	r3, [r0, #8]
    dcf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dcfa:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dcfc:	4c0c      	ldr	r4, [pc, #48]	; (dd30 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dcfe:	3901      	subs	r1, #1
    dd00:	2301      	movs	r3, #1
    dd02:	408b      	lsls	r3, r1
    dd04:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dd06:	6840      	ldr	r0, [r0, #4]
    dd08:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    dd0c:	4302      	orrs	r2, r0
    dd0e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dd12:	f240 20f7 	movw	r0, #759	; 0x2f7
    dd16:	f7ff fb31 	bl	d37c <am_hal_flash_delay>
}
    dd1a:	b004      	add	sp, #16
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	2005      	movs	r0, #5
    dd20:	e7d3      	b.n	dcca <am_hal_tpiu_enable+0x3a>
    dd22:	bf00      	nop
    dd24:	e0040000 	.word	0xe0040000
    dd28:	001da380 	.word	0x001da380
    dd2c:	000f4240 	.word	0x000f4240
    dd30:	40020000 	.word	0x40020000
    dd34:	00206425 	.word	0x00206425
    dd38:	0000000a 	.word	0x0000000a
    dd3c:	6d695453 	.word	0x6d695453
    dd40:	45207265 	.word	0x45207265
    dd44:	706d6178 	.word	0x706d6178
    dd48:	000a656c 	.word	0x000a656c
    dd4c:	0a0a0a0a 	.word	0x0a0a0a0a
    dd50:	0a0a0a0a 	.word	0x0a0a0a0a
    dd54:	0a0a0a0a 	.word	0x0a0a0a0a
    dd58:	0a0a0a0a 	.word	0x0a0a0a0a
    dd5c:	00000a0a 	.word	0x00000a0a

0000dd60 <g_AM_BSP_GPIO_ITM_SWO>:
    dd60:	00000002                                ....

0000dd64 <am_hal_cachectrl_defaults>:
    dd64:	00000308                                ....

0000dd68 <g_AM_HAL_GPIO_DISABLE>:
    dd68:	00000003                                ....

0000dd6c <g_ui8Bit76Capabilities>:
    dd6c:	02800101 80010180 80800101 80808080     ................
    dd7c:	80808080 80808008 01800180 80808080     ................
    dd8c:	80808080 01800402 01010401 80808080     ................
    dd9c:	00000101                                ....

0000dda0 <g_ui8Inpen>:
    dda0:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    ddb0:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    ddc0:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    ddd0:	00003130                                01..

0000ddd4 <g_ui8NCEtable>:
    ddd4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    dde4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ddf4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    de04:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    de14:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    de24:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    de34:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    de44:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    de54:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    de64:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    de74:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    de84:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    de94:	32221202 43231303                       .."2..#C

0000de9c <g_ui8nCEpins>:
    de9c:	02070707 00080802 01020202 01010101     ................
    deac:	01010101 01010101 01010101 01010101     ................
    debc:	01010101 08010101 01010008 01010101     ................
    decc:	00000101                                ....

0000ded0 <g_am_hal_mcuctrl_flash_size>:
    ded0:	00004000 00008000 00010000 00020000     .@..............
    dee0:	00040000 00080000 00100000 00200000     .............. .
	...

0000df10 <g_am_hal_mcuctrl_sram_size>:
    df10:	00004000 00008000 00010000 00020000     .@..............
    df20:	00040000 00080000 00100000 00060000     ................
	...
