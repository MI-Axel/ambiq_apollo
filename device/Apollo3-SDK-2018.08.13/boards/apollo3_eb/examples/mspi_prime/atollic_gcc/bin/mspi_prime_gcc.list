
mspi_prime_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006490  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000098  10001000  00012490  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000066f8  10001098  00012528  00021098  2**3
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021098  2**0
                  CONTENTS, READONLY
  5 .debug_info   0002c78e  00000000  00000000  000210cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003fe4  00000000  00000000  0004d85d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000131aa  00000000  00000000  00051841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008a8  00000000  00000000  000649eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000022e0  00000000  00000000  00065293  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008d16  00000000  00000000  00067573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000d088  00000000  00000000  00070289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  0007d311  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001a40  00000000  00000000  0007d390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 05 d4 00 00 fd d3 00 00 6d d4 00 00     ............m...
    c010:	6d d4 00 00 6d d4 00 00 6d d4 00 00 00 00 00 00     m...m...m.......
	...
    c02c:	01 d4 00 00 01 d4 00 00 00 00 00 00 01 d4 00 00     ................
    c03c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c04c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c05c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c06c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c07c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c08c:	01 d4 00 00 b1 ce 00 00 01 d4 00 00 01 d4 00 00     ................
    c09c:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c0ac:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c0bc:	01 d4 00 00 01 d4 00 00 01 d4 00 00 01 d4 00 00     ................
    c0cc:	01 d4 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <am_devices_fireball_control>:
//
//*****************************************************************************
uint32_t
am_devices_fireball_control(am_devices_fireball_control_e eControl,
                            void *pArgs)
{
    c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint64_t ui64GPIOLowMask, ui64GPIOHighMask;

    if ( eControl >= AM_DEVICES_FIREBALL_STATE_INVALID )
    c1a4:	2813      	cmp	r0, #19
{
    c1a6:	b083      	sub	sp, #12
    if ( eControl >= AM_DEVICES_FIREBALL_STATE_INVALID )
    c1a8:	d904      	bls.n	c1b4 <am_devices_fireball_control+0x14>
    {
        return 1;
    c1aa:	2401      	movs	r4, #1
        default:
            return 0xdeadbeef;

    } // switch()

} // am_devices_fireball_control()
    c1ac:	4620      	mov	r0, r4
    c1ae:	b003      	add	sp, #12
    c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_pIOM5Handle )
    c1b4:	4dba      	ldr	r5, [pc, #744]	; (c4a0 <am_devices_fireball_control+0x300>)
    c1b6:	682b      	ldr	r3, [r5, #0]
    c1b8:	460e      	mov	r6, r1
    c1ba:	4604      	mov	r4, r0
    c1bc:	2b00      	cmp	r3, #0
    c1be:	f000 84c2 	beq.w	cb46 <am_devices_fireball_control+0x9a6>
    switch ( eControl )
    c1c2:	1e60      	subs	r0, r4, #1
    c1c4:	2812      	cmp	r0, #18
    c1c6:	f200 8523 	bhi.w	cc10 <am_devices_fireball_control+0xa70>
    c1ca:	e8df f010 	tbh	[pc, r0, lsl #1]
    c1ce:	02c8      	.short	0x02c8
    c1d0:	032f02dd 	.word	0x032f02dd
    c1d4:	03bf03a2 	.word	0x03bf03a2
    c1d8:	02f103dc 	.word	0x02f103dc
    c1dc:	00130313 	.word	0x00130313
    c1e0:	028c006e 	.word	0x028c006e
    c1e4:	00e400a9 	.word	0x00e400a9
    c1e8:	015c0120 	.word	0x015c0120
    c1ec:	01d8019c 	.word	0x01d8019c
    c1f0:	02500214 	.word	0x02500214
    g_sFireballTransaction.ui32InstrLen     = 2;
    c1f4:	4fab      	ldr	r7, [pc, #684]	; (c4a4 <am_devices_fireball_control+0x304>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c1f6:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c1f8:	f248 0304 	movw	r3, #32772	; 0x8004
    g_sFireballTransaction.ui32InstrLen     = 2;
    c1fc:	2602      	movs	r6, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c1fe:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c200:	60bb      	str	r3, [r7, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c202:	607e      	str	r6, [r7, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c204:	f003 fa92 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c208:	2800      	cmp	r0, #0
    c20a:	f040 84a4 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c20e:	2001      	movs	r0, #1
    c210:	f002 fd3e 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c214:	f248 0405 	movw	r4, #32773	; 0x8005
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c218:	4639      	mov	r1, r7
    c21a:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c21c:	607e      	str	r6, [r7, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c21e:	60bc      	str	r4, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c220:	f003 fa84 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c224:	2800      	cmp	r0, #0
    c226:	f040 8496 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c22a:	2001      	movs	r0, #1
    c22c:	f002 fd30 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c230:	f248 0206 	movw	r2, #32774	; 0x8006
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c234:	4639      	mov	r1, r7
    c236:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c238:	607e      	str	r6, [r7, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c23a:	60ba      	str	r2, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c23c:	f003 fa76 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c240:	2800      	cmp	r0, #0
    c242:	f040 8488 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c246:	2001      	movs	r0, #1
    c248:	f002 fd22 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c24c:	f248 0307 	movw	r3, #32775	; 0x8007
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c250:	4639      	mov	r1, r7
    c252:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c254:	607e      	str	r6, [r7, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c256:	60bb      	str	r3, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c258:	f003 fa68 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c25c:	2800      	cmp	r0, #0
    c25e:	f040 847a 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c262:	2001      	movs	r0, #1
    c264:	f002 fd14 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c268:	f248 040a 	movw	r4, #32778	; 0x800a
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c26c:	4639      	mov	r1, r7
    c26e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c270:	607e      	str	r6, [r7, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c272:	60bc      	str	r4, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c274:	f003 fa5a 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c278:	2800      	cmp	r0, #0
    c27a:	f040 846c 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c27e:	2001      	movs	r0, #1
    c280:	f002 fd06 	bl	ec90 <am_hal_flash_delay>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c284:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c286:	607e      	str	r6, [r7, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c288:	f248 050b 	movw	r5, #32779	; 0x800b
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c28c:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c28e:	60bd      	str	r5, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c290:	f003 fa4c 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c294:	2800      	cmp	r0, #0
    c296:	f040 845e 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c29a:	2001      	movs	r0, #1
    c29c:	f002 fcf8 	bl	ec90 <am_hal_flash_delay>
    return 0;
    c2a0:	2400      	movs	r4, #0
} // am_devices_fireball_control()
    c2a2:	4620      	mov	r0, r4
    c2a4:	b003      	add	sp, #12
    c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ( eControl )
    c2aa:	f04f 0b00 	mov.w	fp, #0
    c2ae:	f44f 6800 	mov.w	r8, #2048	; 0x800
    c2b2:	f04f 0900 	mov.w	r9, #0
    c2b6:	f44f 669e 	mov.w	r6, #1264	; 0x4f0
    c2ba:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c2bc:	4c79      	ldr	r4, [pc, #484]	; (c4a4 <am_devices_fireball_control+0x304>)
    c2be:	f04f 0a02 	mov.w	sl, #2
    c2c2:	e011      	b.n	c2e8 <am_devices_fireball_control+0x148>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c2c4:	ea58 0309 	orrs.w	r3, r8, r9
    c2c8:	d0ea      	beq.n	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c2ca:	f008 0201 	and.w	r2, r8, #1
    c2ce:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c2d0:	087f      	lsrs	r7, r7, #1
    c2d2:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c2d6:	4313      	orrs	r3, r2
    c2d8:	f040 8422 	bne.w	cb20 <am_devices_fireball_control+0x980>
        ui64GPIOHighMask >>= 1;
    c2dc:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c2e0:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c2e4:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c2e8:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c2ec:	f006 0201 	and.w	r2, r6, #1
    c2f0:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c2f4:	d0e6      	beq.n	c2c4 <am_devices_fireball_control+0x124>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c2f6:	f00b 0c3f 	and.w	ip, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c2fa:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c2fc:	4969      	ldr	r1, [pc, #420]	; (c4a4 <am_devices_fireball_control+0x304>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c2fe:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c302:	d0e2      	beq.n	c2ca <am_devices_fireball_control+0x12a>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c304:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c306:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c30a:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c30e:	f003 fa0d 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c312:	2800      	cmp	r0, #0
    c314:	f040 841f 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c318:	2001      	movs	r0, #1
    c31a:	f002 fcb9 	bl	ec90 <am_hal_flash_delay>
    c31e:	e7d4      	b.n	c2ca <am_devices_fireball_control+0x12a>
    switch ( eControl )
    c320:	f04f 0b00 	mov.w	fp, #0
    c324:	f242 0810 	movw	r8, #8208	; 0x2010
    c328:	f04f 0900 	mov.w	r9, #0
    c32c:	f44f 5681 	mov.w	r6, #4128	; 0x1020
    c330:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c332:	4c5c      	ldr	r4, [pc, #368]	; (c4a4 <am_devices_fireball_control+0x304>)
    c334:	f04f 0a02 	mov.w	sl, #2
    c338:	e011      	b.n	c35e <am_devices_fireball_control+0x1be>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c33a:	ea58 0309 	orrs.w	r3, r8, r9
    c33e:	d0af      	beq.n	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c340:	f008 0201 	and.w	r2, r8, #1
    c344:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c346:	087f      	lsrs	r7, r7, #1
    c348:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c34c:	4313      	orrs	r3, r2
    c34e:	f040 83d5 	bne.w	cafc <am_devices_fireball_control+0x95c>
        ui64GPIOHighMask >>= 1;
    c352:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c356:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c35a:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c35e:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c362:	f006 0201 	and.w	r2, r6, #1
    c366:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c36a:	d0e6      	beq.n	c33a <am_devices_fireball_control+0x19a>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c36c:	f00b 0e3f 	and.w	lr, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c370:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c372:	494c      	ldr	r1, [pc, #304]	; (c4a4 <am_devices_fireball_control+0x304>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c374:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c378:	d0e2      	beq.n	c340 <am_devices_fireball_control+0x1a0>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c37a:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c37c:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c380:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c384:	f003 f9d2 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c388:	2800      	cmp	r0, #0
    c38a:	f040 83e4 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c38e:	2001      	movs	r0, #1
    c390:	f002 fc7e 	bl	ec90 <am_hal_flash_delay>
    c394:	e7d4      	b.n	c340 <am_devices_fireball_control+0x1a0>
    switch ( eControl )
    c396:	f04f 0b00 	mov.w	fp, #0
    c39a:	f241 0810 	movw	r8, #4112	; 0x1010
    c39e:	f04f 0900 	mov.w	r9, #0
    c3a2:	f242 0620 	movw	r6, #8224	; 0x2020
    c3a6:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c3a8:	4c3e      	ldr	r4, [pc, #248]	; (c4a4 <am_devices_fireball_control+0x304>)
    c3aa:	f04f 0a02 	mov.w	sl, #2
    c3ae:	e012      	b.n	c3d6 <am_devices_fireball_control+0x236>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c3b0:	ea58 0309 	orrs.w	r3, r8, r9
    c3b4:	f43f af74 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c3b8:	f008 0201 	and.w	r2, r8, #1
    c3bc:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c3be:	087f      	lsrs	r7, r7, #1
    c3c0:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c3c4:	4313      	orrs	r3, r2
    c3c6:	f040 8387 	bne.w	cad8 <am_devices_fireball_control+0x938>
        ui64GPIOHighMask >>= 1;
    c3ca:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c3ce:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c3d2:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c3d6:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c3da:	f006 0201 	and.w	r2, r6, #1
    c3de:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c3e2:	d0e5      	beq.n	c3b0 <am_devices_fireball_control+0x210>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c3e4:	f00b 0e3f 	and.w	lr, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c3e8:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c3ea:	492e      	ldr	r1, [pc, #184]	; (c4a4 <am_devices_fireball_control+0x304>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c3ec:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c3f0:	d0e2      	beq.n	c3b8 <am_devices_fireball_control+0x218>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c3f2:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c3f4:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c3f8:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c3fc:	f003 f996 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c400:	2800      	cmp	r0, #0
    c402:	f040 83a8 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c406:	2001      	movs	r0, #1
    c408:	f002 fc42 	bl	ec90 <am_hal_flash_delay>
    c40c:	e7d4      	b.n	c3b8 <am_devices_fireball_control+0x218>
    switch ( eControl )
    c40e:	f04f 0b00 	mov.w	fp, #0
    c412:	f04f 0810 	mov.w	r8, #16
    c416:	f04f 0900 	mov.w	r9, #0
    c41a:	f24c 0620 	movw	r6, #49184	; 0xc020
    c41e:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c420:	4c20      	ldr	r4, [pc, #128]	; (c4a4 <am_devices_fireball_control+0x304>)
    c422:	f04f 0a02 	mov.w	sl, #2
    c426:	e012      	b.n	c44e <am_devices_fireball_control+0x2ae>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c428:	ea58 0309 	orrs.w	r3, r8, r9
    c42c:	f43f af38 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c430:	f008 0201 	and.w	r2, r8, #1
    c434:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c436:	087f      	lsrs	r7, r7, #1
    c438:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c43c:	4313      	orrs	r3, r2
    c43e:	f040 8335 	bne.w	caac <am_devices_fireball_control+0x90c>
        ui64GPIOHighMask >>= 1;
    c442:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c446:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c44a:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c44e:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c452:	f006 0201 	and.w	r2, r6, #1
    c456:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c45a:	d0e5      	beq.n	c428 <am_devices_fireball_control+0x288>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c45c:	f00b 0c3f 	and.w	ip, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c460:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c462:	4910      	ldr	r1, [pc, #64]	; (c4a4 <am_devices_fireball_control+0x304>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c464:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c468:	d0e2      	beq.n	c430 <am_devices_fireball_control+0x290>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c46a:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c46c:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c470:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c474:	f003 f95a 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c478:	2800      	cmp	r0, #0
    c47a:	f040 836c 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c47e:	2001      	movs	r0, #1
    c480:	f002 fc06 	bl	ec90 <am_hal_flash_delay>
    c484:	e7d4      	b.n	c430 <am_devices_fireball_control+0x290>
    switch ( eControl )
    c486:	f04f 0b00 	mov.w	fp, #0
    c48a:	f248 0810 	movw	r8, #32784	; 0x8010
    c48e:	f04f 0900 	mov.w	r9, #0
    c492:	f244 0620 	movw	r6, #16416	; 0x4020
    c496:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c498:	4c02      	ldr	r4, [pc, #8]	; (c4a4 <am_devices_fireball_control+0x304>)
    c49a:	f04f 0a02 	mov.w	sl, #2
    c49e:	e016      	b.n	c4ce <am_devices_fireball_control+0x32e>
    c4a0:	10001098 	.word	0x10001098
    c4a4:	100010a0 	.word	0x100010a0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c4a8:	ea58 0309 	orrs.w	r3, r8, r9
    c4ac:	f43f aef8 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c4b0:	f008 0201 	and.w	r2, r8, #1
    c4b4:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c4b6:	087f      	lsrs	r7, r7, #1
    c4b8:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c4bc:	4313      	orrs	r3, r2
    c4be:	f040 82e2 	bne.w	ca86 <am_devices_fireball_control+0x8e6>
        ui64GPIOHighMask >>= 1;
    c4c2:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c4c6:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c4ca:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c4ce:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c4d2:	f006 0201 	and.w	r2, r6, #1
    c4d6:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c4da:	d0e5      	beq.n	c4a8 <am_devices_fireball_control+0x308>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c4dc:	f00b 0e3f 	and.w	lr, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c4e0:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c4e2:	49c2      	ldr	r1, [pc, #776]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c4e4:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c4e8:	d0e2      	beq.n	c4b0 <am_devices_fireball_control+0x310>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c4ea:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c4ec:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c4f0:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c4f4:	f003 f91a 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c4f8:	2800      	cmp	r0, #0
    c4fa:	f040 832c 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c4fe:	2001      	movs	r0, #1
    c500:	f002 fbc6 	bl	ec90 <am_hal_flash_delay>
    c504:	e7d4      	b.n	c4b0 <am_devices_fireball_control+0x310>
    switch ( eControl )
    c506:	f04f 0b00 	mov.w	fp, #0
    c50a:	f244 0810 	movw	r8, #16400	; 0x4010
    c50e:	f04f 0900 	mov.w	r9, #0
    c512:	f248 0620 	movw	r6, #32800	; 0x8020
    c516:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c518:	4cb4      	ldr	r4, [pc, #720]	; (c7ec <am_devices_fireball_control+0x64c>)
    c51a:	f04f 0a02 	mov.w	sl, #2
    c51e:	e012      	b.n	c546 <am_devices_fireball_control+0x3a6>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c520:	ea58 0309 	orrs.w	r3, r8, r9
    c524:	f43f aebc 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c528:	f008 0201 	and.w	r2, r8, #1
    c52c:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c52e:	087f      	lsrs	r7, r7, #1
    c530:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c534:	4313      	orrs	r3, r2
    c536:	f040 8293 	bne.w	ca60 <am_devices_fireball_control+0x8c0>
        ui64GPIOHighMask >>= 1;
    c53a:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c53e:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c542:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c546:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c54a:	f006 0201 	and.w	r2, r6, #1
    c54e:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c552:	d0e5      	beq.n	c520 <am_devices_fireball_control+0x380>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c554:	f00b 0c3f 	and.w	ip, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c558:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c55a:	49a4      	ldr	r1, [pc, #656]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c55c:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c560:	d0e2      	beq.n	c528 <am_devices_fireball_control+0x388>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c562:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c564:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c568:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c56c:	f003 f8de 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c570:	2800      	cmp	r0, #0
    c572:	f040 82f0 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c576:	2001      	movs	r0, #1
    c578:	f002 fb8a 	bl	ec90 <am_hal_flash_delay>
    c57c:	e7d4      	b.n	c528 <am_devices_fireball_control+0x388>
    switch ( eControl )
    c57e:	f04f 0b00 	mov.w	fp, #0
    c582:	f04f 0800 	mov.w	r8, #0
    c586:	f04f 0924 	mov.w	r9, #36	; 0x24
    c58a:	f44f 7640 	mov.w	r6, #768	; 0x300
    c58e:	2718      	movs	r7, #24
    g_sFireballTransaction.ui32InstrLen     = 2;
    c590:	4c96      	ldr	r4, [pc, #600]	; (c7ec <am_devices_fireball_control+0x64c>)
    c592:	f04f 0a02 	mov.w	sl, #2
    c596:	e012      	b.n	c5be <am_devices_fireball_control+0x41e>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c598:	ea58 0309 	orrs.w	r3, r8, r9
    c59c:	f43f ae80 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c5a0:	f008 0201 	and.w	r2, r8, #1
    c5a4:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c5a6:	087f      	lsrs	r7, r7, #1
    c5a8:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c5ac:	4313      	orrs	r3, r2
    c5ae:	f040 8243 	bne.w	ca38 <am_devices_fireball_control+0x898>
        ui64GPIOHighMask >>= 1;
    c5b2:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c5b6:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c5ba:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c5be:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c5c2:	f006 0201 	and.w	r2, r6, #1
    c5c6:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c5ca:	d0e5      	beq.n	c598 <am_devices_fireball_control+0x3f8>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c5cc:	f00b 0e3f 	and.w	lr, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c5d0:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c5d2:	4986      	ldr	r1, [pc, #536]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c5d4:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c5d8:	d0e2      	beq.n	c5a0 <am_devices_fireball_control+0x400>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c5da:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c5dc:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c5e0:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c5e4:	f003 f8a2 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c5e8:	2800      	cmp	r0, #0
    c5ea:	f040 82b4 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c5ee:	2001      	movs	r0, #1
    c5f0:	f002 fb4e 	bl	ec90 <am_hal_flash_delay>
    c5f4:	e7d4      	b.n	c5a0 <am_devices_fireball_control+0x400>
    switch ( eControl )
    c5f6:	f04f 0b00 	mov.w	fp, #0
    c5fa:	f04f 0800 	mov.w	r8, #0
    c5fe:	f04f 0910 	mov.w	r9, #16
    c602:	f44f 7640 	mov.w	r6, #768	; 0x300
    c606:	2720      	movs	r7, #32
    g_sFireballTransaction.ui32InstrLen     = 2;
    c608:	4c78      	ldr	r4, [pc, #480]	; (c7ec <am_devices_fireball_control+0x64c>)
    c60a:	f04f 0a02 	mov.w	sl, #2
    c60e:	e012      	b.n	c636 <am_devices_fireball_control+0x496>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c610:	ea58 0309 	orrs.w	r3, r8, r9
    c614:	f43f ae44 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c618:	f008 0201 	and.w	r2, r8, #1
    c61c:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c61e:	087f      	lsrs	r7, r7, #1
    c620:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c624:	4313      	orrs	r3, r2
    c626:	f040 81f3 	bne.w	ca10 <am_devices_fireball_control+0x870>
        ui64GPIOHighMask >>= 1;
    c62a:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c62e:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c632:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c636:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c63a:	f006 0201 	and.w	r2, r6, #1
    c63e:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c642:	d0e5      	beq.n	c610 <am_devices_fireball_control+0x470>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c644:	f00b 0c3f 	and.w	ip, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c648:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c64a:	4968      	ldr	r1, [pc, #416]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c64c:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c650:	d0e2      	beq.n	c618 <am_devices_fireball_control+0x478>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c652:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c654:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c658:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c65c:	f003 f866 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c660:	2800      	cmp	r0, #0
    c662:	f040 8278 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c666:	2001      	movs	r0, #1
    c668:	f002 fb12 	bl	ec90 <am_hal_flash_delay>
    c66c:	e7d4      	b.n	c618 <am_devices_fireball_control+0x478>
    switch ( eControl )
    c66e:	f04f 0b00 	mov.w	fp, #0
    c672:	f04f 0800 	mov.w	r8, #0
    c676:	f04f 0904 	mov.w	r9, #4
    c67a:	f44f 7640 	mov.w	r6, #768	; 0x300
    c67e:	2738      	movs	r7, #56	; 0x38
    g_sFireballTransaction.ui32InstrLen     = 2;
    c680:	4c5a      	ldr	r4, [pc, #360]	; (c7ec <am_devices_fireball_control+0x64c>)
    c682:	f04f 0a02 	mov.w	sl, #2
    c686:	e012      	b.n	c6ae <am_devices_fireball_control+0x50e>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c688:	ea58 0309 	orrs.w	r3, r8, r9
    c68c:	f43f ae08 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c690:	f008 0201 	and.w	r2, r8, #1
    c694:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c696:	087f      	lsrs	r7, r7, #1
    c698:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c69c:	4313      	orrs	r3, r2
    c69e:	f040 818f 	bne.w	c9c0 <am_devices_fireball_control+0x820>
        ui64GPIOHighMask >>= 1;
    c6a2:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c6a6:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c6aa:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c6ae:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c6b2:	f006 0201 	and.w	r2, r6, #1
    c6b6:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c6ba:	d0e5      	beq.n	c688 <am_devices_fireball_control+0x4e8>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c6bc:	f00b 0e3f 	and.w	lr, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c6c0:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c6c2:	494a      	ldr	r1, [pc, #296]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c6c4:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c6c8:	d0e2      	beq.n	c690 <am_devices_fireball_control+0x4f0>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c6ca:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c6cc:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c6d0:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c6d4:	f003 f82a 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c6d8:	2800      	cmp	r0, #0
    c6da:	f040 823c 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c6de:	2001      	movs	r0, #1
    c6e0:	f002 fad6 	bl	ec90 <am_hal_flash_delay>
    c6e4:	e7d4      	b.n	c690 <am_devices_fireball_control+0x4f0>
    switch ( eControl )
    c6e6:	f04f 0b00 	mov.w	fp, #0
    c6ea:	f04f 0810 	mov.w	r8, #16
    c6ee:	f04f 0900 	mov.w	r9, #0
    c6f2:	f243 0620 	movw	r6, #12320	; 0x3020
    c6f6:	2700      	movs	r7, #0
    g_sFireballTransaction.ui32InstrLen     = 2;
    c6f8:	4c3c      	ldr	r4, [pc, #240]	; (c7ec <am_devices_fireball_control+0x64c>)
    c6fa:	f04f 0a02 	mov.w	sl, #2
    c6fe:	e012      	b.n	c726 <am_devices_fireball_control+0x586>
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c700:	ea58 0309 	orrs.w	r3, r8, r9
    c704:	f43f adcc 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        if ( ui64GPIOHighMask & 0x1 )
    c708:	f008 0201 	and.w	r2, r8, #1
    c70c:	2300      	movs	r3, #0
        ui64GPIOLowMask >>= 1;
    c70e:	087f      	lsrs	r7, r7, #1
    c710:	ea4f 0636 	mov.w	r6, r6, rrx
        if ( ui64GPIOHighMask & 0x1 )
    c714:	4313      	orrs	r3, r2
    c716:	f040 8167 	bne.w	c9e8 <am_devices_fireball_control+0x848>
        ui64GPIOHighMask >>= 1;
    c71a:	ea5f 0959 	movs.w	r9, r9, lsr #1
    c71e:	ea4f 0838 	mov.w	r8, r8, rrx
        ui32GPIOnum++;
    c722:	f10b 0b01 	add.w	fp, fp, #1
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c726:	ea56 0107 	orrs.w	r1, r6, r7
        if ( ui64GPIOLowMask & 0x1 )
    c72a:	f006 0201 	and.w	r2, r6, #1
    c72e:	f04f 0300 	mov.w	r3, #0
    while ( ui64GPIOLowMask  ||  ui64GPIOHighMask )
    c732:	d0e5      	beq.n	c700 <am_devices_fireball_control+0x560>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_LOW, ui32GPIOnum));
    c734:	f00b 003f 	and.w	r0, fp, #63	; 0x3f
        if ( ui64GPIOLowMask & 0x1 )
    c738:	4313      	orrs	r3, r2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c73a:	492c      	ldr	r1, [pc, #176]	; (c7ec <am_devices_fireball_control+0x64c>)
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c73c:	f440 4e00 	orr.w	lr, r0, #32768	; 0x8000
        if ( ui64GPIOLowMask & 0x1 )
    c740:	d0e2      	beq.n	c708 <am_devices_fireball_control+0x568>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c742:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c744:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c748:	f8c4 e008 	str.w	lr, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c74c:	f002 ffee 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c750:	2800      	cmp	r0, #0
    c752:	f040 8200 	bne.w	cb56 <am_devices_fireball_control+0x9b6>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c756:	2001      	movs	r0, #1
    c758:	f002 fa9a 	bl	ec90 <am_hal_flash_delay>
    c75c:	e7d4      	b.n	c708 <am_devices_fireball_control+0x568>
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c75e:	4b24      	ldr	r3, [pc, #144]	; (c7f0 <am_devices_fireball_control+0x650>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c760:	6828      	ldr	r0, [r5, #0]
    g_sFireballReadIDTransaction.ui32NumBytes     = 3;
    c762:	2403      	movs	r4, #3
    g_sFireballReadIDTransaction.pui32RxBuffer    = pui32ID;
    c764:	aa01      	add	r2, sp, #4
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c766:	2701      	movs	r7, #1
    g_sFireballReadIDTransaction.ui32Instr        = 0x00 | FIRBBALL_OFFSET_ID;
    c768:	2540      	movs	r5, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c76a:	4619      	mov	r1, r3
    g_sFireballReadIDTransaction.ui32NumBytes     = 3;
    c76c:	60dc      	str	r4, [r3, #12]
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c76e:	605f      	str	r7, [r3, #4]
    g_sFireballReadIDTransaction.ui32Instr        = 0x00 | FIRBBALL_OFFSET_ID;
    c770:	609d      	str	r5, [r3, #8]
    g_sFireballReadIDTransaction.pui32RxBuffer    = pui32ID;
    c772:	619a      	str	r2, [r3, #24]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c774:	f002 ffda 	bl	f72c <am_hal_iom_blocking_transfer>
            ui32Val = ui32Ret ? 0 : ui32Val & 0xFFFF;
    c778:	4604      	mov	r4, r0
    c77a:	2800      	cmp	r0, #0
    c77c:	f040 8246 	bne.w	cc0c <am_devices_fireball_control+0xa6c>
    c780:	f8bd 0004 	ldrh.w	r0, [sp, #4]
            *((uint32_t*)pArgs) = ui32Val;
    c784:	6030      	str	r0, [r6, #0]
            return ui32Ret;
    c786:	e511      	b.n	c1ac <am_devices_fireball_control+0xc>
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c788:	4b19      	ldr	r3, [pc, #100]	; (c7f0 <am_devices_fireball_control+0x650>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c78a:	6828      	ldr	r0, [r5, #0]
    g_sFireballReadIDTransaction.ui32NumBytes     = 3;
    c78c:	2403      	movs	r4, #3
    g_sFireballReadIDTransaction.pui32RxBuffer    = pui32ID;
    c78e:	aa01      	add	r2, sp, #4
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c790:	2701      	movs	r7, #1
    g_sFireballReadIDTransaction.ui32Instr        = 0x00 | FIRBBALL_OFFSET_ID;
    c792:	2540      	movs	r5, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c794:	4619      	mov	r1, r3
    g_sFireballReadIDTransaction.ui32NumBytes     = 3;
    c796:	60dc      	str	r4, [r3, #12]
    g_sFireballReadIDTransaction.ui32InstrLen     = 1;
    c798:	605f      	str	r7, [r3, #4]
    g_sFireballReadIDTransaction.ui32Instr        = 0x00 | FIRBBALL_OFFSET_ID;
    c79a:	609d      	str	r5, [r3, #8]
    g_sFireballReadIDTransaction.pui32RxBuffer    = pui32ID;
    c79c:	619a      	str	r2, [r3, #24]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c79e:	f002 ffc5 	bl	f72c <am_hal_iom_blocking_transfer>
            ui32Val = ui32Ret ? 0 : (ui32Val >> 16) & 0xFF;
    c7a2:	4604      	mov	r4, r0
    c7a4:	2800      	cmp	r0, #0
    c7a6:	f040 8231 	bne.w	cc0c <am_devices_fireball_control+0xa6c>
    c7aa:	f89d 0006 	ldrb.w	r0, [sp, #6]
    c7ae:	e7e9      	b.n	c784 <am_devices_fireball_control+0x5e4>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7b0:	4c0e      	ldr	r4, [pc, #56]	; (c7ec <am_devices_fireball_control+0x64c>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7b2:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c7b4:	f248 0768 	movw	r7, #32872	; 0x8068
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7b8:	2602      	movs	r6, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7ba:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c7bc:	60a7      	str	r7, [r4, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7be:	6066      	str	r6, [r4, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7c0:	f002 ffb4 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c7c4:	2800      	cmp	r0, #0
    c7c6:	f47f acf0 	bne.w	c1aa <am_devices_fireball_control+0xa>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c7ca:	f643 6057 	movw	r0, #15959	; 0x3e57
    c7ce:	f002 fa5f 	bl	ec90 <am_hal_flash_delay>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7d2:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7d4:	6066      	str	r6, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c7d6:	f248 0528 	movw	r5, #32808	; 0x8028
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7da:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c7dc:	60a5      	str	r5, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7de:	f002 ffa5 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Deassert, ui32GPIO)) )
    c7e2:	2800      	cmp	r0, #0
    c7e4:	f43f ad5c 	beq.w	c2a0 <am_devices_fireball_control+0x100>
        return 3;
    c7e8:	2403      	movs	r4, #3
    c7ea:	e4df      	b.n	c1ac <am_devices_fireball_control+0xc>
    c7ec:	100010a0 	.word	0x100010a0
    c7f0:	10001000 	.word	0x10001000
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7f4:	4fb7      	ldr	r7, [pc, #732]	; (cad4 <am_devices_fireball_control+0x934>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7f6:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c7f8:	f248 0267 	movw	r2, #32871	; 0x8067
    g_sFireballTransaction.ui32InstrLen     = 2;
    c7fc:	2602      	movs	r6, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c7fe:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c800:	60ba      	str	r2, [r7, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c802:	607e      	str	r6, [r7, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c804:	f002 ff92 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c808:	2800      	cmp	r0, #0
    c80a:	f47f acce 	bne.w	c1aa <am_devices_fireball_control+0xa>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c80e:	f643 6057 	movw	r0, #15959	; 0x3e57
    c812:	f002 fa3d 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c816:	f248 0327 	movw	r3, #32807	; 0x8027
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c81a:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c81c:	607e      	str	r6, [r7, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c81e:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c820:	60bb      	str	r3, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c822:	f002 ff83 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Deassert, ui32GPIO)) )
    c826:	2800      	cmp	r0, #0
    c828:	d1de      	bne.n	c7e8 <am_devices_fireball_control+0x648>
    c82a:	e539      	b.n	c2a0 <am_devices_fireball_control+0x100>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c82c:	4ea9      	ldr	r6, [pc, #676]	; (cad4 <am_devices_fireball_control+0x934>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c82e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c830:	f248 072b 	movw	r7, #32811	; 0x802b
    g_sFireballTransaction.ui32InstrLen     = 2;
    c834:	2402      	movs	r4, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c836:	4631      	mov	r1, r6
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c838:	60b7      	str	r7, [r6, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c83a:	6074      	str	r4, [r6, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c83c:	f002 ff76 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c840:	b958      	cbnz	r0, c85a <am_devices_fireball_control+0x6ba>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c842:	f643 6057 	movw	r0, #15959	; 0x3e57
    c846:	f002 fa23 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c84a:	f248 036b 	movw	r3, #32875	; 0x806b
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c84e:	4631      	mov	r1, r6
    c850:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c852:	6074      	str	r4, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c854:	60b3      	str	r3, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c856:	f002 ff69 	bl	f72c <am_hal_iom_blocking_transfer>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c85a:	2702      	movs	r7, #2
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c85c:	f248 022a 	movw	r2, #32810	; 0x802a
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c860:	499c      	ldr	r1, [pc, #624]	; (cad4 <am_devices_fireball_control+0x934>)
    c862:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c864:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c866:	60b2      	str	r2, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c868:	f002 ff60 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c86c:	b958      	cbnz	r0, c886 <am_devices_fireball_control+0x6e6>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c86e:	f643 6057 	movw	r0, #15959	; 0x3e57
    c872:	f002 fa0d 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c876:	f248 046a 	movw	r4, #32874	; 0x806a
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c87a:	4996      	ldr	r1, [pc, #600]	; (cad4 <am_devices_fireball_control+0x934>)
    c87c:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c87e:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c880:	60b4      	str	r4, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c882:	f002 ff53 	bl	f72c <am_hal_iom_blocking_transfer>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c886:	2702      	movs	r7, #2
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c888:	f248 0329 	movw	r3, #32809	; 0x8029
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c88c:	4991      	ldr	r1, [pc, #580]	; (cad4 <am_devices_fireball_control+0x934>)
    c88e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c890:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c892:	60b3      	str	r3, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c894:	f002 ff4a 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c898:	b958      	cbnz	r0, c8b2 <am_devices_fireball_control+0x712>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c89a:	f643 6057 	movw	r0, #15959	; 0x3e57
    c89e:	f002 f9f7 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8a2:	f248 0269 	movw	r2, #32873	; 0x8069
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8a6:	498b      	ldr	r1, [pc, #556]	; (cad4 <am_devices_fireball_control+0x934>)
    c8a8:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8aa:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8ac:	60b2      	str	r2, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8ae:	f002 ff3d 	bl	f72c <am_hal_iom_blocking_transfer>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8b2:	2402      	movs	r4, #2
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8b4:	f248 0768 	movw	r7, #32872	; 0x8068
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8b8:	4986      	ldr	r1, [pc, #536]	; (cad4 <am_devices_fireball_control+0x934>)
    c8ba:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8bc:	6074      	str	r4, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8be:	60b7      	str	r7, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8c0:	f002 ff34 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c8c4:	b958      	cbnz	r0, c8de <am_devices_fireball_control+0x73e>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c8c6:	f643 6057 	movw	r0, #15959	; 0x3e57
    c8ca:	f002 f9e1 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8ce:	f248 0328 	movw	r3, #32808	; 0x8028
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8d2:	4980      	ldr	r1, [pc, #512]	; (cad4 <am_devices_fireball_control+0x934>)
    c8d4:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8d6:	6074      	str	r4, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8d8:	60b3      	str	r3, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8da:	f002 ff27 	bl	f72c <am_hal_iom_blocking_transfer>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8de:	f248 0267 	movw	r2, #32871	; 0x8067
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8e2:	2702      	movs	r7, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8e4:	497b      	ldr	r1, [pc, #492]	; (cad4 <am_devices_fireball_control+0x934>)
    c8e6:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c8e8:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c8ea:	60b2      	str	r2, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c8ec:	f002 ff1e 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c8f0:	4604      	mov	r4, r0
    c8f2:	2800      	cmp	r0, #0
    c8f4:	f47f acd4 	bne.w	c2a0 <am_devices_fireball_control+0x100>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c8f8:	f643 6057 	movw	r0, #15959	; 0x3e57
    c8fc:	f002 f9c8 	bl	ec90 <am_hal_flash_delay>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c900:	6828      	ldr	r0, [r5, #0]
    c902:	4974      	ldr	r1, [pc, #464]	; (cad4 <am_devices_fireball_control+0x934>)
    g_sFireballTransaction.ui32InstrLen     = 2;
    c904:	6077      	str	r7, [r6, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c906:	f248 0527 	movw	r5, #32807	; 0x8027
    c90a:	60b5      	str	r5, [r6, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c90c:	f002 ff0e 	bl	f72c <am_hal_iom_blocking_transfer>
    c910:	e44c      	b.n	c1ac <am_devices_fireball_control+0xc>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c912:	4f70      	ldr	r7, [pc, #448]	; (cad4 <am_devices_fireball_control+0x934>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c914:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c916:	f248 032b 	movw	r3, #32811	; 0x802b
    g_sFireballTransaction.ui32InstrLen     = 2;
    c91a:	2402      	movs	r4, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c91c:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c91e:	60bb      	str	r3, [r7, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c920:	607c      	str	r4, [r7, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c922:	f002 ff03 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c926:	2800      	cmp	r0, #0
    c928:	f47f ac3f 	bne.w	c1aa <am_devices_fireball_control+0xa>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c92c:	f643 6057 	movw	r0, #15959	; 0x3e57
    c930:	f002 f9ae 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c934:	f248 026b 	movw	r2, #32875	; 0x806b
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c938:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c93a:	607c      	str	r4, [r7, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c93c:	4639      	mov	r1, r7
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c93e:	60ba      	str	r2, [r7, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c940:	f002 fef4 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Deassert, ui32GPIO)) )
    c944:	2800      	cmp	r0, #0
    c946:	f47f af4f 	bne.w	c7e8 <am_devices_fireball_control+0x648>
    c94a:	e4a9      	b.n	c2a0 <am_devices_fireball_control+0x100>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c94c:	4c61      	ldr	r4, [pc, #388]	; (cad4 <am_devices_fireball_control+0x934>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c94e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c950:	f248 022a 	movw	r2, #32810	; 0x802a
    g_sFireballTransaction.ui32InstrLen     = 2;
    c954:	2602      	movs	r6, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c956:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c958:	60a2      	str	r2, [r4, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c95a:	6066      	str	r6, [r4, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c95c:	f002 fee6 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c960:	2800      	cmp	r0, #0
    c962:	f47f ac22 	bne.w	c1aa <am_devices_fireball_control+0xa>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c966:	f643 6057 	movw	r0, #15959	; 0x3e57
    c96a:	f002 f991 	bl	ec90 <am_hal_flash_delay>
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c96e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c970:	6066      	str	r6, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c972:	f248 056a 	movw	r5, #32874	; 0x806a
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c976:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c978:	60a5      	str	r5, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c97a:	f002 fed7 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Deassert, ui32GPIO)) )
    c97e:	2800      	cmp	r0, #0
    c980:	f47f af32 	bne.w	c7e8 <am_devices_fireball_control+0x648>
    c984:	e48c      	b.n	c2a0 <am_devices_fireball_control+0x100>
    g_sFireballTransaction.ui32InstrLen     = 2;
    c986:	4c53      	ldr	r4, [pc, #332]	; (cad4 <am_devices_fireball_control+0x934>)
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c988:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c98a:	f248 0229 	movw	r2, #32809	; 0x8029
    g_sFireballTransaction.ui32InstrLen     = 2;
    c98e:	2702      	movs	r7, #2
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c990:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c992:	60a2      	str	r2, [r4, #8]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c994:	6067      	str	r7, [r4, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c996:	f002 fec9 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Assert, ui32GPIO)) )
    c99a:	2800      	cmp	r0, #0
    c99c:	f47f ac05 	bne.w	c1aa <am_devices_fireball_control+0xa>
    am_hal_flash_delay(FLASH_CYCLES_US(1000));
    c9a0:	f643 6057 	movw	r0, #15959	; 0x3e57
    c9a4:	f002 f974 	bl	ec90 <am_hal_flash_delay>
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9a8:	f248 0369 	movw	r3, #32873	; 0x8069
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9ac:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c9ae:	6067      	str	r7, [r4, #4]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9b0:	4621      	mov	r1, r4
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9b2:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9b4:	f002 feba 	bl	f72c <am_hal_iom_blocking_transfer>
    if ( fireball_write_cmd(FB_CMD(ui32Deassert, ui32GPIO)) )
    c9b8:	2800      	cmp	r0, #0
    c9ba:	f47f af15 	bne.w	c7e8 <am_devices_fireball_control+0x648>
    c9be:	e46f      	b.n	c2a0 <am_devices_fireball_control+0x100>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    c9c0:	f00b 023f 	and.w	r2, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9c4:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
    c9c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9cc:	4941      	ldr	r1, [pc, #260]	; (cad4 <am_devices_fireball_control+0x934>)
    c9ce:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c9d0:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9d4:	60a2      	str	r2, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9d6:	f002 fea9 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    c9da:	2800      	cmp	r0, #0
    c9dc:	f040 80bf 	bne.w	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    c9e0:	2001      	movs	r0, #1
    c9e2:	f002 f955 	bl	ec90 <am_hal_flash_delay>
    c9e6:	e65c      	b.n	c6a2 <am_devices_fireball_control+0x502>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    c9e8:	f00b 013f 	and.w	r1, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9ec:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
    c9f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9f4:	4937      	ldr	r1, [pc, #220]	; (cad4 <am_devices_fireball_control+0x934>)
    c9f6:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    c9f8:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    c9fc:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    c9fe:	f002 fe95 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    ca02:	2800      	cmp	r0, #0
    ca04:	f040 80ab 	bne.w	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ca08:	2001      	movs	r0, #1
    ca0a:	f002 f941 	bl	ec90 <am_hal_flash_delay>
    ca0e:	e684      	b.n	c71a <am_devices_fireball_control+0x57a>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    ca10:	f00b 013f 	and.w	r1, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca14:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
    ca18:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca1c:	492d      	ldr	r1, [pc, #180]	; (cad4 <am_devices_fireball_control+0x934>)
    ca1e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    ca20:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca24:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca26:	f002 fe81 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    ca2a:	2800      	cmp	r0, #0
    ca2c:	f040 8097 	bne.w	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ca30:	2001      	movs	r0, #1
    ca32:	f002 f92d 	bl	ec90 <am_hal_flash_delay>
    ca36:	e5f8      	b.n	c62a <am_devices_fireball_control+0x48a>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    ca38:	f00b 023f 	and.w	r2, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca3c:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
    ca40:	f041 0340 	orr.w	r3, r1, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca44:	6828      	ldr	r0, [r5, #0]
    ca46:	4923      	ldr	r1, [pc, #140]	; (cad4 <am_devices_fireball_control+0x934>)
    g_sFireballTransaction.ui32InstrLen     = 2;
    ca48:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca4c:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca4e:	f002 fe6d 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    ca52:	2800      	cmp	r0, #0
    ca54:	f040 8083 	bne.w	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ca58:	2001      	movs	r0, #1
    ca5a:	f002 f919 	bl	ec90 <am_hal_flash_delay>
    ca5e:	e5a8      	b.n	c5b2 <am_devices_fireball_control+0x412>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    ca60:	f00b 003f 	and.w	r0, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca64:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
    ca68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca6c:	4919      	ldr	r1, [pc, #100]	; (cad4 <am_devices_fireball_control+0x934>)
    ca6e:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    ca70:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca74:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca76:	f002 fe59 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    ca7a:	2800      	cmp	r0, #0
    ca7c:	d16f      	bne.n	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ca7e:	2001      	movs	r0, #1
    ca80:	f002 f906 	bl	ec90 <am_hal_flash_delay>
    ca84:	e559      	b.n	c53a <am_devices_fireball_control+0x39a>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    ca86:	f00b 013f 	and.w	r1, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca8a:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
    ca8e:	f040 0240 	orr.w	r2, r0, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca92:	4910      	ldr	r1, [pc, #64]	; (cad4 <am_devices_fireball_control+0x934>)
    ca94:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    ca96:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    ca9a:	60a2      	str	r2, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    ca9c:	f002 fe46 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    caa0:	2800      	cmp	r0, #0
    caa2:	d15c      	bne.n	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    caa4:	2001      	movs	r0, #1
    caa6:	f002 f8f3 	bl	ec90 <am_hal_flash_delay>
    caaa:	e50a      	b.n	c4c2 <am_devices_fireball_control+0x322>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    caac:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cab0:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
    cab4:	f041 0240 	orr.w	r2, r1, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cab8:	6828      	ldr	r0, [r5, #0]
    caba:	4906      	ldr	r1, [pc, #24]	; (cad4 <am_devices_fireball_control+0x934>)
    g_sFireballTransaction.ui32InstrLen     = 2;
    cabc:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cac0:	60a2      	str	r2, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cac2:	f002 fe33 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    cac6:	2800      	cmp	r0, #0
    cac8:	d149      	bne.n	cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    caca:	2001      	movs	r0, #1
    cacc:	f002 f8e0 	bl	ec90 <am_hal_flash_delay>
    cad0:	e4b7      	b.n	c442 <am_devices_fireball_control+0x2a2>
    cad2:	bf00      	nop
    cad4:	100010a0 	.word	0x100010a0
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    cad8:	f00b 003f 	and.w	r0, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cadc:	f440 4c00 	orr.w	ip, r0, #32768	; 0x8000
    cae0:	f04c 0340 	orr.w	r3, ip, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cae4:	494c      	ldr	r1, [pc, #304]	; (cc18 <am_devices_fireball_control+0xa78>)
    cae6:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    cae8:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    caec:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    caee:	f002 fe1d 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    caf2:	bba0      	cbnz	r0, cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    caf4:	2001      	movs	r0, #1
    caf6:	f002 f8cb 	bl	ec90 <am_hal_flash_delay>
    cafa:	e466      	b.n	c3ca <am_devices_fireball_control+0x22a>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    cafc:	f00b 013f 	and.w	r1, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cb00:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
    cb04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cb08:	4943      	ldr	r1, [pc, #268]	; (cc18 <am_devices_fireball_control+0xa78>)
    cb0a:	6828      	ldr	r0, [r5, #0]
    g_sFireballTransaction.ui32InstrLen     = 2;
    cb0c:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cb10:	60a3      	str	r3, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cb12:	f002 fe0b 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    cb16:	bb10      	cbnz	r0, cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    cb18:	2001      	movs	r0, #1
    cb1a:	f002 f8b9 	bl	ec90 <am_hal_flash_delay>
    cb1e:	e418      	b.n	c352 <am_devices_fireball_control+0x1b2>
            ui32Ret = fireball_write_cmd(FB_CMD(FB_OP_HI, ui32GPIOnum));
    cb20:	f00b 003f 	and.w	r0, fp, #63	; 0x3f
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cb24:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
    cb28:	f041 0240 	orr.w	r2, r1, #64	; 0x40
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cb2c:	6828      	ldr	r0, [r5, #0]
    cb2e:	493a      	ldr	r1, [pc, #232]	; (cc18 <am_devices_fireball_control+0xa78>)
    g_sFireballTransaction.ui32InstrLen     = 2;
    cb30:	f8c4 a004 	str.w	sl, [r4, #4]
    g_sFireballTransaction.ui32Instr        = (0x80 << 8) |
    cb34:	60a2      	str	r2, [r4, #8]
    return am_hal_iom_blocking_transfer(g_pIOM5Handle,
    cb36:	f002 fdf9 	bl	f72c <am_hal_iom_blocking_transfer>
            if ( ui32Ret )
    cb3a:	b980      	cbnz	r0, cb5e <am_devices_fireball_control+0x9be>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    cb3c:	2001      	movs	r0, #1
    cb3e:	f002 f8a7 	bl	ec90 <am_hal_flash_delay>
    cb42:	f7ff bbcb 	b.w	c2dc <am_devices_fireball_control+0x13c>
    if ( am_hal_iom_initialize(ui32Module, &g_pIOM5Handle)                  ||
    cb46:	4629      	mov	r1, r5
    cb48:	2005      	movs	r0, #5
    cb4a:	f002 fb97 	bl	f27c <am_hal_iom_initialize>
    cb4e:	b150      	cbz	r0, cb66 <am_devices_fireball_control+0x9c6>
        return 2;
    cb50:	2402      	movs	r4, #2
    cb52:	f7ff bb2b 	b.w	c1ac <am_devices_fireball_control+0xc>
                return (1 << 8) | ui32Ret;
    cb56:	f440 7480 	orr.w	r4, r0, #256	; 0x100
    cb5a:	f7ff bb27 	b.w	c1ac <am_devices_fireball_control+0xc>
                return (2 << 8) | ui32Ret;
    cb5e:	f440 7400 	orr.w	r4, r0, #512	; 0x200
    cb62:	f7ff bb23 	b.w	c1ac <am_devices_fireball_control+0xc>
         am_hal_iom_power_ctrl(g_pIOM5Handle, AM_HAL_SYSCTRL_WAKE, false)   ||
    cb66:	4602      	mov	r2, r0
    cb68:	4601      	mov	r1, r0
    cb6a:	6828      	ldr	r0, [r5, #0]
    cb6c:	f002 fc04 	bl	f378 <am_hal_iom_power_ctrl>
    if ( am_hal_iom_initialize(ui32Module, &g_pIOM5Handle)                  ||
    cb70:	2800      	cmp	r0, #0
    cb72:	d1ed      	bne.n	cb50 <am_devices_fireball_control+0x9b0>
         am_hal_iom_configure(g_pIOM5Handle,
    cb74:	4929      	ldr	r1, [pc, #164]	; (cc1c <am_devices_fireball_control+0xa7c>)
    cb76:	6828      	ldr	r0, [r5, #0]
    cb78:	f002 fcb4 	bl	f4e4 <am_hal_iom_configure>
         am_hal_iom_power_ctrl(g_pIOM5Handle, AM_HAL_SYSCTRL_WAKE, false)   ||
    cb7c:	2800      	cmp	r0, #0
    cb7e:	d1e7      	bne.n	cb50 <am_devices_fireball_control+0x9b0>
         am_hal_iom_enable(g_pIOM5Handle))
    cb80:	6828      	ldr	r0, [r5, #0]
    cb82:	f002 fba3 	bl	f2cc <am_hal_iom_enable>
                              (am_hal_iom_config_t*)&g_FireballIOM5Config)  ||
    cb86:	4607      	mov	r7, r0
    cb88:	2800      	cmp	r0, #0
    cb8a:	d1e1      	bne.n	cb50 <am_devices_fireball_control+0x9b0>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM5_SCK,    g_AM_BSP_GPIO_IOM5_SCK);
    cb8c:	4924      	ldr	r1, [pc, #144]	; (cc20 <am_devices_fireball_control+0xa80>)
    cb8e:	2030      	movs	r0, #48	; 0x30
    cb90:	6809      	ldr	r1, [r1, #0]
    cb92:	f002 f9ad 	bl	eef0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM5_MISO,   g_AM_BSP_GPIO_IOM5_MISO);
    cb96:	4a23      	ldr	r2, [pc, #140]	; (cc24 <am_devices_fireball_control+0xa84>)
    cb98:	2031      	movs	r0, #49	; 0x31
    cb9a:	6811      	ldr	r1, [r2, #0]
    cb9c:	f002 f9a8 	bl	eef0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM5_MOSI,   g_AM_BSP_GPIO_IOM5_MOSI);
    cba0:	4b21      	ldr	r3, [pc, #132]	; (cc28 <am_devices_fireball_control+0xa88>)
    cba2:	202f      	movs	r0, #47	; 0x2f
    cba4:	6819      	ldr	r1, [r3, #0]
    cba6:	f002 f9a3 	bl	eef0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_FIREBALL_CE, g_AM_BSP_GPIO_FIREBALL_CE);
    cbaa:	4920      	ldr	r1, [pc, #128]	; (cc2c <am_devices_fireball_control+0xa8c>)
    cbac:	201e      	movs	r0, #30
    cbae:	6809      	ldr	r1, [r1, #0]
    cbb0:	f002 f99e 	bl	eef0 <am_hal_gpio_pinconfig>
    g_sFireballTransaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_FIREBALL_CE_CHNL;
    cbb4:	f8df c060 	ldr.w	ip, [pc, #96]	; cc18 <am_devices_fireball_control+0xa78>
    g_sFireballReadIDTransaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_FIREBALL_CE_CHNL;
    cbb8:	f8df e078 	ldr.w	lr, [pc, #120]	; cc34 <am_devices_fireball_control+0xa94>
    g_sFireballTransaction.eDirection       = AM_HAL_IOM_TX;
    cbbc:	f88c 7010 	strb.w	r7, [ip, #16]
    g_sFireballTransaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_FIREBALL_CE_CHNL;
    cbc0:	2003      	movs	r0, #3
    cbc2:	2100      	movs	r1, #0
    cbc4:	2200      	movs	r2, #0
    cbc6:	2300      	movs	r3, #0
    g_sFireballReadIDTransaction.eDirection       = AM_HAL_IOM_RX;
    cbc8:	f04f 0801 	mov.w	r8, #1
    g_sFireballTransaction.pui32TxBuffer    = 0;
    cbcc:	f8cc 7014 	str.w	r7, [ip, #20]
    g_sFireballTransaction.pui32RxBuffer    = 0;
    cbd0:	f8cc 7018 	str.w	r7, [ip, #24]
    g_sFireballTransaction.bContinue        = false;
    cbd4:	f88c 701c 	strb.w	r7, [ip, #28]
    g_sFireballTransaction.ui8RepeatCount   = 0;
    cbd8:	f88c 701d 	strb.w	r7, [ip, #29]
    g_sFireballTransaction.ui8Priority      = 0;
    cbdc:	f88c 701e 	strb.w	r7, [ip, #30]
    g_sFireballTransaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_FIREBALL_CE_CHNL;
    cbe0:	e9cc 0100 	strd	r0, r1, [ip]
    cbe4:	e9cc 2302 	strd	r2, r3, [ip, #8]
    g_sFireballReadIDTransaction.uPeerInfo.ui32SpiChipSelect = AM_BSP_FIREBALL_CE_CHNL;
    cbe8:	e9ce 0100 	strd	r0, r1, [lr]
    cbec:	e9ce 2302 	strd	r2, r3, [lr, #8]
    g_sFireballReadIDTransaction.pui32TxBuffer    = 0;
    cbf0:	f8ce 7014 	str.w	r7, [lr, #20]
    g_sFireballReadIDTransaction.pui32RxBuffer    = 0;
    cbf4:	f8ce 7018 	str.w	r7, [lr, #24]
    g_sFireballReadIDTransaction.bContinue        = false;
    cbf8:	f88e 701c 	strb.w	r7, [lr, #28]
    g_sFireballReadIDTransaction.ui8RepeatCount   = 0;
    cbfc:	f88e 701d 	strb.w	r7, [lr, #29]
    g_sFireballReadIDTransaction.ui8Priority      = 0;
    cc00:	f88e 701e 	strb.w	r7, [lr, #30]
    g_sFireballReadIDTransaction.eDirection       = AM_HAL_IOM_RX;
    cc04:	f88e 8010 	strb.w	r8, [lr, #16]
    cc08:	f7ff badb 	b.w	c1c2 <am_devices_fireball_control+0x22>
            ui32Val = ui32Ret ? 0 : (ui32Val >> 16) & 0xFF;
    cc0c:	2000      	movs	r0, #0
    cc0e:	e5b9      	b.n	c784 <am_devices_fireball_control+0x5e4>
            return 0xdeadbeef;
    cc10:	4c07      	ldr	r4, [pc, #28]	; (cc30 <am_devices_fireball_control+0xa90>)
    cc12:	f7ff bacb 	b.w	c1ac <am_devices_fireball_control+0xc>
    cc16:	bf00      	nop
    cc18:	100010a0 	.word	0x100010a0
    cc1c:	00011da8 	.word	0x00011da8
    cc20:	00012080 	.word	0x00012080
    cc24:	00012078 	.word	0x00012078
    cc28:	0001207c 	.word	0x0001207c
    cc2c:	00012074 	.word	0x00012074
    cc30:	deadbeef 	.word	0xdeadbeef
    cc34:	10001000 	.word	0x10001000

0000cc38 <am_device_init_flash>:
#if defined (CYPRESS_S25FS064S)
//
// Device specific initialization function.
//
uint32_t am_device_init_flash(am_hal_mspi_dev_config_t *psMSPISettings)
{
    cc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_PIOTransaction.bSendInstr         = true;
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    g_PIOTransaction.bTurnaround        = false;
    g_PIOTransaction.bContinue          = false;

    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc3c:	4f93      	ldr	r7, [pc, #588]	; (ce8c <am_device_init_flash+0x254>)
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cc3e:	4c94      	ldr	r4, [pc, #592]	; (ce90 <am_device_init_flash+0x258>)
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc40:	797b      	ldrb	r3, [r7, #5]
    }

    g_PIOTransaction.pui32Buffer        = pData;

    // Execute the transction over MSPI.
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cc42:	4e94      	ldr	r6, [pc, #592]	; (ce94 <am_device_init_flash+0x25c>)
    g_PIOTransaction.pui32Buffer        = pData;
    cc44:	4d94      	ldr	r5, [pc, #592]	; (ce98 <am_device_init_flash+0x260>)
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cc46:	4a95      	ldr	r2, [pc, #596]	; (ce9c <am_device_init_flash+0x264>)
    g_PIOTransaction.pui32Buffer        = pData;
    cc48:	6165      	str	r5, [r4, #20]
{
    cc4a:	4681      	mov	r9, r0
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc4c:	f1a3 000f 	sub.w	r0, r3, #15
    cc50:	fab0 f180 	clz	r1, r0
    cc54:	0948      	lsrs	r0, r1, #5
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cc56:	2300      	movs	r3, #0
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cc58:	f04f 0b01 	mov.w	fp, #1
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cc5c:	f04f 0806 	mov.w	r8, #6
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc60:	7460      	strb	r0, [r4, #17]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cc62:	4621      	mov	r1, r4
    cc64:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cc66:	6023      	str	r3, [r4, #0]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cc68:	71a3      	strb	r3, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cc6a:	60a3      	str	r3, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cc6c:	7423      	strb	r3, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cc6e:	74a3      	strb	r3, [r4, #18]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cc70:	f884 b005 	strb.w	fp, [r4, #5]
    g_PIOTransaction.bSendInstr         = true;
    cc74:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cc78:	f8a4 800e 	strh.w	r8, [r4, #14]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cc7c:	f003 fafe 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cc80:	b110      	cbz	r0, cc88 <am_device_init_flash+0x50>
        return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    cc82:	2001      	movs	r0, #1
    cc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc88:	f897 c005 	ldrb.w	ip, [r7, #5]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR1V | AM_DEVICES_MSPI_FLASH_CR1V_VALUE(AM_DEVICES_MSPI_FLASH_SERIAL_MODE);
    cc8c:	4b84      	ldr	r3, [pc, #528]	; (cea0 <am_device_init_flash+0x268>)
    cc8e:	602b      	str	r3, [r5, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cc90:	f1ac 0a0f 	sub.w	sl, ip, #15
    cc94:	4601      	mov	r1, r0
    cc96:	faba fe8a 	clz	lr, sl
    cc9a:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cc9e:	71a1      	strb	r1, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cca0:	60a1      	str	r1, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cca2:	7421      	strb	r1, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cca4:	74a1      	strb	r1, [r4, #18]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cca6:	2304      	movs	r3, #4
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cca8:	4621      	mov	r1, r4
    ccaa:	4a7c      	ldr	r2, [pc, #496]	; (ce9c <am_device_init_flash+0x264>)
    ccac:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    ccae:	f884 b005 	strb.w	fp, [r4, #5]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    ccb2:	f04f 0a71 	mov.w	sl, #113	; 0x71
    g_PIOTransaction.bSendInstr         = true;
    ccb6:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.pui32Buffer        = pData;
    ccba:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ccbc:	f884 c011 	strb.w	ip, [r4, #17]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    ccc0:	6023      	str	r3, [r4, #0]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    ccc2:	f8a4 a00e 	strh.w	sl, [r4, #14]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ccc6:	f003 fad9 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    ccca:	4601      	mov	r1, r0
    cccc:	2800      	cmp	r0, #0
    ccce:	d1d8      	bne.n	cc82 <am_device_init_flash+0x4a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ccd0:	797b      	ldrb	r3, [r7, #5]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    ccd2:	6021      	str	r1, [r4, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ccd4:	f1a3 030f 	sub.w	r3, r3, #15
    ccd8:	fab3 f383 	clz	r3, r3
    ccdc:	095b      	lsrs	r3, r3, #5
    g_PIOTransaction.bSendAddr          = bSendAddr;
    ccde:	71a1      	strb	r1, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cce0:	60a1      	str	r1, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cce2:	7421      	strb	r1, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cce4:	74a1      	strb	r1, [r4, #18]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cce6:	4a6d      	ldr	r2, [pc, #436]	; (ce9c <am_device_init_flash+0x264>)
    cce8:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    ccea:	f884 b005 	strb.w	fp, [r4, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ccee:	4621      	mov	r1, r4
    g_PIOTransaction.bSendInstr         = true;
    ccf0:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    ccf4:	f8a4 800e 	strh.w	r8, [r4, #14]
    g_PIOTransaction.pui32Buffer        = pData;
    ccf8:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ccfa:	7463      	strb	r3, [r4, #17]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ccfc:	f003 fabe 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cd00:	2800      	cmp	r0, #0
    cd02:	d1be      	bne.n	cc82 <am_device_init_flash+0x4a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd04:	f897 e005 	ldrb.w	lr, [r7, #5]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR3V | AM_DEVICES_MSPI_FLASH_CR3V_VALUE;
    cd08:	4b66      	ldr	r3, [pc, #408]	; (cea4 <am_device_init_flash+0x26c>)
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cd0a:	71a0      	strb	r0, [r4, #6]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cd0c:	2104      	movs	r1, #4
    cd0e:	6021      	str	r1, [r4, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd10:	f1ae 010f 	sub.w	r1, lr, #15
    cd14:	fab1 f181 	clz	r1, r1
    cd18:	ea4f 1c51 	mov.w	ip, r1, lsr #5
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cd1c:	60a0      	str	r0, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cd1e:	7420      	strb	r0, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cd20:	74a0      	strb	r0, [r4, #18]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd22:	4a5e      	ldr	r2, [pc, #376]	; (ce9c <am_device_init_flash+0x264>)
    cd24:	6830      	ldr	r0, [r6, #0]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR3V | AM_DEVICES_MSPI_FLASH_CR3V_VALUE;
    cd26:	602b      	str	r3, [r5, #0]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd28:	4621      	mov	r1, r4
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cd2a:	f884 b005 	strb.w	fp, [r4, #5]
    g_PIOTransaction.bSendInstr         = true;
    cd2e:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cd32:	f8a4 a00e 	strh.w	sl, [r4, #14]
    g_PIOTransaction.pui32Buffer        = pData;
    cd36:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd38:	f884 c011 	strb.w	ip, [r4, #17]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd3c:	f003 fa9e 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cd40:	4603      	mov	r3, r0
    cd42:	2800      	cmp	r0, #0
    cd44:	d19d      	bne.n	cc82 <am_device_init_flash+0x4a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd46:	7979      	ldrb	r1, [r7, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd48:	4a54      	ldr	r2, [pc, #336]	; (ce9c <am_device_init_flash+0x264>)
    cd4a:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cd4c:	6023      	str	r3, [r4, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd4e:	f1a1 010f 	sub.w	r1, r1, #15
    cd52:	fab1 f181 	clz	r1, r1
    cd56:	ea4f 1e51 	mov.w	lr, r1, lsr #5
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd5a:	4621      	mov	r1, r4
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cd5c:	f884 b005 	strb.w	fp, [r4, #5]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cd60:	71a3      	strb	r3, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cd62:	60a3      	str	r3, [r4, #8]
    g_PIOTransaction.bSendInstr         = true;
    cd64:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cd68:	f8a4 800e 	strh.w	r8, [r4, #14]
    g_PIOTransaction.bTurnaround        = false;
    cd6c:	7423      	strb	r3, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cd6e:	74a3      	strb	r3, [r4, #18]
    g_PIOTransaction.pui32Buffer        = pData;
    cd70:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd72:	f884 e011 	strb.w	lr, [r4, #17]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd76:	f003 fa81 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cd7a:	2800      	cmp	r0, #0
    cd7c:	d181      	bne.n	cc82 <am_device_init_flash+0x4a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd7e:	797a      	ldrb	r2, [r7, #5]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cd80:	71a0      	strb	r0, [r4, #6]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd82:	f1a2 010f 	sub.w	r1, r2, #15
    cd86:	fab1 f281 	clz	r2, r1
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cd8a:	2304      	movs	r3, #4
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cd8c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cd90:	6023      	str	r3, [r4, #0]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cd92:	60a0      	str	r0, [r4, #8]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR4V | AM_DEVICES_MSPI_FLASH_CR4V_VALUE;
    cd94:	4b44      	ldr	r3, [pc, #272]	; (cea8 <am_device_init_flash+0x270>)
    g_PIOTransaction.bTurnaround        = false;
    cd96:	7420      	strb	r0, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cd98:	74a0      	strb	r0, [r4, #18]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cd9a:	4a40      	ldr	r2, [pc, #256]	; (ce9c <am_device_init_flash+0x264>)
    cd9c:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cd9e:	f884 b005 	strb.w	fp, [r4, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cda2:	4621      	mov	r1, r4
    g_PIOTransaction.bSendInstr         = true;
    cda4:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cda8:	f8a4 a00e 	strh.w	sl, [r4, #14]
    g_PIOTransaction.pui32Buffer        = pData;
    cdac:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cdae:	f884 c011 	strb.w	ip, [r4, #17]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR4V | AM_DEVICES_MSPI_FLASH_CR4V_VALUE;
    cdb2:	602b      	str	r3, [r5, #0]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cdb4:	f003 fa62 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cdb8:	2800      	cmp	r0, #0
    cdba:	f47f af62 	bne.w	cc82 <am_device_init_flash+0x4a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cdbe:	7979      	ldrb	r1, [r7, #5]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cdc0:	6020      	str	r0, [r4, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cdc2:	f1a1 020f 	sub.w	r2, r1, #15
    cdc6:	fab2 f382 	clz	r3, r2
    cdca:	095b      	lsrs	r3, r3, #5
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cdcc:	71a0      	strb	r0, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cdce:	60a0      	str	r0, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cdd0:	7420      	strb	r0, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cdd2:	74a0      	strb	r0, [r4, #18]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cdd4:	4a31      	ldr	r2, [pc, #196]	; (ce9c <am_device_init_flash+0x264>)
    cdd6:	6830      	ldr	r0, [r6, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cdd8:	f884 b005 	strb.w	fp, [r4, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cddc:	4621      	mov	r1, r4
    g_PIOTransaction.bSendInstr         = true;
    cdde:	f884 b00c 	strb.w	fp, [r4, #12]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cde2:	f8a4 800e 	strh.w	r8, [r4, #14]
    g_PIOTransaction.pui32Buffer        = pData;
    cde6:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cde8:	7463      	strb	r3, [r4, #17]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cdea:	f003 fa47 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cdee:	2800      	cmp	r0, #0
    cdf0:	f47f af47 	bne.w	cc82 <am_device_init_flash+0x4a>
    switch (psMSPISettings->eAddrCfg)
    cdf4:	f899 3001 	ldrb.w	r3, [r9, #1]
    cdf8:	2b02      	cmp	r3, #2
    cdfa:	d93c      	bls.n	ce76 <am_device_init_flash+0x23e>
            ui8Value = 0x80;        // Use the Cypress MSPI Flash in 4-byte mode.
    cdfc:	2b03      	cmp	r3, #3
    cdfe:	bf0c      	ite	eq
    ce00:	2380      	moveq	r3, #128	; 0x80
    ce02:	2300      	movne	r3, #0
    switch (psMSPISettings->eDeviceConfig)
    ce04:	f899 0005 	ldrb.w	r0, [r9, #5]
    ce08:	280f      	cmp	r0, #15
    ce0a:	d811      	bhi.n	ce30 <am_device_init_flash+0x1f8>
    ce0c:	2201      	movs	r2, #1
    ce0e:	4082      	lsls	r2, r0
    ce10:	f248 6b08 	movw	fp, #34312	; 0x8608
    ce14:	ea12 0f0b 	tst.w	r2, fp
    ce18:	d12f      	bne.n	ce7a <am_device_init_flash+0x242>
    ce1a:	f246 0060 	movw	r0, #24672	; 0x6060
    ce1e:	4202      	tst	r2, r0
    ce20:	f47f af2f 	bne.w	cc82 <am_device_init_flash+0x4a>
    ce24:	f012 0f06 	tst.w	r2, #6
    ce28:	d002      	beq.n	ce30 <am_device_init_flash+0x1f8>
            ui8Value |= psMSPISettings->ui8TurnAround;  // Read latency
    ce2a:	f899 2000 	ldrb.w	r2, [r9]
    ce2e:	4313      	orrs	r3, r2
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ce30:	f897 8005 	ldrb.w	r8, [r7, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ce34:	6830      	ldr	r0, [r6, #0]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR2V | AM_DEVICES_MSPI_FLASH_CR2V_VALUE(ui8Value);
    ce36:	4f1d      	ldr	r7, [pc, #116]	; (ceac <am_device_init_flash+0x274>)
    g_PIOTransaction.pui32Buffer        = pData;
    ce38:	6165      	str	r5, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ce3a:	f1a8 060f 	sub.w	r6, r8, #15
    ce3e:	fab6 f686 	clz	r6, r6
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR2V | AM_DEVICES_MSPI_FLASH_CR2V_VALUE(ui8Value);
    ce42:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    ce46:	0976      	lsrs	r6, r6, #5
    ce48:	7466      	strb	r6, [r4, #17]
    g_PIOBuffer[0] = AM_DEVICES_MSPI_FLASH_CR2V | AM_DEVICES_MSPI_FLASH_CR2V_VALUE(ui8Value);
    ce4a:	602b      	str	r3, [r5, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    ce4c:	2601      	movs	r6, #1
    g_PIOTransaction.bSendAddr          = bSendAddr;
    ce4e:	2300      	movs	r3, #0
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ce50:	4a12      	ldr	r2, [pc, #72]	; (ce9c <am_device_init_flash+0x264>)
    ce52:	490f      	ldr	r1, [pc, #60]	; (ce90 <am_device_init_flash+0x258>)
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    ce54:	7166      	strb	r6, [r4, #5]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    ce56:	2704      	movs	r7, #4
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    ce58:	2571      	movs	r5, #113	; 0x71
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    ce5a:	6027      	str	r7, [r4, #0]
    g_PIOTransaction.bSendInstr         = true;
    ce5c:	7326      	strb	r6, [r4, #12]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    ce5e:	71a3      	strb	r3, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    ce60:	60a3      	str	r3, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    ce62:	7423      	strb	r3, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    ce64:	74a3      	strb	r3, [r4, #18]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    ce66:	81e5      	strh	r5, [r4, #14]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    ce68:	f003 fa08 	bl	1027c <am_hal_mspi_blocking_transfer>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    ce6c:	3000      	adds	r0, #0
    ce6e:	bf18      	it	ne
    ce70:	2001      	movne	r0, #1
}
    ce72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui8Value = 0;           // Use the Cypress MSPI Flash in 3-byte mode.
    ce76:	4603      	mov	r3, r0
    ce78:	e7c4      	b.n	ce04 <am_device_init_flash+0x1cc>
            ui8Value |= psMSPISettings->ui8TurnAround - AM_DEVICES_MSPI_FLASH_ADDR_EXT_DELAY;  // Read latency + Mode Bits
    ce7a:	f899 9000 	ldrb.w	r9, [r9]
            ui8Value |= 0x40;
    ce7e:	f043 0140 	orr.w	r1, r3, #64	; 0x40
            ui8Value |= psMSPISettings->ui8TurnAround - AM_DEVICES_MSPI_FLASH_ADDR_EXT_DELAY;  // Read latency + Mode Bits
    ce82:	f1a9 0302 	sub.w	r3, r9, #2
    ce86:	430b      	orrs	r3, r1
    ce88:	b2db      	uxtb	r3, r3
            break;
    ce8a:	e7d1      	b.n	ce30 <am_device_init_flash+0x1f8>
    ce8c:	100013b8 	.word	0x100013b8
    ce90:	10001314 	.word	0x10001314
    ce94:	100013b0 	.word	0x100013b0
    ce98:	1000132c 	.word	0x1000132c
    ce9c:	000f4240 	.word	0x000f4240
    cea0:	00020080 	.word	0x00020080
    cea4:	08040080 	.word	0x08040080
    cea8:	10050080 	.word	0x10050080
    ceac:	00030080 	.word	0x00030080

0000ceb0 <am_mspi_isr>:
//  MSPI Interrupt Service Routine.
//
//*****************************************************************************
void
am_mspi_isr(void)
{
    ceb0:	b510      	push	{r4, lr}
    uint32_t      ui32Status;

    am_hal_mspi_interrupt_status_get(g_pMSPIHandle, &ui32Status, false);
    ceb2:	4c0b      	ldr	r4, [pc, #44]	; (cee0 <am_mspi_isr+0x30>)
{
    ceb4:	b082      	sub	sp, #8
    am_hal_mspi_interrupt_status_get(g_pMSPIHandle, &ui32Status, false);
    ceb6:	2200      	movs	r2, #0
    ceb8:	a901      	add	r1, sp, #4
    ceba:	6820      	ldr	r0, [r4, #0]
    cebc:	f003 fbb0 	bl	10620 <am_hal_mspi_interrupt_status_get>

    am_hal_mspi_interrupt_clear(g_pMSPIHandle, ui32Status);
    cec0:	9901      	ldr	r1, [sp, #4]
    cec2:	6820      	ldr	r0, [r4, #0]
    cec4:	f003 fbca 	bl	1065c <am_hal_mspi_interrupt_clear>

    am_hal_mspi_interrupt_service(g_pMSPIHandle, ui32Status);
    cec8:	9901      	ldr	r1, [sp, #4]
    ceca:	6820      	ldr	r0, [r4, #0]
    cecc:	f003 fbd8 	bl	10680 <am_hal_mspi_interrupt_service>

    g_MSPIInterruptStatus &= ~ui32Status;
    ced0:	4a04      	ldr	r2, [pc, #16]	; (cee4 <am_mspi_isr+0x34>)
    ced2:	9901      	ldr	r1, [sp, #4]
    ced4:	6813      	ldr	r3, [r2, #0]
    ced6:	ea23 0001 	bic.w	r0, r3, r1
    ceda:	6010      	str	r0, [r2, #0]
}
    cedc:	b002      	add	sp, #8
    cede:	bd10      	pop	{r4, pc}
    cee0:	100013b0 	.word	0x100013b0
    cee4:	100013b4 	.word	0x100013b4

0000cee8 <am_devices_mspi_flash_init>:
//! @return None.
//
//*****************************************************************************
uint32_t
am_devices_mspi_flash_init(am_hal_mspi_dev_config_t *psMSPISettings, void **pHandle)
{
    cee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ceec:	4606      	mov	r6, r0
    ceee:	460f      	mov	r7, r1

    //
    // Enable fault detection.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    cef0:	2100      	movs	r1, #0
    cef2:	4608      	mov	r0, r1
    cef4:	f002 ff20 	bl	fd38 <am_hal_mcuctrl_control>
#endif

    //
    // Configure the MSPI for Serial or Quad-Paired Serial operation during initialization.
    //
    switch (psMSPISettings->eDeviceConfig)
    cef8:	7973      	ldrb	r3, [r6, #5]
    cefa:	1e58      	subs	r0, r3, #1
    cefc:	280e      	cmp	r0, #14
    cefe:	f200 8089 	bhi.w	d014 <am_devices_mspi_flash_init+0x12c>
    cf02:	e8df f000 	tbb	[pc, r0]
    cf06:	7a7d      	.short	0x7a7d
    cf08:	7a7d8776 	.word	0x7a7d8776
    cf0c:	7a7d8787 	.word	0x7a7d8787
    cf10:	7a7d8787 	.word	0x7a7d8787
    cf14:	08          	.byte	0x08
    cf15:	00          	.byte	0x00
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
            }
            am_bsp_mspi_pins_enable(SerialCE1MSPIConfig.eDeviceConfig);
            break;
        case AM_HAL_MSPI_FLASH_QUADPAIRED:
            g_psMSPISettings = QuadPairedSerialMSPIConfig;
    cf16:	f8df 91b4 	ldr.w	r9, [pc, #436]	; d0cc <am_devices_mspi_flash_init+0x1e4>
            g_psMSPISettings = SerialCE0MSPIConfig;
    cf1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d0c4 <am_devices_mspi_flash_init+0x1dc>
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_initialize(AM_DEVICES_MSPI_FLASH_MSPI_INSTANCE, &g_pMSPIHandle))
    cf1e:	4d62      	ldr	r5, [pc, #392]	; (d0a8 <am_devices_mspi_flash_init+0x1c0>)
            g_psMSPISettings = SerialCE0MSPIConfig;
    cf20:	46ce      	mov	lr, r9
    cf22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    cf26:	4644      	mov	r4, r8
    cf28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cf2a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    cf2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_initialize(AM_DEVICES_MSPI_FLASH_MSPI_INSTANCE, &g_pMSPIHandle))
    cf32:	4629      	mov	r1, r5
    cf34:	2000      	movs	r0, #0
    cf36:	f002 ffc3 	bl	fec0 <am_hal_mspi_initialize>
    cf3a:	2800      	cmp	r0, #0
    cf3c:	d163      	bne.n	d006 <am_devices_mspi_flash_init+0x11e>
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_power_control(g_pMSPIHandle, AM_HAL_SYSCTRL_WAKE, false))
    cf3e:	4602      	mov	r2, r0
    cf40:	4601      	mov	r1, r0
    cf42:	6828      	ldr	r0, [r5, #0]
    cf44:	f003 fc84 	bl	10850 <am_hal_mspi_power_control>
    cf48:	2800      	cmp	r0, #0
    cf4a:	d16c      	bne.n	d026 <am_devices_mspi_flash_init+0x13e>
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(g_pMSPIHandle, &SerialCE0MSPIConfig))
    cf4c:	4649      	mov	r1, r9
    cf4e:	6828      	ldr	r0, [r5, #0]
    cf50:	f003 f808 	bl	ff64 <am_hal_mspi_device_configure>
    cf54:	2800      	cmp	r0, #0
    cf56:	d161      	bne.n	d01c <am_devices_mspi_flash_init+0x134>
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(g_pMSPIHandle))
    cf58:	6828      	ldr	r0, [r5, #0]
    cf5a:	f003 f8f5 	bl	10148 <am_hal_mspi_enable>
    cf5e:	2800      	cmp	r0, #0
    cf60:	d168      	bne.n	d034 <am_devices_mspi_flash_init+0x14c>
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(g_pMSPIHandle))
            {
                am_util_stdio_printf("Error - Failed to enable MSPI.\n");
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
            }
            am_bsp_mspi_pins_enable(QuadPairedSerialMSPIConfig.eDeviceConfig);
    cf62:	f899 0005 	ldrb.w	r0, [r9, #5]
    cf66:	f001 fd3f 	bl	e9e8 <am_bsp_mspi_pins_enable>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cf6a:	f898 1005 	ldrb.w	r1, [r8, #5]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cf6e:	4c4f      	ldr	r4, [pc, #316]	; (d0ac <am_devices_mspi_flash_init+0x1c4>)
    g_PIOTransaction.pui32Buffer        = pData;
    cf70:	f8df 915c 	ldr.w	r9, [pc, #348]	; d0d0 <am_devices_mspi_flash_init+0x1e8>
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cf74:	4a4e      	ldr	r2, [pc, #312]	; (d0b0 <am_devices_mspi_flash_init+0x1c8>)
    cf76:	6828      	ldr	r0, [r5, #0]
    g_PIOTransaction.pui32Buffer        = pData;
    cf78:	f8c4 9014 	str.w	r9, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cf7c:	f1a1 010f 	sub.w	r1, r1, #15
    cf80:	fab1 f381 	clz	r3, r1
    cf84:	095b      	lsrs	r3, r3, #5
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cf86:	f04f 0a66 	mov.w	sl, #102	; 0x66
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cf8a:	7463      	strb	r3, [r4, #17]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cf8c:	f8a4 a00e 	strh.w	sl, [r4, #14]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cf90:	2300      	movs	r3, #0
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cf92:	f04f 0a01 	mov.w	sl, #1
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cf96:	4621      	mov	r1, r4
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cf98:	6023      	str	r3, [r4, #0]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cf9a:	71a3      	strb	r3, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cf9c:	60a3      	str	r3, [r4, #8]
    g_PIOTransaction.bTurnaround        = false;
    cf9e:	7423      	strb	r3, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cfa0:	74a3      	strb	r3, [r4, #18]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cfa2:	f884 a005 	strb.w	sl, [r4, #5]
    g_PIOTransaction.bSendInstr         = true;
    cfa6:	f884 a00c 	strb.w	sl, [r4, #12]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cfaa:	f003 f967 	bl	1027c <am_hal_mspi_blocking_transfer>
am_devices_mspi_flash_reset(void)
{
    //
    // Send the command sequence to reset the device and return status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_device_command_write(AM_DEVICES_MSPI_FLASH_RESET_ENABLE, false, 0, g_PIOBuffer, 0))
    cfae:	bb00      	cbnz	r0, cff2 <am_devices_mspi_flash_init+0x10a>
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cfb0:	f898 2005 	ldrb.w	r2, [r8, #5]
    g_PIOTransaction.ui32NumBytes       = ui32NumBytes;
    cfb4:	6020      	str	r0, [r4, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cfb6:	f1a2 020f 	sub.w	r2, r2, #15
    cfba:	fab2 f182 	clz	r1, r2
    cfbe:	094b      	lsrs	r3, r1, #5
    g_PIOTransaction.bSendAddr          = bSendAddr;
    cfc0:	71a0      	strb	r0, [r4, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    cfc2:	60a0      	str	r0, [r4, #8]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cfc4:	f04f 0c99 	mov.w	ip, #153	; 0x99
    g_PIOTransaction.bTurnaround        = false;
    cfc8:	7420      	strb	r0, [r4, #16]
    g_PIOTransaction.bContinue          = false;
    cfca:	74a0      	strb	r0, [r4, #18]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cfcc:	4621      	mov	r1, r4
    cfce:	4a38      	ldr	r2, [pc, #224]	; (d0b0 <am_devices_mspi_flash_init+0x1c8>)
    cfd0:	6828      	ldr	r0, [r5, #0]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    cfd2:	f884 a005 	strb.w	sl, [r4, #5]
    g_PIOTransaction.bSendInstr         = true;
    cfd6:	f884 a00c 	strb.w	sl, [r4, #12]
    g_PIOTransaction.pui32Buffer        = pData;
    cfda:	f8c4 9014 	str.w	r9, [r4, #20]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    cfde:	7463      	strb	r3, [r4, #17]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    cfe0:	f8a4 c00e 	strh.w	ip, [r4, #14]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    cfe4:	f003 f94a 	bl	1027c <am_hal_mspi_blocking_transfer>
    {
        return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    }
    if (AM_HAL_STATUS_SUCCESS != am_device_command_write(AM_DEVICES_MSPI_FLASH_RESET_MEMORY, false, 0, g_PIOBuffer, 0))
    cfe8:	b918      	cbnz	r0, cff2 <am_devices_mspi_flash_init+0x10a>
    ui32Status = am_device_init_flash(psMSPISettings);
    cfea:	4630      	mov	r0, r6
    cfec:	f7ff fe24 	bl	cc38 <am_device_init_flash>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    cff0:	b328      	cbz	r0, d03e <am_devices_mspi_flash_init+0x156>
            return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    cff2:	2401      	movs	r4, #1
}
    cff4:	4620      	mov	r0, r4
    cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            g_psMSPISettings = SerialCE1MSPIConfig;
    cffa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; d0d4 <am_devices_mspi_flash_init+0x1ec>
    cffe:	e78c      	b.n	cf1a <am_devices_mspi_flash_init+0x32>
            g_psMSPISettings = SerialCE0MSPIConfig;
    d000:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d0d8 <am_devices_mspi_flash_init+0x1f0>
    d004:	e789      	b.n	cf1a <am_devices_mspi_flash_init+0x32>
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    d006:	2401      	movs	r4, #1
                am_util_stdio_printf("Error - Failed to initialize MSPI.\n");
    d008:	482a      	ldr	r0, [pc, #168]	; (d0b4 <am_devices_mspi_flash_init+0x1cc>)
    d00a:	f001 fc8f 	bl	e92c <am_util_stdio_printf>
}
    d00e:	4620      	mov	r0, r4
    d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d014:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d0c4 <am_devices_mspi_flash_init+0x1dc>
    d018:	4d23      	ldr	r5, [pc, #140]	; (d0a8 <am_devices_mspi_flash_init+0x1c0>)
    d01a:	e7a6      	b.n	cf6a <am_devices_mspi_flash_init+0x82>
                am_util_stdio_printf("Error - Failed to configure MSPI.\n");
    d01c:	4826      	ldr	r0, [pc, #152]	; (d0b8 <am_devices_mspi_flash_init+0x1d0>)
    d01e:	f001 fc85 	bl	e92c <am_util_stdio_printf>
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    d022:	2401      	movs	r4, #1
    d024:	e7e6      	b.n	cff4 <am_devices_mspi_flash_init+0x10c>
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    d026:	2401      	movs	r4, #1
                am_util_stdio_printf("Error - Failed to power on MSPI.\n");
    d028:	4824      	ldr	r0, [pc, #144]	; (d0bc <am_devices_mspi_flash_init+0x1d4>)
    d02a:	f001 fc7f 	bl	e92c <am_util_stdio_printf>
}
    d02e:	4620      	mov	r0, r4
    d030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                am_util_stdio_printf("Error - Failed to enable MSPI.\n");
    d034:	4822      	ldr	r0, [pc, #136]	; (d0c0 <am_devices_mspi_flash_init+0x1d8>)
    d036:	f001 fc79 	bl	e92c <am_util_stdio_printf>
                return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    d03a:	2401      	movs	r4, #1
    d03c:	e7da      	b.n	cff4 <am_devices_mspi_flash_init+0x10c>
    g_psMSPISettings = *psMSPISettings;
    d03e:	46b6      	mov	lr, r6
    d040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    d044:	4c1f      	ldr	r4, [pc, #124]	; (d0c4 <am_devices_mspi_flash_init+0x1dc>)
    d046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d048:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    d04c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ui32Status = am_hal_mspi_disable(g_pMSPIHandle);
    d050:	6828      	ldr	r0, [r5, #0]
    d052:	f002 ff55 	bl	ff00 <am_hal_mspi_disable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d056:	2800      	cmp	r0, #0
    d058:	d1cb      	bne.n	cff2 <am_devices_mspi_flash_init+0x10a>
    ui32Status = am_hal_mspi_device_configure(g_pMSPIHandle, psMSPISettings);
    d05a:	4631      	mov	r1, r6
    d05c:	6828      	ldr	r0, [r5, #0]
    d05e:	f002 ff81 	bl	ff64 <am_hal_mspi_device_configure>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d062:	2800      	cmp	r0, #0
    d064:	d1c5      	bne.n	cff2 <am_devices_mspi_flash_init+0x10a>
    ui32Status = am_hal_mspi_enable(g_pMSPIHandle);
    d066:	6828      	ldr	r0, [r5, #0]
    d068:	f003 f86e 	bl	10148 <am_hal_mspi_enable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d06c:	2800      	cmp	r0, #0
    d06e:	d1c0      	bne.n	cff2 <am_devices_mspi_flash_init+0x10a>
    am_bsp_mspi_pins_enable(g_psMSPISettings.eDeviceConfig);
    d070:	f898 0005 	ldrb.w	r0, [r8, #5]
    d074:	f001 fcb8 	bl	e9e8 <am_bsp_mspi_pins_enable>
    ui32Status = am_hal_mspi_interrupt_clear(g_pMSPIHandle, AM_HAL_MSPI_INT_ERR | AM_HAL_MSPI_INT_DMACMP );
    d078:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    d07c:	6828      	ldr	r0, [r5, #0]
    d07e:	f003 faed 	bl	1065c <am_hal_mspi_interrupt_clear>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d082:	2800      	cmp	r0, #0
    d084:	d1b5      	bne.n	cff2 <am_devices_mspi_flash_init+0x10a>
    ui32Status = am_hal_mspi_interrupt_enable(g_pMSPIHandle, AM_HAL_MSPI_INT_ERR | AM_HAL_MSPI_INT_DMACMP );
    d086:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    d08a:	6828      	ldr	r0, [r5, #0]
    d08c:	f003 fab2 	bl	105f4 <am_hal_mspi_interrupt_enable>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d090:	4604      	mov	r4, r0
    d092:	2800      	cmp	r0, #0
    d094:	d1ad      	bne.n	cff2 <am_devices_mspi_flash_init+0x10a>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d096:	4e0c      	ldr	r6, [pc, #48]	; (d0c8 <am_devices_mspi_flash_init+0x1e0>)
    d098:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d09c:	6030      	str	r0, [r6, #0]
    am_hal_interrupt_master_enable();
    d09e:	f002 f869 	bl	f174 <am_hal_interrupt_master_enable>
    *pHandle = g_pMSPIHandle;
    d0a2:	682d      	ldr	r5, [r5, #0]
    d0a4:	603d      	str	r5, [r7, #0]
    return AM_DEVICES_MSPI_FLASH_STATUS_SUCCESS;
    d0a6:	e7a5      	b.n	cff4 <am_devices_mspi_flash_init+0x10c>
    d0a8:	100013b0 	.word	0x100013b0
    d0ac:	10001314 	.word	0x10001314
    d0b0:	000f4240 	.word	0x000f4240
    d0b4:	00011dd0 	.word	0x00011dd0
    d0b8:	00011e18 	.word	0x00011e18
    d0bc:	00011df4 	.word	0x00011df4
    d0c0:	00011e3c 	.word	0x00011e3c
    d0c4:	100013b8 	.word	0x100013b8
    d0c8:	e000e100 	.word	0xe000e100
    d0cc:	10001028 	.word	0x10001028
    d0d0:	1000132c 	.word	0x1000132c
    d0d4:	10001060 	.word	0x10001060
    d0d8:	10001044 	.word	0x10001044

0000d0dc <am_devices_mspi_flash_id>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_flash_id(void)
{
    d0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    d0de:	4a19      	ldr	r2, [pc, #100]	; (d144 <am_devices_mspi_flash_id+0x68>)
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_RX;
    d0e0:	4b19      	ldr	r3, [pc, #100]	; (d148 <am_devices_mspi_flash_id+0x6c>)
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    d0e2:	7951      	ldrb	r1, [r2, #5]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    d0e4:	4819      	ldr	r0, [pc, #100]	; (d14c <am_devices_mspi_flash_id+0x70>)
    d0e6:	4a1a      	ldr	r2, [pc, #104]	; (d150 <am_devices_mspi_flash_id+0x74>)
    d0e8:	6800      	ldr	r0, [r0, #0]
    if (AM_HAL_MSPI_FLASH_QUADPAIRED == g_psMSPISettings.eDeviceConfig)
    d0ea:	290f      	cmp	r1, #15
{
    d0ec:	b083      	sub	sp, #12
        g_PIOTransaction.bQuadCmd      = false;
    d0ee:	bf0c      	ite	eq
    d0f0:	2401      	moveq	r4, #1
    d0f2:	2400      	movne	r4, #0
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    d0f4:	f04f 059f 	mov.w	r5, #159	; 0x9f
        g_PIOTransaction.bQuadCmd      = false;
    d0f8:	bf0c      	ite	eq
    d0fa:	2706      	moveq	r7, #6
    d0fc:	2703      	movne	r7, #3
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    d0fe:	4619      	mov	r1, r3
    d100:	745c      	strb	r4, [r3, #17]
    g_PIOTransaction.ui16DeviceInstr    = ui8Instr;
    d102:	81dd      	strh	r5, [r3, #14]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_RX;
    d104:	2400      	movs	r4, #0
    g_PIOTransaction.pui32Buffer        = pData;
    d106:	ae01      	add	r6, sp, #4
    g_PIOTransaction.bSendInstr         = true;
    d108:	2501      	movs	r5, #1
    d10a:	601f      	str	r7, [r3, #0]
    g_PIOTransaction.pui32Buffer        = pData;
    d10c:	615e      	str	r6, [r3, #20]
    g_PIOTransaction.eDirection         = AM_HAL_MSPI_RX;
    d10e:	715c      	strb	r4, [r3, #5]
    g_PIOTransaction.bSendAddr          = bSendAddr;
    d110:	719c      	strb	r4, [r3, #6]
    g_PIOTransaction.ui32DeviceAddr     = ui32Addr;
    d112:	609c      	str	r4, [r3, #8]
    g_PIOTransaction.bTurnaround        = false;
    d114:	741c      	strb	r4, [r3, #16]
    g_PIOTransaction.bContinue          = false;
    d116:	749c      	strb	r4, [r3, #18]
    g_PIOTransaction.bSendInstr         = true;
    d118:	731d      	strb	r5, [r3, #12]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    d11a:	f003 f8af 	bl	1027c <am_hal_mspi_blocking_transfer>

    //
    // Send the command sequence to read the Device ID and return status.
    //
    ui32Status = am_device_command_read(AM_DEVICES_MSPI_FLASH_READ_ID, false, 0, &ui32DeviceID, 3);
    am_util_stdio_printf("Flash ID is %8.8X\n", ui32DeviceID);
    d11e:	9901      	ldr	r1, [sp, #4]
    return am_hal_mspi_blocking_transfer(g_pMSPIHandle, &g_PIOTransaction,
    d120:	4607      	mov	r7, r0
    am_util_stdio_printf("Flash ID is %8.8X\n", ui32DeviceID);
    d122:	480c      	ldr	r0, [pc, #48]	; (d154 <am_devices_mspi_flash_id+0x78>)
    d124:	f001 fc02 	bl	e92c <am_util_stdio_printf>
    if ( ((ui32DeviceID & AM_DEVICES_MSPI_FLASH_ID_MASK) == AM_DEVICES_MSPI_FLASH_ID) &&
    d128:	9b01      	ldr	r3, [sp, #4]
    d12a:	4a0b      	ldr	r2, [pc, #44]	; (d158 <am_devices_mspi_flash_id+0x7c>)
    d12c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    d130:	4291      	cmp	r1, r2
    d132:	d002      	beq.n	d13a <am_devices_mspi_flash_id+0x5e>
    d134:	4628      	mov	r0, r5
    }
    else
    {
        return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    }
}
    d136:	b003      	add	sp, #12
    d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( ((ui32DeviceID & AM_DEVICES_MSPI_FLASH_ID_MASK) == AM_DEVICES_MSPI_FLASH_ID) &&
    d13a:	1c38      	adds	r0, r7, #0
    d13c:	bf18      	it	ne
    d13e:	2001      	movne	r0, #1
}
    d140:	b003      	add	sp, #12
    d142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d144:	100013b8 	.word	0x100013b8
    d148:	10001314 	.word	0x10001314
    d14c:	100013b0 	.word	0x100013b0
    d150:	000f4240 	.word	0x000f4240
    d154:	00011dbc 	.word	0x00011dbc
    d158:	00170201 	.word	0x00170201

0000d15c <am_devices_mspi_flash_enable>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_flash_enable(bool bEnableXIP, bool bEnableScrambling)
{
    d15c:	b510      	push	{r4, lr}
    d15e:	460c      	mov	r4, r1


    //
    // Enable XIP on the MSPI.
    //
    if (bEnableXIP)
    d160:	b910      	cbnz	r0, d168 <am_devices_mspi_flash_enable+0xc>
    }

    //
    // Enable scrambling on the MSPI.
    //
    if (bEnableScrambling)
    d162:	b95c      	cbnz	r4, d17c <am_devices_mspi_flash_enable+0x20>


    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_FLASH_STATUS_SUCCESS;
    d164:	4620      	mov	r0, r4
    d166:	bd10      	pop	{r4, pc}
        ui32Status = am_hal_mspi_control(g_pMSPIHandle, AM_HAL_MSPI_REQ_XIP_EN, NULL);
    d168:	4b09      	ldr	r3, [pc, #36]	; (d190 <am_devices_mspi_flash_enable+0x34>)
    d16a:	2200      	movs	r2, #0
    d16c:	6818      	ldr	r0, [r3, #0]
    d16e:	2107      	movs	r1, #7
    d170:	f003 f81a 	bl	101a8 <am_hal_mspi_control>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d174:	2800      	cmp	r0, #0
    d176:	d0f4      	beq.n	d162 <am_devices_mspi_flash_enable+0x6>
            return AM_DEVICES_MSPI_FLASH_STATUS_ERROR;
    d178:	2001      	movs	r0, #1
}
    d17a:	bd10      	pop	{r4, pc}
        ui32Status = am_hal_mspi_control(g_pMSPIHandle, AM_HAL_MSPI_REQ_SCRAMB_EN, NULL);
    d17c:	4804      	ldr	r0, [pc, #16]	; (d190 <am_devices_mspi_flash_enable+0x34>)
    d17e:	2200      	movs	r2, #0
    d180:	2104      	movs	r1, #4
    d182:	6800      	ldr	r0, [r0, #0]
    d184:	f003 f810 	bl	101a8 <am_hal_mspi_control>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d188:	3000      	adds	r0, #0
    d18a:	bf18      	it	ne
    d18c:	2001      	movne	r0, #1
    d18e:	bd10      	pop	{r4, pc}
    d190:	100013b0 	.word	0x100013b0

0000d194 <main>:
// MSPI Example Main.
//
//*****************************************************************************
int
main(void)
{
    d194:	b570      	push	{r4, r5, r6, lr}
    uint32_t      ui32Result;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    d196:	2100      	movs	r1, #0
{
    d198:	b082      	sub	sp, #8
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    d19a:	4608      	mov	r0, r1
    d19c:	f001 fd1c 	bl	ebd8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    d1a0:	483b      	ldr	r0, [pc, #236]	; (d290 <main+0xfc>)
    d1a2:	f001 fce5 	bl	eb70 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    d1a6:	f001 fd0d 	bl	ebc4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    d1aa:	f001 fc03 	bl	e9b4 <am_bsp_low_power_init>

#if 1
    //
    // Initialize the printf interface for UART output.
    //
    am_bsp_uart_printf_enable();
    d1ae:	f001 fcb1 	bl	eb14 <am_bsp_uart_printf_enable>
#endif

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    d1b2:	f001 fbd5 	bl	e960 <am_util_stdio_terminal_clear>
    DEBUG_PRINT("Apollo3 Prime Example from MSPI\n\n");
    d1b6:	4837      	ldr	r0, [pc, #220]	; (d294 <main+0x100>)
    d1b8:	f001 fbb8 	bl	e92c <am_util_stdio_printf>

#if 1
    //
    // Get Fireball ID and Rev info.
    //
    ui32Ret = am_devices_fireball_control(AM_DEVICES_FIREBALL_STATE_ID_GET, &ui32ID);
    d1bc:	a901      	add	r1, sp, #4
    d1be:	2001      	movs	r0, #1
    d1c0:	f7fe ffee 	bl	c1a0 <am_devices_fireball_control>
    if ( ui32Ret != 0 )
    d1c4:	2800      	cmp	r0, #0
    d1c6:	d151      	bne.n	d26c <main+0xd8>
    {
        DEBUG_PRINT("FAIL: am_devices_fireball_control(%d) returned 0x%X.\n",
                             AM_DEVICES_FIREBALL_STATE_ID_GET, ui32Ret);
        return -1;
    }
    else if ( ui32ID == FIREBALL_ID )
    d1c8:	9901      	ldr	r1, [sp, #4]
    d1ca:	f247 7310 	movw	r3, #30480	; 0x7710
    d1ce:	4299      	cmp	r1, r3
    {
        DEBUG_PRINT("Fireball found, ID is 0x%X.\n", ui32ID);
    d1d0:	bf0c      	ite	eq
    d1d2:	4831      	ldreq	r0, [pc, #196]	; (d298 <main+0x104>)
    }
    else
    {
        DEBUG_PRINT("Unknown device returned ID as 0x%X.\n", ui32ID);
    d1d4:	4831      	ldrne	r0, [pc, #196]	; (d29c <main+0x108>)
    d1d6:	f001 fba9 	bl	e92c <am_util_stdio_printf>
    }

    ui32Ret = am_devices_fireball_control(AM_DEVICES_FIREBALL_STATE_VER_GET, &ui32ID);
    d1da:	a901      	add	r1, sp, #4
    d1dc:	2002      	movs	r0, #2
    d1de:	f7fe ffdf 	bl	c1a0 <am_devices_fireball_control>
    if ( ui32Ret != 0 )
    d1e2:	4604      	mov	r4, r0
    d1e4:	2800      	cmp	r0, #0
    d1e6:	d13b      	bne.n	d260 <main+0xcc>
                             AM_DEVICES_FIREBALL_STATE_VER_GET, ui32Ret);
        return -1;
    }
    else
    {
        DEBUG_PRINT("Fireball Version is 0x%X.\n", ui32ID);
    d1e8:	9901      	ldr	r1, [sp, #4]
    d1ea:	482d      	ldr	r0, [pc, #180]	; (d2a0 <main+0x10c>)
    d1ec:	f001 fb9e 	bl	e92c <am_util_stdio_printf>
    }
#endif

    ui32Ret = am_devices_fireball_control(AM_DEVICES_FIREBALL_STATE_TWIN_QUAD_CE0_CE1, 0);
    d1f0:	4621      	mov	r1, r4
    d1f2:	2013      	movs	r0, #19
    d1f4:	f7fe ffd4 	bl	c1a0 <am_devices_fireball_control>
    if ( ui32Ret != 0 )
    d1f8:	4602      	mov	r2, r0
    d1fa:	bb48      	cbnz	r0, d250 <main+0xbc>
#endif // FIREBALL_CARD

    //
    // Configure the MSPI and Flash Device.
    //
    ui32Status = am_devices_mspi_flash_init(pMspiCfg, &pHandle);
    d1fc:	4669      	mov	r1, sp
    d1fe:	4829      	ldr	r0, [pc, #164]	; (d2a4 <main+0x110>)
    d200:	f7ff fe72 	bl	cee8 <am_devices_mspi_flash_init>
    if (AM_DEVICES_MSPI_FLASH_STATUS_SUCCESS != ui32Status)
    d204:	2800      	cmp	r0, #0
    d206:	d13b      	bne.n	d280 <main+0xec>
    }

    //
    // Read the MSPI Device ID.
    //
    ui32Status = am_devices_mspi_flash_id();
    d208:	f7ff ff68 	bl	d0dc <am_devices_mspi_flash_id>
    if (AM_DEVICES_MSPI_FLASH_STATUS_SUCCESS != ui32Status)
    d20c:	4605      	mov	r5, r0
    d20e:	bb98      	cbnz	r0, d278 <main+0xe4>
    }

    //
    // Set up for XIP operation.
    //
    DEBUG_PRINT("Putting the MSPI and External Flash into XIP mode\n");
    d210:	4825      	ldr	r0, [pc, #148]	; (d2a8 <main+0x114>)
    d212:	f001 fb8b 	bl	e92c <am_util_stdio_printf>
    ui32Status = am_devices_mspi_flash_enable(true, false);
    d216:	4629      	mov	r1, r5
    d218:	2001      	movs	r0, #1
    d21a:	f7ff ff9f 	bl	d15c <am_devices_mspi_flash_enable>
    if (AM_DEVICES_MSPI_FLASH_STATUS_SUCCESS != ui32Status)
    d21e:	bb98      	cbnz	r0, d288 <main+0xf4>
        {
            DEBUG_PRINT("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
        }
        else
        {
            DEBUG_PRINT("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    d220:	4d22      	ldr	r5, [pc, #136]	; (d2ac <main+0x118>)
            DEBUG_PRINT("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    d222:	4e23      	ldr	r6, [pc, #140]	; (d2b0 <main+0x11c>)
        }

        am_hal_flash_delay(FLASH_CYCLES_US(10000));
    d224:	4c23      	ldr	r4, [pc, #140]	; (d2b4 <main+0x120>)
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    d226:	2201      	movs	r2, #1
    d228:	2100      	movs	r1, #0
    d22a:	f242 7010 	movw	r0, #10000	; 0x2710
    d22e:	f000 f84b 	bl	d2c8 <prime_number>
        if ( ui32Result == EXP_PRIMES )
    d232:	f240 42cd 	movw	r2, #1229	; 0x4cd
    d236:	4290      	cmp	r0, r2
            DEBUG_PRINT("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    d238:	f242 7110 	movw	r1, #10000	; 0x2710
    d23c:	4602      	mov	r2, r0
    d23e:	4628      	mov	r0, r5
            DEBUG_PRINT("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    d240:	bf08      	it	eq
    d242:	4630      	moveq	r0, r6
            DEBUG_PRINT("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
    d244:	f001 fb72 	bl	e92c <am_util_stdio_printf>
        am_hal_flash_delay(FLASH_CYCLES_US(10000));
    d248:	4620      	mov	r0, r4
    d24a:	f001 fd21 	bl	ec90 <am_hal_flash_delay>
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
    d24e:	e7ea      	b.n	d226 <main+0x92>
        DEBUG_PRINT("FAIL: am_devices_fireball_control(%d) returned 0x%X.\n",
    d250:	2113      	movs	r1, #19
    d252:	4819      	ldr	r0, [pc, #100]	; (d2b8 <main+0x124>)
    d254:	f001 fb6a 	bl	e92c <am_util_stdio_printf>

    }
}
    d258:	f04f 30ff 	mov.w	r0, #4294967295
    d25c:	b002      	add	sp, #8
    d25e:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_PRINT("FAIL: am_devices_fireball_control(%d) returned 0x%X.\n",
    d260:	4602      	mov	r2, r0
    d262:	2102      	movs	r1, #2
    d264:	4814      	ldr	r0, [pc, #80]	; (d2b8 <main+0x124>)
    d266:	f001 fb61 	bl	e92c <am_util_stdio_printf>
        return -1;
    d26a:	e7f5      	b.n	d258 <main+0xc4>
    d26c:	4602      	mov	r2, r0
        DEBUG_PRINT("FAIL: am_devices_fireball_control(%d) returned 0x%X.\n",
    d26e:	2101      	movs	r1, #1
    d270:	4811      	ldr	r0, [pc, #68]	; (d2b8 <main+0x124>)
    d272:	f001 fb5b 	bl	e92c <am_util_stdio_printf>
        return -1;
    d276:	e7ef      	b.n	d258 <main+0xc4>
        DEBUG_PRINT("Failed to read Flash Device ID!\n");
    d278:	4810      	ldr	r0, [pc, #64]	; (d2bc <main+0x128>)
    d27a:	f001 fb57 	bl	e92c <am_util_stdio_printf>
        return -1;
    d27e:	e7eb      	b.n	d258 <main+0xc4>
        DEBUG_PRINT("Failed to configure the MSPI and Flash Device correctly!\n");
    d280:	480f      	ldr	r0, [pc, #60]	; (d2c0 <main+0x12c>)
    d282:	f001 fb53 	bl	e92c <am_util_stdio_printf>
        return -1;
    d286:	e7e7      	b.n	d258 <main+0xc4>
        DEBUG_PRINT("Failed to put the MSPI into XIP mode!\n");
    d288:	480e      	ldr	r0, [pc, #56]	; (d2c4 <main+0x130>)
    d28a:	f001 fb4f 	bl	e92c <am_util_stdio_printf>
        return -1;
    d28e:	e7e3      	b.n	d258 <main+0xc4>
    d290:	000120b0 	.word	0x000120b0
    d294:	00011e5c 	.word	0x00011e5c
    d298:	00011eb8 	.word	0x00011eb8
    d29c:	00011ed8 	.word	0x00011ed8
    d2a0:	00011f00 	.word	0x00011f00
    d2a4:	1000107c 	.word	0x1000107c
    d2a8:	00011f7c 	.word	0x00011f7c
    d2ac:	00012000 	.word	0x00012000
    d2b0:	00011fd8 	.word	0x00011fd8
    d2b4:	000270d7 	.word	0x000270d7
    d2b8:	00011e80 	.word	0x00011e80
    d2bc:	00011f58 	.word	0x00011f58
    d2c0:	00011f1c 	.word	0x00011f1c
    d2c4:	00011fb0 	.word	0x00011fb0

0000d2c8 <prime_number>:
  int prime;
  int total;

  total = 0;

  for ( i = 2 + id; i <= n; i = i + p )
    d2c8:	3102      	adds	r1, #2
    d2ca:	4281      	cmp	r1, r0
    d2cc:	f300 8093 	bgt.w	d3f6 <prime_number+0x12e>
{
    d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for ( i = 2 + id; i <= n; i = i + p )
    d2d4:	f04f 0c00 	mov.w	ip, #0
  {
    prime = 1;
    for ( j = 2; j < i; j++ )
    d2d8:	2902      	cmp	r1, #2
    d2da:	f340 8089 	ble.w	d3f0 <prime_number+0x128>
    {
      if ( ( i % j ) == 0 )
    d2de:	f011 0e01 	ands.w	lr, r1, #1
    d2e2:	d07d      	beq.n	d3e0 <prime_number+0x118>
    d2e4:	1ecc      	subs	r4, r1, #3
    d2e6:	f014 0607 	ands.w	r6, r4, #7
    d2ea:	f04f 0302 	mov.w	r3, #2
    d2ee:	d03b      	beq.n	d368 <prime_number+0xa0>
    for ( j = 2; j < i; j++ )
    d2f0:	2303      	movs	r3, #3
      if ( ( i % j ) == 0 )
    d2f2:	fb91 f5f3 	sdiv	r5, r1, r3
    d2f6:	fb03 1715 	mls	r7, r3, r5, r1
    d2fa:	2f00      	cmp	r7, #0
    d2fc:	d06e      	beq.n	d3dc <prime_number+0x114>
    d2fe:	2e01      	cmp	r6, #1
    d300:	d032      	beq.n	d368 <prime_number+0xa0>
    d302:	2e02      	cmp	r6, #2
    d304:	d02a      	beq.n	d35c <prime_number+0x94>
    d306:	429e      	cmp	r6, r3
    d308:	d021      	beq.n	d34e <prime_number+0x86>
    d30a:	2e04      	cmp	r6, #4
    d30c:	d018      	beq.n	d340 <prime_number+0x78>
    d30e:	2e05      	cmp	r6, #5
    d310:	d00f      	beq.n	d332 <prime_number+0x6a>
    d312:	2e06      	cmp	r6, #6
    d314:	d006      	beq.n	d324 <prime_number+0x5c>
    for ( j = 2; j < i; j++ )
    d316:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d318:	fb91 f8f3 	sdiv	r8, r1, r3
    d31c:	fb03 1418 	mls	r4, r3, r8, r1
    d320:	2c00      	cmp	r4, #0
    d322:	d05b      	beq.n	d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d324:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d326:	fb91 f6f3 	sdiv	r6, r1, r3
    d32a:	fb03 1516 	mls	r5, r3, r6, r1
    d32e:	2d00      	cmp	r5, #0
    d330:	d054      	beq.n	d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d332:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d334:	fb91 f7f3 	sdiv	r7, r1, r3
    d338:	fb03 1417 	mls	r4, r3, r7, r1
    d33c:	2c00      	cmp	r4, #0
    d33e:	d04d      	beq.n	d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d340:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d342:	fb91 f6f3 	sdiv	r6, r1, r3
    d346:	fb03 1516 	mls	r5, r3, r6, r1
    d34a:	2d00      	cmp	r5, #0
    d34c:	d046      	beq.n	d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d34e:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d350:	fb91 f7f3 	sdiv	r7, r1, r3
    d354:	fb03 1417 	mls	r4, r3, r7, r1
    d358:	2c00      	cmp	r4, #0
    d35a:	d03f      	beq.n	d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d35c:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
    d35e:	fb91 f6f3 	sdiv	r6, r1, r3
    d362:	fb03 1516 	mls	r5, r3, r6, r1
    d366:	b3cd      	cbz	r5, d3dc <prime_number+0x114>
    for ( j = 2; j < i; j++ )
    d368:	1c5c      	adds	r4, r3, #1
    d36a:	428c      	cmp	r4, r1
    d36c:	f103 0603 	add.w	r6, r3, #3
    d370:	f103 0704 	add.w	r7, r3, #4
    d374:	f103 0805 	add.w	r8, r3, #5
    d378:	f103 0906 	add.w	r9, r3, #6
    d37c:	f103 0a07 	add.w	sl, r3, #7
    d380:	f104 0501 	add.w	r5, r4, #1
    d384:	f103 0308 	add.w	r3, r3, #8
    d388:	d02a      	beq.n	d3e0 <prime_number+0x118>
      if ( ( i % j ) == 0 )
    d38a:	fb91 fbf4 	sdiv	fp, r1, r4
    d38e:	fb04 141b 	mls	r4, r4, fp, r1
    d392:	b31c      	cbz	r4, d3dc <prime_number+0x114>
    d394:	fb91 fbf5 	sdiv	fp, r1, r5
    d398:	fb05 151b 	mls	r5, r5, fp, r1
    d39c:	b1f5      	cbz	r5, d3dc <prime_number+0x114>
    d39e:	fb91 f4f6 	sdiv	r4, r1, r6
    d3a2:	fb06 1614 	mls	r6, r6, r4, r1
    d3a6:	b1ce      	cbz	r6, d3dc <prime_number+0x114>
    d3a8:	fb91 f5f7 	sdiv	r5, r1, r7
    d3ac:	fb07 1715 	mls	r7, r7, r5, r1
    d3b0:	b1a7      	cbz	r7, d3dc <prime_number+0x114>
    d3b2:	fb91 fbf8 	sdiv	fp, r1, r8
    d3b6:	fb08 141b 	mls	r4, r8, fp, r1
    d3ba:	b17c      	cbz	r4, d3dc <prime_number+0x114>
    d3bc:	fb91 f6f9 	sdiv	r6, r1, r9
    d3c0:	fb09 1516 	mls	r5, r9, r6, r1
    d3c4:	b155      	cbz	r5, d3dc <prime_number+0x114>
    d3c6:	fb91 f7fa 	sdiv	r7, r1, sl
    d3ca:	fb0a 1417 	mls	r4, sl, r7, r1
    d3ce:	b12c      	cbz	r4, d3dc <prime_number+0x114>
    d3d0:	fb91 f6f3 	sdiv	r6, r1, r3
    d3d4:	fb03 1516 	mls	r5, r3, r6, r1
    d3d8:	2d00      	cmp	r5, #0
    d3da:	d1c5      	bne.n	d368 <prime_number+0xa0>
      {
        prime = 0;
    d3dc:	f04f 0e00 	mov.w	lr, #0
  for ( i = 2 + id; i <= n; i = i + p )
    d3e0:	4411      	add	r1, r2
    d3e2:	4288      	cmp	r0, r1
        break;
      }
    }
    total = total + prime;
    d3e4:	44f4      	add	ip, lr
  for ( i = 2 + id; i <= n; i = i + p )
    d3e6:	f6bf af77 	bge.w	d2d8 <prime_number+0x10>
  }
  return total;
}
    d3ea:	4660      	mov	r0, ip
    d3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    prime = 1;
    d3f0:	f04f 0e01 	mov.w	lr, #1
    d3f4:	e7f4      	b.n	d3e0 <prime_number+0x118>
  total = 0;
    d3f6:	2000      	movs	r0, #0
}
    d3f8:	4770      	bx	lr
    d3fa:	bf00      	nop

0000d3fc <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    d3fc:	e7fe      	b.n	d3fc <NMI_Handler>
    d3fe:	bf00      	nop

0000d400 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d400:	e7fe      	b.n	d400 <DebugMon_Handler>
    d402:	bf00      	nop

0000d404 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d404:	4811      	ldr	r0, [pc, #68]	; (d44c <zero_loop+0x12>)
    d406:	4912      	ldr	r1, [pc, #72]	; (d450 <zero_loop+0x16>)
    d408:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d40a:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d40e:	4811      	ldr	r0, [pc, #68]	; (d454 <zero_loop+0x1a>)
    d410:	6801      	ldr	r1, [r0, #0]
    d412:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d416:	6001      	str	r1, [r0, #0]
    d418:	f3bf 8f4f 	dsb	sy
    d41c:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d420:	480d      	ldr	r0, [pc, #52]	; (d458 <zero_loop+0x1e>)
    d422:	490e      	ldr	r1, [pc, #56]	; (d45c <zero_loop+0x22>)
    d424:	4a0e      	ldr	r2, [pc, #56]	; (d460 <zero_loop+0x26>)

0000d426 <copy_loop>:
    d426:	f850 3b04 	ldr.w	r3, [r0], #4
    d42a:	f841 3b04 	str.w	r3, [r1], #4
    d42e:	4291      	cmp	r1, r2
    d430:	dbf9      	blt.n	d426 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d432:	480c      	ldr	r0, [pc, #48]	; (d464 <zero_loop+0x2a>)
    d434:	490c      	ldr	r1, [pc, #48]	; (d468 <zero_loop+0x2e>)
    d436:	f04f 0200 	mov.w	r2, #0

0000d43a <zero_loop>:
    d43a:	4288      	cmp	r0, r1
    d43c:	bfb8      	it	lt
    d43e:	f840 2b04 	strlt.w	r2, [r0], #4
    d442:	dbfa      	blt.n	d43a <zero_loop>
    main();
    d444:	f7ff fea6 	bl	d194 <main>
    __asm("    bkpt     ");
    d448:	be00      	bkpt	0x0000
    d44a:	0000      	.short	0x0000
    d44c:	e000ed08 	.word	0xe000ed08
    d450:	0000c000 	.word	0x0000c000
    d454:	e000ed88 	.word	0xe000ed88
    d458:	00012490 	.word	0x00012490
    d45c:	10001000 	.word	0x10001000
    d460:	10001098 	.word	0x10001098
    d464:	10001098 	.word	0x10001098
    d468:	10007790 	.word	0x10007790

0000d46c <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    d46c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    d46e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    d470:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d472:	f000 f805 	bl	d480 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    d476:	bd01      	pop	{r0, pc}

0000d478 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d478:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d47a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d47c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d47e:	4770      	bx	lr

0000d480 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d480:	b500      	push	{lr}
    d482:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d484:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d486:	4a2e      	ldr	r2, [pc, #184]	; (d540 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d488:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d48a:	9301      	str	r3, [sp, #4]
    d48c:	9300      	str	r3, [sp, #0]
    d48e:	9302      	str	r3, [sp, #8]
    d490:	9303      	str	r3, [sp, #12]
    d492:	9304      	str	r3, [sp, #16]
    d494:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d496:	6811      	ldr	r1, [r2, #0]
    d498:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d49a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d49c:	b2d9      	uxtb	r1, r3
    d49e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d4a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d4a8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4ae:	0c19      	lsrs	r1, r3, #16
    d4b0:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d4b4:	6912      	ldr	r2, [r2, #16]
    d4b6:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d4b8:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    d4bc:	078a      	lsls	r2, r1, #30
{
    d4be:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d4c0:	d437      	bmi.n	d532 <am_util_faultisr_collect_data+0xb2>
    d4c2:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d4c6:	4619      	mov	r1, r3
    d4c8:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d4ca:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d4cc:	f7ff ffd4 	bl	d478 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d4d0:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d4d2:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d4d4:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d4d6:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d4d8:	f7ff ffce 	bl	d478 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d4dc:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d4de:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d4e0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d4e2:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d4e4:	f7ff ffc8 	bl	d478 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4e8:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d4ea:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4ec:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d4ee:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4f0:	f7ff ffc2 	bl	d478 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d4f4:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4f6:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d4f8:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d4fa:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d4fc:	f7ff ffbc 	bl	d478 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d500:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d502:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d504:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d506:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d508:	f7ff ffb6 	bl	d478 <getStackedReg>
    d50c:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d50e:	4619      	mov	r1, r3
    d510:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d512:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d514:	f7ff ffb0 	bl	d478 <getStackedReg>
    d518:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d51a:	4619      	mov	r1, r3
    d51c:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d51e:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d520:	f7ff ffaa 	bl	d478 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d524:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d526:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d528:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d52a:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d52c:	f002 fc30 	bl	fd90 <am_hal_mcuctrl_info_get>
    d530:	e7fe      	b.n	d530 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d532:	4601      	mov	r1, r0
    d534:	2006      	movs	r0, #6
    d536:	f7ff ff9f 	bl	d478 <getStackedReg>
    d53a:	4602      	mov	r2, r0
    d53c:	e7c3      	b.n	d4c6 <am_util_faultisr_collect_data+0x46>
    d53e:	bf00      	nop
    d540:	e000ed28 	.word	0xe000ed28

0000d544 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d548:	b095      	sub	sp, #84	; 0x54
    d54a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    d54e:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    d550:	2001      	movs	r0, #1
{
    d552:	460d      	mov	r5, r1
    d554:	920b      	str	r2, [sp, #44]	; 0x2c
    d556:	46f4      	mov	ip, lr
    d558:	900a      	str	r0, [sp, #40]	; 0x28
    d55a:	e00b      	b.n	d574 <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
    d55c:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d560:	4604      	mov	r4, r0
    d562:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    d564:	2800      	cmp	r0, #0
    d566:	f000 8083 	beq.w	d670 <uint64_to_str+0x12c>
    d56a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d56c:	3101      	adds	r1, #1
    d56e:	910a      	str	r1, [sp, #40]	; 0x28
    d570:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d574:	08a3      	lsrs	r3, r4, #2
    d576:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    d57a:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    d57e:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    d582:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    d586:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d588:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
    d58a:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d58e:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    d592:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
    d596:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
    d598:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
    d59c:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
    d59e:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
    d5a2:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
    d5a6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
    d5aa:	d0d7      	beq.n	d55c <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d5ac:	08a0      	lsrs	r0, r4, #2
    d5ae:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    d5b2:	08ae      	lsrs	r6, r5, #2
    d5b4:	9304      	str	r3, [sp, #16]
    d5b6:	9605      	str	r6, [sp, #20]
    d5b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    d5bc:	086b      	lsrs	r3, r5, #1
    d5be:	ea4f 0234 	mov.w	r2, r4, rrx
    d5c2:	1882      	adds	r2, r0, r2
    d5c4:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
    d5c8:	0911      	lsrs	r1, r2, #4
    d5ca:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
    d5ce:	1812      	adds	r2, r2, r0
    d5d0:	ea4f 1613 	mov.w	r6, r3, lsr #4
    d5d4:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
    d5d6:	0a11      	lsrs	r1, r2, #8
    d5d8:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
    d5dc:	0a1e      	lsrs	r6, r3, #8
    d5de:	9601      	str	r6, [sp, #4]
    d5e0:	9000      	str	r0, [sp, #0]
    d5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
    d5e6:	1882      	adds	r2, r0, r2
    d5e8:	4616      	mov	r6, r2
    d5ea:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
    d5ee:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
    d5f0:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
    d5f2:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
    d5f6:	0c1b      	lsrs	r3, r3, #16
    d5f8:	9303      	str	r3, [sp, #12]
    d5fa:	9002      	str	r0, [sp, #8]
    d5fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d600:	eb10 0806 	adds.w	r8, r0, r6
    d604:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
    d608:	9308      	str	r3, [sp, #32]
    d60a:	9709      	str	r7, [sp, #36]	; 0x24
    d60c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    d610:	eb10 0208 	adds.w	r2, r0, r8
    d614:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
    d618:	08d1      	lsrs	r1, r2, #3
    d61a:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
    d61e:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
    d620:	00b8      	lsls	r0, r7, #2
    d622:	ea4f 0a86 	mov.w	sl, r6, lsl #2
    d626:	eb1a 0906 	adds.w	r9, sl, r6
    d62a:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
    d62e:	eb48 0307 	adc.w	r3, r8, r7
    d632:	eb19 0209 	adds.w	r2, r9, r9
    d636:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    d638:	f114 0b06 	adds.w	fp, r4, #6
    d63c:	f145 0500 	adc.w	r5, r5, #0
    d640:	ebbb 0202 	subs.w	r2, fp, r2
    d644:	eb65 0303 	sbc.w	r3, r5, r3
    d648:	0915      	lsrs	r5, r2, #4
    d64a:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
    d64e:	091b      	lsrs	r3, r3, #4
    d650:	9206      	str	r2, [sp, #24]
    d652:	9307      	str	r3, [sp, #28]
    d654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d658:	1996      	adds	r6, r2, r6
    d65a:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
    d65e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    d662:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    d666:	3430      	adds	r4, #48	; 0x30
    d668:	f88c 4000 	strb.w	r4, [ip]
    d66c:	4634      	mov	r4, r6
    d66e:	e77c      	b.n	d56a <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d670:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    d672:	980a      	ldr	r0, [sp, #40]	; 0x28
    d674:	2e00      	cmp	r6, #0
    d676:	d059      	beq.n	d72c <uint64_to_str+0x1e8>
    d678:	eb0e 0a00 	add.w	sl, lr, r0
    d67c:	46d3      	mov	fp, sl
    d67e:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    d682:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    d686:	7037      	strb	r7, [r6, #0]
    d688:	44d4      	add	ip, sl
        while ( ix-- )
    d68a:	45de      	cmp	lr, fp
    d68c:	4632      	mov	r2, r6
    d68e:	f00c 0107 	and.w	r1, ip, #7
    d692:	bf08      	it	eq
    d694:	4632      	moveq	r2, r6
    d696:	d047      	beq.n	d728 <uint64_to_str+0x1e4>
    d698:	b349      	cbz	r1, d6ee <uint64_to_str+0x1aa>
    d69a:	2901      	cmp	r1, #1
    d69c:	d021      	beq.n	d6e2 <uint64_to_str+0x19e>
    d69e:	2902      	cmp	r1, #2
    d6a0:	d01b      	beq.n	d6da <uint64_to_str+0x196>
    d6a2:	2903      	cmp	r1, #3
    d6a4:	d015      	beq.n	d6d2 <uint64_to_str+0x18e>
    d6a6:	2904      	cmp	r1, #4
    d6a8:	d00f      	beq.n	d6ca <uint64_to_str+0x186>
    d6aa:	2905      	cmp	r1, #5
    d6ac:	d009      	beq.n	d6c2 <uint64_to_str+0x17e>
    d6ae:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
    d6b0:	bf1c      	itt	ne
    d6b2:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    d6b6:	f802 1f01 	strbne.w	r1, [r2, #1]!
    d6ba:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    d6be:	f802 3f01 	strb.w	r3, [r2, #1]!
    d6c2:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    d6c6:	f802 6f01 	strb.w	r6, [r2, #1]!
    d6ca:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    d6ce:	f802 4f01 	strb.w	r4, [r2, #1]!
    d6d2:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    d6d6:	f802 7f01 	strb.w	r7, [r2, #1]!
    d6da:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    d6de:	f802 5f01 	strb.w	r5, [r2, #1]!
    d6e2:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    d6e6:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
    d6ea:	45de      	cmp	lr, fp
    d6ec:	d01b      	beq.n	d726 <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
    d6ee:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    d6f2:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    d6f6:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    d6fa:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    d6fe:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    d702:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    d706:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    d70a:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    d70e:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
    d710:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
    d712:	7093      	strb	r3, [r2, #2]
    d714:	f882 9003 	strb.w	r9, [r2, #3]
    d718:	7117      	strb	r7, [r2, #4]
    d71a:	7156      	strb	r6, [r2, #5]
    d71c:	7195      	strb	r5, [r2, #6]
    d71e:	71d4      	strb	r4, [r2, #7]
    d720:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
    d724:	d1e3      	bne.n	d6ee <uint64_to_str+0x1aa>
    d726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d728:	2100      	movs	r1, #0
    d72a:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    d72c:	b015      	add	sp, #84	; 0x54
    d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d732:	bf00      	nop

0000d734 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    d734:	4b01      	ldr	r3, [pc, #4]	; (d73c <am_util_stdio_printf_init+0x8>)
    d736:	6018      	str	r0, [r3, #0]
    d738:	4770      	bx	lr
    d73a:	bf00      	nop
    d73c:	10003bd4 	.word	0x10003bd4

0000d740 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d744:	4680      	mov	r8, r0
    d746:	b0b1      	sub	sp, #196	; 0xc4
    d748:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d74a:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    d74e:	780b      	ldrb	r3, [r1, #0]
    d750:	b183      	cbz	r3, d774 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    d752:	2b25      	cmp	r3, #37	; 0x25
    d754:	d017      	beq.n	d786 <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d756:	f1b8 0f00 	cmp.w	r8, #0
    d75a:	d005      	beq.n	d768 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d75c:	2b0a      	cmp	r3, #10
    d75e:	d038      	beq.n	d7d2 <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    d760:	f888 3000 	strb.w	r3, [r8]
    d764:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
    d768:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    d76a:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    d76c:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    d770:	2b00      	cmp	r3, #0
    d772:	d1ee      	bne.n	d752 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d774:	f1b8 0f00 	cmp.w	r8, #0
    d778:	d001      	beq.n	d77e <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    d77a:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
    d77e:	4648      	mov	r0, r9
    d780:	b031      	add	sp, #196	; 0xc4
    d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    d786:	784a      	ldrb	r2, [r1, #1]
    d788:	2a30      	cmp	r2, #48	; 0x30
    d78a:	d03b      	beq.n	d804 <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
    d78c:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    d78e:	2520      	movs	r5, #32
    if ( *pcStr == '-')
    d790:	2a2d      	cmp	r2, #45	; 0x2d
    d792:	d02c      	beq.n	d7ee <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d794:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    d798:	2809      	cmp	r0, #9
    d79a:	d837      	bhi.n	d80c <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
    d79c:	2100      	movs	r1, #0
    bool bNeg = false;
    d79e:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7a0:	4630      	mov	r0, r6
        bNeg = true;
    d7a2:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
    d7a6:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
    d7aa:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    d7b2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    d7b6:	2c09      	cmp	r4, #9
        ++uCnt;
    d7b8:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    d7bc:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7c0:	d9f1      	bls.n	d7a6 <am_util_stdio_vsprintf+0x66>
    d7c2:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
    d7c4:	f1be 0f00 	cmp.w	lr, #0
    d7c8:	f041 80a1 	bne.w	e90e <am_util_stdio_vsprintf+0x11ce>
    d7cc:	4664      	mov	r4, ip
    d7ce:	7832      	ldrb	r2, [r6, #0]
    d7d0:	e01e      	b.n	d810 <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d7d2:	4ebd      	ldr	r6, [pc, #756]	; (dac8 <am_util_stdio_vsprintf+0x388>)
    d7d4:	7837      	ldrb	r7, [r6, #0]
    d7d6:	2f00      	cmp	r7, #0
    d7d8:	d0c2      	beq.n	d760 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    d7da:	f04f 0c0d 	mov.w	ip, #13
    d7de:	f888 c000 	strb.w	ip, [r8]
    d7e2:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    d7e4:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    d7e8:	f108 0801 	add.w	r8, r8, #1
    d7ec:	e7b8      	b.n	d760 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7ee:	7872      	ldrb	r2, [r6, #1]
    d7f0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    d7f4:	2c09      	cmp	r4, #9
        pcStr++;
    d7f6:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d7fa:	f200 8611 	bhi.w	e420 <am_util_stdio_vsprintf+0xce0>
        uCnt++;
    d7fe:	2101      	movs	r1, #1
        bNeg = true;
    d800:	468e      	mov	lr, r1
    d802:	e7ce      	b.n	d7a2 <am_util_stdio_vsprintf+0x62>
    d804:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    d806:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
    d808:	2530      	movs	r5, #48	; 0x30
    d80a:	e7c1      	b.n	d790 <am_util_stdio_vsprintf+0x50>
    d80c:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d80e:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d810:	2a73      	cmp	r2, #115	; 0x73
    d812:	f000 8304 	beq.w	de1e <am_util_stdio_vsprintf+0x6de>
    d816:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
    d81a:	2a2e      	cmp	r2, #46	; 0x2e
    d81c:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
    d820:	f000 82ae 	beq.w	dd80 <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
    d824:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
    d828:	2a6c      	cmp	r2, #108	; 0x6c
    d82a:	f000 82a3 	beq.w	dd74 <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
    d82e:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    d832:	2832      	cmp	r0, #50	; 0x32
    d834:	f200 8294 	bhi.w	dd60 <am_util_stdio_vsprintf+0x620>
    d838:	e8df f010 	tbh	[pc, r0, lsl #1]
    d83c:	02920115 	.word	0x02920115
    d840:	02920292 	.word	0x02920292
    d844:	02920292 	.word	0x02920292
    d848:	02920292 	.word	0x02920292
    d84c:	02920292 	.word	0x02920292
    d850:	02920292 	.word	0x02920292
    d854:	02920292 	.word	0x02920292
    d858:	02920292 	.word	0x02920292
    d85c:	02920292 	.word	0x02920292
    d860:	02920033 	.word	0x02920033
    d864:	02920292 	.word	0x02920292
    d868:	02920292 	.word	0x02920292
    d86c:	02920292 	.word	0x02920292
    d870:	02920292 	.word	0x02920292
    d874:	01360292 	.word	0x01360292
    d878:	0292014a 	.word	0x0292014a
    d87c:	02920115 	.word	0x02920115
    d880:	014a0292 	.word	0x014a0292
    d884:	02920292 	.word	0x02920292
    d888:	02920292 	.word	0x02920292
    d88c:	02920292 	.word	0x02920292
    d890:	02920292 	.word	0x02920292
    d894:	02f00292 	.word	0x02f00292
    d898:	01f20292 	.word	0x01f20292
    d89c:	02920292 	.word	0x02920292
    d8a0:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
    d8a2:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d8a6:	f8db 2000 	ldr.w	r2, [fp]
    d8aa:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
    d8ac:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    d8b0:	2c00      	cmp	r4, #0
    d8b2:	d06d      	beq.n	d990 <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
    d8b4:	ea52 0103 	orrs.w	r1, r2, r3
    d8b8:	bf0c      	ite	eq
    d8ba:	f04f 0e01 	moveq.w	lr, #1
    d8be:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    d8c2:	ea52 0103 	orrs.w	r1, r2, r3
    d8c6:	d00b      	beq.n	d8e0 <am_util_stdio_vsprintf+0x1a0>
    d8c8:	4610      	mov	r0, r2
    d8ca:	4619      	mov	r1, r3
        ui64Val >>= 4;
    d8cc:	090c      	lsrs	r4, r1, #4
    d8ce:	0900      	lsrs	r0, r0, #4
    d8d0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    d8d4:	4621      	mov	r1, r4
    while ( ui64Val )
    d8d6:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
    d8da:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    d8de:	d1f5      	bne.n	d8cc <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
    d8e0:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    d8e4:	2f00      	cmp	r7, #0
    d8e6:	f340 855f 	ble.w	e3a8 <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
    d8ea:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
    d8ee:	f1b8 0f00 	cmp.w	r8, #0
    d8f2:	f000 855a 	beq.w	e3aa <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
    d8f6:	4641      	mov	r1, r8
    d8f8:	f00a 0707 	and.w	r7, sl, #7
    d8fc:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d900:	f10a 30ff 	add.w	r0, sl, #4294967295
    d904:	eba1 0408 	sub.w	r4, r1, r8
    d908:	f1ba 0f00 	cmp.w	sl, #0
    d90c:	d03d      	beq.n	d98a <am_util_stdio_vsprintf+0x24a>
    d90e:	b32f      	cbz	r7, d95c <am_util_stdio_vsprintf+0x21c>
    d910:	2f01      	cmp	r7, #1
    d912:	d01c      	beq.n	d94e <am_util_stdio_vsprintf+0x20e>
    d914:	2f02      	cmp	r7, #2
    d916:	d017      	beq.n	d948 <am_util_stdio_vsprintf+0x208>
    d918:	2f03      	cmp	r7, #3
    d91a:	d012      	beq.n	d942 <am_util_stdio_vsprintf+0x202>
    d91c:	2f04      	cmp	r7, #4
    d91e:	d00d      	beq.n	d93c <am_util_stdio_vsprintf+0x1fc>
    d920:	2f05      	cmp	r7, #5
    d922:	d008      	beq.n	d936 <am_util_stdio_vsprintf+0x1f6>
    d924:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
    d926:	bf1c      	itt	ne
    d928:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
    d92c:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
    d930:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d934:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    d936:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d93a:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    d93c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d940:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    d942:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d946:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    d948:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d94c:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    d94e:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    d952:	3801      	subs	r0, #1
    d954:	1c47      	adds	r7, r0, #1
    d956:	eba1 0408 	sub.w	r4, r1, r8
    d95a:	d016      	beq.n	d98a <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
    d95c:	468a      	mov	sl, r1
    while ( i32NumChars-- )
    d95e:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
    d960:	f80a 5b01 	strb.w	r5, [sl], #1
    d964:	3108      	adds	r1, #8
    d966:	f88a 5000 	strb.w	r5, [sl]
    d96a:	f801 5c06 	strb.w	r5, [r1, #-6]
    d96e:	f801 5c05 	strb.w	r5, [r1, #-5]
    d972:	f801 5c04 	strb.w	r5, [r1, #-4]
    d976:	f801 5c03 	strb.w	r5, [r1, #-3]
    d97a:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
    d97e:	1c47      	adds	r7, r0, #1
    d980:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
    d984:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
    d988:	d1e8      	bne.n	d95c <am_util_stdio_vsprintf+0x21c>
    d98a:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
    d98c:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
    d98e:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    d990:	ea52 0103 	orrs.w	r1, r2, r3
    d994:	f040 821a 	bne.w	ddcc <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
    d998:	f04f 0530 	mov.w	r5, #48	; 0x30
    d99c:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
    d9a0:	2701      	movs	r7, #1
    d9a2:	f1b8 0f00 	cmp.w	r8, #0
    d9a6:	f000 8235 	beq.w	de14 <am_util_stdio_vsprintf+0x6d4>
    d9aa:	4639      	mov	r1, r7
        while (ix--)
    d9ac:	2000      	movs	r0, #0
    d9ae:	ac2b      	add	r4, sp, #172	; 0xac
    d9b0:	1863      	adds	r3, r4, r1
    d9b2:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
    d9b6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    d9ba:	f888 c000 	strb.w	ip, [r8]
    d9be:	1e4d      	subs	r5, r1, #1
        while (ix--)
    d9c0:	45a2      	cmp	sl, r4
    d9c2:	f005 0107 	and.w	r1, r5, #7
    d9c6:	4643      	mov	r3, r8
    d9c8:	d047      	beq.n	da5a <am_util_stdio_vsprintf+0x31a>
    d9ca:	b359      	cbz	r1, da24 <am_util_stdio_vsprintf+0x2e4>
    d9cc:	2901      	cmp	r1, #1
    d9ce:	d023      	beq.n	da18 <am_util_stdio_vsprintf+0x2d8>
    d9d0:	2902      	cmp	r1, #2
    d9d2:	d01d      	beq.n	da10 <am_util_stdio_vsprintf+0x2d0>
    d9d4:	2903      	cmp	r1, #3
    d9d6:	d017      	beq.n	da08 <am_util_stdio_vsprintf+0x2c8>
    d9d8:	2904      	cmp	r1, #4
    d9da:	d011      	beq.n	da00 <am_util_stdio_vsprintf+0x2c0>
    d9dc:	2905      	cmp	r1, #5
    d9de:	d00b      	beq.n	d9f8 <am_util_stdio_vsprintf+0x2b8>
    d9e0:	2906      	cmp	r1, #6
    d9e2:	d005      	beq.n	d9f0 <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
    d9e4:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    d9e8:	f888 2001 	strb.w	r2, [r8, #1]
    d9ec:	f108 0301 	add.w	r3, r8, #1
    d9f0:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    d9f4:	f803 5f01 	strb.w	r5, [r3, #1]!
    d9f8:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    d9fc:	f803 cf01 	strb.w	ip, [r3, #1]!
    da00:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    da04:	f803 1f01 	strb.w	r1, [r3, #1]!
    da08:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    da0c:	f803 2f01 	strb.w	r2, [r3, #1]!
    da10:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    da14:	f803 5f01 	strb.w	r5, [r3, #1]!
    da18:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    da1c:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
    da20:	45a2      	cmp	sl, r4
    da22:	d01a      	beq.n	da5a <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
    da24:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    da28:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
    da2c:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    da30:	705a      	strb	r2, [r3, #1]
    da32:	70dd      	strb	r5, [r3, #3]
    da34:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
    da38:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
    da3c:	7099      	strb	r1, [r3, #2]
    da3e:	711a      	strb	r2, [r3, #4]
    da40:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    da44:	715d      	strb	r5, [r3, #5]
    da46:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
    da4a:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
    da4e:	7199      	strb	r1, [r3, #6]
        while (ix--)
    da50:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
    da52:	71da      	strb	r2, [r3, #7]
    da54:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
    da58:	d1e4      	bne.n	da24 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
    da5a:	4440      	add	r0, r8
    da5c:	2400      	movs	r4, #0
                    pcBuf += iVal;
    da5e:	44b8      	add	r8, r7
        *pcBuf = 0;
    da60:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
    da62:	44b9      	add	r9, r7
                break;
    da64:	e01e      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
    da66:	f1b8 0f00 	cmp.w	r8, #0
    da6a:	d01b      	beq.n	daa4 <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
    da6c:	f10b 0307 	add.w	r3, fp, #7
    da70:	f023 0b07 	bic.w	fp, r3, #7
    da74:	e9db 0100 	ldrd	r0, r1, [fp]
    da78:	f7fe fb42 	bl	c100 <__aeabi_d2f>
    da7c:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    da80:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    da84:	2014      	movs	r0, #20
    if (fValue == 0.0f)
    da86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
    da8a:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
    da8e:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
    da92:	f040 848d 	bne.w	e3b0 <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    da96:	490d      	ldr	r1, [pc, #52]	; (dacc <am_util_stdio_vsprintf+0x38c>)
    da98:	f8c8 1000 	str.w	r1, [r8]
    da9c:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
    daa0:	44d1      	add	r9, sl
                    pcBuf += iVal;
    daa2:	44d0      	add	r8, sl
        ++pcFmt;
    daa4:	1c71      	adds	r1, r6, #1
    daa6:	e652      	b.n	d74e <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    daa8:	f10b 0404 	add.w	r4, fp, #4
    daac:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
    dab0:	f1b8 0f00 	cmp.w	r8, #0
    dab4:	d003      	beq.n	dabe <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
    dab6:	f888 1000 	strb.w	r1, [r8]
    daba:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    dabe:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    dac2:	46a3      	mov	fp, r4
                break;
    dac4:	e7ee      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
    dac6:	bf00      	nop
    dac8:	100010c8 	.word	0x100010c8
    dacc:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dad0:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
    dad4:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dad8:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    dada:	2800      	cmp	r0, #0
    dadc:	f171 0300 	sbcs.w	r3, r1, #0
    dae0:	f2c0 83ac 	blt.w	e23c <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
    dae4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    dae8:	2c00      	cmp	r4, #0
    daea:	f000 83ba 	beq.w	e262 <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
    daee:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    daf2:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
    daf4:	bf0c      	ite	eq
    daf6:	2401      	moveq	r4, #1
    daf8:	2400      	movne	r4, #0
    while ( ui64Val )
    dafa:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    dafc:	460b      	mov	r3, r1
                    bNeg = false;
    dafe:	bf18      	it	ne
    db00:	2000      	movne	r0, #0
    while ( ui64Val )
    db02:	f000 86ba 	beq.w	e87a <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
    db06:	901b      	str	r0, [sp, #108]	; 0x6c
    db08:	9620      	str	r6, [sp, #128]	; 0x80
    db0a:	9521      	str	r5, [sp, #132]	; 0x84
    db0c:	9722      	str	r7, [sp, #136]	; 0x88
    db0e:	941a      	str	r4, [sp, #104]	; 0x68
    db10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    db14:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    db18:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    db1c:	e009      	b.n	db32 <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    db1e:	464a      	mov	r2, r9
    db20:	2300      	movs	r3, #0
        ++iNDigits;
    db22:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    db24:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    db28:	f105 0501 	add.w	r5, r5, #1
    db2c:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    db2e:	f000 83a5 	beq.w	e27c <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    db32:	0896      	lsrs	r6, r2, #2
    db34:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
    db38:	089f      	lsrs	r7, r3, #2
    db3a:	970b      	str	r7, [sp, #44]	; 0x2c
    db3c:	950a      	str	r5, [sp, #40]	; 0x28
    db3e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    db42:	0859      	lsrs	r1, r3, #1
    db44:	ea4f 0032 	mov.w	r0, r2, rrx
    db48:	1820      	adds	r0, r4, r0
    db4a:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    db4e:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    db50:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    db52:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
    db56:	0908      	lsrs	r0, r1, #4
    db58:	9005      	str	r0, [sp, #20]
    db5a:	9504      	str	r5, [sp, #16]
    db5c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    db60:	19a0      	adds	r0, r4, r6
    db62:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    db66:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
    db68:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    db6a:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
    db6e:	0a08      	lsrs	r0, r1, #8
    db70:	9007      	str	r0, [sp, #28]
    db72:	9506      	str	r5, [sp, #24]
    db74:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    db78:	19a0      	adds	r0, r4, r6
    db7a:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    db7e:	0c06      	lsrs	r6, r0, #16
    db80:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    db84:	eb10 070a 	adds.w	r7, r0, sl
    db88:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    db8c:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    db90:	2400      	movs	r4, #0
    db92:	900e      	str	r0, [sp, #56]	; 0x38
    db94:	940f      	str	r4, [sp, #60]	; 0x3c
    db96:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    db9a:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    db9c:	eb18 0807 	adds.w	r8, r8, r7
    dba0:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    dba4:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    dba8:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    dbaa:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    dbae:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    dbb0:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    dbb4:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    dbb6:	9312      	str	r3, [sp, #72]	; 0x48
    dbb8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
    dbbc:	08ff      	lsrs	r7, r7, #3
    dbbe:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    dbc2:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
    dbc6:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    dbca:	00bd      	lsls	r5, r7, #2
    dbcc:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    dbd0:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    dbd2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    dbd6:	f102 0e06 	add.w	lr, r2, #6
    dbda:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    dbde:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    dbe2:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    dbe6:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    dbea:	d098      	beq.n	db1e <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
    dbec:	eb10 0e06 	adds.w	lr, r0, r6
    dbf0:	4179      	adcs	r1, r7
    dbf2:	eb1e 000e 	adds.w	r0, lr, lr
    dbf6:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    dbf8:	3206      	adds	r2, #6
    dbfa:	f143 0300 	adc.w	r3, r3, #0
    dbfe:	1a15      	subs	r5, r2, r0
    dc00:	eb63 0401 	sbc.w	r4, r3, r1
    dc04:	0929      	lsrs	r1, r5, #4
    dc06:	0922      	lsrs	r2, r4, #4
    dc08:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    dc0c:	9016      	str	r0, [sp, #88]	; 0x58
    dc0e:	9217      	str	r2, [sp, #92]	; 0x5c
    dc10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dc14:	1992      	adds	r2, r2, r6
    dc16:	417b      	adcs	r3, r7
    dc18:	e783      	b.n	db22 <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
    dc1a:	f04f 0c01 	mov.w	ip, #1
    dc1e:	e642      	b.n	d8a6 <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dc20:	f8db 1000 	ldr.w	r1, [fp]
    dc24:	2200      	movs	r2, #0
    dc26:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
    dc2a:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    dc2e:	2c00      	cmp	r4, #0
    dc30:	f000 8269 	beq.w	e106 <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
    dc34:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    dc38:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
    dc3c:	4602      	mov	r2, r0
    dc3e:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    dc40:	bf0c      	ite	eq
    dc42:	2401      	moveq	r4, #1
    dc44:	2400      	movne	r4, #0
    while ( ui64Val )
    dc46:	ea52 0103 	orrs.w	r1, r2, r3
    dc4a:	f000 81fe 	beq.w	e04a <am_util_stdio_vsprintf+0x90a>
    dc4e:	961b      	str	r6, [sp, #108]	; 0x6c
    dc50:	9520      	str	r5, [sp, #128]	; 0x80
    dc52:	9721      	str	r7, [sp, #132]	; 0x84
    dc54:	941a      	str	r4, [sp, #104]	; 0x68
    dc56:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    dc5a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    dc5e:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    dc62:	e009      	b.n	dc78 <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    dc64:	464a      	mov	r2, r9
    dc66:	2300      	movs	r3, #0
        ++iNDigits;
    dc68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    dc6a:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    dc6e:	f105 0501 	add.w	r5, r5, #1
    dc72:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    dc74:	f000 81db 	beq.w	e02e <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    dc78:	0895      	lsrs	r5, r2, #2
    dc7a:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
    dc7e:	089c      	lsrs	r4, r3, #2
    dc80:	9708      	str	r7, [sp, #32]
    dc82:	9409      	str	r4, [sp, #36]	; 0x24
    dc84:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    dc88:	0859      	lsrs	r1, r3, #1
    dc8a:	ea4f 0032 	mov.w	r0, r2, rrx
    dc8e:	1820      	adds	r0, r4, r0
    dc90:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    dc94:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    dc96:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    dc98:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
    dc9c:	0908      	lsrs	r0, r1, #4
    dc9e:	9001      	str	r0, [sp, #4]
    dca0:	9400      	str	r4, [sp, #0]
    dca2:	e9dd 4500 	ldrd	r4, r5, [sp]
    dca6:	19a0      	adds	r0, r4, r6
    dca8:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    dcac:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
    dcae:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    dcb0:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    dcb4:	0a08      	lsrs	r0, r1, #8
    dcb6:	9003      	str	r0, [sp, #12]
    dcb8:	9402      	str	r4, [sp, #8]
    dcba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    dcbe:	19a0      	adds	r0, r4, r6
    dcc0:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    dcc4:	0c06      	lsrs	r6, r0, #16
    dcc6:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    dcca:	eb10 070a 	adds.w	r7, r0, sl
    dcce:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    dcd2:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    dcd6:	2400      	movs	r4, #0
    dcd8:	900c      	str	r0, [sp, #48]	; 0x30
    dcda:	940d      	str	r4, [sp, #52]	; 0x34
    dcdc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    dce0:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    dce2:	eb18 0807 	adds.w	r8, r8, r7
    dce6:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    dcea:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    dcee:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    dcf0:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    dcf4:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    dcf6:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    dcfa:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    dcfc:	9310      	str	r3, [sp, #64]	; 0x40
    dcfe:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
    dd02:	08ff      	lsrs	r7, r7, #3
    dd04:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    dd08:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
    dd0c:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    dd10:	00bd      	lsls	r5, r7, #2
    dd12:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    dd16:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    dd18:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    dd1c:	f102 0e06 	add.w	lr, r2, #6
    dd20:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    dd24:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    dd28:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    dd2c:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    dd30:	d098      	beq.n	dc64 <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
    dd32:	eb10 0e06 	adds.w	lr, r0, r6
    dd36:	4179      	adcs	r1, r7
    dd38:	eb1e 000e 	adds.w	r0, lr, lr
    dd3c:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    dd3e:	3206      	adds	r2, #6
    dd40:	f143 0300 	adc.w	r3, r3, #0
    dd44:	1a15      	subs	r5, r2, r0
    dd46:	eb63 0401 	sbc.w	r4, r3, r1
    dd4a:	0929      	lsrs	r1, r5, #4
    dd4c:	0922      	lsrs	r2, r4, #4
    dd4e:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    dd52:	9014      	str	r0, [sp, #80]	; 0x50
    dd54:	9215      	str	r2, [sp, #84]	; 0x54
    dd56:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    dd5a:	1992      	adds	r2, r2, r6
    dd5c:	417b      	adcs	r3, r7
    dd5e:	e783      	b.n	dc68 <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
    dd60:	f1b8 0f00 	cmp.w	r8, #0
    dd64:	d003      	beq.n	dd6e <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
    dd66:	f888 2000 	strb.w	r2, [r8]
    dd6a:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    dd6e:	f109 0901 	add.w	r9, r9, #1
                break;
    dd72:	e697      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dd74:	7872      	ldrb	r2, [r6, #1]
    dd76:	2a6c      	cmp	r2, #108	; 0x6c
    dd78:	f000 81db 	beq.w	e132 <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
    dd7c:	3601      	adds	r6, #1
    dd7e:	e556      	b.n	d82e <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
    dd80:	7873      	ldrb	r3, [r6, #1]
    dd82:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
    dd84:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
    dd88:	f000 81c8 	beq.w	e11c <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dd8c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    dd90:	2e09      	cmp	r6, #9
    dd92:	f200 8349 	bhi.w	e428 <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
    dd96:	2200      	movs	r2, #0
    bool bNeg = false;
    dd98:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dd9a:	4606      	mov	r6, r0
    bool bNeg = false;
    dd9c:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
    dda0:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
    dda4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dda8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    ddac:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    ddb0:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    ddb4:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
    ddb8:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ddbc:	d9f0      	bls.n	dda0 <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
    ddbe:	f1bc 0f00 	cmp.w	ip, #0
    ddc2:	f000 8334 	beq.w	e42e <am_util_stdio_vsprintf+0xcee>
    ddc6:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
    ddca:	e330      	b.n	e42e <am_util_stdio_vsprintf+0xcee>
    ddcc:	f1bc 0f00 	cmp.w	ip, #0
    ddd0:	bf14      	ite	ne
    ddd2:	2727      	movne	r7, #39	; 0x27
    ddd4:	2707      	moveq	r7, #7
    ddd6:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
    ddda:	2000      	movs	r0, #0
    dddc:	e000      	b.n	dde0 <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
    ddde:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
    dde0:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    dde4:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
    dde8:	2909      	cmp	r1, #9
    ddea:	bf88      	it	hi
    ddec:	4671      	movhi	r1, lr
        ui64Val >>= 4;
    ddee:	0912      	lsrs	r2, r2, #4
    ddf0:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    ddf4:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    ddf8:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
    ddfa:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    ddfc:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
    de00:	f804 1f01 	strb.w	r1, [r4, #1]!
    de04:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
    de08:	d1e9      	bne.n	ddde <am_util_stdio_vsprintf+0x69e>
    de0a:	460f      	mov	r7, r1
    if (pcBuf)
    de0c:	f1b8 0f00 	cmp.w	r8, #0
    de10:	f47f adcd 	bne.w	d9ae <am_util_stdio_vsprintf+0x26e>
    de14:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    de18:	44b9      	add	r9, r7
    de1a:	e643      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
    de1c:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
    de1e:	f8db 0000 	ldr.w	r0, [fp]
    de22:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
    de26:	2800      	cmp	r0, #0
    de28:	f000 8085 	beq.w	df36 <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
    de2c:	7801      	ldrb	r1, [r0, #0]
    de2e:	1c42      	adds	r2, r0, #1
    de30:	4613      	mov	r3, r2
    de32:	2900      	cmp	r1, #0
    de34:	f000 84f3 	beq.w	e81e <am_util_stdio_vsprintf+0x10de>
    de38:	eba3 0e00 	sub.w	lr, r3, r0
    de3c:	f813 7b01 	ldrb.w	r7, [r3], #1
    de40:	2f00      	cmp	r7, #0
    de42:	d1f9      	bne.n	de38 <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
    de44:	2c00      	cmp	r4, #0
    de46:	4677      	mov	r7, lr
    de48:	dd01      	ble.n	de4e <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
    de4a:	4574      	cmp	r4, lr
    de4c:	d877      	bhi.n	df3e <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
    de4e:	f1b8 0f00 	cmp.w	r8, #0
    de52:	f000 80e1 	beq.w	e018 <am_util_stdio_vsprintf+0x8d8>
    de56:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
    de5a:	f808 1b01 	strb.w	r1, [r8], #1
    de5e:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
    de62:	f812 1b01 	ldrb.w	r1, [r2], #1
    de66:	2900      	cmp	r1, #0
    de68:	d1f7      	bne.n	de5a <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
    de6a:	2c00      	cmp	r4, #0
    de6c:	f43f ae1a 	beq.w	daa4 <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
    de70:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
    de72:	42bb      	cmp	r3, r7
    de74:	f67f ae16 	bls.w	daa4 <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
    de78:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
    de7a:	2a00      	cmp	r2, #0
    de7c:	f340 84c3 	ble.w	e806 <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
    de80:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
    de82:	f1b8 0f00 	cmp.w	r8, #0
    de86:	f000 84bf 	beq.w	e808 <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
    de8a:	4643      	mov	r3, r8
    de8c:	f007 0407 	and.w	r4, r7, #7
    de90:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    de94:	f107 3cff 	add.w	ip, r7, #4294967295
    de98:	eba3 0108 	sub.w	r1, r3, r8
    de9c:	2f00      	cmp	r7, #0
    de9e:	d045      	beq.n	df2c <am_util_stdio_vsprintf+0x7ec>
    dea0:	b364      	cbz	r4, defc <am_util_stdio_vsprintf+0x7bc>
    dea2:	2c01      	cmp	r4, #1
    dea4:	d021      	beq.n	deea <am_util_stdio_vsprintf+0x7aa>
    dea6:	2c02      	cmp	r4, #2
    dea8:	d01b      	beq.n	dee2 <am_util_stdio_vsprintf+0x7a2>
    deaa:	2c03      	cmp	r4, #3
    deac:	d015      	beq.n	deda <am_util_stdio_vsprintf+0x79a>
    deae:	2c04      	cmp	r4, #4
    deb0:	d00f      	beq.n	ded2 <am_util_stdio_vsprintf+0x792>
    deb2:	2c05      	cmp	r4, #5
    deb4:	d009      	beq.n	deca <am_util_stdio_vsprintf+0x78a>
    deb6:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    deb8:	bf1c      	itt	ne
    deba:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    debe:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    dec2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dec6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    deca:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dece:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    ded2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ded6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    deda:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dede:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    dee2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dee6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    deea:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    deee:	f10c 3cff 	add.w	ip, ip, #4294967295
    def2:	f11c 0701 	adds.w	r7, ip, #1
    def6:	eba3 0108 	sub.w	r1, r3, r8
    defa:	d017      	beq.n	df2c <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
    defc:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    defe:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
    df02:	f800 5b01 	strb.w	r5, [r0], #1
    df06:	3308      	adds	r3, #8
    df08:	7005      	strb	r5, [r0, #0]
    df0a:	f803 5c06 	strb.w	r5, [r3, #-6]
    df0e:	f803 5c05 	strb.w	r5, [r3, #-5]
    df12:	f803 5c04 	strb.w	r5, [r3, #-4]
    df16:	f803 5c03 	strb.w	r5, [r3, #-3]
    df1a:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    df1e:	f11c 0001 	adds.w	r0, ip, #1
    df22:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    df26:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    df2a:	d1e7      	bne.n	defc <am_util_stdio_vsprintf+0x7bc>
    df2c:	460d      	mov	r5, r1
    df2e:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    df30:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    df32:	4491      	add	r9, r2
    df34:	e5b6      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    df36:	2c00      	cmp	r4, #0
    df38:	f340 8443 	ble.w	e7c2 <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    df3c:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    df3e:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    df40:	2a00      	cmp	r2, #0
    df42:	f340 8464 	ble.w	e80e <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    df46:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    df4a:	f1b8 0f00 	cmp.w	r8, #0
    df4e:	d05c      	beq.n	e00a <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    df50:	4643      	mov	r3, r8
    df52:	f00e 0407 	and.w	r4, lr, #7
    df56:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    df5a:	f10e 3aff 	add.w	sl, lr, #4294967295
    df5e:	eba3 0c08 	sub.w	ip, r3, r8
    df62:	f1be 0f00 	cmp.w	lr, #0
    df66:	d045      	beq.n	dff4 <am_util_stdio_vsprintf+0x8b4>
    df68:	b364      	cbz	r4, dfc4 <am_util_stdio_vsprintf+0x884>
    df6a:	2c01      	cmp	r4, #1
    df6c:	d021      	beq.n	dfb2 <am_util_stdio_vsprintf+0x872>
    df6e:	2c02      	cmp	r4, #2
    df70:	d01b      	beq.n	dfaa <am_util_stdio_vsprintf+0x86a>
    df72:	2c03      	cmp	r4, #3
    df74:	d015      	beq.n	dfa2 <am_util_stdio_vsprintf+0x862>
    df76:	2c04      	cmp	r4, #4
    df78:	d00f      	beq.n	df9a <am_util_stdio_vsprintf+0x85a>
    df7a:	2c05      	cmp	r4, #5
    df7c:	d009      	beq.n	df92 <am_util_stdio_vsprintf+0x852>
    df7e:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    df80:	bf1c      	itt	ne
    df82:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    df86:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    df8a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    df8e:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    df92:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    df96:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    df9a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    df9e:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    dfa2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dfa6:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    dfaa:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dfae:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    dfb2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    dfb6:	f10a 3aff 	add.w	sl, sl, #4294967295
    dfba:	f11a 0401 	adds.w	r4, sl, #1
    dfbe:	eba3 0c08 	sub.w	ip, r3, r8
    dfc2:	d017      	beq.n	dff4 <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    dfc4:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    dfc6:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    dfca:	f801 5b01 	strb.w	r5, [r1], #1
    dfce:	3308      	adds	r3, #8
    dfd0:	700d      	strb	r5, [r1, #0]
    dfd2:	f803 5c06 	strb.w	r5, [r3, #-6]
    dfd6:	f803 5c05 	strb.w	r5, [r3, #-5]
    dfda:	f803 5c04 	strb.w	r5, [r3, #-4]
    dfde:	f803 5c03 	strb.w	r5, [r3, #-3]
    dfe2:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    dfe6:	f11a 0401 	adds.w	r4, sl, #1
    dfea:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    dfee:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    dff2:	d1e7      	bne.n	dfc4 <am_util_stdio_vsprintf+0x884>
    dff4:	4664      	mov	r4, ip
    dff6:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    dff8:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    dffa:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    dffc:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    dffe:	2900      	cmp	r1, #0
    e000:	f43f ad50 	beq.w	daa4 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    e004:	2400      	movs	r4, #0
    e006:	1c42      	adds	r2, r0, #1
    e008:	e721      	b.n	de4e <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    e00a:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    e00c:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    e00e:	2b00      	cmp	r3, #0
    e010:	f43f ad48 	beq.w	daa4 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    e014:	2400      	movs	r4, #0
    e016:	1c42      	adds	r2, r0, #1
    e018:	4690      	mov	r8, r2
    e01a:	eba9 0000 	sub.w	r0, r9, r0
    e01e:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    e022:	f818 1b01 	ldrb.w	r1, [r8], #1
    e026:	2900      	cmp	r1, #0
    e028:	d1f9      	bne.n	e01e <am_util_stdio_vsprintf+0x8de>
    e02a:	4688      	mov	r8, r1
    e02c:	e71d      	b.n	de6a <am_util_stdio_vsprintf+0x72a>
    e02e:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    e032:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    e036:	9d20      	ldr	r5, [sp, #128]	; 0x80
    e038:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    e03a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    e03c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    e03e:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    e042:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    e046:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    e04a:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    e04c:	2c00      	cmp	r4, #0
    e04e:	f340 81e3 	ble.w	e418 <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    e052:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    e054:	f1b8 0f00 	cmp.w	r8, #0
    e058:	f000 81df 	beq.w	e41a <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    e05c:	4643      	mov	r3, r8
    e05e:	f007 0007 	and.w	r0, r7, #7
    e062:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e066:	f1a4 0a02 	sub.w	sl, r4, #2
    e06a:	eba3 0c08 	sub.w	ip, r3, r8
    e06e:	2f00      	cmp	r7, #0
    e070:	d046      	beq.n	e100 <am_util_stdio_vsprintf+0x9c0>
    e072:	b360      	cbz	r0, e0ce <am_util_stdio_vsprintf+0x98e>
    e074:	2801      	cmp	r0, #1
    e076:	d021      	beq.n	e0bc <am_util_stdio_vsprintf+0x97c>
    e078:	2802      	cmp	r0, #2
    e07a:	d01b      	beq.n	e0b4 <am_util_stdio_vsprintf+0x974>
    e07c:	2803      	cmp	r0, #3
    e07e:	d015      	beq.n	e0ac <am_util_stdio_vsprintf+0x96c>
    e080:	2804      	cmp	r0, #4
    e082:	d00f      	beq.n	e0a4 <am_util_stdio_vsprintf+0x964>
    e084:	2805      	cmp	r0, #5
    e086:	d009      	beq.n	e09c <am_util_stdio_vsprintf+0x95c>
    e088:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    e08a:	bf1c      	itt	ne
    e08c:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    e090:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e094:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e098:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e09c:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e0a0:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e0a4:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e0a8:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e0ac:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e0b0:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e0b4:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e0b8:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    e0bc:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    e0c0:	f10a 3aff 	add.w	sl, sl, #4294967295
    e0c4:	f11a 0001 	adds.w	r0, sl, #1
    e0c8:	eba3 0c08 	sub.w	ip, r3, r8
    e0cc:	d018      	beq.n	e100 <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    e0ce:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    e0d0:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    e0d4:	f80e 5b01 	strb.w	r5, [lr], #1
    e0d8:	3308      	adds	r3, #8
    e0da:	f88e 5000 	strb.w	r5, [lr]
    e0de:	f803 5c06 	strb.w	r5, [r3, #-6]
    e0e2:	f803 5c05 	strb.w	r5, [r3, #-5]
    e0e6:	f803 5c04 	strb.w	r5, [r3, #-4]
    e0ea:	f803 5c03 	strb.w	r5, [r3, #-3]
    e0ee:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    e0f2:	f11a 0701 	adds.w	r7, sl, #1
    e0f6:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    e0fa:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    e0fe:	d1e6      	bne.n	e0ce <am_util_stdio_vsprintf+0x98e>
    e100:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    e102:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    e104:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    e106:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e10a:	4642      	mov	r2, r8
    e10c:	f7ff fa1a 	bl	d544 <uint64_to_str>
                if ( pcBuf )
    e110:	f1b8 0f00 	cmp.w	r8, #0
    e114:	d000      	beq.n	e118 <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    e116:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    e118:	4481      	add	r9, r0
                break;
    e11a:	e4c3      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    e11c:	78b3      	ldrb	r3, [r6, #2]
    e11e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    e122:	2909      	cmp	r1, #9
        pcStr++;
    e124:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    e128:	f200 8391 	bhi.w	e84e <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    e12c:	2201      	movs	r2, #1
        bNeg = true;
    e12e:	4694      	mov	ip, r2
    e130:	e634      	b.n	dd9c <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    e132:	78b2      	ldrb	r2, [r6, #2]
    e134:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    e138:	3602      	adds	r6, #2
        switch ( *pcFmt )
    e13a:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    e13e:	f63f ae0f 	bhi.w	dd60 <am_util_stdio_vsprintf+0x620>
    e142:	a101      	add	r1, pc, #4	; (adr r1, e148 <am_util_stdio_vsprintf+0xa08>)
    e144:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    e148:	0000da67 	.word	0x0000da67
    e14c:	0000dd61 	.word	0x0000dd61
    e150:	0000dd61 	.word	0x0000dd61
    e154:	0000dd61 	.word	0x0000dd61
    e158:	0000dd61 	.word	0x0000dd61
    e15c:	0000dd61 	.word	0x0000dd61
    e160:	0000dd61 	.word	0x0000dd61
    e164:	0000dd61 	.word	0x0000dd61
    e168:	0000dd61 	.word	0x0000dd61
    e16c:	0000dd61 	.word	0x0000dd61
    e170:	0000dd61 	.word	0x0000dd61
    e174:	0000dd61 	.word	0x0000dd61
    e178:	0000dd61 	.word	0x0000dd61
    e17c:	0000dd61 	.word	0x0000dd61
    e180:	0000dd61 	.word	0x0000dd61
    e184:	0000dd61 	.word	0x0000dd61
    e188:	0000dd61 	.word	0x0000dd61
    e18c:	0000dd61 	.word	0x0000dd61
    e190:	0000e919 	.word	0x0000e919
    e194:	0000dd61 	.word	0x0000dd61
    e198:	0000dd61 	.word	0x0000dd61
    e19c:	0000dd61 	.word	0x0000dd61
    e1a0:	0000dd61 	.word	0x0000dd61
    e1a4:	0000dd61 	.word	0x0000dd61
    e1a8:	0000dd61 	.word	0x0000dd61
    e1ac:	0000dd61 	.word	0x0000dd61
    e1b0:	0000dd61 	.word	0x0000dd61
    e1b4:	0000dd61 	.word	0x0000dd61
    e1b8:	0000dd61 	.word	0x0000dd61
    e1bc:	0000daa9 	.word	0x0000daa9
    e1c0:	0000e22b 	.word	0x0000e22b
    e1c4:	0000dd61 	.word	0x0000dd61
    e1c8:	0000da67 	.word	0x0000da67
    e1cc:	0000dd61 	.word	0x0000dd61
    e1d0:	0000dd61 	.word	0x0000dd61
    e1d4:	0000e22b 	.word	0x0000e22b
    e1d8:	0000dd61 	.word	0x0000dd61
    e1dc:	0000dd61 	.word	0x0000dd61
    e1e0:	0000dd61 	.word	0x0000dd61
    e1e4:	0000dd61 	.word	0x0000dd61
    e1e8:	0000dd61 	.word	0x0000dd61
    e1ec:	0000dd61 	.word	0x0000dd61
    e1f0:	0000dd61 	.word	0x0000dd61
    e1f4:	0000dd61 	.word	0x0000dd61
    e1f8:	0000dd61 	.word	0x0000dd61
    e1fc:	0000de1d 	.word	0x0000de1d
    e200:	0000dd61 	.word	0x0000dd61
    e204:	0000e215 	.word	0x0000e215
    e208:	0000dd61 	.word	0x0000dd61
    e20c:	0000dd61 	.word	0x0000dd61
    e210:	0000e7ab 	.word	0x0000e7ab
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e214:	f10b 0207 	add.w	r2, fp, #7
    e218:	f022 0b07 	bic.w	fp, r2, #7
    e21c:	e9db 0100 	ldrd	r0, r1, [fp]
    e220:	f10b 0b08 	add.w	fp, fp, #8
    e224:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e228:	e501      	b.n	dc2e <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e22a:	f10b 0307 	add.w	r3, fp, #7
    e22e:	f023 0b07 	bic.w	fp, r3, #7
    e232:	e9db 0100 	ldrd	r0, r1, [fp]
    e236:	f10b 0b08 	add.w	fp, fp, #8
    e23a:	e44e      	b.n	dada <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    e23c:	4240      	negs	r0, r0
    e23e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e242:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    e246:	2c00      	cmp	r4, #0
    e248:	f040 834e 	bne.w	e8e8 <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    e24c:	f1b8 0f00 	cmp.w	r8, #0
    e250:	f000 82d1 	beq.w	e7f6 <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    e254:	252d      	movs	r5, #45	; 0x2d
    e256:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    e25a:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    e25e:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    e262:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e266:	4642      	mov	r2, r8
    e268:	f7ff f96c 	bl	d544 <uint64_to_str>
                if ( pcBuf )
    e26c:	f1b8 0f00 	cmp.w	r8, #0
    e270:	f47f af51 	bne.w	e116 <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    e274:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    e278:	4481      	add	r9, r0
    e27a:	e413      	b.n	daa4 <am_util_stdio_vsprintf+0x364>
    e27c:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    e280:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e282:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    e284:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e286:	9d21      	ldr	r5, [sp, #132]	; 0x84
    e288:	9e20      	ldr	r6, [sp, #128]	; 0x80
    e28a:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    e28e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    e292:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    e296:	1aff      	subs	r7, r7, r3
    e298:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    e29c:	b13c      	cbz	r4, e2ae <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    e29e:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    e2a0:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    e2a4:	f000 82c3 	beq.w	e82e <am_util_stdio_vsprintf+0x10ee>
    e2a8:	2001      	movs	r0, #1
                        --iWidth;
    e2aa:	460f      	mov	r7, r1
    e2ac:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    e2ae:	2f00      	cmp	r7, #0
    e2b0:	f340 82d3 	ble.w	e85a <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    e2b4:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    e2b6:	f1b8 0f00 	cmp.w	r8, #0
    e2ba:	d067      	beq.n	e38c <am_util_stdio_vsprintf+0xc4c>
    e2bc:	f010 0107 	ands.w	r1, r0, #7
    e2c0:	f1a7 0a02 	sub.w	sl, r7, #2
    e2c4:	4643      	mov	r3, r8
    e2c6:	d03a      	beq.n	e33e <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    e2c8:	4643      	mov	r3, r8
    e2ca:	2901      	cmp	r1, #1
    e2cc:	f1a7 0a03 	sub.w	sl, r7, #3
    e2d0:	f803 5b01 	strb.w	r5, [r3], #1
    e2d4:	d033      	beq.n	e33e <am_util_stdio_vsprintf+0xbfe>
    e2d6:	2902      	cmp	r1, #2
    e2d8:	d01b      	beq.n	e312 <am_util_stdio_vsprintf+0xbd2>
    e2da:	2903      	cmp	r1, #3
    e2dc:	d015      	beq.n	e30a <am_util_stdio_vsprintf+0xbca>
    e2de:	2904      	cmp	r1, #4
    e2e0:	d00f      	beq.n	e302 <am_util_stdio_vsprintf+0xbc2>
    e2e2:	2905      	cmp	r1, #5
    e2e4:	d009      	beq.n	e2fa <am_util_stdio_vsprintf+0xbba>
    e2e6:	2906      	cmp	r1, #6
    e2e8:	bf1c      	itt	ne
    e2ea:	f803 5b01 	strbne.w	r5, [r3], #1
    e2ee:	f1a7 0a04 	subne.w	sl, r7, #4
    e2f2:	f803 5b01 	strb.w	r5, [r3], #1
    e2f6:	f10a 3aff 	add.w	sl, sl, #4294967295
    e2fa:	f803 5b01 	strb.w	r5, [r3], #1
    e2fe:	f10a 3aff 	add.w	sl, sl, #4294967295
    e302:	f803 5b01 	strb.w	r5, [r3], #1
    e306:	f10a 3aff 	add.w	sl, sl, #4294967295
    e30a:	f803 5b01 	strb.w	r5, [r3], #1
    e30e:	f10a 3aff 	add.w	sl, sl, #4294967295
    e312:	f803 5b01 	strb.w	r5, [r3], #1
    e316:	f10a 3aff 	add.w	sl, sl, #4294967295
    e31a:	e010      	b.n	e33e <am_util_stdio_vsprintf+0xbfe>
    e31c:	f88c 5000 	strb.w	r5, [ip]
    e320:	3308      	adds	r3, #8
    e322:	f803 5c06 	strb.w	r5, [r3, #-6]
    e326:	f803 5c05 	strb.w	r5, [r3, #-5]
    e32a:	f803 5c04 	strb.w	r5, [r3, #-4]
    e32e:	f803 5c03 	strb.w	r5, [r3, #-3]
    e332:	f803 5c02 	strb.w	r5, [r3, #-2]
    e336:	f1aa 0a08 	sub.w	sl, sl, #8
    e33a:	f803 5c01 	strb.w	r5, [r3, #-1]
    e33e:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    e340:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    e344:	f80c 5b01 	strb.w	r5, [ip], #1
    e348:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    e34c:	d1e6      	bne.n	e31c <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e34e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e350:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    e352:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e354:	2a00      	cmp	r2, #0
    e356:	d084      	beq.n	e262 <am_util_stdio_vsprintf+0xb22>
    e358:	2d20      	cmp	r5, #32
    e35a:	d182      	bne.n	e262 <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    e35c:	f1b8 0f00 	cmp.w	r8, #0
    e360:	f47f af78 	bne.w	e254 <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    e364:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e368:	2200      	movs	r2, #0
    e36a:	f7ff f8eb 	bl	d544 <uint64_to_str>
                        ++ui32CharCnt;
    e36e:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    e372:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    e376:	4481      	add	r9, r0
    e378:	f7ff bb94 	b.w	daa4 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    e37c:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    e37e:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    e382:	f340 82bc 	ble.w	e8fe <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    e386:	2201      	movs	r2, #1
    e388:	1eb8      	subs	r0, r7, #2
    e38a:	921b      	str	r2, [sp, #108]	; 0x6c
    e38c:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e38e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    e390:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e392:	2f00      	cmp	r7, #0
    e394:	f000 821b 	beq.w	e7ce <am_util_stdio_vsprintf+0x108e>
    e398:	2d20      	cmp	r5, #32
    e39a:	d0e3      	beq.n	e364 <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    e39c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e3a0:	2200      	movs	r2, #0
    e3a2:	f7ff f8cf 	bl	d544 <uint64_to_str>
    e3a6:	e765      	b.n	e274 <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    e3a8:	2700      	movs	r7, #0
    e3aa:	2400      	movs	r4, #0
    e3ac:	f7ff baee 	b.w	d98c <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    e3b0:	ee17 7a90 	vmov	r7, s15
    e3b4:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    e3b8:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    e3bc:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    e3c0:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    e3c2:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    e3c6:	f300 8246 	bgt.w	e856 <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    e3ca:	f111 0f17 	cmn.w	r1, #23
    e3ce:	f2c0 823c 	blt.w	e84a <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    e3d2:	2916      	cmp	r1, #22
    e3d4:	dd2f      	ble.n	e436 <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    e3d6:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    e3da:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    e3dc:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    e3e0:	f2c0 825c 	blt.w	e89c <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    e3e4:	2800      	cmp	r0, #0
    e3e6:	f040 824c 	bne.w	e882 <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    e3ea:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    e3ec:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    e3f0:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    e3f4:	f888 4000 	strb.w	r4, [r8]
    e3f8:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    e3fc:	1caa      	adds	r2, r5, #2
    e3fe:	f04f 0430 	mov.w	r4, #48	; 0x30
    e402:	706c      	strb	r4, [r5, #1]
    e404:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    e408:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    e40a:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    e40c:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    e40e:	f2c0 81e7 	blt.w	e7e0 <am_util_stdio_vsprintf+0x10a0>
    e412:	4682      	mov	sl, r0
    e414:	f7ff bb44 	b.w	daa0 <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    e418:	2400      	movs	r4, #0
    e41a:	f04f 0c00 	mov.w	ip, #0
    e41e:	e670      	b.n	e102 <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    e420:	4606      	mov	r6, r0
    e422:	2400      	movs	r4, #0
    e424:	f7ff b9f4 	b.w	d810 <am_util_stdio_vsprintf+0xd0>
    e428:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    e42c:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    e42e:	1886      	adds	r6, r0, r2
    e430:	5c82      	ldrb	r2, [r0, r2]
    e432:	f7ff b9f9 	b.w	d828 <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    e436:	2900      	cmp	r1, #0
    e438:	f2c0 8214 	blt.w	e864 <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    e43c:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    e440:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    e444:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    e448:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    e44a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    e44e:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    e452:	f2c0 823b 	blt.w	e8cc <am_util_stdio_vsprintf+0x118c>
    e456:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    e458:	462a      	mov	r2, r5
    e45a:	17c1      	asrs	r1, r0, #31
    e45c:	f7ff f872 	bl	d544 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    e460:	7829      	ldrb	r1, [r5, #0]
    e462:	b119      	cbz	r1, e46c <am_util_stdio_vsprintf+0xd2c>
    e464:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    e468:	2800      	cmp	r0, #0
    e46a:	d1fb      	bne.n	e464 <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    e46c:	222e      	movs	r2, #46	; 0x2e
    e46e:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    e470:	2c00      	cmp	r4, #0
    e472:	d0c3      	beq.n	e3fc <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    e474:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    e476:	eba2 0008 	sub.w	r0, r2, r8
    e47a:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    e47e:	45e2      	cmp	sl, ip
    e480:	bfa8      	it	ge
    e482:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    e484:	f1ba 0f00 	cmp.w	sl, #0
    e488:	f340 80b2 	ble.w	e5f0 <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    e48c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e490:	0067      	lsls	r7, r4, #1
    e492:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e496:	1639      	asrs	r1, r7, #24
    e498:	3130      	adds	r1, #48	; 0x30
    e49a:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    e49e:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e4a0:	7069      	strb	r1, [r5, #1]
    e4a2:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    e4a4:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    e4a8:	f00e 0507 	and.w	r5, lr, #7
    e4ac:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    e4ae:	f000 809c 	beq.w	e5ea <am_util_stdio_vsprintf+0xeaa>
    e4b2:	2d00      	cmp	r5, #0
    e4b4:	d04d      	beq.n	e552 <am_util_stdio_vsprintf+0xe12>
    e4b6:	2d01      	cmp	r5, #1
    e4b8:	d03f      	beq.n	e53a <am_util_stdio_vsprintf+0xdfa>
    e4ba:	2d02      	cmp	r5, #2
    e4bc:	d034      	beq.n	e528 <am_util_stdio_vsprintf+0xde8>
    e4be:	2d03      	cmp	r5, #3
    e4c0:	d029      	beq.n	e516 <am_util_stdio_vsprintf+0xdd6>
    e4c2:	2d04      	cmp	r5, #4
    e4c4:	d01e      	beq.n	e504 <am_util_stdio_vsprintf+0xdc4>
    e4c6:	2d05      	cmp	r5, #5
    e4c8:	d013      	beq.n	e4f2 <am_util_stdio_vsprintf+0xdb2>
    e4ca:	2d06      	cmp	r5, #6
    e4cc:	d008      	beq.n	e4e0 <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    e4ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e4d2:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e4d4:	1639      	asrs	r1, r7, #24
    e4d6:	3130      	adds	r1, #48	; 0x30
    e4d8:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e4dc:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e4e0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    e4e4:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e4e6:	162c      	asrs	r4, r5, #24
    e4e8:	3430      	adds	r4, #48	; 0x30
    e4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e4ee:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e4f2:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    e4f6:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e4f8:	1601      	asrs	r1, r0, #24
    e4fa:	3130      	adds	r1, #48	; 0x30
    e4fc:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e500:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e504:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e508:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e50a:	1627      	asrs	r7, r4, #24
    e50c:	3730      	adds	r7, #48	; 0x30
    e50e:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e512:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e516:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    e51a:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e51c:	1629      	asrs	r1, r5, #24
    e51e:	3130      	adds	r1, #48	; 0x30
    e520:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e524:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e528:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e52c:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e52e:	1638      	asrs	r0, r7, #24
    e530:	3030      	adds	r0, #48	; 0x30
    e532:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    e536:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e53a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e53e:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e540:	1621      	asrs	r1, r4, #24
    e542:	3130      	adds	r1, #48	; 0x30
    e544:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    e548:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    e54a:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    e54c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    e550:	d04b      	beq.n	e5ea <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    e552:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    e556:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    e558:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e55c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    e560:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    e562:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e566:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    e56a:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    e56e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e572:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    e576:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    e57a:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e57e:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    e582:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    e584:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e588:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    e58c:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    e58e:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    e592:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e596:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    e598:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e59a:	3130      	adds	r1, #48	; 0x30
    e59c:	1624      	asrs	r4, r4, #24
    e59e:	3430      	adds	r4, #48	; 0x30
    e5a0:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    e5a2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e5a6:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    e5a8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    e5ac:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e5ae:	1601      	asrs	r1, r0, #24
    e5b0:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    e5b4:	1620      	asrs	r0, r4, #24
    e5b6:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    e5ba:	163f      	asrs	r7, r7, #24
    e5bc:	162d      	asrs	r5, r5, #24
    e5be:	3730      	adds	r7, #48	; 0x30
    e5c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    e5c4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    e5c8:	3530      	adds	r5, #48	; 0x30
    e5ca:	3130      	adds	r1, #48	; 0x30
    e5cc:	3030      	adds	r0, #48	; 0x30
    e5ce:	715f      	strb	r7, [r3, #5]
    e5d0:	f883 c003 	strb.w	ip, [r3, #3]
    e5d4:	f883 e004 	strb.w	lr, [r3, #4]
    e5d8:	719d      	strb	r5, [r3, #6]
    e5da:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    e5dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    e5de:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    e5e2:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    e5e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    e5e8:	d1b3      	bne.n	e552 <am_util_stdio_vsprintf+0xe12>
    e5ea:	4452      	add	r2, sl
    e5ec:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    e5f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e5f4:	f343 55c7 	sbfx	r5, r3, #23, #8
    e5f8:	2d04      	cmp	r5, #4
    e5fa:	f77f af05 	ble.w	e408 <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    e5fe:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    e600:	4598      	cmp	r8, r3
    e602:	f63f af01 	bhi.w	e408 <am_util_stdio_vsprintf+0xcc8>
    e606:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    e60a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    e60e:	1afc      	subs	r4, r7, r3
    e610:	43e5      	mvns	r5, r4
    e612:	292e      	cmp	r1, #46	; 0x2e
    e614:	f005 0407 	and.w	r4, r5, #7
    e618:	d005      	beq.n	e626 <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    e61a:	2939      	cmp	r1, #57	; 0x39
    e61c:	f040 8161 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e620:	f04f 0130 	mov.w	r1, #48	; 0x30
    e624:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    e626:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    e628:	42bb      	cmp	r3, r7
    e62a:	f43f aeed 	beq.w	e408 <am_util_stdio_vsprintf+0xcc8>
    e62e:	2c00      	cmp	r4, #0
    e630:	d054      	beq.n	e6dc <am_util_stdio_vsprintf+0xf9c>
    e632:	2c01      	cmp	r4, #1
    e634:	d045      	beq.n	e6c2 <am_util_stdio_vsprintf+0xf82>
    e636:	2c02      	cmp	r4, #2
    e638:	d039      	beq.n	e6ae <am_util_stdio_vsprintf+0xf6e>
    e63a:	2c03      	cmp	r4, #3
    e63c:	d02d      	beq.n	e69a <am_util_stdio_vsprintf+0xf5a>
    e63e:	2c04      	cmp	r4, #4
    e640:	d021      	beq.n	e686 <am_util_stdio_vsprintf+0xf46>
    e642:	2c05      	cmp	r4, #5
    e644:	d015      	beq.n	e672 <am_util_stdio_vsprintf+0xf32>
    e646:	2c06      	cmp	r4, #6
    e648:	d009      	beq.n	e65e <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    e64a:	7819      	ldrb	r1, [r3, #0]
    e64c:	292e      	cmp	r1, #46	; 0x2e
    e64e:	d005      	beq.n	e65c <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    e650:	2939      	cmp	r1, #57	; 0x39
    e652:	f040 8146 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e656:	f04f 0530 	mov.w	r5, #48	; 0x30
    e65a:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    e65c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e65e:	7819      	ldrb	r1, [r3, #0]
    e660:	292e      	cmp	r1, #46	; 0x2e
    e662:	d005      	beq.n	e670 <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    e664:	2939      	cmp	r1, #57	; 0x39
    e666:	f040 813c 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e66a:	f04f 0430 	mov.w	r4, #48	; 0x30
    e66e:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    e670:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e672:	7819      	ldrb	r1, [r3, #0]
    e674:	292e      	cmp	r1, #46	; 0x2e
    e676:	d005      	beq.n	e684 <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    e678:	2939      	cmp	r1, #57	; 0x39
    e67a:	f040 8132 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e67e:	f04f 0130 	mov.w	r1, #48	; 0x30
    e682:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    e684:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e686:	7819      	ldrb	r1, [r3, #0]
    e688:	292e      	cmp	r1, #46	; 0x2e
    e68a:	d005      	beq.n	e698 <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    e68c:	2939      	cmp	r1, #57	; 0x39
    e68e:	f040 8128 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e692:	f04f 0530 	mov.w	r5, #48	; 0x30
    e696:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    e698:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e69a:	7819      	ldrb	r1, [r3, #0]
    e69c:	292e      	cmp	r1, #46	; 0x2e
    e69e:	d005      	beq.n	e6ac <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    e6a0:	2939      	cmp	r1, #57	; 0x39
    e6a2:	f040 811e 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e6a6:	f04f 0430 	mov.w	r4, #48	; 0x30
    e6aa:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    e6ac:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e6ae:	7819      	ldrb	r1, [r3, #0]
    e6b0:	292e      	cmp	r1, #46	; 0x2e
    e6b2:	d005      	beq.n	e6c0 <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    e6b4:	2939      	cmp	r1, #57	; 0x39
    e6b6:	f040 8114 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e6ba:	f04f 0130 	mov.w	r1, #48	; 0x30
    e6be:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    e6c0:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e6c2:	7819      	ldrb	r1, [r3, #0]
    e6c4:	292e      	cmp	r1, #46	; 0x2e
    e6c6:	d005      	beq.n	e6d4 <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    e6c8:	2939      	cmp	r1, #57	; 0x39
    e6ca:	f040 810a 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e6ce:	f04f 0530 	mov.w	r5, #48	; 0x30
    e6d2:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    e6d4:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    e6d6:	42bb      	cmp	r3, r7
    e6d8:	f43f ae96 	beq.w	e408 <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    e6dc:	7819      	ldrb	r1, [r3, #0]
    e6de:	292e      	cmp	r1, #46	; 0x2e
    e6e0:	d005      	beq.n	e6ee <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    e6e2:	2939      	cmp	r1, #57	; 0x39
    e6e4:	f040 80fd 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e6e8:	f04f 0430 	mov.w	r4, #48	; 0x30
    e6ec:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    e6ee:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    e6f0:	7819      	ldrb	r1, [r3, #0]
    e6f2:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e6f4:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    e6f6:	d005      	beq.n	e704 <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    e6f8:	2939      	cmp	r1, #57	; 0x39
    e6fa:	f040 80f2 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e6fe:	f04f 0130 	mov.w	r1, #48	; 0x30
    e702:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    e704:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    e708:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e70a:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    e70e:	d006      	beq.n	e71e <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    e710:	2939      	cmp	r1, #57	; 0x39
    e712:	f040 80e6 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e716:	f04f 0c30 	mov.w	ip, #48	; 0x30
    e71a:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    e71e:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    e722:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e724:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    e728:	d006      	beq.n	e738 <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    e72a:	2939      	cmp	r1, #57	; 0x39
    e72c:	f040 80d9 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e730:	f04f 0330 	mov.w	r3, #48	; 0x30
    e734:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    e738:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    e73c:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e73e:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    e742:	d006      	beq.n	e752 <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    e744:	2939      	cmp	r1, #57	; 0x39
    e746:	f040 80cc 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e74a:	f04f 0530 	mov.w	r5, #48	; 0x30
    e74e:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    e752:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    e756:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e758:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    e75c:	d006      	beq.n	e76c <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    e75e:	2939      	cmp	r1, #57	; 0x39
    e760:	f040 80bf 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e764:	f04f 0430 	mov.w	r4, #48	; 0x30
    e768:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    e76c:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    e770:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e772:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    e776:	d006      	beq.n	e786 <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    e778:	2939      	cmp	r1, #57	; 0x39
    e77a:	f040 80b2 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e77e:	f04f 0130 	mov.w	r1, #48	; 0x30
    e782:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    e786:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    e78a:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    e78c:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    e790:	d006      	beq.n	e7a0 <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    e792:	2939      	cmp	r1, #57	; 0x39
    e794:	f040 80a5 	bne.w	e8e2 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    e798:	f04f 0c30 	mov.w	ip, #48	; 0x30
    e79c:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    e7a0:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    e7a4:	42bb      	cmp	r3, r7
    e7a6:	d199      	bne.n	e6dc <am_util_stdio_vsprintf+0xf9c>
    e7a8:	e62e      	b.n	e408 <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    e7aa:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e7ae:	f10b 0307 	add.w	r3, fp, #7
    e7b2:	f023 0a07 	bic.w	sl, r3, #7
    e7b6:	f10a 0b08 	add.w	fp, sl, #8
    e7ba:	e9da 2300 	ldrd	r2, r3, [sl]
    e7be:	f7ff b877 	b.w	d8b0 <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    e7c2:	7801      	ldrb	r1, [r0, #0]
    e7c4:	b369      	cbz	r1, e822 <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    e7c6:	4607      	mov	r7, r0
    e7c8:	2201      	movs	r2, #1
    e7ca:	f7ff bb40 	b.w	de4e <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    e7ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e7d2:	463a      	mov	r2, r7
    e7d4:	f7fe feb6 	bl	d544 <uint64_to_str>
    e7d8:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    e7da:	4481      	add	r9, r0
    e7dc:	f7ff b962 	b.w	daa4 <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e7e0:	1c43      	adds	r3, r0, #1
    e7e2:	d032      	beq.n	e84a <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e7e4:	3002      	adds	r0, #2
    e7e6:	d036      	beq.n	e856 <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e7e8:	4a4d      	ldr	r2, [pc, #308]	; (e920 <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e7ea:	f8c8 2000 	str.w	r2, [r8]
    e7ee:	f04f 0a03 	mov.w	sl, #3
    e7f2:	f7ff b955 	b.w	daa0 <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    e7f6:	4642      	mov	r2, r8
    e7f8:	f7fe fea4 	bl	d544 <uint64_to_str>
                        ++ui32CharCnt;
    e7fc:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    e800:	4481      	add	r9, r0
    e802:	f7ff b94f 	b.w	daa4 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    e806:	2200      	movs	r2, #0
    e808:	2500      	movs	r5, #0
    e80a:	f7ff bb91 	b.w	df30 <am_util_stdio_vsprintf+0x7f0>
    e80e:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    e810:	f1b8 0f00 	cmp.w	r8, #0
    e814:	f43f abf9 	beq.w	e00a <am_util_stdio_vsprintf+0x8ca>
    e818:	4614      	mov	r4, r2
    e81a:	f7ff bbed 	b.w	dff8 <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    e81e:	2c00      	cmp	r4, #0
    e820:	dc02      	bgt.n	e828 <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    e822:	460f      	mov	r7, r1
    e824:	f7ff bb21 	b.w	de6a <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    e828:	460f      	mov	r7, r1
    e82a:	f7ff bb88 	b.w	df3e <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    e82e:	f1b8 0f00 	cmp.w	r8, #0
    e832:	f43f ada3 	beq.w	e37c <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    e836:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    e838:	232d      	movs	r3, #45	; 0x2d
    e83a:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    e83e:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    e842:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    e844:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    e846:	44a0      	add	r8, r4
    e848:	e531      	b.n	e2ae <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e84a:	4a36      	ldr	r2, [pc, #216]	; (e924 <am_util_stdio_vsprintf+0x11e4>)
    e84c:	e7cd      	b.n	e7ea <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    e84e:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    e852:	2201      	movs	r2, #1
    e854:	e5eb      	b.n	e42e <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e856:	4a34      	ldr	r2, [pc, #208]	; (e928 <am_util_stdio_vsprintf+0x11e8>)
    e858:	e7c7      	b.n	e7ea <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    e85a:	f1b8 0f00 	cmp.w	r8, #0
    e85e:	d13d      	bne.n	e8dc <am_util_stdio_vsprintf+0x119c>
    e860:	4640      	mov	r0, r8
    e862:	e594      	b.n	e38e <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    e864:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    e866:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    e868:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    e86c:	db27      	blt.n	e8be <am_util_stdio_vsprintf+0x117e>
    e86e:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    e870:	f04f 0030 	mov.w	r0, #48	; 0x30
    e874:	7018      	strb	r0, [r3, #0]
    e876:	1c5d      	adds	r5, r3, #1
    e878:	e5f8      	b.n	e46c <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    e87a:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    e87c:	2400      	movs	r4, #0
    e87e:	941b      	str	r4, [sp, #108]	; 0x6c
    e880:	e515      	b.n	e2ae <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    e882:	4643      	mov	r3, r8
    i32FracPart = 0;
    e884:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    e886:	2800      	cmp	r0, #0
    e888:	dc37      	bgt.n	e8fa <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    e88a:	1c5d      	adds	r5, r3, #1
    e88c:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    e88e:	4240      	negs	r0, r0
    e890:	17c1      	asrs	r1, r0, #31
    e892:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    e894:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    e896:	f7fe fe55 	bl	d544 <uint64_to_str>
    e89a:	e5e1      	b.n	e460 <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    e89c:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    e8a0:	f888 e000 	strb.w	lr, [r8]
    e8a4:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    e8a8:	bb78      	cbnz	r0, e90a <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    e8aa:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    e8ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    e8b0:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    e8b4:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    e8b8:	f108 0502 	add.w	r5, r8, #2
    e8bc:	e59e      	b.n	e3fc <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    e8be:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    e8c2:	f888 c000 	strb.w	ip, [r8]
    e8c6:	f108 0301 	add.w	r3, r8, #1
    e8ca:	e7d1      	b.n	e870 <am_util_stdio_vsprintf+0x1130>
    e8cc:	272d      	movs	r7, #45	; 0x2d
    e8ce:	f888 7000 	strb.w	r7, [r8]
    e8d2:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    e8d6:	2800      	cmp	r0, #0
    e8d8:	d0ca      	beq.n	e870 <am_util_stdio_vsprintf+0x1130>
    e8da:	e7d4      	b.n	e886 <am_util_stdio_vsprintf+0x1146>
    e8dc:	f04f 0e00 	mov.w	lr, #0
    e8e0:	e535      	b.n	e34e <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    e8e2:	3101      	adds	r1, #1
    e8e4:	7019      	strb	r1, [r3, #0]
    e8e6:	e58f      	b.n	e408 <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    e8e8:	460b      	mov	r3, r1
    e8ea:	4301      	orrs	r1, r0
    e8ec:	4602      	mov	r2, r0
    e8ee:	bf0c      	ite	eq
    e8f0:	2401      	moveq	r4, #1
    e8f2:	2400      	movne	r4, #0
                    bNeg = true;
    e8f4:	2001      	movs	r0, #1
    e8f6:	f7ff b906 	b.w	db06 <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    e8fa:	461d      	mov	r5, r3
    e8fc:	e5ac      	b.n	e458 <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    e8fe:	4642      	mov	r2, r8
    e900:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    e904:	f7fe fe1e 	bl	d544 <uint64_to_str>
    e908:	e4b4      	b.n	e274 <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    e90a:	2400      	movs	r4, #0
    e90c:	e7bb      	b.n	e886 <am_util_stdio_vsprintf+0x1146>
    e90e:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    e912:	7832      	ldrb	r2, [r6, #0]
    e914:	f7fe bf7c 	b.w	d810 <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    e918:	f04f 0c00 	mov.w	ip, #0
    e91c:	e747      	b.n	e7ae <am_util_stdio_vsprintf+0x106e>
    e91e:	bf00      	nop
    e920:	003f2e3f 	.word	0x003f2e3f
    e924:	00302e30 	.word	0x00302e30
    e928:	00232e23 	.word	0x00232e23

0000e92c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e92c:	b40f      	push	{r0, r1, r2, r3}
    e92e:	b530      	push	{r4, r5, lr}
    e930:	b083      	sub	sp, #12
    e932:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e934:	4c08      	ldr	r4, [pc, #32]	; (e958 <am_util_stdio_printf+0x2c>)
{
    e936:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    e93a:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e93c:	4620      	mov	r0, r4
    e93e:	f7fe feff 	bl	d740 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e942:	4b06      	ldr	r3, [pc, #24]	; (e95c <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e944:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    e946:	6819      	ldr	r1, [r3, #0]
    e948:	4620      	mov	r0, r4
    e94a:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    e94c:	4628      	mov	r0, r5
    e94e:	b003      	add	sp, #12
    e950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e954:	b004      	add	sp, #16
    e956:	4770      	bx	lr
    e958:	100010cc 	.word	0x100010cc
    e95c:	10003bd4 	.word	0x10003bd4

0000e960 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    e960:	4801      	ldr	r0, [pc, #4]	; (e968 <am_util_stdio_terminal_clear+0x8>)
    e962:	f7ff bfe3 	b.w	e92c <am_util_stdio_printf>
    e966:	bf00      	nop
    e968:	00012030 	.word	0x00012030

0000e96c <am_bsp_uart_string_print>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    e96c:	b510      	push	{r4, lr}
    e96e:	b086      	sub	sp, #24
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcString[ui32StrLen] != 0)
    e970:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    e972:	2300      	movs	r3, #0
    e974:	9300      	str	r3, [sp, #0]
    while (pcString[ui32StrLen] != 0)
    e976:	b134      	cbz	r4, e986 <am_bsp_uart_string_print+0x1a>
    e978:	461c      	mov	r4, r3
    e97a:	4601      	mov	r1, r0
    e97c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        ui32StrLen++;
    e980:	3401      	adds	r4, #1
    while (pcString[ui32StrLen] != 0)
    e982:	2a00      	cmp	r2, #0
    e984:	d1fa      	bne.n	e97c <am_bsp_uart_string_print+0x10>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    e986:	4b0a      	ldr	r3, [pc, #40]	; (e9b0 <am_bsp_uart_string_print+0x44>)
    const am_hal_uart_transfer_t sUartWrite =
    e988:	9002      	str	r0, [sp, #8]
    e98a:	2200      	movs	r2, #0
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    e98c:	6818      	ldr	r0, [r3, #0]
    const am_hal_uart_transfer_t sUartWrite =
    e98e:	9403      	str	r4, [sp, #12]
    e990:	f04f 33ff 	mov.w	r3, #4294967295
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    e994:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    e996:	9201      	str	r2, [sp, #4]
    e998:	9304      	str	r3, [sp, #16]
    e99a:	f8cd d014 	str.w	sp, [sp, #20]
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    e99e:	f002 fa2d 	bl	10dfc <am_hal_uart_transfer>

    if (ui32BytesWritten != ui32StrLen)
    e9a2:	9800      	ldr	r0, [sp, #0]
    e9a4:	42a0      	cmp	r0, r4
    e9a6:	d000      	beq.n	e9aa <am_bsp_uart_string_print+0x3e>
    e9a8:	e7fe      	b.n	e9a8 <am_bsp_uart_string_print+0x3c>
        //
        // Couldn't send the whole string!!
        //
        while(1);
    }
} // am_bsp_uart_string_print()
    e9aa:	b006      	add	sp, #24
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	bf00      	nop
    e9b0:	100011cc 	.word	0x100011cc

0000e9b4 <am_bsp_low_power_init>:
{
    e9b4:	b508      	push	{r3, lr}
    am_hal_itm_disable();
    e9b6:	f001 f96b 	bl	fc90 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    e9ba:	2000      	movs	r0, #0
    e9bc:	f7fe feba 	bl	d734 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    e9c0:	4b08      	ldr	r3, [pc, #32]	; (e9e4 <am_bsp_low_power_init+0x30>)
    e9c2:	2029      	movs	r0, #41	; 0x29
    e9c4:	6819      	ldr	r1, [r3, #0]
    e9c6:	f000 fa93 	bl	eef0 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    e9ca:	f002 f83f 	bl	10a4c <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    e9ce:	2001      	movs	r0, #1
    e9d0:	f002 f87a 	bl	10ac8 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    e9d4:	2100      	movs	r1, #0
    e9d6:	2003      	movs	r0, #3
    e9d8:	f000 f8fe 	bl	ebd8 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    e9dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    e9e0:	f002 b87e 	b.w	10ae0 <am_hal_rtc_osc_disable>
    e9e4:	000120b4 	.word	0x000120b4

0000e9e8 <am_bsp_mspi_pins_enable>:
    switch ( eMSPIDevice )
    e9e8:	3801      	subs	r0, #1
{
    e9ea:	b508      	push	{r3, lr}
    switch ( eMSPIDevice )
    e9ec:	280e      	cmp	r0, #14
    e9ee:	d879      	bhi.n	eae4 <am_bsp_mspi_pins_enable+0xfc>
    e9f0:	e8df f000 	tbb	[pc, r0]
    e9f4:	782b081e 	.word	0x782b081e
    e9f8:	7878081e 	.word	0x7878081e
    e9fc:	7878725b 	.word	0x7878725b
    ea00:	3075      	.short	0x3075
    ea02:	2b          	.byte	0x2b
    ea03:	00          	.byte	0x00
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE1, g_AM_BSP_GPIO_MSPI_CE1);
    ea04:	4938      	ldr	r1, [pc, #224]	; (eae8 <am_bsp_mspi_pins_enable+0x100>)
    ea06:	2029      	movs	r0, #41	; 0x29
    ea08:	6809      	ldr	r1, [r1, #0]
    ea0a:	f000 fa71 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D4,  g_AM_BSP_GPIO_MSPI_D4);
    ea0e:	4a37      	ldr	r2, [pc, #220]	; (eaec <am_bsp_mspi_pins_enable+0x104>)
    ea10:	2000      	movs	r0, #0
    ea12:	6811      	ldr	r1, [r2, #0]
    ea14:	f000 fa6c 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D5,  g_AM_BSP_GPIO_MSPI_D5);
    ea18:	4a35      	ldr	r2, [pc, #212]	; (eaf0 <am_bsp_mspi_pins_enable+0x108>)
    ea1a:	2001      	movs	r0, #1
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D7,  g_AM_BSP_GPIO_MSPI_D7);
    ea1c:	6811      	ldr	r1, [r2, #0]
    ea1e:	f000 fa67 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_SCK, g_AM_BSP_GPIO_MSPI_SCK);
    ea22:	4b34      	ldr	r3, [pc, #208]	; (eaf4 <am_bsp_mspi_pins_enable+0x10c>)
    ea24:	2018      	movs	r0, #24
    ea26:	6819      	ldr	r1, [r3, #0]
} // am_bsp_mspi_pins_enable()
    ea28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_SCK, g_AM_BSP_GPIO_MSPI_SCK);
    ea2c:	f000 ba60 	b.w	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE0, g_AM_BSP_GPIO_MSPI_CE0);
    ea30:	4b31      	ldr	r3, [pc, #196]	; (eaf8 <am_bsp_mspi_pins_enable+0x110>)
    ea32:	2013      	movs	r0, #19
    ea34:	6819      	ldr	r1, [r3, #0]
    ea36:	f000 fa5b 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D0,  g_AM_BSP_GPIO_MSPI_D0);
    ea3a:	4930      	ldr	r1, [pc, #192]	; (eafc <am_bsp_mspi_pins_enable+0x114>)
    ea3c:	2016      	movs	r0, #22
    ea3e:	6809      	ldr	r1, [r1, #0]
    ea40:	f000 fa56 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D1,  g_AM_BSP_GPIO_MSPI_D1);
    ea44:	4a2e      	ldr	r2, [pc, #184]	; (eb00 <am_bsp_mspi_pins_enable+0x118>)
    ea46:	201a      	movs	r0, #26
    ea48:	e7e8      	b.n	ea1c <am_bsp_mspi_pins_enable+0x34>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE0, g_AM_BSP_GPIO_MSPI_CE0);
    ea4a:	4a2b      	ldr	r2, [pc, #172]	; (eaf8 <am_bsp_mspi_pins_enable+0x110>)
    ea4c:	2013      	movs	r0, #19
    ea4e:	6811      	ldr	r1, [r2, #0]
    ea50:	f000 fa4e 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE1, g_AM_BSP_GPIO_MSPI_CE1);
    ea54:	4b24      	ldr	r3, [pc, #144]	; (eae8 <am_bsp_mspi_pins_enable+0x100>)
    ea56:	2029      	movs	r0, #41	; 0x29
    ea58:	6819      	ldr	r1, [r3, #0]
    ea5a:	f000 fa49 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D0,  g_AM_BSP_GPIO_MSPI_D0);
    ea5e:	4927      	ldr	r1, [pc, #156]	; (eafc <am_bsp_mspi_pins_enable+0x114>)
    ea60:	2016      	movs	r0, #22
    ea62:	6809      	ldr	r1, [r1, #0]
    ea64:	f000 fa44 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D1,  g_AM_BSP_GPIO_MSPI_D1);
    ea68:	4a25      	ldr	r2, [pc, #148]	; (eb00 <am_bsp_mspi_pins_enable+0x118>)
    ea6a:	201a      	movs	r0, #26
    ea6c:	6811      	ldr	r1, [r2, #0]
    ea6e:	f000 fa3f 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D2,  g_AM_BSP_GPIO_MSPI_D2);
    ea72:	4b24      	ldr	r3, [pc, #144]	; (eb04 <am_bsp_mspi_pins_enable+0x11c>)
    ea74:	2004      	movs	r0, #4
    ea76:	6819      	ldr	r1, [r3, #0]
    ea78:	f000 fa3a 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D3,  g_AM_BSP_GPIO_MSPI_D3);
    ea7c:	4922      	ldr	r1, [pc, #136]	; (eb08 <am_bsp_mspi_pins_enable+0x120>)
    ea7e:	2017      	movs	r0, #23
    ea80:	6809      	ldr	r1, [r1, #0]
    ea82:	f000 fa35 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D4,  g_AM_BSP_GPIO_MSPI_D4);
    ea86:	4a19      	ldr	r2, [pc, #100]	; (eaec <am_bsp_mspi_pins_enable+0x104>)
    ea88:	2000      	movs	r0, #0
    ea8a:	6811      	ldr	r1, [r2, #0]
    ea8c:	f000 fa30 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D5,  g_AM_BSP_GPIO_MSPI_D5);
    ea90:	4b17      	ldr	r3, [pc, #92]	; (eaf0 <am_bsp_mspi_pins_enable+0x108>)
    ea92:	2001      	movs	r0, #1
    ea94:	6819      	ldr	r1, [r3, #0]
    ea96:	f000 fa2b 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D6,  g_AM_BSP_GPIO_MSPI_D6);
    ea9a:	491c      	ldr	r1, [pc, #112]	; (eb0c <am_bsp_mspi_pins_enable+0x124>)
    ea9c:	2002      	movs	r0, #2
    ea9e:	6809      	ldr	r1, [r1, #0]
    eaa0:	f000 fa26 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D7,  g_AM_BSP_GPIO_MSPI_D7);
    eaa4:	4a1a      	ldr	r2, [pc, #104]	; (eb10 <am_bsp_mspi_pins_enable+0x128>)
    eaa6:	2003      	movs	r0, #3
    eaa8:	e7b8      	b.n	ea1c <am_bsp_mspi_pins_enable+0x34>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE0, g_AM_BSP_GPIO_MSPI_CE0);
    eaaa:	4b13      	ldr	r3, [pc, #76]	; (eaf8 <am_bsp_mspi_pins_enable+0x110>)
    eaac:	2013      	movs	r0, #19
    eaae:	6819      	ldr	r1, [r3, #0]
    eab0:	f000 fa1e 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D0,  g_AM_BSP_GPIO_MSPI_D0);
    eab4:	4911      	ldr	r1, [pc, #68]	; (eafc <am_bsp_mspi_pins_enable+0x114>)
    eab6:	2016      	movs	r0, #22
    eab8:	6809      	ldr	r1, [r1, #0]
    eaba:	f000 fa19 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D1,  g_AM_BSP_GPIO_MSPI_D1);
    eabe:	4a10      	ldr	r2, [pc, #64]	; (eb00 <am_bsp_mspi_pins_enable+0x118>)
    eac0:	201a      	movs	r0, #26
    eac2:	6811      	ldr	r1, [r2, #0]
    eac4:	f000 fa14 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D2,  g_AM_BSP_GPIO_MSPI_D2);
    eac8:	4b0e      	ldr	r3, [pc, #56]	; (eb04 <am_bsp_mspi_pins_enable+0x11c>)
    eaca:	2004      	movs	r0, #4
    eacc:	6819      	ldr	r1, [r3, #0]
    eace:	f000 fa0f 	bl	eef0 <am_hal_gpio_pinconfig>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_D3,  g_AM_BSP_GPIO_MSPI_D3);
    ead2:	4a0d      	ldr	r2, [pc, #52]	; (eb08 <am_bsp_mspi_pins_enable+0x120>)
    ead4:	2017      	movs	r0, #23
    ead6:	e7a1      	b.n	ea1c <am_bsp_mspi_pins_enable+0x34>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE1, g_AM_BSP_GPIO_MSPI_CE1);
    ead8:	4903      	ldr	r1, [pc, #12]	; (eae8 <am_bsp_mspi_pins_enable+0x100>)
    eada:	2029      	movs	r0, #41	; 0x29
    eadc:	e7d0      	b.n	ea80 <am_bsp_mspi_pins_enable+0x98>
            am_hal_gpio_pinconfig(AM_BSP_GPIO_MSPI_CE0, g_AM_BSP_GPIO_MSPI_CE0);
    eade:	4b06      	ldr	r3, [pc, #24]	; (eaf8 <am_bsp_mspi_pins_enable+0x110>)
    eae0:	2013      	movs	r0, #19
    eae2:	e7b9      	b.n	ea58 <am_bsp_mspi_pins_enable+0x70>
    eae4:	bd08      	pop	{r3, pc}
    eae6:	bf00      	nop
    eae8:	00012088 	.word	0x00012088
    eaec:	0001209c 	.word	0x0001209c
    eaf0:	000120a0 	.word	0x000120a0
    eaf4:	000120ac 	.word	0x000120ac
    eaf8:	00012084 	.word	0x00012084
    eafc:	0001208c 	.word	0x0001208c
    eb00:	00012090 	.word	0x00012090
    eb04:	00012094 	.word	0x00012094
    eb08:	00012098 	.word	0x00012098
    eb0c:	000120a4 	.word	0x000120a4
    eb10:	000120a8 	.word	0x000120a8

0000eb14 <am_bsp_uart_printf_enable>:
// Initialize and configure the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_enable(void)
{
    eb14:	b510      	push	{r4, lr}
    //
    // Initialize, power up, and configure the communication UART. Use the
    // custom configuration if it was provided. Otherwise, just use the default
    // configuration.
    //
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    eb16:	4c10      	ldr	r4, [pc, #64]	; (eb58 <am_bsp_uart_printf_enable+0x44>)
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    eb18:	4b10      	ldr	r3, [pc, #64]	; (eb5c <am_bsp_uart_printf_enable+0x48>)
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    eb1a:	4621      	mov	r1, r4
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    eb1c:	2202      	movs	r2, #2
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    eb1e:	2000      	movs	r0, #0
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    eb20:	601a      	str	r2, [r3, #0]
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    eb22:	f001 ffe7 	bl	10af4 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    eb26:	2200      	movs	r2, #0
    eb28:	4611      	mov	r1, r2
    eb2a:	6820      	ldr	r0, [r4, #0]
    eb2c:	f002 f80a 	bl	10b44 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    eb30:	6820      	ldr	r0, [r4, #0]
    eb32:	490b      	ldr	r1, [pc, #44]	; (eb60 <am_bsp_uart_printf_enable+0x4c>)

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    eb34:	4c0b      	ldr	r4, [pc, #44]	; (eb64 <am_bsp_uart_printf_enable+0x50>)
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    eb36:	f002 f877 	bl	10c28 <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    eb3a:	490b      	ldr	r1, [pc, #44]	; (eb68 <am_bsp_uart_printf_enable+0x54>)
    eb3c:	2027      	movs	r0, #39	; 0x27
    eb3e:	6809      	ldr	r1, [r1, #0]
    eb40:	f000 f9d6 	bl	eef0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    eb44:	6821      	ldr	r1, [r4, #0]
    eb46:	2028      	movs	r0, #40	; 0x28
    eb48:	f000 f9d2 	bl	eef0 <am_hal_gpio_pinconfig>

    //
    // Register the BSP print function to the STDIO driver.
    //
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    eb4c:	4807      	ldr	r0, [pc, #28]	; (eb6c <am_bsp_uart_printf_enable+0x58>)
} // am_bsp_uart_printf_enable()
    eb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    eb52:	f7fe bdef 	b.w	d734 <am_util_stdio_printf_init>
    eb56:	bf00      	nop
    eb58:	100011cc 	.word	0x100011cc
    eb5c:	100011d0 	.word	0x100011d0
    eb60:	00012044 	.word	0x00012044
    eb64:	0001206c 	.word	0x0001206c
    eb68:	00012070 	.word	0x00012070
    eb6c:	0000e96d 	.word	0x0000e96d

0000eb70 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    eb70:	b530      	push	{r4, r5, lr}
    eb72:	b083      	sub	sp, #12
    eb74:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    eb76:	f000 fb01 	bl	f17c <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    eb7a:	4c11      	ldr	r4, [pc, #68]	; (ebc0 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    eb7c:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    eb7e:	6823      	ldr	r3, [r4, #0]
    eb80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    eb84:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    eb86:	9801      	ldr	r0, [sp, #4]
    eb88:	f000 fafc 	bl	f184 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    eb8c:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    eb8e:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    eb90:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    eb92:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    eb94:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    eb96:	005d      	lsls	r5, r3, #1
    eb98:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    eb9c:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    eb9e:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    eba0:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    eba4:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    eba6:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    ebaa:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    ebae:	0212      	lsls	r2, r2, #8
    ebb0:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    ebb4:	432b      	orrs	r3, r5
    ebb6:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    ebb8:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    ebba:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    ebbc:	b003      	add	sp, #12
    ebbe:	bd30      	pop	{r4, r5, pc}
    ebc0:	40018000 	.word	0x40018000

0000ebc4 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    ebc4:	4a03      	ldr	r2, [pc, #12]	; (ebd4 <am_hal_cachectrl_enable+0x10>)
    ebc6:	6813      	ldr	r3, [r2, #0]
    ebc8:	f043 0001 	orr.w	r0, r3, #1
    ebcc:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    ebce:	2000      	movs	r0, #0
    ebd0:	4770      	bx	lr
    ebd2:	bf00      	nop
    ebd4:	40018000 	.word	0x40018000

0000ebd8 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    ebd8:	2809      	cmp	r0, #9
    ebda:	d852      	bhi.n	ec82 <am_hal_clkgen_control+0xaa>
    ebdc:	e8df f000 	tbb	[pc, r0]
    ebe0:	2b21190d 	.word	0x2b21190d
    ebe4:	51513d33 	.word	0x51513d33
    ebe8:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    ebea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    ebee:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    ebf0:	6a1a      	ldr	r2, [r3, #32]
    ebf2:	f36f 0200 	bfc	r2, #0, #1
    ebf6:	621a      	str	r2, [r3, #32]
            break;
    ebf8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    ebfa:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    ebfe:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    ec00:	2047      	movs	r0, #71	; 0x47
    ec02:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    ec06:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    ec0a:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    ec0c:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    ec10:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    ec12:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    ec16:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    ec18:	68ca      	ldr	r2, [r1, #12]
    ec1a:	f022 0301 	bic.w	r3, r2, #1
    ec1e:	60cb      	str	r3, [r1, #12]
            break;
    ec20:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    ec22:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    ec26:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    ec28:	f8dc 200c 	ldr.w	r2, [ip, #12]
    ec2c:	f022 0302 	bic.w	r3, r2, #2
    ec30:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    ec34:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    ec36:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    ec3a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    ec3c:	68d3      	ldr	r3, [r2, #12]
    ec3e:	f043 0101 	orr.w	r1, r3, #1
    ec42:	60d1      	str	r1, [r2, #12]
            break;
    ec44:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    ec46:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    ec4a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    ec4c:	f8dc 300c 	ldr.w	r3, [ip, #12]
    ec50:	f043 0102 	orr.w	r1, r3, #2
    ec54:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    ec58:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    ec5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    ec5e:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    ec60:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    ec62:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    ec64:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    ec66:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    ec68:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    ec6a:	615a      	str	r2, [r3, #20]
            break;
    ec6c:	4770      	bx	lr
            if ( pArgs == 0 )
    ec6e:	b151      	cbz	r1, ec86 <am_hal_clkgen_control+0xae>
    ec70:	6808      	ldr	r0, [r1, #0]
    ec72:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    ec76:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    ec7a:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    ec7c:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    ec80:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    ec82:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    ec84:	4770      	bx	lr
    ec86:	4901      	ldr	r1, [pc, #4]	; (ec8c <am_hal_clkgen_control+0xb4>)
    ec88:	e7f5      	b.n	ec76 <am_hal_clkgen_control+0x9e>
    ec8a:	bf00      	nop
    ec8c:	0025b801 	.word	0x0025b801

0000ec90 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ec90:	4b00      	ldr	r3, [pc, #0]	; (ec94 <am_hal_flash_delay+0x4>)
    ec92:	4718      	bx	r3
    ec94:	0800009d 	.word	0x0800009d

0000ec98 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    ec98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec9c:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eca0:	f8df 8248 	ldr.w	r8, [pc, #584]	; eeec <am_hal_flash_delay_status_check+0x254>
{
    eca4:	4607      	mov	r7, r0
    eca6:	460c      	mov	r4, r1
    eca8:	4615      	mov	r5, r2
    ecaa:	461e      	mov	r6, r3
    ecac:	f1be 0f00 	cmp.w	lr, #0
    ecb0:	f000 808e 	beq.w	edd0 <am_hal_flash_delay_status_check+0x138>
    ecb4:	f010 0907 	ands.w	r9, r0, #7
    ecb8:	d044      	beq.n	ed44 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ecba:	680b      	ldr	r3, [r1, #0]
    ecbc:	4013      	ands	r3, r2
    ecbe:	429e      	cmp	r6, r3
    ecc0:	f000 8083 	beq.w	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ecc4:	2001      	movs	r0, #1
    ecc6:	47c0      	blx	r8
    ecc8:	f1b9 0f01 	cmp.w	r9, #1
    eccc:	f107 37ff 	add.w	r7, r7, #4294967295
    ecd0:	d038      	beq.n	ed44 <am_hal_flash_delay_status_check+0xac>
    ecd2:	f1b9 0f02 	cmp.w	r9, #2
    ecd6:	d02e      	beq.n	ed36 <am_hal_flash_delay_status_check+0x9e>
    ecd8:	f1b9 0f03 	cmp.w	r9, #3
    ecdc:	d024      	beq.n	ed28 <am_hal_flash_delay_status_check+0x90>
    ecde:	f1b9 0f04 	cmp.w	r9, #4
    ece2:	d01a      	beq.n	ed1a <am_hal_flash_delay_status_check+0x82>
    ece4:	f1b9 0f05 	cmp.w	r9, #5
    ece8:	d010      	beq.n	ed0c <am_hal_flash_delay_status_check+0x74>
    ecea:	f1b9 0f06 	cmp.w	r9, #6
    ecee:	d006      	beq.n	ecfe <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ecf0:	6820      	ldr	r0, [r4, #0]
    ecf2:	4028      	ands	r0, r5
    ecf4:	4286      	cmp	r6, r0
    ecf6:	d068      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ecf8:	2001      	movs	r0, #1
    ecfa:	47c0      	blx	r8
    ecfc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ecfe:	6821      	ldr	r1, [r4, #0]
    ed00:	4029      	ands	r1, r5
    ed02:	428e      	cmp	r6, r1
    ed04:	d061      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed06:	2001      	movs	r0, #1
    ed08:	47c0      	blx	r8
    ed0a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed0c:	6822      	ldr	r2, [r4, #0]
    ed0e:	402a      	ands	r2, r5
    ed10:	4296      	cmp	r6, r2
    ed12:	d05a      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed14:	2001      	movs	r0, #1
    ed16:	47c0      	blx	r8
    ed18:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed1a:	6823      	ldr	r3, [r4, #0]
    ed1c:	402b      	ands	r3, r5
    ed1e:	429e      	cmp	r6, r3
    ed20:	d053      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed22:	2001      	movs	r0, #1
    ed24:	47c0      	blx	r8
    ed26:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed28:	6820      	ldr	r0, [r4, #0]
    ed2a:	4028      	ands	r0, r5
    ed2c:	4286      	cmp	r6, r0
    ed2e:	d04c      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed30:	2001      	movs	r0, #1
    ed32:	47c0      	blx	r8
    ed34:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed36:	6821      	ldr	r1, [r4, #0]
    ed38:	4029      	ands	r1, r5
    ed3a:	428e      	cmp	r6, r1
    ed3c:	d045      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed3e:	2001      	movs	r0, #1
    ed40:	3f01      	subs	r7, #1
    ed42:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed44:	6822      	ldr	r2, [r4, #0]
    ed46:	402a      	ands	r2, r5
    ed48:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed4a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed4e:	d03c      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    ed50:	2f00      	cmp	r7, #0
    ed52:	f000 80c8 	beq.w	eee6 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed56:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed58:	6823      	ldr	r3, [r4, #0]
    ed5a:	402b      	ands	r3, r5
    ed5c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed5e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed62:	d032      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed64:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed66:	6821      	ldr	r1, [r4, #0]
    ed68:	4029      	ands	r1, r5
    ed6a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed6c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed70:	d02b      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed72:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed74:	6822      	ldr	r2, [r4, #0]
    ed76:	402a      	ands	r2, r5
    ed78:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed7a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed7e:	d024      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed80:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed82:	6823      	ldr	r3, [r4, #0]
    ed84:	402b      	ands	r3, r5
    ed86:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed88:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed8c:	d01d      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed8e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed90:	6821      	ldr	r1, [r4, #0]
    ed92:	4029      	ands	r1, r5
    ed94:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed96:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed9a:	d016      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ed9c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ed9e:	6822      	ldr	r2, [r4, #0]
    eda0:	402a      	ands	r2, r5
    eda2:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eda4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    eda8:	d00f      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    edaa:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    edac:	6820      	ldr	r0, [r4, #0]
    edae:	4028      	ands	r0, r5
    edb0:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    edb2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    edb6:	d008      	beq.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    edb8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    edba:	6822      	ldr	r2, [r4, #0]
    edbc:	402a      	ands	r2, r5
    edbe:	4296      	cmp	r6, r2
    edc0:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    edc4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    edc8:	d1c2      	bne.n	ed50 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    edca:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    edcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    edd0:	f010 0907 	ands.w	r9, r0, #7
    edd4:	d043      	beq.n	ee5e <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    edd6:	680b      	ldr	r3, [r1, #0]
    edd8:	4013      	ands	r3, r2
    edda:	429e      	cmp	r6, r3
    eddc:	d1f5      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    edde:	2001      	movs	r0, #1
    ede0:	47c0      	blx	r8
    ede2:	f1b9 0f01 	cmp.w	r9, #1
    ede6:	f107 37ff 	add.w	r7, r7, #4294967295
    edea:	d038      	beq.n	ee5e <am_hal_flash_delay_status_check+0x1c6>
    edec:	f1b9 0f02 	cmp.w	r9, #2
    edf0:	d02e      	beq.n	ee50 <am_hal_flash_delay_status_check+0x1b8>
    edf2:	f1b9 0f03 	cmp.w	r9, #3
    edf6:	d024      	beq.n	ee42 <am_hal_flash_delay_status_check+0x1aa>
    edf8:	f1b9 0f04 	cmp.w	r9, #4
    edfc:	d01a      	beq.n	ee34 <am_hal_flash_delay_status_check+0x19c>
    edfe:	f1b9 0f05 	cmp.w	r9, #5
    ee02:	d010      	beq.n	ee26 <am_hal_flash_delay_status_check+0x18e>
    ee04:	f1b9 0f06 	cmp.w	r9, #6
    ee08:	d006      	beq.n	ee18 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee0a:	6821      	ldr	r1, [r4, #0]
    ee0c:	4029      	ands	r1, r5
    ee0e:	428e      	cmp	r6, r1
    ee10:	d1db      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee12:	2001      	movs	r0, #1
    ee14:	47c0      	blx	r8
    ee16:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee18:	6822      	ldr	r2, [r4, #0]
    ee1a:	402a      	ands	r2, r5
    ee1c:	4296      	cmp	r6, r2
    ee1e:	d1d4      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee20:	2001      	movs	r0, #1
    ee22:	47c0      	blx	r8
    ee24:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee26:	6820      	ldr	r0, [r4, #0]
    ee28:	4028      	ands	r0, r5
    ee2a:	4286      	cmp	r6, r0
    ee2c:	d1cd      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee2e:	2001      	movs	r0, #1
    ee30:	47c0      	blx	r8
    ee32:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee34:	6823      	ldr	r3, [r4, #0]
    ee36:	402b      	ands	r3, r5
    ee38:	429e      	cmp	r6, r3
    ee3a:	d1c6      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee3c:	2001      	movs	r0, #1
    ee3e:	47c0      	blx	r8
    ee40:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee42:	6821      	ldr	r1, [r4, #0]
    ee44:	4029      	ands	r1, r5
    ee46:	428e      	cmp	r6, r1
    ee48:	d1bf      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee4a:	2001      	movs	r0, #1
    ee4c:	47c0      	blx	r8
    ee4e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee50:	6822      	ldr	r2, [r4, #0]
    ee52:	402a      	ands	r2, r5
    ee54:	4296      	cmp	r6, r2
    ee56:	d1b8      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee58:	2001      	movs	r0, #1
    ee5a:	3f01      	subs	r7, #1
    ee5c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee5e:	6823      	ldr	r3, [r4, #0]
    ee60:	402b      	ands	r3, r5
    ee62:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee64:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee68:	d1af      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    ee6a:	2f00      	cmp	r7, #0
    ee6c:	d03b      	beq.n	eee6 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee6e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee70:	6821      	ldr	r1, [r4, #0]
    ee72:	4029      	ands	r1, r5
    ee74:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee76:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee7a:	d1a6      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee7c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee7e:	6822      	ldr	r2, [r4, #0]
    ee80:	402a      	ands	r2, r5
    ee82:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee84:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee88:	d19f      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee8a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee8c:	6823      	ldr	r3, [r4, #0]
    ee8e:	402b      	ands	r3, r5
    ee90:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee92:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee96:	d198      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ee98:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ee9a:	6821      	ldr	r1, [r4, #0]
    ee9c:	4029      	ands	r1, r5
    ee9e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eea0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eea4:	d191      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eea6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eea8:	6822      	ldr	r2, [r4, #0]
    eeaa:	402a      	ands	r2, r5
    eeac:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eeae:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eeb2:	d18a      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eeb4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eeb6:	6823      	ldr	r3, [r4, #0]
    eeb8:	402b      	ands	r3, r5
    eeba:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eebc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eec0:	d183      	bne.n	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eec2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eec4:	6820      	ldr	r0, [r4, #0]
    eec6:	4028      	ands	r0, r5
    eec8:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eeca:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eece:	f47f af7c 	bne.w	edca <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eed2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eed4:	6823      	ldr	r3, [r4, #0]
    eed6:	402b      	ands	r3, r5
    eed8:	429e      	cmp	r6, r3
    eeda:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eede:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    eee2:	d0c2      	beq.n	ee6a <am_hal_flash_delay_status_check+0x1d2>
    eee4:	e771      	b.n	edca <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    eee6:	2004      	movs	r0, #4
    eee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eeec:	0800009d 	.word	0x0800009d

0000eef0 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    eef0:	2831      	cmp	r0, #49	; 0x31
    eef2:	d901      	bls.n	eef8 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    eef4:	2006      	movs	r0, #6
    eef6:	4770      	bx	lr
{
    eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    eefc:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ef00:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    ef04:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    ef06:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ef0a:	d014      	beq.n	ef36 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ef0c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    ef10:	1db2      	adds	r2, r6, #6
    ef12:	f002 0707 	and.w	r7, r2, #7
    ef16:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    ef18:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ef1c:	f200 80ab 	bhi.w	f076 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    ef20:	4a85      	ldr	r2, [pc, #532]	; (f138 <am_hal_gpio_pinconfig+0x248>)
    ef22:	5c17      	ldrb	r7, [r2, r0]
    ef24:	07ff      	lsls	r7, r7, #31
    ef26:	d403      	bmi.n	ef30 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    ef28:	4884      	ldr	r0, [pc, #528]	; (f13c <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    ef2a:	b007      	add	sp, #28
    ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    ef30:	1eb4      	subs	r4, r6, #2
    ef32:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    ef36:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    ef3a:	2e00      	cmp	r6, #0
    ef3c:	f040 8095 	bne.w	f06a <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ef40:	4a7f      	ldr	r2, [pc, #508]	; (f140 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ef42:	4f80      	ldr	r7, [pc, #512]	; (f144 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ef44:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ef46:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ef4a:	411e      	asrs	r6, r3
    ef4c:	f016 0f01 	tst.w	r6, #1
    ef50:	bf0c      	ite	eq
    ef52:	2600      	moveq	r6, #0
    ef54:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ef56:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    ef58:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    ef5c:	f000 8097 	beq.w	f08e <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ef60:	f3c1 3341 	ubfx	r3, r1, #13, #2
    ef64:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ef66:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ef6a:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    ef6e:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    ef70:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ef74:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ef78:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ef7c:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ef80:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ef82:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ef86:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ef8a:	f000 808d 	beq.w	f0a8 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    ef8e:	4a6e      	ldr	r2, [pc, #440]	; (f148 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ef90:	6816      	ldr	r6, [r2, #0]
    ef92:	1b8c      	subs	r4, r1, r6
    ef94:	fab4 f384 	clz	r3, r4
    ef98:	095f      	lsrs	r7, r3, #5
    ef9a:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    ef9c:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    efa0:	bf04      	itt	eq
    efa2:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    efa6:	f367 0800 	bfieq	r8, r7, #0, #1
    efaa:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    efac:	f3c1 2101 	ubfx	r1, r1, #8, #2
    efb0:	2902      	cmp	r1, #2
    efb2:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    efb6:	d07a      	beq.n	f0ae <am_hal_gpio_pinconfig+0x1be>
    efb8:	d87f      	bhi.n	f0ba <am_hal_gpio_pinconfig+0x1ca>
    efba:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    efbc:	bf08      	it	eq
    efbe:	f045 0504 	orreq.w	r5, r5, #4
    efc2:	f004 0a18 	and.w	sl, r4, #24
            break;
    efc6:	2200      	movs	r2, #0
    efc8:	4604      	mov	r4, r0
    efca:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    efcc:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    efd0:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    efd4:	485d      	ldr	r0, [pc, #372]	; (f14c <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    efd6:	495e      	ldr	r1, [pc, #376]	; (f150 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    efd8:	4f5e      	ldr	r7, [pc, #376]	; (f154 <am_hal_gpio_pinconfig+0x264>)
    efda:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    efdc:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    efe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    efe4:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    efe8:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    efea:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    efee:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    eff0:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    eff4:	f000 f8c2 	bl	f17c <am_hal_interrupt_master_disable>
    eff8:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    effa:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    effe:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    f002:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    f006:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    f00a:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    f00c:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    f010:	9902      	ldr	r1, [sp, #8]
    f012:	9a03      	ldr	r2, [sp, #12]
    f014:	b150      	cbz	r0, f02c <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    f016:	f004 001f 	and.w	r0, r4, #31
    f01a:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    f01e:	f04f 0c01 	mov.w	ip, #1
    f022:	4c4d      	ldr	r4, [pc, #308]	; (f158 <am_hal_gpio_pinconfig+0x268>)
    f024:	fa0c f000 	lsl.w	r0, ip, r0
    f028:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    f02c:	484b      	ldr	r0, [pc, #300]	; (f15c <am_hal_gpio_pinconfig+0x26c>)
    f02e:	2473      	movs	r4, #115	; 0x73
    f030:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    f032:	f8da 4000 	ldr.w	r4, [sl]
    f036:	4034      	ands	r4, r6
    f038:	4325      	orrs	r5, r4
    f03a:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    f03e:	f859 5001 	ldr.w	r5, [r9, r1]
    f042:	402f      	ands	r7, r5
    f044:	ea47 0708 	orr.w	r7, r7, r8
    f048:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    f04c:	f85b 1003 	ldr.w	r1, [fp, r3]
    f050:	400e      	ands	r6, r1
    f052:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    f054:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    f056:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    f05a:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    f05c:	9805      	ldr	r0, [sp, #20]
    f05e:	f000 f891 	bl	f184 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    f062:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    f064:	b007      	add	sp, #28
    f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    f06a:	2e01      	cmp	r6, #1
    f06c:	d015      	beq.n	f09a <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    f06e:	2e02      	cmp	r6, #2
    f070:	d030      	beq.n	f0d4 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    f072:	483b      	ldr	r0, [pc, #236]	; (f160 <am_hal_gpio_pinconfig+0x270>)
    f074:	e759      	b.n	ef2a <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    f076:	2cc0      	cmp	r4, #192	; 0xc0
    f078:	d027      	beq.n	f0ca <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    f07a:	2c20      	cmp	r4, #32
    f07c:	f47f af5b 	bne.w	ef36 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    f080:	4c2d      	ldr	r4, [pc, #180]	; (f138 <am_hal_gpio_pinconfig+0x248>)
    f082:	5c26      	ldrb	r6, [r4, r0]
    f084:	f016 0f09 	tst.w	r6, #9
    f088:	f47f af4e 	bne.w	ef28 <am_hal_gpio_pinconfig+0x38>
    f08c:	e753      	b.n	ef36 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    f08e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    f092:	2a07      	cmp	r2, #7
    f094:	d125      	bne.n	f0e2 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    f096:	4833      	ldr	r0, [pc, #204]	; (f164 <am_hal_gpio_pinconfig+0x274>)
    f098:	e747      	b.n	ef2a <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    f09a:	4c27      	ldr	r4, [pc, #156]	; (f138 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    f09c:	5c26      	ldrb	r6, [r4, r0]
    f09e:	07b4      	lsls	r4, r6, #30
    f0a0:	d5e7      	bpl.n	f072 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    f0a2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    f0a6:	e74b      	b.n	ef40 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    f0a8:	2701      	movs	r7, #1
    f0aa:	9700      	str	r7, [sp, #0]
    f0ac:	e776      	b.n	ef9c <am_hal_gpio_pinconfig+0xac>
    f0ae:	f004 0a18 	and.w	sl, r4, #24
    f0b2:	2301      	movs	r3, #1
    f0b4:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    f0b8:	e786      	b.n	efc8 <am_hal_gpio_pinconfig+0xd8>
    f0ba:	f004 0a18 	and.w	sl, r4, #24
    f0be:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    f0c0:	f045 0504 	orr.w	r5, r5, #4
    f0c4:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    f0c8:	e77e      	b.n	efc8 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    f0ca:	2814      	cmp	r0, #20
    f0cc:	f43f af33 	beq.w	ef36 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    f0d0:	4825      	ldr	r0, [pc, #148]	; (f168 <am_hal_gpio_pinconfig+0x278>)
    f0d2:	e72a      	b.n	ef2a <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    f0d4:	4a18      	ldr	r2, [pc, #96]	; (f138 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    f0d6:	5c17      	ldrb	r7, [r2, r0]
    f0d8:	077a      	lsls	r2, r7, #29
    f0da:	d5ca      	bpl.n	f072 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    f0dc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    f0e0:	e72e      	b.n	ef40 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    f0e2:	4c22      	ldr	r4, [pc, #136]	; (f16c <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    f0e4:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    f0e8:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    f0ec:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    f0f0:	45b0      	cmp	r8, r6
    f0f2:	d010      	beq.n	f116 <am_hal_gpio_pinconfig+0x226>
    f0f4:	0087      	lsls	r7, r0, #2
    f0f6:	eb04 0907 	add.w	r9, r4, r7
    f0fa:	f899 3001 	ldrb.w	r3, [r9, #1]
    f0fe:	42b3      	cmp	r3, r6
    f100:	d015      	beq.n	f12e <am_hal_gpio_pinconfig+0x23e>
    f102:	f899 2002 	ldrb.w	r2, [r9, #2]
    f106:	42b2      	cmp	r2, r6
    f108:	d00f      	beq.n	f12a <am_hal_gpio_pinconfig+0x23a>
    f10a:	f899 4003 	ldrb.w	r4, [r9, #3]
    f10e:	42b4      	cmp	r4, r6
    f110:	d00f      	beq.n	f132 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    f112:	4817      	ldr	r0, [pc, #92]	; (f170 <am_hal_gpio_pinconfig+0x280>)
    f114:	e709      	b.n	ef2a <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    f116:	2600      	movs	r6, #0
    f118:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    f11a:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    f11c:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    f120:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    f122:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    f126:	9300      	str	r3, [sp, #0]
    f128:	e740      	b.n	efac <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    f12a:	2602      	movs	r6, #2
    f12c:	e7f5      	b.n	f11a <am_hal_gpio_pinconfig+0x22a>
    f12e:	2601      	movs	r6, #1
    f130:	e7f3      	b.n	f11a <am_hal_gpio_pinconfig+0x22a>
    f132:	2603      	movs	r6, #3
    f134:	e7f1      	b.n	f11a <am_hal_gpio_pinconfig+0x22a>
    f136:	bf00      	nop
    f138:	000120b8 	.word	0x000120b8
    f13c:	08000100 	.word	0x08000100
    f140:	000120ec 	.word	0x000120ec
    f144:	000121e8 	.word	0x000121e8
    f148:	000120b4 	.word	0x000120b4
    f14c:	7ffffffc 	.word	0x7ffffffc
    f150:	400100e0 	.word	0x400100e0
    f154:	40010040 	.word	0x40010040
    f158:	400100b4 	.word	0x400100b4
    f15c:	40010000 	.word	0x40010000
    f160:	08000102 	.word	0x08000102
    f164:	08000103 	.word	0x08000103
    f168:	08000101 	.word	0x08000101
    f16c:	00012120 	.word	0x00012120
    f170:	08000104 	.word	0x08000104

0000f174 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    f174:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    f178:	b662      	cpsie	i
    __asm("    bx lr");
    f17a:	4770      	bx	lr

0000f17c <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    f17c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    f180:	b672      	cpsid	i
    __asm("    bx lr");
    f182:	4770      	bx	lr

0000f184 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    f184:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    f188:	4770      	bx	lr
    f18a:	bf00      	nop

0000f18c <internal_iom_reset_on_error>:

} // internal_iom_get_int_err()

static void
internal_iom_reset_on_error(am_hal_iom_state_t  *pIOMState, uint32_t ui32IntMask)
{
    f18c:	b570      	push	{r4, r5, r6, lr}
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
    uint32_t ui32Module = pIOMState->ui32Module;
#if AM_CMSIS_REGS
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
    f18e:	6844      	ldr	r4, [r0, #4]
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
    f190:	f8d0 0830 	ldr.w	r0, [r0, #2096]	; 0x830
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
    f194:	f504 22a0 	add.w	r2, r4, #327680	; 0x50000
    f198:	3204      	adds	r2, #4
    f19a:	0314      	lsls	r4, r2, #12
    IOMn(ui32Module)->INTEN = 0;
    f19c:	2300      	movs	r3, #0
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
    f19e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
    f1a2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    // Disable interrupts temporarily
    if (ui32IntMask & AM_HAL_IOM_INT_DERR)
    f1a6:	050b      	lsls	r3, r1, #20
    f1a8:	d52a      	bpl.n	f200 <internal_iom_reset_on_error+0x74>
    {
        if ((IOMn(ui32Module)->DMACFG & IOM0_DMACFG_DMADIR_Msk) == _VAL2FLD(IOM0_DMACFG_DMADIR, IOM0_DMACFG_DMADIR_M2P))
    f1aa:	f8d4 6280 	ldr.w	r6, [r4, #640]	; 0x280
    f1ae:	07b6      	lsls	r6, r6, #30
    f1b0:	d450      	bmi.n	f254 <internal_iom_reset_on_error+0xc8>
        }
        else
        {
            // Read
            // Let command finish
            while (IOMn(ui32Module)->STATUS_b.CMDACT)
    f1b2:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
    f1b6:	0792      	lsls	r2, r2, #30
    f1b8:	d508      	bpl.n	f1cc <internal_iom_reset_on_error+0x40>
            {
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
    f1ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f1be:	f3c3 4607 	ubfx	r6, r3, #16, #8
    f1c2:	2e03      	cmp	r6, #3
    f1c4:	d9f5      	bls.n	f1b2 <internal_iom_reset_on_error+0x26>
                {
                    // Read one 4-byte word from FIFO
                    IOMn(ui32Module)->FIFOPOP;
    f1c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f1ca:	e7f6      	b.n	f1ba <internal_iom_reset_on_error+0x2e>
                    IOMn(ui32Module)->FIFOPOP = 0x11111111;
#endif
                }
            }
            // Now wait for command to finish
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
    f1cc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    f1d0:	f003 0606 	and.w	r6, r3, #6
    f1d4:	2e04      	cmp	r6, #4
    f1d6:	d1f9      	bne.n	f1cc <internal_iom_reset_on_error+0x40>
            // Flush any remaining data from FIFO
            while  (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ)
    f1d8:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f1dc:	f3c2 4307 	ubfx	r3, r2, #16, #8
    f1e0:	b173      	cbz	r3, f200 <internal_iom_reset_on_error+0x74>
            {
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
    f1e2:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
    f1e6:	f3c6 4207 	ubfx	r2, r6, #16, #8
    f1ea:	2a03      	cmp	r2, #3
    f1ec:	d9f4      	bls.n	f1d8 <internal_iom_reset_on_error+0x4c>
                {
                    // Read one 4-byte word from FIFO
                    IOMn(ui32Module)->FIFOPOP;
    f1ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    f1f2:	e7f6      	b.n	f1e2 <internal_iom_reset_on_error+0x56>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
    f1f4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
    f1f8:	f002 0606 	and.w	r6, r2, #6
    f1fc:	2e04      	cmp	r6, #4
    f1fe:	d1f9      	bne.n	f1f4 <internal_iom_reset_on_error+0x68>
#endif
                }
            }
        }
    }
    if (ui32IntMask & AM_HAL_IOM_INT_NAK)
    f200:	06cb      	lsls	r3, r1, #27
    f202:	d520      	bpl.n	f246 <internal_iom_reset_on_error+0xba>
    {
        //
        // Wait for Idle
        //
        while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
    f204:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
    f208:	f001 0306 	and.w	r3, r1, #6
    f20c:	2b04      	cmp	r3, #4
    f20e:	d1f9      	bne.n	f204 <internal_iom_reset_on_error+0x78>
        //
        // Reset Submodule & FIFO
        //
        // Disable the submodules
        //
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
    f210:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
    f214:	f36f 1204 	bfc	r2, #4, #1
    f218:	f884 2214 	strb.w	r2, [r4, #532]	; 0x214
        // Reset Fifo
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
    f21c:	f894 6110 	ldrb.w	r6, [r4, #272]	; 0x110
    f220:	f36f 0641 	bfc	r6, #1, #1

        // Wait for few IO clock cycles
        am_hal_flash_delay(iterationsToWait);
    f224:	0040      	lsls	r0, r0, #1
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
    f226:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
        am_hal_flash_delay(iterationsToWait);
    f22a:	f7ff fd31 	bl	ec90 <am_hal_flash_delay>

        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 1;
    f22e:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
    f232:	f040 0102 	orr.w	r1, r0, #2
    f236:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110

        // Enable submodule
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 1;
    f23a:	f894 c214 	ldrb.w	ip, [r4, #532]	; 0x214
    f23e:	f04c 0310 	orr.w	r3, ip, #16
    f242:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    }

    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
    f246:	f04f 32ff 	mov.w	r2, #4294967295
    f24a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208

    // Restore interrupts
    IOMn(ui32Module)->INTEN = curIntCfg;
    f24e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    f252:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t numBytesRemaining = IOMn(ui32Module)->DMATOTCOUNT;
    f254:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
                    IOMn(ui32Module)->FIFOPUSH = dummy;
    f258:	4e07      	ldr	r6, [pc, #28]	; (f278 <internal_iom_reset_on_error+0xec>)
            while (numBytesRemaining)
    f25a:	2a00      	cmp	r2, #0
    f25c:	d0ca      	beq.n	f1f4 <internal_iom_reset_on_error+0x68>
                if (IOMn(ui32Module)->FIFOPTR_b.FIFO0REM >= 4)
    f25e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f262:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f266:	2b03      	cmp	r3, #3
    f268:	d9f9      	bls.n	f25e <internal_iom_reset_on_error+0xd2>
                    if (numBytesRemaining > 4)
    f26a:	2a04      	cmp	r2, #4
                    IOMn(ui32Module)->FIFOPUSH = dummy;
    f26c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
                    if (numBytesRemaining > 4)
    f270:	d9c0      	bls.n	f1f4 <internal_iom_reset_on_error+0x68>
                        numBytesRemaining -= 4;
    f272:	3a04      	subs	r2, #4
    f274:	e7f1      	b.n	f25a <internal_iom_reset_on_error+0xce>
    f276:	bf00      	nop
    f278:	deadbeef 	.word	0xdeadbeef

0000f27c <am_hal_iom_initialize>:
{
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
    f27c:	2805      	cmp	r0, #5
    f27e:	d901      	bls.n	f284 <am_hal_iom_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    f280:	2005      	movs	r0, #5
    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_initialize()
    f282:	4770      	bx	lr
    if (ppHandle == NULL)
    f284:	b1d9      	cbz	r1, f2be <am_hal_iom_initialize+0x42>
{
    f286:	b4f0      	push	{r4, r5, r6, r7}
    if (g_IOMhandles[ui32Module].prefix.s.bInit)
    f288:	f640 026c 	movw	r2, #2156	; 0x86c
    f28c:	4e0d      	ldr	r6, [pc, #52]	; (f2c4 <am_hal_iom_initialize+0x48>)
    f28e:	fb02 f200 	mul.w	r2, r2, r0
    f292:	18b5      	adds	r5, r6, r2
    f294:	78ec      	ldrb	r4, [r5, #3]
    f296:	f014 0301 	ands.w	r3, r4, #1
    f29a:	d003      	beq.n	f2a4 <am_hal_iom_initialize+0x28>
        return AM_HAL_STATUS_INVALID_OPERATION;
    f29c:	2307      	movs	r3, #7
} // am_hal_iom_initialize()
    f29e:	4618      	mov	r0, r3
    f2a0:	bcf0      	pop	{r4, r5, r6, r7}
    f2a2:	4770      	bx	lr
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
    f2a4:	f044 0701 	orr.w	r7, r4, #1
    f2a8:	f363 0741 	bfi	r7, r3, #1, #1
    f2ac:	70ef      	strb	r7, [r5, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
    f2ae:	58b4      	ldr	r4, [r6, r2]
    f2b0:	4f05      	ldr	r7, [pc, #20]	; (f2c8 <am_hal_iom_initialize+0x4c>)
    f2b2:	f367 0417 	bfi	r4, r7, #0, #24
    f2b6:	50b4      	str	r4, [r6, r2]
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
    f2b8:	6068      	str	r0, [r5, #4]
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
    f2ba:	600d      	str	r5, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    f2bc:	e7ef      	b.n	f29e <am_hal_iom_initialize+0x22>
        return AM_HAL_STATUS_INVALID_ARG;
    f2be:	2006      	movs	r0, #6
    f2c0:	e7df      	b.n	f282 <am_hal_iom_initialize+0x6>
    f2c2:	bf00      	nop
    f2c4:	10003bd8 	.word	0x10003bd8
    f2c8:	00123456 	.word	0x00123456

0000f2cc <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f2cc:	b128      	cbz	r0, f2da <am_hal_iom_enable+0xe>
    f2ce:	6803      	ldr	r3, [r0, #0]
    f2d0:	4a28      	ldr	r2, [pc, #160]	; (f374 <am_hal_iom_enable+0xa8>)
    f2d2:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    f2d6:	4291      	cmp	r1, r2
    f2d8:	d001      	beq.n	f2de <am_hal_iom_enable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    f2da:	2002      	movs	r0, #2
    f2dc:	4770      	bx	lr
    }

    if (pIOMState->prefix.s.bEnable)
    f2de:	f890 c003 	ldrb.w	ip, [r0, #3]
    f2e2:	ea5f 738c 	movs.w	r3, ip, lsl #30
    f2e6:	d442      	bmi.n	f36e <am_hal_iom_enable+0xa2>
{
    f2e8:	b530      	push	{r4, r5, lr}
    }
#endif

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
    f2ea:	6845      	ldr	r5, [r0, #4]
    f2ec:	7a04      	ldrb	r4, [r0, #8]
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
    f2ee:	f505 23a0 	add.w	r3, r5, #327680	; 0x50000
    f2f2:	3304      	adds	r3, #4
    f2f4:	031b      	lsls	r3, r3, #12
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
    f2f6:	1c21      	adds	r1, r4, #0
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
    f2f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
    f2fc:	bf18      	it	ne
    f2fe:	2101      	movne	r1, #1
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
    f300:	f3c2 0442 	ubfx	r4, r2, #1, #3
    f304:	42a1      	cmp	r1, r4
        IOMn(ui32Module)->SUBMODCTRL =
    f306:	bf0c      	ite	eq
    f308:	2401      	moveq	r4, #1
        IOMn(ui32Module)->SUBMODCTRL =
    f30a:	2410      	movne	r4, #16
    f30c:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    f310:	4604      	mov	r4, r0
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
    f312:	68c0      	ldr	r0, [r0, #12]
{
    f314:	b085      	sub	sp, #20
    if ( pIOMState->pNBTxnBuf )
    f316:	b1f8      	cbz	r0, f358 <am_hal_iom_enable+0x8c>
    {
        pIOMState->ui32NumPendTransactions = 0;
        pIOMState->ui32LastIdxProcessed = 0;
#if (AM_HAL_IOM_CQ == 1)
        status = am_hal_iom_CQInit(pIOMState,
    f318:	6921      	ldr	r1, [r4, #16]
    cqCfg.pCmdQBuf = pTCB;
    f31a:	9002      	str	r0, [sp, #8]
        pIOMState->ui32NumPendTransactions = 0;
    f31c:	2300      	movs	r3, #0
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
    f31e:	b2e8      	uxtb	r0, r5
        pIOMState->ui32NumPendTransactions = 0;
    f320:	6263      	str	r3, [r4, #36]	; 0x24
    cqCfg.cmdQSize = ui32Length / 2;
    f322:	084d      	lsrs	r5, r1, #1
        pIOMState->ui32LastIdxProcessed = 0;
    f324:	61e3      	str	r3, [r4, #28]
    pIOMState->pCmdQHdl = NULL;
    f326:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
    f32a:	6223      	str	r3, [r4, #32]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
    f32c:	f04f 0e01 	mov.w	lr, #1
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
    f330:	f604 0228 	addw	r2, r4, #2088	; 0x828
    f334:	a901      	add	r1, sp, #4
    cqCfg.cmdQSize = ui32Length / 2;
    f336:	9501      	str	r5, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
    f338:	f88d e00c 	strb.w	lr, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
    f33c:	f002 f9e2 	bl	11704 <am_hal_cmdq_init>
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if AM_CMSIS_REGS
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
    f340:	6862      	ldr	r2, [r4, #4]
    f342:	f502 21a0 	add.w	r1, r2, #327680	; 0x50000
    f346:	3104      	adds	r1, #4
    f348:	030b      	lsls	r3, r1, #12
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    f34a:	b960      	cbnz	r0, f366 <am_hal_iom_enable+0x9a>
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
    f34c:	f44f 7080 	mov.w	r0, #256	; 0x100
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
    f350:	2502      	movs	r5, #2
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
    f352:	6220      	str	r0, [r4, #32]
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
    f354:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
#endif // AM_CMSIS_REGS
    }

    if (status == AM_HAL_STATUS_SUCCESS)
    {
        pIOMState->prefix.s.bEnable = true;
    f358:	78e2      	ldrb	r2, [r4, #3]
    f35a:	f042 0102 	orr.w	r1, r2, #2
    f35e:	70e1      	strb	r1, [r4, #3]
    f360:	2000      	movs	r0, #0
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
    f362:	b005      	add	sp, #20
    f364:	bd30      	pop	{r4, r5, pc}
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
    f366:	2402      	movs	r4, #2
    f368:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
    f36c:	e7f9      	b.n	f362 <am_hal_iom_enable+0x96>
        return AM_HAL_STATUS_SUCCESS;
    f36e:	2000      	movs	r0, #0
    f370:	4770      	bx	lr
    f372:	bf00      	nop
    f374:	01123456 	.word	0x01123456

0000f378 <am_hal_iom_power_ctrl>:
                      bool bRetainState)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f378:	b150      	cbz	r0, f390 <am_hal_iom_power_ctrl+0x18>
{
    f37a:	b510      	push	{r4, lr}
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f37c:	6803      	ldr	r3, [r0, #0]
    f37e:	4c58      	ldr	r4, [pc, #352]	; (f4e0 <am_hal_iom_power_ctrl+0x168>)
    f380:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    f384:	45a4      	cmp	ip, r4
{
    f386:	b082      	sub	sp, #8
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f388:	d004      	beq.n	f394 <am_hal_iom_power_ctrl+0x1c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    f38a:	2002      	movs	r0, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
    f38c:	b002      	add	sp, #8
    f38e:	bd10      	pop	{r4, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    f390:	2002      	movs	r0, #2
    f392:	4770      	bx	lr
    f394:	4604      	mov	r4, r0
    switch (ePowerState)
    f396:	b181      	cbz	r1, f3ba <am_hal_iom_power_ctrl+0x42>
    f398:	2902      	cmp	r1, #2
    f39a:	d80c      	bhi.n	f3b6 <am_hal_iom_power_ctrl+0x3e>
            if (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
    f39c:	6840      	ldr	r0, [r0, #4]
    f39e:	f500 21a0 	add.w	r1, r0, #327680	; 0x50000
    f3a2:	3104      	adds	r1, #4
    f3a4:	0309      	lsls	r1, r1, #12
    f3a6:	f8d1 32b4 	ldr.w	r3, [r1, #692]	; 0x2b4
    f3aa:	f003 0306 	and.w	r3, r3, #6
    f3ae:	2b04      	cmp	r3, #4
    f3b0:	d055      	beq.n	f45e <am_hal_iom_power_ctrl+0xe6>
                return AM_HAL_STATUS_IN_USE;
    f3b2:	2003      	movs	r0, #3
    f3b4:	e7ea      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    f3b6:	2006      	movs	r0, #6
    f3b8:	e7e8      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
            if (bRetainState && !pIOMState->registerState.bValid)
    f3ba:	b122      	cbz	r2, f3c6 <am_hal_iom_power_ctrl+0x4e>
    f3bc:	f890 3834 	ldrb.w	r3, [r0, #2100]	; 0x834
    f3c0:	b94b      	cbnz	r3, f3d6 <am_hal_iom_power_ctrl+0x5e>
                return AM_HAL_STATUS_INVALID_OPERATION;
    f3c2:	2007      	movs	r0, #7
    f3c4:	e7e2      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
            am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module));
    f3c6:	6844      	ldr	r4, [r0, #4]
    f3c8:	9201      	str	r2, [sp, #4]
    f3ca:	3402      	adds	r4, #2
    f3cc:	b2e0      	uxtb	r0, r4
    f3ce:	f001 fae7 	bl	109a0 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    f3d2:	9801      	ldr	r0, [sp, #4]
    f3d4:	e7da      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
    f3d6:	9101      	str	r1, [sp, #4]
            am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module));
    f3d8:	6841      	ldr	r1, [r0, #4]
    f3da:	3102      	adds	r1, #2
    f3dc:	b2c8      	uxtb	r0, r1
    f3de:	f001 fadf 	bl	109a0 <am_hal_pwrctrl_periph_enable>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
    f3e2:	6860      	ldr	r0, [r4, #4]
    f3e4:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
    return AM_HAL_STATUS_SUCCESS;
    f3e8:	9901      	ldr	r1, [sp, #4]
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
    f3ea:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    f3ee:	3304      	adds	r3, #4
    f3f0:	031b      	lsls	r3, r3, #12
    return AM_HAL_STATUS_SUCCESS;
    f3f2:	4608      	mov	r0, r1
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
    f3f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
    f3f8:	f8d4 2840 	ldr.w	r2, [r4, #2112]	; 0x840
    f3fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
    f400:	f8d4 2844 	ldr.w	r2, [r4, #2116]	; 0x844
    f404:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
    f408:	f8d4 284c 	ldr.w	r2, [r4, #2124]	; 0x84c
    f40c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQFLAGS    = pIOMState->registerState.regCQFLAGS;
    f410:	f8d4 2850 	ldr.w	r2, [r4, #2128]	; 0x850
    f414:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
    f418:	f8d4 2854 	ldr.w	r2, [r4, #2132]	; 0x854
    f41c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
    f420:	f8d4 2858 	ldr.w	r2, [r4, #2136]	; 0x858
    f424:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
    f428:	f8d4 285c 	ldr.w	r2, [r4, #2140]	; 0x85c
    f42c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
    f430:	f8d4 2860 	ldr.w	r2, [r4, #2144]	; 0x860
    f434:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
    f438:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    f43c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
    f440:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    f444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
    f448:	f8d4 283c 	ldr.w	r2, [r4, #2108]	; 0x83c
    f44c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG;
    f450:	f8d4 2848 	ldr.w	r2, [r4, #2120]	; 0x848
    f454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                pIOMState->registerState.bValid = false;
    f458:	f884 1834 	strb.w	r1, [r4, #2100]	; 0x834
    f45c:	e796      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
                pIOMState->ui32NumPendTransactions)
    f45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
    f460:	2b00      	cmp	r3, #0
    f462:	d1a6      	bne.n	f3b2 <am_hal_iom_power_ctrl+0x3a>
            if (bRetainState)
    f464:	b3b2      	cbz	r2, f4d4 <am_hal_iom_power_ctrl+0x15c>
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
    f466:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    f46a:	f8c4 2838 	str.w	r2, [r4, #2104]	; 0x838
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
    f46e:	f8d1 3210 	ldr.w	r3, [r1, #528]	; 0x210
    f472:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
    f476:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
    f47a:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
    f47e:	f8d1 3294 	ldr.w	r3, [r1, #660]	; 0x294
    f482:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
    f486:	f8d1 2298 	ldr.w	r2, [r1, #664]	; 0x298
    f48a:	f8c4 284c 	str.w	r2, [r4, #2124]	; 0x84c
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
    f48e:	f8d1 32a0 	ldr.w	r3, [r1, #672]	; 0x2a0
    f492:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
    f496:	f8d1 22a8 	ldr.w	r2, [r1, #680]	; 0x2a8
    f49a:	f8c4 2854 	str.w	r2, [r4, #2132]	; 0x854
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
    f49e:	f8d1 32ac 	ldr.w	r3, [r1, #684]	; 0x2ac
    f4a2:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
    f4a6:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
    f4aa:	f8c4 285c 	str.w	r2, [r4, #2140]	; 0x85c
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
    f4ae:	f8d1 3300 	ldr.w	r3, [r1, #768]	; 0x300
    f4b2:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
    f4b6:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    f4ba:	f8c4 2864 	str.w	r2, [r4, #2148]	; 0x864
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
    f4be:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    f4c2:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
    f4c6:	f8d1 1240 	ldr.w	r1, [r1, #576]	; 0x240
    f4ca:	f8c4 183c 	str.w	r1, [r4, #2108]	; 0x83c
                pIOMState->registerState.bValid = true;
    f4ce:	2201      	movs	r2, #1
    f4d0:	f884 2834 	strb.w	r2, [r4, #2100]	; 0x834
            am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module));
    f4d4:	3002      	adds	r0, #2
    f4d6:	b2c0      	uxtb	r0, r0
    f4d8:	f001 fa8c 	bl	109f4 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    f4dc:	2000      	movs	r0, #0
            break;
    f4de:	e755      	b.n	f38c <am_hal_iom_power_ctrl+0x14>
    f4e0:	01123456 	.word	0x01123456

0000f4e4 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f4e4:	b130      	cbz	r0, f4f4 <am_hal_iom_configure+0x10>
    f4e6:	6803      	ldr	r3, [r0, #0]
    f4e8:	4602      	mov	r2, r0
    f4ea:	4882      	ldr	r0, [pc, #520]	; (f6f4 <am_hal_iom_configure+0x210>)
    f4ec:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    f4f0:	4584      	cmp	ip, r0
    f4f2:	d001      	beq.n	f4f8 <am_hal_iom_configure+0x14>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    f4f4:	2002      	movs	r0, #2
    f4f6:	4770      	bx	lr
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
    f4f8:	b111      	cbz	r1, f500 <am_hal_iom_configure+0x1c>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
    f4fa:	6853      	ldr	r3, [r2, #4]
         (psConfig == NULL)     ||
    f4fc:	2b05      	cmp	r3, #5
    f4fe:	d901      	bls.n	f504 <am_hal_iom_configure+0x20>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    f500:	2006      	movs	r0, #6
    //
    // Return the status.
    //
    return status;

} // am_hal_iom_configure()
    f502:	4770      	bx	lr
    if (pIOMState->prefix.s.bEnable)
    f504:	78d0      	ldrb	r0, [r2, #3]
    f506:	0780      	lsls	r0, r0, #30
    f508:	d501      	bpl.n	f50e <am_hal_iom_configure+0x2a>
        return AM_HAL_STATUS_INVALID_OPERATION;
    f50a:	2007      	movs	r0, #7
    f50c:	4770      	bx	lr
{
    f50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    IOMn(ui32Module)->FIFOTHR =
    f512:	f503 24a0 	add.w	r4, r3, #327680	; 0x50000
    f516:	3404      	adds	r4, #4
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
    f518:	780d      	ldrb	r5, [r1, #0]
    f51a:	7215      	strb	r5, [r2, #8]
    IOMn(ui32Module)->FIFOTHR =
    f51c:	0323      	lsls	r3, r4, #12
    f51e:	f241 0610 	movw	r6, #4112	; 0x1010
    f522:	f8c3 6104 	str.w	r6, [r3, #260]	; 0x104
    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
    f526:	b93d      	cbnz	r5, f538 <am_hal_iom_configure+0x54>
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
    f528:	f891 c008 	ldrb.w	ip, [r1, #8]
    f52c:	f1bc 0f03 	cmp.w	ip, #3
    f530:	d908      	bls.n	f544 <am_hal_iom_configure+0x60>
                return AM_HAL_STATUS_INVALID_ARG;
    f532:	2006      	movs	r0, #6
    f534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
    f538:	2d01      	cmp	r5, #1
    f53a:	f000 80b3 	beq.w	f6a4 <am_hal_iom_configure+0x1c0>
        return AM_HAL_STATUS_OUT_OF_RANGE;
    f53e:	2005      	movs	r0, #5
    f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
    f544:	f8d1 e004 	ldr.w	lr, [r1, #4]
    f548:	ea4f 076c 	mov.w	r7, ip, asr #1
    if ( ui32FreqHz == 0 )
    f54c:	f1be 0f00 	cmp.w	lr, #0
    f550:	f000 80a6 	beq.w	f6a0 <am_hal_iom_configure+0x1bc>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    f554:	4c68      	ldr	r4, [pc, #416]	; (f6f8 <am_hal_iom_configure+0x214>)
    f556:	fbb4 f8fe 	udiv	r8, r4, lr
    f55a:	fb0e 4518 	mls	r5, lr, r8, r4
    f55e:	2d00      	cmp	r5, #0
    f560:	bf18      	it	ne
    f562:	f108 0801 	addne.w	r8, r8, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    f566:	f1c8 0600 	rsb	r6, r8, #0
    f56a:	ea06 0008 	and.w	r0, r6, r8
    f56e:	fab0 f480 	clz	r4, r0
    f572:	f1c4 051f 	rsb	r5, r4, #31
    f576:	2d06      	cmp	r5, #6
    f578:	bfa8      	it	ge
    f57a:	2506      	movge	r5, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    f57c:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    f580:	f240 80a3 	bls.w	f6ca <am_hal_iom_configure+0x1e6>
    f584:	f5ae 0a74 	sub.w	sl, lr, #15990784	; 0xf40000
    f588:	4e5c      	ldr	r6, [pc, #368]	; (f6fc <am_hal_iom_configure+0x218>)
    f58a:	f5aa 5a10 	sub.w	sl, sl, #9216	; 0x2400
    f58e:	45b2      	cmp	sl, r6
    f590:	bf8c      	ite	hi
    f592:	f04f 0a00 	movhi.w	sl, #0
    f596:	f04f 0a01 	movls.w	sl, #1
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    f59a:	ea4f 004a 	mov.w	r0, sl, lsl #1
    f59e:	3001      	adds	r0, #1
    f5a0:	fa00 f905 	lsl.w	r9, r0, r5
    ui32TotPer = i32Div / ui32Denom;
    f5a4:	fbb8 f4f9 	udiv	r4, r8, r9
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    f5a8:	fb09 8b14 	mls	fp, r9, r4, r8
    f5ac:	f1bb 0f00 	cmp.w	fp, #0
    f5b0:	bf18      	it	ne
    f5b2:	3401      	addne	r4, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    f5b4:	fab4 f684 	clz	r6, r4
    f5b8:	f1c6 091f 	rsb	r9, r6, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    f5bc:	f1b9 0f07 	cmp.w	r9, #7
    f5c0:	f240 8081 	bls.w	f6c6 <am_hal_iom_configure+0x1e2>
    f5c4:	3d07      	subs	r5, #7
    f5c6:	444d      	add	r5, r9
    ui32Fsel++;
    f5c8:	1c6e      	adds	r6, r5, #1
    if ( ui32Fsel > 7 )
    f5ca:	2e07      	cmp	r6, #7
    f5cc:	d868      	bhi.n	f6a0 <am_hal_iom_configure+0x1bc>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    f5ce:	f1a9 0907 	sub.w	r9, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    f5d2:	f04f 0b01 	mov.w	fp, #1
    f5d6:	fa0b fb09 	lsl.w	fp, fp, r9
    f5da:	f10b 3bff 	add.w	fp, fp, #4294967295
    f5de:	ea0b 0b04 	and.w	fp, fp, r4
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    f5e2:	fa24 f409 	lsr.w	r4, r4, r9
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    f5e6:	f1bb 0f00 	cmp.w	fp, #0
    f5ea:	bf18      	it	ne
    f5ec:	3401      	addne	r4, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f5ee:	f8df 9138 	ldr.w	r9, [pc, #312]	; f728 <am_hal_iom_configure+0x244>
    f5f2:	45ce      	cmp	lr, r9
    f5f4:	d86c      	bhi.n	f6d0 <am_hal_iom_configure+0x1ec>
    f5f6:	f04f 0b01 	mov.w	fp, #1
    f5fa:	fa0b f905 	lsl.w	r9, fp, r5
    f5fe:	ebb9 0908 	subs.w	r9, r9, r8
    f602:	bf18      	it	ne
    f604:	f04f 0901 	movne.w	r9, #1
    if (ui32Phase == 1)
    f608:	2f00      	cmp	r7, #0
    f60a:	d164      	bne.n	f6d6 <am_hal_iom_configure+0x1f2>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    f60c:	3c01      	subs	r4, #1
    f60e:	ea4f 0854 	mov.w	r8, r4, lsr #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f612:	fb04 fb09 	mul.w	fp, r4, r9
    f616:	40a8      	lsls	r0, r5
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f618:	4f37      	ldr	r7, [pc, #220]	; (f6f8 <am_hal_iom_configure+0x214>)
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f61a:	0235      	lsls	r5, r6, #8
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    f61c:	fb0b 0000 	mla	r0, fp, r0, r0
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f620:	f405 66e0 	and.w	r6, r5, #1792	; 0x700
    f624:	ea46 6404 	orr.w	r4, r6, r4, lsl #24
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    f628:	fbb7 f5f0 	udiv	r5, r7, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f62c:	fb00 7715 	mls	r7, r0, r5, r7
    f630:	0840      	lsrs	r0, r0, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f632:	ea44 2aca 	orr.w	sl, r4, sl, lsl #11
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    f636:	42b8      	cmp	r0, r7
    f638:	bf2c      	ite	cs
    f63a:	462c      	movcs	r4, r5
    f63c:	1c6c      	addcc	r4, r5, #1
    if ( (ui32ClkFreq % 250000) == 0 )
    f63e:	4d30      	ldr	r5, [pc, #192]	; (f700 <am_hal_iom_configure+0x21c>)
    f640:	fbb4 fbf5 	udiv	fp, r4, r5
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
    f644:	ea4f 4808 	mov.w	r8, r8, lsl #16
    f648:	f408 077f 	and.w	r7, r8, #16711680	; 0xff0000
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f64c:	ea4a 3009 	orr.w	r0, sl, r9, lsl #12
    if ( (ui32ClkFreq % 250000) == 0 )
    f650:	fb05 441b 	mls	r4, r5, fp, r4
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f654:	4307      	orrs	r7, r0
    if ( (ui32ClkFreq % 250000) == 0 )
    f656:	b94c      	cbnz	r4, f66c <am_hal_iom_configure+0x188>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    f658:	f1bb 0f00 	cmp.w	fp, #0
    f65c:	d006      	beq.n	f66c <am_hal_iom_configure+0x188>
    f65e:	f10b 35ff 	add.w	r5, fp, #4294967295
    f662:	ea15 0f0b 	tst.w	r5, fp
    f666:	d101      	bne.n	f66c <am_hal_iom_configure+0x188>
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
    f668:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
    f66c:	f04f 0900 	mov.w	r9, #0
    f670:	ea49 0707 	orr.w	r7, r9, r7
        IOMn(ui32Module)->MSPICFG =
    f674:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
    f678:	f047 0601 	orr.w	r6, r7, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
    f67c:	f8c3 6210 	str.w	r6, [r3, #528]	; 0x210
    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
    f680:	68c8      	ldr	r0, [r1, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
    f682:	690b      	ldr	r3, [r1, #16]
    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
    f684:	4c1c      	ldr	r4, [pc, #112]	; (f6f8 <am_hal_iom_configure+0x214>)
    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
    f686:	60d0      	str	r0, [r2, #12]
    pIOMState->waitTimeout = 1000;
    f688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
    f68c:	fbb4 f5fe 	udiv	r5, r4, lr
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
    f690:	6113      	str	r3, [r2, #16]
    pIOMState->waitTimeout = 1000;
    f692:	f8c2 182c 	str.w	r1, [r2, #2092]	; 0x82c
    return status;
    f696:	2000      	movs	r0, #0
    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
    f698:	f8c2 5830 	str.w	r5, [r2, #2096]	; 0x830
    return status;
    f69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
    f6a0:	2700      	movs	r7, #0
    f6a2:	e7e7      	b.n	f674 <am_hal_iom_configure+0x190>
        switch (psConfig->ui32ClockFreq)
    f6a4:	f8d1 e004 	ldr.w	lr, [r1, #4]
    f6a8:	4f16      	ldr	r7, [pc, #88]	; (f704 <am_hal_iom_configure+0x220>)
    f6aa:	45be      	cmp	lr, r7
    f6ac:	d01d      	beq.n	f6ea <am_hal_iom_configure+0x206>
    f6ae:	4816      	ldr	r0, [pc, #88]	; (f708 <am_hal_iom_configure+0x224>)
    f6b0:	4586      	cmp	lr, r0
    f6b2:	d015      	beq.n	f6e0 <am_hal_iom_configure+0x1fc>
    f6b4:	4c15      	ldr	r4, [pc, #84]	; (f70c <am_hal_iom_configure+0x228>)
    f6b6:	45a6      	cmp	lr, r4
    f6b8:	f47f af3b 	bne.w	f532 <am_hal_iom_configure+0x4e>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
    f6bc:	4d14      	ldr	r5, [pc, #80]	; (f710 <am_hal_iom_configure+0x22c>)
    f6be:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
    f6c2:	4f14      	ldr	r7, [pc, #80]	; (f714 <am_hal_iom_configure+0x230>)
                break;
    f6c4:	e7d8      	b.n	f678 <am_hal_iom_configure+0x194>
    ui32Fsel++;
    f6c6:	1c6e      	adds	r6, r5, #1
    f6c8:	e791      	b.n	f5ee <am_hal_iom_configure+0x10a>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    f6ca:	f04f 0a01 	mov.w	sl, #1
    f6ce:	e764      	b.n	f59a <am_hal_iom_configure+0xb6>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    f6d0:	f04f 0900 	mov.w	r9, #0
    f6d4:	e798      	b.n	f608 <am_hal_iom_configure+0x124>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    f6d6:	1ea7      	subs	r7, r4, #2
    f6d8:	ea4f 0857 	mov.w	r8, r7, lsr #1
    f6dc:	3c01      	subs	r4, #1
    f6de:	e798      	b.n	f612 <am_hal_iom_configure+0x12e>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
    f6e0:	4e0d      	ldr	r6, [pc, #52]	; (f718 <am_hal_iom_configure+0x234>)
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
    f6e2:	4f0e      	ldr	r7, [pc, #56]	; (f71c <am_hal_iom_configure+0x238>)
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
    f6e4:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
                break;
    f6e8:	e7c6      	b.n	f678 <am_hal_iom_configure+0x194>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
    f6ea:	480d      	ldr	r0, [pc, #52]	; (f720 <am_hal_iom_configure+0x23c>)
    f6ec:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
    f6f0:	4f0c      	ldr	r7, [pc, #48]	; (f724 <am_hal_iom_configure+0x240>)
                break;
    f6f2:	e7c1      	b.n	f678 <am_hal_iom_configure+0x194>
    f6f4:	01123456 	.word	0x01123456
    f6f8:	02dc6c00 	.word	0x02dc6c00
    f6fc:	007a11ff 	.word	0x007a11ff
    f700:	0003d090 	.word	0x0003d090
    f704:	00061a80 	.word	0x00061a80
    f708:	000f4240 	.word	0x000f4240
    f70c:	000186a0 	.word	0x000186a0
    f710:	0003f070 	.word	0x0003f070
    f714:	773b1201 	.word	0x773b1201
    f718:	00213040 	.word	0x00213040
    f71c:	06031301 	.word	0x06031301
    f720:	0003f270 	.word	0x0003f270
    f724:	1d0e1201 	.word	0x1d0e1201
    f728:	00b71aff 	.word	0x00b71aff

0000f72c <am_hal_iom_blocking_transfer>:
//
//*****************************************************************************
uint32_t
am_hal_iom_blocking_transfer(void *pHandle,
                             am_hal_iom_transfer_t *psTransaction)
{
    f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f730:	b087      	sub	sp, #28
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
    f732:	b128      	cbz	r0, f740 <am_hal_iom_blocking_transfer+0x14>
    f734:	6803      	ldr	r3, [r0, #0]
    f736:	4a96      	ldr	r2, [pc, #600]	; (f990 <am_hal_iom_blocking_transfer+0x264>)
    f738:	f023 447e 	bic.w	r4, r3, #4261412864	; 0xfe000000
    f73c:	4294      	cmp	r4, r2
    f73e:	d004      	beq.n	f74a <am_hal_iom_blocking_transfer+0x1e>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    f740:	2502      	movs	r5, #2
    //
    // Return the status.
    //
    return ui32Status;

} // am_hal_iom_blocking_transfer()
    f742:	4628      	mov	r0, r5
    f744:	b007      	add	sp, #28
    f746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!psTransaction)
    f74a:	b121      	cbz	r1, f756 <am_hal_iom_blocking_transfer+0x2a>
    ui32OffsetCnt = psTransaction->ui32InstrLen;
    f74c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
    f750:	f1b8 0f03 	cmp.w	r8, #3
    f754:	d904      	bls.n	f760 <am_hal_iom_blocking_transfer+0x34>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
    f756:	2506      	movs	r5, #6
} // am_hal_iom_blocking_transfer()
    f758:	4628      	mov	r0, r5
    f75a:	b007      	add	sp, #28
    f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
    f760:	ea4f 05c8 	mov.w	r5, r8, lsl #3
    f764:	f04f 36ff 	mov.w	r6, #4294967295
    ui32Offset = psTransaction->ui32Instr;
    f768:	f8d1 a008 	ldr.w	sl, [r1, #8]
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
    f76c:	40ae      	lsls	r6, r5
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
    f76e:	ea16 0f0a 	tst.w	r6, sl
    f772:	d1f0      	bne.n	f756 <am_hal_iom_blocking_transfer+0x2a>
    ui32Bytes = psTransaction->ui32NumBytes;
    f774:	68cf      	ldr	r7, [r1, #12]
    f776:	9703      	str	r7, [sp, #12]
    ui32Dir = psTransaction->eDirection;
    f778:	f891 9010 	ldrb.w	r9, [r1, #16]
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
    f77c:	2f00      	cmp	r7, #0
    f77e:	f000 818e 	beq.w	fa9e <am_hal_iom_blocking_transfer+0x372>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_TX) && (psTransaction->pui32RxBuffer == NULL)) ||
    f782:	f1b9 0f00 	cmp.w	r9, #0
    f786:	f000 818f 	beq.w	faa8 <am_hal_iom_blocking_transfer+0x37c>
    f78a:	698a      	ldr	r2, [r1, #24]
    f78c:	2a00      	cmp	r2, #0
    f78e:	d0e2      	beq.n	f756 <am_hal_iom_blocking_transfer+0x2a>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
    f790:	f1b9 0f01 	cmp.w	r9, #1
    f794:	f040 8188 	bne.w	faa8 <am_hal_iom_blocking_transfer+0x37c>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
    f798:	7a03      	ldrb	r3, [r0, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
    f79a:	2b01      	cmp	r3, #1
    f79c:	d00c      	beq.n	f7b8 <am_hal_iom_blocking_transfer+0x8c>
          (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_I2C))           ||
    f79e:	b933      	cbnz	r3, f7ae <am_hal_iom_blocking_transfer+0x82>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
    f7a0:	680d      	ldr	r5, [r1, #0]
    f7a2:	2d03      	cmp	r5, #3
    f7a4:	d8d7      	bhi.n	f756 <am_hal_iom_blocking_transfer+0x2a>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
    f7a6:	9e03      	ldr	r6, [sp, #12]
    f7a8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    f7ac:	d2d3      	bcs.n	f756 <am_hal_iom_blocking_transfer+0x2a>
    if (psTransaction->eDirection > AM_HAL_IOM_RX)
    f7ae:	f1b9 0f01 	cmp.w	r9, #1
    f7b2:	d905      	bls.n	f7c0 <am_hal_iom_blocking_transfer+0x94>
        return AM_HAL_STATUS_INVALID_OPERATION;
    f7b4:	2507      	movs	r5, #7
    f7b6:	e7c4      	b.n	f742 <am_hal_iom_blocking_transfer+0x16>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
    f7b8:	9f03      	ldr	r7, [sp, #12]
    f7ba:	2fff      	cmp	r7, #255	; 0xff
    f7bc:	d8cb      	bhi.n	f756 <am_hal_iom_blocking_transfer+0x2a>
    f7be:	e7f6      	b.n	f7ae <am_hal_iom_blocking_transfer+0x82>
    f7c0:	4604      	mov	r4, r0
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
    f7c2:	698d      	ldr	r5, [r1, #24]
    f7c4:	694f      	ldr	r7, [r1, #20]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f7c6:	f8d0 082c 	ldr.w	r0, [r0, #2092]	; 0x82c
    ui32Module = pIOMState->ui32Module;
    f7ca:	6866      	ldr	r6, [r4, #4]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f7cc:	2301      	movs	r3, #1
    f7ce:	468b      	mov	fp, r1
    ui32Cont = psTransaction->bContinue ? 1 : 0;
    f7d0:	7f09      	ldrb	r1, [r1, #28]
    f7d2:	9102      	str	r1, [sp, #8]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f7d4:	9300      	str	r3, [sp, #0]
    f7d6:	f04f 32ff 	mov.w	r2, #4294967295
    f7da:	2300      	movs	r3, #0
    f7dc:	f104 0124 	add.w	r1, r4, #36	; 0x24
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
    f7e0:	4599      	cmp	r9, r3
    f7e2:	bf18      	it	ne
    f7e4:	462f      	movne	r7, r5
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f7e6:	f7ff fa57 	bl	ec98 <am_hal_flash_delay_status_check>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
    f7ea:	4605      	mov	r5, r0
    f7ec:	2800      	cmp	r0, #0
    f7ee:	d1a8      	bne.n	f742 <am_hal_iom_blocking_transfer+0x16>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
    f7f0:	f506 20a0 	add.w	r0, r6, #327680	; 0x50000
    f7f4:	3004      	adds	r0, #4
    f7f6:	0306      	lsls	r6, r0, #12
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f7f8:	2201      	movs	r2, #1
    f7fa:	f8d4 082c 	ldr.w	r0, [r4, #2092]	; 0x82c
    f7fe:	9200      	str	r2, [sp, #0]
                            (uint32_t)&IOMn(ui32Module)->STATUS,
    f800:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f804:	2304      	movs	r3, #4
    f806:	2206      	movs	r2, #6
                            (uint32_t)&IOMn(ui32Module)->STATUS,
    f808:	9104      	str	r1, [sp, #16]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
    f80a:	f7ff fa45 	bl	ec98 <am_hal_flash_delay_status_check>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
    f80e:	4605      	mov	r5, r0
    f810:	2800      	cmp	r0, #0
    f812:	d196      	bne.n	f742 <am_hal_iom_blocking_transfer+0x16>
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
    f814:	f04f 33ff 	mov.w	r3, #4294967295
    ui32IntConfig = IOMn(ui32Module)->INTEN;
    f818:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
    f81c:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
    f820:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
    f824:	f8db 3000 	ldr.w	r3, [fp]
    f828:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    IOMn(ui32Module)->CMDRPT = psTransaction->ui8RepeatCount;
    f82c:	f89b 201d 	ldrb.w	r2, [fp, #29]
    f830:	f8c6 221c 	str.w	r2, [r6, #540]	; 0x21c
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
    f834:	7a21      	ldrb	r1, [r4, #8]
    ui32IntConfig = IOMn(ui32Module)->INTEN;
    f836:	9005      	str	r0, [sp, #20]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
    f838:	2900      	cmp	r1, #0
    f83a:	f040 813a 	bne.w	fab2 <am_hal_iom_blocking_transfer+0x386>
    f83e:	0518      	lsls	r0, r3, #20
    f840:	f400 1140 	and.w	r1, r0, #3145728	; 0x300000
    ui32Cmd |= _VAL2FLD(IOM0_CMD_TSIZE, ui32nBytes);
    f844:	9803      	ldr	r0, [sp, #12]
    f846:	4b53      	ldr	r3, [pc, #332]	; (f994 <am_hal_iom_blocking_transfer+0x268>)
    f848:	ea03 2300 	and.w	r3, r3, r0, lsl #8
    f84c:	430b      	orrs	r3, r1
    if (ui32Dir == AM_HAL_IOM_RX)
    f84e:	f1b9 0f01 	cmp.w	r9, #1
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
    f852:	bf0c      	ite	eq
    f854:	f043 0102 	orreq.w	r1, r3, #2
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_WRITE);
    f858:	f043 0101 	orrne.w	r1, r3, #1
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETCNT, ui32OffsetCnt);
    f85c:	ea4f 1048 	mov.w	r0, r8, lsl #5
    f860:	9b02      	ldr	r3, [sp, #8]
    f862:	f000 0c60 	and.w	ip, r0, #96	; 0x60
    f866:	ea4c 10c3 	orr.w	r0, ip, r3, lsl #7
    f86a:	ea40 630a 	orr.w	r3, r0, sl, lsl #24
    f86e:	430b      	orrs	r3, r1
    f870:	f3ca 210f 	ubfx	r1, sl, #8, #16
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
    f874:	f8c6 1220 	str.w	r1, [r6, #544]	; 0x220
    IOMn(ui32Module)->CMD = ui32Cmd;
    f878:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
    ui32Bytes = (1 + psTransaction->ui8RepeatCount) * psTransaction->ui32NumBytes;
    f87c:	f8db 000c 	ldr.w	r0, [fp, #12]
    if ( ui32Dir == AM_HAL_IOM_RX )
    f880:	f1b9 0f01 	cmp.w	r9, #1
    ui32Bytes = (1 + psTransaction->ui8RepeatCount) * psTransaction->ui32NumBytes;
    f884:	fb02 0b00 	mla	fp, r2, r0, r0
    if ( ui32Dir == AM_HAL_IOM_RX )
    f888:	f000 8115 	beq.w	fab6 <am_hal_iom_blocking_transfer+0x38a>
        while (ui32Bytes)
    f88c:	f1bb 0f00 	cmp.w	fp, #0
    f890:	d052      	beq.n	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f892:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
    f896:	f3c2 2307 	ubfx	r3, r2, #8, #8
    f89a:	2b03      	cmp	r3, #3
    f89c:	d87e      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f89e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f8a2:	07d8      	lsls	r0, r3, #31
    f8a4:	d447      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
    f8a6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; f998 <am_hal_iom_blocking_transfer+0x26c>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    f8aa:	2001      	movs	r0, #1
    f8ac:	f7ff f9f0 	bl	ec90 <am_hal_flash_delay>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f8b0:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    f8b4:	f3c1 2307 	ubfx	r3, r1, #8, #8
    f8b8:	2b03      	cmp	r3, #3
    f8ba:	d86f      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f8bc:	f8d6 0204 	ldr.w	r0, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f8c0:	07c3      	lsls	r3, r0, #31
    f8c2:	d438      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    f8c4:	2001      	movs	r0, #1
    f8c6:	f7ff f9e3 	bl	ec90 <am_hal_flash_delay>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f8ca:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
    f8ce:	f3c2 2307 	ubfx	r3, r2, #8, #8
    f8d2:	2b03      	cmp	r3, #3
    f8d4:	f10a 3aff 	add.w	sl, sl, #4294967295
    f8d8:	d860      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f8da:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f8de:	07d8      	lsls	r0, r3, #31
    f8e0:	d429      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    f8e2:	2001      	movs	r0, #1
    f8e4:	f7ff f9d4 	bl	ec90 <am_hal_flash_delay>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f8e8:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    f8ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
    f8f0:	2b03      	cmp	r3, #3
    f8f2:	d853      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f8f4:	f8d6 0204 	ldr.w	r0, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f8f8:	07c1      	lsls	r1, r0, #31
    f8fa:	d41c      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    f8fc:	2001      	movs	r0, #1
    f8fe:	f7ff f9c7 	bl	ec90 <am_hal_flash_delay>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f902:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
    f906:	f3c2 2307 	ubfx	r3, r2, #8, #8
    f90a:	2b03      	cmp	r3, #3
    f90c:	d846      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f90e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f912:	07da      	lsls	r2, r3, #31
    f914:	d40f      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    f916:	2001      	movs	r0, #1
    f918:	f7ff f9ba 	bl	ec90 <am_hal_flash_delay>
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    f91c:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    f920:	f3c1 2307 	ubfx	r3, r1, #8, #8
    f924:	2b03      	cmp	r3, #3
    f926:	d839      	bhi.n	f99c <am_hal_iom_blocking_transfer+0x270>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    f928:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    f92c:	07db      	lsls	r3, r3, #31
    f92e:	d402      	bmi.n	f936 <am_hal_iom_blocking_transfer+0x20a>
    f930:	f1ba 0a04 	subs.w	sl, sl, #4
    f934:	d1b9      	bne.n	f8aa <am_hal_iom_blocking_transfer+0x17e>
    f936:	465d      	mov	r5, fp
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
    f938:	2701      	movs	r7, #1
    f93a:	2206      	movs	r2, #6
    f93c:	9904      	ldr	r1, [sp, #16]
    f93e:	9700      	str	r7, [sp, #0]
    f940:	2304      	movs	r3, #4
    f942:	4815      	ldr	r0, [pc, #84]	; (f998 <am_hal_iom_blocking_transfer+0x26c>)
    f944:	f7ff f9a8 	bl	ec98 <am_hal_flash_delay_status_check>
    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
    f948:	4602      	mov	r2, r0
    f94a:	b978      	cbnz	r0, f96c <am_hal_iom_blocking_transfer+0x240>
    ui32IntStatus |= IOMn(ui32Module)->INTSTAT;
    f94c:	f8d6 0204 	ldr.w	r0, [r6, #516]	; 0x204
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    f950:	f010 0f6c 	tst.w	r0, #108	; 0x6c
    f954:	f040 818f 	bne.w	fc76 <am_hal_iom_blocking_transfer+0x54a>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    f958:	0581      	lsls	r1, r0, #22
    f95a:	f100 818f 	bmi.w	fc7c <am_hal_iom_blocking_transfer+0x550>
    else if (ui32IntStatus & AM_HAL_IOM_INT_NAK)
    f95e:	06c2      	lsls	r2, r0, #27
    f960:	f100 818e 	bmi.w	fc80 <am_hal_iom_blocking_transfer+0x554>
    else if (ui32IntStatus & AM_HAL_IOM_INT_INTERR)
    f964:	f410 4f90 	tst.w	r0, #18432	; 0x4800
    f968:	d00e      	beq.n	f988 <am_hal_iom_blocking_transfer+0x25c>
        ui32Status = AM_HAL_STATUS_FAIL;
    f96a:	463a      	mov	r2, r7
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
    f96c:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f970:	4620      	mov	r0, r4
    f972:	4615      	mov	r5, r2
    f974:	f7ff fc0a 	bl	f18c <internal_iom_reset_on_error>
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
    f978:	f04f 34ff 	mov.w	r4, #4294967295
    IOMn(ui32Module)->INTEN = ui32IntConfig;
    f97c:	9905      	ldr	r1, [sp, #20]
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
    f97e:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
    f982:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    return ui32Status;
    f986:	e6dc      	b.n	f742 <am_hal_iom_blocking_transfer+0x16>
            if (ui32Bytes)
    f988:	2d00      	cmp	r5, #0
    f98a:	d0f5      	beq.n	f978 <am_hal_iom_blocking_transfer+0x24c>
    f98c:	e7ed      	b.n	f96a <am_hal_iom_blocking_transfer+0x23e>
    f98e:	bf00      	nop
    f990:	01123456 	.word	0x01123456
    f994:	000fff00 	.word	0x000fff00
    f998:	0007a120 	.word	0x0007a120
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f99c:	6838      	ldr	r0, [r7, #0]
    f99e:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    f9a2:	f1bb 0f03 	cmp.w	fp, #3
    f9a6:	d9c7      	bls.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                ui32FifoRem -= 4;
    f9a8:	1f19      	subs	r1, r3, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9aa:	2903      	cmp	r1, #3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9ac:	f107 0704 	add.w	r7, r7, #4
                    ui32Bytes -= 4;
    f9b0:	f1ab 0204 	sub.w	r2, fp, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9b4:	d96e      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
    f9b6:	f3c2 0081 	ubfx	r0, r2, #2, #2
    f9ba:	eba3 030b 	sub.w	r3, r3, fp
    f9be:	4639      	mov	r1, r7
    f9c0:	b338      	cbz	r0, fa12 <am_hal_iom_blocking_transfer+0x2e6>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9c2:	4639      	mov	r1, r7
                if (ui32Bytes >= 4)
    f9c4:	2a03      	cmp	r2, #3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9c6:	f851 7b04 	ldr.w	r7, [r1], #4
    f9ca:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    f9ce:	d9b3      	bls.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                    ui32Bytes -= 4;
    f9d0:	3a04      	subs	r2, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9d2:	eb02 0e03 	add.w	lr, r2, r3
    f9d6:	f1be 0f03 	cmp.w	lr, #3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9da:	460f      	mov	r7, r1
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9dc:	d95a      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
    f9de:	2801      	cmp	r0, #1
    f9e0:	d017      	beq.n	fa12 <am_hal_iom_blocking_transfer+0x2e6>
    f9e2:	2802      	cmp	r0, #2
    f9e4:	d00a      	beq.n	f9fc <am_hal_iom_blocking_transfer+0x2d0>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9e6:	f851 0b04 	ldr.w	r0, [r1], #4
    f9ea:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    f9ee:	2a03      	cmp	r2, #3
    f9f0:	d9a2      	bls.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                    ui32Bytes -= 4;
    f9f2:	3a04      	subs	r2, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9f4:	18d0      	adds	r0, r2, r3
    f9f6:	2803      	cmp	r0, #3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9f8:	460f      	mov	r7, r1
            while ((ui32FifoRem >= 4) && ui32Bytes)
    f9fa:	d94b      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    f9fc:	f851 7b04 	ldr.w	r7, [r1], #4
    fa00:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    fa04:	2a03      	cmp	r2, #3
    fa06:	d997      	bls.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                    ui32Bytes -= 4;
    fa08:	3a04      	subs	r2, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa0a:	18d0      	adds	r0, r2, r3
    fa0c:	2803      	cmp	r0, #3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa0e:	460f      	mov	r7, r1
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa10:	d940      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa12:	4689      	mov	r9, r1
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa14:	2a00      	cmp	r2, #0
    fa16:	d08f      	beq.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa18:	f859 7b04 	ldr.w	r7, [r9], #4
    fa1c:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    fa20:	2a03      	cmp	r2, #3
                    ui32Bytes -= 4;
    fa22:	f1a2 0204 	sub.w	r2, r2, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa26:	eb02 0003 	add.w	r0, r2, r3
                    ui32Bytes -= 4;
    fa2a:	4693      	mov	fp, r2
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa2c:	464f      	mov	r7, r9
    fa2e:	f109 0c04 	add.w	ip, r9, #4
                if (ui32Bytes >= 4)
    fa32:	d981      	bls.n	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa34:	2803      	cmp	r0, #3
    fa36:	f101 080c 	add.w	r8, r1, #12
    fa3a:	d92b      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa3c:	f8d9 7000 	ldr.w	r7, [r9]
    fa40:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    fa44:	2a03      	cmp	r2, #3
                    ui32Bytes -= 4;
    fa46:	f1a2 0204 	sub.w	r2, r2, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa4a:	eb02 0003 	add.w	r0, r2, r3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa4e:	4667      	mov	r7, ip
                if (ui32Bytes >= 4)
    fa50:	f67f af72 	bls.w	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa54:	2803      	cmp	r0, #3
    fa56:	f101 0110 	add.w	r1, r1, #16
    fa5a:	d91b      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa5c:	f8dc 7000 	ldr.w	r7, [ip]
    fa60:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    fa64:	2a03      	cmp	r2, #3
                    ui32Bytes -= 4;
    fa66:	f1ab 0208 	sub.w	r2, fp, #8
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa6a:	eb02 0003 	add.w	r0, r2, r3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa6e:	4647      	mov	r7, r8
                if (ui32Bytes >= 4)
    fa70:	f67f af62 	bls.w	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa74:	2803      	cmp	r0, #3
    fa76:	d90d      	bls.n	fa94 <am_hal_iom_blocking_transfer+0x368>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa78:	f8d8 7000 	ldr.w	r7, [r8]
    fa7c:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
                if (ui32Bytes >= 4)
    fa80:	2a03      	cmp	r2, #3
                    ui32Bytes -= 4;
    fa82:	f1ab 020c 	sub.w	r2, fp, #12
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa86:	eb02 0003 	add.w	r0, r2, r3
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    fa8a:	460f      	mov	r7, r1
                if (ui32Bytes >= 4)
    fa8c:	f67f af54 	bls.w	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    fa90:	2803      	cmp	r0, #3
    fa92:	d8be      	bhi.n	fa12 <am_hal_iom_blocking_transfer+0x2e6>
                    ui32Bytes -= 4;
    fa94:	4693      	mov	fp, r2
        while (ui32Bytes)
    fa96:	2a00      	cmp	r2, #0
    fa98:	f47f aefb 	bne.w	f892 <am_hal_iom_blocking_transfer+0x166>
    fa9c:	e74c      	b.n	f938 <am_hal_iom_blocking_transfer+0x20c>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
    fa9e:	7a03      	ldrb	r3, [r0, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
    faa0:	2b01      	cmp	r3, #1
    faa2:	f47f ae7c 	bne.w	f79e <am_hal_iom_blocking_transfer+0x72>
    faa6:	e682      	b.n	f7ae <am_hal_iom_blocking_transfer+0x82>
    faa8:	694c      	ldr	r4, [r1, #20]
    faaa:	2c00      	cmp	r4, #0
    faac:	f47f ae74 	bne.w	f798 <am_hal_iom_blocking_transfer+0x6c>
    fab0:	e651      	b.n	f756 <am_hal_iom_blocking_transfer+0x2a>
    fab2:	4629      	mov	r1, r5
    fab4:	e6c6      	b.n	f844 <am_hal_iom_blocking_transfer+0x118>
        while ( ui32Bytes )
    fab6:	2200      	movs	r2, #0
    fab8:	f1bb 0f00 	cmp.w	fp, #0
    fabc:	f43f af3c 	beq.w	f938 <am_hal_iom_blocking_transfer+0x20c>
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fac0:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    fac4:	f3c1 4307 	ubfx	r3, r1, #16, #8
    fac8:	2b03      	cmp	r3, #3
    faca:	d84b      	bhi.n	fb64 <am_hal_iom_blocking_transfer+0x438>
    facc:	f8df 91bc 	ldr.w	r9, [pc, #444]	; fc8c <am_hal_iom_blocking_transfer+0x560>
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
    fad0:	b112      	cbz	r2, fad8 <am_hal_iom_blocking_transfer+0x3ac>
    fad2:	459b      	cmp	fp, r3
    fad4:	f63f af2f 	bhi.w	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    fad8:	2001      	movs	r0, #1
    fada:	f7ff f8d9 	bl	ec90 <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fade:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fae2:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    fae6:	f3c0 4307 	ubfx	r3, r0, #16, #8
    faea:	2b03      	cmp	r3, #3
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    faec:	f002 0201 	and.w	r2, r2, #1
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    faf0:	d838      	bhi.n	fb64 <am_hal_iom_blocking_transfer+0x438>
    faf2:	f109 39ff 	add.w	r9, r9, #4294967295
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
    faf6:	b112      	cbz	r2, fafe <am_hal_iom_blocking_transfer+0x3d2>
    faf8:	459b      	cmp	fp, r3
    fafa:	f63f af1c 	bhi.w	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    fafe:	2001      	movs	r0, #1
    fb00:	f7ff f8c6 	bl	ec90 <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb04:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb08:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    fb0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    fb10:	2b03      	cmp	r3, #3
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb12:	f001 0201 	and.w	r2, r1, #1
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb16:	d825      	bhi.n	fb64 <am_hal_iom_blocking_transfer+0x438>
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
    fb18:	b112      	cbz	r2, fb20 <am_hal_iom_blocking_transfer+0x3f4>
    fb1a:	459b      	cmp	fp, r3
    fb1c:	f63f af0b 	bhi.w	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    fb20:	2001      	movs	r0, #1
    fb22:	f7ff f8b5 	bl	ec90 <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb26:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb2a:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    fb2e:	f3c0 4307 	ubfx	r3, r0, #16, #8
    fb32:	2b03      	cmp	r3, #3
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb34:	f002 0201 	and.w	r2, r2, #1
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb38:	d814      	bhi.n	fb64 <am_hal_iom_blocking_transfer+0x438>
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
    fb3a:	b112      	cbz	r2, fb42 <am_hal_iom_blocking_transfer+0x416>
    fb3c:	459b      	cmp	fp, r3
    fb3e:	f63f aefa 	bhi.w	f936 <am_hal_iom_blocking_transfer+0x20a>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    fb42:	2001      	movs	r0, #1
    fb44:	f7ff f8a4 	bl	ec90 <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb48:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb4c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    fb50:	f3c3 4307 	ubfx	r3, r3, #16, #8
    fb54:	2b03      	cmp	r3, #3
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
    fb56:	f001 0201 	and.w	r2, r1, #1
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
    fb5a:	d803      	bhi.n	fb64 <am_hal_iom_blocking_transfer+0x438>
                if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
    fb5c:	f1b9 0903 	subs.w	r9, r9, #3
    fb60:	d1b6      	bne.n	fad0 <am_hal_iom_blocking_transfer+0x3a4>
    fb62:	e6e8      	b.n	f936 <am_hal_iom_blocking_transfer+0x20a>
                if (ui32Bytes >= 4)
    fb64:	f1bb 0f03 	cmp.w	fp, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fb68:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fb6c:	d974      	bls.n	fc58 <am_hal_iom_blocking_transfer+0x52c>
                ui32FifoSiz -= 4;
    fb6e:	f1a3 0e04 	sub.w	lr, r3, #4
                    *pui32Buffer++ = ui32Read;
    fb72:	6039      	str	r1, [r7, #0]
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fb74:	4671      	mov	r1, lr
    fb76:	2903      	cmp	r1, #3
                    *pui32Buffer++ = ui32Read;
    fb78:	f107 0704 	add.w	r7, r7, #4
                    ui32Bytes -= 4;
    fb7c:	f1ab 0004 	sub.w	r0, fp, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fb80:	d965      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
    fb82:	f3c0 0881 	ubfx	r8, r0, #2, #2
    fb86:	eba3 0b0b 	sub.w	fp, r3, fp
    fb8a:	f1b8 0f00 	cmp.w	r8, #0
    fb8e:	d026      	beq.n	fbde <am_hal_iom_blocking_transfer+0x4b2>
                if (ui32Bytes >= 4)
    fb90:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fb92:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fb96:	d960      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fb98:	3804      	subs	r0, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fb9a:	eb00 030b 	add.w	r3, r0, fp
    fb9e:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fba0:	f847 1b04 	str.w	r1, [r7], #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fba4:	d953      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
    fba6:	f1b8 0f01 	cmp.w	r8, #1
    fbaa:	d018      	beq.n	fbde <am_hal_iom_blocking_transfer+0x4b2>
    fbac:	f1b8 0f02 	cmp.w	r8, #2
    fbb0:	d00a      	beq.n	fbc8 <am_hal_iom_blocking_transfer+0x49c>
                if (ui32Bytes >= 4)
    fbb2:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fbb4:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fbb8:	d94f      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fbba:	3804      	subs	r0, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbbc:	eb00 030b 	add.w	r3, r0, fp
    fbc0:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fbc2:	f847 1b04 	str.w	r1, [r7], #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbc6:	d942      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
                if (ui32Bytes >= 4)
    fbc8:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fbca:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fbce:	d944      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fbd0:	3804      	subs	r0, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbd2:	eb00 030b 	add.w	r3, r0, fp
    fbd6:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fbd8:	f847 1b04 	str.w	r1, [r7], #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbdc:	d937      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
    fbde:	2800      	cmp	r0, #0
    fbe0:	f43f aeaa 	beq.w	f938 <am_hal_iom_blocking_transfer+0x20c>
                if (ui32Bytes >= 4)
    fbe4:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fbe6:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fbea:	d936      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fbec:	3804      	subs	r0, #4
                    *pui32Buffer++ = ui32Read;
    fbee:	3704      	adds	r7, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbf0:	eb00 030b 	add.w	r3, r0, fp
    fbf4:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fbf6:	f847 1c04 	str.w	r1, [r7, #-4]
    fbfa:	46bc      	mov	ip, r7
                    ui32Bytes -= 4;
    fbfc:	4682      	mov	sl, r0
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fbfe:	d926      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
                if (ui32Bytes >= 4)
    fc00:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fc02:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fc06:	d928      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fc08:	3804      	subs	r0, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc0a:	eb00 030b 	add.w	r3, r0, fp
    fc0e:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fc10:	f847 1b04 	str.w	r1, [r7], #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc14:	d91b      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
                if (ui32Bytes >= 4)
    fc16:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fc18:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fc1c:	d91d      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fc1e:	f1aa 0008 	sub.w	r0, sl, #8
                    *pui32Buffer++ = ui32Read;
    fc22:	f10c 0708 	add.w	r7, ip, #8
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc26:	eb00 030b 	add.w	r3, r0, fp
    fc2a:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fc2c:	f847 1c04 	str.w	r1, [r7, #-4]
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc30:	d90d      	bls.n	fc4e <am_hal_iom_blocking_transfer+0x522>
                if (ui32Bytes >= 4)
    fc32:	2803      	cmp	r0, #3
                ui32Read = IOMn(ui32Module)->FIFOPOP;
    fc34:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
                if (ui32Bytes >= 4)
    fc38:	d90f      	bls.n	fc5a <am_hal_iom_blocking_transfer+0x52e>
                    ui32Bytes -= 4;
    fc3a:	f1aa 000c 	sub.w	r0, sl, #12
                    *pui32Buffer++ = ui32Read;
    fc3e:	f10c 070c 	add.w	r7, ip, #12
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc42:	eb00 030b 	add.w	r3, r0, fp
    fc46:	2b03      	cmp	r3, #3
                    *pui32Buffer++ = ui32Read;
    fc48:	f847 1c04 	str.w	r1, [r7, #-4]
            while ((ui32FifoSiz >= 4) && ui32Bytes)
    fc4c:	d8c7      	bhi.n	fbde <am_hal_iom_blocking_transfer+0x4b2>
                    ui32Bytes -= 4;
    fc4e:	4683      	mov	fp, r0
        while ( ui32Bytes )
    fc50:	2800      	cmp	r0, #0
    fc52:	f47f af35 	bne.w	fac0 <am_hal_iom_blocking_transfer+0x394>
    fc56:	e66f      	b.n	f938 <am_hal_iom_blocking_transfer+0x20c>
                if (ui32Bytes >= 4)
    fc58:	4658      	mov	r0, fp
                    } while (--ui32Bytes);
    fc5a:	2801      	cmp	r0, #1
                        *pui8Buffer++ = ui32Read & 0xFF;
    fc5c:	7039      	strb	r1, [r7, #0]
                        ui32Read >>= 8;
    fc5e:	ea4f 2211 	mov.w	r2, r1, lsr #8
                    } while (--ui32Bytes);
    fc62:	f43f ae69 	beq.w	f938 <am_hal_iom_blocking_transfer+0x20c>
    fc66:	2802      	cmp	r0, #2
                        *pui8Buffer++ = ui32Read & 0xFF;
    fc68:	707a      	strb	r2, [r7, #1]
                        ui32Read >>= 8;
    fc6a:	ea4f 4311 	mov.w	r3, r1, lsr #16
                    } while (--ui32Bytes);
    fc6e:	f43f ae63 	beq.w	f938 <am_hal_iom_blocking_transfer+0x20c>
                        *pui8Buffer++ = ui32Read & 0xFF;
    fc72:	70bb      	strb	r3, [r7, #2]
    fc74:	e660      	b.n	f938 <am_hal_iom_blocking_transfer+0x20c>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    fc76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    fc7a:	e677      	b.n	f96c <am_hal_iom_blocking_transfer+0x240>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    fc7c:	4a01      	ldr	r2, [pc, #4]	; (fc84 <am_hal_iom_blocking_transfer+0x558>)
    fc7e:	e675      	b.n	f96c <am_hal_iom_blocking_transfer+0x240>
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
    fc80:	4a01      	ldr	r2, [pc, #4]	; (fc88 <am_hal_iom_blocking_transfer+0x55c>)
    fc82:	e673      	b.n	f96c <am_hal_iom_blocking_transfer+0x240>
    fc84:	08000001 	.word	0x08000001
    fc88:	08000002 	.word	0x08000002
    fc8c:	0007a120 	.word	0x0007a120

0000fc90 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    fc90:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    fc92:	4b24      	ldr	r3, [pc, #144]	; (fd24 <am_hal_itm_disable+0x94>)
    fc94:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    fc98:	b9b0      	cbnz	r0, fcc8 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    fc9a:	4923      	ldr	r1, [pc, #140]	; (fd28 <am_hal_itm_disable+0x98>)
    fc9c:	68ca      	ldr	r2, [r1, #12]
    fc9e:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    fca2:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    fca4:	68cb      	ldr	r3, [r1, #12]
    fca6:	01da      	lsls	r2, r3, #7
    fca8:	d5fc      	bpl.n	fca4 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    fcaa:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    fcae:	481f      	ldr	r0, [pc, #124]	; (fd2c <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    fcb0:	4a1f      	ldr	r2, [pc, #124]	; (fd30 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    fcb2:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    fcb6:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    fcb8:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    fcbc:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    fcc0:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    fcc4:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    fcc8:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    fccc:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    fcd0:	021b      	lsls	r3, r3, #8
    fcd2:	d4fb      	bmi.n	fccc <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    fcd4:	f240 20f7 	movw	r0, #759	; 0x2f7
    fcd8:	f7fe ffda 	bl	ec90 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    fcdc:	4813      	ldr	r0, [pc, #76]	; (fd2c <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    fcde:	4915      	ldr	r1, [pc, #84]	; (fd34 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    fce0:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    fce4:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    fce8:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    fcea:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    fcee:	f022 0401 	bic.w	r4, r2, #1
    fcf2:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    fcf6:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    fcfa:	420b      	tst	r3, r1
    fcfc:	d1fb      	bne.n	fcf6 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    fcfe:	3801      	subs	r0, #1
    fd00:	d1f3      	bne.n	fcea <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    fd02:	4909      	ldr	r1, [pc, #36]	; (fd28 <am_hal_itm_disable+0x98>)
    fd04:	68ca      	ldr	r2, [r1, #12]
    fd06:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    fd0a:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    fd0c:	68cb      	ldr	r3, [r1, #12]
    fd0e:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    fd12:	d1fb      	bne.n	fd0c <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    fd14:	4903      	ldr	r1, [pc, #12]	; (fd24 <am_hal_itm_disable+0x94>)
    fd16:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    fd1a:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    fd1e:	2a00      	cmp	r2, #0
    fd20:	d1fb      	bne.n	fd1a <am_hal_itm_disable+0x8a>
}
    fd22:	bd10      	pop	{r4, pc}
    fd24:	40020000 	.word	0x40020000
    fd28:	e000edf0 	.word	0xe000edf0
    fd2c:	c5acce55 	.word	0xc5acce55
    fd30:	00150511 	.word	0x00150511
    fd34:	00800001 	.word	0x00800001

0000fd38 <am_hal_mcuctrl_control>:
// ****************************************************************************
uint32_t
am_hal_mcuctrl_control(am_hal_mcuctrl_control_e eControl, void *pArgs)
{
#if AM_CMSIS_REGS
    switch ( eControl )
    fd38:	2803      	cmp	r0, #3
    fd3a:	d824      	bhi.n	fd86 <am_hal_mcuctrl_control+0x4e>
    fd3c:	e8df f000 	tbb	[pc, r0]
    fd40:	0202111a 	.word	0x0202111a
        case AM_HAL_MCUCTRL_CONTROL_EXTCLK32K_DISABLE:
            //
            // Configure the bits in XTALCTRL that disable external 32KHz
            // clock, thus re-configuring for the crystal.
            //
            MCUCTRL->XTALCTRL &=
    fd44:	4b11      	ldr	r3, [pc, #68]	; (fd8c <am_hal_mcuctrl_control+0x54>)
    fd46:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    fd4a:	f022 001f 	bic.w	r0, r2, #31
    fd4e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
                  MCUCTRL_XTALCTRL_PDNBCOREXTAL_Msk                 |
                  MCUCTRL_XTALCTRL_BYPCMPRXTAL_Msk                  |
                  MCUCTRL_XTALCTRL_FDBKDSBLXTAL_Msk                 |
                  MCUCTRL_XTALCTRL_XTALSWE_Msk);

            MCUCTRL->XTALCTRL |=
    fd52:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    fd56:	f041 0201 	orr.w	r2, r1, #1
    fd5a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif // AM_CMSIS_REGS

    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    fd5e:	2000      	movs	r0, #0
            break;
    fd60:	4770      	bx	lr
            MCUCTRL->FAULTCAPTUREEN_b.FAULTCAPTUREEN = 0;
    fd62:	480a      	ldr	r0, [pc, #40]	; (fd8c <am_hal_mcuctrl_control+0x54>)
    fd64:	f890 c1d0 	ldrb.w	ip, [r0, #464]	; 0x1d0
    fd68:	f36f 0c00 	bfc	ip, #0, #1
    fd6c:	f880 c1d0 	strb.w	ip, [r0, #464]	; 0x1d0
    return AM_HAL_STATUS_SUCCESS;
    fd70:	2000      	movs	r0, #0
            break;
    fd72:	4770      	bx	lr
            MCUCTRL->FAULTCAPTUREEN_b.FAULTCAPTUREEN = 1;
    fd74:	4905      	ldr	r1, [pc, #20]	; (fd8c <am_hal_mcuctrl_control+0x54>)
    fd76:	f891 31d0 	ldrb.w	r3, [r1, #464]	; 0x1d0
    fd7a:	f043 0201 	orr.w	r2, r3, #1
    fd7e:	f881 21d0 	strb.w	r2, [r1, #464]	; 0x1d0
    return AM_HAL_STATUS_SUCCESS;
    fd82:	2000      	movs	r0, #0
            break;
    fd84:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    fd86:	2006      	movs	r0, #6

} // am_hal_mcuctrl_control()
    fd88:	4770      	bx	lr
    fd8a:	bf00      	nop
    fd8c:	40020000 	.word	0x40020000

0000fd90 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    fd90:	b141      	cbz	r1, fda4 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    fd92:	2801      	cmp	r0, #1
{
    fd94:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    fd96:	d03a      	beq.n	fe0e <am_hal_mcuctrl_info_get+0x7e>
    fd98:	d322      	bcc.n	fde0 <am_hal_mcuctrl_info_get+0x50>
    fd9a:	2802      	cmp	r0, #2
    fd9c:	d004      	beq.n	fda8 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    fd9e:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    fda0:	bcf0      	pop	{r4, r5, r6, r7}
    fda2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    fda4:	2006      	movs	r0, #6
    fda6:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    fda8:	4a41      	ldr	r2, [pc, #260]	; (feb0 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    fdaa:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    fdac:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    fdb0:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    fdb2:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    fdb6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    fdba:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    fdbe:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    fdc0:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    fdc2:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    fdc4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    fdc8:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    fdca:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    fdce:	4334      	orrs	r4, r6
    fdd0:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    fdd2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    fdd6:	4310      	orrs	r0, r2
    fdd8:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    fdda:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    fddc:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    fdde:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    fde0:	4c33      	ldr	r4, [pc, #204]	; (feb0 <am_hal_mcuctrl_info_get+0x120>)
    fde2:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    fde4:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    fde8:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    fdec:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    fdee:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    fdf0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    fdf4:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    fdf8:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    fdfa:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    fdfc:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    fe00:	f004 0501 	and.w	r5, r4, #1
    fe04:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    fe06:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    fe08:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    fe0a:	bcf0      	pop	{r4, r5, r6, r7}
    fe0c:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    fe0e:	4a28      	ldr	r2, [pc, #160]	; (feb0 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    fe10:	4c28      	ldr	r4, [pc, #160]	; (feb4 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    fe12:	6813      	ldr	r3, [r2, #0]
    fe14:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    fe16:	6850      	ldr	r0, [r2, #4]
    fe18:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    fe1a:	6897      	ldr	r7, [r2, #8]
    fe1c:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    fe1e:	68d6      	ldr	r6, [r2, #12]
    fe20:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    fe22:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    fe24:	4824      	ldr	r0, [pc, #144]	; (feb8 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    fe26:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    fe28:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    fe2c:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    fe30:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    fe32:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    fe36:	4a21      	ldr	r2, [pc, #132]	; (febc <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    fe38:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    fe3c:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    fe3e:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    fe42:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    fe44:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    fe46:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    fe48:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    fe4c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    fe50:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    fe52:	f000 040f 	and.w	r4, r0, #15
    fe56:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    fe5a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    fe5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    fe60:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    fe64:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    fe68:	f007 0c0f 	and.w	ip, r7, #15
    fe6c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    fe70:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    fe72:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    fe76:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    fe7a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    fe7e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    fe82:	433b      	orrs	r3, r7
    fe84:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    fe86:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    fe8a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    fe8e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    fe92:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    fe96:	b2e5      	uxtb	r5, r4
    fe98:	042b      	lsls	r3, r5, #16
    fe9a:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    fe9e:	b2d6      	uxtb	r6, r2
    fea0:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    fea2:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    fea4:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    fea8:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    feaa:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    feac:	bcf0      	pop	{r4, r5, r6, r7}
    feae:	4770      	bx	lr
    feb0:	40020000 	.word	0x40020000
    feb4:	0001221c 	.word	0x0001221c
    feb8:	0001225c 	.word	0x0001225c
    febc:	f0000f00 	.word	0xf0000f00

0000fec0 <am_hal_mspi_initialize>:
{
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_MSPI_NUM_MODULES )
    fec0:	b108      	cbz	r0, fec6 <am_hal_mspi_initialize+0x6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    fec2:	2005      	movs	r0, #5
    fec4:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    fec6:	b1a1      	cbz	r1, fef2 <am_hal_mspi_initialize+0x32>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_MSPIState[ui32Module].prefix.s.bInit)
    fec8:	4a0b      	ldr	r2, [pc, #44]	; (fef8 <am_hal_mspi_initialize+0x38>)
    feca:	78d3      	ldrb	r3, [r2, #3]
    fecc:	f013 0001 	ands.w	r0, r3, #1
    fed0:	d001      	beq.n	fed6 <am_hal_mspi_initialize+0x16>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    fed2:	2007      	movs	r0, #7
    fed4:	4770      	bx	lr
{
    fed6:	b410      	push	{r4}
#endif

    //
    // Initialize the handle.
    //
    g_MSPIState[ui32Module].prefix.s.bInit = true;
    fed8:	f043 0401 	orr.w	r4, r3, #1
    fedc:	70d4      	strb	r4, [r2, #3]
    g_MSPIState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_MSPI;
    fede:	6813      	ldr	r3, [r2, #0]
    fee0:	4c06      	ldr	r4, [pc, #24]	; (fefc <am_hal_mspi_initialize+0x3c>)
    g_MSPIState[ui32Module].ui32Module = ui32Module;
    fee2:	6050      	str	r0, [r2, #4]
    g_MSPIState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_MSPI;
    fee4:	f364 0317 	bfi	r3, r4, #0, #24
    fee8:	6013      	str	r3, [r2, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    feea:	f85d 4b04 	ldr.w	r4, [sp], #4
    *ppHandle = (void *)&g_MSPIState[ui32Module];
    feee:	600a      	str	r2, [r1, #0]
}
    fef0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    fef2:	2006      	movs	r0, #6
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	10006e60 	.word	0x10006e60
    fefc:	00bebebe 	.word	0x00bebebe

0000ff00 <am_hal_mspi_disable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
    ff00:	b140      	cbz	r0, ff14 <am_hal_mspi_disable+0x14>
{
    ff02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
    ff04:	6803      	ldr	r3, [r0, #0]
    ff06:	4a15      	ldr	r2, [pc, #84]	; (ff5c <am_hal_mspi_disable+0x5c>)
    ff08:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    ff0c:	4291      	cmp	r1, r2
    ff0e:	d003      	beq.n	ff18 <am_hal_mspi_disable+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    ff10:	2002      	movs	r0, #2
    ff12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff14:	2002      	movs	r0, #2
    ff16:	4770      	bx	lr
    }
#endif

    if (!pMSPIState->prefix.s.bEnable)
    ff18:	78c4      	ldrb	r4, [r0, #3]
    ff1a:	f014 0302 	ands.w	r3, r4, #2
    ff1e:	d101      	bne.n	ff24 <am_hal_mspi_disable+0x24>
    //
    mspi_cq_reset(pHandle);

#endif // MSPI_USE_CQ

    pMSPIState->prefix.s.bEnable = false;
    ff20:	2000      	movs	r0, #0
    ff22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff24:	4604      	mov	r4, r0
    return am_hal_cmdq_disable(g_MSPIState[ui32Module].CQ.pCmdQHdl);
    ff26:	4e0e      	ldr	r6, [pc, #56]	; (ff60 <am_hal_mspi_disable+0x60>)
    ff28:	6840      	ldr	r0, [r0, #4]
    ff2a:	f640 0768 	movw	r7, #2152	; 0x868
    ff2e:	fb07 6500 	mla	r5, r7, r0, r6
    ff32:	f8d5 0824 	ldr.w	r0, [r5, #2084]	; 0x824
    ff36:	f001 fc3f 	bl	117b8 <am_hal_cmdq_disable>
    uint32_t                      ui32Module = pMSPIState->ui32Module;
    ff3a:	6863      	ldr	r3, [r4, #4]
    if (g_MSPIState[ui32Module].CQ.pCmdQHdl)
    ff3c:	fb07 6603 	mla	r6, r7, r3, r6
    ff40:	f8d6 0824 	ldr.w	r0, [r6, #2084]	; 0x824
    ff44:	b128      	cbz	r0, ff52 <am_hal_mspi_disable+0x52>
        am_hal_cmdq_term(g_MSPIState[ui32Module].CQ.pCmdQHdl, true);
    ff46:	2101      	movs	r1, #1
    ff48:	f001 fc9e 	bl	11888 <am_hal_cmdq_term>
        g_MSPIState[ui32Module].CQ.pCmdQHdl = NULL;
    ff4c:	2200      	movs	r2, #0
    ff4e:	f8c6 2824 	str.w	r2, [r6, #2084]	; 0x824
    pMSPIState->prefix.s.bEnable = false;
    ff52:	78e1      	ldrb	r1, [r4, #3]
    ff54:	f36f 0141 	bfc	r1, #1, #1
    ff58:	70e1      	strb	r1, [r4, #3]
    ff5a:	e7e1      	b.n	ff20 <am_hal_mspi_disable+0x20>
    ff5c:	01bebebe 	.word	0x01bebebe
    ff60:	10006e60 	.word	0x10006e60

0000ff64 <am_hal_mspi_device_configure>:
// MSPI device configuration function
//
uint32_t
am_hal_mspi_device_configure(void *pHandle,
                             am_hal_mspi_dev_config_t *pConfig)
{
    ff64:	4602      	mov	r2, r0

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
    ff66:	4874      	ldr	r0, [pc, #464]	; (10138 <am_hal_mspi_device_configure+0x1d4>)
    ff68:	6813      	ldr	r3, [r2, #0]
    ff6a:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    ff6e:	4584      	cmp	ip, r0
    ff70:	d001      	beq.n	ff76 <am_hal_mspi_device_configure+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    ff72:	2002      	movs	r0, #2
    ff74:	4770      	bx	lr
    }

    //
    // Configure not allowed in Enabled state
    //
    if (pMSPIState->prefix.s.bEnable)
    ff76:	78d0      	ldrb	r0, [r2, #3]
    ff78:	0783      	lsls	r3, r0, #30
    ff7a:	d501      	bpl.n	ff80 <am_hal_mspi_device_configure+0x1c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    ff7c:	2007      	movs	r0, #7
    ff7e:	4770      	bx	lr
{
    ff80:	b5f0      	push	{r4, r5, r6, r7, lr}

    //
    // Set the external flash device configuration.
    //
#if AM_CMSIS_REGS
    ui32Config = _VAL2FLD(MSPI_CFG_DEVCFG, pConfig->eDeviceConfig);
    ff82:	f891 c005 	ldrb.w	ip, [r1, #5]

    //
    // If separate MOSI/MISO, then configure.
    //
    if ( pConfig->bSeparateIO )
    ff86:	7a8c      	ldrb	r4, [r1, #10]
    ff88:	f00c 050f 	and.w	r5, ip, #15
    ff8c:	b10c      	cbz	r4, ff92 <am_hal_mspi_device_configure+0x2e>
    ff8e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    }

    //
    // Set the clock polarity and phase based on SPI mode.
    //
    switch(pConfig->eSpiMode)
    ff92:	798e      	ldrb	r6, [r1, #6]
    ff94:	2e02      	cmp	r6, #2
    ff96:	4628      	mov	r0, r5
    ff98:	f000 80cb 	beq.w	10132 <am_hal_mspi_device_configure+0x1ce>
    ff9c:	2e03      	cmp	r6, #3
    ff9e:	f000 80c5 	beq.w	1012c <am_hal_mspi_device_configure+0x1c8>
    ffa2:	2e01      	cmp	r6, #1
    ffa4:	d101      	bne.n	ffaa <am_hal_mspi_device_configure+0x46>
        case AM_HAL_MSPI_SPI_MODE_0:                  // CPOL = 0; CPHA = 0
            ui32Config |= _VAL2FLD(MSPI_CFG_CPOL, 0)    |
                          _VAL2FLD(MSPI_CFG_CPHA, 0);
            break;
        case AM_HAL_MSPI_SPI_MODE_2:                  // CPOL = 1; CPHA = 0
            ui32Config |= _VAL2FLD(MSPI_CFG_CPOL, 1)    |
    ffa6:	f445 3000 	orr.w	r0, r5, #131072	; 0x20000
    }

    //
    // Set the number of turn-around cycles.
    //
    ui32Config |= _VAL2FLD(MSPI_CFG_TURNAROUND, pConfig->ui8TurnAround);
    ffaa:	780b      	ldrb	r3, [r1, #0]

    //
    // Set the address configuration.
    //
    ui32Config |= _VAL2FLD(MSPI_CFG_ASIZE, pConfig->eAddrCfg);
    ffac:	784f      	ldrb	r7, [r1, #1]

    //
    // Set the instruction configuration.
    //
    ui32Config |= _VAL2FLD(MSPI_CFG_ISIZE, pConfig->eInstrCfg);
    ffae:	788d      	ldrb	r5, [r1, #2]

    //
    // Set the configuration in the MSPI peripheral.
    //
    MSPIn(ui32Module)->CFG = ui32Config;
    ffb0:	4c62      	ldr	r4, [pc, #392]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
    ui32Config |= _VAL2FLD(MSPI_CFG_TURNAROUND, pConfig->ui8TurnAround);
    ffb2:	021e      	lsls	r6, r3, #8
    ui32Config |= _VAL2FLD(MSPI_CFG_ASIZE, pConfig->eAddrCfg);
    ffb4:	013f      	lsls	r7, r7, #4
    ui32Config |= _VAL2FLD(MSPI_CFG_TURNAROUND, pConfig->ui8TurnAround);
    ffb6:	f406 537c 	and.w	r3, r6, #16128	; 0x3f00
    ui32Config |= _VAL2FLD(MSPI_CFG_ASIZE, pConfig->eAddrCfg);
    ffba:	f007 0730 	and.w	r7, r7, #48	; 0x30
    ui32Config |= _VAL2FLD(MSPI_CFG_ISIZE, pConfig->eInstrCfg);
    ffbe:	01ad      	lsls	r5, r5, #6
    ffc0:	f005 0640 	and.w	r6, r5, #64	; 0x40
    ffc4:	433b      	orrs	r3, r7
    ffc6:	4333      	orrs	r3, r6
    ffc8:	4303      	orrs	r3, r0
    uint32_t                      ui32Module = pMSPIState->ui32Module;
    ffca:	6850      	ldr	r0, [r2, #4]
    MSPIn(ui32Module)->CFG = ui32Config;
    ffcc:	6063      	str	r3, [r4, #4]

    //
    // Set the clock divisor to get the desired MSPI clock frequency.
    //
    MSPIn(ui32Module)->MSPICFG_b.CLKDIV = pConfig->eClockFreq;
    ffce:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
    ffd2:	79cb      	ldrb	r3, [r1, #7]
    ffd4:	f363 250d 	bfi	r5, r3, #8, #6
    ffd8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    //
    // Adjust the clock edge configuration depending upon the clock frequency.
    //
    if ( pConfig->eClockFreq == AM_HAL_MSPI_CLK_48MHZ )
    {
        MSPIn(ui32Module)->MSPICFG_b.TXNEG = 1;
    ffdc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    if ( pConfig->eClockFreq == AM_HAL_MSPI_CLK_48MHZ )
    ffe0:	2b01      	cmp	r3, #1
        MSPIn(ui32Module)->MSPICFG_b.TXNEG = 1;
    ffe2:	bf0c      	ite	eq
    ffe4:	f047 0708 	orreq.w	r7, r7, #8
        MSPIn(ui32Module)->MSPICFG_b.RXNEG = 0;
        MSPIn(ui32Module)->MSPICFG_b.RXCAP = 1;
    }
    else
    {
        MSPIn(ui32Module)->MSPICFG_b.TXNEG = 0;
    ffe8:	f36f 07c3 	bfcne	r7, #3, #1
    ffec:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
        MSPIn(ui32Module)->MSPICFG_b.RXNEG = 0;
    fff0:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
    fff4:	f36f 0682 	bfc	r6, #2, #1
    fff8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
        MSPIn(ui32Module)->MSPICFG_b.RXCAP = 1;
    fffc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    }

    //
    // Set the APBCLK for continuous operation.
    //
    MSPIn(ui32Module)->MSPICFG_b.APBCLK = 0;
   10000:	4e4e      	ldr	r6, [pc, #312]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
        MSPIn(ui32Module)->MSPICFG_b.RXCAP = 1;
   10002:	f043 0702 	orr.w	r7, r3, #2
   10006:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    MSPIn(ui32Module)->MSPICFG_b.APBCLK = 0;
   1000a:	f8d6 4100 	ldr.w	r4, [r6, #256]	; 0x100
   1000e:	f36f 0400 	bfc	r4, #0, #1
   10012:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
    ui32Config = 0;

    //
    // Set whether to send an instruction.
    //
    if ( pConfig->bSendInstr )
   10016:	7a4b      	ldrb	r3, [r1, #9]
    }

    //
    // Set whether to send an address.
    //
    if ( pConfig->bSendAddr )
   10018:	f891 e008 	ldrb.w	lr, [r1, #8]
    }

    //
    // Set whether to enable the TX to RX turnaround.
    //
    if ( pConfig->bTurnaround )
   1001c:	7ace      	ldrb	r6, [r1, #11]
    if ( pConfig->bSendInstr )
   1001e:	2b00      	cmp	r3, #0
   10020:	bf15      	itete	ne
   10022:	23c0      	movne	r3, #192	; 0xc0
   10024:	2340      	moveq	r3, #64	; 0x40
   10026:	2580      	movne	r5, #128	; 0x80
   10028:	2500      	moveq	r5, #0
    if ( pConfig->bSendAddr )
   1002a:	f1be 0f00 	cmp.w	lr, #0
   1002e:	bf18      	it	ne
   10030:	461d      	movne	r5, r3
    if ( pConfig->bTurnaround )
   10032:	b10e      	cbz	r6, 10038 <am_hal_mspi_device_configure+0xd4>
    {
        ui32Config |= _VAL2FLD(MSPI_FLASH_XIPENTURN, 1);
   10034:	f045 0520 	orr.w	r5, r5, #32
    ui32Config |= _VAL2FLD(MSPI_FLASH_XIPACK, MSPI_FLASH_XIPACK_TERMINATE);

    //
    // Set the read instruction.
    //
    ui32Config |= _VAL2FLD(MSPI_FLASH_READINSTR, pConfig->ui8ReadInstr);
   10038:	78cf      	ldrb	r7, [r1, #3]
    ui32Config |= _VAL2FLD(MSPI_FLASH_XIPBIGENDIAN, pMSPIState->bBigEndian);
   1003a:	7a54      	ldrb	r4, [r2, #9]

    //
    // Set the write instruction.
    //
    ui32Config |= _VAL2FLD(MSPI_FLASH_WRITEINSTR, pConfig->ui8WriteInstr);
   1003c:	f891 e004 	ldrb.w	lr, [r1, #4]

    //
    // Set the configuration in the MSPI peripheral.
    //
    MSPIn(ui32Module)->FLASH = ui32Config;
   10040:	4e3e      	ldr	r6, [pc, #248]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
    ui32Config |= _VAL2FLD(MSPI_FLASH_READINSTR, pConfig->ui8ReadInstr);
   10042:	063b      	lsls	r3, r7, #24
    ui32Config |= _VAL2FLD(MSPI_FLASH_WRITEINSTR, pConfig->ui8WriteInstr);
   10044:	f043 070c 	orr.w	r7, r3, #12
    ui32Config |= _VAL2FLD(MSPI_FLASH_XIPBIGENDIAN, pMSPIState->bBigEndian);
   10048:	0124      	lsls	r4, r4, #4
    ui32Config |= _VAL2FLD(MSPI_FLASH_WRITEINSTR, pConfig->ui8WriteInstr);
   1004a:	ea47 430e 	orr.w	r3, r7, lr, lsl #16
    ui32Config |= _VAL2FLD(MSPI_FLASH_XIPBIGENDIAN, pMSPIState->bBigEndian);
   1004e:	f004 0710 	and.w	r7, r4, #16
    ui32Config |= _VAL2FLD(MSPI_FLASH_WRITEINSTR, pConfig->ui8WriteInstr);
   10052:	433b      	orrs	r3, r7
   10054:	432b      	orrs	r3, r5

    g_MSPIState[ui32Module].pTCB = pConfig->pTCB;
   10056:	4d3a      	ldr	r5, [pc, #232]	; (10140 <am_hal_mspi_device_configure+0x1dc>)
    MSPIn(ui32Module)->FLASH = ui32Config;
   10058:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
    g_MSPIState[ui32Module].pTCB = pConfig->pTCB;
   1005c:	f640 0e68 	movw	lr, #2152	; 0x868
   10060:	690b      	ldr	r3, [r1, #16]
    g_MSPIState[ui32Module].ui32TCBSize = pConfig->ui32TCBSize;
   10062:	68cc      	ldr	r4, [r1, #12]
    g_MSPIState[ui32Module].pTCB = pConfig->pTCB;
   10064:	fb0e 5000 	mla	r0, lr, r0, r5
   10068:	6143      	str	r3, [r0, #20]
    g_MSPIState[ui32Module].ui32TCBSize = pConfig->ui32TCBSize;
   1006a:	6104      	str	r4, [r0, #16]

    if (pConfig->pTCB)
   1006c:	b12b      	cbz	r3, 1007a <am_hal_mspi_device_configure+0x116>
    {
        // set the DMABCOUNT
        MSPIn(ui32Module)->DMABCOUNT = AM_HAL_MSPI_DEFAULT_BURST_COUNT;
   1006e:	2720      	movs	r7, #32

        // set the DMATHRESH
        MSPIn(ui32Module)->DMATHRESH = AM_HAL_MSPI_DEFAULT_BURST_COUNT >> 2;
   10070:	2508      	movs	r5, #8
        MSPIn(ui32Module)->DMABCOUNT = AM_HAL_MSPI_DEFAULT_BURST_COUNT;
   10072:	f8c6 7264 	str.w	r7, [r6, #612]	; 0x264
        MSPIn(ui32Module)->DMATHRESH = AM_HAL_MSPI_DEFAULT_BURST_COUNT >> 2;
   10076:	f8c6 5278 	str.w	r5, [r6, #632]	; 0x278

    //
    // Set the scrambling start and end addresses aligned to 64K region.
    //
    MSPIn(ui32Module)->SCRAMBLING =
        _VAL2FLD(MSPI_SCRAMBLING_SCRSTART, pConfig->scramblingStartAddr >> 16) |
   1007a:	8ace      	ldrh	r6, [r1, #22]
        _VAL2FLD(MSPI_SCRAMBLING_SCREND, pConfig->scramblingEndAddr >> 16);
   1007c:	6988      	ldr	r0, [r1, #24]
   1007e:	4c31      	ldr	r4, [pc, #196]	; (10144 <am_hal_mspi_device_configure+0x1e0>)
    MSPIn(ui32Module)->SCRAMBLING =
   10080:	492e      	ldr	r1, [pc, #184]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
        _VAL2FLD(MSPI_SCRAMBLING_SCRSTART, pConfig->scramblingStartAddr >> 16) |
   10082:	f3c6 0309 	ubfx	r3, r6, #0, #10
        _VAL2FLD(MSPI_SCRAMBLING_SCREND, pConfig->scramblingEndAddr >> 16);
   10086:	4004      	ands	r4, r0
        _VAL2FLD(MSPI_SCRAMBLING_SCRSTART, pConfig->scramblingStartAddr >> 16) |
   10088:	4323      	orrs	r3, r4
    MSPIn(ui32Module)->SCRAMBLING =
   1008a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

    //
    // Set the selected IOM to disable.
    //
    MSPIn(ui32Module)->MSPICFG_b.IOMSEL = 7;
   1008e:	f8d1 7100 	ldr.w	r7, [r1, #256]	; 0x100
    switch ( eMSPIDevice )
   10092:	f10c 35ff 	add.w	r5, ip, #4294967295
    MSPIn(ui32Module)->MSPICFG_b.IOMSEL = 7;
   10096:	f047 0670 	orr.w	r6, r7, #112	; 0x70
   1009a:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
    switch ( eMSPIDevice )
   1009e:	2d0e      	cmp	r5, #14
   100a0:	d811      	bhi.n	100c6 <am_hal_mspi_device_configure+0x162>
   100a2:	e8df f005 	tbb	[pc, r5]
   100a6:	3a28      	.short	0x3a28
   100a8:	3a281031 	.word	0x3a281031
   100ac:	161f1010 	.word	0x161f1010
   100b0:	08081010 	.word	0x08081010
   100b4:	08          	.byte	0x08
   100b5:	00          	.byte	0x00
            MSPIn(ui32Module)->PADCFG = 0;
   100b6:	4c21      	ldr	r4, [pc, #132]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   100b8:	2000      	movs	r0, #0
            MSPIn(ui32Module)->PADOUTEN = 0x1FF;
   100ba:	f240 11ff 	movw	r1, #511	; 0x1ff
            MSPIn(ui32Module)->PADCFG = 0;
   100be:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x1FF;
   100c2:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
    mspi_pad_configure(pHandle, pConfig->eDeviceConfig);

    //
    // Set the default endianess for the FIFO.
    //
    pMSPIState->bBigEndian = false;
   100c6:	2000      	movs	r0, #0

    //
    // Set the default maximum delay timeout value.
    //
    pMSPIState->waitTimeout = 10000;
   100c8:	f242 7110 	movw	r1, #10000	; 0x2710
    pMSPIState->bBigEndian = false;
   100cc:	7250      	strb	r0, [r2, #9]
    pMSPIState->waitTimeout = 10000;
   100ce:	60d1      	str	r1, [r2, #12]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   100d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MSPIn(ui32Module)->PADCFG = 0;
   100d2:	4b1a      	ldr	r3, [pc, #104]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   100d4:	2700      	movs	r7, #0
            MSPIn(ui32Module)->PADOUTEN = 0x1F0;
   100d6:	f44f 75f8 	mov.w	r5, #496	; 0x1f0
            MSPIn(ui32Module)->PADCFG = 0;
   100da:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x1F0;
   100de:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
   100e2:	e7f0      	b.n	100c6 <am_hal_mspi_device_configure+0x162>
            MSPIn(ui32Module)->PADCFG = 0;
   100e4:	4e15      	ldr	r6, [pc, #84]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   100e6:	2400      	movs	r4, #0
            MSPIn(ui32Module)->PADOUTEN = 0x10F;
   100e8:	f240 100f 	movw	r0, #271	; 0x10f
            MSPIn(ui32Module)->PADCFG = 0;
   100ec:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x10F;
   100f0:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
   100f4:	e7e7      	b.n	100c6 <am_hal_mspi_device_configure+0x162>
            MSPIn(ui32Module)->PADCFG = 0;
   100f6:	4b11      	ldr	r3, [pc, #68]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   100f8:	2000      	movs	r0, #0
            MSPIn(ui32Module)->PADOUTEN = 0x103;
   100fa:	f240 1703 	movw	r7, #259	; 0x103
            MSPIn(ui32Module)->PADCFG = 0;
   100fe:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x103;
   10102:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   10106:	e7de      	b.n	100c6 <am_hal_mspi_device_configure+0x162>
            MSPIn(ui32Module)->PADCFG = 0;
   10108:	4b0c      	ldr	r3, [pc, #48]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   1010a:	2700      	movs	r7, #0
            MSPIn(ui32Module)->PADOUTEN = 0x133;
   1010c:	f240 1133 	movw	r1, #307	; 0x133
            MSPIn(ui32Module)->PADCFG = 0;
   10110:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x133;
   10114:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   10118:	e7d5      	b.n	100c6 <am_hal_mspi_device_configure+0x162>
            MSPIn(ui32Module)->PADCFG = 0;
   1011a:	4d08      	ldr	r5, [pc, #32]	; (1013c <am_hal_mspi_device_configure+0x1d8>)
   1011c:	2600      	movs	r6, #0
            MSPIn(ui32Module)->PADOUTEN = 0x130;
   1011e:	f44f 7498 	mov.w	r4, #304	; 0x130
            MSPIn(ui32Module)->PADCFG = 0;
   10122:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
            MSPIn(ui32Module)->PADOUTEN = 0x130;
   10126:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
   1012a:	e7cc      	b.n	100c6 <am_hal_mspi_device_configure+0x162>
            ui32Config |= _VAL2FLD(MSPI_CFG_CPOL, 1)    |
   1012c:	f445 3040 	orr.w	r0, r5, #196608	; 0x30000
            break;
   10130:	e73b      	b.n	ffaa <am_hal_mspi_device_configure+0x46>
            ui32Config |= _VAL2FLD(MSPI_CFG_CPOL, 0)    |
   10132:	f445 3080 	orr.w	r0, r5, #65536	; 0x10000
            break;
   10136:	e738      	b.n	ffaa <am_hal_mspi_device_configure+0x46>
   10138:	01bebebe 	.word	0x01bebebe
   1013c:	50014000 	.word	0x50014000
   10140:	10006e60 	.word	0x10006e60
   10144:	03ff0000 	.word	0x03ff0000

00010148 <am_hal_mspi_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10148:	b128      	cbz	r0, 10156 <am_hal_mspi_enable+0xe>
   1014a:	6803      	ldr	r3, [r0, #0]
   1014c:	4a14      	ldr	r2, [pc, #80]	; (101a0 <am_hal_mspi_enable+0x58>)
   1014e:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
   10152:	4291      	cmp	r1, r2
   10154:	d001      	beq.n	1015a <am_hal_mspi_enable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   10156:	2002      	movs	r0, #2
   10158:	4770      	bx	lr
{
   1015a:	b570      	push	{r4, r5, r6, lr}
   1015c:	4604      	mov	r4, r0
    }
#endif

    if (pMSPIState->pTCB)
   1015e:	6940      	ldr	r0, [r0, #20]
{
   10160:	b084      	sub	sp, #16
    if (pMSPIState->pTCB)
   10162:	b1a8      	cbz	r0, 10190 <am_hal_mspi_enable+0x48>
#if MSPI_USE_CQ

        //
        // Initialize the Command Queue service with memory supplied by the application.
        //
        mspi_cq_init(pMSPIState->ui32Module, pMSPIState->ui32TCBSize, pMSPIState->pTCB);
   10164:	6865      	ldr	r5, [r4, #4]
    return am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_MSPI + ui32Module),
   10166:	4a0f      	ldr	r2, [pc, #60]	; (101a4 <am_hal_mspi_enable+0x5c>)
        mspi_cq_init(pMSPIState->ui32Module, pMSPIState->ui32TCBSize, pMSPIState->pTCB);
   10168:	6923      	ldr	r3, [r4, #16]
    cqCfg.pCmdQBuf = pTCB;
   1016a:	9002      	str	r0, [sp, #8]
        pMSPIState->ui32LastIdxProcessed = 0;
   1016c:	2100      	movs	r1, #0
    return am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_MSPI + ui32Module),
   1016e:	f640 0668 	movw	r6, #2152	; 0x868
   10172:	1da8      	adds	r0, r5, #6
    cqCfg.cmdQSize = ui32Length / 2;
   10174:	085b      	lsrs	r3, r3, #1
        pMSPIState->ui32LastIdxProcessed = 0;
   10176:	61a1      	str	r1, [r4, #24]
        pMSPIState->ui32NumCQEntries = 0;
   10178:	61e1      	str	r1, [r4, #28]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   1017a:	f04f 0c01 	mov.w	ip, #1
    return am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_MSPI + ui32Module),
   1017e:	fb06 2205 	mla	r2, r6, r5, r2
   10182:	b2c0      	uxtb	r0, r0
   10184:	a901      	add	r1, sp, #4
    cqCfg.cmdQSize = ui32Length / 2;
   10186:	9301      	str	r3, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   10188:	f88d c00c 	strb.w	ip, [sp, #12]
    return am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_MSPI + ui32Module),
   1018c:	f001 faba 	bl	11704 <am_hal_cmdq_init>
        }

#endif // MSPI_USE_CQ
    }

    pMSPIState->prefix.s.bEnable = true;
   10190:	78e5      	ldrb	r5, [r4, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   10192:	2000      	movs	r0, #0
    pMSPIState->prefix.s.bEnable = true;
   10194:	f045 0202 	orr.w	r2, r5, #2
   10198:	70e2      	strb	r2, [r4, #3]
}
   1019a:	b004      	add	sp, #16
   1019c:	bd70      	pop	{r4, r5, r6, pc}
   1019e:	bf00      	nop
   101a0:	01bebebe 	.word	0x01bebebe
   101a4:	10007684 	.word	0x10007684

000101a8 <am_hal_mspi_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_MSPI_CHK_HANDLE(pHandle) )
   101a8:	b128      	cbz	r0, 101b6 <am_hal_mspi_control+0xe>
   101aa:	6803      	ldr	r3, [r0, #0]
   101ac:	4831      	ldr	r0, [pc, #196]	; (10274 <am_hal_mspi_control+0xcc>)
   101ae:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   101b2:	4584      	cmp	ip, r0
   101b4:	d001      	beq.n	101ba <am_hal_mspi_control+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   101b6:	2002      	movs	r0, #2
   101b8:	4770      	bx	lr
    }

    //
    // Validate the parameters
    //
    if (eRequest > AM_HAL_MSPI_REQ_MAX)
   101ba:	2908      	cmp	r1, #8
   101bc:	d901      	bls.n	101c2 <am_hal_mspi_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
   101be:	2006      	movs	r0, #6

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
   101c0:	4770      	bx	lr
    switch(eRequest)
   101c2:	2907      	cmp	r1, #7
   101c4:	d8fb      	bhi.n	101be <am_hal_mspi_control+0x16>
   101c6:	e8df f001 	tbb	[pc, r1]
   101ca:	4048      	.short	0x4048
   101cc:	16222b34 	.word	0x16222b34
   101d0:	040d      	.short	0x040d
            MSPIn(ui32Module)->FLASH_b.XIPEN = 1;
   101d2:	4a29      	ldr	r2, [pc, #164]	; (10278 <am_hal_mspi_control+0xd0>)
   101d4:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
   101d8:	f041 0301 	orr.w	r3, r1, #1
   101dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    return AM_HAL_STATUS_SUCCESS;
   101e0:	2000      	movs	r0, #0
            break;
   101e2:	4770      	bx	lr
            MSPIn(ui32Module)->FLASH_b.XIPEN = 0;
   101e4:	4824      	ldr	r0, [pc, #144]	; (10278 <am_hal_mspi_control+0xd0>)
   101e6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   101ea:	f36f 0200 	bfc	r2, #0, #1
   101ee:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
    return AM_HAL_STATUS_SUCCESS;
   101f2:	2000      	movs	r0, #0
            break;
   101f4:	4770      	bx	lr
            if (!pConfig)
   101f6:	2a00      	cmp	r2, #0
   101f8:	d0e1      	beq.n	101be <am_hal_mspi_control+0x16>
            MSPIn(ui32Module)->FLASH_b.XIPACK = *((uint32_t *)pConfig);
   101fa:	4b1f      	ldr	r3, [pc, #124]	; (10278 <am_hal_mspi_control+0xd0>)
   101fc:	6811      	ldr	r1, [r2, #0]
   101fe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   10202:	f361 0083 	bfi	r0, r1, #2, #2
   10206:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    return AM_HAL_STATUS_SUCCESS;
   1020a:	2000      	movs	r0, #0
            break;
   1020c:	4770      	bx	lr
            MSPIn(ui32Module)->SCRAMBLING_b.SCRENABLE = 1;
   1020e:	4a1a      	ldr	r2, [pc, #104]	; (10278 <am_hal_mspi_control+0xd0>)
   10210:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   10214:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
   10218:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    return AM_HAL_STATUS_SUCCESS;
   1021c:	2000      	movs	r0, #0
            break;
   1021e:	4770      	bx	lr
            MSPIn(ui32Module)->SCRAMBLING_b.SCRENABLE = 0;
   10220:	4815      	ldr	r0, [pc, #84]	; (10278 <am_hal_mspi_control+0xd0>)
   10222:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
   10226:	f36f 72df 	bfc	r2, #31, #1
   1022a:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
    return AM_HAL_STATUS_SUCCESS;
   1022e:	2000      	movs	r0, #0
            break;
   10230:	4770      	bx	lr
            if (!pConfig)
   10232:	2a00      	cmp	r2, #0
   10234:	d0c3      	beq.n	101be <am_hal_mspi_control+0x16>
            MSPIn(ui32Module)->MSPICFG_b.IOMSEL = *((uint32_t *)pConfig);
   10236:	4b10      	ldr	r3, [pc, #64]	; (10278 <am_hal_mspi_control+0xd0>)
   10238:	6811      	ldr	r1, [r2, #0]
   1023a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   1023e:	f361 1006 	bfi	r0, r1, #4, #3
   10242:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    return AM_HAL_STATUS_SUCCESS;
   10246:	2000      	movs	r0, #0
            break;
   10248:	4770      	bx	lr
            if (!pConfig)
   1024a:	2a00      	cmp	r2, #0
   1024c:	d0b7      	beq.n	101be <am_hal_mspi_control+0x16>
            MSPIn(ui32Module)->CQSETCLEAR = *((uint32_t *)pConfig);
   1024e:	4b0a      	ldr	r3, [pc, #40]	; (10278 <am_hal_mspi_control+0xd0>)
   10250:	6812      	ldr	r2, [r2, #0]
   10252:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    return AM_HAL_STATUS_SUCCESS;
   10256:	2000      	movs	r0, #0
            break;
   10258:	4770      	bx	lr
            if (!pConfig)
   1025a:	2a00      	cmp	r2, #0
   1025c:	d0af      	beq.n	101be <am_hal_mspi_control+0x16>
            MSPIn(ui32Module)->MSPICFG_b.APBCLK = *((uint32_t *)pConfig);
   1025e:	4806      	ldr	r0, [pc, #24]	; (10278 <am_hal_mspi_control+0xd0>)
   10260:	6811      	ldr	r1, [r2, #0]
   10262:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   10266:	f361 0300 	bfi	r3, r1, #0, #1
   1026a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    return AM_HAL_STATUS_SUCCESS;
   1026e:	2000      	movs	r0, #0
            break;
   10270:	4770      	bx	lr
   10272:	bf00      	nop
   10274:	01bebebe 	.word	0x01bebebe
   10278:	50014000 	.word	0x50014000

0001027c <am_hal_mspi_blocking_transfer>:
// MSPI blocking transfer function
//
uint32_t am_hal_mspi_blocking_transfer(void *pHandle,
                                       am_hal_mspi_pio_transfer_t *pTransaction,
                                       uint32_t ui32Timeout)
{
   1027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10280:	6803      	ldr	r3, [r0, #0]
   10282:	4c76      	ldr	r4, [pc, #472]	; (1045c <am_hal_mspi_blocking_transfer+0x1e0>)
   10284:	f023 457e 	bic.w	r5, r3, #4261412864	; 0xfe000000
   10288:	42a5      	cmp	r5, r4
{
   1028a:	b08b      	sub	sp, #44	; 0x2c
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   1028c:	d003      	beq.n	10296 <am_hal_mspi_blocking_transfer+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1028e:	2002      	movs	r0, #2
    //
    // Return the status.
    //
    return ui32Status;

}
   10290:	b00b      	add	sp, #44	; 0x2c
   10292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pMSPIState->ui32NumCQEntries)
   10296:	69c6      	ldr	r6, [r0, #28]
   10298:	b10e      	cbz	r6, 1029e <am_hal_mspi_blocking_transfer+0x22>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1029a:	2007      	movs	r0, #7
   1029c:	e7f8      	b.n	10290 <am_hal_mspi_blocking_transfer+0x14>
    ui32Control |= _VAL2FLD(MSPI_CTRL_TXRX, pTransaction->eDirection);
   1029e:	794c      	ldrb	r4, [r1, #5]
    ui32Control |= _VAL2FLD(MSPI_CTRL_PIOSCRAMBLE, pTransaction->bScrambling);
   102a0:	790f      	ldrb	r7, [r1, #4]
    uint32_t                      ui32Module = pMSPIState->ui32Module;
   102a2:	6843      	ldr	r3, [r0, #4]
    ui32Control |= _VAL2FLD(MSPI_CTRL_XFERBYTES, pTransaction->ui32NumBytes);
   102a4:	680e      	ldr	r6, [r1, #0]
    uint32_t                      ui32Module = pMSPIState->ui32Module;
   102a6:	9303      	str	r3, [sp, #12]
    ui32Control |= _VAL2FLD(MSPI_CTRL_TXRX, pTransaction->eDirection);
   102a8:	02a5      	lsls	r5, r4, #10
    ui32Control |= _VAL2FLD(MSPI_CTRL_PIOSCRAMBLE, pTransaction->bScrambling);
   102aa:	02ff      	lsls	r7, r7, #11
    ui32Control |= _VAL2FLD(MSPI_CTRL_TXRX, pTransaction->eDirection);
   102ac:	f405 6380 	and.w	r3, r5, #1024	; 0x400
    if ( pTransaction->bSendInstr )
   102b0:	f891 e00c 	ldrb.w	lr, [r1, #12]
    ui32Control |= _VAL2FLD(MSPI_CTRL_PIOSCRAMBLE, pTransaction->bScrambling);
   102b4:	f407 6500 	and.w	r5, r7, #2048	; 0x800
    ui32Control |= _VAL2FLD(MSPI_CTRL_TXRX, pTransaction->eDirection);
   102b8:	431d      	orrs	r5, r3
   102ba:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    if ( pTransaction->bSendInstr )
   102be:	f1be 0f00 	cmp.w	lr, #0
   102c2:	d006      	beq.n	102d2 <am_hal_mspi_blocking_transfer+0x56>
        MSPIn(ui32Module)->INSTR =
   102c4:	4f66      	ldr	r7, [pc, #408]	; (10460 <am_hal_mspi_blocking_transfer+0x1e4>)
            _VAL2FLD(MSPI_INSTR_INSTR, pTransaction->ui16DeviceInstr);
   102c6:	f8b1 800e 	ldrh.w	r8, [r1, #14]
        MSPIn(ui32Module)->INSTR =
   102ca:	f8c7 800c 	str.w	r8, [r7, #12]
        ui32Control |= _VAL2FLD(MSPI_CTRL_SENDI, 1);
   102ce:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if ( pTransaction->bSendAddr )
   102d2:	798b      	ldrb	r3, [r1, #6]
   102d4:	b123      	cbz	r3, 102e0 <am_hal_mspi_blocking_transfer+0x64>
        MSPIn(ui32Module)->ADDR =
   102d6:	4f62      	ldr	r7, [pc, #392]	; (10460 <am_hal_mspi_blocking_transfer+0x1e4>)
   102d8:	688b      	ldr	r3, [r1, #8]
   102da:	60bb      	str	r3, [r7, #8]
        ui32Control |= _VAL2FLD(MSPI_CTRL_SENDA, 1);
   102dc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if ( pTransaction->bTurnaround )
   102e0:	7c0f      	ldrb	r7, [r1, #16]
   102e2:	b10f      	cbz	r7, 102e8 <am_hal_mspi_blocking_transfer+0x6c>
        ui32Control |= _VAL2FLD(MSPI_CTRL_ENTURN, 1);
   102e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    ui32Control |= _VAL2FLD(MSPI_CTRL_BIGENDIAN, pMSPIState->bBigEndian);
   102e8:	7a43      	ldrb	r3, [r0, #9]
    ui32Control |= _VAL2FLD(MSPI_CTRL_CONT, pTransaction->bContinue);
   102ea:	f891 9012 	ldrb.w	r9, [r1, #18]
    if ( pTransaction->bQuadCmd )
   102ee:	f891 c011 	ldrb.w	ip, [r1, #17]
    ui32Control |= _VAL2FLD(MSPI_CTRL_BIGENDIAN, pMSPIState->bBigEndian);
   102f2:	019f      	lsls	r7, r3, #6
    ui32Control |= _VAL2FLD(MSPI_CTRL_CONT, pTransaction->bContinue);
   102f4:	ea4f 1349 	mov.w	r3, r9, lsl #5
    ui32Control |= _VAL2FLD(MSPI_CTRL_BIGENDIAN, pMSPIState->bBigEndian);
   102f8:	f007 0a40 	and.w	sl, r7, #64	; 0x40
    ui32Control |= _VAL2FLD(MSPI_CTRL_CONT, pTransaction->bContinue);
   102fc:	f003 0720 	and.w	r7, r3, #32
   10300:	ea4a 0307 	orr.w	r3, sl, r7
   10304:	432b      	orrs	r3, r5
    if ( pTransaction->bQuadCmd )
   10306:	f1bc 0f00 	cmp.w	ip, #0
   1030a:	d001      	beq.n	10310 <am_hal_mspi_blocking_transfer+0x94>
        ui32Control |= _VAL2FLD(MSPI_CTRL_QUADCMD, 1);
   1030c:	f043 0308 	orr.w	r3, r3, #8
    intMask = MSPIn(ui32Module)->INTEN;
   10310:	4d53      	ldr	r5, [pc, #332]	; (10460 <am_hal_mspi_blocking_transfer+0x1e4>)
   10312:	4692      	mov	sl, r2
    MSPIn(ui32Module)->INTEN = 0;
   10314:	f04f 0b00 	mov.w	fp, #0
    ui32Control |= _VAL2FLD(MSPI_CTRL_START, 1);
   10318:	f043 0201 	orr.w	r2, r3, #1
    MSPIn(ui32Module)->INTCLR = AM_HAL_MSPI_INT_ALL;
   1031c:	f04f 3eff 	mov.w	lr, #4294967295
    intMask = MSPIn(ui32Module)->INTEN;
   10320:	f8d5 7200 	ldr.w	r7, [r5, #512]	; 0x200
    MSPIn(ui32Module)->INTEN = 0;
   10324:	f8c5 b200 	str.w	fp, [r5, #512]	; 0x200
    MSPIn(ui32Module)->INTCLR = AM_HAL_MSPI_INT_ALL;
   10328:	f8c5 e208 	str.w	lr, [r5, #520]	; 0x208
    MSPIn(ui32Module)->CTRL = ui32Control;
   1032c:	602a      	str	r2, [r5, #0]
    if ( AM_HAL_MSPI_RX == pTransaction->eDirection )
   1032e:	b18c      	cbz	r4, 10354 <am_hal_mspi_blocking_transfer+0xd8>
    else if ( AM_HAL_MSPI_TX == pTransaction->eDirection )
   10330:	2c01      	cmp	r4, #1
   10332:	d01c      	beq.n	1036e <am_hal_mspi_blocking_transfer+0xf2>
    ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10334:	4d4a      	ldr	r5, [pc, #296]	; (10460 <am_hal_mspi_blocking_transfer+0x1e4>)
   10336:	2302      	movs	r3, #2
   10338:	2601      	movs	r6, #1
   1033a:	461a      	mov	r2, r3
   1033c:	4650      	mov	r0, sl
   1033e:	4629      	mov	r1, r5
   10340:	9600      	str	r6, [sp, #0]
   10342:	f7fe fca9 	bl	ec98 <am_hal_flash_delay_status_check>
    MSPIn(ui32Module)->INTCLR = AM_HAL_MSPI_INT_ALL;
   10346:	f04f 33ff 	mov.w	r3, #4294967295
   1034a:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    MSPIn(ui32Module)->INTEN = intMask;
   1034e:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
    return ui32Status;
   10352:	e79d      	b.n	10290 <am_hal_mspi_blocking_transfer+0x14>
    if ( ui32Module >= AM_REG_MSPI_NUM_MODULES )
   10354:	9b03      	ldr	r3, [sp, #12]
   10356:	2b00      	cmp	r3, #0
   10358:	f000 8086 	beq.w	10468 <am_hal_mspi_blocking_transfer+0x1ec>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1035c:	2005      	movs	r0, #5
        MSPIn(ui32Module)->INTCLR = AM_HAL_MSPI_INT_ALL;
   1035e:	4940      	ldr	r1, [pc, #256]	; (10460 <am_hal_mspi_blocking_transfer+0x1e4>)
   10360:	f04f 34ff 	mov.w	r4, #4294967295
   10364:	f8c1 4208 	str.w	r4, [r1, #520]	; 0x208
        MSPIn(ui32Module)->INTEN = intMask;
   10368:	f8c1 7200 	str.w	r7, [r1, #512]	; 0x200
        return ui32Status;
   1036c:	e790      	b.n	10290 <am_hal_mspi_blocking_transfer+0x14>
    if ( ui32Module >= AM_REG_MSPI_NUM_MODULES )
   1036e:	9c03      	ldr	r4, [sp, #12]
   10370:	2c00      	cmp	r4, #0
   10372:	d1f3      	bne.n	1035c <am_hal_mspi_blocking_transfer+0xe0>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   10374:	2e00      	cmp	r6, #0
   10376:	d0dd      	beq.n	10334 <am_hal_mspi_blocking_transfer+0xb8>
   10378:	6949      	ldr	r1, [r1, #20]
        ui32Status = mspi_fifo_write(ui32Module, pTransaction->pui32Buffer,
   1037a:	f8d0 900c 	ldr.w	r9, [r0, #12]
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   1037e:	4688      	mov	r8, r1
   10380:	462c      	mov	r4, r5
   10382:	ea6f 0e01 	mvn.w	lr, r1
   10386:	f858 0b04 	ldr.w	r0, [r8], #4
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   1038a:	9d03      	ldr	r5, [sp, #12]
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   1038c:	6120      	str	r0, [r4, #16]
   1038e:	44b6      	add	lr, r6
   10390:	448e      	add	lr, r1
   10392:	9103      	str	r1, [sp, #12]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10394:	2310      	movs	r3, #16
   10396:	4933      	ldr	r1, [pc, #204]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   10398:	9500      	str	r5, [sp, #0]
   1039a:	4648      	mov	r0, r9
   1039c:	221f      	movs	r2, #31
   1039e:	f3ce 0b81 	ubfx	fp, lr, #2, #2
   103a2:	f7fe fc79 	bl	ec98 <am_hal_flash_delay_status_check>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   103a6:	9b03      	ldr	r3, [sp, #12]
   103a8:	eba8 0103 	sub.w	r1, r8, r3
   103ac:	428e      	cmp	r6, r1
   103ae:	d952      	bls.n	10456 <am_hal_mspi_blocking_transfer+0x1da>
   103b0:	f1bb 0f00 	cmp.w	fp, #0
   103b4:	d028      	beq.n	10408 <am_hal_mspi_blocking_transfer+0x18c>
   103b6:	f1bb 0f01 	cmp.w	fp, #1
   103ba:	d016      	beq.n	103ea <am_hal_mspi_blocking_transfer+0x16e>
   103bc:	f1bb 0f02 	cmp.w	fp, #2
   103c0:	d009      	beq.n	103d6 <am_hal_mspi_blocking_transfer+0x15a>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   103c2:	f858 0b04 	ldr.w	r0, [r8], #4
   103c6:	6120      	str	r0, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   103c8:	2310      	movs	r3, #16
   103ca:	9500      	str	r5, [sp, #0]
   103cc:	221f      	movs	r2, #31
   103ce:	4925      	ldr	r1, [pc, #148]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   103d0:	4648      	mov	r0, r9
   103d2:	f7fe fc61 	bl	ec98 <am_hal_flash_delay_status_check>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   103d6:	f858 2b04 	ldr.w	r2, [r8], #4
   103da:	6122      	str	r2, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   103dc:	2310      	movs	r3, #16
   103de:	9500      	str	r5, [sp, #0]
   103e0:	221f      	movs	r2, #31
   103e2:	4920      	ldr	r1, [pc, #128]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   103e4:	4648      	mov	r0, r9
   103e6:	f7fe fc57 	bl	ec98 <am_hal_flash_delay_status_check>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   103ea:	f858 3b04 	ldr.w	r3, [r8], #4
   103ee:	6123      	str	r3, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   103f0:	2310      	movs	r3, #16
   103f2:	9500      	str	r5, [sp, #0]
   103f4:	221f      	movs	r2, #31
   103f6:	491b      	ldr	r1, [pc, #108]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   103f8:	4648      	mov	r0, r9
   103fa:	f7fe fc4d 	bl	ec98 <am_hal_flash_delay_status_check>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
   103fe:	9903      	ldr	r1, [sp, #12]
   10400:	eba8 0201 	sub.w	r2, r8, r1
   10404:	4296      	cmp	r6, r2
   10406:	d926      	bls.n	10456 <am_hal_mspi_blocking_transfer+0x1da>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   10408:	46c3      	mov	fp, r8
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   1040a:	2310      	movs	r3, #16
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   1040c:	f85b 0b04 	ldr.w	r0, [fp], #4
   10410:	6120      	str	r0, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10412:	221f      	movs	r2, #31
   10414:	4913      	ldr	r1, [pc, #76]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   10416:	9500      	str	r5, [sp, #0]
   10418:	4648      	mov	r0, r9
   1041a:	f7fe fc3d 	bl	ec98 <am_hal_flash_delay_status_check>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   1041e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10422:	6123      	str	r3, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10424:	221f      	movs	r2, #31
   10426:	2310      	movs	r3, #16
   10428:	490e      	ldr	r1, [pc, #56]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   1042a:	9500      	str	r5, [sp, #0]
   1042c:	4648      	mov	r0, r9
   1042e:	f7fe fc33 	bl	ec98 <am_hal_flash_delay_status_check>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   10432:	f8db 1004 	ldr.w	r1, [fp, #4]
   10436:	6121      	str	r1, [r4, #16]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10438:	2310      	movs	r3, #16
   1043a:	221f      	movs	r2, #31
   1043c:	9500      	str	r5, [sp, #0]
   1043e:	4909      	ldr	r1, [pc, #36]	; (10464 <am_hal_mspi_blocking_transfer+0x1e8>)
   10440:	4648      	mov	r0, r9
   10442:	f7fe fc29 	bl	ec98 <am_hal_flash_delay_status_check>
        MSPIn(ui32Module)->TXFIFO = pui32Data[ui32Index];
   10446:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1044a:	6122      	str	r2, [r4, #16]
   1044c:	f108 0810 	add.w	r8, r8, #16
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10450:	9500      	str	r5, [sp, #0]
   10452:	2310      	movs	r3, #16
   10454:	e7ce      	b.n	103f4 <am_hal_mspi_blocking_transfer+0x178>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10456:	2800      	cmp	r0, #0
   10458:	d181      	bne.n	1035e <am_hal_mspi_blocking_transfer+0xe2>
   1045a:	e76b      	b.n	10334 <am_hal_mspi_blocking_transfer+0xb8>
   1045c:	01bebebe 	.word	0x01bebebe
   10460:	50014000 	.word	0x50014000
   10464:	50014018 	.word	0x50014018
        ui32Status = mspi_fifo_read(ui32Module, pTransaction->pui32Buffer,
   10468:	6949      	ldr	r1, [r1, #20]
   1046a:	9105      	str	r1, [sp, #20]
    for ( i = 0; i < ui32NumWords; i++ )
   1046c:	08b2      	lsrs	r2, r6, #2
        ui32Status = mspi_fifo_read(ui32Module, pTransaction->pui32Buffer,
   1046e:	f8d0 900c 	ldr.w	r9, [r0, #12]
    for ( i = 0; i < ui32NumWords; i++ )
   10472:	9206      	str	r2, [sp, #24]
   10474:	f000 80b7 	beq.w	105e6 <am_hal_mspi_blocking_transfer+0x36a>
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10478:	f8df b170 	ldr.w	fp, [pc, #368]	; 105ec <am_hal_mspi_blocking_transfer+0x370>
   1047c:	9b03      	ldr	r3, [sp, #12]
   1047e:	9300      	str	r3, [sp, #0]
   10480:	eb02 0c0e 	add.w	ip, r2, lr
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   10484:	9503      	str	r5, [sp, #12]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10486:	4659      	mov	r1, fp
   10488:	f00c 0503 	and.w	r5, ip, #3
   1048c:	221f      	movs	r2, #31
   1048e:	4648      	mov	r0, r9
   10490:	9304      	str	r3, [sp, #16]
   10492:	9507      	str	r5, [sp, #28]
   10494:	f7fe fc00 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10498:	2800      	cmp	r0, #0
   1049a:	f47f af60 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   1049e:	9b03      	ldr	r3, [sp, #12]
    for ( i = 0; i < ui32NumWords; i++ )
   104a0:	9a06      	ldr	r2, [sp, #24]
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   104a2:	9905      	ldr	r1, [sp, #20]
   104a4:	6958      	ldr	r0, [r3, #20]
   104a6:	6008      	str	r0, [r1, #0]
    for ( i = 0; i < ui32NumWords; i++ )
   104a8:	2501      	movs	r5, #1
   104aa:	42aa      	cmp	r2, r5
   104ac:	4688      	mov	r8, r1
   104ae:	d07d      	beq.n	105ac <am_hal_mspi_blocking_transfer+0x330>
   104b0:	9b07      	ldr	r3, [sp, #28]
   104b2:	2b00      	cmp	r3, #0
   104b4:	f000 8094 	beq.w	105e0 <am_hal_mspi_blocking_transfer+0x364>
   104b8:	42ab      	cmp	r3, r5
   104ba:	d022      	beq.n	10502 <am_hal_mspi_blocking_transfer+0x286>
   104bc:	2b02      	cmp	r3, #2
   104be:	d010      	beq.n	104e2 <am_hal_mspi_blocking_transfer+0x266>
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   104c0:	9400      	str	r4, [sp, #0]
   104c2:	4623      	mov	r3, r4
   104c4:	221f      	movs	r2, #31
   104c6:	4659      	mov	r1, fp
   104c8:	4648      	mov	r0, r9
   104ca:	f7fe fbe5 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   104ce:	2800      	cmp	r0, #0
   104d0:	f47f af45 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   104d4:	9c03      	ldr	r4, [sp, #12]
   104d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
   104da:	6965      	ldr	r5, [r4, #20]
   104dc:	f848 5f04 	str.w	r5, [r8, #4]!
    for ( i = 0; i < ui32NumWords; i++ )
   104e0:	2502      	movs	r5, #2
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   104e2:	9804      	ldr	r0, [sp, #16]
   104e4:	9000      	str	r0, [sp, #0]
   104e6:	2300      	movs	r3, #0
   104e8:	221f      	movs	r2, #31
   104ea:	4659      	mov	r1, fp
   104ec:	4648      	mov	r0, r9
   104ee:	f7fe fbd3 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   104f2:	2800      	cmp	r0, #0
   104f4:	f47f af33 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   104f8:	9903      	ldr	r1, [sp, #12]
   104fa:	694a      	ldr	r2, [r1, #20]
   104fc:	f848 2f04 	str.w	r2, [r8, #4]!
    for ( i = 0; i < ui32NumWords; i++ )
   10500:	3501      	adds	r5, #1
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10502:	9b04      	ldr	r3, [sp, #16]
   10504:	9300      	str	r3, [sp, #0]
   10506:	221f      	movs	r2, #31
   10508:	2300      	movs	r3, #0
   1050a:	4659      	mov	r1, fp
   1050c:	4648      	mov	r0, r9
   1050e:	f7fe fbc3 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10512:	2800      	cmp	r0, #0
   10514:	f47f af23 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   10518:	9c03      	ldr	r4, [sp, #12]
    for ( i = 0; i < ui32NumWords; i++ )
   1051a:	9906      	ldr	r1, [sp, #24]
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   1051c:	6960      	ldr	r0, [r4, #20]
   1051e:	f848 0f04 	str.w	r0, [r8, #4]!
    for ( i = 0; i < ui32NumWords; i++ )
   10522:	3501      	adds	r5, #1
   10524:	42a9      	cmp	r1, r5
   10526:	d041      	beq.n	105ac <am_hal_mspi_blocking_transfer+0x330>
   10528:	460c      	mov	r4, r1
   1052a:	9607      	str	r6, [sp, #28]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   1052c:	9e04      	ldr	r6, [sp, #16]
   1052e:	9600      	str	r6, [sp, #0]
   10530:	2300      	movs	r3, #0
   10532:	221f      	movs	r2, #31
   10534:	4659      	mov	r1, fp
   10536:	4648      	mov	r0, r9
   10538:	f7fe fbae 	bl	ec98 <am_hal_flash_delay_status_check>
    for ( i = 0; i < ui32NumWords; i++ )
   1053c:	3504      	adds	r5, #4
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   1053e:	4603      	mov	r3, r0
   10540:	221f      	movs	r2, #31
   10542:	4659      	mov	r1, fp
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10544:	2800      	cmp	r0, #0
   10546:	f47f af0a 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   1054a:	9803      	ldr	r0, [sp, #12]
   1054c:	6940      	ldr	r0, [r0, #20]
   1054e:	f8c8 0004 	str.w	r0, [r8, #4]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10552:	4648      	mov	r0, r9
   10554:	9600      	str	r6, [sp, #0]
   10556:	f7fe fb9f 	bl	ec98 <am_hal_flash_delay_status_check>
   1055a:	221f      	movs	r2, #31
   1055c:	4603      	mov	r3, r0
   1055e:	4659      	mov	r1, fp
   10560:	f108 0e04 	add.w	lr, r8, #4
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10564:	2800      	cmp	r0, #0
   10566:	f47f aefa 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   1056a:	9e03      	ldr	r6, [sp, #12]
   1056c:	6970      	ldr	r0, [r6, #20]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   1056e:	9e04      	ldr	r6, [sp, #16]
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   10570:	f8ce 0004 	str.w	r0, [lr, #4]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10574:	4648      	mov	r0, r9
   10576:	9600      	str	r6, [sp, #0]
   10578:	f7fe fb8e 	bl	ec98 <am_hal_flash_delay_status_check>
   1057c:	221f      	movs	r2, #31
   1057e:	4603      	mov	r3, r0
   10580:	4659      	mov	r1, fp
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10582:	2800      	cmp	r0, #0
   10584:	f47f aeeb 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   10588:	9803      	ldr	r0, [sp, #12]
   1058a:	6940      	ldr	r0, [r0, #20]
   1058c:	f8c8 000c 	str.w	r0, [r8, #12]
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   10590:	4648      	mov	r0, r9
   10592:	9600      	str	r6, [sp, #0]
   10594:	f7fe fb80 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10598:	2800      	cmp	r0, #0
   1059a:	f47f aee0 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   1059e:	9b03      	ldr	r3, [sp, #12]
    for ( i = 0; i < ui32NumWords; i++ )
   105a0:	42ac      	cmp	r4, r5
        pui32Data[i] = MSPIn(ui32Module)->RXFIFO;
   105a2:	6959      	ldr	r1, [r3, #20]
   105a4:	f848 1f10 	str.w	r1, [r8, #16]!
    for ( i = 0; i < ui32NumWords; i++ )
   105a8:	d1c0      	bne.n	1052c <am_hal_mspi_blocking_transfer+0x2b0>
   105aa:	9e07      	ldr	r6, [sp, #28]
    if ( ui32Leftovers )
   105ac:	f016 0b03 	ands.w	fp, r6, #3
   105b0:	f43f aec0 	beq.w	10334 <am_hal_mspi_blocking_transfer+0xb8>
        ui32Status = am_hal_flash_delay_status_check(ui32Timeout,
   105b4:	2300      	movs	r3, #0
   105b6:	4648      	mov	r0, r9
   105b8:	9300      	str	r3, [sp, #0]
   105ba:	221f      	movs	r2, #31
   105bc:	490b      	ldr	r1, [pc, #44]	; (105ec <am_hal_mspi_blocking_transfer+0x370>)
   105be:	f7fe fb6b 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   105c2:	2800      	cmp	r0, #0
   105c4:	f47f aecb 	bne.w	1035e <am_hal_mspi_blocking_transfer+0xe2>
        sTempBuffer.words[0] = MSPIn(ui32Module)->RXFIFO;
   105c8:	4c09      	ldr	r4, [pc, #36]	; (105f0 <am_hal_mspi_blocking_transfer+0x374>)
   105ca:	9805      	ldr	r0, [sp, #20]
   105cc:	6962      	ldr	r2, [r4, #20]
   105ce:	a90a      	add	r1, sp, #40	; 0x28
   105d0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   105d4:	f841 2d04 	str.w	r2, [r1, #-4]!
   105d8:	465a      	mov	r2, fp
   105da:	f001 fbd9 	bl	11d90 <memcpy>
   105de:	e6a9      	b.n	10334 <am_hal_mspi_blocking_transfer+0xb8>
   105e0:	9607      	str	r6, [sp, #28]
   105e2:	9c06      	ldr	r4, [sp, #24]
   105e4:	e7a2      	b.n	1052c <am_hal_mspi_blocking_transfer+0x2b0>
    for ( i = 0; i < ui32NumWords; i++ )
   105e6:	9d03      	ldr	r5, [sp, #12]
   105e8:	e7e0      	b.n	105ac <am_hal_mspi_blocking_transfer+0x330>
   105ea:	bf00      	nop
   105ec:	5001401c 	.word	0x5001401c
   105f0:	50014000 	.word	0x50014000

000105f4 <am_hal_mspi_interrupt_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   105f4:	b128      	cbz	r0, 10602 <am_hal_mspi_interrupt_enable+0xe>
   105f6:	6803      	ldr	r3, [r0, #0]
   105f8:	4a07      	ldr	r2, [pc, #28]	; (10618 <am_hal_mspi_interrupt_enable+0x24>)
   105fa:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
   105fe:	4290      	cmp	r0, r2
   10600:	d001      	beq.n	10606 <am_hal_mspi_interrupt_enable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   10602:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
   10604:	4770      	bx	lr
    MSPIn(ui32Module)->INTEN |= ui32IntMask;
   10606:	4a05      	ldr	r2, [pc, #20]	; (1061c <am_hal_mspi_interrupt_enable+0x28>)
   10608:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1060c:	4319      	orrs	r1, r3
   1060e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return AM_HAL_STATUS_SUCCESS;
   10612:	2000      	movs	r0, #0
   10614:	4770      	bx	lr
   10616:	bf00      	nop
   10618:	01bebebe 	.word	0x01bebebe
   1061c:	50014000 	.word	0x50014000

00010620 <am_hal_mspi_interrupt_status_get>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10620:	b128      	cbz	r0, 1062e <am_hal_mspi_interrupt_status_get+0xe>
   10622:	6803      	ldr	r3, [r0, #0]
   10624:	480b      	ldr	r0, [pc, #44]	; (10654 <am_hal_mspi_interrupt_status_get+0x34>)
   10626:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   1062a:	4584      	cmp	ip, r0
   1062c:	d001      	beq.n	10632 <am_hal_mspi_interrupt_status_get+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1062e:	2002      	movs	r0, #2
        *pui32Status = AM_REGn(MSPI, ui32Module, INTSTAT);
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
}
   10630:	4770      	bx	lr
    if ( bEnabledOnly )
   10632:	b92a      	cbnz	r2, 10640 <am_hal_mspi_interrupt_status_get+0x20>
        *pui32Status = MSPIn(ui32Module)->INTSTAT;
   10634:	4b08      	ldr	r3, [pc, #32]	; (10658 <am_hal_mspi_interrupt_status_get+0x38>)
   10636:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
   1063a:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   1063c:	4610      	mov	r0, r2
   1063e:	4770      	bx	lr
        uint32_t ui32RetVal = MSPIn(ui32Module)->INTSTAT;
   10640:	4a05      	ldr	r2, [pc, #20]	; (10658 <am_hal_mspi_interrupt_status_get+0x38>)
   10642:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        *pui32Status = ui32RetVal & MSPIn(ui32Module)->INTEN;
   10646:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1064a:	4003      	ands	r3, r0
   1064c:	600b      	str	r3, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   1064e:	2000      	movs	r0, #0
   10650:	4770      	bx	lr
   10652:	bf00      	nop
   10654:	01bebebe 	.word	0x01bebebe
   10658:	50014000 	.word	0x50014000

0001065c <am_hal_mspi_interrupt_clear>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_MSPI_CHK_HANDLE(pHandle) )
   1065c:	b128      	cbz	r0, 1066a <am_hal_mspi_interrupt_clear+0xe>
   1065e:	6803      	ldr	r3, [r0, #0]
   10660:	4a05      	ldr	r2, [pc, #20]	; (10678 <am_hal_mspi_interrupt_clear+0x1c>)
   10662:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
   10666:	4290      	cmp	r0, r2
   10668:	d001      	beq.n	1066e <am_hal_mspi_interrupt_clear+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1066a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
   1066c:	4770      	bx	lr
    MSPIn(ui32Module)->INTCLR = ui32IntMask;
   1066e:	4b03      	ldr	r3, [pc, #12]	; (1067c <am_hal_mspi_interrupt_clear+0x20>)
    return AM_HAL_STATUS_SUCCESS;
   10670:	2000      	movs	r0, #0
    MSPIn(ui32Module)->INTCLR = ui32IntMask;
   10672:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    return AM_HAL_STATUS_SUCCESS;
   10676:	4770      	bx	lr
   10678:	01bebebe 	.word	0x01bebebe
   1067c:	50014000 	.word	0x50014000

00010680 <am_hal_mspi_interrupt_service>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10680:	6803      	ldr	r3, [r0, #0]
   10682:	4a70      	ldr	r2, [pc, #448]	; (10844 <am_hal_mspi_interrupt_service+0x1c4>)
   10684:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   10688:	4594      	cmp	ip, r2
   1068a:	d001      	beq.n	10690 <am_hal_mspi_interrupt_service+0x10>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1068c:	2002      	movs	r0, #2
   1068e:	4770      	bx	lr
{
   10690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10694:	4604      	mov	r4, r0
   10696:	b087      	sub	sp, #28

    //
    // Add a delay to help make the service function work.
    // TODO - why do we need this?
    //
    am_hal_flash_delay(FLASH_CYCLES_US(10));
   10698:	2077      	movs	r0, #119	; 0x77
   1069a:	9100      	str	r1, [sp, #0]
    uint32_t                      ui32Module = pMSPIState->ui32Module;
   1069c:	6866      	ldr	r6, [r4, #4]
    am_hal_flash_delay(FLASH_CYCLES_US(10));
   1069e:	f7fe faf7 	bl	ec90 <am_hal_flash_delay>

    //
    // Need to check if there is an ongoing transaction
    // This is needed because we may get interrupts even for the XIP transactions
    //
    if (pMSPIState->ui32NumCQEntries)
   106a2:	69e0      	ldr	r0, [r4, #28]
   106a4:	2800      	cmp	r0, #0
   106a6:	f000 80ca 	beq.w	1083e <am_hal_mspi_interrupt_service+0x1be>
        am_hal_mspi_CQ_t *pCQ = &g_MSPIState[ui32Module].CQ;

        //
        // Get the current and last indexes.
        //
        if (pCQ->pCmdQHdl)
   106aa:	4f67      	ldr	r7, [pc, #412]	; (10848 <am_hal_mspi_interrupt_service+0x1c8>)
   106ac:	f640 0068 	movw	r0, #2152	; 0x868
   106b0:	fb00 7106 	mla	r1, r0, r6, r7
   106b4:	f8d1 0824 	ldr.w	r0, [r1, #2084]	; 0x824
   106b8:	2800      	cmp	r0, #0
   106ba:	f000 80bf 	beq.w	1083c <am_hal_mspi_interrupt_service+0x1bc>
        {
            ui32Status = am_hal_cmdq_get_status(pCQ->pCmdQHdl, &status);
   106be:	a902      	add	r1, sp, #8
   106c0:	f001 f896 	bl	117f0 <am_hal_cmdq_get_status>

            if (AM_HAL_STATUS_SUCCESS == ui32Status)
   106c4:	2800      	cmp	r0, #0
   106c6:	f040 80b0 	bne.w	1082a <am_hal_mspi_interrupt_service+0x1aa>
                    pMSPIState->ui32LastIdxProcessed++;
                    pMSPIState->ui32NumCQEntries--;
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
                    if ( pMSPIState->pfnCallback[index] != NULL )
                    {
                        pMSPIState->pfnCallback[index](pMSPIState->pCallbackCtxt[index], AM_HAL_STATUS_SUCCESS);
   106ca:	9001      	str	r0, [sp, #4]
   106cc:	69a3      	ldr	r3, [r4, #24]
   106ce:	f8dd 9008 	ldr.w	r9, [sp, #8]
   106d2:	69e1      	ldr	r1, [r4, #28]
   106d4:	eba9 0503 	sub.w	r5, r9, r3
   106d8:	f015 0003 	ands.w	r0, r5, #3
   106dc:	d023      	beq.n	10726 <am_hal_mspi_interrupt_service+0xa6>
                    pMSPIState->ui32LastIdxProcessed++;
   106de:	3301      	adds	r3, #1
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   106e0:	b2da      	uxtb	r2, r3
                    if ( pMSPIState->pfnCallback[index] != NULL )
   106e2:	eb04 0882 	add.w	r8, r4, r2, lsl #2
                    pMSPIState->ui32NumCQEntries--;
   106e6:	3901      	subs	r1, #1
                    if ( pMSPIState->pfnCallback[index] != NULL )
   106e8:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
                    pMSPIState->ui32LastIdxProcessed++;
   106ec:	61a3      	str	r3, [r4, #24]
                    pMSPIState->ui32NumCQEntries--;
   106ee:	61e1      	str	r1, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   106f0:	2d00      	cmp	r5, #0
   106f2:	d14d      	bne.n	10790 <am_hal_mspi_interrupt_service+0x110>
   106f4:	2801      	cmp	r0, #1
   106f6:	d016      	beq.n	10726 <am_hal_mspi_interrupt_service+0xa6>
   106f8:	2802      	cmp	r0, #2
   106fa:	d00a      	beq.n	10712 <am_hal_mspi_interrupt_service+0x92>
                    pMSPIState->ui32LastIdxProcessed++;
   106fc:	3301      	adds	r3, #1
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   106fe:	b2da      	uxtb	r2, r3
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10700:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
                    pMSPIState->ui32NumCQEntries--;
   10704:	3901      	subs	r1, #1
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10706:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
                    pMSPIState->ui32LastIdxProcessed++;
   1070a:	61a3      	str	r3, [r4, #24]
                    pMSPIState->ui32NumCQEntries--;
   1070c:	61e1      	str	r1, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1070e:	2d00      	cmp	r5, #0
   10710:	d13e      	bne.n	10790 <am_hal_mspi_interrupt_service+0x110>
                    pMSPIState->ui32LastIdxProcessed++;
   10712:	3301      	adds	r3, #1
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   10714:	b2da      	uxtb	r2, r3
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10716:	eb04 0b82 	add.w	fp, r4, r2, lsl #2
                    pMSPIState->ui32NumCQEntries--;
   1071a:	3901      	subs	r1, #1
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1071c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
                    pMSPIState->ui32LastIdxProcessed++;
   10720:	61a3      	str	r3, [r4, #24]
                    pMSPIState->ui32NumCQEntries--;
   10722:	61e1      	str	r1, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10724:	bba5      	cbnz	r5, 10790 <am_hal_mspi_interrupt_service+0x110>
   10726:	46b3      	mov	fp, r6
                    pMSPIState->ui32LastIdxProcessed++;
   10728:	1c58      	adds	r0, r3, #1
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   1072a:	b2c2      	uxtb	r2, r0
                    pMSPIState->ui32NumCQEntries--;
   1072c:	1e4e      	subs	r6, r1, #1
                while (pMSPIState->ui32LastIdxProcessed != status.lastIdxProcessed)
   1072e:	454b      	cmp	r3, r9
                    pMSPIState->ui32LastIdxProcessed++;
   10730:	f100 0e01 	add.w	lr, r0, #1
   10734:	f103 0c03 	add.w	ip, r3, #3
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
                    pMSPIState->ui32NumCQEntries--;
   1073c:	f106 38ff 	add.w	r8, r6, #4294967295
   10740:	f1a1 0a03 	sub.w	sl, r1, #3
                while (pMSPIState->ui32LastIdxProcessed != status.lastIdxProcessed)
   10744:	d02e      	beq.n	107a4 <am_hal_mspi_interrupt_service+0x124>
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10746:	6a6d      	ldr	r5, [r5, #36]	; 0x24
                    pMSPIState->ui32LastIdxProcessed++;
   10748:	61a0      	str	r0, [r4, #24]
   1074a:	3304      	adds	r3, #4
                    pMSPIState->ui32NumCQEntries--;
   1074c:	3904      	subs	r1, #4
   1074e:	61e6      	str	r6, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10750:	b9ed      	cbnz	r5, 1078e <am_hal_mspi_interrupt_service+0x10e>
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   10752:	fa5f f28e 	uxtb.w	r2, lr
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10756:	eb04 0582 	add.w	r5, r4, r2, lsl #2
                    pMSPIState->ui32LastIdxProcessed++;
   1075a:	f8c4 e018 	str.w	lr, [r4, #24]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1075e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
                    pMSPIState->ui32NumCQEntries--;
   10760:	f8c4 801c 	str.w	r8, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10764:	b99d      	cbnz	r5, 1078e <am_hal_mspi_interrupt_service+0x10e>
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   10766:	fa5f f28c 	uxtb.w	r2, ip
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1076a:	eb04 0882 	add.w	r8, r4, r2, lsl #2
                    pMSPIState->ui32LastIdxProcessed++;
   1076e:	f8c4 c018 	str.w	ip, [r4, #24]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10772:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
                    pMSPIState->ui32NumCQEntries--;
   10776:	f8c4 a01c 	str.w	sl, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1077a:	b945      	cbnz	r5, 1078e <am_hal_mspi_interrupt_service+0x10e>
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   1077c:	b2da      	uxtb	r2, r3
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1077e:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
                    pMSPIState->ui32LastIdxProcessed++;
   10782:	61a3      	str	r3, [r4, #24]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   10784:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
                    pMSPIState->ui32NumCQEntries--;
   10788:	61e1      	str	r1, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   1078a:	2d00      	cmp	r5, #0
   1078c:	d0cc      	beq.n	10728 <am_hal_mspi_interrupt_service+0xa8>
   1078e:	465e      	mov	r6, fp
   10790:	eb04 0b82 	add.w	fp, r4, r2, lsl #2
                        pMSPIState->pfnCallback[index](pMSPIState->pCallbackCtxt[index], AM_HAL_STATUS_SUCCESS);
   10794:	2100      	movs	r1, #0
   10796:	f8db 0424 	ldr.w	r0, [fp, #1060]	; 0x424
   1079a:	47a8      	blx	r5
                        pMSPIState->pfnCallback[index] = NULL;
   1079c:	9801      	ldr	r0, [sp, #4]
   1079e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   107a2:	e793      	b.n	106cc <am_hal_mspi_interrupt_service+0x4c>
                }

                //
                // Process one extra callback if there was an error.
                //
                if ( (ui32IntStatus & AM_HAL_MSPI_INT_ERR) || (status.bErr) )
   107a4:	9a00      	ldr	r2, [sp, #0]
   107a6:	f412 5fc4 	tst.w	r2, #6272	; 0x1880
   107aa:	d102      	bne.n	107b2 <am_hal_mspi_interrupt_service+0x132>
   107ac:	f89d 0016 	ldrb.w	r0, [sp, #22]
   107b0:	b388      	cbz	r0, 10816 <am_hal_mspi_interrupt_service+0x196>
                {
                    pMSPIState->ui32LastIdxProcessed++;
   107b2:	3301      	adds	r3, #1
                    pMSPIState->ui32NumCQEntries--;
                    index = pMSPIState->ui32LastIdxProcessed & (AM_HAL_MSPI_MAX_CQ_ENTRIES - 1);
   107b4:	fa5f fe83 	uxtb.w	lr, r3
   107b8:	eb04 098e 	add.w	r9, r4, lr, lsl #2
                    pMSPIState->ui32NumCQEntries--;
   107bc:	3901      	subs	r1, #1
                    pMSPIState->ui32LastIdxProcessed++;
   107be:	61a3      	str	r3, [r4, #24]
                    pMSPIState->ui32NumCQEntries--;
   107c0:	61e1      	str	r1, [r4, #28]
                    if ( pMSPIState->pfnCallback[index] != NULL )
   107c2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   107c6:	b133      	cbz	r3, 107d6 <am_hal_mspi_interrupt_service+0x156>
                    {
                        pMSPIState->pfnCallback[index](pMSPIState->pCallbackCtxt[index], AM_HAL_STATUS_FAIL);
   107c8:	2101      	movs	r1, #1
   107ca:	f8d9 0424 	ldr.w	r0, [r9, #1060]	; 0x424
                        pMSPIState->pfnCallback[index] = NULL;
   107ce:	2500      	movs	r5, #0
                        pMSPIState->pfnCallback[index](pMSPIState->pCallbackCtxt[index], AM_HAL_STATUS_FAIL);
   107d0:	4798      	blx	r3
                        pMSPIState->pfnCallback[index] = NULL;
   107d2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
                    }
                    // Disable DMA
#if AM_CMSIS_REGS
                    MSPIn(ui32Module)->DMACFG_b.DMAEN = 0;
   107d6:	4e1d      	ldr	r6, [pc, #116]	; (1084c <am_hal_mspi_interrupt_service+0x1cc>)
   107d8:	f8d6 2250 	ldr.w	r2, [r6, #592]	; 0x250
   107dc:	f36f 0201 	bfc	r2, #0, #2
   107e0:	f8c6 2250 	str.w	r2, [r6, #592]	; 0x250

                    // Must reset xfer block
                    MSPIn(ui32Module)->MSPICFG_b.IPRSTN = 0;  // in reset
   107e4:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
   107e8:	f36f 709e 	bfc	r0, #30, #1
   107ec:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
                    MSPIn(ui32Module)->MSPICFG_b.IPRSTN = 1;  // back out -- clears current transfer
   107f0:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
   107f4:	f041 4380 	orr.w	r3, r1, #1073741824	; 0x40000000
   107f8:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
                    AM_BFWn(MSPI, ui32Module, MSPICFG, IPRSTN, 1);  // back out -- clears current transfer

                    // Clear the CQ error.
                    AM_REGn(MSPI, ui32Module, CQSTAT) |= AM_REG_MSPI_CQSTAT_CQERR(0);
#endif // AM_CMSIS_REGS
                    am_hal_cmdq_error_resume(pCQ->pCmdQHdl);
   107fc:	f640 0568 	movw	r5, #2152	; 0x868
                    MSPIn(ui32Module)->CQSTAT |= _VAL2FLD(MSPI_CQSTAT_CQERR, 0);
   10800:	f8d6 22ac 	ldr.w	r2, [r6, #684]	; 0x2ac
   10804:	f8c6 22ac 	str.w	r2, [r6, #684]	; 0x2ac
                    am_hal_cmdq_error_resume(pCQ->pCmdQHdl);
   10808:	fb05 7c0b 	mla	ip, r5, fp, r7
   1080c:	f8dc 0824 	ldr.w	r0, [ip, #2084]	; 0x824
   10810:	f001 f876 	bl	11900 <am_hal_cmdq_error_resume>
   10814:	69e1      	ldr	r1, [r4, #28]
                }
                if (pMSPIState->ui32NumCQEntries == 0)
   10816:	b989      	cbnz	r1, 1083c <am_hal_mspi_interrupt_service+0x1bc>
    return am_hal_cmdq_disable(g_MSPIState[ui32Module].CQ.pCmdQHdl);
   10818:	6866      	ldr	r6, [r4, #4]
   1081a:	f640 0068 	movw	r0, #2152	; 0x868
   1081e:	fb00 7706 	mla	r7, r0, r6, r7
   10822:	f8d7 0824 	ldr.w	r0, [r7, #2084]	; 0x824
   10826:	f000 ffc7 	bl	117b8 <am_hal_cmdq_disable>
        }
#endif // AM_CMSIS_REGS

#endif // !MSPI_USE_CQ

        if (pMSPIState->ui32NumCQEntries == 0)
   1082a:	69e4      	ldr	r4, [r4, #28]
   1082c:	b934      	cbnz	r4, 1083c <am_hal_mspi_interrupt_service+0x1bc>
        {
            // Disable DMA
#if AM_CMSIS_REGS
            MSPIn(ui32Module)->DMACFG_b.DMAEN = 0;
   1082e:	4907      	ldr	r1, [pc, #28]	; (1084c <am_hal_mspi_interrupt_service+0x1cc>)
   10830:	f8d1 3250 	ldr.w	r3, [r1, #592]	; 0x250
   10834:	f364 0301 	bfi	r3, r4, #0, #2
   10838:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

  //
  // Return the status.
  //
  return AM_HAL_STATUS_SUCCESS;
   1083c:	2000      	movs	r0, #0
}
   1083e:	b007      	add	sp, #28
   10840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10844:	01bebebe 	.word	0x01bebebe
   10848:	10006e60 	.word	0x10006e60
   1084c:	50014000 	.word	0x50014000

00010850 <am_hal_mspi_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10850:	b150      	cbz	r0, 10868 <am_hal_mspi_power_control+0x18>
{
   10852:	b510      	push	{r4, lr}
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10854:	6803      	ldr	r3, [r0, #0]
   10856:	4c50      	ldr	r4, [pc, #320]	; (10998 <am_hal_mspi_power_control+0x148>)
   10858:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   1085c:	45a4      	cmp	ip, r4
{
   1085e:	b082      	sub	sp, #8
    if (!AM_HAL_MSPI_CHK_HANDLE(pHandle))
   10860:	d004      	beq.n	1086c <am_hal_mspi_power_control+0x1c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   10862:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
   10864:	b002      	add	sp, #8
   10866:	bd10      	pop	{r4, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
   10868:	2002      	movs	r0, #2
   1086a:	4770      	bx	lr
   1086c:	4604      	mov	r4, r0
    switch (ePowerState)
   1086e:	2900      	cmp	r1, #0
   10870:	d044      	beq.n	108fc <am_hal_mspi_power_control+0xac>
   10872:	2902      	cmp	r1, #2
   10874:	d840      	bhi.n	108f8 <am_hal_mspi_power_control+0xa8>
            if (bRetainState)
   10876:	b3d2      	cbz	r2, 108ee <am_hal_mspi_power_control+0x9e>
                pMSPIState->registerState.regCFG        = MSPIn(pMSPIState->ui32Module)->CFG;
   10878:	4848      	ldr	r0, [pc, #288]	; (1099c <am_hal_mspi_power_control+0x14c>)
   1087a:	6842      	ldr	r2, [r0, #4]
   1087c:	f8c4 2830 	str.w	r2, [r4, #2096]	; 0x830
                pMSPIState->registerState.regMSPICFG    = MSPIn(pMSPIState->ui32Module)->MSPICFG;
   10880:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10884:	f8c4 1834 	str.w	r1, [r4, #2100]	; 0x834
                pMSPIState->registerState.regPADCFG     = MSPIn(pMSPIState->ui32Module)->PADCFG;
   10888:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1088c:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
                pMSPIState->registerState.regPADOUTEN   = MSPIn(pMSPIState->ui32Module)->PADOUTEN;
   10890:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
   10894:	f8c4 283c 	str.w	r2, [r4, #2108]	; 0x83c
                pMSPIState->registerState.regFLASH      = MSPIn(pMSPIState->ui32Module)->FLASH;
   10898:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
   1089c:	f8c4 1840 	str.w	r1, [r4, #2112]	; 0x840
                pMSPIState->registerState.regSCRAMBLING = MSPIn(pMSPIState->ui32Module)->SCRAMBLING;
   108a0:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   108a4:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
                pMSPIState->registerState.regCQADDR     = MSPIn(pMSPIState->ui32Module)->CQADDR;
   108a8:	f8d0 22a8 	ldr.w	r2, [r0, #680]	; 0x2a8
   108ac:	f8c4 284c 	str.w	r2, [r4, #2124]	; 0x84c
                pMSPIState->registerState.regCQPAUSE    = MSPIn(pMSPIState->ui32Module)->CQPAUSE;
   108b0:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
   108b4:	f8c4 1850 	str.w	r1, [r4, #2128]	; 0x850
                pMSPIState->registerState.regCQCURIDX   = MSPIn(pMSPIState->ui32Module)->CQCURIDX;
   108b8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
   108bc:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
                pMSPIState->registerState.regCQENDIDX   = MSPIn(pMSPIState->ui32Module)->CQENDIDX;
   108c0:	f8d0 22c4 	ldr.w	r2, [r0, #708]	; 0x2c4
   108c4:	f8c4 2858 	str.w	r2, [r4, #2136]	; 0x858
                pMSPIState->registerState.regINTEN      = MSPIn(pMSPIState->ui32Module)->INTEN;
   108c8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   108cc:	f8c4 185c 	str.w	r1, [r4, #2140]	; 0x85c
                pMSPIState->registerState.regDMABCOUNT  = MSPIn(pMSPIState->ui32Module)->DMABCOUNT;
   108d0:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
   108d4:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
                pMSPIState->registerState.regDMATHRESH  = MSPIn(pMSPIState->ui32Module)->DMATHRESH;
   108d8:	f8d0 2278 	ldr.w	r2, [r0, #632]	; 0x278
   108dc:	f8c4 2864 	str.w	r2, [r4, #2148]	; 0x864
                pMSPIState->registerState.regCQCFG      = MSPIn(pMSPIState->ui32Module)->CQCFG;
   108e0:	f8d0 02a0 	ldr.w	r0, [r0, #672]	; 0x2a0
   108e4:	f8c4 0848 	str.w	r0, [r4, #2120]	; 0x848
                pMSPIState->registerState.bValid        = true;
   108e8:	2101      	movs	r1, #1
   108ea:	f884 182c 	strb.w	r1, [r4, #2092]	; 0x82c
            am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_MSPI));
   108ee:	200c      	movs	r0, #12
   108f0:	f000 f880 	bl	109f4 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   108f4:	2000      	movs	r0, #0
            break;
   108f6:	e7b5      	b.n	10864 <am_hal_mspi_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
   108f8:	2006      	movs	r0, #6
   108fa:	e7b3      	b.n	10864 <am_hal_mspi_power_control+0x14>
            if (bRetainState && !pMSPIState->registerState.bValid)
   108fc:	b122      	cbz	r2, 10908 <am_hal_mspi_power_control+0xb8>
   108fe:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
   10902:	b93b      	cbnz	r3, 10914 <am_hal_mspi_power_control+0xc4>
                return AM_HAL_STATUS_INVALID_OPERATION;
   10904:	2007      	movs	r0, #7
   10906:	e7ad      	b.n	10864 <am_hal_mspi_power_control+0x14>
            am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_MSPI));
   10908:	200c      	movs	r0, #12
   1090a:	9201      	str	r2, [sp, #4]
   1090c:	f000 f848 	bl	109a0 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
   10910:	9801      	ldr	r0, [sp, #4]
   10912:	e7a7      	b.n	10864 <am_hal_mspi_power_control+0x14>
            am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_MSPI));
   10914:	200c      	movs	r0, #12
   10916:	9101      	str	r1, [sp, #4]
   10918:	f000 f842 	bl	109a0 <am_hal_pwrctrl_periph_enable>
                MSPIn(pMSPIState->ui32Module)->CFG        = pMSPIState->registerState.regCFG;
   1091c:	491f      	ldr	r1, [pc, #124]	; (1099c <am_hal_mspi_power_control+0x14c>)
   1091e:	f8d4 2830 	ldr.w	r2, [r4, #2096]	; 0x830
   10922:	604a      	str	r2, [r1, #4]
                MSPIn(pMSPIState->ui32Module)->MSPICFG    = pMSPIState->registerState.regMSPICFG;
   10924:	f8d4 0834 	ldr.w	r0, [r4, #2100]	; 0x834
   10928:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
                MSPIn(pMSPIState->ui32Module)->PADCFG     = pMSPIState->registerState.regPADCFG;
   1092c:	f8d4 3838 	ldr.w	r3, [r4, #2104]	; 0x838
   10930:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
                MSPIn(pMSPIState->ui32Module)->PADOUTEN   = pMSPIState->registerState.regPADOUTEN;
   10934:	f8d4 283c 	ldr.w	r2, [r4, #2108]	; 0x83c
   10938:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
                MSPIn(pMSPIState->ui32Module)->FLASH      = pMSPIState->registerState.regFLASH;
   1093c:	f8d4 0840 	ldr.w	r0, [r4, #2112]	; 0x840
   10940:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
                MSPIn(pMSPIState->ui32Module)->SCRAMBLING = pMSPIState->registerState.regSCRAMBLING;
   10944:	f8d4 3844 	ldr.w	r3, [r4, #2116]	; 0x844
   10948:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
                MSPIn(pMSPIState->ui32Module)->CQCFG      = pMSPIState->registerState.regCQCFG;
   1094c:	f8d4 2848 	ldr.w	r2, [r4, #2120]	; 0x848
   10950:	f8c1 22a0 	str.w	r2, [r1, #672]	; 0x2a0
                MSPIn(pMSPIState->ui32Module)->CQADDR     = pMSPIState->registerState.regCQADDR;
   10954:	f8d4 084c 	ldr.w	r0, [r4, #2124]	; 0x84c
   10958:	f8c1 02a8 	str.w	r0, [r1, #680]	; 0x2a8
                MSPIn(pMSPIState->ui32Module)->CQPAUSE    = pMSPIState->registerState.regCQPAUSE;
   1095c:	f8d4 3850 	ldr.w	r3, [r4, #2128]	; 0x850
   10960:	f8c1 32b8 	str.w	r3, [r1, #696]	; 0x2b8
                MSPIn(pMSPIState->ui32Module)->CQCURIDX   = pMSPIState->registerState.regCQCURIDX;
   10964:	f8d4 2854 	ldr.w	r2, [r4, #2132]	; 0x854
   10968:	f8c1 22c0 	str.w	r2, [r1, #704]	; 0x2c0
                MSPIn(pMSPIState->ui32Module)->CQENDIDX   = pMSPIState->registerState.regCQENDIDX;
   1096c:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
   10970:	f8c1 02c4 	str.w	r0, [r1, #708]	; 0x2c4
                MSPIn(pMSPIState->ui32Module)->INTEN      = pMSPIState->registerState.regINTEN;
   10974:	f8d4 385c 	ldr.w	r3, [r4, #2140]	; 0x85c
   10978:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
                MSPIn(pMSPIState->ui32Module)->DMABCOUNT  = pMSPIState->registerState.regDMABCOUNT;
   1097c:	f8d4 2860 	ldr.w	r2, [r4, #2144]	; 0x860
   10980:	f8c1 2264 	str.w	r2, [r1, #612]	; 0x264
                MSPIn(pMSPIState->ui32Module)->DMATHRESH  = pMSPIState->registerState.regDMATHRESH;
   10984:	f8d4 0864 	ldr.w	r0, [r4, #2148]	; 0x864
   10988:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    return AM_HAL_STATUS_SUCCESS;
   1098c:	9901      	ldr	r1, [sp, #4]
                pMSPIState->registerState.bValid = false;
   1098e:	f884 182c 	strb.w	r1, [r4, #2092]	; 0x82c
    return AM_HAL_STATUS_SUCCESS;
   10992:	4608      	mov	r0, r1
   10994:	e766      	b.n	10864 <am_hal_mspi_power_control+0x14>
   10996:	bf00      	nop
   10998:	01bebebe 	.word	0x01bebebe
   1099c:	50014000 	.word	0x50014000

000109a0 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
   109a0:	b570      	push	{r4, r5, r6, lr}
   109a2:	b082      	sub	sp, #8
   109a4:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
   109a6:	f7fe fbe9 	bl	f17c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   109aa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   109ae:	008c      	lsls	r4, r1, #2
   109b0:	4e0e      	ldr	r6, [pc, #56]	; (109ec <am_hal_pwrctrl_periph_enable+0x4c>)
   109b2:	4d0f      	ldr	r5, [pc, #60]	; (109f0 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
   109b4:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   109b6:	592a      	ldr	r2, [r5, r4]
   109b8:	68b3      	ldr	r3, [r6, #8]
   109ba:	4313      	orrs	r3, r2
   109bc:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
   109be:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   109c0:	442c      	add	r4, r5
    AM_CRITICAL_END
   109c2:	f7fe fbdf 	bl	f184 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   109c6:	2077      	movs	r0, #119	; 0x77
   109c8:	f7fe f962 	bl	ec90 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   109cc:	69b0      	ldr	r0, [r6, #24]
   109ce:	6864      	ldr	r4, [r4, #4]
   109d0:	4220      	tst	r0, r4
   109d2:	d103      	bne.n	109dc <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   109d4:	2077      	movs	r0, #119	; 0x77
   109d6:	f7fe f95b 	bl	ec90 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   109da:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
   109dc:	4903      	ldr	r1, [pc, #12]	; (109ec <am_hal_pwrctrl_periph_enable+0x4c>)
   109de:	698d      	ldr	r5, [r1, #24]
   109e0:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
   109e2:	bf0c      	ite	eq
   109e4:	2001      	moveq	r0, #1
   109e6:	2000      	movne	r0, #0
   109e8:	b002      	add	sp, #8
   109ea:	bd70      	pop	{r4, r5, r6, pc}
   109ec:	40021000 	.word	0x40021000
   109f0:	0001229c 	.word	0x0001229c

000109f4 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   109f4:	b570      	push	{r4, r5, r6, lr}
   109f6:	b082      	sub	sp, #8
   109f8:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
   109fa:	f7fe fbbf 	bl	f17c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   109fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   10a02:	008c      	lsls	r4, r1, #2
   10a04:	4e0f      	ldr	r6, [pc, #60]	; (10a44 <am_hal_pwrctrl_periph_disable+0x50>)
   10a06:	4d10      	ldr	r5, [pc, #64]	; (10a48 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
   10a08:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   10a0a:	68b3      	ldr	r3, [r6, #8]
   10a0c:	592a      	ldr	r2, [r5, r4]
   10a0e:	ea23 0002 	bic.w	r0, r3, r2
   10a12:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
   10a14:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   10a16:	442c      	add	r4, r5
    AM_CRITICAL_END
   10a18:	f7fe fbb4 	bl	f184 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   10a1c:	2077      	movs	r0, #119	; 0x77
   10a1e:	f7fe f937 	bl	ec90 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   10a22:	69b1      	ldr	r1, [r6, #24]
   10a24:	6864      	ldr	r4, [r4, #4]
   10a26:	4221      	tst	r1, r4
   10a28:	d003      	beq.n	10a32 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   10a2a:	2077      	movs	r0, #119	; 0x77
   10a2c:	f7fe f930 	bl	ec90 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   10a30:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   10a32:	4d04      	ldr	r5, [pc, #16]	; (10a44 <am_hal_pwrctrl_periph_disable+0x50>)
   10a34:	69ae      	ldr	r6, [r5, #24]
   10a36:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
   10a38:	bf14      	ite	ne
   10a3a:	2001      	movne	r0, #1
   10a3c:	2000      	moveq	r0, #0
   10a3e:	b002      	add	sp, #8
   10a40:	bd70      	pop	{r4, r5, r6, pc}
   10a42:	bf00      	nop
   10a44:	40021000 	.word	0x40021000
   10a48:	0001229c 	.word	0x0001229c

00010a4c <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
   10a4c:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   10a4e:	4c1b      	ldr	r4, [pc, #108]	; (10abc <am_hal_pwrctrl_low_power_init+0x70>)
   10a50:	69a3      	ldr	r3, [r4, #24]
   10a52:	05db      	lsls	r3, r3, #23
{
   10a54:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   10a56:	d502      	bpl.n	10a5e <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
   10a58:	2000      	movs	r0, #0
}
   10a5a:	b003      	add	sp, #12
   10a5c:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   10a5e:	4d18      	ldr	r5, [pc, #96]	; (10ac0 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
   10a60:	4918      	ldr	r1, [pc, #96]	; (10ac4 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   10a62:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
   10a64:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   10a66:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
   10a68:	461a      	mov	r2, r3
   10a6a:	9000      	str	r0, [sp, #0]
   10a6c:	f242 7010 	movw	r0, #10000	; 0x2710
   10a70:	f7fe f912 	bl	ec98 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10a74:	b110      	cbz	r0, 10a7c <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
   10a76:	2004      	movs	r0, #4
}
   10a78:	b003      	add	sp, #12
   10a7a:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
   10a7c:	6821      	ldr	r1, [r4, #0]
   10a7e:	f041 0201 	orr.w	r2, r1, #1
   10a82:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
   10a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a86:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   10a8a:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
   10a8c:	68ec      	ldr	r4, [r5, #12]
   10a8e:	b2e2      	uxtb	r2, r4
   10a90:	2a11      	cmp	r2, #17
   10a92:	d1e1      	bne.n	10a58 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
   10a94:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   10a98:	f360 5356 	bfi	r3, r0, #21, #2
   10a9c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
   10aa0:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   10aa4:	240f      	movs	r4, #15
   10aa6:	f364 118b 	bfi	r1, r4, #6, #6
   10aaa:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
   10aae:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
   10ab2:	f364 0205 	bfi	r2, r4, #0, #6
   10ab6:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
   10aba:	e7ce      	b.n	10a5a <am_hal_pwrctrl_low_power_init+0xe>
   10abc:	40021000 	.word	0x40021000
   10ac0:	40020000 	.word	0x40020000
   10ac4:	40020018 	.word	0x40020018

00010ac8 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
   10ac8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
   10acc:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
   10ace:	68d3      	ldr	r3, [r2, #12]
   10ad0:	bf0c      	ite	eq
   10ad2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
   10ad6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
   10ada:	60d3      	str	r3, [r2, #12]
   10adc:	4770      	bx	lr
   10ade:	bf00      	nop

00010ae0 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
   10ae0:	4a03      	ldr	r2, [pc, #12]	; (10af0 <am_hal_rtc_osc_disable+0x10>)
   10ae2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   10ae6:	f043 0010 	orr.w	r0, r3, #16
   10aea:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
   10aee:	4770      	bx	lr
   10af0:	40004200 	.word	0x40004200

00010af4 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   10af4:	2801      	cmp	r0, #1
   10af6:	d901      	bls.n	10afc <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
   10af8:	2005      	movs	r0, #5
   10afa:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
   10afc:	b169      	cbz	r1, 10b1a <am_hal_uart_initialize+0x26>
{
   10afe:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   10b00:	2264      	movs	r2, #100	; 0x64
   10b02:	4e0e      	ldr	r6, [pc, #56]	; (10b3c <am_hal_uart_initialize+0x48>)
   10b04:	fb02 f200 	mul.w	r2, r2, r0
   10b08:	18b4      	adds	r4, r6, r2
   10b0a:	4603      	mov	r3, r0
   10b0c:	78e0      	ldrb	r0, [r4, #3]
   10b0e:	f3c0 0700 	ubfx	r7, r0, #0, #1
   10b12:	b2fd      	uxtb	r5, r7
   10b14:	b11d      	cbz	r5, 10b1e <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
   10b16:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
   10b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   10b1a:	2006      	movs	r0, #6
   10b1c:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   10b1e:	f040 0001 	orr.w	r0, r0, #1
   10b22:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   10b24:	58b0      	ldr	r0, [r6, r2]
   10b26:	f8df e018 	ldr.w	lr, [pc, #24]	; 10b40 <am_hal_uart_initialize+0x4c>
   10b2a:	f36e 0017 	bfi	r0, lr, #0, #24
   10b2e:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   10b30:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   10b32:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   10b34:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
   10b36:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   10b38:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   10b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b3c:	100076c8 	.word	0x100076c8
   10b40:	00ea9e06 	.word	0x00ea9e06

00010b44 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
   10b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10b48:	6804      	ldr	r4, [r0, #0]
   10b4a:	4b36      	ldr	r3, [pc, #216]	; (10c24 <am_hal_uart_power_control+0xe0>)
   10b4c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   10b50:	429c      	cmp	r4, r3
{
   10b52:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10b54:	d003      	beq.n	10b5e <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   10b56:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
   10b58:	b004      	add	sp, #16
   10b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
   10b5e:	6a47      	ldr	r7, [r0, #36]	; 0x24
   10b60:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
   10b62:	f107 0008 	add.w	r0, r7, #8
   10b66:	460e      	mov	r6, r1
   10b68:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
   10b6c:	b181      	cbz	r1, 10b90 <am_hal_uart_power_control+0x4c>
   10b6e:	2902      	cmp	r1, #2
   10b70:	d80c      	bhi.n	10b8c <am_hal_uart_power_control+0x48>
            if (bRetainState)
   10b72:	b992      	cbnz	r2, 10b9a <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
   10b74:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   10b78:	341c      	adds	r4, #28
   10b7a:	0325      	lsls	r5, r4, #12
   10b7c:	f04f 31ff 	mov.w	r1, #4294967295
   10b80:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   10b82:	4640      	mov	r0, r8
   10b84:	f7ff ff36 	bl	109f4 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   10b88:	2000      	movs	r0, #0
            break;
   10b8a:	e7e5      	b.n	10b58 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
   10b8c:	2006      	movs	r0, #6
   10b8e:	e7e3      	b.n	10b58 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
   10b90:	b322      	cbz	r2, 10bdc <am_hal_uart_power_control+0x98>
   10b92:	792a      	ldrb	r2, [r5, #4]
   10b94:	bb42      	cbnz	r2, 10be8 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
   10b96:	2007      	movs	r0, #7
   10b98:	e7de      	b.n	10b58 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
   10b9a:	f7fe faef 	bl	f17c <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   10b9e:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
   10ba2:	311c      	adds	r1, #28
   10ba4:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
   10ba6:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   10ba8:	6a3a      	ldr	r2, [r7, #32]
   10baa:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   10bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10bae:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   10bb0:	6abe      	ldr	r6, [r7, #40]	; 0x28
   10bb2:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   10bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10bb6:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   10bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   10bba:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   10bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10bbe:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   10bc0:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   10bc2:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
   10bc4:	2301      	movs	r3, #1
                AM_CRITICAL_END
   10bc6:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
   10bc8:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
   10bca:	f7fe fadb 	bl	f184 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10bce:	682e      	ldr	r6, [r5, #0]
   10bd0:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
   10bd4:	42a0      	cmp	r0, r4
   10bd6:	d1d4      	bne.n	10b82 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
   10bd8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   10bda:	e7cb      	b.n	10b74 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   10bdc:	4640      	mov	r0, r8
   10bde:	9201      	str	r2, [sp, #4]
   10be0:	f7ff fede 	bl	109a0 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
   10be4:	9801      	ldr	r0, [sp, #4]
   10be6:	e7b7      	b.n	10b58 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   10be8:	4640      	mov	r0, r8
   10bea:	f7ff fed9 	bl	109a0 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
   10bee:	f7fe fac5 	bl	f17c <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   10bf2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   10bf6:	331c      	adds	r3, #28
   10bf8:	031f      	lsls	r7, r3, #12
   10bfa:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
   10bfc:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   10bfe:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   10c00:	68e9      	ldr	r1, [r5, #12]
   10c02:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   10c04:	6928      	ldr	r0, [r5, #16]
   10c06:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   10c08:	696a      	ldr	r2, [r5, #20]
   10c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   10c0c:	69ab      	ldr	r3, [r5, #24]
   10c0e:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   10c10:	69ec      	ldr	r4, [r5, #28]
   10c12:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   10c14:	6a29      	ldr	r1, [r5, #32]
   10c16:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
   10c18:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
   10c1a:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
   10c1c:	f7fe fab2 	bl	f184 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   10c20:	4630      	mov	r0, r6
   10c22:	e799      	b.n	10b58 <am_hal_uart_power_control+0x14>
   10c24:	01ea9e06 	.word	0x01ea9e06

00010c28 <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c28:	6803      	ldr	r3, [r0, #0]
   10c2a:	4a69      	ldr	r2, [pc, #420]	; (10dd0 <am_hal_uart_configure+0x1a8>)
   10c2c:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   10c30:	4594      	cmp	ip, r2
   10c32:	d001      	beq.n	10c38 <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
   10c34:	2002      	movs	r0, #2
   10c36:	4770      	bx	lr
{
   10c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
   10c3c:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
   10c3e:	b084      	sub	sp, #16
   10c40:	460d      	mov	r5, r1
   10c42:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   10c44:	f7fe fa9a 	bl	f17c <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
   10c48:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
   10c4c:	311c      	adds	r1, #28
   10c4e:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
   10c50:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
   10c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10c54:	f040 0208 	orr.w	r2, r0, #8
   10c58:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
   10c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10c5c:	f043 0610 	orr.w	r6, r3, #16
   10c60:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
   10c62:	9801      	ldr	r0, [sp, #4]
   10c64:	f7fe fa8e 	bl	f184 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   10c68:	f7fe fa88 	bl	f17c <am_hal_interrupt_master_disable>
   10c6c:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
   10c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   10c70:	f421 7040 	bic.w	r0, r1, #768	; 0x300
   10c74:	f020 0201 	bic.w	r2, r0, #1
   10c78:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
   10c7a:	9802      	ldr	r0, [sp, #8]
   10c7c:	f7fe fa82 	bl	f184 <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   10c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10c82:	f3c3 1802 	ubfx	r8, r3, #4, #3
   10c86:	f108 36ff 	add.w	r6, r8, #4294967295
   10c8a:	2e03      	cmp	r6, #3
   10c8c:	d846      	bhi.n	10d1c <am_hal_uart_configure+0xf4>
   10c8e:	e8df f006 	tbb	[pc, r6]
   10c92:	020e      	.short	0x020e
   10c94:	1114      	.short	0x1114
   10c96:	494f      	ldr	r1, [pc, #316]	; (10dd4 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
   10c98:	484f      	ldr	r0, [pc, #316]	; (10dd8 <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   10c9a:	682a      	ldr	r2, [r5, #0]
   10c9c:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   10c9e:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
   10ca2:	b96b      	cbnz	r3, 10cc0 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   10ca4:	484d      	ldr	r0, [pc, #308]	; (10ddc <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
   10ca6:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
   10ca8:	b004      	add	sp, #16
   10caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   10cae:	494c      	ldr	r1, [pc, #304]	; (10de0 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
   10cb0:	484c      	ldr	r0, [pc, #304]	; (10de4 <am_hal_uart_configure+0x1bc>)
   10cb2:	e7f2      	b.n	10c9a <am_hal_uart_configure+0x72>
   10cb4:	494c      	ldr	r1, [pc, #304]	; (10de8 <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
   10cb6:	484d      	ldr	r0, [pc, #308]	; (10dec <am_hal_uart_configure+0x1c4>)
   10cb8:	e7ef      	b.n	10c9a <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   10cba:	494d      	ldr	r1, [pc, #308]	; (10df0 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
   10cbc:	484d      	ldr	r0, [pc, #308]	; (10df4 <am_hal_uart_configure+0x1cc>)
   10cbe:	e7ec      	b.n	10c9a <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   10cc0:	fbb1 f1f6 	udiv	r1, r1, r6
   10cc4:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   10cc8:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   10cca:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   10cce:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   10cd0:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   10cd4:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   10cd6:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
   10cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10cda:	6929      	ldr	r1, [r5, #16]
   10cdc:	430b      	orrs	r3, r1
   10cde:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
   10ce0:	696a      	ldr	r2, [r5, #20]
   10ce2:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   10ce4:	686e      	ldr	r6, [r5, #4]
   10ce6:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
   10ce8:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   10cea:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
   10cec:	f046 0310 	orr.w	r3, r6, #16
   10cf0:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   10cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   10cf4:	f7fe fa42 	bl	f17c <am_hal_interrupt_master_disable>
   10cf8:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
   10cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10cfc:	f442 7640 	orr.w	r6, r2, #768	; 0x300
   10d00:	f046 0001 	orr.w	r0, r6, #1
   10d04:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
   10d06:	9803      	ldr	r0, [sp, #12]
   10d08:	f7fe fa3c 	bl	f184 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10d0c:	6827      	ldr	r7, [r4, #0]
   10d0e:	4930      	ldr	r1, [pc, #192]	; (10dd0 <am_hal_uart_configure+0x1a8>)
   10d10:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
   10d14:	428e      	cmp	r6, r1
   10d16:	d005      	beq.n	10d24 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
   10d18:	2000      	movs	r0, #0
   10d1a:	e7c5      	b.n	10ca8 <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
   10d1c:	2600      	movs	r6, #0
   10d1e:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   10d20:	4835      	ldr	r0, [pc, #212]	; (10df8 <am_hal_uart_configure+0x1d0>)
   10d22:	e7c1      	b.n	10ca8 <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
   10d24:	69a9      	ldr	r1, [r5, #24]
   10d26:	6a2f      	ldr	r7, [r5, #32]
   10d28:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
   10d2c:	b109      	cbz	r1, 10d32 <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
   10d2e:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
   10d30:	b9f3      	cbnz	r3, 10d70 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   10d32:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10d34:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   10d38:	331c      	adds	r3, #28
   10d3a:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
   10d3c:	f04f 0e00 	mov.w	lr, #0
   10d40:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   10d44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   10d46:	f022 0020 	bic.w	r0, r2, #32
   10d4a:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
   10d4c:	b117      	cbz	r7, 10d54 <am_hal_uart_configure+0x12c>
   10d4e:	f1b8 0f00 	cmp.w	r8, #0
   10d52:	d123      	bne.n	10d9c <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10d54:	6827      	ldr	r7, [r4, #0]
   10d56:	491e      	ldr	r1, [pc, #120]	; (10dd0 <am_hal_uart_configure+0x1a8>)
   10d58:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
   10d5c:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10d5e:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
   10d60:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10d64:	d1d8      	bne.n	10d18 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   10d66:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   10d68:	f024 0350 	bic.w	r3, r4, #80	; 0x50
   10d6c:	63b3      	str	r3, [r6, #56]	; 0x38
   10d6e:	e79b      	b.n	10ca8 <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
   10d70:	2201      	movs	r2, #1
   10d72:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   10d76:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   10d7a:	f000 fdf3 	bl	11964 <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10d7e:	6821      	ldr	r1, [r4, #0]
   10d80:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
   10d84:	42b5      	cmp	r5, r6
   10d86:	d1c7      	bne.n	10d18 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
   10d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10d8a:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
   10d8e:	361c      	adds	r6, #28
   10d90:	0336      	lsls	r6, r6, #12
   10d92:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   10d94:	f042 0020 	orr.w	r0, r2, #32
   10d98:	63b0      	str	r0, [r6, #56]	; 0x38
   10d9a:	e7d7      	b.n	10d4c <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
   10d9c:	2201      	movs	r2, #1
   10d9e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   10da2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   10da6:	4643      	mov	r3, r8
   10da8:	4639      	mov	r1, r7
   10daa:	f000 fddb 	bl	11964 <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10dae:	6826      	ldr	r6, [r4, #0]
   10db0:	4a07      	ldr	r2, [pc, #28]	; (10dd0 <am_hal_uart_configure+0x1a8>)
   10db2:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
   10db6:	4290      	cmp	r0, r2
   10db8:	d1ae      	bne.n	10d18 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
   10dba:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10dbc:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
   10dc0:	311c      	adds	r1, #28
   10dc2:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
   10dc4:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
   10dc6:	6bac      	ldr	r4, [r5, #56]	; 0x38
   10dc8:	f044 0350 	orr.w	r3, r4, #80	; 0x50
   10dcc:	63ab      	str	r3, [r5, #56]	; 0x38
   10dce:	e76b      	b.n	10ca8 <am_hal_uart_configure+0x80>
   10dd0:	01ea9e06 	.word	0x01ea9e06
   10dd4:	2dc6c000 	.word	0x2dc6c000
   10dd8:	00b71b00 	.word	0x00b71b00
   10ddc:	08000003 	.word	0x08000003
   10de0:	5b8d8000 	.word	0x5b8d8000
   10de4:	016e3600 	.word	0x016e3600
   10de8:	0b71b000 	.word	0x0b71b000
   10dec:	002dc6c0 	.word	0x002dc6c0
   10df0:	16e36000 	.word	0x16e36000
   10df4:	005b8d80 	.word	0x005b8d80
   10df8:	08000002 	.word	0x08000002

00010dfc <am_hal_uart_transfer>:
{
   10dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
   10e00:	680e      	ldr	r6, [r1, #0]
{
   10e02:	b091      	sub	sp, #68	; 0x44
   10e04:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
   10e06:	b14e      	cbz	r6, 10e1c <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
   10e08:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
   10e0a:	bf18      	it	ne
   10e0c:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
   10e10:	f000 80f6 	beq.w	11000 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
   10e14:	4658      	mov	r0, fp
   10e16:	b011      	add	sp, #68	; 0x44
   10e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
   10e1c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   10e20:	684c      	ldr	r4, [r1, #4]
   10e22:	9401      	str	r4, [sp, #4]
   10e24:	688d      	ldr	r5, [r1, #8]
   10e26:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
   10e2a:	f1bb 0f00 	cmp.w	fp, #0
   10e2e:	f000 8107 	beq.w	11040 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10e32:	2d00      	cmp	r5, #0
   10e34:	f000 8393 	beq.w	1155e <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10e38:	2800      	cmp	r0, #0
   10e3a:	f000 80df 	beq.w	10ffc <am_hal_uart_transfer+0x200>
   10e3e:	6807      	ldr	r7, [r0, #0]
   10e40:	497e      	ldr	r1, [pc, #504]	; (1103c <am_hal_uart_transfer+0x240>)
   10e42:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
   10e46:	4589      	cmp	r9, r1
   10e48:	d00a      	beq.n	10e60 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
   10e4a:	f1ba 0f00 	cmp.w	sl, #0
   10e4e:	d001      	beq.n	10e54 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
   10e50:	f8ca 6000 	str.w	r6, [sl]
   10e54:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
   10e58:	4658      	mov	r0, fp
   10e5a:	b011      	add	sp, #68	; 0x44
   10e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   10e60:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10e62:	4637      	mov	r7, r6
   10e64:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   10e66:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
   10e68:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
   10e6c:	2a00      	cmp	r2, #0
   10e6e:	f040 822c 	bne.w	112ca <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
   10e72:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
   10e76:	2d00      	cmp	r5, #0
   10e78:	f000 80a1 	beq.w	10fbe <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10e7c:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
   10e80:	341c      	adds	r4, #28
   10e82:	0322      	lsls	r2, r4, #12
   10e84:	6990      	ldr	r0, [r2, #24]
   10e86:	f3c0 1440 	ubfx	r4, r0, #5, #1
   10e8a:	2c00      	cmp	r4, #0
   10e8c:	f040 80a3 	bne.w	10fd6 <am_hal_uart_transfer+0x1da>
   10e90:	1e6b      	subs	r3, r5, #1
   10e92:	f013 0e07 	ands.w	lr, r3, #7
   10e96:	f101 3cff 	add.w	ip, r1, #4294967295
   10e9a:	d048      	beq.n	10f2e <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10e9c:	780c      	ldrb	r4, [r1, #0]
   10e9e:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ea0:	6993      	ldr	r3, [r2, #24]
   10ea2:	069b      	lsls	r3, r3, #26
   10ea4:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ea6:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10eaa:	f100 8085 	bmi.w	10fb8 <am_hal_uart_transfer+0x1bc>
   10eae:	45a6      	cmp	lr, r4
   10eb0:	d03d      	beq.n	10f2e <am_hal_uart_transfer+0x132>
   10eb2:	f1be 0f02 	cmp.w	lr, #2
   10eb6:	d032      	beq.n	10f1e <am_hal_uart_transfer+0x122>
   10eb8:	f1be 0f03 	cmp.w	lr, #3
   10ebc:	d027      	beq.n	10f0e <am_hal_uart_transfer+0x112>
   10ebe:	f1be 0f04 	cmp.w	lr, #4
   10ec2:	d01c      	beq.n	10efe <am_hal_uart_transfer+0x102>
   10ec4:	f1be 0f05 	cmp.w	lr, #5
   10ec8:	d011      	beq.n	10eee <am_hal_uart_transfer+0xf2>
   10eca:	f1be 0f06 	cmp.w	lr, #6
   10ece:	d006      	beq.n	10ede <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ed0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10ed4:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ed6:	6990      	ldr	r0, [r2, #24]
   10ed8:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10eda:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10edc:	d46c      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ede:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   10ee2:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ee4:	6991      	ldr	r1, [r2, #24]
   10ee6:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ee8:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10eec:	d464      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10eee:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
   10ef2:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ef4:	6993      	ldr	r3, [r2, #24]
   10ef6:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ef8:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10efc:	d45c      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10efe:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10f02:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f04:	6990      	ldr	r0, [r2, #24]
   10f06:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f08:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f0c:	d454      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f0e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   10f12:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f14:	6991      	ldr	r1, [r2, #24]
   10f16:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f18:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f1c:	d44c      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f1e:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
   10f22:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f24:	6993      	ldr	r3, [r2, #24]
   10f26:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f28:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f2c:	d444      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f2e:	3401      	adds	r4, #1
   10f30:	f89c 1001 	ldrb.w	r1, [ip, #1]
   10f34:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
   10f36:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f38:	4620      	mov	r0, r4
   10f3a:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
   10f3e:	f000 81c2 	beq.w	112c6 <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f42:	6993      	ldr	r3, [r2, #24]
   10f44:	0699      	lsls	r1, r3, #26
   10f46:	d437      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f48:	f89e 1001 	ldrb.w	r1, [lr, #1]
   10f4c:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f4e:	6993      	ldr	r3, [r2, #24]
   10f50:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f52:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f56:	d42f      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f58:	f89c 4003 	ldrb.w	r4, [ip, #3]
   10f5c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f5e:	6991      	ldr	r1, [r2, #24]
   10f60:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f62:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f66:	d427      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f68:	f89c 3004 	ldrb.w	r3, [ip, #4]
   10f6c:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f6e:	6991      	ldr	r1, [r2, #24]
   10f70:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f72:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f76:	d41f      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f78:	f89c 4005 	ldrb.w	r4, [ip, #5]
   10f7c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f7e:	6993      	ldr	r3, [r2, #24]
   10f80:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f82:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f86:	d417      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f88:	f89c 1006 	ldrb.w	r1, [ip, #6]
   10f8c:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f8e:	6993      	ldr	r3, [r2, #24]
   10f90:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f92:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f96:	d40f      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f98:	f89c 4007 	ldrb.w	r4, [ip, #7]
   10f9c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f9e:	6991      	ldr	r1, [r2, #24]
   10fa0:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10fa2:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10fa6:	d407      	bmi.n	10fb8 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10fa8:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
   10fac:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10fae:	6991      	ldr	r1, [r2, #24]
   10fb0:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10fb2:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10fb6:	d5ba      	bpl.n	10f2e <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
   10fb8:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
   10fba:	4426      	add	r6, r4
        if (ui32RemainingBytes)
   10fbc:	d10b      	bne.n	10fd6 <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
   10fbe:	f1ba 0f00 	cmp.w	sl, #0
   10fc2:	f000 817d 	beq.w	112c0 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
   10fc6:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
   10fca:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
   10fcc:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
   10fd0:	b011      	add	sp, #68	; 0x44
   10fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
   10fd6:	2001      	movs	r0, #1
   10fd8:	f7fd fe5a 	bl	ec90 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
   10fdc:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
   10fe0:	bf18      	it	ne
   10fe2:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10fe4:	45bb      	cmp	fp, r7
   10fe6:	d9ea      	bls.n	10fbe <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10fe8:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
   10fec:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10fee:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
   10ff2:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
   10ff4:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10ff6:	f47f af28 	bne.w	10e4a <am_hal_uart_transfer+0x4e>
   10ffa:	e735      	b.n	10e68 <am_hal_uart_transfer+0x6c>
   10ffc:	4606      	mov	r6, r0
   10ffe:	e724      	b.n	10e4a <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
   11000:	684b      	ldr	r3, [r1, #4]
   11002:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   11006:	688c      	ldr	r4, [r1, #8]
   11008:	690f      	ldr	r7, [r1, #16]
   1100a:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
   1100c:	f1bb 0f00 	cmp.w	fp, #0
   11010:	f000 80c9 	beq.w	111a6 <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   11014:	2c00      	cmp	r4, #0
   11016:	f000 8150 	beq.w	112ba <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1101a:	b130      	cbz	r0, 1102a <am_hal_uart_transfer+0x22e>
   1101c:	6800      	ldr	r0, [r0, #0]
   1101e:	4a07      	ldr	r2, [pc, #28]	; (1103c <am_hal_uart_transfer+0x240>)
   11020:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
   11024:	4291      	cmp	r1, r2
   11026:	f000 8186 	beq.w	11336 <am_hal_uart_transfer+0x53a>
   1102a:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
   1102c:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
   11030:	2f00      	cmp	r7, #0
   11032:	f43f aeef 	beq.w	10e14 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
   11036:	603d      	str	r5, [r7, #0]
   11038:	e6ec      	b.n	10e14 <am_hal_uart_transfer+0x18>
   1103a:	bf00      	nop
   1103c:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11040:	2800      	cmp	r0, #0
   11042:	f43f af07 	beq.w	10e54 <am_hal_uart_transfer+0x58>
   11046:	6807      	ldr	r7, [r0, #0]
   11048:	4cac      	ldr	r4, [pc, #688]	; (112fc <am_hal_uart_transfer+0x500>)
   1104a:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
   1104e:	42a3      	cmp	r3, r4
   11050:	f47f af00 	bne.w	10e54 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
   11054:	f1ba 0f00 	cmp.w	sl, #0
   11058:	d001      	beq.n	1105e <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
   1105a:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
   1105e:	2d00      	cmp	r5, #0
   11060:	f000 812e 	beq.w	112c0 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
   11064:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
   11068:	2c00      	cmp	r4, #0
   1106a:	f040 8290 	bne.w	1158e <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1106e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   11072:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
   11076:	311c      	adds	r1, #28
   11078:	030a      	lsls	r2, r1, #12
   1107a:	6996      	ldr	r6, [r2, #24]
   1107c:	f3c6 1740 	ubfx	r7, r6, #5, #1
   11080:	2f00      	cmp	r7, #0
   11082:	f040 8089 	bne.w	11198 <am_hal_uart_transfer+0x39c>
   11086:	f105 38ff 	add.w	r8, r5, #4294967295
   1108a:	9b01      	ldr	r3, [sp, #4]
   1108c:	f018 0007 	ands.w	r0, r8, #7
   11090:	463c      	mov	r4, r7
   11092:	f103 31ff 	add.w	r1, r3, #4294967295
   11096:	d042      	beq.n	1111e <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
   11098:	781e      	ldrb	r6, [r3, #0]
   1109a:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1109c:	6997      	ldr	r7, [r2, #24]
   1109e:	4619      	mov	r1, r3
   110a0:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   110a2:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110a6:	d477      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
   110a8:	42a0      	cmp	r0, r4
   110aa:	d038      	beq.n	1111e <am_hal_uart_transfer+0x322>
   110ac:	2802      	cmp	r0, #2
   110ae:	d02e      	beq.n	1110e <am_hal_uart_transfer+0x312>
   110b0:	2803      	cmp	r0, #3
   110b2:	d024      	beq.n	110fe <am_hal_uart_transfer+0x302>
   110b4:	2804      	cmp	r0, #4
   110b6:	d01a      	beq.n	110ee <am_hal_uart_transfer+0x2f2>
   110b8:	2805      	cmp	r0, #5
   110ba:	d010      	beq.n	110de <am_hal_uart_transfer+0x2e2>
   110bc:	2806      	cmp	r0, #6
   110be:	d006      	beq.n	110ce <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
   110c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   110c4:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110c6:	6990      	ldr	r0, [r2, #24]
   110c8:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   110ca:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110cc:	d464      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   110ce:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   110d2:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110d4:	6997      	ldr	r7, [r2, #24]
   110d6:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   110d8:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110dc:	d45c      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   110de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   110e2:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110e4:	6990      	ldr	r0, [r2, #24]
   110e6:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   110e8:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110ec:	d454      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   110ee:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   110f2:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110f4:	6997      	ldr	r7, [r2, #24]
   110f6:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   110f8:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   110fc:	d44c      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   110fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11102:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11104:	6990      	ldr	r0, [r2, #24]
   11106:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11108:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1110c:	d444      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   1110e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   11112:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11114:	6997      	ldr	r7, [r2, #24]
   11116:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11118:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1111c:	d43c      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   1111e:	3401      	adds	r4, #1
   11120:	784b      	ldrb	r3, [r1, #1]
   11122:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
   11124:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
   11126:	4623      	mov	r3, r4
   11128:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
   1112c:	d034      	beq.n	11198 <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1112e:	6996      	ldr	r6, [r2, #24]
   11130:	06b6      	lsls	r6, r6, #26
   11132:	d431      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   11134:	7847      	ldrb	r7, [r0, #1]
   11136:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11138:	6990      	ldr	r0, [r2, #24]
   1113a:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   1113c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11140:	d42a      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   11142:	78cc      	ldrb	r4, [r1, #3]
   11144:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11146:	6996      	ldr	r6, [r2, #24]
   11148:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   1114a:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1114e:	d423      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   11150:	790f      	ldrb	r7, [r1, #4]
   11152:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11154:	6990      	ldr	r0, [r2, #24]
   11156:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11158:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1115c:	d41c      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   1115e:	794c      	ldrb	r4, [r1, #5]
   11160:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11162:	6996      	ldr	r6, [r2, #24]
   11164:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11166:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1116a:	d415      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   1116c:	798f      	ldrb	r7, [r1, #6]
   1116e:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11170:	6990      	ldr	r0, [r2, #24]
   11172:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11174:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11178:	d40e      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   1117a:	79cc      	ldrb	r4, [r1, #7]
   1117c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1117e:	6996      	ldr	r6, [r2, #24]
   11180:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11182:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11186:	d407      	bmi.n	11198 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   11188:	f811 7f08 	ldrb.w	r7, [r1, #8]!
   1118c:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1118e:	6990      	ldr	r0, [r2, #24]
   11190:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11192:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11196:	d5c2      	bpl.n	1111e <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
   11198:	f1ba 0f00 	cmp.w	sl, #0
   1119c:	f000 8090 	beq.w	112c0 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
   111a0:	f8ca 4000 	str.w	r4, [sl]
   111a4:	e636      	b.n	10e14 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   111a6:	2800      	cmp	r0, #0
   111a8:	f43f ae54 	beq.w	10e54 <am_hal_uart_transfer+0x58>
   111ac:	6805      	ldr	r5, [r0, #0]
   111ae:	4e53      	ldr	r6, [pc, #332]	; (112fc <am_hal_uart_transfer+0x500>)
   111b0:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
   111b4:	45b4      	cmp	ip, r6
   111b6:	f47f ae4d 	bne.w	10e54 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
   111ba:	b10f      	cbz	r7, 111c0 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
   111bc:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
   111c0:	2c00      	cmp	r4, #0
   111c2:	d07d      	beq.n	112c0 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
   111c4:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
   111c8:	2800      	cmp	r0, #0
   111ca:	f040 8213 	bne.w	115f4 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   111ce:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   111d2:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
   111d6:	311c      	adds	r1, #28
   111d8:	0309      	lsls	r1, r1, #12
   111da:	698a      	ldr	r2, [r1, #24]
   111dc:	f3c2 1500 	ubfx	r5, r2, #4, #1
   111e0:	2d00      	cmp	r5, #0
   111e2:	f040 8287 	bne.w	116f4 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
   111e6:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   111e8:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
   111ec:	f040 81cc 	bne.w	11588 <am_hal_uart_transfer+0x78c>
   111f0:	1e66      	subs	r6, r4, #1
   111f2:	f016 0203 	ands.w	r2, r6, #3
   111f6:	4655      	mov	r5, sl
   111f8:	f109 30ff 	add.w	r0, r9, #4294967295
   111fc:	d02b      	beq.n	11256 <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   111fe:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11202:	698b      	ldr	r3, [r1, #24]
   11204:	06de      	lsls	r6, r3, #27
   11206:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
   11208:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1120c:	f53f af10 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   11210:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11212:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   11216:	f040 81b7 	bne.w	11588 <am_hal_uart_transfer+0x78c>
   1121a:	42aa      	cmp	r2, r5
   1121c:	d01b      	beq.n	11256 <am_hal_uart_transfer+0x45a>
   1121e:	2a02      	cmp	r2, #2
   11220:	d00c      	beq.n	1123c <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11222:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11226:	698e      	ldr	r6, [r1, #24]
   11228:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1122a:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1122e:	f53f aeff 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   11232:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11234:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   11238:	f040 81a6 	bne.w	11588 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1123c:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11240:	698a      	ldr	r2, [r1, #24]
   11242:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11244:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11248:	f53f aef2 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   1124c:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1124e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   11252:	f040 8199 	bne.w	11588 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11256:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
   11258:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
   1125a:	7043      	strb	r3, [r0, #1]
   1125c:	f100 0601 	add.w	r6, r0, #1
   11260:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
   11262:	f43f aee5 	beq.w	11030 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11266:	698a      	ldr	r2, [r1, #24]
   11268:	06d2      	lsls	r2, r2, #27
   1126a:	f53f aee1 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   1126e:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11270:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11274:	f040 8188 	bne.w	11588 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11278:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1127a:	698e      	ldr	r6, [r1, #24]
   1127c:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1127e:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11282:	f53f aed5 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   11286:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11288:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1128c:	f040 817c 	bne.w	11588 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11290:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11292:	698e      	ldr	r6, [r1, #24]
   11294:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11296:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1129a:	f53f aec9 	bmi.w	11030 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   1129e:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   112a0:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   112a4:	f040 8170 	bne.w	11588 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112a8:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112ac:	698e      	ldr	r6, [r1, #24]
   112ae:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   112b0:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112b4:	f53f aebc 	bmi.w	11030 <am_hal_uart_transfer+0x234>
   112b8:	e7c8      	b.n	1124c <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   112ba:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
   112bc:	b107      	cbz	r7, 112c0 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
   112be:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
   112c0:	f04f 0b00 	mov.w	fp, #0
   112c4:	e5a6      	b.n	10e14 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
   112c6:	442e      	add	r6, r5
   112c8:	e679      	b.n	10fbe <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
   112ca:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
   112ce:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
   112d2:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
   112d4:	42ac      	cmp	r4, r5
   112d6:	bf28      	it	cs
   112d8:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   112da:	4622      	mov	r2, r4
   112dc:	9802      	ldr	r0, [sp, #8]
   112de:	f000 fb4d 	bl	1197c <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
   112e2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   112e6:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
   112e8:	f7fd ff48 	bl	f17c <am_hal_interrupt_master_disable>
   112ec:	9903      	ldr	r1, [sp, #12]
   112ee:	9008      	str	r0, [sp, #32]
   112f0:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
   112f4:	321c      	adds	r2, #28
   112f6:	0313      	lsls	r3, r2, #12
   112f8:	9303      	str	r3, [sp, #12]
   112fa:	e010      	b.n	1131e <am_hal_uart_transfer+0x522>
   112fc:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   11300:	f000 fc40 	bl	11b84 <am_hal_queue_item_get>
   11304:	b198      	cbz	r0, 1132e <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   11306:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   1130a:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
   1130e:	331c      	adds	r3, #28
   11310:	0318      	lsls	r0, r3, #12
   11312:	6981      	ldr	r1, [r0, #24]
   11314:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   11316:	bf5c      	itt	pl
   11318:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   1131c:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   1131e:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   11320:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   11322:	699b      	ldr	r3, [r3, #24]
   11324:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   11326:	f04f 0201 	mov.w	r2, #1
   1132a:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   1132c:	d5e8      	bpl.n	11300 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
   1132e:	9808      	ldr	r0, [sp, #32]
   11330:	f7fd ff28 	bl	f184 <am_hal_interrupt_master_set>
   11334:	e640      	b.n	10fb8 <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11336:	2600      	movs	r6, #0
   11338:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   1133a:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1133e:	9101      	str	r1, [sp, #4]
   11340:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   11342:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
   11344:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
   11348:	2800      	cmp	r0, #0
   1134a:	f040 8089 	bne.w	11460 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
   1134e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
   11352:	2c00      	cmp	r4, #0
   11354:	d0b2      	beq.n	112bc <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11356:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
   1135a:	311c      	adds	r1, #28
   1135c:	030a      	lsls	r2, r1, #12
   1135e:	6993      	ldr	r3, [r2, #24]
   11360:	06d8      	lsls	r0, r3, #27
   11362:	d466      	bmi.n	11432 <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
   11364:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11366:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
   1136a:	f040 810d 	bne.w	11588 <am_hal_uart_transfer+0x78c>
   1136e:	f104 3eff 	add.w	lr, r4, #4294967295
   11372:	f01e 0e03 	ands.w	lr, lr, #3
   11376:	f109 30ff 	add.w	r0, r9, #4294967295
   1137a:	d029      	beq.n	113d0 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1137c:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11380:	6991      	ldr	r1, [r2, #24]
   11382:	06c9      	lsls	r1, r1, #27
   11384:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
   11386:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1138a:	d44e      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1138c:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1138e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11392:	f040 80e0 	bne.w	11556 <am_hal_uart_transfer+0x75a>
   11396:	459e      	cmp	lr, r3
   11398:	d01a      	beq.n	113d0 <am_hal_uart_transfer+0x5d4>
   1139a:	f1be 0f02 	cmp.w	lr, #2
   1139e:	d00b      	beq.n	113b8 <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   113a0:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113a4:	6991      	ldr	r1, [r2, #24]
   113a6:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   113a8:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113ac:	d43d      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   113ae:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   113b0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   113b4:	f040 80cf 	bne.w	11556 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   113b8:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113bc:	6991      	ldr	r1, [r2, #24]
   113be:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   113c0:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113c4:	d431      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   113c6:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   113c8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   113cc:	f040 80c3 	bne.w	11556 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   113d0:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
   113d2:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
   113d4:	7041      	strb	r1, [r0, #1]
   113d6:	469e      	mov	lr, r3
   113d8:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
   113dc:	d025      	beq.n	1142a <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113de:	6991      	ldr	r1, [r2, #24]
   113e0:	06c9      	lsls	r1, r1, #27
   113e2:	d422      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   113e4:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   113e6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   113ea:	f040 80b4 	bne.w	11556 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   113ee:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113f2:	6991      	ldr	r1, [r2, #24]
   113f4:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   113f6:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   113fa:	d416      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   113fc:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   113fe:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11402:	f040 80a8 	bne.w	11556 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11406:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11408:	6991      	ldr	r1, [r2, #24]
   1140a:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1140c:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11410:	d40b      	bmi.n	1142a <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11412:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11414:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11418:	f040 809d 	bne.w	11556 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1141c:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11420:	6991      	ldr	r1, [r2, #24]
   11422:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11424:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11428:	d5cd      	bpl.n	113c6 <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
   1142a:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
   1142c:	441d      	add	r5, r3
        if (ui32RemainingBytes)
   1142e:	f43f af45 	beq.w	112bc <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
   11432:	2001      	movs	r0, #1
   11434:	f7fd fc2c 	bl	ec90 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
   11438:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
   1143c:	bf18      	it	ne
   1143e:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   11440:	45b3      	cmp	fp, r6
   11442:	f67f af3b 	bls.w	112bc <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11446:	f8d8 0000 	ldr.w	r0, [r8]
   1144a:	9a01      	ldr	r2, [sp, #4]
   1144c:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
   11450:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
   11452:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11456:	f43f af75 	beq.w	11344 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1145a:	f04f 0b02 	mov.w	fp, #2
   1145e:	e5e7      	b.n	11030 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
   11460:	f7fd fe8c 	bl	f17c <am_hal_interrupt_master_disable>
   11464:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   11468:	9007      	str	r0, [sp, #28]
   1146a:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   1146e:	301c      	adds	r0, #28
    uint32_t i = 0;
   11470:	f8cd a00c 	str.w	sl, [sp, #12]
   11474:	0303      	lsls	r3, r0, #12
   11476:	f10d 0c20 	add.w	ip, sp, #32
   1147a:	2200      	movs	r2, #0
   1147c:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1147e:	699c      	ldr	r4, [r3, #24]
   11480:	06e1      	lsls	r1, r4, #27
   11482:	d45a      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11484:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11486:	f410 6f70 	tst.w	r0, #3840	; 0xf00
   1148a:	d17a      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1148c:	46e6      	mov	lr, ip
   1148e:	3201      	adds	r2, #1
   11490:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11494:	6999      	ldr	r1, [r3, #24]
   11496:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11498:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1149a:	d44e      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1149c:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1149e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   114a2:	d16e      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114a4:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114a8:	6999      	ldr	r1, [r3, #24]
   114aa:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114ac:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114b0:	d443      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114b2:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114b4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   114b8:	d163      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114ba:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114be:	699c      	ldr	r4, [r3, #24]
   114c0:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114c2:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114c6:	d438      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114c8:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114ca:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   114ce:	d158      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114d0:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114d4:	699c      	ldr	r4, [r3, #24]
   114d6:	06e4      	lsls	r4, r4, #27
   114d8:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
   114dc:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114e0:	d42b      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114e2:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114e4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   114e8:	d14b      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114ea:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114ee:	6999      	ldr	r1, [r3, #24]
   114f0:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114f2:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114f6:	d420      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114f8:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114fa:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   114fe:	d140      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11500:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11504:	6999      	ldr	r1, [r3, #24]
   11506:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11508:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1150c:	d415      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1150e:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11510:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11514:	d135      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11516:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1151a:	699c      	ldr	r4, [r3, #24]
   1151c:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1151e:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11522:	d40a      	bmi.n	1153a <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11524:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11526:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1152a:	d12a      	bne.n	11582 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1152c:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
   1152e:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
   11530:	f88e 1006 	strb.w	r1, [lr, #6]
   11534:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
   11538:	d1a1      	bne.n	1147e <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   1153a:	a908      	add	r1, sp, #32
   1153c:	9802      	ldr	r0, [sp, #8]
   1153e:	4654      	mov	r4, sl
   11540:	f8dd a00c 	ldr.w	sl, [sp, #12]
   11544:	f000 fa1a 	bl	1197c <am_hal_queue_item_add>
   11548:	b958      	cbnz	r0, 11562 <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
   1154a:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 11700 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
   1154e:	9807      	ldr	r0, [sp, #28]
   11550:	f7fd fe18 	bl	f184 <am_hal_interrupt_master_set>
   11554:	e56c      	b.n	11030 <am_hal_uart_transfer+0x234>
   11556:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   11558:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   1155c:	e568      	b.n	11030 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   1155e:	462e      	mov	r6, r5
   11560:	e52d      	b.n	10fbe <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
   11562:	9807      	ldr	r0, [sp, #28]
   11564:	f7fd fe0e 	bl	f184 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
   11568:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   1156c:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
   1156e:	42a3      	cmp	r3, r4
   11570:	bf28      	it	cs
   11572:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   11574:	461a      	mov	r2, r3
   11576:	4649      	mov	r1, r9
   11578:	9303      	str	r3, [sp, #12]
   1157a:	f000 fb03 	bl	11b84 <am_hal_queue_item_get>
   1157e:	9b03      	ldr	r3, [sp, #12]
   11580:	e753      	b.n	1142a <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   11582:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   11586:	e7e2      	b.n	1154e <am_hal_uart_transfer+0x752>
   11588:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   1158c:	e550      	b.n	11030 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
   1158e:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
   11592:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   11596:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
   11598:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   1159a:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
   1159e:	bf28      	it	cs
   115a0:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   115a2:	9901      	ldr	r1, [sp, #4]
   115a4:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
   115a6:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   115a8:	f000 f9e8 	bl	1197c <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
   115ac:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
   115b0:	f7fd fde4 	bl	f17c <am_hal_interrupt_master_disable>
   115b4:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
   115b8:	331c      	adds	r3, #28
   115ba:	031d      	lsls	r5, r3, #12
   115bc:	9005      	str	r0, [sp, #20]
   115be:	e00e      	b.n	115de <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   115c0:	f000 fae0 	bl	11b84 <am_hal_queue_item_get>
   115c4:	b190      	cbz	r0, 115ec <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   115c6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   115ca:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
   115ce:	321c      	adds	r2, #28
   115d0:	0311      	lsls	r1, r2, #12
   115d2:	698e      	ldr	r6, [r1, #24]
   115d4:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   115d6:	bf5c      	itt	pl
   115d8:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   115dc:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   115de:	69af      	ldr	r7, [r5, #24]
   115e0:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   115e2:	f04f 0201 	mov.w	r2, #1
   115e6:	a908      	add	r1, sp, #32
   115e8:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   115ea:	d5e9      	bpl.n	115c0 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
   115ec:	9805      	ldr	r0, [sp, #20]
   115ee:	f7fd fdc9 	bl	f184 <am_hal_interrupt_master_set>
   115f2:	e5d1      	b.n	11198 <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
   115f4:	f7fd fdc2 	bl	f17c <am_hal_interrupt_master_disable>
   115f8:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   115fc:	9006      	str	r0, [sp, #24]
   115fe:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
   11602:	301c      	adds	r0, #28
   11604:	0301      	lsls	r1, r0, #12
   11606:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
   11608:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1160a:	698e      	ldr	r6, [r1, #24]
   1160c:	06f0      	lsls	r0, r6, #27
   1160e:	d455      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11610:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11612:	f415 6f70 	tst.w	r5, #3840	; 0xf00
   11616:	d16f      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11618:	4618      	mov	r0, r3
   1161a:	3201      	adds	r2, #1
   1161c:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11620:	698e      	ldr	r6, [r1, #24]
   11622:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11624:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11626:	d449      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11628:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1162a:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   1162e:	d163      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11630:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11632:	698e      	ldr	r6, [r1, #24]
   11634:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11636:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1163a:	d43f      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   1163c:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1163e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11642:	d159      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11644:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11646:	f8d1 e018 	ldr.w	lr, [r1, #24]
   1164a:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
   1164e:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11652:	d133      	bne.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11654:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11656:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   1165a:	d14d      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1165c:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1165e:	698e      	ldr	r6, [r1, #24]
   11660:	06f6      	lsls	r6, r6, #27
   11662:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
   11666:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1166a:	d427      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   1166c:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1166e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11672:	d141      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11674:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11676:	698b      	ldr	r3, [r1, #24]
   11678:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1167a:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1167e:	d41d      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11680:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11682:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   11686:	d137      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11688:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1168a:	698b      	ldr	r3, [r1, #24]
   1168c:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1168e:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11692:	d413      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11694:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11696:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1169a:	d12d      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1169c:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1169e:	698e      	ldr	r6, [r1, #24]
   116a0:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   116a2:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
   116a6:	d409      	bmi.n	116bc <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   116a8:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   116aa:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   116ae:	d123      	bne.n	116f8 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   116b0:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
   116b2:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
   116b4:	7183      	strb	r3, [r0, #6]
   116b6:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
   116ba:	d1a6      	bne.n	1160a <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   116bc:	f108 0a48 	add.w	sl, r8, #72	; 0x48
   116c0:	a908      	add	r1, sp, #32
   116c2:	4650      	mov	r0, sl
   116c4:	f000 f95a 	bl	1197c <am_hal_queue_item_add>
   116c8:	b930      	cbnz	r0, 116d8 <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
   116ca:	f8df b034 	ldr.w	fp, [pc, #52]	; 11700 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
   116ce:	9806      	ldr	r0, [sp, #24]
   116d0:	f7fd fd58 	bl	f184 <am_hal_interrupt_master_set>
   116d4:	f7ff bb9e 	b.w	10e14 <am_hal_uart_transfer+0x18>
   116d8:	9806      	ldr	r0, [sp, #24]
   116da:	f7fd fd53 	bl	f184 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
   116de:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
   116e2:	42a5      	cmp	r5, r4
   116e4:	bf28      	it	cs
   116e6:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   116e8:	4649      	mov	r1, r9
   116ea:	4650      	mov	r0, sl
   116ec:	462a      	mov	r2, r5
   116ee:	f000 fa49 	bl	11b84 <am_hal_queue_item_get>
   116f2:	e49d      	b.n	11030 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
   116f4:	4605      	mov	r5, r0
   116f6:	e49b      	b.n	11030 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   116f8:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   116fc:	e7e7      	b.n	116ce <am_hal_uart_transfer+0x8d2>
   116fe:	bf00      	nop
   11700:	08000001 	.word	0x08000001

00011704 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   11704:	2807      	cmp	r0, #7
   11706:	d901      	bls.n	1170c <am_hal_cmdq_init+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
   11708:	2005      	movs	r0, #5
   1170a:	4770      	bx	lr
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   1170c:	b1c1      	cbz	r1, 11740 <am_hal_cmdq_init+0x3c>
{
   1170e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   11712:	684c      	ldr	r4, [r1, #4]
   11714:	b18c      	cbz	r4, 1173a <am_hal_cmdq_init+0x36>
   11716:	b182      	cbz	r2, 1173a <am_hal_cmdq_init+0x36>
   11718:	680e      	ldr	r6, [r1, #0]
   1171a:	2e01      	cmp	r6, #1
   1171c:	d90d      	bls.n	1173a <am_hal_cmdq_init+0x36>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   1171e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11722:	f8df e08c 	ldr.w	lr, [pc, #140]	; 117b0 <am_hal_cmdq_init+0xac>
   11726:	00c3      	lsls	r3, r0, #3
   11728:	eb0e 0503 	add.w	r5, lr, r3
   1172c:	78ef      	ldrb	r7, [r5, #3]
   1172e:	f017 0001 	ands.w	r0, r7, #1
   11732:	d007      	beq.n	11744 <am_hal_cmdq_init+0x40>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
   11734:	2007      	movs	r0, #7
    AM_REGVAL(pCmdQ->pReg->regCQCfg) =
        (((pCfg->priority) << AM_REG_IOM_CQCFG_CQPRI_S) & AM_REG_IOM_CQCFG_CQPRI_M);
#endif // AM_CMSIS_REGS
    *ppHandle = pCmdQ;
    return AM_HAL_STATUS_SUCCESS;
}
   11736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1173a:	2006      	movs	r0, #6
   1173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11740:	2006      	movs	r0, #6
   11742:	4770      	bx	lr
    pCmdQ->prefix.s.bEnable = false;
   11744:	f047 0701 	orr.w	r7, r7, #1
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   11748:	00f6      	lsls	r6, r6, #3
    pCmdQ->prefix.s.bEnable = false;
   1174a:	f360 0741 	bfi	r7, r0, #1, #1
   1174e:	70ef      	strb	r7, [r5, #3]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   11750:	eb06 0c04 	add.w	ip, r6, r4
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   11754:	4f15      	ldr	r7, [pc, #84]	; (117ac <am_hal_cmdq_init+0xa8>)
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   11756:	61ae      	str	r6, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   11758:	606c      	str	r4, [r5, #4]
   1175a:	60ec      	str	r4, [r5, #12]
   1175c:	616c      	str	r4, [r5, #20]
   1175e:	612c      	str	r4, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   11760:	f8c5 c008 	str.w	ip, [r5, #8]
    pCmdQ->curIdx = 0;
   11764:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   11766:	6228      	str	r0, [r5, #32]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   11768:	f85e c003 	ldr.w	ip, [lr, r3]
   1176c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 117b4 <am_hal_cmdq_init+0xb0>
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   11770:	18fe      	adds	r6, r7, r3
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   11772:	f368 0c17 	bfi	ip, r8, #0, #24
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   11776:	6877      	ldr	r7, [r6, #4]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   11778:	f84e c003 	str.w	ip, [lr, r3]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   1177c:	626e      	str	r6, [r5, #36]	; 0x24
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   1177e:	603c      	str	r4, [r7, #0]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   11780:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = _VAL2FLD(IOM0_CQCFG_CQPRI, pCfg->priority);
   11782:	7a0b      	ldrb	r3, [r1, #8]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   11784:	68a1      	ldr	r1, [r4, #8]
   11786:	6008      	str	r0, [r1, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   11788:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1178a:	68f7      	ldr	r7, [r6, #12]
   1178c:	6038      	str	r0, [r7, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   1178e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   11790:	690c      	ldr	r4, [r1, #16]
   11792:	694e      	ldr	r6, [r1, #20]
   11794:	6827      	ldr	r7, [r4, #0]
   11796:	4337      	orrs	r7, r6
   11798:	6027      	str	r7, [r4, #0]
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = _VAL2FLD(IOM0_CQCFG_CQPRI, pCfg->priority);
   1179a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1179c:	005b      	lsls	r3, r3, #1
   1179e:	680c      	ldr	r4, [r1, #0]
   117a0:	f003 0602 	and.w	r6, r3, #2
   117a4:	6026      	str	r6, [r4, #0]
    *ppHandle = pCmdQ;
   117a6:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   117a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117ac:	00012350 	.word	0x00012350
   117b0:	100011d4 	.word	0x100011d4
   117b4:	00cdcdcd 	.word	0x00cdcdcd

000117b8 <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   117b8:	b128      	cbz	r0, 117c6 <am_hal_cmdq_disable+0xe>
   117ba:	6803      	ldr	r3, [r0, #0]
   117bc:	4a0b      	ldr	r2, [pc, #44]	; (117ec <am_hal_cmdq_disable+0x34>)
   117be:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
   117c2:	4291      	cmp	r1, r2
   117c4:	d001      	beq.n	117ca <am_hal_cmdq_disable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   117c6:	2002      	movs	r0, #2
   117c8:	4770      	bx	lr
    }

    if (!pCmdQ->prefix.s.bEnable)
   117ca:	f890 c003 	ldrb.w	ip, [r0, #3]
   117ce:	f01c 0302 	ands.w	r3, ip, #2
   117d2:	d009      	beq.n	117e8 <am_hal_cmdq_disable+0x30>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif
#if AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQCfg) &= ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   117d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   117d6:	681a      	ldr	r2, [r3, #0]
   117d8:	6811      	ldr	r1, [r2, #0]
   117da:	f021 0301 	bic.w	r3, r1, #1
   117de:	6013      	str	r3, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQCfg) &= ~AM_REG_IOM_CQCFG_CQEN_EN;
#endif // AM_CMSIS_REGS
    pCmdQ->prefix.s.bEnable = false;
   117e0:	78c2      	ldrb	r2, [r0, #3]
   117e2:	f36f 0241 	bfc	r2, #1, #1
   117e6:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   117e8:	2000      	movs	r0, #0
   117ea:	4770      	bx	lr
   117ec:	01cdcdcd 	.word	0x01cdcdcd

000117f0 <am_hal_cmdq_get_status>:
uint32_t am_hal_cmdq_get_status(void *pHandle, am_hal_cmdq_status_t *pStatus)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
    uint32_t status;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   117f0:	b128      	cbz	r0, 117fe <am_hal_cmdq_get_status+0xe>
   117f2:	6803      	ldr	r3, [r0, #0]
   117f4:	4a23      	ldr	r2, [pc, #140]	; (11884 <am_hal_cmdq_get_status+0x94>)
   117f6:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   117fa:	4594      	cmp	ip, r2
   117fc:	d001      	beq.n	11802 <am_hal_cmdq_get_status+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   117fe:	2002      	movs	r0, #2
   11800:	4770      	bx	lr
    }
    if (!pStatus)
   11802:	2900      	cmp	r1, #0
   11804:	d03c      	beq.n	11880 <am_hal_cmdq_get_status+0x90>
{
   11806:	b570      	push	{r4, r5, r6, lr}
   11808:	4604      	mov	r4, r0
   1180a:	b082      	sub	sp, #8
   1180c:	460d      	mov	r5, r1
    AM_CRITICAL_BEGIN
   1180e:	f7fd fcb5 	bl	f17c <am_hal_interrupt_master_disable>
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   11812:	6a61      	ldr	r1, [r4, #36]	; 0x24
    AM_CRITICAL_BEGIN
   11814:	9001      	str	r0, [sp, #4]
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   11816:	688e      	ldr	r6, [r1, #8]
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   11818:	6a20      	ldr	r0, [r4, #32]
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   1181a:	6832      	ldr	r2, [r6, #0]
    pCmdQ->cmdQHead = AM_REGVAL(pCmdQ->pReg->regCQAddr);
   1181c:	6849      	ldr	r1, [r1, #4]
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   1181e:	b2d6      	uxtb	r6, r2
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   11820:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   11824:	4333      	orrs	r3, r6
    if (pCmdQ->endIdx < pCmdQ->curIdx)
   11826:	4298      	cmp	r0, r3
        pCmdQ->curIdx -= (AM_HAL_CMDQ_HW_IDX_MAX + 1);
   11828:	bf38      	it	cc
   1182a:	f5a3 7380 	subcc.w	r3, r3, #256	; 0x100
   1182e:	61e3      	str	r3, [r4, #28]
    pCmdQ->cmdQHead = AM_REGVAL(pCmdQ->pReg->regCQAddr);
   11830:	680a      	ldr	r2, [r1, #0]
   11832:	60e2      	str	r2, [r4, #12]
    AM_CRITICAL_END
   11834:	9801      	ldr	r0, [sp, #4]
   11836:	f7fd fca5 	bl	f184 <am_hal_interrupt_master_set>
#endif
    update_indices(pCmdQ);
    pStatus->lastIdxProcessed = pCmdQ->curIdx;
    pStatus->lastIdxAllocated = pCmdQ->endIdx;
    pStatus->lastIdxPosted = pCmdQ->endIdx - ((pCmdQ->cmdQNextTail == pCmdQ->cmdQTail) ? 0 : 1);
    status = AM_REGVAL(pCmdQ->pReg->regCQStat);
   1183a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    pStatus->lastIdxAllocated = pCmdQ->endIdx;
   1183c:	6a21      	ldr	r1, [r4, #32]
    pStatus->lastIdxPosted = pCmdQ->endIdx - ((pCmdQ->cmdQNextTail == pCmdQ->cmdQTail) ? 0 : 1);
   1183e:	6926      	ldr	r6, [r4, #16]
   11840:	6962      	ldr	r2, [r4, #20]
    status = AM_REGVAL(pCmdQ->pReg->regCQStat);
   11842:	6998      	ldr	r0, [r3, #24]
    pStatus->lastIdxProcessed = pCmdQ->curIdx;
   11844:	69e4      	ldr	r4, [r4, #28]
   11846:	602c      	str	r4, [r5, #0]
    pStatus->lastIdxPosted = pCmdQ->endIdx - ((pCmdQ->cmdQNextTail == pCmdQ->cmdQTail) ? 0 : 1);
   11848:	42b2      	cmp	r2, r6
   1184a:	bf0c      	ite	eq
   1184c:	460a      	moveq	r2, r1
   1184e:	1e4a      	subne	r2, r1, #1
    pStatus->lastIdxAllocated = pCmdQ->endIdx;
   11850:	60a9      	str	r1, [r5, #8]
    pStatus->lastIdxPosted = pCmdQ->endIdx - ((pCmdQ->cmdQNextTail == pCmdQ->cmdQTail) ? 0 : 1);
   11852:	606a      	str	r2, [r5, #4]
    status = AM_REGVAL(pCmdQ->pReg->regCQStat);
   11854:	6806      	ldr	r6, [r0, #0]
    pStatus->bTIP = status & pCmdQ->pReg->bitMaskCQStatTIP;
   11856:	69dc      	ldr	r4, [r3, #28]
    pStatus->bPaused = status & pCmdQ->pReg->bitMaskCQStatPaused;
   11858:	6a59      	ldr	r1, [r3, #36]	; 0x24
    pStatus->bErr = status & pCmdQ->pReg->bitMaskCQStatErr;
   1185a:	6a1b      	ldr	r3, [r3, #32]
    pStatus->bTIP = status & pCmdQ->pReg->bitMaskCQStatTIP;
   1185c:	4226      	tst	r6, r4
   1185e:	bf14      	ite	ne
   11860:	2401      	movne	r4, #1
   11862:	2400      	moveq	r4, #0
    pStatus->bPaused = status & pCmdQ->pReg->bitMaskCQStatPaused;
   11864:	420e      	tst	r6, r1
   11866:	bf14      	ite	ne
   11868:	2101      	movne	r1, #1
   1186a:	2100      	moveq	r1, #0
    pStatus->bErr = status & pCmdQ->pReg->bitMaskCQStatErr;
   1186c:	421e      	tst	r6, r3
   1186e:	bf14      	ite	ne
   11870:	2301      	movne	r3, #1
   11872:	2300      	moveq	r3, #0

    return AM_HAL_STATUS_SUCCESS;
   11874:	2000      	movs	r0, #0
    pStatus->bTIP = status & pCmdQ->pReg->bitMaskCQStatTIP;
   11876:	732c      	strb	r4, [r5, #12]
    pStatus->bPaused = status & pCmdQ->pReg->bitMaskCQStatPaused;
   11878:	7369      	strb	r1, [r5, #13]
    pStatus->bErr = status & pCmdQ->pReg->bitMaskCQStatErr;
   1187a:	73ab      	strb	r3, [r5, #14]
}
   1187c:	b002      	add	sp, #8
   1187e:	bd70      	pop	{r4, r5, r6, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   11880:	2006      	movs	r0, #6
   11882:	4770      	bx	lr
   11884:	01cdcdcd 	.word	0x01cdcdcd

00011888 <am_hal_cmdq_term>:
//*****************************************************************************
uint32_t am_hal_cmdq_term(void *pHandle, bool bForce)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   11888:	b128      	cbz	r0, 11896 <am_hal_cmdq_term+0xe>
   1188a:	6803      	ldr	r3, [r0, #0]
   1188c:	4a1b      	ldr	r2, [pc, #108]	; (118fc <am_hal_cmdq_term+0x74>)
   1188e:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   11892:	4594      	cmp	ip, r2
   11894:	d001      	beq.n	1189a <am_hal_cmdq_term+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   11896:	2002      	movs	r0, #2
   11898:	4770      	bx	lr
{
   1189a:	b530      	push	{r4, r5, lr}
   1189c:	4604      	mov	r4, r0
   1189e:	b083      	sub	sp, #12
   118a0:	460d      	mov	r5, r1
    AM_CRITICAL_BEGIN
   118a2:	f7fd fc6b 	bl	f17c <am_hal_interrupt_master_disable>
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   118a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    AM_CRITICAL_BEGIN
   118a8:	9001      	str	r0, [sp, #4]
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   118aa:	688b      	ldr	r3, [r1, #8]
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   118ac:	6a20      	ldr	r0, [r4, #32]
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   118ae:	681a      	ldr	r2, [r3, #0]
    pCmdQ->cmdQHead = AM_REGVAL(pCmdQ->pReg->regCQAddr);
   118b0:	6849      	ldr	r1, [r1, #4]
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   118b2:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   118b6:	b2d2      	uxtb	r2, r2
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   118b8:	4313      	orrs	r3, r2
    if (pCmdQ->endIdx < pCmdQ->curIdx)
   118ba:	4298      	cmp	r0, r3
        pCmdQ->curIdx -= (AM_HAL_CMDQ_HW_IDX_MAX + 1);
   118bc:	bf38      	it	cc
   118be:	f5a3 7380 	subcc.w	r3, r3, #256	; 0x100
   118c2:	61e3      	str	r3, [r4, #28]
    pCmdQ->cmdQHead = AM_REGVAL(pCmdQ->pReg->regCQAddr);
   118c4:	680b      	ldr	r3, [r1, #0]
   118c6:	60e3      	str	r3, [r4, #12]
    AM_CRITICAL_END
   118c8:	9801      	ldr	r0, [sp, #4]
   118ca:	f7fd fc5b 	bl	f184 <am_hal_interrupt_master_set>
    }
#endif
    update_indices(pCmdQ);
    if (!bForce && (pCmdQ->curIdx != pCmdQ->endIdx))
   118ce:	b92d      	cbnz	r5, 118dc <am_hal_cmdq_term+0x54>
   118d0:	69e5      	ldr	r5, [r4, #28]
   118d2:	6a20      	ldr	r0, [r4, #32]
   118d4:	4285      	cmp	r5, r0
   118d6:	d001      	beq.n	118dc <am_hal_cmdq_term+0x54>
    {
        return AM_HAL_STATUS_IN_USE;
   118d8:	2003      	movs	r0, #3
   118da:	e00d      	b.n	118f8 <am_hal_cmdq_term+0x70>
    }
    pCmdQ->prefix.s.bInit = false;
   118dc:	78e2      	ldrb	r2, [r4, #3]
    // Disable Command Queue
#if AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_DIS);
   118de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    pCmdQ->prefix.s.bInit = false;
   118e0:	f36f 0200 	bfc	r2, #0, #1
   118e4:	70e2      	strb	r2, [r4, #3]
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_DIS);
   118e6:	681c      	ldr	r4, [r3, #0]
#else // AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = AM_REG_IOM_CQCFG_CQEN_DIS;
#endif // AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQPause) &= ~pCmdQ->pReg->bitMaskCQPauseIdx;
   118e8:	691d      	ldr	r5, [r3, #16]
    AM_REGVAL(pCmdQ->pReg->regCQCfg) = _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_DIS);
   118ea:	2000      	movs	r0, #0
   118ec:	6020      	str	r0, [r4, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) &= ~pCmdQ->pReg->bitMaskCQPauseIdx;
   118ee:	6959      	ldr	r1, [r3, #20]
   118f0:	682a      	ldr	r2, [r5, #0]
   118f2:	ea22 0301 	bic.w	r3, r2, r1
   118f6:	602b      	str	r3, [r5, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   118f8:	b003      	add	sp, #12
   118fa:	bd30      	pop	{r4, r5, pc}
   118fc:	01cdcdcd 	.word	0x01cdcdcd

00011900 <am_hal_cmdq_error_resume>:
uint32_t am_hal_cmdq_error_resume(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
    am_hal_cmdq_entry_t *pCQAddr;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   11900:	b128      	cbz	r0, 1190e <am_hal_cmdq_error_resume+0xe>
   11902:	6803      	ldr	r3, [r0, #0]
   11904:	4a16      	ldr	r2, [pc, #88]	; (11960 <am_hal_cmdq_error_resume+0x60>)
   11906:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
   1190a:	4291      	cmp	r1, r2
   1190c:	d001      	beq.n	11912 <am_hal_cmdq_error_resume+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1190e:	2002      	movs	r0, #2
   11910:	4770      	bx	lr
    }

    if (!pCmdQ->prefix.s.bEnable)
   11912:	f890 c003 	ldrb.w	ip, [r0, #3]
   11916:	f01c 0302 	ands.w	r3, ip, #2
   1191a:	d01c      	beq.n	11956 <am_hal_cmdq_error_resume+0x56>
        return AM_HAL_STATUS_SUCCESS;
    }
#endif
    // First Disable the Command Queue
#if AM_CMSIS_REGS
    AM_REGVAL(pCmdQ->pReg->regCQCfg) &= ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   1191c:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
   1191e:	b430      	push	{r4, r5}
#endif // AM_CMSIS_REGS

    // Need to identify end of block for the transaction where hardware is stuck
    // Move the CQADDR to the last entry in the block which will update the curIdx
    // and then move on.
    pCQAddr = (am_hal_cmdq_entry_t *)AM_REGVAL(pCmdQ->pReg->regCQAddr);
   11920:	e892 0030 	ldmia.w	r2, {r4, r5}
    AM_REGVAL(pCmdQ->pReg->regCQCfg) &= ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   11924:	6823      	ldr	r3, [r4, #0]
   11926:	6891      	ldr	r1, [r2, #8]
   11928:	f023 0201 	bic.w	r2, r3, #1
   1192c:	6022      	str	r2, [r4, #0]
    pCQAddr = (am_hal_cmdq_entry_t *)AM_REGVAL(pCmdQ->pReg->regCQAddr);
   1192e:	682b      	ldr	r3, [r5, #0]
#if AM_CMSIS_REGS
    while ((pCQAddr->address & ~0x1) != (uint32_t)(pCmdQ->pReg->regCurIdx))
   11930:	e003      	b.n	1193a <am_hal_cmdq_error_resume+0x3a>
    {
        if ( (uint32_t) ++pCQAddr >= pCmdQ->cmdQBufEnd )
   11932:	6882      	ldr	r2, [r0, #8]
   11934:	3308      	adds	r3, #8
   11936:	4293      	cmp	r3, r2
   11938:	d20f      	bcs.n	1195a <am_hal_cmdq_error_resume+0x5a>
    while ((pCQAddr->address & ~0x1) != (uint32_t)(pCmdQ->pReg->regCurIdx))
   1193a:	681a      	ldr	r2, [r3, #0]
   1193c:	f022 0c01 	bic.w	ip, r2, #1
   11940:	458c      	cmp	ip, r1
   11942:	d1f6      	bne.n	11932 <am_hal_cmdq_error_resume+0x32>
        }
    }

    // The pCQAddr now points to the address of the command which will update the curIdx
    // Disable update interrupt, as we would have already handled this error
    *(&pCQAddr->address) = (uint32_t)pCmdQ->pReg->regCurIdx;
   11944:	6019      	str	r1, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCQAddr;
   11946:	602b      	str	r3, [r5, #0]
    // Re-enable the Command Queue
    AM_REGVAL(pCmdQ->pReg->regCQCfg) |= _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   11948:	6820      	ldr	r0, [r4, #0]
   1194a:	f040 0501 	orr.w	r5, r0, #1
   1194e:	6025      	str	r5, [r4, #0]
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCQAddr;
    // Re-enable the Command Queue
    AM_REGVAL(pCmdQ->pReg->regCQCfg) |= AM_REG_IOM_CQCFG_CQEN_EN;
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
   11950:	2000      	movs	r0, #0
}
   11952:	bc30      	pop	{r4, r5}
   11954:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   11956:	4618      	mov	r0, r3
   11958:	4770      	bx	lr
            return AM_HAL_STATUS_FAIL;
   1195a:	2001      	movs	r0, #1
   1195c:	e7f9      	b.n	11952 <am_hal_cmdq_error_resume+0x52>
   1195e:	bf00      	nop
   11960:	01cdcdcd 	.word	0x01cdcdcd

00011964 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   11964:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   11966:	2400      	movs	r4, #0
   11968:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   1196a:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   1196c:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   1196e:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   11970:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   11972:	6141      	str	r1, [r0, #20]
}
   11974:	f85d 4b04 	ldr.w	r4, [sp], #4
   11978:	4770      	bx	lr
   1197a:	bf00      	nop

0001197c <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
   1197c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1197e:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   11980:	6905      	ldr	r5, [r0, #16]
{
   11982:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   11984:	fb05 f502 	mul.w	r5, r5, r2
{
   11988:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
   1198a:	f7fd fbf7 	bl	f17c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
   1198e:	68e3      	ldr	r3, [r4, #12]
   11990:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
   11992:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
   11994:	1a99      	subs	r1, r3, r2
   11996:	428d      	cmp	r5, r1
   11998:	f200 8081 	bhi.w	11a9e <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1199c:	2d00      	cmp	r5, #0
   1199e:	d075      	beq.n	11a8c <am_hal_queue_item_add+0x110>
   119a0:	6826      	ldr	r6, [r4, #0]
   119a2:	2f00      	cmp	r7, #0
   119a4:	d07d      	beq.n	11aa2 <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   119a6:	4638      	mov	r0, r7
   119a8:	6963      	ldr	r3, [r4, #20]
   119aa:	f810 2b01 	ldrb.w	r2, [r0], #1
   119ae:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   119b0:	6821      	ldr	r1, [r4, #0]
   119b2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   119b6:	1c4a      	adds	r2, r1, #1
   119b8:	197e      	adds	r6, r7, r5
   119ba:	43ff      	mvns	r7, r7
   119bc:	fbb2 fcfe 	udiv	ip, r2, lr
   119c0:	4437      	add	r7, r6
   119c2:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   119c6:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   119c8:	6023      	str	r3, [r4, #0]
   119ca:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   119ce:	d05c      	beq.n	11a8a <am_hal_queue_item_add+0x10e>
   119d0:	b349      	cbz	r1, 11a26 <am_hal_queue_item_add+0xaa>
   119d2:	2901      	cmp	r1, #1
   119d4:	d019      	beq.n	11a0a <am_hal_queue_item_add+0x8e>
   119d6:	2902      	cmp	r1, #2
   119d8:	d00b      	beq.n	119f2 <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   119da:	6962      	ldr	r2, [r4, #20]
   119dc:	f810 7b01 	ldrb.w	r7, [r0], #1
   119e0:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   119e2:	6823      	ldr	r3, [r4, #0]
   119e4:	68e1      	ldr	r1, [r4, #12]
   119e6:	1c5a      	adds	r2, r3, #1
   119e8:	fbb2 f7f1 	udiv	r7, r2, r1
   119ec:	fb01 2317 	mls	r3, r1, r7, r2
   119f0:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   119f2:	6962      	ldr	r2, [r4, #20]
   119f4:	f810 1b01 	ldrb.w	r1, [r0], #1
   119f8:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   119fa:	6823      	ldr	r3, [r4, #0]
   119fc:	68e7      	ldr	r7, [r4, #12]
   119fe:	1c5a      	adds	r2, r3, #1
   11a00:	fbb2 f1f7 	udiv	r1, r2, r7
   11a04:	fb07 2311 	mls	r3, r7, r1, r2
   11a08:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a0a:	6967      	ldr	r7, [r4, #20]
   11a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   11a10:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a12:	6823      	ldr	r3, [r4, #0]
   11a14:	68e1      	ldr	r1, [r4, #12]
   11a16:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11a18:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a1a:	fbb7 f2f1 	udiv	r2, r7, r1
   11a1e:	fb01 7312 	mls	r3, r1, r2, r7
   11a22:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11a24:	d031      	beq.n	11a8a <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a26:	4686      	mov	lr, r0
   11a28:	6967      	ldr	r7, [r4, #20]
   11a2a:	f81e 1b01 	ldrb.w	r1, [lr], #1
   11a2e:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a30:	6823      	ldr	r3, [r4, #0]
   11a32:	68e2      	ldr	r2, [r4, #12]
   11a34:	1c5f      	adds	r7, r3, #1
   11a36:	fbb7 f1f2 	udiv	r1, r7, r2
   11a3a:	fb02 7311 	mls	r3, r2, r1, r7
   11a3e:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a40:	6962      	ldr	r2, [r4, #20]
   11a42:	7847      	ldrb	r7, [r0, #1]
   11a44:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a46:	6823      	ldr	r3, [r4, #0]
   11a48:	68e1      	ldr	r1, [r4, #12]
   11a4a:	1c5f      	adds	r7, r3, #1
   11a4c:	fbb7 f2f1 	udiv	r2, r7, r1
   11a50:	fb01 7312 	mls	r3, r1, r2, r7
   11a54:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a56:	6961      	ldr	r1, [r4, #20]
   11a58:	f89e 7001 	ldrb.w	r7, [lr, #1]
   11a5c:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a5e:	6822      	ldr	r2, [r4, #0]
   11a60:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a62:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a64:	3201      	adds	r2, #1
   11a66:	fbb2 fcf7 	udiv	ip, r2, r7
   11a6a:	fb07 231c 	mls	r3, r7, ip, r2
   11a6e:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11a70:	78c7      	ldrb	r7, [r0, #3]
   11a72:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a74:	6822      	ldr	r2, [r4, #0]
   11a76:	68e1      	ldr	r1, [r4, #12]
   11a78:	1c57      	adds	r7, r2, #1
   11a7a:	3004      	adds	r0, #4
   11a7c:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11a80:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11a82:	fb01 7312 	mls	r3, r1, r2, r7
   11a86:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11a88:	d1cd      	bne.n	11a26 <am_hal_queue_item_add+0xaa>
   11a8a:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
   11a8c:	442a      	add	r2, r5
   11a8e:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
   11a90:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
   11a92:	9801      	ldr	r0, [sp, #4]
   11a94:	f7fd fb76 	bl	f184 <am_hal_interrupt_master_set>

    return bSuccess;
}
   11a98:	4620      	mov	r0, r4
   11a9a:	b003      	add	sp, #12
   11a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
   11a9e:	2400      	movs	r4, #0
   11aa0:	e7f7      	b.n	11a92 <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11aa2:	1c70      	adds	r0, r6, #1
   11aa4:	fbb0 fef3 	udiv	lr, r0, r3
   11aa8:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11aac:	2001      	movs	r0, #1
   11aae:	1e6e      	subs	r6, r5, #1
   11ab0:	4285      	cmp	r5, r0
   11ab2:	f006 0707 	and.w	r7, r6, #7
   11ab6:	d063      	beq.n	11b80 <am_hal_queue_item_add+0x204>
   11ab8:	b3bf      	cbz	r7, 11b2a <am_hal_queue_item_add+0x1ae>
   11aba:	2f01      	cmp	r7, #1
   11abc:	d02d      	beq.n	11b1a <am_hal_queue_item_add+0x19e>
   11abe:	2f02      	cmp	r7, #2
   11ac0:	d025      	beq.n	11b0e <am_hal_queue_item_add+0x192>
   11ac2:	2f03      	cmp	r7, #3
   11ac4:	d01d      	beq.n	11b02 <am_hal_queue_item_add+0x186>
   11ac6:	2f04      	cmp	r7, #4
   11ac8:	d015      	beq.n	11af6 <am_hal_queue_item_add+0x17a>
   11aca:	2f05      	cmp	r7, #5
   11acc:	d00d      	beq.n	11aea <am_hal_queue_item_add+0x16e>
   11ace:	2f06      	cmp	r7, #6
   11ad0:	d005      	beq.n	11ade <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11ad2:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11ad4:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11ad6:	fbb1 fcf3 	udiv	ip, r1, r3
   11ada:	fb03 111c 	mls	r1, r3, ip, r1
   11ade:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11ae0:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11ae2:	fbb1 f6f3 	udiv	r6, r1, r3
   11ae6:	fb03 1116 	mls	r1, r3, r6, r1
   11aea:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11aec:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11aee:	fbb1 f7f3 	udiv	r7, r1, r3
   11af2:	fb03 1117 	mls	r1, r3, r7, r1
   11af6:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11af8:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11afa:	fbb1 fef3 	udiv	lr, r1, r3
   11afe:	fb03 111e 	mls	r1, r3, lr, r1
   11b02:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b04:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b06:	fbb1 fcf3 	udiv	ip, r1, r3
   11b0a:	fb03 111c 	mls	r1, r3, ip, r1
   11b0e:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b10:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b12:	fbb1 f6f3 	udiv	r6, r1, r3
   11b16:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b1a:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b1c:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b1e:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b20:	fbb1 f7f3 	udiv	r7, r1, r3
   11b24:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b28:	d02a      	beq.n	11b80 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b2a:	3101      	adds	r1, #1
   11b2c:	fbb1 fef3 	udiv	lr, r1, r3
   11b30:	fb03 161e 	mls	r6, r3, lr, r1
   11b34:	1c77      	adds	r7, r6, #1
   11b36:	fbb7 fcf3 	udiv	ip, r7, r3
   11b3a:	fb03 711c 	mls	r1, r3, ip, r7
   11b3e:	1c4e      	adds	r6, r1, #1
   11b40:	fbb6 f7f3 	udiv	r7, r6, r3
   11b44:	fb03 6117 	mls	r1, r3, r7, r6
   11b48:	1c4e      	adds	r6, r1, #1
   11b4a:	fbb6 f7f3 	udiv	r7, r6, r3
   11b4e:	fb03 6117 	mls	r1, r3, r7, r6
   11b52:	1c4e      	adds	r6, r1, #1
   11b54:	fbb6 f7f3 	udiv	r7, r6, r3
   11b58:	fb03 6117 	mls	r1, r3, r7, r6
   11b5c:	1c4e      	adds	r6, r1, #1
   11b5e:	fbb6 f7f3 	udiv	r7, r6, r3
   11b62:	fb03 6117 	mls	r1, r3, r7, r6
   11b66:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b68:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b6a:	fbb6 f7f3 	udiv	r7, r6, r3
   11b6e:	fb03 6117 	mls	r1, r3, r7, r6
   11b72:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b74:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11b76:	fbb6 f7f3 	udiv	r7, r6, r3
   11b7a:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11b7e:	d1d4      	bne.n	11b2a <am_hal_queue_item_add+0x1ae>
   11b80:	6021      	str	r1, [r4, #0]
   11b82:	e783      	b.n	11a8c <am_hal_queue_item_add+0x110>

00011b84 <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
   11b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b86:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   11b88:	6905      	ldr	r5, [r0, #16]
{
   11b8a:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   11b8c:	fb05 f502 	mul.w	r5, r5, r2
{
   11b90:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
   11b92:	f7fd faf3 	bl	f17c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
   11b96:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
   11b98:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
   11b9a:	42bd      	cmp	r5, r7
   11b9c:	f200 8083 	bhi.w	11ca6 <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11ba0:	2d00      	cmp	r5, #0
   11ba2:	d077      	beq.n	11c94 <am_hal_queue_item_get+0x110>
   11ba4:	6863      	ldr	r3, [r4, #4]
   11ba6:	2e00      	cmp	r6, #0
   11ba8:	d07f      	beq.n	11caa <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11baa:	6962      	ldr	r2, [r4, #20]
   11bac:	4630      	mov	r0, r6
   11bae:	5cd1      	ldrb	r1, [r2, r3]
   11bb0:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11bb4:	6863      	ldr	r3, [r4, #4]
   11bb6:	68e7      	ldr	r7, [r4, #12]
   11bb8:	1c5a      	adds	r2, r3, #1
   11bba:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11bbc:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11bbe:	fbb2 f6f7 	udiv	r6, r2, r7
   11bc2:	fb07 2316 	mls	r3, r7, r6, r2
   11bc6:	f105 37ff 	add.w	r7, r5, #4294967295
   11bca:	6063      	str	r3, [r4, #4]
   11bcc:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11bd0:	d05f      	beq.n	11c92 <am_hal_queue_item_get+0x10e>
   11bd2:	b362      	cbz	r2, 11c2e <am_hal_queue_item_get+0xaa>
   11bd4:	2a01      	cmp	r2, #1
   11bd6:	d01b      	beq.n	11c10 <am_hal_queue_item_get+0x8c>
   11bd8:	2a02      	cmp	r2, #2
   11bda:	d00c      	beq.n	11bf6 <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11bdc:	6966      	ldr	r6, [r4, #20]
   11bde:	f816 c003 	ldrb.w	ip, [r6, r3]
   11be2:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11be6:	6863      	ldr	r3, [r4, #4]
   11be8:	68e7      	ldr	r7, [r4, #12]
   11bea:	1c5a      	adds	r2, r3, #1
   11bec:	fbb2 f6f7 	udiv	r6, r2, r7
   11bf0:	fb07 2316 	mls	r3, r7, r6, r2
   11bf4:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11bf6:	6967      	ldr	r7, [r4, #20]
   11bf8:	f817 e003 	ldrb.w	lr, [r7, r3]
   11bfc:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c00:	6863      	ldr	r3, [r4, #4]
   11c02:	68e6      	ldr	r6, [r4, #12]
   11c04:	1c5a      	adds	r2, r3, #1
   11c06:	fbb2 f7f6 	udiv	r7, r2, r6
   11c0a:	fb06 2317 	mls	r3, r6, r7, r2
   11c0e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c10:	6966      	ldr	r6, [r4, #20]
   11c12:	f816 c003 	ldrb.w	ip, [r6, r3]
   11c16:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c1a:	6863      	ldr	r3, [r4, #4]
   11c1c:	68e7      	ldr	r7, [r4, #12]
   11c1e:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11c20:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c22:	fbb2 f6f7 	udiv	r6, r2, r7
   11c26:	fb07 2316 	mls	r3, r7, r6, r2
   11c2a:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11c2c:	d031      	beq.n	11c92 <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c2e:	6962      	ldr	r2, [r4, #20]
   11c30:	4686      	mov	lr, r0
   11c32:	5cd6      	ldrb	r6, [r2, r3]
   11c34:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c38:	6863      	ldr	r3, [r4, #4]
   11c3a:	68e7      	ldr	r7, [r4, #12]
   11c3c:	1c5a      	adds	r2, r3, #1
   11c3e:	fbb2 f6f7 	udiv	r6, r2, r7
   11c42:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c46:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c48:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c4a:	5cfa      	ldrb	r2, [r7, r3]
   11c4c:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c4e:	6863      	ldr	r3, [r4, #4]
   11c50:	68e6      	ldr	r6, [r4, #12]
   11c52:	1c5f      	adds	r7, r3, #1
   11c54:	fbb7 f2f6 	udiv	r2, r7, r6
   11c58:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c5c:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c5e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c60:	5cf7      	ldrb	r7, [r6, r3]
   11c62:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c66:	6862      	ldr	r2, [r4, #4]
   11c68:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c6a:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c6c:	3201      	adds	r2, #1
   11c6e:	fbb2 fcf7 	udiv	ip, r2, r7
   11c72:	fb07 231c 	mls	r3, r7, ip, r2
   11c76:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11c78:	5cf7      	ldrb	r7, [r6, r3]
   11c7a:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c7c:	6866      	ldr	r6, [r4, #4]
   11c7e:	68e7      	ldr	r7, [r4, #12]
   11c80:	1c72      	adds	r2, r6, #1
   11c82:	3004      	adds	r0, #4
   11c84:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11c88:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11c8a:	fb07 2316 	mls	r3, r7, r6, r2
   11c8e:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11c90:	d1cd      	bne.n	11c2e <am_hal_queue_item_get+0xaa>
   11c92:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
   11c94:	1b7f      	subs	r7, r7, r5
   11c96:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
   11c98:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
   11c9a:	9801      	ldr	r0, [sp, #4]
   11c9c:	f7fd fa72 	bl	f184 <am_hal_interrupt_master_set>

    return bSuccess;
}
   11ca0:	4620      	mov	r0, r4
   11ca2:	b003      	add	sp, #12
   11ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
   11ca6:	2400      	movs	r4, #0
   11ca8:	e7f7      	b.n	11c9a <am_hal_queue_item_get+0x116>
   11caa:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11cac:	1c58      	adds	r0, r3, #1
   11cae:	fbb0 fef1 	udiv	lr, r0, r1
   11cb2:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11cb6:	2001      	movs	r0, #1
   11cb8:	1e6a      	subs	r2, r5, #1
   11cba:	4285      	cmp	r5, r0
   11cbc:	f002 0607 	and.w	r6, r2, #7
   11cc0:	d063      	beq.n	11d8a <am_hal_queue_item_get+0x206>
   11cc2:	b3be      	cbz	r6, 11d34 <am_hal_queue_item_get+0x1b0>
   11cc4:	2e01      	cmp	r6, #1
   11cc6:	d02d      	beq.n	11d24 <am_hal_queue_item_get+0x1a0>
   11cc8:	2e02      	cmp	r6, #2
   11cca:	d025      	beq.n	11d18 <am_hal_queue_item_get+0x194>
   11ccc:	2e03      	cmp	r6, #3
   11cce:	d01d      	beq.n	11d0c <am_hal_queue_item_get+0x188>
   11cd0:	2e04      	cmp	r6, #4
   11cd2:	d015      	beq.n	11d00 <am_hal_queue_item_get+0x17c>
   11cd4:	2e05      	cmp	r6, #5
   11cd6:	d00d      	beq.n	11cf4 <am_hal_queue_item_get+0x170>
   11cd8:	2e06      	cmp	r6, #6
   11cda:	d005      	beq.n	11ce8 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11cdc:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11cde:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11ce0:	fbb3 f2f1 	udiv	r2, r3, r1
   11ce4:	fb01 3312 	mls	r3, r1, r2, r3
   11ce8:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11cea:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11cec:	fbb3 fcf1 	udiv	ip, r3, r1
   11cf0:	fb01 331c 	mls	r3, r1, ip, r3
   11cf4:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11cf6:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11cf8:	fbb3 fef1 	udiv	lr, r3, r1
   11cfc:	fb01 331e 	mls	r3, r1, lr, r3
   11d00:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d02:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d04:	fbb3 f6f1 	udiv	r6, r3, r1
   11d08:	fb01 3316 	mls	r3, r1, r6, r3
   11d0c:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d0e:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d10:	fbb3 f2f1 	udiv	r2, r3, r1
   11d14:	fb01 3312 	mls	r3, r1, r2, r3
   11d18:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d1a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d1c:	fbb3 fcf1 	udiv	ip, r3, r1
   11d20:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d24:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d26:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d28:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d2a:	fbb3 fef1 	udiv	lr, r3, r1
   11d2e:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d32:	d02a      	beq.n	11d8a <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d34:	3301      	adds	r3, #1
   11d36:	fbb3 f6f1 	udiv	r6, r3, r1
   11d3a:	fb01 3216 	mls	r2, r1, r6, r3
   11d3e:	1c56      	adds	r6, r2, #1
   11d40:	fbb6 fcf1 	udiv	ip, r6, r1
   11d44:	fb01 631c 	mls	r3, r1, ip, r6
   11d48:	1c5a      	adds	r2, r3, #1
   11d4a:	fbb2 f6f1 	udiv	r6, r2, r1
   11d4e:	fb01 2316 	mls	r3, r1, r6, r2
   11d52:	1c5a      	adds	r2, r3, #1
   11d54:	fbb2 f6f1 	udiv	r6, r2, r1
   11d58:	fb01 2316 	mls	r3, r1, r6, r2
   11d5c:	1c5a      	adds	r2, r3, #1
   11d5e:	fbb2 f6f1 	udiv	r6, r2, r1
   11d62:	fb01 2316 	mls	r3, r1, r6, r2
   11d66:	1c5a      	adds	r2, r3, #1
   11d68:	fbb2 f6f1 	udiv	r6, r2, r1
   11d6c:	fb01 2316 	mls	r3, r1, r6, r2
   11d70:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d72:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d74:	fbb2 f6f1 	udiv	r6, r2, r1
   11d78:	fb01 2316 	mls	r3, r1, r6, r2
   11d7c:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d7e:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11d80:	fbb2 f6f1 	udiv	r6, r2, r1
   11d84:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11d88:	d1d4      	bne.n	11d34 <am_hal_queue_item_get+0x1b0>
   11d8a:	6063      	str	r3, [r4, #4]
   11d8c:	e782      	b.n	11c94 <am_hal_queue_item_get+0x110>
   11d8e:	bf00      	nop

00011d90 <memcpy>:
   11d90:	b510      	push	{r4, lr}
   11d92:	1e43      	subs	r3, r0, #1
   11d94:	440a      	add	r2, r1
   11d96:	4291      	cmp	r1, r2
   11d98:	d100      	bne.n	11d9c <memcpy+0xc>
   11d9a:	bd10      	pop	{r4, pc}
   11d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
   11da0:	f803 4f01 	strb.w	r4, [r3, #1]!
   11da4:	e7f7      	b.n	11d96 <memcpy+0x6>
	...

00011da8 <g_FireballIOM5Config>:
   11da8:	0000 0000 4240 000f 0000 0000 0000 0000     ....@B..........
   11db8:	0000 0000 6c46 7361 2068 4449 6920 2073     ....Flash ID is 
   11dc8:	3825 382e 0a58 0000 7245 6f72 2072 202d     %8.8X...Error - 
   11dd8:	6146 6c69 6465 7420 206f 6e69 7469 6169     Failed to initia
   11de8:	696c 657a 4d20 5053 2e49 000a 7245 6f72     lize MSPI...Erro
   11df8:	2072 202d 6146 6c69 6465 7420 206f 6f70     r - Failed to po
   11e08:	6577 2072 6e6f 4d20 5053 2e49 000a 0000     wer on MSPI.....
   11e18:	7245 6f72 2072 202d 6146 6c69 6465 7420     Error - Failed t
   11e28:	206f 6f63 666e 6769 7275 2065 534d 4950     o configure MSPI
   11e38:	0a2e 0000 7245 6f72 2072 202d 6146 6c69     ....Error - Fail
   11e48:	6465 7420 206f 6e65 6261 656c 4d20 5053     ed to enable MSP
   11e58:	2e49 000a 7041 6c6f 6f6c 2033 7250 6d69     I...Apollo3 Prim
   11e68:	2065 7845 6d61 6c70 2065 7266 6d6f 4d20     e Example from M
   11e78:	5053 0a49 000a 0000 4146 4c49 203a 6d61     SPI.....FAIL: am
   11e88:	645f 7665 6369 7365 665f 7269 6265 6c61     _devices_firebal
   11e98:	5f6c 6f63 746e 6f72 286c 6425 2029 6572     l_control(%d) re
   11ea8:	7574 6e72 6465 3020 2578 2e58 000a 0000     turned 0x%X.....
   11eb8:	6946 6572 6162 6c6c 6620 756f 646e 202c     Fireball found, 
   11ec8:	4449 6920 2073 7830 5825 0a2e 0000 0000     ID is 0x%X......
   11ed8:	6e55 6e6b 776f 206e 6564 6976 6563 7220     Unknown device r
   11ee8:	7465 7275 656e 2064 4449 6120 2073 7830     eturned ID as 0x
   11ef8:	5825 0a2e 0000 0000 6946 6572 6162 6c6c     %X......Fireball
   11f08:	5620 7265 6973 6e6f 6920 2073 7830 5825      Version is 0x%X
   11f18:	0a2e 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
   11f28:	666e 6769 7275 2065 6874 2065 534d 4950     nfigure the MSPI
   11f38:	6120 646e 4620 616c 6873 4420 7665 6369      and Flash Devic
   11f48:	2065 6f63 7272 6365 6c74 2179 000a 0000     e correctly!....
   11f58:	6146 6c69 6465 7420 206f 6572 6461 4620     Failed to read F
   11f68:	616c 6873 4420 7665 6369 2065 4449 0a21     lash Device ID!.
   11f78:	0000 0000 7550 7474 6e69 2067 6874 2065     ....Putting the 
   11f88:	534d 4950 6120 646e 4520 7478 7265 616e     MSPI and Externa
   11f98:	206c 6c46 7361 2068 6e69 6f74 5820 5049     l Flash into XIP
   11fa8:	6d20 646f 0a65 0000 6146 6c69 6465 7420      mode...Failed t
   11fb8:	206f 7570 2074 6874 2065 534d 4950 6920     o put the MSPI i
   11fc8:	746e 206f 4958 2050 6f6d 6564 0a21 0000     nto XIP mode!...
   11fd8:	6150 7373 203a 756e 626d 7265 6f20 2066     Pass: number of 
   11fe8:	7270 6d69 7365 6620 726f 2520 2064 7369     primes for %d is
   11ff8:	2520 2e64 000a 0000 5245 4f52 3a52 4920      %d.....ERROR: I
   12008:	766e 6c61 6469 7220 7365 6c75 2e74 4520     nvalid result. E
   12018:	7078 6365 6574 2064 6425 202c 6f67 2074     xpected %d, got 
   12028:	6425 0a2e 0000 0000 0a0a 0a0a 0a0a 0a0a     %d..............
   12038:	0a0a 0a0a 0a0a 0a0a 0a0a 0000               ............

00012044 <g_sBspUartConfig>:
   12044:	c200 0001 0060 0000 0000 0000 0000 0000     ....`...........
   12054:	0000 0000 0012 0000 0000 0000 0000 0000     ................
	...

0001206c <g_AM_BSP_GPIO_COM_UART_RX>:
   1206c:	0000 0000                                   ....

00012070 <g_AM_BSP_GPIO_COM_UART_TX>:
   12070:	0000 0000                                   ....

00012074 <g_AM_BSP_GPIO_FIREBALL_CE>:
   12074:	0701 001d                                   ....

00012078 <g_AM_BSP_GPIO_IOM5_MISO>:
   12078:	0005 0005                                   ....

0001207c <g_AM_BSP_GPIO_IOM5_MOSI>:
   1207c:	0305 0005                                   ....

00012080 <g_AM_BSP_GPIO_IOM5_SCK>:
   12080:	0305 0005                                   ....

00012084 <g_AM_BSP_GPIO_MSPI_CE0>:
   12084:	0701 0006                                   ....

00012088 <g_AM_BSP_GPIO_MSPI_CE1>:
   12088:	0700 000e                                   ....

0001208c <g_AM_BSP_GPIO_MSPI_D0>:
   1208c:	0206 0006                                   ....

00012090 <g_AM_BSP_GPIO_MSPI_D1>:
   12090:	0205 0006                                   ....

00012094 <g_AM_BSP_GPIO_MSPI_D2>:
   12094:	0207 0006                                   ....

00012098 <g_AM_BSP_GPIO_MSPI_D3>:
   12098:	0206 0006                                   ....

0001209c <g_AM_BSP_GPIO_MSPI_D4>:
   1209c:	0205 0006                                   ....

000120a0 <g_AM_BSP_GPIO_MSPI_D5>:
   120a0:	0205 0006                                   ....

000120a4 <g_AM_BSP_GPIO_MSPI_D6>:
   120a4:	0205 0006                                   ....

000120a8 <g_AM_BSP_GPIO_MSPI_D7>:
   120a8:	0205 0006                                   ....

000120ac <g_AM_BSP_GPIO_MSPI_SCK>:
   120ac:	0302 0006                                   ....

000120b0 <am_hal_cachectrl_defaults>:
   120b0:	0308 0000                                   ....

000120b4 <g_AM_HAL_GPIO_DISABLE>:
   120b4:	0003 0000                                   ....

000120b8 <g_ui8Bit76Capabilities>:
   120b8:	0101 0280 0180 8001 0101 8080 8080 8080     ................
   120c8:	8080 8080 8008 8080 0180 0180 8080 8080     ................
   120d8:	8080 8080 0402 0180 0401 0101 8080 8080     ................
   120e8:	0101 0000                                   ....

000120ec <g_ui8Inpen>:
   120ec:	2323 e224 23a1 1007 4303 e100 a151 3561     ##$..#...C..Q.a5
   120fc:	c525 4181 b001 d160 3130 31a1 f101 1100     %..A..`.01.1....
   1210c:	21b1 01d1 11e5 3005 1037 3130 6100 4000     .!.....07.01.a.@
   1211c:	3130 0000                                   01..

00012120 <g_ui8NCEtable>:
   12120:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
   12130:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
   12140:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
   12150:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
   12160:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
   12170:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
   12180:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
   12190:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
   121a0:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
   121b0:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
   121c0:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
   121d0:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
   121e0:	1202 3222 1303 4323                         .."2..#C

000121e8 <g_ui8nCEpins>:
   121e8:	0707 0207 0802 0008 0202 0102 0101 0101     ................
   121f8:	0101 0101 0101 0101 0101 0101 0101 0101     ................
   12208:	0101 0101 0101 0801 0008 0101 0101 0101     ................
   12218:	0101 0000                                   ....

0001221c <g_am_hal_mcuctrl_flash_size>:
   1221c:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
   1222c:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
	...

0001225c <g_am_hal_mcuctrl_sram_size>:
   1225c:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
   1226c:	0000 0004 0000 0008 0000 0010 0000 0006     ................
	...

0001229c <am_hal_pwrctrl_peripheral_control>:
	...
   122a8:	0001 0000 0004 0000 0004 0000 0002 0000     ................
   122b8:	0008 0000 0008 0000 0004 0000 0008 0000     ................
   122c8:	0008 0000 0008 0000 0008 0000 0008 0000     ................
   122d8:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
   122e8:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
   122f8:	0010 0000 0080 0000 0004 0000 0004 0000     ................
   12308:	0100 0000 0004 0000 0004 0000 0200 0000     ................
   12318:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
   12328:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
   12338:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
   12348:	0100 0000 0100 0000                         ........

00012350 <gAmHalCmdQReg>:
   12350:	4294 5000 4298 5000 42ac 5000 42b0 5000     .B.P.B.P.B.P.B.P
   12360:	42a8 5000 8000 0000 429c 5000 0001 0000     .B.P.....B.P....
   12370:	0004 0000 0002 0000 5294 5000 5298 5000     .........R.P.R.P
   12380:	52ac 5000 52b0 5000 52a8 5000 8000 0000     .R.P.R.P.R.P....
   12390:	529c 5000 0001 0000 0004 0000 0002 0000     .R.P............
   123a0:	6294 5000 6298 5000 62ac 5000 62b0 5000     .b.P.b.P.b.P.b.P
   123b0:	62a8 5000 8000 0000 629c 5000 0001 0000     .b.P.....b.P....
   123c0:	0004 0000 0002 0000 7294 5000 7298 5000     .........r.P.r.P
   123d0:	72ac 5000 72b0 5000 72a8 5000 8000 0000     .r.P.r.P.r.P....
   123e0:	729c 5000 0001 0000 0004 0000 0002 0000     .r.P............
   123f0:	8294 5000 8298 5000 82ac 5000 82b0 5000     ...P...P...P...P
   12400:	82a8 5000 8000 0000 829c 5000 0001 0000     ...P.......P....
   12410:	0004 0000 0002 0000 9294 5000 9298 5000     ...........P...P
   12420:	92ac 5000 92b0 5000 92a8 5000 8000 0000     ...P...P...P....
   12430:	929c 5000 0001 0000 0004 0000 0002 0000     ...P............
   12440:	42a0 5001 42a8 5001 42c0 5001 42c4 5001     .B.P.B.P.B.P.B.P
   12450:	42b8 5001 4000 0000 42ac 5001 0001 0000     .B.P.@...B.P....
   12460:	0004 0000 0008 0000 c248 5000 c24c 5000     ........H..PL..P
   12470:	c260 5000 c264 5000 c25c 5000 8000 0000     `..Pd..P\..P....
   12480:	c250 5000 0001 0000 0004 0000 0002 0000     P..P............
