
apollo3_secbl_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002728  0000c100  0000c100  0000c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00004000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10004000  10004000  0000e828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10004000  0000e828  00014000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000e828  2**0
                  CONTENTS, READONLY
  5 .debug_info   0001d108  00000000  00000000  0000e85f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dca  00000000  00000000  0002b967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000630  00000000  00000000  0002e731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000010a8  00000000  00000000  0002ed61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004f88  00000000  00000000  0002fe09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009dea  00000000  00000000  00034d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003eb7b  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000011d8  00000000  00000000  0003ebf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000400f  00000000  00000000  0003fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c100 <g_am_pfnVectors>:
    c100:	00 40 00 10 f5 c9 00 00 5d ca 00 00 69 ca 00 00     .@......]...i...
    c110:	69 ca 00 00 69 ca 00 00 69 ca 00 00 00 00 00 00     i...i...i.......
	...
    c12c:	63 ca 00 00 63 ca 00 00 00 00 00 00 63 ca 00 00     c...c.......c...
    c13c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c14c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c15c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c16c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c17c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c18c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c19c:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c1ac:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c1bc:	63 ca 00 00 63 ca 00 00 63 ca 00 00 63 ca 00 00     c...c...c...c...
    c1cc:	63 ca 00 00                                         c...

0000c1d0 <__Patchable>:
	...

0000c200 <__aeabi_d2f>:
    c200:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c204:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c208:	bf24      	itt	cs
    c20a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c20e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c212:	d90d      	bls.n	c230 <__aeabi_d2f+0x30>
    c214:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c218:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c21c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c220:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c224:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c228:	bf08      	it	eq
    c22a:	f020 0001 	biceq.w	r0, r0, #1
    c22e:	4770      	bx	lr
    c230:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c234:	d121      	bne.n	c27a <__aeabi_d2f+0x7a>
    c236:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c23a:	bfbc      	itt	lt
    c23c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c240:	4770      	bxlt	lr
    c242:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c246:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c24a:	f1c2 0218 	rsb	r2, r2, #24
    c24e:	f1c2 0c20 	rsb	ip, r2, #32
    c252:	fa10 f30c 	lsls.w	r3, r0, ip
    c256:	fa20 f002 	lsr.w	r0, r0, r2
    c25a:	bf18      	it	ne
    c25c:	f040 0001 	orrne.w	r0, r0, #1
    c260:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c264:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c268:	fa03 fc0c 	lsl.w	ip, r3, ip
    c26c:	ea40 000c 	orr.w	r0, r0, ip
    c270:	fa23 f302 	lsr.w	r3, r3, r2
    c274:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c278:	e7cc      	b.n	c214 <__aeabi_d2f+0x14>
    c27a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c27e:	d107      	bne.n	c290 <__aeabi_d2f+0x90>
    c280:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c284:	bf1e      	ittt	ne
    c286:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c28a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c28e:	4770      	bxne	lr
    c290:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c294:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c298:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c29c:	4770      	bx	lr
    c29e:	bf00      	nop

0000c2a0 <flash_page_erase>:
//! @return Returns 0 on success
//
//*****************************************************************************
int
flash_page_erase(uint32_t addr)
{
    c2a0:	b580      	push	{r7, lr}
    c2a2:	b084      	sub	sp, #16
    c2a4:	af00      	add	r7, sp, #0
    c2a6:	6078      	str	r0, [r7, #4]
    uint32_t ui32Page;
    uint32_t ui32Block;
    //
    // Calculate the flash page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)addr);
    c2a8:	687b      	ldr	r3, [r7, #4]
    c2aa:	0b5b      	lsrs	r3, r3, #13
    c2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c2b0:	60fb      	str	r3, [r7, #12]
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)addr);
    c2b2:	687b      	ldr	r3, [r7, #4]
    c2b4:	0cdb      	lsrs	r3, r3, #19
    c2b6:	f003 0301 	and.w	r3, r3, #1
    c2ba:	60bb      	str	r3, [r7, #8]
    return am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
    c2bc:	68fa      	ldr	r2, [r7, #12]
    c2be:	68b9      	ldr	r1, [r7, #8]
    c2c0:	4803      	ldr	r0, [pc, #12]	; (c2d0 <flash_page_erase+0x30>)
    c2c2:	f001 fbe5 	bl	da90 <am_hal_flash_page_erase>
    c2c6:	4603      	mov	r3, r0
}
    c2c8:	4618      	mov	r0, r3
    c2ca:	3710      	adds	r7, #16
    c2cc:	46bd      	mov	sp, r7
    c2ce:	bd80      	pop	{r7, pc}
    c2d0:	12344321 	.word	0x12344321

0000c2d4 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c2d4:	b590      	push	{r4, r7, lr}
    c2d6:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
    c2da:	b081      	sub	sp, #4
    c2dc:	af02      	add	r7, sp, #8
 
    //
    // Set the clock frequency.
    //
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2de:	2100      	movs	r1, #0
    c2e0:	2000      	movs	r0, #0
    c2e2:	f001 fb5b 	bl	d99c <am_hal_clkgen_control>
#endif

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2e6:	48c8      	ldr	r0, [pc, #800]	; (c608 <main+0x334>)
    c2e8:	f001 fb24 	bl	d934 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2ec:	f001 fb4c 	bl	d988 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2f0:	f001 fae6 	bl	d8c0 <am_bsp_low_power_init>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_itm_printf_enable();
    c2f4:	f001 fafe 	bl	d8f4 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c2f8:	f001 fad8 	bl	d8ac <am_util_stdio_terminal_clear>
    am_util_stdio_printf("This is Apollo3 Secondary Bootloader Template Program!\r\n\r\n");
    c2fc:	48c3      	ldr	r0, [pc, #780]	; (c60c <main+0x338>)
    c2fe:	f001 fab7 	bl	d870 <am_util_stdio_printf>

    //
    // Get chip specific info
    //
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
    c302:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c306:	4619      	mov	r1, r3
    c308:	2001      	movs	r0, #1
    c30a:	f001 fee5 	bl	e0d8 <am_hal_mcuctrl_info_get>

    // If INFO0->Security->PLONEXIT was not set, SBL will keep info0 open upon transferring to main image
    // This allows the secondary bootloader to use the keys in info0 to perform any necessary validations
    // of images and/or OTA upgrades
#if AM_CMSIS_REGS
    if (MCUCTRL->SHADOWVALID_b.INFO0_VALID && MCUCTRL->BOOTLOADER_b.PROTLOCK)
    c30e:	4bc0      	ldr	r3, [pc, #768]	; (c610 <main+0x33c>)
    c310:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    c314:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c318:	b2db      	uxtb	r3, r3
    c31a:	2b00      	cmp	r3, #0
    c31c:	f000 80e1 	beq.w	c4e2 <main+0x20e>
    c320:	4bbb      	ldr	r3, [pc, #748]	; (c610 <main+0x33c>)
    c322:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    c326:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c32a:	b2db      	uxtb	r3, r3
    c32c:	2b00      	cmp	r3, #0
    c32e:	f000 80d8 	beq.w	c4e2 <main+0x20e>
#else
    if (AM_BFR(MCUCTRL, SHADOWVALID, INFO0_VALID) && AM_BFR(MCUCTRL, BOOTLOADER, PROTLOCK))
#endif
    {
        uint32_t *pCustKey = (uint32_t *)0x50021A00;
    c332:	4bb8      	ldr	r3, [pc, #736]	; (c614 <main+0x340>)
    c334:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c338:	f102 0210 	add.w	r2, r2, #16
    c33c:	6013      	str	r3, [r2, #0]
        uint32_t *pKek = (uint32_t *)0x50021800;
    c33e:	4bb6      	ldr	r3, [pc, #728]	; (c618 <main+0x344>)
    c340:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c344:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c348:	6013      	str	r3, [r2, #0]
        uint32_t *pAuthKey = (uint32_t *)0x50021880;
    c34a:	4bb4      	ldr	r3, [pc, #720]	; (c61c <main+0x348>)
    c34c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c350:	f102 0230 	add.w	r2, r2, #48	; 0x30
    c354:	6013      	str	r3, [r2, #0]
        // PROTLOCK Open
        // This should also mean that Customer key is accessible
        // All the infospace keys are available to be read - and used for OTA and image verification
        // In this template - we'll just print the values to confirm that we've access to it
        am_util_stdio_printf("Customer Key: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", pCustKey[0], pCustKey[1], pCustKey[2], pCustKey[3]);
    c356:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c35a:	f103 0310 	add.w	r3, r3, #16
    c35e:	681b      	ldr	r3, [r3, #0]
    c360:	6819      	ldr	r1, [r3, #0]
    c362:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c366:	f103 0310 	add.w	r3, r3, #16
    c36a:	681b      	ldr	r3, [r3, #0]
    c36c:	3304      	adds	r3, #4
    c36e:	681a      	ldr	r2, [r3, #0]
    c370:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c374:	f103 0310 	add.w	r3, r3, #16
    c378:	681b      	ldr	r3, [r3, #0]
    c37a:	3308      	adds	r3, #8
    c37c:	6818      	ldr	r0, [r3, #0]
    c37e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c382:	f103 0310 	add.w	r3, r3, #16
    c386:	681b      	ldr	r3, [r3, #0]
    c388:	330c      	adds	r3, #12
    c38a:	681b      	ldr	r3, [r3, #0]
    c38c:	9300      	str	r3, [sp, #0]
    c38e:	4603      	mov	r3, r0
    c390:	48a3      	ldr	r0, [pc, #652]	; (c620 <main+0x34c>)
    c392:	f001 fa6d 	bl	d870 <am_util_stdio_printf>
        // Print KEK & Auth keys
        uint32_t i = 0;
    c396:	2300      	movs	r3, #0
    c398:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c39c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c3a0:	6013      	str	r3, [r2, #0]
        am_util_stdio_printf("KEK:\n");
    c3a2:	48a0      	ldr	r0, [pc, #640]	; (c624 <main+0x350>)
    c3a4:	f001 fa64 	bl	d870 <am_util_stdio_printf>
        for (i = 0; i < 8; i++)
    c3a8:	2300      	movs	r3, #0
    c3aa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c3ae:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c3b2:	6013      	str	r3, [r2, #0]
    c3b4:	e03e      	b.n	c434 <main+0x160>
        {
            am_util_stdio_printf("Key %2d: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", i+8, pKek[0], pKek[1], pKek[2], pKek[3]);
    c3b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c3ba:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c3be:	681b      	ldr	r3, [r3, #0]
    c3c0:	f103 0108 	add.w	r1, r3, #8
    c3c4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c3c8:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c3cc:	681b      	ldr	r3, [r3, #0]
    c3ce:	6818      	ldr	r0, [r3, #0]
    c3d0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c3d4:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c3d8:	681b      	ldr	r3, [r3, #0]
    c3da:	3304      	adds	r3, #4
    c3dc:	681c      	ldr	r4, [r3, #0]
    c3de:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c3e2:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c3e6:	681b      	ldr	r3, [r3, #0]
    c3e8:	3308      	adds	r3, #8
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c3f0:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c3f4:	6812      	ldr	r2, [r2, #0]
    c3f6:	320c      	adds	r2, #12
    c3f8:	6812      	ldr	r2, [r2, #0]
    c3fa:	9201      	str	r2, [sp, #4]
    c3fc:	9300      	str	r3, [sp, #0]
    c3fe:	4623      	mov	r3, r4
    c400:	4602      	mov	r2, r0
    c402:	4889      	ldr	r0, [pc, #548]	; (c628 <main+0x354>)
    c404:	f001 fa34 	bl	d870 <am_util_stdio_printf>
            pKek += 4;
    c408:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c40c:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c410:	681b      	ldr	r3, [r3, #0]
    c412:	3310      	adds	r3, #16
    c414:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c418:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c41c:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++)
    c41e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c422:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	3301      	adds	r3, #1
    c42a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c42e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c432:	6013      	str	r3, [r2, #0]
    c434:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c438:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c43c:	681b      	ldr	r3, [r3, #0]
    c43e:	2b07      	cmp	r3, #7
    c440:	d9b9      	bls.n	c3b6 <main+0xe2>
        }
        am_util_stdio_printf("Auth:\n");
    c442:	487a      	ldr	r0, [pc, #488]	; (c62c <main+0x358>)
    c444:	f001 fa14 	bl	d870 <am_util_stdio_printf>
        for (i = 0; i < 8; i++)
    c448:	2300      	movs	r3, #0
    c44a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c44e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c452:	6013      	str	r3, [r2, #0]
    c454:	e03e      	b.n	c4d4 <main+0x200>
        {
            am_util_stdio_printf("Key %2d: 0x%08x-0x%08x-0x%08x-0x%08x\r\n", i+8, pAuthKey[0], pAuthKey[1], pAuthKey[2], pAuthKey[3]);
    c456:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c45a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	f103 0108 	add.w	r1, r3, #8
    c464:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c468:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c46c:	681b      	ldr	r3, [r3, #0]
    c46e:	6818      	ldr	r0, [r3, #0]
    c470:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c474:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	3304      	adds	r3, #4
    c47c:	681c      	ldr	r4, [r3, #0]
    c47e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c482:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	3308      	adds	r3, #8
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c490:	f102 0230 	add.w	r2, r2, #48	; 0x30
    c494:	6812      	ldr	r2, [r2, #0]
    c496:	320c      	adds	r2, #12
    c498:	6812      	ldr	r2, [r2, #0]
    c49a:	9201      	str	r2, [sp, #4]
    c49c:	9300      	str	r3, [sp, #0]
    c49e:	4623      	mov	r3, r4
    c4a0:	4602      	mov	r2, r0
    c4a2:	4861      	ldr	r0, [pc, #388]	; (c628 <main+0x354>)
    c4a4:	f001 f9e4 	bl	d870 <am_util_stdio_printf>
            pAuthKey += 4;
    c4a8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c4ac:	f103 0330 	add.w	r3, r3, #48	; 0x30
    c4b0:	681b      	ldr	r3, [r3, #0]
    c4b2:	3310      	adds	r3, #16
    c4b4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c4b8:	f102 0230 	add.w	r2, r2, #48	; 0x30
    c4bc:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++)
    c4be:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c4c2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c4c6:	681b      	ldr	r3, [r3, #0]
    c4c8:	3301      	adds	r3, #1
    c4ca:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c4ce:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    c4d2:	6013      	str	r3, [r2, #0]
    c4d4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c4d8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    c4dc:	681b      	ldr	r3, [r3, #0]
    c4de:	2b07      	cmp	r3, #7
    c4e0:	d9b9      	bls.n	c456 <main+0x182>
        }
    }

    // Process OTA's
#if AM_CMSIS_REGS
    if (MCUCTRL->OTAPOINTER_b.OTAVALID)
    c4e2:	4b4b      	ldr	r3, [pc, #300]	; (c610 <main+0x33c>)
    c4e4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
    c4e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c4ec:	b2db      	uxtb	r3, r3
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	f000 81f2 	beq.w	c8d8 <main+0x604>
#else
    if (AM_BFR(MCUCTRL, OTAPOINTER, OTAVALID))
#endif
    {
#if AM_CMSIS_REGS
        uint32_t *pOtaDesc = (uint32_t *)(MCUCTRL->OTAPOINTER & ~0x3);
    c4f4:	4b46      	ldr	r3, [pc, #280]	; (c610 <main+0x33c>)
    c4f6:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
    c4fa:	f023 0303 	bic.w	r3, r3, #3
    c4fe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c502:	f102 020c 	add.w	r2, r2, #12
    c506:	6013      	str	r3, [r2, #0]
#else
        uint32_t *pOtaDesc = (uint32_t *)(AM_REG(MCUCTRL, OTAPOINTER) & ~0x3);
#endif
        uint32_t i = 0;
    c508:	2300      	movs	r3, #0
    c50a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c50e:	f102 0228 	add.w	r2, r2, #40	; 0x28
    c512:	6013      	str	r3, [r2, #0]

        uint32_t otaImagePtr = pOtaDesc[0];
    c514:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c518:	f103 030c 	add.w	r3, r3, #12
    c51c:	681b      	ldr	r3, [r3, #0]
    c51e:	681b      	ldr	r3, [r3, #0]
    c520:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c524:	f102 0224 	add.w	r2, r2, #36	; 0x24
    c528:	6013      	str	r3, [r2, #0]

        // CAUTION: We can reprogram a bit in flash to 0 only once...so make sure we do not re-clear bits

        am_util_stdio_printf("OTA Available - OTA Desc @0x%x\n", pOtaDesc);
    c52a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c52e:	f103 030c 	add.w	r3, r3, #12
    c532:	6819      	ldr	r1, [r3, #0]
    c534:	483e      	ldr	r0, [pc, #248]	; (c630 <main+0x35c>)
    c536:	f001 f99b 	bl	d870 <am_util_stdio_printf>
        // Make sure the OTA list is valid
        // Whole OTA list is skipped if it is constructed incorrectly
        while (otaImagePtr != AM_HAL_SECURE_OTA_OTA_LIST_END_MARKER)
    c53a:	e1c4      	b.n	c8c6 <main+0x5f2>
        {
            if (AM_HAL_SECURE_OTA_OTA_IS_VALID(otaImagePtr))
    c53c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c540:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c544:	681b      	ldr	r3, [r3, #0]
    c546:	f003 0303 	and.w	r3, r3, #3
    c54a:	2b03      	cmp	r3, #3
    c54c:	f040 816e 	bne.w	c82c <main+0x558>
            {
                // This template assumes OTA images using the same formal as used by Main.
                // Users can select any image format - as long as the first byte (magic#) is kept the same.
                am_image_hdr_common_t *pComHdr;

                otaImagePtr = AM_HAL_SECURE_OTA_OTA_GET_BLOB_PTR(otaImagePtr);
    c550:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c554:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c558:	681b      	ldr	r3, [r3, #0]
    c55a:	f023 0303 	bic.w	r3, r3, #3
    c55e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c562:	f102 0224 	add.w	r2, r2, #36	; 0x24
    c566:	6013      	str	r3, [r2, #0]
                pComHdr = (am_image_hdr_common_t *)otaImagePtr;
    c568:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c56c:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c576:	f102 0208 	add.w	r2, r2, #8
    c57a:	6013      	str	r3, [r2, #0]
                // Valid OTA image
                // Make sure the image is contained within flash
                if ((otaImagePtr >= sDevice.ui32FlashSize) ||
    c57c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c580:	f103 031c 	add.w	r3, r3, #28
    c584:	681a      	ldr	r2, [r3, #0]
    c586:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c58a:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c58e:	681b      	ldr	r3, [r3, #0]
    c590:	429a      	cmp	r2, r3
    c592:	d915      	bls.n	c5c0 <main+0x2ec>
                    ((otaImagePtr + pComHdr->w0.s.blobSize) > sDevice.ui32FlashSize))
    c594:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c598:	f103 0308 	add.w	r3, r3, #8
    c59c:	681b      	ldr	r3, [r3, #0]
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c5a4:	461a      	mov	r2, r3
    c5a6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c5aa:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	441a      	add	r2, r3
    c5b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c5b6:	f103 031c 	add.w	r3, r3, #28
    c5ba:	681b      	ldr	r3, [r3, #0]
                if ((otaImagePtr >= sDevice.ui32FlashSize) ||
    c5bc:	429a      	cmp	r2, r3
    c5be:	d93d      	bls.n	c63c <main+0x368>
                {
                    // Invalidate this OTA for subsequent processing
                    am_util_stdio_printf("Found bad OTA pointing to: image address=0x%x, size 0x%x\n", otaImagePtr, pComHdr->w0.s.blobSize);
    c5c0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c5c4:	f103 0308 	add.w	r3, r3, #8
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c5d0:	461a      	mov	r2, r3
    c5d2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c5d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c5da:	6819      	ldr	r1, [r3, #0]
    c5dc:	4815      	ldr	r0, [pc, #84]	; (c634 <main+0x360>)
    c5de:	f001 f947 	bl	d870 <am_util_stdio_printf>
                    // Indicate Failure
                    am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_FAILURE_CLRMASK);
    c5e2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c5e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	009b      	lsls	r3, r3, #2
    c5ee:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c5f2:	f102 020c 	add.w	r2, r2, #12
    c5f6:	6812      	ldr	r2, [r2, #0]
    c5f8:	4413      	add	r3, r2
    c5fa:	2201      	movs	r2, #1
    c5fc:	4619      	mov	r1, r3
    c5fe:	480e      	ldr	r0, [pc, #56]	; (c638 <main+0x364>)
    c600:	f001 fa52 	bl	daa8 <am_hal_flash_clear_bits>
    c604:	e112      	b.n	c82c <main+0x558>
    c606:	bf00      	nop
    c608:	0000e63c 	.word	0x0000e63c
    c60c:	0000e40c 	.word	0x0000e40c
    c610:	40020000 	.word	0x40020000
    c614:	50021a00 	.word	0x50021a00
    c618:	50021800 	.word	0x50021800
    c61c:	50021880 	.word	0x50021880
    c620:	0000e448 	.word	0x0000e448
    c624:	0000e474 	.word	0x0000e474
    c628:	0000e47c 	.word	0x0000e47c
    c62c:	0000e4a4 	.word	0x0000e4a4
    c630:	0000e4ac 	.word	0x0000e4ac
    c634:	0000e4cc 	.word	0x0000e4cc
    c638:	12344321 	.word	0x12344321

                }
                else
                {
                    if (AM_IMAGE_MAGIC_CUST(pComHdr->w0.s.magicNum))
    c63c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c640:	f103 0308 	add.w	r3, r3, #8
    c644:	681b      	ldr	r3, [r3, #0]
    c646:	78db      	ldrb	r3, [r3, #3]
    c648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c64c:	2bc0      	cmp	r3, #192	; 0xc0
    c64e:	f040 80d9 	bne.w	c804 <main+0x530>
    c652:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c656:	f103 0308 	add.w	r3, r3, #8
    c65a:	681b      	ldr	r3, [r3, #0]
    c65c:	78db      	ldrb	r3, [r3, #3]
    c65e:	2bc0      	cmp	r3, #192	; 0xc0
    c660:	f000 80d0 	beq.w	c804 <main+0x530>
    c664:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c668:	f103 0308 	add.w	r3, r3, #8
    c66c:	681b      	ldr	r3, [r3, #0]
    c66e:	78db      	ldrb	r3, [r3, #3]
    c670:	2bcc      	cmp	r3, #204	; 0xcc
    c672:	f000 80c7 	beq.w	c804 <main+0x530>
    c676:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c67a:	f103 0308 	add.w	r3, r3, #8
    c67e:	681b      	ldr	r3, [r3, #0]
    c680:	78db      	ldrb	r3, [r3, #3]
    c682:	2bcb      	cmp	r3, #203	; 0xcb
    c684:	f000 80be 	beq.w	c804 <main+0x530>
    c688:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c68c:	f103 0308 	add.w	r3, r3, #8
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	78db      	ldrb	r3, [r3, #3]
    c694:	2bcf      	cmp	r3, #207	; 0xcf
    c696:	f000 80b5 	beq.w	c804 <main+0x530>
                    {
                        // Process OTA
                        // We can perform any necessary verification/decryption here before installing a valid OTA image
                        // install
                        // Operate only in flash page multiples
                        uint32_t size = pComHdr->w0.s.blobSize - sizeof(am_thirdparty_image_hdr_t);
    c69a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c69e:	f103 0308 	add.w	r3, r3, #8
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	681b      	ldr	r3, [r3, #0]
    c6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c6aa:	3b80      	subs	r3, #128	; 0x80
    c6ac:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c6b0:	f102 0204 	add.w	r2, r2, #4
    c6b4:	6013      	str	r3, [r2, #0]
                        uint32_t numFlashPage = (size + AM_HAL_FLASH_PAGE_SIZE - 1)/AM_HAL_FLASH_PAGE_SIZE;
    c6b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c6ba:	f103 0304 	add.w	r3, r3, #4
    c6be:	681b      	ldr	r3, [r3, #0]
    c6c0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
    c6c4:	331f      	adds	r3, #31
    c6c6:	0b5b      	lsrs	r3, r3, #13
    c6c8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c6cc:	6013      	str	r3, [r2, #0]
                        uint32_t *pDst = (uint32_t *)AM_IMAGE_GET_LOADADDR(pComHdr);
    c6ce:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c6d2:	f103 0308 	add.w	r3, r3, #8
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    c6da:	f3c3 039d 	ubfx	r3, r3, #2, #30
    c6de:	009b      	lsls	r3, r3, #2
    c6e0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c6e4:	f102 0220 	add.w	r2, r2, #32
    c6e8:	6013      	str	r3, [r2, #0]
                        uint32_t tempBuf[AM_HAL_FLASH_PAGE_SIZE/4];
                        uint32_t *pSrc = (uint32_t *)((am_thirdparty_image_hdr_t *)pComHdr + 1);
    c6ea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c6ee:	f103 0308 	add.w	r3, r3, #8
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	3380      	adds	r3, #128	; 0x80
    c6f6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c6fa:	f102 021c 	add.w	r2, r2, #28
    c6fe:	6013      	str	r3, [r2, #0]

                        am_util_stdio_printf("Found OTA @ 0x%x magic 0x%x - size 0x%x to be installed at 0x%x\n", otaImagePtr, pComHdr->w0.s.magicNum, size, pDst);
    c700:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c704:	f103 0308 	add.w	r3, r3, #8
    c708:	681b      	ldr	r3, [r3, #0]
    c70a:	78db      	ldrb	r3, [r3, #3]
    c70c:	461a      	mov	r2, r3
    c70e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c712:	f103 0320 	add.w	r3, r3, #32
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	9300      	str	r3, [sp, #0]
    c71a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c71e:	f103 0304 	add.w	r3, r3, #4
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
    c728:	f101 0124 	add.w	r1, r1, #36	; 0x24
    c72c:	6809      	ldr	r1, [r1, #0]
    c72e:	48a8      	ldr	r0, [pc, #672]	; (c9d0 <main+0x6fc>)
    c730:	f001 f89e 	bl	d870 <am_util_stdio_printf>
                        for (uint32_t i = 0; i < numFlashPage; i++)
    c734:	2300      	movs	r3, #0
    c736:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c73a:	f102 0218 	add.w	r2, r2, #24
    c73e:	6013      	str	r3, [r2, #0]
    c740:	e044      	b.n	c7cc <main+0x4f8>
                        {
                            memcpy(tempBuf, pSrc, AM_HAL_FLASH_PAGE_SIZE);
    c742:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c746:	3b38      	subs	r3, #56	; 0x38
    c748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    c74c:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
    c750:	f101 011c 	add.w	r1, r1, #28
    c754:	6809      	ldr	r1, [r1, #0]
    c756:	4618      	mov	r0, r3
    c758:	f001 fe4c 	bl	e3f4 <memcpy>
                            flash_page_erase((uint32_t)pDst);
    c75c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c760:	f103 0320 	add.w	r3, r3, #32
    c764:	681b      	ldr	r3, [r3, #0]
    c766:	4618      	mov	r0, r3
    c768:	f7ff fd9a 	bl	c2a0 <flash_page_erase>
                            am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, tempBuf, pDst, AM_HAL_FLASH_PAGE_SIZE/4);
    c76c:	f107 0138 	add.w	r1, r7, #56	; 0x38
    c770:	3938      	subs	r1, #56	; 0x38
    c772:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c776:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c77a:	f102 0220 	add.w	r2, r2, #32
    c77e:	6812      	ldr	r2, [r2, #0]
    c780:	4894      	ldr	r0, [pc, #592]	; (c9d4 <main+0x700>)
    c782:	f001 f989 	bl	da98 <am_hal_flash_program_main>
                            pSrc += AM_HAL_FLASH_PAGE_SIZE/4;
    c786:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c78a:	f103 031c 	add.w	r3, r3, #28
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    c794:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c798:	f102 021c 	add.w	r2, r2, #28
    c79c:	6013      	str	r3, [r2, #0]
                            pDst += AM_HAL_FLASH_PAGE_SIZE/4;
    c79e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c7a2:	f103 0320 	add.w	r3, r3, #32
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    c7ac:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c7b0:	f102 0220 	add.w	r2, r2, #32
    c7b4:	6013      	str	r3, [r2, #0]
                        for (uint32_t i = 0; i < numFlashPage; i++)
    c7b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c7ba:	f103 0318 	add.w	r3, r3, #24
    c7be:	681b      	ldr	r3, [r3, #0]
    c7c0:	3301      	adds	r3, #1
    c7c2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c7c6:	f102 0218 	add.w	r2, r2, #24
    c7ca:	6013      	str	r3, [r2, #0]
    c7cc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c7d0:	f103 0318 	add.w	r3, r3, #24
    c7d4:	681a      	ldr	r2, [r3, #0]
    c7d6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	429a      	cmp	r2, r3
    c7de:	d3b0      	bcc.n	c742 <main+0x46e>
                        }
                        // Indicate Success
                        am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_SUCCESS_CLRMASK);
    c7e0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c7e4:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c7e8:	681b      	ldr	r3, [r3, #0]
    c7ea:	009b      	lsls	r3, r3, #2
    c7ec:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c7f0:	f102 020c 	add.w	r2, r2, #12
    c7f4:	6812      	ldr	r2, [r2, #0]
    c7f6:	4413      	add	r3, r2
    c7f8:	2203      	movs	r2, #3
    c7fa:	4619      	mov	r1, r3
    c7fc:	4875      	ldr	r0, [pc, #468]	; (c9d4 <main+0x700>)
    c7fe:	f001 f953 	bl	daa8 <am_hal_flash_clear_bits>
                    {
    c802:	e013      	b.n	c82c <main+0x558>
                    }
                    else
                    {
                        // unknown OTA
                        am_util_stdio_printf("Found unexpected OTA\n");
    c804:	4874      	ldr	r0, [pc, #464]	; (c9d8 <main+0x704>)
    c806:	f001 f833 	bl	d870 <am_util_stdio_printf>
                        // Indicate Failure
                        am_hal_flash_clear_bits(AM_HAL_FLASH_PROGRAM_KEY, &pOtaDesc[i], AM_HAL_SECURE_OTA_OTA_DONE_FAILURE_CLRMASK);
    c80a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c80e:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	009b      	lsls	r3, r3, #2
    c816:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c81a:	f102 020c 	add.w	r2, r2, #12
    c81e:	6812      	ldr	r2, [r2, #0]
    c820:	4413      	add	r3, r2
    c822:	2201      	movs	r2, #1
    c824:	4619      	mov	r1, r3
    c826:	486b      	ldr	r0, [pc, #428]	; (c9d4 <main+0x700>)
    c828:	f001 f93e 	bl	daa8 <am_hal_flash_clear_bits>
            }
            else
            {
                // This OTA has already been invalidated...Skip
            }
            if (i++ == AM_HAL_SECURE_OTA_MAX_OTA)
    c82c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c830:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c834:	681b      	ldr	r3, [r3, #0]
    c836:	1c5a      	adds	r2, r3, #1
    c838:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
    c83c:	f101 0128 	add.w	r1, r1, #40	; 0x28
    c840:	600a      	str	r2, [r1, #0]
    c842:	2b08      	cmp	r3, #8
    c844:	d108      	bne.n	c858 <main+0x584>
            {
                am_util_stdio_printf("Exceeded maximum OTAs\n", i);
    c846:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c84a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c84e:	6819      	ldr	r1, [r3, #0]
    c850:	4862      	ldr	r0, [pc, #392]	; (c9dc <main+0x708>)
    c852:	f001 f80d 	bl	d870 <am_util_stdio_printf>
                break;
    c856:	e03f      	b.n	c8d8 <main+0x604>
            }
            if ((uint32_t)&pOtaDesc[i] >= sDevice.ui32FlashSize)
    c858:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c85c:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c860:	681b      	ldr	r3, [r3, #0]
    c862:	009b      	lsls	r3, r3, #2
    c864:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c868:	f102 020c 	add.w	r2, r2, #12
    c86c:	6812      	ldr	r2, [r2, #0]
    c86e:	4413      	add	r3, r2
    c870:	461a      	mov	r2, r3
    c872:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c876:	f103 031c 	add.w	r3, r3, #28
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	429a      	cmp	r2, r3
    c87e:	d310      	bcc.n	c8a2 <main+0x5ce>
            {
                am_util_stdio_printf("Found Invalid OTA pointer 0x%x\n", (uint32_t)&pOtaDesc[i]);
    c880:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c884:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c888:	681b      	ldr	r3, [r3, #0]
    c88a:	009b      	lsls	r3, r3, #2
    c88c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c890:	f102 020c 	add.w	r2, r2, #12
    c894:	6812      	ldr	r2, [r2, #0]
    c896:	4413      	add	r3, r2
    c898:	4619      	mov	r1, r3
    c89a:	4851      	ldr	r0, [pc, #324]	; (c9e0 <main+0x70c>)
    c89c:	f000 ffe8 	bl	d870 <am_util_stdio_printf>
                break;
    c8a0:	e01a      	b.n	c8d8 <main+0x604>
            }
            else
            {
                otaImagePtr = pOtaDesc[i];
    c8a2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c8a6:	f103 0328 	add.w	r3, r3, #40	; 0x28
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	009b      	lsls	r3, r3, #2
    c8ae:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c8b2:	f102 020c 	add.w	r2, r2, #12
    c8b6:	6812      	ldr	r2, [r2, #0]
    c8b8:	4413      	add	r3, r2
    c8ba:	681b      	ldr	r3, [r3, #0]
    c8bc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c8c0:	f102 0224 	add.w	r2, r2, #36	; 0x24
    c8c4:	6013      	str	r3, [r2, #0]
        while (otaImagePtr != AM_HAL_SECURE_OTA_OTA_LIST_END_MARKER)
    c8c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c8ca:	f103 0324 	add.w	r3, r3, #36	; 0x24
    c8ce:	681b      	ldr	r3, [r3, #0]
    c8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    c8d4:	f47f ae32 	bne.w	c53c <main+0x268>
            }
        }
    }
    // Clear OTA_POINTER
#if AM_CMSIS_REGS
    MCUCTRL->OTAPOINTER = 0;
    c8d8:	4b42      	ldr	r3, [pc, #264]	; (c9e4 <main+0x710>)
    c8da:	2200      	movs	r2, #0
    c8dc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    // Validate main image
    // This is only a place holder - Assumes raw main image @ 0x10000
    // Users can select any image format
    // Depending on the custom image format - more elaborate validation (including signature verification) can be done

    uint32_t imageAddr = MAIN_PROGRAM_ADDR_IN_FLASH;
    c8e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c8e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    c8e8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
    c8ec:	6013      	str	r3, [r2, #0]
    uint32_t sp = *((uint32_t *)imageAddr);
    c8ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c8f2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c8f6:	681b      	ldr	r3, [r3, #0]
    c8f8:	681b      	ldr	r3, [r3, #0]
    c8fa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    c8fe:	f102 0238 	add.w	r2, r2, #56	; 0x38
    c902:	6013      	str	r3, [r2, #0]
    uint32_t reset = *((uint32_t *)(imageAddr + 4));
    c904:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c908:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c90c:	681b      	ldr	r3, [r3, #0]
    c90e:	3304      	adds	r3, #4
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    c916:	f102 0234 	add.w	r2, r2, #52	; 0x34
    c91a:	6013      	str	r3, [r2, #0]
    uint32_t *pVtor = 0;
    c91c:	2300      	movs	r3, #0
    c91e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c922:	f102 0214 	add.w	r2, r2, #20
    c926:	6013      	str	r3, [r2, #0]

    // Make sure the SP & Reset vector are sane
    // Validate the Stack Pointer
    // Validate the reset vector
    if ((sp < SRAM_BASEADDR) || \
    c928:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c92c:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    c936:	d325      	bcc.n	c984 <main+0x6b0>
            (sp >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)) || \
    c938:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c93c:	f103 0320 	add.w	r3, r3, #32
    c940:	681b      	ldr	r3, [r3, #0]
    c942:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    if ((sp < SRAM_BASEADDR) || \
    c946:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c94a:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c94e:	681b      	ldr	r3, [r3, #0]
    c950:	429a      	cmp	r2, r3
    c952:	d917      	bls.n	c984 <main+0x6b0>
            (sp >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)) || \
    c954:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c958:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c95c:	681a      	ldr	r2, [r3, #0]
    c95e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c962:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c966:	681b      	ldr	r3, [r3, #0]
    c968:	429a      	cmp	r2, r3
    c96a:	d30b      	bcc.n	c984 <main+0x6b0>
            (reset < imageAddr) || \
            (reset >= sDevice.ui32FlashSize))
    c96c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c970:	f103 031c 	add.w	r3, r3, #28
    c974:	681a      	ldr	r2, [r3, #0]
            (reset < imageAddr) || \
    c976:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c97a:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c97e:	681b      	ldr	r3, [r3, #0]
    c980:	429a      	cmp	r2, r3
    c982:	d803      	bhi.n	c98c <main+0x6b8>
    {
        am_util_stdio_printf("Invalid main image\n");
    c984:	4818      	ldr	r0, [pc, #96]	; (c9e8 <main+0x714>)
    c986:	f000 ff73 	bl	d870 <am_util_stdio_printf>
    c98a:	e019      	b.n	c9c0 <main+0x6ec>
    }
    else
    {
        am_util_stdio_printf("Found valid main image - SP:0x%x RV:0x%x\n", sp, reset);
    c98c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c990:	f103 0334 	add.w	r3, r3, #52	; 0x34
    c994:	681a      	ldr	r2, [r3, #0]
    c996:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c99a:	f103 0338 	add.w	r3, r3, #56	; 0x38
    c99e:	6819      	ldr	r1, [r3, #0]
    c9a0:	4812      	ldr	r0, [pc, #72]	; (c9ec <main+0x718>)
    c9a2:	f000 ff65 	bl	d870 <am_util_stdio_printf>
        pVtor = (uint32_t *)imageAddr;
    c9a6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    c9aa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    c9ae:	681b      	ldr	r3, [r3, #0]
    c9b0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
    c9b4:	f102 0214 	add.w	r2, r2, #20
    c9b8:	6013      	str	r3, [r2, #0]
        am_util_stdio_printf("Will transfer control over to this image after locking things down\n\n\n\n");
    c9ba:	480d      	ldr	r0, [pc, #52]	; (c9f0 <main+0x71c>)
    c9bc:	f000 ff58 	bl	d870 <am_util_stdio_printf>
    }
 
    // Lock the assets (if needed) and give control to main
    am_hal_bootloader_exit(pVtor);
    c9c0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
    c9c4:	f103 0314 	add.w	r3, r3, #20
    c9c8:	6818      	ldr	r0, [r3, #0]
    c9ca:	f001 fc7b 	bl	e2c4 <am_hal_bootloader_exit>

    while(1);
    c9ce:	e7fe      	b.n	c9ce <main+0x6fa>
    c9d0:	0000e508 	.word	0x0000e508
    c9d4:	12344321 	.word	0x12344321
    c9d8:	0000e54c 	.word	0x0000e54c
    c9dc:	0000e564 	.word	0x0000e564
    c9e0:	0000e57c 	.word	0x0000e57c
    c9e4:	40020000 	.word	0x40020000
    c9e8:	0000e59c 	.word	0x0000e59c
    c9ec:	0000e5b0 	.word	0x0000e5b0
    c9f0:	0000e5dc 	.word	0x0000e5dc

0000c9f4 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c9f4:	4811      	ldr	r0, [pc, #68]	; (ca3c <zero_loop+0x12>)
    c9f6:	4912      	ldr	r1, [pc, #72]	; (ca40 <zero_loop+0x16>)
    c9f8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c9fa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c9fe:	4811      	ldr	r0, [pc, #68]	; (ca44 <zero_loop+0x1a>)
    ca00:	6801      	ldr	r1, [r0, #0]
    ca02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ca06:	6001      	str	r1, [r0, #0]
    ca08:	f3bf 8f4f 	dsb	sy
    ca0c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    ca10:	480d      	ldr	r0, [pc, #52]	; (ca48 <zero_loop+0x1e>)
    ca12:	490e      	ldr	r1, [pc, #56]	; (ca4c <zero_loop+0x22>)
    ca14:	4a0e      	ldr	r2, [pc, #56]	; (ca50 <zero_loop+0x26>)

0000ca16 <copy_loop>:
    ca16:	f850 3b04 	ldr.w	r3, [r0], #4
    ca1a:	f841 3b04 	str.w	r3, [r1], #4
    ca1e:	4291      	cmp	r1, r2
    ca20:	dbf9      	blt.n	ca16 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    ca22:	480c      	ldr	r0, [pc, #48]	; (ca54 <zero_loop+0x2a>)
    ca24:	490c      	ldr	r1, [pc, #48]	; (ca58 <zero_loop+0x2e>)
    ca26:	f04f 0200 	mov.w	r2, #0

0000ca2a <zero_loop>:
    ca2a:	4288      	cmp	r0, r1
    ca2c:	bfb8      	it	lt
    ca2e:	f840 2b04 	strlt.w	r2, [r0], #4
    ca32:	dbfa      	blt.n	ca2a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    ca34:	f7ff fc4e 	bl	c2d4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    ca38:	be00      	bkpt	0x0000
}
    ca3a:	bf00      	nop
    ca3c:	e000ed08 	.word	0xe000ed08
    ca40:	0000c100 	.word	0x0000c100
    ca44:	e000ed88 	.word	0xe000ed88
    ca48:	0000e828 	.word	0x0000e828
    ca4c:	10004000 	.word	0x10004000
    ca50:	10004000 	.word	0x10004000
    ca54:	10004000 	.word	0x10004000
    ca58:	1000410c 	.word	0x1000410c

0000ca5c <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    ca5c:	b480      	push	{r7}
    ca5e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ca60:	e7fe      	b.n	ca60 <NMI_Handler+0x4>

0000ca62 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    ca62:	b480      	push	{r7}
    ca64:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ca66:	e7fe      	b.n	ca66 <DebugMon_Handler+0x4>

0000ca68 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    ca68:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    ca6a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    ca6c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    ca6e:	f000 f809 	bl	ca84 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    ca72:	bd01      	pop	{r0, pc}
}
    ca74:	bf00      	nop
    ca76:	4618      	mov	r0, r3

0000ca78 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    ca78:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    ca7a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    ca7c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    ca7e:	4770      	bx	lr
}
    ca80:	bf00      	nop
    ca82:	4618      	mov	r0, r3

0000ca84 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    ca84:	b580      	push	{r7, lr}
    ca86:	b096      	sub	sp, #88	; 0x58
    ca88:	af00      	add	r7, sp, #0
    ca8a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    ca8c:	f107 030c 	add.w	r3, r7, #12
    ca90:	2200      	movs	r2, #0
    ca92:	601a      	str	r2, [r3, #0]
    ca94:	605a      	str	r2, [r3, #4]
    ca96:	609a      	str	r2, [r3, #8]
    ca98:	60da      	str	r2, [r3, #12]
    ca9a:	611a      	str	r2, [r3, #16]
    ca9c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    ca9e:	2300      	movs	r3, #0
    caa0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    caa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    caa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    caa6:	4b2e      	ldr	r3, [pc, #184]	; (cb60 <am_util_faultisr_collect_data+0xdc>)
    caa8:	681b      	ldr	r3, [r3, #0]
    caaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    caac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    caae:	b2db      	uxtb	r3, r3
    cab0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cab6:	0a1b      	lsrs	r3, r3, #8
    cab8:	b2db      	uxtb	r3, r3
    caba:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cabe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cac0:	0c1b      	lsrs	r3, r3, #16
    cac2:	b29b      	uxth	r3, r3
    cac4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cac8:	4b26      	ldr	r3, [pc, #152]	; (cb64 <am_util_faultisr_collect_data+0xe0>)
    caca:	681b      	ldr	r3, [r3, #0]
    cacc:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cace:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    cad2:	b2db      	uxtb	r3, r3
    cad4:	f003 0302 	and.w	r3, r3, #2
    cad8:	2b00      	cmp	r3, #0
    cada:	d005      	beq.n	cae8 <am_util_faultisr_collect_data+0x64>
    cadc:	6879      	ldr	r1, [r7, #4]
    cade:	2006      	movs	r0, #6
    cae0:	f7ff ffca 	bl	ca78 <getStackedReg>
    cae4:	4603      	mov	r3, r0
    cae6:	e001      	b.n	caec <am_util_faultisr_collect_data+0x68>
    cae8:	f04f 33ff 	mov.w	r3, #4294967295
    caec:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    caee:	6879      	ldr	r1, [r7, #4]
    caf0:	2000      	movs	r0, #0
    caf2:	f7ff ffc1 	bl	ca78 <getStackedReg>
    caf6:	4603      	mov	r3, r0
    caf8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cafa:	6879      	ldr	r1, [r7, #4]
    cafc:	2001      	movs	r0, #1
    cafe:	f7ff ffbb 	bl	ca78 <getStackedReg>
    cb02:	4603      	mov	r3, r0
    cb04:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cb06:	6879      	ldr	r1, [r7, #4]
    cb08:	2002      	movs	r0, #2
    cb0a:	f7ff ffb5 	bl	ca78 <getStackedReg>
    cb0e:	4603      	mov	r3, r0
    cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cb12:	6879      	ldr	r1, [r7, #4]
    cb14:	2003      	movs	r0, #3
    cb16:	f7ff ffaf 	bl	ca78 <getStackedReg>
    cb1a:	4603      	mov	r3, r0
    cb1c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cb1e:	6879      	ldr	r1, [r7, #4]
    cb20:	2004      	movs	r0, #4
    cb22:	f7ff ffa9 	bl	ca78 <getStackedReg>
    cb26:	4603      	mov	r3, r0
    cb28:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cb2a:	6879      	ldr	r1, [r7, #4]
    cb2c:	2005      	movs	r0, #5
    cb2e:	f7ff ffa3 	bl	ca78 <getStackedReg>
    cb32:	4603      	mov	r3, r0
    cb34:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cb36:	6879      	ldr	r1, [r7, #4]
    cb38:	2006      	movs	r0, #6
    cb3a:	f7ff ff9d 	bl	ca78 <getStackedReg>
    cb3e:	4603      	mov	r3, r0
    cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cb42:	6879      	ldr	r1, [r7, #4]
    cb44:	2007      	movs	r0, #7
    cb46:	f7ff ff97 	bl	ca78 <getStackedReg>
    cb4a:	4603      	mov	r3, r0
    cb4c:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cb4e:	f107 030c 	add.w	r3, r7, #12
    cb52:	4619      	mov	r1, r3
    cb54:	2002      	movs	r0, #2
    cb56:	f001 fabf 	bl	e0d8 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    cb5a:	2300      	movs	r3, #0
    cb5c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    cb5e:	e7fe      	b.n	cb5e <am_util_faultisr_collect_data+0xda>
    cb60:	e000ed28 	.word	0xe000ed28
    cb64:	e000ed38 	.word	0xe000ed38

0000cb68 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    cb68:	b480      	push	{r7}
    cb6a:	b083      	sub	sp, #12
    cb6c:	af00      	add	r7, sp, #0
    cb6e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    cb70:	4a04      	ldr	r2, [pc, #16]	; (cb84 <am_util_stdio_printf_init+0x1c>)
    cb72:	687b      	ldr	r3, [r7, #4]
    cb74:	6013      	str	r3, [r2, #0]
}
    cb76:	bf00      	nop
    cb78:	370c      	adds	r7, #12
    cb7a:	46bd      	mov	sp, r7
    cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb80:	4770      	bx	lr
    cb82:	bf00      	nop
    cb84:	10004108 	.word	0x10004108

0000cb88 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    cb88:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cb8c:	b096      	sub	sp, #88	; 0x58
    cb8e:	af00      	add	r7, sp, #0
    cb90:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cb94:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cb98:	0025      	movs	r5, r4
    cb9a:	2600      	movs	r6, #0
    cb9c:	ea55 0306 	orrs.w	r3, r5, r6
    cba0:	f000 80a0 	beq.w	cce4 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cba4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cba8:	0862      	lsrs	r2, r4, #1
    cbaa:	ea4f 0133 	mov.w	r1, r3, rrx
    cbae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cbb2:	ea4f 0893 	mov.w	r8, r3, lsr #2
    cbb6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    cbba:	ea4f 0994 	mov.w	r9, r4, lsr #2
    cbbe:	eb11 0308 	adds.w	r3, r1, r8
    cbc2:	eb42 0409 	adc.w	r4, r2, r9
    cbc6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    cbca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cbce:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    cbd2:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    cbd6:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    cbda:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cbde:	eb13 030a 	adds.w	r3, r3, sl
    cbe2:	eb44 040b 	adc.w	r4, r4, fp
    cbe6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    cbea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cbee:	0a1a      	lsrs	r2, r3, #8
    cbf0:	62ba      	str	r2, [r7, #40]	; 0x28
    cbf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cbf4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    cbf8:	62ba      	str	r2, [r7, #40]	; 0x28
    cbfa:	0a23      	lsrs	r3, r4, #8
    cbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    cbfe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    cc06:	18c9      	adds	r1, r1, r3
    cc08:	eb42 0204 	adc.w	r2, r2, r4
    cc0c:	460b      	mov	r3, r1
    cc0e:	4614      	mov	r4, r2
    cc10:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    cc14:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc18:	0c1a      	lsrs	r2, r3, #16
    cc1a:	623a      	str	r2, [r7, #32]
    cc1c:	6a3a      	ldr	r2, [r7, #32]
    cc1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    cc22:	623a      	str	r2, [r7, #32]
    cc24:	0c23      	lsrs	r3, r4, #16
    cc26:	627b      	str	r3, [r7, #36]	; 0x24
    cc28:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    cc30:	18c9      	adds	r1, r1, r3
    cc32:	eb42 0204 	adc.w	r2, r2, r4
    cc36:	460b      	mov	r3, r1
    cc38:	4614      	mov	r4, r2
    cc3a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    cc3e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc42:	0023      	movs	r3, r4
    cc44:	603b      	str	r3, [r7, #0]
    cc46:	2300      	movs	r3, #0
    cc48:	607b      	str	r3, [r7, #4]
    cc4a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc4e:	e897 0006 	ldmia.w	r7, {r1, r2}
    cc52:	18c9      	adds	r1, r1, r3
    cc54:	eb42 0204 	adc.w	r2, r2, r4
    cc58:	460b      	mov	r3, r1
    cc5a:	4614      	mov	r4, r2
    cc5c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    cc60:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    cc64:	08da      	lsrs	r2, r3, #3
    cc66:	613a      	str	r2, [r7, #16]
    cc68:	693a      	ldr	r2, [r7, #16]
    cc6a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    cc6e:	613a      	str	r2, [r7, #16]
    cc70:	08e3      	lsrs	r3, r4, #3
    cc72:	617b      	str	r3, [r7, #20]
    cc74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    cc78:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    cc7c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    cc80:	460b      	mov	r3, r1
    cc82:	4614      	mov	r4, r2
    cc84:	00a0      	lsls	r0, r4, #2
    cc86:	60f8      	str	r0, [r7, #12]
    cc88:	68f8      	ldr	r0, [r7, #12]
    cc8a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    cc8e:	60f8      	str	r0, [r7, #12]
    cc90:	009b      	lsls	r3, r3, #2
    cc92:	60bb      	str	r3, [r7, #8]
    cc94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cc98:	185b      	adds	r3, r3, r1
    cc9a:	eb44 0402 	adc.w	r4, r4, r2
    cc9e:	18db      	adds	r3, r3, r3
    cca0:	eb44 0404 	adc.w	r4, r4, r4
    cca4:	4619      	mov	r1, r3
    cca6:	4622      	mov	r2, r4
    cca8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    ccac:	1a5b      	subs	r3, r3, r1
    ccae:	eb64 0402 	sbc.w	r4, r4, r2
    ccb2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    ccb6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    ccba:	3306      	adds	r3, #6
    ccbc:	f144 0400 	adc.w	r4, r4, #0
    ccc0:	091a      	lsrs	r2, r3, #4
    ccc2:	61ba      	str	r2, [r7, #24]
    ccc4:	69ba      	ldr	r2, [r7, #24]
    ccc6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    ccca:	61ba      	str	r2, [r7, #24]
    cccc:	0923      	lsrs	r3, r4, #4
    ccce:	61fb      	str	r3, [r7, #28]
    ccd0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    ccd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    ccd8:	18c9      	adds	r1, r1, r3
    ccda:	eb42 0204 	adc.w	r2, r2, r4
    ccde:	460b      	mov	r3, r1
    cce0:	4614      	mov	r4, r2
    cce2:	e029      	b.n	cd38 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cce6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccea:	085a      	lsrs	r2, r3, #1
    ccec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ccee:	089b      	lsrs	r3, r3, #2
    ccf0:	4413      	add	r3, r2
    ccf2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    ccf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ccf6:	091b      	lsrs	r3, r3, #4
    ccf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ccfa:	4413      	add	r3, r2
    ccfc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    ccfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd00:	0a1b      	lsrs	r3, r3, #8
    cd02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cd04:	4413      	add	r3, r2
    cd06:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    cd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd0a:	0c1b      	lsrs	r3, r3, #16
    cd0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cd0e:	4413      	add	r3, r2
    cd10:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    cd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd14:	08db      	lsrs	r3, r3, #3
    cd16:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    cd18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cd1a:	4613      	mov	r3, r2
    cd1c:	009b      	lsls	r3, r3, #2
    cd1e:	4413      	add	r3, r2
    cd20:	005b      	lsls	r3, r3, #1
    cd22:	461a      	mov	r2, r3
    cd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd26:	1a9b      	subs	r3, r3, r2
    cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd2c:	3306      	adds	r3, #6
    cd2e:	091a      	lsrs	r2, r3, #4
    cd30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd32:	4413      	add	r3, r2
    cd34:	f04f 0400 	mov.w	r4, #0
    }
}
    cd38:	4618      	mov	r0, r3
    cd3a:	4621      	mov	r1, r4
    cd3c:	3758      	adds	r7, #88	; 0x58
    cd3e:	46bd      	mov	sp, r7
    cd40:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cd44:	4770      	bx	lr

0000cd46 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    cd46:	b590      	push	{r4, r7, lr}
    cd48:	b085      	sub	sp, #20
    cd4a:	af00      	add	r7, sp, #0
    cd4c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    cd50:	683a      	ldr	r2, [r7, #0]
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	4313      	orrs	r3, r2
    cd56:	2b00      	cmp	r3, #0
    cd58:	bf0c      	ite	eq
    cd5a:	2301      	moveq	r3, #1
    cd5c:	2300      	movne	r3, #0
    cd5e:	b2db      	uxtb	r3, r3
    cd60:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    cd62:	e008      	b.n	cd76 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    cd64:	e9d7 0100 	ldrd	r0, r1, [r7]
    cd68:	f7ff ff0e 	bl	cb88 <divu64_10>
    cd6c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    cd70:	68fb      	ldr	r3, [r7, #12]
    cd72:	3301      	adds	r3, #1
    cd74:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    cd76:	e897 0018 	ldmia.w	r7, {r3, r4}
    cd7a:	4323      	orrs	r3, r4
    cd7c:	d1f2      	bne.n	cd64 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    cd7e:	68fb      	ldr	r3, [r7, #12]
}
    cd80:	4618      	mov	r0, r3
    cd82:	3714      	adds	r7, #20
    cd84:	46bd      	mov	sp, r7
    cd86:	bd90      	pop	{r4, r7, pc}

0000cd88 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cd88:	b590      	push	{r4, r7, lr}
    cd8a:	b083      	sub	sp, #12
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    cd92:	e897 0018 	ldmia.w	r7, {r3, r4}
    cd96:	2b00      	cmp	r3, #0
    cd98:	f174 0300 	sbcs.w	r3, r4, #0
    cd9c:	da06      	bge.n	cdac <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cd9e:	e897 0018 	ldmia.w	r7, {r3, r4}
    cda2:	425b      	negs	r3, r3
    cda4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cda8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cdac:	e897 0018 	ldmia.w	r7, {r3, r4}
    cdb0:	4618      	mov	r0, r3
    cdb2:	4621      	mov	r1, r4
    cdb4:	f7ff ffc7 	bl	cd46 <ndigits_in_u64>
    cdb8:	4603      	mov	r3, r0
}
    cdba:	4618      	mov	r0, r3
    cdbc:	370c      	adds	r7, #12
    cdbe:	46bd      	mov	sp, r7
    cdc0:	bd90      	pop	{r4, r7, pc}

0000cdc2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cdc2:	b490      	push	{r4, r7}
    cdc4:	b084      	sub	sp, #16
    cdc6:	af00      	add	r7, sp, #0
    cdc8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    cdcc:	6839      	ldr	r1, [r7, #0]
    cdce:	687a      	ldr	r2, [r7, #4]
    cdd0:	430a      	orrs	r2, r1
    cdd2:	2a00      	cmp	r2, #0
    cdd4:	bf0c      	ite	eq
    cdd6:	2201      	moveq	r2, #1
    cdd8:	2200      	movne	r2, #0
    cdda:	b2d2      	uxtb	r2, r2
    cddc:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    cdde:	e00a      	b.n	cdf6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    cde0:	e897 0006 	ldmia.w	r7, {r1, r2}
    cde4:	090b      	lsrs	r3, r1, #4
    cde6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    cdea:	0914      	lsrs	r4, r2, #4
    cdec:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    cdf0:	68fa      	ldr	r2, [r7, #12]
    cdf2:	3201      	adds	r2, #1
    cdf4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    cdf6:	e897 0006 	ldmia.w	r7, {r1, r2}
    cdfa:	430a      	orrs	r2, r1
    cdfc:	d1f0      	bne.n	cde0 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    cdfe:	68fb      	ldr	r3, [r7, #12]
}
    ce00:	4618      	mov	r0, r3
    ce02:	3710      	adds	r7, #16
    ce04:	46bd      	mov	sp, r7
    ce06:	bc90      	pop	{r4, r7}
    ce08:	4770      	bx	lr

0000ce0a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    ce0a:	b480      	push	{r7}
    ce0c:	b087      	sub	sp, #28
    ce0e:	af00      	add	r7, sp, #0
    ce10:	6078      	str	r0, [r7, #4]
    ce12:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    ce14:	2300      	movs	r3, #0
    ce16:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    ce18:	2300      	movs	r3, #0
    ce1a:	613b      	str	r3, [r7, #16]
    ce1c:	2300      	movs	r3, #0
    ce1e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    ce20:	687b      	ldr	r3, [r7, #4]
    ce22:	781b      	ldrb	r3, [r3, #0]
    ce24:	2b2d      	cmp	r3, #45	; 0x2d
    ce26:	d11b      	bne.n	ce60 <decstr_to_int+0x56>
    {
        bNeg = true;
    ce28:	2301      	movs	r3, #1
    ce2a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    ce2c:	687b      	ldr	r3, [r7, #4]
    ce2e:	3301      	adds	r3, #1
    ce30:	607b      	str	r3, [r7, #4]
        uCnt++;
    ce32:	68fb      	ldr	r3, [r7, #12]
    ce34:	3301      	adds	r3, #1
    ce36:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce38:	e012      	b.n	ce60 <decstr_to_int+0x56>
    {
        ++uCnt;
    ce3a:	68fb      	ldr	r3, [r7, #12]
    ce3c:	3301      	adds	r3, #1
    ce3e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    ce40:	693a      	ldr	r2, [r7, #16]
    ce42:	4613      	mov	r3, r2
    ce44:	009b      	lsls	r3, r3, #2
    ce46:	4413      	add	r3, r2
    ce48:	005b      	lsls	r3, r3, #1
    ce4a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	461a      	mov	r2, r3
    ce52:	693b      	ldr	r3, [r7, #16]
    ce54:	4413      	add	r3, r2
    ce56:	3b30      	subs	r3, #48	; 0x30
    ce58:	613b      	str	r3, [r7, #16]
        pcStr++;
    ce5a:	687b      	ldr	r3, [r7, #4]
    ce5c:	3301      	adds	r3, #1
    ce5e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce60:	687b      	ldr	r3, [r7, #4]
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	2b2f      	cmp	r3, #47	; 0x2f
    ce66:	d903      	bls.n	ce70 <decstr_to_int+0x66>
    ce68:	687b      	ldr	r3, [r7, #4]
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	2b39      	cmp	r3, #57	; 0x39
    ce6e:	d9e4      	bls.n	ce3a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ce70:	683b      	ldr	r3, [r7, #0]
    ce72:	2b00      	cmp	r3, #0
    ce74:	d002      	beq.n	ce7c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ce76:	683b      	ldr	r3, [r7, #0]
    ce78:	68fa      	ldr	r2, [r7, #12]
    ce7a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ce7c:	7dfb      	ldrb	r3, [r7, #23]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d002      	beq.n	ce88 <decstr_to_int+0x7e>
    ce82:	693b      	ldr	r3, [r7, #16]
    ce84:	425b      	negs	r3, r3
    ce86:	e000      	b.n	ce8a <decstr_to_int+0x80>
    ce88:	693b      	ldr	r3, [r7, #16]
}
    ce8a:	4618      	mov	r0, r3
    ce8c:	371c      	adds	r7, #28
    ce8e:	46bd      	mov	sp, r7
    ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce94:	4770      	bx	lr

0000ce96 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ce96:	b590      	push	{r4, r7, lr}
    ce98:	b091      	sub	sp, #68	; 0x44
    ce9a:	af00      	add	r7, sp, #0
    ce9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cea0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cea2:	2300      	movs	r3, #0
    cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    cea6:	2300      	movs	r3, #0
    cea8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ceaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    ceae:	f7ff fe6b 	bl	cb88 <divu64_10>
    ceb2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ceb6:	68b9      	ldr	r1, [r7, #8]
    ceb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ceba:	4613      	mov	r3, r2
    cebc:	009b      	lsls	r3, r3, #2
    cebe:	4413      	add	r3, r2
    cec0:	005b      	lsls	r3, r3, #1
    cec2:	1acb      	subs	r3, r1, r3
    cec4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cec8:	1c5a      	adds	r2, r3, #1
    ceca:	63fa      	str	r2, [r7, #60]	; 0x3c
    cecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cece:	b2d2      	uxtb	r2, r2
    ced0:	3230      	adds	r2, #48	; 0x30
    ced2:	b2d2      	uxtb	r2, r2
    ced4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    ced8:	440b      	add	r3, r1
    ceda:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cede:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cee2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    cee6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    ceea:	4323      	orrs	r3, r4
    ceec:	d1dd      	bne.n	ceaa <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ceee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cef0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cef2:	687b      	ldr	r3, [r7, #4]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d011      	beq.n	cf1c <uint64_to_str+0x86>
    {
        while ( ix-- )
    cef8:	e008      	b.n	cf0c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    cefa:	687b      	ldr	r3, [r7, #4]
    cefc:	1c5a      	adds	r2, r3, #1
    cefe:	607a      	str	r2, [r7, #4]
    cf00:	f107 0110 	add.w	r1, r7, #16
    cf04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf06:	440a      	add	r2, r1
    cf08:	7812      	ldrb	r2, [r2, #0]
    cf0a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf0e:	1e5a      	subs	r2, r3, #1
    cf10:	63fa      	str	r2, [r7, #60]	; 0x3c
    cf12:	2b00      	cmp	r3, #0
    cf14:	d1f1      	bne.n	cefa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	2200      	movs	r2, #0
    cf1a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    cf1e:	4618      	mov	r0, r3
    cf20:	3744      	adds	r7, #68	; 0x44
    cf22:	46bd      	mov	sp, r7
    cf24:	bd90      	pop	{r4, r7, pc}

0000cf26 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cf26:	b4b0      	push	{r4, r5, r7}
    cf28:	b08d      	sub	sp, #52	; 0x34
    cf2a:	af00      	add	r7, sp, #0
    cf2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cf30:	607a      	str	r2, [r7, #4]
    cf32:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cf34:	2300      	movs	r3, #0
    cf36:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cf38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cf3c:	4313      	orrs	r3, r2
    cf3e:	d131      	bne.n	cfa4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf42:	1c5a      	adds	r2, r3, #1
    cf44:	62fa      	str	r2, [r7, #44]	; 0x2c
    cf46:	f107 0230 	add.w	r2, r7, #48	; 0x30
    cf4a:	4413      	add	r3, r2
    cf4c:	2230      	movs	r2, #48	; 0x30
    cf4e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cf52:	e027      	b.n	cfa4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    cf54:	7a3b      	ldrb	r3, [r7, #8]
    cf56:	f003 030f 	and.w	r3, r3, #15
    cf5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cf5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cf62:	2b09      	cmp	r3, #9
    cf64:	d90a      	bls.n	cf7c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cf66:	78fb      	ldrb	r3, [r7, #3]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	d001      	beq.n	cf70 <uint64_to_hexstr+0x4a>
    cf6c:	2227      	movs	r2, #39	; 0x27
    cf6e:	e000      	b.n	cf72 <uint64_to_hexstr+0x4c>
    cf70:	2207      	movs	r2, #7
    cf72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cf76:	4413      	add	r3, r2
    cf78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf7e:	1c5a      	adds	r2, r3, #1
    cf80:	62fa      	str	r2, [r7, #44]	; 0x2c
    cf82:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cf86:	3230      	adds	r2, #48	; 0x30
    cf88:	b2d2      	uxtb	r2, r2
    cf8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cf8e:	440b      	add	r3, r1
    cf90:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cf94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cf98:	0914      	lsrs	r4, r2, #4
    cf9a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cf9e:	091d      	lsrs	r5, r3, #4
    cfa0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cfa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cfa8:	4313      	orrs	r3, r2
    cfaa:	d1d3      	bne.n	cf54 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfae:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d011      	beq.n	cfda <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cfb6:	e008      	b.n	cfca <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cfb8:	687b      	ldr	r3, [r7, #4]
    cfba:	1c5a      	adds	r2, r3, #1
    cfbc:	607a      	str	r2, [r7, #4]
    cfbe:	f107 0110 	add.w	r1, r7, #16
    cfc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cfc4:	440a      	add	r2, r1
    cfc6:	7812      	ldrb	r2, [r2, #0]
    cfc8:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfcc:	1e5a      	subs	r2, r3, #1
    cfce:	62fa      	str	r2, [r7, #44]	; 0x2c
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d1f1      	bne.n	cfb8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	2200      	movs	r2, #0
    cfd8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cfdc:	4618      	mov	r0, r3
    cfde:	3734      	adds	r7, #52	; 0x34
    cfe0:	46bd      	mov	sp, r7
    cfe2:	bcb0      	pop	{r4, r5, r7}
    cfe4:	4770      	bx	lr

0000cfe6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cfe6:	b480      	push	{r7}
    cfe8:	b085      	sub	sp, #20
    cfea:	af00      	add	r7, sp, #0
    cfec:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cfee:	2300      	movs	r3, #0
    cff0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	2b00      	cmp	r3, #0
    cff6:	d104      	bne.n	d002 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cff8:	68fb      	ldr	r3, [r7, #12]
    cffa:	e009      	b.n	d010 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cffc:	68fb      	ldr	r3, [r7, #12]
    cffe:	3301      	adds	r3, #1
    d000:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d002:	687b      	ldr	r3, [r7, #4]
    d004:	1c5a      	adds	r2, r3, #1
    d006:	607a      	str	r2, [r7, #4]
    d008:	781b      	ldrb	r3, [r3, #0]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d1f6      	bne.n	cffc <simple_strlen+0x16>
    }
    return ui32RetVal;
    d00e:	68fb      	ldr	r3, [r7, #12]
}
    d010:	4618      	mov	r0, r3
    d012:	3714      	adds	r7, #20
    d014:	46bd      	mov	sp, r7
    d016:	f85d 7b04 	ldr.w	r7, [sp], #4
    d01a:	4770      	bx	lr

0000d01c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d01c:	b480      	push	{r7}
    d01e:	b087      	sub	sp, #28
    d020:	af00      	add	r7, sp, #0
    d022:	60f8      	str	r0, [r7, #12]
    d024:	460b      	mov	r3, r1
    d026:	607a      	str	r2, [r7, #4]
    d028:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d02a:	2300      	movs	r3, #0
    d02c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d02e:	687b      	ldr	r3, [r7, #4]
    d030:	2b00      	cmp	r3, #0
    d032:	dc0c      	bgt.n	d04e <padbuffer+0x32>
    {
        return i32Cnt;
    d034:	697b      	ldr	r3, [r7, #20]
    d036:	e010      	b.n	d05a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d038:	68fb      	ldr	r3, [r7, #12]
    d03a:	2b00      	cmp	r3, #0
    d03c:	d004      	beq.n	d048 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d03e:	68fb      	ldr	r3, [r7, #12]
    d040:	1c5a      	adds	r2, r3, #1
    d042:	60fa      	str	r2, [r7, #12]
    d044:	7afa      	ldrb	r2, [r7, #11]
    d046:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d048:	697b      	ldr	r3, [r7, #20]
    d04a:	3301      	adds	r3, #1
    d04c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d04e:	687b      	ldr	r3, [r7, #4]
    d050:	1e5a      	subs	r2, r3, #1
    d052:	607a      	str	r2, [r7, #4]
    d054:	2b00      	cmp	r3, #0
    d056:	d1ef      	bne.n	d038 <padbuffer+0x1c>
    }

    return i32Cnt;
    d058:	697b      	ldr	r3, [r7, #20]
}
    d05a:	4618      	mov	r0, r3
    d05c:	371c      	adds	r7, #28
    d05e:	46bd      	mov	sp, r7
    d060:	f85d 7b04 	ldr.w	r7, [sp], #4
    d064:	4770      	bx	lr
	...

0000d068 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d068:	b590      	push	{r4, r7, lr}
    d06a:	b08f      	sub	sp, #60	; 0x3c
    d06c:	af00      	add	r7, sp, #0
    d06e:	60f8      	str	r0, [r7, #12]
    d070:	60b9      	str	r1, [r7, #8]
    d072:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d074:	68bb      	ldr	r3, [r7, #8]
    d076:	681b      	ldr	r3, [r3, #0]
    d078:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d07c:	2b03      	cmp	r3, #3
    d07e:	dc02      	bgt.n	d086 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d080:	f06f 0302 	mvn.w	r3, #2
    d084:	e0e7      	b.n	d256 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    d086:	edd7 7a03 	vldr	s15, [r7, #12]
    d08a:	eef5 7a40 	vcmp.f32	s15, #0.0
    d08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d092:	d104      	bne.n	d09e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d094:	68bb      	ldr	r3, [r7, #8]
    d096:	4a72      	ldr	r2, [pc, #456]	; (d260 <ftoa+0x1f8>)
    d098:	601a      	str	r2, [r3, #0]
        return 3;
    d09a:	2303      	movs	r3, #3
    d09c:	e0db      	b.n	d256 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    d09e:	68bb      	ldr	r3, [r7, #8]
    d0a0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d0a2:	68fb      	ldr	r3, [r7, #12]
    d0a4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d0a6:	693b      	ldr	r3, [r7, #16]
    d0a8:	15db      	asrs	r3, r3, #23
    d0aa:	b2db      	uxtb	r3, r3
    d0ac:	3b7f      	subs	r3, #127	; 0x7f
    d0ae:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d0b0:	693b      	ldr	r3, [r7, #16]
    d0b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d0b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d0ba:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d0bc:	2300      	movs	r3, #0
    d0be:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d0c0:	2300      	movs	r3, #0
    d0c2:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d0c4:	69fb      	ldr	r3, [r7, #28]
    d0c6:	2b1e      	cmp	r3, #30
    d0c8:	dd02      	ble.n	d0d0 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d0ca:	f06f 0301 	mvn.w	r3, #1
    d0ce:	e0c2      	b.n	d256 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    d0d0:	69fb      	ldr	r3, [r7, #28]
    d0d2:	f113 0f17 	cmn.w	r3, #23
    d0d6:	da02      	bge.n	d0de <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d0d8:	f04f 33ff 	mov.w	r3, #4294967295
    d0dc:	e0bb      	b.n	d256 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    d0de:	69fb      	ldr	r3, [r7, #28]
    d0e0:	2b16      	cmp	r3, #22
    d0e2:	dd06      	ble.n	d0f2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d0e4:	69fb      	ldr	r3, [r7, #28]
    d0e6:	3b17      	subs	r3, #23
    d0e8:	69ba      	ldr	r2, [r7, #24]
    d0ea:	fa02 f303 	lsl.w	r3, r2, r3
    d0ee:	637b      	str	r3, [r7, #52]	; 0x34
    d0f0:	e01a      	b.n	d128 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d0f2:	69fb      	ldr	r3, [r7, #28]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	db0f      	blt.n	d118 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d0f8:	69fb      	ldr	r3, [r7, #28]
    d0fa:	f1c3 0317 	rsb	r3, r3, #23
    d0fe:	69ba      	ldr	r2, [r7, #24]
    d100:	fa42 f303 	asr.w	r3, r2, r3
    d104:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d106:	69fb      	ldr	r3, [r7, #28]
    d108:	3301      	adds	r3, #1
    d10a:	69ba      	ldr	r2, [r7, #24]
    d10c:	fa02 f303 	lsl.w	r3, r2, r3
    d110:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d114:	633b      	str	r3, [r7, #48]	; 0x30
    d116:	e007      	b.n	d128 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d118:	69bb      	ldr	r3, [r7, #24]
    d11a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d11e:	69fb      	ldr	r3, [r7, #28]
    d120:	43db      	mvns	r3, r3
    d122:	fa42 f303 	asr.w	r3, r2, r3
    d126:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d128:	693b      	ldr	r3, [r7, #16]
    d12a:	2b00      	cmp	r3, #0
    d12c:	da04      	bge.n	d138 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d12e:	68bb      	ldr	r3, [r7, #8]
    d130:	1c5a      	adds	r2, r3, #1
    d132:	60ba      	str	r2, [r7, #8]
    d134:	222d      	movs	r2, #45	; 0x2d
    d136:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d13a:	2b00      	cmp	r3, #0
    d13c:	d105      	bne.n	d14a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d13e:	68bb      	ldr	r3, [r7, #8]
    d140:	1c5a      	adds	r2, r3, #1
    d142:	60ba      	str	r2, [r7, #8]
    d144:	2230      	movs	r2, #48	; 0x30
    d146:	701a      	strb	r2, [r3, #0]
    d148:	e021      	b.n	d18e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d14c:	2b00      	cmp	r3, #0
    d14e:	dd08      	ble.n	d162 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d152:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d156:	68ba      	ldr	r2, [r7, #8]
    d158:	4618      	mov	r0, r3
    d15a:	4621      	mov	r1, r4
    d15c:	f7ff fe9b 	bl	ce96 <uint64_to_str>
    d160:	e011      	b.n	d186 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    d162:	68bb      	ldr	r3, [r7, #8]
    d164:	1c5a      	adds	r2, r3, #1
    d166:	60ba      	str	r2, [r7, #8]
    d168:	222d      	movs	r2, #45	; 0x2d
    d16a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d16e:	425b      	negs	r3, r3
    d170:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d174:	68ba      	ldr	r2, [r7, #8]
    d176:	4618      	mov	r0, r3
    d178:	4621      	mov	r1, r4
    d17a:	f7ff fe8c 	bl	ce96 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d17e:	e002      	b.n	d186 <ftoa+0x11e>
        {
            pcBuf++;
    d180:	68bb      	ldr	r3, [r7, #8]
    d182:	3301      	adds	r3, #1
    d184:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    d186:	68bb      	ldr	r3, [r7, #8]
    d188:	781b      	ldrb	r3, [r3, #0]
    d18a:	2b00      	cmp	r3, #0
    d18c:	d1f8      	bne.n	d180 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d18e:	68bb      	ldr	r3, [r7, #8]
    d190:	1c5a      	adds	r2, r3, #1
    d192:	60ba      	str	r2, [r7, #8]
    d194:	222e      	movs	r2, #46	; 0x2e
    d196:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d19a:	2b00      	cmp	r3, #0
    d19c:	d105      	bne.n	d1aa <ftoa+0x142>
    {
        *pcBuf++ = '0';
    d19e:	68bb      	ldr	r3, [r7, #8]
    d1a0:	1c5a      	adds	r2, r3, #1
    d1a2:	60ba      	str	r2, [r7, #8]
    d1a4:	2230      	movs	r2, #48	; 0x30
    d1a6:	701a      	strb	r2, [r3, #0]
    d1a8:	e04f      	b.n	d24a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d1aa:	68ba      	ldr	r2, [r7, #8]
    d1ac:	6a3b      	ldr	r3, [r7, #32]
    d1ae:	1ad3      	subs	r3, r2, r3
    d1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d1b2:	1ad3      	subs	r3, r2, r3
    d1b4:	3b01      	subs	r3, #1
    d1b6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d1b8:	697a      	ldr	r2, [r7, #20]
    d1ba:	687b      	ldr	r3, [r7, #4]
    d1bc:	4293      	cmp	r3, r2
    d1be:	bfa8      	it	ge
    d1c0:	4613      	movge	r3, r2
    d1c2:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    d1c4:	2300      	movs	r3, #0
    d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
    d1c8:	e015      	b.n	d1f6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    d1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d1cc:	4613      	mov	r3, r2
    d1ce:	009b      	lsls	r3, r3, #2
    d1d0:	4413      	add	r3, r2
    d1d2:	005b      	lsls	r3, r3, #1
    d1d4:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d1d6:	68bb      	ldr	r3, [r7, #8]
    d1d8:	1c5a      	adds	r2, r3, #1
    d1da:	60ba      	str	r2, [r7, #8]
    d1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d1de:	1612      	asrs	r2, r2, #24
    d1e0:	b2d2      	uxtb	r2, r2
    d1e2:	3230      	adds	r2, #48	; 0x30
    d1e4:	b2d2      	uxtb	r2, r2
    d1e6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d1ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d1ee:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1f2:	3301      	adds	r3, #1
    d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
    d1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d1f8:	697b      	ldr	r3, [r7, #20]
    d1fa:	429a      	cmp	r2, r3
    d1fc:	dbe5      	blt.n	d1ca <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d1fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d200:	4613      	mov	r3, r2
    d202:	009b      	lsls	r3, r3, #2
    d204:	4413      	add	r3, r2
    d206:	005b      	lsls	r3, r3, #1
    d208:	161b      	asrs	r3, r3, #24
    d20a:	2b04      	cmp	r3, #4
    d20c:	dd1d      	ble.n	d24a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d20e:	68bb      	ldr	r3, [r7, #8]
    d210:	3b01      	subs	r3, #1
    d212:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d214:	e015      	b.n	d242 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d218:	781b      	ldrb	r3, [r3, #0]
    d21a:	2b2e      	cmp	r3, #46	; 0x2e
    d21c:	d00e      	beq.n	d23c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d220:	781b      	ldrb	r3, [r3, #0]
    d222:	2b39      	cmp	r3, #57	; 0x39
    d224:	d103      	bne.n	d22e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d228:	2230      	movs	r2, #48	; 0x30
    d22a:	701a      	strb	r2, [r3, #0]
    d22c:	e006      	b.n	d23c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	3301      	adds	r3, #1
    d234:	b2da      	uxtb	r2, r3
    d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d238:	701a      	strb	r2, [r3, #0]
                    break;
    d23a:	e006      	b.n	d24a <ftoa+0x1e2>
                }
                pcBuftmp--;
    d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d23e:	3b01      	subs	r3, #1
    d240:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d244:	6a3b      	ldr	r3, [r7, #32]
    d246:	429a      	cmp	r2, r3
    d248:	d2e5      	bcs.n	d216 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d24a:	68bb      	ldr	r3, [r7, #8]
    d24c:	2200      	movs	r2, #0
    d24e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d250:	68ba      	ldr	r2, [r7, #8]
    d252:	6a3b      	ldr	r3, [r7, #32]
    d254:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d256:	4618      	mov	r0, r3
    d258:	373c      	adds	r7, #60	; 0x3c
    d25a:	46bd      	mov	sp, r7
    d25c:	bd90      	pop	{r4, r7, pc}
    d25e:	bf00      	nop
    d260:	00302e30 	.word	0x00302e30

0000d264 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d264:	b590      	push	{r4, r7, lr}
    d266:	b095      	sub	sp, #84	; 0x54
    d268:	af00      	add	r7, sp, #0
    d26a:	60f8      	str	r0, [r7, #12]
    d26c:	60b9      	str	r1, [r7, #8]
    d26e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d270:	2300      	movs	r3, #0
    d272:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d274:	2300      	movs	r3, #0
    d276:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    d278:	e2e3      	b.n	d842 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d27a:	2306      	movs	r3, #6
    d27c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    d27e:	68bb      	ldr	r3, [r7, #8]
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	2b25      	cmp	r3, #37	; 0x25
    d284:	d01f      	beq.n	d2c6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d286:	68fb      	ldr	r3, [r7, #12]
    d288:	2b00      	cmp	r3, #0
    d28a:	d015      	beq.n	d2b8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d28c:	68bb      	ldr	r3, [r7, #8]
    d28e:	781b      	ldrb	r3, [r3, #0]
    d290:	2b0a      	cmp	r3, #10
    d292:	d10b      	bne.n	d2ac <am_util_stdio_vsprintf+0x48>
    d294:	4bb1      	ldr	r3, [pc, #708]	; (d55c <am_util_stdio_vsprintf+0x2f8>)
    d296:	781b      	ldrb	r3, [r3, #0]
    d298:	2b00      	cmp	r3, #0
    d29a:	d007      	beq.n	d2ac <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d29c:	68fb      	ldr	r3, [r7, #12]
    d29e:	1c5a      	adds	r2, r3, #1
    d2a0:	60fa      	str	r2, [r7, #12]
    d2a2:	220d      	movs	r2, #13
    d2a4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2a8:	3301      	adds	r3, #1
    d2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    d2ac:	68fb      	ldr	r3, [r7, #12]
    d2ae:	1c5a      	adds	r2, r3, #1
    d2b0:	60fa      	str	r2, [r7, #12]
    d2b2:	68ba      	ldr	r2, [r7, #8]
    d2b4:	7812      	ldrb	r2, [r2, #0]
    d2b6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d2b8:	68bb      	ldr	r3, [r7, #8]
    d2ba:	3301      	adds	r3, #1
    d2bc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    d2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2c0:	3301      	adds	r3, #1
    d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    d2c4:	e2bd      	b.n	d842 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d2c6:	68bb      	ldr	r3, [r7, #8]
    d2c8:	3301      	adds	r3, #1
    d2ca:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    d2cc:	2300      	movs	r3, #0
    d2ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    d2d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d2d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d2da:	2320      	movs	r3, #32
    d2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    d2e0:	68bb      	ldr	r3, [r7, #8]
    d2e2:	781b      	ldrb	r3, [r3, #0]
    d2e4:	2b30      	cmp	r3, #48	; 0x30
    d2e6:	d105      	bne.n	d2f4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d2e8:	2330      	movs	r3, #48	; 0x30
    d2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    d2ee:	68bb      	ldr	r3, [r7, #8]
    d2f0:	3301      	adds	r3, #1
    d2f2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d2f4:	f107 0310 	add.w	r3, r7, #16
    d2f8:	4619      	mov	r1, r3
    d2fa:	68b8      	ldr	r0, [r7, #8]
    d2fc:	f7ff fd85 	bl	ce0a <decstr_to_int>
    d300:	4603      	mov	r3, r0
    d302:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    d304:	693b      	ldr	r3, [r7, #16]
    d306:	68ba      	ldr	r2, [r7, #8]
    d308:	4413      	add	r3, r2
    d30a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d30c:	68bb      	ldr	r3, [r7, #8]
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	2b73      	cmp	r3, #115	; 0x73
    d312:	d005      	beq.n	d320 <am_util_stdio_vsprintf+0xbc>
    d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d316:	2b00      	cmp	r3, #0
    d318:	da02      	bge.n	d320 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d31c:	425b      	negs	r3, r3
    d31e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d320:	68bb      	ldr	r3, [r7, #8]
    d322:	781b      	ldrb	r3, [r3, #0]
    d324:	2b2e      	cmp	r3, #46	; 0x2e
    d326:	d10e      	bne.n	d346 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d328:	68bb      	ldr	r3, [r7, #8]
    d32a:	3301      	adds	r3, #1
    d32c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d32e:	f107 0310 	add.w	r3, r7, #16
    d332:	4619      	mov	r1, r3
    d334:	68b8      	ldr	r0, [r7, #8]
    d336:	f7ff fd68 	bl	ce0a <decstr_to_int>
    d33a:	4603      	mov	r3, r0
    d33c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d33e:	693b      	ldr	r3, [r7, #16]
    d340:	68ba      	ldr	r2, [r7, #8]
    d342:	4413      	add	r3, r2
    d344:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d346:	68bb      	ldr	r3, [r7, #8]
    d348:	781b      	ldrb	r3, [r3, #0]
    d34a:	2b6c      	cmp	r3, #108	; 0x6c
    d34c:	d10c      	bne.n	d368 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d34e:	68bb      	ldr	r3, [r7, #8]
    d350:	3301      	adds	r3, #1
    d352:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d354:	68bb      	ldr	r3, [r7, #8]
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	2b6c      	cmp	r3, #108	; 0x6c
    d35a:	d105      	bne.n	d368 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d35c:	68bb      	ldr	r3, [r7, #8]
    d35e:	3301      	adds	r3, #1
    d360:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d362:	2301      	movs	r3, #1
    d364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d368:	68bb      	ldr	r3, [r7, #8]
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	3b46      	subs	r3, #70	; 0x46
    d36e:	2b32      	cmp	r3, #50	; 0x32
    d370:	f200 8254 	bhi.w	d81c <am_util_stdio_vsprintf+0x5b8>
    d374:	a201      	add	r2, pc, #4	; (adr r2, d37c <am_util_stdio_vsprintf+0x118>)
    d376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d37a:	bf00      	nop
    d37c:	0000d7a7 	.word	0x0000d7a7
    d380:	0000d81d 	.word	0x0000d81d
    d384:	0000d81d 	.word	0x0000d81d
    d388:	0000d81d 	.word	0x0000d81d
    d38c:	0000d81d 	.word	0x0000d81d
    d390:	0000d81d 	.word	0x0000d81d
    d394:	0000d81d 	.word	0x0000d81d
    d398:	0000d81d 	.word	0x0000d81d
    d39c:	0000d81d 	.word	0x0000d81d
    d3a0:	0000d81d 	.word	0x0000d81d
    d3a4:	0000d81d 	.word	0x0000d81d
    d3a8:	0000d81d 	.word	0x0000d81d
    d3ac:	0000d81d 	.word	0x0000d81d
    d3b0:	0000d81d 	.word	0x0000d81d
    d3b4:	0000d81d 	.word	0x0000d81d
    d3b8:	0000d81d 	.word	0x0000d81d
    d3bc:	0000d81d 	.word	0x0000d81d
    d3c0:	0000d81d 	.word	0x0000d81d
    d3c4:	0000d543 	.word	0x0000d543
    d3c8:	0000d81d 	.word	0x0000d81d
    d3cc:	0000d81d 	.word	0x0000d81d
    d3d0:	0000d81d 	.word	0x0000d81d
    d3d4:	0000d81d 	.word	0x0000d81d
    d3d8:	0000d81d 	.word	0x0000d81d
    d3dc:	0000d81d 	.word	0x0000d81d
    d3e0:	0000d81d 	.word	0x0000d81d
    d3e4:	0000d81d 	.word	0x0000d81d
    d3e8:	0000d81d 	.word	0x0000d81d
    d3ec:	0000d81d 	.word	0x0000d81d
    d3f0:	0000d449 	.word	0x0000d449
    d3f4:	0000d66f 	.word	0x0000d66f
    d3f8:	0000d81d 	.word	0x0000d81d
    d3fc:	0000d7a7 	.word	0x0000d7a7
    d400:	0000d81d 	.word	0x0000d81d
    d404:	0000d81d 	.word	0x0000d81d
    d408:	0000d66f 	.word	0x0000d66f
    d40c:	0000d81d 	.word	0x0000d81d
    d410:	0000d81d 	.word	0x0000d81d
    d414:	0000d81d 	.word	0x0000d81d
    d418:	0000d81d 	.word	0x0000d81d
    d41c:	0000d81d 	.word	0x0000d81d
    d420:	0000d81d 	.word	0x0000d81d
    d424:	0000d81d 	.word	0x0000d81d
    d428:	0000d81d 	.word	0x0000d81d
    d42c:	0000d81d 	.word	0x0000d81d
    d430:	0000d46f 	.word	0x0000d46f
    d434:	0000d81d 	.word	0x0000d81d
    d438:	0000d5dd 	.word	0x0000d5dd
    d43c:	0000d81d 	.word	0x0000d81d
    d440:	0000d81d 	.word	0x0000d81d
    d444:	0000d53d 	.word	0x0000d53d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d448:	687b      	ldr	r3, [r7, #4]
    d44a:	1d1a      	adds	r2, r3, #4
    d44c:	607a      	str	r2, [r7, #4]
    d44e:	681b      	ldr	r3, [r3, #0]
    d450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d454:	68fb      	ldr	r3, [r7, #12]
    d456:	2b00      	cmp	r3, #0
    d458:	d005      	beq.n	d466 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d45a:	68fb      	ldr	r3, [r7, #12]
    d45c:	1c5a      	adds	r2, r3, #1
    d45e:	60fa      	str	r2, [r7, #12]
    d460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d464:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d468:	3301      	adds	r3, #1
    d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d46c:	e1e6      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d46e:	687b      	ldr	r3, [r7, #4]
    d470:	1d1a      	adds	r2, r3, #4
    d472:	607a      	str	r2, [r7, #4]
    d474:	681b      	ldr	r3, [r3, #0]
    d476:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d478:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d47a:	f7ff fdb4 	bl	cfe6 <simple_strlen>
    d47e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d482:	2b00      	cmp	r3, #0
    d484:	dd2e      	ble.n	d4e4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d48a:	429a      	cmp	r2, r3
    d48c:	d22a      	bcs.n	d4e4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d492:	1ad3      	subs	r3, r2, r3
    d494:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d49c:	4619      	mov	r1, r3
    d49e:	68f8      	ldr	r0, [r7, #12]
    d4a0:	f7ff fdbc 	bl	d01c <padbuffer>
    d4a4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d4a6:	68fb      	ldr	r3, [r7, #12]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d001      	beq.n	d4b0 <am_util_stdio_vsprintf+0x24c>
    d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4ae:	e000      	b.n	d4b2 <am_util_stdio_vsprintf+0x24e>
    d4b0:	2300      	movs	r3, #0
    d4b2:	68fa      	ldr	r2, [r7, #12]
    d4b4:	4413      	add	r3, r2
    d4b6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4bc:	4413      	add	r3, r2
    d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d4c0:	2300      	movs	r3, #0
    d4c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d4c4:	e00e      	b.n	d4e4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d005      	beq.n	d4d8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d4cc:	68fb      	ldr	r3, [r7, #12]
    d4ce:	1c5a      	adds	r2, r3, #1
    d4d0:	60fa      	str	r2, [r7, #12]
    d4d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d4d4:	7812      	ldrb	r2, [r2, #0]
    d4d6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d4da:	3301      	adds	r3, #1
    d4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4e0:	3301      	adds	r3, #1
    d4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d4e6:	781b      	ldrb	r3, [r3, #0]
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d1ec      	bne.n	d4c6 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	f000 81a1 	beq.w	d836 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4f6:	425b      	negs	r3, r3
    d4f8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d4fe:	429a      	cmp	r2, r3
    d500:	f080 8199 	bcs.w	d836 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d504:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d508:	1ad3      	subs	r3, r2, r3
    d50a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d50c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d510:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d512:	4619      	mov	r1, r3
    d514:	68f8      	ldr	r0, [r7, #12]
    d516:	f7ff fd81 	bl	d01c <padbuffer>
    d51a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d51c:	68fb      	ldr	r3, [r7, #12]
    d51e:	2b00      	cmp	r3, #0
    d520:	d001      	beq.n	d526 <am_util_stdio_vsprintf+0x2c2>
    d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d524:	e000      	b.n	d528 <am_util_stdio_vsprintf+0x2c4>
    d526:	2300      	movs	r3, #0
    d528:	68fa      	ldr	r2, [r7, #12]
    d52a:	4413      	add	r3, r2
    d52c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d532:	4413      	add	r3, r2
    d534:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d536:	2300      	movs	r3, #0
    d538:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d53a:	e17c      	b.n	d836 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d53c:	2301      	movs	r3, #1
    d53e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d542:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d546:	2b00      	cmp	r3, #0
    d548:	d00a      	beq.n	d560 <am_util_stdio_vsprintf+0x2fc>
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	3307      	adds	r3, #7
    d54e:	f023 0307 	bic.w	r3, r3, #7
    d552:	f103 0208 	add.w	r2, r3, #8
    d556:	607a      	str	r2, [r7, #4]
    d558:	cb18      	ldmia	r3, {r3, r4}
    d55a:	e007      	b.n	d56c <am_util_stdio_vsprintf+0x308>
    d55c:	10004100 	.word	0x10004100
                                      va_arg(pArgs, uint32_t);
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	1d1a      	adds	r2, r3, #4
    d564:	607a      	str	r2, [r7, #4]
    d566:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d568:	f04f 0400 	mov.w	r4, #0
    d56c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d572:	2b00      	cmp	r3, #0
    d574:	d01e      	beq.n	d5b4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d576:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d57a:	f7ff fc22 	bl	cdc2 <ndigits_in_hex>
    d57e:	4602      	mov	r2, r0
    d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d582:	1a9b      	subs	r3, r3, r2
    d584:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d58a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d58c:	4619      	mov	r1, r3
    d58e:	68f8      	ldr	r0, [r7, #12]
    d590:	f7ff fd44 	bl	d01c <padbuffer>
    d594:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d596:	68fb      	ldr	r3, [r7, #12]
    d598:	2b00      	cmp	r3, #0
    d59a:	d001      	beq.n	d5a0 <am_util_stdio_vsprintf+0x33c>
    d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d59e:	e000      	b.n	d5a2 <am_util_stdio_vsprintf+0x33e>
    d5a0:	2300      	movs	r3, #0
    d5a2:	68fa      	ldr	r2, [r7, #12]
    d5a4:	4413      	add	r3, r2
    d5a6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5ac:	4413      	add	r3, r2
    d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d5b0:	2300      	movs	r3, #0
    d5b2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d5b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d5b8:	68fa      	ldr	r2, [r7, #12]
    d5ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d5be:	f7ff fcb2 	bl	cf26 <uint64_to_hexstr>
    d5c2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d5c4:	68fb      	ldr	r3, [r7, #12]
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d003      	beq.n	d5d2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5cc:	68fa      	ldr	r2, [r7, #12]
    d5ce:	4413      	add	r3, r2
    d5d0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5d6:	4413      	add	r3, r2
    d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d5da:	e12f      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d5dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d008      	beq.n	d5f6 <am_util_stdio_vsprintf+0x392>
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	3307      	adds	r3, #7
    d5e8:	f023 0307 	bic.w	r3, r3, #7
    d5ec:	f103 0208 	add.w	r2, r3, #8
    d5f0:	607a      	str	r2, [r7, #4]
    d5f2:	cb18      	ldmia	r3, {r3, r4}
    d5f4:	e005      	b.n	d602 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d5f6:	687b      	ldr	r3, [r7, #4]
    d5f8:	1d1a      	adds	r2, r3, #4
    d5fa:	607a      	str	r2, [r7, #4]
    d5fc:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d5fe:	f04f 0400 	mov.w	r4, #0
    d602:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d608:	2b00      	cmp	r3, #0
    d60a:	d01e      	beq.n	d64a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d60c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d610:	f7ff fb99 	bl	cd46 <ndigits_in_u64>
    d614:	4602      	mov	r2, r0
    d616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d618:	1a9b      	subs	r3, r3, r2
    d61a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d61c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d620:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d622:	4619      	mov	r1, r3
    d624:	68f8      	ldr	r0, [r7, #12]
    d626:	f7ff fcf9 	bl	d01c <padbuffer>
    d62a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d62c:	68fb      	ldr	r3, [r7, #12]
    d62e:	2b00      	cmp	r3, #0
    d630:	d001      	beq.n	d636 <am_util_stdio_vsprintf+0x3d2>
    d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d634:	e000      	b.n	d638 <am_util_stdio_vsprintf+0x3d4>
    d636:	2300      	movs	r3, #0
    d638:	68fa      	ldr	r2, [r7, #12]
    d63a:	4413      	add	r3, r2
    d63c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d642:	4413      	add	r3, r2
    d644:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d646:	2300      	movs	r3, #0
    d648:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d64a:	68fa      	ldr	r2, [r7, #12]
    d64c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d650:	f7ff fc21 	bl	ce96 <uint64_to_str>
    d654:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d656:	68fb      	ldr	r3, [r7, #12]
    d658:	2b00      	cmp	r3, #0
    d65a:	d003      	beq.n	d664 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d65e:	68fa      	ldr	r2, [r7, #12]
    d660:	4413      	add	r3, r2
    d662:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d668:	4413      	add	r3, r2
    d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d66c:	e0e6      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d66e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d672:	2b00      	cmp	r3, #0
    d674:	d008      	beq.n	d688 <am_util_stdio_vsprintf+0x424>
    d676:	687b      	ldr	r3, [r7, #4]
    d678:	3307      	adds	r3, #7
    d67a:	f023 0307 	bic.w	r3, r3, #7
    d67e:	f103 0208 	add.w	r2, r3, #8
    d682:	607a      	str	r2, [r7, #4]
    d684:	cb18      	ldmia	r3, {r3, r4}
    d686:	e005      	b.n	d694 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d688:	687b      	ldr	r3, [r7, #4]
    d68a:	1d1a      	adds	r2, r3, #4
    d68c:	607a      	str	r2, [r7, #4]
    d68e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d690:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d694:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d698:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d69c:	2b00      	cmp	r3, #0
    d69e:	f174 0300 	sbcs.w	r3, r4, #0
    d6a2:	da0a      	bge.n	d6ba <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d6a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d6a8:	425b      	negs	r3, r3
    d6aa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d6ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d6b2:	2301      	movs	r3, #1
    d6b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d6b8:	e006      	b.n	d6c8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d6ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d6be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d6c2:	2300      	movs	r3, #0
    d6c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6ca:	2b00      	cmp	r3, #0
    d6cc:	d04a      	beq.n	d764 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d6ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d6d2:	4618      	mov	r0, r3
    d6d4:	4621      	mov	r1, r4
    d6d6:	f7ff fb57 	bl	cd88 <ndigits_in_i64>
    d6da:	4602      	mov	r2, r0
    d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6de:	1a9b      	subs	r3, r3, r2
    d6e0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d6e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d011      	beq.n	d70e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6ec:	3b01      	subs	r3, #1
    d6ee:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d6f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d6f4:	2b30      	cmp	r3, #48	; 0x30
    d6f6:	d10a      	bne.n	d70e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d6f8:	68fb      	ldr	r3, [r7, #12]
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d004      	beq.n	d708 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d6fe:	68fb      	ldr	r3, [r7, #12]
    d700:	1c5a      	adds	r2, r3, #1
    d702:	60fa      	str	r2, [r7, #12]
    d704:	222d      	movs	r2, #45	; 0x2d
    d706:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d70a:	3301      	adds	r3, #1
    d70c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d70e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d712:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d714:	4619      	mov	r1, r3
    d716:	68f8      	ldr	r0, [r7, #12]
    d718:	f7ff fc80 	bl	d01c <padbuffer>
    d71c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d71e:	68fb      	ldr	r3, [r7, #12]
    d720:	2b00      	cmp	r3, #0
    d722:	d001      	beq.n	d728 <am_util_stdio_vsprintf+0x4c4>
    d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d726:	e000      	b.n	d72a <am_util_stdio_vsprintf+0x4c6>
    d728:	2300      	movs	r3, #0
    d72a:	68fa      	ldr	r2, [r7, #12]
    d72c:	4413      	add	r3, r2
    d72e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d734:	4413      	add	r3, r2
    d736:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d738:	2300      	movs	r3, #0
    d73a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d73c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d740:	2b00      	cmp	r3, #0
    d742:	d01e      	beq.n	d782 <am_util_stdio_vsprintf+0x51e>
    d744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d748:	2b20      	cmp	r3, #32
    d74a:	d11a      	bne.n	d782 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d74c:	68fb      	ldr	r3, [r7, #12]
    d74e:	2b00      	cmp	r3, #0
    d750:	d004      	beq.n	d75c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d752:	68fb      	ldr	r3, [r7, #12]
    d754:	1c5a      	adds	r2, r3, #1
    d756:	60fa      	str	r2, [r7, #12]
    d758:	222d      	movs	r2, #45	; 0x2d
    d75a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d75e:	3301      	adds	r3, #1
    d760:	63fb      	str	r3, [r7, #60]	; 0x3c
    d762:	e00e      	b.n	d782 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d764:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d768:	2b00      	cmp	r3, #0
    d76a:	d00a      	beq.n	d782 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	2b00      	cmp	r3, #0
    d770:	d004      	beq.n	d77c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d772:	68fb      	ldr	r3, [r7, #12]
    d774:	1c5a      	adds	r2, r3, #1
    d776:	60fa      	str	r2, [r7, #12]
    d778:	222d      	movs	r2, #45	; 0x2d
    d77a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d77e:	3301      	adds	r3, #1
    d780:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d782:	68fa      	ldr	r2, [r7, #12]
    d784:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d788:	f7ff fb85 	bl	ce96 <uint64_to_str>
    d78c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d78e:	68fb      	ldr	r3, [r7, #12]
    d790:	2b00      	cmp	r3, #0
    d792:	d003      	beq.n	d79c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d796:	68fa      	ldr	r2, [r7, #12]
    d798:	4413      	add	r3, r2
    d79a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d79e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d7a0:	4413      	add	r3, r2
    d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d7a4:	e04a      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d7a6:	68fb      	ldr	r3, [r7, #12]
    d7a8:	2b00      	cmp	r3, #0
    d7aa:	d046      	beq.n	d83a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d7ac:	687b      	ldr	r3, [r7, #4]
    d7ae:	3307      	adds	r3, #7
    d7b0:	f023 0307 	bic.w	r3, r3, #7
    d7b4:	f103 0208 	add.w	r2, r3, #8
    d7b8:	607a      	str	r2, [r7, #4]
    d7ba:	cb18      	ldmia	r3, {r3, r4}
    d7bc:	4618      	mov	r0, r3
    d7be:	4621      	mov	r1, r4
    d7c0:	f7fe fd1e 	bl	c200 <__aeabi_d2f>
    d7c4:	4603      	mov	r3, r0
    d7c6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d7c8:	68fb      	ldr	r3, [r7, #12]
    d7ca:	2214      	movs	r2, #20
    d7cc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7d0:	68f9      	ldr	r1, [r7, #12]
    d7d2:	6978      	ldr	r0, [r7, #20]
    d7d4:	f7ff fc48 	bl	d068 <ftoa>
    d7d8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d7dc:	2b00      	cmp	r3, #0
    d7de:	da14      	bge.n	d80a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d7e6:	d102      	bne.n	d7ee <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d7e8:	4b1e      	ldr	r3, [pc, #120]	; (d864 <am_util_stdio_vsprintf+0x600>)
    d7ea:	62bb      	str	r3, [r7, #40]	; 0x28
    d7ec:	e008      	b.n	d800 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d7f0:	f113 0f02 	cmn.w	r3, #2
    d7f4:	d102      	bne.n	d7fc <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d7f6:	4b1c      	ldr	r3, [pc, #112]	; (d868 <am_util_stdio_vsprintf+0x604>)
    d7f8:	62bb      	str	r3, [r7, #40]	; 0x28
    d7fa:	e001      	b.n	d800 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d7fc:	4b1b      	ldr	r3, [pc, #108]	; (d86c <am_util_stdio_vsprintf+0x608>)
    d7fe:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d800:	68fb      	ldr	r3, [r7, #12]
    d802:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d804:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d806:	2303      	movs	r3, #3
    d808:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d80c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d80e:	4413      	add	r3, r2
    d810:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d814:	68fa      	ldr	r2, [r7, #12]
    d816:	4413      	add	r3, r2
    d818:	60fb      	str	r3, [r7, #12]
                }
                break;
    d81a:	e00e      	b.n	d83a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d81c:	68fb      	ldr	r3, [r7, #12]
    d81e:	2b00      	cmp	r3, #0
    d820:	d005      	beq.n	d82e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d822:	68fb      	ldr	r3, [r7, #12]
    d824:	1c5a      	adds	r2, r3, #1
    d826:	60fa      	str	r2, [r7, #12]
    d828:	68ba      	ldr	r2, [r7, #8]
    d82a:	7812      	ldrb	r2, [r2, #0]
    d82c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d830:	3301      	adds	r3, #1
    d832:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d834:	e002      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>
                break;
    d836:	bf00      	nop
    d838:	e000      	b.n	d83c <am_util_stdio_vsprintf+0x5d8>
                break;
    d83a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d83c:	68bb      	ldr	r3, [r7, #8]
    d83e:	3301      	adds	r3, #1
    d840:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d842:	68bb      	ldr	r3, [r7, #8]
    d844:	781b      	ldrb	r3, [r3, #0]
    d846:	2b00      	cmp	r3, #0
    d848:	f47f ad17 	bne.w	d27a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d84c:	68fb      	ldr	r3, [r7, #12]
    d84e:	2b00      	cmp	r3, #0
    d850:	d002      	beq.n	d858 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d852:	68fb      	ldr	r3, [r7, #12]
    d854:	2200      	movs	r2, #0
    d856:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d85a:	4618      	mov	r0, r3
    d85c:	3754      	adds	r7, #84	; 0x54
    d85e:	46bd      	mov	sp, r7
    d860:	bd90      	pop	{r4, r7, pc}
    d862:	bf00      	nop
    d864:	00302e30 	.word	0x00302e30
    d868:	00232e23 	.word	0x00232e23
    d86c:	003f2e3f 	.word	0x003f2e3f

0000d870 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d870:	b40f      	push	{r0, r1, r2, r3}
    d872:	b580      	push	{r7, lr}
    d874:	b082      	sub	sp, #8
    d876:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d878:	f107 0314 	add.w	r3, r7, #20
    d87c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d87e:	683a      	ldr	r2, [r7, #0]
    d880:	6939      	ldr	r1, [r7, #16]
    d882:	4808      	ldr	r0, [pc, #32]	; (d8a4 <am_util_stdio_printf+0x34>)
    d884:	f7ff fcee 	bl	d264 <am_util_stdio_vsprintf>
    d888:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d88a:	4b07      	ldr	r3, [pc, #28]	; (d8a8 <am_util_stdio_printf+0x38>)
    d88c:	681b      	ldr	r3, [r3, #0]
    d88e:	4805      	ldr	r0, [pc, #20]	; (d8a4 <am_util_stdio_printf+0x34>)
    d890:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d892:	687b      	ldr	r3, [r7, #4]
}
    d894:	4618      	mov	r0, r3
    d896:	3708      	adds	r7, #8
    d898:	46bd      	mov	sp, r7
    d89a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d89e:	b004      	add	sp, #16
    d8a0:	4770      	bx	lr
    d8a2:	bf00      	nop
    d8a4:	10004000 	.word	0x10004000
    d8a8:	10004108 	.word	0x10004108

0000d8ac <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d8ac:	b580      	push	{r7, lr}
    d8ae:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d8b0:	4802      	ldr	r0, [pc, #8]	; (d8bc <am_util_stdio_terminal_clear+0x10>)
    d8b2:	f7ff ffdd 	bl	d870 <am_util_stdio_printf>
}
    d8b6:	bf00      	nop
    d8b8:	bd80      	pop	{r7, pc}
    d8ba:	bf00      	nop
    d8bc:	0000e624 	.word	0x0000e624

0000d8c0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d8c0:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d8c2:	f000 fb9b 	bl	dffc <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d8c6:	2000      	movs	r0, #0
    d8c8:	f7ff f94e 	bl	cb68 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d8cc:	4b08      	ldr	r3, [pc, #32]	; (d8f0 <am_bsp_low_power_init+0x30>)
    d8ce:	2029      	movs	r0, #41	; 0x29
    d8d0:	6819      	ldr	r1, [r3, #0]
    d8d2:	f000 fa2b 	bl	dd2c <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d8d6:	f000 fc97 	bl	e208 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d8da:	2001      	movs	r0, #1
    d8dc:	f000 fcd2 	bl	e284 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d8e0:	2100      	movs	r1, #0
    d8e2:	2003      	movs	r0, #3
    d8e4:	f000 f85a 	bl	d99c <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d8e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d8ec:	f000 bcd6 	b.w	e29c <am_hal_rtc_osc_disable>
    d8f0:	0000e640 	.word	0x0000e640

0000d8f4 <am_bsp_itm_printf_enable>:
{
    d8f4:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d8f6:	4b0b      	ldr	r3, [pc, #44]	; (d924 <am_bsp_itm_printf_enable+0x30>)
{
    d8f8:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d8fa:	2201      	movs	r2, #1
    d8fc:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d8fe:	f000 fb5f 	bl	dfc0 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d902:	a806      	add	r0, sp, #24
    d904:	4908      	ldr	r1, [pc, #32]	; (d928 <am_bsp_itm_printf_enable+0x34>)
    d906:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d90a:	f000 fd21 	bl	e350 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d90e:	4b07      	ldr	r3, [pc, #28]	; (d92c <am_bsp_itm_printf_enable+0x38>)
    d910:	2029      	movs	r0, #41	; 0x29
    d912:	6819      	ldr	r1, [r3, #0]
    d914:	f000 fa0a 	bl	dd2c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d918:	4805      	ldr	r0, [pc, #20]	; (d930 <am_bsp_itm_printf_enable+0x3c>)
    d91a:	f7ff f925 	bl	cb68 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d91e:	b007      	add	sp, #28
    d920:	f85d fb04 	ldr.w	pc, [sp], #4
    d924:	10004104 	.word	0x10004104
    d928:	000f4240 	.word	0x000f4240
    d92c:	0000e638 	.word	0x0000e638
    d930:	0000e0a5 	.word	0x0000e0a5

0000d934 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d934:	b530      	push	{r4, r5, lr}
    d936:	b083      	sub	sp, #12
    d938:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d93a:	f000 fb39 	bl	dfb0 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d93e:	4c11      	ldr	r4, [pc, #68]	; (d984 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d940:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d942:	6823      	ldr	r3, [r4, #0]
    d944:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d948:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d94a:	9801      	ldr	r0, [sp, #4]
    d94c:	f000 fb34 	bl	dfb8 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d950:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d952:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d954:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d956:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d958:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d95a:	005d      	lsls	r5, r3, #1
    d95c:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d960:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d962:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d964:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d968:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d96a:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d96e:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d972:	0212      	lsls	r2, r2, #8
    d974:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d978:	432b      	orrs	r3, r5
    d97a:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d97c:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d97e:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d980:	b003      	add	sp, #12
    d982:	bd30      	pop	{r4, r5, pc}
    d984:	40018000 	.word	0x40018000

0000d988 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d988:	4a03      	ldr	r2, [pc, #12]	; (d998 <am_hal_cachectrl_enable+0x10>)
    d98a:	6813      	ldr	r3, [r2, #0]
    d98c:	f043 0001 	orr.w	r0, r3, #1
    d990:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d992:	2000      	movs	r0, #0
    d994:	4770      	bx	lr
    d996:	bf00      	nop
    d998:	40018000 	.word	0x40018000

0000d99c <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d99c:	2809      	cmp	r0, #9
    d99e:	d852      	bhi.n	da46 <am_hal_clkgen_control+0xaa>
    d9a0:	e8df f000 	tbb	[pc, r0]
    d9a4:	2b21190d 	.word	0x2b21190d
    d9a8:	51513d33 	.word	0x51513d33
    d9ac:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d9ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d9b2:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d9b4:	6a1a      	ldr	r2, [r3, #32]
    d9b6:	f36f 0200 	bfc	r2, #0, #1
    d9ba:	621a      	str	r2, [r3, #32]
            break;
    d9bc:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d9be:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d9c2:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d9c4:	2047      	movs	r0, #71	; 0x47
    d9c6:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d9ca:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d9ce:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d9d0:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d9d4:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d9d6:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d9da:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d9dc:	68ca      	ldr	r2, [r1, #12]
    d9de:	f022 0301 	bic.w	r3, r2, #1
    d9e2:	60cb      	str	r3, [r1, #12]
            break;
    d9e4:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d9e6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d9ea:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d9ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d9f0:	f022 0302 	bic.w	r3, r2, #2
    d9f4:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d9f8:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d9fa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d9fe:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    da00:	68d3      	ldr	r3, [r2, #12]
    da02:	f043 0101 	orr.w	r1, r3, #1
    da06:	60d1      	str	r1, [r2, #12]
            break;
    da08:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    da0a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    da0e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    da10:	f8dc 300c 	ldr.w	r3, [ip, #12]
    da14:	f043 0102 	orr.w	r1, r3, #2
    da18:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    da1c:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    da1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    da22:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    da24:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    da26:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    da28:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    da2a:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    da2c:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    da2e:	615a      	str	r2, [r3, #20]
            break;
    da30:	4770      	bx	lr
            if ( pArgs == 0 )
    da32:	b151      	cbz	r1, da4a <am_hal_clkgen_control+0xae>
    da34:	6808      	ldr	r0, [r1, #0]
    da36:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    da3a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    da3e:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    da40:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    da44:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    da46:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    da48:	4770      	bx	lr
    da4a:	4901      	ldr	r1, [pc, #4]	; (da50 <am_hal_clkgen_control+0xb4>)
    da4c:	e7f5      	b.n	da3a <am_hal_clkgen_control+0x9e>
    da4e:	bf00      	nop
    da50:	0025b801 	.word	0x0025b801

0000da54 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    da54:	b1a8      	cbz	r0, da82 <am_hal_clkgen_status_get+0x2e>
{
    da56:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    da58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    da5c:	490a      	ldr	r1, [pc, #40]	; (da88 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    da5e:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    da60:	4b0a      	ldr	r3, [pc, #40]	; (da8c <am_hal_clkgen_status_get+0x38>)
    da62:	f014 0f01 	tst.w	r4, #1
    da66:	bf08      	it	eq
    da68:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    da6a:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    da6c:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    da6e:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    da72:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    da76:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    da78:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    da7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    da7e:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    da80:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    da82:	2006      	movs	r0, #6
    da84:	4770      	bx	lr
    da86:	bf00      	nop
    da88:	02dc6c00 	.word	0x02dc6c00
    da8c:	016e3600 	.word	0x016e3600

0000da90 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    da90:	4b00      	ldr	r3, [pc, #0]	; (da94 <am_hal_flash_page_erase+0x4>)
    da92:	4718      	bx	r3
    da94:	08000051 	.word	0x08000051

0000da98 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    da98:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    da9a:	4c02      	ldr	r4, [pc, #8]	; (daa4 <am_hal_flash_program_main+0xc>)
    da9c:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    da9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    daa2:	4760      	bx	ip
    daa4:	08000055 	.word	0x08000055

0000daa8 <am_hal_flash_clear_bits>:
//
//*****************************************************************************
int
am_hal_flash_clear_bits(uint32_t ui32ProgramKey, uint32_t *pui32Addr,
                          uint32_t ui32BitMask)
{
    daa8:	b530      	push	{r4, r5, lr}
    daaa:	460c      	mov	r4, r1
    daac:	b083      	sub	sp, #12
    uint32_t ui32Val = ~ui32BitMask;
    // CAUTION: We can reprogram a bit in flash to 0 only once...so make sure we do not re-clear bits
    ui32Val |= ~(*pui32Addr);
    daae:	6823      	ldr	r3, [r4, #0]

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, &ui32Val,
    dab0:	4d05      	ldr	r5, [pc, #20]	; (dac8 <am_hal_flash_clear_bits+0x20>)
    ui32Val |= ~(*pui32Addr);
    dab2:	a902      	add	r1, sp, #8
    dab4:	401a      	ands	r2, r3
    dab6:	43d2      	mvns	r2, r2
    dab8:	f841 2d04 	str.w	r2, [r1, #-4]!
    return g_am_hal_flash.flash_program_main(ui32ProgramKey, &ui32Val,
    dabc:	2301      	movs	r3, #1
    dabe:	4622      	mov	r2, r4
    dac0:	47a8      	blx	r5
                                             pui32Addr, 1);
} // am_hal_flash_clear_bits()
    dac2:	b003      	add	sp, #12
    dac4:	bd30      	pop	{r4, r5, pc}
    dac6:	bf00      	nop
    dac8:	08000055 	.word	0x08000055

0000dacc <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dacc:	4b00      	ldr	r3, [pc, #0]	; (dad0 <am_hal_flash_delay+0x4>)
    dace:	4718      	bx	r3
    dad0:	0800009d 	.word	0x0800009d

0000dad4 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    dad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dad8:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dadc:	f8df 8248 	ldr.w	r8, [pc, #584]	; dd28 <am_hal_flash_delay_status_check+0x254>
{
    dae0:	4607      	mov	r7, r0
    dae2:	460c      	mov	r4, r1
    dae4:	4615      	mov	r5, r2
    dae6:	461e      	mov	r6, r3
    dae8:	f1be 0f00 	cmp.w	lr, #0
    daec:	f000 808e 	beq.w	dc0c <am_hal_flash_delay_status_check+0x138>
    daf0:	f010 0907 	ands.w	r9, r0, #7
    daf4:	d044      	beq.n	db80 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    daf6:	680b      	ldr	r3, [r1, #0]
    daf8:	4013      	ands	r3, r2
    dafa:	429e      	cmp	r6, r3
    dafc:	f000 8083 	beq.w	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db00:	2001      	movs	r0, #1
    db02:	47c0      	blx	r8
    db04:	f1b9 0f01 	cmp.w	r9, #1
    db08:	f107 37ff 	add.w	r7, r7, #4294967295
    db0c:	d038      	beq.n	db80 <am_hal_flash_delay_status_check+0xac>
    db0e:	f1b9 0f02 	cmp.w	r9, #2
    db12:	d02e      	beq.n	db72 <am_hal_flash_delay_status_check+0x9e>
    db14:	f1b9 0f03 	cmp.w	r9, #3
    db18:	d024      	beq.n	db64 <am_hal_flash_delay_status_check+0x90>
    db1a:	f1b9 0f04 	cmp.w	r9, #4
    db1e:	d01a      	beq.n	db56 <am_hal_flash_delay_status_check+0x82>
    db20:	f1b9 0f05 	cmp.w	r9, #5
    db24:	d010      	beq.n	db48 <am_hal_flash_delay_status_check+0x74>
    db26:	f1b9 0f06 	cmp.w	r9, #6
    db2a:	d006      	beq.n	db3a <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db2c:	6820      	ldr	r0, [r4, #0]
    db2e:	4028      	ands	r0, r5
    db30:	4286      	cmp	r6, r0
    db32:	d068      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db34:	2001      	movs	r0, #1
    db36:	47c0      	blx	r8
    db38:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db3a:	6821      	ldr	r1, [r4, #0]
    db3c:	4029      	ands	r1, r5
    db3e:	428e      	cmp	r6, r1
    db40:	d061      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db42:	2001      	movs	r0, #1
    db44:	47c0      	blx	r8
    db46:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db48:	6822      	ldr	r2, [r4, #0]
    db4a:	402a      	ands	r2, r5
    db4c:	4296      	cmp	r6, r2
    db4e:	d05a      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db50:	2001      	movs	r0, #1
    db52:	47c0      	blx	r8
    db54:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db56:	6823      	ldr	r3, [r4, #0]
    db58:	402b      	ands	r3, r5
    db5a:	429e      	cmp	r6, r3
    db5c:	d053      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db5e:	2001      	movs	r0, #1
    db60:	47c0      	blx	r8
    db62:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db64:	6820      	ldr	r0, [r4, #0]
    db66:	4028      	ands	r0, r5
    db68:	4286      	cmp	r6, r0
    db6a:	d04c      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db6c:	2001      	movs	r0, #1
    db6e:	47c0      	blx	r8
    db70:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db72:	6821      	ldr	r1, [r4, #0]
    db74:	4029      	ands	r1, r5
    db76:	428e      	cmp	r6, r1
    db78:	d045      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db7a:	2001      	movs	r0, #1
    db7c:	3f01      	subs	r7, #1
    db7e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db80:	6822      	ldr	r2, [r4, #0]
    db82:	402a      	ands	r2, r5
    db84:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db86:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db8a:	d03c      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    db8c:	2f00      	cmp	r7, #0
    db8e:	f000 80c8 	beq.w	dd22 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db92:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db94:	6823      	ldr	r3, [r4, #0]
    db96:	402b      	ands	r3, r5
    db98:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db9a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db9e:	d032      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dba0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dba2:	6821      	ldr	r1, [r4, #0]
    dba4:	4029      	ands	r1, r5
    dba6:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dba8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbac:	d02b      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbae:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbb0:	6822      	ldr	r2, [r4, #0]
    dbb2:	402a      	ands	r2, r5
    dbb4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbb6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbba:	d024      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbbc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbbe:	6823      	ldr	r3, [r4, #0]
    dbc0:	402b      	ands	r3, r5
    dbc2:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbc4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbc8:	d01d      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbca:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbcc:	6821      	ldr	r1, [r4, #0]
    dbce:	4029      	ands	r1, r5
    dbd0:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbd2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbd6:	d016      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbd8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbda:	6822      	ldr	r2, [r4, #0]
    dbdc:	402a      	ands	r2, r5
    dbde:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbe0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbe4:	d00f      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbe6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbe8:	6820      	ldr	r0, [r4, #0]
    dbea:	4028      	ands	r0, r5
    dbec:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbee:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbf2:	d008      	beq.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbf4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbf6:	6822      	ldr	r2, [r4, #0]
    dbf8:	402a      	ands	r2, r5
    dbfa:	4296      	cmp	r6, r2
    dbfc:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc00:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc04:	d1c2      	bne.n	db8c <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dc06:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc0c:	f010 0907 	ands.w	r9, r0, #7
    dc10:	d043      	beq.n	dc9a <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc12:	680b      	ldr	r3, [r1, #0]
    dc14:	4013      	ands	r3, r2
    dc16:	429e      	cmp	r6, r3
    dc18:	d1f5      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1a:	2001      	movs	r0, #1
    dc1c:	47c0      	blx	r8
    dc1e:	f1b9 0f01 	cmp.w	r9, #1
    dc22:	f107 37ff 	add.w	r7, r7, #4294967295
    dc26:	d038      	beq.n	dc9a <am_hal_flash_delay_status_check+0x1c6>
    dc28:	f1b9 0f02 	cmp.w	r9, #2
    dc2c:	d02e      	beq.n	dc8c <am_hal_flash_delay_status_check+0x1b8>
    dc2e:	f1b9 0f03 	cmp.w	r9, #3
    dc32:	d024      	beq.n	dc7e <am_hal_flash_delay_status_check+0x1aa>
    dc34:	f1b9 0f04 	cmp.w	r9, #4
    dc38:	d01a      	beq.n	dc70 <am_hal_flash_delay_status_check+0x19c>
    dc3a:	f1b9 0f05 	cmp.w	r9, #5
    dc3e:	d010      	beq.n	dc62 <am_hal_flash_delay_status_check+0x18e>
    dc40:	f1b9 0f06 	cmp.w	r9, #6
    dc44:	d006      	beq.n	dc54 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc46:	6821      	ldr	r1, [r4, #0]
    dc48:	4029      	ands	r1, r5
    dc4a:	428e      	cmp	r6, r1
    dc4c:	d1db      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc4e:	2001      	movs	r0, #1
    dc50:	47c0      	blx	r8
    dc52:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc54:	6822      	ldr	r2, [r4, #0]
    dc56:	402a      	ands	r2, r5
    dc58:	4296      	cmp	r6, r2
    dc5a:	d1d4      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc5c:	2001      	movs	r0, #1
    dc5e:	47c0      	blx	r8
    dc60:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc62:	6820      	ldr	r0, [r4, #0]
    dc64:	4028      	ands	r0, r5
    dc66:	4286      	cmp	r6, r0
    dc68:	d1cd      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc6a:	2001      	movs	r0, #1
    dc6c:	47c0      	blx	r8
    dc6e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc70:	6823      	ldr	r3, [r4, #0]
    dc72:	402b      	ands	r3, r5
    dc74:	429e      	cmp	r6, r3
    dc76:	d1c6      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc78:	2001      	movs	r0, #1
    dc7a:	47c0      	blx	r8
    dc7c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc7e:	6821      	ldr	r1, [r4, #0]
    dc80:	4029      	ands	r1, r5
    dc82:	428e      	cmp	r6, r1
    dc84:	d1bf      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc86:	2001      	movs	r0, #1
    dc88:	47c0      	blx	r8
    dc8a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc8c:	6822      	ldr	r2, [r4, #0]
    dc8e:	402a      	ands	r2, r5
    dc90:	4296      	cmp	r6, r2
    dc92:	d1b8      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc94:	2001      	movs	r0, #1
    dc96:	3f01      	subs	r7, #1
    dc98:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc9a:	6823      	ldr	r3, [r4, #0]
    dc9c:	402b      	ands	r3, r5
    dc9e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dca0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dca4:	d1af      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    dca6:	2f00      	cmp	r7, #0
    dca8:	d03b      	beq.n	dd22 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcaa:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcac:	6821      	ldr	r1, [r4, #0]
    dcae:	4029      	ands	r1, r5
    dcb0:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcb2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcb6:	d1a6      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcb8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcba:	6822      	ldr	r2, [r4, #0]
    dcbc:	402a      	ands	r2, r5
    dcbe:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcc0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcc4:	d19f      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcc6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcc8:	6823      	ldr	r3, [r4, #0]
    dcca:	402b      	ands	r3, r5
    dccc:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcce:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcd2:	d198      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcd4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcd6:	6821      	ldr	r1, [r4, #0]
    dcd8:	4029      	ands	r1, r5
    dcda:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcdc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dce0:	d191      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dce4:	6822      	ldr	r2, [r4, #0]
    dce6:	402a      	ands	r2, r5
    dce8:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcea:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcee:	d18a      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcf0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcf2:	6823      	ldr	r3, [r4, #0]
    dcf4:	402b      	ands	r3, r5
    dcf6:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcf8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcfc:	d183      	bne.n	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcfe:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd00:	6820      	ldr	r0, [r4, #0]
    dd02:	4028      	ands	r0, r5
    dd04:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd06:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd0a:	f47f af7c 	bne.w	dc06 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd0e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd10:	6823      	ldr	r3, [r4, #0]
    dd12:	402b      	ands	r3, r5
    dd14:	429e      	cmp	r6, r3
    dd16:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd1a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd1e:	d0c2      	beq.n	dca6 <am_hal_flash_delay_status_check+0x1d2>
    dd20:	e771      	b.n	dc06 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    dd22:	2004      	movs	r0, #4
    dd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd28:	0800009d 	.word	0x0800009d

0000dd2c <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    dd2c:	2831      	cmp	r0, #49	; 0x31
    dd2e:	d901      	bls.n	dd34 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    dd30:	2006      	movs	r0, #6
    dd32:	4770      	bx	lr
{
    dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    dd38:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    dd3c:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    dd40:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    dd42:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    dd46:	d014      	beq.n	dd72 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    dd48:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dd4c:	1db2      	adds	r2, r6, #6
    dd4e:	f002 0707 	and.w	r7, r2, #7
    dd52:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    dd54:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    dd58:	f200 80ab 	bhi.w	deb2 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    dd5c:	4a85      	ldr	r2, [pc, #532]	; (df74 <am_hal_gpio_pinconfig+0x248>)
    dd5e:	5c17      	ldrb	r7, [r2, r0]
    dd60:	07ff      	lsls	r7, r7, #31
    dd62:	d403      	bmi.n	dd6c <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    dd64:	4884      	ldr	r0, [pc, #528]	; (df78 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    dd66:	b007      	add	sp, #28
    dd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    dd6c:	1eb4      	subs	r4, r6, #2
    dd6e:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    dd72:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    dd76:	2e00      	cmp	r6, #0
    dd78:	f040 8095 	bne.w	dea6 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dd7c:	4a7f      	ldr	r2, [pc, #508]	; (df7c <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    dd7e:	4f80      	ldr	r7, [pc, #512]	; (df80 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dd80:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    dd82:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dd86:	411e      	asrs	r6, r3
    dd88:	f016 0f01 	tst.w	r6, #1
    dd8c:	bf0c      	ite	eq
    dd8e:	2600      	moveq	r6, #0
    dd90:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    dd92:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    dd94:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    dd98:	f000 8097 	beq.w	deca <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    dd9c:	f3c1 3341 	ubfx	r3, r1, #13, #2
    dda0:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    dda2:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    dda6:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    ddaa:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    ddac:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ddb0:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ddb4:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ddb8:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ddbc:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    ddbe:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    ddc2:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ddc6:	f000 808d 	beq.w	dee4 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    ddca:	4a6e      	ldr	r2, [pc, #440]	; (df84 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    ddcc:	6816      	ldr	r6, [r2, #0]
    ddce:	1b8c      	subs	r4, r1, r6
    ddd0:	fab4 f384 	clz	r3, r4
    ddd4:	095f      	lsrs	r7, r3, #5
    ddd6:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    ddd8:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    dddc:	bf04      	itt	eq
    ddde:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    dde2:	f367 0800 	bfieq	r8, r7, #0, #1
    dde6:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    dde8:	f3c1 2101 	ubfx	r1, r1, #8, #2
    ddec:	2902      	cmp	r1, #2
    ddee:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    ddf2:	d07a      	beq.n	deea <am_hal_gpio_pinconfig+0x1be>
    ddf4:	d87f      	bhi.n	def6 <am_hal_gpio_pinconfig+0x1ca>
    ddf6:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    ddf8:	bf08      	it	eq
    ddfa:	f045 0504 	orreq.w	r5, r5, #4
    ddfe:	f004 0a18 	and.w	sl, r4, #24
            break;
    de02:	2200      	movs	r2, #0
    de04:	4604      	mov	r4, r0
    de06:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de08:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    de0c:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de10:	485d      	ldr	r0, [pc, #372]	; (df88 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    de12:	495e      	ldr	r1, [pc, #376]	; (df8c <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de14:	4f5e      	ldr	r7, [pc, #376]	; (df90 <am_hal_gpio_pinconfig+0x264>)
    de16:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de18:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    de1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    de20:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    de24:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    de26:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de2a:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de2c:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    de30:	f000 f8be 	bl	dfb0 <am_hal_interrupt_master_disable>
    de34:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    de36:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    de3a:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    de3e:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    de42:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    de46:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    de48:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    de4c:	9902      	ldr	r1, [sp, #8]
    de4e:	9a03      	ldr	r2, [sp, #12]
    de50:	b150      	cbz	r0, de68 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    de52:	f004 001f 	and.w	r0, r4, #31
    de56:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    de5a:	f04f 0c01 	mov.w	ip, #1
    de5e:	4c4d      	ldr	r4, [pc, #308]	; (df94 <am_hal_gpio_pinconfig+0x268>)
    de60:	fa0c f000 	lsl.w	r0, ip, r0
    de64:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    de68:	484b      	ldr	r0, [pc, #300]	; (df98 <am_hal_gpio_pinconfig+0x26c>)
    de6a:	2473      	movs	r4, #115	; 0x73
    de6c:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    de6e:	f8da 4000 	ldr.w	r4, [sl]
    de72:	4034      	ands	r4, r6
    de74:	4325      	orrs	r5, r4
    de76:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    de7a:	f859 5001 	ldr.w	r5, [r9, r1]
    de7e:	402f      	ands	r7, r5
    de80:	ea47 0708 	orr.w	r7, r7, r8
    de84:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    de88:	f85b 1003 	ldr.w	r1, [fp, r3]
    de8c:	400e      	ands	r6, r1
    de8e:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    de90:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    de92:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    de96:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    de98:	9805      	ldr	r0, [sp, #20]
    de9a:	f000 f88d 	bl	dfb8 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    de9e:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    dea0:	b007      	add	sp, #28
    dea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    dea6:	2e01      	cmp	r6, #1
    dea8:	d015      	beq.n	ded6 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    deaa:	2e02      	cmp	r6, #2
    deac:	d030      	beq.n	df10 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    deae:	483b      	ldr	r0, [pc, #236]	; (df9c <am_hal_gpio_pinconfig+0x270>)
    deb0:	e759      	b.n	dd66 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    deb2:	2cc0      	cmp	r4, #192	; 0xc0
    deb4:	d027      	beq.n	df06 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    deb6:	2c20      	cmp	r4, #32
    deb8:	f47f af5b 	bne.w	dd72 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    debc:	4c2d      	ldr	r4, [pc, #180]	; (df74 <am_hal_gpio_pinconfig+0x248>)
    debe:	5c26      	ldrb	r6, [r4, r0]
    dec0:	f016 0f09 	tst.w	r6, #9
    dec4:	f47f af4e 	bne.w	dd64 <am_hal_gpio_pinconfig+0x38>
    dec8:	e753      	b.n	dd72 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    deca:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dece:	2a07      	cmp	r2, #7
    ded0:	d125      	bne.n	df1e <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    ded2:	4833      	ldr	r0, [pc, #204]	; (dfa0 <am_hal_gpio_pinconfig+0x274>)
    ded4:	e747      	b.n	dd66 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    ded6:	4c27      	ldr	r4, [pc, #156]	; (df74 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    ded8:	5c26      	ldrb	r6, [r4, r0]
    deda:	07b4      	lsls	r4, r6, #30
    dedc:	d5e7      	bpl.n	deae <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    dede:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    dee2:	e74b      	b.n	dd7c <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    dee4:	2701      	movs	r7, #1
    dee6:	9700      	str	r7, [sp, #0]
    dee8:	e776      	b.n	ddd8 <am_hal_gpio_pinconfig+0xac>
    deea:	f004 0a18 	and.w	sl, r4, #24
    deee:	2301      	movs	r3, #1
    def0:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    def4:	e786      	b.n	de04 <am_hal_gpio_pinconfig+0xd8>
    def6:	f004 0a18 	and.w	sl, r4, #24
    defa:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    defc:	f045 0504 	orr.w	r5, r5, #4
    df00:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    df04:	e77e      	b.n	de04 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    df06:	2814      	cmp	r0, #20
    df08:	f43f af33 	beq.w	dd72 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    df0c:	4825      	ldr	r0, [pc, #148]	; (dfa4 <am_hal_gpio_pinconfig+0x278>)
    df0e:	e72a      	b.n	dd66 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    df10:	4a18      	ldr	r2, [pc, #96]	; (df74 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df12:	5c17      	ldrb	r7, [r2, r0]
    df14:	077a      	lsls	r2, r7, #29
    df16:	d5ca      	bpl.n	deae <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    df18:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    df1c:	e72e      	b.n	dd7c <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df1e:	4c22      	ldr	r4, [pc, #136]	; (dfa8 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    df20:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df24:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    df28:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    df2c:	45b0      	cmp	r8, r6
    df2e:	d010      	beq.n	df52 <am_hal_gpio_pinconfig+0x226>
    df30:	0087      	lsls	r7, r0, #2
    df32:	eb04 0907 	add.w	r9, r4, r7
    df36:	f899 3001 	ldrb.w	r3, [r9, #1]
    df3a:	42b3      	cmp	r3, r6
    df3c:	d015      	beq.n	df6a <am_hal_gpio_pinconfig+0x23e>
    df3e:	f899 2002 	ldrb.w	r2, [r9, #2]
    df42:	42b2      	cmp	r2, r6
    df44:	d00f      	beq.n	df66 <am_hal_gpio_pinconfig+0x23a>
    df46:	f899 4003 	ldrb.w	r4, [r9, #3]
    df4a:	42b4      	cmp	r4, r6
    df4c:	d00f      	beq.n	df6e <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    df4e:	4817      	ldr	r0, [pc, #92]	; (dfac <am_hal_gpio_pinconfig+0x280>)
    df50:	e709      	b.n	dd66 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    df52:	2600      	movs	r6, #0
    df54:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    df56:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    df58:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    df5c:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    df5e:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    df62:	9300      	str	r3, [sp, #0]
    df64:	e740      	b.n	dde8 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    df66:	2602      	movs	r6, #2
    df68:	e7f5      	b.n	df56 <am_hal_gpio_pinconfig+0x22a>
    df6a:	2601      	movs	r6, #1
    df6c:	e7f3      	b.n	df56 <am_hal_gpio_pinconfig+0x22a>
    df6e:	2603      	movs	r6, #3
    df70:	e7f1      	b.n	df56 <am_hal_gpio_pinconfig+0x22a>
    df72:	bf00      	nop
    df74:	0000e644 	.word	0x0000e644
    df78:	08000100 	.word	0x08000100
    df7c:	0000e678 	.word	0x0000e678
    df80:	0000e774 	.word	0x0000e774
    df84:	0000e640 	.word	0x0000e640
    df88:	7ffffffc 	.word	0x7ffffffc
    df8c:	400100e0 	.word	0x400100e0
    df90:	40010040 	.word	0x40010040
    df94:	400100b4 	.word	0x400100b4
    df98:	40010000 	.word	0x40010000
    df9c:	08000102 	.word	0x08000102
    dfa0:	08000103 	.word	0x08000103
    dfa4:	08000101 	.word	0x08000101
    dfa8:	0000e6ac 	.word	0x0000e6ac
    dfac:	08000104 	.word	0x08000104

0000dfb0 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    dfb0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    dfb4:	b672      	cpsid	i
    __asm("    bx lr");
    dfb6:	4770      	bx	lr

0000dfb8 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    dfb8:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    dfbc:	4770      	bx	lr
    dfbe:	bf00      	nop

0000dfc0 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dfc0:	4a0b      	ldr	r2, [pc, #44]	; (dff0 <am_hal_itm_enable+0x30>)
    dfc2:	68d3      	ldr	r3, [r2, #12]
    dfc4:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    dfc8:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    dfca:	68d1      	ldr	r1, [r2, #12]
    dfcc:	01cb      	lsls	r3, r1, #7
    dfce:	d5fc      	bpl.n	dfca <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    dfd0:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    dfd4:	4b07      	ldr	r3, [pc, #28]	; (dff4 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    dfd6:	4a08      	ldr	r2, [pc, #32]	; (dff8 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dfd8:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    dfdc:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    dfde:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dfe2:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dfe6:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dfea:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    dfee:	4770      	bx	lr
    dff0:	e000edf0 	.word	0xe000edf0
    dff4:	c5acce55 	.word	0xc5acce55
    dff8:	00150511 	.word	0x00150511

0000dffc <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    dffc:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    dffe:	4b24      	ldr	r3, [pc, #144]	; (e090 <am_hal_itm_disable+0x94>)
    e000:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e004:	b9b0      	cbnz	r0, e034 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e006:	4923      	ldr	r1, [pc, #140]	; (e094 <am_hal_itm_disable+0x98>)
    e008:	68ca      	ldr	r2, [r1, #12]
    e00a:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e00e:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e010:	68cb      	ldr	r3, [r1, #12]
    e012:	01da      	lsls	r2, r3, #7
    e014:	d5fc      	bpl.n	e010 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e016:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e01a:	481f      	ldr	r0, [pc, #124]	; (e098 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e01c:	4a1f      	ldr	r2, [pc, #124]	; (e09c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e01e:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e022:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e024:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e028:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e02c:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e030:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e034:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e038:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e03c:	021b      	lsls	r3, r3, #8
    e03e:	d4fb      	bmi.n	e038 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e040:	f240 20f7 	movw	r0, #759	; 0x2f7
    e044:	f7ff fd42 	bl	dacc <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e048:	4813      	ldr	r0, [pc, #76]	; (e098 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e04a:	4915      	ldr	r1, [pc, #84]	; (e0a0 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e04c:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e050:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e054:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e056:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e05a:	f022 0401 	bic.w	r4, r2, #1
    e05e:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e062:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e066:	420b      	tst	r3, r1
    e068:	d1fb      	bne.n	e062 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e06a:	3801      	subs	r0, #1
    e06c:	d1f3      	bne.n	e056 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e06e:	4909      	ldr	r1, [pc, #36]	; (e094 <am_hal_itm_disable+0x98>)
    e070:	68ca      	ldr	r2, [r1, #12]
    e072:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e076:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e078:	68cb      	ldr	r3, [r1, #12]
    e07a:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e07e:	d1fb      	bne.n	e078 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e080:	4903      	ldr	r1, [pc, #12]	; (e090 <am_hal_itm_disable+0x94>)
    e082:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e086:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e08a:	2a00      	cmp	r2, #0
    e08c:	d1fb      	bne.n	e086 <am_hal_itm_disable+0x8a>
}
    e08e:	bd10      	pop	{r4, pc}
    e090:	40020000 	.word	0x40020000
    e094:	e000edf0 	.word	0xe000edf0
    e098:	c5acce55 	.word	0xc5acce55
    e09c:	00150511 	.word	0x00150511
    e0a0:	00800001 	.word	0x00800001

0000e0a4 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    e0a4:	7803      	ldrb	r3, [r0, #0]
    e0a6:	b1b3      	cbz	r3, e0d6 <am_hal_itm_print+0x32>
{
    e0a8:	b410      	push	{r4}
    e0aa:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    e0ac:	2400      	movs	r4, #0
    e0ae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    e0b2:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    e0b4:	2900      	cmp	r1, #0
    e0b6:	d1fa      	bne.n	e0ae <am_hal_itm_print+0xa>
    e0b8:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    e0ba:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    e0be:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    e0c2:	f8dc 3000 	ldr.w	r3, [ip]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d0fb      	beq.n	e0c2 <am_hal_itm_print+0x1e>
    while (ui32Length)
    e0ca:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    e0cc:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    e0d0:	d1f5      	bne.n	e0be <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    e0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    e0d6:	4770      	bx	lr

0000e0d8 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e0d8:	b141      	cbz	r1, e0ec <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e0da:	2801      	cmp	r0, #1
{
    e0dc:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e0de:	d03a      	beq.n	e156 <am_hal_mcuctrl_info_get+0x7e>
    e0e0:	d322      	bcc.n	e128 <am_hal_mcuctrl_info_get+0x50>
    e0e2:	2802      	cmp	r0, #2
    e0e4:	d004      	beq.n	e0f0 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e0e6:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e0e8:	bcf0      	pop	{r4, r5, r6, r7}
    e0ea:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e0ec:	2006      	movs	r0, #6
    e0ee:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e0f0:	4a41      	ldr	r2, [pc, #260]	; (e1f8 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e0f2:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e0f4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e0f8:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e0fa:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e0fe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e102:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e106:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e108:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e10a:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e10c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e110:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e112:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e116:	4334      	orrs	r4, r6
    e118:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e11a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e11e:	4310      	orrs	r0, r2
    e120:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e122:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e124:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e126:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e128:	4c33      	ldr	r4, [pc, #204]	; (e1f8 <am_hal_mcuctrl_info_get+0x120>)
    e12a:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e12c:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e130:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e134:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e136:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e138:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e13c:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e140:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e142:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e144:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e148:	f004 0501 	and.w	r5, r4, #1
    e14c:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e14e:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e150:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e152:	bcf0      	pop	{r4, r5, r6, r7}
    e154:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e156:	4a28      	ldr	r2, [pc, #160]	; (e1f8 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e158:	4c28      	ldr	r4, [pc, #160]	; (e1fc <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e15a:	6813      	ldr	r3, [r2, #0]
    e15c:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e15e:	6850      	ldr	r0, [r2, #4]
    e160:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e162:	6897      	ldr	r7, [r2, #8]
    e164:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e166:	68d6      	ldr	r6, [r2, #12]
    e168:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e16a:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e16c:	4824      	ldr	r0, [pc, #144]	; (e200 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e16e:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e170:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e174:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e178:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e17a:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e17e:	4a21      	ldr	r2, [pc, #132]	; (e204 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e180:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e184:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e186:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e18a:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e18c:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e18e:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e190:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e194:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e198:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e19a:	f000 040f 	and.w	r4, r0, #15
    e19e:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e1a2:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e1a4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e1a8:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e1ac:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e1b0:	f007 0c0f 	and.w	ip, r7, #15
    e1b4:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e1b8:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e1ba:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e1be:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e1c2:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e1c6:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e1ca:	433b      	orrs	r3, r7
    e1cc:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e1ce:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e1d2:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e1d6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e1da:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e1de:	b2e5      	uxtb	r5, r4
    e1e0:	042b      	lsls	r3, r5, #16
    e1e2:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e1e6:	b2d6      	uxtb	r6, r2
    e1e8:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e1ea:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e1ec:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e1f0:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e1f2:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e1f4:	bcf0      	pop	{r4, r5, r6, r7}
    e1f6:	4770      	bx	lr
    e1f8:	40020000 	.word	0x40020000
    e1fc:	0000e7a8 	.word	0x0000e7a8
    e200:	0000e7e8 	.word	0x0000e7e8
    e204:	f0000f00 	.word	0xf0000f00

0000e208 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e208:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e20a:	4c1b      	ldr	r4, [pc, #108]	; (e278 <am_hal_pwrctrl_low_power_init+0x70>)
    e20c:	69a3      	ldr	r3, [r4, #24]
    e20e:	05db      	lsls	r3, r3, #23
{
    e210:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e212:	d502      	bpl.n	e21a <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e214:	2000      	movs	r0, #0
}
    e216:	b003      	add	sp, #12
    e218:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e21a:	4d18      	ldr	r5, [pc, #96]	; (e27c <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e21c:	4918      	ldr	r1, [pc, #96]	; (e280 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e21e:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e220:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e222:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e224:	461a      	mov	r2, r3
    e226:	9000      	str	r0, [sp, #0]
    e228:	f242 7010 	movw	r0, #10000	; 0x2710
    e22c:	f7ff fc52 	bl	dad4 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e230:	b110      	cbz	r0, e238 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e232:	2004      	movs	r0, #4
}
    e234:	b003      	add	sp, #12
    e236:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e238:	6821      	ldr	r1, [r4, #0]
    e23a:	f041 0201 	orr.w	r2, r1, #1
    e23e:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e240:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e242:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e246:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e248:	68ec      	ldr	r4, [r5, #12]
    e24a:	b2e2      	uxtb	r2, r4
    e24c:	2a11      	cmp	r2, #17
    e24e:	d1e1      	bne.n	e214 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e250:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e254:	f360 5356 	bfi	r3, r0, #21, #2
    e258:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e25c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e260:	240f      	movs	r4, #15
    e262:	f364 118b 	bfi	r1, r4, #6, #6
    e266:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e26a:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e26e:	f364 0205 	bfi	r2, r4, #0, #6
    e272:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e276:	e7ce      	b.n	e216 <am_hal_pwrctrl_low_power_init+0xe>
    e278:	40021000 	.word	0x40021000
    e27c:	40020000 	.word	0x40020000
    e280:	40020018 	.word	0x40020018

0000e284 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e284:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e288:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e28a:	68d3      	ldr	r3, [r2, #12]
    e28c:	bf0c      	ite	eq
    e28e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e292:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e296:	60d3      	str	r3, [r2, #12]
    e298:	4770      	bx	lr
    e29a:	bf00      	nop

0000e29c <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e29c:	4a03      	ldr	r2, [pc, #12]	; (e2ac <am_hal_rtc_osc_disable+0x10>)
    e29e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e2a2:	f043 0010 	orr.w	r0, r3, #16
    e2a6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e2aa:	4770      	bx	lr
    e2ac:	40004200 	.word	0x40004200

0000e2b0 <bl_run_main>:
#if defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
static void
bl_run_main(uint32_t *vtor)
{
    __asm
    e2b0:	f64e 5308 	movw	r3, #60680	; 0xed08
    e2b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    e2b8:	6018      	str	r0, [r3, #0]
    e2ba:	6803      	ldr	r3, [r0, #0]
    e2bc:	6842      	ldr	r2, [r0, #4]
    e2be:	469d      	mov	sp, r3
    e2c0:	4710      	bx	r2
    e2c2:	bf00      	nop

0000e2c4 <am_hal_bootloader_exit>:
//! If an image address is provided, a successful execution results in transfer to
//! the image - and this function does not return.
//
//*****************************************************************************
uint32_t am_hal_bootloader_exit(uint32_t *pImage)
{
    e2c4:	b530      	push	{r4, r5, lr}
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    // Lock the assets
#if AM_CMSIS_REGS
    if (MCUCTRL->SHADOWVALID_b.INFO0_VALID && MCUCTRL->BOOTLOADER_b.PROTLOCK)
    e2c6:	4a1d      	ldr	r2, [pc, #116]	; (e33c <am_hal_bootloader_exit+0x78>)
    e2c8:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    e2cc:	075d      	lsls	r5, r3, #29
{
    e2ce:	b085      	sub	sp, #20
    if (MCUCTRL->SHADOWVALID_b.INFO0_VALID && MCUCTRL->BOOTLOADER_b.PROTLOCK)
    e2d0:	d503      	bpl.n	e2da <am_hal_bootloader_exit+0x16>
    e2d2:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    e2d6:	074c      	lsls	r4, r1, #29
    e2d8:	d405      	bmi.n	e2e6 <am_hal_bootloader_exit+0x22>
            AM_REGVAL(0xE000EDF0) = dhcsr;
            // Resume from halt
        }
    }
    // Give control to supplied image
    if (pImage)
    e2da:	b110      	cbz	r0, e2e2 <am_hal_bootloader_exit+0x1e>
    {
        bl_run_main(pImage);
    e2dc:	f7ff ffe8 	bl	e2b0 <bl_run_main>
        // Does not return
    }
    return status;
    e2e0:	2000      	movs	r0, #0
}
    e2e2:	b005      	add	sp, #20
    e2e4:	bd30      	pop	{r4, r5, pc}
        keyVal.keyword[0] = ~pCustKey[0];
    e2e6:	4c16      	ldr	r4, [pc, #88]	; (e340 <am_hal_bootloader_exit+0x7c>)
    SECURITY->LOCKCTRL = lockType;
    e2e8:	4d16      	ldr	r5, [pc, #88]	; (e344 <am_hal_bootloader_exit+0x80>)
        keyVal.keyword[0] = ~pCustKey[0];
    e2ea:	6823      	ldr	r3, [r4, #0]
    SECURITY->LOCKCTRL = lockType;
    e2ec:	2401      	movs	r4, #1
        keyVal.keyword[0] = ~pCustKey[0];
    e2ee:	43d9      	mvns	r1, r3
    SECURITY->LOCKCTRL = lockType;
    e2f0:	67ac      	str	r4, [r5, #120]	; 0x78
    SECURITY->KEY0 = pKey->keys.key0;
    e2f2:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
    SECURITY->KEY1 = pKey->keys.key1;
    e2f6:	9b01      	ldr	r3, [sp, #4]
    e2f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    SECURITY->KEY2 = pKey->keys.key2;
    e2fc:	9902      	ldr	r1, [sp, #8]
    e2fe:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
    SECURITY->KEY3 = pKey->keys.key3;
    e302:	9b03      	ldr	r3, [sp, #12]
    e304:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    *pbUnlockStatus = SECURITY->LOCKSTAT & unlockMask;
    e308:	6fed      	ldr	r5, [r5, #124]	; 0x7c
        if ((status != AM_HAL_STATUS_SUCCESS) || (bLockStatus))
    e30a:	07e9      	lsls	r1, r5, #31
    e30c:	d413      	bmi.n	e336 <am_hal_bootloader_exit+0x72>
        MCUCTRL->BOOTLOADER = _VAL2FLD(MCUCTRL_BOOTLOADER_PROTLOCK, 1);
    e30e:	2404      	movs	r4, #4
    e310:	f8c2 41a0 	str.w	r4, [r2, #416]	; 0x1a0
        if (MCUCTRL->SCRATCH0 & 0x1)
    e314:	f8d2 11b0 	ldr.w	r1, [r2, #432]	; 0x1b0
    e318:	07cb      	lsls	r3, r1, #31
    e31a:	d5de      	bpl.n	e2da <am_hal_bootloader_exit+0x16>
            uint32_t dhcsr = AM_REGVAL(0xE000EDF0);
    e31c:	4d0a      	ldr	r5, [pc, #40]	; (e348 <am_hal_bootloader_exit+0x84>)
            dhcsr = ((uint32_t)0xA05F << 16) | (dhcsr & 0xFFFF) | 0x3;
    e31e:	4b0b      	ldr	r3, [pc, #44]	; (e34c <am_hal_bootloader_exit+0x88>)
            uint32_t dhcsr = AM_REGVAL(0xE000EDF0);
    e320:	682c      	ldr	r4, [r5, #0]
            MCUCTRL->SCRATCH0 &= ~0x1;
    e322:	f8d2 11b0 	ldr.w	r1, [r2, #432]	; 0x1b0
            dhcsr = ((uint32_t)0xA05F << 16) | (dhcsr & 0xFFFF) | 0x3;
    e326:	b2a4      	uxth	r4, r4
    e328:	4323      	orrs	r3, r4
            MCUCTRL->SCRATCH0 &= ~0x1;
    e32a:	f021 0101 	bic.w	r1, r1, #1
    e32e:	f8c2 11b0 	str.w	r1, [r2, #432]	; 0x1b0
            AM_REGVAL(0xE000EDF0) = dhcsr;
    e332:	602b      	str	r3, [r5, #0]
    e334:	e7d1      	b.n	e2da <am_hal_bootloader_exit+0x16>
            return AM_HAL_STATUS_FAIL;
    e336:	4620      	mov	r0, r4
    e338:	e7d3      	b.n	e2e2 <am_hal_bootloader_exit+0x1e>
    e33a:	bf00      	nop
    e33c:	40020000 	.word	0x40020000
    e340:	50021a00 	.word	0x50021a00
    e344:	40030000 	.word	0x40030000
    e348:	e000edf0 	.word	0xe000edf0
    e34c:	a05f0003 	.word	0xa05f0003

0000e350 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    e350:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    e352:	4a24      	ldr	r2, [pc, #144]	; (e3e4 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    e354:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    e356:	2100      	movs	r1, #0
{
    e358:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    e35a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    e35e:	b33b      	cbz	r3, e3b0 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e360:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e362:	4921      	ldr	r1, [pc, #132]	; (e3e8 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e364:	4c21      	ldr	r4, [pc, #132]	; (e3ec <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e366:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e368:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    e36c:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e36e:	458c      	cmp	ip, r1
    e370:	bf98      	it	ls
    e372:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    e374:	f7ff fb6e 	bl	da54 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    e378:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    e37a:	1c5a      	adds	r2, r3, #1
    e37c:	d02f      	beq.n	e3de <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    e37e:	08da      	lsrs	r2, r3, #3
    e380:	fbb2 fef4 	udiv	lr, r2, r4
    e384:	f10e 31ff 	add.w	r1, lr, #4294967295
    e388:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e38a:	4a16      	ldr	r2, [pc, #88]	; (e3e4 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e38c:	4918      	ldr	r1, [pc, #96]	; (e3f0 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e38e:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e390:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e394:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e396:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e398:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e39c:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e3a0:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e3a4:	f240 20f7 	movw	r0, #759	; 0x2f7
    e3a8:	f7ff fb90 	bl	dacc <am_hal_flash_delay>
}
    e3ac:	b004      	add	sp, #16
    e3ae:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e3b0:	6904      	ldr	r4, [r0, #16]
    e3b2:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e3b4:	6883      	ldr	r3, [r0, #8]
    e3b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e3ba:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e3bc:	4c0c      	ldr	r4, [pc, #48]	; (e3f0 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e3be:	3901      	subs	r1, #1
    e3c0:	2301      	movs	r3, #1
    e3c2:	408b      	lsls	r3, r1
    e3c4:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e3c6:	6840      	ldr	r0, [r0, #4]
    e3c8:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e3cc:	4302      	orrs	r2, r0
    e3ce:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e3d2:	f240 20f7 	movw	r0, #759	; 0x2f7
    e3d6:	f7ff fb79 	bl	dacc <am_hal_flash_delay>
}
    e3da:	b004      	add	sp, #16
    e3dc:	bd10      	pop	{r4, pc}
    e3de:	2005      	movs	r0, #5
    e3e0:	e7d3      	b.n	e38a <am_hal_tpiu_enable+0x3a>
    e3e2:	bf00      	nop
    e3e4:	e0040000 	.word	0xe0040000
    e3e8:	001da380 	.word	0x001da380
    e3ec:	000f4240 	.word	0x000f4240
    e3f0:	40020000 	.word	0x40020000

0000e3f4 <memcpy>:
    e3f4:	b510      	push	{r4, lr}
    e3f6:	1e43      	subs	r3, r0, #1
    e3f8:	440a      	add	r2, r1
    e3fa:	4291      	cmp	r1, r2
    e3fc:	d100      	bne.n	e400 <memcpy+0xc>
    e3fe:	bd10      	pop	{r4, pc}
    e400:	f811 4b01 	ldrb.w	r4, [r1], #1
    e404:	f803 4f01 	strb.w	r4, [r3, #1]!
    e408:	e7f7      	b.n	e3fa <memcpy+0x6>
    e40a:	0000      	movs	r0, r0
    e40c:	73696854 	.word	0x73696854
    e410:	20736920 	.word	0x20736920
    e414:	6c6f7041 	.word	0x6c6f7041
    e418:	20336f6c 	.word	0x20336f6c
    e41c:	6f636553 	.word	0x6f636553
    e420:	7261646e 	.word	0x7261646e
    e424:	6f422079 	.word	0x6f422079
    e428:	6f6c746f 	.word	0x6f6c746f
    e42c:	72656461 	.word	0x72656461
    e430:	6d655420 	.word	0x6d655420
    e434:	74616c70 	.word	0x74616c70
    e438:	72502065 	.word	0x72502065
    e43c:	6172676f 	.word	0x6172676f
    e440:	0a0d216d 	.word	0x0a0d216d
    e444:	00000a0d 	.word	0x00000a0d
    e448:	74737543 	.word	0x74737543
    e44c:	72656d6f 	.word	0x72656d6f
    e450:	79654b20 	.word	0x79654b20
    e454:	7830203a 	.word	0x7830203a
    e458:	78383025 	.word	0x78383025
    e45c:	2578302d 	.word	0x2578302d
    e460:	2d783830 	.word	0x2d783830
    e464:	30257830 	.word	0x30257830
    e468:	302d7838 	.word	0x302d7838
    e46c:	38302578 	.word	0x38302578
    e470:	000a0d78 	.word	0x000a0d78
    e474:	3a4b454b 	.word	0x3a4b454b
    e478:	0000000a 	.word	0x0000000a
    e47c:	2079654b 	.word	0x2079654b
    e480:	3a643225 	.word	0x3a643225
    e484:	25783020 	.word	0x25783020
    e488:	2d783830 	.word	0x2d783830
    e48c:	30257830 	.word	0x30257830
    e490:	302d7838 	.word	0x302d7838
    e494:	38302578 	.word	0x38302578
    e498:	78302d78 	.word	0x78302d78
    e49c:	78383025 	.word	0x78383025
    e4a0:	00000a0d 	.word	0x00000a0d
    e4a4:	68747541 	.word	0x68747541
    e4a8:	00000a3a 	.word	0x00000a3a
    e4ac:	2041544f 	.word	0x2041544f
    e4b0:	69617641 	.word	0x69617641
    e4b4:	6c62616c 	.word	0x6c62616c
    e4b8:	202d2065 	.word	0x202d2065
    e4bc:	2041544f 	.word	0x2041544f
    e4c0:	63736544 	.word	0x63736544
    e4c4:	78304020 	.word	0x78304020
    e4c8:	000a7825 	.word	0x000a7825
    e4cc:	6e756f46 	.word	0x6e756f46
    e4d0:	61622064 	.word	0x61622064
    e4d4:	544f2064 	.word	0x544f2064
    e4d8:	6f702041 	.word	0x6f702041
    e4dc:	69746e69 	.word	0x69746e69
    e4e0:	7420676e 	.word	0x7420676e
    e4e4:	69203a6f 	.word	0x69203a6f
    e4e8:	6567616d 	.word	0x6567616d
    e4ec:	64646120 	.word	0x64646120
    e4f0:	73736572 	.word	0x73736572
    e4f4:	2578303d 	.word	0x2578303d
    e4f8:	73202c78 	.word	0x73202c78
    e4fc:	20657a69 	.word	0x20657a69
    e500:	78257830 	.word	0x78257830
    e504:	0000000a 	.word	0x0000000a
    e508:	6e756f46 	.word	0x6e756f46
    e50c:	544f2064 	.word	0x544f2064
    e510:	20402041 	.word	0x20402041
    e514:	78257830 	.word	0x78257830
    e518:	67616d20 	.word	0x67616d20
    e51c:	30206369 	.word	0x30206369
    e520:	20782578 	.word	0x20782578
    e524:	6973202d 	.word	0x6973202d
    e528:	3020657a 	.word	0x3020657a
    e52c:	20782578 	.word	0x20782578
    e530:	62206f74 	.word	0x62206f74
    e534:	6e692065 	.word	0x6e692065
    e538:	6c617473 	.word	0x6c617473
    e53c:	2064656c 	.word	0x2064656c
    e540:	30207461 	.word	0x30207461
    e544:	0a782578 	.word	0x0a782578
    e548:	00000000 	.word	0x00000000
    e54c:	6e756f46 	.word	0x6e756f46
    e550:	6e752064 	.word	0x6e752064
    e554:	65707865 	.word	0x65707865
    e558:	64657463 	.word	0x64657463
    e55c:	41544f20 	.word	0x41544f20
    e560:	0000000a 	.word	0x0000000a
    e564:	65637845 	.word	0x65637845
    e568:	64656465 	.word	0x64656465
    e56c:	78616d20 	.word	0x78616d20
    e570:	6d756d69 	.word	0x6d756d69
    e574:	41544f20 	.word	0x41544f20
    e578:	00000a73 	.word	0x00000a73
    e57c:	6e756f46 	.word	0x6e756f46
    e580:	6e492064 	.word	0x6e492064
    e584:	696c6176 	.word	0x696c6176
    e588:	544f2064 	.word	0x544f2064
    e58c:	6f702041 	.word	0x6f702041
    e590:	65746e69 	.word	0x65746e69
    e594:	78302072 	.word	0x78302072
    e598:	000a7825 	.word	0x000a7825
    e59c:	61766e49 	.word	0x61766e49
    e5a0:	2064696c 	.word	0x2064696c
    e5a4:	6e69616d 	.word	0x6e69616d
    e5a8:	616d6920 	.word	0x616d6920
    e5ac:	000a6567 	.word	0x000a6567
    e5b0:	6e756f46 	.word	0x6e756f46
    e5b4:	61762064 	.word	0x61762064
    e5b8:	2064696c 	.word	0x2064696c
    e5bc:	6e69616d 	.word	0x6e69616d
    e5c0:	616d6920 	.word	0x616d6920
    e5c4:	2d206567 	.word	0x2d206567
    e5c8:	3a505320 	.word	0x3a505320
    e5cc:	78257830 	.word	0x78257830
    e5d0:	3a565220 	.word	0x3a565220
    e5d4:	78257830 	.word	0x78257830
    e5d8:	0000000a 	.word	0x0000000a
    e5dc:	6c6c6957 	.word	0x6c6c6957
    e5e0:	61727420 	.word	0x61727420
    e5e4:	6566736e 	.word	0x6566736e
    e5e8:	6f632072 	.word	0x6f632072
    e5ec:	6f72746e 	.word	0x6f72746e
    e5f0:	766f206c 	.word	0x766f206c
    e5f4:	74207265 	.word	0x74207265
    e5f8:	6874206f 	.word	0x6874206f
    e5fc:	69207369 	.word	0x69207369
    e600:	6567616d 	.word	0x6567616d
    e604:	74666120 	.word	0x74666120
    e608:	6c207265 	.word	0x6c207265
    e60c:	696b636f 	.word	0x696b636f
    e610:	7420676e 	.word	0x7420676e
    e614:	676e6968 	.word	0x676e6968
    e618:	6f642073 	.word	0x6f642073
    e61c:	0a0a6e77 	.word	0x0a0a6e77
    e620:	00000a0a 	.word	0x00000a0a
    e624:	0a0a0a0a 	.word	0x0a0a0a0a
    e628:	0a0a0a0a 	.word	0x0a0a0a0a
    e62c:	0a0a0a0a 	.word	0x0a0a0a0a
    e630:	0a0a0a0a 	.word	0x0a0a0a0a
    e634:	00000a0a 	.word	0x00000a0a

0000e638 <g_AM_BSP_GPIO_ITM_SWO>:
    e638:	00000002                                ....

0000e63c <am_hal_cachectrl_defaults>:
    e63c:	00000308                                ....

0000e640 <g_AM_HAL_GPIO_DISABLE>:
    e640:	00000003                                ....

0000e644 <g_ui8Bit76Capabilities>:
    e644:	02800101 80010180 80800101 80808080     ................
    e654:	80808080 80808008 01800180 80808080     ................
    e664:	80808080 01800402 01010401 80808080     ................
    e674:	00000101                                ....

0000e678 <g_ui8Inpen>:
    e678:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e688:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e698:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e6a8:	00003130                                01..

0000e6ac <g_ui8NCEtable>:
    e6ac:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e6bc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e6cc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e6dc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e6ec:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e6fc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e70c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e71c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e72c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e73c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e74c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e75c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e76c:	32221202 43231303                       .."2..#C

0000e774 <g_ui8nCEpins>:
    e774:	02070707 00080802 01020202 01010101     ................
    e784:	01010101 01010101 01010101 01010101     ................
    e794:	01010101 08010101 01010008 01010101     ................
    e7a4:	00000101                                ....

0000e7a8 <g_am_hal_mcuctrl_flash_size>:
    e7a8:	00004000 00008000 00010000 00020000     .@..............
    e7b8:	00040000 00080000 00100000 00200000     .............. .
	...

0000e7e8 <g_am_hal_mcuctrl_sram_size>:
    e7e8:	00004000 00008000 00010000 00020000     .@..............
    e7f8:	00040000 00080000 00100000 00060000     ................
	...
