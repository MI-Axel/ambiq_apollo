
hello_world_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026bc  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000e6bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001000  0000e6bc  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000e6bc  2**0
                  CONTENTS, READONLY
  5 .debug_info   00021029  00000000  00000000  0000e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003599  00000000  00000000  0002f71c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000720  00000000  00000000  00032cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001468  00000000  00000000  000333d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000062c7  00000000  00000000  0003483d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a2e6  00000000  00000000  0003ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00044dea  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000013c8  00000000  00000000  00044e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006daa  00000000  00000000  00046230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 51 c3 00 00 b9 c3 00 00 c5 c3 00 00     ....Q...........
    c010:	c5 c3 00 00 c5 c3 00 00 c5 c3 00 00 00 00 00 00     ................
	...
    c02c:	bf c3 00 00 bf c3 00 00 00 00 00 00 bf c3 00 00     ................
    c03c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c04c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c05c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c06c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c07c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c08c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c09c:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c0ac:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c0bc:	bf c3 00 00 bf c3 00 00 bf c3 00 00 bf c3 00 00     ................
    c0cc:	bf c3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b5b0      	push	{r4, r5, r7, lr}
    c1a2:	b0a4      	sub	sp, #144	; 0x90
    c1a4:	af04      	add	r7, sp, #16
    uint32_t ui32StrBuf;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	2100      	movs	r1, #0
    c1a8:	2000      	movs	r0, #0
    c1aa:	f001 f9c3 	bl	d534 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ae:	4851      	ldr	r0, [pc, #324]	; (c2f4 <main+0x154>)
    c1b0:	f001 f98c 	bl	d4cc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b4:	f001 f9b4 	bl	d520 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1b8:	f001 f918 	bl	d3ec <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c1bc:	f001 f966 	bl	d48c <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1c0:	f001 f90a 	bl	d3d8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c1c4:	484c      	ldr	r0, [pc, #304]	; (c2f8 <main+0x158>)
    c1c6:	f001 f8e9 	bl	d39c <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
    c1ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c1ce:	4618      	mov	r0, r3
    c1d0:	f000 f978 	bl	c4c4 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    c1d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1d6:	4619      	mov	r1, r3
    c1d8:	4848      	ldr	r0, [pc, #288]	; (c2fc <main+0x15c>)
    c1da:	f001 f8df 	bl	d39c <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n", sIdDevice.pui8DeviceName);
    c1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c1e0:	4619      	mov	r1, r3
    c1e2:	4847      	ldr	r0, [pc, #284]	; (c300 <main+0x160>)
    c1e4:	f001 f8da 	bl	d39c <am_util_stdio_printf>


    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
    c1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    am_util_stdio_printf("Qualified: %s\n",
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d001      	beq.n	c1f2 <main+0x52>
    c1ee:	4b45      	ldr	r3, [pc, #276]	; (c304 <main+0x164>)
    c1f0:	e000      	b.n	c1f4 <main+0x54>
    c1f2:	4b45      	ldr	r3, [pc, #276]	; (c308 <main+0x168>)
    c1f4:	4619      	mov	r1, r3
    c1f6:	4845      	ldr	r0, [pc, #276]	; (c30c <main+0x16c>)
    c1f8:	f001 f8d0 	bl	d39c <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
    c1fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    c1fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c200:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    c204:	f897 4078 	ldrb.w	r4, [r7, #120]	; 0x78
    c208:	f897 5079 	ldrb.w	r5, [r7, #121]	; 0x79
    am_util_stdio_printf("Device Info:\n"
    c20c:	9502      	str	r5, [sp, #8]
    c20e:	9401      	str	r4, [sp, #4]
    c210:	9300      	str	r3, [sp, #0]
    c212:	4603      	mov	r3, r0
    c214:	483e      	ldr	r0, [pc, #248]	; (c310 <main+0x170>)
    c216:	f001 f8c1 	bl	d39c <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
    c21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c21c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c220:	2b00      	cmp	r3, #0
    c222:	d001      	beq.n	c228 <main+0x88>
    c224:	232b      	movs	r3, #43	; 0x2b
    c226:	e000      	b.n	c22a <main+0x8a>
    c228:	2300      	movs	r3, #0
    c22a:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c22c:	6d79      	ldr	r1, [r7, #84]	; 0x54
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
    c22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c230:	0a9a      	lsrs	r2, r3, #10
    c232:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c236:	4837      	ldr	r0, [pc, #220]	; (c314 <main+0x174>)
    c238:	f001 f8b0 	bl	d39c <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
    c23c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c23e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c242:	2b00      	cmp	r3, #0
    c244:	d001      	beq.n	c24a <main+0xaa>
    c246:	232b      	movs	r3, #43	; 0x2b
    c248:	e000      	b.n	c24c <main+0xac>
    c24a:	2300      	movs	r3, #0
    c24c:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c24e:	6db9      	ldr	r1, [r7, #88]	; 0x58
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
    c250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c252:	0a9a      	lsrs	r2, r3, #10
    c254:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c258:	482f      	ldr	r0, [pc, #188]	; (c318 <main+0x178>)
    c25a:	f001 f89f 	bl	d39c <am_util_stdio_printf>
                         &ui32StrBuf);

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c25e:	492f      	ldr	r1, [pc, #188]	; (c31c <main+0x17c>)
    c260:	482f      	ldr	r0, [pc, #188]	; (c320 <main+0x180>)
    c262:	f001 f89b 	bl	d39c <am_util_stdio_printf>
#ifdef AM_PART_APOLLO3
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c266:	492f      	ldr	r1, [pc, #188]	; (c324 <main+0x184>)
    c268:	482f      	ldr	r0, [pc, #188]	; (c328 <main+0x188>)
    c26a:	f001 f897 	bl	d39c <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
    c26e:	4b2f      	ldr	r3, [pc, #188]	; (c32c <main+0x18c>)
    c270:	78db      	ldrb	r3, [r3, #3]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c272:	4619      	mov	r1, r3
                         g_ui32HALversion.s.Minor,
    c274:	4b2d      	ldr	r3, [pc, #180]	; (c32c <main+0x18c>)
    c276:	789b      	ldrb	r3, [r3, #2]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c278:	461a      	mov	r2, r3
                         g_ui32HALversion.s.Revision);
    c27a:	4b2c      	ldr	r3, [pc, #176]	; (c32c <main+0x18c>)
    c27c:	785b      	ldrb	r3, [r3, #1]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c27e:	482c      	ldr	r0, [pc, #176]	; (c330 <main+0x190>)
    c280:	f001 f88c 	bl	d39c <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");
    c284:	4b29      	ldr	r3, [pc, #164]	; (c32c <main+0x18c>)
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c28c:	b2db      	uxtb	r3, r3
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c28e:	2b00      	cmp	r3, #0
    c290:	d001      	beq.n	c296 <main+0xf6>
    c292:	4b28      	ldr	r3, [pc, #160]	; (c334 <main+0x194>)
    c294:	e000      	b.n	c298 <main+0xf8>
    c296:	4b28      	ldr	r3, [pc, #160]	; (c338 <main+0x198>)
    c298:	4619      	mov	r1, r3
    c29a:	4828      	ldr	r0, [pc, #160]	; (c33c <main+0x19c>)
    c29c:	f001 f87e 	bl	d39c <am_util_stdio_printf>

    am_hal_security_info_t secInfo;
    char sINFO[32];
    uint32_t ui32Status;
    ui32Status = am_hal_security_get_info(&secInfo);
    c2a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c2a4:	4618      	mov	r0, r3
    c2a6:	f001 fe07 	bl	deb8 <am_hal_security_get_info>
    c2aa:	67f8      	str	r0, [r7, #124]	; 0x7c
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c2ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d116      	bne.n	c2e0 <main+0x140>
    {
        if ( secInfo.bInfo0Valid )
    c2b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d006      	beq.n	c2c8 <main+0x128>
        {
            am_util_stdio_sprintf(sINFO, "INFO0 valid, ver 0x%X", secInfo.info0Version);
    c2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2bc:	1d3b      	adds	r3, r7, #4
    c2be:	4920      	ldr	r1, [pc, #128]	; (c340 <main+0x1a0>)
    c2c0:	4618      	mov	r0, r3
    c2c2:	f001 f855 	bl	d370 <am_util_stdio_sprintf>
    c2c6:	e004      	b.n	c2d2 <main+0x132>
        }
        else
        {
            am_util_stdio_sprintf(sINFO, "INFO0 invalid");
    c2c8:	1d3b      	adds	r3, r7, #4
    c2ca:	491e      	ldr	r1, [pc, #120]	; (c344 <main+0x1a4>)
    c2cc:	4618      	mov	r0, r3
    c2ce:	f001 f84f 	bl	d370 <am_util_stdio_sprintf>
        }

        am_util_stdio_printf("SBL ver: 0x%x - 0x%x, %s\n",
    c2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    c2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c2d6:	1d3b      	adds	r3, r7, #4
    c2d8:	481b      	ldr	r0, [pc, #108]	; (c348 <main+0x1a8>)
    c2da:	f001 f85f 	bl	d39c <am_util_stdio_printf>
    c2de:	e003      	b.n	c2e8 <main+0x148>
            secInfo.sblVersion, secInfo.sblVersionAddInfo, sINFO);
    }
    else
    {
        am_util_stdio_printf("am_hal_security_get_info failed 0x%X\n", ui32Status);
    c2e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    c2e2:	481a      	ldr	r0, [pc, #104]	; (c34c <main+0x1ac>)
    c2e4:	f001 f85a 	bl	d39c <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2e8:	f001 f89a 	bl	d420 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2ec:	2001      	movs	r0, #1
    c2ee:	f001 fdff 	bl	def0 <am_hal_sysctrl_sleep>
    c2f2:	e7fb      	b.n	c2ec <main+0x14c>
    c2f4:	0000e3d0 	.word	0x0000e3d0
    c2f8:	0000e14c 	.word	0x0000e14c
    c2fc:	0000e15c 	.word	0x0000e15c
    c300:	0000e170 	.word	0x0000e170
    c304:	0000e184 	.word	0x0000e184
    c308:	0000e188 	.word	0x0000e188
    c30c:	0000e18c 	.word	0x0000e18c
    c310:	0000e19c 	.word	0x0000e19c
    c314:	0000e208 	.word	0x0000e208
    c318:	0000e228 	.word	0x0000e228
    c31c:	0000e248 	.word	0x0000e248
    c320:	0000e290 	.word	0x0000e290
    c324:	0000e3d8 	.word	0x0000e3d8
    c328:	0000e2a8 	.word	0x0000e2a8
    c32c:	0000e3d4 	.word	0x0000e3d4
    c330:	0000e2c0 	.word	0x0000e2c0
    c334:	0000e2dc 	.word	0x0000e2dc
    c338:	0000e2e4 	.word	0x0000e2e4
    c33c:	0000e2ec 	.word	0x0000e2ec
    c340:	0000e314 	.word	0x0000e314
    c344:	0000e32c 	.word	0x0000e32c
    c348:	0000e33c 	.word	0x0000e33c
    c34c:	0000e358 	.word	0x0000e358

0000c350 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c350:	4811      	ldr	r0, [pc, #68]	; (c398 <zero_loop+0x12>)
    c352:	4912      	ldr	r1, [pc, #72]	; (c39c <zero_loop+0x16>)
    c354:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c356:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c35a:	4811      	ldr	r0, [pc, #68]	; (c3a0 <zero_loop+0x1a>)
    c35c:	6801      	ldr	r1, [r0, #0]
    c35e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c362:	6001      	str	r1, [r0, #0]
    c364:	f3bf 8f4f 	dsb	sy
    c368:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c36c:	480d      	ldr	r0, [pc, #52]	; (c3a4 <zero_loop+0x1e>)
    c36e:	490e      	ldr	r1, [pc, #56]	; (c3a8 <zero_loop+0x22>)
    c370:	4a0e      	ldr	r2, [pc, #56]	; (c3ac <zero_loop+0x26>)

0000c372 <copy_loop>:
    c372:	f850 3b04 	ldr.w	r3, [r0], #4
    c376:	f841 3b04 	str.w	r3, [r1], #4
    c37a:	4291      	cmp	r1, r2
    c37c:	dbf9      	blt.n	c372 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c37e:	480c      	ldr	r0, [pc, #48]	; (c3b0 <zero_loop+0x2a>)
    c380:	490c      	ldr	r1, [pc, #48]	; (c3b4 <zero_loop+0x2e>)
    c382:	f04f 0200 	mov.w	r2, #0

0000c386 <zero_loop>:
    c386:	4288      	cmp	r0, r1
    c388:	bfb8      	it	lt
    c38a:	f840 2b04 	strlt.w	r2, [r0], #4
    c38e:	dbfa      	blt.n	c386 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c390:	f7ff ff06 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c394:	be00      	bkpt	0x0000
}
    c396:	bf00      	nop
    c398:	e000ed08 	.word	0xe000ed08
    c39c:	0000c000 	.word	0x0000c000
    c3a0:	e000ed88 	.word	0xe000ed88
    c3a4:	0000e6bc 	.word	0x0000e6bc
    c3a8:	10001000 	.word	0x10001000
    c3ac:	10001000 	.word	0x10001000
    c3b0:	10001000 	.word	0x10001000
    c3b4:	10001110 	.word	0x10001110

0000c3b8 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c3b8:	b480      	push	{r7}
    c3ba:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c3bc:	e7fe      	b.n	c3bc <NMI_Handler+0x4>

0000c3be <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c3be:	b480      	push	{r7}
    c3c0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c3c2:	e7fe      	b.n	c3c2 <DebugMon_Handler+0x4>

0000c3c4 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c3c4:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c3c6:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c3c8:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c3ca:	f000 f809 	bl	c3e0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c3ce:	bd01      	pop	{r0, pc}
}
    c3d0:	bf00      	nop
    c3d2:	4618      	mov	r0, r3

0000c3d4 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c3d4:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c3d6:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c3d8:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c3da:	4770      	bx	lr
}
    c3dc:	bf00      	nop
    c3de:	4618      	mov	r0, r3

0000c3e0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c3e0:	b580      	push	{r7, lr}
    c3e2:	b096      	sub	sp, #88	; 0x58
    c3e4:	af00      	add	r7, sp, #0
    c3e6:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c3e8:	f107 030c 	add.w	r3, r7, #12
    c3ec:	2200      	movs	r2, #0
    c3ee:	601a      	str	r2, [r3, #0]
    c3f0:	605a      	str	r2, [r3, #4]
    c3f2:	609a      	str	r2, [r3, #8]
    c3f4:	60da      	str	r2, [r3, #12]
    c3f6:	611a      	str	r2, [r3, #16]
    c3f8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c3fa:	2300      	movs	r3, #0
    c3fc:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c400:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c402:	4b2e      	ldr	r3, [pc, #184]	; (c4bc <am_util_faultisr_collect_data+0xdc>)
    c404:	681b      	ldr	r3, [r3, #0]
    c406:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c40a:	b2db      	uxtb	r3, r3
    c40c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c412:	0a1b      	lsrs	r3, r3, #8
    c414:	b2db      	uxtb	r3, r3
    c416:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c41c:	0c1b      	lsrs	r3, r3, #16
    c41e:	b29b      	uxth	r3, r3
    c420:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c424:	4b26      	ldr	r3, [pc, #152]	; (c4c0 <am_util_faultisr_collect_data+0xe0>)
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c42a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c42e:	b2db      	uxtb	r3, r3
    c430:	f003 0302 	and.w	r3, r3, #2
    c434:	2b00      	cmp	r3, #0
    c436:	d005      	beq.n	c444 <am_util_faultisr_collect_data+0x64>
    c438:	6879      	ldr	r1, [r7, #4]
    c43a:	2006      	movs	r0, #6
    c43c:	f7ff ffca 	bl	c3d4 <getStackedReg>
    c440:	4603      	mov	r3, r0
    c442:	e001      	b.n	c448 <am_util_faultisr_collect_data+0x68>
    c444:	f04f 33ff 	mov.w	r3, #4294967295
    c448:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c44a:	6879      	ldr	r1, [r7, #4]
    c44c:	2000      	movs	r0, #0
    c44e:	f7ff ffc1 	bl	c3d4 <getStackedReg>
    c452:	4603      	mov	r3, r0
    c454:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c456:	6879      	ldr	r1, [r7, #4]
    c458:	2001      	movs	r0, #1
    c45a:	f7ff ffbb 	bl	c3d4 <getStackedReg>
    c45e:	4603      	mov	r3, r0
    c460:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c462:	6879      	ldr	r1, [r7, #4]
    c464:	2002      	movs	r0, #2
    c466:	f7ff ffb5 	bl	c3d4 <getStackedReg>
    c46a:	4603      	mov	r3, r0
    c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c46e:	6879      	ldr	r1, [r7, #4]
    c470:	2003      	movs	r0, #3
    c472:	f7ff ffaf 	bl	c3d4 <getStackedReg>
    c476:	4603      	mov	r3, r0
    c478:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c47a:	6879      	ldr	r1, [r7, #4]
    c47c:	2004      	movs	r0, #4
    c47e:	f7ff ffa9 	bl	c3d4 <getStackedReg>
    c482:	4603      	mov	r3, r0
    c484:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c486:	6879      	ldr	r1, [r7, #4]
    c488:	2005      	movs	r0, #5
    c48a:	f7ff ffa3 	bl	c3d4 <getStackedReg>
    c48e:	4603      	mov	r3, r0
    c490:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c492:	6879      	ldr	r1, [r7, #4]
    c494:	2006      	movs	r0, #6
    c496:	f7ff ff9d 	bl	c3d4 <getStackedReg>
    c49a:	4603      	mov	r3, r0
    c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c49e:	6879      	ldr	r1, [r7, #4]
    c4a0:	2007      	movs	r0, #7
    c4a2:	f7ff ff97 	bl	c3d4 <getStackedReg>
    c4a6:	4603      	mov	r3, r0
    c4a8:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4aa:	f107 030c 	add.w	r3, r7, #12
    c4ae:	4619      	mov	r1, r3
    c4b0:	2002      	movs	r0, #2
    c4b2:	f001 fbbf 	bl	dc34 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c4b6:	2300      	movs	r3, #0
    c4b8:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c4ba:	e7fe      	b.n	c4ba <am_util_faultisr_collect_data+0xda>
    c4bc:	e000ed28 	.word	0xe000ed28
    c4c0:	e000ed38 	.word	0xe000ed38

0000c4c4 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
    c4c4:	b580      	push	{r7, lr}
    c4c6:	b084      	sub	sp, #16
    c4c8:	af00      	add	r7, sp, #0
    c4ca:	6078      	str	r0, [r7, #4]

    //
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
    c4cc:	687b      	ldr	r3, [r7, #4]
    c4ce:	4619      	mov	r1, r3
    c4d0:	2001      	movs	r0, #1
    c4d2:	f001 fbaf 	bl	dc34 <am_hal_mcuctrl_info_get>
#endif

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
    c4d6:	687b      	ldr	r3, [r7, #4]
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c4de:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c4e0:	687b      	ldr	r3, [r7, #4]
    c4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c4e4:	4a58      	ldr	r2, [pc, #352]	; (c648 <am_util_id_device+0x184>)
    c4e6:	4293      	cmp	r3, r2
    c4e8:	d10e      	bne.n	c508 <am_util_id_device+0x44>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c4ea:	687b      	ldr	r3, [r7, #4]
    c4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c4ee:	2b9b      	cmp	r3, #155	; 0x9b
    c4f0:	d10a      	bne.n	c508 <am_util_id_device+0x44>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    c4f2:	687b      	ldr	r3, [r7, #4]
    c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c4f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c4fa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
    c4fe:	d003      	beq.n	c508 <am_util_id_device+0x44>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c500:	687b      	ldr	r3, [r7, #4]
    c502:	4a52      	ldr	r2, [pc, #328]	; (c64c <am_util_id_device+0x188>)
    c504:	639a      	str	r2, [r3, #56]	; 0x38
    c506:	e002      	b.n	c50e <am_util_id_device+0x4a>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
    c508:	687b      	ldr	r3, [r7, #4]
    c50a:	4a51      	ldr	r2, [pc, #324]	; (c650 <am_util_id_device+0x18c>)
    c50c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
    c50e:	687b      	ldr	r3, [r7, #4]
    c510:	691b      	ldr	r3, [r3, #16]
    c512:	4a50      	ldr	r2, [pc, #320]	; (c654 <am_util_id_device+0x190>)
    c514:	4293      	cmp	r3, r2
    c516:	d102      	bne.n	c51e <am_util_id_device+0x5a>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c518:	687b      	ldr	r3, [r7, #4]
    c51a:	4a4c      	ldr	r2, [pc, #304]	; (c64c <am_util_id_device+0x188>)
    c51c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
    c51e:	687b      	ldr	r3, [r7, #4]
    c520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c526:	2be0      	cmp	r3, #224	; 0xe0
    c528:	d126      	bne.n	c578 <am_util_id_device+0xb4>
    c52a:	68fb      	ldr	r3, [r7, #12]
    c52c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    c530:	d122      	bne.n	c578 <am_util_id_device+0xb4>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
    c532:	687b      	ldr	r3, [r7, #4]
    c534:	2201      	movs	r2, #1
    c536:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
    c538:	687b      	ldr	r3, [r7, #4]
    c53a:	4a47      	ldr	r2, [pc, #284]	; (c658 <am_util_id_device+0x194>)
    c53c:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c53e:	687b      	ldr	r3, [r7, #4]
    c540:	68db      	ldr	r3, [r3, #12]
    c542:	091b      	lsrs	r3, r3, #4
    c544:	f003 030f 	and.w	r3, r3, #15
    c548:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c54a:	68bb      	ldr	r3, [r7, #8]
    c54c:	b2db      	uxtb	r3, r3
    c54e:	3340      	adds	r3, #64	; 0x40
    c550:	b2da      	uxtb	r2, r3
    c552:	687b      	ldr	r3, [r7, #4]
    c554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	68db      	ldr	r3, [r3, #12]
    c55c:	f003 030f 	and.w	r3, r3, #15
    c560:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c562:	68bb      	ldr	r3, [r7, #8]
    c564:	b2db      	uxtb	r3, r3
    c566:	3330      	adds	r3, #48	; 0x30
    c568:	b2da      	uxtb	r2, r3
    c56a:	687b      	ldr	r3, [r7, #4]
    c56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c570:	687b      	ldr	r3, [r7, #4]
    c572:	4a36      	ldr	r2, [pc, #216]	; (c64c <am_util_id_device+0x188>)
    c574:	639a      	str	r2, [r3, #56]	; 0x38
    c576:	e061      	b.n	c63c <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
    c578:	687b      	ldr	r3, [r7, #4]
    c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c580:	2bd0      	cmp	r3, #208	; 0xd0
    c582:	d123      	bne.n	c5cc <am_util_id_device+0x108>
    c584:	68fb      	ldr	r3, [r7, #12]
    c586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
    c58a:	d11f      	bne.n	c5cc <am_util_id_device+0x108>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
    c58c:	687b      	ldr	r3, [r7, #4]
    c58e:	2202      	movs	r2, #2
    c590:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	4a31      	ldr	r2, [pc, #196]	; (c65c <am_util_id_device+0x198>)
    c596:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	68db      	ldr	r3, [r3, #12]
    c59c:	091b      	lsrs	r3, r3, #4
    c59e:	f003 030f 	and.w	r3, r3, #15
    c5a2:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c5a4:	68bb      	ldr	r3, [r7, #8]
    c5a6:	b2db      	uxtb	r3, r3
    c5a8:	3340      	adds	r3, #64	; 0x40
    c5aa:	b2da      	uxtb	r2, r3
    c5ac:	687b      	ldr	r3, [r7, #4]
    c5ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c5b2:	687b      	ldr	r3, [r7, #4]
    c5b4:	68db      	ldr	r3, [r3, #12]
    c5b6:	f003 030f 	and.w	r3, r3, #15
    c5ba:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c5bc:	68bb      	ldr	r3, [r7, #8]
    c5be:	b2db      	uxtb	r3, r3
    c5c0:	3330      	adds	r3, #48	; 0x30
    c5c2:	b2da      	uxtb	r2, r3
    c5c4:	687b      	ldr	r3, [r7, #4]
    c5c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c5ca:	e037      	b.n	c63c <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c5cc:	687b      	ldr	r3, [r7, #4]
    c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c5d4:	2bc0      	cmp	r3, #192	; 0xc0
    c5d6:	d123      	bne.n	c620 <am_util_id_device+0x15c>
    c5d8:	68fb      	ldr	r3, [r7, #12]
    c5da:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c5de:	d11f      	bne.n	c620 <am_util_id_device+0x15c>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
    c5e0:	687b      	ldr	r3, [r7, #4]
    c5e2:	2203      	movs	r2, #3
    c5e4:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
    c5e6:	687b      	ldr	r3, [r7, #4]
    c5e8:	4a1d      	ldr	r2, [pc, #116]	; (c660 <am_util_id_device+0x19c>)
    c5ea:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 1=Rev0, 2=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c5ec:	687b      	ldr	r3, [r7, #4]
    c5ee:	68db      	ldr	r3, [r3, #12]
    c5f0:	091b      	lsrs	r3, r3, #4
    c5f2:	f003 030f 	and.w	r3, r3, #15
    c5f6:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c5f8:	68bb      	ldr	r3, [r7, #8]
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	3340      	adds	r3, #64	; 0x40
    c5fe:	b2da      	uxtb	r2, r3
    c600:	687b      	ldr	r3, [r7, #4]
    c602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c606:	687b      	ldr	r3, [r7, #4]
    c608:	68db      	ldr	r3, [r3, #12]
    c60a:	f003 030f 	and.w	r3, r3, #15
    c60e:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux - 1);
    c610:	68bb      	ldr	r3, [r7, #8]
    c612:	b2db      	uxtb	r3, r3
    c614:	332f      	adds	r3, #47	; 0x2f
    c616:	b2da      	uxtb	r2, r3
    c618:	687b      	ldr	r3, [r7, #4]
    c61a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c61e:	e00d      	b.n	c63c <am_util_id_device+0x178>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
    c620:	687b      	ldr	r3, [r7, #4]
    c622:	2200      	movs	r2, #0
    c624:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
    c626:	687b      	ldr	r3, [r7, #4]
    c628:	4a0e      	ldr	r2, [pc, #56]	; (c664 <am_util_id_device+0x1a0>)
    c62a:	63da      	str	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	223f      	movs	r2, #63	; 0x3f
    c630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	2220      	movs	r2, #32
    c638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    return psIDDevice->ui32Device;
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    c640:	4618      	mov	r0, r3
    c642:	3710      	adds	r7, #16
    c644:	46bd      	mov	sp, r7
    c646:	bd80      	pop	{r7, pc}
    c648:	b105100d 	.word	0xb105100d
    c64c:	0000e3ac 	.word	0x0000e3ac
    c650:	0000e3b4 	.word	0x0000e3b4
    c654:	414d4251 	.word	0x414d4251
    c658:	0000e394 	.word	0x0000e394
    c65c:	0000e39c 	.word	0x0000e39c
    c660:	0000e3a4 	.word	0x0000e3a4
    c664:	0000e3bc 	.word	0x0000e3bc

0000c668 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c668:	b480      	push	{r7}
    c66a:	b083      	sub	sp, #12
    c66c:	af00      	add	r7, sp, #0
    c66e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c670:	4a04      	ldr	r2, [pc, #16]	; (c684 <am_util_stdio_printf_init+0x1c>)
    c672:	687b      	ldr	r3, [r7, #4]
    c674:	6013      	str	r3, [r2, #0]
}
    c676:	bf00      	nop
    c678:	370c      	adds	r7, #12
    c67a:	46bd      	mov	sp, r7
    c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c680:	4770      	bx	lr
    c682:	bf00      	nop
    c684:	1000110c 	.word	0x1000110c

0000c688 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c688:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c68c:	b096      	sub	sp, #88	; 0x58
    c68e:	af00      	add	r7, sp, #0
    c690:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c694:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c698:	0025      	movs	r5, r4
    c69a:	2600      	movs	r6, #0
    c69c:	ea55 0306 	orrs.w	r3, r5, r6
    c6a0:	f000 80a0 	beq.w	c7e4 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6a8:	0862      	lsrs	r2, r4, #1
    c6aa:	ea4f 0133 	mov.w	r1, r3, rrx
    c6ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c6b6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c6ba:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c6be:	eb11 0308 	adds.w	r3, r1, r8
    c6c2:	eb42 0409 	adc.w	r4, r2, r9
    c6c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c6ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6ce:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c6d2:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c6d6:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c6da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6de:	eb13 030a 	adds.w	r3, r3, sl
    c6e2:	eb44 040b 	adc.w	r4, r4, fp
    c6e6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c6ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6ee:	0a1a      	lsrs	r2, r3, #8
    c6f0:	62ba      	str	r2, [r7, #40]	; 0x28
    c6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c6f4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c6f8:	62ba      	str	r2, [r7, #40]	; 0x28
    c6fa:	0a23      	lsrs	r3, r4, #8
    c6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    c6fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c702:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c706:	18c9      	adds	r1, r1, r3
    c708:	eb42 0204 	adc.w	r2, r2, r4
    c70c:	460b      	mov	r3, r1
    c70e:	4614      	mov	r4, r2
    c710:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c714:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c718:	0c1a      	lsrs	r2, r3, #16
    c71a:	623a      	str	r2, [r7, #32]
    c71c:	6a3a      	ldr	r2, [r7, #32]
    c71e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c722:	623a      	str	r2, [r7, #32]
    c724:	0c23      	lsrs	r3, r4, #16
    c726:	627b      	str	r3, [r7, #36]	; 0x24
    c728:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c72c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c730:	18c9      	adds	r1, r1, r3
    c732:	eb42 0204 	adc.w	r2, r2, r4
    c736:	460b      	mov	r3, r1
    c738:	4614      	mov	r4, r2
    c73a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c73e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c742:	0023      	movs	r3, r4
    c744:	603b      	str	r3, [r7, #0]
    c746:	2300      	movs	r3, #0
    c748:	607b      	str	r3, [r7, #4]
    c74a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c74e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c752:	18c9      	adds	r1, r1, r3
    c754:	eb42 0204 	adc.w	r2, r2, r4
    c758:	460b      	mov	r3, r1
    c75a:	4614      	mov	r4, r2
    c75c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c760:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c764:	08da      	lsrs	r2, r3, #3
    c766:	613a      	str	r2, [r7, #16]
    c768:	693a      	ldr	r2, [r7, #16]
    c76a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c76e:	613a      	str	r2, [r7, #16]
    c770:	08e3      	lsrs	r3, r4, #3
    c772:	617b      	str	r3, [r7, #20]
    c774:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c778:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c77c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c780:	460b      	mov	r3, r1
    c782:	4614      	mov	r4, r2
    c784:	00a0      	lsls	r0, r4, #2
    c786:	60f8      	str	r0, [r7, #12]
    c788:	68f8      	ldr	r0, [r7, #12]
    c78a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c78e:	60f8      	str	r0, [r7, #12]
    c790:	009b      	lsls	r3, r3, #2
    c792:	60bb      	str	r3, [r7, #8]
    c794:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c798:	185b      	adds	r3, r3, r1
    c79a:	eb44 0402 	adc.w	r4, r4, r2
    c79e:	18db      	adds	r3, r3, r3
    c7a0:	eb44 0404 	adc.w	r4, r4, r4
    c7a4:	4619      	mov	r1, r3
    c7a6:	4622      	mov	r2, r4
    c7a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c7ac:	1a5b      	subs	r3, r3, r1
    c7ae:	eb64 0402 	sbc.w	r4, r4, r2
    c7b2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c7b6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c7ba:	3306      	adds	r3, #6
    c7bc:	f144 0400 	adc.w	r4, r4, #0
    c7c0:	091a      	lsrs	r2, r3, #4
    c7c2:	61ba      	str	r2, [r7, #24]
    c7c4:	69ba      	ldr	r2, [r7, #24]
    c7c6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c7ca:	61ba      	str	r2, [r7, #24]
    c7cc:	0923      	lsrs	r3, r4, #4
    c7ce:	61fb      	str	r3, [r7, #28]
    c7d0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c7d8:	18c9      	adds	r1, r1, r3
    c7da:	eb42 0204 	adc.w	r2, r2, r4
    c7de:	460b      	mov	r3, r1
    c7e0:	4614      	mov	r4, r2
    c7e2:	e029      	b.n	c838 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c7e6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c7ea:	085a      	lsrs	r2, r3, #1
    c7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c7ee:	089b      	lsrs	r3, r3, #2
    c7f0:	4413      	add	r3, r2
    c7f2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7f6:	091b      	lsrs	r3, r3, #4
    c7f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c7fa:	4413      	add	r3, r2
    c7fc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c800:	0a1b      	lsrs	r3, r3, #8
    c802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c804:	4413      	add	r3, r2
    c806:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c80a:	0c1b      	lsrs	r3, r3, #16
    c80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c80e:	4413      	add	r3, r2
    c810:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c814:	08db      	lsrs	r3, r3, #3
    c816:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c81a:	4613      	mov	r3, r2
    c81c:	009b      	lsls	r3, r3, #2
    c81e:	4413      	add	r3, r2
    c820:	005b      	lsls	r3, r3, #1
    c822:	461a      	mov	r2, r3
    c824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c826:	1a9b      	subs	r3, r3, r2
    c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c82c:	3306      	adds	r3, #6
    c82e:	091a      	lsrs	r2, r3, #4
    c830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c832:	4413      	add	r3, r2
    c834:	f04f 0400 	mov.w	r4, #0
    }
}
    c838:	4618      	mov	r0, r3
    c83a:	4621      	mov	r1, r4
    c83c:	3758      	adds	r7, #88	; 0x58
    c83e:	46bd      	mov	sp, r7
    c840:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c844:	4770      	bx	lr

0000c846 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c846:	b590      	push	{r4, r7, lr}
    c848:	b085      	sub	sp, #20
    c84a:	af00      	add	r7, sp, #0
    c84c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c850:	683a      	ldr	r2, [r7, #0]
    c852:	687b      	ldr	r3, [r7, #4]
    c854:	4313      	orrs	r3, r2
    c856:	2b00      	cmp	r3, #0
    c858:	bf0c      	ite	eq
    c85a:	2301      	moveq	r3, #1
    c85c:	2300      	movne	r3, #0
    c85e:	b2db      	uxtb	r3, r3
    c860:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c862:	e008      	b.n	c876 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c864:	e9d7 0100 	ldrd	r0, r1, [r7]
    c868:	f7ff ff0e 	bl	c688 <divu64_10>
    c86c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c870:	68fb      	ldr	r3, [r7, #12]
    c872:	3301      	adds	r3, #1
    c874:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c876:	e897 0018 	ldmia.w	r7, {r3, r4}
    c87a:	4323      	orrs	r3, r4
    c87c:	d1f2      	bne.n	c864 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c87e:	68fb      	ldr	r3, [r7, #12]
}
    c880:	4618      	mov	r0, r3
    c882:	3714      	adds	r7, #20
    c884:	46bd      	mov	sp, r7
    c886:	bd90      	pop	{r4, r7, pc}

0000c888 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c888:	b590      	push	{r4, r7, lr}
    c88a:	b083      	sub	sp, #12
    c88c:	af00      	add	r7, sp, #0
    c88e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c892:	e897 0018 	ldmia.w	r7, {r3, r4}
    c896:	2b00      	cmp	r3, #0
    c898:	f174 0300 	sbcs.w	r3, r4, #0
    c89c:	da06      	bge.n	c8ac <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c89e:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8a2:	425b      	negs	r3, r3
    c8a4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c8a8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c8ac:	e897 0018 	ldmia.w	r7, {r3, r4}
    c8b0:	4618      	mov	r0, r3
    c8b2:	4621      	mov	r1, r4
    c8b4:	f7ff ffc7 	bl	c846 <ndigits_in_u64>
    c8b8:	4603      	mov	r3, r0
}
    c8ba:	4618      	mov	r0, r3
    c8bc:	370c      	adds	r7, #12
    c8be:	46bd      	mov	sp, r7
    c8c0:	bd90      	pop	{r4, r7, pc}

0000c8c2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c8c2:	b490      	push	{r4, r7}
    c8c4:	b084      	sub	sp, #16
    c8c6:	af00      	add	r7, sp, #0
    c8c8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c8cc:	6839      	ldr	r1, [r7, #0]
    c8ce:	687a      	ldr	r2, [r7, #4]
    c8d0:	430a      	orrs	r2, r1
    c8d2:	2a00      	cmp	r2, #0
    c8d4:	bf0c      	ite	eq
    c8d6:	2201      	moveq	r2, #1
    c8d8:	2200      	movne	r2, #0
    c8da:	b2d2      	uxtb	r2, r2
    c8dc:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c8de:	e00a      	b.n	c8f6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c8e0:	e897 0006 	ldmia.w	r7, {r1, r2}
    c8e4:	090b      	lsrs	r3, r1, #4
    c8e6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c8ea:	0914      	lsrs	r4, r2, #4
    c8ec:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c8f0:	68fa      	ldr	r2, [r7, #12]
    c8f2:	3201      	adds	r2, #1
    c8f4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c8f6:	e897 0006 	ldmia.w	r7, {r1, r2}
    c8fa:	430a      	orrs	r2, r1
    c8fc:	d1f0      	bne.n	c8e0 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c8fe:	68fb      	ldr	r3, [r7, #12]
}
    c900:	4618      	mov	r0, r3
    c902:	3710      	adds	r7, #16
    c904:	46bd      	mov	sp, r7
    c906:	bc90      	pop	{r4, r7}
    c908:	4770      	bx	lr

0000c90a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c90a:	b480      	push	{r7}
    c90c:	b087      	sub	sp, #28
    c90e:	af00      	add	r7, sp, #0
    c910:	6078      	str	r0, [r7, #4]
    c912:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c914:	2300      	movs	r3, #0
    c916:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c918:	2300      	movs	r3, #0
    c91a:	613b      	str	r3, [r7, #16]
    c91c:	2300      	movs	r3, #0
    c91e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c920:	687b      	ldr	r3, [r7, #4]
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	2b2d      	cmp	r3, #45	; 0x2d
    c926:	d11b      	bne.n	c960 <decstr_to_int+0x56>
    {
        bNeg = true;
    c928:	2301      	movs	r3, #1
    c92a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c92c:	687b      	ldr	r3, [r7, #4]
    c92e:	3301      	adds	r3, #1
    c930:	607b      	str	r3, [r7, #4]
        uCnt++;
    c932:	68fb      	ldr	r3, [r7, #12]
    c934:	3301      	adds	r3, #1
    c936:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c938:	e012      	b.n	c960 <decstr_to_int+0x56>
    {
        ++uCnt;
    c93a:	68fb      	ldr	r3, [r7, #12]
    c93c:	3301      	adds	r3, #1
    c93e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c940:	693a      	ldr	r2, [r7, #16]
    c942:	4613      	mov	r3, r2
    c944:	009b      	lsls	r3, r3, #2
    c946:	4413      	add	r3, r2
    c948:	005b      	lsls	r3, r3, #1
    c94a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c94c:	687b      	ldr	r3, [r7, #4]
    c94e:	781b      	ldrb	r3, [r3, #0]
    c950:	461a      	mov	r2, r3
    c952:	693b      	ldr	r3, [r7, #16]
    c954:	4413      	add	r3, r2
    c956:	3b30      	subs	r3, #48	; 0x30
    c958:	613b      	str	r3, [r7, #16]
        pcStr++;
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	3301      	adds	r3, #1
    c95e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	781b      	ldrb	r3, [r3, #0]
    c964:	2b2f      	cmp	r3, #47	; 0x2f
    c966:	d903      	bls.n	c970 <decstr_to_int+0x66>
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	2b39      	cmp	r3, #57	; 0x39
    c96e:	d9e4      	bls.n	c93a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c970:	683b      	ldr	r3, [r7, #0]
    c972:	2b00      	cmp	r3, #0
    c974:	d002      	beq.n	c97c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c976:	683b      	ldr	r3, [r7, #0]
    c978:	68fa      	ldr	r2, [r7, #12]
    c97a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c97c:	7dfb      	ldrb	r3, [r7, #23]
    c97e:	2b00      	cmp	r3, #0
    c980:	d002      	beq.n	c988 <decstr_to_int+0x7e>
    c982:	693b      	ldr	r3, [r7, #16]
    c984:	425b      	negs	r3, r3
    c986:	e000      	b.n	c98a <decstr_to_int+0x80>
    c988:	693b      	ldr	r3, [r7, #16]
}
    c98a:	4618      	mov	r0, r3
    c98c:	371c      	adds	r7, #28
    c98e:	46bd      	mov	sp, r7
    c990:	f85d 7b04 	ldr.w	r7, [sp], #4
    c994:	4770      	bx	lr

0000c996 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c996:	b590      	push	{r4, r7, lr}
    c998:	b091      	sub	sp, #68	; 0x44
    c99a:	af00      	add	r7, sp, #0
    c99c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c9a0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9a2:	2300      	movs	r3, #0
    c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c9a6:	2300      	movs	r3, #0
    c9a8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c9ae:	f7ff fe6b 	bl	c688 <divu64_10>
    c9b2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c9b6:	68b9      	ldr	r1, [r7, #8]
    c9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c9ba:	4613      	mov	r3, r2
    c9bc:	009b      	lsls	r3, r3, #2
    c9be:	4413      	add	r3, r2
    c9c0:	005b      	lsls	r3, r3, #1
    c9c2:	1acb      	subs	r3, r1, r3
    c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9c8:	1c5a      	adds	r2, r3, #1
    c9ca:	63fa      	str	r2, [r7, #60]	; 0x3c
    c9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c9ce:	b2d2      	uxtb	r2, r2
    c9d0:	3230      	adds	r2, #48	; 0x30
    c9d2:	b2d2      	uxtb	r2, r2
    c9d4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c9d8:	440b      	add	r3, r1
    c9da:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c9de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c9e2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c9e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c9ea:	4323      	orrs	r3, r4
    c9ec:	d1dd      	bne.n	c9aa <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9f0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9f2:	687b      	ldr	r3, [r7, #4]
    c9f4:	2b00      	cmp	r3, #0
    c9f6:	d011      	beq.n	ca1c <uint64_to_str+0x86>
    {
        while ( ix-- )
    c9f8:	e008      	b.n	ca0c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	1c5a      	adds	r2, r3, #1
    c9fe:	607a      	str	r2, [r7, #4]
    ca00:	f107 0110 	add.w	r1, r7, #16
    ca04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ca06:	440a      	add	r2, r1
    ca08:	7812      	ldrb	r2, [r2, #0]
    ca0a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca0e:	1e5a      	subs	r2, r3, #1
    ca10:	63fa      	str	r2, [r7, #60]	; 0x3c
    ca12:	2b00      	cmp	r3, #0
    ca14:	d1f1      	bne.n	c9fa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca16:	687b      	ldr	r3, [r7, #4]
    ca18:	2200      	movs	r2, #0
    ca1a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    ca1e:	4618      	mov	r0, r3
    ca20:	3744      	adds	r7, #68	; 0x44
    ca22:	46bd      	mov	sp, r7
    ca24:	bd90      	pop	{r4, r7, pc}

0000ca26 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca26:	b4b0      	push	{r4, r5, r7}
    ca28:	b08d      	sub	sp, #52	; 0x34
    ca2a:	af00      	add	r7, sp, #0
    ca2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    ca30:	607a      	str	r2, [r7, #4]
    ca32:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    ca34:	2300      	movs	r3, #0
    ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca3c:	4313      	orrs	r3, r2
    ca3e:	d131      	bne.n	caa4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca42:	1c5a      	adds	r2, r3, #1
    ca44:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca46:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ca4a:	4413      	add	r3, r2
    ca4c:	2230      	movs	r2, #48	; 0x30
    ca4e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca52:	e027      	b.n	caa4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    ca54:	7a3b      	ldrb	r3, [r7, #8]
    ca56:	f003 030f 	and.w	r3, r3, #15
    ca5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    ca5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ca62:	2b09      	cmp	r3, #9
    ca64:	d90a      	bls.n	ca7c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca66:	78fb      	ldrb	r3, [r7, #3]
    ca68:	2b00      	cmp	r3, #0
    ca6a:	d001      	beq.n	ca70 <uint64_to_hexstr+0x4a>
    ca6c:	2227      	movs	r2, #39	; 0x27
    ca6e:	e000      	b.n	ca72 <uint64_to_hexstr+0x4c>
    ca70:	2207      	movs	r2, #7
    ca72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ca76:	4413      	add	r3, r2
    ca78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca7e:	1c5a      	adds	r2, r3, #1
    ca80:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca82:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    ca86:	3230      	adds	r2, #48	; 0x30
    ca88:	b2d2      	uxtb	r2, r2
    ca8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    ca8e:	440b      	add	r3, r1
    ca90:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca98:	0914      	lsrs	r4, r2, #4
    ca9a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    ca9e:	091d      	lsrs	r5, r3, #4
    caa0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    caa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    caa8:	4313      	orrs	r3, r2
    caaa:	d1d3      	bne.n	ca54 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caae:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cab0:	687b      	ldr	r3, [r7, #4]
    cab2:	2b00      	cmp	r3, #0
    cab4:	d011      	beq.n	cada <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cab6:	e008      	b.n	caca <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cab8:	687b      	ldr	r3, [r7, #4]
    caba:	1c5a      	adds	r2, r3, #1
    cabc:	607a      	str	r2, [r7, #4]
    cabe:	f107 0110 	add.w	r1, r7, #16
    cac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cac4:	440a      	add	r2, r1
    cac6:	7812      	ldrb	r2, [r2, #0]
    cac8:	701a      	strb	r2, [r3, #0]
        while (ix--)
    caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cacc:	1e5a      	subs	r2, r3, #1
    cace:	62fa      	str	r2, [r7, #44]	; 0x2c
    cad0:	2b00      	cmp	r3, #0
    cad2:	d1f1      	bne.n	cab8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cad4:	687b      	ldr	r3, [r7, #4]
    cad6:	2200      	movs	r2, #0
    cad8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cadc:	4618      	mov	r0, r3
    cade:	3734      	adds	r7, #52	; 0x34
    cae0:	46bd      	mov	sp, r7
    cae2:	bcb0      	pop	{r4, r5, r7}
    cae4:	4770      	bx	lr

0000cae6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cae6:	b480      	push	{r7}
    cae8:	b085      	sub	sp, #20
    caea:	af00      	add	r7, sp, #0
    caec:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    caee:	2300      	movs	r3, #0
    caf0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    caf2:	687b      	ldr	r3, [r7, #4]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d104      	bne.n	cb02 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    caf8:	68fb      	ldr	r3, [r7, #12]
    cafa:	e009      	b.n	cb10 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cafc:	68fb      	ldr	r3, [r7, #12]
    cafe:	3301      	adds	r3, #1
    cb00:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cb02:	687b      	ldr	r3, [r7, #4]
    cb04:	1c5a      	adds	r2, r3, #1
    cb06:	607a      	str	r2, [r7, #4]
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d1f6      	bne.n	cafc <simple_strlen+0x16>
    }
    return ui32RetVal;
    cb0e:	68fb      	ldr	r3, [r7, #12]
}
    cb10:	4618      	mov	r0, r3
    cb12:	3714      	adds	r7, #20
    cb14:	46bd      	mov	sp, r7
    cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb1a:	4770      	bx	lr

0000cb1c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb1c:	b480      	push	{r7}
    cb1e:	b087      	sub	sp, #28
    cb20:	af00      	add	r7, sp, #0
    cb22:	60f8      	str	r0, [r7, #12]
    cb24:	460b      	mov	r3, r1
    cb26:	607a      	str	r2, [r7, #4]
    cb28:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cb2a:	2300      	movs	r3, #0
    cb2c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cb2e:	687b      	ldr	r3, [r7, #4]
    cb30:	2b00      	cmp	r3, #0
    cb32:	dc0c      	bgt.n	cb4e <padbuffer+0x32>
    {
        return i32Cnt;
    cb34:	697b      	ldr	r3, [r7, #20]
    cb36:	e010      	b.n	cb5a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb38:	68fb      	ldr	r3, [r7, #12]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d004      	beq.n	cb48 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb3e:	68fb      	ldr	r3, [r7, #12]
    cb40:	1c5a      	adds	r2, r3, #1
    cb42:	60fa      	str	r2, [r7, #12]
    cb44:	7afa      	ldrb	r2, [r7, #11]
    cb46:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb48:	697b      	ldr	r3, [r7, #20]
    cb4a:	3301      	adds	r3, #1
    cb4c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cb4e:	687b      	ldr	r3, [r7, #4]
    cb50:	1e5a      	subs	r2, r3, #1
    cb52:	607a      	str	r2, [r7, #4]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d1ef      	bne.n	cb38 <padbuffer+0x1c>
    }

    return i32Cnt;
    cb58:	697b      	ldr	r3, [r7, #20]
}
    cb5a:	4618      	mov	r0, r3
    cb5c:	371c      	adds	r7, #28
    cb5e:	46bd      	mov	sp, r7
    cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb64:	4770      	bx	lr
	...

0000cb68 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb68:	b590      	push	{r4, r7, lr}
    cb6a:	b08f      	sub	sp, #60	; 0x3c
    cb6c:	af00      	add	r7, sp, #0
    cb6e:	60f8      	str	r0, [r7, #12]
    cb70:	60b9      	str	r1, [r7, #8]
    cb72:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb74:	68bb      	ldr	r3, [r7, #8]
    cb76:	681b      	ldr	r3, [r3, #0]
    cb78:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb7c:	2b03      	cmp	r3, #3
    cb7e:	dc02      	bgt.n	cb86 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cb80:	f06f 0302 	mvn.w	r3, #2
    cb84:	e0e7      	b.n	cd56 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cb86:	edd7 7a03 	vldr	s15, [r7, #12]
    cb8a:	eef5 7a40 	vcmp.f32	s15, #0.0
    cb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb92:	d104      	bne.n	cb9e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb94:	68bb      	ldr	r3, [r7, #8]
    cb96:	4a72      	ldr	r2, [pc, #456]	; (cd60 <ftoa+0x1f8>)
    cb98:	601a      	str	r2, [r3, #0]
        return 3;
    cb9a:	2303      	movs	r3, #3
    cb9c:	e0db      	b.n	cd56 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cb9e:	68bb      	ldr	r3, [r7, #8]
    cba0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cba2:	68fb      	ldr	r3, [r7, #12]
    cba4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cba6:	693b      	ldr	r3, [r7, #16]
    cba8:	15db      	asrs	r3, r3, #23
    cbaa:	b2db      	uxtb	r3, r3
    cbac:	3b7f      	subs	r3, #127	; 0x7f
    cbae:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbb0:	693b      	ldr	r3, [r7, #16]
    cbb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cbba:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cbbc:	2300      	movs	r3, #0
    cbbe:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cbc0:	2300      	movs	r3, #0
    cbc2:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cbc4:	69fb      	ldr	r3, [r7, #28]
    cbc6:	2b1e      	cmp	r3, #30
    cbc8:	dd02      	ble.n	cbd0 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cbca:	f06f 0301 	mvn.w	r3, #1
    cbce:	e0c2      	b.n	cd56 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cbd0:	69fb      	ldr	r3, [r7, #28]
    cbd2:	f113 0f17 	cmn.w	r3, #23
    cbd6:	da02      	bge.n	cbde <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cbd8:	f04f 33ff 	mov.w	r3, #4294967295
    cbdc:	e0bb      	b.n	cd56 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cbde:	69fb      	ldr	r3, [r7, #28]
    cbe0:	2b16      	cmp	r3, #22
    cbe2:	dd06      	ble.n	cbf2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cbe4:	69fb      	ldr	r3, [r7, #28]
    cbe6:	3b17      	subs	r3, #23
    cbe8:	69ba      	ldr	r2, [r7, #24]
    cbea:	fa02 f303 	lsl.w	r3, r2, r3
    cbee:	637b      	str	r3, [r7, #52]	; 0x34
    cbf0:	e01a      	b.n	cc28 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cbf2:	69fb      	ldr	r3, [r7, #28]
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	db0f      	blt.n	cc18 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cbf8:	69fb      	ldr	r3, [r7, #28]
    cbfa:	f1c3 0317 	rsb	r3, r3, #23
    cbfe:	69ba      	ldr	r2, [r7, #24]
    cc00:	fa42 f303 	asr.w	r3, r2, r3
    cc04:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc06:	69fb      	ldr	r3, [r7, #28]
    cc08:	3301      	adds	r3, #1
    cc0a:	69ba      	ldr	r2, [r7, #24]
    cc0c:	fa02 f303 	lsl.w	r3, r2, r3
    cc10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc14:	633b      	str	r3, [r7, #48]	; 0x30
    cc16:	e007      	b.n	cc28 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc18:	69bb      	ldr	r3, [r7, #24]
    cc1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc1e:	69fb      	ldr	r3, [r7, #28]
    cc20:	43db      	mvns	r3, r3
    cc22:	fa42 f303 	asr.w	r3, r2, r3
    cc26:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc28:	693b      	ldr	r3, [r7, #16]
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	da04      	bge.n	cc38 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc2e:	68bb      	ldr	r3, [r7, #8]
    cc30:	1c5a      	adds	r2, r3, #1
    cc32:	60ba      	str	r2, [r7, #8]
    cc34:	222d      	movs	r2, #45	; 0x2d
    cc36:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d105      	bne.n	cc4a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc3e:	68bb      	ldr	r3, [r7, #8]
    cc40:	1c5a      	adds	r2, r3, #1
    cc42:	60ba      	str	r2, [r7, #8]
    cc44:	2230      	movs	r2, #48	; 0x30
    cc46:	701a      	strb	r2, [r3, #0]
    cc48:	e021      	b.n	cc8e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	dd08      	ble.n	cc62 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc52:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc56:	68ba      	ldr	r2, [r7, #8]
    cc58:	4618      	mov	r0, r3
    cc5a:	4621      	mov	r1, r4
    cc5c:	f7ff fe9b 	bl	c996 <uint64_to_str>
    cc60:	e011      	b.n	cc86 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cc62:	68bb      	ldr	r3, [r7, #8]
    cc64:	1c5a      	adds	r2, r3, #1
    cc66:	60ba      	str	r2, [r7, #8]
    cc68:	222d      	movs	r2, #45	; 0x2d
    cc6a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc6e:	425b      	negs	r3, r3
    cc70:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc74:	68ba      	ldr	r2, [r7, #8]
    cc76:	4618      	mov	r0, r3
    cc78:	4621      	mov	r1, r4
    cc7a:	f7ff fe8c 	bl	c996 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc7e:	e002      	b.n	cc86 <ftoa+0x11e>
        {
            pcBuf++;
    cc80:	68bb      	ldr	r3, [r7, #8]
    cc82:	3301      	adds	r3, #1
    cc84:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cc86:	68bb      	ldr	r3, [r7, #8]
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d1f8      	bne.n	cc80 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc8e:	68bb      	ldr	r3, [r7, #8]
    cc90:	1c5a      	adds	r2, r3, #1
    cc92:	60ba      	str	r2, [r7, #8]
    cc94:	222e      	movs	r2, #46	; 0x2e
    cc96:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d105      	bne.n	ccaa <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cc9e:	68bb      	ldr	r3, [r7, #8]
    cca0:	1c5a      	adds	r2, r3, #1
    cca2:	60ba      	str	r2, [r7, #8]
    cca4:	2230      	movs	r2, #48	; 0x30
    cca6:	701a      	strb	r2, [r3, #0]
    cca8:	e04f      	b.n	cd4a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccaa:	68ba      	ldr	r2, [r7, #8]
    ccac:	6a3b      	ldr	r3, [r7, #32]
    ccae:	1ad3      	subs	r3, r2, r3
    ccb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ccb2:	1ad3      	subs	r3, r2, r3
    ccb4:	3b01      	subs	r3, #1
    ccb6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ccb8:	697a      	ldr	r2, [r7, #20]
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	4293      	cmp	r3, r2
    ccbe:	bfa8      	it	ge
    ccc0:	4613      	movge	r3, r2
    ccc2:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    ccc4:	2300      	movs	r3, #0
    ccc6:	62bb      	str	r3, [r7, #40]	; 0x28
    ccc8:	e015      	b.n	ccf6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    ccca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cccc:	4613      	mov	r3, r2
    ccce:	009b      	lsls	r3, r3, #2
    ccd0:	4413      	add	r3, r2
    ccd2:	005b      	lsls	r3, r3, #1
    ccd4:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ccd6:	68bb      	ldr	r3, [r7, #8]
    ccd8:	1c5a      	adds	r2, r3, #1
    ccda:	60ba      	str	r2, [r7, #8]
    ccdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ccde:	1612      	asrs	r2, r2, #24
    cce0:	b2d2      	uxtb	r2, r2
    cce2:	3230      	adds	r2, #48	; 0x30
    cce4:	b2d2      	uxtb	r2, r2
    cce6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccee:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ccf2:	3301      	adds	r3, #1
    ccf4:	62bb      	str	r3, [r7, #40]	; 0x28
    ccf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ccf8:	697b      	ldr	r3, [r7, #20]
    ccfa:	429a      	cmp	r2, r3
    ccfc:	dbe5      	blt.n	ccca <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ccfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd00:	4613      	mov	r3, r2
    cd02:	009b      	lsls	r3, r3, #2
    cd04:	4413      	add	r3, r2
    cd06:	005b      	lsls	r3, r3, #1
    cd08:	161b      	asrs	r3, r3, #24
    cd0a:	2b04      	cmp	r3, #4
    cd0c:	dd1d      	ble.n	cd4a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd0e:	68bb      	ldr	r3, [r7, #8]
    cd10:	3b01      	subs	r3, #1
    cd12:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd14:	e015      	b.n	cd42 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd18:	781b      	ldrb	r3, [r3, #0]
    cd1a:	2b2e      	cmp	r3, #46	; 0x2e
    cd1c:	d00e      	beq.n	cd3c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd20:	781b      	ldrb	r3, [r3, #0]
    cd22:	2b39      	cmp	r3, #57	; 0x39
    cd24:	d103      	bne.n	cd2e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd28:	2230      	movs	r2, #48	; 0x30
    cd2a:	701a      	strb	r2, [r3, #0]
    cd2c:	e006      	b.n	cd3c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	3301      	adds	r3, #1
    cd34:	b2da      	uxtb	r2, r3
    cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd38:	701a      	strb	r2, [r3, #0]
                    break;
    cd3a:	e006      	b.n	cd4a <ftoa+0x1e2>
                }
                pcBuftmp--;
    cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd3e:	3b01      	subs	r3, #1
    cd40:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd44:	6a3b      	ldr	r3, [r7, #32]
    cd46:	429a      	cmp	r2, r3
    cd48:	d2e5      	bcs.n	cd16 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd4a:	68bb      	ldr	r3, [r7, #8]
    cd4c:	2200      	movs	r2, #0
    cd4e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd50:	68ba      	ldr	r2, [r7, #8]
    cd52:	6a3b      	ldr	r3, [r7, #32]
    cd54:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd56:	4618      	mov	r0, r3
    cd58:	373c      	adds	r7, #60	; 0x3c
    cd5a:	46bd      	mov	sp, r7
    cd5c:	bd90      	pop	{r4, r7, pc}
    cd5e:	bf00      	nop
    cd60:	00302e30 	.word	0x00302e30

0000cd64 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd64:	b590      	push	{r4, r7, lr}
    cd66:	b095      	sub	sp, #84	; 0x54
    cd68:	af00      	add	r7, sp, #0
    cd6a:	60f8      	str	r0, [r7, #12]
    cd6c:	60b9      	str	r1, [r7, #8]
    cd6e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd70:	2300      	movs	r3, #0
    cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd74:	2300      	movs	r3, #0
    cd76:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cd78:	e2e3      	b.n	d342 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd7a:	2306      	movs	r3, #6
    cd7c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cd7e:	68bb      	ldr	r3, [r7, #8]
    cd80:	781b      	ldrb	r3, [r3, #0]
    cd82:	2b25      	cmp	r3, #37	; 0x25
    cd84:	d01f      	beq.n	cdc6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cd86:	68fb      	ldr	r3, [r7, #12]
    cd88:	2b00      	cmp	r3, #0
    cd8a:	d015      	beq.n	cdb8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cd8c:	68bb      	ldr	r3, [r7, #8]
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	2b0a      	cmp	r3, #10
    cd92:	d10b      	bne.n	cdac <am_util_stdio_vsprintf+0x48>
    cd94:	4bb1      	ldr	r3, [pc, #708]	; (d05c <am_util_stdio_vsprintf+0x2f8>)
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	2b00      	cmp	r3, #0
    cd9a:	d007      	beq.n	cdac <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd9c:	68fb      	ldr	r3, [r7, #12]
    cd9e:	1c5a      	adds	r2, r3, #1
    cda0:	60fa      	str	r2, [r7, #12]
    cda2:	220d      	movs	r2, #13
    cda4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cda8:	3301      	adds	r3, #1
    cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cdac:	68fb      	ldr	r3, [r7, #12]
    cdae:	1c5a      	adds	r2, r3, #1
    cdb0:	60fa      	str	r2, [r7, #12]
    cdb2:	68ba      	ldr	r2, [r7, #8]
    cdb4:	7812      	ldrb	r2, [r2, #0]
    cdb6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cdb8:	68bb      	ldr	r3, [r7, #8]
    cdba:	3301      	adds	r3, #1
    cdbc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdc0:	3301      	adds	r3, #1
    cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cdc4:	e2bd      	b.n	d342 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cdc6:	68bb      	ldr	r3, [r7, #8]
    cdc8:	3301      	adds	r3, #1
    cdca:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cdcc:	2300      	movs	r3, #0
    cdce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cdd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cdd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cdda:	2320      	movs	r3, #32
    cddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cde0:	68bb      	ldr	r3, [r7, #8]
    cde2:	781b      	ldrb	r3, [r3, #0]
    cde4:	2b30      	cmp	r3, #48	; 0x30
    cde6:	d105      	bne.n	cdf4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cde8:	2330      	movs	r3, #48	; 0x30
    cdea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cdee:	68bb      	ldr	r3, [r7, #8]
    cdf0:	3301      	adds	r3, #1
    cdf2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cdf4:	f107 0310 	add.w	r3, r7, #16
    cdf8:	4619      	mov	r1, r3
    cdfa:	68b8      	ldr	r0, [r7, #8]
    cdfc:	f7ff fd85 	bl	c90a <decstr_to_int>
    ce00:	4603      	mov	r3, r0
    ce02:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    ce04:	693b      	ldr	r3, [r7, #16]
    ce06:	68ba      	ldr	r2, [r7, #8]
    ce08:	4413      	add	r3, r2
    ce0a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce0c:	68bb      	ldr	r3, [r7, #8]
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	2b73      	cmp	r3, #115	; 0x73
    ce12:	d005      	beq.n	ce20 <am_util_stdio_vsprintf+0xbc>
    ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce16:	2b00      	cmp	r3, #0
    ce18:	da02      	bge.n	ce20 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce1c:	425b      	negs	r3, r3
    ce1e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce20:	68bb      	ldr	r3, [r7, #8]
    ce22:	781b      	ldrb	r3, [r3, #0]
    ce24:	2b2e      	cmp	r3, #46	; 0x2e
    ce26:	d10e      	bne.n	ce46 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    ce28:	68bb      	ldr	r3, [r7, #8]
    ce2a:	3301      	adds	r3, #1
    ce2c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce2e:	f107 0310 	add.w	r3, r7, #16
    ce32:	4619      	mov	r1, r3
    ce34:	68b8      	ldr	r0, [r7, #8]
    ce36:	f7ff fd68 	bl	c90a <decstr_to_int>
    ce3a:	4603      	mov	r3, r0
    ce3c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    ce3e:	693b      	ldr	r3, [r7, #16]
    ce40:	68ba      	ldr	r2, [r7, #8]
    ce42:	4413      	add	r3, r2
    ce44:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce46:	68bb      	ldr	r3, [r7, #8]
    ce48:	781b      	ldrb	r3, [r3, #0]
    ce4a:	2b6c      	cmp	r3, #108	; 0x6c
    ce4c:	d10c      	bne.n	ce68 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    ce4e:	68bb      	ldr	r3, [r7, #8]
    ce50:	3301      	adds	r3, #1
    ce52:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce54:	68bb      	ldr	r3, [r7, #8]
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	2b6c      	cmp	r3, #108	; 0x6c
    ce5a:	d105      	bne.n	ce68 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    ce5c:	68bb      	ldr	r3, [r7, #8]
    ce5e:	3301      	adds	r3, #1
    ce60:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    ce62:	2301      	movs	r3, #1
    ce64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    ce68:	68bb      	ldr	r3, [r7, #8]
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	3b46      	subs	r3, #70	; 0x46
    ce6e:	2b32      	cmp	r3, #50	; 0x32
    ce70:	f200 8254 	bhi.w	d31c <am_util_stdio_vsprintf+0x5b8>
    ce74:	a201      	add	r2, pc, #4	; (adr r2, ce7c <am_util_stdio_vsprintf+0x118>)
    ce76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce7a:	bf00      	nop
    ce7c:	0000d2a7 	.word	0x0000d2a7
    ce80:	0000d31d 	.word	0x0000d31d
    ce84:	0000d31d 	.word	0x0000d31d
    ce88:	0000d31d 	.word	0x0000d31d
    ce8c:	0000d31d 	.word	0x0000d31d
    ce90:	0000d31d 	.word	0x0000d31d
    ce94:	0000d31d 	.word	0x0000d31d
    ce98:	0000d31d 	.word	0x0000d31d
    ce9c:	0000d31d 	.word	0x0000d31d
    cea0:	0000d31d 	.word	0x0000d31d
    cea4:	0000d31d 	.word	0x0000d31d
    cea8:	0000d31d 	.word	0x0000d31d
    ceac:	0000d31d 	.word	0x0000d31d
    ceb0:	0000d31d 	.word	0x0000d31d
    ceb4:	0000d31d 	.word	0x0000d31d
    ceb8:	0000d31d 	.word	0x0000d31d
    cebc:	0000d31d 	.word	0x0000d31d
    cec0:	0000d31d 	.word	0x0000d31d
    cec4:	0000d043 	.word	0x0000d043
    cec8:	0000d31d 	.word	0x0000d31d
    cecc:	0000d31d 	.word	0x0000d31d
    ced0:	0000d31d 	.word	0x0000d31d
    ced4:	0000d31d 	.word	0x0000d31d
    ced8:	0000d31d 	.word	0x0000d31d
    cedc:	0000d31d 	.word	0x0000d31d
    cee0:	0000d31d 	.word	0x0000d31d
    cee4:	0000d31d 	.word	0x0000d31d
    cee8:	0000d31d 	.word	0x0000d31d
    ceec:	0000d31d 	.word	0x0000d31d
    cef0:	0000cf49 	.word	0x0000cf49
    cef4:	0000d16f 	.word	0x0000d16f
    cef8:	0000d31d 	.word	0x0000d31d
    cefc:	0000d2a7 	.word	0x0000d2a7
    cf00:	0000d31d 	.word	0x0000d31d
    cf04:	0000d31d 	.word	0x0000d31d
    cf08:	0000d16f 	.word	0x0000d16f
    cf0c:	0000d31d 	.word	0x0000d31d
    cf10:	0000d31d 	.word	0x0000d31d
    cf14:	0000d31d 	.word	0x0000d31d
    cf18:	0000d31d 	.word	0x0000d31d
    cf1c:	0000d31d 	.word	0x0000d31d
    cf20:	0000d31d 	.word	0x0000d31d
    cf24:	0000d31d 	.word	0x0000d31d
    cf28:	0000d31d 	.word	0x0000d31d
    cf2c:	0000d31d 	.word	0x0000d31d
    cf30:	0000cf6f 	.word	0x0000cf6f
    cf34:	0000d31d 	.word	0x0000d31d
    cf38:	0000d0dd 	.word	0x0000d0dd
    cf3c:	0000d31d 	.word	0x0000d31d
    cf40:	0000d31d 	.word	0x0000d31d
    cf44:	0000d03d 	.word	0x0000d03d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	1d1a      	adds	r2, r3, #4
    cf4c:	607a      	str	r2, [r7, #4]
    cf4e:	681b      	ldr	r3, [r3, #0]
    cf50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cf54:	68fb      	ldr	r3, [r7, #12]
    cf56:	2b00      	cmp	r3, #0
    cf58:	d005      	beq.n	cf66 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf5a:	68fb      	ldr	r3, [r7, #12]
    cf5c:	1c5a      	adds	r2, r3, #1
    cf5e:	60fa      	str	r2, [r7, #12]
    cf60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cf64:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf68:	3301      	adds	r3, #1
    cf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf6c:	e1e6      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	1d1a      	adds	r2, r3, #4
    cf72:	607a      	str	r2, [r7, #4]
    cf74:	681b      	ldr	r3, [r3, #0]
    cf76:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cf7a:	f7ff fdb4 	bl	cae6 <simple_strlen>
    cf7e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf82:	2b00      	cmp	r3, #0
    cf84:	dd2e      	ble.n	cfe4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf8a:	429a      	cmp	r2, r3
    cf8c:	d22a      	bcs.n	cfe4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf92:	1ad3      	subs	r3, r2, r3
    cf94:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf9c:	4619      	mov	r1, r3
    cf9e:	68f8      	ldr	r0, [r7, #12]
    cfa0:	f7ff fdbc 	bl	cb1c <padbuffer>
    cfa4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cfa6:	68fb      	ldr	r3, [r7, #12]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d001      	beq.n	cfb0 <am_util_stdio_vsprintf+0x24c>
    cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfae:	e000      	b.n	cfb2 <am_util_stdio_vsprintf+0x24e>
    cfb0:	2300      	movs	r3, #0
    cfb2:	68fa      	ldr	r2, [r7, #12]
    cfb4:	4413      	add	r3, r2
    cfb6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfbc:	4413      	add	r3, r2
    cfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cfc0:	2300      	movs	r3, #0
    cfc2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cfc4:	e00e      	b.n	cfe4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cfc6:	68fb      	ldr	r3, [r7, #12]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d005      	beq.n	cfd8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cfcc:	68fb      	ldr	r3, [r7, #12]
    cfce:	1c5a      	adds	r2, r3, #1
    cfd0:	60fa      	str	r2, [r7, #12]
    cfd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cfd4:	7812      	ldrb	r2, [r2, #0]
    cfd6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cfda:	3301      	adds	r3, #1
    cfdc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfe0:	3301      	adds	r3, #1
    cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d1ec      	bne.n	cfc6 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfee:	2b00      	cmp	r3, #0
    cff0:	f000 81a1 	beq.w	d336 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cff6:	425b      	negs	r3, r3
    cff8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cffe:	429a      	cmp	r2, r3
    d000:	f080 8199 	bcs.w	d336 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d004:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d008:	1ad3      	subs	r3, r2, r3
    d00a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d010:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d012:	4619      	mov	r1, r3
    d014:	68f8      	ldr	r0, [r7, #12]
    d016:	f7ff fd81 	bl	cb1c <padbuffer>
    d01a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d01c:	68fb      	ldr	r3, [r7, #12]
    d01e:	2b00      	cmp	r3, #0
    d020:	d001      	beq.n	d026 <am_util_stdio_vsprintf+0x2c2>
    d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d024:	e000      	b.n	d028 <am_util_stdio_vsprintf+0x2c4>
    d026:	2300      	movs	r3, #0
    d028:	68fa      	ldr	r2, [r7, #12]
    d02a:	4413      	add	r3, r2
    d02c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d032:	4413      	add	r3, r2
    d034:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d036:	2300      	movs	r3, #0
    d038:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d03a:	e17c      	b.n	d336 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d03c:	2301      	movs	r3, #1
    d03e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d046:	2b00      	cmp	r3, #0
    d048:	d00a      	beq.n	d060 <am_util_stdio_vsprintf+0x2fc>
    d04a:	687b      	ldr	r3, [r7, #4]
    d04c:	3307      	adds	r3, #7
    d04e:	f023 0307 	bic.w	r3, r3, #7
    d052:	f103 0208 	add.w	r2, r3, #8
    d056:	607a      	str	r2, [r7, #4]
    d058:	cb18      	ldmia	r3, {r3, r4}
    d05a:	e007      	b.n	d06c <am_util_stdio_vsprintf+0x308>
    d05c:	10001100 	.word	0x10001100
                                      va_arg(pArgs, uint32_t);
    d060:	687b      	ldr	r3, [r7, #4]
    d062:	1d1a      	adds	r2, r3, #4
    d064:	607a      	str	r2, [r7, #4]
    d066:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d068:	f04f 0400 	mov.w	r4, #0
    d06c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d072:	2b00      	cmp	r3, #0
    d074:	d01e      	beq.n	d0b4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d076:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d07a:	f7ff fc22 	bl	c8c2 <ndigits_in_hex>
    d07e:	4602      	mov	r2, r0
    d080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d082:	1a9b      	subs	r3, r3, r2
    d084:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d08c:	4619      	mov	r1, r3
    d08e:	68f8      	ldr	r0, [r7, #12]
    d090:	f7ff fd44 	bl	cb1c <padbuffer>
    d094:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d096:	68fb      	ldr	r3, [r7, #12]
    d098:	2b00      	cmp	r3, #0
    d09a:	d001      	beq.n	d0a0 <am_util_stdio_vsprintf+0x33c>
    d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d09e:	e000      	b.n	d0a2 <am_util_stdio_vsprintf+0x33e>
    d0a0:	2300      	movs	r3, #0
    d0a2:	68fa      	ldr	r2, [r7, #12]
    d0a4:	4413      	add	r3, r2
    d0a6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0ac:	4413      	add	r3, r2
    d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0b0:	2300      	movs	r3, #0
    d0b2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d0b8:	68fa      	ldr	r2, [r7, #12]
    d0ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0be:	f7ff fcb2 	bl	ca26 <uint64_to_hexstr>
    d0c2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0c4:	68fb      	ldr	r3, [r7, #12]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d003      	beq.n	d0d2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0cc:	68fa      	ldr	r2, [r7, #12]
    d0ce:	4413      	add	r3, r2
    d0d0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0d6:	4413      	add	r3, r2
    d0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0da:	e12f      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d008      	beq.n	d0f6 <am_util_stdio_vsprintf+0x392>
    d0e4:	687b      	ldr	r3, [r7, #4]
    d0e6:	3307      	adds	r3, #7
    d0e8:	f023 0307 	bic.w	r3, r3, #7
    d0ec:	f103 0208 	add.w	r2, r3, #8
    d0f0:	607a      	str	r2, [r7, #4]
    d0f2:	cb18      	ldmia	r3, {r3, r4}
    d0f4:	e005      	b.n	d102 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d0f6:	687b      	ldr	r3, [r7, #4]
    d0f8:	1d1a      	adds	r2, r3, #4
    d0fa:	607a      	str	r2, [r7, #4]
    d0fc:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0fe:	f04f 0400 	mov.w	r4, #0
    d102:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d108:	2b00      	cmp	r3, #0
    d10a:	d01e      	beq.n	d14a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d10c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d110:	f7ff fb99 	bl	c846 <ndigits_in_u64>
    d114:	4602      	mov	r2, r0
    d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d118:	1a9b      	subs	r3, r3, r2
    d11a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d11c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d120:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d122:	4619      	mov	r1, r3
    d124:	68f8      	ldr	r0, [r7, #12]
    d126:	f7ff fcf9 	bl	cb1c <padbuffer>
    d12a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d12c:	68fb      	ldr	r3, [r7, #12]
    d12e:	2b00      	cmp	r3, #0
    d130:	d001      	beq.n	d136 <am_util_stdio_vsprintf+0x3d2>
    d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d134:	e000      	b.n	d138 <am_util_stdio_vsprintf+0x3d4>
    d136:	2300      	movs	r3, #0
    d138:	68fa      	ldr	r2, [r7, #12]
    d13a:	4413      	add	r3, r2
    d13c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d142:	4413      	add	r3, r2
    d144:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d146:	2300      	movs	r3, #0
    d148:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d14a:	68fa      	ldr	r2, [r7, #12]
    d14c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d150:	f7ff fc21 	bl	c996 <uint64_to_str>
    d154:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	2b00      	cmp	r3, #0
    d15a:	d003      	beq.n	d164 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d15e:	68fa      	ldr	r2, [r7, #12]
    d160:	4413      	add	r3, r2
    d162:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d168:	4413      	add	r3, r2
    d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d16c:	e0e6      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d16e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d172:	2b00      	cmp	r3, #0
    d174:	d008      	beq.n	d188 <am_util_stdio_vsprintf+0x424>
    d176:	687b      	ldr	r3, [r7, #4]
    d178:	3307      	adds	r3, #7
    d17a:	f023 0307 	bic.w	r3, r3, #7
    d17e:	f103 0208 	add.w	r2, r3, #8
    d182:	607a      	str	r2, [r7, #4]
    d184:	cb18      	ldmia	r3, {r3, r4}
    d186:	e005      	b.n	d194 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d188:	687b      	ldr	r3, [r7, #4]
    d18a:	1d1a      	adds	r2, r3, #4
    d18c:	607a      	str	r2, [r7, #4]
    d18e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d190:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d194:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d198:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d19c:	2b00      	cmp	r3, #0
    d19e:	f174 0300 	sbcs.w	r3, r4, #0
    d1a2:	da0a      	bge.n	d1ba <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d1a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1a8:	425b      	negs	r3, r3
    d1aa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d1ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d1b2:	2301      	movs	r3, #1
    d1b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d1b8:	e006      	b.n	d1c8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d1ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d1be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d1c2:	2300      	movs	r3, #0
    d1c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d04a      	beq.n	d264 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d1ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d1d2:	4618      	mov	r0, r3
    d1d4:	4621      	mov	r1, r4
    d1d6:	f7ff fb57 	bl	c888 <ndigits_in_i64>
    d1da:	4602      	mov	r2, r0
    d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1de:	1a9b      	subs	r3, r3, r2
    d1e0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d1e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	d011      	beq.n	d20e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1ec:	3b01      	subs	r3, #1
    d1ee:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1f4:	2b30      	cmp	r3, #48	; 0x30
    d1f6:	d10a      	bne.n	d20e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d1f8:	68fb      	ldr	r3, [r7, #12]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d004      	beq.n	d208 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d1fe:	68fb      	ldr	r3, [r7, #12]
    d200:	1c5a      	adds	r2, r3, #1
    d202:	60fa      	str	r2, [r7, #12]
    d204:	222d      	movs	r2, #45	; 0x2d
    d206:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d20a:	3301      	adds	r3, #1
    d20c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d20e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d212:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d214:	4619      	mov	r1, r3
    d216:	68f8      	ldr	r0, [r7, #12]
    d218:	f7ff fc80 	bl	cb1c <padbuffer>
    d21c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d21e:	68fb      	ldr	r3, [r7, #12]
    d220:	2b00      	cmp	r3, #0
    d222:	d001      	beq.n	d228 <am_util_stdio_vsprintf+0x4c4>
    d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d226:	e000      	b.n	d22a <am_util_stdio_vsprintf+0x4c6>
    d228:	2300      	movs	r3, #0
    d22a:	68fa      	ldr	r2, [r7, #12]
    d22c:	4413      	add	r3, r2
    d22e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d234:	4413      	add	r3, r2
    d236:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d238:	2300      	movs	r3, #0
    d23a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d23c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d240:	2b00      	cmp	r3, #0
    d242:	d01e      	beq.n	d282 <am_util_stdio_vsprintf+0x51e>
    d244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d248:	2b20      	cmp	r3, #32
    d24a:	d11a      	bne.n	d282 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d24c:	68fb      	ldr	r3, [r7, #12]
    d24e:	2b00      	cmp	r3, #0
    d250:	d004      	beq.n	d25c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d252:	68fb      	ldr	r3, [r7, #12]
    d254:	1c5a      	adds	r2, r3, #1
    d256:	60fa      	str	r2, [r7, #12]
    d258:	222d      	movs	r2, #45	; 0x2d
    d25a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d25e:	3301      	adds	r3, #1
    d260:	63fb      	str	r3, [r7, #60]	; 0x3c
    d262:	e00e      	b.n	d282 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d264:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d268:	2b00      	cmp	r3, #0
    d26a:	d00a      	beq.n	d282 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d26c:	68fb      	ldr	r3, [r7, #12]
    d26e:	2b00      	cmp	r3, #0
    d270:	d004      	beq.n	d27c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d272:	68fb      	ldr	r3, [r7, #12]
    d274:	1c5a      	adds	r2, r3, #1
    d276:	60fa      	str	r2, [r7, #12]
    d278:	222d      	movs	r2, #45	; 0x2d
    d27a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d27e:	3301      	adds	r3, #1
    d280:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d282:	68fa      	ldr	r2, [r7, #12]
    d284:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d288:	f7ff fb85 	bl	c996 <uint64_to_str>
    d28c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d28e:	68fb      	ldr	r3, [r7, #12]
    d290:	2b00      	cmp	r3, #0
    d292:	d003      	beq.n	d29c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d296:	68fa      	ldr	r2, [r7, #12]
    d298:	4413      	add	r3, r2
    d29a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d29e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2a0:	4413      	add	r3, r2
    d2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2a4:	e04a      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2a6:	68fb      	ldr	r3, [r7, #12]
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d046      	beq.n	d33a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	3307      	adds	r3, #7
    d2b0:	f023 0307 	bic.w	r3, r3, #7
    d2b4:	f103 0208 	add.w	r2, r3, #8
    d2b8:	607a      	str	r2, [r7, #4]
    d2ba:	cb18      	ldmia	r3, {r3, r4}
    d2bc:	4618      	mov	r0, r3
    d2be:	4621      	mov	r1, r4
    d2c0:	f7fe ff1e 	bl	c100 <__aeabi_d2f>
    d2c4:	4603      	mov	r3, r0
    d2c6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d2c8:	68fb      	ldr	r3, [r7, #12]
    d2ca:	2214      	movs	r2, #20
    d2cc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d2d0:	68f9      	ldr	r1, [r7, #12]
    d2d2:	6978      	ldr	r0, [r7, #20]
    d2d4:	f7ff fc48 	bl	cb68 <ftoa>
    d2d8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2dc:	2b00      	cmp	r3, #0
    d2de:	da14      	bge.n	d30a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2e6:	d102      	bne.n	d2ee <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d2e8:	4b1e      	ldr	r3, [pc, #120]	; (d364 <am_util_stdio_vsprintf+0x600>)
    d2ea:	62bb      	str	r3, [r7, #40]	; 0x28
    d2ec:	e008      	b.n	d300 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2f0:	f113 0f02 	cmn.w	r3, #2
    d2f4:	d102      	bne.n	d2fc <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2f6:	4b1c      	ldr	r3, [pc, #112]	; (d368 <am_util_stdio_vsprintf+0x604>)
    d2f8:	62bb      	str	r3, [r7, #40]	; 0x28
    d2fa:	e001      	b.n	d300 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2fc:	4b1b      	ldr	r3, [pc, #108]	; (d36c <am_util_stdio_vsprintf+0x608>)
    d2fe:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d300:	68fb      	ldr	r3, [r7, #12]
    d302:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d304:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d306:	2303      	movs	r3, #3
    d308:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d30c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d30e:	4413      	add	r3, r2
    d310:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d314:	68fa      	ldr	r2, [r7, #12]
    d316:	4413      	add	r3, r2
    d318:	60fb      	str	r3, [r7, #12]
                }
                break;
    d31a:	e00e      	b.n	d33a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d31c:	68fb      	ldr	r3, [r7, #12]
    d31e:	2b00      	cmp	r3, #0
    d320:	d005      	beq.n	d32e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d322:	68fb      	ldr	r3, [r7, #12]
    d324:	1c5a      	adds	r2, r3, #1
    d326:	60fa      	str	r2, [r7, #12]
    d328:	68ba      	ldr	r2, [r7, #8]
    d32a:	7812      	ldrb	r2, [r2, #0]
    d32c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d330:	3301      	adds	r3, #1
    d332:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d334:	e002      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>
                break;
    d336:	bf00      	nop
    d338:	e000      	b.n	d33c <am_util_stdio_vsprintf+0x5d8>
                break;
    d33a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d33c:	68bb      	ldr	r3, [r7, #8]
    d33e:	3301      	adds	r3, #1
    d340:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d342:	68bb      	ldr	r3, [r7, #8]
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	2b00      	cmp	r3, #0
    d348:	f47f ad17 	bne.w	cd7a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d34c:	68fb      	ldr	r3, [r7, #12]
    d34e:	2b00      	cmp	r3, #0
    d350:	d002      	beq.n	d358 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d352:	68fb      	ldr	r3, [r7, #12]
    d354:	2200      	movs	r2, #0
    d356:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d35a:	4618      	mov	r0, r3
    d35c:	3754      	adds	r7, #84	; 0x54
    d35e:	46bd      	mov	sp, r7
    d360:	bd90      	pop	{r4, r7, pc}
    d362:	bf00      	nop
    d364:	00302e30 	.word	0x00302e30
    d368:	00232e23 	.word	0x00232e23
    d36c:	003f2e3f 	.word	0x003f2e3f

0000d370 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    d370:	b40e      	push	{r1, r2, r3}
    d372:	b580      	push	{r7, lr}
    d374:	b085      	sub	sp, #20
    d376:	af00      	add	r7, sp, #0
    d378:	6078      	str	r0, [r7, #4]
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    d37a:	f107 0320 	add.w	r3, r7, #32
    d37e:	60bb      	str	r3, [r7, #8]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    d380:	68ba      	ldr	r2, [r7, #8]
    d382:	69f9      	ldr	r1, [r7, #28]
    d384:	6878      	ldr	r0, [r7, #4]
    d386:	f7ff fced 	bl	cd64 <am_util_stdio_vsprintf>
    d38a:	60f8      	str	r0, [r7, #12]
    va_end(pArgs);

    return ui32CharCnt;
    d38c:	68fb      	ldr	r3, [r7, #12]
}
    d38e:	4618      	mov	r0, r3
    d390:	3714      	adds	r7, #20
    d392:	46bd      	mov	sp, r7
    d394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d398:	b003      	add	sp, #12
    d39a:	4770      	bx	lr

0000d39c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d39c:	b40f      	push	{r0, r1, r2, r3}
    d39e:	b580      	push	{r7, lr}
    d3a0:	b082      	sub	sp, #8
    d3a2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3a4:	f107 0314 	add.w	r3, r7, #20
    d3a8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3aa:	683a      	ldr	r2, [r7, #0]
    d3ac:	6939      	ldr	r1, [r7, #16]
    d3ae:	4808      	ldr	r0, [pc, #32]	; (d3d0 <am_util_stdio_printf+0x34>)
    d3b0:	f7ff fcd8 	bl	cd64 <am_util_stdio_vsprintf>
    d3b4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3b6:	4b07      	ldr	r3, [pc, #28]	; (d3d4 <am_util_stdio_printf+0x38>)
    d3b8:	681b      	ldr	r3, [r3, #0]
    d3ba:	4805      	ldr	r0, [pc, #20]	; (d3d0 <am_util_stdio_printf+0x34>)
    d3bc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3be:	687b      	ldr	r3, [r7, #4]
}
    d3c0:	4618      	mov	r0, r3
    d3c2:	3708      	adds	r7, #8
    d3c4:	46bd      	mov	sp, r7
    d3c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d3ca:	b004      	add	sp, #16
    d3cc:	4770      	bx	lr
    d3ce:	bf00      	nop
    d3d0:	10001000 	.word	0x10001000
    d3d4:	1000110c 	.word	0x1000110c

0000d3d8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3d8:	b580      	push	{r7, lr}
    d3da:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3dc:	4802      	ldr	r0, [pc, #8]	; (d3e8 <am_util_stdio_terminal_clear+0x10>)
    d3de:	f7ff ffdd 	bl	d39c <am_util_stdio_printf>
}
    d3e2:	bf00      	nop
    d3e4:	bd80      	pop	{r7, pc}
    d3e6:	bf00      	nop
    d3e8:	0000e380 	.word	0x0000e380

0000d3ec <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d3ec:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d3ee:	f000 fbb3 	bl	db58 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d3f2:	2000      	movs	r0, #0
    d3f4:	f7ff f938 	bl	c668 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d3f8:	4b08      	ldr	r3, [pc, #32]	; (d41c <am_bsp_low_power_init+0x30>)
    d3fa:	2029      	movs	r0, #41	; 0x29
    d3fc:	6819      	ldr	r1, [r3, #0]
    d3fe:	f000 fa43 	bl	d888 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d402:	f000 fd05 	bl	de10 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d406:	2001      	movs	r0, #1
    d408:	f000 fd40 	bl	de8c <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d40c:	2100      	movs	r1, #0
    d40e:	2003      	movs	r0, #3
    d410:	f000 f890 	bl	d534 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d418:	f000 bd44 	b.w	dea4 <am_hal_rtc_osc_disable>
    d41c:	0000e420 	.word	0x0000e420

0000d420 <am_bsp_debug_printf_disable>:
{
    d420:	b538      	push	{r3, r4, r5, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d422:	4b17      	ldr	r3, [pc, #92]	; (d480 <am_bsp_debug_printf_disable+0x60>)
    d424:	681c      	ldr	r4, [r3, #0]
    d426:	2c01      	cmp	r4, #1
    d428:	d01d      	beq.n	d466 <am_bsp_debug_printf_disable+0x46>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d42a:	2c02      	cmp	r4, #2
    d42c:	d000      	beq.n	d430 <am_bsp_debug_printf_disable+0x10>
    d42e:	bd38      	pop	{r3, r4, r5, pc}
am_bsp_uart_printf_disable(void)
{
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d430:	4d14      	ldr	r5, [pc, #80]	; (d484 <am_bsp_debug_printf_disable+0x64>)
    d432:	6828      	ldr	r0, [r5, #0]
    d434:	f000 fe58 	bl	e0e8 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d438:	2000      	movs	r0, #0
    d43a:	f7ff f915 	bl	c668 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d43e:	4621      	mov	r1, r4
    d440:	2200      	movs	r2, #0
    d442:	6828      	ldr	r0, [r5, #0]
    d444:	f000 fdde 	bl	e004 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d448:	6828      	ldr	r0, [r5, #0]
    d44a:	f000 fdc7 	bl	dfdc <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d44e:	480e      	ldr	r0, [pc, #56]	; (d488 <am_bsp_debug_printf_disable+0x68>)
    d450:	6804      	ldr	r4, [r0, #0]
    d452:	2027      	movs	r0, #39	; 0x27
    d454:	4621      	mov	r1, r4
    d456:	f000 fa17 	bl	d888 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d45a:	4621      	mov	r1, r4
    d45c:	2028      	movs	r0, #40	; 0x28
} // am_bsp_debug_printf_disable()
    d45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d462:	f000 ba11 	b.w	d888 <am_hal_gpio_pinconfig>
    am_hal_itm_disable();
    d466:	f000 fb77 	bl	db58 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d46a:	2000      	movs	r0, #0
    d46c:	f7ff f8fc 	bl	c668 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d470:	4905      	ldr	r1, [pc, #20]	; (d488 <am_bsp_debug_printf_disable+0x68>)
    d472:	2029      	movs	r0, #41	; 0x29
    d474:	6809      	ldr	r1, [r1, #0]
} // am_bsp_debug_printf_disable()
    d476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d47a:	f000 ba05 	b.w	d888 <am_hal_gpio_pinconfig>
    d47e:	bf00      	nop
    d480:	10001108 	.word	0x10001108
    d484:	10001104 	.word	0x10001104
    d488:	0000e420 	.word	0x0000e420

0000d48c <am_bsp_itm_printf_enable>:
{
    d48c:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d48e:	4b0b      	ldr	r3, [pc, #44]	; (d4bc <am_bsp_itm_printf_enable+0x30>)
{
    d490:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d492:	2201      	movs	r2, #1
    d494:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d496:	f000 fb41 	bl	db1c <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d49a:	a806      	add	r0, sp, #24
    d49c:	4908      	ldr	r1, [pc, #32]	; (d4c0 <am_bsp_itm_printf_enable+0x34>)
    d49e:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d4a2:	f000 fd49 	bl	df38 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d4a6:	4b07      	ldr	r3, [pc, #28]	; (d4c4 <am_bsp_itm_printf_enable+0x38>)
    d4a8:	2029      	movs	r0, #41	; 0x29
    d4aa:	6819      	ldr	r1, [r3, #0]
    d4ac:	f000 f9ec 	bl	d888 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d4b0:	4805      	ldr	r0, [pc, #20]	; (d4c8 <am_bsp_itm_printf_enable+0x3c>)
    d4b2:	f7ff f8d9 	bl	c668 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d4b6:	b007      	add	sp, #28
    d4b8:	f85d fb04 	ldr.w	pc, [sp], #4
    d4bc:	10001108 	.word	0x10001108
    d4c0:	000f4240 	.word	0x000f4240
    d4c4:	0000e3cc 	.word	0x0000e3cc
    d4c8:	0000dc01 	.word	0x0000dc01

0000d4cc <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d4cc:	b530      	push	{r4, r5, lr}
    d4ce:	b083      	sub	sp, #12
    d4d0:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d4d2:	f000 fb1b 	bl	db0c <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d4d6:	4c11      	ldr	r4, [pc, #68]	; (d51c <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d4d8:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d4da:	6823      	ldr	r3, [r4, #0]
    d4dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d4e0:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d4e2:	9801      	ldr	r0, [sp, #4]
    d4e4:	f000 fb16 	bl	db14 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d4e8:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d4ea:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d4ec:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d4ee:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d4f0:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d4f2:	005d      	lsls	r5, r3, #1
    d4f4:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d4f8:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d4fa:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d4fc:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d500:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d502:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d506:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d50a:	0212      	lsls	r2, r2, #8
    d50c:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d510:	432b      	orrs	r3, r5
    d512:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d514:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d516:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d518:	b003      	add	sp, #12
    d51a:	bd30      	pop	{r4, r5, pc}
    d51c:	40018000 	.word	0x40018000

0000d520 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d520:	4a03      	ldr	r2, [pc, #12]	; (d530 <am_hal_cachectrl_enable+0x10>)
    d522:	6813      	ldr	r3, [r2, #0]
    d524:	f043 0001 	orr.w	r0, r3, #1
    d528:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d52a:	2000      	movs	r0, #0
    d52c:	4770      	bx	lr
    d52e:	bf00      	nop
    d530:	40018000 	.word	0x40018000

0000d534 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d534:	2809      	cmp	r0, #9
    d536:	d852      	bhi.n	d5de <am_hal_clkgen_control+0xaa>
    d538:	e8df f000 	tbb	[pc, r0]
    d53c:	2b21190d 	.word	0x2b21190d
    d540:	51513d33 	.word	0x51513d33
    d544:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d54a:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d54c:	6a1a      	ldr	r2, [r3, #32]
    d54e:	f36f 0200 	bfc	r2, #0, #1
    d552:	621a      	str	r2, [r3, #32]
            break;
    d554:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d556:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d55a:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d55c:	2047      	movs	r0, #71	; 0x47
    d55e:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d562:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d566:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d568:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d56c:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d56e:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d572:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d574:	68ca      	ldr	r2, [r1, #12]
    d576:	f022 0301 	bic.w	r3, r2, #1
    d57a:	60cb      	str	r3, [r1, #12]
            break;
    d57c:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d57e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d582:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d584:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d588:	f022 0302 	bic.w	r3, r2, #2
    d58c:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d590:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d592:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d596:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d598:	68d3      	ldr	r3, [r2, #12]
    d59a:	f043 0101 	orr.w	r1, r3, #1
    d59e:	60d1      	str	r1, [r2, #12]
            break;
    d5a0:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d5a2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d5a6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d5a8:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d5ac:	f043 0102 	orr.w	r1, r3, #2
    d5b0:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d5b4:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d5b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d5ba:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d5bc:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d5be:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d5c0:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d5c2:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d5c4:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d5c6:	615a      	str	r2, [r3, #20]
            break;
    d5c8:	4770      	bx	lr
            if ( pArgs == 0 )
    d5ca:	b151      	cbz	r1, d5e2 <am_hal_clkgen_control+0xae>
    d5cc:	6808      	ldr	r0, [r1, #0]
    d5ce:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d5d2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d5d6:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d5d8:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d5dc:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d5de:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d5e0:	4770      	bx	lr
    d5e2:	4901      	ldr	r1, [pc, #4]	; (d5e8 <am_hal_clkgen_control+0xb4>)
    d5e4:	e7f5      	b.n	d5d2 <am_hal_clkgen_control+0x9e>
    d5e6:	bf00      	nop
    d5e8:	0025b801 	.word	0x0025b801

0000d5ec <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d5ec:	b1a8      	cbz	r0, d61a <am_hal_clkgen_status_get+0x2e>
{
    d5ee:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d5f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d5f4:	490a      	ldr	r1, [pc, #40]	; (d620 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d5f6:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d5f8:	4b0a      	ldr	r3, [pc, #40]	; (d624 <am_hal_clkgen_status_get+0x38>)
    d5fa:	f014 0f01 	tst.w	r4, #1
    d5fe:	bf08      	it	eq
    d600:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d602:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d604:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d606:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d60a:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d60e:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d610:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d612:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d616:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d618:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d61a:	2006      	movs	r0, #6
    d61c:	4770      	bx	lr
    d61e:	bf00      	nop
    d620:	02dc6c00 	.word	0x02dc6c00
    d624:	016e3600 	.word	0x016e3600

0000d628 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d628:	4b00      	ldr	r3, [pc, #0]	; (d62c <am_hal_flash_delay+0x4>)
    d62a:	4718      	bx	r3
    d62c:	0800009d 	.word	0x0800009d

0000d630 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d634:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d638:	f8df 8248 	ldr.w	r8, [pc, #584]	; d884 <am_hal_flash_delay_status_check+0x254>
{
    d63c:	4607      	mov	r7, r0
    d63e:	460c      	mov	r4, r1
    d640:	4615      	mov	r5, r2
    d642:	461e      	mov	r6, r3
    d644:	f1be 0f00 	cmp.w	lr, #0
    d648:	f000 808e 	beq.w	d768 <am_hal_flash_delay_status_check+0x138>
    d64c:	f010 0907 	ands.w	r9, r0, #7
    d650:	d044      	beq.n	d6dc <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d652:	680b      	ldr	r3, [r1, #0]
    d654:	4013      	ands	r3, r2
    d656:	429e      	cmp	r6, r3
    d658:	f000 8083 	beq.w	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d65c:	2001      	movs	r0, #1
    d65e:	47c0      	blx	r8
    d660:	f1b9 0f01 	cmp.w	r9, #1
    d664:	f107 37ff 	add.w	r7, r7, #4294967295
    d668:	d038      	beq.n	d6dc <am_hal_flash_delay_status_check+0xac>
    d66a:	f1b9 0f02 	cmp.w	r9, #2
    d66e:	d02e      	beq.n	d6ce <am_hal_flash_delay_status_check+0x9e>
    d670:	f1b9 0f03 	cmp.w	r9, #3
    d674:	d024      	beq.n	d6c0 <am_hal_flash_delay_status_check+0x90>
    d676:	f1b9 0f04 	cmp.w	r9, #4
    d67a:	d01a      	beq.n	d6b2 <am_hal_flash_delay_status_check+0x82>
    d67c:	f1b9 0f05 	cmp.w	r9, #5
    d680:	d010      	beq.n	d6a4 <am_hal_flash_delay_status_check+0x74>
    d682:	f1b9 0f06 	cmp.w	r9, #6
    d686:	d006      	beq.n	d696 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d688:	6820      	ldr	r0, [r4, #0]
    d68a:	4028      	ands	r0, r5
    d68c:	4286      	cmp	r6, r0
    d68e:	d068      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d690:	2001      	movs	r0, #1
    d692:	47c0      	blx	r8
    d694:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d696:	6821      	ldr	r1, [r4, #0]
    d698:	4029      	ands	r1, r5
    d69a:	428e      	cmp	r6, r1
    d69c:	d061      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d69e:	2001      	movs	r0, #1
    d6a0:	47c0      	blx	r8
    d6a2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6a4:	6822      	ldr	r2, [r4, #0]
    d6a6:	402a      	ands	r2, r5
    d6a8:	4296      	cmp	r6, r2
    d6aa:	d05a      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ac:	2001      	movs	r0, #1
    d6ae:	47c0      	blx	r8
    d6b0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6b2:	6823      	ldr	r3, [r4, #0]
    d6b4:	402b      	ands	r3, r5
    d6b6:	429e      	cmp	r6, r3
    d6b8:	d053      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ba:	2001      	movs	r0, #1
    d6bc:	47c0      	blx	r8
    d6be:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6c0:	6820      	ldr	r0, [r4, #0]
    d6c2:	4028      	ands	r0, r5
    d6c4:	4286      	cmp	r6, r0
    d6c6:	d04c      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6c8:	2001      	movs	r0, #1
    d6ca:	47c0      	blx	r8
    d6cc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6ce:	6821      	ldr	r1, [r4, #0]
    d6d0:	4029      	ands	r1, r5
    d6d2:	428e      	cmp	r6, r1
    d6d4:	d045      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6d6:	2001      	movs	r0, #1
    d6d8:	3f01      	subs	r7, #1
    d6da:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6dc:	6822      	ldr	r2, [r4, #0]
    d6de:	402a      	ands	r2, r5
    d6e0:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6e2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6e6:	d03c      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d6e8:	2f00      	cmp	r7, #0
    d6ea:	f000 80c8 	beq.w	d87e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ee:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6f0:	6823      	ldr	r3, [r4, #0]
    d6f2:	402b      	ands	r3, r5
    d6f4:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6f6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6fa:	d032      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6fc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d6fe:	6821      	ldr	r1, [r4, #0]
    d700:	4029      	ands	r1, r5
    d702:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d704:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d708:	d02b      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d70a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d70c:	6822      	ldr	r2, [r4, #0]
    d70e:	402a      	ands	r2, r5
    d710:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d712:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d716:	d024      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d718:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d71a:	6823      	ldr	r3, [r4, #0]
    d71c:	402b      	ands	r3, r5
    d71e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d720:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d724:	d01d      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d726:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d728:	6821      	ldr	r1, [r4, #0]
    d72a:	4029      	ands	r1, r5
    d72c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d72e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d732:	d016      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d734:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d736:	6822      	ldr	r2, [r4, #0]
    d738:	402a      	ands	r2, r5
    d73a:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d73c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d740:	d00f      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d742:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d744:	6820      	ldr	r0, [r4, #0]
    d746:	4028      	ands	r0, r5
    d748:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d74a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d74e:	d008      	beq.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d750:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d752:	6822      	ldr	r2, [r4, #0]
    d754:	402a      	ands	r2, r5
    d756:	4296      	cmp	r6, r2
    d758:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d75c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d760:	d1c2      	bne.n	d6e8 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d762:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d768:	f010 0907 	ands.w	r9, r0, #7
    d76c:	d043      	beq.n	d7f6 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d76e:	680b      	ldr	r3, [r1, #0]
    d770:	4013      	ands	r3, r2
    d772:	429e      	cmp	r6, r3
    d774:	d1f5      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d776:	2001      	movs	r0, #1
    d778:	47c0      	blx	r8
    d77a:	f1b9 0f01 	cmp.w	r9, #1
    d77e:	f107 37ff 	add.w	r7, r7, #4294967295
    d782:	d038      	beq.n	d7f6 <am_hal_flash_delay_status_check+0x1c6>
    d784:	f1b9 0f02 	cmp.w	r9, #2
    d788:	d02e      	beq.n	d7e8 <am_hal_flash_delay_status_check+0x1b8>
    d78a:	f1b9 0f03 	cmp.w	r9, #3
    d78e:	d024      	beq.n	d7da <am_hal_flash_delay_status_check+0x1aa>
    d790:	f1b9 0f04 	cmp.w	r9, #4
    d794:	d01a      	beq.n	d7cc <am_hal_flash_delay_status_check+0x19c>
    d796:	f1b9 0f05 	cmp.w	r9, #5
    d79a:	d010      	beq.n	d7be <am_hal_flash_delay_status_check+0x18e>
    d79c:	f1b9 0f06 	cmp.w	r9, #6
    d7a0:	d006      	beq.n	d7b0 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7a2:	6821      	ldr	r1, [r4, #0]
    d7a4:	4029      	ands	r1, r5
    d7a6:	428e      	cmp	r6, r1
    d7a8:	d1db      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7aa:	2001      	movs	r0, #1
    d7ac:	47c0      	blx	r8
    d7ae:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7b0:	6822      	ldr	r2, [r4, #0]
    d7b2:	402a      	ands	r2, r5
    d7b4:	4296      	cmp	r6, r2
    d7b6:	d1d4      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7b8:	2001      	movs	r0, #1
    d7ba:	47c0      	blx	r8
    d7bc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7be:	6820      	ldr	r0, [r4, #0]
    d7c0:	4028      	ands	r0, r5
    d7c2:	4286      	cmp	r6, r0
    d7c4:	d1cd      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7c6:	2001      	movs	r0, #1
    d7c8:	47c0      	blx	r8
    d7ca:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7cc:	6823      	ldr	r3, [r4, #0]
    d7ce:	402b      	ands	r3, r5
    d7d0:	429e      	cmp	r6, r3
    d7d2:	d1c6      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7d4:	2001      	movs	r0, #1
    d7d6:	47c0      	blx	r8
    d7d8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7da:	6821      	ldr	r1, [r4, #0]
    d7dc:	4029      	ands	r1, r5
    d7de:	428e      	cmp	r6, r1
    d7e0:	d1bf      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7e2:	2001      	movs	r0, #1
    d7e4:	47c0      	blx	r8
    d7e6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7e8:	6822      	ldr	r2, [r4, #0]
    d7ea:	402a      	ands	r2, r5
    d7ec:	4296      	cmp	r6, r2
    d7ee:	d1b8      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7f0:	2001      	movs	r0, #1
    d7f2:	3f01      	subs	r7, #1
    d7f4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d7f6:	6823      	ldr	r3, [r4, #0]
    d7f8:	402b      	ands	r3, r5
    d7fa:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7fc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d800:	d1af      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d802:	2f00      	cmp	r7, #0
    d804:	d03b      	beq.n	d87e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d806:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d808:	6821      	ldr	r1, [r4, #0]
    d80a:	4029      	ands	r1, r5
    d80c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d80e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d812:	d1a6      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d814:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d816:	6822      	ldr	r2, [r4, #0]
    d818:	402a      	ands	r2, r5
    d81a:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d81c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d820:	d19f      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d822:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d824:	6823      	ldr	r3, [r4, #0]
    d826:	402b      	ands	r3, r5
    d828:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d82a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d82e:	d198      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d830:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d832:	6821      	ldr	r1, [r4, #0]
    d834:	4029      	ands	r1, r5
    d836:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d838:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d83c:	d191      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d83e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d840:	6822      	ldr	r2, [r4, #0]
    d842:	402a      	ands	r2, r5
    d844:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d846:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d84a:	d18a      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d84c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d84e:	6823      	ldr	r3, [r4, #0]
    d850:	402b      	ands	r3, r5
    d852:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d854:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d858:	d183      	bne.n	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d85a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d85c:	6820      	ldr	r0, [r4, #0]
    d85e:	4028      	ands	r0, r5
    d860:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d862:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d866:	f47f af7c 	bne.w	d762 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d86a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d86c:	6823      	ldr	r3, [r4, #0]
    d86e:	402b      	ands	r3, r5
    d870:	429e      	cmp	r6, r3
    d872:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d876:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d87a:	d0c2      	beq.n	d802 <am_hal_flash_delay_status_check+0x1d2>
    d87c:	e771      	b.n	d762 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d87e:	2004      	movs	r0, #4
    d880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d884:	0800009d 	.word	0x0800009d

0000d888 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d888:	2831      	cmp	r0, #49	; 0x31
    d88a:	d901      	bls.n	d890 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d88c:	2006      	movs	r0, #6
    d88e:	4770      	bx	lr
{
    d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d894:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d898:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d89c:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d89e:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d8a2:	d014      	beq.n	d8ce <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d8a4:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d8a8:	1db2      	adds	r2, r6, #6
    d8aa:	f002 0707 	and.w	r7, r2, #7
    d8ae:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d8b0:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d8b4:	f200 80ab 	bhi.w	da0e <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d8b8:	4a85      	ldr	r2, [pc, #532]	; (dad0 <am_hal_gpio_pinconfig+0x248>)
    d8ba:	5c17      	ldrb	r7, [r2, r0]
    d8bc:	07ff      	lsls	r7, r7, #31
    d8be:	d403      	bmi.n	d8c8 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d8c0:	4884      	ldr	r0, [pc, #528]	; (dad4 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d8c2:	b007      	add	sp, #28
    d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d8c8:	1eb4      	subs	r4, r6, #2
    d8ca:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d8ce:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d8d2:	2e00      	cmp	r6, #0
    d8d4:	f040 8095 	bne.w	da02 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d8d8:	4a7f      	ldr	r2, [pc, #508]	; (dad8 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d8da:	4f80      	ldr	r7, [pc, #512]	; (dadc <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d8dc:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d8de:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d8e2:	411e      	asrs	r6, r3
    d8e4:	f016 0f01 	tst.w	r6, #1
    d8e8:	bf0c      	ite	eq
    d8ea:	2600      	moveq	r6, #0
    d8ec:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d8ee:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d8f0:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d8f4:	f000 8097 	beq.w	da26 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d8f8:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d8fc:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d8fe:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d902:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d906:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d908:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d90c:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d910:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d914:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d918:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d91a:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d91e:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d922:	f000 808d 	beq.w	da40 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d926:	4a6e      	ldr	r2, [pc, #440]	; (dae0 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d928:	6816      	ldr	r6, [r2, #0]
    d92a:	1b8c      	subs	r4, r1, r6
    d92c:	fab4 f384 	clz	r3, r4
    d930:	095f      	lsrs	r7, r3, #5
    d932:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d934:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d938:	bf04      	itt	eq
    d93a:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d93e:	f367 0800 	bfieq	r8, r7, #0, #1
    d942:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d944:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d948:	2902      	cmp	r1, #2
    d94a:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d94e:	d07a      	beq.n	da46 <am_hal_gpio_pinconfig+0x1be>
    d950:	d87f      	bhi.n	da52 <am_hal_gpio_pinconfig+0x1ca>
    d952:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d954:	bf08      	it	eq
    d956:	f045 0504 	orreq.w	r5, r5, #4
    d95a:	f004 0a18 	and.w	sl, r4, #24
            break;
    d95e:	2200      	movs	r2, #0
    d960:	4604      	mov	r4, r0
    d962:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d964:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d968:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d96c:	485d      	ldr	r0, [pc, #372]	; (dae4 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d96e:	495e      	ldr	r1, [pc, #376]	; (dae8 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d970:	4f5e      	ldr	r7, [pc, #376]	; (daec <am_hal_gpio_pinconfig+0x264>)
    d972:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d974:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d978:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d97c:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d980:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d982:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d986:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d988:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d98c:	f000 f8be 	bl	db0c <am_hal_interrupt_master_disable>
    d990:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d992:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d996:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d99a:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d99e:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d9a2:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d9a4:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d9a8:	9902      	ldr	r1, [sp, #8]
    d9aa:	9a03      	ldr	r2, [sp, #12]
    d9ac:	b150      	cbz	r0, d9c4 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d9ae:	f004 001f 	and.w	r0, r4, #31
    d9b2:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d9b6:	f04f 0c01 	mov.w	ip, #1
    d9ba:	4c4d      	ldr	r4, [pc, #308]	; (daf0 <am_hal_gpio_pinconfig+0x268>)
    d9bc:	fa0c f000 	lsl.w	r0, ip, r0
    d9c0:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d9c4:	484b      	ldr	r0, [pc, #300]	; (daf4 <am_hal_gpio_pinconfig+0x26c>)
    d9c6:	2473      	movs	r4, #115	; 0x73
    d9c8:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d9ca:	f8da 4000 	ldr.w	r4, [sl]
    d9ce:	4034      	ands	r4, r6
    d9d0:	4325      	orrs	r5, r4
    d9d2:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d9d6:	f859 5001 	ldr.w	r5, [r9, r1]
    d9da:	402f      	ands	r7, r5
    d9dc:	ea47 0708 	orr.w	r7, r7, r8
    d9e0:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d9e4:	f85b 1003 	ldr.w	r1, [fp, r3]
    d9e8:	400e      	ands	r6, r1
    d9ea:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d9ec:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d9ee:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d9f2:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d9f4:	9805      	ldr	r0, [sp, #20]
    d9f6:	f000 f88d 	bl	db14 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d9fa:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d9fc:	b007      	add	sp, #28
    d9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    da02:	2e01      	cmp	r6, #1
    da04:	d015      	beq.n	da32 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    da06:	2e02      	cmp	r6, #2
    da08:	d030      	beq.n	da6c <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    da0a:	483b      	ldr	r0, [pc, #236]	; (daf8 <am_hal_gpio_pinconfig+0x270>)
    da0c:	e759      	b.n	d8c2 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    da0e:	2cc0      	cmp	r4, #192	; 0xc0
    da10:	d027      	beq.n	da62 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    da12:	2c20      	cmp	r4, #32
    da14:	f47f af5b 	bne.w	d8ce <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    da18:	4c2d      	ldr	r4, [pc, #180]	; (dad0 <am_hal_gpio_pinconfig+0x248>)
    da1a:	5c26      	ldrb	r6, [r4, r0]
    da1c:	f016 0f09 	tst.w	r6, #9
    da20:	f47f af4e 	bne.w	d8c0 <am_hal_gpio_pinconfig+0x38>
    da24:	e753      	b.n	d8ce <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    da26:	f3c1 4202 	ubfx	r2, r1, #16, #3
    da2a:	2a07      	cmp	r2, #7
    da2c:	d125      	bne.n	da7a <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    da2e:	4833      	ldr	r0, [pc, #204]	; (dafc <am_hal_gpio_pinconfig+0x274>)
    da30:	e747      	b.n	d8c2 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    da32:	4c27      	ldr	r4, [pc, #156]	; (dad0 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    da34:	5c26      	ldrb	r6, [r4, r0]
    da36:	07b4      	lsls	r4, r6, #30
    da38:	d5e7      	bpl.n	da0a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    da3a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    da3e:	e74b      	b.n	d8d8 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    da40:	2701      	movs	r7, #1
    da42:	9700      	str	r7, [sp, #0]
    da44:	e776      	b.n	d934 <am_hal_gpio_pinconfig+0xac>
    da46:	f004 0a18 	and.w	sl, r4, #24
    da4a:	2301      	movs	r3, #1
    da4c:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    da50:	e786      	b.n	d960 <am_hal_gpio_pinconfig+0xd8>
    da52:	f004 0a18 	and.w	sl, r4, #24
    da56:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    da58:	f045 0504 	orr.w	r5, r5, #4
    da5c:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    da60:	e77e      	b.n	d960 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    da62:	2814      	cmp	r0, #20
    da64:	f43f af33 	beq.w	d8ce <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    da68:	4825      	ldr	r0, [pc, #148]	; (db00 <am_hal_gpio_pinconfig+0x278>)
    da6a:	e72a      	b.n	d8c2 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    da6c:	4a18      	ldr	r2, [pc, #96]	; (dad0 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    da6e:	5c17      	ldrb	r7, [r2, r0]
    da70:	077a      	lsls	r2, r7, #29
    da72:	d5ca      	bpl.n	da0a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    da74:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    da78:	e72e      	b.n	d8d8 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    da7a:	4c22      	ldr	r4, [pc, #136]	; (db04 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    da7c:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    da80:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    da84:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    da88:	45b0      	cmp	r8, r6
    da8a:	d010      	beq.n	daae <am_hal_gpio_pinconfig+0x226>
    da8c:	0087      	lsls	r7, r0, #2
    da8e:	eb04 0907 	add.w	r9, r4, r7
    da92:	f899 3001 	ldrb.w	r3, [r9, #1]
    da96:	42b3      	cmp	r3, r6
    da98:	d015      	beq.n	dac6 <am_hal_gpio_pinconfig+0x23e>
    da9a:	f899 2002 	ldrb.w	r2, [r9, #2]
    da9e:	42b2      	cmp	r2, r6
    daa0:	d00f      	beq.n	dac2 <am_hal_gpio_pinconfig+0x23a>
    daa2:	f899 4003 	ldrb.w	r4, [r9, #3]
    daa6:	42b4      	cmp	r4, r6
    daa8:	d00f      	beq.n	daca <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    daaa:	4817      	ldr	r0, [pc, #92]	; (db08 <am_hal_gpio_pinconfig+0x280>)
    daac:	e709      	b.n	d8c2 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    daae:	2600      	movs	r6, #0
    dab0:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    dab2:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dab4:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    dab8:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    daba:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    dabe:	9300      	str	r3, [sp, #0]
    dac0:	e740      	b.n	d944 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dac2:	2602      	movs	r6, #2
    dac4:	e7f5      	b.n	dab2 <am_hal_gpio_pinconfig+0x22a>
    dac6:	2601      	movs	r6, #1
    dac8:	e7f3      	b.n	dab2 <am_hal_gpio_pinconfig+0x22a>
    daca:	2603      	movs	r6, #3
    dacc:	e7f1      	b.n	dab2 <am_hal_gpio_pinconfig+0x22a>
    dace:	bf00      	nop
    dad0:	0000e424 	.word	0x0000e424
    dad4:	08000100 	.word	0x08000100
    dad8:	0000e458 	.word	0x0000e458
    dadc:	0000e554 	.word	0x0000e554
    dae0:	0000e420 	.word	0x0000e420
    dae4:	7ffffffc 	.word	0x7ffffffc
    dae8:	400100e0 	.word	0x400100e0
    daec:	40010040 	.word	0x40010040
    daf0:	400100b4 	.word	0x400100b4
    daf4:	40010000 	.word	0x40010000
    daf8:	08000102 	.word	0x08000102
    dafc:	08000103 	.word	0x08000103
    db00:	08000101 	.word	0x08000101
    db04:	0000e48c 	.word	0x0000e48c
    db08:	08000104 	.word	0x08000104

0000db0c <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    db0c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    db10:	b672      	cpsid	i
    __asm("    bx lr");
    db12:	4770      	bx	lr

0000db14 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    db14:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    db18:	4770      	bx	lr
    db1a:	bf00      	nop

0000db1c <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    db1c:	4a0b      	ldr	r2, [pc, #44]	; (db4c <am_hal_itm_enable+0x30>)
    db1e:	68d3      	ldr	r3, [r2, #12]
    db20:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    db24:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    db26:	68d1      	ldr	r1, [r2, #12]
    db28:	01cb      	lsls	r3, r1, #7
    db2a:	d5fc      	bpl.n	db26 <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    db2c:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    db30:	4b07      	ldr	r3, [pc, #28]	; (db50 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    db32:	4a08      	ldr	r2, [pc, #32]	; (db54 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    db34:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    db38:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    db3a:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    db3e:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    db42:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    db46:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    db4a:	4770      	bx	lr
    db4c:	e000edf0 	.word	0xe000edf0
    db50:	c5acce55 	.word	0xc5acce55
    db54:	00150511 	.word	0x00150511

0000db58 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    db58:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    db5a:	4b24      	ldr	r3, [pc, #144]	; (dbec <am_hal_itm_disable+0x94>)
    db5c:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    db60:	b9b0      	cbnz	r0, db90 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    db62:	4923      	ldr	r1, [pc, #140]	; (dbf0 <am_hal_itm_disable+0x98>)
    db64:	68ca      	ldr	r2, [r1, #12]
    db66:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    db6a:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    db6c:	68cb      	ldr	r3, [r1, #12]
    db6e:	01da      	lsls	r2, r3, #7
    db70:	d5fc      	bpl.n	db6c <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    db72:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    db76:	481f      	ldr	r0, [pc, #124]	; (dbf4 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    db78:	4a1f      	ldr	r2, [pc, #124]	; (dbf8 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    db7a:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    db7e:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    db80:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    db84:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    db88:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    db8c:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    db90:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    db94:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    db98:	021b      	lsls	r3, r3, #8
    db9a:	d4fb      	bmi.n	db94 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    db9c:	f240 20f7 	movw	r0, #759	; 0x2f7
    dba0:	f7ff fd42 	bl	d628 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dba4:	4813      	ldr	r0, [pc, #76]	; (dbf4 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dba6:	4915      	ldr	r1, [pc, #84]	; (dbfc <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dba8:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dbac:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dbb0:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dbb2:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    dbb6:	f022 0401 	bic.w	r4, r2, #1
    dbba:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dbbe:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dbc2:	420b      	tst	r3, r1
    dbc4:	d1fb      	bne.n	dbbe <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dbc6:	3801      	subs	r0, #1
    dbc8:	d1f3      	bne.n	dbb2 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dbca:	4909      	ldr	r1, [pc, #36]	; (dbf0 <am_hal_itm_disable+0x98>)
    dbcc:	68ca      	ldr	r2, [r1, #12]
    dbce:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dbd2:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dbd4:	68cb      	ldr	r3, [r1, #12]
    dbd6:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    dbda:	d1fb      	bne.n	dbd4 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    dbdc:	4903      	ldr	r1, [pc, #12]	; (dbec <am_hal_itm_disable+0x94>)
    dbde:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    dbe2:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    dbe6:	2a00      	cmp	r2, #0
    dbe8:	d1fb      	bne.n	dbe2 <am_hal_itm_disable+0x8a>
}
    dbea:	bd10      	pop	{r4, pc}
    dbec:	40020000 	.word	0x40020000
    dbf0:	e000edf0 	.word	0xe000edf0
    dbf4:	c5acce55 	.word	0xc5acce55
    dbf8:	00150511 	.word	0x00150511
    dbfc:	00800001 	.word	0x00800001

0000dc00 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    dc00:	7803      	ldrb	r3, [r0, #0]
    dc02:	b1b3      	cbz	r3, dc32 <am_hal_itm_print+0x32>
{
    dc04:	b410      	push	{r4}
    dc06:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    dc08:	2400      	movs	r4, #0
    dc0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    dc0e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    dc10:	2900      	cmp	r1, #0
    dc12:	d1fa      	bne.n	dc0a <am_hal_itm_print+0xa>
    dc14:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    dc16:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    dc1a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    dc1e:	f8dc 3000 	ldr.w	r3, [ip]
    dc22:	2b00      	cmp	r3, #0
    dc24:	d0fb      	beq.n	dc1e <am_hal_itm_print+0x1e>
    while (ui32Length)
    dc26:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    dc28:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    dc2c:	d1f5      	bne.n	dc1a <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    dc2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc32:	4770      	bx	lr

0000dc34 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    dc34:	b141      	cbz	r1, dc48 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    dc36:	2801      	cmp	r0, #1
{
    dc38:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    dc3a:	d03a      	beq.n	dcb2 <am_hal_mcuctrl_info_get+0x7e>
    dc3c:	d322      	bcc.n	dc84 <am_hal_mcuctrl_info_get+0x50>
    dc3e:	2802      	cmp	r0, #2
    dc40:	d004      	beq.n	dc4c <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    dc42:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    dc44:	bcf0      	pop	{r4, r5, r6, r7}
    dc46:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dc48:	2006      	movs	r0, #6
    dc4a:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dc4c:	4a41      	ldr	r2, [pc, #260]	; (dd54 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dc4e:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dc50:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dc54:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dc56:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dc5a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dc5e:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dc62:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dc64:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dc66:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    dc68:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dc6c:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dc6e:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    dc72:	4334      	orrs	r4, r6
    dc74:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dc76:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dc7a:	4310      	orrs	r0, r2
    dc7c:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    dc7e:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    dc80:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dc82:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    dc84:	4c33      	ldr	r4, [pc, #204]	; (dd54 <am_hal_mcuctrl_info_get+0x120>)
    dc86:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dc88:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dc8c:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dc90:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dc92:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dc94:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dc98:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dc9c:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    dc9e:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dca0:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    dca4:	f004 0501 	and.w	r5, r4, #1
    dca8:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    dcaa:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dcac:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dcae:	bcf0      	pop	{r4, r5, r6, r7}
    dcb0:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dcb2:	4a28      	ldr	r2, [pc, #160]	; (dd54 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    dcb4:	4c28      	ldr	r4, [pc, #160]	; (dd58 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dcb6:	6813      	ldr	r3, [r2, #0]
    dcb8:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    dcba:	6850      	ldr	r0, [r2, #4]
    dcbc:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    dcbe:	6897      	ldr	r7, [r2, #8]
    dcc0:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    dcc2:	68d6      	ldr	r6, [r2, #12]
    dcc4:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dcc6:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    dcc8:	4824      	ldr	r0, [pc, #144]	; (dd5c <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dcca:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    dccc:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    dcd0:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    dcd4:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    dcd6:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dcda:	4a21      	ldr	r2, [pc, #132]	; (dd60 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    dcdc:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    dce0:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dce2:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    dce6:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    dce8:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dcea:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dcec:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dcf0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dcf4:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dcf6:	f000 040f 	and.w	r4, r0, #15
    dcfa:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dcfe:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dd00:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dd04:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dd08:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dd0c:	f007 0c0f 	and.w	ip, r7, #15
    dd10:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    dd14:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dd16:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dd1a:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dd1e:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dd22:	f3c5 1703 	ubfx	r7, r5, #4, #4
    dd26:	433b      	orrs	r3, r7
    dd28:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    dd2a:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dd2e:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dd32:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dd36:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dd3a:	b2e5      	uxtb	r5, r4
    dd3c:	042b      	lsls	r3, r5, #16
    dd3e:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dd42:	b2d6      	uxtb	r6, r2
    dd44:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dd46:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dd48:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    dd4c:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    dd4e:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dd50:	bcf0      	pop	{r4, r5, r6, r7}
    dd52:	4770      	bx	lr
    dd54:	40020000 	.word	0x40020000
    dd58:	0000e588 	.word	0x0000e588
    dd5c:	0000e5c8 	.word	0x0000e5c8
    dd60:	f0000f00 	.word	0xf0000f00

0000dd64 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dd64:	b570      	push	{r4, r5, r6, lr}
    dd66:	b082      	sub	sp, #8
    dd68:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    dd6a:	f7ff fecf 	bl	db0c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dd6e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd72:	008c      	lsls	r4, r1, #2
    dd74:	4e0e      	ldr	r6, [pc, #56]	; (ddb0 <am_hal_pwrctrl_periph_enable+0x4c>)
    dd76:	4d0f      	ldr	r5, [pc, #60]	; (ddb4 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    dd78:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dd7a:	592a      	ldr	r2, [r5, r4]
    dd7c:	68b3      	ldr	r3, [r6, #8]
    dd7e:	4313      	orrs	r3, r2
    dd80:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    dd82:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dd84:	442c      	add	r4, r5
    AM_CRITICAL_END
    dd86:	f7ff fec5 	bl	db14 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dd8a:	2077      	movs	r0, #119	; 0x77
    dd8c:	f7ff fc4c 	bl	d628 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dd90:	69b0      	ldr	r0, [r6, #24]
    dd92:	6864      	ldr	r4, [r4, #4]
    dd94:	4220      	tst	r0, r4
    dd96:	d103      	bne.n	dda0 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dd98:	2077      	movs	r0, #119	; 0x77
    dd9a:	f7ff fc45 	bl	d628 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dd9e:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    dda0:	4903      	ldr	r1, [pc, #12]	; (ddb0 <am_hal_pwrctrl_periph_enable+0x4c>)
    dda2:	698d      	ldr	r5, [r1, #24]
    dda4:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    dda6:	bf0c      	ite	eq
    dda8:	2001      	moveq	r0, #1
    ddaa:	2000      	movne	r0, #0
    ddac:	b002      	add	sp, #8
    ddae:	bd70      	pop	{r4, r5, r6, pc}
    ddb0:	40021000 	.word	0x40021000
    ddb4:	0000e608 	.word	0x0000e608

0000ddb8 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    ddb8:	b570      	push	{r4, r5, r6, lr}
    ddba:	b082      	sub	sp, #8
    ddbc:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    ddbe:	f7ff fea5 	bl	db0c <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    ddc2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    ddc6:	008c      	lsls	r4, r1, #2
    ddc8:	4e0f      	ldr	r6, [pc, #60]	; (de08 <am_hal_pwrctrl_periph_disable+0x50>)
    ddca:	4d10      	ldr	r5, [pc, #64]	; (de0c <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    ddcc:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    ddce:	68b3      	ldr	r3, [r6, #8]
    ddd0:	592a      	ldr	r2, [r5, r4]
    ddd2:	ea23 0002 	bic.w	r0, r3, r2
    ddd6:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    ddd8:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    ddda:	442c      	add	r4, r5
    AM_CRITICAL_END
    dddc:	f7ff fe9a 	bl	db14 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dde0:	2077      	movs	r0, #119	; 0x77
    dde2:	f7ff fc21 	bl	d628 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dde6:	69b1      	ldr	r1, [r6, #24]
    dde8:	6864      	ldr	r4, [r4, #4]
    ddea:	4221      	tst	r1, r4
    ddec:	d003      	beq.n	ddf6 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    ddee:	2077      	movs	r0, #119	; 0x77
    ddf0:	f7ff fc1a 	bl	d628 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    ddf4:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    ddf6:	4d04      	ldr	r5, [pc, #16]	; (de08 <am_hal_pwrctrl_periph_disable+0x50>)
    ddf8:	69ae      	ldr	r6, [r5, #24]
    ddfa:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    ddfc:	bf14      	ite	ne
    ddfe:	2001      	movne	r0, #1
    de00:	2000      	moveq	r0, #0
    de02:	b002      	add	sp, #8
    de04:	bd70      	pop	{r4, r5, r6, pc}
    de06:	bf00      	nop
    de08:	40021000 	.word	0x40021000
    de0c:	0000e608 	.word	0x0000e608

0000de10 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    de10:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    de12:	4c1b      	ldr	r4, [pc, #108]	; (de80 <am_hal_pwrctrl_low_power_init+0x70>)
    de14:	69a3      	ldr	r3, [r4, #24]
    de16:	05db      	lsls	r3, r3, #23
{
    de18:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    de1a:	d502      	bpl.n	de22 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    de1c:	2000      	movs	r0, #0
}
    de1e:	b003      	add	sp, #12
    de20:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de22:	4d18      	ldr	r5, [pc, #96]	; (de84 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    de24:	4918      	ldr	r1, [pc, #96]	; (de88 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de26:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    de28:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    de2a:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    de2c:	461a      	mov	r2, r3
    de2e:	9000      	str	r0, [sp, #0]
    de30:	f242 7010 	movw	r0, #10000	; 0x2710
    de34:	f7ff fbfc 	bl	d630 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    de38:	b110      	cbz	r0, de40 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    de3a:	2004      	movs	r0, #4
}
    de3c:	b003      	add	sp, #12
    de3e:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    de40:	6821      	ldr	r1, [r4, #0]
    de42:	f041 0201 	orr.w	r2, r1, #1
    de46:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    de48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    de4a:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    de4e:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    de50:	68ec      	ldr	r4, [r5, #12]
    de52:	b2e2      	uxtb	r2, r4
    de54:	2a11      	cmp	r2, #17
    de56:	d1e1      	bne.n	de1c <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    de58:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    de5c:	f360 5356 	bfi	r3, r0, #21, #2
    de60:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    de64:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    de68:	240f      	movs	r4, #15
    de6a:	f364 118b 	bfi	r1, r4, #6, #6
    de6e:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    de72:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    de76:	f364 0205 	bfi	r2, r4, #0, #6
    de7a:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    de7e:	e7ce      	b.n	de1e <am_hal_pwrctrl_low_power_init+0xe>
    de80:	40021000 	.word	0x40021000
    de84:	40020000 	.word	0x40020000
    de88:	40020018 	.word	0x40020018

0000de8c <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    de8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    de90:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    de92:	68d3      	ldr	r3, [r2, #12]
    de94:	bf0c      	ite	eq
    de96:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    de9a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    de9e:	60d3      	str	r3, [r2, #12]
    dea0:	4770      	bx	lr
    dea2:	bf00      	nop

0000dea4 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    dea4:	4a03      	ldr	r2, [pc, #12]	; (deb4 <am_hal_rtc_osc_disable+0x10>)
    dea6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    deaa:	f043 0010 	orr.w	r0, r3, #16
    deae:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    deb2:	4770      	bx	lr
    deb4:	40004200 	.word	0x40004200

0000deb8 <am_hal_security_get_info>:
{
    uint32_t flash0;
    uint32_t flash4;
    uint32_t i;
    bool     bSbl;
    if (!pSecInfo)
    deb8:	b1a0      	cbz	r0, dee4 <am_hal_security_get_info+0x2c>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    pSecInfo->info0Version = AM_REGVAL(0x50020040);
    deba:	4b0b      	ldr	r3, [pc, #44]	; (dee8 <am_hal_security_get_info+0x30>)
#if AM_CMSIS_REGS
    pSecInfo->bInfo0Valid = MCUCTRL->SHADOWVALID_b.INFO0_VALID;
    debc:	4a0b      	ldr	r2, [pc, #44]	; (deec <am_hal_security_get_info+0x34>)
    pSecInfo->info0Version = AM_REGVAL(0x50020040);
    debe:	6819      	ldr	r1, [r3, #0]
    dec0:	6041      	str	r1, [r0, #4]
    pSecInfo->bInfo0Valid = MCUCTRL->SHADOWVALID_b.INFO0_VALID;
    dec2:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    dec6:	f3c3 0180 	ubfx	r1, r3, #2, #1
    deca:	7001      	strb	r1, [r0, #0]
    bSbl = MCUCTRL->BOOTLOADER_b.SECBOOTFEATURE;
    decc:	f8d2 01a0 	ldr.w	r0, [r2, #416]	; 0x1a0
#else
    pSecInfo->bInfo0Valid = AM_BFR(MCUCTRL, SHADOWVALID, INFO0_VALID);
    bSbl = AM_BFR(MCUCTRL, BOOTLOADER, SECBOOTFEATURE);
#endif

    if (bSbl)
    ded0:	f010 6f40 	tst.w	r0, #201326592	; 0xc000000
    ded4:	d004      	beq.n	dee0 <am_hal_security_get_info+0x28>
    {
        // Check if we're running pre-SBLv2
        flash0 = AM_REGVAL(AM_HAL_SBL_ADDRESS);
    ded6:	f04f 0c00 	mov.w	ip, #0
    deda:	f8dc 3000 	ldr.w	r3, [ip]
    dede:	deff      	udf	#255	; 0xff
            pSecInfo->sblVersionAddInfo = sblVersion >> 15;
        }
    }
    else
    {
        return AM_HAL_STATUS_FAIL;
    dee0:	2001      	movs	r0, #1
    }
    return AM_HAL_STATUS_SUCCESS;
}
    dee2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dee4:	2006      	movs	r0, #6
    dee6:	4770      	bx	lr
    dee8:	50020040 	.word	0x50020040
    deec:	40020000 	.word	0x40020000

0000def0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    def0:	b510      	push	{r4, lr}
    def2:	b082      	sub	sp, #8
    def4:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    def6:	f7ff fe09 	bl	db0c <am_hal_interrupt_master_disable>
    defa:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    defc:	b124      	cbz	r4, df08 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    defe:	4b0c      	ldr	r3, [pc, #48]	; (df30 <am_hal_sysctrl_sleep+0x40>)
    df00:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    df04:	07c3      	lsls	r3, r0, #31
    df06:	d50a      	bpl.n	df1e <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    df08:	4a0a      	ldr	r2, [pc, #40]	; (df34 <am_hal_sysctrl_sleep+0x44>)
    df0a:	6911      	ldr	r1, [r2, #16]
    df0c:	f021 0404 	bic.w	r4, r1, #4
    df10:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    df12:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    df14:	9801      	ldr	r0, [sp, #4]
    df16:	f7ff fdfd 	bl	db14 <am_hal_interrupt_master_set>
}
    df1a:	b002      	add	sp, #8
    df1c:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    df1e:	4b05      	ldr	r3, [pc, #20]	; (df34 <am_hal_sysctrl_sleep+0x44>)
    df20:	2004      	movs	r0, #4
    df22:	6118      	str	r0, [r3, #16]
        __WFI();
    df24:	bf30      	wfi
    AM_CRITICAL_END
    df26:	9801      	ldr	r0, [sp, #4]
    df28:	f7ff fdf4 	bl	db14 <am_hal_interrupt_master_set>
}
    df2c:	b002      	add	sp, #8
    df2e:	bd10      	pop	{r4, pc}
    df30:	40020000 	.word	0x40020000
    df34:	e000ed00 	.word	0xe000ed00

0000df38 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    df38:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    df3a:	4a24      	ldr	r2, [pc, #144]	; (dfcc <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    df3c:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    df3e:	2100      	movs	r1, #0
{
    df40:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    df42:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    df46:	b33b      	cbz	r3, df98 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    df48:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    df4a:	4921      	ldr	r1, [pc, #132]	; (dfd0 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    df4c:	4c21      	ldr	r4, [pc, #132]	; (dfd4 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    df4e:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    df50:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    df54:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    df56:	458c      	cmp	ip, r1
    df58:	bf98      	it	ls
    df5a:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    df5c:	f7ff fb46 	bl	d5ec <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    df60:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    df62:	1c5a      	adds	r2, r3, #1
    df64:	d02f      	beq.n	dfc6 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    df66:	08da      	lsrs	r2, r3, #3
    df68:	fbb2 fef4 	udiv	lr, r2, r4
    df6c:	f10e 31ff 	add.w	r1, lr, #4294967295
    df70:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    df72:	4a16      	ldr	r2, [pc, #88]	; (dfcc <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    df74:	4918      	ldr	r1, [pc, #96]	; (dfd8 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    df76:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    df78:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    df7c:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    df7e:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    df80:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    df84:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    df88:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    df8c:	f240 20f7 	movw	r0, #759	; 0x2f7
    df90:	f7ff fb4a 	bl	d628 <am_hal_flash_delay>
}
    df94:	b004      	add	sp, #16
    df96:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    df98:	6904      	ldr	r4, [r0, #16]
    df9a:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    df9c:	6883      	ldr	r3, [r0, #8]
    df9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dfa2:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dfa4:	4c0c      	ldr	r4, [pc, #48]	; (dfd8 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dfa6:	3901      	subs	r1, #1
    dfa8:	2301      	movs	r3, #1
    dfaa:	408b      	lsls	r3, r1
    dfac:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dfae:	6840      	ldr	r0, [r0, #4]
    dfb0:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    dfb4:	4302      	orrs	r2, r0
    dfb6:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dfba:	f240 20f7 	movw	r0, #759	; 0x2f7
    dfbe:	f7ff fb33 	bl	d628 <am_hal_flash_delay>
}
    dfc2:	b004      	add	sp, #16
    dfc4:	bd10      	pop	{r4, pc}
    dfc6:	2005      	movs	r0, #5
    dfc8:	e7d3      	b.n	df72 <am_hal_tpiu_enable+0x3a>
    dfca:	bf00      	nop
    dfcc:	e0040000 	.word	0xe0040000
    dfd0:	001da380 	.word	0x001da380
    dfd4:	000f4240 	.word	0x000f4240
    dfd8:	40020000 	.word	0x40020000

0000dfdc <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dfdc:	b128      	cbz	r0, dfea <am_hal_uart_deinitialize+0xe>
    dfde:	6803      	ldr	r3, [r0, #0]
    dfe0:	4a07      	ldr	r2, [pc, #28]	; (e000 <am_hal_uart_deinitialize+0x24>)
    dfe2:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    dfe6:	4291      	cmp	r1, r2
    dfe8:	d001      	beq.n	dfee <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    dfea:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    dfec:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    dfee:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    dff0:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    dff2:	f36f 0200 	bfc	r2, #0, #1
    dff6:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    dff8:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    dffa:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    dffc:	4618      	mov	r0, r3
    dffe:	4770      	bx	lr
    e000:	01ea9e06 	.word	0x01ea9e06

0000e004 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e008:	6804      	ldr	r4, [r0, #0]
    e00a:	4b36      	ldr	r3, [pc, #216]	; (e0e4 <am_hal_uart_power_control+0xe0>)
    e00c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e010:	429c      	cmp	r4, r3
{
    e012:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e014:	d003      	beq.n	e01e <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e016:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e018:	b004      	add	sp, #16
    e01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e01e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e020:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e022:	f107 0008 	add.w	r0, r7, #8
    e026:	460e      	mov	r6, r1
    e028:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e02c:	b181      	cbz	r1, e050 <am_hal_uart_power_control+0x4c>
    e02e:	2902      	cmp	r1, #2
    e030:	d80c      	bhi.n	e04c <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e032:	b992      	cbnz	r2, e05a <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e034:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e038:	341c      	adds	r4, #28
    e03a:	0325      	lsls	r5, r4, #12
    e03c:	f04f 31ff 	mov.w	r1, #4294967295
    e040:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e042:	4640      	mov	r0, r8
    e044:	f7ff feb8 	bl	ddb8 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e048:	2000      	movs	r0, #0
            break;
    e04a:	e7e5      	b.n	e018 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e04c:	2006      	movs	r0, #6
    e04e:	e7e3      	b.n	e018 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e050:	b322      	cbz	r2, e09c <am_hal_uart_power_control+0x98>
    e052:	792a      	ldrb	r2, [r5, #4]
    e054:	bb42      	cbnz	r2, e0a8 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e056:	2007      	movs	r0, #7
    e058:	e7de      	b.n	e018 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e05a:	f7ff fd57 	bl	db0c <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e05e:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e062:	311c      	adds	r1, #28
    e064:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e066:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e068:	6a3a      	ldr	r2, [r7, #32]
    e06a:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e06e:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e070:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e072:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e076:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e078:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e07a:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e07c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e07e:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e080:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e082:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e084:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e086:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e088:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e08a:	f7ff fd43 	bl	db14 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e08e:	682e      	ldr	r6, [r5, #0]
    e090:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e094:	42a0      	cmp	r0, r4
    e096:	d1d4      	bne.n	e042 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e098:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e09a:	e7cb      	b.n	e034 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e09c:	4640      	mov	r0, r8
    e09e:	9201      	str	r2, [sp, #4]
    e0a0:	f7ff fe60 	bl	dd64 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e0a4:	9801      	ldr	r0, [sp, #4]
    e0a6:	e7b7      	b.n	e018 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e0a8:	4640      	mov	r0, r8
    e0aa:	f7ff fe5b 	bl	dd64 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e0ae:	f7ff fd2d 	bl	db0c <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e0b2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e0b6:	331c      	adds	r3, #28
    e0b8:	031f      	lsls	r7, r3, #12
    e0ba:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e0bc:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e0be:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e0c0:	68e9      	ldr	r1, [r5, #12]
    e0c2:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e0c4:	6928      	ldr	r0, [r5, #16]
    e0c6:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e0c8:	696a      	ldr	r2, [r5, #20]
    e0ca:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e0cc:	69ab      	ldr	r3, [r5, #24]
    e0ce:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e0d0:	69ec      	ldr	r4, [r5, #28]
    e0d2:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e0d4:	6a29      	ldr	r1, [r5, #32]
    e0d6:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e0d8:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e0da:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e0dc:	f7ff fd1a 	bl	db14 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e0e0:	4630      	mov	r0, r6
    e0e2:	e799      	b.n	e018 <am_hal_uart_power_control+0x14>
    e0e4:	01ea9e06 	.word	0x01ea9e06

0000e0e8 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    e0e8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    e0ec:	b570      	push	{r4, r5, r6, lr}
    e0ee:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    e0f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    e0f2:	b183      	cbz	r3, e116 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e0f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e0f6:	b170      	cbz	r0, e116 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    e0f8:	4e13      	ldr	r6, [pc, #76]	; (e148 <am_hal_uart_tx_flush+0x60>)
    e0fa:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e0fc:	fbb6 f2f1 	udiv	r2, r6, r1
    e100:	2a02      	cmp	r2, #2
    e102:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e106:	bf8c      	ite	hi
    e108:	3829      	subhi	r0, #41	; 0x29
    e10a:	2001      	movls	r0, #1
    e10c:	f7ff fa8c 	bl	d628 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e110:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e112:	2b00      	cmp	r3, #0
    e114:	d1f1      	bne.n	e0fa <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e116:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e11a:	351c      	adds	r5, #28
    e11c:	032d      	lsls	r5, r5, #12
    e11e:	69a8      	ldr	r0, [r5, #24]
    e120:	0702      	lsls	r2, r0, #28
    e122:	d50e      	bpl.n	e142 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    e124:	4e08      	ldr	r6, [pc, #32]	; (e148 <am_hal_uart_tx_flush+0x60>)
    e126:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e128:	fbb6 f2f1 	udiv	r2, r6, r1
    e12c:	2a02      	cmp	r2, #2
    e12e:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e132:	bf8c      	ite	hi
    e134:	3829      	subhi	r0, #41	; 0x29
    e136:	2001      	movls	r0, #1
    e138:	f7ff fa76 	bl	d628 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e13c:	69ab      	ldr	r3, [r5, #24]
    e13e:	071b      	lsls	r3, r3, #28
    e140:	d4f1      	bmi.n	e126 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    e142:	2000      	movs	r0, #0
    e144:	bd70      	pop	{r4, r5, r6, pc}
    e146:	bf00      	nop
    e148:	00b71b00 	.word	0x00b71b00
    e14c:	6c6c6548 	.word	0x6c6c6548
    e150:	6f57206f 	.word	0x6f57206f
    e154:	21646c72 	.word	0x21646c72
    e158:	00000a0a 	.word	0x00000a0a
    e15c:	646e6556 	.word	0x646e6556
    e160:	4e20726f 	.word	0x4e20726f
    e164:	3a656d61 	.word	0x3a656d61
    e168:	0a732520 	.word	0x0a732520
    e16c:	00000000 	.word	0x00000000
    e170:	69766544 	.word	0x69766544
    e174:	74206563 	.word	0x74206563
    e178:	3a657079 	.word	0x3a657079
    e17c:	0a732520 	.word	0x0a732520
    e180:	00000000 	.word	0x00000000
    e184:	00736559 	.word	0x00736559
    e188:	00006f4e 	.word	0x00006f4e
    e18c:	6c617551 	.word	0x6c617551
    e190:	65696669 	.word	0x65696669
    e194:	25203a64 	.word	0x25203a64
    e198:	00000a73 	.word	0x00000a73
    e19c:	69766544 	.word	0x69766544
    e1a0:	49206563 	.word	0x49206563
    e1a4:	3a6f666e 	.word	0x3a6f666e
    e1a8:	6150090a 	.word	0x6150090a
    e1ac:	6e207472 	.word	0x6e207472
    e1b0:	65626d75 	.word	0x65626d75
    e1b4:	30203a72 	.word	0x30203a72
    e1b8:	38302578 	.word	0x38302578
    e1bc:	43090a58 	.word	0x43090a58
    e1c0:	20706968 	.word	0x20706968
    e1c4:	3a304449 	.word	0x3a304449
    e1c8:	20202020 	.word	0x20202020
    e1cc:	30257830 	.word	0x30257830
    e1d0:	090a5838 	.word	0x090a5838
    e1d4:	70696843 	.word	0x70696843
    e1d8:	31444920 	.word	0x31444920
    e1dc:	2020203a 	.word	0x2020203a
    e1e0:	25783020 	.word	0x25783020
    e1e4:	0a583830 	.word	0x0a583830
    e1e8:	76655209 	.word	0x76655209
    e1ec:	6f697369 	.word	0x6f697369
    e1f0:	20203a6e 	.word	0x20203a6e
    e1f4:	78302020 	.word	0x78302020
    e1f8:	58383025 	.word	0x58383025
    e1fc:	65522820 	.word	0x65522820
    e200:	25632576 	.word	0x25632576
    e204:	000a2963 	.word	0x000a2963
    e208:	616c4609 	.word	0x616c4609
    e20c:	73206873 	.word	0x73206873
    e210:	3a657a69 	.word	0x3a657a69
    e214:	37252020 	.word	0x37252020
    e218:	25282064 	.word	0x25282064
    e21c:	424b2064 	.word	0x424b2064
    e220:	0a297325 	.word	0x0a297325
    e224:	00000000 	.word	0x00000000
    e228:	41525309 	.word	0x41525309
    e22c:	6973204d 	.word	0x6973204d
    e230:	203a657a 	.word	0x203a657a
    e234:	37252020 	.word	0x37252020
    e238:	25282064 	.word	0x25282064
    e23c:	424b2064 	.word	0x424b2064
    e240:	0a297325 	.word	0x0a297325
    e244:	0000000a 	.word	0x0000000a
    e248:	20434347 	.word	0x20434347
    e24c:	2e332e36 	.word	0x2e332e36
    e250:	30322031 	.word	0x30322031
    e254:	32303731 	.word	0x32303731
    e258:	28203531 	.word	0x28203531
    e25c:	656c6572 	.word	0x656c6572
    e260:	29657361 	.word	0x29657361
    e264:	52415b20 	.word	0x52415b20
    e268:	6d652f4d 	.word	0x6d652f4d
    e26c:	64646562 	.word	0x64646562
    e270:	362d6465 	.word	0x362d6465
    e274:	6172622d 	.word	0x6172622d
    e278:	2068636e 	.word	0x2068636e
    e27c:	69766572 	.word	0x69766572
    e280:	6e6f6973 	.word	0x6e6f6973
    e284:	35343220 	.word	0x35343220
    e288:	5d323135 	.word	0x5d323135
    e28c:	00000000 	.word	0x00000000
    e290:	20707041 	.word	0x20707041
    e294:	706d6f43 	.word	0x706d6f43
    e298:	72656c69 	.word	0x72656c69
    e29c:	2020203a 	.word	0x2020203a
    e2a0:	0a732520 	.word	0x0a732520
    e2a4:	00000000 	.word	0x00000000
    e2a8:	204c4148 	.word	0x204c4148
    e2ac:	706d6f43 	.word	0x706d6f43
    e2b0:	72656c69 	.word	0x72656c69
    e2b4:	2020203a 	.word	0x2020203a
    e2b8:	0a732520 	.word	0x0a732520
    e2bc:	00000000 	.word	0x00000000
    e2c0:	204c4148 	.word	0x204c4148
    e2c4:	204b4453 	.word	0x204b4453
    e2c8:	73726576 	.word	0x73726576
    e2cc:	3a6e6f69 	.word	0x3a6e6f69
    e2d0:	2e642520 	.word	0x2e642520
    e2d4:	252e6425 	.word	0x252e6425
    e2d8:	00000a64 	.word	0x00000a64
    e2dc:	525f4d41 	.word	0x525f4d41
    e2e0:	00004745 	.word	0x00004745
    e2e4:	49534d43 	.word	0x49534d43
    e2e8:	00000053 	.word	0x00000053
    e2ec:	204c4148 	.word	0x204c4148
    e2f0:	706d6f63 	.word	0x706d6f63
    e2f4:	64656c69 	.word	0x64656c69
    e2f8:	74697720 	.word	0x74697720
    e2fc:	73252068 	.word	0x73252068
    e300:	7974732d 	.word	0x7974732d
    e304:	7220656c 	.word	0x7220656c
    e308:	73696765 	.word	0x73696765
    e30c:	73726574 	.word	0x73726574
    e310:	0000000a 	.word	0x0000000a
    e314:	4f464e49 	.word	0x4f464e49
    e318:	61762030 	.word	0x61762030
    e31c:	2c64696c 	.word	0x2c64696c
    e320:	72657620 	.word	0x72657620
    e324:	25783020 	.word	0x25783020
    e328:	00000058 	.word	0x00000058
    e32c:	4f464e49 	.word	0x4f464e49
    e330:	6e692030 	.word	0x6e692030
    e334:	696c6176 	.word	0x696c6176
    e338:	00000064 	.word	0x00000064
    e33c:	204c4253 	.word	0x204c4253
    e340:	3a726576 	.word	0x3a726576
    e344:	25783020 	.word	0x25783020
    e348:	202d2078 	.word	0x202d2078
    e34c:	78257830 	.word	0x78257830
    e350:	7325202c 	.word	0x7325202c
    e354:	0000000a 	.word	0x0000000a
    e358:	685f6d61 	.word	0x685f6d61
    e35c:	735f6c61 	.word	0x735f6c61
    e360:	72756365 	.word	0x72756365
    e364:	5f797469 	.word	0x5f797469
    e368:	5f746567 	.word	0x5f746567
    e36c:	6f666e69 	.word	0x6f666e69
    e370:	69616620 	.word	0x69616620
    e374:	2064656c 	.word	0x2064656c
    e378:	58257830 	.word	0x58257830
    e37c:	0000000a 	.word	0x0000000a
    e380:	0a0a0a0a 	.word	0x0a0a0a0a
    e384:	0a0a0a0a 	.word	0x0a0a0a0a
    e388:	0a0a0a0a 	.word	0x0a0a0a0a
    e38c:	0a0a0a0a 	.word	0x0a0a0a0a
    e390:	00000a0a 	.word	0x00000a0a

0000e394 <g_DeviceNameApollo>:
    e394:	6c6f7041 00006f6c                       Apollo..

0000e39c <g_DeviceNameApollo2>:
    e39c:	6c6f7041 00326f6c                       Apollo2.

0000e3a4 <g_DeviceNameApollo3>:
    e3a4:	6c6f7041 00336f6c                       Apollo3.

0000e3ac <g_ui8VendorNameAmbq>:
    e3ac:	51424d41 00000000                       AMBQ....

0000e3b4 <g_ui8VendorNameUnknown>:
    e3b4:	3f3f3f3f 00000000                       ????....

0000e3bc <g_ui8DeviceNameUnknown>:
    e3bc:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000e3cc <g_AM_BSP_GPIO_ITM_SWO>:
    e3cc:	00000002                                ....

0000e3d0 <am_hal_cachectrl_defaults>:
    e3d0:	00000308                                ....

0000e3d4 <g_ui32HALversion>:
    e3d4:	01020d00                                ....

0000e3d8 <g_ui8HALcompiler>:
    e3d8:	20434347 2e332e36 30322031 32303731     GCC 6.3.1 201702
    e3e8:	28203531 656c6572 29657361 52415b20     15 (release) [AR
    e3f8:	6d652f4d 64646562 362d6465 6172622d     M/embedded-6-bra
    e408:	2068636e 69766572 6e6f6973 35343220     nch revision 245
    e418:	5d323135 00000000                       512]....

0000e420 <g_AM_HAL_GPIO_DISABLE>:
    e420:	00000003                                ....

0000e424 <g_ui8Bit76Capabilities>:
    e424:	02800101 80010180 80800101 80808080     ................
    e434:	80808080 80808008 01800180 80808080     ................
    e444:	80808080 01800402 01010401 80808080     ................
    e454:	00000101                                ....

0000e458 <g_ui8Inpen>:
    e458:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e468:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e478:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e488:	00003130                                01..

0000e48c <g_ui8NCEtable>:
    e48c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e49c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e4ac:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e4bc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e4cc:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e4dc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e4ec:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e4fc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e50c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e51c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e52c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e53c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e54c:	32221202 43231303                       .."2..#C

0000e554 <g_ui8nCEpins>:
    e554:	02070707 00080802 01020202 01010101     ................
    e564:	01010101 01010101 01010101 01010101     ................
    e574:	01010101 08010101 01010008 01010101     ................
    e584:	00000101                                ....

0000e588 <g_am_hal_mcuctrl_flash_size>:
    e588:	00004000 00008000 00010000 00020000     .@..............
    e598:	00040000 00080000 00100000 00200000     .............. .
	...

0000e5c8 <g_am_hal_mcuctrl_sram_size>:
    e5c8:	00004000 00008000 00010000 00020000     .@..............
    e5d8:	00040000 00080000 00100000 00060000     ................
	...

0000e608 <am_hal_pwrctrl_peripheral_control>:
	...
    e614:	00000001 00000004 00000004 00000002     ................
    e624:	00000008 00000008 00000004 00000008     ................
    e634:	00000008 00000008 00000008 00000008     ................
    e644:	00000010 00000010 00000010 00000020     ............ ...
    e654:	00000010 00000010 00000040 00000010     ........@.......
    e664:	00000010 00000080 00000004 00000004     ................
    e674:	00000100 00000004 00000004 00000200     ................
    e684:	00000020 00000020 00000400 00000004      ... ...........
    e694:	00000004 00000800 00000040 00000040     ........@...@...
    e6a4:	00001000 00000080 00000080 00002000     ............. ..
    e6b4:	00000100 00000100                       ........
