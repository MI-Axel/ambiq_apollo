
watchdog_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e0  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000030  10001000  0000f3e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000009e0  10001030  0000f410  00011030  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00011030  2**0
                  CONTENTS, READONLY
  5 .debug_info   000212c8  00000000  00000000  00011067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003946  00000000  00000000  0003232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007d8  00000000  00000000  00035c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001570  00000000  00000000  0003644d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000067f3  00000000  00000000  000379bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a762  00000000  00000000  0003e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00048912  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000160c  00000000  00000000  00048990  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007179  00000000  00000000  00049f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 bd c2 00 00 25 c3 00 00 6d c3 00 00     ........%...m...
    c010:	6d c3 00 00 6d c3 00 00 6d c3 00 00 00 00 00 00     m...m...m.......
	...
    c02c:	2b c3 00 00 2b c3 00 00 00 00 00 00 2b c3 00 00     +...+.......+...
    c03c:	2b c3 00 00 2b c3 00 00 dd c1 00 00 2b c3 00 00     +...+.......+...
    c04c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c05c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c06c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c07c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c08c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c09c:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c0ac:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c0bc:	2b c3 00 00 2b c3 00 00 2b c3 00 00 2b c3 00 00     +...+...+...+...
    c0cc:	2b c3 00 00                                         +...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <am_watchdog_isr>:
// Interrupt handler for the watchdog.
//
//*****************************************************************************
void
am_watchdog_isr(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	af00      	add	r7, sp, #0
    //
    // Clear the watchdog interrupt.
    //
    am_hal_wdt_int_clear();
    c1e0:	f002 fd48 	bl	ec74 <am_hal_wdt_int_clear>

    //
    // Catch the first four watchdog interrupts, but let the fifth through
    // untouched.
    //
    if ( g_ui8NumWatchdogInterrupts < 4 )
    c1e4:	4b0d      	ldr	r3, [pc, #52]	; (c21c <am_watchdog_isr+0x40>)
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	2b03      	cmp	r3, #3
    c1ea:	d804      	bhi.n	c1f6 <am_watchdog_isr+0x1a>
    {
        //
        // Restart the watchdog.
        //
        am_hal_wdt_restart();
    c1ec:	4b0c      	ldr	r3, [pc, #48]	; (c220 <am_watchdog_isr+0x44>)
    c1ee:	22b2      	movs	r2, #178	; 0xb2
    c1f0:	605a      	str	r2, [r3, #4]
    c1f2:	4b0b      	ldr	r3, [pc, #44]	; (c220 <am_watchdog_isr+0x44>)
    c1f4:	685b      	ldr	r3, [r3, #4]
    }

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
    c1f6:	f001 f823 	bl	d240 <am_bsp_debug_printf_enable>

    //
    // Send a status message and give it some time to print.
    //
    am_util_stdio_printf("Interrupt #: %d\n", g_ui8NumWatchdogInterrupts);
    c1fa:	4b08      	ldr	r3, [pc, #32]	; (c21c <am_watchdog_isr+0x40>)
    c1fc:	781b      	ldrb	r3, [r3, #0]
    c1fe:	4619      	mov	r1, r3
    c200:	4808      	ldr	r0, [pc, #32]	; (c224 <am_watchdog_isr+0x48>)
    c202:	f000 ffb7 	bl	d174 <am_util_stdio_printf>
    am_util_delay_ms(100);
    c206:	2064      	movs	r0, #100	; 0x64
    c208:	f000 f892 	bl	c330 <am_util_delay_ms>

    //
    // Increment the number of watchdog interrupts.
    //
    g_ui8NumWatchdogInterrupts++;
    c20c:	4b03      	ldr	r3, [pc, #12]	; (c21c <am_watchdog_isr+0x40>)
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	3301      	adds	r3, #1
    c212:	b2da      	uxtb	r2, r3
    c214:	4b01      	ldr	r3, [pc, #4]	; (c21c <am_watchdog_isr+0x40>)
    c216:	701a      	strb	r2, [r3, #0]


}
    c218:	bf00      	nop
    c21a:	bd80      	pop	{r7, pc}
    c21c:	10001030 	.word	0x10001030
    c220:	40024000 	.word	0x40024000
    c224:	0000f0b0 	.word	0x0000f0b0

0000c228 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c228:	b580      	push	{r7, lr}
    c22a:	b084      	sub	sp, #16
    c22c:	af00      	add	r7, sp, #0
    am_hal_reset_status_t sStatus;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c22e:	2100      	movs	r1, #0
    c230:	2000      	movs	r0, #0
    c232:	f001 f901 	bl	d438 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c236:	481c      	ldr	r0, [pc, #112]	; (c2a8 <main+0x80>)
    c238:	f001 f8ca 	bl	d3d0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c23c:	f001 f8f2 	bl	d424 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c240:	f000 ffe4 	bl	d20c <am_bsp_low_power_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c244:	f001 f8a4 	bl	d390 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
    c248:	f000 ffb2 	bl	d1b0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Watchdog Example.\n");
    c24c:	4817      	ldr	r0, [pc, #92]	; (c2ac <main+0x84>)
    c24e:	f000 ff91 	bl	d174 <am_util_stdio_printf>

    //
    // Print out reset status register upon entry.
    //
    am_hal_reset_status_get(&sStatus);
    c252:	463b      	mov	r3, r7
    c254:	4618      	mov	r0, r3
    c256:	f001 fdc1 	bl	dddc <am_hal_reset_status_get>
    g_ui32ResetStatus = sStatus.eStatus;
    c25a:	883b      	ldrh	r3, [r7, #0]
    c25c:	461a      	mov	r2, r3
    c25e:	4b14      	ldr	r3, [pc, #80]	; (c2b0 <main+0x88>)
    c260:	601a      	str	r2, [r3, #0]

    am_util_stdio_printf("Reset Status Register = 0x%x\n",
    c262:	4b13      	ldr	r3, [pc, #76]	; (c2b0 <main+0x88>)
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	4619      	mov	r1, r3
    c268:	4812      	ldr	r0, [pc, #72]	; (c2b4 <main+0x8c>)
    c26a:	f000 ff83 	bl	d174 <am_util_stdio_printf>
                          g_ui32ResetStatus);

    //
    // Clear reset status register for next time we reset.
    //
    am_hal_reset_control(AM_HAL_RESET_CONTROL_STATUSCLEAR, 0);
    c26e:	2100      	movs	r1, #0
    c270:	2002      	movs	r0, #2
    c272:	f001 fd91 	bl	dd98 <am_hal_reset_control>

    //
    // LFRC has to be turned on for this example because the watchdog only
    // runs off of the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c276:	2100      	movs	r1, #0
    c278:	2002      	movs	r0, #2
    c27a:	f001 f8dd 	bl	d438 <am_hal_clkgen_control>

    //
    // Configure the watchdog.
    //
    am_hal_wdt_init(&g_sWatchdogConfig);
    c27e:	480e      	ldr	r0, [pc, #56]	; (c2b8 <main+0x90>)
    c280:	f002 fcb4 	bl	ebec <am_hal_wdt_init>

    //
    // Enable the interrupt for the watchdog in the NVIC.
    //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(WDT_IRQn);
    c284:	2001      	movs	r0, #1
    c286:	f7ff ff8b 	bl	c1a0 <__NVIC_EnableIRQ>
#else // AM_CMSIS_REGS
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_WATCHDOG);
#endif // AM_CMSIS_REGS
    am_hal_interrupt_master_enable();
    c28a:	f001 fbc1 	bl	da10 <am_hal_interrupt_master_enable>

    //
    // Enable the watchdog.
    //
    am_hal_wdt_start();
    c28e:	f002 fce7 	bl	ec60 <am_hal_wdt_start>
    while (1)
    {
        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c292:	f001 f847 	bl	d324 <am_bsp_debug_printf_disable>

        //
        // Disable interrupts.
        //
        am_hal_interrupt_master_disable();
    c296:	f001 fbbf 	bl	da18 <am_hal_interrupt_master_disable>
#endif

        //
        // Go to deep sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c29a:	2001      	movs	r0, #1
    c29c:	f001 fde2 	bl	de64 <am_hal_sysctrl_sleep>
#endif

        //
        // An interrupt woke us up so now enable them and take it.
        //
        am_hal_interrupt_master_enable();
    c2a0:	f001 fbb6 	bl	da10 <am_hal_interrupt_master_enable>
        am_bsp_debug_printf_disable();
    c2a4:	e7f5      	b.n	c292 <main+0x6a>
    c2a6:	bf00      	nop
    c2a8:	0000f140 	.word	0x0000f140
    c2ac:	0000f0c4 	.word	0x0000f0c4
    c2b0:	10001034 	.word	0x10001034
    c2b4:	0000f0d8 	.word	0x0000f0d8
    c2b8:	10001000 	.word	0x10001000

0000c2bc <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c2bc:	4811      	ldr	r0, [pc, #68]	; (c304 <zero_loop+0x12>)
    c2be:	4912      	ldr	r1, [pc, #72]	; (c308 <zero_loop+0x16>)
    c2c0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c2c2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c2c6:	4811      	ldr	r0, [pc, #68]	; (c30c <zero_loop+0x1a>)
    c2c8:	6801      	ldr	r1, [r0, #0]
    c2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2ce:	6001      	str	r1, [r0, #0]
    c2d0:	f3bf 8f4f 	dsb	sy
    c2d4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c2d8:	480d      	ldr	r0, [pc, #52]	; (c310 <zero_loop+0x1e>)
    c2da:	490e      	ldr	r1, [pc, #56]	; (c314 <zero_loop+0x22>)
    c2dc:	4a0e      	ldr	r2, [pc, #56]	; (c318 <zero_loop+0x26>)

0000c2de <copy_loop>:
    c2de:	f850 3b04 	ldr.w	r3, [r0], #4
    c2e2:	f841 3b04 	str.w	r3, [r1], #4
    c2e6:	4291      	cmp	r1, r2
    c2e8:	dbf9      	blt.n	c2de <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c2ea:	480c      	ldr	r0, [pc, #48]	; (c31c <zero_loop+0x2a>)
    c2ec:	490c      	ldr	r1, [pc, #48]	; (c320 <zero_loop+0x2e>)
    c2ee:	f04f 0200 	mov.w	r2, #0

0000c2f2 <zero_loop>:
    c2f2:	4288      	cmp	r0, r1
    c2f4:	bfb8      	it	lt
    c2f6:	f840 2b04 	strlt.w	r2, [r0], #4
    c2fa:	dbfa      	blt.n	c2f2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c2fc:	f7ff ff94 	bl	c228 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c300:	be00      	bkpt	0x0000
}
    c302:	bf00      	nop
    c304:	e000ed08 	.word	0xe000ed08
    c308:	0000c000 	.word	0x0000c000
    c30c:	e000ed88 	.word	0xe000ed88
    c310:	0000f3e0 	.word	0x0000f3e0
    c314:	10001000 	.word	0x10001000
    c318:	10001030 	.word	0x10001030
    c31c:	10001030 	.word	0x10001030
    c320:	10001a10 	.word	0x10001a10

0000c324 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c324:	b480      	push	{r7}
    c326:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c328:	e7fe      	b.n	c328 <NMI_Handler+0x4>

0000c32a <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c32a:	b480      	push	{r7}
    c32c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c32e:	e7fe      	b.n	c32e <DebugMon_Handler+0x4>

0000c330 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c330:	b580      	push	{r7, lr}
    c332:	b088      	sub	sp, #32
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c338:	f107 030c 	add.w	r3, r7, #12
    c33c:	4618      	mov	r0, r3
    c33e:	f001 f8d7 	bl	d4f0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c342:	68fb      	ldr	r3, [r7, #12]
    c344:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c346:	69fb      	ldr	r3, [r7, #28]
    c348:	4a07      	ldr	r2, [pc, #28]	; (c368 <am_util_delay_ms+0x38>)
    c34a:	fba2 2303 	umull	r2, r3, r2, r3
    c34e:	099b      	lsrs	r3, r3, #6
    c350:	687a      	ldr	r2, [r7, #4]
    c352:	fb02 f303 	mul.w	r3, r2, r3
    c356:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c358:	69b8      	ldr	r0, [r7, #24]
    c35a:	f001 f8e7 	bl	d52c <am_hal_flash_delay>
}
    c35e:	bf00      	nop
    c360:	3720      	adds	r7, #32
    c362:	46bd      	mov	sp, r7
    c364:	bd80      	pop	{r7, pc}
    c366:	bf00      	nop
    c368:	057619f1 	.word	0x057619f1

0000c36c <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c36c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c36e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c370:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c372:	f000 f809 	bl	c388 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c376:	bd01      	pop	{r0, pc}
}
    c378:	bf00      	nop
    c37a:	4618      	mov	r0, r3

0000c37c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c37c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c37e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c380:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c382:	4770      	bx	lr
}
    c384:	bf00      	nop
    c386:	4618      	mov	r0, r3

0000c388 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c388:	b580      	push	{r7, lr}
    c38a:	b096      	sub	sp, #88	; 0x58
    c38c:	af00      	add	r7, sp, #0
    c38e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c390:	f107 030c 	add.w	r3, r7, #12
    c394:	2200      	movs	r2, #0
    c396:	601a      	str	r2, [r3, #0]
    c398:	605a      	str	r2, [r3, #4]
    c39a:	609a      	str	r2, [r3, #8]
    c39c:	60da      	str	r2, [r3, #12]
    c39e:	611a      	str	r2, [r3, #16]
    c3a0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c3a2:	2300      	movs	r3, #0
    c3a4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c3aa:	4b2e      	ldr	r3, [pc, #184]	; (c464 <am_util_faultisr_collect_data+0xdc>)
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3b2:	b2db      	uxtb	r3, r3
    c3b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3ba:	0a1b      	lsrs	r3, r3, #8
    c3bc:	b2db      	uxtb	r3, r3
    c3be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3c4:	0c1b      	lsrs	r3, r3, #16
    c3c6:	b29b      	uxth	r3, r3
    c3c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3cc:	4b26      	ldr	r3, [pc, #152]	; (c468 <am_util_faultisr_collect_data+0xe0>)
    c3ce:	681b      	ldr	r3, [r3, #0]
    c3d0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3d2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c3d6:	b2db      	uxtb	r3, r3
    c3d8:	f003 0302 	and.w	r3, r3, #2
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d005      	beq.n	c3ec <am_util_faultisr_collect_data+0x64>
    c3e0:	6879      	ldr	r1, [r7, #4]
    c3e2:	2006      	movs	r0, #6
    c3e4:	f7ff ffca 	bl	c37c <getStackedReg>
    c3e8:	4603      	mov	r3, r0
    c3ea:	e001      	b.n	c3f0 <am_util_faultisr_collect_data+0x68>
    c3ec:	f04f 33ff 	mov.w	r3, #4294967295
    c3f0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3f2:	6879      	ldr	r1, [r7, #4]
    c3f4:	2000      	movs	r0, #0
    c3f6:	f7ff ffc1 	bl	c37c <getStackedReg>
    c3fa:	4603      	mov	r3, r0
    c3fc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3fe:	6879      	ldr	r1, [r7, #4]
    c400:	2001      	movs	r0, #1
    c402:	f7ff ffbb 	bl	c37c <getStackedReg>
    c406:	4603      	mov	r3, r0
    c408:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c40a:	6879      	ldr	r1, [r7, #4]
    c40c:	2002      	movs	r0, #2
    c40e:	f7ff ffb5 	bl	c37c <getStackedReg>
    c412:	4603      	mov	r3, r0
    c414:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c416:	6879      	ldr	r1, [r7, #4]
    c418:	2003      	movs	r0, #3
    c41a:	f7ff ffaf 	bl	c37c <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c422:	6879      	ldr	r1, [r7, #4]
    c424:	2004      	movs	r0, #4
    c426:	f7ff ffa9 	bl	c37c <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c42e:	6879      	ldr	r1, [r7, #4]
    c430:	2005      	movs	r0, #5
    c432:	f7ff ffa3 	bl	c37c <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c43a:	6879      	ldr	r1, [r7, #4]
    c43c:	2006      	movs	r0, #6
    c43e:	f7ff ff9d 	bl	c37c <getStackedReg>
    c442:	4603      	mov	r3, r0
    c444:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c446:	6879      	ldr	r1, [r7, #4]
    c448:	2007      	movs	r0, #7
    c44a:	f7ff ff97 	bl	c37c <getStackedReg>
    c44e:	4603      	mov	r3, r0
    c450:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c452:	f107 030c 	add.w	r3, r7, #12
    c456:	4619      	mov	r1, r3
    c458:	2002      	movs	r0, #2
    c45a:	f001 fb71 	bl	db40 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c45e:	2300      	movs	r3, #0
    c460:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c462:	e7fe      	b.n	c462 <am_util_faultisr_collect_data+0xda>
    c464:	e000ed28 	.word	0xe000ed28
    c468:	e000ed38 	.word	0xe000ed38

0000c46c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c46c:	b480      	push	{r7}
    c46e:	b083      	sub	sp, #12
    c470:	af00      	add	r7, sp, #0
    c472:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c474:	4a04      	ldr	r2, [pc, #16]	; (c488 <am_util_stdio_printf_init+0x1c>)
    c476:	687b      	ldr	r3, [r7, #4]
    c478:	6013      	str	r3, [r2, #0]
}
    c47a:	bf00      	nop
    c47c:	370c      	adds	r7, #12
    c47e:	46bd      	mov	sp, r7
    c480:	f85d 7b04 	ldr.w	r7, [sp], #4
    c484:	4770      	bx	lr
    c486:	bf00      	nop
    c488:	10001944 	.word	0x10001944

0000c48c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c48c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c490:	b096      	sub	sp, #88	; 0x58
    c492:	af00      	add	r7, sp, #0
    c494:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c498:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c49c:	0025      	movs	r5, r4
    c49e:	2600      	movs	r6, #0
    c4a0:	ea55 0306 	orrs.w	r3, r5, r6
    c4a4:	f000 80a0 	beq.w	c5e8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c4ac:	0862      	lsrs	r2, r4, #1
    c4ae:	ea4f 0133 	mov.w	r1, r3, rrx
    c4b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c4b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c4ba:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c4be:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c4c2:	eb11 0308 	adds.w	r3, r1, r8
    c4c6:	eb42 0409 	adc.w	r4, r2, r9
    c4ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c4ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4d2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c4d6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c4da:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c4de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4e2:	eb13 030a 	adds.w	r3, r3, sl
    c4e6:	eb44 040b 	adc.w	r4, r4, fp
    c4ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c4ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c4f2:	0a1a      	lsrs	r2, r3, #8
    c4f4:	62ba      	str	r2, [r7, #40]	; 0x28
    c4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4f8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c4fc:	62ba      	str	r2, [r7, #40]	; 0x28
    c4fe:	0a23      	lsrs	r3, r4, #8
    c500:	62fb      	str	r3, [r7, #44]	; 0x2c
    c502:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c506:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c50a:	18c9      	adds	r1, r1, r3
    c50c:	eb42 0204 	adc.w	r2, r2, r4
    c510:	460b      	mov	r3, r1
    c512:	4614      	mov	r4, r2
    c514:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c518:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c51c:	0c1a      	lsrs	r2, r3, #16
    c51e:	623a      	str	r2, [r7, #32]
    c520:	6a3a      	ldr	r2, [r7, #32]
    c522:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c526:	623a      	str	r2, [r7, #32]
    c528:	0c23      	lsrs	r3, r4, #16
    c52a:	627b      	str	r3, [r7, #36]	; 0x24
    c52c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c530:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c534:	18c9      	adds	r1, r1, r3
    c536:	eb42 0204 	adc.w	r2, r2, r4
    c53a:	460b      	mov	r3, r1
    c53c:	4614      	mov	r4, r2
    c53e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c542:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c546:	0023      	movs	r3, r4
    c548:	603b      	str	r3, [r7, #0]
    c54a:	2300      	movs	r3, #0
    c54c:	607b      	str	r3, [r7, #4]
    c54e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c552:	e897 0006 	ldmia.w	r7, {r1, r2}
    c556:	18c9      	adds	r1, r1, r3
    c558:	eb42 0204 	adc.w	r2, r2, r4
    c55c:	460b      	mov	r3, r1
    c55e:	4614      	mov	r4, r2
    c560:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c564:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c568:	08da      	lsrs	r2, r3, #3
    c56a:	613a      	str	r2, [r7, #16]
    c56c:	693a      	ldr	r2, [r7, #16]
    c56e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c572:	613a      	str	r2, [r7, #16]
    c574:	08e3      	lsrs	r3, r4, #3
    c576:	617b      	str	r3, [r7, #20]
    c578:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c57c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c580:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c584:	460b      	mov	r3, r1
    c586:	4614      	mov	r4, r2
    c588:	00a0      	lsls	r0, r4, #2
    c58a:	60f8      	str	r0, [r7, #12]
    c58c:	68f8      	ldr	r0, [r7, #12]
    c58e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c592:	60f8      	str	r0, [r7, #12]
    c594:	009b      	lsls	r3, r3, #2
    c596:	60bb      	str	r3, [r7, #8]
    c598:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c59c:	185b      	adds	r3, r3, r1
    c59e:	eb44 0402 	adc.w	r4, r4, r2
    c5a2:	18db      	adds	r3, r3, r3
    c5a4:	eb44 0404 	adc.w	r4, r4, r4
    c5a8:	4619      	mov	r1, r3
    c5aa:	4622      	mov	r2, r4
    c5ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c5b0:	1a5b      	subs	r3, r3, r1
    c5b2:	eb64 0402 	sbc.w	r4, r4, r2
    c5b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c5ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c5be:	3306      	adds	r3, #6
    c5c0:	f144 0400 	adc.w	r4, r4, #0
    c5c4:	091a      	lsrs	r2, r3, #4
    c5c6:	61ba      	str	r2, [r7, #24]
    c5c8:	69ba      	ldr	r2, [r7, #24]
    c5ca:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c5ce:	61ba      	str	r2, [r7, #24]
    c5d0:	0923      	lsrs	r3, r4, #4
    c5d2:	61fb      	str	r3, [r7, #28]
    c5d4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c5dc:	18c9      	adds	r1, r1, r3
    c5de:	eb42 0204 	adc.w	r2, r2, r4
    c5e2:	460b      	mov	r3, r1
    c5e4:	4614      	mov	r4, r2
    c5e6:	e029      	b.n	c63c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5ea:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c5ee:	085a      	lsrs	r2, r3, #1
    c5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c5f2:	089b      	lsrs	r3, r3, #2
    c5f4:	4413      	add	r3, r2
    c5f6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c5fa:	091b      	lsrs	r3, r3, #4
    c5fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c5fe:	4413      	add	r3, r2
    c600:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c604:	0a1b      	lsrs	r3, r3, #8
    c606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c608:	4413      	add	r3, r2
    c60a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c60e:	0c1b      	lsrs	r3, r3, #16
    c610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c612:	4413      	add	r3, r2
    c614:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c618:	08db      	lsrs	r3, r3, #3
    c61a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c61c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c61e:	4613      	mov	r3, r2
    c620:	009b      	lsls	r3, r3, #2
    c622:	4413      	add	r3, r2
    c624:	005b      	lsls	r3, r3, #1
    c626:	461a      	mov	r2, r3
    c628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c62a:	1a9b      	subs	r3, r3, r2
    c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c630:	3306      	adds	r3, #6
    c632:	091a      	lsrs	r2, r3, #4
    c634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c636:	4413      	add	r3, r2
    c638:	f04f 0400 	mov.w	r4, #0
    }
}
    c63c:	4618      	mov	r0, r3
    c63e:	4621      	mov	r1, r4
    c640:	3758      	adds	r7, #88	; 0x58
    c642:	46bd      	mov	sp, r7
    c644:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c648:	4770      	bx	lr

0000c64a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c64a:	b590      	push	{r4, r7, lr}
    c64c:	b085      	sub	sp, #20
    c64e:	af00      	add	r7, sp, #0
    c650:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c654:	683a      	ldr	r2, [r7, #0]
    c656:	687b      	ldr	r3, [r7, #4]
    c658:	4313      	orrs	r3, r2
    c65a:	2b00      	cmp	r3, #0
    c65c:	bf0c      	ite	eq
    c65e:	2301      	moveq	r3, #1
    c660:	2300      	movne	r3, #0
    c662:	b2db      	uxtb	r3, r3
    c664:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c666:	e008      	b.n	c67a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c668:	e9d7 0100 	ldrd	r0, r1, [r7]
    c66c:	f7ff ff0e 	bl	c48c <divu64_10>
    c670:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	3301      	adds	r3, #1
    c678:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c67a:	e897 0018 	ldmia.w	r7, {r3, r4}
    c67e:	4323      	orrs	r3, r4
    c680:	d1f2      	bne.n	c668 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c682:	68fb      	ldr	r3, [r7, #12]
}
    c684:	4618      	mov	r0, r3
    c686:	3714      	adds	r7, #20
    c688:	46bd      	mov	sp, r7
    c68a:	bd90      	pop	{r4, r7, pc}

0000c68c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c68c:	b590      	push	{r4, r7, lr}
    c68e:	b083      	sub	sp, #12
    c690:	af00      	add	r7, sp, #0
    c692:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c696:	e897 0018 	ldmia.w	r7, {r3, r4}
    c69a:	2b00      	cmp	r3, #0
    c69c:	f174 0300 	sbcs.w	r3, r4, #0
    c6a0:	da06      	bge.n	c6b0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6a2:	e897 0018 	ldmia.w	r7, {r3, r4}
    c6a6:	425b      	negs	r3, r3
    c6a8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c6ac:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6b0:	e897 0018 	ldmia.w	r7, {r3, r4}
    c6b4:	4618      	mov	r0, r3
    c6b6:	4621      	mov	r1, r4
    c6b8:	f7ff ffc7 	bl	c64a <ndigits_in_u64>
    c6bc:	4603      	mov	r3, r0
}
    c6be:	4618      	mov	r0, r3
    c6c0:	370c      	adds	r7, #12
    c6c2:	46bd      	mov	sp, r7
    c6c4:	bd90      	pop	{r4, r7, pc}

0000c6c6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c6c6:	b490      	push	{r4, r7}
    c6c8:	b084      	sub	sp, #16
    c6ca:	af00      	add	r7, sp, #0
    c6cc:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c6d0:	6839      	ldr	r1, [r7, #0]
    c6d2:	687a      	ldr	r2, [r7, #4]
    c6d4:	430a      	orrs	r2, r1
    c6d6:	2a00      	cmp	r2, #0
    c6d8:	bf0c      	ite	eq
    c6da:	2201      	moveq	r2, #1
    c6dc:	2200      	movne	r2, #0
    c6de:	b2d2      	uxtb	r2, r2
    c6e0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c6e2:	e00a      	b.n	c6fa <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c6e4:	e897 0006 	ldmia.w	r7, {r1, r2}
    c6e8:	090b      	lsrs	r3, r1, #4
    c6ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c6ee:	0914      	lsrs	r4, r2, #4
    c6f0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c6f4:	68fa      	ldr	r2, [r7, #12]
    c6f6:	3201      	adds	r2, #1
    c6f8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c6fa:	e897 0006 	ldmia.w	r7, {r1, r2}
    c6fe:	430a      	orrs	r2, r1
    c700:	d1f0      	bne.n	c6e4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c702:	68fb      	ldr	r3, [r7, #12]
}
    c704:	4618      	mov	r0, r3
    c706:	3710      	adds	r7, #16
    c708:	46bd      	mov	sp, r7
    c70a:	bc90      	pop	{r4, r7}
    c70c:	4770      	bx	lr

0000c70e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c70e:	b480      	push	{r7}
    c710:	b087      	sub	sp, #28
    c712:	af00      	add	r7, sp, #0
    c714:	6078      	str	r0, [r7, #4]
    c716:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c718:	2300      	movs	r3, #0
    c71a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c71c:	2300      	movs	r3, #0
    c71e:	613b      	str	r3, [r7, #16]
    c720:	2300      	movs	r3, #0
    c722:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c724:	687b      	ldr	r3, [r7, #4]
    c726:	781b      	ldrb	r3, [r3, #0]
    c728:	2b2d      	cmp	r3, #45	; 0x2d
    c72a:	d11b      	bne.n	c764 <decstr_to_int+0x56>
    {
        bNeg = true;
    c72c:	2301      	movs	r3, #1
    c72e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	3301      	adds	r3, #1
    c734:	607b      	str	r3, [r7, #4]
        uCnt++;
    c736:	68fb      	ldr	r3, [r7, #12]
    c738:	3301      	adds	r3, #1
    c73a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c73c:	e012      	b.n	c764 <decstr_to_int+0x56>
    {
        ++uCnt;
    c73e:	68fb      	ldr	r3, [r7, #12]
    c740:	3301      	adds	r3, #1
    c742:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c744:	693a      	ldr	r2, [r7, #16]
    c746:	4613      	mov	r3, r2
    c748:	009b      	lsls	r3, r3, #2
    c74a:	4413      	add	r3, r2
    c74c:	005b      	lsls	r3, r3, #1
    c74e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	461a      	mov	r2, r3
    c756:	693b      	ldr	r3, [r7, #16]
    c758:	4413      	add	r3, r2
    c75a:	3b30      	subs	r3, #48	; 0x30
    c75c:	613b      	str	r3, [r7, #16]
        pcStr++;
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	3301      	adds	r3, #1
    c762:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	781b      	ldrb	r3, [r3, #0]
    c768:	2b2f      	cmp	r3, #47	; 0x2f
    c76a:	d903      	bls.n	c774 <decstr_to_int+0x66>
    c76c:	687b      	ldr	r3, [r7, #4]
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	2b39      	cmp	r3, #57	; 0x39
    c772:	d9e4      	bls.n	c73e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c774:	683b      	ldr	r3, [r7, #0]
    c776:	2b00      	cmp	r3, #0
    c778:	d002      	beq.n	c780 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c77a:	683b      	ldr	r3, [r7, #0]
    c77c:	68fa      	ldr	r2, [r7, #12]
    c77e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c780:	7dfb      	ldrb	r3, [r7, #23]
    c782:	2b00      	cmp	r3, #0
    c784:	d002      	beq.n	c78c <decstr_to_int+0x7e>
    c786:	693b      	ldr	r3, [r7, #16]
    c788:	425b      	negs	r3, r3
    c78a:	e000      	b.n	c78e <decstr_to_int+0x80>
    c78c:	693b      	ldr	r3, [r7, #16]
}
    c78e:	4618      	mov	r0, r3
    c790:	371c      	adds	r7, #28
    c792:	46bd      	mov	sp, r7
    c794:	f85d 7b04 	ldr.w	r7, [sp], #4
    c798:	4770      	bx	lr

0000c79a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c79a:	b590      	push	{r4, r7, lr}
    c79c:	b091      	sub	sp, #68	; 0x44
    c79e:	af00      	add	r7, sp, #0
    c7a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c7a4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c7a6:	2300      	movs	r3, #0
    c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    c7aa:	2300      	movs	r3, #0
    c7ac:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c7b2:	f7ff fe6b 	bl	c48c <divu64_10>
    c7b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7ba:	68b9      	ldr	r1, [r7, #8]
    c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c7be:	4613      	mov	r3, r2
    c7c0:	009b      	lsls	r3, r3, #2
    c7c2:	4413      	add	r3, r2
    c7c4:	005b      	lsls	r3, r3, #1
    c7c6:	1acb      	subs	r3, r1, r3
    c7c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7cc:	1c5a      	adds	r2, r3, #1
    c7ce:	63fa      	str	r2, [r7, #60]	; 0x3c
    c7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c7d2:	b2d2      	uxtb	r2, r2
    c7d4:	3230      	adds	r2, #48	; 0x30
    c7d6:	b2d2      	uxtb	r2, r2
    c7d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c7dc:	440b      	add	r3, r1
    c7de:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c7e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c7e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c7ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c7ee:	4323      	orrs	r3, r4
    c7f0:	d1dd      	bne.n	c7ae <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7f4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d011      	beq.n	c820 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c7fc:	e008      	b.n	c810 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	1c5a      	adds	r2, r3, #1
    c802:	607a      	str	r2, [r7, #4]
    c804:	f107 0110 	add.w	r1, r7, #16
    c808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c80a:	440a      	add	r2, r1
    c80c:	7812      	ldrb	r2, [r2, #0]
    c80e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c812:	1e5a      	subs	r2, r3, #1
    c814:	63fa      	str	r2, [r7, #60]	; 0x3c
    c816:	2b00      	cmp	r3, #0
    c818:	d1f1      	bne.n	c7fe <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	2200      	movs	r2, #0
    c81e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c822:	4618      	mov	r0, r3
    c824:	3744      	adds	r7, #68	; 0x44
    c826:	46bd      	mov	sp, r7
    c828:	bd90      	pop	{r4, r7, pc}

0000c82a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c82a:	b4b0      	push	{r4, r5, r7}
    c82c:	b08d      	sub	sp, #52	; 0x34
    c82e:	af00      	add	r7, sp, #0
    c830:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c834:	607a      	str	r2, [r7, #4]
    c836:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c838:	2300      	movs	r3, #0
    c83a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c83c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c840:	4313      	orrs	r3, r2
    c842:	d131      	bne.n	c8a8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c846:	1c5a      	adds	r2, r3, #1
    c848:	62fa      	str	r2, [r7, #44]	; 0x2c
    c84a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c84e:	4413      	add	r3, r2
    c850:	2230      	movs	r2, #48	; 0x30
    c852:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c856:	e027      	b.n	c8a8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c858:	7a3b      	ldrb	r3, [r7, #8]
    c85a:	f003 030f 	and.w	r3, r3, #15
    c85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c866:	2b09      	cmp	r3, #9
    c868:	d90a      	bls.n	c880 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c86a:	78fb      	ldrb	r3, [r7, #3]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d001      	beq.n	c874 <uint64_to_hexstr+0x4a>
    c870:	2227      	movs	r2, #39	; 0x27
    c872:	e000      	b.n	c876 <uint64_to_hexstr+0x4c>
    c874:	2207      	movs	r2, #7
    c876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c87a:	4413      	add	r3, r2
    c87c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c882:	1c5a      	adds	r2, r3, #1
    c884:	62fa      	str	r2, [r7, #44]	; 0x2c
    c886:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c88a:	3230      	adds	r2, #48	; 0x30
    c88c:	b2d2      	uxtb	r2, r2
    c88e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c892:	440b      	add	r3, r1
    c894:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c89c:	0914      	lsrs	r4, r2, #4
    c89e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c8a2:	091d      	lsrs	r5, r3, #4
    c8a4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    c8a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c8ac:	4313      	orrs	r3, r2
    c8ae:	d1d3      	bne.n	c858 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8b2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d011      	beq.n	c8de <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    c8ba:	e008      	b.n	c8ce <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	1c5a      	adds	r2, r3, #1
    c8c0:	607a      	str	r2, [r7, #4]
    c8c2:	f107 0110 	add.w	r1, r7, #16
    c8c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c8c8:	440a      	add	r2, r1
    c8ca:	7812      	ldrb	r2, [r2, #0]
    c8cc:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8d0:	1e5a      	subs	r2, r3, #1
    c8d2:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d1f1      	bne.n	c8bc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	2200      	movs	r2, #0
    c8dc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c8e0:	4618      	mov	r0, r3
    c8e2:	3734      	adds	r7, #52	; 0x34
    c8e4:	46bd      	mov	sp, r7
    c8e6:	bcb0      	pop	{r4, r5, r7}
    c8e8:	4770      	bx	lr

0000c8ea <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c8ea:	b480      	push	{r7}
    c8ec:	b085      	sub	sp, #20
    c8ee:	af00      	add	r7, sp, #0
    c8f0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c8f2:	2300      	movs	r3, #0
    c8f4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d104      	bne.n	c906 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c8fc:	68fb      	ldr	r3, [r7, #12]
    c8fe:	e009      	b.n	c914 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c900:	68fb      	ldr	r3, [r7, #12]
    c902:	3301      	adds	r3, #1
    c904:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	1c5a      	adds	r2, r3, #1
    c90a:	607a      	str	r2, [r7, #4]
    c90c:	781b      	ldrb	r3, [r3, #0]
    c90e:	2b00      	cmp	r3, #0
    c910:	d1f6      	bne.n	c900 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c912:	68fb      	ldr	r3, [r7, #12]
}
    c914:	4618      	mov	r0, r3
    c916:	3714      	adds	r7, #20
    c918:	46bd      	mov	sp, r7
    c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c91e:	4770      	bx	lr

0000c920 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c920:	b480      	push	{r7}
    c922:	b087      	sub	sp, #28
    c924:	af00      	add	r7, sp, #0
    c926:	60f8      	str	r0, [r7, #12]
    c928:	460b      	mov	r3, r1
    c92a:	607a      	str	r2, [r7, #4]
    c92c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c92e:	2300      	movs	r3, #0
    c930:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	2b00      	cmp	r3, #0
    c936:	dc0c      	bgt.n	c952 <padbuffer+0x32>
    {
        return i32Cnt;
    c938:	697b      	ldr	r3, [r7, #20]
    c93a:	e010      	b.n	c95e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c93c:	68fb      	ldr	r3, [r7, #12]
    c93e:	2b00      	cmp	r3, #0
    c940:	d004      	beq.n	c94c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c942:	68fb      	ldr	r3, [r7, #12]
    c944:	1c5a      	adds	r2, r3, #1
    c946:	60fa      	str	r2, [r7, #12]
    c948:	7afa      	ldrb	r2, [r7, #11]
    c94a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c94c:	697b      	ldr	r3, [r7, #20]
    c94e:	3301      	adds	r3, #1
    c950:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c952:	687b      	ldr	r3, [r7, #4]
    c954:	1e5a      	subs	r2, r3, #1
    c956:	607a      	str	r2, [r7, #4]
    c958:	2b00      	cmp	r3, #0
    c95a:	d1ef      	bne.n	c93c <padbuffer+0x1c>
    }

    return i32Cnt;
    c95c:	697b      	ldr	r3, [r7, #20]
}
    c95e:	4618      	mov	r0, r3
    c960:	371c      	adds	r7, #28
    c962:	46bd      	mov	sp, r7
    c964:	f85d 7b04 	ldr.w	r7, [sp], #4
    c968:	4770      	bx	lr
	...

0000c96c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c96c:	b590      	push	{r4, r7, lr}
    c96e:	b08f      	sub	sp, #60	; 0x3c
    c970:	af00      	add	r7, sp, #0
    c972:	60f8      	str	r0, [r7, #12]
    c974:	60b9      	str	r1, [r7, #8]
    c976:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c978:	68bb      	ldr	r3, [r7, #8]
    c97a:	681b      	ldr	r3, [r3, #0]
    c97c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c980:	2b03      	cmp	r3, #3
    c982:	dc02      	bgt.n	c98a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c984:	f06f 0302 	mvn.w	r3, #2
    c988:	e0e7      	b.n	cb5a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    c98a:	edd7 7a03 	vldr	s15, [r7, #12]
    c98e:	eef5 7a40 	vcmp.f32	s15, #0.0
    c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c996:	d104      	bne.n	c9a2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c998:	68bb      	ldr	r3, [r7, #8]
    c99a:	4a72      	ldr	r2, [pc, #456]	; (cb64 <ftoa+0x1f8>)
    c99c:	601a      	str	r2, [r3, #0]
        return 3;
    c99e:	2303      	movs	r3, #3
    c9a0:	e0db      	b.n	cb5a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    c9a2:	68bb      	ldr	r3, [r7, #8]
    c9a4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c9a6:	68fb      	ldr	r3, [r7, #12]
    c9a8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c9aa:	693b      	ldr	r3, [r7, #16]
    c9ac:	15db      	asrs	r3, r3, #23
    c9ae:	b2db      	uxtb	r3, r3
    c9b0:	3b7f      	subs	r3, #127	; 0x7f
    c9b2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c9b4:	693b      	ldr	r3, [r7, #16]
    c9b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c9ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9be:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    c9c0:	2300      	movs	r3, #0
    c9c2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    c9c4:	2300      	movs	r3, #0
    c9c6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    c9c8:	69fb      	ldr	r3, [r7, #28]
    c9ca:	2b1e      	cmp	r3, #30
    c9cc:	dd02      	ble.n	c9d4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9ce:	f06f 0301 	mvn.w	r3, #1
    c9d2:	e0c2      	b.n	cb5a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    c9d4:	69fb      	ldr	r3, [r7, #28]
    c9d6:	f113 0f17 	cmn.w	r3, #23
    c9da:	da02      	bge.n	c9e2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c9dc:	f04f 33ff 	mov.w	r3, #4294967295
    c9e0:	e0bb      	b.n	cb5a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    c9e2:	69fb      	ldr	r3, [r7, #28]
    c9e4:	2b16      	cmp	r3, #22
    c9e6:	dd06      	ble.n	c9f6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c9e8:	69fb      	ldr	r3, [r7, #28]
    c9ea:	3b17      	subs	r3, #23
    c9ec:	69ba      	ldr	r2, [r7, #24]
    c9ee:	fa02 f303 	lsl.w	r3, r2, r3
    c9f2:	637b      	str	r3, [r7, #52]	; 0x34
    c9f4:	e01a      	b.n	ca2c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c9f6:	69fb      	ldr	r3, [r7, #28]
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	db0f      	blt.n	ca1c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c9fc:	69fb      	ldr	r3, [r7, #28]
    c9fe:	f1c3 0317 	rsb	r3, r3, #23
    ca02:	69ba      	ldr	r2, [r7, #24]
    ca04:	fa42 f303 	asr.w	r3, r2, r3
    ca08:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ca0a:	69fb      	ldr	r3, [r7, #28]
    ca0c:	3301      	adds	r3, #1
    ca0e:	69ba      	ldr	r2, [r7, #24]
    ca10:	fa02 f303 	lsl.w	r3, r2, r3
    ca14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca18:	633b      	str	r3, [r7, #48]	; 0x30
    ca1a:	e007      	b.n	ca2c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca1c:	69bb      	ldr	r3, [r7, #24]
    ca1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca22:	69fb      	ldr	r3, [r7, #28]
    ca24:	43db      	mvns	r3, r3
    ca26:	fa42 f303 	asr.w	r3, r2, r3
    ca2a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca2c:	693b      	ldr	r3, [r7, #16]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	da04      	bge.n	ca3c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ca32:	68bb      	ldr	r3, [r7, #8]
    ca34:	1c5a      	adds	r2, r3, #1
    ca36:	60ba      	str	r2, [r7, #8]
    ca38:	222d      	movs	r2, #45	; 0x2d
    ca3a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d105      	bne.n	ca4e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ca42:	68bb      	ldr	r3, [r7, #8]
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	60ba      	str	r2, [r7, #8]
    ca48:	2230      	movs	r2, #48	; 0x30
    ca4a:	701a      	strb	r2, [r3, #0]
    ca4c:	e021      	b.n	ca92 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca50:	2b00      	cmp	r3, #0
    ca52:	dd08      	ble.n	ca66 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca56:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca5a:	68ba      	ldr	r2, [r7, #8]
    ca5c:	4618      	mov	r0, r3
    ca5e:	4621      	mov	r1, r4
    ca60:	f7ff fe9b 	bl	c79a <uint64_to_str>
    ca64:	e011      	b.n	ca8a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    ca66:	68bb      	ldr	r3, [r7, #8]
    ca68:	1c5a      	adds	r2, r3, #1
    ca6a:	60ba      	str	r2, [r7, #8]
    ca6c:	222d      	movs	r2, #45	; 0x2d
    ca6e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca72:	425b      	negs	r3, r3
    ca74:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca78:	68ba      	ldr	r2, [r7, #8]
    ca7a:	4618      	mov	r0, r3
    ca7c:	4621      	mov	r1, r4
    ca7e:	f7ff fe8c 	bl	c79a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca82:	e002      	b.n	ca8a <ftoa+0x11e>
        {
            pcBuf++;
    ca84:	68bb      	ldr	r3, [r7, #8]
    ca86:	3301      	adds	r3, #1
    ca88:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ca8a:	68bb      	ldr	r3, [r7, #8]
    ca8c:	781b      	ldrb	r3, [r3, #0]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d1f8      	bne.n	ca84 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca92:	68bb      	ldr	r3, [r7, #8]
    ca94:	1c5a      	adds	r2, r3, #1
    ca96:	60ba      	str	r2, [r7, #8]
    ca98:	222e      	movs	r2, #46	; 0x2e
    ca9a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d105      	bne.n	caae <ftoa+0x142>
    {
        *pcBuf++ = '0';
    caa2:	68bb      	ldr	r3, [r7, #8]
    caa4:	1c5a      	adds	r2, r3, #1
    caa6:	60ba      	str	r2, [r7, #8]
    caa8:	2230      	movs	r2, #48	; 0x30
    caaa:	701a      	strb	r2, [r3, #0]
    caac:	e04f      	b.n	cb4e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    caae:	68ba      	ldr	r2, [r7, #8]
    cab0:	6a3b      	ldr	r3, [r7, #32]
    cab2:	1ad3      	subs	r3, r2, r3
    cab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cab6:	1ad3      	subs	r3, r2, r3
    cab8:	3b01      	subs	r3, #1
    caba:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cabc:	697a      	ldr	r2, [r7, #20]
    cabe:	687b      	ldr	r3, [r7, #4]
    cac0:	4293      	cmp	r3, r2
    cac2:	bfa8      	it	ge
    cac4:	4613      	movge	r3, r2
    cac6:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cac8:	2300      	movs	r3, #0
    caca:	62bb      	str	r3, [r7, #40]	; 0x28
    cacc:	e015      	b.n	cafa <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cad0:	4613      	mov	r3, r2
    cad2:	009b      	lsls	r3, r3, #2
    cad4:	4413      	add	r3, r2
    cad6:	005b      	lsls	r3, r3, #1
    cad8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cada:	68bb      	ldr	r3, [r7, #8]
    cadc:	1c5a      	adds	r2, r3, #1
    cade:	60ba      	str	r2, [r7, #8]
    cae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cae2:	1612      	asrs	r2, r2, #24
    cae4:	b2d2      	uxtb	r2, r2
    cae6:	3230      	adds	r2, #48	; 0x30
    cae8:	b2d2      	uxtb	r2, r2
    caea:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    caee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    caf2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    caf6:	3301      	adds	r3, #1
    caf8:	62bb      	str	r3, [r7, #40]	; 0x28
    cafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cafc:	697b      	ldr	r3, [r7, #20]
    cafe:	429a      	cmp	r2, r3
    cb00:	dbe5      	blt.n	cace <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb04:	4613      	mov	r3, r2
    cb06:	009b      	lsls	r3, r3, #2
    cb08:	4413      	add	r3, r2
    cb0a:	005b      	lsls	r3, r3, #1
    cb0c:	161b      	asrs	r3, r3, #24
    cb0e:	2b04      	cmp	r3, #4
    cb10:	dd1d      	ble.n	cb4e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cb12:	68bb      	ldr	r3, [r7, #8]
    cb14:	3b01      	subs	r3, #1
    cb16:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb18:	e015      	b.n	cb46 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb1c:	781b      	ldrb	r3, [r3, #0]
    cb1e:	2b2e      	cmp	r3, #46	; 0x2e
    cb20:	d00e      	beq.n	cb40 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	2b39      	cmp	r3, #57	; 0x39
    cb28:	d103      	bne.n	cb32 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb2c:	2230      	movs	r2, #48	; 0x30
    cb2e:	701a      	strb	r2, [r3, #0]
    cb30:	e006      	b.n	cb40 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb34:	781b      	ldrb	r3, [r3, #0]
    cb36:	3301      	adds	r3, #1
    cb38:	b2da      	uxtb	r2, r3
    cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb3c:	701a      	strb	r2, [r3, #0]
                    break;
    cb3e:	e006      	b.n	cb4e <ftoa+0x1e2>
                }
                pcBuftmp--;
    cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb42:	3b01      	subs	r3, #1
    cb44:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb48:	6a3b      	ldr	r3, [r7, #32]
    cb4a:	429a      	cmp	r2, r3
    cb4c:	d2e5      	bcs.n	cb1a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb4e:	68bb      	ldr	r3, [r7, #8]
    cb50:	2200      	movs	r2, #0
    cb52:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb54:	68ba      	ldr	r2, [r7, #8]
    cb56:	6a3b      	ldr	r3, [r7, #32]
    cb58:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb5a:	4618      	mov	r0, r3
    cb5c:	373c      	adds	r7, #60	; 0x3c
    cb5e:	46bd      	mov	sp, r7
    cb60:	bd90      	pop	{r4, r7, pc}
    cb62:	bf00      	nop
    cb64:	00302e30 	.word	0x00302e30

0000cb68 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb68:	b590      	push	{r4, r7, lr}
    cb6a:	b095      	sub	sp, #84	; 0x54
    cb6c:	af00      	add	r7, sp, #0
    cb6e:	60f8      	str	r0, [r7, #12]
    cb70:	60b9      	str	r1, [r7, #8]
    cb72:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb74:	2300      	movs	r3, #0
    cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb78:	2300      	movs	r3, #0
    cb7a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cb7c:	e2e3      	b.n	d146 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb7e:	2306      	movs	r3, #6
    cb80:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cb82:	68bb      	ldr	r3, [r7, #8]
    cb84:	781b      	ldrb	r3, [r3, #0]
    cb86:	2b25      	cmp	r3, #37	; 0x25
    cb88:	d01f      	beq.n	cbca <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb8a:	68fb      	ldr	r3, [r7, #12]
    cb8c:	2b00      	cmp	r3, #0
    cb8e:	d015      	beq.n	cbbc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb90:	68bb      	ldr	r3, [r7, #8]
    cb92:	781b      	ldrb	r3, [r3, #0]
    cb94:	2b0a      	cmp	r3, #10
    cb96:	d10b      	bne.n	cbb0 <am_util_stdio_vsprintf+0x48>
    cb98:	4bb1      	ldr	r3, [pc, #708]	; (ce60 <am_util_stdio_vsprintf+0x2f8>)
    cb9a:	781b      	ldrb	r3, [r3, #0]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d007      	beq.n	cbb0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cba0:	68fb      	ldr	r3, [r7, #12]
    cba2:	1c5a      	adds	r2, r3, #1
    cba4:	60fa      	str	r2, [r7, #12]
    cba6:	220d      	movs	r2, #13
    cba8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbac:	3301      	adds	r3, #1
    cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cbb0:	68fb      	ldr	r3, [r7, #12]
    cbb2:	1c5a      	adds	r2, r3, #1
    cbb4:	60fa      	str	r2, [r7, #12]
    cbb6:	68ba      	ldr	r2, [r7, #8]
    cbb8:	7812      	ldrb	r2, [r2, #0]
    cbba:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cbbc:	68bb      	ldr	r3, [r7, #8]
    cbbe:	3301      	adds	r3, #1
    cbc0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbc4:	3301      	adds	r3, #1
    cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cbc8:	e2bd      	b.n	d146 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbca:	68bb      	ldr	r3, [r7, #8]
    cbcc:	3301      	adds	r3, #1
    cbce:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cbd0:	2300      	movs	r3, #0
    cbd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cbd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cbda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cbde:	2320      	movs	r3, #32
    cbe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cbe4:	68bb      	ldr	r3, [r7, #8]
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	2b30      	cmp	r3, #48	; 0x30
    cbea:	d105      	bne.n	cbf8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cbec:	2330      	movs	r3, #48	; 0x30
    cbee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cbf2:	68bb      	ldr	r3, [r7, #8]
    cbf4:	3301      	adds	r3, #1
    cbf6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cbf8:	f107 0310 	add.w	r3, r7, #16
    cbfc:	4619      	mov	r1, r3
    cbfe:	68b8      	ldr	r0, [r7, #8]
    cc00:	f7ff fd85 	bl	c70e <decstr_to_int>
    cc04:	4603      	mov	r3, r0
    cc06:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cc08:	693b      	ldr	r3, [r7, #16]
    cc0a:	68ba      	ldr	r2, [r7, #8]
    cc0c:	4413      	add	r3, r2
    cc0e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cc10:	68bb      	ldr	r3, [r7, #8]
    cc12:	781b      	ldrb	r3, [r3, #0]
    cc14:	2b73      	cmp	r3, #115	; 0x73
    cc16:	d005      	beq.n	cc24 <am_util_stdio_vsprintf+0xbc>
    cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	da02      	bge.n	cc24 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc20:	425b      	negs	r3, r3
    cc22:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc24:	68bb      	ldr	r3, [r7, #8]
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	2b2e      	cmp	r3, #46	; 0x2e
    cc2a:	d10e      	bne.n	cc4a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cc2c:	68bb      	ldr	r3, [r7, #8]
    cc2e:	3301      	adds	r3, #1
    cc30:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc32:	f107 0310 	add.w	r3, r7, #16
    cc36:	4619      	mov	r1, r3
    cc38:	68b8      	ldr	r0, [r7, #8]
    cc3a:	f7ff fd68 	bl	c70e <decstr_to_int>
    cc3e:	4603      	mov	r3, r0
    cc40:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cc42:	693b      	ldr	r3, [r7, #16]
    cc44:	68ba      	ldr	r2, [r7, #8]
    cc46:	4413      	add	r3, r2
    cc48:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc4a:	68bb      	ldr	r3, [r7, #8]
    cc4c:	781b      	ldrb	r3, [r3, #0]
    cc4e:	2b6c      	cmp	r3, #108	; 0x6c
    cc50:	d10c      	bne.n	cc6c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cc52:	68bb      	ldr	r3, [r7, #8]
    cc54:	3301      	adds	r3, #1
    cc56:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc58:	68bb      	ldr	r3, [r7, #8]
    cc5a:	781b      	ldrb	r3, [r3, #0]
    cc5c:	2b6c      	cmp	r3, #108	; 0x6c
    cc5e:	d105      	bne.n	cc6c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cc60:	68bb      	ldr	r3, [r7, #8]
    cc62:	3301      	adds	r3, #1
    cc64:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cc66:	2301      	movs	r3, #1
    cc68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cc6c:	68bb      	ldr	r3, [r7, #8]
    cc6e:	781b      	ldrb	r3, [r3, #0]
    cc70:	3b46      	subs	r3, #70	; 0x46
    cc72:	2b32      	cmp	r3, #50	; 0x32
    cc74:	f200 8254 	bhi.w	d120 <am_util_stdio_vsprintf+0x5b8>
    cc78:	a201      	add	r2, pc, #4	; (adr r2, cc80 <am_util_stdio_vsprintf+0x118>)
    cc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc7e:	bf00      	nop
    cc80:	0000d0ab 	.word	0x0000d0ab
    cc84:	0000d121 	.word	0x0000d121
    cc88:	0000d121 	.word	0x0000d121
    cc8c:	0000d121 	.word	0x0000d121
    cc90:	0000d121 	.word	0x0000d121
    cc94:	0000d121 	.word	0x0000d121
    cc98:	0000d121 	.word	0x0000d121
    cc9c:	0000d121 	.word	0x0000d121
    cca0:	0000d121 	.word	0x0000d121
    cca4:	0000d121 	.word	0x0000d121
    cca8:	0000d121 	.word	0x0000d121
    ccac:	0000d121 	.word	0x0000d121
    ccb0:	0000d121 	.word	0x0000d121
    ccb4:	0000d121 	.word	0x0000d121
    ccb8:	0000d121 	.word	0x0000d121
    ccbc:	0000d121 	.word	0x0000d121
    ccc0:	0000d121 	.word	0x0000d121
    ccc4:	0000d121 	.word	0x0000d121
    ccc8:	0000ce47 	.word	0x0000ce47
    cccc:	0000d121 	.word	0x0000d121
    ccd0:	0000d121 	.word	0x0000d121
    ccd4:	0000d121 	.word	0x0000d121
    ccd8:	0000d121 	.word	0x0000d121
    ccdc:	0000d121 	.word	0x0000d121
    cce0:	0000d121 	.word	0x0000d121
    cce4:	0000d121 	.word	0x0000d121
    cce8:	0000d121 	.word	0x0000d121
    ccec:	0000d121 	.word	0x0000d121
    ccf0:	0000d121 	.word	0x0000d121
    ccf4:	0000cd4d 	.word	0x0000cd4d
    ccf8:	0000cf73 	.word	0x0000cf73
    ccfc:	0000d121 	.word	0x0000d121
    cd00:	0000d0ab 	.word	0x0000d0ab
    cd04:	0000d121 	.word	0x0000d121
    cd08:	0000d121 	.word	0x0000d121
    cd0c:	0000cf73 	.word	0x0000cf73
    cd10:	0000d121 	.word	0x0000d121
    cd14:	0000d121 	.word	0x0000d121
    cd18:	0000d121 	.word	0x0000d121
    cd1c:	0000d121 	.word	0x0000d121
    cd20:	0000d121 	.word	0x0000d121
    cd24:	0000d121 	.word	0x0000d121
    cd28:	0000d121 	.word	0x0000d121
    cd2c:	0000d121 	.word	0x0000d121
    cd30:	0000d121 	.word	0x0000d121
    cd34:	0000cd73 	.word	0x0000cd73
    cd38:	0000d121 	.word	0x0000d121
    cd3c:	0000cee1 	.word	0x0000cee1
    cd40:	0000d121 	.word	0x0000d121
    cd44:	0000d121 	.word	0x0000d121
    cd48:	0000ce41 	.word	0x0000ce41
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	1d1a      	adds	r2, r3, #4
    cd50:	607a      	str	r2, [r7, #4]
    cd52:	681b      	ldr	r3, [r3, #0]
    cd54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cd58:	68fb      	ldr	r3, [r7, #12]
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	d005      	beq.n	cd6a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	1c5a      	adds	r2, r3, #1
    cd62:	60fa      	str	r2, [r7, #12]
    cd64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cd68:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd6c:	3301      	adds	r3, #1
    cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cd70:	e1e6      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd72:	687b      	ldr	r3, [r7, #4]
    cd74:	1d1a      	adds	r2, r3, #4
    cd76:	607a      	str	r2, [r7, #4]
    cd78:	681b      	ldr	r3, [r3, #0]
    cd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cd7e:	f7ff fdb4 	bl	c8ea <simple_strlen>
    cd82:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd86:	2b00      	cmp	r3, #0
    cd88:	dd2e      	ble.n	cde8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd8e:	429a      	cmp	r2, r3
    cd90:	d22a      	bcs.n	cde8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd92:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd96:	1ad3      	subs	r3, r2, r3
    cd98:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cd9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cda0:	4619      	mov	r1, r3
    cda2:	68f8      	ldr	r0, [r7, #12]
    cda4:	f7ff fdbc 	bl	c920 <padbuffer>
    cda8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cdaa:	68fb      	ldr	r3, [r7, #12]
    cdac:	2b00      	cmp	r3, #0
    cdae:	d001      	beq.n	cdb4 <am_util_stdio_vsprintf+0x24c>
    cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdb2:	e000      	b.n	cdb6 <am_util_stdio_vsprintf+0x24e>
    cdb4:	2300      	movs	r3, #0
    cdb6:	68fa      	ldr	r2, [r7, #12]
    cdb8:	4413      	add	r3, r2
    cdba:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cdc0:	4413      	add	r3, r2
    cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cdc4:	2300      	movs	r3, #0
    cdc6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cdc8:	e00e      	b.n	cde8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cdca:	68fb      	ldr	r3, [r7, #12]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d005      	beq.n	cddc <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cdd0:	68fb      	ldr	r3, [r7, #12]
    cdd2:	1c5a      	adds	r2, r3, #1
    cdd4:	60fa      	str	r2, [r7, #12]
    cdd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cdd8:	7812      	ldrb	r2, [r2, #0]
    cdda:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdde:	3301      	adds	r3, #1
    cde0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cde4:	3301      	adds	r3, #1
    cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cde8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdea:	781b      	ldrb	r3, [r3, #0]
    cdec:	2b00      	cmp	r3, #0
    cdee:	d1ec      	bne.n	cdca <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	f000 81a1 	beq.w	d13a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdfa:	425b      	negs	r3, r3
    cdfc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce02:	429a      	cmp	r2, r3
    ce04:	f080 8199 	bcs.w	d13a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce08:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce0c:	1ad3      	subs	r3, r2, r3
    ce0e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce14:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce16:	4619      	mov	r1, r3
    ce18:	68f8      	ldr	r0, [r7, #12]
    ce1a:	f7ff fd81 	bl	c920 <padbuffer>
    ce1e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ce20:	68fb      	ldr	r3, [r7, #12]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d001      	beq.n	ce2a <am_util_stdio_vsprintf+0x2c2>
    ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce28:	e000      	b.n	ce2c <am_util_stdio_vsprintf+0x2c4>
    ce2a:	2300      	movs	r3, #0
    ce2c:	68fa      	ldr	r2, [r7, #12]
    ce2e:	4413      	add	r3, r2
    ce30:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce36:	4413      	add	r3, r2
    ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce3a:	2300      	movs	r3, #0
    ce3c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    ce3e:	e17c      	b.n	d13a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    ce40:	2301      	movs	r3, #1
    ce42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d00a      	beq.n	ce64 <am_util_stdio_vsprintf+0x2fc>
    ce4e:	687b      	ldr	r3, [r7, #4]
    ce50:	3307      	adds	r3, #7
    ce52:	f023 0307 	bic.w	r3, r3, #7
    ce56:	f103 0208 	add.w	r2, r3, #8
    ce5a:	607a      	str	r2, [r7, #4]
    ce5c:	cb18      	ldmia	r3, {r3, r4}
    ce5e:	e007      	b.n	ce70 <am_util_stdio_vsprintf+0x308>
    ce60:	10001138 	.word	0x10001138
                                      va_arg(pArgs, uint32_t);
    ce64:	687b      	ldr	r3, [r7, #4]
    ce66:	1d1a      	adds	r2, r3, #4
    ce68:	607a      	str	r2, [r7, #4]
    ce6a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce6c:	f04f 0400 	mov.w	r4, #0
    ce70:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce76:	2b00      	cmp	r3, #0
    ce78:	d01e      	beq.n	ceb8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ce7e:	f7ff fc22 	bl	c6c6 <ndigits_in_hex>
    ce82:	4602      	mov	r2, r0
    ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce86:	1a9b      	subs	r3, r3, r2
    ce88:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce90:	4619      	mov	r1, r3
    ce92:	68f8      	ldr	r0, [r7, #12]
    ce94:	f7ff fd44 	bl	c920 <padbuffer>
    ce98:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    ce9a:	68fb      	ldr	r3, [r7, #12]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d001      	beq.n	cea4 <am_util_stdio_vsprintf+0x33c>
    cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cea2:	e000      	b.n	cea6 <am_util_stdio_vsprintf+0x33e>
    cea4:	2300      	movs	r3, #0
    cea6:	68fa      	ldr	r2, [r7, #12]
    cea8:	4413      	add	r3, r2
    ceaa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ceb0:	4413      	add	r3, r2
    ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    ceb4:	2300      	movs	r3, #0
    ceb6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ceb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cebc:	68fa      	ldr	r2, [r7, #12]
    cebe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cec2:	f7ff fcb2 	bl	c82a <uint64_to_hexstr>
    cec6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cec8:	68fb      	ldr	r3, [r7, #12]
    ceca:	2b00      	cmp	r3, #0
    cecc:	d003      	beq.n	ced6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ced0:	68fa      	ldr	r2, [r7, #12]
    ced2:	4413      	add	r3, r2
    ced4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ced8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ceda:	4413      	add	r3, r2
    cedc:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cede:	e12f      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cee4:	2b00      	cmp	r3, #0
    cee6:	d008      	beq.n	cefa <am_util_stdio_vsprintf+0x392>
    cee8:	687b      	ldr	r3, [r7, #4]
    ceea:	3307      	adds	r3, #7
    ceec:	f023 0307 	bic.w	r3, r3, #7
    cef0:	f103 0208 	add.w	r2, r3, #8
    cef4:	607a      	str	r2, [r7, #4]
    cef6:	cb18      	ldmia	r3, {r3, r4}
    cef8:	e005      	b.n	cf06 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    cefa:	687b      	ldr	r3, [r7, #4]
    cefc:	1d1a      	adds	r2, r3, #4
    cefe:	607a      	str	r2, [r7, #4]
    cf00:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf02:	f04f 0400 	mov.w	r4, #0
    cf06:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d01e      	beq.n	cf4e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cf10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf14:	f7ff fb99 	bl	c64a <ndigits_in_u64>
    cf18:	4602      	mov	r2, r0
    cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf1c:	1a9b      	subs	r3, r3, r2
    cf1e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf24:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf26:	4619      	mov	r1, r3
    cf28:	68f8      	ldr	r0, [r7, #12]
    cf2a:	f7ff fcf9 	bl	c920 <padbuffer>
    cf2e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf30:	68fb      	ldr	r3, [r7, #12]
    cf32:	2b00      	cmp	r3, #0
    cf34:	d001      	beq.n	cf3a <am_util_stdio_vsprintf+0x3d2>
    cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf38:	e000      	b.n	cf3c <am_util_stdio_vsprintf+0x3d4>
    cf3a:	2300      	movs	r3, #0
    cf3c:	68fa      	ldr	r2, [r7, #12]
    cf3e:	4413      	add	r3, r2
    cf40:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf46:	4413      	add	r3, r2
    cf48:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf4a:	2300      	movs	r3, #0
    cf4c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf4e:	68fa      	ldr	r2, [r7, #12]
    cf50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf54:	f7ff fc21 	bl	c79a <uint64_to_str>
    cf58:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf5a:	68fb      	ldr	r3, [r7, #12]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d003      	beq.n	cf68 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf62:	68fa      	ldr	r2, [r7, #12]
    cf64:	4413      	add	r3, r2
    cf66:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf6c:	4413      	add	r3, r2
    cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf70:	e0e6      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf76:	2b00      	cmp	r3, #0
    cf78:	d008      	beq.n	cf8c <am_util_stdio_vsprintf+0x424>
    cf7a:	687b      	ldr	r3, [r7, #4]
    cf7c:	3307      	adds	r3, #7
    cf7e:	f023 0307 	bic.w	r3, r3, #7
    cf82:	f103 0208 	add.w	r2, r3, #8
    cf86:	607a      	str	r2, [r7, #4]
    cf88:	cb18      	ldmia	r3, {r3, r4}
    cf8a:	e005      	b.n	cf98 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	1d1a      	adds	r2, r3, #4
    cf90:	607a      	str	r2, [r7, #4]
    cf92:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf94:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cf98:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf9c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	f174 0300 	sbcs.w	r3, r4, #0
    cfa6:	da0a      	bge.n	cfbe <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cfa8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfac:	425b      	negs	r3, r3
    cfae:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cfb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    cfb6:	2301      	movs	r3, #1
    cfb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    cfbc:	e006      	b.n	cfcc <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    cfbe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfc2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    cfc6:	2300      	movs	r3, #0
    cfc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d04a      	beq.n	d068 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cfd2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    cfd6:	4618      	mov	r0, r3
    cfd8:	4621      	mov	r1, r4
    cfda:	f7ff fb57 	bl	c68c <ndigits_in_i64>
    cfde:	4602      	mov	r2, r0
    cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfe2:	1a9b      	subs	r3, r3, r2
    cfe4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    cfe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    cfea:	2b00      	cmp	r3, #0
    cfec:	d011      	beq.n	d012 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cff0:	3b01      	subs	r3, #1
    cff2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cff8:	2b30      	cmp	r3, #48	; 0x30
    cffa:	d10a      	bne.n	d012 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cffc:	68fb      	ldr	r3, [r7, #12]
    cffe:	2b00      	cmp	r3, #0
    d000:	d004      	beq.n	d00c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	1c5a      	adds	r2, r3, #1
    d006:	60fa      	str	r2, [r7, #12]
    d008:	222d      	movs	r2, #45	; 0x2d
    d00a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d00e:	3301      	adds	r3, #1
    d010:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d016:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d018:	4619      	mov	r1, r3
    d01a:	68f8      	ldr	r0, [r7, #12]
    d01c:	f7ff fc80 	bl	c920 <padbuffer>
    d020:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d022:	68fb      	ldr	r3, [r7, #12]
    d024:	2b00      	cmp	r3, #0
    d026:	d001      	beq.n	d02c <am_util_stdio_vsprintf+0x4c4>
    d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d02a:	e000      	b.n	d02e <am_util_stdio_vsprintf+0x4c6>
    d02c:	2300      	movs	r3, #0
    d02e:	68fa      	ldr	r2, [r7, #12]
    d030:	4413      	add	r3, r2
    d032:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d038:	4413      	add	r3, r2
    d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d03c:	2300      	movs	r3, #0
    d03e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d040:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d044:	2b00      	cmp	r3, #0
    d046:	d01e      	beq.n	d086 <am_util_stdio_vsprintf+0x51e>
    d048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d04c:	2b20      	cmp	r3, #32
    d04e:	d11a      	bne.n	d086 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d050:	68fb      	ldr	r3, [r7, #12]
    d052:	2b00      	cmp	r3, #0
    d054:	d004      	beq.n	d060 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d056:	68fb      	ldr	r3, [r7, #12]
    d058:	1c5a      	adds	r2, r3, #1
    d05a:	60fa      	str	r2, [r7, #12]
    d05c:	222d      	movs	r2, #45	; 0x2d
    d05e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d062:	3301      	adds	r3, #1
    d064:	63fb      	str	r3, [r7, #60]	; 0x3c
    d066:	e00e      	b.n	d086 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d068:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d06c:	2b00      	cmp	r3, #0
    d06e:	d00a      	beq.n	d086 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d070:	68fb      	ldr	r3, [r7, #12]
    d072:	2b00      	cmp	r3, #0
    d074:	d004      	beq.n	d080 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d076:	68fb      	ldr	r3, [r7, #12]
    d078:	1c5a      	adds	r2, r3, #1
    d07a:	60fa      	str	r2, [r7, #12]
    d07c:	222d      	movs	r2, #45	; 0x2d
    d07e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d082:	3301      	adds	r3, #1
    d084:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d086:	68fa      	ldr	r2, [r7, #12]
    d088:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d08c:	f7ff fb85 	bl	c79a <uint64_to_str>
    d090:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d092:	68fb      	ldr	r3, [r7, #12]
    d094:	2b00      	cmp	r3, #0
    d096:	d003      	beq.n	d0a0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d09a:	68fa      	ldr	r2, [r7, #12]
    d09c:	4413      	add	r3, r2
    d09e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0a4:	4413      	add	r3, r2
    d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0a8:	e04a      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d0aa:	68fb      	ldr	r3, [r7, #12]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d046      	beq.n	d13e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d0b0:	687b      	ldr	r3, [r7, #4]
    d0b2:	3307      	adds	r3, #7
    d0b4:	f023 0307 	bic.w	r3, r3, #7
    d0b8:	f103 0208 	add.w	r2, r3, #8
    d0bc:	607a      	str	r2, [r7, #4]
    d0be:	cb18      	ldmia	r3, {r3, r4}
    d0c0:	4618      	mov	r0, r3
    d0c2:	4621      	mov	r1, r4
    d0c4:	f7ff f81c 	bl	c100 <__aeabi_d2f>
    d0c8:	4603      	mov	r3, r0
    d0ca:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0cc:	68fb      	ldr	r3, [r7, #12]
    d0ce:	2214      	movs	r2, #20
    d0d0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d0d4:	68f9      	ldr	r1, [r7, #12]
    d0d6:	6978      	ldr	r0, [r7, #20]
    d0d8:	f7ff fc48 	bl	c96c <ftoa>
    d0dc:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	da14      	bge.n	d10e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    d0ea:	d102      	bne.n	d0f2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d0ec:	4b1e      	ldr	r3, [pc, #120]	; (d168 <am_util_stdio_vsprintf+0x600>)
    d0ee:	62bb      	str	r3, [r7, #40]	; 0x28
    d0f0:	e008      	b.n	d104 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0f4:	f113 0f02 	cmn.w	r3, #2
    d0f8:	d102      	bne.n	d100 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d0fa:	4b1c      	ldr	r3, [pc, #112]	; (d16c <am_util_stdio_vsprintf+0x604>)
    d0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    d0fe:	e001      	b.n	d104 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d100:	4b1b      	ldr	r3, [pc, #108]	; (d170 <am_util_stdio_vsprintf+0x608>)
    d102:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d104:	68fb      	ldr	r3, [r7, #12]
    d106:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d108:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d10a:	2303      	movs	r3, #3
    d10c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d112:	4413      	add	r3, r2
    d114:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d118:	68fa      	ldr	r2, [r7, #12]
    d11a:	4413      	add	r3, r2
    d11c:	60fb      	str	r3, [r7, #12]
                }
                break;
    d11e:	e00e      	b.n	d13e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d120:	68fb      	ldr	r3, [r7, #12]
    d122:	2b00      	cmp	r3, #0
    d124:	d005      	beq.n	d132 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d126:	68fb      	ldr	r3, [r7, #12]
    d128:	1c5a      	adds	r2, r3, #1
    d12a:	60fa      	str	r2, [r7, #12]
    d12c:	68ba      	ldr	r2, [r7, #8]
    d12e:	7812      	ldrb	r2, [r2, #0]
    d130:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d134:	3301      	adds	r3, #1
    d136:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d138:	e002      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>
                break;
    d13a:	bf00      	nop
    d13c:	e000      	b.n	d140 <am_util_stdio_vsprintf+0x5d8>
                break;
    d13e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d140:	68bb      	ldr	r3, [r7, #8]
    d142:	3301      	adds	r3, #1
    d144:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d146:	68bb      	ldr	r3, [r7, #8]
    d148:	781b      	ldrb	r3, [r3, #0]
    d14a:	2b00      	cmp	r3, #0
    d14c:	f47f ad17 	bne.w	cb7e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d150:	68fb      	ldr	r3, [r7, #12]
    d152:	2b00      	cmp	r3, #0
    d154:	d002      	beq.n	d15c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	2200      	movs	r2, #0
    d15a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d15e:	4618      	mov	r0, r3
    d160:	3754      	adds	r7, #84	; 0x54
    d162:	46bd      	mov	sp, r7
    d164:	bd90      	pop	{r4, r7, pc}
    d166:	bf00      	nop
    d168:	00302e30 	.word	0x00302e30
    d16c:	00232e23 	.word	0x00232e23
    d170:	003f2e3f 	.word	0x003f2e3f

0000d174 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d174:	b40f      	push	{r0, r1, r2, r3}
    d176:	b580      	push	{r7, lr}
    d178:	b082      	sub	sp, #8
    d17a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d17c:	f107 0314 	add.w	r3, r7, #20
    d180:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d182:	683a      	ldr	r2, [r7, #0]
    d184:	6939      	ldr	r1, [r7, #16]
    d186:	4808      	ldr	r0, [pc, #32]	; (d1a8 <am_util_stdio_printf+0x34>)
    d188:	f7ff fcee 	bl	cb68 <am_util_stdio_vsprintf>
    d18c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d18e:	4b07      	ldr	r3, [pc, #28]	; (d1ac <am_util_stdio_printf+0x38>)
    d190:	681b      	ldr	r3, [r3, #0]
    d192:	4805      	ldr	r0, [pc, #20]	; (d1a8 <am_util_stdio_printf+0x34>)
    d194:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d196:	687b      	ldr	r3, [r7, #4]
}
    d198:	4618      	mov	r0, r3
    d19a:	3708      	adds	r7, #8
    d19c:	46bd      	mov	sp, r7
    d19e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d1a2:	b004      	add	sp, #16
    d1a4:	4770      	bx	lr
    d1a6:	bf00      	nop
    d1a8:	10001038 	.word	0x10001038
    d1ac:	10001944 	.word	0x10001944

0000d1b0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d1b0:	b580      	push	{r7, lr}
    d1b2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d1b4:	4802      	ldr	r0, [pc, #8]	; (d1c0 <am_util_stdio_terminal_clear+0x10>)
    d1b6:	f7ff ffdd 	bl	d174 <am_util_stdio_printf>
}
    d1ba:	bf00      	nop
    d1bc:	bd80      	pop	{r7, pc}
    d1be:	bf00      	nop
    d1c0:	0000f0f8 	.word	0x0000f0f8

0000d1c4 <am_bsp_uart_string_print>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    d1c4:	b510      	push	{r4, lr}
    d1c6:	b086      	sub	sp, #24
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcString[ui32StrLen] != 0)
    d1c8:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    d1ca:	2300      	movs	r3, #0
    d1cc:	9300      	str	r3, [sp, #0]
    while (pcString[ui32StrLen] != 0)
    d1ce:	b134      	cbz	r4, d1de <am_bsp_uart_string_print+0x1a>
    d1d0:	461c      	mov	r4, r3
    d1d2:	4601      	mov	r1, r0
    d1d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        ui32StrLen++;
    d1d8:	3401      	adds	r4, #1
    while (pcString[ui32StrLen] != 0)
    d1da:	2a00      	cmp	r2, #0
    d1dc:	d1fa      	bne.n	d1d4 <am_bsp_uart_string_print+0x10>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d1de:	4b0a      	ldr	r3, [pc, #40]	; (d208 <am_bsp_uart_string_print+0x44>)
    const am_hal_uart_transfer_t sUartWrite =
    d1e0:	9002      	str	r0, [sp, #8]
    d1e2:	2200      	movs	r2, #0
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d1e4:	6818      	ldr	r0, [r3, #0]
    const am_hal_uart_transfer_t sUartWrite =
    d1e6:	9403      	str	r4, [sp, #12]
    d1e8:	f04f 33ff 	mov.w	r3, #4294967295
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d1ec:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    d1ee:	9201      	str	r2, [sp, #4]
    d1f0:	9304      	str	r3, [sp, #16]
    d1f2:	f8cd d014 	str.w	sp, [sp, #20]
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d1f6:	f001 f843 	bl	e280 <am_hal_uart_transfer>

    if (ui32BytesWritten != ui32StrLen)
    d1fa:	9800      	ldr	r0, [sp, #0]
    d1fc:	42a0      	cmp	r0, r4
    d1fe:	d000      	beq.n	d202 <am_bsp_uart_string_print+0x3e>
    d200:	e7fe      	b.n	d200 <am_bsp_uart_string_print+0x3c>
        //
        // Couldn't send the whole string!!
        //
        while(1);
    }
} // am_bsp_uart_string_print()
    d202:	b006      	add	sp, #24
    d204:	bd10      	pop	{r4, pc}
    d206:	bf00      	nop
    d208:	1000113c 	.word	0x1000113c

0000d20c <am_bsp_low_power_init>:
{
    d20c:	b508      	push	{r3, lr}
    am_hal_itm_disable();
    d20e:	f000 fc29 	bl	da64 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d212:	2000      	movs	r0, #0
    d214:	f7ff f92a 	bl	c46c <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d218:	4b08      	ldr	r3, [pc, #32]	; (d23c <am_bsp_low_power_init+0x30>)
    d21a:	2029      	movs	r0, #41	; 0x29
    d21c:	6819      	ldr	r1, [r3, #0]
    d21e:	f000 fab5 	bl	d78c <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d222:	f000 fd7b 	bl	dd1c <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d226:	2001      	movs	r0, #1
    d228:	f000 fe06 	bl	de38 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d22c:	2100      	movs	r1, #0
    d22e:	2003      	movs	r0, #3
    d230:	f000 f902 	bl	d438 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d238:	f000 be0a 	b.w	de50 <am_hal_rtc_osc_disable>
    d23c:	0000f144 	.word	0x0000f144

0000d240 <am_bsp_debug_printf_enable>:
{
    d240:	b510      	push	{r4, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d242:	4a2d      	ldr	r2, [pc, #180]	; (d2f8 <am_bsp_debug_printf_enable+0xb8>)
    d244:	6813      	ldr	r3, [r2, #0]
    d246:	2b01      	cmp	r3, #1
{
    d248:	b086      	sub	sp, #24
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d24a:	d028      	beq.n	d29e <am_bsp_debug_printf_enable+0x5e>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d24c:	2b02      	cmp	r3, #2
    d24e:	d037      	beq.n	d2c0 <am_bsp_debug_printf_enable+0x80>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_BUFFERED_UART0)
    d250:	2b03      	cmp	r3, #3
    d252:	d001      	beq.n	d258 <am_bsp_debug_printf_enable+0x18>
} // am_bsp_debug_printf_enable()
    d254:	b006      	add	sp, #24
    d256:	bd10      	pop	{r4, pc}
    //
    // Initialize, power up, and configure the communication UART. Use the
    // custom configuration if it was provided. Otherwise, just use the default
    // configuration.
    //
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d258:	4c28      	ldr	r4, [pc, #160]	; (d2fc <am_bsp_debug_printf_enable+0xbc>)
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d25a:	2302      	movs	r3, #2
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d25c:	4621      	mov	r1, r4
    d25e:	2000      	movs	r0, #0
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d260:	6013      	str	r3, [r2, #0]
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d262:	f000 fe75 	bl	df50 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    d266:	2200      	movs	r2, #0
    d268:	4611      	mov	r1, r2
    d26a:	6820      	ldr	r0, [r4, #0]
    d26c:	f000 feac 	bl	dfc8 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartBufferedConfig);
    d270:	6820      	ldr	r0, [r4, #0]
    d272:	4923      	ldr	r1, [pc, #140]	; (d300 <am_bsp_debug_printf_enable+0xc0>)
    d274:	f000 ff1a 	bl	e0ac <am_hal_uart_configure>

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    d278:	4922      	ldr	r1, [pc, #136]	; (d304 <am_bsp_debug_printf_enable+0xc4>)
    d27a:	2027      	movs	r0, #39	; 0x27
    d27c:	6809      	ldr	r1, [r1, #0]
    d27e:	f000 fa85 	bl	d78c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d282:	4a21      	ldr	r2, [pc, #132]	; (d308 <am_bsp_debug_printf_enable+0xc8>)
    d284:	2028      	movs	r0, #40	; 0x28
    d286:	6811      	ldr	r1, [r2, #0]
    d288:	f000 fa80 	bl	d78c <am_hal_gpio_pinconfig>

    //
    // Register the BSP print function to the STDIO driver.
    //
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d28c:	481f      	ldr	r0, [pc, #124]	; (d30c <am_bsp_debug_printf_enable+0xcc>)
    d28e:	f7ff f8ed 	bl	c46c <am_util_stdio_printf_init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d292:	481f      	ldr	r0, [pc, #124]	; (d310 <am_bsp_debug_printf_enable+0xd0>)
    d294:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    d298:	6004      	str	r4, [r0, #0]
} // am_bsp_debug_printf_enable()
    d29a:	b006      	add	sp, #24
    d29c:	bd10      	pop	{r4, pc}
    am_hal_itm_enable();
    d29e:	f000 fbc3 	bl	da28 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d2a2:	a806      	add	r0, sp, #24
    d2a4:	4a1b      	ldr	r2, [pc, #108]	; (d314 <am_bsp_debug_printf_enable+0xd4>)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d2a6:	4c1c      	ldr	r4, [pc, #112]	; (d318 <am_bsp_debug_printf_enable+0xd8>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d2a8:	f840 2d14 	str.w	r2, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d2ac:	f000 fdfe 	bl	deac <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d2b0:	6821      	ldr	r1, [r4, #0]
    d2b2:	2029      	movs	r0, #41	; 0x29
    d2b4:	f000 fa6a 	bl	d78c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d2b8:	4818      	ldr	r0, [pc, #96]	; (d31c <am_bsp_debug_printf_enable+0xdc>)
    d2ba:	f7ff f8d7 	bl	c46c <am_util_stdio_printf_init>
    d2be:	e7c9      	b.n	d254 <am_bsp_debug_printf_enable+0x14>
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d2c0:	4c0e      	ldr	r4, [pc, #56]	; (d2fc <am_bsp_debug_printf_enable+0xbc>)
    d2c2:	2000      	movs	r0, #0
    d2c4:	4621      	mov	r1, r4
    d2c6:	f000 fe43 	bl	df50 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    d2ca:	2200      	movs	r2, #0
    d2cc:	4611      	mov	r1, r2
    d2ce:	6820      	ldr	r0, [r4, #0]
    d2d0:	f000 fe7a 	bl	dfc8 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d2d4:	6820      	ldr	r0, [r4, #0]
    d2d6:	4912      	ldr	r1, [pc, #72]	; (d320 <am_bsp_debug_printf_enable+0xe0>)
    d2d8:	f000 fee8 	bl	e0ac <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    d2dc:	4b09      	ldr	r3, [pc, #36]	; (d304 <am_bsp_debug_printf_enable+0xc4>)
    d2de:	2027      	movs	r0, #39	; 0x27
    d2e0:	6819      	ldr	r1, [r3, #0]
    d2e2:	f000 fa53 	bl	d78c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d2e6:	4908      	ldr	r1, [pc, #32]	; (d308 <am_bsp_debug_printf_enable+0xc8>)
    d2e8:	2028      	movs	r0, #40	; 0x28
    d2ea:	6809      	ldr	r1, [r1, #0]
    d2ec:	f000 fa4e 	bl	d78c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d2f0:	4806      	ldr	r0, [pc, #24]	; (d30c <am_bsp_debug_printf_enable+0xcc>)
    d2f2:	f7ff f8bb 	bl	c46c <am_util_stdio_printf_init>
    d2f6:	e7ad      	b.n	d254 <am_bsp_debug_printf_enable+0x14>
    d2f8:	10001140 	.word	0x10001140
    d2fc:	1000113c 	.word	0x1000113c
    d300:	10001008 	.word	0x10001008
    d304:	0000f138 	.word	0x0000f138
    d308:	0000f134 	.word	0x0000f134
    d30c:	0000d1c5 	.word	0x0000d1c5
    d310:	e000e100 	.word	0xe000e100
    d314:	000f4240 	.word	0x000f4240
    d318:	0000f13c 	.word	0x0000f13c
    d31c:	0000db0d 	.word	0x0000db0d
    d320:	0000f10c 	.word	0x0000f10c

0000d324 <am_bsp_debug_printf_disable>:
{
    d324:	b538      	push	{r3, r4, r5, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d326:	4b17      	ldr	r3, [pc, #92]	; (d384 <am_bsp_debug_printf_disable+0x60>)
    d328:	681c      	ldr	r4, [r3, #0]
    d32a:	2c01      	cmp	r4, #1
    d32c:	d01d      	beq.n	d36a <am_bsp_debug_printf_disable+0x46>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d32e:	2c02      	cmp	r4, #2
    d330:	d000      	beq.n	d334 <am_bsp_debug_printf_disable+0x10>
    d332:	bd38      	pop	{r3, r4, r5, pc}
    am_hal_uart_tx_flush(g_sCOMUART);
    d334:	4d14      	ldr	r5, [pc, #80]	; (d388 <am_bsp_debug_printf_disable+0x64>)
    d336:	6828      	ldr	r0, [r5, #0]
    d338:	f001 fc26 	bl	eb88 <am_hal_uart_tx_flush>
    am_util_stdio_printf_init(0);
    d33c:	2000      	movs	r0, #0
    d33e:	f7ff f895 	bl	c46c <am_util_stdio_printf_init>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d342:	4621      	mov	r1, r4
    d344:	2200      	movs	r2, #0
    d346:	6828      	ldr	r0, [r5, #0]
    d348:	f000 fe3e 	bl	dfc8 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d34c:	6828      	ldr	r0, [r5, #0]
    d34e:	f000 fe27 	bl	dfa0 <am_hal_uart_deinitialize>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d352:	480e      	ldr	r0, [pc, #56]	; (d38c <am_bsp_debug_printf_disable+0x68>)
    d354:	6804      	ldr	r4, [r0, #0]
    d356:	2027      	movs	r0, #39	; 0x27
    d358:	4621      	mov	r1, r4
    d35a:	f000 fa17 	bl	d78c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d35e:	4621      	mov	r1, r4
    d360:	2028      	movs	r0, #40	; 0x28
} // am_bsp_debug_printf_disable()
    d362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d366:	f000 ba11 	b.w	d78c <am_hal_gpio_pinconfig>
    am_hal_itm_disable();
    d36a:	f000 fb7b 	bl	da64 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d36e:	2000      	movs	r0, #0
    d370:	f7ff f87c 	bl	c46c <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d374:	4905      	ldr	r1, [pc, #20]	; (d38c <am_bsp_debug_printf_disable+0x68>)
    d376:	2029      	movs	r0, #41	; 0x29
    d378:	6809      	ldr	r1, [r1, #0]
} // am_bsp_debug_printf_disable()
    d37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d37e:	f000 ba05 	b.w	d78c <am_hal_gpio_pinconfig>
    d382:	bf00      	nop
    d384:	10001140 	.word	0x10001140
    d388:	1000113c 	.word	0x1000113c
    d38c:	0000f144 	.word	0x0000f144

0000d390 <am_bsp_itm_printf_enable>:
{
    d390:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d392:	4b0b      	ldr	r3, [pc, #44]	; (d3c0 <am_bsp_itm_printf_enable+0x30>)
{
    d394:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d396:	2201      	movs	r2, #1
    d398:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d39a:	f000 fb45 	bl	da28 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d39e:	a806      	add	r0, sp, #24
    d3a0:	4908      	ldr	r1, [pc, #32]	; (d3c4 <am_bsp_itm_printf_enable+0x34>)
    d3a2:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d3a6:	f000 fd81 	bl	deac <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d3aa:	4b07      	ldr	r3, [pc, #28]	; (d3c8 <am_bsp_itm_printf_enable+0x38>)
    d3ac:	2029      	movs	r0, #41	; 0x29
    d3ae:	6819      	ldr	r1, [r3, #0]
    d3b0:	f000 f9ec 	bl	d78c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d3b4:	4805      	ldr	r0, [pc, #20]	; (d3cc <am_bsp_itm_printf_enable+0x3c>)
    d3b6:	f7ff f859 	bl	c46c <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d3ba:	b007      	add	sp, #28
    d3bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d3c0:	10001140 	.word	0x10001140
    d3c4:	000f4240 	.word	0x000f4240
    d3c8:	0000f13c 	.word	0x0000f13c
    d3cc:	0000db0d 	.word	0x0000db0d

0000d3d0 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d3d0:	b530      	push	{r4, r5, lr}
    d3d2:	b083      	sub	sp, #12
    d3d4:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d3d6:	f000 fb1f 	bl	da18 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d3da:	4c11      	ldr	r4, [pc, #68]	; (d420 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d3dc:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d3de:	6823      	ldr	r3, [r4, #0]
    d3e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d3e4:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d3e6:	9801      	ldr	r0, [sp, #4]
    d3e8:	f000 fb1a 	bl	da20 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d3ec:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d3ee:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d3f0:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d3f2:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d3f4:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d3f6:	005d      	lsls	r5, r3, #1
    d3f8:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d3fc:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d3fe:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d400:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d404:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d406:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d40a:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d40e:	0212      	lsls	r2, r2, #8
    d410:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d414:	432b      	orrs	r3, r5
    d416:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d418:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d41a:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d41c:	b003      	add	sp, #12
    d41e:	bd30      	pop	{r4, r5, pc}
    d420:	40018000 	.word	0x40018000

0000d424 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d424:	4a03      	ldr	r2, [pc, #12]	; (d434 <am_hal_cachectrl_enable+0x10>)
    d426:	6813      	ldr	r3, [r2, #0]
    d428:	f043 0001 	orr.w	r0, r3, #1
    d42c:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d42e:	2000      	movs	r0, #0
    d430:	4770      	bx	lr
    d432:	bf00      	nop
    d434:	40018000 	.word	0x40018000

0000d438 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d438:	2809      	cmp	r0, #9
    d43a:	d852      	bhi.n	d4e2 <am_hal_clkgen_control+0xaa>
    d43c:	e8df f000 	tbb	[pc, r0]
    d440:	2b21190d 	.word	0x2b21190d
    d444:	51513d33 	.word	0x51513d33
    d448:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d44a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d44e:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d450:	6a1a      	ldr	r2, [r3, #32]
    d452:	f36f 0200 	bfc	r2, #0, #1
    d456:	621a      	str	r2, [r3, #32]
            break;
    d458:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d45a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d45e:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d460:	2047      	movs	r0, #71	; 0x47
    d462:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d466:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d46a:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d46c:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d470:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d472:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d476:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d478:	68ca      	ldr	r2, [r1, #12]
    d47a:	f022 0301 	bic.w	r3, r2, #1
    d47e:	60cb      	str	r3, [r1, #12]
            break;
    d480:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d482:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d486:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d488:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d48c:	f022 0302 	bic.w	r3, r2, #2
    d490:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d494:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d496:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d49a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d49c:	68d3      	ldr	r3, [r2, #12]
    d49e:	f043 0101 	orr.w	r1, r3, #1
    d4a2:	60d1      	str	r1, [r2, #12]
            break;
    d4a4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4a6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4aa:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d4b0:	f043 0102 	orr.w	r1, r3, #2
    d4b4:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d4b8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d4be:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4c0:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d4c2:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4c4:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d4c6:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d4c8:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d4ca:	615a      	str	r2, [r3, #20]
            break;
    d4cc:	4770      	bx	lr
            if ( pArgs == 0 )
    d4ce:	b151      	cbz	r1, d4e6 <am_hal_clkgen_control+0xae>
    d4d0:	6808      	ldr	r0, [r1, #0]
    d4d2:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d4d6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4da:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d4dc:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d4e0:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d4e2:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d4e4:	4770      	bx	lr
    d4e6:	4901      	ldr	r1, [pc, #4]	; (d4ec <am_hal_clkgen_control+0xb4>)
    d4e8:	e7f5      	b.n	d4d6 <am_hal_clkgen_control+0x9e>
    d4ea:	bf00      	nop
    d4ec:	0025b801 	.word	0x0025b801

0000d4f0 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d4f0:	b1a8      	cbz	r0, d51e <am_hal_clkgen_status_get+0x2e>
{
    d4f2:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d4f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d4f8:	490a      	ldr	r1, [pc, #40]	; (d524 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d4fa:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d4fc:	4b0a      	ldr	r3, [pc, #40]	; (d528 <am_hal_clkgen_status_get+0x38>)
    d4fe:	f014 0f01 	tst.w	r4, #1
    d502:	bf08      	it	eq
    d504:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d506:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d508:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d50a:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d50e:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d512:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d514:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d516:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d51a:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d51c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d51e:	2006      	movs	r0, #6
    d520:	4770      	bx	lr
    d522:	bf00      	nop
    d524:	02dc6c00 	.word	0x02dc6c00
    d528:	016e3600 	.word	0x016e3600

0000d52c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d52c:	4b00      	ldr	r3, [pc, #0]	; (d530 <am_hal_flash_delay+0x4>)
    d52e:	4718      	bx	r3
    d530:	0800009d 	.word	0x0800009d

0000d534 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d538:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d53c:	f8df 8248 	ldr.w	r8, [pc, #584]	; d788 <am_hal_flash_delay_status_check+0x254>
{
    d540:	4607      	mov	r7, r0
    d542:	460c      	mov	r4, r1
    d544:	4615      	mov	r5, r2
    d546:	461e      	mov	r6, r3
    d548:	f1be 0f00 	cmp.w	lr, #0
    d54c:	f000 808e 	beq.w	d66c <am_hal_flash_delay_status_check+0x138>
    d550:	f010 0907 	ands.w	r9, r0, #7
    d554:	d044      	beq.n	d5e0 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d556:	680b      	ldr	r3, [r1, #0]
    d558:	4013      	ands	r3, r2
    d55a:	429e      	cmp	r6, r3
    d55c:	f000 8083 	beq.w	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d560:	2001      	movs	r0, #1
    d562:	47c0      	blx	r8
    d564:	f1b9 0f01 	cmp.w	r9, #1
    d568:	f107 37ff 	add.w	r7, r7, #4294967295
    d56c:	d038      	beq.n	d5e0 <am_hal_flash_delay_status_check+0xac>
    d56e:	f1b9 0f02 	cmp.w	r9, #2
    d572:	d02e      	beq.n	d5d2 <am_hal_flash_delay_status_check+0x9e>
    d574:	f1b9 0f03 	cmp.w	r9, #3
    d578:	d024      	beq.n	d5c4 <am_hal_flash_delay_status_check+0x90>
    d57a:	f1b9 0f04 	cmp.w	r9, #4
    d57e:	d01a      	beq.n	d5b6 <am_hal_flash_delay_status_check+0x82>
    d580:	f1b9 0f05 	cmp.w	r9, #5
    d584:	d010      	beq.n	d5a8 <am_hal_flash_delay_status_check+0x74>
    d586:	f1b9 0f06 	cmp.w	r9, #6
    d58a:	d006      	beq.n	d59a <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d58c:	6820      	ldr	r0, [r4, #0]
    d58e:	4028      	ands	r0, r5
    d590:	4286      	cmp	r6, r0
    d592:	d068      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d594:	2001      	movs	r0, #1
    d596:	47c0      	blx	r8
    d598:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d59a:	6821      	ldr	r1, [r4, #0]
    d59c:	4029      	ands	r1, r5
    d59e:	428e      	cmp	r6, r1
    d5a0:	d061      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5a2:	2001      	movs	r0, #1
    d5a4:	47c0      	blx	r8
    d5a6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5a8:	6822      	ldr	r2, [r4, #0]
    d5aa:	402a      	ands	r2, r5
    d5ac:	4296      	cmp	r6, r2
    d5ae:	d05a      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5b0:	2001      	movs	r0, #1
    d5b2:	47c0      	blx	r8
    d5b4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5b6:	6823      	ldr	r3, [r4, #0]
    d5b8:	402b      	ands	r3, r5
    d5ba:	429e      	cmp	r6, r3
    d5bc:	d053      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5be:	2001      	movs	r0, #1
    d5c0:	47c0      	blx	r8
    d5c2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5c4:	6820      	ldr	r0, [r4, #0]
    d5c6:	4028      	ands	r0, r5
    d5c8:	4286      	cmp	r6, r0
    d5ca:	d04c      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5cc:	2001      	movs	r0, #1
    d5ce:	47c0      	blx	r8
    d5d0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5d2:	6821      	ldr	r1, [r4, #0]
    d5d4:	4029      	ands	r1, r5
    d5d6:	428e      	cmp	r6, r1
    d5d8:	d045      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5da:	2001      	movs	r0, #1
    d5dc:	3f01      	subs	r7, #1
    d5de:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5e0:	6822      	ldr	r2, [r4, #0]
    d5e2:	402a      	ands	r2, r5
    d5e4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5e6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5ea:	d03c      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d5ec:	2f00      	cmp	r7, #0
    d5ee:	f000 80c8 	beq.w	d782 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5f2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5f4:	6823      	ldr	r3, [r4, #0]
    d5f6:	402b      	ands	r3, r5
    d5f8:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5fa:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5fe:	d032      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d600:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d602:	6821      	ldr	r1, [r4, #0]
    d604:	4029      	ands	r1, r5
    d606:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d608:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d60c:	d02b      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d60e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d610:	6822      	ldr	r2, [r4, #0]
    d612:	402a      	ands	r2, r5
    d614:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d616:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d61a:	d024      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d61c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d61e:	6823      	ldr	r3, [r4, #0]
    d620:	402b      	ands	r3, r5
    d622:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d624:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d628:	d01d      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d62a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d62c:	6821      	ldr	r1, [r4, #0]
    d62e:	4029      	ands	r1, r5
    d630:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d632:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d636:	d016      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d638:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d63a:	6822      	ldr	r2, [r4, #0]
    d63c:	402a      	ands	r2, r5
    d63e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d640:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d644:	d00f      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d646:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d648:	6820      	ldr	r0, [r4, #0]
    d64a:	4028      	ands	r0, r5
    d64c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d64e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d652:	d008      	beq.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d654:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d656:	6822      	ldr	r2, [r4, #0]
    d658:	402a      	ands	r2, r5
    d65a:	4296      	cmp	r6, r2
    d65c:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d660:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d664:	d1c2      	bne.n	d5ec <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d666:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d66c:	f010 0907 	ands.w	r9, r0, #7
    d670:	d043      	beq.n	d6fa <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d672:	680b      	ldr	r3, [r1, #0]
    d674:	4013      	ands	r3, r2
    d676:	429e      	cmp	r6, r3
    d678:	d1f5      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d67a:	2001      	movs	r0, #1
    d67c:	47c0      	blx	r8
    d67e:	f1b9 0f01 	cmp.w	r9, #1
    d682:	f107 37ff 	add.w	r7, r7, #4294967295
    d686:	d038      	beq.n	d6fa <am_hal_flash_delay_status_check+0x1c6>
    d688:	f1b9 0f02 	cmp.w	r9, #2
    d68c:	d02e      	beq.n	d6ec <am_hal_flash_delay_status_check+0x1b8>
    d68e:	f1b9 0f03 	cmp.w	r9, #3
    d692:	d024      	beq.n	d6de <am_hal_flash_delay_status_check+0x1aa>
    d694:	f1b9 0f04 	cmp.w	r9, #4
    d698:	d01a      	beq.n	d6d0 <am_hal_flash_delay_status_check+0x19c>
    d69a:	f1b9 0f05 	cmp.w	r9, #5
    d69e:	d010      	beq.n	d6c2 <am_hal_flash_delay_status_check+0x18e>
    d6a0:	f1b9 0f06 	cmp.w	r9, #6
    d6a4:	d006      	beq.n	d6b4 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6a6:	6821      	ldr	r1, [r4, #0]
    d6a8:	4029      	ands	r1, r5
    d6aa:	428e      	cmp	r6, r1
    d6ac:	d1db      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ae:	2001      	movs	r0, #1
    d6b0:	47c0      	blx	r8
    d6b2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6b4:	6822      	ldr	r2, [r4, #0]
    d6b6:	402a      	ands	r2, r5
    d6b8:	4296      	cmp	r6, r2
    d6ba:	d1d4      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6bc:	2001      	movs	r0, #1
    d6be:	47c0      	blx	r8
    d6c0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6c2:	6820      	ldr	r0, [r4, #0]
    d6c4:	4028      	ands	r0, r5
    d6c6:	4286      	cmp	r6, r0
    d6c8:	d1cd      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ca:	2001      	movs	r0, #1
    d6cc:	47c0      	blx	r8
    d6ce:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6d0:	6823      	ldr	r3, [r4, #0]
    d6d2:	402b      	ands	r3, r5
    d6d4:	429e      	cmp	r6, r3
    d6d6:	d1c6      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6d8:	2001      	movs	r0, #1
    d6da:	47c0      	blx	r8
    d6dc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6de:	6821      	ldr	r1, [r4, #0]
    d6e0:	4029      	ands	r1, r5
    d6e2:	428e      	cmp	r6, r1
    d6e4:	d1bf      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6e6:	2001      	movs	r0, #1
    d6e8:	47c0      	blx	r8
    d6ea:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6ec:	6822      	ldr	r2, [r4, #0]
    d6ee:	402a      	ands	r2, r5
    d6f0:	4296      	cmp	r6, r2
    d6f2:	d1b8      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6f4:	2001      	movs	r0, #1
    d6f6:	3f01      	subs	r7, #1
    d6f8:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6fa:	6823      	ldr	r3, [r4, #0]
    d6fc:	402b      	ands	r3, r5
    d6fe:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d700:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d704:	d1af      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d706:	2f00      	cmp	r7, #0
    d708:	d03b      	beq.n	d782 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d70a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d70c:	6821      	ldr	r1, [r4, #0]
    d70e:	4029      	ands	r1, r5
    d710:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d712:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d716:	d1a6      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d718:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d71a:	6822      	ldr	r2, [r4, #0]
    d71c:	402a      	ands	r2, r5
    d71e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d720:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d724:	d19f      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d726:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d728:	6823      	ldr	r3, [r4, #0]
    d72a:	402b      	ands	r3, r5
    d72c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d72e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d732:	d198      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d734:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d736:	6821      	ldr	r1, [r4, #0]
    d738:	4029      	ands	r1, r5
    d73a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d73c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d740:	d191      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d742:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d744:	6822      	ldr	r2, [r4, #0]
    d746:	402a      	ands	r2, r5
    d748:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d74a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d74e:	d18a      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d750:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d752:	6823      	ldr	r3, [r4, #0]
    d754:	402b      	ands	r3, r5
    d756:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d758:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d75c:	d183      	bne.n	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d75e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d760:	6820      	ldr	r0, [r4, #0]
    d762:	4028      	ands	r0, r5
    d764:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d766:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d76a:	f47f af7c 	bne.w	d666 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d76e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d770:	6823      	ldr	r3, [r4, #0]
    d772:	402b      	ands	r3, r5
    d774:	429e      	cmp	r6, r3
    d776:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d77a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d77e:	d0c2      	beq.n	d706 <am_hal_flash_delay_status_check+0x1d2>
    d780:	e771      	b.n	d666 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d782:	2004      	movs	r0, #4
    d784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d788:	0800009d 	.word	0x0800009d

0000d78c <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d78c:	2831      	cmp	r0, #49	; 0x31
    d78e:	d901      	bls.n	d794 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d790:	2006      	movs	r0, #6
    d792:	4770      	bx	lr
{
    d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d798:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d79c:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d7a0:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d7a2:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d7a6:	d014      	beq.n	d7d2 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d7a8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d7ac:	1db2      	adds	r2, r6, #6
    d7ae:	f002 0707 	and.w	r7, r2, #7
    d7b2:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d7b4:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d7b8:	f200 80ab 	bhi.w	d912 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d7bc:	4a85      	ldr	r2, [pc, #532]	; (d9d4 <am_hal_gpio_pinconfig+0x248>)
    d7be:	5c17      	ldrb	r7, [r2, r0]
    d7c0:	07ff      	lsls	r7, r7, #31
    d7c2:	d403      	bmi.n	d7cc <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d7c4:	4884      	ldr	r0, [pc, #528]	; (d9d8 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d7c6:	b007      	add	sp, #28
    d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d7cc:	1eb4      	subs	r4, r6, #2
    d7ce:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d7d2:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d7d6:	2e00      	cmp	r6, #0
    d7d8:	f040 8095 	bne.w	d906 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7dc:	4a7f      	ldr	r2, [pc, #508]	; (d9dc <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7de:	4f80      	ldr	r7, [pc, #512]	; (d9e0 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7e0:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7e2:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7e6:	411e      	asrs	r6, r3
    d7e8:	f016 0f01 	tst.w	r6, #1
    d7ec:	bf0c      	ite	eq
    d7ee:	2600      	moveq	r6, #0
    d7f0:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7f2:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7f4:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7f8:	f000 8097 	beq.w	d92a <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d7fc:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d800:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d802:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d806:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d80a:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d80c:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d810:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d814:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d818:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d81c:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d81e:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d822:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d826:	f000 808d 	beq.w	d944 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d82a:	4a6e      	ldr	r2, [pc, #440]	; (d9e4 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d82c:	6816      	ldr	r6, [r2, #0]
    d82e:	1b8c      	subs	r4, r1, r6
    d830:	fab4 f384 	clz	r3, r4
    d834:	095f      	lsrs	r7, r3, #5
    d836:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d838:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d83c:	bf04      	itt	eq
    d83e:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d842:	f367 0800 	bfieq	r8, r7, #0, #1
    d846:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d848:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d84c:	2902      	cmp	r1, #2
    d84e:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d852:	d07a      	beq.n	d94a <am_hal_gpio_pinconfig+0x1be>
    d854:	d87f      	bhi.n	d956 <am_hal_gpio_pinconfig+0x1ca>
    d856:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d858:	bf08      	it	eq
    d85a:	f045 0504 	orreq.w	r5, r5, #4
    d85e:	f004 0a18 	and.w	sl, r4, #24
            break;
    d862:	2200      	movs	r2, #0
    d864:	4604      	mov	r4, r0
    d866:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d868:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d86c:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d870:	485d      	ldr	r0, [pc, #372]	; (d9e8 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d872:	495e      	ldr	r1, [pc, #376]	; (d9ec <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d874:	4f5e      	ldr	r7, [pc, #376]	; (d9f0 <am_hal_gpio_pinconfig+0x264>)
    d876:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d878:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d87c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d880:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d884:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d886:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d88a:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d88c:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d890:	f000 f8c2 	bl	da18 <am_hal_interrupt_master_disable>
    d894:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d896:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d89a:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d89e:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d8a2:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d8a6:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d8a8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d8ac:	9902      	ldr	r1, [sp, #8]
    d8ae:	9a03      	ldr	r2, [sp, #12]
    d8b0:	b150      	cbz	r0, d8c8 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d8b2:	f004 001f 	and.w	r0, r4, #31
    d8b6:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d8ba:	f04f 0c01 	mov.w	ip, #1
    d8be:	4c4d      	ldr	r4, [pc, #308]	; (d9f4 <am_hal_gpio_pinconfig+0x268>)
    d8c0:	fa0c f000 	lsl.w	r0, ip, r0
    d8c4:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d8c8:	484b      	ldr	r0, [pc, #300]	; (d9f8 <am_hal_gpio_pinconfig+0x26c>)
    d8ca:	2473      	movs	r4, #115	; 0x73
    d8cc:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d8ce:	f8da 4000 	ldr.w	r4, [sl]
    d8d2:	4034      	ands	r4, r6
    d8d4:	4325      	orrs	r5, r4
    d8d6:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d8da:	f859 5001 	ldr.w	r5, [r9, r1]
    d8de:	402f      	ands	r7, r5
    d8e0:	ea47 0708 	orr.w	r7, r7, r8
    d8e4:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d8e8:	f85b 1003 	ldr.w	r1, [fp, r3]
    d8ec:	400e      	ands	r6, r1
    d8ee:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d8f0:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d8f2:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d8f6:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d8f8:	9805      	ldr	r0, [sp, #20]
    d8fa:	f000 f891 	bl	da20 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d8fe:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d900:	b007      	add	sp, #28
    d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d906:	2e01      	cmp	r6, #1
    d908:	d015      	beq.n	d936 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d90a:	2e02      	cmp	r6, #2
    d90c:	d030      	beq.n	d970 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d90e:	483b      	ldr	r0, [pc, #236]	; (d9fc <am_hal_gpio_pinconfig+0x270>)
    d910:	e759      	b.n	d7c6 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d912:	2cc0      	cmp	r4, #192	; 0xc0
    d914:	d027      	beq.n	d966 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d916:	2c20      	cmp	r4, #32
    d918:	f47f af5b 	bne.w	d7d2 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d91c:	4c2d      	ldr	r4, [pc, #180]	; (d9d4 <am_hal_gpio_pinconfig+0x248>)
    d91e:	5c26      	ldrb	r6, [r4, r0]
    d920:	f016 0f09 	tst.w	r6, #9
    d924:	f47f af4e 	bne.w	d7c4 <am_hal_gpio_pinconfig+0x38>
    d928:	e753      	b.n	d7d2 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d92a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d92e:	2a07      	cmp	r2, #7
    d930:	d125      	bne.n	d97e <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d932:	4833      	ldr	r0, [pc, #204]	; (da00 <am_hal_gpio_pinconfig+0x274>)
    d934:	e747      	b.n	d7c6 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d936:	4c27      	ldr	r4, [pc, #156]	; (d9d4 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d938:	5c26      	ldrb	r6, [r4, r0]
    d93a:	07b4      	lsls	r4, r6, #30
    d93c:	d5e7      	bpl.n	d90e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d93e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d942:	e74b      	b.n	d7dc <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d944:	2701      	movs	r7, #1
    d946:	9700      	str	r7, [sp, #0]
    d948:	e776      	b.n	d838 <am_hal_gpio_pinconfig+0xac>
    d94a:	f004 0a18 	and.w	sl, r4, #24
    d94e:	2301      	movs	r3, #1
    d950:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d954:	e786      	b.n	d864 <am_hal_gpio_pinconfig+0xd8>
    d956:	f004 0a18 	and.w	sl, r4, #24
    d95a:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d95c:	f045 0504 	orr.w	r5, r5, #4
    d960:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d964:	e77e      	b.n	d864 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d966:	2814      	cmp	r0, #20
    d968:	f43f af33 	beq.w	d7d2 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d96c:	4825      	ldr	r0, [pc, #148]	; (da04 <am_hal_gpio_pinconfig+0x278>)
    d96e:	e72a      	b.n	d7c6 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d970:	4a18      	ldr	r2, [pc, #96]	; (d9d4 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d972:	5c17      	ldrb	r7, [r2, r0]
    d974:	077a      	lsls	r2, r7, #29
    d976:	d5ca      	bpl.n	d90e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d978:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d97c:	e72e      	b.n	d7dc <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d97e:	4c22      	ldr	r4, [pc, #136]	; (da08 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d980:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d984:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d988:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d98c:	45b0      	cmp	r8, r6
    d98e:	d010      	beq.n	d9b2 <am_hal_gpio_pinconfig+0x226>
    d990:	0087      	lsls	r7, r0, #2
    d992:	eb04 0907 	add.w	r9, r4, r7
    d996:	f899 3001 	ldrb.w	r3, [r9, #1]
    d99a:	42b3      	cmp	r3, r6
    d99c:	d015      	beq.n	d9ca <am_hal_gpio_pinconfig+0x23e>
    d99e:	f899 2002 	ldrb.w	r2, [r9, #2]
    d9a2:	42b2      	cmp	r2, r6
    d9a4:	d00f      	beq.n	d9c6 <am_hal_gpio_pinconfig+0x23a>
    d9a6:	f899 4003 	ldrb.w	r4, [r9, #3]
    d9aa:	42b4      	cmp	r4, r6
    d9ac:	d00f      	beq.n	d9ce <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d9ae:	4817      	ldr	r0, [pc, #92]	; (da0c <am_hal_gpio_pinconfig+0x280>)
    d9b0:	e709      	b.n	d7c6 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d9b2:	2600      	movs	r6, #0
    d9b4:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d9b6:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d9b8:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    d9bc:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d9be:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    d9c2:	9300      	str	r3, [sp, #0]
    d9c4:	e740      	b.n	d848 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d9c6:	2602      	movs	r6, #2
    d9c8:	e7f5      	b.n	d9b6 <am_hal_gpio_pinconfig+0x22a>
    d9ca:	2601      	movs	r6, #1
    d9cc:	e7f3      	b.n	d9b6 <am_hal_gpio_pinconfig+0x22a>
    d9ce:	2603      	movs	r6, #3
    d9d0:	e7f1      	b.n	d9b6 <am_hal_gpio_pinconfig+0x22a>
    d9d2:	bf00      	nop
    d9d4:	0000f148 	.word	0x0000f148
    d9d8:	08000100 	.word	0x08000100
    d9dc:	0000f17c 	.word	0x0000f17c
    d9e0:	0000f278 	.word	0x0000f278
    d9e4:	0000f144 	.word	0x0000f144
    d9e8:	7ffffffc 	.word	0x7ffffffc
    d9ec:	400100e0 	.word	0x400100e0
    d9f0:	40010040 	.word	0x40010040
    d9f4:	400100b4 	.word	0x400100b4
    d9f8:	40010000 	.word	0x40010000
    d9fc:	08000102 	.word	0x08000102
    da00:	08000103 	.word	0x08000103
    da04:	08000101 	.word	0x08000101
    da08:	0000f1b0 	.word	0x0000f1b0
    da0c:	08000104 	.word	0x08000104

0000da10 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    da10:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    da14:	b662      	cpsie	i
    __asm("    bx lr");
    da16:	4770      	bx	lr

0000da18 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    da18:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    da1c:	b672      	cpsid	i
    __asm("    bx lr");
    da1e:	4770      	bx	lr

0000da20 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    da20:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    da24:	4770      	bx	lr
    da26:	bf00      	nop

0000da28 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    da28:	4a0b      	ldr	r2, [pc, #44]	; (da58 <am_hal_itm_enable+0x30>)
    da2a:	68d3      	ldr	r3, [r2, #12]
    da2c:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    da30:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    da32:	68d1      	ldr	r1, [r2, #12]
    da34:	01cb      	lsls	r3, r1, #7
    da36:	d5fc      	bpl.n	da32 <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    da38:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    da3c:	4b07      	ldr	r3, [pc, #28]	; (da5c <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    da3e:	4a08      	ldr	r2, [pc, #32]	; (da60 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    da40:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    da44:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    da46:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    da4a:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    da4e:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    da52:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    da56:	4770      	bx	lr
    da58:	e000edf0 	.word	0xe000edf0
    da5c:	c5acce55 	.word	0xc5acce55
    da60:	00150511 	.word	0x00150511

0000da64 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    da64:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    da66:	4b24      	ldr	r3, [pc, #144]	; (daf8 <am_hal_itm_disable+0x94>)
    da68:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    da6c:	b9b0      	cbnz	r0, da9c <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    da6e:	4923      	ldr	r1, [pc, #140]	; (dafc <am_hal_itm_disable+0x98>)
    da70:	68ca      	ldr	r2, [r1, #12]
    da72:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    da76:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    da78:	68cb      	ldr	r3, [r1, #12]
    da7a:	01da      	lsls	r2, r3, #7
    da7c:	d5fc      	bpl.n	da78 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    da7e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    da82:	481f      	ldr	r0, [pc, #124]	; (db00 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    da84:	4a1f      	ldr	r2, [pc, #124]	; (db04 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    da86:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    da8a:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    da8c:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    da90:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    da94:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    da98:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    da9c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    daa0:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    daa4:	021b      	lsls	r3, r3, #8
    daa6:	d4fb      	bmi.n	daa0 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    daa8:	f240 20f7 	movw	r0, #759	; 0x2f7
    daac:	f7ff fd3e 	bl	d52c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dab0:	4813      	ldr	r0, [pc, #76]	; (db00 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dab2:	4915      	ldr	r1, [pc, #84]	; (db08 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dab4:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dab8:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dabc:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dabe:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    dac2:	f022 0401 	bic.w	r4, r2, #1
    dac6:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    daca:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dace:	420b      	tst	r3, r1
    dad0:	d1fb      	bne.n	daca <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dad2:	3801      	subs	r0, #1
    dad4:	d1f3      	bne.n	dabe <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dad6:	4909      	ldr	r1, [pc, #36]	; (dafc <am_hal_itm_disable+0x98>)
    dad8:	68ca      	ldr	r2, [r1, #12]
    dada:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dade:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dae0:	68cb      	ldr	r3, [r1, #12]
    dae2:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    dae6:	d1fb      	bne.n	dae0 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    dae8:	4903      	ldr	r1, [pc, #12]	; (daf8 <am_hal_itm_disable+0x94>)
    daea:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    daee:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    daf2:	2a00      	cmp	r2, #0
    daf4:	d1fb      	bne.n	daee <am_hal_itm_disable+0x8a>
}
    daf6:	bd10      	pop	{r4, pc}
    daf8:	40020000 	.word	0x40020000
    dafc:	e000edf0 	.word	0xe000edf0
    db00:	c5acce55 	.word	0xc5acce55
    db04:	00150511 	.word	0x00150511
    db08:	00800001 	.word	0x00800001

0000db0c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    db0c:	7803      	ldrb	r3, [r0, #0]
    db0e:	b1b3      	cbz	r3, db3e <am_hal_itm_print+0x32>
{
    db10:	b410      	push	{r4}
    db12:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    db14:	2400      	movs	r4, #0
    db16:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    db1a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    db1c:	2900      	cmp	r1, #0
    db1e:	d1fa      	bne.n	db16 <am_hal_itm_print+0xa>
    db20:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    db22:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    db26:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    db2a:	f8dc 3000 	ldr.w	r3, [ip]
    db2e:	2b00      	cmp	r3, #0
    db30:	d0fb      	beq.n	db2a <am_hal_itm_print+0x1e>
    while (ui32Length)
    db32:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    db34:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    db38:	d1f5      	bne.n	db26 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    db3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    db3e:	4770      	bx	lr

0000db40 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    db40:	b141      	cbz	r1, db54 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    db42:	2801      	cmp	r0, #1
{
    db44:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    db46:	d03a      	beq.n	dbbe <am_hal_mcuctrl_info_get+0x7e>
    db48:	d322      	bcc.n	db90 <am_hal_mcuctrl_info_get+0x50>
    db4a:	2802      	cmp	r0, #2
    db4c:	d004      	beq.n	db58 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    db4e:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    db50:	bcf0      	pop	{r4, r5, r6, r7}
    db52:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    db54:	2006      	movs	r0, #6
    db56:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    db58:	4a41      	ldr	r2, [pc, #260]	; (dc60 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    db5a:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    db5c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    db60:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    db62:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    db66:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    db6a:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    db6e:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    db70:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    db72:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    db74:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    db78:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    db7a:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    db7e:	4334      	orrs	r4, r6
    db80:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    db82:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    db86:	4310      	orrs	r0, r2
    db88:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    db8a:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    db8c:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    db8e:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    db90:	4c33      	ldr	r4, [pc, #204]	; (dc60 <am_hal_mcuctrl_info_get+0x120>)
    db92:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    db94:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    db98:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    db9c:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    db9e:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dba0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dba4:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dba8:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    dbaa:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dbac:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    dbb0:	f004 0501 	and.w	r5, r4, #1
    dbb4:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    dbb6:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dbb8:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dbba:	bcf0      	pop	{r4, r5, r6, r7}
    dbbc:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dbbe:	4a28      	ldr	r2, [pc, #160]	; (dc60 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    dbc0:	4c28      	ldr	r4, [pc, #160]	; (dc64 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dbc2:	6813      	ldr	r3, [r2, #0]
    dbc4:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    dbc6:	6850      	ldr	r0, [r2, #4]
    dbc8:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    dbca:	6897      	ldr	r7, [r2, #8]
    dbcc:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    dbce:	68d6      	ldr	r6, [r2, #12]
    dbd0:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dbd2:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    dbd4:	4824      	ldr	r0, [pc, #144]	; (dc68 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dbd6:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    dbd8:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    dbdc:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    dbe0:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    dbe2:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dbe6:	4a21      	ldr	r2, [pc, #132]	; (dc6c <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    dbe8:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    dbec:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dbee:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    dbf2:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    dbf4:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dbf6:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dbf8:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dbfc:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dc00:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dc02:	f000 040f 	and.w	r4, r0, #15
    dc06:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dc0a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dc0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dc10:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dc14:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dc18:	f007 0c0f 	and.w	ip, r7, #15
    dc1c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    dc20:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dc22:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dc26:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dc2a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dc2e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    dc32:	433b      	orrs	r3, r7
    dc34:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    dc36:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dc3a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dc3e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dc42:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dc46:	b2e5      	uxtb	r5, r4
    dc48:	042b      	lsls	r3, r5, #16
    dc4a:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dc4e:	b2d6      	uxtb	r6, r2
    dc50:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dc52:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dc54:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    dc58:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    dc5a:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dc5c:	bcf0      	pop	{r4, r5, r6, r7}
    dc5e:	4770      	bx	lr
    dc60:	40020000 	.word	0x40020000
    dc64:	0000f2ac 	.word	0x0000f2ac
    dc68:	0000f2ec 	.word	0x0000f2ec
    dc6c:	f0000f00 	.word	0xf0000f00

0000dc70 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dc70:	b570      	push	{r4, r5, r6, lr}
    dc72:	b082      	sub	sp, #8
    dc74:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    dc76:	f7ff fecf 	bl	da18 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dc7a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dc7e:	008c      	lsls	r4, r1, #2
    dc80:	4e0e      	ldr	r6, [pc, #56]	; (dcbc <am_hal_pwrctrl_periph_enable+0x4c>)
    dc82:	4d0f      	ldr	r5, [pc, #60]	; (dcc0 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    dc84:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dc86:	592a      	ldr	r2, [r5, r4]
    dc88:	68b3      	ldr	r3, [r6, #8]
    dc8a:	4313      	orrs	r3, r2
    dc8c:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    dc8e:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dc90:	442c      	add	r4, r5
    AM_CRITICAL_END
    dc92:	f7ff fec5 	bl	da20 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dc96:	2077      	movs	r0, #119	; 0x77
    dc98:	f7ff fc48 	bl	d52c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dc9c:	69b0      	ldr	r0, [r6, #24]
    dc9e:	6864      	ldr	r4, [r4, #4]
    dca0:	4220      	tst	r0, r4
    dca2:	d103      	bne.n	dcac <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dca4:	2077      	movs	r0, #119	; 0x77
    dca6:	f7ff fc41 	bl	d52c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dcaa:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    dcac:	4903      	ldr	r1, [pc, #12]	; (dcbc <am_hal_pwrctrl_periph_enable+0x4c>)
    dcae:	698d      	ldr	r5, [r1, #24]
    dcb0:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    dcb2:	bf0c      	ite	eq
    dcb4:	2001      	moveq	r0, #1
    dcb6:	2000      	movne	r0, #0
    dcb8:	b002      	add	sp, #8
    dcba:	bd70      	pop	{r4, r5, r6, pc}
    dcbc:	40021000 	.word	0x40021000
    dcc0:	0000f32c 	.word	0x0000f32c

0000dcc4 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dcc4:	b570      	push	{r4, r5, r6, lr}
    dcc6:	b082      	sub	sp, #8
    dcc8:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    dcca:	f7ff fea5 	bl	da18 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dcce:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dcd2:	008c      	lsls	r4, r1, #2
    dcd4:	4e0f      	ldr	r6, [pc, #60]	; (dd14 <am_hal_pwrctrl_periph_disable+0x50>)
    dcd6:	4d10      	ldr	r5, [pc, #64]	; (dd18 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    dcd8:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dcda:	68b3      	ldr	r3, [r6, #8]
    dcdc:	592a      	ldr	r2, [r5, r4]
    dcde:	ea23 0002 	bic.w	r0, r3, r2
    dce2:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    dce4:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dce6:	442c      	add	r4, r5
    AM_CRITICAL_END
    dce8:	f7ff fe9a 	bl	da20 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dcec:	2077      	movs	r0, #119	; 0x77
    dcee:	f7ff fc1d 	bl	d52c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dcf2:	69b1      	ldr	r1, [r6, #24]
    dcf4:	6864      	ldr	r4, [r4, #4]
    dcf6:	4221      	tst	r1, r4
    dcf8:	d003      	beq.n	dd02 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dcfa:	2077      	movs	r0, #119	; 0x77
    dcfc:	f7ff fc16 	bl	d52c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd00:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd02:	4d04      	ldr	r5, [pc, #16]	; (dd14 <am_hal_pwrctrl_periph_disable+0x50>)
    dd04:	69ae      	ldr	r6, [r5, #24]
    dd06:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    dd08:	bf14      	ite	ne
    dd0a:	2001      	movne	r0, #1
    dd0c:	2000      	moveq	r0, #0
    dd0e:	b002      	add	sp, #8
    dd10:	bd70      	pop	{r4, r5, r6, pc}
    dd12:	bf00      	nop
    dd14:	40021000 	.word	0x40021000
    dd18:	0000f32c 	.word	0x0000f32c

0000dd1c <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dd1c:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dd1e:	4c1b      	ldr	r4, [pc, #108]	; (dd8c <am_hal_pwrctrl_low_power_init+0x70>)
    dd20:	69a3      	ldr	r3, [r4, #24]
    dd22:	05db      	lsls	r3, r3, #23
{
    dd24:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dd26:	d502      	bpl.n	dd2e <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    dd28:	2000      	movs	r0, #0
}
    dd2a:	b003      	add	sp, #12
    dd2c:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd2e:	4d18      	ldr	r5, [pc, #96]	; (dd90 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd30:	4918      	ldr	r1, [pc, #96]	; (dd94 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd32:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd34:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd36:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd38:	461a      	mov	r2, r3
    dd3a:	9000      	str	r0, [sp, #0]
    dd3c:	f242 7010 	movw	r0, #10000	; 0x2710
    dd40:	f7ff fbf8 	bl	d534 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dd44:	b110      	cbz	r0, dd4c <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    dd46:	2004      	movs	r0, #4
}
    dd48:	b003      	add	sp, #12
    dd4a:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    dd4c:	6821      	ldr	r1, [r4, #0]
    dd4e:	f041 0201 	orr.w	r2, r1, #1
    dd52:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    dd54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dd56:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    dd5a:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    dd5c:	68ec      	ldr	r4, [r5, #12]
    dd5e:	b2e2      	uxtb	r2, r4
    dd60:	2a11      	cmp	r2, #17
    dd62:	d1e1      	bne.n	dd28 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    dd64:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    dd68:	f360 5356 	bfi	r3, r0, #21, #2
    dd6c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    dd70:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    dd74:	240f      	movs	r4, #15
    dd76:	f364 118b 	bfi	r1, r4, #6, #6
    dd7a:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    dd7e:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    dd82:	f364 0205 	bfi	r2, r4, #0, #6
    dd86:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    dd8a:	e7ce      	b.n	dd2a <am_hal_pwrctrl_low_power_init+0xe>
    dd8c:	40021000 	.word	0x40021000
    dd90:	40020000 	.word	0x40020000
    dd94:	40020018 	.word	0x40020018

0000dd98 <am_hal_reset_control>:
//
//*****************************************************************************
uint32_t
am_hal_reset_control(am_hal_reset_control_e eControl, void *pArgs)
{
    switch ( eControl )
    dd98:	2803      	cmp	r0, #3
    dd9a:	d81a      	bhi.n	ddd2 <am_hal_reset_control+0x3a>
    dd9c:	e8df f000 	tbb	[pc, r0]
    dda0:	02080c12 	.word	0x02080c12
        case AM_HAL_RESET_CONTROL_TPIU_RESET:
            //
            // Reset the TPIU.
            //
#if AM_CMSIS_REGS
            RSTGEN->TPIURST = _VAL2FLD(RSTGEN_TPIURST_TPIURST, 1);
    dda4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dda8:	2201      	movs	r2, #1
    ddaa:	615a      	str	r2, [r3, #20]
    }

    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    ddac:	2000      	movs	r0, #0
            break;
    ddae:	4770      	bx	lr
            RSTGEN->STAT = 0;
    ddb0:	4909      	ldr	r1, [pc, #36]	; (ddd8 <am_hal_reset_control+0x40>)
    ddb2:	2000      	movs	r0, #0
    ddb4:	6008      	str	r0, [r1, #0]
            break;
    ddb6:	4770      	bx	lr
            RSTGEN->SWPOI =
    ddb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ddbc:	231b      	movs	r3, #27
    ddbe:	6043      	str	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    ddc0:	2000      	movs	r0, #0
            break;
    ddc2:	4770      	bx	lr
            RSTGEN->SWPOR =
    ddc4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    ddc8:	22d4      	movs	r2, #212	; 0xd4
    ddca:	f8cc 2008 	str.w	r2, [ip, #8]
    return AM_HAL_STATUS_SUCCESS;
    ddce:	2000      	movs	r0, #0
            break;
    ddd0:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    ddd2:	2006      	movs	r0, #6

} // am_hal_reset_control()
    ddd4:	4770      	bx	lr
    ddd6:	bf00      	nop
    ddd8:	4ffff000 	.word	0x4ffff000

0000dddc <am_hal_reset_status_get>:
uint32_t
am_hal_reset_status_get(am_hal_reset_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    dddc:	b338      	cbz	r0, de2e <am_hal_reset_status_get+0x52>
{
    ddde:	b4f0      	push	{r4, r5, r6, r7}

    //
    // Retrieve the reset generator status bits
    //
#if AM_CMSIS_REGS
    ui32Status = RSTGEN->STAT;
    dde0:	4b14      	ldr	r3, [pc, #80]	; (de34 <am_hal_reset_status_get+0x58>)
    dde2:	681b      	ldr	r3, [r3, #0]
    psStatus->eStatus      = (am_hal_reset_status_e)ui32Status;
    dde4:	8003      	strh	r3, [r0, #0]
    psStatus->bEXTStat     = _FLD2VAL(RSTGEN_STAT_EXRSTAT, ui32Status);
    dde6:	f003 0501 	and.w	r5, r3, #1
    psStatus->bPORStat     = _FLD2VAL(RSTGEN_STAT_PORSTAT, ui32Status);
    ddea:	f3c3 0440 	ubfx	r4, r3, #1, #1
    psStatus->bBODStat     = _FLD2VAL(RSTGEN_STAT_BORSTAT, ui32Status);
    ddee:	f3c3 0180 	ubfx	r1, r3, #2, #1
    psStatus->bSWPORStat   = _FLD2VAL(RSTGEN_STAT_SWRSTAT, ui32Status);
    ddf2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    psStatus->bSWPOIStat   = _FLD2VAL(RSTGEN_STAT_POIRSTAT, ui32Status);
    ddf6:	f3c3 1700 	ubfx	r7, r3, #4, #1
    psStatus->bDBGRStat    = _FLD2VAL(RSTGEN_STAT_DBGRSTAT, ui32Status);
    ddfa:	f3c3 1640 	ubfx	r6, r3, #5, #1
    psStatus->bEXTStat     = _FLD2VAL(RSTGEN_STAT_EXRSTAT, ui32Status);
    ddfe:	7085      	strb	r5, [r0, #2]
    psStatus->bPORStat     = _FLD2VAL(RSTGEN_STAT_PORSTAT, ui32Status);
    de00:	70c4      	strb	r4, [r0, #3]
    psStatus->bWDTStat     = _FLD2VAL(RSTGEN_STAT_WDRSTAT, ui32Status);
    de02:	f3c3 1580 	ubfx	r5, r3, #6, #1
    psStatus->bBOUnregStat = _FLD2VAL(RSTGEN_STAT_BOUSTAT, ui32Status);
    de06:	f3c3 14c0 	ubfx	r4, r3, #7, #1
    psStatus->bBODStat     = _FLD2VAL(RSTGEN_STAT_BORSTAT, ui32Status);
    de0a:	7101      	strb	r1, [r0, #4]
    psStatus->bSWPORStat   = _FLD2VAL(RSTGEN_STAT_SWRSTAT, ui32Status);
    de0c:	7142      	strb	r2, [r0, #5]
    psStatus->bBOCOREStat  = _FLD2VAL(RSTGEN_STAT_BOCSTAT, ui32Status);
    de0e:	f3c3 2100 	ubfx	r1, r3, #8, #1
    psStatus->bBOMEMStat   = _FLD2VAL(RSTGEN_STAT_BOFSTAT, ui32Status);
    de12:	f3c3 2240 	ubfx	r2, r3, #9, #1
    psStatus->bBOBLEStat   = _FLD2VAL(RSTGEN_STAT_BOBSTAT, ui32Status);
    de16:	f3c3 2380 	ubfx	r3, r3, #10, #1
    psStatus->bSWPOIStat   = _FLD2VAL(RSTGEN_STAT_POIRSTAT, ui32Status);
    de1a:	7187      	strb	r7, [r0, #6]
    psStatus->bDBGRStat    = _FLD2VAL(RSTGEN_STAT_DBGRSTAT, ui32Status);
    de1c:	71c6      	strb	r6, [r0, #7]
    psStatus->bWDTStat     = _FLD2VAL(RSTGEN_STAT_WDRSTAT, ui32Status);
    de1e:	7205      	strb	r5, [r0, #8]
    psStatus->bBOUnregStat = _FLD2VAL(RSTGEN_STAT_BOUSTAT, ui32Status);
    de20:	7244      	strb	r4, [r0, #9]
    psStatus->bBOCOREStat  = _FLD2VAL(RSTGEN_STAT_BOCSTAT, ui32Status);
    de22:	7281      	strb	r1, [r0, #10]
    psStatus->bBOMEMStat   = _FLD2VAL(RSTGEN_STAT_BOFSTAT, ui32Status);
    de24:	72c2      	strb	r2, [r0, #11]
    psStatus->bBOBLEStat   = _FLD2VAL(RSTGEN_STAT_BOBSTAT, ui32Status);
    de26:	7303      	strb	r3, [r0, #12]
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_reset_status_get()
    de28:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    de2a:	2000      	movs	r0, #0
} // am_hal_reset_status_get()
    de2c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    de2e:	2006      	movs	r0, #6
    de30:	4770      	bx	lr
    de32:	bf00      	nop
    de34:	4ffff000 	.word	0x4ffff000

0000de38 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    de38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    de3c:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    de3e:	68d3      	ldr	r3, [r2, #12]
    de40:	bf0c      	ite	eq
    de42:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    de46:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    de4a:	60d3      	str	r3, [r2, #12]
    de4c:	4770      	bx	lr
    de4e:	bf00      	nop

0000de50 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    de50:	4a03      	ldr	r2, [pc, #12]	; (de60 <am_hal_rtc_osc_disable+0x10>)
    de52:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    de56:	f043 0010 	orr.w	r0, r3, #16
    de5a:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    de5e:	4770      	bx	lr
    de60:	40004200 	.word	0x40004200

0000de64 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    de64:	b510      	push	{r4, lr}
    de66:	b082      	sub	sp, #8
    de68:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    de6a:	f7ff fdd5 	bl	da18 <am_hal_interrupt_master_disable>
    de6e:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    de70:	b124      	cbz	r4, de7c <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    de72:	4b0c      	ldr	r3, [pc, #48]	; (dea4 <am_hal_sysctrl_sleep+0x40>)
    de74:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    de78:	07c3      	lsls	r3, r0, #31
    de7a:	d50a      	bpl.n	de92 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    de7c:	4a0a      	ldr	r2, [pc, #40]	; (dea8 <am_hal_sysctrl_sleep+0x44>)
    de7e:	6911      	ldr	r1, [r2, #16]
    de80:	f021 0404 	bic.w	r4, r1, #4
    de84:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    de86:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    de88:	9801      	ldr	r0, [sp, #4]
    de8a:	f7ff fdc9 	bl	da20 <am_hal_interrupt_master_set>
}
    de8e:	b002      	add	sp, #8
    de90:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    de92:	4b05      	ldr	r3, [pc, #20]	; (dea8 <am_hal_sysctrl_sleep+0x44>)
    de94:	2004      	movs	r0, #4
    de96:	6118      	str	r0, [r3, #16]
        __WFI();
    de98:	bf30      	wfi
    AM_CRITICAL_END
    de9a:	9801      	ldr	r0, [sp, #4]
    de9c:	f7ff fdc0 	bl	da20 <am_hal_interrupt_master_set>
}
    dea0:	b002      	add	sp, #8
    dea2:	bd10      	pop	{r4, pc}
    dea4:	40020000 	.word	0x40020000
    dea8:	e000ed00 	.word	0xe000ed00

0000deac <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    deac:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    deae:	4a24      	ldr	r2, [pc, #144]	; (df40 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    deb0:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    deb2:	2100      	movs	r1, #0
{
    deb4:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    deb6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    deba:	b33b      	cbz	r3, df0c <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    debc:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    debe:	4921      	ldr	r1, [pc, #132]	; (df44 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dec0:	4c21      	ldr	r4, [pc, #132]	; (df48 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dec2:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dec4:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    dec8:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    deca:	458c      	cmp	ip, r1
    decc:	bf98      	it	ls
    dece:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    ded0:	f7ff fb0e 	bl	d4f0 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    ded4:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    ded6:	1c5a      	adds	r2, r3, #1
    ded8:	d02f      	beq.n	df3a <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    deda:	08da      	lsrs	r2, r3, #3
    dedc:	fbb2 fef4 	udiv	lr, r2, r4
    dee0:	f10e 31ff 	add.w	r1, lr, #4294967295
    dee4:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dee6:	4a16      	ldr	r2, [pc, #88]	; (df40 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    dee8:	4918      	ldr	r1, [pc, #96]	; (df4c <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    deea:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    deec:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    def0:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    def2:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    def4:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    def8:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    defc:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    df00:	f240 20f7 	movw	r0, #759	; 0x2f7
    df04:	f7ff fb12 	bl	d52c <am_hal_flash_delay>
}
    df08:	b004      	add	sp, #16
    df0a:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    df0c:	6904      	ldr	r4, [r0, #16]
    df0e:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    df10:	6883      	ldr	r3, [r0, #8]
    df12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    df16:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    df18:	4c0c      	ldr	r4, [pc, #48]	; (df4c <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    df1a:	3901      	subs	r1, #1
    df1c:	2301      	movs	r3, #1
    df1e:	408b      	lsls	r3, r1
    df20:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    df22:	6840      	ldr	r0, [r0, #4]
    df24:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    df28:	4302      	orrs	r2, r0
    df2a:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    df2e:	f240 20f7 	movw	r0, #759	; 0x2f7
    df32:	f7ff fafb 	bl	d52c <am_hal_flash_delay>
}
    df36:	b004      	add	sp, #16
    df38:	bd10      	pop	{r4, pc}
    df3a:	2005      	movs	r0, #5
    df3c:	e7d3      	b.n	dee6 <am_hal_tpiu_enable+0x3a>
    df3e:	bf00      	nop
    df40:	e0040000 	.word	0xe0040000
    df44:	001da380 	.word	0x001da380
    df48:	000f4240 	.word	0x000f4240
    df4c:	40020000 	.word	0x40020000

0000df50 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    df50:	2801      	cmp	r0, #1
    df52:	d901      	bls.n	df58 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    df54:	2005      	movs	r0, #5
    df56:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    df58:	b169      	cbz	r1, df76 <am_hal_uart_initialize+0x26>
{
    df5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    df5c:	2264      	movs	r2, #100	; 0x64
    df5e:	4e0e      	ldr	r6, [pc, #56]	; (df98 <am_hal_uart_initialize+0x48>)
    df60:	fb02 f200 	mul.w	r2, r2, r0
    df64:	18b4      	adds	r4, r6, r2
    df66:	4603      	mov	r3, r0
    df68:	78e0      	ldrb	r0, [r4, #3]
    df6a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    df6e:	b2fd      	uxtb	r5, r7
    df70:	b11d      	cbz	r5, df7a <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    df72:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
    df74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
    df76:	2006      	movs	r0, #6
    df78:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    df7a:	f040 0001 	orr.w	r0, r0, #1
    df7e:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    df80:	58b0      	ldr	r0, [r6, r2]
    df82:	f8df e018 	ldr.w	lr, [pc, #24]	; df9c <am_hal_uart_initialize+0x4c>
    df86:	f36e 0017 	bfi	r0, lr, #0, #24
    df8a:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    df8c:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    df8e:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    df90:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
    df92:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    df94:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    df96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df98:	10001948 	.word	0x10001948
    df9c:	00ea9e06 	.word	0x00ea9e06

0000dfa0 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dfa0:	b128      	cbz	r0, dfae <am_hal_uart_deinitialize+0xe>
    dfa2:	6803      	ldr	r3, [r0, #0]
    dfa4:	4a07      	ldr	r2, [pc, #28]	; (dfc4 <am_hal_uart_deinitialize+0x24>)
    dfa6:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    dfaa:	4291      	cmp	r1, r2
    dfac:	d001      	beq.n	dfb2 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    dfae:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    dfb0:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    dfb2:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    dfb4:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    dfb6:	f36f 0200 	bfc	r2, #0, #1
    dfba:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    dfbc:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    dfbe:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    dfc0:	4618      	mov	r0, r3
    dfc2:	4770      	bx	lr
    dfc4:	01ea9e06 	.word	0x01ea9e06

0000dfc8 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dfcc:	6804      	ldr	r4, [r0, #0]
    dfce:	4b36      	ldr	r3, [pc, #216]	; (e0a8 <am_hal_uart_power_control+0xe0>)
    dfd0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    dfd4:	429c      	cmp	r4, r3
{
    dfd6:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dfd8:	d003      	beq.n	dfe2 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    dfda:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    dfdc:	b004      	add	sp, #16
    dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    dfe2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    dfe4:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    dfe6:	f107 0008 	add.w	r0, r7, #8
    dfea:	460e      	mov	r6, r1
    dfec:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    dff0:	b181      	cbz	r1, e014 <am_hal_uart_power_control+0x4c>
    dff2:	2902      	cmp	r1, #2
    dff4:	d80c      	bhi.n	e010 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    dff6:	b992      	cbnz	r2, e01e <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    dff8:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    dffc:	341c      	adds	r4, #28
    dffe:	0325      	lsls	r5, r4, #12
    e000:	f04f 31ff 	mov.w	r1, #4294967295
    e004:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e006:	4640      	mov	r0, r8
    e008:	f7ff fe5c 	bl	dcc4 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e00c:	2000      	movs	r0, #0
            break;
    e00e:	e7e5      	b.n	dfdc <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e010:	2006      	movs	r0, #6
    e012:	e7e3      	b.n	dfdc <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e014:	b322      	cbz	r2, e060 <am_hal_uart_power_control+0x98>
    e016:	792a      	ldrb	r2, [r5, #4]
    e018:	bb42      	cbnz	r2, e06c <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e01a:	2007      	movs	r0, #7
    e01c:	e7de      	b.n	dfdc <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e01e:	f7ff fcfb 	bl	da18 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e022:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e026:	311c      	adds	r1, #28
    e028:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e02a:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e02c:	6a3a      	ldr	r2, [r7, #32]
    e02e:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e032:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e034:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e036:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e03a:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e03c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e03e:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e042:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e044:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e046:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e048:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e04a:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e04c:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e04e:	f7ff fce7 	bl	da20 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e052:	682e      	ldr	r6, [r5, #0]
    e054:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e058:	42a0      	cmp	r0, r4
    e05a:	d1d4      	bne.n	e006 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e05c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e05e:	e7cb      	b.n	dff8 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e060:	4640      	mov	r0, r8
    e062:	9201      	str	r2, [sp, #4]
    e064:	f7ff fe04 	bl	dc70 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e068:	9801      	ldr	r0, [sp, #4]
    e06a:	e7b7      	b.n	dfdc <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e06c:	4640      	mov	r0, r8
    e06e:	f7ff fdff 	bl	dc70 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e072:	f7ff fcd1 	bl	da18 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e076:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e07a:	331c      	adds	r3, #28
    e07c:	031f      	lsls	r7, r3, #12
    e07e:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e080:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e082:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e084:	68e9      	ldr	r1, [r5, #12]
    e086:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e088:	6928      	ldr	r0, [r5, #16]
    e08a:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e08c:	696a      	ldr	r2, [r5, #20]
    e08e:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e090:	69ab      	ldr	r3, [r5, #24]
    e092:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e094:	69ec      	ldr	r4, [r5, #28]
    e096:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e098:	6a29      	ldr	r1, [r5, #32]
    e09a:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e09c:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e09e:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e0a0:	f7ff fcbe 	bl	da20 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e0a4:	4630      	mov	r0, r6
    e0a6:	e799      	b.n	dfdc <am_hal_uart_power_control+0x14>
    e0a8:	01ea9e06 	.word	0x01ea9e06

0000e0ac <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e0ac:	6803      	ldr	r3, [r0, #0]
    e0ae:	4a69      	ldr	r2, [pc, #420]	; (e254 <am_hal_uart_configure+0x1a8>)
    e0b0:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    e0b4:	4594      	cmp	ip, r2
    e0b6:	d001      	beq.n	e0bc <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e0b8:	2002      	movs	r0, #2
    e0ba:	4770      	bx	lr
{
    e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
    e0c0:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
    e0c2:	b084      	sub	sp, #16
    e0c4:	460d      	mov	r5, r1
    e0c6:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    e0c8:	f7ff fca6 	bl	da18 <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e0cc:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
    e0d0:	311c      	adds	r1, #28
    e0d2:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
    e0d4:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e0d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e0d8:	f040 0208 	orr.w	r2, r0, #8
    e0dc:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
    e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e0e0:	f043 0610 	orr.w	r6, r3, #16
    e0e4:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e0e6:	9801      	ldr	r0, [sp, #4]
    e0e8:	f7ff fc9a 	bl	da20 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    e0ec:	f7ff fc94 	bl	da18 <am_hal_interrupt_master_disable>
    e0f0:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
    e0f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e0f4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
    e0f8:	f020 0201 	bic.w	r2, r0, #1
    e0fc:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e0fe:	9802      	ldr	r0, [sp, #8]
    e100:	f7ff fc8e 	bl	da20 <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e106:	f3c3 1802 	ubfx	r8, r3, #4, #3
    e10a:	f108 36ff 	add.w	r6, r8, #4294967295
    e10e:	2e03      	cmp	r6, #3
    e110:	d846      	bhi.n	e1a0 <am_hal_uart_configure+0xf4>
    e112:	e8df f006 	tbb	[pc, r6]
    e116:	020e      	.short	0x020e
    e118:	1114      	.short	0x1114
    e11a:	494f      	ldr	r1, [pc, #316]	; (e258 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
    e11c:	484f      	ldr	r0, [pc, #316]	; (e25c <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    e11e:	682a      	ldr	r2, [r5, #0]
    e120:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    e122:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
    e126:	b96b      	cbnz	r3, e144 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    e128:	484d      	ldr	r0, [pc, #308]	; (e260 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
    e12a:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
    e12c:	b004      	add	sp, #16
    e12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e132:	494c      	ldr	r1, [pc, #304]	; (e264 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
    e134:	484c      	ldr	r0, [pc, #304]	; (e268 <am_hal_uart_configure+0x1bc>)
    e136:	e7f2      	b.n	e11e <am_hal_uart_configure+0x72>
    e138:	494c      	ldr	r1, [pc, #304]	; (e26c <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
    e13a:	484d      	ldr	r0, [pc, #308]	; (e270 <am_hal_uart_configure+0x1c4>)
    e13c:	e7ef      	b.n	e11e <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e13e:	494d      	ldr	r1, [pc, #308]	; (e274 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
    e140:	484d      	ldr	r0, [pc, #308]	; (e278 <am_hal_uart_configure+0x1cc>)
    e142:	e7ec      	b.n	e11e <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    e144:	fbb1 f1f6 	udiv	r1, r1, r6
    e148:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e14c:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e14e:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e152:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e154:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    e158:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e15a:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
    e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e15e:	6929      	ldr	r1, [r5, #16]
    e160:	430b      	orrs	r3, r1
    e162:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
    e164:	696a      	ldr	r2, [r5, #20]
    e166:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e168:	686e      	ldr	r6, [r5, #4]
    e16a:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
    e16c:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e16e:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
    e170:	f046 0310 	orr.w	r3, r6, #16
    e174:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e176:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    e178:	f7ff fc4e 	bl	da18 <am_hal_interrupt_master_disable>
    e17c:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
    e17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e180:	f442 7640 	orr.w	r6, r2, #768	; 0x300
    e184:	f046 0001 	orr.w	r0, r6, #1
    e188:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e18a:	9803      	ldr	r0, [sp, #12]
    e18c:	f7ff fc48 	bl	da20 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e190:	6827      	ldr	r7, [r4, #0]
    e192:	4930      	ldr	r1, [pc, #192]	; (e254 <am_hal_uart_configure+0x1a8>)
    e194:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
    e198:	428e      	cmp	r6, r1
    e19a:	d005      	beq.n	e1a8 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
    e19c:	2000      	movs	r0, #0
    e19e:	e7c5      	b.n	e12c <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
    e1a0:	2600      	movs	r6, #0
    e1a2:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    e1a4:	4835      	ldr	r0, [pc, #212]	; (e27c <am_hal_uart_configure+0x1d0>)
    e1a6:	e7c1      	b.n	e12c <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
    e1a8:	69a9      	ldr	r1, [r5, #24]
    e1aa:	6a2f      	ldr	r7, [r5, #32]
    e1ac:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
    e1b0:	b109      	cbz	r1, e1b6 <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
    e1b2:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
    e1b4:	b9f3      	cbnz	r3, e1f4 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e1b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e1b8:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    e1bc:	331c      	adds	r3, #28
    e1be:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
    e1c0:	f04f 0e00 	mov.w	lr, #0
    e1c4:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e1c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e1ca:	f022 0020 	bic.w	r0, r2, #32
    e1ce:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
    e1d0:	b117      	cbz	r7, e1d8 <am_hal_uart_configure+0x12c>
    e1d2:	f1b8 0f00 	cmp.w	r8, #0
    e1d6:	d123      	bne.n	e220 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1d8:	6827      	ldr	r7, [r4, #0]
    e1da:	491e      	ldr	r1, [pc, #120]	; (e254 <am_hal_uart_configure+0x1a8>)
    e1dc:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
    e1e0:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1e2:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
    e1e4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1e8:	d1d8      	bne.n	e19c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e1ea:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    e1ec:	f024 0350 	bic.w	r3, r4, #80	; 0x50
    e1f0:	63b3      	str	r3, [r6, #56]	; 0x38
    e1f2:	e79b      	b.n	e12c <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
    e1f4:	2201      	movs	r2, #1
    e1f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    e1fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1fe:	f000 fd41 	bl	ec84 <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e202:	6821      	ldr	r1, [r4, #0]
    e204:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
    e208:	42b5      	cmp	r5, r6
    e20a:	d1c7      	bne.n	e19c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e20e:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
    e212:	361c      	adds	r6, #28
    e214:	0336      	lsls	r6, r6, #12
    e216:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e218:	f042 0020 	orr.w	r0, r2, #32
    e21c:	63b0      	str	r0, [r6, #56]	; 0x38
    e21e:	e7d7      	b.n	e1d0 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
    e220:	2201      	movs	r2, #1
    e222:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    e226:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e22a:	4643      	mov	r3, r8
    e22c:	4639      	mov	r1, r7
    e22e:	f000 fd29 	bl	ec84 <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e232:	6826      	ldr	r6, [r4, #0]
    e234:	4a07      	ldr	r2, [pc, #28]	; (e254 <am_hal_uart_configure+0x1a8>)
    e236:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e23a:	4290      	cmp	r0, r2
    e23c:	d1ae      	bne.n	e19c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e23e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e240:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e244:	311c      	adds	r1, #28
    e246:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
    e248:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
    e24a:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e24c:	f044 0350 	orr.w	r3, r4, #80	; 0x50
    e250:	63ab      	str	r3, [r5, #56]	; 0x38
    e252:	e76b      	b.n	e12c <am_hal_uart_configure+0x80>
    e254:	01ea9e06 	.word	0x01ea9e06
    e258:	2dc6c000 	.word	0x2dc6c000
    e25c:	00b71b00 	.word	0x00b71b00
    e260:	08000003 	.word	0x08000003
    e264:	5b8d8000 	.word	0x5b8d8000
    e268:	016e3600 	.word	0x016e3600
    e26c:	0b71b000 	.word	0x0b71b000
    e270:	002dc6c0 	.word	0x002dc6c0
    e274:	16e36000 	.word	0x16e36000
    e278:	005b8d80 	.word	0x005b8d80
    e27c:	08000002 	.word	0x08000002

0000e280 <am_hal_uart_transfer>:
{
    e280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e284:	680e      	ldr	r6, [r1, #0]
{
    e286:	b091      	sub	sp, #68	; 0x44
    e288:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e28a:	b14e      	cbz	r6, e2a0 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e28c:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
    e28e:	bf18      	it	ne
    e290:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e294:	f000 80f6 	beq.w	e484 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
    e298:	4658      	mov	r0, fp
    e29a:	b011      	add	sp, #68	; 0x44
    e29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
    e2a0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e2a4:	684c      	ldr	r4, [r1, #4]
    e2a6:	9401      	str	r4, [sp, #4]
    e2a8:	688d      	ldr	r5, [r1, #8]
    e2aa:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
    e2ae:	f1bb 0f00 	cmp.w	fp, #0
    e2b2:	f000 8107 	beq.w	e4c4 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e2b6:	2d00      	cmp	r5, #0
    e2b8:	f000 8393 	beq.w	e9e2 <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e2bc:	2800      	cmp	r0, #0
    e2be:	f000 80df 	beq.w	e480 <am_hal_uart_transfer+0x200>
    e2c2:	6807      	ldr	r7, [r0, #0]
    e2c4:	497e      	ldr	r1, [pc, #504]	; (e4c0 <am_hal_uart_transfer+0x240>)
    e2c6:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
    e2ca:	4589      	cmp	r9, r1
    e2cc:	d00a      	beq.n	e2e4 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
    e2ce:	f1ba 0f00 	cmp.w	sl, #0
    e2d2:	d001      	beq.n	e2d8 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
    e2d4:	f8ca 6000 	str.w	r6, [sl]
    e2d8:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
    e2dc:	4658      	mov	r0, fp
    e2de:	b011      	add	sp, #68	; 0x44
    e2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e2e4:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e2e6:	4637      	mov	r7, r6
    e2e8:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e2ea:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
    e2ec:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    e2f0:	2a00      	cmp	r2, #0
    e2f2:	f040 822c 	bne.w	e74e <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
    e2f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e2fa:	2d00      	cmp	r5, #0
    e2fc:	f000 80a1 	beq.w	e442 <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e300:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
    e304:	341c      	adds	r4, #28
    e306:	0322      	lsls	r2, r4, #12
    e308:	6990      	ldr	r0, [r2, #24]
    e30a:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e30e:	2c00      	cmp	r4, #0
    e310:	f040 80a3 	bne.w	e45a <am_hal_uart_transfer+0x1da>
    e314:	1e6b      	subs	r3, r5, #1
    e316:	f013 0e07 	ands.w	lr, r3, #7
    e31a:	f101 3cff 	add.w	ip, r1, #4294967295
    e31e:	d048      	beq.n	e3b2 <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e320:	780c      	ldrb	r4, [r1, #0]
    e322:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e324:	6993      	ldr	r3, [r2, #24]
    e326:	069b      	lsls	r3, r3, #26
    e328:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
    e32a:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e32e:	f100 8085 	bmi.w	e43c <am_hal_uart_transfer+0x1bc>
    e332:	45a6      	cmp	lr, r4
    e334:	d03d      	beq.n	e3b2 <am_hal_uart_transfer+0x132>
    e336:	f1be 0f02 	cmp.w	lr, #2
    e33a:	d032      	beq.n	e3a2 <am_hal_uart_transfer+0x122>
    e33c:	f1be 0f03 	cmp.w	lr, #3
    e340:	d027      	beq.n	e392 <am_hal_uart_transfer+0x112>
    e342:	f1be 0f04 	cmp.w	lr, #4
    e346:	d01c      	beq.n	e382 <am_hal_uart_transfer+0x102>
    e348:	f1be 0f05 	cmp.w	lr, #5
    e34c:	d011      	beq.n	e372 <am_hal_uart_transfer+0xf2>
    e34e:	f1be 0f06 	cmp.w	lr, #6
    e352:	d006      	beq.n	e362 <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e354:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e358:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e35a:	6990      	ldr	r0, [r2, #24]
    e35c:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e35e:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e360:	d46c      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e362:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e366:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e368:	6991      	ldr	r1, [r2, #24]
    e36a:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e36c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e370:	d464      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e372:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e376:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e378:	6993      	ldr	r3, [r2, #24]
    e37a:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e37c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e380:	d45c      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e382:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e386:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e388:	6990      	ldr	r0, [r2, #24]
    e38a:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e38c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e390:	d454      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e392:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e396:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e398:	6991      	ldr	r1, [r2, #24]
    e39a:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e39c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3a0:	d44c      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3a2:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e3a6:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3a8:	6993      	ldr	r3, [r2, #24]
    e3aa:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ac:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3b0:	d444      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3b2:	3401      	adds	r4, #1
    e3b4:	f89c 1001 	ldrb.w	r1, [ip, #1]
    e3b8:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
    e3ba:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3bc:	4620      	mov	r0, r4
    e3be:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
    e3c2:	f000 81c2 	beq.w	e74a <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3c6:	6993      	ldr	r3, [r2, #24]
    e3c8:	0699      	lsls	r1, r3, #26
    e3ca:	d437      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3cc:	f89e 1001 	ldrb.w	r1, [lr, #1]
    e3d0:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3d2:	6993      	ldr	r3, [r2, #24]
    e3d4:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3d6:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3da:	d42f      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3dc:	f89c 4003 	ldrb.w	r4, [ip, #3]
    e3e0:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3e2:	6991      	ldr	r1, [r2, #24]
    e3e4:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3e6:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3ea:	d427      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ec:	f89c 3004 	ldrb.w	r3, [ip, #4]
    e3f0:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3f2:	6991      	ldr	r1, [r2, #24]
    e3f4:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3f6:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3fa:	d41f      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3fc:	f89c 4005 	ldrb.w	r4, [ip, #5]
    e400:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e402:	6993      	ldr	r3, [r2, #24]
    e404:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e406:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e40a:	d417      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e40c:	f89c 1006 	ldrb.w	r1, [ip, #6]
    e410:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e412:	6993      	ldr	r3, [r2, #24]
    e414:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e416:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e41a:	d40f      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e41c:	f89c 4007 	ldrb.w	r4, [ip, #7]
    e420:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e422:	6991      	ldr	r1, [r2, #24]
    e424:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e426:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e42a:	d407      	bmi.n	e43c <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e42c:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
    e430:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e432:	6991      	ldr	r1, [r2, #24]
    e434:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e436:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e43a:	d5ba      	bpl.n	e3b2 <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
    e43c:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
    e43e:	4426      	add	r6, r4
        if (ui32RemainingBytes)
    e440:	d10b      	bne.n	e45a <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
    e442:	f1ba 0f00 	cmp.w	sl, #0
    e446:	f000 817d 	beq.w	e744 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
    e44a:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
    e44e:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
    e450:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
    e454:	b011      	add	sp, #68	; 0x44
    e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e45a:	2001      	movs	r0, #1
    e45c:	f7ff f866 	bl	d52c <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e460:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e464:	bf18      	it	ne
    e466:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e468:	45bb      	cmp	fp, r7
    e46a:	d9ea      	bls.n	e442 <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e46c:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e470:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e472:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
    e476:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e478:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e47a:	f47f af28 	bne.w	e2ce <am_hal_uart_transfer+0x4e>
    e47e:	e735      	b.n	e2ec <am_hal_uart_transfer+0x6c>
    e480:	4606      	mov	r6, r0
    e482:	e724      	b.n	e2ce <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
    e484:	684b      	ldr	r3, [r1, #4]
    e486:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e48a:	688c      	ldr	r4, [r1, #8]
    e48c:	690f      	ldr	r7, [r1, #16]
    e48e:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
    e490:	f1bb 0f00 	cmp.w	fp, #0
    e494:	f000 80c9 	beq.w	e62a <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e498:	2c00      	cmp	r4, #0
    e49a:	f000 8150 	beq.w	e73e <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e49e:	b130      	cbz	r0, e4ae <am_hal_uart_transfer+0x22e>
    e4a0:	6800      	ldr	r0, [r0, #0]
    e4a2:	4a07      	ldr	r2, [pc, #28]	; (e4c0 <am_hal_uart_transfer+0x240>)
    e4a4:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e4a8:	4291      	cmp	r1, r2
    e4aa:	f000 8186 	beq.w	e7ba <am_hal_uart_transfer+0x53a>
    e4ae:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
    e4b0:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
    e4b4:	2f00      	cmp	r7, #0
    e4b6:	f43f aeef 	beq.w	e298 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
    e4ba:	603d      	str	r5, [r7, #0]
    e4bc:	e6ec      	b.n	e298 <am_hal_uart_transfer+0x18>
    e4be:	bf00      	nop
    e4c0:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e4c4:	2800      	cmp	r0, #0
    e4c6:	f43f af07 	beq.w	e2d8 <am_hal_uart_transfer+0x58>
    e4ca:	6807      	ldr	r7, [r0, #0]
    e4cc:	4cac      	ldr	r4, [pc, #688]	; (e780 <am_hal_uart_transfer+0x500>)
    e4ce:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
    e4d2:	42a3      	cmp	r3, r4
    e4d4:	f47f af00 	bne.w	e2d8 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
    e4d8:	f1ba 0f00 	cmp.w	sl, #0
    e4dc:	d001      	beq.n	e4e2 <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
    e4de:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
    e4e2:	2d00      	cmp	r5, #0
    e4e4:	f000 812e 	beq.w	e744 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
    e4e8:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
    e4ec:	2c00      	cmp	r4, #0
    e4ee:	f040 8290 	bne.w	ea12 <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e4f2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e4f6:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    e4fa:	311c      	adds	r1, #28
    e4fc:	030a      	lsls	r2, r1, #12
    e4fe:	6996      	ldr	r6, [r2, #24]
    e500:	f3c6 1740 	ubfx	r7, r6, #5, #1
    e504:	2f00      	cmp	r7, #0
    e506:	f040 8089 	bne.w	e61c <am_hal_uart_transfer+0x39c>
    e50a:	f105 38ff 	add.w	r8, r5, #4294967295
    e50e:	9b01      	ldr	r3, [sp, #4]
    e510:	f018 0007 	ands.w	r0, r8, #7
    e514:	463c      	mov	r4, r7
    e516:	f103 31ff 	add.w	r1, r3, #4294967295
    e51a:	d042      	beq.n	e5a2 <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e51c:	781e      	ldrb	r6, [r3, #0]
    e51e:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e520:	6997      	ldr	r7, [r2, #24]
    e522:	4619      	mov	r1, r3
    e524:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e526:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e52a:	d477      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
    e52c:	42a0      	cmp	r0, r4
    e52e:	d038      	beq.n	e5a2 <am_hal_uart_transfer+0x322>
    e530:	2802      	cmp	r0, #2
    e532:	d02e      	beq.n	e592 <am_hal_uart_transfer+0x312>
    e534:	2803      	cmp	r0, #3
    e536:	d024      	beq.n	e582 <am_hal_uart_transfer+0x302>
    e538:	2804      	cmp	r0, #4
    e53a:	d01a      	beq.n	e572 <am_hal_uart_transfer+0x2f2>
    e53c:	2805      	cmp	r0, #5
    e53e:	d010      	beq.n	e562 <am_hal_uart_transfer+0x2e2>
    e540:	2806      	cmp	r0, #6
    e542:	d006      	beq.n	e552 <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e548:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e54a:	6990      	ldr	r0, [r2, #24]
    e54c:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e54e:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e550:	d464      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e552:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e556:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e558:	6997      	ldr	r7, [r2, #24]
    e55a:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e55c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e560:	d45c      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e562:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e566:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e568:	6990      	ldr	r0, [r2, #24]
    e56a:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e56c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e570:	d454      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e572:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e576:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e578:	6997      	ldr	r7, [r2, #24]
    e57a:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e57c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e580:	d44c      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e582:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e586:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e588:	6990      	ldr	r0, [r2, #24]
    e58a:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e58c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e590:	d444      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e592:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e596:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e598:	6997      	ldr	r7, [r2, #24]
    e59a:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e59c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5a0:	d43c      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5a2:	3401      	adds	r4, #1
    e5a4:	784b      	ldrb	r3, [r1, #1]
    e5a6:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
    e5a8:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5aa:	4623      	mov	r3, r4
    e5ac:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
    e5b0:	d034      	beq.n	e61c <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5b2:	6996      	ldr	r6, [r2, #24]
    e5b4:	06b6      	lsls	r6, r6, #26
    e5b6:	d431      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5b8:	7847      	ldrb	r7, [r0, #1]
    e5ba:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5bc:	6990      	ldr	r0, [r2, #24]
    e5be:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5c0:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5c4:	d42a      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5c6:	78cc      	ldrb	r4, [r1, #3]
    e5c8:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5ca:	6996      	ldr	r6, [r2, #24]
    e5cc:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5ce:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5d2:	d423      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5d4:	790f      	ldrb	r7, [r1, #4]
    e5d6:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5d8:	6990      	ldr	r0, [r2, #24]
    e5da:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5dc:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5e0:	d41c      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5e2:	794c      	ldrb	r4, [r1, #5]
    e5e4:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5e6:	6996      	ldr	r6, [r2, #24]
    e5e8:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5ea:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5ee:	d415      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5f0:	798f      	ldrb	r7, [r1, #6]
    e5f2:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5f4:	6990      	ldr	r0, [r2, #24]
    e5f6:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5f8:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5fc:	d40e      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5fe:	79cc      	ldrb	r4, [r1, #7]
    e600:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e602:	6996      	ldr	r6, [r2, #24]
    e604:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e606:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e60a:	d407      	bmi.n	e61c <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e60c:	f811 7f08 	ldrb.w	r7, [r1, #8]!
    e610:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e612:	6990      	ldr	r0, [r2, #24]
    e614:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e616:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e61a:	d5c2      	bpl.n	e5a2 <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
    e61c:	f1ba 0f00 	cmp.w	sl, #0
    e620:	f000 8090 	beq.w	e744 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
    e624:	f8ca 4000 	str.w	r4, [sl]
    e628:	e636      	b.n	e298 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e62a:	2800      	cmp	r0, #0
    e62c:	f43f ae54 	beq.w	e2d8 <am_hal_uart_transfer+0x58>
    e630:	6805      	ldr	r5, [r0, #0]
    e632:	4e53      	ldr	r6, [pc, #332]	; (e780 <am_hal_uart_transfer+0x500>)
    e634:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    e638:	45b4      	cmp	ip, r6
    e63a:	f47f ae4d 	bne.w	e2d8 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
    e63e:	b10f      	cbz	r7, e644 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
    e640:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
    e644:	2c00      	cmp	r4, #0
    e646:	d07d      	beq.n	e744 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
    e648:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e64c:	2800      	cmp	r0, #0
    e64e:	f040 8213 	bne.w	ea78 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e652:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e656:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    e65a:	311c      	adds	r1, #28
    e65c:	0309      	lsls	r1, r1, #12
    e65e:	698a      	ldr	r2, [r1, #24]
    e660:	f3c2 1500 	ubfx	r5, r2, #4, #1
    e664:	2d00      	cmp	r5, #0
    e666:	f040 8287 	bne.w	eb78 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
    e66a:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e66c:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
    e670:	f040 81cc 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
    e674:	1e66      	subs	r6, r4, #1
    e676:	f016 0203 	ands.w	r2, r6, #3
    e67a:	4655      	mov	r5, sl
    e67c:	f109 30ff 	add.w	r0, r9, #4294967295
    e680:	d02b      	beq.n	e6da <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e682:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e686:	698b      	ldr	r3, [r1, #24]
    e688:	06de      	lsls	r6, r3, #27
    e68a:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e68c:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e690:	f53f af10 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e694:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e696:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e69a:	f040 81b7 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
    e69e:	42aa      	cmp	r2, r5
    e6a0:	d01b      	beq.n	e6da <am_hal_uart_transfer+0x45a>
    e6a2:	2a02      	cmp	r2, #2
    e6a4:	d00c      	beq.n	e6c0 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6a6:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6aa:	698e      	ldr	r6, [r1, #24]
    e6ac:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6ae:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6b2:	f53f aeff 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6b6:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6b8:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e6bc:	f040 81a6 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6c0:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6c4:	698a      	ldr	r2, [r1, #24]
    e6c6:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6c8:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6cc:	f53f aef2 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6d0:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6d2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e6d6:	f040 8199 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6da:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
    e6dc:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6de:	7043      	strb	r3, [r0, #1]
    e6e0:	f100 0601 	add.w	r6, r0, #1
    e6e4:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
    e6e6:	f43f aee5 	beq.w	e4b4 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6ea:	698a      	ldr	r2, [r1, #24]
    e6ec:	06d2      	lsls	r2, r2, #27
    e6ee:	f53f aee1 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6f2:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6f4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e6f8:	f040 8188 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6fc:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6fe:	698e      	ldr	r6, [r1, #24]
    e700:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e702:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e706:	f53f aed5 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e70a:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e70c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e710:	f040 817c 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e714:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e716:	698e      	ldr	r6, [r1, #24]
    e718:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e71a:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e71e:	f53f aec9 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e722:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e724:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e728:	f040 8170 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e72c:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e730:	698e      	ldr	r6, [r1, #24]
    e732:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e734:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e738:	f53f aebc 	bmi.w	e4b4 <am_hal_uart_transfer+0x234>
    e73c:	e7c8      	b.n	e6d0 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e73e:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
    e740:	b107      	cbz	r7, e744 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
    e742:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
    e744:	f04f 0b00 	mov.w	fp, #0
    e748:	e5a6      	b.n	e298 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
    e74a:	442e      	add	r6, r5
    e74c:	e679      	b.n	e442 <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    e74e:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    e752:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    e756:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
    e758:	42ac      	cmp	r4, r5
    e75a:	bf28      	it	cs
    e75c:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e75e:	4622      	mov	r2, r4
    e760:	9802      	ldr	r0, [sp, #8]
    e762:	f000 fa9b 	bl	ec9c <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    e766:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e76a:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
    e76c:	f7ff f954 	bl	da18 <am_hal_interrupt_master_disable>
    e770:	9903      	ldr	r1, [sp, #12]
    e772:	9008      	str	r0, [sp, #32]
    e774:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    e778:	321c      	adds	r2, #28
    e77a:	0313      	lsls	r3, r2, #12
    e77c:	9303      	str	r3, [sp, #12]
    e77e:	e010      	b.n	e7a2 <am_hal_uart_transfer+0x522>
    e780:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e784:	f000 fb8e 	bl	eea4 <am_hal_queue_item_get>
    e788:	b198      	cbz	r0, e7b2 <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e78a:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e78e:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
    e792:	331c      	adds	r3, #28
    e794:	0318      	lsls	r0, r3, #12
    e796:	6981      	ldr	r1, [r0, #24]
    e798:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e79a:	bf5c      	itt	pl
    e79c:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e7a0:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7a2:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7a4:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7a6:	699b      	ldr	r3, [r3, #24]
    e7a8:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7aa:	f04f 0201 	mov.w	r2, #1
    e7ae:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7b0:	d5e8      	bpl.n	e784 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
    e7b2:	9808      	ldr	r0, [sp, #32]
    e7b4:	f7ff f934 	bl	da20 <am_hal_interrupt_master_set>
    e7b8:	e640      	b.n	e43c <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e7ba:	2600      	movs	r6, #0
    e7bc:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e7be:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e7c2:	9101      	str	r1, [sp, #4]
    e7c4:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e7c6:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
    e7c8:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e7cc:	2800      	cmp	r0, #0
    e7ce:	f040 8089 	bne.w	e8e4 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
    e7d2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e7d6:	2c00      	cmp	r4, #0
    e7d8:	d0b2      	beq.n	e740 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e7da:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
    e7de:	311c      	adds	r1, #28
    e7e0:	030a      	lsls	r2, r1, #12
    e7e2:	6993      	ldr	r3, [r2, #24]
    e7e4:	06d8      	lsls	r0, r3, #27
    e7e6:	d466      	bmi.n	e8b6 <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
    e7e8:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e7ea:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
    e7ee:	f040 810d 	bne.w	ea0c <am_hal_uart_transfer+0x78c>
    e7f2:	f104 3eff 	add.w	lr, r4, #4294967295
    e7f6:	f01e 0e03 	ands.w	lr, lr, #3
    e7fa:	f109 30ff 	add.w	r0, r9, #4294967295
    e7fe:	d029      	beq.n	e854 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e800:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e804:	6991      	ldr	r1, [r2, #24]
    e806:	06c9      	lsls	r1, r1, #27
    e808:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e80a:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e80e:	d44e      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e810:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e812:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e816:	f040 80e0 	bne.w	e9da <am_hal_uart_transfer+0x75a>
    e81a:	459e      	cmp	lr, r3
    e81c:	d01a      	beq.n	e854 <am_hal_uart_transfer+0x5d4>
    e81e:	f1be 0f02 	cmp.w	lr, #2
    e822:	d00b      	beq.n	e83c <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e824:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e828:	6991      	ldr	r1, [r2, #24]
    e82a:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e82c:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e830:	d43d      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e832:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e834:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e838:	f040 80cf 	bne.w	e9da <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e83c:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e840:	6991      	ldr	r1, [r2, #24]
    e842:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e844:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e848:	d431      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e84a:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e84c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e850:	f040 80c3 	bne.w	e9da <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e854:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
    e856:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e858:	7041      	strb	r1, [r0, #1]
    e85a:	469e      	mov	lr, r3
    e85c:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
    e860:	d025      	beq.n	e8ae <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e862:	6991      	ldr	r1, [r2, #24]
    e864:	06c9      	lsls	r1, r1, #27
    e866:	d422      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e868:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e86a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e86e:	f040 80b4 	bne.w	e9da <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e872:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e876:	6991      	ldr	r1, [r2, #24]
    e878:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e87a:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e87e:	d416      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e880:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e882:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e886:	f040 80a8 	bne.w	e9da <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e88a:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e88c:	6991      	ldr	r1, [r2, #24]
    e88e:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e890:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e894:	d40b      	bmi.n	e8ae <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e896:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e898:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e89c:	f040 809d 	bne.w	e9da <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8a0:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8a4:	6991      	ldr	r1, [r2, #24]
    e8a6:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8a8:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8ac:	d5cd      	bpl.n	e84a <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
    e8ae:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
    e8b0:	441d      	add	r5, r3
        if (ui32RemainingBytes)
    e8b2:	f43f af45 	beq.w	e740 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e8b6:	2001      	movs	r0, #1
    e8b8:	f7fe fe38 	bl	d52c <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e8bc:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e8c0:	bf18      	it	ne
    e8c2:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e8c4:	45b3      	cmp	fp, r6
    e8c6:	f67f af3b 	bls.w	e740 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e8ca:	f8d8 0000 	ldr.w	r0, [r8]
    e8ce:	9a01      	ldr	r2, [sp, #4]
    e8d0:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e8d4:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
    e8d6:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e8da:	f43f af75 	beq.w	e7c8 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e8de:	f04f 0b02 	mov.w	fp, #2
    e8e2:	e5e7      	b.n	e4b4 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
    e8e4:	f7ff f898 	bl	da18 <am_hal_interrupt_master_disable>
    e8e8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e8ec:	9007      	str	r0, [sp, #28]
    e8ee:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e8f2:	301c      	adds	r0, #28
    uint32_t i = 0;
    e8f4:	f8cd a00c 	str.w	sl, [sp, #12]
    e8f8:	0303      	lsls	r3, r0, #12
    e8fa:	f10d 0c20 	add.w	ip, sp, #32
    e8fe:	2200      	movs	r2, #0
    e900:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e902:	699c      	ldr	r4, [r3, #24]
    e904:	06e1      	lsls	r1, r4, #27
    e906:	d45a      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e908:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e90a:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e90e:	d17a      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e910:	46e6      	mov	lr, ip
    e912:	3201      	adds	r2, #1
    e914:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e918:	6999      	ldr	r1, [r3, #24]
    e91a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e91c:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e91e:	d44e      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e920:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e922:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e926:	d16e      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e928:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e92c:	6999      	ldr	r1, [r3, #24]
    e92e:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e930:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e934:	d443      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e936:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e938:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e93c:	d163      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e93e:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e942:	699c      	ldr	r4, [r3, #24]
    e944:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e946:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e94a:	d438      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e94c:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e94e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e952:	d158      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e954:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e958:	699c      	ldr	r4, [r3, #24]
    e95a:	06e4      	lsls	r4, r4, #27
    e95c:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e960:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e964:	d42b      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e966:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e968:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e96c:	d14b      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e96e:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e972:	6999      	ldr	r1, [r3, #24]
    e974:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e976:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e97a:	d420      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e97c:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e97e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e982:	d140      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e984:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e988:	6999      	ldr	r1, [r3, #24]
    e98a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e98c:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e990:	d415      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e992:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e994:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e998:	d135      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e99a:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e99e:	699c      	ldr	r4, [r3, #24]
    e9a0:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9a2:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9a6:	d40a      	bmi.n	e9be <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e9a8:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e9aa:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e9ae:	d12a      	bne.n	ea06 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9b0:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    e9b2:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9b4:	f88e 1006 	strb.w	r1, [lr, #6]
    e9b8:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
    e9bc:	d1a1      	bne.n	e902 <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e9be:	a908      	add	r1, sp, #32
    e9c0:	9802      	ldr	r0, [sp, #8]
    e9c2:	4654      	mov	r4, sl
    e9c4:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e9c8:	f000 f968 	bl	ec9c <am_hal_queue_item_add>
    e9cc:	b958      	cbnz	r0, e9e6 <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    e9ce:	f8df b1b4 	ldr.w	fp, [pc, #436]	; eb84 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    e9d2:	9807      	ldr	r0, [sp, #28]
    e9d4:	f7ff f824 	bl	da20 <am_hal_interrupt_master_set>
    e9d8:	e56c      	b.n	e4b4 <am_hal_uart_transfer+0x234>
    e9da:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    e9dc:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    e9e0:	e568      	b.n	e4b4 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e9e2:	462e      	mov	r6, r5
    e9e4:	e52d      	b.n	e442 <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
    e9e6:	9807      	ldr	r0, [sp, #28]
    e9e8:	f7ff f81a 	bl	da20 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    e9ec:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    e9f0:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
    e9f2:	42a3      	cmp	r3, r4
    e9f4:	bf28      	it	cs
    e9f6:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    e9f8:	461a      	mov	r2, r3
    e9fa:	4649      	mov	r1, r9
    e9fc:	9303      	str	r3, [sp, #12]
    e9fe:	f000 fa51 	bl	eea4 <am_hal_queue_item_get>
    ea02:	9b03      	ldr	r3, [sp, #12]
    ea04:	e753      	b.n	e8ae <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ea06:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ea0a:	e7e2      	b.n	e9d2 <am_hal_uart_transfer+0x752>
    ea0c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ea10:	e550      	b.n	e4b4 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    ea12:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    ea16:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    ea1a:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
    ea1c:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea1e:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
    ea22:	bf28      	it	cs
    ea24:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea26:	9901      	ldr	r1, [sp, #4]
    ea28:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
    ea2a:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea2c:	f000 f936 	bl	ec9c <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    ea30:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
    ea34:	f7fe fff0 	bl	da18 <am_hal_interrupt_master_disable>
    ea38:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    ea3c:	331c      	adds	r3, #28
    ea3e:	031d      	lsls	r5, r3, #12
    ea40:	9005      	str	r0, [sp, #20]
    ea42:	e00e      	b.n	ea62 <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ea44:	f000 fa2e 	bl	eea4 <am_hal_queue_item_get>
    ea48:	b190      	cbz	r0, ea70 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea4a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    ea4e:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    ea52:	321c      	adds	r2, #28
    ea54:	0311      	lsls	r1, r2, #12
    ea56:	698e      	ldr	r6, [r1, #24]
    ea58:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea5a:	bf5c      	itt	pl
    ea5c:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ea60:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ea62:	69af      	ldr	r7, [r5, #24]
    ea64:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ea66:	f04f 0201 	mov.w	r2, #1
    ea6a:	a908      	add	r1, sp, #32
    ea6c:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ea6e:	d5e9      	bpl.n	ea44 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
    ea70:	9805      	ldr	r0, [sp, #20]
    ea72:	f7fe ffd5 	bl	da20 <am_hal_interrupt_master_set>
    ea76:	e5d1      	b.n	e61c <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
    ea78:	f7fe ffce 	bl	da18 <am_hal_interrupt_master_disable>
    ea7c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ea80:	9006      	str	r0, [sp, #24]
    ea82:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
    ea86:	301c      	adds	r0, #28
    ea88:	0301      	lsls	r1, r0, #12
    ea8a:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
    ea8c:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ea8e:	698e      	ldr	r6, [r1, #24]
    ea90:	06f0      	lsls	r0, r6, #27
    ea92:	d455      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ea94:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ea96:	f415 6f70 	tst.w	r5, #3840	; 0xf00
    ea9a:	d16f      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ea9c:	4618      	mov	r0, r3
    ea9e:	3201      	adds	r2, #1
    eaa0:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eaa4:	698e      	ldr	r6, [r1, #24]
    eaa6:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eaa8:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eaaa:	d449      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eaac:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eaae:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eab2:	d163      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eab4:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eab6:	698e      	ldr	r6, [r1, #24]
    eab8:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eaba:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eabe:	d43f      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eac0:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eac2:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eac6:	d159      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eac8:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eaca:	f8d1 e018 	ldr.w	lr, [r1, #24]
    eace:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    ead2:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ead6:	d133      	bne.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ead8:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eada:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eade:	d14d      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eae0:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eae2:	698e      	ldr	r6, [r1, #24]
    eae4:	06f6      	lsls	r6, r6, #27
    eae6:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    eaea:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eaee:	d427      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eaf0:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eaf2:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eaf6:	d141      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eaf8:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eafa:	698b      	ldr	r3, [r1, #24]
    eafc:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eafe:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb02:	d41d      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb04:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb06:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eb0a:	d137      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb0c:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb0e:	698b      	ldr	r3, [r1, #24]
    eb10:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb12:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb16:	d413      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb18:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb1a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eb1e:	d12d      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb20:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb22:	698e      	ldr	r6, [r1, #24]
    eb24:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb26:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb2a:	d409      	bmi.n	eb40 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb2c:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb2e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb32:	d123      	bne.n	eb7c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb34:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
    eb36:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb38:	7183      	strb	r3, [r0, #6]
    eb3a:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
    eb3e:	d1a6      	bne.n	ea8e <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    eb40:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    eb44:	a908      	add	r1, sp, #32
    eb46:	4650      	mov	r0, sl
    eb48:	f000 f8a8 	bl	ec9c <am_hal_queue_item_add>
    eb4c:	b930      	cbnz	r0, eb5c <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    eb4e:	f8df b034 	ldr.w	fp, [pc, #52]	; eb84 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    eb52:	9806      	ldr	r0, [sp, #24]
    eb54:	f7fe ff64 	bl	da20 <am_hal_interrupt_master_set>
    eb58:	f7ff bb9e 	b.w	e298 <am_hal_uart_transfer+0x18>
    eb5c:	9806      	ldr	r0, [sp, #24]
    eb5e:	f7fe ff5f 	bl	da20 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    eb62:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    eb66:	42a5      	cmp	r5, r4
    eb68:	bf28      	it	cs
    eb6a:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    eb6c:	4649      	mov	r1, r9
    eb6e:	4650      	mov	r0, sl
    eb70:	462a      	mov	r2, r5
    eb72:	f000 f997 	bl	eea4 <am_hal_queue_item_get>
    eb76:	e49d      	b.n	e4b4 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
    eb78:	4605      	mov	r5, r0
    eb7a:	e49b      	b.n	e4b4 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    eb7c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    eb80:	e7e7      	b.n	eb52 <am_hal_uart_transfer+0x8d2>
    eb82:	bf00      	nop
    eb84:	08000001 	.word	0x08000001

0000eb88 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    eb88:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    eb8c:	b570      	push	{r4, r5, r6, lr}
    eb8e:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    eb90:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    eb92:	b183      	cbz	r3, ebb6 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    eb94:	6b40      	ldr	r0, [r0, #52]	; 0x34
    eb96:	b170      	cbz	r0, ebb6 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    eb98:	4e13      	ldr	r6, [pc, #76]	; (ebe8 <am_hal_uart_tx_flush+0x60>)
    eb9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    eb9c:	fbb6 f2f1 	udiv	r2, r6, r1
    eba0:	2a02      	cmp	r2, #2
    eba2:	ea4f 1002 	mov.w	r0, r2, lsl #4
    eba6:	bf8c      	ite	hi
    eba8:	3829      	subhi	r0, #41	; 0x29
    ebaa:	2001      	movls	r0, #1
    ebac:	f7fe fcbe 	bl	d52c <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    ebb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d1f1      	bne.n	eb9a <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ebb6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ebba:	351c      	adds	r5, #28
    ebbc:	032d      	lsls	r5, r5, #12
    ebbe:	69a8      	ldr	r0, [r5, #24]
    ebc0:	0702      	lsls	r2, r0, #28
    ebc2:	d50e      	bpl.n	ebe2 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    ebc4:	4e08      	ldr	r6, [pc, #32]	; (ebe8 <am_hal_uart_tx_flush+0x60>)
    ebc6:	6e21      	ldr	r1, [r4, #96]	; 0x60
    ebc8:	fbb6 f2f1 	udiv	r2, r6, r1
    ebcc:	2a02      	cmp	r2, #2
    ebce:	ea4f 1002 	mov.w	r0, r2, lsl #4
    ebd2:	bf8c      	ite	hi
    ebd4:	3829      	subhi	r0, #41	; 0x29
    ebd6:	2001      	movls	r0, #1
    ebd8:	f7fe fca8 	bl	d52c <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ebdc:	69ab      	ldr	r3, [r5, #24]
    ebde:	071b      	lsls	r3, r3, #28
    ebe0:	d4f1      	bmi.n	ebc6 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    ebe2:	2000      	movs	r0, #0
    ebe4:	bd70      	pop	{r4, r5, r6, pc}
    ebe6:	bf00      	nop
    ebe8:	00b71b00 	.word	0x00b71b00

0000ebec <am_hal_wdt_init>:
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
#if AM_CMSIS_REGS
    ui32ConfigVal = psConfig->ui32Config & ~(WDT_CFG_INTVAL_Msk | WDT_CFG_RESVAL_Msk);
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_INTVAL, ui16IntCount);
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_RESVAL, ui16ResetCount);
    ebec:	88c2      	ldrh	r2, [r0, #6]
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_INTVAL, ui16IntCount);
    ebee:	8883      	ldrh	r3, [r0, #4]
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    ebf0:	6801      	ldr	r1, [r0, #0]
{
    ebf2:	b410      	push	{r4}
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_INTVAL, ui16IntCount);
    ebf4:	0418      	lsls	r0, r3, #16
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_RESVAL, ui16ResetCount);
    ebf6:	0214      	lsls	r4, r2, #8
    ebf8:	b2a2      	uxth	r2, r4
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_INTVAL, ui16IntCount);
    ebfa:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
    ui32ConfigVal = psConfig->ui32Config & ~(WDT_CFG_INTVAL_Msk | WDT_CFG_RESVAL_Msk);
    ebfe:	f421 0c7f 	bic.w	ip, r1, #16711680	; 0xff0000
    if ( bInterruptEnabled )
    {
        //
        // Enable the watchdog interrupt if the configuration calls for them.
        //
        WDT->INTEN |= WDT_INTEN_WDTINT_Msk;
    ec02:	4c16      	ldr	r4, [pc, #88]	; (ec5c <am_hal_wdt_init+0x70>)
    ui32ConfigVal = psConfig->ui32Config & ~(WDT_CFG_INTVAL_Msk | WDT_CFG_RESVAL_Msk);
    ec04:	f42c 407f 	bic.w	r0, ip, #65280	; 0xff00
    ui32ConfigVal |= _VAL2FLD(WDT_CFG_RESVAL, ui16ResetCount);
    ec08:	4313      	orrs	r3, r2
    ec0a:	4303      	orrs	r3, r0
        WDT->INTEN |= WDT_INTEN_WDTINT_Msk;
    ec0c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    if ( bInterruptEnabled )
    ec10:	f011 0f02 	tst.w	r1, #2
        WDT->INTEN |= WDT_INTEN_WDTINT_Msk;
    ec14:	bf14      	ite	ne
    ec16:	f040 0001 	orrne.w	r0, r0, #1
    {
        //
        // Disable the watchdog interrupt if the configuration doesn't call for
        // watchdog interrupts.
        //
        WDT->INTEN &= ~WDT_INTEN_WDTINT_Msk;
    ec1a:	f020 0001 	biceq.w	r0, r0, #1
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    ec1e:	f001 0204 	and.w	r2, r1, #4
        WDT->INTEN &= ~WDT_INTEN_WDTINT_Msk;
    ec22:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    if ( bResetEnabled )
    {
        //
        // Also enable watchdog resets in the reset module.
        //
        RSTGEN->CFG |= RSTGEN_CFG_WDREN_Msk;
    ec26:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    if ( bResetEnabled )
    ec2a:	b17a      	cbz	r2, ec4c <am_hal_wdt_init+0x60>
        RSTGEN->CFG |= RSTGEN_CFG_WDREN_Msk;
    ec2c:	f8dc 0000 	ldr.w	r0, [ip]
    ec30:	f040 0202 	orr.w	r2, r0, #2
    ec34:	f8cc 2000 	str.w	r2, [ip]

    //
    // Check for a user specified clock select. If none specified then
    // set 128Hz.
    //
    if ( !(psConfig->ui32Config & WDT_CFG_CLKSEL_Msk) )
    ec38:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    }

    //
    // Write the saved value to the watchdog configuration register.
    //
    WDT->CFG = ui32ConfigVal;
    ec3c:	4907      	ldr	r1, [pc, #28]	; (ec5c <am_hal_wdt_init+0x70>)
        ui32ConfigVal |= _VAL2FLD(WDT_CFG_CLKSEL, WDT_CFG_CLKSEL_128HZ);
    ec3e:	bf08      	it	eq
    ec40:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
    WDT->CFG = ui32ConfigVal;
    ec44:	600b      	str	r3, [r1, #0]
    //
    // Write the saved value to the watchdog configuration register.
    //
    AM_REGn(WDT, 0, CFG) = ui32ConfigVal;
#endif // AM_CMSIS_REGS
} // am_hal_wdt_init()
    ec46:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec4a:	4770      	bx	lr
        RSTGEN->CFG &= ~RSTGEN_CFG_WDREN_Msk;
    ec4c:	f8dc 2000 	ldr.w	r2, [ip]
    ec50:	f022 0402 	bic.w	r4, r2, #2
    ec54:	f8cc 4000 	str.w	r4, [ip]
    ec58:	e7ee      	b.n	ec38 <am_hal_wdt_init+0x4c>
    ec5a:	bf00      	nop
    ec5c:	40024000 	.word	0x40024000

0000ec60 <am_hal_wdt_start>:
    //
    // Make sure the watchdog timer is in the "reset" state, and then set the
    // enable bit to start counting.
    //
#if AM_CMSIS_REGS
    WDT->CFG   |= WDT_CFG_WDTEN_Msk;
    ec60:	4b03      	ldr	r3, [pc, #12]	; (ec70 <am_hal_wdt_start+0x10>)
    ec62:	681a      	ldr	r2, [r3, #0]
    WDT->RSTRT  = WDT_RSTRT_RSTRT_KEYVALUE;
    ec64:	21b2      	movs	r1, #178	; 0xb2
    WDT->CFG   |= WDT_CFG_WDTEN_Msk;
    ec66:	f042 0001 	orr.w	r0, r2, #1
    ec6a:	6018      	str	r0, [r3, #0]
    WDT->RSTRT  = WDT_RSTRT_RSTRT_KEYVALUE;
    ec6c:	6059      	str	r1, [r3, #4]
    ec6e:	4770      	bx	lr
    ec70:	40024000 	.word	0x40024000

0000ec74 <am_hal_wdt_int_clear>:
//*****************************************************************************
void
am_hal_wdt_int_clear(void)
{
#if AM_CMSIS_REGS
    WDT->INTCLR = WDT_INTCLR_WDTINT_Msk;
    ec74:	4b02      	ldr	r3, [pc, #8]	; (ec80 <am_hal_wdt_int_clear+0xc>)
    ec76:	2201      	movs	r2, #1
    ec78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    ec7c:	4770      	bx	lr
    ec7e:	bf00      	nop
    ec80:	40024000 	.word	0x40024000

0000ec84 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    ec84:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    ec86:	2400      	movs	r4, #0
    ec88:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    ec8a:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    ec8c:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    ec8e:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    ec90:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    ec92:	6141      	str	r1, [r0, #20]
}
    ec94:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec98:	4770      	bx	lr
    ec9a:	bf00      	nop

0000ec9c <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    ec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec9e:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eca0:	6905      	ldr	r5, [r0, #16]
{
    eca2:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eca4:	fb05 f502 	mul.w	r5, r5, r2
{
    eca8:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
    ecaa:	f7fe feb5 	bl	da18 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    ecae:	68e3      	ldr	r3, [r4, #12]
    ecb0:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
    ecb2:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    ecb4:	1a99      	subs	r1, r3, r2
    ecb6:	428d      	cmp	r5, r1
    ecb8:	f200 8081 	bhi.w	edbe <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecbc:	2d00      	cmp	r5, #0
    ecbe:	d075      	beq.n	edac <am_hal_queue_item_add+0x110>
    ecc0:	6826      	ldr	r6, [r4, #0]
    ecc2:	2f00      	cmp	r7, #0
    ecc4:	d07d      	beq.n	edc2 <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ecc6:	4638      	mov	r0, r7
    ecc8:	6963      	ldr	r3, [r4, #20]
    ecca:	f810 2b01 	ldrb.w	r2, [r0], #1
    ecce:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ecd0:	6821      	ldr	r1, [r4, #0]
    ecd2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    ecd6:	1c4a      	adds	r2, r1, #1
    ecd8:	197e      	adds	r6, r7, r5
    ecda:	43ff      	mvns	r7, r7
    ecdc:	fbb2 fcfe 	udiv	ip, r2, lr
    ece0:	4437      	add	r7, r6
    ece2:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ece6:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ece8:	6023      	str	r3, [r4, #0]
    ecea:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ecee:	d05c      	beq.n	edaa <am_hal_queue_item_add+0x10e>
    ecf0:	b349      	cbz	r1, ed46 <am_hal_queue_item_add+0xaa>
    ecf2:	2901      	cmp	r1, #1
    ecf4:	d019      	beq.n	ed2a <am_hal_queue_item_add+0x8e>
    ecf6:	2902      	cmp	r1, #2
    ecf8:	d00b      	beq.n	ed12 <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ecfa:	6962      	ldr	r2, [r4, #20]
    ecfc:	f810 7b01 	ldrb.w	r7, [r0], #1
    ed00:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed02:	6823      	ldr	r3, [r4, #0]
    ed04:	68e1      	ldr	r1, [r4, #12]
    ed06:	1c5a      	adds	r2, r3, #1
    ed08:	fbb2 f7f1 	udiv	r7, r2, r1
    ed0c:	fb01 2317 	mls	r3, r1, r7, r2
    ed10:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed12:	6962      	ldr	r2, [r4, #20]
    ed14:	f810 1b01 	ldrb.w	r1, [r0], #1
    ed18:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed1a:	6823      	ldr	r3, [r4, #0]
    ed1c:	68e7      	ldr	r7, [r4, #12]
    ed1e:	1c5a      	adds	r2, r3, #1
    ed20:	fbb2 f1f7 	udiv	r1, r2, r7
    ed24:	fb07 2311 	mls	r3, r7, r1, r2
    ed28:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed2a:	6967      	ldr	r7, [r4, #20]
    ed2c:	f810 2b01 	ldrb.w	r2, [r0], #1
    ed30:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed32:	6823      	ldr	r3, [r4, #0]
    ed34:	68e1      	ldr	r1, [r4, #12]
    ed36:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed38:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed3a:	fbb7 f2f1 	udiv	r2, r7, r1
    ed3e:	fb01 7312 	mls	r3, r1, r2, r7
    ed42:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ed44:	d031      	beq.n	edaa <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed46:	4686      	mov	lr, r0
    ed48:	6967      	ldr	r7, [r4, #20]
    ed4a:	f81e 1b01 	ldrb.w	r1, [lr], #1
    ed4e:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed50:	6823      	ldr	r3, [r4, #0]
    ed52:	68e2      	ldr	r2, [r4, #12]
    ed54:	1c5f      	adds	r7, r3, #1
    ed56:	fbb7 f1f2 	udiv	r1, r7, r2
    ed5a:	fb02 7311 	mls	r3, r2, r1, r7
    ed5e:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed60:	6962      	ldr	r2, [r4, #20]
    ed62:	7847      	ldrb	r7, [r0, #1]
    ed64:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed66:	6823      	ldr	r3, [r4, #0]
    ed68:	68e1      	ldr	r1, [r4, #12]
    ed6a:	1c5f      	adds	r7, r3, #1
    ed6c:	fbb7 f2f1 	udiv	r2, r7, r1
    ed70:	fb01 7312 	mls	r3, r1, r2, r7
    ed74:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed76:	6961      	ldr	r1, [r4, #20]
    ed78:	f89e 7001 	ldrb.w	r7, [lr, #1]
    ed7c:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed7e:	6822      	ldr	r2, [r4, #0]
    ed80:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed82:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed84:	3201      	adds	r2, #1
    ed86:	fbb2 fcf7 	udiv	ip, r2, r7
    ed8a:	fb07 231c 	mls	r3, r7, ip, r2
    ed8e:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ed90:	78c7      	ldrb	r7, [r0, #3]
    ed92:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ed94:	6822      	ldr	r2, [r4, #0]
    ed96:	68e1      	ldr	r1, [r4, #12]
    ed98:	1c57      	adds	r7, r2, #1
    ed9a:	3004      	adds	r0, #4
    ed9c:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eda0:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eda2:	fb01 7312 	mls	r3, r1, r2, r7
    eda6:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eda8:	d1cd      	bne.n	ed46 <am_hal_queue_item_add+0xaa>
    edaa:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    edac:	442a      	add	r2, r5
    edae:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    edb0:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    edb2:	9801      	ldr	r0, [sp, #4]
    edb4:	f7fe fe34 	bl	da20 <am_hal_interrupt_master_set>

    return bSuccess;
}
    edb8:	4620      	mov	r0, r4
    edba:	b003      	add	sp, #12
    edbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    edbe:	2400      	movs	r4, #0
    edc0:	e7f7      	b.n	edb2 <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    edc2:	1c70      	adds	r0, r6, #1
    edc4:	fbb0 fef3 	udiv	lr, r0, r3
    edc8:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    edcc:	2001      	movs	r0, #1
    edce:	1e6e      	subs	r6, r5, #1
    edd0:	4285      	cmp	r5, r0
    edd2:	f006 0707 	and.w	r7, r6, #7
    edd6:	d063      	beq.n	eea0 <am_hal_queue_item_add+0x204>
    edd8:	b3bf      	cbz	r7, ee4a <am_hal_queue_item_add+0x1ae>
    edda:	2f01      	cmp	r7, #1
    eddc:	d02d      	beq.n	ee3a <am_hal_queue_item_add+0x19e>
    edde:	2f02      	cmp	r7, #2
    ede0:	d025      	beq.n	ee2e <am_hal_queue_item_add+0x192>
    ede2:	2f03      	cmp	r7, #3
    ede4:	d01d      	beq.n	ee22 <am_hal_queue_item_add+0x186>
    ede6:	2f04      	cmp	r7, #4
    ede8:	d015      	beq.n	ee16 <am_hal_queue_item_add+0x17a>
    edea:	2f05      	cmp	r7, #5
    edec:	d00d      	beq.n	ee0a <am_hal_queue_item_add+0x16e>
    edee:	2f06      	cmp	r7, #6
    edf0:	d005      	beq.n	edfe <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    edf2:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    edf4:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    edf6:	fbb1 fcf3 	udiv	ip, r1, r3
    edfa:	fb03 111c 	mls	r1, r3, ip, r1
    edfe:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee00:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee02:	fbb1 f6f3 	udiv	r6, r1, r3
    ee06:	fb03 1116 	mls	r1, r3, r6, r1
    ee0a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee0c:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee0e:	fbb1 f7f3 	udiv	r7, r1, r3
    ee12:	fb03 1117 	mls	r1, r3, r7, r1
    ee16:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee18:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee1a:	fbb1 fef3 	udiv	lr, r1, r3
    ee1e:	fb03 111e 	mls	r1, r3, lr, r1
    ee22:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee24:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee26:	fbb1 fcf3 	udiv	ip, r1, r3
    ee2a:	fb03 111c 	mls	r1, r3, ip, r1
    ee2e:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee30:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee32:	fbb1 f6f3 	udiv	r6, r1, r3
    ee36:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee3a:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee3c:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee3e:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee40:	fbb1 f7f3 	udiv	r7, r1, r3
    ee44:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee48:	d02a      	beq.n	eea0 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee4a:	3101      	adds	r1, #1
    ee4c:	fbb1 fef3 	udiv	lr, r1, r3
    ee50:	fb03 161e 	mls	r6, r3, lr, r1
    ee54:	1c77      	adds	r7, r6, #1
    ee56:	fbb7 fcf3 	udiv	ip, r7, r3
    ee5a:	fb03 711c 	mls	r1, r3, ip, r7
    ee5e:	1c4e      	adds	r6, r1, #1
    ee60:	fbb6 f7f3 	udiv	r7, r6, r3
    ee64:	fb03 6117 	mls	r1, r3, r7, r6
    ee68:	1c4e      	adds	r6, r1, #1
    ee6a:	fbb6 f7f3 	udiv	r7, r6, r3
    ee6e:	fb03 6117 	mls	r1, r3, r7, r6
    ee72:	1c4e      	adds	r6, r1, #1
    ee74:	fbb6 f7f3 	udiv	r7, r6, r3
    ee78:	fb03 6117 	mls	r1, r3, r7, r6
    ee7c:	1c4e      	adds	r6, r1, #1
    ee7e:	fbb6 f7f3 	udiv	r7, r6, r3
    ee82:	fb03 6117 	mls	r1, r3, r7, r6
    ee86:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee88:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee8a:	fbb6 f7f3 	udiv	r7, r6, r3
    ee8e:	fb03 6117 	mls	r1, r3, r7, r6
    ee92:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee94:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ee96:	fbb6 f7f3 	udiv	r7, r6, r3
    ee9a:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ee9e:	d1d4      	bne.n	ee4a <am_hal_queue_item_add+0x1ae>
    eea0:	6021      	str	r1, [r4, #0]
    eea2:	e783      	b.n	edac <am_hal_queue_item_add+0x110>

0000eea4 <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    eea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eea6:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eea8:	6905      	ldr	r5, [r0, #16]
{
    eeaa:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    eeac:	fb05 f502 	mul.w	r5, r5, r2
{
    eeb0:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
    eeb2:	f7fe fdb1 	bl	da18 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    eeb6:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
    eeb8:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    eeba:	42bd      	cmp	r5, r7
    eebc:	f200 8083 	bhi.w	efc6 <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eec0:	2d00      	cmp	r5, #0
    eec2:	d077      	beq.n	efb4 <am_hal_queue_item_get+0x110>
    eec4:	6863      	ldr	r3, [r4, #4]
    eec6:	2e00      	cmp	r6, #0
    eec8:	d07f      	beq.n	efca <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    eeca:	6962      	ldr	r2, [r4, #20]
    eecc:	4630      	mov	r0, r6
    eece:	5cd1      	ldrb	r1, [r2, r3]
    eed0:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    eed4:	6863      	ldr	r3, [r4, #4]
    eed6:	68e7      	ldr	r7, [r4, #12]
    eed8:	1c5a      	adds	r2, r3, #1
    eeda:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eedc:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    eede:	fbb2 f6f7 	udiv	r6, r2, r7
    eee2:	fb07 2316 	mls	r3, r7, r6, r2
    eee6:	f105 37ff 	add.w	r7, r5, #4294967295
    eeea:	6063      	str	r3, [r4, #4]
    eeec:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eef0:	d05f      	beq.n	efb2 <am_hal_queue_item_get+0x10e>
    eef2:	b362      	cbz	r2, ef4e <am_hal_queue_item_get+0xaa>
    eef4:	2a01      	cmp	r2, #1
    eef6:	d01b      	beq.n	ef30 <am_hal_queue_item_get+0x8c>
    eef8:	2a02      	cmp	r2, #2
    eefa:	d00c      	beq.n	ef16 <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    eefc:	6966      	ldr	r6, [r4, #20]
    eefe:	f816 c003 	ldrb.w	ip, [r6, r3]
    ef02:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef06:	6863      	ldr	r3, [r4, #4]
    ef08:	68e7      	ldr	r7, [r4, #12]
    ef0a:	1c5a      	adds	r2, r3, #1
    ef0c:	fbb2 f6f7 	udiv	r6, r2, r7
    ef10:	fb07 2316 	mls	r3, r7, r6, r2
    ef14:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef16:	6967      	ldr	r7, [r4, #20]
    ef18:	f817 e003 	ldrb.w	lr, [r7, r3]
    ef1c:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef20:	6863      	ldr	r3, [r4, #4]
    ef22:	68e6      	ldr	r6, [r4, #12]
    ef24:	1c5a      	adds	r2, r3, #1
    ef26:	fbb2 f7f6 	udiv	r7, r2, r6
    ef2a:	fb06 2317 	mls	r3, r6, r7, r2
    ef2e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef30:	6966      	ldr	r6, [r4, #20]
    ef32:	f816 c003 	ldrb.w	ip, [r6, r3]
    ef36:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef3a:	6863      	ldr	r3, [r4, #4]
    ef3c:	68e7      	ldr	r7, [r4, #12]
    ef3e:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef40:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef42:	fbb2 f6f7 	udiv	r6, r2, r7
    ef46:	fb07 2316 	mls	r3, r7, r6, r2
    ef4a:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef4c:	d031      	beq.n	efb2 <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef4e:	6962      	ldr	r2, [r4, #20]
    ef50:	4686      	mov	lr, r0
    ef52:	5cd6      	ldrb	r6, [r2, r3]
    ef54:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef58:	6863      	ldr	r3, [r4, #4]
    ef5a:	68e7      	ldr	r7, [r4, #12]
    ef5c:	1c5a      	adds	r2, r3, #1
    ef5e:	fbb2 f6f7 	udiv	r6, r2, r7
    ef62:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef66:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef68:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef6a:	5cfa      	ldrb	r2, [r7, r3]
    ef6c:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef6e:	6863      	ldr	r3, [r4, #4]
    ef70:	68e6      	ldr	r6, [r4, #12]
    ef72:	1c5f      	adds	r7, r3, #1
    ef74:	fbb7 f2f6 	udiv	r2, r7, r6
    ef78:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef7c:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef7e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef80:	5cf7      	ldrb	r7, [r6, r3]
    ef82:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef86:	6862      	ldr	r2, [r4, #4]
    ef88:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef8a:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef8c:	3201      	adds	r2, #1
    ef8e:	fbb2 fcf7 	udiv	ip, r2, r7
    ef92:	fb07 231c 	mls	r3, r7, ip, r2
    ef96:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    ef98:	5cf7      	ldrb	r7, [r6, r3]
    ef9a:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    ef9c:	6866      	ldr	r6, [r4, #4]
    ef9e:	68e7      	ldr	r7, [r4, #12]
    efa0:	1c72      	adds	r2, r6, #1
    efa2:	3004      	adds	r0, #4
    efa4:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efa8:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    efaa:	fb07 2316 	mls	r3, r7, r6, r2
    efae:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efb0:	d1cd      	bne.n	ef4e <am_hal_queue_item_get+0xaa>
    efb2:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    efb4:	1b7f      	subs	r7, r7, r5
    efb6:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    efb8:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    efba:	9801      	ldr	r0, [sp, #4]
    efbc:	f7fe fd30 	bl	da20 <am_hal_interrupt_master_set>

    return bSuccess;
}
    efc0:	4620      	mov	r0, r4
    efc2:	b003      	add	sp, #12
    efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    efc6:	2400      	movs	r4, #0
    efc8:	e7f7      	b.n	efba <am_hal_queue_item_get+0x116>
    efca:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    efcc:	1c58      	adds	r0, r3, #1
    efce:	fbb0 fef1 	udiv	lr, r0, r1
    efd2:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efd6:	2001      	movs	r0, #1
    efd8:	1e6a      	subs	r2, r5, #1
    efda:	4285      	cmp	r5, r0
    efdc:	f002 0607 	and.w	r6, r2, #7
    efe0:	d063      	beq.n	f0aa <am_hal_queue_item_get+0x206>
    efe2:	b3be      	cbz	r6, f054 <am_hal_queue_item_get+0x1b0>
    efe4:	2e01      	cmp	r6, #1
    efe6:	d02d      	beq.n	f044 <am_hal_queue_item_get+0x1a0>
    efe8:	2e02      	cmp	r6, #2
    efea:	d025      	beq.n	f038 <am_hal_queue_item_get+0x194>
    efec:	2e03      	cmp	r6, #3
    efee:	d01d      	beq.n	f02c <am_hal_queue_item_get+0x188>
    eff0:	2e04      	cmp	r6, #4
    eff2:	d015      	beq.n	f020 <am_hal_queue_item_get+0x17c>
    eff4:	2e05      	cmp	r6, #5
    eff6:	d00d      	beq.n	f014 <am_hal_queue_item_get+0x170>
    eff8:	2e06      	cmp	r6, #6
    effa:	d005      	beq.n	f008 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    effc:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    effe:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f000:	fbb3 f2f1 	udiv	r2, r3, r1
    f004:	fb01 3312 	mls	r3, r1, r2, r3
    f008:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f00a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f00c:	fbb3 fcf1 	udiv	ip, r3, r1
    f010:	fb01 331c 	mls	r3, r1, ip, r3
    f014:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f016:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f018:	fbb3 fef1 	udiv	lr, r3, r1
    f01c:	fb01 331e 	mls	r3, r1, lr, r3
    f020:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f022:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f024:	fbb3 f6f1 	udiv	r6, r3, r1
    f028:	fb01 3316 	mls	r3, r1, r6, r3
    f02c:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f02e:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f030:	fbb3 f2f1 	udiv	r2, r3, r1
    f034:	fb01 3312 	mls	r3, r1, r2, r3
    f038:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f03a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f03c:	fbb3 fcf1 	udiv	ip, r3, r1
    f040:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f044:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f046:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f048:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f04a:	fbb3 fef1 	udiv	lr, r3, r1
    f04e:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f052:	d02a      	beq.n	f0aa <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f054:	3301      	adds	r3, #1
    f056:	fbb3 f6f1 	udiv	r6, r3, r1
    f05a:	fb01 3216 	mls	r2, r1, r6, r3
    f05e:	1c56      	adds	r6, r2, #1
    f060:	fbb6 fcf1 	udiv	ip, r6, r1
    f064:	fb01 631c 	mls	r3, r1, ip, r6
    f068:	1c5a      	adds	r2, r3, #1
    f06a:	fbb2 f6f1 	udiv	r6, r2, r1
    f06e:	fb01 2316 	mls	r3, r1, r6, r2
    f072:	1c5a      	adds	r2, r3, #1
    f074:	fbb2 f6f1 	udiv	r6, r2, r1
    f078:	fb01 2316 	mls	r3, r1, r6, r2
    f07c:	1c5a      	adds	r2, r3, #1
    f07e:	fbb2 f6f1 	udiv	r6, r2, r1
    f082:	fb01 2316 	mls	r3, r1, r6, r2
    f086:	1c5a      	adds	r2, r3, #1
    f088:	fbb2 f6f1 	udiv	r6, r2, r1
    f08c:	fb01 2316 	mls	r3, r1, r6, r2
    f090:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f092:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f094:	fbb2 f6f1 	udiv	r6, r2, r1
    f098:	fb01 2316 	mls	r3, r1, r6, r2
    f09c:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f09e:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f0a0:	fbb2 f6f1 	udiv	r6, r2, r1
    f0a4:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0a8:	d1d4      	bne.n	f054 <am_hal_queue_item_get+0x1b0>
    f0aa:	6063      	str	r3, [r4, #4]
    f0ac:	e782      	b.n	efb4 <am_hal_queue_item_get+0x110>
    f0ae:	bf00      	nop
    f0b0:	65746e49 	.word	0x65746e49
    f0b4:	70757272 	.word	0x70757272
    f0b8:	3a232074 	.word	0x3a232074
    f0bc:	0a642520 	.word	0x0a642520
    f0c0:	00000000 	.word	0x00000000
    f0c4:	63746157 	.word	0x63746157
    f0c8:	676f6468 	.word	0x676f6468
    f0cc:	61784520 	.word	0x61784520
    f0d0:	656c706d 	.word	0x656c706d
    f0d4:	00000a2e 	.word	0x00000a2e
    f0d8:	65736552 	.word	0x65736552
    f0dc:	74532074 	.word	0x74532074
    f0e0:	73757461 	.word	0x73757461
    f0e4:	67655220 	.word	0x67655220
    f0e8:	65747369 	.word	0x65747369
    f0ec:	203d2072 	.word	0x203d2072
    f0f0:	78257830 	.word	0x78257830
    f0f4:	0000000a 	.word	0x0000000a
    f0f8:	0a0a0a0a 	.word	0x0a0a0a0a
    f0fc:	0a0a0a0a 	.word	0x0a0a0a0a
    f100:	0a0a0a0a 	.word	0x0a0a0a0a
    f104:	0a0a0a0a 	.word	0x0a0a0a0a
    f108:	00000a0a 	.word	0x00000a0a

0000f10c <g_sBspUartConfig>:
    f10c:	0001c200 00000060 00000000 00000000     ....`...........
    f11c:	00000000 00000012 00000000 00000000     ................
	...

0000f134 <g_AM_BSP_GPIO_COM_UART_RX>:
    f134:	00000000                                ....

0000f138 <g_AM_BSP_GPIO_COM_UART_TX>:
    f138:	00000000                                ....

0000f13c <g_AM_BSP_GPIO_ITM_SWO>:
    f13c:	00000002                                ....

0000f140 <am_hal_cachectrl_defaults>:
    f140:	00000308                                ....

0000f144 <g_AM_HAL_GPIO_DISABLE>:
    f144:	00000003                                ....

0000f148 <g_ui8Bit76Capabilities>:
    f148:	02800101 80010180 80800101 80808080     ................
    f158:	80808080 80808008 01800180 80808080     ................
    f168:	80808080 01800402 01010401 80808080     ................
    f178:	00000101                                ....

0000f17c <g_ui8Inpen>:
    f17c:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f18c:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f19c:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f1ac:	00003130                                01..

0000f1b0 <g_ui8NCEtable>:
    f1b0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f1c0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f1d0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f1e0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f1f0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f200:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f210:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f220:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f230:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f240:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f250:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f260:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f270:	32221202 43231303                       .."2..#C

0000f278 <g_ui8nCEpins>:
    f278:	02070707 00080802 01020202 01010101     ................
    f288:	01010101 01010101 01010101 01010101     ................
    f298:	01010101 08010101 01010008 01010101     ................
    f2a8:	00000101                                ....

0000f2ac <g_am_hal_mcuctrl_flash_size>:
    f2ac:	00004000 00008000 00010000 00020000     .@..............
    f2bc:	00040000 00080000 00100000 00200000     .............. .
	...

0000f2ec <g_am_hal_mcuctrl_sram_size>:
    f2ec:	00004000 00008000 00010000 00020000     .@..............
    f2fc:	00040000 00080000 00100000 00060000     ................
	...

0000f32c <am_hal_pwrctrl_peripheral_control>:
	...
    f338:	00000001 00000004 00000004 00000002     ................
    f348:	00000008 00000008 00000004 00000008     ................
    f358:	00000008 00000008 00000008 00000008     ................
    f368:	00000010 00000010 00000010 00000020     ............ ...
    f378:	00000010 00000010 00000040 00000010     ........@.......
    f388:	00000010 00000080 00000004 00000004     ................
    f398:	00000100 00000004 00000004 00000200     ................
    f3a8:	00000020 00000020 00000400 00000004      ... ...........
    f3b8:	00000004 00000800 00000040 00000040     ........@...@...
    f3c8:	00001000 00000080 00000080 00002000     ............. ..
    f3d8:	00000100 00000100                       ........
