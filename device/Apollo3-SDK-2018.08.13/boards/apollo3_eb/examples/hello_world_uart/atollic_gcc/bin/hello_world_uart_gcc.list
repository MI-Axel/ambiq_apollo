
hello_world_uart_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003834  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000f834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002dc  10001000  0000f834  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000f834  2**0
                  CONTENTS, READONLY
  5 .debug_info   000202bc  00000000  00000000  0000f86b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000354e  00000000  00000000  0002fb27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000718  00000000  00000000  00033075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000014c0  00000000  00000000  0003378d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000063d5  00000000  00000000  00034c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a20f  00000000  00000000  0003b022  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00045231  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001408  00000000  00000000  000452b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006f7c  00000000  00000000  000466b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 39 c5 00 00 a1 c5 00 00 ad c5 00 00     ....9...........
    c010:	ad c5 00 00 ad c5 00 00 ad c5 00 00 00 00 00 00     ................
	...
    c02c:	a7 c5 00 00 a7 c5 00 00 00 00 00 00 a7 c5 00 00     ................
    c03c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c04c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c05c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c06c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c07c:	f1 c1 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c08c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c09c:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c0ac:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c0bc:	a7 c5 00 00 a7 c5 00 00 a7 c5 00 00 a7 c5 00 00     ................
    c0cc:	a7 c5 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <error_handler>:
// Catch HAL errors.
//
//*****************************************************************************
void
error_handler(uint32_t ui32ErrorStatus)
{
    c1dc:	b480      	push	{r7}
    c1de:	b083      	sub	sp, #12
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	6078      	str	r0, [r7, #4]
    ui32LastError = ui32ErrorStatus;
    c1e4:	4a01      	ldr	r2, [pc, #4]	; (c1ec <error_handler+0x10>)
    c1e6:	687b      	ldr	r3, [r7, #4]
    c1e8:	6013      	str	r3, [r2, #0]

    while (1);
    c1ea:	e7fe      	b.n	c1ea <error_handler+0xe>
    c1ec:	10001104 	.word	0x10001104

0000c1f0 <am_uart_isr>:
// UART0 interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
    c1f0:	b580      	push	{r7, lr}
    c1f2:	b082      	sub	sp, #8
    c1f4:	af00      	add	r7, sp, #0
    //
    // Service the FIFOs as necessary, and clear the interrupts.
    //
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(phUART, &ui32Status, true);
    c1f6:	4b0c      	ldr	r3, [pc, #48]	; (c228 <am_uart_isr+0x38>)
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	1d39      	adds	r1, r7, #4
    c1fc:	2201      	movs	r2, #1
    c1fe:	4618      	mov	r0, r3
    c200:	f002 fe18 	bl	ee34 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(phUART, ui32Status);
    c204:	4b08      	ldr	r3, [pc, #32]	; (c228 <am_uart_isr+0x38>)
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	687a      	ldr	r2, [r7, #4]
    c20a:	4611      	mov	r1, r2
    c20c:	4618      	mov	r0, r3
    c20e:	f002 fdff 	bl	ee10 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(phUART, ui32Status, &ui32Idle);
    c212:	4b05      	ldr	r3, [pc, #20]	; (c228 <am_uart_isr+0x38>)
    c214:	681b      	ldr	r3, [r3, #0]
    c216:	6879      	ldr	r1, [r7, #4]
    c218:	463a      	mov	r2, r7
    c21a:	4618      	mov	r0, r3
    c21c:	f002 fd12 	bl	ec44 <am_hal_uart_interrupt_service>
}
    c220:	bf00      	nop
    c222:	3708      	adds	r7, #8
    c224:	46bd      	mov	sp, r7
    c226:	bd80      	pop	{r7, pc}
    c228:	10001108 	.word	0x10001108

0000c22c <uart_print>:
// UART print string
//
//*****************************************************************************
void
uart_print(char *pcStr)
{
    c22c:	b580      	push	{r7, lr}
    c22e:	b08a      	sub	sp, #40	; 0x28
    c230:	af00      	add	r7, sp, #0
    c232:	6078      	str	r0, [r7, #4]
    uint32_t ui32StrLen = 0;
    c234:	2300      	movs	r3, #0
    c236:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32BytesWritten = 0;
    c238:	2300      	movs	r3, #0
    c23a:	623b      	str	r3, [r7, #32]

    //
    // Measure the length of the string.
    //
    while (pcStr[ui32StrLen] != 0)
    c23c:	e002      	b.n	c244 <uart_print+0x18>
    {
        ui32StrLen++;
    c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c240:	3301      	adds	r3, #1
    c242:	627b      	str	r3, [r7, #36]	; 0x24
    while (pcStr[ui32StrLen] != 0)
    c244:	687a      	ldr	r2, [r7, #4]
    c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c248:	4413      	add	r3, r2
    c24a:	781b      	ldrb	r3, [r3, #0]
    c24c:	2b00      	cmp	r3, #0
    c24e:	d1f6      	bne.n	c23e <uart_print+0x12>
    }

    //
    // Print the string via the UART.
    //
    const am_hal_uart_transfer_t sUartWrite =
    c250:	2300      	movs	r3, #0
    c252:	60fb      	str	r3, [r7, #12]
    c254:	687b      	ldr	r3, [r7, #4]
    c256:	613b      	str	r3, [r7, #16]
    c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c25a:	617b      	str	r3, [r7, #20]
    c25c:	2300      	movs	r3, #0
    c25e:	61bb      	str	r3, [r7, #24]
    c260:	f107 0320 	add.w	r3, r7, #32
    c264:	61fb      	str	r3, [r7, #28]
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c266:	4b10      	ldr	r3, [pc, #64]	; (c2a8 <uart_print+0x7c>)
    c268:	681b      	ldr	r3, [r3, #0]
    c26a:	f107 020c 	add.w	r2, r7, #12
    c26e:	4611      	mov	r1, r2
    c270:	4618      	mov	r0, r3
    c272:	f002 f831 	bl	e2d8 <am_hal_uart_transfer>
    c276:	4603      	mov	r3, r0
    c278:	2b00      	cmp	r3, #0
    c27a:	d00b      	beq.n	c294 <uart_print+0x68>
    c27c:	4b0a      	ldr	r3, [pc, #40]	; (c2a8 <uart_print+0x7c>)
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	f107 020c 	add.w	r2, r7, #12
    c284:	4611      	mov	r1, r2
    c286:	4618      	mov	r0, r3
    c288:	f002 f826 	bl	e2d8 <am_hal_uart_transfer>
    c28c:	4603      	mov	r3, r0
    c28e:	4618      	mov	r0, r3
    c290:	f7ff ffa4 	bl	c1dc <error_handler>

    if (ui32BytesWritten != ui32StrLen)
    c294:	6a3a      	ldr	r2, [r7, #32]
    c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c298:	429a      	cmp	r2, r3
    c29a:	d000      	beq.n	c29e <uart_print+0x72>
    {
        //
        // Couldn't send the whole string!!
        //
        while(1);
    c29c:	e7fe      	b.n	c29c <uart_print+0x70>
    }
}
    c29e:	bf00      	nop
    c2a0:	3728      	adds	r7, #40	; 0x28
    c2a2:	46bd      	mov	sp, r7
    c2a4:	bd80      	pop	{r7, pc}
    c2a6:	bf00      	nop
    c2a8:	10001108 	.word	0x10001108

0000c2ac <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c2ac:	b5b0      	push	{r4, r5, r7, lr}
    c2ae:	b0a4      	sub	sp, #144	; 0x90
    c2b0:	af04      	add	r7, sp, #16
    uint32_t ui32StrBuf;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2b2:	2100      	movs	r1, #0
    c2b4:	2000      	movs	r0, #0
    c2b6:	f001 f9db 	bl	d670 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2ba:	4883      	ldr	r0, [pc, #524]	; (c4c8 <main+0x21c>)
    c2bc:	f001 f9a4 	bl	d608 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2c0:	f001 f9cc 	bl	d65c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2c4:	f001 f986 	bl	d5d4 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    CHECK_ERRORS(am_hal_uart_initialize(0, &phUART));
    c2c8:	4980      	ldr	r1, [pc, #512]	; (c4cc <main+0x220>)
    c2ca:	2000      	movs	r0, #0
    c2cc:	f001 fe80 	bl	dfd0 <am_hal_uart_initialize>
    c2d0:	4603      	mov	r3, r0
    c2d2:	2b00      	cmp	r3, #0
    c2d4:	d007      	beq.n	c2e6 <main+0x3a>
    c2d6:	497d      	ldr	r1, [pc, #500]	; (c4cc <main+0x220>)
    c2d8:	2000      	movs	r0, #0
    c2da:	f001 fe79 	bl	dfd0 <am_hal_uart_initialize>
    c2de:	4603      	mov	r3, r0
    c2e0:	4618      	mov	r0, r3
    c2e2:	f7ff ff7b 	bl	c1dc <error_handler>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_WAKE, false));
    c2e6:	4b79      	ldr	r3, [pc, #484]	; (c4cc <main+0x220>)
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	2200      	movs	r2, #0
    c2ec:	2100      	movs	r1, #0
    c2ee:	4618      	mov	r0, r3
    c2f0:	f001 fe96 	bl	e020 <am_hal_uart_power_control>
    c2f4:	4603      	mov	r3, r0
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d00a      	beq.n	c310 <main+0x64>
    c2fa:	4b74      	ldr	r3, [pc, #464]	; (c4cc <main+0x220>)
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	2200      	movs	r2, #0
    c300:	2100      	movs	r1, #0
    c302:	4618      	mov	r0, r3
    c304:	f001 fe8c 	bl	e020 <am_hal_uart_power_control>
    c308:	4603      	mov	r3, r0
    c30a:	4618      	mov	r0, r3
    c30c:	f7ff ff66 	bl	c1dc <error_handler>
    CHECK_ERRORS(am_hal_uart_configure(phUART, &g_sUartConfig));
    c310:	4b6e      	ldr	r3, [pc, #440]	; (c4cc <main+0x220>)
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	496e      	ldr	r1, [pc, #440]	; (c4d0 <main+0x224>)
    c316:	4618      	mov	r0, r3
    c318:	f001 fef4 	bl	e104 <am_hal_uart_configure>
    c31c:	4603      	mov	r3, r0
    c31e:	2b00      	cmp	r3, #0
    c320:	d009      	beq.n	c336 <main+0x8a>
    c322:	4b6a      	ldr	r3, [pc, #424]	; (c4cc <main+0x220>)
    c324:	681b      	ldr	r3, [r3, #0]
    c326:	496a      	ldr	r1, [pc, #424]	; (c4d0 <main+0x224>)
    c328:	4618      	mov	r0, r3
    c32a:	f001 feeb 	bl	e104 <am_hal_uart_configure>
    c32e:	4603      	mov	r3, r0
    c330:	4618      	mov	r0, r3
    c332:	f7ff ff53 	bl	c1dc <error_handler>

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c336:	4b67      	ldr	r3, [pc, #412]	; (c4d4 <main+0x228>)
    c338:	6819      	ldr	r1, [r3, #0]
    c33a:	2027      	movs	r0, #39	; 0x27
    c33c:	f001 fb24 	bl	d988 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c340:	4b65      	ldr	r3, [pc, #404]	; (c4d8 <main+0x22c>)
    c342:	6819      	ldr	r1, [r3, #0]
    c344:	2028      	movs	r0, #40	; 0x28
    c346:	f001 fb1f 	bl	d988 <am_hal_gpio_pinconfig>

    //
    // Enable interrupts.
    //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + AM_BSP_UART_PRINT_INST));
    c34a:	200f      	movs	r0, #15
    c34c:	f7ff ff28 	bl	c1a0 <__NVIC_EnableIRQ>
#else // AM_CMSIS_REGS
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_UART0);
#endif // AM_CMSIS_REGS
    am_hal_interrupt_master_enable();
    c350:	f001 fc5c 	bl	dc0c <am_hal_interrupt_master_enable>

    //
    // Set the main print interface to use the UART print function we defined.
    //
    am_util_stdio_printf_init(uart_print);
    c354:	4861      	ldr	r0, [pc, #388]	; (c4dc <main+0x230>)
    c356:	f000 fa7b 	bl	c850 <am_util_stdio_printf_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c35a:	f001 f931 	bl	d5c0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c35e:	4860      	ldr	r0, [pc, #384]	; (c4e0 <main+0x234>)
    c360:	f001 f910 	bl	d584 <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
    c364:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c368:	4618      	mov	r0, r3
    c36a:	f000 f99f 	bl	c6ac <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    c36e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c370:	4619      	mov	r1, r3
    c372:	485c      	ldr	r0, [pc, #368]	; (c4e4 <main+0x238>)
    c374:	f001 f906 	bl	d584 <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n", sIdDevice.pui8DeviceName);
    c378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c37a:	4619      	mov	r1, r3
    c37c:	485a      	ldr	r0, [pc, #360]	; (c4e8 <main+0x23c>)
    c37e:	f001 f901 	bl	d584 <am_util_stdio_printf>

    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
    c382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    am_util_stdio_printf("Qualified: %s\n",
    c384:	2b00      	cmp	r3, #0
    c386:	d001      	beq.n	c38c <main+0xe0>
    c388:	4b58      	ldr	r3, [pc, #352]	; (c4ec <main+0x240>)
    c38a:	e000      	b.n	c38e <main+0xe2>
    c38c:	4b58      	ldr	r3, [pc, #352]	; (c4f0 <main+0x244>)
    c38e:	4619      	mov	r1, r3
    c390:	4858      	ldr	r0, [pc, #352]	; (c4f4 <main+0x248>)
    c392:	f001 f8f7 	bl	d584 <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
    c396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    c398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c39a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c39c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    c39e:	f897 4078 	ldrb.w	r4, [r7, #120]	; 0x78
    c3a2:	f897 5079 	ldrb.w	r5, [r7, #121]	; 0x79
    am_util_stdio_printf("Device Info:\n"
    c3a6:	9502      	str	r5, [sp, #8]
    c3a8:	9401      	str	r4, [sp, #4]
    c3aa:	9300      	str	r3, [sp, #0]
    c3ac:	4603      	mov	r3, r0
    c3ae:	4852      	ldr	r0, [pc, #328]	; (c4f8 <main+0x24c>)
    c3b0:	f001 f8e8 	bl	d584 <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
    c3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c3b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d001      	beq.n	c3c2 <main+0x116>
    c3be:	232b      	movs	r3, #43	; 0x2b
    c3c0:	e000      	b.n	c3c4 <main+0x118>
    c3c2:	2300      	movs	r3, #0
    c3c4:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c3c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
    c3c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c3ca:	0a9a      	lsrs	r2, r3, #10
    c3cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c3d0:	484a      	ldr	r0, [pc, #296]	; (c4fc <main+0x250>)
    c3d2:	f001 f8d7 	bl	d584 <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
    c3d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d001      	beq.n	c3e4 <main+0x138>
    c3e0:	232b      	movs	r3, #43	; 0x2b
    c3e2:	e000      	b.n	c3e6 <main+0x13a>
    c3e4:	2300      	movs	r3, #0
    c3e6:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c3e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
    c3ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c3ec:	0a9a      	lsrs	r2, r3, #10
    c3ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c3f2:	4843      	ldr	r0, [pc, #268]	; (c500 <main+0x254>)
    c3f4:	f001 f8c6 	bl	d584 <am_util_stdio_printf>
                         &ui32StrBuf);

    //
    // Print the compiler version.
    //
    am_hal_uart_tx_flush(phUART);
    c3f8:	4b34      	ldr	r3, [pc, #208]	; (c4cc <main+0x220>)
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	4618      	mov	r0, r3
    c3fe:	f002 fbef 	bl	ebe0 <am_hal_uart_tx_flush>
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c402:	4940      	ldr	r1, [pc, #256]	; (c504 <main+0x258>)
    c404:	4840      	ldr	r0, [pc, #256]	; (c508 <main+0x25c>)
    c406:	f001 f8bd 	bl	d584 <am_util_stdio_printf>
#ifdef AM_PART_APOLLO3
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c40a:	4940      	ldr	r1, [pc, #256]	; (c50c <main+0x260>)
    c40c:	4840      	ldr	r0, [pc, #256]	; (c510 <main+0x264>)
    c40e:	f001 f8b9 	bl	d584 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
    c412:	4b40      	ldr	r3, [pc, #256]	; (c514 <main+0x268>)
    c414:	78db      	ldrb	r3, [r3, #3]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c416:	4619      	mov	r1, r3
                         g_ui32HALversion.s.Minor,
    c418:	4b3e      	ldr	r3, [pc, #248]	; (c514 <main+0x268>)
    c41a:	789b      	ldrb	r3, [r3, #2]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c41c:	461a      	mov	r2, r3
                         g_ui32HALversion.s.Revision);
    c41e:	4b3d      	ldr	r3, [pc, #244]	; (c514 <main+0x268>)
    c420:	785b      	ldrb	r3, [r3, #1]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c422:	483d      	ldr	r0, [pc, #244]	; (c518 <main+0x26c>)
    c424:	f001 f8ae 	bl	d584 <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");
    c428:	4b3a      	ldr	r3, [pc, #232]	; (c514 <main+0x268>)
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c430:	b2db      	uxtb	r3, r3
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c432:	2b00      	cmp	r3, #0
    c434:	d001      	beq.n	c43a <main+0x18e>
    c436:	4b39      	ldr	r3, [pc, #228]	; (c51c <main+0x270>)
    c438:	e000      	b.n	c43c <main+0x190>
    c43a:	4b39      	ldr	r3, [pc, #228]	; (c520 <main+0x274>)
    c43c:	4619      	mov	r1, r3
    c43e:	4839      	ldr	r0, [pc, #228]	; (c524 <main+0x278>)
    c440:	f001 f8a0 	bl	d584 <am_util_stdio_printf>

    am_hal_security_info_t secInfo;
    char sINFO[32];
    uint32_t ui32Status;
    ui32Status = am_hal_security_get_info(&secInfo);
    c444:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c448:	4618      	mov	r0, r3
    c44a:	f001 fd81 	bl	df50 <am_hal_security_get_info>
    c44e:	67f8      	str	r0, [r7, #124]	; 0x7c
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c452:	2b00      	cmp	r3, #0
    c454:	d116      	bne.n	c484 <main+0x1d8>
    {
        if ( secInfo.bInfo0Valid )
    c456:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    c45a:	2b00      	cmp	r3, #0
    c45c:	d006      	beq.n	c46c <main+0x1c0>
        {
            am_util_stdio_sprintf(sINFO, "INFO0 valid, ver 0x%X", secInfo.info0Version);
    c45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c460:	1d3b      	adds	r3, r7, #4
    c462:	4931      	ldr	r1, [pc, #196]	; (c528 <main+0x27c>)
    c464:	4618      	mov	r0, r3
    c466:	f001 f877 	bl	d558 <am_util_stdio_sprintf>
    c46a:	e004      	b.n	c476 <main+0x1ca>
        }
        else
        {
            am_util_stdio_sprintf(sINFO, "INFO0 invalid");
    c46c:	1d3b      	adds	r3, r7, #4
    c46e:	492f      	ldr	r1, [pc, #188]	; (c52c <main+0x280>)
    c470:	4618      	mov	r0, r3
    c472:	f001 f871 	bl	d558 <am_util_stdio_sprintf>
        }

        am_util_stdio_printf("SBL ver: 0x%x - 0x%x, %s\n",
    c476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    c478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c47a:	1d3b      	adds	r3, r7, #4
    c47c:	482c      	ldr	r0, [pc, #176]	; (c530 <main+0x284>)
    c47e:	f001 f881 	bl	d584 <am_util_stdio_printf>
    c482:	e003      	b.n	c48c <main+0x1e0>
            secInfo.sblVersion, secInfo.sblVersionAddInfo, sINFO);
    }
    else
    {
        am_util_stdio_printf("am_hal_security_get_info failed 0x%X\n", ui32Status);
    c484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    c486:	482b      	ldr	r0, [pc, #172]	; (c534 <main+0x288>)
    c488:	f001 f87c 	bl	d584 <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable the UART and interrupts
    //
    am_hal_uart_tx_flush(phUART);
    c48c:	4b0f      	ldr	r3, [pc, #60]	; (c4cc <main+0x220>)
    c48e:	681b      	ldr	r3, [r3, #0]
    c490:	4618      	mov	r0, r3
    c492:	f002 fba5 	bl	ebe0 <am_hal_uart_tx_flush>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_DEEPSLEEP, false));
    c496:	4b0d      	ldr	r3, [pc, #52]	; (c4cc <main+0x220>)
    c498:	681b      	ldr	r3, [r3, #0]
    c49a:	2200      	movs	r2, #0
    c49c:	2102      	movs	r1, #2
    c49e:	4618      	mov	r0, r3
    c4a0:	f001 fdbe 	bl	e020 <am_hal_uart_power_control>
    c4a4:	4603      	mov	r3, r0
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	d00a      	beq.n	c4c0 <main+0x214>
    c4aa:	4b08      	ldr	r3, [pc, #32]	; (c4cc <main+0x220>)
    c4ac:	681b      	ldr	r3, [r3, #0]
    c4ae:	2200      	movs	r2, #0
    c4b0:	2102      	movs	r1, #2
    c4b2:	4618      	mov	r0, r3
    c4b4:	f001 fdb4 	bl	e020 <am_hal_uart_power_control>
    c4b8:	4603      	mov	r3, r0
    c4ba:	4618      	mov	r0, r3
    c4bc:	f7ff fe8e 	bl	c1dc <error_handler>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c4c0:	2001      	movs	r0, #1
    c4c2:	f001 fd61 	bl	df88 <am_hal_sysctrl_sleep>
    c4c6:	e7fb      	b.n	c4c0 <main+0x214>
    c4c8:	0000f548 	.word	0x0000f548
    c4cc:	10001108 	.word	0x10001108
    c4d0:	0000f4e0 	.word	0x0000f4e0
    c4d4:	0000f544 	.word	0x0000f544
    c4d8:	0000f540 	.word	0x0000f540
    c4dc:	0000c22d 	.word	0x0000c22d
    c4e0:	0000f298 	.word	0x0000f298
    c4e4:	0000f2a8 	.word	0x0000f2a8
    c4e8:	0000f2bc 	.word	0x0000f2bc
    c4ec:	0000f2d0 	.word	0x0000f2d0
    c4f0:	0000f2d4 	.word	0x0000f2d4
    c4f4:	0000f2d8 	.word	0x0000f2d8
    c4f8:	0000f2e8 	.word	0x0000f2e8
    c4fc:	0000f354 	.word	0x0000f354
    c500:	0000f374 	.word	0x0000f374
    c504:	0000f394 	.word	0x0000f394
    c508:	0000f3dc 	.word	0x0000f3dc
    c50c:	0000f550 	.word	0x0000f550
    c510:	0000f3f4 	.word	0x0000f3f4
    c514:	0000f54c 	.word	0x0000f54c
    c518:	0000f40c 	.word	0x0000f40c
    c51c:	0000f428 	.word	0x0000f428
    c520:	0000f430 	.word	0x0000f430
    c524:	0000f438 	.word	0x0000f438
    c528:	0000f460 	.word	0x0000f460
    c52c:	0000f478 	.word	0x0000f478
    c530:	0000f488 	.word	0x0000f488
    c534:	0000f4a4 	.word	0x0000f4a4

0000c538 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c538:	4811      	ldr	r0, [pc, #68]	; (c580 <zero_loop+0x12>)
    c53a:	4912      	ldr	r1, [pc, #72]	; (c584 <zero_loop+0x16>)
    c53c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c53e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c542:	4811      	ldr	r0, [pc, #68]	; (c588 <zero_loop+0x1a>)
    c544:	6801      	ldr	r1, [r0, #0]
    c546:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c54a:	6001      	str	r1, [r0, #0]
    c54c:	f3bf 8f4f 	dsb	sy
    c550:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c554:	480d      	ldr	r0, [pc, #52]	; (c58c <zero_loop+0x1e>)
    c556:	490e      	ldr	r1, [pc, #56]	; (c590 <zero_loop+0x22>)
    c558:	4a0e      	ldr	r2, [pc, #56]	; (c594 <zero_loop+0x26>)

0000c55a <copy_loop>:
    c55a:	f850 3b04 	ldr.w	r3, [r0], #4
    c55e:	f841 3b04 	str.w	r3, [r1], #4
    c562:	4291      	cmp	r1, r2
    c564:	dbf9      	blt.n	c55a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c566:	480c      	ldr	r0, [pc, #48]	; (c598 <zero_loop+0x2a>)
    c568:	490c      	ldr	r1, [pc, #48]	; (c59c <zero_loop+0x2e>)
    c56a:	f04f 0200 	mov.w	r2, #0

0000c56e <zero_loop>:
    c56e:	4288      	cmp	r0, r1
    c570:	bfb8      	it	lt
    c572:	f840 2b04 	strlt.w	r2, [r0], #4
    c576:	dbfa      	blt.n	c56e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c578:	f7ff fe98 	bl	c2ac <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c57c:	be00      	bkpt	0x0000
}
    c57e:	bf00      	nop
    c580:	e000ed08 	.word	0xe000ed08
    c584:	0000c000 	.word	0x0000c000
    c588:	e000ed88 	.word	0xe000ed88
    c58c:	0000f834 	.word	0x0000f834
    c590:	10001000 	.word	0x10001000
    c594:	10001000 	.word	0x10001000
    c598:	10001000 	.word	0x10001000
    c59c:	100012dc 	.word	0x100012dc

0000c5a0 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c5a0:	b480      	push	{r7}
    c5a2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c5a4:	e7fe      	b.n	c5a4 <NMI_Handler+0x4>

0000c5a6 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c5a6:	b480      	push	{r7}
    c5a8:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c5aa:	e7fe      	b.n	c5aa <DebugMon_Handler+0x4>

0000c5ac <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c5ac:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c5ae:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c5b0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c5b2:	f000 f809 	bl	c5c8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c5b6:	bd01      	pop	{r0, pc}
}
    c5b8:	bf00      	nop
    c5ba:	4618      	mov	r0, r3

0000c5bc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c5bc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c5be:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c5c0:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c5c2:	4770      	bx	lr
}
    c5c4:	bf00      	nop
    c5c6:	4618      	mov	r0, r3

0000c5c8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c5c8:	b580      	push	{r7, lr}
    c5ca:	b096      	sub	sp, #88	; 0x58
    c5cc:	af00      	add	r7, sp, #0
    c5ce:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c5d0:	f107 030c 	add.w	r3, r7, #12
    c5d4:	2200      	movs	r2, #0
    c5d6:	601a      	str	r2, [r3, #0]
    c5d8:	605a      	str	r2, [r3, #4]
    c5da:	609a      	str	r2, [r3, #8]
    c5dc:	60da      	str	r2, [r3, #12]
    c5de:	611a      	str	r2, [r3, #16]
    c5e0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c5e2:	2300      	movs	r3, #0
    c5e4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c5e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c5ea:	4b2e      	ldr	r3, [pc, #184]	; (c6a4 <am_util_faultisr_collect_data+0xdc>)
    c5ec:	681b      	ldr	r3, [r3, #0]
    c5ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5f2:	b2db      	uxtb	r3, r3
    c5f4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5fa:	0a1b      	lsrs	r3, r3, #8
    c5fc:	b2db      	uxtb	r3, r3
    c5fe:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c604:	0c1b      	lsrs	r3, r3, #16
    c606:	b29b      	uxth	r3, r3
    c608:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c60c:	4b26      	ldr	r3, [pc, #152]	; (c6a8 <am_util_faultisr_collect_data+0xe0>)
    c60e:	681b      	ldr	r3, [r3, #0]
    c610:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c612:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c616:	b2db      	uxtb	r3, r3
    c618:	f003 0302 	and.w	r3, r3, #2
    c61c:	2b00      	cmp	r3, #0
    c61e:	d005      	beq.n	c62c <am_util_faultisr_collect_data+0x64>
    c620:	6879      	ldr	r1, [r7, #4]
    c622:	2006      	movs	r0, #6
    c624:	f7ff ffca 	bl	c5bc <getStackedReg>
    c628:	4603      	mov	r3, r0
    c62a:	e001      	b.n	c630 <am_util_faultisr_collect_data+0x68>
    c62c:	f04f 33ff 	mov.w	r3, #4294967295
    c630:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c632:	6879      	ldr	r1, [r7, #4]
    c634:	2000      	movs	r0, #0
    c636:	f7ff ffc1 	bl	c5bc <getStackedReg>
    c63a:	4603      	mov	r3, r0
    c63c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c63e:	6879      	ldr	r1, [r7, #4]
    c640:	2001      	movs	r0, #1
    c642:	f7ff ffbb 	bl	c5bc <getStackedReg>
    c646:	4603      	mov	r3, r0
    c648:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c64a:	6879      	ldr	r1, [r7, #4]
    c64c:	2002      	movs	r0, #2
    c64e:	f7ff ffb5 	bl	c5bc <getStackedReg>
    c652:	4603      	mov	r3, r0
    c654:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c656:	6879      	ldr	r1, [r7, #4]
    c658:	2003      	movs	r0, #3
    c65a:	f7ff ffaf 	bl	c5bc <getStackedReg>
    c65e:	4603      	mov	r3, r0
    c660:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c662:	6879      	ldr	r1, [r7, #4]
    c664:	2004      	movs	r0, #4
    c666:	f7ff ffa9 	bl	c5bc <getStackedReg>
    c66a:	4603      	mov	r3, r0
    c66c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c66e:	6879      	ldr	r1, [r7, #4]
    c670:	2005      	movs	r0, #5
    c672:	f7ff ffa3 	bl	c5bc <getStackedReg>
    c676:	4603      	mov	r3, r0
    c678:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c67a:	6879      	ldr	r1, [r7, #4]
    c67c:	2006      	movs	r0, #6
    c67e:	f7ff ff9d 	bl	c5bc <getStackedReg>
    c682:	4603      	mov	r3, r0
    c684:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c686:	6879      	ldr	r1, [r7, #4]
    c688:	2007      	movs	r0, #7
    c68a:	f7ff ff97 	bl	c5bc <getStackedReg>
    c68e:	4603      	mov	r3, r0
    c690:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c692:	f107 030c 	add.w	r3, r7, #12
    c696:	4619      	mov	r1, r3
    c698:	2002      	movs	r0, #2
    c69a:	f001 fb17 	bl	dccc <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c69e:	2300      	movs	r3, #0
    c6a0:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c6a2:	e7fe      	b.n	c6a2 <am_util_faultisr_collect_data+0xda>
    c6a4:	e000ed28 	.word	0xe000ed28
    c6a8:	e000ed38 	.word	0xe000ed38

0000c6ac <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b084      	sub	sp, #16
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	6078      	str	r0, [r7, #4]

    //
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
    c6b4:	687b      	ldr	r3, [r7, #4]
    c6b6:	4619      	mov	r1, r3
    c6b8:	2001      	movs	r0, #1
    c6ba:	f001 fb07 	bl	dccc <am_hal_mcuctrl_info_get>
#endif

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c6c6:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c6cc:	4a58      	ldr	r2, [pc, #352]	; (c830 <am_util_id_device+0x184>)
    c6ce:	4293      	cmp	r3, r2
    c6d0:	d10e      	bne.n	c6f0 <am_util_id_device+0x44>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c6d6:	2b9b      	cmp	r3, #155	; 0x9b
    c6d8:	d10a      	bne.n	c6f0 <am_util_id_device+0x44>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    c6da:	687b      	ldr	r3, [r7, #4]
    c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c6de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c6e2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
    c6e6:	d003      	beq.n	c6f0 <am_util_id_device+0x44>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	4a52      	ldr	r2, [pc, #328]	; (c834 <am_util_id_device+0x188>)
    c6ec:	639a      	str	r2, [r3, #56]	; 0x38
    c6ee:	e002      	b.n	c6f6 <am_util_id_device+0x4a>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
    c6f0:	687b      	ldr	r3, [r7, #4]
    c6f2:	4a51      	ldr	r2, [pc, #324]	; (c838 <am_util_id_device+0x18c>)
    c6f4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
    c6f6:	687b      	ldr	r3, [r7, #4]
    c6f8:	691b      	ldr	r3, [r3, #16]
    c6fa:	4a50      	ldr	r2, [pc, #320]	; (c83c <am_util_id_device+0x190>)
    c6fc:	4293      	cmp	r3, r2
    c6fe:	d102      	bne.n	c706 <am_util_id_device+0x5a>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	4a4c      	ldr	r2, [pc, #304]	; (c834 <am_util_id_device+0x188>)
    c704:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
    c706:	687b      	ldr	r3, [r7, #4]
    c708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c70e:	2be0      	cmp	r3, #224	; 0xe0
    c710:	d126      	bne.n	c760 <am_util_id_device+0xb4>
    c712:	68fb      	ldr	r3, [r7, #12]
    c714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    c718:	d122      	bne.n	c760 <am_util_id_device+0xb4>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	2201      	movs	r2, #1
    c71e:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
    c720:	687b      	ldr	r3, [r7, #4]
    c722:	4a47      	ldr	r2, [pc, #284]	; (c840 <am_util_id_device+0x194>)
    c724:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	68db      	ldr	r3, [r3, #12]
    c72a:	091b      	lsrs	r3, r3, #4
    c72c:	f003 030f 	and.w	r3, r3, #15
    c730:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c732:	68bb      	ldr	r3, [r7, #8]
    c734:	b2db      	uxtb	r3, r3
    c736:	3340      	adds	r3, #64	; 0x40
    c738:	b2da      	uxtb	r2, r3
    c73a:	687b      	ldr	r3, [r7, #4]
    c73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c740:	687b      	ldr	r3, [r7, #4]
    c742:	68db      	ldr	r3, [r3, #12]
    c744:	f003 030f 	and.w	r3, r3, #15
    c748:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c74a:	68bb      	ldr	r3, [r7, #8]
    c74c:	b2db      	uxtb	r3, r3
    c74e:	3330      	adds	r3, #48	; 0x30
    c750:	b2da      	uxtb	r2, r3
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	4a36      	ldr	r2, [pc, #216]	; (c834 <am_util_id_device+0x188>)
    c75c:	639a      	str	r2, [r3, #56]	; 0x38
    c75e:	e061      	b.n	c824 <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c768:	2bd0      	cmp	r3, #208	; 0xd0
    c76a:	d123      	bne.n	c7b4 <am_util_id_device+0x108>
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
    c772:	d11f      	bne.n	c7b4 <am_util_id_device+0x108>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
    c774:	687b      	ldr	r3, [r7, #4]
    c776:	2202      	movs	r2, #2
    c778:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
    c77a:	687b      	ldr	r3, [r7, #4]
    c77c:	4a31      	ldr	r2, [pc, #196]	; (c844 <am_util_id_device+0x198>)
    c77e:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	68db      	ldr	r3, [r3, #12]
    c784:	091b      	lsrs	r3, r3, #4
    c786:	f003 030f 	and.w	r3, r3, #15
    c78a:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c78c:	68bb      	ldr	r3, [r7, #8]
    c78e:	b2db      	uxtb	r3, r3
    c790:	3340      	adds	r3, #64	; 0x40
    c792:	b2da      	uxtb	r2, r3
    c794:	687b      	ldr	r3, [r7, #4]
    c796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c79a:	687b      	ldr	r3, [r7, #4]
    c79c:	68db      	ldr	r3, [r3, #12]
    c79e:	f003 030f 	and.w	r3, r3, #15
    c7a2:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c7a4:	68bb      	ldr	r3, [r7, #8]
    c7a6:	b2db      	uxtb	r3, r3
    c7a8:	3330      	adds	r3, #48	; 0x30
    c7aa:	b2da      	uxtb	r2, r3
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c7b2:	e037      	b.n	c824 <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c7b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c7bc:	2bc0      	cmp	r3, #192	; 0xc0
    c7be:	d123      	bne.n	c808 <am_util_id_device+0x15c>
    c7c0:	68fb      	ldr	r3, [r7, #12]
    c7c2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c7c6:	d11f      	bne.n	c808 <am_util_id_device+0x15c>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
    c7c8:	687b      	ldr	r3, [r7, #4]
    c7ca:	2203      	movs	r2, #3
    c7cc:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
    c7ce:	687b      	ldr	r3, [r7, #4]
    c7d0:	4a1d      	ldr	r2, [pc, #116]	; (c848 <am_util_id_device+0x19c>)
    c7d2:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 1=Rev0, 2=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	68db      	ldr	r3, [r3, #12]
    c7d8:	091b      	lsrs	r3, r3, #4
    c7da:	f003 030f 	and.w	r3, r3, #15
    c7de:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c7e0:	68bb      	ldr	r3, [r7, #8]
    c7e2:	b2db      	uxtb	r3, r3
    c7e4:	3340      	adds	r3, #64	; 0x40
    c7e6:	b2da      	uxtb	r2, r3
    c7e8:	687b      	ldr	r3, [r7, #4]
    c7ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	68db      	ldr	r3, [r3, #12]
    c7f2:	f003 030f 	and.w	r3, r3, #15
    c7f6:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux - 1);
    c7f8:	68bb      	ldr	r3, [r7, #8]
    c7fa:	b2db      	uxtb	r3, r3
    c7fc:	332f      	adds	r3, #47	; 0x2f
    c7fe:	b2da      	uxtb	r2, r3
    c800:	687b      	ldr	r3, [r7, #4]
    c802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c806:	e00d      	b.n	c824 <am_util_id_device+0x178>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
    c808:	687b      	ldr	r3, [r7, #4]
    c80a:	2200      	movs	r2, #0
    c80c:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	4a0e      	ldr	r2, [pc, #56]	; (c84c <am_util_id_device+0x1a0>)
    c812:	63da      	str	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
    c814:	687b      	ldr	r3, [r7, #4]
    c816:	223f      	movs	r2, #63	; 0x3f
    c818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
    c81c:	687b      	ldr	r3, [r7, #4]
    c81e:	2220      	movs	r2, #32
    c820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    return psIDDevice->ui32Device;
    c824:	687b      	ldr	r3, [r7, #4]
    c826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    c828:	4618      	mov	r0, r3
    c82a:	3710      	adds	r7, #16
    c82c:	46bd      	mov	sp, r7
    c82e:	bd80      	pop	{r7, pc}
    c830:	b105100d 	.word	0xb105100d
    c834:	0000f520 	.word	0x0000f520
    c838:	0000f528 	.word	0x0000f528
    c83c:	414d4251 	.word	0x414d4251
    c840:	0000f508 	.word	0x0000f508
    c844:	0000f510 	.word	0x0000f510
    c848:	0000f518 	.word	0x0000f518
    c84c:	0000f530 	.word	0x0000f530

0000c850 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c850:	b480      	push	{r7}
    c852:	b083      	sub	sp, #12
    c854:	af00      	add	r7, sp, #0
    c856:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c858:	4a04      	ldr	r2, [pc, #16]	; (c86c <am_util_stdio_printf_init+0x1c>)
    c85a:	687b      	ldr	r3, [r7, #4]
    c85c:	6013      	str	r3, [r2, #0]
}
    c85e:	bf00      	nop
    c860:	370c      	adds	r7, #12
    c862:	46bd      	mov	sp, r7
    c864:	f85d 7b04 	ldr.w	r7, [sp], #4
    c868:	4770      	bx	lr
    c86a:	bf00      	nop
    c86c:	10001210 	.word	0x10001210

0000c870 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c870:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c874:	b096      	sub	sp, #88	; 0x58
    c876:	af00      	add	r7, sp, #0
    c878:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c87c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c880:	0025      	movs	r5, r4
    c882:	2600      	movs	r6, #0
    c884:	ea55 0306 	orrs.w	r3, r5, r6
    c888:	f000 80a0 	beq.w	c9cc <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c88c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c890:	0862      	lsrs	r2, r4, #1
    c892:	ea4f 0133 	mov.w	r1, r3, rrx
    c896:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c89a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c89e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c8a2:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c8a6:	eb11 0308 	adds.w	r3, r1, r8
    c8aa:	eb42 0409 	adc.w	r4, r2, r9
    c8ae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c8b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8b6:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c8ba:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c8be:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c8c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8c6:	eb13 030a 	adds.w	r3, r3, sl
    c8ca:	eb44 040b 	adc.w	r4, r4, fp
    c8ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c8d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8d6:	0a1a      	lsrs	r2, r3, #8
    c8d8:	62ba      	str	r2, [r7, #40]	; 0x28
    c8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c8dc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c8e0:	62ba      	str	r2, [r7, #40]	; 0x28
    c8e2:	0a23      	lsrs	r3, r4, #8
    c8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    c8e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c8ee:	18c9      	adds	r1, r1, r3
    c8f0:	eb42 0204 	adc.w	r2, r2, r4
    c8f4:	460b      	mov	r3, r1
    c8f6:	4614      	mov	r4, r2
    c8f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c8fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c900:	0c1a      	lsrs	r2, r3, #16
    c902:	623a      	str	r2, [r7, #32]
    c904:	6a3a      	ldr	r2, [r7, #32]
    c906:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c90a:	623a      	str	r2, [r7, #32]
    c90c:	0c23      	lsrs	r3, r4, #16
    c90e:	627b      	str	r3, [r7, #36]	; 0x24
    c910:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c914:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c918:	18c9      	adds	r1, r1, r3
    c91a:	eb42 0204 	adc.w	r2, r2, r4
    c91e:	460b      	mov	r3, r1
    c920:	4614      	mov	r4, r2
    c922:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c926:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c92a:	0023      	movs	r3, r4
    c92c:	603b      	str	r3, [r7, #0]
    c92e:	2300      	movs	r3, #0
    c930:	607b      	str	r3, [r7, #4]
    c932:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c936:	e897 0006 	ldmia.w	r7, {r1, r2}
    c93a:	18c9      	adds	r1, r1, r3
    c93c:	eb42 0204 	adc.w	r2, r2, r4
    c940:	460b      	mov	r3, r1
    c942:	4614      	mov	r4, r2
    c944:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c948:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c94c:	08da      	lsrs	r2, r3, #3
    c94e:	613a      	str	r2, [r7, #16]
    c950:	693a      	ldr	r2, [r7, #16]
    c952:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c956:	613a      	str	r2, [r7, #16]
    c958:	08e3      	lsrs	r3, r4, #3
    c95a:	617b      	str	r3, [r7, #20]
    c95c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c960:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c964:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c968:	460b      	mov	r3, r1
    c96a:	4614      	mov	r4, r2
    c96c:	00a0      	lsls	r0, r4, #2
    c96e:	60f8      	str	r0, [r7, #12]
    c970:	68f8      	ldr	r0, [r7, #12]
    c972:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c976:	60f8      	str	r0, [r7, #12]
    c978:	009b      	lsls	r3, r3, #2
    c97a:	60bb      	str	r3, [r7, #8]
    c97c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c980:	185b      	adds	r3, r3, r1
    c982:	eb44 0402 	adc.w	r4, r4, r2
    c986:	18db      	adds	r3, r3, r3
    c988:	eb44 0404 	adc.w	r4, r4, r4
    c98c:	4619      	mov	r1, r3
    c98e:	4622      	mov	r2, r4
    c990:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c994:	1a5b      	subs	r3, r3, r1
    c996:	eb64 0402 	sbc.w	r4, r4, r2
    c99a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c99e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c9a2:	3306      	adds	r3, #6
    c9a4:	f144 0400 	adc.w	r4, r4, #0
    c9a8:	091a      	lsrs	r2, r3, #4
    c9aa:	61ba      	str	r2, [r7, #24]
    c9ac:	69ba      	ldr	r2, [r7, #24]
    c9ae:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c9b2:	61ba      	str	r2, [r7, #24]
    c9b4:	0923      	lsrs	r3, r4, #4
    c9b6:	61fb      	str	r3, [r7, #28]
    c9b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c9c0:	18c9      	adds	r1, r1, r3
    c9c2:	eb42 0204 	adc.w	r2, r2, r4
    c9c6:	460b      	mov	r3, r1
    c9c8:	4614      	mov	r4, r2
    c9ca:	e029      	b.n	ca20 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c9ce:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9d2:	085a      	lsrs	r2, r3, #1
    c9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9d6:	089b      	lsrs	r3, r3, #2
    c9d8:	4413      	add	r3, r2
    c9da:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9de:	091b      	lsrs	r3, r3, #4
    c9e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c9e2:	4413      	add	r3, r2
    c9e4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9e8:	0a1b      	lsrs	r3, r3, #8
    c9ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c9ec:	4413      	add	r3, r2
    c9ee:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9f2:	0c1b      	lsrs	r3, r3, #16
    c9f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c9f6:	4413      	add	r3, r2
    c9f8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9fc:	08db      	lsrs	r3, r3, #3
    c9fe:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    ca00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ca02:	4613      	mov	r3, r2
    ca04:	009b      	lsls	r3, r3, #2
    ca06:	4413      	add	r3, r2
    ca08:	005b      	lsls	r3, r3, #1
    ca0a:	461a      	mov	r2, r3
    ca0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca0e:	1a9b      	subs	r3, r3, r2
    ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca14:	3306      	adds	r3, #6
    ca16:	091a      	lsrs	r2, r3, #4
    ca18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ca1a:	4413      	add	r3, r2
    ca1c:	f04f 0400 	mov.w	r4, #0
    }
}
    ca20:	4618      	mov	r0, r3
    ca22:	4621      	mov	r1, r4
    ca24:	3758      	adds	r7, #88	; 0x58
    ca26:	46bd      	mov	sp, r7
    ca28:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ca2c:	4770      	bx	lr

0000ca2e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    ca2e:	b590      	push	{r4, r7, lr}
    ca30:	b085      	sub	sp, #20
    ca32:	af00      	add	r7, sp, #0
    ca34:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    ca38:	683a      	ldr	r2, [r7, #0]
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	4313      	orrs	r3, r2
    ca3e:	2b00      	cmp	r3, #0
    ca40:	bf0c      	ite	eq
    ca42:	2301      	moveq	r3, #1
    ca44:	2300      	movne	r3, #0
    ca46:	b2db      	uxtb	r3, r3
    ca48:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    ca4a:	e008      	b.n	ca5e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    ca4c:	e9d7 0100 	ldrd	r0, r1, [r7]
    ca50:	f7ff ff0e 	bl	c870 <divu64_10>
    ca54:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    ca58:	68fb      	ldr	r3, [r7, #12]
    ca5a:	3301      	adds	r3, #1
    ca5c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    ca5e:	e897 0018 	ldmia.w	r7, {r3, r4}
    ca62:	4323      	orrs	r3, r4
    ca64:	d1f2      	bne.n	ca4c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    ca66:	68fb      	ldr	r3, [r7, #12]
}
    ca68:	4618      	mov	r0, r3
    ca6a:	3714      	adds	r7, #20
    ca6c:	46bd      	mov	sp, r7
    ca6e:	bd90      	pop	{r4, r7, pc}

0000ca70 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    ca70:	b590      	push	{r4, r7, lr}
    ca72:	b083      	sub	sp, #12
    ca74:	af00      	add	r7, sp, #0
    ca76:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    ca7a:	e897 0018 	ldmia.w	r7, {r3, r4}
    ca7e:	2b00      	cmp	r3, #0
    ca80:	f174 0300 	sbcs.w	r3, r4, #0
    ca84:	da06      	bge.n	ca94 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    ca86:	e897 0018 	ldmia.w	r7, {r3, r4}
    ca8a:	425b      	negs	r3, r3
    ca8c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    ca90:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    ca94:	e897 0018 	ldmia.w	r7, {r3, r4}
    ca98:	4618      	mov	r0, r3
    ca9a:	4621      	mov	r1, r4
    ca9c:	f7ff ffc7 	bl	ca2e <ndigits_in_u64>
    caa0:	4603      	mov	r3, r0
}
    caa2:	4618      	mov	r0, r3
    caa4:	370c      	adds	r7, #12
    caa6:	46bd      	mov	sp, r7
    caa8:	bd90      	pop	{r4, r7, pc}

0000caaa <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    caaa:	b490      	push	{r4, r7}
    caac:	b084      	sub	sp, #16
    caae:	af00      	add	r7, sp, #0
    cab0:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    cab4:	6839      	ldr	r1, [r7, #0]
    cab6:	687a      	ldr	r2, [r7, #4]
    cab8:	430a      	orrs	r2, r1
    caba:	2a00      	cmp	r2, #0
    cabc:	bf0c      	ite	eq
    cabe:	2201      	moveq	r2, #1
    cac0:	2200      	movne	r2, #0
    cac2:	b2d2      	uxtb	r2, r2
    cac4:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    cac6:	e00a      	b.n	cade <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    cac8:	e897 0006 	ldmia.w	r7, {r1, r2}
    cacc:	090b      	lsrs	r3, r1, #4
    cace:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    cad2:	0914      	lsrs	r4, r2, #4
    cad4:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    cad8:	68fa      	ldr	r2, [r7, #12]
    cada:	3201      	adds	r2, #1
    cadc:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    cade:	e897 0006 	ldmia.w	r7, {r1, r2}
    cae2:	430a      	orrs	r2, r1
    cae4:	d1f0      	bne.n	cac8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    cae6:	68fb      	ldr	r3, [r7, #12]
}
    cae8:	4618      	mov	r0, r3
    caea:	3710      	adds	r7, #16
    caec:	46bd      	mov	sp, r7
    caee:	bc90      	pop	{r4, r7}
    caf0:	4770      	bx	lr

0000caf2 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    caf2:	b480      	push	{r7}
    caf4:	b087      	sub	sp, #28
    caf6:	af00      	add	r7, sp, #0
    caf8:	6078      	str	r0, [r7, #4]
    cafa:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    cafc:	2300      	movs	r3, #0
    cafe:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cb00:	2300      	movs	r3, #0
    cb02:	613b      	str	r3, [r7, #16]
    cb04:	2300      	movs	r3, #0
    cb06:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	781b      	ldrb	r3, [r3, #0]
    cb0c:	2b2d      	cmp	r3, #45	; 0x2d
    cb0e:	d11b      	bne.n	cb48 <decstr_to_int+0x56>
    {
        bNeg = true;
    cb10:	2301      	movs	r3, #1
    cb12:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    cb14:	687b      	ldr	r3, [r7, #4]
    cb16:	3301      	adds	r3, #1
    cb18:	607b      	str	r3, [r7, #4]
        uCnt++;
    cb1a:	68fb      	ldr	r3, [r7, #12]
    cb1c:	3301      	adds	r3, #1
    cb1e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb20:	e012      	b.n	cb48 <decstr_to_int+0x56>
    {
        ++uCnt;
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	3301      	adds	r3, #1
    cb26:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cb28:	693a      	ldr	r2, [r7, #16]
    cb2a:	4613      	mov	r3, r2
    cb2c:	009b      	lsls	r3, r3, #2
    cb2e:	4413      	add	r3, r2
    cb30:	005b      	lsls	r3, r3, #1
    cb32:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cb34:	687b      	ldr	r3, [r7, #4]
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	461a      	mov	r2, r3
    cb3a:	693b      	ldr	r3, [r7, #16]
    cb3c:	4413      	add	r3, r2
    cb3e:	3b30      	subs	r3, #48	; 0x30
    cb40:	613b      	str	r3, [r7, #16]
        pcStr++;
    cb42:	687b      	ldr	r3, [r7, #4]
    cb44:	3301      	adds	r3, #1
    cb46:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb48:	687b      	ldr	r3, [r7, #4]
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	2b2f      	cmp	r3, #47	; 0x2f
    cb4e:	d903      	bls.n	cb58 <decstr_to_int+0x66>
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	2b39      	cmp	r3, #57	; 0x39
    cb56:	d9e4      	bls.n	cb22 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cb58:	683b      	ldr	r3, [r7, #0]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d002      	beq.n	cb64 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cb5e:	683b      	ldr	r3, [r7, #0]
    cb60:	68fa      	ldr	r2, [r7, #12]
    cb62:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cb64:	7dfb      	ldrb	r3, [r7, #23]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d002      	beq.n	cb70 <decstr_to_int+0x7e>
    cb6a:	693b      	ldr	r3, [r7, #16]
    cb6c:	425b      	negs	r3, r3
    cb6e:	e000      	b.n	cb72 <decstr_to_int+0x80>
    cb70:	693b      	ldr	r3, [r7, #16]
}
    cb72:	4618      	mov	r0, r3
    cb74:	371c      	adds	r7, #28
    cb76:	46bd      	mov	sp, r7
    cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb7c:	4770      	bx	lr

0000cb7e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cb7e:	b590      	push	{r4, r7, lr}
    cb80:	b091      	sub	sp, #68	; 0x44
    cb82:	af00      	add	r7, sp, #0
    cb84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cb88:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cb8a:	2300      	movs	r3, #0
    cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb8e:	2300      	movs	r3, #0
    cb90:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cb92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    cb96:	f7ff fe6b 	bl	c870 <divu64_10>
    cb9a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cb9e:	68b9      	ldr	r1, [r7, #8]
    cba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cba2:	4613      	mov	r3, r2
    cba4:	009b      	lsls	r3, r3, #2
    cba6:	4413      	add	r3, r2
    cba8:	005b      	lsls	r3, r3, #1
    cbaa:	1acb      	subs	r3, r1, r3
    cbac:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbb0:	1c5a      	adds	r2, r3, #1
    cbb2:	63fa      	str	r2, [r7, #60]	; 0x3c
    cbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cbb6:	b2d2      	uxtb	r2, r2
    cbb8:	3230      	adds	r2, #48	; 0x30
    cbba:	b2d2      	uxtb	r2, r2
    cbbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
    cbc0:	440b      	add	r3, r1
    cbc2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cbc6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cbca:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    cbce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cbd2:	4323      	orrs	r3, r4
    cbd4:	d1dd      	bne.n	cb92 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbd8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cbda:	687b      	ldr	r3, [r7, #4]
    cbdc:	2b00      	cmp	r3, #0
    cbde:	d011      	beq.n	cc04 <uint64_to_str+0x86>
    {
        while ( ix-- )
    cbe0:	e008      	b.n	cbf4 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    cbe2:	687b      	ldr	r3, [r7, #4]
    cbe4:	1c5a      	adds	r2, r3, #1
    cbe6:	607a      	str	r2, [r7, #4]
    cbe8:	f107 0110 	add.w	r1, r7, #16
    cbec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cbee:	440a      	add	r2, r1
    cbf0:	7812      	ldrb	r2, [r2, #0]
    cbf2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbf6:	1e5a      	subs	r2, r3, #1
    cbf8:	63fa      	str	r2, [r7, #60]	; 0x3c
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d1f1      	bne.n	cbe2 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	2200      	movs	r2, #0
    cc02:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    cc06:	4618      	mov	r0, r3
    cc08:	3744      	adds	r7, #68	; 0x44
    cc0a:	46bd      	mov	sp, r7
    cc0c:	bd90      	pop	{r4, r7, pc}

0000cc0e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cc0e:	b4b0      	push	{r4, r5, r7}
    cc10:	b08d      	sub	sp, #52	; 0x34
    cc12:	af00      	add	r7, sp, #0
    cc14:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cc18:	607a      	str	r2, [r7, #4]
    cc1a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cc1c:	2300      	movs	r3, #0
    cc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cc20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cc24:	4313      	orrs	r3, r2
    cc26:	d131      	bne.n	cc8c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc2a:	1c5a      	adds	r2, r3, #1
    cc2c:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    cc32:	4413      	add	r3, r2
    cc34:	2230      	movs	r2, #48	; 0x30
    cc36:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cc3a:	e027      	b.n	cc8c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    cc3c:	7a3b      	ldrb	r3, [r7, #8]
    cc3e:	f003 030f 	and.w	r3, r3, #15
    cc42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cc46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cc4a:	2b09      	cmp	r3, #9
    cc4c:	d90a      	bls.n	cc64 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cc4e:	78fb      	ldrb	r3, [r7, #3]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d001      	beq.n	cc58 <uint64_to_hexstr+0x4a>
    cc54:	2227      	movs	r2, #39	; 0x27
    cc56:	e000      	b.n	cc5a <uint64_to_hexstr+0x4c>
    cc58:	2207      	movs	r2, #7
    cc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cc5e:	4413      	add	r3, r2
    cc60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc66:	1c5a      	adds	r2, r3, #1
    cc68:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cc6e:	3230      	adds	r2, #48	; 0x30
    cc70:	b2d2      	uxtb	r2, r2
    cc72:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cc76:	440b      	add	r3, r1
    cc78:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cc7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cc80:	0914      	lsrs	r4, r2, #4
    cc82:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cc86:	091d      	lsrs	r5, r3, #4
    cc88:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cc8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cc90:	4313      	orrs	r3, r2
    cc92:	d1d3      	bne.n	cc3c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc96:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d011      	beq.n	ccc2 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cc9e:	e008      	b.n	ccb2 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	1c5a      	adds	r2, r3, #1
    cca4:	607a      	str	r2, [r7, #4]
    cca6:	f107 0110 	add.w	r1, r7, #16
    ccaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ccac:	440a      	add	r2, r1
    ccae:	7812      	ldrb	r2, [r2, #0]
    ccb0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccb4:	1e5a      	subs	r2, r3, #1
    ccb6:	62fa      	str	r2, [r7, #44]	; 0x2c
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d1f1      	bne.n	cca0 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ccbc:	687b      	ldr	r3, [r7, #4]
    ccbe:	2200      	movs	r2, #0
    ccc0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ccc4:	4618      	mov	r0, r3
    ccc6:	3734      	adds	r7, #52	; 0x34
    ccc8:	46bd      	mov	sp, r7
    ccca:	bcb0      	pop	{r4, r5, r7}
    cccc:	4770      	bx	lr

0000ccce <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ccce:	b480      	push	{r7}
    ccd0:	b085      	sub	sp, #20
    ccd2:	af00      	add	r7, sp, #0
    ccd4:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    ccd6:	2300      	movs	r3, #0
    ccd8:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d104      	bne.n	ccea <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cce0:	68fb      	ldr	r3, [r7, #12]
    cce2:	e009      	b.n	ccf8 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cce4:	68fb      	ldr	r3, [r7, #12]
    cce6:	3301      	adds	r3, #1
    cce8:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	1c5a      	adds	r2, r3, #1
    ccee:	607a      	str	r2, [r7, #4]
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d1f6      	bne.n	cce4 <simple_strlen+0x16>
    }
    return ui32RetVal;
    ccf6:	68fb      	ldr	r3, [r7, #12]
}
    ccf8:	4618      	mov	r0, r3
    ccfa:	3714      	adds	r7, #20
    ccfc:	46bd      	mov	sp, r7
    ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd02:	4770      	bx	lr

0000cd04 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cd04:	b480      	push	{r7}
    cd06:	b087      	sub	sp, #28
    cd08:	af00      	add	r7, sp, #0
    cd0a:	60f8      	str	r0, [r7, #12]
    cd0c:	460b      	mov	r3, r1
    cd0e:	607a      	str	r2, [r7, #4]
    cd10:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cd12:	2300      	movs	r3, #0
    cd14:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cd16:	687b      	ldr	r3, [r7, #4]
    cd18:	2b00      	cmp	r3, #0
    cd1a:	dc0c      	bgt.n	cd36 <padbuffer+0x32>
    {
        return i32Cnt;
    cd1c:	697b      	ldr	r3, [r7, #20]
    cd1e:	e010      	b.n	cd42 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cd20:	68fb      	ldr	r3, [r7, #12]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d004      	beq.n	cd30 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	1c5a      	adds	r2, r3, #1
    cd2a:	60fa      	str	r2, [r7, #12]
    cd2c:	7afa      	ldrb	r2, [r7, #11]
    cd2e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cd30:	697b      	ldr	r3, [r7, #20]
    cd32:	3301      	adds	r3, #1
    cd34:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cd36:	687b      	ldr	r3, [r7, #4]
    cd38:	1e5a      	subs	r2, r3, #1
    cd3a:	607a      	str	r2, [r7, #4]
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d1ef      	bne.n	cd20 <padbuffer+0x1c>
    }

    return i32Cnt;
    cd40:	697b      	ldr	r3, [r7, #20]
}
    cd42:	4618      	mov	r0, r3
    cd44:	371c      	adds	r7, #28
    cd46:	46bd      	mov	sp, r7
    cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd4c:	4770      	bx	lr
	...

0000cd50 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cd50:	b590      	push	{r4, r7, lr}
    cd52:	b08f      	sub	sp, #60	; 0x3c
    cd54:	af00      	add	r7, sp, #0
    cd56:	60f8      	str	r0, [r7, #12]
    cd58:	60b9      	str	r1, [r7, #8]
    cd5a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cd5c:	68bb      	ldr	r3, [r7, #8]
    cd5e:	681b      	ldr	r3, [r3, #0]
    cd60:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd64:	2b03      	cmp	r3, #3
    cd66:	dc02      	bgt.n	cd6e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cd68:	f06f 0302 	mvn.w	r3, #2
    cd6c:	e0e7      	b.n	cf3e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cd6e:	edd7 7a03 	vldr	s15, [r7, #12]
    cd72:	eef5 7a40 	vcmp.f32	s15, #0.0
    cd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd7a:	d104      	bne.n	cd86 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cd7c:	68bb      	ldr	r3, [r7, #8]
    cd7e:	4a72      	ldr	r2, [pc, #456]	; (cf48 <ftoa+0x1f8>)
    cd80:	601a      	str	r2, [r3, #0]
        return 3;
    cd82:	2303      	movs	r3, #3
    cd84:	e0db      	b.n	cf3e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cd86:	68bb      	ldr	r3, [r7, #8]
    cd88:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cd8a:	68fb      	ldr	r3, [r7, #12]
    cd8c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cd8e:	693b      	ldr	r3, [r7, #16]
    cd90:	15db      	asrs	r3, r3, #23
    cd92:	b2db      	uxtb	r3, r3
    cd94:	3b7f      	subs	r3, #127	; 0x7f
    cd96:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cd98:	693b      	ldr	r3, [r7, #16]
    cd9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cd9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cda2:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cda4:	2300      	movs	r3, #0
    cda6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cda8:	2300      	movs	r3, #0
    cdaa:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cdac:	69fb      	ldr	r3, [r7, #28]
    cdae:	2b1e      	cmp	r3, #30
    cdb0:	dd02      	ble.n	cdb8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cdb2:	f06f 0301 	mvn.w	r3, #1
    cdb6:	e0c2      	b.n	cf3e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cdb8:	69fb      	ldr	r3, [r7, #28]
    cdba:	f113 0f17 	cmn.w	r3, #23
    cdbe:	da02      	bge.n	cdc6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cdc0:	f04f 33ff 	mov.w	r3, #4294967295
    cdc4:	e0bb      	b.n	cf3e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cdc6:	69fb      	ldr	r3, [r7, #28]
    cdc8:	2b16      	cmp	r3, #22
    cdca:	dd06      	ble.n	cdda <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cdcc:	69fb      	ldr	r3, [r7, #28]
    cdce:	3b17      	subs	r3, #23
    cdd0:	69ba      	ldr	r2, [r7, #24]
    cdd2:	fa02 f303 	lsl.w	r3, r2, r3
    cdd6:	637b      	str	r3, [r7, #52]	; 0x34
    cdd8:	e01a      	b.n	ce10 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cdda:	69fb      	ldr	r3, [r7, #28]
    cddc:	2b00      	cmp	r3, #0
    cdde:	db0f      	blt.n	ce00 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cde0:	69fb      	ldr	r3, [r7, #28]
    cde2:	f1c3 0317 	rsb	r3, r3, #23
    cde6:	69ba      	ldr	r2, [r7, #24]
    cde8:	fa42 f303 	asr.w	r3, r2, r3
    cdec:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cdee:	69fb      	ldr	r3, [r7, #28]
    cdf0:	3301      	adds	r3, #1
    cdf2:	69ba      	ldr	r2, [r7, #24]
    cdf4:	fa02 f303 	lsl.w	r3, r2, r3
    cdf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdfc:	633b      	str	r3, [r7, #48]	; 0x30
    cdfe:	e007      	b.n	ce10 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ce00:	69bb      	ldr	r3, [r7, #24]
    ce02:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ce06:	69fb      	ldr	r3, [r7, #28]
    ce08:	43db      	mvns	r3, r3
    ce0a:	fa42 f303 	asr.w	r3, r2, r3
    ce0e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ce10:	693b      	ldr	r3, [r7, #16]
    ce12:	2b00      	cmp	r3, #0
    ce14:	da04      	bge.n	ce20 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ce16:	68bb      	ldr	r3, [r7, #8]
    ce18:	1c5a      	adds	r2, r3, #1
    ce1a:	60ba      	str	r2, [r7, #8]
    ce1c:	222d      	movs	r2, #45	; 0x2d
    ce1e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ce20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce22:	2b00      	cmp	r3, #0
    ce24:	d105      	bne.n	ce32 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ce26:	68bb      	ldr	r3, [r7, #8]
    ce28:	1c5a      	adds	r2, r3, #1
    ce2a:	60ba      	str	r2, [r7, #8]
    ce2c:	2230      	movs	r2, #48	; 0x30
    ce2e:	701a      	strb	r2, [r3, #0]
    ce30:	e021      	b.n	ce76 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce34:	2b00      	cmp	r3, #0
    ce36:	dd08      	ble.n	ce4a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ce38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce3a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ce3e:	68ba      	ldr	r2, [r7, #8]
    ce40:	4618      	mov	r0, r3
    ce42:	4621      	mov	r1, r4
    ce44:	f7ff fe9b 	bl	cb7e <uint64_to_str>
    ce48:	e011      	b.n	ce6e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    ce4a:	68bb      	ldr	r3, [r7, #8]
    ce4c:	1c5a      	adds	r2, r3, #1
    ce4e:	60ba      	str	r2, [r7, #8]
    ce50:	222d      	movs	r2, #45	; 0x2d
    ce52:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ce54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce56:	425b      	negs	r3, r3
    ce58:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ce5c:	68ba      	ldr	r2, [r7, #8]
    ce5e:	4618      	mov	r0, r3
    ce60:	4621      	mov	r1, r4
    ce62:	f7ff fe8c 	bl	cb7e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ce66:	e002      	b.n	ce6e <ftoa+0x11e>
        {
            pcBuf++;
    ce68:	68bb      	ldr	r3, [r7, #8]
    ce6a:	3301      	adds	r3, #1
    ce6c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	781b      	ldrb	r3, [r3, #0]
    ce72:	2b00      	cmp	r3, #0
    ce74:	d1f8      	bne.n	ce68 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ce76:	68bb      	ldr	r3, [r7, #8]
    ce78:	1c5a      	adds	r2, r3, #1
    ce7a:	60ba      	str	r2, [r7, #8]
    ce7c:	222e      	movs	r2, #46	; 0x2e
    ce7e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce82:	2b00      	cmp	r3, #0
    ce84:	d105      	bne.n	ce92 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    ce86:	68bb      	ldr	r3, [r7, #8]
    ce88:	1c5a      	adds	r2, r3, #1
    ce8a:	60ba      	str	r2, [r7, #8]
    ce8c:	2230      	movs	r2, #48	; 0x30
    ce8e:	701a      	strb	r2, [r3, #0]
    ce90:	e04f      	b.n	cf32 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce92:	68ba      	ldr	r2, [r7, #8]
    ce94:	6a3b      	ldr	r3, [r7, #32]
    ce96:	1ad3      	subs	r3, r2, r3
    ce98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce9a:	1ad3      	subs	r3, r2, r3
    ce9c:	3b01      	subs	r3, #1
    ce9e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cea0:	697a      	ldr	r2, [r7, #20]
    cea2:	687b      	ldr	r3, [r7, #4]
    cea4:	4293      	cmp	r3, r2
    cea6:	bfa8      	it	ge
    cea8:	4613      	movge	r3, r2
    ceaa:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    ceac:	2300      	movs	r3, #0
    ceae:	62bb      	str	r3, [r7, #40]	; 0x28
    ceb0:	e015      	b.n	cede <ftoa+0x18e>
        {
            i32FracPart *= 10;
    ceb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ceb4:	4613      	mov	r3, r2
    ceb6:	009b      	lsls	r3, r3, #2
    ceb8:	4413      	add	r3, r2
    ceba:	005b      	lsls	r3, r3, #1
    cebc:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cebe:	68bb      	ldr	r3, [r7, #8]
    cec0:	1c5a      	adds	r2, r3, #1
    cec2:	60ba      	str	r2, [r7, #8]
    cec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cec6:	1612      	asrs	r2, r2, #24
    cec8:	b2d2      	uxtb	r2, r2
    ceca:	3230      	adds	r2, #48	; 0x30
    cecc:	b2d2      	uxtb	r2, r2
    cece:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ced2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ced6:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ceda:	3301      	adds	r3, #1
    cedc:	62bb      	str	r3, [r7, #40]	; 0x28
    cede:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cee0:	697b      	ldr	r3, [r7, #20]
    cee2:	429a      	cmp	r2, r3
    cee4:	dbe5      	blt.n	ceb2 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cee8:	4613      	mov	r3, r2
    ceea:	009b      	lsls	r3, r3, #2
    ceec:	4413      	add	r3, r2
    ceee:	005b      	lsls	r3, r3, #1
    cef0:	161b      	asrs	r3, r3, #24
    cef2:	2b04      	cmp	r3, #4
    cef4:	dd1d      	ble.n	cf32 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cef6:	68bb      	ldr	r3, [r7, #8]
    cef8:	3b01      	subs	r3, #1
    cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cefc:	e015      	b.n	cf2a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	2b2e      	cmp	r3, #46	; 0x2e
    cf04:	d00e      	beq.n	cf24 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf08:	781b      	ldrb	r3, [r3, #0]
    cf0a:	2b39      	cmp	r3, #57	; 0x39
    cf0c:	d103      	bne.n	cf16 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf10:	2230      	movs	r2, #48	; 0x30
    cf12:	701a      	strb	r2, [r3, #0]
    cf14:	e006      	b.n	cf24 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	3301      	adds	r3, #1
    cf1c:	b2da      	uxtb	r2, r3
    cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf20:	701a      	strb	r2, [r3, #0]
                    break;
    cf22:	e006      	b.n	cf32 <ftoa+0x1e2>
                }
                pcBuftmp--;
    cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf26:	3b01      	subs	r3, #1
    cf28:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cf2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cf2c:	6a3b      	ldr	r3, [r7, #32]
    cf2e:	429a      	cmp	r2, r3
    cf30:	d2e5      	bcs.n	cefe <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cf32:	68bb      	ldr	r3, [r7, #8]
    cf34:	2200      	movs	r2, #0
    cf36:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cf38:	68ba      	ldr	r2, [r7, #8]
    cf3a:	6a3b      	ldr	r3, [r7, #32]
    cf3c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cf3e:	4618      	mov	r0, r3
    cf40:	373c      	adds	r7, #60	; 0x3c
    cf42:	46bd      	mov	sp, r7
    cf44:	bd90      	pop	{r4, r7, pc}
    cf46:	bf00      	nop
    cf48:	00302e30 	.word	0x00302e30

0000cf4c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cf4c:	b590      	push	{r4, r7, lr}
    cf4e:	b095      	sub	sp, #84	; 0x54
    cf50:	af00      	add	r7, sp, #0
    cf52:	60f8      	str	r0, [r7, #12]
    cf54:	60b9      	str	r1, [r7, #8]
    cf56:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cf58:	2300      	movs	r3, #0
    cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cf5c:	2300      	movs	r3, #0
    cf5e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cf60:	e2e3      	b.n	d52a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cf62:	2306      	movs	r3, #6
    cf64:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cf66:	68bb      	ldr	r3, [r7, #8]
    cf68:	781b      	ldrb	r3, [r3, #0]
    cf6a:	2b25      	cmp	r3, #37	; 0x25
    cf6c:	d01f      	beq.n	cfae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cf6e:	68fb      	ldr	r3, [r7, #12]
    cf70:	2b00      	cmp	r3, #0
    cf72:	d015      	beq.n	cfa0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cf74:	68bb      	ldr	r3, [r7, #8]
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	2b0a      	cmp	r3, #10
    cf7a:	d10b      	bne.n	cf94 <am_util_stdio_vsprintf+0x48>
    cf7c:	4bb1      	ldr	r3, [pc, #708]	; (d244 <am_util_stdio_vsprintf+0x2f8>)
    cf7e:	781b      	ldrb	r3, [r3, #0]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d007      	beq.n	cf94 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cf84:	68fb      	ldr	r3, [r7, #12]
    cf86:	1c5a      	adds	r2, r3, #1
    cf88:	60fa      	str	r2, [r7, #12]
    cf8a:	220d      	movs	r2, #13
    cf8c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cf8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf90:	3301      	adds	r3, #1
    cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cf94:	68fb      	ldr	r3, [r7, #12]
    cf96:	1c5a      	adds	r2, r3, #1
    cf98:	60fa      	str	r2, [r7, #12]
    cf9a:	68ba      	ldr	r2, [r7, #8]
    cf9c:	7812      	ldrb	r2, [r2, #0]
    cf9e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cfa0:	68bb      	ldr	r3, [r7, #8]
    cfa2:	3301      	adds	r3, #1
    cfa4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfa8:	3301      	adds	r3, #1
    cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cfac:	e2bd      	b.n	d52a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cfae:	68bb      	ldr	r3, [r7, #8]
    cfb0:	3301      	adds	r3, #1
    cfb2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cfb4:	2300      	movs	r3, #0
    cfb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cfba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cfc2:	2320      	movs	r3, #32
    cfc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cfc8:	68bb      	ldr	r3, [r7, #8]
    cfca:	781b      	ldrb	r3, [r3, #0]
    cfcc:	2b30      	cmp	r3, #48	; 0x30
    cfce:	d105      	bne.n	cfdc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cfd0:	2330      	movs	r3, #48	; 0x30
    cfd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cfd6:	68bb      	ldr	r3, [r7, #8]
    cfd8:	3301      	adds	r3, #1
    cfda:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cfdc:	f107 0310 	add.w	r3, r7, #16
    cfe0:	4619      	mov	r1, r3
    cfe2:	68b8      	ldr	r0, [r7, #8]
    cfe4:	f7ff fd85 	bl	caf2 <decstr_to_int>
    cfe8:	4603      	mov	r3, r0
    cfea:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cfec:	693b      	ldr	r3, [r7, #16]
    cfee:	68ba      	ldr	r2, [r7, #8]
    cff0:	4413      	add	r3, r2
    cff2:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cff4:	68bb      	ldr	r3, [r7, #8]
    cff6:	781b      	ldrb	r3, [r3, #0]
    cff8:	2b73      	cmp	r3, #115	; 0x73
    cffa:	d005      	beq.n	d008 <am_util_stdio_vsprintf+0xbc>
    cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cffe:	2b00      	cmp	r3, #0
    d000:	da02      	bge.n	d008 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d004:	425b      	negs	r3, r3
    d006:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d008:	68bb      	ldr	r3, [r7, #8]
    d00a:	781b      	ldrb	r3, [r3, #0]
    d00c:	2b2e      	cmp	r3, #46	; 0x2e
    d00e:	d10e      	bne.n	d02e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d010:	68bb      	ldr	r3, [r7, #8]
    d012:	3301      	adds	r3, #1
    d014:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d016:	f107 0310 	add.w	r3, r7, #16
    d01a:	4619      	mov	r1, r3
    d01c:	68b8      	ldr	r0, [r7, #8]
    d01e:	f7ff fd68 	bl	caf2 <decstr_to_int>
    d022:	4603      	mov	r3, r0
    d024:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d026:	693b      	ldr	r3, [r7, #16]
    d028:	68ba      	ldr	r2, [r7, #8]
    d02a:	4413      	add	r3, r2
    d02c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d02e:	68bb      	ldr	r3, [r7, #8]
    d030:	781b      	ldrb	r3, [r3, #0]
    d032:	2b6c      	cmp	r3, #108	; 0x6c
    d034:	d10c      	bne.n	d050 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d036:	68bb      	ldr	r3, [r7, #8]
    d038:	3301      	adds	r3, #1
    d03a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d03c:	68bb      	ldr	r3, [r7, #8]
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	2b6c      	cmp	r3, #108	; 0x6c
    d042:	d105      	bne.n	d050 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d044:	68bb      	ldr	r3, [r7, #8]
    d046:	3301      	adds	r3, #1
    d048:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d04a:	2301      	movs	r3, #1
    d04c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d050:	68bb      	ldr	r3, [r7, #8]
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	3b46      	subs	r3, #70	; 0x46
    d056:	2b32      	cmp	r3, #50	; 0x32
    d058:	f200 8254 	bhi.w	d504 <am_util_stdio_vsprintf+0x5b8>
    d05c:	a201      	add	r2, pc, #4	; (adr r2, d064 <am_util_stdio_vsprintf+0x118>)
    d05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d062:	bf00      	nop
    d064:	0000d48f 	.word	0x0000d48f
    d068:	0000d505 	.word	0x0000d505
    d06c:	0000d505 	.word	0x0000d505
    d070:	0000d505 	.word	0x0000d505
    d074:	0000d505 	.word	0x0000d505
    d078:	0000d505 	.word	0x0000d505
    d07c:	0000d505 	.word	0x0000d505
    d080:	0000d505 	.word	0x0000d505
    d084:	0000d505 	.word	0x0000d505
    d088:	0000d505 	.word	0x0000d505
    d08c:	0000d505 	.word	0x0000d505
    d090:	0000d505 	.word	0x0000d505
    d094:	0000d505 	.word	0x0000d505
    d098:	0000d505 	.word	0x0000d505
    d09c:	0000d505 	.word	0x0000d505
    d0a0:	0000d505 	.word	0x0000d505
    d0a4:	0000d505 	.word	0x0000d505
    d0a8:	0000d505 	.word	0x0000d505
    d0ac:	0000d22b 	.word	0x0000d22b
    d0b0:	0000d505 	.word	0x0000d505
    d0b4:	0000d505 	.word	0x0000d505
    d0b8:	0000d505 	.word	0x0000d505
    d0bc:	0000d505 	.word	0x0000d505
    d0c0:	0000d505 	.word	0x0000d505
    d0c4:	0000d505 	.word	0x0000d505
    d0c8:	0000d505 	.word	0x0000d505
    d0cc:	0000d505 	.word	0x0000d505
    d0d0:	0000d505 	.word	0x0000d505
    d0d4:	0000d505 	.word	0x0000d505
    d0d8:	0000d131 	.word	0x0000d131
    d0dc:	0000d357 	.word	0x0000d357
    d0e0:	0000d505 	.word	0x0000d505
    d0e4:	0000d48f 	.word	0x0000d48f
    d0e8:	0000d505 	.word	0x0000d505
    d0ec:	0000d505 	.word	0x0000d505
    d0f0:	0000d357 	.word	0x0000d357
    d0f4:	0000d505 	.word	0x0000d505
    d0f8:	0000d505 	.word	0x0000d505
    d0fc:	0000d505 	.word	0x0000d505
    d100:	0000d505 	.word	0x0000d505
    d104:	0000d505 	.word	0x0000d505
    d108:	0000d505 	.word	0x0000d505
    d10c:	0000d505 	.word	0x0000d505
    d110:	0000d505 	.word	0x0000d505
    d114:	0000d505 	.word	0x0000d505
    d118:	0000d157 	.word	0x0000d157
    d11c:	0000d505 	.word	0x0000d505
    d120:	0000d2c5 	.word	0x0000d2c5
    d124:	0000d505 	.word	0x0000d505
    d128:	0000d505 	.word	0x0000d505
    d12c:	0000d225 	.word	0x0000d225
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d130:	687b      	ldr	r3, [r7, #4]
    d132:	1d1a      	adds	r2, r3, #4
    d134:	607a      	str	r2, [r7, #4]
    d136:	681b      	ldr	r3, [r3, #0]
    d138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d13c:	68fb      	ldr	r3, [r7, #12]
    d13e:	2b00      	cmp	r3, #0
    d140:	d005      	beq.n	d14e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d142:	68fb      	ldr	r3, [r7, #12]
    d144:	1c5a      	adds	r2, r3, #1
    d146:	60fa      	str	r2, [r7, #12]
    d148:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d14c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d150:	3301      	adds	r3, #1
    d152:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d154:	e1e6      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	1d1a      	adds	r2, r3, #4
    d15a:	607a      	str	r2, [r7, #4]
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d160:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d162:	f7ff fdb4 	bl	ccce <simple_strlen>
    d166:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d16a:	2b00      	cmp	r3, #0
    d16c:	dd2e      	ble.n	d1cc <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d172:	429a      	cmp	r2, r3
    d174:	d22a      	bcs.n	d1cc <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d176:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d17a:	1ad3      	subs	r3, r2, r3
    d17c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d182:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d184:	4619      	mov	r1, r3
    d186:	68f8      	ldr	r0, [r7, #12]
    d188:	f7ff fdbc 	bl	cd04 <padbuffer>
    d18c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d18e:	68fb      	ldr	r3, [r7, #12]
    d190:	2b00      	cmp	r3, #0
    d192:	d001      	beq.n	d198 <am_util_stdio_vsprintf+0x24c>
    d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d196:	e000      	b.n	d19a <am_util_stdio_vsprintf+0x24e>
    d198:	2300      	movs	r3, #0
    d19a:	68fa      	ldr	r2, [r7, #12]
    d19c:	4413      	add	r3, r2
    d19e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1a4:	4413      	add	r3, r2
    d1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d1a8:	2300      	movs	r3, #0
    d1aa:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d1ac:	e00e      	b.n	d1cc <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d1ae:	68fb      	ldr	r3, [r7, #12]
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d005      	beq.n	d1c0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d1b4:	68fb      	ldr	r3, [r7, #12]
    d1b6:	1c5a      	adds	r2, r3, #1
    d1b8:	60fa      	str	r2, [r7, #12]
    d1ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d1bc:	7812      	ldrb	r2, [r2, #0]
    d1be:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d1c2:	3301      	adds	r3, #1
    d1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1c8:	3301      	adds	r3, #1
    d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d1ce:	781b      	ldrb	r3, [r3, #0]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d1ec      	bne.n	d1ae <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	f000 81a1 	beq.w	d51e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1de:	425b      	negs	r3, r3
    d1e0:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d1e6:	429a      	cmp	r2, r3
    d1e8:	f080 8199 	bcs.w	d51e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d1ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d1f0:	1ad3      	subs	r3, r2, r3
    d1f2:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1fa:	4619      	mov	r1, r3
    d1fc:	68f8      	ldr	r0, [r7, #12]
    d1fe:	f7ff fd81 	bl	cd04 <padbuffer>
    d202:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d204:	68fb      	ldr	r3, [r7, #12]
    d206:	2b00      	cmp	r3, #0
    d208:	d001      	beq.n	d20e <am_util_stdio_vsprintf+0x2c2>
    d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d20c:	e000      	b.n	d210 <am_util_stdio_vsprintf+0x2c4>
    d20e:	2300      	movs	r3, #0
    d210:	68fa      	ldr	r2, [r7, #12]
    d212:	4413      	add	r3, r2
    d214:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d21a:	4413      	add	r3, r2
    d21c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d21e:	2300      	movs	r3, #0
    d220:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d222:	e17c      	b.n	d51e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d224:	2301      	movs	r3, #1
    d226:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d22a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d22e:	2b00      	cmp	r3, #0
    d230:	d00a      	beq.n	d248 <am_util_stdio_vsprintf+0x2fc>
    d232:	687b      	ldr	r3, [r7, #4]
    d234:	3307      	adds	r3, #7
    d236:	f023 0307 	bic.w	r3, r3, #7
    d23a:	f103 0208 	add.w	r2, r3, #8
    d23e:	607a      	str	r2, [r7, #4]
    d240:	cb18      	ldmia	r3, {r3, r4}
    d242:	e007      	b.n	d254 <am_util_stdio_vsprintf+0x308>
    d244:	10001100 	.word	0x10001100
                                      va_arg(pArgs, uint32_t);
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	1d1a      	adds	r2, r3, #4
    d24c:	607a      	str	r2, [r7, #4]
    d24e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d250:	f04f 0400 	mov.w	r4, #0
    d254:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d25a:	2b00      	cmp	r3, #0
    d25c:	d01e      	beq.n	d29c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d25e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d262:	f7ff fc22 	bl	caaa <ndigits_in_hex>
    d266:	4602      	mov	r2, r0
    d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d26a:	1a9b      	subs	r3, r3, r2
    d26c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d272:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d274:	4619      	mov	r1, r3
    d276:	68f8      	ldr	r0, [r7, #12]
    d278:	f7ff fd44 	bl	cd04 <padbuffer>
    d27c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d27e:	68fb      	ldr	r3, [r7, #12]
    d280:	2b00      	cmp	r3, #0
    d282:	d001      	beq.n	d288 <am_util_stdio_vsprintf+0x33c>
    d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d286:	e000      	b.n	d28a <am_util_stdio_vsprintf+0x33e>
    d288:	2300      	movs	r3, #0
    d28a:	68fa      	ldr	r2, [r7, #12]
    d28c:	4413      	add	r3, r2
    d28e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d294:	4413      	add	r3, r2
    d296:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d298:	2300      	movs	r3, #0
    d29a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d29c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d2a0:	68fa      	ldr	r2, [r7, #12]
    d2a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2a6:	f7ff fcb2 	bl	cc0e <uint64_to_hexstr>
    d2aa:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d2ac:	68fb      	ldr	r3, [r7, #12]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d003      	beq.n	d2ba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2b4:	68fa      	ldr	r2, [r7, #12]
    d2b6:	4413      	add	r3, r2
    d2b8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2be:	4413      	add	r3, r2
    d2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2c2:	e12f      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d008      	beq.n	d2de <am_util_stdio_vsprintf+0x392>
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	3307      	adds	r3, #7
    d2d0:	f023 0307 	bic.w	r3, r3, #7
    d2d4:	f103 0208 	add.w	r2, r3, #8
    d2d8:	607a      	str	r2, [r7, #4]
    d2da:	cb18      	ldmia	r3, {r3, r4}
    d2dc:	e005      	b.n	d2ea <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	1d1a      	adds	r2, r3, #4
    d2e2:	607a      	str	r2, [r7, #4]
    d2e4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2e6:	f04f 0400 	mov.w	r4, #0
    d2ea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d01e      	beq.n	d332 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d2f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2f8:	f7ff fb99 	bl	ca2e <ndigits_in_u64>
    d2fc:	4602      	mov	r2, r0
    d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d300:	1a9b      	subs	r3, r3, r2
    d302:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d308:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d30a:	4619      	mov	r1, r3
    d30c:	68f8      	ldr	r0, [r7, #12]
    d30e:	f7ff fcf9 	bl	cd04 <padbuffer>
    d312:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d314:	68fb      	ldr	r3, [r7, #12]
    d316:	2b00      	cmp	r3, #0
    d318:	d001      	beq.n	d31e <am_util_stdio_vsprintf+0x3d2>
    d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d31c:	e000      	b.n	d320 <am_util_stdio_vsprintf+0x3d4>
    d31e:	2300      	movs	r3, #0
    d320:	68fa      	ldr	r2, [r7, #12]
    d322:	4413      	add	r3, r2
    d324:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d32a:	4413      	add	r3, r2
    d32c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d32e:	2300      	movs	r3, #0
    d330:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d332:	68fa      	ldr	r2, [r7, #12]
    d334:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d338:	f7ff fc21 	bl	cb7e <uint64_to_str>
    d33c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d33e:	68fb      	ldr	r3, [r7, #12]
    d340:	2b00      	cmp	r3, #0
    d342:	d003      	beq.n	d34c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d346:	68fa      	ldr	r2, [r7, #12]
    d348:	4413      	add	r3, r2
    d34a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d34e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d350:	4413      	add	r3, r2
    d352:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d354:	e0e6      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d356:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d35a:	2b00      	cmp	r3, #0
    d35c:	d008      	beq.n	d370 <am_util_stdio_vsprintf+0x424>
    d35e:	687b      	ldr	r3, [r7, #4]
    d360:	3307      	adds	r3, #7
    d362:	f023 0307 	bic.w	r3, r3, #7
    d366:	f103 0208 	add.w	r2, r3, #8
    d36a:	607a      	str	r2, [r7, #4]
    d36c:	cb18      	ldmia	r3, {r3, r4}
    d36e:	e005      	b.n	d37c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d370:	687b      	ldr	r3, [r7, #4]
    d372:	1d1a      	adds	r2, r3, #4
    d374:	607a      	str	r2, [r7, #4]
    d376:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d378:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d37c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d380:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d384:	2b00      	cmp	r3, #0
    d386:	f174 0300 	sbcs.w	r3, r4, #0
    d38a:	da0a      	bge.n	d3a2 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d38c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d390:	425b      	negs	r3, r3
    d392:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d396:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d39a:	2301      	movs	r3, #1
    d39c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d3a0:	e006      	b.n	d3b0 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d3a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d3a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d3aa:	2300      	movs	r3, #0
    d3ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	d04a      	beq.n	d44c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d3b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d3ba:	4618      	mov	r0, r3
    d3bc:	4621      	mov	r1, r4
    d3be:	f7ff fb57 	bl	ca70 <ndigits_in_i64>
    d3c2:	4602      	mov	r2, r0
    d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3c6:	1a9b      	subs	r3, r3, r2
    d3c8:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d3ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d011      	beq.n	d3f6 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3d4:	3b01      	subs	r3, #1
    d3d6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3dc:	2b30      	cmp	r3, #48	; 0x30
    d3de:	d10a      	bne.n	d3f6 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d3e0:	68fb      	ldr	r3, [r7, #12]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d004      	beq.n	d3f0 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d3e6:	68fb      	ldr	r3, [r7, #12]
    d3e8:	1c5a      	adds	r2, r3, #1
    d3ea:	60fa      	str	r2, [r7, #12]
    d3ec:	222d      	movs	r2, #45	; 0x2d
    d3ee:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3f2:	3301      	adds	r3, #1
    d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d3fc:	4619      	mov	r1, r3
    d3fe:	68f8      	ldr	r0, [r7, #12]
    d400:	f7ff fc80 	bl	cd04 <padbuffer>
    d404:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d406:	68fb      	ldr	r3, [r7, #12]
    d408:	2b00      	cmp	r3, #0
    d40a:	d001      	beq.n	d410 <am_util_stdio_vsprintf+0x4c4>
    d40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d40e:	e000      	b.n	d412 <am_util_stdio_vsprintf+0x4c6>
    d410:	2300      	movs	r3, #0
    d412:	68fa      	ldr	r2, [r7, #12]
    d414:	4413      	add	r3, r2
    d416:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d41a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d41c:	4413      	add	r3, r2
    d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d420:	2300      	movs	r3, #0
    d422:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d424:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d428:	2b00      	cmp	r3, #0
    d42a:	d01e      	beq.n	d46a <am_util_stdio_vsprintf+0x51e>
    d42c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d430:	2b20      	cmp	r3, #32
    d432:	d11a      	bne.n	d46a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d434:	68fb      	ldr	r3, [r7, #12]
    d436:	2b00      	cmp	r3, #0
    d438:	d004      	beq.n	d444 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d43a:	68fb      	ldr	r3, [r7, #12]
    d43c:	1c5a      	adds	r2, r3, #1
    d43e:	60fa      	str	r2, [r7, #12]
    d440:	222d      	movs	r2, #45	; 0x2d
    d442:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d446:	3301      	adds	r3, #1
    d448:	63fb      	str	r3, [r7, #60]	; 0x3c
    d44a:	e00e      	b.n	d46a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d44c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d450:	2b00      	cmp	r3, #0
    d452:	d00a      	beq.n	d46a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d454:	68fb      	ldr	r3, [r7, #12]
    d456:	2b00      	cmp	r3, #0
    d458:	d004      	beq.n	d464 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d45a:	68fb      	ldr	r3, [r7, #12]
    d45c:	1c5a      	adds	r2, r3, #1
    d45e:	60fa      	str	r2, [r7, #12]
    d460:	222d      	movs	r2, #45	; 0x2d
    d462:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d466:	3301      	adds	r3, #1
    d468:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d46a:	68fa      	ldr	r2, [r7, #12]
    d46c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d470:	f7ff fb85 	bl	cb7e <uint64_to_str>
    d474:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d476:	68fb      	ldr	r3, [r7, #12]
    d478:	2b00      	cmp	r3, #0
    d47a:	d003      	beq.n	d484 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d47e:	68fa      	ldr	r2, [r7, #12]
    d480:	4413      	add	r3, r2
    d482:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d488:	4413      	add	r3, r2
    d48a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d48c:	e04a      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d48e:	68fb      	ldr	r3, [r7, #12]
    d490:	2b00      	cmp	r3, #0
    d492:	d046      	beq.n	d522 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d494:	687b      	ldr	r3, [r7, #4]
    d496:	3307      	adds	r3, #7
    d498:	f023 0307 	bic.w	r3, r3, #7
    d49c:	f103 0208 	add.w	r2, r3, #8
    d4a0:	607a      	str	r2, [r7, #4]
    d4a2:	cb18      	ldmia	r3, {r3, r4}
    d4a4:	4618      	mov	r0, r3
    d4a6:	4621      	mov	r1, r4
    d4a8:	f7fe fe2a 	bl	c100 <__aeabi_d2f>
    d4ac:	4603      	mov	r3, r0
    d4ae:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d4b0:	68fb      	ldr	r3, [r7, #12]
    d4b2:	2214      	movs	r2, #20
    d4b4:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d4b8:	68f9      	ldr	r1, [r7, #12]
    d4ba:	6978      	ldr	r0, [r7, #20]
    d4bc:	f7ff fc48 	bl	cd50 <ftoa>
    d4c0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	da14      	bge.n	d4f2 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4ce:	d102      	bne.n	d4d6 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d4d0:	4b1e      	ldr	r3, [pc, #120]	; (d54c <am_util_stdio_vsprintf+0x600>)
    d4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    d4d4:	e008      	b.n	d4e8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4d8:	f113 0f02 	cmn.w	r3, #2
    d4dc:	d102      	bne.n	d4e4 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d4de:	4b1c      	ldr	r3, [pc, #112]	; (d550 <am_util_stdio_vsprintf+0x604>)
    d4e0:	62bb      	str	r3, [r7, #40]	; 0x28
    d4e2:	e001      	b.n	d4e8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d4e4:	4b1b      	ldr	r3, [pc, #108]	; (d554 <am_util_stdio_vsprintf+0x608>)
    d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d4e8:	68fb      	ldr	r3, [r7, #12]
    d4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d4ec:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d4ee:	2303      	movs	r3, #3
    d4f0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4f6:	4413      	add	r3, r2
    d4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4fc:	68fa      	ldr	r2, [r7, #12]
    d4fe:	4413      	add	r3, r2
    d500:	60fb      	str	r3, [r7, #12]
                }
                break;
    d502:	e00e      	b.n	d522 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d504:	68fb      	ldr	r3, [r7, #12]
    d506:	2b00      	cmp	r3, #0
    d508:	d005      	beq.n	d516 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	1c5a      	adds	r2, r3, #1
    d50e:	60fa      	str	r2, [r7, #12]
    d510:	68ba      	ldr	r2, [r7, #8]
    d512:	7812      	ldrb	r2, [r2, #0]
    d514:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d518:	3301      	adds	r3, #1
    d51a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d51c:	e002      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>
                break;
    d51e:	bf00      	nop
    d520:	e000      	b.n	d524 <am_util_stdio_vsprintf+0x5d8>
                break;
    d522:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d524:	68bb      	ldr	r3, [r7, #8]
    d526:	3301      	adds	r3, #1
    d528:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d52a:	68bb      	ldr	r3, [r7, #8]
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	2b00      	cmp	r3, #0
    d530:	f47f ad17 	bne.w	cf62 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d534:	68fb      	ldr	r3, [r7, #12]
    d536:	2b00      	cmp	r3, #0
    d538:	d002      	beq.n	d540 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d53a:	68fb      	ldr	r3, [r7, #12]
    d53c:	2200      	movs	r2, #0
    d53e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d542:	4618      	mov	r0, r3
    d544:	3754      	adds	r7, #84	; 0x54
    d546:	46bd      	mov	sp, r7
    d548:	bd90      	pop	{r4, r7, pc}
    d54a:	bf00      	nop
    d54c:	00302e30 	.word	0x00302e30
    d550:	00232e23 	.word	0x00232e23
    d554:	003f2e3f 	.word	0x003f2e3f

0000d558 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    d558:	b40e      	push	{r1, r2, r3}
    d55a:	b580      	push	{r7, lr}
    d55c:	b085      	sub	sp, #20
    d55e:	af00      	add	r7, sp, #0
    d560:	6078      	str	r0, [r7, #4]
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    d562:	f107 0320 	add.w	r3, r7, #32
    d566:	60bb      	str	r3, [r7, #8]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    d568:	68ba      	ldr	r2, [r7, #8]
    d56a:	69f9      	ldr	r1, [r7, #28]
    d56c:	6878      	ldr	r0, [r7, #4]
    d56e:	f7ff fced 	bl	cf4c <am_util_stdio_vsprintf>
    d572:	60f8      	str	r0, [r7, #12]
    va_end(pArgs);

    return ui32CharCnt;
    d574:	68fb      	ldr	r3, [r7, #12]
}
    d576:	4618      	mov	r0, r3
    d578:	3714      	adds	r7, #20
    d57a:	46bd      	mov	sp, r7
    d57c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d580:	b003      	add	sp, #12
    d582:	4770      	bx	lr

0000d584 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d584:	b40f      	push	{r0, r1, r2, r3}
    d586:	b580      	push	{r7, lr}
    d588:	b082      	sub	sp, #8
    d58a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d58c:	f107 0314 	add.w	r3, r7, #20
    d590:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d592:	683a      	ldr	r2, [r7, #0]
    d594:	6939      	ldr	r1, [r7, #16]
    d596:	4808      	ldr	r0, [pc, #32]	; (d5b8 <am_util_stdio_printf+0x34>)
    d598:	f7ff fcd8 	bl	cf4c <am_util_stdio_vsprintf>
    d59c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d59e:	4b07      	ldr	r3, [pc, #28]	; (d5bc <am_util_stdio_printf+0x38>)
    d5a0:	681b      	ldr	r3, [r3, #0]
    d5a2:	4805      	ldr	r0, [pc, #20]	; (d5b8 <am_util_stdio_printf+0x34>)
    d5a4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d5a6:	687b      	ldr	r3, [r7, #4]
}
    d5a8:	4618      	mov	r0, r3
    d5aa:	3708      	adds	r7, #8
    d5ac:	46bd      	mov	sp, r7
    d5ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d5b2:	b004      	add	sp, #16
    d5b4:	4770      	bx	lr
    d5b6:	bf00      	nop
    d5b8:	10001000 	.word	0x10001000
    d5bc:	10001210 	.word	0x10001210

0000d5c0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d5c0:	b580      	push	{r7, lr}
    d5c2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d5c4:	4802      	ldr	r0, [pc, #8]	; (d5d0 <am_util_stdio_terminal_clear+0x10>)
    d5c6:	f7ff ffdd 	bl	d584 <am_util_stdio_printf>
}
    d5ca:	bf00      	nop
    d5cc:	bd80      	pop	{r7, pc}
    d5ce:	bf00      	nop
    d5d0:	0000f4cc 	.word	0x0000f4cc

0000d5d4 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d5d4:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d5d6:	f000 fb25 	bl	dc24 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d5da:	2000      	movs	r0, #0
    d5dc:	f7ff f938 	bl	c850 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d5e0:	4b08      	ldr	r3, [pc, #32]	; (d604 <am_bsp_low_power_init+0x30>)
    d5e2:	2029      	movs	r0, #41	; 0x29
    d5e4:	6819      	ldr	r1, [r3, #0]
    d5e6:	f000 f9cf 	bl	d988 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d5ea:	f000 fc5d 	bl	dea8 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d5ee:	2001      	movs	r0, #1
    d5f0:	f000 fc98 	bl	df24 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d5f4:	2100      	movs	r1, #0
    d5f6:	2003      	movs	r0, #3
    d5f8:	f000 f83a 	bl	d670 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d5fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d600:	f000 bc9c 	b.w	df3c <am_hal_rtc_osc_disable>
    d604:	0000f598 	.word	0x0000f598

0000d608 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d608:	b530      	push	{r4, r5, lr}
    d60a:	b083      	sub	sp, #12
    d60c:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d60e:	f000 fb01 	bl	dc14 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d612:	4c11      	ldr	r4, [pc, #68]	; (d658 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d614:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d616:	6823      	ldr	r3, [r4, #0]
    d618:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d61c:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d61e:	9801      	ldr	r0, [sp, #4]
    d620:	f000 fafc 	bl	dc1c <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d624:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d626:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d628:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d62a:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d62c:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d62e:	005d      	lsls	r5, r3, #1
    d630:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d634:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d636:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d638:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d63c:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d63e:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d642:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d646:	0212      	lsls	r2, r2, #8
    d648:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d64c:	432b      	orrs	r3, r5
    d64e:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d650:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d652:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d654:	b003      	add	sp, #12
    d656:	bd30      	pop	{r4, r5, pc}
    d658:	40018000 	.word	0x40018000

0000d65c <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d65c:	4a03      	ldr	r2, [pc, #12]	; (d66c <am_hal_cachectrl_enable+0x10>)
    d65e:	6813      	ldr	r3, [r2, #0]
    d660:	f043 0001 	orr.w	r0, r3, #1
    d664:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d666:	2000      	movs	r0, #0
    d668:	4770      	bx	lr
    d66a:	bf00      	nop
    d66c:	40018000 	.word	0x40018000

0000d670 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d670:	2809      	cmp	r0, #9
    d672:	d852      	bhi.n	d71a <am_hal_clkgen_control+0xaa>
    d674:	e8df f000 	tbb	[pc, r0]
    d678:	2b21190d 	.word	0x2b21190d
    d67c:	51513d33 	.word	0x51513d33
    d680:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d686:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d688:	6a1a      	ldr	r2, [r3, #32]
    d68a:	f36f 0200 	bfc	r2, #0, #1
    d68e:	621a      	str	r2, [r3, #32]
            break;
    d690:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d692:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d696:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d698:	2047      	movs	r0, #71	; 0x47
    d69a:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d69e:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d6a2:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d6a4:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d6a8:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6aa:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6ae:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6b0:	68ca      	ldr	r2, [r1, #12]
    d6b2:	f022 0301 	bic.w	r3, r2, #1
    d6b6:	60cb      	str	r3, [r1, #12]
            break;
    d6b8:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6ba:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6be:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d6c4:	f022 0302 	bic.w	r3, r2, #2
    d6c8:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d6cc:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6d2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d6d4:	68d3      	ldr	r3, [r2, #12]
    d6d6:	f043 0101 	orr.w	r1, r3, #1
    d6da:	60d1      	str	r1, [r2, #12]
            break;
    d6dc:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6de:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d6e2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d6e4:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d6e8:	f043 0102 	orr.w	r1, r3, #2
    d6ec:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d6f0:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d6f6:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6f8:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d6fa:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d6fc:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d6fe:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d700:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d702:	615a      	str	r2, [r3, #20]
            break;
    d704:	4770      	bx	lr
            if ( pArgs == 0 )
    d706:	b151      	cbz	r1, d71e <am_hal_clkgen_control+0xae>
    d708:	6808      	ldr	r0, [r1, #0]
    d70a:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d70e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d712:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d714:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d718:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d71a:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d71c:	4770      	bx	lr
    d71e:	4901      	ldr	r1, [pc, #4]	; (d724 <am_hal_clkgen_control+0xb4>)
    d720:	e7f5      	b.n	d70e <am_hal_clkgen_control+0x9e>
    d722:	bf00      	nop
    d724:	0025b801 	.word	0x0025b801

0000d728 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d728:	4b00      	ldr	r3, [pc, #0]	; (d72c <am_hal_flash_delay+0x4>)
    d72a:	4718      	bx	r3
    d72c:	0800009d 	.word	0x0800009d

0000d730 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d734:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d738:	f8df 8248 	ldr.w	r8, [pc, #584]	; d984 <am_hal_flash_delay_status_check+0x254>
{
    d73c:	4607      	mov	r7, r0
    d73e:	460c      	mov	r4, r1
    d740:	4615      	mov	r5, r2
    d742:	461e      	mov	r6, r3
    d744:	f1be 0f00 	cmp.w	lr, #0
    d748:	f000 808e 	beq.w	d868 <am_hal_flash_delay_status_check+0x138>
    d74c:	f010 0907 	ands.w	r9, r0, #7
    d750:	d044      	beq.n	d7dc <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d752:	680b      	ldr	r3, [r1, #0]
    d754:	4013      	ands	r3, r2
    d756:	429e      	cmp	r6, r3
    d758:	f000 8083 	beq.w	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d75c:	2001      	movs	r0, #1
    d75e:	47c0      	blx	r8
    d760:	f1b9 0f01 	cmp.w	r9, #1
    d764:	f107 37ff 	add.w	r7, r7, #4294967295
    d768:	d038      	beq.n	d7dc <am_hal_flash_delay_status_check+0xac>
    d76a:	f1b9 0f02 	cmp.w	r9, #2
    d76e:	d02e      	beq.n	d7ce <am_hal_flash_delay_status_check+0x9e>
    d770:	f1b9 0f03 	cmp.w	r9, #3
    d774:	d024      	beq.n	d7c0 <am_hal_flash_delay_status_check+0x90>
    d776:	f1b9 0f04 	cmp.w	r9, #4
    d77a:	d01a      	beq.n	d7b2 <am_hal_flash_delay_status_check+0x82>
    d77c:	f1b9 0f05 	cmp.w	r9, #5
    d780:	d010      	beq.n	d7a4 <am_hal_flash_delay_status_check+0x74>
    d782:	f1b9 0f06 	cmp.w	r9, #6
    d786:	d006      	beq.n	d796 <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d788:	6820      	ldr	r0, [r4, #0]
    d78a:	4028      	ands	r0, r5
    d78c:	4286      	cmp	r6, r0
    d78e:	d068      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d790:	2001      	movs	r0, #1
    d792:	47c0      	blx	r8
    d794:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d796:	6821      	ldr	r1, [r4, #0]
    d798:	4029      	ands	r1, r5
    d79a:	428e      	cmp	r6, r1
    d79c:	d061      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d79e:	2001      	movs	r0, #1
    d7a0:	47c0      	blx	r8
    d7a2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7a4:	6822      	ldr	r2, [r4, #0]
    d7a6:	402a      	ands	r2, r5
    d7a8:	4296      	cmp	r6, r2
    d7aa:	d05a      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ac:	2001      	movs	r0, #1
    d7ae:	47c0      	blx	r8
    d7b0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7b2:	6823      	ldr	r3, [r4, #0]
    d7b4:	402b      	ands	r3, r5
    d7b6:	429e      	cmp	r6, r3
    d7b8:	d053      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ba:	2001      	movs	r0, #1
    d7bc:	47c0      	blx	r8
    d7be:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7c0:	6820      	ldr	r0, [r4, #0]
    d7c2:	4028      	ands	r0, r5
    d7c4:	4286      	cmp	r6, r0
    d7c6:	d04c      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7c8:	2001      	movs	r0, #1
    d7ca:	47c0      	blx	r8
    d7cc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7ce:	6821      	ldr	r1, [r4, #0]
    d7d0:	4029      	ands	r1, r5
    d7d2:	428e      	cmp	r6, r1
    d7d4:	d045      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7d6:	2001      	movs	r0, #1
    d7d8:	3f01      	subs	r7, #1
    d7da:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7dc:	6822      	ldr	r2, [r4, #0]
    d7de:	402a      	ands	r2, r5
    d7e0:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7e2:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7e6:	d03c      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d7e8:	2f00      	cmp	r7, #0
    d7ea:	f000 80c8 	beq.w	d97e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7ee:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7f0:	6823      	ldr	r3, [r4, #0]
    d7f2:	402b      	ands	r3, r5
    d7f4:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7f6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7fa:	d032      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d7fc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d7fe:	6821      	ldr	r1, [r4, #0]
    d800:	4029      	ands	r1, r5
    d802:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d804:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d808:	d02b      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d80a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d80c:	6822      	ldr	r2, [r4, #0]
    d80e:	402a      	ands	r2, r5
    d810:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d812:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d816:	d024      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d818:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d81a:	6823      	ldr	r3, [r4, #0]
    d81c:	402b      	ands	r3, r5
    d81e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d820:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d824:	d01d      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d826:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d828:	6821      	ldr	r1, [r4, #0]
    d82a:	4029      	ands	r1, r5
    d82c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d82e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d832:	d016      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d834:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d836:	6822      	ldr	r2, [r4, #0]
    d838:	402a      	ands	r2, r5
    d83a:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d83c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d840:	d00f      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d842:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d844:	6820      	ldr	r0, [r4, #0]
    d846:	4028      	ands	r0, r5
    d848:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d84a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d84e:	d008      	beq.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d850:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d852:	6822      	ldr	r2, [r4, #0]
    d854:	402a      	ands	r2, r5
    d856:	4296      	cmp	r6, r2
    d858:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d85c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d860:	d1c2      	bne.n	d7e8 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d862:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d868:	f010 0907 	ands.w	r9, r0, #7
    d86c:	d043      	beq.n	d8f6 <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d86e:	680b      	ldr	r3, [r1, #0]
    d870:	4013      	ands	r3, r2
    d872:	429e      	cmp	r6, r3
    d874:	d1f5      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d876:	2001      	movs	r0, #1
    d878:	47c0      	blx	r8
    d87a:	f1b9 0f01 	cmp.w	r9, #1
    d87e:	f107 37ff 	add.w	r7, r7, #4294967295
    d882:	d038      	beq.n	d8f6 <am_hal_flash_delay_status_check+0x1c6>
    d884:	f1b9 0f02 	cmp.w	r9, #2
    d888:	d02e      	beq.n	d8e8 <am_hal_flash_delay_status_check+0x1b8>
    d88a:	f1b9 0f03 	cmp.w	r9, #3
    d88e:	d024      	beq.n	d8da <am_hal_flash_delay_status_check+0x1aa>
    d890:	f1b9 0f04 	cmp.w	r9, #4
    d894:	d01a      	beq.n	d8cc <am_hal_flash_delay_status_check+0x19c>
    d896:	f1b9 0f05 	cmp.w	r9, #5
    d89a:	d010      	beq.n	d8be <am_hal_flash_delay_status_check+0x18e>
    d89c:	f1b9 0f06 	cmp.w	r9, #6
    d8a0:	d006      	beq.n	d8b0 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8a2:	6821      	ldr	r1, [r4, #0]
    d8a4:	4029      	ands	r1, r5
    d8a6:	428e      	cmp	r6, r1
    d8a8:	d1db      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8aa:	2001      	movs	r0, #1
    d8ac:	47c0      	blx	r8
    d8ae:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8b0:	6822      	ldr	r2, [r4, #0]
    d8b2:	402a      	ands	r2, r5
    d8b4:	4296      	cmp	r6, r2
    d8b6:	d1d4      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8b8:	2001      	movs	r0, #1
    d8ba:	47c0      	blx	r8
    d8bc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8be:	6820      	ldr	r0, [r4, #0]
    d8c0:	4028      	ands	r0, r5
    d8c2:	4286      	cmp	r6, r0
    d8c4:	d1cd      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8c6:	2001      	movs	r0, #1
    d8c8:	47c0      	blx	r8
    d8ca:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8cc:	6823      	ldr	r3, [r4, #0]
    d8ce:	402b      	ands	r3, r5
    d8d0:	429e      	cmp	r6, r3
    d8d2:	d1c6      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8d4:	2001      	movs	r0, #1
    d8d6:	47c0      	blx	r8
    d8d8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8da:	6821      	ldr	r1, [r4, #0]
    d8dc:	4029      	ands	r1, r5
    d8de:	428e      	cmp	r6, r1
    d8e0:	d1bf      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8e2:	2001      	movs	r0, #1
    d8e4:	47c0      	blx	r8
    d8e6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8e8:	6822      	ldr	r2, [r4, #0]
    d8ea:	402a      	ands	r2, r5
    d8ec:	4296      	cmp	r6, r2
    d8ee:	d1b8      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8f0:	2001      	movs	r0, #1
    d8f2:	3f01      	subs	r7, #1
    d8f4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d8f6:	6823      	ldr	r3, [r4, #0]
    d8f8:	402b      	ands	r3, r5
    d8fa:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d8fc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d900:	d1af      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d902:	2f00      	cmp	r7, #0
    d904:	d03b      	beq.n	d97e <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d906:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d908:	6821      	ldr	r1, [r4, #0]
    d90a:	4029      	ands	r1, r5
    d90c:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d90e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d912:	d1a6      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d914:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d916:	6822      	ldr	r2, [r4, #0]
    d918:	402a      	ands	r2, r5
    d91a:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d91c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d920:	d19f      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d922:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d924:	6823      	ldr	r3, [r4, #0]
    d926:	402b      	ands	r3, r5
    d928:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d92a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d92e:	d198      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d930:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d932:	6821      	ldr	r1, [r4, #0]
    d934:	4029      	ands	r1, r5
    d936:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d938:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d93c:	d191      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d93e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d940:	6822      	ldr	r2, [r4, #0]
    d942:	402a      	ands	r2, r5
    d944:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d946:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d94a:	d18a      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d94c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d94e:	6823      	ldr	r3, [r4, #0]
    d950:	402b      	ands	r3, r5
    d952:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d954:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d958:	d183      	bne.n	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d95a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d95c:	6820      	ldr	r0, [r4, #0]
    d95e:	4028      	ands	r0, r5
    d960:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d962:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d966:	f47f af7c 	bne.w	d862 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d96a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d96c:	6823      	ldr	r3, [r4, #0]
    d96e:	402b      	ands	r3, r5
    d970:	429e      	cmp	r6, r3
    d972:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d976:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d97a:	d0c2      	beq.n	d902 <am_hal_flash_delay_status_check+0x1d2>
    d97c:	e771      	b.n	d862 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d97e:	2004      	movs	r0, #4
    d980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d984:	0800009d 	.word	0x0800009d

0000d988 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d988:	2831      	cmp	r0, #49	; 0x31
    d98a:	d901      	bls.n	d990 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d98c:	2006      	movs	r0, #6
    d98e:	4770      	bx	lr
{
    d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d994:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d998:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d99c:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d99e:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d9a2:	d014      	beq.n	d9ce <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d9a4:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d9a8:	1db2      	adds	r2, r6, #6
    d9aa:	f002 0707 	and.w	r7, r2, #7
    d9ae:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d9b0:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d9b4:	f200 80ab 	bhi.w	db0e <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d9b8:	4a85      	ldr	r2, [pc, #532]	; (dbd0 <am_hal_gpio_pinconfig+0x248>)
    d9ba:	5c17      	ldrb	r7, [r2, r0]
    d9bc:	07ff      	lsls	r7, r7, #31
    d9be:	d403      	bmi.n	d9c8 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d9c0:	4884      	ldr	r0, [pc, #528]	; (dbd4 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d9c2:	b007      	add	sp, #28
    d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d9c8:	1eb4      	subs	r4, r6, #2
    d9ca:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d9ce:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d9d2:	2e00      	cmp	r6, #0
    d9d4:	f040 8095 	bne.w	db02 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9d8:	4a7f      	ldr	r2, [pc, #508]	; (dbd8 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9da:	4f80      	ldr	r7, [pc, #512]	; (dbdc <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9dc:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9de:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9e2:	411e      	asrs	r6, r3
    d9e4:	f016 0f01 	tst.w	r6, #1
    d9e8:	bf0c      	ite	eq
    d9ea:	2600      	moveq	r6, #0
    d9ec:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9ee:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d9f0:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d9f4:	f000 8097 	beq.w	db26 <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d9f8:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d9fc:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d9fe:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da02:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    da06:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    da08:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da0c:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da10:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    da14:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da18:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    da1a:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    da1e:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da22:	f000 808d 	beq.w	db40 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    da26:	4a6e      	ldr	r2, [pc, #440]	; (dbe0 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    da28:	6816      	ldr	r6, [r2, #0]
    da2a:	1b8c      	subs	r4, r1, r6
    da2c:	fab4 f384 	clz	r3, r4
    da30:	095f      	lsrs	r7, r3, #5
    da32:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    da34:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    da38:	bf04      	itt	eq
    da3a:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    da3e:	f367 0800 	bfieq	r8, r7, #0, #1
    da42:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    da44:	f3c1 2101 	ubfx	r1, r1, #8, #2
    da48:	2902      	cmp	r1, #2
    da4a:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    da4e:	d07a      	beq.n	db46 <am_hal_gpio_pinconfig+0x1be>
    da50:	d87f      	bhi.n	db52 <am_hal_gpio_pinconfig+0x1ca>
    da52:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    da54:	bf08      	it	eq
    da56:	f045 0504 	orreq.w	r5, r5, #4
    da5a:	f004 0a18 	and.w	sl, r4, #24
            break;
    da5e:	2200      	movs	r2, #0
    da60:	4604      	mov	r4, r0
    da62:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    da64:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    da68:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    da6c:	485d      	ldr	r0, [pc, #372]	; (dbe4 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    da6e:	495e      	ldr	r1, [pc, #376]	; (dbe8 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    da70:	4f5e      	ldr	r7, [pc, #376]	; (dbec <am_hal_gpio_pinconfig+0x264>)
    da72:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    da74:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    da78:	f04f 0cff 	mov.w	ip, #255	; 0xff
    da7c:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    da80:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    da82:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    da86:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    da88:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    da8c:	f000 f8c2 	bl	dc14 <am_hal_interrupt_master_disable>
    da90:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    da92:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    da96:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    da9a:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    da9e:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    daa2:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    daa4:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    daa8:	9902      	ldr	r1, [sp, #8]
    daaa:	9a03      	ldr	r2, [sp, #12]
    daac:	b150      	cbz	r0, dac4 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    daae:	f004 001f 	and.w	r0, r4, #31
    dab2:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    dab6:	f04f 0c01 	mov.w	ip, #1
    daba:	4c4d      	ldr	r4, [pc, #308]	; (dbf0 <am_hal_gpio_pinconfig+0x268>)
    dabc:	fa0c f000 	lsl.w	r0, ip, r0
    dac0:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    dac4:	484b      	ldr	r0, [pc, #300]	; (dbf4 <am_hal_gpio_pinconfig+0x26c>)
    dac6:	2473      	movs	r4, #115	; 0x73
    dac8:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    daca:	f8da 4000 	ldr.w	r4, [sl]
    dace:	4034      	ands	r4, r6
    dad0:	4325      	orrs	r5, r4
    dad2:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    dad6:	f859 5001 	ldr.w	r5, [r9, r1]
    dada:	402f      	ands	r7, r5
    dadc:	ea47 0708 	orr.w	r7, r7, r8
    dae0:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    dae4:	f85b 1003 	ldr.w	r1, [fp, r3]
    dae8:	400e      	ands	r6, r1
    daea:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    daec:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    daee:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    daf2:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    daf4:	9805      	ldr	r0, [sp, #20]
    daf6:	f000 f891 	bl	dc1c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    dafa:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    dafc:	b007      	add	sp, #28
    dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    db02:	2e01      	cmp	r6, #1
    db04:	d015      	beq.n	db32 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    db06:	2e02      	cmp	r6, #2
    db08:	d030      	beq.n	db6c <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    db0a:	483b      	ldr	r0, [pc, #236]	; (dbf8 <am_hal_gpio_pinconfig+0x270>)
    db0c:	e759      	b.n	d9c2 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    db0e:	2cc0      	cmp	r4, #192	; 0xc0
    db10:	d027      	beq.n	db62 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    db12:	2c20      	cmp	r4, #32
    db14:	f47f af5b 	bne.w	d9ce <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    db18:	4c2d      	ldr	r4, [pc, #180]	; (dbd0 <am_hal_gpio_pinconfig+0x248>)
    db1a:	5c26      	ldrb	r6, [r4, r0]
    db1c:	f016 0f09 	tst.w	r6, #9
    db20:	f47f af4e 	bne.w	d9c0 <am_hal_gpio_pinconfig+0x38>
    db24:	e753      	b.n	d9ce <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    db26:	f3c1 4202 	ubfx	r2, r1, #16, #3
    db2a:	2a07      	cmp	r2, #7
    db2c:	d125      	bne.n	db7a <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    db2e:	4833      	ldr	r0, [pc, #204]	; (dbfc <am_hal_gpio_pinconfig+0x274>)
    db30:	e747      	b.n	d9c2 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    db32:	4c27      	ldr	r4, [pc, #156]	; (dbd0 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    db34:	5c26      	ldrb	r6, [r4, r0]
    db36:	07b4      	lsls	r4, r6, #30
    db38:	d5e7      	bpl.n	db0a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    db3a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    db3e:	e74b      	b.n	d9d8 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    db40:	2701      	movs	r7, #1
    db42:	9700      	str	r7, [sp, #0]
    db44:	e776      	b.n	da34 <am_hal_gpio_pinconfig+0xac>
    db46:	f004 0a18 	and.w	sl, r4, #24
    db4a:	2301      	movs	r3, #1
    db4c:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    db50:	e786      	b.n	da60 <am_hal_gpio_pinconfig+0xd8>
    db52:	f004 0a18 	and.w	sl, r4, #24
    db56:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    db58:	f045 0504 	orr.w	r5, r5, #4
    db5c:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    db60:	e77e      	b.n	da60 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    db62:	2814      	cmp	r0, #20
    db64:	f43f af33 	beq.w	d9ce <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    db68:	4825      	ldr	r0, [pc, #148]	; (dc00 <am_hal_gpio_pinconfig+0x278>)
    db6a:	e72a      	b.n	d9c2 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    db6c:	4a18      	ldr	r2, [pc, #96]	; (dbd0 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    db6e:	5c17      	ldrb	r7, [r2, r0]
    db70:	077a      	lsls	r2, r7, #29
    db72:	d5ca      	bpl.n	db0a <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    db74:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    db78:	e72e      	b.n	d9d8 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    db7a:	4c22      	ldr	r4, [pc, #136]	; (dc04 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    db7c:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    db80:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    db84:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    db88:	45b0      	cmp	r8, r6
    db8a:	d010      	beq.n	dbae <am_hal_gpio_pinconfig+0x226>
    db8c:	0087      	lsls	r7, r0, #2
    db8e:	eb04 0907 	add.w	r9, r4, r7
    db92:	f899 3001 	ldrb.w	r3, [r9, #1]
    db96:	42b3      	cmp	r3, r6
    db98:	d015      	beq.n	dbc6 <am_hal_gpio_pinconfig+0x23e>
    db9a:	f899 2002 	ldrb.w	r2, [r9, #2]
    db9e:	42b2      	cmp	r2, r6
    dba0:	d00f      	beq.n	dbc2 <am_hal_gpio_pinconfig+0x23a>
    dba2:	f899 4003 	ldrb.w	r4, [r9, #3]
    dba6:	42b4      	cmp	r4, r6
    dba8:	d00f      	beq.n	dbca <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    dbaa:	4817      	ldr	r0, [pc, #92]	; (dc08 <am_hal_gpio_pinconfig+0x280>)
    dbac:	e709      	b.n	d9c2 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dbae:	2600      	movs	r6, #0
    dbb0:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    dbb2:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dbb4:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    dbb8:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dbba:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    dbbe:	9300      	str	r3, [sp, #0]
    dbc0:	e740      	b.n	da44 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dbc2:	2602      	movs	r6, #2
    dbc4:	e7f5      	b.n	dbb2 <am_hal_gpio_pinconfig+0x22a>
    dbc6:	2601      	movs	r6, #1
    dbc8:	e7f3      	b.n	dbb2 <am_hal_gpio_pinconfig+0x22a>
    dbca:	2603      	movs	r6, #3
    dbcc:	e7f1      	b.n	dbb2 <am_hal_gpio_pinconfig+0x22a>
    dbce:	bf00      	nop
    dbd0:	0000f59c 	.word	0x0000f59c
    dbd4:	08000100 	.word	0x08000100
    dbd8:	0000f5d0 	.word	0x0000f5d0
    dbdc:	0000f6cc 	.word	0x0000f6cc
    dbe0:	0000f598 	.word	0x0000f598
    dbe4:	7ffffffc 	.word	0x7ffffffc
    dbe8:	400100e0 	.word	0x400100e0
    dbec:	40010040 	.word	0x40010040
    dbf0:	400100b4 	.word	0x400100b4
    dbf4:	40010000 	.word	0x40010000
    dbf8:	08000102 	.word	0x08000102
    dbfc:	08000103 	.word	0x08000103
    dc00:	08000101 	.word	0x08000101
    dc04:	0000f604 	.word	0x0000f604
    dc08:	08000104 	.word	0x08000104

0000dc0c <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    dc0c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    dc10:	b662      	cpsie	i
    __asm("    bx lr");
    dc12:	4770      	bx	lr

0000dc14 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    dc14:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    dc18:	b672      	cpsid	i
    __asm("    bx lr");
    dc1a:	4770      	bx	lr

0000dc1c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    dc1c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    dc20:	4770      	bx	lr
    dc22:	bf00      	nop

0000dc24 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    dc24:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    dc26:	4b24      	ldr	r3, [pc, #144]	; (dcb8 <am_hal_itm_disable+0x94>)
    dc28:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    dc2c:	b9b0      	cbnz	r0, dc5c <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dc2e:	4923      	ldr	r1, [pc, #140]	; (dcbc <am_hal_itm_disable+0x98>)
    dc30:	68ca      	ldr	r2, [r1, #12]
    dc32:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    dc36:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    dc38:	68cb      	ldr	r3, [r1, #12]
    dc3a:	01da      	lsls	r2, r3, #7
    dc3c:	d5fc      	bpl.n	dc38 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    dc3e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    dc42:	481f      	ldr	r0, [pc, #124]	; (dcc0 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    dc44:	4a1f      	ldr	r2, [pc, #124]	; (dcc4 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dc46:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    dc4a:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    dc4c:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    dc50:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    dc54:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    dc58:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    dc5c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dc60:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    dc64:	021b      	lsls	r3, r3, #8
    dc66:	d4fb      	bmi.n	dc60 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dc68:	f240 20f7 	movw	r0, #759	; 0x2f7
    dc6c:	f7ff fd5c 	bl	d728 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dc70:	4813      	ldr	r0, [pc, #76]	; (dcc0 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dc72:	4915      	ldr	r1, [pc, #84]	; (dcc8 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dc74:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dc78:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dc7c:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dc7e:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    dc82:	f022 0401 	bic.w	r4, r2, #1
    dc86:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dc8a:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dc8e:	420b      	tst	r3, r1
    dc90:	d1fb      	bne.n	dc8a <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dc92:	3801      	subs	r0, #1
    dc94:	d1f3      	bne.n	dc7e <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dc96:	4909      	ldr	r1, [pc, #36]	; (dcbc <am_hal_itm_disable+0x98>)
    dc98:	68ca      	ldr	r2, [r1, #12]
    dc9a:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dc9e:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dca0:	68cb      	ldr	r3, [r1, #12]
    dca2:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    dca6:	d1fb      	bne.n	dca0 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    dca8:	4903      	ldr	r1, [pc, #12]	; (dcb8 <am_hal_itm_disable+0x94>)
    dcaa:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    dcae:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    dcb2:	2a00      	cmp	r2, #0
    dcb4:	d1fb      	bne.n	dcae <am_hal_itm_disable+0x8a>
}
    dcb6:	bd10      	pop	{r4, pc}
    dcb8:	40020000 	.word	0x40020000
    dcbc:	e000edf0 	.word	0xe000edf0
    dcc0:	c5acce55 	.word	0xc5acce55
    dcc4:	00150511 	.word	0x00150511
    dcc8:	00800001 	.word	0x00800001

0000dccc <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    dccc:	b141      	cbz	r1, dce0 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    dcce:	2801      	cmp	r0, #1
{
    dcd0:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    dcd2:	d03a      	beq.n	dd4a <am_hal_mcuctrl_info_get+0x7e>
    dcd4:	d322      	bcc.n	dd1c <am_hal_mcuctrl_info_get+0x50>
    dcd6:	2802      	cmp	r0, #2
    dcd8:	d004      	beq.n	dce4 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    dcda:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    dcdc:	bcf0      	pop	{r4, r5, r6, r7}
    dcde:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dce0:	2006      	movs	r0, #6
    dce2:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dce4:	4a41      	ldr	r2, [pc, #260]	; (ddec <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dce6:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dce8:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dcec:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dcee:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dcf2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dcf6:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dcfa:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dcfc:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dcfe:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    dd00:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dd04:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dd06:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    dd0a:	4334      	orrs	r4, r6
    dd0c:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dd0e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dd12:	4310      	orrs	r0, r2
    dd14:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    dd16:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    dd18:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dd1a:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    dd1c:	4c33      	ldr	r4, [pc, #204]	; (ddec <am_hal_mcuctrl_info_get+0x120>)
    dd1e:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dd20:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dd24:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dd28:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dd2a:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dd2c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dd30:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dd34:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    dd36:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dd38:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    dd3c:	f004 0501 	and.w	r5, r4, #1
    dd40:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    dd42:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dd44:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dd46:	bcf0      	pop	{r4, r5, r6, r7}
    dd48:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dd4a:	4a28      	ldr	r2, [pc, #160]	; (ddec <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    dd4c:	4c28      	ldr	r4, [pc, #160]	; (ddf0 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dd4e:	6813      	ldr	r3, [r2, #0]
    dd50:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    dd52:	6850      	ldr	r0, [r2, #4]
    dd54:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    dd56:	6897      	ldr	r7, [r2, #8]
    dd58:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    dd5a:	68d6      	ldr	r6, [r2, #12]
    dd5c:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dd5e:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    dd60:	4824      	ldr	r0, [pc, #144]	; (ddf4 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dd62:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    dd64:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    dd68:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    dd6c:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    dd6e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd72:	4a21      	ldr	r2, [pc, #132]	; (ddf8 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    dd74:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    dd78:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dd7a:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    dd7e:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    dd80:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dd82:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd84:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dd88:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dd8c:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dd8e:	f000 040f 	and.w	r4, r0, #15
    dd92:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dd96:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dd98:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dd9c:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dda0:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dda4:	f007 0c0f 	and.w	ip, r7, #15
    dda8:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    ddac:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    ddae:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    ddb2:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    ddb6:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    ddba:	f3c5 1703 	ubfx	r7, r5, #4, #4
    ddbe:	433b      	orrs	r3, r7
    ddc0:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    ddc2:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    ddc6:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    ddca:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    ddce:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    ddd2:	b2e5      	uxtb	r5, r4
    ddd4:	042b      	lsls	r3, r5, #16
    ddd6:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    ddda:	b2d6      	uxtb	r6, r2
    dddc:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    ddde:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dde0:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    dde4:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    dde6:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dde8:	bcf0      	pop	{r4, r5, r6, r7}
    ddea:	4770      	bx	lr
    ddec:	40020000 	.word	0x40020000
    ddf0:	0000f700 	.word	0x0000f700
    ddf4:	0000f740 	.word	0x0000f740
    ddf8:	f0000f00 	.word	0xf0000f00

0000ddfc <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	b082      	sub	sp, #8
    de00:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    de02:	f7ff ff07 	bl	dc14 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de06:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    de0a:	008c      	lsls	r4, r1, #2
    de0c:	4e0e      	ldr	r6, [pc, #56]	; (de48 <am_hal_pwrctrl_periph_enable+0x4c>)
    de0e:	4d0f      	ldr	r5, [pc, #60]	; (de4c <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    de10:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de12:	592a      	ldr	r2, [r5, r4]
    de14:	68b3      	ldr	r3, [r6, #8]
    de16:	4313      	orrs	r3, r2
    de18:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    de1a:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    de1c:	442c      	add	r4, r5
    AM_CRITICAL_END
    de1e:	f7ff fefd 	bl	dc1c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de22:	2077      	movs	r0, #119	; 0x77
    de24:	f7ff fc80 	bl	d728 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    de28:	69b0      	ldr	r0, [r6, #24]
    de2a:	6864      	ldr	r4, [r4, #4]
    de2c:	4220      	tst	r0, r4
    de2e:	d103      	bne.n	de38 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de30:	2077      	movs	r0, #119	; 0x77
    de32:	f7ff fc79 	bl	d728 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    de36:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    de38:	4903      	ldr	r1, [pc, #12]	; (de48 <am_hal_pwrctrl_periph_enable+0x4c>)
    de3a:	698d      	ldr	r5, [r1, #24]
    de3c:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    de3e:	bf0c      	ite	eq
    de40:	2001      	moveq	r0, #1
    de42:	2000      	movne	r0, #0
    de44:	b002      	add	sp, #8
    de46:	bd70      	pop	{r4, r5, r6, pc}
    de48:	40021000 	.word	0x40021000
    de4c:	0000f780 	.word	0x0000f780

0000de50 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    de50:	b570      	push	{r4, r5, r6, lr}
    de52:	b082      	sub	sp, #8
    de54:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    de56:	f7ff fedd 	bl	dc14 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de5a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    de5e:	008c      	lsls	r4, r1, #2
    de60:	4e0f      	ldr	r6, [pc, #60]	; (dea0 <am_hal_pwrctrl_periph_disable+0x50>)
    de62:	4d10      	ldr	r5, [pc, #64]	; (dea4 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    de64:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    de66:	68b3      	ldr	r3, [r6, #8]
    de68:	592a      	ldr	r2, [r5, r4]
    de6a:	ea23 0002 	bic.w	r0, r3, r2
    de6e:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    de70:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de72:	442c      	add	r4, r5
    AM_CRITICAL_END
    de74:	f7ff fed2 	bl	dc1c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de78:	2077      	movs	r0, #119	; 0x77
    de7a:	f7ff fc55 	bl	d728 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de7e:	69b1      	ldr	r1, [r6, #24]
    de80:	6864      	ldr	r4, [r4, #4]
    de82:	4221      	tst	r1, r4
    de84:	d003      	beq.n	de8e <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    de86:	2077      	movs	r0, #119	; 0x77
    de88:	f7ff fc4e 	bl	d728 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de8c:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    de8e:	4d04      	ldr	r5, [pc, #16]	; (dea0 <am_hal_pwrctrl_periph_disable+0x50>)
    de90:	69ae      	ldr	r6, [r5, #24]
    de92:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    de94:	bf14      	ite	ne
    de96:	2001      	movne	r0, #1
    de98:	2000      	moveq	r0, #0
    de9a:	b002      	add	sp, #8
    de9c:	bd70      	pop	{r4, r5, r6, pc}
    de9e:	bf00      	nop
    dea0:	40021000 	.word	0x40021000
    dea4:	0000f780 	.word	0x0000f780

0000dea8 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dea8:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    deaa:	4c1b      	ldr	r4, [pc, #108]	; (df18 <am_hal_pwrctrl_low_power_init+0x70>)
    deac:	69a3      	ldr	r3, [r4, #24]
    deae:	05db      	lsls	r3, r3, #23
{
    deb0:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    deb2:	d502      	bpl.n	deba <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    deb4:	2000      	movs	r0, #0
}
    deb6:	b003      	add	sp, #12
    deb8:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    deba:	4d18      	ldr	r5, [pc, #96]	; (df1c <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    debc:	4918      	ldr	r1, [pc, #96]	; (df20 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    debe:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dec0:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dec2:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dec4:	461a      	mov	r2, r3
    dec6:	9000      	str	r0, [sp, #0]
    dec8:	f242 7010 	movw	r0, #10000	; 0x2710
    decc:	f7ff fc30 	bl	d730 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    ded0:	b110      	cbz	r0, ded8 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    ded2:	2004      	movs	r0, #4
}
    ded4:	b003      	add	sp, #12
    ded6:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    ded8:	6821      	ldr	r1, [r4, #0]
    deda:	f041 0201 	orr.w	r2, r1, #1
    dede:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    dee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dee2:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    dee6:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    dee8:	68ec      	ldr	r4, [r5, #12]
    deea:	b2e2      	uxtb	r2, r4
    deec:	2a11      	cmp	r2, #17
    deee:	d1e1      	bne.n	deb4 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    def0:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    def4:	f360 5356 	bfi	r3, r0, #21, #2
    def8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    defc:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    df00:	240f      	movs	r4, #15
    df02:	f364 118b 	bfi	r1, r4, #6, #6
    df06:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    df0a:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    df0e:	f364 0205 	bfi	r2, r4, #0, #6
    df12:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    df16:	e7ce      	b.n	deb6 <am_hal_pwrctrl_low_power_init+0xe>
    df18:	40021000 	.word	0x40021000
    df1c:	40020000 	.word	0x40020000
    df20:	40020018 	.word	0x40020018

0000df24 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    df24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    df28:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    df2a:	68d3      	ldr	r3, [r2, #12]
    df2c:	bf0c      	ite	eq
    df2e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    df32:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    df36:	60d3      	str	r3, [r2, #12]
    df38:	4770      	bx	lr
    df3a:	bf00      	nop

0000df3c <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    df3c:	4a03      	ldr	r2, [pc, #12]	; (df4c <am_hal_rtc_osc_disable+0x10>)
    df3e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    df42:	f043 0010 	orr.w	r0, r3, #16
    df46:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    df4a:	4770      	bx	lr
    df4c:	40004200 	.word	0x40004200

0000df50 <am_hal_security_get_info>:
{
    uint32_t flash0;
    uint32_t flash4;
    uint32_t i;
    bool     bSbl;
    if (!pSecInfo)
    df50:	b1a0      	cbz	r0, df7c <am_hal_security_get_info+0x2c>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    pSecInfo->info0Version = AM_REGVAL(0x50020040);
    df52:	4b0b      	ldr	r3, [pc, #44]	; (df80 <am_hal_security_get_info+0x30>)
#if AM_CMSIS_REGS
    pSecInfo->bInfo0Valid = MCUCTRL->SHADOWVALID_b.INFO0_VALID;
    df54:	4a0b      	ldr	r2, [pc, #44]	; (df84 <am_hal_security_get_info+0x34>)
    pSecInfo->info0Version = AM_REGVAL(0x50020040);
    df56:	6819      	ldr	r1, [r3, #0]
    df58:	6041      	str	r1, [r0, #4]
    pSecInfo->bInfo0Valid = MCUCTRL->SHADOWVALID_b.INFO0_VALID;
    df5a:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    df5e:	f3c3 0180 	ubfx	r1, r3, #2, #1
    df62:	7001      	strb	r1, [r0, #0]
    bSbl = MCUCTRL->BOOTLOADER_b.SECBOOTFEATURE;
    df64:	f8d2 01a0 	ldr.w	r0, [r2, #416]	; 0x1a0
#else
    pSecInfo->bInfo0Valid = AM_BFR(MCUCTRL, SHADOWVALID, INFO0_VALID);
    bSbl = AM_BFR(MCUCTRL, BOOTLOADER, SECBOOTFEATURE);
#endif

    if (bSbl)
    df68:	f010 6f40 	tst.w	r0, #201326592	; 0xc000000
    df6c:	d004      	beq.n	df78 <am_hal_security_get_info+0x28>
    {
        // Check if we're running pre-SBLv2
        flash0 = AM_REGVAL(AM_HAL_SBL_ADDRESS);
    df6e:	f04f 0c00 	mov.w	ip, #0
    df72:	f8dc 3000 	ldr.w	r3, [ip]
    df76:	deff      	udf	#255	; 0xff
            pSecInfo->sblVersionAddInfo = sblVersion >> 15;
        }
    }
    else
    {
        return AM_HAL_STATUS_FAIL;
    df78:	2001      	movs	r0, #1
    }
    return AM_HAL_STATUS_SUCCESS;
}
    df7a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    df7c:	2006      	movs	r0, #6
    df7e:	4770      	bx	lr
    df80:	50020040 	.word	0x50020040
    df84:	40020000 	.word	0x40020000

0000df88 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    df88:	b510      	push	{r4, lr}
    df8a:	b082      	sub	sp, #8
    df8c:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    df8e:	f7ff fe41 	bl	dc14 <am_hal_interrupt_master_disable>
    df92:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    df94:	b124      	cbz	r4, dfa0 <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    df96:	4b0c      	ldr	r3, [pc, #48]	; (dfc8 <am_hal_sysctrl_sleep+0x40>)
    df98:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    df9c:	07c3      	lsls	r3, r0, #31
    df9e:	d50a      	bpl.n	dfb6 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dfa0:	4a0a      	ldr	r2, [pc, #40]	; (dfcc <am_hal_sysctrl_sleep+0x44>)
    dfa2:	6911      	ldr	r1, [r2, #16]
    dfa4:	f021 0404 	bic.w	r4, r1, #4
    dfa8:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    dfaa:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    dfac:	9801      	ldr	r0, [sp, #4]
    dfae:	f7ff fe35 	bl	dc1c <am_hal_interrupt_master_set>
}
    dfb2:	b002      	add	sp, #8
    dfb4:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    dfb6:	4b05      	ldr	r3, [pc, #20]	; (dfcc <am_hal_sysctrl_sleep+0x44>)
    dfb8:	2004      	movs	r0, #4
    dfba:	6118      	str	r0, [r3, #16]
        __WFI();
    dfbc:	bf30      	wfi
    AM_CRITICAL_END
    dfbe:	9801      	ldr	r0, [sp, #4]
    dfc0:	f7ff fe2c 	bl	dc1c <am_hal_interrupt_master_set>
}
    dfc4:	b002      	add	sp, #8
    dfc6:	bd10      	pop	{r4, pc}
    dfc8:	40020000 	.word	0x40020000
    dfcc:	e000ed00 	.word	0xe000ed00

0000dfd0 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    dfd0:	2801      	cmp	r0, #1
    dfd2:	d901      	bls.n	dfd8 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    dfd4:	2005      	movs	r0, #5
    dfd6:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    dfd8:	b169      	cbz	r1, dff6 <am_hal_uart_initialize+0x26>
{
    dfda:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    dfdc:	2264      	movs	r2, #100	; 0x64
    dfde:	4e0e      	ldr	r6, [pc, #56]	; (e018 <am_hal_uart_initialize+0x48>)
    dfe0:	fb02 f200 	mul.w	r2, r2, r0
    dfe4:	18b4      	adds	r4, r6, r2
    dfe6:	4603      	mov	r3, r0
    dfe8:	78e0      	ldrb	r0, [r4, #3]
    dfea:	f3c0 0700 	ubfx	r7, r0, #0, #1
    dfee:	b2fd      	uxtb	r5, r7
    dff0:	b11d      	cbz	r5, dffa <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    dff2:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
    dff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
    dff6:	2006      	movs	r0, #6
    dff8:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    dffa:	f040 0001 	orr.w	r0, r0, #1
    dffe:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    e000:	58b0      	ldr	r0, [r6, r2]
    e002:	f8df e018 	ldr.w	lr, [pc, #24]	; e01c <am_hal_uart_initialize+0x4c>
    e006:	f36e 0017 	bfi	r0, lr, #0, #24
    e00a:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    e00c:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    e00e:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    e010:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
    e012:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    e014:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e018:	10001214 	.word	0x10001214
    e01c:	00ea9e06 	.word	0x00ea9e06

0000e020 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e024:	6804      	ldr	r4, [r0, #0]
    e026:	4b36      	ldr	r3, [pc, #216]	; (e100 <am_hal_uart_power_control+0xe0>)
    e028:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e02c:	429c      	cmp	r4, r3
{
    e02e:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e030:	d003      	beq.n	e03a <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e032:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e034:	b004      	add	sp, #16
    e036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e03a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e03c:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e03e:	f107 0008 	add.w	r0, r7, #8
    e042:	460e      	mov	r6, r1
    e044:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e048:	b181      	cbz	r1, e06c <am_hal_uart_power_control+0x4c>
    e04a:	2902      	cmp	r1, #2
    e04c:	d80c      	bhi.n	e068 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e04e:	b992      	cbnz	r2, e076 <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e050:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e054:	341c      	adds	r4, #28
    e056:	0325      	lsls	r5, r4, #12
    e058:	f04f 31ff 	mov.w	r1, #4294967295
    e05c:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e05e:	4640      	mov	r0, r8
    e060:	f7ff fef6 	bl	de50 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e064:	2000      	movs	r0, #0
            break;
    e066:	e7e5      	b.n	e034 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e068:	2006      	movs	r0, #6
    e06a:	e7e3      	b.n	e034 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e06c:	b322      	cbz	r2, e0b8 <am_hal_uart_power_control+0x98>
    e06e:	792a      	ldrb	r2, [r5, #4]
    e070:	bb42      	cbnz	r2, e0c4 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e072:	2007      	movs	r0, #7
    e074:	e7de      	b.n	e034 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e076:	f7ff fdcd 	bl	dc14 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e07a:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e07e:	311c      	adds	r1, #28
    e080:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e082:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e084:	6a3a      	ldr	r2, [r7, #32]
    e086:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e08a:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e08c:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e08e:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e092:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e094:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e096:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e09a:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e09c:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e09e:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e0a0:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e0a2:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e0a4:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e0a6:	f7ff fdb9 	bl	dc1c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e0aa:	682e      	ldr	r6, [r5, #0]
    e0ac:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e0b0:	42a0      	cmp	r0, r4
    e0b2:	d1d4      	bne.n	e05e <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e0b4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e0b6:	e7cb      	b.n	e050 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e0b8:	4640      	mov	r0, r8
    e0ba:	9201      	str	r2, [sp, #4]
    e0bc:	f7ff fe9e 	bl	ddfc <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e0c0:	9801      	ldr	r0, [sp, #4]
    e0c2:	e7b7      	b.n	e034 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e0c4:	4640      	mov	r0, r8
    e0c6:	f7ff fe99 	bl	ddfc <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e0ca:	f7ff fda3 	bl	dc14 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e0ce:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e0d2:	331c      	adds	r3, #28
    e0d4:	031f      	lsls	r7, r3, #12
    e0d6:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e0d8:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e0da:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e0dc:	68e9      	ldr	r1, [r5, #12]
    e0de:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e0e0:	6928      	ldr	r0, [r5, #16]
    e0e2:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e0e4:	696a      	ldr	r2, [r5, #20]
    e0e6:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e0e8:	69ab      	ldr	r3, [r5, #24]
    e0ea:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e0ec:	69ec      	ldr	r4, [r5, #28]
    e0ee:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e0f0:	6a29      	ldr	r1, [r5, #32]
    e0f2:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e0f4:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e0f6:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e0f8:	f7ff fd90 	bl	dc1c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e0fc:	4630      	mov	r0, r6
    e0fe:	e799      	b.n	e034 <am_hal_uart_power_control+0x14>
    e100:	01ea9e06 	.word	0x01ea9e06

0000e104 <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e104:	6803      	ldr	r3, [r0, #0]
    e106:	4a69      	ldr	r2, [pc, #420]	; (e2ac <am_hal_uart_configure+0x1a8>)
    e108:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    e10c:	4594      	cmp	ip, r2
    e10e:	d001      	beq.n	e114 <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e110:	2002      	movs	r0, #2
    e112:	4770      	bx	lr
{
    e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
    e118:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
    e11a:	b084      	sub	sp, #16
    e11c:	460d      	mov	r5, r1
    e11e:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    e120:	f7ff fd78 	bl	dc14 <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e124:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
    e128:	311c      	adds	r1, #28
    e12a:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
    e12c:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e12e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e130:	f040 0208 	orr.w	r2, r0, #8
    e134:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
    e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e138:	f043 0610 	orr.w	r6, r3, #16
    e13c:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e13e:	9801      	ldr	r0, [sp, #4]
    e140:	f7ff fd6c 	bl	dc1c <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    e144:	f7ff fd66 	bl	dc14 <am_hal_interrupt_master_disable>
    e148:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
    e14a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e14c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
    e150:	f020 0201 	bic.w	r2, r0, #1
    e154:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e156:	9802      	ldr	r0, [sp, #8]
    e158:	f7ff fd60 	bl	dc1c <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e15e:	f3c3 1802 	ubfx	r8, r3, #4, #3
    e162:	f108 36ff 	add.w	r6, r8, #4294967295
    e166:	2e03      	cmp	r6, #3
    e168:	d846      	bhi.n	e1f8 <am_hal_uart_configure+0xf4>
    e16a:	e8df f006 	tbb	[pc, r6]
    e16e:	020e      	.short	0x020e
    e170:	1114      	.short	0x1114
    e172:	494f      	ldr	r1, [pc, #316]	; (e2b0 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
    e174:	484f      	ldr	r0, [pc, #316]	; (e2b4 <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    e176:	682a      	ldr	r2, [r5, #0]
    e178:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    e17a:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
    e17e:	b96b      	cbnz	r3, e19c <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    e180:	484d      	ldr	r0, [pc, #308]	; (e2b8 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
    e182:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
    e184:	b004      	add	sp, #16
    e186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e18a:	494c      	ldr	r1, [pc, #304]	; (e2bc <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
    e18c:	484c      	ldr	r0, [pc, #304]	; (e2c0 <am_hal_uart_configure+0x1bc>)
    e18e:	e7f2      	b.n	e176 <am_hal_uart_configure+0x72>
    e190:	494c      	ldr	r1, [pc, #304]	; (e2c4 <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
    e192:	484d      	ldr	r0, [pc, #308]	; (e2c8 <am_hal_uart_configure+0x1c4>)
    e194:	e7ef      	b.n	e176 <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e196:	494d      	ldr	r1, [pc, #308]	; (e2cc <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
    e198:	484d      	ldr	r0, [pc, #308]	; (e2d0 <am_hal_uart_configure+0x1cc>)
    e19a:	e7ec      	b.n	e176 <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    e19c:	fbb1 f1f6 	udiv	r1, r1, r6
    e1a0:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e1a4:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e1a6:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e1aa:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e1ac:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    e1b0:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e1b2:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
    e1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e1b6:	6929      	ldr	r1, [r5, #16]
    e1b8:	430b      	orrs	r3, r1
    e1ba:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
    e1bc:	696a      	ldr	r2, [r5, #20]
    e1be:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e1c0:	686e      	ldr	r6, [r5, #4]
    e1c2:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
    e1c4:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e1c6:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
    e1c8:	f046 0310 	orr.w	r3, r6, #16
    e1cc:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    e1d0:	f7ff fd20 	bl	dc14 <am_hal_interrupt_master_disable>
    e1d4:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
    e1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e1d8:	f442 7640 	orr.w	r6, r2, #768	; 0x300
    e1dc:	f046 0001 	orr.w	r0, r6, #1
    e1e0:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e1e2:	9803      	ldr	r0, [sp, #12]
    e1e4:	f7ff fd1a 	bl	dc1c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e1e8:	6827      	ldr	r7, [r4, #0]
    e1ea:	4930      	ldr	r1, [pc, #192]	; (e2ac <am_hal_uart_configure+0x1a8>)
    e1ec:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
    e1f0:	428e      	cmp	r6, r1
    e1f2:	d005      	beq.n	e200 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
    e1f4:	2000      	movs	r0, #0
    e1f6:	e7c5      	b.n	e184 <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
    e1f8:	2600      	movs	r6, #0
    e1fa:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    e1fc:	4835      	ldr	r0, [pc, #212]	; (e2d4 <am_hal_uart_configure+0x1d0>)
    e1fe:	e7c1      	b.n	e184 <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
    e200:	69a9      	ldr	r1, [r5, #24]
    e202:	6a2f      	ldr	r7, [r5, #32]
    e204:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
    e208:	b109      	cbz	r1, e20e <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
    e20a:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
    e20c:	b9f3      	cbnz	r3, e24c <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e20e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e210:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    e214:	331c      	adds	r3, #28
    e216:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
    e218:	f04f 0e00 	mov.w	lr, #0
    e21c:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e220:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e222:	f022 0020 	bic.w	r0, r2, #32
    e226:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
    e228:	b117      	cbz	r7, e230 <am_hal_uart_configure+0x12c>
    e22a:	f1b8 0f00 	cmp.w	r8, #0
    e22e:	d123      	bne.n	e278 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e230:	6827      	ldr	r7, [r4, #0]
    e232:	491e      	ldr	r1, [pc, #120]	; (e2ac <am_hal_uart_configure+0x1a8>)
    e234:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
    e238:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e23a:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
    e23c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e240:	d1d8      	bne.n	e1f4 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e242:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    e244:	f024 0350 	bic.w	r3, r4, #80	; 0x50
    e248:	63b3      	str	r3, [r6, #56]	; 0x38
    e24a:	e79b      	b.n	e184 <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
    e24c:	2201      	movs	r2, #1
    e24e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    e252:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e256:	f000 fe09 	bl	ee6c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e25a:	6821      	ldr	r1, [r4, #0]
    e25c:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
    e260:	42b5      	cmp	r5, r6
    e262:	d1c7      	bne.n	e1f4 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e264:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e266:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
    e26a:	361c      	adds	r6, #28
    e26c:	0336      	lsls	r6, r6, #12
    e26e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e270:	f042 0020 	orr.w	r0, r2, #32
    e274:	63b0      	str	r0, [r6, #56]	; 0x38
    e276:	e7d7      	b.n	e228 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
    e278:	2201      	movs	r2, #1
    e27a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    e27e:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e282:	4643      	mov	r3, r8
    e284:	4639      	mov	r1, r7
    e286:	f000 fdf1 	bl	ee6c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e28a:	6826      	ldr	r6, [r4, #0]
    e28c:	4a07      	ldr	r2, [pc, #28]	; (e2ac <am_hal_uart_configure+0x1a8>)
    e28e:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e292:	4290      	cmp	r0, r2
    e294:	d1ae      	bne.n	e1f4 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e296:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e298:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e29c:	311c      	adds	r1, #28
    e29e:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
    e2a0:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
    e2a2:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e2a4:	f044 0350 	orr.w	r3, r4, #80	; 0x50
    e2a8:	63ab      	str	r3, [r5, #56]	; 0x38
    e2aa:	e76b      	b.n	e184 <am_hal_uart_configure+0x80>
    e2ac:	01ea9e06 	.word	0x01ea9e06
    e2b0:	2dc6c000 	.word	0x2dc6c000
    e2b4:	00b71b00 	.word	0x00b71b00
    e2b8:	08000003 	.word	0x08000003
    e2bc:	5b8d8000 	.word	0x5b8d8000
    e2c0:	016e3600 	.word	0x016e3600
    e2c4:	0b71b000 	.word	0x0b71b000
    e2c8:	002dc6c0 	.word	0x002dc6c0
    e2cc:	16e36000 	.word	0x16e36000
    e2d0:	005b8d80 	.word	0x005b8d80
    e2d4:	08000002 	.word	0x08000002

0000e2d8 <am_hal_uart_transfer>:
{
    e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e2dc:	680e      	ldr	r6, [r1, #0]
{
    e2de:	b091      	sub	sp, #68	; 0x44
    e2e0:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e2e2:	b14e      	cbz	r6, e2f8 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e2e4:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
    e2e6:	bf18      	it	ne
    e2e8:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e2ec:	f000 80f6 	beq.w	e4dc <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
    e2f0:	4658      	mov	r0, fp
    e2f2:	b011      	add	sp, #68	; 0x44
    e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
    e2f8:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e2fc:	684c      	ldr	r4, [r1, #4]
    e2fe:	9401      	str	r4, [sp, #4]
    e300:	688d      	ldr	r5, [r1, #8]
    e302:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
    e306:	f1bb 0f00 	cmp.w	fp, #0
    e30a:	f000 8107 	beq.w	e51c <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e30e:	2d00      	cmp	r5, #0
    e310:	f000 8393 	beq.w	ea3a <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e314:	2800      	cmp	r0, #0
    e316:	f000 80df 	beq.w	e4d8 <am_hal_uart_transfer+0x200>
    e31a:	6807      	ldr	r7, [r0, #0]
    e31c:	497e      	ldr	r1, [pc, #504]	; (e518 <am_hal_uart_transfer+0x240>)
    e31e:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
    e322:	4589      	cmp	r9, r1
    e324:	d00a      	beq.n	e33c <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
    e326:	f1ba 0f00 	cmp.w	sl, #0
    e32a:	d001      	beq.n	e330 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
    e32c:	f8ca 6000 	str.w	r6, [sl]
    e330:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
    e334:	4658      	mov	r0, fp
    e336:	b011      	add	sp, #68	; 0x44
    e338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e33c:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e33e:	4637      	mov	r7, r6
    e340:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e342:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
    e344:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    e348:	2a00      	cmp	r2, #0
    e34a:	f040 822c 	bne.w	e7a6 <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
    e34e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e352:	2d00      	cmp	r5, #0
    e354:	f000 80a1 	beq.w	e49a <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e358:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
    e35c:	341c      	adds	r4, #28
    e35e:	0322      	lsls	r2, r4, #12
    e360:	6990      	ldr	r0, [r2, #24]
    e362:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e366:	2c00      	cmp	r4, #0
    e368:	f040 80a3 	bne.w	e4b2 <am_hal_uart_transfer+0x1da>
    e36c:	1e6b      	subs	r3, r5, #1
    e36e:	f013 0e07 	ands.w	lr, r3, #7
    e372:	f101 3cff 	add.w	ip, r1, #4294967295
    e376:	d048      	beq.n	e40a <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e378:	780c      	ldrb	r4, [r1, #0]
    e37a:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e37c:	6993      	ldr	r3, [r2, #24]
    e37e:	069b      	lsls	r3, r3, #26
    e380:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
    e382:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e386:	f100 8085 	bmi.w	e494 <am_hal_uart_transfer+0x1bc>
    e38a:	45a6      	cmp	lr, r4
    e38c:	d03d      	beq.n	e40a <am_hal_uart_transfer+0x132>
    e38e:	f1be 0f02 	cmp.w	lr, #2
    e392:	d032      	beq.n	e3fa <am_hal_uart_transfer+0x122>
    e394:	f1be 0f03 	cmp.w	lr, #3
    e398:	d027      	beq.n	e3ea <am_hal_uart_transfer+0x112>
    e39a:	f1be 0f04 	cmp.w	lr, #4
    e39e:	d01c      	beq.n	e3da <am_hal_uart_transfer+0x102>
    e3a0:	f1be 0f05 	cmp.w	lr, #5
    e3a4:	d011      	beq.n	e3ca <am_hal_uart_transfer+0xf2>
    e3a6:	f1be 0f06 	cmp.w	lr, #6
    e3aa:	d006      	beq.n	e3ba <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ac:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e3b0:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3b2:	6990      	ldr	r0, [r2, #24]
    e3b4:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3b6:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3b8:	d46c      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ba:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e3be:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3c0:	6991      	ldr	r1, [r2, #24]
    e3c2:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3c4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3c8:	d464      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ca:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e3ce:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3d0:	6993      	ldr	r3, [r2, #24]
    e3d2:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3d4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3d8:	d45c      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3da:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e3de:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3e0:	6990      	ldr	r0, [r2, #24]
    e3e2:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3e4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3e8:	d454      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3ea:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e3ee:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3f0:	6991      	ldr	r1, [r2, #24]
    e3f2:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3f4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e3f8:	d44c      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e3fa:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e3fe:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e400:	6993      	ldr	r3, [r2, #24]
    e402:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e404:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e408:	d444      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e40a:	3401      	adds	r4, #1
    e40c:	f89c 1001 	ldrb.w	r1, [ip, #1]
    e410:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
    e412:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e414:	4620      	mov	r0, r4
    e416:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
    e41a:	f000 81c2 	beq.w	e7a2 <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e41e:	6993      	ldr	r3, [r2, #24]
    e420:	0699      	lsls	r1, r3, #26
    e422:	d437      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e424:	f89e 1001 	ldrb.w	r1, [lr, #1]
    e428:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e42a:	6993      	ldr	r3, [r2, #24]
    e42c:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e42e:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e432:	d42f      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e434:	f89c 4003 	ldrb.w	r4, [ip, #3]
    e438:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e43a:	6991      	ldr	r1, [r2, #24]
    e43c:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e43e:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e442:	d427      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e444:	f89c 3004 	ldrb.w	r3, [ip, #4]
    e448:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e44a:	6991      	ldr	r1, [r2, #24]
    e44c:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e44e:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e452:	d41f      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e454:	f89c 4005 	ldrb.w	r4, [ip, #5]
    e458:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e45a:	6993      	ldr	r3, [r2, #24]
    e45c:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e45e:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e462:	d417      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e464:	f89c 1006 	ldrb.w	r1, [ip, #6]
    e468:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e46a:	6993      	ldr	r3, [r2, #24]
    e46c:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e46e:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e472:	d40f      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e474:	f89c 4007 	ldrb.w	r4, [ip, #7]
    e478:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e47a:	6991      	ldr	r1, [r2, #24]
    e47c:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e47e:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e482:	d407      	bmi.n	e494 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e484:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
    e488:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e48a:	6991      	ldr	r1, [r2, #24]
    e48c:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e48e:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e492:	d5ba      	bpl.n	e40a <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
    e494:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
    e496:	4426      	add	r6, r4
        if (ui32RemainingBytes)
    e498:	d10b      	bne.n	e4b2 <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
    e49a:	f1ba 0f00 	cmp.w	sl, #0
    e49e:	f000 817d 	beq.w	e79c <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
    e4a2:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
    e4a6:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
    e4a8:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
    e4ac:	b011      	add	sp, #68	; 0x44
    e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e4b2:	2001      	movs	r0, #1
    e4b4:	f7ff f938 	bl	d728 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e4b8:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e4bc:	bf18      	it	ne
    e4be:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e4c0:	45bb      	cmp	fp, r7
    e4c2:	d9ea      	bls.n	e49a <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e4c4:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e4c8:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e4ca:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
    e4ce:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e4d0:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e4d2:	f47f af28 	bne.w	e326 <am_hal_uart_transfer+0x4e>
    e4d6:	e735      	b.n	e344 <am_hal_uart_transfer+0x6c>
    e4d8:	4606      	mov	r6, r0
    e4da:	e724      	b.n	e326 <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
    e4dc:	684b      	ldr	r3, [r1, #4]
    e4de:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e4e2:	688c      	ldr	r4, [r1, #8]
    e4e4:	690f      	ldr	r7, [r1, #16]
    e4e6:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
    e4e8:	f1bb 0f00 	cmp.w	fp, #0
    e4ec:	f000 80c9 	beq.w	e682 <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e4f0:	2c00      	cmp	r4, #0
    e4f2:	f000 8150 	beq.w	e796 <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e4f6:	b130      	cbz	r0, e506 <am_hal_uart_transfer+0x22e>
    e4f8:	6800      	ldr	r0, [r0, #0]
    e4fa:	4a07      	ldr	r2, [pc, #28]	; (e518 <am_hal_uart_transfer+0x240>)
    e4fc:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e500:	4291      	cmp	r1, r2
    e502:	f000 8186 	beq.w	e812 <am_hal_uart_transfer+0x53a>
    e506:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
    e508:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
    e50c:	2f00      	cmp	r7, #0
    e50e:	f43f aeef 	beq.w	e2f0 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
    e512:	603d      	str	r5, [r7, #0]
    e514:	e6ec      	b.n	e2f0 <am_hal_uart_transfer+0x18>
    e516:	bf00      	nop
    e518:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e51c:	2800      	cmp	r0, #0
    e51e:	f43f af07 	beq.w	e330 <am_hal_uart_transfer+0x58>
    e522:	6807      	ldr	r7, [r0, #0]
    e524:	4cac      	ldr	r4, [pc, #688]	; (e7d8 <am_hal_uart_transfer+0x500>)
    e526:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
    e52a:	42a3      	cmp	r3, r4
    e52c:	f47f af00 	bne.w	e330 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
    e530:	f1ba 0f00 	cmp.w	sl, #0
    e534:	d001      	beq.n	e53a <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
    e536:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
    e53a:	2d00      	cmp	r5, #0
    e53c:	f000 812e 	beq.w	e79c <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
    e540:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
    e544:	2c00      	cmp	r4, #0
    e546:	f040 8290 	bne.w	ea6a <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e54a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e54e:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    e552:	311c      	adds	r1, #28
    e554:	030a      	lsls	r2, r1, #12
    e556:	6996      	ldr	r6, [r2, #24]
    e558:	f3c6 1740 	ubfx	r7, r6, #5, #1
    e55c:	2f00      	cmp	r7, #0
    e55e:	f040 8089 	bne.w	e674 <am_hal_uart_transfer+0x39c>
    e562:	f105 38ff 	add.w	r8, r5, #4294967295
    e566:	9b01      	ldr	r3, [sp, #4]
    e568:	f018 0007 	ands.w	r0, r8, #7
    e56c:	463c      	mov	r4, r7
    e56e:	f103 31ff 	add.w	r1, r3, #4294967295
    e572:	d042      	beq.n	e5fa <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e574:	781e      	ldrb	r6, [r3, #0]
    e576:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e578:	6997      	ldr	r7, [r2, #24]
    e57a:	4619      	mov	r1, r3
    e57c:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e57e:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e582:	d477      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
    e584:	42a0      	cmp	r0, r4
    e586:	d038      	beq.n	e5fa <am_hal_uart_transfer+0x322>
    e588:	2802      	cmp	r0, #2
    e58a:	d02e      	beq.n	e5ea <am_hal_uart_transfer+0x312>
    e58c:	2803      	cmp	r0, #3
    e58e:	d024      	beq.n	e5da <am_hal_uart_transfer+0x302>
    e590:	2804      	cmp	r0, #4
    e592:	d01a      	beq.n	e5ca <am_hal_uart_transfer+0x2f2>
    e594:	2805      	cmp	r0, #5
    e596:	d010      	beq.n	e5ba <am_hal_uart_transfer+0x2e2>
    e598:	2806      	cmp	r0, #6
    e59a:	d006      	beq.n	e5aa <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e59c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5a0:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5a2:	6990      	ldr	r0, [r2, #24]
    e5a4:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5a6:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5a8:	d464      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5aa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e5ae:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5b0:	6997      	ldr	r7, [r2, #24]
    e5b2:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5b4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5b8:	d45c      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5be:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5c0:	6990      	ldr	r0, [r2, #24]
    e5c2:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5c4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5c8:	d454      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5ca:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e5ce:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5d0:	6997      	ldr	r7, [r2, #24]
    e5d2:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5d4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5d8:	d44c      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5de:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5e0:	6990      	ldr	r0, [r2, #24]
    e5e2:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5e4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5e8:	d444      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5ea:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    e5ee:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5f0:	6997      	ldr	r7, [r2, #24]
    e5f2:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5f4:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e5f8:	d43c      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e5fa:	3401      	adds	r4, #1
    e5fc:	784b      	ldrb	r3, [r1, #1]
    e5fe:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
    e600:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e602:	4623      	mov	r3, r4
    e604:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
    e608:	d034      	beq.n	e674 <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e60a:	6996      	ldr	r6, [r2, #24]
    e60c:	06b6      	lsls	r6, r6, #26
    e60e:	d431      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e610:	7847      	ldrb	r7, [r0, #1]
    e612:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e614:	6990      	ldr	r0, [r2, #24]
    e616:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e618:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e61c:	d42a      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e61e:	78cc      	ldrb	r4, [r1, #3]
    e620:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e622:	6996      	ldr	r6, [r2, #24]
    e624:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e626:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e62a:	d423      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e62c:	790f      	ldrb	r7, [r1, #4]
    e62e:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e630:	6990      	ldr	r0, [r2, #24]
    e632:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e634:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e638:	d41c      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e63a:	794c      	ldrb	r4, [r1, #5]
    e63c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e63e:	6996      	ldr	r6, [r2, #24]
    e640:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e642:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e646:	d415      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e648:	798f      	ldrb	r7, [r1, #6]
    e64a:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e64c:	6990      	ldr	r0, [r2, #24]
    e64e:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e650:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e654:	d40e      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e656:	79cc      	ldrb	r4, [r1, #7]
    e658:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e65a:	6996      	ldr	r6, [r2, #24]
    e65c:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e65e:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e662:	d407      	bmi.n	e674 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e664:	f811 7f08 	ldrb.w	r7, [r1, #8]!
    e668:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e66a:	6990      	ldr	r0, [r2, #24]
    e66c:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e66e:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e672:	d5c2      	bpl.n	e5fa <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
    e674:	f1ba 0f00 	cmp.w	sl, #0
    e678:	f000 8090 	beq.w	e79c <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
    e67c:	f8ca 4000 	str.w	r4, [sl]
    e680:	e636      	b.n	e2f0 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e682:	2800      	cmp	r0, #0
    e684:	f43f ae54 	beq.w	e330 <am_hal_uart_transfer+0x58>
    e688:	6805      	ldr	r5, [r0, #0]
    e68a:	4e53      	ldr	r6, [pc, #332]	; (e7d8 <am_hal_uart_transfer+0x500>)
    e68c:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    e690:	45b4      	cmp	ip, r6
    e692:	f47f ae4d 	bne.w	e330 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
    e696:	b10f      	cbz	r7, e69c <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
    e698:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
    e69c:	2c00      	cmp	r4, #0
    e69e:	d07d      	beq.n	e79c <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
    e6a0:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e6a4:	2800      	cmp	r0, #0
    e6a6:	f040 8213 	bne.w	ead0 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6aa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e6ae:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    e6b2:	311c      	adds	r1, #28
    e6b4:	0309      	lsls	r1, r1, #12
    e6b6:	698a      	ldr	r2, [r1, #24]
    e6b8:	f3c2 1500 	ubfx	r5, r2, #4, #1
    e6bc:	2d00      	cmp	r5, #0
    e6be:	f040 8287 	bne.w	ebd0 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6c2:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6c4:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
    e6c8:	f040 81cc 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
    e6cc:	1e66      	subs	r6, r4, #1
    e6ce:	f016 0203 	ands.w	r2, r6, #3
    e6d2:	4655      	mov	r5, sl
    e6d4:	f109 30ff 	add.w	r0, r9, #4294967295
    e6d8:	d02b      	beq.n	e732 <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6da:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6de:	698b      	ldr	r3, [r1, #24]
    e6e0:	06de      	lsls	r6, r3, #27
    e6e2:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6e4:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e6e8:	f53f af10 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e6ec:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e6ee:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e6f2:	f040 81b7 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
    e6f6:	42aa      	cmp	r2, r5
    e6f8:	d01b      	beq.n	e732 <am_hal_uart_transfer+0x45a>
    e6fa:	2a02      	cmp	r2, #2
    e6fc:	d00c      	beq.n	e718 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e6fe:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e702:	698e      	ldr	r6, [r1, #24]
    e704:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e706:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e70a:	f53f aeff 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e70e:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e710:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e714:	f040 81a6 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e718:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e71c:	698a      	ldr	r2, [r1, #24]
    e71e:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e720:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e724:	f53f aef2 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e728:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e72a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e72e:	f040 8199 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e732:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
    e734:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
    e736:	7043      	strb	r3, [r0, #1]
    e738:	f100 0601 	add.w	r6, r0, #1
    e73c:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
    e73e:	f43f aee5 	beq.w	e50c <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e742:	698a      	ldr	r2, [r1, #24]
    e744:	06d2      	lsls	r2, r2, #27
    e746:	f53f aee1 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e74a:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e74c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e750:	f040 8188 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e754:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e756:	698e      	ldr	r6, [r1, #24]
    e758:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e75a:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e75e:	f53f aed5 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e762:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e764:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e768:	f040 817c 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e76c:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e76e:	698e      	ldr	r6, [r1, #24]
    e770:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e772:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e776:	f53f aec9 	bmi.w	e50c <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    e77a:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e77c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e780:	f040 8170 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e784:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e788:	698e      	ldr	r6, [r1, #24]
    e78a:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e78c:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e790:	f53f aebc 	bmi.w	e50c <am_hal_uart_transfer+0x234>
    e794:	e7c8      	b.n	e728 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e796:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
    e798:	b107      	cbz	r7, e79c <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
    e79a:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
    e79c:	f04f 0b00 	mov.w	fp, #0
    e7a0:	e5a6      	b.n	e2f0 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
    e7a2:	442e      	add	r6, r5
    e7a4:	e679      	b.n	e49a <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    e7a6:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    e7aa:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    e7ae:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
    e7b0:	42ac      	cmp	r4, r5
    e7b2:	bf28      	it	cs
    e7b4:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e7b6:	4622      	mov	r2, r4
    e7b8:	9802      	ldr	r0, [sp, #8]
    e7ba:	f000 fb63 	bl	ee84 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    e7be:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e7c2:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
    e7c4:	f7ff fa26 	bl	dc14 <am_hal_interrupt_master_disable>
    e7c8:	9903      	ldr	r1, [sp, #12]
    e7ca:	9008      	str	r0, [sp, #32]
    e7cc:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    e7d0:	321c      	adds	r2, #28
    e7d2:	0313      	lsls	r3, r2, #12
    e7d4:	9303      	str	r3, [sp, #12]
    e7d6:	e010      	b.n	e7fa <am_hal_uart_transfer+0x522>
    e7d8:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7dc:	f000 fc56 	bl	f08c <am_hal_queue_item_get>
    e7e0:	b198      	cbz	r0, e80a <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e7e2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e7e6:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
    e7ea:	331c      	adds	r3, #28
    e7ec:	0318      	lsls	r0, r3, #12
    e7ee:	6981      	ldr	r1, [r0, #24]
    e7f0:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e7f2:	bf5c      	itt	pl
    e7f4:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e7f8:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7fa:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e7fc:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e7fe:	699b      	ldr	r3, [r3, #24]
    e800:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    e802:	f04f 0201 	mov.w	r2, #1
    e806:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    e808:	d5e8      	bpl.n	e7dc <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
    e80a:	9808      	ldr	r0, [sp, #32]
    e80c:	f7ff fa06 	bl	dc1c <am_hal_interrupt_master_set>
    e810:	e640      	b.n	e494 <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e812:	2600      	movs	r6, #0
    e814:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e816:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e81a:	9101      	str	r1, [sp, #4]
    e81c:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    e81e:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
    e820:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    e824:	2800      	cmp	r0, #0
    e826:	f040 8089 	bne.w	e93c <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
    e82a:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e82e:	2c00      	cmp	r4, #0
    e830:	d0b2      	beq.n	e798 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e832:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
    e836:	311c      	adds	r1, #28
    e838:	030a      	lsls	r2, r1, #12
    e83a:	6993      	ldr	r3, [r2, #24]
    e83c:	06d8      	lsls	r0, r3, #27
    e83e:	d466      	bmi.n	e90e <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
    e840:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e842:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
    e846:	f040 810d 	bne.w	ea64 <am_hal_uart_transfer+0x78c>
    e84a:	f104 3eff 	add.w	lr, r4, #4294967295
    e84e:	f01e 0e03 	ands.w	lr, lr, #3
    e852:	f109 30ff 	add.w	r0, r9, #4294967295
    e856:	d029      	beq.n	e8ac <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e858:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e85c:	6991      	ldr	r1, [r2, #24]
    e85e:	06c9      	lsls	r1, r1, #27
    e860:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    e862:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e866:	d44e      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e868:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e86a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e86e:	f040 80e0 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
    e872:	459e      	cmp	lr, r3
    e874:	d01a      	beq.n	e8ac <am_hal_uart_transfer+0x5d4>
    e876:	f1be 0f02 	cmp.w	lr, #2
    e87a:	d00b      	beq.n	e894 <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e87c:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e880:	6991      	ldr	r1, [r2, #24]
    e882:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e884:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e888:	d43d      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e88a:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e88c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e890:	f040 80cf 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e894:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e898:	6991      	ldr	r1, [r2, #24]
    e89a:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e89c:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8a0:	d431      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e8a2:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e8a4:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8a8:	f040 80c3 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8ac:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
    e8ae:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8b0:	7041      	strb	r1, [r0, #1]
    e8b2:	469e      	mov	lr, r3
    e8b4:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
    e8b8:	d025      	beq.n	e906 <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8ba:	6991      	ldr	r1, [r2, #24]
    e8bc:	06c9      	lsls	r1, r1, #27
    e8be:	d422      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e8c0:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e8c2:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8c6:	f040 80b4 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8ca:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8ce:	6991      	ldr	r1, [r2, #24]
    e8d0:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8d2:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8d6:	d416      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e8d8:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e8da:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8de:	f040 80a8 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8e2:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8e4:	6991      	ldr	r1, [r2, #24]
    e8e6:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8e8:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8ec:	d40b      	bmi.n	e906 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e8ee:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e8f0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8f4:	f040 809d 	bne.w	ea32 <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e8f8:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e8fc:	6991      	ldr	r1, [r2, #24]
    e8fe:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e900:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e904:	d5cd      	bpl.n	e8a2 <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
    e906:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
    e908:	441d      	add	r5, r3
        if (ui32RemainingBytes)
    e90a:	f43f af45 	beq.w	e798 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e90e:	2001      	movs	r0, #1
    e910:	f7fe ff0a 	bl	d728 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e914:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e918:	bf18      	it	ne
    e91a:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e91c:	45b3      	cmp	fp, r6
    e91e:	f67f af3b 	bls.w	e798 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e922:	f8d8 0000 	ldr.w	r0, [r8]
    e926:	9a01      	ldr	r2, [sp, #4]
    e928:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e92c:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
    e92e:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e932:	f43f af75 	beq.w	e820 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e936:	f04f 0b02 	mov.w	fp, #2
    e93a:	e5e7      	b.n	e50c <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
    e93c:	f7ff f96a 	bl	dc14 <am_hal_interrupt_master_disable>
    e940:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    e944:	9007      	str	r0, [sp, #28]
    e946:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e94a:	301c      	adds	r0, #28
    uint32_t i = 0;
    e94c:	f8cd a00c 	str.w	sl, [sp, #12]
    e950:	0303      	lsls	r3, r0, #12
    e952:	f10d 0c20 	add.w	ip, sp, #32
    e956:	2200      	movs	r2, #0
    e958:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e95a:	699c      	ldr	r4, [r3, #24]
    e95c:	06e1      	lsls	r1, r4, #27
    e95e:	d45a      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e960:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e962:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e966:	d17a      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e968:	46e6      	mov	lr, ip
    e96a:	3201      	adds	r2, #1
    e96c:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e970:	6999      	ldr	r1, [r3, #24]
    e972:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e974:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e976:	d44e      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e978:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e97a:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e97e:	d16e      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e980:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e984:	6999      	ldr	r1, [r3, #24]
    e986:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e988:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e98c:	d443      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e98e:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e990:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e994:	d163      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e996:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e99a:	699c      	ldr	r4, [r3, #24]
    e99c:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e99e:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9a2:	d438      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e9a4:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e9a6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e9aa:	d158      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9ac:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9b0:	699c      	ldr	r4, [r3, #24]
    e9b2:	06e4      	lsls	r4, r4, #27
    e9b4:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9b8:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9bc:	d42b      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e9be:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e9c0:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e9c4:	d14b      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9c6:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9ca:	6999      	ldr	r1, [r3, #24]
    e9cc:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9ce:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9d2:	d420      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e9d4:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e9d6:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e9da:	d140      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9dc:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9e0:	6999      	ldr	r1, [r3, #24]
    e9e2:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9e4:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9e8:	d415      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    e9ea:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    e9ec:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e9f0:	d135      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9f2:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9f6:	699c      	ldr	r4, [r3, #24]
    e9f8:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    e9fa:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    e9fe:	d40a      	bmi.n	ea16 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ea00:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ea02:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ea06:	d12a      	bne.n	ea5e <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ea08:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    ea0a:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    ea0c:	f88e 1006 	strb.w	r1, [lr, #6]
    ea10:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
    ea14:	d1a1      	bne.n	e95a <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ea16:	a908      	add	r1, sp, #32
    ea18:	9802      	ldr	r0, [sp, #8]
    ea1a:	4654      	mov	r4, sl
    ea1c:	f8dd a00c 	ldr.w	sl, [sp, #12]
    ea20:	f000 fa30 	bl	ee84 <am_hal_queue_item_add>
    ea24:	b958      	cbnz	r0, ea3e <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    ea26:	f8df b1b4 	ldr.w	fp, [pc, #436]	; ebdc <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    ea2a:	9807      	ldr	r0, [sp, #28]
    ea2c:	f7ff f8f6 	bl	dc1c <am_hal_interrupt_master_set>
    ea30:	e56c      	b.n	e50c <am_hal_uart_transfer+0x234>
    ea32:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ea34:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ea38:	e568      	b.n	e50c <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ea3a:	462e      	mov	r6, r5
    ea3c:	e52d      	b.n	e49a <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
    ea3e:	9807      	ldr	r0, [sp, #28]
    ea40:	f7ff f8ec 	bl	dc1c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    ea44:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    ea48:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
    ea4a:	42a3      	cmp	r3, r4
    ea4c:	bf28      	it	cs
    ea4e:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    ea50:	461a      	mov	r2, r3
    ea52:	4649      	mov	r1, r9
    ea54:	9303      	str	r3, [sp, #12]
    ea56:	f000 fb19 	bl	f08c <am_hal_queue_item_get>
    ea5a:	9b03      	ldr	r3, [sp, #12]
    ea5c:	e753      	b.n	e906 <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ea5e:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ea62:	e7e2      	b.n	ea2a <am_hal_uart_transfer+0x752>
    ea64:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ea68:	e550      	b.n	e50c <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    ea6a:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    ea6e:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    ea72:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
    ea74:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea76:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
    ea7a:	bf28      	it	cs
    ea7c:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea7e:	9901      	ldr	r1, [sp, #4]
    ea80:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
    ea82:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ea84:	f000 f9fe 	bl	ee84 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    ea88:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
    ea8c:	f7ff f8c2 	bl	dc14 <am_hal_interrupt_master_disable>
    ea90:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    ea94:	331c      	adds	r3, #28
    ea96:	031d      	lsls	r5, r3, #12
    ea98:	9005      	str	r0, [sp, #20]
    ea9a:	e00e      	b.n	eaba <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ea9c:	f000 faf6 	bl	f08c <am_hal_queue_item_get>
    eaa0:	b190      	cbz	r0, eac8 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaa2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    eaa6:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    eaaa:	321c      	adds	r2, #28
    eaac:	0311      	lsls	r1, r2, #12
    eaae:	698e      	ldr	r6, [r1, #24]
    eab0:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eab2:	bf5c      	itt	pl
    eab4:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    eab8:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    eaba:	69af      	ldr	r7, [r5, #24]
    eabc:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    eabe:	f04f 0201 	mov.w	r2, #1
    eac2:	a908      	add	r1, sp, #32
    eac4:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    eac6:	d5e9      	bpl.n	ea9c <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
    eac8:	9805      	ldr	r0, [sp, #20]
    eaca:	f7ff f8a7 	bl	dc1c <am_hal_interrupt_master_set>
    eace:	e5d1      	b.n	e674 <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
    ead0:	f7ff f8a0 	bl	dc14 <am_hal_interrupt_master_disable>
    ead4:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ead8:	9006      	str	r0, [sp, #24]
    eada:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
    eade:	301c      	adds	r0, #28
    eae0:	0301      	lsls	r1, r0, #12
    eae2:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
    eae4:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eae6:	698e      	ldr	r6, [r1, #24]
    eae8:	06f0      	lsls	r0, r6, #27
    eaea:	d455      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eaec:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eaee:	f415 6f70 	tst.w	r5, #3840	; 0xf00
    eaf2:	d16f      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eaf4:	4618      	mov	r0, r3
    eaf6:	3201      	adds	r2, #1
    eaf8:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eafc:	698e      	ldr	r6, [r1, #24]
    eafe:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb00:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb02:	d449      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb04:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb06:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eb0a:	d163      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb0c:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb0e:	698e      	ldr	r6, [r1, #24]
    eb10:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb12:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb16:	d43f      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb18:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb1a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eb1e:	d159      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb20:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb22:	f8d1 e018 	ldr.w	lr, [r1, #24]
    eb26:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb2a:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb2e:	d133      	bne.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb30:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb32:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eb36:	d14d      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb38:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb3a:	698e      	ldr	r6, [r1, #24]
    eb3c:	06f6      	lsls	r6, r6, #27
    eb3e:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb42:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb46:	d427      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb48:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb4a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eb4e:	d141      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb50:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb52:	698b      	ldr	r3, [r1, #24]
    eb54:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb56:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb5a:	d41d      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb5c:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb5e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    eb62:	d137      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb64:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb66:	698b      	ldr	r3, [r1, #24]
    eb68:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb6a:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb6e:	d413      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb70:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb72:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eb76:	d12d      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb78:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb7a:	698e      	ldr	r6, [r1, #24]
    eb7c:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb7e:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb82:	d409      	bmi.n	eb98 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb84:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb86:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb8a:	d123      	bne.n	ebd4 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb8c:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
    eb8e:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb90:	7183      	strb	r3, [r0, #6]
    eb92:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
    eb96:	d1a6      	bne.n	eae6 <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    eb98:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    eb9c:	a908      	add	r1, sp, #32
    eb9e:	4650      	mov	r0, sl
    eba0:	f000 f970 	bl	ee84 <am_hal_queue_item_add>
    eba4:	b930      	cbnz	r0, ebb4 <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    eba6:	f8df b034 	ldr.w	fp, [pc, #52]	; ebdc <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    ebaa:	9806      	ldr	r0, [sp, #24]
    ebac:	f7ff f836 	bl	dc1c <am_hal_interrupt_master_set>
    ebb0:	f7ff bb9e 	b.w	e2f0 <am_hal_uart_transfer+0x18>
    ebb4:	9806      	ldr	r0, [sp, #24]
    ebb6:	f7ff f831 	bl	dc1c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    ebba:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    ebbe:	42a5      	cmp	r5, r4
    ebc0:	bf28      	it	cs
    ebc2:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    ebc4:	4649      	mov	r1, r9
    ebc6:	4650      	mov	r0, sl
    ebc8:	462a      	mov	r2, r5
    ebca:	f000 fa5f 	bl	f08c <am_hal_queue_item_get>
    ebce:	e49d      	b.n	e50c <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
    ebd0:	4605      	mov	r5, r0
    ebd2:	e49b      	b.n	e50c <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ebd4:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ebd8:	e7e7      	b.n	ebaa <am_hal_uart_transfer+0x8d2>
    ebda:	bf00      	nop
    ebdc:	08000001 	.word	0x08000001

0000ebe0 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    ebe0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    ebe8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    ebea:	b183      	cbz	r3, ec0e <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    ebec:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ebee:	b170      	cbz	r0, ec0e <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    ebf0:	4e13      	ldr	r6, [pc, #76]	; (ec40 <am_hal_uart_tx_flush+0x60>)
    ebf2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    ebf4:	fbb6 f2f1 	udiv	r2, r6, r1
    ebf8:	2a02      	cmp	r2, #2
    ebfa:	ea4f 1002 	mov.w	r0, r2, lsl #4
    ebfe:	bf8c      	ite	hi
    ec00:	3829      	subhi	r0, #41	; 0x29
    ec02:	2001      	movls	r0, #1
    ec04:	f7fe fd90 	bl	d728 <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    ec08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d1f1      	bne.n	ebf2 <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ec0e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ec12:	351c      	adds	r5, #28
    ec14:	032d      	lsls	r5, r5, #12
    ec16:	69a8      	ldr	r0, [r5, #24]
    ec18:	0702      	lsls	r2, r0, #28
    ec1a:	d50e      	bpl.n	ec3a <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    ec1c:	4e08      	ldr	r6, [pc, #32]	; (ec40 <am_hal_uart_tx_flush+0x60>)
    ec1e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    ec20:	fbb6 f2f1 	udiv	r2, r6, r1
    ec24:	2a02      	cmp	r2, #2
    ec26:	ea4f 1002 	mov.w	r0, r2, lsl #4
    ec2a:	bf8c      	ite	hi
    ec2c:	3829      	subhi	r0, #41	; 0x29
    ec2e:	2001      	movls	r0, #1
    ec30:	f7fe fd7a 	bl	d728 <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    ec34:	69ab      	ldr	r3, [r5, #24]
    ec36:	071b      	lsls	r3, r3, #28
    ec38:	d4f1      	bmi.n	ec1e <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    ec3a:	2000      	movs	r0, #0
    ec3c:	bd70      	pop	{r4, r5, r6, pc}
    ec3e:	bf00      	nop
    ec40:	00b71b00 	.word	0x00b71b00

0000ec44 <am_hal_uart_interrupt_service>:
{
    ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ec48:	6803      	ldr	r3, [r0, #0]
    ec4a:	4c6f      	ldr	r4, [pc, #444]	; (ee08 <am_hal_uart_interrupt_service+0x1c4>)
    ec4c:	f023 457e 	bic.w	r5, r3, #4261412864	; 0xfe000000
    ec50:	42a5      	cmp	r5, r4
{
    ec52:	b08a      	sub	sp, #40	; 0x28
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ec54:	d004      	beq.n	ec60 <am_hal_uart_interrupt_service+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ec56:	2702      	movs	r7, #2
} // am_hal_uart_interrupt_service()
    ec58:	4638      	mov	r0, r7
    ec5a:	b00a      	add	sp, #40	; 0x28
    ec5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ui32Status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) &&
    ec60:	f011 0f50 	tst.w	r1, #80	; 0x50
    ec64:	4615      	mov	r5, r2
    ec66:	460e      	mov	r6, r1
    ec68:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    ec6a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if ((ui32Status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) &&
    ec6c:	d003      	beq.n	ec76 <am_hal_uart_interrupt_service+0x32>
    ec6e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    ec72:	2800      	cmp	r0, #0
    ec74:	d146      	bne.n	ed04 <am_hal_uart_interrupt_service+0xc0>
    if ((ui32Status & UART0_IES_TXRIS_Msk) && pState->bEnableTxQueue)
    ec76:	06b1      	lsls	r1, r6, #26
    ec78:	d532      	bpl.n	ece0 <am_hal_uart_interrupt_service+0x9c>
    ec7a:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    ec7e:	b95e      	cbnz	r6, ec98 <am_hal_uart_interrupt_service+0x54>
    if (pui32UartTxIdle == 0)
    ec80:	2d00      	cmp	r5, #0
    ec82:	d03d      	beq.n	ed00 <am_hal_uart_interrupt_service+0xbc>
    else if ( UARTn(ui32Module)->FR_b.BUSY == false )
    ec84:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    ec88:	321c      	adds	r2, #28
    ec8a:	0311      	lsls	r1, r2, #12
    ec8c:	698b      	ldr	r3, [r1, #24]
    ec8e:	0718      	lsls	r0, r3, #28
    ec90:	d534      	bpl.n	ecfc <am_hal_uart_interrupt_service+0xb8>
        *pui32UartTxIdle = false;
    ec92:	2700      	movs	r7, #0
    ec94:	602f      	str	r7, [r5, #0]
    ec96:	e7df      	b.n	ec58 <am_hal_uart_interrupt_service+0x14>
    uint32_t ui32Module = pState->ui32Module;
    ec98:	6a66      	ldr	r6, [r4, #36]	; 0x24
    AM_CRITICAL_BEGIN
    ec9a:	f7fe ffbb 	bl	dc14 <am_hal_interrupt_master_disable>
    ec9e:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    eca2:	331c      	adds	r3, #28
    eca4:	031e      	lsls	r6, r3, #12
    eca6:	9002      	str	r0, [sp, #8]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    eca8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    ecac:	e00d      	b.n	ecca <am_hal_uart_interrupt_service+0x86>
    ecae:	f000 f9ed 	bl	f08c <am_hal_queue_item_get>
    ecb2:	b190      	cbz	r0, ecda <am_hal_uart_interrupt_service+0x96>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ecb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ecb6:	f501 2380 	add.w	r3, r1, #262144	; 0x40000
    ecba:	331c      	adds	r3, #28
    ecbc:	0318      	lsls	r0, r3, #12
    ecbe:	6982      	ldr	r2, [r0, #24]
    ecc0:	0691      	lsls	r1, r2, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ecc2:	bf5c      	itt	pl
    ecc4:	f89d 1003 	ldrbpl.w	r1, [sp, #3]
    ecc8:	6001      	strpl	r1, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ecca:	69b3      	ldr	r3, [r6, #24]
    eccc:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ecce:	f04f 0201 	mov.w	r2, #1
    ecd2:	f10d 0103 	add.w	r1, sp, #3
    ecd6:	4640      	mov	r0, r8
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ecd8:	d5e9      	bpl.n	ecae <am_hal_uart_interrupt_service+0x6a>
    AM_CRITICAL_END
    ecda:	9802      	ldr	r0, [sp, #8]
    ecdc:	f7fe ff9e 	bl	dc1c <am_hal_interrupt_master_set>
    if (pui32UartTxIdle == 0)
    ece0:	b175      	cbz	r5, ed00 <am_hal_uart_interrupt_service+0xbc>
    if (pState->bEnableTxQueue)
    ece2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ece6:	2800      	cmp	r0, #0
    ece8:	d0cc      	beq.n	ec84 <am_hal_uart_interrupt_service+0x40>
        if ( am_hal_queue_empty(&(pState->sTxQueue) )   &&
    ecea:	6b64      	ldr	r4, [r4, #52]	; 0x34
    ecec:	b944      	cbnz	r4, ed00 <am_hal_uart_interrupt_service+0xbc>
            ( UARTn(ui32Module)->FR_b.BUSY == false ) )
    ecee:	f507 2680 	add.w	r6, r7, #262144	; 0x40000
    ecf2:	361c      	adds	r6, #28
    ecf4:	0337      	lsls	r7, r6, #12
    ecf6:	69b8      	ldr	r0, [r7, #24]
        if ( am_hal_queue_empty(&(pState->sTxQueue) )   &&
    ecf8:	0704      	lsls	r4, r0, #28
    ecfa:	d401      	bmi.n	ed00 <am_hal_uart_interrupt_service+0xbc>
            *pui32UartTxIdle = true;
    ecfc:	2201      	movs	r2, #1
    ecfe:	602a      	str	r2, [r5, #0]
    return AM_HAL_STATUS_SUCCESS;
    ed00:	2700      	movs	r7, #0
    ed02:	e7a9      	b.n	ec58 <am_hal_uart_interrupt_service+0x14>
    AM_CRITICAL_BEGIN
    ed04:	f7fe ff86 	bl	dc14 <am_hal_interrupt_master_disable>
    ed08:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed0a:	9001      	str	r0, [sp, #4]
    ed0c:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    ed10:	321c      	adds	r2, #28
    ed12:	0313      	lsls	r3, r2, #12
    ed14:	a902      	add	r1, sp, #8
    uint32_t i = 0;
    ed16:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed18:	6998      	ldr	r0, [r3, #24]
    ed1a:	06c0      	lsls	r0, r0, #27
    ed1c:	d461      	bmi.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed1e:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed20:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    ed24:	d168      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed26:	468e      	mov	lr, r1
    ed28:	3201      	adds	r2, #1
    ed2a:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed2e:	f8d3 c018 	ldr.w	ip, [r3, #24]
    ed32:	f01c 0f10 	tst.w	ip, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed36:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed38:	d153      	bne.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed3a:	f8d3 8000 	ldr.w	r8, [r3]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed3e:	f418 6f70 	tst.w	r8, #3840	; 0xf00
    ed42:	d159      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed44:	f88e 8000 	strb.w	r8, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed48:	f8d3 c018 	ldr.w	ip, [r3, #24]
    ed4c:	f01c 0f10 	tst.w	ip, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed50:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed54:	d145      	bne.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed56:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed58:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ed5c:	d14c      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed5e:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed62:	f8d3 8018 	ldr.w	r8, [r3, #24]
    ed66:	f018 0f10 	tst.w	r8, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed6a:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed6e:	d138      	bne.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed70:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed72:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ed76:	d13f      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed78:	70ca      	strb	r2, [r1, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed7a:	f8d3 c018 	ldr.w	ip, [r3, #24]
    ed7e:	f01c 0f10 	tst.w	ip, #16
    ed82:	f101 0104 	add.w	r1, r1, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed86:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed8a:	d12a      	bne.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed8c:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed8e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ed92:	d131      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed94:	700a      	strb	r2, [r1, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed96:	6999      	ldr	r1, [r3, #24]
    ed98:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed9a:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed9e:	d420      	bmi.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    eda0:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eda2:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eda6:	d127      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eda8:	f88e 2004 	strb.w	r2, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edac:	6999      	ldr	r1, [r3, #24]
    edae:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edb0:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edb4:	d415      	bmi.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edb6:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edb8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    edbc:	d11c      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edbe:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edc2:	6999      	ldr	r1, [r3, #24]
    edc4:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edc6:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edca:	d40a      	bmi.n	ede2 <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edcc:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edce:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    edd2:	d111      	bne.n	edf8 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edd4:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    edd6:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    edd8:	f88e 1006 	strb.w	r1, [lr, #6]
    eddc:	f10e 0107 	add.w	r1, lr, #7
    while (i < ui32NumBytes)
    ede0:	d19a      	bne.n	ed18 <am_hal_uart_interrupt_service+0xd4>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ede2:	a902      	add	r1, sp, #8
    ede4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ede8:	f000 f84c 	bl	ee84 <am_hal_queue_item_add>
    edec:	b938      	cbnz	r0, edfe <am_hal_uart_interrupt_service+0x1ba>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    edee:	4f07      	ldr	r7, [pc, #28]	; (ee0c <am_hal_uart_interrupt_service+0x1c8>)
    AM_CRITICAL_END
    edf0:	9801      	ldr	r0, [sp, #4]
    edf2:	f7fe ff13 	bl	dc1c <am_hal_interrupt_master_set>
    edf6:	e72f      	b.n	ec58 <am_hal_uart_interrupt_service+0x14>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    edf8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    edfc:	e7f8      	b.n	edf0 <am_hal_uart_interrupt_service+0x1ac>
    AM_CRITICAL_END
    edfe:	9801      	ldr	r0, [sp, #4]
    ee00:	f7fe ff0c 	bl	dc1c <am_hal_interrupt_master_set>
    ee04:	e737      	b.n	ec76 <am_hal_uart_interrupt_service+0x32>
    ee06:	bf00      	nop
    ee08:	01ea9e06 	.word	0x01ea9e06
    ee0c:	08000001 	.word	0x08000001

0000ee10 <am_hal_uart_interrupt_clear>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee10:	6803      	ldr	r3, [r0, #0]
    ee12:	4a07      	ldr	r2, [pc, #28]	; (ee30 <am_hal_uart_interrupt_clear+0x20>)
    ee14:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    ee18:	4594      	cmp	ip, r2
    ee1a:	d001      	beq.n	ee20 <am_hal_uart_interrupt_clear+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ee1c:	2002      	movs	r0, #2
#else // AM_CMSIS_REGS
    AM_REGn(UART, ui32Module, IEC) = ui32IntMask;
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_interrupt_clear()
    ee1e:	4770      	bx	lr
    UARTn(ui32Module)->IEC = ui32IntMask;
    ee20:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ee22:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    ee26:	321c      	adds	r2, #28
    ee28:	0313      	lsls	r3, r2, #12
    return AM_HAL_STATUS_SUCCESS;
    ee2a:	2000      	movs	r0, #0
    UARTn(ui32Module)->IEC = ui32IntMask;
    ee2c:	6459      	str	r1, [r3, #68]	; 0x44
    return AM_HAL_STATUS_SUCCESS;
    ee2e:	4770      	bx	lr
    ee30:	01ea9e06 	.word	0x01ea9e06

0000ee34 <am_hal_uart_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    ee34:	b410      	push	{r4}
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee36:	6803      	ldr	r3, [r0, #0]
    ee38:	4c0b      	ldr	r4, [pc, #44]	; (ee68 <am_hal_uart_interrupt_status_get+0x34>)
    ee3a:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    ee3e:	45a4      	cmp	ip, r4
    ee40:	d003      	beq.n	ee4a <am_hal_uart_interrupt_status_get+0x16>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    ee42:	2002      	movs	r0, #2
        *pui32Status = AM_REGn(UART, ui32Module, IES);
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_interrupt_status_get()
    ee44:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee48:	4770      	bx	lr
    uint32_t ui32Module = pState->ui32Module;
    ee4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    *pui32Status = bEnabledOnly ? UARTn(ui32Module)->MIS : UARTn(ui32Module)->IES;
    ee4c:	f500 2480 	add.w	r4, r0, #262144	; 0x40000
    ee50:	341c      	adds	r4, #28
    ee52:	0323      	lsls	r3, r4, #12
    ee54:	b12a      	cbz	r2, ee62 <am_hal_uart_interrupt_status_get+0x2e>
    ee56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ee58:	600a      	str	r2, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    ee5a:	2000      	movs	r0, #0
} // am_hal_uart_interrupt_status_get()
    ee5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee60:	4770      	bx	lr
    *pui32Status = bEnabledOnly ? UARTn(ui32Module)->MIS : UARTn(ui32Module)->IES;
    ee62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    ee64:	e7f8      	b.n	ee58 <am_hal_uart_interrupt_status_get+0x24>
    ee66:	bf00      	nop
    ee68:	01ea9e06 	.word	0x01ea9e06

0000ee6c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    ee6c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    ee6e:	2400      	movs	r4, #0
    ee70:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    ee72:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    ee74:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    ee76:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    ee78:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    ee7a:	6141      	str	r1, [r0, #20]
}
    ee7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee80:	4770      	bx	lr
    ee82:	bf00      	nop

0000ee84 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee86:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    ee88:	6905      	ldr	r5, [r0, #16]
{
    ee8a:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    ee8c:	fb05 f502 	mul.w	r5, r5, r2
{
    ee90:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
    ee92:	f7fe febf 	bl	dc14 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    ee96:	68e3      	ldr	r3, [r4, #12]
    ee98:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
    ee9a:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    ee9c:	1a99      	subs	r1, r3, r2
    ee9e:	428d      	cmp	r5, r1
    eea0:	f200 8081 	bhi.w	efa6 <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eea4:	2d00      	cmp	r5, #0
    eea6:	d075      	beq.n	ef94 <am_hal_queue_item_add+0x110>
    eea8:	6826      	ldr	r6, [r4, #0]
    eeaa:	2f00      	cmp	r7, #0
    eeac:	d07d      	beq.n	efaa <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    eeae:	4638      	mov	r0, r7
    eeb0:	6963      	ldr	r3, [r4, #20]
    eeb2:	f810 2b01 	ldrb.w	r2, [r0], #1
    eeb6:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eeb8:	6821      	ldr	r1, [r4, #0]
    eeba:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    eebe:	1c4a      	adds	r2, r1, #1
    eec0:	197e      	adds	r6, r7, r5
    eec2:	43ff      	mvns	r7, r7
    eec4:	fbb2 fcfe 	udiv	ip, r2, lr
    eec8:	4437      	add	r7, r6
    eeca:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eece:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eed0:	6023      	str	r3, [r4, #0]
    eed2:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eed6:	d05c      	beq.n	ef92 <am_hal_queue_item_add+0x10e>
    eed8:	b349      	cbz	r1, ef2e <am_hal_queue_item_add+0xaa>
    eeda:	2901      	cmp	r1, #1
    eedc:	d019      	beq.n	ef12 <am_hal_queue_item_add+0x8e>
    eede:	2902      	cmp	r1, #2
    eee0:	d00b      	beq.n	eefa <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    eee2:	6962      	ldr	r2, [r4, #20]
    eee4:	f810 7b01 	ldrb.w	r7, [r0], #1
    eee8:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eeea:	6823      	ldr	r3, [r4, #0]
    eeec:	68e1      	ldr	r1, [r4, #12]
    eeee:	1c5a      	adds	r2, r3, #1
    eef0:	fbb2 f7f1 	udiv	r7, r2, r1
    eef4:	fb01 2317 	mls	r3, r1, r7, r2
    eef8:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    eefa:	6962      	ldr	r2, [r4, #20]
    eefc:	f810 1b01 	ldrb.w	r1, [r0], #1
    ef00:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef02:	6823      	ldr	r3, [r4, #0]
    ef04:	68e7      	ldr	r7, [r4, #12]
    ef06:	1c5a      	adds	r2, r3, #1
    ef08:	fbb2 f1f7 	udiv	r1, r2, r7
    ef0c:	fb07 2311 	mls	r3, r7, r1, r2
    ef10:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef12:	6967      	ldr	r7, [r4, #20]
    ef14:	f810 2b01 	ldrb.w	r2, [r0], #1
    ef18:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef1a:	6823      	ldr	r3, [r4, #0]
    ef1c:	68e1      	ldr	r1, [r4, #12]
    ef1e:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef20:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef22:	fbb7 f2f1 	udiv	r2, r7, r1
    ef26:	fb01 7312 	mls	r3, r1, r2, r7
    ef2a:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef2c:	d031      	beq.n	ef92 <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef2e:	4686      	mov	lr, r0
    ef30:	6967      	ldr	r7, [r4, #20]
    ef32:	f81e 1b01 	ldrb.w	r1, [lr], #1
    ef36:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef38:	6823      	ldr	r3, [r4, #0]
    ef3a:	68e2      	ldr	r2, [r4, #12]
    ef3c:	1c5f      	adds	r7, r3, #1
    ef3e:	fbb7 f1f2 	udiv	r1, r7, r2
    ef42:	fb02 7311 	mls	r3, r2, r1, r7
    ef46:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef48:	6962      	ldr	r2, [r4, #20]
    ef4a:	7847      	ldrb	r7, [r0, #1]
    ef4c:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef4e:	6823      	ldr	r3, [r4, #0]
    ef50:	68e1      	ldr	r1, [r4, #12]
    ef52:	1c5f      	adds	r7, r3, #1
    ef54:	fbb7 f2f1 	udiv	r2, r7, r1
    ef58:	fb01 7312 	mls	r3, r1, r2, r7
    ef5c:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef5e:	6961      	ldr	r1, [r4, #20]
    ef60:	f89e 7001 	ldrb.w	r7, [lr, #1]
    ef64:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef66:	6822      	ldr	r2, [r4, #0]
    ef68:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef6a:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef6c:	3201      	adds	r2, #1
    ef6e:	fbb2 fcf7 	udiv	ip, r2, r7
    ef72:	fb07 231c 	mls	r3, r7, ip, r2
    ef76:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    ef78:	78c7      	ldrb	r7, [r0, #3]
    ef7a:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef7c:	6822      	ldr	r2, [r4, #0]
    ef7e:	68e1      	ldr	r1, [r4, #12]
    ef80:	1c57      	adds	r7, r2, #1
    ef82:	3004      	adds	r0, #4
    ef84:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef88:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    ef8a:	fb01 7312 	mls	r3, r1, r2, r7
    ef8e:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    ef90:	d1cd      	bne.n	ef2e <am_hal_queue_item_add+0xaa>
    ef92:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    ef94:	442a      	add	r2, r5
    ef96:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    ef98:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    ef9a:	9801      	ldr	r0, [sp, #4]
    ef9c:	f7fe fe3e 	bl	dc1c <am_hal_interrupt_master_set>

    return bSuccess;
}
    efa0:	4620      	mov	r0, r4
    efa2:	b003      	add	sp, #12
    efa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    efa6:	2400      	movs	r4, #0
    efa8:	e7f7      	b.n	ef9a <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    efaa:	1c70      	adds	r0, r6, #1
    efac:	fbb0 fef3 	udiv	lr, r0, r3
    efb0:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efb4:	2001      	movs	r0, #1
    efb6:	1e6e      	subs	r6, r5, #1
    efb8:	4285      	cmp	r5, r0
    efba:	f006 0707 	and.w	r7, r6, #7
    efbe:	d063      	beq.n	f088 <am_hal_queue_item_add+0x204>
    efc0:	b3bf      	cbz	r7, f032 <am_hal_queue_item_add+0x1ae>
    efc2:	2f01      	cmp	r7, #1
    efc4:	d02d      	beq.n	f022 <am_hal_queue_item_add+0x19e>
    efc6:	2f02      	cmp	r7, #2
    efc8:	d025      	beq.n	f016 <am_hal_queue_item_add+0x192>
    efca:	2f03      	cmp	r7, #3
    efcc:	d01d      	beq.n	f00a <am_hal_queue_item_add+0x186>
    efce:	2f04      	cmp	r7, #4
    efd0:	d015      	beq.n	effe <am_hal_queue_item_add+0x17a>
    efd2:	2f05      	cmp	r7, #5
    efd4:	d00d      	beq.n	eff2 <am_hal_queue_item_add+0x16e>
    efd6:	2f06      	cmp	r7, #6
    efd8:	d005      	beq.n	efe6 <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    efda:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efdc:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    efde:	fbb1 fcf3 	udiv	ip, r1, r3
    efe2:	fb03 111c 	mls	r1, r3, ip, r1
    efe6:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    efe8:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    efea:	fbb1 f6f3 	udiv	r6, r1, r3
    efee:	fb03 1116 	mls	r1, r3, r6, r1
    eff2:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    eff4:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    eff6:	fbb1 f7f3 	udiv	r7, r1, r3
    effa:	fb03 1117 	mls	r1, r3, r7, r1
    effe:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f000:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f002:	fbb1 fef3 	udiv	lr, r1, r3
    f006:	fb03 111e 	mls	r1, r3, lr, r1
    f00a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f00c:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f00e:	fbb1 fcf3 	udiv	ip, r1, r3
    f012:	fb03 111c 	mls	r1, r3, ip, r1
    f016:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f018:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f01a:	fbb1 f6f3 	udiv	r6, r1, r3
    f01e:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f022:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f024:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f026:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f028:	fbb1 f7f3 	udiv	r7, r1, r3
    f02c:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f030:	d02a      	beq.n	f088 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f032:	3101      	adds	r1, #1
    f034:	fbb1 fef3 	udiv	lr, r1, r3
    f038:	fb03 161e 	mls	r6, r3, lr, r1
    f03c:	1c77      	adds	r7, r6, #1
    f03e:	fbb7 fcf3 	udiv	ip, r7, r3
    f042:	fb03 711c 	mls	r1, r3, ip, r7
    f046:	1c4e      	adds	r6, r1, #1
    f048:	fbb6 f7f3 	udiv	r7, r6, r3
    f04c:	fb03 6117 	mls	r1, r3, r7, r6
    f050:	1c4e      	adds	r6, r1, #1
    f052:	fbb6 f7f3 	udiv	r7, r6, r3
    f056:	fb03 6117 	mls	r1, r3, r7, r6
    f05a:	1c4e      	adds	r6, r1, #1
    f05c:	fbb6 f7f3 	udiv	r7, r6, r3
    f060:	fb03 6117 	mls	r1, r3, r7, r6
    f064:	1c4e      	adds	r6, r1, #1
    f066:	fbb6 f7f3 	udiv	r7, r6, r3
    f06a:	fb03 6117 	mls	r1, r3, r7, r6
    f06e:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f070:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f072:	fbb6 f7f3 	udiv	r7, r6, r3
    f076:	fb03 6117 	mls	r1, r3, r7, r6
    f07a:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f07c:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f07e:	fbb6 f7f3 	udiv	r7, r6, r3
    f082:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f086:	d1d4      	bne.n	f032 <am_hal_queue_item_add+0x1ae>
    f088:	6021      	str	r1, [r4, #0]
    f08a:	e783      	b.n	ef94 <am_hal_queue_item_add+0x110>

0000f08c <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    f08c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f08e:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f090:	6905      	ldr	r5, [r0, #16]
{
    f092:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f094:	fb05 f502 	mul.w	r5, r5, r2
{
    f098:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
    f09a:	f7fe fdbb 	bl	dc14 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f09e:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
    f0a0:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f0a2:	42bd      	cmp	r5, r7
    f0a4:	f200 8083 	bhi.w	f1ae <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0a8:	2d00      	cmp	r5, #0
    f0aa:	d077      	beq.n	f19c <am_hal_queue_item_get+0x110>
    f0ac:	6863      	ldr	r3, [r4, #4]
    f0ae:	2e00      	cmp	r6, #0
    f0b0:	d07f      	beq.n	f1b2 <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f0b2:	6962      	ldr	r2, [r4, #20]
    f0b4:	4630      	mov	r0, r6
    f0b6:	5cd1      	ldrb	r1, [r2, r3]
    f0b8:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f0bc:	6863      	ldr	r3, [r4, #4]
    f0be:	68e7      	ldr	r7, [r4, #12]
    f0c0:	1c5a      	adds	r2, r3, #1
    f0c2:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0c4:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f0c6:	fbb2 f6f7 	udiv	r6, r2, r7
    f0ca:	fb07 2316 	mls	r3, r7, r6, r2
    f0ce:	f105 37ff 	add.w	r7, r5, #4294967295
    f0d2:	6063      	str	r3, [r4, #4]
    f0d4:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0d8:	d05f      	beq.n	f19a <am_hal_queue_item_get+0x10e>
    f0da:	b362      	cbz	r2, f136 <am_hal_queue_item_get+0xaa>
    f0dc:	2a01      	cmp	r2, #1
    f0de:	d01b      	beq.n	f118 <am_hal_queue_item_get+0x8c>
    f0e0:	2a02      	cmp	r2, #2
    f0e2:	d00c      	beq.n	f0fe <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f0e4:	6966      	ldr	r6, [r4, #20]
    f0e6:	f816 c003 	ldrb.w	ip, [r6, r3]
    f0ea:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f0ee:	6863      	ldr	r3, [r4, #4]
    f0f0:	68e7      	ldr	r7, [r4, #12]
    f0f2:	1c5a      	adds	r2, r3, #1
    f0f4:	fbb2 f6f7 	udiv	r6, r2, r7
    f0f8:	fb07 2316 	mls	r3, r7, r6, r2
    f0fc:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f0fe:	6967      	ldr	r7, [r4, #20]
    f100:	f817 e003 	ldrb.w	lr, [r7, r3]
    f104:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f108:	6863      	ldr	r3, [r4, #4]
    f10a:	68e6      	ldr	r6, [r4, #12]
    f10c:	1c5a      	adds	r2, r3, #1
    f10e:	fbb2 f7f6 	udiv	r7, r2, r6
    f112:	fb06 2317 	mls	r3, r6, r7, r2
    f116:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f118:	6966      	ldr	r6, [r4, #20]
    f11a:	f816 c003 	ldrb.w	ip, [r6, r3]
    f11e:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f122:	6863      	ldr	r3, [r4, #4]
    f124:	68e7      	ldr	r7, [r4, #12]
    f126:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f128:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f12a:	fbb2 f6f7 	udiv	r6, r2, r7
    f12e:	fb07 2316 	mls	r3, r7, r6, r2
    f132:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f134:	d031      	beq.n	f19a <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f136:	6962      	ldr	r2, [r4, #20]
    f138:	4686      	mov	lr, r0
    f13a:	5cd6      	ldrb	r6, [r2, r3]
    f13c:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f140:	6863      	ldr	r3, [r4, #4]
    f142:	68e7      	ldr	r7, [r4, #12]
    f144:	1c5a      	adds	r2, r3, #1
    f146:	fbb2 f6f7 	udiv	r6, r2, r7
    f14a:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f14e:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f150:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f152:	5cfa      	ldrb	r2, [r7, r3]
    f154:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f156:	6863      	ldr	r3, [r4, #4]
    f158:	68e6      	ldr	r6, [r4, #12]
    f15a:	1c5f      	adds	r7, r3, #1
    f15c:	fbb7 f2f6 	udiv	r2, r7, r6
    f160:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f164:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f166:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f168:	5cf7      	ldrb	r7, [r6, r3]
    f16a:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f16e:	6862      	ldr	r2, [r4, #4]
    f170:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f172:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f174:	3201      	adds	r2, #1
    f176:	fbb2 fcf7 	udiv	ip, r2, r7
    f17a:	fb07 231c 	mls	r3, r7, ip, r2
    f17e:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f180:	5cf7      	ldrb	r7, [r6, r3]
    f182:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f184:	6866      	ldr	r6, [r4, #4]
    f186:	68e7      	ldr	r7, [r4, #12]
    f188:	1c72      	adds	r2, r6, #1
    f18a:	3004      	adds	r0, #4
    f18c:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f190:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f192:	fb07 2316 	mls	r3, r7, r6, r2
    f196:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f198:	d1cd      	bne.n	f136 <am_hal_queue_item_get+0xaa>
    f19a:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    f19c:	1b7f      	subs	r7, r7, r5
    f19e:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    f1a0:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    f1a2:	9801      	ldr	r0, [sp, #4]
    f1a4:	f7fe fd3a 	bl	dc1c <am_hal_interrupt_master_set>

    return bSuccess;
}
    f1a8:	4620      	mov	r0, r4
    f1aa:	b003      	add	sp, #12
    f1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    f1ae:	2400      	movs	r4, #0
    f1b0:	e7f7      	b.n	f1a2 <am_hal_queue_item_get+0x116>
    f1b2:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f1b4:	1c58      	adds	r0, r3, #1
    f1b6:	fbb0 fef1 	udiv	lr, r0, r1
    f1ba:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1be:	2001      	movs	r0, #1
    f1c0:	1e6a      	subs	r2, r5, #1
    f1c2:	4285      	cmp	r5, r0
    f1c4:	f002 0607 	and.w	r6, r2, #7
    f1c8:	d063      	beq.n	f292 <am_hal_queue_item_get+0x206>
    f1ca:	b3be      	cbz	r6, f23c <am_hal_queue_item_get+0x1b0>
    f1cc:	2e01      	cmp	r6, #1
    f1ce:	d02d      	beq.n	f22c <am_hal_queue_item_get+0x1a0>
    f1d0:	2e02      	cmp	r6, #2
    f1d2:	d025      	beq.n	f220 <am_hal_queue_item_get+0x194>
    f1d4:	2e03      	cmp	r6, #3
    f1d6:	d01d      	beq.n	f214 <am_hal_queue_item_get+0x188>
    f1d8:	2e04      	cmp	r6, #4
    f1da:	d015      	beq.n	f208 <am_hal_queue_item_get+0x17c>
    f1dc:	2e05      	cmp	r6, #5
    f1de:	d00d      	beq.n	f1fc <am_hal_queue_item_get+0x170>
    f1e0:	2e06      	cmp	r6, #6
    f1e2:	d005      	beq.n	f1f0 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f1e4:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1e6:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f1e8:	fbb3 f2f1 	udiv	r2, r3, r1
    f1ec:	fb01 3312 	mls	r3, r1, r2, r3
    f1f0:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1f2:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f1f4:	fbb3 fcf1 	udiv	ip, r3, r1
    f1f8:	fb01 331c 	mls	r3, r1, ip, r3
    f1fc:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1fe:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f200:	fbb3 fef1 	udiv	lr, r3, r1
    f204:	fb01 331e 	mls	r3, r1, lr, r3
    f208:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f20a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f20c:	fbb3 f6f1 	udiv	r6, r3, r1
    f210:	fb01 3316 	mls	r3, r1, r6, r3
    f214:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f216:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f218:	fbb3 f2f1 	udiv	r2, r3, r1
    f21c:	fb01 3312 	mls	r3, r1, r2, r3
    f220:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f222:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f224:	fbb3 fcf1 	udiv	ip, r3, r1
    f228:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f22c:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f22e:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f230:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f232:	fbb3 fef1 	udiv	lr, r3, r1
    f236:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f23a:	d02a      	beq.n	f292 <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f23c:	3301      	adds	r3, #1
    f23e:	fbb3 f6f1 	udiv	r6, r3, r1
    f242:	fb01 3216 	mls	r2, r1, r6, r3
    f246:	1c56      	adds	r6, r2, #1
    f248:	fbb6 fcf1 	udiv	ip, r6, r1
    f24c:	fb01 631c 	mls	r3, r1, ip, r6
    f250:	1c5a      	adds	r2, r3, #1
    f252:	fbb2 f6f1 	udiv	r6, r2, r1
    f256:	fb01 2316 	mls	r3, r1, r6, r2
    f25a:	1c5a      	adds	r2, r3, #1
    f25c:	fbb2 f6f1 	udiv	r6, r2, r1
    f260:	fb01 2316 	mls	r3, r1, r6, r2
    f264:	1c5a      	adds	r2, r3, #1
    f266:	fbb2 f6f1 	udiv	r6, r2, r1
    f26a:	fb01 2316 	mls	r3, r1, r6, r2
    f26e:	1c5a      	adds	r2, r3, #1
    f270:	fbb2 f6f1 	udiv	r6, r2, r1
    f274:	fb01 2316 	mls	r3, r1, r6, r2
    f278:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f27a:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f27c:	fbb2 f6f1 	udiv	r6, r2, r1
    f280:	fb01 2316 	mls	r3, r1, r6, r2
    f284:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f286:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f288:	fbb2 f6f1 	udiv	r6, r2, r1
    f28c:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f290:	d1d4      	bne.n	f23c <am_hal_queue_item_get+0x1b0>
    f292:	6063      	str	r3, [r4, #4]
    f294:	e782      	b.n	f19c <am_hal_queue_item_get+0x110>
    f296:	bf00      	nop
    f298:	6c6c6548 	.word	0x6c6c6548
    f29c:	6f57206f 	.word	0x6f57206f
    f2a0:	21646c72 	.word	0x21646c72
    f2a4:	00000a0a 	.word	0x00000a0a
    f2a8:	646e6556 	.word	0x646e6556
    f2ac:	4e20726f 	.word	0x4e20726f
    f2b0:	3a656d61 	.word	0x3a656d61
    f2b4:	0a732520 	.word	0x0a732520
    f2b8:	00000000 	.word	0x00000000
    f2bc:	69766544 	.word	0x69766544
    f2c0:	74206563 	.word	0x74206563
    f2c4:	3a657079 	.word	0x3a657079
    f2c8:	0a732520 	.word	0x0a732520
    f2cc:	00000000 	.word	0x00000000
    f2d0:	00736559 	.word	0x00736559
    f2d4:	00006f4e 	.word	0x00006f4e
    f2d8:	6c617551 	.word	0x6c617551
    f2dc:	65696669 	.word	0x65696669
    f2e0:	25203a64 	.word	0x25203a64
    f2e4:	00000a73 	.word	0x00000a73
    f2e8:	69766544 	.word	0x69766544
    f2ec:	49206563 	.word	0x49206563
    f2f0:	3a6f666e 	.word	0x3a6f666e
    f2f4:	6150090a 	.word	0x6150090a
    f2f8:	6e207472 	.word	0x6e207472
    f2fc:	65626d75 	.word	0x65626d75
    f300:	30203a72 	.word	0x30203a72
    f304:	38302578 	.word	0x38302578
    f308:	43090a58 	.word	0x43090a58
    f30c:	20706968 	.word	0x20706968
    f310:	3a304449 	.word	0x3a304449
    f314:	20202020 	.word	0x20202020
    f318:	30257830 	.word	0x30257830
    f31c:	090a5838 	.word	0x090a5838
    f320:	70696843 	.word	0x70696843
    f324:	31444920 	.word	0x31444920
    f328:	2020203a 	.word	0x2020203a
    f32c:	25783020 	.word	0x25783020
    f330:	0a583830 	.word	0x0a583830
    f334:	76655209 	.word	0x76655209
    f338:	6f697369 	.word	0x6f697369
    f33c:	20203a6e 	.word	0x20203a6e
    f340:	78302020 	.word	0x78302020
    f344:	58383025 	.word	0x58383025
    f348:	65522820 	.word	0x65522820
    f34c:	25632576 	.word	0x25632576
    f350:	000a2963 	.word	0x000a2963
    f354:	616c4609 	.word	0x616c4609
    f358:	73206873 	.word	0x73206873
    f35c:	3a657a69 	.word	0x3a657a69
    f360:	37252020 	.word	0x37252020
    f364:	25282064 	.word	0x25282064
    f368:	424b2064 	.word	0x424b2064
    f36c:	0a297325 	.word	0x0a297325
    f370:	00000000 	.word	0x00000000
    f374:	41525309 	.word	0x41525309
    f378:	6973204d 	.word	0x6973204d
    f37c:	203a657a 	.word	0x203a657a
    f380:	37252020 	.word	0x37252020
    f384:	25282064 	.word	0x25282064
    f388:	424b2064 	.word	0x424b2064
    f38c:	0a297325 	.word	0x0a297325
    f390:	0000000a 	.word	0x0000000a
    f394:	20434347 	.word	0x20434347
    f398:	2e332e36 	.word	0x2e332e36
    f39c:	30322031 	.word	0x30322031
    f3a0:	32303731 	.word	0x32303731
    f3a4:	28203531 	.word	0x28203531
    f3a8:	656c6572 	.word	0x656c6572
    f3ac:	29657361 	.word	0x29657361
    f3b0:	52415b20 	.word	0x52415b20
    f3b4:	6d652f4d 	.word	0x6d652f4d
    f3b8:	64646562 	.word	0x64646562
    f3bc:	362d6465 	.word	0x362d6465
    f3c0:	6172622d 	.word	0x6172622d
    f3c4:	2068636e 	.word	0x2068636e
    f3c8:	69766572 	.word	0x69766572
    f3cc:	6e6f6973 	.word	0x6e6f6973
    f3d0:	35343220 	.word	0x35343220
    f3d4:	5d323135 	.word	0x5d323135
    f3d8:	00000000 	.word	0x00000000
    f3dc:	20707041 	.word	0x20707041
    f3e0:	706d6f43 	.word	0x706d6f43
    f3e4:	72656c69 	.word	0x72656c69
    f3e8:	2020203a 	.word	0x2020203a
    f3ec:	0a732520 	.word	0x0a732520
    f3f0:	00000000 	.word	0x00000000
    f3f4:	204c4148 	.word	0x204c4148
    f3f8:	706d6f43 	.word	0x706d6f43
    f3fc:	72656c69 	.word	0x72656c69
    f400:	2020203a 	.word	0x2020203a
    f404:	0a732520 	.word	0x0a732520
    f408:	00000000 	.word	0x00000000
    f40c:	204c4148 	.word	0x204c4148
    f410:	204b4453 	.word	0x204b4453
    f414:	73726576 	.word	0x73726576
    f418:	3a6e6f69 	.word	0x3a6e6f69
    f41c:	2e642520 	.word	0x2e642520
    f420:	252e6425 	.word	0x252e6425
    f424:	00000a64 	.word	0x00000a64
    f428:	525f4d41 	.word	0x525f4d41
    f42c:	00004745 	.word	0x00004745
    f430:	49534d43 	.word	0x49534d43
    f434:	00000053 	.word	0x00000053
    f438:	204c4148 	.word	0x204c4148
    f43c:	706d6f63 	.word	0x706d6f63
    f440:	64656c69 	.word	0x64656c69
    f444:	74697720 	.word	0x74697720
    f448:	73252068 	.word	0x73252068
    f44c:	7974732d 	.word	0x7974732d
    f450:	7220656c 	.word	0x7220656c
    f454:	73696765 	.word	0x73696765
    f458:	73726574 	.word	0x73726574
    f45c:	0000000a 	.word	0x0000000a
    f460:	4f464e49 	.word	0x4f464e49
    f464:	61762030 	.word	0x61762030
    f468:	2c64696c 	.word	0x2c64696c
    f46c:	72657620 	.word	0x72657620
    f470:	25783020 	.word	0x25783020
    f474:	00000058 	.word	0x00000058
    f478:	4f464e49 	.word	0x4f464e49
    f47c:	6e692030 	.word	0x6e692030
    f480:	696c6176 	.word	0x696c6176
    f484:	00000064 	.word	0x00000064
    f488:	204c4253 	.word	0x204c4253
    f48c:	3a726576 	.word	0x3a726576
    f490:	25783020 	.word	0x25783020
    f494:	202d2078 	.word	0x202d2078
    f498:	78257830 	.word	0x78257830
    f49c:	7325202c 	.word	0x7325202c
    f4a0:	0000000a 	.word	0x0000000a
    f4a4:	685f6d61 	.word	0x685f6d61
    f4a8:	735f6c61 	.word	0x735f6c61
    f4ac:	72756365 	.word	0x72756365
    f4b0:	5f797469 	.word	0x5f797469
    f4b4:	5f746567 	.word	0x5f746567
    f4b8:	6f666e69 	.word	0x6f666e69
    f4bc:	69616620 	.word	0x69616620
    f4c0:	2064656c 	.word	0x2064656c
    f4c4:	58257830 	.word	0x58257830
    f4c8:	0000000a 	.word	0x0000000a
    f4cc:	0a0a0a0a 	.word	0x0a0a0a0a
    f4d0:	0a0a0a0a 	.word	0x0a0a0a0a
    f4d4:	0a0a0a0a 	.word	0x0a0a0a0a
    f4d8:	0a0a0a0a 	.word	0x0a0a0a0a
    f4dc:	00000a0a 	.word	0x00000a0a

0000f4e0 <g_sUartConfig>:
    f4e0:	0001c200 00000060 00000000 00000000     ....`...........
    f4f0:	00000000 00000012 10001110 00000100     ................
    f500:	1000110c 00000002                       ........

0000f508 <g_DeviceNameApollo>:
    f508:	6c6f7041 00006f6c                       Apollo..

0000f510 <g_DeviceNameApollo2>:
    f510:	6c6f7041 00326f6c                       Apollo2.

0000f518 <g_DeviceNameApollo3>:
    f518:	6c6f7041 00336f6c                       Apollo3.

0000f520 <g_ui8VendorNameAmbq>:
    f520:	51424d41 00000000                       AMBQ....

0000f528 <g_ui8VendorNameUnknown>:
    f528:	3f3f3f3f 00000000                       ????....

0000f530 <g_ui8DeviceNameUnknown>:
    f530:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000f540 <g_AM_BSP_GPIO_COM_UART_RX>:
    f540:	00000000                                ....

0000f544 <g_AM_BSP_GPIO_COM_UART_TX>:
    f544:	00000000                                ....

0000f548 <am_hal_cachectrl_defaults>:
    f548:	00000308                                ....

0000f54c <g_ui32HALversion>:
    f54c:	01020d00                                ....

0000f550 <g_ui8HALcompiler>:
    f550:	20434347 2e332e36 30322031 32303731     GCC 6.3.1 201702
    f560:	28203531 656c6572 29657361 52415b20     15 (release) [AR
    f570:	6d652f4d 64646562 362d6465 6172622d     M/embedded-6-bra
    f580:	2068636e 69766572 6e6f6973 35343220     nch revision 245
    f590:	5d323135 00000000                       512]....

0000f598 <g_AM_HAL_GPIO_DISABLE>:
    f598:	00000003                                ....

0000f59c <g_ui8Bit76Capabilities>:
    f59c:	02800101 80010180 80800101 80808080     ................
    f5ac:	80808080 80808008 01800180 80808080     ................
    f5bc:	80808080 01800402 01010401 80808080     ................
    f5cc:	00000101                                ....

0000f5d0 <g_ui8Inpen>:
    f5d0:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f5e0:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f5f0:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f600:	00003130                                01..

0000f604 <g_ui8NCEtable>:
    f604:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f614:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f624:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f634:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f644:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f654:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f664:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f674:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f684:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f694:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f6a4:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f6b4:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f6c4:	32221202 43231303                       .."2..#C

0000f6cc <g_ui8nCEpins>:
    f6cc:	02070707 00080802 01020202 01010101     ................
    f6dc:	01010101 01010101 01010101 01010101     ................
    f6ec:	01010101 08010101 01010008 01010101     ................
    f6fc:	00000101                                ....

0000f700 <g_am_hal_mcuctrl_flash_size>:
    f700:	00004000 00008000 00010000 00020000     .@..............
    f710:	00040000 00080000 00100000 00200000     .............. .
	...

0000f740 <g_am_hal_mcuctrl_sram_size>:
    f740:	00004000 00008000 00010000 00020000     .@..............
    f750:	00040000 00080000 00100000 00060000     ................
	...

0000f780 <am_hal_pwrctrl_peripheral_control>:
	...
    f78c:	00000001 00000004 00000004 00000002     ................
    f79c:	00000008 00000008 00000004 00000008     ................
    f7ac:	00000008 00000008 00000008 00000008     ................
    f7bc:	00000010 00000010 00000010 00000020     ............ ...
    f7cc:	00000010 00000010 00000040 00000010     ........@.......
    f7dc:	00000010 00000080 00000004 00000004     ................
    f7ec:	00000100 00000004 00000004 00000200     ................
    f7fc:	00000020 00000020 00000400 00000004      ... ...........
    f80c:	00000004 00000800 00000040 00000040     ........@...@...
    f81c:	00001000 00000080 00000080 00002000     ............. ..
    f82c:	00000100 00000100                       ........
