
hello_fault_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027cc  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000e7cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001000  0000e7cc  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000e7cc  2**0
                  CONTENTS, READONLY
  5 .debug_info   0001e268  00000000  00000000  0000e803  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000307e  00000000  00000000  0002ca6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000006d8  00000000  00000000  0002fae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001428  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005bda  00000000  00000000  000315e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009f57  00000000  00000000  000371c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004111a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000013a0  00000000  00000000  00041198  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006af3  00000000  00000000  00042538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 31 c2 00 00 99 c2 00 00 e1 c2 00 00     ....1...........
    c010:	e1 c2 00 00 e1 c2 00 00 e1 c2 00 00 00 00 00 00     ................
	...
    c02c:	9f c2 00 00 9f c2 00 00 00 00 00 00 9f c2 00 00     ................
    c03c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c04c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c05c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c06c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c07c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c08c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c09c:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c0ac:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c0bc:	9f c2 00 00 9f c2 00 00 9f c2 00 00 9f c2 00 00     ................
    c0cc:	9f c2 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <force_fault>:
//! @return None.
//
//*****************************************************************************
void
force_fault(void)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    uint32_t *pCauseFault;
    volatile uint32_t uVal;

    pCauseFault = (uint32_t*)ILLEGAL_SRAM_ADDR;
    c1a6:	4b06      	ldr	r3, [pc, #24]	; (c1c0 <force_fault+0x20>)
    c1a8:	607b      	str	r3, [r7, #4]
    uVal = *pCauseFault;
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	681b      	ldr	r3, [r3, #0]
    c1ae:	603b      	str	r3, [r7, #0]

    //
    // Use the variable uVal in order to avoid a warning from some compilers.
    // However, the fault will prevent us from getting here.
    //
    pCauseFault = (uint32_t*)uVal;
    c1b0:	683b      	ldr	r3, [r7, #0]
    c1b2:	607b      	str	r3, [r7, #4]
}
    c1b4:	bf00      	nop
    c1b6:	370c      	adds	r7, #12
    c1b8:	46bd      	mov	sp, r7
    c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1be:	4770      	bx	lr
    c1c0:	10100000 	.word	0x10100000

0000c1c4 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1c8:	2100      	movs	r1, #0
    c1ca:	2000      	movs	r0, #0
    c1cc:	f001 f93c 	bl	d448 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1d0:	4812      	ldr	r0, [pc, #72]	; (c21c <main+0x58>)
    c1d2:	f001 f905 	bl	d3e0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1d6:	f001 f92d 	bl	d434 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1da:	f001 f891 	bl	d300 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c1de:	f001 f8df 	bl	d3a0 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1e2:	f001 f883 	bl	d2ec <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello Fault.\n\n");
    c1e6:	480e      	ldr	r0, [pc, #56]	; (c220 <main+0x5c>)
    c1e8:	f001 f862 	bl	d2b0 <am_util_stdio_printf>

    //
    // Print a message about the forthcoming hard fault.
    //
    am_util_stdio_printf(""
    c1ec:	480d      	ldr	r0, [pc, #52]	; (c224 <main+0x60>)
    c1ee:	f001 f85f 	bl	d2b0 <am_util_stdio_printf>
        "An illegal memory access will occur next, which will execute the\n"
        "extended fault handler to assist in decoding the fault.\n");
    am_util_stdio_printf("\n"
    c1f2:	480d      	ldr	r0, [pc, #52]	; (c228 <main+0x64>)
    c1f4:	f001 f85c 	bl	d2b0 <am_util_stdio_printf>
        "In order to print out the fault information for this example\n"
        "a macro, AM_UTIL_FAULTISR_PRINT, has been defined in the build\n"
        "environment.  Otherwise the fault data can only be examined\n"
        "directly in the ISR from a debugger.\n"
        "\n");
    am_util_stdio_printf(""
    c1f8:	480c      	ldr	r0, [pc, #48]	; (c22c <main+0x68>)
    c1fa:	f001 f859 	bl	d2b0 <am_util_stdio_printf>
        "\n");

    //
    // Give the above print statements time to complete.
    //
    am_util_delay_ms(10);
    c1fe:	200a      	movs	r0, #10
    c200:	f000 f850 	bl	c2a4 <am_util_delay_ms>

    //
    // Enable the Apollo3 Fault detection.
    //
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    c204:	2100      	movs	r1, #0
    c206:	2000      	movs	r0, #0
    c208:	f001 fc9e 	bl	db48 <am_hal_mcuctrl_control>
    //
    // Force an invalid memory address fault.
    // This function will not return, so anything after it
    //  will not be executed.
    //
    force_fault();
    c20c:	f7ff ffc8 	bl	c1a0 <force_fault>

    //
    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c210:	f001 f890 	bl	d334 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c214:	2001      	movs	r0, #1
    c216:	f001 fe05 	bl	de24 <am_hal_sysctrl_sleep>
    c21a:	e7fb      	b.n	c214 <main+0x50>
    c21c:	0000e52c 	.word	0x0000e52c
    c220:	0000e080 	.word	0x0000e080
    c224:	0000e090 	.word	0x0000e090
    c228:	0000e10c 	.word	0x0000e10c
    c22c:	0000e1ec 	.word	0x0000e1ec

0000c230 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c230:	4811      	ldr	r0, [pc, #68]	; (c278 <zero_loop+0x12>)
    c232:	4912      	ldr	r1, [pc, #72]	; (c27c <zero_loop+0x16>)
    c234:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c236:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c23a:	4811      	ldr	r0, [pc, #68]	; (c280 <zero_loop+0x1a>)
    c23c:	6801      	ldr	r1, [r0, #0]
    c23e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c242:	6001      	str	r1, [r0, #0]
    c244:	f3bf 8f4f 	dsb	sy
    c248:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c24c:	480d      	ldr	r0, [pc, #52]	; (c284 <zero_loop+0x1e>)
    c24e:	490e      	ldr	r1, [pc, #56]	; (c288 <zero_loop+0x22>)
    c250:	4a0e      	ldr	r2, [pc, #56]	; (c28c <zero_loop+0x26>)

0000c252 <copy_loop>:
    c252:	f850 3b04 	ldr.w	r3, [r0], #4
    c256:	f841 3b04 	str.w	r3, [r1], #4
    c25a:	4291      	cmp	r1, r2
    c25c:	dbf9      	blt.n	c252 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c25e:	480c      	ldr	r0, [pc, #48]	; (c290 <zero_loop+0x2a>)
    c260:	490c      	ldr	r1, [pc, #48]	; (c294 <zero_loop+0x2e>)
    c262:	f04f 0200 	mov.w	r2, #0

0000c266 <zero_loop>:
    c266:	4288      	cmp	r0, r1
    c268:	bfb8      	it	lt
    c26a:	f840 2b04 	strlt.w	r2, [r0], #4
    c26e:	dbfa      	blt.n	c266 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c270:	f7ff ffa8 	bl	c1c4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c274:	be00      	bkpt	0x0000
}
    c276:	bf00      	nop
    c278:	e000ed08 	.word	0xe000ed08
    c27c:	0000c000 	.word	0x0000c000
    c280:	e000ed88 	.word	0xe000ed88
    c284:	0000e7cc 	.word	0x0000e7cc
    c288:	10001000 	.word	0x10001000
    c28c:	10001000 	.word	0x10001000
    c290:	10001000 	.word	0x10001000
    c294:	10001110 	.word	0x10001110

0000c298 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c298:	b480      	push	{r7}
    c29a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c29c:	e7fe      	b.n	c29c <NMI_Handler+0x4>

0000c29e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c29e:	b480      	push	{r7}
    c2a0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c2a2:	e7fe      	b.n	c2a2 <DebugMon_Handler+0x4>

0000c2a4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c2a4:	b580      	push	{r7, lr}
    c2a6:	b088      	sub	sp, #32
    c2a8:	af00      	add	r7, sp, #0
    c2aa:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c2ac:	f107 030c 	add.w	r3, r7, #12
    c2b0:	4618      	mov	r0, r3
    c2b2:	f001 f925 	bl	d500 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c2b6:	68fb      	ldr	r3, [r7, #12]
    c2b8:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c2ba:	69fb      	ldr	r3, [r7, #28]
    c2bc:	4a07      	ldr	r2, [pc, #28]	; (c2dc <am_util_delay_ms+0x38>)
    c2be:	fba2 2303 	umull	r2, r3, r2, r3
    c2c2:	099b      	lsrs	r3, r3, #6
    c2c4:	687a      	ldr	r2, [r7, #4]
    c2c6:	fb02 f303 	mul.w	r3, r2, r3
    c2ca:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c2cc:	69b8      	ldr	r0, [r7, #24]
    c2ce:	f001 f935 	bl	d53c <am_hal_flash_delay>
}
    c2d2:	bf00      	nop
    c2d4:	3720      	adds	r7, #32
    c2d6:	46bd      	mov	sp, r7
    c2d8:	bd80      	pop	{r7, pc}
    c2da:	bf00      	nop
    c2dc:	057619f1 	.word	0x057619f1

0000c2e0 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c2e0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c2e2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c2e4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c2e6:	f000 f809 	bl	c2fc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c2ea:	bd01      	pop	{r0, pc}
}
    c2ec:	bf00      	nop
    c2ee:	4618      	mov	r0, r3

0000c2f0 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c2f0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c2f2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c2f4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c2f6:	4770      	bx	lr
}
    c2f8:	bf00      	nop
    c2fa:	4618      	mov	r0, r3

0000c2fc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b096      	sub	sp, #88	; 0x58
    c300:	af00      	add	r7, sp, #0
    c302:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c304:	f107 030c 	add.w	r3, r7, #12
    c308:	2200      	movs	r2, #0
    c30a:	601a      	str	r2, [r3, #0]
    c30c:	605a      	str	r2, [r3, #4]
    c30e:	609a      	str	r2, [r3, #8]
    c310:	60da      	str	r2, [r3, #12]
    c312:	611a      	str	r2, [r3, #16]
    c314:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c316:	2300      	movs	r3, #0
    c318:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c31c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c31e:	4b85      	ldr	r3, [pc, #532]	; (c534 <am_util_faultisr_collect_data+0x238>)
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c326:	b2db      	uxtb	r3, r3
    c328:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c32e:	0a1b      	lsrs	r3, r3, #8
    c330:	b2db      	uxtb	r3, r3
    c332:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c338:	0c1b      	lsrs	r3, r3, #16
    c33a:	b29b      	uxth	r3, r3
    c33c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c340:	4b7d      	ldr	r3, [pc, #500]	; (c538 <am_util_faultisr_collect_data+0x23c>)
    c342:	681b      	ldr	r3, [r3, #0]
    c344:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c346:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c34a:	b2db      	uxtb	r3, r3
    c34c:	f003 0302 	and.w	r3, r3, #2
    c350:	2b00      	cmp	r3, #0
    c352:	d005      	beq.n	c360 <am_util_faultisr_collect_data+0x64>
    c354:	6879      	ldr	r1, [r7, #4]
    c356:	2006      	movs	r0, #6
    c358:	f7ff ffca 	bl	c2f0 <getStackedReg>
    c35c:	4603      	mov	r3, r0
    c35e:	e001      	b.n	c364 <am_util_faultisr_collect_data+0x68>
    c360:	f04f 33ff 	mov.w	r3, #4294967295
    c364:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c366:	6879      	ldr	r1, [r7, #4]
    c368:	2000      	movs	r0, #0
    c36a:	f7ff ffc1 	bl	c2f0 <getStackedReg>
    c36e:	4603      	mov	r3, r0
    c370:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c372:	6879      	ldr	r1, [r7, #4]
    c374:	2001      	movs	r0, #1
    c376:	f7ff ffbb 	bl	c2f0 <getStackedReg>
    c37a:	4603      	mov	r3, r0
    c37c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c37e:	6879      	ldr	r1, [r7, #4]
    c380:	2002      	movs	r0, #2
    c382:	f7ff ffb5 	bl	c2f0 <getStackedReg>
    c386:	4603      	mov	r3, r0
    c388:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c38a:	6879      	ldr	r1, [r7, #4]
    c38c:	2003      	movs	r0, #3
    c38e:	f7ff ffaf 	bl	c2f0 <getStackedReg>
    c392:	4603      	mov	r3, r0
    c394:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c396:	6879      	ldr	r1, [r7, #4]
    c398:	2004      	movs	r0, #4
    c39a:	f7ff ffa9 	bl	c2f0 <getStackedReg>
    c39e:	4603      	mov	r3, r0
    c3a0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3a2:	6879      	ldr	r1, [r7, #4]
    c3a4:	2005      	movs	r0, #5
    c3a6:	f7ff ffa3 	bl	c2f0 <getStackedReg>
    c3aa:	4603      	mov	r3, r0
    c3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3ae:	6879      	ldr	r1, [r7, #4]
    c3b0:	2006      	movs	r0, #6
    c3b2:	f7ff ff9d 	bl	c2f0 <getStackedReg>
    c3b6:	4603      	mov	r3, r0
    c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3ba:	6879      	ldr	r1, [r7, #4]
    c3bc:	2007      	movs	r0, #7
    c3be:	f7ff ff97 	bl	c2f0 <getStackedReg>
    c3c2:	4603      	mov	r3, r0
    c3c4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3c6:	f107 030c 	add.w	r3, r7, #12
    c3ca:	4619      	mov	r1, r3
    c3cc:	2002      	movs	r0, #2
    c3ce:	f001 fbe7 	bl	dba0 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    c3d2:	485a      	ldr	r0, [pc, #360]	; (c53c <am_util_faultisr_collect_data+0x240>)
    c3d4:	f000 ff6c 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    c3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3da:	4619      	mov	r1, r3
    c3dc:	4858      	ldr	r0, [pc, #352]	; (c540 <am_util_faultisr_collect_data+0x244>)
    c3de:	f000 ff67 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3e4:	4619      	mov	r1, r3
    c3e6:	4857      	ldr	r0, [pc, #348]	; (c544 <am_util_faultisr_collect_data+0x248>)
    c3e8:	f000 ff62 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3ee:	4619      	mov	r1, r3
    c3f0:	4855      	ldr	r0, [pc, #340]	; (c548 <am_util_faultisr_collect_data+0x24c>)
    c3f2:	f000 ff5d 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3f8:	4619      	mov	r1, r3
    c3fa:	4854      	ldr	r0, [pc, #336]	; (c54c <am_util_faultisr_collect_data+0x250>)
    c3fc:	f000 ff58 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    c400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c402:	4619      	mov	r1, r3
    c404:	4852      	ldr	r0, [pc, #328]	; (c550 <am_util_faultisr_collect_data+0x254>)
    c406:	f000 ff53 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c40c:	4619      	mov	r1, r3
    c40e:	4851      	ldr	r0, [pc, #324]	; (c554 <am_util_faultisr_collect_data+0x258>)
    c410:	f000 ff4e 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    c414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c416:	4619      	mov	r1, r3
    c418:	484f      	ldr	r0, [pc, #316]	; (c558 <am_util_faultisr_collect_data+0x25c>)
    c41a:	f000 ff49 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    c41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c420:	4619      	mov	r1, r3
    c422:	484e      	ldr	r0, [pc, #312]	; (c55c <am_util_faultisr_collect_data+0x260>)
    c424:	f000 ff44 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    c428:	484d      	ldr	r0, [pc, #308]	; (c560 <am_util_faultisr_collect_data+0x264>)
    c42a:	f000 ff41 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    c42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c430:	4619      	mov	r1, r3
    c432:	484c      	ldr	r0, [pc, #304]	; (c564 <am_util_faultisr_collect_data+0x268>)
    c434:	f000 ff3c 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    c438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c43a:	4619      	mov	r1, r3
    c43c:	484a      	ldr	r0, [pc, #296]	; (c568 <am_util_faultisr_collect_data+0x26c>)
    c43e:	f000 ff37 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    c442:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    c446:	b2db      	uxtb	r3, r3
    c448:	4619      	mov	r1, r3
    c44a:	4848      	ldr	r0, [pc, #288]	; (c56c <am_util_faultisr_collect_data+0x270>)
    c44c:	f000 ff30 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    c450:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c454:	b2db      	uxtb	r3, r3
    c456:	4619      	mov	r1, r3
    c458:	4845      	ldr	r0, [pc, #276]	; (c570 <am_util_faultisr_collect_data+0x274>)
    c45a:	f000 ff29 	bl	d2b0 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    c45e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    c462:	b29b      	uxth	r3, r3
    c464:	4619      	mov	r1, r3
    c466:	4843      	ldr	r0, [pc, #268]	; (c574 <am_util_faultisr_collect_data+0x278>)
    c468:	f000 ff22 	bl	d2b0 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    c46c:	2380      	movs	r3, #128	; 0x80
    c46e:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
    c470:	e03f      	b.n	c4f2 <am_util_faultisr_collect_data+0x1f6>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    c472:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c476:	b2db      	uxtb	r3, r3
    c478:	461a      	mov	r2, r3
    c47a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c47c:	4013      	ands	r3, r2
    c47e:	2b08      	cmp	r3, #8
    c480:	d024      	beq.n	c4cc <am_util_faultisr_collect_data+0x1d0>
    c482:	2b08      	cmp	r3, #8
    c484:	d806      	bhi.n	c494 <am_util_faultisr_collect_data+0x198>
    c486:	2b02      	cmp	r3, #2
    c488:	d028      	beq.n	c4dc <am_util_faultisr_collect_data+0x1e0>
    c48a:	2b04      	cmp	r3, #4
    c48c:	d022      	beq.n	c4d4 <am_util_faultisr_collect_data+0x1d8>
    c48e:	2b01      	cmp	r3, #1
    c490:	d028      	beq.n	c4e4 <am_util_faultisr_collect_data+0x1e8>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
    c492:	e02b      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
        switch (sFaultData.u8BFSR & u32Mask)
    c494:	2b20      	cmp	r3, #32
    c496:	d011      	beq.n	c4bc <am_util_faultisr_collect_data+0x1c0>
    c498:	2b20      	cmp	r3, #32
    c49a:	d802      	bhi.n	c4a2 <am_util_faultisr_collect_data+0x1a6>
    c49c:	2b10      	cmp	r3, #16
    c49e:	d011      	beq.n	c4c4 <am_util_faultisr_collect_data+0x1c8>
                break;
    c4a0:	e024      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
        switch (sFaultData.u8BFSR & u32Mask)
    c4a2:	2b40      	cmp	r3, #64	; 0x40
    c4a4:	d006      	beq.n	c4b4 <am_util_faultisr_collect_data+0x1b8>
    c4a6:	2b80      	cmp	r3, #128	; 0x80
    c4a8:	d000      	beq.n	c4ac <am_util_faultisr_collect_data+0x1b0>
                break;
    c4aa:	e01f      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    c4ac:	4832      	ldr	r0, [pc, #200]	; (c578 <am_util_faultisr_collect_data+0x27c>)
    c4ae:	f000 feff 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4b2:	e01b      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    c4b4:	4831      	ldr	r0, [pc, #196]	; (c57c <am_util_faultisr_collect_data+0x280>)
    c4b6:	f000 fefb 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4ba:	e017      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    c4bc:	4830      	ldr	r0, [pc, #192]	; (c580 <am_util_faultisr_collect_data+0x284>)
    c4be:	f000 fef7 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4c2:	e013      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    c4c4:	482f      	ldr	r0, [pc, #188]	; (c584 <am_util_faultisr_collect_data+0x288>)
    c4c6:	f000 fef3 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4ca:	e00f      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    c4cc:	482e      	ldr	r0, [pc, #184]	; (c588 <am_util_faultisr_collect_data+0x28c>)
    c4ce:	f000 feef 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4d2:	e00b      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    c4d4:	482d      	ldr	r0, [pc, #180]	; (c58c <am_util_faultisr_collect_data+0x290>)
    c4d6:	f000 feeb 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4da:	e007      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    c4dc:	482c      	ldr	r0, [pc, #176]	; (c590 <am_util_faultisr_collect_data+0x294>)
    c4de:	f000 fee7 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4e2:	e003      	b.n	c4ec <am_util_faultisr_collect_data+0x1f0>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    c4e4:	482b      	ldr	r0, [pc, #172]	; (c594 <am_util_faultisr_collect_data+0x298>)
    c4e6:	f000 fee3 	bl	d2b0 <am_util_stdio_printf>
                break;
    c4ea:	bf00      	nop
        }
        u32Mask >>= 1;
    c4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c4ee:	085b      	lsrs	r3, r3, #1
    c4f0:	657b      	str	r3, [r7, #84]	; 0x54
    while (u32Mask)
    c4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d1bc      	bne.n	c472 <am_util_faultisr_collect_data+0x176>
    }

    //
    // Print out any Apollo2 Internal fault information.
    //
    am_util_stdio_printf("Apollo2 Fault data:\n");
    c4f8:	4827      	ldr	r0, [pc, #156]	; (c598 <am_util_faultisr_collect_data+0x29c>)
    c4fa:	f000 fed9 	bl	d2b0 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    c4fe:	7b3b      	ldrb	r3, [r7, #12]
    c500:	2b00      	cmp	r3, #0
    c502:	d004      	beq.n	c50e <am_util_faultisr_collect_data+0x212>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    c504:	693b      	ldr	r3, [r7, #16]
    c506:	4619      	mov	r1, r3
    c508:	4824      	ldr	r0, [pc, #144]	; (c59c <am_util_faultisr_collect_data+0x2a0>)
    c50a:	f000 fed1 	bl	d2b0 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
    c50e:	7d3b      	ldrb	r3, [r7, #20]
    c510:	2b00      	cmp	r3, #0
    c512:	d004      	beq.n	c51e <am_util_faultisr_collect_data+0x222>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    c514:	69bb      	ldr	r3, [r7, #24]
    c516:	4619      	mov	r1, r3
    c518:	4821      	ldr	r0, [pc, #132]	; (c5a0 <am_util_faultisr_collect_data+0x2a4>)
    c51a:	f000 fec9 	bl	d2b0 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
    c51e:	7f3b      	ldrb	r3, [r7, #28]
    c520:	2b00      	cmp	r3, #0
    c522:	d004      	beq.n	c52e <am_util_faultisr_collect_data+0x232>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    c524:	6a3b      	ldr	r3, [r7, #32]
    c526:	4619      	mov	r1, r3
    c528:	481e      	ldr	r0, [pc, #120]	; (c5a4 <am_util_faultisr_collect_data+0x2a8>)
    c52a:	f000 fec1 	bl	d2b0 <am_util_stdio_printf>
    }


#endif

    u32Mask = 0;
    c52e:	2300      	movs	r3, #0
    c530:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c532:	e7fe      	b.n	c532 <am_util_faultisr_collect_data+0x236>
    c534:	e000ed28 	.word	0xe000ed28
    c538:	e000ed38 	.word	0xe000ed38
    c53c:	0000e208 	.word	0x0000e208
    c540:	0000e224 	.word	0x0000e224
    c544:	0000e238 	.word	0x0000e238
    c548:	0000e24c 	.word	0x0000e24c
    c54c:	0000e260 	.word	0x0000e260
    c550:	0000e274 	.word	0x0000e274
    c554:	0000e288 	.word	0x0000e288
    c558:	0000e29c 	.word	0x0000e29c
    c55c:	0000e2b0 	.word	0x0000e2b0
    c560:	0000e2c4 	.word	0x0000e2c4
    c564:	0000e2dc 	.word	0x0000e2dc
    c568:	0000e2f8 	.word	0x0000e2f8
    c56c:	0000e320 	.word	0x0000e320
    c570:	0000e350 	.word	0x0000e350
    c574:	0000e37c 	.word	0x0000e37c
    c578:	0000e3a8 	.word	0x0000e3a8
    c57c:	0000e3c8 	.word	0x0000e3c8
    c580:	0000e3e8 	.word	0x0000e3e8
    c584:	0000e404 	.word	0x0000e404
    c588:	0000e420 	.word	0x0000e420
    c58c:	0000e440 	.word	0x0000e440
    c590:	0000e460 	.word	0x0000e460
    c594:	0000e480 	.word	0x0000e480
    c598:	0000e49c 	.word	0x0000e49c
    c59c:	0000e4b4 	.word	0x0000e4b4
    c5a0:	0000e4d4 	.word	0x0000e4d4
    c5a4:	0000e4f4 	.word	0x0000e4f4

0000c5a8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c5a8:	b480      	push	{r7}
    c5aa:	b083      	sub	sp, #12
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c5b0:	4a04      	ldr	r2, [pc, #16]	; (c5c4 <am_util_stdio_printf_init+0x1c>)
    c5b2:	687b      	ldr	r3, [r7, #4]
    c5b4:	6013      	str	r3, [r2, #0]
}
    c5b6:	bf00      	nop
    c5b8:	370c      	adds	r7, #12
    c5ba:	46bd      	mov	sp, r7
    c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5c0:	4770      	bx	lr
    c5c2:	bf00      	nop
    c5c4:	1000110c 	.word	0x1000110c

0000c5c8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c5c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5cc:	b096      	sub	sp, #88	; 0x58
    c5ce:	af00      	add	r7, sp, #0
    c5d0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c5d4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c5d8:	0025      	movs	r5, r4
    c5da:	2600      	movs	r6, #0
    c5dc:	ea55 0306 	orrs.w	r3, r5, r6
    c5e0:	f000 80a0 	beq.w	c724 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c5e8:	0862      	lsrs	r2, r4, #1
    c5ea:	ea4f 0133 	mov.w	r1, r3, rrx
    c5ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c5f2:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c5f6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c5fa:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c5fe:	eb11 0308 	adds.w	r3, r1, r8
    c602:	eb42 0409 	adc.w	r4, r2, r9
    c606:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c60a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c60e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c612:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c616:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c61a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c61e:	eb13 030a 	adds.w	r3, r3, sl
    c622:	eb44 040b 	adc.w	r4, r4, fp
    c626:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c62a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c62e:	0a1a      	lsrs	r2, r3, #8
    c630:	62ba      	str	r2, [r7, #40]	; 0x28
    c632:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c638:	62ba      	str	r2, [r7, #40]	; 0x28
    c63a:	0a23      	lsrs	r3, r4, #8
    c63c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c63e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c642:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c646:	18c9      	adds	r1, r1, r3
    c648:	eb42 0204 	adc.w	r2, r2, r4
    c64c:	460b      	mov	r3, r1
    c64e:	4614      	mov	r4, r2
    c650:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c654:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c658:	0c1a      	lsrs	r2, r3, #16
    c65a:	623a      	str	r2, [r7, #32]
    c65c:	6a3a      	ldr	r2, [r7, #32]
    c65e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c662:	623a      	str	r2, [r7, #32]
    c664:	0c23      	lsrs	r3, r4, #16
    c666:	627b      	str	r3, [r7, #36]	; 0x24
    c668:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c66c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c670:	18c9      	adds	r1, r1, r3
    c672:	eb42 0204 	adc.w	r2, r2, r4
    c676:	460b      	mov	r3, r1
    c678:	4614      	mov	r4, r2
    c67a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c67e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c682:	0023      	movs	r3, r4
    c684:	603b      	str	r3, [r7, #0]
    c686:	2300      	movs	r3, #0
    c688:	607b      	str	r3, [r7, #4]
    c68a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c68e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c692:	18c9      	adds	r1, r1, r3
    c694:	eb42 0204 	adc.w	r2, r2, r4
    c698:	460b      	mov	r3, r1
    c69a:	4614      	mov	r4, r2
    c69c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c6a0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6a4:	08da      	lsrs	r2, r3, #3
    c6a6:	613a      	str	r2, [r7, #16]
    c6a8:	693a      	ldr	r2, [r7, #16]
    c6aa:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c6ae:	613a      	str	r2, [r7, #16]
    c6b0:	08e3      	lsrs	r3, r4, #3
    c6b2:	617b      	str	r3, [r7, #20]
    c6b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c6b8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c6bc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c6c0:	460b      	mov	r3, r1
    c6c2:	4614      	mov	r4, r2
    c6c4:	00a0      	lsls	r0, r4, #2
    c6c6:	60f8      	str	r0, [r7, #12]
    c6c8:	68f8      	ldr	r0, [r7, #12]
    c6ca:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c6ce:	60f8      	str	r0, [r7, #12]
    c6d0:	009b      	lsls	r3, r3, #2
    c6d2:	60bb      	str	r3, [r7, #8]
    c6d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c6d8:	185b      	adds	r3, r3, r1
    c6da:	eb44 0402 	adc.w	r4, r4, r2
    c6de:	18db      	adds	r3, r3, r3
    c6e0:	eb44 0404 	adc.w	r4, r4, r4
    c6e4:	4619      	mov	r1, r3
    c6e6:	4622      	mov	r2, r4
    c6e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c6ec:	1a5b      	subs	r3, r3, r1
    c6ee:	eb64 0402 	sbc.w	r4, r4, r2
    c6f2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c6f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c6fa:	3306      	adds	r3, #6
    c6fc:	f144 0400 	adc.w	r4, r4, #0
    c700:	091a      	lsrs	r2, r3, #4
    c702:	61ba      	str	r2, [r7, #24]
    c704:	69ba      	ldr	r2, [r7, #24]
    c706:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c70a:	61ba      	str	r2, [r7, #24]
    c70c:	0923      	lsrs	r3, r4, #4
    c70e:	61fb      	str	r3, [r7, #28]
    c710:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c714:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c718:	18c9      	adds	r1, r1, r3
    c71a:	eb42 0204 	adc.w	r2, r2, r4
    c71e:	460b      	mov	r3, r1
    c720:	4614      	mov	r4, r2
    c722:	e029      	b.n	c778 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c726:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c72a:	085a      	lsrs	r2, r3, #1
    c72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c72e:	089b      	lsrs	r3, r3, #2
    c730:	4413      	add	r3, r2
    c732:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c736:	091b      	lsrs	r3, r3, #4
    c738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c73a:	4413      	add	r3, r2
    c73c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c740:	0a1b      	lsrs	r3, r3, #8
    c742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c744:	4413      	add	r3, r2
    c746:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c74a:	0c1b      	lsrs	r3, r3, #16
    c74c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c74e:	4413      	add	r3, r2
    c750:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c754:	08db      	lsrs	r3, r3, #3
    c756:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c75a:	4613      	mov	r3, r2
    c75c:	009b      	lsls	r3, r3, #2
    c75e:	4413      	add	r3, r2
    c760:	005b      	lsls	r3, r3, #1
    c762:	461a      	mov	r2, r3
    c764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c766:	1a9b      	subs	r3, r3, r2
    c768:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c76c:	3306      	adds	r3, #6
    c76e:	091a      	lsrs	r2, r3, #4
    c770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c772:	4413      	add	r3, r2
    c774:	f04f 0400 	mov.w	r4, #0
    }
}
    c778:	4618      	mov	r0, r3
    c77a:	4621      	mov	r1, r4
    c77c:	3758      	adds	r7, #88	; 0x58
    c77e:	46bd      	mov	sp, r7
    c780:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c784:	4770      	bx	lr

0000c786 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c786:	b590      	push	{r4, r7, lr}
    c788:	b085      	sub	sp, #20
    c78a:	af00      	add	r7, sp, #0
    c78c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c790:	683a      	ldr	r2, [r7, #0]
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	4313      	orrs	r3, r2
    c796:	2b00      	cmp	r3, #0
    c798:	bf0c      	ite	eq
    c79a:	2301      	moveq	r3, #1
    c79c:	2300      	movne	r3, #0
    c79e:	b2db      	uxtb	r3, r3
    c7a0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c7a2:	e008      	b.n	c7b6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c7a4:	e9d7 0100 	ldrd	r0, r1, [r7]
    c7a8:	f7ff ff0e 	bl	c5c8 <divu64_10>
    c7ac:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c7b0:	68fb      	ldr	r3, [r7, #12]
    c7b2:	3301      	adds	r3, #1
    c7b4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c7b6:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7ba:	4323      	orrs	r3, r4
    c7bc:	d1f2      	bne.n	c7a4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c7be:	68fb      	ldr	r3, [r7, #12]
}
    c7c0:	4618      	mov	r0, r3
    c7c2:	3714      	adds	r7, #20
    c7c4:	46bd      	mov	sp, r7
    c7c6:	bd90      	pop	{r4, r7, pc}

0000c7c8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c7c8:	b590      	push	{r4, r7, lr}
    c7ca:	b083      	sub	sp, #12
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c7d2:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	f174 0300 	sbcs.w	r3, r4, #0
    c7dc:	da06      	bge.n	c7ec <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c7de:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7e2:	425b      	negs	r3, r3
    c7e4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c7e8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c7ec:	e897 0018 	ldmia.w	r7, {r3, r4}
    c7f0:	4618      	mov	r0, r3
    c7f2:	4621      	mov	r1, r4
    c7f4:	f7ff ffc7 	bl	c786 <ndigits_in_u64>
    c7f8:	4603      	mov	r3, r0
}
    c7fa:	4618      	mov	r0, r3
    c7fc:	370c      	adds	r7, #12
    c7fe:	46bd      	mov	sp, r7
    c800:	bd90      	pop	{r4, r7, pc}

0000c802 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c802:	b490      	push	{r4, r7}
    c804:	b084      	sub	sp, #16
    c806:	af00      	add	r7, sp, #0
    c808:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c80c:	6839      	ldr	r1, [r7, #0]
    c80e:	687a      	ldr	r2, [r7, #4]
    c810:	430a      	orrs	r2, r1
    c812:	2a00      	cmp	r2, #0
    c814:	bf0c      	ite	eq
    c816:	2201      	moveq	r2, #1
    c818:	2200      	movne	r2, #0
    c81a:	b2d2      	uxtb	r2, r2
    c81c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c81e:	e00a      	b.n	c836 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c820:	e897 0006 	ldmia.w	r7, {r1, r2}
    c824:	090b      	lsrs	r3, r1, #4
    c826:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c82a:	0914      	lsrs	r4, r2, #4
    c82c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c830:	68fa      	ldr	r2, [r7, #12]
    c832:	3201      	adds	r2, #1
    c834:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c836:	e897 0006 	ldmia.w	r7, {r1, r2}
    c83a:	430a      	orrs	r2, r1
    c83c:	d1f0      	bne.n	c820 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c83e:	68fb      	ldr	r3, [r7, #12]
}
    c840:	4618      	mov	r0, r3
    c842:	3710      	adds	r7, #16
    c844:	46bd      	mov	sp, r7
    c846:	bc90      	pop	{r4, r7}
    c848:	4770      	bx	lr

0000c84a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c84a:	b480      	push	{r7}
    c84c:	b087      	sub	sp, #28
    c84e:	af00      	add	r7, sp, #0
    c850:	6078      	str	r0, [r7, #4]
    c852:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c854:	2300      	movs	r3, #0
    c856:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c858:	2300      	movs	r3, #0
    c85a:	613b      	str	r3, [r7, #16]
    c85c:	2300      	movs	r3, #0
    c85e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	781b      	ldrb	r3, [r3, #0]
    c864:	2b2d      	cmp	r3, #45	; 0x2d
    c866:	d11b      	bne.n	c8a0 <decstr_to_int+0x56>
    {
        bNeg = true;
    c868:	2301      	movs	r3, #1
    c86a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c86c:	687b      	ldr	r3, [r7, #4]
    c86e:	3301      	adds	r3, #1
    c870:	607b      	str	r3, [r7, #4]
        uCnt++;
    c872:	68fb      	ldr	r3, [r7, #12]
    c874:	3301      	adds	r3, #1
    c876:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c878:	e012      	b.n	c8a0 <decstr_to_int+0x56>
    {
        ++uCnt;
    c87a:	68fb      	ldr	r3, [r7, #12]
    c87c:	3301      	adds	r3, #1
    c87e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c880:	693a      	ldr	r2, [r7, #16]
    c882:	4613      	mov	r3, r2
    c884:	009b      	lsls	r3, r3, #2
    c886:	4413      	add	r3, r2
    c888:	005b      	lsls	r3, r3, #1
    c88a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c88c:	687b      	ldr	r3, [r7, #4]
    c88e:	781b      	ldrb	r3, [r3, #0]
    c890:	461a      	mov	r2, r3
    c892:	693b      	ldr	r3, [r7, #16]
    c894:	4413      	add	r3, r2
    c896:	3b30      	subs	r3, #48	; 0x30
    c898:	613b      	str	r3, [r7, #16]
        pcStr++;
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	3301      	adds	r3, #1
    c89e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	781b      	ldrb	r3, [r3, #0]
    c8a4:	2b2f      	cmp	r3, #47	; 0x2f
    c8a6:	d903      	bls.n	c8b0 <decstr_to_int+0x66>
    c8a8:	687b      	ldr	r3, [r7, #4]
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	2b39      	cmp	r3, #57	; 0x39
    c8ae:	d9e4      	bls.n	c87a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c8b0:	683b      	ldr	r3, [r7, #0]
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	d002      	beq.n	c8bc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c8b6:	683b      	ldr	r3, [r7, #0]
    c8b8:	68fa      	ldr	r2, [r7, #12]
    c8ba:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c8bc:	7dfb      	ldrb	r3, [r7, #23]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d002      	beq.n	c8c8 <decstr_to_int+0x7e>
    c8c2:	693b      	ldr	r3, [r7, #16]
    c8c4:	425b      	negs	r3, r3
    c8c6:	e000      	b.n	c8ca <decstr_to_int+0x80>
    c8c8:	693b      	ldr	r3, [r7, #16]
}
    c8ca:	4618      	mov	r0, r3
    c8cc:	371c      	adds	r7, #28
    c8ce:	46bd      	mov	sp, r7
    c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8d4:	4770      	bx	lr

0000c8d6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8d6:	b590      	push	{r4, r7, lr}
    c8d8:	b091      	sub	sp, #68	; 0x44
    c8da:	af00      	add	r7, sp, #0
    c8dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c8e0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c8e2:	2300      	movs	r3, #0
    c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c8e6:	2300      	movs	r3, #0
    c8e8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c8ee:	f7ff fe6b 	bl	c5c8 <divu64_10>
    c8f2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c8f6:	68b9      	ldr	r1, [r7, #8]
    c8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c8fa:	4613      	mov	r3, r2
    c8fc:	009b      	lsls	r3, r3, #2
    c8fe:	4413      	add	r3, r2
    c900:	005b      	lsls	r3, r3, #1
    c902:	1acb      	subs	r3, r1, r3
    c904:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c908:	1c5a      	adds	r2, r3, #1
    c90a:	63fa      	str	r2, [r7, #60]	; 0x3c
    c90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c90e:	b2d2      	uxtb	r2, r2
    c910:	3230      	adds	r2, #48	; 0x30
    c912:	b2d2      	uxtb	r2, r2
    c914:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c918:	440b      	add	r3, r1
    c91a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c91e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c922:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c926:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c92a:	4323      	orrs	r3, r4
    c92c:	d1dd      	bne.n	c8ea <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c930:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	2b00      	cmp	r3, #0
    c936:	d011      	beq.n	c95c <uint64_to_str+0x86>
    {
        while ( ix-- )
    c938:	e008      	b.n	c94c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c93a:	687b      	ldr	r3, [r7, #4]
    c93c:	1c5a      	adds	r2, r3, #1
    c93e:	607a      	str	r2, [r7, #4]
    c940:	f107 0110 	add.w	r1, r7, #16
    c944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c946:	440a      	add	r2, r1
    c948:	7812      	ldrb	r2, [r2, #0]
    c94a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c94e:	1e5a      	subs	r2, r3, #1
    c950:	63fa      	str	r2, [r7, #60]	; 0x3c
    c952:	2b00      	cmp	r3, #0
    c954:	d1f1      	bne.n	c93a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	2200      	movs	r2, #0
    c95a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c95e:	4618      	mov	r0, r3
    c960:	3744      	adds	r7, #68	; 0x44
    c962:	46bd      	mov	sp, r7
    c964:	bd90      	pop	{r4, r7, pc}

0000c966 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c966:	b4b0      	push	{r4, r5, r7}
    c968:	b08d      	sub	sp, #52	; 0x34
    c96a:	af00      	add	r7, sp, #0
    c96c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c970:	607a      	str	r2, [r7, #4]
    c972:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c974:	2300      	movs	r3, #0
    c976:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c97c:	4313      	orrs	r3, r2
    c97e:	d131      	bne.n	c9e4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c982:	1c5a      	adds	r2, r3, #1
    c984:	62fa      	str	r2, [r7, #44]	; 0x2c
    c986:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c98a:	4413      	add	r3, r2
    c98c:	2230      	movs	r2, #48	; 0x30
    c98e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c992:	e027      	b.n	c9e4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c994:	7a3b      	ldrb	r3, [r7, #8]
    c996:	f003 030f 	and.w	r3, r3, #15
    c99a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c99e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c9a2:	2b09      	cmp	r3, #9
    c9a4:	d90a      	bls.n	c9bc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c9a6:	78fb      	ldrb	r3, [r7, #3]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d001      	beq.n	c9b0 <uint64_to_hexstr+0x4a>
    c9ac:	2227      	movs	r2, #39	; 0x27
    c9ae:	e000      	b.n	c9b2 <uint64_to_hexstr+0x4c>
    c9b0:	2207      	movs	r2, #7
    c9b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c9b6:	4413      	add	r3, r2
    c9b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9be:	1c5a      	adds	r2, r3, #1
    c9c0:	62fa      	str	r2, [r7, #44]	; 0x2c
    c9c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c9c6:	3230      	adds	r2, #48	; 0x30
    c9c8:	b2d2      	uxtb	r2, r2
    c9ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c9ce:	440b      	add	r3, r1
    c9d0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c9d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c9d8:	0914      	lsrs	r4, r2, #4
    c9da:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c9de:	091d      	lsrs	r5, r3, #4
    c9e0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    c9e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c9e8:	4313      	orrs	r3, r2
    c9ea:	d1d3      	bne.n	c994 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9ee:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d011      	beq.n	ca1a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    c9f6:	e008      	b.n	ca0a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    c9f8:	687b      	ldr	r3, [r7, #4]
    c9fa:	1c5a      	adds	r2, r3, #1
    c9fc:	607a      	str	r2, [r7, #4]
    c9fe:	f107 0110 	add.w	r1, r7, #16
    ca02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca04:	440a      	add	r2, r1
    ca06:	7812      	ldrb	r2, [r2, #0]
    ca08:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca0c:	1e5a      	subs	r2, r3, #1
    ca0e:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca10:	2b00      	cmp	r3, #0
    ca12:	d1f1      	bne.n	c9f8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca14:	687b      	ldr	r3, [r7, #4]
    ca16:	2200      	movs	r2, #0
    ca18:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3734      	adds	r7, #52	; 0x34
    ca20:	46bd      	mov	sp, r7
    ca22:	bcb0      	pop	{r4, r5, r7}
    ca24:	4770      	bx	lr

0000ca26 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca26:	b480      	push	{r7}
    ca28:	b085      	sub	sp, #20
    ca2a:	af00      	add	r7, sp, #0
    ca2c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    ca2e:	2300      	movs	r3, #0
    ca30:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    ca32:	687b      	ldr	r3, [r7, #4]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d104      	bne.n	ca42 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    ca38:	68fb      	ldr	r3, [r7, #12]
    ca3a:	e009      	b.n	ca50 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca3c:	68fb      	ldr	r3, [r7, #12]
    ca3e:	3301      	adds	r3, #1
    ca40:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    ca42:	687b      	ldr	r3, [r7, #4]
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	607a      	str	r2, [r7, #4]
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d1f6      	bne.n	ca3c <simple_strlen+0x16>
    }
    return ui32RetVal;
    ca4e:	68fb      	ldr	r3, [r7, #12]
}
    ca50:	4618      	mov	r0, r3
    ca52:	3714      	adds	r7, #20
    ca54:	46bd      	mov	sp, r7
    ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca5a:	4770      	bx	lr

0000ca5c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ca5c:	b480      	push	{r7}
    ca5e:	b087      	sub	sp, #28
    ca60:	af00      	add	r7, sp, #0
    ca62:	60f8      	str	r0, [r7, #12]
    ca64:	460b      	mov	r3, r1
    ca66:	607a      	str	r2, [r7, #4]
    ca68:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    ca6a:	2300      	movs	r3, #0
    ca6c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	2b00      	cmp	r3, #0
    ca72:	dc0c      	bgt.n	ca8e <padbuffer+0x32>
    {
        return i32Cnt;
    ca74:	697b      	ldr	r3, [r7, #20]
    ca76:	e010      	b.n	ca9a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ca78:	68fb      	ldr	r3, [r7, #12]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d004      	beq.n	ca88 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ca7e:	68fb      	ldr	r3, [r7, #12]
    ca80:	1c5a      	adds	r2, r3, #1
    ca82:	60fa      	str	r2, [r7, #12]
    ca84:	7afa      	ldrb	r2, [r7, #11]
    ca86:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ca88:	697b      	ldr	r3, [r7, #20]
    ca8a:	3301      	adds	r3, #1
    ca8c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	1e5a      	subs	r2, r3, #1
    ca92:	607a      	str	r2, [r7, #4]
    ca94:	2b00      	cmp	r3, #0
    ca96:	d1ef      	bne.n	ca78 <padbuffer+0x1c>
    }

    return i32Cnt;
    ca98:	697b      	ldr	r3, [r7, #20]
}
    ca9a:	4618      	mov	r0, r3
    ca9c:	371c      	adds	r7, #28
    ca9e:	46bd      	mov	sp, r7
    caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    caa4:	4770      	bx	lr
	...

0000caa8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    caa8:	b590      	push	{r4, r7, lr}
    caaa:	b08f      	sub	sp, #60	; 0x3c
    caac:	af00      	add	r7, sp, #0
    caae:	60f8      	str	r0, [r7, #12]
    cab0:	60b9      	str	r1, [r7, #8]
    cab2:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cab4:	68bb      	ldr	r3, [r7, #8]
    cab6:	681b      	ldr	r3, [r3, #0]
    cab8:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cabc:	2b03      	cmp	r3, #3
    cabe:	dc02      	bgt.n	cac6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cac0:	f06f 0302 	mvn.w	r3, #2
    cac4:	e0e7      	b.n	cc96 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cac6:	edd7 7a03 	vldr	s15, [r7, #12]
    caca:	eef5 7a40 	vcmp.f32	s15, #0.0
    cace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cad2:	d104      	bne.n	cade <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cad4:	68bb      	ldr	r3, [r7, #8]
    cad6:	4a72      	ldr	r2, [pc, #456]	; (cca0 <ftoa+0x1f8>)
    cad8:	601a      	str	r2, [r3, #0]
        return 3;
    cada:	2303      	movs	r3, #3
    cadc:	e0db      	b.n	cc96 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cade:	68bb      	ldr	r3, [r7, #8]
    cae0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cae2:	68fb      	ldr	r3, [r7, #12]
    cae4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cae6:	693b      	ldr	r3, [r7, #16]
    cae8:	15db      	asrs	r3, r3, #23
    caea:	b2db      	uxtb	r3, r3
    caec:	3b7f      	subs	r3, #127	; 0x7f
    caee:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    caf0:	693b      	ldr	r3, [r7, #16]
    caf2:	f3c3 0316 	ubfx	r3, r3, #0, #23
    caf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cafa:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cafc:	2300      	movs	r3, #0
    cafe:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cb00:	2300      	movs	r3, #0
    cb02:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cb04:	69fb      	ldr	r3, [r7, #28]
    cb06:	2b1e      	cmp	r3, #30
    cb08:	dd02      	ble.n	cb10 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb0a:	f06f 0301 	mvn.w	r3, #1
    cb0e:	e0c2      	b.n	cc96 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cb10:	69fb      	ldr	r3, [r7, #28]
    cb12:	f113 0f17 	cmn.w	r3, #23
    cb16:	da02      	bge.n	cb1e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb18:	f04f 33ff 	mov.w	r3, #4294967295
    cb1c:	e0bb      	b.n	cc96 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cb1e:	69fb      	ldr	r3, [r7, #28]
    cb20:	2b16      	cmp	r3, #22
    cb22:	dd06      	ble.n	cb32 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb24:	69fb      	ldr	r3, [r7, #28]
    cb26:	3b17      	subs	r3, #23
    cb28:	69ba      	ldr	r2, [r7, #24]
    cb2a:	fa02 f303 	lsl.w	r3, r2, r3
    cb2e:	637b      	str	r3, [r7, #52]	; 0x34
    cb30:	e01a      	b.n	cb68 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cb32:	69fb      	ldr	r3, [r7, #28]
    cb34:	2b00      	cmp	r3, #0
    cb36:	db0f      	blt.n	cb58 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb38:	69fb      	ldr	r3, [r7, #28]
    cb3a:	f1c3 0317 	rsb	r3, r3, #23
    cb3e:	69ba      	ldr	r2, [r7, #24]
    cb40:	fa42 f303 	asr.w	r3, r2, r3
    cb44:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cb46:	69fb      	ldr	r3, [r7, #28]
    cb48:	3301      	adds	r3, #1
    cb4a:	69ba      	ldr	r2, [r7, #24]
    cb4c:	fa02 f303 	lsl.w	r3, r2, r3
    cb50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb54:	633b      	str	r3, [r7, #48]	; 0x30
    cb56:	e007      	b.n	cb68 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cb58:	69bb      	ldr	r3, [r7, #24]
    cb5a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cb5e:	69fb      	ldr	r3, [r7, #28]
    cb60:	43db      	mvns	r3, r3
    cb62:	fa42 f303 	asr.w	r3, r2, r3
    cb66:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cb68:	693b      	ldr	r3, [r7, #16]
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	da04      	bge.n	cb78 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cb6e:	68bb      	ldr	r3, [r7, #8]
    cb70:	1c5a      	adds	r2, r3, #1
    cb72:	60ba      	str	r2, [r7, #8]
    cb74:	222d      	movs	r2, #45	; 0x2d
    cb76:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d105      	bne.n	cb8a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cb7e:	68bb      	ldr	r3, [r7, #8]
    cb80:	1c5a      	adds	r2, r3, #1
    cb82:	60ba      	str	r2, [r7, #8]
    cb84:	2230      	movs	r2, #48	; 0x30
    cb86:	701a      	strb	r2, [r3, #0]
    cb88:	e021      	b.n	cbce <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cb8c:	2b00      	cmp	r3, #0
    cb8e:	dd08      	ble.n	cba2 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cb92:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cb96:	68ba      	ldr	r2, [r7, #8]
    cb98:	4618      	mov	r0, r3
    cb9a:	4621      	mov	r1, r4
    cb9c:	f7ff fe9b 	bl	c8d6 <uint64_to_str>
    cba0:	e011      	b.n	cbc6 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cba2:	68bb      	ldr	r3, [r7, #8]
    cba4:	1c5a      	adds	r2, r3, #1
    cba6:	60ba      	str	r2, [r7, #8]
    cba8:	222d      	movs	r2, #45	; 0x2d
    cbaa:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbae:	425b      	negs	r3, r3
    cbb0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cbb4:	68ba      	ldr	r2, [r7, #8]
    cbb6:	4618      	mov	r0, r3
    cbb8:	4621      	mov	r1, r4
    cbba:	f7ff fe8c 	bl	c8d6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cbbe:	e002      	b.n	cbc6 <ftoa+0x11e>
        {
            pcBuf++;
    cbc0:	68bb      	ldr	r3, [r7, #8]
    cbc2:	3301      	adds	r3, #1
    cbc4:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cbc6:	68bb      	ldr	r3, [r7, #8]
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d1f8      	bne.n	cbc0 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cbce:	68bb      	ldr	r3, [r7, #8]
    cbd0:	1c5a      	adds	r2, r3, #1
    cbd2:	60ba      	str	r2, [r7, #8]
    cbd4:	222e      	movs	r2, #46	; 0x2e
    cbd6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cbda:	2b00      	cmp	r3, #0
    cbdc:	d105      	bne.n	cbea <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cbde:	68bb      	ldr	r3, [r7, #8]
    cbe0:	1c5a      	adds	r2, r3, #1
    cbe2:	60ba      	str	r2, [r7, #8]
    cbe4:	2230      	movs	r2, #48	; 0x30
    cbe6:	701a      	strb	r2, [r3, #0]
    cbe8:	e04f      	b.n	cc8a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cbea:	68ba      	ldr	r2, [r7, #8]
    cbec:	6a3b      	ldr	r3, [r7, #32]
    cbee:	1ad3      	subs	r3, r2, r3
    cbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cbf2:	1ad3      	subs	r3, r2, r3
    cbf4:	3b01      	subs	r3, #1
    cbf6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cbf8:	697a      	ldr	r2, [r7, #20]
    cbfa:	687b      	ldr	r3, [r7, #4]
    cbfc:	4293      	cmp	r3, r2
    cbfe:	bfa8      	it	ge
    cc00:	4613      	movge	r3, r2
    cc02:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cc04:	2300      	movs	r3, #0
    cc06:	62bb      	str	r3, [r7, #40]	; 0x28
    cc08:	e015      	b.n	cc36 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cc0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc0c:	4613      	mov	r3, r2
    cc0e:	009b      	lsls	r3, r3, #2
    cc10:	4413      	add	r3, r2
    cc12:	005b      	lsls	r3, r3, #1
    cc14:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc16:	68bb      	ldr	r3, [r7, #8]
    cc18:	1c5a      	adds	r2, r3, #1
    cc1a:	60ba      	str	r2, [r7, #8]
    cc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc1e:	1612      	asrs	r2, r2, #24
    cc20:	b2d2      	uxtb	r2, r2
    cc22:	3230      	adds	r2, #48	; 0x30
    cc24:	b2d2      	uxtb	r2, r2
    cc26:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc2e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cc32:	3301      	adds	r3, #1
    cc34:	62bb      	str	r3, [r7, #40]	; 0x28
    cc36:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cc38:	697b      	ldr	r3, [r7, #20]
    cc3a:	429a      	cmp	r2, r3
    cc3c:	dbe5      	blt.n	cc0a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc40:	4613      	mov	r3, r2
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	4413      	add	r3, r2
    cc46:	005b      	lsls	r3, r3, #1
    cc48:	161b      	asrs	r3, r3, #24
    cc4a:	2b04      	cmp	r3, #4
    cc4c:	dd1d      	ble.n	cc8a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cc4e:	68bb      	ldr	r3, [r7, #8]
    cc50:	3b01      	subs	r3, #1
    cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc54:	e015      	b.n	cc82 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc58:	781b      	ldrb	r3, [r3, #0]
    cc5a:	2b2e      	cmp	r3, #46	; 0x2e
    cc5c:	d00e      	beq.n	cc7c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	2b39      	cmp	r3, #57	; 0x39
    cc64:	d103      	bne.n	cc6e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc68:	2230      	movs	r2, #48	; 0x30
    cc6a:	701a      	strb	r2, [r3, #0]
    cc6c:	e006      	b.n	cc7c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	3301      	adds	r3, #1
    cc74:	b2da      	uxtb	r2, r3
    cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc78:	701a      	strb	r2, [r3, #0]
                    break;
    cc7a:	e006      	b.n	cc8a <ftoa+0x1e2>
                }
                pcBuftmp--;
    cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc7e:	3b01      	subs	r3, #1
    cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc84:	6a3b      	ldr	r3, [r7, #32]
    cc86:	429a      	cmp	r2, r3
    cc88:	d2e5      	bcs.n	cc56 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cc8a:	68bb      	ldr	r3, [r7, #8]
    cc8c:	2200      	movs	r2, #0
    cc8e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cc90:	68ba      	ldr	r2, [r7, #8]
    cc92:	6a3b      	ldr	r3, [r7, #32]
    cc94:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cc96:	4618      	mov	r0, r3
    cc98:	373c      	adds	r7, #60	; 0x3c
    cc9a:	46bd      	mov	sp, r7
    cc9c:	bd90      	pop	{r4, r7, pc}
    cc9e:	bf00      	nop
    cca0:	00302e30 	.word	0x00302e30

0000cca4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cca4:	b590      	push	{r4, r7, lr}
    cca6:	b095      	sub	sp, #84	; 0x54
    cca8:	af00      	add	r7, sp, #0
    ccaa:	60f8      	str	r0, [r7, #12]
    ccac:	60b9      	str	r1, [r7, #8]
    ccae:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ccb0:	2300      	movs	r3, #0
    ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ccb4:	2300      	movs	r3, #0
    ccb6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    ccb8:	e2e3      	b.n	d282 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ccba:	2306      	movs	r3, #6
    ccbc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    ccbe:	68bb      	ldr	r3, [r7, #8]
    ccc0:	781b      	ldrb	r3, [r3, #0]
    ccc2:	2b25      	cmp	r3, #37	; 0x25
    ccc4:	d01f      	beq.n	cd06 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ccc6:	68fb      	ldr	r3, [r7, #12]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d015      	beq.n	ccf8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cccc:	68bb      	ldr	r3, [r7, #8]
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	2b0a      	cmp	r3, #10
    ccd2:	d10b      	bne.n	ccec <am_util_stdio_vsprintf+0x48>
    ccd4:	4bb1      	ldr	r3, [pc, #708]	; (cf9c <am_util_stdio_vsprintf+0x2f8>)
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d007      	beq.n	ccec <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	1c5a      	adds	r2, r3, #1
    cce0:	60fa      	str	r2, [r7, #12]
    cce2:	220d      	movs	r2, #13
    cce4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cce8:	3301      	adds	r3, #1
    ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    ccec:	68fb      	ldr	r3, [r7, #12]
    ccee:	1c5a      	adds	r2, r3, #1
    ccf0:	60fa      	str	r2, [r7, #12]
    ccf2:	68ba      	ldr	r2, [r7, #8]
    ccf4:	7812      	ldrb	r2, [r2, #0]
    ccf6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ccf8:	68bb      	ldr	r3, [r7, #8]
    ccfa:	3301      	adds	r3, #1
    ccfc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    ccfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd00:	3301      	adds	r3, #1
    cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cd04:	e2bd      	b.n	d282 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd06:	68bb      	ldr	r3, [r7, #8]
    cd08:	3301      	adds	r3, #1
    cd0a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cd0c:	2300      	movs	r3, #0
    cd0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cd12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cd16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd1a:	2320      	movs	r3, #32
    cd1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cd20:	68bb      	ldr	r3, [r7, #8]
    cd22:	781b      	ldrb	r3, [r3, #0]
    cd24:	2b30      	cmp	r3, #48	; 0x30
    cd26:	d105      	bne.n	cd34 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd28:	2330      	movs	r3, #48	; 0x30
    cd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cd2e:	68bb      	ldr	r3, [r7, #8]
    cd30:	3301      	adds	r3, #1
    cd32:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd34:	f107 0310 	add.w	r3, r7, #16
    cd38:	4619      	mov	r1, r3
    cd3a:	68b8      	ldr	r0, [r7, #8]
    cd3c:	f7ff fd85 	bl	c84a <decstr_to_int>
    cd40:	4603      	mov	r3, r0
    cd42:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cd44:	693b      	ldr	r3, [r7, #16]
    cd46:	68ba      	ldr	r2, [r7, #8]
    cd48:	4413      	add	r3, r2
    cd4a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cd4c:	68bb      	ldr	r3, [r7, #8]
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	2b73      	cmp	r3, #115	; 0x73
    cd52:	d005      	beq.n	cd60 <am_util_stdio_vsprintf+0xbc>
    cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd56:	2b00      	cmp	r3, #0
    cd58:	da02      	bge.n	cd60 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cd5c:	425b      	negs	r3, r3
    cd5e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cd60:	68bb      	ldr	r3, [r7, #8]
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	2b2e      	cmp	r3, #46	; 0x2e
    cd66:	d10e      	bne.n	cd86 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cd68:	68bb      	ldr	r3, [r7, #8]
    cd6a:	3301      	adds	r3, #1
    cd6c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd6e:	f107 0310 	add.w	r3, r7, #16
    cd72:	4619      	mov	r1, r3
    cd74:	68b8      	ldr	r0, [r7, #8]
    cd76:	f7ff fd68 	bl	c84a <decstr_to_int>
    cd7a:	4603      	mov	r3, r0
    cd7c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cd7e:	693b      	ldr	r3, [r7, #16]
    cd80:	68ba      	ldr	r2, [r7, #8]
    cd82:	4413      	add	r3, r2
    cd84:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cd86:	68bb      	ldr	r3, [r7, #8]
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	2b6c      	cmp	r3, #108	; 0x6c
    cd8c:	d10c      	bne.n	cda8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cd8e:	68bb      	ldr	r3, [r7, #8]
    cd90:	3301      	adds	r3, #1
    cd92:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd94:	68bb      	ldr	r3, [r7, #8]
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	2b6c      	cmp	r3, #108	; 0x6c
    cd9a:	d105      	bne.n	cda8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cd9c:	68bb      	ldr	r3, [r7, #8]
    cd9e:	3301      	adds	r3, #1
    cda0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cda2:	2301      	movs	r3, #1
    cda4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cda8:	68bb      	ldr	r3, [r7, #8]
    cdaa:	781b      	ldrb	r3, [r3, #0]
    cdac:	3b46      	subs	r3, #70	; 0x46
    cdae:	2b32      	cmp	r3, #50	; 0x32
    cdb0:	f200 8254 	bhi.w	d25c <am_util_stdio_vsprintf+0x5b8>
    cdb4:	a201      	add	r2, pc, #4	; (adr r2, cdbc <am_util_stdio_vsprintf+0x118>)
    cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cdba:	bf00      	nop
    cdbc:	0000d1e7 	.word	0x0000d1e7
    cdc0:	0000d25d 	.word	0x0000d25d
    cdc4:	0000d25d 	.word	0x0000d25d
    cdc8:	0000d25d 	.word	0x0000d25d
    cdcc:	0000d25d 	.word	0x0000d25d
    cdd0:	0000d25d 	.word	0x0000d25d
    cdd4:	0000d25d 	.word	0x0000d25d
    cdd8:	0000d25d 	.word	0x0000d25d
    cddc:	0000d25d 	.word	0x0000d25d
    cde0:	0000d25d 	.word	0x0000d25d
    cde4:	0000d25d 	.word	0x0000d25d
    cde8:	0000d25d 	.word	0x0000d25d
    cdec:	0000d25d 	.word	0x0000d25d
    cdf0:	0000d25d 	.word	0x0000d25d
    cdf4:	0000d25d 	.word	0x0000d25d
    cdf8:	0000d25d 	.word	0x0000d25d
    cdfc:	0000d25d 	.word	0x0000d25d
    ce00:	0000d25d 	.word	0x0000d25d
    ce04:	0000cf83 	.word	0x0000cf83
    ce08:	0000d25d 	.word	0x0000d25d
    ce0c:	0000d25d 	.word	0x0000d25d
    ce10:	0000d25d 	.word	0x0000d25d
    ce14:	0000d25d 	.word	0x0000d25d
    ce18:	0000d25d 	.word	0x0000d25d
    ce1c:	0000d25d 	.word	0x0000d25d
    ce20:	0000d25d 	.word	0x0000d25d
    ce24:	0000d25d 	.word	0x0000d25d
    ce28:	0000d25d 	.word	0x0000d25d
    ce2c:	0000d25d 	.word	0x0000d25d
    ce30:	0000ce89 	.word	0x0000ce89
    ce34:	0000d0af 	.word	0x0000d0af
    ce38:	0000d25d 	.word	0x0000d25d
    ce3c:	0000d1e7 	.word	0x0000d1e7
    ce40:	0000d25d 	.word	0x0000d25d
    ce44:	0000d25d 	.word	0x0000d25d
    ce48:	0000d0af 	.word	0x0000d0af
    ce4c:	0000d25d 	.word	0x0000d25d
    ce50:	0000d25d 	.word	0x0000d25d
    ce54:	0000d25d 	.word	0x0000d25d
    ce58:	0000d25d 	.word	0x0000d25d
    ce5c:	0000d25d 	.word	0x0000d25d
    ce60:	0000d25d 	.word	0x0000d25d
    ce64:	0000d25d 	.word	0x0000d25d
    ce68:	0000d25d 	.word	0x0000d25d
    ce6c:	0000d25d 	.word	0x0000d25d
    ce70:	0000ceaf 	.word	0x0000ceaf
    ce74:	0000d25d 	.word	0x0000d25d
    ce78:	0000d01d 	.word	0x0000d01d
    ce7c:	0000d25d 	.word	0x0000d25d
    ce80:	0000d25d 	.word	0x0000d25d
    ce84:	0000cf7d 	.word	0x0000cf7d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	1d1a      	adds	r2, r3, #4
    ce8c:	607a      	str	r2, [r7, #4]
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    ce94:	68fb      	ldr	r3, [r7, #12]
    ce96:	2b00      	cmp	r3, #0
    ce98:	d005      	beq.n	cea6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ce9a:	68fb      	ldr	r3, [r7, #12]
    ce9c:	1c5a      	adds	r2, r3, #1
    ce9e:	60fa      	str	r2, [r7, #12]
    cea0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cea4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cea8:	3301      	adds	r3, #1
    ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    ceac:	e1e6      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	1d1a      	adds	r2, r3, #4
    ceb2:	607a      	str	r2, [r7, #4]
    ceb4:	681b      	ldr	r3, [r3, #0]
    ceb6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ceb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    ceba:	f7ff fdb4 	bl	ca26 <simple_strlen>
    cebe:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cec2:	2b00      	cmp	r3, #0
    cec4:	dd2e      	ble.n	cf24 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ceca:	429a      	cmp	r2, r3
    cecc:	d22a      	bcs.n	cf24 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cece:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ced2:	1ad3      	subs	r3, r2, r3
    ced4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ced6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ceda:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cedc:	4619      	mov	r1, r3
    cede:	68f8      	ldr	r0, [r7, #12]
    cee0:	f7ff fdbc 	bl	ca5c <padbuffer>
    cee4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cee6:	68fb      	ldr	r3, [r7, #12]
    cee8:	2b00      	cmp	r3, #0
    ceea:	d001      	beq.n	cef0 <am_util_stdio_vsprintf+0x24c>
    ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceee:	e000      	b.n	cef2 <am_util_stdio_vsprintf+0x24e>
    cef0:	2300      	movs	r3, #0
    cef2:	68fa      	ldr	r2, [r7, #12]
    cef4:	4413      	add	r3, r2
    cef6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cefa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cefc:	4413      	add	r3, r2
    cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cf00:	2300      	movs	r3, #0
    cf02:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cf04:	e00e      	b.n	cf24 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d005      	beq.n	cf18 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cf0c:	68fb      	ldr	r3, [r7, #12]
    cf0e:	1c5a      	adds	r2, r3, #1
    cf10:	60fa      	str	r2, [r7, #12]
    cf12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cf14:	7812      	ldrb	r2, [r2, #0]
    cf16:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf1a:	3301      	adds	r3, #1
    cf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf20:	3301      	adds	r3, #1
    cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cf24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf26:	781b      	ldrb	r3, [r3, #0]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d1ec      	bne.n	cf06 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf2e:	2b00      	cmp	r3, #0
    cf30:	f000 81a1 	beq.w	d276 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf36:	425b      	negs	r3, r3
    cf38:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf3e:	429a      	cmp	r2, r3
    cf40:	f080 8199 	bcs.w	d276 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf44:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf48:	1ad3      	subs	r3, r2, r3
    cf4a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf50:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf52:	4619      	mov	r1, r3
    cf54:	68f8      	ldr	r0, [r7, #12]
    cf56:	f7ff fd81 	bl	ca5c <padbuffer>
    cf5a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d001      	beq.n	cf66 <am_util_stdio_vsprintf+0x2c2>
    cf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf64:	e000      	b.n	cf68 <am_util_stdio_vsprintf+0x2c4>
    cf66:	2300      	movs	r3, #0
    cf68:	68fa      	ldr	r2, [r7, #12]
    cf6a:	4413      	add	r3, r2
    cf6c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf72:	4413      	add	r3, r2
    cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cf76:	2300      	movs	r3, #0
    cf78:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    cf7a:	e17c      	b.n	d276 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    cf7c:	2301      	movs	r3, #1
    cf7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf86:	2b00      	cmp	r3, #0
    cf88:	d00a      	beq.n	cfa0 <am_util_stdio_vsprintf+0x2fc>
    cf8a:	687b      	ldr	r3, [r7, #4]
    cf8c:	3307      	adds	r3, #7
    cf8e:	f023 0307 	bic.w	r3, r3, #7
    cf92:	f103 0208 	add.w	r2, r3, #8
    cf96:	607a      	str	r2, [r7, #4]
    cf98:	cb18      	ldmia	r3, {r3, r4}
    cf9a:	e007      	b.n	cfac <am_util_stdio_vsprintf+0x308>
    cf9c:	10001100 	.word	0x10001100
                                      va_arg(pArgs, uint32_t);
    cfa0:	687b      	ldr	r3, [r7, #4]
    cfa2:	1d1a      	adds	r2, r3, #4
    cfa4:	607a      	str	r2, [r7, #4]
    cfa6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfa8:	f04f 0400 	mov.w	r4, #0
    cfac:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d01e      	beq.n	cff4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cfb6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cfba:	f7ff fc22 	bl	c802 <ndigits_in_hex>
    cfbe:	4602      	mov	r2, r0
    cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfc2:	1a9b      	subs	r3, r3, r2
    cfc4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfca:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfcc:	4619      	mov	r1, r3
    cfce:	68f8      	ldr	r0, [r7, #12]
    cfd0:	f7ff fd44 	bl	ca5c <padbuffer>
    cfd4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cfd6:	68fb      	ldr	r3, [r7, #12]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d001      	beq.n	cfe0 <am_util_stdio_vsprintf+0x33c>
    cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfde:	e000      	b.n	cfe2 <am_util_stdio_vsprintf+0x33e>
    cfe0:	2300      	movs	r3, #0
    cfe2:	68fa      	ldr	r2, [r7, #12]
    cfe4:	4413      	add	r3, r2
    cfe6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfec:	4413      	add	r3, r2
    cfee:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cff0:	2300      	movs	r3, #0
    cff2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cff4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cff8:	68fa      	ldr	r2, [r7, #12]
    cffa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cffe:	f7ff fcb2 	bl	c966 <uint64_to_hexstr>
    d002:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d004:	68fb      	ldr	r3, [r7, #12]
    d006:	2b00      	cmp	r3, #0
    d008:	d003      	beq.n	d012 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d00c:	68fa      	ldr	r2, [r7, #12]
    d00e:	4413      	add	r3, r2
    d010:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d016:	4413      	add	r3, r2
    d018:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d01a:	e12f      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d01c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d020:	2b00      	cmp	r3, #0
    d022:	d008      	beq.n	d036 <am_util_stdio_vsprintf+0x392>
    d024:	687b      	ldr	r3, [r7, #4]
    d026:	3307      	adds	r3, #7
    d028:	f023 0307 	bic.w	r3, r3, #7
    d02c:	f103 0208 	add.w	r2, r3, #8
    d030:	607a      	str	r2, [r7, #4]
    d032:	cb18      	ldmia	r3, {r3, r4}
    d034:	e005      	b.n	d042 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d036:	687b      	ldr	r3, [r7, #4]
    d038:	1d1a      	adds	r2, r3, #4
    d03a:	607a      	str	r2, [r7, #4]
    d03c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d03e:	f04f 0400 	mov.w	r4, #0
    d042:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d048:	2b00      	cmp	r3, #0
    d04a:	d01e      	beq.n	d08a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d04c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d050:	f7ff fb99 	bl	c786 <ndigits_in_u64>
    d054:	4602      	mov	r2, r0
    d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d058:	1a9b      	subs	r3, r3, r2
    d05a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d05c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d060:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d062:	4619      	mov	r1, r3
    d064:	68f8      	ldr	r0, [r7, #12]
    d066:	f7ff fcf9 	bl	ca5c <padbuffer>
    d06a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d06c:	68fb      	ldr	r3, [r7, #12]
    d06e:	2b00      	cmp	r3, #0
    d070:	d001      	beq.n	d076 <am_util_stdio_vsprintf+0x3d2>
    d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d074:	e000      	b.n	d078 <am_util_stdio_vsprintf+0x3d4>
    d076:	2300      	movs	r3, #0
    d078:	68fa      	ldr	r2, [r7, #12]
    d07a:	4413      	add	r3, r2
    d07c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d082:	4413      	add	r3, r2
    d084:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d086:	2300      	movs	r3, #0
    d088:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d08a:	68fa      	ldr	r2, [r7, #12]
    d08c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d090:	f7ff fc21 	bl	c8d6 <uint64_to_str>
    d094:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d096:	68fb      	ldr	r3, [r7, #12]
    d098:	2b00      	cmp	r3, #0
    d09a:	d003      	beq.n	d0a4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d09e:	68fa      	ldr	r2, [r7, #12]
    d0a0:	4413      	add	r3, r2
    d0a2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0a8:	4413      	add	r3, r2
    d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0ac:	e0e6      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d008      	beq.n	d0c8 <am_util_stdio_vsprintf+0x424>
    d0b6:	687b      	ldr	r3, [r7, #4]
    d0b8:	3307      	adds	r3, #7
    d0ba:	f023 0307 	bic.w	r3, r3, #7
    d0be:	f103 0208 	add.w	r2, r3, #8
    d0c2:	607a      	str	r2, [r7, #4]
    d0c4:	cb18      	ldmia	r3, {r3, r4}
    d0c6:	e005      	b.n	d0d4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d0c8:	687b      	ldr	r3, [r7, #4]
    d0ca:	1d1a      	adds	r2, r3, #4
    d0cc:	607a      	str	r2, [r7, #4]
    d0ce:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0d0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d0d4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d0d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	f174 0300 	sbcs.w	r3, r4, #0
    d0e2:	da0a      	bge.n	d0fa <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d0e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d0e8:	425b      	negs	r3, r3
    d0ea:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d0ee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d0f2:	2301      	movs	r3, #1
    d0f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d0f8:	e006      	b.n	d108 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d0fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d0fe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d102:	2300      	movs	r3, #0
    d104:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d10a:	2b00      	cmp	r3, #0
    d10c:	d04a      	beq.n	d1a4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d10e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d112:	4618      	mov	r0, r3
    d114:	4621      	mov	r1, r4
    d116:	f7ff fb57 	bl	c7c8 <ndigits_in_i64>
    d11a:	4602      	mov	r2, r0
    d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d11e:	1a9b      	subs	r3, r3, r2
    d120:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d122:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d126:	2b00      	cmp	r3, #0
    d128:	d011      	beq.n	d14e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d12c:	3b01      	subs	r3, #1
    d12e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d134:	2b30      	cmp	r3, #48	; 0x30
    d136:	d10a      	bne.n	d14e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d138:	68fb      	ldr	r3, [r7, #12]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d004      	beq.n	d148 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d13e:	68fb      	ldr	r3, [r7, #12]
    d140:	1c5a      	adds	r2, r3, #1
    d142:	60fa      	str	r2, [r7, #12]
    d144:	222d      	movs	r2, #45	; 0x2d
    d146:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d14a:	3301      	adds	r3, #1
    d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d152:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d154:	4619      	mov	r1, r3
    d156:	68f8      	ldr	r0, [r7, #12]
    d158:	f7ff fc80 	bl	ca5c <padbuffer>
    d15c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	2b00      	cmp	r3, #0
    d162:	d001      	beq.n	d168 <am_util_stdio_vsprintf+0x4c4>
    d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d166:	e000      	b.n	d16a <am_util_stdio_vsprintf+0x4c6>
    d168:	2300      	movs	r3, #0
    d16a:	68fa      	ldr	r2, [r7, #12]
    d16c:	4413      	add	r3, r2
    d16e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d174:	4413      	add	r3, r2
    d176:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d178:	2300      	movs	r3, #0
    d17a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d17c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d180:	2b00      	cmp	r3, #0
    d182:	d01e      	beq.n	d1c2 <am_util_stdio_vsprintf+0x51e>
    d184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d188:	2b20      	cmp	r3, #32
    d18a:	d11a      	bne.n	d1c2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d18c:	68fb      	ldr	r3, [r7, #12]
    d18e:	2b00      	cmp	r3, #0
    d190:	d004      	beq.n	d19c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d192:	68fb      	ldr	r3, [r7, #12]
    d194:	1c5a      	adds	r2, r3, #1
    d196:	60fa      	str	r2, [r7, #12]
    d198:	222d      	movs	r2, #45	; 0x2d
    d19a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d19e:	3301      	adds	r3, #1
    d1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    d1a2:	e00e      	b.n	d1c2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d1a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	d00a      	beq.n	d1c2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d1ac:	68fb      	ldr	r3, [r7, #12]
    d1ae:	2b00      	cmp	r3, #0
    d1b0:	d004      	beq.n	d1bc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d1b2:	68fb      	ldr	r3, [r7, #12]
    d1b4:	1c5a      	adds	r2, r3, #1
    d1b6:	60fa      	str	r2, [r7, #12]
    d1b8:	222d      	movs	r2, #45	; 0x2d
    d1ba:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1be:	3301      	adds	r3, #1
    d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1c2:	68fa      	ldr	r2, [r7, #12]
    d1c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d1c8:	f7ff fb85 	bl	c8d6 <uint64_to_str>
    d1cc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d1ce:	68fb      	ldr	r3, [r7, #12]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d003      	beq.n	d1dc <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1d6:	68fa      	ldr	r2, [r7, #12]
    d1d8:	4413      	add	r3, r2
    d1da:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1e0:	4413      	add	r3, r2
    d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d1e4:	e04a      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d1e6:	68fb      	ldr	r3, [r7, #12]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	d046      	beq.n	d27a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d1ec:	687b      	ldr	r3, [r7, #4]
    d1ee:	3307      	adds	r3, #7
    d1f0:	f023 0307 	bic.w	r3, r3, #7
    d1f4:	f103 0208 	add.w	r2, r3, #8
    d1f8:	607a      	str	r2, [r7, #4]
    d1fa:	cb18      	ldmia	r3, {r3, r4}
    d1fc:	4618      	mov	r0, r3
    d1fe:	4621      	mov	r1, r4
    d200:	f7fe ff7e 	bl	c100 <__aeabi_d2f>
    d204:	4603      	mov	r3, r0
    d206:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d208:	68fb      	ldr	r3, [r7, #12]
    d20a:	2214      	movs	r2, #20
    d20c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d210:	68f9      	ldr	r1, [r7, #12]
    d212:	6978      	ldr	r0, [r7, #20]
    d214:	f7ff fc48 	bl	caa8 <ftoa>
    d218:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d21c:	2b00      	cmp	r3, #0
    d21e:	da14      	bge.n	d24a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d222:	f1b3 3fff 	cmp.w	r3, #4294967295
    d226:	d102      	bne.n	d22e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d228:	4b1e      	ldr	r3, [pc, #120]	; (d2a4 <am_util_stdio_vsprintf+0x600>)
    d22a:	62bb      	str	r3, [r7, #40]	; 0x28
    d22c:	e008      	b.n	d240 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d230:	f113 0f02 	cmn.w	r3, #2
    d234:	d102      	bne.n	d23c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d236:	4b1c      	ldr	r3, [pc, #112]	; (d2a8 <am_util_stdio_vsprintf+0x604>)
    d238:	62bb      	str	r3, [r7, #40]	; 0x28
    d23a:	e001      	b.n	d240 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d23c:	4b1b      	ldr	r3, [pc, #108]	; (d2ac <am_util_stdio_vsprintf+0x608>)
    d23e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d244:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d246:	2303      	movs	r3, #3
    d248:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d24c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d24e:	4413      	add	r3, r2
    d250:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d254:	68fa      	ldr	r2, [r7, #12]
    d256:	4413      	add	r3, r2
    d258:	60fb      	str	r3, [r7, #12]
                }
                break;
    d25a:	e00e      	b.n	d27a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d25c:	68fb      	ldr	r3, [r7, #12]
    d25e:	2b00      	cmp	r3, #0
    d260:	d005      	beq.n	d26e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d262:	68fb      	ldr	r3, [r7, #12]
    d264:	1c5a      	adds	r2, r3, #1
    d266:	60fa      	str	r2, [r7, #12]
    d268:	68ba      	ldr	r2, [r7, #8]
    d26a:	7812      	ldrb	r2, [r2, #0]
    d26c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d270:	3301      	adds	r3, #1
    d272:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d274:	e002      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>
                break;
    d276:	bf00      	nop
    d278:	e000      	b.n	d27c <am_util_stdio_vsprintf+0x5d8>
                break;
    d27a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d27c:	68bb      	ldr	r3, [r7, #8]
    d27e:	3301      	adds	r3, #1
    d280:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d282:	68bb      	ldr	r3, [r7, #8]
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	2b00      	cmp	r3, #0
    d288:	f47f ad17 	bne.w	ccba <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d28c:	68fb      	ldr	r3, [r7, #12]
    d28e:	2b00      	cmp	r3, #0
    d290:	d002      	beq.n	d298 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d292:	68fb      	ldr	r3, [r7, #12]
    d294:	2200      	movs	r2, #0
    d296:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d29a:	4618      	mov	r0, r3
    d29c:	3754      	adds	r7, #84	; 0x54
    d29e:	46bd      	mov	sp, r7
    d2a0:	bd90      	pop	{r4, r7, pc}
    d2a2:	bf00      	nop
    d2a4:	00302e30 	.word	0x00302e30
    d2a8:	00232e23 	.word	0x00232e23
    d2ac:	003f2e3f 	.word	0x003f2e3f

0000d2b0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2b0:	b40f      	push	{r0, r1, r2, r3}
    d2b2:	b580      	push	{r7, lr}
    d2b4:	b082      	sub	sp, #8
    d2b6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2b8:	f107 0314 	add.w	r3, r7, #20
    d2bc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2be:	683a      	ldr	r2, [r7, #0]
    d2c0:	6939      	ldr	r1, [r7, #16]
    d2c2:	4808      	ldr	r0, [pc, #32]	; (d2e4 <am_util_stdio_printf+0x34>)
    d2c4:	f7ff fcee 	bl	cca4 <am_util_stdio_vsprintf>
    d2c8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2ca:	4b07      	ldr	r3, [pc, #28]	; (d2e8 <am_util_stdio_printf+0x38>)
    d2cc:	681b      	ldr	r3, [r3, #0]
    d2ce:	4805      	ldr	r0, [pc, #20]	; (d2e4 <am_util_stdio_printf+0x34>)
    d2d0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d2d2:	687b      	ldr	r3, [r7, #4]
}
    d2d4:	4618      	mov	r0, r3
    d2d6:	3708      	adds	r7, #8
    d2d8:	46bd      	mov	sp, r7
    d2da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d2de:	b004      	add	sp, #16
    d2e0:	4770      	bx	lr
    d2e2:	bf00      	nop
    d2e4:	10001000 	.word	0x10001000
    d2e8:	1000110c 	.word	0x1000110c

0000d2ec <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d2ec:	b580      	push	{r7, lr}
    d2ee:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2f0:	4802      	ldr	r0, [pc, #8]	; (d2fc <am_util_stdio_terminal_clear+0x10>)
    d2f2:	f7ff ffdd 	bl	d2b0 <am_util_stdio_printf>
}
    d2f6:	bf00      	nop
    d2f8:	bd80      	pop	{r7, pc}
    d2fa:	bf00      	nop
    d2fc:	0000e514 	.word	0x0000e514

0000d300 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d300:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d302:	f000 fbb3 	bl	da6c <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d306:	2000      	movs	r0, #0
    d308:	f7ff f94e 	bl	c5a8 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d30c:	4b08      	ldr	r3, [pc, #32]	; (d330 <am_bsp_low_power_init+0x30>)
    d30e:	2029      	movs	r0, #41	; 0x29
    d310:	6819      	ldr	r1, [r3, #0]
    d312:	f000 fa43 	bl	d79c <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d316:	f000 fd31 	bl	dd7c <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d31a:	2001      	movs	r0, #1
    d31c:	f000 fd6c 	bl	ddf8 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d320:	2100      	movs	r1, #0
    d322:	2003      	movs	r0, #3
    d324:	f000 f890 	bl	d448 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d32c:	f000 bd70 	b.w	de10 <am_hal_rtc_osc_disable>
    d330:	0000e530 	.word	0x0000e530

0000d334 <am_bsp_debug_printf_disable>:
{
    d334:	b538      	push	{r3, r4, r5, lr}
    if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_SWO)
    d336:	4b17      	ldr	r3, [pc, #92]	; (d394 <am_bsp_debug_printf_disable+0x60>)
    d338:	681c      	ldr	r4, [r3, #0]
    d33a:	2c01      	cmp	r4, #1
    d33c:	d01d      	beq.n	d37a <am_bsp_debug_printf_disable+0x46>
    else if (g_ui32PrintInterface == AM_BSP_PRINT_INFC_UART0)
    d33e:	2c02      	cmp	r4, #2
    d340:	d000      	beq.n	d344 <am_bsp_debug_printf_disable+0x10>
    d342:	bd38      	pop	{r3, r4, r5, pc}
am_bsp_uart_printf_disable(void)
{
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d344:	4d14      	ldr	r5, [pc, #80]	; (d398 <am_bsp_debug_printf_disable+0x64>)
    d346:	6828      	ldr	r0, [r5, #0]
    d348:	f000 fe68 	bl	e01c <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d34c:	2000      	movs	r0, #0
    d34e:	f7ff f92b 	bl	c5a8 <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d352:	4621      	mov	r1, r4
    d354:	2200      	movs	r2, #0
    d356:	6828      	ldr	r0, [r5, #0]
    d358:	f000 fdee 	bl	df38 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d35c:	6828      	ldr	r0, [r5, #0]
    d35e:	f000 fdd7 	bl	df10 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d362:	480e      	ldr	r0, [pc, #56]	; (d39c <am_bsp_debug_printf_disable+0x68>)
    d364:	6804      	ldr	r4, [r0, #0]
    d366:	2027      	movs	r0, #39	; 0x27
    d368:	4621      	mov	r1, r4
    d36a:	f000 fa17 	bl	d79c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d36e:	4621      	mov	r1, r4
    d370:	2028      	movs	r0, #40	; 0x28
} // am_bsp_debug_printf_disable()
    d372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d376:	f000 ba11 	b.w	d79c <am_hal_gpio_pinconfig>
    am_hal_itm_disable();
    d37a:	f000 fb77 	bl	da6c <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d37e:	2000      	movs	r0, #0
    d380:	f7ff f912 	bl	c5a8 <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d384:	4905      	ldr	r1, [pc, #20]	; (d39c <am_bsp_debug_printf_disable+0x68>)
    d386:	2029      	movs	r0, #41	; 0x29
    d388:	6809      	ldr	r1, [r1, #0]
} // am_bsp_debug_printf_disable()
    d38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d38e:	f000 ba05 	b.w	d79c <am_hal_gpio_pinconfig>
    d392:	bf00      	nop
    d394:	10001108 	.word	0x10001108
    d398:	10001104 	.word	0x10001104
    d39c:	0000e530 	.word	0x0000e530

0000d3a0 <am_bsp_itm_printf_enable>:
{
    d3a0:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d3a2:	4b0b      	ldr	r3, [pc, #44]	; (d3d0 <am_bsp_itm_printf_enable+0x30>)
{
    d3a4:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d3a6:	2201      	movs	r2, #1
    d3a8:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d3aa:	f000 fb41 	bl	da30 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d3ae:	a806      	add	r0, sp, #24
    d3b0:	4908      	ldr	r1, [pc, #32]	; (d3d4 <am_bsp_itm_printf_enable+0x34>)
    d3b2:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d3b6:	f000 fd59 	bl	de6c <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d3ba:	4b07      	ldr	r3, [pc, #28]	; (d3d8 <am_bsp_itm_printf_enable+0x38>)
    d3bc:	2029      	movs	r0, #41	; 0x29
    d3be:	6819      	ldr	r1, [r3, #0]
    d3c0:	f000 f9ec 	bl	d79c <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d3c4:	4805      	ldr	r0, [pc, #20]	; (d3dc <am_bsp_itm_printf_enable+0x3c>)
    d3c6:	f7ff f8ef 	bl	c5a8 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d3ca:	b007      	add	sp, #28
    d3cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d3d0:	10001108 	.word	0x10001108
    d3d4:	000f4240 	.word	0x000f4240
    d3d8:	0000e528 	.word	0x0000e528
    d3dc:	0000db15 	.word	0x0000db15

0000d3e0 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d3e0:	b530      	push	{r4, r5, lr}
    d3e2:	b083      	sub	sp, #12
    d3e4:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d3e6:	f000 fb1b 	bl	da20 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d3ea:	4c11      	ldr	r4, [pc, #68]	; (d430 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d3ec:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d3ee:	6823      	ldr	r3, [r4, #0]
    d3f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d3f4:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d3f6:	9801      	ldr	r0, [sp, #4]
    d3f8:	f000 fb16 	bl	da28 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d3fc:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d3fe:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d400:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d402:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d404:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d406:	005d      	lsls	r5, r3, #1
    d408:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d40c:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d40e:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d410:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d414:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d416:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d41a:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d41e:	0212      	lsls	r2, r2, #8
    d420:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d424:	432b      	orrs	r3, r5
    d426:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d428:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d42a:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d42c:	b003      	add	sp, #12
    d42e:	bd30      	pop	{r4, r5, pc}
    d430:	40018000 	.word	0x40018000

0000d434 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d434:	4a03      	ldr	r2, [pc, #12]	; (d444 <am_hal_cachectrl_enable+0x10>)
    d436:	6813      	ldr	r3, [r2, #0]
    d438:	f043 0001 	orr.w	r0, r3, #1
    d43c:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d43e:	2000      	movs	r0, #0
    d440:	4770      	bx	lr
    d442:	bf00      	nop
    d444:	40018000 	.word	0x40018000

0000d448 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d448:	2809      	cmp	r0, #9
    d44a:	d852      	bhi.n	d4f2 <am_hal_clkgen_control+0xaa>
    d44c:	e8df f000 	tbb	[pc, r0]
    d450:	2b21190d 	.word	0x2b21190d
    d454:	51513d33 	.word	0x51513d33
    d458:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d45a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d45e:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d460:	6a1a      	ldr	r2, [r3, #32]
    d462:	f36f 0200 	bfc	r2, #0, #1
    d466:	621a      	str	r2, [r3, #32]
            break;
    d468:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d46a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d46e:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d470:	2047      	movs	r0, #71	; 0x47
    d472:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d476:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d47a:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d47c:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d480:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d482:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d486:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d488:	68ca      	ldr	r2, [r1, #12]
    d48a:	f022 0301 	bic.w	r3, r2, #1
    d48e:	60cb      	str	r3, [r1, #12]
            break;
    d490:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d492:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d496:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d498:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d49c:	f022 0302 	bic.w	r3, r2, #2
    d4a0:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d4a4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d4a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4aa:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d4ac:	68d3      	ldr	r3, [r2, #12]
    d4ae:	f043 0101 	orr.w	r1, r3, #1
    d4b2:	60d1      	str	r1, [r2, #12]
            break;
    d4b4:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4b6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4ba:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d4bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d4c0:	f043 0102 	orr.w	r1, r3, #2
    d4c4:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d4c8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d4ce:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4d0:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d4d2:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d4d4:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d4d6:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d4d8:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d4da:	615a      	str	r2, [r3, #20]
            break;
    d4dc:	4770      	bx	lr
            if ( pArgs == 0 )
    d4de:	b151      	cbz	r1, d4f6 <am_hal_clkgen_control+0xae>
    d4e0:	6808      	ldr	r0, [r1, #0]
    d4e2:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d4e6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d4ea:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d4ec:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d4f0:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d4f2:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d4f4:	4770      	bx	lr
    d4f6:	4901      	ldr	r1, [pc, #4]	; (d4fc <am_hal_clkgen_control+0xb4>)
    d4f8:	e7f5      	b.n	d4e6 <am_hal_clkgen_control+0x9e>
    d4fa:	bf00      	nop
    d4fc:	0025b801 	.word	0x0025b801

0000d500 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d500:	b1a8      	cbz	r0, d52e <am_hal_clkgen_status_get+0x2e>
{
    d502:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d504:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d508:	490a      	ldr	r1, [pc, #40]	; (d534 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d50a:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d50c:	4b0a      	ldr	r3, [pc, #40]	; (d538 <am_hal_clkgen_status_get+0x38>)
    d50e:	f014 0f01 	tst.w	r4, #1
    d512:	bf08      	it	eq
    d514:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d516:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d518:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d51a:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d51e:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d522:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d524:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d526:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d52a:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d52c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d52e:	2006      	movs	r0, #6
    d530:	4770      	bx	lr
    d532:	bf00      	nop
    d534:	02dc6c00 	.word	0x02dc6c00
    d538:	016e3600 	.word	0x016e3600

0000d53c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d53c:	4b00      	ldr	r3, [pc, #0]	; (d540 <am_hal_flash_delay+0x4>)
    d53e:	4718      	bx	r3
    d540:	0800009d 	.word	0x0800009d

0000d544 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d548:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d54c:	f8df 8248 	ldr.w	r8, [pc, #584]	; d798 <am_hal_flash_delay_status_check+0x254>
{
    d550:	4607      	mov	r7, r0
    d552:	460c      	mov	r4, r1
    d554:	4615      	mov	r5, r2
    d556:	461e      	mov	r6, r3
    d558:	f1be 0f00 	cmp.w	lr, #0
    d55c:	f000 808e 	beq.w	d67c <am_hal_flash_delay_status_check+0x138>
    d560:	f010 0907 	ands.w	r9, r0, #7
    d564:	d044      	beq.n	d5f0 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d566:	680b      	ldr	r3, [r1, #0]
    d568:	4013      	ands	r3, r2
    d56a:	429e      	cmp	r6, r3
    d56c:	f000 8083 	beq.w	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d570:	2001      	movs	r0, #1
    d572:	47c0      	blx	r8
    d574:	f1b9 0f01 	cmp.w	r9, #1
    d578:	f107 37ff 	add.w	r7, r7, #4294967295
    d57c:	d038      	beq.n	d5f0 <am_hal_flash_delay_status_check+0xac>
    d57e:	f1b9 0f02 	cmp.w	r9, #2
    d582:	d02e      	beq.n	d5e2 <am_hal_flash_delay_status_check+0x9e>
    d584:	f1b9 0f03 	cmp.w	r9, #3
    d588:	d024      	beq.n	d5d4 <am_hal_flash_delay_status_check+0x90>
    d58a:	f1b9 0f04 	cmp.w	r9, #4
    d58e:	d01a      	beq.n	d5c6 <am_hal_flash_delay_status_check+0x82>
    d590:	f1b9 0f05 	cmp.w	r9, #5
    d594:	d010      	beq.n	d5b8 <am_hal_flash_delay_status_check+0x74>
    d596:	f1b9 0f06 	cmp.w	r9, #6
    d59a:	d006      	beq.n	d5aa <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d59c:	6820      	ldr	r0, [r4, #0]
    d59e:	4028      	ands	r0, r5
    d5a0:	4286      	cmp	r6, r0
    d5a2:	d068      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5a4:	2001      	movs	r0, #1
    d5a6:	47c0      	blx	r8
    d5a8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5aa:	6821      	ldr	r1, [r4, #0]
    d5ac:	4029      	ands	r1, r5
    d5ae:	428e      	cmp	r6, r1
    d5b0:	d061      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5b2:	2001      	movs	r0, #1
    d5b4:	47c0      	blx	r8
    d5b6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5b8:	6822      	ldr	r2, [r4, #0]
    d5ba:	402a      	ands	r2, r5
    d5bc:	4296      	cmp	r6, r2
    d5be:	d05a      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5c0:	2001      	movs	r0, #1
    d5c2:	47c0      	blx	r8
    d5c4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5c6:	6823      	ldr	r3, [r4, #0]
    d5c8:	402b      	ands	r3, r5
    d5ca:	429e      	cmp	r6, r3
    d5cc:	d053      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5ce:	2001      	movs	r0, #1
    d5d0:	47c0      	blx	r8
    d5d2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5d4:	6820      	ldr	r0, [r4, #0]
    d5d6:	4028      	ands	r0, r5
    d5d8:	4286      	cmp	r6, r0
    d5da:	d04c      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5dc:	2001      	movs	r0, #1
    d5de:	47c0      	blx	r8
    d5e0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5e2:	6821      	ldr	r1, [r4, #0]
    d5e4:	4029      	ands	r1, r5
    d5e6:	428e      	cmp	r6, r1
    d5e8:	d045      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5ea:	2001      	movs	r0, #1
    d5ec:	3f01      	subs	r7, #1
    d5ee:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5f0:	6822      	ldr	r2, [r4, #0]
    d5f2:	402a      	ands	r2, r5
    d5f4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5f6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d5fa:	d03c      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d5fc:	2f00      	cmp	r7, #0
    d5fe:	f000 80c8 	beq.w	d792 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d602:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d604:	6823      	ldr	r3, [r4, #0]
    d606:	402b      	ands	r3, r5
    d608:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d60a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d60e:	d032      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d610:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d612:	6821      	ldr	r1, [r4, #0]
    d614:	4029      	ands	r1, r5
    d616:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d618:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d61c:	d02b      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d61e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d620:	6822      	ldr	r2, [r4, #0]
    d622:	402a      	ands	r2, r5
    d624:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d626:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d62a:	d024      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d62c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d62e:	6823      	ldr	r3, [r4, #0]
    d630:	402b      	ands	r3, r5
    d632:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d634:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d638:	d01d      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d63a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d63c:	6821      	ldr	r1, [r4, #0]
    d63e:	4029      	ands	r1, r5
    d640:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d642:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d646:	d016      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d648:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d64a:	6822      	ldr	r2, [r4, #0]
    d64c:	402a      	ands	r2, r5
    d64e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d650:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d654:	d00f      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d656:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d658:	6820      	ldr	r0, [r4, #0]
    d65a:	4028      	ands	r0, r5
    d65c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d65e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d662:	d008      	beq.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d664:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d666:	6822      	ldr	r2, [r4, #0]
    d668:	402a      	ands	r2, r5
    d66a:	4296      	cmp	r6, r2
    d66c:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d670:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d674:	d1c2      	bne.n	d5fc <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d676:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d67c:	f010 0907 	ands.w	r9, r0, #7
    d680:	d043      	beq.n	d70a <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d682:	680b      	ldr	r3, [r1, #0]
    d684:	4013      	ands	r3, r2
    d686:	429e      	cmp	r6, r3
    d688:	d1f5      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d68a:	2001      	movs	r0, #1
    d68c:	47c0      	blx	r8
    d68e:	f1b9 0f01 	cmp.w	r9, #1
    d692:	f107 37ff 	add.w	r7, r7, #4294967295
    d696:	d038      	beq.n	d70a <am_hal_flash_delay_status_check+0x1c6>
    d698:	f1b9 0f02 	cmp.w	r9, #2
    d69c:	d02e      	beq.n	d6fc <am_hal_flash_delay_status_check+0x1b8>
    d69e:	f1b9 0f03 	cmp.w	r9, #3
    d6a2:	d024      	beq.n	d6ee <am_hal_flash_delay_status_check+0x1aa>
    d6a4:	f1b9 0f04 	cmp.w	r9, #4
    d6a8:	d01a      	beq.n	d6e0 <am_hal_flash_delay_status_check+0x19c>
    d6aa:	f1b9 0f05 	cmp.w	r9, #5
    d6ae:	d010      	beq.n	d6d2 <am_hal_flash_delay_status_check+0x18e>
    d6b0:	f1b9 0f06 	cmp.w	r9, #6
    d6b4:	d006      	beq.n	d6c4 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6b6:	6821      	ldr	r1, [r4, #0]
    d6b8:	4029      	ands	r1, r5
    d6ba:	428e      	cmp	r6, r1
    d6bc:	d1db      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6be:	2001      	movs	r0, #1
    d6c0:	47c0      	blx	r8
    d6c2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6c4:	6822      	ldr	r2, [r4, #0]
    d6c6:	402a      	ands	r2, r5
    d6c8:	4296      	cmp	r6, r2
    d6ca:	d1d4      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6cc:	2001      	movs	r0, #1
    d6ce:	47c0      	blx	r8
    d6d0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6d2:	6820      	ldr	r0, [r4, #0]
    d6d4:	4028      	ands	r0, r5
    d6d6:	4286      	cmp	r6, r0
    d6d8:	d1cd      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6da:	2001      	movs	r0, #1
    d6dc:	47c0      	blx	r8
    d6de:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6e0:	6823      	ldr	r3, [r4, #0]
    d6e2:	402b      	ands	r3, r5
    d6e4:	429e      	cmp	r6, r3
    d6e6:	d1c6      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6e8:	2001      	movs	r0, #1
    d6ea:	47c0      	blx	r8
    d6ec:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6ee:	6821      	ldr	r1, [r4, #0]
    d6f0:	4029      	ands	r1, r5
    d6f2:	428e      	cmp	r6, r1
    d6f4:	d1bf      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6f6:	2001      	movs	r0, #1
    d6f8:	47c0      	blx	r8
    d6fa:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6fc:	6822      	ldr	r2, [r4, #0]
    d6fe:	402a      	ands	r2, r5
    d700:	4296      	cmp	r6, r2
    d702:	d1b8      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d704:	2001      	movs	r0, #1
    d706:	3f01      	subs	r7, #1
    d708:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d70a:	6823      	ldr	r3, [r4, #0]
    d70c:	402b      	ands	r3, r5
    d70e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d710:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d714:	d1af      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d716:	2f00      	cmp	r7, #0
    d718:	d03b      	beq.n	d792 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d71a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d71c:	6821      	ldr	r1, [r4, #0]
    d71e:	4029      	ands	r1, r5
    d720:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d722:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d726:	d1a6      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d728:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d72a:	6822      	ldr	r2, [r4, #0]
    d72c:	402a      	ands	r2, r5
    d72e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d730:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d734:	d19f      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d736:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d738:	6823      	ldr	r3, [r4, #0]
    d73a:	402b      	ands	r3, r5
    d73c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d73e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d742:	d198      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d744:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d746:	6821      	ldr	r1, [r4, #0]
    d748:	4029      	ands	r1, r5
    d74a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d74c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d750:	d191      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d752:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d754:	6822      	ldr	r2, [r4, #0]
    d756:	402a      	ands	r2, r5
    d758:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d75a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d75e:	d18a      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d760:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d762:	6823      	ldr	r3, [r4, #0]
    d764:	402b      	ands	r3, r5
    d766:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d768:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d76c:	d183      	bne.n	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d76e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d770:	6820      	ldr	r0, [r4, #0]
    d772:	4028      	ands	r0, r5
    d774:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d776:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d77a:	f47f af7c 	bne.w	d676 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d77e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d780:	6823      	ldr	r3, [r4, #0]
    d782:	402b      	ands	r3, r5
    d784:	429e      	cmp	r6, r3
    d786:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d78a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d78e:	d0c2      	beq.n	d716 <am_hal_flash_delay_status_check+0x1d2>
    d790:	e771      	b.n	d676 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d792:	2004      	movs	r0, #4
    d794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d798:	0800009d 	.word	0x0800009d

0000d79c <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d79c:	2831      	cmp	r0, #49	; 0x31
    d79e:	d901      	bls.n	d7a4 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d7a0:	2006      	movs	r0, #6
    d7a2:	4770      	bx	lr
{
    d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d7a8:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d7ac:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d7b0:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d7b2:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d7b6:	d014      	beq.n	d7e2 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d7b8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d7bc:	1db2      	adds	r2, r6, #6
    d7be:	f002 0707 	and.w	r7, r2, #7
    d7c2:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d7c4:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d7c8:	f200 80ab 	bhi.w	d922 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d7cc:	4a85      	ldr	r2, [pc, #532]	; (d9e4 <am_hal_gpio_pinconfig+0x248>)
    d7ce:	5c17      	ldrb	r7, [r2, r0]
    d7d0:	07ff      	lsls	r7, r7, #31
    d7d2:	d403      	bmi.n	d7dc <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d7d4:	4884      	ldr	r0, [pc, #528]	; (d9e8 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d7d6:	b007      	add	sp, #28
    d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d7dc:	1eb4      	subs	r4, r6, #2
    d7de:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d7e2:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d7e6:	2e00      	cmp	r6, #0
    d7e8:	f040 8095 	bne.w	d916 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7ec:	4a7f      	ldr	r2, [pc, #508]	; (d9ec <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7ee:	4f80      	ldr	r7, [pc, #512]	; (d9f0 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7f0:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d7f2:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d7f6:	411e      	asrs	r6, r3
    d7f8:	f016 0f01 	tst.w	r6, #1
    d7fc:	bf0c      	ite	eq
    d7fe:	2600      	moveq	r6, #0
    d800:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d802:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d804:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d808:	f000 8097 	beq.w	d93a <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d80c:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d810:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d812:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d816:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d81a:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d81c:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d820:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d824:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d828:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d82c:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d82e:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d832:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d836:	f000 808d 	beq.w	d954 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d83a:	4a6e      	ldr	r2, [pc, #440]	; (d9f4 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d83c:	6816      	ldr	r6, [r2, #0]
    d83e:	1b8c      	subs	r4, r1, r6
    d840:	fab4 f384 	clz	r3, r4
    d844:	095f      	lsrs	r7, r3, #5
    d846:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d848:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d84c:	bf04      	itt	eq
    d84e:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d852:	f367 0800 	bfieq	r8, r7, #0, #1
    d856:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d858:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d85c:	2902      	cmp	r1, #2
    d85e:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d862:	d07a      	beq.n	d95a <am_hal_gpio_pinconfig+0x1be>
    d864:	d87f      	bhi.n	d966 <am_hal_gpio_pinconfig+0x1ca>
    d866:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d868:	bf08      	it	eq
    d86a:	f045 0504 	orreq.w	r5, r5, #4
    d86e:	f004 0a18 	and.w	sl, r4, #24
            break;
    d872:	2200      	movs	r2, #0
    d874:	4604      	mov	r4, r0
    d876:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d878:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d87c:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d880:	485d      	ldr	r0, [pc, #372]	; (d9f8 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d882:	495e      	ldr	r1, [pc, #376]	; (d9fc <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d884:	4f5e      	ldr	r7, [pc, #376]	; (da00 <am_hal_gpio_pinconfig+0x264>)
    d886:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d888:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d88c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d890:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d894:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d896:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d89a:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d89c:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d8a0:	f000 f8be 	bl	da20 <am_hal_interrupt_master_disable>
    d8a4:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d8a6:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d8aa:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d8ae:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d8b2:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d8b6:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d8b8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d8bc:	9902      	ldr	r1, [sp, #8]
    d8be:	9a03      	ldr	r2, [sp, #12]
    d8c0:	b150      	cbz	r0, d8d8 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d8c2:	f004 001f 	and.w	r0, r4, #31
    d8c6:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d8ca:	f04f 0c01 	mov.w	ip, #1
    d8ce:	4c4d      	ldr	r4, [pc, #308]	; (da04 <am_hal_gpio_pinconfig+0x268>)
    d8d0:	fa0c f000 	lsl.w	r0, ip, r0
    d8d4:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d8d8:	484b      	ldr	r0, [pc, #300]	; (da08 <am_hal_gpio_pinconfig+0x26c>)
    d8da:	2473      	movs	r4, #115	; 0x73
    d8dc:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d8de:	f8da 4000 	ldr.w	r4, [sl]
    d8e2:	4034      	ands	r4, r6
    d8e4:	4325      	orrs	r5, r4
    d8e6:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d8ea:	f859 5001 	ldr.w	r5, [r9, r1]
    d8ee:	402f      	ands	r7, r5
    d8f0:	ea47 0708 	orr.w	r7, r7, r8
    d8f4:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d8f8:	f85b 1003 	ldr.w	r1, [fp, r3]
    d8fc:	400e      	ands	r6, r1
    d8fe:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d900:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d902:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d906:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d908:	9805      	ldr	r0, [sp, #20]
    d90a:	f000 f88d 	bl	da28 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d90e:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d910:	b007      	add	sp, #28
    d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d916:	2e01      	cmp	r6, #1
    d918:	d015      	beq.n	d946 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d91a:	2e02      	cmp	r6, #2
    d91c:	d030      	beq.n	d980 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d91e:	483b      	ldr	r0, [pc, #236]	; (da0c <am_hal_gpio_pinconfig+0x270>)
    d920:	e759      	b.n	d7d6 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d922:	2cc0      	cmp	r4, #192	; 0xc0
    d924:	d027      	beq.n	d976 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d926:	2c20      	cmp	r4, #32
    d928:	f47f af5b 	bne.w	d7e2 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d92c:	4c2d      	ldr	r4, [pc, #180]	; (d9e4 <am_hal_gpio_pinconfig+0x248>)
    d92e:	5c26      	ldrb	r6, [r4, r0]
    d930:	f016 0f09 	tst.w	r6, #9
    d934:	f47f af4e 	bne.w	d7d4 <am_hal_gpio_pinconfig+0x38>
    d938:	e753      	b.n	d7e2 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d93a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d93e:	2a07      	cmp	r2, #7
    d940:	d125      	bne.n	d98e <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d942:	4833      	ldr	r0, [pc, #204]	; (da10 <am_hal_gpio_pinconfig+0x274>)
    d944:	e747      	b.n	d7d6 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d946:	4c27      	ldr	r4, [pc, #156]	; (d9e4 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d948:	5c26      	ldrb	r6, [r4, r0]
    d94a:	07b4      	lsls	r4, r6, #30
    d94c:	d5e7      	bpl.n	d91e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d94e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d952:	e74b      	b.n	d7ec <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d954:	2701      	movs	r7, #1
    d956:	9700      	str	r7, [sp, #0]
    d958:	e776      	b.n	d848 <am_hal_gpio_pinconfig+0xac>
    d95a:	f004 0a18 	and.w	sl, r4, #24
    d95e:	2301      	movs	r3, #1
    d960:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d964:	e786      	b.n	d874 <am_hal_gpio_pinconfig+0xd8>
    d966:	f004 0a18 	and.w	sl, r4, #24
    d96a:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d96c:	f045 0504 	orr.w	r5, r5, #4
    d970:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d974:	e77e      	b.n	d874 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d976:	2814      	cmp	r0, #20
    d978:	f43f af33 	beq.w	d7e2 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d97c:	4825      	ldr	r0, [pc, #148]	; (da14 <am_hal_gpio_pinconfig+0x278>)
    d97e:	e72a      	b.n	d7d6 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d980:	4a18      	ldr	r2, [pc, #96]	; (d9e4 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d982:	5c17      	ldrb	r7, [r2, r0]
    d984:	077a      	lsls	r2, r7, #29
    d986:	d5ca      	bpl.n	d91e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d988:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d98c:	e72e      	b.n	d7ec <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d98e:	4c22      	ldr	r4, [pc, #136]	; (da18 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d990:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d994:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d998:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d99c:	45b0      	cmp	r8, r6
    d99e:	d010      	beq.n	d9c2 <am_hal_gpio_pinconfig+0x226>
    d9a0:	0087      	lsls	r7, r0, #2
    d9a2:	eb04 0907 	add.w	r9, r4, r7
    d9a6:	f899 3001 	ldrb.w	r3, [r9, #1]
    d9aa:	42b3      	cmp	r3, r6
    d9ac:	d015      	beq.n	d9da <am_hal_gpio_pinconfig+0x23e>
    d9ae:	f899 2002 	ldrb.w	r2, [r9, #2]
    d9b2:	42b2      	cmp	r2, r6
    d9b4:	d00f      	beq.n	d9d6 <am_hal_gpio_pinconfig+0x23a>
    d9b6:	f899 4003 	ldrb.w	r4, [r9, #3]
    d9ba:	42b4      	cmp	r4, r6
    d9bc:	d00f      	beq.n	d9de <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d9be:	4817      	ldr	r0, [pc, #92]	; (da1c <am_hal_gpio_pinconfig+0x280>)
    d9c0:	e709      	b.n	d7d6 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d9c2:	2600      	movs	r6, #0
    d9c4:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d9c6:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d9c8:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    d9cc:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d9ce:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    d9d2:	9300      	str	r3, [sp, #0]
    d9d4:	e740      	b.n	d858 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d9d6:	2602      	movs	r6, #2
    d9d8:	e7f5      	b.n	d9c6 <am_hal_gpio_pinconfig+0x22a>
    d9da:	2601      	movs	r6, #1
    d9dc:	e7f3      	b.n	d9c6 <am_hal_gpio_pinconfig+0x22a>
    d9de:	2603      	movs	r6, #3
    d9e0:	e7f1      	b.n	d9c6 <am_hal_gpio_pinconfig+0x22a>
    d9e2:	bf00      	nop
    d9e4:	0000e534 	.word	0x0000e534
    d9e8:	08000100 	.word	0x08000100
    d9ec:	0000e568 	.word	0x0000e568
    d9f0:	0000e664 	.word	0x0000e664
    d9f4:	0000e530 	.word	0x0000e530
    d9f8:	7ffffffc 	.word	0x7ffffffc
    d9fc:	400100e0 	.word	0x400100e0
    da00:	40010040 	.word	0x40010040
    da04:	400100b4 	.word	0x400100b4
    da08:	40010000 	.word	0x40010000
    da0c:	08000102 	.word	0x08000102
    da10:	08000103 	.word	0x08000103
    da14:	08000101 	.word	0x08000101
    da18:	0000e59c 	.word	0x0000e59c
    da1c:	08000104 	.word	0x08000104

0000da20 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    da20:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    da24:	b672      	cpsid	i
    __asm("    bx lr");
    da26:	4770      	bx	lr

0000da28 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    da28:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    da2c:	4770      	bx	lr
    da2e:	bf00      	nop

0000da30 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    da30:	4a0b      	ldr	r2, [pc, #44]	; (da60 <am_hal_itm_enable+0x30>)
    da32:	68d3      	ldr	r3, [r2, #12]
    da34:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    da38:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    da3a:	68d1      	ldr	r1, [r2, #12]
    da3c:	01cb      	lsls	r3, r1, #7
    da3e:	d5fc      	bpl.n	da3a <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    da40:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    da44:	4b07      	ldr	r3, [pc, #28]	; (da64 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    da46:	4a08      	ldr	r2, [pc, #32]	; (da68 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    da48:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    da4c:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    da4e:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    da52:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    da56:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    da5a:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    da5e:	4770      	bx	lr
    da60:	e000edf0 	.word	0xe000edf0
    da64:	c5acce55 	.word	0xc5acce55
    da68:	00150511 	.word	0x00150511

0000da6c <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    da6c:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    da6e:	4b24      	ldr	r3, [pc, #144]	; (db00 <am_hal_itm_disable+0x94>)
    da70:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    da74:	b9b0      	cbnz	r0, daa4 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    da76:	4923      	ldr	r1, [pc, #140]	; (db04 <am_hal_itm_disable+0x98>)
    da78:	68ca      	ldr	r2, [r1, #12]
    da7a:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    da7e:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    da80:	68cb      	ldr	r3, [r1, #12]
    da82:	01da      	lsls	r2, r3, #7
    da84:	d5fc      	bpl.n	da80 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    da86:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    da8a:	481f      	ldr	r0, [pc, #124]	; (db08 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    da8c:	4a1f      	ldr	r2, [pc, #124]	; (db0c <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    da8e:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    da92:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    da94:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    da98:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    da9c:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    daa0:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    daa4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    daa8:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    daac:	021b      	lsls	r3, r3, #8
    daae:	d4fb      	bmi.n	daa8 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dab0:	f240 20f7 	movw	r0, #759	; 0x2f7
    dab4:	f7ff fd42 	bl	d53c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    dab8:	4813      	ldr	r0, [pc, #76]	; (db08 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    daba:	4915      	ldr	r1, [pc, #84]	; (db10 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    dabc:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dac0:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    dac4:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    dac6:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    daca:	f022 0401 	bic.w	r4, r2, #1
    dace:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    dad2:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    dad6:	420b      	tst	r3, r1
    dad8:	d1fb      	bne.n	dad2 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    dada:	3801      	subs	r0, #1
    dadc:	d1f3      	bne.n	dac6 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    dade:	4909      	ldr	r1, [pc, #36]	; (db04 <am_hal_itm_disable+0x98>)
    dae0:	68ca      	ldr	r2, [r1, #12]
    dae2:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    dae6:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    dae8:	68cb      	ldr	r3, [r1, #12]
    daea:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    daee:	d1fb      	bne.n	dae8 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    daf0:	4903      	ldr	r1, [pc, #12]	; (db00 <am_hal_itm_disable+0x94>)
    daf2:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    daf6:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    dafa:	2a00      	cmp	r2, #0
    dafc:	d1fb      	bne.n	daf6 <am_hal_itm_disable+0x8a>
}
    dafe:	bd10      	pop	{r4, pc}
    db00:	40020000 	.word	0x40020000
    db04:	e000edf0 	.word	0xe000edf0
    db08:	c5acce55 	.word	0xc5acce55
    db0c:	00150511 	.word	0x00150511
    db10:	00800001 	.word	0x00800001

0000db14 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    db14:	7803      	ldrb	r3, [r0, #0]
    db16:	b1b3      	cbz	r3, db46 <am_hal_itm_print+0x32>
{
    db18:	b410      	push	{r4}
    db1a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    db1c:	2400      	movs	r4, #0
    db1e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    db22:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    db24:	2900      	cmp	r1, #0
    db26:	d1fa      	bne.n	db1e <am_hal_itm_print+0xa>
    db28:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    db2a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    db2e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    db32:	f8dc 3000 	ldr.w	r3, [ip]
    db36:	2b00      	cmp	r3, #0
    db38:	d0fb      	beq.n	db32 <am_hal_itm_print+0x1e>
    while (ui32Length)
    db3a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    db3c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    db40:	d1f5      	bne.n	db2e <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    db42:	f85d 4b04 	ldr.w	r4, [sp], #4
    db46:	4770      	bx	lr

0000db48 <am_hal_mcuctrl_control>:
// ****************************************************************************
uint32_t
am_hal_mcuctrl_control(am_hal_mcuctrl_control_e eControl, void *pArgs)
{
#if AM_CMSIS_REGS
    switch ( eControl )
    db48:	2803      	cmp	r0, #3
    db4a:	d824      	bhi.n	db96 <am_hal_mcuctrl_control+0x4e>
    db4c:	e8df f000 	tbb	[pc, r0]
    db50:	0202111a 	.word	0x0202111a
        case AM_HAL_MCUCTRL_CONTROL_EXTCLK32K_DISABLE:
            //
            // Configure the bits in XTALCTRL that disable external 32KHz
            // clock, thus re-configuring for the crystal.
            //
            MCUCTRL->XTALCTRL &=
    db54:	4b11      	ldr	r3, [pc, #68]	; (db9c <am_hal_mcuctrl_control+0x54>)
    db56:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    db5a:	f022 001f 	bic.w	r0, r2, #31
    db5e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
                  MCUCTRL_XTALCTRL_PDNBCOREXTAL_Msk                 |
                  MCUCTRL_XTALCTRL_BYPCMPRXTAL_Msk                  |
                  MCUCTRL_XTALCTRL_FDBKDSBLXTAL_Msk                 |
                  MCUCTRL_XTALCTRL_XTALSWE_Msk);

            MCUCTRL->XTALCTRL |=
    db62:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    db66:	f041 0201 	orr.w	r2, r1, #1
    db6a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif // AM_CMSIS_REGS

    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    db6e:	2000      	movs	r0, #0
            break;
    db70:	4770      	bx	lr
            MCUCTRL->FAULTCAPTUREEN_b.FAULTCAPTUREEN = 0;
    db72:	480a      	ldr	r0, [pc, #40]	; (db9c <am_hal_mcuctrl_control+0x54>)
    db74:	f890 c1d0 	ldrb.w	ip, [r0, #464]	; 0x1d0
    db78:	f36f 0c00 	bfc	ip, #0, #1
    db7c:	f880 c1d0 	strb.w	ip, [r0, #464]	; 0x1d0
    return AM_HAL_STATUS_SUCCESS;
    db80:	2000      	movs	r0, #0
            break;
    db82:	4770      	bx	lr
            MCUCTRL->FAULTCAPTUREEN_b.FAULTCAPTUREEN = 1;
    db84:	4905      	ldr	r1, [pc, #20]	; (db9c <am_hal_mcuctrl_control+0x54>)
    db86:	f891 31d0 	ldrb.w	r3, [r1, #464]	; 0x1d0
    db8a:	f043 0201 	orr.w	r2, r3, #1
    db8e:	f881 21d0 	strb.w	r2, [r1, #464]	; 0x1d0
    return AM_HAL_STATUS_SUCCESS;
    db92:	2000      	movs	r0, #0
            break;
    db94:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    db96:	2006      	movs	r0, #6

} // am_hal_mcuctrl_control()
    db98:	4770      	bx	lr
    db9a:	bf00      	nop
    db9c:	40020000 	.word	0x40020000

0000dba0 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    dba0:	b141      	cbz	r1, dbb4 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    dba2:	2801      	cmp	r0, #1
{
    dba4:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    dba6:	d03a      	beq.n	dc1e <am_hal_mcuctrl_info_get+0x7e>
    dba8:	d322      	bcc.n	dbf0 <am_hal_mcuctrl_info_get+0x50>
    dbaa:	2802      	cmp	r0, #2
    dbac:	d004      	beq.n	dbb8 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    dbae:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    dbb0:	bcf0      	pop	{r4, r5, r6, r7}
    dbb2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    dbb4:	2006      	movs	r0, #6
    dbb6:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dbb8:	4a41      	ldr	r2, [pc, #260]	; (dcc0 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dbba:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    dbbc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dbc0:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dbc2:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dbc6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dbca:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    dbce:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dbd0:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dbd2:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    dbd4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dbd8:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    dbda:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    dbde:	4334      	orrs	r4, r6
    dbe0:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dbe2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dbe6:	4310      	orrs	r0, r2
    dbe8:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    dbea:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    dbec:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dbee:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    dbf0:	4c33      	ldr	r4, [pc, #204]	; (dcc0 <am_hal_mcuctrl_info_get+0x120>)
    dbf2:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dbf4:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dbf8:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dbfc:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dbfe:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dc00:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dc04:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dc08:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    dc0a:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dc0c:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    dc10:	f004 0501 	and.w	r5, r4, #1
    dc14:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    dc16:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    dc18:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dc1a:	bcf0      	pop	{r4, r5, r6, r7}
    dc1c:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dc1e:	4a28      	ldr	r2, [pc, #160]	; (dcc0 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    dc20:	4c28      	ldr	r4, [pc, #160]	; (dcc4 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dc22:	6813      	ldr	r3, [r2, #0]
    dc24:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    dc26:	6850      	ldr	r0, [r2, #4]
    dc28:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    dc2a:	6897      	ldr	r7, [r2, #8]
    dc2c:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    dc2e:	68d6      	ldr	r6, [r2, #12]
    dc30:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dc32:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    dc34:	4824      	ldr	r0, [pc, #144]	; (dcc8 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    dc36:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    dc38:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    dc3c:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    dc40:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    dc42:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dc46:	4a21      	ldr	r2, [pc, #132]	; (dccc <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    dc48:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    dc4c:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dc4e:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    dc52:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    dc54:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    dc56:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dc58:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dc5c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    dc60:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    dc62:	f000 040f 	and.w	r4, r0, #15
    dc66:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    dc6a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dc6c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dc70:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    dc74:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    dc78:	f007 0c0f 	and.w	ip, r7, #15
    dc7c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    dc80:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dc82:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dc86:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    dc8a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    dc8e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    dc92:	433b      	orrs	r3, r7
    dc94:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    dc96:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dc9a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dc9e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dca2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    dca6:	b2e5      	uxtb	r5, r4
    dca8:	042b      	lsls	r3, r5, #16
    dcaa:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dcae:	b2d6      	uxtb	r6, r2
    dcb0:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    dcb2:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    dcb4:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    dcb8:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    dcba:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dcbc:	bcf0      	pop	{r4, r5, r6, r7}
    dcbe:	4770      	bx	lr
    dcc0:	40020000 	.word	0x40020000
    dcc4:	0000e698 	.word	0x0000e698
    dcc8:	0000e6d8 	.word	0x0000e6d8
    dccc:	f0000f00 	.word	0xf0000f00

0000dcd0 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dcd0:	b570      	push	{r4, r5, r6, lr}
    dcd2:	b082      	sub	sp, #8
    dcd4:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    dcd6:	f7ff fea3 	bl	da20 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dcda:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dcde:	008c      	lsls	r4, r1, #2
    dce0:	4e0e      	ldr	r6, [pc, #56]	; (dd1c <am_hal_pwrctrl_periph_enable+0x4c>)
    dce2:	4d0f      	ldr	r5, [pc, #60]	; (dd20 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    dce4:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dce6:	592a      	ldr	r2, [r5, r4]
    dce8:	68b3      	ldr	r3, [r6, #8]
    dcea:	4313      	orrs	r3, r2
    dcec:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    dcee:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dcf0:	442c      	add	r4, r5
    AM_CRITICAL_END
    dcf2:	f7ff fe99 	bl	da28 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dcf6:	2077      	movs	r0, #119	; 0x77
    dcf8:	f7ff fc20 	bl	d53c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dcfc:	69b0      	ldr	r0, [r6, #24]
    dcfe:	6864      	ldr	r4, [r4, #4]
    dd00:	4220      	tst	r0, r4
    dd02:	d103      	bne.n	dd0c <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dd04:	2077      	movs	r0, #119	; 0x77
    dd06:	f7ff fc19 	bl	d53c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    dd0a:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    dd0c:	4903      	ldr	r1, [pc, #12]	; (dd1c <am_hal_pwrctrl_periph_enable+0x4c>)
    dd0e:	698d      	ldr	r5, [r1, #24]
    dd10:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    dd12:	bf0c      	ite	eq
    dd14:	2001      	moveq	r0, #1
    dd16:	2000      	movne	r0, #0
    dd18:	b002      	add	sp, #8
    dd1a:	bd70      	pop	{r4, r5, r6, pc}
    dd1c:	40021000 	.word	0x40021000
    dd20:	0000e718 	.word	0x0000e718

0000dd24 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    dd24:	b570      	push	{r4, r5, r6, lr}
    dd26:	b082      	sub	sp, #8
    dd28:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    dd2a:	f7ff fe79 	bl	da20 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dd2e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd32:	008c      	lsls	r4, r1, #2
    dd34:	4e0f      	ldr	r6, [pc, #60]	; (dd74 <am_hal_pwrctrl_periph_disable+0x50>)
    dd36:	4d10      	ldr	r5, [pc, #64]	; (dd78 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    dd38:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    dd3a:	68b3      	ldr	r3, [r6, #8]
    dd3c:	592a      	ldr	r2, [r5, r4]
    dd3e:	ea23 0002 	bic.w	r0, r3, r2
    dd42:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    dd44:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd46:	442c      	add	r4, r5
    AM_CRITICAL_END
    dd48:	f7ff fe6e 	bl	da28 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dd4c:	2077      	movs	r0, #119	; 0x77
    dd4e:	f7ff fbf5 	bl	d53c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd52:	69b1      	ldr	r1, [r6, #24]
    dd54:	6864      	ldr	r4, [r4, #4]
    dd56:	4221      	tst	r1, r4
    dd58:	d003      	beq.n	dd62 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    dd5a:	2077      	movs	r0, #119	; 0x77
    dd5c:	f7ff fbee 	bl	d53c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd60:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    dd62:	4d04      	ldr	r5, [pc, #16]	; (dd74 <am_hal_pwrctrl_periph_disable+0x50>)
    dd64:	69ae      	ldr	r6, [r5, #24]
    dd66:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    dd68:	bf14      	ite	ne
    dd6a:	2001      	movne	r0, #1
    dd6c:	2000      	moveq	r0, #0
    dd6e:	b002      	add	sp, #8
    dd70:	bd70      	pop	{r4, r5, r6, pc}
    dd72:	bf00      	nop
    dd74:	40021000 	.word	0x40021000
    dd78:	0000e718 	.word	0x0000e718

0000dd7c <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dd7c:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dd7e:	4c1b      	ldr	r4, [pc, #108]	; (ddec <am_hal_pwrctrl_low_power_init+0x70>)
    dd80:	69a3      	ldr	r3, [r4, #24]
    dd82:	05db      	lsls	r3, r3, #23
{
    dd84:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dd86:	d502      	bpl.n	dd8e <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    dd88:	2000      	movs	r0, #0
}
    dd8a:	b003      	add	sp, #12
    dd8c:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd8e:	4d18      	ldr	r5, [pc, #96]	; (ddf0 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd90:	4918      	ldr	r1, [pc, #96]	; (ddf4 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd92:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd94:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dd96:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dd98:	461a      	mov	r2, r3
    dd9a:	9000      	str	r0, [sp, #0]
    dd9c:	f242 7010 	movw	r0, #10000	; 0x2710
    dda0:	f7ff fbd0 	bl	d544 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dda4:	b110      	cbz	r0, ddac <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    dda6:	2004      	movs	r0, #4
}
    dda8:	b003      	add	sp, #12
    ddaa:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    ddac:	6821      	ldr	r1, [r4, #0]
    ddae:	f041 0201 	orr.w	r2, r1, #1
    ddb2:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    ddb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ddb6:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    ddba:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    ddbc:	68ec      	ldr	r4, [r5, #12]
    ddbe:	b2e2      	uxtb	r2, r4
    ddc0:	2a11      	cmp	r2, #17
    ddc2:	d1e1      	bne.n	dd88 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    ddc4:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    ddc8:	f360 5356 	bfi	r3, r0, #21, #2
    ddcc:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    ddd0:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    ddd4:	240f      	movs	r4, #15
    ddd6:	f364 118b 	bfi	r1, r4, #6, #6
    ddda:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    ddde:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    dde2:	f364 0205 	bfi	r2, r4, #0, #6
    dde6:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    ddea:	e7ce      	b.n	dd8a <am_hal_pwrctrl_low_power_init+0xe>
    ddec:	40021000 	.word	0x40021000
    ddf0:	40020000 	.word	0x40020000
    ddf4:	40020018 	.word	0x40020018

0000ddf8 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    ddf8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    ddfc:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    ddfe:	68d3      	ldr	r3, [r2, #12]
    de00:	bf0c      	ite	eq
    de02:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    de06:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    de0a:	60d3      	str	r3, [r2, #12]
    de0c:	4770      	bx	lr
    de0e:	bf00      	nop

0000de10 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    de10:	4a03      	ldr	r2, [pc, #12]	; (de20 <am_hal_rtc_osc_disable+0x10>)
    de12:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    de16:	f043 0010 	orr.w	r0, r3, #16
    de1a:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    de1e:	4770      	bx	lr
    de20:	40004200 	.word	0x40004200

0000de24 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    de24:	b510      	push	{r4, lr}
    de26:	b082      	sub	sp, #8
    de28:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    de2a:	f7ff fdf9 	bl	da20 <am_hal_interrupt_master_disable>
    de2e:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    de30:	b124      	cbz	r4, de3c <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    de32:	4b0c      	ldr	r3, [pc, #48]	; (de64 <am_hal_sysctrl_sleep+0x40>)
    de34:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    de38:	07c3      	lsls	r3, r0, #31
    de3a:	d50a      	bpl.n	de52 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    de3c:	4a0a      	ldr	r2, [pc, #40]	; (de68 <am_hal_sysctrl_sleep+0x44>)
    de3e:	6911      	ldr	r1, [r2, #16]
    de40:	f021 0404 	bic.w	r4, r1, #4
    de44:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    de46:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    de48:	9801      	ldr	r0, [sp, #4]
    de4a:	f7ff fded 	bl	da28 <am_hal_interrupt_master_set>
}
    de4e:	b002      	add	sp, #8
    de50:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    de52:	4b05      	ldr	r3, [pc, #20]	; (de68 <am_hal_sysctrl_sleep+0x44>)
    de54:	2004      	movs	r0, #4
    de56:	6118      	str	r0, [r3, #16]
        __WFI();
    de58:	bf30      	wfi
    AM_CRITICAL_END
    de5a:	9801      	ldr	r0, [sp, #4]
    de5c:	f7ff fde4 	bl	da28 <am_hal_interrupt_master_set>
}
    de60:	b002      	add	sp, #8
    de62:	bd10      	pop	{r4, pc}
    de64:	40020000 	.word	0x40020000
    de68:	e000ed00 	.word	0xe000ed00

0000de6c <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    de6c:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    de6e:	4a24      	ldr	r2, [pc, #144]	; (df00 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    de70:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    de72:	2100      	movs	r1, #0
{
    de74:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    de76:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    de7a:	b33b      	cbz	r3, decc <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    de7c:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    de7e:	4921      	ldr	r1, [pc, #132]	; (df04 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    de80:	4c21      	ldr	r4, [pc, #132]	; (df08 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    de82:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    de84:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    de88:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    de8a:	458c      	cmp	ip, r1
    de8c:	bf98      	it	ls
    de8e:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    de90:	f7ff fb36 	bl	d500 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    de94:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    de96:	1c5a      	adds	r2, r3, #1
    de98:	d02f      	beq.n	defa <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    de9a:	08da      	lsrs	r2, r3, #3
    de9c:	fbb2 fef4 	udiv	lr, r2, r4
    dea0:	f10e 31ff 	add.w	r1, lr, #4294967295
    dea4:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dea6:	4a16      	ldr	r2, [pc, #88]	; (df00 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    dea8:	4918      	ldr	r1, [pc, #96]	; (df0c <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    deaa:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    deac:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    deb0:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    deb2:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    deb4:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    deb8:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    debc:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dec0:	f240 20f7 	movw	r0, #759	; 0x2f7
    dec4:	f7ff fb3a 	bl	d53c <am_hal_flash_delay>
}
    dec8:	b004      	add	sp, #16
    deca:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    decc:	6904      	ldr	r4, [r0, #16]
    dece:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    ded0:	6883      	ldr	r3, [r0, #8]
    ded2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    ded6:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    ded8:	4c0c      	ldr	r4, [pc, #48]	; (df0c <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    deda:	3901      	subs	r1, #1
    dedc:	2301      	movs	r3, #1
    dede:	408b      	lsls	r3, r1
    dee0:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dee2:	6840      	ldr	r0, [r0, #4]
    dee4:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    dee8:	4302      	orrs	r2, r0
    deea:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    deee:	f240 20f7 	movw	r0, #759	; 0x2f7
    def2:	f7ff fb23 	bl	d53c <am_hal_flash_delay>
}
    def6:	b004      	add	sp, #16
    def8:	bd10      	pop	{r4, pc}
    defa:	2005      	movs	r0, #5
    defc:	e7d3      	b.n	dea6 <am_hal_tpiu_enable+0x3a>
    defe:	bf00      	nop
    df00:	e0040000 	.word	0xe0040000
    df04:	001da380 	.word	0x001da380
    df08:	000f4240 	.word	0x000f4240
    df0c:	40020000 	.word	0x40020000

0000df10 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df10:	b128      	cbz	r0, df1e <am_hal_uart_deinitialize+0xe>
    df12:	6803      	ldr	r3, [r0, #0]
    df14:	4a07      	ldr	r2, [pc, #28]	; (df34 <am_hal_uart_deinitialize+0x24>)
    df16:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    df1a:	4291      	cmp	r1, r2
    df1c:	d001      	beq.n	df22 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    df1e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    df20:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    df22:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    df24:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    df26:	f36f 0200 	bfc	r2, #0, #1
    df2a:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    df2c:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    df2e:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    df30:	4618      	mov	r0, r3
    df32:	4770      	bx	lr
    df34:	01ea9e06 	.word	0x01ea9e06

0000df38 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    df38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df3c:	6804      	ldr	r4, [r0, #0]
    df3e:	4b36      	ldr	r3, [pc, #216]	; (e018 <am_hal_uart_power_control+0xe0>)
    df40:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    df44:	429c      	cmp	r4, r3
{
    df46:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    df48:	d003      	beq.n	df52 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    df4a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    df4c:	b004      	add	sp, #16
    df4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    df52:	6a47      	ldr	r7, [r0, #36]	; 0x24
    df54:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    df56:	f107 0008 	add.w	r0, r7, #8
    df5a:	460e      	mov	r6, r1
    df5c:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    df60:	b181      	cbz	r1, df84 <am_hal_uart_power_control+0x4c>
    df62:	2902      	cmp	r1, #2
    df64:	d80c      	bhi.n	df80 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    df66:	b992      	cbnz	r2, df8e <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    df68:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    df6c:	341c      	adds	r4, #28
    df6e:	0325      	lsls	r5, r4, #12
    df70:	f04f 31ff 	mov.w	r1, #4294967295
    df74:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    df76:	4640      	mov	r0, r8
    df78:	f7ff fed4 	bl	dd24 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    df7c:	2000      	movs	r0, #0
            break;
    df7e:	e7e5      	b.n	df4c <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    df80:	2006      	movs	r0, #6
    df82:	e7e3      	b.n	df4c <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    df84:	b322      	cbz	r2, dfd0 <am_hal_uart_power_control+0x98>
    df86:	792a      	ldrb	r2, [r5, #4]
    df88:	bb42      	cbnz	r2, dfdc <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    df8a:	2007      	movs	r0, #7
    df8c:	e7de      	b.n	df4c <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    df8e:	f7ff fd47 	bl	da20 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    df92:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    df96:	311c      	adds	r1, #28
    df98:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    df9a:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    df9c:	6a3a      	ldr	r2, [r7, #32]
    df9e:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dfa2:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    dfa4:	6abe      	ldr	r6, [r7, #40]	; 0x28
    dfa6:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    dfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dfaa:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    dfac:	6b39      	ldr	r1, [r7, #48]	; 0x30
    dfae:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    dfb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    dfb2:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    dfb4:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    dfb6:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    dfb8:	2301      	movs	r3, #1
                AM_CRITICAL_END
    dfba:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    dfbc:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    dfbe:	f7ff fd33 	bl	da28 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    dfc2:	682e      	ldr	r6, [r5, #0]
    dfc4:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    dfc8:	42a0      	cmp	r0, r4
    dfca:	d1d4      	bne.n	df76 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    dfcc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    dfce:	e7cb      	b.n	df68 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    dfd0:	4640      	mov	r0, r8
    dfd2:	9201      	str	r2, [sp, #4]
    dfd4:	f7ff fe7c 	bl	dcd0 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    dfd8:	9801      	ldr	r0, [sp, #4]
    dfda:	e7b7      	b.n	df4c <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    dfdc:	4640      	mov	r0, r8
    dfde:	f7ff fe77 	bl	dcd0 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    dfe2:	f7ff fd1d 	bl	da20 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    dfe6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    dfea:	331c      	adds	r3, #28
    dfec:	031f      	lsls	r7, r3, #12
    dfee:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    dff0:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    dff2:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    dff4:	68e9      	ldr	r1, [r5, #12]
    dff6:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    dff8:	6928      	ldr	r0, [r5, #16]
    dffa:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    dffc:	696a      	ldr	r2, [r5, #20]
    dffe:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e000:	69ab      	ldr	r3, [r5, #24]
    e002:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e004:	69ec      	ldr	r4, [r5, #28]
    e006:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e008:	6a29      	ldr	r1, [r5, #32]
    e00a:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e00c:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e00e:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e010:	f7ff fd0a 	bl	da28 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e014:	4630      	mov	r0, r6
    e016:	e799      	b.n	df4c <am_hal_uart_power_control+0x14>
    e018:	01ea9e06 	.word	0x01ea9e06

0000e01c <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    e01c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    e020:	b570      	push	{r4, r5, r6, lr}
    e022:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    e024:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    e026:	b183      	cbz	r3, e04a <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e028:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e02a:	b170      	cbz	r0, e04a <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    e02c:	4e13      	ldr	r6, [pc, #76]	; (e07c <am_hal_uart_tx_flush+0x60>)
    e02e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e030:	fbb6 f2f1 	udiv	r2, r6, r1
    e034:	2a02      	cmp	r2, #2
    e036:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e03a:	bf8c      	ite	hi
    e03c:	3829      	subhi	r0, #41	; 0x29
    e03e:	2001      	movls	r0, #1
    e040:	f7ff fa7c 	bl	d53c <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    e044:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e046:	2b00      	cmp	r3, #0
    e048:	d1f1      	bne.n	e02e <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e04a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e04e:	351c      	adds	r5, #28
    e050:	032d      	lsls	r5, r5, #12
    e052:	69a8      	ldr	r0, [r5, #24]
    e054:	0702      	lsls	r2, r0, #28
    e056:	d50e      	bpl.n	e076 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    e058:	4e08      	ldr	r6, [pc, #32]	; (e07c <am_hal_uart_tx_flush+0x60>)
    e05a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e05c:	fbb6 f2f1 	udiv	r2, r6, r1
    e060:	2a02      	cmp	r2, #2
    e062:	ea4f 1002 	mov.w	r0, r2, lsl #4
    e066:	bf8c      	ite	hi
    e068:	3829      	subhi	r0, #41	; 0x29
    e06a:	2001      	movls	r0, #1
    e06c:	f7ff fa66 	bl	d53c <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    e070:	69ab      	ldr	r3, [r5, #24]
    e072:	071b      	lsls	r3, r3, #28
    e074:	d4f1      	bmi.n	e05a <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    e076:	2000      	movs	r0, #0
    e078:	bd70      	pop	{r4, r5, r6, pc}
    e07a:	bf00      	nop
    e07c:	00b71b00 	.word	0x00b71b00
    e080:	6c6c6548 	.word	0x6c6c6548
    e084:	6146206f 	.word	0x6146206f
    e088:	2e746c75 	.word	0x2e746c75
    e08c:	00000a0a 	.word	0x00000a0a
    e090:	69206e41 	.word	0x69206e41
    e094:	67656c6c 	.word	0x67656c6c
    e098:	6d206c61 	.word	0x6d206c61
    e09c:	726f6d65 	.word	0x726f6d65
    e0a0:	63612079 	.word	0x63612079
    e0a4:	73736563 	.word	0x73736563
    e0a8:	6c697720 	.word	0x6c697720
    e0ac:	636f206c 	.word	0x636f206c
    e0b0:	20727563 	.word	0x20727563
    e0b4:	7478656e 	.word	0x7478656e
    e0b8:	6877202c 	.word	0x6877202c
    e0bc:	20686369 	.word	0x20686369
    e0c0:	6c6c6977 	.word	0x6c6c6977
    e0c4:	65786520 	.word	0x65786520
    e0c8:	65747563 	.word	0x65747563
    e0cc:	65687420 	.word	0x65687420
    e0d0:	7478650a 	.word	0x7478650a
    e0d4:	65646e65 	.word	0x65646e65
    e0d8:	61662064 	.word	0x61662064
    e0dc:	20746c75 	.word	0x20746c75
    e0e0:	646e6168 	.word	0x646e6168
    e0e4:	2072656c 	.word	0x2072656c
    e0e8:	61206f74 	.word	0x61206f74
    e0ec:	73697373 	.word	0x73697373
    e0f0:	6e692074 	.word	0x6e692074
    e0f4:	63656420 	.word	0x63656420
    e0f8:	6e69646f 	.word	0x6e69646f
    e0fc:	68742067 	.word	0x68742067
    e100:	61662065 	.word	0x61662065
    e104:	2e746c75 	.word	0x2e746c75
    e108:	0000000a 	.word	0x0000000a
    e10c:	206e490a 	.word	0x206e490a
    e110:	6564726f 	.word	0x6564726f
    e114:	6f742072 	.word	0x6f742072
    e118:	69727020 	.word	0x69727020
    e11c:	6f20746e 	.word	0x6f20746e
    e120:	74207475 	.word	0x74207475
    e124:	66206568 	.word	0x66206568
    e128:	746c7561 	.word	0x746c7561
    e12c:	666e6920 	.word	0x666e6920
    e130:	616d726f 	.word	0x616d726f
    e134:	6e6f6974 	.word	0x6e6f6974
    e138:	726f6620 	.word	0x726f6620
    e13c:	69687420 	.word	0x69687420
    e140:	78652073 	.word	0x78652073
    e144:	6c706d61 	.word	0x6c706d61
    e148:	20610a65 	.word	0x20610a65
    e14c:	7263616d 	.word	0x7263616d
    e150:	41202c6f 	.word	0x41202c6f
    e154:	54555f4d 	.word	0x54555f4d
    e158:	465f4c49 	.word	0x465f4c49
    e15c:	544c5541 	.word	0x544c5541
    e160:	5f525349 	.word	0x5f525349
    e164:	4e495250 	.word	0x4e495250
    e168:	68202c54 	.word	0x68202c54
    e16c:	62207361 	.word	0x62207361
    e170:	206e6565 	.word	0x206e6565
    e174:	69666564 	.word	0x69666564
    e178:	2064656e 	.word	0x2064656e
    e17c:	74206e69 	.word	0x74206e69
    e180:	62206568 	.word	0x62206568
    e184:	646c6975 	.word	0x646c6975
    e188:	766e650a 	.word	0x766e650a
    e18c:	6e6f7269 	.word	0x6e6f7269
    e190:	746e656d 	.word	0x746e656d
    e194:	4f20202e 	.word	0x4f20202e
    e198:	72656874 	.word	0x72656874
    e19c:	65736977 	.word	0x65736977
    e1a0:	65687420 	.word	0x65687420
    e1a4:	75616620 	.word	0x75616620
    e1a8:	6420746c 	.word	0x6420746c
    e1ac:	20617461 	.word	0x20617461
    e1b0:	206e6163 	.word	0x206e6163
    e1b4:	796c6e6f 	.word	0x796c6e6f
    e1b8:	20656220 	.word	0x20656220
    e1bc:	6d617865 	.word	0x6d617865
    e1c0:	64656e69 	.word	0x64656e69
    e1c4:	7269640a 	.word	0x7269640a
    e1c8:	6c746365 	.word	0x6c746365
    e1cc:	6e692079 	.word	0x6e692079
    e1d0:	65687420 	.word	0x65687420
    e1d4:	52534920 	.word	0x52534920
    e1d8:	6f726620 	.word	0x6f726620
    e1dc:	2061206d 	.word	0x2061206d
    e1e0:	75626564 	.word	0x75626564
    e1e4:	72656767 	.word	0x72656767
    e1e8:	000a0a2e 	.word	0x000a0a2e
    e1ec:	63726f46 	.word	0x63726f46
    e1f0:	20676e69 	.word	0x20676e69
    e1f4:	20656874 	.word	0x20656874
    e1f8:	6c756166 	.word	0x6c756166
    e1fc:	6f6e2074 	.word	0x6f6e2074
    e200:	2e2e2077 	.word	0x2e2e2077
    e204:	000a0a2e 	.word	0x000a0a2e
    e208:	64726148 	.word	0x64726148
    e20c:	75614620 	.word	0x75614620
    e210:	7320746c 	.word	0x7320746c
    e214:	6b636174 	.word	0x6b636174
    e218:	64206465 	.word	0x64206465
    e21c:	3a617461 	.word	0x3a617461
    e220:	0000000a 	.word	0x0000000a
    e224:	20202020 	.word	0x20202020
    e228:	20203052 	.word	0x20203052
    e22c:	7830203d 	.word	0x7830203d
    e230:	58383025 	.word	0x58383025
    e234:	0000000a 	.word	0x0000000a
    e238:	20202020 	.word	0x20202020
    e23c:	20203152 	.word	0x20203152
    e240:	7830203d 	.word	0x7830203d
    e244:	58383025 	.word	0x58383025
    e248:	0000000a 	.word	0x0000000a
    e24c:	20202020 	.word	0x20202020
    e250:	20203252 	.word	0x20203252
    e254:	7830203d 	.word	0x7830203d
    e258:	58383025 	.word	0x58383025
    e25c:	0000000a 	.word	0x0000000a
    e260:	20202020 	.word	0x20202020
    e264:	20203352 	.word	0x20203352
    e268:	7830203d 	.word	0x7830203d
    e26c:	58383025 	.word	0x58383025
    e270:	0000000a 	.word	0x0000000a
    e274:	20202020 	.word	0x20202020
    e278:	20323152 	.word	0x20323152
    e27c:	7830203d 	.word	0x7830203d
    e280:	58383025 	.word	0x58383025
    e284:	0000000a 	.word	0x0000000a
    e288:	20202020 	.word	0x20202020
    e28c:	2020524c 	.word	0x2020524c
    e290:	7830203d 	.word	0x7830203d
    e294:	58383025 	.word	0x58383025
    e298:	0000000a 	.word	0x0000000a
    e29c:	20202020 	.word	0x20202020
    e2a0:	20204350 	.word	0x20204350
    e2a4:	7830203d 	.word	0x7830203d
    e2a8:	58383025 	.word	0x58383025
    e2ac:	0000000a 	.word	0x0000000a
    e2b0:	20202020 	.word	0x20202020
    e2b4:	20525350 	.word	0x20525350
    e2b8:	7830203d 	.word	0x7830203d
    e2bc:	58383025 	.word	0x58383025
    e2c0:	0000000a 	.word	0x0000000a
    e2c4:	6568744f 	.word	0x6568744f
    e2c8:	61482072 	.word	0x61482072
    e2cc:	46206472 	.word	0x46206472
    e2d0:	746c7561 	.word	0x746c7561
    e2d4:	74616420 	.word	0x74616420
    e2d8:	000a3a61 	.word	0x000a3a61
    e2dc:	20202020 	.word	0x20202020
    e2e0:	6c756146 	.word	0x6c756146
    e2e4:	64612074 	.word	0x64612074
    e2e8:	73657264 	.word	0x73657264
    e2ec:	203d2073 	.word	0x203d2073
    e2f0:	30257830 	.word	0x30257830
    e2f4:	000a5838 	.word	0x000a5838
    e2f8:	20202020 	.word	0x20202020
    e2fc:	52414642 	.word	0x52414642
    e300:	75422820 	.word	0x75422820
    e304:	61462073 	.word	0x61462073
    e308:	20746c75 	.word	0x20746c75
    e30c:	72646441 	.word	0x72646441
    e310:	67655220 	.word	0x67655220
    e314:	203d2029 	.word	0x203d2029
    e318:	30257830 	.word	0x30257830
    e31c:	000a5838 	.word	0x000a5838
    e320:	20202020 	.word	0x20202020
    e324:	52534d4d 	.word	0x52534d4d
    e328:	654d2820 	.word	0x654d2820
    e32c:	674d206d 	.word	0x674d206d
    e330:	4620746d 	.word	0x4620746d
    e334:	746c7561 	.word	0x746c7561
    e338:	61745320 	.word	0x61745320
    e33c:	20737574 	.word	0x20737574
    e340:	29676552 	.word	0x29676552
    e344:	30203d20 	.word	0x30203d20
    e348:	32302578 	.word	0x32302578
    e34c:	00000a58 	.word	0x00000a58
    e350:	20202020 	.word	0x20202020
    e354:	52534642 	.word	0x52534642
    e358:	75422820 	.word	0x75422820
    e35c:	61462073 	.word	0x61462073
    e360:	20746c75 	.word	0x20746c75
    e364:	74617453 	.word	0x74617453
    e368:	52207375 	.word	0x52207375
    e36c:	20296765 	.word	0x20296765
    e370:	7830203d 	.word	0x7830203d
    e374:	58323025 	.word	0x58323025
    e378:	0000000a 	.word	0x0000000a
    e37c:	20202020 	.word	0x20202020
    e380:	52534655 	.word	0x52534655
    e384:	73552820 	.word	0x73552820
    e388:	20656761 	.word	0x20656761
    e38c:	6c756146 	.word	0x6c756146
    e390:	74532074 	.word	0x74532074
    e394:	73757461 	.word	0x73757461
    e398:	67655220 	.word	0x67655220
    e39c:	203d2029 	.word	0x203d2029
    e3a0:	30257830 	.word	0x30257830
    e3a4:	000a5834 	.word	0x000a5834
    e3a8:	20202020 	.word	0x20202020
    e3ac:	20202020 	.word	0x20202020
    e3b0:	52534642 	.word	0x52534642
    e3b4:	74696220 	.word	0x74696220
    e3b8:	42203a37 	.word	0x42203a37
    e3bc:	56524146 	.word	0x56524146
    e3c0:	44494c41 	.word	0x44494c41
    e3c4:	0000000a 	.word	0x0000000a
    e3c8:	20202020 	.word	0x20202020
    e3cc:	20202020 	.word	0x20202020
    e3d0:	52534642 	.word	0x52534642
    e3d4:	74696220 	.word	0x74696220
    e3d8:	52203a36 	.word	0x52203a36
    e3dc:	52455345 	.word	0x52455345
    e3e0:	0a444556 	.word	0x0a444556
    e3e4:	00000000 	.word	0x00000000
    e3e8:	20202020 	.word	0x20202020
    e3ec:	20202020 	.word	0x20202020
    e3f0:	52534642 	.word	0x52534642
    e3f4:	74696220 	.word	0x74696220
    e3f8:	4c203a35 	.word	0x4c203a35
    e3fc:	52455053 	.word	0x52455053
    e400:	00000a52 	.word	0x00000a52
    e404:	20202020 	.word	0x20202020
    e408:	20202020 	.word	0x20202020
    e40c:	52534642 	.word	0x52534642
    e410:	74696220 	.word	0x74696220
    e414:	53203a34 	.word	0x53203a34
    e418:	52454b54 	.word	0x52454b54
    e41c:	00000a52 	.word	0x00000a52
    e420:	20202020 	.word	0x20202020
    e424:	20202020 	.word	0x20202020
    e428:	52534642 	.word	0x52534642
    e42c:	74696220 	.word	0x74696220
    e430:	55203a33 	.word	0x55203a33
    e434:	4b54534e 	.word	0x4b54534e
    e438:	0a525245 	.word	0x0a525245
    e43c:	00000000 	.word	0x00000000
    e440:	20202020 	.word	0x20202020
    e444:	20202020 	.word	0x20202020
    e448:	52534642 	.word	0x52534642
    e44c:	74696220 	.word	0x74696220
    e450:	49203a32 	.word	0x49203a32
    e454:	4552504d 	.word	0x4552504d
    e458:	45534943 	.word	0x45534943
    e45c:	000a5252 	.word	0x000a5252
    e460:	20202020 	.word	0x20202020
    e464:	20202020 	.word	0x20202020
    e468:	52534642 	.word	0x52534642
    e46c:	74696220 	.word	0x74696220
    e470:	50203a31 	.word	0x50203a31
    e474:	49434552 	.word	0x49434552
    e478:	52454553 	.word	0x52454553
    e47c:	00000a52 	.word	0x00000a52
    e480:	20202020 	.word	0x20202020
    e484:	20202020 	.word	0x20202020
    e488:	52534642 	.word	0x52534642
    e48c:	74696220 	.word	0x74696220
    e490:	49203a30 	.word	0x49203a30
    e494:	45535542 	.word	0x45535542
    e498:	000a5252 	.word	0x000a5252
    e49c:	6c6f7041 	.word	0x6c6f7041
    e4a0:	20326f6c 	.word	0x20326f6c
    e4a4:	6c756146 	.word	0x6c756146
    e4a8:	61642074 	.word	0x61642074
    e4ac:	0a3a6174 	.word	0x0a3a6174
    e4b0:	00000000 	.word	0x00000000
    e4b4:	49202020 	.word	0x49202020
    e4b8:	45444f43 	.word	0x45444f43
    e4bc:	75614620 	.word	0x75614620
    e4c0:	4120746c 	.word	0x4120746c
    e4c4:	65726464 	.word	0x65726464
    e4c8:	203a7373 	.word	0x203a7373
    e4cc:	30257830 	.word	0x30257830
    e4d0:	000a5838 	.word	0x000a5838
    e4d4:	44202020 	.word	0x44202020
    e4d8:	45444f43 	.word	0x45444f43
    e4dc:	75614620 	.word	0x75614620
    e4e0:	4120746c 	.word	0x4120746c
    e4e4:	65726464 	.word	0x65726464
    e4e8:	203a7373 	.word	0x203a7373
    e4ec:	30257830 	.word	0x30257830
    e4f0:	000a5838 	.word	0x000a5838
    e4f4:	53202020 	.word	0x53202020
    e4f8:	46205359 	.word	0x46205359
    e4fc:	746c7561 	.word	0x746c7561
    e500:	64644120 	.word	0x64644120
    e504:	73736572 	.word	0x73736572
    e508:	7830203a 	.word	0x7830203a
    e50c:	58383025 	.word	0x58383025
    e510:	0000000a 	.word	0x0000000a
    e514:	0a0a0a0a 	.word	0x0a0a0a0a
    e518:	0a0a0a0a 	.word	0x0a0a0a0a
    e51c:	0a0a0a0a 	.word	0x0a0a0a0a
    e520:	0a0a0a0a 	.word	0x0a0a0a0a
    e524:	00000a0a 	.word	0x00000a0a

0000e528 <g_AM_BSP_GPIO_ITM_SWO>:
    e528:	00000002                                ....

0000e52c <am_hal_cachectrl_defaults>:
    e52c:	00000308                                ....

0000e530 <g_AM_HAL_GPIO_DISABLE>:
    e530:	00000003                                ....

0000e534 <g_ui8Bit76Capabilities>:
    e534:	02800101 80010180 80800101 80808080     ................
    e544:	80808080 80808008 01800180 80808080     ................
    e554:	80808080 01800402 01010401 80808080     ................
    e564:	00000101                                ....

0000e568 <g_ui8Inpen>:
    e568:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e578:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e588:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e598:	00003130                                01..

0000e59c <g_ui8NCEtable>:
    e59c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e5ac:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e5bc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e5cc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e5dc:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e5ec:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e5fc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e60c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e61c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e62c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e63c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e64c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e65c:	32221202 43231303                       .."2..#C

0000e664 <g_ui8nCEpins>:
    e664:	02070707 00080802 01020202 01010101     ................
    e674:	01010101 01010101 01010101 01010101     ................
    e684:	01010101 08010101 01010008 01010101     ................
    e694:	00000101                                ....

0000e698 <g_am_hal_mcuctrl_flash_size>:
    e698:	00004000 00008000 00010000 00020000     .@..............
    e6a8:	00040000 00080000 00100000 00200000     .............. .
	...

0000e6d8 <g_am_hal_mcuctrl_sram_size>:
    e6d8:	00004000 00008000 00010000 00020000     .@..............
    e6e8:	00040000 00080000 00100000 00060000     ................
	...

0000e718 <am_hal_pwrctrl_peripheral_control>:
	...
    e724:	00000001 00000004 00000004 00000002     ................
    e734:	00000008 00000008 00000004 00000008     ................
    e744:	00000008 00000008 00000008 00000008     ................
    e754:	00000010 00000010 00000010 00000020     ............ ...
    e764:	00000010 00000010 00000040 00000010     ........@.......
    e774:	00000010 00000080 00000004 00000004     ................
    e784:	00000100 00000004 00000004 00000200     ................
    e794:	00000020 00000020 00000400 00000004      ... ...........
    e7a4:	00000004 00000800 00000040 00000040     ........@...@...
    e7b4:	00001000 00000080 00000080 00002000     ............. ..
    e7c4:	00000100 00000100                       ........
