
flash_write_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021b4  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000e1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000090c  10001000  0000e1b4  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY
  5 .debug_info   00019408  00000000  00000000  0000e1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028bf  00000000  00000000  000275f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000005e0  00000000  00000000  00029eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001048  00000000  00000000  0002a492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004aa3  00000000  00000000  0002b4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000095a9  00000000  00000000  0002ff7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00039526  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000010f8  00000000  00000000  000395a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003d58  00000000  00000000  0003a69c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 a5 c3 00 00 0d c4 00 00 19 c4 00 00     ................
    c010:	19 c4 00 00 19 c4 00 00 19 c4 00 00 00 00 00 00     ................
	...
    c02c:	13 c4 00 00 13 c4 00 00 00 00 00 00 13 c4 00 00     ................
    c03c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c04c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c05c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c06c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c07c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c08c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c09c:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c0ac:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c0bc:	13 c4 00 00 13 c4 00 00 13 c4 00 00 13 c4 00 00     ................
    c0cc:	13 c4 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b086      	sub	sp, #24
    c1a4:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
    c1a6:	2300      	movs	r3, #0
    c1a8:	617b      	str	r3, [r7, #20]
    uint32_t ui32PrgmAddr;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1aa:	2100      	movs	r1, #0
    c1ac:	2000      	movs	r0, #0
    c1ae:	f001 f8cd 	bl	d34c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b2:	486c      	ldr	r0, [pc, #432]	; (c364 <main+0x1c4>)
    c1b4:	f001 f896 	bl	d2e4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b8:	f001 f8be 	bl	d338 <am_hal_cachectrl_enable>

    //
    // Initialize the peripherals for this board.
    //
    am_bsp_low_power_init();
    c1bc:	f001 f858 	bl	d270 <am_bsp_low_power_init>

    //
    // Enable printing through the ITM interface.
    //
    am_bsp_itm_printf_enable();
    c1c0:	f001 f870 	bl	d2a4 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c1c4:	f001 f84a 	bl	d25c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Flash Write Example\n");
    c1c8:	4867      	ldr	r0, [pc, #412]	; (c368 <main+0x1c8>)
    c1ca:	f001 f829 	bl	d220 <am_util_stdio_printf>

    //
    // Select an arbitrary page address in flash instance 1.
    // 260KB = 0x41000.
    //
    ui32PrgmAddr = ARB_PAGE_ADDRESS;
    c1ce:	f44f 2304 	mov.w	r3, #540672	; 0x84000
    c1d2:	60bb      	str	r3, [r7, #8]

    //
    // Erase the whole block of FLASH instance 1.
    //
    am_util_stdio_printf("  ... erasing all of flash instance %d.\n", AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr) );
    c1d4:	68bb      	ldr	r3, [r7, #8]
    c1d6:	0cdb      	lsrs	r3, r3, #19
    c1d8:	f003 0301 	and.w	r3, r3, #1
    c1dc:	4619      	mov	r1, r3
    c1de:	4863      	ldr	r0, [pc, #396]	; (c36c <main+0x1cc>)
    c1e0:	f001 f81e 	bl	d220 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_mass_erase(AM_HAL_FLASH_PROGRAM_KEY, 1);
    c1e4:	2101      	movs	r1, #1
    c1e6:	4862      	ldr	r0, [pc, #392]	; (c370 <main+0x1d0>)
    c1e8:	f001 f92a 	bl	d440 <am_hal_flash_mass_erase>
    c1ec:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	2b00      	cmp	r3, #0
    c1f2:	d006      	beq.n	c202 <main+0x62>
    {
        am_util_stdio_printf("FLASH_MASS_ERASE i32ReturnCode =  0x%x.\n",
    c1f4:	6879      	ldr	r1, [r7, #4]
    c1f6:	485f      	ldr	r0, [pc, #380]	; (c374 <main+0x1d4>)
    c1f8:	f001 f812 	bl	d220 <am_util_stdio_printf>
                             i32ReturnCode);
        i32ErrorFlag++;
    c1fc:	697b      	ldr	r3, [r7, #20]
    c1fe:	3301      	adds	r3, #1
    c200:	617b      	str	r3, [r7, #20]

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
    c202:	68bb      	ldr	r3, [r7, #8]
    c204:	0cdb      	lsrs	r3, r3, #19
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
    c206:	f003 0101 	and.w	r1, r3, #1
                          AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
    c20a:	68bb      	ldr	r3, [r7, #8]
    c20c:	0b5b      	lsrs	r3, r3, #13
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
    c20e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c212:	461a      	mov	r2, r3
    c214:	4858      	ldr	r0, [pc, #352]	; (c378 <main+0x1d8>)
    c216:	f001 f803 	bl	d220 <am_util_stdio_printf>

    pui32Src = ui32Source;
    c21a:	4b58      	ldr	r3, [pc, #352]	; (c37c <main+0x1dc>)
    c21c:	613b      	str	r3, [r7, #16]
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
    c21e:	f44f 7380 	mov.w	r3, #256	; 0x100
    c222:	60fb      	str	r3, [r7, #12]
    c224:	e007      	b.n	c236 <main+0x96>
    {
        *pui32Src++ = ix;
    c226:	693b      	ldr	r3, [r7, #16]
    c228:	1d1a      	adds	r2, r3, #4
    c22a:	613a      	str	r2, [r7, #16]
    c22c:	68fa      	ldr	r2, [r7, #12]
    c22e:	601a      	str	r2, [r3, #0]
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
    c230:	68fb      	ldr	r3, [r7, #12]
    c232:	3304      	adds	r3, #4
    c234:	60fb      	str	r3, [r7, #12]
    c236:	68fb      	ldr	r3, [r7, #12]
    c238:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c23c:	dbf3      	blt.n	c226 <main+0x86>
    }

    //
    // Program a few words in a page in the main block of instance 1.
    //
    pui32Dst = (uint32_t *) ui32PrgmAddr;
    c23e:	68bb      	ldr	r3, [r7, #8]
    c240:	603b      	str	r3, [r7, #0]
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
    c242:	f44f 7300 	mov.w	r3, #512	; 0x200
    c246:	683a      	ldr	r2, [r7, #0]
    c248:	494c      	ldr	r1, [pc, #304]	; (c37c <main+0x1dc>)
    c24a:	4849      	ldr	r0, [pc, #292]	; (c370 <main+0x1d0>)
    c24c:	f001 f900 	bl	d450 <am_hal_flash_program_main>
    c250:	6078      	str	r0, [r7, #4]
                                              512);

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
    c252:	687b      	ldr	r3, [r7, #4]
    c254:	2b00      	cmp	r3, #0
    c256:	d007      	beq.n	c268 <main+0xc8>
    {
        am_util_stdio_printf("FLASH program page at 0x%08x "
    c258:	687a      	ldr	r2, [r7, #4]
    c25a:	68b9      	ldr	r1, [r7, #8]
    c25c:	4848      	ldr	r0, [pc, #288]	; (c380 <main+0x1e0>)
    c25e:	f000 ffdf 	bl	d220 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             ui32PrgmAddr,
                             i32ReturnCode);
        i32ErrorFlag++;
    c262:	697b      	ldr	r3, [r7, #20]
    c264:	3301      	adds	r3, #1
    c266:	617b      	str	r3, [r7, #20]
    }

    //
    // Check the page just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
    c268:	4846      	ldr	r0, [pc, #280]	; (c384 <main+0x1e4>)
    c26a:	f000 ffd9 	bl	d220 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
    c26e:	2300      	movs	r3, #0
    c270:	60fb      	str	r3, [r7, #12]
    c272:	e020      	b.n	c2b6 <main+0x116>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != ui32Source[ix] )
    c274:	68fb      	ldr	r3, [r7, #12]
    c276:	009b      	lsls	r3, r3, #2
    c278:	461a      	mov	r2, r3
    c27a:	68bb      	ldr	r3, [r7, #8]
    c27c:	4413      	add	r3, r2
    c27e:	681a      	ldr	r2, [r3, #0]
    c280:	493e      	ldr	r1, [pc, #248]	; (c37c <main+0x1dc>)
    c282:	68fb      	ldr	r3, [r7, #12]
    c284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c288:	429a      	cmp	r2, r3
    c28a:	d011      	beq.n	c2b0 <main+0x110>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix * 4),
    c28c:	68fb      	ldr	r3, [r7, #12]
    c28e:	009b      	lsls	r3, r3, #2
    c290:	461a      	mov	r2, r3
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
    c292:	68bb      	ldr	r3, [r7, #8]
    c294:	18d1      	adds	r1, r2, r3
    c296:	4a39      	ldr	r2, [pc, #228]	; (c37c <main+0x1dc>)
    c298:	68fb      	ldr	r3, [r7, #12]
    c29a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                 ui32Source[ix],
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
    c29e:	68fb      	ldr	r3, [r7, #12]
    c2a0:	009b      	lsls	r3, r3, #2
    c2a2:	4618      	mov	r0, r3
    c2a4:	68bb      	ldr	r3, [r7, #8]
    c2a6:	4403      	add	r3, r0
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
    c2a8:	681b      	ldr	r3, [r3, #0]
    c2aa:	4837      	ldr	r0, [pc, #220]	; (c388 <main+0x1e8>)
    c2ac:	f000 ffb8 	bl	d220 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
    c2b0:	68fb      	ldr	r3, [r7, #12]
    c2b2:	3301      	adds	r3, #1
    c2b4:	60fb      	str	r3, [r7, #12]
    c2b6:	68fb      	ldr	r3, [r7, #12]
    c2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c2bc:	dbda      	blt.n	c274 <main+0xd4>
    }

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed.\n");
    c2be:	4833      	ldr	r0, [pc, #204]	; (c38c <main+0x1ec>)
    c2c0:	f000 ffae 	bl	d220 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
                                            AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
    c2c4:	68bb      	ldr	r3, [r7, #8]
    c2c6:	0cdb      	lsrs	r3, r3, #19
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
    c2c8:	f003 0101 	and.w	r1, r3, #1
                                            AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
    c2cc:	68bb      	ldr	r3, [r7, #8]
    c2ce:	0b5b      	lsrs	r3, r3, #13
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
    c2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c2d4:	461a      	mov	r2, r3
    c2d6:	4826      	ldr	r0, [pc, #152]	; (c370 <main+0x1d0>)
    c2d8:	f001 f8b6 	bl	d448 <am_hal_flash_page_erase>
    c2dc:	6078      	str	r0, [r7, #4]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
    c2de:	687b      	ldr	r3, [r7, #4]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d008      	beq.n	c2f6 <main+0x156>
    {
        am_util_stdio_printf(" FLASH erase page at 0x%08x "
    c2e4:	687a      	ldr	r2, [r7, #4]
    c2e6:	f44f 2104 	mov.w	r1, #540672	; 0x84000
    c2ea:	4829      	ldr	r0, [pc, #164]	; (c390 <main+0x1f0>)
    c2ec:	f000 ff98 	bl	d220 <am_util_stdio_printf>
                             "i32ReturnCode =  0x%x.\n",
                             ARB_PAGE_ADDRESS, i32ReturnCode);
        i32ErrorFlag++;
    c2f0:	697b      	ldr	r3, [r7, #20]
    c2f2:	3301      	adds	r3, #1
    c2f4:	617b      	str	r3, [r7, #20]
    }

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
    c2f6:	4827      	ldr	r0, [pc, #156]	; (c394 <main+0x1f4>)
    c2f8:	f000 ff92 	bl	d220 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
    c2fc:	2300      	movs	r3, #0
    c2fe:	60fb      	str	r3, [r7, #12]
    c300:	e01a      	b.n	c338 <main+0x198>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != 0xFFFFFFFF )
    c302:	68fb      	ldr	r3, [r7, #12]
    c304:	009b      	lsls	r3, r3, #2
    c306:	461a      	mov	r2, r3
    c308:	68bb      	ldr	r3, [r7, #8]
    c30a:	4413      	add	r3, r2
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c312:	d00e      	beq.n	c332 <main+0x192>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix*4),
    c314:	68fb      	ldr	r3, [r7, #12]
    c316:	009b      	lsls	r3, r3, #2
    c318:	461a      	mov	r2, r3
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
    c31a:	68bb      	ldr	r3, [r7, #8]
    c31c:	18d1      	adds	r1, r2, r3
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
    c31e:	68fb      	ldr	r3, [r7, #12]
    c320:	009b      	lsls	r3, r3, #2
    c322:	461a      	mov	r2, r3
    c324:	68bb      	ldr	r3, [r7, #8]
    c326:	4413      	add	r3, r2
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	461a      	mov	r2, r3
    c32c:	481a      	ldr	r0, [pc, #104]	; (c398 <main+0x1f8>)
    c32e:	f000 ff77 	bl	d220 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
    c332:	68fb      	ldr	r3, [r7, #12]
    c334:	3301      	adds	r3, #1
    c336:	60fb      	str	r3, [r7, #12]
    c338:	68fb      	ldr	r3, [r7, #12]
    c33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c33e:	dbe0      	blt.n	c302 <main+0x162>
    }

    //
    // Report success or any failures and exit.
    //
    if (i32ErrorFlag)
    c340:	697b      	ldr	r3, [r7, #20]
    c342:	2b00      	cmp	r3, #0
    c344:	d004      	beq.n	c350 <main+0x1b0>
    {
        am_util_stdio_printf("ERROR: FLASH Write example failure %d\n",
    c346:	6979      	ldr	r1, [r7, #20]
    c348:	4814      	ldr	r0, [pc, #80]	; (c39c <main+0x1fc>)
    c34a:	f000 ff69 	bl	d220 <am_util_stdio_printf>
    c34e:	e002      	b.n	c356 <main+0x1b6>
                             i32ErrorFlag);
    }
    else
    {
        am_util_stdio_printf("FLASH Write example successful \n");
    c350:	4813      	ldr	r0, [pc, #76]	; (c3a0 <main+0x200>)
    c352:	f000 ff65 	bl	d220 <am_util_stdio_printf>
    }

    //
    // Verify that ITM is done printing
    //
    am_hal_itm_not_busy();
    c356:	f001 fb6f 	bl	da38 <am_hal_itm_not_busy>

    //
    // Provide return code back to the system.
    //
    return i32ErrorFlag;
    c35a:	697b      	ldr	r3, [r7, #20]
}
    c35c:	4618      	mov	r0, r3
    c35e:	3718      	adds	r7, #24
    c360:	46bd      	mov	sp, r7
    c362:	bd80      	pop	{r7, pc}
    c364:	0000dfc8 	.word	0x0000dfc8
    c368:	0000dcfc 	.word	0x0000dcfc
    c36c:	0000dd14 	.word	0x0000dd14
    c370:	12344321 	.word	0x12344321
    c374:	0000dd40 	.word	0x0000dd40
    c378:	0000dd6c 	.word	0x0000dd6c
    c37c:	10001000 	.word	0x10001000
    c380:	0000dd9c 	.word	0x0000dd9c
    c384:	0000ddd0 	.word	0x0000ddd0
    c388:	0000ddfc 	.word	0x0000ddfc
    c38c:	0000de6c 	.word	0x0000de6c
    c390:	0000de98 	.word	0x0000de98
    c394:	0000decc 	.word	0x0000decc
    c398:	0000def4 	.word	0x0000def4
    c39c:	0000df64 	.word	0x0000df64
    c3a0:	0000df8c 	.word	0x0000df8c

0000c3a4 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c3a4:	4811      	ldr	r0, [pc, #68]	; (c3ec <zero_loop+0x12>)
    c3a6:	4912      	ldr	r1, [pc, #72]	; (c3f0 <zero_loop+0x16>)
    c3a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c3aa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c3ae:	4811      	ldr	r0, [pc, #68]	; (c3f4 <zero_loop+0x1a>)
    c3b0:	6801      	ldr	r1, [r0, #0]
    c3b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c3b6:	6001      	str	r1, [r0, #0]
    c3b8:	f3bf 8f4f 	dsb	sy
    c3bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c3c0:	480d      	ldr	r0, [pc, #52]	; (c3f8 <zero_loop+0x1e>)
    c3c2:	490e      	ldr	r1, [pc, #56]	; (c3fc <zero_loop+0x22>)
    c3c4:	4a0e      	ldr	r2, [pc, #56]	; (c400 <zero_loop+0x26>)

0000c3c6 <copy_loop>:
    c3c6:	f850 3b04 	ldr.w	r3, [r0], #4
    c3ca:	f841 3b04 	str.w	r3, [r1], #4
    c3ce:	4291      	cmp	r1, r2
    c3d0:	dbf9      	blt.n	c3c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c3d2:	480c      	ldr	r0, [pc, #48]	; (c404 <zero_loop+0x2a>)
    c3d4:	490c      	ldr	r1, [pc, #48]	; (c408 <zero_loop+0x2e>)
    c3d6:	f04f 0200 	mov.w	r2, #0

0000c3da <zero_loop>:
    c3da:	4288      	cmp	r0, r1
    c3dc:	bfb8      	it	lt
    c3de:	f840 2b04 	strlt.w	r2, [r0], #4
    c3e2:	dbfa      	blt.n	c3da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c3e4:	f7ff fedc 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c3e8:	be00      	bkpt	0x0000
}
    c3ea:	bf00      	nop
    c3ec:	e000ed08 	.word	0xe000ed08
    c3f0:	0000c000 	.word	0x0000c000
    c3f4:	e000ed88 	.word	0xe000ed88
    c3f8:	0000e1b4 	.word	0x0000e1b4
    c3fc:	10001000 	.word	0x10001000
    c400:	10001000 	.word	0x10001000
    c404:	10001000 	.word	0x10001000
    c408:	1000190c 	.word	0x1000190c

0000c40c <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c40c:	b480      	push	{r7}
    c40e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c410:	e7fe      	b.n	c410 <NMI_Handler+0x4>

0000c412 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c412:	b480      	push	{r7}
    c414:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c416:	e7fe      	b.n	c416 <DebugMon_Handler+0x4>

0000c418 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c418:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c41a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c41c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c41e:	f000 f809 	bl	c434 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c422:	bd01      	pop	{r0, pc}
}
    c424:	bf00      	nop
    c426:	4618      	mov	r0, r3

0000c428 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c428:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c42a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c42c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c42e:	4770      	bx	lr
}
    c430:	bf00      	nop
    c432:	4618      	mov	r0, r3

0000c434 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c434:	b580      	push	{r7, lr}
    c436:	b096      	sub	sp, #88	; 0x58
    c438:	af00      	add	r7, sp, #0
    c43a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c43c:	f107 030c 	add.w	r3, r7, #12
    c440:	2200      	movs	r2, #0
    c442:	601a      	str	r2, [r3, #0]
    c444:	605a      	str	r2, [r3, #4]
    c446:	609a      	str	r2, [r3, #8]
    c448:	60da      	str	r2, [r3, #12]
    c44a:	611a      	str	r2, [r3, #16]
    c44c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c44e:	2300      	movs	r3, #0
    c450:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c454:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c456:	4b2e      	ldr	r3, [pc, #184]	; (c510 <am_util_faultisr_collect_data+0xdc>)
    c458:	681b      	ldr	r3, [r3, #0]
    c45a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c45e:	b2db      	uxtb	r3, r3
    c460:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c466:	0a1b      	lsrs	r3, r3, #8
    c468:	b2db      	uxtb	r3, r3
    c46a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c470:	0c1b      	lsrs	r3, r3, #16
    c472:	b29b      	uxth	r3, r3
    c474:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c478:	4b26      	ldr	r3, [pc, #152]	; (c514 <am_util_faultisr_collect_data+0xe0>)
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c47e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c482:	b2db      	uxtb	r3, r3
    c484:	f003 0302 	and.w	r3, r3, #2
    c488:	2b00      	cmp	r3, #0
    c48a:	d005      	beq.n	c498 <am_util_faultisr_collect_data+0x64>
    c48c:	6879      	ldr	r1, [r7, #4]
    c48e:	2006      	movs	r0, #6
    c490:	f7ff ffca 	bl	c428 <getStackedReg>
    c494:	4603      	mov	r3, r0
    c496:	e001      	b.n	c49c <am_util_faultisr_collect_data+0x68>
    c498:	f04f 33ff 	mov.w	r3, #4294967295
    c49c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c49e:	6879      	ldr	r1, [r7, #4]
    c4a0:	2000      	movs	r0, #0
    c4a2:	f7ff ffc1 	bl	c428 <getStackedReg>
    c4a6:	4603      	mov	r3, r0
    c4a8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c4aa:	6879      	ldr	r1, [r7, #4]
    c4ac:	2001      	movs	r0, #1
    c4ae:	f7ff ffbb 	bl	c428 <getStackedReg>
    c4b2:	4603      	mov	r3, r0
    c4b4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c4b6:	6879      	ldr	r1, [r7, #4]
    c4b8:	2002      	movs	r0, #2
    c4ba:	f7ff ffb5 	bl	c428 <getStackedReg>
    c4be:	4603      	mov	r3, r0
    c4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c4c2:	6879      	ldr	r1, [r7, #4]
    c4c4:	2003      	movs	r0, #3
    c4c6:	f7ff ffaf 	bl	c428 <getStackedReg>
    c4ca:	4603      	mov	r3, r0
    c4cc:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c4ce:	6879      	ldr	r1, [r7, #4]
    c4d0:	2004      	movs	r0, #4
    c4d2:	f7ff ffa9 	bl	c428 <getStackedReg>
    c4d6:	4603      	mov	r3, r0
    c4d8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c4da:	6879      	ldr	r1, [r7, #4]
    c4dc:	2005      	movs	r0, #5
    c4de:	f7ff ffa3 	bl	c428 <getStackedReg>
    c4e2:	4603      	mov	r3, r0
    c4e4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c4e6:	6879      	ldr	r1, [r7, #4]
    c4e8:	2006      	movs	r0, #6
    c4ea:	f7ff ff9d 	bl	c428 <getStackedReg>
    c4ee:	4603      	mov	r3, r0
    c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c4f2:	6879      	ldr	r1, [r7, #4]
    c4f4:	2007      	movs	r0, #7
    c4f6:	f7ff ff97 	bl	c428 <getStackedReg>
    c4fa:	4603      	mov	r3, r0
    c4fc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c4fe:	f107 030c 	add.w	r3, r7, #12
    c502:	4619      	mov	r1, r3
    c504:	2002      	movs	r0, #2
    c506:	f001 fabb 	bl	da80 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c50a:	2300      	movs	r3, #0
    c50c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c50e:	e7fe      	b.n	c50e <am_util_faultisr_collect_data+0xda>
    c510:	e000ed28 	.word	0xe000ed28
    c514:	e000ed38 	.word	0xe000ed38

0000c518 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c518:	b480      	push	{r7}
    c51a:	b083      	sub	sp, #12
    c51c:	af00      	add	r7, sp, #0
    c51e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c520:	4a04      	ldr	r2, [pc, #16]	; (c534 <am_util_stdio_printf_init+0x1c>)
    c522:	687b      	ldr	r3, [r7, #4]
    c524:	6013      	str	r3, [r2, #0]
}
    c526:	bf00      	nop
    c528:	370c      	adds	r7, #12
    c52a:	46bd      	mov	sp, r7
    c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c530:	4770      	bx	lr
    c532:	bf00      	nop
    c534:	10001908 	.word	0x10001908

0000c538 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c538:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c53c:	b096      	sub	sp, #88	; 0x58
    c53e:	af00      	add	r7, sp, #0
    c540:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c544:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c548:	0025      	movs	r5, r4
    c54a:	2600      	movs	r6, #0
    c54c:	ea55 0306 	orrs.w	r3, r5, r6
    c550:	f000 80a0 	beq.w	c694 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c554:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c558:	0862      	lsrs	r2, r4, #1
    c55a:	ea4f 0133 	mov.w	r1, r3, rrx
    c55e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c562:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c566:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c56a:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c56e:	eb11 0308 	adds.w	r3, r1, r8
    c572:	eb42 0409 	adc.w	r4, r2, r9
    c576:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c57a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c57e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c582:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c586:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c58a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c58e:	eb13 030a 	adds.w	r3, r3, sl
    c592:	eb44 040b 	adc.w	r4, r4, fp
    c596:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c59a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c59e:	0a1a      	lsrs	r2, r3, #8
    c5a0:	62ba      	str	r2, [r7, #40]	; 0x28
    c5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c5a4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c5a8:	62ba      	str	r2, [r7, #40]	; 0x28
    c5aa:	0a23      	lsrs	r3, r4, #8
    c5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c5b6:	18c9      	adds	r1, r1, r3
    c5b8:	eb42 0204 	adc.w	r2, r2, r4
    c5bc:	460b      	mov	r3, r1
    c5be:	4614      	mov	r4, r2
    c5c0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c5c4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5c8:	0c1a      	lsrs	r2, r3, #16
    c5ca:	623a      	str	r2, [r7, #32]
    c5cc:	6a3a      	ldr	r2, [r7, #32]
    c5ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c5d2:	623a      	str	r2, [r7, #32]
    c5d4:	0c23      	lsrs	r3, r4, #16
    c5d6:	627b      	str	r3, [r7, #36]	; 0x24
    c5d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c5e0:	18c9      	adds	r1, r1, r3
    c5e2:	eb42 0204 	adc.w	r2, r2, r4
    c5e6:	460b      	mov	r3, r1
    c5e8:	4614      	mov	r4, r2
    c5ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c5ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5f2:	0023      	movs	r3, r4
    c5f4:	603b      	str	r3, [r7, #0]
    c5f6:	2300      	movs	r3, #0
    c5f8:	607b      	str	r3, [r7, #4]
    c5fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5fe:	e897 0006 	ldmia.w	r7, {r1, r2}
    c602:	18c9      	adds	r1, r1, r3
    c604:	eb42 0204 	adc.w	r2, r2, r4
    c608:	460b      	mov	r3, r1
    c60a:	4614      	mov	r4, r2
    c60c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c610:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c614:	08da      	lsrs	r2, r3, #3
    c616:	613a      	str	r2, [r7, #16]
    c618:	693a      	ldr	r2, [r7, #16]
    c61a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c61e:	613a      	str	r2, [r7, #16]
    c620:	08e3      	lsrs	r3, r4, #3
    c622:	617b      	str	r3, [r7, #20]
    c624:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c628:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c62c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c630:	460b      	mov	r3, r1
    c632:	4614      	mov	r4, r2
    c634:	00a0      	lsls	r0, r4, #2
    c636:	60f8      	str	r0, [r7, #12]
    c638:	68f8      	ldr	r0, [r7, #12]
    c63a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c63e:	60f8      	str	r0, [r7, #12]
    c640:	009b      	lsls	r3, r3, #2
    c642:	60bb      	str	r3, [r7, #8]
    c644:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c648:	185b      	adds	r3, r3, r1
    c64a:	eb44 0402 	adc.w	r4, r4, r2
    c64e:	18db      	adds	r3, r3, r3
    c650:	eb44 0404 	adc.w	r4, r4, r4
    c654:	4619      	mov	r1, r3
    c656:	4622      	mov	r2, r4
    c658:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c65c:	1a5b      	subs	r3, r3, r1
    c65e:	eb64 0402 	sbc.w	r4, r4, r2
    c662:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c666:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c66a:	3306      	adds	r3, #6
    c66c:	f144 0400 	adc.w	r4, r4, #0
    c670:	091a      	lsrs	r2, r3, #4
    c672:	61ba      	str	r2, [r7, #24]
    c674:	69ba      	ldr	r2, [r7, #24]
    c676:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c67a:	61ba      	str	r2, [r7, #24]
    c67c:	0923      	lsrs	r3, r4, #4
    c67e:	61fb      	str	r3, [r7, #28]
    c680:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c688:	18c9      	adds	r1, r1, r3
    c68a:	eb42 0204 	adc.w	r2, r2, r4
    c68e:	460b      	mov	r3, r1
    c690:	4614      	mov	r4, r2
    c692:	e029      	b.n	c6e8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c696:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c69a:	085a      	lsrs	r2, r3, #1
    c69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c69e:	089b      	lsrs	r3, r3, #2
    c6a0:	4413      	add	r3, r2
    c6a2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6a6:	091b      	lsrs	r3, r3, #4
    c6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6aa:	4413      	add	r3, r2
    c6ac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6b0:	0a1b      	lsrs	r3, r3, #8
    c6b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6b4:	4413      	add	r3, r2
    c6b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6ba:	0c1b      	lsrs	r3, r3, #16
    c6bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6be:	4413      	add	r3, r2
    c6c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6c4:	08db      	lsrs	r3, r3, #3
    c6c6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c6c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c6ca:	4613      	mov	r3, r2
    c6cc:	009b      	lsls	r3, r3, #2
    c6ce:	4413      	add	r3, r2
    c6d0:	005b      	lsls	r3, r3, #1
    c6d2:	461a      	mov	r2, r3
    c6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c6d6:	1a9b      	subs	r3, r3, r2
    c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6dc:	3306      	adds	r3, #6
    c6de:	091a      	lsrs	r2, r3, #4
    c6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6e2:	4413      	add	r3, r2
    c6e4:	f04f 0400 	mov.w	r4, #0
    }
}
    c6e8:	4618      	mov	r0, r3
    c6ea:	4621      	mov	r1, r4
    c6ec:	3758      	adds	r7, #88	; 0x58
    c6ee:	46bd      	mov	sp, r7
    c6f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6f4:	4770      	bx	lr

0000c6f6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c6f6:	b590      	push	{r4, r7, lr}
    c6f8:	b085      	sub	sp, #20
    c6fa:	af00      	add	r7, sp, #0
    c6fc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c700:	683a      	ldr	r2, [r7, #0]
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	4313      	orrs	r3, r2
    c706:	2b00      	cmp	r3, #0
    c708:	bf0c      	ite	eq
    c70a:	2301      	moveq	r3, #1
    c70c:	2300      	movne	r3, #0
    c70e:	b2db      	uxtb	r3, r3
    c710:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c712:	e008      	b.n	c726 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c714:	e9d7 0100 	ldrd	r0, r1, [r7]
    c718:	f7ff ff0e 	bl	c538 <divu64_10>
    c71c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c720:	68fb      	ldr	r3, [r7, #12]
    c722:	3301      	adds	r3, #1
    c724:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c726:	e897 0018 	ldmia.w	r7, {r3, r4}
    c72a:	4323      	orrs	r3, r4
    c72c:	d1f2      	bne.n	c714 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c72e:	68fb      	ldr	r3, [r7, #12]
}
    c730:	4618      	mov	r0, r3
    c732:	3714      	adds	r7, #20
    c734:	46bd      	mov	sp, r7
    c736:	bd90      	pop	{r4, r7, pc}

0000c738 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c738:	b590      	push	{r4, r7, lr}
    c73a:	b083      	sub	sp, #12
    c73c:	af00      	add	r7, sp, #0
    c73e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c742:	e897 0018 	ldmia.w	r7, {r3, r4}
    c746:	2b00      	cmp	r3, #0
    c748:	f174 0300 	sbcs.w	r3, r4, #0
    c74c:	da06      	bge.n	c75c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c74e:	e897 0018 	ldmia.w	r7, {r3, r4}
    c752:	425b      	negs	r3, r3
    c754:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c758:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c75c:	e897 0018 	ldmia.w	r7, {r3, r4}
    c760:	4618      	mov	r0, r3
    c762:	4621      	mov	r1, r4
    c764:	f7ff ffc7 	bl	c6f6 <ndigits_in_u64>
    c768:	4603      	mov	r3, r0
}
    c76a:	4618      	mov	r0, r3
    c76c:	370c      	adds	r7, #12
    c76e:	46bd      	mov	sp, r7
    c770:	bd90      	pop	{r4, r7, pc}

0000c772 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c772:	b490      	push	{r4, r7}
    c774:	b084      	sub	sp, #16
    c776:	af00      	add	r7, sp, #0
    c778:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c77c:	6839      	ldr	r1, [r7, #0]
    c77e:	687a      	ldr	r2, [r7, #4]
    c780:	430a      	orrs	r2, r1
    c782:	2a00      	cmp	r2, #0
    c784:	bf0c      	ite	eq
    c786:	2201      	moveq	r2, #1
    c788:	2200      	movne	r2, #0
    c78a:	b2d2      	uxtb	r2, r2
    c78c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c78e:	e00a      	b.n	c7a6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c790:	e897 0006 	ldmia.w	r7, {r1, r2}
    c794:	090b      	lsrs	r3, r1, #4
    c796:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c79a:	0914      	lsrs	r4, r2, #4
    c79c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c7a0:	68fa      	ldr	r2, [r7, #12]
    c7a2:	3201      	adds	r2, #1
    c7a4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c7a6:	e897 0006 	ldmia.w	r7, {r1, r2}
    c7aa:	430a      	orrs	r2, r1
    c7ac:	d1f0      	bne.n	c790 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c7ae:	68fb      	ldr	r3, [r7, #12]
}
    c7b0:	4618      	mov	r0, r3
    c7b2:	3710      	adds	r7, #16
    c7b4:	46bd      	mov	sp, r7
    c7b6:	bc90      	pop	{r4, r7}
    c7b8:	4770      	bx	lr

0000c7ba <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c7ba:	b480      	push	{r7}
    c7bc:	b087      	sub	sp, #28
    c7be:	af00      	add	r7, sp, #0
    c7c0:	6078      	str	r0, [r7, #4]
    c7c2:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c7c4:	2300      	movs	r3, #0
    c7c6:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c7c8:	2300      	movs	r3, #0
    c7ca:	613b      	str	r3, [r7, #16]
    c7cc:	2300      	movs	r3, #0
    c7ce:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c7d0:	687b      	ldr	r3, [r7, #4]
    c7d2:	781b      	ldrb	r3, [r3, #0]
    c7d4:	2b2d      	cmp	r3, #45	; 0x2d
    c7d6:	d11b      	bne.n	c810 <decstr_to_int+0x56>
    {
        bNeg = true;
    c7d8:	2301      	movs	r3, #1
    c7da:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	3301      	adds	r3, #1
    c7e0:	607b      	str	r3, [r7, #4]
        uCnt++;
    c7e2:	68fb      	ldr	r3, [r7, #12]
    c7e4:	3301      	adds	r3, #1
    c7e6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7e8:	e012      	b.n	c810 <decstr_to_int+0x56>
    {
        ++uCnt;
    c7ea:	68fb      	ldr	r3, [r7, #12]
    c7ec:	3301      	adds	r3, #1
    c7ee:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c7f0:	693a      	ldr	r2, [r7, #16]
    c7f2:	4613      	mov	r3, r2
    c7f4:	009b      	lsls	r3, r3, #2
    c7f6:	4413      	add	r3, r2
    c7f8:	005b      	lsls	r3, r3, #1
    c7fa:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	781b      	ldrb	r3, [r3, #0]
    c800:	461a      	mov	r2, r3
    c802:	693b      	ldr	r3, [r7, #16]
    c804:	4413      	add	r3, r2
    c806:	3b30      	subs	r3, #48	; 0x30
    c808:	613b      	str	r3, [r7, #16]
        pcStr++;
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	3301      	adds	r3, #1
    c80e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c810:	687b      	ldr	r3, [r7, #4]
    c812:	781b      	ldrb	r3, [r3, #0]
    c814:	2b2f      	cmp	r3, #47	; 0x2f
    c816:	d903      	bls.n	c820 <decstr_to_int+0x66>
    c818:	687b      	ldr	r3, [r7, #4]
    c81a:	781b      	ldrb	r3, [r3, #0]
    c81c:	2b39      	cmp	r3, #57	; 0x39
    c81e:	d9e4      	bls.n	c7ea <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c820:	683b      	ldr	r3, [r7, #0]
    c822:	2b00      	cmp	r3, #0
    c824:	d002      	beq.n	c82c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c826:	683b      	ldr	r3, [r7, #0]
    c828:	68fa      	ldr	r2, [r7, #12]
    c82a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c82c:	7dfb      	ldrb	r3, [r7, #23]
    c82e:	2b00      	cmp	r3, #0
    c830:	d002      	beq.n	c838 <decstr_to_int+0x7e>
    c832:	693b      	ldr	r3, [r7, #16]
    c834:	425b      	negs	r3, r3
    c836:	e000      	b.n	c83a <decstr_to_int+0x80>
    c838:	693b      	ldr	r3, [r7, #16]
}
    c83a:	4618      	mov	r0, r3
    c83c:	371c      	adds	r7, #28
    c83e:	46bd      	mov	sp, r7
    c840:	f85d 7b04 	ldr.w	r7, [sp], #4
    c844:	4770      	bx	lr

0000c846 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c846:	b590      	push	{r4, r7, lr}
    c848:	b091      	sub	sp, #68	; 0x44
    c84a:	af00      	add	r7, sp, #0
    c84c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c850:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c852:	2300      	movs	r3, #0
    c854:	63fb      	str	r3, [r7, #60]	; 0x3c
    c856:	2300      	movs	r3, #0
    c858:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c85a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c85e:	f7ff fe6b 	bl	c538 <divu64_10>
    c862:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c866:	68b9      	ldr	r1, [r7, #8]
    c868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c86a:	4613      	mov	r3, r2
    c86c:	009b      	lsls	r3, r3, #2
    c86e:	4413      	add	r3, r2
    c870:	005b      	lsls	r3, r3, #1
    c872:	1acb      	subs	r3, r1, r3
    c874:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c878:	1c5a      	adds	r2, r3, #1
    c87a:	63fa      	str	r2, [r7, #60]	; 0x3c
    c87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c87e:	b2d2      	uxtb	r2, r2
    c880:	3230      	adds	r2, #48	; 0x30
    c882:	b2d2      	uxtb	r2, r2
    c884:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c888:	440b      	add	r3, r1
    c88a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c88e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c892:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c896:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c89a:	4323      	orrs	r3, r4
    c89c:	d1dd      	bne.n	c85a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c8a0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c8a2:	687b      	ldr	r3, [r7, #4]
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d011      	beq.n	c8cc <uint64_to_str+0x86>
    {
        while ( ix-- )
    c8a8:	e008      	b.n	c8bc <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c8aa:	687b      	ldr	r3, [r7, #4]
    c8ac:	1c5a      	adds	r2, r3, #1
    c8ae:	607a      	str	r2, [r7, #4]
    c8b0:	f107 0110 	add.w	r1, r7, #16
    c8b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c8b6:	440a      	add	r2, r1
    c8b8:	7812      	ldrb	r2, [r2, #0]
    c8ba:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c8be:	1e5a      	subs	r2, r3, #1
    c8c0:	63fa      	str	r2, [r7, #60]	; 0x3c
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d1f1      	bne.n	c8aa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c8c6:	687b      	ldr	r3, [r7, #4]
    c8c8:	2200      	movs	r2, #0
    c8ca:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c8ce:	4618      	mov	r0, r3
    c8d0:	3744      	adds	r7, #68	; 0x44
    c8d2:	46bd      	mov	sp, r7
    c8d4:	bd90      	pop	{r4, r7, pc}

0000c8d6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c8d6:	b4b0      	push	{r4, r5, r7}
    c8d8:	b08d      	sub	sp, #52	; 0x34
    c8da:	af00      	add	r7, sp, #0
    c8dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c8e0:	607a      	str	r2, [r7, #4]
    c8e2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c8e4:	2300      	movs	r3, #0
    c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c8e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c8ec:	4313      	orrs	r3, r2
    c8ee:	d131      	bne.n	c954 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8f2:	1c5a      	adds	r2, r3, #1
    c8f4:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c8fa:	4413      	add	r3, r2
    c8fc:	2230      	movs	r2, #48	; 0x30
    c8fe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c902:	e027      	b.n	c954 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c904:	7a3b      	ldrb	r3, [r7, #8]
    c906:	f003 030f 	and.w	r3, r3, #15
    c90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c90e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c912:	2b09      	cmp	r3, #9
    c914:	d90a      	bls.n	c92c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c916:	78fb      	ldrb	r3, [r7, #3]
    c918:	2b00      	cmp	r3, #0
    c91a:	d001      	beq.n	c920 <uint64_to_hexstr+0x4a>
    c91c:	2227      	movs	r2, #39	; 0x27
    c91e:	e000      	b.n	c922 <uint64_to_hexstr+0x4c>
    c920:	2207      	movs	r2, #7
    c922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c926:	4413      	add	r3, r2
    c928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c92e:	1c5a      	adds	r2, r3, #1
    c930:	62fa      	str	r2, [r7, #44]	; 0x2c
    c932:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c936:	3230      	adds	r2, #48	; 0x30
    c938:	b2d2      	uxtb	r2, r2
    c93a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c93e:	440b      	add	r3, r1
    c940:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c948:	0914      	lsrs	r4, r2, #4
    c94a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c94e:	091d      	lsrs	r5, r3, #4
    c950:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    c954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c958:	4313      	orrs	r3, r2
    c95a:	d1d3      	bne.n	c904 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c95e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	2b00      	cmp	r3, #0
    c964:	d011      	beq.n	c98a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    c966:	e008      	b.n	c97a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	1c5a      	adds	r2, r3, #1
    c96c:	607a      	str	r2, [r7, #4]
    c96e:	f107 0110 	add.w	r1, r7, #16
    c972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c974:	440a      	add	r2, r1
    c976:	7812      	ldrb	r2, [r2, #0]
    c978:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c97c:	1e5a      	subs	r2, r3, #1
    c97e:	62fa      	str	r2, [r7, #44]	; 0x2c
    c980:	2b00      	cmp	r3, #0
    c982:	d1f1      	bne.n	c968 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c984:	687b      	ldr	r3, [r7, #4]
    c986:	2200      	movs	r2, #0
    c988:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c98c:	4618      	mov	r0, r3
    c98e:	3734      	adds	r7, #52	; 0x34
    c990:	46bd      	mov	sp, r7
    c992:	bcb0      	pop	{r4, r5, r7}
    c994:	4770      	bx	lr

0000c996 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c996:	b480      	push	{r7}
    c998:	b085      	sub	sp, #20
    c99a:	af00      	add	r7, sp, #0
    c99c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c99e:	2300      	movs	r3, #0
    c9a0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c9a2:	687b      	ldr	r3, [r7, #4]
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d104      	bne.n	c9b2 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c9a8:	68fb      	ldr	r3, [r7, #12]
    c9aa:	e009      	b.n	c9c0 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c9ac:	68fb      	ldr	r3, [r7, #12]
    c9ae:	3301      	adds	r3, #1
    c9b0:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c9b2:	687b      	ldr	r3, [r7, #4]
    c9b4:	1c5a      	adds	r2, r3, #1
    c9b6:	607a      	str	r2, [r7, #4]
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d1f6      	bne.n	c9ac <simple_strlen+0x16>
    }
    return ui32RetVal;
    c9be:	68fb      	ldr	r3, [r7, #12]
}
    c9c0:	4618      	mov	r0, r3
    c9c2:	3714      	adds	r7, #20
    c9c4:	46bd      	mov	sp, r7
    c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9ca:	4770      	bx	lr

0000c9cc <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c9cc:	b480      	push	{r7}
    c9ce:	b087      	sub	sp, #28
    c9d0:	af00      	add	r7, sp, #0
    c9d2:	60f8      	str	r0, [r7, #12]
    c9d4:	460b      	mov	r3, r1
    c9d6:	607a      	str	r2, [r7, #4]
    c9d8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c9da:	2300      	movs	r3, #0
    c9dc:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c9de:	687b      	ldr	r3, [r7, #4]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	dc0c      	bgt.n	c9fe <padbuffer+0x32>
    {
        return i32Cnt;
    c9e4:	697b      	ldr	r3, [r7, #20]
    c9e6:	e010      	b.n	ca0a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c9e8:	68fb      	ldr	r3, [r7, #12]
    c9ea:	2b00      	cmp	r3, #0
    c9ec:	d004      	beq.n	c9f8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c9ee:	68fb      	ldr	r3, [r7, #12]
    c9f0:	1c5a      	adds	r2, r3, #1
    c9f2:	60fa      	str	r2, [r7, #12]
    c9f4:	7afa      	ldrb	r2, [r7, #11]
    c9f6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c9f8:	697b      	ldr	r3, [r7, #20]
    c9fa:	3301      	adds	r3, #1
    c9fc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	1e5a      	subs	r2, r3, #1
    ca02:	607a      	str	r2, [r7, #4]
    ca04:	2b00      	cmp	r3, #0
    ca06:	d1ef      	bne.n	c9e8 <padbuffer+0x1c>
    }

    return i32Cnt;
    ca08:	697b      	ldr	r3, [r7, #20]
}
    ca0a:	4618      	mov	r0, r3
    ca0c:	371c      	adds	r7, #28
    ca0e:	46bd      	mov	sp, r7
    ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca14:	4770      	bx	lr
	...

0000ca18 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    ca18:	b590      	push	{r4, r7, lr}
    ca1a:	b08f      	sub	sp, #60	; 0x3c
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	60f8      	str	r0, [r7, #12]
    ca20:	60b9      	str	r1, [r7, #8]
    ca22:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ca24:	68bb      	ldr	r3, [r7, #8]
    ca26:	681b      	ldr	r3, [r3, #0]
    ca28:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ca2c:	2b03      	cmp	r3, #3
    ca2e:	dc02      	bgt.n	ca36 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    ca30:	f06f 0302 	mvn.w	r3, #2
    ca34:	e0e7      	b.n	cc06 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    ca36:	edd7 7a03 	vldr	s15, [r7, #12]
    ca3a:	eef5 7a40 	vcmp.f32	s15, #0.0
    ca3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca42:	d104      	bne.n	ca4e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ca44:	68bb      	ldr	r3, [r7, #8]
    ca46:	4a72      	ldr	r2, [pc, #456]	; (cc10 <ftoa+0x1f8>)
    ca48:	601a      	str	r2, [r3, #0]
        return 3;
    ca4a:	2303      	movs	r3, #3
    ca4c:	e0db      	b.n	cc06 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    ca4e:	68bb      	ldr	r3, [r7, #8]
    ca50:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    ca52:	68fb      	ldr	r3, [r7, #12]
    ca54:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ca56:	693b      	ldr	r3, [r7, #16]
    ca58:	15db      	asrs	r3, r3, #23
    ca5a:	b2db      	uxtb	r3, r3
    ca5c:	3b7f      	subs	r3, #127	; 0x7f
    ca5e:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ca60:	693b      	ldr	r3, [r7, #16]
    ca62:	f3c3 0316 	ubfx	r3, r3, #0, #23
    ca66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    ca6a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    ca6c:	2300      	movs	r3, #0
    ca6e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    ca70:	2300      	movs	r3, #0
    ca72:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    ca74:	69fb      	ldr	r3, [r7, #28]
    ca76:	2b1e      	cmp	r3, #30
    ca78:	dd02      	ble.n	ca80 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    ca7a:	f06f 0301 	mvn.w	r3, #1
    ca7e:	e0c2      	b.n	cc06 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    ca80:	69fb      	ldr	r3, [r7, #28]
    ca82:	f113 0f17 	cmn.w	r3, #23
    ca86:	da02      	bge.n	ca8e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    ca88:	f04f 33ff 	mov.w	r3, #4294967295
    ca8c:	e0bb      	b.n	cc06 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    ca8e:	69fb      	ldr	r3, [r7, #28]
    ca90:	2b16      	cmp	r3, #22
    ca92:	dd06      	ble.n	caa2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ca94:	69fb      	ldr	r3, [r7, #28]
    ca96:	3b17      	subs	r3, #23
    ca98:	69ba      	ldr	r2, [r7, #24]
    ca9a:	fa02 f303 	lsl.w	r3, r2, r3
    ca9e:	637b      	str	r3, [r7, #52]	; 0x34
    caa0:	e01a      	b.n	cad8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    caa2:	69fb      	ldr	r3, [r7, #28]
    caa4:	2b00      	cmp	r3, #0
    caa6:	db0f      	blt.n	cac8 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    caa8:	69fb      	ldr	r3, [r7, #28]
    caaa:	f1c3 0317 	rsb	r3, r3, #23
    caae:	69ba      	ldr	r2, [r7, #24]
    cab0:	fa42 f303 	asr.w	r3, r2, r3
    cab4:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cab6:	69fb      	ldr	r3, [r7, #28]
    cab8:	3301      	adds	r3, #1
    caba:	69ba      	ldr	r2, [r7, #24]
    cabc:	fa02 f303 	lsl.w	r3, r2, r3
    cac0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cac4:	633b      	str	r3, [r7, #48]	; 0x30
    cac6:	e007      	b.n	cad8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cac8:	69bb      	ldr	r3, [r7, #24]
    caca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cace:	69fb      	ldr	r3, [r7, #28]
    cad0:	43db      	mvns	r3, r3
    cad2:	fa42 f303 	asr.w	r3, r2, r3
    cad6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cad8:	693b      	ldr	r3, [r7, #16]
    cada:	2b00      	cmp	r3, #0
    cadc:	da04      	bge.n	cae8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cade:	68bb      	ldr	r3, [r7, #8]
    cae0:	1c5a      	adds	r2, r3, #1
    cae2:	60ba      	str	r2, [r7, #8]
    cae4:	222d      	movs	r2, #45	; 0x2d
    cae6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    caea:	2b00      	cmp	r3, #0
    caec:	d105      	bne.n	cafa <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    caee:	68bb      	ldr	r3, [r7, #8]
    caf0:	1c5a      	adds	r2, r3, #1
    caf2:	60ba      	str	r2, [r7, #8]
    caf4:	2230      	movs	r2, #48	; 0x30
    caf6:	701a      	strb	r2, [r3, #0]
    caf8:	e021      	b.n	cb3e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cafc:	2b00      	cmp	r3, #0
    cafe:	dd08      	ble.n	cb12 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cb02:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cb06:	68ba      	ldr	r2, [r7, #8]
    cb08:	4618      	mov	r0, r3
    cb0a:	4621      	mov	r1, r4
    cb0c:	f7ff fe9b 	bl	c846 <uint64_to_str>
    cb10:	e011      	b.n	cb36 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cb12:	68bb      	ldr	r3, [r7, #8]
    cb14:	1c5a      	adds	r2, r3, #1
    cb16:	60ba      	str	r2, [r7, #8]
    cb18:	222d      	movs	r2, #45	; 0x2d
    cb1a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cb1e:	425b      	negs	r3, r3
    cb20:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cb24:	68ba      	ldr	r2, [r7, #8]
    cb26:	4618      	mov	r0, r3
    cb28:	4621      	mov	r1, r4
    cb2a:	f7ff fe8c 	bl	c846 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cb2e:	e002      	b.n	cb36 <ftoa+0x11e>
        {
            pcBuf++;
    cb30:	68bb      	ldr	r3, [r7, #8]
    cb32:	3301      	adds	r3, #1
    cb34:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cb36:	68bb      	ldr	r3, [r7, #8]
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d1f8      	bne.n	cb30 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cb3e:	68bb      	ldr	r3, [r7, #8]
    cb40:	1c5a      	adds	r2, r3, #1
    cb42:	60ba      	str	r2, [r7, #8]
    cb44:	222e      	movs	r2, #46	; 0x2e
    cb46:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d105      	bne.n	cb5a <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cb4e:	68bb      	ldr	r3, [r7, #8]
    cb50:	1c5a      	adds	r2, r3, #1
    cb52:	60ba      	str	r2, [r7, #8]
    cb54:	2230      	movs	r2, #48	; 0x30
    cb56:	701a      	strb	r2, [r3, #0]
    cb58:	e04f      	b.n	cbfa <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cb5a:	68ba      	ldr	r2, [r7, #8]
    cb5c:	6a3b      	ldr	r3, [r7, #32]
    cb5e:	1ad3      	subs	r3, r2, r3
    cb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cb62:	1ad3      	subs	r3, r2, r3
    cb64:	3b01      	subs	r3, #1
    cb66:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cb68:	697a      	ldr	r2, [r7, #20]
    cb6a:	687b      	ldr	r3, [r7, #4]
    cb6c:	4293      	cmp	r3, r2
    cb6e:	bfa8      	it	ge
    cb70:	4613      	movge	r3, r2
    cb72:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cb74:	2300      	movs	r3, #0
    cb76:	62bb      	str	r3, [r7, #40]	; 0x28
    cb78:	e015      	b.n	cba6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cb7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb7c:	4613      	mov	r3, r2
    cb7e:	009b      	lsls	r3, r3, #2
    cb80:	4413      	add	r3, r2
    cb82:	005b      	lsls	r3, r3, #1
    cb84:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cb86:	68bb      	ldr	r3, [r7, #8]
    cb88:	1c5a      	adds	r2, r3, #1
    cb8a:	60ba      	str	r2, [r7, #8]
    cb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb8e:	1612      	asrs	r2, r2, #24
    cb90:	b2d2      	uxtb	r2, r2
    cb92:	3230      	adds	r2, #48	; 0x30
    cb94:	b2d2      	uxtb	r2, r2
    cb96:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb9e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cba2:	3301      	adds	r3, #1
    cba4:	62bb      	str	r3, [r7, #40]	; 0x28
    cba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cba8:	697b      	ldr	r3, [r7, #20]
    cbaa:	429a      	cmp	r2, r3
    cbac:	dbe5      	blt.n	cb7a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cbae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cbb0:	4613      	mov	r3, r2
    cbb2:	009b      	lsls	r3, r3, #2
    cbb4:	4413      	add	r3, r2
    cbb6:	005b      	lsls	r3, r3, #1
    cbb8:	161b      	asrs	r3, r3, #24
    cbba:	2b04      	cmp	r3, #4
    cbbc:	dd1d      	ble.n	cbfa <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cbbe:	68bb      	ldr	r3, [r7, #8]
    cbc0:	3b01      	subs	r3, #1
    cbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cbc4:	e015      	b.n	cbf2 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	2b2e      	cmp	r3, #46	; 0x2e
    cbcc:	d00e      	beq.n	cbec <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbd0:	781b      	ldrb	r3, [r3, #0]
    cbd2:	2b39      	cmp	r3, #57	; 0x39
    cbd4:	d103      	bne.n	cbde <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbd8:	2230      	movs	r2, #48	; 0x30
    cbda:	701a      	strb	r2, [r3, #0]
    cbdc:	e006      	b.n	cbec <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	3301      	adds	r3, #1
    cbe4:	b2da      	uxtb	r2, r3
    cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbe8:	701a      	strb	r2, [r3, #0]
                    break;
    cbea:	e006      	b.n	cbfa <ftoa+0x1e2>
                }
                pcBuftmp--;
    cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbee:	3b01      	subs	r3, #1
    cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cbf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cbf4:	6a3b      	ldr	r3, [r7, #32]
    cbf6:	429a      	cmp	r2, r3
    cbf8:	d2e5      	bcs.n	cbc6 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cbfa:	68bb      	ldr	r3, [r7, #8]
    cbfc:	2200      	movs	r2, #0
    cbfe:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cc00:	68ba      	ldr	r2, [r7, #8]
    cc02:	6a3b      	ldr	r3, [r7, #32]
    cc04:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cc06:	4618      	mov	r0, r3
    cc08:	373c      	adds	r7, #60	; 0x3c
    cc0a:	46bd      	mov	sp, r7
    cc0c:	bd90      	pop	{r4, r7, pc}
    cc0e:	bf00      	nop
    cc10:	00302e30 	.word	0x00302e30

0000cc14 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cc14:	b590      	push	{r4, r7, lr}
    cc16:	b095      	sub	sp, #84	; 0x54
    cc18:	af00      	add	r7, sp, #0
    cc1a:	60f8      	str	r0, [r7, #12]
    cc1c:	60b9      	str	r1, [r7, #8]
    cc1e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc20:	2300      	movs	r3, #0
    cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cc24:	2300      	movs	r3, #0
    cc26:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cc28:	e2e3      	b.n	d1f2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cc2a:	2306      	movs	r3, #6
    cc2c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cc2e:	68bb      	ldr	r3, [r7, #8]
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	2b25      	cmp	r3, #37	; 0x25
    cc34:	d01f      	beq.n	cc76 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cc36:	68fb      	ldr	r3, [r7, #12]
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d015      	beq.n	cc68 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cc3c:	68bb      	ldr	r3, [r7, #8]
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	2b0a      	cmp	r3, #10
    cc42:	d10b      	bne.n	cc5c <am_util_stdio_vsprintf+0x48>
    cc44:	4bb1      	ldr	r3, [pc, #708]	; (cf0c <am_util_stdio_vsprintf+0x2f8>)
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d007      	beq.n	cc5c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cc4c:	68fb      	ldr	r3, [r7, #12]
    cc4e:	1c5a      	adds	r2, r3, #1
    cc50:	60fa      	str	r2, [r7, #12]
    cc52:	220d      	movs	r2, #13
    cc54:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc58:	3301      	adds	r3, #1
    cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cc5c:	68fb      	ldr	r3, [r7, #12]
    cc5e:	1c5a      	adds	r2, r3, #1
    cc60:	60fa      	str	r2, [r7, #12]
    cc62:	68ba      	ldr	r2, [r7, #8]
    cc64:	7812      	ldrb	r2, [r2, #0]
    cc66:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cc68:	68bb      	ldr	r3, [r7, #8]
    cc6a:	3301      	adds	r3, #1
    cc6c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc70:	3301      	adds	r3, #1
    cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cc74:	e2bd      	b.n	d1f2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cc76:	68bb      	ldr	r3, [r7, #8]
    cc78:	3301      	adds	r3, #1
    cc7a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cc7c:	2300      	movs	r3, #0
    cc7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cc82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cc86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cc8a:	2320      	movs	r3, #32
    cc8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cc90:	68bb      	ldr	r3, [r7, #8]
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	2b30      	cmp	r3, #48	; 0x30
    cc96:	d105      	bne.n	cca4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cc98:	2330      	movs	r3, #48	; 0x30
    cc9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cc9e:	68bb      	ldr	r3, [r7, #8]
    cca0:	3301      	adds	r3, #1
    cca2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cca4:	f107 0310 	add.w	r3, r7, #16
    cca8:	4619      	mov	r1, r3
    ccaa:	68b8      	ldr	r0, [r7, #8]
    ccac:	f7ff fd85 	bl	c7ba <decstr_to_int>
    ccb0:	4603      	mov	r3, r0
    ccb2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    ccb4:	693b      	ldr	r3, [r7, #16]
    ccb6:	68ba      	ldr	r2, [r7, #8]
    ccb8:	4413      	add	r3, r2
    ccba:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ccbc:	68bb      	ldr	r3, [r7, #8]
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	2b73      	cmp	r3, #115	; 0x73
    ccc2:	d005      	beq.n	ccd0 <am_util_stdio_vsprintf+0xbc>
    ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	da02      	bge.n	ccd0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cccc:	425b      	negs	r3, r3
    ccce:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ccd0:	68bb      	ldr	r3, [r7, #8]
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	2b2e      	cmp	r3, #46	; 0x2e
    ccd6:	d10e      	bne.n	ccf6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    ccd8:	68bb      	ldr	r3, [r7, #8]
    ccda:	3301      	adds	r3, #1
    ccdc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ccde:	f107 0310 	add.w	r3, r7, #16
    cce2:	4619      	mov	r1, r3
    cce4:	68b8      	ldr	r0, [r7, #8]
    cce6:	f7ff fd68 	bl	c7ba <decstr_to_int>
    ccea:	4603      	mov	r3, r0
    ccec:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    ccee:	693b      	ldr	r3, [r7, #16]
    ccf0:	68ba      	ldr	r2, [r7, #8]
    ccf2:	4413      	add	r3, r2
    ccf4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ccf6:	68bb      	ldr	r3, [r7, #8]
    ccf8:	781b      	ldrb	r3, [r3, #0]
    ccfa:	2b6c      	cmp	r3, #108	; 0x6c
    ccfc:	d10c      	bne.n	cd18 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    ccfe:	68bb      	ldr	r3, [r7, #8]
    cd00:	3301      	adds	r3, #1
    cd02:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cd04:	68bb      	ldr	r3, [r7, #8]
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	2b6c      	cmp	r3, #108	; 0x6c
    cd0a:	d105      	bne.n	cd18 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cd0c:	68bb      	ldr	r3, [r7, #8]
    cd0e:	3301      	adds	r3, #1
    cd10:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cd12:	2301      	movs	r3, #1
    cd14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cd18:	68bb      	ldr	r3, [r7, #8]
    cd1a:	781b      	ldrb	r3, [r3, #0]
    cd1c:	3b46      	subs	r3, #70	; 0x46
    cd1e:	2b32      	cmp	r3, #50	; 0x32
    cd20:	f200 8254 	bhi.w	d1cc <am_util_stdio_vsprintf+0x5b8>
    cd24:	a201      	add	r2, pc, #4	; (adr r2, cd2c <am_util_stdio_vsprintf+0x118>)
    cd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd2a:	bf00      	nop
    cd2c:	0000d157 	.word	0x0000d157
    cd30:	0000d1cd 	.word	0x0000d1cd
    cd34:	0000d1cd 	.word	0x0000d1cd
    cd38:	0000d1cd 	.word	0x0000d1cd
    cd3c:	0000d1cd 	.word	0x0000d1cd
    cd40:	0000d1cd 	.word	0x0000d1cd
    cd44:	0000d1cd 	.word	0x0000d1cd
    cd48:	0000d1cd 	.word	0x0000d1cd
    cd4c:	0000d1cd 	.word	0x0000d1cd
    cd50:	0000d1cd 	.word	0x0000d1cd
    cd54:	0000d1cd 	.word	0x0000d1cd
    cd58:	0000d1cd 	.word	0x0000d1cd
    cd5c:	0000d1cd 	.word	0x0000d1cd
    cd60:	0000d1cd 	.word	0x0000d1cd
    cd64:	0000d1cd 	.word	0x0000d1cd
    cd68:	0000d1cd 	.word	0x0000d1cd
    cd6c:	0000d1cd 	.word	0x0000d1cd
    cd70:	0000d1cd 	.word	0x0000d1cd
    cd74:	0000cef3 	.word	0x0000cef3
    cd78:	0000d1cd 	.word	0x0000d1cd
    cd7c:	0000d1cd 	.word	0x0000d1cd
    cd80:	0000d1cd 	.word	0x0000d1cd
    cd84:	0000d1cd 	.word	0x0000d1cd
    cd88:	0000d1cd 	.word	0x0000d1cd
    cd8c:	0000d1cd 	.word	0x0000d1cd
    cd90:	0000d1cd 	.word	0x0000d1cd
    cd94:	0000d1cd 	.word	0x0000d1cd
    cd98:	0000d1cd 	.word	0x0000d1cd
    cd9c:	0000d1cd 	.word	0x0000d1cd
    cda0:	0000cdf9 	.word	0x0000cdf9
    cda4:	0000d01f 	.word	0x0000d01f
    cda8:	0000d1cd 	.word	0x0000d1cd
    cdac:	0000d157 	.word	0x0000d157
    cdb0:	0000d1cd 	.word	0x0000d1cd
    cdb4:	0000d1cd 	.word	0x0000d1cd
    cdb8:	0000d01f 	.word	0x0000d01f
    cdbc:	0000d1cd 	.word	0x0000d1cd
    cdc0:	0000d1cd 	.word	0x0000d1cd
    cdc4:	0000d1cd 	.word	0x0000d1cd
    cdc8:	0000d1cd 	.word	0x0000d1cd
    cdcc:	0000d1cd 	.word	0x0000d1cd
    cdd0:	0000d1cd 	.word	0x0000d1cd
    cdd4:	0000d1cd 	.word	0x0000d1cd
    cdd8:	0000d1cd 	.word	0x0000d1cd
    cddc:	0000d1cd 	.word	0x0000d1cd
    cde0:	0000ce1f 	.word	0x0000ce1f
    cde4:	0000d1cd 	.word	0x0000d1cd
    cde8:	0000cf8d 	.word	0x0000cf8d
    cdec:	0000d1cd 	.word	0x0000d1cd
    cdf0:	0000d1cd 	.word	0x0000d1cd
    cdf4:	0000ceed 	.word	0x0000ceed
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cdf8:	687b      	ldr	r3, [r7, #4]
    cdfa:	1d1a      	adds	r2, r3, #4
    cdfc:	607a      	str	r2, [r7, #4]
    cdfe:	681b      	ldr	r3, [r3, #0]
    ce00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    ce04:	68fb      	ldr	r3, [r7, #12]
    ce06:	2b00      	cmp	r3, #0
    ce08:	d005      	beq.n	ce16 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    ce0a:	68fb      	ldr	r3, [r7, #12]
    ce0c:	1c5a      	adds	r2, r3, #1
    ce0e:	60fa      	str	r2, [r7, #12]
    ce10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    ce14:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ce16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce18:	3301      	adds	r3, #1
    ce1a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    ce1c:	e1e6      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	1d1a      	adds	r2, r3, #4
    ce22:	607a      	str	r2, [r7, #4]
    ce24:	681b      	ldr	r3, [r3, #0]
    ce26:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    ce28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    ce2a:	f7ff fdb4 	bl	c996 <simple_strlen>
    ce2e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce32:	2b00      	cmp	r3, #0
    ce34:	dd2e      	ble.n	ce94 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce3a:	429a      	cmp	r2, r3
    ce3c:	d22a      	bcs.n	ce94 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce42:	1ad3      	subs	r3, r2, r3
    ce44:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce4c:	4619      	mov	r1, r3
    ce4e:	68f8      	ldr	r0, [r7, #12]
    ce50:	f7ff fdbc 	bl	c9cc <padbuffer>
    ce54:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ce56:	68fb      	ldr	r3, [r7, #12]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d001      	beq.n	ce60 <am_util_stdio_vsprintf+0x24c>
    ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce5e:	e000      	b.n	ce62 <am_util_stdio_vsprintf+0x24e>
    ce60:	2300      	movs	r3, #0
    ce62:	68fa      	ldr	r2, [r7, #12]
    ce64:	4413      	add	r3, r2
    ce66:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce6c:	4413      	add	r3, r2
    ce6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce70:	2300      	movs	r3, #0
    ce72:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    ce74:	e00e      	b.n	ce94 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    ce76:	68fb      	ldr	r3, [r7, #12]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d005      	beq.n	ce88 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    ce7c:	68fb      	ldr	r3, [r7, #12]
    ce7e:	1c5a      	adds	r2, r3, #1
    ce80:	60fa      	str	r2, [r7, #12]
    ce82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ce84:	7812      	ldrb	r2, [r2, #0]
    ce86:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ce88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce8a:	3301      	adds	r3, #1
    ce8c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    ce8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce90:	3301      	adds	r3, #1
    ce92:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    ce94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d1ec      	bne.n	ce76 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce9e:	2b00      	cmp	r3, #0
    cea0:	f000 81a1 	beq.w	d1e6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cea6:	425b      	negs	r3, r3
    cea8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ceae:	429a      	cmp	r2, r3
    ceb0:	f080 8199 	bcs.w	d1e6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ceb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ceb8:	1ad3      	subs	r3, r2, r3
    ceba:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cec2:	4619      	mov	r1, r3
    cec4:	68f8      	ldr	r0, [r7, #12]
    cec6:	f7ff fd81 	bl	c9cc <padbuffer>
    ceca:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cecc:	68fb      	ldr	r3, [r7, #12]
    cece:	2b00      	cmp	r3, #0
    ced0:	d001      	beq.n	ced6 <am_util_stdio_vsprintf+0x2c2>
    ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ced4:	e000      	b.n	ced8 <am_util_stdio_vsprintf+0x2c4>
    ced6:	2300      	movs	r3, #0
    ced8:	68fa      	ldr	r2, [r7, #12]
    ceda:	4413      	add	r3, r2
    cedc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cee2:	4413      	add	r3, r2
    cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cee6:	2300      	movs	r3, #0
    cee8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    ceea:	e17c      	b.n	d1e6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    ceec:	2301      	movs	r3, #1
    ceee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cef2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cef6:	2b00      	cmp	r3, #0
    cef8:	d00a      	beq.n	cf10 <am_util_stdio_vsprintf+0x2fc>
    cefa:	687b      	ldr	r3, [r7, #4]
    cefc:	3307      	adds	r3, #7
    cefe:	f023 0307 	bic.w	r3, r3, #7
    cf02:	f103 0208 	add.w	r2, r3, #8
    cf06:	607a      	str	r2, [r7, #4]
    cf08:	cb18      	ldmia	r3, {r3, r4}
    cf0a:	e007      	b.n	cf1c <am_util_stdio_vsprintf+0x308>
    cf0c:	10001900 	.word	0x10001900
                                      va_arg(pArgs, uint32_t);
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	1d1a      	adds	r2, r3, #4
    cf14:	607a      	str	r2, [r7, #4]
    cf16:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf18:	f04f 0400 	mov.w	r4, #0
    cf1c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf22:	2b00      	cmp	r3, #0
    cf24:	d01e      	beq.n	cf64 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cf26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf2a:	f7ff fc22 	bl	c772 <ndigits_in_hex>
    cf2e:	4602      	mov	r2, r0
    cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf32:	1a9b      	subs	r3, r3, r2
    cf34:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf3c:	4619      	mov	r1, r3
    cf3e:	68f8      	ldr	r0, [r7, #12]
    cf40:	f7ff fd44 	bl	c9cc <padbuffer>
    cf44:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf46:	68fb      	ldr	r3, [r7, #12]
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d001      	beq.n	cf50 <am_util_stdio_vsprintf+0x33c>
    cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf4e:	e000      	b.n	cf52 <am_util_stdio_vsprintf+0x33e>
    cf50:	2300      	movs	r3, #0
    cf52:	68fa      	ldr	r2, [r7, #12]
    cf54:	4413      	add	r3, r2
    cf56:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf5c:	4413      	add	r3, r2
    cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf60:	2300      	movs	r3, #0
    cf62:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cf64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cf68:	68fa      	ldr	r2, [r7, #12]
    cf6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf6e:	f7ff fcb2 	bl	c8d6 <uint64_to_hexstr>
    cf72:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d003      	beq.n	cf82 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf7c:	68fa      	ldr	r2, [r7, #12]
    cf7e:	4413      	add	r3, r2
    cf80:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf86:	4413      	add	r3, r2
    cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf8a:	e12f      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf90:	2b00      	cmp	r3, #0
    cf92:	d008      	beq.n	cfa6 <am_util_stdio_vsprintf+0x392>
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	3307      	adds	r3, #7
    cf98:	f023 0307 	bic.w	r3, r3, #7
    cf9c:	f103 0208 	add.w	r2, r3, #8
    cfa0:	607a      	str	r2, [r7, #4]
    cfa2:	cb18      	ldmia	r3, {r3, r4}
    cfa4:	e005      	b.n	cfb2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    cfa6:	687b      	ldr	r3, [r7, #4]
    cfa8:	1d1a      	adds	r2, r3, #4
    cfaa:	607a      	str	r2, [r7, #4]
    cfac:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfae:	f04f 0400 	mov.w	r4, #0
    cfb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d01e      	beq.n	cffa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cfbc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cfc0:	f7ff fb99 	bl	c6f6 <ndigits_in_u64>
    cfc4:	4602      	mov	r2, r0
    cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfc8:	1a9b      	subs	r3, r3, r2
    cfca:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfd2:	4619      	mov	r1, r3
    cfd4:	68f8      	ldr	r0, [r7, #12]
    cfd6:	f7ff fcf9 	bl	c9cc <padbuffer>
    cfda:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cfdc:	68fb      	ldr	r3, [r7, #12]
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d001      	beq.n	cfe6 <am_util_stdio_vsprintf+0x3d2>
    cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfe4:	e000      	b.n	cfe8 <am_util_stdio_vsprintf+0x3d4>
    cfe6:	2300      	movs	r3, #0
    cfe8:	68fa      	ldr	r2, [r7, #12]
    cfea:	4413      	add	r3, r2
    cfec:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cff2:	4413      	add	r3, r2
    cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cff6:	2300      	movs	r3, #0
    cff8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cffa:	68fa      	ldr	r2, [r7, #12]
    cffc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d000:	f7ff fc21 	bl	c846 <uint64_to_str>
    d004:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d006:	68fb      	ldr	r3, [r7, #12]
    d008:	2b00      	cmp	r3, #0
    d00a:	d003      	beq.n	d014 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d00e:	68fa      	ldr	r2, [r7, #12]
    d010:	4413      	add	r3, r2
    d012:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d018:	4413      	add	r3, r2
    d01a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d01c:	e0e6      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d01e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d022:	2b00      	cmp	r3, #0
    d024:	d008      	beq.n	d038 <am_util_stdio_vsprintf+0x424>
    d026:	687b      	ldr	r3, [r7, #4]
    d028:	3307      	adds	r3, #7
    d02a:	f023 0307 	bic.w	r3, r3, #7
    d02e:	f103 0208 	add.w	r2, r3, #8
    d032:	607a      	str	r2, [r7, #4]
    d034:	cb18      	ldmia	r3, {r3, r4}
    d036:	e005      	b.n	d044 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d038:	687b      	ldr	r3, [r7, #4]
    d03a:	1d1a      	adds	r2, r3, #4
    d03c:	607a      	str	r2, [r7, #4]
    d03e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d040:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d044:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d048:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d04c:	2b00      	cmp	r3, #0
    d04e:	f174 0300 	sbcs.w	r3, r4, #0
    d052:	da0a      	bge.n	d06a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d054:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d058:	425b      	negs	r3, r3
    d05a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d05e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d062:	2301      	movs	r3, #1
    d064:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d068:	e006      	b.n	d078 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d06a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d06e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d072:	2300      	movs	r3, #0
    d074:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d07a:	2b00      	cmp	r3, #0
    d07c:	d04a      	beq.n	d114 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d07e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d082:	4618      	mov	r0, r3
    d084:	4621      	mov	r1, r4
    d086:	f7ff fb57 	bl	c738 <ndigits_in_i64>
    d08a:	4602      	mov	r2, r0
    d08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d08e:	1a9b      	subs	r3, r3, r2
    d090:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d092:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d096:	2b00      	cmp	r3, #0
    d098:	d011      	beq.n	d0be <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d09c:	3b01      	subs	r3, #1
    d09e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d0a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0a4:	2b30      	cmp	r3, #48	; 0x30
    d0a6:	d10a      	bne.n	d0be <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d0a8:	68fb      	ldr	r3, [r7, #12]
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d004      	beq.n	d0b8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d0ae:	68fb      	ldr	r3, [r7, #12]
    d0b0:	1c5a      	adds	r2, r3, #1
    d0b2:	60fa      	str	r2, [r7, #12]
    d0b4:	222d      	movs	r2, #45	; 0x2d
    d0b6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0ba:	3301      	adds	r3, #1
    d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0c4:	4619      	mov	r1, r3
    d0c6:	68f8      	ldr	r0, [r7, #12]
    d0c8:	f7ff fc80 	bl	c9cc <padbuffer>
    d0cc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d0ce:	68fb      	ldr	r3, [r7, #12]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d001      	beq.n	d0d8 <am_util_stdio_vsprintf+0x4c4>
    d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0d6:	e000      	b.n	d0da <am_util_stdio_vsprintf+0x4c6>
    d0d8:	2300      	movs	r3, #0
    d0da:	68fa      	ldr	r2, [r7, #12]
    d0dc:	4413      	add	r3, r2
    d0de:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0e4:	4413      	add	r3, r2
    d0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0e8:	2300      	movs	r3, #0
    d0ea:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d0ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d01e      	beq.n	d132 <am_util_stdio_vsprintf+0x51e>
    d0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0f8:	2b20      	cmp	r3, #32
    d0fa:	d11a      	bne.n	d132 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d0fc:	68fb      	ldr	r3, [r7, #12]
    d0fe:	2b00      	cmp	r3, #0
    d100:	d004      	beq.n	d10c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d102:	68fb      	ldr	r3, [r7, #12]
    d104:	1c5a      	adds	r2, r3, #1
    d106:	60fa      	str	r2, [r7, #12]
    d108:	222d      	movs	r2, #45	; 0x2d
    d10a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d10e:	3301      	adds	r3, #1
    d110:	63fb      	str	r3, [r7, #60]	; 0x3c
    d112:	e00e      	b.n	d132 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d114:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d118:	2b00      	cmp	r3, #0
    d11a:	d00a      	beq.n	d132 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d11c:	68fb      	ldr	r3, [r7, #12]
    d11e:	2b00      	cmp	r3, #0
    d120:	d004      	beq.n	d12c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	1c5a      	adds	r2, r3, #1
    d126:	60fa      	str	r2, [r7, #12]
    d128:	222d      	movs	r2, #45	; 0x2d
    d12a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d12e:	3301      	adds	r3, #1
    d130:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d132:	68fa      	ldr	r2, [r7, #12]
    d134:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d138:	f7ff fb85 	bl	c846 <uint64_to_str>
    d13c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d13e:	68fb      	ldr	r3, [r7, #12]
    d140:	2b00      	cmp	r3, #0
    d142:	d003      	beq.n	d14c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d146:	68fa      	ldr	r2, [r7, #12]
    d148:	4413      	add	r3, r2
    d14a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d14e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d150:	4413      	add	r3, r2
    d152:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d154:	e04a      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	2b00      	cmp	r3, #0
    d15a:	d046      	beq.n	d1ea <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	3307      	adds	r3, #7
    d160:	f023 0307 	bic.w	r3, r3, #7
    d164:	f103 0208 	add.w	r2, r3, #8
    d168:	607a      	str	r2, [r7, #4]
    d16a:	cb18      	ldmia	r3, {r3, r4}
    d16c:	4618      	mov	r0, r3
    d16e:	4621      	mov	r1, r4
    d170:	f7fe ffc6 	bl	c100 <__aeabi_d2f>
    d174:	4603      	mov	r3, r0
    d176:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d178:	68fb      	ldr	r3, [r7, #12]
    d17a:	2214      	movs	r2, #20
    d17c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d180:	68f9      	ldr	r1, [r7, #12]
    d182:	6978      	ldr	r0, [r7, #20]
    d184:	f7ff fc48 	bl	ca18 <ftoa>
    d188:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d18c:	2b00      	cmp	r3, #0
    d18e:	da14      	bge.n	d1ba <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d192:	f1b3 3fff 	cmp.w	r3, #4294967295
    d196:	d102      	bne.n	d19e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d198:	4b1e      	ldr	r3, [pc, #120]	; (d214 <am_util_stdio_vsprintf+0x600>)
    d19a:	62bb      	str	r3, [r7, #40]	; 0x28
    d19c:	e008      	b.n	d1b0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1a0:	f113 0f02 	cmn.w	r3, #2
    d1a4:	d102      	bne.n	d1ac <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d1a6:	4b1c      	ldr	r3, [pc, #112]	; (d218 <am_util_stdio_vsprintf+0x604>)
    d1a8:	62bb      	str	r3, [r7, #40]	; 0x28
    d1aa:	e001      	b.n	d1b0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d1ac:	4b1b      	ldr	r3, [pc, #108]	; (d21c <am_util_stdio_vsprintf+0x608>)
    d1ae:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1b0:	68fb      	ldr	r3, [r7, #12]
    d1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d1b4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d1b6:	2303      	movs	r3, #3
    d1b8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1be:	4413      	add	r3, r2
    d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1c4:	68fa      	ldr	r2, [r7, #12]
    d1c6:	4413      	add	r3, r2
    d1c8:	60fb      	str	r3, [r7, #12]
                }
                break;
    d1ca:	e00e      	b.n	d1ea <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d1cc:	68fb      	ldr	r3, [r7, #12]
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d005      	beq.n	d1de <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d1d2:	68fb      	ldr	r3, [r7, #12]
    d1d4:	1c5a      	adds	r2, r3, #1
    d1d6:	60fa      	str	r2, [r7, #12]
    d1d8:	68ba      	ldr	r2, [r7, #8]
    d1da:	7812      	ldrb	r2, [r2, #0]
    d1dc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1e0:	3301      	adds	r3, #1
    d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d1e4:	e002      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>
                break;
    d1e6:	bf00      	nop
    d1e8:	e000      	b.n	d1ec <am_util_stdio_vsprintf+0x5d8>
                break;
    d1ea:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d1ec:	68bb      	ldr	r3, [r7, #8]
    d1ee:	3301      	adds	r3, #1
    d1f0:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d1f2:	68bb      	ldr	r3, [r7, #8]
    d1f4:	781b      	ldrb	r3, [r3, #0]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	f47f ad17 	bne.w	cc2a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d1fc:	68fb      	ldr	r3, [r7, #12]
    d1fe:	2b00      	cmp	r3, #0
    d200:	d002      	beq.n	d208 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d202:	68fb      	ldr	r3, [r7, #12]
    d204:	2200      	movs	r2, #0
    d206:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d20a:	4618      	mov	r0, r3
    d20c:	3754      	adds	r7, #84	; 0x54
    d20e:	46bd      	mov	sp, r7
    d210:	bd90      	pop	{r4, r7, pc}
    d212:	bf00      	nop
    d214:	00302e30 	.word	0x00302e30
    d218:	00232e23 	.word	0x00232e23
    d21c:	003f2e3f 	.word	0x003f2e3f

0000d220 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d220:	b40f      	push	{r0, r1, r2, r3}
    d222:	b580      	push	{r7, lr}
    d224:	b082      	sub	sp, #8
    d226:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d228:	f107 0314 	add.w	r3, r7, #20
    d22c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d22e:	683a      	ldr	r2, [r7, #0]
    d230:	6939      	ldr	r1, [r7, #16]
    d232:	4808      	ldr	r0, [pc, #32]	; (d254 <am_util_stdio_printf+0x34>)
    d234:	f7ff fcee 	bl	cc14 <am_util_stdio_vsprintf>
    d238:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d23a:	4b07      	ldr	r3, [pc, #28]	; (d258 <am_util_stdio_printf+0x38>)
    d23c:	681b      	ldr	r3, [r3, #0]
    d23e:	4805      	ldr	r0, [pc, #20]	; (d254 <am_util_stdio_printf+0x34>)
    d240:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d242:	687b      	ldr	r3, [r7, #4]
}
    d244:	4618      	mov	r0, r3
    d246:	3708      	adds	r7, #8
    d248:	46bd      	mov	sp, r7
    d24a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d24e:	b004      	add	sp, #16
    d250:	4770      	bx	lr
    d252:	bf00      	nop
    d254:	10001800 	.word	0x10001800
    d258:	10001908 	.word	0x10001908

0000d25c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d25c:	b580      	push	{r7, lr}
    d25e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d260:	4802      	ldr	r0, [pc, #8]	; (d26c <am_util_stdio_terminal_clear+0x10>)
    d262:	f7ff ffdd 	bl	d220 <am_util_stdio_printf>
}
    d266:	bf00      	nop
    d268:	bd80      	pop	{r7, pc}
    d26a:	bf00      	nop
    d26c:	0000dfb0 	.word	0x0000dfb0

0000d270 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d270:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d272:	f000 fb8d 	bl	d990 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d276:	2000      	movs	r0, #0
    d278:	f7ff f94e 	bl	c518 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d27c:	4b08      	ldr	r3, [pc, #32]	; (d2a0 <am_bsp_low_power_init+0x30>)
    d27e:	2029      	movs	r0, #41	; 0x29
    d280:	6819      	ldr	r1, [r3, #0]
    d282:	f000 fa1d 	bl	d6c0 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d286:	f000 fc93 	bl	dbb0 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d28a:	2001      	movs	r0, #1
    d28c:	f000 fcce 	bl	dc2c <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d290:	2100      	movs	r1, #0
    d292:	2003      	movs	r0, #3
    d294:	f000 f85a 	bl	d34c <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d29c:	f000 bcd2 	b.w	dc44 <am_hal_rtc_osc_disable>
    d2a0:	0000dfcc 	.word	0x0000dfcc

0000d2a4 <am_bsp_itm_printf_enable>:
{
    d2a4:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d2a6:	4b0b      	ldr	r3, [pc, #44]	; (d2d4 <am_bsp_itm_printf_enable+0x30>)
{
    d2a8:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d2aa:	2201      	movs	r2, #1
    d2ac:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d2ae:	f000 fb51 	bl	d954 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d2b2:	a806      	add	r0, sp, #24
    d2b4:	4908      	ldr	r1, [pc, #32]	; (d2d8 <am_bsp_itm_printf_enable+0x34>)
    d2b6:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d2ba:	f000 fccd 	bl	dc58 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d2be:	4b07      	ldr	r3, [pc, #28]	; (d2dc <am_bsp_itm_printf_enable+0x38>)
    d2c0:	2029      	movs	r0, #41	; 0x29
    d2c2:	6819      	ldr	r1, [r3, #0]
    d2c4:	f000 f9fc 	bl	d6c0 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d2c8:	4805      	ldr	r0, [pc, #20]	; (d2e0 <am_bsp_itm_printf_enable+0x3c>)
    d2ca:	f7ff f925 	bl	c518 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d2ce:	b007      	add	sp, #28
    d2d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2d4:	10001904 	.word	0x10001904
    d2d8:	000f4240 	.word	0x000f4240
    d2dc:	0000dfc4 	.word	0x0000dfc4
    d2e0:	0000da4d 	.word	0x0000da4d

0000d2e4 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d2e4:	b530      	push	{r4, r5, lr}
    d2e6:	b083      	sub	sp, #12
    d2e8:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d2ea:	f000 fb2b 	bl	d944 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d2ee:	4c11      	ldr	r4, [pc, #68]	; (d334 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d2f0:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d2f2:	6823      	ldr	r3, [r4, #0]
    d2f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d2f8:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d2fa:	9801      	ldr	r0, [sp, #4]
    d2fc:	f000 fb26 	bl	d94c <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d300:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d302:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d304:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d306:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d308:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d30a:	005d      	lsls	r5, r3, #1
    d30c:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d310:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d312:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d314:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d318:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d31a:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d31e:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d322:	0212      	lsls	r2, r2, #8
    d324:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d328:	432b      	orrs	r3, r5
    d32a:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d32c:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d32e:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d330:	b003      	add	sp, #12
    d332:	bd30      	pop	{r4, r5, pc}
    d334:	40018000 	.word	0x40018000

0000d338 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d338:	4a03      	ldr	r2, [pc, #12]	; (d348 <am_hal_cachectrl_enable+0x10>)
    d33a:	6813      	ldr	r3, [r2, #0]
    d33c:	f043 0001 	orr.w	r0, r3, #1
    d340:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d342:	2000      	movs	r0, #0
    d344:	4770      	bx	lr
    d346:	bf00      	nop
    d348:	40018000 	.word	0x40018000

0000d34c <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d34c:	2809      	cmp	r0, #9
    d34e:	d852      	bhi.n	d3f6 <am_hal_clkgen_control+0xaa>
    d350:	e8df f000 	tbb	[pc, r0]
    d354:	2b21190d 	.word	0x2b21190d
    d358:	51513d33 	.word	0x51513d33
    d35c:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d35e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d362:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d364:	6a1a      	ldr	r2, [r3, #32]
    d366:	f36f 0200 	bfc	r2, #0, #1
    d36a:	621a      	str	r2, [r3, #32]
            break;
    d36c:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d36e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d372:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d374:	2047      	movs	r0, #71	; 0x47
    d376:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d37a:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d37e:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d380:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d384:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d386:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d38a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d38c:	68ca      	ldr	r2, [r1, #12]
    d38e:	f022 0301 	bic.w	r3, r2, #1
    d392:	60cb      	str	r3, [r1, #12]
            break;
    d394:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d396:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d39a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d39c:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d3a0:	f022 0302 	bic.w	r3, r2, #2
    d3a4:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d3a8:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d3aa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d3ae:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d3b0:	68d3      	ldr	r3, [r2, #12]
    d3b2:	f043 0101 	orr.w	r1, r3, #1
    d3b6:	60d1      	str	r1, [r2, #12]
            break;
    d3b8:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d3ba:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d3be:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d3c0:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d3c4:	f043 0102 	orr.w	r1, r3, #2
    d3c8:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d3cc:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d3ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d3d2:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d3d4:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d3d6:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d3d8:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d3da:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d3dc:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d3de:	615a      	str	r2, [r3, #20]
            break;
    d3e0:	4770      	bx	lr
            if ( pArgs == 0 )
    d3e2:	b151      	cbz	r1, d3fa <am_hal_clkgen_control+0xae>
    d3e4:	6808      	ldr	r0, [r1, #0]
    d3e6:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d3ea:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d3ee:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d3f0:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d3f4:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d3f6:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d3f8:	4770      	bx	lr
    d3fa:	4901      	ldr	r1, [pc, #4]	; (d400 <am_hal_clkgen_control+0xb4>)
    d3fc:	e7f5      	b.n	d3ea <am_hal_clkgen_control+0x9e>
    d3fe:	bf00      	nop
    d400:	0025b801 	.word	0x0025b801

0000d404 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d404:	b1a8      	cbz	r0, d432 <am_hal_clkgen_status_get+0x2e>
{
    d406:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d408:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d40c:	490a      	ldr	r1, [pc, #40]	; (d438 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d40e:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d410:	4b0a      	ldr	r3, [pc, #40]	; (d43c <am_hal_clkgen_status_get+0x38>)
    d412:	f014 0f01 	tst.w	r4, #1
    d416:	bf08      	it	eq
    d418:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d41a:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d41c:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d41e:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d422:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d426:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    d428:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d42e:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    d430:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d432:	2006      	movs	r0, #6
    d434:	4770      	bx	lr
    d436:	bf00      	nop
    d438:	02dc6c00 	.word	0x02dc6c00
    d43c:	016e3600 	.word	0x016e3600

0000d440 <am_hal_flash_mass_erase>:
//
//*****************************************************************************
int
am_hal_flash_mass_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst)
{
    return g_am_hal_flash.flash_mass_erase(ui32ProgramKey, ui32FlashInst);
    d440:	4b00      	ldr	r3, [pc, #0]	; (d444 <am_hal_flash_mass_erase+0x4>)
    d442:	4718      	bx	r3
    d444:	0800004d 	.word	0x0800004d

0000d448 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    d448:	4b00      	ldr	r3, [pc, #0]	; (d44c <am_hal_flash_page_erase+0x4>)
    d44a:	4718      	bx	r3
    d44c:	08000051 	.word	0x08000051

0000d450 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    d450:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    d452:	4c02      	ldr	r4, [pc, #8]	; (d45c <am_hal_flash_program_main+0xc>)
    d454:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    d456:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    d45a:	4760      	bx	ip
    d45c:	08000055 	.word	0x08000055

0000d460 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d460:	4b00      	ldr	r3, [pc, #0]	; (d464 <am_hal_flash_delay+0x4>)
    d462:	4718      	bx	r3
    d464:	0800009d 	.word	0x0800009d

0000d468 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    d468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d46c:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d470:	f8df 8248 	ldr.w	r8, [pc, #584]	; d6bc <am_hal_flash_delay_status_check+0x254>
{
    d474:	4607      	mov	r7, r0
    d476:	460c      	mov	r4, r1
    d478:	4615      	mov	r5, r2
    d47a:	461e      	mov	r6, r3
    d47c:	f1be 0f00 	cmp.w	lr, #0
    d480:	f000 808e 	beq.w	d5a0 <am_hal_flash_delay_status_check+0x138>
    d484:	f010 0907 	ands.w	r9, r0, #7
    d488:	d044      	beq.n	d514 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d48a:	680b      	ldr	r3, [r1, #0]
    d48c:	4013      	ands	r3, r2
    d48e:	429e      	cmp	r6, r3
    d490:	f000 8083 	beq.w	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d494:	2001      	movs	r0, #1
    d496:	47c0      	blx	r8
    d498:	f1b9 0f01 	cmp.w	r9, #1
    d49c:	f107 37ff 	add.w	r7, r7, #4294967295
    d4a0:	d038      	beq.n	d514 <am_hal_flash_delay_status_check+0xac>
    d4a2:	f1b9 0f02 	cmp.w	r9, #2
    d4a6:	d02e      	beq.n	d506 <am_hal_flash_delay_status_check+0x9e>
    d4a8:	f1b9 0f03 	cmp.w	r9, #3
    d4ac:	d024      	beq.n	d4f8 <am_hal_flash_delay_status_check+0x90>
    d4ae:	f1b9 0f04 	cmp.w	r9, #4
    d4b2:	d01a      	beq.n	d4ea <am_hal_flash_delay_status_check+0x82>
    d4b4:	f1b9 0f05 	cmp.w	r9, #5
    d4b8:	d010      	beq.n	d4dc <am_hal_flash_delay_status_check+0x74>
    d4ba:	f1b9 0f06 	cmp.w	r9, #6
    d4be:	d006      	beq.n	d4ce <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4c0:	6820      	ldr	r0, [r4, #0]
    d4c2:	4028      	ands	r0, r5
    d4c4:	4286      	cmp	r6, r0
    d4c6:	d068      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4c8:	2001      	movs	r0, #1
    d4ca:	47c0      	blx	r8
    d4cc:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4ce:	6821      	ldr	r1, [r4, #0]
    d4d0:	4029      	ands	r1, r5
    d4d2:	428e      	cmp	r6, r1
    d4d4:	d061      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4d6:	2001      	movs	r0, #1
    d4d8:	47c0      	blx	r8
    d4da:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4dc:	6822      	ldr	r2, [r4, #0]
    d4de:	402a      	ands	r2, r5
    d4e0:	4296      	cmp	r6, r2
    d4e2:	d05a      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4e4:	2001      	movs	r0, #1
    d4e6:	47c0      	blx	r8
    d4e8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4ea:	6823      	ldr	r3, [r4, #0]
    d4ec:	402b      	ands	r3, r5
    d4ee:	429e      	cmp	r6, r3
    d4f0:	d053      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d4f2:	2001      	movs	r0, #1
    d4f4:	47c0      	blx	r8
    d4f6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d4f8:	6820      	ldr	r0, [r4, #0]
    d4fa:	4028      	ands	r0, r5
    d4fc:	4286      	cmp	r6, r0
    d4fe:	d04c      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d500:	2001      	movs	r0, #1
    d502:	47c0      	blx	r8
    d504:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d506:	6821      	ldr	r1, [r4, #0]
    d508:	4029      	ands	r1, r5
    d50a:	428e      	cmp	r6, r1
    d50c:	d045      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d50e:	2001      	movs	r0, #1
    d510:	3f01      	subs	r7, #1
    d512:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d514:	6822      	ldr	r2, [r4, #0]
    d516:	402a      	ands	r2, r5
    d518:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d51a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d51e:	d03c      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    d520:	2f00      	cmp	r7, #0
    d522:	f000 80c8 	beq.w	d6b6 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d526:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d528:	6823      	ldr	r3, [r4, #0]
    d52a:	402b      	ands	r3, r5
    d52c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d52e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d532:	d032      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d534:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d536:	6821      	ldr	r1, [r4, #0]
    d538:	4029      	ands	r1, r5
    d53a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d53c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d540:	d02b      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d542:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d544:	6822      	ldr	r2, [r4, #0]
    d546:	402a      	ands	r2, r5
    d548:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d54a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d54e:	d024      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d550:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d552:	6823      	ldr	r3, [r4, #0]
    d554:	402b      	ands	r3, r5
    d556:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d558:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d55c:	d01d      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d55e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d560:	6821      	ldr	r1, [r4, #0]
    d562:	4029      	ands	r1, r5
    d564:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d566:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d56a:	d016      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d56c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d56e:	6822      	ldr	r2, [r4, #0]
    d570:	402a      	ands	r2, r5
    d572:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d574:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d578:	d00f      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d57a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d57c:	6820      	ldr	r0, [r4, #0]
    d57e:	4028      	ands	r0, r5
    d580:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d582:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d586:	d008      	beq.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d588:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d58a:	6822      	ldr	r2, [r4, #0]
    d58c:	402a      	ands	r2, r5
    d58e:	4296      	cmp	r6, r2
    d590:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d594:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    d598:	d1c2      	bne.n	d520 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    d59a:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    d59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d5a0:	f010 0907 	ands.w	r9, r0, #7
    d5a4:	d043      	beq.n	d62e <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5a6:	680b      	ldr	r3, [r1, #0]
    d5a8:	4013      	ands	r3, r2
    d5aa:	429e      	cmp	r6, r3
    d5ac:	d1f5      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5ae:	2001      	movs	r0, #1
    d5b0:	47c0      	blx	r8
    d5b2:	f1b9 0f01 	cmp.w	r9, #1
    d5b6:	f107 37ff 	add.w	r7, r7, #4294967295
    d5ba:	d038      	beq.n	d62e <am_hal_flash_delay_status_check+0x1c6>
    d5bc:	f1b9 0f02 	cmp.w	r9, #2
    d5c0:	d02e      	beq.n	d620 <am_hal_flash_delay_status_check+0x1b8>
    d5c2:	f1b9 0f03 	cmp.w	r9, #3
    d5c6:	d024      	beq.n	d612 <am_hal_flash_delay_status_check+0x1aa>
    d5c8:	f1b9 0f04 	cmp.w	r9, #4
    d5cc:	d01a      	beq.n	d604 <am_hal_flash_delay_status_check+0x19c>
    d5ce:	f1b9 0f05 	cmp.w	r9, #5
    d5d2:	d010      	beq.n	d5f6 <am_hal_flash_delay_status_check+0x18e>
    d5d4:	f1b9 0f06 	cmp.w	r9, #6
    d5d8:	d006      	beq.n	d5e8 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5da:	6821      	ldr	r1, [r4, #0]
    d5dc:	4029      	ands	r1, r5
    d5de:	428e      	cmp	r6, r1
    d5e0:	d1db      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5e2:	2001      	movs	r0, #1
    d5e4:	47c0      	blx	r8
    d5e6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5e8:	6822      	ldr	r2, [r4, #0]
    d5ea:	402a      	ands	r2, r5
    d5ec:	4296      	cmp	r6, r2
    d5ee:	d1d4      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5f0:	2001      	movs	r0, #1
    d5f2:	47c0      	blx	r8
    d5f4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d5f6:	6820      	ldr	r0, [r4, #0]
    d5f8:	4028      	ands	r0, r5
    d5fa:	4286      	cmp	r6, r0
    d5fc:	d1cd      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d5fe:	2001      	movs	r0, #1
    d600:	47c0      	blx	r8
    d602:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d604:	6823      	ldr	r3, [r4, #0]
    d606:	402b      	ands	r3, r5
    d608:	429e      	cmp	r6, r3
    d60a:	d1c6      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d60c:	2001      	movs	r0, #1
    d60e:	47c0      	blx	r8
    d610:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d612:	6821      	ldr	r1, [r4, #0]
    d614:	4029      	ands	r1, r5
    d616:	428e      	cmp	r6, r1
    d618:	d1bf      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d61a:	2001      	movs	r0, #1
    d61c:	47c0      	blx	r8
    d61e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d620:	6822      	ldr	r2, [r4, #0]
    d622:	402a      	ands	r2, r5
    d624:	4296      	cmp	r6, r2
    d626:	d1b8      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d628:	2001      	movs	r0, #1
    d62a:	3f01      	subs	r7, #1
    d62c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d62e:	6823      	ldr	r3, [r4, #0]
    d630:	402b      	ands	r3, r5
    d632:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d634:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d638:	d1af      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    d63a:	2f00      	cmp	r7, #0
    d63c:	d03b      	beq.n	d6b6 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d63e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d640:	6821      	ldr	r1, [r4, #0]
    d642:	4029      	ands	r1, r5
    d644:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d646:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d64a:	d1a6      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d64c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d64e:	6822      	ldr	r2, [r4, #0]
    d650:	402a      	ands	r2, r5
    d652:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d654:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d658:	d19f      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d65a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d65c:	6823      	ldr	r3, [r4, #0]
    d65e:	402b      	ands	r3, r5
    d660:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d662:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d666:	d198      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d668:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d66a:	6821      	ldr	r1, [r4, #0]
    d66c:	4029      	ands	r1, r5
    d66e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d670:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d674:	d191      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d676:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d678:	6822      	ldr	r2, [r4, #0]
    d67a:	402a      	ands	r2, r5
    d67c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d67e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d682:	d18a      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d684:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d686:	6823      	ldr	r3, [r4, #0]
    d688:	402b      	ands	r3, r5
    d68a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d68c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d690:	d183      	bne.n	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d692:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d694:	6820      	ldr	r0, [r4, #0]
    d696:	4028      	ands	r0, r5
    d698:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d69a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d69e:	f47f af7c 	bne.w	d59a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6a2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6a4:	6823      	ldr	r3, [r4, #0]
    d6a6:	402b      	ands	r3, r5
    d6a8:	429e      	cmp	r6, r3
    d6aa:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d6ae:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    d6b2:	d0c2      	beq.n	d63a <am_hal_flash_delay_status_check+0x1d2>
    d6b4:	e771      	b.n	d59a <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    d6b6:	2004      	movs	r0, #4
    d6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6bc:	0800009d 	.word	0x0800009d

0000d6c0 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d6c0:	2831      	cmp	r0, #49	; 0x31
    d6c2:	d901      	bls.n	d6c8 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d6c4:	2006      	movs	r0, #6
    d6c6:	4770      	bx	lr
{
    d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d6cc:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d6d0:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    d6d4:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d6d6:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d6da:	d014      	beq.n	d706 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d6dc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d6e0:	1db2      	adds	r2, r6, #6
    d6e2:	f002 0707 	and.w	r7, r2, #7
    d6e6:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d6e8:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d6ec:	f200 80ab 	bhi.w	d846 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d6f0:	4a85      	ldr	r2, [pc, #532]	; (d908 <am_hal_gpio_pinconfig+0x248>)
    d6f2:	5c17      	ldrb	r7, [r2, r0]
    d6f4:	07ff      	lsls	r7, r7, #31
    d6f6:	d403      	bmi.n	d700 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d6f8:	4884      	ldr	r0, [pc, #528]	; (d90c <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    d6fa:	b007      	add	sp, #28
    d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d700:	1eb4      	subs	r4, r6, #2
    d702:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d706:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d70a:	2e00      	cmp	r6, #0
    d70c:	f040 8095 	bne.w	d83a <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d710:	4a7f      	ldr	r2, [pc, #508]	; (d910 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d712:	4f80      	ldr	r7, [pc, #512]	; (d914 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d714:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d716:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d71a:	411e      	asrs	r6, r3
    d71c:	f016 0f01 	tst.w	r6, #1
    d720:	bf0c      	ite	eq
    d722:	2600      	moveq	r6, #0
    d724:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d726:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d728:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d72c:	f000 8097 	beq.w	d85e <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d730:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d734:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d736:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d73a:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d73e:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d740:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d744:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d748:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d74c:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d750:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d752:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d756:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d75a:	f000 808d 	beq.w	d878 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    d75e:	4a6e      	ldr	r2, [pc, #440]	; (d918 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d760:	6816      	ldr	r6, [r2, #0]
    d762:	1b8c      	subs	r4, r1, r6
    d764:	fab4 f384 	clz	r3, r4
    d768:	095f      	lsrs	r7, r3, #5
    d76a:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    d76c:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d770:	bf04      	itt	eq
    d772:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    d776:	f367 0800 	bfieq	r8, r7, #0, #1
    d77a:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    d77c:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d780:	2902      	cmp	r1, #2
    d782:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    d786:	d07a      	beq.n	d87e <am_hal_gpio_pinconfig+0x1be>
    d788:	d87f      	bhi.n	d88a <am_hal_gpio_pinconfig+0x1ca>
    d78a:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d78c:	bf08      	it	eq
    d78e:	f045 0504 	orreq.w	r5, r5, #4
    d792:	f004 0a18 	and.w	sl, r4, #24
            break;
    d796:	2200      	movs	r2, #0
    d798:	4604      	mov	r4, r0
    d79a:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d79c:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d7a0:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d7a4:	485d      	ldr	r0, [pc, #372]	; (d91c <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d7a6:	495e      	ldr	r1, [pc, #376]	; (d920 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d7a8:	4f5e      	ldr	r7, [pc, #376]	; (d924 <am_hal_gpio_pinconfig+0x264>)
    d7aa:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d7ac:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d7b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d7b4:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d7b8:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d7ba:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d7be:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d7c0:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    d7c4:	f000 f8be 	bl	d944 <am_hal_interrupt_master_disable>
    d7c8:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    d7ca:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d7ce:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    d7d2:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d7d6:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d7da:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d7dc:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    d7e0:	9902      	ldr	r1, [sp, #8]
    d7e2:	9a03      	ldr	r2, [sp, #12]
    d7e4:	b150      	cbz	r0, d7fc <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d7e6:	f004 001f 	and.w	r0, r4, #31
    d7ea:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    d7ee:	f04f 0c01 	mov.w	ip, #1
    d7f2:	4c4d      	ldr	r4, [pc, #308]	; (d928 <am_hal_gpio_pinconfig+0x268>)
    d7f4:	fa0c f000 	lsl.w	r0, ip, r0
    d7f8:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d7fc:	484b      	ldr	r0, [pc, #300]	; (d92c <am_hal_gpio_pinconfig+0x26c>)
    d7fe:	2473      	movs	r4, #115	; 0x73
    d800:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d802:	f8da 4000 	ldr.w	r4, [sl]
    d806:	4034      	ands	r4, r6
    d808:	4325      	orrs	r5, r4
    d80a:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d80e:	f859 5001 	ldr.w	r5, [r9, r1]
    d812:	402f      	ands	r7, r5
    d814:	ea47 0708 	orr.w	r7, r7, r8
    d818:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d81c:	f85b 1003 	ldr.w	r1, [fp, r3]
    d820:	400e      	ands	r6, r1
    d822:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    d824:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d826:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    d82a:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    d82c:	9805      	ldr	r0, [sp, #20]
    d82e:	f000 f88d 	bl	d94c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    d832:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    d834:	b007      	add	sp, #28
    d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d83a:	2e01      	cmp	r6, #1
    d83c:	d015      	beq.n	d86a <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d83e:	2e02      	cmp	r6, #2
    d840:	d030      	beq.n	d8a4 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    d842:	483b      	ldr	r0, [pc, #236]	; (d930 <am_hal_gpio_pinconfig+0x270>)
    d844:	e759      	b.n	d6fa <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d846:	2cc0      	cmp	r4, #192	; 0xc0
    d848:	d027      	beq.n	d89a <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d84a:	2c20      	cmp	r4, #32
    d84c:	f47f af5b 	bne.w	d706 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d850:	4c2d      	ldr	r4, [pc, #180]	; (d908 <am_hal_gpio_pinconfig+0x248>)
    d852:	5c26      	ldrb	r6, [r4, r0]
    d854:	f016 0f09 	tst.w	r6, #9
    d858:	f47f af4e 	bne.w	d6f8 <am_hal_gpio_pinconfig+0x38>
    d85c:	e753      	b.n	d706 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d85e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d862:	2a07      	cmp	r2, #7
    d864:	d125      	bne.n	d8b2 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d866:	4833      	ldr	r0, [pc, #204]	; (d934 <am_hal_gpio_pinconfig+0x274>)
    d868:	e747      	b.n	d6fa <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d86a:	4c27      	ldr	r4, [pc, #156]	; (d908 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d86c:	5c26      	ldrb	r6, [r4, r0]
    d86e:	07b4      	lsls	r4, r6, #30
    d870:	d5e7      	bpl.n	d842 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d872:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    d876:	e74b      	b.n	d710 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    d878:	2701      	movs	r7, #1
    d87a:	9700      	str	r7, [sp, #0]
    d87c:	e776      	b.n	d76c <am_hal_gpio_pinconfig+0xac>
    d87e:	f004 0a18 	and.w	sl, r4, #24
    d882:	2301      	movs	r3, #1
    d884:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    d888:	e786      	b.n	d798 <am_hal_gpio_pinconfig+0xd8>
    d88a:	f004 0a18 	and.w	sl, r4, #24
    d88e:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d890:	f045 0504 	orr.w	r5, r5, #4
    d894:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    d898:	e77e      	b.n	d798 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    d89a:	2814      	cmp	r0, #20
    d89c:	f43f af33 	beq.w	d706 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d8a0:	4825      	ldr	r0, [pc, #148]	; (d938 <am_hal_gpio_pinconfig+0x278>)
    d8a2:	e72a      	b.n	d6fa <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d8a4:	4a18      	ldr	r2, [pc, #96]	; (d908 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d8a6:	5c17      	ldrb	r7, [r2, r0]
    d8a8:	077a      	lsls	r2, r7, #29
    d8aa:	d5ca      	bpl.n	d842 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d8ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    d8b0:	e72e      	b.n	d710 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d8b2:	4c22      	ldr	r4, [pc, #136]	; (d93c <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d8b4:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d8b8:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d8bc:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d8c0:	45b0      	cmp	r8, r6
    d8c2:	d010      	beq.n	d8e6 <am_hal_gpio_pinconfig+0x226>
    d8c4:	0087      	lsls	r7, r0, #2
    d8c6:	eb04 0907 	add.w	r9, r4, r7
    d8ca:	f899 3001 	ldrb.w	r3, [r9, #1]
    d8ce:	42b3      	cmp	r3, r6
    d8d0:	d015      	beq.n	d8fe <am_hal_gpio_pinconfig+0x23e>
    d8d2:	f899 2002 	ldrb.w	r2, [r9, #2]
    d8d6:	42b2      	cmp	r2, r6
    d8d8:	d00f      	beq.n	d8fa <am_hal_gpio_pinconfig+0x23a>
    d8da:	f899 4003 	ldrb.w	r4, [r9, #3]
    d8de:	42b4      	cmp	r4, r6
    d8e0:	d00f      	beq.n	d902 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d8e2:	4817      	ldr	r0, [pc, #92]	; (d940 <am_hal_gpio_pinconfig+0x280>)
    d8e4:	e709      	b.n	d6fa <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d8e6:	2600      	movs	r6, #0
    d8e8:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d8ea:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d8ec:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    d8f0:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d8f2:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    d8f6:	9300      	str	r3, [sp, #0]
    d8f8:	e740      	b.n	d77c <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d8fa:	2602      	movs	r6, #2
    d8fc:	e7f5      	b.n	d8ea <am_hal_gpio_pinconfig+0x22a>
    d8fe:	2601      	movs	r6, #1
    d900:	e7f3      	b.n	d8ea <am_hal_gpio_pinconfig+0x22a>
    d902:	2603      	movs	r6, #3
    d904:	e7f1      	b.n	d8ea <am_hal_gpio_pinconfig+0x22a>
    d906:	bf00      	nop
    d908:	0000dfd0 	.word	0x0000dfd0
    d90c:	08000100 	.word	0x08000100
    d910:	0000e004 	.word	0x0000e004
    d914:	0000e100 	.word	0x0000e100
    d918:	0000dfcc 	.word	0x0000dfcc
    d91c:	7ffffffc 	.word	0x7ffffffc
    d920:	400100e0 	.word	0x400100e0
    d924:	40010040 	.word	0x40010040
    d928:	400100b4 	.word	0x400100b4
    d92c:	40010000 	.word	0x40010000
    d930:	08000102 	.word	0x08000102
    d934:	08000103 	.word	0x08000103
    d938:	08000101 	.word	0x08000101
    d93c:	0000e038 	.word	0x0000e038
    d940:	08000104 	.word	0x08000104

0000d944 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    d944:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    d948:	b672      	cpsid	i
    __asm("    bx lr");
    d94a:	4770      	bx	lr

0000d94c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    d94c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    d950:	4770      	bx	lr
    d952:	bf00      	nop

0000d954 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d954:	4a0b      	ldr	r2, [pc, #44]	; (d984 <am_hal_itm_enable+0x30>)
    d956:	68d3      	ldr	r3, [r2, #12]
    d958:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    d95c:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    d95e:	68d1      	ldr	r1, [r2, #12]
    d960:	01cb      	lsls	r3, r1, #7
    d962:	d5fc      	bpl.n	d95e <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    d964:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    d968:	4b07      	ldr	r3, [pc, #28]	; (d988 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    d96a:	4a08      	ldr	r2, [pc, #32]	; (d98c <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d96c:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    d970:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    d972:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    d976:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    d97a:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    d97e:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    d982:	4770      	bx	lr
    d984:	e000edf0 	.word	0xe000edf0
    d988:	c5acce55 	.word	0xc5acce55
    d98c:	00150511 	.word	0x00150511

0000d990 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    d990:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    d992:	4b24      	ldr	r3, [pc, #144]	; (da24 <am_hal_itm_disable+0x94>)
    d994:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    d998:	b9b0      	cbnz	r0, d9c8 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    d99a:	4923      	ldr	r1, [pc, #140]	; (da28 <am_hal_itm_disable+0x98>)
    d99c:	68ca      	ldr	r2, [r1, #12]
    d99e:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    d9a2:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    d9a4:	68cb      	ldr	r3, [r1, #12]
    d9a6:	01da      	lsls	r2, r3, #7
    d9a8:	d5fc      	bpl.n	d9a4 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    d9aa:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    d9ae:	481f      	ldr	r0, [pc, #124]	; (da2c <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    d9b0:	4a1f      	ldr	r2, [pc, #124]	; (da30 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d9b2:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    d9b6:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    d9b8:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    d9bc:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    d9c0:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    d9c4:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    d9c8:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    d9cc:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    d9d0:	021b      	lsls	r3, r3, #8
    d9d2:	d4fb      	bmi.n	d9cc <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    d9d4:	f240 20f7 	movw	r0, #759	; 0x2f7
    d9d8:	f7ff fd42 	bl	d460 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    d9dc:	4813      	ldr	r0, [pc, #76]	; (da2c <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d9de:	4915      	ldr	r1, [pc, #84]	; (da34 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    d9e0:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d9e4:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    d9e8:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    d9ea:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    d9ee:	f022 0401 	bic.w	r4, r2, #1
    d9f2:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    d9f6:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    d9fa:	420b      	tst	r3, r1
    d9fc:	d1fb      	bne.n	d9f6 <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    d9fe:	3801      	subs	r0, #1
    da00:	d1f3      	bne.n	d9ea <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    da02:	4909      	ldr	r1, [pc, #36]	; (da28 <am_hal_itm_disable+0x98>)
    da04:	68ca      	ldr	r2, [r1, #12]
    da06:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    da0a:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    da0c:	68cb      	ldr	r3, [r1, #12]
    da0e:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    da12:	d1fb      	bne.n	da0c <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    da14:	4903      	ldr	r1, [pc, #12]	; (da24 <am_hal_itm_disable+0x94>)
    da16:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    da1a:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    da1e:	2a00      	cmp	r2, #0
    da20:	d1fb      	bne.n	da1a <am_hal_itm_disable+0x8a>
}
    da22:	bd10      	pop	{r4, pc}
    da24:	40020000 	.word	0x40020000
    da28:	e000edf0 	.word	0xe000edf0
    da2c:	c5acce55 	.word	0xc5acce55
    da30:	00150511 	.word	0x00150511
    da34:	00800001 	.word	0x00800001

0000da38 <am_hal_itm_not_busy>:
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    da38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    da3c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    da40:	021b      	lsls	r3, r3, #8
    da42:	d4fb      	bmi.n	da3c <am_hal_itm_not_busy+0x4>
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    da44:	f240 20f7 	movw	r0, #759	; 0x2f7
    da48:	f7ff bd0a 	b.w	d460 <am_hal_flash_delay>

0000da4c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    da4c:	7803      	ldrb	r3, [r0, #0]
    da4e:	b1b3      	cbz	r3, da7e <am_hal_itm_print+0x32>
{
    da50:	b410      	push	{r4}
    da52:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    da54:	2400      	movs	r4, #0
    da56:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    da5a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    da5c:	2900      	cmp	r1, #0
    da5e:	d1fa      	bne.n	da56 <am_hal_itm_print+0xa>
    da60:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    da62:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    da66:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    da6a:	f8dc 3000 	ldr.w	r3, [ip]
    da6e:	2b00      	cmp	r3, #0
    da70:	d0fb      	beq.n	da6a <am_hal_itm_print+0x1e>
    while (ui32Length)
    da72:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    da74:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    da78:	d1f5      	bne.n	da66 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    da7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    da7e:	4770      	bx	lr

0000da80 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    da80:	b141      	cbz	r1, da94 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    da82:	2801      	cmp	r0, #1
{
    da84:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    da86:	d03a      	beq.n	dafe <am_hal_mcuctrl_info_get+0x7e>
    da88:	d322      	bcc.n	dad0 <am_hal_mcuctrl_info_get+0x50>
    da8a:	2802      	cmp	r0, #2
    da8c:	d004      	beq.n	da98 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    da8e:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    da90:	bcf0      	pop	{r4, r5, r6, r7}
    da92:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    da94:	2006      	movs	r0, #6
    da96:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    da98:	4a41      	ldr	r2, [pc, #260]	; (dba0 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    da9a:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    da9c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    daa0:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    daa2:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    daa6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    daaa:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    daae:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    dab0:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    dab2:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    dab4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dab8:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    daba:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    dabe:	4334      	orrs	r4, r6
    dac0:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    dac2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dac6:	4310      	orrs	r0, r2
    dac8:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    daca:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    dacc:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    dace:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    dad0:	4c33      	ldr	r4, [pc, #204]	; (dba0 <am_hal_mcuctrl_info_get+0x120>)
    dad2:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dad4:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dad8:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    dadc:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    dade:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    dae0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    dae4:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    dae8:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    daea:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    daec:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    daf0:	f004 0501 	and.w	r5, r4, #1
    daf4:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    daf6:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    daf8:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    dafa:	bcf0      	pop	{r4, r5, r6, r7}
    dafc:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    dafe:	4a28      	ldr	r2, [pc, #160]	; (dba0 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    db00:	4c28      	ldr	r4, [pc, #160]	; (dba4 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    db02:	6813      	ldr	r3, [r2, #0]
    db04:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    db06:	6850      	ldr	r0, [r2, #4]
    db08:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    db0a:	6897      	ldr	r7, [r2, #8]
    db0c:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    db0e:	68d6      	ldr	r6, [r2, #12]
    db10:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    db12:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    db14:	4824      	ldr	r0, [pc, #144]	; (dba8 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    db16:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    db18:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    db1c:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    db20:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    db22:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    db26:	4a21      	ldr	r2, [pc, #132]	; (dbac <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    db28:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    db2c:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    db2e:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    db32:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    db34:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    db36:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    db38:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    db3c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    db40:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    db42:	f000 040f 	and.w	r4, r0, #15
    db46:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    db4a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    db4c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    db50:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    db54:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    db58:	f007 0c0f 	and.w	ip, r7, #15
    db5c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    db60:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    db62:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    db66:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    db6a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    db6e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    db72:	433b      	orrs	r3, r7
    db74:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    db76:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    db7a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    db7e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    db82:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    db86:	b2e5      	uxtb	r5, r4
    db88:	042b      	lsls	r3, r5, #16
    db8a:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    db8e:	b2d6      	uxtb	r6, r2
    db90:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    db92:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    db94:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    db98:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    db9a:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    db9c:	bcf0      	pop	{r4, r5, r6, r7}
    db9e:	4770      	bx	lr
    dba0:	40020000 	.word	0x40020000
    dba4:	0000e134 	.word	0x0000e134
    dba8:	0000e174 	.word	0x0000e174
    dbac:	f0000f00 	.word	0xf0000f00

0000dbb0 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    dbb0:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dbb2:	4c1b      	ldr	r4, [pc, #108]	; (dc20 <am_hal_pwrctrl_low_power_init+0x70>)
    dbb4:	69a3      	ldr	r3, [r4, #24]
    dbb6:	05db      	lsls	r3, r3, #23
{
    dbb8:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    dbba:	d502      	bpl.n	dbc2 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    dbbc:	2000      	movs	r0, #0
}
    dbbe:	b003      	add	sp, #12
    dbc0:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbc2:	4d18      	ldr	r5, [pc, #96]	; (dc24 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbc4:	4918      	ldr	r1, [pc, #96]	; (dc28 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbc6:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbc8:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    dbca:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    dbcc:	461a      	mov	r2, r3
    dbce:	9000      	str	r0, [sp, #0]
    dbd0:	f242 7010 	movw	r0, #10000	; 0x2710
    dbd4:	f7ff fc48 	bl	d468 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dbd8:	b110      	cbz	r0, dbe0 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    dbda:	2004      	movs	r0, #4
}
    dbdc:	b003      	add	sp, #12
    dbde:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    dbe0:	6821      	ldr	r1, [r4, #0]
    dbe2:	f041 0201 	orr.w	r2, r1, #1
    dbe6:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    dbe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dbea:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    dbee:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    dbf0:	68ec      	ldr	r4, [r5, #12]
    dbf2:	b2e2      	uxtb	r2, r4
    dbf4:	2a11      	cmp	r2, #17
    dbf6:	d1e1      	bne.n	dbbc <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    dbf8:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    dbfc:	f360 5356 	bfi	r3, r0, #21, #2
    dc00:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    dc04:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    dc08:	240f      	movs	r4, #15
    dc0a:	f364 118b 	bfi	r1, r4, #6, #6
    dc0e:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    dc12:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    dc16:	f364 0205 	bfi	r2, r4, #0, #6
    dc1a:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    dc1e:	e7ce      	b.n	dbbe <am_hal_pwrctrl_low_power_init+0xe>
    dc20:	40021000 	.word	0x40021000
    dc24:	40020000 	.word	0x40020000
    dc28:	40020018 	.word	0x40020018

0000dc2c <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    dc2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    dc30:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    dc32:	68d3      	ldr	r3, [r2, #12]
    dc34:	bf0c      	ite	eq
    dc36:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    dc3a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    dc3e:	60d3      	str	r3, [r2, #12]
    dc40:	4770      	bx	lr
    dc42:	bf00      	nop

0000dc44 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    dc44:	4a03      	ldr	r2, [pc, #12]	; (dc54 <am_hal_rtc_osc_disable+0x10>)
    dc46:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dc4a:	f043 0010 	orr.w	r0, r3, #16
    dc4e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    dc52:	4770      	bx	lr
    dc54:	40004200 	.word	0x40004200

0000dc58 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    dc58:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    dc5a:	4a24      	ldr	r2, [pc, #144]	; (dcec <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    dc5c:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    dc5e:	2100      	movs	r1, #0
{
    dc60:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    dc62:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    dc66:	b33b      	cbz	r3, dcb8 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dc68:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dc6a:	4921      	ldr	r1, [pc, #132]	; (dcf0 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dc6c:	4c21      	ldr	r4, [pc, #132]	; (dcf4 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    dc6e:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    dc70:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    dc74:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    dc76:	458c      	cmp	ip, r1
    dc78:	bf98      	it	ls
    dc7a:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    dc7c:	f7ff fbc2 	bl	d404 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    dc80:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    dc82:	1c5a      	adds	r2, r3, #1
    dc84:	d02f      	beq.n	dce6 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    dc86:	08da      	lsrs	r2, r3, #3
    dc88:	fbb2 fef4 	udiv	lr, r2, r4
    dc8c:	f10e 31ff 	add.w	r1, lr, #4294967295
    dc90:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dc92:	4a16      	ldr	r2, [pc, #88]	; (dcec <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    dc94:	4918      	ldr	r1, [pc, #96]	; (dcf8 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    dc96:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    dc98:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    dc9c:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    dc9e:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    dca0:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    dca4:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    dca8:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dcac:	f240 20f7 	movw	r0, #759	; 0x2f7
    dcb0:	f7ff fbd6 	bl	d460 <am_hal_flash_delay>
}
    dcb4:	b004      	add	sp, #16
    dcb6:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    dcb8:	6904      	ldr	r4, [r0, #16]
    dcba:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    dcbc:	6883      	ldr	r3, [r0, #8]
    dcbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dcc2:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dcc4:	4c0c      	ldr	r4, [pc, #48]	; (dcf8 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    dcc6:	3901      	subs	r1, #1
    dcc8:	2301      	movs	r3, #1
    dcca:	408b      	lsls	r3, r1
    dccc:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    dcce:	6840      	ldr	r0, [r0, #4]
    dcd0:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    dcd4:	4302      	orrs	r2, r0
    dcd6:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    dcda:	f240 20f7 	movw	r0, #759	; 0x2f7
    dcde:	f7ff fbbf 	bl	d460 <am_hal_flash_delay>
}
    dce2:	b004      	add	sp, #16
    dce4:	bd10      	pop	{r4, pc}
    dce6:	2005      	movs	r0, #5
    dce8:	e7d3      	b.n	dc92 <am_hal_tpiu_enable+0x3a>
    dcea:	bf00      	nop
    dcec:	e0040000 	.word	0xe0040000
    dcf0:	001da380 	.word	0x001da380
    dcf4:	000f4240 	.word	0x000f4240
    dcf8:	40020000 	.word	0x40020000
    dcfc:	73616c46 	.word	0x73616c46
    dd00:	72572068 	.word	0x72572068
    dd04:	20657469 	.word	0x20657469
    dd08:	6d617845 	.word	0x6d617845
    dd0c:	0a656c70 	.word	0x0a656c70
    dd10:	00000000 	.word	0x00000000
    dd14:	2e2e2020 	.word	0x2e2e2020
    dd18:	7265202e 	.word	0x7265202e
    dd1c:	6e697361 	.word	0x6e697361
    dd20:	6c612067 	.word	0x6c612067
    dd24:	666f206c 	.word	0x666f206c
    dd28:	616c6620 	.word	0x616c6620
    dd2c:	69206873 	.word	0x69206873
    dd30:	6174736e 	.word	0x6174736e
    dd34:	2065636e 	.word	0x2065636e
    dd38:	0a2e6425 	.word	0x0a2e6425
    dd3c:	00000000 	.word	0x00000000
    dd40:	53414c46 	.word	0x53414c46
    dd44:	414d5f48 	.word	0x414d5f48
    dd48:	455f5353 	.word	0x455f5353
    dd4c:	45534152 	.word	0x45534152
    dd50:	32336920 	.word	0x32336920
    dd54:	75746552 	.word	0x75746552
    dd58:	6f436e72 	.word	0x6f436e72
    dd5c:	3d206564 	.word	0x3d206564
    dd60:	78302020 	.word	0x78302020
    dd64:	0a2e7825 	.word	0x0a2e7825
    dd68:	00000000 	.word	0x00000000
    dd6c:	2e2e2020 	.word	0x2e2e2020
    dd70:	7270202e 	.word	0x7270202e
    dd74:	6172676f 	.word	0x6172676f
    dd78:	6e696d6d 	.word	0x6e696d6d
    dd7c:	6c662067 	.word	0x6c662067
    dd80:	20687361 	.word	0x20687361
    dd84:	74736e69 	.word	0x74736e69
    dd88:	65636e61 	.word	0x65636e61
    dd8c:	2c642520 	.word	0x2c642520
    dd90:	67617020 	.word	0x67617020
    dd94:	64252065 	.word	0x64252065
    dd98:	00000a2e 	.word	0x00000a2e
    dd9c:	53414c46 	.word	0x53414c46
    dda0:	72702048 	.word	0x72702048
    dda4:	6172676f 	.word	0x6172676f
    dda8:	6170206d 	.word	0x6170206d
    ddac:	61206567 	.word	0x61206567
    ddb0:	78302074 	.word	0x78302074
    ddb4:	78383025 	.word	0x78383025
    ddb8:	32336920 	.word	0x32336920
    ddbc:	75746552 	.word	0x75746552
    ddc0:	6f436e72 	.word	0x6f436e72
    ddc4:	3d206564 	.word	0x3d206564
    ddc8:	25783020 	.word	0x25783020
    ddcc:	000a2e78 	.word	0x000a2e78
    ddd0:	2e2e2020 	.word	0x2e2e2020
    ddd4:	6576202e 	.word	0x6576202e
    ddd8:	79666972 	.word	0x79666972
    dddc:	20676e69 	.word	0x20676e69
    dde0:	20656874 	.word	0x20656874
    dde4:	65676170 	.word	0x65676170
    dde8:	73756a20 	.word	0x73756a20
    ddec:	72702074 	.word	0x72702074
    ddf0:	6172676f 	.word	0x6172676f
    ddf4:	64656d6d 	.word	0x64656d6d
    ddf8:	00000a2e 	.word	0x00000a2e
    ddfc:	4f525245 	.word	0x4f525245
    de00:	66203a52 	.word	0x66203a52
    de04:	6873616c 	.word	0x6873616c
    de08:	64646120 	.word	0x64646120
    de0c:	73736572 	.word	0x73736572
    de10:	25783020 	.word	0x25783020
    de14:	20783830 	.word	0x20783830
    de18:	20646964 	.word	0x20646964
    de1c:	20746f6e 	.word	0x20746f6e
    de20:	676f7270 	.word	0x676f7270
    de24:	206d6172 	.word	0x206d6172
    de28:	706f7270 	.word	0x706f7270
    de2c:	796c7265 	.word	0x796c7265
    de30:	20200a3a 	.word	0x20200a3a
    de34:	65707845 	.word	0x65707845
    de38:	64657463 	.word	0x64657463
    de3c:	6c617620 	.word	0x6c617620
    de40:	3d206575 	.word	0x3d206575
    de44:	25783020 	.word	0x25783020
    de48:	2c783830 	.word	0x2c783830
    de4c:	6f727020 	.word	0x6f727020
    de50:	6d617267 	.word	0x6d617267
    de54:	2064656d 	.word	0x2064656d
    de58:	756c6176 	.word	0x756c6176
    de5c:	203d2065 	.word	0x203d2065
    de60:	30257830 	.word	0x30257830
    de64:	0a2e7838 	.word	0x0a2e7838
    de68:	00000000 	.word	0x00000000
    de6c:	2e2e2020 	.word	0x2e2e2020
    de70:	7265202e 	.word	0x7265202e
    de74:	6e697361 	.word	0x6e697361
    de78:	68742067 	.word	0x68742067
    de7c:	61702065 	.word	0x61702065
    de80:	6a206567 	.word	0x6a206567
    de84:	20747375 	.word	0x20747375
    de88:	676f7270 	.word	0x676f7270
    de8c:	6d6d6172 	.word	0x6d6d6172
    de90:	0a2e6465 	.word	0x0a2e6465
    de94:	00000000 	.word	0x00000000
    de98:	414c4620 	.word	0x414c4620
    de9c:	65204853 	.word	0x65204853
    dea0:	65736172 	.word	0x65736172
    dea4:	67617020 	.word	0x67617020
    dea8:	74612065 	.word	0x74612065
    deac:	25783020 	.word	0x25783020
    deb0:	20783830 	.word	0x20783830
    deb4:	52323369 	.word	0x52323369
    deb8:	72757465 	.word	0x72757465
    debc:	646f436e 	.word	0x646f436e
    dec0:	203d2065 	.word	0x203d2065
    dec4:	25783020 	.word	0x25783020
    dec8:	000a2e78 	.word	0x000a2e78
    decc:	2e2e2020 	.word	0x2e2e2020
    ded0:	6576202e 	.word	0x6576202e
    ded4:	79666972 	.word	0x79666972
    ded8:	20676e69 	.word	0x20676e69
    dedc:	20656874 	.word	0x20656874
    dee0:	65676170 	.word	0x65676170
    dee4:	73756a20 	.word	0x73756a20
    dee8:	72652074 	.word	0x72652074
    deec:	64657361 	.word	0x64657361
    def0:	00000a2e 	.word	0x00000a2e
    def4:	4f525245 	.word	0x4f525245
    def8:	66203a52 	.word	0x66203a52
    defc:	6873616c 	.word	0x6873616c
    df00:	64646120 	.word	0x64646120
    df04:	73736572 	.word	0x73736572
    df08:	25783020 	.word	0x25783020
    df0c:	20783830 	.word	0x20783830
    df10:	20646964 	.word	0x20646964
    df14:	20746f6e 	.word	0x20746f6e
    df18:	53415245 	.word	0x53415245
    df1c:	72702045 	.word	0x72702045
    df20:	7265706f 	.word	0x7265706f
    df24:	0a3a796c 	.word	0x0a3a796c
    df28:	78452020 	.word	0x78452020
    df2c:	74636570 	.word	0x74636570
    df30:	76206465 	.word	0x76206465
    df34:	65756c61 	.word	0x65756c61
    df38:	30203d20 	.word	0x30203d20
    df3c:	46464678 	.word	0x46464678
    df40:	46464646 	.word	0x46464646
    df44:	70202c46 	.word	0x70202c46
    df48:	72676f72 	.word	0x72676f72
    df4c:	656d6d61 	.word	0x656d6d61
    df50:	61762064 	.word	0x61762064
    df54:	2065756c 	.word	0x2065756c
    df58:	7830203d 	.word	0x7830203d
    df5c:	78383025 	.word	0x78383025
    df60:	00000a2e 	.word	0x00000a2e
    df64:	4f525245 	.word	0x4f525245
    df68:	46203a52 	.word	0x46203a52
    df6c:	4853414c 	.word	0x4853414c
    df70:	69725720 	.word	0x69725720
    df74:	65206574 	.word	0x65206574
    df78:	706d6178 	.word	0x706d6178
    df7c:	6620656c 	.word	0x6620656c
    df80:	756c6961 	.word	0x756c6961
    df84:	25206572 	.word	0x25206572
    df88:	00000a64 	.word	0x00000a64
    df8c:	53414c46 	.word	0x53414c46
    df90:	72572048 	.word	0x72572048
    df94:	20657469 	.word	0x20657469
    df98:	6d617865 	.word	0x6d617865
    df9c:	20656c70 	.word	0x20656c70
    dfa0:	63637573 	.word	0x63637573
    dfa4:	66737365 	.word	0x66737365
    dfa8:	0a206c75 	.word	0x0a206c75
    dfac:	00000000 	.word	0x00000000
    dfb0:	0a0a0a0a 	.word	0x0a0a0a0a
    dfb4:	0a0a0a0a 	.word	0x0a0a0a0a
    dfb8:	0a0a0a0a 	.word	0x0a0a0a0a
    dfbc:	0a0a0a0a 	.word	0x0a0a0a0a
    dfc0:	00000a0a 	.word	0x00000a0a

0000dfc4 <g_AM_BSP_GPIO_ITM_SWO>:
    dfc4:	00000002                                ....

0000dfc8 <am_hal_cachectrl_defaults>:
    dfc8:	00000308                                ....

0000dfcc <g_AM_HAL_GPIO_DISABLE>:
    dfcc:	00000003                                ....

0000dfd0 <g_ui8Bit76Capabilities>:
    dfd0:	02800101 80010180 80800101 80808080     ................
    dfe0:	80808080 80808008 01800180 80808080     ................
    dff0:	80808080 01800402 01010401 80808080     ................
    e000:	00000101                                ....

0000e004 <g_ui8Inpen>:
    e004:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e014:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e024:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e034:	00003130                                01..

0000e038 <g_ui8NCEtable>:
    e038:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e048:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e058:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e068:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e078:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e088:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e098:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e0a8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e0b8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e0c8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e0d8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e0e8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e0f8:	32221202 43231303                       .."2..#C

0000e100 <g_ui8nCEpins>:
    e100:	02070707 00080802 01020202 01010101     ................
    e110:	01010101 01010101 01010101 01010101     ................
    e120:	01010101 08010101 01010008 01010101     ................
    e130:	00000101                                ....

0000e134 <g_am_hal_mcuctrl_flash_size>:
    e134:	00004000 00008000 00010000 00020000     .@..............
    e144:	00040000 00080000 00100000 00200000     .............. .
	...

0000e174 <g_am_hal_mcuctrl_sram_size>:
    e174:	00004000 00008000 00010000 00020000     .@..............
    e184:	00040000 00080000 00100000 00060000     ................
	...
