
adc_lpmode0_dma_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ca0  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00010000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0000eca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000758  10001000  0000eca0  00011000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0000eca0  2**0
                  CONTENTS, READONLY
  5 .debug_info   000268ed  00000000  00000000  0000ecd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003450  00000000  00000000  000355c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f8  00000000  00000000  00038a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000013d8  00000000  00000000  0003920c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005fd4  00000000  00000000  0003a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000c00b  00000000  00000000  000405b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004c5c3  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017a4  00000000  00000000  0004c640  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000674f  00000000  00000000  0004dde4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 61 c5 00 00 c9 c5 00 00 11 c6 00 00     ....a...........
    c010:	11 c6 00 00 11 c6 00 00 11 c6 00 00 00 00 00 00     ................
	...
    c02c:	cf c5 00 00 cf c5 00 00 00 00 00 00 cf c5 00 00     ................
    c03c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c04c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c05c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c06c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c07c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 dd c1 00 00     ................
    c08c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c09c:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c0ac:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c0bc:	cf c5 00 00 cf c5 00 00 cf c5 00 00 cf c5 00 00     ................
    c0cc:	cf c5 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c1e2:	4b17      	ldr	r3, [pc, #92]	; (c240 <am_adc_isr+0x64>)
    c1e4:	681b      	ldr	r3, [r3, #0]
    c1e6:	1d39      	adds	r1, r7, #4
    c1e8:	2200      	movs	r2, #0
    c1ea:	4618      	mov	r0, r3
    c1ec:	f001 fa78 	bl	d6e0 <am_hal_adc_interrupt_status>
    c1f0:	4603      	mov	r3, r0
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d002      	beq.n	c1fc <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    c1f6:	4813      	ldr	r0, [pc, #76]	; (c244 <am_adc_isr+0x68>)
    c1f8:	f001 f90e 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c1fc:	4b10      	ldr	r3, [pc, #64]	; (c240 <am_adc_isr+0x64>)
    c1fe:	681b      	ldr	r3, [r3, #0]
    c200:	687a      	ldr	r2, [r7, #4]
    c202:	4611      	mov	r1, r2
    c204:	4618      	mov	r0, r3
    c206:	f001 fa89 	bl	d71c <am_hal_adc_interrupt_clear>
    c20a:	4603      	mov	r3, r0
    c20c:	2b00      	cmp	r3, #0
    c20e:	d002      	beq.n	c216 <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    c210:	480d      	ldr	r0, [pc, #52]	; (c248 <am_adc_isr+0x6c>)
    c212:	f001 f901 	bl	d418 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c21c:	2b00      	cmp	r3, #0
    c21e:	d002      	beq.n	c226 <am_adc_isr+0x4a>
    {
        g_bADCDMAComplete = true;
    c220:	4b0a      	ldr	r3, [pc, #40]	; (c24c <am_adc_isr+0x70>)
    c222:	2201      	movs	r2, #1
    c224:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c22c:	2b00      	cmp	r3, #0
    c22e:	d002      	beq.n	c236 <am_adc_isr+0x5a>
    {
        g_bADCDMAError = true;
    c230:	4b07      	ldr	r3, [pc, #28]	; (c250 <am_adc_isr+0x74>)
    c232:	2201      	movs	r2, #1
    c234:	701a      	strb	r2, [r3, #0]
    }
}
    c236:	bf00      	nop
    c238:	3708      	adds	r7, #8
    c23a:	46bd      	mov	sp, r7
    c23c:	bd80      	pop	{r7, pc}
    c23e:	bf00      	nop
    c240:	10001000 	.word	0x10001000
    c244:	0000e5a0 	.word	0x0000e5a0
    c248:	0000e5c4 	.word	0x0000e5c4
    c24c:	1000170c 	.word	0x1000170c
    c250:	1000170d 	.word	0x1000170d

0000c254 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c254:	b580      	push	{r7, lr}
    c256:	af00      	add	r7, sp, #0
#endif

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c258:	2001      	movs	r0, #1
    c25a:	f002 f92b 	bl	e4b4 <am_hal_sysctrl_sleep>
    // Re-enable peripherals for run mode.
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_enable();
#endif
}
    c25e:	bf00      	nop
    c260:	bd80      	pop	{r7, pc}
	...

0000c264 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    c264:	b580      	push	{r7, lr}
    c266:	b084      	sub	sp, #16
    c268:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bPwrOffOnDMAComplete = false;
    c26a:	2300      	movs	r3, #0
    c26c:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.bDynamicPriority = true;
    c26e:	2301      	movs	r3, #1
    c270:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    c272:	2301      	movs	r3, #1
    c274:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.bDMAEnable = true;
    c276:	2301      	movs	r3, #1
    c278:	71fb      	strb	r3, [r7, #7]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c27a:	2380      	movs	r3, #128	; 0x80
    c27c:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    c27e:	4b0c      	ldr	r3, [pc, #48]	; (c2b0 <adc_config_dma+0x4c>)
    c280:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    c282:	4b0c      	ldr	r3, [pc, #48]	; (c2b4 <adc_config_dma+0x50>)
    c284:	681b      	ldr	r3, [r3, #0]
    c286:	1d3a      	adds	r2, r7, #4
    c288:	4611      	mov	r1, r2
    c28a:	4618      	mov	r0, r3
    c28c:	f001 f9b8 	bl	d600 <am_hal_adc_configure_dma>
    c290:	4603      	mov	r3, r0
    c292:	2b00      	cmp	r3, #0
    c294:	d002      	beq.n	c29c <adc_config_dma+0x38>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    c296:	4808      	ldr	r0, [pc, #32]	; (c2b8 <adc_config_dma+0x54>)
    c298:	f001 f8be 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    c29c:	4b07      	ldr	r3, [pc, #28]	; (c2bc <adc_config_dma+0x58>)
    c29e:	2200      	movs	r2, #0
    c2a0:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    c2a2:	4b07      	ldr	r3, [pc, #28]	; (c2c0 <adc_config_dma+0x5c>)
    c2a4:	2200      	movs	r2, #0
    c2a6:	701a      	strb	r2, [r3, #0]
}
    c2a8:	bf00      	nop
    c2aa:	3710      	adds	r7, #16
    c2ac:	46bd      	mov	sp, r7
    c2ae:	bd80      	pop	{r7, pc}
    c2b0:	1000110c 	.word	0x1000110c
    c2b4:	10001000 	.word	0x10001000
    c2b8:	0000e5ec 	.word	0x0000e5ec
    c2bc:	1000170c 	.word	0x1000170c
    c2c0:	1000170d 	.word	0x1000170d

0000c2c4 <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2ca:	4930      	ldr	r1, [pc, #192]	; (c38c <adc_config+0xc8>)
    c2cc:	2000      	movs	r0, #0
    c2ce:	f001 f905 	bl	d4dc <am_hal_adc_initialize>
    c2d2:	4603      	mov	r3, r0
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d002      	beq.n	c2de <adc_config+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c2d8:	482d      	ldr	r0, [pc, #180]	; (c390 <adc_config+0xcc>)
    c2da:	f001 f89d 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2de:	4b2b      	ldr	r3, [pc, #172]	; (c38c <adc_config+0xc8>)
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	2200      	movs	r2, #0
    c2e4:	2100      	movs	r1, #0
    c2e6:	4618      	mov	r0, r3
    c2e8:	f001 fa82 	bl	d7f0 <am_hal_adc_power_control>
    c2ec:	4603      	mov	r3, r0
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d002      	beq.n	c2f8 <adc_config+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    c2f2:	4828      	ldr	r0, [pc, #160]	; (c394 <adc_config+0xd0>)
    c2f4:	f001 f890 	bl	d418 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    c2f8:	2301      	movs	r3, #1
    c2fa:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2fc:	2300      	movs	r3, #0
    c2fe:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c300:	2307      	movs	r3, #7
    c302:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_1P5;
    c304:	2301      	movs	r3, #1
    c306:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    c308:	2301      	movs	r3, #1
    c30a:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c30c:	2300      	movs	r3, #0
    c30e:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c310:	2301      	movs	r3, #1
    c312:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c314:	4b1d      	ldr	r3, [pc, #116]	; (c38c <adc_config+0xc8>)
    c316:	681b      	ldr	r3, [r3, #0]
    c318:	f107 0208 	add.w	r2, r7, #8
    c31c:	4611      	mov	r1, r2
    c31e:	4618      	mov	r0, r3
    c320:	f001 f8fe 	bl	d520 <am_hal_adc_configure>
    c324:	4603      	mov	r3, r0
    c326:	2b00      	cmp	r3, #0
    c328:	d002      	beq.n	c330 <adc_config+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    c32a:	481b      	ldr	r0, [pc, #108]	; (c398 <adc_config+0xd4>)
    c32c:	f001 f874 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_128;
    c330:	2307      	movs	r3, #7
    c332:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c334:	2300      	movs	r3, #0
    c336:	707b      	strb	r3, [r7, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    c338:	2300      	movs	r3, #0
    c33a:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c33c:	2300      	movs	r3, #0
    c33e:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    c340:	2301      	movs	r3, #1
    c342:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c344:	4b11      	ldr	r3, [pc, #68]	; (c38c <adc_config+0xc8>)
    c346:	681b      	ldr	r3, [r3, #0]
    c348:	463a      	mov	r2, r7
    c34a:	2100      	movs	r1, #0
    c34c:	4618      	mov	r0, r3
    c34e:	f001 f923 	bl	d598 <am_hal_adc_configure_slot>
    c352:	4603      	mov	r3, r0
    c354:	2b00      	cmp	r3, #0
    c356:	d002      	beq.n	c35e <adc_config+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    c358:	4810      	ldr	r0, [pc, #64]	; (c39c <adc_config+0xd8>)
    c35a:	f001 f85d 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    c35e:	f7ff ff81 	bl	c264 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    c362:	4b0a      	ldr	r3, [pc, #40]	; (c38c <adc_config+0xc8>)
    c364:	681b      	ldr	r3, [r3, #0]
    c366:	21c0      	movs	r1, #192	; 0xc0
    c368:	4618      	mov	r0, r3
    c36a:	f001 f9a3 	bl	d6b4 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c36e:	4b07      	ldr	r3, [pc, #28]	; (c38c <adc_config+0xc8>)
    c370:	681b      	ldr	r3, [r3, #0]
    c372:	4618      	mov	r0, r3
    c374:	f001 f980 	bl	d678 <am_hal_adc_enable>
    c378:	4603      	mov	r3, r0
    c37a:	2b00      	cmp	r3, #0
    c37c:	d002      	beq.n	c384 <adc_config+0xc0>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    c37e:	4808      	ldr	r0, [pc, #32]	; (c3a0 <adc_config+0xdc>)
    c380:	f001 f84a 	bl	d418 <am_util_stdio_printf>
    }
}
    c384:	bf00      	nop
    c386:	3710      	adds	r7, #16
    c388:	46bd      	mov	sp, r7
    c38a:	bd80      	pop	{r7, pc}
    c38c:	10001000 	.word	0x10001000
    c390:	0000e614 	.word	0x0000e614
    c394:	0000e648 	.word	0x0000e648
    c398:	0000e668 	.word	0x0000e668
    c39c:	0000e68c 	.word	0x0000e68c
    c3a0:	0000e6b4 	.word	0x0000e6b4

0000c3a4 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    c3a4:	b580      	push	{r7, lr}
    c3a6:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (1 second).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    c3a8:	f240 2242 	movw	r2, #578	; 0x242
    c3ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3b0:	2003      	movs	r0, #3
    c3b2:	f001 fb33 	bl	da1c <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     |
                                AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);
    c3b6:	2040      	movs	r0, #64	; 0x40
    c3b8:	f001 fbd4 	bl	db64 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 10, 5);
    c3bc:	2305      	movs	r3, #5
    c3be:	220a      	movs	r2, #10
    c3c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3c4:	2003      	movs	r0, #3
    c3c6:	f001 fb61 	bl	da8c <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    c3ca:	f001 fbb9 	bl	db40 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    c3ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3d2:	2003      	movs	r0, #3
    c3d4:	f001 fb42 	bl	da5c <am_hal_ctimer_start>
}
    c3d8:	bf00      	nop
    c3da:	bd80      	pop	{r7, pc}

0000c3dc <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c3dc:	b580      	push	{r7, lr}
    c3de:	b082      	sub	sp, #8
    c3e0:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c3e2:	2100      	movs	r1, #0
    c3e4:	2000      	movs	r0, #0
    c3e6:	f001 fa9f 	bl	d928 <am_hal_clkgen_control>
    c3ea:	4603      	mov	r3, r0
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d002      	beq.n	c3f6 <main+0x1a>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c3f0:	4849      	ldr	r0, [pc, #292]	; (c518 <main+0x13c>)
    c3f2:	f001 f811 	bl	d418 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c3f6:	4849      	ldr	r0, [pc, #292]	; (c51c <main+0x140>)
    c3f8:	f001 fa62 	bl	d8c0 <am_hal_cachectrl_config>
    c3fc:	4603      	mov	r3, r0
    c3fe:	2b00      	cmp	r3, #0
    c400:	d002      	beq.n	c408 <main+0x2c>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c402:	4847      	ldr	r0, [pc, #284]	; (c520 <main+0x144>)
    c404:	f001 f808 	bl	d418 <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c408:	f001 fa84 	bl	d914 <am_hal_cachectrl_enable>
    c40c:	4603      	mov	r3, r0
    c40e:	2b00      	cmp	r3, #0
    c410:	d002      	beq.n	c418 <main+0x3c>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c412:	4844      	ldr	r0, [pc, #272]	; (c524 <main+0x148>)
    c414:	f001 f800 	bl	d418 <am_util_stdio_printf>


    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c418:	f001 f826 	bl	d468 <am_bsp_low_power_init>

    //
    // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K))
    c41c:	200e      	movs	r0, #14
    c41e:	f001 ffad 	bl	e37c <am_hal_pwrctrl_memory_enable>
    c422:	4603      	mov	r3, r0
    c424:	2b00      	cmp	r3, #0
    c426:	d002      	beq.n	c42e <main+0x52>
    {
        am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c428:	483f      	ldr	r0, [pc, #252]	; (c528 <main+0x14c>)
    c42a:	f000 fff5 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Enable the first 32K of TCM SRAM.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c42e:	2002      	movs	r0, #2
    c430:	f001 ffa4 	bl	e37c <am_hal_pwrctrl_memory_enable>
    c434:	4603      	mov	r3, r0
    c436:	2b00      	cmp	r3, #0
    c438:	d002      	beq.n	c440 <main+0x64>
    {
        am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c43a:	483c      	ldr	r0, [pc, #240]	; (c52c <main+0x150>)
    c43c:	f000 ffec 	bl	d418 <am_util_stdio_printf>


    //
    // Start the ITM interface.
    //
    am_bsp_itm_printf_enable();
    c440:	f001 f82c 	bl	d49c <am_bsp_itm_printf_enable>

    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    c444:	f7ff ffae 	bl	c3a4 <init_timerA3_for_ADC>

    //
    // Enable interrupts.
    //
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(ADC_IRQn);
    c448:	2012      	movs	r0, #18
    c44a:	f7ff fea9 	bl	c1a0 <__NVIC_EnableIRQ>
#else // AM_CMSIS_REGS
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
#endif // AM_CMSIS_REGS
    am_hal_interrupt_master_enable();
    c44e:	f001 fe0f 	bl	e070 <am_hal_interrupt_master_enable>

    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(16, g_AM_PIN_16_ADCSE0);
    c452:	4b37      	ldr	r3, [pc, #220]	; (c530 <main+0x154>)
    c454:	6819      	ldr	r1, [r3, #0]
    c456:	2010      	movs	r0, #16
    c458:	f001 fcc8 	bl	ddec <am_hal_gpio_pinconfig>

    //
    // Configure the ADC
    //
    adc_config();
    c45c:	f7ff ff32 	bl	c2c4 <adc_config>

    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c460:	4b34      	ldr	r3, [pc, #208]	; (c534 <main+0x158>)
    c462:	681b      	ldr	r3, [r3, #0]
    c464:	4618      	mov	r0, r3
    c466:	f001 f9b1 	bl	d7cc <am_hal_adc_sw_trigger>
    c46a:	4603      	mov	r3, r0
    c46c:	2b00      	cmp	r3, #0
    c46e:	d002      	beq.n	c476 <main+0x9a>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c470:	4831      	ldr	r0, [pc, #196]	; (c538 <main+0x15c>)
    c472:	f000 ffd1 	bl	d418 <am_util_stdio_printf>
    }

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c476:	f000 ffed 	bl	d454 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example with 1.2Msps and LPMODE=0\n");
    c47a:	4830      	ldr	r0, [pc, #192]	; (c53c <main+0x160>)
    c47c:	f000 ffcc 	bl	d418 <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c480:	200a      	movs	r0, #10
    c482:	f000 f8a7 	bl	c5d4 <am_util_delay_ms>
    while(1)
    {
        //
        // Go to Deep Sleep.
        //
        if (!g_bADCDMAComplete)
    c486:	4b2e      	ldr	r3, [pc, #184]	; (c540 <main+0x164>)
    c488:	781b      	ldrb	r3, [r3, #0]
    c48a:	b2db      	uxtb	r3, r3
    c48c:	f083 0301 	eor.w	r3, r3, #1
    c490:	b2db      	uxtb	r3, r3
    c492:	2b00      	cmp	r3, #0
    c494:	d001      	beq.n	c49a <main+0xbe>
        {
            sleep();
    c496:	f7ff fedd 	bl	c254 <sleep>
        }

        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c49a:	4b2a      	ldr	r3, [pc, #168]	; (c544 <main+0x168>)
    c49c:	781b      	ldrb	r3, [r3, #0]
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d003      	beq.n	c4ac <main+0xd0>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c4a4:	4828      	ldr	r0, [pc, #160]	; (c548 <main+0x16c>)
    c4a6:	f000 ffb7 	bl	d418 <am_util_stdio_printf>
            while(1);
    c4aa:	e7fe      	b.n	c4aa <main+0xce>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c4ac:	4b24      	ldr	r3, [pc, #144]	; (c540 <main+0x164>)
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	b2db      	uxtb	r3, r3
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d0e7      	beq.n	c486 <main+0xaa>
        {
#if ADC_EXAMPLE_DEBUG
            {
                uint32_t        ui32SampleCount;
                am_util_stdio_printf("DMA Complete\n");
    c4b6:	4825      	ldr	r0, [pc, #148]	; (c54c <main+0x170>)
    c4b8:	f000 ffae 	bl	d418 <am_util_stdio_printf>
                ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c4bc:	2380      	movs	r3, #128	; 0x80
    c4be:	607b      	str	r3, [r7, #4]
                if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    c4c0:	4b1c      	ldr	r3, [pc, #112]	; (c534 <main+0x158>)
    c4c2:	6818      	ldr	r0, [r3, #0]
    c4c4:	1d3a      	adds	r2, r7, #4
    c4c6:	4b22      	ldr	r3, [pc, #136]	; (c550 <main+0x174>)
    c4c8:	4922      	ldr	r1, [pc, #136]	; (c554 <main+0x178>)
    c4ca:	f001 f939 	bl	d740 <am_hal_adc_samples_read>
    c4ce:	4603      	mov	r3, r0
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	d002      	beq.n	c4da <main+0xfe>
                                                                     g_ui32ADCSampleBuffer,
                                                                     &ui32SampleCount,
                                                                     SampleBuffer))
                {
                    am_util_stdio_printf("Error - failed to process samples.\n");
    c4d4:	4820      	ldr	r0, [pc, #128]	; (c558 <main+0x17c>)
    c4d6:	f000 ff9f 	bl	d418 <am_util_stdio_printf>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c4da:	4b19      	ldr	r3, [pc, #100]	; (c540 <main+0x164>)
    c4dc:	2200      	movs	r2, #0
    c4de:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c4e0:	f7ff fec0 	bl	c264 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c4e4:	4b13      	ldr	r3, [pc, #76]	; (c534 <main+0x158>)
    c4e6:	681b      	ldr	r3, [r3, #0]
    c4e8:	f04f 31ff 	mov.w	r1, #4294967295
    c4ec:	4618      	mov	r0, r3
    c4ee:	f001 f915 	bl	d71c <am_hal_adc_interrupt_clear>
    c4f2:	4603      	mov	r3, r0
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d002      	beq.n	c4fe <main+0x122>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c4f8:	4818      	ldr	r0, [pc, #96]	; (c55c <main+0x180>)
    c4fa:	f000 ff8d 	bl	d418 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c4fe:	4b0d      	ldr	r3, [pc, #52]	; (c534 <main+0x158>)
    c500:	681b      	ldr	r3, [r3, #0]
    c502:	4618      	mov	r0, r3
    c504:	f001 f962 	bl	d7cc <am_hal_adc_sw_trigger>
    c508:	4603      	mov	r3, r0
    c50a:	2b00      	cmp	r3, #0
    c50c:	d0bb      	beq.n	c486 <main+0xaa>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c50e:	480a      	ldr	r0, [pc, #40]	; (c538 <main+0x15c>)
    c510:	f000 ff82 	bl	d418 <am_util_stdio_printf>
        if (!g_bADCDMAComplete)
    c514:	e7b7      	b.n	c486 <main+0xaa>
    c516:	bf00      	nop
    c518:	0000e6d4 	.word	0x0000e6d4
    c51c:	0000e898 	.word	0x0000e898
    c520:	0000e704 	.word	0x0000e704
    c524:	0000e734 	.word	0x0000e734
    c528:	0000e760 	.word	0x0000e760
    c52c:	0000e790 	.word	0x0000e790
    c530:	0000e890 	.word	0x0000e890
    c534:	10001000 	.word	0x10001000
    c538:	0000e7b8 	.word	0x0000e7b8
    c53c:	0000e7dc 	.word	0x0000e7dc
    c540:	1000170c 	.word	0x1000170c
    c544:	1000170d 	.word	0x1000170d
    c548:	0000e804 	.word	0x0000e804
    c54c:	0000e818 	.word	0x0000e818
    c550:	1000130c 	.word	0x1000130c
    c554:	1000110c 	.word	0x1000110c
    c558:	0000e828 	.word	0x0000e828
    c55c:	0000e84c 	.word	0x0000e84c

0000c560 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c560:	4811      	ldr	r0, [pc, #68]	; (c5a8 <zero_loop+0x12>)
    c562:	4912      	ldr	r1, [pc, #72]	; (c5ac <zero_loop+0x16>)
    c564:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c566:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c56a:	4811      	ldr	r0, [pc, #68]	; (c5b0 <zero_loop+0x1a>)
    c56c:	6801      	ldr	r1, [r0, #0]
    c56e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c572:	6001      	str	r1, [r0, #0]
    c574:	f3bf 8f4f 	dsb	sy
    c578:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c57c:	480d      	ldr	r0, [pc, #52]	; (c5b4 <zero_loop+0x1e>)
    c57e:	490e      	ldr	r1, [pc, #56]	; (c5b8 <zero_loop+0x22>)
    c580:	4a0e      	ldr	r2, [pc, #56]	; (c5bc <zero_loop+0x26>)

0000c582 <copy_loop>:
    c582:	f850 3b04 	ldr.w	r3, [r0], #4
    c586:	f841 3b04 	str.w	r3, [r1], #4
    c58a:	4291      	cmp	r1, r2
    c58c:	dbf9      	blt.n	c582 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c58e:	480c      	ldr	r0, [pc, #48]	; (c5c0 <zero_loop+0x2a>)
    c590:	490c      	ldr	r1, [pc, #48]	; (c5c4 <zero_loop+0x2e>)
    c592:	f04f 0200 	mov.w	r2, #0

0000c596 <zero_loop>:
    c596:	4288      	cmp	r0, r1
    c598:	bfb8      	it	lt
    c59a:	f840 2b04 	strlt.w	r2, [r0], #4
    c59e:	dbfa      	blt.n	c596 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c5a0:	f7ff ff1c 	bl	c3dc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c5a4:	be00      	bkpt	0x0000
}
    c5a6:	bf00      	nop
    c5a8:	e000ed08 	.word	0xe000ed08
    c5ac:	0000c000 	.word	0x0000c000
    c5b0:	e000ed88 	.word	0xe000ed88
    c5b4:	0000eca0 	.word	0x0000eca0
    c5b8:	10001000 	.word	0x10001000
    c5bc:	10001000 	.word	0x10001000
    c5c0:	10001000 	.word	0x10001000
    c5c4:	10001758 	.word	0x10001758

0000c5c8 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c5c8:	b480      	push	{r7}
    c5ca:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c5cc:	e7fe      	b.n	c5cc <NMI_Handler+0x4>

0000c5ce <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c5ce:	b480      	push	{r7}
    c5d0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c5d2:	e7fe      	b.n	c5d2 <DebugMon_Handler+0x4>

0000c5d4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c5d4:	b580      	push	{r7, lr}
    c5d6:	b088      	sub	sp, #32
    c5d8:	af00      	add	r7, sp, #0
    c5da:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c5dc:	f107 030c 	add.w	r3, r7, #12
    c5e0:	4618      	mov	r0, r3
    c5e2:	f001 f9fd 	bl	d9e0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c5e6:	68fb      	ldr	r3, [r7, #12]
    c5e8:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c5ea:	69fb      	ldr	r3, [r7, #28]
    c5ec:	4a07      	ldr	r2, [pc, #28]	; (c60c <am_util_delay_ms+0x38>)
    c5ee:	fba2 2303 	umull	r2, r3, r2, r3
    c5f2:	099b      	lsrs	r3, r3, #6
    c5f4:	687a      	ldr	r2, [r7, #4]
    c5f6:	fb02 f303 	mul.w	r3, r2, r3
    c5fa:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c5fc:	69b8      	ldr	r0, [r7, #24]
    c5fe:	f001 fac5 	bl	db8c <am_hal_flash_delay>
}
    c602:	bf00      	nop
    c604:	3720      	adds	r7, #32
    c606:	46bd      	mov	sp, r7
    c608:	bd80      	pop	{r7, pc}
    c60a:	bf00      	nop
    c60c:	057619f1 	.word	0x057619f1

0000c610 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c610:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c612:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c614:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c616:	f000 f809 	bl	c62c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c61a:	bd01      	pop	{r0, pc}
}
    c61c:	bf00      	nop
    c61e:	4618      	mov	r0, r3

0000c620 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c620:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c622:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c624:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c626:	4770      	bx	lr
}
    c628:	bf00      	nop
    c62a:	4618      	mov	r0, r3

0000c62c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c62c:	b580      	push	{r7, lr}
    c62e:	b096      	sub	sp, #88	; 0x58
    c630:	af00      	add	r7, sp, #0
    c632:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c634:	f107 030c 	add.w	r3, r7, #12
    c638:	2200      	movs	r2, #0
    c63a:	601a      	str	r2, [r3, #0]
    c63c:	605a      	str	r2, [r3, #4]
    c63e:	609a      	str	r2, [r3, #8]
    c640:	60da      	str	r2, [r3, #12]
    c642:	611a      	str	r2, [r3, #16]
    c644:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c646:	2300      	movs	r3, #0
    c648:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c64c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c64e:	4b2e      	ldr	r3, [pc, #184]	; (c708 <am_util_faultisr_collect_data+0xdc>)
    c650:	681b      	ldr	r3, [r3, #0]
    c652:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c656:	b2db      	uxtb	r3, r3
    c658:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c65e:	0a1b      	lsrs	r3, r3, #8
    c660:	b2db      	uxtb	r3, r3
    c662:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c668:	0c1b      	lsrs	r3, r3, #16
    c66a:	b29b      	uxth	r3, r3
    c66c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c670:	4b26      	ldr	r3, [pc, #152]	; (c70c <am_util_faultisr_collect_data+0xe0>)
    c672:	681b      	ldr	r3, [r3, #0]
    c674:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c676:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c67a:	b2db      	uxtb	r3, r3
    c67c:	f003 0302 	and.w	r3, r3, #2
    c680:	2b00      	cmp	r3, #0
    c682:	d005      	beq.n	c690 <am_util_faultisr_collect_data+0x64>
    c684:	6879      	ldr	r1, [r7, #4]
    c686:	2006      	movs	r0, #6
    c688:	f7ff ffca 	bl	c620 <getStackedReg>
    c68c:	4603      	mov	r3, r0
    c68e:	e001      	b.n	c694 <am_util_faultisr_collect_data+0x68>
    c690:	f04f 33ff 	mov.w	r3, #4294967295
    c694:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c696:	6879      	ldr	r1, [r7, #4]
    c698:	2000      	movs	r0, #0
    c69a:	f7ff ffc1 	bl	c620 <getStackedReg>
    c69e:	4603      	mov	r3, r0
    c6a0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c6a2:	6879      	ldr	r1, [r7, #4]
    c6a4:	2001      	movs	r0, #1
    c6a6:	f7ff ffbb 	bl	c620 <getStackedReg>
    c6aa:	4603      	mov	r3, r0
    c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c6ae:	6879      	ldr	r1, [r7, #4]
    c6b0:	2002      	movs	r0, #2
    c6b2:	f7ff ffb5 	bl	c620 <getStackedReg>
    c6b6:	4603      	mov	r3, r0
    c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c6ba:	6879      	ldr	r1, [r7, #4]
    c6bc:	2003      	movs	r0, #3
    c6be:	f7ff ffaf 	bl	c620 <getStackedReg>
    c6c2:	4603      	mov	r3, r0
    c6c4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c6c6:	6879      	ldr	r1, [r7, #4]
    c6c8:	2004      	movs	r0, #4
    c6ca:	f7ff ffa9 	bl	c620 <getStackedReg>
    c6ce:	4603      	mov	r3, r0
    c6d0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c6d2:	6879      	ldr	r1, [r7, #4]
    c6d4:	2005      	movs	r0, #5
    c6d6:	f7ff ffa3 	bl	c620 <getStackedReg>
    c6da:	4603      	mov	r3, r0
    c6dc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c6de:	6879      	ldr	r1, [r7, #4]
    c6e0:	2006      	movs	r0, #6
    c6e2:	f7ff ff9d 	bl	c620 <getStackedReg>
    c6e6:	4603      	mov	r3, r0
    c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c6ea:	6879      	ldr	r1, [r7, #4]
    c6ec:	2007      	movs	r0, #7
    c6ee:	f7ff ff97 	bl	c620 <getStackedReg>
    c6f2:	4603      	mov	r3, r0
    c6f4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c6f6:	f107 030c 	add.w	r3, r7, #12
    c6fa:	4619      	mov	r1, r3
    c6fc:	2002      	movs	r0, #2
    c6fe:	f001 fd4f 	bl	e1a0 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c702:	2300      	movs	r3, #0
    c704:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c706:	e7fe      	b.n	c706 <am_util_faultisr_collect_data+0xda>
    c708:	e000ed28 	.word	0xe000ed28
    c70c:	e000ed38 	.word	0xe000ed38

0000c710 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c710:	b480      	push	{r7}
    c712:	b083      	sub	sp, #12
    c714:	af00      	add	r7, sp, #0
    c716:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c718:	4a04      	ldr	r2, [pc, #16]	; (c72c <am_util_stdio_printf_init+0x1c>)
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	6013      	str	r3, [r2, #0]
}
    c71e:	bf00      	nop
    c720:	370c      	adds	r7, #12
    c722:	46bd      	mov	sp, r7
    c724:	f85d 7b04 	ldr.w	r7, [sp], #4
    c728:	4770      	bx	lr
    c72a:	bf00      	nop
    c72c:	10001710 	.word	0x10001710

0000c730 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c730:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c734:	b096      	sub	sp, #88	; 0x58
    c736:	af00      	add	r7, sp, #0
    c738:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c73c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c740:	0025      	movs	r5, r4
    c742:	2600      	movs	r6, #0
    c744:	ea55 0306 	orrs.w	r3, r5, r6
    c748:	f000 80a0 	beq.w	c88c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c74c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c750:	0862      	lsrs	r2, r4, #1
    c752:	ea4f 0133 	mov.w	r1, r3, rrx
    c756:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c75a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c75e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c762:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c766:	eb11 0308 	adds.w	r3, r1, r8
    c76a:	eb42 0409 	adc.w	r4, r2, r9
    c76e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c772:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c776:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c77a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c77e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c782:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c786:	eb13 030a 	adds.w	r3, r3, sl
    c78a:	eb44 040b 	adc.w	r4, r4, fp
    c78e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c792:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c796:	0a1a      	lsrs	r2, r3, #8
    c798:	62ba      	str	r2, [r7, #40]	; 0x28
    c79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c79c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c7a0:	62ba      	str	r2, [r7, #40]	; 0x28
    c7a2:	0a23      	lsrs	r3, r4, #8
    c7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    c7a6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c7ae:	18c9      	adds	r1, r1, r3
    c7b0:	eb42 0204 	adc.w	r2, r2, r4
    c7b4:	460b      	mov	r3, r1
    c7b6:	4614      	mov	r4, r2
    c7b8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c7bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7c0:	0c1a      	lsrs	r2, r3, #16
    c7c2:	623a      	str	r2, [r7, #32]
    c7c4:	6a3a      	ldr	r2, [r7, #32]
    c7c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c7ca:	623a      	str	r2, [r7, #32]
    c7cc:	0c23      	lsrs	r3, r4, #16
    c7ce:	627b      	str	r3, [r7, #36]	; 0x24
    c7d0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c7d8:	18c9      	adds	r1, r1, r3
    c7da:	eb42 0204 	adc.w	r2, r2, r4
    c7de:	460b      	mov	r3, r1
    c7e0:	4614      	mov	r4, r2
    c7e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c7e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7ea:	0023      	movs	r3, r4
    c7ec:	603b      	str	r3, [r7, #0]
    c7ee:	2300      	movs	r3, #0
    c7f0:	607b      	str	r3, [r7, #4]
    c7f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c7f6:	e897 0006 	ldmia.w	r7, {r1, r2}
    c7fa:	18c9      	adds	r1, r1, r3
    c7fc:	eb42 0204 	adc.w	r2, r2, r4
    c800:	460b      	mov	r3, r1
    c802:	4614      	mov	r4, r2
    c804:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c808:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c80c:	08da      	lsrs	r2, r3, #3
    c80e:	613a      	str	r2, [r7, #16]
    c810:	693a      	ldr	r2, [r7, #16]
    c812:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c816:	613a      	str	r2, [r7, #16]
    c818:	08e3      	lsrs	r3, r4, #3
    c81a:	617b      	str	r3, [r7, #20]
    c81c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c820:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c824:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c828:	460b      	mov	r3, r1
    c82a:	4614      	mov	r4, r2
    c82c:	00a0      	lsls	r0, r4, #2
    c82e:	60f8      	str	r0, [r7, #12]
    c830:	68f8      	ldr	r0, [r7, #12]
    c832:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c836:	60f8      	str	r0, [r7, #12]
    c838:	009b      	lsls	r3, r3, #2
    c83a:	60bb      	str	r3, [r7, #8]
    c83c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c840:	185b      	adds	r3, r3, r1
    c842:	eb44 0402 	adc.w	r4, r4, r2
    c846:	18db      	adds	r3, r3, r3
    c848:	eb44 0404 	adc.w	r4, r4, r4
    c84c:	4619      	mov	r1, r3
    c84e:	4622      	mov	r2, r4
    c850:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c854:	1a5b      	subs	r3, r3, r1
    c856:	eb64 0402 	sbc.w	r4, r4, r2
    c85a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c85e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c862:	3306      	adds	r3, #6
    c864:	f144 0400 	adc.w	r4, r4, #0
    c868:	091a      	lsrs	r2, r3, #4
    c86a:	61ba      	str	r2, [r7, #24]
    c86c:	69ba      	ldr	r2, [r7, #24]
    c86e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c872:	61ba      	str	r2, [r7, #24]
    c874:	0923      	lsrs	r3, r4, #4
    c876:	61fb      	str	r3, [r7, #28]
    c878:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c87c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c880:	18c9      	adds	r1, r1, r3
    c882:	eb42 0204 	adc.w	r2, r2, r4
    c886:	460b      	mov	r3, r1
    c888:	4614      	mov	r4, r2
    c88a:	e029      	b.n	c8e0 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c88e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c892:	085a      	lsrs	r2, r3, #1
    c894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c896:	089b      	lsrs	r3, r3, #2
    c898:	4413      	add	r3, r2
    c89a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c89e:	091b      	lsrs	r3, r3, #4
    c8a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c8a2:	4413      	add	r3, r2
    c8a4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8a8:	0a1b      	lsrs	r3, r3, #8
    c8aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c8ac:	4413      	add	r3, r2
    c8ae:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8b2:	0c1b      	lsrs	r3, r3, #16
    c8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c8b6:	4413      	add	r3, r2
    c8b8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8bc:	08db      	lsrs	r3, r3, #3
    c8be:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c8c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c8c2:	4613      	mov	r3, r2
    c8c4:	009b      	lsls	r3, r3, #2
    c8c6:	4413      	add	r3, r2
    c8c8:	005b      	lsls	r3, r3, #1
    c8ca:	461a      	mov	r2, r3
    c8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c8ce:	1a9b      	subs	r3, r3, r2
    c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c8d4:	3306      	adds	r3, #6
    c8d6:	091a      	lsrs	r2, r3, #4
    c8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c8da:	4413      	add	r3, r2
    c8dc:	f04f 0400 	mov.w	r4, #0
    }
}
    c8e0:	4618      	mov	r0, r3
    c8e2:	4621      	mov	r1, r4
    c8e4:	3758      	adds	r7, #88	; 0x58
    c8e6:	46bd      	mov	sp, r7
    c8e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c8ec:	4770      	bx	lr

0000c8ee <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c8ee:	b590      	push	{r4, r7, lr}
    c8f0:	b085      	sub	sp, #20
    c8f2:	af00      	add	r7, sp, #0
    c8f4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c8f8:	683a      	ldr	r2, [r7, #0]
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	4313      	orrs	r3, r2
    c8fe:	2b00      	cmp	r3, #0
    c900:	bf0c      	ite	eq
    c902:	2301      	moveq	r3, #1
    c904:	2300      	movne	r3, #0
    c906:	b2db      	uxtb	r3, r3
    c908:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c90a:	e008      	b.n	c91e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c90c:	e9d7 0100 	ldrd	r0, r1, [r7]
    c910:	f7ff ff0e 	bl	c730 <divu64_10>
    c914:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c918:	68fb      	ldr	r3, [r7, #12]
    c91a:	3301      	adds	r3, #1
    c91c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c91e:	e897 0018 	ldmia.w	r7, {r3, r4}
    c922:	4323      	orrs	r3, r4
    c924:	d1f2      	bne.n	c90c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c926:	68fb      	ldr	r3, [r7, #12]
}
    c928:	4618      	mov	r0, r3
    c92a:	3714      	adds	r7, #20
    c92c:	46bd      	mov	sp, r7
    c92e:	bd90      	pop	{r4, r7, pc}

0000c930 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c930:	b590      	push	{r4, r7, lr}
    c932:	b083      	sub	sp, #12
    c934:	af00      	add	r7, sp, #0
    c936:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c93a:	e897 0018 	ldmia.w	r7, {r3, r4}
    c93e:	2b00      	cmp	r3, #0
    c940:	f174 0300 	sbcs.w	r3, r4, #0
    c944:	da06      	bge.n	c954 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c946:	e897 0018 	ldmia.w	r7, {r3, r4}
    c94a:	425b      	negs	r3, r3
    c94c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c950:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c954:	e897 0018 	ldmia.w	r7, {r3, r4}
    c958:	4618      	mov	r0, r3
    c95a:	4621      	mov	r1, r4
    c95c:	f7ff ffc7 	bl	c8ee <ndigits_in_u64>
    c960:	4603      	mov	r3, r0
}
    c962:	4618      	mov	r0, r3
    c964:	370c      	adds	r7, #12
    c966:	46bd      	mov	sp, r7
    c968:	bd90      	pop	{r4, r7, pc}

0000c96a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c96a:	b490      	push	{r4, r7}
    c96c:	b084      	sub	sp, #16
    c96e:	af00      	add	r7, sp, #0
    c970:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c974:	6839      	ldr	r1, [r7, #0]
    c976:	687a      	ldr	r2, [r7, #4]
    c978:	430a      	orrs	r2, r1
    c97a:	2a00      	cmp	r2, #0
    c97c:	bf0c      	ite	eq
    c97e:	2201      	moveq	r2, #1
    c980:	2200      	movne	r2, #0
    c982:	b2d2      	uxtb	r2, r2
    c984:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c986:	e00a      	b.n	c99e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c988:	e897 0006 	ldmia.w	r7, {r1, r2}
    c98c:	090b      	lsrs	r3, r1, #4
    c98e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c992:	0914      	lsrs	r4, r2, #4
    c994:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    c998:	68fa      	ldr	r2, [r7, #12]
    c99a:	3201      	adds	r2, #1
    c99c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c99e:	e897 0006 	ldmia.w	r7, {r1, r2}
    c9a2:	430a      	orrs	r2, r1
    c9a4:	d1f0      	bne.n	c988 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c9a6:	68fb      	ldr	r3, [r7, #12]
}
    c9a8:	4618      	mov	r0, r3
    c9aa:	3710      	adds	r7, #16
    c9ac:	46bd      	mov	sp, r7
    c9ae:	bc90      	pop	{r4, r7}
    c9b0:	4770      	bx	lr

0000c9b2 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c9b2:	b480      	push	{r7}
    c9b4:	b087      	sub	sp, #28
    c9b6:	af00      	add	r7, sp, #0
    c9b8:	6078      	str	r0, [r7, #4]
    c9ba:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c9bc:	2300      	movs	r3, #0
    c9be:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c9c0:	2300      	movs	r3, #0
    c9c2:	613b      	str	r3, [r7, #16]
    c9c4:	2300      	movs	r3, #0
    c9c6:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	781b      	ldrb	r3, [r3, #0]
    c9cc:	2b2d      	cmp	r3, #45	; 0x2d
    c9ce:	d11b      	bne.n	ca08 <decstr_to_int+0x56>
    {
        bNeg = true;
    c9d0:	2301      	movs	r3, #1
    c9d2:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c9d4:	687b      	ldr	r3, [r7, #4]
    c9d6:	3301      	adds	r3, #1
    c9d8:	607b      	str	r3, [r7, #4]
        uCnt++;
    c9da:	68fb      	ldr	r3, [r7, #12]
    c9dc:	3301      	adds	r3, #1
    c9de:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9e0:	e012      	b.n	ca08 <decstr_to_int+0x56>
    {
        ++uCnt;
    c9e2:	68fb      	ldr	r3, [r7, #12]
    c9e4:	3301      	adds	r3, #1
    c9e6:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c9e8:	693a      	ldr	r2, [r7, #16]
    c9ea:	4613      	mov	r3, r2
    c9ec:	009b      	lsls	r3, r3, #2
    c9ee:	4413      	add	r3, r2
    c9f0:	005b      	lsls	r3, r3, #1
    c9f2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c9f4:	687b      	ldr	r3, [r7, #4]
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	461a      	mov	r2, r3
    c9fa:	693b      	ldr	r3, [r7, #16]
    c9fc:	4413      	add	r3, r2
    c9fe:	3b30      	subs	r3, #48	; 0x30
    ca00:	613b      	str	r3, [r7, #16]
        pcStr++;
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	3301      	adds	r3, #1
    ca06:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca08:	687b      	ldr	r3, [r7, #4]
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	2b2f      	cmp	r3, #47	; 0x2f
    ca0e:	d903      	bls.n	ca18 <decstr_to_int+0x66>
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	781b      	ldrb	r3, [r3, #0]
    ca14:	2b39      	cmp	r3, #57	; 0x39
    ca16:	d9e4      	bls.n	c9e2 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ca18:	683b      	ldr	r3, [r7, #0]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d002      	beq.n	ca24 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ca1e:	683b      	ldr	r3, [r7, #0]
    ca20:	68fa      	ldr	r2, [r7, #12]
    ca22:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ca24:	7dfb      	ldrb	r3, [r7, #23]
    ca26:	2b00      	cmp	r3, #0
    ca28:	d002      	beq.n	ca30 <decstr_to_int+0x7e>
    ca2a:	693b      	ldr	r3, [r7, #16]
    ca2c:	425b      	negs	r3, r3
    ca2e:	e000      	b.n	ca32 <decstr_to_int+0x80>
    ca30:	693b      	ldr	r3, [r7, #16]
}
    ca32:	4618      	mov	r0, r3
    ca34:	371c      	adds	r7, #28
    ca36:	46bd      	mov	sp, r7
    ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca3c:	4770      	bx	lr

0000ca3e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ca3e:	b590      	push	{r4, r7, lr}
    ca40:	b091      	sub	sp, #68	; 0x44
    ca42:	af00      	add	r7, sp, #0
    ca44:	e9c7 0102 	strd	r0, r1, [r7, #8]
    ca48:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ca4a:	2300      	movs	r3, #0
    ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ca4e:	2300      	movs	r3, #0
    ca50:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ca52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    ca56:	f7ff fe6b 	bl	c730 <divu64_10>
    ca5a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca5e:	68b9      	ldr	r1, [r7, #8]
    ca60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ca62:	4613      	mov	r3, r2
    ca64:	009b      	lsls	r3, r3, #2
    ca66:	4413      	add	r3, r2
    ca68:	005b      	lsls	r3, r3, #1
    ca6a:	1acb      	subs	r3, r1, r3
    ca6c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca70:	1c5a      	adds	r2, r3, #1
    ca72:	63fa      	str	r2, [r7, #60]	; 0x3c
    ca74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca76:	b2d2      	uxtb	r2, r2
    ca78:	3230      	adds	r2, #48	; 0x30
    ca7a:	b2d2      	uxtb	r2, r2
    ca7c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    ca80:	440b      	add	r3, r1
    ca82:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ca86:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    ca8a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    ca8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    ca92:	4323      	orrs	r3, r4
    ca94:	d1dd      	bne.n	ca52 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca98:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca9a:	687b      	ldr	r3, [r7, #4]
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d011      	beq.n	cac4 <uint64_to_str+0x86>
    {
        while ( ix-- )
    caa0:	e008      	b.n	cab4 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    caa2:	687b      	ldr	r3, [r7, #4]
    caa4:	1c5a      	adds	r2, r3, #1
    caa6:	607a      	str	r2, [r7, #4]
    caa8:	f107 0110 	add.w	r1, r7, #16
    caac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    caae:	440a      	add	r2, r1
    cab0:	7812      	ldrb	r2, [r2, #0]
    cab2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cab6:	1e5a      	subs	r2, r3, #1
    cab8:	63fa      	str	r2, [r7, #60]	; 0x3c
    caba:	2b00      	cmp	r3, #0
    cabc:	d1f1      	bne.n	caa2 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cabe:	687b      	ldr	r3, [r7, #4]
    cac0:	2200      	movs	r2, #0
    cac2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    cac6:	4618      	mov	r0, r3
    cac8:	3744      	adds	r7, #68	; 0x44
    caca:	46bd      	mov	sp, r7
    cacc:	bd90      	pop	{r4, r7, pc}

0000cace <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cace:	b4b0      	push	{r4, r5, r7}
    cad0:	b08d      	sub	sp, #52	; 0x34
    cad2:	af00      	add	r7, sp, #0
    cad4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cad8:	607a      	str	r2, [r7, #4]
    cada:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cadc:	2300      	movs	r3, #0
    cade:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cae4:	4313      	orrs	r3, r2
    cae6:	d131      	bne.n	cb4c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caea:	1c5a      	adds	r2, r3, #1
    caec:	62fa      	str	r2, [r7, #44]	; 0x2c
    caee:	f107 0230 	add.w	r2, r7, #48	; 0x30
    caf2:	4413      	add	r3, r2
    caf4:	2230      	movs	r2, #48	; 0x30
    caf6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cafa:	e027      	b.n	cb4c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    cafc:	7a3b      	ldrb	r3, [r7, #8]
    cafe:	f003 030f 	and.w	r3, r3, #15
    cb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cb06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cb0a:	2b09      	cmp	r3, #9
    cb0c:	d90a      	bls.n	cb24 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cb0e:	78fb      	ldrb	r3, [r7, #3]
    cb10:	2b00      	cmp	r3, #0
    cb12:	d001      	beq.n	cb18 <uint64_to_hexstr+0x4a>
    cb14:	2227      	movs	r2, #39	; 0x27
    cb16:	e000      	b.n	cb1a <uint64_to_hexstr+0x4c>
    cb18:	2207      	movs	r2, #7
    cb1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cb1e:	4413      	add	r3, r2
    cb20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb26:	1c5a      	adds	r2, r3, #1
    cb28:	62fa      	str	r2, [r7, #44]	; 0x2c
    cb2a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cb2e:	3230      	adds	r2, #48	; 0x30
    cb30:	b2d2      	uxtb	r2, r2
    cb32:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cb36:	440b      	add	r3, r1
    cb38:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cb3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cb40:	0914      	lsrs	r4, r2, #4
    cb42:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cb46:	091d      	lsrs	r5, r3, #4
    cb48:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cb4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cb50:	4313      	orrs	r3, r2
    cb52:	d1d3      	bne.n	cafc <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb56:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb58:	687b      	ldr	r3, [r7, #4]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d011      	beq.n	cb82 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cb5e:	e008      	b.n	cb72 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cb60:	687b      	ldr	r3, [r7, #4]
    cb62:	1c5a      	adds	r2, r3, #1
    cb64:	607a      	str	r2, [r7, #4]
    cb66:	f107 0110 	add.w	r1, r7, #16
    cb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb6c:	440a      	add	r2, r1
    cb6e:	7812      	ldrb	r2, [r2, #0]
    cb70:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb74:	1e5a      	subs	r2, r3, #1
    cb76:	62fa      	str	r2, [r7, #44]	; 0x2c
    cb78:	2b00      	cmp	r3, #0
    cb7a:	d1f1      	bne.n	cb60 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	2200      	movs	r2, #0
    cb80:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cb84:	4618      	mov	r0, r3
    cb86:	3734      	adds	r7, #52	; 0x34
    cb88:	46bd      	mov	sp, r7
    cb8a:	bcb0      	pop	{r4, r5, r7}
    cb8c:	4770      	bx	lr

0000cb8e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb8e:	b480      	push	{r7}
    cb90:	b085      	sub	sp, #20
    cb92:	af00      	add	r7, sp, #0
    cb94:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cb96:	2300      	movs	r3, #0
    cb98:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d104      	bne.n	cbaa <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cba0:	68fb      	ldr	r3, [r7, #12]
    cba2:	e009      	b.n	cbb8 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cba4:	68fb      	ldr	r3, [r7, #12]
    cba6:	3301      	adds	r3, #1
    cba8:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cbaa:	687b      	ldr	r3, [r7, #4]
    cbac:	1c5a      	adds	r2, r3, #1
    cbae:	607a      	str	r2, [r7, #4]
    cbb0:	781b      	ldrb	r3, [r3, #0]
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d1f6      	bne.n	cba4 <simple_strlen+0x16>
    }
    return ui32RetVal;
    cbb6:	68fb      	ldr	r3, [r7, #12]
}
    cbb8:	4618      	mov	r0, r3
    cbba:	3714      	adds	r7, #20
    cbbc:	46bd      	mov	sp, r7
    cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbc2:	4770      	bx	lr

0000cbc4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cbc4:	b480      	push	{r7}
    cbc6:	b087      	sub	sp, #28
    cbc8:	af00      	add	r7, sp, #0
    cbca:	60f8      	str	r0, [r7, #12]
    cbcc:	460b      	mov	r3, r1
    cbce:	607a      	str	r2, [r7, #4]
    cbd0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cbd2:	2300      	movs	r3, #0
    cbd4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cbd6:	687b      	ldr	r3, [r7, #4]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	dc0c      	bgt.n	cbf6 <padbuffer+0x32>
    {
        return i32Cnt;
    cbdc:	697b      	ldr	r3, [r7, #20]
    cbde:	e010      	b.n	cc02 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cbe0:	68fb      	ldr	r3, [r7, #12]
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d004      	beq.n	cbf0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cbe6:	68fb      	ldr	r3, [r7, #12]
    cbe8:	1c5a      	adds	r2, r3, #1
    cbea:	60fa      	str	r2, [r7, #12]
    cbec:	7afa      	ldrb	r2, [r7, #11]
    cbee:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cbf0:	697b      	ldr	r3, [r7, #20]
    cbf2:	3301      	adds	r3, #1
    cbf4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	1e5a      	subs	r2, r3, #1
    cbfa:	607a      	str	r2, [r7, #4]
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d1ef      	bne.n	cbe0 <padbuffer+0x1c>
    }

    return i32Cnt;
    cc00:	697b      	ldr	r3, [r7, #20]
}
    cc02:	4618      	mov	r0, r3
    cc04:	371c      	adds	r7, #28
    cc06:	46bd      	mov	sp, r7
    cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc0c:	4770      	bx	lr
	...

0000cc10 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cc10:	b590      	push	{r4, r7, lr}
    cc12:	b08f      	sub	sp, #60	; 0x3c
    cc14:	af00      	add	r7, sp, #0
    cc16:	60f8      	str	r0, [r7, #12]
    cc18:	60b9      	str	r1, [r7, #8]
    cc1a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cc1c:	68bb      	ldr	r3, [r7, #8]
    cc1e:	681b      	ldr	r3, [r3, #0]
    cc20:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc24:	2b03      	cmp	r3, #3
    cc26:	dc02      	bgt.n	cc2e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cc28:	f06f 0302 	mvn.w	r3, #2
    cc2c:	e0e7      	b.n	cdfe <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    cc2e:	edd7 7a03 	vldr	s15, [r7, #12]
    cc32:	eef5 7a40 	vcmp.f32	s15, #0.0
    cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc3a:	d104      	bne.n	cc46 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cc3c:	68bb      	ldr	r3, [r7, #8]
    cc3e:	4a72      	ldr	r2, [pc, #456]	; (ce08 <ftoa+0x1f8>)
    cc40:	601a      	str	r2, [r3, #0]
        return 3;
    cc42:	2303      	movs	r3, #3
    cc44:	e0db      	b.n	cdfe <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    cc46:	68bb      	ldr	r3, [r7, #8]
    cc48:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cc4a:	68fb      	ldr	r3, [r7, #12]
    cc4c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cc4e:	693b      	ldr	r3, [r7, #16]
    cc50:	15db      	asrs	r3, r3, #23
    cc52:	b2db      	uxtb	r3, r3
    cc54:	3b7f      	subs	r3, #127	; 0x7f
    cc56:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cc58:	693b      	ldr	r3, [r7, #16]
    cc5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cc5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cc62:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cc64:	2300      	movs	r3, #0
    cc66:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cc68:	2300      	movs	r3, #0
    cc6a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cc6c:	69fb      	ldr	r3, [r7, #28]
    cc6e:	2b1e      	cmp	r3, #30
    cc70:	dd02      	ble.n	cc78 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc72:	f06f 0301 	mvn.w	r3, #1
    cc76:	e0c2      	b.n	cdfe <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    cc78:	69fb      	ldr	r3, [r7, #28]
    cc7a:	f113 0f17 	cmn.w	r3, #23
    cc7e:	da02      	bge.n	cc86 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc80:	f04f 33ff 	mov.w	r3, #4294967295
    cc84:	e0bb      	b.n	cdfe <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    cc86:	69fb      	ldr	r3, [r7, #28]
    cc88:	2b16      	cmp	r3, #22
    cc8a:	dd06      	ble.n	cc9a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc8c:	69fb      	ldr	r3, [r7, #28]
    cc8e:	3b17      	subs	r3, #23
    cc90:	69ba      	ldr	r2, [r7, #24]
    cc92:	fa02 f303 	lsl.w	r3, r2, r3
    cc96:	637b      	str	r3, [r7, #52]	; 0x34
    cc98:	e01a      	b.n	ccd0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc9a:	69fb      	ldr	r3, [r7, #28]
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	db0f      	blt.n	ccc0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cca0:	69fb      	ldr	r3, [r7, #28]
    cca2:	f1c3 0317 	rsb	r3, r3, #23
    cca6:	69ba      	ldr	r2, [r7, #24]
    cca8:	fa42 f303 	asr.w	r3, r2, r3
    ccac:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ccae:	69fb      	ldr	r3, [r7, #28]
    ccb0:	3301      	adds	r3, #1
    ccb2:	69ba      	ldr	r2, [r7, #24]
    ccb4:	fa02 f303 	lsl.w	r3, r2, r3
    ccb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccbc:	633b      	str	r3, [r7, #48]	; 0x30
    ccbe:	e007      	b.n	ccd0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ccc0:	69bb      	ldr	r3, [r7, #24]
    ccc2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ccc6:	69fb      	ldr	r3, [r7, #28]
    ccc8:	43db      	mvns	r3, r3
    ccca:	fa42 f303 	asr.w	r3, r2, r3
    ccce:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ccd0:	693b      	ldr	r3, [r7, #16]
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	da04      	bge.n	cce0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ccd6:	68bb      	ldr	r3, [r7, #8]
    ccd8:	1c5a      	adds	r2, r3, #1
    ccda:	60ba      	str	r2, [r7, #8]
    ccdc:	222d      	movs	r2, #45	; 0x2d
    ccde:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cce2:	2b00      	cmp	r3, #0
    cce4:	d105      	bne.n	ccf2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cce6:	68bb      	ldr	r3, [r7, #8]
    cce8:	1c5a      	adds	r2, r3, #1
    ccea:	60ba      	str	r2, [r7, #8]
    ccec:	2230      	movs	r2, #48	; 0x30
    ccee:	701a      	strb	r2, [r3, #0]
    ccf0:	e021      	b.n	cd36 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	dd08      	ble.n	cd0a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ccf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ccfa:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ccfe:	68ba      	ldr	r2, [r7, #8]
    cd00:	4618      	mov	r0, r3
    cd02:	4621      	mov	r1, r4
    cd04:	f7ff fe9b 	bl	ca3e <uint64_to_str>
    cd08:	e011      	b.n	cd2e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cd0a:	68bb      	ldr	r3, [r7, #8]
    cd0c:	1c5a      	adds	r2, r3, #1
    cd0e:	60ba      	str	r2, [r7, #8]
    cd10:	222d      	movs	r2, #45	; 0x2d
    cd12:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cd16:	425b      	negs	r3, r3
    cd18:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cd1c:	68ba      	ldr	r2, [r7, #8]
    cd1e:	4618      	mov	r0, r3
    cd20:	4621      	mov	r1, r4
    cd22:	f7ff fe8c 	bl	ca3e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cd26:	e002      	b.n	cd2e <ftoa+0x11e>
        {
            pcBuf++;
    cd28:	68bb      	ldr	r3, [r7, #8]
    cd2a:	3301      	adds	r3, #1
    cd2c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cd2e:	68bb      	ldr	r3, [r7, #8]
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d1f8      	bne.n	cd28 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cd36:	68bb      	ldr	r3, [r7, #8]
    cd38:	1c5a      	adds	r2, r3, #1
    cd3a:	60ba      	str	r2, [r7, #8]
    cd3c:	222e      	movs	r2, #46	; 0x2e
    cd3e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd42:	2b00      	cmp	r3, #0
    cd44:	d105      	bne.n	cd52 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cd46:	68bb      	ldr	r3, [r7, #8]
    cd48:	1c5a      	adds	r2, r3, #1
    cd4a:	60ba      	str	r2, [r7, #8]
    cd4c:	2230      	movs	r2, #48	; 0x30
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	e04f      	b.n	cdf2 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd52:	68ba      	ldr	r2, [r7, #8]
    cd54:	6a3b      	ldr	r3, [r7, #32]
    cd56:	1ad3      	subs	r3, r2, r3
    cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cd5a:	1ad3      	subs	r3, r2, r3
    cd5c:	3b01      	subs	r3, #1
    cd5e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd60:	697a      	ldr	r2, [r7, #20]
    cd62:	687b      	ldr	r3, [r7, #4]
    cd64:	4293      	cmp	r3, r2
    cd66:	bfa8      	it	ge
    cd68:	4613      	movge	r3, r2
    cd6a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cd6c:	2300      	movs	r3, #0
    cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
    cd70:	e015      	b.n	cd9e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd74:	4613      	mov	r3, r2
    cd76:	009b      	lsls	r3, r3, #2
    cd78:	4413      	add	r3, r2
    cd7a:	005b      	lsls	r3, r3, #1
    cd7c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd7e:	68bb      	ldr	r3, [r7, #8]
    cd80:	1c5a      	adds	r2, r3, #1
    cd82:	60ba      	str	r2, [r7, #8]
    cd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cd86:	1612      	asrs	r2, r2, #24
    cd88:	b2d2      	uxtb	r2, r2
    cd8a:	3230      	adds	r2, #48	; 0x30
    cd8c:	b2d2      	uxtb	r2, r2
    cd8e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd96:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cd9a:	3301      	adds	r3, #1
    cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
    cd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cda0:	697b      	ldr	r3, [r7, #20]
    cda2:	429a      	cmp	r2, r3
    cda4:	dbe5      	blt.n	cd72 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cda8:	4613      	mov	r3, r2
    cdaa:	009b      	lsls	r3, r3, #2
    cdac:	4413      	add	r3, r2
    cdae:	005b      	lsls	r3, r3, #1
    cdb0:	161b      	asrs	r3, r3, #24
    cdb2:	2b04      	cmp	r3, #4
    cdb4:	dd1d      	ble.n	cdf2 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cdb6:	68bb      	ldr	r3, [r7, #8]
    cdb8:	3b01      	subs	r3, #1
    cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdbc:	e015      	b.n	cdea <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdc0:	781b      	ldrb	r3, [r3, #0]
    cdc2:	2b2e      	cmp	r3, #46	; 0x2e
    cdc4:	d00e      	beq.n	cde4 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	2b39      	cmp	r3, #57	; 0x39
    cdcc:	d103      	bne.n	cdd6 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdd0:	2230      	movs	r2, #48	; 0x30
    cdd2:	701a      	strb	r2, [r3, #0]
    cdd4:	e006      	b.n	cde4 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdd8:	781b      	ldrb	r3, [r3, #0]
    cdda:	3301      	adds	r3, #1
    cddc:	b2da      	uxtb	r2, r3
    cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cde0:	701a      	strb	r2, [r3, #0]
                    break;
    cde2:	e006      	b.n	cdf2 <ftoa+0x1e2>
                }
                pcBuftmp--;
    cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cde6:	3b01      	subs	r3, #1
    cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cdec:	6a3b      	ldr	r3, [r7, #32]
    cdee:	429a      	cmp	r2, r3
    cdf0:	d2e5      	bcs.n	cdbe <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cdf2:	68bb      	ldr	r3, [r7, #8]
    cdf4:	2200      	movs	r2, #0
    cdf6:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cdf8:	68ba      	ldr	r2, [r7, #8]
    cdfa:	6a3b      	ldr	r3, [r7, #32]
    cdfc:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cdfe:	4618      	mov	r0, r3
    ce00:	373c      	adds	r7, #60	; 0x3c
    ce02:	46bd      	mov	sp, r7
    ce04:	bd90      	pop	{r4, r7, pc}
    ce06:	bf00      	nop
    ce08:	00302e30 	.word	0x00302e30

0000ce0c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ce0c:	b590      	push	{r4, r7, lr}
    ce0e:	b095      	sub	sp, #84	; 0x54
    ce10:	af00      	add	r7, sp, #0
    ce12:	60f8      	str	r0, [r7, #12]
    ce14:	60b9      	str	r1, [r7, #8]
    ce16:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ce18:	2300      	movs	r3, #0
    ce1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ce1c:	2300      	movs	r3, #0
    ce1e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    ce20:	e2e3      	b.n	d3ea <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ce22:	2306      	movs	r3, #6
    ce24:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    ce26:	68bb      	ldr	r3, [r7, #8]
    ce28:	781b      	ldrb	r3, [r3, #0]
    ce2a:	2b25      	cmp	r3, #37	; 0x25
    ce2c:	d01f      	beq.n	ce6e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ce2e:	68fb      	ldr	r3, [r7, #12]
    ce30:	2b00      	cmp	r3, #0
    ce32:	d015      	beq.n	ce60 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ce34:	68bb      	ldr	r3, [r7, #8]
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	2b0a      	cmp	r3, #10
    ce3a:	d10b      	bne.n	ce54 <am_util_stdio_vsprintf+0x48>
    ce3c:	4bb1      	ldr	r3, [pc, #708]	; (d104 <am_util_stdio_vsprintf+0x2f8>)
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d007      	beq.n	ce54 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ce44:	68fb      	ldr	r3, [r7, #12]
    ce46:	1c5a      	adds	r2, r3, #1
    ce48:	60fa      	str	r2, [r7, #12]
    ce4a:	220d      	movs	r2, #13
    ce4c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ce4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce50:	3301      	adds	r3, #1
    ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    ce54:	68fb      	ldr	r3, [r7, #12]
    ce56:	1c5a      	adds	r2, r3, #1
    ce58:	60fa      	str	r2, [r7, #12]
    ce5a:	68ba      	ldr	r2, [r7, #8]
    ce5c:	7812      	ldrb	r2, [r2, #0]
    ce5e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ce60:	68bb      	ldr	r3, [r7, #8]
    ce62:	3301      	adds	r3, #1
    ce64:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    ce66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce68:	3301      	adds	r3, #1
    ce6a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    ce6c:	e2bd      	b.n	d3ea <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	3301      	adds	r3, #1
    ce72:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    ce74:	2300      	movs	r3, #0
    ce76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ce7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce82:	2320      	movs	r3, #32
    ce84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    ce88:	68bb      	ldr	r3, [r7, #8]
    ce8a:	781b      	ldrb	r3, [r3, #0]
    ce8c:	2b30      	cmp	r3, #48	; 0x30
    ce8e:	d105      	bne.n	ce9c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce90:	2330      	movs	r3, #48	; 0x30
    ce92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    ce96:	68bb      	ldr	r3, [r7, #8]
    ce98:	3301      	adds	r3, #1
    ce9a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce9c:	f107 0310 	add.w	r3, r7, #16
    cea0:	4619      	mov	r1, r3
    cea2:	68b8      	ldr	r0, [r7, #8]
    cea4:	f7ff fd85 	bl	c9b2 <decstr_to_int>
    cea8:	4603      	mov	r3, r0
    ceaa:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    ceac:	693b      	ldr	r3, [r7, #16]
    ceae:	68ba      	ldr	r2, [r7, #8]
    ceb0:	4413      	add	r3, r2
    ceb2:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ceb4:	68bb      	ldr	r3, [r7, #8]
    ceb6:	781b      	ldrb	r3, [r3, #0]
    ceb8:	2b73      	cmp	r3, #115	; 0x73
    ceba:	d005      	beq.n	cec8 <am_util_stdio_vsprintf+0xbc>
    cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cebe:	2b00      	cmp	r3, #0
    cec0:	da02      	bge.n	cec8 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cec4:	425b      	negs	r3, r3
    cec6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cec8:	68bb      	ldr	r3, [r7, #8]
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	2b2e      	cmp	r3, #46	; 0x2e
    cece:	d10e      	bne.n	ceee <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    ced0:	68bb      	ldr	r3, [r7, #8]
    ced2:	3301      	adds	r3, #1
    ced4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ced6:	f107 0310 	add.w	r3, r7, #16
    ceda:	4619      	mov	r1, r3
    cedc:	68b8      	ldr	r0, [r7, #8]
    cede:	f7ff fd68 	bl	c9b2 <decstr_to_int>
    cee2:	4603      	mov	r3, r0
    cee4:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cee6:	693b      	ldr	r3, [r7, #16]
    cee8:	68ba      	ldr	r2, [r7, #8]
    ceea:	4413      	add	r3, r2
    ceec:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ceee:	68bb      	ldr	r3, [r7, #8]
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	2b6c      	cmp	r3, #108	; 0x6c
    cef4:	d10c      	bne.n	cf10 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cef6:	68bb      	ldr	r3, [r7, #8]
    cef8:	3301      	adds	r3, #1
    cefa:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cefc:	68bb      	ldr	r3, [r7, #8]
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	2b6c      	cmp	r3, #108	; 0x6c
    cf02:	d105      	bne.n	cf10 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cf04:	68bb      	ldr	r3, [r7, #8]
    cf06:	3301      	adds	r3, #1
    cf08:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cf0a:	2301      	movs	r3, #1
    cf0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cf10:	68bb      	ldr	r3, [r7, #8]
    cf12:	781b      	ldrb	r3, [r3, #0]
    cf14:	3b46      	subs	r3, #70	; 0x46
    cf16:	2b32      	cmp	r3, #50	; 0x32
    cf18:	f200 8254 	bhi.w	d3c4 <am_util_stdio_vsprintf+0x5b8>
    cf1c:	a201      	add	r2, pc, #4	; (adr r2, cf24 <am_util_stdio_vsprintf+0x118>)
    cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf22:	bf00      	nop
    cf24:	0000d34f 	.word	0x0000d34f
    cf28:	0000d3c5 	.word	0x0000d3c5
    cf2c:	0000d3c5 	.word	0x0000d3c5
    cf30:	0000d3c5 	.word	0x0000d3c5
    cf34:	0000d3c5 	.word	0x0000d3c5
    cf38:	0000d3c5 	.word	0x0000d3c5
    cf3c:	0000d3c5 	.word	0x0000d3c5
    cf40:	0000d3c5 	.word	0x0000d3c5
    cf44:	0000d3c5 	.word	0x0000d3c5
    cf48:	0000d3c5 	.word	0x0000d3c5
    cf4c:	0000d3c5 	.word	0x0000d3c5
    cf50:	0000d3c5 	.word	0x0000d3c5
    cf54:	0000d3c5 	.word	0x0000d3c5
    cf58:	0000d3c5 	.word	0x0000d3c5
    cf5c:	0000d3c5 	.word	0x0000d3c5
    cf60:	0000d3c5 	.word	0x0000d3c5
    cf64:	0000d3c5 	.word	0x0000d3c5
    cf68:	0000d3c5 	.word	0x0000d3c5
    cf6c:	0000d0eb 	.word	0x0000d0eb
    cf70:	0000d3c5 	.word	0x0000d3c5
    cf74:	0000d3c5 	.word	0x0000d3c5
    cf78:	0000d3c5 	.word	0x0000d3c5
    cf7c:	0000d3c5 	.word	0x0000d3c5
    cf80:	0000d3c5 	.word	0x0000d3c5
    cf84:	0000d3c5 	.word	0x0000d3c5
    cf88:	0000d3c5 	.word	0x0000d3c5
    cf8c:	0000d3c5 	.word	0x0000d3c5
    cf90:	0000d3c5 	.word	0x0000d3c5
    cf94:	0000d3c5 	.word	0x0000d3c5
    cf98:	0000cff1 	.word	0x0000cff1
    cf9c:	0000d217 	.word	0x0000d217
    cfa0:	0000d3c5 	.word	0x0000d3c5
    cfa4:	0000d34f 	.word	0x0000d34f
    cfa8:	0000d3c5 	.word	0x0000d3c5
    cfac:	0000d3c5 	.word	0x0000d3c5
    cfb0:	0000d217 	.word	0x0000d217
    cfb4:	0000d3c5 	.word	0x0000d3c5
    cfb8:	0000d3c5 	.word	0x0000d3c5
    cfbc:	0000d3c5 	.word	0x0000d3c5
    cfc0:	0000d3c5 	.word	0x0000d3c5
    cfc4:	0000d3c5 	.word	0x0000d3c5
    cfc8:	0000d3c5 	.word	0x0000d3c5
    cfcc:	0000d3c5 	.word	0x0000d3c5
    cfd0:	0000d3c5 	.word	0x0000d3c5
    cfd4:	0000d3c5 	.word	0x0000d3c5
    cfd8:	0000d017 	.word	0x0000d017
    cfdc:	0000d3c5 	.word	0x0000d3c5
    cfe0:	0000d185 	.word	0x0000d185
    cfe4:	0000d3c5 	.word	0x0000d3c5
    cfe8:	0000d3c5 	.word	0x0000d3c5
    cfec:	0000d0e5 	.word	0x0000d0e5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cff0:	687b      	ldr	r3, [r7, #4]
    cff2:	1d1a      	adds	r2, r3, #4
    cff4:	607a      	str	r2, [r7, #4]
    cff6:	681b      	ldr	r3, [r3, #0]
    cff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cffc:	68fb      	ldr	r3, [r7, #12]
    cffe:	2b00      	cmp	r3, #0
    d000:	d005      	beq.n	d00e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	1c5a      	adds	r2, r3, #1
    d006:	60fa      	str	r2, [r7, #12]
    d008:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d00c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d010:	3301      	adds	r3, #1
    d012:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d014:	e1e6      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d016:	687b      	ldr	r3, [r7, #4]
    d018:	1d1a      	adds	r2, r3, #4
    d01a:	607a      	str	r2, [r7, #4]
    d01c:	681b      	ldr	r3, [r3, #0]
    d01e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d020:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d022:	f7ff fdb4 	bl	cb8e <simple_strlen>
    d026:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d02a:	2b00      	cmp	r3, #0
    d02c:	dd2e      	ble.n	d08c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d032:	429a      	cmp	r2, r3
    d034:	d22a      	bcs.n	d08c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d036:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d03a:	1ad3      	subs	r3, r2, r3
    d03c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d042:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d044:	4619      	mov	r1, r3
    d046:	68f8      	ldr	r0, [r7, #12]
    d048:	f7ff fdbc 	bl	cbc4 <padbuffer>
    d04c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	2b00      	cmp	r3, #0
    d052:	d001      	beq.n	d058 <am_util_stdio_vsprintf+0x24c>
    d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d056:	e000      	b.n	d05a <am_util_stdio_vsprintf+0x24e>
    d058:	2300      	movs	r3, #0
    d05a:	68fa      	ldr	r2, [r7, #12]
    d05c:	4413      	add	r3, r2
    d05e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d064:	4413      	add	r3, r2
    d066:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d068:	2300      	movs	r3, #0
    d06a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d06c:	e00e      	b.n	d08c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d06e:	68fb      	ldr	r3, [r7, #12]
    d070:	2b00      	cmp	r3, #0
    d072:	d005      	beq.n	d080 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d074:	68fb      	ldr	r3, [r7, #12]
    d076:	1c5a      	adds	r2, r3, #1
    d078:	60fa      	str	r2, [r7, #12]
    d07a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d07c:	7812      	ldrb	r2, [r2, #0]
    d07e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d082:	3301      	adds	r3, #1
    d084:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d088:	3301      	adds	r3, #1
    d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d08e:	781b      	ldrb	r3, [r3, #0]
    d090:	2b00      	cmp	r3, #0
    d092:	d1ec      	bne.n	d06e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d096:	2b00      	cmp	r3, #0
    d098:	f000 81a1 	beq.w	d3de <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d09e:	425b      	negs	r3, r3
    d0a0:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d0a6:	429a      	cmp	r2, r3
    d0a8:	f080 8199 	bcs.w	d3de <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d0b0:	1ad3      	subs	r3, r2, r3
    d0b2:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ba:	4619      	mov	r1, r3
    d0bc:	68f8      	ldr	r0, [r7, #12]
    d0be:	f7ff fd81 	bl	cbc4 <padbuffer>
    d0c2:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d0c4:	68fb      	ldr	r3, [r7, #12]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d001      	beq.n	d0ce <am_util_stdio_vsprintf+0x2c2>
    d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0cc:	e000      	b.n	d0d0 <am_util_stdio_vsprintf+0x2c4>
    d0ce:	2300      	movs	r3, #0
    d0d0:	68fa      	ldr	r2, [r7, #12]
    d0d2:	4413      	add	r3, r2
    d0d4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0da:	4413      	add	r3, r2
    d0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d0de:	2300      	movs	r3, #0
    d0e0:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d0e2:	e17c      	b.n	d3de <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d0e4:	2301      	movs	r3, #1
    d0e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d00a      	beq.n	d108 <am_util_stdio_vsprintf+0x2fc>
    d0f2:	687b      	ldr	r3, [r7, #4]
    d0f4:	3307      	adds	r3, #7
    d0f6:	f023 0307 	bic.w	r3, r3, #7
    d0fa:	f103 0208 	add.w	r2, r3, #8
    d0fe:	607a      	str	r2, [r7, #4]
    d100:	cb18      	ldmia	r3, {r3, r4}
    d102:	e007      	b.n	d114 <am_util_stdio_vsprintf+0x308>
    d104:	10001104 	.word	0x10001104
                                      va_arg(pArgs, uint32_t);
    d108:	687b      	ldr	r3, [r7, #4]
    d10a:	1d1a      	adds	r2, r3, #4
    d10c:	607a      	str	r2, [r7, #4]
    d10e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d110:	f04f 0400 	mov.w	r4, #0
    d114:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d11a:	2b00      	cmp	r3, #0
    d11c:	d01e      	beq.n	d15c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d11e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d122:	f7ff fc22 	bl	c96a <ndigits_in_hex>
    d126:	4602      	mov	r2, r0
    d128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d12a:	1a9b      	subs	r3, r3, r2
    d12c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d12e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d132:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d134:	4619      	mov	r1, r3
    d136:	68f8      	ldr	r0, [r7, #12]
    d138:	f7ff fd44 	bl	cbc4 <padbuffer>
    d13c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d13e:	68fb      	ldr	r3, [r7, #12]
    d140:	2b00      	cmp	r3, #0
    d142:	d001      	beq.n	d148 <am_util_stdio_vsprintf+0x33c>
    d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d146:	e000      	b.n	d14a <am_util_stdio_vsprintf+0x33e>
    d148:	2300      	movs	r3, #0
    d14a:	68fa      	ldr	r2, [r7, #12]
    d14c:	4413      	add	r3, r2
    d14e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d154:	4413      	add	r3, r2
    d156:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d158:	2300      	movs	r3, #0
    d15a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d15c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d160:	68fa      	ldr	r2, [r7, #12]
    d162:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d166:	f7ff fcb2 	bl	cace <uint64_to_hexstr>
    d16a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d16c:	68fb      	ldr	r3, [r7, #12]
    d16e:	2b00      	cmp	r3, #0
    d170:	d003      	beq.n	d17a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d174:	68fa      	ldr	r2, [r7, #12]
    d176:	4413      	add	r3, r2
    d178:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d17c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d17e:	4413      	add	r3, r2
    d180:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d182:	e12f      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d184:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d188:	2b00      	cmp	r3, #0
    d18a:	d008      	beq.n	d19e <am_util_stdio_vsprintf+0x392>
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	3307      	adds	r3, #7
    d190:	f023 0307 	bic.w	r3, r3, #7
    d194:	f103 0208 	add.w	r2, r3, #8
    d198:	607a      	str	r2, [r7, #4]
    d19a:	cb18      	ldmia	r3, {r3, r4}
    d19c:	e005      	b.n	d1aa <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	1d1a      	adds	r2, r3, #4
    d1a2:	607a      	str	r2, [r7, #4]
    d1a4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1a6:	f04f 0400 	mov.w	r4, #0
    d1aa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d01e      	beq.n	d1f2 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d1b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d1b8:	f7ff fb99 	bl	c8ee <ndigits_in_u64>
    d1bc:	4602      	mov	r2, r0
    d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1c0:	1a9b      	subs	r3, r3, r2
    d1c2:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1ca:	4619      	mov	r1, r3
    d1cc:	68f8      	ldr	r0, [r7, #12]
    d1ce:	f7ff fcf9 	bl	cbc4 <padbuffer>
    d1d2:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d1d4:	68fb      	ldr	r3, [r7, #12]
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d001      	beq.n	d1de <am_util_stdio_vsprintf+0x3d2>
    d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1dc:	e000      	b.n	d1e0 <am_util_stdio_vsprintf+0x3d4>
    d1de:	2300      	movs	r3, #0
    d1e0:	68fa      	ldr	r2, [r7, #12]
    d1e2:	4413      	add	r3, r2
    d1e4:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1ea:	4413      	add	r3, r2
    d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d1ee:	2300      	movs	r3, #0
    d1f0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1f2:	68fa      	ldr	r2, [r7, #12]
    d1f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d1f8:	f7ff fc21 	bl	ca3e <uint64_to_str>
    d1fc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d1fe:	68fb      	ldr	r3, [r7, #12]
    d200:	2b00      	cmp	r3, #0
    d202:	d003      	beq.n	d20c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d206:	68fa      	ldr	r2, [r7, #12]
    d208:	4413      	add	r3, r2
    d20a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d20e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d210:	4413      	add	r3, r2
    d212:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d214:	e0e6      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d216:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d21a:	2b00      	cmp	r3, #0
    d21c:	d008      	beq.n	d230 <am_util_stdio_vsprintf+0x424>
    d21e:	687b      	ldr	r3, [r7, #4]
    d220:	3307      	adds	r3, #7
    d222:	f023 0307 	bic.w	r3, r3, #7
    d226:	f103 0208 	add.w	r2, r3, #8
    d22a:	607a      	str	r2, [r7, #4]
    d22c:	cb18      	ldmia	r3, {r3, r4}
    d22e:	e005      	b.n	d23c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d230:	687b      	ldr	r3, [r7, #4]
    d232:	1d1a      	adds	r2, r3, #4
    d234:	607a      	str	r2, [r7, #4]
    d236:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d238:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d23c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d240:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d244:	2b00      	cmp	r3, #0
    d246:	f174 0300 	sbcs.w	r3, r4, #0
    d24a:	da0a      	bge.n	d262 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d24c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d250:	425b      	negs	r3, r3
    d252:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d256:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d25a:	2301      	movs	r3, #1
    d25c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d260:	e006      	b.n	d270 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d262:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d266:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d26a:	2300      	movs	r3, #0
    d26c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d272:	2b00      	cmp	r3, #0
    d274:	d04a      	beq.n	d30c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d276:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d27a:	4618      	mov	r0, r3
    d27c:	4621      	mov	r1, r4
    d27e:	f7ff fb57 	bl	c930 <ndigits_in_i64>
    d282:	4602      	mov	r2, r0
    d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d286:	1a9b      	subs	r3, r3, r2
    d288:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d28a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d28e:	2b00      	cmp	r3, #0
    d290:	d011      	beq.n	d2b6 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d294:	3b01      	subs	r3, #1
    d296:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d29c:	2b30      	cmp	r3, #48	; 0x30
    d29e:	d10a      	bne.n	d2b6 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d2a0:	68fb      	ldr	r3, [r7, #12]
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d004      	beq.n	d2b0 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d2a6:	68fb      	ldr	r3, [r7, #12]
    d2a8:	1c5a      	adds	r2, r3, #1
    d2aa:	60fa      	str	r2, [r7, #12]
    d2ac:	222d      	movs	r2, #45	; 0x2d
    d2ae:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2b2:	3301      	adds	r3, #1
    d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d2bc:	4619      	mov	r1, r3
    d2be:	68f8      	ldr	r0, [r7, #12]
    d2c0:	f7ff fc80 	bl	cbc4 <padbuffer>
    d2c4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d2c6:	68fb      	ldr	r3, [r7, #12]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d001      	beq.n	d2d0 <am_util_stdio_vsprintf+0x4c4>
    d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2ce:	e000      	b.n	d2d2 <am_util_stdio_vsprintf+0x4c6>
    d2d0:	2300      	movs	r3, #0
    d2d2:	68fa      	ldr	r2, [r7, #12]
    d2d4:	4413      	add	r3, r2
    d2d6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2dc:	4413      	add	r3, r2
    d2de:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d2e0:	2300      	movs	r3, #0
    d2e2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d2e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d01e      	beq.n	d32a <am_util_stdio_vsprintf+0x51e>
    d2ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d2f0:	2b20      	cmp	r3, #32
    d2f2:	d11a      	bne.n	d32a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d004      	beq.n	d304 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d2fa:	68fb      	ldr	r3, [r7, #12]
    d2fc:	1c5a      	adds	r2, r3, #1
    d2fe:	60fa      	str	r2, [r7, #12]
    d300:	222d      	movs	r2, #45	; 0x2d
    d302:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d306:	3301      	adds	r3, #1
    d308:	63fb      	str	r3, [r7, #60]	; 0x3c
    d30a:	e00e      	b.n	d32a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d30c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d310:	2b00      	cmp	r3, #0
    d312:	d00a      	beq.n	d32a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d314:	68fb      	ldr	r3, [r7, #12]
    d316:	2b00      	cmp	r3, #0
    d318:	d004      	beq.n	d324 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d31a:	68fb      	ldr	r3, [r7, #12]
    d31c:	1c5a      	adds	r2, r3, #1
    d31e:	60fa      	str	r2, [r7, #12]
    d320:	222d      	movs	r2, #45	; 0x2d
    d322:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d326:	3301      	adds	r3, #1
    d328:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d32a:	68fa      	ldr	r2, [r7, #12]
    d32c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d330:	f7ff fb85 	bl	ca3e <uint64_to_str>
    d334:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d336:	68fb      	ldr	r3, [r7, #12]
    d338:	2b00      	cmp	r3, #0
    d33a:	d003      	beq.n	d344 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d33e:	68fa      	ldr	r2, [r7, #12]
    d340:	4413      	add	r3, r2
    d342:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d348:	4413      	add	r3, r2
    d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d34c:	e04a      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d34e:	68fb      	ldr	r3, [r7, #12]
    d350:	2b00      	cmp	r3, #0
    d352:	d046      	beq.n	d3e2 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d354:	687b      	ldr	r3, [r7, #4]
    d356:	3307      	adds	r3, #7
    d358:	f023 0307 	bic.w	r3, r3, #7
    d35c:	f103 0208 	add.w	r2, r3, #8
    d360:	607a      	str	r2, [r7, #4]
    d362:	cb18      	ldmia	r3, {r3, r4}
    d364:	4618      	mov	r0, r3
    d366:	4621      	mov	r1, r4
    d368:	f7fe feca 	bl	c100 <__aeabi_d2f>
    d36c:	4603      	mov	r3, r0
    d36e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d370:	68fb      	ldr	r3, [r7, #12]
    d372:	2214      	movs	r2, #20
    d374:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d378:	68f9      	ldr	r1, [r7, #12]
    d37a:	6978      	ldr	r0, [r7, #20]
    d37c:	f7ff fc48 	bl	cc10 <ftoa>
    d380:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d384:	2b00      	cmp	r3, #0
    d386:	da14      	bge.n	d3b2 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d38e:	d102      	bne.n	d396 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d390:	4b1e      	ldr	r3, [pc, #120]	; (d40c <am_util_stdio_vsprintf+0x600>)
    d392:	62bb      	str	r3, [r7, #40]	; 0x28
    d394:	e008      	b.n	d3a8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d398:	f113 0f02 	cmn.w	r3, #2
    d39c:	d102      	bne.n	d3a4 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d39e:	4b1c      	ldr	r3, [pc, #112]	; (d410 <am_util_stdio_vsprintf+0x604>)
    d3a0:	62bb      	str	r3, [r7, #40]	; 0x28
    d3a2:	e001      	b.n	d3a8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d3a4:	4b1b      	ldr	r3, [pc, #108]	; (d414 <am_util_stdio_vsprintf+0x608>)
    d3a6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d3a8:	68fb      	ldr	r3, [r7, #12]
    d3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d3ac:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d3ae:	2303      	movs	r3, #3
    d3b0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3b6:	4413      	add	r3, r2
    d3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d3bc:	68fa      	ldr	r2, [r7, #12]
    d3be:	4413      	add	r3, r2
    d3c0:	60fb      	str	r3, [r7, #12]
                }
                break;
    d3c2:	e00e      	b.n	d3e2 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d3c4:	68fb      	ldr	r3, [r7, #12]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d005      	beq.n	d3d6 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d3ca:	68fb      	ldr	r3, [r7, #12]
    d3cc:	1c5a      	adds	r2, r3, #1
    d3ce:	60fa      	str	r2, [r7, #12]
    d3d0:	68ba      	ldr	r2, [r7, #8]
    d3d2:	7812      	ldrb	r2, [r2, #0]
    d3d4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3d8:	3301      	adds	r3, #1
    d3da:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d3dc:	e002      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>
                break;
    d3de:	bf00      	nop
    d3e0:	e000      	b.n	d3e4 <am_util_stdio_vsprintf+0x5d8>
                break;
    d3e2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d3e4:	68bb      	ldr	r3, [r7, #8]
    d3e6:	3301      	adds	r3, #1
    d3e8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d3ea:	68bb      	ldr	r3, [r7, #8]
    d3ec:	781b      	ldrb	r3, [r3, #0]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	f47f ad17 	bne.w	ce22 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d3f4:	68fb      	ldr	r3, [r7, #12]
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d002      	beq.n	d400 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d3fa:	68fb      	ldr	r3, [r7, #12]
    d3fc:	2200      	movs	r2, #0
    d3fe:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d402:	4618      	mov	r0, r3
    d404:	3754      	adds	r7, #84	; 0x54
    d406:	46bd      	mov	sp, r7
    d408:	bd90      	pop	{r4, r7, pc}
    d40a:	bf00      	nop
    d40c:	00302e30 	.word	0x00302e30
    d410:	00232e23 	.word	0x00232e23
    d414:	003f2e3f 	.word	0x003f2e3f

0000d418 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d418:	b40f      	push	{r0, r1, r2, r3}
    d41a:	b580      	push	{r7, lr}
    d41c:	b082      	sub	sp, #8
    d41e:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d420:	f107 0314 	add.w	r3, r7, #20
    d424:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d426:	683a      	ldr	r2, [r7, #0]
    d428:	6939      	ldr	r1, [r7, #16]
    d42a:	4808      	ldr	r0, [pc, #32]	; (d44c <am_util_stdio_printf+0x34>)
    d42c:	f7ff fcee 	bl	ce0c <am_util_stdio_vsprintf>
    d430:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d432:	4b07      	ldr	r3, [pc, #28]	; (d450 <am_util_stdio_printf+0x38>)
    d434:	681b      	ldr	r3, [r3, #0]
    d436:	4805      	ldr	r0, [pc, #20]	; (d44c <am_util_stdio_printf+0x34>)
    d438:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d43a:	687b      	ldr	r3, [r7, #4]
}
    d43c:	4618      	mov	r0, r3
    d43e:	3708      	adds	r7, #8
    d440:	46bd      	mov	sp, r7
    d442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d446:	b004      	add	sp, #16
    d448:	4770      	bx	lr
    d44a:	bf00      	nop
    d44c:	10001004 	.word	0x10001004
    d450:	10001710 	.word	0x10001710

0000d454 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d454:	b580      	push	{r7, lr}
    d456:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d458:	4802      	ldr	r0, [pc, #8]	; (d464 <am_util_stdio_terminal_clear+0x10>)
    d45a:	f7ff ffdd 	bl	d418 <am_util_stdio_printf>
}
    d45e:	bf00      	nop
    d460:	bd80      	pop	{r7, pc}
    d462:	bf00      	nop
    d464:	0000e87c 	.word	0x0000e87c

0000d468 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d468:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d46a:	f000 fe2b 	bl	e0c4 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d46e:	2000      	movs	r0, #0
    d470:	f7ff f94e 	bl	c710 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d474:	4b08      	ldr	r3, [pc, #32]	; (d498 <am_bsp_low_power_init+0x30>)
    d476:	2029      	movs	r0, #41	; 0x29
    d478:	6819      	ldr	r1, [r3, #0]
    d47a:	f000 fcb7 	bl	ddec <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d47e:	f000 ffc5 	bl	e40c <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d482:	2001      	movs	r0, #1
    d484:	f001 f800 	bl	e488 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d488:	2100      	movs	r1, #0
    d48a:	2003      	movs	r0, #3
    d48c:	f000 fa4c 	bl	d928 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d494:	f001 b804 	b.w	e4a0 <am_hal_rtc_osc_disable>
    d498:	0000e89c 	.word	0x0000e89c

0000d49c <am_bsp_itm_printf_enable>:
{
    d49c:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d49e:	4b0b      	ldr	r3, [pc, #44]	; (d4cc <am_bsp_itm_printf_enable+0x30>)
{
    d4a0:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d4a2:	2201      	movs	r2, #1
    d4a4:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d4a6:	f000 fdef 	bl	e088 <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d4aa:	a806      	add	r0, sp, #24
    d4ac:	4908      	ldr	r1, [pc, #32]	; (d4d0 <am_bsp_itm_printf_enable+0x34>)
    d4ae:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d4b2:	f001 f823 	bl	e4fc <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d4b6:	4b07      	ldr	r3, [pc, #28]	; (d4d4 <am_bsp_itm_printf_enable+0x38>)
    d4b8:	2029      	movs	r0, #41	; 0x29
    d4ba:	6819      	ldr	r1, [r3, #0]
    d4bc:	f000 fc96 	bl	ddec <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d4c0:	4805      	ldr	r0, [pc, #20]	; (d4d8 <am_bsp_itm_printf_enable+0x3c>)
    d4c2:	f7ff f925 	bl	c710 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d4c6:	b007      	add	sp, #28
    d4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d4cc:	10001108 	.word	0x10001108
    d4d0:	000f4240 	.word	0x000f4240
    d4d4:	0000e894 	.word	0x0000e894
    d4d8:	0000e16d 	.word	0x0000e16d

0000d4dc <am_hal_adc_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_ADC_NUM_MODULES )
    d4dc:	b108      	cbz	r0, d4e2 <am_hal_adc_initialize+0x6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d4de:	2005      	movs	r0, #5
    d4e0:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if ( !ppHandle )
    d4e2:	b1a9      	cbz	r1, d510 <am_hal_adc_initialize+0x34>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_ADCState[ui32Module].prefix.s.bInit )
    d4e4:	4a0b      	ldr	r2, [pc, #44]	; (d514 <am_hal_adc_initialize+0x38>)
    d4e6:	78d3      	ldrb	r3, [r2, #3]
    d4e8:	f013 0001 	ands.w	r0, r3, #1
    d4ec:	d001      	beq.n	d4f2 <am_hal_adc_initialize+0x16>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    d4ee:	2007      	movs	r0, #7
    d4f0:	4770      	bx	lr
{
    d4f2:	b430      	push	{r4, r5}
#endif

    //
    // Initialize the handle.
    //
    g_ADCState[ui32Module].prefix.s.bInit = true;
    d4f4:	f043 0401 	orr.w	r4, r3, #1
    d4f8:	70d4      	strb	r4, [r2, #3]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
    d4fa:	6813      	ldr	r3, [r2, #0]
    d4fc:	4d06      	ldr	r5, [pc, #24]	; (d518 <am_hal_adc_initialize+0x3c>)
    g_ADCState[ui32Module].ui32Module = ui32Module;

    //
    // Initialize the number of slots configured.
    //
    g_ADCSlotsConfigured = 0;
    d4fe:	4c07      	ldr	r4, [pc, #28]	; (d51c <am_hal_adc_initialize+0x40>)
    g_ADCState[ui32Module].ui32Module = ui32Module;
    d500:	6050      	str	r0, [r2, #4]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
    d502:	f365 0317 	bfi	r3, r5, #0, #24
    d506:	6013      	str	r3, [r2, #0]
    g_ADCSlotsConfigured = 0;
    d508:	6020      	str	r0, [r4, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_ADCState[ui32Module];
    d50a:	600a      	str	r2, [r1, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d50c:	bc30      	pop	{r4, r5}
    d50e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d510:	2006      	movs	r0, #6
    d512:	4770      	bx	lr
    d514:	10001718 	.word	0x10001718
    d518:	00afafaf 	.word	0x00afafaf
    d51c:	10001714 	.word	0x10001714

0000d520 <am_hal_adc_configure>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d520:	b128      	cbz	r0, d52e <am_hal_adc_configure+0xe>
    d522:	6803      	ldr	r3, [r0, #0]
    d524:	4a1a      	ldr	r2, [pc, #104]	; (d590 <am_hal_adc_configure+0x70>)
    d526:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d52a:	4290      	cmp	r0, r2
    d52c:	d001      	beq.n	d532 <am_hal_adc_configure+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d52e:	2002      	movs	r0, #2
    d530:	4770      	bx	lr
{
    d532:	b5f0      	push	{r4, r5, r6, r7, lr}

#if AM_CMSIS_REGS
    //
    // Set the ADC clock source.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d534:	780b      	ldrb	r3, [r1, #0]

    //
    // Set the ADC trigger polarity.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d536:	f891 e001 	ldrb.w	lr, [r1, #1]
    ui32Config |= _VAL2FLD(ADC_CFG_DFIFORDEN, 1);

    //
    // Set the ADC clock mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d53a:	790d      	ldrb	r5, [r1, #4]

    //
    // Set the ADC low power mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d53c:	794c      	ldrb	r4, [r1, #5]

    //
    // Set the ADC repetition mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d53e:	798a      	ldrb	r2, [r1, #6]
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
    d540:	788f      	ldrb	r7, [r1, #2]
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
    d542:	78ce      	ldrb	r6, [r1, #3]

    //
    // Set the configuration in the ADC peripheral.
    //
    ADCn(ui32Module)->CFG = ui32Config;
    d544:	4813      	ldr	r0, [pc, #76]	; (d594 <am_hal_adc_configure+0x74>)
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d546:	ea4f 41ce 	mov.w	r1, lr, lsl #19
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d54a:	061b      	lsls	r3, r3, #24
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d54c:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
    d550:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
    d554:	430b      	orrs	r3, r1
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
    d556:	043f      	lsls	r7, r7, #16
    d558:	f407 21e0 	and.w	r1, r7, #458752	; 0x70000
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
    d55c:	0236      	lsls	r6, r6, #8
    d55e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d562:	430b      	orrs	r3, r1
    d564:	f406 7740 	and.w	r7, r6, #768	; 0x300
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d568:	0129      	lsls	r1, r5, #4
    ui32Config |= _VAL2FLD(ADC_CFG_DFIFORDEN, 1);
    d56a:	ea47 0c03 	orr.w	ip, r7, r3
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d56e:	f001 0510 	and.w	r5, r1, #16
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d572:	00e3      	lsls	r3, r4, #3
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d574:	0097      	lsls	r7, r2, #2
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
    d576:	ea45 040c 	orr.w	r4, r5, ip
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
    d57a:	f003 0608 	and.w	r6, r3, #8
    d57e:	ea46 0204 	orr.w	r2, r6, r4
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
    d582:	f007 0104 	and.w	r1, r7, #4
    d586:	4311      	orrs	r1, r2
    ADCn(ui32Module)->CFG = ui32Config;
    d588:	6001      	str	r1, [r0, #0]
#endif // AM_CMSIS_REGS

    //
    // Return status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d58a:	2000      	movs	r0, #0
    d58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d58e:	bf00      	nop
    d590:	01afafaf 	.word	0x01afafaf
    d594:	50010000 	.word	0x50010000

0000d598 <am_hal_adc_configure_slot>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d598:	b128      	cbz	r0, d5a6 <am_hal_adc_configure_slot+0xe>
    d59a:	6803      	ldr	r3, [r0, #0]
    d59c:	4815      	ldr	r0, [pc, #84]	; (d5f4 <am_hal_adc_configure_slot+0x5c>)
    d59e:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d5a2:	4584      	cmp	ip, r0
    d5a4:	d001      	beq.n	d5aa <am_hal_adc_configure_slot+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d5a6:	2002      	movs	r0, #2
    d5a8:	4770      	bx	lr
    }

    //
    // Check the slot number.
    //
    if ( ui32SlotNumber >= AM_HAL_ADC_MAX_SLOTS )
    d5aa:	2907      	cmp	r1, #7
    d5ac:	d901      	bls.n	d5b2 <am_hal_adc_configure_slot+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d5ae:	2005      	movs	r0, #5
    d5b0:	4770      	bx	lr
{
    d5b2:	b4f0      	push	{r4, r5, r6, r7}

#if AM_CMSIS_REGS
    //
    // Set the measurements to average
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5b4:	7813      	ldrb	r3, [r2, #0]

    //
    // Set the precision mode.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5b6:	7856      	ldrb	r6, [r2, #1]

    //
    // Set the channel.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5b8:	7895      	ldrb	r5, [r2, #2]
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);

    //
    // Enable the slot if configured.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
    d5ba:	7917      	ldrb	r7, [r2, #4]

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5bc:	480e      	ldr	r0, [pc, #56]	; (d5f8 <am_hal_adc_configure_slot+0x60>)
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5be:	78d2      	ldrb	r2, [r2, #3]
#endif // AM_CMSIS_REGS

    //
    // Update the nubmer of slots configured.
    //
    g_ADCSlotsConfigured++;
    d5c0:	4c0e      	ldr	r4, [pc, #56]	; (d5fc <am_hal_adc_configure_slot+0x64>)
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5c2:	061b      	lsls	r3, r3, #24
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5c4:	0436      	lsls	r6, r6, #16
    d5c6:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
    d5ca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
    d5ce:	4333      	orrs	r3, r6
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5d0:	022d      	lsls	r5, r5, #8
    d5d2:	433b      	orrs	r3, r7
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5d4:	4408      	add	r0, r1
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
    d5d6:	f405 6770 	and.w	r7, r5, #3840	; 0xf00
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5da:	0052      	lsls	r2, r2, #1
    d5dc:	433b      	orrs	r3, r7
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
    d5de:	0080      	lsls	r0, r0, #2
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
    d5e0:	f002 0102 	and.w	r1, r2, #2
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
    d5e4:	430b      	orrs	r3, r1
    AM_REGVAL(ui32RegOffset) = ui32Config;
    d5e6:	6003      	str	r3, [r0, #0]
    g_ADCSlotsConfigured++;
    d5e8:	6823      	ldr	r3, [r4, #0]
    d5ea:	3301      	adds	r3, #1
    d5ec:	6023      	str	r3, [r4, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d5ee:	2000      	movs	r0, #0
}
    d5f0:	bcf0      	pop	{r4, r5, r6, r7}
    d5f2:	4770      	bx	lr
    d5f4:	01afafaf 	.word	0x01afafaf
    d5f8:	14004003 	.word	0x14004003
    d5fc:	10001714 	.word	0x10001714

0000d600 <am_hal_adc_configure_dma>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d600:	b128      	cbz	r0, d60e <am_hal_adc_configure_dma+0xe>
    d602:	6803      	ldr	r3, [r0, #0]
    d604:	4a19      	ldr	r2, [pc, #100]	; (d66c <am_hal_adc_configure_dma+0x6c>)
    d606:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d60a:	4290      	cmp	r0, r2
    d60c:	d001      	beq.n	d612 <am_hal_adc_configure_dma+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d60e:	2002      	movs	r0, #2
    d610:	4770      	bx	lr
{
    d612:	b410      	push	{r4}

    //
    // Configure the DMA complete power-off.
    //
#if AM_CMSIS_REGS
    ui32Config |= _VAL2FLD(ADC_DMACFG_DPWROFF, pDMAConfig->bPwrOffOnDMAComplete);
    d614:	780b      	ldrb	r3, [r1, #0]

    //
    // Configure the data to be transferred.
    //
    if ( g_ADCSlotsConfigured > 1 )
    d616:	4c16      	ldr	r4, [pc, #88]	; (d670 <am_hal_adc_configure_dma+0x70>)
    ui32Config |= _VAL2FLD(ADC_DMACFG_DPWROFF, pDMAConfig->bPwrOffOnDMAComplete);
    d618:	049a      	lsls	r2, r3, #18
    if ( g_ADCSlotsConfigured > 1 )
    d61a:	6820      	ldr	r0, [r4, #0]
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAHONSTAT, ADC_DMACFG_DMAHONSTAT_EN);

    //
    // Configure the DMA dynamic priority handling.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMADYNPRI, pDMAConfig->bDynamicPriority);
    d61c:	784b      	ldrb	r3, [r1, #1]

    //
    // Configure the DMA static priority.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAPRI, pDMAConfig->ePriority);
    d61e:	788c      	ldrb	r4, [r1, #2]
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMADYNPRI, pDMAConfig->bDynamicPriority);
    d620:	025b      	lsls	r3, r3, #9
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAPRI, pDMAConfig->ePriority);
    d622:	0224      	lsls	r4, r4, #8
    d624:	f404 7480 	and.w	r4, r4, #256	; 0x100
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMADYNPRI, pDMAConfig->bDynamicPriority);
    d628:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ui32Config |= _VAL2FLD(ADC_DMACFG_DPWROFF, pDMAConfig->bPwrOffOnDMAComplete);
    d62c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    if ( g_ADCSlotsConfigured > 1 )
    d630:	2801      	cmp	r0, #1

    //
    // Enable the DMA (does not start until ADC is enabled and triggered).
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAEN, ADC_DMACFG_DMAEN_EN);
    d632:	ea43 0304 	orr.w	r3, r3, r4

    //
    // Set the DMA configuration.
    //
    ADCn(ui32Module)->DMACFG = ui32Config;
    d636:	480f      	ldr	r0, [pc, #60]	; (d674 <am_hal_adc_configure_dma+0x74>)
        ui32Config |= _VAL2FLD(ADC_DMACFG_DMAMSK, ADC_DMACFG_DMAMSK_EN);
    d638:	bf98      	it	ls
    d63a:	f442 3200 	orrls.w	r2, r2, #131072	; 0x20000
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAEN, ADC_DMACFG_DMAEN_EN);
    d63e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    d642:	4313      	orrs	r3, r2
    ADCn(ui32Module)->DMACFG = ui32Config;
    d644:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280

    //
    // Set the DMA transfer count.
    //
    ADCn(ui32Module)->DMATOTCOUNT_b.TOTCOUNT = pDMAConfig->ui32SampleCount;
    d648:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    d64c:	f8d0 2288 	ldr.w	r2, [r0, #648]	; 0x288
    d650:	f36c 0291 	bfi	r2, ip, #2, #16
    d654:	f8c0 2288 	str.w	r2, [r0, #648]	; 0x288

    //
    // Set the DMA target address.
    //
    ADCn(ui32Module)->DMATARGADDR = pDMAConfig->ui32TargetAddress;
    d658:	6889      	ldr	r1, [r1, #8]
    d65a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c

    //
    // Set the DMA trigger on FIFO 75% full.
    //
    ADCn(ui32Module)->DMATRIGEN = ADC_DMATRIGEN_DFIFO75_Msk;
    d65e:	2401      	movs	r4, #1
    d660:	f8c0 4240 	str.w	r4, [r0, #576]	; 0x240

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d664:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    d668:	2000      	movs	r0, #0
}
    d66a:	4770      	bx	lr
    d66c:	01afafaf 	.word	0x01afafaf
    d670:	10001714 	.word	0x10001714
    d674:	50010000 	.word	0x50010000

0000d678 <am_hal_adc_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d678:	4603      	mov	r3, r0
    d67a:	b128      	cbz	r0, d688 <am_hal_adc_enable+0x10>
    d67c:	6802      	ldr	r2, [r0, #0]
    d67e:	490b      	ldr	r1, [pc, #44]	; (d6ac <am_hal_adc_enable+0x34>)
    d680:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
    d684:	4288      	cmp	r0, r1
    d686:	d001      	beq.n	d68c <am_hal_adc_enable+0x14>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d688:	2002      	movs	r0, #2
    d68a:	4770      	bx	lr
    }

    if ( pADCState->prefix.s.bEnable )
    d68c:	78da      	ldrb	r2, [r3, #3]
    d68e:	f012 0002 	ands.w	r0, r2, #2
    d692:	d109      	bne.n	d6a8 <am_hal_adc_enable+0x30>

    //
    // Enable the ADC.
    //
#if AM_CMSIS_REGS
    ADCn(ui32Module)->CFG_b.ADCEN = 0x1;
    d694:	4906      	ldr	r1, [pc, #24]	; (d6b0 <am_hal_adc_enable+0x38>)
    d696:	680a      	ldr	r2, [r1, #0]
    d698:	f042 0201 	orr.w	r2, r2, #1
    d69c:	600a      	str	r2, [r1, #0]
#endif // AM_CMSIS_REGS

    //
    // Set flag to indicate module is enabled.
    //
    pADCState->prefix.s.bEnable = true;
    d69e:	78d9      	ldrb	r1, [r3, #3]
    d6a0:	f041 0202 	orr.w	r2, r1, #2
    d6a4:	70da      	strb	r2, [r3, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d6a6:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
    d6a8:	2000      	movs	r0, #0
}
    d6aa:	4770      	bx	lr
    d6ac:	01afafaf 	.word	0x01afafaf
    d6b0:	50010000 	.word	0x50010000

0000d6b4 <am_hal_adc_interrupt_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d6b4:	b128      	cbz	r0, d6c2 <am_hal_adc_interrupt_enable+0xe>
    d6b6:	6803      	ldr	r3, [r0, #0]
    d6b8:	4a07      	ldr	r2, [pc, #28]	; (d6d8 <am_hal_adc_interrupt_enable+0x24>)
    d6ba:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d6be:	4290      	cmp	r0, r2
    d6c0:	d001      	beq.n	d6c6 <am_hal_adc_interrupt_enable+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d6c2:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d6c4:	4770      	bx	lr
    ADCn(ui32Module)->INTEN |= ui32IntMask;
    d6c6:	4a05      	ldr	r2, [pc, #20]	; (d6dc <am_hal_adc_interrupt_enable+0x28>)
    d6c8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d6cc:	4319      	orrs	r1, r3
    d6ce:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return AM_HAL_STATUS_SUCCESS;
    d6d2:	2000      	movs	r0, #0
    d6d4:	4770      	bx	lr
    d6d6:	bf00      	nop
    d6d8:	01afafaf 	.word	0x01afafaf
    d6dc:	50010000 	.word	0x50010000

0000d6e0 <am_hal_adc_interrupt_status>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d6e0:	b128      	cbz	r0, d6ee <am_hal_adc_interrupt_status+0xe>
    d6e2:	6803      	ldr	r3, [r0, #0]
    d6e4:	480b      	ldr	r0, [pc, #44]	; (d714 <am_hal_adc_interrupt_status+0x34>)
    d6e6:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d6ea:	4584      	cmp	ip, r0
    d6ec:	d001      	beq.n	d6f2 <am_hal_adc_interrupt_status+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d6ee:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d6f0:	4770      	bx	lr
    if ( bEnabledOnly )
    d6f2:	b92a      	cbnz	r2, d700 <am_hal_adc_interrupt_status+0x20>
        *pui32Status = ADCn(ui32Module)->INTSTAT;
    d6f4:	4b08      	ldr	r3, [pc, #32]	; (d718 <am_hal_adc_interrupt_status+0x38>)
    d6f6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
    d6fa:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d6fc:	4610      	mov	r0, r2
    d6fe:	4770      	bx	lr
        uint32_t ui32RetVal = ADCn(ui32Module)->INTSTAT;
    d700:	4a05      	ldr	r2, [pc, #20]	; (d718 <am_hal_adc_interrupt_status+0x38>)
    d702:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        *pui32Status = ADCn(ui32Module)->INTEN & ui32RetVal;
    d706:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    d70a:	4003      	ands	r3, r0
    d70c:	600b      	str	r3, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d70e:	2000      	movs	r0, #0
    d710:	4770      	bx	lr
    d712:	bf00      	nop
    d714:	01afafaf 	.word	0x01afafaf
    d718:	50010000 	.word	0x50010000

0000d71c <am_hal_adc_interrupt_clear>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d71c:	b128      	cbz	r0, d72a <am_hal_adc_interrupt_clear+0xe>
    d71e:	6803      	ldr	r3, [r0, #0]
    d720:	4a05      	ldr	r2, [pc, #20]	; (d738 <am_hal_adc_interrupt_clear+0x1c>)
    d722:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d726:	4290      	cmp	r0, r2
    d728:	d001      	beq.n	d72e <am_hal_adc_interrupt_clear+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d72a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d72c:	4770      	bx	lr
    ADCn(ui32Module)->INTCLR = ui32IntMask;
    d72e:	4b03      	ldr	r3, [pc, #12]	; (d73c <am_hal_adc_interrupt_clear+0x20>)
    return AM_HAL_STATUS_SUCCESS;
    d730:	2000      	movs	r0, #0
    ADCn(ui32Module)->INTCLR = ui32IntMask;
    d732:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    return AM_HAL_STATUS_SUCCESS;
    d736:	4770      	bx	lr
    d738:	01afafaf 	.word	0x01afafaf
    d73c:	50010000 	.word	0x50010000

0000d740 <am_hal_adc_samples_read>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d740:	b148      	cbz	r0, d756 <am_hal_adc_samples_read+0x16>
{
    d742:	b470      	push	{r4, r5, r6}
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d744:	6800      	ldr	r0, [r0, #0]
    d746:	4c1f      	ldr	r4, [pc, #124]	; (d7c4 <am_hal_adc_samples_read+0x84>)
    d748:	f020 457e 	bic.w	r5, r0, #4261412864	; 0xfe000000
    d74c:	42a5      	cmp	r5, r4
    d74e:	d004      	beq.n	d75a <am_hal_adc_samples_read+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d750:	2002      	movs	r0, #2

    //
    // Return FIFO valid bits.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d752:	bc70      	pop	{r4, r5, r6}
    d754:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    d756:	2002      	movs	r0, #2
    d758:	4770      	bx	lr
    if ( NULL == pui32OutBuffer )
    d75a:	b1db      	cbz	r3, d794 <am_hal_adc_samples_read+0x54>
    *pui32InOutNumberSamples = 0;
    d75c:	2600      	movs	r6, #0
    uint32_t      ui32RequestedSamples = *pui32InOutNumberSamples;
    d75e:	6814      	ldr	r4, [r2, #0]
    *pui32InOutNumberSamples = 0;
    d760:	6016      	str	r6, [r2, #0]
    if ( NULL == pui32InSampleBuffer )
    d762:	b1c9      	cbz	r1, d798 <am_hal_adc_samples_read+0x58>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d764:	4d18      	ldr	r5, [pc, #96]	; (d7c8 <am_hal_adc_samples_read+0x88>)
    d766:	3308      	adds	r3, #8
    d768:	3904      	subs	r1, #4
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
    d76a:	6848      	ldr	r0, [r1, #4]
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d76c:	6bee      	ldr	r6, [r5, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
    d76e:	f3c0 7602 	ubfx	r6, r0, #28, #3
    d772:	f843 6c04 	str.w	r6, [r3, #-4]
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(*pui32InSampleBuffer);
    d776:	f851 0f04 	ldr.w	r0, [r1, #4]!
    d77a:	f3c0 168d 	ubfx	r6, r0, #6, #14
    d77e:	f843 6c08 	str.w	r6, [r3, #-8]
            (*pui32InOutNumberSamples)++;
    d782:	6810      	ldr	r0, [r2, #0]
    d784:	3001      	adds	r0, #1
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
    d786:	4284      	cmp	r4, r0
    d788:	f103 0308 	add.w	r3, r3, #8
            (*pui32InOutNumberSamples)++;
    d78c:	6010      	str	r0, [r2, #0]
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
    d78e:	d8ec      	bhi.n	d76a <am_hal_adc_samples_read+0x2a>
    return AM_HAL_STATUS_SUCCESS;
    d790:	2000      	movs	r0, #0
    d792:	e7de      	b.n	d752 <am_hal_adc_samples_read+0x12>
        return AM_HAL_STATUS_INVALID_ARG;
    d794:	2006      	movs	r0, #6
    d796:	e7dc      	b.n	d752 <am_hal_adc_samples_read+0x12>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d798:	4e0b      	ldr	r6, [pc, #44]	; (d7c8 <am_hal_adc_samples_read+0x88>)
    d79a:	3308      	adds	r3, #8
    d79c:	e001      	b.n	d7a2 <am_hal_adc_samples_read+0x62>
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
    d79e:	42ac      	cmp	r4, r5
    d7a0:	d9f6      	bls.n	d790 <am_hal_adc_samples_read+0x50>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
    d7a2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(ui32Sample);
    d7a4:	f3c1 7502 	ubfx	r5, r1, #28, #3
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(ui32Sample);
    d7a8:	f3c1 108d 	ubfx	r0, r1, #6, #14
    d7ac:	e903 0021 	stmdb	r3, {r0, r5}
            (*pui32InOutNumberSamples)++;
    d7b0:	6815      	ldr	r5, [r2, #0]
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
    d7b2:	f3c1 5007 	ubfx	r0, r1, #20, #8
            (*pui32InOutNumberSamples)++;
    d7b6:	3501      	adds	r5, #1
    d7b8:	3308      	adds	r3, #8
    d7ba:	6015      	str	r5, [r2, #0]
                 (*pui32InOutNumberSamples < ui32RequestedSamples));
    d7bc:	2800      	cmp	r0, #0
    d7be:	d1ee      	bne.n	d79e <am_hal_adc_samples_read+0x5e>
    d7c0:	e7e6      	b.n	d790 <am_hal_adc_samples_read+0x50>
    d7c2:	bf00      	nop
    d7c4:	01afafaf 	.word	0x01afafaf
    d7c8:	50010000 	.word	0x50010000

0000d7cc <am_hal_adc_sw_trigger>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d7cc:	b128      	cbz	r0, d7da <am_hal_adc_sw_trigger+0xe>
    d7ce:	6803      	ldr	r3, [r0, #0]
    d7d0:	4a05      	ldr	r2, [pc, #20]	; (d7e8 <am_hal_adc_sw_trigger+0x1c>)
    d7d2:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    d7d6:	4290      	cmp	r0, r2
    d7d8:	d001      	beq.n	d7de <am_hal_adc_sw_trigger+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d7da:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d7dc:	4770      	bx	lr
    ADCn(ui32Module)->SWT = 0x37;
    d7de:	4903      	ldr	r1, [pc, #12]	; (d7ec <am_hal_adc_sw_trigger+0x20>)
    d7e0:	2337      	movs	r3, #55	; 0x37
    d7e2:	608b      	str	r3, [r1, #8]
    return AM_HAL_STATUS_SUCCESS;
    d7e4:	2000      	movs	r0, #0
    d7e6:	4770      	bx	lr
    d7e8:	01afafaf 	.word	0x01afafaf
    d7ec:	50010000 	.word	0x50010000

0000d7f0 <am_hal_adc_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d7f0:	b150      	cbz	r0, d808 <am_hal_adc_power_control+0x18>
{
    d7f2:	b510      	push	{r4, lr}
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d7f4:	6803      	ldr	r3, [r0, #0]
    d7f6:	4c30      	ldr	r4, [pc, #192]	; (d8b8 <am_hal_adc_power_control+0xc8>)
    d7f8:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    d7fc:	45a4      	cmp	ip, r4
{
    d7fe:	b082      	sub	sp, #8
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
    d800:	d004      	beq.n	d80c <am_hal_adc_power_control+0x1c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    d802:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d804:	b002      	add	sp, #8
    d806:	bd10      	pop	{r4, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    d808:	2002      	movs	r0, #2
    d80a:	4770      	bx	lr
    d80c:	4604      	mov	r4, r0
    switch (ePowerState)
    d80e:	b329      	cbz	r1, d85c <am_hal_adc_power_control+0x6c>
    d810:	2902      	cmp	r1, #2
    d812:	d821      	bhi.n	d858 <am_hal_adc_power_control+0x68>
            if ( bRetainState )
    d814:	b1da      	cbz	r2, d84e <am_hal_adc_power_control+0x5e>
                pADCState->registerState.regSL0CFG  = ADCn(ui32Module)->SL0CFG;
    d816:	4829      	ldr	r0, [pc, #164]	; (d8bc <am_hal_adc_power_control+0xcc>)
    d818:	68c2      	ldr	r2, [r0, #12]
    d81a:	6162      	str	r2, [r4, #20]
                pADCState->registerState.regSL1CFG  = ADCn(ui32Module)->SL1CFG;
    d81c:	6901      	ldr	r1, [r0, #16]
    d81e:	61a1      	str	r1, [r4, #24]
                pADCState->registerState.regSL2CFG  = ADCn(ui32Module)->SL2CFG;
    d820:	6943      	ldr	r3, [r0, #20]
    d822:	61e3      	str	r3, [r4, #28]
                pADCState->registerState.regSL3CFG  = ADCn(ui32Module)->SL3CFG;
    d824:	6982      	ldr	r2, [r0, #24]
    d826:	6222      	str	r2, [r4, #32]
                pADCState->registerState.regSL4CFG  = ADCn(ui32Module)->SL4CFG;
    d828:	69c1      	ldr	r1, [r0, #28]
    d82a:	6261      	str	r1, [r4, #36]	; 0x24
                pADCState->registerState.regSL5CFG  = ADCn(ui32Module)->SL5CFG;
    d82c:	6a03      	ldr	r3, [r0, #32]
    d82e:	62a3      	str	r3, [r4, #40]	; 0x28
                pADCState->registerState.regSL6CFG  = ADCn(ui32Module)->SL6CFG;
    d830:	6a42      	ldr	r2, [r0, #36]	; 0x24
    d832:	62e2      	str	r2, [r4, #44]	; 0x2c
                pADCState->registerState.regSL7CFG  = ADCn(ui32Module)->SL7CFG;
    d834:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d836:	6321      	str	r1, [r4, #48]	; 0x30
                pADCState->registerState.regWULIM   = ADCn(ui32Module)->WULIM;
    d838:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    d83a:	6363      	str	r3, [r4, #52]	; 0x34
                pADCState->registerState.regWLLIM   = ADCn(ui32Module)->WLLIM;
    d83c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    d83e:	63a2      	str	r2, [r4, #56]	; 0x38
                pADCState->registerState.regINTEN   = ADCn(ui32Module)->INTEN;
    d840:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d844:	63e1      	str	r1, [r4, #60]	; 0x3c
                pADCState->registerState.regCFG     = ADCn(ui32Module)->CFG;
    d846:	6800      	ldr	r0, [r0, #0]
    d848:	6120      	str	r0, [r4, #16]
                pADCState->registerState.bValid     = true;
    d84a:	2301      	movs	r3, #1
    d84c:	7323      	strb	r3, [r4, #12]
            am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d84e:	200a      	movs	r0, #10
    d850:	f000 fd68 	bl	e324 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    d854:	2000      	movs	r0, #0
            break;
    d856:	e7d5      	b.n	d804 <am_hal_adc_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    d858:	2006      	movs	r0, #6
    d85a:	e7d3      	b.n	d804 <am_hal_adc_power_control+0x14>
            if ( bRetainState  &&  !pADCState->registerState.bValid )
    d85c:	b11a      	cbz	r2, d866 <am_hal_adc_power_control+0x76>
    d85e:	7b02      	ldrb	r2, [r0, #12]
    d860:	b93a      	cbnz	r2, d872 <am_hal_adc_power_control+0x82>
                return AM_HAL_STATUS_INVALID_OPERATION;
    d862:	2007      	movs	r0, #7
    d864:	e7ce      	b.n	d804 <am_hal_adc_power_control+0x14>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d866:	200a      	movs	r0, #10
    d868:	9201      	str	r2, [sp, #4]
    d86a:	f000 fd31 	bl	e2d0 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    d86e:	9801      	ldr	r0, [sp, #4]
    d870:	e7c8      	b.n	d804 <am_hal_adc_power_control+0x14>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
    d872:	200a      	movs	r0, #10
    d874:	9101      	str	r1, [sp, #4]
    d876:	f000 fd2b 	bl	e2d0 <am_hal_pwrctrl_periph_enable>
                ADCn(ui32Module)->SL0CFG = pADCState->registerState.regSL0CFG;
    d87a:	4910      	ldr	r1, [pc, #64]	; (d8bc <am_hal_adc_power_control+0xcc>)
    d87c:	6963      	ldr	r3, [r4, #20]
    d87e:	60cb      	str	r3, [r1, #12]
                ADCn(ui32Module)->SL1CFG = pADCState->registerState.regSL1CFG;
    d880:	69a0      	ldr	r0, [r4, #24]
    d882:	6108      	str	r0, [r1, #16]
                ADCn(ui32Module)->SL2CFG = pADCState->registerState.regSL2CFG;
    d884:	69e2      	ldr	r2, [r4, #28]
    d886:	614a      	str	r2, [r1, #20]
                ADCn(ui32Module)->SL3CFG = pADCState->registerState.regSL3CFG;
    d888:	6a23      	ldr	r3, [r4, #32]
    d88a:	618b      	str	r3, [r1, #24]
                ADCn(ui32Module)->SL4CFG = pADCState->registerState.regSL4CFG;
    d88c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d88e:	61c8      	str	r0, [r1, #28]
                ADCn(ui32Module)->SL5CFG = pADCState->registerState.regSL5CFG;
    d890:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d892:	620a      	str	r2, [r1, #32]
                ADCn(ui32Module)->SL6CFG = pADCState->registerState.regSL6CFG;
    d894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d896:	624b      	str	r3, [r1, #36]	; 0x24
                ADCn(ui32Module)->SL7CFG = pADCState->registerState.regSL7CFG;
    d898:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d89a:	6288      	str	r0, [r1, #40]	; 0x28
                ADCn(ui32Module)->WULIM  = pADCState->registerState.regWULIM;
    d89c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d89e:	62ca      	str	r2, [r1, #44]	; 0x2c
                ADCn(ui32Module)->WLLIM  = pADCState->registerState.regWLLIM;
    d8a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d8a2:	630b      	str	r3, [r1, #48]	; 0x30
                ADCn(ui32Module)->INTEN  = pADCState->registerState.regINTEN;
    d8a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d8a6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
                ADCn(ui32Module)->CFG    = pADCState->registerState.regCFG;
    d8aa:	6922      	ldr	r2, [r4, #16]
    d8ac:	600a      	str	r2, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    d8ae:	9901      	ldr	r1, [sp, #4]
                pADCState->registerState.bValid     = false;
    d8b0:	7321      	strb	r1, [r4, #12]
    return AM_HAL_STATUS_SUCCESS;
    d8b2:	4608      	mov	r0, r1
    d8b4:	e7a6      	b.n	d804 <am_hal_adc_power_control+0x14>
    d8b6:	bf00      	nop
    d8b8:	01afafaf 	.word	0x01afafaf
    d8bc:	50010000 	.word	0x50010000

0000d8c0 <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d8c0:	b530      	push	{r4, r5, lr}
    d8c2:	b083      	sub	sp, #12
    d8c4:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d8c6:	f000 fbd7 	bl	e078 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d8ca:	4c11      	ldr	r4, [pc, #68]	; (d910 <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d8cc:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d8ce:	6823      	ldr	r3, [r4, #0]
    d8d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d8d4:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d8d6:	9801      	ldr	r0, [sp, #4]
    d8d8:	f000 fbd2 	bl	e080 <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d8dc:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d8de:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d8e0:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d8e2:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d8e4:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d8e6:	005d      	lsls	r5, r3, #1
    d8e8:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d8ec:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d8ee:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d8f0:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d8f4:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d8f6:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d8fa:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d8fe:	0212      	lsls	r2, r2, #8
    d900:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d904:	432b      	orrs	r3, r5
    d906:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d908:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d90a:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d90c:	b003      	add	sp, #12
    d90e:	bd30      	pop	{r4, r5, pc}
    d910:	40018000 	.word	0x40018000

0000d914 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d914:	4a03      	ldr	r2, [pc, #12]	; (d924 <am_hal_cachectrl_enable+0x10>)
    d916:	6813      	ldr	r3, [r2, #0]
    d918:	f043 0001 	orr.w	r0, r3, #1
    d91c:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d91e:	2000      	movs	r0, #0
    d920:	4770      	bx	lr
    d922:	bf00      	nop
    d924:	40018000 	.word	0x40018000

0000d928 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    d928:	2809      	cmp	r0, #9
    d92a:	d852      	bhi.n	d9d2 <am_hal_clkgen_control+0xaa>
    d92c:	e8df f000 	tbb	[pc, r0]
    d930:	2b21190d 	.word	0x2b21190d
    d934:	51513d33 	.word	0x51513d33
    d938:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d93a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d93e:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    d940:	6a1a      	ldr	r2, [r3, #32]
    d942:	f36f 0200 	bfc	r2, #0, #1
    d946:	621a      	str	r2, [r3, #32]
            break;
    d948:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d94a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d94e:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d950:	2047      	movs	r0, #71	; 0x47
    d952:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    d956:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    d95a:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    d95c:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    d960:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d962:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d966:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d968:	68ca      	ldr	r2, [r1, #12]
    d96a:	f022 0301 	bic.w	r3, r2, #1
    d96e:	60cb      	str	r3, [r1, #12]
            break;
    d970:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d972:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d976:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d978:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d97c:	f022 0302 	bic.w	r3, r2, #2
    d980:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    d984:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d986:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d98a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    d98c:	68d3      	ldr	r3, [r2, #12]
    d98e:	f043 0101 	orr.w	r1, r3, #1
    d992:	60d1      	str	r1, [r2, #12]
            break;
    d994:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d996:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d99a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    d99c:	f8dc 300c 	ldr.w	r3, [ip, #12]
    d9a0:	f043 0102 	orr.w	r1, r3, #2
    d9a4:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    d9a8:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d9aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    d9ae:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d9b0:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d9b2:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    d9b4:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    d9b6:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    d9b8:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    d9ba:	615a      	str	r2, [r3, #20]
            break;
    d9bc:	4770      	bx	lr
            if ( pArgs == 0 )
    d9be:	b151      	cbz	r1, d9d6 <am_hal_clkgen_control+0xae>
    d9c0:	6808      	ldr	r0, [r1, #0]
    d9c2:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    d9c6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    d9ca:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    d9cc:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    d9d0:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    d9d2:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    d9d4:	4770      	bx	lr
    d9d6:	4901      	ldr	r1, [pc, #4]	; (d9dc <am_hal_clkgen_control+0xb4>)
    d9d8:	e7f5      	b.n	d9c6 <am_hal_clkgen_control+0x9e>
    d9da:	bf00      	nop
    d9dc:	0025b801 	.word	0x0025b801

0000d9e0 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    d9e0:	b1a8      	cbz	r0, da0e <am_hal_clkgen_status_get+0x2e>
{
    d9e2:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    d9e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d9e8:	490a      	ldr	r1, [pc, #40]	; (da14 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    d9ea:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    d9ec:	4b0a      	ldr	r3, [pc, #40]	; (da18 <am_hal_clkgen_status_get+0x38>)
    d9ee:	f014 0f01 	tst.w	r4, #1
    d9f2:	bf08      	it	eq
    d9f4:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    d9f6:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    d9f8:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    d9fa:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    d9fe:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    da02:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    da04:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    da06:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    da0a:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    da0c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    da0e:	2006      	movs	r0, #6
    da10:	4770      	bx	lr
    da12:	bf00      	nop
    da14:	02dc6c00 	.word	0x02dc6c00
    da18:	016e3600 	.word	0x016e3600

0000da1c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    da1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da1e:	b083      	sub	sp, #12
    da20:	460d      	mov	r5, r1
    da22:	4614      	mov	r4, r2

    //
    // Find the correct register to write based on the timer number.
    //
#if AM_CMSIS_REGS
    pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da24:	0147      	lsls	r7, r0, #5
#endif // AM_CMSIS_REGS

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    da26:	f000 fb27 	bl	e078 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da2a:	4e0b      	ldr	r6, [pc, #44]	; (da58 <am_hal_ctimer_config_single+0x3c>)
    AM_CRITICAL_BEGIN
    da2c:	9001      	str	r0, [sp, #4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    da2e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    da32:	59ba      	ldr	r2, [r7, r6]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    da34:	d00c      	beq.n	da50 <am_hal_ctimer_config_single+0x34>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    da36:	ea22 0005 	bic.w	r0, r2, r5
    da3a:	4320      	orrs	r0, r4

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    da3c:	3501      	adds	r5, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    da3e:	bf08      	it	eq
    da40:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    da44:	51b8      	str	r0, [r7, r6]


    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    da46:	9801      	ldr	r0, [sp, #4]
    da48:	f000 fb1a 	bl	e080 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config_single()
    da4c:	b003      	add	sp, #12
    da4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    da50:	b291      	uxth	r1, r2
    da52:	ea41 4004 	orr.w	r0, r1, r4, lsl #16
    da56:	e7f5      	b.n	da44 <am_hal_ctimer_config_single+0x28>
    da58:	4000800c 	.word	0x4000800c

0000da5c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    da5c:	b570      	push	{r4, r5, r6, lr}
    da5e:	b082      	sub	sp, #8
    da60:	460c      	mov	r4, r1
    //
    // Find the correct control register.
    //
#if AM_CMSIS_REGS
    volatile uint32_t *pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da62:	0146      	lsls	r6, r0, #5
#endif // AM_CMSIS_REGS

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    da64:	f000 fb08 	bl	e078 <am_hal_interrupt_master_disable>
    volatile uint32_t *pui32ConfigReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da68:	4d07      	ldr	r5, [pc, #28]	; (da88 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN
    da6a:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    da6c:	5971      	ldr	r1, [r6, r5]

#if AM_CMSIS_REGS
    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    da6e:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    da72:	ea21 0003 	bic.w	r0, r1, r3
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    da76:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    da7a:	4302      	orrs	r2, r0
#endif // AM_CMSIS_REGS

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    da7c:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    da7e:	9801      	ldr	r0, [sp, #4]
    da80:	f000 fafe 	bl	e080 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    da84:	b002      	add	sp, #8
    da86:	bd70      	pop	{r4, r5, r6, pc}
    da88:	4000800c 	.word	0x4000800c

0000da8c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    da8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da90:	b082      	sub	sp, #8
    da92:	4688      	mov	r8, r1
    da94:	461f      	mov	r7, r3
#if AM_CMSIS_REGS
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    da96:	ea4f 1940 	mov.w	r9, r0, lsl #5
{
    da9a:	4614      	mov	r4, r2
#endif // AM_CMSIS_REGS

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    da9c:	f000 faec 	bl	e078 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(&CTIMERn(0)->CTRL0 +
    daa0:	f8df a098 	ldr.w	sl, [pc, #152]	; db3c <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN
    daa4:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    daa6:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
    pui32CompareRegA = (uint32_t *)(&CTIMERn(0)->CMPRA0 +
    daaa:	4d21      	ldr	r5, [pc, #132]	; (db30 <am_hal_ctimer_period_set+0xa4>)
    pui32CompareRegB = (uint32_t *)(&CTIMERn(0)->CMPRB0 +
    daac:	4e21      	ldr	r6, [pc, #132]	; (db34 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    daae:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    dab2:	d01b      	beq.n	daec <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    dab4:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    dab8:	2880      	cmp	r0, #128	; 0x80
    daba:	d01c      	beq.n	daf6 <am_hal_ctimer_period_set+0x6a>
    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
#if AM_CMSIS_REGS
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    dabc:	f64f 77ff 	movw	r7, #65535	; 0xffff
    dac0:	2300      	movs	r3, #0
    dac2:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    dac4:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    dac6:	d01d      	beq.n	db04 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    dac8:	491b      	ldr	r1, [pc, #108]	; (db38 <am_hal_ctimer_period_set+0xac>)
    daca:	4588      	cmp	r8, r1
    dacc:	d025      	beq.n	db1a <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    dace:	400a      	ands	r2, r1
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    dad0:	b2a0      	uxth	r0, r4
    dad2:	4303      	orrs	r3, r0
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    dad4:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    dad8:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    dadc:	f849 4006 	str.w	r4, [r9, r6]
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    dae0:	9801      	ldr	r0, [sp, #4]
    dae2:	f000 facd 	bl	e080 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    dae6:	b002      	add	sp, #8
    dae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    daec:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    daee:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    daf2:	2880      	cmp	r0, #128	; 0x80
    daf4:	d110      	bne.n	db18 <am_hal_ctimer_period_set+0x8c>
    daf6:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    daf8:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    dafa:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    dafc:	f64f 77ff 	movw	r7, #65535	; 0xffff
    db00:	45b8      	cmp	r8, r7
    db02:	d1e1      	bne.n	dac8 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    db04:	b2a6      	uxth	r6, r4
    db06:	4333      	orrs	r3, r6
    db08:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END
    db0c:	9801      	ldr	r0, [sp, #4]
    db0e:	f000 fab7 	bl	e080 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    db12:	b002      	add	sp, #8
    db14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    db18:	2300      	movs	r3, #0
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    db1a:	b2a5      	uxth	r5, r4
    db1c:	432b      	orrs	r3, r5
    db1e:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END
    db22:	9801      	ldr	r0, [sp, #4]
    db24:	f000 faac 	bl	e080 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    db28:	b002      	add	sp, #8
    db2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db2e:	bf00      	nop
    db30:	40008004 	.word	0x40008004
    db34:	40008008 	.word	0x40008008
    db38:	ffff0000 	.word	0xffff0000
    db3c:	4000800c 	.word	0x4000800c

0000db40 <am_hal_ctimer_adc_trigger_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_adc_trigger_enable(void)
{
    db40:	b500      	push	{lr}
    db42:	b083      	sub	sp, #12
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    db44:	f000 fa98 	bl	e078 <am_hal_interrupt_master_disable>

    //
    // Enable the ADC trigger.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->CTRL3 |= CTIMER_CTRL3_ADCEN_Msk;
    db48:	4a05      	ldr	r2, [pc, #20]	; (db60 <am_hal_ctimer_adc_trigger_enable+0x20>)
    AM_CRITICAL_BEGIN
    db4a:	9001      	str	r0, [sp, #4]
    CTIMERn(0)->CTRL3 |= CTIMER_CTRL3_ADCEN_Msk;
    db4c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    db4e:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
    db52:	66d0      	str	r0, [r2, #108]	; 0x6c
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    db54:	9801      	ldr	r0, [sp, #4]
    db56:	f000 fa93 	bl	e080 <am_hal_interrupt_master_set>

} // am_hal_ctimer_adc_trigger_enable()
    db5a:	b003      	add	sp, #12
    db5c:	f85d fb04 	ldr.w	pc, [sp], #4
    db60:	40008000 	.word	0x40008000

0000db64 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    db64:	b510      	push	{r4, lr}
    db66:	b082      	sub	sp, #8
    db68:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    db6a:	f000 fa85 	bl	e078 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
#if AM_CMSIS_REGS
    CTIMERn(0)->INTEN |= ui32Interrupt;
    db6e:	4b06      	ldr	r3, [pc, #24]	; (db88 <am_hal_ctimer_int_enable+0x24>)
    AM_CRITICAL_BEGIN
    db70:	9001      	str	r0, [sp, #4]
    CTIMERn(0)->INTEN |= ui32Interrupt;
    db72:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    db76:	4320      	orrs	r0, r4
    db78:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
#endif // AM_CMSIS_REGS

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    db7c:	9801      	ldr	r0, [sp, #4]
    db7e:	f000 fa7f 	bl	e080 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    db82:	b002      	add	sp, #8
    db84:	bd10      	pop	{r4, pc}
    db86:	bf00      	nop
    db88:	40008000 	.word	0x40008000

0000db8c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db8c:	4b00      	ldr	r3, [pc, #0]	; (db90 <am_hal_flash_delay+0x4>)
    db8e:	4718      	bx	r3
    db90:	0800009d 	.word	0x0800009d

0000db94 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    db94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db98:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db9c:	f8df 8248 	ldr.w	r8, [pc, #584]	; dde8 <am_hal_flash_delay_status_check+0x254>
{
    dba0:	4607      	mov	r7, r0
    dba2:	460c      	mov	r4, r1
    dba4:	4615      	mov	r5, r2
    dba6:	461e      	mov	r6, r3
    dba8:	f1be 0f00 	cmp.w	lr, #0
    dbac:	f000 808e 	beq.w	dccc <am_hal_flash_delay_status_check+0x138>
    dbb0:	f010 0907 	ands.w	r9, r0, #7
    dbb4:	d044      	beq.n	dc40 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbb6:	680b      	ldr	r3, [r1, #0]
    dbb8:	4013      	ands	r3, r2
    dbba:	429e      	cmp	r6, r3
    dbbc:	f000 8083 	beq.w	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbc0:	2001      	movs	r0, #1
    dbc2:	47c0      	blx	r8
    dbc4:	f1b9 0f01 	cmp.w	r9, #1
    dbc8:	f107 37ff 	add.w	r7, r7, #4294967295
    dbcc:	d038      	beq.n	dc40 <am_hal_flash_delay_status_check+0xac>
    dbce:	f1b9 0f02 	cmp.w	r9, #2
    dbd2:	d02e      	beq.n	dc32 <am_hal_flash_delay_status_check+0x9e>
    dbd4:	f1b9 0f03 	cmp.w	r9, #3
    dbd8:	d024      	beq.n	dc24 <am_hal_flash_delay_status_check+0x90>
    dbda:	f1b9 0f04 	cmp.w	r9, #4
    dbde:	d01a      	beq.n	dc16 <am_hal_flash_delay_status_check+0x82>
    dbe0:	f1b9 0f05 	cmp.w	r9, #5
    dbe4:	d010      	beq.n	dc08 <am_hal_flash_delay_status_check+0x74>
    dbe6:	f1b9 0f06 	cmp.w	r9, #6
    dbea:	d006      	beq.n	dbfa <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbec:	6820      	ldr	r0, [r4, #0]
    dbee:	4028      	ands	r0, r5
    dbf0:	4286      	cmp	r6, r0
    dbf2:	d068      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbf4:	2001      	movs	r0, #1
    dbf6:	47c0      	blx	r8
    dbf8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbfa:	6821      	ldr	r1, [r4, #0]
    dbfc:	4029      	ands	r1, r5
    dbfe:	428e      	cmp	r6, r1
    dc00:	d061      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc02:	2001      	movs	r0, #1
    dc04:	47c0      	blx	r8
    dc06:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc08:	6822      	ldr	r2, [r4, #0]
    dc0a:	402a      	ands	r2, r5
    dc0c:	4296      	cmp	r6, r2
    dc0e:	d05a      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc10:	2001      	movs	r0, #1
    dc12:	47c0      	blx	r8
    dc14:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc16:	6823      	ldr	r3, [r4, #0]
    dc18:	402b      	ands	r3, r5
    dc1a:	429e      	cmp	r6, r3
    dc1c:	d053      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1e:	2001      	movs	r0, #1
    dc20:	47c0      	blx	r8
    dc22:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc24:	6820      	ldr	r0, [r4, #0]
    dc26:	4028      	ands	r0, r5
    dc28:	4286      	cmp	r6, r0
    dc2a:	d04c      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc2c:	2001      	movs	r0, #1
    dc2e:	47c0      	blx	r8
    dc30:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc32:	6821      	ldr	r1, [r4, #0]
    dc34:	4029      	ands	r1, r5
    dc36:	428e      	cmp	r6, r1
    dc38:	d045      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc3a:	2001      	movs	r0, #1
    dc3c:	3f01      	subs	r7, #1
    dc3e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc40:	6822      	ldr	r2, [r4, #0]
    dc42:	402a      	ands	r2, r5
    dc44:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc46:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc4a:	d03c      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    dc4c:	2f00      	cmp	r7, #0
    dc4e:	f000 80c8 	beq.w	dde2 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc52:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc54:	6823      	ldr	r3, [r4, #0]
    dc56:	402b      	ands	r3, r5
    dc58:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc5a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc5e:	d032      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc60:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc62:	6821      	ldr	r1, [r4, #0]
    dc64:	4029      	ands	r1, r5
    dc66:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc68:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc6c:	d02b      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc6e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc70:	6822      	ldr	r2, [r4, #0]
    dc72:	402a      	ands	r2, r5
    dc74:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc76:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc7a:	d024      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc7c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc7e:	6823      	ldr	r3, [r4, #0]
    dc80:	402b      	ands	r3, r5
    dc82:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc84:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc88:	d01d      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc8a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc8c:	6821      	ldr	r1, [r4, #0]
    dc8e:	4029      	ands	r1, r5
    dc90:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc92:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc96:	d016      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc98:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc9a:	6822      	ldr	r2, [r4, #0]
    dc9c:	402a      	ands	r2, r5
    dc9e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dca0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dca4:	d00f      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dca6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dca8:	6820      	ldr	r0, [r4, #0]
    dcaa:	4028      	ands	r0, r5
    dcac:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcae:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcb2:	d008      	beq.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcb4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcb6:	6822      	ldr	r2, [r4, #0]
    dcb8:	402a      	ands	r2, r5
    dcba:	4296      	cmp	r6, r2
    dcbc:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcc0:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dcc4:	d1c2      	bne.n	dc4c <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dcc6:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dcc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dccc:	f010 0907 	ands.w	r9, r0, #7
    dcd0:	d043      	beq.n	dd5a <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcd2:	680b      	ldr	r3, [r1, #0]
    dcd4:	4013      	ands	r3, r2
    dcd6:	429e      	cmp	r6, r3
    dcd8:	d1f5      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcda:	2001      	movs	r0, #1
    dcdc:	47c0      	blx	r8
    dcde:	f1b9 0f01 	cmp.w	r9, #1
    dce2:	f107 37ff 	add.w	r7, r7, #4294967295
    dce6:	d038      	beq.n	dd5a <am_hal_flash_delay_status_check+0x1c6>
    dce8:	f1b9 0f02 	cmp.w	r9, #2
    dcec:	d02e      	beq.n	dd4c <am_hal_flash_delay_status_check+0x1b8>
    dcee:	f1b9 0f03 	cmp.w	r9, #3
    dcf2:	d024      	beq.n	dd3e <am_hal_flash_delay_status_check+0x1aa>
    dcf4:	f1b9 0f04 	cmp.w	r9, #4
    dcf8:	d01a      	beq.n	dd30 <am_hal_flash_delay_status_check+0x19c>
    dcfa:	f1b9 0f05 	cmp.w	r9, #5
    dcfe:	d010      	beq.n	dd22 <am_hal_flash_delay_status_check+0x18e>
    dd00:	f1b9 0f06 	cmp.w	r9, #6
    dd04:	d006      	beq.n	dd14 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd06:	6821      	ldr	r1, [r4, #0]
    dd08:	4029      	ands	r1, r5
    dd0a:	428e      	cmp	r6, r1
    dd0c:	d1db      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd0e:	2001      	movs	r0, #1
    dd10:	47c0      	blx	r8
    dd12:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd14:	6822      	ldr	r2, [r4, #0]
    dd16:	402a      	ands	r2, r5
    dd18:	4296      	cmp	r6, r2
    dd1a:	d1d4      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd1c:	2001      	movs	r0, #1
    dd1e:	47c0      	blx	r8
    dd20:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd22:	6820      	ldr	r0, [r4, #0]
    dd24:	4028      	ands	r0, r5
    dd26:	4286      	cmp	r6, r0
    dd28:	d1cd      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd2a:	2001      	movs	r0, #1
    dd2c:	47c0      	blx	r8
    dd2e:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd30:	6823      	ldr	r3, [r4, #0]
    dd32:	402b      	ands	r3, r5
    dd34:	429e      	cmp	r6, r3
    dd36:	d1c6      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd38:	2001      	movs	r0, #1
    dd3a:	47c0      	blx	r8
    dd3c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd3e:	6821      	ldr	r1, [r4, #0]
    dd40:	4029      	ands	r1, r5
    dd42:	428e      	cmp	r6, r1
    dd44:	d1bf      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd46:	2001      	movs	r0, #1
    dd48:	47c0      	blx	r8
    dd4a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd4c:	6822      	ldr	r2, [r4, #0]
    dd4e:	402a      	ands	r2, r5
    dd50:	4296      	cmp	r6, r2
    dd52:	d1b8      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd54:	2001      	movs	r0, #1
    dd56:	3f01      	subs	r7, #1
    dd58:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd5a:	6823      	ldr	r3, [r4, #0]
    dd5c:	402b      	ands	r3, r5
    dd5e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd60:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd64:	d1af      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    dd66:	2f00      	cmp	r7, #0
    dd68:	d03b      	beq.n	dde2 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd6a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd6c:	6821      	ldr	r1, [r4, #0]
    dd6e:	4029      	ands	r1, r5
    dd70:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd72:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd76:	d1a6      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd78:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd7a:	6822      	ldr	r2, [r4, #0]
    dd7c:	402a      	ands	r2, r5
    dd7e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd80:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd84:	d19f      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd86:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd88:	6823      	ldr	r3, [r4, #0]
    dd8a:	402b      	ands	r3, r5
    dd8c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd8e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd92:	d198      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd94:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd96:	6821      	ldr	r1, [r4, #0]
    dd98:	4029      	ands	r1, r5
    dd9a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd9c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dda0:	d191      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dda2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dda4:	6822      	ldr	r2, [r4, #0]
    dda6:	402a      	ands	r2, r5
    dda8:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddaa:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddae:	d18a      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddb0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddb2:	6823      	ldr	r3, [r4, #0]
    ddb4:	402b      	ands	r3, r5
    ddb6:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddb8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddbc:	d183      	bne.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddbe:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddc0:	6820      	ldr	r0, [r4, #0]
    ddc2:	4028      	ands	r0, r5
    ddc4:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddc6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddca:	f47f af7c 	bne.w	dcc6 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddce:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddd0:	6823      	ldr	r3, [r4, #0]
    ddd2:	402b      	ands	r3, r5
    ddd4:	429e      	cmp	r6, r3
    ddd6:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ddda:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ddde:	d0c2      	beq.n	dd66 <am_hal_flash_delay_status_check+0x1d2>
    dde0:	e771      	b.n	dcc6 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    dde2:	2004      	movs	r0, #4
    dde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dde8:	0800009d 	.word	0x0800009d

0000ddec <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    ddec:	2831      	cmp	r0, #49	; 0x31
    ddee:	d901      	bls.n	ddf4 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    ddf0:	2006      	movs	r0, #6
    ddf2:	4770      	bx	lr
{
    ddf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    ddf8:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ddfc:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    de00:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    de02:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    de06:	d014      	beq.n	de32 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de08:	f3c1 1642 	ubfx	r6, r1, #5, #3
    de0c:	1db2      	adds	r2, r6, #6
    de0e:	f002 0707 	and.w	r7, r2, #7
    de12:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    de14:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    de18:	f200 80ab 	bhi.w	df72 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    de1c:	4a85      	ldr	r2, [pc, #532]	; (e034 <am_hal_gpio_pinconfig+0x248>)
    de1e:	5c17      	ldrb	r7, [r2, r0]
    de20:	07ff      	lsls	r7, r7, #31
    de22:	d403      	bmi.n	de2c <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    de24:	4884      	ldr	r0, [pc, #528]	; (e038 <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    de26:	b007      	add	sp, #28
    de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    de2c:	1eb4      	subs	r4, r6, #2
    de2e:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    de32:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    de36:	2e00      	cmp	r6, #0
    de38:	f040 8095 	bne.w	df66 <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de3c:	4a7f      	ldr	r2, [pc, #508]	; (e03c <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de3e:	4f80      	ldr	r7, [pc, #512]	; (e040 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de40:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de42:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de46:	411e      	asrs	r6, r3
    de48:	f016 0f01 	tst.w	r6, #1
    de4c:	bf0c      	ite	eq
    de4e:	2600      	moveq	r6, #0
    de50:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de52:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de54:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de58:	f000 8097 	beq.w	df8a <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de5c:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de60:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de62:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de66:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    de6a:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    de6c:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de70:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de74:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de78:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de7c:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de7e:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de82:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de86:	f000 808d 	beq.w	dfa4 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    de8a:	4a6e      	ldr	r2, [pc, #440]	; (e044 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de8c:	6816      	ldr	r6, [r2, #0]
    de8e:	1b8c      	subs	r4, r1, r6
    de90:	fab4 f384 	clz	r3, r4
    de94:	095f      	lsrs	r7, r3, #5
    de96:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    de98:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    de9c:	bf04      	itt	eq
    de9e:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    dea2:	f367 0800 	bfieq	r8, r7, #0, #1
    dea6:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    dea8:	f3c1 2101 	ubfx	r1, r1, #8, #2
    deac:	2902      	cmp	r1, #2
    deae:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    deb2:	d07a      	beq.n	dfaa <am_hal_gpio_pinconfig+0x1be>
    deb4:	d87f      	bhi.n	dfb6 <am_hal_gpio_pinconfig+0x1ca>
    deb6:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    deb8:	bf08      	it	eq
    deba:	f045 0504 	orreq.w	r5, r5, #4
    debe:	f004 0a18 	and.w	sl, r4, #24
            break;
    dec2:	2200      	movs	r2, #0
    dec4:	4604      	mov	r4, r0
    dec6:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    dec8:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    decc:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    ded0:	485d      	ldr	r0, [pc, #372]	; (e048 <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    ded2:	495e      	ldr	r1, [pc, #376]	; (e04c <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    ded4:	4f5e      	ldr	r7, [pc, #376]	; (e050 <am_hal_gpio_pinconfig+0x264>)
    ded6:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    ded8:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    dedc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    dee0:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    dee4:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    dee6:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    deea:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    deec:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    def0:	f000 f8c2 	bl	e078 <am_hal_interrupt_master_disable>
    def4:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    def6:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    defa:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    defe:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df02:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    df06:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    df08:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    df0c:	9902      	ldr	r1, [sp, #8]
    df0e:	9a03      	ldr	r2, [sp, #12]
    df10:	b150      	cbz	r0, df28 <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    df12:	f004 001f 	and.w	r0, r4, #31
    df16:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    df1a:	f04f 0c01 	mov.w	ip, #1
    df1e:	4c4d      	ldr	r4, [pc, #308]	; (e054 <am_hal_gpio_pinconfig+0x268>)
    df20:	fa0c f000 	lsl.w	r0, ip, r0
    df24:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    df28:	484b      	ldr	r0, [pc, #300]	; (e058 <am_hal_gpio_pinconfig+0x26c>)
    df2a:	2473      	movs	r4, #115	; 0x73
    df2c:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    df2e:	f8da 4000 	ldr.w	r4, [sl]
    df32:	4034      	ands	r4, r6
    df34:	4325      	orrs	r5, r4
    df36:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    df3a:	f859 5001 	ldr.w	r5, [r9, r1]
    df3e:	402f      	ands	r7, r5
    df40:	ea47 0708 	orr.w	r7, r7, r8
    df44:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df48:	f85b 1003 	ldr.w	r1, [fp, r3]
    df4c:	400e      	ands	r6, r1
    df4e:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    df50:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df52:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    df56:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    df58:	9805      	ldr	r0, [sp, #20]
    df5a:	f000 f891 	bl	e080 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    df5e:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    df60:	b007      	add	sp, #28
    df62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df66:	2e01      	cmp	r6, #1
    df68:	d015      	beq.n	df96 <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df6a:	2e02      	cmp	r6, #2
    df6c:	d030      	beq.n	dfd0 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    df6e:	483b      	ldr	r0, [pc, #236]	; (e05c <am_hal_gpio_pinconfig+0x270>)
    df70:	e759      	b.n	de26 <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    df72:	2cc0      	cmp	r4, #192	; 0xc0
    df74:	d027      	beq.n	dfc6 <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    df76:	2c20      	cmp	r4, #32
    df78:	f47f af5b 	bne.w	de32 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    df7c:	4c2d      	ldr	r4, [pc, #180]	; (e034 <am_hal_gpio_pinconfig+0x248>)
    df7e:	5c26      	ldrb	r6, [r4, r0]
    df80:	f016 0f09 	tst.w	r6, #9
    df84:	f47f af4e 	bne.w	de24 <am_hal_gpio_pinconfig+0x38>
    df88:	e753      	b.n	de32 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    df8a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    df8e:	2a07      	cmp	r2, #7
    df90:	d125      	bne.n	dfde <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    df92:	4833      	ldr	r0, [pc, #204]	; (e060 <am_hal_gpio_pinconfig+0x274>)
    df94:	e747      	b.n	de26 <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    df96:	4c27      	ldr	r4, [pc, #156]	; (e034 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df98:	5c26      	ldrb	r6, [r4, r0]
    df9a:	07b4      	lsls	r4, r6, #30
    df9c:	d5e7      	bpl.n	df6e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    df9e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    dfa2:	e74b      	b.n	de3c <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    dfa4:	2701      	movs	r7, #1
    dfa6:	9700      	str	r7, [sp, #0]
    dfa8:	e776      	b.n	de98 <am_hal_gpio_pinconfig+0xac>
    dfaa:	f004 0a18 	and.w	sl, r4, #24
    dfae:	2301      	movs	r3, #1
    dfb0:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    dfb4:	e786      	b.n	dec4 <am_hal_gpio_pinconfig+0xd8>
    dfb6:	f004 0a18 	and.w	sl, r4, #24
    dfba:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    dfbc:	f045 0504 	orr.w	r5, r5, #4
    dfc0:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    dfc4:	e77e      	b.n	dec4 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    dfc6:	2814      	cmp	r0, #20
    dfc8:	f43f af33 	beq.w	de32 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    dfcc:	4825      	ldr	r0, [pc, #148]	; (e064 <am_hal_gpio_pinconfig+0x278>)
    dfce:	e72a      	b.n	de26 <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    dfd0:	4a18      	ldr	r2, [pc, #96]	; (e034 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    dfd2:	5c17      	ldrb	r7, [r2, r0]
    dfd4:	077a      	lsls	r2, r7, #29
    dfd6:	d5ca      	bpl.n	df6e <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    dfd8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    dfdc:	e72e      	b.n	de3c <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfde:	4c22      	ldr	r4, [pc, #136]	; (e068 <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dfe0:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfe4:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dfe8:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfec:	45b0      	cmp	r8, r6
    dfee:	d010      	beq.n	e012 <am_hal_gpio_pinconfig+0x226>
    dff0:	0087      	lsls	r7, r0, #2
    dff2:	eb04 0907 	add.w	r9, r4, r7
    dff6:	f899 3001 	ldrb.w	r3, [r9, #1]
    dffa:	42b3      	cmp	r3, r6
    dffc:	d015      	beq.n	e02a <am_hal_gpio_pinconfig+0x23e>
    dffe:	f899 2002 	ldrb.w	r2, [r9, #2]
    e002:	42b2      	cmp	r2, r6
    e004:	d00f      	beq.n	e026 <am_hal_gpio_pinconfig+0x23a>
    e006:	f899 4003 	ldrb.w	r4, [r9, #3]
    e00a:	42b4      	cmp	r4, r6
    e00c:	d00f      	beq.n	e02e <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    e00e:	4817      	ldr	r0, [pc, #92]	; (e06c <am_hal_gpio_pinconfig+0x280>)
    e010:	e709      	b.n	de26 <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e012:	2600      	movs	r6, #0
    e014:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    e016:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e018:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    e01c:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    e01e:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    e022:	9300      	str	r3, [sp, #0]
    e024:	e740      	b.n	dea8 <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    e026:	2602      	movs	r6, #2
    e028:	e7f5      	b.n	e016 <am_hal_gpio_pinconfig+0x22a>
    e02a:	2601      	movs	r6, #1
    e02c:	e7f3      	b.n	e016 <am_hal_gpio_pinconfig+0x22a>
    e02e:	2603      	movs	r6, #3
    e030:	e7f1      	b.n	e016 <am_hal_gpio_pinconfig+0x22a>
    e032:	bf00      	nop
    e034:	0000e8a0 	.word	0x0000e8a0
    e038:	08000100 	.word	0x08000100
    e03c:	0000e8d4 	.word	0x0000e8d4
    e040:	0000e9d0 	.word	0x0000e9d0
    e044:	0000e89c 	.word	0x0000e89c
    e048:	7ffffffc 	.word	0x7ffffffc
    e04c:	400100e0 	.word	0x400100e0
    e050:	40010040 	.word	0x40010040
    e054:	400100b4 	.word	0x400100b4
    e058:	40010000 	.word	0x40010000
    e05c:	08000102 	.word	0x08000102
    e060:	08000103 	.word	0x08000103
    e064:	08000101 	.word	0x08000101
    e068:	0000e908 	.word	0x0000e908
    e06c:	08000104 	.word	0x08000104

0000e070 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e070:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    e074:	b662      	cpsie	i
    __asm("    bx lr");
    e076:	4770      	bx	lr

0000e078 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e078:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e07c:	b672      	cpsid	i
    __asm("    bx lr");
    e07e:	4770      	bx	lr

0000e080 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e080:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e084:	4770      	bx	lr
    e086:	bf00      	nop

0000e088 <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e088:	4a0b      	ldr	r2, [pc, #44]	; (e0b8 <am_hal_itm_enable+0x30>)
    e08a:	68d3      	ldr	r3, [r2, #12]
    e08c:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
    e090:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e092:	68d1      	ldr	r1, [r2, #12]
    e094:	01cb      	lsls	r3, r1, #7
    e096:	d5fc      	bpl.n	e092 <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
    e098:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e09c:	4b07      	ldr	r3, [pc, #28]	; (e0bc <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
    e09e:	4a08      	ldr	r2, [pc, #32]	; (e0c0 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e0a0:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e0a4:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
    e0a6:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e0aa:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e0ae:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e0b2:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
    e0b6:	4770      	bx	lr
    e0b8:	e000edf0 	.word	0xe000edf0
    e0bc:	c5acce55 	.word	0xc5acce55
    e0c0:	00150511 	.word	0x00150511

0000e0c4 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    e0c4:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    e0c6:	4b24      	ldr	r3, [pc, #144]	; (e158 <am_hal_itm_disable+0x94>)
    e0c8:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e0cc:	b9b0      	cbnz	r0, e0fc <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e0ce:	4923      	ldr	r1, [pc, #140]	; (e15c <am_hal_itm_disable+0x98>)
    e0d0:	68ca      	ldr	r2, [r1, #12]
    e0d2:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e0d6:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e0d8:	68cb      	ldr	r3, [r1, #12]
    e0da:	01da      	lsls	r2, r3, #7
    e0dc:	d5fc      	bpl.n	e0d8 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e0de:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e0e2:	481f      	ldr	r0, [pc, #124]	; (e160 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e0e4:	4a1f      	ldr	r2, [pc, #124]	; (e164 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e0e6:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e0ea:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e0ec:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e0f0:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e0f4:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e0f8:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e0fc:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e100:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e104:	021b      	lsls	r3, r3, #8
    e106:	d4fb      	bmi.n	e100 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e108:	f240 20f7 	movw	r0, #759	; 0x2f7
    e10c:	f7ff fd3e 	bl	db8c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e110:	4813      	ldr	r0, [pc, #76]	; (e160 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e112:	4915      	ldr	r1, [pc, #84]	; (e168 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e114:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e118:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e11c:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e11e:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e122:	f022 0401 	bic.w	r4, r2, #1
    e126:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e12a:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e12e:	420b      	tst	r3, r1
    e130:	d1fb      	bne.n	e12a <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e132:	3801      	subs	r0, #1
    e134:	d1f3      	bne.n	e11e <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e136:	4909      	ldr	r1, [pc, #36]	; (e15c <am_hal_itm_disable+0x98>)
    e138:	68ca      	ldr	r2, [r1, #12]
    e13a:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e13e:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e140:	68cb      	ldr	r3, [r1, #12]
    e142:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e146:	d1fb      	bne.n	e140 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e148:	4903      	ldr	r1, [pc, #12]	; (e158 <am_hal_itm_disable+0x94>)
    e14a:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e14e:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e152:	2a00      	cmp	r2, #0
    e154:	d1fb      	bne.n	e14e <am_hal_itm_disable+0x8a>
}
    e156:	bd10      	pop	{r4, pc}
    e158:	40020000 	.word	0x40020000
    e15c:	e000edf0 	.word	0xe000edf0
    e160:	c5acce55 	.word	0xc5acce55
    e164:	00150511 	.word	0x00150511
    e168:	00800001 	.word	0x00800001

0000e16c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    e16c:	7803      	ldrb	r3, [r0, #0]
    e16e:	b1b3      	cbz	r3, e19e <am_hal_itm_print+0x32>
{
    e170:	b410      	push	{r4}
    e172:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    e174:	2400      	movs	r4, #0
    e176:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    e17a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    e17c:	2900      	cmp	r1, #0
    e17e:	d1fa      	bne.n	e176 <am_hal_itm_print+0xa>
    e180:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    e182:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    e186:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    e18a:	f8dc 3000 	ldr.w	r3, [ip]
    e18e:	2b00      	cmp	r3, #0
    e190:	d0fb      	beq.n	e18a <am_hal_itm_print+0x1e>
    while (ui32Length)
    e192:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    e194:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    e198:	d1f5      	bne.n	e186 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    e19a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e19e:	4770      	bx	lr

0000e1a0 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e1a0:	b141      	cbz	r1, e1b4 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e1a2:	2801      	cmp	r0, #1
{
    e1a4:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e1a6:	d03a      	beq.n	e21e <am_hal_mcuctrl_info_get+0x7e>
    e1a8:	d322      	bcc.n	e1f0 <am_hal_mcuctrl_info_get+0x50>
    e1aa:	2802      	cmp	r0, #2
    e1ac:	d004      	beq.n	e1b8 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e1ae:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e1b0:	bcf0      	pop	{r4, r5, r6, r7}
    e1b2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e1b4:	2006      	movs	r0, #6
    e1b6:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1b8:	4a41      	ldr	r2, [pc, #260]	; (e2c0 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e1ba:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e1bc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e1c0:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1c2:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1c6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1ca:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e1ce:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e1d0:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e1d2:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e1d4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e1d8:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e1da:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e1de:	4334      	orrs	r4, r6
    e1e0:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e1e2:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e1e6:	4310      	orrs	r0, r2
    e1e8:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e1ea:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e1ec:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e1ee:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e1f0:	4c33      	ldr	r4, [pc, #204]	; (e2c0 <am_hal_mcuctrl_info_get+0x120>)
    e1f2:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e1f4:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e1f8:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e1fc:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e1fe:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e200:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e204:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e208:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e20a:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e20c:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e210:	f004 0501 	and.w	r5, r4, #1
    e214:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e216:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e218:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e21a:	bcf0      	pop	{r4, r5, r6, r7}
    e21c:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e21e:	4a28      	ldr	r2, [pc, #160]	; (e2c0 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e220:	4c28      	ldr	r4, [pc, #160]	; (e2c4 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e222:	6813      	ldr	r3, [r2, #0]
    e224:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e226:	6850      	ldr	r0, [r2, #4]
    e228:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e22a:	6897      	ldr	r7, [r2, #8]
    e22c:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e22e:	68d6      	ldr	r6, [r2, #12]
    e230:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e232:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e234:	4824      	ldr	r0, [pc, #144]	; (e2c8 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e236:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e238:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e23c:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e240:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e242:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e246:	4a21      	ldr	r2, [pc, #132]	; (e2cc <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e248:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e24c:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e24e:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e252:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e254:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e256:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e258:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e25c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e260:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e262:	f000 040f 	and.w	r4, r0, #15
    e266:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e26a:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e26c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e270:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e274:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e278:	f007 0c0f 	and.w	ip, r7, #15
    e27c:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e280:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e282:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e286:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e28a:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e28e:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e292:	433b      	orrs	r3, r7
    e294:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e296:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e29a:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e29e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2a2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e2a6:	b2e5      	uxtb	r5, r4
    e2a8:	042b      	lsls	r3, r5, #16
    e2aa:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2ae:	b2d6      	uxtb	r6, r2
    e2b0:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e2b2:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e2b4:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e2b8:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e2ba:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e2bc:	bcf0      	pop	{r4, r5, r6, r7}
    e2be:	4770      	bx	lr
    e2c0:	40020000 	.word	0x40020000
    e2c4:	0000ea04 	.word	0x0000ea04
    e2c8:	0000ea44 	.word	0x0000ea44
    e2cc:	f0000f00 	.word	0xf0000f00

0000e2d0 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e2d0:	b570      	push	{r4, r5, r6, lr}
    e2d2:	b082      	sub	sp, #8
    e2d4:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    e2d6:	f7ff fecf 	bl	e078 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e2da:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e2de:	008c      	lsls	r4, r1, #2
    e2e0:	4e0e      	ldr	r6, [pc, #56]	; (e31c <am_hal_pwrctrl_periph_enable+0x4c>)
    e2e2:	4d0f      	ldr	r5, [pc, #60]	; (e320 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    e2e4:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e2e6:	592a      	ldr	r2, [r5, r4]
    e2e8:	68b3      	ldr	r3, [r6, #8]
    e2ea:	4313      	orrs	r3, r2
    e2ec:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    e2ee:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e2f0:	442c      	add	r4, r5
    AM_CRITICAL_END
    e2f2:	f7ff fec5 	bl	e080 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e2f6:	2077      	movs	r0, #119	; 0x77
    e2f8:	f7ff fc48 	bl	db8c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e2fc:	69b0      	ldr	r0, [r6, #24]
    e2fe:	6864      	ldr	r4, [r4, #4]
    e300:	4220      	tst	r0, r4
    e302:	d103      	bne.n	e30c <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e304:	2077      	movs	r0, #119	; 0x77
    e306:	f7ff fc41 	bl	db8c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e30a:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    e30c:	4903      	ldr	r1, [pc, #12]	; (e31c <am_hal_pwrctrl_periph_enable+0x4c>)
    e30e:	698d      	ldr	r5, [r1, #24]
    e310:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    e312:	bf0c      	ite	eq
    e314:	2001      	moveq	r0, #1
    e316:	2000      	movne	r0, #0
    e318:	b002      	add	sp, #8
    e31a:	bd70      	pop	{r4, r5, r6, pc}
    e31c:	40021000 	.word	0x40021000
    e320:	0000ebec 	.word	0x0000ebec

0000e324 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e324:	b570      	push	{r4, r5, r6, lr}
    e326:	b082      	sub	sp, #8
    e328:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    e32a:	f7ff fea5 	bl	e078 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e32e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e332:	008c      	lsls	r4, r1, #2
    e334:	4e0f      	ldr	r6, [pc, #60]	; (e374 <am_hal_pwrctrl_periph_disable+0x50>)
    e336:	4d10      	ldr	r5, [pc, #64]	; (e378 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    e338:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e33a:	68b3      	ldr	r3, [r6, #8]
    e33c:	592a      	ldr	r2, [r5, r4]
    e33e:	ea23 0002 	bic.w	r0, r3, r2
    e342:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    e344:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e346:	442c      	add	r4, r5
    AM_CRITICAL_END
    e348:	f7ff fe9a 	bl	e080 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e34c:	2077      	movs	r0, #119	; 0x77
    e34e:	f7ff fc1d 	bl	db8c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e352:	69b1      	ldr	r1, [r6, #24]
    e354:	6864      	ldr	r4, [r4, #4]
    e356:	4221      	tst	r1, r4
    e358:	d003      	beq.n	e362 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e35a:	2077      	movs	r0, #119	; 0x77
    e35c:	f7ff fc16 	bl	db8c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e360:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e362:	4d04      	ldr	r5, [pc, #16]	; (e374 <am_hal_pwrctrl_periph_disable+0x50>)
    e364:	69ae      	ldr	r6, [r5, #24]
    e366:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e368:	bf14      	ite	ne
    e36a:	2001      	movne	r0, #1
    e36c:	2000      	moveq	r0, #0
    e36e:	b002      	add	sp, #8
    e370:	bd70      	pop	{r4, r5, r6, pc}
    e372:	bf00      	nop
    e374:	40021000 	.word	0x40021000
    e378:	0000ebec 	.word	0x0000ebec

0000e37c <am_hal_pwrctrl_memory_enable>:
//  Enable a configuration of memory.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_memory_enable(am_hal_pwrctrl_mem_e eMemConfig)
{
    e37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if 0
    uint32_t ui32MemEventMask;
#endif
// #### INTERNAL END ####

    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e380:	ea4f 0980 	mov.w	r9, r0, lsl #2
    e384:	eb09 0300 	add.w	r3, r9, r0
    e388:	4f1e      	ldr	r7, [pc, #120]	; (e404 <am_hal_pwrctrl_memory_enable+0x88>)
{
    e38a:	4604      	mov	r4, r0
    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e38c:	0098      	lsls	r0, r3, #2
    e38e:	183a      	adds	r2, r7, r0
    e390:	583d      	ldr	r5, [r7, r0]
#if 0
    ui32MemEventMask  = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEvent;
#endif
// #### INTERNAL END ####
    ui32MemRegionMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryMask;
    ui32MemStatusMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32StatusMask;
    e392:	6916      	ldr	r6, [r2, #16]
    //
    // Note that a deliberate disable step using a disable mask is taken here
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    e394:	43eb      	mvns	r3, r5
    e396:	d126      	bne.n	e3e6 <am_hal_pwrctrl_memory_enable+0x6a>
// #### INTERNAL END ####

    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    e398:	b965      	cbnz	r5, e3b4 <am_hal_pwrctrl_memory_enable+0x38>
    e39a:	444c      	add	r4, r9
    e39c:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
    e3a0:	f8dc 5004 	ldr.w	r5, [ip, #4]

    //
    // Return status based on whether the power control memory status has reached the desired state.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3a4:	4918      	ldr	r1, [pc, #96]	; (e408 <am_hal_pwrctrl_memory_enable+0x8c>)
    e3a6:	694a      	ldr	r2, [r1, #20]
    e3a8:	4032      	ands	r2, r6
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e3aa:	1b50      	subs	r0, r2, r5
    e3ac:	bf18      	it	ne
    e3ae:	2001      	movne	r0, #1
    e3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3b4:	f8df 8050 	ldr.w	r8, [pc, #80]	; e408 <am_hal_pwrctrl_memory_enable+0x8c>
    e3b8:	f8d8 0010 	ldr.w	r0, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3bc:	444c      	add	r4, r9
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e3be:	4305      	orrs	r5, r0
    e3c0:	f8c8 5010 	str.w	r5, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3c4:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e3c8:	2077      	movs	r0, #119	; 0x77
    e3ca:	f7ff fbdf 	bl	db8c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3ce:	f8d8 7014 	ldr.w	r7, [r8, #20]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e3d2:	6865      	ldr	r5, [r4, #4]
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3d4:	4037      	ands	r7, r6
    e3d6:	42af      	cmp	r7, r5
    e3d8:	d0e4      	beq.n	e3a4 <am_hal_pwrctrl_memory_enable+0x28>
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e3da:	2077      	movs	r0, #119	; 0x77
    e3dc:	f7ff fbd6 	bl	db8c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e3e0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    e3e4:	e7de      	b.n	e3a4 <am_hal_pwrctrl_memory_enable+0x28>
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e3e6:	68d0      	ldr	r0, [r2, #12]
        PWRCTRL->MEMPWREN &=
    e3e8:	4907      	ldr	r1, [pc, #28]	; (e408 <am_hal_pwrctrl_memory_enable+0x8c>)
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e3ea:	4003      	ands	r3, r0
        PWRCTRL->MEMPWREN &=
    e3ec:	690a      	ldr	r2, [r1, #16]
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e3ee:	f242 0801 	movw	r8, #8193	; 0x2001
    e3f2:	ea68 0303 	orn	r3, r8, r3
        PWRCTRL->MEMPWREN &=
    e3f6:	4013      	ands	r3, r2
    e3f8:	610b      	str	r3, [r1, #16]
        am_hal_flash_delay(FLASH_CYCLES_US(1));
    e3fa:	2001      	movs	r0, #1
    e3fc:	f7ff fbc6 	bl	db8c <am_hal_flash_delay>
    e400:	e7ca      	b.n	e398 <am_hal_pwrctrl_memory_enable+0x1c>
    e402:	bf00      	nop
    e404:	0000ea84 	.word	0x0000ea84
    e408:	40021000 	.word	0x40021000

0000e40c <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e40c:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e40e:	4c1b      	ldr	r4, [pc, #108]	; (e47c <am_hal_pwrctrl_low_power_init+0x70>)
    e410:	69a3      	ldr	r3, [r4, #24]
    e412:	05db      	lsls	r3, r3, #23
{
    e414:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e416:	d502      	bpl.n	e41e <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e418:	2000      	movs	r0, #0
}
    e41a:	b003      	add	sp, #12
    e41c:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e41e:	4d18      	ldr	r5, [pc, #96]	; (e480 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e420:	4918      	ldr	r1, [pc, #96]	; (e484 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e422:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e424:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e426:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e428:	461a      	mov	r2, r3
    e42a:	9000      	str	r0, [sp, #0]
    e42c:	f242 7010 	movw	r0, #10000	; 0x2710
    e430:	f7ff fbb0 	bl	db94 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e434:	b110      	cbz	r0, e43c <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e436:	2004      	movs	r0, #4
}
    e438:	b003      	add	sp, #12
    e43a:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e43c:	6821      	ldr	r1, [r4, #0]
    e43e:	f041 0201 	orr.w	r2, r1, #1
    e442:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e444:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e446:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e44a:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e44c:	68ec      	ldr	r4, [r5, #12]
    e44e:	b2e2      	uxtb	r2, r4
    e450:	2a11      	cmp	r2, #17
    e452:	d1e1      	bne.n	e418 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e454:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e458:	f360 5356 	bfi	r3, r0, #21, #2
    e45c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e460:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e464:	240f      	movs	r4, #15
    e466:	f364 118b 	bfi	r1, r4, #6, #6
    e46a:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e46e:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e472:	f364 0205 	bfi	r2, r4, #0, #6
    e476:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e47a:	e7ce      	b.n	e41a <am_hal_pwrctrl_low_power_init+0xe>
    e47c:	40021000 	.word	0x40021000
    e480:	40020000 	.word	0x40020000
    e484:	40020018 	.word	0x40020018

0000e488 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e488:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e48c:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e48e:	68d3      	ldr	r3, [r2, #12]
    e490:	bf0c      	ite	eq
    e492:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e496:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e49a:	60d3      	str	r3, [r2, #12]
    e49c:	4770      	bx	lr
    e49e:	bf00      	nop

0000e4a0 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e4a0:	4a03      	ldr	r2, [pc, #12]	; (e4b0 <am_hal_rtc_osc_disable+0x10>)
    e4a2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e4a6:	f043 0010 	orr.w	r0, r3, #16
    e4aa:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e4ae:	4770      	bx	lr
    e4b0:	40004200 	.word	0x40004200

0000e4b4 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    e4b4:	b510      	push	{r4, lr}
    e4b6:	b082      	sub	sp, #8
    e4b8:	4604      	mov	r4, r0
    //
    // Disable interrupts and save the previous interrupt state.
    //
    AM_CRITICAL_BEGIN
    e4ba:	f7ff fddd 	bl	e078 <am_hal_interrupt_master_disable>
    e4be:	9001      	str	r0, [sp, #4]
#if AM_CMSIS_REGS
    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e4c0:	b124      	cbz	r4, e4cc <am_hal_sysctrl_sleep+0x18>
         (MCUCTRL->TPIUCTRL_b.ENABLE == MCUCTRL_TPIUCTRL_ENABLE_DIS) )
    e4c2:	4b0c      	ldr	r3, [pc, #48]	; (e4f4 <am_hal_sysctrl_sleep+0x40>)
    e4c4:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    if ( (bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP)    &&
    e4c8:	07c3      	lsls	r3, r0, #31
    e4ca:	d50a      	bpl.n	e4e2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        SCB->SCR &= ~_VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e4cc:	4a0a      	ldr	r2, [pc, #40]	; (e4f8 <am_hal_sysctrl_sleep+0x44>)
    e4ce:	6911      	ldr	r1, [r2, #16]
    e4d0:	f021 0404 	bic.w	r4, r1, #4
    e4d4:	6114      	str	r4, [r2, #16]

        //
        // Go to sleep.
        //
        __WFI();
    e4d6:	bf30      	wfi
#endif // AM_CMSIS_REGS

    //
    // Restore the interrupt state.
    //
    AM_CRITICAL_END
    e4d8:	9801      	ldr	r0, [sp, #4]
    e4da:	f7ff fdd1 	bl	e080 <am_hal_interrupt_master_set>
}
    e4de:	b002      	add	sp, #8
    e4e0:	bd10      	pop	{r4, pc}
        SCB->SCR = _VAL2FLD(SCB_SCR_SLEEPDEEP, 1);
    e4e2:	4b05      	ldr	r3, [pc, #20]	; (e4f8 <am_hal_sysctrl_sleep+0x44>)
    e4e4:	2004      	movs	r0, #4
    e4e6:	6118      	str	r0, [r3, #16]
        __WFI();
    e4e8:	bf30      	wfi
    AM_CRITICAL_END
    e4ea:	9801      	ldr	r0, [sp, #4]
    e4ec:	f7ff fdc8 	bl	e080 <am_hal_interrupt_master_set>
}
    e4f0:	b002      	add	sp, #8
    e4f2:	bd10      	pop	{r4, pc}
    e4f4:	40020000 	.word	0x40020000
    e4f8:	e000ed00 	.word	0xe000ed00

0000e4fc <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    e4fc:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
    e4fe:	4a24      	ldr	r2, [pc, #144]	; (e590 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    e500:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
    e502:	2100      	movs	r1, #0
{
    e504:	b084      	sub	sp, #16
    TPI->FFCR = 0;
    e506:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
    e50a:	b33b      	cbz	r3, e55c <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e50c:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e50e:	4921      	ldr	r1, [pc, #132]	; (e594 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e510:	4c21      	ldr	r4, [pc, #132]	; (e598 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
    e512:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    e514:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
    e518:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    e51a:	458c      	cmp	ip, r1
    e51c:	bf98      	it	ls
    e51e:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
    e520:	f7ff fa5e 	bl	d9e0 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
    e524:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    e526:	1c5a      	adds	r2, r3, #1
    e528:	d02f      	beq.n	e58a <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    e52a:	08da      	lsrs	r2, r3, #3
    e52c:	fbb2 fef4 	udiv	lr, r2, r4
    e530:	f10e 31ff 	add.w	r1, lr, #4294967295
    e534:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e536:	4a16      	ldr	r2, [pc, #88]	; (e590 <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
    e538:	4918      	ldr	r1, [pc, #96]	; (e59c <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
    e53a:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
    e53c:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e540:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e542:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
    e544:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
    e548:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
    e54c:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e550:	f240 20f7 	movw	r0, #759	; 0x2f7
    e554:	f7ff fb1a 	bl	db8c <am_hal_flash_delay>
}
    e558:	b004      	add	sp, #16
    e55a:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
    e55c:	6904      	ldr	r4, [r0, #16]
    e55e:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
    e560:	6883      	ldr	r3, [r0, #8]
    e562:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e566:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e568:	4c0c      	ldr	r4, [pc, #48]	; (e59c <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
    e56a:	3901      	subs	r1, #1
    e56c:	2301      	movs	r3, #1
    e56e:	408b      	lsls	r3, r1
    e570:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
    e572:	6840      	ldr	r0, [r0, #4]
    e574:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    e578:	4302      	orrs	r2, r0
    e57a:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e57e:	f240 20f7 	movw	r0, #759	; 0x2f7
    e582:	f7ff fb03 	bl	db8c <am_hal_flash_delay>
}
    e586:	b004      	add	sp, #16
    e588:	bd10      	pop	{r4, pc}
    e58a:	2005      	movs	r0, #5
    e58c:	e7d3      	b.n	e536 <am_hal_tpiu_enable+0x3a>
    e58e:	bf00      	nop
    e590:	e0040000 	.word	0xe0040000
    e594:	001da380 	.word	0x001da380
    e598:	000f4240 	.word	0x000f4240
    e59c:	40020000 	.word	0x40020000
    e5a0:	6f727245 	.word	0x6f727245
    e5a4:	65722072 	.word	0x65722072
    e5a8:	6e696461 	.word	0x6e696461
    e5ac:	44412067 	.word	0x44412067
    e5b0:	6e692043 	.word	0x6e692043
    e5b4:	72726574 	.word	0x72726574
    e5b8:	20747075 	.word	0x20747075
    e5bc:	74617473 	.word	0x74617473
    e5c0:	000a7375 	.word	0x000a7375
    e5c4:	6f727245 	.word	0x6f727245
    e5c8:	6c632072 	.word	0x6c632072
    e5cc:	69726165 	.word	0x69726165
    e5d0:	4120676e 	.word	0x4120676e
    e5d4:	69204344 	.word	0x69204344
    e5d8:	7265746e 	.word	0x7265746e
    e5dc:	74707572 	.word	0x74707572
    e5e0:	61747320 	.word	0x61747320
    e5e4:	0a737574 	.word	0x0a737574
    e5e8:	00000000 	.word	0x00000000
    e5ec:	6f727245 	.word	0x6f727245
    e5f0:	202d2072 	.word	0x202d2072
    e5f4:	666e6f63 	.word	0x666e6f63
    e5f8:	72756769 	.word	0x72756769
    e5fc:	20676e69 	.word	0x20676e69
    e600:	20434441 	.word	0x20434441
    e604:	20414d44 	.word	0x20414d44
    e608:	6c696166 	.word	0x6c696166
    e60c:	0a2e6465 	.word	0x0a2e6465
    e610:	00000000 	.word	0x00000000
    e614:	6f727245 	.word	0x6f727245
    e618:	202d2072 	.word	0x202d2072
    e61c:	65736572 	.word	0x65736572
    e620:	74617672 	.word	0x74617672
    e624:	206e6f69 	.word	0x206e6f69
    e628:	7420666f 	.word	0x7420666f
    e62c:	41206568 	.word	0x41206568
    e630:	69204344 	.word	0x69204344
    e634:	6174736e 	.word	0x6174736e
    e638:	2065636e 	.word	0x2065636e
    e63c:	6c696166 	.word	0x6c696166
    e640:	0a2e6465 	.word	0x0a2e6465
    e644:	00000000 	.word	0x00000000
    e648:	6f727245 	.word	0x6f727245
    e64c:	202d2072 	.word	0x202d2072
    e650:	20434441 	.word	0x20434441
    e654:	65776f70 	.word	0x65776f70
    e658:	6e6f2072 	.word	0x6e6f2072
    e65c:	69616620 	.word	0x69616620
    e660:	2e64656c 	.word	0x2e64656c
    e664:	0000000a 	.word	0x0000000a
    e668:	6f727245 	.word	0x6f727245
    e66c:	202d2072 	.word	0x202d2072
    e670:	666e6f63 	.word	0x666e6f63
    e674:	72756769 	.word	0x72756769
    e678:	20676e69 	.word	0x20676e69
    e67c:	20434441 	.word	0x20434441
    e680:	6c696166 	.word	0x6c696166
    e684:	0a2e6465 	.word	0x0a2e6465
    e688:	00000000 	.word	0x00000000
    e68c:	6f727245 	.word	0x6f727245
    e690:	202d2072 	.word	0x202d2072
    e694:	666e6f63 	.word	0x666e6f63
    e698:	72756769 	.word	0x72756769
    e69c:	20676e69 	.word	0x20676e69
    e6a0:	20434441 	.word	0x20434441
    e6a4:	746f6c53 	.word	0x746f6c53
    e6a8:	66203020 	.word	0x66203020
    e6ac:	656c6961 	.word	0x656c6961
    e6b0:	000a2e64 	.word	0x000a2e64
    e6b4:	6f727245 	.word	0x6f727245
    e6b8:	202d2072 	.word	0x202d2072
    e6bc:	62616e65 	.word	0x62616e65
    e6c0:	676e696c 	.word	0x676e696c
    e6c4:	43444120 	.word	0x43444120
    e6c8:	69616620 	.word	0x69616620
    e6cc:	2e64656c 	.word	0x2e64656c
    e6d0:	0000000a 	.word	0x0000000a
    e6d4:	6f727245 	.word	0x6f727245
    e6d8:	202d2072 	.word	0x202d2072
    e6dc:	666e6f63 	.word	0x666e6f63
    e6e0:	72756769 	.word	0x72756769
    e6e4:	20676e69 	.word	0x20676e69
    e6e8:	20656874 	.word	0x20656874
    e6ec:	74737973 	.word	0x74737973
    e6f0:	63206d65 	.word	0x63206d65
    e6f4:	6b636f6c 	.word	0x6b636f6c
    e6f8:	69616620 	.word	0x69616620
    e6fc:	2e64656c 	.word	0x2e64656c
    e700:	0000000a 	.word	0x0000000a
    e704:	6f727245 	.word	0x6f727245
    e708:	202d2072 	.word	0x202d2072
    e70c:	666e6f63 	.word	0x666e6f63
    e710:	72756769 	.word	0x72756769
    e714:	20676e69 	.word	0x20676e69
    e718:	20656874 	.word	0x20656874
    e71c:	74737973 	.word	0x74737973
    e720:	63206d65 	.word	0x63206d65
    e724:	65686361 	.word	0x65686361
    e728:	69616620 	.word	0x69616620
    e72c:	2e64656c 	.word	0x2e64656c
    e730:	0000000a 	.word	0x0000000a
    e734:	6f727245 	.word	0x6f727245
    e738:	202d2072 	.word	0x202d2072
    e73c:	62616e65 	.word	0x62616e65
    e740:	676e696c 	.word	0x676e696c
    e744:	65687420 	.word	0x65687420
    e748:	73797320 	.word	0x73797320
    e74c:	206d6574 	.word	0x206d6574
    e750:	68636163 	.word	0x68636163
    e754:	61662065 	.word	0x61662065
    e758:	64656c69 	.word	0x64656c69
    e75c:	00000a2e 	.word	0x00000a2e
    e760:	6f727245 	.word	0x6f727245
    e764:	202d2072 	.word	0x202d2072
    e768:	666e6f63 	.word	0x666e6f63
    e76c:	72756769 	.word	0x72756769
    e770:	20676e69 	.word	0x20676e69
    e774:	20656874 	.word	0x20656874
    e778:	73616c66 	.word	0x73616c66
    e77c:	656d2068 	.word	0x656d2068
    e780:	79726f6d 	.word	0x79726f6d
    e784:	69616620 	.word	0x69616620
    e788:	2e64656c 	.word	0x2e64656c
    e78c:	0000000a 	.word	0x0000000a
    e790:	6f727245 	.word	0x6f727245
    e794:	202d2072 	.word	0x202d2072
    e798:	666e6f63 	.word	0x666e6f63
    e79c:	72756769 	.word	0x72756769
    e7a0:	20676e69 	.word	0x20676e69
    e7a4:	20656874 	.word	0x20656874
    e7a8:	4d415253 	.word	0x4d415253
    e7ac:	69616620 	.word	0x69616620
    e7b0:	2e64656c 	.word	0x2e64656c
    e7b4:	0000000a 	.word	0x0000000a
    e7b8:	6f727245 	.word	0x6f727245
    e7bc:	202d2072 	.word	0x202d2072
    e7c0:	67697274 	.word	0x67697274
    e7c4:	69726567 	.word	0x69726567
    e7c8:	7420676e 	.word	0x7420676e
    e7cc:	41206568 	.word	0x41206568
    e7d0:	66204344 	.word	0x66204344
    e7d4:	656c6961 	.word	0x656c6961
    e7d8:	000a2e64 	.word	0x000a2e64
    e7dc:	20434441 	.word	0x20434441
    e7e0:	6d617845 	.word	0x6d617845
    e7e4:	20656c70 	.word	0x20656c70
    e7e8:	68746977 	.word	0x68746977
    e7ec:	322e3120 	.word	0x322e3120
    e7f0:	7370734d 	.word	0x7370734d
    e7f4:	646e6120 	.word	0x646e6120
    e7f8:	4d504c20 	.word	0x4d504c20
    e7fc:	3d45444f 	.word	0x3d45444f
    e800:	00000a30 	.word	0x00000a30
    e804:	20414d44 	.word	0x20414d44
    e808:	6f727245 	.word	0x6f727245
    e80c:	636f2072 	.word	0x636f2072
    e810:	65727563 	.word	0x65727563
    e814:	00000a64 	.word	0x00000a64
    e818:	20414d44 	.word	0x20414d44
    e81c:	706d6f43 	.word	0x706d6f43
    e820:	6574656c 	.word	0x6574656c
    e824:	0000000a 	.word	0x0000000a
    e828:	6f727245 	.word	0x6f727245
    e82c:	202d2072 	.word	0x202d2072
    e830:	6c696166 	.word	0x6c696166
    e834:	74206465 	.word	0x74206465
    e838:	7270206f 	.word	0x7270206f
    e83c:	7365636f 	.word	0x7365636f
    e840:	61732073 	.word	0x61732073
    e844:	656c706d 	.word	0x656c706d
    e848:	000a2e73 	.word	0x000a2e73
    e84c:	6f727245 	.word	0x6f727245
    e850:	202d2072 	.word	0x202d2072
    e854:	61656c63 	.word	0x61656c63
    e858:	676e6972 	.word	0x676e6972
    e85c:	65687420 	.word	0x65687420
    e860:	43444120 	.word	0x43444120
    e864:	746e6920 	.word	0x746e6920
    e868:	75727265 	.word	0x75727265
    e86c:	20737470 	.word	0x20737470
    e870:	6c696166 	.word	0x6c696166
    e874:	0a2e6465 	.word	0x0a2e6465
    e878:	00000000 	.word	0x00000000
    e87c:	0a0a0a0a 	.word	0x0a0a0a0a
    e880:	0a0a0a0a 	.word	0x0a0a0a0a
    e884:	0a0a0a0a 	.word	0x0a0a0a0a
    e888:	0a0a0a0a 	.word	0x0a0a0a0a
    e88c:	00000a0a 	.word	0x00000a0a

0000e890 <g_AM_PIN_16_ADCSE0>:
    e890:	00000000                                ....

0000e894 <g_AM_BSP_GPIO_ITM_SWO>:
    e894:	00000002                                ....

0000e898 <am_hal_cachectrl_defaults>:
    e898:	00000308                                ....

0000e89c <g_AM_HAL_GPIO_DISABLE>:
    e89c:	00000003                                ....

0000e8a0 <g_ui8Bit76Capabilities>:
    e8a0:	02800101 80010180 80800101 80808080     ................
    e8b0:	80808080 80808008 01800180 80808080     ................
    e8c0:	80808080 01800402 01010401 80808080     ................
    e8d0:	00000101                                ....

0000e8d4 <g_ui8Inpen>:
    e8d4:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    e8e4:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    e8f4:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    e904:	00003130                                01..

0000e908 <g_ui8NCEtable>:
    e908:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e918:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e928:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e938:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e948:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e958:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e968:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e978:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e988:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e998:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e9a8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e9b8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e9c8:	32221202 43231303                       .."2..#C

0000e9d0 <g_ui8nCEpins>:
    e9d0:	02070707 00080802 01020202 01010101     ................
    e9e0:	01010101 01010101 01010101 01010101     ................
    e9f0:	01010101 08010101 01010008 01010101     ................
    ea00:	00000101                                ....

0000ea04 <g_am_hal_mcuctrl_flash_size>:
    ea04:	00004000 00008000 00010000 00020000     .@..............
    ea14:	00040000 00080000 00100000 00200000     .............. .
	...

0000ea44 <g_am_hal_mcuctrl_sram_size>:
    ea44:	00004000 00008000 00010000 00020000     .@..............
    ea54:	00040000 00080000 00100000 00060000     ................
	...

0000ea84 <am_hal_pwrctrl_memory_control>:
	...
    ea98:	00000001 00000001 00000001 00001fff     ................
    eaa8:	00001fff 00000003 00000003 00000003     ................
    eab8:	00001fff 00001fff 00000007 00000007     ................
    eac8:	00000007 00001fff 00001fff 0000000f     ................
    ead8:	0000000f 0000000f 00001fff 00001fff     ................
    eae8:	0000001f 0000001f 0000001f 00001fff     ................
    eaf8:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    eb08:	00001fff 00001fff 0000007f 0000007f     ................
    eb18:	0000007f 00001fff 00001fff 000000ff     ................
    eb28:	000000ff 000000ff 00001fff 00001fff     ................
    eb38:	000001ff 000001ff 000001ff 00001fff     ................
    eb48:	00001fff 000003ff 000003ff 000003ff     ................
    eb58:	00001fff 00001fff 000007ff 000007ff     ................
    eb68:	000007ff 00001fff 00001fff 00000fff     ................
    eb78:	00000fff 00000fff 00001fff 00001fff     ................
    eb88:	00001fff 00001fff 00001fff 00001fff     ................
    eb98:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    eba8:	00006000 00006000 00006000 00006000     .`...`...`...`..
    ebb8:	00006000 00006000 00006000 c0000000     .`...`...`......
    ebc8:	00018000 c0000000 c0000000 00018000     ................
    ebd8:	c0007fff 0001ffff c0007fff c0007fff     ................
    ebe8:	0001ffff                                ....

0000ebec <am_hal_pwrctrl_peripheral_control>:
	...
    ebf8:	00000001 00000004 00000004 00000002     ................
    ec08:	00000008 00000008 00000004 00000008     ................
    ec18:	00000008 00000008 00000008 00000008     ................
    ec28:	00000010 00000010 00000010 00000020     ............ ...
    ec38:	00000010 00000010 00000040 00000010     ........@.......
    ec48:	00000010 00000080 00000004 00000004     ................
    ec58:	00000100 00000004 00000004 00000200     ................
    ec68:	00000020 00000020 00000400 00000004      ... ...........
    ec78:	00000004 00000800 00000040 00000040     ........@...@...
    ec88:	00001000 00000080 00000080 00002000     ............. ..
    ec98:	00000100 00000100                       ........
