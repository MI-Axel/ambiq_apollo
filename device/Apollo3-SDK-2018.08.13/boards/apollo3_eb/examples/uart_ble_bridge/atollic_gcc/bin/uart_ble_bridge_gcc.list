
uart_ble_bridge_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007260  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000b40  10001000  00013260  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000012ac  10001b40  00013da0  00021b40  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021b40  2**0
                  CONTENTS, READONLY
  5 .debug_info   0002915e  00000000  00000000  00021b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003555  00000000  00000000  0004acd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000828  00000000  00000000  0004e22a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00002400  00000000  00000000  0004ea52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007419  00000000  00000000  00050e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b495  00000000  00000000  0005826b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00063700  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001b04  00000000  00000000  0006377c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e281  00000000  00000000  00065280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 69 c7 00 00 d1 c7 00 00 19 c8 00 00     ....i...........
    c010:	19 c8 00 00 19 c8 00 00 19 c8 00 00 00 00 00 00     ................
	...
    c02c:	d7 c7 00 00 d7 c7 00 00 00 00 00 00 d7 c7 00 00     ................
    c03c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c04c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c05c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c06c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c07c:	d1 c4 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c08c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c09c:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c0ac:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c0bc:	d7 c7 00 00 d7 c7 00 00 d7 c7 00 00 d7 c7 00 00     ................
    c0cc:	d7 c7 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c1dc:	b480      	push	{r7}
    c1de:	b083      	sub	sp, #12
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	4603      	mov	r3, r0
    c1e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	db10      	blt.n	c210 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1ee:	490b      	ldr	r1, [pc, #44]	; (c21c <__NVIC_DisableIRQ+0x40>)
    c1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1f4:	095b      	lsrs	r3, r3, #5
    c1f6:	79fa      	ldrb	r2, [r7, #7]
    c1f8:	f002 021f 	and.w	r2, r2, #31
    c1fc:	2001      	movs	r0, #1
    c1fe:	fa00 f202 	lsl.w	r2, r0, r2
    c202:	3320      	adds	r3, #32
    c204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c20c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c210:	bf00      	nop
    c212:	370c      	adds	r7, #12
    c214:	46bd      	mov	sp, r7
    c216:	f85d 7b04 	ldr.w	r7, [sp], #4
    c21a:	4770      	bx	lr
    c21c:	e000e100 	.word	0xe000e100

0000c220 <cmd_handler>:
void *g_pvBLEHandle;
void *g_pvUART;
uint8_t carrier_wave_mode=0;

static void cmd_handler(uint8_t *pBuffer, uint32_t len)
{
    c220:	b580      	push	{r7, lr}
    c222:	b084      	sub	sp, #16
    c224:	af00      	add	r7, sp, #0
    c226:	6078      	str	r0, [r7, #4]
    c228:	6039      	str	r1, [r7, #0]
  uint16_t value;
  
#ifndef AM_DEBUG_BLE_TIMING
  for(uint32_t i=0; i<len; i++)
    c22a:	2300      	movs	r3, #0
    c22c:	60fb      	str	r3, [r7, #12]
    c22e:	e00a      	b.n	c246 <cmd_handler+0x26>
    am_util_stdio_printf("%02x ", pBuffer[i]);
    c230:	687a      	ldr	r2, [r7, #4]
    c232:	68fb      	ldr	r3, [r7, #12]
    c234:	4413      	add	r3, r2
    c236:	781b      	ldrb	r3, [r3, #0]
    c238:	4619      	mov	r1, r3
    c23a:	4886      	ldr	r0, [pc, #536]	; (c454 <cmd_handler+0x234>)
    c23c:	f001 f9f0 	bl	d620 <am_util_stdio_printf>
  for(uint32_t i=0; i<len; i++)
    c240:	68fb      	ldr	r3, [r7, #12]
    c242:	3301      	adds	r3, #1
    c244:	60fb      	str	r3, [r7, #12]
    c246:	68fa      	ldr	r2, [r7, #12]
    c248:	683b      	ldr	r3, [r7, #0]
    c24a:	429a      	cmp	r2, r3
    c24c:	d3f0      	bcc.n	c230 <cmd_handler+0x10>
  am_util_stdio_printf("\n");
    c24e:	4882      	ldr	r0, [pc, #520]	; (c458 <cmd_handler+0x238>)
    c250:	f001 f9e6 	bl	d620 <am_util_stdio_printf>
#endif
    
    carrier_wave_mode = 0;
    c254:	4b81      	ldr	r3, [pc, #516]	; (c45c <cmd_handler+0x23c>)
    c256:	2200      	movs	r2, #0
    c258:	701a      	strb	r2, [r3, #0]

    if((NULL != pBuffer) && (pBuffer[0] == 0x01) && (pBuffer[1] == 0x03)&& (pBuffer[2] == 0x0c))   //hci_reset ,reset trans mode 
    c25a:	687b      	ldr	r3, [r7, #4]
    c25c:	2b00      	cmp	r3, #0
    c25e:	d01a      	beq.n	c296 <cmd_handler+0x76>
    c260:	687b      	ldr	r3, [r7, #4]
    c262:	781b      	ldrb	r3, [r3, #0]
    c264:	2b01      	cmp	r3, #1
    c266:	d116      	bne.n	c296 <cmd_handler+0x76>
    c268:	687b      	ldr	r3, [r7, #4]
    c26a:	3301      	adds	r3, #1
    c26c:	781b      	ldrb	r3, [r3, #0]
    c26e:	2b03      	cmp	r3, #3
    c270:	d111      	bne.n	c296 <cmd_handler+0x76>
    c272:	687b      	ldr	r3, [r7, #4]
    c274:	3302      	adds	r3, #2
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	2b0c      	cmp	r3, #12
    c27a:	d10c      	bne.n	c296 <cmd_handler+0x76>
    {
        am_hal_ble_transmitter_control(g_pvBLEHandle, 0);   //disable carrier wave mode
    c27c:	4b78      	ldr	r3, [pc, #480]	; (c460 <cmd_handler+0x240>)
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	2100      	movs	r1, #0
    c282:	4618      	mov	r0, r3
    c284:	f002 fb94 	bl	e9b0 <am_hal_ble_transmitter_control>
        am_hal_ble_set_constant_transmission(g_pvBLEHandle, false); //disable constant trans mode
    c288:	4b75      	ldr	r3, [pc, #468]	; (c460 <cmd_handler+0x240>)
    c28a:	681b      	ldr	r3, [r3, #0]
    c28c:	2100      	movs	r1, #0
    c28e:	4618      	mov	r0, r3
    c290:	f002 fbdc 	bl	ea4c <am_hal_ble_set_constant_transmission>
    c294:	e059      	b.n	c34a <cmd_handler+0x12a>
    }

    else if((NULL != pBuffer) && (pBuffer[0] == 0x01) && (pBuffer[1] == 0x1f)&& (pBuffer[2] == 0x20)&&(pBuffer[3] == 0x00))   //test_end ,reset trans mode 
    c296:	687b      	ldr	r3, [r7, #4]
    c298:	2b00      	cmp	r3, #0
    c29a:	d01f      	beq.n	c2dc <cmd_handler+0xbc>
    c29c:	687b      	ldr	r3, [r7, #4]
    c29e:	781b      	ldrb	r3, [r3, #0]
    c2a0:	2b01      	cmp	r3, #1
    c2a2:	d11b      	bne.n	c2dc <cmd_handler+0xbc>
    c2a4:	687b      	ldr	r3, [r7, #4]
    c2a6:	3301      	adds	r3, #1
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	2b1f      	cmp	r3, #31
    c2ac:	d116      	bne.n	c2dc <cmd_handler+0xbc>
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	3302      	adds	r3, #2
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	2b20      	cmp	r3, #32
    c2b6:	d111      	bne.n	c2dc <cmd_handler+0xbc>
    c2b8:	687b      	ldr	r3, [r7, #4]
    c2ba:	3303      	adds	r3, #3
    c2bc:	781b      	ldrb	r3, [r3, #0]
    c2be:	2b00      	cmp	r3, #0
    c2c0:	d10c      	bne.n	c2dc <cmd_handler+0xbc>
    {
        am_hal_ble_transmitter_control(g_pvBLEHandle, 0);   //disable carrier wave mode
    c2c2:	4b67      	ldr	r3, [pc, #412]	; (c460 <cmd_handler+0x240>)
    c2c4:	681b      	ldr	r3, [r3, #0]
    c2c6:	2100      	movs	r1, #0
    c2c8:	4618      	mov	r0, r3
    c2ca:	f002 fb71 	bl	e9b0 <am_hal_ble_transmitter_control>
        am_hal_ble_set_constant_transmission(g_pvBLEHandle, false); //disable constant trans mode
    c2ce:	4b64      	ldr	r3, [pc, #400]	; (c460 <cmd_handler+0x240>)
    c2d0:	681b      	ldr	r3, [r3, #0]
    c2d2:	2100      	movs	r1, #0
    c2d4:	4618      	mov	r0, r3
    c2d6:	f002 fbb9 	bl	ea4c <am_hal_ble_set_constant_transmission>
    c2da:	e036      	b.n	c34a <cmd_handler+0x12a>
    }

    else if ( (NULL != pBuffer) && (pBuffer[0] == 0x01) && (pBuffer[1] == 0x1e)&& (pBuffer[2] == 0x20) )
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d033      	beq.n	c34a <cmd_handler+0x12a>
    c2e2:	687b      	ldr	r3, [r7, #4]
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	2b01      	cmp	r3, #1
    c2e8:	d12f      	bne.n	c34a <cmd_handler+0x12a>
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	3301      	adds	r3, #1
    c2ee:	781b      	ldrb	r3, [r3, #0]
    c2f0:	2b1e      	cmp	r3, #30
    c2f2:	d12a      	bne.n	c34a <cmd_handler+0x12a>
    c2f4:	687b      	ldr	r3, [r7, #4]
    c2f6:	3302      	adds	r3, #2
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	2b20      	cmp	r3, #32
    c2fc:	d125      	bne.n	c34a <cmd_handler+0x12a>
    {
        switch(pBuffer[6])
    c2fe:	687b      	ldr	r3, [r7, #4]
    c300:	3306      	adds	r3, #6
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	2b08      	cmp	r3, #8
    c306:	d00c      	beq.n	c322 <cmd_handler+0x102>
    c308:	2b09      	cmp	r3, #9
    c30a:	d112      	bne.n	c332 <cmd_handler+0x112>
        {
            case 0x09:      // constant transmission mode
            {
                am_hal_ble_set_constant_transmission(g_pvBLEHandle,true); // set constant transmission
    c30c:	4b54      	ldr	r3, [pc, #336]	; (c460 <cmd_handler+0x240>)
    c30e:	681b      	ldr	r3, [r3, #0]
    c310:	2101      	movs	r1, #1
    c312:	4618      	mov	r0, r3
    c314:	f002 fb9a 	bl	ea4c <am_hal_ble_set_constant_transmission>
                pBuffer[6]=0x00;
    c318:	687b      	ldr	r3, [r7, #4]
    c31a:	3306      	adds	r3, #6
    c31c:	2200      	movs	r2, #0
    c31e:	701a      	strb	r2, [r3, #0]
            }	
            break;
    c320:	e013      	b.n	c34a <cmd_handler+0x12a>
            case 0x08:      // carrier wave mode
            {
                carrier_wave_mode=1;  //set  carrier wave mode
    c322:	4b4e      	ldr	r3, [pc, #312]	; (c45c <cmd_handler+0x23c>)
    c324:	2201      	movs	r2, #1
    c326:	701a      	strb	r2, [r3, #0]
                pBuffer[6]=0x00;
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	3306      	adds	r3, #6
    c32c:	2200      	movs	r2, #0
    c32e:	701a      	strb	r2, [r3, #0]
            } 			
            break;
    c330:	e00b      	b.n	c34a <cmd_handler+0x12a>
            default:     //other mode
            {
                am_hal_ble_transmitter_control(g_pvBLEHandle,0); //disable carrier_wave_mode
    c332:	4b4b      	ldr	r3, [pc, #300]	; (c460 <cmd_handler+0x240>)
    c334:	681b      	ldr	r3, [r3, #0]
    c336:	2100      	movs	r1, #0
    c338:	4618      	mov	r0, r3
    c33a:	f002 fb39 	bl	e9b0 <am_hal_ble_transmitter_control>
                am_hal_ble_set_constant_transmission(g_pvBLEHandle,false); //disable constant transmission mode
    c33e:	4b48      	ldr	r3, [pc, #288]	; (c460 <cmd_handler+0x240>)
    c340:	681b      	ldr	r3, [r3, #0]
    c342:	2100      	movs	r1, #0
    c344:	4618      	mov	r0, r3
    c346:	f002 fb81 	bl	ea4c <am_hal_ble_set_constant_transmission>


  //
  // Check the parameters and the UART command format.
  //
  if ( (NULL != pBuffer) && (len == 5) && (pBuffer[0] == 'A') && (pBuffer[1] == 'M') )
    c34a:	687b      	ldr	r3, [r7, #4]
    c34c:	2b00      	cmp	r3, #0
    c34e:	d07a      	beq.n	c446 <cmd_handler+0x226>
    c350:	683b      	ldr	r3, [r7, #0]
    c352:	2b05      	cmp	r3, #5
    c354:	d177      	bne.n	c446 <cmd_handler+0x226>
    c356:	687b      	ldr	r3, [r7, #4]
    c358:	781b      	ldrb	r3, [r3, #0]
    c35a:	2b41      	cmp	r3, #65	; 0x41
    c35c:	d173      	bne.n	c446 <cmd_handler+0x226>
    c35e:	687b      	ldr	r3, [r7, #4]
    c360:	3301      	adds	r3, #1
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	2b4d      	cmp	r3, #77	; 0x4d
    c366:	d16e      	bne.n	c446 <cmd_handler+0x226>
  {
    //
    // Compute the value.
    //
    value = pBuffer[3] << 8 | pBuffer[4];
    c368:	687b      	ldr	r3, [r7, #4]
    c36a:	3303      	adds	r3, #3
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	021b      	lsls	r3, r3, #8
    c370:	b21a      	sxth	r2, r3
    c372:	687b      	ldr	r3, [r7, #4]
    c374:	3304      	adds	r3, #4
    c376:	781b      	ldrb	r3, [r3, #0]
    c378:	b21b      	sxth	r3, r3
    c37a:	4313      	orrs	r3, r2
    c37c:	b21b      	sxth	r3, r3
    c37e:	817b      	strh	r3, [r7, #10]
    
    //
    // Interpret the Command 'Y'
    //
    switch (pBuffer[2])
    c380:	687b      	ldr	r3, [r7, #4]
    c382:	3302      	adds	r3, #2
    c384:	781b      	ldrb	r3, [r3, #0]
    c386:	3b30      	subs	r3, #48	; 0x30
    c388:	2b04      	cmp	r3, #4
    c38a:	d854      	bhi.n	c436 <cmd_handler+0x216>
    c38c:	a201      	add	r2, pc, #4	; (adr r2, c394 <cmd_handler+0x174>)
    c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c392:	bf00      	nop
    c394:	0000c3a9 	.word	0x0000c3a9
    c398:	0000c3d9 	.word	0x0000c3d9
    c39c:	0000c3ef 	.word	0x0000c3ef
    c3a0:	0000c407 	.word	0x0000c407
    c3a4:	0000c41f 	.word	0x0000c41f
    {
    case '0':   // handle the tx power setting command.
      
      {
        // Check the TX power range value.
        if ((value > 0) && (value <= 0xF))
    c3a8:	897b      	ldrh	r3, [r7, #10]
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d00e      	beq.n	c3cc <cmd_handler+0x1ac>
    c3ae:	897b      	ldrh	r3, [r7, #10]
    c3b0:	2b0f      	cmp	r3, #15
    c3b2:	d80b      	bhi.n	c3cc <cmd_handler+0x1ac>
        {
          am_hal_ble_tx_power_set(g_pvBLEHandle, (uint8_t)value);
    c3b4:	4b2a      	ldr	r3, [pc, #168]	; (c460 <cmd_handler+0x240>)
    c3b6:	681b      	ldr	r3, [r3, #0]
    c3b8:	897a      	ldrh	r2, [r7, #10]
    c3ba:	b2d2      	uxtb	r2, r2
    c3bc:	4611      	mov	r1, r2
    c3be:	4618      	mov	r0, r3
    c3c0:	f002 fade 	bl	e980 <am_hal_ble_tx_power_set>
#ifndef AM_DEBUG_BLE_TIMING
          am_util_stdio_printf("TX Power Setting Command OK\n");
    c3c4:	4827      	ldr	r0, [pc, #156]	; (c464 <cmd_handler+0x244>)
    c3c6:	f001 f92b 	bl	d620 <am_util_stdio_printf>
#ifndef AM_DEBUG_BLE_TIMING
          am_util_stdio_printf("Invalid TX Power Value %d\n", value);
#endif
        }
      }
      break;
    c3ca:	e038      	b.n	c43e <cmd_handler+0x21e>
          am_util_stdio_printf("Invalid TX Power Value %d\n", value);
    c3cc:	897b      	ldrh	r3, [r7, #10]
    c3ce:	4619      	mov	r1, r3
    c3d0:	4825      	ldr	r0, [pc, #148]	; (c468 <cmd_handler+0x248>)
    c3d2:	f001 f925 	bl	d620 <am_util_stdio_printf>
      break;
    c3d6:	e032      	b.n	c43e <cmd_handler+0x21e>
    case '1':   // handle the 32MHz crystal trim setting command.
      {
        am_hal_ble_crystal_trim_set(g_pvBLEHandle, value);
    c3d8:	4b21      	ldr	r3, [pc, #132]	; (c460 <cmd_handler+0x240>)
    c3da:	681b      	ldr	r3, [r3, #0]
    c3dc:	897a      	ldrh	r2, [r7, #10]
    c3de:	4611      	mov	r1, r2
    c3e0:	4618      	mov	r0, r3
    c3e2:	f002 fa13 	bl	e80c <am_hal_ble_crystal_trim_set>
#ifndef AM_DEBUG_BLE_TIMING
        am_util_stdio_printf("32MHz Crystal Trim Command OK\n");
    c3e6:	4821      	ldr	r0, [pc, #132]	; (c46c <cmd_handler+0x24c>)
    c3e8:	f001 f91a 	bl	d620 <am_util_stdio_printf>
#endif
      }
      break;
    c3ec:	e027      	b.n	c43e <cmd_handler+0x21e>
    case '2':   // handle modulation index setting command.
      {
        am_hal_ble_transmitter_modex_set(g_pvBLEHandle, (uint8_t)value);
    c3ee:	4b1c      	ldr	r3, [pc, #112]	; (c460 <cmd_handler+0x240>)
    c3f0:	681b      	ldr	r3, [r3, #0]
    c3f2:	897a      	ldrh	r2, [r7, #10]
    c3f4:	b2d2      	uxtb	r2, r2
    c3f6:	4611      	mov	r1, r2
    c3f8:	4618      	mov	r0, r3
    c3fa:	f002 fa45 	bl	e888 <am_hal_ble_transmitter_modex_set>
#ifndef AM_DEBUG_BLE_TIMING
        am_util_stdio_printf("Modulation Index Command OK\n");
    c3fe:	481c      	ldr	r0, [pc, #112]	; (c470 <cmd_handler+0x250>)
    c400:	f001 f90e 	bl	d620 <am_util_stdio_printf>
#endif
      }
      break;
    c404:	e01b      	b.n	c43e <cmd_handler+0x21e>
    case '3':  // handle the carrier wave output command
      {
        am_hal_ble_transmitter_control_ex(g_pvBLEHandle, (uint8_t)value);
    c406:	4b16      	ldr	r3, [pc, #88]	; (c460 <cmd_handler+0x240>)
    c408:	681b      	ldr	r3, [r3, #0]
    c40a:	897a      	ldrh	r2, [r7, #10]
    c40c:	b2d2      	uxtb	r2, r2
    c40e:	4611      	mov	r1, r2
    c410:	4618      	mov	r0, r3
    c412:	f002 fccb 	bl	edac <am_hal_ble_transmitter_control_ex>
#ifndef AM_DEBUG_BLE_TIMING
        am_util_stdio_printf("generate carrier wave OK\n");
    c416:	4817      	ldr	r0, [pc, #92]	; (c474 <cmd_handler+0x254>)
    c418:	f001 f902 	bl	d620 <am_util_stdio_printf>
#endif
      }
      break;
    c41c:	e00f      	b.n	c43e <cmd_handler+0x21e>
      case '4':  // handle the continually transmitting output command
      {
        am_hal_ble_set_constant_transmission_ex(g_pvBLEHandle, (uint8_t)value);
    c41e:	4b10      	ldr	r3, [pc, #64]	; (c460 <cmd_handler+0x240>)
    c420:	681b      	ldr	r3, [r3, #0]
    c422:	897a      	ldrh	r2, [r7, #10]
    c424:	b2d2      	uxtb	r2, r2
    c426:	4611      	mov	r1, r2
    c428:	4618      	mov	r0, r3
    c42a:	f002 fc07 	bl	ec3c <am_hal_ble_set_constant_transmission_ex>
#ifndef AM_DEBUG_BLE_TIMING
        am_util_stdio_printf("generate constant moderated signal wave OK\n");
    c42e:	4812      	ldr	r0, [pc, #72]	; (c478 <cmd_handler+0x258>)
    c430:	f001 f8f6 	bl	d620 <am_util_stdio_printf>
#endif
      }
      break;
    c434:	e003      	b.n	c43e <cmd_handler+0x21e>
    default:
      {
#ifndef AM_DEBUG_BLE_TIMING
        am_util_stdio_printf("Invalid UART Special Command %s\r\n", pBuffer);
    c436:	6879      	ldr	r1, [r7, #4]
    c438:	4810      	ldr	r0, [pc, #64]	; (c47c <cmd_handler+0x25c>)
    c43a:	f001 f8f1 	bl	d620 <am_util_stdio_printf>
#endif
      }
    }
    g_bCmdProcessedFlag = true;
    c43e:	4b10      	ldr	r3, [pc, #64]	; (c480 <cmd_handler+0x260>)
    c440:	2201      	movs	r2, #1
    c442:	701a      	strb	r2, [r3, #0]
    c444:	e002      	b.n	c44c <cmd_handler+0x22c>
  }
  else
  {
    g_bCmdProcessedFlag = false;
    c446:	4b0e      	ldr	r3, [pc, #56]	; (c480 <cmd_handler+0x260>)
    c448:	2200      	movs	r2, #0
    c44a:	701a      	strb	r2, [r3, #0]
  }
}
    c44c:	bf00      	nop
    c44e:	3710      	adds	r7, #16
    c450:	46bd      	mov	sp, r7
    c452:	bd80      	pop	{r7, pc}
    c454:	000119e0 	.word	0x000119e0
    c458:	000119e8 	.word	0x000119e8
    c45c:	10001b46 	.word	0x10001b46
    c460:	10002c54 	.word	0x10002c54
    c464:	000119ec 	.word	0x000119ec
    c468:	00011a0c 	.word	0x00011a0c
    c46c:	00011a28 	.word	0x00011a28
    c470:	00011a48 	.word	0x00011a48
    c474:	00011a68 	.word	0x00011a68
    c478:	00011a84 	.word	0x00011a84
    c47c:	00011ab0 	.word	0x00011ab0
    c480:	10001b45 	.word	0x10001b45

0000c484 <fix_trans_mode>:


//setting transmission mode and fix channel 1 bug in DTM mode
static void fix_trans_mode(uint8_t *recvdata)   
{
    c484:	b580      	push	{r7, lr}
    c486:	b082      	sub	sp, #8
    c488:	af00      	add	r7, sp, #0
    c48a:	6078      	str	r0, [r7, #4]
    if(carrier_wave_mode == 1)
    c48c:	4b0e      	ldr	r3, [pc, #56]	; (c4c8 <fix_trans_mode+0x44>)
    c48e:	781b      	ldrb	r3, [r3, #0]
    c490:	2b01      	cmp	r3, #1
    c492:	d106      	bne.n	c4a2 <fix_trans_mode+0x1e>
    {
        am_hal_ble_transmitter_control(g_pvBLEHandle,1);  //set carrier wave mode
    c494:	4b0d      	ldr	r3, [pc, #52]	; (c4cc <fix_trans_mode+0x48>)
    c496:	681b      	ldr	r3, [r3, #0]
    c498:	2101      	movs	r1, #1
    c49a:	4618      	mov	r0, r3
    c49c:	f002 fa88 	bl	e9b0 <am_hal_ble_transmitter_control>
      if ((recvdata[4]==0x03) && (recvdata[5] == 0x0c))
      {
          am_hal_ble_init_rf_channel(g_pvBLEHandle);    //fix channel 1 bug
      }
    }
}
    c4a0:	e00e      	b.n	c4c0 <fix_trans_mode+0x3c>
      if ((recvdata[4]==0x03) && (recvdata[5] == 0x0c))
    c4a2:	687b      	ldr	r3, [r7, #4]
    c4a4:	3304      	adds	r3, #4
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	2b03      	cmp	r3, #3
    c4aa:	d109      	bne.n	c4c0 <fix_trans_mode+0x3c>
    c4ac:	687b      	ldr	r3, [r7, #4]
    c4ae:	3305      	adds	r3, #5
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	2b0c      	cmp	r3, #12
    c4b4:	d104      	bne.n	c4c0 <fix_trans_mode+0x3c>
          am_hal_ble_init_rf_channel(g_pvBLEHandle);    //fix channel 1 bug
    c4b6:	4b05      	ldr	r3, [pc, #20]	; (c4cc <fix_trans_mode+0x48>)
    c4b8:	681b      	ldr	r3, [r3, #0]
    c4ba:	4618      	mov	r0, r3
    c4bc:	f002 fb14 	bl	eae8 <am_hal_ble_init_rf_channel>
}
    c4c0:	bf00      	nop
    c4c2:	3708      	adds	r7, #8
    c4c4:	46bd      	mov	sp, r7
    c4c6:	bd80      	pop	{r7, pc}
    c4c8:	10001b46 	.word	0x10001b46
    c4cc:	10002c54 	.word	0x10002c54

0000c4d0 <am_uart_isr>:
#if UART_HCI_BRIDGE == 0
void am_uart_isr(void)
#else
void am_uart1_isr(void)
#endif
{
    c4d0:	b580      	push	{r7, lr}
    c4d2:	b088      	sub	sp, #32
    c4d4:	af00      	add	r7, sp, #0
  uint32_t ui32Status;
  
  //
  // Read the masked interrupt status from the UART.
  //
  am_hal_uart_interrupt_status_get(g_pvUART, &ui32Status, true);
    c4d6:	4b25      	ldr	r3, [pc, #148]	; (c56c <am_uart_isr+0x9c>)
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	f107 011c 	add.w	r1, r7, #28
    c4de:	2201      	movs	r2, #1
    c4e0:	4618      	mov	r0, r3
    c4e2:	f005 f83f 	bl	11564 <am_hal_uart_interrupt_status_get>
  am_hal_uart_interrupt_clear(g_pvUART, ui32Status);
    c4e6:	4b21      	ldr	r3, [pc, #132]	; (c56c <am_uart_isr+0x9c>)
    c4e8:	681b      	ldr	r3, [r3, #0]
    c4ea:	69fa      	ldr	r2, [r7, #28]
    c4ec:	4611      	mov	r1, r2
    c4ee:	4618      	mov	r0, r3
    c4f0:	f005 f826 	bl	11540 <am_hal_uart_interrupt_clear>
  am_hal_uart_interrupt_service(g_pvUART, ui32Status, 0);
    c4f4:	4b1d      	ldr	r3, [pc, #116]	; (c56c <am_uart_isr+0x9c>)
    c4f6:	681b      	ldr	r3, [r3, #0]
    c4f8:	69f9      	ldr	r1, [r7, #28]
    c4fa:	2200      	movs	r2, #0
    c4fc:	4618      	mov	r0, r3
    c4fe:	f004 ff25 	bl	1134c <am_hal_uart_interrupt_service>
  
  //
  // If there's an RX interrupt, handle it in a way that preserves the
  // timeout interrupt on gaps between packets.
  //
  if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_RX))
    c502:	69fb      	ldr	r3, [r7, #28]
    c504:	f003 0350 	and.w	r3, r3, #80	; 0x50
    c508:	2b00      	cmp	r3, #0
    c50a:	d02b      	beq.n	c564 <am_uart_isr+0x94>
  {
    uint32_t ui32BytesRead;
    
    am_hal_uart_transfer_t sRead =
    c50c:	2301      	movs	r3, #1
    c50e:	607b      	str	r3, [r7, #4]
    {
      .ui32Direction = AM_HAL_UART_READ,
      .pui8Data = (uint8_t *) &(g_psWriteData.bytes[g_ui32UARTRxIndex]),
    c510:	4b17      	ldr	r3, [pc, #92]	; (c570 <am_uart_isr+0xa0>)
    c512:	681b      	ldr	r3, [r3, #0]
    c514:	4a17      	ldr	r2, [pc, #92]	; (c574 <am_uart_isr+0xa4>)
    c516:	4413      	add	r3, r2
    am_hal_uart_transfer_t sRead =
    c518:	60bb      	str	r3, [r7, #8]
    c51a:	2317      	movs	r3, #23
    c51c:	60fb      	str	r3, [r7, #12]
    c51e:	2300      	movs	r3, #0
    c520:	613b      	str	r3, [r7, #16]
    c522:	f107 0318 	add.w	r3, r7, #24
    c526:	617b      	str	r3, [r7, #20]
      .ui32NumBytes = 23,
      .ui32TimeoutMs = 0,
      .pui32BytesTransferred = &ui32BytesRead,
    };
    
    am_hal_uart_transfer(g_pvUART, &sRead);
    c528:	4b10      	ldr	r3, [pc, #64]	; (c56c <am_uart_isr+0x9c>)
    c52a:	681b      	ldr	r3, [r3, #0]
    c52c:	1d3a      	adds	r2, r7, #4
    c52e:	4611      	mov	r1, r2
    c530:	4618      	mov	r0, r3
    c532:	f004 fa87 	bl	10a44 <am_hal_uart_transfer>
    
    g_ui32UARTRxIndex += ui32BytesRead;
    c536:	4b0e      	ldr	r3, [pc, #56]	; (c570 <am_uart_isr+0xa0>)
    c538:	681a      	ldr	r2, [r3, #0]
    c53a:	69bb      	ldr	r3, [r7, #24]
    c53c:	4413      	add	r3, r2
    c53e:	4a0c      	ldr	r2, [pc, #48]	; (c570 <am_uart_isr+0xa0>)
    c540:	6013      	str	r3, [r2, #0]
    
    //
    // If there is a TMOUT interrupt, assume we have a compete packet, and
    // send it over SPI.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT))
    c542:	69fb      	ldr	r3, [r7, #28]
    c544:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c548:	2b00      	cmp	r3, #0
    c54a:	d00b      	beq.n	c564 <am_uart_isr+0x94>
    {
#if AM_CMSIS_REGS
      NVIC_DisableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c54c:	200f      	movs	r0, #15
    c54e:	f7ff fe45 	bl	c1dc <__NVIC_DisableIRQ>
#else // AM_CMSIS_REGS
      am_hal_interrupt_disable(AM_HAL_INTERRUPT_UART + UART_HCI_BRIDGE);
#endif // AM_CMSIS_REGS
      cmd_handler(g_psWriteData.bytes, g_ui32UARTRxIndex);
    c552:	4b07      	ldr	r3, [pc, #28]	; (c570 <am_uart_isr+0xa0>)
    c554:	681b      	ldr	r3, [r3, #0]
    c556:	4619      	mov	r1, r3
    c558:	4806      	ldr	r0, [pc, #24]	; (c574 <am_uart_isr+0xa4>)
    c55a:	f7ff fe61 	bl	c220 <cmd_handler>
      g_bRxTimeoutFlag = true;
    c55e:	4b06      	ldr	r3, [pc, #24]	; (c578 <am_uart_isr+0xa8>)
    c560:	2201      	movs	r2, #1
    c562:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c564:	bf00      	nop
    c566:	3720      	adds	r7, #32
    c568:	46bd      	mov	sp, r7
    c56a:	bd80      	pop	{r7, pc}
    c56c:	10002c50 	.word	0x10002c50
    c570:	10001b40 	.word	0x10001b40
    c574:	10002850 	.word	0x10002850
    c578:	10001b44 	.word	0x10001b44

0000c57c <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c57c:	b5b0      	push	{r4, r5, r7, lr}
    c57e:	b092      	sub	sp, #72	; 0x48
    c580:	af00      	add	r7, sp, #0
  uint32_t ui32IntStatus;
  
  //
  // Default setup.
  //
  am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c582:	2100      	movs	r1, #0
    c584:	2000      	movs	r0, #0
    c586:	f003 fbc1 	bl	fd0c <am_hal_clkgen_control>
  am_bsp_low_power_init();
    c58a:	f001 f867 	bl	d65c <am_bsp_low_power_init>
#endif // AM_APOLLO3_GPIO
#else  // !AM_DEBUG_BLE_TIMING
  //
  // Enable the ITM
  //
  am_bsp_itm_printf_enable();
    c58e:	f001 f87f 	bl	d690 <am_bsp_itm_printf_enable>
  am_util_stdio_printf("Apollo3 UART to SPI Bridge\n");
    c592:	4867      	ldr	r0, [pc, #412]	; (c730 <main+0x1b4>)
    c594:	f001 f844 	bl	d620 <am_util_stdio_printf>
#endif // AM_DEBUG_BLE_TIMING
  
  //
  // Start the BLE interface.
  //
  am_hal_ble_initialize(0, &g_pvBLEHandle);
    c598:	4966      	ldr	r1, [pc, #408]	; (c734 <main+0x1b8>)
    c59a:	2000      	movs	r0, #0
    c59c:	f001 fc1a 	bl	ddd4 <am_hal_ble_initialize>
  am_hal_ble_power_control(g_pvBLEHandle, AM_HAL_BLE_POWER_ACTIVE);
    c5a0:	4b64      	ldr	r3, [pc, #400]	; (c734 <main+0x1b8>)
    c5a2:	681b      	ldr	r3, [r3, #0]
    c5a4:	2100      	movs	r1, #0
    c5a6:	4618      	mov	r0, r3
    c5a8:	f001 fc88 	bl	debc <am_hal_ble_power_control>
  am_hal_ble_config(g_pvBLEHandle, &am_hal_ble_default_config);
    c5ac:	4b61      	ldr	r3, [pc, #388]	; (c734 <main+0x1b8>)
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	4961      	ldr	r1, [pc, #388]	; (c738 <main+0x1bc>)
    c5b2:	4618      	mov	r0, r3
    c5b4:	f001 fc46 	bl	de44 <am_hal_ble_config>

  /*delay 1s for 32768Hz clock stability*/
  am_util_delay_ms(1000);
    c5b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c5bc:	f000 f90e 	bl	c7dc <am_util_delay_ms>

  am_hal_ble_default_copy_patch_apply(g_pvBLEHandle);
    c5c0:	4b5c      	ldr	r3, [pc, #368]	; (c734 <main+0x1b8>)
    c5c2:	681b      	ldr	r3, [r3, #0]
    c5c4:	4618      	mov	r0, r3
    c5c6:	f003 fb11 	bl	fbec <am_hal_ble_default_copy_patch_apply>

  am_hal_ble_default_trim_set_ramcode(g_pvBLEHandle);
    c5ca:	4b5a      	ldr	r3, [pc, #360]	; (c734 <main+0x1b8>)
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	4618      	mov	r0, r3
    c5d0:	f001 ff22 	bl	e418 <am_hal_ble_default_trim_set_ramcode>
  am_hal_ble_default_patch_apply(g_pvBLEHandle);
    c5d4:	4b57      	ldr	r3, [pc, #348]	; (c734 <main+0x1b8>)
    c5d6:	681b      	ldr	r3, [r3, #0]
    c5d8:	4618      	mov	r0, r3
    c5da:	f003 fa85 	bl	fae8 <am_hal_ble_default_patch_apply>
  am_hal_ble_patch_complete(g_pvBLEHandle);
    c5de:	4b55      	ldr	r3, [pc, #340]	; (c734 <main+0x1b8>)
    c5e0:	681b      	ldr	r3, [r3, #0]
    c5e2:	4618      	mov	r0, r3
    c5e4:	f002 fd00 	bl	efe8 <am_hal_ble_patch_complete>
  
  //
  // Setting the TX power to the highest power value.
  //
  am_hal_ble_tx_power_set(g_pvBLEHandle, 0xf);
    c5e8:	4b52      	ldr	r3, [pc, #328]	; (c734 <main+0x1b8>)
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	210f      	movs	r1, #15
    c5ee:	4618      	mov	r0, r3
    c5f0:	f002 f9c6 	bl	e980 <am_hal_ble_tx_power_set>
  // if do the BQB /SRRC /FCC / CE test , please enable here 
  //am_hal_ble_BQB_test_init(g_pvBLEHandle, true);

  
#if AM_CMSIS_REGS
  am_hal_ble_int_clear(g_pvBLEHandle, BLEIF_INTSTAT_BLECIRQ_Msk);
    c5f4:	4b4f      	ldr	r3, [pc, #316]	; (c734 <main+0x1b8>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	2180      	movs	r1, #128	; 0x80
    c5fa:	4618      	mov	r0, r3
    c5fc:	f003 fb74 	bl	fce8 <am_hal_ble_int_clear>
#endif // AM_CMSIS_REGS
  
  //
  // Start the UART.
  //
  am_hal_uart_config_t sUartConfig =
    c600:	4b4e      	ldr	r3, [pc, #312]	; (c73c <main+0x1c0>)
    c602:	f107 0414 	add.w	r4, r7, #20
    c606:	461d      	mov	r5, r3
    c608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c60a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c60c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c60e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c610:	e895 0003 	ldmia.w	r5, {r0, r1}
    c614:	e884 0003 	stmia.w	r4, {r0, r1}
    .ui32TxBufferSize = sizeof(g_pui8UARTTXBuffer),
    .pui8RxBuffer = 0,
    .ui32RxBufferSize = 0,
  };
  
  am_hal_uart_initialize(UART_HCI_BRIDGE, &g_pvUART);
    c618:	4949      	ldr	r1, [pc, #292]	; (c740 <main+0x1c4>)
    c61a:	2000      	movs	r0, #0
    c61c:	f004 f88e 	bl	1073c <am_hal_uart_initialize>
  am_hal_uart_power_control(g_pvUART, AM_HAL_SYSCTRL_WAKE, false);
    c620:	4b47      	ldr	r3, [pc, #284]	; (c740 <main+0x1c4>)
    c622:	681b      	ldr	r3, [r3, #0]
    c624:	2200      	movs	r2, #0
    c626:	2100      	movs	r1, #0
    c628:	4618      	mov	r0, r3
    c62a:	f004 f8af 	bl	1078c <am_hal_uart_power_control>
  am_hal_uart_configure(g_pvUART, &sUartConfig);
    c62e:	4b44      	ldr	r3, [pc, #272]	; (c740 <main+0x1c4>)
    c630:	681b      	ldr	r3, [r3, #0]
    c632:	f107 0214 	add.w	r2, r7, #20
    c636:	4611      	mov	r1, r2
    c638:	4618      	mov	r0, r3
    c63a:	f004 f919 	bl	10870 <am_hal_uart_configure>
  am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c63e:	4b41      	ldr	r3, [pc, #260]	; (c744 <main+0x1c8>)
    c640:	6819      	ldr	r1, [r3, #0]
    c642:	2027      	movs	r0, #39	; 0x27
    c644:	f003 fd0c 	bl	10060 <am_hal_gpio_pinconfig>
  am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c648:	4b3f      	ldr	r3, [pc, #252]	; (c748 <main+0x1cc>)
    c64a:	6819      	ldr	r1, [r3, #0]
    c64c:	2028      	movs	r0, #40	; 0x28
    c64e:	f003 fd07 	bl	10060 <am_hal_gpio_pinconfig>
  //
  // Make sure to enable the interrupts for RX, since the HAL doesn't already
  // know we intend to use them.
  //
#if AM_CMSIS_REGS
  NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c652:	200f      	movs	r0, #15
    c654:	f7ff fda4 	bl	c1a0 <__NVIC_EnableIRQ>
#else // AM_CMSIS_REGS
  am_hal_interrupt_enable(AM_HAL_INTERRUPT_UART + UART_HCI_BRIDGE);
#endif // AM_CMSIS_REGS
  am_hal_uart_interrupt_enable(g_pvUART, (AM_HAL_UART_INT_RX |
    c658:	4b39      	ldr	r3, [pc, #228]	; (c740 <main+0x1c4>)
    c65a:	681b      	ldr	r3, [r3, #0]
    c65c:	2150      	movs	r1, #80	; 0x50
    c65e:	4618      	mov	r0, r3
    c660:	f004 ff5a 	bl	11518 <am_hal_uart_interrupt_enable>
                                          AM_HAL_UART_INT_RX_TMOUT));
  
  am_hal_interrupt_master_enable();
    c664:	f003 fe3e 	bl	102e4 <am_hal_interrupt_master_enable>
  while (1)
  {
    //
    // Check for incoming traffic from either the UART or the BLE interface.
    //
    ui32IntStatus = am_hal_ble_int_status(g_pvBLEHandle, false);
    c668:	4b32      	ldr	r3, [pc, #200]	; (c734 <main+0x1b8>)
    c66a:	681b      	ldr	r3, [r3, #0]
    c66c:	2100      	movs	r1, #0
    c66e:	4618      	mov	r0, r3
    c670:	f003 fb2c 	bl	fccc <am_hal_ble_int_status>
    c674:	6478      	str	r0, [r7, #68]	; 0x44
    am_hal_ble_int_clear(g_pvBLEHandle, ui32IntStatus);
    c676:	4b2f      	ldr	r3, [pc, #188]	; (c734 <main+0x1b8>)
    c678:	681b      	ldr	r3, [r3, #0]
    c67a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    c67c:	4618      	mov	r0, r3
    c67e:	f003 fb33 	bl	fce8 <am_hal_ble_int_clear>
    
#if AM_CMSIS_REGS
    if ( ui32IntStatus & BLEIF_INTSTAT_BLECIRQ_Msk )
    c682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c684:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c688:	2b00      	cmp	r3, #0
    c68a:	d032      	beq.n	c6f2 <main+0x176>
#endif // AM_CMSIS_REGS
      {
        //
        // If we have incoming BLE traffic, read it into a buffer.
        //
        ui32Status = am_hal_ble_blocking_hci_read(g_pvBLEHandle,
    c68c:	4b29      	ldr	r3, [pc, #164]	; (c734 <main+0x1b8>)
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    c694:	492d      	ldr	r1, [pc, #180]	; (c74c <main+0x1d0>)
    c696:	4618      	mov	r0, r3
    c698:	f001 ff0c 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    c69c:	6438      	str	r0, [r7, #64]	; 0x40
        
        //
        // Clocking workaround for the BLE IRQ signal.
        //
#if AM_CMSIS_REGS
        BLEIF->BLEDBG_b.IOCLKON = 1;
    c69e:	4a2c      	ldr	r2, [pc, #176]	; (c750 <main+0x1d4>)
    c6a0:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    c6a4:	f043 0302 	orr.w	r3, r3, #2
    c6a8:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
#endif // AM_CMSIS_REGS
        
        //
        // If the read was successful, echo it back out over the UART.
        //
        if ( ui32Status == AM_HAL_STATUS_SUCCESS )
    c6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d11b      	bne.n	c6ea <main+0x16e>
        {
          if (ui32NumChars > 0)
    c6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d0d7      	beq.n	c668 <main+0xec>
          {
            am_hal_uart_transfer_t sWrite =
    c6b8:	2300      	movs	r3, #0
    c6ba:	603b      	str	r3, [r7, #0]
    c6bc:	4b23      	ldr	r3, [pc, #140]	; (c74c <main+0x1d0>)
    c6be:	607b      	str	r3, [r7, #4]
    c6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6c2:	60bb      	str	r3, [r7, #8]
    c6c4:	f04f 33ff 	mov.w	r3, #4294967295
    c6c8:	60fb      	str	r3, [r7, #12]
    c6ca:	2300      	movs	r3, #0
    c6cc:	613b      	str	r3, [r7, #16]
              .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
              .pui32BytesTransferred = 0,
            };
            
            //please enable here for transmission mode set 
            fix_trans_mode(g_psReadData.bytes); 
    c6ce:	481f      	ldr	r0, [pc, #124]	; (c74c <main+0x1d0>)
    c6d0:	f7ff fed8 	bl	c484 <fix_trans_mode>
            //then send the response to UART

            am_hal_uart_transfer(g_pvUART, &sWrite);
    c6d4:	4b1a      	ldr	r3, [pc, #104]	; (c740 <main+0x1c4>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	463a      	mov	r2, r7
    c6da:	4611      	mov	r1, r2
    c6dc:	4618      	mov	r0, r3
    c6de:	f004 f9b1 	bl	10a44 <am_hal_uart_transfer>
            am_util_delay_ms(1);
    c6e2:	2001      	movs	r0, #1
    c6e4:	f000 f87a 	bl	c7dc <am_util_delay_ms>
    c6e8:	e7be      	b.n	c668 <main+0xec>
        else
        {
          //
          // Handle the error here.
          //
          am_util_stdio_printf("Read from BLE Controller failed\n");
    c6ea:	481a      	ldr	r0, [pc, #104]	; (c754 <main+0x1d8>)
    c6ec:	f000 ff98 	bl	d620 <am_util_stdio_printf>
          while(1);
    c6f0:	e7fe      	b.n	c6f0 <main+0x174>
        }
      }
      else if (g_bRxTimeoutFlag)
    c6f2:	4b19      	ldr	r3, [pc, #100]	; (c758 <main+0x1dc>)
    c6f4:	781b      	ldrb	r3, [r3, #0]
    c6f6:	b2db      	uxtb	r3, r3
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d0b5      	beq.n	c668 <main+0xec>
        //
        // If we have incoming UART traffic, the interrupt handler will
        // read it out for us, but we will need to echo it back out to the
        // radio manually.
        //
        if (false == g_bCmdProcessedFlag)
    c6fc:	4b17      	ldr	r3, [pc, #92]	; (c75c <main+0x1e0>)
    c6fe:	781b      	ldrb	r3, [r3, #0]
    c700:	b2db      	uxtb	r3, r3
    c702:	f083 0301 	eor.w	r3, r3, #1
    c706:	b2db      	uxtb	r3, r3
    c708:	2b00      	cmp	r3, #0
    c70a:	d007      	beq.n	c71c <main+0x1a0>
        {
          am_hal_ble_blocking_hci_write(g_pvBLEHandle, AM_HAL_BLE_RAW,
    c70c:	4b09      	ldr	r3, [pc, #36]	; (c734 <main+0x1b8>)
    c70e:	6818      	ldr	r0, [r3, #0]
    c710:	4b13      	ldr	r3, [pc, #76]	; (c760 <main+0x1e4>)
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	4a13      	ldr	r2, [pc, #76]	; (c764 <main+0x1e8>)
    c716:	2100      	movs	r1, #0
    c718:	f001 fe9c 	bl	e454 <am_hal_ble_blocking_hci_write>
                                        g_psWriteData.words,
                                        g_ui32UARTRxIndex);
        }
        
        g_ui32UARTRxIndex = 0;
    c71c:	4b10      	ldr	r3, [pc, #64]	; (c760 <main+0x1e4>)
    c71e:	2200      	movs	r2, #0
    c720:	601a      	str	r2, [r3, #0]
        g_bRxTimeoutFlag = false;
    c722:	4b0d      	ldr	r3, [pc, #52]	; (c758 <main+0x1dc>)
    c724:	2200      	movs	r2, #0
    c726:	701a      	strb	r2, [r3, #0]
#if AM_CMSIS_REGS
        NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c728:	200f      	movs	r0, #15
    c72a:	f7ff fd39 	bl	c1a0 <__NVIC_EnableIRQ>
    ui32IntStatus = am_hal_ble_int_status(g_pvBLEHandle, false);
    c72e:	e79b      	b.n	c668 <main+0xec>
    c730:	00011ad4 	.word	0x00011ad4
    c734:	10002c54 	.word	0x10002c54
    c738:	00011b48 	.word	0x00011b48
    c73c:	00011b14 	.word	0x00011b14
    c740:	10002c50 	.word	0x10002c50
    c744:	00011b40 	.word	0x00011b40
    c748:	00011b3c 	.word	0x00011b3c
    c74c:	10002450 	.word	0x10002450
    c750:	5000c000 	.word	0x5000c000
    c754:	00011af0 	.word	0x00011af0
    c758:	10001b44 	.word	0x10001b44
    c75c:	10001b45 	.word	0x10001b45
    c760:	10001b40 	.word	0x10001b40
    c764:	10002850 	.word	0x10002850

0000c768 <Reset_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    c768:	4811      	ldr	r0, [pc, #68]	; (c7b0 <zero_loop+0x12>)
    c76a:	4912      	ldr	r1, [pc, #72]	; (c7b4 <zero_loop+0x16>)
    c76c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    c76e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    c772:	4811      	ldr	r0, [pc, #68]	; (c7b8 <zero_loop+0x1a>)
    c774:	6801      	ldr	r1, [r0, #0]
    c776:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c77a:	6001      	str	r1, [r0, #0]
    c77c:	f3bf 8f4f 	dsb	sy
    c780:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    c784:	480d      	ldr	r0, [pc, #52]	; (c7bc <zero_loop+0x1e>)
    c786:	490e      	ldr	r1, [pc, #56]	; (c7c0 <zero_loop+0x22>)
    c788:	4a0e      	ldr	r2, [pc, #56]	; (c7c4 <zero_loop+0x26>)

0000c78a <copy_loop>:
    c78a:	f850 3b04 	ldr.w	r3, [r0], #4
    c78e:	f841 3b04 	str.w	r3, [r1], #4
    c792:	4291      	cmp	r1, r2
    c794:	dbf9      	blt.n	c78a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    c796:	480c      	ldr	r0, [pc, #48]	; (c7c8 <zero_loop+0x2a>)
    c798:	490c      	ldr	r1, [pc, #48]	; (c7cc <zero_loop+0x2e>)
    c79a:	f04f 0200 	mov.w	r2, #0

0000c79e <zero_loop>:
    c79e:	4288      	cmp	r0, r1
    c7a0:	bfb8      	it	lt
    c7a2:	f840 2b04 	strlt.w	r2, [r0], #4
    c7a6:	dbfa      	blt.n	c79e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    c7a8:	f7ff fee8 	bl	c57c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    c7ac:	be00      	bkpt	0x0000
}
    c7ae:	bf00      	nop
    c7b0:	e000ed08 	.word	0xe000ed08
    c7b4:	0000c000 	.word	0x0000c000
    c7b8:	e000ed88 	.word	0xe000ed88
    c7bc:	00013260 	.word	0x00013260
    c7c0:	10001000 	.word	0x10001000
    c7c4:	10001b40 	.word	0x10001b40
    c7c8:	10001b40 	.word	0x10001b40
    c7cc:	10002dec 	.word	0x10002dec

0000c7d0 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c7d0:	b480      	push	{r7}
    c7d2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c7d4:	e7fe      	b.n	c7d4 <NMI_Handler+0x4>

0000c7d6 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c7d6:	b480      	push	{r7}
    c7d8:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    c7da:	e7fe      	b.n	c7da <DebugMon_Handler+0x4>

0000c7dc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c7dc:	b580      	push	{r7, lr}
    c7de:	b088      	sub	sp, #32
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c7e4:	f107 030c 	add.w	r3, r7, #12
    c7e8:	4618      	mov	r0, r3
    c7ea:	f003 faeb 	bl	fdc4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c7ee:	68fb      	ldr	r3, [r7, #12]
    c7f0:	61fb      	str	r3, [r7, #28]
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c7f2:	69fb      	ldr	r3, [r7, #28]
    c7f4:	4a07      	ldr	r2, [pc, #28]	; (c814 <am_util_delay_ms+0x38>)
    c7f6:	fba2 2303 	umull	r2, r3, r2, r3
    c7fa:	099b      	lsrs	r3, r3, #6
    c7fc:	687a      	ldr	r2, [r7, #4]
    c7fe:	fb02 f303 	mul.w	r3, r2, r3
    c802:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c804:	69b8      	ldr	r0, [r7, #24]
    c806:	f003 fafb 	bl	fe00 <am_hal_flash_delay>
}
    c80a:	bf00      	nop
    c80c:	3720      	adds	r7, #32
    c80e:	46bd      	mov	sp, r7
    c810:	bd80      	pop	{r7, pc}
    c812:	bf00      	nop
    c814:	057619f1 	.word	0x057619f1

0000c818 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c818:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c81a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c81c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c81e:	f000 f809 	bl	c834 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c822:	bd01      	pop	{r0, pc}
}
    c824:	bf00      	nop
    c826:	4618      	mov	r0, r3

0000c828 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c828:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c82a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c82c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c82e:	4770      	bx	lr
}
    c830:	bf00      	nop
    c832:	4618      	mov	r0, r3

0000c834 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c834:	b580      	push	{r7, lr}
    c836:	b096      	sub	sp, #88	; 0x58
    c838:	af00      	add	r7, sp, #0
    c83a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c83c:	f107 030c 	add.w	r3, r7, #12
    c840:	2200      	movs	r2, #0
    c842:	601a      	str	r2, [r3, #0]
    c844:	605a      	str	r2, [r3, #4]
    c846:	609a      	str	r2, [r3, #8]
    c848:	60da      	str	r2, [r3, #12]
    c84a:	611a      	str	r2, [r3, #16]
    c84c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c84e:	2300      	movs	r3, #0
    c850:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c854:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c856:	4b2e      	ldr	r3, [pc, #184]	; (c910 <am_util_faultisr_collect_data+0xdc>)
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c85e:	b2db      	uxtb	r3, r3
    c860:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c866:	0a1b      	lsrs	r3, r3, #8
    c868:	b2db      	uxtb	r3, r3
    c86a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c870:	0c1b      	lsrs	r3, r3, #16
    c872:	b29b      	uxth	r3, r3
    c874:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c878:	4b26      	ldr	r3, [pc, #152]	; (c914 <am_util_faultisr_collect_data+0xe0>)
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c87e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c882:	b2db      	uxtb	r3, r3
    c884:	f003 0302 	and.w	r3, r3, #2
    c888:	2b00      	cmp	r3, #0
    c88a:	d005      	beq.n	c898 <am_util_faultisr_collect_data+0x64>
    c88c:	6879      	ldr	r1, [r7, #4]
    c88e:	2006      	movs	r0, #6
    c890:	f7ff ffca 	bl	c828 <getStackedReg>
    c894:	4603      	mov	r3, r0
    c896:	e001      	b.n	c89c <am_util_faultisr_collect_data+0x68>
    c898:	f04f 33ff 	mov.w	r3, #4294967295
    c89c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c89e:	6879      	ldr	r1, [r7, #4]
    c8a0:	2000      	movs	r0, #0
    c8a2:	f7ff ffc1 	bl	c828 <getStackedReg>
    c8a6:	4603      	mov	r3, r0
    c8a8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8aa:	6879      	ldr	r1, [r7, #4]
    c8ac:	2001      	movs	r0, #1
    c8ae:	f7ff ffbb 	bl	c828 <getStackedReg>
    c8b2:	4603      	mov	r3, r0
    c8b4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8b6:	6879      	ldr	r1, [r7, #4]
    c8b8:	2002      	movs	r0, #2
    c8ba:	f7ff ffb5 	bl	c828 <getStackedReg>
    c8be:	4603      	mov	r3, r0
    c8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c8c2:	6879      	ldr	r1, [r7, #4]
    c8c4:	2003      	movs	r0, #3
    c8c6:	f7ff ffaf 	bl	c828 <getStackedReg>
    c8ca:	4603      	mov	r3, r0
    c8cc:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c8ce:	6879      	ldr	r1, [r7, #4]
    c8d0:	2004      	movs	r0, #4
    c8d2:	f7ff ffa9 	bl	c828 <getStackedReg>
    c8d6:	4603      	mov	r3, r0
    c8d8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c8da:	6879      	ldr	r1, [r7, #4]
    c8dc:	2005      	movs	r0, #5
    c8de:	f7ff ffa3 	bl	c828 <getStackedReg>
    c8e2:	4603      	mov	r3, r0
    c8e4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c8e6:	6879      	ldr	r1, [r7, #4]
    c8e8:	2006      	movs	r0, #6
    c8ea:	f7ff ff9d 	bl	c828 <getStackedReg>
    c8ee:	4603      	mov	r3, r0
    c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c8f2:	6879      	ldr	r1, [r7, #4]
    c8f4:	2007      	movs	r0, #7
    c8f6:	f7ff ff97 	bl	c828 <getStackedReg>
    c8fa:	4603      	mov	r3, r0
    c8fc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c8fe:	f107 030c 	add.w	r3, r7, #12
    c902:	4619      	mov	r1, r3
    c904:	2002      	movs	r0, #2
    c906:	f003 fd85 	bl	10414 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c90a:	2300      	movs	r3, #0
    c90c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c90e:	e7fe      	b.n	c90e <am_util_faultisr_collect_data+0xda>
    c910:	e000ed28 	.word	0xe000ed28
    c914:	e000ed38 	.word	0xe000ed38

0000c918 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c918:	b480      	push	{r7}
    c91a:	b083      	sub	sp, #12
    c91c:	af00      	add	r7, sp, #0
    c91e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c920:	4a04      	ldr	r2, [pc, #16]	; (c934 <am_util_stdio_printf_init+0x1c>)
    c922:	687b      	ldr	r3, [r7, #4]
    c924:	6013      	str	r3, [r2, #0]
}
    c926:	bf00      	nop
    c928:	370c      	adds	r7, #12
    c92a:	46bd      	mov	sp, r7
    c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c930:	4770      	bx	lr
    c932:	bf00      	nop
    c934:	10002c58 	.word	0x10002c58

0000c938 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c938:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c93c:	b096      	sub	sp, #88	; 0x58
    c93e:	af00      	add	r7, sp, #0
    c940:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c944:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c948:	0025      	movs	r5, r4
    c94a:	2600      	movs	r6, #0
    c94c:	ea55 0306 	orrs.w	r3, r5, r6
    c950:	f000 80a0 	beq.w	ca94 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c954:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c958:	0862      	lsrs	r2, r4, #1
    c95a:	ea4f 0133 	mov.w	r1, r3, rrx
    c95e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c962:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c966:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c96a:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c96e:	eb11 0308 	adds.w	r3, r1, r8
    c972:	eb42 0409 	adc.w	r4, r2, r9
    c976:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c97a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c97e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c982:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c986:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c98a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c98e:	eb13 030a 	adds.w	r3, r3, sl
    c992:	eb44 040b 	adc.w	r4, r4, fp
    c996:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c99a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c99e:	0a1a      	lsrs	r2, r3, #8
    c9a0:	62ba      	str	r2, [r7, #40]	; 0x28
    c9a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c9a4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c9a8:	62ba      	str	r2, [r7, #40]	; 0x28
    c9aa:	0a23      	lsrs	r3, r4, #8
    c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    c9ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c9b6:	18c9      	adds	r1, r1, r3
    c9b8:	eb42 0204 	adc.w	r2, r2, r4
    c9bc:	460b      	mov	r3, r1
    c9be:	4614      	mov	r4, r2
    c9c0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c9c4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9c8:	0c1a      	lsrs	r2, r3, #16
    c9ca:	623a      	str	r2, [r7, #32]
    c9cc:	6a3a      	ldr	r2, [r7, #32]
    c9ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c9d2:	623a      	str	r2, [r7, #32]
    c9d4:	0c23      	lsrs	r3, r4, #16
    c9d6:	627b      	str	r3, [r7, #36]	; 0x24
    c9d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c9e0:	18c9      	adds	r1, r1, r3
    c9e2:	eb42 0204 	adc.w	r2, r2, r4
    c9e6:	460b      	mov	r3, r1
    c9e8:	4614      	mov	r4, r2
    c9ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c9ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9f2:	0023      	movs	r3, r4
    c9f4:	603b      	str	r3, [r7, #0]
    c9f6:	2300      	movs	r3, #0
    c9f8:	607b      	str	r3, [r7, #4]
    c9fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c9fe:	e897 0006 	ldmia.w	r7, {r1, r2}
    ca02:	18c9      	adds	r1, r1, r3
    ca04:	eb42 0204 	adc.w	r2, r2, r4
    ca08:	460b      	mov	r3, r1
    ca0a:	4614      	mov	r4, r2
    ca0c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    ca10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    ca14:	08da      	lsrs	r2, r3, #3
    ca16:	613a      	str	r2, [r7, #16]
    ca18:	693a      	ldr	r2, [r7, #16]
    ca1a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    ca1e:	613a      	str	r2, [r7, #16]
    ca20:	08e3      	lsrs	r3, r4, #3
    ca22:	617b      	str	r3, [r7, #20]
    ca24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    ca28:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    ca2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    ca30:	460b      	mov	r3, r1
    ca32:	4614      	mov	r4, r2
    ca34:	00a0      	lsls	r0, r4, #2
    ca36:	60f8      	str	r0, [r7, #12]
    ca38:	68f8      	ldr	r0, [r7, #12]
    ca3a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    ca3e:	60f8      	str	r0, [r7, #12]
    ca40:	009b      	lsls	r3, r3, #2
    ca42:	60bb      	str	r3, [r7, #8]
    ca44:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    ca48:	185b      	adds	r3, r3, r1
    ca4a:	eb44 0402 	adc.w	r4, r4, r2
    ca4e:	18db      	adds	r3, r3, r3
    ca50:	eb44 0404 	adc.w	r4, r4, r4
    ca54:	4619      	mov	r1, r3
    ca56:	4622      	mov	r2, r4
    ca58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    ca5c:	1a5b      	subs	r3, r3, r1
    ca5e:	eb64 0402 	sbc.w	r4, r4, r2
    ca62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    ca66:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    ca6a:	3306      	adds	r3, #6
    ca6c:	f144 0400 	adc.w	r4, r4, #0
    ca70:	091a      	lsrs	r2, r3, #4
    ca72:	61ba      	str	r2, [r7, #24]
    ca74:	69ba      	ldr	r2, [r7, #24]
    ca76:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    ca7a:	61ba      	str	r2, [r7, #24]
    ca7c:	0923      	lsrs	r3, r4, #4
    ca7e:	61fb      	str	r3, [r7, #28]
    ca80:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    ca84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    ca88:	18c9      	adds	r1, r1, r3
    ca8a:	eb42 0204 	adc.w	r2, r2, r4
    ca8e:	460b      	mov	r3, r1
    ca90:	4614      	mov	r4, r2
    ca92:	e029      	b.n	cae8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca96:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ca98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca9a:	085a      	lsrs	r2, r3, #1
    ca9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca9e:	089b      	lsrs	r3, r3, #2
    caa0:	4413      	add	r3, r2
    caa2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    caa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caa6:	091b      	lsrs	r3, r3, #4
    caa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    caaa:	4413      	add	r3, r2
    caac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    caae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cab0:	0a1b      	lsrs	r3, r3, #8
    cab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cab4:	4413      	add	r3, r2
    cab6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    cab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caba:	0c1b      	lsrs	r3, r3, #16
    cabc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cabe:	4413      	add	r3, r2
    cac0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    cac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cac4:	08db      	lsrs	r3, r3, #3
    cac6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    cac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    caca:	4613      	mov	r3, r2
    cacc:	009b      	lsls	r3, r3, #2
    cace:	4413      	add	r3, r2
    cad0:	005b      	lsls	r3, r3, #1
    cad2:	461a      	mov	r2, r3
    cad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cad6:	1a9b      	subs	r3, r3, r2
    cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cadc:	3306      	adds	r3, #6
    cade:	091a      	lsrs	r2, r3, #4
    cae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cae2:	4413      	add	r3, r2
    cae4:	f04f 0400 	mov.w	r4, #0
    }
}
    cae8:	4618      	mov	r0, r3
    caea:	4621      	mov	r1, r4
    caec:	3758      	adds	r7, #88	; 0x58
    caee:	46bd      	mov	sp, r7
    caf0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    caf4:	4770      	bx	lr

0000caf6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    caf6:	b590      	push	{r4, r7, lr}
    caf8:	b085      	sub	sp, #20
    cafa:	af00      	add	r7, sp, #0
    cafc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    cb00:	683a      	ldr	r2, [r7, #0]
    cb02:	687b      	ldr	r3, [r7, #4]
    cb04:	4313      	orrs	r3, r2
    cb06:	2b00      	cmp	r3, #0
    cb08:	bf0c      	ite	eq
    cb0a:	2301      	moveq	r3, #1
    cb0c:	2300      	movne	r3, #0
    cb0e:	b2db      	uxtb	r3, r3
    cb10:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    cb12:	e008      	b.n	cb26 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    cb14:	e9d7 0100 	ldrd	r0, r1, [r7]
    cb18:	f7ff ff0e 	bl	c938 <divu64_10>
    cb1c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    cb20:	68fb      	ldr	r3, [r7, #12]
    cb22:	3301      	adds	r3, #1
    cb24:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    cb26:	e897 0018 	ldmia.w	r7, {r3, r4}
    cb2a:	4323      	orrs	r3, r4
    cb2c:	d1f2      	bne.n	cb14 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    cb2e:	68fb      	ldr	r3, [r7, #12]
}
    cb30:	4618      	mov	r0, r3
    cb32:	3714      	adds	r7, #20
    cb34:	46bd      	mov	sp, r7
    cb36:	bd90      	pop	{r4, r7, pc}

0000cb38 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cb38:	b590      	push	{r4, r7, lr}
    cb3a:	b083      	sub	sp, #12
    cb3c:	af00      	add	r7, sp, #0
    cb3e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    cb42:	e897 0018 	ldmia.w	r7, {r3, r4}
    cb46:	2b00      	cmp	r3, #0
    cb48:	f174 0300 	sbcs.w	r3, r4, #0
    cb4c:	da06      	bge.n	cb5c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cb4e:	e897 0018 	ldmia.w	r7, {r3, r4}
    cb52:	425b      	negs	r3, r3
    cb54:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cb58:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cb5c:	e897 0018 	ldmia.w	r7, {r3, r4}
    cb60:	4618      	mov	r0, r3
    cb62:	4621      	mov	r1, r4
    cb64:	f7ff ffc7 	bl	caf6 <ndigits_in_u64>
    cb68:	4603      	mov	r3, r0
}
    cb6a:	4618      	mov	r0, r3
    cb6c:	370c      	adds	r7, #12
    cb6e:	46bd      	mov	sp, r7
    cb70:	bd90      	pop	{r4, r7, pc}

0000cb72 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cb72:	b490      	push	{r4, r7}
    cb74:	b084      	sub	sp, #16
    cb76:	af00      	add	r7, sp, #0
    cb78:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    cb7c:	6839      	ldr	r1, [r7, #0]
    cb7e:	687a      	ldr	r2, [r7, #4]
    cb80:	430a      	orrs	r2, r1
    cb82:	2a00      	cmp	r2, #0
    cb84:	bf0c      	ite	eq
    cb86:	2201      	moveq	r2, #1
    cb88:	2200      	movne	r2, #0
    cb8a:	b2d2      	uxtb	r2, r2
    cb8c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    cb8e:	e00a      	b.n	cba6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    cb90:	e897 0006 	ldmia.w	r7, {r1, r2}
    cb94:	090b      	lsrs	r3, r1, #4
    cb96:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    cb9a:	0914      	lsrs	r4, r2, #4
    cb9c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    cba0:	68fa      	ldr	r2, [r7, #12]
    cba2:	3201      	adds	r2, #1
    cba4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    cba6:	e897 0006 	ldmia.w	r7, {r1, r2}
    cbaa:	430a      	orrs	r2, r1
    cbac:	d1f0      	bne.n	cb90 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    cbae:	68fb      	ldr	r3, [r7, #12]
}
    cbb0:	4618      	mov	r0, r3
    cbb2:	3710      	adds	r7, #16
    cbb4:	46bd      	mov	sp, r7
    cbb6:	bc90      	pop	{r4, r7}
    cbb8:	4770      	bx	lr

0000cbba <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    cbba:	b480      	push	{r7}
    cbbc:	b087      	sub	sp, #28
    cbbe:	af00      	add	r7, sp, #0
    cbc0:	6078      	str	r0, [r7, #4]
    cbc2:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    cbc4:	2300      	movs	r3, #0
    cbc6:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    cbc8:	2300      	movs	r3, #0
    cbca:	613b      	str	r3, [r7, #16]
    cbcc:	2300      	movs	r3, #0
    cbce:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	781b      	ldrb	r3, [r3, #0]
    cbd4:	2b2d      	cmp	r3, #45	; 0x2d
    cbd6:	d11b      	bne.n	cc10 <decstr_to_int+0x56>
    {
        bNeg = true;
    cbd8:	2301      	movs	r3, #1
    cbda:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    cbdc:	687b      	ldr	r3, [r7, #4]
    cbde:	3301      	adds	r3, #1
    cbe0:	607b      	str	r3, [r7, #4]
        uCnt++;
    cbe2:	68fb      	ldr	r3, [r7, #12]
    cbe4:	3301      	adds	r3, #1
    cbe6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cbe8:	e012      	b.n	cc10 <decstr_to_int+0x56>
    {
        ++uCnt;
    cbea:	68fb      	ldr	r3, [r7, #12]
    cbec:	3301      	adds	r3, #1
    cbee:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cbf0:	693a      	ldr	r2, [r7, #16]
    cbf2:	4613      	mov	r3, r2
    cbf4:	009b      	lsls	r3, r3, #2
    cbf6:	4413      	add	r3, r2
    cbf8:	005b      	lsls	r3, r3, #1
    cbfa:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cbfc:	687b      	ldr	r3, [r7, #4]
    cbfe:	781b      	ldrb	r3, [r3, #0]
    cc00:	461a      	mov	r2, r3
    cc02:	693b      	ldr	r3, [r7, #16]
    cc04:	4413      	add	r3, r2
    cc06:	3b30      	subs	r3, #48	; 0x30
    cc08:	613b      	str	r3, [r7, #16]
        pcStr++;
    cc0a:	687b      	ldr	r3, [r7, #4]
    cc0c:	3301      	adds	r3, #1
    cc0e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	781b      	ldrb	r3, [r3, #0]
    cc14:	2b2f      	cmp	r3, #47	; 0x2f
    cc16:	d903      	bls.n	cc20 <decstr_to_int+0x66>
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	781b      	ldrb	r3, [r3, #0]
    cc1c:	2b39      	cmp	r3, #57	; 0x39
    cc1e:	d9e4      	bls.n	cbea <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cc20:	683b      	ldr	r3, [r7, #0]
    cc22:	2b00      	cmp	r3, #0
    cc24:	d002      	beq.n	cc2c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cc26:	683b      	ldr	r3, [r7, #0]
    cc28:	68fa      	ldr	r2, [r7, #12]
    cc2a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cc2c:	7dfb      	ldrb	r3, [r7, #23]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d002      	beq.n	cc38 <decstr_to_int+0x7e>
    cc32:	693b      	ldr	r3, [r7, #16]
    cc34:	425b      	negs	r3, r3
    cc36:	e000      	b.n	cc3a <decstr_to_int+0x80>
    cc38:	693b      	ldr	r3, [r7, #16]
}
    cc3a:	4618      	mov	r0, r3
    cc3c:	371c      	adds	r7, #28
    cc3e:	46bd      	mov	sp, r7
    cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc44:	4770      	bx	lr

0000cc46 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cc46:	b590      	push	{r4, r7, lr}
    cc48:	b091      	sub	sp, #68	; 0x44
    cc4a:	af00      	add	r7, sp, #0
    cc4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cc50:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cc52:	2300      	movs	r3, #0
    cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
    cc56:	2300      	movs	r3, #0
    cc58:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cc5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    cc5e:	f7ff fe6b 	bl	c938 <divu64_10>
    cc62:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cc66:	68b9      	ldr	r1, [r7, #8]
    cc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc6a:	4613      	mov	r3, r2
    cc6c:	009b      	lsls	r3, r3, #2
    cc6e:	4413      	add	r3, r2
    cc70:	005b      	lsls	r3, r3, #1
    cc72:	1acb      	subs	r3, r1, r3
    cc74:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc78:	1c5a      	adds	r2, r3, #1
    cc7a:	63fa      	str	r2, [r7, #60]	; 0x3c
    cc7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc7e:	b2d2      	uxtb	r2, r2
    cc80:	3230      	adds	r2, #48	; 0x30
    cc82:	b2d2      	uxtb	r2, r2
    cc84:	f107 0140 	add.w	r1, r7, #64	; 0x40
    cc88:	440b      	add	r3, r1
    cc8a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cc8e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cc92:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    cc96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cc9a:	4323      	orrs	r3, r4
    cc9c:	d1dd      	bne.n	cc5a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cca0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	2b00      	cmp	r3, #0
    cca6:	d011      	beq.n	cccc <uint64_to_str+0x86>
    {
        while ( ix-- )
    cca8:	e008      	b.n	ccbc <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    ccaa:	687b      	ldr	r3, [r7, #4]
    ccac:	1c5a      	adds	r2, r3, #1
    ccae:	607a      	str	r2, [r7, #4]
    ccb0:	f107 0110 	add.w	r1, r7, #16
    ccb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ccb6:	440a      	add	r2, r1
    ccb8:	7812      	ldrb	r2, [r2, #0]
    ccba:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ccbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ccbe:	1e5a      	subs	r2, r3, #1
    ccc0:	63fa      	str	r2, [r7, #60]	; 0x3c
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	d1f1      	bne.n	ccaa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	2200      	movs	r2, #0
    ccca:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    ccce:	4618      	mov	r0, r3
    ccd0:	3744      	adds	r7, #68	; 0x44
    ccd2:	46bd      	mov	sp, r7
    ccd4:	bd90      	pop	{r4, r7, pc}

0000ccd6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ccd6:	b4b0      	push	{r4, r5, r7}
    ccd8:	b08d      	sub	sp, #52	; 0x34
    ccda:	af00      	add	r7, sp, #0
    ccdc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cce0:	607a      	str	r2, [r7, #4]
    cce2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cce4:	2300      	movs	r3, #0
    cce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ccec:	4313      	orrs	r3, r2
    ccee:	d131      	bne.n	cd54 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccf2:	1c5a      	adds	r2, r3, #1
    ccf4:	62fa      	str	r2, [r7, #44]	; 0x2c
    ccf6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ccfa:	4413      	add	r3, r2
    ccfc:	2230      	movs	r2, #48	; 0x30
    ccfe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cd02:	e027      	b.n	cd54 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    cd04:	7a3b      	ldrb	r3, [r7, #8]
    cd06:	f003 030f 	and.w	r3, r3, #15
    cd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cd12:	2b09      	cmp	r3, #9
    cd14:	d90a      	bls.n	cd2c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cd16:	78fb      	ldrb	r3, [r7, #3]
    cd18:	2b00      	cmp	r3, #0
    cd1a:	d001      	beq.n	cd20 <uint64_to_hexstr+0x4a>
    cd1c:	2227      	movs	r2, #39	; 0x27
    cd1e:	e000      	b.n	cd22 <uint64_to_hexstr+0x4c>
    cd20:	2207      	movs	r2, #7
    cd22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cd26:	4413      	add	r3, r2
    cd28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd2e:	1c5a      	adds	r2, r3, #1
    cd30:	62fa      	str	r2, [r7, #44]	; 0x2c
    cd32:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cd36:	3230      	adds	r2, #48	; 0x30
    cd38:	b2d2      	uxtb	r2, r2
    cd3a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cd3e:	440b      	add	r3, r1
    cd40:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cd44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cd48:	0914      	lsrs	r4, r2, #4
    cd4a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cd4e:	091d      	lsrs	r5, r3, #4
    cd50:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cd54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cd58:	4313      	orrs	r3, r2
    cd5a:	d1d3      	bne.n	cd04 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd5e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cd60:	687b      	ldr	r3, [r7, #4]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d011      	beq.n	cd8a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cd66:	e008      	b.n	cd7a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cd68:	687b      	ldr	r3, [r7, #4]
    cd6a:	1c5a      	adds	r2, r3, #1
    cd6c:	607a      	str	r2, [r7, #4]
    cd6e:	f107 0110 	add.w	r1, r7, #16
    cd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd74:	440a      	add	r2, r1
    cd76:	7812      	ldrb	r2, [r2, #0]
    cd78:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd7c:	1e5a      	subs	r2, r3, #1
    cd7e:	62fa      	str	r2, [r7, #44]	; 0x2c
    cd80:	2b00      	cmp	r3, #0
    cd82:	d1f1      	bne.n	cd68 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cd84:	687b      	ldr	r3, [r7, #4]
    cd86:	2200      	movs	r2, #0
    cd88:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cd8c:	4618      	mov	r0, r3
    cd8e:	3734      	adds	r7, #52	; 0x34
    cd90:	46bd      	mov	sp, r7
    cd92:	bcb0      	pop	{r4, r5, r7}
    cd94:	4770      	bx	lr

0000cd96 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cd96:	b480      	push	{r7}
    cd98:	b085      	sub	sp, #20
    cd9a:	af00      	add	r7, sp, #0
    cd9c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cd9e:	2300      	movs	r3, #0
    cda0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cda2:	687b      	ldr	r3, [r7, #4]
    cda4:	2b00      	cmp	r3, #0
    cda6:	d104      	bne.n	cdb2 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cda8:	68fb      	ldr	r3, [r7, #12]
    cdaa:	e009      	b.n	cdc0 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cdac:	68fb      	ldr	r3, [r7, #12]
    cdae:	3301      	adds	r3, #1
    cdb0:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cdb2:	687b      	ldr	r3, [r7, #4]
    cdb4:	1c5a      	adds	r2, r3, #1
    cdb6:	607a      	str	r2, [r7, #4]
    cdb8:	781b      	ldrb	r3, [r3, #0]
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d1f6      	bne.n	cdac <simple_strlen+0x16>
    }
    return ui32RetVal;
    cdbe:	68fb      	ldr	r3, [r7, #12]
}
    cdc0:	4618      	mov	r0, r3
    cdc2:	3714      	adds	r7, #20
    cdc4:	46bd      	mov	sp, r7
    cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdca:	4770      	bx	lr

0000cdcc <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cdcc:	b480      	push	{r7}
    cdce:	b087      	sub	sp, #28
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	60f8      	str	r0, [r7, #12]
    cdd4:	460b      	mov	r3, r1
    cdd6:	607a      	str	r2, [r7, #4]
    cdd8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cdda:	2300      	movs	r3, #0
    cddc:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    cdde:	687b      	ldr	r3, [r7, #4]
    cde0:	2b00      	cmp	r3, #0
    cde2:	dc0c      	bgt.n	cdfe <padbuffer+0x32>
    {
        return i32Cnt;
    cde4:	697b      	ldr	r3, [r7, #20]
    cde6:	e010      	b.n	ce0a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cde8:	68fb      	ldr	r3, [r7, #12]
    cdea:	2b00      	cmp	r3, #0
    cdec:	d004      	beq.n	cdf8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cdee:	68fb      	ldr	r3, [r7, #12]
    cdf0:	1c5a      	adds	r2, r3, #1
    cdf2:	60fa      	str	r2, [r7, #12]
    cdf4:	7afa      	ldrb	r2, [r7, #11]
    cdf6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cdf8:	697b      	ldr	r3, [r7, #20]
    cdfa:	3301      	adds	r3, #1
    cdfc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	1e5a      	subs	r2, r3, #1
    ce02:	607a      	str	r2, [r7, #4]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d1ef      	bne.n	cde8 <padbuffer+0x1c>
    }

    return i32Cnt;
    ce08:	697b      	ldr	r3, [r7, #20]
}
    ce0a:	4618      	mov	r0, r3
    ce0c:	371c      	adds	r7, #28
    ce0e:	46bd      	mov	sp, r7
    ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce14:	4770      	bx	lr
	...

0000ce18 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    ce18:	b590      	push	{r4, r7, lr}
    ce1a:	b08f      	sub	sp, #60	; 0x3c
    ce1c:	af00      	add	r7, sp, #0
    ce1e:	60f8      	str	r0, [r7, #12]
    ce20:	60b9      	str	r1, [r7, #8]
    ce22:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ce24:	68bb      	ldr	r3, [r7, #8]
    ce26:	681b      	ldr	r3, [r3, #0]
    ce28:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce2c:	2b03      	cmp	r3, #3
    ce2e:	dc02      	bgt.n	ce36 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    ce30:	f06f 0302 	mvn.w	r3, #2
    ce34:	e0e7      	b.n	d006 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    ce36:	edd7 7a03 	vldr	s15, [r7, #12]
    ce3a:	eef5 7a40 	vcmp.f32	s15, #0.0
    ce3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce42:	d104      	bne.n	ce4e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ce44:	68bb      	ldr	r3, [r7, #8]
    ce46:	4a72      	ldr	r2, [pc, #456]	; (d010 <ftoa+0x1f8>)
    ce48:	601a      	str	r2, [r3, #0]
        return 3;
    ce4a:	2303      	movs	r3, #3
    ce4c:	e0db      	b.n	d006 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    ce4e:	68bb      	ldr	r3, [r7, #8]
    ce50:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    ce52:	68fb      	ldr	r3, [r7, #12]
    ce54:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ce56:	693b      	ldr	r3, [r7, #16]
    ce58:	15db      	asrs	r3, r3, #23
    ce5a:	b2db      	uxtb	r3, r3
    ce5c:	3b7f      	subs	r3, #127	; 0x7f
    ce5e:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ce60:	693b      	ldr	r3, [r7, #16]
    ce62:	f3c3 0316 	ubfx	r3, r3, #0, #23
    ce66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    ce6a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    ce6c:	2300      	movs	r3, #0
    ce6e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    ce70:	2300      	movs	r3, #0
    ce72:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    ce74:	69fb      	ldr	r3, [r7, #28]
    ce76:	2b1e      	cmp	r3, #30
    ce78:	dd02      	ble.n	ce80 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    ce7a:	f06f 0301 	mvn.w	r3, #1
    ce7e:	e0c2      	b.n	d006 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    ce80:	69fb      	ldr	r3, [r7, #28]
    ce82:	f113 0f17 	cmn.w	r3, #23
    ce86:	da02      	bge.n	ce8e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    ce88:	f04f 33ff 	mov.w	r3, #4294967295
    ce8c:	e0bb      	b.n	d006 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    ce8e:	69fb      	ldr	r3, [r7, #28]
    ce90:	2b16      	cmp	r3, #22
    ce92:	dd06      	ble.n	cea2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ce94:	69fb      	ldr	r3, [r7, #28]
    ce96:	3b17      	subs	r3, #23
    ce98:	69ba      	ldr	r2, [r7, #24]
    ce9a:	fa02 f303 	lsl.w	r3, r2, r3
    ce9e:	637b      	str	r3, [r7, #52]	; 0x34
    cea0:	e01a      	b.n	ced8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cea2:	69fb      	ldr	r3, [r7, #28]
    cea4:	2b00      	cmp	r3, #0
    cea6:	db0f      	blt.n	cec8 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cea8:	69fb      	ldr	r3, [r7, #28]
    ceaa:	f1c3 0317 	rsb	r3, r3, #23
    ceae:	69ba      	ldr	r2, [r7, #24]
    ceb0:	fa42 f303 	asr.w	r3, r2, r3
    ceb4:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ceb6:	69fb      	ldr	r3, [r7, #28]
    ceb8:	3301      	adds	r3, #1
    ceba:	69ba      	ldr	r2, [r7, #24]
    cebc:	fa02 f303 	lsl.w	r3, r2, r3
    cec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cec4:	633b      	str	r3, [r7, #48]	; 0x30
    cec6:	e007      	b.n	ced8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cec8:	69bb      	ldr	r3, [r7, #24]
    ceca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cece:	69fb      	ldr	r3, [r7, #28]
    ced0:	43db      	mvns	r3, r3
    ced2:	fa42 f303 	asr.w	r3, r2, r3
    ced6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ced8:	693b      	ldr	r3, [r7, #16]
    ceda:	2b00      	cmp	r3, #0
    cedc:	da04      	bge.n	cee8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cede:	68bb      	ldr	r3, [r7, #8]
    cee0:	1c5a      	adds	r2, r3, #1
    cee2:	60ba      	str	r2, [r7, #8]
    cee4:	222d      	movs	r2, #45	; 0x2d
    cee6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ceea:	2b00      	cmp	r3, #0
    ceec:	d105      	bne.n	cefa <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ceee:	68bb      	ldr	r3, [r7, #8]
    cef0:	1c5a      	adds	r2, r3, #1
    cef2:	60ba      	str	r2, [r7, #8]
    cef4:	2230      	movs	r2, #48	; 0x30
    cef6:	701a      	strb	r2, [r3, #0]
    cef8:	e021      	b.n	cf3e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    cefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cefc:	2b00      	cmp	r3, #0
    cefe:	dd08      	ble.n	cf12 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf02:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cf06:	68ba      	ldr	r2, [r7, #8]
    cf08:	4618      	mov	r0, r3
    cf0a:	4621      	mov	r1, r4
    cf0c:	f7ff fe9b 	bl	cc46 <uint64_to_str>
    cf10:	e011      	b.n	cf36 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    cf12:	68bb      	ldr	r3, [r7, #8]
    cf14:	1c5a      	adds	r2, r3, #1
    cf16:	60ba      	str	r2, [r7, #8]
    cf18:	222d      	movs	r2, #45	; 0x2d
    cf1a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf1e:	425b      	negs	r3, r3
    cf20:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cf24:	68ba      	ldr	r2, [r7, #8]
    cf26:	4618      	mov	r0, r3
    cf28:	4621      	mov	r1, r4
    cf2a:	f7ff fe8c 	bl	cc46 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cf2e:	e002      	b.n	cf36 <ftoa+0x11e>
        {
            pcBuf++;
    cf30:	68bb      	ldr	r3, [r7, #8]
    cf32:	3301      	adds	r3, #1
    cf34:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cf36:	68bb      	ldr	r3, [r7, #8]
    cf38:	781b      	ldrb	r3, [r3, #0]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d1f8      	bne.n	cf30 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cf3e:	68bb      	ldr	r3, [r7, #8]
    cf40:	1c5a      	adds	r2, r3, #1
    cf42:	60ba      	str	r2, [r7, #8]
    cf44:	222e      	movs	r2, #46	; 0x2e
    cf46:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d105      	bne.n	cf5a <ftoa+0x142>
    {
        *pcBuf++ = '0';
    cf4e:	68bb      	ldr	r3, [r7, #8]
    cf50:	1c5a      	adds	r2, r3, #1
    cf52:	60ba      	str	r2, [r7, #8]
    cf54:	2230      	movs	r2, #48	; 0x30
    cf56:	701a      	strb	r2, [r3, #0]
    cf58:	e04f      	b.n	cffa <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cf5a:	68ba      	ldr	r2, [r7, #8]
    cf5c:	6a3b      	ldr	r3, [r7, #32]
    cf5e:	1ad3      	subs	r3, r2, r3
    cf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf62:	1ad3      	subs	r3, r2, r3
    cf64:	3b01      	subs	r3, #1
    cf66:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cf68:	697a      	ldr	r2, [r7, #20]
    cf6a:	687b      	ldr	r3, [r7, #4]
    cf6c:	4293      	cmp	r3, r2
    cf6e:	bfa8      	it	ge
    cf70:	4613      	movge	r3, r2
    cf72:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cf74:	2300      	movs	r3, #0
    cf76:	62bb      	str	r3, [r7, #40]	; 0x28
    cf78:	e015      	b.n	cfa6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    cf7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cf7c:	4613      	mov	r3, r2
    cf7e:	009b      	lsls	r3, r3, #2
    cf80:	4413      	add	r3, r2
    cf82:	005b      	lsls	r3, r3, #1
    cf84:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cf86:	68bb      	ldr	r3, [r7, #8]
    cf88:	1c5a      	adds	r2, r3, #1
    cf8a:	60ba      	str	r2, [r7, #8]
    cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cf8e:	1612      	asrs	r2, r2, #24
    cf90:	b2d2      	uxtb	r2, r2
    cf92:	3230      	adds	r2, #48	; 0x30
    cf94:	b2d2      	uxtb	r2, r2
    cf96:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cf9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cf9e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cfa2:	3301      	adds	r3, #1
    cfa4:	62bb      	str	r3, [r7, #40]	; 0x28
    cfa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cfa8:	697b      	ldr	r3, [r7, #20]
    cfaa:	429a      	cmp	r2, r3
    cfac:	dbe5      	blt.n	cf7a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cfae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cfb0:	4613      	mov	r3, r2
    cfb2:	009b      	lsls	r3, r3, #2
    cfb4:	4413      	add	r3, r2
    cfb6:	005b      	lsls	r3, r3, #1
    cfb8:	161b      	asrs	r3, r3, #24
    cfba:	2b04      	cmp	r3, #4
    cfbc:	dd1d      	ble.n	cffa <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cfbe:	68bb      	ldr	r3, [r7, #8]
    cfc0:	3b01      	subs	r3, #1
    cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cfc4:	e015      	b.n	cff2 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	2b2e      	cmp	r3, #46	; 0x2e
    cfcc:	d00e      	beq.n	cfec <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    cfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfd0:	781b      	ldrb	r3, [r3, #0]
    cfd2:	2b39      	cmp	r3, #57	; 0x39
    cfd4:	d103      	bne.n	cfde <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    cfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfd8:	2230      	movs	r2, #48	; 0x30
    cfda:	701a      	strb	r2, [r3, #0]
    cfdc:	e006      	b.n	cfec <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfe0:	781b      	ldrb	r3, [r3, #0]
    cfe2:	3301      	adds	r3, #1
    cfe4:	b2da      	uxtb	r2, r3
    cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfe8:	701a      	strb	r2, [r3, #0]
                    break;
    cfea:	e006      	b.n	cffa <ftoa+0x1e2>
                }
                pcBuftmp--;
    cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfee:	3b01      	subs	r3, #1
    cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cff4:	6a3b      	ldr	r3, [r7, #32]
    cff6:	429a      	cmp	r2, r3
    cff8:	d2e5      	bcs.n	cfc6 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cffa:	68bb      	ldr	r3, [r7, #8]
    cffc:	2200      	movs	r2, #0
    cffe:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d000:	68ba      	ldr	r2, [r7, #8]
    d002:	6a3b      	ldr	r3, [r7, #32]
    d004:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d006:	4618      	mov	r0, r3
    d008:	373c      	adds	r7, #60	; 0x3c
    d00a:	46bd      	mov	sp, r7
    d00c:	bd90      	pop	{r4, r7, pc}
    d00e:	bf00      	nop
    d010:	00302e30 	.word	0x00302e30

0000d014 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d014:	b590      	push	{r4, r7, lr}
    d016:	b095      	sub	sp, #84	; 0x54
    d018:	af00      	add	r7, sp, #0
    d01a:	60f8      	str	r0, [r7, #12]
    d01c:	60b9      	str	r1, [r7, #8]
    d01e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d020:	2300      	movs	r3, #0
    d022:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d024:	2300      	movs	r3, #0
    d026:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    d028:	e2e3      	b.n	d5f2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d02a:	2306      	movs	r3, #6
    d02c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    d02e:	68bb      	ldr	r3, [r7, #8]
    d030:	781b      	ldrb	r3, [r3, #0]
    d032:	2b25      	cmp	r3, #37	; 0x25
    d034:	d01f      	beq.n	d076 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d036:	68fb      	ldr	r3, [r7, #12]
    d038:	2b00      	cmp	r3, #0
    d03a:	d015      	beq.n	d068 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d03c:	68bb      	ldr	r3, [r7, #8]
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	2b0a      	cmp	r3, #10
    d042:	d10b      	bne.n	d05c <am_util_stdio_vsprintf+0x48>
    d044:	4bb1      	ldr	r3, [pc, #708]	; (d30c <am_util_stdio_vsprintf+0x2f8>)
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	2b00      	cmp	r3, #0
    d04a:	d007      	beq.n	d05c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d04c:	68fb      	ldr	r3, [r7, #12]
    d04e:	1c5a      	adds	r2, r3, #1
    d050:	60fa      	str	r2, [r7, #12]
    d052:	220d      	movs	r2, #13
    d054:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d058:	3301      	adds	r3, #1
    d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    d05c:	68fb      	ldr	r3, [r7, #12]
    d05e:	1c5a      	adds	r2, r3, #1
    d060:	60fa      	str	r2, [r7, #12]
    d062:	68ba      	ldr	r2, [r7, #8]
    d064:	7812      	ldrb	r2, [r2, #0]
    d066:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d068:	68bb      	ldr	r3, [r7, #8]
    d06a:	3301      	adds	r3, #1
    d06c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    d06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d070:	3301      	adds	r3, #1
    d072:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    d074:	e2bd      	b.n	d5f2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d076:	68bb      	ldr	r3, [r7, #8]
    d078:	3301      	adds	r3, #1
    d07a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    d07c:	2300      	movs	r3, #0
    d07e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    d082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d086:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d08a:	2320      	movs	r3, #32
    d08c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    d090:	68bb      	ldr	r3, [r7, #8]
    d092:	781b      	ldrb	r3, [r3, #0]
    d094:	2b30      	cmp	r3, #48	; 0x30
    d096:	d105      	bne.n	d0a4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d098:	2330      	movs	r3, #48	; 0x30
    d09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    d09e:	68bb      	ldr	r3, [r7, #8]
    d0a0:	3301      	adds	r3, #1
    d0a2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d0a4:	f107 0310 	add.w	r3, r7, #16
    d0a8:	4619      	mov	r1, r3
    d0aa:	68b8      	ldr	r0, [r7, #8]
    d0ac:	f7ff fd85 	bl	cbba <decstr_to_int>
    d0b0:	4603      	mov	r3, r0
    d0b2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    d0b4:	693b      	ldr	r3, [r7, #16]
    d0b6:	68ba      	ldr	r2, [r7, #8]
    d0b8:	4413      	add	r3, r2
    d0ba:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d0bc:	68bb      	ldr	r3, [r7, #8]
    d0be:	781b      	ldrb	r3, [r3, #0]
    d0c0:	2b73      	cmp	r3, #115	; 0x73
    d0c2:	d005      	beq.n	d0d0 <am_util_stdio_vsprintf+0xbc>
    d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	da02      	bge.n	d0d0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0cc:	425b      	negs	r3, r3
    d0ce:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d0d0:	68bb      	ldr	r3, [r7, #8]
    d0d2:	781b      	ldrb	r3, [r3, #0]
    d0d4:	2b2e      	cmp	r3, #46	; 0x2e
    d0d6:	d10e      	bne.n	d0f6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d0d8:	68bb      	ldr	r3, [r7, #8]
    d0da:	3301      	adds	r3, #1
    d0dc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d0de:	f107 0310 	add.w	r3, r7, #16
    d0e2:	4619      	mov	r1, r3
    d0e4:	68b8      	ldr	r0, [r7, #8]
    d0e6:	f7ff fd68 	bl	cbba <decstr_to_int>
    d0ea:	4603      	mov	r3, r0
    d0ec:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d0ee:	693b      	ldr	r3, [r7, #16]
    d0f0:	68ba      	ldr	r2, [r7, #8]
    d0f2:	4413      	add	r3, r2
    d0f4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d0f6:	68bb      	ldr	r3, [r7, #8]
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	2b6c      	cmp	r3, #108	; 0x6c
    d0fc:	d10c      	bne.n	d118 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d0fe:	68bb      	ldr	r3, [r7, #8]
    d100:	3301      	adds	r3, #1
    d102:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d104:	68bb      	ldr	r3, [r7, #8]
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	2b6c      	cmp	r3, #108	; 0x6c
    d10a:	d105      	bne.n	d118 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d10c:	68bb      	ldr	r3, [r7, #8]
    d10e:	3301      	adds	r3, #1
    d110:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d112:	2301      	movs	r3, #1
    d114:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d118:	68bb      	ldr	r3, [r7, #8]
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	3b46      	subs	r3, #70	; 0x46
    d11e:	2b32      	cmp	r3, #50	; 0x32
    d120:	f200 8254 	bhi.w	d5cc <am_util_stdio_vsprintf+0x5b8>
    d124:	a201      	add	r2, pc, #4	; (adr r2, d12c <am_util_stdio_vsprintf+0x118>)
    d126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d12a:	bf00      	nop
    d12c:	0000d557 	.word	0x0000d557
    d130:	0000d5cd 	.word	0x0000d5cd
    d134:	0000d5cd 	.word	0x0000d5cd
    d138:	0000d5cd 	.word	0x0000d5cd
    d13c:	0000d5cd 	.word	0x0000d5cd
    d140:	0000d5cd 	.word	0x0000d5cd
    d144:	0000d5cd 	.word	0x0000d5cd
    d148:	0000d5cd 	.word	0x0000d5cd
    d14c:	0000d5cd 	.word	0x0000d5cd
    d150:	0000d5cd 	.word	0x0000d5cd
    d154:	0000d5cd 	.word	0x0000d5cd
    d158:	0000d5cd 	.word	0x0000d5cd
    d15c:	0000d5cd 	.word	0x0000d5cd
    d160:	0000d5cd 	.word	0x0000d5cd
    d164:	0000d5cd 	.word	0x0000d5cd
    d168:	0000d5cd 	.word	0x0000d5cd
    d16c:	0000d5cd 	.word	0x0000d5cd
    d170:	0000d5cd 	.word	0x0000d5cd
    d174:	0000d2f3 	.word	0x0000d2f3
    d178:	0000d5cd 	.word	0x0000d5cd
    d17c:	0000d5cd 	.word	0x0000d5cd
    d180:	0000d5cd 	.word	0x0000d5cd
    d184:	0000d5cd 	.word	0x0000d5cd
    d188:	0000d5cd 	.word	0x0000d5cd
    d18c:	0000d5cd 	.word	0x0000d5cd
    d190:	0000d5cd 	.word	0x0000d5cd
    d194:	0000d5cd 	.word	0x0000d5cd
    d198:	0000d5cd 	.word	0x0000d5cd
    d19c:	0000d5cd 	.word	0x0000d5cd
    d1a0:	0000d1f9 	.word	0x0000d1f9
    d1a4:	0000d41f 	.word	0x0000d41f
    d1a8:	0000d5cd 	.word	0x0000d5cd
    d1ac:	0000d557 	.word	0x0000d557
    d1b0:	0000d5cd 	.word	0x0000d5cd
    d1b4:	0000d5cd 	.word	0x0000d5cd
    d1b8:	0000d41f 	.word	0x0000d41f
    d1bc:	0000d5cd 	.word	0x0000d5cd
    d1c0:	0000d5cd 	.word	0x0000d5cd
    d1c4:	0000d5cd 	.word	0x0000d5cd
    d1c8:	0000d5cd 	.word	0x0000d5cd
    d1cc:	0000d5cd 	.word	0x0000d5cd
    d1d0:	0000d5cd 	.word	0x0000d5cd
    d1d4:	0000d5cd 	.word	0x0000d5cd
    d1d8:	0000d5cd 	.word	0x0000d5cd
    d1dc:	0000d5cd 	.word	0x0000d5cd
    d1e0:	0000d21f 	.word	0x0000d21f
    d1e4:	0000d5cd 	.word	0x0000d5cd
    d1e8:	0000d38d 	.word	0x0000d38d
    d1ec:	0000d5cd 	.word	0x0000d5cd
    d1f0:	0000d5cd 	.word	0x0000d5cd
    d1f4:	0000d2ed 	.word	0x0000d2ed
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	1d1a      	adds	r2, r3, #4
    d1fc:	607a      	str	r2, [r7, #4]
    d1fe:	681b      	ldr	r3, [r3, #0]
    d200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d204:	68fb      	ldr	r3, [r7, #12]
    d206:	2b00      	cmp	r3, #0
    d208:	d005      	beq.n	d216 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d20a:	68fb      	ldr	r3, [r7, #12]
    d20c:	1c5a      	adds	r2, r3, #1
    d20e:	60fa      	str	r2, [r7, #12]
    d210:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d214:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d218:	3301      	adds	r3, #1
    d21a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d21c:	e1e6      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d21e:	687b      	ldr	r3, [r7, #4]
    d220:	1d1a      	adds	r2, r3, #4
    d222:	607a      	str	r2, [r7, #4]
    d224:	681b      	ldr	r3, [r3, #0]
    d226:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d228:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d22a:	f7ff fdb4 	bl	cd96 <simple_strlen>
    d22e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d232:	2b00      	cmp	r3, #0
    d234:	dd2e      	ble.n	d294 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d23a:	429a      	cmp	r2, r3
    d23c:	d22a      	bcs.n	d294 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d23e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d242:	1ad3      	subs	r3, r2, r3
    d244:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d24a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d24c:	4619      	mov	r1, r3
    d24e:	68f8      	ldr	r0, [r7, #12]
    d250:	f7ff fdbc 	bl	cdcc <padbuffer>
    d254:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d256:	68fb      	ldr	r3, [r7, #12]
    d258:	2b00      	cmp	r3, #0
    d25a:	d001      	beq.n	d260 <am_util_stdio_vsprintf+0x24c>
    d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d25e:	e000      	b.n	d262 <am_util_stdio_vsprintf+0x24e>
    d260:	2300      	movs	r3, #0
    d262:	68fa      	ldr	r2, [r7, #12]
    d264:	4413      	add	r3, r2
    d266:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d26a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d26c:	4413      	add	r3, r2
    d26e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d270:	2300      	movs	r3, #0
    d272:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d274:	e00e      	b.n	d294 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d276:	68fb      	ldr	r3, [r7, #12]
    d278:	2b00      	cmp	r3, #0
    d27a:	d005      	beq.n	d288 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d27c:	68fb      	ldr	r3, [r7, #12]
    d27e:	1c5a      	adds	r2, r3, #1
    d280:	60fa      	str	r2, [r7, #12]
    d282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d284:	7812      	ldrb	r2, [r2, #0]
    d286:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d28a:	3301      	adds	r3, #1
    d28c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d290:	3301      	adds	r3, #1
    d292:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d296:	781b      	ldrb	r3, [r3, #0]
    d298:	2b00      	cmp	r3, #0
    d29a:	d1ec      	bne.n	d276 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d29e:	2b00      	cmp	r3, #0
    d2a0:	f000 81a1 	beq.w	d5e6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2a6:	425b      	negs	r3, r3
    d2a8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d2ae:	429a      	cmp	r2, r3
    d2b0:	f080 8199 	bcs.w	d5e6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2b8:	1ad3      	subs	r3, r2, r3
    d2ba:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d2c2:	4619      	mov	r1, r3
    d2c4:	68f8      	ldr	r0, [r7, #12]
    d2c6:	f7ff fd81 	bl	cdcc <padbuffer>
    d2ca:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d2cc:	68fb      	ldr	r3, [r7, #12]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	d001      	beq.n	d2d6 <am_util_stdio_vsprintf+0x2c2>
    d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2d4:	e000      	b.n	d2d8 <am_util_stdio_vsprintf+0x2c4>
    d2d6:	2300      	movs	r3, #0
    d2d8:	68fa      	ldr	r2, [r7, #12]
    d2da:	4413      	add	r3, r2
    d2dc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2e2:	4413      	add	r3, r2
    d2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d2e6:	2300      	movs	r3, #0
    d2e8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d2ea:	e17c      	b.n	d5e6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    d2ec:	2301      	movs	r3, #1
    d2ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d00a      	beq.n	d310 <am_util_stdio_vsprintf+0x2fc>
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	3307      	adds	r3, #7
    d2fe:	f023 0307 	bic.w	r3, r3, #7
    d302:	f103 0208 	add.w	r2, r3, #8
    d306:	607a      	str	r2, [r7, #4]
    d308:	cb18      	ldmia	r3, {r3, r4}
    d30a:	e007      	b.n	d31c <am_util_stdio_vsprintf+0x308>
    d30c:	10001c48 	.word	0x10001c48
                                      va_arg(pArgs, uint32_t);
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	1d1a      	adds	r2, r3, #4
    d314:	607a      	str	r2, [r7, #4]
    d316:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d318:	f04f 0400 	mov.w	r4, #0
    d31c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d322:	2b00      	cmp	r3, #0
    d324:	d01e      	beq.n	d364 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d326:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d32a:	f7ff fc22 	bl	cb72 <ndigits_in_hex>
    d32e:	4602      	mov	r2, r0
    d330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d332:	1a9b      	subs	r3, r3, r2
    d334:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d33c:	4619      	mov	r1, r3
    d33e:	68f8      	ldr	r0, [r7, #12]
    d340:	f7ff fd44 	bl	cdcc <padbuffer>
    d344:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d346:	68fb      	ldr	r3, [r7, #12]
    d348:	2b00      	cmp	r3, #0
    d34a:	d001      	beq.n	d350 <am_util_stdio_vsprintf+0x33c>
    d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d34e:	e000      	b.n	d352 <am_util_stdio_vsprintf+0x33e>
    d350:	2300      	movs	r3, #0
    d352:	68fa      	ldr	r2, [r7, #12]
    d354:	4413      	add	r3, r2
    d356:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d35a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d35c:	4413      	add	r3, r2
    d35e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d360:	2300      	movs	r3, #0
    d362:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d364:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d368:	68fa      	ldr	r2, [r7, #12]
    d36a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d36e:	f7ff fcb2 	bl	ccd6 <uint64_to_hexstr>
    d372:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d374:	68fb      	ldr	r3, [r7, #12]
    d376:	2b00      	cmp	r3, #0
    d378:	d003      	beq.n	d382 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d37c:	68fa      	ldr	r2, [r7, #12]
    d37e:	4413      	add	r3, r2
    d380:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d386:	4413      	add	r3, r2
    d388:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d38a:	e12f      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d38c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d390:	2b00      	cmp	r3, #0
    d392:	d008      	beq.n	d3a6 <am_util_stdio_vsprintf+0x392>
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	3307      	adds	r3, #7
    d398:	f023 0307 	bic.w	r3, r3, #7
    d39c:	f103 0208 	add.w	r2, r3, #8
    d3a0:	607a      	str	r2, [r7, #4]
    d3a2:	cb18      	ldmia	r3, {r3, r4}
    d3a4:	e005      	b.n	d3b2 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	1d1a      	adds	r2, r3, #4
    d3aa:	607a      	str	r2, [r7, #4]
    d3ac:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d3ae:	f04f 0400 	mov.w	r4, #0
    d3b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	d01e      	beq.n	d3fa <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d3bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d3c0:	f7ff fb99 	bl	caf6 <ndigits_in_u64>
    d3c4:	4602      	mov	r2, r0
    d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3c8:	1a9b      	subs	r3, r3, r2
    d3ca:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d3d2:	4619      	mov	r1, r3
    d3d4:	68f8      	ldr	r0, [r7, #12]
    d3d6:	f7ff fcf9 	bl	cdcc <padbuffer>
    d3da:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d3dc:	68fb      	ldr	r3, [r7, #12]
    d3de:	2b00      	cmp	r3, #0
    d3e0:	d001      	beq.n	d3e6 <am_util_stdio_vsprintf+0x3d2>
    d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3e4:	e000      	b.n	d3e8 <am_util_stdio_vsprintf+0x3d4>
    d3e6:	2300      	movs	r3, #0
    d3e8:	68fa      	ldr	r2, [r7, #12]
    d3ea:	4413      	add	r3, r2
    d3ec:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3f2:	4413      	add	r3, r2
    d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d3f6:	2300      	movs	r3, #0
    d3f8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d3fa:	68fa      	ldr	r2, [r7, #12]
    d3fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d400:	f7ff fc21 	bl	cc46 <uint64_to_str>
    d404:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d406:	68fb      	ldr	r3, [r7, #12]
    d408:	2b00      	cmp	r3, #0
    d40a:	d003      	beq.n	d414 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d40e:	68fa      	ldr	r2, [r7, #12]
    d410:	4413      	add	r3, r2
    d412:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d418:	4413      	add	r3, r2
    d41a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d41c:	e0e6      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d41e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d422:	2b00      	cmp	r3, #0
    d424:	d008      	beq.n	d438 <am_util_stdio_vsprintf+0x424>
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	3307      	adds	r3, #7
    d42a:	f023 0307 	bic.w	r3, r3, #7
    d42e:	f103 0208 	add.w	r2, r3, #8
    d432:	607a      	str	r2, [r7, #4]
    d434:	cb18      	ldmia	r3, {r3, r4}
    d436:	e005      	b.n	d444 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	1d1a      	adds	r2, r3, #4
    d43c:	607a      	str	r2, [r7, #4]
    d43e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d440:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d444:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d448:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d44c:	2b00      	cmp	r3, #0
    d44e:	f174 0300 	sbcs.w	r3, r4, #0
    d452:	da0a      	bge.n	d46a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d454:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d458:	425b      	negs	r3, r3
    d45a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d45e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d462:	2301      	movs	r3, #1
    d464:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d468:	e006      	b.n	d478 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    d46a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d46e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d472:	2300      	movs	r3, #0
    d474:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d47a:	2b00      	cmp	r3, #0
    d47c:	d04a      	beq.n	d514 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d47e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d482:	4618      	mov	r0, r3
    d484:	4621      	mov	r1, r4
    d486:	f7ff fb57 	bl	cb38 <ndigits_in_i64>
    d48a:	4602      	mov	r2, r0
    d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d48e:	1a9b      	subs	r3, r3, r2
    d490:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d496:	2b00      	cmp	r3, #0
    d498:	d011      	beq.n	d4be <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d49c:	3b01      	subs	r3, #1
    d49e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d4a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d4a4:	2b30      	cmp	r3, #48	; 0x30
    d4a6:	d10a      	bne.n	d4be <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d4a8:	68fb      	ldr	r3, [r7, #12]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d004      	beq.n	d4b8 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    d4ae:	68fb      	ldr	r3, [r7, #12]
    d4b0:	1c5a      	adds	r2, r3, #1
    d4b2:	60fa      	str	r2, [r7, #12]
    d4b4:	222d      	movs	r2, #45	; 0x2d
    d4b6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4ba:	3301      	adds	r3, #1
    d4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d4be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d4c4:	4619      	mov	r1, r3
    d4c6:	68f8      	ldr	r0, [r7, #12]
    d4c8:	f7ff fc80 	bl	cdcc <padbuffer>
    d4cc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	2b00      	cmp	r3, #0
    d4d2:	d001      	beq.n	d4d8 <am_util_stdio_vsprintf+0x4c4>
    d4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4d6:	e000      	b.n	d4da <am_util_stdio_vsprintf+0x4c6>
    d4d8:	2300      	movs	r3, #0
    d4da:	68fa      	ldr	r2, [r7, #12]
    d4dc:	4413      	add	r3, r2
    d4de:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4e4:	4413      	add	r3, r2
    d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d4e8:	2300      	movs	r3, #0
    d4ea:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d4ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d01e      	beq.n	d532 <am_util_stdio_vsprintf+0x51e>
    d4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d4f8:	2b20      	cmp	r3, #32
    d4fa:	d11a      	bne.n	d532 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d4fc:	68fb      	ldr	r3, [r7, #12]
    d4fe:	2b00      	cmp	r3, #0
    d500:	d004      	beq.n	d50c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    d502:	68fb      	ldr	r3, [r7, #12]
    d504:	1c5a      	adds	r2, r3, #1
    d506:	60fa      	str	r2, [r7, #12]
    d508:	222d      	movs	r2, #45	; 0x2d
    d50a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d50e:	3301      	adds	r3, #1
    d510:	63fb      	str	r3, [r7, #60]	; 0x3c
    d512:	e00e      	b.n	d532 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    d514:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d518:	2b00      	cmp	r3, #0
    d51a:	d00a      	beq.n	d532 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    d51c:	68fb      	ldr	r3, [r7, #12]
    d51e:	2b00      	cmp	r3, #0
    d520:	d004      	beq.n	d52c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    d522:	68fb      	ldr	r3, [r7, #12]
    d524:	1c5a      	adds	r2, r3, #1
    d526:	60fa      	str	r2, [r7, #12]
    d528:	222d      	movs	r2, #45	; 0x2d
    d52a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d52e:	3301      	adds	r3, #1
    d530:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d532:	68fa      	ldr	r2, [r7, #12]
    d534:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d538:	f7ff fb85 	bl	cc46 <uint64_to_str>
    d53c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d53e:	68fb      	ldr	r3, [r7, #12]
    d540:	2b00      	cmp	r3, #0
    d542:	d003      	beq.n	d54c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    d544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d546:	68fa      	ldr	r2, [r7, #12]
    d548:	4413      	add	r3, r2
    d54a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d54e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d550:	4413      	add	r3, r2
    d552:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d554:	e04a      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	2b00      	cmp	r3, #0
    d55a:	d046      	beq.n	d5ea <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    d55c:	687b      	ldr	r3, [r7, #4]
    d55e:	3307      	adds	r3, #7
    d560:	f023 0307 	bic.w	r3, r3, #7
    d564:	f103 0208 	add.w	r2, r3, #8
    d568:	607a      	str	r2, [r7, #4]
    d56a:	cb18      	ldmia	r3, {r3, r4}
    d56c:	4618      	mov	r0, r3
    d56e:	4621      	mov	r1, r4
    d570:	f7fe fdc6 	bl	c100 <__aeabi_d2f>
    d574:	4603      	mov	r3, r0
    d576:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d578:	68fb      	ldr	r3, [r7, #12]
    d57a:	2214      	movs	r2, #20
    d57c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d57e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d580:	68f9      	ldr	r1, [r7, #12]
    d582:	6978      	ldr	r0, [r7, #20]
    d584:	f7ff fc48 	bl	ce18 <ftoa>
    d588:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d58c:	2b00      	cmp	r3, #0
    d58e:	da14      	bge.n	d5ba <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d592:	f1b3 3fff 	cmp.w	r3, #4294967295
    d596:	d102      	bne.n	d59e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d598:	4b1e      	ldr	r3, [pc, #120]	; (d614 <am_util_stdio_vsprintf+0x600>)
    d59a:	62bb      	str	r3, [r7, #40]	; 0x28
    d59c:	e008      	b.n	d5b0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5a0:	f113 0f02 	cmn.w	r3, #2
    d5a4:	d102      	bne.n	d5ac <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d5a6:	4b1c      	ldr	r3, [pc, #112]	; (d618 <am_util_stdio_vsprintf+0x604>)
    d5a8:	62bb      	str	r3, [r7, #40]	; 0x28
    d5aa:	e001      	b.n	d5b0 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d5ac:	4b1b      	ldr	r3, [pc, #108]	; (d61c <am_util_stdio_vsprintf+0x608>)
    d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d5b0:	68fb      	ldr	r3, [r7, #12]
    d5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d5b4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d5b6:	2303      	movs	r3, #3
    d5b8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5be:	4413      	add	r3, r2
    d5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5c4:	68fa      	ldr	r2, [r7, #12]
    d5c6:	4413      	add	r3, r2
    d5c8:	60fb      	str	r3, [r7, #12]
                }
                break;
    d5ca:	e00e      	b.n	d5ea <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d5cc:	68fb      	ldr	r3, [r7, #12]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d005      	beq.n	d5de <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    d5d2:	68fb      	ldr	r3, [r7, #12]
    d5d4:	1c5a      	adds	r2, r3, #1
    d5d6:	60fa      	str	r2, [r7, #12]
    d5d8:	68ba      	ldr	r2, [r7, #8]
    d5da:	7812      	ldrb	r2, [r2, #0]
    d5dc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5e0:	3301      	adds	r3, #1
    d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d5e4:	e002      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>
                break;
    d5e6:	bf00      	nop
    d5e8:	e000      	b.n	d5ec <am_util_stdio_vsprintf+0x5d8>
                break;
    d5ea:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d5ec:	68bb      	ldr	r3, [r7, #8]
    d5ee:	3301      	adds	r3, #1
    d5f0:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d5f2:	68bb      	ldr	r3, [r7, #8]
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	f47f ad17 	bne.w	d02a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d5fc:	68fb      	ldr	r3, [r7, #12]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d002      	beq.n	d608 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    d602:	68fb      	ldr	r3, [r7, #12]
    d604:	2200      	movs	r2, #0
    d606:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d60a:	4618      	mov	r0, r3
    d60c:	3754      	adds	r7, #84	; 0x54
    d60e:	46bd      	mov	sp, r7
    d610:	bd90      	pop	{r4, r7, pc}
    d612:	bf00      	nop
    d614:	00302e30 	.word	0x00302e30
    d618:	00232e23 	.word	0x00232e23
    d61c:	003f2e3f 	.word	0x003f2e3f

0000d620 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d620:	b40f      	push	{r0, r1, r2, r3}
    d622:	b580      	push	{r7, lr}
    d624:	b082      	sub	sp, #8
    d626:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d628:	f107 0314 	add.w	r3, r7, #20
    d62c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d62e:	683a      	ldr	r2, [r7, #0]
    d630:	6939      	ldr	r1, [r7, #16]
    d632:	4808      	ldr	r0, [pc, #32]	; (d654 <am_util_stdio_printf+0x34>)
    d634:	f7ff fcee 	bl	d014 <am_util_stdio_vsprintf>
    d638:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d63a:	4b07      	ldr	r3, [pc, #28]	; (d658 <am_util_stdio_printf+0x38>)
    d63c:	681b      	ldr	r3, [r3, #0]
    d63e:	4805      	ldr	r0, [pc, #20]	; (d654 <am_util_stdio_printf+0x34>)
    d640:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d642:	687b      	ldr	r3, [r7, #4]
}
    d644:	4618      	mov	r0, r3
    d646:	3708      	adds	r7, #8
    d648:	46bd      	mov	sp, r7
    d64a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d64e:	b004      	add	sp, #16
    d650:	4770      	bx	lr
    d652:	bf00      	nop
    d654:	10001b48 	.word	0x10001b48
    d658:	10002c58 	.word	0x10002c58

0000d65c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    d65c:	b508      	push	{r3, lr}
am_bsp_itm_printf_disable(void)
{
    //
    // Disable the ITM/TPIU
    //
    am_hal_itm_disable();
    d65e:	f002 fe6b 	bl	10338 <am_hal_itm_disable>

    //
    // Detach the ITM interface from the STDIO driver.
    //
    am_util_stdio_printf_init(0);
    d662:	2000      	movs	r0, #0
    d664:	f7ff f958 	bl	c918 <am_util_stdio_printf_init>

    //
    // Disconnect the SWO pin
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d668:	4b08      	ldr	r3, [pc, #32]	; (d68c <am_bsp_low_power_init+0x30>)
    d66a:	2029      	movs	r0, #41	; 0x29
    d66c:	6819      	ldr	r1, [r3, #0]
    d66e:	f002 fcf7 	bl	10060 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d672:	f002 ffbd 	bl	105f0 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d676:	2001      	movs	r0, #1
    d678:	f002 fff8 	bl	1066c <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d67c:	2100      	movs	r1, #0
    d67e:	2003      	movs	r0, #3
    d680:	f002 fb44 	bl	fd0c <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d688:	f002 bffc 	b.w	10684 <am_hal_rtc_osc_disable>
    d68c:	00012fc4 	.word	0x00012fc4

0000d690 <am_bsp_itm_printf_enable>:
{
    d690:	b500      	push	{lr}
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d692:	4b0b      	ldr	r3, [pc, #44]	; (d6c0 <am_bsp_itm_printf_enable+0x30>)
{
    d694:	b087      	sub	sp, #28
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_SWO;
    d696:	2201      	movs	r2, #1
    d698:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    d69a:	f002 fe2f 	bl	102fc <am_hal_itm_enable>
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    d69e:	a806      	add	r0, sp, #24
    d6a0:	4908      	ldr	r1, [pc, #32]	; (d6c4 <am_bsp_itm_printf_enable+0x34>)
    d6a2:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    d6a6:	f002 fff7 	bl	10698 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
    d6aa:	4b07      	ldr	r3, [pc, #28]	; (d6c8 <am_bsp_itm_printf_enable+0x38>)
    d6ac:	2029      	movs	r0, #41	; 0x29
    d6ae:	6819      	ldr	r1, [r3, #0]
    d6b0:	f002 fcd6 	bl	10060 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
    d6b4:	4805      	ldr	r0, [pc, #20]	; (d6cc <am_bsp_itm_printf_enable+0x3c>)
    d6b6:	f7ff f92f 	bl	c918 <am_util_stdio_printf_init>
} // am_bsp_itm_printf_enable()
    d6ba:	b007      	add	sp, #28
    d6bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6c0:	10001c4c 	.word	0x10001c4c
    d6c4:	000f4240 	.word	0x000f4240
    d6c8:	00011b44 	.word	0x00011b44
    d6cc:	000103e1 	.word	0x000103e1

0000d6d0 <am_hal_ble_blocking_transfer.part.7>:
//
// Blocking write to the BLE module.
//
//*****************************************************************************
uint32_t
am_hal_ble_blocking_transfer(void *pHandle, am_hal_ble_transfer_t *psTransfer)
    d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // If we're writing, we need to lock down the bus now. Set the wakeup
    // signal, and start monitoring STATUS. If STATUS isn't high within our
    // configured timeout, we have to assume that the BLE core is unresponsive
    // and report an error back to the caller.
    //
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    d6d4:	7a8b      	ldrb	r3, [r1, #10]
    d6d6:	2b01      	cmp	r3, #1
am_hal_ble_blocking_transfer(void *pHandle, am_hal_ble_transfer_t *psTransfer)
    d6d8:	b085      	sub	sp, #20
    d6da:	460f      	mov	r7, r1
    d6dc:	4604      	mov	r4, r0
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    d6de:	d009      	beq.n	d6f4 <am_hal_ble_blocking_transfer.part.7+0x24>

    }
    else
    {
#if AM_CMSIS_REGS
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0)
    d6e0:	48ba      	ldr	r0, [pc, #744]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
    d6e2:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
    d6e6:	060a      	lsls	r2, r1, #24
    d6e8:	f100 826a 	bmi.w	dbc0 <am_hal_ble_blocking_transfer.part.7+0x4f0>
        {
            return AM_HAL_BLE_STATUS_IRQ_LOW;
    d6ec:	48b8      	ldr	r0, [pc, #736]	; (d9d0 <am_hal_ble_blocking_transfer.part.7+0x300>)

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    d6ee:	b005      	add	sp, #20
    d6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( pBle->bLastPacketWasTX == true)
    d6f4:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
    d6f8:	2e00      	cmp	r6, #0
    d6fa:	f040 815d 	bne.w	d9b8 <am_hal_ble_blocking_transfer.part.7+0x2e8>
        AM_CRITICAL_BEGIN;
    d6fe:	f002 fdf5 	bl	102ec <am_hal_interrupt_master_disable>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 1;
    d702:	4eb2      	ldr	r6, [pc, #712]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
        AM_CRITICAL_BEGIN;
    d704:	9000      	str	r0, [sp, #0]
        BLEIFn(0)->BLEDBG_b.IOCLKON = 1;
    d706:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
    d70a:	f043 0002 	orr.w	r0, r3, #2
    d70e:	f8c6 0410 	str.w	r0, [r6, #1040]	; 0x410
        BLEIFn(0)->INTCLR_b.BLECSSTAT = 1;
    d712:	f8d6 1228 	ldr.w	r1, [r6, #552]	; 0x228
    d716:	f441 7580 	orr.w	r5, r1, #256	; 0x100
    d71a:	f8c6 5228 	str.w	r5, [r6, #552]	; 0x228
        delay_us(5);
    d71e:	2027      	movs	r0, #39	; 0x27
    d720:	f002 fb6e 	bl	fe00 <am_hal_flash_delay>
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_ON;
    d724:	f8b6 2304 	ldrh.w	r2, [r6, #772]	; 0x304
        uint32_t ui32Timeout = 0;
    d728:	2500      	movs	r5, #0
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_ON;
    d72a:	f042 090c 	orr.w	r9, r2, #12
    d72e:	f8a6 9304 	strh.w	r9, [r6, #772]	; 0x304
                     (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ))
    d732:	46b2      	mov	sl, r6
        pBle->bContinuePacket = false;
    d734:	46ab      	mov	fp, r5
    if (pBle->bContinuePacket)
    d736:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    d73a:	2e00      	cmp	r6, #0
    d73c:	f000 8103 	beq.w	d946 <am_hal_ble_blocking_transfer.part.7+0x276>
        pBle->bContinuePacket = false;
    d740:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d

    //
    // In one atomic sweep, check to see if the bus is busy, and reserve it if
    // it isn't.
    //
    AM_CRITICAL_BEGIN;
    d744:	f002 fdd2 	bl	102ec <am_hal_interrupt_master_disable>

    if (pBle->bBusy == false)
    d748:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    AM_CRITICAL_BEGIN;
    d74c:	9002      	str	r0, [sp, #8]
    if (pBle->bBusy == false)
    d74e:	2e00      	cmp	r6, #0
    d750:	f040 8119 	bne.w	d986 <am_hal_ble_blocking_transfer.part.7+0x2b6>
    {
        am_hal_debug_gpio_set(BLE_DEBUG_TRACE_11);
        pBle->bBusy = true;
    d754:	2101      	movs	r1, #1
    else
    {
        bLockObtained = false;
    }

    AM_CRITICAL_END;
    d756:	9802      	ldr	r0, [sp, #8]
        pBle->bCmdComplete = 0;
    d758:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
        pBle->bDmaComplete = 0;
    d75c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
        pBle->bBusy = true;
    d760:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    AM_CRITICAL_END;
    d764:	f002 fdc6 	bl	102f4 <am_hal_interrupt_master_set>
    BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
    d768:	4898      	ldr	r0, [pc, #608]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
    d76a:	f8d0 5410 	ldr.w	r5, [r0, #1040]	; 0x410
    d76e:	f366 0541 	bfi	r5, r6, #1, #1
    d772:	f8c0 5410 	str.w	r5, [r0, #1040]	; 0x410
        AM_CRITICAL_END;
    d776:	9800      	ldr	r0, [sp, #0]
    d778:	f002 fdbc 	bl	102f4 <am_hal_interrupt_master_set>
    if (psTransfer->bContinue)
    d77c:	7b3a      	ldrb	r2, [r7, #12]
    d77e:	b11a      	cbz	r2, d788 <am_hal_ble_blocking_transfer.part.7+0xb8>
        pBle->bContinuePacket = true;
    d780:	f04f 0c01 	mov.w	ip, #1
    d784:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    memcpy(&pBle->sCurrentTransfer, psTransfer, sizeof(am_hal_ble_transfer_t));
    d788:	f104 0808 	add.w	r8, r4, #8
    d78c:	683e      	ldr	r6, [r7, #0]
    d78e:	6879      	ldr	r1, [r7, #4]
    d790:	68b8      	ldr	r0, [r7, #8]
    d792:	68fb      	ldr	r3, [r7, #12]
    d794:	60a6      	str	r6, [r4, #8]
    d796:	f8c8 1004 	str.w	r1, [r8, #4]
    d79a:	f8c8 0008 	str.w	r0, [r8, #8]
    d79e:	f8c8 300c 	str.w	r3, [r8, #12]
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    d7a2:	4e8a      	ldr	r6, [pc, #552]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
    memcpy(&pBle->sCurrentTransfer, psTransfer, sizeof(am_hal_ble_transfer_t));
    d7a4:	693d      	ldr	r5, [r7, #16]
    d7a6:	697a      	ldr	r2, [r7, #20]
    d7a8:	f8c8 2014 	str.w	r2, [r8, #20]
    d7ac:	f8c8 5010 	str.w	r5, [r8, #16]
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    d7b0:	f8d6 a220 	ldr.w	sl, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECIRQ = 0;
    d7b4:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
    d7b8:	f36f 11c7 	bfc	r1, #7, #1
    d7bc:	f8c6 1220 	str.w	r1, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.CMDCMP = 0;
    d7c0:	f8d6 0220 	ldr.w	r0, [r6, #544]	; 0x220
    d7c4:	f36f 0000 	bfc	r0, #0, #1
    d7c8:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.THR = 0;
    d7cc:	f8d6 3220 	ldr.w	r3, [r6, #544]	; 0x220
    d7d0:	f36f 0341 	bfc	r3, #1, #1
    d7d4:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
    d7d8:	f8d6 5228 	ldr.w	r5, [r6, #552]	; 0x228
    d7dc:	f045 0201 	orr.w	r2, r5, #1
    d7e0:	f8c6 2228 	str.w	r2, [r6, #552]	; 0x228
    AM_CRITICAL_BEGIN;
    d7e4:	f002 fd82 	bl	102ec <am_hal_interrupt_master_disable>
    uint32_t ui32Module;

    //
    // Check the handle.
    //
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    d7e8:	6826      	ldr	r6, [r4, #0]
    d7ea:	497a      	ldr	r1, [pc, #488]	; (d9d4 <am_hal_ble_blocking_transfer.part.7+0x304>)
    AM_CRITICAL_BEGIN;
    d7ec:	9001      	str	r0, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    d7ee:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    d7f2:	4288      	cmp	r0, r1
    d7f4:	f000 825d 	beq.w	dcb2 <am_hal_ble_blocking_transfer.part.7+0x5e2>
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    d7f8:	7abe      	ldrb	r6, [r7, #10]
    d7fa:	2e01      	cmp	r6, #1
    d7fc:	f000 81f3 	beq.w	dbe6 <am_hal_ble_blocking_transfer.part.7+0x516>
    d800:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    d804:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    d806:	4e73      	ldr	r6, [pc, #460]	; (d9d4 <am_hal_ble_blocking_transfer.part.7+0x304>)
    ui32RxDataLen = BLEIFn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
    d808:	4a70      	ldr	r2, [pc, #448]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
        pui32Data[ui32Index] = AM_REGn(BLEIF, ui32Module, FIFOPOP);
#endif // AM_CMSIS_REGS

#ifndef AM_HAL_BLE_NO_FIFO_PROTECTION
#if AM_CMSIS_REGS
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d80a:	2100      	movs	r1, #0
    d80c:	4575      	cmp	r5, lr
    d80e:	f080 815e 	bcs.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    d812:	6820      	ldr	r0, [r4, #0]
    d814:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
    d818:	45b4      	cmp	ip, r6
    d81a:	d1fd      	bne.n	d818 <am_hal_ble_blocking_transfer.part.7+0x148>
    ui32RxDataLen = BLEIFn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
    d81c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    d820:	f3c3 4007 	ubfx	r0, r3, #16, #8
    if (ui32RxDataLen < 4)
    d824:	2803      	cmp	r0, #3
    d826:	d9f1      	bls.n	d80c <am_hal_ble_blocking_transfer.part.7+0x13c>
    else if (ui32RxDataLen >= pTransfer->ui16Length)
    d828:	4570      	cmp	r0, lr
    ui32BytesLeft = (pTransfer->ui16Length - pBle->ui32TransferIndex);
    d82a:	bf2c      	ite	cs
    d82c:	ebae 0005 	subcs.w	r0, lr, r5
        ui32ReadSize = ui32RxDataLen & (~0x3);
    d830:	f020 0003 	biccc.w	r0, r0, #3
    pDest = &pTransfer->pui32Data[pBle->ui32TransferIndex / 4];
    d834:	f8d4 9008 	ldr.w	r9, [r4, #8]
    d838:	f025 0303 	bic.w	r3, r5, #3
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d83c:	2800      	cmp	r0, #0
    d83e:	d07f      	beq.n	d940 <am_hal_ble_blocking_transfer.part.7+0x270>
    d840:	eb09 0c03 	add.w	ip, r9, r3
    d844:	ea6f 050c 	mvn.w	r5, ip
    d848:	4465      	add	r5, ip
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d84a:	f8d2 b108 	ldr.w	fp, [r2, #264]	; 0x108
    d84e:	f849 b003 	str.w	fp, [r9, r3]
    d852:	4405      	add	r5, r0
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d854:	2804      	cmp	r0, #4
    d856:	f3c5 0582 	ubfx	r5, r5, #2, #3
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d85a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d85e:	f10c 0304 	add.w	r3, ip, #4
    d862:	d96c      	bls.n	d93e <am_hal_ble_blocking_transfer.part.7+0x26e>
    d864:	b3d5      	cbz	r5, d8dc <am_hal_ble_blocking_transfer.part.7+0x20c>
    d866:	2d01      	cmp	r5, #1
    d868:	d02e      	beq.n	d8c8 <am_hal_ble_blocking_transfer.part.7+0x1f8>
    d86a:	2d02      	cmp	r5, #2
    d86c:	d026      	beq.n	d8bc <am_hal_ble_blocking_transfer.part.7+0x1ec>
    d86e:	2d03      	cmp	r5, #3
    d870:	d01e      	beq.n	d8b0 <am_hal_ble_blocking_transfer.part.7+0x1e0>
    d872:	2d04      	cmp	r5, #4
    d874:	d016      	beq.n	d8a4 <am_hal_ble_blocking_transfer.part.7+0x1d4>
    d876:	2d05      	cmp	r5, #5
    d878:	d00e      	beq.n	d898 <am_hal_ble_blocking_transfer.part.7+0x1c8>
    d87a:	2d06      	cmp	r5, #6
    d87c:	d006      	beq.n	d88c <am_hal_ble_blocking_transfer.part.7+0x1bc>
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d87e:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d882:	f8cc 5004 	str.w	r5, [ip, #4]
    d886:	3304      	adds	r3, #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d888:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d88c:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d890:	f843 5b04 	str.w	r5, [r3], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d894:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d898:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d89c:	f843 5b04 	str.w	r5, [r3], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8a0:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8a4:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d8a8:	f843 5b04 	str.w	r5, [r3], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8ac:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8b0:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d8b4:	f843 5b04 	str.w	r5, [r3], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8b8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8bc:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d8c0:	f843 5b04 	str.w	r5, [r3], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8c4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8c8:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d8cc:	f843 5b04 	str.w	r5, [r3], #4
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d8d0:	eba3 090c 	sub.w	r9, r3, ip
    d8d4:	4581      	cmp	r9, r0
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8d6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d8da:	d230      	bcs.n	d93e <am_hal_ble_blocking_transfer.part.7+0x26e>
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8dc:	469b      	mov	fp, r3
    d8de:	f8d2 9108 	ldr.w	r9, [r2, #264]	; 0x108
    d8e2:	f84b 9b04 	str.w	r9, [fp], #4
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8e6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8ea:	f8d2 9108 	ldr.w	r9, [r2, #264]	; 0x108
    d8ee:	f8c3 9004 	str.w	r9, [r3, #4]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8f2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d8f6:	f8d2 9108 	ldr.w	r9, [r2, #264]	; 0x108
    d8fa:	f8cb 9004 	str.w	r9, [fp, #4]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d8fe:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d902:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d906:	60dd      	str	r5, [r3, #12]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d908:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d90c:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d910:	611d      	str	r5, [r3, #16]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d912:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d916:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d91a:	615d      	str	r5, [r3, #20]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d91c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d920:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d924:	619d      	str	r5, [r3, #24]
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d926:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
    d92a:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
    d92e:	61dd      	str	r5, [r3, #28]
    d930:	3320      	adds	r3, #32
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d932:	eba3 0b0c 	sub.w	fp, r3, ip
    d936:	4583      	cmp	fp, r0
        BLEIFn(ui32Module)->FIFOPOP = 0;
    d938:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
    d93c:	d3ce      	bcc.n	d8dc <am_hal_ble_blocking_transfer.part.7+0x20c>
    d93e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    pBle->ui32TransferIndex += ui32ReadSize;
    d940:	4405      	add	r5, r0
    d942:	63a5      	str	r5, [r4, #56]	; 0x38
    d944:	e762      	b.n	d80c <am_hal_ble_blocking_transfer.part.7+0x13c>
    if (pBle->bPatchComplete == false)
    d946:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    d94a:	b183      	cbz	r3, d96e <am_hal_ble_blocking_transfer.part.7+0x29e>
    if ( BLEIFn(0)->INTSTAT_b.BLECSSTAT == 0)
    d94c:	f8da 0224 	ldr.w	r0, [sl, #548]	; 0x224
    d950:	05c0      	lsls	r0, r0, #23
    d952:	f53f aef7 	bmi.w	d744 <am_hal_ble_blocking_transfer.part.7+0x74>
            else if ((ui32Timeout == ui32TimeoutLimit) ||
    d956:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
    d95a:	d018      	beq.n	d98e <am_hal_ble_blocking_transfer.part.7+0x2be>
                     (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ))
    d95c:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
            else if ((ui32Timeout == ui32TimeoutLimit) ||
    d960:	0611      	lsls	r1, r2, #24
    d962:	d414      	bmi.n	d98e <am_hal_ble_blocking_transfer.part.7+0x2be>
            delay_us(10);
    d964:	2077      	movs	r0, #119	; 0x77
            ui32Timeout++;
    d966:	3501      	adds	r5, #1
            delay_us(10);
    d968:	f002 fa4a 	bl	fe00 <am_hal_flash_delay>
    d96c:	e6e3      	b.n	d736 <am_hal_ble_blocking_transfer.part.7+0x66>
    if ( BLEIFn(0)->BSTATUS_b.SPISTATUS == 0)
    d96e:	f8da 130c 	ldr.w	r1, [sl, #780]	; 0x30c
    d972:	070e      	lsls	r6, r1, #28
    d974:	d5ef      	bpl.n	d956 <am_hal_ble_blocking_transfer.part.7+0x286>
    AM_CRITICAL_BEGIN;
    d976:	f002 fcb9 	bl	102ec <am_hal_interrupt_master_disable>
    if (pBle->bBusy == false)
    d97a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    AM_CRITICAL_BEGIN;
    d97e:	9002      	str	r0, [sp, #8]
    if (pBle->bBusy == false)
    d980:	2e00      	cmp	r6, #0
    d982:	f43f aee7 	beq.w	d754 <am_hal_ble_blocking_transfer.part.7+0x84>
    AM_CRITICAL_END;
    d986:	9802      	ldr	r0, [sp, #8]
    d988:	f002 fcb4 	bl	102f4 <am_hal_interrupt_master_set>
    d98c:	e7ea      	b.n	d964 <am_hal_ble_blocking_transfer.part.7+0x294>
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
    d98e:	4c0f      	ldr	r4, [pc, #60]	; (d9cc <am_hal_ble_blocking_transfer.part.7+0x2fc>)
    d990:	f8b4 7304 	ldrh.w	r7, [r4, #772]	; 0x304
    d994:	2602      	movs	r6, #2
    d996:	f366 0783 	bfi	r7, r6, #2, #2
    d99a:	f8a4 7304 	strh.w	r7, [r4, #772]	; 0x304
    BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
    d99e:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    d9a2:	f36f 0341 	bfc	r3, #1, #1
    d9a6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        AM_CRITICAL_END;
    d9aa:	9800      	ldr	r0, [sp, #0]
    d9ac:	f002 fca2 	bl	102f4 <am_hal_interrupt_master_set>
                ui32SpiStatus = AM_HAL_BLE_STATUS_SPI_NOT_READY;
    d9b0:	4809      	ldr	r0, [pc, #36]	; (d9d8 <am_hal_ble_blocking_transfer.part.7+0x308>)
}
    d9b2:	b005      	add	sp, #20
    d9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            delay_ms(2);
    d9b8:	f647 40d7 	movw	r0, #31959	; 0x7cd7
            pBle->bLastPacketWasTX = false;
    d9bc:	f04f 0800 	mov.w	r8, #0
            delay_ms(2);
    d9c0:	f002 fa1e 	bl	fe00 <am_hal_flash_delay>
            pBle->bLastPacketWasTX = false;
    d9c4:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
    d9c8:	e699      	b.n	d6fe <am_hal_ble_blocking_transfer.part.7+0x2e>
    d9ca:	bf00      	nop
    d9cc:	5000c000 	.word	0x5000c000
    d9d0:	08000001 	.word	0x08000001
    d9d4:	01775230 	.word	0x01775230
    d9d8:	08000002 	.word	0x08000002
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    d9dc:	6835      	ldr	r5, [r6, #0]
    d9de:	f8cb 510c 	str.w	r5, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    d9e2:	f1b9 0f03 	cmp.w	r9, #3
    d9e6:	d972      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                ui32FifoRem -= 4;
    d9e8:	1f1a      	subs	r2, r3, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    d9ea:	2a03      	cmp	r2, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    d9ec:	f106 0604 	add.w	r6, r6, #4
                    ui32Bytes -= 4;
    d9f0:	f1a9 0004 	sub.w	r0, r9, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    d9f4:	d967      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
    d9f6:	f3c0 0181 	ubfx	r1, r0, #2, #2
    d9fa:	eba3 0309 	sub.w	r3, r3, r9
    d9fe:	4632      	mov	r2, r6
    da00:	b329      	cbz	r1, da4e <am_hal_ble_blocking_transfer.part.7+0x37e>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da02:	4632      	mov	r2, r6
                if (ui32Bytes >= 4)
    da04:	2803      	cmp	r0, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da06:	f852 6b04 	ldr.w	r6, [r2], #4
    da0a:	f8cb 610c 	str.w	r6, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da0e:	d95e      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    ui32Bytes -= 4;
    da10:	3804      	subs	r0, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da12:	18c5      	adds	r5, r0, r3
    da14:	2d03      	cmp	r5, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da16:	4616      	mov	r6, r2
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da18:	d955      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
    da1a:	2901      	cmp	r1, #1
    da1c:	d017      	beq.n	da4e <am_hal_ble_blocking_transfer.part.7+0x37e>
    da1e:	2902      	cmp	r1, #2
    da20:	d00a      	beq.n	da38 <am_hal_ble_blocking_transfer.part.7+0x368>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da22:	f852 1b04 	ldr.w	r1, [r2], #4
    da26:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da2a:	2803      	cmp	r0, #3
    da2c:	d94f      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    ui32Bytes -= 4;
    da2e:	3804      	subs	r0, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da30:	18c5      	adds	r5, r0, r3
    da32:	2d03      	cmp	r5, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da34:	4616      	mov	r6, r2
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da36:	d946      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da38:	f852 6b04 	ldr.w	r6, [r2], #4
    da3c:	f8cb 610c 	str.w	r6, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da40:	2803      	cmp	r0, #3
    da42:	d944      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    ui32Bytes -= 4;
    da44:	3804      	subs	r0, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da46:	18c1      	adds	r1, r0, r3
    da48:	2903      	cmp	r1, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da4a:	4616      	mov	r6, r2
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da4c:	d93b      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da4e:	4691      	mov	r9, r2
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da50:	b3e8      	cbz	r0, dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da52:	f859 5b04 	ldr.w	r5, [r9], #4
    da56:	f8cb 510c 	str.w	r5, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da5a:	2803      	cmp	r0, #3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da5c:	464e      	mov	r6, r9
                    ui32Bytes -= 4;
    da5e:	f1a0 0004 	sub.w	r0, r0, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da62:	eb00 0103 	add.w	r1, r0, r3
                    ui32Bytes -= 4;
    da66:	4686      	mov	lr, r0
    da68:	f106 0504 	add.w	r5, r6, #4
                if (ui32Bytes >= 4)
    da6c:	d92f      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da6e:	2903      	cmp	r1, #3
    da70:	f102 0c0c 	add.w	ip, r2, #12
    da74:	d927      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da76:	f8d9 6000 	ldr.w	r6, [r9]
    da7a:	f8cb 610c 	str.w	r6, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da7e:	2803      	cmp	r0, #3
                    ui32Bytes -= 4;
    da80:	f1a0 0004 	sub.w	r0, r0, #4
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da84:	eb00 0103 	add.w	r1, r0, r3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da88:	462e      	mov	r6, r5
                if (ui32Bytes >= 4)
    da8a:	d920      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    da8c:	2903      	cmp	r1, #3
    da8e:	f102 0210 	add.w	r2, r2, #16
    da92:	d918      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    da94:	682d      	ldr	r5, [r5, #0]
    da96:	f8cb 510c 	str.w	r5, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    da9a:	2803      	cmp	r0, #3
                    ui32Bytes -= 4;
    da9c:	f1ae 0008 	sub.w	r0, lr, #8
            while ((ui32FifoRem >= 4) && ui32Bytes)
    daa0:	eb00 0103 	add.w	r1, r0, r3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    daa4:	4666      	mov	r6, ip
                if (ui32Bytes >= 4)
    daa6:	d912      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    daa8:	2903      	cmp	r1, #3
    daaa:	d90c      	bls.n	dac6 <am_hal_ble_blocking_transfer.part.7+0x3f6>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    daac:	f8dc 6000 	ldr.w	r6, [ip]
    dab0:	f8cb 610c 	str.w	r6, [fp, #268]	; 0x10c
                if (ui32Bytes >= 4)
    dab4:	2803      	cmp	r0, #3
                    ui32Bytes -= 4;
    dab6:	f1ae 000c 	sub.w	r0, lr, #12
            while ((ui32FifoRem >= 4) && ui32Bytes)
    daba:	eb00 0503 	add.w	r5, r0, r3
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
    dabe:	4616      	mov	r6, r2
                if (ui32Bytes >= 4)
    dac0:	d905      	bls.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
            while ((ui32FifoRem >= 4) && ui32Bytes)
    dac2:	2d03      	cmp	r5, #3
    dac4:	d8c3      	bhi.n	da4e <am_hal_ble_blocking_transfer.part.7+0x37e>
                    ui32Bytes -= 4;
    dac6:	4681      	mov	r9, r0
        while (ui32Bytes)
    dac8:	2800      	cmp	r0, #0
    daca:	f040 8095 	bne.w	dbf8 <am_hal_ble_blocking_transfer.part.7+0x528>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
    dace:	4dbc      	ldr	r5, [pc, #752]	; (ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>)
    dad0:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
    dad4:	07d0      	lsls	r0, r2, #31
    dad6:	d444      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    dad8:	f242 7610 	movw	r6, #10000	; 0x2710
    dadc:	2001      	movs	r0, #1
    dade:	f002 f98f 	bl	fe00 <am_hal_flash_delay>
    dae2:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
    dae6:	07cb      	lsls	r3, r1, #31
    dae8:	f04f 0001 	mov.w	r0, #1
    daec:	d439      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    daee:	f002 f987 	bl	fe00 <am_hal_flash_delay>
    daf2:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
    daf6:	07da      	lsls	r2, r3, #31
    daf8:	f04f 0001 	mov.w	r0, #1
    dafc:	d431      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    dafe:	f002 f97f 	bl	fe00 <am_hal_flash_delay>
    db02:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
    db06:	07d1      	lsls	r1, r2, #31
    db08:	f04f 0001 	mov.w	r0, #1
    db0c:	d429      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db0e:	f002 f977 	bl	fe00 <am_hal_flash_delay>
    db12:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
    db16:	07ca      	lsls	r2, r1, #31
    db18:	f04f 0001 	mov.w	r0, #1
    db1c:	d421      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db1e:	f002 f96f 	bl	fe00 <am_hal_flash_delay>
    db22:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
    db26:	07db      	lsls	r3, r3, #31
    db28:	f04f 0001 	mov.w	r0, #1
    db2c:	d419      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db2e:	f002 f967 	bl	fe00 <am_hal_flash_delay>
    db32:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
    db36:	07d1      	lsls	r1, r2, #31
    db38:	f04f 0001 	mov.w	r0, #1
    db3c:	d411      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db3e:	f002 f95f 	bl	fe00 <am_hal_flash_delay>
    db42:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
    db46:	07ca      	lsls	r2, r1, #31
    db48:	f04f 0001 	mov.w	r0, #1
    db4c:	d409      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db4e:	f002 f957 	bl	fe00 <am_hal_flash_delay>
    db52:	f8d5 0224 	ldr.w	r0, [r5, #548]	; 0x224
    db56:	07c3      	lsls	r3, r0, #31
    db58:	d403      	bmi.n	db62 <am_hal_ble_blocking_transfer.part.7+0x492>
    db5a:	3e08      	subs	r6, #8
    db5c:	d1be      	bne.n	dadc <am_hal_ble_blocking_transfer.part.7+0x40c>
    db5e:	4899      	ldr	r0, [pc, #612]	; (ddc4 <am_hal_ble_blocking_transfer.part.7+0x6f4>)
    db60:	e5c5      	b.n	d6ee <am_hal_ble_blocking_transfer.part.7+0x1e>
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
    db62:	4d97      	ldr	r5, [pc, #604]	; (ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>)
    db64:	f8d5 6228 	ldr.w	r6, [r5, #552]	; 0x228
    db68:	f046 0301 	orr.w	r3, r6, #1
    db6c:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.THR = 1;
    db70:	f8d5 2228 	ldr.w	r2, [r5, #552]	; 0x228
    memset(&pBle->sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
    db74:	2000      	movs	r0, #0
    BLEIFn(ui32Module)->INTCLR_b.THR = 1;
    db76:	f042 0102 	orr.w	r1, r2, #2
    db7a:	f8c5 1228 	str.w	r1, [r5, #552]	; 0x228
    memset(&pBle->sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
    db7e:	60a0      	str	r0, [r4, #8]
    db80:	f8c8 0004 	str.w	r0, [r8, #4]
    db84:	f8c8 0008 	str.w	r0, [r8, #8]
    db88:	f8c8 000c 	str.w	r0, [r8, #12]
    db8c:	f8c8 0010 	str.w	r0, [r8, #16]
    db90:	f8c8 0014 	str.w	r0, [r8, #20]
    pBle->ui32TransferIndex = 0;
    db94:	63a0      	str	r0, [r4, #56]	; 0x38
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    db96:	7abb      	ldrb	r3, [r7, #10]
    db98:	2b01      	cmp	r3, #1
    db9a:	f000 80f0 	beq.w	dd7e <am_hal_ble_blocking_transfer.part.7+0x6ae>
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
    db9e:	2b02      	cmp	r3, #2
    dba0:	f000 80f8 	beq.w	dd94 <am_hal_ble_blocking_transfer.part.7+0x6c4>
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    dba4:	4886      	ldr	r0, [pc, #536]	; (ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>)
    pBle->bBusy = false;
    dba6:	f04f 0800 	mov.w	r8, #0
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    dbaa:	f8c0 a220 	str.w	sl, [r0, #544]	; 0x220
    AM_CRITICAL_END;  //fixme moved further down to cover am_hal_ble_bus_release();
    dbae:	9801      	ldr	r0, [sp, #4]
    pBle->bBusy = false;
    dbb0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    AM_CRITICAL_END;  //fixme moved further down to cover am_hal_ble_bus_release();
    dbb4:	f002 fb9e 	bl	102f4 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    dbb8:	4640      	mov	r0, r8
}
    dbba:	b005      	add	sp, #20
    dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AM_CRITICAL_BEGIN;
    dbc0:	f002 fb94 	bl	102ec <am_hal_interrupt_master_disable>
    if (pBle->bBusy == false)
    dbc4:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
    AM_CRITICAL_BEGIN;
    dbc8:	9003      	str	r0, [sp, #12]
    AM_CRITICAL_END;
    dbca:	9803      	ldr	r0, [sp, #12]
    if (pBle->bBusy == false)
    dbcc:	2d00      	cmp	r5, #0
    dbce:	f040 80ea 	bne.w	dda6 <am_hal_ble_blocking_transfer.part.7+0x6d6>
        pBle->bBusy = true;
    dbd2:	2201      	movs	r2, #1
        pBle->bCmdComplete = 0;
    dbd4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        pBle->bDmaComplete = 0;
    dbd8:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        pBle->bBusy = true;
    dbdc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    AM_CRITICAL_END;
    dbe0:	f002 fb88 	bl	102f4 <am_hal_interrupt_master_set>
    dbe4:	e5ca      	b.n	d77c <am_hal_ble_blocking_transfer.part.7+0xac>
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
    dbe6:	f8b4 9010 	ldrh.w	r9, [r4, #16]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
    dbea:	68a6      	ldr	r6, [r4, #8]
        while (ui32Bytes)
    dbec:	f1b9 0f00 	cmp.w	r9, #0
    dbf0:	f43f af6d 	beq.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dbf4:	f8df b1c8 	ldr.w	fp, [pc, #456]	; ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>
    dbf8:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    dbfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dc00:	2b03      	cmp	r3, #3
    dc02:	f63f aeeb 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dc06:	f8db 0224 	ldr.w	r0, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dc0a:	07c1      	lsls	r1, r0, #31
    dc0c:	f53f af5f 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
    dc10:	4d6d      	ldr	r5, [pc, #436]	; (ddc8 <am_hal_ble_blocking_transfer.part.7+0x6f8>)
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    dc12:	2001      	movs	r0, #1
    dc14:	f002 f8f4 	bl	fe00 <am_hal_flash_delay>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dc18:	f8db 1100 	ldr.w	r1, [fp, #256]	; 0x100
    dc1c:	f3c1 2307 	ubfx	r3, r1, #8, #8
    dc20:	2b03      	cmp	r3, #3
    dc22:	f63f aedb 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dc26:	f8db 2224 	ldr.w	r2, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dc2a:	07d3      	lsls	r3, r2, #31
    dc2c:	f53f af4f 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    dc30:	2001      	movs	r0, #1
    dc32:	f002 f8e5 	bl	fe00 <am_hal_flash_delay>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dc36:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    dc3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dc3e:	2b03      	cmp	r3, #3
    dc40:	f105 35ff 	add.w	r5, r5, #4294967295
    dc44:	f63f aeca 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dc48:	f8db 0224 	ldr.w	r0, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dc4c:	07c0      	lsls	r0, r0, #31
    dc4e:	f53f af3e 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    dc52:	2001      	movs	r0, #1
    dc54:	f002 f8d4 	bl	fe00 <am_hal_flash_delay>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dc58:	f8db 1100 	ldr.w	r1, [fp, #256]	; 0x100
    dc5c:	f3c1 2307 	ubfx	r3, r1, #8, #8
    dc60:	2b03      	cmp	r3, #3
    dc62:	f63f aebb 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dc66:	f8db 2224 	ldr.w	r2, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dc6a:	07d1      	lsls	r1, r2, #31
    dc6c:	f53f af2f 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    dc70:	2001      	movs	r0, #1
    dc72:	f002 f8c5 	bl	fe00 <am_hal_flash_delay>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dc76:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    dc7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dc7e:	2b03      	cmp	r3, #3
    dc80:	f63f aeac 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dc84:	f8db 0224 	ldr.w	r0, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dc88:	07c2      	lsls	r2, r0, #31
    dc8a:	f53f af20 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
    dc8e:	2001      	movs	r0, #1
    dc90:	f002 f8b6 	bl	fe00 <am_hal_flash_delay>
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
    dc94:	f8db 1100 	ldr.w	r1, [fp, #256]	; 0x100
    dc98:	f3c1 2307 	ubfx	r3, r1, #8, #8
    dc9c:	2b03      	cmp	r3, #3
    dc9e:	f63f ae9d 	bhi.w	d9dc <am_hal_ble_blocking_transfer.part.7+0x30c>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
    dca2:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
    dca6:	07db      	lsls	r3, r3, #31
    dca8:	f53f af11 	bmi.w	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
    dcac:	3d04      	subs	r5, #4
    dcae:	d1b0      	bne.n	dc12 <am_hal_ble_blocking_transfer.part.7+0x542>
    dcb0:	e70d      	b.n	dace <am_hal_ble_blocking_transfer.part.7+0x3fe>
    switch (psTransfer->ui8OffsetLen)
    dcb2:	79fa      	ldrb	r2, [r7, #7]
    dcb4:	2a03      	cmp	r2, #3
    dcb6:	d87b      	bhi.n	ddb0 <am_hal_ble_blocking_transfer.part.7+0x6e0>
    dcb8:	e8df f002 	tbb	[pc, r2]
    dcbc:	2e343802 	.word	0x2e343802
            ui32OffsetHigh = 0;
    dcc0:	2500      	movs	r5, #0
            ui32CmdWord = 0;
    dcc2:	4629      	mov	r1, r5
                    psTransfer->ui8Command);
    dcc4:	7abe      	ldrb	r6, [r7, #10]
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dcc6:	f897 900c 	ldrb.w	r9, [r7, #12]
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
    dcca:	f8b7 b008 	ldrh.w	fp, [r7, #8]
    dcce:	f8df e100 	ldr.w	lr, [pc, #256]	; ddd0 <am_hal_ble_blocking_transfer.part.7+0x700>
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
    dcd2:	0150      	lsls	r0, r2, #5
    dcd4:	f000 0060 	and.w	r0, r0, #96	; 0x60
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dcd8:	ea46 13c9 	orr.w	r3, r6, r9, lsl #7
    dcdc:	4303      	orrs	r3, r0
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
    dcde:	ea0e 200b 	and.w	r0, lr, fp, lsl #8
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dce2:	4303      	orrs	r3, r0
    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
    dce4:	4836      	ldr	r0, [pc, #216]	; (ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>)
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
    dce6:	430b      	orrs	r3, r1
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    dce8:	2e01      	cmp	r6, #1
    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
    dcea:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    BLEIFn(ui32Module)->CMD = ui32CmdWord;
    dcee:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    dcf2:	f47f ad85 	bne.w	d800 <am_hal_ble_blocking_transfer.part.7+0x130>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    dcf6:	6825      	ldr	r5, [r4, #0]
    dcf8:	4934      	ldr	r1, [pc, #208]	; (ddcc <am_hal_ble_blocking_transfer.part.7+0x6fc>)
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
    dcfa:	f8b4 9010 	ldrh.w	r9, [r4, #16]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
    dcfe:	68a6      	ldr	r6, [r4, #8]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    dd00:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    dd04:	458c      	cmp	ip, r1
    dd06:	f47f af71 	bne.w	dbec <am_hal_ble_blocking_transfer.part.7+0x51c>
    switch (psTransfer->ui8OffsetLen)
    dd0a:	2a03      	cmp	r2, #3
    dd0c:	f63f af6e 	bhi.w	dbec <am_hal_ble_blocking_transfer.part.7+0x51c>
    dd10:	e8df f002 	tbb	[pc, r2]
    dd14:	102a2e32 	.word	0x102a2e32
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
    dd18:	88bd      	ldrh	r5, [r7, #4]
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
    dd1a:	79bb      	ldrb	r3, [r7, #6]
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
    dd1c:	ba6e      	rev16	r6, r5
    dd1e:	b2b5      	uxth	r5, r6
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
    dd20:	0619      	lsls	r1, r3, #24
    dd22:	e7cf      	b.n	dcc4 <am_hal_ble_blocking_transfer.part.7+0x5f4>
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
    dd24:	7979      	ldrb	r1, [r7, #5]
            ui32OffsetHigh = psTransfer->pui8Offset[0];
    dd26:	793d      	ldrb	r5, [r7, #4]
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
    dd28:	0609      	lsls	r1, r1, #24
    dd2a:	e7cb      	b.n	dcc4 <am_hal_ble_blocking_transfer.part.7+0x5f4>
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
    dd2c:	7938      	ldrb	r0, [r7, #4]
            ui32OffsetHigh = 0;
    dd2e:	2500      	movs	r5, #0
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
    dd30:	0601      	lsls	r1, r0, #24
    dd32:	e7c7      	b.n	dcc4 <am_hal_ble_blocking_transfer.part.7+0x5f4>
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
    dd34:	88b8      	ldrh	r0, [r7, #4]
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
    dd36:	79bb      	ldrb	r3, [r7, #6]
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
    dd38:	ba45      	rev16	r5, r0
    dd3a:	b2a8      	uxth	r0, r5
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
    dd3c:	0619      	lsls	r1, r3, #24
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dd3e:	7b3b      	ldrb	r3, [r7, #12]
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
    dd40:	f8b7 b008 	ldrh.w	fp, [r7, #8]
    dd44:	4d22      	ldr	r5, [pc, #136]	; (ddd0 <am_hal_ble_blocking_transfer.part.7+0x700>)
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
    dd46:	0152      	lsls	r2, r2, #5
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dd48:	01db      	lsls	r3, r3, #7
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
    dd4a:	f002 0260 	and.w	r2, r2, #96	; 0x60
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dd4e:	f043 0301 	orr.w	r3, r3, #1
    dd52:	4313      	orrs	r3, r2
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
    dd54:	ea05 250b 	and.w	r5, r5, fp, lsl #8
    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
    dd58:	4a19      	ldr	r2, [pc, #100]	; (ddc0 <am_hal_ble_blocking_transfer.part.7+0x6f0>)
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
    dd5a:	432b      	orrs	r3, r5
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
    dd5c:	430b      	orrs	r3, r1
    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
    dd5e:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    BLEIFn(ui32Module)->CMD = ui32CmdWord;
    dd62:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
    dd66:	e741      	b.n	dbec <am_hal_ble_blocking_transfer.part.7+0x51c>
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
    dd68:	7979      	ldrb	r1, [r7, #5]
            ui32OffsetHigh = psTransfer->pui8Offset[0];
    dd6a:	7938      	ldrb	r0, [r7, #4]
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
    dd6c:	0609      	lsls	r1, r1, #24
    dd6e:	e7e6      	b.n	dd3e <am_hal_ble_blocking_transfer.part.7+0x66e>
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
    dd70:	793b      	ldrb	r3, [r7, #4]
            ui32OffsetHigh = 0;
    dd72:	2000      	movs	r0, #0
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
    dd74:	0619      	lsls	r1, r3, #24
    dd76:	e7e2      	b.n	dd3e <am_hal_ble_blocking_transfer.part.7+0x66e>
            ui32OffsetHigh = 0;
    dd78:	2000      	movs	r0, #0
            ui32CmdWord = 0;
    dd7a:	4601      	mov	r1, r0
    dd7c:	e7df      	b.n	dd3e <am_hal_ble_blocking_transfer.part.7+0x66e>
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
    dd7e:	f8b5 6304 	ldrh.w	r6, [r5, #772]	; 0x304
    dd82:	2202      	movs	r2, #2
    dd84:	f362 0683 	bfi	r6, r2, #2, #2
    dd88:	f8a5 6304 	strh.w	r6, [r5, #772]	; 0x304
        pBle->bLastPacketWasTX = true;
    dd8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    dd90:	7abb      	ldrb	r3, [r7, #10]
    dd92:	e704      	b.n	db9e <am_hal_ble_blocking_transfer.part.7+0x4ce>
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
    dd94:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
    dd98:	2f00      	cmp	r7, #0
    dd9a:	f43f af03 	beq.w	dba4 <am_hal_ble_blocking_transfer.part.7+0x4d4>
        pBle->bLastPacketWasTX = false;
    dd9e:	2500      	movs	r5, #0
    dda0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    dda4:	e6fe      	b.n	dba4 <am_hal_ble_blocking_transfer.part.7+0x4d4>
    AM_CRITICAL_END;
    dda6:	f002 faa5 	bl	102f4 <am_hal_interrupt_master_set>
            return AM_HAL_BLE_STATUS_BUS_BUSY;
    ddaa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ddae:	e49e      	b.n	d6ee <am_hal_ble_blocking_transfer.part.7+0x1e>
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
    ddb0:	7abe      	ldrb	r6, [r7, #10]
    ddb2:	2e01      	cmp	r6, #1
    ddb4:	f47f ad24 	bne.w	d800 <am_hal_ble_blocking_transfer.part.7+0x130>
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
    ddb8:	f8b4 9010 	ldrh.w	r9, [r4, #16]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
    ddbc:	68a6      	ldr	r6, [r4, #8]
    ddbe:	e7a4      	b.n	dd0a <am_hal_ble_blocking_transfer.part.7+0x63a>
    ddc0:	5000c000 	.word	0x5000c000
    ddc4:	08000009 	.word	0x08000009
    ddc8:	0007a120 	.word	0x0007a120
    ddcc:	01775230 	.word	0x01775230
    ddd0:	000fff00 	.word	0x000fff00

0000ddd4 <am_hal_ble_initialize>:
    if (ui32Module >= AM_REG_BLEIF_NUM_MODULES)
    ddd4:	b108      	cbz	r0, ddda <am_hal_ble_initialize+0x6>
        return AM_HAL_STATUS_OUT_OF_RANGE;
    ddd6:	2005      	movs	r0, #5
    ddd8:	4770      	bx	lr
    if (!ppHandle)
    ddda:	b149      	cbz	r1, ddf0 <am_hal_ble_initialize+0x1c>
    if (g_sBLEState[ui32Module].prefix.s.bInit)
    dddc:	4b17      	ldr	r3, [pc, #92]	; (de3c <am_hal_ble_initialize+0x68>)
{
    ddde:	b4f0      	push	{r4, r5, r6, r7}
    if (g_sBLEState[ui32Module].prefix.s.bInit)
    dde0:	78dc      	ldrb	r4, [r3, #3]
    dde2:	f3c4 0200 	ubfx	r2, r4, #0, #1
    dde6:	b2d0      	uxtb	r0, r2
    dde8:	b120      	cbz	r0, ddf4 <am_hal_ble_initialize+0x20>
        return AM_HAL_STATUS_INVALID_OPERATION;
    ddea:	2007      	movs	r0, #7
}
    ddec:	bcf0      	pop	{r4, r5, r6, r7}
    ddee:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    ddf0:	2006      	movs	r0, #6
    ddf2:	4770      	bx	lr
    g_sBLEState[ui32Module].prefix.s.bInit = true;
    ddf4:	f044 0501 	orr.w	r5, r4, #1
    ddf8:	70dd      	strb	r5, [r3, #3]
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
    ddfa:	681e      	ldr	r6, [r3, #0]
    ddfc:	4f10      	ldr	r7, [pc, #64]	; (de40 <am_hal_ble_initialize+0x6c>)
    memset(&g_sBLEState[ui32Module].sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
    ddfe:	6098      	str	r0, [r3, #8]
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
    de00:	f367 0617 	bfi	r6, r7, #0, #24
    memset(&g_sBLEState[ui32Module].sSavedTransfer, 0, sizeof(am_hal_ble_transfer_t));
    de04:	6218      	str	r0, [r3, #32]
    g_sBLEState[ui32Module].ui32Module = ui32Module;
    de06:	6058      	str	r0, [r3, #4]
    g_sBLEState[ui32Module].ui32TransferIndex = 0;
    de08:	6398      	str	r0, [r3, #56]	; 0x38
    g_sBLEState[ui32Module].bPatchComplete = 0;
    de0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    g_sBLEState[ui32Module].bContinuePacket = 0;
    de0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    g_sBLEState[ui32Module].bSavedPacket = 0;
    de12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    g_sBLEState[ui32Module].bBusy = 0;
    de16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    g_sBLEState[ui32Module].bCmdComplete = 0;
    de1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    g_sBLEState[ui32Module].bDmaComplete = 0;
    de1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
    de22:	601e      	str	r6, [r3, #0]
    memset(&g_sBLEState[ui32Module].sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
    de24:	60d8      	str	r0, [r3, #12]
    de26:	6118      	str	r0, [r3, #16]
    de28:	6158      	str	r0, [r3, #20]
    de2a:	6198      	str	r0, [r3, #24]
    de2c:	61d8      	str	r0, [r3, #28]
    memset(&g_sBLEState[ui32Module].sSavedTransfer, 0, sizeof(am_hal_ble_transfer_t));
    de2e:	6258      	str	r0, [r3, #36]	; 0x24
    de30:	6298      	str	r0, [r3, #40]	; 0x28
    de32:	62d8      	str	r0, [r3, #44]	; 0x2c
    de34:	6318      	str	r0, [r3, #48]	; 0x30
    de36:	6358      	str	r0, [r3, #52]	; 0x34
    *ppHandle = &g_sBLEState[ui32Module];
    de38:	600b      	str	r3, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    de3a:	e7d7      	b.n	ddec <am_hal_ble_initialize+0x18>
    de3c:	10002c5c 	.word	0x10002c5c
    de40:	00775230 	.word	0x00775230

0000de44 <am_hal_ble_config>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    de44:	b128      	cbz	r0, de52 <am_hal_ble_config+0xe>
    de46:	6803      	ldr	r3, [r0, #0]
    de48:	4a1a      	ldr	r2, [pc, #104]	; (deb4 <am_hal_ble_config+0x70>)
    de4a:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    de4e:	4290      	cmp	r0, r2
    de50:	d001      	beq.n	de56 <am_hal_ble_config+0x12>
        return AM_HAL_STATUS_INVALID_HANDLE;
    de52:	2002      	movs	r0, #2
}
    de54:	4770      	bx	lr
    BLEIFn(ui32Module)->MSPICFG = 0x3;
    de56:	4b18      	ldr	r3, [pc, #96]	; (deb8 <am_hal_ble_config+0x74>)
    de58:	2203      	movs	r2, #3
    de5a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.RDFC = 0;
    de5e:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    de62:	f36f 4051 	bfc	r0, #17, #1
    de66:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFC = 0;
    de6a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    de6e:	f36f 4210 	bfc	r2, #16, #1
    de72:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFCPOL = 1;
    de76:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    de7a:	f440 1200 	orr.w	r2, r0, #2097152	; 0x200000
    de7e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->FIFOTHR_b.FIFOWTHR = psConfig->ui32WriteThreshold;
    de82:	6888      	ldr	r0, [r1, #8]
    de84:	f8b3 c104 	ldrh.w	ip, [r3, #260]	; 0x104
    de88:	f360 2c0d 	bfi	ip, r0, #8, #6
    de8c:	f8a3 c104 	strh.w	ip, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOTHR_b.FIFORTHR = psConfig->ui32ReadThreshold;
    de90:	6848      	ldr	r0, [r1, #4]
    de92:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    de96:	f360 0205 	bfi	r2, r0, #0, #6
    de9a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOCTRL |= BLEIF_FIFOCTRL_POPWR_Msk;
    de9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    dea2:	f040 0201 	orr.w	r2, r0, #1
    dea6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    BLEIFn(ui32Module)->CLKCFG = psConfig->ui32ClkCfg;
    deaa:	6809      	ldr	r1, [r1, #0]
    deac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    return AM_HAL_STATUS_SUCCESS;
    deb0:	2000      	movs	r0, #0
    deb2:	4770      	bx	lr
    deb4:	01775230 	.word	0x01775230
    deb8:	5000c000 	.word	0x5000c000

0000debc <am_hal_ble_power_control>:
{
    debc:	b538      	push	{r3, r4, r5, lr}
    if ( APOLLO3_A1 )
    debe:	4b91      	ldr	r3, [pc, #580]	; (e104 <am_hal_ble_power_control+0x248>)
    dec0:	68da      	ldr	r2, [r3, #12]
    dec2:	b2d4      	uxtb	r4, r2
    dec4:	2c12      	cmp	r4, #18
    dec6:	d009      	beq.n	dedc <am_hal_ble_power_control+0x20>
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
    dec8:	b128      	cbz	r0, ded6 <am_hal_ble_power_control+0x1a>
    deca:	6800      	ldr	r0, [r0, #0]
    decc:	4a8e      	ldr	r2, [pc, #568]	; (e108 <am_hal_ble_power_control+0x24c>)
    dece:	f020 447e 	bic.w	r4, r0, #4261412864	; 0xfe000000
    ded2:	4294      	cmp	r4, r2
    ded4:	d007      	beq.n	dee6 <am_hal_ble_power_control+0x2a>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ded6:	2402      	movs	r4, #2
}
    ded8:	4620      	mov	r0, r4
    deda:	bd38      	pop	{r3, r4, r5, pc}
        CLKGEN->BLEBUCKTONADJ =
    dedc:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    dee0:	4b8a      	ldr	r3, [pc, #552]	; (e10c <am_hal_ble_power_control+0x250>)
    dee2:	63eb      	str	r3, [r5, #60]	; 0x3c
    dee4:	e7f0      	b.n	dec8 <am_hal_ble_power_control+0xc>
    if (ui32PowerState == AM_HAL_BLE_POWER_ACTIVE)
    dee6:	2900      	cmp	r1, #0
    dee8:	d157      	bne.n	df9a <am_hal_ble_power_control+0xde>
        if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    deea:	4a89      	ldr	r2, [pc, #548]	; (e110 <am_hal_ble_power_control+0x254>)
    deec:	6995      	ldr	r5, [r2, #24]
    deee:	05eb      	lsls	r3, r5, #23
    def0:	d457      	bmi.n	dfa2 <am_hal_ble_power_control+0xe6>
            MCUCTRL->FEATUREENABLE = 1;
    def2:	4c84      	ldr	r4, [pc, #528]	; (e104 <am_hal_ble_power_control+0x248>)
    def4:	2301      	movs	r3, #1
    def6:	61a3      	str	r3, [r4, #24]
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
    def8:	69a1      	ldr	r1, [r4, #24]
    defa:	f001 0007 	and.w	r0, r1, #7
    defe:	2807      	cmp	r0, #7
    df00:	d077      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df02:	4d84      	ldr	r5, [pc, #528]	; (e114 <am_hal_ble_power_control+0x258>)
    df04:	2001      	movs	r0, #1
    df06:	f001 ff7b 	bl	fe00 <am_hal_flash_delay>
    df0a:	69a2      	ldr	r2, [r4, #24]
    df0c:	f002 0307 	and.w	r3, r2, #7
    df10:	2b07      	cmp	r3, #7
    df12:	f04f 0001 	mov.w	r0, #1
    df16:	d06c      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df18:	f001 ff72 	bl	fe00 <am_hal_flash_delay>
    df1c:	69a1      	ldr	r1, [r4, #24]
    df1e:	f001 0207 	and.w	r2, r1, #7
    df22:	2a07      	cmp	r2, #7
    df24:	f04f 0001 	mov.w	r0, #1
    df28:	d063      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df2a:	f001 ff69 	bl	fe00 <am_hal_flash_delay>
    df2e:	69a3      	ldr	r3, [r4, #24]
    df30:	f003 0107 	and.w	r1, r3, #7
    df34:	2907      	cmp	r1, #7
    df36:	f04f 0001 	mov.w	r0, #1
    df3a:	d05a      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df3c:	f001 ff60 	bl	fe00 <am_hal_flash_delay>
    df40:	69a2      	ldr	r2, [r4, #24]
    df42:	f002 0307 	and.w	r3, r2, #7
    df46:	2b07      	cmp	r3, #7
    df48:	f04f 0001 	mov.w	r0, #1
    df4c:	d051      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df4e:	f001 ff57 	bl	fe00 <am_hal_flash_delay>
    df52:	69a1      	ldr	r1, [r4, #24]
    df54:	f001 0207 	and.w	r2, r1, #7
    df58:	2a07      	cmp	r2, #7
    df5a:	f04f 0001 	mov.w	r0, #1
    df5e:	d048      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df60:	f001 ff4e 	bl	fe00 <am_hal_flash_delay>
    df64:	69a3      	ldr	r3, [r4, #24]
    df66:	f003 0107 	and.w	r1, r3, #7
    df6a:	2907      	cmp	r1, #7
    df6c:	f04f 0001 	mov.w	r0, #1
    df70:	d03f      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df72:	f001 ff45 	bl	fe00 <am_hal_flash_delay>
    df76:	69a2      	ldr	r2, [r4, #24]
    df78:	f002 0307 	and.w	r3, r2, #7
    df7c:	2b07      	cmp	r3, #7
    df7e:	f04f 0001 	mov.w	r0, #1
    df82:	d036      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df84:	f001 ff3c 	bl	fe00 <am_hal_flash_delay>
    df88:	69a0      	ldr	r0, [r4, #24]
    df8a:	f000 0107 	and.w	r1, r0, #7
    df8e:	2907      	cmp	r1, #7
    df90:	d02f      	beq.n	dff2 <am_hal_ble_power_control+0x136>
    df92:	3d08      	subs	r5, #8
    df94:	d1b6      	bne.n	df04 <am_hal_ble_power_control+0x48>
    df96:	4c60      	ldr	r4, [pc, #384]	; (e118 <am_hal_ble_power_control+0x25c>)
    df98:	e79e      	b.n	ded8 <am_hal_ble_power_control+0x1c>
    else if (ui32PowerState == AM_HAL_BLE_POWER_OFF)
    df9a:	2901      	cmp	r1, #1
    df9c:	d003      	beq.n	dfa6 <am_hal_ble_power_control+0xea>
        return AM_HAL_STATUS_INVALID_OPERATION;
    df9e:	2407      	movs	r4, #7
    dfa0:	e79a      	b.n	ded8 <am_hal_ble_power_control+0x1c>
    return AM_HAL_STATUS_SUCCESS;
    dfa2:	2400      	movs	r4, #0
    dfa4:	e798      	b.n	ded8 <am_hal_ble_power_control+0x1c>
        BLEIFn(ui32Module)->CLKCFG = 0;
    dfa6:	4d5d      	ldr	r5, [pc, #372]	; (e11c <am_hal_ble_power_control+0x260>)
        if ( APOLLO3_A1 )
    dfa8:	4b56      	ldr	r3, [pc, #344]	; (e104 <am_hal_ble_power_control+0x248>)
        BLEIFn(ui32Module)->CLKCFG = 0;
    dfaa:	2100      	movs	r1, #0
    dfac:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
        BLEIF->BLEDBG_b.DBGDATA = 0;
    dfb0:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
    dfb4:	f361 00df 	bfi	r0, r1, #3, #29
    dfb8:	f8c5 0410 	str.w	r0, [r5, #1040]	; 0x410
        if ( APOLLO3_A1 )
    dfbc:	68da      	ldr	r2, [r3, #12]
            AM_REGVAL(0x40020198) &= ~(0x1 << 5);
    dfbe:	4d58      	ldr	r5, [pc, #352]	; (e120 <am_hal_ble_power_control+0x264>)
        BLEIF->BLECFG_b.PWRSMEN = 0;
    dfc0:	4956      	ldr	r1, [pc, #344]	; (e11c <am_hal_ble_power_control+0x260>)
            AM_REGVAL(0x40020198) &= ~(0x1 << 5);
    dfc2:	682b      	ldr	r3, [r5, #0]
        if ( APOLLO3_A1 )
    dfc4:	b2d4      	uxtb	r4, r2
    dfc6:	2c12      	cmp	r4, #18
            AM_REGVAL(0x40020198) &= ~(0x1 << 5);
    dfc8:	bf0c      	ite	eq
    dfca:	f023 0320 	biceq.w	r3, r3, #32
            AM_REGVAL(0x40020198) &= ~(0x1 << 2);
    dfce:	f023 0304 	bicne.w	r3, r3, #4
    dfd2:	602b      	str	r3, [r5, #0]
        BLEIF->BLECFG_b.PWRSMEN = 0;
    dfd4:	f8b1 0304 	ldrh.w	r0, [r1, #772]	; 0x304
    dfd8:	f36f 0000 	bfc	r0, #0, #1
    dfdc:	f8a1 0304 	strh.w	r0, [r1, #772]	; 0x304
        if (am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
    dfe0:	200e      	movs	r0, #14
    dfe2:	f002 fad9 	bl	10598 <am_hal_pwrctrl_periph_disable>
    dfe6:	4604      	mov	r4, r0
    dfe8:	2800      	cmp	r0, #0
    dfea:	f000 8086 	beq.w	e0fa <am_hal_ble_power_control+0x23e>
            return AM_HAL_BLE_SHUTDOWN_FAILED;
    dfee:	4c4d      	ldr	r4, [pc, #308]	; (e124 <am_hal_ble_power_control+0x268>)
    dff0:	e772      	b.n	ded8 <am_hal_ble_power_control+0x1c>
            if (am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
    dff2:	200e      	movs	r0, #14
    dff4:	f002 faa6 	bl	10544 <am_hal_pwrctrl_periph_enable>
    dff8:	b108      	cbz	r0, dffe <am_hal_ble_power_control+0x142>
                return AM_HAL_BLE_REGULATOR_FAILED;
    dffa:	4c4b      	ldr	r4, [pc, #300]	; (e128 <am_hal_ble_power_control+0x26c>)
    dffc:	e76c      	b.n	ded8 <am_hal_ble_power_control+0x1c>
            BLEIFn(ui32Module)->CLKCFG = _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
    dffe:	4c47      	ldr	r4, [pc, #284]	; (e11c <am_hal_ble_power_control+0x260>)
            if ( APOLLO3_A1 )
    e000:	4d40      	ldr	r5, [pc, #256]	; (e104 <am_hal_ble_power_control+0x248>)
            BLEIFn(ui32Module)->CLKCFG = _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
    e002:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e006:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            BLEIFn(ui32Module)->BLEDBG_b.DBGDATA = 1 << 14;
    e00a:	f8d4 1410 	ldr.w	r1, [r4, #1040]	; 0x410
    e00e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    e012:	f363 01df 	bfi	r1, r3, #3, #29
    e016:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
            if ( APOLLO3_A1 )
    e01a:	68e8      	ldr	r0, [r5, #12]
                AM_REGVAL(0x40020198) = 0x1 << 5;
    e01c:	4d40      	ldr	r5, [pc, #256]	; (e120 <am_hal_ble_power_control+0x264>)
            if ( APOLLO3_A1 )
    e01e:	b2c4      	uxtb	r4, r0
    e020:	2c12      	cmp	r4, #18
                AM_REGVAL(0x40020198) = 0x1 << 5;
    e022:	bf0c      	ite	eq
    e024:	2120      	moveq	r1, #32
                AM_REGVAL(0x40020198) = 0x1 << 2;
    e026:	2104      	movne	r1, #4
            BLEIFn(ui32Module)->BLECFG_b.PWRSMEN = 1;
    e028:	4c3c      	ldr	r4, [pc, #240]	; (e11c <am_hal_ble_power_control+0x260>)
                AM_REGVAL(0x40020198) = 0x1 << 2;
    e02a:	6029      	str	r1, [r5, #0]
            delay_ms(5);
    e02c:	483f      	ldr	r0, [pc, #252]	; (e12c <am_hal_ble_power_control+0x270>)
    e02e:	f001 fee7 	bl	fe00 <am_hal_flash_delay>
            BLEIFn(ui32Module)->BLECFG_b.PWRSMEN = 1;
    e032:	f8b4 2304 	ldrh.w	r2, [r4, #772]	; 0x304
    e036:	f042 0101 	orr.w	r1, r2, #1
    e03a:	f8a4 1304 	strh.w	r1, [r4, #772]	; 0x304
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
    e03e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e042:	f3c3 2002 	ubfx	r0, r3, #8, #3
    e046:	2803      	cmp	r0, #3
    e048:	d0ab      	beq.n	dfa2 <am_hal_ble_power_control+0xe6>
    e04a:	4d39      	ldr	r5, [pc, #228]	; (e130 <am_hal_ble_power_control+0x274>)
    e04c:	2001      	movs	r0, #1
    e04e:	f001 fed7 	bl	fe00 <am_hal_flash_delay>
    e052:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e056:	f3c2 2102 	ubfx	r1, r2, #8, #3
    e05a:	2903      	cmp	r1, #3
    e05c:	f04f 0001 	mov.w	r0, #1
    e060:	d09f      	beq.n	dfa2 <am_hal_ble_power_control+0xe6>
    e062:	f001 fecd 	bl	fe00 <am_hal_flash_delay>
    e066:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e06a:	f3c3 2202 	ubfx	r2, r3, #8, #3
    e06e:	2a03      	cmp	r2, #3
    e070:	f04f 0001 	mov.w	r0, #1
    e074:	d095      	beq.n	dfa2 <am_hal_ble_power_control+0xe6>
    e076:	f001 fec3 	bl	fe00 <am_hal_flash_delay>
    e07a:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e07e:	f3c1 2302 	ubfx	r3, r1, #8, #3
    e082:	2b03      	cmp	r3, #3
    e084:	f04f 0001 	mov.w	r0, #1
    e088:	d08b      	beq.n	dfa2 <am_hal_ble_power_control+0xe6>
    e08a:	f001 feb9 	bl	fe00 <am_hal_flash_delay>
    e08e:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e092:	f3c2 2102 	ubfx	r1, r2, #8, #3
    e096:	2903      	cmp	r1, #3
    e098:	f04f 0001 	mov.w	r0, #1
    e09c:	d081      	beq.n	dfa2 <am_hal_ble_power_control+0xe6>
    e09e:	f001 feaf 	bl	fe00 <am_hal_flash_delay>
    e0a2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e0a6:	f3c3 2202 	ubfx	r2, r3, #8, #3
    e0aa:	2a03      	cmp	r2, #3
    e0ac:	f04f 0001 	mov.w	r0, #1
    e0b0:	f43f af77 	beq.w	dfa2 <am_hal_ble_power_control+0xe6>
    e0b4:	f001 fea4 	bl	fe00 <am_hal_flash_delay>
    e0b8:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e0bc:	f3c1 2302 	ubfx	r3, r1, #8, #3
    e0c0:	2b03      	cmp	r3, #3
    e0c2:	f04f 0001 	mov.w	r0, #1
    e0c6:	f43f af6c 	beq.w	dfa2 <am_hal_ble_power_control+0xe6>
    e0ca:	f001 fe99 	bl	fe00 <am_hal_flash_delay>
    e0ce:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e0d2:	f3c2 2102 	ubfx	r1, r2, #8, #3
    e0d6:	2903      	cmp	r1, #3
    e0d8:	f04f 0001 	mov.w	r0, #1
    e0dc:	f43f af61 	beq.w	dfa2 <am_hal_ble_power_control+0xe6>
    e0e0:	f001 fe8e 	bl	fe00 <am_hal_flash_delay>
    e0e4:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    e0e8:	f3c0 2302 	ubfx	r3, r0, #8, #3
    e0ec:	2b03      	cmp	r3, #3
    e0ee:	f43f af58 	beq.w	dfa2 <am_hal_ble_power_control+0xe6>
    e0f2:	3d08      	subs	r5, #8
    e0f4:	d1aa      	bne.n	e04c <am_hal_ble_power_control+0x190>
    e0f6:	4c0f      	ldr	r4, [pc, #60]	; (e134 <am_hal_ble_power_control+0x278>)
    e0f8:	e6ee      	b.n	ded8 <am_hal_ble_power_control+0x1c>
        delay_us(100);
    e0fa:	f240 6017 	movw	r0, #1559	; 0x617
    e0fe:	f001 fe7f 	bl	fe00 <am_hal_flash_delay>
    e102:	e6e9      	b.n	ded8 <am_hal_ble_power_control+0x1c>
    e104:	40020000 	.word	0x40020000
    e108:	01775230 	.word	0x01775230
    e10c:	0fc0640f 	.word	0x0fc0640f
    e110:	40021000 	.word	0x40021000
    e114:	000186a0 	.word	0x000186a0
    e118:	08000005 	.word	0x08000005
    e11c:	5000c000 	.word	0x5000c000
    e120:	40020198 	.word	0x40020198
    e124:	08000006 	.word	0x08000006
    e128:	08000007 	.word	0x08000007
    e12c:	00013857 	.word	0x00013857
    e130:	000f4240 	.word	0x000f4240
    e134:	08000008 	.word	0x08000008

0000e138 <am_hal_ble_patch_copy_end_apply>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e138:	b168      	cbz	r0, e156 <am_hal_ble_patch_copy_end_apply+0x1e>
{
    e13a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e13e:	6805      	ldr	r5, [r0, #0]
    e140:	4bb1      	ldr	r3, [pc, #708]	; (e408 <am_hal_ble_patch_copy_end_apply+0x2d0>)
    e142:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e146:	429d      	cmp	r5, r3
{
    e148:	b08b      	sub	sp, #44	; 0x2c
    e14a:	4606      	mov	r6, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e14c:	d005      	beq.n	e15a <am_hal_ble_patch_copy_end_apply+0x22>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e14e:	2002      	movs	r0, #2
}
    e150:	b00b      	add	sp, #44	; 0x2c
    e152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    e156:	2002      	movs	r0, #2
}
    e158:	4770      	bx	lr
    psPatchBuffer.bytes[1] = 0xEE;
    e15a:	27ee      	movs	r7, #238	; 0xee
    psPatchBuffer.bytes[2] = 0xF1;
    e15c:	21f1      	movs	r1, #241	; 0xf1
    psPatchBuffer.bytes[4] = 0x00;
    e15e:	f04f 0800 	mov.w	r8, #0
    psPatchBuffer.bytes[0] = 0x01;
    e162:	2201      	movs	r2, #1
    psPatchBuffer.bytes[3] = 0x02;
    e164:	f04f 0902 	mov.w	r9, #2
    psPatchBuffer.bytes[1] = 0xEE;
    e168:	f88d 7001 	strb.w	r7, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
    e16c:	f88d 1002 	strb.w	r1, [sp, #2]
    am_hal_ble_transfer_t HciWrite =
    e170:	2706      	movs	r7, #6
    e172:	a904      	add	r1, sp, #16
    e174:	4644      	mov	r4, r8
    psPatchBuffer.bytes[4] = 0x00;
    e176:	f88d 8004 	strb.w	r8, [sp, #4]
    psPatchBuffer.bytes[5] = 0x00;
    e17a:	f88d 8005 	strb.w	r8, [sp, #5]
    am_hal_ble_transfer_t HciWrite =
    e17e:	f8cd 8014 	str.w	r8, [sp, #20]
    e182:	f88d 801b 	strb.w	r8, [sp, #27]
    e186:	f88d 801c 	strb.w	r8, [sp, #28]
    e18a:	f8cd 8020 	str.w	r8, [sp, #32]
    e18e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    psPatchBuffer.bytes[0] = 0x01;
    e192:	f88d 2000 	strb.w	r2, [sp]
    am_hal_ble_transfer_t HciWrite =
    e196:	f88d 201a 	strb.w	r2, [sp, #26]
    psPatchBuffer.bytes[3] = 0x02;
    e19a:	f88d 9003 	strb.w	r9, [sp, #3]
    am_hal_ble_transfer_t HciWrite =
    e19e:	f8cd d010 	str.w	sp, [sp, #16]
    e1a2:	f8ad 7018 	strh.w	r7, [sp, #24]
    e1a6:	f7ff fa93 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e1aa:	2800      	cmp	r0, #0
    e1ac:	d17e      	bne.n	e2ac <am_hal_ble_patch_copy_end_apply+0x174>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
    e1ae:	4c97      	ldr	r4, [pc, #604]	; (e40c <am_hal_ble_patch_copy_end_apply+0x2d4>)
    e1b0:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
    e1b4:	0629      	lsls	r1, r5, #24
    e1b6:	d443      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e1b8:	4d95      	ldr	r5, [pc, #596]	; (e410 <am_hal_ble_patch_copy_end_apply+0x2d8>)
    e1ba:	2001      	movs	r0, #1
    e1bc:	f001 fe20 	bl	fe00 <am_hal_flash_delay>
    e1c0:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    e1c4:	063f      	lsls	r7, r7, #24
    e1c6:	f04f 0001 	mov.w	r0, #1
    e1ca:	d439      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e1cc:	f001 fe18 	bl	fe00 <am_hal_flash_delay>
    e1d0:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e1d4:	061b      	lsls	r3, r3, #24
    e1d6:	f04f 0001 	mov.w	r0, #1
    e1da:	d431      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e1dc:	f001 fe10 	bl	fe00 <am_hal_flash_delay>
    e1e0:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e1e4:	060a      	lsls	r2, r1, #24
    e1e6:	f04f 0001 	mov.w	r0, #1
    e1ea:	d429      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e1ec:	f001 fe08 	bl	fe00 <am_hal_flash_delay>
    e1f0:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e1f4:	0613      	lsls	r3, r2, #24
    e1f6:	f04f 0001 	mov.w	r0, #1
    e1fa:	d421      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e1fc:	f001 fe00 	bl	fe00 <am_hal_flash_delay>
    e200:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    e204:	063f      	lsls	r7, r7, #24
    e206:	f04f 0001 	mov.w	r0, #1
    e20a:	d419      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e20c:	f001 fdf8 	bl	fe00 <am_hal_flash_delay>
    e210:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e214:	0619      	lsls	r1, r3, #24
    e216:	f04f 0001 	mov.w	r0, #1
    e21a:	d411      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e21c:	f001 fdf0 	bl	fe00 <am_hal_flash_delay>
    e220:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e224:	060a      	lsls	r2, r1, #24
    e226:	f04f 0001 	mov.w	r0, #1
    e22a:	d409      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e22c:	f001 fde8 	bl	fe00 <am_hal_flash_delay>
    e230:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    e234:	0603      	lsls	r3, r0, #24
    e236:	d403      	bmi.n	e240 <am_hal_ble_patch_copy_end_apply+0x108>
    e238:	3d08      	subs	r5, #8
    e23a:	d1be      	bne.n	e1ba <am_hal_ble_patch_copy_end_apply+0x82>
    e23c:	4875      	ldr	r0, [pc, #468]	; (e414 <am_hal_ble_patch_copy_end_apply+0x2dc>)
    e23e:	e787      	b.n	e150 <am_hal_ble_patch_copy_end_apply+0x18>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e240:	6834      	ldr	r4, [r6, #0]
    e242:	4d71      	ldr	r5, [pc, #452]	; (e408 <am_hal_ble_patch_copy_end_apply+0x2d0>)
    sTransfer.pui32Data = psPatchBuffer.words;
    e244:	f8cd d010 	str.w	sp, [sp, #16]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e248:	f024 4e7e 	bic.w	lr, r4, #4261412864	; 0xfe000000
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    e24c:	2700      	movs	r7, #0
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    e24e:	2202      	movs	r2, #2
    sTransfer.ui16Length = 5;
    e250:	2305      	movs	r3, #5
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e252:	45ae      	cmp	lr, r5
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    e254:	9706      	str	r7, [sp, #24]
    e256:	9705      	str	r7, [sp, #20]
    e258:	9707      	str	r7, [sp, #28]
    e25a:	9708      	str	r7, [sp, #32]
    e25c:	9709      	str	r7, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    e25e:	f88d 201a 	strb.w	r2, [sp, #26]
    sTransfer.ui16Length = 5;
    e262:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e266:	f47f af72 	bne.w	e14e <am_hal_ble_patch_copy_end_apply+0x16>
    e26a:	a904      	add	r1, sp, #16
    e26c:	4630      	mov	r0, r6
    e26e:	f7ff fa2f 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    e272:	2800      	cmp	r0, #0
    e274:	f47f af6c 	bne.w	e150 <am_hal_ble_patch_copy_end_apply+0x18>
        if (p1[i] != p2[i])
    e278:	f89d 6000 	ldrb.w	r6, [sp]
    e27c:	2e04      	cmp	r6, #4
    e27e:	f040 80c1 	bne.w	e404 <am_hal_ble_patch_copy_end_apply+0x2cc>
    e282:	f89d 1001 	ldrb.w	r1, [sp, #1]
    e286:	29ee      	cmp	r1, #238	; 0xee
    e288:	f040 80bc 	bne.w	e404 <am_hal_ble_patch_copy_end_apply+0x2cc>
    e28c:	f89d 0002 	ldrb.w	r0, [sp, #2]
    e290:	28f1      	cmp	r0, #241	; 0xf1
    e292:	f040 80b7 	bne.w	e404 <am_hal_ble_patch_copy_end_apply+0x2cc>
    e296:	f89d 4003 	ldrb.w	r4, [sp, #3]
    e29a:	2c01      	cmp	r4, #1
    e29c:	f040 80b2 	bne.w	e404 <am_hal_ble_patch_copy_end_apply+0x2cc>
    e2a0:	f89d 5004 	ldrb.w	r5, [sp, #4]
    e2a4:	1c28      	adds	r0, r5, #0
    e2a6:	bf18      	it	ne
    e2a8:	2001      	movne	r0, #1
    e2aa:	e751      	b.n	e150 <am_hal_ble_patch_copy_end_apply+0x18>
    e2ac:	6830      	ldr	r0, [r6, #0]
    e2ae:	f241 3987 	movw	r9, #4999	; 0x1387
    e2b2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    e2b6:	f04f 0801 	mov.w	r8, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e2ba:	42a8      	cmp	r0, r5
    am_hal_ble_transfer_t HciWrite =
    e2bc:	f8cd d010 	str.w	sp, [sp, #16]
    e2c0:	9405      	str	r4, [sp, #20]
    e2c2:	f8ad 7018 	strh.w	r7, [sp, #24]
    e2c6:	f88d 401b 	strb.w	r4, [sp, #27]
    e2ca:	f88d 401c 	strb.w	r4, [sp, #28]
    e2ce:	9408      	str	r4, [sp, #32]
    e2d0:	9409      	str	r4, [sp, #36]	; 0x24
    e2d2:	f88d 801a 	strb.w	r8, [sp, #26]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e2d6:	f47f af6a 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e2da:	a904      	add	r1, sp, #16
    e2dc:	4630      	mov	r0, r6
    e2de:	f7ff f9f7 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e2e2:	2800      	cmp	r0, #0
    e2e4:	f43f af63 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
    e2e8:	f1b9 0901 	subs.w	r9, r9, #1
    e2ec:	f43f af30 	beq.w	e150 <am_hal_ble_patch_copy_end_apply+0x18>
    e2f0:	6833      	ldr	r3, [r6, #0]
    am_hal_ble_transfer_t HciWrite =
    e2f2:	f8cd d010 	str.w	sp, [sp, #16]
    e2f6:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e2fa:	42aa      	cmp	r2, r5
    am_hal_ble_transfer_t HciWrite =
    e2fc:	9405      	str	r4, [sp, #20]
    e2fe:	f8ad 7018 	strh.w	r7, [sp, #24]
    e302:	f88d 801a 	strb.w	r8, [sp, #26]
    e306:	f88d 401b 	strb.w	r4, [sp, #27]
    e30a:	f88d 401c 	strb.w	r4, [sp, #28]
    e30e:	9408      	str	r4, [sp, #32]
    e310:	9409      	str	r4, [sp, #36]	; 0x24
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e312:	f47f af4c 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e316:	a904      	add	r1, sp, #16
    e318:	4630      	mov	r0, r6
    e31a:	f7ff f9d9 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e31e:	2800      	cmp	r0, #0
    e320:	f43f af45 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e324:	6831      	ldr	r1, [r6, #0]
    am_hal_ble_transfer_t HciWrite =
    e326:	f8cd d010 	str.w	sp, [sp, #16]
    e32a:	f021 407e 	bic.w	r0, r1, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e32e:	42a8      	cmp	r0, r5
    am_hal_ble_transfer_t HciWrite =
    e330:	9405      	str	r4, [sp, #20]
    e332:	f8ad 7018 	strh.w	r7, [sp, #24]
    e336:	f88d 801a 	strb.w	r8, [sp, #26]
    e33a:	f88d 401b 	strb.w	r4, [sp, #27]
    e33e:	f88d 401c 	strb.w	r4, [sp, #28]
    e342:	9408      	str	r4, [sp, #32]
    e344:	9409      	str	r4, [sp, #36]	; 0x24
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e346:	f47f af32 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e34a:	a904      	add	r1, sp, #16
    e34c:	4630      	mov	r0, r6
    e34e:	f7ff f9bf 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e352:	2800      	cmp	r0, #0
    e354:	f43f af2b 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e358:	6833      	ldr	r3, [r6, #0]
    am_hal_ble_transfer_t HciWrite =
    e35a:	f8cd d010 	str.w	sp, [sp, #16]
    e35e:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e362:	42aa      	cmp	r2, r5
    am_hal_ble_transfer_t HciWrite =
    e364:	9405      	str	r4, [sp, #20]
    e366:	f8ad 7018 	strh.w	r7, [sp, #24]
    e36a:	f88d 801a 	strb.w	r8, [sp, #26]
    e36e:	f88d 401b 	strb.w	r4, [sp, #27]
    e372:	f88d 401c 	strb.w	r4, [sp, #28]
    e376:	9408      	str	r4, [sp, #32]
    e378:	9409      	str	r4, [sp, #36]	; 0x24
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e37a:	f47f af18 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e37e:	a904      	add	r1, sp, #16
    e380:	4630      	mov	r0, r6
    e382:	f7ff f9a5 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e386:	2800      	cmp	r0, #0
    e388:	f43f af11 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e38c:	6831      	ldr	r1, [r6, #0]
    am_hal_ble_transfer_t HciWrite =
    e38e:	f8cd d010 	str.w	sp, [sp, #16]
    e392:	f021 407e 	bic.w	r0, r1, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e396:	42a8      	cmp	r0, r5
    am_hal_ble_transfer_t HciWrite =
    e398:	9405      	str	r4, [sp, #20]
    e39a:	f8ad 7018 	strh.w	r7, [sp, #24]
    e39e:	f88d 801a 	strb.w	r8, [sp, #26]
    e3a2:	f88d 401b 	strb.w	r4, [sp, #27]
    e3a6:	f88d 401c 	strb.w	r4, [sp, #28]
    e3aa:	9408      	str	r4, [sp, #32]
    e3ac:	9409      	str	r4, [sp, #36]	; 0x24
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e3ae:	f47f aefe 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e3b2:	a904      	add	r1, sp, #16
    e3b4:	4630      	mov	r0, r6
    e3b6:	f7ff f98b 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e3ba:	2800      	cmp	r0, #0
    e3bc:	f43f aef7 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e3c0:	6833      	ldr	r3, [r6, #0]
    am_hal_ble_transfer_t HciWrite =
    e3c2:	f8cd d010 	str.w	sp, [sp, #16]
    e3c6:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e3ca:	f04f 0c01 	mov.w	ip, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e3ce:	42a9      	cmp	r1, r5
    am_hal_ble_transfer_t HciWrite =
    e3d0:	9405      	str	r4, [sp, #20]
    e3d2:	f8ad 7018 	strh.w	r7, [sp, #24]
    e3d6:	f88d 401b 	strb.w	r4, [sp, #27]
    e3da:	f88d 401c 	strb.w	r4, [sp, #28]
    e3de:	9408      	str	r4, [sp, #32]
    e3e0:	9409      	str	r4, [sp, #36]	; 0x24
    e3e2:	f88d c01a 	strb.w	ip, [sp, #26]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e3e6:	f47f aee2 	bne.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e3ea:	a904      	add	r1, sp, #16
    e3ec:	4630      	mov	r0, r6
    e3ee:	f7ff f96f 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e3f2:	2800      	cmp	r0, #0
    e3f4:	f43f aedb 	beq.w	e1ae <am_hal_ble_patch_copy_end_apply+0x76>
    e3f8:	6832      	ldr	r2, [r6, #0]
    e3fa:	f1a9 0905 	sub.w	r9, r9, #5
    e3fe:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
    e402:	e758      	b.n	e2b6 <am_hal_ble_patch_copy_end_apply+0x17e>
        return AM_HAL_STATUS_FAIL;
    e404:	2001      	movs	r0, #1
    e406:	e6a3      	b.n	e150 <am_hal_ble_patch_copy_end_apply+0x18>
    e408:	01775230 	.word	0x01775230
    e40c:	5000c000 	.word	0x5000c000
    e410:	000f4240 	.word	0x000f4240
    e414:	08000004 	.word	0x08000004

0000e418 <am_hal_ble_default_trim_set_ramcode>:
    ui32TrimValue = AM_REGVAL(0x50023800);
    e418:	4b0b      	ldr	r3, [pc, #44]	; (e448 <am_hal_ble_default_trim_set_ramcode+0x30>)
    uint32_t *pRamCode = (uint32_t *) (am_ble_performance_patch.pui32Data);
    e41a:	4a0c      	ldr	r2, [pc, #48]	; (e44c <am_hal_ble_default_trim_set_ramcode+0x34>)
    ui32TrimValue = AM_REGVAL(0x50023800);
    e41c:	6818      	ldr	r0, [r3, #0]
    uint32_t *pRamCode = (uint32_t *) (am_ble_performance_patch.pui32Data);
    e41e:	68d1      	ldr	r1, [r2, #12]
    e420:	ba03      	rev	r3, r0
    if (ui32TrimValueSwapped != 0xFFFFFFFF)
    e422:	1c5a      	adds	r2, r3, #1
    ui32TrimValue = AM_REGVAL(0x50023804);
    e424:	4a0a      	ldr	r2, [pc, #40]	; (e450 <am_hal_ble_default_trim_set_ramcode+0x38>)
        pRamCode[2] = ui32TrimValueSwapped;
    e426:	bf18      	it	ne
    e428:	608b      	strne	r3, [r1, #8]
    ui32TrimValue = AM_REGVAL(0x50023804);
    e42a:	6813      	ldr	r3, [r2, #0]
    if (ui32TrimValue != 0xFFFFFFFF) {
    e42c:	1c58      	adds	r0, r3, #1
    e42e:	d009      	beq.n	e444 <am_hal_ble_default_trim_set_ramcode+0x2c>
         ui32TrimValue += 0x40000000; // Increase the retention voltage to > 0.75v
    e430:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
    e434:	ba03      	rev	r3, r0
    if ( ui32TrimValueSwapped != 0xFFFFFFFF )
    e436:	1c5a      	adds	r2, r3, #1
    e438:	d004      	beq.n	e444 <am_hal_ble_default_trim_set_ramcode+0x2c>
        pRamCode[3] = ((pRamCode[3] & (~0x1F0)) | ui32TrimValueSwapped);
    e43a:	68ca      	ldr	r2, [r1, #12]
    e43c:	f422 70f8 	bic.w	r0, r2, #496	; 0x1f0
    e440:	4303      	orrs	r3, r0
    e442:	60cb      	str	r3, [r1, #12]
}
    e444:	2000      	movs	r0, #0
    e446:	4770      	bx	lr
    e448:	50023800 	.word	0x50023800
    e44c:	10001ad8 	.word	0x10001ad8
    e450:	50023804 	.word	0x50023804

0000e454 <am_hal_ble_blocking_hci_write>:
{
    e454:	b530      	push	{r4, r5, lr}
    e456:	b087      	sub	sp, #28
    am_hal_ble_transfer_t HciWrite =
    e458:	2400      	movs	r4, #0
    e45a:	b29b      	uxth	r3, r3
    e45c:	2501      	movs	r5, #1
    e45e:	f88d 1004 	strb.w	r1, [sp, #4]
    e462:	f8ad 3008 	strh.w	r3, [sp, #8]
    e466:	9200      	str	r2, [sp, #0]
    e468:	f88d 4005 	strb.w	r4, [sp, #5]
    e46c:	f88d 4006 	strb.w	r4, [sp, #6]
    e470:	f88d 4007 	strb.w	r4, [sp, #7]
    e474:	f88d 400b 	strb.w	r4, [sp, #11]
    e478:	f88d 400c 	strb.w	r4, [sp, #12]
    e47c:	9404      	str	r4, [sp, #16]
    e47e:	9405      	str	r4, [sp, #20]
    e480:	f88d 500a 	strb.w	r5, [sp, #10]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e484:	b128      	cbz	r0, e492 <am_hal_ble_blocking_hci_write+0x3e>
    e486:	6802      	ldr	r2, [r0, #0]
    e488:	4c09      	ldr	r4, [pc, #36]	; (e4b0 <am_hal_ble_blocking_hci_write+0x5c>)
    e48a:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    e48e:	45a4      	cmp	ip, r4
    e490:	d002      	beq.n	e498 <am_hal_ble_blocking_hci_write+0x44>
        return 0;
    e492:	2000      	movs	r0, #0
}
    e494:	b007      	add	sp, #28
    e496:	bd30      	pop	{r4, r5, pc}
    if (ui8Type != AM_HAL_BLE_RAW)
    e498:	b931      	cbnz	r1, e4a8 <am_hal_ble_blocking_hci_write+0x54>
    if (psTransfer->ui16Length == 0)
    e49a:	2b00      	cmp	r3, #0
    e49c:	d0f9      	beq.n	e492 <am_hal_ble_blocking_hci_write+0x3e>
    e49e:	4669      	mov	r1, sp
    e4a0:	f7ff f916 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
}
    e4a4:	b007      	add	sp, #28
    e4a6:	bd30      	pop	{r4, r5, pc}
        HciWrite.ui8OffsetLen = 1;
    e4a8:	f88d 5007 	strb.w	r5, [sp, #7]
    e4ac:	e7f5      	b.n	e49a <am_hal_ble_blocking_hci_write+0x46>
    e4ae:	bf00      	nop
    e4b0:	01775230 	.word	0x01775230

0000e4b4 <am_hal_ble_blocking_hci_read>:
{
    e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4b8:	b088      	sub	sp, #32
    am_hal_ble_transfer_t HciRead =
    e4ba:	2300      	movs	r3, #0
    e4bc:	2502      	movs	r5, #2
    e4be:	ac01      	add	r4, sp, #4
    e4c0:	9402      	str	r4, [sp, #8]
    e4c2:	9303      	str	r3, [sp, #12]
    e4c4:	f88d 3013 	strb.w	r3, [sp, #19]
    e4c8:	f88d 3014 	strb.w	r3, [sp, #20]
    e4cc:	9306      	str	r3, [sp, #24]
    e4ce:	9307      	str	r3, [sp, #28]
    e4d0:	f8ad 5010 	strh.w	r5, [sp, #16]
    e4d4:	f88d 5012 	strb.w	r5, [sp, #18]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e4d8:	b128      	cbz	r0, e4e6 <am_hal_ble_blocking_hci_read+0x32>
    e4da:	6804      	ldr	r4, [r0, #0]
    e4dc:	4e1c      	ldr	r6, [pc, #112]	; (e550 <am_hal_ble_blocking_hci_read+0x9c>)
    e4de:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e4e2:	42b4      	cmp	r4, r6
    e4e4:	d003      	beq.n	e4ee <am_hal_ble_blocking_hci_read+0x3a>
    return AM_HAL_STATUS_SUCCESS;
    e4e6:	2000      	movs	r0, #0
}
    e4e8:	b008      	add	sp, #32
    e4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ee:	4688      	mov	r8, r1
    if ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ )
    e4f0:	4918      	ldr	r1, [pc, #96]	; (e554 <am_hal_ble_blocking_hci_read+0xa0>)
    e4f2:	4617      	mov	r7, r2
    e4f4:	f8d1 230c 	ldr.w	r2, [r1, #780]	; 0x30c
    e4f8:	f3c2 13c0 	ubfx	r3, r2, #7, #1
    e4fc:	4606      	mov	r6, r0
    e4fe:	b91b      	cbnz	r3, e508 <am_hal_ble_blocking_hci_read+0x54>
    if (pui32BytesReceived)
    e500:	2f00      	cmp	r7, #0
    e502:	d0f0      	beq.n	e4e6 <am_hal_ble_blocking_hci_read+0x32>
        *pui32BytesReceived = ui32NumBytes;
    e504:	603b      	str	r3, [r7, #0]
    e506:	e7ee      	b.n	e4e6 <am_hal_ble_blocking_hci_read+0x32>
    e508:	a902      	add	r1, sp, #8
    e50a:	f7ff f8e1 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e50e:	2800      	cmp	r0, #0
    e510:	d1ea      	bne.n	e4e8 <am_hal_ble_blocking_hci_read+0x34>
                              (sLengthBytes.bytes[1] << 8));
    e512:	f89d 0005 	ldrb.w	r0, [sp, #5]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
    e516:	f89d c004 	ldrb.w	ip, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e51a:	6831      	ldr	r1, [r6, #0]
        HciRead.pui32Data = pui32Data;
    e51c:	f8cd 8008 	str.w	r8, [sp, #8]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
    e520:	eb0c 2e00 	add.w	lr, ip, r0, lsl #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e524:	f021 487e 	bic.w	r8, r1, #4261412864	; 0xfe000000
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
    e528:	fa1f f38e 	uxth.w	r3, lr
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e52c:	45a0      	cmp	r8, r4
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
    e52e:	f8ad 3010 	strh.w	r3, [sp, #16]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e532:	d001      	beq.n	e538 <am_hal_ble_blocking_hci_read+0x84>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e534:	4628      	mov	r0, r5
    e536:	e7d7      	b.n	e4e8 <am_hal_ble_blocking_hci_read+0x34>
    if (psTransfer->ui16Length == 0)
    e538:	2b00      	cmp	r3, #0
    e53a:	d0e1      	beq.n	e500 <am_hal_ble_blocking_hci_read+0x4c>
    e53c:	a902      	add	r1, sp, #8
    e53e:	4630      	mov	r0, r6
    e540:	f7ff f8c6 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    e544:	2800      	cmp	r0, #0
    e546:	d1cf      	bne.n	e4e8 <am_hal_ble_blocking_hci_read+0x34>
    e548:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e54c:	e7d8      	b.n	e500 <am_hal_ble_blocking_hci_read+0x4c>
    e54e:	bf00      	nop
    e550:	01775230 	.word	0x01775230
    e554:	5000c000 	.word	0x5000c000

0000e558 <am_hal_ble_plf_reg_read.part.8>:
am_hal_ble_plf_reg_read(void *pHandle, uint32_t ui32Address, uint32_t *pui32Value)
    e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e55c:	b08a      	sub	sp, #40	; 0x28
    pui8Parameter[1] = (ui32Address >> 8);
    e55e:	0a0f      	lsrs	r7, r1, #8
    pui8Parameter[2] = (ui32Address >> 16);
    e560:	0c0e      	lsrs	r6, r1, #16
    pui8Parameter[3] = (ui32Address >> 24);
    e562:	0e0d      	lsrs	r5, r1, #24
    pui8Dest[0] = 0x01;
    e564:	4b4c      	ldr	r3, [pc, #304]	; (e698 <am_hal_ble_plf_reg_read.part.8+0x140>)
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    e566:	4c4d      	ldr	r4, [pc, #308]	; (e69c <am_hal_ble_plf_reg_read.part.8+0x144>)
    pui8Parameter[0] = ui32Address;
    e568:	f88d 1004 	strb.w	r1, [sp, #4]
    pui8Parameter[1] = (ui32Address >> 8);
    e56c:	f88d 7005 	strb.w	r7, [sp, #5]
    pui8Parameter[3] = (ui32Address >> 24);
    e570:	f88d 5007 	strb.w	r5, [sp, #7]
    pui8Dest[0] = 0x01;
    e574:	9300      	str	r3, [sp, #0]
    pui8Parameter[2] = (ui32Address >> 16);
    e576:	f88d 6006 	strb.w	r6, [sp, #6]
    BLEIFn(ui32Module)->INTEN = 0;
    e57a:	2300      	movs	r3, #0
    am_hal_ble_transfer_t HciWrite =
    e57c:	2508      	movs	r5, #8
    e57e:	2101      	movs	r1, #1
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    e580:	f8d4 6220 	ldr.w	r6, [r4, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
    e584:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
am_hal_ble_plf_reg_read(void *pHandle, uint32_t ui32Address, uint32_t *pui32Value)
    e588:	4617      	mov	r7, r2
    am_hal_ble_transfer_t HciWrite =
    e58a:	f88d 300c 	strb.w	r3, [sp, #12]
    e58e:	f88d 300d 	strb.w	r3, [sp, #13]
    e592:	f88d 300e 	strb.w	r3, [sp, #14]
    e596:	f88d 300f 	strb.w	r3, [sp, #15]
    e59a:	f88d 3013 	strb.w	r3, [sp, #19]
    e59e:	f88d 3014 	strb.w	r3, [sp, #20]
    e5a2:	9306      	str	r3, [sp, #24]
    e5a4:	9307      	str	r3, [sp, #28]
    e5a6:	f8cd d008 	str.w	sp, [sp, #8]
    e5aa:	f8ad 5010 	strh.w	r5, [sp, #16]
    e5ae:	f88d 1012 	strb.w	r1, [sp, #18]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e5b2:	4680      	mov	r8, r0
    e5b4:	b148      	cbz	r0, e5ca <am_hal_ble_plf_reg_read.part.8+0x72>
    e5b6:	6804      	ldr	r4, [r0, #0]
    e5b8:	4a39      	ldr	r2, [pc, #228]	; (e6a0 <am_hal_ble_plf_reg_read.part.8+0x148>)
    e5ba:	f024 4c7e 	bic.w	ip, r4, #4261412864	; 0xfe000000
    e5be:	4594      	cmp	ip, r2
    e5c0:	d103      	bne.n	e5ca <am_hal_ble_plf_reg_read.part.8+0x72>
    e5c2:	eb0d 0105 	add.w	r1, sp, r5
    e5c6:	f7ff f883 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    e5ca:	4c34      	ldr	r4, [pc, #208]	; (e69c <am_hal_ble_plf_reg_read.part.8+0x144>)
    e5cc:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
    e5d0:	f040 0302 	orr.w	r3, r0, #2
    e5d4:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    e5d8:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e5dc:	0609      	lsls	r1, r1, #24
    e5de:	bf58      	it	pl
    e5e0:	f242 7510 	movwpl	r5, #10000	; 0x2710
    e5e4:	d444      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e5e6:	2001      	movs	r0, #1
    e5e8:	f001 fc0a 	bl	fe00 <am_hal_flash_delay>
    e5ec:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e5f0:	0613      	lsls	r3, r2, #24
    e5f2:	f04f 0001 	mov.w	r0, #1
    e5f6:	d43b      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e5f8:	f001 fc02 	bl	fe00 <am_hal_flash_delay>
    e5fc:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e600:	061a      	lsls	r2, r3, #24
    e602:	f04f 0001 	mov.w	r0, #1
    e606:	d433      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e608:	f001 fbfa 	bl	fe00 <am_hal_flash_delay>
    e60c:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e610:	0609      	lsls	r1, r1, #24
    e612:	f04f 0001 	mov.w	r0, #1
    e616:	d42b      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e618:	f001 fbf2 	bl	fe00 <am_hal_flash_delay>
    e61c:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e620:	0612      	lsls	r2, r2, #24
    e622:	f04f 0001 	mov.w	r0, #1
    e626:	d423      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e628:	f001 fbea 	bl	fe00 <am_hal_flash_delay>
    e62c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e630:	061b      	lsls	r3, r3, #24
    e632:	f04f 0001 	mov.w	r0, #1
    e636:	d41b      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e638:	f001 fbe2 	bl	fe00 <am_hal_flash_delay>
    e63c:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e640:	0609      	lsls	r1, r1, #24
    e642:	f04f 0001 	mov.w	r0, #1
    e646:	d413      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e648:	f001 fbda 	bl	fe00 <am_hal_flash_delay>
    e64c:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e650:	0612      	lsls	r2, r2, #24
    e652:	f04f 0001 	mov.w	r0, #1
    e656:	d40b      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e658:	f001 fbd2 	bl	fe00 <am_hal_flash_delay>
    e65c:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    e660:	0603      	lsls	r3, r0, #24
    e662:	d405      	bmi.n	e670 <am_hal_ble_plf_reg_read.part.8+0x118>
    e664:	3d08      	subs	r5, #8
    e666:	d1be      	bne.n	e5e6 <am_hal_ble_plf_reg_read.part.8+0x8e>
    e668:	480e      	ldr	r0, [pc, #56]	; (e6a4 <am_hal_ble_plf_reg_read.part.8+0x14c>)
}
    e66a:	b00a      	add	sp, #40	; 0x28
    e66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    e670:	a902      	add	r1, sp, #8
    e672:	4640      	mov	r0, r8
    e674:	2200      	movs	r2, #0
    e676:	f7ff ff1d 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
    e67a:	f89d 500f 	ldrb.w	r5, [sp, #15]
                   ((sResponse.words[2] & 0x00FFFFFF) << 8));
    e67e:	9c04      	ldr	r4, [sp, #16]
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    e680:	4906      	ldr	r1, [pc, #24]	; (e69c <am_hal_ble_plf_reg_read.part.8+0x144>)
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
    e682:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
    return AM_HAL_STATUS_SUCCESS;
    e686:	2000      	movs	r0, #0
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
    e688:	603b      	str	r3, [r7, #0]
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    e68a:	f8c1 6228 	str.w	r6, [r1, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    e68e:	f8c1 6220 	str.w	r6, [r1, #544]	; 0x220
}
    e692:	b00a      	add	sp, #40	; 0x28
    e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e698:	04fd0201 	.word	0x04fd0201
    e69c:	5000c000 	.word	0x5000c000
    e6a0:	01775230 	.word	0x01775230
    e6a4:	08000004 	.word	0x08000004

0000e6a8 <am_hal_ble_plf_reg_write.part.9>:
am_hal_ble_plf_reg_write(void *pHandle, uint32_t ui32Address, uint32_t ui32Value)
    e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6aa:	b08d      	sub	sp, #52	; 0x34
    pui8Parameter[1] = (ui32Address >> 8);
    e6ac:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    pui8Parameter[2] = (ui32Address >> 16);
    e6b0:	0c0f      	lsrs	r7, r1, #16
    pui8Parameter[3] = (ui32Address >> 24);
    e6b2:	0e0e      	lsrs	r6, r1, #24
    pui8Parameter[6] = (ui32Value >> 16);
    e6b4:	0c14      	lsrs	r4, r2, #16
    pui8Parameter[7] = (ui32Value >> 24);
    e6b6:	0e13      	lsrs	r3, r2, #24
    pui8Parameter[5] = (ui32Value >> 8);
    e6b8:	0a15      	lsrs	r5, r2, #8
    pui8Parameter[0] = ui32Address;
    e6ba:	f88d 1004 	strb.w	r1, [sp, #4]
    pui8Parameter[4] = ui32Value;
    e6be:	f88d 2008 	strb.w	r2, [sp, #8]
    pui8Parameter[1] = (ui32Address >> 8);
    e6c2:	f88d e005 	strb.w	lr, [sp, #5]
    pui8Parameter[3] = (ui32Address >> 24);
    e6c6:	f88d 6007 	strb.w	r6, [sp, #7]
    pui8Parameter[6] = (ui32Value >> 16);
    e6ca:	f88d 400a 	strb.w	r4, [sp, #10]
    pui8Parameter[7] = (ui32Value >> 24);
    e6ce:	f88d 300b 	strb.w	r3, [sp, #11]
    pui8Parameter[2] = (ui32Address >> 16);
    e6d2:	f88d 7006 	strb.w	r7, [sp, #6]
    pui8Parameter[5] = (ui32Value >> 8);
    e6d6:	f88d 5009 	strb.w	r5, [sp, #9]
    e6da:	a901      	add	r1, sp, #4
am_hal_ble_plf_reg_write(void *pHandle, uint32_t ui32Address, uint32_t ui32Value)
    e6dc:	4606      	mov	r6, r0
    e6de:	c903      	ldmia	r1, {r0, r1}
    e6e0:	aa04      	add	r2, sp, #16
    e6e2:	e882 0003 	stmia.w	r2, {r0, r1}
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    e6e6:	4a45      	ldr	r2, [pc, #276]	; (e7fc <am_hal_ble_plf_reg_write.part.9+0x154>)
    pui8Dest[0] = 0x01;
    e6e8:	4845      	ldr	r0, [pc, #276]	; (e800 <am_hal_ble_plf_reg_write.part.9+0x158>)
    e6ea:	9003      	str	r0, [sp, #12]
    BLEIFn(ui32Module)->INTEN = 0;
    e6ec:	2300      	movs	r3, #0
    am_hal_ble_transfer_t HciWrite =
    e6ee:	ac03      	add	r4, sp, #12
    e6f0:	f04f 0c0c 	mov.w	ip, #12
    e6f4:	f04f 0e01 	mov.w	lr, #1
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    e6f8:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
    e6fc:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    am_hal_ble_transfer_t HciWrite =
    e700:	f88d 301c 	strb.w	r3, [sp, #28]
    e704:	f88d 301d 	strb.w	r3, [sp, #29]
    e708:	f88d 301e 	strb.w	r3, [sp, #30]
    e70c:	f88d 301f 	strb.w	r3, [sp, #31]
    e710:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    e714:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    e718:	930a      	str	r3, [sp, #40]	; 0x28
    e71a:	930b      	str	r3, [sp, #44]	; 0x2c
    e71c:	9406      	str	r4, [sp, #24]
    e71e:	f8ad c020 	strh.w	ip, [sp, #32]
    e722:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e726:	b14e      	cbz	r6, e73c <am_hal_ble_plf_reg_write.part.9+0x94>
    e728:	6831      	ldr	r1, [r6, #0]
    e72a:	4836      	ldr	r0, [pc, #216]	; (e804 <am_hal_ble_plf_reg_write.part.9+0x15c>)
    e72c:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
    e730:	4282      	cmp	r2, r0
    e732:	d103      	bne.n	e73c <am_hal_ble_plf_reg_write.part.9+0x94>
    e734:	a906      	add	r1, sp, #24
    e736:	4630      	mov	r0, r6
    e738:	f7fe ffca 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    e73c:	4c2f      	ldr	r4, [pc, #188]	; (e7fc <am_hal_ble_plf_reg_write.part.9+0x154>)
    e73e:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    e742:	f043 0102 	orr.w	r1, r3, #2
    e746:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    e74a:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    e74e:	0601      	lsls	r1, r0, #24
    e750:	bf58      	it	pl
    e752:	f242 7510 	movwpl	r5, #10000	; 0x2710
    e756:	d443      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e758:	2001      	movs	r0, #1
    e75a:	f001 fb51 	bl	fe00 <am_hal_flash_delay>
    e75e:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e762:	0613      	lsls	r3, r2, #24
    e764:	f04f 0001 	mov.w	r0, #1
    e768:	d43a      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e76a:	f001 fb49 	bl	fe00 <am_hal_flash_delay>
    e76e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e772:	061a      	lsls	r2, r3, #24
    e774:	f04f 0001 	mov.w	r0, #1
    e778:	d432      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e77a:	f001 fb41 	bl	fe00 <am_hal_flash_delay>
    e77e:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e782:	0609      	lsls	r1, r1, #24
    e784:	f04f 0001 	mov.w	r0, #1
    e788:	d42a      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e78a:	f001 fb39 	bl	fe00 <am_hal_flash_delay>
    e78e:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e792:	0612      	lsls	r2, r2, #24
    e794:	f04f 0001 	mov.w	r0, #1
    e798:	d422      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e79a:	f001 fb31 	bl	fe00 <am_hal_flash_delay>
    e79e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e7a2:	061b      	lsls	r3, r3, #24
    e7a4:	f04f 0001 	mov.w	r0, #1
    e7a8:	d41a      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e7aa:	f001 fb29 	bl	fe00 <am_hal_flash_delay>
    e7ae:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    e7b2:	0609      	lsls	r1, r1, #24
    e7b4:	f04f 0001 	mov.w	r0, #1
    e7b8:	d412      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e7ba:	f001 fb21 	bl	fe00 <am_hal_flash_delay>
    e7be:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    e7c2:	0612      	lsls	r2, r2, #24
    e7c4:	f04f 0001 	mov.w	r0, #1
    e7c8:	d40a      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e7ca:	f001 fb19 	bl	fe00 <am_hal_flash_delay>
    e7ce:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    e7d2:	0603      	lsls	r3, r0, #24
    e7d4:	d404      	bmi.n	e7e0 <am_hal_ble_plf_reg_write.part.9+0x138>
    e7d6:	3d08      	subs	r5, #8
    e7d8:	d1be      	bne.n	e758 <am_hal_ble_plf_reg_write.part.9+0xb0>
    e7da:	480b      	ldr	r0, [pc, #44]	; (e808 <am_hal_ble_plf_reg_write.part.9+0x160>)
}
    e7dc:	b00d      	add	sp, #52	; 0x34
    e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    e7e0:	4630      	mov	r0, r6
    e7e2:	2200      	movs	r2, #0
    e7e4:	a906      	add	r1, sp, #24
    e7e6:	f7ff fe65 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    e7ea:	4d04      	ldr	r5, [pc, #16]	; (e7fc <am_hal_ble_plf_reg_write.part.9+0x154>)
    return AM_HAL_STATUS_SUCCESS;
    e7ec:	2000      	movs	r0, #0
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    e7ee:	f8c5 7228 	str.w	r7, [r5, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    e7f2:	f8c5 7220 	str.w	r7, [r5, #544]	; 0x220
}
    e7f6:	b00d      	add	sp, #52	; 0x34
    e7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7fa:	bf00      	nop
    e7fc:	5000c000 	.word	0x5000c000
    e800:	08fd0301 	.word	0x08fd0301
    e804:	01775230 	.word	0x01775230
    e808:	08000004 	.word	0x08000004

0000e80c <am_hal_ble_crystal_trim_set>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e80c:	b150      	cbz	r0, e824 <am_hal_ble_crystal_trim_set+0x18>
{
    e80e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e810:	6804      	ldr	r4, [r0, #0]
    e812:	4d1a      	ldr	r5, [pc, #104]	; (e87c <am_hal_ble_crystal_trim_set+0x70>)
    e814:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e818:	42ac      	cmp	r4, r5
{
    e81a:	b083      	sub	sp, #12
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e81c:	d004      	beq.n	e828 <am_hal_ble_crystal_trim_set+0x1c>
}
    e81e:	2000      	movs	r0, #0
    e820:	b003      	add	sp, #12
    e822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e824:	2000      	movs	r0, #0
    e826:	4770      	bx	lr
    e828:	4605      	mov	r5, r0
    e82a:	460e      	mov	r6, r1
    e82c:	aa01      	add	r2, sp, #4
    e82e:	4914      	ldr	r1, [pc, #80]	; (e880 <am_hal_ble_crystal_trim_set+0x74>)
    e830:	f7ff fe92 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e834:	682f      	ldr	r7, [r5, #0]
    e836:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
    e83a:	42a7      	cmp	r7, r4
    e83c:	d1ef      	bne.n	e81e <am_hal_ble_crystal_trim_set+0x12>
    e83e:	f04f 32ff 	mov.w	r2, #4294967295
    e842:	490f      	ldr	r1, [pc, #60]	; (e880 <am_hal_ble_crystal_trim_set+0x74>)
    e844:	4628      	mov	r0, r5
    e846:	f7ff ff2f 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e84a:	6828      	ldr	r0, [r5, #0]
    e84c:	f020 447e 	bic.w	r4, r0, #4261412864	; 0xfe000000
    e850:	42bc      	cmp	r4, r7
    e852:	d1e4      	bne.n	e81e <am_hal_ble_crystal_trim_set+0x12>
    e854:	f3c6 020a 	ubfx	r2, r6, #0, #11
    e858:	490a      	ldr	r1, [pc, #40]	; (e884 <am_hal_ble_crystal_trim_set+0x78>)
    e85a:	4628      	mov	r0, r5
    e85c:	f7ff ff24 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e860:	6829      	ldr	r1, [r5, #0]
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
    e862:	9a01      	ldr	r2, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e864:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    e868:	45a4      	cmp	ip, r4
    e86a:	d1d8      	bne.n	e81e <am_hal_ble_crystal_trim_set+0x12>
    e86c:	4628      	mov	r0, r5
    e86e:	4904      	ldr	r1, [pc, #16]	; (e880 <am_hal_ble_crystal_trim_set+0x74>)
    e870:	f7ff ff1a 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
}
    e874:	2000      	movs	r0, #0
    e876:	b003      	add	sp, #12
    e878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e87a:	bf00      	nop
    e87c:	01775230 	.word	0x01775230
    e880:	43000004 	.word	0x43000004
    e884:	43800004 	.word	0x43800004

0000e888 <am_hal_ble_transmitter_modex_set>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e888:	b1f0      	cbz	r0, e8c8 <am_hal_ble_transmitter_modex_set+0x40>
{
    e88a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e88c:	6804      	ldr	r4, [r0, #0]
    e88e:	4a38      	ldr	r2, [pc, #224]	; (e970 <am_hal_ble_transmitter_modex_set+0xe8>)
    e890:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e894:	4294      	cmp	r4, r2
{
    e896:	b085      	sub	sp, #20
    e898:	4605      	mov	r5, r0
    e89a:	460e      	mov	r6, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e89c:	d016      	beq.n	e8cc <am_hal_ble_transmitter_modex_set+0x44>
    RegValueSTCR |= (1 << 10);
    e89e:	9803      	ldr	r0, [sp, #12]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e8a0:	4f33      	ldr	r7, [pc, #204]	; (e970 <am_hal_ble_transmitter_modex_set+0xe8>)
    RegValueSTCR |= (1 << 10);
    e8a2:	f440 6280 	orr.w	r2, r0, #1024	; 0x400
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e8a6:	42bc      	cmp	r4, r7
    RegValueSTCR |= (1 << 10);
    e8a8:	9203      	str	r2, [sp, #12]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e8aa:	d02d      	beq.n	e908 <am_hal_ble_transmitter_modex_set+0x80>
    e8ac:	4b30      	ldr	r3, [pc, #192]	; (e970 <am_hal_ble_transmitter_modex_set+0xe8>)
    e8ae:	429c      	cmp	r4, r3
    e8b0:	d002      	beq.n	e8b8 <am_hal_ble_transmitter_modex_set+0x30>
}
    e8b2:	2000      	movs	r0, #0
    e8b4:	b005      	add	sp, #20
    e8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8b8:	4628      	mov	r0, r5
    e8ba:	9a01      	ldr	r2, [sp, #4]
    e8bc:	492d      	ldr	r1, [pc, #180]	; (e974 <am_hal_ble_transmitter_modex_set+0xec>)
    e8be:	f7ff fef3 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e8c2:	2000      	movs	r0, #0
    e8c4:	b005      	add	sp, #20
    e8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8c8:	2000      	movs	r0, #0
    e8ca:	4770      	bx	lr
    e8cc:	aa01      	add	r2, sp, #4
    e8ce:	4929      	ldr	r1, [pc, #164]	; (e974 <am_hal_ble_transmitter_modex_set+0xec>)
    e8d0:	f7ff fe42 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e8d4:	682f      	ldr	r7, [r5, #0]
    e8d6:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
    e8da:	42a7      	cmp	r7, r4
    e8dc:	d142      	bne.n	e964 <am_hal_ble_transmitter_modex_set+0xdc>
    e8de:	f04f 32ff 	mov.w	r2, #4294967295
    e8e2:	4924      	ldr	r1, [pc, #144]	; (e974 <am_hal_ble_transmitter_modex_set+0xec>)
    e8e4:	4628      	mov	r0, r5
    e8e6:	f7ff fedf 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e8ea:	6828      	ldr	r0, [r5, #0]
    e8ec:	f020 477e 	bic.w	r7, r0, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e8f0:	42a7      	cmp	r7, r4
    e8f2:	d137      	bne.n	e964 <am_hal_ble_transmitter_modex_set+0xdc>
    e8f4:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
    e8f8:	aa03      	add	r2, sp, #12
    e8fa:	4628      	mov	r0, r5
    e8fc:	f7ff fe2c 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    e900:	6829      	ldr	r1, [r5, #0]
    e902:	f021 447e 	bic.w	r4, r1, #4261412864	; 0xfe000000
    e906:	e7ca      	b.n	e89e <am_hal_ble_transmitter_modex_set+0x16>
    e908:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
    e90c:	4628      	mov	r0, r5
    e90e:	f7ff fecb 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e912:	6829      	ldr	r1, [r5, #0]
    e914:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    e918:	45a4      	cmp	ip, r4
    e91a:	d1ca      	bne.n	e8b2 <am_hal_ble_transmitter_modex_set+0x2a>
    e91c:	aa02      	add	r2, sp, #8
    e91e:	4916      	ldr	r1, [pc, #88]	; (e978 <am_hal_ble_transmitter_modex_set+0xf0>)
    e920:	4628      	mov	r0, r5
    e922:	f7ff fe19 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    e926:	682c      	ldr	r4, [r5, #0]
    e928:	f024 477e 	bic.w	r7, r4, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e92c:	4b10      	ldr	r3, [pc, #64]	; (e970 <am_hal_ble_transmitter_modex_set+0xe8>)
    e92e:	429f      	cmp	r7, r3
    e930:	d1bf      	bne.n	e8b2 <am_hal_ble_transmitter_modex_set+0x2a>
    am_hal_ble_plf_reg_write(pBLE, 0x45800070, (RegValueBACKCR | 0x8));
    e932:	9a02      	ldr	r2, [sp, #8]
    e934:	4910      	ldr	r1, [pc, #64]	; (e978 <am_hal_ble_transmitter_modex_set+0xf0>)
    e936:	f042 0208 	orr.w	r2, r2, #8
    e93a:	4628      	mov	r0, r5
    e93c:	f7ff feb4 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e940:	6828      	ldr	r0, [r5, #0]
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
    e942:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e946:	f020 447e 	bic.w	r4, r0, #4261412864	; 0xfe000000
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
    e94a:	0071      	lsls	r1, r6, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e94c:	42bc      	cmp	r4, r7
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
    e94e:	f041 0201 	orr.w	r2, r1, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e952:	d1ae      	bne.n	e8b2 <am_hal_ble_transmitter_modex_set+0x2a>
    e954:	4909      	ldr	r1, [pc, #36]	; (e97c <am_hal_ble_transmitter_modex_set+0xf4>)
    e956:	4628      	mov	r0, r5
    e958:	f7ff fea6 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e95c:	682f      	ldr	r7, [r5, #0]
    e95e:	f027 447e 	bic.w	r4, r7, #4261412864	; 0xfe000000
    e962:	e7a3      	b.n	e8ac <am_hal_ble_transmitter_modex_set+0x24>
    RegValueSTCR |= (1 << 10);
    e964:	9b03      	ldr	r3, [sp, #12]
    e966:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    e96a:	9203      	str	r2, [sp, #12]
    e96c:	e7de      	b.n	e92c <am_hal_ble_transmitter_modex_set+0xa4>
    e96e:	bf00      	nop
    e970:	01775230 	.word	0x01775230
    e974:	43000004 	.word	0x43000004
    e978:	45800070 	.word	0x45800070
    e97c:	52000014 	.word	0x52000014

0000e980 <am_hal_ble_tx_power_set>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e980:	b178      	cbz	r0, e9a2 <am_hal_ble_tx_power_set+0x22>
{
    e982:	b510      	push	{r4, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e984:	6802      	ldr	r2, [r0, #0]
    e986:	4c08      	ldr	r4, [pc, #32]	; (e9a8 <am_hal_ble_tx_power_set+0x28>)
    e988:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    e98c:	45a4      	cmp	ip, r4
    e98e:	d001      	beq.n	e994 <am_hal_ble_tx_power_set+0x14>
}
    e990:	2000      	movs	r0, #0
    e992:	bd10      	pop	{r4, pc}
    e994:	f041 6200 	orr.w	r2, r1, #134217728	; 0x8000000
    e998:	4904      	ldr	r1, [pc, #16]	; (e9ac <am_hal_ble_tx_power_set+0x2c>)
    e99a:	f7ff fe85 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    e99e:	2000      	movs	r0, #0
    e9a0:	bd10      	pop	{r4, pc}
    e9a2:	2000      	movs	r0, #0
    e9a4:	4770      	bx	lr
    e9a6:	bf00      	nop
    e9a8:	01775230 	.word	0x01775230
    e9ac:	20006038 	.word	0x20006038

0000e9b0 <am_hal_ble_transmitter_control>:
{
    e9b0:	b570      	push	{r4, r5, r6, lr}
    e9b2:	b082      	sub	sp, #8
    uint32_t sleepenable=0;
    e9b4:	2300      	movs	r3, #0
    e9b6:	9301      	str	r3, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e9b8:	b170      	cbz	r0, e9d8 <am_hal_ble_transmitter_control+0x28>
    e9ba:	6803      	ldr	r3, [r0, #0]
    e9bc:	4a1e      	ldr	r2, [pc, #120]	; (ea38 <am_hal_ble_transmitter_control+0x88>)
    e9be:	f023 467e 	bic.w	r6, r3, #4261412864	; 0xfe000000
    e9c2:	4296      	cmp	r6, r2
    e9c4:	4604      	mov	r4, r0
    e9c6:	460d      	mov	r5, r1
    e9c8:	d01c      	beq.n	ea04 <am_hal_ble_transmitter_control+0x54>
    if (ui8TxCtrl)
    e9ca:	b12d      	cbz	r5, e9d8 <am_hal_ble_transmitter_control+0x28>
        RegValueTRX = 0x2000A;
    e9cc:	4e1b      	ldr	r6, [pc, #108]	; (ea3c <am_hal_ble_transmitter_control+0x8c>)
    e9ce:	f023 457e 	bic.w	r5, r3, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e9d2:	4a19      	ldr	r2, [pc, #100]	; (ea38 <am_hal_ble_transmitter_control+0x88>)
    e9d4:	4295      	cmp	r5, r2
    e9d6:	d002      	beq.n	e9de <am_hal_ble_transmitter_control+0x2e>
}
    e9d8:	2000      	movs	r0, #0
    e9da:	b002      	add	sp, #8
    e9dc:	bd70      	pop	{r4, r5, r6, pc}
    e9de:	4918      	ldr	r1, [pc, #96]	; (ea40 <am_hal_ble_transmitter_control+0x90>)
    e9e0:	f04f 32ff 	mov.w	r2, #4294967295
    e9e4:	4620      	mov	r0, r4
    e9e6:	f7ff fe5f 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    e9ea:	6823      	ldr	r3, [r4, #0]
    e9ec:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e9f0:	42a9      	cmp	r1, r5
    e9f2:	d1f1      	bne.n	e9d8 <am_hal_ble_transmitter_control+0x28>
    e9f4:	4632      	mov	r2, r6
    e9f6:	4620      	mov	r0, r4
    e9f8:	4912      	ldr	r1, [pc, #72]	; (ea44 <am_hal_ble_transmitter_control+0x94>)
    e9fa:	f7ff fe55 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
}
    e9fe:	2000      	movs	r0, #0
    ea00:	b002      	add	sp, #8
    ea02:	bd70      	pop	{r4, r5, r6, pc}
    ea04:	aa01      	add	r2, sp, #4
    ea06:	4910      	ldr	r1, [pc, #64]	; (ea48 <am_hal_ble_transmitter_control+0x98>)
    ea08:	f7ff fda6 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    ea0c:	9801      	ldr	r0, [sp, #4]
    ea0e:	6823      	ldr	r3, [r4, #0]
    ea10:	0c01      	lsrs	r1, r0, #16
    ea12:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    ea16:	040a      	lsls	r2, r1, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea18:	42b0      	cmp	r0, r6
    sleepenable &=0xffff0000;
    ea1a:	9201      	str	r2, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea1c:	d1d5      	bne.n	e9ca <am_hal_ble_transmitter_control+0x1a>
    ea1e:	490a      	ldr	r1, [pc, #40]	; (ea48 <am_hal_ble_transmitter_control+0x98>)
    ea20:	4620      	mov	r0, r4
    ea22:	f7ff fe41 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    if (ui8TxCtrl)
    ea26:	b915      	cbnz	r5, ea2e <am_hal_ble_transmitter_control+0x7e>
        RegValueTRX = 0x8;
    ea28:	2608      	movs	r6, #8
    ea2a:	6823      	ldr	r3, [r4, #0]
    ea2c:	e7cf      	b.n	e9ce <am_hal_ble_transmitter_control+0x1e>
    ea2e:	6825      	ldr	r5, [r4, #0]
        RegValueTRX = 0x2000A;
    ea30:	4e02      	ldr	r6, [pc, #8]	; (ea3c <am_hal_ble_transmitter_control+0x8c>)
    ea32:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    ea36:	e7cc      	b.n	e9d2 <am_hal_ble_transmitter_control+0x22>
    ea38:	01775230 	.word	0x01775230
    ea3c:	0002000a 	.word	0x0002000a
    ea40:	43000004 	.word	0x43000004
    ea44:	52400000 	.word	0x52400000
    ea48:	200067c4 	.word	0x200067c4

0000ea4c <am_hal_ble_set_constant_transmission>:
{
    ea4c:	b570      	push	{r4, r5, r6, lr}
    ea4e:	b082      	sub	sp, #8
    uint32_t sleepenable=0;
    ea50:	2300      	movs	r3, #0
    ea52:	9301      	str	r3, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea54:	b150      	cbz	r0, ea6c <am_hal_ble_set_constant_transmission+0x20>
    ea56:	6804      	ldr	r4, [r0, #0]
    ea58:	4a1f      	ldr	r2, [pc, #124]	; (ead8 <am_hal_ble_set_constant_transmission+0x8c>)
    ea5a:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    ea5e:	4294      	cmp	r4, r2
    ea60:	4605      	mov	r5, r0
    ea62:	460e      	mov	r6, r1
    ea64:	d005      	beq.n	ea72 <am_hal_ble_set_constant_transmission+0x26>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea66:	4a1c      	ldr	r2, [pc, #112]	; (ead8 <am_hal_ble_set_constant_transmission+0x8c>)
    ea68:	4294      	cmp	r4, r2
    ea6a:	d019      	beq.n	eaa0 <am_hal_ble_set_constant_transmission+0x54>
}
    ea6c:	2000      	movs	r0, #0
    ea6e:	b002      	add	sp, #8
    ea70:	bd70      	pop	{r4, r5, r6, pc}
    ea72:	aa01      	add	r2, sp, #4
    ea74:	4919      	ldr	r1, [pc, #100]	; (eadc <am_hal_ble_set_constant_transmission+0x90>)
    ea76:	f7ff fd6f 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    ea7a:	9801      	ldr	r0, [sp, #4]
    ea7c:	6829      	ldr	r1, [r5, #0]
    ea7e:	0c03      	lsrs	r3, r0, #16
    ea80:	f021 407e 	bic.w	r0, r1, #4261412864	; 0xfe000000
    ea84:	041a      	lsls	r2, r3, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea86:	42a0      	cmp	r0, r4
    sleepenable &=0xffff0000;
    ea88:	9201      	str	r2, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ea8a:	d1ef      	bne.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    ea8c:	4913      	ldr	r1, [pc, #76]	; (eadc <am_hal_ble_set_constant_transmission+0x90>)
    ea8e:	4628      	mov	r0, r5
    ea90:	f7ff fe0a 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ea94:	682c      	ldr	r4, [r5, #0]
    ea96:	4a10      	ldr	r2, [pc, #64]	; (ead8 <am_hal_ble_set_constant_transmission+0x8c>)
    ea98:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    ea9c:	4294      	cmp	r4, r2
    ea9e:	d1e5      	bne.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    eaa0:	490f      	ldr	r1, [pc, #60]	; (eae0 <am_hal_ble_set_constant_transmission+0x94>)
    eaa2:	f04f 32ff 	mov.w	r2, #4294967295
    eaa6:	4628      	mov	r0, r5
    eaa8:	f7ff fdfe 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    eaac:	6829      	ldr	r1, [r5, #0]
    eaae:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    if(enable)
    eab2:	b146      	cbz	r6, eac6 <am_hal_ble_set_constant_transmission+0x7a>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eab4:	45a4      	cmp	ip, r4
    eab6:	d1d9      	bne.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    eab8:	4628      	mov	r0, r5
    eaba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    eabe:	4909      	ldr	r1, [pc, #36]	; (eae4 <am_hal_ble_set_constant_transmission+0x98>)
    eac0:	f7ff fdf2 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    eac4:	e7d2      	b.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    eac6:	45a4      	cmp	ip, r4
    eac8:	d1d0      	bne.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    eaca:	4632      	mov	r2, r6
    eacc:	4628      	mov	r0, r5
    eace:	4905      	ldr	r1, [pc, #20]	; (eae4 <am_hal_ble_set_constant_transmission+0x98>)
    ead0:	f7ff fdea 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ead4:	e7ca      	b.n	ea6c <am_hal_ble_set_constant_transmission+0x20>
    ead6:	bf00      	nop
    ead8:	01775230 	.word	0x01775230
    eadc:	200067c4 	.word	0x200067c4
    eae0:	43000004 	.word	0x43000004
    eae4:	508000e0 	.word	0x508000e0

0000eae8 <am_hal_ble_init_rf_channel>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eae8:	b160      	cbz	r0, eb04 <am_hal_ble_init_rf_channel+0x1c>
{
    eaea:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eaec:	6804      	ldr	r4, [r0, #0]
    eaee:	4a4e      	ldr	r2, [pc, #312]	; (ec28 <am_hal_ble_init_rf_channel+0x140>)
    eaf0:	f024 467e 	bic.w	r6, r4, #4261412864	; 0xfe000000
    eaf4:	4296      	cmp	r6, r2
    eaf6:	4605      	mov	r5, r0
{
    eaf8:	b08f      	sub	sp, #60	; 0x3c
        return AM_HAL_STATUS_INVALID_HANDLE;
    eafa:	bf18      	it	ne
    eafc:	2002      	movne	r0, #2
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eafe:	d003      	beq.n	eb08 <am_hal_ble_init_rf_channel+0x20>
}
    eb00:	b00f      	add	sp, #60	; 0x3c
    eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    eb04:	2002      	movs	r0, #2
    eb06:	4770      	bx	lr
    uint32_t sleepenable=0;
    eb08:	af0e      	add	r7, sp, #56	; 0x38
    eb0a:	2300      	movs	r3, #0
    eb0c:	f847 3d18 	str.w	r3, [r7, #-24]!
    eb10:	4946      	ldr	r1, [pc, #280]	; (ec2c <am_hal_ble_init_rf_channel+0x144>)
    eb12:	463a      	mov	r2, r7
    eb14:	f7ff fd20 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    sleepenable &=0xffff0000;
    eb18:	9808      	ldr	r0, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb1a:	6829      	ldr	r1, [r5, #0]
    sleepenable &=0xffff0000;
    eb1c:	0c04      	lsrs	r4, r0, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb1e:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    sleepenable &=0xffff0000;
    eb22:	0422      	lsls	r2, r4, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb24:	45b4      	cmp	ip, r6
    sleepenable &=0xffff0000;
    eb26:	9208      	str	r2, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb28:	d079      	beq.n	ec1e <am_hal_ble_init_rf_channel+0x136>
    sWriteCommand.bytes[4] = 0x00;
    eb2a:	2300      	movs	r3, #0
    sWriteCommand.bytes[0] = 0x01;
    eb2c:	f04f 0e01 	mov.w	lr, #1
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    eb30:	4a3f      	ldr	r2, [pc, #252]	; (ec30 <am_hal_ble_init_rf_channel+0x148>)
    sWriteCommand.bytes[0] = 0x01;
    eb32:	f88d e000 	strb.w	lr, [sp]
    sWriteCommand.bytes[1] = 0x1d;
    eb36:	261d      	movs	r6, #29
    sWriteCommand.bytes[2] = 0x20;
    eb38:	2020      	movs	r0, #32
    eb3a:	f88d 0002 	strb.w	r0, [sp, #2]
    sWriteCommand.bytes[3] = 0x01;
    eb3e:	f88d e003 	strb.w	lr, [sp, #3]
    sWriteCommand.bytes[1] = 0x1d;
    eb42:	f88d 6001 	strb.w	r6, [sp, #1]
    sWriteCommand.bytes[4] = 0x00;
    eb46:	f88d 3004 	strb.w	r3, [sp, #4]
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    eb4a:	f8d2 6220 	ldr.w	r6, [r2, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
    eb4e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb52:	6829      	ldr	r1, [r5, #0]
    eb54:	4c34      	ldr	r4, [pc, #208]	; (ec28 <am_hal_ble_init_rf_channel+0x140>)
    am_hal_ble_transfer_t HciWrite =
    eb56:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb5a:	f021 407e 	bic.w	r0, r1, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    eb5e:	2205      	movs	r2, #5
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb60:	42a0      	cmp	r0, r4
    am_hal_ble_transfer_t HciWrite =
    eb62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    eb66:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    eb6a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    eb6e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    eb72:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    eb76:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    eb7a:	930c      	str	r3, [sp, #48]	; 0x30
    eb7c:	930d      	str	r3, [sp, #52]	; 0x34
    eb7e:	f8cd d020 	str.w	sp, [sp, #32]
    eb82:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eb86:	d045      	beq.n	ec14 <am_hal_ble_init_rf_channel+0x12c>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    eb88:	4c29      	ldr	r4, [pc, #164]	; (ec30 <am_hal_ble_init_rf_channel+0x148>)
    eb8a:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    eb8e:	f043 0102 	orr.w	r1, r3, #2
    eb92:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    while ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0 );
    eb96:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    eb9a:	0601      	lsls	r1, r0, #24
    eb9c:	d5fb      	bpl.n	eb96 <am_hal_ble_init_rf_channel+0xae>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    eb9e:	a904      	add	r1, sp, #16
    eba0:	2200      	movs	r2, #0
    eba2:	4628      	mov	r0, r5
    eba4:	f7ff fc86 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    delay_ms(10);
    eba8:	4822      	ldr	r0, [pc, #136]	; (ec34 <am_hal_ble_init_rf_channel+0x14c>)
    ebaa:	f001 f929 	bl	fe00 <am_hal_flash_delay>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ebae:	682a      	ldr	r2, [r5, #0]
    ebb0:	491d      	ldr	r1, [pc, #116]	; (ec28 <am_hal_ble_init_rf_channel+0x140>)
    sWriteCommand.bytes[0] = 0x01;
    ebb2:	4821      	ldr	r0, [pc, #132]	; (ec38 <am_hal_ble_init_rf_channel+0x150>)
    am_hal_ble_transfer_t HciWrite =
    ebb4:	f8cd d020 	str.w	sp, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ebb8:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    ebbc:	2300      	movs	r3, #0
    ebbe:	2404      	movs	r4, #4
    ebc0:	2201      	movs	r2, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ebc2:	458c      	cmp	ip, r1
    sWriteCommand.bytes[0] = 0x01;
    ebc4:	9000      	str	r0, [sp, #0]
    am_hal_ble_transfer_t HciWrite =
    ebc6:	9309      	str	r3, [sp, #36]	; 0x24
    ebc8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    ebcc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ebd0:	930c      	str	r3, [sp, #48]	; 0x30
    ebd2:	930d      	str	r3, [sp, #52]	; 0x34
    ebd4:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    ebd8:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ebdc:	d015      	beq.n	ec0a <am_hal_ble_init_rf_channel+0x122>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    ebde:	4f14      	ldr	r7, [pc, #80]	; (ec30 <am_hal_ble_init_rf_channel+0x148>)
    ebe0:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
    ebe4:	f041 0002 	orr.w	r0, r1, #2
    ebe8:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
    while ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0 );
    ebec:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    ebf0:	061b      	lsls	r3, r3, #24
    ebf2:	d5fb      	bpl.n	ebec <am_hal_ble_init_rf_channel+0x104>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    ebf4:	a904      	add	r1, sp, #16
    ebf6:	4628      	mov	r0, r5
    ebf8:	2200      	movs	r2, #0
    ebfa:	f7ff fc5b 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ebfe:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
    return AM_HAL_STATUS_SUCCESS;
    ec02:	2000      	movs	r0, #0
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    ec04:	f8c7 6220 	str.w	r6, [r7, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
    ec08:	e77a      	b.n	eb00 <am_hal_ble_init_rf_channel+0x18>
    ec0a:	4639      	mov	r1, r7
    ec0c:	4628      	mov	r0, r5
    ec0e:	f7fe fd5f 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    ec12:	e7e4      	b.n	ebde <am_hal_ble_init_rf_channel+0xf6>
    ec14:	4639      	mov	r1, r7
    ec16:	4628      	mov	r0, r5
    ec18:	f7fe fd5a 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    ec1c:	e7b4      	b.n	eb88 <am_hal_ble_init_rf_channel+0xa0>
    ec1e:	4903      	ldr	r1, [pc, #12]	; (ec2c <am_hal_ble_init_rf_channel+0x144>)
    ec20:	4628      	mov	r0, r5
    ec22:	f7ff fd41 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ec26:	e780      	b.n	eb2a <am_hal_ble_init_rf_channel+0x42>
    ec28:	01775230 	.word	0x01775230
    ec2c:	200067c4 	.word	0x200067c4
    ec30:	5000c000 	.word	0x5000c000
    ec34:	000270d7 	.word	0x000270d7
    ec38:	00201f01 	.word	0x00201f01

0000ec3c <am_hal_ble_set_constant_transmission_ex>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ec3c:	b158      	cbz	r0, ec56 <am_hal_ble_set_constant_transmission_ex+0x1a>
{
    ec3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ec40:	6804      	ldr	r4, [r0, #0]
    ec42:	4a57      	ldr	r2, [pc, #348]	; (eda0 <am_hal_ble_set_constant_transmission_ex+0x164>)
    ec44:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    ec48:	4294      	cmp	r4, r2
{
    ec4a:	b08b      	sub	sp, #44	; 0x2c
    ec4c:	4605      	mov	r5, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ec4e:	d004      	beq.n	ec5a <am_hal_ble_set_constant_transmission_ex+0x1e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ec50:	2002      	movs	r0, #2
}
    ec52:	b00b      	add	sp, #44	; 0x2c
    ec54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    ec56:	2002      	movs	r0, #2
    ec58:	4770      	bx	lr
    if(channel == 0xFF)
    ec5a:	29ff      	cmp	r1, #255	; 0xff
    ec5c:	460e      	mov	r6, r1
    ec5e:	f000 8099 	beq.w	ed94 <am_hal_ble_set_constant_transmission_ex+0x158>
    am_hal_ble_set_constant_transmission(pBLE, true);
    ec62:	2101      	movs	r1, #1
    ec64:	f7ff fef2 	bl	ea4c <am_hal_ble_set_constant_transmission>
    sWriteCommand.bytes[3] = 0x03;
    ec68:	2703      	movs	r7, #3
    sWriteCommand.bytes[6] = 0x00;
    ec6a:	2300      	movs	r3, #0
    sWriteCommand.bytes[0] = 0x01;
    ec6c:	2101      	movs	r1, #1
    sWriteCommand.bytes[1] = 0x1E;
    ec6e:	f04f 0c1e 	mov.w	ip, #30
    sWriteCommand.bytes[5] = 0x25;
    ec72:	2025      	movs	r0, #37	; 0x25
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    ec74:	4a4b      	ldr	r2, [pc, #300]	; (eda4 <am_hal_ble_set_constant_transmission_ex+0x168>)
    sWriteCommand.bytes[0] = 0x01;
    ec76:	f88d 1000 	strb.w	r1, [sp]
    sWriteCommand.bytes[2] = 0x20;
    ec7a:	f04f 0e20 	mov.w	lr, #32
    sWriteCommand.bytes[1] = 0x1E;
    ec7e:	f88d c001 	strb.w	ip, [sp, #1]
    sWriteCommand.bytes[5] = 0x25;
    ec82:	f88d 0005 	strb.w	r0, [sp, #5]
    sWriteCommand.bytes[4] = channel;
    ec86:	f88d 6004 	strb.w	r6, [sp, #4]
    sWriteCommand.bytes[2] = 0x20;
    ec8a:	f88d e002 	strb.w	lr, [sp, #2]
    sWriteCommand.bytes[3] = 0x03;
    ec8e:	f88d 7003 	strb.w	r7, [sp, #3]
    sWriteCommand.bytes[6] = 0x00;
    ec92:	f88d 3006 	strb.w	r3, [sp, #6]
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    ec96:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
    ec9a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ec9e:	6828      	ldr	r0, [r5, #0]
    am_hal_ble_transfer_t HciWrite =
    eca0:	f88d 101a 	strb.w	r1, [sp, #26]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    eca4:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    eca8:	2107      	movs	r1, #7
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ecaa:	45a4      	cmp	ip, r4
    am_hal_ble_transfer_t HciWrite =
    ecac:	f88d 3014 	strb.w	r3, [sp, #20]
    ecb0:	f88d 3015 	strb.w	r3, [sp, #21]
    ecb4:	f88d 3016 	strb.w	r3, [sp, #22]
    ecb8:	f88d 3017 	strb.w	r3, [sp, #23]
    ecbc:	f88d 301b 	strb.w	r3, [sp, #27]
    ecc0:	f88d 301c 	strb.w	r3, [sp, #28]
    ecc4:	9308      	str	r3, [sp, #32]
    ecc6:	9309      	str	r3, [sp, #36]	; 0x24
    ecc8:	f8cd d010 	str.w	sp, [sp, #16]
    eccc:	f8ad 1018 	strh.w	r1, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ecd0:	d103      	bne.n	ecda <am_hal_ble_set_constant_transmission_ex+0x9e>
    ecd2:	a904      	add	r1, sp, #16
    ecd4:	4628      	mov	r0, r5
    ecd6:	f7fe fcfb 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    ecda:	4c32      	ldr	r4, [pc, #200]	; (eda4 <am_hal_ble_set_constant_transmission_ex+0x168>)
    ecdc:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    ece0:	f043 0202 	orr.w	r2, r3, #2
    ece4:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    ece8:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    ecec:	0601      	lsls	r1, r0, #24
    ecee:	bf58      	it	pl
    ecf0:	f242 7610 	movwpl	r6, #10000	; 0x2710
    ecf4:	d442      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ecf6:	2001      	movs	r0, #1
    ecf8:	f001 f882 	bl	fe00 <am_hal_flash_delay>
    ecfc:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    ed00:	060b      	lsls	r3, r1, #24
    ed02:	f04f 0001 	mov.w	r0, #1
    ed06:	d439      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed08:	f001 f87a 	bl	fe00 <am_hal_flash_delay>
    ed0c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    ed10:	061a      	lsls	r2, r3, #24
    ed12:	f04f 0001 	mov.w	r0, #1
    ed16:	d431      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed18:	f001 f872 	bl	fe00 <am_hal_flash_delay>
    ed1c:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    ed20:	0611      	lsls	r1, r2, #24
    ed22:	f04f 0001 	mov.w	r0, #1
    ed26:	d429      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed28:	f001 f86a 	bl	fe00 <am_hal_flash_delay>
    ed2c:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    ed30:	060a      	lsls	r2, r1, #24
    ed32:	f04f 0001 	mov.w	r0, #1
    ed36:	d421      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed38:	f001 f862 	bl	fe00 <am_hal_flash_delay>
    ed3c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    ed40:	061b      	lsls	r3, r3, #24
    ed42:	f04f 0001 	mov.w	r0, #1
    ed46:	d419      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed48:	f001 f85a 	bl	fe00 <am_hal_flash_delay>
    ed4c:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    ed50:	0611      	lsls	r1, r2, #24
    ed52:	f04f 0001 	mov.w	r0, #1
    ed56:	d411      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed58:	f001 f852 	bl	fe00 <am_hal_flash_delay>
    ed5c:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    ed60:	060a      	lsls	r2, r1, #24
    ed62:	f04f 0001 	mov.w	r0, #1
    ed66:	d409      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed68:	f001 f84a 	bl	fe00 <am_hal_flash_delay>
    ed6c:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    ed70:	0603      	lsls	r3, r0, #24
    ed72:	d403      	bmi.n	ed7c <am_hal_ble_set_constant_transmission_ex+0x140>
    ed74:	3e08      	subs	r6, #8
    ed76:	d1be      	bne.n	ecf6 <am_hal_ble_set_constant_transmission_ex+0xba>
    ed78:	480b      	ldr	r0, [pc, #44]	; (eda8 <am_hal_ble_set_constant_transmission_ex+0x16c>)
    ed7a:	e76a      	b.n	ec52 <am_hal_ble_set_constant_transmission_ex+0x16>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ed7c:	4e09      	ldr	r6, [pc, #36]	; (eda4 <am_hal_ble_set_constant_transmission_ex+0x168>)
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    ed7e:	4628      	mov	r0, r5
    ed80:	2200      	movs	r2, #0
    ed82:	a904      	add	r1, sp, #16
    ed84:	f7ff fb96 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ed88:	f8c6 7228 	str.w	r7, [r6, #552]	; 0x228
  return AM_HAL_STATUS_SUCCESS;
    ed8c:	2000      	movs	r0, #0
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    ed8e:	f8c6 7220 	str.w	r7, [r6, #544]	; 0x220
  return AM_HAL_STATUS_SUCCESS;
    ed92:	e75e      	b.n	ec52 <am_hal_ble_set_constant_transmission_ex+0x16>
        am_hal_ble_set_constant_transmission(pBLE, false);
    ed94:	2100      	movs	r1, #0
    ed96:	f7ff fe59 	bl	ea4c <am_hal_ble_set_constant_transmission>
        return AM_HAL_STATUS_SUCCESS;
    ed9a:	2000      	movs	r0, #0
    ed9c:	e759      	b.n	ec52 <am_hal_ble_set_constant_transmission_ex+0x16>
    ed9e:	bf00      	nop
    eda0:	01775230 	.word	0x01775230
    eda4:	5000c000 	.word	0x5000c000
    eda8:	08000004 	.word	0x08000004

0000edac <am_hal_ble_transmitter_control_ex>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edac:	b168      	cbz	r0, edca <am_hal_ble_transmitter_control_ex+0x1e>
{
    edae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edb2:	6804      	ldr	r4, [r0, #0]
    edb4:	4a7a      	ldr	r2, [pc, #488]	; (efa0 <am_hal_ble_transmitter_control_ex+0x1f4>)
    edb6:	f024 487e 	bic.w	r8, r4, #4261412864	; 0xfe000000
    edba:	4590      	cmp	r8, r2
{
    edbc:	b08c      	sub	sp, #48	; 0x30
    edbe:	4605      	mov	r5, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edc0:	d005      	beq.n	edce <am_hal_ble_transmitter_control_ex+0x22>
        return AM_HAL_STATUS_INVALID_HANDLE;
    edc2:	2002      	movs	r0, #2
}
    edc4:	b00c      	add	sp, #48	; 0x30
    edc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
    edca:	2002      	movs	r0, #2
    edcc:	4770      	bx	lr
    if(channel == 0xFF)
    edce:	29ff      	cmp	r1, #255	; 0xff
    edd0:	460e      	mov	r6, r1
    edd2:	f000 80b4 	beq.w	ef3e <am_hal_ble_transmitter_control_ex+0x192>
    uint32_t sleepenable=0;
    edd6:	af0c      	add	r7, sp, #48	; 0x30
    edd8:	2300      	movs	r3, #0
    edda:	f847 3d18 	str.w	r3, [r7, #-24]!
    edde:	4971      	ldr	r1, [pc, #452]	; (efa4 <am_hal_ble_transmitter_control_ex+0x1f8>)
    ede0:	463a      	mov	r2, r7
    ede2:	f7ff fbb9 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    sleepenable &=0xffff0000;
    ede6:	9806      	ldr	r0, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ede8:	6829      	ldr	r1, [r5, #0]
    sleepenable &=0xffff0000;
    edea:	0c04      	lsrs	r4, r0, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edec:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    sleepenable &=0xffff0000;
    edf0:	0422      	lsls	r2, r4, #16
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edf2:	45c4      	cmp	ip, r8
    sleepenable &=0xffff0000;
    edf4:	9206      	str	r2, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    edf6:	f000 80a7 	beq.w	ef48 <am_hal_ble_transmitter_control_ex+0x19c>
    sWriteCommand.bytes[6] = 0x00;
    edfa:	2300      	movs	r3, #0
    sWriteCommand.bytes[0] = 0x01;
    edfc:	2101      	movs	r1, #1
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    edfe:	4c6a      	ldr	r4, [pc, #424]	; (efa8 <am_hal_ble_transmitter_control_ex+0x1fc>)
    sWriteCommand.bytes[0] = 0x01;
    ee00:	f88d 1008 	strb.w	r1, [sp, #8]
    sWriteCommand.bytes[1] = 0x1E;
    ee04:	221e      	movs	r2, #30
    sWriteCommand.bytes[3] = 0x03;
    ee06:	f04f 0803 	mov.w	r8, #3
    sWriteCommand.bytes[5] = 0x25;
    ee0a:	2025      	movs	r0, #37	; 0x25
    sWriteCommand.bytes[2] = 0x20;
    ee0c:	f04f 0e20 	mov.w	lr, #32
    sWriteCommand.bytes[1] = 0x1E;
    ee10:	f88d 2009 	strb.w	r2, [sp, #9]
    sWriteCommand.bytes[5] = 0x25;
    ee14:	f88d 000d 	strb.w	r0, [sp, #13]
    sWriteCommand.bytes[4] = channel;
    ee18:	f88d 600c 	strb.w	r6, [sp, #12]
    sWriteCommand.bytes[2] = 0x20;
    ee1c:	f88d e00a 	strb.w	lr, [sp, #10]
    sWriteCommand.bytes[3] = 0x03;
    ee20:	f88d 800b 	strb.w	r8, [sp, #11]
    sWriteCommand.bytes[6] = 0x00;
    ee24:	f88d 300e 	strb.w	r3, [sp, #14]
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    ee28:	f8d4 8220 	ldr.w	r8, [r4, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
    ee2c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ee30:	682a      	ldr	r2, [r5, #0]
    ee32:	485b      	ldr	r0, [pc, #364]	; (efa0 <am_hal_ble_transmitter_control_ex+0x1f4>)
    am_hal_ble_transfer_t HciWrite =
    ee34:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ee38:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    ee3c:	ac02      	add	r4, sp, #8
    ee3e:	2107      	movs	r1, #7
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ee40:	4584      	cmp	ip, r0
    am_hal_ble_transfer_t HciWrite =
    ee42:	f88d 301c 	strb.w	r3, [sp, #28]
    ee46:	f88d 301d 	strb.w	r3, [sp, #29]
    ee4a:	f88d 301e 	strb.w	r3, [sp, #30]
    ee4e:	f88d 301f 	strb.w	r3, [sp, #31]
    ee52:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    ee56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ee5a:	930a      	str	r3, [sp, #40]	; 0x28
    ee5c:	930b      	str	r3, [sp, #44]	; 0x2c
    ee5e:	9406      	str	r4, [sp, #24]
    ee60:	f8ad 1020 	strh.w	r1, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ee64:	d103      	bne.n	ee6e <am_hal_ble_transmitter_control_ex+0xc2>
    ee66:	4639      	mov	r1, r7
    ee68:	4628      	mov	r0, r5
    ee6a:	f7fe fc31 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    ee6e:	4c4e      	ldr	r4, [pc, #312]	; (efa8 <am_hal_ble_transmitter_control_ex+0x1fc>)
    ee70:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    ee74:	f043 0202 	orr.w	r2, r3, #2
    ee78:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    ee7c:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    ee80:	0601      	lsls	r1, r0, #24
    ee82:	bf58      	it	pl
    ee84:	f242 7610 	movwpl	r6, #10000	; 0x2710
    ee88:	d442      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    ee8a:	2001      	movs	r0, #1
    ee8c:	f000 ffb8 	bl	fe00 <am_hal_flash_delay>
    ee90:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    ee94:	060b      	lsls	r3, r1, #24
    ee96:	f04f 0001 	mov.w	r0, #1
    ee9a:	d439      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    ee9c:	f000 ffb0 	bl	fe00 <am_hal_flash_delay>
    eea0:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    eea4:	061a      	lsls	r2, r3, #24
    eea6:	f04f 0001 	mov.w	r0, #1
    eeaa:	d431      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eeac:	f000 ffa8 	bl	fe00 <am_hal_flash_delay>
    eeb0:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    eeb4:	0611      	lsls	r1, r2, #24
    eeb6:	f04f 0001 	mov.w	r0, #1
    eeba:	d429      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eebc:	f000 ffa0 	bl	fe00 <am_hal_flash_delay>
    eec0:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    eec4:	060a      	lsls	r2, r1, #24
    eec6:	f04f 0001 	mov.w	r0, #1
    eeca:	d421      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eecc:	f000 ff98 	bl	fe00 <am_hal_flash_delay>
    eed0:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    eed4:	061b      	lsls	r3, r3, #24
    eed6:	f04f 0001 	mov.w	r0, #1
    eeda:	d419      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eedc:	f000 ff90 	bl	fe00 <am_hal_flash_delay>
    eee0:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    eee4:	0611      	lsls	r1, r2, #24
    eee6:	f04f 0001 	mov.w	r0, #1
    eeea:	d411      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eeec:	f000 ff88 	bl	fe00 <am_hal_flash_delay>
    eef0:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    eef4:	060a      	lsls	r2, r1, #24
    eef6:	f04f 0001 	mov.w	r0, #1
    eefa:	d409      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    eefc:	f000 ff80 	bl	fe00 <am_hal_flash_delay>
    ef00:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    ef04:	0603      	lsls	r3, r0, #24
    ef06:	d403      	bmi.n	ef10 <am_hal_ble_transmitter_control_ex+0x164>
    ef08:	3e08      	subs	r6, #8
    ef0a:	d1be      	bne.n	ee8a <am_hal_ble_transmitter_control_ex+0xde>
    ef0c:	4827      	ldr	r0, [pc, #156]	; (efac <am_hal_ble_transmitter_control_ex+0x200>)
    ef0e:	e759      	b.n	edc4 <am_hal_ble_transmitter_control_ex+0x18>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ef10:	4e25      	ldr	r6, [pc, #148]	; (efa8 <am_hal_ble_transmitter_control_ex+0x1fc>)
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    ef12:	4639      	mov	r1, r7
    ef14:	2200      	movs	r2, #0
    ef16:	4628      	mov	r0, r5
    ef18:	f7ff facc 	bl	e4b4 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ef1c:	f8c6 8228 	str.w	r8, [r6, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    ef20:	f8c6 8220 	str.w	r8, [r6, #544]	; 0x220
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef24:	682c      	ldr	r4, [r5, #0]
    ef26:	4f1e      	ldr	r7, [pc, #120]	; (efa0 <am_hal_ble_transmitter_control_ex+0x1f4>)
    ef28:	f024 487e 	bic.w	r8, r4, #4261412864	; 0xfe000000
    uint32_t sleepenable=0;
    ef2c:	2300      	movs	r3, #0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef2e:	45b8      	cmp	r8, r7
    uint32_t sleepenable=0;
    ef30:	9301      	str	r3, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef32:	d01f      	beq.n	ef74 <am_hal_ble_transmitter_control_ex+0x1c8>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef34:	4c1a      	ldr	r4, [pc, #104]	; (efa0 <am_hal_ble_transmitter_control_ex+0x1f4>)
    ef36:	45a0      	cmp	r8, r4
    ef38:	d00b      	beq.n	ef52 <am_hal_ble_transmitter_control_ex+0x1a6>
  return AM_HAL_STATUS_SUCCESS;
    ef3a:	2000      	movs	r0, #0
    ef3c:	e742      	b.n	edc4 <am_hal_ble_transmitter_control_ex+0x18>
        am_hal_ble_transmitter_control(pBLE, false);
    ef3e:	2100      	movs	r1, #0
    ef40:	f7ff fd36 	bl	e9b0 <am_hal_ble_transmitter_control>
        return AM_HAL_STATUS_SUCCESS;
    ef44:	2000      	movs	r0, #0
    ef46:	e73d      	b.n	edc4 <am_hal_ble_transmitter_control_ex+0x18>
    ef48:	4916      	ldr	r1, [pc, #88]	; (efa4 <am_hal_ble_transmitter_control_ex+0x1f8>)
    ef4a:	4628      	mov	r0, r5
    ef4c:	f7ff fbac 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ef50:	e753      	b.n	edfa <am_hal_ble_transmitter_control_ex+0x4e>
    ef52:	f04f 32ff 	mov.w	r2, #4294967295
    ef56:	4916      	ldr	r1, [pc, #88]	; (efb0 <am_hal_ble_transmitter_control_ex+0x204>)
    ef58:	4628      	mov	r0, r5
    ef5a:	f7ff fba5 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef5e:	682b      	ldr	r3, [r5, #0]
    ef60:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
    ef64:	4542      	cmp	r2, r8
    ef66:	d1e8      	bne.n	ef3a <am_hal_ble_transmitter_control_ex+0x18e>
    ef68:	4628      	mov	r0, r5
    ef6a:	4a12      	ldr	r2, [pc, #72]	; (efb4 <am_hal_ble_transmitter_control_ex+0x208>)
    ef6c:	4912      	ldr	r1, [pc, #72]	; (efb8 <am_hal_ble_transmitter_control_ex+0x20c>)
    ef6e:	f7ff fb9b 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ef72:	e7e2      	b.n	ef3a <am_hal_ble_transmitter_control_ex+0x18e>
    ef74:	aa01      	add	r2, sp, #4
    ef76:	490b      	ldr	r1, [pc, #44]	; (efa4 <am_hal_ble_transmitter_control_ex+0x1f8>)
    ef78:	4628      	mov	r0, r5
    ef7a:	f7ff faed 	bl	e558 <am_hal_ble_plf_reg_read.part.8>
    ef7e:	9a01      	ldr	r2, [sp, #4]
    ef80:	6829      	ldr	r1, [r5, #0]
    ef82:	0c10      	lsrs	r0, r2, #16
    ef84:	f021 467e 	bic.w	r6, r1, #4261412864	; 0xfe000000
    ef88:	0402      	lsls	r2, r0, #16
    ef8a:	4546      	cmp	r6, r8
    sleepenable &=0xffff0000;
    ef8c:	9201      	str	r2, [sp, #4]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    ef8e:	d1d4      	bne.n	ef3a <am_hal_ble_transmitter_control_ex+0x18e>
    ef90:	4904      	ldr	r1, [pc, #16]	; (efa4 <am_hal_ble_transmitter_control_ex+0x1f8>)
    ef92:	4628      	mov	r0, r5
    ef94:	f7ff fb88 	bl	e6a8 <am_hal_ble_plf_reg_write.part.9>
    ef98:	682f      	ldr	r7, [r5, #0]
    ef9a:	f027 487e 	bic.w	r8, r7, #4261412864	; 0xfe000000
    ef9e:	e7c9      	b.n	ef34 <am_hal_ble_transmitter_control_ex+0x188>
    efa0:	01775230 	.word	0x01775230
    efa4:	200067c4 	.word	0x200067c4
    efa8:	5000c000 	.word	0x5000c000
    efac:	08000004 	.word	0x08000004
    efb0:	43000004 	.word	0x43000004
    efb4:	0002000a 	.word	0x0002000a
    efb8:	52400000 	.word	0x52400000

0000efbc <am_hal_ble_blocking_transfer>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    efbc:	b128      	cbz	r0, efca <am_hal_ble_blocking_transfer+0xe>
    efbe:	6803      	ldr	r3, [r0, #0]
    efc0:	4a08      	ldr	r2, [pc, #32]	; (efe4 <am_hal_ble_blocking_transfer+0x28>)
    efc2:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    efc6:	4594      	cmp	ip, r2
    efc8:	d001      	beq.n	efce <am_hal_ble_blocking_transfer+0x12>
        return AM_HAL_STATUS_INVALID_HANDLE;
    efca:	2002      	movs	r0, #2
    efcc:	4770      	bx	lr
    if (psTransfer->ui16Length == 0)
    efce:	890b      	ldrh	r3, [r1, #8]
{
    efd0:	b410      	push	{r4}
    if (psTransfer->ui16Length == 0)
    efd2:	b11b      	cbz	r3, efdc <am_hal_ble_blocking_transfer+0x20>
}
    efd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    efd8:	f7fe bb7a 	b.w	d6d0 <am_hal_ble_blocking_transfer.part.7>
        return AM_HAL_STATUS_SUCCESS;
    efdc:	4618      	mov	r0, r3
}
    efde:	f85d 4b04 	ldr.w	r4, [sp], #4
    efe2:	4770      	bx	lr
    efe4:	01775230 	.word	0x01775230

0000efe8 <am_hal_ble_patch_complete>:
{
    efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efea:	b08d      	sub	sp, #52	; 0x34
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    efec:	b130      	cbz	r0, effc <am_hal_ble_patch_complete+0x14>
    efee:	6803      	ldr	r3, [r0, #0]
    eff0:	49b0      	ldr	r1, [pc, #704]	; (f2b4 <am_hal_ble_patch_complete+0x2cc>)
    eff2:	f023 447e 	bic.w	r4, r3, #4261412864	; 0xfe000000
    eff6:	428c      	cmp	r4, r1
    eff8:	4605      	mov	r5, r0
    effa:	d003      	beq.n	f004 <am_hal_ble_patch_complete+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
    effc:	2402      	movs	r4, #2
}
    effe:	4620      	mov	r0, r4
    f000:	b00d      	add	sp, #52	; 0x34
    f002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f004:	2200      	movs	r2, #0
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f006:	2601      	movs	r6, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f008:	4627      	mov	r7, r4
    sTxBuffer.bytes[1] = 0xEE;
    f00a:	f04f 0cee 	mov.w	ip, #238	; 0xee
    sTransfer.ui16Length = 6;
    f00e:	2406      	movs	r4, #6
    sTxBuffer.bytes[2] = 0xF1;
    f010:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
    sTxBuffer.bytes[3] = 0x02;
    f014:	2302      	movs	r3, #2
    f016:	a906      	add	r1, sp, #24
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f018:	9208      	str	r2, [sp, #32]
    f01a:	9207      	str	r2, [sp, #28]
    f01c:	9209      	str	r2, [sp, #36]	; 0x24
    f01e:	920a      	str	r2, [sp, #40]	; 0x28
    f020:	920b      	str	r2, [sp, #44]	; 0x2c
    sTxBuffer.bytes[4] = 0x00;
    f022:	f88d 2004 	strb.w	r2, [sp, #4]
    sTxBuffer.bytes[5] = 0x00;
    f026:	f88d 2005 	strb.w	r2, [sp, #5]
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f02a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
    sTxBuffer.bytes[0] = 0x01;
    f02e:	f88d 6000 	strb.w	r6, [sp]
    sTransfer.pui32Data = sTxBuffer.words;
    f032:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 6;
    f036:	f8ad 4020 	strh.w	r4, [sp, #32]
    sTxBuffer.bytes[1] = 0xEE;
    f03a:	f88d c001 	strb.w	ip, [sp, #1]
    sTxBuffer.bytes[2] = 0xF1;
    f03e:	f88d e002 	strb.w	lr, [sp, #2]
    sTxBuffer.bytes[3] = 0x02;
    f042:	f88d 3003 	strb.w	r3, [sp, #3]
    f046:	f7fe fb43 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f04a:	2800      	cmp	r0, #0
    f04c:	d043      	beq.n	f0d6 <am_hal_ble_patch_complete+0xee>
    f04e:	6828      	ldr	r0, [r5, #0]
    f050:	f241 3687 	movw	r6, #4999	; 0x1387
    f054:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
    f058:	e023      	b.n	f0a2 <am_hal_ble_patch_complete+0xba>
    if (psTransfer->ui16Length == 0)
    f05a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    f05e:	2a00      	cmp	r2, #0
    f060:	d039      	beq.n	f0d6 <am_hal_ble_patch_complete+0xee>
    f062:	a906      	add	r1, sp, #24
    f064:	4628      	mov	r0, r5
    f066:	f7fe fb33 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f06a:	b3a0      	cbz	r0, f0d6 <am_hal_ble_patch_complete+0xee>
    f06c:	682c      	ldr	r4, [r5, #0]
    f06e:	f024 4c7e 	bic.w	ip, r4, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f072:	45bc      	cmp	ip, r7
    f074:	f000 80e1 	beq.w	f23a <am_hal_ble_patch_complete+0x252>
    f078:	6828      	ldr	r0, [r5, #0]
    f07a:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    f07e:	42b9      	cmp	r1, r7
    f080:	d020      	beq.n	f0c4 <am_hal_ble_patch_complete+0xdc>
    f082:	682c      	ldr	r4, [r5, #0]
    f084:	f024 4e7e 	bic.w	lr, r4, #4261412864	; 0xfe000000
    f088:	45be      	cmp	lr, r7
    f08a:	f000 80c9 	beq.w	f220 <am_hal_ble_patch_complete+0x238>
    f08e:	6828      	ldr	r0, [r5, #0]
    f090:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    f094:	42b9      	cmp	r1, r7
    f096:	f000 80b6 	beq.w	f206 <am_hal_ble_patch_complete+0x21e>
    f09a:	682c      	ldr	r4, [r5, #0]
    f09c:	3e06      	subs	r6, #6
    f09e:	f024 4c7e 	bic.w	ip, r4, #4261412864	; 0xfe000000
    f0a2:	45bc      	cmp	ip, r7
    f0a4:	f000 80a2 	beq.w	f1ec <am_hal_ble_patch_complete+0x204>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
    f0a8:	3e01      	subs	r6, #1
    f0aa:	d014      	beq.n	f0d6 <am_hal_ble_patch_complete+0xee>
    f0ac:	682a      	ldr	r2, [r5, #0]
    f0ae:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f0b2:	42bc      	cmp	r4, r7
    f0b4:	f000 808d 	beq.w	f1d2 <am_hal_ble_patch_complete+0x1ea>
    f0b8:	6828      	ldr	r0, [r5, #0]
    f0ba:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    f0be:	42b9      	cmp	r1, r7
    f0c0:	d1d4      	bne.n	f06c <am_hal_ble_patch_complete+0x84>
    f0c2:	e7ca      	b.n	f05a <am_hal_ble_patch_complete+0x72>
    if (psTransfer->ui16Length == 0)
    f0c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    f0c8:	b12a      	cbz	r2, f0d6 <am_hal_ble_patch_complete+0xee>
    f0ca:	a906      	add	r1, sp, #24
    f0cc:	4628      	mov	r0, r5
    f0ce:	f7fe faff 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f0d2:	2800      	cmp	r0, #0
    f0d4:	d1d5      	bne.n	f082 <am_hal_ble_patch_complete+0x9a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    f0d6:	4c78      	ldr	r4, [pc, #480]	; (f2b8 <am_hal_ble_patch_complete+0x2d0>)
    f0d8:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    f0dc:	063a      	lsls	r2, r7, #24
    f0de:	d444      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f0e0:	f242 7610 	movw	r6, #10000	; 0x2710
    f0e4:	2001      	movs	r0, #1
    f0e6:	f000 fe8b 	bl	fe00 <am_hal_flash_delay>
    f0ea:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    f0ee:	061f      	lsls	r7, r3, #24
    f0f0:	f04f 0001 	mov.w	r0, #1
    f0f4:	d439      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f0f6:	f000 fe83 	bl	fe00 <am_hal_flash_delay>
    f0fa:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    f0fe:	060b      	lsls	r3, r1, #24
    f100:	f04f 0001 	mov.w	r0, #1
    f104:	d431      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f106:	f000 fe7b 	bl	fe00 <am_hal_flash_delay>
    f10a:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    f10e:	0612      	lsls	r2, r2, #24
    f110:	f04f 0001 	mov.w	r0, #1
    f114:	d429      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f116:	f000 fe73 	bl	fe00 <am_hal_flash_delay>
    f11a:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    f11e:	063b      	lsls	r3, r7, #24
    f120:	f04f 0001 	mov.w	r0, #1
    f124:	d421      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f126:	f000 fe6b 	bl	fe00 <am_hal_flash_delay>
    f12a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    f12e:	061f      	lsls	r7, r3, #24
    f130:	f04f 0001 	mov.w	r0, #1
    f134:	d419      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f136:	f000 fe63 	bl	fe00 <am_hal_flash_delay>
    f13a:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    f13e:	0609      	lsls	r1, r1, #24
    f140:	f04f 0001 	mov.w	r0, #1
    f144:	d411      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f146:	f000 fe5b 	bl	fe00 <am_hal_flash_delay>
    f14a:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    f14e:	0612      	lsls	r2, r2, #24
    f150:	f04f 0001 	mov.w	r0, #1
    f154:	d409      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f156:	f000 fe53 	bl	fe00 <am_hal_flash_delay>
    f15a:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    f15e:	0603      	lsls	r3, r0, #24
    f160:	d403      	bmi.n	f16a <am_hal_ble_patch_complete+0x182>
    f162:	3e08      	subs	r6, #8
    f164:	d1be      	bne.n	f0e4 <am_hal_ble_patch_complete+0xfc>
    f166:	4c55      	ldr	r4, [pc, #340]	; (f2bc <am_hal_ble_patch_complete+0x2d4>)
    f168:	e749      	b.n	effe <am_hal_ble_patch_complete+0x16>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f16a:	682c      	ldr	r4, [r5, #0]
    f16c:	4f51      	ldr	r7, [pc, #324]	; (f2b4 <am_hal_ble_patch_complete+0x2cc>)
    f16e:	f024 467e 	bic.w	r6, r4, #4261412864	; 0xfe000000
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f172:	f04f 0e02 	mov.w	lr, #2
    sTransfer.pui32Data = sRxBuffer.words;
    f176:	ab03      	add	r3, sp, #12
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f178:	42be      	cmp	r6, r7
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f17a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    sTransfer.ui16Length = 2;
    f17e:	f8ad e020 	strh.w	lr, [sp, #32]
    sTransfer.pui32Data = sRxBuffer.words;
    f182:	9306      	str	r3, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f184:	f47f af3a 	bne.w	effc <am_hal_ble_patch_complete+0x14>
    f188:	a906      	add	r1, sp, #24
    f18a:	4628      	mov	r0, r5
    f18c:	f7fe faa0 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f190:	4604      	mov	r4, r0
    f192:	2800      	cmp	r0, #0
    f194:	f47f af33 	bne.w	effe <am_hal_ble_patch_complete+0x16>
    if ( sRxBuffer.bytes[1] == 0xEE )
    f198:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f19c:	29ee      	cmp	r1, #238	; 0xee
    f19e:	d059      	beq.n	f254 <am_hal_ble_patch_complete+0x26c>
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
    f1a0:	f89d c00c 	ldrb.w	ip, [sp, #12]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f1a4:	682a      	ldr	r2, [r5, #0]
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
    f1a6:	eb0c 2001 	add.w	r0, ip, r1, lsl #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f1aa:	f022 437e 	bic.w	r3, r2, #4261412864	; 0xfe000000
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
    f1ae:	b287      	uxth	r7, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f1b0:	42b3      	cmp	r3, r6
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
    f1b2:	f8ad 7020 	strh.w	r7, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f1b6:	f47f af21 	bne.w	effc <am_hal_ble_patch_complete+0x14>
    if (psTransfer->ui16Length == 0)
    f1ba:	b137      	cbz	r7, f1ca <am_hal_ble_patch_complete+0x1e2>
    f1bc:	a906      	add	r1, sp, #24
    f1be:	4628      	mov	r0, r5
    f1c0:	f7fe fa86 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f1c4:	2800      	cmp	r0, #0
    f1c6:	f040 817a 	bne.w	f4be <am_hal_ble_patch_complete+0x4d6>
        pBLE->bPatchComplete = true;
    f1ca:	2601      	movs	r6, #1
    f1cc:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
        return AM_HAL_STATUS_SUCCESS;
    f1d0:	e715      	b.n	effe <am_hal_ble_patch_complete+0x16>
    if (psTransfer->ui16Length == 0)
    f1d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	f43f af7d 	beq.w	f0d6 <am_hal_ble_patch_complete+0xee>
    f1dc:	a906      	add	r1, sp, #24
    f1de:	4628      	mov	r0, r5
    f1e0:	f7fe fa76 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f1e4:	2800      	cmp	r0, #0
    f1e6:	f47f af67 	bne.w	f0b8 <am_hal_ble_patch_complete+0xd0>
    f1ea:	e774      	b.n	f0d6 <am_hal_ble_patch_complete+0xee>
    if (psTransfer->ui16Length == 0)
    f1ec:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f1f0:	2900      	cmp	r1, #0
    f1f2:	f43f af70 	beq.w	f0d6 <am_hal_ble_patch_complete+0xee>
    f1f6:	a906      	add	r1, sp, #24
    f1f8:	4628      	mov	r0, r5
    f1fa:	f7fe fa69 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f1fe:	2800      	cmp	r0, #0
    f200:	f47f af52 	bne.w	f0a8 <am_hal_ble_patch_complete+0xc0>
    f204:	e767      	b.n	f0d6 <am_hal_ble_patch_complete+0xee>
    if (psTransfer->ui16Length == 0)
    f206:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    f20a:	2a00      	cmp	r2, #0
    f20c:	f43f af63 	beq.w	f0d6 <am_hal_ble_patch_complete+0xee>
    f210:	a906      	add	r1, sp, #24
    f212:	4628      	mov	r0, r5
    f214:	f7fe fa5c 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f218:	2800      	cmp	r0, #0
    f21a:	f47f af3e 	bne.w	f09a <am_hal_ble_patch_complete+0xb2>
    f21e:	e75a      	b.n	f0d6 <am_hal_ble_patch_complete+0xee>
    if (psTransfer->ui16Length == 0)
    f220:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f224:	2b00      	cmp	r3, #0
    f226:	f43f af56 	beq.w	f0d6 <am_hal_ble_patch_complete+0xee>
    f22a:	a906      	add	r1, sp, #24
    f22c:	4628      	mov	r0, r5
    f22e:	f7fe fa4f 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f232:	2800      	cmp	r0, #0
    f234:	f47f af2b 	bne.w	f08e <am_hal_ble_patch_complete+0xa6>
    f238:	e74d      	b.n	f0d6 <am_hal_ble_patch_complete+0xee>
    if (psTransfer->ui16Length == 0)
    f23a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f23e:	2b00      	cmp	r3, #0
    f240:	f43f af49 	beq.w	f0d6 <am_hal_ble_patch_complete+0xee>
    f244:	a906      	add	r1, sp, #24
    f246:	4628      	mov	r0, r5
    f248:	f7fe fa42 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f24c:	2800      	cmp	r0, #0
    f24e:	f47f af13 	bne.w	f078 <am_hal_ble_patch_complete+0x90>
    f252:	e740      	b.n	f0d6 <am_hal_ble_patch_complete+0xee>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f254:	682c      	ldr	r4, [r5, #0]
    f256:	f024 477e 	bic.w	r7, r4, #4261412864	; 0xfe000000
        sTransfer.ui16Length = 3;
    f25a:	2103      	movs	r1, #3
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f25c:	42b7      	cmp	r7, r6
        sTransfer.ui16Length = 3;
    f25e:	f8ad 1020 	strh.w	r1, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f262:	f47f aecb 	bne.w	effc <am_hal_ble_patch_complete+0x14>
    f266:	a906      	add	r1, sp, #24
    f268:	4628      	mov	r0, r5
    f26a:	f7fe fa31 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f26e:	4604      	mov	r4, r0
    f270:	2800      	cmp	r0, #0
    f272:	f47f aec4 	bne.w	effe <am_hal_ble_patch_complete+0x16>
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f276:	f04f 0e01 	mov.w	lr, #1
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f27a:	9008      	str	r0, [sp, #32]
    sTransfer.ui16Length = 5;
    f27c:	f04f 0c05 	mov.w	ip, #5
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f280:	9007      	str	r0, [sp, #28]
    f282:	9009      	str	r0, [sp, #36]	; 0x24
    f284:	900a      	str	r0, [sp, #40]	; 0x28
    f286:	900b      	str	r0, [sp, #44]	; 0x2c
    sTxBuffer.bytes[2] = 0xFD;
    f288:	22fd      	movs	r2, #253	; 0xfd
    sTxBuffer.bytes[1] = 0x04;
    f28a:	2004      	movs	r0, #4
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f28c:	463e      	mov	r6, r7
    sTransfer.pui32Data = sTxBuffer.words;
    f28e:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f292:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    sTxBuffer.bytes[0] = 0x01;
    f296:	f88d e000 	strb.w	lr, [sp]
    sTxBuffer.bytes[3] = 0x01;
    f29a:	f88d e003 	strb.w	lr, [sp, #3]
    sTxBuffer.bytes[4] = 0x01;
    f29e:	f88d e004 	strb.w	lr, [sp, #4]
    sTransfer.ui16Length = 5;
    f2a2:	f8ad c020 	strh.w	ip, [sp, #32]
    sTxBuffer.bytes[1] = 0x04;
    f2a6:	f88d 0001 	strb.w	r0, [sp, #1]
    sTxBuffer.bytes[2] = 0xFD;
    f2aa:	f88d 2002 	strb.w	r2, [sp, #2]
    sTxBuffer.bytes[4] = 0x01;
    f2ae:	f241 3788 	movw	r7, #5000	; 0x1388
    f2b2:	e02d      	b.n	f310 <am_hal_ble_patch_complete+0x328>
    f2b4:	01775230 	.word	0x01775230
    f2b8:	5000c000 	.word	0x5000c000
    f2bc:	08000004 	.word	0x08000004
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f2c0:	682c      	ldr	r4, [r5, #0]
    f2c2:	f024 417e 	bic.w	r1, r4, #4261412864	; 0xfe000000
    f2c6:	42b1      	cmp	r1, r6
    f2c8:	f000 80ec 	beq.w	f4a4 <am_hal_ble_patch_complete+0x4bc>
    f2cc:	682a      	ldr	r2, [r5, #0]
    f2ce:	f022 4e7e 	bic.w	lr, r2, #4261412864	; 0xfe000000
    f2d2:	45b6      	cmp	lr, r6
    f2d4:	f000 80d9 	beq.w	f48a <am_hal_ble_patch_complete+0x4a2>
    f2d8:	682c      	ldr	r4, [r5, #0]
    f2da:	f024 417e 	bic.w	r1, r4, #4261412864	; 0xfe000000
    f2de:	42b1      	cmp	r1, r6
    f2e0:	f000 80c6 	beq.w	f470 <am_hal_ble_patch_complete+0x488>
    f2e4:	682a      	ldr	r2, [r5, #0]
    f2e6:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    f2ea:	45b4      	cmp	ip, r6
    f2ec:	f000 80b3 	beq.w	f456 <am_hal_ble_patch_complete+0x46e>
    f2f0:	682c      	ldr	r4, [r5, #0]
    f2f2:	f024 417e 	bic.w	r1, r4, #4261412864	; 0xfe000000
    f2f6:	42b1      	cmp	r1, r6
    f2f8:	f000 80a0 	beq.w	f43c <am_hal_ble_patch_complete+0x454>
    f2fc:	682a      	ldr	r2, [r5, #0]
    f2fe:	f022 4e7e 	bic.w	lr, r2, #4261412864	; 0xfe000000
    f302:	45b6      	cmp	lr, r6
    f304:	f000 808d 	beq.w	f422 <am_hal_ble_patch_complete+0x43a>
        return AM_HAL_STATUS_INVALID_HANDLE;
    f308:	2402      	movs	r4, #2
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
    f30a:	3f07      	subs	r7, #7
    f30c:	f43f ae77 	beq.w	effe <am_hal_ble_patch_complete+0x16>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f310:	682b      	ldr	r3, [r5, #0]
    f312:	f023 447e 	bic.w	r4, r3, #4261412864	; 0xfe000000
    f316:	42b4      	cmp	r4, r6
    f318:	d077      	beq.n	f40a <am_hal_ble_patch_complete+0x422>
    f31a:	6828      	ldr	r0, [r5, #0]
    f31c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
    f320:	42b2      	cmp	r2, r6
    f322:	f107 37ff 	add.w	r7, r7, #4294967295
    f326:	d1cb      	bne.n	f2c0 <am_hal_ble_patch_complete+0x2d8>
    if (psTransfer->ui16Length == 0)
    f328:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f32c:	b12b      	cbz	r3, f33a <am_hal_ble_patch_complete+0x352>
    f32e:	a906      	add	r1, sp, #24
    f330:	4628      	mov	r0, r5
    f332:	f7fe f9cd 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f336:	2800      	cmp	r0, #0
    f338:	d1c2      	bne.n	f2c0 <am_hal_ble_patch_complete+0x2d8>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 10,
    f33a:	4c62      	ldr	r4, [pc, #392]	; (f4c4 <am_hal_ble_patch_complete+0x4dc>)
    f33c:	f8d4 630c 	ldr.w	r6, [r4, #780]	; 0x30c
    f340:	0631      	lsls	r1, r6, #24
    f342:	d443      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f344:	f242 7610 	movw	r6, #10000	; 0x2710
    f348:	2001      	movs	r0, #1
    f34a:	f000 fd59 	bl	fe00 <am_hal_flash_delay>
    f34e:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    f352:	063b      	lsls	r3, r7, #24
    f354:	f04f 0001 	mov.w	r0, #1
    f358:	d438      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f35a:	f000 fd51 	bl	fe00 <am_hal_flash_delay>
    f35e:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    f362:	060a      	lsls	r2, r1, #24
    f364:	f04f 0001 	mov.w	r0, #1
    f368:	d430      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f36a:	f000 fd49 	bl	fe00 <am_hal_flash_delay>
    f36e:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    f372:	0617      	lsls	r7, r2, #24
    f374:	f04f 0001 	mov.w	r0, #1
    f378:	d428      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f37a:	f000 fd41 	bl	fe00 <am_hal_flash_delay>
    f37e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    f382:	0619      	lsls	r1, r3, #24
    f384:	f04f 0001 	mov.w	r0, #1
    f388:	d420      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f38a:	f000 fd39 	bl	fe00 <am_hal_flash_delay>
    f38e:	f8d4 730c 	ldr.w	r7, [r4, #780]	; 0x30c
    f392:	063a      	lsls	r2, r7, #24
    f394:	f04f 0001 	mov.w	r0, #1
    f398:	d418      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f39a:	f000 fd31 	bl	fe00 <am_hal_flash_delay>
    f39e:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    f3a2:	060b      	lsls	r3, r1, #24
    f3a4:	f04f 0001 	mov.w	r0, #1
    f3a8:	d410      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f3aa:	f000 fd29 	bl	fe00 <am_hal_flash_delay>
    f3ae:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
    f3b2:	0617      	lsls	r7, r2, #24
    f3b4:	f04f 0001 	mov.w	r0, #1
    f3b8:	d408      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f3ba:	f000 fd21 	bl	fe00 <am_hal_flash_delay>
    f3be:	f8d4 030c 	ldr.w	r0, [r4, #780]	; 0x30c
    f3c2:	0601      	lsls	r1, r0, #24
    f3c4:	d402      	bmi.n	f3cc <am_hal_ble_patch_complete+0x3e4>
    f3c6:	3e08      	subs	r6, #8
    f3c8:	d1be      	bne.n	f348 <am_hal_ble_patch_complete+0x360>
    f3ca:	e6cc      	b.n	f166 <am_hal_ble_patch_complete+0x17e>
    sTransfer.ui16Length = 9;
    f3cc:	2409      	movs	r4, #9
    sTransfer.pui32Data = sRxBuffer.words;
    f3ce:	ab03      	add	r3, sp, #12
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    f3d0:	a906      	add	r1, sp, #24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f3d2:	2602      	movs	r6, #2
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    f3d4:	4628      	mov	r0, r5
    sTransfer.ui16Length = 9;
    f3d6:	f8ad 4020 	strh.w	r4, [sp, #32]
    sTransfer.pui32Data = sRxBuffer.words;
    f3da:	9306      	str	r3, [sp, #24]
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f3dc:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    f3e0:	f7ff fdec 	bl	efbc <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f3e4:	4604      	mov	r4, r0
    f3e6:	2800      	cmp	r0, #0
    f3e8:	f47f ae09 	bne.w	effe <am_hal_ble_patch_complete+0x16>
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
    f3ec:	4f35      	ldr	r7, [pc, #212]	; (f4c4 <am_hal_ble_patch_complete+0x4dc>)
    delay_ms(500);
    f3ee:	4836      	ldr	r0, [pc, #216]	; (f4c8 <am_hal_ble_patch_complete+0x4e0>)
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
    f3f0:	f8b7 c304 	ldrh.w	ip, [r7, #772]	; 0x304
    pBLE->bPatchComplete = true;
    f3f4:	f04f 0e01 	mov.w	lr, #1
        BLEIFn(ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
    f3f8:	f366 0c83 	bfi	ip, r6, #2, #2
    f3fc:	f8a7 c304 	strh.w	ip, [r7, #772]	; 0x304
    pBLE->bPatchComplete = true;
    f400:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    delay_ms(500);
    f404:	f000 fcfc 	bl	fe00 <am_hal_flash_delay>
    return AM_HAL_STATUS_SUCCESS;
    f408:	e5f9      	b.n	effe <am_hal_ble_patch_complete+0x16>
    if (psTransfer->ui16Length == 0)
    f40a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f40e:	2900      	cmp	r1, #0
    f410:	d093      	beq.n	f33a <am_hal_ble_patch_complete+0x352>
    f412:	a906      	add	r1, sp, #24
    f414:	4628      	mov	r0, r5
    f416:	f7fe f95b 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f41a:	2800      	cmp	r0, #0
    f41c:	f47f af7d 	bne.w	f31a <am_hal_ble_patch_complete+0x332>
    f420:	e78b      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f422:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f426:	2b00      	cmp	r3, #0
    f428:	d087      	beq.n	f33a <am_hal_ble_patch_complete+0x352>
    f42a:	a906      	add	r1, sp, #24
    f42c:	4628      	mov	r0, r5
    f42e:	f7fe f94f 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f432:	4604      	mov	r4, r0
    f434:	2800      	cmp	r0, #0
    f436:	f47f af68 	bne.w	f30a <am_hal_ble_patch_complete+0x322>
    f43a:	e77e      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f43c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    f440:	2800      	cmp	r0, #0
    f442:	f43f af7a 	beq.w	f33a <am_hal_ble_patch_complete+0x352>
    f446:	a906      	add	r1, sp, #24
    f448:	4628      	mov	r0, r5
    f44a:	f7fe f941 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f44e:	2800      	cmp	r0, #0
    f450:	f47f af54 	bne.w	f2fc <am_hal_ble_patch_complete+0x314>
    f454:	e771      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f456:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f45a:	2b00      	cmp	r3, #0
    f45c:	f43f af6d 	beq.w	f33a <am_hal_ble_patch_complete+0x352>
    f460:	a906      	add	r1, sp, #24
    f462:	4628      	mov	r0, r5
    f464:	f7fe f934 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f468:	2800      	cmp	r0, #0
    f46a:	f47f af41 	bne.w	f2f0 <am_hal_ble_patch_complete+0x308>
    f46e:	e764      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f470:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    f474:	2800      	cmp	r0, #0
    f476:	f43f af60 	beq.w	f33a <am_hal_ble_patch_complete+0x352>
    f47a:	a906      	add	r1, sp, #24
    f47c:	4628      	mov	r0, r5
    f47e:	f7fe f927 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f482:	2800      	cmp	r0, #0
    f484:	f47f af2e 	bne.w	f2e4 <am_hal_ble_patch_complete+0x2fc>
    f488:	e757      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f48a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f48e:	2b00      	cmp	r3, #0
    f490:	f43f af53 	beq.w	f33a <am_hal_ble_patch_complete+0x352>
    f494:	a906      	add	r1, sp, #24
    f496:	4628      	mov	r0, r5
    f498:	f7fe f91a 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f49c:	2800      	cmp	r0, #0
    f49e:	f47f af1b 	bne.w	f2d8 <am_hal_ble_patch_complete+0x2f0>
    f4a2:	e74a      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    if (psTransfer->ui16Length == 0)
    f4a4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    f4a8:	2800      	cmp	r0, #0
    f4aa:	f43f af46 	beq.w	f33a <am_hal_ble_patch_complete+0x352>
    f4ae:	a906      	add	r1, sp, #24
    f4b0:	4628      	mov	r0, r5
    f4b2:	f7fe f90d 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
    f4b6:	2800      	cmp	r0, #0
    f4b8:	f47f af08 	bne.w	f2cc <am_hal_ble_patch_complete+0x2e4>
    f4bc:	e73d      	b.n	f33a <am_hal_ble_patch_complete+0x352>
    f4be:	4604      	mov	r4, r0
    f4c0:	e59d      	b.n	effe <am_hal_ble_patch_complete+0x16>
    f4c2:	bf00      	nop
    f4c4:	5000c000 	.word	0x5000c000
    f4c8:	007a11d7 	.word	0x007a11d7

0000f4cc <am_hal_ble_patch_apply>:
{
    f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4d0:	b09b      	sub	sp, #108	; 0x6c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f4d2:	b130      	cbz	r0, f4e2 <am_hal_ble_patch_apply+0x16>
    f4d4:	6803      	ldr	r3, [r0, #0]
    f4d6:	4aac      	ldr	r2, [pc, #688]	; (f788 <am_hal_ble_patch_apply+0x2bc>)
    f4d8:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
    f4dc:	4590      	cmp	r8, r2
    f4de:	4604      	mov	r4, r0
    f4e0:	d004      	beq.n	f4ec <am_hal_ble_patch_apply+0x20>
        return AM_HAL_STATUS_INVALID_HANDLE;
    f4e2:	2502      	movs	r5, #2
}
    f4e4:	4628      	mov	r0, r5
    f4e6:	b01b      	add	sp, #108	; 0x6c
    f4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
    f4ec:	e891 000c 	ldmia.w	r1, {r2, r3}
    f4f0:	460e      	mov	r6, r1
    psPatchBuffer.bytes[5] = ((psPatch->ui32Length >> 8) & 0xFF);
    f4f2:	0a1f      	lsrs	r7, r3, #8
    psPatchBuffer.bytes[0] = 0x01;
    f4f4:	2101      	movs	r1, #1
    psPatchBuffer.bytes[4] = (psPatch->ui32Length & 0xFF);
    f4f6:	f88d 300c 	strb.w	r3, [sp, #12]
    psPatchBuffer.bytes[3] = 0x02;
    f4fa:	2502      	movs	r5, #2
    psPatchBuffer.bytes[2] = 0xF1;
    f4fc:	23f1      	movs	r3, #241	; 0xf1
    psPatchBuffer.bytes[5] = ((psPatch->ui32Length >> 8) & 0xFF);
    f4fe:	f88d 700d 	strb.w	r7, [sp, #13]
    psPatchBuffer.bytes[0] = 0x01;
    f502:	f88d 1008 	strb.w	r1, [sp, #8]
    am_hal_ble_transfer_t HciWrite =
    f506:	2700      	movs	r7, #0
    f508:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
    f50c:	f88d 2009 	strb.w	r2, [sp, #9]
    am_hal_ble_transfer_t HciWrite =
    f510:	f04f 0906 	mov.w	r9, #6
    f514:	aa02      	add	r2, sp, #8
    f516:	a912      	add	r1, sp, #72	; 0x48
    psPatchBuffer.bytes[2] = 0xF1;
    f518:	f88d 300a 	strb.w	r3, [sp, #10]
    psPatchBuffer.bytes[3] = 0x02;
    f51c:	f88d 500b 	strb.w	r5, [sp, #11]
    am_hal_ble_transfer_t HciWrite =
    f520:	9212      	str	r2, [sp, #72]	; 0x48
    f522:	9713      	str	r7, [sp, #76]	; 0x4c
    f524:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f528:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f52c:	9716      	str	r7, [sp, #88]	; 0x58
    f52e:	9717      	str	r7, [sp, #92]	; 0x5c
    f530:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f534:	f7fe f8cc 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f538:	2800      	cmp	r0, #0
    f53a:	f040 8131 	bne.w	f7a0 <am_hal_ble_patch_apply+0x2d4>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
    f53e:	4d93      	ldr	r5, [pc, #588]	; (f78c <am_hal_ble_patch_apply+0x2c0>)
    f540:	f8d5 730c 	ldr.w	r7, [r5, #780]	; 0x30c
    f544:	0638      	lsls	r0, r7, #24
    f546:	d443      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f548:	4f91      	ldr	r7, [pc, #580]	; (f790 <am_hal_ble_patch_apply+0x2c4>)
    f54a:	2001      	movs	r0, #1
    f54c:	f000 fc58 	bl	fe00 <am_hal_flash_delay>
    f550:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    f554:	0619      	lsls	r1, r3, #24
    f556:	f04f 0001 	mov.w	r0, #1
    f55a:	d439      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f55c:	f000 fc50 	bl	fe00 <am_hal_flash_delay>
    f560:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
    f564:	0613      	lsls	r3, r2, #24
    f566:	f04f 0001 	mov.w	r0, #1
    f56a:	d431      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f56c:	f000 fc48 	bl	fe00 <am_hal_flash_delay>
    f570:	f8d5 130c 	ldr.w	r1, [r5, #780]	; 0x30c
    f574:	0609      	lsls	r1, r1, #24
    f576:	f04f 0001 	mov.w	r0, #1
    f57a:	d429      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f57c:	f000 fc40 	bl	fe00 <am_hal_flash_delay>
    f580:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    f584:	061a      	lsls	r2, r3, #24
    f586:	f04f 0001 	mov.w	r0, #1
    f58a:	d421      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f58c:	f000 fc38 	bl	fe00 <am_hal_flash_delay>
    f590:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
    f594:	0613      	lsls	r3, r2, #24
    f596:	f04f 0001 	mov.w	r0, #1
    f59a:	d419      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f59c:	f000 fc30 	bl	fe00 <am_hal_flash_delay>
    f5a0:	f8d5 130c 	ldr.w	r1, [r5, #780]	; 0x30c
    f5a4:	0609      	lsls	r1, r1, #24
    f5a6:	f04f 0001 	mov.w	r0, #1
    f5aa:	d411      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f5ac:	f000 fc28 	bl	fe00 <am_hal_flash_delay>
    f5b0:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    f5b4:	061a      	lsls	r2, r3, #24
    f5b6:	f04f 0001 	mov.w	r0, #1
    f5ba:	d409      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f5bc:	f000 fc20 	bl	fe00 <am_hal_flash_delay>
    f5c0:	f8d5 030c 	ldr.w	r0, [r5, #780]	; 0x30c
    f5c4:	0603      	lsls	r3, r0, #24
    f5c6:	d403      	bmi.n	f5d0 <am_hal_ble_patch_apply+0x104>
    f5c8:	3f08      	subs	r7, #8
    f5ca:	d1be      	bne.n	f54a <am_hal_ble_patch_apply+0x7e>
    f5cc:	4d71      	ldr	r5, [pc, #452]	; (f794 <am_hal_ble_patch_apply+0x2c8>)
    f5ce:	e789      	b.n	f4e4 <am_hal_ble_patch_apply+0x18>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f5d0:	6825      	ldr	r5, [r4, #0]
    f5d2:	4f6d      	ldr	r7, [pc, #436]	; (f788 <am_hal_ble_patch_apply+0x2bc>)
    f5d4:	f025 487e 	bic.w	r8, r5, #4261412864	; 0xfe000000
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f5d8:	2300      	movs	r3, #0
    sTransfer.pui32Data = psPatchBuffer.words;
    f5da:	aa02      	add	r2, sp, #8
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f5dc:	f04f 0902 	mov.w	r9, #2
    sTransfer.ui16Length = 5;
    f5e0:	2105      	movs	r1, #5
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f5e2:	45b8      	cmp	r8, r7
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f5e4:	9308      	str	r3, [sp, #32]
    sTransfer.pui32Data = psPatchBuffer.words;
    f5e6:	9206      	str	r2, [sp, #24]
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f5e8:	9307      	str	r3, [sp, #28]
    f5ea:	9309      	str	r3, [sp, #36]	; 0x24
    f5ec:	930a      	str	r3, [sp, #40]	; 0x28
    f5ee:	930b      	str	r3, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    f5f0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
    sTransfer.ui16Length = 5;
    f5f4:	f8ad 1020 	strh.w	r1, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f5f8:	f47f af73 	bne.w	f4e2 <am_hal_ble_patch_apply+0x16>
    f5fc:	a906      	add	r1, sp, #24
    f5fe:	4620      	mov	r0, r4
    f600:	f7fe f866 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f604:	4605      	mov	r5, r0
    f606:	2800      	cmp	r0, #0
    f608:	f47f af6c 	bne.w	f4e4 <am_hal_ble_patch_apply+0x18>
    pui8ExpectedResponse[1] = psPatch->ui32Type;
    f60c:	6832      	ldr	r2, [r6, #0]
        if (p1[i] != p2[i])
    f60e:	f89d 7008 	ldrb.w	r7, [sp, #8]
    pui8ExpectedResponse[4] = 0x00;
    f612:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    pui8ExpectedResponse[1] = psPatch->ui32Type;
    f616:	fa5f fc82 	uxtb.w	ip, r2
    pui8ExpectedResponse[0] = 0x04;
    f61a:	f04f 0a04 	mov.w	sl, #4
    pui8ExpectedResponse[2] = 0xF1;
    f61e:	f04f 0ef1 	mov.w	lr, #241	; 0xf1
    pui8ExpectedResponse[3] = 0x01;
    f622:	f04f 0b01 	mov.w	fp, #1
        if (p1[i] != p2[i])
    f626:	2f04      	cmp	r7, #4
    pui8ExpectedResponse[1] = psPatch->ui32Type;
    f628:	f88d c049 	strb.w	ip, [sp, #73]	; 0x49
    pui8ExpectedResponse[0] = 0x04;
    f62c:	f88d a048 	strb.w	sl, [sp, #72]	; 0x48
    pui8ExpectedResponse[2] = 0xF1;
    f630:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
    pui8ExpectedResponse[3] = 0x01;
    f634:	f88d b04b 	strb.w	fp, [sp, #75]	; 0x4b
        if (p1[i] != p2[i])
    f638:	f040 8245 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f63c:	f89d 0009 	ldrb.w	r0, [sp, #9]
    f640:	4560      	cmp	r0, ip
    f642:	f040 8240 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f646:	f89d 100a 	ldrb.w	r1, [sp, #10]
    f64a:	29f1      	cmp	r1, #241	; 0xf1
    f64c:	f040 823b 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f650:	f89d 700b 	ldrb.w	r7, [sp, #11]
    f654:	455f      	cmp	r7, fp
    f656:	f040 8236 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f65a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f65e:	2800      	cmp	r0, #0
    f660:	f040 8231 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    uint32_t ui32RemainingBytes = psPatch->ui32Length;
    f664:	f8d6 b004 	ldr.w	fp, [r6, #4]
    while (ui32RemainingBytes)
    f668:	f1bb 0f00 	cmp.w	fp, #0
    f66c:	f000 818f 	beq.w	f98e <am_hal_ble_patch_apply+0x4c2>
    f670:	f8df 9128 	ldr.w	r9, [pc, #296]	; f79c <am_hal_ble_patch_apply+0x2d0>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
    f674:	4f45      	ldr	r7, [pc, #276]	; (f78c <am_hal_ble_patch_apply+0x2c0>)
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f676:	f8cd 8004 	str.w	r8, [sp, #4]
        uint32_t ui32TransferSize = (ui32RemainingBytes > MAX_PATCH_PACKET_LEN ?
    f67a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    f67e:	46d8      	mov	r8, fp
        sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f680:	f04f 0c01 	mov.w	ip, #1
        uint32_t ui32TransferSize = (ui32RemainingBytes > MAX_PATCH_PACKET_LEN ?
    f684:	bf28      	it	cs
    f686:	f04f 0880 	movcs.w	r8, #128	; 0x80
        g_psPatchBuffer.bytes[2] = 0xF2;
    f68a:	23f2      	movs	r3, #242	; 0xf2
        g_psPatchBuffer.bytes[1] = psPatch->ui32Type;
    f68c:	f889 2001 	strb.w	r2, [r9, #1]
        g_psPatchBuffer.bytes[2] = 0xF2;
    f690:	f889 3002 	strb.w	r3, [r9, #2]
        g_psPatchBuffer.bytes[3] = ui32TransferSize;
    f694:	f889 8003 	strb.w	r8, [r9, #3]
        g_psPatchBuffer.bytes[0] = 0x01;
    f698:	f889 c000 	strb.w	ip, [r9]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f69c:	68f1      	ldr	r1, [r6, #12]
        sTransfer.pui32Data = g_psPatchBuffer.words;
    f69e:	f8cd 9018 	str.w	r9, [sp, #24]
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f6a2:	2000      	movs	r0, #0
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f6a4:	f025 0203 	bic.w	r2, r5, #3
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f6a8:	9008      	str	r0, [sp, #32]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f6aa:	4411      	add	r1, r2
        sTransfer.ui16Length = ui32TransferSize + 4;
    f6ac:	f108 0304 	add.w	r3, r8, #4
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f6b0:	9007      	str	r0, [sp, #28]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f6b2:	4642      	mov	r2, r8
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f6b4:	9009      	str	r0, [sp, #36]	; 0x24
    f6b6:	900a      	str	r0, [sp, #40]	; 0x28
    f6b8:	900b      	str	r0, [sp, #44]	; 0x2c
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f6ba:	4837      	ldr	r0, [pc, #220]	; (f798 <am_hal_ble_patch_apply+0x2cc>)
        sTransfer.ui8Command = AM_HAL_BLE_WRITE;
    f6bc:	f88d c022 	strb.w	ip, [sp, #34]	; 0x22
        sTransfer.ui16Length = ui32TransferSize + 4;
    f6c0:	f8ad 3020 	strh.w	r3, [sp, #32]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
    f6c4:	f002 f980 	bl	119c8 <memcpy>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f6c8:	6821      	ldr	r1, [r4, #0]
    f6ca:	9a01      	ldr	r2, [sp, #4]
    f6cc:	f021 407e 	bic.w	r0, r1, #4261412864	; 0xfe000000
    f6d0:	4290      	cmp	r0, r2
    f6d2:	f47f af06 	bne.w	f4e2 <am_hal_ble_patch_apply+0x16>
    f6d6:	a906      	add	r1, sp, #24
    f6d8:	4620      	mov	r0, r4
    f6da:	f7fd fff9 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f6de:	2800      	cmp	r0, #0
    f6e0:	f040 81fa 	bne.w	fad8 <am_hal_ble_patch_apply+0x60c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
    f6e4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    f6e8:	061a      	lsls	r2, r3, #24
    f6ea:	f100 8105 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f6ee:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f790 <am_hal_ble_patch_apply+0x2c4>
    f6f2:	2001      	movs	r0, #1
    f6f4:	f000 fb84 	bl	fe00 <am_hal_flash_delay>
    f6f8:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
    f6fc:	0609      	lsls	r1, r1, #24
    f6fe:	f04f 0001 	mov.w	r0, #1
    f702:	f100 80f9 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f706:	f000 fb7b 	bl	fe00 <am_hal_flash_delay>
    f70a:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
    f70e:	0613      	lsls	r3, r2, #24
    f710:	f04f 0001 	mov.w	r0, #1
    f714:	f100 80f0 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f718:	f000 fb72 	bl	fe00 <am_hal_flash_delay>
    f71c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    f720:	061a      	lsls	r2, r3, #24
    f722:	f04f 0001 	mov.w	r0, #1
    f726:	f100 80e7 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f72a:	f000 fb69 	bl	fe00 <am_hal_flash_delay>
    f72e:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
    f732:	060b      	lsls	r3, r1, #24
    f734:	f04f 0001 	mov.w	r0, #1
    f738:	f100 80de 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f73c:	f000 fb60 	bl	fe00 <am_hal_flash_delay>
    f740:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
    f744:	0611      	lsls	r1, r2, #24
    f746:	f04f 0001 	mov.w	r0, #1
    f74a:	f100 80d5 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f74e:	f000 fb57 	bl	fe00 <am_hal_flash_delay>
    f752:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    f756:	061a      	lsls	r2, r3, #24
    f758:	f04f 0001 	mov.w	r0, #1
    f75c:	f100 80cc 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f760:	f000 fb4e 	bl	fe00 <am_hal_flash_delay>
    f764:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
    f768:	060b      	lsls	r3, r1, #24
    f76a:	f04f 0001 	mov.w	r0, #1
    f76e:	f100 80c3 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f772:	f000 fb45 	bl	fe00 <am_hal_flash_delay>
    f776:	f8d7 030c 	ldr.w	r0, [r7, #780]	; 0x30c
    f77a:	0600      	lsls	r0, r0, #24
    f77c:	f100 80bc 	bmi.w	f8f8 <am_hal_ble_patch_apply+0x42c>
    f780:	f1ba 0a08 	subs.w	sl, sl, #8
    f784:	d1b5      	bne.n	f6f2 <am_hal_ble_patch_apply+0x226>
    f786:	e721      	b.n	f5cc <am_hal_ble_patch_apply+0x100>
    f788:	01775230 	.word	0x01775230
    f78c:	5000c000 	.word	0x5000c000
    f790:	000f4240 	.word	0x000f4240
    f794:	08000004 	.word	0x08000004
    f798:	10002ca4 	.word	0x10002ca4
    f79c:	10002ca0 	.word	0x10002ca0
    f7a0:	6820      	ldr	r0, [r4, #0]
    f7a2:	f241 3b87 	movw	fp, #4999	; 0x1387
    f7a6:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    f7aa:	f04f 0a01 	mov.w	sl, #1
    f7ae:	a902      	add	r1, sp, #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f7b0:	45c4      	cmp	ip, r8
    am_hal_ble_transfer_t HciWrite =
    f7b2:	9112      	str	r1, [sp, #72]	; 0x48
    f7b4:	9713      	str	r7, [sp, #76]	; 0x4c
    f7b6:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f7ba:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f7be:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f7c2:	9716      	str	r7, [sp, #88]	; 0x58
    f7c4:	9717      	str	r7, [sp, #92]	; 0x5c
    f7c6:	f88d a052 	strb.w	sl, [sp, #82]	; 0x52
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f7ca:	f47f aeb8 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f7ce:	a912      	add	r1, sp, #72	; 0x48
    f7d0:	4620      	mov	r0, r4
    f7d2:	f7fd ff7d 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f7d6:	4605      	mov	r5, r0
    f7d8:	2800      	cmp	r0, #0
    f7da:	f43f aeb0 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
    f7de:	f1bb 0b01 	subs.w	fp, fp, #1
    f7e2:	f43f ae7f 	beq.w	f4e4 <am_hal_ble_patch_apply+0x18>
    f7e6:	6823      	ldr	r3, [r4, #0]
    am_hal_ble_transfer_t HciWrite =
    f7e8:	9713      	str	r7, [sp, #76]	; 0x4c
    f7ea:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    f7ee:	aa02      	add	r2, sp, #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f7f0:	4540      	cmp	r0, r8
    am_hal_ble_transfer_t HciWrite =
    f7f2:	9212      	str	r2, [sp, #72]	; 0x48
    f7f4:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f7f8:	f88d a052 	strb.w	sl, [sp, #82]	; 0x52
    f7fc:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f800:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f804:	9716      	str	r7, [sp, #88]	; 0x58
    f806:	9717      	str	r7, [sp, #92]	; 0x5c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f808:	f47f ae99 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f80c:	a912      	add	r1, sp, #72	; 0x48
    f80e:	4620      	mov	r0, r4
    f810:	f7fd ff5e 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f814:	2800      	cmp	r0, #0
    f816:	f43f ae92 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    f81a:	6821      	ldr	r1, [r4, #0]
    am_hal_ble_transfer_t HciWrite =
    f81c:	9713      	str	r7, [sp, #76]	; 0x4c
    f81e:	f021 4c7e 	bic.w	ip, r1, #4261412864	; 0xfe000000
    f822:	ad02      	add	r5, sp, #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f824:	45c4      	cmp	ip, r8
    am_hal_ble_transfer_t HciWrite =
    f826:	9512      	str	r5, [sp, #72]	; 0x48
    f828:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f82c:	f88d a052 	strb.w	sl, [sp, #82]	; 0x52
    f830:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f834:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f838:	9716      	str	r7, [sp, #88]	; 0x58
    f83a:	9717      	str	r7, [sp, #92]	; 0x5c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f83c:	f47f ae7f 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f840:	a912      	add	r1, sp, #72	; 0x48
    f842:	4620      	mov	r0, r4
    f844:	f7fd ff44 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f848:	2800      	cmp	r0, #0
    f84a:	f43f ae78 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    f84e:	6823      	ldr	r3, [r4, #0]
    am_hal_ble_transfer_t HciWrite =
    f850:	9713      	str	r7, [sp, #76]	; 0x4c
    f852:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    f856:	aa02      	add	r2, sp, #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f858:	4540      	cmp	r0, r8
    am_hal_ble_transfer_t HciWrite =
    f85a:	9212      	str	r2, [sp, #72]	; 0x48
    f85c:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f860:	f88d a052 	strb.w	sl, [sp, #82]	; 0x52
    f864:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f868:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f86c:	9716      	str	r7, [sp, #88]	; 0x58
    f86e:	9717      	str	r7, [sp, #92]	; 0x5c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f870:	f47f ae65 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f874:	a912      	add	r1, sp, #72	; 0x48
    f876:	4620      	mov	r0, r4
    f878:	f7fd ff2a 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f87c:	2800      	cmp	r0, #0
    f87e:	f43f ae5e 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    f882:	6821      	ldr	r1, [r4, #0]
    am_hal_ble_transfer_t HciWrite =
    f884:	9713      	str	r7, [sp, #76]	; 0x4c
    f886:	f021 4e7e 	bic.w	lr, r1, #4261412864	; 0xfe000000
    f88a:	ad02      	add	r5, sp, #8
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f88c:	45c6      	cmp	lr, r8
    am_hal_ble_transfer_t HciWrite =
    f88e:	9512      	str	r5, [sp, #72]	; 0x48
    f890:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f894:	f88d a052 	strb.w	sl, [sp, #82]	; 0x52
    f898:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f89c:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f8a0:	9716      	str	r7, [sp, #88]	; 0x58
    f8a2:	9717      	str	r7, [sp, #92]	; 0x5c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f8a4:	f47f ae4b 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f8a8:	a912      	add	r1, sp, #72	; 0x48
    f8aa:	4620      	mov	r0, r4
    f8ac:	f7fd ff10 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f8b0:	2800      	cmp	r0, #0
    f8b2:	f43f ae44 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    f8b6:	6823      	ldr	r3, [r4, #0]
    am_hal_ble_transfer_t HciWrite =
    f8b8:	9713      	str	r7, [sp, #76]	; 0x4c
    f8ba:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    f8be:	aa02      	add	r2, sp, #8
    f8c0:	2101      	movs	r1, #1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f8c2:	4540      	cmp	r0, r8
    am_hal_ble_transfer_t HciWrite =
    f8c4:	9212      	str	r2, [sp, #72]	; 0x48
    f8c6:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
    f8ca:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
    f8ce:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
    f8d2:	9716      	str	r7, [sp, #88]	; 0x58
    f8d4:	9717      	str	r7, [sp, #92]	; 0x5c
    f8d6:	f88d 1052 	strb.w	r1, [sp, #82]	; 0x52
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f8da:	f47f ae30 	bne.w	f53e <am_hal_ble_patch_apply+0x72>
    f8de:	a912      	add	r1, sp, #72	; 0x48
    f8e0:	4620      	mov	r0, r4
    f8e2:	f7fd fef5 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    f8e6:	2800      	cmp	r0, #0
    f8e8:	f43f ae29 	beq.w	f53e <am_hal_ble_patch_apply+0x72>
    f8ec:	6825      	ldr	r5, [r4, #0]
    f8ee:	f1ab 0b05 	sub.w	fp, fp, #5
    f8f2:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    f8f6:	e758      	b.n	f7aa <am_hal_ble_patch_apply+0x2de>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f8f8:	6822      	ldr	r2, [r4, #0]
    f8fa:	f022 4a7e 	bic.w	sl, r2, #4261412864	; 0xfe000000
    f8fe:	9a01      	ldr	r2, [sp, #4]
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f900:	2000      	movs	r0, #0
        sTransfer.pui32Data = psPatchBuffer.words;
    f902:	ab02      	add	r3, sp, #8
        sTransfer.ui8Command = AM_HAL_BLE_READ;
    f904:	f04f 0e02 	mov.w	lr, #2
        sTransfer.ui16Length = 5;
    f908:	2105      	movs	r1, #5
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f90a:	4592      	cmp	sl, r2
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f90c:	9008      	str	r0, [sp, #32]
        sTransfer.pui32Data = psPatchBuffer.words;
    f90e:	9306      	str	r3, [sp, #24]
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    f910:	9007      	str	r0, [sp, #28]
    f912:	9009      	str	r0, [sp, #36]	; 0x24
    f914:	900a      	str	r0, [sp, #40]	; 0x28
    f916:	900b      	str	r0, [sp, #44]	; 0x2c
        sTransfer.ui8Command = AM_HAL_BLE_READ;
    f918:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
        sTransfer.ui16Length = 5;
    f91c:	f8ad 1020 	strh.w	r1, [sp, #32]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f920:	f47f addf 	bne.w	f4e2 <am_hal_ble_patch_apply+0x16>
    f924:	a906      	add	r1, sp, #24
    f926:	4620      	mov	r0, r4
    f928:	f7fd fed2 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    f92c:	2800      	cmp	r0, #0
    f92e:	f040 80d3 	bne.w	fad8 <am_hal_ble_patch_apply+0x60c>
        pui8ExpectedResponse[1] = psPatch->ui32Type;
    f932:	6832      	ldr	r2, [r6, #0]
        if (p1[i] != p2[i])
    f934:	f89d 1008 	ldrb.w	r1, [sp, #8]
        pui8ExpectedResponse[4] = 0x00;
    f938:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
        pui8ExpectedResponse[0] = 0x04;
    f93c:	2304      	movs	r3, #4
        pui8ExpectedResponse[1] = psPatch->ui32Type;
    f93e:	fa5f fc82 	uxtb.w	ip, r2
        pui8ExpectedResponse[0] = 0x04;
    f942:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        pui8ExpectedResponse[2] = 0xF2;
    f946:	20f2      	movs	r0, #242	; 0xf2
        pui8ExpectedResponse[3] = 0x01;
    f948:	2301      	movs	r3, #1
        if (p1[i] != p2[i])
    f94a:	2904      	cmp	r1, #4
        pui8ExpectedResponse[1] = psPatch->ui32Type;
    f94c:	f88d c049 	strb.w	ip, [sp, #73]	; 0x49
        pui8ExpectedResponse[2] = 0xF2;
    f950:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
        pui8ExpectedResponse[3] = 0x01;
    f954:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
        if (p1[i] != p2[i])
    f958:	f040 80b5 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f95c:	f89d a009 	ldrb.w	sl, [sp, #9]
    f960:	45e2      	cmp	sl, ip
    f962:	f040 80b0 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f966:	f89d 100a 	ldrb.w	r1, [sp, #10]
    f96a:	29f2      	cmp	r1, #242	; 0xf2
    f96c:	f040 80ab 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f970:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f974:	4298      	cmp	r0, r3
    f976:	f040 80a6 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    f97a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f97e:	2b00      	cmp	r3, #0
    f980:	f040 80a1 	bne.w	fac6 <am_hal_ble_patch_apply+0x5fa>
    while (ui32RemainingBytes)
    f984:	ebbb 0b08 	subs.w	fp, fp, r8
        ui32Index += ui32TransferSize;
    f988:	4445      	add	r5, r8
    while (ui32RemainingBytes)
    f98a:	f47f ae76 	bne.w	f67a <am_hal_ble_patch_apply+0x1ae>
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f98e:	6825      	ldr	r5, [r4, #0]
    psPatchBuffer.bytes[4] = (psPatch->ui32CRC & 0xFF);
    f990:	68b7      	ldr	r7, [r6, #8]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f992:	4952      	ldr	r1, [pc, #328]	; (fadc <am_hal_ble_patch_apply+0x610>)
    psPatchBuffer.bytes[4] = (psPatch->ui32CRC & 0xFF);
    f994:	f88d 700c 	strb.w	r7, [sp, #12]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f998:	f025 487e 	bic.w	r8, r5, #4261412864	; 0xfe000000
    am_hal_ble_transfer_t HciWrite =
    f99c:	2300      	movs	r3, #0
    psPatchBuffer.bytes[5] = ((psPatch->ui32CRC >> 8) & 0xFF);
    f99e:	0a38      	lsrs	r0, r7, #8
    psPatchBuffer.bytes[0] = 0x01;
    f9a0:	2501      	movs	r5, #1
    am_hal_ble_transfer_t HciWrite =
    f9a2:	aa02      	add	r2, sp, #8
    psPatchBuffer.bytes[2] = 0xF3;
    f9a4:	f04f 09f3 	mov.w	r9, #243	; 0xf3
    psPatchBuffer.bytes[3] = 0x02;
    f9a8:	f04f 0e02 	mov.w	lr, #2
    am_hal_ble_transfer_t HciWrite =
    f9ac:	2706      	movs	r7, #6
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f9ae:	4588      	cmp	r8, r1
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
    f9b0:	f88d c009 	strb.w	ip, [sp, #9]
    am_hal_ble_transfer_t HciWrite =
    f9b4:	920c      	str	r2, [sp, #48]	; 0x30
    psPatchBuffer.bytes[5] = ((psPatch->ui32CRC >> 8) & 0xFF);
    f9b6:	f88d 000d 	strb.w	r0, [sp, #13]
    psPatchBuffer.bytes[0] = 0x01;
    f9ba:	f88d 5008 	strb.w	r5, [sp, #8]
    am_hal_ble_transfer_t HciWrite =
    f9be:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
    psPatchBuffer.bytes[2] = 0xF3;
    f9c2:	f88d 900a 	strb.w	r9, [sp, #10]
    psPatchBuffer.bytes[3] = 0x02;
    f9c6:	f88d e00b 	strb.w	lr, [sp, #11]
    am_hal_ble_transfer_t HciWrite =
    f9ca:	930d      	str	r3, [sp, #52]	; 0x34
    f9cc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    f9d0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    f9d4:	9310      	str	r3, [sp, #64]	; 0x40
    f9d6:	9311      	str	r3, [sp, #68]	; 0x44
    f9d8:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
    f9dc:	d075      	beq.n	faca <am_hal_ble_patch_apply+0x5fe>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
    f9de:	4d40      	ldr	r5, [pc, #256]	; (fae0 <am_hal_ble_patch_apply+0x614>)
    f9e0:	f8d5 130c 	ldr.w	r1, [r5, #780]	; 0x30c
    f9e4:	0609      	lsls	r1, r1, #24
    f9e6:	d442      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    f9e8:	4f3e      	ldr	r7, [pc, #248]	; (fae4 <am_hal_ble_patch_apply+0x618>)
    f9ea:	2001      	movs	r0, #1
    f9ec:	f000 fa08 	bl	fe00 <am_hal_flash_delay>
    f9f0:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
    f9f4:	0613      	lsls	r3, r2, #24
    f9f6:	f04f 0001 	mov.w	r0, #1
    f9fa:	d438      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    f9fc:	f000 fa00 	bl	fe00 <am_hal_flash_delay>
    fa00:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    fa04:	061a      	lsls	r2, r3, #24
    fa06:	f04f 0001 	mov.w	r0, #1
    fa0a:	d430      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa0c:	f000 f9f8 	bl	fe00 <am_hal_flash_delay>
    fa10:	f8d5 130c 	ldr.w	r1, [r5, #780]	; 0x30c
    fa14:	060a      	lsls	r2, r1, #24
    fa16:	f04f 0001 	mov.w	r0, #1
    fa1a:	d428      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa1c:	f000 f9f0 	bl	fe00 <am_hal_flash_delay>
    fa20:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
    fa24:	0613      	lsls	r3, r2, #24
    fa26:	f04f 0001 	mov.w	r0, #1
    fa2a:	d420      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa2c:	f000 f9e8 	bl	fe00 <am_hal_flash_delay>
    fa30:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    fa34:	0619      	lsls	r1, r3, #24
    fa36:	f04f 0001 	mov.w	r0, #1
    fa3a:	d418      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa3c:	f000 f9e0 	bl	fe00 <am_hal_flash_delay>
    fa40:	f8d5 130c 	ldr.w	r1, [r5, #780]	; 0x30c
    fa44:	060a      	lsls	r2, r1, #24
    fa46:	f04f 0001 	mov.w	r0, #1
    fa4a:	d410      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa4c:	f000 f9d8 	bl	fe00 <am_hal_flash_delay>
    fa50:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
    fa54:	0613      	lsls	r3, r2, #24
    fa56:	f04f 0001 	mov.w	r0, #1
    fa5a:	d408      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa5c:	f000 f9d0 	bl	fe00 <am_hal_flash_delay>
    fa60:	f8d5 030c 	ldr.w	r0, [r5, #780]	; 0x30c
    fa64:	0601      	lsls	r1, r0, #24
    fa66:	d402      	bmi.n	fa6e <am_hal_ble_patch_apply+0x5a2>
    fa68:	3f08      	subs	r7, #8
    fa6a:	d1be      	bne.n	f9ea <am_hal_ble_patch_apply+0x51e>
    fa6c:	e5ae      	b.n	f5cc <am_hal_ble_patch_apply+0x100>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    fa6e:	2700      	movs	r7, #0
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    fa70:	4620      	mov	r0, r4
    sTransfer.ui16Length = 5;
    fa72:	2305      	movs	r3, #5
    sTransfer.pui32Data = psPatchBuffer.words;
    fa74:	ad02      	add	r5, sp, #8
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    fa76:	a906      	add	r1, sp, #24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    fa78:	2402      	movs	r4, #2
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    fa7a:	9708      	str	r7, [sp, #32]
    sTransfer.pui32Data = psPatchBuffer.words;
    fa7c:	9506      	str	r5, [sp, #24]
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
    fa7e:	9707      	str	r7, [sp, #28]
    fa80:	9709      	str	r7, [sp, #36]	; 0x24
    fa82:	970a      	str	r7, [sp, #40]	; 0x28
    fa84:	970b      	str	r7, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_READ;
    fa86:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
    sTransfer.ui16Length = 5;
    fa8a:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
    fa8e:	f7ff fa95 	bl	efbc <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
    fa92:	4605      	mov	r5, r0
    fa94:	2800      	cmp	r0, #0
    fa96:	f47f ad25 	bne.w	f4e4 <am_hal_ble_patch_apply+0x18>
        if (p1[i] != p2[i])
    fa9a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    pui8ExpectedResponse[1] = psPatch->ui32Type;
    fa9e:	7836      	ldrb	r6, [r6, #0]
        if (p1[i] != p2[i])
    faa0:	2904      	cmp	r1, #4
    faa2:	d110      	bne.n	fac6 <am_hal_ble_patch_apply+0x5fa>
    faa4:	f89d c009 	ldrb.w	ip, [sp, #9]
    faa8:	45b4      	cmp	ip, r6
    faaa:	d10c      	bne.n	fac6 <am_hal_ble_patch_apply+0x5fa>
    faac:	f89d 200a 	ldrb.w	r2, [sp, #10]
    fab0:	2af3      	cmp	r2, #243	; 0xf3
    fab2:	d108      	bne.n	fac6 <am_hal_ble_patch_apply+0x5fa>
    fab4:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fab8:	2801      	cmp	r0, #1
    faba:	d104      	bne.n	fac6 <am_hal_ble_patch_apply+0x5fa>
    fabc:	f89d 700c 	ldrb.w	r7, [sp, #12]
    fac0:	2f00      	cmp	r7, #0
    fac2:	f43f ad0f 	beq.w	f4e4 <am_hal_ble_patch_apply+0x18>
        return AM_HAL_STATUS_FAIL;
    fac6:	2501      	movs	r5, #1
    fac8:	e50c      	b.n	f4e4 <am_hal_ble_patch_apply+0x18>
    faca:	a90c      	add	r1, sp, #48	; 0x30
    facc:	4620      	mov	r0, r4
    face:	f7fd fdff 	bl	d6d0 <am_hal_ble_blocking_transfer.part.7>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
    fad2:	2800      	cmp	r0, #0
    fad4:	d083      	beq.n	f9de <am_hal_ble_patch_apply+0x512>
    fad6:	e505      	b.n	f4e4 <am_hal_ble_patch_apply+0x18>
    fad8:	4605      	mov	r5, r0
    fada:	e503      	b.n	f4e4 <am_hal_ble_patch_apply+0x18>
    fadc:	01775230 	.word	0x01775230
    fae0:	5000c000 	.word	0x5000c000
    fae4:	000f4240 	.word	0x000f4240

0000fae8 <am_hal_ble_default_patch_apply>:
    for ( i = 0; i < am_hal_ble_num_default_patches; i++ )
    fae8:	4b3d      	ldr	r3, [pc, #244]	; (fbe0 <am_hal_ble_default_patch_apply+0xf8>)
{
    faea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for ( i = 0; i < am_hal_ble_num_default_patches; i++ )
    faee:	681f      	ldr	r7, [r3, #0]
    faf0:	2f00      	cmp	r7, #0
    faf2:	d06f      	beq.n	fbd4 <am_hal_ble_default_patch_apply+0xec>
    faf4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; fbe8 <am_hal_ble_default_patch_apply+0x100>
    faf8:	4d3a      	ldr	r5, [pc, #232]	; (fbe4 <am_hal_ble_default_patch_apply+0xfc>)
    fafa:	4606      	mov	r6, r0
    fafc:	f04f 0800 	mov.w	r8, #0
        ui16Crc = am_hal_ble_crc_nz((uint8_t*)(am_hal_ble_default_patches[i]->pui32Data), am_hal_ble_default_patches[i]->ui32Length);
    fb00:	f8d9 0000 	ldr.w	r0, [r9]
    fb04:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    fb08:	684b      	ldr	r3, [r1, #4]
    fb0a:	68cc      	ldr	r4, [r1, #12]
    for (i = 0; i < len; i++) {
    fb0c:	2b00      	cmp	r3, #0
    fb0e:	d058      	beq.n	fbc2 <am_hal_ble_default_patch_apply+0xda>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb10:	4622      	mov	r2, r4
    fb12:	eb04 0e03 	add.w	lr, r4, r3
    fb16:	f812 0b01 	ldrb.w	r0, [r2], #1
    fb1a:	f103 3aff 	add.w	sl, r3, #4294967295
    for (i = 0; i < len; i++) {
    fb1e:	4596      	cmp	lr, r2
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb20:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    fb24:	f00a 0003 	and.w	r0, sl, #3
    for (i = 0; i < len; i++) {
    fb28:	d04b      	beq.n	fbc2 <am_hal_ble_default_patch_apply+0xda>
    fb2a:	b308      	cbz	r0, fb70 <am_hal_ble_default_patch_apply+0x88>
    fb2c:	2801      	cmp	r0, #1
    fb2e:	d014      	beq.n	fb5a <am_hal_ble_default_patch_apply+0x72>
    fb30:	2802      	cmp	r0, #2
    fb32:	d008      	beq.n	fb46 <am_hal_ble_default_patch_apply+0x5e>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb34:	7864      	ldrb	r4, [r4, #1]
    fb36:	ea84 2c13 	eor.w	ip, r4, r3, lsr #8
    fb3a:	3201      	adds	r2, #1
    fb3c:	f835 a01c 	ldrh.w	sl, [r5, ip, lsl #1]
    fb40:	ea8a 2303 	eor.w	r3, sl, r3, lsl #8
    fb44:	b29b      	uxth	r3, r3
    fb46:	f812 0b01 	ldrb.w	r0, [r2], #1
    fb4a:	ea80 2413 	eor.w	r4, r0, r3, lsr #8
    fb4e:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
    fb52:	ea8c 2a03 	eor.w	sl, ip, r3, lsl #8
    fb56:	fa1f f38a 	uxth.w	r3, sl
    fb5a:	f812 0b01 	ldrb.w	r0, [r2], #1
    fb5e:	ea80 2413 	eor.w	r4, r0, r3, lsr #8
    for (i = 0; i < len; i++) {
    fb62:	4596      	cmp	lr, r2
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb64:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
    fb68:	ea8c 2303 	eor.w	r3, ip, r3, lsl #8
    fb6c:	b29b      	uxth	r3, r3
    for (i = 0; i < len; i++) {
    fb6e:	d028      	beq.n	fbc2 <am_hal_ble_default_patch_apply+0xda>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb70:	4694      	mov	ip, r2
    fb72:	f892 a001 	ldrb.w	sl, [r2, #1]
    fb76:	f81c 4b01 	ldrb.w	r4, [ip], #1
    fb7a:	78d0      	ldrb	r0, [r2, #3]
    fb7c:	f89c c001 	ldrb.w	ip, [ip, #1]
    fb80:	ea84 2413 	eor.w	r4, r4, r3, lsr #8
    fb84:	3204      	adds	r2, #4
    fb86:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
    fb8a:	ea84 2303 	eor.w	r3, r4, r3, lsl #8
    fb8e:	b29b      	uxth	r3, r3
    fb90:	ea8a 2413 	eor.w	r4, sl, r3, lsr #8
    for (i = 0; i < len; i++) {
    fb94:	4596      	cmp	lr, r2
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fb96:	f835 a014 	ldrh.w	sl, [r5, r4, lsl #1]
    fb9a:	ea8a 2303 	eor.w	r3, sl, r3, lsl #8
    fb9e:	fa1f fa83 	uxth.w	sl, r3
    fba2:	ea8c 241a 	eor.w	r4, ip, sl, lsr #8
    fba6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    fbaa:	ea83 2c0a 	eor.w	ip, r3, sl, lsl #8
    fbae:	fa1f fa8c 	uxth.w	sl, ip
    fbb2:	ea80 201a 	eor.w	r0, r0, sl, lsr #8
    fbb6:	f835 4010 	ldrh.w	r4, [r5, r0, lsl #1]
    fbba:	ea84 230a 	eor.w	r3, r4, sl, lsl #8
    fbbe:	b29b      	uxth	r3, r3
    for (i = 0; i < len; i++) {
    fbc0:	d1d6      	bne.n	fb70 <am_hal_ble_default_patch_apply+0x88>
        am_hal_ble_default_patches[i]->ui32CRC = ui16Crc;
    fbc2:	608b      	str	r3, [r1, #8]
        ui32Status = am_hal_ble_patch_apply(pHandle, am_hal_ble_default_patches[i]);
    fbc4:	4630      	mov	r0, r6
    fbc6:	f7ff fc81 	bl	f4cc <am_hal_ble_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
    fbca:	b930      	cbnz	r0, fbda <am_hal_ble_default_patch_apply+0xf2>
    for ( i = 0; i < am_hal_ble_num_default_patches; i++ )
    fbcc:	f108 0801 	add.w	r8, r8, #1
    fbd0:	45b8      	cmp	r8, r7
    fbd2:	d195      	bne.n	fb00 <am_hal_ble_default_patch_apply+0x18>
    return AM_HAL_STATUS_SUCCESS;
    fbd4:	2000      	movs	r0, #0
    fbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}
    fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbde:	bf00      	nop
    fbe0:	00012fc0 	.word	0x00012fc0
    fbe4:	00011b54 	.word	0x00011b54
    fbe8:	10001b3c 	.word	0x10001b3c

0000fbec <am_hal_ble_default_copy_patch_apply>:
{
    fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ui16Crc = am_hal_ble_crc_nz((uint8_t*)(am_hal_ble_default_copy_patches[0]->pui32Data), am_hal_ble_default_copy_patches[0]->ui32Length);        
    fbee:	4b35      	ldr	r3, [pc, #212]	; (fcc4 <am_hal_ble_default_copy_patch_apply+0xd8>)
    fbf0:	6819      	ldr	r1, [r3, #0]
    fbf2:	6809      	ldr	r1, [r1, #0]
    fbf4:	684b      	ldr	r3, [r1, #4]
    fbf6:	68cf      	ldr	r7, [r1, #12]
{
    fbf8:	4604      	mov	r4, r0
    for (i = 0; i < len; i++) {
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d057      	beq.n	fcae <am_hal_ble_default_copy_patch_apply+0xc2>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fbfe:	463a      	mov	r2, r7
    fc00:	4d31      	ldr	r5, [pc, #196]	; (fcc8 <am_hal_ble_default_copy_patch_apply+0xdc>)
    fc02:	f812 6b01 	ldrb.w	r6, [r2], #1
    fc06:	441f      	add	r7, r3
    fc08:	1e58      	subs	r0, r3, #1
    for (i = 0; i < len; i++) {
    fc0a:	4297      	cmp	r7, r2
    fc0c:	f000 0003 	and.w	r0, r0, #3
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fc10:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    for (i = 0; i < len; i++) {
    fc14:	d04b      	beq.n	fcae <am_hal_ble_default_copy_patch_apply+0xc2>
    fc16:	b308      	cbz	r0, fc5c <am_hal_ble_default_copy_patch_apply+0x70>
    fc18:	2801      	cmp	r0, #1
    fc1a:	d014      	beq.n	fc46 <am_hal_ble_default_copy_patch_apply+0x5a>
    fc1c:	2802      	cmp	r0, #2
    fc1e:	d008      	beq.n	fc32 <am_hal_ble_default_copy_patch_apply+0x46>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fc20:	f812 6b01 	ldrb.w	r6, [r2], #1
    fc24:	ea86 2c13 	eor.w	ip, r6, r3, lsr #8
    fc28:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
    fc2c:	ea8e 2303 	eor.w	r3, lr, r3, lsl #8
    fc30:	b29b      	uxth	r3, r3
    fc32:	f812 0b01 	ldrb.w	r0, [r2], #1
    fc36:	ea80 2613 	eor.w	r6, r0, r3, lsr #8
    fc3a:	f835 c016 	ldrh.w	ip, [r5, r6, lsl #1]
    fc3e:	ea8c 2e03 	eor.w	lr, ip, r3, lsl #8
    fc42:	fa1f f38e 	uxth.w	r3, lr
    fc46:	f812 0b01 	ldrb.w	r0, [r2], #1
    fc4a:	ea80 2613 	eor.w	r6, r0, r3, lsr #8
    for (i = 0; i < len; i++) {
    fc4e:	4297      	cmp	r7, r2
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fc50:	f835 c016 	ldrh.w	ip, [r5, r6, lsl #1]
    fc54:	ea8c 2303 	eor.w	r3, ip, r3, lsl #8
    fc58:	b29b      	uxth	r3, r3
    for (i = 0; i < len; i++) {
    fc5a:	d028      	beq.n	fcae <am_hal_ble_default_copy_patch_apply+0xc2>
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fc5c:	4696      	mov	lr, r2
    fc5e:	f892 c001 	ldrb.w	ip, [r2, #1]
    fc62:	f81e 0b01 	ldrb.w	r0, [lr], #1
    fc66:	78d6      	ldrb	r6, [r2, #3]
    fc68:	f89e e001 	ldrb.w	lr, [lr, #1]
    fc6c:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
    fc70:	3204      	adds	r2, #4
    fc72:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    fc76:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
    fc7a:	b298      	uxth	r0, r3
    fc7c:	ea8c 2c10 	eor.w	ip, ip, r0, lsr #8
    for (i = 0; i < len; i++) {
    fc80:	4297      	cmp	r7, r2
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
    fc82:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
    fc86:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
    fc8a:	fa1f fc80 	uxth.w	ip, r0
    fc8e:	ea8e 2e1c 	eor.w	lr, lr, ip, lsr #8
    fc92:	f835 301e 	ldrh.w	r3, [r5, lr, lsl #1]
    fc96:	ea83 200c 	eor.w	r0, r3, ip, lsl #8
    fc9a:	fa1f fc80 	uxth.w	ip, r0
    fc9e:	ea86 261c 	eor.w	r6, r6, ip, lsr #8
    fca2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    fca6:	ea83 200c 	eor.w	r0, r3, ip, lsl #8
    fcaa:	b283      	uxth	r3, r0
    for (i = 0; i < len; i++) {
    fcac:	d1d6      	bne.n	fc5c <am_hal_ble_default_copy_patch_apply+0x70>
    am_hal_ble_default_copy_patches[i]->ui32CRC = ui16Crc;
    fcae:	608b      	str	r3, [r1, #8]
    ui32Status = am_hal_ble_patch_apply(pHandle, am_hal_ble_default_copy_patches[0]);
    fcb0:	4620      	mov	r0, r4
    fcb2:	f7ff fc0b 	bl	f4cc <am_hal_ble_patch_apply>
    if (ui32Status != AM_HAL_STATUS_SUCCESS)
    fcb6:	b100      	cbz	r0, fcba <am_hal_ble_default_copy_patch_apply+0xce>
}
    fcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ui32Status = am_hal_ble_patch_copy_end_apply(pHandle);
    fcba:	4620      	mov	r0, r4
}
    fcbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ui32Status = am_hal_ble_patch_copy_end_apply(pHandle);
    fcc0:	f7fe ba3a 	b.w	e138 <am_hal_ble_patch_copy_end_apply>
    fcc4:	10001b2c 	.word	0x10001b2c
    fcc8:	00011b54 	.word	0x00011b54

0000fccc <am_hal_ble_int_status>:
    uint32_t ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

#if AM_CMSIS_REGS
    if (bEnabledOnly)
    {
        uint32_t ui32IntEn = BLEIFn(ui32Module)->INTEN;
    fccc:	4b05      	ldr	r3, [pc, #20]	; (fce4 <am_hal_ble_int_status+0x18>)
    if (bEnabledOnly)
    fcce:	b911      	cbnz	r1, fcd6 <am_hal_ble_int_status+0xa>
        return ( BLEIFn(ui32Module)->INTSTAT & ui32IntEn );
    }
    else
    {
        return BLEIFn(ui32Module)->INTSTAT;
    fcd0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
    else
    {
        return AM_REGn(BLEIF, ui32Module, INTSTAT);
    }
#endif // AM_CMSIS_REGS
}
    fcd4:	4770      	bx	lr
        uint32_t ui32IntEn = BLEIFn(ui32Module)->INTEN;
    fcd6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
        return ( BLEIFn(ui32Module)->INTSTAT & ui32IntEn );
    fcda:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
    fcde:	4008      	ands	r0, r1
    fce0:	4770      	bx	lr
    fce2:	bf00      	nop
    fce4:	5000c000 	.word	0x5000c000

0000fce8 <am_hal_ble_int_clear>:
    uint32_t ui32Module;

    //
    // Check the handle.
    //
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
    fce8:	b128      	cbz	r0, fcf6 <am_hal_ble_int_clear+0xe>
    fcea:	6803      	ldr	r3, [r0, #0]
    fcec:	4a05      	ldr	r2, [pc, #20]	; (fd04 <am_hal_ble_int_clear+0x1c>)
    fcee:	f023 407e 	bic.w	r0, r3, #4261412864	; 0xfe000000
    fcf2:	4290      	cmp	r0, r2
    fcf4:	d001      	beq.n	fcfa <am_hal_ble_int_clear+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    fcf6:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
}
    fcf8:	4770      	bx	lr
    BLEIFn(ui32Module)->INTCLR = ui32InterruptMask;
    fcfa:	4b03      	ldr	r3, [pc, #12]	; (fd08 <am_hal_ble_int_clear+0x20>)
    return AM_HAL_STATUS_SUCCESS;
    fcfc:	2000      	movs	r0, #0
    BLEIFn(ui32Module)->INTCLR = ui32InterruptMask;
    fcfe:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
    return AM_HAL_STATUS_SUCCESS;
    fd02:	4770      	bx	lr
    fd04:	01775230 	.word	0x01775230
    fd08:	5000c000 	.word	0x5000c000

0000fd0c <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    fd0c:	2809      	cmp	r0, #9
    fd0e:	d852      	bhi.n	fdb6 <am_hal_clkgen_control+0xaa>
    fd10:	e8df f000 	tbb	[pc, r0]
    fd14:	2b21190d 	.word	0x2b21190d
    fd18:	51513d33 	.word	0x51513d33
    fd1c:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    fd1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    fd22:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    fd24:	6a1a      	ldr	r2, [r3, #32]
    fd26:	f36f 0200 	bfc	r2, #0, #1
    fd2a:	621a      	str	r2, [r3, #32]
            break;
    fd2c:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    fd2e:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    fd32:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    fd34:	2047      	movs	r0, #71	; 0x47
    fd36:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    fd3a:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    fd3e:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    fd40:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    fd44:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    fd46:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    fd4a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    fd4c:	68ca      	ldr	r2, [r1, #12]
    fd4e:	f022 0301 	bic.w	r3, r2, #1
    fd52:	60cb      	str	r3, [r1, #12]
            break;
    fd54:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    fd56:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    fd5a:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    fd5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
    fd60:	f022 0302 	bic.w	r3, r2, #2
    fd64:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    fd68:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    fd6a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    fd6e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    fd70:	68d3      	ldr	r3, [r2, #12]
    fd72:	f043 0101 	orr.w	r1, r3, #1
    fd76:	60d1      	str	r1, [r2, #12]
            break;
    fd78:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    fd7a:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    fd7e:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    fd80:	f8dc 300c 	ldr.w	r3, [ip, #12]
    fd84:	f043 0102 	orr.w	r1, r3, #2
    fd88:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    fd8c:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    fd8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    fd92:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    fd94:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    fd96:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    fd98:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    fd9a:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    fd9c:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    fd9e:	615a      	str	r2, [r3, #20]
            break;
    fda0:	4770      	bx	lr
            if ( pArgs == 0 )
    fda2:	b151      	cbz	r1, fdba <am_hal_clkgen_control+0xae>
    fda4:	6808      	ldr	r0, [r1, #0]
    fda6:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    fdaa:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    fdae:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    fdb0:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    fdb4:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    fdb6:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    fdb8:	4770      	bx	lr
    fdba:	4901      	ldr	r1, [pc, #4]	; (fdc0 <am_hal_clkgen_control+0xb4>)
    fdbc:	e7f5      	b.n	fdaa <am_hal_clkgen_control+0x9e>
    fdbe:	bf00      	nop
    fdc0:	0025b801 	.word	0x0025b801

0000fdc4 <am_hal_clkgen_status_get>:
uint32_t
am_hal_clkgen_status_get(am_hal_clkgen_status_t *psStatus)
{
    uint32_t ui32Status;

    if ( psStatus == NULL )
    fdc4:	b1a8      	cbz	r0, fdf2 <am_hal_clkgen_status_get+0x2e>
{
    fdc6:	b410      	push	{r4}
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    psStatus->ui32SysclkFreq =
        CLKGEN->CCTRL_b.CORESEL                     ?
    fdc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    fdcc:	490a      	ldr	r1, [pc, #40]	; (fdf8 <am_hal_clkgen_status_get+0x34>)
        CLKGEN->CCTRL_b.CORESEL                     ?
    fdce:	6994      	ldr	r4, [r2, #24]
            AM_HAL_CLKGEN_FREQ_MAX_HZ / 2           :
    fdd0:	4b0a      	ldr	r3, [pc, #40]	; (fdfc <am_hal_clkgen_status_get+0x38>)
    fdd2:	f014 0f01 	tst.w	r4, #1
    fdd6:	bf08      	it	eq
    fdd8:	460b      	moveq	r3, r1
    psStatus->ui32SysclkFreq =
    fdda:	6003      	str	r3, [r0, #0]
            AM_HAL_CLKGEN_FREQ_MAX_HZ;

    ui32Status = CLKGEN->STATUS;
    fddc:	69d3      	ldr	r3, [r2, #28]
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
            AM_HAL_CLKGEN_STATUS_RTCOSC_LFRC        :
            AM_HAL_CLKGEN_STATUS_RTCOSC_XTAL;

    psStatus->bXtalFailure =
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    fdde:	f3c3 0440 	ubfx	r4, r3, #1, #1
        _FLD2VAL(CLKGEN_STATUS_OMODE, ui32Status)   ?
    fde2:	f003 0201 	and.w	r2, r3, #1
        _FLD2VAL(CLKGEN_STATUS_OSCF, ui32Status);
    fde6:	7204      	strb	r4, [r0, #8]
    psStatus->eRTCOSC =
    fde8:	6042      	str	r2, [r0, #4]
        AM_BFX(CLKGEN, STATUS, OSCF, ui32Status);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_clkgen_status_get()
    fdea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return AM_HAL_STATUS_SUCCESS;
    fdee:	2000      	movs	r0, #0
} // am_hal_clkgen_status_get()
    fdf0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    fdf2:	2006      	movs	r0, #6
    fdf4:	4770      	bx	lr
    fdf6:	bf00      	nop
    fdf8:	02dc6c00 	.word	0x02dc6c00
    fdfc:	016e3600 	.word	0x016e3600

0000fe00 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe00:	4b00      	ldr	r3, [pc, #0]	; (fe04 <am_hal_flash_delay+0x4>)
    fe02:	4718      	bx	r3
    fe04:	0800009d 	.word	0x0800009d

0000fe08 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    fe08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe0c:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe10:	f8df 8248 	ldr.w	r8, [pc, #584]	; 1005c <am_hal_flash_delay_status_check+0x254>
{
    fe14:	4607      	mov	r7, r0
    fe16:	460c      	mov	r4, r1
    fe18:	4615      	mov	r5, r2
    fe1a:	461e      	mov	r6, r3
    fe1c:	f1be 0f00 	cmp.w	lr, #0
    fe20:	f000 808e 	beq.w	ff40 <am_hal_flash_delay_status_check+0x138>
    fe24:	f010 0907 	ands.w	r9, r0, #7
    fe28:	d044      	beq.n	feb4 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe2a:	680b      	ldr	r3, [r1, #0]
    fe2c:	4013      	ands	r3, r2
    fe2e:	429e      	cmp	r6, r3
    fe30:	f000 8083 	beq.w	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe34:	2001      	movs	r0, #1
    fe36:	47c0      	blx	r8
    fe38:	f1b9 0f01 	cmp.w	r9, #1
    fe3c:	f107 37ff 	add.w	r7, r7, #4294967295
    fe40:	d038      	beq.n	feb4 <am_hal_flash_delay_status_check+0xac>
    fe42:	f1b9 0f02 	cmp.w	r9, #2
    fe46:	d02e      	beq.n	fea6 <am_hal_flash_delay_status_check+0x9e>
    fe48:	f1b9 0f03 	cmp.w	r9, #3
    fe4c:	d024      	beq.n	fe98 <am_hal_flash_delay_status_check+0x90>
    fe4e:	f1b9 0f04 	cmp.w	r9, #4
    fe52:	d01a      	beq.n	fe8a <am_hal_flash_delay_status_check+0x82>
    fe54:	f1b9 0f05 	cmp.w	r9, #5
    fe58:	d010      	beq.n	fe7c <am_hal_flash_delay_status_check+0x74>
    fe5a:	f1b9 0f06 	cmp.w	r9, #6
    fe5e:	d006      	beq.n	fe6e <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe60:	6820      	ldr	r0, [r4, #0]
    fe62:	4028      	ands	r0, r5
    fe64:	4286      	cmp	r6, r0
    fe66:	d068      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe68:	2001      	movs	r0, #1
    fe6a:	47c0      	blx	r8
    fe6c:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe6e:	6821      	ldr	r1, [r4, #0]
    fe70:	4029      	ands	r1, r5
    fe72:	428e      	cmp	r6, r1
    fe74:	d061      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe76:	2001      	movs	r0, #1
    fe78:	47c0      	blx	r8
    fe7a:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe7c:	6822      	ldr	r2, [r4, #0]
    fe7e:	402a      	ands	r2, r5
    fe80:	4296      	cmp	r6, r2
    fe82:	d05a      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe84:	2001      	movs	r0, #1
    fe86:	47c0      	blx	r8
    fe88:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe8a:	6823      	ldr	r3, [r4, #0]
    fe8c:	402b      	ands	r3, r5
    fe8e:	429e      	cmp	r6, r3
    fe90:	d053      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fe92:	2001      	movs	r0, #1
    fe94:	47c0      	blx	r8
    fe96:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fe98:	6820      	ldr	r0, [r4, #0]
    fe9a:	4028      	ands	r0, r5
    fe9c:	4286      	cmp	r6, r0
    fe9e:	d04c      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fea0:	2001      	movs	r0, #1
    fea2:	47c0      	blx	r8
    fea4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fea6:	6821      	ldr	r1, [r4, #0]
    fea8:	4029      	ands	r1, r5
    feaa:	428e      	cmp	r6, r1
    feac:	d045      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    feae:	2001      	movs	r0, #1
    feb0:	3f01      	subs	r7, #1
    feb2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    feb4:	6822      	ldr	r2, [r4, #0]
    feb6:	402a      	ands	r2, r5
    feb8:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    feba:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    febe:	d03c      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    fec0:	2f00      	cmp	r7, #0
    fec2:	f000 80c8 	beq.w	10056 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fec6:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fec8:	6823      	ldr	r3, [r4, #0]
    feca:	402b      	ands	r3, r5
    fecc:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fece:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fed2:	d032      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fed4:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fed6:	6821      	ldr	r1, [r4, #0]
    fed8:	4029      	ands	r1, r5
    feda:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fedc:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fee0:	d02b      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fee2:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fee4:	6822      	ldr	r2, [r4, #0]
    fee6:	402a      	ands	r2, r5
    fee8:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    feea:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    feee:	d024      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fef0:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fef2:	6823      	ldr	r3, [r4, #0]
    fef4:	402b      	ands	r3, r5
    fef6:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fef8:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    fefc:	d01d      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fefe:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff00:	6821      	ldr	r1, [r4, #0]
    ff02:	4029      	ands	r1, r5
    ff04:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff06:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff0a:	d016      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff0c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff0e:	6822      	ldr	r2, [r4, #0]
    ff10:	402a      	ands	r2, r5
    ff12:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff14:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff18:	d00f      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff1a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff1c:	6820      	ldr	r0, [r4, #0]
    ff1e:	4028      	ands	r0, r5
    ff20:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff22:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff26:	d008      	beq.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff28:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff2a:	6822      	ldr	r2, [r4, #0]
    ff2c:	402a      	ands	r2, r5
    ff2e:	4296      	cmp	r6, r2
    ff30:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff34:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    ff38:	d1c2      	bne.n	fec0 <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    ff3a:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    ff3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ff40:	f010 0907 	ands.w	r9, r0, #7
    ff44:	d043      	beq.n	ffce <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ff46:	680b      	ldr	r3, [r1, #0]
    ff48:	4013      	ands	r3, r2
    ff4a:	429e      	cmp	r6, r3
    ff4c:	d1f5      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff4e:	2001      	movs	r0, #1
    ff50:	47c0      	blx	r8
    ff52:	f1b9 0f01 	cmp.w	r9, #1
    ff56:	f107 37ff 	add.w	r7, r7, #4294967295
    ff5a:	d038      	beq.n	ffce <am_hal_flash_delay_status_check+0x1c6>
    ff5c:	f1b9 0f02 	cmp.w	r9, #2
    ff60:	d02e      	beq.n	ffc0 <am_hal_flash_delay_status_check+0x1b8>
    ff62:	f1b9 0f03 	cmp.w	r9, #3
    ff66:	d024      	beq.n	ffb2 <am_hal_flash_delay_status_check+0x1aa>
    ff68:	f1b9 0f04 	cmp.w	r9, #4
    ff6c:	d01a      	beq.n	ffa4 <am_hal_flash_delay_status_check+0x19c>
    ff6e:	f1b9 0f05 	cmp.w	r9, #5
    ff72:	d010      	beq.n	ff96 <am_hal_flash_delay_status_check+0x18e>
    ff74:	f1b9 0f06 	cmp.w	r9, #6
    ff78:	d006      	beq.n	ff88 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ff7a:	6821      	ldr	r1, [r4, #0]
    ff7c:	4029      	ands	r1, r5
    ff7e:	428e      	cmp	r6, r1
    ff80:	d1db      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff82:	2001      	movs	r0, #1
    ff84:	47c0      	blx	r8
    ff86:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ff88:	6822      	ldr	r2, [r4, #0]
    ff8a:	402a      	ands	r2, r5
    ff8c:	4296      	cmp	r6, r2
    ff8e:	d1d4      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff90:	2001      	movs	r0, #1
    ff92:	47c0      	blx	r8
    ff94:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ff96:	6820      	ldr	r0, [r4, #0]
    ff98:	4028      	ands	r0, r5
    ff9a:	4286      	cmp	r6, r0
    ff9c:	d1cd      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ff9e:	2001      	movs	r0, #1
    ffa0:	47c0      	blx	r8
    ffa2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffa4:	6823      	ldr	r3, [r4, #0]
    ffa6:	402b      	ands	r3, r5
    ffa8:	429e      	cmp	r6, r3
    ffaa:	d1c6      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffac:	2001      	movs	r0, #1
    ffae:	47c0      	blx	r8
    ffb0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffb2:	6821      	ldr	r1, [r4, #0]
    ffb4:	4029      	ands	r1, r5
    ffb6:	428e      	cmp	r6, r1
    ffb8:	d1bf      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffba:	2001      	movs	r0, #1
    ffbc:	47c0      	blx	r8
    ffbe:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffc0:	6822      	ldr	r2, [r4, #0]
    ffc2:	402a      	ands	r2, r5
    ffc4:	4296      	cmp	r6, r2
    ffc6:	d1b8      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffc8:	2001      	movs	r0, #1
    ffca:	3f01      	subs	r7, #1
    ffcc:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffce:	6823      	ldr	r3, [r4, #0]
    ffd0:	402b      	ands	r3, r5
    ffd2:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffd4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffd8:	d1af      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    ffda:	2f00      	cmp	r7, #0
    ffdc:	d03b      	beq.n	10056 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffde:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffe0:	6821      	ldr	r1, [r4, #0]
    ffe2:	4029      	ands	r1, r5
    ffe4:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffe6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffea:	d1a6      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    ffec:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    ffee:	6822      	ldr	r2, [r4, #0]
    fff0:	402a      	ands	r2, r5
    fff2:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fff4:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    fff8:	d19f      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    fffa:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    fffc:	6823      	ldr	r3, [r4, #0]
    fffe:	402b      	ands	r3, r5
   10000:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10002:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10006:	d198      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10008:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   1000a:	6821      	ldr	r1, [r4, #0]
   1000c:	4029      	ands	r1, r5
   1000e:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10010:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10014:	d191      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10016:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10018:	6822      	ldr	r2, [r4, #0]
   1001a:	402a      	ands	r2, r5
   1001c:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   1001e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10022:	d18a      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10024:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10026:	6823      	ldr	r3, [r4, #0]
   10028:	402b      	ands	r3, r5
   1002a:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   1002c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10030:	d183      	bne.n	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10032:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10034:	6820      	ldr	r0, [r4, #0]
   10036:	4028      	ands	r0, r5
   10038:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   1003a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   1003e:	f47f af7c 	bne.w	ff3a <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   10042:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10044:	6823      	ldr	r3, [r4, #0]
   10046:	402b      	ands	r3, r5
   10048:	429e      	cmp	r6, r3
   1004a:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   1004e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   10052:	d0c2      	beq.n	ffda <am_hal_flash_delay_status_check+0x1d2>
   10054:	e771      	b.n	ff3a <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
   10056:	2004      	movs	r0, #4
   10058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1005c:	0800009d 	.word	0x0800009d

00010060 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
   10060:	2831      	cmp	r0, #49	; 0x31
   10062:	d901      	bls.n	10068 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
   10064:	2006      	movs	r0, #6
   10066:	4770      	bx	lr
{
   10068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   1006c:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   10070:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
   10074:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   10076:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   1007a:	d014      	beq.n	100a6 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   1007c:	f3c1 1642 	ubfx	r6, r1, #5, #3
   10080:	1db2      	adds	r2, r6, #6
   10082:	f002 0707 	and.w	r7, r2, #7
   10086:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   10088:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   1008c:	f200 80ab 	bhi.w	101e6 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   10090:	4a85      	ldr	r2, [pc, #532]	; (102a8 <am_hal_gpio_pinconfig+0x248>)
   10092:	5c17      	ldrb	r7, [r2, r0]
   10094:	07ff      	lsls	r7, r7, #31
   10096:	d403      	bmi.n	100a0 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
   10098:	4884      	ldr	r0, [pc, #528]	; (102ac <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
   1009a:	b007      	add	sp, #28
   1009c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   100a0:	1eb4      	subs	r4, r6, #2
   100a2:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
   100a6:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   100aa:	2e00      	cmp	r6, #0
   100ac:	f040 8095 	bne.w	101da <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   100b0:	4a7f      	ldr	r2, [pc, #508]	; (102b0 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   100b2:	4f80      	ldr	r7, [pc, #512]	; (102b4 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   100b4:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   100b6:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   100ba:	411e      	asrs	r6, r3
   100bc:	f016 0f01 	tst.w	r6, #1
   100c0:	bf0c      	ite	eq
   100c2:	2600      	moveq	r6, #0
   100c4:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   100c6:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   100c8:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   100cc:	f000 8097 	beq.w	101fe <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   100d0:	f3c1 3341 	ubfx	r3, r1, #13, #2
   100d4:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   100d6:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   100da:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
   100de:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   100e0:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   100e4:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   100e8:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   100ec:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   100f0:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   100f2:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   100f6:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   100fa:	f000 808d 	beq.w	10218 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
   100fe:	4a6e      	ldr	r2, [pc, #440]	; (102b8 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   10100:	6816      	ldr	r6, [r2, #0]
   10102:	1b8c      	subs	r4, r1, r6
   10104:	fab4 f384 	clz	r3, r4
   10108:	095f      	lsrs	r7, r3, #5
   1010a:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
   1010c:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   10110:	bf04      	itt	eq
   10112:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
   10116:	f367 0800 	bfieq	r8, r7, #0, #1
   1011a:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
   1011c:	f3c1 2101 	ubfx	r1, r1, #8, #2
   10120:	2902      	cmp	r1, #2
   10122:	ea4f 04c0 	mov.w	r4, r0, lsl #3
   10126:	d07a      	beq.n	1021e <am_hal_gpio_pinconfig+0x1be>
   10128:	d87f      	bhi.n	1022a <am_hal_gpio_pinconfig+0x1ca>
   1012a:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   1012c:	bf08      	it	eq
   1012e:	f045 0504 	orreq.w	r5, r5, #4
   10132:	f004 0a18 	and.w	sl, r4, #24
            break;
   10136:	2200      	movs	r2, #0
   10138:	4604      	mov	r4, r0
   1013a:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   1013c:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   10140:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
   10144:	485d      	ldr	r0, [pc, #372]	; (102bc <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
   10146:	495e      	ldr	r1, [pc, #376]	; (102c0 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
   10148:	4f5e      	ldr	r7, [pc, #376]	; (102c4 <am_hal_gpio_pinconfig+0x264>)
   1014a:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   1014c:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   10150:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10154:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
   10158:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   1015a:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   1015e:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
   10160:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
   10164:	f000 f8c2 	bl	102ec <am_hal_interrupt_master_disable>
   10168:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
   1016a:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
   1016e:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
   10172:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
   10176:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   1017a:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
   1017c:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
   10180:	9902      	ldr	r1, [sp, #8]
   10182:	9a03      	ldr	r2, [sp, #12]
   10184:	b150      	cbz	r0, 1019c <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
   10186:	f004 001f 	and.w	r0, r4, #31
   1018a:	ea4f 1e54 	mov.w	lr, r4, lsr #5
   1018e:	f04f 0c01 	mov.w	ip, #1
   10192:	4c4d      	ldr	r4, [pc, #308]	; (102c8 <am_hal_gpio_pinconfig+0x268>)
   10194:	fa0c f000 	lsl.w	r0, ip, r0
   10198:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   1019c:	484b      	ldr	r0, [pc, #300]	; (102cc <am_hal_gpio_pinconfig+0x26c>)
   1019e:	2473      	movs	r4, #115	; 0x73
   101a0:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   101a2:	f8da 4000 	ldr.w	r4, [sl]
   101a6:	4034      	ands	r4, r6
   101a8:	4325      	orrs	r5, r4
   101aa:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   101ae:	f859 5001 	ldr.w	r5, [r9, r1]
   101b2:	402f      	ands	r7, r5
   101b4:	ea47 0708 	orr.w	r7, r7, r8
   101b8:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   101bc:	f85b 1003 	ldr.w	r1, [fp, r3]
   101c0:	400e      	ands	r6, r1
   101c2:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
   101c4:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   101c6:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
   101ca:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
   101cc:	9805      	ldr	r0, [sp, #20]
   101ce:	f000 f891 	bl	102f4 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   101d2:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
   101d4:	b007      	add	sp, #28
   101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   101da:	2e01      	cmp	r6, #1
   101dc:	d015      	beq.n	1020a <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   101de:	2e02      	cmp	r6, #2
   101e0:	d030      	beq.n	10244 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
   101e2:	483b      	ldr	r0, [pc, #236]	; (102d0 <am_hal_gpio_pinconfig+0x270>)
   101e4:	e759      	b.n	1009a <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   101e6:	2cc0      	cmp	r4, #192	; 0xc0
   101e8:	d027      	beq.n	1023a <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   101ea:	2c20      	cmp	r4, #32
   101ec:	f47f af5b 	bne.w	100a6 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
   101f0:	4c2d      	ldr	r4, [pc, #180]	; (102a8 <am_hal_gpio_pinconfig+0x248>)
   101f2:	5c26      	ldrb	r6, [r4, r0]
   101f4:	f016 0f09 	tst.w	r6, #9
   101f8:	f47f af4e 	bne.w	10098 <am_hal_gpio_pinconfig+0x38>
   101fc:	e753      	b.n	100a6 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   101fe:	f3c1 4202 	ubfx	r2, r1, #16, #3
   10202:	2a07      	cmp	r2, #7
   10204:	d125      	bne.n	10252 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   10206:	4833      	ldr	r0, [pc, #204]	; (102d4 <am_hal_gpio_pinconfig+0x274>)
   10208:	e747      	b.n	1009a <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   1020a:	4c27      	ldr	r4, [pc, #156]	; (102a8 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   1020c:	5c26      	ldrb	r6, [r4, r0]
   1020e:	07b4      	lsls	r4, r6, #30
   10210:	d5e7      	bpl.n	101e2 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   10212:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10216:	e74b      	b.n	100b0 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
   10218:	2701      	movs	r7, #1
   1021a:	9700      	str	r7, [sp, #0]
   1021c:	e776      	b.n	1010c <am_hal_gpio_pinconfig+0xac>
   1021e:	f004 0a18 	and.w	sl, r4, #24
   10222:	2301      	movs	r3, #1
   10224:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
   10228:	e786      	b.n	10138 <am_hal_gpio_pinconfig+0xd8>
   1022a:	f004 0a18 	and.w	sl, r4, #24
   1022e:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   10230:	f045 0504 	orr.w	r5, r5, #4
   10234:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
   10238:	e77e      	b.n	10138 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
   1023a:	2814      	cmp	r0, #20
   1023c:	f43f af33 	beq.w	100a6 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   10240:	4825      	ldr	r0, [pc, #148]	; (102d8 <am_hal_gpio_pinconfig+0x278>)
   10242:	e72a      	b.n	1009a <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   10244:	4a18      	ldr	r2, [pc, #96]	; (102a8 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   10246:	5c17      	ldrb	r7, [r2, r0]
   10248:	077a      	lsls	r2, r7, #29
   1024a:	d5ca      	bpl.n	101e2 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   1024c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   10250:	e72e      	b.n	100b0 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   10252:	4c22      	ldr	r4, [pc, #136]	; (102dc <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   10254:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   10258:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   1025c:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   10260:	45b0      	cmp	r8, r6
   10262:	d010      	beq.n	10286 <am_hal_gpio_pinconfig+0x226>
   10264:	0087      	lsls	r7, r0, #2
   10266:	eb04 0907 	add.w	r9, r4, r7
   1026a:	f899 3001 	ldrb.w	r3, [r9, #1]
   1026e:	42b3      	cmp	r3, r6
   10270:	d015      	beq.n	1029e <am_hal_gpio_pinconfig+0x23e>
   10272:	f899 2002 	ldrb.w	r2, [r9, #2]
   10276:	42b2      	cmp	r2, r6
   10278:	d00f      	beq.n	1029a <am_hal_gpio_pinconfig+0x23a>
   1027a:	f899 4003 	ldrb.w	r4, [r9, #3]
   1027e:	42b4      	cmp	r4, r6
   10280:	d00f      	beq.n	102a2 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   10282:	4817      	ldr	r0, [pc, #92]	; (102e0 <am_hal_gpio_pinconfig+0x280>)
   10284:	e709      	b.n	1009a <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   10286:	2600      	movs	r6, #0
   10288:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
   1028a:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   1028c:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
   10290:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   10292:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
   10296:	9300      	str	r3, [sp, #0]
   10298:	e740      	b.n	1011c <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   1029a:	2602      	movs	r6, #2
   1029c:	e7f5      	b.n	1028a <am_hal_gpio_pinconfig+0x22a>
   1029e:	2601      	movs	r6, #1
   102a0:	e7f3      	b.n	1028a <am_hal_gpio_pinconfig+0x22a>
   102a2:	2603      	movs	r6, #3
   102a4:	e7f1      	b.n	1028a <am_hal_gpio_pinconfig+0x22a>
   102a6:	bf00      	nop
   102a8:	00012fc8 	.word	0x00012fc8
   102ac:	08000100 	.word	0x08000100
   102b0:	00012ffc 	.word	0x00012ffc
   102b4:	000130f8 	.word	0x000130f8
   102b8:	00012fc4 	.word	0x00012fc4
   102bc:	7ffffffc 	.word	0x7ffffffc
   102c0:	400100e0 	.word	0x400100e0
   102c4:	40010040 	.word	0x40010040
   102c8:	400100b4 	.word	0x400100b4
   102cc:	40010000 	.word	0x40010000
   102d0:	08000102 	.word	0x08000102
   102d4:	08000103 	.word	0x08000103
   102d8:	08000101 	.word	0x08000101
   102dc:	00013030 	.word	0x00013030
   102e0:	08000104 	.word	0x08000104

000102e4 <am_hal_interrupt_master_enable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
   102e4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
   102e8:	b662      	cpsie	i
    __asm("    bx lr");
   102ea:	4770      	bx	lr

000102ec <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   102ec:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   102f0:	b672      	cpsid	i
    __asm("    bx lr");
   102f2:	4770      	bx	lr

000102f4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   102f4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   102f8:	4770      	bx	lr
   102fa:	bf00      	nop

000102fc <am_hal_itm_enable>:
#if AM_CMSIS_REGS
    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
   102fc:	4a0b      	ldr	r2, [pc, #44]	; (1032c <am_hal_itm_enable+0x30>)
   102fe:	68d3      	ldr	r3, [r2, #12]
   10300:	f043 7080 	orr.w	r0, r3, #16777216	; 0x1000000
   10304:	60d0      	str	r0, [r2, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
   10306:	68d1      	ldr	r1, [r2, #12]
   10308:	01cb      	lsls	r3, r1, #7
   1030a:	d5fc      	bpl.n	10306 <am_hal_itm_enable+0xa>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    ITM->LAR = ITM_LAR_KEYVAL;
   1030c:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
   10310:	4b07      	ldr	r3, [pc, #28]	; (10330 <am_hal_itm_enable+0x34>)
    ITM->TER = 0xFFFFFFFF;

    //
    // Write to the ITM control and status register.
    //
    ITM->TCR =
   10312:	4a08      	ldr	r2, [pc, #32]	; (10334 <am_hal_itm_enable+0x38>)
    ITM->LAR = ITM_LAR_KEYVAL;
   10314:	f8cc 3fb0 	str.w	r3, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
   10318:	200f      	movs	r0, #15
    ITM->TER = 0xFFFFFFFF;
   1031a:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
   1031e:	f8cc 0e40 	str.w	r0, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
   10322:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
   10326:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
   1032a:	4770      	bx	lr
   1032c:	e000edf0 	.word	0xe000edf0
   10330:	c5acce55 	.word	0xc5acce55
   10334:	00150511 	.word	0x00150511

00010338 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
   10338:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
   1033a:	4b24      	ldr	r3, [pc, #144]	; (103cc <am_hal_itm_disable+0x94>)
   1033c:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
   10340:	b9b0      	cbnz	r0, 10370 <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
   10342:	4923      	ldr	r1, [pc, #140]	; (103d0 <am_hal_itm_disable+0x98>)
   10344:	68ca      	ldr	r2, [r1, #12]
   10346:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
   1034a:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
   1034c:	68cb      	ldr	r3, [r1, #12]
   1034e:	01da      	lsls	r2, r3, #7
   10350:	d5fc      	bpl.n	1034c <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
   10352:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
   10356:	481f      	ldr	r0, [pc, #124]	; (103d4 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
   10358:	4a1f      	ldr	r2, [pc, #124]	; (103d8 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
   1035a:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
   1035e:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
   10360:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
   10364:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
   10368:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
   1036c:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
   10370:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   10374:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
   10378:	021b      	lsls	r3, r3, #8
   1037a:	d4fb      	bmi.n	10374 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   1037c:	f240 20f7 	movw	r0, #759	; 0x2f7
   10380:	f7ff fd3e 	bl	fe00 <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
   10384:	4813      	ldr	r0, [pc, #76]	; (103d4 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
   10386:	4915      	ldr	r1, [pc, #84]	; (103dc <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
   10388:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
   1038c:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
   10390:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
   10392:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
   10396:	f022 0401 	bic.w	r4, r2, #1
   1039a:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
   1039e:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
   103a2:	420b      	tst	r3, r1
   103a4:	d1fb      	bne.n	1039e <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
   103a6:	3801      	subs	r0, #1
   103a8:	d1f3      	bne.n	10392 <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
   103aa:	4909      	ldr	r1, [pc, #36]	; (103d0 <am_hal_itm_disable+0x98>)
   103ac:	68ca      	ldr	r2, [r1, #12]
   103ae:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
   103b2:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
   103b4:	68cb      	ldr	r3, [r1, #12]
   103b6:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
   103ba:	d1fb      	bne.n	103b4 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
   103bc:	4903      	ldr	r1, [pc, #12]	; (103cc <am_hal_itm_disable+0x94>)
   103be:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
   103c2:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
   103c6:	2a00      	cmp	r2, #0
   103c8:	d1fb      	bne.n	103c2 <am_hal_itm_disable+0x8a>
}
   103ca:	bd10      	pop	{r4, pc}
   103cc:	40020000 	.word	0x40020000
   103d0:	e000edf0 	.word	0xe000edf0
   103d4:	c5acce55 	.word	0xc5acce55
   103d8:	00150511 	.word	0x00150511
   103dc:	00800001 	.word	0x00800001

000103e0 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
   103e0:	7803      	ldrb	r3, [r0, #0]
   103e2:	b1b3      	cbz	r3, 10412 <am_hal_itm_print+0x32>
{
   103e4:	b410      	push	{r4}
   103e6:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
   103e8:	2400      	movs	r4, #0
   103ea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
   103ee:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
   103f0:	2900      	cmp	r1, #0
   103f2:	d1fa      	bne.n	103ea <am_hal_itm_print+0xa>
   103f4:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
   103f6:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
   103fa:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
   103fe:	f8dc 3000 	ldr.w	r3, [ip]
   10402:	2b00      	cmp	r3, #0
   10404:	d0fb      	beq.n	103fe <am_hal_itm_print+0x1e>
    while (ui32Length)
   10406:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
   10408:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
   1040c:	d1f5      	bne.n	103fa <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
   1040e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10412:	4770      	bx	lr

00010414 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
   10414:	b141      	cbz	r1, 10428 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
   10416:	2801      	cmp	r0, #1
{
   10418:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
   1041a:	d03a      	beq.n	10492 <am_hal_mcuctrl_info_get+0x7e>
   1041c:	d322      	bcc.n	10464 <am_hal_mcuctrl_info_get+0x50>
   1041e:	2802      	cmp	r0, #2
   10420:	d004      	beq.n	1042c <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
   10422:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
   10424:	bcf0      	pop	{r4, r5, r6, r7}
   10426:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   10428:	2006      	movs	r0, #6
   1042a:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
   1042c:	4a41      	ldr	r2, [pc, #260]	; (10534 <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
   1042e:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
   10430:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
   10434:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
   10436:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
   1043a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
   1043e:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
   10442:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
   10444:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
   10446:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
   10448:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   1044c:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
   1044e:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
   10452:	4334      	orrs	r4, r6
   10454:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
   10456:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   1045a:	4310      	orrs	r0, r2
   1045c:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
   1045e:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
   10460:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
   10462:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
   10464:	4c33      	ldr	r4, [pc, #204]	; (10534 <am_hal_mcuctrl_info_get+0x120>)
   10466:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
   10468:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
   1046c:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
   10470:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
   10472:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
   10474:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
   10478:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
   1047c:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
   1047e:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
   10480:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
   10484:	f004 0501 	and.w	r5, r4, #1
   10488:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
   1048a:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
   1048c:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
   1048e:	bcf0      	pop	{r4, r5, r6, r7}
   10490:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
   10492:	4a28      	ldr	r2, [pc, #160]	; (10534 <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
   10494:	4c28      	ldr	r4, [pc, #160]	; (10538 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
   10496:	6813      	ldr	r3, [r2, #0]
   10498:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
   1049a:	6850      	ldr	r0, [r2, #4]
   1049c:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
   1049e:	6897      	ldr	r7, [r2, #8]
   104a0:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
   104a2:	68d6      	ldr	r6, [r2, #12]
   104a4:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
   104a6:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
   104a8:	4824      	ldr	r0, [pc, #144]	; (1053c <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
   104aa:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
   104ac:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
   104b0:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
   104b4:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
   104b6:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   104ba:	4a21      	ldr	r2, [pc, #132]	; (10540 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
   104bc:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
   104c0:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
   104c2:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
   104c6:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
   104c8:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
   104ca:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   104cc:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
   104d0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   104d4:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
   104d6:	f000 040f 	and.w	r4, r0, #15
   104da:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
   104de:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
   104e0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
   104e4:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
   104e8:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
   104ec:	f007 0c0f 	and.w	ip, r7, #15
   104f0:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
   104f4:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
   104f6:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
   104fa:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
   104fe:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
   10502:	f3c5 1703 	ubfx	r7, r5, #4, #4
   10506:	433b      	orrs	r3, r7
   10508:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
   1050a:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
   1050e:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
   10512:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   10516:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
   1051a:	b2e5      	uxtb	r5, r4
   1051c:	042b      	lsls	r3, r5, #16
   1051e:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   10522:	b2d6      	uxtb	r6, r2
   10524:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
   10526:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   10528:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
   1052c:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
   1052e:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
   10530:	bcf0      	pop	{r4, r5, r6, r7}
   10532:	4770      	bx	lr
   10534:	40020000 	.word	0x40020000
   10538:	0001312c 	.word	0x0001312c
   1053c:	0001316c 	.word	0x0001316c
   10540:	f0000f00 	.word	0xf0000f00

00010544 <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
   10544:	b570      	push	{r4, r5, r6, lr}
   10546:	b082      	sub	sp, #8
   10548:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
   1054a:	f7ff fecf 	bl	102ec <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   1054e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   10552:	008c      	lsls	r4, r1, #2
   10554:	4e0e      	ldr	r6, [pc, #56]	; (10590 <am_hal_pwrctrl_periph_enable+0x4c>)
   10556:	4d0f      	ldr	r5, [pc, #60]	; (10594 <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
   10558:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   1055a:	592a      	ldr	r2, [r5, r4]
   1055c:	68b3      	ldr	r3, [r6, #8]
   1055e:	4313      	orrs	r3, r2
   10560:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
   10562:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   10564:	442c      	add	r4, r5
    AM_CRITICAL_END
   10566:	f7ff fec5 	bl	102f4 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   1056a:	2077      	movs	r0, #119	; 0x77
   1056c:	f7ff fc48 	bl	fe00 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   10570:	69b0      	ldr	r0, [r6, #24]
   10572:	6864      	ldr	r4, [r4, #4]
   10574:	4220      	tst	r0, r4
   10576:	d103      	bne.n	10580 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   10578:	2077      	movs	r0, #119	; 0x77
   1057a:	f7ff fc41 	bl	fe00 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1057e:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
   10580:	4903      	ldr	r1, [pc, #12]	; (10590 <am_hal_pwrctrl_periph_enable+0x4c>)
   10582:	698d      	ldr	r5, [r1, #24]
   10584:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
   10586:	bf0c      	ite	eq
   10588:	2001      	moveq	r0, #1
   1058a:	2000      	movne	r0, #0
   1058c:	b002      	add	sp, #8
   1058e:	bd70      	pop	{r4, r5, r6, pc}
   10590:	40021000 	.word	0x40021000
   10594:	000131ac 	.word	0x000131ac

00010598 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   10598:	b570      	push	{r4, r5, r6, lr}
   1059a:	b082      	sub	sp, #8
   1059c:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
   1059e:	f7ff fea5 	bl	102ec <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   105a2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   105a6:	008c      	lsls	r4, r1, #2
   105a8:	4e0f      	ldr	r6, [pc, #60]	; (105e8 <am_hal_pwrctrl_periph_disable+0x50>)
   105aa:	4d10      	ldr	r5, [pc, #64]	; (105ec <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
   105ac:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   105ae:	68b3      	ldr	r3, [r6, #8]
   105b0:	592a      	ldr	r2, [r5, r4]
   105b2:	ea23 0002 	bic.w	r0, r3, r2
   105b6:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
   105b8:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   105ba:	442c      	add	r4, r5
    AM_CRITICAL_END
   105bc:	f7ff fe9a 	bl	102f4 <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   105c0:	2077      	movs	r0, #119	; 0x77
   105c2:	f7ff fc1d 	bl	fe00 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   105c6:	69b1      	ldr	r1, [r6, #24]
   105c8:	6864      	ldr	r4, [r4, #4]
   105ca:	4221      	tst	r1, r4
   105cc:	d003      	beq.n	105d6 <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   105ce:	2077      	movs	r0, #119	; 0x77
   105d0:	f7ff fc16 	bl	fe00 <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   105d4:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
   105d6:	4d04      	ldr	r5, [pc, #16]	; (105e8 <am_hal_pwrctrl_periph_disable+0x50>)
   105d8:	69ae      	ldr	r6, [r5, #24]
   105da:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
   105dc:	bf14      	ite	ne
   105de:	2001      	movne	r0, #1
   105e0:	2000      	moveq	r0, #0
   105e2:	b002      	add	sp, #8
   105e4:	bd70      	pop	{r4, r5, r6, pc}
   105e6:	bf00      	nop
   105e8:	40021000 	.word	0x40021000
   105ec:	000131ac 	.word	0x000131ac

000105f0 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
   105f0:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   105f2:	4c1b      	ldr	r4, [pc, #108]	; (10660 <am_hal_pwrctrl_low_power_init+0x70>)
   105f4:	69a3      	ldr	r3, [r4, #24]
   105f6:	05db      	lsls	r3, r3, #23
{
   105f8:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   105fa:	d502      	bpl.n	10602 <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
   105fc:	2000      	movs	r0, #0
}
   105fe:	b003      	add	sp, #12
   10600:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   10602:	4d18      	ldr	r5, [pc, #96]	; (10664 <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
   10604:	4918      	ldr	r1, [pc, #96]	; (10668 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   10606:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
   10608:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
   1060a:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
   1060c:	461a      	mov	r2, r3
   1060e:	9000      	str	r0, [sp, #0]
   10610:	f242 7010 	movw	r0, #10000	; 0x2710
   10614:	f7ff fbf8 	bl	fe08 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   10618:	b110      	cbz	r0, 10620 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
   1061a:	2004      	movs	r0, #4
}
   1061c:	b003      	add	sp, #12
   1061e:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
   10620:	6821      	ldr	r1, [r4, #0]
   10622:	f041 0201 	orr.w	r2, r1, #1
   10626:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
   10628:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1062a:	f043 0140 	orr.w	r1, r3, #64	; 0x40
   1062e:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
   10630:	68ec      	ldr	r4, [r5, #12]
   10632:	b2e2      	uxtb	r2, r4
   10634:	2a11      	cmp	r2, #17
   10636:	d1e1      	bne.n	105fc <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
   10638:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   1063c:	f360 5356 	bfi	r3, r0, #21, #2
   10640:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
   10644:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   10648:	240f      	movs	r4, #15
   1064a:	f364 118b 	bfi	r1, r4, #6, #6
   1064e:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
   10652:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
   10656:	f364 0205 	bfi	r2, r4, #0, #6
   1065a:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
   1065e:	e7ce      	b.n	105fe <am_hal_pwrctrl_low_power_init+0xe>
   10660:	40021000 	.word	0x40021000
   10664:	40020000 	.word	0x40020000
   10668:	40020018 	.word	0x40020018

0001066c <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
   1066c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
   10670:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
   10672:	68d3      	ldr	r3, [r2, #12]
   10674:	bf0c      	ite	eq
   10676:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
   1067a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
   1067e:	60d3      	str	r3, [r2, #12]
   10680:	4770      	bx	lr
   10682:	bf00      	nop

00010684 <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
   10684:	4a03      	ldr	r2, [pc, #12]	; (10694 <am_hal_rtc_osc_disable+0x10>)
   10686:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1068a:	f043 0010 	orr.w	r0, r3, #16
   1068e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
   10692:	4770      	bx	lr
   10694:	40004200 	.word	0x40004200

00010698 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
   10698:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    //
    // TPIU formatter & flush control register.
    //
    TPI->FFCR = 0;
   1069a:	4a24      	ldr	r2, [pc, #144]	; (1072c <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
   1069c:	6803      	ldr	r3, [r0, #0]
    TPI->FFCR = 0;
   1069e:	2100      	movs	r1, #0
{
   106a0:	b084      	sub	sp, #16
    TPI->FFCR = 0;
   106a2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
#endif // AM_CMSIS_REGS

    if ( ui32ITMbitrate )
   106a6:	b33b      	cbz	r3, 106f8 <am_hal_tpiu_enable+0x60>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
#if AM_CMSIS_REGS
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
   106a8:	2001      	movs	r0, #1
#endif // AM_CMSIS_REGS

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
   106aa:	4921      	ldr	r1, [pc, #132]	; (10730 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
   106ac:	4c21      	ldr	r4, [pc, #132]	; (10734 <am_hal_tpiu_enable+0x9c>)
        TPI->CSPSR = TPI_CSPSR_CWIDTH_1BIT;
   106ae:	6050      	str	r0, [r2, #4]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
   106b0:	f5a3 4c61 	sub.w	ip, r3, #57600	; 0xe100
        }

        //
        // Get the current HFRC frequency.
        //
        am_hal_clkgen_status_get(&sClkGenStatus);
   106b4:	a801      	add	r0, sp, #4
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
   106b6:	458c      	cmp	ip, r1
   106b8:	bf98      	it	ls
   106ba:	461c      	movls	r4, r3
        am_hal_clkgen_status_get(&sClkGenStatus);
   106bc:	f7ff fb82 	bl	fdc4 <am_hal_clkgen_status_get>
        ui32HFRC = sClkGenStatus.ui32SysclkFreq;
   106c0:	9b01      	ldr	r3, [sp, #4]

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
   106c2:	1c5a      	adds	r2, r3, #1
   106c4:	d02f      	beq.n	10726 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
   106c6:	08da      	lsrs	r2, r3, #3
   106c8:	fbb2 fef4 	udiv	lr, r2, r4
   106cc:	f10e 31ff 	add.w	r1, lr, #4294967295
   106d0:	b288      	uxth	r0, r1

#if AM_CMSIS_REGS
        //
        // Set the scaler value.
        //
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
   106d2:	4a16      	ldr	r2, [pc, #88]	; (1072c <am_hal_tpiu_enable+0x94>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6MHz) operation.
        //
        MCUCTRL->TPIUCTRL =
   106d4:	4918      	ldr	r1, [pc, #96]	; (10738 <am_hal_tpiu_enable+0xa0>)
        TPI->ACPR = _VAL2FLD(TPI_ACPR_SWOSCALER, ui32SWOscaler);
   106d6:	6110      	str	r0, [r2, #16]
        MCUCTRL->TPIUCTRL =
   106d8:	f240 2301 	movw	r3, #513	; 0x201
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
   106dc:	2402      	movs	r4, #2
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
   106de:	2000      	movs	r0, #0
        TPI->SPPR = _VAL2FLD( TPI_SPPR_TXMODE, TPI_SPPR_TXMODE_UART);
   106e0:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
        TPI->ITCTRL = _VAL2FLD(TPI_ITCTRL_Mode, TPI_ITCTRL_Mode_NORMAL);
   106e4:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
        MCUCTRL->TPIUCTRL =
   106e8:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   106ec:	f240 20f7 	movw	r0, #759	; 0x2f7
   106f0:	f7ff fb86 	bl	fe00 <am_hal_flash_delay>
}
   106f4:	b004      	add	sp, #16
   106f6:	bd10      	pop	{r4, pc}
        TPI->ACPR = psConfig->ui32ClockPrescaler;
   106f8:	6904      	ldr	r4, [r0, #16]
   106fa:	6114      	str	r4, [r2, #16]
        TPI->SPPR = psConfig->ui32PinProtocol;
   106fc:	6883      	ldr	r3, [r0, #8]
   106fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
   10702:	68c1      	ldr	r1, [r0, #12]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
   10704:	4c0c      	ldr	r4, [pc, #48]	; (10738 <am_hal_tpiu_enable+0xa0>)
        TPI->CSPSR = (1 << (psConfig->ui32ParallelPortSize - 1));
   10706:	3901      	subs	r1, #1
   10708:	2301      	movs	r3, #1
   1070a:	408b      	lsls	r3, r1
   1070c:	6053      	str	r3, [r2, #4]
        MCUCTRL->TPIUCTRL |= psConfig->ui32TraceClkIn;
   1070e:	6840      	ldr	r0, [r0, #4]
   10710:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
   10714:	4302      	orrs	r2, r0
   10716:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    am_hal_flash_delay(FLASH_CYCLES_US(50));
   1071a:	f240 20f7 	movw	r0, #759	; 0x2f7
   1071e:	f7ff fb6f 	bl	fe00 <am_hal_flash_delay>
}
   10722:	b004      	add	sp, #16
   10724:	bd10      	pop	{r4, pc}
   10726:	2005      	movs	r0, #5
   10728:	e7d3      	b.n	106d2 <am_hal_tpiu_enable+0x3a>
   1072a:	bf00      	nop
   1072c:	e0040000 	.word	0xe0040000
   10730:	001da380 	.word	0x001da380
   10734:	000f4240 	.word	0x000f4240
   10738:	40020000 	.word	0x40020000

0001073c <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   1073c:	2801      	cmp	r0, #1
   1073e:	d901      	bls.n	10744 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
   10740:	2005      	movs	r0, #5
   10742:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
   10744:	b169      	cbz	r1, 10762 <am_hal_uart_initialize+0x26>
{
   10746:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   10748:	2264      	movs	r2, #100	; 0x64
   1074a:	4e0e      	ldr	r6, [pc, #56]	; (10784 <am_hal_uart_initialize+0x48>)
   1074c:	fb02 f200 	mul.w	r2, r2, r0
   10750:	18b4      	adds	r4, r6, r2
   10752:	4603      	mov	r3, r0
   10754:	78e0      	ldrb	r0, [r4, #3]
   10756:	f3c0 0700 	ubfx	r7, r0, #0, #1
   1075a:	b2fd      	uxtb	r5, r7
   1075c:	b11d      	cbz	r5, 10766 <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
   1075e:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
   10760:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   10762:	2006      	movs	r0, #6
   10764:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   10766:	f040 0001 	orr.w	r0, r0, #1
   1076a:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   1076c:	58b0      	ldr	r0, [r6, r2]
   1076e:	f8df e018 	ldr.w	lr, [pc, #24]	; 10788 <am_hal_uart_initialize+0x4c>
   10772:	f36e 0017 	bfi	r0, lr, #0, #24
   10776:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   10778:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   1077a:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   1077c:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
   1077e:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   10780:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   10782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10784:	10002d24 	.word	0x10002d24
   10788:	00ea9e06 	.word	0x00ea9e06

0001078c <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
   1078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10790:	6804      	ldr	r4, [r0, #0]
   10792:	4b36      	ldr	r3, [pc, #216]	; (1086c <am_hal_uart_power_control+0xe0>)
   10794:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   10798:	429c      	cmp	r4, r3
{
   1079a:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1079c:	d003      	beq.n	107a6 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1079e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
   107a0:	b004      	add	sp, #16
   107a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
   107a6:	6a47      	ldr	r7, [r0, #36]	; 0x24
   107a8:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
   107aa:	f107 0008 	add.w	r0, r7, #8
   107ae:	460e      	mov	r6, r1
   107b0:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
   107b4:	b181      	cbz	r1, 107d8 <am_hal_uart_power_control+0x4c>
   107b6:	2902      	cmp	r1, #2
   107b8:	d80c      	bhi.n	107d4 <am_hal_uart_power_control+0x48>
            if (bRetainState)
   107ba:	b992      	cbnz	r2, 107e2 <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
   107bc:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   107c0:	341c      	adds	r4, #28
   107c2:	0325      	lsls	r5, r4, #12
   107c4:	f04f 31ff 	mov.w	r1, #4294967295
   107c8:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   107ca:	4640      	mov	r0, r8
   107cc:	f7ff fee4 	bl	10598 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   107d0:	2000      	movs	r0, #0
            break;
   107d2:	e7e5      	b.n	107a0 <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
   107d4:	2006      	movs	r0, #6
   107d6:	e7e3      	b.n	107a0 <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
   107d8:	b322      	cbz	r2, 10824 <am_hal_uart_power_control+0x98>
   107da:	792a      	ldrb	r2, [r5, #4]
   107dc:	bb42      	cbnz	r2, 10830 <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
   107de:	2007      	movs	r0, #7
   107e0:	e7de      	b.n	107a0 <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
   107e2:	f7ff fd83 	bl	102ec <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   107e6:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
   107ea:	311c      	adds	r1, #28
   107ec:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
   107ee:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   107f0:	6a3a      	ldr	r2, [r7, #32]
   107f2:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107f6:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   107f8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   107fa:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   107fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   107fe:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   10800:	6b39      	ldr	r1, [r7, #48]	; 0x30
   10802:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   10804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10806:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   10808:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   1080a:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
   1080c:	2301      	movs	r3, #1
                AM_CRITICAL_END
   1080e:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
   10810:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
   10812:	f7ff fd6f 	bl	102f4 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10816:	682e      	ldr	r6, [r5, #0]
   10818:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
   1081c:	42a0      	cmp	r0, r4
   1081e:	d1d4      	bne.n	107ca <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
   10820:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   10822:	e7cb      	b.n	107bc <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   10824:	4640      	mov	r0, r8
   10826:	9201      	str	r2, [sp, #4]
   10828:	f7ff fe8c 	bl	10544 <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
   1082c:	9801      	ldr	r0, [sp, #4]
   1082e:	e7b7      	b.n	107a0 <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   10830:	4640      	mov	r0, r8
   10832:	f7ff fe87 	bl	10544 <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
   10836:	f7ff fd59 	bl	102ec <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   1083a:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   1083e:	331c      	adds	r3, #28
   10840:	031f      	lsls	r7, r3, #12
   10842:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
   10844:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   10846:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   10848:	68e9      	ldr	r1, [r5, #12]
   1084a:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   1084c:	6928      	ldr	r0, [r5, #16]
   1084e:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   10850:	696a      	ldr	r2, [r5, #20]
   10852:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   10854:	69ab      	ldr	r3, [r5, #24]
   10856:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   10858:	69ec      	ldr	r4, [r5, #28]
   1085a:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   1085c:	6a29      	ldr	r1, [r5, #32]
   1085e:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
   10860:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
   10862:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
   10864:	f7ff fd46 	bl	102f4 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   10868:	4630      	mov	r0, r6
   1086a:	e799      	b.n	107a0 <am_hal_uart_power_control+0x14>
   1086c:	01ea9e06 	.word	0x01ea9e06

00010870 <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10870:	6803      	ldr	r3, [r0, #0]
   10872:	4a69      	ldr	r2, [pc, #420]	; (10a18 <am_hal_uart_configure+0x1a8>)
   10874:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   10878:	4594      	cmp	ip, r2
   1087a:	d001      	beq.n	10880 <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1087c:	2002      	movs	r0, #2
   1087e:	4770      	bx	lr
{
   10880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
   10884:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
   10886:	b084      	sub	sp, #16
   10888:	460d      	mov	r5, r1
   1088a:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   1088c:	f7ff fd2e 	bl	102ec <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
   10890:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
   10894:	311c      	adds	r1, #28
   10896:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
   10898:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
   1089a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1089c:	f040 0208 	orr.w	r2, r0, #8
   108a0:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
   108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   108a4:	f043 0610 	orr.w	r6, r3, #16
   108a8:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
   108aa:	9801      	ldr	r0, [sp, #4]
   108ac:	f7ff fd22 	bl	102f4 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   108b0:	f7ff fd1c 	bl	102ec <am_hal_interrupt_master_disable>
   108b4:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
   108b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
   108b8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
   108bc:	f020 0201 	bic.w	r2, r0, #1
   108c0:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
   108c2:	9802      	ldr	r0, [sp, #8]
   108c4:	f7ff fd16 	bl	102f4 <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   108ca:	f3c3 1802 	ubfx	r8, r3, #4, #3
   108ce:	f108 36ff 	add.w	r6, r8, #4294967295
   108d2:	2e03      	cmp	r6, #3
   108d4:	d846      	bhi.n	10964 <am_hal_uart_configure+0xf4>
   108d6:	e8df f006 	tbb	[pc, r6]
   108da:	020e      	.short	0x020e
   108dc:	1114      	.short	0x1114
   108de:	494f      	ldr	r1, [pc, #316]	; (10a1c <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
   108e0:	484f      	ldr	r0, [pc, #316]	; (10a20 <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   108e2:	682a      	ldr	r2, [r5, #0]
   108e4:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   108e6:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
   108ea:	b96b      	cbnz	r3, 10908 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   108ec:	484d      	ldr	r0, [pc, #308]	; (10a24 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
   108ee:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
   108f0:	b004      	add	sp, #16
   108f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   108f6:	494c      	ldr	r1, [pc, #304]	; (10a28 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
   108f8:	484c      	ldr	r0, [pc, #304]	; (10a2c <am_hal_uart_configure+0x1bc>)
   108fa:	e7f2      	b.n	108e2 <am_hal_uart_configure+0x72>
   108fc:	494c      	ldr	r1, [pc, #304]	; (10a30 <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
   108fe:	484d      	ldr	r0, [pc, #308]	; (10a34 <am_hal_uart_configure+0x1c4>)
   10900:	e7ef      	b.n	108e2 <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
   10902:	494d      	ldr	r1, [pc, #308]	; (10a38 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
   10904:	484d      	ldr	r0, [pc, #308]	; (10a3c <am_hal_uart_configure+0x1cc>)
   10906:	e7ec      	b.n	108e2 <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   10908:	fbb1 f1f6 	udiv	r1, r1, r6
   1090c:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   10910:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   10912:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   10916:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   10918:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   1091c:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
   1091e:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
   10920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10922:	6929      	ldr	r1, [r5, #16]
   10924:	430b      	orrs	r3, r1
   10926:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
   10928:	696a      	ldr	r2, [r5, #20]
   1092a:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   1092c:	686e      	ldr	r6, [r5, #4]
   1092e:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
   10930:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   10932:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
   10934:	f046 0310 	orr.w	r3, r6, #16
   10938:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
   1093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   1093c:	f7ff fcd6 	bl	102ec <am_hal_interrupt_master_disable>
   10940:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
   10942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10944:	f442 7640 	orr.w	r6, r2, #768	; 0x300
   10948:	f046 0001 	orr.w	r0, r6, #1
   1094c:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
   1094e:	9803      	ldr	r0, [sp, #12]
   10950:	f7ff fcd0 	bl	102f4 <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10954:	6827      	ldr	r7, [r4, #0]
   10956:	4930      	ldr	r1, [pc, #192]	; (10a18 <am_hal_uart_configure+0x1a8>)
   10958:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
   1095c:	428e      	cmp	r6, r1
   1095e:	d005      	beq.n	1096c <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
   10960:	2000      	movs	r0, #0
   10962:	e7c5      	b.n	108f0 <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
   10964:	2600      	movs	r6, #0
   10966:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   10968:	4835      	ldr	r0, [pc, #212]	; (10a40 <am_hal_uart_configure+0x1d0>)
   1096a:	e7c1      	b.n	108f0 <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
   1096c:	69a9      	ldr	r1, [r5, #24]
   1096e:	6a2f      	ldr	r7, [r5, #32]
   10970:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
   10974:	b109      	cbz	r1, 1097a <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
   10976:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
   10978:	b9f3      	cbnz	r3, 109b8 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   1097a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1097c:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   10980:	331c      	adds	r3, #28
   10982:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
   10984:	f04f 0e00 	mov.w	lr, #0
   10988:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   1098c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   1098e:	f022 0020 	bic.w	r0, r2, #32
   10992:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
   10994:	b117      	cbz	r7, 1099c <am_hal_uart_configure+0x12c>
   10996:	f1b8 0f00 	cmp.w	r8, #0
   1099a:	d123      	bne.n	109e4 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1099c:	6827      	ldr	r7, [r4, #0]
   1099e:	491e      	ldr	r1, [pc, #120]	; (10a18 <am_hal_uart_configure+0x1a8>)
   109a0:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
   109a4:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   109a6:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
   109a8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   109ac:	d1d8      	bne.n	10960 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
   109ae:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   109b0:	f024 0350 	bic.w	r3, r4, #80	; 0x50
   109b4:	63b3      	str	r3, [r6, #56]	; 0x38
   109b6:	e79b      	b.n	108f0 <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
   109b8:	2201      	movs	r2, #1
   109ba:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   109be:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   109c2:	f000 fdeb 	bl	1159c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   109c6:	6821      	ldr	r1, [r4, #0]
   109c8:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
   109cc:	42b5      	cmp	r5, r6
   109ce:	d1c7      	bne.n	10960 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
   109d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   109d2:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
   109d6:	361c      	adds	r6, #28
   109d8:	0336      	lsls	r6, r6, #12
   109da:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   109dc:	f042 0020 	orr.w	r0, r2, #32
   109e0:	63b0      	str	r0, [r6, #56]	; 0x38
   109e2:	e7d7      	b.n	10994 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
   109e4:	2201      	movs	r2, #1
   109e6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   109ea:	f104 0048 	add.w	r0, r4, #72	; 0x48
   109ee:	4643      	mov	r3, r8
   109f0:	4639      	mov	r1, r7
   109f2:	f000 fdd3 	bl	1159c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   109f6:	6826      	ldr	r6, [r4, #0]
   109f8:	4a07      	ldr	r2, [pc, #28]	; (10a18 <am_hal_uart_configure+0x1a8>)
   109fa:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
   109fe:	4290      	cmp	r0, r2
   10a00:	d1ae      	bne.n	10960 <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
   10a02:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10a04:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
   10a08:	311c      	adds	r1, #28
   10a0a:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
   10a0c:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
   10a0e:	6bac      	ldr	r4, [r5, #56]	; 0x38
   10a10:	f044 0350 	orr.w	r3, r4, #80	; 0x50
   10a14:	63ab      	str	r3, [r5, #56]	; 0x38
   10a16:	e76b      	b.n	108f0 <am_hal_uart_configure+0x80>
   10a18:	01ea9e06 	.word	0x01ea9e06
   10a1c:	2dc6c000 	.word	0x2dc6c000
   10a20:	00b71b00 	.word	0x00b71b00
   10a24:	08000003 	.word	0x08000003
   10a28:	5b8d8000 	.word	0x5b8d8000
   10a2c:	016e3600 	.word	0x016e3600
   10a30:	0b71b000 	.word	0x0b71b000
   10a34:	002dc6c0 	.word	0x002dc6c0
   10a38:	16e36000 	.word	0x16e36000
   10a3c:	005b8d80 	.word	0x005b8d80
   10a40:	08000002 	.word	0x08000002

00010a44 <am_hal_uart_transfer>:
{
   10a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
   10a48:	680e      	ldr	r6, [r1, #0]
{
   10a4a:	b091      	sub	sp, #68	; 0x44
   10a4c:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
   10a4e:	b14e      	cbz	r6, 10a64 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
   10a50:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
   10a52:	bf18      	it	ne
   10a54:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
   10a58:	f000 80f6 	beq.w	10c48 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
   10a5c:	4658      	mov	r0, fp
   10a5e:	b011      	add	sp, #68	; 0x44
   10a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
   10a64:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   10a68:	684c      	ldr	r4, [r1, #4]
   10a6a:	9401      	str	r4, [sp, #4]
   10a6c:	688d      	ldr	r5, [r1, #8]
   10a6e:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
   10a72:	f1bb 0f00 	cmp.w	fp, #0
   10a76:	f000 8107 	beq.w	10c88 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10a7a:	2d00      	cmp	r5, #0
   10a7c:	f000 8393 	beq.w	111a6 <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10a80:	2800      	cmp	r0, #0
   10a82:	f000 80df 	beq.w	10c44 <am_hal_uart_transfer+0x200>
   10a86:	6807      	ldr	r7, [r0, #0]
   10a88:	497e      	ldr	r1, [pc, #504]	; (10c84 <am_hal_uart_transfer+0x240>)
   10a8a:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
   10a8e:	4589      	cmp	r9, r1
   10a90:	d00a      	beq.n	10aa8 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
   10a92:	f1ba 0f00 	cmp.w	sl, #0
   10a96:	d001      	beq.n	10a9c <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
   10a98:	f8ca 6000 	str.w	r6, [sl]
   10a9c:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
   10aa0:	4658      	mov	r0, fp
   10aa2:	b011      	add	sp, #68	; 0x44
   10aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   10aa8:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10aaa:	4637      	mov	r7, r6
   10aac:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   10aae:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
   10ab0:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
   10ab4:	2a00      	cmp	r2, #0
   10ab6:	f040 822c 	bne.w	10f12 <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
   10aba:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
   10abe:	2d00      	cmp	r5, #0
   10ac0:	f000 80a1 	beq.w	10c06 <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ac4:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
   10ac8:	341c      	adds	r4, #28
   10aca:	0322      	lsls	r2, r4, #12
   10acc:	6990      	ldr	r0, [r2, #24]
   10ace:	f3c0 1440 	ubfx	r4, r0, #5, #1
   10ad2:	2c00      	cmp	r4, #0
   10ad4:	f040 80a3 	bne.w	10c1e <am_hal_uart_transfer+0x1da>
   10ad8:	1e6b      	subs	r3, r5, #1
   10ada:	f013 0e07 	ands.w	lr, r3, #7
   10ade:	f101 3cff 	add.w	ip, r1, #4294967295
   10ae2:	d048      	beq.n	10b76 <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ae4:	780c      	ldrb	r4, [r1, #0]
   10ae6:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ae8:	6993      	ldr	r3, [r2, #24]
   10aea:	069b      	lsls	r3, r3, #26
   10aec:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
   10aee:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10af2:	f100 8085 	bmi.w	10c00 <am_hal_uart_transfer+0x1bc>
   10af6:	45a6      	cmp	lr, r4
   10af8:	d03d      	beq.n	10b76 <am_hal_uart_transfer+0x132>
   10afa:	f1be 0f02 	cmp.w	lr, #2
   10afe:	d032      	beq.n	10b66 <am_hal_uart_transfer+0x122>
   10b00:	f1be 0f03 	cmp.w	lr, #3
   10b04:	d027      	beq.n	10b56 <am_hal_uart_transfer+0x112>
   10b06:	f1be 0f04 	cmp.w	lr, #4
   10b0a:	d01c      	beq.n	10b46 <am_hal_uart_transfer+0x102>
   10b0c:	f1be 0f05 	cmp.w	lr, #5
   10b10:	d011      	beq.n	10b36 <am_hal_uart_transfer+0xf2>
   10b12:	f1be 0f06 	cmp.w	lr, #6
   10b16:	d006      	beq.n	10b26 <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b18:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10b1c:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b1e:	6990      	ldr	r0, [r2, #24]
   10b20:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b22:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b24:	d46c      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b26:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   10b2a:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b2c:	6991      	ldr	r1, [r2, #24]
   10b2e:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b30:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b34:	d464      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b36:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
   10b3a:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b3c:	6993      	ldr	r3, [r2, #24]
   10b3e:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b40:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b44:	d45c      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b46:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10b4a:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b4c:	6990      	ldr	r0, [r2, #24]
   10b4e:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b50:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b54:	d454      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b56:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   10b5a:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b5c:	6991      	ldr	r1, [r2, #24]
   10b5e:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b60:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b64:	d44c      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b66:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
   10b6a:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b6c:	6993      	ldr	r3, [r2, #24]
   10b6e:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b70:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b74:	d444      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b76:	3401      	adds	r4, #1
   10b78:	f89c 1001 	ldrb.w	r1, [ip, #1]
   10b7c:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
   10b7e:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b80:	4620      	mov	r0, r4
   10b82:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
   10b86:	f000 81c2 	beq.w	10f0e <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b8a:	6993      	ldr	r3, [r2, #24]
   10b8c:	0699      	lsls	r1, r3, #26
   10b8e:	d437      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b90:	f89e 1001 	ldrb.w	r1, [lr, #1]
   10b94:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b96:	6993      	ldr	r3, [r2, #24]
   10b98:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10b9a:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10b9e:	d42f      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ba0:	f89c 4003 	ldrb.w	r4, [ip, #3]
   10ba4:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ba6:	6991      	ldr	r1, [r2, #24]
   10ba8:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10baa:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bae:	d427      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bb0:	f89c 3004 	ldrb.w	r3, [ip, #4]
   10bb4:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bb6:	6991      	ldr	r1, [r2, #24]
   10bb8:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bba:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bbe:	d41f      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bc0:	f89c 4005 	ldrb.w	r4, [ip, #5]
   10bc4:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bc6:	6993      	ldr	r3, [r2, #24]
   10bc8:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bca:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bce:	d417      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bd0:	f89c 1006 	ldrb.w	r1, [ip, #6]
   10bd4:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bd6:	6993      	ldr	r3, [r2, #24]
   10bd8:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bda:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bde:	d40f      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10be0:	f89c 4007 	ldrb.w	r4, [ip, #7]
   10be4:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10be6:	6991      	ldr	r1, [r2, #24]
   10be8:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bea:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bee:	d407      	bmi.n	10c00 <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bf0:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
   10bf4:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bf6:	6991      	ldr	r1, [r2, #24]
   10bf8:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10bfa:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10bfe:	d5ba      	bpl.n	10b76 <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
   10c00:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
   10c02:	4426      	add	r6, r4
        if (ui32RemainingBytes)
   10c04:	d10b      	bne.n	10c1e <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
   10c06:	f1ba 0f00 	cmp.w	sl, #0
   10c0a:	f000 817d 	beq.w	10f08 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
   10c0e:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
   10c12:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
   10c14:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
   10c18:	b011      	add	sp, #68	; 0x44
   10c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
   10c1e:	2001      	movs	r0, #1
   10c20:	f7ff f8ee 	bl	fe00 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
   10c24:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
   10c28:	bf18      	it	ne
   10c2a:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10c2c:	45bb      	cmp	fp, r7
   10c2e:	d9ea      	bls.n	10c06 <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c30:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
   10c34:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c36:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
   10c3a:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
   10c3c:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c3e:	f47f af28 	bne.w	10a92 <am_hal_uart_transfer+0x4e>
   10c42:	e735      	b.n	10ab0 <am_hal_uart_transfer+0x6c>
   10c44:	4606      	mov	r6, r0
   10c46:	e724      	b.n	10a92 <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
   10c48:	684b      	ldr	r3, [r1, #4]
   10c4a:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   10c4e:	688c      	ldr	r4, [r1, #8]
   10c50:	690f      	ldr	r7, [r1, #16]
   10c52:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
   10c54:	f1bb 0f00 	cmp.w	fp, #0
   10c58:	f000 80c9 	beq.w	10dee <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10c5c:	2c00      	cmp	r4, #0
   10c5e:	f000 8150 	beq.w	10f02 <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c62:	b130      	cbz	r0, 10c72 <am_hal_uart_transfer+0x22e>
   10c64:	6800      	ldr	r0, [r0, #0]
   10c66:	4a07      	ldr	r2, [pc, #28]	; (10c84 <am_hal_uart_transfer+0x240>)
   10c68:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
   10c6c:	4291      	cmp	r1, r2
   10c6e:	f000 8186 	beq.w	10f7e <am_hal_uart_transfer+0x53a>
   10c72:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
   10c74:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
   10c78:	2f00      	cmp	r7, #0
   10c7a:	f43f aeef 	beq.w	10a5c <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
   10c7e:	603d      	str	r5, [r7, #0]
   10c80:	e6ec      	b.n	10a5c <am_hal_uart_transfer+0x18>
   10c82:	bf00      	nop
   10c84:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10c88:	2800      	cmp	r0, #0
   10c8a:	f43f af07 	beq.w	10a9c <am_hal_uart_transfer+0x58>
   10c8e:	6807      	ldr	r7, [r0, #0]
   10c90:	4cac      	ldr	r4, [pc, #688]	; (10f44 <am_hal_uart_transfer+0x500>)
   10c92:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
   10c96:	42a3      	cmp	r3, r4
   10c98:	f47f af00 	bne.w	10a9c <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
   10c9c:	f1ba 0f00 	cmp.w	sl, #0
   10ca0:	d001      	beq.n	10ca6 <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
   10ca2:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
   10ca6:	2d00      	cmp	r5, #0
   10ca8:	f000 812e 	beq.w	10f08 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
   10cac:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
   10cb0:	2c00      	cmp	r4, #0
   10cb2:	f040 8290 	bne.w	111d6 <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10cb6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   10cba:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
   10cbe:	311c      	adds	r1, #28
   10cc0:	030a      	lsls	r2, r1, #12
   10cc2:	6996      	ldr	r6, [r2, #24]
   10cc4:	f3c6 1740 	ubfx	r7, r6, #5, #1
   10cc8:	2f00      	cmp	r7, #0
   10cca:	f040 8089 	bne.w	10de0 <am_hal_uart_transfer+0x39c>
   10cce:	f105 38ff 	add.w	r8, r5, #4294967295
   10cd2:	9b01      	ldr	r3, [sp, #4]
   10cd4:	f018 0007 	ands.w	r0, r8, #7
   10cd8:	463c      	mov	r4, r7
   10cda:	f103 31ff 	add.w	r1, r3, #4294967295
   10cde:	d042      	beq.n	10d66 <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10ce0:	781e      	ldrb	r6, [r3, #0]
   10ce2:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10ce4:	6997      	ldr	r7, [r2, #24]
   10ce6:	4619      	mov	r1, r3
   10ce8:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10cea:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10cee:	d477      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
   10cf0:	42a0      	cmp	r0, r4
   10cf2:	d038      	beq.n	10d66 <am_hal_uart_transfer+0x322>
   10cf4:	2802      	cmp	r0, #2
   10cf6:	d02e      	beq.n	10d56 <am_hal_uart_transfer+0x312>
   10cf8:	2803      	cmp	r0, #3
   10cfa:	d024      	beq.n	10d46 <am_hal_uart_transfer+0x302>
   10cfc:	2804      	cmp	r0, #4
   10cfe:	d01a      	beq.n	10d36 <am_hal_uart_transfer+0x2f2>
   10d00:	2805      	cmp	r0, #5
   10d02:	d010      	beq.n	10d26 <am_hal_uart_transfer+0x2e2>
   10d04:	2806      	cmp	r0, #6
   10d06:	d006      	beq.n	10d16 <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10d0c:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d0e:	6990      	ldr	r0, [r2, #24]
   10d10:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d12:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d14:	d464      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d16:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   10d1a:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d1c:	6997      	ldr	r7, [r2, #24]
   10d1e:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d20:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d24:	d45c      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10d2a:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d2c:	6990      	ldr	r0, [r2, #24]
   10d2e:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d30:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d34:	d454      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d36:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   10d3a:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d3c:	6997      	ldr	r7, [r2, #24]
   10d3e:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d40:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d44:	d44c      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10d4a:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d4c:	6990      	ldr	r0, [r2, #24]
   10d4e:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d50:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d54:	d444      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d56:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   10d5a:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d5c:	6997      	ldr	r7, [r2, #24]
   10d5e:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d60:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d64:	d43c      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d66:	3401      	adds	r4, #1
   10d68:	784b      	ldrb	r3, [r1, #1]
   10d6a:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
   10d6c:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d6e:	4623      	mov	r3, r4
   10d70:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
   10d74:	d034      	beq.n	10de0 <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d76:	6996      	ldr	r6, [r2, #24]
   10d78:	06b6      	lsls	r6, r6, #26
   10d7a:	d431      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d7c:	7847      	ldrb	r7, [r0, #1]
   10d7e:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d80:	6990      	ldr	r0, [r2, #24]
   10d82:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d84:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d88:	d42a      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d8a:	78cc      	ldrb	r4, [r1, #3]
   10d8c:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d8e:	6996      	ldr	r6, [r2, #24]
   10d90:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d92:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d96:	d423      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10d98:	790f      	ldrb	r7, [r1, #4]
   10d9a:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10d9c:	6990      	ldr	r0, [r2, #24]
   10d9e:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10da0:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10da4:	d41c      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10da6:	794c      	ldrb	r4, [r1, #5]
   10da8:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10daa:	6996      	ldr	r6, [r2, #24]
   10dac:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dae:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10db2:	d415      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10db4:	798f      	ldrb	r7, [r1, #6]
   10db6:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10db8:	6990      	ldr	r0, [r2, #24]
   10dba:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dbc:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10dc0:	d40e      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dc2:	79cc      	ldrb	r4, [r1, #7]
   10dc4:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10dc6:	6996      	ldr	r6, [r2, #24]
   10dc8:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dca:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10dce:	d407      	bmi.n	10de0 <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dd0:	f811 7f08 	ldrb.w	r7, [r1, #8]!
   10dd4:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10dd6:	6990      	ldr	r0, [r2, #24]
   10dd8:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10dda:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10dde:	d5c2      	bpl.n	10d66 <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
   10de0:	f1ba 0f00 	cmp.w	sl, #0
   10de4:	f000 8090 	beq.w	10f08 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
   10de8:	f8ca 4000 	str.w	r4, [sl]
   10dec:	e636      	b.n	10a5c <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10dee:	2800      	cmp	r0, #0
   10df0:	f43f ae54 	beq.w	10a9c <am_hal_uart_transfer+0x58>
   10df4:	6805      	ldr	r5, [r0, #0]
   10df6:	4e53      	ldr	r6, [pc, #332]	; (10f44 <am_hal_uart_transfer+0x500>)
   10df8:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
   10dfc:	45b4      	cmp	ip, r6
   10dfe:	f47f ae4d 	bne.w	10a9c <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
   10e02:	b10f      	cbz	r7, 10e08 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
   10e04:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
   10e08:	2c00      	cmp	r4, #0
   10e0a:	d07d      	beq.n	10f08 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
   10e0c:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
   10e10:	2800      	cmp	r0, #0
   10e12:	f040 8213 	bne.w	1123c <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e16:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10e1a:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
   10e1e:	311c      	adds	r1, #28
   10e20:	0309      	lsls	r1, r1, #12
   10e22:	698a      	ldr	r2, [r1, #24]
   10e24:	f3c2 1500 	ubfx	r5, r2, #4, #1
   10e28:	2d00      	cmp	r5, #0
   10e2a:	f040 8287 	bne.w	1133c <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
   10e2e:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10e30:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
   10e34:	f040 81cc 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
   10e38:	1e66      	subs	r6, r4, #1
   10e3a:	f016 0203 	ands.w	r2, r6, #3
   10e3e:	4655      	mov	r5, sl
   10e40:	f109 30ff 	add.w	r0, r9, #4294967295
   10e44:	d02b      	beq.n	10e9e <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e46:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e4a:	698b      	ldr	r3, [r1, #24]
   10e4c:	06de      	lsls	r6, r3, #27
   10e4e:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e50:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e54:	f53f af10 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10e58:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10e5a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   10e5e:	f040 81b7 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
   10e62:	42aa      	cmp	r2, r5
   10e64:	d01b      	beq.n	10e9e <am_hal_uart_transfer+0x45a>
   10e66:	2a02      	cmp	r2, #2
   10e68:	d00c      	beq.n	10e84 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e6a:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e6e:	698e      	ldr	r6, [r1, #24]
   10e70:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e72:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e76:	f53f aeff 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10e7a:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10e7c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   10e80:	f040 81a6 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e84:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e88:	698a      	ldr	r2, [r1, #24]
   10e8a:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e8c:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10e90:	f53f aef2 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10e94:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10e96:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   10e9a:	f040 8199 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10e9e:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
   10ea0:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ea2:	7043      	strb	r3, [r0, #1]
   10ea4:	f100 0601 	add.w	r6, r0, #1
   10ea8:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
   10eaa:	f43f aee5 	beq.w	10c78 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10eae:	698a      	ldr	r2, [r1, #24]
   10eb0:	06d2      	lsls	r2, r2, #27
   10eb2:	f53f aee1 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10eb6:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10eb8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   10ebc:	f040 8188 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ec0:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10ec2:	698e      	ldr	r6, [r1, #24]
   10ec4:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ec6:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10eca:	f53f aed5 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10ece:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10ed0:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   10ed4:	f040 817c 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ed8:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10eda:	698e      	ldr	r6, [r1, #24]
   10edc:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ede:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10ee2:	f53f aec9 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
   10ee6:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10ee8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   10eec:	f040 8170 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ef0:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10ef4:	698e      	ldr	r6, [r1, #24]
   10ef6:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ef8:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10efc:	f53f aebc 	bmi.w	10c78 <am_hal_uart_transfer+0x234>
   10f00:	e7c8      	b.n	10e94 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   10f02:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
   10f04:	b107      	cbz	r7, 10f08 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
   10f06:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
   10f08:	f04f 0b00 	mov.w	fp, #0
   10f0c:	e5a6      	b.n	10a5c <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
   10f0e:	442e      	add	r6, r5
   10f10:	e679      	b.n	10c06 <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
   10f12:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
   10f16:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
   10f1a:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
   10f1c:	42ac      	cmp	r4, r5
   10f1e:	bf28      	it	cs
   10f20:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   10f22:	4622      	mov	r2, r4
   10f24:	9802      	ldr	r0, [sp, #8]
   10f26:	f000 fb45 	bl	115b4 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
   10f2a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10f2e:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
   10f30:	f7ff f9dc 	bl	102ec <am_hal_interrupt_master_disable>
   10f34:	9903      	ldr	r1, [sp, #12]
   10f36:	9008      	str	r0, [sp, #32]
   10f38:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
   10f3c:	321c      	adds	r2, #28
   10f3e:	0313      	lsls	r3, r2, #12
   10f40:	9303      	str	r3, [sp, #12]
   10f42:	e010      	b.n	10f66 <am_hal_uart_transfer+0x522>
   10f44:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   10f48:	f000 fc38 	bl	117bc <am_hal_queue_item_get>
   10f4c:	b198      	cbz	r0, 10f76 <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   10f4e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   10f52:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
   10f56:	331c      	adds	r3, #28
   10f58:	0318      	lsls	r0, r3, #12
   10f5a:	6981      	ldr	r1, [r0, #24]
   10f5c:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   10f5e:	bf5c      	itt	pl
   10f60:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   10f64:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   10f66:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   10f68:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   10f6a:	699b      	ldr	r3, [r3, #24]
   10f6c:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   10f6e:	f04f 0201 	mov.w	r2, #1
   10f72:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   10f74:	d5e8      	bpl.n	10f48 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
   10f76:	9808      	ldr	r0, [sp, #32]
   10f78:	f7ff f9bc 	bl	102f4 <am_hal_interrupt_master_set>
   10f7c:	e640      	b.n	10c00 <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10f7e:	2600      	movs	r6, #0
   10f80:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   10f82:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   10f86:	9101      	str	r1, [sp, #4]
   10f88:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   10f8a:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
   10f8c:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
   10f90:	2800      	cmp	r0, #0
   10f92:	f040 8089 	bne.w	110a8 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
   10f96:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
   10f9a:	2c00      	cmp	r4, #0
   10f9c:	d0b2      	beq.n	10f04 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10f9e:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
   10fa2:	311c      	adds	r1, #28
   10fa4:	030a      	lsls	r2, r1, #12
   10fa6:	6993      	ldr	r3, [r2, #24]
   10fa8:	06d8      	lsls	r0, r3, #27
   10faa:	d466      	bmi.n	1107a <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
   10fac:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10fae:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
   10fb2:	f040 810d 	bne.w	111d0 <am_hal_uart_transfer+0x78c>
   10fb6:	f104 3eff 	add.w	lr, r4, #4294967295
   10fba:	f01e 0e03 	ands.w	lr, lr, #3
   10fbe:	f109 30ff 	add.w	r0, r9, #4294967295
   10fc2:	d029      	beq.n	11018 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10fc4:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10fc8:	6991      	ldr	r1, [r2, #24]
   10fca:	06c9      	lsls	r1, r1, #27
   10fcc:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
   10fce:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10fd2:	d44e      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   10fd4:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10fd6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   10fda:	f040 80e0 	bne.w	1119e <am_hal_uart_transfer+0x75a>
   10fde:	459e      	cmp	lr, r3
   10fe0:	d01a      	beq.n	11018 <am_hal_uart_transfer+0x5d4>
   10fe2:	f1be 0f02 	cmp.w	lr, #2
   10fe6:	d00b      	beq.n	11000 <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   10fe8:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10fec:	6991      	ldr	r1, [r2, #24]
   10fee:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   10ff0:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   10ff4:	d43d      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   10ff6:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   10ff8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   10ffc:	f040 80cf 	bne.w	1119e <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11000:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11004:	6991      	ldr	r1, [r2, #24]
   11006:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11008:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1100c:	d431      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1100e:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11010:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11014:	f040 80c3 	bne.w	1119e <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11018:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
   1101a:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
   1101c:	7041      	strb	r1, [r0, #1]
   1101e:	469e      	mov	lr, r3
   11020:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
   11024:	d025      	beq.n	11072 <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11026:	6991      	ldr	r1, [r2, #24]
   11028:	06c9      	lsls	r1, r1, #27
   1102a:	d422      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1102c:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1102e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11032:	f040 80b4 	bne.w	1119e <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11036:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1103a:	6991      	ldr	r1, [r2, #24]
   1103c:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1103e:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11042:	d416      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11044:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11046:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1104a:	f040 80a8 	bne.w	1119e <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1104e:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11050:	6991      	ldr	r1, [r2, #24]
   11052:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11054:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11058:	d40b      	bmi.n	11072 <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1105a:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1105c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11060:	f040 809d 	bne.w	1119e <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11064:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11068:	6991      	ldr	r1, [r2, #24]
   1106a:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1106c:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11070:	d5cd      	bpl.n	1100e <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
   11072:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
   11074:	441d      	add	r5, r3
        if (ui32RemainingBytes)
   11076:	f43f af45 	beq.w	10f04 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
   1107a:	2001      	movs	r0, #1
   1107c:	f7fe fec0 	bl	fe00 <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
   11080:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
   11084:	bf18      	it	ne
   11086:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   11088:	45b3      	cmp	fp, r6
   1108a:	f67f af3b 	bls.w	10f04 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1108e:	f8d8 0000 	ldr.w	r0, [r8]
   11092:	9a01      	ldr	r2, [sp, #4]
   11094:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
   11098:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
   1109a:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1109e:	f43f af75 	beq.w	10f8c <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
   110a2:	f04f 0b02 	mov.w	fp, #2
   110a6:	e5e7      	b.n	10c78 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
   110a8:	f7ff f920 	bl	102ec <am_hal_interrupt_master_disable>
   110ac:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   110b0:	9007      	str	r0, [sp, #28]
   110b2:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   110b6:	301c      	adds	r0, #28
    uint32_t i = 0;
   110b8:	f8cd a00c 	str.w	sl, [sp, #12]
   110bc:	0303      	lsls	r3, r0, #12
   110be:	f10d 0c20 	add.w	ip, sp, #32
   110c2:	2200      	movs	r2, #0
   110c4:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   110c6:	699c      	ldr	r4, [r3, #24]
   110c8:	06e1      	lsls	r1, r4, #27
   110ca:	d45a      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   110cc:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   110ce:	f410 6f70 	tst.w	r0, #3840	; 0xf00
   110d2:	d17a      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   110d4:	46e6      	mov	lr, ip
   110d6:	3201      	adds	r2, #1
   110d8:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   110dc:	6999      	ldr	r1, [r3, #24]
   110de:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   110e0:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   110e2:	d44e      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   110e4:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   110e6:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   110ea:	d16e      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   110ec:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   110f0:	6999      	ldr	r1, [r3, #24]
   110f2:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   110f4:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   110f8:	d443      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   110fa:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   110fc:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11100:	d163      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11102:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11106:	699c      	ldr	r4, [r3, #24]
   11108:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1110a:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1110e:	d438      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11110:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11112:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11116:	d158      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11118:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1111c:	699c      	ldr	r4, [r3, #24]
   1111e:	06e4      	lsls	r4, r4, #27
   11120:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
   11124:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11128:	d42b      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1112a:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1112c:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11130:	d14b      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11132:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11136:	6999      	ldr	r1, [r3, #24]
   11138:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1113a:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1113e:	d420      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11140:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11142:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   11146:	d140      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11148:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1114c:	6999      	ldr	r1, [r3, #24]
   1114e:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11150:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11154:	d415      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11156:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11158:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1115c:	d135      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1115e:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11162:	699c      	ldr	r4, [r3, #24]
   11164:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   11166:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1116a:	d40a      	bmi.n	11182 <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1116c:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1116e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   11172:	d12a      	bne.n	111ca <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11174:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
   11176:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
   11178:	f88e 1006 	strb.w	r1, [lr, #6]
   1117c:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
   11180:	d1a1      	bne.n	110c6 <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   11182:	a908      	add	r1, sp, #32
   11184:	9802      	ldr	r0, [sp, #8]
   11186:	4654      	mov	r4, sl
   11188:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1118c:	f000 fa12 	bl	115b4 <am_hal_queue_item_add>
   11190:	b958      	cbnz	r0, 111aa <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
   11192:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 11348 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
   11196:	9807      	ldr	r0, [sp, #28]
   11198:	f7ff f8ac 	bl	102f4 <am_hal_interrupt_master_set>
   1119c:	e56c      	b.n	10c78 <am_hal_uart_transfer+0x234>
   1119e:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   111a0:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   111a4:	e568      	b.n	10c78 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
   111a6:	462e      	mov	r6, r5
   111a8:	e52d      	b.n	10c06 <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
   111aa:	9807      	ldr	r0, [sp, #28]
   111ac:	f7ff f8a2 	bl	102f4 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
   111b0:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   111b4:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
   111b6:	42a3      	cmp	r3, r4
   111b8:	bf28      	it	cs
   111ba:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   111bc:	461a      	mov	r2, r3
   111be:	4649      	mov	r1, r9
   111c0:	9303      	str	r3, [sp, #12]
   111c2:	f000 fafb 	bl	117bc <am_hal_queue_item_get>
   111c6:	9b03      	ldr	r3, [sp, #12]
   111c8:	e753      	b.n	11072 <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   111ca:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   111ce:	e7e2      	b.n	11196 <am_hal_uart_transfer+0x752>
   111d0:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   111d4:	e550      	b.n	10c78 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
   111d6:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
   111da:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   111de:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
   111e0:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   111e2:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
   111e6:	bf28      	it	cs
   111e8:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   111ea:	9901      	ldr	r1, [sp, #4]
   111ec:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
   111ee:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
   111f0:	f000 f9e0 	bl	115b4 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
   111f4:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
   111f8:	f7ff f878 	bl	102ec <am_hal_interrupt_master_disable>
   111fc:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
   11200:	331c      	adds	r3, #28
   11202:	031d      	lsls	r5, r3, #12
   11204:	9005      	str	r0, [sp, #20]
   11206:	e00e      	b.n	11226 <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   11208:	f000 fad8 	bl	117bc <am_hal_queue_item_get>
   1120c:	b190      	cbz	r0, 11234 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   1120e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   11212:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
   11216:	321c      	adds	r2, #28
   11218:	0311      	lsls	r1, r2, #12
   1121a:	698e      	ldr	r6, [r1, #24]
   1121c:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   1121e:	bf5c      	itt	pl
   11220:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   11224:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   11226:	69af      	ldr	r7, [r5, #24]
   11228:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   1122a:	f04f 0201 	mov.w	r2, #1
   1122e:	a908      	add	r1, sp, #32
   11230:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   11232:	d5e9      	bpl.n	11208 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
   11234:	9805      	ldr	r0, [sp, #20]
   11236:	f7ff f85d 	bl	102f4 <am_hal_interrupt_master_set>
   1123a:	e5d1      	b.n	10de0 <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
   1123c:	f7ff f856 	bl	102ec <am_hal_interrupt_master_disable>
   11240:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   11244:	9006      	str	r0, [sp, #24]
   11246:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
   1124a:	301c      	adds	r0, #28
   1124c:	0301      	lsls	r1, r0, #12
   1124e:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
   11250:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11252:	698e      	ldr	r6, [r1, #24]
   11254:	06f0      	lsls	r0, r6, #27
   11256:	d455      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11258:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1125a:	f415 6f70 	tst.w	r5, #3840	; 0xf00
   1125e:	d16f      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11260:	4618      	mov	r0, r3
   11262:	3201      	adds	r2, #1
   11264:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11268:	698e      	ldr	r6, [r1, #24]
   1126a:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1126c:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1126e:	d449      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11270:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11272:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   11276:	d163      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11278:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1127a:	698e      	ldr	r6, [r1, #24]
   1127c:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   1127e:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11282:	d43f      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   11284:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11286:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1128a:	d159      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1128c:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1128e:	f8d1 e018 	ldr.w	lr, [r1, #24]
   11292:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
   11296:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1129a:	d133      	bne.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   1129c:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1129e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   112a2:	d14d      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112a4:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112a6:	698e      	ldr	r6, [r1, #24]
   112a8:	06f6      	lsls	r6, r6, #27
   112aa:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
   112ae:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112b2:	d427      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   112b4:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   112b6:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   112ba:	d141      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112bc:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112be:	698b      	ldr	r3, [r1, #24]
   112c0:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   112c2:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112c6:	d41d      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   112c8:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   112ca:	f416 6f70 	tst.w	r6, #3840	; 0xf00
   112ce:	d137      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112d0:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112d2:	698b      	ldr	r3, [r1, #24]
   112d4:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   112d6:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112da:	d413      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   112dc:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   112de:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   112e2:	d12d      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112e4:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112e6:	698e      	ldr	r6, [r1, #24]
   112e8:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   112ea:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
   112ee:	d409      	bmi.n	11304 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
   112f0:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   112f2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   112f6:	d123      	bne.n	11340 <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
   112f8:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
   112fa:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
   112fc:	7183      	strb	r3, [r0, #6]
   112fe:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
   11302:	d1a6      	bne.n	11252 <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   11304:	f108 0a48 	add.w	sl, r8, #72	; 0x48
   11308:	a908      	add	r1, sp, #32
   1130a:	4650      	mov	r0, sl
   1130c:	f000 f952 	bl	115b4 <am_hal_queue_item_add>
   11310:	b930      	cbnz	r0, 11320 <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
   11312:	f8df b034 	ldr.w	fp, [pc, #52]	; 11348 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
   11316:	9806      	ldr	r0, [sp, #24]
   11318:	f7fe ffec 	bl	102f4 <am_hal_interrupt_master_set>
   1131c:	f7ff bb9e 	b.w	10a5c <am_hal_uart_transfer+0x18>
   11320:	9806      	ldr	r0, [sp, #24]
   11322:	f7fe ffe7 	bl	102f4 <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
   11326:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
   1132a:	42a5      	cmp	r5, r4
   1132c:	bf28      	it	cs
   1132e:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
   11330:	4649      	mov	r1, r9
   11332:	4650      	mov	r0, sl
   11334:	462a      	mov	r2, r5
   11336:	f000 fa41 	bl	117bc <am_hal_queue_item_get>
   1133a:	e49d      	b.n	10c78 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
   1133c:	4605      	mov	r5, r0
   1133e:	e49b      	b.n	10c78 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   11340:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
   11344:	e7e7      	b.n	11316 <am_hal_uart_transfer+0x8d2>
   11346:	bf00      	nop
   11348:	08000001 	.word	0x08000001

0001134c <am_hal_uart_interrupt_service>:
{
   1134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11350:	6803      	ldr	r3, [r0, #0]
   11352:	4c6f      	ldr	r4, [pc, #444]	; (11510 <am_hal_uart_interrupt_service+0x1c4>)
   11354:	f023 457e 	bic.w	r5, r3, #4261412864	; 0xfe000000
   11358:	42a5      	cmp	r5, r4
{
   1135a:	b08a      	sub	sp, #40	; 0x28
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1135c:	d004      	beq.n	11368 <am_hal_uart_interrupt_service+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1135e:	2702      	movs	r7, #2
} // am_hal_uart_interrupt_service()
   11360:	4638      	mov	r0, r7
   11362:	b00a      	add	sp, #40	; 0x28
   11364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ui32Status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) &&
   11368:	f011 0f50 	tst.w	r1, #80	; 0x50
   1136c:	4615      	mov	r5, r2
   1136e:	460e      	mov	r6, r1
   11370:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   11372:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if ((ui32Status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) &&
   11374:	d003      	beq.n	1137e <am_hal_uart_interrupt_service+0x32>
   11376:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   1137a:	2800      	cmp	r0, #0
   1137c:	d146      	bne.n	1140c <am_hal_uart_interrupt_service+0xc0>
    if ((ui32Status & UART0_IES_TXRIS_Msk) && pState->bEnableTxQueue)
   1137e:	06b1      	lsls	r1, r6, #26
   11380:	d532      	bpl.n	113e8 <am_hal_uart_interrupt_service+0x9c>
   11382:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   11386:	b95e      	cbnz	r6, 113a0 <am_hal_uart_interrupt_service+0x54>
    if (pui32UartTxIdle == 0)
   11388:	2d00      	cmp	r5, #0
   1138a:	d03d      	beq.n	11408 <am_hal_uart_interrupt_service+0xbc>
    else if ( UARTn(ui32Module)->FR_b.BUSY == false )
   1138c:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
   11390:	321c      	adds	r2, #28
   11392:	0311      	lsls	r1, r2, #12
   11394:	698b      	ldr	r3, [r1, #24]
   11396:	0718      	lsls	r0, r3, #28
   11398:	d534      	bpl.n	11404 <am_hal_uart_interrupt_service+0xb8>
        *pui32UartTxIdle = false;
   1139a:	2700      	movs	r7, #0
   1139c:	602f      	str	r7, [r5, #0]
   1139e:	e7df      	b.n	11360 <am_hal_uart_interrupt_service+0x14>
    uint32_t ui32Module = pState->ui32Module;
   113a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    AM_CRITICAL_BEGIN
   113a2:	f7fe ffa3 	bl	102ec <am_hal_interrupt_master_disable>
   113a6:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
   113aa:	331c      	adds	r3, #28
   113ac:	031e      	lsls	r6, r3, #12
   113ae:	9002      	str	r0, [sp, #8]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   113b0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   113b4:	e00d      	b.n	113d2 <am_hal_uart_interrupt_service+0x86>
   113b6:	f000 fa01 	bl	117bc <am_hal_queue_item_get>
   113ba:	b190      	cbz	r0, 113e2 <am_hal_uart_interrupt_service+0x96>
        if ( UARTn(ui32Module)->FR_b.TXFF )
   113bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   113be:	f501 2380 	add.w	r3, r1, #262144	; 0x40000
   113c2:	331c      	adds	r3, #28
   113c4:	0318      	lsls	r0, r3, #12
   113c6:	6982      	ldr	r2, [r0, #24]
   113c8:	0691      	lsls	r1, r2, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
   113ca:	bf5c      	itt	pl
   113cc:	f89d 1003 	ldrbpl.w	r1, [sp, #3]
   113d0:	6001      	strpl	r1, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   113d2:	69b3      	ldr	r3, [r6, #24]
   113d4:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
   113d6:	f04f 0201 	mov.w	r2, #1
   113da:	f10d 0103 	add.w	r1, sp, #3
   113de:	4640      	mov	r0, r8
    while ( !UARTn(ui32Module)->FR_b.TXFF )
   113e0:	d5e9      	bpl.n	113b6 <am_hal_uart_interrupt_service+0x6a>
    AM_CRITICAL_END
   113e2:	9802      	ldr	r0, [sp, #8]
   113e4:	f7fe ff86 	bl	102f4 <am_hal_interrupt_master_set>
    if (pui32UartTxIdle == 0)
   113e8:	b175      	cbz	r5, 11408 <am_hal_uart_interrupt_service+0xbc>
    if (pState->bEnableTxQueue)
   113ea:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   113ee:	2800      	cmp	r0, #0
   113f0:	d0cc      	beq.n	1138c <am_hal_uart_interrupt_service+0x40>
        if ( am_hal_queue_empty(&(pState->sTxQueue) )   &&
   113f2:	6b64      	ldr	r4, [r4, #52]	; 0x34
   113f4:	b944      	cbnz	r4, 11408 <am_hal_uart_interrupt_service+0xbc>
            ( UARTn(ui32Module)->FR_b.BUSY == false ) )
   113f6:	f507 2680 	add.w	r6, r7, #262144	; 0x40000
   113fa:	361c      	adds	r6, #28
   113fc:	0337      	lsls	r7, r6, #12
   113fe:	69b8      	ldr	r0, [r7, #24]
        if ( am_hal_queue_empty(&(pState->sTxQueue) )   &&
   11400:	0704      	lsls	r4, r0, #28
   11402:	d401      	bmi.n	11408 <am_hal_uart_interrupt_service+0xbc>
            *pui32UartTxIdle = true;
   11404:	2201      	movs	r2, #1
   11406:	602a      	str	r2, [r5, #0]
    return AM_HAL_STATUS_SUCCESS;
   11408:	2700      	movs	r7, #0
   1140a:	e7a9      	b.n	11360 <am_hal_uart_interrupt_service+0x14>
    AM_CRITICAL_BEGIN
   1140c:	f7fe ff6e 	bl	102ec <am_hal_interrupt_master_disable>
   11410:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11412:	9001      	str	r0, [sp, #4]
   11414:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
   11418:	321c      	adds	r2, #28
   1141a:	0313      	lsls	r3, r2, #12
   1141c:	a902      	add	r1, sp, #8
    uint32_t i = 0;
   1141e:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11420:	6998      	ldr	r0, [r3, #24]
   11422:	06c0      	lsls	r0, r0, #27
   11424:	d461      	bmi.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11426:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11428:	f410 6f70 	tst.w	r0, #3840	; 0xf00
   1142c:	d168      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1142e:	468e      	mov	lr, r1
   11430:	3201      	adds	r2, #1
   11432:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11436:	f8d3 c018 	ldr.w	ip, [r3, #24]
   1143a:	f01c 0f10 	tst.w	ip, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
   1143e:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11440:	d153      	bne.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11442:	f8d3 8000 	ldr.w	r8, [r3]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11446:	f418 6f70 	tst.w	r8, #3840	; 0xf00
   1144a:	d159      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1144c:	f88e 8000 	strb.w	r8, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11450:	f8d3 c018 	ldr.w	ip, [r3, #24]
   11454:	f01c 0f10 	tst.w	ip, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
   11458:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1145c:	d145      	bne.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   1145e:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11460:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   11464:	d14c      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11466:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1146a:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1146e:	f018 0f10 	tst.w	r8, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
   11472:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11476:	d138      	bne.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11478:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   1147a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1147e:	d13f      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   11480:	70ca      	strb	r2, [r1, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11482:	f8d3 c018 	ldr.w	ip, [r3, #24]
   11486:	f01c 0f10 	tst.w	ip, #16
   1148a:	f101 0104 	add.w	r1, r1, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
   1148e:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
   11492:	d12a      	bne.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   11494:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   11496:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1149a:	d131      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   1149c:	700a      	strb	r2, [r1, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   1149e:	6999      	ldr	r1, [r3, #24]
   114a0:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114a2:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114a6:	d420      	bmi.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114a8:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114aa:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   114ae:	d127      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114b0:	f88e 2004 	strb.w	r2, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114b4:	6999      	ldr	r1, [r3, #24]
   114b6:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114b8:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114bc:	d415      	bmi.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114be:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114c0:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   114c4:	d11c      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114c6:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114ca:	6999      	ldr	r1, [r3, #24]
   114cc:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
   114ce:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
   114d2:	d40a      	bmi.n	114ea <am_hal_uart_interrupt_service+0x19e>
            ui32ReadData = UARTn(ui32Module)->DR;
   114d4:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
   114d6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   114da:	d111      	bne.n	11500 <am_hal_uart_interrupt_service+0x1b4>
                pui8Data[i++] = ui32ReadData & 0xFF;
   114dc:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
   114de:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
   114e0:	f88e 1006 	strb.w	r1, [lr, #6]
   114e4:	f10e 0107 	add.w	r1, lr, #7
    while (i < ui32NumBytes)
   114e8:	d19a      	bne.n	11420 <am_hal_uart_interrupt_service+0xd4>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
   114ea:	a902      	add	r1, sp, #8
   114ec:	f104 0048 	add.w	r0, r4, #72	; 0x48
   114f0:	f000 f860 	bl	115b4 <am_hal_queue_item_add>
   114f4:	b938      	cbnz	r0, 11506 <am_hal_uart_interrupt_service+0x1ba>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
   114f6:	4f07      	ldr	r7, [pc, #28]	; (11514 <am_hal_uart_interrupt_service+0x1c8>)
    AM_CRITICAL_END
   114f8:	9801      	ldr	r0, [sp, #4]
   114fa:	f7fe fefb 	bl	102f4 <am_hal_interrupt_master_set>
   114fe:	e72f      	b.n	11360 <am_hal_uart_interrupt_service+0x14>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
   11500:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   11504:	e7f8      	b.n	114f8 <am_hal_uart_interrupt_service+0x1ac>
    AM_CRITICAL_END
   11506:	9801      	ldr	r0, [sp, #4]
   11508:	f7fe fef4 	bl	102f4 <am_hal_interrupt_master_set>
   1150c:	e737      	b.n	1137e <am_hal_uart_interrupt_service+0x32>
   1150e:	bf00      	nop
   11510:	01ea9e06 	.word	0x01ea9e06
   11514:	08000001 	.word	0x08000001

00011518 <am_hal_uart_interrupt_enable>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11518:	6803      	ldr	r3, [r0, #0]
   1151a:	4a08      	ldr	r2, [pc, #32]	; (1153c <am_hal_uart_interrupt_enable+0x24>)
   1151c:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   11520:	4594      	cmp	ip, r2
   11522:	d001      	beq.n	11528 <am_hal_uart_interrupt_enable+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
   11524:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   11526:	4770      	bx	lr
    UARTn(ui32Module)->IER |= ui32IntMask;
   11528:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1152a:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
   1152e:	321c      	adds	r2, #28
   11530:	0313      	lsls	r3, r2, #12
    return AM_HAL_STATUS_SUCCESS;
   11532:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
   11534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11536:	4311      	orrs	r1, r2
   11538:	6399      	str	r1, [r3, #56]	; 0x38
    return AM_HAL_STATUS_SUCCESS;
   1153a:	4770      	bx	lr
   1153c:	01ea9e06 	.word	0x01ea9e06

00011540 <am_hal_uart_interrupt_clear>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11540:	6803      	ldr	r3, [r0, #0]
   11542:	4a07      	ldr	r2, [pc, #28]	; (11560 <am_hal_uart_interrupt_clear+0x20>)
   11544:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   11548:	4594      	cmp	ip, r2
   1154a:	d001      	beq.n	11550 <am_hal_uart_interrupt_clear+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1154c:	2002      	movs	r0, #2
#else // AM_CMSIS_REGS
    AM_REGn(UART, ui32Module, IEC) = ui32IntMask;
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_interrupt_clear()
   1154e:	4770      	bx	lr
    UARTn(ui32Module)->IEC = ui32IntMask;
   11550:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11552:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
   11556:	321c      	adds	r2, #28
   11558:	0313      	lsls	r3, r2, #12
    return AM_HAL_STATUS_SUCCESS;
   1155a:	2000      	movs	r0, #0
    UARTn(ui32Module)->IEC = ui32IntMask;
   1155c:	6459      	str	r1, [r3, #68]	; 0x44
    return AM_HAL_STATUS_SUCCESS;
   1155e:	4770      	bx	lr
   11560:	01ea9e06 	.word	0x01ea9e06

00011564 <am_hal_uart_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
   11564:	b410      	push	{r4}
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   11566:	6803      	ldr	r3, [r0, #0]
   11568:	4c0b      	ldr	r4, [pc, #44]	; (11598 <am_hal_uart_interrupt_status_get+0x34>)
   1156a:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
   1156e:	45a4      	cmp	ip, r4
   11570:	d003      	beq.n	1157a <am_hal_uart_interrupt_status_get+0x16>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   11572:	2002      	movs	r0, #2
        *pui32Status = AM_REGn(UART, ui32Module, IES);
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_interrupt_status_get()
   11574:	f85d 4b04 	ldr.w	r4, [sp], #4
   11578:	4770      	bx	lr
    uint32_t ui32Module = pState->ui32Module;
   1157a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    *pui32Status = bEnabledOnly ? UARTn(ui32Module)->MIS : UARTn(ui32Module)->IES;
   1157c:	f500 2480 	add.w	r4, r0, #262144	; 0x40000
   11580:	341c      	adds	r4, #28
   11582:	0323      	lsls	r3, r4, #12
   11584:	b12a      	cbz	r2, 11592 <am_hal_uart_interrupt_status_get+0x2e>
   11586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   11588:	600a      	str	r2, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   1158a:	2000      	movs	r0, #0
} // am_hal_uart_interrupt_status_get()
   1158c:	f85d 4b04 	ldr.w	r4, [sp], #4
   11590:	4770      	bx	lr
    *pui32Status = bEnabledOnly ? UARTn(ui32Module)->MIS : UARTn(ui32Module)->IES;
   11592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   11594:	e7f8      	b.n	11588 <am_hal_uart_interrupt_status_get+0x24>
   11596:	bf00      	nop
   11598:	01ea9e06 	.word	0x01ea9e06

0001159c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1159c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1159e:	2400      	movs	r4, #0
   115a0:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   115a2:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   115a4:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   115a6:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   115a8:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   115aa:	6141      	str	r1, [r0, #20]
}
   115ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   115b0:	4770      	bx	lr
   115b2:	bf00      	nop

000115b4 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
   115b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   115b6:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   115b8:	6905      	ldr	r5, [r0, #16]
{
   115ba:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   115bc:	fb05 f502 	mul.w	r5, r5, r2
{
   115c0:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
   115c2:	f7fe fe93 	bl	102ec <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
   115c6:	68e3      	ldr	r3, [r4, #12]
   115c8:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
   115ca:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
   115cc:	1a99      	subs	r1, r3, r2
   115ce:	428d      	cmp	r5, r1
   115d0:	f200 8081 	bhi.w	116d6 <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   115d4:	2d00      	cmp	r5, #0
   115d6:	d075      	beq.n	116c4 <am_hal_queue_item_add+0x110>
   115d8:	6826      	ldr	r6, [r4, #0]
   115da:	2f00      	cmp	r7, #0
   115dc:	d07d      	beq.n	116da <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   115de:	4638      	mov	r0, r7
   115e0:	6963      	ldr	r3, [r4, #20]
   115e2:	f810 2b01 	ldrb.w	r2, [r0], #1
   115e6:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   115e8:	6821      	ldr	r1, [r4, #0]
   115ea:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   115ee:	1c4a      	adds	r2, r1, #1
   115f0:	197e      	adds	r6, r7, r5
   115f2:	43ff      	mvns	r7, r7
   115f4:	fbb2 fcfe 	udiv	ip, r2, lr
   115f8:	4437      	add	r7, r6
   115fa:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   115fe:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11600:	6023      	str	r3, [r4, #0]
   11602:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11606:	d05c      	beq.n	116c2 <am_hal_queue_item_add+0x10e>
   11608:	b349      	cbz	r1, 1165e <am_hal_queue_item_add+0xaa>
   1160a:	2901      	cmp	r1, #1
   1160c:	d019      	beq.n	11642 <am_hal_queue_item_add+0x8e>
   1160e:	2902      	cmp	r1, #2
   11610:	d00b      	beq.n	1162a <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11612:	6962      	ldr	r2, [r4, #20]
   11614:	f810 7b01 	ldrb.w	r7, [r0], #1
   11618:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1161a:	6823      	ldr	r3, [r4, #0]
   1161c:	68e1      	ldr	r1, [r4, #12]
   1161e:	1c5a      	adds	r2, r3, #1
   11620:	fbb2 f7f1 	udiv	r7, r2, r1
   11624:	fb01 2317 	mls	r3, r1, r7, r2
   11628:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   1162a:	6962      	ldr	r2, [r4, #20]
   1162c:	f810 1b01 	ldrb.w	r1, [r0], #1
   11630:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11632:	6823      	ldr	r3, [r4, #0]
   11634:	68e7      	ldr	r7, [r4, #12]
   11636:	1c5a      	adds	r2, r3, #1
   11638:	fbb2 f1f7 	udiv	r1, r2, r7
   1163c:	fb07 2311 	mls	r3, r7, r1, r2
   11640:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11642:	6967      	ldr	r7, [r4, #20]
   11644:	f810 2b01 	ldrb.w	r2, [r0], #1
   11648:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1164a:	6823      	ldr	r3, [r4, #0]
   1164c:	68e1      	ldr	r1, [r4, #12]
   1164e:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11650:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11652:	fbb7 f2f1 	udiv	r2, r7, r1
   11656:	fb01 7312 	mls	r3, r1, r2, r7
   1165a:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1165c:	d031      	beq.n	116c2 <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   1165e:	4686      	mov	lr, r0
   11660:	6967      	ldr	r7, [r4, #20]
   11662:	f81e 1b01 	ldrb.w	r1, [lr], #1
   11666:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11668:	6823      	ldr	r3, [r4, #0]
   1166a:	68e2      	ldr	r2, [r4, #12]
   1166c:	1c5f      	adds	r7, r3, #1
   1166e:	fbb7 f1f2 	udiv	r1, r7, r2
   11672:	fb02 7311 	mls	r3, r2, r1, r7
   11676:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   11678:	6962      	ldr	r2, [r4, #20]
   1167a:	7847      	ldrb	r7, [r0, #1]
   1167c:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1167e:	6823      	ldr	r3, [r4, #0]
   11680:	68e1      	ldr	r1, [r4, #12]
   11682:	1c5f      	adds	r7, r3, #1
   11684:	fbb7 f2f1 	udiv	r2, r7, r1
   11688:	fb01 7312 	mls	r3, r1, r2, r7
   1168c:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   1168e:	6961      	ldr	r1, [r4, #20]
   11690:	f89e 7001 	ldrb.w	r7, [lr, #1]
   11694:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11696:	6822      	ldr	r2, [r4, #0]
   11698:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   1169a:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1169c:	3201      	adds	r2, #1
   1169e:	fbb2 fcf7 	udiv	ip, r2, r7
   116a2:	fb07 231c 	mls	r3, r7, ip, r2
   116a6:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
   116a8:	78c7      	ldrb	r7, [r0, #3]
   116aa:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   116ac:	6822      	ldr	r2, [r4, #0]
   116ae:	68e1      	ldr	r1, [r4, #12]
   116b0:	1c57      	adds	r7, r2, #1
   116b2:	3004      	adds	r0, #4
   116b4:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   116b8:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   116ba:	fb01 7312 	mls	r3, r1, r2, r7
   116be:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   116c0:	d1cd      	bne.n	1165e <am_hal_queue_item_add+0xaa>
   116c2:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
   116c4:	442a      	add	r2, r5
   116c6:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
   116c8:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
   116ca:	9801      	ldr	r0, [sp, #4]
   116cc:	f7fe fe12 	bl	102f4 <am_hal_interrupt_master_set>

    return bSuccess;
}
   116d0:	4620      	mov	r0, r4
   116d2:	b003      	add	sp, #12
   116d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
   116d6:	2400      	movs	r4, #0
   116d8:	e7f7      	b.n	116ca <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   116da:	1c70      	adds	r0, r6, #1
   116dc:	fbb0 fef3 	udiv	lr, r0, r3
   116e0:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   116e4:	2001      	movs	r0, #1
   116e6:	1e6e      	subs	r6, r5, #1
   116e8:	4285      	cmp	r5, r0
   116ea:	f006 0707 	and.w	r7, r6, #7
   116ee:	d063      	beq.n	117b8 <am_hal_queue_item_add+0x204>
   116f0:	b3bf      	cbz	r7, 11762 <am_hal_queue_item_add+0x1ae>
   116f2:	2f01      	cmp	r7, #1
   116f4:	d02d      	beq.n	11752 <am_hal_queue_item_add+0x19e>
   116f6:	2f02      	cmp	r7, #2
   116f8:	d025      	beq.n	11746 <am_hal_queue_item_add+0x192>
   116fa:	2f03      	cmp	r7, #3
   116fc:	d01d      	beq.n	1173a <am_hal_queue_item_add+0x186>
   116fe:	2f04      	cmp	r7, #4
   11700:	d015      	beq.n	1172e <am_hal_queue_item_add+0x17a>
   11702:	2f05      	cmp	r7, #5
   11704:	d00d      	beq.n	11722 <am_hal_queue_item_add+0x16e>
   11706:	2f06      	cmp	r7, #6
   11708:	d005      	beq.n	11716 <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1170a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1170c:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1170e:	fbb1 fcf3 	udiv	ip, r1, r3
   11712:	fb03 111c 	mls	r1, r3, ip, r1
   11716:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11718:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1171a:	fbb1 f6f3 	udiv	r6, r1, r3
   1171e:	fb03 1116 	mls	r1, r3, r6, r1
   11722:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11724:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11726:	fbb1 f7f3 	udiv	r7, r1, r3
   1172a:	fb03 1117 	mls	r1, r3, r7, r1
   1172e:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11730:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11732:	fbb1 fef3 	udiv	lr, r1, r3
   11736:	fb03 111e 	mls	r1, r3, lr, r1
   1173a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1173c:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1173e:	fbb1 fcf3 	udiv	ip, r1, r3
   11742:	fb03 111c 	mls	r1, r3, ip, r1
   11746:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11748:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   1174a:	fbb1 f6f3 	udiv	r6, r1, r3
   1174e:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11752:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11754:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11756:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11758:	fbb1 f7f3 	udiv	r7, r1, r3
   1175c:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11760:	d02a      	beq.n	117b8 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   11762:	3101      	adds	r1, #1
   11764:	fbb1 fef3 	udiv	lr, r1, r3
   11768:	fb03 161e 	mls	r6, r3, lr, r1
   1176c:	1c77      	adds	r7, r6, #1
   1176e:	fbb7 fcf3 	udiv	ip, r7, r3
   11772:	fb03 711c 	mls	r1, r3, ip, r7
   11776:	1c4e      	adds	r6, r1, #1
   11778:	fbb6 f7f3 	udiv	r7, r6, r3
   1177c:	fb03 6117 	mls	r1, r3, r7, r6
   11780:	1c4e      	adds	r6, r1, #1
   11782:	fbb6 f7f3 	udiv	r7, r6, r3
   11786:	fb03 6117 	mls	r1, r3, r7, r6
   1178a:	1c4e      	adds	r6, r1, #1
   1178c:	fbb6 f7f3 	udiv	r7, r6, r3
   11790:	fb03 6117 	mls	r1, r3, r7, r6
   11794:	1c4e      	adds	r6, r1, #1
   11796:	fbb6 f7f3 	udiv	r7, r6, r3
   1179a:	fb03 6117 	mls	r1, r3, r7, r6
   1179e:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   117a0:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   117a2:	fbb6 f7f3 	udiv	r7, r6, r3
   117a6:	fb03 6117 	mls	r1, r3, r7, r6
   117aa:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   117ac:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
   117ae:	fbb6 f7f3 	udiv	r7, r6, r3
   117b2:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   117b6:	d1d4      	bne.n	11762 <am_hal_queue_item_add+0x1ae>
   117b8:	6021      	str	r1, [r4, #0]
   117ba:	e783      	b.n	116c4 <am_hal_queue_item_add+0x110>

000117bc <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
   117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117be:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   117c0:	6905      	ldr	r5, [r0, #16]
{
   117c2:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
   117c4:	fb05 f502 	mul.w	r5, r5, r2
{
   117c8:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
   117ca:	f7fe fd8f 	bl	102ec <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
   117ce:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
   117d0:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
   117d2:	42bd      	cmp	r5, r7
   117d4:	f200 8083 	bhi.w	118de <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   117d8:	2d00      	cmp	r5, #0
   117da:	d077      	beq.n	118cc <am_hal_queue_item_get+0x110>
   117dc:	6863      	ldr	r3, [r4, #4]
   117de:	2e00      	cmp	r6, #0
   117e0:	d07f      	beq.n	118e2 <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   117e2:	6962      	ldr	r2, [r4, #20]
   117e4:	4630      	mov	r0, r6
   117e6:	5cd1      	ldrb	r1, [r2, r3]
   117e8:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   117ec:	6863      	ldr	r3, [r4, #4]
   117ee:	68e7      	ldr	r7, [r4, #12]
   117f0:	1c5a      	adds	r2, r3, #1
   117f2:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   117f4:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   117f6:	fbb2 f6f7 	udiv	r6, r2, r7
   117fa:	fb07 2316 	mls	r3, r7, r6, r2
   117fe:	f105 37ff 	add.w	r7, r5, #4294967295
   11802:	6063      	str	r3, [r4, #4]
   11804:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11808:	d05f      	beq.n	118ca <am_hal_queue_item_get+0x10e>
   1180a:	b362      	cbz	r2, 11866 <am_hal_queue_item_get+0xaa>
   1180c:	2a01      	cmp	r2, #1
   1180e:	d01b      	beq.n	11848 <am_hal_queue_item_get+0x8c>
   11810:	2a02      	cmp	r2, #2
   11812:	d00c      	beq.n	1182e <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11814:	6966      	ldr	r6, [r4, #20]
   11816:	f816 c003 	ldrb.w	ip, [r6, r3]
   1181a:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1181e:	6863      	ldr	r3, [r4, #4]
   11820:	68e7      	ldr	r7, [r4, #12]
   11822:	1c5a      	adds	r2, r3, #1
   11824:	fbb2 f6f7 	udiv	r6, r2, r7
   11828:	fb07 2316 	mls	r3, r7, r6, r2
   1182c:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   1182e:	6967      	ldr	r7, [r4, #20]
   11830:	f817 e003 	ldrb.w	lr, [r7, r3]
   11834:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11838:	6863      	ldr	r3, [r4, #4]
   1183a:	68e6      	ldr	r6, [r4, #12]
   1183c:	1c5a      	adds	r2, r3, #1
   1183e:	fbb2 f7f6 	udiv	r7, r2, r6
   11842:	fb06 2317 	mls	r3, r6, r7, r2
   11846:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11848:	6966      	ldr	r6, [r4, #20]
   1184a:	f816 c003 	ldrb.w	ip, [r6, r3]
   1184e:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11852:	6863      	ldr	r3, [r4, #4]
   11854:	68e7      	ldr	r7, [r4, #12]
   11856:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11858:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1185a:	fbb2 f6f7 	udiv	r6, r2, r7
   1185e:	fb07 2316 	mls	r3, r7, r6, r2
   11862:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11864:	d031      	beq.n	118ca <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11866:	6962      	ldr	r2, [r4, #20]
   11868:	4686      	mov	lr, r0
   1186a:	5cd6      	ldrb	r6, [r2, r3]
   1186c:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11870:	6863      	ldr	r3, [r4, #4]
   11872:	68e7      	ldr	r7, [r4, #12]
   11874:	1c5a      	adds	r2, r3, #1
   11876:	fbb2 f6f7 	udiv	r6, r2, r7
   1187a:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   1187e:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11880:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11882:	5cfa      	ldrb	r2, [r7, r3]
   11884:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11886:	6863      	ldr	r3, [r4, #4]
   11888:	68e6      	ldr	r6, [r4, #12]
   1188a:	1c5f      	adds	r7, r3, #1
   1188c:	fbb7 f2f6 	udiv	r2, r7, r6
   11890:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11894:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11896:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   11898:	5cf7      	ldrb	r7, [r6, r3]
   1189a:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1189e:	6862      	ldr	r2, [r4, #4]
   118a0:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   118a2:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   118a4:	3201      	adds	r2, #1
   118a6:	fbb2 fcf7 	udiv	ip, r2, r7
   118aa:	fb07 231c 	mls	r3, r7, ip, r2
   118ae:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
   118b0:	5cf7      	ldrb	r7, [r6, r3]
   118b2:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   118b4:	6866      	ldr	r6, [r4, #4]
   118b6:	68e7      	ldr	r7, [r4, #12]
   118b8:	1c72      	adds	r2, r6, #1
   118ba:	3004      	adds	r0, #4
   118bc:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   118c0:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   118c2:	fb07 2316 	mls	r3, r7, r6, r2
   118c6:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   118c8:	d1cd      	bne.n	11866 <am_hal_queue_item_get+0xaa>
   118ca:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
   118cc:	1b7f      	subs	r7, r7, r5
   118ce:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
   118d0:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
   118d2:	9801      	ldr	r0, [sp, #4]
   118d4:	f7fe fd0e 	bl	102f4 <am_hal_interrupt_master_set>

    return bSuccess;
}
   118d8:	4620      	mov	r0, r4
   118da:	b003      	add	sp, #12
   118dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
   118de:	2400      	movs	r4, #0
   118e0:	e7f7      	b.n	118d2 <am_hal_queue_item_get+0x116>
   118e2:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   118e4:	1c58      	adds	r0, r3, #1
   118e6:	fbb0 fef1 	udiv	lr, r0, r1
   118ea:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   118ee:	2001      	movs	r0, #1
   118f0:	1e6a      	subs	r2, r5, #1
   118f2:	4285      	cmp	r5, r0
   118f4:	f002 0607 	and.w	r6, r2, #7
   118f8:	d063      	beq.n	119c2 <am_hal_queue_item_get+0x206>
   118fa:	b3be      	cbz	r6, 1196c <am_hal_queue_item_get+0x1b0>
   118fc:	2e01      	cmp	r6, #1
   118fe:	d02d      	beq.n	1195c <am_hal_queue_item_get+0x1a0>
   11900:	2e02      	cmp	r6, #2
   11902:	d025      	beq.n	11950 <am_hal_queue_item_get+0x194>
   11904:	2e03      	cmp	r6, #3
   11906:	d01d      	beq.n	11944 <am_hal_queue_item_get+0x188>
   11908:	2e04      	cmp	r6, #4
   1190a:	d015      	beq.n	11938 <am_hal_queue_item_get+0x17c>
   1190c:	2e05      	cmp	r6, #5
   1190e:	d00d      	beq.n	1192c <am_hal_queue_item_get+0x170>
   11910:	2e06      	cmp	r6, #6
   11912:	d005      	beq.n	11920 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11914:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11916:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11918:	fbb3 f2f1 	udiv	r2, r3, r1
   1191c:	fb01 3312 	mls	r3, r1, r2, r3
   11920:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11922:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11924:	fbb3 fcf1 	udiv	ip, r3, r1
   11928:	fb01 331c 	mls	r3, r1, ip, r3
   1192c:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1192e:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11930:	fbb3 fef1 	udiv	lr, r3, r1
   11934:	fb01 331e 	mls	r3, r1, lr, r3
   11938:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1193a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1193c:	fbb3 f6f1 	udiv	r6, r3, r1
   11940:	fb01 3316 	mls	r3, r1, r6, r3
   11944:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11946:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11948:	fbb3 f2f1 	udiv	r2, r3, r1
   1194c:	fb01 3312 	mls	r3, r1, r2, r3
   11950:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11952:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11954:	fbb3 fcf1 	udiv	ip, r3, r1
   11958:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1195c:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1195e:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   11960:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   11962:	fbb3 fef1 	udiv	lr, r3, r1
   11966:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   1196a:	d02a      	beq.n	119c2 <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   1196c:	3301      	adds	r3, #1
   1196e:	fbb3 f6f1 	udiv	r6, r3, r1
   11972:	fb01 3216 	mls	r2, r1, r6, r3
   11976:	1c56      	adds	r6, r2, #1
   11978:	fbb6 fcf1 	udiv	ip, r6, r1
   1197c:	fb01 631c 	mls	r3, r1, ip, r6
   11980:	1c5a      	adds	r2, r3, #1
   11982:	fbb2 f6f1 	udiv	r6, r2, r1
   11986:	fb01 2316 	mls	r3, r1, r6, r2
   1198a:	1c5a      	adds	r2, r3, #1
   1198c:	fbb2 f6f1 	udiv	r6, r2, r1
   11990:	fb01 2316 	mls	r3, r1, r6, r2
   11994:	1c5a      	adds	r2, r3, #1
   11996:	fbb2 f6f1 	udiv	r6, r2, r1
   1199a:	fb01 2316 	mls	r3, r1, r6, r2
   1199e:	1c5a      	adds	r2, r3, #1
   119a0:	fbb2 f6f1 	udiv	r6, r2, r1
   119a4:	fb01 2316 	mls	r3, r1, r6, r2
   119a8:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   119aa:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   119ac:	fbb2 f6f1 	udiv	r6, r2, r1
   119b0:	fb01 2316 	mls	r3, r1, r6, r2
   119b4:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   119b6:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
   119b8:	fbb2 f6f1 	udiv	r6, r2, r1
   119bc:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
   119c0:	d1d4      	bne.n	1196c <am_hal_queue_item_get+0x1b0>
   119c2:	6063      	str	r3, [r4, #4]
   119c4:	e782      	b.n	118cc <am_hal_queue_item_get+0x110>
   119c6:	bf00      	nop

000119c8 <memcpy>:
   119c8:	b510      	push	{r4, lr}
   119ca:	1e43      	subs	r3, r0, #1
   119cc:	440a      	add	r2, r1
   119ce:	4291      	cmp	r1, r2
   119d0:	d100      	bne.n	119d4 <memcpy+0xc>
   119d2:	bd10      	pop	{r4, pc}
   119d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   119d8:	f803 4f01 	strb.w	r4, [r3, #1]!
   119dc:	e7f7      	b.n	119ce <memcpy+0x6>
   119de:	0000      	movs	r0, r0
   119e0:	78323025 	.word	0x78323025
   119e4:	00000020 	.word	0x00000020
   119e8:	0000000a 	.word	0x0000000a
   119ec:	50205854 	.word	0x50205854
   119f0:	7265776f 	.word	0x7265776f
   119f4:	74655320 	.word	0x74655320
   119f8:	676e6974 	.word	0x676e6974
   119fc:	6d6f4320 	.word	0x6d6f4320
   11a00:	646e616d 	.word	0x646e616d
   11a04:	0a4b4f20 	.word	0x0a4b4f20
   11a08:	00000000 	.word	0x00000000
   11a0c:	61766e49 	.word	0x61766e49
   11a10:	2064696c 	.word	0x2064696c
   11a14:	50205854 	.word	0x50205854
   11a18:	7265776f 	.word	0x7265776f
   11a1c:	6c615620 	.word	0x6c615620
   11a20:	25206575 	.word	0x25206575
   11a24:	00000a64 	.word	0x00000a64
   11a28:	484d3233 	.word	0x484d3233
   11a2c:	7243207a 	.word	0x7243207a
   11a30:	61747379 	.word	0x61747379
   11a34:	7254206c 	.word	0x7254206c
   11a38:	43206d69 	.word	0x43206d69
   11a3c:	616d6d6f 	.word	0x616d6d6f
   11a40:	4f20646e 	.word	0x4f20646e
   11a44:	00000a4b 	.word	0x00000a4b
   11a48:	75646f4d 	.word	0x75646f4d
   11a4c:	6974616c 	.word	0x6974616c
   11a50:	49206e6f 	.word	0x49206e6f
   11a54:	7865646e 	.word	0x7865646e
   11a58:	6d6f4320 	.word	0x6d6f4320
   11a5c:	646e616d 	.word	0x646e616d
   11a60:	0a4b4f20 	.word	0x0a4b4f20
   11a64:	00000000 	.word	0x00000000
   11a68:	656e6567 	.word	0x656e6567
   11a6c:	65746172 	.word	0x65746172
   11a70:	72616320 	.word	0x72616320
   11a74:	72656972 	.word	0x72656972
   11a78:	76617720 	.word	0x76617720
   11a7c:	4b4f2065 	.word	0x4b4f2065
   11a80:	0000000a 	.word	0x0000000a
   11a84:	656e6567 	.word	0x656e6567
   11a88:	65746172 	.word	0x65746172
   11a8c:	6e6f6320 	.word	0x6e6f6320
   11a90:	6e617473 	.word	0x6e617473
   11a94:	6f6d2074 	.word	0x6f6d2074
   11a98:	61726564 	.word	0x61726564
   11a9c:	20646574 	.word	0x20646574
   11aa0:	6e676973 	.word	0x6e676973
   11aa4:	77206c61 	.word	0x77206c61
   11aa8:	20657661 	.word	0x20657661
   11aac:	000a4b4f 	.word	0x000a4b4f
   11ab0:	61766e49 	.word	0x61766e49
   11ab4:	2064696c 	.word	0x2064696c
   11ab8:	54524155 	.word	0x54524155
   11abc:	65705320 	.word	0x65705320
   11ac0:	6c616963 	.word	0x6c616963
   11ac4:	6d6f4320 	.word	0x6d6f4320
   11ac8:	646e616d 	.word	0x646e616d
   11acc:	0d732520 	.word	0x0d732520
   11ad0:	0000000a 	.word	0x0000000a
   11ad4:	6c6f7041 	.word	0x6c6f7041
   11ad8:	20336f6c 	.word	0x20336f6c
   11adc:	54524155 	.word	0x54524155
   11ae0:	206f7420 	.word	0x206f7420
   11ae4:	20495053 	.word	0x20495053
   11ae8:	64697242 	.word	0x64697242
   11aec:	000a6567 	.word	0x000a6567
   11af0:	64616552 	.word	0x64616552
   11af4:	6f726620 	.word	0x6f726620
   11af8:	4c42206d 	.word	0x4c42206d
   11afc:	6f432045 	.word	0x6f432045
   11b00:	6f72746e 	.word	0x6f72746e
   11b04:	72656c6c 	.word	0x72656c6c
   11b08:	69616620 	.word	0x69616620
   11b0c:	0a64656c 	.word	0x0a64656c
   11b10:	00000000 	.word	0x00000000
   11b14:	0001c200 	.word	0x0001c200
   11b18:	00000060 	.word	0x00000060
	...
   11b28:	0000001b 	.word	0x0000001b
   11b2c:	10001c50 	.word	0x10001c50
   11b30:	00000800 	.word	0x00000800
	...

00011b3c <g_AM_BSP_GPIO_COM_UART_RX>:
   11b3c:	00000000                                ....

00011b40 <g_AM_BSP_GPIO_COM_UART_TX>:
   11b40:	00000000                                ....

00011b44 <g_AM_BSP_GPIO_ITM_SWO>:
   11b44:	00000002                                ....

00011b48 <am_hal_ble_default_config>:
   11b48:	00000c01 00000020 00000020              .... ... ...

00011b54 <ccitt_table>:
   11b54:	80050000 000a800f 001e801b 80110014     ................
   11b64:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   11b74:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   11b84:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   11b94:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   11ba4:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   11bb4:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   11bc4:	00968093 8099009c 808d0088 00828087     ................
   11bd4:	01868183 8189018c 819d0198 01928197     ................
   11be4:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   11bf4:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   11c04:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   11c14:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   11c24:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   11c34:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   11c44:	81150110 011a811f 010e810b 81010104     ................
   11c54:	03068303 8309030c 831d0318 03128317     ................
   11c64:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   11c74:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   11c84:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   11c94:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   11ca4:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   11cb4:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   11cc4:	83950390 039a839f 038e838b 83810384     ................
   11cd4:	82850280 028a828f 029e829b 82910294     ................
   11ce4:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   11cf4:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   11d04:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   11d14:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   11d24:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   11d34:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   11d44:	02168213 8219021c 820d0208 02028207     ................

00011d54 <am_ble_buffer_nvds_data>:
   11d54:	5344564e ef060601 778823bb 0a060266     NVDS.....#.wf...
   11d64:	38385a4e 31563130 06030041 06070001     NZ8801V1A.......
   11d74:	0c01f402 01f40206 00010608 02010609     ................
   11d84:	0004060a 0b000000 23960106 0d950106     ...........#....
   11d94:	03dc0206 dc02060e 02060f03 06100190     ................
   11da4:	01c20004 01061100 01061201 02061301     ................
   11db4:	06140290 15006002 16080106 17030106     .....`..........
   11dc4:	18290106 05dc0206 e2020619 01062004     ..).......... ..
   11dd4:	01062101 01062202 04062400 09600242     .!..."...$..B.`.
   11de4:	11010625 00010626 03010627 0001062d     %...&...'...-...
   11df4:	f6020628 0106293f 0106350f 01063708     (...?)...5...7..
   11e04:	02060500 06040034 00002801 00000000     ....4....(......

00011e14 <am_ble_buffer_patch_data>:
   11e14:	11ac2200 00003fff 0009152d 00091d2e     ."...?..-.......
   11e24:	00092165 00092d2b 000930a9 000938fc     e!..+-...0...8..
   11e34:	000943f7 00094c1a 0009541c 00095af8     .C...L...T...Z..
   11e44:	000962f9 00096c42 000973d9 00097d4b     .b..Bl...s..K}..
   11e54:	2100b510 f7ed2003 f7efff9f bd10f925     ...!. ......%...
   11e64:	2101b510 f7ed200d 2100fc1b f7ed200d     ...!. .....!. ..
   11e74:	bd10fc79 2101b510 f7ed200d 2101fc11     y......!. .....!
   11e84:	f7ed200d bd10fc6f f000b510 bd10f801     . ..o...........
   11e94:	4801b403 bd019001 20004c01 2d007c3d     ...H.....L. =|.-
   11ea4:	2d01d006 2d02d006 2d03d01d e033d047     ...-...-...-G.3.
   11eb4:	e031bf00 d02f2c00 f7f02700 1c61fe7a     ..1..,/..'..z.a.
   11ec4:	42889100 200ad20c fff2f7ee 49364638     ...B... ....8F6I
   11ed4:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   11ee4:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   11ef4:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   11f04:	47004800 20004d91 28008870 2014d116     .H.G.M. p..(... 
   11f14:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   11f24:	20004e25 d0022800 28017808 7808d01a     %N. .(...x.(...x
   11f34:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   11f44:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   11f54:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   11f64:	47706001 52c00000 68014802 43112228     .`pG...R.H.h(".C
   11f74:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   11f84:	47706001 52c00000 47004800 20004e85     .`pG...R.H.G.N. 
   11f94:	210169c0 034943b0 49071840 6b1061c8     .i.!.CI.@..I.a.k
   11fa4:	631043b8 43986b10 bdf06310 50000380     .C.c.k.C.c.....P
   11fb4:	52c00080 50000040 50000080 47104a00     ...R@..P...P.J.G
   11fc4:	20004e9d 432b3501 68136013 d5fc059b     .N. .5+C.`.h....
   11fd4:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   11fe4:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   11ff4:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   12004:	47084900 20004f05 fd5cf7f3 5b00207c     .I.G.O. ..\.| .[
   12014:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   12024:	bd70fd73 e7e12101 47084900 200050ed     s.p..!...I.G.P. 
   12034:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   12044:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   12054:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   12064:	00000466 50804440 47084900 20005159     f...@D.P.I.GYQ. 
   12074:	8f809011 9812900e 900d3008 30309812     .........0....00
   12084:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   12094:	050a8b81 2201d504 439102d2 e00e8381     ......."...C....
   120a4:	02922201 83814311 35a02001 98047128     ."...C... .5(q..
   120b4:	466b2202 43117919 f7fd9101 9802fcdb     ."kF.y.C........
   120c4:	bdf0b007 20006160 00007fff 4c02b430     ....`a. ....0..L
   120d4:	bc3046a4 00004760 200055e1 990b9009     .F0.`G...U. ....
   120e4:	4998008a 21a5588d 07095d49 213dd504     ...I.X.!I]....=!
   120f4:	f7ff980b e10cfeb7 43812102 2000d008     .........!.C... 
   12104:	d0072800 22237821 f7ff980b e100fa53     .(..!x#"....S...
   12114:	f7fc2007 4605fda3 20ab2102 4a215541     . .....F.!. AU!J
   12124:	02896a10 43084388 21006210 8181481e     .j...C.C.b.!.H..
   12134:	820181c1 4c1d211c 491d81e1 491d82a1     .....!.L...I...I
   12144:	210882e1 0a128c22 430a0212 21008422     ...!"......C"..!
   12154:	98048260 98028f81 4351225a 18894a03     `.......Z"QC.J..
   12164:	b0058208 0000bdf0 00000271 50804080     ........q....@.P
   12174:	4c02b430 bc3046a4 00004760 20005871     0..L.F0.`G..qX. 
   12184:	89628d39 46304633 30a83388 90059306     9.b.3F0F.3.0....
	...
   121a4:	00000001 00000000 00000001 00000000     ................
   121b4:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   121c4:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   121d4:	b081b5ff 4954460c 60889803 60c89804     .....FTI...`...`
   121e4:	9e042700 2d007c35 2105d045 484f0709     .'..5|.-E..!..OH
   121f4:	d0042d01 d01f2d02 d0512d03 2c00e03b     .-...-...-Q.;..,
   12204:	2600d039 051369ca 0d1b1c62 42939200     9..&.i..b......B
   12214:	4946d20f 4788200a 49454630 42881c76     ..FI. .G0FEIv..B
   12224:	2005d807 69c00700 98000501 42810d09     ... ...i.......B
   12234:	4840d3ef e01e4780 d01c2c00 21052600     ..@H.G...,...&.!
   12244:	69c90709 05094b3c 0d09681a 42911912     ...i<K...h.....B
   12254:	4936d211 4788200a 49384630 42881c76     ..6I. .G0F8Iv..B
   12264:	2005d809 69c00700 48330501 68000d09     ... ...i..3H...h
   12274:	42811900 2000d3ed 2c004e31 4b2ed90b     ...B... 1N.,...K
   12284:	18416819 d20342b1 5c524a2e 540a9901     .hA..B...JR\...T
   12294:	42a01c40 4827d3f4 2d014780 e024d014     @..B..'H.G.-..$.
   122a4:	051269ca 4f28d008 4605460c 203247b8     .i....(O.F.F.G2 
   122b4:	69e047a8 d1f90500 74302000 21039a03     .G.i..... 0t...!
   122c4:	47909804 bdf0b005 7808491e d0022801     ...G.....I.x.(..
   122d4:	d0022802 78cfe006 78c8e004 02097909     .(.....x...x.y..
   122e4:	b2871840 d1002f00 49132502 19006808     @..../...%.I.h..
   122f4:	2d026008 2000d111 49146008 49147008     .`.-... .`.I.p.I
   12304:	4a148008 70112101 7008490e 4a127048     ...J.!.p.I.pHp.J
   12314:	480c4631 48114790 9a034780 98042100     1F.H.G.H.G...!..
   12324:	b0054790 0000bdf0 20006790 00003ba1     .G.......g. .;..
   12334:	00002710 00014a99 20001004 00001388     .'...J..... ....
   12344:	000003ff 20001018 00014b25 20001001     ....... %K..... 
   12354:	20001002 20001000 00003f2d 00014aaf     ... ... -?...J..
   12364:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   12374:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   12384:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   12394:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   123a4:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   123b4:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   123c4:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   123d4:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   123e4:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   123f4:	20001000 2005b510 69c00700 480f0501     ... ... ...i...H
   12404:	d0037800 d0132801 d0112802 d0082800     .x...(...(...(..
   12414:	d0062801 d0042802 47804809 20324909     .(...(...H.G.I2 
   12424:	49094788 47882004 47804808 bd102000     .G.I. .G.H.G. ..
   12434:	20044907 20014788 0000bd10 20001018     .I. .G. ....... 
   12444:	00014b25 00003ba1 00014441 00014aaf     %K...;..AD...J..
   12454:	00014489 68014804 43112250 68016001     .D...H.hP".C.`.h
   12464:	43912228 47706001 52c00000 4a15b430     (".C.`pG...R0..J
   12474:	25ff6813 432b3501 68136013 d5fc059b     .h.%.5+C.`.h....
   12484:	621d4b11 621c2400 07e46a1c 2305d1fc     .K.b.$.b.j.....#
   12494:	6098071b 050969d8 03000b00 43080d09     ...`.i.........C
   124a4:	681061d8 601043a8 68014808 43112228     .a.h.C.`.H.h(".C
   124b4:	68016001 43912250 49056001 2000bc30     .`.hP".C.`.I0.. 
   124c4:	00004708 50000040 50000380 52c00000     .G..@..P...P...R
   124d4:	0000189d b08db5f0 496c4604 4788a804     .........FlI...G
   124e4:	5b00207c 25009003 90022000 f3802001     | .[...%. ... ..
   124f4:	6c608810 f3812100 46268810 28003660     ..`l.!....&F`6.(
   12504:	4621d06b 910c3144 910b3928 910a3164     k.!FD1..(9..d1..
   12514:	00ca8881 1851495e 0bc98cc9 d05c2900     ....^IQ......)\.
   12524:	f3812101 68008810 495a9001 4788980c     .!.....h..ZI...G
   12534:	69e04607 d0032800 28002000 e008d002     .F.i.(... .(....
   12544:	e7fa2001 980b4953 28004788 4952d001     . ..SI...G.(..RI
   12554:	20004788 8810f380 494d88b8 184000c0     .G. ......MI..@.
   12564:	0bd28cc2 84c203d2 280788b8 7e30d21e     ...........(..0~
   12574:	76301e40 f3802001 6b208810 d0132800     @.0v. .... k.(..
   12584:	28002000 980ad005 798021fb 990a4008     . .(.....!.y.@..
   12594:	49417188 47884638 f3802000 4a3f8810     .qAI8F.G. ....?J
   125a4:	98037b39 e0154790 e7ea2001 d90f2809     9{...G... ...(..
   125b4:	184000c0 0a008d00 49399000 47884638     ..@.......9I8F.G
   125c4:	d0072800 28009800 1c6dd004 e001b2ed     .(.....(..m.....
   125d4:	b2ed1c6d 28009801 9803d19a d00e2807     m......(.....(..
   125e4:	d00c2d00 f3802001 7e308810 76301b40     .-... ....0~@.0v
   125f4:	f3802000 4a2b8810 98034629 20014790     . ....+J)F...G. 
   12604:	8810f380 4f234828 47b89009 20004604     ....(H#O...G.F. 
   12614:	8810f380 d0360020 88e04e1f 42889903     .... .6..N.....B
   12624:	2807d112 7aa1d007 4f209100 7b227ae3     ...(...z.. O.z"{
   12634:	47b88921 4b1ee005 89207921 4798462a     !..G...K!y .*F.G
   12644:	46209002 e00347b0 46214a1a 4790a804     .. F.G...J!F...G
   12654:	f3802001 490f8810 47889809 00204604     . .....I...G.F .
   12664:	9804d10c d0032800 28002000 e005d002     .....(... .(....
   12674:	e7fa2001 a9044a10 47909809 f3802000     . ...J.....G. ..
   12684:	2c008810 9802d1c9 bdf0b00d 000038b5     ...,.........8..
   12694:	50804440 00003945 000093a5 0000b809     @D.PE9..........
   126a4:	0000565d 0000b705 200061b8 0000b729     ]V.......a. )...
   126b4:	00012235 00003967 0000390f 2400b5f1     5"..g9...9.....$
   126c4:	4e164d15 f3802001 98008810 210047a8     .M.N. .......G.!
   126d4:	8810f381 d0172800 460a8881 2a463a0a     .....(.....F.:F*
   126e4:	00c9d214 8d091989 21010a0f 8810f381     ...........!....
   126f4:	4788490b d0032800 d0012f00 b2e41c64     .I.G.(.../..d...
   12704:	f3802000 e7dd8810 bdf84620 29491fc9     . ...... F....I)
   12714:	4904d3d8 e7d54788 00003945 50804440     ...I.G..E9..@D.P
   12724:	0000565d 000093a5 b092b5f1 30409812     ]V............@0
   12734:	8f809011 9812900e 900d3008 30309812     .........0....00
   12744:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   12754:	2c006804 2000d003 d0022800 2001e093     .h.,... .(..... 
   12764:	980ee7fa 48f800c1 90101808 0bc08cc0     .......H........
   12774:	d06e2800 49f5980e 900f0080 30a05808     .(n....I.....X.0
   12784:	20017946 d5190771 d0172c00 06b04ff0     Fy. q....,...O..
   12794:	7b20d507 078047b8 2000d401 2001e006     .. {.G..... ... 
   127a4:	7b20e004 07c047b8 2001d003 d0022800     .. {.G..... .(..
   127b4:	2000e004 6824e7fa d1e82c00 d0622800     ... ..$h.,...(b.
   127c4:	22004be4 980c4621 68a64798 a9094ae2     .K."!F...G.h.J..
   127d4:	47904630 d1562800 4fdb88a0 19c000c0     0F.G.(V....O....
   127e4:	49de8d40 20001841 7912aa08 dd062a00     @..IA.. ...y.*..
   127f4:	540a5c32 aa081c40 42907912 49d8dbf8     2\.T@....y.B...I
   12804:	478868a0 980f49d1 30a05808 07c07940     .h.G.I...X.0@y..
   12814:	a908d003 1d007908 a8089009 98107901     .....y.......y..
   12824:	02098d02 430ab2d2 21038502 8d029810     .......C...!....
   12834:	430a438a 98118502 21008f80 19c000c0     .C.C.......!....
   12844:	980b84c1 28006800 2000d004 d0032800     .....h.(... .(..
   12854:	e018e010 e7f92001 88a1980b 00ca6840     ..... ......@h..
   12864:	888049c0 00c01851 8cc219c0 03d20bd2     .I..Q...........
   12874:	84c2430a 46214abc 4790980b 30609812     .C...J!F...G..`0
   12884:	1c497e01 98117601 28078f80 990ed208     .~I..v.....(....
   12894:	49ae008a 31a05889 07497949 2500d500     ...I.X.1IyI....%
   128a4:	6809990d d01f2900 462a2100 d076438a     ...h.)...!*F.Cv.
   128b4:	d2752807 48ad49ae 90094788 90082000     .(u..I.H.G... ..
   128c4:	8f809811 48a10081 30a05840 07c07940     .......H@X.0@y..
   128d4:	90070fc0 6806980d d0092e00 6830990d     .......h......0h
   128e4:	28006008 e003d002 e7de2101 6048990d     .`.(.....!....H`
   128f4:	d07d2e00 90062000 90039812 9004a806     ..}.. ..........
   12904:	9b079809 93054684 5f752508 90022000     .....F...%u_. ..
   12914:	20019001 98119000 46078e42 2101b2d4     ... ....B..F...!
   12924:	30094628 9b05b280 d0012b00 b2801d00     (F.0.....+......
   12934:	300800c0 8e38b283 d2054298 05403850     ...0..8..B..P8@.
   12944:	42a20e04 b2d4d200 dd0142a5 00640864     ...B.....B..d.d.
   12954:	1a2a4620 db052a01 1c491900 1a2ab2c9      F*..*....I...*.
   12964:	daf92a01 d9014561 e0342500 70019804     .*..aE...%4....p
   12974:	49814f80 4788487d 98004601 d0122800     .O.I}H.G.F...(..
   12984:	90002000 07807ab0 28010f80 2002d009     . ...z.....(... 
   12994:	68f07288 920288c2 90018880 e062e009     .r.h..........b.
   129a4:	2001e058 2001e7f4 98027288 b2801900     X.. ... .r......
   129b4:	42a59002 72ccdd01 72cde000 80c89801     ...B...r...r....
   129c4:	81089802 b2051b28 dc222d00 9b052201     ....(....-".."..
   129d4:	47b89803 2d002501 4668d020 99087e00     ...G.%.- .hF.~..
   129e4:	b2c91809 99099108 b2801a08 e0009009     ................
   129f4:	9812e034 280069c0 9812d01a 60066a00     4....i.(.....j.`
   12a04:	62069812 60302000 280a9808 2500d913     ...b. 0`...(...%
   12a14:	2200e024 98039b05 e7aa47b8 6800980d     $..".....G.....h
   12a24:	d1012800 604e990d 980d6030 e0156006     .(....N`0`...`..
   12a34:	61c69812 980de7e4 2e006806 990dd006     ...a.....h......
   12a44:	60086830 d1012800 6048990d d0002e00     0h.`.(....H`....
   12a54:	e003e750 990d4a49 4790980b d0022d00     P...IJ.....G.-..
   12a64:	980d4947 980b4788 28006800 2000d003     GI...G...h.(... 
   12a74:	d0022800 2001e04b 9811e7fa 28078f80     .(..K.. .......(
   12a84:	9812d245 78c03080 d1402804 4837493a     E....0.x.(@.:I7H
   12a94:	28004788 8882d03b 4b2b2100 18d200d2     .G.(;....!+K....
   12aa4:	88818551 18c900c9 04548d8a 22000c64     Q.........T.d.."
   12ab4:	8881858c 18c900c9 b2e48d0c 8881850c     ................
   12ac4:	00c92401 8d0d18c9 00ad08ad 850d4325     .$..........%C..
   12ad4:	00c98881 8ccc18c9 03e40be4 990b84cc     ................
   12ae4:	68498884 4c1f00e5 192c8889 18c900c9     ..Ih...L..,.....
   12af4:	0bdb8ccb 432303db 990b84cb 29006809     ......#C.....h.)
   12b04:	990bd00d 60086849 6048990b 980b6002     ....Ih.`..H`.`..
   12b14:	28006800 2100d006 d0052900 990be03b     .h.(...!.)..;...
   12b24:	e7f16008 e7f72101 d00a2800 88814a06     .`...!...(...J..
   12b34:	188900c9 0bc98cc9 d0232900 28006800     .........)#..h.(
   12b44:	2800d1f5 e026d025 50804440 20006160     ...(%.&.@D.P`a. 
   12b54:	0000af81 00003817 00010341 50804000     .....8..A....@.P
   12b64:	000093a5 00000466 00003967 200061e4     ....f...g9...a. 
   12b74:	000039bb 00010011 00003945 0000390f     .9......E9...9..
   12b84:	000038b5 00ca8881 18514907 910ab289     .8.......IQ.....
   12b94:	2000e7d7 990a900a 225a980e 4a034350     ... ......Z"PC.J
   12ba4:	84811880 bdf0b013 00000466 50804080     ........f....@.P
   12bb4:	b08bb5ff 2000461c 4994900a 4788980c     .....F. ...I...G
   12bc4:	990b9009 4992008a 21a5588d 07095d49     .......I.X.!I]..
   12bd4:	4a90d504 980b213d e0fd4790 43812102     ...J=!...G...!.C
   12be4:	2000d008 d0072800 78214b8b 980b2223     ... .(...K!x#"..
   12bf4:	e0f14798 e7f52001 49882600 4788980b     .G... ...&.I...G
   12c04:	d11f2803 7901a808 43882001 2000d00b     .(.....y. .C... 
   12c14:	d0172800 5d4020a3 d00d2806 d0042807     .(... @].(...(..
   12c24:	d10f2809 2001e001 4b7be7f2 22237821     .(..... ..{K!x#"
   12c34:	4798980b e0052601 78214b77 980b222a     ...G.&..wK!x*"..
   12c44:	26014798 d15b2e00 3228692a 88a08861     .G.&..[.*i(2a...
   12c54:	4281468c 88e3d815 31f421ff d810428b     .F.B.....!.1.B..
   12c64:	01f62619 d80c42b0 29064661 8921d309     .&...B..aF.)..!.
   12c74:	d80642b1 d304290a 43461c5e 42be008f     .B...)..^.FC...B
   12c84:	221ed305 210f4b64 4798980b 2680e0a4     ..."dK.!...G...&
   12c94:	08765ab6 d80b45b4 d30942b0 8cd03240     .Zv..E...B..@2..
   12ca4:	42831e40 462ed104 8ab03640 d02e4281     @..B...F@6...B..
   12cb4:	2005495b 28004788 9a0cd023 20ff2322     [I. .G.(#..."#. 
   12cc4:	46114d58 47a8300a 70012103 81c18861     XM.F.0.G.!.pa...
   12cd4:	820188a1 80c188e1 81018921 74817aa1     ........!....z.t
   12ce4:	828189a1 82c189e1 83018a21 83418a61     ........!...a.A.
   12cf4:	83818aa1 83c18ae1 84018b21 4788494a     ........!...JI.G
   12d04:	221ae06a 210f4b44 4798980b 4f43e064     j.."DK.!...Gd.CO
   12d14:	47b8980b d0042803 47b8980b d0362804     ...G.(.....G.(6.
   12d24:	9a0ce05a 20ff2322 46114f3e 47b8300a     Z..."#. >O.F.0.G
   12d34:	70012102 80418861 808188a1 81018ab1     .!.pa.A.........
   12d44:	692a2100 e0008a53 4a381c49 429a434a     .!*iS...I.8JJC.B
   12d54:	1e49dbfa 81818141 81c18861 820188a1     ..I.A...a.......
   12d64:	80c188e1 81018921 74817aa1 828189a1     ....!....z.t....
   12d74:	82c189e1 83018a21 83418a61 83818aa1     ....!...a.A.....
   12d84:	83c18ae1 84018b21 47884927 8860e024     ....!...'I.G$.`.
   12d94:	81c84669 820888a0 80c888e0 81088920     iF.......... ...
   12da4:	74887aa0 828889a0 82c889e0 83088a20     .z.t........ ...
   12db4:	83488a60 83888aa0 83c88ae0 84088b20     `.H......... ...
   12dc4:	466a4b1b 980b6929 28004798 2220d007     .KjF)i...G.(.. "
   12dd4:	210f4b11 4798980b b00f980a 2003bdf0     .K.!...G....... 
   12de4:	712835a0 2202980c 7919ab08 91094311     .5(q..."...y.C..
   12df4:	47904a10 46694a10 4790980b 0152227d     .J.G.JiF...G}"R.
   12e04:	4b0e20ff 990c3003 e7e54798 000097c1     . .K.0...G......
   12e14:	20006160 0000bbd5 0000b325 0000f9fd     `a. ....%.......
   12e24:	0001308d 000096a9 000096e5 00000271     .0..........q...
   12e34:	0000d28d 000097e5 0000ad3b 00009b75     ........;...u...
   12e44:	b087b5f0 460e4604 46372500 37403728     .....F.F.%7F(7@7
   12e54:	89628d39 46304633 30a83388 90059306     9.b.3F0F.3.0....
   12e64:	d12a4291 49508fb8 58090080 88a39805     .B*...PI...X....
   12e74:	005b8802 d10a429a 8cfb88e2 42931c52     ..[..B......R..B
   12e84:	460ad105 8a933240 42938ad2 3140d004     ...F@2.....B..@1
   12e94:	23808b8a 838a431a 004988a1 88e18001     ...#.C....I.....
   12ea4:	84f91c49 84b98961 22019906 7981754a     I...a......"Ju.y
   12eb4:	22084311 71814311 493ce003 47882088     .C.".C.q..<I. .G
   12ec4:	2d004605 4628d06e 90013028 687268b3     .F.-n.(F(0...hrh
   12ed4:	683068f1 606a60ab 602860e9 697269b3     .h0h.`j`.`(`.iri
   12ee4:	693069f1 616a61ab 612861e9 6a716ab2     .i0i.aja.a(a.jqj
   12ef4:	62aa6a30 62286269 9801492d 9a014788     0j.bib(b-I...G..
   12f04:	32408fb8 88a08790 98010041 80013080     ..@2....A....0..
   12f14:	1c4988e1 210484d1 990670c1 91039104     ..I....!.p......
   12f24:	99017d8b 758b3160 85938dbb 23017982     .}..`1.u.....y.#
   12f34:	7182431a 82681e98 78628860 00421880     .C.q..h.`.bx..B.
   12f44:	90029805 7d898800 4a1a1810 4790b280     .......}...J...G
   12f54:	98014601 78606601 43484917 38219901     .F...f`x.IHC..!8
   12f64:	607565c8 84b88960 20019903 88607548     .eu``...... Hu`.
   12f74:	990385f8 75087860 28087860 9804d302     ....`x.u`x.(....
   12f84:	75012106 21019802 43087980 71889902     .!.u...!.y.C...q
   12f94:	8d3a8961 b2891e49 d103428a 43082108     a.:.I....B...!.C
   12fa4:	71889902 bdf0b007 20006160 00004219     ...q....`a. .B..
   12fb4:	0000e3b9 0000dfd5 000004e2              ............

00012fc0 <am_hal_ble_num_default_patches>:
   12fc0:	00000003                                ....

00012fc4 <g_AM_HAL_GPIO_DISABLE>:
   12fc4:	00000003                                ....

00012fc8 <g_ui8Bit76Capabilities>:
   12fc8:	02800101 80010180 80800101 80808080     ................
   12fd8:	80808080 80808008 01800180 80808080     ................
   12fe8:	80808080 01800402 01010401 80808080     ................
   12ff8:	00000101                                ....

00012ffc <g_ui8Inpen>:
   12ffc:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   1300c:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   1301c:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   1302c:	00003130                                01..

00013030 <g_ui8NCEtable>:
   13030:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   13040:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   13050:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   13060:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   13070:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   13080:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   13090:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   130a0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   130b0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   130c0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   130d0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   130e0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   130f0:	32221202 43231303                       .."2..#C

000130f8 <g_ui8nCEpins>:
   130f8:	02070707 00080802 01020202 01010101     ................
   13108:	01010101 01010101 01010101 01010101     ................
   13118:	01010101 08010101 01010008 01010101     ................
   13128:	00000101                                ....

0001312c <g_am_hal_mcuctrl_flash_size>:
   1312c:	00004000 00008000 00010000 00020000     .@..............
   1313c:	00040000 00080000 00100000 00200000     .............. .
	...

0001316c <g_am_hal_mcuctrl_sram_size>:
   1316c:	00004000 00008000 00010000 00020000     .@..............
   1317c:	00040000 00080000 00100000 00060000     ................
	...

000131ac <am_hal_pwrctrl_peripheral_control>:
	...
   131b8:	00000001 00000004 00000004 00000002     ................
   131c8:	00000008 00000008 00000004 00000008     ................
   131d8:	00000008 00000008 00000008 00000008     ................
   131e8:	00000010 00000010 00000010 00000020     ............ ...
   131f8:	00000010 00000010 00000040 00000010     ........@.......
   13208:	00000010 00000080 00000004 00000004     ................
   13218:	00000100 00000004 00000004 00000200     ................
   13228:	00000020 00000020 00000400 00000004      ... ...........
   13238:	00000004 00000800 00000040 00000040     ........@...@...
   13248:	00001000 00000080 00000080 00002000     ............. ..
   13258:	00000100 00000100                       ........
