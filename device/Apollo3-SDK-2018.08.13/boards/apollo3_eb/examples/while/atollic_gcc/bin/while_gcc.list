
while_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ae0  0000c000  0000c000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         0000000c  10001000  0000fae0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001d8  1000100c  0000faec  0001100c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0001100c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0001c958  00000000  00000000  00011043  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f41  00000000  00000000  0002d99b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000608  00000000  00000000  000308dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001718  00000000  00000000  00030ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005b64  00000000  00000000  000325fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009cc7  00000000  00000000  00038160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00041e27  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001068  00000000  00000000  00041ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009881  00000000  00000000  00042f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 cd c2 00 00 c5 c2 00 00 35 c3 00 00     ............5...
    c010:	35 c3 00 00 35 c3 00 00 35 c3 00 00 00 00 00 00     5...5...5.......
	...
    c02c:	c9 c2 00 00 c9 c2 00 00 00 00 00 00 c9 c2 00 00     ................
    c03c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c04c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c05c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c06c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c07c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c08c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c09c:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c0ac:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c0bc:	c9 c2 00 00 c9 c2 00 00 c9 c2 00 00 c9 c2 00 00     ................
    c0cc:	c9 c2 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <set_for_min_power>:
// Minimize power
//
//*****************************************************************************
void
set_for_min_power(void)
{
    c1a0:	b530      	push	{r4, r5, lr}
    //
    // Set the default cache configuration
    //
#if AM_APOLLO3_CACHECTRL
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1a2:	4814      	ldr	r0, [pc, #80]	; (c1f4 <set_for_min_power+0x54>)
    CLKGEN->OCTRL_b.OSEL = 1;

    //
    // Turn off the voltage comparator.
    //
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c1a4:	4c14      	ldr	r4, [pc, #80]	; (c1f8 <set_for_min_power+0x58>)
{
    c1a6:	b083      	sub	sp, #12
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1a8:	f001 fbd0 	bl	d94c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1ac:	f001 fbf8 	bl	d9a0 <am_hal_cachectrl_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K);
    c1b0:	200e      	movs	r0, #14
    c1b2:	f002 f889 	bl	e2c8 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_8K_DTCM);
    c1b6:	2001      	movs	r0, #1
    c1b8:	f002 f886 	bl	e2c8 <am_hal_pwrctrl_memory_enable>
    CLKGEN->OCTRL_b.OSEL = 1;
    c1bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
#if AM_PART_APOLLO3
    //
    // Enable LPMMODE.
    //
#if AM_CMSIS_REGS
    uint32_t ui32LPMMode = CACHECTRL_FLASHCFG_LPMMODE_STANDBY;
    c1c0:	a902      	add	r1, sp, #8
    CLKGEN->OCTRL_b.OSEL = 1;
    c1c2:	8993      	ldrh	r3, [r2, #12]
    uint32_t ui32LPMMode = CACHECTRL_FLASHCFG_LPMMODE_STANDBY;
    c1c4:	2001      	movs	r0, #1
    CLKGEN->OCTRL_b.OSEL = 1;
    c1c6:	f043 0c80 	orr.w	ip, r3, #128	; 0x80
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c1ca:	2537      	movs	r5, #55	; 0x37
    CLKGEN->OCTRL_b.OSEL = 1;
    c1cc:	f8a2 c00c 	strh.w	ip, [r2, #12]
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
    c1d0:	60a5      	str	r5, [r4, #8]
    uint32_t ui32LPMMode = CACHECTRL_FLASHCFG_LPMMODE_STANDBY;
    c1d2:	f841 0d04 	str.w	r0, [r1, #-4]!
#else // AM_CMSIS_REGS
    uint32_t ui32LPMMode = AM_REG_CACHECTRL_FLASHCFG_LPMMODE_STANDBY;
#endif // AM_CMSIS_REGS
    if ( am_hal_cachectrl_control(AM_HAL_CACHECTRL_CONTROL_LPMMODE_SET, &ui32LPMMode) )
    c1d6:	200b      	movs	r0, #11
    c1d8:	f001 fbec 	bl	d9b4 <am_hal_cachectrl_control>
    c1dc:	b908      	cbnz	r0, c1e2 <set_for_min_power+0x42>
        am_bsp_uart_printf_disable();
#endif // (PRINT_UART == 1)
        while(1);
    }
#endif // AM_PART_APOLLO3
} // set_for_min_power()
    c1de:	b003      	add	sp, #12
    c1e0:	bd30      	pop	{r4, r5, pc}
        am_bsp_uart_printf_enable();
    c1e2:	f001 fb65 	bl	d8b0 <am_bsp_uart_printf_enable>
        am_util_stdio_printf("ERROR: The setting of LPMMODE failed! Halting program...\n");
    c1e6:	4805      	ldr	r0, [pc, #20]	; (c1fc <set_for_min_power+0x5c>)
    c1e8:	f001 fb04 	bl	d7f4 <am_util_stdio_printf>
        am_bsp_uart_printf_disable();
    c1ec:	f001 fb8e 	bl	d90c <am_bsp_uart_printf_disable>
    c1f0:	e7fe      	b.n	c1f0 <set_for_min_power+0x50>
    c1f2:	bf00      	nop
    c1f4:	0000f68c 	.word	0x0000f68c
    c1f8:	4000c000 	.word	0x4000c000
    c1fc:	0000f60c 	.word	0x0000f60c

0000c200 <main>:
{
    //
    // Set the clock frequency.
    //
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c200:	2100      	movs	r1, #0
{
    c202:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c204:	4608      	mov	r0, r1
    c206:	f001 fc3d 	bl	da84 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
#if AM_APOLLO3_CACHECTRL
    am_hal_cachectrl_config(&am_hal_cachectrl_benchmark);
    c20a:	4820      	ldr	r0, [pc, #128]	; (c28c <main+0x8c>)
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
                         g_ui32HALversion.s.Minor,
                         g_ui32HALversion.s.Revision);
    c20c:	4c20      	ldr	r4, [pc, #128]	; (c290 <main+0x90>)
    am_hal_cachectrl_config(&am_hal_cachectrl_benchmark);
    c20e:	f001 fb9d 	bl	d94c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c212:	f001 fbc5 	bl	d9a0 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c216:	f001 fb31 	bl	d87c <am_bsp_low_power_init>
    am_bsp_uart_printf_enable();
    c21a:	f001 fb49 	bl	d8b0 <am_bsp_uart_printf_enable>
    am_util_stdio_terminal_clear();
    c21e:	f001 fb03 	bl	d828 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro 'while' example.\n\n");
    c222:	481c      	ldr	r0, [pc, #112]	; (c294 <main+0x94>)
    c224:	f001 fae6 	bl	d7f4 <am_util_stdio_printf>
    am_util_stdio_printf("Used for measuring power in an infinite while loop.\n");
    c228:	481b      	ldr	r0, [pc, #108]	; (c298 <main+0x98>)
    c22a:	f001 fae3 	bl	d7f4 <am_util_stdio_printf>
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c22e:	491b      	ldr	r1, [pc, #108]	; (c29c <main+0x9c>)
    c230:	481b      	ldr	r0, [pc, #108]	; (c2a0 <main+0xa0>)
    c232:	f001 fadf 	bl	d7f4 <am_util_stdio_printf>
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c236:	491b      	ldr	r1, [pc, #108]	; (c2a4 <main+0xa4>)
    c238:	481b      	ldr	r0, [pc, #108]	; (c2a8 <main+0xa8>)
    c23a:	f001 fadb 	bl	d7f4 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c23e:	7863      	ldrb	r3, [r4, #1]
    c240:	78a2      	ldrb	r2, [r4, #2]
    c242:	78e1      	ldrb	r1, [r4, #3]
    c244:	4819      	ldr	r0, [pc, #100]	; (c2ac <main+0xac>)
    c246:	f001 fad5 	bl	d7f4 <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c24a:	4a19      	ldr	r2, [pc, #100]	; (c2b0 <main+0xb0>)
    c24c:	4b19      	ldr	r3, [pc, #100]	; (c2b4 <main+0xb4>)
    c24e:	f994 1000 	ldrsb.w	r1, [r4]
    c252:	4819      	ldr	r0, [pc, #100]	; (c2b8 <main+0xb8>)
    c254:	ea12 0121 	ands.w	r1, r2, r1, asr #32
    c258:	bf38      	it	cc
    c25a:	4619      	movcc	r1, r3
    c25c:	f001 faca 	bl	d7f4 <am_util_stdio_printf>
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");

    am_util_stdio_printf("\nEntering while loop...\n");
    c260:	4816      	ldr	r0, [pc, #88]	; (c2bc <main+0xbc>)
    c262:	f001 fac7 	bl	d7f4 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(10000));
    c266:	4816      	ldr	r0, [pc, #88]	; (c2c0 <main+0xc0>)
    c268:	f001 fc68 	bl	db3c <am_hal_flash_delay>
    am_bsp_uart_printf_disable();
    c26c:	f001 fb4e 	bl	d90c <am_bsp_uart_printf_disable>
#endif // PRINT_UART

    //
    // Set MCU for minimal power
    //
    set_for_min_power();
    c270:	f7ff ff96 	bl	c1a0 <set_for_min_power>
    // Enter the while loop
    //
    while(1)
    {
#if AM_CMSIS_REGS
        __NOP();
    c274:	bf00      	nop
        __NOP();
    c276:	bf00      	nop
        __NOP();
    c278:	bf00      	nop
        __NOP();
    c27a:	bf00      	nop
        __NOP();
    c27c:	bf00      	nop
        __NOP();
    c27e:	bf00      	nop
        __NOP();
    c280:	bf00      	nop
        __NOP();
    c282:	bf00      	nop
        __NOP();
    c284:	bf00      	nop
        __NOP();
    c286:	bf00      	nop
    c288:	e7f4      	b.n	c274 <main+0x74>
    c28a:	bf00      	nop
    c28c:	0000f4c8 	.word	0x0000f4c8
    c290:	0000f690 	.word	0x0000f690
    c294:	0000f4dc 	.word	0x0000f4dc
    c298:	0000f4fc 	.word	0x0000f4fc
    c29c:	0000f534 	.word	0x0000f534
    c2a0:	0000f57c 	.word	0x0000f57c
    c2a4:	0000f694 	.word	0x0000f694
    c2a8:	0000f594 	.word	0x0000f594
    c2ac:	0000f5ac 	.word	0x0000f5ac
    c2b0:	0000f4cc 	.word	0x0000f4cc
    c2b4:	0000f4d4 	.word	0x0000f4d4
    c2b8:	0000f5c8 	.word	0x0000f5c8
    c2bc:	0000f5f0 	.word	0x0000f5f0
    c2c0:	000270d7 	.word	0x000270d7

0000c2c4 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    c2c4:	e7fe      	b.n	c2c4 <NMI_Handler>
    c2c6:	bf00      	nop

0000c2c8 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    c2c8:	e7fe      	b.n	c2c8 <DebugMon_Handler>
    c2ca:	bf00      	nop

0000c2cc <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    c2cc:	4811      	ldr	r0, [pc, #68]	; (c314 <zero_loop+0x12>)
    c2ce:	4912      	ldr	r1, [pc, #72]	; (c318 <zero_loop+0x16>)
    c2d0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    c2d2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    c2d6:	4811      	ldr	r0, [pc, #68]	; (c31c <zero_loop+0x1a>)
    c2d8:	6801      	ldr	r1, [r0, #0]
    c2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2de:	6001      	str	r1, [r0, #0]
    c2e0:	f3bf 8f4f 	dsb	sy
    c2e4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    c2e8:	480d      	ldr	r0, [pc, #52]	; (c320 <zero_loop+0x1e>)
    c2ea:	490e      	ldr	r1, [pc, #56]	; (c324 <zero_loop+0x22>)
    c2ec:	4a0e      	ldr	r2, [pc, #56]	; (c328 <zero_loop+0x26>)

0000c2ee <copy_loop>:
    c2ee:	f850 3b04 	ldr.w	r3, [r0], #4
    c2f2:	f841 3b04 	str.w	r3, [r1], #4
    c2f6:	4291      	cmp	r1, r2
    c2f8:	dbf9      	blt.n	c2ee <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    c2fa:	480c      	ldr	r0, [pc, #48]	; (c32c <zero_loop+0x2a>)
    c2fc:	490c      	ldr	r1, [pc, #48]	; (c330 <zero_loop+0x2e>)
    c2fe:	f04f 0200 	mov.w	r2, #0

0000c302 <zero_loop>:
    c302:	4288      	cmp	r0, r1
    c304:	bfb8      	it	lt
    c306:	f840 2b04 	strlt.w	r2, [r0], #4
    c30a:	dbfa      	blt.n	c302 <zero_loop>
    main();
    c30c:	f7ff ff78 	bl	c200 <main>
    __asm("    bkpt     ");
    c310:	be00      	bkpt	0x0000
    c312:	0000      	.short	0x0000
    c314:	e000ed08 	.word	0xe000ed08
    c318:	0000c000 	.word	0x0000c000
    c31c:	e000ed88 	.word	0xe000ed88
    c320:	0000fae0 	.word	0x0000fae0
    c324:	10001000 	.word	0x10001000
    c328:	1000100c 	.word	0x1000100c
    c32c:	1000100c 	.word	0x1000100c
    c330:	100011e4 	.word	0x100011e4

0000c334 <HardFault_Handler>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
HardFault_Handler(void)
{
    __asm("    push    {r7,lr}");
    c334:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    c336:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    c338:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c33a:	f000 f805 	bl	c348 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    c33e:	bd01      	pop	{r0, pc}

0000c340 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c340:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c342:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c344:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c346:	4770      	bx	lr

0000c348 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c348:	b500      	push	{lr}
    c34a:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c34c:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c34e:	4a2e      	ldr	r2, [pc, #184]	; (c408 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c350:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c352:	9301      	str	r3, [sp, #4]
    c354:	9300      	str	r3, [sp, #0]
    c356:	9302      	str	r3, [sp, #8]
    c358:	9303      	str	r3, [sp, #12]
    c35a:	9304      	str	r3, [sp, #16]
    c35c:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c35e:	6811      	ldr	r1, [r2, #0]
    c360:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c362:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c364:	b2d9      	uxtb	r1, r3
    c366:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c36a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c36c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c370:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c376:	0c19      	lsrs	r1, r3, #16
    c378:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c37c:	6912      	ldr	r2, [r2, #16]
    c37e:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c380:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    c384:	078a      	lsls	r2, r1, #30
{
    c386:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c388:	d437      	bmi.n	c3fa <am_util_faultisr_collect_data+0xb2>
    c38a:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c38e:	4619      	mov	r1, r3
    c390:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c392:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c394:	f7ff ffd4 	bl	c340 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c398:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c39a:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c39c:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c39e:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3a0:	f7ff ffce 	bl	c340 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3a4:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3a6:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3a8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3aa:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3ac:	f7ff ffc8 	bl	c340 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3b0:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3b2:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3b4:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3b6:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3b8:	f7ff ffc2 	bl	c340 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3bc:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3be:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3c0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3c2:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3c4:	f7ff ffbc 	bl	c340 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3c8:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3ca:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3cc:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3ce:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3d0:	f7ff ffb6 	bl	c340 <getStackedReg>
    c3d4:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3d6:	4619      	mov	r1, r3
    c3d8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3da:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3dc:	f7ff ffb0 	bl	c340 <getStackedReg>
    c3e0:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3e2:	4619      	mov	r1, r3
    c3e4:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3e6:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3e8:	f7ff ffaa 	bl	c340 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3ec:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3ee:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3f0:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3f2:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3f4:	f001 fe7a 	bl	e0ec <am_hal_mcuctrl_info_get>
    c3f8:	e7fe      	b.n	c3f8 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3fa:	4601      	mov	r1, r0
    c3fc:	2006      	movs	r0, #6
    c3fe:	f7ff ff9f 	bl	c340 <getStackedReg>
    c402:	4602      	mov	r2, r0
    c404:	e7c3      	b.n	c38e <am_util_faultisr_collect_data+0x46>
    c406:	bf00      	nop
    c408:	e000ed28 	.word	0xe000ed28

0000c40c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c410:	b095      	sub	sp, #84	; 0x54
    c412:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    c416:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c418:	2001      	movs	r0, #1
{
    c41a:	460d      	mov	r5, r1
    c41c:	920b      	str	r2, [sp, #44]	; 0x2c
    c41e:	46f4      	mov	ip, lr
    c420:	900a      	str	r0, [sp, #40]	; 0x28
    c422:	e00b      	b.n	c43c <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
    c424:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c428:	4604      	mov	r4, r0
    c42a:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c42c:	2800      	cmp	r0, #0
    c42e:	f000 8083 	beq.w	c538 <uint64_to_str+0x12c>
    c432:	990a      	ldr	r1, [sp, #40]	; 0x28
    c434:	3101      	adds	r1, #1
    c436:	910a      	str	r1, [sp, #40]	; 0x28
    c438:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c43c:	08a3      	lsrs	r3, r4, #2
    c43e:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    c442:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    c446:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c44a:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    c44e:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c450:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
    c452:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c456:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    c45a:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
    c45e:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
    c460:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
    c464:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
    c466:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
    c46a:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
    c46e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
    c472:	d0d7      	beq.n	c424 <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c474:	08a0      	lsrs	r0, r4, #2
    c476:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    c47a:	08ae      	lsrs	r6, r5, #2
    c47c:	9304      	str	r3, [sp, #16]
    c47e:	9605      	str	r6, [sp, #20]
    c480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c484:	086b      	lsrs	r3, r5, #1
    c486:	ea4f 0234 	mov.w	r2, r4, rrx
    c48a:	1882      	adds	r2, r0, r2
    c48c:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
    c490:	0911      	lsrs	r1, r2, #4
    c492:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
    c496:	1812      	adds	r2, r2, r0
    c498:	ea4f 1613 	mov.w	r6, r3, lsr #4
    c49c:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
    c49e:	0a11      	lsrs	r1, r2, #8
    c4a0:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
    c4a4:	0a1e      	lsrs	r6, r3, #8
    c4a6:	9601      	str	r6, [sp, #4]
    c4a8:	9000      	str	r0, [sp, #0]
    c4aa:	e9dd 0100 	ldrd	r0, r1, [sp]
    c4ae:	1882      	adds	r2, r0, r2
    c4b0:	4616      	mov	r6, r2
    c4b2:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
    c4b6:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
    c4b8:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
    c4ba:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
    c4be:	0c1b      	lsrs	r3, r3, #16
    c4c0:	9303      	str	r3, [sp, #12]
    c4c2:	9002      	str	r0, [sp, #8]
    c4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4c8:	eb10 0806 	adds.w	r8, r0, r6
    c4cc:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
    c4d0:	9308      	str	r3, [sp, #32]
    c4d2:	9709      	str	r7, [sp, #36]	; 0x24
    c4d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    c4d8:	eb10 0208 	adds.w	r2, r0, r8
    c4dc:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
    c4e0:	08d1      	lsrs	r1, r2, #3
    c4e2:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
    c4e6:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
    c4e8:	00b8      	lsls	r0, r7, #2
    c4ea:	ea4f 0a86 	mov.w	sl, r6, lsl #2
    c4ee:	eb1a 0906 	adds.w	r9, sl, r6
    c4f2:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
    c4f6:	eb48 0307 	adc.w	r3, r8, r7
    c4fa:	eb19 0209 	adds.w	r2, r9, r9
    c4fe:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    c500:	f114 0b06 	adds.w	fp, r4, #6
    c504:	f145 0500 	adc.w	r5, r5, #0
    c508:	ebbb 0202 	subs.w	r2, fp, r2
    c50c:	eb65 0303 	sbc.w	r3, r5, r3
    c510:	0915      	lsrs	r5, r2, #4
    c512:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
    c516:	091b      	lsrs	r3, r3, #4
    c518:	9206      	str	r2, [sp, #24]
    c51a:	9307      	str	r3, [sp, #28]
    c51c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    c520:	1996      	adds	r6, r2, r6
    c522:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
    c526:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    c52a:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    c52e:	3430      	adds	r4, #48	; 0x30
    c530:	f88c 4000 	strb.w	r4, [ip]
    c534:	4634      	mov	r4, r6
    c536:	e77c      	b.n	c432 <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c538:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c53a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c53c:	2e00      	cmp	r6, #0
    c53e:	d059      	beq.n	c5f4 <uint64_to_str+0x1e8>
    c540:	eb0e 0a00 	add.w	sl, lr, r0
    c544:	46d3      	mov	fp, sl
    c546:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c54a:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c54e:	7037      	strb	r7, [r6, #0]
    c550:	44d4      	add	ip, sl
        while ( ix-- )
    c552:	45de      	cmp	lr, fp
    c554:	4632      	mov	r2, r6
    c556:	f00c 0107 	and.w	r1, ip, #7
    c55a:	bf08      	it	eq
    c55c:	4632      	moveq	r2, r6
    c55e:	d047      	beq.n	c5f0 <uint64_to_str+0x1e4>
    c560:	b349      	cbz	r1, c5b6 <uint64_to_str+0x1aa>
    c562:	2901      	cmp	r1, #1
    c564:	d021      	beq.n	c5aa <uint64_to_str+0x19e>
    c566:	2902      	cmp	r1, #2
    c568:	d01b      	beq.n	c5a2 <uint64_to_str+0x196>
    c56a:	2903      	cmp	r1, #3
    c56c:	d015      	beq.n	c59a <uint64_to_str+0x18e>
    c56e:	2904      	cmp	r1, #4
    c570:	d00f      	beq.n	c592 <uint64_to_str+0x186>
    c572:	2905      	cmp	r1, #5
    c574:	d009      	beq.n	c58a <uint64_to_str+0x17e>
    c576:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
    c578:	bf1c      	itt	ne
    c57a:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    c57e:	f802 1f01 	strbne.w	r1, [r2, #1]!
    c582:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    c586:	f802 3f01 	strb.w	r3, [r2, #1]!
    c58a:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    c58e:	f802 6f01 	strb.w	r6, [r2, #1]!
    c592:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    c596:	f802 4f01 	strb.w	r4, [r2, #1]!
    c59a:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    c59e:	f802 7f01 	strb.w	r7, [r2, #1]!
    c5a2:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    c5a6:	f802 5f01 	strb.w	r5, [r2, #1]!
    c5aa:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    c5ae:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
    c5b2:	45de      	cmp	lr, fp
    c5b4:	d01b      	beq.n	c5ee <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
    c5b6:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    c5ba:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    c5be:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    c5c2:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    c5c6:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    c5ca:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    c5ce:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    c5d2:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    c5d6:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
    c5d8:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
    c5da:	7093      	strb	r3, [r2, #2]
    c5dc:	f882 9003 	strb.w	r9, [r2, #3]
    c5e0:	7117      	strb	r7, [r2, #4]
    c5e2:	7156      	strb	r6, [r2, #5]
    c5e4:	7195      	strb	r5, [r2, #6]
    c5e6:	71d4      	strb	r4, [r2, #7]
    c5e8:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
    c5ec:	d1e3      	bne.n	c5b6 <uint64_to_str+0x1aa>
    c5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c5f0:	2100      	movs	r1, #0
    c5f2:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    c5f4:	b015      	add	sp, #84	; 0x54
    c5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5fa:	bf00      	nop

0000c5fc <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c5fc:	4b01      	ldr	r3, [pc, #4]	; (c604 <am_util_stdio_printf_init+0x8>)
    c5fe:	6018      	str	r0, [r3, #0]
    c600:	4770      	bx	lr
    c602:	bf00      	nop
    c604:	10001118 	.word	0x10001118

0000c608 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c60c:	4680      	mov	r8, r0
    c60e:	b0b1      	sub	sp, #196	; 0xc4
    c610:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c612:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c616:	780b      	ldrb	r3, [r1, #0]
    c618:	b183      	cbz	r3, c63c <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c61a:	2b25      	cmp	r3, #37	; 0x25
    c61c:	d017      	beq.n	c64e <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c61e:	f1b8 0f00 	cmp.w	r8, #0
    c622:	d005      	beq.n	c630 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c624:	2b0a      	cmp	r3, #10
    c626:	d038      	beq.n	c69a <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c628:	f888 3000 	strb.w	r3, [r8]
    c62c:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
    c630:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    c632:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    c634:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    c638:	2b00      	cmp	r3, #0
    c63a:	d1ee      	bne.n	c61a <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c63c:	f1b8 0f00 	cmp.w	r8, #0
    c640:	d001      	beq.n	c646 <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    c642:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
    c646:	4648      	mov	r0, r9
    c648:	b031      	add	sp, #196	; 0xc4
    c64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c64e:	784a      	ldrb	r2, [r1, #1]
    c650:	2a30      	cmp	r2, #48	; 0x30
    c652:	d03b      	beq.n	c6cc <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
    c654:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    c656:	2520      	movs	r5, #32
    if ( *pcStr == '-')
    c658:	2a2d      	cmp	r2, #45	; 0x2d
    c65a:	d02c      	beq.n	c6b6 <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c65c:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c660:	2809      	cmp	r0, #9
    c662:	d837      	bhi.n	c6d4 <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
    c664:	2100      	movs	r1, #0
    bool bNeg = false;
    c666:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c668:	4630      	mov	r0, r6
        bNeg = true;
    c66a:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
    c66e:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
    c672:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c676:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    c67a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c67e:	2c09      	cmp	r4, #9
        ++uCnt;
    c680:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    c684:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c688:	d9f1      	bls.n	c66e <am_util_stdio_vsprintf+0x66>
    c68a:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
    c68c:	f1be 0f00 	cmp.w	lr, #0
    c690:	f041 80a1 	bne.w	d7d6 <am_util_stdio_vsprintf+0x11ce>
    c694:	4664      	mov	r4, ip
    c696:	7832      	ldrb	r2, [r6, #0]
    c698:	e01e      	b.n	c6d8 <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c69a:	4ebd      	ldr	r6, [pc, #756]	; (c990 <am_util_stdio_vsprintf+0x388>)
    c69c:	7837      	ldrb	r7, [r6, #0]
    c69e:	2f00      	cmp	r7, #0
    c6a0:	d0c2      	beq.n	c628 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    c6a2:	f04f 0c0d 	mov.w	ip, #13
    c6a6:	f888 c000 	strb.w	ip, [r8]
    c6aa:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    c6ac:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    c6b0:	f108 0801 	add.w	r8, r8, #1
    c6b4:	e7b8      	b.n	c628 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6b6:	7872      	ldrb	r2, [r6, #1]
    c6b8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    c6bc:	2c09      	cmp	r4, #9
        pcStr++;
    c6be:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6c2:	f200 8611 	bhi.w	d2e8 <am_util_stdio_vsprintf+0xce0>
        uCnt++;
    c6c6:	2101      	movs	r1, #1
        bNeg = true;
    c6c8:	468e      	mov	lr, r1
    c6ca:	e7ce      	b.n	c66a <am_util_stdio_vsprintf+0x62>
    c6cc:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    c6ce:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
    c6d0:	2530      	movs	r5, #48	; 0x30
    c6d2:	e7c1      	b.n	c658 <am_util_stdio_vsprintf+0x50>
    c6d4:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6d6:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c6d8:	2a73      	cmp	r2, #115	; 0x73
    c6da:	f000 8304 	beq.w	cce6 <am_util_stdio_vsprintf+0x6de>
    c6de:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
    c6e2:	2a2e      	cmp	r2, #46	; 0x2e
    c6e4:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
    c6e8:	f000 82ae 	beq.w	cc48 <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
    c6ec:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
    c6f0:	2a6c      	cmp	r2, #108	; 0x6c
    c6f2:	f000 82a3 	beq.w	cc3c <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
    c6f6:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    c6fa:	2832      	cmp	r0, #50	; 0x32
    c6fc:	f200 8294 	bhi.w	cc28 <am_util_stdio_vsprintf+0x620>
    c700:	e8df f010 	tbh	[pc, r0, lsl #1]
    c704:	02920115 	.word	0x02920115
    c708:	02920292 	.word	0x02920292
    c70c:	02920292 	.word	0x02920292
    c710:	02920292 	.word	0x02920292
    c714:	02920292 	.word	0x02920292
    c718:	02920292 	.word	0x02920292
    c71c:	02920292 	.word	0x02920292
    c720:	02920292 	.word	0x02920292
    c724:	02920292 	.word	0x02920292
    c728:	02920033 	.word	0x02920033
    c72c:	02920292 	.word	0x02920292
    c730:	02920292 	.word	0x02920292
    c734:	02920292 	.word	0x02920292
    c738:	02920292 	.word	0x02920292
    c73c:	01360292 	.word	0x01360292
    c740:	0292014a 	.word	0x0292014a
    c744:	02920115 	.word	0x02920115
    c748:	014a0292 	.word	0x014a0292
    c74c:	02920292 	.word	0x02920292
    c750:	02920292 	.word	0x02920292
    c754:	02920292 	.word	0x02920292
    c758:	02920292 	.word	0x02920292
    c75c:	02f00292 	.word	0x02f00292
    c760:	01f20292 	.word	0x01f20292
    c764:	02920292 	.word	0x02920292
    c768:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
    c76a:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c76e:	f8db 2000 	ldr.w	r2, [fp]
    c772:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
    c774:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    c778:	2c00      	cmp	r4, #0
    c77a:	d06d      	beq.n	c858 <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
    c77c:	ea52 0103 	orrs.w	r1, r2, r3
    c780:	bf0c      	ite	eq
    c782:	f04f 0e01 	moveq.w	lr, #1
    c786:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    c78a:	ea52 0103 	orrs.w	r1, r2, r3
    c78e:	d00b      	beq.n	c7a8 <am_util_stdio_vsprintf+0x1a0>
    c790:	4610      	mov	r0, r2
    c792:	4619      	mov	r1, r3
        ui64Val >>= 4;
    c794:	090c      	lsrs	r4, r1, #4
    c796:	0900      	lsrs	r0, r0, #4
    c798:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c79c:	4621      	mov	r1, r4
    while ( ui64Val )
    c79e:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
    c7a2:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c7a6:	d1f5      	bne.n	c794 <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
    c7a8:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    c7ac:	2f00      	cmp	r7, #0
    c7ae:	f340 855f 	ble.w	d270 <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
    c7b2:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
    c7b6:	f1b8 0f00 	cmp.w	r8, #0
    c7ba:	f000 855a 	beq.w	d272 <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
    c7be:	4641      	mov	r1, r8
    c7c0:	f00a 0707 	and.w	r7, sl, #7
    c7c4:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c7c8:	f10a 30ff 	add.w	r0, sl, #4294967295
    c7cc:	eba1 0408 	sub.w	r4, r1, r8
    c7d0:	f1ba 0f00 	cmp.w	sl, #0
    c7d4:	d03d      	beq.n	c852 <am_util_stdio_vsprintf+0x24a>
    c7d6:	b32f      	cbz	r7, c824 <am_util_stdio_vsprintf+0x21c>
    c7d8:	2f01      	cmp	r7, #1
    c7da:	d01c      	beq.n	c816 <am_util_stdio_vsprintf+0x20e>
    c7dc:	2f02      	cmp	r7, #2
    c7de:	d017      	beq.n	c810 <am_util_stdio_vsprintf+0x208>
    c7e0:	2f03      	cmp	r7, #3
    c7e2:	d012      	beq.n	c80a <am_util_stdio_vsprintf+0x202>
    c7e4:	2f04      	cmp	r7, #4
    c7e6:	d00d      	beq.n	c804 <am_util_stdio_vsprintf+0x1fc>
    c7e8:	2f05      	cmp	r7, #5
    c7ea:	d008      	beq.n	c7fe <am_util_stdio_vsprintf+0x1f6>
    c7ec:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
    c7ee:	bf1c      	itt	ne
    c7f0:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
    c7f4:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
    c7f8:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c7fc:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c7fe:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c802:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c804:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c808:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c80a:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c80e:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c810:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c814:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    c816:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    c81a:	3801      	subs	r0, #1
    c81c:	1c47      	adds	r7, r0, #1
    c81e:	eba1 0408 	sub.w	r4, r1, r8
    c822:	d016      	beq.n	c852 <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
    c824:	468a      	mov	sl, r1
    while ( i32NumChars-- )
    c826:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
    c828:	f80a 5b01 	strb.w	r5, [sl], #1
    c82c:	3108      	adds	r1, #8
    c82e:	f88a 5000 	strb.w	r5, [sl]
    c832:	f801 5c06 	strb.w	r5, [r1, #-6]
    c836:	f801 5c05 	strb.w	r5, [r1, #-5]
    c83a:	f801 5c04 	strb.w	r5, [r1, #-4]
    c83e:	f801 5c03 	strb.w	r5, [r1, #-3]
    c842:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
    c846:	1c47      	adds	r7, r0, #1
    c848:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
    c84c:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
    c850:	d1e8      	bne.n	c824 <am_util_stdio_vsprintf+0x21c>
    c852:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
    c854:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
    c856:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    c858:	ea52 0103 	orrs.w	r1, r2, r3
    c85c:	f040 821a 	bne.w	cc94 <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
    c860:	f04f 0530 	mov.w	r5, #48	; 0x30
    c864:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
    c868:	2701      	movs	r7, #1
    c86a:	f1b8 0f00 	cmp.w	r8, #0
    c86e:	f000 8235 	beq.w	ccdc <am_util_stdio_vsprintf+0x6d4>
    c872:	4639      	mov	r1, r7
        while (ix--)
    c874:	2000      	movs	r0, #0
    c876:	ac2b      	add	r4, sp, #172	; 0xac
    c878:	1863      	adds	r3, r4, r1
    c87a:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
    c87e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    c882:	f888 c000 	strb.w	ip, [r8]
    c886:	1e4d      	subs	r5, r1, #1
        while (ix--)
    c888:	45a2      	cmp	sl, r4
    c88a:	f005 0107 	and.w	r1, r5, #7
    c88e:	4643      	mov	r3, r8
    c890:	d047      	beq.n	c922 <am_util_stdio_vsprintf+0x31a>
    c892:	b359      	cbz	r1, c8ec <am_util_stdio_vsprintf+0x2e4>
    c894:	2901      	cmp	r1, #1
    c896:	d023      	beq.n	c8e0 <am_util_stdio_vsprintf+0x2d8>
    c898:	2902      	cmp	r1, #2
    c89a:	d01d      	beq.n	c8d8 <am_util_stdio_vsprintf+0x2d0>
    c89c:	2903      	cmp	r1, #3
    c89e:	d017      	beq.n	c8d0 <am_util_stdio_vsprintf+0x2c8>
    c8a0:	2904      	cmp	r1, #4
    c8a2:	d011      	beq.n	c8c8 <am_util_stdio_vsprintf+0x2c0>
    c8a4:	2905      	cmp	r1, #5
    c8a6:	d00b      	beq.n	c8c0 <am_util_stdio_vsprintf+0x2b8>
    c8a8:	2906      	cmp	r1, #6
    c8aa:	d005      	beq.n	c8b8 <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
    c8ac:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    c8b0:	f888 2001 	strb.w	r2, [r8, #1]
    c8b4:	f108 0301 	add.w	r3, r8, #1
    c8b8:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    c8bc:	f803 5f01 	strb.w	r5, [r3, #1]!
    c8c0:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    c8c4:	f803 cf01 	strb.w	ip, [r3, #1]!
    c8c8:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    c8cc:	f803 1f01 	strb.w	r1, [r3, #1]!
    c8d0:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    c8d4:	f803 2f01 	strb.w	r2, [r3, #1]!
    c8d8:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    c8dc:	f803 5f01 	strb.w	r5, [r3, #1]!
    c8e0:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    c8e4:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
    c8e8:	45a2      	cmp	sl, r4
    c8ea:	d01a      	beq.n	c922 <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
    c8ec:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    c8f0:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
    c8f4:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    c8f8:	705a      	strb	r2, [r3, #1]
    c8fa:	70dd      	strb	r5, [r3, #3]
    c8fc:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
    c900:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
    c904:	7099      	strb	r1, [r3, #2]
    c906:	711a      	strb	r2, [r3, #4]
    c908:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    c90c:	715d      	strb	r5, [r3, #5]
    c90e:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
    c912:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
    c916:	7199      	strb	r1, [r3, #6]
        while (ix--)
    c918:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
    c91a:	71da      	strb	r2, [r3, #7]
    c91c:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
    c920:	d1e4      	bne.n	c8ec <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
    c922:	4440      	add	r0, r8
    c924:	2400      	movs	r4, #0
                    pcBuf += iVal;
    c926:	44b8      	add	r8, r7
        *pcBuf = 0;
    c928:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
    c92a:	44b9      	add	r9, r7
                break;
    c92c:	e01e      	b.n	c96c <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
    c92e:	f1b8 0f00 	cmp.w	r8, #0
    c932:	d01b      	beq.n	c96c <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
    c934:	f10b 0307 	add.w	r3, fp, #7
    c938:	f023 0b07 	bic.w	fp, r3, #7
    c93c:	e9db 0100 	ldrd	r0, r1, [fp]
    c940:	f7ff fbde 	bl	c100 <__aeabi_d2f>
    c944:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c948:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c94c:	2014      	movs	r0, #20
    if (fValue == 0.0f)
    c94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
    c952:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
    c956:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
    c95a:	f040 848d 	bne.w	d278 <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c95e:	490d      	ldr	r1, [pc, #52]	; (c994 <am_util_stdio_vsprintf+0x38c>)
    c960:	f8c8 1000 	str.w	r1, [r8]
    c964:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
    c968:	44d1      	add	r9, sl
                    pcBuf += iVal;
    c96a:	44d0      	add	r8, sl
        ++pcFmt;
    c96c:	1c71      	adds	r1, r6, #1
    c96e:	e652      	b.n	c616 <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c970:	f10b 0404 	add.w	r4, fp, #4
    c974:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
    c978:	f1b8 0f00 	cmp.w	r8, #0
    c97c:	d003      	beq.n	c986 <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
    c97e:	f888 1000 	strb.w	r1, [r8]
    c982:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    c986:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c98a:	46a3      	mov	fp, r4
                break;
    c98c:	e7ee      	b.n	c96c <am_util_stdio_vsprintf+0x364>
    c98e:	bf00      	nop
    c990:	1000100c 	.word	0x1000100c
    c994:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c998:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
    c99c:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c9a0:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    c9a2:	2800      	cmp	r0, #0
    c9a4:	f171 0300 	sbcs.w	r3, r1, #0
    c9a8:	f2c0 83ac 	blt.w	d104 <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
    c9ac:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    c9b0:	2c00      	cmp	r4, #0
    c9b2:	f000 83ba 	beq.w	d12a <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
    c9b6:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    c9ba:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
    c9bc:	bf0c      	ite	eq
    c9be:	2401      	moveq	r4, #1
    c9c0:	2400      	movne	r4, #0
    while ( ui64Val )
    c9c2:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    c9c4:	460b      	mov	r3, r1
                    bNeg = false;
    c9c6:	bf18      	it	ne
    c9c8:	2000      	movne	r0, #0
    while ( ui64Val )
    c9ca:	f000 86ba 	beq.w	d742 <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
    c9ce:	901b      	str	r0, [sp, #108]	; 0x6c
    c9d0:	9620      	str	r6, [sp, #128]	; 0x80
    c9d2:	9521      	str	r5, [sp, #132]	; 0x84
    c9d4:	9722      	str	r7, [sp, #136]	; 0x88
    c9d6:	941a      	str	r4, [sp, #104]	; 0x68
    c9d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    c9dc:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    c9e0:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    c9e4:	e009      	b.n	c9fa <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9e6:	464a      	mov	r2, r9
    c9e8:	2300      	movs	r3, #0
        ++iNDigits;
    c9ea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    c9ec:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    c9f0:	f105 0501 	add.w	r5, r5, #1
    c9f4:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    c9f6:	f000 83a5 	beq.w	d144 <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c9fa:	0896      	lsrs	r6, r2, #2
    c9fc:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
    ca00:	089f      	lsrs	r7, r3, #2
    ca02:	970b      	str	r7, [sp, #44]	; 0x2c
    ca04:	950a      	str	r5, [sp, #40]	; 0x28
    ca06:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    ca0a:	0859      	lsrs	r1, r3, #1
    ca0c:	ea4f 0032 	mov.w	r0, r2, rrx
    ca10:	1820      	adds	r0, r4, r0
    ca12:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    ca16:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ca18:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    ca1a:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
    ca1e:	0908      	lsrs	r0, r1, #4
    ca20:	9005      	str	r0, [sp, #20]
    ca22:	9504      	str	r5, [sp, #16]
    ca24:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ca28:	19a0      	adds	r0, r4, r6
    ca2a:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    ca2e:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
    ca30:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    ca32:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
    ca36:	0a08      	lsrs	r0, r1, #8
    ca38:	9007      	str	r0, [sp, #28]
    ca3a:	9506      	str	r5, [sp, #24]
    ca3c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    ca40:	19a0      	adds	r0, r4, r6
    ca42:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    ca46:	0c06      	lsrs	r6, r0, #16
    ca48:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    ca4c:	eb10 070a 	adds.w	r7, r0, sl
    ca50:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    ca54:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    ca58:	2400      	movs	r4, #0
    ca5a:	900e      	str	r0, [sp, #56]	; 0x38
    ca5c:	940f      	str	r4, [sp, #60]	; 0x3c
    ca5e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ca62:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    ca64:	eb18 0807 	adds.w	r8, r8, r7
    ca68:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ca6c:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    ca70:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    ca72:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    ca76:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    ca78:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    ca7c:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    ca7e:	9312      	str	r3, [sp, #72]	; 0x48
    ca80:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
    ca84:	08ff      	lsrs	r7, r7, #3
    ca86:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    ca8a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
    ca8e:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    ca92:	00bd      	lsls	r5, r7, #2
    ca94:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    ca98:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    ca9a:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca9e:	f102 0e06 	add.w	lr, r2, #6
    caa2:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    caa6:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    caaa:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    caae:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    cab2:	d098      	beq.n	c9e6 <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
    cab4:	eb10 0e06 	adds.w	lr, r0, r6
    cab8:	4179      	adcs	r1, r7
    caba:	eb1e 000e 	adds.w	r0, lr, lr
    cabe:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cac0:	3206      	adds	r2, #6
    cac2:	f143 0300 	adc.w	r3, r3, #0
    cac6:	1a15      	subs	r5, r2, r0
    cac8:	eb63 0401 	sbc.w	r4, r3, r1
    cacc:	0929      	lsrs	r1, r5, #4
    cace:	0922      	lsrs	r2, r4, #4
    cad0:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cad4:	9016      	str	r0, [sp, #88]	; 0x58
    cad6:	9217      	str	r2, [sp, #92]	; 0x5c
    cad8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    cadc:	1992      	adds	r2, r2, r6
    cade:	417b      	adcs	r3, r7
    cae0:	e783      	b.n	c9ea <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
    cae2:	f04f 0c01 	mov.w	ip, #1
    cae6:	e642      	b.n	c76e <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cae8:	f8db 1000 	ldr.w	r1, [fp]
    caec:	2200      	movs	r2, #0
    caee:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
    caf2:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    caf6:	2c00      	cmp	r4, #0
    caf8:	f000 8269 	beq.w	cfce <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
    cafc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    cb00:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
    cb04:	4602      	mov	r2, r0
    cb06:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    cb08:	bf0c      	ite	eq
    cb0a:	2401      	moveq	r4, #1
    cb0c:	2400      	movne	r4, #0
    while ( ui64Val )
    cb0e:	ea52 0103 	orrs.w	r1, r2, r3
    cb12:	f000 81fe 	beq.w	cf12 <am_util_stdio_vsprintf+0x90a>
    cb16:	961b      	str	r6, [sp, #108]	; 0x6c
    cb18:	9520      	str	r5, [sp, #128]	; 0x80
    cb1a:	9721      	str	r7, [sp, #132]	; 0x84
    cb1c:	941a      	str	r4, [sp, #104]	; 0x68
    cb1e:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    cb22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    cb26:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    cb2a:	e009      	b.n	cb40 <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb2c:	464a      	mov	r2, r9
    cb2e:	2300      	movs	r3, #0
        ++iNDigits;
    cb30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cb32:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cb36:	f105 0501 	add.w	r5, r5, #1
    cb3a:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    cb3c:	f000 81db 	beq.w	cef6 <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb40:	0895      	lsrs	r5, r2, #2
    cb42:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
    cb46:	089c      	lsrs	r4, r3, #2
    cb48:	9708      	str	r7, [sp, #32]
    cb4a:	9409      	str	r4, [sp, #36]	; 0x24
    cb4c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    cb50:	0859      	lsrs	r1, r3, #1
    cb52:	ea4f 0032 	mov.w	r0, r2, rrx
    cb56:	1820      	adds	r0, r4, r0
    cb58:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    cb5c:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cb5e:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    cb60:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
    cb64:	0908      	lsrs	r0, r1, #4
    cb66:	9001      	str	r0, [sp, #4]
    cb68:	9400      	str	r4, [sp, #0]
    cb6a:	e9dd 4500 	ldrd	r4, r5, [sp]
    cb6e:	19a0      	adds	r0, r4, r6
    cb70:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    cb74:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
    cb76:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    cb78:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    cb7c:	0a08      	lsrs	r0, r1, #8
    cb7e:	9003      	str	r0, [sp, #12]
    cb80:	9402      	str	r4, [sp, #8]
    cb82:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    cb86:	19a0      	adds	r0, r4, r6
    cb88:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    cb8c:	0c06      	lsrs	r6, r0, #16
    cb8e:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    cb92:	eb10 070a 	adds.w	r7, r0, sl
    cb96:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    cb9a:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    cb9e:	2400      	movs	r4, #0
    cba0:	900c      	str	r0, [sp, #48]	; 0x30
    cba2:	940d      	str	r4, [sp, #52]	; 0x34
    cba4:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cba8:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    cbaa:	eb18 0807 	adds.w	r8, r8, r7
    cbae:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cbb2:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    cbb6:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    cbb8:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    cbbc:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    cbbe:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    cbc2:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    cbc4:	9310      	str	r3, [sp, #64]	; 0x40
    cbc6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
    cbca:	08ff      	lsrs	r7, r7, #3
    cbcc:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    cbd0:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
    cbd4:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    cbd8:	00bd      	lsls	r5, r7, #2
    cbda:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    cbde:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    cbe0:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbe4:	f102 0e06 	add.w	lr, r2, #6
    cbe8:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    cbec:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    cbf0:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbf4:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    cbf8:	d098      	beq.n	cb2c <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
    cbfa:	eb10 0e06 	adds.w	lr, r0, r6
    cbfe:	4179      	adcs	r1, r7
    cc00:	eb1e 000e 	adds.w	r0, lr, lr
    cc04:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    cc06:	3206      	adds	r2, #6
    cc08:	f143 0300 	adc.w	r3, r3, #0
    cc0c:	1a15      	subs	r5, r2, r0
    cc0e:	eb63 0401 	sbc.w	r4, r3, r1
    cc12:	0929      	lsrs	r1, r5, #4
    cc14:	0922      	lsrs	r2, r4, #4
    cc16:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    cc1a:	9014      	str	r0, [sp, #80]	; 0x50
    cc1c:	9215      	str	r2, [sp, #84]	; 0x54
    cc1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    cc22:	1992      	adds	r2, r2, r6
    cc24:	417b      	adcs	r3, r7
    cc26:	e783      	b.n	cb30 <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
    cc28:	f1b8 0f00 	cmp.w	r8, #0
    cc2c:	d003      	beq.n	cc36 <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
    cc2e:	f888 2000 	strb.w	r2, [r8]
    cc32:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    cc36:	f109 0901 	add.w	r9, r9, #1
                break;
    cc3a:	e697      	b.n	c96c <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc3c:	7872      	ldrb	r2, [r6, #1]
    cc3e:	2a6c      	cmp	r2, #108	; 0x6c
    cc40:	f000 81db 	beq.w	cffa <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
    cc44:	3601      	adds	r6, #1
    cc46:	e556      	b.n	c6f6 <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
    cc48:	7873      	ldrb	r3, [r6, #1]
    cc4a:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
    cc4c:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
    cc50:	f000 81c8 	beq.w	cfe4 <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc54:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    cc58:	2e09      	cmp	r6, #9
    cc5a:	f200 8349 	bhi.w	d2f0 <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
    cc5e:	2200      	movs	r2, #0
    bool bNeg = false;
    cc60:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc62:	4606      	mov	r6, r0
    bool bNeg = false;
    cc64:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
    cc68:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
    cc6c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc70:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    cc74:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    cc78:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    cc7c:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
    cc80:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc84:	d9f0      	bls.n	cc68 <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
    cc86:	f1bc 0f00 	cmp.w	ip, #0
    cc8a:	f000 8334 	beq.w	d2f6 <am_util_stdio_vsprintf+0xcee>
    cc8e:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
    cc92:	e330      	b.n	d2f6 <am_util_stdio_vsprintf+0xcee>
    cc94:	f1bc 0f00 	cmp.w	ip, #0
    cc98:	bf14      	ite	ne
    cc9a:	2727      	movne	r7, #39	; 0x27
    cc9c:	2707      	moveq	r7, #7
    cc9e:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
    cca2:	2000      	movs	r0, #0
    cca4:	e000      	b.n	cca8 <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
    cca6:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
    cca8:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    ccac:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
    ccb0:	2909      	cmp	r1, #9
    ccb2:	bf88      	it	hi
    ccb4:	4671      	movhi	r1, lr
        ui64Val >>= 4;
    ccb6:	0912      	lsrs	r2, r2, #4
    ccb8:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    ccbc:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    ccc0:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
    ccc2:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    ccc4:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
    ccc8:	f804 1f01 	strb.w	r1, [r4, #1]!
    cccc:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
    ccd0:	d1e9      	bne.n	cca6 <am_util_stdio_vsprintf+0x69e>
    ccd2:	460f      	mov	r7, r1
    if (pcBuf)
    ccd4:	f1b8 0f00 	cmp.w	r8, #0
    ccd8:	f47f adcd 	bne.w	c876 <am_util_stdio_vsprintf+0x26e>
    ccdc:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    cce0:	44b9      	add	r9, r7
    cce2:	e643      	b.n	c96c <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
    cce4:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
    cce6:	f8db 0000 	ldr.w	r0, [fp]
    ccea:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
    ccee:	2800      	cmp	r0, #0
    ccf0:	f000 8085 	beq.w	cdfe <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
    ccf4:	7801      	ldrb	r1, [r0, #0]
    ccf6:	1c42      	adds	r2, r0, #1
    ccf8:	4613      	mov	r3, r2
    ccfa:	2900      	cmp	r1, #0
    ccfc:	f000 84f3 	beq.w	d6e6 <am_util_stdio_vsprintf+0x10de>
    cd00:	eba3 0e00 	sub.w	lr, r3, r0
    cd04:	f813 7b01 	ldrb.w	r7, [r3], #1
    cd08:	2f00      	cmp	r7, #0
    cd0a:	d1f9      	bne.n	cd00 <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
    cd0c:	2c00      	cmp	r4, #0
    cd0e:	4677      	mov	r7, lr
    cd10:	dd01      	ble.n	cd16 <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
    cd12:	4574      	cmp	r4, lr
    cd14:	d877      	bhi.n	ce06 <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
    cd16:	f1b8 0f00 	cmp.w	r8, #0
    cd1a:	f000 80e1 	beq.w	cee0 <am_util_stdio_vsprintf+0x8d8>
    cd1e:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
    cd22:	f808 1b01 	strb.w	r1, [r8], #1
    cd26:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
    cd2a:	f812 1b01 	ldrb.w	r1, [r2], #1
    cd2e:	2900      	cmp	r1, #0
    cd30:	d1f7      	bne.n	cd22 <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
    cd32:	2c00      	cmp	r4, #0
    cd34:	f43f ae1a 	beq.w	c96c <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
    cd38:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
    cd3a:	42bb      	cmp	r3, r7
    cd3c:	f67f ae16 	bls.w	c96c <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
    cd40:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
    cd42:	2a00      	cmp	r2, #0
    cd44:	f340 84c3 	ble.w	d6ce <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
    cd48:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
    cd4a:	f1b8 0f00 	cmp.w	r8, #0
    cd4e:	f000 84bf 	beq.w	d6d0 <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
    cd52:	4643      	mov	r3, r8
    cd54:	f007 0407 	and.w	r4, r7, #7
    cd58:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cd5c:	f107 3cff 	add.w	ip, r7, #4294967295
    cd60:	eba3 0108 	sub.w	r1, r3, r8
    cd64:	2f00      	cmp	r7, #0
    cd66:	d045      	beq.n	cdf4 <am_util_stdio_vsprintf+0x7ec>
    cd68:	b364      	cbz	r4, cdc4 <am_util_stdio_vsprintf+0x7bc>
    cd6a:	2c01      	cmp	r4, #1
    cd6c:	d021      	beq.n	cdb2 <am_util_stdio_vsprintf+0x7aa>
    cd6e:	2c02      	cmp	r4, #2
    cd70:	d01b      	beq.n	cdaa <am_util_stdio_vsprintf+0x7a2>
    cd72:	2c03      	cmp	r4, #3
    cd74:	d015      	beq.n	cda2 <am_util_stdio_vsprintf+0x79a>
    cd76:	2c04      	cmp	r4, #4
    cd78:	d00f      	beq.n	cd9a <am_util_stdio_vsprintf+0x792>
    cd7a:	2c05      	cmp	r4, #5
    cd7c:	d009      	beq.n	cd92 <am_util_stdio_vsprintf+0x78a>
    cd7e:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    cd80:	bf1c      	itt	ne
    cd82:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    cd86:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cd8a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cd8e:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cd92:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cd96:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cd9a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cd9e:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cda2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cda6:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cdaa:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cdae:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    cdb2:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cdb6:	f10c 3cff 	add.w	ip, ip, #4294967295
    cdba:	f11c 0701 	adds.w	r7, ip, #1
    cdbe:	eba3 0108 	sub.w	r1, r3, r8
    cdc2:	d017      	beq.n	cdf4 <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
    cdc4:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    cdc6:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
    cdca:	f800 5b01 	strb.w	r5, [r0], #1
    cdce:	3308      	adds	r3, #8
    cdd0:	7005      	strb	r5, [r0, #0]
    cdd2:	f803 5c06 	strb.w	r5, [r3, #-6]
    cdd6:	f803 5c05 	strb.w	r5, [r3, #-5]
    cdda:	f803 5c04 	strb.w	r5, [r3, #-4]
    cdde:	f803 5c03 	strb.w	r5, [r3, #-3]
    cde2:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cde6:	f11c 0001 	adds.w	r0, ip, #1
    cdea:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    cdee:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    cdf2:	d1e7      	bne.n	cdc4 <am_util_stdio_vsprintf+0x7bc>
    cdf4:	460d      	mov	r5, r1
    cdf6:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cdf8:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    cdfa:	4491      	add	r9, r2
    cdfc:	e5b6      	b.n	c96c <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    cdfe:	2c00      	cmp	r4, #0
    ce00:	f340 8443 	ble.w	d68a <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    ce04:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    ce06:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    ce08:	2a00      	cmp	r2, #0
    ce0a:	f340 8464 	ble.w	d6d6 <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    ce0e:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    ce12:	f1b8 0f00 	cmp.w	r8, #0
    ce16:	d05c      	beq.n	ced2 <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    ce18:	4643      	mov	r3, r8
    ce1a:	f00e 0407 	and.w	r4, lr, #7
    ce1e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce22:	f10e 3aff 	add.w	sl, lr, #4294967295
    ce26:	eba3 0c08 	sub.w	ip, r3, r8
    ce2a:	f1be 0f00 	cmp.w	lr, #0
    ce2e:	d045      	beq.n	cebc <am_util_stdio_vsprintf+0x8b4>
    ce30:	b364      	cbz	r4, ce8c <am_util_stdio_vsprintf+0x884>
    ce32:	2c01      	cmp	r4, #1
    ce34:	d021      	beq.n	ce7a <am_util_stdio_vsprintf+0x872>
    ce36:	2c02      	cmp	r4, #2
    ce38:	d01b      	beq.n	ce72 <am_util_stdio_vsprintf+0x86a>
    ce3a:	2c03      	cmp	r4, #3
    ce3c:	d015      	beq.n	ce6a <am_util_stdio_vsprintf+0x862>
    ce3e:	2c04      	cmp	r4, #4
    ce40:	d00f      	beq.n	ce62 <am_util_stdio_vsprintf+0x85a>
    ce42:	2c05      	cmp	r4, #5
    ce44:	d009      	beq.n	ce5a <am_util_stdio_vsprintf+0x852>
    ce46:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    ce48:	bf1c      	itt	ne
    ce4a:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce4e:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce52:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce56:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce5a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce5e:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce62:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce66:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce6a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce6e:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce72:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    ce7a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    ce7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    ce82:	f11a 0401 	adds.w	r4, sl, #1
    ce86:	eba3 0c08 	sub.w	ip, r3, r8
    ce8a:	d017      	beq.n	cebc <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    ce8c:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    ce8e:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    ce92:	f801 5b01 	strb.w	r5, [r1], #1
    ce96:	3308      	adds	r3, #8
    ce98:	700d      	strb	r5, [r1, #0]
    ce9a:	f803 5c06 	strb.w	r5, [r3, #-6]
    ce9e:	f803 5c05 	strb.w	r5, [r3, #-5]
    cea2:	f803 5c04 	strb.w	r5, [r3, #-4]
    cea6:	f803 5c03 	strb.w	r5, [r3, #-3]
    ceaa:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    ceae:	f11a 0401 	adds.w	r4, sl, #1
    ceb2:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    ceb6:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    ceba:	d1e7      	bne.n	ce8c <am_util_stdio_vsprintf+0x884>
    cebc:	4664      	mov	r4, ip
    cebe:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    cec0:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    cec2:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    cec4:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    cec6:	2900      	cmp	r1, #0
    cec8:	f43f ad50 	beq.w	c96c <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    cecc:	2400      	movs	r4, #0
    cece:	1c42      	adds	r2, r0, #1
    ced0:	e721      	b.n	cd16 <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    ced2:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    ced4:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    ced6:	2b00      	cmp	r3, #0
    ced8:	f43f ad48 	beq.w	c96c <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    cedc:	2400      	movs	r4, #0
    cede:	1c42      	adds	r2, r0, #1
    cee0:	4690      	mov	r8, r2
    cee2:	eba9 0000 	sub.w	r0, r9, r0
    cee6:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    ceea:	f818 1b01 	ldrb.w	r1, [r8], #1
    ceee:	2900      	cmp	r1, #0
    cef0:	d1f9      	bne.n	cee6 <am_util_stdio_vsprintf+0x8de>
    cef2:	4688      	mov	r8, r1
    cef4:	e71d      	b.n	cd32 <am_util_stdio_vsprintf+0x72a>
    cef6:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    cefa:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    cefe:	9d20      	ldr	r5, [sp, #128]	; 0x80
    cf00:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    cf02:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    cf04:	9f21      	ldr	r7, [sp, #132]	; 0x84
    cf06:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    cf0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    cf0e:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    cf12:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    cf14:	2c00      	cmp	r4, #0
    cf16:	f340 81e3 	ble.w	d2e0 <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    cf1a:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    cf1c:	f1b8 0f00 	cmp.w	r8, #0
    cf20:	f000 81df 	beq.w	d2e2 <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    cf24:	4643      	mov	r3, r8
    cf26:	f007 0007 	and.w	r0, r7, #7
    cf2a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf2e:	f1a4 0a02 	sub.w	sl, r4, #2
    cf32:	eba3 0c08 	sub.w	ip, r3, r8
    cf36:	2f00      	cmp	r7, #0
    cf38:	d046      	beq.n	cfc8 <am_util_stdio_vsprintf+0x9c0>
    cf3a:	b360      	cbz	r0, cf96 <am_util_stdio_vsprintf+0x98e>
    cf3c:	2801      	cmp	r0, #1
    cf3e:	d021      	beq.n	cf84 <am_util_stdio_vsprintf+0x97c>
    cf40:	2802      	cmp	r0, #2
    cf42:	d01b      	beq.n	cf7c <am_util_stdio_vsprintf+0x974>
    cf44:	2803      	cmp	r0, #3
    cf46:	d015      	beq.n	cf74 <am_util_stdio_vsprintf+0x96c>
    cf48:	2804      	cmp	r0, #4
    cf4a:	d00f      	beq.n	cf6c <am_util_stdio_vsprintf+0x964>
    cf4c:	2805      	cmp	r0, #5
    cf4e:	d009      	beq.n	cf64 <am_util_stdio_vsprintf+0x95c>
    cf50:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    cf52:	bf1c      	itt	ne
    cf54:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf58:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf5c:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf60:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf64:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf68:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf6c:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf70:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf74:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf78:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf7c:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf80:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    cf84:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    cf88:	f10a 3aff 	add.w	sl, sl, #4294967295
    cf8c:	f11a 0001 	adds.w	r0, sl, #1
    cf90:	eba3 0c08 	sub.w	ip, r3, r8
    cf94:	d018      	beq.n	cfc8 <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    cf96:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    cf98:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    cf9c:	f80e 5b01 	strb.w	r5, [lr], #1
    cfa0:	3308      	adds	r3, #8
    cfa2:	f88e 5000 	strb.w	r5, [lr]
    cfa6:	f803 5c06 	strb.w	r5, [r3, #-6]
    cfaa:	f803 5c05 	strb.w	r5, [r3, #-5]
    cfae:	f803 5c04 	strb.w	r5, [r3, #-4]
    cfb2:	f803 5c03 	strb.w	r5, [r3, #-3]
    cfb6:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    cfba:	f11a 0701 	adds.w	r7, sl, #1
    cfbe:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    cfc2:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    cfc6:	d1e6      	bne.n	cf96 <am_util_stdio_vsprintf+0x98e>
    cfc8:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    cfca:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    cfcc:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    cfce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    cfd2:	4642      	mov	r2, r8
    cfd4:	f7ff fa1a 	bl	c40c <uint64_to_str>
                if ( pcBuf )
    cfd8:	f1b8 0f00 	cmp.w	r8, #0
    cfdc:	d000      	beq.n	cfe0 <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    cfde:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    cfe0:	4481      	add	r9, r0
                break;
    cfe2:	e4c3      	b.n	c96c <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfe4:	78b3      	ldrb	r3, [r6, #2]
    cfe6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    cfea:	2909      	cmp	r1, #9
        pcStr++;
    cfec:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cff0:	f200 8391 	bhi.w	d716 <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    cff4:	2201      	movs	r2, #1
        bNeg = true;
    cff6:	4694      	mov	ip, r2
    cff8:	e634      	b.n	cc64 <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    cffa:	78b2      	ldrb	r2, [r6, #2]
    cffc:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    d000:	3602      	adds	r6, #2
        switch ( *pcFmt )
    d002:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    d006:	f63f ae0f 	bhi.w	cc28 <am_util_stdio_vsprintf+0x620>
    d00a:	a101      	add	r1, pc, #4	; (adr r1, d010 <am_util_stdio_vsprintf+0xa08>)
    d00c:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    d010:	0000c92f 	.word	0x0000c92f
    d014:	0000cc29 	.word	0x0000cc29
    d018:	0000cc29 	.word	0x0000cc29
    d01c:	0000cc29 	.word	0x0000cc29
    d020:	0000cc29 	.word	0x0000cc29
    d024:	0000cc29 	.word	0x0000cc29
    d028:	0000cc29 	.word	0x0000cc29
    d02c:	0000cc29 	.word	0x0000cc29
    d030:	0000cc29 	.word	0x0000cc29
    d034:	0000cc29 	.word	0x0000cc29
    d038:	0000cc29 	.word	0x0000cc29
    d03c:	0000cc29 	.word	0x0000cc29
    d040:	0000cc29 	.word	0x0000cc29
    d044:	0000cc29 	.word	0x0000cc29
    d048:	0000cc29 	.word	0x0000cc29
    d04c:	0000cc29 	.word	0x0000cc29
    d050:	0000cc29 	.word	0x0000cc29
    d054:	0000cc29 	.word	0x0000cc29
    d058:	0000d7e1 	.word	0x0000d7e1
    d05c:	0000cc29 	.word	0x0000cc29
    d060:	0000cc29 	.word	0x0000cc29
    d064:	0000cc29 	.word	0x0000cc29
    d068:	0000cc29 	.word	0x0000cc29
    d06c:	0000cc29 	.word	0x0000cc29
    d070:	0000cc29 	.word	0x0000cc29
    d074:	0000cc29 	.word	0x0000cc29
    d078:	0000cc29 	.word	0x0000cc29
    d07c:	0000cc29 	.word	0x0000cc29
    d080:	0000cc29 	.word	0x0000cc29
    d084:	0000c971 	.word	0x0000c971
    d088:	0000d0f3 	.word	0x0000d0f3
    d08c:	0000cc29 	.word	0x0000cc29
    d090:	0000c92f 	.word	0x0000c92f
    d094:	0000cc29 	.word	0x0000cc29
    d098:	0000cc29 	.word	0x0000cc29
    d09c:	0000d0f3 	.word	0x0000d0f3
    d0a0:	0000cc29 	.word	0x0000cc29
    d0a4:	0000cc29 	.word	0x0000cc29
    d0a8:	0000cc29 	.word	0x0000cc29
    d0ac:	0000cc29 	.word	0x0000cc29
    d0b0:	0000cc29 	.word	0x0000cc29
    d0b4:	0000cc29 	.word	0x0000cc29
    d0b8:	0000cc29 	.word	0x0000cc29
    d0bc:	0000cc29 	.word	0x0000cc29
    d0c0:	0000cc29 	.word	0x0000cc29
    d0c4:	0000cce5 	.word	0x0000cce5
    d0c8:	0000cc29 	.word	0x0000cc29
    d0cc:	0000d0dd 	.word	0x0000d0dd
    d0d0:	0000cc29 	.word	0x0000cc29
    d0d4:	0000cc29 	.word	0x0000cc29
    d0d8:	0000d673 	.word	0x0000d673
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0dc:	f10b 0207 	add.w	r2, fp, #7
    d0e0:	f022 0b07 	bic.w	fp, r2, #7
    d0e4:	e9db 0100 	ldrd	r0, r1, [fp]
    d0e8:	f10b 0b08 	add.w	fp, fp, #8
    d0ec:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    d0f0:	e501      	b.n	caf6 <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0f2:	f10b 0307 	add.w	r3, fp, #7
    d0f6:	f023 0b07 	bic.w	fp, r3, #7
    d0fa:	e9db 0100 	ldrd	r0, r1, [fp]
    d0fe:	f10b 0b08 	add.w	fp, fp, #8
    d102:	e44e      	b.n	c9a2 <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    d104:	4240      	negs	r0, r0
    d106:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d10a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    d10e:	2c00      	cmp	r4, #0
    d110:	f040 834e 	bne.w	d7b0 <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    d114:	f1b8 0f00 	cmp.w	r8, #0
    d118:	f000 82d1 	beq.w	d6be <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    d11c:	252d      	movs	r5, #45	; 0x2d
    d11e:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    d122:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    d126:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d12a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d12e:	4642      	mov	r2, r8
    d130:	f7ff f96c 	bl	c40c <uint64_to_str>
                if ( pcBuf )
    d134:	f1b8 0f00 	cmp.w	r8, #0
    d138:	f47f af51 	bne.w	cfde <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    d13c:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d140:	4481      	add	r9, r0
    d142:	e413      	b.n	c96c <am_util_stdio_vsprintf+0x364>
    d144:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    d148:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d14a:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    d14c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    d14e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    d150:	9e20      	ldr	r6, [sp, #128]	; 0x80
    d152:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    d156:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    d15a:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    d15e:	1aff      	subs	r7, r7, r3
    d160:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    d164:	b13c      	cbz	r4, d176 <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    d166:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    d168:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    d16c:	f000 82c3 	beq.w	d6f6 <am_util_stdio_vsprintf+0x10ee>
    d170:	2001      	movs	r0, #1
                        --iWidth;
    d172:	460f      	mov	r7, r1
    d174:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    d176:	2f00      	cmp	r7, #0
    d178:	f340 82d3 	ble.w	d722 <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    d17c:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    d17e:	f1b8 0f00 	cmp.w	r8, #0
    d182:	d067      	beq.n	d254 <am_util_stdio_vsprintf+0xc4c>
    d184:	f010 0107 	ands.w	r1, r0, #7
    d188:	f1a7 0a02 	sub.w	sl, r7, #2
    d18c:	4643      	mov	r3, r8
    d18e:	d03a      	beq.n	d206 <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    d190:	4643      	mov	r3, r8
    d192:	2901      	cmp	r1, #1
    d194:	f1a7 0a03 	sub.w	sl, r7, #3
    d198:	f803 5b01 	strb.w	r5, [r3], #1
    d19c:	d033      	beq.n	d206 <am_util_stdio_vsprintf+0xbfe>
    d19e:	2902      	cmp	r1, #2
    d1a0:	d01b      	beq.n	d1da <am_util_stdio_vsprintf+0xbd2>
    d1a2:	2903      	cmp	r1, #3
    d1a4:	d015      	beq.n	d1d2 <am_util_stdio_vsprintf+0xbca>
    d1a6:	2904      	cmp	r1, #4
    d1a8:	d00f      	beq.n	d1ca <am_util_stdio_vsprintf+0xbc2>
    d1aa:	2905      	cmp	r1, #5
    d1ac:	d009      	beq.n	d1c2 <am_util_stdio_vsprintf+0xbba>
    d1ae:	2906      	cmp	r1, #6
    d1b0:	bf1c      	itt	ne
    d1b2:	f803 5b01 	strbne.w	r5, [r3], #1
    d1b6:	f1a7 0a04 	subne.w	sl, r7, #4
    d1ba:	f803 5b01 	strb.w	r5, [r3], #1
    d1be:	f10a 3aff 	add.w	sl, sl, #4294967295
    d1c2:	f803 5b01 	strb.w	r5, [r3], #1
    d1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
    d1ca:	f803 5b01 	strb.w	r5, [r3], #1
    d1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
    d1d2:	f803 5b01 	strb.w	r5, [r3], #1
    d1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
    d1da:	f803 5b01 	strb.w	r5, [r3], #1
    d1de:	f10a 3aff 	add.w	sl, sl, #4294967295
    d1e2:	e010      	b.n	d206 <am_util_stdio_vsprintf+0xbfe>
    d1e4:	f88c 5000 	strb.w	r5, [ip]
    d1e8:	3308      	adds	r3, #8
    d1ea:	f803 5c06 	strb.w	r5, [r3, #-6]
    d1ee:	f803 5c05 	strb.w	r5, [r3, #-5]
    d1f2:	f803 5c04 	strb.w	r5, [r3, #-4]
    d1f6:	f803 5c03 	strb.w	r5, [r3, #-3]
    d1fa:	f803 5c02 	strb.w	r5, [r3, #-2]
    d1fe:	f1aa 0a08 	sub.w	sl, sl, #8
    d202:	f803 5c01 	strb.w	r5, [r3, #-1]
    d206:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    d208:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    d20c:	f80c 5b01 	strb.w	r5, [ip], #1
    d210:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    d214:	d1e6      	bne.n	d1e4 <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d216:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d218:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    d21a:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d21c:	2a00      	cmp	r2, #0
    d21e:	d084      	beq.n	d12a <am_util_stdio_vsprintf+0xb22>
    d220:	2d20      	cmp	r5, #32
    d222:	d182      	bne.n	d12a <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    d224:	f1b8 0f00 	cmp.w	r8, #0
    d228:	f47f af78 	bne.w	d11c <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d22c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d230:	2200      	movs	r2, #0
    d232:	f7ff f8eb 	bl	c40c <uint64_to_str>
                        ++ui32CharCnt;
    d236:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d23a:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    d23e:	4481      	add	r9, r0
    d240:	f7ff bb94 	b.w	c96c <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d244:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    d246:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    d24a:	f340 82bc 	ble.w	d7c6 <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    d24e:	2201      	movs	r2, #1
    d250:	1eb8      	subs	r0, r7, #2
    d252:	921b      	str	r2, [sp, #108]	; 0x6c
    d254:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d256:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    d258:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d25a:	2f00      	cmp	r7, #0
    d25c:	f000 821b 	beq.w	d696 <am_util_stdio_vsprintf+0x108e>
    d260:	2d20      	cmp	r5, #32
    d262:	d0e3      	beq.n	d22c <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d264:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d268:	2200      	movs	r2, #0
    d26a:	f7ff f8cf 	bl	c40c <uint64_to_str>
    d26e:	e765      	b.n	d13c <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    d270:	2700      	movs	r7, #0
    d272:	2400      	movs	r4, #0
    d274:	f7ff baee 	b.w	c854 <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d278:	ee17 7a90 	vmov	r7, s15
    d27c:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    d280:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d284:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    d288:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d28a:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    d28e:	f300 8246 	bgt.w	d71e <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    d292:	f111 0f17 	cmn.w	r1, #23
    d296:	f2c0 823c 	blt.w	d712 <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    d29a:	2916      	cmp	r1, #22
    d29c:	dd2f      	ble.n	d2fe <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    d29e:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    d2a2:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    d2a4:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d2a8:	f2c0 825c 	blt.w	d764 <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    d2ac:	2800      	cmp	r0, #0
    d2ae:	f040 824c 	bne.w	d74a <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    d2b2:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    d2b4:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    d2b8:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    d2bc:	f888 4000 	strb.w	r4, [r8]
    d2c0:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    d2c4:	1caa      	adds	r2, r5, #2
    d2c6:	f04f 0430 	mov.w	r4, #48	; 0x30
    d2ca:	706c      	strb	r4, [r5, #1]
    d2cc:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    d2d0:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    d2d2:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    d2d4:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    d2d6:	f2c0 81e7 	blt.w	d6a8 <am_util_stdio_vsprintf+0x10a0>
    d2da:	4682      	mov	sl, r0
    d2dc:	f7ff bb44 	b.w	c968 <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    d2e0:	2400      	movs	r4, #0
    d2e2:	f04f 0c00 	mov.w	ip, #0
    d2e6:	e670      	b.n	cfca <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d2e8:	4606      	mov	r6, r0
    d2ea:	2400      	movs	r4, #0
    d2ec:	f7ff b9f4 	b.w	c6d8 <am_util_stdio_vsprintf+0xd0>
    d2f0:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    d2f4:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    d2f6:	1886      	adds	r6, r0, r2
    d2f8:	5c82      	ldrb	r2, [r0, r2]
    d2fa:	f7ff b9f9 	b.w	c6f0 <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    d2fe:	2900      	cmp	r1, #0
    d300:	f2c0 8214 	blt.w	d72c <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d304:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    d308:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    d30c:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    d310:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d312:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d316:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    d31a:	f2c0 823b 	blt.w	d794 <am_util_stdio_vsprintf+0x118c>
    d31e:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    d320:	462a      	mov	r2, r5
    d322:	17c1      	asrs	r1, r0, #31
    d324:	f7ff f872 	bl	c40c <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d328:	7829      	ldrb	r1, [r5, #0]
    d32a:	b119      	cbz	r1, d334 <am_util_stdio_vsprintf+0xd2c>
    d32c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    d330:	2800      	cmp	r0, #0
    d332:	d1fb      	bne.n	d32c <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    d334:	222e      	movs	r2, #46	; 0x2e
    d336:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    d338:	2c00      	cmp	r4, #0
    d33a:	d0c3      	beq.n	d2c4 <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    d33c:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d33e:	eba2 0008 	sub.w	r0, r2, r8
    d342:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d346:	45e2      	cmp	sl, ip
    d348:	bfa8      	it	ge
    d34a:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    d34c:	f1ba 0f00 	cmp.w	sl, #0
    d350:	f340 80b2 	ble.w	d4b8 <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    d354:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d358:	0067      	lsls	r7, r4, #1
    d35a:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d35e:	1639      	asrs	r1, r7, #24
    d360:	3130      	adds	r1, #48	; 0x30
    d362:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    d366:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d368:	7069      	strb	r1, [r5, #1]
    d36a:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    d36c:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    d370:	f00e 0507 	and.w	r5, lr, #7
    d374:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    d376:	f000 809c 	beq.w	d4b2 <am_util_stdio_vsprintf+0xeaa>
    d37a:	2d00      	cmp	r5, #0
    d37c:	d04d      	beq.n	d41a <am_util_stdio_vsprintf+0xe12>
    d37e:	2d01      	cmp	r5, #1
    d380:	d03f      	beq.n	d402 <am_util_stdio_vsprintf+0xdfa>
    d382:	2d02      	cmp	r5, #2
    d384:	d034      	beq.n	d3f0 <am_util_stdio_vsprintf+0xde8>
    d386:	2d03      	cmp	r5, #3
    d388:	d029      	beq.n	d3de <am_util_stdio_vsprintf+0xdd6>
    d38a:	2d04      	cmp	r5, #4
    d38c:	d01e      	beq.n	d3cc <am_util_stdio_vsprintf+0xdc4>
    d38e:	2d05      	cmp	r5, #5
    d390:	d013      	beq.n	d3ba <am_util_stdio_vsprintf+0xdb2>
    d392:	2d06      	cmp	r5, #6
    d394:	d008      	beq.n	d3a8 <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    d396:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d39a:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d39c:	1639      	asrs	r1, r7, #24
    d39e:	3130      	adds	r1, #48	; 0x30
    d3a0:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3a4:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d3a8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d3ac:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d3ae:	162c      	asrs	r4, r5, #24
    d3b0:	3430      	adds	r4, #48	; 0x30
    d3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3b6:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d3ba:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    d3be:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d3c0:	1601      	asrs	r1, r0, #24
    d3c2:	3130      	adds	r1, #48	; 0x30
    d3c4:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3c8:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d3cc:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d3d0:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d3d2:	1627      	asrs	r7, r4, #24
    d3d4:	3730      	adds	r7, #48	; 0x30
    d3d6:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3da:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d3de:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d3e2:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d3e4:	1629      	asrs	r1, r5, #24
    d3e6:	3130      	adds	r1, #48	; 0x30
    d3e8:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3ec:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d3f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d3f4:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d3f6:	1638      	asrs	r0, r7, #24
    d3f8:	3030      	adds	r0, #48	; 0x30
    d3fa:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    d3fe:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d402:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    d406:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d408:	1621      	asrs	r1, r4, #24
    d40a:	3130      	adds	r1, #48	; 0x30
    d40c:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    d410:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    d412:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d414:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d418:	d04b      	beq.n	d4b2 <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    d41a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    d41e:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d420:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d424:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    d428:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    d42a:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d42e:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    d432:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d436:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d43a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    d43e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    d442:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d446:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    d44a:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d44c:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d450:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    d454:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    d456:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    d45a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d45e:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    d460:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d462:	3130      	adds	r1, #48	; 0x30
    d464:	1624      	asrs	r4, r4, #24
    d466:	3430      	adds	r4, #48	; 0x30
    d468:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    d46a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d46e:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    d470:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    d474:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d476:	1601      	asrs	r1, r0, #24
    d478:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    d47c:	1620      	asrs	r0, r4, #24
    d47e:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    d482:	163f      	asrs	r7, r7, #24
    d484:	162d      	asrs	r5, r5, #24
    d486:	3730      	adds	r7, #48	; 0x30
    d488:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d48c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    d490:	3530      	adds	r5, #48	; 0x30
    d492:	3130      	adds	r1, #48	; 0x30
    d494:	3030      	adds	r0, #48	; 0x30
    d496:	715f      	strb	r7, [r3, #5]
    d498:	f883 c003 	strb.w	ip, [r3, #3]
    d49c:	f883 e004 	strb.w	lr, [r3, #4]
    d4a0:	719d      	strb	r5, [r3, #6]
    d4a2:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    d4a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4a6:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    d4aa:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    d4ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d4b0:	d1b3      	bne.n	d41a <am_util_stdio_vsprintf+0xe12>
    d4b2:	4452      	add	r2, sl
    d4b4:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d4b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d4bc:	f343 55c7 	sbfx	r5, r3, #23, #8
    d4c0:	2d04      	cmp	r5, #4
    d4c2:	f77f af05 	ble.w	d2d0 <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    d4c6:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d4c8:	4598      	cmp	r8, r3
    d4ca:	f63f af01 	bhi.w	d2d0 <am_util_stdio_vsprintf+0xcc8>
    d4ce:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    d4d2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    d4d6:	1afc      	subs	r4, r7, r3
    d4d8:	43e5      	mvns	r5, r4
    d4da:	292e      	cmp	r1, #46	; 0x2e
    d4dc:	f005 0407 	and.w	r4, r5, #7
    d4e0:	d005      	beq.n	d4ee <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    d4e2:	2939      	cmp	r1, #57	; 0x39
    d4e4:	f040 8161 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d4e8:	f04f 0130 	mov.w	r1, #48	; 0x30
    d4ec:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d4ee:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d4f0:	42bb      	cmp	r3, r7
    d4f2:	f43f aeed 	beq.w	d2d0 <am_util_stdio_vsprintf+0xcc8>
    d4f6:	2c00      	cmp	r4, #0
    d4f8:	d054      	beq.n	d5a4 <am_util_stdio_vsprintf+0xf9c>
    d4fa:	2c01      	cmp	r4, #1
    d4fc:	d045      	beq.n	d58a <am_util_stdio_vsprintf+0xf82>
    d4fe:	2c02      	cmp	r4, #2
    d500:	d039      	beq.n	d576 <am_util_stdio_vsprintf+0xf6e>
    d502:	2c03      	cmp	r4, #3
    d504:	d02d      	beq.n	d562 <am_util_stdio_vsprintf+0xf5a>
    d506:	2c04      	cmp	r4, #4
    d508:	d021      	beq.n	d54e <am_util_stdio_vsprintf+0xf46>
    d50a:	2c05      	cmp	r4, #5
    d50c:	d015      	beq.n	d53a <am_util_stdio_vsprintf+0xf32>
    d50e:	2c06      	cmp	r4, #6
    d510:	d009      	beq.n	d526 <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    d512:	7819      	ldrb	r1, [r3, #0]
    d514:	292e      	cmp	r1, #46	; 0x2e
    d516:	d005      	beq.n	d524 <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    d518:	2939      	cmp	r1, #57	; 0x39
    d51a:	f040 8146 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d51e:	f04f 0530 	mov.w	r5, #48	; 0x30
    d522:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d524:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d526:	7819      	ldrb	r1, [r3, #0]
    d528:	292e      	cmp	r1, #46	; 0x2e
    d52a:	d005      	beq.n	d538 <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    d52c:	2939      	cmp	r1, #57	; 0x39
    d52e:	f040 813c 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d532:	f04f 0430 	mov.w	r4, #48	; 0x30
    d536:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d538:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d53a:	7819      	ldrb	r1, [r3, #0]
    d53c:	292e      	cmp	r1, #46	; 0x2e
    d53e:	d005      	beq.n	d54c <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    d540:	2939      	cmp	r1, #57	; 0x39
    d542:	f040 8132 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d546:	f04f 0130 	mov.w	r1, #48	; 0x30
    d54a:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d54c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d54e:	7819      	ldrb	r1, [r3, #0]
    d550:	292e      	cmp	r1, #46	; 0x2e
    d552:	d005      	beq.n	d560 <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    d554:	2939      	cmp	r1, #57	; 0x39
    d556:	f040 8128 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d55a:	f04f 0530 	mov.w	r5, #48	; 0x30
    d55e:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d560:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d562:	7819      	ldrb	r1, [r3, #0]
    d564:	292e      	cmp	r1, #46	; 0x2e
    d566:	d005      	beq.n	d574 <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    d568:	2939      	cmp	r1, #57	; 0x39
    d56a:	f040 811e 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d56e:	f04f 0430 	mov.w	r4, #48	; 0x30
    d572:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d574:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d576:	7819      	ldrb	r1, [r3, #0]
    d578:	292e      	cmp	r1, #46	; 0x2e
    d57a:	d005      	beq.n	d588 <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    d57c:	2939      	cmp	r1, #57	; 0x39
    d57e:	f040 8114 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d582:	f04f 0130 	mov.w	r1, #48	; 0x30
    d586:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    d588:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d58a:	7819      	ldrb	r1, [r3, #0]
    d58c:	292e      	cmp	r1, #46	; 0x2e
    d58e:	d005      	beq.n	d59c <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    d590:	2939      	cmp	r1, #57	; 0x39
    d592:	f040 810a 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d596:	f04f 0530 	mov.w	r5, #48	; 0x30
    d59a:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    d59c:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d59e:	42bb      	cmp	r3, r7
    d5a0:	f43f ae96 	beq.w	d2d0 <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    d5a4:	7819      	ldrb	r1, [r3, #0]
    d5a6:	292e      	cmp	r1, #46	; 0x2e
    d5a8:	d005      	beq.n	d5b6 <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    d5aa:	2939      	cmp	r1, #57	; 0x39
    d5ac:	f040 80fd 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d5b0:	f04f 0430 	mov.w	r4, #48	; 0x30
    d5b4:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    d5b6:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    d5b8:	7819      	ldrb	r1, [r3, #0]
    d5ba:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d5bc:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    d5be:	d005      	beq.n	d5cc <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    d5c0:	2939      	cmp	r1, #57	; 0x39
    d5c2:	f040 80f2 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d5c6:	f04f 0130 	mov.w	r1, #48	; 0x30
    d5ca:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    d5cc:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    d5d0:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d5d2:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    d5d6:	d006      	beq.n	d5e6 <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    d5d8:	2939      	cmp	r1, #57	; 0x39
    d5da:	f040 80e6 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d5de:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d5e2:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    d5e6:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    d5ea:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d5ec:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    d5f0:	d006      	beq.n	d600 <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    d5f2:	2939      	cmp	r1, #57	; 0x39
    d5f4:	f040 80d9 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d5f8:	f04f 0330 	mov.w	r3, #48	; 0x30
    d5fc:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    d600:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    d604:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d606:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    d60a:	d006      	beq.n	d61a <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    d60c:	2939      	cmp	r1, #57	; 0x39
    d60e:	f040 80cc 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d612:	f04f 0530 	mov.w	r5, #48	; 0x30
    d616:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    d61a:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    d61e:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d620:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    d624:	d006      	beq.n	d634 <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    d626:	2939      	cmp	r1, #57	; 0x39
    d628:	f040 80bf 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d62c:	f04f 0430 	mov.w	r4, #48	; 0x30
    d630:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    d634:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    d638:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d63a:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    d63e:	d006      	beq.n	d64e <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    d640:	2939      	cmp	r1, #57	; 0x39
    d642:	f040 80b2 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d646:	f04f 0130 	mov.w	r1, #48	; 0x30
    d64a:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    d64e:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    d652:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    d654:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    d658:	d006      	beq.n	d668 <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    d65a:	2939      	cmp	r1, #57	; 0x39
    d65c:	f040 80a5 	bne.w	d7aa <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    d660:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d664:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    d668:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    d66c:	42bb      	cmp	r3, r7
    d66e:	d199      	bne.n	d5a4 <am_util_stdio_vsprintf+0xf9c>
    d670:	e62e      	b.n	d2d0 <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    d672:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d676:	f10b 0307 	add.w	r3, fp, #7
    d67a:	f023 0a07 	bic.w	sl, r3, #7
    d67e:	f10a 0b08 	add.w	fp, sl, #8
    d682:	e9da 2300 	ldrd	r2, r3, [sl]
    d686:	f7ff b877 	b.w	c778 <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    d68a:	7801      	ldrb	r1, [r0, #0]
    d68c:	b369      	cbz	r1, d6ea <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    d68e:	4607      	mov	r7, r0
    d690:	2201      	movs	r2, #1
    d692:	f7ff bb40 	b.w	cd16 <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d696:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d69a:	463a      	mov	r2, r7
    d69c:	f7fe feb6 	bl	c40c <uint64_to_str>
    d6a0:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    d6a2:	4481      	add	r9, r0
    d6a4:	f7ff b962 	b.w	c96c <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d6a8:	1c43      	adds	r3, r0, #1
    d6aa:	d032      	beq.n	d712 <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d6ac:	3002      	adds	r0, #2
    d6ae:	d036      	beq.n	d71e <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d6b0:	4a4d      	ldr	r2, [pc, #308]	; (d7e8 <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d6b2:	f8c8 2000 	str.w	r2, [r8]
    d6b6:	f04f 0a03 	mov.w	sl, #3
    d6ba:	f7ff b955 	b.w	c968 <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d6be:	4642      	mov	r2, r8
    d6c0:	f7fe fea4 	bl	c40c <uint64_to_str>
                        ++ui32CharCnt;
    d6c4:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    d6c8:	4481      	add	r9, r0
    d6ca:	f7ff b94f 	b.w	c96c <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    d6ce:	2200      	movs	r2, #0
    d6d0:	2500      	movs	r5, #0
    d6d2:	f7ff bb91 	b.w	cdf8 <am_util_stdio_vsprintf+0x7f0>
    d6d6:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    d6d8:	f1b8 0f00 	cmp.w	r8, #0
    d6dc:	f43f abf9 	beq.w	ced2 <am_util_stdio_vsprintf+0x8ca>
    d6e0:	4614      	mov	r4, r2
    d6e2:	f7ff bbed 	b.w	cec0 <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    d6e6:	2c00      	cmp	r4, #0
    d6e8:	dc02      	bgt.n	d6f0 <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    d6ea:	460f      	mov	r7, r1
    d6ec:	f7ff bb21 	b.w	cd32 <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    d6f0:	460f      	mov	r7, r1
    d6f2:	f7ff bb88 	b.w	ce06 <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    d6f6:	f1b8 0f00 	cmp.w	r8, #0
    d6fa:	f43f ada3 	beq.w	d244 <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    d6fe:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    d700:	232d      	movs	r3, #45	; 0x2d
    d702:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    d706:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    d70a:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    d70c:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    d70e:	44a0      	add	r8, r4
    d710:	e531      	b.n	d176 <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d712:	4a36      	ldr	r2, [pc, #216]	; (d7ec <am_util_stdio_vsprintf+0x11e4>)
    d714:	e7cd      	b.n	d6b2 <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d716:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    d71a:	2201      	movs	r2, #1
    d71c:	e5eb      	b.n	d2f6 <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d71e:	4a34      	ldr	r2, [pc, #208]	; (d7f0 <am_util_stdio_vsprintf+0x11e8>)
    d720:	e7c7      	b.n	d6b2 <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    d722:	f1b8 0f00 	cmp.w	r8, #0
    d726:	d13d      	bne.n	d7a4 <am_util_stdio_vsprintf+0x119c>
    d728:	4640      	mov	r0, r8
    d72a:	e594      	b.n	d256 <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d72c:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    d72e:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d730:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    d734:	db27      	blt.n	d786 <am_util_stdio_vsprintf+0x117e>
    d736:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    d738:	f04f 0030 	mov.w	r0, #48	; 0x30
    d73c:	7018      	strb	r0, [r3, #0]
    d73e:	1c5d      	adds	r5, r3, #1
    d740:	e5f8      	b.n	d334 <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    d742:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    d744:	2400      	movs	r4, #0
    d746:	941b      	str	r4, [sp, #108]	; 0x6c
    d748:	e515      	b.n	d176 <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    d74a:	4643      	mov	r3, r8
    i32FracPart = 0;
    d74c:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    d74e:	2800      	cmp	r0, #0
    d750:	dc37      	bgt.n	d7c2 <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    d752:	1c5d      	adds	r5, r3, #1
    d754:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    d756:	4240      	negs	r0, r0
    d758:	17c1      	asrs	r1, r0, #31
    d75a:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    d75c:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d75e:	f7fe fe55 	bl	c40c <uint64_to_str>
    d762:	e5e1      	b.n	d328 <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    d764:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    d768:	f888 e000 	strb.w	lr, [r8]
    d76c:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d770:	bb78      	cbnz	r0, d7d2 <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    d772:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    d774:	f04f 0030 	mov.w	r0, #48	; 0x30
    d778:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    d77c:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    d780:	f108 0502 	add.w	r5, r8, #2
    d784:	e59e      	b.n	d2c4 <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    d786:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    d78a:	f888 c000 	strb.w	ip, [r8]
    d78e:	f108 0301 	add.w	r3, r8, #1
    d792:	e7d1      	b.n	d738 <am_util_stdio_vsprintf+0x1130>
    d794:	272d      	movs	r7, #45	; 0x2d
    d796:	f888 7000 	strb.w	r7, [r8]
    d79a:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    d79e:	2800      	cmp	r0, #0
    d7a0:	d0ca      	beq.n	d738 <am_util_stdio_vsprintf+0x1130>
    d7a2:	e7d4      	b.n	d74e <am_util_stdio_vsprintf+0x1146>
    d7a4:	f04f 0e00 	mov.w	lr, #0
    d7a8:	e535      	b.n	d216 <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    d7aa:	3101      	adds	r1, #1
    d7ac:	7019      	strb	r1, [r3, #0]
    d7ae:	e58f      	b.n	d2d0 <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    d7b0:	460b      	mov	r3, r1
    d7b2:	4301      	orrs	r1, r0
    d7b4:	4602      	mov	r2, r0
    d7b6:	bf0c      	ite	eq
    d7b8:	2401      	moveq	r4, #1
    d7ba:	2400      	movne	r4, #0
                    bNeg = true;
    d7bc:	2001      	movs	r0, #1
    d7be:	f7ff b906 	b.w	c9ce <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    d7c2:	461d      	mov	r5, r3
    d7c4:	e5ac      	b.n	d320 <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d7c6:	4642      	mov	r2, r8
    d7c8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    d7cc:	f7fe fe1e 	bl	c40c <uint64_to_str>
    d7d0:	e4b4      	b.n	d13c <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    d7d2:	2400      	movs	r4, #0
    d7d4:	e7bb      	b.n	d74e <am_util_stdio_vsprintf+0x1146>
    d7d6:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    d7da:	7832      	ldrb	r2, [r6, #0]
    d7dc:	f7fe bf7c 	b.w	c6d8 <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    d7e0:	f04f 0c00 	mov.w	ip, #0
    d7e4:	e747      	b.n	d676 <am_util_stdio_vsprintf+0x106e>
    d7e6:	bf00      	nop
    d7e8:	003f2e3f 	.word	0x003f2e3f
    d7ec:	00302e30 	.word	0x00302e30
    d7f0:	00232e23 	.word	0x00232e23

0000d7f4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d7f4:	b40f      	push	{r0, r1, r2, r3}
    d7f6:	b530      	push	{r4, r5, lr}
    d7f8:	b083      	sub	sp, #12
    d7fa:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d7fc:	4c08      	ldr	r4, [pc, #32]	; (d820 <am_util_stdio_printf+0x2c>)
{
    d7fe:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    d802:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d804:	4620      	mov	r0, r4
    d806:	f7fe feff 	bl	c608 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d80a:	4b06      	ldr	r3, [pc, #24]	; (d824 <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d80c:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    d80e:	6819      	ldr	r1, [r3, #0]
    d810:	4620      	mov	r0, r4
    d812:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d814:	4628      	mov	r0, r5
    d816:	b003      	add	sp, #12
    d818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d81c:	b004      	add	sp, #16
    d81e:	4770      	bx	lr
    d820:	10001010 	.word	0x10001010
    d824:	10001118 	.word	0x10001118

0000d828 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d828:	4801      	ldr	r0, [pc, #4]	; (d830 <am_util_stdio_terminal_clear+0x8>)
    d82a:	f7ff bfe3 	b.w	d7f4 <am_util_stdio_printf>
    d82e:	bf00      	nop
    d830:	0000f648 	.word	0x0000f648

0000d834 <am_bsp_uart_string_print>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    d834:	b510      	push	{r4, lr}
    d836:	b086      	sub	sp, #24
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcString[ui32StrLen] != 0)
    d838:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    d83a:	2300      	movs	r3, #0
    d83c:	9300      	str	r3, [sp, #0]
    while (pcString[ui32StrLen] != 0)
    d83e:	b134      	cbz	r4, d84e <am_bsp_uart_string_print+0x1a>
    d840:	461c      	mov	r4, r3
    d842:	4601      	mov	r1, r0
    d844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        ui32StrLen++;
    d848:	3401      	adds	r4, #1
    while (pcString[ui32StrLen] != 0)
    d84a:	2a00      	cmp	r2, #0
    d84c:	d1fa      	bne.n	d844 <am_bsp_uart_string_print+0x10>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d84e:	4b0a      	ldr	r3, [pc, #40]	; (d878 <am_bsp_uart_string_print+0x44>)
    const am_hal_uart_transfer_t sUartWrite =
    d850:	9002      	str	r0, [sp, #8]
    d852:	2200      	movs	r2, #0
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d854:	6818      	ldr	r0, [r3, #0]
    const am_hal_uart_transfer_t sUartWrite =
    d856:	9403      	str	r4, [sp, #12]
    d858:	f04f 33ff 	mov.w	r3, #4294967295
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d85c:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    d85e:	9201      	str	r2, [sp, #4]
    d860:	9304      	str	r3, [sp, #16]
    d862:	f8cd d014 	str.w	sp, [sp, #20]
    am_hal_uart_transfer(g_sCOMUART, &sUartWrite);
    d866:	f000 ff63 	bl	e730 <am_hal_uart_transfer>

    if (ui32BytesWritten != ui32StrLen)
    d86a:	9800      	ldr	r0, [sp, #0]
    d86c:	42a0      	cmp	r0, r4
    d86e:	d000      	beq.n	d872 <am_bsp_uart_string_print+0x3e>
    d870:	e7fe      	b.n	d870 <am_bsp_uart_string_print+0x3c>
        //
        // Couldn't send the whole string!!
        //
        while(1);
    }
} // am_bsp_uart_string_print()
    d872:	b006      	add	sp, #24
    d874:	bd10      	pop	{r4, pc}
    d876:	bf00      	nop
    d878:	10001110 	.word	0x10001110

0000d87c <am_bsp_low_power_init>:
{
    d87c:	b508      	push	{r3, lr}
    am_hal_itm_disable();
    d87e:	f000 fbe1 	bl	e044 <am_hal_itm_disable>
    am_util_stdio_printf_init(0);
    d882:	2000      	movs	r0, #0
    d884:	f7fe feba 	bl	c5fc <am_util_stdio_printf_init>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_HAL_GPIO_DISABLE);
    d888:	4b08      	ldr	r3, [pc, #32]	; (d8ac <am_bsp_low_power_init+0x30>)
    d88a:	2029      	movs	r0, #41	; 0x29
    d88c:	6819      	ldr	r1, [r3, #0]
    d88e:	f000 fa8f 	bl	ddb0 <am_hal_gpio_pinconfig>
    am_hal_pwrctrl_low_power_init();
    d892:	f000 fd61 	bl	e358 <am_hal_pwrctrl_low_power_init>
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    d896:	2001      	movs	r0, #1
    d898:	f000 fd9c 	bl	e3d4 <am_hal_rtc_osc_select>
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    d89c:	2100      	movs	r1, #0
    d89e:	2003      	movs	r0, #3
    d8a0:	f000 f8f0 	bl	da84 <am_hal_clkgen_control>
} // am_bsp_low_power_init()
    d8a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    d8a8:	f000 bda0 	b.w	e3ec <am_hal_rtc_osc_disable>
    d8ac:	0000f6dc 	.word	0x0000f6dc

0000d8b0 <am_bsp_uart_printf_enable>:
// Initialize and configure the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_enable(void)
{
    d8b0:	b510      	push	{r4, lr}
    //
    // Initialize, power up, and configure the communication UART. Use the
    // custom configuration if it was provided. Otherwise, just use the default
    // configuration.
    //
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d8b2:	4c10      	ldr	r4, [pc, #64]	; (d8f4 <am_bsp_uart_printf_enable+0x44>)
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d8b4:	4b10      	ldr	r3, [pc, #64]	; (d8f8 <am_bsp_uart_printf_enable+0x48>)
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d8b6:	4621      	mov	r1, r4
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d8b8:	2202      	movs	r2, #2
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d8ba:	2000      	movs	r0, #0
    g_ui32PrintInterface = AM_BSP_PRINT_INFC_UART0;
    d8bc:	601a      	str	r2, [r3, #0]
    am_hal_uart_initialize(AM_BSP_UART_PRINT_INST, &g_sCOMUART);
    d8be:	f000 fd9f 	bl	e400 <am_hal_uart_initialize>
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_WAKE, false);
    d8c2:	2200      	movs	r2, #0
    d8c4:	4611      	mov	r1, r2
    d8c6:	6820      	ldr	r0, [r4, #0]
    d8c8:	f000 fdd6 	bl	e478 <am_hal_uart_power_control>
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d8cc:	6820      	ldr	r0, [r4, #0]
    d8ce:	490b      	ldr	r1, [pc, #44]	; (d8fc <am_bsp_uart_printf_enable+0x4c>)

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d8d0:	4c0b      	ldr	r4, [pc, #44]	; (d900 <am_bsp_uart_printf_enable+0x50>)
    am_hal_uart_configure(g_sCOMUART, &g_sBspUartConfig);
    d8d2:	f000 fe43 	bl	e55c <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    d8d6:	490b      	ldr	r1, [pc, #44]	; (d904 <am_bsp_uart_printf_enable+0x54>)
    d8d8:	2027      	movs	r0, #39	; 0x27
    d8da:	6809      	ldr	r1, [r1, #0]
    d8dc:	f000 fa68 	bl	ddb0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    d8e0:	6821      	ldr	r1, [r4, #0]
    d8e2:	2028      	movs	r0, #40	; 0x28
    d8e4:	f000 fa64 	bl	ddb0 <am_hal_gpio_pinconfig>

    //
    // Register the BSP print function to the STDIO driver.
    //
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d8e8:	4807      	ldr	r0, [pc, #28]	; (d908 <am_bsp_uart_printf_enable+0x58>)
} // am_bsp_uart_printf_enable()
    d8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_util_stdio_printf_init(am_bsp_uart_string_print);
    d8ee:	f7fe be85 	b.w	c5fc <am_util_stdio_printf_init>
    d8f2:	bf00      	nop
    d8f4:	10001110 	.word	0x10001110
    d8f8:	10001114 	.word	0x10001114
    d8fc:	0000f65c 	.word	0x0000f65c
    d900:	0000f684 	.word	0x0000f684
    d904:	0000f688 	.word	0x0000f688
    d908:	0000d835 	.word	0x0000d835

0000d90c <am_bsp_uart_printf_disable>:
// Disable the UART
//
//*****************************************************************************
void
am_bsp_uart_printf_disable(void)
{
    d90c:	b510      	push	{r4, lr}
    //
    // Make sure the UART has finished sending everything it's going to send.
    //
    am_hal_uart_tx_flush(g_sCOMUART);
    d90e:	4c0d      	ldr	r4, [pc, #52]	; (d944 <am_bsp_uart_printf_disable+0x38>)
    d910:	6820      	ldr	r0, [r4, #0]
    d912:	f001 fb91 	bl	f038 <am_hal_uart_tx_flush>

    //
    // Detach the UART from the stdio driver.
    //
    am_util_stdio_printf_init(0);
    d916:	2000      	movs	r0, #0
    d918:	f7fe fe70 	bl	c5fc <am_util_stdio_printf_init>

    //
    // Power down the UART, and surrender the handle.
    //
    am_hal_uart_power_control(g_sCOMUART, AM_HAL_SYSCTRL_DEEPSLEEP, false);
    d91c:	2200      	movs	r2, #0
    d91e:	2102      	movs	r1, #2
    d920:	6820      	ldr	r0, [r4, #0]
    d922:	f000 fda9 	bl	e478 <am_hal_uart_power_control>
    am_hal_uart_deinitialize(g_sCOMUART);
    d926:	6820      	ldr	r0, [r4, #0]
    d928:	f000 fd92 	bl	e450 <am_hal_uart_deinitialize>

    //
    // Disable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_HAL_GPIO_DISABLE);
    d92c:	4b06      	ldr	r3, [pc, #24]	; (d948 <am_bsp_uart_printf_disable+0x3c>)
    d92e:	681c      	ldr	r4, [r3, #0]
    d930:	2027      	movs	r0, #39	; 0x27
    d932:	4621      	mov	r1, r4
    d934:	f000 fa3c 	bl	ddb0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d938:	4621      	mov	r1, r4
    d93a:	2028      	movs	r0, #40	; 0x28

} // am_bsp_uart_printf_disable()
    d93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_HAL_GPIO_DISABLE);
    d940:	f000 ba36 	b.w	ddb0 <am_hal_gpio_pinconfig>
    d944:	10001110 	.word	0x10001110
    d948:	0000f6dc 	.word	0x0000f6dc

0000d94c <am_hal_cachectrl_config>:
//  Configure the cache with given and recommended settings, but do not enable.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_config(const am_hal_cachectrl_config_t *psConfig)
{
    d94c:	b530      	push	{r4, r5, lr}
    d94e:	b083      	sub	sp, #12
    d950:	4605      	mov	r5, r0
    // accomplish that is to shut down the ID bits, leaving the cache enabled.
    // Once the instr and data caches have been disabled, we can safely set
    // any new configuration, including disabling the controller.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    d952:	f000 fb6f 	bl	e034 <am_hal_interrupt_master_disable>
    CACHECTRL->CACHECFG &=
    d956:	4c11      	ldr	r4, [pc, #68]	; (d99c <am_hal_cachectrl_config+0x50>)
    AM_CRITICAL_BEGIN
    d958:	9001      	str	r0, [sp, #4]
    CACHECTRL->CACHECFG &=
    d95a:	6823      	ldr	r3, [r4, #0]
    d95c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    d960:	6020      	str	r0, [r4, #0]
        ~(CACHECTRL_CACHECFG_DCACHE_ENABLE_Msk  |
          CACHECTRL_CACHECFG_ICACHE_ENABLE_Msk);
    AM_CRITICAL_END
    d962:	9801      	ldr	r0, [sp, #4]
    d964:	f000 fb6a 	bl	e03c <am_hal_interrupt_master_set>
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 0)                              |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_CLKGATE, 1)                       |
        _VAL2FLD(CACHECTRL_CACHECFG_CACHE_LS, 0)                            |
        _VAL2FLD(CACHECTRL_CACHECFG_DATA_CLKGATE, 1)                        |
        _VAL2FLD(CACHECTRL_CACHECFG_ENABLE_MONITOR, 0)                      |
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d968:	78eb      	ldrb	r3, [r5, #3]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d96a:	7828      	ldrb	r0, [r5, #0]
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d96c:	78a9      	ldrb	r1, [r5, #2]
            (CACHECTRL_CACHECFG_ENABLE_NC1_Msk      |
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d96e:	786a      	ldrb	r2, [r5, #1]
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d970:	0100      	lsls	r0, r0, #4
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d972:	005d      	lsls	r5, r3, #1
    d974:	f005 0302 	and.w	r3, r5, #2
        _VAL2FLD(CACHECTRL_CACHECFG_CONFIG, psConfig->eDescript)            |
    d978:	b2c5      	uxtb	r5, r0
        _VAL2FLD(CACHECTRL_CACHECFG_LRU, psConfig->bLRU)                    |
    d97a:	432b      	orrs	r3, r5
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d97c:	f443 1080 	orr.w	r0, r3, #1048576	; 0x100000
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d980:	0089      	lsls	r1, r1, #2
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d982:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
        ((psConfig->eEnableNCregions << CACHECTRL_CACHECFG_ENABLE_NC0_Pos) &
    d986:	f001 050c 	and.w	r5, r1, #12
        ((psConfig->eMode << CACHECTRL_CACHECFG_ICACHE_ENABLE_Pos) &
    d98a:	0212      	lsls	r2, r2, #8
    d98c:	f402 7040 	and.w	r0, r2, #768	; 0x300
             CACHECTRL_CACHECFG_ENABLE_NC0_Msk))                            |
    d990:	432b      	orrs	r3, r5
    d992:	4303      	orrs	r3, r0

#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_cachectrl_enable()
    d994:	2000      	movs	r0, #0
    CACHECTRL->CACHECFG =
    d996:	6023      	str	r3, [r4, #0]
} // am_hal_cachectrl_enable()
    d998:	b003      	add	sp, #12
    d99a:	bd30      	pop	{r4, r5, pc}
    d99c:	40018000 	.word	0x40018000

0000d9a0 <am_hal_cachectrl_enable>:
//*****************************************************************************
uint32_t
am_hal_cachectrl_enable(void)
{
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG |= _VAL2FLD(CACHECTRL_CACHECFG_ENABLE, 1);
    d9a0:	4a03      	ldr	r2, [pc, #12]	; (d9b0 <am_hal_cachectrl_enable+0x10>)
    d9a2:	6813      	ldr	r3, [r2, #0]
    d9a4:	f043 0001 	orr.w	r0, r3, #1
    d9a8:	6010      	str	r0, [r2, #0]
#else // AM_CMSIS_REGS
    AM_REG(CACHECTRL, CACHECFG) |= AM_REG_CACHECTRL_CACHECFG_ENABLE(1);
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_cachectrl_enable()
    d9aa:	2000      	movs	r0, #0
    d9ac:	4770      	bx	lr
    d9ae:	bf00      	nop
    d9b0:	40018000 	.word	0x40018000

0000d9b4 <am_hal_cachectrl_control>:
//  Select the cache configuration type.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_control(am_hal_cachectrl_control_e eControl, void *pArgs)
{
    d9b4:	b500      	push	{lr}
    uint32_t ui32Val;
    uint32_t ui32SetMask = 0;

#if AM_CMSIS_REGS
    switch ( eControl )
    d9b6:	3801      	subs	r0, #1
{
    d9b8:	b087      	sub	sp, #28
    switch ( eControl )
    d9ba:	280a      	cmp	r0, #10
    d9bc:	d836      	bhi.n	da2c <am_hal_cachectrl_control+0x78>
    d9be:	e8df f000 	tbb	[pc, r0]
    d9c2:	3937      	.short	0x3937
    d9c4:	100e063f 	.word	0x100e063f
    d9c8:	25181512 	.word	0x25181512
    d9cc:	32          	.byte	0x32
    d9cd:	00          	.byte	0x00
        case AM_HAL_CACHECTRL_CONTROL_FLASH_ALL_SLEEP_ENABLE:
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk      |
                          CACHECTRL_CTRL_FLASH1_SLM_ENABLE_Msk;
            break;
        case AM_HAL_CACHECTRL_CONTROL_FLASH_ALL_SLEEP_DISABLE:
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk     |
    d9ce:	f44f 7108 	mov.w	r1, #544	; 0x220
    // Important note - setting of an enable and disable simultanously has
    // unpredicable results.
    //
    if ( ui32SetMask )
    {
        CACHECTRL->CTRL = ui32SetMask;
    d9d2:	4b2a      	ldr	r3, [pc, #168]	; (da7c <am_hal_cachectrl_control+0xc8>)
    {
        AM_REG(CACHECTRL, CTRL) = ui32SetMask;
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    d9d4:	2000      	movs	r0, #0
        CACHECTRL->CTRL = ui32SetMask;
    d9d6:	6099      	str	r1, [r3, #8]

} // am_hal_cachectrl_control()
    d9d8:	b007      	add	sp, #28
    d9da:	f85d fb04 	ldr.w	pc, [sp], #4
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk;
    d9de:	2140      	movs	r1, #64	; 0x40
            break;
    d9e0:	e7f7      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk;
    d9e2:	2120      	movs	r1, #32
            break;
    d9e4:	e7f5      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_ENABLE_Msk;
    d9e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
            break;
    d9ea:	e7f2      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_DISABLE_Msk;
    d9ec:	f44f 7100 	mov.w	r1, #512	; 0x200
            break;
    d9f0:	e7ef      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
            AM_CRITICAL_BEGIN
    d9f2:	f000 fb1f 	bl	e034 <am_hal_interrupt_master_disable>
            CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    d9f6:	4921      	ldr	r1, [pc, #132]	; (da7c <am_hal_cachectrl_control+0xc8>)
            AM_CRITICAL_BEGIN
    d9f8:	9003      	str	r0, [sp, #12]
            CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    d9fa:	6808      	ldr	r0, [r1, #0]
    d9fc:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    da00:	600b      	str	r3, [r1, #0]
            AM_CRITICAL_END
    da02:	9803      	ldr	r0, [sp, #12]
    da04:	f000 fb1a 	bl	e03c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    da08:	2000      	movs	r0, #0
    da0a:	e7e5      	b.n	d9d8 <am_hal_cachectrl_control+0x24>
            AM_CRITICAL_BEGIN
    da0c:	f000 fb12 	bl	e034 <am_hal_interrupt_master_disable>
            CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    da10:	491a      	ldr	r1, [pc, #104]	; (da7c <am_hal_cachectrl_control+0xc8>)
            AM_CRITICAL_BEGIN
    da12:	9004      	str	r0, [sp, #16]
            CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
    da14:	680b      	ldr	r3, [r1, #0]
    da16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
    da1a:	600a      	str	r2, [r1, #0]
            AM_CRITICAL_END
    da1c:	9804      	ldr	r0, [sp, #16]
    da1e:	f000 fb0d 	bl	e03c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    da22:	2000      	movs	r0, #0
    da24:	e7d8      	b.n	d9d8 <am_hal_cachectrl_control+0x24>
            if ( ui32Val > CACHECTRL_FLASHCFG_LPMMODE_ALWAYS )
    da26:	680b      	ldr	r3, [r1, #0]
    da28:	2b02      	cmp	r3, #2
    da2a:	d90e      	bls.n	da4a <am_hal_cachectrl_control+0x96>
                return AM_HAL_STATUS_INVALID_ARG;
    da2c:	2006      	movs	r0, #6
    da2e:	e7d3      	b.n	d9d8 <am_hal_cachectrl_control+0x24>
            ui32SetMask = CACHECTRL_CTRL_INVALIDATE_Msk;
    da30:	2101      	movs	r1, #1
    da32:	e7ce      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
            if ( !_FLD2VAL(CACHECTRL_CACHECFG_ENABLE_MONITOR, CACHECTRL->CACHECFG) )
    da34:	4a11      	ldr	r2, [pc, #68]	; (da7c <am_hal_cachectrl_control+0xc8>)
    da36:	6810      	ldr	r0, [r2, #0]
    da38:	01c3      	lsls	r3, r0, #7
    da3a:	d404      	bmi.n	da46 <am_hal_cachectrl_control+0x92>
                return AM_HAL_STATUS_INVALID_OPERATION;
    da3c:	2007      	movs	r0, #7
    da3e:	e7cb      	b.n	d9d8 <am_hal_cachectrl_control+0x24>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk      |
    da40:	f44f 6188 	mov.w	r1, #1088	; 0x440
    da44:	e7c5      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
    da46:	2102      	movs	r1, #2
    da48:	e7c3      	b.n	d9d2 <am_hal_cachectrl_control+0x1e>
    da4a:	9101      	str	r1, [sp, #4]
            AM_CRITICAL_BEGIN
    da4c:	f000 faf2 	bl	e034 <am_hal_interrupt_master_disable>
    da50:	4601      	mov	r1, r0
            ui32Val = am_hal_flash_load_ui32((uint32_t*)&CACHECTRL->FLASHCFG);
    da52:	480b      	ldr	r0, [pc, #44]	; (da80 <am_hal_cachectrl_control+0xcc>)
            AM_CRITICAL_BEGIN
    da54:	9105      	str	r1, [sp, #20]
            ui32Val = am_hal_flash_load_ui32((uint32_t*)&CACHECTRL->FLASHCFG);
    da56:	f000 f9a1 	bl	dd9c <am_hal_flash_load_ui32>
            ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_LPMMODE, *((uint32_t*)pArgs));
    da5a:	9a01      	ldr	r2, [sp, #4]
    da5c:	6813      	ldr	r3, [r2, #0]
    da5e:	031a      	lsls	r2, r3, #12
            ui32Val &= ~CACHECTRL_FLASHCFG_LPMMODE_Msk;
    da60:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
            ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_LPMMODE, *((uint32_t*)pArgs));
    da64:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
            am_hal_flash_store_ui32((uint32_t*)&CACHECTRL->FLASHCFG, ui32Val);
    da68:	4301      	orrs	r1, r0
    da6a:	4805      	ldr	r0, [pc, #20]	; (da80 <am_hal_cachectrl_control+0xcc>)
    da6c:	f000 f99a 	bl	dda4 <am_hal_flash_store_ui32>
            AM_CRITICAL_END
    da70:	9805      	ldr	r0, [sp, #20]
    da72:	f000 fae3 	bl	e03c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    da76:	2000      	movs	r0, #0
            break;
    da78:	e7ae      	b.n	d9d8 <am_hal_cachectrl_control+0x24>
    da7a:	bf00      	nop
    da7c:	40018000 	.word	0x40018000
    da80:	40018004 	.word	0x40018004

0000da84 <am_hal_clkgen_control>:
am_hal_clkgen_control(am_hal_clkgen_control_e eControl, void *pArgs)
{
    uint32_t ui32Regval;

#if AM_CMSIS_REGS
    switch ( eControl )
    da84:	2809      	cmp	r0, #9
    da86:	d852      	bhi.n	db2e <am_hal_clkgen_control+0xaa>
    da88:	e8df f000 	tbb	[pc, r0]
    da8c:	2b21190d 	.word	0x2b21190d
    da90:	51513d33 	.word	0x51513d33
    da94:	0547      	.short	0x0547
            ui32Regval |= _VAL2FLD(CLKGEN_HFADJ_HFADJEN, CLKGEN_HFADJ_HFADJEN_EN);
            CLKGEN->HFADJ = ui32Regval;
            break;

        case AM_HAL_CLKGEN_CONTROL_HFADJ_DISABLE:
            CLKGEN->HFADJ_b.HFADJEN = 0;
    da96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000


    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;
    da9a:	2000      	movs	r0, #0
            CLKGEN->HFADJ_b.HFADJEN = 0;
    da9c:	6a1a      	ldr	r2, [r3, #32]
    da9e:	f36f 0200 	bfc	r2, #0, #1
    daa2:	621a      	str	r2, [r3, #32]
            break;
    daa4:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    daa6:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    daaa:	2100      	movs	r1, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    daac:	2047      	movs	r0, #71	; 0x47
    daae:	f8cc 0014 	str.w	r0, [ip, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC;
    dab2:	f8cc 1018 	str.w	r1, [ip, #24]
    return AM_HAL_STATUS_SUCCESS;
    dab6:	4608      	mov	r0, r1
            CLKGEN->CLKKEY         = 0;
    dab8:	f8cc 1014 	str.w	r1, [ip, #20]
            break;
    dabc:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    dabe:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    dac2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPXT,
    dac4:	68ca      	ldr	r2, [r1, #12]
    dac6:	f022 0301 	bic.w	r3, r2, #1
    daca:	60cb      	str	r3, [r1, #12]
            break;
    dacc:	4770      	bx	lr
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    dace:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    dad2:	2000      	movs	r0, #0
            CLKGEN->OCTRL         &= ~_VAL2FLD(CLKGEN_OCTRL_STOPRC,
    dad4:	f8dc 200c 	ldr.w	r2, [ip, #12]
    dad8:	f022 0302 	bic.w	r3, r2, #2
    dadc:	f8cc 300c 	str.w	r3, [ip, #12]
            break;
    dae0:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    dae2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    dae6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPXT,
    dae8:	68d3      	ldr	r3, [r2, #12]
    daea:	f043 0101 	orr.w	r1, r3, #1
    daee:	60d1      	str	r1, [r2, #12]
            break;
    daf0:	4770      	bx	lr
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    daf2:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    daf6:	2000      	movs	r0, #0
            CLKGEN->OCTRL         |= _VAL2FLD(CLKGEN_OCTRL_STOPRC,
    daf8:	f8dc 300c 	ldr.w	r3, [ip, #12]
    dafc:	f043 0102 	orr.w	r1, r3, #2
    db00:	f8cc 100c 	str.w	r1, [ip, #12]
            break;
    db04:	4770      	bx	lr
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
            CLKGEN->CLKKEY         = 0;
    db0a:	2200      	movs	r2, #0
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db0c:	2047      	movs	r0, #71	; 0x47
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db0e:	2101      	movs	r1, #1
            CLKGEN->CLKKEY         = CLKGEN_CLKKEY_CLKKEY_Key;
    db10:	6158      	str	r0, [r3, #20]
            CLKGEN->CCTRL          = CLKGEN_CCTRL_CORESEL_HFRC_DIV2;
    db12:	6199      	str	r1, [r3, #24]
    return AM_HAL_STATUS_SUCCESS;
    db14:	4610      	mov	r0, r2
            CLKGEN->CLKKEY         = 0;
    db16:	615a      	str	r2, [r3, #20]
            break;
    db18:	4770      	bx	lr
            if ( pArgs == 0 )
    db1a:	b151      	cbz	r1, db32 <am_hal_clkgen_control+0xae>
    db1c:	6808      	ldr	r0, [r1, #0]
    db1e:	f040 0101 	orr.w	r1, r0, #1
            CLKGEN->HFADJ = ui32Regval;
    db22:	f04f 2c40 	mov.w	ip, #1073758208	; 0x40004000
    return AM_HAL_STATUS_SUCCESS;
    db26:	2000      	movs	r0, #0
            CLKGEN->HFADJ = ui32Regval;
    db28:	f8cc 1020 	str.w	r1, [ip, #32]
            break;
    db2c:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_ARG;
    db2e:	2006      	movs	r0, #6
} // am_hal_clkgen_control()
    db30:	4770      	bx	lr
    db32:	4901      	ldr	r1, [pc, #4]	; (db38 <am_hal_clkgen_control+0xb4>)
    db34:	e7f5      	b.n	db22 <am_hal_clkgen_control+0x9e>
    db36:	bf00      	nop
    db38:	0025b801 	.word	0x0025b801

0000db3c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db3c:	4b00      	ldr	r3, [pc, #0]	; (db40 <am_hal_flash_delay+0x4>)
    db3e:	4718      	bx	r3
    db40:	0800009d 	.word	0x0800009d

0000db44 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
    db44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db48:	f89d e020 	ldrb.w	lr, [sp, #32]
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db4c:	f8df 8248 	ldr.w	r8, [pc, #584]	; dd98 <am_hal_flash_delay_status_check+0x254>
{
    db50:	4607      	mov	r7, r0
    db52:	460c      	mov	r4, r1
    db54:	4615      	mov	r5, r2
    db56:	461e      	mov	r6, r3
    db58:	f1be 0f00 	cmp.w	lr, #0
    db5c:	f000 808e 	beq.w	dc7c <am_hal_flash_delay_status_check+0x138>
    db60:	f010 0907 	ands.w	r9, r0, #7
    db64:	d044      	beq.n	dbf0 <am_hal_flash_delay_status_check+0xac>
        //
        // Check the status
        //
        if ( bIsEqual )
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db66:	680b      	ldr	r3, [r1, #0]
    db68:	4013      	ands	r3, r2
    db6a:	429e      	cmp	r6, r3
    db6c:	f000 8083 	beq.w	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    db70:	2001      	movs	r0, #1
    db72:	47c0      	blx	r8
    db74:	f1b9 0f01 	cmp.w	r9, #1
    db78:	f107 37ff 	add.w	r7, r7, #4294967295
    db7c:	d038      	beq.n	dbf0 <am_hal_flash_delay_status_check+0xac>
    db7e:	f1b9 0f02 	cmp.w	r9, #2
    db82:	d02e      	beq.n	dbe2 <am_hal_flash_delay_status_check+0x9e>
    db84:	f1b9 0f03 	cmp.w	r9, #3
    db88:	d024      	beq.n	dbd4 <am_hal_flash_delay_status_check+0x90>
    db8a:	f1b9 0f04 	cmp.w	r9, #4
    db8e:	d01a      	beq.n	dbc6 <am_hal_flash_delay_status_check+0x82>
    db90:	f1b9 0f05 	cmp.w	r9, #5
    db94:	d010      	beq.n	dbb8 <am_hal_flash_delay_status_check+0x74>
    db96:	f1b9 0f06 	cmp.w	r9, #6
    db9a:	d006      	beq.n	dbaa <am_hal_flash_delay_status_check+0x66>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    db9c:	6820      	ldr	r0, [r4, #0]
    db9e:	4028      	ands	r0, r5
    dba0:	4286      	cmp	r6, r0
    dba2:	d068      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dba4:	2001      	movs	r0, #1
    dba6:	47c0      	blx	r8
    dba8:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbaa:	6821      	ldr	r1, [r4, #0]
    dbac:	4029      	ands	r1, r5
    dbae:	428e      	cmp	r6, r1
    dbb0:	d061      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbb2:	2001      	movs	r0, #1
    dbb4:	47c0      	blx	r8
    dbb6:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbb8:	6822      	ldr	r2, [r4, #0]
    dbba:	402a      	ands	r2, r5
    dbbc:	4296      	cmp	r6, r2
    dbbe:	d05a      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbc0:	2001      	movs	r0, #1
    dbc2:	47c0      	blx	r8
    dbc4:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbc6:	6823      	ldr	r3, [r4, #0]
    dbc8:	402b      	ands	r3, r5
    dbca:	429e      	cmp	r6, r3
    dbcc:	d053      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbce:	2001      	movs	r0, #1
    dbd0:	47c0      	blx	r8
    dbd2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbd4:	6820      	ldr	r0, [r4, #0]
    dbd6:	4028      	ands	r0, r5
    dbd8:	4286      	cmp	r6, r0
    dbda:	d04c      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbdc:	2001      	movs	r0, #1
    dbde:	47c0      	blx	r8
    dbe0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbe2:	6821      	ldr	r1, [r4, #0]
    dbe4:	4029      	ands	r1, r5
    dbe6:	428e      	cmp	r6, r1
    dbe8:	d045      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbea:	2001      	movs	r0, #1
    dbec:	3f01      	subs	r7, #1
    dbee:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbf0:	6822      	ldr	r2, [r4, #0]
    dbf2:	402a      	ands	r2, r5
    dbf4:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dbf6:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dbfa:	d03c      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
    dbfc:	2f00      	cmp	r7, #0
    dbfe:	f000 80c8 	beq.w	dd92 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc02:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc04:	6823      	ldr	r3, [r4, #0]
    dc06:	402b      	ands	r3, r5
    dc08:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc0a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc0e:	d032      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc10:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc12:	6821      	ldr	r1, [r4, #0]
    dc14:	4029      	ands	r1, r5
    dc16:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc18:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc1c:	d02b      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc1e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc20:	6822      	ldr	r2, [r4, #0]
    dc22:	402a      	ands	r2, r5
    dc24:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc26:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc2a:	d024      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc2c:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc2e:	6823      	ldr	r3, [r4, #0]
    dc30:	402b      	ands	r3, r5
    dc32:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc34:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc38:	d01d      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc3a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc3c:	6821      	ldr	r1, [r4, #0]
    dc3e:	4029      	ands	r1, r5
    dc40:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc42:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc46:	d016      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc48:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc4a:	6822      	ldr	r2, [r4, #0]
    dc4c:	402a      	ands	r2, r5
    dc4e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc50:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc54:	d00f      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc56:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc58:	6820      	ldr	r0, [r4, #0]
    dc5a:	4028      	ands	r0, r5
    dc5c:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc5e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc62:	d008      	beq.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc64:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc66:	6822      	ldr	r2, [r4, #0]
    dc68:	402a      	ands	r2, r5
    dc6a:	4296      	cmp	r6, r2
    dc6c:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc70:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    dc74:	d1c2      	bne.n	dbfc <am_hal_flash_delay_status_check+0xb8>
                return AM_HAL_STATUS_SUCCESS;
    dc76:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_flash_delay_status_check()
    dc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc7c:	f010 0907 	ands.w	r9, r0, #7
    dc80:	d043      	beq.n	dd0a <am_hal_flash_delay_status_check+0x1c6>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dc82:	680b      	ldr	r3, [r1, #0]
    dc84:	4013      	ands	r3, r2
    dc86:	429e      	cmp	r6, r3
    dc88:	d1f5      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dc8a:	2001      	movs	r0, #1
    dc8c:	47c0      	blx	r8
    dc8e:	f1b9 0f01 	cmp.w	r9, #1
    dc92:	f107 37ff 	add.w	r7, r7, #4294967295
    dc96:	d038      	beq.n	dd0a <am_hal_flash_delay_status_check+0x1c6>
    dc98:	f1b9 0f02 	cmp.w	r9, #2
    dc9c:	d02e      	beq.n	dcfc <am_hal_flash_delay_status_check+0x1b8>
    dc9e:	f1b9 0f03 	cmp.w	r9, #3
    dca2:	d024      	beq.n	dcee <am_hal_flash_delay_status_check+0x1aa>
    dca4:	f1b9 0f04 	cmp.w	r9, #4
    dca8:	d01a      	beq.n	dce0 <am_hal_flash_delay_status_check+0x19c>
    dcaa:	f1b9 0f05 	cmp.w	r9, #5
    dcae:	d010      	beq.n	dcd2 <am_hal_flash_delay_status_check+0x18e>
    dcb0:	f1b9 0f06 	cmp.w	r9, #6
    dcb4:	d006      	beq.n	dcc4 <am_hal_flash_delay_status_check+0x180>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcb6:	6821      	ldr	r1, [r4, #0]
    dcb8:	4029      	ands	r1, r5
    dcba:	428e      	cmp	r6, r1
    dcbc:	d1db      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcbe:	2001      	movs	r0, #1
    dcc0:	47c0      	blx	r8
    dcc2:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcc4:	6822      	ldr	r2, [r4, #0]
    dcc6:	402a      	ands	r2, r5
    dcc8:	4296      	cmp	r6, r2
    dcca:	d1d4      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dccc:	2001      	movs	r0, #1
    dcce:	47c0      	blx	r8
    dcd0:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcd2:	6820      	ldr	r0, [r4, #0]
    dcd4:	4028      	ands	r0, r5
    dcd6:	4286      	cmp	r6, r0
    dcd8:	d1cd      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcda:	2001      	movs	r0, #1
    dcdc:	47c0      	blx	r8
    dcde:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dce0:	6823      	ldr	r3, [r4, #0]
    dce2:	402b      	ands	r3, r5
    dce4:	429e      	cmp	r6, r3
    dce6:	d1c6      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dce8:	2001      	movs	r0, #1
    dcea:	47c0      	blx	r8
    dcec:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcee:	6821      	ldr	r1, [r4, #0]
    dcf0:	4029      	ands	r1, r5
    dcf2:	428e      	cmp	r6, r1
    dcf4:	d1bf      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dcf6:	2001      	movs	r0, #1
    dcf8:	47c0      	blx	r8
    dcfa:	3f01      	subs	r7, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dcfc:	6822      	ldr	r2, [r4, #0]
    dcfe:	402a      	ands	r2, r5
    dd00:	4296      	cmp	r6, r2
    dd02:	d1b8      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd04:	2001      	movs	r0, #1
    dd06:	3f01      	subs	r7, #1
    dd08:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd0a:	6823      	ldr	r3, [r4, #0]
    dd0c:	402b      	ands	r3, r5
    dd0e:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd10:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd14:	d1af      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
        if ( ui32usMaxDelay-- )
    dd16:	2f00      	cmp	r7, #0
    dd18:	d03b      	beq.n	dd92 <am_hal_flash_delay_status_check+0x24e>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd1a:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd1c:	6821      	ldr	r1, [r4, #0]
    dd1e:	4029      	ands	r1, r5
    dd20:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd22:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd26:	d1a6      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd28:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd2a:	6822      	ldr	r2, [r4, #0]
    dd2c:	402a      	ands	r2, r5
    dd2e:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd30:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd34:	d19f      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd36:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd38:	6823      	ldr	r3, [r4, #0]
    dd3a:	402b      	ands	r3, r5
    dd3c:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd3e:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd42:	d198      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd44:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd46:	6821      	ldr	r1, [r4, #0]
    dd48:	4029      	ands	r1, r5
    dd4a:	428e      	cmp	r6, r1
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd4c:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd50:	d191      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd52:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd54:	6822      	ldr	r2, [r4, #0]
    dd56:	402a      	ands	r2, r5
    dd58:	4296      	cmp	r6, r2
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd5a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd5e:	d18a      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd60:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd62:	6823      	ldr	r3, [r4, #0]
    dd64:	402b      	ands	r3, r5
    dd66:	429e      	cmp	r6, r3
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd68:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd6c:	d183      	bne.n	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd6e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd70:	6820      	ldr	r0, [r4, #0]
    dd72:	4028      	ands	r0, r5
    dd74:	4286      	cmp	r6, r0
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd76:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd7a:	f47f af7c 	bne.w	dc76 <am_hal_flash_delay_status_check+0x132>
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd7e:	47c0      	blx	r8
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd80:	6823      	ldr	r3, [r4, #0]
    dd82:	402b      	ands	r3, r5
    dd84:	429e      	cmp	r6, r3
    dd86:	f1a7 0708 	sub.w	r7, r7, #8
    g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    dd8a:	f04f 0001 	mov.w	r0, #1
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
    dd8e:	d0c2      	beq.n	dd16 <am_hal_flash_delay_status_check+0x1d2>
    dd90:	e771      	b.n	dc76 <am_hal_flash_delay_status_check+0x132>
    return AM_HAL_STATUS_TIMEOUT;
    dd92:	2004      	movs	r0, #4
    dd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd98:	0800009d 	.word	0x0800009d

0000dd9c <am_hal_flash_load_ui32>:
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
    return g_am_hal_flash.flash_util_read_word(pui32Address);
    dd9c:	4b00      	ldr	r3, [pc, #0]	; (dda0 <am_hal_flash_load_ui32+0x4>)
    dd9e:	4718      	bx	r3
    dda0:	08000075 	.word	0x08000075

0000dda4 <am_hal_flash_store_ui32>:
    // Call the simple routine that has been coded in SRAM.
    // First set up a function pointer to the array, being sure to set the
    //  .T bit (Thumb bit, bit0) in the branch address, then use that
    //  function ptr to call the SRAM function.
    //
    uint32_t SRAMCode = (uint32_t)SRAM_write_ui32 | 0x1;
    dda4:	4b01      	ldr	r3, [pc, #4]	; (ddac <am_hal_flash_store_ui32+0x8>)
    dda6:	f043 0201 	orr.w	r2, r3, #1
    uint32_t (*pFunc)(uint32_t*,uint32_t) = (uint32_t (*)(uint32_t*,uint32_t))SRAMCode;
    (*pFunc)(pui32Address, ui32Value);
    ddaa:	4710      	bx	r2
    ddac:	10001000 	.word	0x10001000

0000ddb0 <am_hal_gpio_pinconfig>:
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    ddb0:	2831      	cmp	r0, #49	; 0x31
    ddb2:	d901      	bls.n	ddb8 <am_hal_gpio_pinconfig+0x8>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    ddb4:	2006      	movs	r0, #6
    ddb6:	4770      	bx	lr
{
    ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    ddbc:	f001 0307 	and.w	r3, r1, #7
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ddc0:	f011 04e0 	ands.w	r4, r1, #224	; 0xe0
{
    ddc4:	b087      	sub	sp, #28
    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    ddc6:	ea4f 05c3 	mov.w	r5, r3, lsl #3
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    ddca:	d014      	beq.n	ddf6 <am_hal_gpio_pinconfig+0x46>
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    ddcc:	f3c1 1642 	ubfx	r6, r1, #5, #3
    ddd0:	1db2      	adds	r2, r6, #6
    ddd2:	f002 0707 	and.w	r7, r2, #7
    ddd6:	2f03      	cmp	r7, #3
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    ddd8:	f045 0501 	orr.w	r5, r5, #1
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    dddc:	f200 80ab 	bhi.w	df36 <am_hal_gpio_pinconfig+0x186>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    dde0:	4a85      	ldr	r2, [pc, #532]	; (dff8 <am_hal_gpio_pinconfig+0x248>)
    dde2:	5c17      	ldrb	r7, [r2, r0]
    dde4:	07ff      	lsls	r7, r7, #31
    dde6:	d403      	bmi.n	ddf0 <am_hal_gpio_pinconfig+0x40>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    dde8:	4884      	ldr	r0, [pc, #528]	; (dffc <am_hal_gpio_pinconfig+0x24c>)

    AM_CRITICAL_END

    return AM_HAL_STATUS_SUCCESS;

} // am_hal_gpio_pinconfig()
    ddea:	b007      	add	sp, #28
    ddec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    ddf0:	1eb4      	subs	r4, r6, #2
    ddf2:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
    ui32PowerSw = bfGpioCfg.ePowerSw;
    ddf6:	f3c1 06c1 	ubfx	r6, r1, #3, #2
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    ddfa:	2e00      	cmp	r6, #0
    ddfc:	f040 8095 	bne.w	df2a <am_hal_gpio_pinconfig+0x17a>
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de00:	4a7f      	ldr	r2, [pc, #508]	; (e000 <am_hal_gpio_pinconfig+0x250>)
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de02:	4f80      	ldr	r7, [pc, #512]	; (e004 <am_hal_gpio_pinconfig+0x254>)
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de04:	5c16      	ldrb	r6, [r2, r0]
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de06:	f817 8000 	ldrb.w	r8, [r7, r0]
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de0a:	411e      	asrs	r6, r3
    de0c:	f016 0f01 	tst.w	r6, #1
    de10:	bf0c      	ite	eq
    de12:	2600      	moveq	r6, #0
    de14:	2602      	movne	r6, #2
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de16:	4543      	cmp	r3, r8
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    de18:	ea45 0506 	orr.w	r5, r5, r6
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    de1c:	f000 8097 	beq.w	df4e <am_hal_gpio_pinconfig+0x19e>
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de20:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de24:	00df      	lsls	r7, r3, #3
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de26:	f3c1 2907 	ubfx	r9, r1, #8, #8
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de2a:	f007 0408 	and.w	r4, r7, #8
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    de2e:	105a      	asrs	r2, r3, #1
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    de30:	f3c1 2681 	ubfx	r6, r1, #10, #2
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de34:	f009 070c 	and.w	r7, r9, #12
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de38:	ea42 0346 	orr.w	r3, r2, r6, lsl #1
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de3c:	f3c1 3a00 	ubfx	sl, r1, #12, #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de40:	2f04      	cmp	r7, #4
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    de42:	ea43 0804 	orr.w	r8, r3, r4
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    de46:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de4a:	f000 808d 	beq.w	df68 <am_hal_gpio_pinconfig+0x1b8>
    ui32B = *((uint32_t*)cfg2);
    de4e:	4a6e      	ldr	r2, [pc, #440]	; (e008 <am_hal_gpio_pinconfig+0x258>)
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    de50:	6816      	ldr	r6, [r2, #0]
    de52:	1b8c      	subs	r4, r1, r6
    de54:	fab4 f384 	clz	r3, r4
    de58:	095f      	lsrs	r7, r3, #5
    de5a:	9700      	str	r7, [sp, #0]
        if ( bfGpioCfg.eIntDir == 0 )
    de5c:	f019 0f60 	tst.w	r9, #96	; 0x60
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    de60:	bf04      	itt	eq
    de62:	f3c1 37c0 	ubfxeq	r7, r1, #15, #1
    de66:	f367 0800 	bfieq	r8, r7, #0, #1
    de6a:	0087      	lsls	r7, r0, #2
    switch ( bfGpioCfg.eDriveStrength )
    de6c:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de70:	2902      	cmp	r1, #2
    de72:	ea4f 04c0 	mov.w	r4, r0, lsl #3
    de76:	d07a      	beq.n	df6e <am_hal_gpio_pinconfig+0x1be>
    de78:	d87f      	bhi.n	df7a <am_hal_gpio_pinconfig+0x1ca>
    de7a:	2901      	cmp	r1, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    de7c:	bf08      	it	eq
    de7e:	f045 0504 	orreq.w	r5, r5, #4
    de82:	f004 0a18 	and.w	sl, r4, #24
            break;
    de86:	2200      	movs	r2, #0
    de88:	4604      	mov	r4, r0
    de8a:	9203      	str	r2, [sp, #12]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de8c:	f04f 0b0f 	mov.w	fp, #15
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    de90:	f007 021c 	and.w	r2, r7, #28
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de94:	485d      	ldr	r0, [pc, #372]	; (e00c <am_hal_gpio_pinconfig+0x25c>)
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    de96:	495e      	ldr	r1, [pc, #376]	; (e010 <am_hal_gpio_pinconfig+0x260>)
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    de98:	4f5e      	ldr	r7, [pc, #376]	; (e014 <am_hal_gpio_pinconfig+0x264>)
    de9a:	9702      	str	r7, [sp, #8]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    de9c:	fa0b f302 	lsl.w	r3, fp, r2
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    dea0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    dea4:	fa0c f60a 	lsl.w	r6, ip, sl
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    dea8:	9101      	str	r1, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    deaa:	fa08 f802 	lsl.w	r8, r8, r2
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    deae:	43df      	mvns	r7, r3
    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    deb0:	ea00 0954 	and.w	r9, r0, r4, lsr #1
    AM_CRITICAL_BEGIN
    deb4:	f000 f8be 	bl	e034 <am_hal_interrupt_master_disable>
    deb8:	9005      	str	r0, [sp, #20]
    if ( bClearEnable )
    deba:	e89d 0009 	ldmia.w	sp, {r0, r3}
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    debe:	f024 0b03 	bic.w	fp, r4, #3
    ui32Padreg    <<= ui32PadShft;
    dec2:	fa05 f50a 	lsl.w	r5, r5, sl
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    dec6:	f10b 4a80 	add.w	sl, fp, #1073741824	; 0x40000000
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    deca:	43f6      	mvns	r6, r6
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    decc:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    if ( bClearEnable )
    ded0:	9902      	ldr	r1, [sp, #8]
    ded2:	9a03      	ldr	r2, [sp, #12]
    ded4:	b150      	cbz	r0, deec <am_hal_gpio_pinconfig+0x13c>
        am_hal_gpio_output_tristate_disable(ui32Pin);
    ded6:	f004 001f 	and.w	r0, r4, #31
    deda:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    dede:	f04f 0c01 	mov.w	ip, #1
    dee2:	4c4d      	ldr	r4, [pc, #308]	; (e018 <am_hal_gpio_pinconfig+0x268>)
    dee4:	fa0c f000 	lsl.w	r0, ip, r0
    dee8:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    deec:	484b      	ldr	r0, [pc, #300]	; (e01c <am_hal_gpio_pinconfig+0x26c>)
    deee:	2473      	movs	r4, #115	; 0x73
    def0:	6604      	str	r4, [r0, #96]	; 0x60
    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    def2:	f8da 4000 	ldr.w	r4, [sl]
    def6:	4034      	ands	r4, r6
    def8:	4325      	orrs	r5, r4
    defa:	f8ca 5000 	str.w	r5, [sl]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    defe:	f859 5001 	ldr.w	r5, [r9, r1]
    df02:	402f      	ands	r7, r5
    df04:	ea47 0708 	orr.w	r7, r7, r8
    df08:	f849 7001 	str.w	r7, [r9, r1]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df0c:	f85b 1003 	ldr.w	r1, [fp, r3]
    df10:	400e      	ands	r6, r1
    df12:	4332      	orrs	r2, r6
    GPIO->PADKEY = 0;
    df14:	2600      	movs	r6, #0
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    df16:	f84b 2003 	str.w	r2, [fp, r3]
    GPIO->PADKEY = 0;
    df1a:	6606      	str	r6, [r0, #96]	; 0x60
    AM_CRITICAL_END
    df1c:	9805      	ldr	r0, [sp, #20]
    df1e:	f000 f88d 	bl	e03c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    df22:	4630      	mov	r0, r6
} // am_hal_gpio_pinconfig()
    df24:	b007      	add	sp, #28
    df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df2a:	2e01      	cmp	r6, #1
    df2c:	d015      	beq.n	df5a <am_hal_gpio_pinconfig+0x1aa>
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df2e:	2e02      	cmp	r6, #2
    df30:	d030      	beq.n	df94 <am_hal_gpio_pinconfig+0x1e4>
            return AM_HAL_GPIO_ERR_PWRSW;
    df32:	483b      	ldr	r0, [pc, #236]	; (e020 <am_hal_gpio_pinconfig+0x270>)
    df34:	e759      	b.n	ddea <am_hal_gpio_pinconfig+0x3a>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    df36:	2cc0      	cmp	r4, #192	; 0xc0
    df38:	d027      	beq.n	df8a <am_hal_gpio_pinconfig+0x1da>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    df3a:	2c20      	cmp	r4, #32
    df3c:	f47f af5b 	bne.w	ddf6 <am_hal_gpio_pinconfig+0x46>
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    df40:	4c2d      	ldr	r4, [pc, #180]	; (dff8 <am_hal_gpio_pinconfig+0x248>)
    df42:	5c26      	ldrb	r6, [r4, r0]
    df44:	f016 0f09 	tst.w	r6, #9
    df48:	f47f af4e 	bne.w	dde8 <am_hal_gpio_pinconfig+0x38>
    df4c:	e753      	b.n	ddf6 <am_hal_gpio_pinconfig+0x46>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    df4e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    df52:	2a07      	cmp	r2, #7
    df54:	d125      	bne.n	dfa2 <am_hal_gpio_pinconfig+0x1f2>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    df56:	4833      	ldr	r0, [pc, #204]	; (e024 <am_hal_gpio_pinconfig+0x274>)
    df58:	e747      	b.n	ddea <am_hal_gpio_pinconfig+0x3a>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    df5a:	4c27      	ldr	r4, [pc, #156]	; (dff8 <am_hal_gpio_pinconfig+0x248>)
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    df5c:	5c26      	ldrb	r6, [r4, r0]
    df5e:	07b4      	lsls	r4, r6, #30
    df60:	d5e7      	bpl.n	df32 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    df62:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    df66:	e74b      	b.n	de00 <am_hal_gpio_pinconfig+0x50>
            bClearEnable = true;
    df68:	2701      	movs	r7, #1
    df6a:	9700      	str	r7, [sp, #0]
    df6c:	e776      	b.n	de5c <am_hal_gpio_pinconfig+0xac>
    df6e:	f004 0a18 	and.w	sl, r4, #24
    df72:	2301      	movs	r3, #1
    df74:	fa03 f20a 	lsl.w	r2, r3, sl
            break;
    df78:	e786      	b.n	de88 <am_hal_gpio_pinconfig+0xd8>
    df7a:	f004 0a18 	and.w	sl, r4, #24
    df7e:	2601      	movs	r6, #1
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    df80:	f045 0504 	orr.w	r5, r5, #4
    df84:	fa06 f20a 	lsl.w	r2, r6, sl
            break;
    df88:	e77e      	b.n	de88 <am_hal_gpio_pinconfig+0xd8>
            if ( ui32Pin != 20 )
    df8a:	2814      	cmp	r0, #20
    df8c:	f43f af33 	beq.w	ddf6 <am_hal_gpio_pinconfig+0x46>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    df90:	4825      	ldr	r0, [pc, #148]	; (e028 <am_hal_gpio_pinconfig+0x278>)
    df92:	e72a      	b.n	ddea <am_hal_gpio_pinconfig+0x3a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    df94:	4a18      	ldr	r2, [pc, #96]	; (dff8 <am_hal_gpio_pinconfig+0x248>)
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    df96:	5c17      	ldrb	r7, [r2, r0]
    df98:	077a      	lsls	r2, r7, #29
    df9a:	d5ca      	bpl.n	df32 <am_hal_gpio_pinconfig+0x182>
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    df9c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    dfa0:	e72e      	b.n	de00 <am_hal_gpio_pinconfig+0x50>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfa2:	4c22      	ldr	r4, [pc, #136]	; (e02c <am_hal_gpio_pinconfig+0x27c>)
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dfa4:	f3c1 4cc1 	ubfx	ip, r1, #19, #2
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfa8:	f814 8020 	ldrb.w	r8, [r4, r0, lsl #2]
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    dfac:	ea4c 1602 	orr.w	r6, ip, r2, lsl #4
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    dfb0:	45b0      	cmp	r8, r6
    dfb2:	d010      	beq.n	dfd6 <am_hal_gpio_pinconfig+0x226>
    dfb4:	0087      	lsls	r7, r0, #2
    dfb6:	eb04 0907 	add.w	r9, r4, r7
    dfba:	f899 3001 	ldrb.w	r3, [r9, #1]
    dfbe:	42b3      	cmp	r3, r6
    dfc0:	d015      	beq.n	dfee <am_hal_gpio_pinconfig+0x23e>
    dfc2:	f899 2002 	ldrb.w	r2, [r9, #2]
    dfc6:	42b2      	cmp	r2, r6
    dfc8:	d00f      	beq.n	dfea <am_hal_gpio_pinconfig+0x23a>
    dfca:	f899 4003 	ldrb.w	r4, [r9, #3]
    dfce:	42b4      	cmp	r4, r6
    dfd0:	d00f      	beq.n	dff2 <am_hal_gpio_pinconfig+0x242>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    dfd2:	4817      	ldr	r0, [pc, #92]	; (e030 <am_hal_gpio_pinconfig+0x280>)
    dfd4:	e709      	b.n	ddea <am_hal_gpio_pinconfig+0x3a>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dfd6:	2600      	movs	r6, #0
    dfd8:	0087      	lsls	r7, r0, #2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    dfda:	0072      	lsls	r2, r6, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dfdc:	f3c1 5e40 	ubfx	lr, r1, #21, #1
    bool bClearEnable = false;
    dfe0:	2300      	movs	r3, #0
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    dfe2:	ea42 08ce 	orr.w	r8, r2, lr, lsl #3
    bool bClearEnable = false;
    dfe6:	9300      	str	r3, [sp, #0]
    dfe8:	e740      	b.n	de6c <am_hal_gpio_pinconfig+0xbc>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    dfea:	2602      	movs	r6, #2
    dfec:	e7f5      	b.n	dfda <am_hal_gpio_pinconfig+0x22a>
    dfee:	2601      	movs	r6, #1
    dff0:	e7f3      	b.n	dfda <am_hal_gpio_pinconfig+0x22a>
    dff2:	2603      	movs	r6, #3
    dff4:	e7f1      	b.n	dfda <am_hal_gpio_pinconfig+0x22a>
    dff6:	bf00      	nop
    dff8:	0000f6e0 	.word	0x0000f6e0
    dffc:	08000100 	.word	0x08000100
    e000:	0000f714 	.word	0x0000f714
    e004:	0000f810 	.word	0x0000f810
    e008:	0000f6dc 	.word	0x0000f6dc
    e00c:	7ffffffc 	.word	0x7ffffffc
    e010:	400100e0 	.word	0x400100e0
    e014:	40010040 	.word	0x40010040
    e018:	400100b4 	.word	0x400100b4
    e01c:	40010000 	.word	0x40010000
    e020:	08000102 	.word	0x08000102
    e024:	08000103 	.word	0x08000103
    e028:	08000101 	.word	0x08000101
    e02c:	0000f748 	.word	0x0000f748
    e030:	08000104 	.word	0x08000104

0000e034 <am_hal_interrupt_master_disable>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e034:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e038:	b672      	cpsid	i
    __asm("    bx lr");
    e03a:	4770      	bx	lr

0000e03c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e03c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e040:	4770      	bx	lr
    e042:	bf00      	nop

0000e044 <am_hal_itm_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_disable(void)
{
    e044:	b510      	push	{r4, lr}

#if AM_CMSIS_REGS
    if ( MCUCTRL->TPIUCTRL == 0 )
    e046:	4b24      	ldr	r3, [pc, #144]	; (e0d8 <am_hal_itm_disable+0x94>)
    e048:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
    e04c:	b9b0      	cbnz	r0, e07c <am_hal_itm_disable+0x38>
    CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e04e:	4923      	ldr	r1, [pc, #140]	; (e0dc <am_hal_itm_disable+0x98>)
    e050:	68ca      	ldr	r2, [r1, #12]
    e052:	f042 7480 	orr.w	r4, r2, #16777216	; 0x1000000
    e056:	60cc      	str	r4, [r1, #12]
    while ( !(CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1)) );
    e058:	68cb      	ldr	r3, [r1, #12]
    e05a:	01da      	lsls	r2, r3, #7
    e05c:	d5fc      	bpl.n	e058 <am_hal_itm_disable+0x14>
    ITM->LAR = ITM_LAR_KEYVAL;
    e05e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    e062:	481f      	ldr	r0, [pc, #124]	; (e0e0 <am_hal_itm_disable+0x9c>)
    ITM->TCR =
    e064:	4a1f      	ldr	r2, [pc, #124]	; (e0e4 <am_hal_itm_disable+0xa0>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e066:	f8cc 0fb0 	str.w	r0, [ip, #4016]	; 0xfb0
    ITM->TPR = 0x0000000F;
    e06a:	240f      	movs	r4, #15
    ITM->TER = 0xFFFFFFFF;
    e06c:	f04f 31ff 	mov.w	r1, #4294967295
    ITM->TPR = 0x0000000F;
    e070:	f8cc 4e40 	str.w	r4, [ip, #3648]	; 0xe40
    ITM->TER = 0xFFFFFFFF;
    e074:	f8cc 1e00 	str.w	r1, [ip, #3584]	; 0xe00
    ITM->TCR =
    e078:	f8cc 2e80 	str.w	r2, [ip, #3712]	; 0xe80
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
#if AM_CMSIS_REGS
    while (ITM->TCR & _VAL2FLD(ITM_TCR_BUSY, 1));
    e07c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e080:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e084:	021b      	lsls	r3, r3, #8
    e086:	d4fb      	bmi.n	e080 <am_hal_itm_disable+0x3c>
#endif // AM_CMSIS_REGS

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    e088:	f240 20f7 	movw	r0, #759	; 0x2f7
    e08c:	f7ff fd56 	bl	db3c <am_hal_flash_delay>
    ITM->LAR = ITM_LAR_KEYVAL;
    e090:	4813      	ldr	r0, [pc, #76]	; (e0e0 <am_hal_itm_disable+0x9c>)
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e092:	4915      	ldr	r1, [pc, #84]	; (e0e8 <am_hal_itm_disable+0xa4>)
    ITM->LAR = ITM_LAR_KEYVAL;
    e094:	f8c4 0fb0 	str.w	r0, [r4, #4016]	; 0xfb0
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e098:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    ITM->LAR = ITM_LAR_KEYVAL;
    e09c:	2064      	movs	r0, #100	; 0x64
        ITM->TCR &= ~_VAL2FLD(ITM_TCR_ITMENA, 1);
    e09e:	f8dc 2e80 	ldr.w	r2, [ip, #3712]	; 0xe80
    e0a2:	f022 0401 	bic.w	r4, r2, #1
    e0a6:	f8cc 4e80 	str.w	r4, [ip, #3712]	; 0xe80
        while ( ITM->TCR  & (_VAL2FLD(ITM_TCR_ITMENA, 1)  |  _VAL2FLD(ITM_TCR_BUSY, 1)) );
    e0aa:	f8dc 3e80 	ldr.w	r3, [ip, #3712]	; 0xe80
    e0ae:	420b      	tst	r3, r1
    e0b0:	d1fb      	bne.n	e0aa <am_hal_itm_disable+0x66>
    for (int ix = 0; ix < 100; ix++)
    e0b2:	3801      	subs	r0, #1
    e0b4:	d1f3      	bne.n	e09e <am_hal_itm_disable+0x5a>
    CoreDebug->DEMCR &= ~_VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
    e0b6:	4909      	ldr	r1, [pc, #36]	; (e0dc <am_hal_itm_disable+0x98>)
    e0b8:	68ca      	ldr	r2, [r1, #12]
    e0ba:	f022 7480 	bic.w	r4, r2, #16777216	; 0x1000000
    e0be:	60cc      	str	r4, [r1, #12]
    while ( CoreDebug->DEMCR & _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1) );
    e0c0:	68cb      	ldr	r3, [r1, #12]
    e0c2:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
    e0c6:	d1fb      	bne.n	e0c0 <am_hal_itm_disable+0x7c>
    MCUCTRL->TPIUCTRL =
    e0c8:	4903      	ldr	r1, [pc, #12]	; (e0d8 <am_hal_itm_disable+0x94>)
    e0ca:	f8c1 0250 	str.w	r0, [r1, #592]	; 0x250
    while (MCUCTRL->TPIUCTRL);
    e0ce:	f8d1 2250 	ldr.w	r2, [r1, #592]	; 0x250
    e0d2:	2a00      	cmp	r2, #0
    e0d4:	d1fb      	bne.n	e0ce <am_hal_itm_disable+0x8a>
}
    e0d6:	bd10      	pop	{r4, pc}
    e0d8:	40020000 	.word	0x40020000
    e0dc:	e000edf0 	.word	0xe000edf0
    e0e0:	c5acce55 	.word	0xc5acce55
    e0e4:	00150511 	.word	0x00150511
    e0e8:	00800001 	.word	0x00800001

0000e0ec <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
    e0ec:	b141      	cbz	r1, e100 <am_hal_mcuctrl_info_get+0x14>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

#if AM_CMSIS_REGS
    switch ( eInfoGet )
    e0ee:	2801      	cmp	r0, #1
{
    e0f0:	b4f0      	push	{r4, r5, r6, r7}
    switch ( eInfoGet )
    e0f2:	d03a      	beq.n	e16a <am_hal_mcuctrl_info_get+0x7e>
    e0f4:	d322      	bcc.n	e13c <am_hal_mcuctrl_info_get+0x50>
    e0f6:	2802      	cmp	r0, #2
    e0f8:	d004      	beq.n	e104 <am_hal_mcuctrl_info_get+0x18>
        case AM_HAL_MCUCTRL_INFO_FAULT_STATUS:
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
            break;

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    e0fa:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
    e0fc:	bcf0      	pop	{r4, r5, r6, r7}
    e0fe:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    e100:	2006      	movs	r0, #6
    e102:	4770      	bx	lr
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e104:	4a41      	ldr	r2, [pc, #260]	; (e20c <am_hal_mcuctrl_info_get+0x120>)
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e106:	684c      	ldr	r4, [r1, #4]
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
    e108:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e10c:	6948      	ldr	r0, [r1, #20]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e10e:	f003 0601 	and.w	r6, r3, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e112:	f3c3 0540 	ubfx	r5, r3, #1, #1
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e116:	f3c3 0780 	ubfx	r7, r3, #2, #1
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
    e11a:	720d      	strb	r5, [r1, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
    e11c:	740f      	strb	r7, [r1, #16]
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
    e11e:	700e      	strb	r6, [r1, #0]
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
    e120:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e124:	60cb      	str	r3, [r1, #12]
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
    e126:	f8d2 61c0 	ldr.w	r6, [r2, #448]	; 0x1c0
    e12a:	4334      	orrs	r4, r6
    e12c:	604c      	str	r4, [r1, #4]
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
    e12e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e132:	4310      	orrs	r0, r2
    e134:	6148      	str	r0, [r1, #20]
} // am_hal_mcuctrl_info_get()
    e136:	bcf0      	pop	{r4, r5, r6, r7}
    return AM_HAL_STATUS_SUCCESS;
    e138:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e13a:	4770      	bx	lr
            ui32Feature = MCUCTRL->FEATUREENABLE;
    e13c:	4c33      	ldr	r4, [pc, #204]	; (e20c <am_hal_mcuctrl_info_get+0x120>)
    e13e:	69a5      	ldr	r5, [r4, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e140:	f3c5 1080 	ubfx	r0, r5, #6, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e144:	f3c5 0780 	ubfx	r7, r5, #2, #1
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
    e148:	7008      	strb	r0, [r1, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
    e14a:	704f      	strb	r7, [r1, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
    e14c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
    e150:	f3c3 6681 	ubfx	r6, r3, #26, #2
            psFeature->ui8SecBootFeature =
    e154:	710e      	strb	r6, [r1, #4]
            ui32Feature = MCUCTRL->SKU;
    e156:	6964      	ldr	r4, [r4, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e158:	f3c4 0240 	ubfx	r2, r4, #1, #1
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
    e15c:	f004 0501 	and.w	r5, r4, #1
    e160:	70cd      	strb	r5, [r1, #3]
    return AM_HAL_STATUS_SUCCESS;
    e162:	2000      	movs	r0, #0
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
    e164:	708a      	strb	r2, [r1, #2]
} // am_hal_mcuctrl_info_get()
    e166:	bcf0      	pop	{r4, r5, r6, r7}
    e168:	4770      	bx	lr
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e16a:	4a28      	ldr	r2, [pc, #160]	; (e20c <am_hal_mcuctrl_info_get+0x120>)
        g_am_hal_mcuctrl_flash_size[
    e16c:	4c28      	ldr	r4, [pc, #160]	; (e210 <am_hal_mcuctrl_info_get+0x124>)
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
    e16e:	6813      	ldr	r3, [r2, #0]
    e170:	600b      	str	r3, [r1, #0]
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
    e172:	6850      	ldr	r0, [r2, #4]
    e174:	6048      	str	r0, [r1, #4]
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
    e176:	6897      	ldr	r7, [r2, #8]
    e178:	608f      	str	r7, [r1, #8]
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
    e17a:	68d6      	ldr	r6, [r2, #12]
    e17c:	60ce      	str	r6, [r1, #12]
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e17e:	6915      	ldr	r5, [r2, #16]
        g_am_hal_mcuctrl_sram_size[
    e180:	4824      	ldr	r0, [pc, #144]	; (e214 <am_hal_mcuctrl_info_get+0x128>)
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
    e182:	610d      	str	r5, [r1, #16]
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
    e184:	f3c3 5c03 	ubfx	ip, r3, #20, #4
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
    e188:	f3c3 4703 	ubfx	r7, r3, #16, #4
    psDevice->ui32SKU = MCUCTRL->SKU;
    e18c:	6956      	ldr	r6, [r2, #20]
    psDevice->ui32SRAMSize =
    e18e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e192:	4a21      	ldr	r2, [pc, #132]	; (e218 <am_hal_mcuctrl_info_get+0x12c>)
    psDevice->ui32FlashSize =
    e194:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    psDevice->ui32SKU = MCUCTRL->SKU;
    e198:	614e      	str	r6, [r1, #20]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e19a:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    e19e:	61cc      	str	r4, [r1, #28]
    psDevice->ui32SRAMSize =
    e1a0:	620d      	str	r5, [r1, #32]
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
    e1a2:	618b      	str	r3, [r1, #24]
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e1a4:	f8d2 70e0 	ldr.w	r7, [r2, #224]	; 0xe0
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e1a8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
    e1ac:	b2fe      	uxtb	r6, r7
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
    e1ae:	f000 040f 	and.w	r4, r0, #15
    e1b2:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
    e1b6:	624d      	str	r5, [r1, #36]	; 0x24
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e1b8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e1bc:	f8d2 70e8 	ldr.w	r7, [r2, #232]	; 0xe8
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
    e1c0:	f3c3 1603 	ubfx	r6, r3, #4, #4
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
    e1c4:	f007 0c0f 	and.w	ip, r7, #15
    e1c8:	ea46 100c 	orr.w	r0, r6, ip, lsl #4
    e1cc:	6288      	str	r0, [r1, #40]	; 0x28
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e1ce:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e1d2:	f8d2 50ec 	ldr.w	r5, [r2, #236]	; 0xec
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
    e1d6:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
    e1da:	f3c5 1703 	ubfx	r7, r5, #4, #4
    e1de:	433b      	orrs	r3, r7
    e1e0:	62cb      	str	r3, [r1, #44]	; 0x2c
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
    e1e2:	f8d2 60fc 	ldr.w	r6, [r2, #252]	; 0xfc
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e1e6:	f8d2 40f8 	ldr.w	r4, [r2, #248]	; 0xf8
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e1ea:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e1ee:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
    e1f2:	b2e5      	uxtb	r5, r4
    e1f4:	042b      	lsls	r3, r5, #16
    e1f6:	ea43 6706 	orr.w	r7, r3, r6, lsl #24
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e1fa:	b2d6      	uxtb	r6, r2
    e1fc:	4337      	orrs	r7, r6
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
    e1fe:	b2c4      	uxtb	r4, r0
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
    e200:	ea47 2004 	orr.w	r0, r7, r4, lsl #8
    e204:	6308      	str	r0, [r1, #48]	; 0x30
    return AM_HAL_STATUS_SUCCESS;
    e206:	2000      	movs	r0, #0
} // am_hal_mcuctrl_info_get()
    e208:	bcf0      	pop	{r4, r5, r6, r7}
    e20a:	4770      	bx	lr
    e20c:	40020000 	.word	0x40020000
    e210:	0000f844 	.word	0x0000f844
    e214:	0000f884 	.word	0x0000f884
    e218:	f0000f00 	.word	0xf0000f00

0000e21c <am_hal_pwrctrl_periph_enable>:
//  Enable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_enable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e21c:	b570      	push	{r4, r5, r6, lr}
    e21e:	b082      	sub	sp, #8
    e220:	4604      	mov	r4, r0
// #### INTERNAL END ####

    //
    // Enable power control for the given device.
    //
    AM_CRITICAL_BEGIN
    e222:	f7ff ff07 	bl	e034 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e226:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e22a:	008c      	lsls	r4, r1, #2
    e22c:	4e0e      	ldr	r6, [pc, #56]	; (e268 <am_hal_pwrctrl_periph_enable+0x4c>)
    e22e:	4d0f      	ldr	r5, [pc, #60]	; (e26c <am_hal_pwrctrl_periph_enable+0x50>)
    AM_CRITICAL_BEGIN
    e230:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e232:	592a      	ldr	r2, [r5, r4]
    e234:	68b3      	ldr	r3, [r6, #8]
    e236:	4313      	orrs	r3, r2
    e238:	60b3      	str	r3, [r6, #8]
    AM_CRITICAL_END
    e23a:	9801      	ldr	r0, [sp, #4]

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e23c:	442c      	add	r4, r5
    AM_CRITICAL_END
    e23e:	f7ff fefd 	bl	e03c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e242:	2077      	movs	r0, #119	; 0x77
    e244:	f7ff fc7a 	bl	db3c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e248:	69b0      	ldr	r0, [r6, #24]
    e24a:	6864      	ldr	r4, [r4, #4]
    e24c:	4220      	tst	r0, r4
    e24e:	d103      	bne.n	e258 <am_hal_pwrctrl_periph_enable+0x3c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e250:	2077      	movs	r0, #119	; 0x77
    e252:	f7ff fc73 	bl	db3c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    e256:	69b3      	ldr	r3, [r6, #24]
    }

    //
    // Check the device status.
    //
    if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0 )
    e258:	4903      	ldr	r1, [pc, #12]	; (e268 <am_hal_pwrctrl_periph_enable+0x4c>)
    e25a:	698d      	ldr	r5, [r1, #24]
    e25c:	4225      	tst	r5, r4
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
#endif // AM_CMSIS_REGS
}
    e25e:	bf0c      	ite	eq
    e260:	2001      	moveq	r0, #1
    e262:	2000      	movne	r0, #0
    e264:	b002      	add	sp, #8
    e266:	bd70      	pop	{r4, r5, r6, pc}
    e268:	40021000 	.word	0x40021000
    e26c:	0000fa2c 	.word	0x0000fa2c

0000e270 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    e270:	b570      	push	{r4, r5, r6, lr}
    e272:	b082      	sub	sp, #8
    e274:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
#if AM_CMSIS_REGS
    AM_CRITICAL_BEGIN
    e276:	f7ff fedd 	bl	e034 <am_hal_interrupt_master_disable>
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e27a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    e27e:	008c      	lsls	r4, r1, #2
    e280:	4e0f      	ldr	r6, [pc, #60]	; (e2c0 <am_hal_pwrctrl_periph_disable+0x50>)
    e282:	4d10      	ldr	r5, [pc, #64]	; (e2c4 <am_hal_pwrctrl_periph_disable+0x54>)
    AM_CRITICAL_BEGIN
    e284:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    e286:	68b3      	ldr	r3, [r6, #8]
    e288:	592a      	ldr	r2, [r5, r4]
    e28a:	ea23 0002 	bic.w	r0, r3, r2
    e28e:	60b0      	str	r0, [r6, #8]
    AM_CRITICAL_END
    e290:	9801      	ldr	r0, [sp, #4]
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));

#if AM_CMSIS_REGS
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e292:	442c      	add	r4, r5
    AM_CRITICAL_END
    e294:	f7ff fed2 	bl	e03c <am_hal_interrupt_master_set>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e298:	2077      	movs	r0, #119	; 0x77
    e29a:	f7ff fc4f 	bl	db3c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e29e:	69b1      	ldr	r1, [r6, #24]
    e2a0:	6864      	ldr	r4, [r4, #4]
    e2a2:	4221      	tst	r1, r4
    e2a4:	d003      	beq.n	e2ae <am_hal_pwrctrl_periph_disable+0x3e>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    e2a6:	2077      	movs	r0, #119	; 0x77
    e2a8:	f7ff fc48 	bl	db3c <am_hal_flash_delay>
        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e2ac:	69b3      	ldr	r3, [r6, #24]

    //
    // Check the device status.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    e2ae:	4d04      	ldr	r5, [pc, #16]	; (e2c0 <am_hal_pwrctrl_periph_disable+0x50>)
    e2b0:	69ae      	ldr	r6, [r5, #24]
    e2b2:	4226      	tst	r6, r4
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e2b4:	bf14      	ite	ne
    e2b6:	2001      	movne	r0, #1
    e2b8:	2000      	moveq	r0, #0
    e2ba:	b002      	add	sp, #8
    e2bc:	bd70      	pop	{r4, r5, r6, pc}
    e2be:	bf00      	nop
    e2c0:	40021000 	.word	0x40021000
    e2c4:	0000fa2c 	.word	0x0000fa2c

0000e2c8 <am_hal_pwrctrl_memory_enable>:
//  Enable a configuration of memory.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_memory_enable(am_hal_pwrctrl_mem_e eMemConfig)
{
    e2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if 0
    uint32_t ui32MemEventMask;
#endif
// #### INTERNAL END ####

    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e2cc:	ea4f 0980 	mov.w	r9, r0, lsl #2
    e2d0:	eb09 0300 	add.w	r3, r9, r0
    e2d4:	4f1e      	ldr	r7, [pc, #120]	; (e350 <am_hal_pwrctrl_memory_enable+0x88>)
{
    e2d6:	4604      	mov	r4, r0
    ui32MemEnMask     =  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEnable;
    e2d8:	0098      	lsls	r0, r3, #2
    e2da:	183a      	adds	r2, r7, r0
    e2dc:	583d      	ldr	r5, [r7, r0]
#if 0
    ui32MemEventMask  = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryEvent;
#endif
// #### INTERNAL END ####
    ui32MemRegionMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryMask;
    ui32MemStatusMask = am_hal_pwrctrl_memory_control[eMemConfig].ui32StatusMask;
    e2de:	6916      	ldr	r6, [r2, #16]
    //
    // Note that a deliberate disable step using a disable mask is taken here
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    e2e0:	43eb      	mvns	r3, r5
    e2e2:	d126      	bne.n	e332 <am_hal_pwrctrl_memory_enable+0x6a>
// #### INTERNAL END ####

    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    e2e4:	b965      	cbnz	r5, e300 <am_hal_pwrctrl_memory_enable+0x38>
    e2e6:	444c      	add	r4, r9
    e2e8:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
    e2ec:	f8dc 5004 	ldr.w	r5, [ip, #4]

    //
    // Return status based on whether the power control memory status has reached the desired state.
    //
#if AM_CMSIS_REGS
    if ( ( PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e2f0:	4918      	ldr	r1, [pc, #96]	; (e354 <am_hal_pwrctrl_memory_enable+0x8c>)
    e2f2:	694a      	ldr	r2, [r1, #20]
    e2f4:	4032      	ands	r2, r6
#endif // AM_CMSIS_REGS
    else
    {
        return AM_HAL_STATUS_FAIL;
    }
}
    e2f6:	1b50      	subs	r0, r2, r5
    e2f8:	bf18      	it	ne
    e2fa:	2001      	movne	r0, #1
    e2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e300:	f8df 8050 	ldr.w	r8, [pc, #80]	; e354 <am_hal_pwrctrl_memory_enable+0x8c>
    e304:	f8d8 0010 	ldr.w	r0, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e308:	444c      	add	r4, r9
        PWRCTRL->MEMPWREN |= ui32MemEnMask;
    e30a:	4305      	orrs	r5, r0
    e30c:	f8c8 5010 	str.w	r5, [r8, #16]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e310:	eb07 0484 	add.w	r4, r7, r4, lsl #2
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e314:	2077      	movs	r0, #119	; 0x77
    e316:	f7ff fc11 	bl	db3c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e31a:	f8d8 7014 	ldr.w	r7, [r8, #20]
                  am_hal_pwrctrl_memory_control[eMemConfig].ui32MemoryStatus )
    e31e:	6865      	ldr	r5, [r4, #4]
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e320:	4037      	ands	r7, r6
    e322:	42af      	cmp	r7, r5
    e324:	d0e4      	beq.n	e2f0 <am_hal_pwrctrl_memory_enable+0x28>
            am_hal_flash_delay(FLASH_CYCLES_US(10));
    e326:	2077      	movs	r0, #119	; 0x77
    e328:	f7ff fc08 	bl	db3c <am_hal_flash_delay>
            if ( (PWRCTRL->MEMPWRSTATUS & ui32MemStatusMask) ==
    e32c:	f8d8 3014 	ldr.w	r3, [r8, #20]
    e330:	e7de      	b.n	e2f0 <am_hal_pwrctrl_memory_enable+0x28>
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e332:	68d0      	ldr	r0, [r2, #12]
        PWRCTRL->MEMPWREN &=
    e334:	4907      	ldr	r1, [pc, #28]	; (e354 <am_hal_pwrctrl_memory_enable+0x8c>)
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e336:	4003      	ands	r3, r0
        PWRCTRL->MEMPWREN &=
    e338:	690a      	ldr	r2, [r1, #16]
            ~(ui32MemDisMask & ui32MemRegionMask)                                   |
    e33a:	f242 0801 	movw	r8, #8193	; 0x2001
    e33e:	ea68 0303 	orn	r3, r8, r3
        PWRCTRL->MEMPWREN &=
    e342:	4013      	ands	r3, r2
    e344:	610b      	str	r3, [r1, #16]
        am_hal_flash_delay(FLASH_CYCLES_US(1));
    e346:	2001      	movs	r0, #1
    e348:	f7ff fbf8 	bl	db3c <am_hal_flash_delay>
    e34c:	e7ca      	b.n	e2e4 <am_hal_pwrctrl_memory_enable+0x1c>
    e34e:	bf00      	nop
    e350:	0000f8c4 	.word	0x0000f8c4
    e354:	40021000 	.word	0x40021000

0000e358 <am_hal_pwrctrl_low_power_init>:
//  Initialize system for low power configuration.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_low_power_init(void)
{
    e358:	b530      	push	{r4, r5, lr}

#if AM_CMSIS_REGS
    //
    // Check if the BLE is already enabled.
    //
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e35a:	4c1b      	ldr	r4, [pc, #108]	; (e3c8 <am_hal_pwrctrl_low_power_init+0x70>)
    e35c:	69a3      	ldr	r3, [r4, #24]
    e35e:	05db      	lsls	r3, r3, #23
{
    e360:	b083      	sub	sp, #12
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
    e362:	d502      	bpl.n	e36a <am_hal_pwrctrl_low_power_init+0x12>
            AM_BFW(MCUCTRL, BLEBUCK2,  BLEBUCKTONLOWTRIM, 0xF);
        }
    }
#endif // AM_CMSIS_REGS

    return AM_HAL_STATUS_SUCCESS;
    e364:	2000      	movs	r0, #0
}
    e366:	b003      	add	sp, #12
    e368:	bd30      	pop	{r4, r5, pc}
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e36a:	4d18      	ldr	r5, [pc, #96]	; (e3cc <am_hal_pwrctrl_low_power_init+0x74>)
        ui32Status = am_hal_flash_delay_status_check(10000,
    e36c:	4918      	ldr	r1, [pc, #96]	; (e3d0 <am_hal_pwrctrl_low_power_init+0x78>)
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e36e:	2001      	movs	r0, #1
        ui32Status = am_hal_flash_delay_status_check(10000,
    e370:	2307      	movs	r3, #7
        MCUCTRL->FEATUREENABLE = MCUCTRL_FEATUREENABLE_BLEREQ_Msk;
    e372:	61a8      	str	r0, [r5, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
    e374:	461a      	mov	r2, r3
    e376:	9000      	str	r0, [sp, #0]
    e378:	f242 7010 	movw	r0, #10000	; 0x2710
    e37c:	f7ff fbe2 	bl	db44 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e380:	b110      	cbz	r0, e388 <am_hal_pwrctrl_low_power_init+0x30>
            return AM_HAL_STATUS_TIMEOUT;
    e382:	2004      	movs	r0, #4
}
    e384:	b003      	add	sp, #12
    e386:	bd30      	pop	{r4, r5, pc}
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
    e388:	6821      	ldr	r1, [r4, #0]
    e38a:	f041 0201 	orr.w	r2, r1, #1
    e38e:	6022      	str	r2, [r4, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
    e390:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e392:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    e396:	6261      	str	r1, [r4, #36]	; 0x24
        if ( APOLLO3_A0 )
    e398:	68ec      	ldr	r4, [r5, #12]
    e39a:	b2e2      	uxtb	r2, r4
    e39c:	2a11      	cmp	r2, #17
    e39e:	d1e1      	bne.n	e364 <am_hal_pwrctrl_low_power_init+0xc>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
    e3a0:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e3a4:	f360 5356 	bfi	r3, r0, #21, #2
    e3a8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
    e3ac:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e3b0:	240f      	movs	r4, #15
    e3b2:	f364 118b 	bfi	r1, r4, #6, #6
    e3b6:	f8c5 1368 	str.w	r1, [r5, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
    e3ba:	f8d5 2368 	ldr.w	r2, [r5, #872]	; 0x368
    e3be:	f364 0205 	bfi	r2, r4, #0, #6
    e3c2:	f8c5 2368 	str.w	r2, [r5, #872]	; 0x368
    e3c6:	e7ce      	b.n	e366 <am_hal_pwrctrl_low_power_init+0xe>
    e3c8:	40021000 	.word	0x40021000
    e3cc:	40020000 	.word	0x40020000
    e3d0:	40020018 	.word	0x40020018

0000e3d4 <am_hal_rtc_osc_select>:
#if AM_CMSIS_REGS
#if 1//USE_CLKGEN
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    {
        // Set bit to 1 for LFRC
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e3d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    if ( ui32OSC == AM_HAL_RTC_OSC_LFRC )
    e3d8:	2801      	cmp	r0, #1
        CLKGEN->OCTRL |= CLKGEN_OCTRL_OSEL_Msk;
    e3da:	68d3      	ldr	r3, [r2, #12]
    e3dc:	bf0c      	ite	eq
    e3de:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
        // Clear bit to 0 for XTAL
        CLKGEN->OCTRL &= ~CLKGEN_OCTRL_OSEL_Msk;
    e3e2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e3e6:	60d3      	str	r3, [r2, #12]
    e3e8:	4770      	bx	lr
    e3ea:	bf00      	nop

0000e3ec <am_hal_rtc_osc_disable>:
    //
#if AM_CMSIS_REGS
#if USE_CLKGEN
    CLKGEN->RTCCTL_b.RSTOP = 1;
#else
    RTC->RTCCTL_b.RSTOP = 1;
    e3ec:	4a03      	ldr	r2, [pc, #12]	; (e3fc <am_hal_rtc_osc_disable+0x10>)
    e3ee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e3f2:	f043 0010 	orr.w	r0, r3, #16
    e3f6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    e3fa:	4770      	bx	lr
    e3fc:	40004200 	.word	0x40004200

0000e400 <am_hal_uart_initialize>:
am_hal_uart_initialize(uint32_t ui32Module, void **ppHandle)
{
    //
    // Check that the request module is in range.
    //
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    e400:	2801      	cmp	r0, #1
    e402:	d901      	bls.n	e408 <am_hal_uart_initialize+0x8>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    e404:	2005      	movs	r0, #5
    e406:	4770      	bx	lr
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    e408:	b169      	cbz	r1, e426 <am_hal_uart_initialize+0x26>
{
    e40a:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    e40c:	2264      	movs	r2, #100	; 0x64
    e40e:	4e0e      	ldr	r6, [pc, #56]	; (e448 <am_hal_uart_initialize+0x48>)
    e410:	fb02 f200 	mul.w	r2, r2, r0
    e414:	18b4      	adds	r4, r6, r2
    e416:	4603      	mov	r3, r0
    e418:	78e0      	ldrb	r0, [r4, #3]
    e41a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e41e:	b2fd      	uxtb	r5, r7
    e420:	b11d      	cbz	r5, e42a <am_hal_uart_initialize+0x2a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    e422:	2007      	movs	r0, #7

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_initialize()
    e424:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return AM_HAL_STATUS_INVALID_ARG;
    e426:	2006      	movs	r0, #6
    e428:	4770      	bx	lr
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    e42a:	f040 0001 	orr.w	r0, r0, #1
    e42e:	70e0      	strb	r0, [r4, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    e430:	58b0      	ldr	r0, [r6, r2]
    e432:	f8df e018 	ldr.w	lr, [pc, #24]	; e44c <am_hal_uart_initialize+0x4c>
    e436:	f36e 0017 	bfi	r0, lr, #0, #24
    e43a:	50b0      	str	r0, [r6, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    e43c:	6263      	str	r3, [r4, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    e43e:	7127      	strb	r7, [r4, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    e440:	6625      	str	r5, [r4, #96]	; 0x60
    return AM_HAL_STATUS_SUCCESS;
    e442:	4628      	mov	r0, r5
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    e444:	600c      	str	r4, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
    e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e448:	1000111c 	.word	0x1000111c
    e44c:	00ea9e06 	.word	0x00ea9e06

0000e450 <am_hal_uart_deinitialize>:
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *)pHandle;

    //
    // Check the handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e450:	b128      	cbz	r0, e45e <am_hal_uart_deinitialize+0xe>
    e452:	6803      	ldr	r3, [r0, #0]
    e454:	4a07      	ldr	r2, [pc, #28]	; (e474 <am_hal_uart_deinitialize+0x24>)
    e456:	f023 417e 	bic.w	r1, r3, #4261412864	; 0xfe000000
    e45a:	4291      	cmp	r1, r2
    e45c:	d001      	beq.n	e462 <am_hal_uart_deinitialize+0x12>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e45e:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_deinitialize()
    e460:	4770      	bx	lr
    pState->prefix.s.bInit = false;
    e462:	78c2      	ldrb	r2, [r0, #3]
    pState->ui32Module = 0;
    e464:	2300      	movs	r3, #0
    pState->prefix.s.bInit = false;
    e466:	f36f 0200 	bfc	r2, #0, #1
    e46a:	70c2      	strb	r2, [r0, #3]
    pState->ui32Module = 0;
    e46c:	6243      	str	r3, [r0, #36]	; 0x24
    pState->sRegState.bValid = false;
    e46e:	7103      	strb	r3, [r0, #4]
    return AM_HAL_STATUS_SUCCESS;
    e470:	4618      	mov	r0, r3
    e472:	4770      	bx	lr
    e474:	01ea9e06 	.word	0x01ea9e06

0000e478 <am_hal_uart_power_control>:
//*****************************************************************************
uint32_t
am_hal_uart_power_control(void *pHandle,
                          am_hal_sysctrl_power_state_e ePowerState,
                          bool bRetainState)
{
    e478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                 ui32Module));

    //
    // Check to make sure this is a valid handle.
    //
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e47c:	6804      	ldr	r4, [r0, #0]
    e47e:	4b36      	ldr	r3, [pc, #216]	; (e558 <am_hal_uart_power_control+0xe0>)
    e480:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e484:	429c      	cmp	r4, r3
{
    e486:	b084      	sub	sp, #16
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e488:	d003      	beq.n	e492 <am_hal_uart_power_control+0x1a>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    e48a:	2002      	movs	r0, #2

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_uart_power_control()
    e48c:	b004      	add	sp, #16
    e48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t ui32Module = pState->ui32Module;
    e492:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e494:	4605      	mov	r5, r0
    am_hal_pwrctrl_periph_e eUARTPowerModule = ((am_hal_pwrctrl_periph_e)
    e496:	f107 0008 	add.w	r0, r7, #8
    e49a:	460e      	mov	r6, r1
    e49c:	fa5f f880 	uxtb.w	r8, r0
    switch (ePowerState)
    e4a0:	b181      	cbz	r1, e4c4 <am_hal_uart_power_control+0x4c>
    e4a2:	2902      	cmp	r1, #2
    e4a4:	d80c      	bhi.n	e4c0 <am_hal_uart_power_control+0x48>
            if (bRetainState)
    e4a6:	b992      	cbnz	r2, e4ce <am_hal_uart_power_control+0x56>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

#if AM_CMSIS_REGS
    UARTn(ui32Module)->IEC = ui32IntMask;
    e4a8:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    e4ac:	341c      	adds	r4, #28
    e4ae:	0325      	lsls	r5, r4, #12
    e4b0:	f04f 31ff 	mov.w	r1, #4294967295
    e4b4:	6469      	str	r1, [r5, #68]	; 0x44
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    e4b6:	4640      	mov	r0, r8
    e4b8:	f7ff feda 	bl	e270 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    e4bc:	2000      	movs	r0, #0
            break;
    e4be:	e7e5      	b.n	e48c <am_hal_uart_power_control+0x14>
            return AM_HAL_STATUS_INVALID_ARG;
    e4c0:	2006      	movs	r0, #6
    e4c2:	e7e3      	b.n	e48c <am_hal_uart_power_control+0x14>
            if (bRetainState && !pState->sRegState.bValid)
    e4c4:	b322      	cbz	r2, e510 <am_hal_uart_power_control+0x98>
    e4c6:	792a      	ldrb	r2, [r5, #4]
    e4c8:	bb42      	cbnz	r2, e51c <am_hal_uart_power_control+0xa4>
                return AM_HAL_STATUS_INVALID_OPERATION;
    e4ca:	2007      	movs	r0, #7
    e4cc:	e7de      	b.n	e48c <am_hal_uart_power_control+0x14>
                AM_CRITICAL_BEGIN
    e4ce:	f7ff fdb1 	bl	e034 <am_hal_interrupt_master_disable>
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e4d2:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e4d6:	311c      	adds	r1, #28
    e4d8:	030f      	lsls	r7, r1, #12
                AM_CRITICAL_BEGIN
    e4da:	9003      	str	r0, [sp, #12]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    e4dc:	6a3a      	ldr	r2, [r7, #32]
    e4de:	60aa      	str	r2, [r5, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4e2:	60eb      	str	r3, [r5, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    e4e4:	6abe      	ldr	r6, [r7, #40]	; 0x28
    e4e6:	612e      	str	r6, [r5, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    e4e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e4ea:	6168      	str	r0, [r5, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    e4ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e4ee:	61a9      	str	r1, [r5, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    e4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e4f2:	61ea      	str	r2, [r5, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    e4f4:	6bbf      	ldr	r7, [r7, #56]	; 0x38
    e4f6:	622f      	str	r7, [r5, #32]
                pState->sRegState.bValid = true;
    e4f8:	2301      	movs	r3, #1
                AM_CRITICAL_END
    e4fa:	9803      	ldr	r0, [sp, #12]
                pState->sRegState.bValid = true;
    e4fc:	712b      	strb	r3, [r5, #4]
                AM_CRITICAL_END
    e4fe:	f7ff fd9d 	bl	e03c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e502:	682e      	ldr	r6, [r5, #0]
    e504:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e508:	42a0      	cmp	r0, r4
    e50a:	d1d4      	bne.n	e4b6 <am_hal_uart_power_control+0x3e>
    uint32_t ui32Module = pState->ui32Module;
    e50c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e50e:	e7cb      	b.n	e4a8 <am_hal_uart_power_control+0x30>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e510:	4640      	mov	r0, r8
    e512:	9201      	str	r2, [sp, #4]
    e514:	f7ff fe82 	bl	e21c <am_hal_pwrctrl_periph_enable>
    return AM_HAL_STATUS_SUCCESS;
    e518:	9801      	ldr	r0, [sp, #4]
    e51a:	e7b7      	b.n	e48c <am_hal_uart_power_control+0x14>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    e51c:	4640      	mov	r0, r8
    e51e:	f7ff fe7d 	bl	e21c <am_hal_pwrctrl_periph_enable>
                AM_CRITICAL_BEGIN
    e522:	f7ff fd87 	bl	e034 <am_hal_interrupt_master_disable>
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e526:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e52a:	331c      	adds	r3, #28
    e52c:	031f      	lsls	r7, r3, #12
    e52e:	68ac      	ldr	r4, [r5, #8]
                AM_CRITICAL_BEGIN
    e530:	9002      	str	r0, [sp, #8]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    e532:	623c      	str	r4, [r7, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    e534:	68e9      	ldr	r1, [r5, #12]
    e536:	6279      	str	r1, [r7, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    e538:	6928      	ldr	r0, [r5, #16]
    e53a:	62b8      	str	r0, [r7, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    e53c:	696a      	ldr	r2, [r5, #20]
    e53e:	62fa      	str	r2, [r7, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    e540:	69ab      	ldr	r3, [r5, #24]
    e542:	633b      	str	r3, [r7, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    e544:	69ec      	ldr	r4, [r5, #28]
    e546:	637c      	str	r4, [r7, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    e548:	6a29      	ldr	r1, [r5, #32]
    e54a:	63b9      	str	r1, [r7, #56]	; 0x38
                AM_CRITICAL_END
    e54c:	9802      	ldr	r0, [sp, #8]
                pState->sRegState.bValid = false;
    e54e:	712e      	strb	r6, [r5, #4]
                AM_CRITICAL_END
    e550:	f7ff fd74 	bl	e03c <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    e554:	4630      	mov	r0, r6
    e556:	e799      	b.n	e48c <am_hal_uart_power_control+0x14>
    e558:	01ea9e06 	.word	0x01ea9e06

0000e55c <am_hal_uart_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e55c:	6803      	ldr	r3, [r0, #0]
    e55e:	4a69      	ldr	r2, [pc, #420]	; (e704 <am_hal_uart_configure+0x1a8>)
    e560:	f023 4c7e 	bic.w	ip, r3, #4261412864	; 0xfe000000
    e564:	4594      	cmp	ip, r2
    e566:	d001      	beq.n	e56c <am_hal_uart_configure+0x10>
        return AM_HAL_STATUS_INVALID_HANDLE;
    e568:	2002      	movs	r0, #2
    e56a:	4770      	bx	lr
{
    e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Module = pState->ui32Module;
    e570:	6a46      	ldr	r6, [r0, #36]	; 0x24
{
    e572:	b084      	sub	sp, #16
    e574:	460d      	mov	r5, r1
    e576:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    e578:	f7ff fd5c 	bl	e034 <am_hal_interrupt_master_disable>
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e57c:	f506 2180 	add.w	r1, r6, #262144	; 0x40000
    e580:	311c      	adds	r1, #28
    e582:	030f      	lsls	r7, r1, #12
    AM_CRITICAL_BEGIN
    e584:	9001      	str	r0, [sp, #4]
    UARTn(ui32Module)->CR |= UART0_CR_CLKEN_Msk;
    e586:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e588:	f040 0208 	orr.w	r2, r0, #8
    e58c:	633a      	str	r2, [r7, #48]	; 0x30
    UARTn(ui32Module)->CR |= _VAL2FLD(UART0_CR_CLKSEL, UART0_CR_CLKSEL_24MHZ);
    e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e590:	f043 0610 	orr.w	r6, r3, #16
    e594:	633e      	str	r6, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e596:	9801      	ldr	r0, [sp, #4]
    e598:	f7ff fd50 	bl	e03c <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    e59c:	f7ff fd4a 	bl	e034 <am_hal_interrupt_master_disable>
    e5a0:	9002      	str	r0, [sp, #8]
    UARTn(ui32Module)->CR &=
    e5a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e5a4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
    e5a8:	f020 0201 	bic.w	r2, r0, #1
    e5ac:	633a      	str	r2, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e5ae:	9802      	ldr	r0, [sp, #8]
    e5b0:	f7ff fd44 	bl	e03c <am_hal_interrupt_master_set>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e5b6:	f3c3 1802 	ubfx	r8, r3, #4, #3
    e5ba:	f108 36ff 	add.w	r6, r8, #4294967295
    e5be:	2e03      	cmp	r6, #3
    e5c0:	d846      	bhi.n	e650 <am_hal_uart_configure+0xf4>
    e5c2:	e8df f006 	tbb	[pc, r6]
    e5c6:	020e      	.short	0x020e
    e5c8:	1114      	.short	0x1114
    e5ca:	494f      	ldr	r1, [pc, #316]	; (e708 <am_hal_uart_configure+0x1ac>)
            ui32UartClkFreq = 12000000;
    e5cc:	484f      	ldr	r0, [pc, #316]	; (e70c <am_hal_uart_configure+0x1b0>)
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    e5ce:	682a      	ldr	r2, [r5, #0]
    e5d0:	0116      	lsls	r6, r2, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    e5d2:	fbb0 f3f6 	udiv	r3, r0, r6
    if (ui32IntegerDivisor == 0)
    e5d6:	b96b      	cbnz	r3, e5f4 <am_hal_uart_configure+0x98>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    e5d8:	484d      	ldr	r0, [pc, #308]	; (e710 <am_hal_uart_configure+0x1b4>)
        *pui32ActualBaud = 0;
    e5da:	6623      	str	r3, [r4, #96]	; 0x60
} // am_hal_uart_configure()
    e5dc:	b004      	add	sp, #16
    e5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e5e2:	494c      	ldr	r1, [pc, #304]	; (e714 <am_hal_uart_configure+0x1b8>)
            ui32UartClkFreq = 24000000;
    e5e4:	484c      	ldr	r0, [pc, #304]	; (e718 <am_hal_uart_configure+0x1bc>)
    e5e6:	e7f2      	b.n	e5ce <am_hal_uart_configure+0x72>
    e5e8:	494c      	ldr	r1, [pc, #304]	; (e71c <am_hal_uart_configure+0x1c0>)
            ui32UartClkFreq = 3000000;
    e5ea:	484d      	ldr	r0, [pc, #308]	; (e720 <am_hal_uart_configure+0x1c4>)
    e5ec:	e7ef      	b.n	e5ce <am_hal_uart_configure+0x72>
    switch( UARTn(ui32Module)->CR_b.CLKSEL )
    e5ee:	494d      	ldr	r1, [pc, #308]	; (e724 <am_hal_uart_configure+0x1c8>)
            ui32UartClkFreq = 6000000;
    e5f0:	484d      	ldr	r0, [pc, #308]	; (e728 <am_hal_uart_configure+0x1cc>)
    e5f2:	e7ec      	b.n	e5ce <am_hal_uart_configure+0x72>
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    e5f4:	fbb1 f1f6 	udiv	r1, r1, r6
    e5f8:	eba1 1283 	sub.w	r2, r1, r3, lsl #6
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e5fc:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e5fe:	eb02 1603 	add.w	r6, r2, r3, lsl #4
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    e602:	627b      	str	r3, [r7, #36]	; 0x24
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e604:	fbb0 f0f6 	udiv	r0, r0, r6
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    e608:	62ba      	str	r2, [r7, #40]	; 0x28
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor));
    e60a:	6620      	str	r0, [r4, #96]	; 0x60
    UARTn(ui32Module)->CR   |= psConfig->ui32FlowControl;
    e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e60e:	6929      	ldr	r1, [r5, #16]
    e610:	430b      	orrs	r3, r1
    e612:	633b      	str	r3, [r7, #48]	; 0x30
    UARTn(ui32Module)->IFLS  = psConfig->ui32FifoLevels;
    e614:	696a      	ldr	r2, [r5, #20]
    e616:	637a      	str	r2, [r7, #52]	; 0x34
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e618:	686e      	ldr	r6, [r5, #4]
    e61a:	68a8      	ldr	r0, [r5, #8]
                                psConfig->ui32StopBits   |
    e61c:	68e9      	ldr	r1, [r5, #12]
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e61e:	4306      	orrs	r6, r0
                                psConfig->ui32StopBits   |
    e620:	f046 0310 	orr.w	r3, r6, #16
    e624:	430b      	orrs	r3, r1
    UARTn(ui32Module)->LCRH  = (psConfig->ui32DataBits   |
    e626:	62fb      	str	r3, [r7, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    e628:	f7ff fd04 	bl	e034 <am_hal_interrupt_master_disable>
    e62c:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR   |=
    e62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e630:	f442 7640 	orr.w	r6, r2, #768	; 0x300
    e634:	f046 0001 	orr.w	r0, r6, #1
    e638:	6338      	str	r0, [r7, #48]	; 0x30
    AM_CRITICAL_END
    e63a:	9803      	ldr	r0, [sp, #12]
    e63c:	f7ff fcfe 	bl	e03c <am_hal_interrupt_master_set>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e640:	6827      	ldr	r7, [r4, #0]
    e642:	4930      	ldr	r1, [pc, #192]	; (e704 <am_hal_uart_configure+0x1a8>)
    e644:	f027 467e 	bic.w	r6, r7, #4261412864	; 0xfe000000
    e648:	428e      	cmp	r6, r1
    e64a:	d005      	beq.n	e658 <am_hal_uart_configure+0xfc>
    return AM_HAL_STATUS_SUCCESS;
    e64c:	2000      	movs	r0, #0
    e64e:	e7c5      	b.n	e5dc <am_hal_uart_configure+0x80>
            *pui32ActualBaud = 0;
    e650:	2600      	movs	r6, #0
    e652:	6626      	str	r6, [r4, #96]	; 0x60
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    e654:	4835      	ldr	r0, [pc, #212]	; (e72c <am_hal_uart_configure+0x1d0>)
    e656:	e7c1      	b.n	e5dc <am_hal_uart_configure+0x80>
    buffer_configure(pHandle,
    e658:	69a9      	ldr	r1, [r5, #24]
    e65a:	6a2f      	ldr	r7, [r5, #32]
    e65c:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    if (pui8TxBuffer && ui32TxBufferSize)
    e660:	b109      	cbz	r1, e666 <am_hal_uart_configure+0x10a>
    buffer_configure(pHandle,
    e662:	69eb      	ldr	r3, [r5, #28]
    if (pui8TxBuffer && ui32TxBufferSize)
    e664:	b9f3      	cbnz	r3, e6a4 <am_hal_uart_configure+0x148>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e666:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e668:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    e66c:	331c      	adds	r3, #28
    e66e:	031e      	lsls	r6, r3, #12
        pState->bEnableTxQueue = false;
    e670:	f04f 0e00 	mov.w	lr, #0
    e674:	f884 e028 	strb.w	lr, [r4, #40]	; 0x28
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e678:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e67a:	f022 0020 	bic.w	r0, r2, #32
    e67e:	63b0      	str	r0, [r6, #56]	; 0x38
    if (pui8RxBuffer && ui32RxBufferSize)
    e680:	b117      	cbz	r7, e688 <am_hal_uart_configure+0x12c>
    e682:	f1b8 0f00 	cmp.w	r8, #0
    e686:	d123      	bne.n	e6d0 <am_hal_uart_configure+0x174>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e688:	6827      	ldr	r7, [r4, #0]
    e68a:	491e      	ldr	r1, [pc, #120]	; (e704 <am_hal_uart_configure+0x1a8>)
    e68c:	f027 457e 	bic.w	r5, r7, #4261412864	; 0xfe000000
        pState->bEnableRxQueue = false;
    e690:	2000      	movs	r0, #0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e692:	428d      	cmp	r5, r1
        pState->bEnableRxQueue = false;
    e694:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e698:	d1d8      	bne.n	e64c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER &= ~ui32IntMask;
    e69a:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    e69c:	f024 0350 	bic.w	r3, r4, #80	; 0x50
    e6a0:	63b3      	str	r3, [r6, #56]	; 0x38
    e6a2:	e79b      	b.n	e5dc <am_hal_uart_configure+0x80>
        pState->bEnableTxQueue = true;
    e6a4:	2201      	movs	r2, #1
    e6a6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    e6aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e6ae:	f000 fcf5 	bl	f09c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e6b2:	6821      	ldr	r1, [r4, #0]
    e6b4:	f021 457e 	bic.w	r5, r1, #4261412864	; 0xfe000000
    e6b8:	42b5      	cmp	r5, r6
    e6ba:	d1c7      	bne.n	e64c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e6bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6be:	f503 2680 	add.w	r6, r3, #262144	; 0x40000
    e6c2:	361c      	adds	r6, #28
    e6c4:	0336      	lsls	r6, r6, #12
    e6c6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    e6c8:	f042 0020 	orr.w	r0, r2, #32
    e6cc:	63b0      	str	r0, [r6, #56]	; 0x38
    e6ce:	e7d7      	b.n	e680 <am_hal_uart_configure+0x124>
        pState->bEnableRxQueue = true;
    e6d0:	2201      	movs	r2, #1
    e6d2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    e6d6:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e6da:	4643      	mov	r3, r8
    e6dc:	4639      	mov	r1, r7
    e6de:	f000 fcdd 	bl	f09c <am_hal_queue_init>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e6e2:	6826      	ldr	r6, [r4, #0]
    e6e4:	4a07      	ldr	r2, [pc, #28]	; (e704 <am_hal_uart_configure+0x1a8>)
    e6e6:	f026 407e 	bic.w	r0, r6, #4261412864	; 0xfe000000
    e6ea:	4290      	cmp	r0, r2
    e6ec:	d1ae      	bne.n	e64c <am_hal_uart_configure+0xf0>
    UARTn(ui32Module)->IER |= ui32IntMask;
    e6ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e6f0:	f507 2180 	add.w	r1, r7, #262144	; 0x40000
    e6f4:	311c      	adds	r1, #28
    e6f6:	030d      	lsls	r5, r1, #12
    return AM_HAL_STATUS_SUCCESS;
    e6f8:	2000      	movs	r0, #0
    UARTn(ui32Module)->IER |= ui32IntMask;
    e6fa:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e6fc:	f044 0350 	orr.w	r3, r4, #80	; 0x50
    e700:	63ab      	str	r3, [r5, #56]	; 0x38
    e702:	e76b      	b.n	e5dc <am_hal_uart_configure+0x80>
    e704:	01ea9e06 	.word	0x01ea9e06
    e708:	2dc6c000 	.word	0x2dc6c000
    e70c:	00b71b00 	.word	0x00b71b00
    e710:	08000003 	.word	0x08000003
    e714:	5b8d8000 	.word	0x5b8d8000
    e718:	016e3600 	.word	0x016e3600
    e71c:	0b71b000 	.word	0x0b71b000
    e720:	002dc6c0 	.word	0x002dc6c0
    e724:	16e36000 	.word	0x16e36000
    e728:	005b8d80 	.word	0x005b8d80
    e72c:	08000002 	.word	0x08000002

0000e730 <am_hal_uart_transfer>:
{
    e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e734:	680e      	ldr	r6, [r1, #0]
{
    e736:	b091      	sub	sp, #68	; 0x44
    e738:	4680      	mov	r8, r0
    if (pTransfer->ui32Direction == AM_HAL_UART_WRITE)
    e73a:	b14e      	cbz	r6, e750 <am_hal_uart_transfer+0x20>
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e73c:	2e01      	cmp	r6, #1
    return AM_HAL_STATUS_INVALID_OPERATION;
    e73e:	bf18      	it	ne
    e740:	f04f 0b07 	movne.w	fp, #7
    else if (pTransfer->ui32Direction == AM_HAL_UART_READ)
    e744:	f000 80f6 	beq.w	e934 <am_hal_uart_transfer+0x204>
} // am_hal_uart_transfer()
    e748:	4658      	mov	r0, fp
    e74a:	b011      	add	sp, #68	; 0x44
    e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return write_timeout(pHandle,
    e750:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e754:	684c      	ldr	r4, [r1, #4]
    e756:	9401      	str	r4, [sp, #4]
    e758:	688d      	ldr	r5, [r1, #8]
    e75a:	f8d1 a010 	ldr.w	sl, [r1, #16]
    if (ui32TimeoutMs == 0)
    e75e:	f1bb 0f00 	cmp.w	fp, #0
    e762:	f000 8107 	beq.w	e974 <am_hal_uart_transfer+0x244>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e766:	2d00      	cmp	r5, #0
    e768:	f000 8393 	beq.w	ee92 <am_hal_uart_transfer+0x762>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e76c:	2800      	cmp	r0, #0
    e76e:	f000 80df 	beq.w	e930 <am_hal_uart_transfer+0x200>
    e772:	6807      	ldr	r7, [r0, #0]
    e774:	497e      	ldr	r1, [pc, #504]	; (e970 <am_hal_uart_transfer+0x240>)
    e776:	f027 497e 	bic.w	r9, r7, #4261412864	; 0xfe000000
    e77a:	4589      	cmp	r9, r1
    e77c:	d00a      	beq.n	e794 <am_hal_uart_transfer+0x64>
            if (pui32NumBytesWritten)
    e77e:	f1ba 0f00 	cmp.w	sl, #0
    e782:	d001      	beq.n	e788 <am_hal_uart_transfer+0x58>
                *pui32NumBytesWritten = i;
    e784:	f8ca 6000 	str.w	r6, [sl]
    e788:	f04f 0b02 	mov.w	fp, #2
} // am_hal_uart_transfer()
    e78c:	4658      	mov	r0, fp
    e78e:	b011      	add	sp, #68	; 0x44
    e790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e794:	302c      	adds	r0, #44	; 0x2c
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e796:	4637      	mov	r7, r6
    e798:	4621      	mov	r1, r4
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    e79a:	9002      	str	r0, [sp, #8]
    if (pState->bEnableTxQueue)
    e79c:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    e7a0:	2a00      	cmp	r2, #0
    e7a2:	f040 822c 	bne.w	ebfe <am_hal_uart_transfer+0x4ce>
    uint32_t ui32Module = pState->ui32Module;
    e7a6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    e7aa:	2d00      	cmp	r5, #0
    e7ac:	f000 80a1 	beq.w	e8f2 <am_hal_uart_transfer+0x1c2>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e7b0:	f503 2480 	add.w	r4, r3, #262144	; 0x40000
    e7b4:	341c      	adds	r4, #28
    e7b6:	0322      	lsls	r2, r4, #12
    e7b8:	6990      	ldr	r0, [r2, #24]
    e7ba:	f3c0 1440 	ubfx	r4, r0, #5, #1
    e7be:	2c00      	cmp	r4, #0
    e7c0:	f040 80a3 	bne.w	e90a <am_hal_uart_transfer+0x1da>
    e7c4:	1e6b      	subs	r3, r5, #1
    e7c6:	f013 0e07 	ands.w	lr, r3, #7
    e7ca:	f101 3cff 	add.w	ip, r1, #4294967295
    e7ce:	d048      	beq.n	e862 <am_hal_uart_transfer+0x132>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e7d0:	780c      	ldrb	r4, [r1, #0]
    e7d2:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e7d4:	6993      	ldr	r3, [r2, #24]
    e7d6:	069b      	lsls	r3, r3, #26
    e7d8:	468c      	mov	ip, r1
            UARTn(ui32Module)->DR = pui8Data[i++];
    e7da:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e7de:	f100 8085 	bmi.w	e8ec <am_hal_uart_transfer+0x1bc>
    e7e2:	45a6      	cmp	lr, r4
    e7e4:	d03d      	beq.n	e862 <am_hal_uart_transfer+0x132>
    e7e6:	f1be 0f02 	cmp.w	lr, #2
    e7ea:	d032      	beq.n	e852 <am_hal_uart_transfer+0x122>
    e7ec:	f1be 0f03 	cmp.w	lr, #3
    e7f0:	d027      	beq.n	e842 <am_hal_uart_transfer+0x112>
    e7f2:	f1be 0f04 	cmp.w	lr, #4
    e7f6:	d01c      	beq.n	e832 <am_hal_uart_transfer+0x102>
    e7f8:	f1be 0f05 	cmp.w	lr, #5
    e7fc:	d011      	beq.n	e822 <am_hal_uart_transfer+0xf2>
    e7fe:	f1be 0f06 	cmp.w	lr, #6
    e802:	d006      	beq.n	e812 <am_hal_uart_transfer+0xe2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e804:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e808:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e80a:	6990      	ldr	r0, [r2, #24]
    e80c:	0681      	lsls	r1, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e80e:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e810:	d46c      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e812:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e816:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e818:	6991      	ldr	r1, [r2, #24]
    e81a:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e81c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e820:	d464      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e822:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e826:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e828:	6993      	ldr	r3, [r2, #24]
    e82a:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e82c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e830:	d45c      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e832:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    e836:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e838:	6990      	ldr	r0, [r2, #24]
    e83a:	0683      	lsls	r3, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e83c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e840:	d454      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e842:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    e846:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e848:	6991      	ldr	r1, [r2, #24]
    e84a:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e84c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e850:	d44c      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e852:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    e856:	6010      	str	r0, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e858:	6993      	ldr	r3, [r2, #24]
    e85a:	069b      	lsls	r3, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e85c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e860:	d444      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e862:	3401      	adds	r4, #1
    e864:	f89c 1001 	ldrb.w	r1, [ip, #1]
    e868:	6011      	str	r1, [r2, #0]
    while (i < ui32NumBytes)
    e86a:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    e86c:	4620      	mov	r0, r4
    e86e:	f10c 0e01 	add.w	lr, ip, #1
    while (i < ui32NumBytes)
    e872:	f000 81c2 	beq.w	ebfa <am_hal_uart_transfer+0x4ca>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e876:	6993      	ldr	r3, [r2, #24]
    e878:	0699      	lsls	r1, r3, #26
    e87a:	d437      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e87c:	f89e 1001 	ldrb.w	r1, [lr, #1]
    e880:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e882:	6993      	ldr	r3, [r2, #24]
    e884:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e886:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e88a:	d42f      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e88c:	f89c 4003 	ldrb.w	r4, [ip, #3]
    e890:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e892:	6991      	ldr	r1, [r2, #24]
    e894:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e896:	f100 0402 	add.w	r4, r0, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e89a:	d427      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e89c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    e8a0:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8a2:	6991      	ldr	r1, [r2, #24]
    e8a4:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8a6:	f100 0403 	add.w	r4, r0, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8aa:	d41f      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8ac:	f89c 4005 	ldrb.w	r4, [ip, #5]
    e8b0:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8b2:	6993      	ldr	r3, [r2, #24]
    e8b4:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8b6:	f100 0404 	add.w	r4, r0, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8ba:	d417      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8bc:	f89c 1006 	ldrb.w	r1, [ip, #6]
    e8c0:	6011      	str	r1, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8c2:	6993      	ldr	r3, [r2, #24]
    e8c4:	0699      	lsls	r1, r3, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8c6:	f100 0405 	add.w	r4, r0, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8ca:	d40f      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8cc:	f89c 4007 	ldrb.w	r4, [ip, #7]
    e8d0:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8d2:	6991      	ldr	r1, [r2, #24]
    e8d4:	0689      	lsls	r1, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8d6:	f100 0406 	add.w	r4, r0, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8da:	d407      	bmi.n	e8ec <am_hal_uart_transfer+0x1bc>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8dc:	f81c 3f08 	ldrb.w	r3, [ip, #8]!
    e8e0:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8e2:	6991      	ldr	r1, [r2, #24]
    e8e4:	068b      	lsls	r3, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e8e6:	f100 0407 	add.w	r4, r0, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e8ea:	d5ba      	bpl.n	e862 <am_hal_uart_transfer+0x132>
        if (ui32RemainingBytes)
    e8ec:	1b2d      	subs	r5, r5, r4
        i += ui32BytesWritten;
    e8ee:	4426      	add	r6, r4
        if (ui32RemainingBytes)
    e8f0:	d10b      	bne.n	e90a <am_hal_uart_transfer+0x1da>
    if (pui32NumBytesWritten)
    e8f2:	f1ba 0f00 	cmp.w	sl, #0
    e8f6:	f000 817d 	beq.w	ebf4 <am_hal_uart_transfer+0x4c4>
    return AM_HAL_STATUS_SUCCESS;
    e8fa:	f04f 0b00 	mov.w	fp, #0
} // am_hal_uart_transfer()
    e8fe:	4658      	mov	r0, fp
        *pui32NumBytesWritten = i;
    e900:	f8ca 6000 	str.w	r6, [sl]
} // am_hal_uart_transfer()
    e904:	b011      	add	sp, #68	; 0x44
    e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    e90a:	2001      	movs	r0, #1
    e90c:	f7ff f916 	bl	db3c <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    e910:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    e914:	bf18      	it	ne
    e916:	3701      	addne	r7, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e918:	45bb      	cmp	fp, r7
    e91a:	d9ea      	bls.n	e8f2 <am_hal_uart_transfer+0x1c2>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e91c:	f8d8 4000 	ldr.w	r4, [r8]
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e920:	9901      	ldr	r1, [sp, #4]
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e922:	f024 407e 	bic.w	r0, r4, #4261412864	; 0xfe000000
    e926:	4548      	cmp	r0, r9
        ui32Status = write_nonblocking(pHandle, &pui8Data[i],
    e928:	4431      	add	r1, r6
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e92a:	f47f af28 	bne.w	e77e <am_hal_uart_transfer+0x4e>
    e92e:	e735      	b.n	e79c <am_hal_uart_transfer+0x6c>
    e930:	4606      	mov	r6, r0
    e932:	e724      	b.n	e77e <am_hal_uart_transfer+0x4e>
        return read_timeout(pHandle,
    e934:	684b      	ldr	r3, [r1, #4]
    e936:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    e93a:	688c      	ldr	r4, [r1, #8]
    e93c:	690f      	ldr	r7, [r1, #16]
    e93e:	4699      	mov	r9, r3
    if (ui32TimeoutMs == 0)
    e940:	f1bb 0f00 	cmp.w	fp, #0
    e944:	f000 80c9 	beq.w	eada <am_hal_uart_transfer+0x3aa>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    e948:	2c00      	cmp	r4, #0
    e94a:	f000 8150 	beq.w	ebee <am_hal_uart_transfer+0x4be>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e94e:	b130      	cbz	r0, e95e <am_hal_uart_transfer+0x22e>
    e950:	6800      	ldr	r0, [r0, #0]
    e952:	4a07      	ldr	r2, [pc, #28]	; (e970 <am_hal_uart_transfer+0x240>)
    e954:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    e958:	4291      	cmp	r1, r2
    e95a:	f000 8186 	beq.w	ec6a <am_hal_uart_transfer+0x53a>
    e95e:	2500      	movs	r5, #0
        return AM_HAL_STATUS_INVALID_HANDLE;
    e960:	f04f 0b02 	mov.w	fp, #2
            if (pui32NumBytesRead)
    e964:	2f00      	cmp	r7, #0
    e966:	f43f aeef 	beq.w	e748 <am_hal_uart_transfer+0x18>
                *pui32NumBytesRead = i;
    e96a:	603d      	str	r5, [r7, #0]
    e96c:	e6ec      	b.n	e748 <am_hal_uart_transfer+0x18>
    e96e:	bf00      	nop
    e970:	01ea9e06 	.word	0x01ea9e06
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    e974:	2800      	cmp	r0, #0
    e976:	f43f af07 	beq.w	e788 <am_hal_uart_transfer+0x58>
    e97a:	6807      	ldr	r7, [r0, #0]
    e97c:	4cac      	ldr	r4, [pc, #688]	; (ec30 <am_hal_uart_transfer+0x500>)
    e97e:	f027 437e 	bic.w	r3, r7, #4261412864	; 0xfe000000
    e982:	42a3      	cmp	r3, r4
    e984:	f47f af00 	bne.w	e788 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesWritten)
    e988:	f1ba 0f00 	cmp.w	sl, #0
    e98c:	d001      	beq.n	e992 <am_hal_uart_transfer+0x262>
        *pui32NumBytesWritten = 0;
    e98e:	f8ca b000 	str.w	fp, [sl]
    if (ui32NumBytes == 0)
    e992:	2d00      	cmp	r5, #0
    e994:	f000 812e 	beq.w	ebf4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableTxQueue)
    e998:	f898 4028 	ldrb.w	r4, [r8, #40]	; 0x28
    e99c:	2c00      	cmp	r4, #0
    e99e:	f040 8290 	bne.w	eec2 <am_hal_uart_transfer+0x792>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9a2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    e9a6:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    e9aa:	311c      	adds	r1, #28
    e9ac:	030a      	lsls	r2, r1, #12
    e9ae:	6996      	ldr	r6, [r2, #24]
    e9b0:	f3c6 1740 	ubfx	r7, r6, #5, #1
    e9b4:	2f00      	cmp	r7, #0
    e9b6:	f040 8089 	bne.w	eacc <am_hal_uart_transfer+0x39c>
    e9ba:	f105 38ff 	add.w	r8, r5, #4294967295
    e9be:	9b01      	ldr	r3, [sp, #4]
    e9c0:	f018 0007 	ands.w	r0, r8, #7
    e9c4:	463c      	mov	r4, r7
    e9c6:	f103 31ff 	add.w	r1, r3, #4294967295
    e9ca:	d042      	beq.n	ea52 <am_hal_uart_transfer+0x322>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9cc:	781e      	ldrb	r6, [r3, #0]
    e9ce:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9d0:	6997      	ldr	r7, [r2, #24]
    e9d2:	4619      	mov	r1, r3
    e9d4:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9d6:	f04f 0401 	mov.w	r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9da:	d477      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
    e9dc:	42a0      	cmp	r0, r4
    e9de:	d038      	beq.n	ea52 <am_hal_uart_transfer+0x322>
    e9e0:	2802      	cmp	r0, #2
    e9e2:	d02e      	beq.n	ea42 <am_hal_uart_transfer+0x312>
    e9e4:	2803      	cmp	r0, #3
    e9e6:	d024      	beq.n	ea32 <am_hal_uart_transfer+0x302>
    e9e8:	2804      	cmp	r0, #4
    e9ea:	d01a      	beq.n	ea22 <am_hal_uart_transfer+0x2f2>
    e9ec:	2805      	cmp	r0, #5
    e9ee:	d010      	beq.n	ea12 <am_hal_uart_transfer+0x2e2>
    e9f0:	2806      	cmp	r0, #6
    e9f2:	d006      	beq.n	ea02 <am_hal_uart_transfer+0x2d2>
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e9f8:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    e9fa:	6990      	ldr	r0, [r2, #24]
    e9fc:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    e9fe:	4424      	add	r4, r4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea00:	d464      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea02:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    ea06:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea08:	6997      	ldr	r7, [r2, #24]
    ea0a:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea0c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea10:	d45c      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ea16:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea18:	6990      	ldr	r0, [r2, #24]
    ea1a:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea1c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea20:	d454      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea22:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    ea26:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea28:	6997      	ldr	r7, [r2, #24]
    ea2a:	06bb      	lsls	r3, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea2c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea30:	d44c      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ea36:	6013      	str	r3, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea38:	6990      	ldr	r0, [r2, #24]
    ea3a:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea3c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea40:	d444      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea42:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    ea46:	6016      	str	r6, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea48:	6997      	ldr	r7, [r2, #24]
    ea4a:	06be      	lsls	r6, r7, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea4c:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea50:	d43c      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea52:	3401      	adds	r4, #1
    ea54:	784b      	ldrb	r3, [r1, #1]
    ea56:	6013      	str	r3, [r2, #0]
    while (i < ui32NumBytes)
    ea58:	42a5      	cmp	r5, r4
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea5a:	4623      	mov	r3, r4
    ea5c:	f101 0001 	add.w	r0, r1, #1
    while (i < ui32NumBytes)
    ea60:	d034      	beq.n	eacc <am_hal_uart_transfer+0x39c>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea62:	6996      	ldr	r6, [r2, #24]
    ea64:	06b6      	lsls	r6, r6, #26
    ea66:	d431      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea68:	7847      	ldrb	r7, [r0, #1]
    ea6a:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea6c:	6990      	ldr	r0, [r2, #24]
    ea6e:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea70:	f104 0401 	add.w	r4, r4, #1
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea74:	d42a      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea76:	78cc      	ldrb	r4, [r1, #3]
    ea78:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea7a:	6996      	ldr	r6, [r2, #24]
    ea7c:	06b7      	lsls	r7, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea7e:	f103 0402 	add.w	r4, r3, #2
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea82:	d423      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea84:	790f      	ldrb	r7, [r1, #4]
    ea86:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea88:	6990      	ldr	r0, [r2, #24]
    ea8a:	0686      	lsls	r6, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea8c:	f103 0403 	add.w	r4, r3, #3
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea90:	d41c      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea92:	794c      	ldrb	r4, [r1, #5]
    ea94:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea96:	6996      	ldr	r6, [r2, #24]
    ea98:	06b0      	lsls	r0, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ea9a:	f103 0404 	add.w	r4, r3, #4
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ea9e:	d415      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaa0:	798f      	ldrb	r7, [r1, #6]
    eaa2:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaa4:	6990      	ldr	r0, [r2, #24]
    eaa6:	0687      	lsls	r7, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaa8:	f103 0405 	add.w	r4, r3, #5
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaac:	d40e      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eaae:	79cc      	ldrb	r4, [r1, #7]
    eab0:	6014      	str	r4, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eab2:	6996      	ldr	r6, [r2, #24]
    eab4:	06b6      	lsls	r6, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eab6:	f103 0406 	add.w	r4, r3, #6
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaba:	d407      	bmi.n	eacc <am_hal_uart_transfer+0x39c>
            UARTn(ui32Module)->DR = pui8Data[i++];
    eabc:	f811 7f08 	ldrb.w	r7, [r1, #8]!
    eac0:	6017      	str	r7, [r2, #0]
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eac2:	6990      	ldr	r0, [r2, #24]
    eac4:	0680      	lsls	r0, r0, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    eac6:	f103 0407 	add.w	r4, r3, #7
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eaca:	d5c2      	bpl.n	ea52 <am_hal_uart_transfer+0x322>
    if (pui32NumBytesWritten)
    eacc:	f1ba 0f00 	cmp.w	sl, #0
    ead0:	f000 8090 	beq.w	ebf4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesWritten = ui32BytesTransferred;
    ead4:	f8ca 4000 	str.w	r4, [sl]
    ead8:	e636      	b.n	e748 <am_hal_uart_transfer+0x18>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    eada:	2800      	cmp	r0, #0
    eadc:	f43f ae54 	beq.w	e788 <am_hal_uart_transfer+0x58>
    eae0:	6805      	ldr	r5, [r0, #0]
    eae2:	4e53      	ldr	r6, [pc, #332]	; (ec30 <am_hal_uart_transfer+0x500>)
    eae4:	f025 4c7e 	bic.w	ip, r5, #4261412864	; 0xfe000000
    eae8:	45b4      	cmp	ip, r6
    eaea:	f47f ae4d 	bne.w	e788 <am_hal_uart_transfer+0x58>
    if (pui32NumBytesRead)
    eaee:	b10f      	cbz	r7, eaf4 <am_hal_uart_transfer+0x3c4>
        *pui32NumBytesRead = 0;
    eaf0:	f8c7 b000 	str.w	fp, [r7]
    if (ui32NumBytes == 0)
    eaf4:	2c00      	cmp	r4, #0
    eaf6:	d07d      	beq.n	ebf4 <am_hal_uart_transfer+0x4c4>
    if (pState->bEnableRxQueue)
    eaf8:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    eafc:	2800      	cmp	r0, #0
    eafe:	f040 8213 	bne.w	ef28 <am_hal_uart_transfer+0x7f8>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb02:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    eb06:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    eb0a:	311c      	adds	r1, #28
    eb0c:	0309      	lsls	r1, r1, #12
    eb0e:	698a      	ldr	r2, [r1, #24]
    eb10:	f3c2 1500 	ubfx	r5, r2, #4, #1
    eb14:	2d00      	cmp	r5, #0
    eb16:	f040 8287 	bne.w	f028 <am_hal_uart_transfer+0x8f8>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb1a:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb1c:	f413 6a70 	ands.w	sl, r3, #3840	; 0xf00
    eb20:	f040 81cc 	bne.w	eebc <am_hal_uart_transfer+0x78c>
    eb24:	1e66      	subs	r6, r4, #1
    eb26:	f016 0203 	ands.w	r2, r6, #3
    eb2a:	4655      	mov	r5, sl
    eb2c:	f109 30ff 	add.w	r0, r9, #4294967295
    eb30:	d02b      	beq.n	eb8a <am_hal_uart_transfer+0x45a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb32:	f889 3000 	strb.w	r3, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb36:	698b      	ldr	r3, [r1, #24]
    eb38:	06de      	lsls	r6, r3, #27
    eb3a:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb3c:	f04f 0501 	mov.w	r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb40:	f53f af10 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb44:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb46:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb4a:	f040 81b7 	bne.w	eebc <am_hal_uart_transfer+0x78c>
    eb4e:	42aa      	cmp	r2, r5
    eb50:	d01b      	beq.n	eb8a <am_hal_uart_transfer+0x45a>
    eb52:	2a02      	cmp	r2, #2
    eb54:	d00c      	beq.n	eb70 <am_hal_uart_transfer+0x440>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb56:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb5a:	698e      	ldr	r6, [r1, #24]
    eb5c:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb5e:	f04f 0502 	mov.w	r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb62:	f53f aeff 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb66:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb68:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb6c:	f040 81a6 	bne.w	eebc <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb70:	f800 3f01 	strb.w	r3, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb74:	698a      	ldr	r2, [r1, #24]
    eb76:	06d3      	lsls	r3, r2, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb78:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb7c:	f53f aef2 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    eb80:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eb82:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb86:	f040 8199 	bne.w	eebc <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb8a:	3501      	adds	r5, #1
    while (i < ui32NumBytes)
    eb8c:	42ac      	cmp	r4, r5
                pui8Data[i++] = ui32ReadData & 0xFF;
    eb8e:	7043      	strb	r3, [r0, #1]
    eb90:	f100 0601 	add.w	r6, r0, #1
    eb94:	462b      	mov	r3, r5
    while (i < ui32NumBytes)
    eb96:	f43f aee5 	beq.w	e964 <am_hal_uart_transfer+0x234>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eb9a:	698a      	ldr	r2, [r1, #24]
    eb9c:	06d2      	lsls	r2, r2, #27
    eb9e:	f53f aee1 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    eba2:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    eba4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    eba8:	f040 8188 	bne.w	eebc <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebac:	7072      	strb	r2, [r6, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebae:	698e      	ldr	r6, [r1, #24]
    ebb0:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebb2:	f105 0501 	add.w	r5, r5, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebb6:	f53f aed5 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ebba:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ebbc:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ebc0:	f040 817c 	bne.w	eebc <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebc4:	70c2      	strb	r2, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebc6:	698e      	ldr	r6, [r1, #24]
    ebc8:	06f2      	lsls	r2, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebca:	f103 0502 	add.w	r5, r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebce:	f53f aec9 	bmi.w	e964 <am_hal_uart_transfer+0x234>
            ui32ReadData = UARTn(ui32Module)->DR;
    ebd2:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ebd4:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ebd8:	f040 8170 	bne.w	eebc <am_hal_uart_transfer+0x78c>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebdc:	f800 2f04 	strb.w	r2, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebe0:	698e      	ldr	r6, [r1, #24]
    ebe2:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ebe4:	f103 0503 	add.w	r5, r3, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ebe8:	f53f aebc 	bmi.w	e964 <am_hal_uart_transfer+0x234>
    ebec:	e7c8      	b.n	eb80 <am_hal_uart_transfer+0x450>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ebee:	4625      	mov	r5, r4
    if (pui32NumBytesRead)
    ebf0:	b107      	cbz	r7, ebf4 <am_hal_uart_transfer+0x4c4>
        *pui32NumBytesRead = i;
    ebf2:	603d      	str	r5, [r7, #0]
    return AM_HAL_STATUS_SUCCESS;
    ebf4:	f04f 0b00 	mov.w	fp, #0
    ebf8:	e5a6      	b.n	e748 <am_hal_uart_transfer+0x18>
        i += ui32BytesWritten;
    ebfa:	442e      	add	r6, r5
    ebfc:	e679      	b.n	e8f2 <am_hal_uart_transfer+0x1c2>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    ebfe:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
    ec02:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
    ec06:	1a84      	subs	r4, r0, r2
                                 ui32NumBytes : ui32BufferSpace);
    ec08:	42ac      	cmp	r4, r5
    ec0a:	bf28      	it	cs
    ec0c:	462c      	movcs	r4, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    ec0e:	4622      	mov	r2, r4
    ec10:	9802      	ldr	r0, [sp, #8]
    ec12:	f000 fa4f 	bl	f0b4 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    ec16:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    ec1a:	9303      	str	r3, [sp, #12]
    AM_CRITICAL_BEGIN
    ec1c:	f7ff fa0a 	bl	e034 <am_hal_interrupt_master_disable>
    ec20:	9903      	ldr	r1, [sp, #12]
    ec22:	9008      	str	r0, [sp, #32]
    ec24:	f501 2280 	add.w	r2, r1, #262144	; 0x40000
    ec28:	321c      	adds	r2, #28
    ec2a:	0313      	lsls	r3, r2, #12
    ec2c:	9303      	str	r3, [sp, #12]
    ec2e:	e010      	b.n	ec52 <am_hal_uart_transfer+0x522>
    ec30:	01ea9e06 	.word	0x01ea9e06
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ec34:	f000 fb42 	bl	f2bc <am_hal_queue_item_get>
    ec38:	b198      	cbz	r0, ec62 <am_hal_uart_transfer+0x532>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    ec3a:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    ec3e:	f502 2380 	add.w	r3, r2, #262144	; 0x40000
    ec42:	331c      	adds	r3, #28
    ec44:	0318      	lsls	r0, r3, #12
    ec46:	6981      	ldr	r1, [r0, #24]
    ec48:	068a      	lsls	r2, r1, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ec4a:	bf5c      	itt	pl
    ec4c:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    ec50:	6002      	strpl	r2, [r0, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ec52:	9b03      	ldr	r3, [sp, #12]
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ec54:	9802      	ldr	r0, [sp, #8]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ec56:	699b      	ldr	r3, [r3, #24]
    ec58:	069b      	lsls	r3, r3, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ec5a:	f04f 0201 	mov.w	r2, #1
    ec5e:	a907      	add	r1, sp, #28
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ec60:	d5e8      	bpl.n	ec34 <am_hal_uart_transfer+0x504>
    AM_CRITICAL_END
    ec62:	9808      	ldr	r0, [sp, #32]
    ec64:	f7ff f9ea 	bl	e03c <am_hal_interrupt_master_set>
    ec68:	e640      	b.n	e8ec <am_hal_uart_transfer+0x1bc>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ec6a:	2600      	movs	r6, #0
    ec6c:	469a      	mov	sl, r3
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ec6e:	f108 0348 	add.w	r3, r8, #72	; 0x48
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ec72:	9101      	str	r1, [sp, #4]
    ec74:	4635      	mov	r5, r6
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ec76:	9302      	str	r3, [sp, #8]
    if (pState->bEnableRxQueue)
    ec78:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
    ec7c:	2800      	cmp	r0, #0
    ec7e:	f040 8089 	bne.w	ed94 <am_hal_uart_transfer+0x664>
    uint32_t ui32Module = pState->ui32Module;
    ec82:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    while (i < ui32NumBytes)
    ec86:	2c00      	cmp	r4, #0
    ec88:	d0b2      	beq.n	ebf0 <am_hal_uart_transfer+0x4c0>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ec8a:	f502 2180 	add.w	r1, r2, #262144	; 0x40000
    ec8e:	311c      	adds	r1, #28
    ec90:	030a      	lsls	r2, r1, #12
    ec92:	6993      	ldr	r3, [r2, #24]
    ec94:	06d8      	lsls	r0, r3, #27
    ec96:	d466      	bmi.n	ed66 <am_hal_uart_transfer+0x636>
            ui32ReadData = UARTn(ui32Module)->DR;
    ec98:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ec9a:	f411 6370 	ands.w	r3, r1, #3840	; 0xf00
    ec9e:	f040 810d 	bne.w	eebc <am_hal_uart_transfer+0x78c>
    eca2:	f104 3eff 	add.w	lr, r4, #4294967295
    eca6:	f01e 0e03 	ands.w	lr, lr, #3
    ecaa:	f109 30ff 	add.w	r0, r9, #4294967295
    ecae:	d029      	beq.n	ed04 <am_hal_uart_transfer+0x5d4>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecb0:	f889 1000 	strb.w	r1, [r9]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecb4:	6991      	ldr	r1, [r2, #24]
    ecb6:	06c9      	lsls	r1, r1, #27
    ecb8:	4648      	mov	r0, r9
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecba:	f04f 0301 	mov.w	r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecbe:	d44e      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ecc0:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ecc2:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ecc6:	f040 80e0 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
    ecca:	459e      	cmp	lr, r3
    eccc:	d01a      	beq.n	ed04 <am_hal_uart_transfer+0x5d4>
    ecce:	f1be 0f02 	cmp.w	lr, #2
    ecd2:	d00b      	beq.n	ecec <am_hal_uart_transfer+0x5bc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecd4:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecd8:	6991      	ldr	r1, [r2, #24]
    ecda:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecdc:	f04f 0302 	mov.w	r3, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ece0:	d43d      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ece2:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ece4:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ece8:	f040 80cf 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecec:	f800 1f01 	strb.w	r1, [r0, #1]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecf0:	6991      	ldr	r1, [r2, #24]
    ecf2:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ecf4:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ecf8:	d431      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ecfa:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ecfc:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ed00:	f040 80c3 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed04:	3301      	adds	r3, #1
    while (i < ui32NumBytes)
    ed06:	42a3      	cmp	r3, r4
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed08:	7041      	strb	r1, [r0, #1]
    ed0a:	469e      	mov	lr, r3
    ed0c:	f100 0c01 	add.w	ip, r0, #1
    while (i < ui32NumBytes)
    ed10:	d025      	beq.n	ed5e <am_hal_uart_transfer+0x62e>
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed12:	6991      	ldr	r1, [r2, #24]
    ed14:	06c9      	lsls	r1, r1, #27
    ed16:	d422      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed18:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed1a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ed1e:	f040 80b4 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed22:	f88c 1001 	strb.w	r1, [ip, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed26:	6991      	ldr	r1, [r2, #24]
    ed28:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed2a:	f103 0301 	add.w	r3, r3, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed2e:	d416      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed30:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed32:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ed36:	f040 80a8 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed3a:	70c1      	strb	r1, [r0, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed3c:	6991      	ldr	r1, [r2, #24]
    ed3e:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed40:	f10e 0302 	add.w	r3, lr, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed44:	d40b      	bmi.n	ed5e <am_hal_uart_transfer+0x62e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ed46:	6811      	ldr	r1, [r2, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ed48:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ed4c:	f040 809d 	bne.w	ee8a <am_hal_uart_transfer+0x75a>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed50:	f800 1f04 	strb.w	r1, [r0, #4]!
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed54:	6991      	ldr	r1, [r2, #24]
    ed56:	06c9      	lsls	r1, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ed58:	f10e 0303 	add.w	r3, lr, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ed5c:	d5cd      	bpl.n	ecfa <am_hal_uart_transfer+0x5ca>
        if (ui32RemainingBytes)
    ed5e:	1ae4      	subs	r4, r4, r3
        i += ui32BytesRead;
    ed60:	441d      	add	r5, r3
        if (ui32RemainingBytes)
    ed62:	f43f af45 	beq.w	ebf0 <am_hal_uart_transfer+0x4c0>
            am_hal_flash_delay(FLASH_CYCLES_US(1));
    ed66:	2001      	movs	r0, #1
    ed68:	f7fe fee8 	bl	db3c <am_hal_flash_delay>
            if (ui32TimeoutMs != AM_HAL_UART_WAIT_FOREVER)
    ed6c:	f1bb 3fff 	cmp.w	fp, #4294967295
                ui32TimeSpent++;
    ed70:	bf18      	it	ne
    ed72:	3601      	addne	r6, #1
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ed74:	45b3      	cmp	fp, r6
    ed76:	f67f af3b 	bls.w	ebf0 <am_hal_uart_transfer+0x4c0>
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ed7a:	f8d8 0000 	ldr.w	r0, [r8]
    ed7e:	9a01      	ldr	r2, [sp, #4]
    ed80:	f020 417e 	bic.w	r1, r0, #4261412864	; 0xfe000000
    ed84:	4291      	cmp	r1, r2
        ui32Status = read_nonblocking(pHandle, &pui8Data[i],
    ed86:	eb0a 0905 	add.w	r9, sl, r5
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ed8a:	f43f af75 	beq.w	ec78 <am_hal_uart_transfer+0x548>
        return AM_HAL_STATUS_INVALID_HANDLE;
    ed8e:	f04f 0b02 	mov.w	fp, #2
    ed92:	e5e7      	b.n	e964 <am_hal_uart_transfer+0x234>
    AM_CRITICAL_BEGIN
    ed94:	f7ff f94e 	bl	e034 <am_hal_interrupt_master_disable>
    ed98:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    ed9c:	9007      	str	r0, [sp, #28]
    ed9e:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    eda2:	301c      	adds	r0, #28
    uint32_t i = 0;
    eda4:	f8cd a00c 	str.w	sl, [sp, #12]
    eda8:	0303      	lsls	r3, r0, #12
    edaa:	f10d 0c20 	add.w	ip, sp, #32
    edae:	2200      	movs	r2, #0
    edb0:	46a2      	mov	sl, r4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edb2:	699c      	ldr	r4, [r3, #24]
    edb4:	06e1      	lsls	r1, r4, #27
    edb6:	d45a      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edb8:	6818      	ldr	r0, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edba:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    edbe:	d17a      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edc0:	46e6      	mov	lr, ip
    edc2:	3201      	adds	r2, #1
    edc4:	f80e 0b01 	strb.w	r0, [lr], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edc8:	6999      	ldr	r1, [r3, #24]
    edca:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edcc:	4610      	mov	r0, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edce:	d44e      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edd0:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edd2:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    edd6:	d16e      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edd8:	f88e 4000 	strb.w	r4, [lr]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    eddc:	6999      	ldr	r1, [r3, #24]
    edde:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ede0:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ede4:	d443      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ede6:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ede8:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    edec:	d163      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    edee:	f88e 2001 	strb.w	r2, [lr, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edf2:	699c      	ldr	r4, [r3, #24]
    edf4:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    edf6:	f100 0202 	add.w	r2, r0, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    edfa:	d438      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    edfc:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    edfe:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ee02:	d158      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee04:	f88c 1003 	strb.w	r1, [ip, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee08:	699c      	ldr	r4, [r3, #24]
    ee0a:	06e4      	lsls	r4, r4, #27
    ee0c:	f10c 0c04 	add.w	ip, ip, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee10:	f100 0203 	add.w	r2, r0, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee14:	d42b      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee16:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee18:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ee1c:	d14b      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee1e:	f88c 2000 	strb.w	r2, [ip]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee22:	6999      	ldr	r1, [r3, #24]
    ee24:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee26:	f100 0204 	add.w	r2, r0, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee2a:	d420      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee2c:	681c      	ldr	r4, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee2e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ee32:	d140      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee34:	f88e 4004 	strb.w	r4, [lr, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee38:	6999      	ldr	r1, [r3, #24]
    ee3a:	06cc      	lsls	r4, r1, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee3c:	f100 0205 	add.w	r2, r0, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee40:	d415      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee42:	681a      	ldr	r2, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee44:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ee48:	d135      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee4a:	f88e 2005 	strb.w	r2, [lr, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee4e:	699c      	ldr	r4, [r3, #24]
    ee50:	06e4      	lsls	r4, r4, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee52:	f100 0206 	add.w	r2, r0, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ee56:	d40a      	bmi.n	ee6e <am_hal_uart_transfer+0x73e>
            ui32ReadData = UARTn(ui32Module)->DR;
    ee58:	6819      	ldr	r1, [r3, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ee5a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ee5e:	d12a      	bne.n	eeb6 <am_hal_uart_transfer+0x786>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee60:	1dc2      	adds	r2, r0, #7
    while (i < ui32NumBytes)
    ee62:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    ee64:	f88e 1006 	strb.w	r1, [lr, #6]
    ee68:	f10e 0c07 	add.w	ip, lr, #7
    while (i < ui32NumBytes)
    ee6c:	d1a1      	bne.n	edb2 <am_hal_uart_transfer+0x682>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    ee6e:	a908      	add	r1, sp, #32
    ee70:	9802      	ldr	r0, [sp, #8]
    ee72:	4654      	mov	r4, sl
    ee74:	f8dd a00c 	ldr.w	sl, [sp, #12]
    ee78:	f000 f91c 	bl	f0b4 <am_hal_queue_item_add>
    ee7c:	b958      	cbnz	r0, ee96 <am_hal_uart_transfer+0x766>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    ee7e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; f034 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    ee82:	9807      	ldr	r0, [sp, #28]
    ee84:	f7ff f8da 	bl	e03c <am_hal_interrupt_master_set>
    ee88:	e56c      	b.n	e964 <am_hal_uart_transfer+0x234>
    ee8a:	441d      	add	r5, r3
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    ee8c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    ee90:	e568      	b.n	e964 <am_hal_uart_transfer+0x234>
    while (ui32RemainingBytes && (ui32TimeSpent < ui32TimeoutMs))
    ee92:	462e      	mov	r6, r5
    ee94:	e52d      	b.n	e8f2 <am_hal_uart_transfer+0x1c2>
    AM_CRITICAL_END
    ee96:	9807      	ldr	r0, [sp, #28]
    ee98:	f7ff f8d0 	bl	e03c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    ee9c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    eea0:	9802      	ldr	r0, [sp, #8]
                                ui32NumBytes : ui32BufferData);
    eea2:	42a3      	cmp	r3, r4
    eea4:	bf28      	it	cs
    eea6:	4623      	movcs	r3, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    eea8:	461a      	mov	r2, r3
    eeaa:	4649      	mov	r1, r9
    eeac:	9303      	str	r3, [sp, #12]
    eeae:	f000 fa05 	bl	f2bc <am_hal_queue_item_get>
    eeb2:	9b03      	ldr	r3, [sp, #12]
    eeb4:	e753      	b.n	ed5e <am_hal_uart_transfer+0x62e>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    eeb6:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    eeba:	e7e2      	b.n	ee82 <am_hal_uart_transfer+0x752>
    eebc:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    eec0:	e550      	b.n	e964 <am_hal_uart_transfer+0x234>
        ui32BufferSpace = am_hal_queue_space_left(&pState->sTxQueue);
    eec2:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    eec6:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    eeca:	1a52      	subs	r2, r2, r1
                                 ui32NumBytes : ui32BufferSpace);
    eecc:	42aa      	cmp	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    eece:	f108 092c 	add.w	r9, r8, #44	; 0x2c
                                 ui32NumBytes : ui32BufferSpace);
    eed2:	bf28      	it	cs
    eed4:	462a      	movcs	r2, r5
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    eed6:	9901      	ldr	r1, [sp, #4]
    eed8:	4648      	mov	r0, r9
                                 ui32NumBytes : ui32BufferSpace);
    eeda:	4614      	mov	r4, r2
        am_hal_queue_item_add(&pState->sTxQueue, pui8Data, ui32BytesTransferred);
    eedc:	f000 f8ea 	bl	f0b4 <am_hal_queue_item_add>
    uint32_t ui32Module = pState->ui32Module;
    eee0:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    AM_CRITICAL_BEGIN
    eee4:	f7ff f8a6 	bl	e034 <am_hal_interrupt_master_disable>
    eee8:	f506 2380 	add.w	r3, r6, #262144	; 0x40000
    eeec:	331c      	adds	r3, #28
    eeee:	031d      	lsls	r5, r3, #12
    eef0:	9005      	str	r0, [sp, #20]
    eef2:	e00e      	b.n	ef12 <am_hal_uart_transfer+0x7e2>
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    eef4:	f000 f9e2 	bl	f2bc <am_hal_queue_item_get>
    eef8:	b190      	cbz	r0, ef20 <am_hal_uart_transfer+0x7f0>
        if ( UARTn(ui32Module)->FR_b.TXFF )
    eefa:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    eefe:	f500 2280 	add.w	r2, r0, #262144	; 0x40000
    ef02:	321c      	adds	r2, #28
    ef04:	0311      	lsls	r1, r2, #12
    ef06:	698e      	ldr	r6, [r1, #24]
    ef08:	06b3      	lsls	r3, r6, #26
            UARTn(ui32Module)->DR = pui8Data[i++];
    ef0a:	bf5c      	itt	pl
    ef0c:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ef10:	600b      	strpl	r3, [r1, #0]
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ef12:	69af      	ldr	r7, [r5, #24]
    ef14:	06bf      	lsls	r7, r7, #26
        if (am_hal_queue_item_get(&pState->sTxQueue, &pui8Data, 1))
    ef16:	f04f 0201 	mov.w	r2, #1
    ef1a:	a908      	add	r1, sp, #32
    ef1c:	4648      	mov	r0, r9
    while ( !UARTn(ui32Module)->FR_b.TXFF )
    ef1e:	d5e9      	bpl.n	eef4 <am_hal_uart_transfer+0x7c4>
    AM_CRITICAL_END
    ef20:	9805      	ldr	r0, [sp, #20]
    ef22:	f7ff f88b 	bl	e03c <am_hal_interrupt_master_set>
    ef26:	e5d1      	b.n	eacc <am_hal_uart_transfer+0x39c>
    AM_CRITICAL_BEGIN
    ef28:	f7ff f884 	bl	e034 <am_hal_interrupt_master_disable>
    ef2c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ef30:	9006      	str	r0, [sp, #24]
    ef32:	f501 2080 	add.w	r0, r1, #262144	; 0x40000
    ef36:	301c      	adds	r0, #28
    ef38:	0301      	lsls	r1, r0, #12
    ef3a:	ab08      	add	r3, sp, #32
    uint32_t i = 0;
    ef3c:	2200      	movs	r2, #0
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef3e:	698e      	ldr	r6, [r1, #24]
    ef40:	06f0      	lsls	r0, r6, #27
    ef42:	d455      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef44:	680d      	ldr	r5, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef46:	f415 6f70 	tst.w	r5, #3840	; 0xf00
    ef4a:	d16f      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef4c:	4618      	mov	r0, r3
    ef4e:	3201      	adds	r2, #1
    ef50:	f800 5b01 	strb.w	r5, [r0], #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef54:	698e      	ldr	r6, [r1, #24]
    ef56:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef58:	4615      	mov	r5, r2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef5a:	d449      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef5c:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef5e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    ef62:	d163      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef64:	7006      	strb	r6, [r0, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef66:	698e      	ldr	r6, [r1, #24]
    ef68:	06f6      	lsls	r6, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef6a:	f102 0201 	add.w	r2, r2, #1
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef6e:	d43f      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef70:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef72:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ef76:	d159      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef78:	7042      	strb	r2, [r0, #1]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef7a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    ef7e:	f01e 0f10 	tst.w	lr, #16
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef82:	f105 0202 	add.w	r2, r5, #2
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef86:	d133      	bne.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    ef88:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    ef8a:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    ef8e:	d14d      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef90:	70de      	strb	r6, [r3, #3]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef92:	698e      	ldr	r6, [r1, #24]
    ef94:	06f6      	lsls	r6, r6, #27
    ef96:	f103 0304 	add.w	r3, r3, #4
                pui8Data[i++] = ui32ReadData & 0xFF;
    ef9a:	f105 0203 	add.w	r2, r5, #3
        if ( UARTn(ui32Module)->FR_b.RXFE )
    ef9e:	d427      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    efa0:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    efa2:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    efa6:	d141      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    efa8:	701a      	strb	r2, [r3, #0]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efaa:	698b      	ldr	r3, [r1, #24]
    efac:	06db      	lsls	r3, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    efae:	f105 0204 	add.w	r2, r5, #4
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efb2:	d41d      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    efb4:	680e      	ldr	r6, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    efb6:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    efba:	d137      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    efbc:	7106      	strb	r6, [r0, #4]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efbe:	698b      	ldr	r3, [r1, #24]
    efc0:	06de      	lsls	r6, r3, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    efc2:	f105 0205 	add.w	r2, r5, #5
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efc6:	d413      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    efc8:	680a      	ldr	r2, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    efca:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    efce:	d12d      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    efd0:	7142      	strb	r2, [r0, #5]
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efd2:	698e      	ldr	r6, [r1, #24]
    efd4:	06f3      	lsls	r3, r6, #27
                pui8Data[i++] = ui32ReadData & 0xFF;
    efd6:	f105 0206 	add.w	r2, r5, #6
        if ( UARTn(ui32Module)->FR_b.RXFE )
    efda:	d409      	bmi.n	eff0 <am_hal_uart_transfer+0x8c0>
            ui32ReadData = UARTn(ui32Module)->DR;
    efdc:	680b      	ldr	r3, [r1, #0]
            if (ui32ReadData & (_VAL2FLD(UART0_DR_OEDATA, UART0_DR_OEDATA_ERR) |
    efde:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    efe2:	d123      	bne.n	f02c <am_hal_uart_transfer+0x8fc>
                pui8Data[i++] = ui32ReadData & 0xFF;
    efe4:	1dea      	adds	r2, r5, #7
    while (i < ui32NumBytes)
    efe6:	2a20      	cmp	r2, #32
                pui8Data[i++] = ui32ReadData & 0xFF;
    efe8:	7183      	strb	r3, [r0, #6]
    efea:	f100 0307 	add.w	r3, r0, #7
    while (i < ui32NumBytes)
    efee:	d1a6      	bne.n	ef3e <am_hal_uart_transfer+0x80e>
        if (!am_hal_queue_item_add(&pState->sRxQueue, pui8Data,
    eff0:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    eff4:	a908      	add	r1, sp, #32
    eff6:	4650      	mov	r0, sl
    eff8:	f000 f85c 	bl	f0b4 <am_hal_queue_item_add>
    effc:	b930      	cbnz	r0, f00c <am_hal_uart_transfer+0x8dc>
            ui32ErrorStatus = AM_HAL_UART_STATUS_RX_QUEUE_FULL;
    effe:	f8df b034 	ldr.w	fp, [pc, #52]	; f034 <am_hal_uart_transfer+0x904>
    AM_CRITICAL_END
    f002:	9806      	ldr	r0, [sp, #24]
    f004:	f7ff f81a 	bl	e03c <am_hal_interrupt_master_set>
    f008:	f7ff bb9e 	b.w	e748 <am_hal_uart_transfer+0x18>
    f00c:	9806      	ldr	r0, [sp, #24]
    f00e:	f7ff f815 	bl	e03c <am_hal_interrupt_master_set>
                                ui32NumBytes : ui32BufferData);
    f012:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
    f016:	42a5      	cmp	r5, r4
    f018:	bf28      	it	cs
    f01a:	4625      	movcs	r5, r4
        am_hal_queue_item_get(&pState->sRxQueue, pui8Data, ui32BytesTransferred);
    f01c:	4649      	mov	r1, r9
    f01e:	4650      	mov	r0, sl
    f020:	462a      	mov	r2, r5
    f022:	f000 f94b 	bl	f2bc <am_hal_queue_item_get>
    f026:	e49d      	b.n	e964 <am_hal_uart_transfer+0x234>
    uint32_t i = 0;
    f028:	4605      	mov	r5, r0
    f02a:	e49b      	b.n	e964 <am_hal_uart_transfer+0x234>
                ui32ErrorStatus =  AM_HAL_UART_STATUS_BUS_ERROR;
    f02c:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    f030:	e7e7      	b.n	f002 <am_hal_uart_transfer+0x8d2>
    f032:	bf00      	nop
    f034:	08000001 	.word	0x08000001

0000f038 <am_hal_uart_tx_flush>:
    if (pState->bEnableTxQueue)
    f038:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
    f03c:	b570      	push	{r4, r5, r6, lr}
    f03e:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    f040:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (pState->bEnableTxQueue)
    f042:	b183      	cbz	r3, f066 <am_hal_uart_tx_flush+0x2e>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    f044:	6b40      	ldr	r0, [r0, #52]	; 0x34
    f046:	b170      	cbz	r0, f066 <am_hal_uart_tx_flush+0x2e>
            ONE_BYTE_DELAY(pState);
    f048:	4e13      	ldr	r6, [pc, #76]	; (f098 <am_hal_uart_tx_flush+0x60>)
    f04a:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f04c:	fbb6 f2f1 	udiv	r2, r6, r1
    f050:	2a02      	cmp	r2, #2
    f052:	ea4f 1002 	mov.w	r0, r2, lsl #4
    f056:	bf8c      	ite	hi
    f058:	3829      	subhi	r0, #41	; 0x29
    f05a:	2001      	movls	r0, #1
    f05c:	f7fe fd6e 	bl	db3c <am_hal_flash_delay>
        while (am_hal_queue_data_left(&(pState->sTxQueue)))
    f060:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f062:	2b00      	cmp	r3, #0
    f064:	d1f1      	bne.n	f04a <am_hal_uart_tx_flush+0x12>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    f066:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f06a:	351c      	adds	r5, #28
    f06c:	032d      	lsls	r5, r5, #12
    f06e:	69a8      	ldr	r0, [r5, #24]
    f070:	0702      	lsls	r2, r0, #28
    f072:	d50e      	bpl.n	f092 <am_hal_uart_tx_flush+0x5a>
        ONE_BYTE_DELAY(pState);
    f074:	4e08      	ldr	r6, [pc, #32]	; (f098 <am_hal_uart_tx_flush+0x60>)
    f076:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f078:	fbb6 f2f1 	udiv	r2, r6, r1
    f07c:	2a02      	cmp	r2, #2
    f07e:	ea4f 1002 	mov.w	r0, r2, lsl #4
    f082:	bf8c      	ite	hi
    f084:	3829      	subhi	r0, #41	; 0x29
    f086:	2001      	movls	r0, #1
    f088:	f7fe fd58 	bl	db3c <am_hal_flash_delay>
    while ( UARTn(ui32Module)->FR_b.BUSY )
    f08c:	69ab      	ldr	r3, [r5, #24]
    f08e:	071b      	lsls	r3, r3, #28
    f090:	d4f1      	bmi.n	f076 <am_hal_uart_tx_flush+0x3e>
} // am_hal_uart_tx_flush()
    f092:	2000      	movs	r0, #0
    f094:	bd70      	pop	{r4, r5, r6, pc}
    f096:	bf00      	nop
    f098:	00b71b00 	.word	0x00b71b00

0000f09c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    f09c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    f09e:	2400      	movs	r4, #0
    f0a0:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    f0a2:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    f0a4:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    f0a6:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    f0a8:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    f0aa:	6141      	str	r1, [r0, #20]
}
    f0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop

0000f0b4 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    f0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0b6:	4604      	mov	r4, r0
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f0b8:	6905      	ldr	r5, [r0, #16]
{
    f0ba:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f0bc:	fb05 f502 	mul.w	r5, r5, r2
{
    f0c0:	460f      	mov	r7, r1
    bool bSuccess = false;

    pui8Source = (uint8_t *) pvSource;

    AM_CRITICAL_BEGIN
    f0c2:	f7fe ffb7 	bl	e034 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    f0c6:	68e3      	ldr	r3, [r4, #12]
    f0c8:	68a2      	ldr	r2, [r4, #8]
    AM_CRITICAL_BEGIN
    f0ca:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    f0cc:	1a99      	subs	r1, r3, r2
    f0ce:	428d      	cmp	r5, r1
    f0d0:	f200 8081 	bhi.w	f1d6 <am_hal_queue_item_add+0x122>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0d4:	2d00      	cmp	r5, #0
    f0d6:	d075      	beq.n	f1c4 <am_hal_queue_item_add+0x110>
    f0d8:	6826      	ldr	r6, [r4, #0]
    f0da:	2f00      	cmp	r7, #0
    f0dc:	d07d      	beq.n	f1da <am_hal_queue_item_add+0x126>
            // Write the value to the buffer, but only if the source pointer is
            // valid.
            //
            if (pvSource)
            {
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f0de:	4638      	mov	r0, r7
    f0e0:	6963      	ldr	r3, [r4, #20]
    f0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
    f0e6:	559a      	strb	r2, [r3, r6]
            }

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f0e8:	6821      	ldr	r1, [r4, #0]
    f0ea:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    f0ee:	1c4a      	adds	r2, r1, #1
    f0f0:	197e      	adds	r6, r7, r5
    f0f2:	43ff      	mvns	r7, r7
    f0f4:	fbb2 fcfe 	udiv	ip, r2, lr
    f0f8:	4437      	add	r7, r6
    f0fa:	fb0e 231c 	mls	r3, lr, ip, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f0fe:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f100:	6023      	str	r3, [r4, #0]
    f102:	f007 0103 	and.w	r1, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f106:	d05c      	beq.n	f1c2 <am_hal_queue_item_add+0x10e>
    f108:	b349      	cbz	r1, f15e <am_hal_queue_item_add+0xaa>
    f10a:	2901      	cmp	r1, #1
    f10c:	d019      	beq.n	f142 <am_hal_queue_item_add+0x8e>
    f10e:	2902      	cmp	r1, #2
    f110:	d00b      	beq.n	f12a <am_hal_queue_item_add+0x76>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f112:	6962      	ldr	r2, [r4, #20]
    f114:	f810 7b01 	ldrb.w	r7, [r0], #1
    f118:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f11a:	6823      	ldr	r3, [r4, #0]
    f11c:	68e1      	ldr	r1, [r4, #12]
    f11e:	1c5a      	adds	r2, r3, #1
    f120:	fbb2 f7f1 	udiv	r7, r2, r1
    f124:	fb01 2317 	mls	r3, r1, r7, r2
    f128:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f12a:	6962      	ldr	r2, [r4, #20]
    f12c:	f810 1b01 	ldrb.w	r1, [r0], #1
    f130:	54d1      	strb	r1, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f132:	6823      	ldr	r3, [r4, #0]
    f134:	68e7      	ldr	r7, [r4, #12]
    f136:	1c5a      	adds	r2, r3, #1
    f138:	fbb2 f1f7 	udiv	r1, r2, r7
    f13c:	fb07 2311 	mls	r3, r7, r1, r2
    f140:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f142:	6967      	ldr	r7, [r4, #20]
    f144:	f810 2b01 	ldrb.w	r2, [r0], #1
    f148:	54fa      	strb	r2, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f14a:	6823      	ldr	r3, [r4, #0]
    f14c:	68e1      	ldr	r1, [r4, #12]
    f14e:	1c5f      	adds	r7, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f150:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f152:	fbb7 f2f1 	udiv	r2, r7, r1
    f156:	fb01 7312 	mls	r3, r1, r2, r7
    f15a:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f15c:	d031      	beq.n	f1c2 <am_hal_queue_item_add+0x10e>
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f15e:	4686      	mov	lr, r0
    f160:	6967      	ldr	r7, [r4, #20]
    f162:	f81e 1b01 	ldrb.w	r1, [lr], #1
    f166:	54f9      	strb	r1, [r7, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f168:	6823      	ldr	r3, [r4, #0]
    f16a:	68e2      	ldr	r2, [r4, #12]
    f16c:	1c5f      	adds	r7, r3, #1
    f16e:	fbb7 f1f2 	udiv	r1, r7, r2
    f172:	fb02 7311 	mls	r3, r2, r1, r7
    f176:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f178:	6962      	ldr	r2, [r4, #20]
    f17a:	7847      	ldrb	r7, [r0, #1]
    f17c:	54d7      	strb	r7, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f17e:	6823      	ldr	r3, [r4, #0]
    f180:	68e1      	ldr	r1, [r4, #12]
    f182:	1c5f      	adds	r7, r3, #1
    f184:	fbb7 f2f1 	udiv	r2, r7, r1
    f188:	fb01 7312 	mls	r3, r1, r2, r7
    f18c:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f18e:	6961      	ldr	r1, [r4, #20]
    f190:	f89e 7001 	ldrb.w	r7, [lr, #1]
    f194:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f196:	6822      	ldr	r2, [r4, #0]
    f198:	68e7      	ldr	r7, [r4, #12]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f19a:	6961      	ldr	r1, [r4, #20]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f19c:	3201      	adds	r2, #1
    f19e:	fbb2 fcf7 	udiv	ip, r2, r7
    f1a2:	fb07 231c 	mls	r3, r7, ip, r2
    f1a6:	6023      	str	r3, [r4, #0]
                psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f1a8:	78c7      	ldrb	r7, [r0, #3]
    f1aa:	54cf      	strb	r7, [r1, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1ac:	6822      	ldr	r2, [r4, #0]
    f1ae:	68e1      	ldr	r1, [r4, #12]
    f1b0:	1c57      	adds	r7, r2, #1
    f1b2:	3004      	adds	r0, #4
    f1b4:	fbb7 f2f1 	udiv	r2, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1b8:	42b0      	cmp	r0, r6
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1ba:	fb01 7312 	mls	r3, r1, r2, r7
    f1be:	6023      	str	r3, [r4, #0]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1c0:	d1cd      	bne.n	f15e <am_hal_queue_item_add+0xaa>
    f1c2:	68a2      	ldr	r2, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    f1c4:	442a      	add	r2, r5
    f1c6:	60a2      	str	r2, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    f1c8:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    f1ca:	9801      	ldr	r0, [sp, #4]
    f1cc:	f7fe ff36 	bl	e03c <am_hal_interrupt_master_set>

    return bSuccess;
}
    f1d0:	4620      	mov	r0, r4
    f1d2:	b003      	add	sp, #12
    f1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    f1d6:	2400      	movs	r4, #0
    f1d8:	e7f7      	b.n	f1ca <am_hal_queue_item_add+0x116>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f1da:	1c70      	adds	r0, r6, #1
    f1dc:	fbb0 fef3 	udiv	lr, r0, r3
    f1e0:	fb03 011e 	mls	r1, r3, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f1e4:	2001      	movs	r0, #1
    f1e6:	1e6e      	subs	r6, r5, #1
    f1e8:	4285      	cmp	r5, r0
    f1ea:	f006 0707 	and.w	r7, r6, #7
    f1ee:	d063      	beq.n	f2b8 <am_hal_queue_item_add+0x204>
    f1f0:	b3bf      	cbz	r7, f262 <am_hal_queue_item_add+0x1ae>
    f1f2:	2f01      	cmp	r7, #1
    f1f4:	d02d      	beq.n	f252 <am_hal_queue_item_add+0x19e>
    f1f6:	2f02      	cmp	r7, #2
    f1f8:	d025      	beq.n	f246 <am_hal_queue_item_add+0x192>
    f1fa:	2f03      	cmp	r7, #3
    f1fc:	d01d      	beq.n	f23a <am_hal_queue_item_add+0x186>
    f1fe:	2f04      	cmp	r7, #4
    f200:	d015      	beq.n	f22e <am_hal_queue_item_add+0x17a>
    f202:	2f05      	cmp	r7, #5
    f204:	d00d      	beq.n	f222 <am_hal_queue_item_add+0x16e>
    f206:	2f06      	cmp	r7, #6
    f208:	d005      	beq.n	f216 <am_hal_queue_item_add+0x162>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f20a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f20c:	2002      	movs	r0, #2
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f20e:	fbb1 fcf3 	udiv	ip, r1, r3
    f212:	fb03 111c 	mls	r1, r3, ip, r1
    f216:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f218:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f21a:	fbb1 f6f3 	udiv	r6, r1, r3
    f21e:	fb03 1116 	mls	r1, r3, r6, r1
    f222:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f224:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f226:	fbb1 f7f3 	udiv	r7, r1, r3
    f22a:	fb03 1117 	mls	r1, r3, r7, r1
    f22e:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f230:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f232:	fbb1 fef3 	udiv	lr, r1, r3
    f236:	fb03 111e 	mls	r1, r3, lr, r1
    f23a:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f23c:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f23e:	fbb1 fcf3 	udiv	ip, r1, r3
    f242:	fb03 111c 	mls	r1, r3, ip, r1
    f246:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f248:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f24a:	fbb1 f6f3 	udiv	r6, r1, r3
    f24e:	fb03 1116 	mls	r1, r3, r6, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f252:	3001      	adds	r0, #1
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f254:	3101      	adds	r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f256:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f258:	fbb1 f7f3 	udiv	r7, r1, r3
    f25c:	fb03 1117 	mls	r1, r3, r7, r1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f260:	d02a      	beq.n	f2b8 <am_hal_queue_item_add+0x204>
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f262:	3101      	adds	r1, #1
    f264:	fbb1 fef3 	udiv	lr, r1, r3
    f268:	fb03 161e 	mls	r6, r3, lr, r1
    f26c:	1c77      	adds	r7, r6, #1
    f26e:	fbb7 fcf3 	udiv	ip, r7, r3
    f272:	fb03 711c 	mls	r1, r3, ip, r7
    f276:	1c4e      	adds	r6, r1, #1
    f278:	fbb6 f7f3 	udiv	r7, r6, r3
    f27c:	fb03 6117 	mls	r1, r3, r7, r6
    f280:	1c4e      	adds	r6, r1, #1
    f282:	fbb6 f7f3 	udiv	r7, r6, r3
    f286:	fb03 6117 	mls	r1, r3, r7, r6
    f28a:	1c4e      	adds	r6, r1, #1
    f28c:	fbb6 f7f3 	udiv	r7, r6, r3
    f290:	fb03 6117 	mls	r1, r3, r7, r6
    f294:	1c4e      	adds	r6, r1, #1
    f296:	fbb6 f7f3 	udiv	r7, r6, r3
    f29a:	fb03 6117 	mls	r1, r3, r7, r6
    f29e:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2a0:	3008      	adds	r0, #8
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2a2:	fbb6 f7f3 	udiv	r7, r6, r3
    f2a6:	fb03 6117 	mls	r1, r3, r7, r6
    f2aa:	1c4e      	adds	r6, r1, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2ac:	4285      	cmp	r5, r0
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f2ae:	fbb6 f7f3 	udiv	r7, r6, r3
    f2b2:	fb03 6117 	mls	r1, r3, r7, r6
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2b6:	d1d4      	bne.n	f262 <am_hal_queue_item_add+0x1ae>
    f2b8:	6021      	str	r1, [r4, #0]
    f2ba:	e783      	b.n	f1c4 <am_hal_queue_item_add+0x110>

0000f2bc <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    f2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2be:	4604      	mov	r4, r0
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f2c0:	6905      	ldr	r5, [r0, #16]
{
    f2c2:	b083      	sub	sp, #12
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f2c4:	fb05 f502 	mul.w	r5, r5, r2
{
    f2c8:	460e      	mov	r6, r1
    bool bSuccess = false;

    pui8Dest = (uint8_t *) pvDest;

    AM_CRITICAL_BEGIN
    f2ca:	f7fe feb3 	bl	e034 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f2ce:	68a7      	ldr	r7, [r4, #8]
    AM_CRITICAL_BEGIN
    f2d0:	9001      	str	r0, [sp, #4]
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    f2d2:	42bd      	cmp	r5, r7
    f2d4:	f200 8083 	bhi.w	f3de <am_hal_queue_item_get+0x122>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2d8:	2d00      	cmp	r5, #0
    f2da:	d077      	beq.n	f3cc <am_hal_queue_item_get+0x110>
    f2dc:	6863      	ldr	r3, [r4, #4]
    f2de:	2e00      	cmp	r6, #0
    f2e0:	d07f      	beq.n	f3e2 <am_hal_queue_item_get+0x126>
            // Grab the next value from the buffer, but only if the
            // destination pointer is valid.
            //
            if (pvDest)
            {
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f2e2:	6962      	ldr	r2, [r4, #20]
    f2e4:	4630      	mov	r0, r6
    f2e6:	5cd1      	ldrb	r1, [r2, r3]
    f2e8:	f800 1b01 	strb.w	r1, [r0], #1
            }

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f2ec:	6863      	ldr	r3, [r4, #4]
    f2ee:	68e7      	ldr	r7, [r4, #12]
    f2f0:	1c5a      	adds	r2, r3, #1
    f2f2:	1971      	adds	r1, r6, r5
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f2f4:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f2f6:	fbb2 f6f7 	udiv	r6, r2, r7
    f2fa:	fb07 2316 	mls	r3, r7, r6, r2
    f2fe:	f105 37ff 	add.w	r7, r5, #4294967295
    f302:	6063      	str	r3, [r4, #4]
    f304:	f007 0203 	and.w	r2, r7, #3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f308:	d05f      	beq.n	f3ca <am_hal_queue_item_get+0x10e>
    f30a:	b362      	cbz	r2, f366 <am_hal_queue_item_get+0xaa>
    f30c:	2a01      	cmp	r2, #1
    f30e:	d01b      	beq.n	f348 <am_hal_queue_item_get+0x8c>
    f310:	2a02      	cmp	r2, #2
    f312:	d00c      	beq.n	f32e <am_hal_queue_item_get+0x72>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f314:	6966      	ldr	r6, [r4, #20]
    f316:	f816 c003 	ldrb.w	ip, [r6, r3]
    f31a:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f31e:	6863      	ldr	r3, [r4, #4]
    f320:	68e7      	ldr	r7, [r4, #12]
    f322:	1c5a      	adds	r2, r3, #1
    f324:	fbb2 f6f7 	udiv	r6, r2, r7
    f328:	fb07 2316 	mls	r3, r7, r6, r2
    f32c:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f32e:	6967      	ldr	r7, [r4, #20]
    f330:	f817 e003 	ldrb.w	lr, [r7, r3]
    f334:	f800 eb01 	strb.w	lr, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f338:	6863      	ldr	r3, [r4, #4]
    f33a:	68e6      	ldr	r6, [r4, #12]
    f33c:	1c5a      	adds	r2, r3, #1
    f33e:	fbb2 f7f6 	udiv	r7, r2, r6
    f342:	fb06 2317 	mls	r3, r6, r7, r2
    f346:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f348:	6966      	ldr	r6, [r4, #20]
    f34a:	f816 c003 	ldrb.w	ip, [r6, r3]
    f34e:	f800 cb01 	strb.w	ip, [r0], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f352:	6863      	ldr	r3, [r4, #4]
    f354:	68e7      	ldr	r7, [r4, #12]
    f356:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f358:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f35a:	fbb2 f6f7 	udiv	r6, r2, r7
    f35e:	fb07 2316 	mls	r3, r7, r6, r2
    f362:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f364:	d031      	beq.n	f3ca <am_hal_queue_item_get+0x10e>
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f366:	6962      	ldr	r2, [r4, #20]
    f368:	4686      	mov	lr, r0
    f36a:	5cd6      	ldrb	r6, [r2, r3]
    f36c:	f80e 6b01 	strb.w	r6, [lr], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f370:	6863      	ldr	r3, [r4, #4]
    f372:	68e7      	ldr	r7, [r4, #12]
    f374:	1c5a      	adds	r2, r3, #1
    f376:	fbb2 f6f7 	udiv	r6, r2, r7
    f37a:	fb07 2316 	mls	r3, r7, r6, r2
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f37e:	6967      	ldr	r7, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f380:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f382:	5cfa      	ldrb	r2, [r7, r3]
    f384:	7042      	strb	r2, [r0, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f386:	6863      	ldr	r3, [r4, #4]
    f388:	68e6      	ldr	r6, [r4, #12]
    f38a:	1c5f      	adds	r7, r3, #1
    f38c:	fbb7 f2f6 	udiv	r2, r7, r6
    f390:	fb06 7312 	mls	r3, r6, r2, r7
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f394:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f396:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f398:	5cf7      	ldrb	r7, [r6, r3]
    f39a:	f88e 7001 	strb.w	r7, [lr, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f39e:	6862      	ldr	r2, [r4, #4]
    f3a0:	68e7      	ldr	r7, [r4, #12]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f3a2:	6966      	ldr	r6, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3a4:	3201      	adds	r2, #1
    f3a6:	fbb2 fcf7 	udiv	ip, r2, r7
    f3aa:	fb07 231c 	mls	r3, r7, ip, r2
    f3ae:	6063      	str	r3, [r4, #4]
                pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    f3b0:	5cf7      	ldrb	r7, [r6, r3]
    f3b2:	70c7      	strb	r7, [r0, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3b4:	6866      	ldr	r6, [r4, #4]
    f3b6:	68e7      	ldr	r7, [r4, #12]
    f3b8:	1c72      	adds	r2, r6, #1
    f3ba:	3004      	adds	r0, #4
    f3bc:	fbb2 f6f7 	udiv	r6, r2, r7
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3c0:	4281      	cmp	r1, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3c2:	fb07 2316 	mls	r3, r7, r6, r2
    f3c6:	6063      	str	r3, [r4, #4]
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3c8:	d1cd      	bne.n	f366 <am_hal_queue_item_get+0xaa>
    f3ca:	68a7      	ldr	r7, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    f3cc:	1b7f      	subs	r7, r7, r5
    f3ce:	60a7      	str	r7, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    f3d0:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    AM_CRITICAL_END
    f3d2:	9801      	ldr	r0, [sp, #4]
    f3d4:	f7fe fe32 	bl	e03c <am_hal_interrupt_master_set>

    return bSuccess;
}
    f3d8:	4620      	mov	r0, r4
    f3da:	b003      	add	sp, #12
    f3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bSuccess = false;
    f3de:	2400      	movs	r4, #0
    f3e0:	e7f7      	b.n	f3d2 <am_hal_queue_item_get+0x116>
    f3e2:	68e1      	ldr	r1, [r4, #12]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f3e4:	1c58      	adds	r0, r3, #1
    f3e6:	fbb0 fef1 	udiv	lr, r0, r1
    f3ea:	fb01 031e 	mls	r3, r1, lr, r0
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f3ee:	2001      	movs	r0, #1
    f3f0:	1e6a      	subs	r2, r5, #1
    f3f2:	4285      	cmp	r5, r0
    f3f4:	f002 0607 	and.w	r6, r2, #7
    f3f8:	d063      	beq.n	f4c2 <am_hal_queue_item_get+0x206>
    f3fa:	b3be      	cbz	r6, f46c <am_hal_queue_item_get+0x1b0>
    f3fc:	2e01      	cmp	r6, #1
    f3fe:	d02d      	beq.n	f45c <am_hal_queue_item_get+0x1a0>
    f400:	2e02      	cmp	r6, #2
    f402:	d025      	beq.n	f450 <am_hal_queue_item_get+0x194>
    f404:	2e03      	cmp	r6, #3
    f406:	d01d      	beq.n	f444 <am_hal_queue_item_get+0x188>
    f408:	2e04      	cmp	r6, #4
    f40a:	d015      	beq.n	f438 <am_hal_queue_item_get+0x17c>
    f40c:	2e05      	cmp	r6, #5
    f40e:	d00d      	beq.n	f42c <am_hal_queue_item_get+0x170>
    f410:	2e06      	cmp	r6, #6
    f412:	d005      	beq.n	f420 <am_hal_queue_item_get+0x164>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f414:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f416:	2002      	movs	r0, #2
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f418:	fbb3 f2f1 	udiv	r2, r3, r1
    f41c:	fb01 3312 	mls	r3, r1, r2, r3
    f420:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f422:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f424:	fbb3 fcf1 	udiv	ip, r3, r1
    f428:	fb01 331c 	mls	r3, r1, ip, r3
    f42c:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f42e:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f430:	fbb3 fef1 	udiv	lr, r3, r1
    f434:	fb01 331e 	mls	r3, r1, lr, r3
    f438:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f43a:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f43c:	fbb3 f6f1 	udiv	r6, r3, r1
    f440:	fb01 3316 	mls	r3, r1, r6, r3
    f444:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f446:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f448:	fbb3 f2f1 	udiv	r2, r3, r1
    f44c:	fb01 3312 	mls	r3, r1, r2, r3
    f450:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f452:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f454:	fbb3 fcf1 	udiv	ip, r3, r1
    f458:	fb01 331c 	mls	r3, r1, ip, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f45c:	3001      	adds	r0, #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f45e:	3301      	adds	r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f460:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f462:	fbb3 fef1 	udiv	lr, r3, r1
    f466:	fb01 331e 	mls	r3, r1, lr, r3
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f46a:	d02a      	beq.n	f4c2 <am_hal_queue_item_get+0x206>
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f46c:	3301      	adds	r3, #1
    f46e:	fbb3 f6f1 	udiv	r6, r3, r1
    f472:	fb01 3216 	mls	r2, r1, r6, r3
    f476:	1c56      	adds	r6, r2, #1
    f478:	fbb6 fcf1 	udiv	ip, r6, r1
    f47c:	fb01 631c 	mls	r3, r1, ip, r6
    f480:	1c5a      	adds	r2, r3, #1
    f482:	fbb2 f6f1 	udiv	r6, r2, r1
    f486:	fb01 2316 	mls	r3, r1, r6, r2
    f48a:	1c5a      	adds	r2, r3, #1
    f48c:	fbb2 f6f1 	udiv	r6, r2, r1
    f490:	fb01 2316 	mls	r3, r1, r6, r2
    f494:	1c5a      	adds	r2, r3, #1
    f496:	fbb2 f6f1 	udiv	r6, r2, r1
    f49a:	fb01 2316 	mls	r3, r1, r6, r2
    f49e:	1c5a      	adds	r2, r3, #1
    f4a0:	fbb2 f6f1 	udiv	r6, r2, r1
    f4a4:	fb01 2316 	mls	r3, r1, r6, r2
    f4a8:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4aa:	3008      	adds	r0, #8
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4ac:	fbb2 f6f1 	udiv	r6, r2, r1
    f4b0:	fb01 2316 	mls	r3, r1, r6, r2
    f4b4:	1c5a      	adds	r2, r3, #1
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4b6:	4285      	cmp	r5, r0
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    f4b8:	fbb2 f6f1 	udiv	r6, r2, r1
    f4bc:	fb01 2316 	mls	r3, r1, r6, r2
        for ( uint32_t i = 0; i < ui32Bytes; i++ )
    f4c0:	d1d4      	bne.n	f46c <am_hal_queue_item_get+0x1b0>
    f4c2:	6063      	str	r3, [r4, #4]
    f4c4:	e782      	b.n	f3cc <am_hal_queue_item_get+0x110>
    f4c6:	bf00      	nop

0000f4c8 <am_hal_cachectrl_benchmark>:
    f4c8:	0104 0000 4d41 525f 4745 0000 4d43 4953     ....AM_REG..CMSI
    f4d8:	0053 0000 6d41 6962 2071 694d 7263 206f     S...Ambiq Micro 
    f4e8:	7727 6968 656c 2027 7865 6d61 6c70 2e65     'while' example.
    f4f8:	0a0a 0000 7355 6465 6620 726f 6d20 6165     ....Used for mea
    f508:	7573 6972 676e 7020 776f 7265 6920 206e     suring power in 
    f518:	6e61 6920 666e 6e69 7469 2065 6877 6c69     an infinite whil
    f528:	2065 6f6c 706f 0a2e 0000 0000 4347 2043     e loop......GCC 
    f538:	2e36 2e33 2031 3032 3731 3230 3531 2820     6.3.1 20170215 (
    f548:	6572 656c 7361 2965 5b20 5241 2f4d 6d65     release) [ARM/em
    f558:	6562 6464 6465 362d 622d 6172 636e 2068     bedded-6-branch 
    f568:	6572 6976 6973 6e6f 3220 3534 3135 5d32     revision 245512]
    f578:	0000 0000 7041 2070 6f43 706d 6c69 7265     ....App Compiler
    f588:	203a 2020 2520 0a73 0000 0000 4148 204c     :    %s.....HAL 
    f598:	6f43 706d 6c69 7265 203a 2020 2520 0a73     Compiler:    %s.
    f5a8:	0000 0000 4148 204c 4453 204b 6576 7372     ....HAL SDK vers
    f5b8:	6f69 3a6e 2520 2e64 6425 252e 0a64 0000     ion: %d.%d.%d...
    f5c8:	4148 204c 6f63 706d 6c69 6465 7720 7469     HAL compiled wit
    f5d8:	2068 7325 732d 7974 656c 7220 6765 7369     h %s-style regis
    f5e8:	6574 7372 000a 0000 450a 746e 7265 6e69     ters.....Enterin
    f5f8:	2067 6877 6c69 2065 6f6c 706f 2e2e 0a2e     g while loop....
    f608:	0000 0000 5245 4f52 3a52 5420 6568 7320     ....ERROR: The s
    f618:	7465 6974 676e 6f20 2066 504c 4d4d 444f     etting of LPMMOD
    f628:	2045 6166 6c69 6465 2021 6148 746c 6e69     E failed! Haltin
    f638:	2067 7270 676f 6172 2e6d 2e2e 000a 0000     g program.......
    f648:	0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a     ................
    f658:	0a0a 0000                                   ....

0000f65c <g_sBspUartConfig>:
    f65c:	c200 0001 0060 0000 0000 0000 0000 0000     ....`...........
    f66c:	0000 0000 0012 0000 0000 0000 0000 0000     ................
	...

0000f684 <g_AM_BSP_GPIO_COM_UART_RX>:
    f684:	0000 0000                                   ....

0000f688 <g_AM_BSP_GPIO_COM_UART_TX>:
    f688:	0000 0000                                   ....

0000f68c <am_hal_cachectrl_defaults>:
    f68c:	0308 0000                                   ....

0000f690 <g_ui32HALversion>:
    f690:	0d00 0102                                   ....

0000f694 <g_ui8HALcompiler>:
    f694:	4347 2043 2e36 2e33 2031 3032 3731 3230     GCC 6.3.1 201702
    f6a4:	3531 2820 6572 656c 7361 2965 5b20 5241     15 (release) [AR
    f6b4:	2f4d 6d65 6562 6464 6465 362d 622d 6172     M/embedded-6-bra
    f6c4:	636e 2068 6572 6976 6973 6e6f 3220 3534     nch revision 245
    f6d4:	3135 5d32 0000 0000                         512]....

0000f6dc <g_AM_HAL_GPIO_DISABLE>:
    f6dc:	0003 0000                                   ....

0000f6e0 <g_ui8Bit76Capabilities>:
    f6e0:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    f6f0:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    f700:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    f710:	0101 0000                                   ....

0000f714 <g_ui8Inpen>:
    f714:	2323 e224 23a1 1007 4303 e100 a151 3561     ##$..#...C..Q.a5
    f724:	c525 4181 b001 d160 3130 31a1 f101 1100     %..A..`.01.1....
    f734:	21b1 01d1 11e5 3005 1037 3130 6100 4000     .!.....07.01.a.@
    f744:	3130 0000                                   01..

0000f748 <g_ui8NCEtable>:
    f748:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    f758:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    f768:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    f778:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    f788:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    f798:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    f7a8:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    f7b8:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    f7c8:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    f7d8:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    f7e8:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    f7f8:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    f808:	1202 3222 1303 4323                         .."2..#C

0000f810 <g_ui8nCEpins>:
    f810:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    f820:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    f830:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    f840:	0101 0000                                   ....

0000f844 <g_am_hal_mcuctrl_flash_size>:
    f844:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f854:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
	...

0000f884 <g_am_hal_mcuctrl_sram_size>:
    f884:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f894:	0000 0004 0000 0008 0000 0010 0000 0006     ................
	...

0000f8c4 <am_hal_pwrctrl_memory_control>:
	...
    f8d8:	0001 0000 0001 0000 0001 0000 1fff 0000     ................
    f8e8:	1fff 0000 0003 0000 0003 0000 0003 0000     ................
    f8f8:	1fff 0000 1fff 0000 0007 0000 0007 0000     ................
    f908:	0007 0000 1fff 0000 1fff 0000 000f 0000     ................
    f918:	000f 0000 000f 0000 1fff 0000 1fff 0000     ................
    f928:	001f 0000 001f 0000 001f 0000 1fff 0000     ................
    f938:	1fff 0000 003f 0000 003f 0000 003f 0000     ....?...?...?...
    f948:	1fff 0000 1fff 0000 007f 0000 007f 0000     ................
    f958:	007f 0000 1fff 0000 1fff 0000 00ff 0000     ................
    f968:	00ff 0000 00ff 0000 1fff 0000 1fff 0000     ................
    f978:	01ff 0000 01ff 0000 01ff 0000 1fff 0000     ................
    f988:	1fff 0000 03ff 0000 03ff 0000 03ff 0000     ................
    f998:	1fff 0000 1fff 0000 07ff 0000 07ff 0000     ................
    f9a8:	07ff 0000 1fff 0000 1fff 0000 0fff 0000     ................
    f9b8:	0fff 0000 0fff 0000 1fff 0000 1fff 0000     ................
    f9c8:	1fff 0000 1fff 0000 1fff 0000 1fff 0000     ................
    f9d8:	1fff 0000 2000 0000 2000 0000 2000 0000     ..... ... ... ..
    f9e8:	6000 0000 6000 0000 6000 0000 6000 0000     .`...`...`...`..
    f9f8:	6000 0000 6000 0000 6000 0000 0000 c000     .`...`...`......
    fa08:	8000 0001 0000 c000 0000 c000 8000 0001     ................
    fa18:	7fff c000 ffff 0001 7fff c000 7fff c000     ................
    fa28:	ffff 0001                                   ....

0000fa2c <am_hal_pwrctrl_peripheral_control>:
	...
    fa38:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    fa48:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    fa58:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    fa68:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    fa78:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    fa88:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    fa98:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    faa8:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    fab8:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    fac8:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    fad8:	0100 0000 0100 0000                         ........
