
bin/binary_counter.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 ad d3 00 00 15 d4 00 00 05 c3 00 00     ................
    c010:	05 c3 00 00 05 c3 00 00 05 c3 00 00 00 00 00 00     ................
	...
    c02c:	1b d4 00 00 1b d4 00 00 00 00 00 00 1b d4 00 00     ................
    c03c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c04c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c05c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c06c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 25 c2 00 00     ............%...
    c07c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c08c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c09c:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c0ac:	1b d4 00 00 1b d4 00 00 1b d4 00 00 1b d4 00 00     ................
    c0bc:	1b d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	79fb      	ldrb	r3, [r7, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4907      	ldr	r1, [pc, #28]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    // Enable the LFRC.
    //
#if USE_XTAL
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
#else
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c1e2:	2100      	movs	r1, #0
    c1e4:	2002      	movs	r0, #2
    c1e6:	f001 fa6f 	bl	d6c8 <am_hal_clkgen_control>
#endif

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c1ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1ee:	2000      	movs	r0, #0
    c1f0:	f001 fb4e 	bl	d890 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    c1f4:	490a      	ldr	r1, [pc, #40]	; (c220 <timerA0_init+0x44>)
    c1f6:	2000      	movs	r0, #0
    c1f8:	f001 faf0 	bl	d7dc <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 32;
    c1fc:	2320      	movs	r3, #32
    c1fe:	607b      	str	r3, [r7, #4]
#if USE_XTAL
    ui32Period *= 8;
#endif
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    c200:	687b      	ldr	r3, [r7, #4]
    c202:	085b      	lsrs	r3, r3, #1
    c204:	687a      	ldr	r2, [r7, #4]
    c206:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c20a:	2000      	movs	r0, #0
    c20c:	f001 fb54 	bl	d8b8 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c210:	2001      	movs	r0, #1
    c212:	f001 fbbb 	bl	d98c <am_hal_ctimer_int_clear>
}
    c216:	bf00      	nop
    c218:	3708      	adds	r7, #8
    c21a:	46bd      	mov	sp, r7
    c21c:	bd80      	pop	{r7, pc}
    c21e:	bf00      	nop
    c220:	1000c000 	.word	0x1000c000

0000c224 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c224:	b580      	push	{r7, lr}
    c226:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    c228:	4b08      	ldr	r3, [pc, #32]	; (c24c <am_ctimer_isr+0x28>)
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	3301      	adds	r3, #1
    c22e:	4a07      	ldr	r2, [pc, #28]	; (c24c <am_ctimer_isr+0x28>)
    c230:	6013      	str	r3, [r2, #0]
    if ( g_ui32TimerCount >= (1 << NUM_LEDS) )
    c232:	4b06      	ldr	r3, [pc, #24]	; (c24c <am_ctimer_isr+0x28>)
    c234:	681b      	ldr	r3, [r3, #0]
    c236:	2b1f      	cmp	r3, #31
    c238:	d902      	bls.n	c240 <am_ctimer_isr+0x1c>
    {
        //
        // Reset the global.
        //
        g_ui32TimerCount = 0;
    c23a:	4b04      	ldr	r3, [pc, #16]	; (c24c <am_ctimer_isr+0x28>)
    c23c:	2200      	movs	r2, #0
    c23e:	601a      	str	r2, [r3, #0]
    }

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c240:	2001      	movs	r0, #1
    c242:	f001 fba3 	bl	d98c <am_hal_ctimer_int_clear>
}
    c246:	bf00      	nop
    c248:	bd80      	pop	{r7, pc}
    c24a:	bf00      	nop
    c24c:	1000c06c 	.word	0x1000c06c

0000c250 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c250:	b580      	push	{r7, lr}
    c252:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c254:	2100      	movs	r1, #0
    c256:	2000      	movs	r0, #0
    c258:	f001 fa36 	bl	d6c8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c25c:	4822      	ldr	r0, [pc, #136]	; (c2e8 <main+0x98>)
    c25e:	f001 f9ff 	bl	d660 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c262:	f001 fa27 	bl	d6b4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c266:	f001 f8ff 	bl	d468 <am_bsp_low_power_init>

#ifdef AM_BSP_NUM_LEDS
    //
    // Initialize the LED array
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c26a:	2105      	movs	r1, #5
    c26c:	481f      	ldr	r0, [pc, #124]	; (c2ec <main+0x9c>)
    c26e:	f000 ffdd 	bl	d22c <am_devices_led_array_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c272:	f001 f9d5 	bl	d620 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c276:	f000 ff81 	bl	d17c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Binary Counter Example\n");
    c27a:	481d      	ldr	r0, [pc, #116]	; (c2f0 <main+0xa0>)
    c27c:	f000 ff5a 	bl	d134 <am_util_stdio_printf>
    am_util_stdio_printf("  (Timer clock source is " BC_CLKSRC ")\n");
    c280:	481c      	ldr	r0, [pc, #112]	; (c2f4 <main+0xa4>)
    c282:	f000 ff57 	bl	d134 <am_util_stdio_printf>

    //
    // TimerA0 init.
    //
    timerA0_init();
    c286:	f7ff ffa9 	bl	c1dc <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c28a:	2001      	movs	r0, #1
    c28c:	f001 fb6a 	bl	d964 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(CTIMER_IRQn);
    c290:	200e      	movs	r0, #14
    c292:	f7ff ff85 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c296:	f001 fd43 	bl	dd20 <am_hal_interrupt_master_enable>

    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c29a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c29e:	2000      	movs	r0, #0
    c2a0:	f001 facc 	bl	d83c <am_hal_ctimer_start>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2a4:	f001 f986 	bl	d5b4 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2a8:	2001      	movs	r0, #1
    c2aa:	f001 ff1d 	bl	e0e8 <am_hal_sysctrl_sleep>

#ifdef AM_BSP_NUM_LEDS
        //
        // Set the LEDs.
        //
        am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS,
    c2ae:	4b12      	ldr	r3, [pc, #72]	; (c2f8 <main+0xa8>)
    c2b0:	681b      	ldr	r3, [r3, #0]
    c2b2:	461a      	mov	r2, r3
    c2b4:	2105      	movs	r1, #5
    c2b6:	480d      	ldr	r0, [pc, #52]	; (c2ec <main+0x9c>)
    c2b8:	f001 f852 	bl	d360 <am_devices_led_array_out>
                                 g_ui32TimerCount);
#endif
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
    c2bc:	f001 f906 	bl	d4cc <am_bsp_debug_printf_enable>

        am_util_stdio_printf("%d ", g_ui32TimerCount & 0x7);
    c2c0:	4b0d      	ldr	r3, [pc, #52]	; (c2f8 <main+0xa8>)
    c2c2:	681b      	ldr	r3, [r3, #0]
    c2c4:	f003 0307 	and.w	r3, r3, #7
    c2c8:	4619      	mov	r1, r3
    c2ca:	480c      	ldr	r0, [pc, #48]	; (c2fc <main+0xac>)
    c2cc:	f000 ff32 	bl	d134 <am_util_stdio_printf>
        if ( (g_ui32TimerCount & ((1 << NUM_LEDS) - 1)) == 0 )
    c2d0:	4b09      	ldr	r3, [pc, #36]	; (c2f8 <main+0xa8>)
    c2d2:	681b      	ldr	r3, [r3, #0]
    c2d4:	f003 031f 	and.w	r3, r3, #31
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d102      	bne.n	c2e2 <main+0x92>
        {
            am_util_stdio_printf("\n");
    c2dc:	4808      	ldr	r0, [pc, #32]	; (c300 <main+0xb0>)
    c2de:	f000 ff29 	bl	d134 <am_util_stdio_printf>
        }

        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c2e2:	f001 f967 	bl	d5b4 <am_bsp_debug_printf_disable>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2e6:	e7df      	b.n	c2a8 <main+0x58>
    c2e8:	0000ebac 	.word	0x0000ebac
    c2ec:	1000c00c 	.word	0x1000c00c
    c2f0:	0000eb24 	.word	0x0000eb24
    c2f4:	0000eb3c 	.word	0x0000eb3c
    c2f8:	1000c06c 	.word	0x1000c06c
    c2fc:	0000eb5c 	.word	0x0000eb5c
    c300:	0000eb60 	.word	0x0000eb60

0000c304 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c304:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c306:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c30a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c30c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c310:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c314:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c318:	f000 f80a 	bl	c330 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c31c:	bd01      	pop	{r0, pc}
}
    c31e:	bf00      	nop
    c320:	4618      	mov	r0, r3

0000c322 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c322:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c324:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c326:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c328:	4770      	bx	lr
}
    c32a:	bf00      	nop
    c32c:	4618      	mov	r0, r3
	...

0000c330 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c330:	b580      	push	{r7, lr}
    c332:	b096      	sub	sp, #88	; 0x58
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c338:	f107 030c 	add.w	r3, r7, #12
    c33c:	2200      	movs	r2, #0
    c33e:	601a      	str	r2, [r3, #0]
    c340:	605a      	str	r2, [r3, #4]
    c342:	609a      	str	r2, [r3, #8]
    c344:	60da      	str	r2, [r3, #12]
    c346:	611a      	str	r2, [r3, #16]
    c348:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c34a:	2300      	movs	r3, #0
    c34c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c350:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c352:	4b2e      	ldr	r3, [pc, #184]	; (c40c <am_util_faultisr_collect_data+0xdc>)
    c354:	681b      	ldr	r3, [r3, #0]
    c356:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c35a:	b2db      	uxtb	r3, r3
    c35c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c362:	0a1b      	lsrs	r3, r3, #8
    c364:	b2db      	uxtb	r3, r3
    c366:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c36c:	0c1b      	lsrs	r3, r3, #16
    c36e:	b29b      	uxth	r3, r3
    c370:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c374:	4b26      	ldr	r3, [pc, #152]	; (c410 <am_util_faultisr_collect_data+0xe0>)
    c376:	681b      	ldr	r3, [r3, #0]
    c378:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c37a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c37e:	b2db      	uxtb	r3, r3
    c380:	f003 0302 	and.w	r3, r3, #2
    c384:	2b00      	cmp	r3, #0
    c386:	d005      	beq.n	c394 <am_util_faultisr_collect_data+0x64>
    c388:	6879      	ldr	r1, [r7, #4]
    c38a:	2006      	movs	r0, #6
    c38c:	f7ff ffc9 	bl	c322 <getStackedReg>
    c390:	4603      	mov	r3, r0
    c392:	e001      	b.n	c398 <am_util_faultisr_collect_data+0x68>
    c394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c398:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c39a:	6879      	ldr	r1, [r7, #4]
    c39c:	2000      	movs	r0, #0
    c39e:	f7ff ffc0 	bl	c322 <getStackedReg>
    c3a2:	4603      	mov	r3, r0
    c3a4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3a6:	6879      	ldr	r1, [r7, #4]
    c3a8:	2001      	movs	r0, #1
    c3aa:	f7ff ffba 	bl	c322 <getStackedReg>
    c3ae:	4603      	mov	r3, r0
    c3b0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3b2:	6879      	ldr	r1, [r7, #4]
    c3b4:	2002      	movs	r0, #2
    c3b6:	f7ff ffb4 	bl	c322 <getStackedReg>
    c3ba:	4603      	mov	r3, r0
    c3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3be:	6879      	ldr	r1, [r7, #4]
    c3c0:	2003      	movs	r0, #3
    c3c2:	f7ff ffae 	bl	c322 <getStackedReg>
    c3c6:	4603      	mov	r3, r0
    c3c8:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3ca:	6879      	ldr	r1, [r7, #4]
    c3cc:	2004      	movs	r0, #4
    c3ce:	f7ff ffa8 	bl	c322 <getStackedReg>
    c3d2:	4603      	mov	r3, r0
    c3d4:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3d6:	6879      	ldr	r1, [r7, #4]
    c3d8:	2005      	movs	r0, #5
    c3da:	f7ff ffa2 	bl	c322 <getStackedReg>
    c3de:	4603      	mov	r3, r0
    c3e0:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3e2:	6879      	ldr	r1, [r7, #4]
    c3e4:	2006      	movs	r0, #6
    c3e6:	f7ff ff9c 	bl	c322 <getStackedReg>
    c3ea:	4603      	mov	r3, r0
    c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c3ee:	6879      	ldr	r1, [r7, #4]
    c3f0:	2007      	movs	r0, #7
    c3f2:	f7ff ff96 	bl	c322 <getStackedReg>
    c3f6:	4603      	mov	r3, r0
    c3f8:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c3fa:	f107 030c 	add.w	r3, r7, #12
    c3fe:	4619      	mov	r1, r3
    c400:	2002      	movs	r0, #2
    c402:	f001 fd25 	bl	de50 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c406:	2300      	movs	r3, #0
    c408:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c40a:	e7fe      	b.n	c40a <am_util_faultisr_collect_data+0xda>
    c40c:	e000ed28 	.word	0xe000ed28
    c410:	e000ed38 	.word	0xe000ed38

0000c414 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c414:	b480      	push	{r7}
    c416:	b083      	sub	sp, #12
    c418:	af00      	add	r7, sp, #0
    c41a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c41c:	4a04      	ldr	r2, [pc, #16]	; (c430 <am_util_stdio_printf_init+0x1c>)
    c41e:	687b      	ldr	r3, [r7, #4]
    c420:	6013      	str	r3, [r2, #0]
}
    c422:	bf00      	nop
    c424:	370c      	adds	r7, #12
    c426:	46bd      	mov	sp, r7
    c428:	f85d 7b04 	ldr.w	r7, [sp], #4
    c42c:	4770      	bx	lr
    c42e:	bf00      	nop
    c430:	1000c984 	.word	0x1000c984

0000c434 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c434:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    c438:	b08b      	sub	sp, #44	; 0x2c
    c43a:	af00      	add	r7, sp, #0
    c43c:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c440:	e9d7 1200 	ldrd	r1, r2, [r7]
    c444:	f04f 0300 	mov.w	r3, #0
    c448:	f04f 0400 	mov.w	r4, #0
    c44c:	0013      	movs	r3, r2
    c44e:	2400      	movs	r4, #0
    c450:	4323      	orrs	r3, r4
    c452:	f000 809d 	beq.w	c590 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c456:	e9d7 3400 	ldrd	r3, r4, [r7]
    c45a:	0866      	lsrs	r6, r4, #1
    c45c:	ea4f 0533 	mov.w	r5, r3, rrx
    c460:	e9d7 1200 	ldrd	r1, r2, [r7]
    c464:	f04f 0b00 	mov.w	fp, #0
    c468:	f04f 0c00 	mov.w	ip, #0
    c46c:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    c470:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    c474:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    c478:	eb1b 0305 	adds.w	r3, fp, r5
    c47c:	eb4c 0406 	adc.w	r4, ip, r6
    c480:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    c484:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c488:	f04f 0500 	mov.w	r5, #0
    c48c:	f04f 0600 	mov.w	r6, #0
    c490:	090d      	lsrs	r5, r1, #4
    c492:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    c496:	0916      	lsrs	r6, r2, #4
    c498:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c49c:	186b      	adds	r3, r5, r1
    c49e:	eb46 0402 	adc.w	r4, r6, r2
    c4a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    c4a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4aa:	f04f 0500 	mov.w	r5, #0
    c4ae:	f04f 0600 	mov.w	r6, #0
    c4b2:	0a0d      	lsrs	r5, r1, #8
    c4b4:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    c4b8:	0a16      	lsrs	r6, r2, #8
    c4ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4be:	186b      	adds	r3, r5, r1
    c4c0:	eb46 0402 	adc.w	r4, r6, r2
    c4c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    c4c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4cc:	f04f 0500 	mov.w	r5, #0
    c4d0:	f04f 0600 	mov.w	r6, #0
    c4d4:	0c0d      	lsrs	r5, r1, #16
    c4d6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    c4da:	0c16      	lsrs	r6, r2, #16
    c4dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4e0:	186b      	adds	r3, r5, r1
    c4e2:	eb46 0402 	adc.w	r4, r6, r2
    c4e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    c4ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4ee:	f04f 0500 	mov.w	r5, #0
    c4f2:	f04f 0600 	mov.w	r6, #0
    c4f6:	0015      	movs	r5, r2
    c4f8:	2600      	movs	r6, #0
    c4fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c4fe:	186b      	adds	r3, r5, r1
    c500:	eb46 0402 	adc.w	r4, r6, r2
    c504:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    c508:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c50c:	f04f 0300 	mov.w	r3, #0
    c510:	f04f 0400 	mov.w	r4, #0
    c514:	08cb      	lsrs	r3, r1, #3
    c516:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c51a:	08d4      	lsrs	r4, r2, #3
    c51c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    c520:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    c524:	46ab      	mov	fp, r5
    c526:	46b4      	mov	ip, r6
    c528:	f04f 0100 	mov.w	r1, #0
    c52c:	f04f 0200 	mov.w	r2, #0
    c530:	ea4f 028c 	mov.w	r2, ip, lsl #2
    c534:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    c538:	ea4f 018b 	mov.w	r1, fp, lsl #2
    c53c:	468b      	mov	fp, r1
    c53e:	4694      	mov	ip, r2
    c540:	eb1b 0b05 	adds.w	fp, fp, r5
    c544:	eb4c 0c06 	adc.w	ip, ip, r6
    c548:	eb1b 030b 	adds.w	r3, fp, fp
    c54c:	eb4c 040c 	adc.w	r4, ip, ip
    c550:	469b      	mov	fp, r3
    c552:	46a4      	mov	ip, r4
    c554:	4659      	mov	r1, fp
    c556:	4662      	mov	r2, ip
    c558:	e9d7 3400 	ldrd	r3, r4, [r7]
    c55c:	1a5b      	subs	r3, r3, r1
    c55e:	eb64 0402 	sbc.w	r4, r4, r2
    c562:	461d      	mov	r5, r3
    c564:	4626      	mov	r6, r4
    c566:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    c56a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c56e:	1d99      	adds	r1, r3, #6
    c570:	f144 0200 	adc.w	r2, r4, #0
    c574:	f04f 0500 	mov.w	r5, #0
    c578:	f04f 0600 	mov.w	r6, #0
    c57c:	090d      	lsrs	r5, r1, #4
    c57e:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    c582:	0916      	lsrs	r6, r2, #4
    c584:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    c588:	186b      	adds	r3, r5, r1
    c58a:	eb46 0402 	adc.w	r4, r6, r2
    c58e:	e029      	b.n	c5e4 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c590:	683b      	ldr	r3, [r7, #0]
    c592:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c596:	085a      	lsrs	r2, r3, #1
    c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c59a:	089b      	lsrs	r3, r3, #2
    c59c:	4413      	add	r3, r2
    c59e:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    c5a0:	6a3b      	ldr	r3, [r7, #32]
    c5a2:	091b      	lsrs	r3, r3, #4
    c5a4:	6a3a      	ldr	r2, [r7, #32]
    c5a6:	4413      	add	r3, r2
    c5a8:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    c5aa:	6a3b      	ldr	r3, [r7, #32]
    c5ac:	0a1b      	lsrs	r3, r3, #8
    c5ae:	6a3a      	ldr	r2, [r7, #32]
    c5b0:	4413      	add	r3, r2
    c5b2:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    c5b4:	6a3b      	ldr	r3, [r7, #32]
    c5b6:	0c1b      	lsrs	r3, r3, #16
    c5b8:	6a3a      	ldr	r2, [r7, #32]
    c5ba:	4413      	add	r3, r2
    c5bc:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    c5be:	6a3b      	ldr	r3, [r7, #32]
    c5c0:	08db      	lsrs	r3, r3, #3
    c5c2:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    c5c4:	6a3a      	ldr	r2, [r7, #32]
    c5c6:	4613      	mov	r3, r2
    c5c8:	009b      	lsls	r3, r3, #2
    c5ca:	4413      	add	r3, r2
    c5cc:	005b      	lsls	r3, r3, #1
    c5ce:	461a      	mov	r2, r3
    c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5d2:	1a9b      	subs	r3, r3, r2
    c5d4:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5d6:	69fb      	ldr	r3, [r7, #28]
    c5d8:	3306      	adds	r3, #6
    c5da:	091a      	lsrs	r2, r3, #4
    c5dc:	6a3b      	ldr	r3, [r7, #32]
    c5de:	4413      	add	r3, r2
    c5e0:	f04f 0400 	mov.w	r4, #0
    }
}
    c5e4:	4618      	mov	r0, r3
    c5e6:	4621      	mov	r1, r4
    c5e8:	372c      	adds	r7, #44	; 0x2c
    c5ea:	46bd      	mov	sp, r7
    c5ec:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    c5f0:	4770      	bx	lr

0000c5f2 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c5f2:	b590      	push	{r4, r7, lr}
    c5f4:	b085      	sub	sp, #20
    c5f6:	af00      	add	r7, sp, #0
    c5f8:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c5fc:	683a      	ldr	r2, [r7, #0]
    c5fe:	687b      	ldr	r3, [r7, #4]
    c600:	4313      	orrs	r3, r2
    c602:	2b00      	cmp	r3, #0
    c604:	bf0c      	ite	eq
    c606:	2301      	moveq	r3, #1
    c608:	2300      	movne	r3, #0
    c60a:	b2db      	uxtb	r3, r3
    c60c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c60e:	e008      	b.n	c622 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c610:	e9d7 0100 	ldrd	r0, r1, [r7]
    c614:	f7ff ff0e 	bl	c434 <divu64_10>
    c618:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c61c:	68fb      	ldr	r3, [r7, #12]
    c61e:	3301      	adds	r3, #1
    c620:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c622:	e9d7 3400 	ldrd	r3, r4, [r7]
    c626:	4323      	orrs	r3, r4
    c628:	d1f2      	bne.n	c610 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c62a:	68fb      	ldr	r3, [r7, #12]
}
    c62c:	4618      	mov	r0, r3
    c62e:	3714      	adds	r7, #20
    c630:	46bd      	mov	sp, r7
    c632:	bd90      	pop	{r4, r7, pc}

0000c634 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c634:	b590      	push	{r4, r7, lr}
    c636:	b083      	sub	sp, #12
    c638:	af00      	add	r7, sp, #0
    c63a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c63e:	e9d7 3400 	ldrd	r3, r4, [r7]
    c642:	2b00      	cmp	r3, #0
    c644:	f174 0300 	sbcs.w	r3, r4, #0
    c648:	da06      	bge.n	c658 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c64a:	e9d7 3400 	ldrd	r3, r4, [r7]
    c64e:	425b      	negs	r3, r3
    c650:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c654:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c658:	e9d7 3400 	ldrd	r3, r4, [r7]
    c65c:	4618      	mov	r0, r3
    c65e:	4621      	mov	r1, r4
    c660:	f7ff ffc7 	bl	c5f2 <ndigits_in_u64>
    c664:	4603      	mov	r3, r0
}
    c666:	4618      	mov	r0, r3
    c668:	370c      	adds	r7, #12
    c66a:	46bd      	mov	sp, r7
    c66c:	bd90      	pop	{r4, r7, pc}

0000c66e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c66e:	b490      	push	{r4, r7}
    c670:	b084      	sub	sp, #16
    c672:	af00      	add	r7, sp, #0
    c674:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c678:	683a      	ldr	r2, [r7, #0]
    c67a:	687b      	ldr	r3, [r7, #4]
    c67c:	4313      	orrs	r3, r2
    c67e:	2b00      	cmp	r3, #0
    c680:	bf0c      	ite	eq
    c682:	2301      	moveq	r3, #1
    c684:	2300      	movne	r3, #0
    c686:	b2db      	uxtb	r3, r3
    c688:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c68a:	e00e      	b.n	c6aa <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    c68c:	e9d7 1200 	ldrd	r1, r2, [r7]
    c690:	f04f 0300 	mov.w	r3, #0
    c694:	f04f 0400 	mov.w	r4, #0
    c698:	090b      	lsrs	r3, r1, #4
    c69a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c69e:	0914      	lsrs	r4, r2, #4
    c6a0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    c6a4:	68fb      	ldr	r3, [r7, #12]
    c6a6:	3301      	adds	r3, #1
    c6a8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c6aa:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6ae:	4323      	orrs	r3, r4
    c6b0:	d1ec      	bne.n	c68c <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c6b2:	68fb      	ldr	r3, [r7, #12]
}
    c6b4:	4618      	mov	r0, r3
    c6b6:	3710      	adds	r7, #16
    c6b8:	46bd      	mov	sp, r7
    c6ba:	bc90      	pop	{r4, r7}
    c6bc:	4770      	bx	lr

0000c6be <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c6be:	b480      	push	{r7}
    c6c0:	b087      	sub	sp, #28
    c6c2:	af00      	add	r7, sp, #0
    c6c4:	6078      	str	r0, [r7, #4]
    c6c6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c6c8:	2300      	movs	r3, #0
    c6ca:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c6cc:	2300      	movs	r3, #0
    c6ce:	613b      	str	r3, [r7, #16]
    c6d0:	2300      	movs	r3, #0
    c6d2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	781b      	ldrb	r3, [r3, #0]
    c6d8:	2b2d      	cmp	r3, #45	; 0x2d
    c6da:	d11b      	bne.n	c714 <decstr_to_int+0x56>
    {
        bNeg = true;
    c6dc:	2301      	movs	r3, #1
    c6de:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c6e0:	687b      	ldr	r3, [r7, #4]
    c6e2:	3301      	adds	r3, #1
    c6e4:	607b      	str	r3, [r7, #4]
        uCnt++;
    c6e6:	68fb      	ldr	r3, [r7, #12]
    c6e8:	3301      	adds	r3, #1
    c6ea:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6ec:	e012      	b.n	c714 <decstr_to_int+0x56>
    {
        ++uCnt;
    c6ee:	68fb      	ldr	r3, [r7, #12]
    c6f0:	3301      	adds	r3, #1
    c6f2:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c6f4:	693a      	ldr	r2, [r7, #16]
    c6f6:	4613      	mov	r3, r2
    c6f8:	009b      	lsls	r3, r3, #2
    c6fa:	4413      	add	r3, r2
    c6fc:	005b      	lsls	r3, r3, #1
    c6fe:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	781b      	ldrb	r3, [r3, #0]
    c704:	461a      	mov	r2, r3
    c706:	693b      	ldr	r3, [r7, #16]
    c708:	4413      	add	r3, r2
    c70a:	3b30      	subs	r3, #48	; 0x30
    c70c:	613b      	str	r3, [r7, #16]
        pcStr++;
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	3301      	adds	r3, #1
    c712:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	2b2f      	cmp	r3, #47	; 0x2f
    c71a:	d903      	bls.n	c724 <decstr_to_int+0x66>
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	781b      	ldrb	r3, [r3, #0]
    c720:	2b39      	cmp	r3, #57	; 0x39
    c722:	d9e4      	bls.n	c6ee <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c724:	683b      	ldr	r3, [r7, #0]
    c726:	2b00      	cmp	r3, #0
    c728:	d002      	beq.n	c730 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c72a:	683b      	ldr	r3, [r7, #0]
    c72c:	68fa      	ldr	r2, [r7, #12]
    c72e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c730:	7dfb      	ldrb	r3, [r7, #23]
    c732:	2b00      	cmp	r3, #0
    c734:	d002      	beq.n	c73c <decstr_to_int+0x7e>
    c736:	693b      	ldr	r3, [r7, #16]
    c738:	425b      	negs	r3, r3
    c73a:	e000      	b.n	c73e <decstr_to_int+0x80>
    c73c:	693b      	ldr	r3, [r7, #16]
}
    c73e:	4618      	mov	r0, r3
    c740:	371c      	adds	r7, #28
    c742:	46bd      	mov	sp, r7
    c744:	f85d 7b04 	ldr.w	r7, [sp], #4
    c748:	4770      	bx	lr

0000c74a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c74a:	b590      	push	{r4, r7, lr}
    c74c:	b091      	sub	sp, #68	; 0x44
    c74e:	af00      	add	r7, sp, #0
    c750:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c754:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c756:	2300      	movs	r3, #0
    c758:	63fb      	str	r3, [r7, #60]	; 0x3c
    c75a:	2300      	movs	r3, #0
    c75c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c75e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c762:	f7ff fe67 	bl	c434 <divu64_10>
    c766:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c76a:	68b9      	ldr	r1, [r7, #8]
    c76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c76e:	4613      	mov	r3, r2
    c770:	009b      	lsls	r3, r3, #2
    c772:	4413      	add	r3, r2
    c774:	005b      	lsls	r3, r3, #1
    c776:	1acb      	subs	r3, r1, r3
    c778:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c77c:	b2da      	uxtb	r2, r3
    c77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c780:	1c59      	adds	r1, r3, #1
    c782:	63f9      	str	r1, [r7, #60]	; 0x3c
    c784:	3230      	adds	r2, #48	; 0x30
    c786:	b2d2      	uxtb	r2, r2
    c788:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c78c:	440b      	add	r3, r1
    c78e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c792:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c796:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c79a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c79e:	4323      	orrs	r3, r4
    c7a0:	d1dd      	bne.n	c75e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c7a6:	687b      	ldr	r3, [r7, #4]
    c7a8:	2b00      	cmp	r3, #0
    c7aa:	d011      	beq.n	c7d0 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c7ac:	e008      	b.n	c7c0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c7ae:	687b      	ldr	r3, [r7, #4]
    c7b0:	1c5a      	adds	r2, r3, #1
    c7b2:	607a      	str	r2, [r7, #4]
    c7b4:	f107 0110 	add.w	r1, r7, #16
    c7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c7ba:	440a      	add	r2, r1
    c7bc:	7812      	ldrb	r2, [r2, #0]
    c7be:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7c2:	1e5a      	subs	r2, r3, #1
    c7c4:	63fa      	str	r2, [r7, #60]	; 0x3c
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d1f1      	bne.n	c7ae <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	2200      	movs	r2, #0
    c7ce:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c7d2:	4618      	mov	r0, r3
    c7d4:	3744      	adds	r7, #68	; 0x44
    c7d6:	46bd      	mov	sp, r7
    c7d8:	bd90      	pop	{r4, r7, pc}

0000c7da <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c7da:	b490      	push	{r4, r7}
    c7dc:	b08c      	sub	sp, #48	; 0x30
    c7de:	af00      	add	r7, sp, #0
    c7e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c7e4:	607a      	str	r2, [r7, #4]
    c7e6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c7e8:	2300      	movs	r3, #0
    c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c7ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c7f0:	4323      	orrs	r3, r4
    c7f2:	d135      	bne.n	c860 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7f6:	1c5a      	adds	r2, r3, #1
    c7f8:	62fa      	str	r2, [r7, #44]	; 0x2c
    c7fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c7fe:	4413      	add	r3, r2
    c800:	2230      	movs	r2, #48	; 0x30
    c802:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c806:	e02b      	b.n	c860 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    c808:	7a3b      	ldrb	r3, [r7, #8]
    c80a:	f003 030f 	and.w	r3, r3, #15
    c80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c816:	2b09      	cmp	r3, #9
    c818:	d90a      	bls.n	c830 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c81a:	78fb      	ldrb	r3, [r7, #3]
    c81c:	2b00      	cmp	r3, #0
    c81e:	d001      	beq.n	c824 <uint64_to_hexstr+0x4a>
    c820:	2227      	movs	r2, #39	; 0x27
    c822:	e000      	b.n	c826 <uint64_to_hexstr+0x4c>
    c824:	2207      	movs	r2, #7
    c826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c82a:	4413      	add	r3, r2
    c82c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c832:	1c5a      	adds	r2, r3, #1
    c834:	62fa      	str	r2, [r7, #44]	; 0x2c
    c836:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c83a:	3230      	adds	r2, #48	; 0x30
    c83c:	b2d2      	uxtb	r2, r2
    c83e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c842:	440b      	add	r3, r1
    c844:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c848:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    c84c:	f04f 0300 	mov.w	r3, #0
    c850:	f04f 0400 	mov.w	r4, #0
    c854:	090b      	lsrs	r3, r1, #4
    c856:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c85a:	0914      	lsrs	r4, r2, #4
    c85c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    c860:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c864:	4323      	orrs	r3, r4
    c866:	d1cf      	bne.n	c808 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c86a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c86c:	687b      	ldr	r3, [r7, #4]
    c86e:	2b00      	cmp	r3, #0
    c870:	d011      	beq.n	c896 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    c872:	e008      	b.n	c886 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    c874:	687b      	ldr	r3, [r7, #4]
    c876:	1c5a      	adds	r2, r3, #1
    c878:	607a      	str	r2, [r7, #4]
    c87a:	f107 0110 	add.w	r1, r7, #16
    c87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c880:	440a      	add	r2, r1
    c882:	7812      	ldrb	r2, [r2, #0]
    c884:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c888:	1e5a      	subs	r2, r3, #1
    c88a:	62fa      	str	r2, [r7, #44]	; 0x2c
    c88c:	2b00      	cmp	r3, #0
    c88e:	d1f1      	bne.n	c874 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	2200      	movs	r2, #0
    c894:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c898:	4618      	mov	r0, r3
    c89a:	3730      	adds	r7, #48	; 0x30
    c89c:	46bd      	mov	sp, r7
    c89e:	bc90      	pop	{r4, r7}
    c8a0:	4770      	bx	lr

0000c8a2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c8a2:	b480      	push	{r7}
    c8a4:	b085      	sub	sp, #20
    c8a6:	af00      	add	r7, sp, #0
    c8a8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c8aa:	2300      	movs	r3, #0
    c8ac:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c8ae:	687b      	ldr	r3, [r7, #4]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d104      	bne.n	c8be <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c8b4:	68fb      	ldr	r3, [r7, #12]
    c8b6:	e009      	b.n	c8cc <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	3301      	adds	r3, #1
    c8bc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c8be:	687b      	ldr	r3, [r7, #4]
    c8c0:	1c5a      	adds	r2, r3, #1
    c8c2:	607a      	str	r2, [r7, #4]
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d1f6      	bne.n	c8b8 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c8ca:	68fb      	ldr	r3, [r7, #12]
}
    c8cc:	4618      	mov	r0, r3
    c8ce:	3714      	adds	r7, #20
    c8d0:	46bd      	mov	sp, r7
    c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8d6:	4770      	bx	lr

0000c8d8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c8d8:	b480      	push	{r7}
    c8da:	b087      	sub	sp, #28
    c8dc:	af00      	add	r7, sp, #0
    c8de:	60f8      	str	r0, [r7, #12]
    c8e0:	460b      	mov	r3, r1
    c8e2:	607a      	str	r2, [r7, #4]
    c8e4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c8e6:	2300      	movs	r3, #0
    c8e8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c8ea:	687b      	ldr	r3, [r7, #4]
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	dc0c      	bgt.n	c90a <padbuffer+0x32>
    {
        return i32Cnt;
    c8f0:	697b      	ldr	r3, [r7, #20]
    c8f2:	e010      	b.n	c916 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c8f4:	68fb      	ldr	r3, [r7, #12]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d004      	beq.n	c904 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c8fa:	68fb      	ldr	r3, [r7, #12]
    c8fc:	1c5a      	adds	r2, r3, #1
    c8fe:	60fa      	str	r2, [r7, #12]
    c900:	7afa      	ldrb	r2, [r7, #11]
    c902:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c904:	697b      	ldr	r3, [r7, #20]
    c906:	3301      	adds	r3, #1
    c908:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	1e5a      	subs	r2, r3, #1
    c90e:	607a      	str	r2, [r7, #4]
    c910:	2b00      	cmp	r3, #0
    c912:	d1ef      	bne.n	c8f4 <padbuffer+0x1c>
    }

    return i32Cnt;
    c914:	697b      	ldr	r3, [r7, #20]
}
    c916:	4618      	mov	r0, r3
    c918:	371c      	adds	r7, #28
    c91a:	46bd      	mov	sp, r7
    c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c920:	4770      	bx	lr
	...

0000c924 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c924:	b590      	push	{r4, r7, lr}
    c926:	b08f      	sub	sp, #60	; 0x3c
    c928:	af00      	add	r7, sp, #0
    c92a:	ed87 0a03 	vstr	s0, [r7, #12]
    c92e:	60b8      	str	r0, [r7, #8]
    c930:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c932:	68bb      	ldr	r3, [r7, #8]
    c934:	681b      	ldr	r3, [r3, #0]
    c936:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c93a:	2b03      	cmp	r3, #3
    c93c:	dc02      	bgt.n	c944 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c93e:	f06f 0302 	mvn.w	r3, #2
    c942:	e0e7      	b.n	cb14 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    c944:	edd7 7a03 	vldr	s15, [r7, #12]
    c948:	eef5 7a40 	vcmp.f32	s15, #0.0
    c94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c950:	d104      	bne.n	c95c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c952:	68bb      	ldr	r3, [r7, #8]
    c954:	4a71      	ldr	r2, [pc, #452]	; (cb1c <ftoa+0x1f8>)
    c956:	601a      	str	r2, [r3, #0]
        return 3;
    c958:	2303      	movs	r3, #3
    c95a:	e0db      	b.n	cb14 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    c95c:	68bb      	ldr	r3, [r7, #8]
    c95e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c960:	68fb      	ldr	r3, [r7, #12]
    c962:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c964:	693b      	ldr	r3, [r7, #16]
    c966:	15db      	asrs	r3, r3, #23
    c968:	b2db      	uxtb	r3, r3
    c96a:	3b7f      	subs	r3, #127	; 0x7f
    c96c:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c96e:	693b      	ldr	r3, [r7, #16]
    c970:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c978:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    c97a:	2300      	movs	r3, #0
    c97c:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    c97e:	2300      	movs	r3, #0
    c980:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    c982:	69fb      	ldr	r3, [r7, #28]
    c984:	2b1e      	cmp	r3, #30
    c986:	dd02      	ble.n	c98e <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c988:	f06f 0301 	mvn.w	r3, #1
    c98c:	e0c2      	b.n	cb14 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    c98e:	69fb      	ldr	r3, [r7, #28]
    c990:	f113 0f17 	cmn.w	r3, #23
    c994:	da02      	bge.n	c99c <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c99a:	e0bb      	b.n	cb14 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    c99c:	69fb      	ldr	r3, [r7, #28]
    c99e:	2b16      	cmp	r3, #22
    c9a0:	dd06      	ble.n	c9b0 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c9a2:	69fb      	ldr	r3, [r7, #28]
    c9a4:	3b17      	subs	r3, #23
    c9a6:	69ba      	ldr	r2, [r7, #24]
    c9a8:	fa02 f303 	lsl.w	r3, r2, r3
    c9ac:	637b      	str	r3, [r7, #52]	; 0x34
    c9ae:	e01a      	b.n	c9e6 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    c9b0:	69fb      	ldr	r3, [r7, #28]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	db0f      	blt.n	c9d6 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c9b6:	69fb      	ldr	r3, [r7, #28]
    c9b8:	f1c3 0317 	rsb	r3, r3, #23
    c9bc:	69ba      	ldr	r2, [r7, #24]
    c9be:	fa42 f303 	asr.w	r3, r2, r3
    c9c2:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c9c4:	69fb      	ldr	r3, [r7, #28]
    c9c6:	3301      	adds	r3, #1
    c9c8:	69ba      	ldr	r2, [r7, #24]
    c9ca:	fa02 f303 	lsl.w	r3, r2, r3
    c9ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c9d2:	633b      	str	r3, [r7, #48]	; 0x30
    c9d4:	e007      	b.n	c9e6 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c9d6:	69bb      	ldr	r3, [r7, #24]
    c9d8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c9dc:	69fb      	ldr	r3, [r7, #28]
    c9de:	43db      	mvns	r3, r3
    c9e0:	fa42 f303 	asr.w	r3, r2, r3
    c9e4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c9e6:	693b      	ldr	r3, [r7, #16]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	da04      	bge.n	c9f6 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    c9ec:	68bb      	ldr	r3, [r7, #8]
    c9ee:	1c5a      	adds	r2, r3, #1
    c9f0:	60ba      	str	r2, [r7, #8]
    c9f2:	222d      	movs	r2, #45	; 0x2d
    c9f4:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d105      	bne.n	ca08 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    c9fc:	68bb      	ldr	r3, [r7, #8]
    c9fe:	1c5a      	adds	r2, r3, #1
    ca00:	60ba      	str	r2, [r7, #8]
    ca02:	2230      	movs	r2, #48	; 0x30
    ca04:	701a      	strb	r2, [r3, #0]
    ca06:	e021      	b.n	ca4c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    ca08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	dd08      	ble.n	ca20 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca10:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca14:	68ba      	ldr	r2, [r7, #8]
    ca16:	4618      	mov	r0, r3
    ca18:	4621      	mov	r1, r4
    ca1a:	f7ff fe96 	bl	c74a <uint64_to_str>
    ca1e:	e011      	b.n	ca44 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    ca20:	68bb      	ldr	r3, [r7, #8]
    ca22:	1c5a      	adds	r2, r3, #1
    ca24:	60ba      	str	r2, [r7, #8]
    ca26:	222d      	movs	r2, #45	; 0x2d
    ca28:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca2c:	425b      	negs	r3, r3
    ca2e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca32:	68ba      	ldr	r2, [r7, #8]
    ca34:	4618      	mov	r0, r3
    ca36:	4621      	mov	r1, r4
    ca38:	f7ff fe87 	bl	c74a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca3c:	e002      	b.n	ca44 <ftoa+0x120>
        {
            pcBuf++;
    ca3e:	68bb      	ldr	r3, [r7, #8]
    ca40:	3301      	adds	r3, #1
    ca42:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ca44:	68bb      	ldr	r3, [r7, #8]
    ca46:	781b      	ldrb	r3, [r3, #0]
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d1f8      	bne.n	ca3e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ca4c:	68bb      	ldr	r3, [r7, #8]
    ca4e:	1c5a      	adds	r2, r3, #1
    ca50:	60ba      	str	r2, [r7, #8]
    ca52:	222e      	movs	r2, #46	; 0x2e
    ca54:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d105      	bne.n	ca68 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    ca5c:	68bb      	ldr	r3, [r7, #8]
    ca5e:	1c5a      	adds	r2, r3, #1
    ca60:	60ba      	str	r2, [r7, #8]
    ca62:	2230      	movs	r2, #48	; 0x30
    ca64:	701a      	strb	r2, [r3, #0]
    ca66:	e04f      	b.n	cb08 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ca68:	68ba      	ldr	r2, [r7, #8]
    ca6a:	6a3b      	ldr	r3, [r7, #32]
    ca6c:	1ad3      	subs	r3, r2, r3
    ca6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ca70:	1ad3      	subs	r3, r2, r3
    ca72:	3b01      	subs	r3, #1
    ca74:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ca76:	697a      	ldr	r2, [r7, #20]
    ca78:	687b      	ldr	r3, [r7, #4]
    ca7a:	4293      	cmp	r3, r2
    ca7c:	bfa8      	it	ge
    ca7e:	4613      	movge	r3, r2
    ca80:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    ca82:	2300      	movs	r3, #0
    ca84:	62bb      	str	r3, [r7, #40]	; 0x28
    ca86:	e015      	b.n	cab4 <ftoa+0x190>
        {
            i32FracPart *= 10;
    ca88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ca8a:	4613      	mov	r3, r2
    ca8c:	009b      	lsls	r3, r3, #2
    ca8e:	4413      	add	r3, r2
    ca90:	005b      	lsls	r3, r3, #1
    ca92:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca96:	161b      	asrs	r3, r3, #24
    ca98:	b2da      	uxtb	r2, r3
    ca9a:	68bb      	ldr	r3, [r7, #8]
    ca9c:	1c59      	adds	r1, r3, #1
    ca9e:	60b9      	str	r1, [r7, #8]
    caa0:	3230      	adds	r2, #48	; 0x30
    caa2:	b2d2      	uxtb	r2, r2
    caa4:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    caa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    caac:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cab0:	3301      	adds	r3, #1
    cab2:	62bb      	str	r3, [r7, #40]	; 0x28
    cab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cab6:	697b      	ldr	r3, [r7, #20]
    cab8:	429a      	cmp	r2, r3
    caba:	dbe5      	blt.n	ca88 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cabe:	4613      	mov	r3, r2
    cac0:	009b      	lsls	r3, r3, #2
    cac2:	4413      	add	r3, r2
    cac4:	005b      	lsls	r3, r3, #1
    cac6:	161b      	asrs	r3, r3, #24
    cac8:	2b04      	cmp	r3, #4
    caca:	dd1d      	ble.n	cb08 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cacc:	68bb      	ldr	r3, [r7, #8]
    cace:	3b01      	subs	r3, #1
    cad0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cad2:	e015      	b.n	cb00 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	2b2e      	cmp	r3, #46	; 0x2e
    cada:	d00e      	beq.n	cafa <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	2b39      	cmp	r3, #57	; 0x39
    cae2:	d103      	bne.n	caec <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cae6:	2230      	movs	r2, #48	; 0x30
    cae8:	701a      	strb	r2, [r3, #0]
    caea:	e006      	b.n	cafa <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	3301      	adds	r3, #1
    caf2:	b2da      	uxtb	r2, r3
    caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caf6:	701a      	strb	r2, [r3, #0]
                    break;
    caf8:	e006      	b.n	cb08 <ftoa+0x1e4>
                }
                pcBuftmp--;
    cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cafc:	3b01      	subs	r3, #1
    cafe:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb02:	6a3b      	ldr	r3, [r7, #32]
    cb04:	429a      	cmp	r2, r3
    cb06:	d2e5      	bcs.n	cad4 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb08:	68bb      	ldr	r3, [r7, #8]
    cb0a:	2200      	movs	r2, #0
    cb0c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb0e:	68ba      	ldr	r2, [r7, #8]
    cb10:	6a3b      	ldr	r3, [r7, #32]
    cb12:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb14:	4618      	mov	r0, r3
    cb16:	373c      	adds	r7, #60	; 0x3c
    cb18:	46bd      	mov	sp, r7
    cb1a:	bd90      	pop	{r4, r7, pc}
    cb1c:	00302e30 	.word	0x00302e30

0000cb20 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb20:	b590      	push	{r4, r7, lr}
    cb22:	b097      	sub	sp, #92	; 0x5c
    cb24:	af00      	add	r7, sp, #0
    cb26:	60f8      	str	r0, [r7, #12]
    cb28:	60b9      	str	r1, [r7, #8]
    cb2a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb2c:	2300      	movs	r3, #0
    cb2e:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb30:	2300      	movs	r3, #0
    cb32:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cb34:	e2e7      	b.n	d106 <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb36:	2306      	movs	r3, #6
    cb38:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    cb3a:	68bb      	ldr	r3, [r7, #8]
    cb3c:	781b      	ldrb	r3, [r3, #0]
    cb3e:	2b25      	cmp	r3, #37	; 0x25
    cb40:	d01f      	beq.n	cb82 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb42:	68fb      	ldr	r3, [r7, #12]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d015      	beq.n	cb74 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb48:	68bb      	ldr	r3, [r7, #8]
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	2b0a      	cmp	r3, #10
    cb4e:	d10b      	bne.n	cb68 <am_util_stdio_vsprintf+0x48>
    cb50:	4bb1      	ldr	r3, [pc, #708]	; (ce18 <am_util_stdio_vsprintf+0x2f8>)
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d007      	beq.n	cb68 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cb58:	68fb      	ldr	r3, [r7, #12]
    cb5a:	1c5a      	adds	r2, r3, #1
    cb5c:	60fa      	str	r2, [r7, #12]
    cb5e:	220d      	movs	r2, #13
    cb60:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb64:	3301      	adds	r3, #1
    cb66:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cb68:	68fb      	ldr	r3, [r7, #12]
    cb6a:	1c5a      	adds	r2, r3, #1
    cb6c:	60fa      	str	r2, [r7, #12]
    cb6e:	68ba      	ldr	r2, [r7, #8]
    cb70:	7812      	ldrb	r2, [r2, #0]
    cb72:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cb74:	68bb      	ldr	r3, [r7, #8]
    cb76:	3301      	adds	r3, #1
    cb78:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb7c:	3301      	adds	r3, #1
    cb7e:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    cb80:	e2c1      	b.n	d106 <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cb82:	68bb      	ldr	r3, [r7, #8]
    cb84:	3301      	adds	r3, #1
    cb86:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cb88:	2300      	movs	r3, #0
    cb8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    cb8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    cb92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cb96:	2320      	movs	r3, #32
    cb98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    cb9c:	68bb      	ldr	r3, [r7, #8]
    cb9e:	781b      	ldrb	r3, [r3, #0]
    cba0:	2b30      	cmp	r3, #48	; 0x30
    cba2:	d105      	bne.n	cbb0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cba4:	2330      	movs	r3, #48	; 0x30
    cba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    cbaa:	68bb      	ldr	r3, [r7, #8]
    cbac:	3301      	adds	r3, #1
    cbae:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cbb0:	f107 0314 	add.w	r3, r7, #20
    cbb4:	4619      	mov	r1, r3
    cbb6:	68b8      	ldr	r0, [r7, #8]
    cbb8:	f7ff fd81 	bl	c6be <decstr_to_int>
    cbbc:	4603      	mov	r3, r0
    cbbe:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    cbc0:	697b      	ldr	r3, [r7, #20]
    cbc2:	68ba      	ldr	r2, [r7, #8]
    cbc4:	4413      	add	r3, r2
    cbc6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cbc8:	68bb      	ldr	r3, [r7, #8]
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	2b73      	cmp	r3, #115	; 0x73
    cbce:	d005      	beq.n	cbdc <am_util_stdio_vsprintf+0xbc>
    cbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	da02      	bge.n	cbdc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cbd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cbd8:	425b      	negs	r3, r3
    cbda:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cbdc:	68bb      	ldr	r3, [r7, #8]
    cbde:	781b      	ldrb	r3, [r3, #0]
    cbe0:	2b2e      	cmp	r3, #46	; 0x2e
    cbe2:	d10e      	bne.n	cc02 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cbe4:	68bb      	ldr	r3, [r7, #8]
    cbe6:	3301      	adds	r3, #1
    cbe8:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cbea:	f107 0314 	add.w	r3, r7, #20
    cbee:	4619      	mov	r1, r3
    cbf0:	68b8      	ldr	r0, [r7, #8]
    cbf2:	f7ff fd64 	bl	c6be <decstr_to_int>
    cbf6:	4603      	mov	r3, r0
    cbf8:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    cbfa:	697b      	ldr	r3, [r7, #20]
    cbfc:	68ba      	ldr	r2, [r7, #8]
    cbfe:	4413      	add	r3, r2
    cc00:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc02:	68bb      	ldr	r3, [r7, #8]
    cc04:	781b      	ldrb	r3, [r3, #0]
    cc06:	2b6c      	cmp	r3, #108	; 0x6c
    cc08:	d10c      	bne.n	cc24 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cc0a:	68bb      	ldr	r3, [r7, #8]
    cc0c:	3301      	adds	r3, #1
    cc0e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc10:	68bb      	ldr	r3, [r7, #8]
    cc12:	781b      	ldrb	r3, [r3, #0]
    cc14:	2b6c      	cmp	r3, #108	; 0x6c
    cc16:	d105      	bne.n	cc24 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cc18:	68bb      	ldr	r3, [r7, #8]
    cc1a:	3301      	adds	r3, #1
    cc1c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cc1e:	2301      	movs	r3, #1
    cc20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cc24:	68bb      	ldr	r3, [r7, #8]
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	3b46      	subs	r3, #70	; 0x46
    cc2a:	2b32      	cmp	r3, #50	; 0x32
    cc2c:	f200 8258 	bhi.w	d0e0 <am_util_stdio_vsprintf+0x5c0>
    cc30:	a201      	add	r2, pc, #4	; (adr r2, cc38 <am_util_stdio_vsprintf+0x118>)
    cc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc36:	bf00      	nop
    cc38:	0000d067 	.word	0x0000d067
    cc3c:	0000d0e1 	.word	0x0000d0e1
    cc40:	0000d0e1 	.word	0x0000d0e1
    cc44:	0000d0e1 	.word	0x0000d0e1
    cc48:	0000d0e1 	.word	0x0000d0e1
    cc4c:	0000d0e1 	.word	0x0000d0e1
    cc50:	0000d0e1 	.word	0x0000d0e1
    cc54:	0000d0e1 	.word	0x0000d0e1
    cc58:	0000d0e1 	.word	0x0000d0e1
    cc5c:	0000d0e1 	.word	0x0000d0e1
    cc60:	0000d0e1 	.word	0x0000d0e1
    cc64:	0000d0e1 	.word	0x0000d0e1
    cc68:	0000d0e1 	.word	0x0000d0e1
    cc6c:	0000d0e1 	.word	0x0000d0e1
    cc70:	0000d0e1 	.word	0x0000d0e1
    cc74:	0000d0e1 	.word	0x0000d0e1
    cc78:	0000d0e1 	.word	0x0000d0e1
    cc7c:	0000d0e1 	.word	0x0000d0e1
    cc80:	0000cdfb 	.word	0x0000cdfb
    cc84:	0000d0e1 	.word	0x0000d0e1
    cc88:	0000d0e1 	.word	0x0000d0e1
    cc8c:	0000d0e1 	.word	0x0000d0e1
    cc90:	0000d0e1 	.word	0x0000d0e1
    cc94:	0000d0e1 	.word	0x0000d0e1
    cc98:	0000d0e1 	.word	0x0000d0e1
    cc9c:	0000d0e1 	.word	0x0000d0e1
    cca0:	0000d0e1 	.word	0x0000d0e1
    cca4:	0000d0e1 	.word	0x0000d0e1
    cca8:	0000d0e1 	.word	0x0000d0e1
    ccac:	0000cd05 	.word	0x0000cd05
    ccb0:	0000cf2d 	.word	0x0000cf2d
    ccb4:	0000d0e1 	.word	0x0000d0e1
    ccb8:	0000d067 	.word	0x0000d067
    ccbc:	0000d0e1 	.word	0x0000d0e1
    ccc0:	0000d0e1 	.word	0x0000d0e1
    ccc4:	0000cf2d 	.word	0x0000cf2d
    ccc8:	0000d0e1 	.word	0x0000d0e1
    cccc:	0000d0e1 	.word	0x0000d0e1
    ccd0:	0000d0e1 	.word	0x0000d0e1
    ccd4:	0000d0e1 	.word	0x0000d0e1
    ccd8:	0000d0e1 	.word	0x0000d0e1
    ccdc:	0000d0e1 	.word	0x0000d0e1
    cce0:	0000d0e1 	.word	0x0000d0e1
    cce4:	0000d0e1 	.word	0x0000d0e1
    cce8:	0000d0e1 	.word	0x0000d0e1
    ccec:	0000cd27 	.word	0x0000cd27
    ccf0:	0000d0e1 	.word	0x0000d0e1
    ccf4:	0000ce99 	.word	0x0000ce99
    ccf8:	0000d0e1 	.word	0x0000d0e1
    ccfc:	0000d0e1 	.word	0x0000d0e1
    cd00:	0000cdf5 	.word	0x0000cdf5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd04:	687b      	ldr	r3, [r7, #4]
    cd06:	1d1a      	adds	r2, r3, #4
    cd08:	607a      	str	r2, [r7, #4]
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d004      	beq.n	cd1e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd14:	68fb      	ldr	r3, [r7, #12]
    cd16:	1c5a      	adds	r2, r3, #1
    cd18:	60fa      	str	r2, [r7, #12]
    cd1a:	7ffa      	ldrb	r2, [r7, #31]
    cd1c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd20:	3301      	adds	r3, #1
    cd22:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    cd24:	e1ec      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd26:	687b      	ldr	r3, [r7, #4]
    cd28:	1d1a      	adds	r2, r3, #4
    cd2a:	607a      	str	r2, [r7, #4]
    cd2c:	681b      	ldr	r3, [r3, #0]
    cd2e:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd30:	6d78      	ldr	r0, [r7, #84]	; 0x54
    cd32:	f7ff fdb6 	bl	c8a2 <simple_strlen>
    cd36:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    cd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	dd2e      	ble.n	cd9c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd42:	429a      	cmp	r2, r3
    cd44:	d22a      	bcs.n	cd9c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd4a:	1ad3      	subs	r3, r2, r3
    cd4c:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    cd52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cd54:	4619      	mov	r1, r3
    cd56:	68f8      	ldr	r0, [r7, #12]
    cd58:	f7ff fdbe 	bl	c8d8 <padbuffer>
    cd5c:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	2b00      	cmp	r3, #0
    cd62:	d001      	beq.n	cd68 <am_util_stdio_vsprintf+0x248>
    cd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd66:	e000      	b.n	cd6a <am_util_stdio_vsprintf+0x24a>
    cd68:	2300      	movs	r3, #0
    cd6a:	68fa      	ldr	r2, [r7, #12]
    cd6c:	4413      	add	r3, r2
    cd6e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cd72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cd74:	4413      	add	r3, r2
    cd76:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    cd78:	2300      	movs	r3, #0
    cd7a:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cd7c:	e00e      	b.n	cd9c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cd7e:	68fb      	ldr	r3, [r7, #12]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d005      	beq.n	cd90 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cd84:	68fb      	ldr	r3, [r7, #12]
    cd86:	1c5a      	adds	r2, r3, #1
    cd88:	60fa      	str	r2, [r7, #12]
    cd8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    cd8c:	7812      	ldrb	r2, [r2, #0]
    cd8e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cd90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd92:	3301      	adds	r3, #1
    cd94:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    cd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd98:	3301      	adds	r3, #1
    cd9a:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    cd9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d1ec      	bne.n	cd7e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cda6:	2b00      	cmp	r3, #0
    cda8:	f000 81a7 	beq.w	d0fa <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    cdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cdae:	425b      	negs	r3, r3
    cdb0:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cdb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cdb6:	429a      	cmp	r2, r3
    cdb8:	f080 819f 	bcs.w	d0fa <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cdbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdc0:	1ad3      	subs	r3, r2, r3
    cdc2:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    cdc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cdca:	4619      	mov	r1, r3
    cdcc:	68f8      	ldr	r0, [r7, #12]
    cdce:	f7ff fd83 	bl	c8d8 <padbuffer>
    cdd2:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cdd4:	68fb      	ldr	r3, [r7, #12]
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	d001      	beq.n	cdde <am_util_stdio_vsprintf+0x2be>
    cdda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cddc:	e000      	b.n	cde0 <am_util_stdio_vsprintf+0x2c0>
    cdde:	2300      	movs	r3, #0
    cde0:	68fa      	ldr	r2, [r7, #12]
    cde2:	4413      	add	r3, r2
    cde4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cde8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cdea:	4413      	add	r3, r2
    cdec:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    cdee:	2300      	movs	r3, #0
    cdf0:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    cdf2:	e182      	b.n	d0fa <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    cdf4:	2301      	movs	r3, #1
    cdf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d00c      	beq.n	ce1c <am_util_stdio_vsprintf+0x2fc>
    ce02:	687b      	ldr	r3, [r7, #4]
    ce04:	3307      	adds	r3, #7
    ce06:	f023 0307 	bic.w	r3, r3, #7
    ce0a:	f103 0208 	add.w	r2, r3, #8
    ce0e:	607a      	str	r2, [r7, #4]
    ce10:	e9d3 3400 	ldrd	r3, r4, [r3]
    ce14:	e008      	b.n	ce28 <am_util_stdio_vsprintf+0x308>
    ce16:	bf00      	nop
    ce18:	1000c170 	.word	0x1000c170
                                      va_arg(pArgs, uint32_t);
    ce1c:	687b      	ldr	r3, [r7, #4]
    ce1e:	1d1a      	adds	r2, r3, #4
    ce20:	607a      	str	r2, [r7, #4]
    ce22:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce24:	f04f 0400 	mov.w	r4, #0
    ce28:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    ce2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d01e      	beq.n	ce70 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    ce36:	f7ff fc1a 	bl	c66e <ndigits_in_hex>
    ce3a:	4602      	mov	r2, r0
    ce3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce3e:	1a9b      	subs	r3, r3, r2
    ce40:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    ce46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ce48:	4619      	mov	r1, r3
    ce4a:	68f8      	ldr	r0, [r7, #12]
    ce4c:	f7ff fd44 	bl	c8d8 <padbuffer>
    ce50:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ce52:	68fb      	ldr	r3, [r7, #12]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d001      	beq.n	ce5c <am_util_stdio_vsprintf+0x33c>
    ce58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce5a:	e000      	b.n	ce5e <am_util_stdio_vsprintf+0x33e>
    ce5c:	2300      	movs	r3, #0
    ce5e:	68fa      	ldr	r2, [r7, #12]
    ce60:	4413      	add	r3, r2
    ce62:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    ce64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ce68:	4413      	add	r3, r2
    ce6a:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    ce6c:	2300      	movs	r3, #0
    ce6e:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ce70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    ce74:	68fa      	ldr	r2, [r7, #12]
    ce76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    ce7a:	f7ff fcae 	bl	c7da <uint64_to_hexstr>
    ce7e:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    ce80:	68fb      	ldr	r3, [r7, #12]
    ce82:	2b00      	cmp	r3, #0
    ce84:	d003      	beq.n	ce8e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ce86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce88:	68fa      	ldr	r2, [r7, #12]
    ce8a:	4413      	add	r3, r2
    ce8c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    ce8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ce92:	4413      	add	r3, r2
    ce94:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    ce96:	e133      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d009      	beq.n	ceb4 <am_util_stdio_vsprintf+0x394>
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	3307      	adds	r3, #7
    cea4:	f023 0307 	bic.w	r3, r3, #7
    cea8:	f103 0208 	add.w	r2, r3, #8
    ceac:	607a      	str	r2, [r7, #4]
    ceae:	e9d3 3400 	ldrd	r3, r4, [r3]
    ceb2:	e005      	b.n	cec0 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	1d1a      	adds	r2, r3, #4
    ceb8:	607a      	str	r2, [r7, #4]
    ceba:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cebc:	f04f 0400 	mov.w	r4, #0
    cec0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    cec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cec6:	2b00      	cmp	r3, #0
    cec8:	d01e      	beq.n	cf08 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    ceca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    cece:	f7ff fb90 	bl	c5f2 <ndigits_in_u64>
    ced2:	4602      	mov	r2, r0
    ced4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ced6:	1a9b      	subs	r3, r3, r2
    ced8:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ceda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    cede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cee0:	4619      	mov	r1, r3
    cee2:	68f8      	ldr	r0, [r7, #12]
    cee4:	f7ff fcf8 	bl	c8d8 <padbuffer>
    cee8:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ceea:	68fb      	ldr	r3, [r7, #12]
    ceec:	2b00      	cmp	r3, #0
    ceee:	d001      	beq.n	cef4 <am_util_stdio_vsprintf+0x3d4>
    cef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cef2:	e000      	b.n	cef6 <am_util_stdio_vsprintf+0x3d6>
    cef4:	2300      	movs	r3, #0
    cef6:	68fa      	ldr	r2, [r7, #12]
    cef8:	4413      	add	r3, r2
    cefa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cefe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf00:	4413      	add	r3, r2
    cf02:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    cf04:	2300      	movs	r3, #0
    cf06:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf08:	68fa      	ldr	r2, [r7, #12]
    cf0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    cf0e:	f7ff fc1c 	bl	c74a <uint64_to_str>
    cf12:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    cf14:	68fb      	ldr	r3, [r7, #12]
    cf16:	2b00      	cmp	r3, #0
    cf18:	d003      	beq.n	cf22 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf1c:	68fa      	ldr	r2, [r7, #12]
    cf1e:	4413      	add	r3, r2
    cf20:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cf26:	4413      	add	r3, r2
    cf28:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    cf2a:	e0e9      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    cf30:	2b00      	cmp	r3, #0
    cf32:	d009      	beq.n	cf48 <am_util_stdio_vsprintf+0x428>
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	3307      	adds	r3, #7
    cf38:	f023 0307 	bic.w	r3, r3, #7
    cf3c:	f103 0208 	add.w	r2, r3, #8
    cf40:	607a      	str	r2, [r7, #4]
    cf42:	e9d3 3400 	ldrd	r3, r4, [r3]
    cf46:	e005      	b.n	cf54 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	1d1a      	adds	r2, r3, #4
    cf4c:	607a      	str	r2, [r7, #4]
    cf4e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf50:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cf54:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cf58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	f174 0300 	sbcs.w	r3, r4, #0
    cf62:	da0a      	bge.n	cf7a <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cf64:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    cf68:	425b      	negs	r3, r3
    cf6a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cf6e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    cf72:	2301      	movs	r3, #1
    cf74:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    cf78:	e006      	b.n	cf88 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    cf7a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    cf7e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    cf82:	2300      	movs	r3, #0
    cf84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    cf88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d04a      	beq.n	d024 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cf8e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    cf92:	4618      	mov	r0, r3
    cf94:	4621      	mov	r1, r4
    cf96:	f7ff fb4d 	bl	c634 <ndigits_in_i64>
    cf9a:	4602      	mov	r2, r0
    cf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cf9e:	1a9b      	subs	r3, r3, r2
    cfa0:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    cfa2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    cfa6:	2b00      	cmp	r3, #0
    cfa8:	d011      	beq.n	cfce <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    cfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cfac:	3b01      	subs	r3, #1
    cfae:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cfb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    cfb4:	2b30      	cmp	r3, #48	; 0x30
    cfb6:	d10a      	bne.n	cfce <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cfb8:	68fb      	ldr	r3, [r7, #12]
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d004      	beq.n	cfc8 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	1c5a      	adds	r2, r3, #1
    cfc2:	60fa      	str	r2, [r7, #12]
    cfc4:	222d      	movs	r2, #45	; 0x2d
    cfc6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cfca:	3301      	adds	r3, #1
    cfcc:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    cfd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    cfd4:	4619      	mov	r1, r3
    cfd6:	68f8      	ldr	r0, [r7, #12]
    cfd8:	f7ff fc7e 	bl	c8d8 <padbuffer>
    cfdc:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cfde:	68fb      	ldr	r3, [r7, #12]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d001      	beq.n	cfe8 <am_util_stdio_vsprintf+0x4c8>
    cfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cfe6:	e000      	b.n	cfea <am_util_stdio_vsprintf+0x4ca>
    cfe8:	2300      	movs	r3, #0
    cfea:	68fa      	ldr	r2, [r7, #12]
    cfec:	4413      	add	r3, r2
    cfee:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    cff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    cff4:	4413      	add	r3, r2
    cff6:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    cff8:	2300      	movs	r3, #0
    cffa:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cffc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    d000:	2b00      	cmp	r3, #0
    d002:	d01e      	beq.n	d042 <am_util_stdio_vsprintf+0x522>
    d004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    d008:	2b20      	cmp	r3, #32
    d00a:	d11a      	bne.n	d042 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d00c:	68fb      	ldr	r3, [r7, #12]
    d00e:	2b00      	cmp	r3, #0
    d010:	d004      	beq.n	d01c <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    d012:	68fb      	ldr	r3, [r7, #12]
    d014:	1c5a      	adds	r2, r3, #1
    d016:	60fa      	str	r2, [r7, #12]
    d018:	222d      	movs	r2, #45	; 0x2d
    d01a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d01e:	3301      	adds	r3, #1
    d020:	647b      	str	r3, [r7, #68]	; 0x44
    d022:	e00e      	b.n	d042 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    d024:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    d028:	2b00      	cmp	r3, #0
    d02a:	d00a      	beq.n	d042 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    d02c:	68fb      	ldr	r3, [r7, #12]
    d02e:	2b00      	cmp	r3, #0
    d030:	d004      	beq.n	d03c <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	1c5a      	adds	r2, r3, #1
    d036:	60fa      	str	r2, [r7, #12]
    d038:	222d      	movs	r2, #45	; 0x2d
    d03a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d03e:	3301      	adds	r3, #1
    d040:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d042:	68fa      	ldr	r2, [r7, #12]
    d044:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    d048:	f7ff fb7f 	bl	c74a <uint64_to_str>
    d04c:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	2b00      	cmp	r3, #0
    d052:	d003      	beq.n	d05c <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    d054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d056:	68fa      	ldr	r2, [r7, #12]
    d058:	4413      	add	r3, r2
    d05a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d05e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d060:	4413      	add	r3, r2
    d062:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    d064:	e04c      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    d066:	68fb      	ldr	r3, [r7, #12]
    d068:	2b00      	cmp	r3, #0
    d06a:	d048      	beq.n	d0fe <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    d06c:	687b      	ldr	r3, [r7, #4]
    d06e:	3307      	adds	r3, #7
    d070:	f023 0307 	bic.w	r3, r3, #7
    d074:	f103 0208 	add.w	r2, r3, #8
    d078:	607a      	str	r2, [r7, #4]
    d07a:	e9d3 3400 	ldrd	r3, r4, [r3]
    d07e:	4618      	mov	r0, r3
    d080:	4621      	mov	r1, r4
    d082:	f7ff f83d 	bl	c100 <__aeabi_d2f>
    d086:	4603      	mov	r3, r0
    d088:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d08a:	68fb      	ldr	r3, [r7, #12]
    d08c:	2214      	movs	r2, #20
    d08e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d092:	68f8      	ldr	r0, [r7, #12]
    d094:	ed97 0a06 	vldr	s0, [r7, #24]
    d098:	f7ff fc44 	bl	c924 <ftoa>
    d09c:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    d09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	da14      	bge.n	d0ce <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d0aa:	d102      	bne.n	d0b2 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d0ac:	4b1e      	ldr	r3, [pc, #120]	; (d128 <am_util_stdio_vsprintf+0x608>)
    d0ae:	633b      	str	r3, [r7, #48]	; 0x30
    d0b0:	e008      	b.n	d0c4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0b4:	f113 0f02 	cmn.w	r3, #2
    d0b8:	d102      	bne.n	d0c0 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d0ba:	4b1c      	ldr	r3, [pc, #112]	; (d12c <am_util_stdio_vsprintf+0x60c>)
    d0bc:	633b      	str	r3, [r7, #48]	; 0x30
    d0be:	e001      	b.n	d0c4 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d0c0:	4b1b      	ldr	r3, [pc, #108]	; (d130 <am_util_stdio_vsprintf+0x610>)
    d0c2:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d0c4:	68fb      	ldr	r3, [r7, #12]
    d0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d0c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d0ca:	2303      	movs	r3, #3
    d0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d0d2:	4413      	add	r3, r2
    d0d4:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    d0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0d8:	68fa      	ldr	r2, [r7, #12]
    d0da:	4413      	add	r3, r2
    d0dc:	60fb      	str	r3, [r7, #12]
                }
                break;
    d0de:	e00e      	b.n	d0fe <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d0e0:	68fb      	ldr	r3, [r7, #12]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d005      	beq.n	d0f2 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    d0e6:	68fb      	ldr	r3, [r7, #12]
    d0e8:	1c5a      	adds	r2, r3, #1
    d0ea:	60fa      	str	r2, [r7, #12]
    d0ec:	68ba      	ldr	r2, [r7, #8]
    d0ee:	7812      	ldrb	r2, [r2, #0]
    d0f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d0f4:	3301      	adds	r3, #1
    d0f6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    d0f8:	e002      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>
                break;
    d0fa:	bf00      	nop
    d0fc:	e000      	b.n	d100 <am_util_stdio_vsprintf+0x5e0>
                break;
    d0fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d100:	68bb      	ldr	r3, [r7, #8]
    d102:	3301      	adds	r3, #1
    d104:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d106:	68bb      	ldr	r3, [r7, #8]
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	2b00      	cmp	r3, #0
    d10c:	f47f ad13 	bne.w	cb36 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d110:	68fb      	ldr	r3, [r7, #12]
    d112:	2b00      	cmp	r3, #0
    d114:	d002      	beq.n	d11c <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    d116:	68fb      	ldr	r3, [r7, #12]
    d118:	2200      	movs	r2, #0
    d11a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    d11e:	4618      	mov	r0, r3
    d120:	375c      	adds	r7, #92	; 0x5c
    d122:	46bd      	mov	sp, r7
    d124:	bd90      	pop	{r4, r7, pc}
    d126:	bf00      	nop
    d128:	00302e30 	.word	0x00302e30
    d12c:	00232e23 	.word	0x00232e23
    d130:	003f2e3f 	.word	0x003f2e3f

0000d134 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d134:	b40f      	push	{r0, r1, r2, r3}
    d136:	b580      	push	{r7, lr}
    d138:	b082      	sub	sp, #8
    d13a:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d13c:	4b0d      	ldr	r3, [pc, #52]	; (d174 <am_util_stdio_printf+0x40>)
    d13e:	681b      	ldr	r3, [r3, #0]
    d140:	2b00      	cmp	r3, #0
    d142:	d101      	bne.n	d148 <am_util_stdio_printf+0x14>
    {
        return 0;
    d144:	2300      	movs	r3, #0
    d146:	e00d      	b.n	d164 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d148:	f107 0314 	add.w	r3, r7, #20
    d14c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d14e:	683a      	ldr	r2, [r7, #0]
    d150:	6939      	ldr	r1, [r7, #16]
    d152:	4809      	ldr	r0, [pc, #36]	; (d178 <am_util_stdio_printf+0x44>)
    d154:	f7ff fce4 	bl	cb20 <am_util_stdio_vsprintf>
    d158:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d15a:	4b06      	ldr	r3, [pc, #24]	; (d174 <am_util_stdio_printf+0x40>)
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	4806      	ldr	r0, [pc, #24]	; (d178 <am_util_stdio_printf+0x44>)
    d160:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d162:	687b      	ldr	r3, [r7, #4]
}
    d164:	4618      	mov	r0, r3
    d166:	3708      	adds	r7, #8
    d168:	46bd      	mov	sp, r7
    d16a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d16e:	b004      	add	sp, #16
    d170:	4770      	bx	lr
    d172:	bf00      	nop
    d174:	1000c984 	.word	0x1000c984
    d178:	1000c070 	.word	0x1000c070

0000d17c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d17c:	b580      	push	{r7, lr}
    d17e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d180:	4802      	ldr	r0, [pc, #8]	; (d18c <am_util_stdio_terminal_clear+0x10>)
    d182:	f7ff ffd7 	bl	d134 <am_util_stdio_printf>
}
    d186:	bf00      	nop
    d188:	bd80      	pop	{r7, pc}
    d18a:	bf00      	nop
    d18c:	0000eb64 	.word	0x0000eb64

0000d190 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    d190:	b580      	push	{r7, lr}
    d192:	b082      	sub	sp, #8
    d194:	af00      	add	r7, sp, #0
    d196:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    d198:	687b      	ldr	r3, [r7, #4]
    d19a:	2b00      	cmp	r3, #0
    d19c:	d03d      	beq.n	d21a <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    d1a2:	2b31      	cmp	r3, #49	; 0x31
    d1a4:	d839      	bhi.n	d21a <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    d1a6:	687b      	ldr	r3, [r7, #4]
    d1a8:	685b      	ldr	r3, [r3, #4]
    d1aa:	f003 0302 	and.w	r3, r3, #2
    d1ae:	2b00      	cmp	r3, #0
    d1b0:	d019      	beq.n	d1e6 <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d1b2:	687b      	ldr	r3, [r7, #4]
    d1b4:	681a      	ldr	r2, [r3, #0]
    d1b6:	4b1b      	ldr	r3, [pc, #108]	; (d224 <am_devices_led_init+0x94>)
    d1b8:	6819      	ldr	r1, [r3, #0]
    d1ba:	4610      	mov	r0, r2
    d1bc:	f000 fc26 	bl	da0c <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d1c0:	687b      	ldr	r3, [r7, #4]
    d1c2:	681b      	ldr	r3, [r3, #0]
    d1c4:	2103      	movs	r1, #3
    d1c6:	4618      	mov	r0, r3
    d1c8:	f000 fd60 	bl	dc8c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d1cc:	687b      	ldr	r3, [r7, #4]
    d1ce:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d1d0:	687b      	ldr	r3, [r7, #4]
    d1d2:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d1d4:	b2db      	uxtb	r3, r3
    d1d6:	f003 0301 	and.w	r3, r3, #1
    d1da:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d1dc:	4619      	mov	r1, r3
    d1de:	4610      	mov	r0, r2
    d1e0:	f000 fd54 	bl	dc8c <am_hal_gpio_state_write>
    d1e4:	e01a      	b.n	d21c <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d1e6:	687b      	ldr	r3, [r7, #4]
    d1e8:	681a      	ldr	r2, [r3, #0]
    d1ea:	4b0f      	ldr	r3, [pc, #60]	; (d228 <am_devices_led_init+0x98>)
    d1ec:	6819      	ldr	r1, [r3, #0]
    d1ee:	4610      	mov	r0, r2
    d1f0:	f000 fc0c 	bl	da0c <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	681b      	ldr	r3, [r3, #0]
    d1f8:	2103      	movs	r1, #3
    d1fa:	4618      	mov	r0, r3
    d1fc:	f000 fd46 	bl	dc8c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d200:	687b      	ldr	r3, [r7, #4]
    d202:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d204:	687b      	ldr	r3, [r7, #4]
    d206:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d208:	b2db      	uxtb	r3, r3
    d20a:	f003 0301 	and.w	r3, r3, #1
    d20e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d210:	4619      	mov	r1, r3
    d212:	4610      	mov	r0, r2
    d214:	f000 fd3a 	bl	dc8c <am_hal_gpio_state_write>
    d218:	e000      	b.n	d21c <am_devices_led_init+0x8c>
        return;
    d21a:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    d21c:	3708      	adds	r7, #8
    d21e:	46bd      	mov	sp, r7
    d220:	bd80      	pop	{r7, pc}
    d222:	bf00      	nop
    d224:	0000ece4 	.word	0x0000ece4
    d228:	0000ece8 	.word	0x0000ece8

0000d22c <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    d22c:	b580      	push	{r7, lr}
    d22e:	b084      	sub	sp, #16
    d230:	af00      	add	r7, sp, #0
    d232:	6078      	str	r0, [r7, #4]
    d234:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    d236:	687b      	ldr	r3, [r7, #4]
    d238:	2b00      	cmp	r3, #0
    d23a:	d014      	beq.n	d266 <am_devices_led_array_init+0x3a>
    d23c:	683b      	ldr	r3, [r7, #0]
    d23e:	2b1f      	cmp	r3, #31
    d240:	d811      	bhi.n	d266 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    d242:	2300      	movs	r3, #0
    d244:	60fb      	str	r3, [r7, #12]
    d246:	e009      	b.n	d25c <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    d248:	68fb      	ldr	r3, [r7, #12]
    d24a:	00db      	lsls	r3, r3, #3
    d24c:	687a      	ldr	r2, [r7, #4]
    d24e:	4413      	add	r3, r2
    d250:	4618      	mov	r0, r3
    d252:	f7ff ff9d 	bl	d190 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    d256:	68fb      	ldr	r3, [r7, #12]
    d258:	3301      	adds	r3, #1
    d25a:	60fb      	str	r3, [r7, #12]
    d25c:	68fa      	ldr	r2, [r7, #12]
    d25e:	683b      	ldr	r3, [r7, #0]
    d260:	429a      	cmp	r2, r3
    d262:	d3f1      	bcc.n	d248 <am_devices_led_array_init+0x1c>
    d264:	e000      	b.n	d268 <am_devices_led_array_init+0x3c>
        return;
    d266:	bf00      	nop
    }
}
    d268:	3710      	adds	r7, #16
    d26a:	46bd      	mov	sp, r7
    d26c:	bd80      	pop	{r7, pc}

0000d26e <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d26e:	b580      	push	{r7, lr}
    d270:	b082      	sub	sp, #8
    d272:	af00      	add	r7, sp, #0
    d274:	6078      	str	r0, [r7, #4]
    d276:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	2b00      	cmp	r3, #0
    d27c:	d02e      	beq.n	d2dc <am_devices_led_on+0x6e>
    d27e:	683b      	ldr	r3, [r7, #0]
    d280:	2b1e      	cmp	r3, #30
    d282:	d82b      	bhi.n	d2dc <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d284:	683b      	ldr	r3, [r7, #0]
    d286:	00db      	lsls	r3, r3, #3
    d288:	687a      	ldr	r2, [r7, #4]
    d28a:	4413      	add	r3, r2
    d28c:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d28e:	2b31      	cmp	r3, #49	; 0x31
    d290:	d824      	bhi.n	d2dc <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d292:	683b      	ldr	r3, [r7, #0]
    d294:	00db      	lsls	r3, r3, #3
    d296:	687a      	ldr	r2, [r7, #4]
    d298:	4413      	add	r3, r2
    d29a:	685b      	ldr	r3, [r3, #4]
    d29c:	f003 0302 	and.w	r3, r3, #2
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d011      	beq.n	d2c8 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2a4:	683b      	ldr	r3, [r7, #0]
    d2a6:	00db      	lsls	r3, r3, #3
    d2a8:	687a      	ldr	r2, [r7, #4]
    d2aa:	4413      	add	r3, r2
    d2ac:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d2ae:	683b      	ldr	r3, [r7, #0]
    d2b0:	00db      	lsls	r3, r3, #3
    d2b2:	687a      	ldr	r2, [r7, #4]
    d2b4:	4413      	add	r3, r2
    d2b6:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d2b8:	b2db      	uxtb	r3, r3
    d2ba:	f003 0301 	and.w	r3, r3, #1
    d2be:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2c0:	4619      	mov	r1, r3
    d2c2:	f000 fce3 	bl	dc8c <am_hal_gpio_state_write>
    d2c6:	e00a      	b.n	d2de <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2c8:	683b      	ldr	r3, [r7, #0]
    d2ca:	00db      	lsls	r3, r3, #3
    d2cc:	687a      	ldr	r2, [r7, #4]
    d2ce:	4413      	add	r3, r2
    d2d0:	681b      	ldr	r3, [r3, #0]
    d2d2:	2104      	movs	r1, #4
    d2d4:	4618      	mov	r0, r3
    d2d6:	f000 fcd9 	bl	dc8c <am_hal_gpio_state_write>
    d2da:	e000      	b.n	d2de <am_devices_led_on+0x70>
        return;
    d2dc:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    d2de:	3708      	adds	r7, #8
    d2e0:	46bd      	mov	sp, r7
    d2e2:	bd80      	pop	{r7, pc}

0000d2e4 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d2e4:	b580      	push	{r7, lr}
    d2e6:	b082      	sub	sp, #8
    d2e8:	af00      	add	r7, sp, #0
    d2ea:	6078      	str	r0, [r7, #4]
    d2ec:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    d2ee:	687b      	ldr	r3, [r7, #4]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d031      	beq.n	d358 <am_devices_led_off+0x74>
    d2f4:	683b      	ldr	r3, [r7, #0]
    d2f6:	2b1e      	cmp	r3, #30
    d2f8:	d82e      	bhi.n	d358 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d2fa:	683b      	ldr	r3, [r7, #0]
    d2fc:	00db      	lsls	r3, r3, #3
    d2fe:	687a      	ldr	r2, [r7, #4]
    d300:	4413      	add	r3, r2
    d302:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d304:	2b31      	cmp	r3, #49	; 0x31
    d306:	d827      	bhi.n	d358 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d308:	683b      	ldr	r3, [r7, #0]
    d30a:	00db      	lsls	r3, r3, #3
    d30c:	687a      	ldr	r2, [r7, #4]
    d30e:	4413      	add	r3, r2
    d310:	685b      	ldr	r3, [r3, #4]
    d312:	f003 0302 	and.w	r3, r3, #2
    d316:	2b00      	cmp	r3, #0
    d318:	d014      	beq.n	d344 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d31a:	683b      	ldr	r3, [r7, #0]
    d31c:	00db      	lsls	r3, r3, #3
    d31e:	687a      	ldr	r2, [r7, #4]
    d320:	4413      	add	r3, r2
    d322:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d324:	683b      	ldr	r3, [r7, #0]
    d326:	00db      	lsls	r3, r3, #3
    d328:	687a      	ldr	r2, [r7, #4]
    d32a:	4413      	add	r3, r2
    d32c:	685b      	ldr	r3, [r3, #4]
    d32e:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d332:	2b00      	cmp	r3, #0
    d334:	bf0c      	ite	eq
    d336:	2301      	moveq	r3, #1
    d338:	2300      	movne	r3, #0
    d33a:	b2db      	uxtb	r3, r3
    d33c:	4619      	mov	r1, r3
    d33e:	f000 fca5 	bl	dc8c <am_hal_gpio_state_write>
    d342:	e00a      	b.n	d35a <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d344:	683b      	ldr	r3, [r7, #0]
    d346:	00db      	lsls	r3, r3, #3
    d348:	687a      	ldr	r2, [r7, #4]
    d34a:	4413      	add	r3, r2
    d34c:	681b      	ldr	r3, [r3, #0]
    d34e:	2103      	movs	r1, #3
    d350:	4618      	mov	r0, r3
    d352:	f000 fc9b 	bl	dc8c <am_hal_gpio_state_write>
    d356:	e000      	b.n	d35a <am_devices_led_off+0x76>
        return;
    d358:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    d35a:	3708      	adds	r7, #8
    d35c:	46bd      	mov	sp, r7
    d35e:	bd80      	pop	{r7, pc}

0000d360 <am_devices_led_array_out>:
//
//*****************************************************************************
void
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
    d360:	b580      	push	{r7, lr}
    d362:	b086      	sub	sp, #24
    d364:	af00      	add	r7, sp, #0
    d366:	60f8      	str	r0, [r7, #12]
    d368:	60b9      	str	r1, [r7, #8]
    d36a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
    d36c:	2300      	movs	r3, #0
    d36e:	617b      	str	r3, [r7, #20]
    d370:	e014      	b.n	d39c <am_devices_led_array_out+0x3c>
    {
        if ( ui32Value & (1 << i) )
    d372:	2201      	movs	r2, #1
    d374:	697b      	ldr	r3, [r7, #20]
    d376:	fa02 f303 	lsl.w	r3, r2, r3
    d37a:	461a      	mov	r2, r3
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	4013      	ands	r3, r2
    d380:	2b00      	cmp	r3, #0
    d382:	d004      	beq.n	d38e <am_devices_led_array_out+0x2e>
        {
            am_devices_led_on(psLEDs, i);
    d384:	6979      	ldr	r1, [r7, #20]
    d386:	68f8      	ldr	r0, [r7, #12]
    d388:	f7ff ff71 	bl	d26e <am_devices_led_on>
    d38c:	e003      	b.n	d396 <am_devices_led_array_out+0x36>
        }
        else
        {
            am_devices_led_off(psLEDs, i);
    d38e:	6979      	ldr	r1, [r7, #20]
    d390:	68f8      	ldr	r0, [r7, #12]
    d392:	f7ff ffa7 	bl	d2e4 <am_devices_led_off>
    for ( i = 0; i < ui32NumLEDs; i++ )
    d396:	697b      	ldr	r3, [r7, #20]
    d398:	3301      	adds	r3, #1
    d39a:	617b      	str	r3, [r7, #20]
    d39c:	697a      	ldr	r2, [r7, #20]
    d39e:	68bb      	ldr	r3, [r7, #8]
    d3a0:	429a      	cmp	r2, r3
    d3a2:	d3e6      	bcc.n	d372 <am_devices_led_array_out+0x12>
        }
    }
}
    d3a4:	bf00      	nop
    d3a6:	3718      	adds	r7, #24
    d3a8:	46bd      	mov	sp, r7
    d3aa:	bd80      	pop	{r7, pc}

0000d3ac <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d3ac:	4811      	ldr	r0, [pc, #68]	; (d3f4 <zero_loop+0x12>)
    d3ae:	4912      	ldr	r1, [pc, #72]	; (d3f8 <zero_loop+0x16>)
    d3b0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d3b2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d3b6:	4811      	ldr	r0, [pc, #68]	; (d3fc <zero_loop+0x1a>)
    d3b8:	6801      	ldr	r1, [r0, #0]
    d3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d3be:	6001      	str	r1, [r0, #0]
    d3c0:	f3bf 8f4f 	dsb	sy
    d3c4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d3c8:	480d      	ldr	r0, [pc, #52]	; (d400 <zero_loop+0x1e>)
    d3ca:	490e      	ldr	r1, [pc, #56]	; (d404 <zero_loop+0x22>)
    d3cc:	4a0e      	ldr	r2, [pc, #56]	; (d408 <zero_loop+0x26>)

0000d3ce <copy_loop>:
    d3ce:	f850 3b04 	ldr.w	r3, [r0], #4
    d3d2:	f841 3b04 	str.w	r3, [r1], #4
    d3d6:	4291      	cmp	r1, r2
    d3d8:	dbf9      	blt.n	d3ce <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d3da:	480c      	ldr	r0, [pc, #48]	; (d40c <zero_loop+0x2a>)
    d3dc:	490c      	ldr	r1, [pc, #48]	; (d410 <zero_loop+0x2e>)
    d3de:	f04f 0200 	mov.w	r2, #0

0000d3e2 <zero_loop>:
    d3e2:	4288      	cmp	r0, r1
    d3e4:	bfb8      	it	lt
    d3e6:	f840 2b04 	strlt.w	r2, [r0], #4
    d3ea:	dbfa      	blt.n	d3e2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d3ec:	f7fe ff30 	bl	c250 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d3f0:	be00      	bkpt	0x0000
}
    d3f2:	bf00      	nop
    d3f4:	e000ed08 	.word	0xe000ed08
    d3f8:	0000c000 	.word	0x0000c000
    d3fc:	e000ed88 	.word	0xe000ed88
    d400:	0000ee54 	.word	0x0000ee54
    d404:	1000c000 	.word	0x1000c000
    d408:	1000c06c 	.word	0x1000c06c
    d40c:	1000c06c 	.word	0x1000c06c
    d410:	1000ca50 	.word	0x1000ca50

0000d414 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d414:	b480      	push	{r7}
    d416:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d418:	e7fe      	b.n	d418 <NMI_Handler+0x4>

0000d41a <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d41a:	b480      	push	{r7}
    d41c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d41e:	e7fe      	b.n	d41e <DebugMon_Handler+0x4>

0000d420 <am_bsp_uart_string_print>:
    d420:	b510      	push	{r4, lr}
    d422:	b086      	sub	sp, #24
    d424:	7803      	ldrb	r3, [r0, #0]
    d426:	2400      	movs	r4, #0
    d428:	9400      	str	r4, [sp, #0]
    d42a:	b1bb      	cbz	r3, d45c <am_bsp_uart_string_print+0x3c>
    d42c:	4603      	mov	r3, r0
    d42e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d432:	3401      	adds	r4, #1
    d434:	2a00      	cmp	r2, #0
    d436:	d1fa      	bne.n	d42e <am_bsp_uart_string_print+0xe>
    d438:	4b0a      	ldr	r3, [pc, #40]	; (d464 <am_bsp_uart_string_print+0x44>)
    d43a:	9002      	str	r0, [sp, #8]
    d43c:	2200      	movs	r2, #0
    d43e:	6818      	ldr	r0, [r3, #0]
    d440:	9403      	str	r4, [sp, #12]
    d442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d446:	a901      	add	r1, sp, #4
    d448:	9304      	str	r3, [sp, #16]
    d44a:	9201      	str	r2, [sp, #4]
    d44c:	f8cd d014 	str.w	sp, [sp, #20]
    d450:	f001 f880 	bl	e554 <am_hal_uart_transfer>
    d454:	9b00      	ldr	r3, [sp, #0]
    d456:	42a3      	cmp	r3, r4
    d458:	d002      	beq.n	d460 <am_bsp_uart_string_print+0x40>
    d45a:	e7fe      	b.n	d45a <am_bsp_uart_string_print+0x3a>
    d45c:	461c      	mov	r4, r3
    d45e:	e7eb      	b.n	d438 <am_bsp_uart_string_print+0x18>
    d460:	b006      	add	sp, #24
    d462:	bd10      	pop	{r4, pc}
    d464:	1000c178 	.word	0x1000c178

0000d468 <am_bsp_low_power_init>:
    d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d46a:	f000 fc83 	bl	dd74 <am_hal_itm_disable>
    d46e:	2000      	movs	r0, #0
    d470:	f7fe ffd0 	bl	c414 <am_util_stdio_printf_init>
    d474:	4b12      	ldr	r3, [pc, #72]	; (d4c0 <am_bsp_low_power_init+0x58>)
    d476:	4f13      	ldr	r7, [pc, #76]	; (d4c4 <am_bsp_low_power_init+0x5c>)
    d478:	6819      	ldr	r1, [r3, #0]
    d47a:	2029      	movs	r0, #41	; 0x29
    d47c:	f000 fac6 	bl	da0c <am_hal_gpio_pinconfig>
    d480:	f000 fdd2 	bl	e028 <am_hal_pwrctrl_low_power_init>
    d484:	2001      	movs	r0, #1
    d486:	f000 fe19 	bl	e0bc <am_hal_rtc_osc_select>
    d48a:	2100      	movs	r1, #0
    d48c:	2003      	movs	r0, #3
    d48e:	f000 f91b 	bl	d6c8 <am_hal_clkgen_control>
    d492:	f000 fe1f 	bl	e0d4 <am_hal_rtc_osc_disable>
    d496:	4b0c      	ldr	r3, [pc, #48]	; (d4c8 <am_bsp_low_power_init+0x60>)
    d498:	681e      	ldr	r6, [r3, #0]
    d49a:	2400      	movs	r4, #0
    d49c:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d4a0:	4631      	mov	r1, r6
    d4a2:	4628      	mov	r0, r5
    d4a4:	f000 fab2 	bl	da0c <am_hal_gpio_pinconfig>
    d4a8:	2103      	movs	r1, #3
    d4aa:	4628      	mov	r0, r5
    d4ac:	f000 fbee 	bl	dc8c <am_hal_gpio_state_write>
    d4b0:	3401      	adds	r4, #1
    d4b2:	4628      	mov	r0, r5
    d4b4:	2100      	movs	r1, #0
    d4b6:	f000 fbe9 	bl	dc8c <am_hal_gpio_state_write>
    d4ba:	2c05      	cmp	r4, #5
    d4bc:	d1ee      	bne.n	d49c <am_bsp_low_power_init+0x34>
    d4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4c0:	0000ece0 	.word	0x0000ece0
    d4c4:	1000c00c 	.word	0x1000c00c
    d4c8:	0000ece4 	.word	0x0000ece4

0000d4cc <am_bsp_debug_printf_enable>:
    d4cc:	b510      	push	{r4, lr}
    d4ce:	4a2e      	ldr	r2, [pc, #184]	; (d588 <am_bsp_debug_printf_enable+0xbc>)
    d4d0:	6813      	ldr	r3, [r2, #0]
    d4d2:	2b01      	cmp	r3, #1
    d4d4:	b086      	sub	sp, #24
    d4d6:	d028      	beq.n	d52a <am_bsp_debug_printf_enable+0x5e>
    d4d8:	2b02      	cmp	r3, #2
    d4da:	d037      	beq.n	d54c <am_bsp_debug_printf_enable+0x80>
    d4dc:	2b03      	cmp	r3, #3
    d4de:	d001      	beq.n	d4e4 <am_bsp_debug_printf_enable+0x18>
    d4e0:	b006      	add	sp, #24
    d4e2:	bd10      	pop	{r4, pc}
    d4e4:	4c29      	ldr	r4, [pc, #164]	; (d58c <am_bsp_debug_printf_enable+0xc0>)
    d4e6:	2302      	movs	r3, #2
    d4e8:	4621      	mov	r1, r4
    d4ea:	2000      	movs	r0, #0
    d4ec:	6013      	str	r3, [r2, #0]
    d4ee:	f000 fe77 	bl	e1e0 <am_hal_uart_initialize>
    d4f2:	2200      	movs	r2, #0
    d4f4:	4611      	mov	r1, r2
    d4f6:	6820      	ldr	r0, [r4, #0]
    d4f8:	f000 feae 	bl	e258 <am_hal_uart_power_control>
    d4fc:	6820      	ldr	r0, [r4, #0]
    d4fe:	4924      	ldr	r1, [pc, #144]	; (d590 <am_bsp_debug_printf_enable+0xc4>)
    d500:	f000 ff1c 	bl	e33c <am_hal_uart_configure>
    d504:	4b23      	ldr	r3, [pc, #140]	; (d594 <am_bsp_debug_printf_enable+0xc8>)
    d506:	2016      	movs	r0, #22
    d508:	6819      	ldr	r1, [r3, #0]
    d50a:	f000 fa7f 	bl	da0c <am_hal_gpio_pinconfig>
    d50e:	4b22      	ldr	r3, [pc, #136]	; (d598 <am_bsp_debug_printf_enable+0xcc>)
    d510:	2017      	movs	r0, #23
    d512:	6819      	ldr	r1, [r3, #0]
    d514:	f000 fa7a 	bl	da0c <am_hal_gpio_pinconfig>
    d518:	4820      	ldr	r0, [pc, #128]	; (d59c <am_bsp_debug_printf_enable+0xd0>)
    d51a:	f7fe ff7b 	bl	c414 <am_util_stdio_printf_init>
    d51e:	4b20      	ldr	r3, [pc, #128]	; (d5a0 <am_bsp_debug_printf_enable+0xd4>)
    d520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d524:	601a      	str	r2, [r3, #0]
    d526:	b006      	add	sp, #24
    d528:	bd10      	pop	{r4, pc}
    d52a:	f000 fc05 	bl	dd38 <am_hal_itm_enable>
    d52e:	a806      	add	r0, sp, #24
    d530:	4b1c      	ldr	r3, [pc, #112]	; (d5a4 <am_bsp_debug_printf_enable+0xd8>)
    d532:	f840 3d14 	str.w	r3, [r0, #-20]!
    d536:	f000 fe03 	bl	e140 <am_hal_tpiu_enable>
    d53a:	4b1b      	ldr	r3, [pc, #108]	; (d5a8 <am_bsp_debug_printf_enable+0xdc>)
    d53c:	2029      	movs	r0, #41	; 0x29
    d53e:	6819      	ldr	r1, [r3, #0]
    d540:	f000 fa64 	bl	da0c <am_hal_gpio_pinconfig>
    d544:	4819      	ldr	r0, [pc, #100]	; (d5ac <am_bsp_debug_printf_enable+0xe0>)
    d546:	f7fe ff65 	bl	c414 <am_util_stdio_printf_init>
    d54a:	e7c9      	b.n	d4e0 <am_bsp_debug_printf_enable+0x14>
    d54c:	4c0f      	ldr	r4, [pc, #60]	; (d58c <am_bsp_debug_printf_enable+0xc0>)
    d54e:	6013      	str	r3, [r2, #0]
    d550:	4621      	mov	r1, r4
    d552:	2000      	movs	r0, #0
    d554:	f000 fe44 	bl	e1e0 <am_hal_uart_initialize>
    d558:	2200      	movs	r2, #0
    d55a:	4611      	mov	r1, r2
    d55c:	6820      	ldr	r0, [r4, #0]
    d55e:	f000 fe7b 	bl	e258 <am_hal_uart_power_control>
    d562:	6820      	ldr	r0, [r4, #0]
    d564:	4912      	ldr	r1, [pc, #72]	; (d5b0 <am_bsp_debug_printf_enable+0xe4>)
    d566:	f000 fee9 	bl	e33c <am_hal_uart_configure>
    d56a:	4b0a      	ldr	r3, [pc, #40]	; (d594 <am_bsp_debug_printf_enable+0xc8>)
    d56c:	2016      	movs	r0, #22
    d56e:	6819      	ldr	r1, [r3, #0]
    d570:	f000 fa4c 	bl	da0c <am_hal_gpio_pinconfig>
    d574:	4b08      	ldr	r3, [pc, #32]	; (d598 <am_bsp_debug_printf_enable+0xcc>)
    d576:	2017      	movs	r0, #23
    d578:	6819      	ldr	r1, [r3, #0]
    d57a:	f000 fa47 	bl	da0c <am_hal_gpio_pinconfig>
    d57e:	4807      	ldr	r0, [pc, #28]	; (d59c <am_bsp_debug_printf_enable+0xd0>)
    d580:	f7fe ff48 	bl	c414 <am_util_stdio_printf_init>
    d584:	e7ac      	b.n	d4e0 <am_bsp_debug_printf_enable+0x14>
    d586:	bf00      	nop
    d588:	1000c174 	.word	0x1000c174
    d58c:	1000c178 	.word	0x1000c178
    d590:	1000c034 	.word	0x1000c034
    d594:	0000eba0 	.word	0x0000eba0
    d598:	0000eba8 	.word	0x0000eba8
    d59c:	0000d421 	.word	0x0000d421
    d5a0:	e000e100 	.word	0xe000e100
    d5a4:	000f4240 	.word	0x000f4240
    d5a8:	0000eba4 	.word	0x0000eba4
    d5ac:	0000de21 	.word	0x0000de21
    d5b0:	0000eb78 	.word	0x0000eb78

0000d5b4 <am_bsp_debug_printf_disable>:
    d5b4:	b538      	push	{r3, r4, r5, lr}
    d5b6:	4b17      	ldr	r3, [pc, #92]	; (d614 <am_bsp_debug_printf_disable+0x60>)
    d5b8:	681c      	ldr	r4, [r3, #0]
    d5ba:	2c01      	cmp	r4, #1
    d5bc:	d01d      	beq.n	d5fa <am_bsp_debug_printf_disable+0x46>
    d5be:	2c02      	cmp	r4, #2
    d5c0:	d000      	beq.n	d5c4 <am_bsp_debug_printf_disable+0x10>
    d5c2:	bd38      	pop	{r3, r4, r5, pc}
    d5c4:	4d14      	ldr	r5, [pc, #80]	; (d618 <am_bsp_debug_printf_disable+0x64>)
    d5c6:	6828      	ldr	r0, [r5, #0]
    d5c8:	f001 f9fe 	bl	e9c8 <am_hal_uart_tx_flush>
    d5cc:	2000      	movs	r0, #0
    d5ce:	f7fe ff21 	bl	c414 <am_util_stdio_printf_init>
    d5d2:	4621      	mov	r1, r4
    d5d4:	2200      	movs	r2, #0
    d5d6:	6828      	ldr	r0, [r5, #0]
    d5d8:	f000 fe3e 	bl	e258 <am_hal_uart_power_control>
    d5dc:	6828      	ldr	r0, [r5, #0]
    d5de:	f000 fe27 	bl	e230 <am_hal_uart_deinitialize>
    d5e2:	4b0e      	ldr	r3, [pc, #56]	; (d61c <am_bsp_debug_printf_disable+0x68>)
    d5e4:	681c      	ldr	r4, [r3, #0]
    d5e6:	2016      	movs	r0, #22
    d5e8:	4621      	mov	r1, r4
    d5ea:	f000 fa0f 	bl	da0c <am_hal_gpio_pinconfig>
    d5ee:	4621      	mov	r1, r4
    d5f0:	2017      	movs	r0, #23
    d5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d5f6:	f000 ba09 	b.w	da0c <am_hal_gpio_pinconfig>
    d5fa:	f000 fbbb 	bl	dd74 <am_hal_itm_disable>
    d5fe:	2000      	movs	r0, #0
    d600:	f7fe ff08 	bl	c414 <am_util_stdio_printf_init>
    d604:	4b05      	ldr	r3, [pc, #20]	; (d61c <am_bsp_debug_printf_disable+0x68>)
    d606:	2029      	movs	r0, #41	; 0x29
    d608:	6819      	ldr	r1, [r3, #0]
    d60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d60e:	f000 b9fd 	b.w	da0c <am_hal_gpio_pinconfig>
    d612:	bf00      	nop
    d614:	1000c174 	.word	0x1000c174
    d618:	1000c178 	.word	0x1000c178
    d61c:	0000ece0 	.word	0x0000ece0

0000d620 <am_bsp_itm_printf_enable>:
    d620:	b500      	push	{lr}
    d622:	4b0b      	ldr	r3, [pc, #44]	; (d650 <am_bsp_itm_printf_enable+0x30>)
    d624:	b087      	sub	sp, #28
    d626:	2201      	movs	r2, #1
    d628:	601a      	str	r2, [r3, #0]
    d62a:	f000 fb85 	bl	dd38 <am_hal_itm_enable>
    d62e:	a806      	add	r0, sp, #24
    d630:	4b08      	ldr	r3, [pc, #32]	; (d654 <am_bsp_itm_printf_enable+0x34>)
    d632:	f840 3d14 	str.w	r3, [r0, #-20]!
    d636:	f000 fd83 	bl	e140 <am_hal_tpiu_enable>
    d63a:	4b07      	ldr	r3, [pc, #28]	; (d658 <am_bsp_itm_printf_enable+0x38>)
    d63c:	2029      	movs	r0, #41	; 0x29
    d63e:	6819      	ldr	r1, [r3, #0]
    d640:	f000 f9e4 	bl	da0c <am_hal_gpio_pinconfig>
    d644:	4805      	ldr	r0, [pc, #20]	; (d65c <am_bsp_itm_printf_enable+0x3c>)
    d646:	f7fe fee5 	bl	c414 <am_util_stdio_printf_init>
    d64a:	b007      	add	sp, #28
    d64c:	f85d fb04 	ldr.w	pc, [sp], #4
    d650:	1000c174 	.word	0x1000c174
    d654:	000f4240 	.word	0x000f4240
    d658:	0000eba4 	.word	0x0000eba4
    d65c:	0000de21 	.word	0x0000de21

0000d660 <am_hal_cachectrl_config>:
    d660:	b530      	push	{r4, r5, lr}
    d662:	b083      	sub	sp, #12
    d664:	4605      	mov	r5, r0
    d666:	f000 fb5f 	bl	dd28 <am_hal_interrupt_master_disable>
    d66a:	4c11      	ldr	r4, [pc, #68]	; (d6b0 <am_hal_cachectrl_config+0x50>)
    d66c:	9001      	str	r0, [sp, #4]
    d66e:	6823      	ldr	r3, [r4, #0]
    d670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d674:	6023      	str	r3, [r4, #0]
    d676:	9801      	ldr	r0, [sp, #4]
    d678:	f000 fb5a 	bl	dd30 <am_hal_interrupt_master_set>
    d67c:	78eb      	ldrb	r3, [r5, #3]
    d67e:	782a      	ldrb	r2, [r5, #0]
    d680:	78a8      	ldrb	r0, [r5, #2]
    d682:	7869      	ldrb	r1, [r5, #1]
    d684:	005b      	lsls	r3, r3, #1
    d686:	0112      	lsls	r2, r2, #4
    d688:	b2d2      	uxtb	r2, r2
    d68a:	f003 0302 	and.w	r3, r3, #2
    d68e:	4313      	orrs	r3, r2
    d690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d694:	0080      	lsls	r0, r0, #2
    d696:	f000 000c 	and.w	r0, r0, #12
    d69a:	020a      	lsls	r2, r1, #8
    d69c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d6a0:	4303      	orrs	r3, r0
    d6a2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d6a6:	4313      	orrs	r3, r2
    d6a8:	2000      	movs	r0, #0
    d6aa:	6023      	str	r3, [r4, #0]
    d6ac:	b003      	add	sp, #12
    d6ae:	bd30      	pop	{r4, r5, pc}
    d6b0:	40018000 	.word	0x40018000

0000d6b4 <am_hal_cachectrl_enable>:
    d6b4:	4a03      	ldr	r2, [pc, #12]	; (d6c4 <am_hal_cachectrl_enable+0x10>)
    d6b6:	6813      	ldr	r3, [r2, #0]
    d6b8:	f043 0301 	orr.w	r3, r3, #1
    d6bc:	6013      	str	r3, [r2, #0]
    d6be:	2000      	movs	r0, #0
    d6c0:	4770      	bx	lr
    d6c2:	bf00      	nop
    d6c4:	40018000 	.word	0x40018000

0000d6c8 <am_hal_clkgen_control>:
    d6c8:	4b32      	ldr	r3, [pc, #200]	; (d794 <am_hal_clkgen_control+0xcc>)
    d6ca:	681a      	ldr	r2, [r3, #0]
    d6cc:	b912      	cbnz	r2, d6d4 <am_hal_clkgen_control+0xc>
    d6ce:	4a32      	ldr	r2, [pc, #200]	; (d798 <am_hal_clkgen_control+0xd0>)
    d6d0:	6812      	ldr	r2, [r2, #0]
    d6d2:	601a      	str	r2, [r3, #0]
    d6d4:	2809      	cmp	r0, #9
    d6d6:	d85a      	bhi.n	d78e <am_hal_clkgen_control+0xc6>
    d6d8:	e8df f000 	tbb	[pc, r0]
    d6dc:	261e160d 	.word	0x261e160d
    d6e0:	4640362e 	.word	0x4640362e
    d6e4:	054e      	.short	0x054e
    d6e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6ea:	2000      	movs	r0, #0
    d6ec:	6a1a      	ldr	r2, [r3, #32]
    d6ee:	f36f 0200 	bfc	r2, #0, #1
    d6f2:	621a      	str	r2, [r3, #32]
    d6f4:	4770      	bx	lr
    d6f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6fa:	2200      	movs	r2, #0
    d6fc:	2147      	movs	r1, #71	; 0x47
    d6fe:	6159      	str	r1, [r3, #20]
    d700:	4610      	mov	r0, r2
    d702:	619a      	str	r2, [r3, #24]
    d704:	615a      	str	r2, [r3, #20]
    d706:	4770      	bx	lr
    d708:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d70c:	2000      	movs	r0, #0
    d70e:	68d3      	ldr	r3, [r2, #12]
    d710:	f023 0301 	bic.w	r3, r3, #1
    d714:	60d3      	str	r3, [r2, #12]
    d716:	4770      	bx	lr
    d718:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d71c:	2000      	movs	r0, #0
    d71e:	68d3      	ldr	r3, [r2, #12]
    d720:	f023 0302 	bic.w	r3, r3, #2
    d724:	60d3      	str	r3, [r2, #12]
    d726:	4770      	bx	lr
    d728:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d72c:	2000      	movs	r0, #0
    d72e:	68d3      	ldr	r3, [r2, #12]
    d730:	f043 0301 	orr.w	r3, r3, #1
    d734:	60d3      	str	r3, [r2, #12]
    d736:	4770      	bx	lr
    d738:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d73c:	2000      	movs	r0, #0
    d73e:	68d3      	ldr	r3, [r2, #12]
    d740:	f043 0302 	orr.w	r3, r3, #2
    d744:	60d3      	str	r3, [r2, #12]
    d746:	4770      	bx	lr
    d748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d74c:	2200      	movs	r2, #0
    d74e:	2047      	movs	r0, #71	; 0x47
    d750:	2101      	movs	r1, #1
    d752:	6158      	str	r0, [r3, #20]
    d754:	6199      	str	r1, [r3, #24]
    d756:	4610      	mov	r0, r2
    d758:	615a      	str	r2, [r3, #20]
    d75a:	4770      	bx	lr
    d75c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d760:	2000      	movs	r0, #0
    d762:	68da      	ldr	r2, [r3, #12]
    d764:	60da      	str	r2, [r3, #12]
    d766:	4770      	bx	lr
    d768:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d76c:	2000      	movs	r0, #0
    d76e:	68d3      	ldr	r3, [r2, #12]
    d770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d774:	60d3      	str	r3, [r2, #12]
    d776:	4770      	bx	lr
    d778:	b139      	cbz	r1, d78a <am_hal_clkgen_control+0xc2>
    d77a:	680b      	ldr	r3, [r1, #0]
    d77c:	f043 0301 	orr.w	r3, r3, #1
    d780:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d784:	2000      	movs	r0, #0
    d786:	6213      	str	r3, [r2, #32]
    d788:	4770      	bx	lr
    d78a:	4b04      	ldr	r3, [pc, #16]	; (d79c <am_hal_clkgen_control+0xd4>)
    d78c:	e7f8      	b.n	d780 <am_hal_clkgen_control+0xb8>
    d78e:	2006      	movs	r0, #6
    d790:	4770      	bx	lr
    d792:	bf00      	nop
    d794:	1000c97c 	.word	0x1000c97c
    d798:	4ffff000 	.word	0x4ffff000
    d79c:	0025b801 	.word	0x0025b801

0000d7a0 <am_hal_clkgen_status_get>:
    d7a0:	b1a8      	cbz	r0, d7ce <am_hal_clkgen_status_get+0x2e>
    d7a2:	b410      	push	{r4}
    d7a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7a8:	490a      	ldr	r1, [pc, #40]	; (d7d4 <am_hal_clkgen_status_get+0x34>)
    d7aa:	6994      	ldr	r4, [r2, #24]
    d7ac:	4b0a      	ldr	r3, [pc, #40]	; (d7d8 <am_hal_clkgen_status_get+0x38>)
    d7ae:	f014 0f01 	tst.w	r4, #1
    d7b2:	bf08      	it	eq
    d7b4:	460b      	moveq	r3, r1
    d7b6:	6003      	str	r3, [r0, #0]
    d7b8:	69d3      	ldr	r3, [r2, #28]
    d7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    d7be:	f003 0201 	and.w	r2, r3, #1
    d7c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d7c6:	6042      	str	r2, [r0, #4]
    d7c8:	7203      	strb	r3, [r0, #8]
    d7ca:	2000      	movs	r0, #0
    d7cc:	4770      	bx	lr
    d7ce:	2006      	movs	r0, #6
    d7d0:	4770      	bx	lr
    d7d2:	bf00      	nop
    d7d4:	02dc6c00 	.word	0x02dc6c00
    d7d8:	016e3600 	.word	0x016e3600

0000d7dc <am_hal_ctimer_config>:
    d7dc:	b570      	push	{r4, r5, r6, lr}
    d7de:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    d7e2:	2a00      	cmp	r2, #0
    d7e4:	b082      	sub	sp, #8
    d7e6:	bf18      	it	ne
    d7e8:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    d7ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    d7f0:	ea42 0403 	orr.w	r4, r2, r3
    d7f4:	460d      	mov	r5, r1
    d7f6:	4606      	mov	r6, r0
    d7f8:	f000 fa96 	bl	dd28 <am_hal_interrupt_master_disable>
    d7fc:	4b0d      	ldr	r3, [pc, #52]	; (d834 <am_hal_ctimer_config+0x58>)
    d7fe:	9001      	str	r0, [sp, #4]
    d800:	0172      	lsls	r2, r6, #5
    d802:	50d4      	str	r4, [r2, r3]
    d804:	9801      	ldr	r0, [sp, #4]
    d806:	f000 fa93 	bl	dd30 <am_hal_interrupt_master_set>
    d80a:	686b      	ldr	r3, [r5, #4]
    d80c:	b90b      	cbnz	r3, d812 <am_hal_ctimer_config+0x36>
    d80e:	682a      	ldr	r2, [r5, #0]
    d810:	b142      	cbz	r2, d824 <am_hal_ctimer_config+0x48>
    d812:	f3c3 0344 	ubfx	r3, r3, #1, #5
    d816:	2100      	movs	r1, #0
    d818:	4a07      	ldr	r2, [pc, #28]	; (d838 <am_hal_ctimer_config+0x5c>)
    d81a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    d81e:	5473      	strb	r3, [r6, r1]
    d820:	b002      	add	sp, #8
    d822:	bd70      	pop	{r4, r5, r6, pc}
    d824:	68ab      	ldr	r3, [r5, #8]
    d826:	2b00      	cmp	r3, #0
    d828:	d0fa      	beq.n	d820 <am_hal_ctimer_config+0x44>
    d82a:	f3c3 0344 	ubfx	r3, r3, #1, #5
    d82e:	2101      	movs	r1, #1
    d830:	e7f2      	b.n	d818 <am_hal_ctimer_config+0x3c>
    d832:	bf00      	nop
    d834:	4000800c 	.word	0x4000800c
    d838:	1000c05c 	.word	0x1000c05c

0000d83c <am_hal_ctimer_start>:
    d83c:	b570      	push	{r4, r5, r6, lr}
    d83e:	b082      	sub	sp, #8
    d840:	460c      	mov	r4, r1
    d842:	0146      	lsls	r6, r0, #5
    d844:	4605      	mov	r5, r0
    d846:	f000 fa6f 	bl	dd28 <am_hal_interrupt_master_disable>
    d84a:	4a0f      	ldr	r2, [pc, #60]	; (d888 <am_hal_ctimer_start+0x4c>)
    d84c:	9001      	str	r0, [sp, #4]
    d84e:	58b3      	ldr	r3, [r6, r2]
    d850:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    d854:	ea23 0301 	bic.w	r3, r3, r1
    d858:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    d85c:	430b      	orrs	r3, r1
    d85e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d862:	bf0c      	ite	eq
    d864:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    d868:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    d86c:	50b3      	str	r3, [r6, r2]
    d86e:	4b07      	ldr	r3, [pc, #28]	; (d88c <am_hal_ctimer_start+0x50>)
    d870:	9801      	ldr	r0, [sp, #4]
    d872:	bf0c      	ite	eq
    d874:	2101      	moveq	r1, #1
    d876:	2100      	movne	r1, #0
    d878:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    d87c:	545c      	strb	r4, [r3, r1]
    d87e:	f000 fa57 	bl	dd30 <am_hal_interrupt_master_set>
    d882:	b002      	add	sp, #8
    d884:	bd70      	pop	{r4, r5, r6, pc}
    d886:	bf00      	nop
    d888:	4000800c 	.word	0x4000800c
    d88c:	1000c05c 	.word	0x1000c05c

0000d890 <am_hal_ctimer_clear>:
    d890:	b570      	push	{r4, r5, r6, lr}
    d892:	b082      	sub	sp, #8
    d894:	0146      	lsls	r6, r0, #5
    d896:	460c      	mov	r4, r1
    d898:	f000 fa46 	bl	dd28 <am_hal_interrupt_master_disable>
    d89c:	4d05      	ldr	r5, [pc, #20]	; (d8b4 <am_hal_ctimer_clear+0x24>)
    d89e:	9001      	str	r0, [sp, #4]
    d8a0:	5973      	ldr	r3, [r6, r5]
    d8a2:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    d8a6:	4319      	orrs	r1, r3
    d8a8:	5171      	str	r1, [r6, r5]
    d8aa:	9801      	ldr	r0, [sp, #4]
    d8ac:	f000 fa40 	bl	dd30 <am_hal_interrupt_master_set>
    d8b0:	b002      	add	sp, #8
    d8b2:	bd70      	pop	{r4, r5, r6, pc}
    d8b4:	4000800c 	.word	0x4000800c

0000d8b8 <am_hal_ctimer_period_set>:
    d8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8bc:	b082      	sub	sp, #8
    d8be:	4689      	mov	r9, r1
    d8c0:	4698      	mov	r8, r3
    d8c2:	0147      	lsls	r7, r0, #5
    d8c4:	4614      	mov	r4, r2
    d8c6:	f000 fa2f 	bl	dd28 <am_hal_interrupt_master_disable>
    d8ca:	f8df a094 	ldr.w	sl, [pc, #148]	; d960 <am_hal_ctimer_period_set+0xa8>
    d8ce:	9001      	str	r0, [sp, #4]
    d8d0:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    d8d4:	4d20      	ldr	r5, [pc, #128]	; (d958 <am_hal_ctimer_period_set+0xa0>)
    d8d6:	4e21      	ldr	r6, [pc, #132]	; (d95c <am_hal_ctimer_period_set+0xa4>)
    d8d8:	f857 300a 	ldr.w	r3, [r7, sl]
    d8dc:	d01a      	beq.n	d914 <am_hal_ctimer_period_set+0x5c>
    d8de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    d8e2:	2b80      	cmp	r3, #128	; 0x80
    d8e4:	d01b      	beq.n	d91e <am_hal_ctimer_period_set+0x66>
    d8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8ea:	2000      	movs	r0, #0
    d8ec:	4591      	cmp	r9, r2
    d8ee:	4603      	mov	r3, r0
    d8f0:	d01e      	beq.n	d930 <am_hal_ctimer_period_set+0x78>
    d8f2:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    d8f6:	d025      	beq.n	d944 <am_hal_ctimer_period_set+0x8c>
    d8f8:	0c1b      	lsrs	r3, r3, #16
    d8fa:	b2a2      	uxth	r2, r4
    d8fc:	041b      	lsls	r3, r3, #16
    d8fe:	4310      	orrs	r0, r2
    d900:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    d904:	5178      	str	r0, [r7, r5]
    d906:	51bb      	str	r3, [r7, r6]
    d908:	9801      	ldr	r0, [sp, #4]
    d90a:	f000 fa11 	bl	dd30 <am_hal_interrupt_master_set>
    d90e:	b002      	add	sp, #8
    d910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d914:	0c1b      	lsrs	r3, r3, #16
    d916:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    d91a:	2b80      	cmp	r3, #128	; 0x80
    d91c:	d111      	bne.n	d942 <am_hal_ctimer_period_set+0x8a>
    d91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d922:	4591      	cmp	r9, r2
    d924:	ea4f 4004 	mov.w	r0, r4, lsl #16
    d928:	4623      	mov	r3, r4
    d92a:	ebc8 0404 	rsb	r4, r8, r4
    d92e:	d1e0      	bne.n	d8f2 <am_hal_ctimer_period_set+0x3a>
    d930:	b2a3      	uxth	r3, r4
    d932:	4318      	orrs	r0, r3
    d934:	5178      	str	r0, [r7, r5]
    d936:	9801      	ldr	r0, [sp, #4]
    d938:	f000 f9fa 	bl	dd30 <am_hal_interrupt_master_set>
    d93c:	b002      	add	sp, #8
    d93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d942:	2000      	movs	r0, #0
    d944:	b2a3      	uxth	r3, r4
    d946:	4318      	orrs	r0, r3
    d948:	51b8      	str	r0, [r7, r6]
    d94a:	9801      	ldr	r0, [sp, #4]
    d94c:	f000 f9f0 	bl	dd30 <am_hal_interrupt_master_set>
    d950:	b002      	add	sp, #8
    d952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d956:	bf00      	nop
    d958:	40008004 	.word	0x40008004
    d95c:	40008008 	.word	0x40008008
    d960:	4000800c 	.word	0x4000800c

0000d964 <am_hal_ctimer_int_enable>:
    d964:	b510      	push	{r4, lr}
    d966:	b082      	sub	sp, #8
    d968:	4604      	mov	r4, r0
    d96a:	f000 f9dd 	bl	dd28 <am_hal_interrupt_master_disable>
    d96e:	4b06      	ldr	r3, [pc, #24]	; (d988 <am_hal_ctimer_int_enable+0x24>)
    d970:	9001      	str	r0, [sp, #4]
    d972:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d976:	4314      	orrs	r4, r2
    d978:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    d97c:	9801      	ldr	r0, [sp, #4]
    d97e:	f000 f9d7 	bl	dd30 <am_hal_interrupt_master_set>
    d982:	b002      	add	sp, #8
    d984:	bd10      	pop	{r4, pc}
    d986:	bf00      	nop
    d988:	40008000 	.word	0x40008000

0000d98c <am_hal_ctimer_int_clear>:
    d98c:	b510      	push	{r4, lr}
    d98e:	b082      	sub	sp, #8
    d990:	4604      	mov	r4, r0
    d992:	f000 f9c9 	bl	dd28 <am_hal_interrupt_master_disable>
    d996:	4b04      	ldr	r3, [pc, #16]	; (d9a8 <am_hal_ctimer_int_clear+0x1c>)
    d998:	9001      	str	r0, [sp, #4]
    d99a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    d99e:	9801      	ldr	r0, [sp, #4]
    d9a0:	f000 f9c6 	bl	dd30 <am_hal_interrupt_master_set>
    d9a4:	b002      	add	sp, #8
    d9a6:	bd10      	pop	{r4, pc}
    d9a8:	40008000 	.word	0x40008000

0000d9ac <am_hal_flash_delay>:
    d9ac:	4b00      	ldr	r3, [pc, #0]	; (d9b0 <am_hal_flash_delay+0x4>)
    d9ae:	4718      	bx	r3
    d9b0:	0800009d 	.word	0x0800009d

0000d9b4 <am_hal_flash_delay_status_check>:
    d9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d9bc:	460d      	mov	r5, r1
    d9be:	4616      	mov	r6, r2
    d9c0:	461f      	mov	r7, r3
    d9c2:	b17c      	cbz	r4, d9e4 <am_hal_flash_delay_status_check+0x30>
    d9c4:	4604      	mov	r4, r0
    d9c6:	f8df 8040 	ldr.w	r8, [pc, #64]	; da08 <am_hal_flash_delay_status_check+0x54>
    d9ca:	e002      	b.n	d9d2 <am_hal_flash_delay_status_check+0x1e>
    d9cc:	b1c4      	cbz	r4, da00 <am_hal_flash_delay_status_check+0x4c>
    d9ce:	47c0      	blx	r8
    d9d0:	3c01      	subs	r4, #1
    d9d2:	682b      	ldr	r3, [r5, #0]
    d9d4:	4033      	ands	r3, r6
    d9d6:	429f      	cmp	r7, r3
    d9d8:	f04f 0001 	mov.w	r0, #1
    d9dc:	d1f6      	bne.n	d9cc <am_hal_flash_delay_status_check+0x18>
    d9de:	2000      	movs	r0, #0
    d9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9e4:	f8df 8020 	ldr.w	r8, [pc, #32]	; da08 <am_hal_flash_delay_status_check+0x54>
    d9e8:	4604      	mov	r4, r0
    d9ea:	e002      	b.n	d9f2 <am_hal_flash_delay_status_check+0x3e>
    d9ec:	b144      	cbz	r4, da00 <am_hal_flash_delay_status_check+0x4c>
    d9ee:	47c0      	blx	r8
    d9f0:	3c01      	subs	r4, #1
    d9f2:	682b      	ldr	r3, [r5, #0]
    d9f4:	4033      	ands	r3, r6
    d9f6:	429f      	cmp	r7, r3
    d9f8:	f04f 0001 	mov.w	r0, #1
    d9fc:	d0f6      	beq.n	d9ec <am_hal_flash_delay_status_check+0x38>
    d9fe:	e7ee      	b.n	d9de <am_hal_flash_delay_status_check+0x2a>
    da00:	2004      	movs	r0, #4
    da02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da06:	bf00      	nop
    da08:	0800009d 	.word	0x0800009d

0000da0c <am_hal_gpio_pinconfig>:
    da0c:	2831      	cmp	r0, #49	; 0x31
    da0e:	d901      	bls.n	da14 <am_hal_gpio_pinconfig+0x8>
    da10:	2006      	movs	r0, #6
    da12:	4770      	bx	lr
    da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da18:	f001 0307 	and.w	r3, r1, #7
    da1c:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    da20:	b085      	sub	sp, #20
    da22:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    da26:	d014      	beq.n	da52 <am_hal_gpio_pinconfig+0x46>
    da28:	f3c1 1642 	ubfx	r6, r1, #5, #3
    da2c:	1db4      	adds	r4, r6, #6
    da2e:	f004 0407 	and.w	r4, r4, #7
    da32:	2c03      	cmp	r4, #3
    da34:	f042 0201 	orr.w	r2, r2, #1
    da38:	f200 80ae 	bhi.w	db98 <am_hal_gpio_pinconfig+0x18c>
    da3c:	4c85      	ldr	r4, [pc, #532]	; (dc54 <am_hal_gpio_pinconfig+0x248>)
    da3e:	5c24      	ldrb	r4, [r4, r0]
    da40:	07e7      	lsls	r7, r4, #31
    da42:	d403      	bmi.n	da4c <am_hal_gpio_pinconfig+0x40>
    da44:	4884      	ldr	r0, [pc, #528]	; (dc58 <am_hal_gpio_pinconfig+0x24c>)
    da46:	b005      	add	sp, #20
    da48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da4c:	3e02      	subs	r6, #2
    da4e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    da52:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    da56:	2c00      	cmp	r4, #0
    da58:	f040 8098 	bne.w	db8c <am_hal_gpio_pinconfig+0x180>
    da5c:	4c7f      	ldr	r4, [pc, #508]	; (dc5c <am_hal_gpio_pinconfig+0x250>)
    da5e:	4d80      	ldr	r5, [pc, #512]	; (dc60 <am_hal_gpio_pinconfig+0x254>)
    da60:	5c24      	ldrb	r4, [r4, r0]
    da62:	5c2d      	ldrb	r5, [r5, r0]
    da64:	411c      	asrs	r4, r3
    da66:	f014 0f01 	tst.w	r4, #1
    da6a:	bf0c      	ite	eq
    da6c:	2400      	moveq	r4, #0
    da6e:	2402      	movne	r4, #2
    da70:	42ab      	cmp	r3, r5
    da72:	ea42 0204 	orr.w	r2, r2, r4
    da76:	f000 809b 	beq.w	dbb0 <am_hal_gpio_pinconfig+0x1a4>
    da7a:	f3c1 3341 	ubfx	r3, r1, #13, #2
    da7e:	105d      	asrs	r5, r3, #1
    da80:	f3c1 2681 	ubfx	r6, r1, #10, #2
    da84:	00db      	lsls	r3, r3, #3
    da86:	f3c1 2707 	ubfx	r7, r1, #8, #8
    da8a:	f003 0408 	and.w	r4, r3, #8
    da8e:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    da92:	f007 060c 	and.w	r6, r7, #12
    da96:	f3c1 3500 	ubfx	r5, r1, #12, #1
    da9a:	2e04      	cmp	r6, #4
    da9c:	ea43 0304 	orr.w	r3, r3, r4
    daa0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    daa4:	462c      	mov	r4, r5
    daa6:	f000 8090 	beq.w	dbca <am_hal_gpio_pinconfig+0x1be>
    daaa:	4c6e      	ldr	r4, [pc, #440]	; (dc64 <am_hal_gpio_pinconfig+0x258>)
    daac:	6824      	ldr	r4, [r4, #0]
    daae:	ebc4 0901 	rsb	r9, r4, r1
    dab2:	fab9 f989 	clz	r9, r9
    dab6:	ea4f 1959 	mov.w	r9, r9, lsr #5
    daba:	f017 0f60 	tst.w	r7, #96	; 0x60
    dabe:	bf04      	itt	eq
    dac0:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    dac4:	f364 0300 	bfieq	r3, r4, #0, #1
    dac8:	0084      	lsls	r4, r0, #2
    daca:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dace:	2902      	cmp	r1, #2
    dad0:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    dad4:	d07c      	beq.n	dbd0 <am_hal_gpio_pinconfig+0x1c4>
    dad6:	f200 8082 	bhi.w	dbde <am_hal_gpio_pinconfig+0x1d2>
    dada:	2901      	cmp	r1, #1
    dadc:	bf08      	it	eq
    dade:	f042 0204 	orreq.w	r2, r2, #4
    dae2:	f005 0518 	and.w	r5, r5, #24
    dae6:	f04f 0800 	mov.w	r8, #0
    daea:	f004 041c 	and.w	r4, r4, #28
    daee:	0841      	lsrs	r1, r0, #1
    daf0:	f020 0a03 	bic.w	sl, r0, #3
    daf4:	270f      	movs	r7, #15
    daf6:	f021 0103 	bic.w	r1, r1, #3
    dafa:	40a7      	lsls	r7, r4
    dafc:	26ff      	movs	r6, #255	; 0xff
    dafe:	fa03 f404 	lsl.w	r4, r3, r4
    db02:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    db06:	40ae      	lsls	r6, r5
    db08:	9101      	str	r1, [sp, #4]
    db0a:	9300      	str	r3, [sp, #0]
    db0c:	4683      	mov	fp, r0
    db0e:	fa02 f505 	lsl.w	r5, r2, r5
    db12:	f000 f909 	bl	dd28 <am_hal_interrupt_master_disable>
    db16:	9b00      	ldr	r3, [sp, #0]
    db18:	9003      	str	r0, [sp, #12]
    db1a:	43ff      	mvns	r7, r7
    db1c:	43f6      	mvns	r6, r6
    db1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    db22:	f8df e160 	ldr.w	lr, [pc, #352]	; dc84 <am_hal_gpio_pinconfig+0x278>
    db26:	4850      	ldr	r0, [pc, #320]	; (dc68 <am_hal_gpio_pinconfig+0x25c>)
    db28:	9901      	ldr	r1, [sp, #4]
    db2a:	f1b9 0f00 	cmp.w	r9, #0
    db2e:	d00b      	beq.n	db48 <am_hal_gpio_pinconfig+0x13c>
    db30:	f00b 021f 	and.w	r2, fp, #31
    db34:	f04f 0901 	mov.w	r9, #1
    db38:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    db3c:	f8df c148 	ldr.w	ip, [pc, #328]	; dc88 <am_hal_gpio_pinconfig+0x27c>
    db40:	fa09 f202 	lsl.w	r2, r9, r2
    db44:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    db48:	4a48      	ldr	r2, [pc, #288]	; (dc6c <am_hal_gpio_pinconfig+0x260>)
    db4a:	f04f 0c73 	mov.w	ip, #115	; 0x73
    db4e:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    db52:	f8d3 c000 	ldr.w	ip, [r3]
    db56:	ea06 0c0c 	and.w	ip, r6, ip
    db5a:	ea4c 0505 	orr.w	r5, ip, r5
    db5e:	601d      	str	r5, [r3, #0]
    db60:	f851 300e 	ldr.w	r3, [r1, lr]
    db64:	403b      	ands	r3, r7
    db66:	4323      	orrs	r3, r4
    db68:	f841 300e 	str.w	r3, [r1, lr]
    db6c:	f85a 3000 	ldr.w	r3, [sl, r0]
    db70:	401e      	ands	r6, r3
    db72:	2400      	movs	r4, #0
    db74:	ea46 0608 	orr.w	r6, r6, r8
    db78:	f84a 6000 	str.w	r6, [sl, r0]
    db7c:	6614      	str	r4, [r2, #96]	; 0x60
    db7e:	9803      	ldr	r0, [sp, #12]
    db80:	f000 f8d6 	bl	dd30 <am_hal_interrupt_master_set>
    db84:	4620      	mov	r0, r4
    db86:	b005      	add	sp, #20
    db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db8c:	2c01      	cmp	r4, #1
    db8e:	d015      	beq.n	dbbc <am_hal_gpio_pinconfig+0x1b0>
    db90:	2c02      	cmp	r4, #2
    db92:	d032      	beq.n	dbfa <am_hal_gpio_pinconfig+0x1ee>
    db94:	4836      	ldr	r0, [pc, #216]	; (dc70 <am_hal_gpio_pinconfig+0x264>)
    db96:	e756      	b.n	da46 <am_hal_gpio_pinconfig+0x3a>
    db98:	2dc0      	cmp	r5, #192	; 0xc0
    db9a:	d029      	beq.n	dbf0 <am_hal_gpio_pinconfig+0x1e4>
    db9c:	2d20      	cmp	r5, #32
    db9e:	f47f af58 	bne.w	da52 <am_hal_gpio_pinconfig+0x46>
    dba2:	4c2c      	ldr	r4, [pc, #176]	; (dc54 <am_hal_gpio_pinconfig+0x248>)
    dba4:	5c24      	ldrb	r4, [r4, r0]
    dba6:	f014 0f09 	tst.w	r4, #9
    dbaa:	f47f af4b 	bne.w	da44 <am_hal_gpio_pinconfig+0x38>
    dbae:	e750      	b.n	da52 <am_hal_gpio_pinconfig+0x46>
    dbb0:	f3c1 4402 	ubfx	r4, r1, #16, #3
    dbb4:	2c07      	cmp	r4, #7
    dbb6:	d127      	bne.n	dc08 <am_hal_gpio_pinconfig+0x1fc>
    dbb8:	482e      	ldr	r0, [pc, #184]	; (dc74 <am_hal_gpio_pinconfig+0x268>)
    dbba:	e744      	b.n	da46 <am_hal_gpio_pinconfig+0x3a>
    dbbc:	4c25      	ldr	r4, [pc, #148]	; (dc54 <am_hal_gpio_pinconfig+0x248>)
    dbbe:	5c24      	ldrb	r4, [r4, r0]
    dbc0:	07a5      	lsls	r5, r4, #30
    dbc2:	d5e7      	bpl.n	db94 <am_hal_gpio_pinconfig+0x188>
    dbc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dbc8:	e748      	b.n	da5c <am_hal_gpio_pinconfig+0x50>
    dbca:	f04f 0901 	mov.w	r9, #1
    dbce:	e774      	b.n	daba <am_hal_gpio_pinconfig+0xae>
    dbd0:	f005 0518 	and.w	r5, r5, #24
    dbd4:	f04f 0801 	mov.w	r8, #1
    dbd8:	fa08 f805 	lsl.w	r8, r8, r5
    dbdc:	e785      	b.n	daea <am_hal_gpio_pinconfig+0xde>
    dbde:	f005 0518 	and.w	r5, r5, #24
    dbe2:	f04f 0801 	mov.w	r8, #1
    dbe6:	f042 0204 	orr.w	r2, r2, #4
    dbea:	fa08 f805 	lsl.w	r8, r8, r5
    dbee:	e77c      	b.n	daea <am_hal_gpio_pinconfig+0xde>
    dbf0:	2814      	cmp	r0, #20
    dbf2:	f43f af2e 	beq.w	da52 <am_hal_gpio_pinconfig+0x46>
    dbf6:	4820      	ldr	r0, [pc, #128]	; (dc78 <am_hal_gpio_pinconfig+0x26c>)
    dbf8:	e725      	b.n	da46 <am_hal_gpio_pinconfig+0x3a>
    dbfa:	4c16      	ldr	r4, [pc, #88]	; (dc54 <am_hal_gpio_pinconfig+0x248>)
    dbfc:	5c24      	ldrb	r4, [r4, r0]
    dbfe:	0764      	lsls	r4, r4, #29
    dc00:	d5c8      	bpl.n	db94 <am_hal_gpio_pinconfig+0x188>
    dc02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc06:	e729      	b.n	da5c <am_hal_gpio_pinconfig+0x50>
    dc08:	4d1c      	ldr	r5, [pc, #112]	; (dc7c <am_hal_gpio_pinconfig+0x270>)
    dc0a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dc0e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dc12:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dc16:	429e      	cmp	r6, r3
    dc18:	d00c      	beq.n	dc34 <am_hal_gpio_pinconfig+0x228>
    dc1a:	0084      	lsls	r4, r0, #2
    dc1c:	4425      	add	r5, r4
    dc1e:	786e      	ldrb	r6, [r5, #1]
    dc20:	429e      	cmp	r6, r3
    dc22:	d013      	beq.n	dc4c <am_hal_gpio_pinconfig+0x240>
    dc24:	78ae      	ldrb	r6, [r5, #2]
    dc26:	429e      	cmp	r6, r3
    dc28:	d00e      	beq.n	dc48 <am_hal_gpio_pinconfig+0x23c>
    dc2a:	78ed      	ldrb	r5, [r5, #3]
    dc2c:	429d      	cmp	r5, r3
    dc2e:	d00f      	beq.n	dc50 <am_hal_gpio_pinconfig+0x244>
    dc30:	4813      	ldr	r0, [pc, #76]	; (dc80 <am_hal_gpio_pinconfig+0x274>)
    dc32:	e708      	b.n	da46 <am_hal_gpio_pinconfig+0x3a>
    dc34:	2300      	movs	r3, #0
    dc36:	0084      	lsls	r4, r0, #2
    dc38:	005b      	lsls	r3, r3, #1
    dc3a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dc3e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dc42:	f04f 0900 	mov.w	r9, #0
    dc46:	e740      	b.n	daca <am_hal_gpio_pinconfig+0xbe>
    dc48:	2302      	movs	r3, #2
    dc4a:	e7f5      	b.n	dc38 <am_hal_gpio_pinconfig+0x22c>
    dc4c:	2301      	movs	r3, #1
    dc4e:	e7f3      	b.n	dc38 <am_hal_gpio_pinconfig+0x22c>
    dc50:	2303      	movs	r3, #3
    dc52:	e7f1      	b.n	dc38 <am_hal_gpio_pinconfig+0x22c>
    dc54:	0000ebb0 	.word	0x0000ebb0
    dc58:	08000100 	.word	0x08000100
    dc5c:	0000ecac 	.word	0x0000ecac
    dc60:	0000ecec 	.word	0x0000ecec
    dc64:	0000ece0 	.word	0x0000ece0
    dc68:	400100e0 	.word	0x400100e0
    dc6c:	40010000 	.word	0x40010000
    dc70:	08000102 	.word	0x08000102
    dc74:	08000103 	.word	0x08000103
    dc78:	08000101 	.word	0x08000101
    dc7c:	0000ebe4 	.word	0x0000ebe4
    dc80:	08000104 	.word	0x08000104
    dc84:	40010040 	.word	0x40010040
    dc88:	400100b4 	.word	0x400100b4

0000dc8c <am_hal_gpio_state_write>:
    dc8c:	2831      	cmp	r0, #49	; 0x31
    dc8e:	d901      	bls.n	dc94 <am_hal_gpio_state_write+0x8>
    dc90:	2005      	movs	r0, #5
    dc92:	4770      	bx	lr
    dc94:	2905      	cmp	r1, #5
    dc96:	d901      	bls.n	dc9c <am_hal_gpio_state_write+0x10>
    dc98:	2006      	movs	r0, #6
    dc9a:	4770      	bx	lr
    dc9c:	b570      	push	{r4, r5, r6, lr}
    dc9e:	f000 031f 	and.w	r3, r0, #31
    dca2:	b082      	sub	sp, #8
    dca4:	2201      	movs	r2, #1
    dca6:	460d      	mov	r5, r1
    dca8:	4604      	mov	r4, r0
    dcaa:	fa02 f603 	lsl.w	r6, r2, r3
    dcae:	f000 f83b 	bl	dd28 <am_hal_interrupt_master_disable>
    dcb2:	1e69      	subs	r1, r5, #1
    dcb4:	9001      	str	r0, [sp, #4]
    dcb6:	0960      	lsrs	r0, r4, #5
    dcb8:	2904      	cmp	r1, #4
    dcba:	d81c      	bhi.n	dcf6 <am_hal_gpio_state_write+0x6a>
    dcbc:	e8df f001 	tbb	[pc, r1]
    dcc0:	030c1017 	.word	0x030c1017
    dcc4:	1f          	.byte	0x1f
    dcc5:	00          	.byte	0x00
    dcc6:	4b11      	ldr	r3, [pc, #68]	; (dd0c <am_hal_gpio_state_write+0x80>)
    dcc8:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dccc:	9801      	ldr	r0, [sp, #4]
    dcce:	f000 f82f 	bl	dd30 <am_hal_interrupt_master_set>
    dcd2:	2000      	movs	r0, #0
    dcd4:	b002      	add	sp, #8
    dcd6:	bd70      	pop	{r4, r5, r6, pc}
    dcd8:	4b0d      	ldr	r3, [pc, #52]	; (dd10 <am_hal_gpio_state_write+0x84>)
    dcda:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dcde:	e7f5      	b.n	dccc <am_hal_gpio_state_write+0x40>
    dce0:	4a0c      	ldr	r2, [pc, #48]	; (dd14 <am_hal_gpio_state_write+0x88>)
    dce2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dce6:	4073      	eors	r3, r6
    dce8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dcec:	e7ee      	b.n	dccc <am_hal_gpio_state_write+0x40>
    dcee:	4b0a      	ldr	r3, [pc, #40]	; (dd18 <am_hal_gpio_state_write+0x8c>)
    dcf0:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dcf4:	e7ea      	b.n	dccc <am_hal_gpio_state_write+0x40>
    dcf6:	4b09      	ldr	r3, [pc, #36]	; (dd1c <am_hal_gpio_state_write+0x90>)
    dcf8:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dcfc:	e7e6      	b.n	dccc <am_hal_gpio_state_write+0x40>
    dcfe:	4a04      	ldr	r2, [pc, #16]	; (dd10 <am_hal_gpio_state_write+0x84>)
    dd00:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dd04:	4073      	eors	r3, r6
    dd06:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dd0a:	e7df      	b.n	dccc <am_hal_gpio_state_write+0x40>
    dd0c:	400100a8 	.word	0x400100a8
    dd10:	400100b4 	.word	0x400100b4
    dd14:	40010088 	.word	0x40010088
    dd18:	40010090 	.word	0x40010090
    dd1c:	40010098 	.word	0x40010098

0000dd20 <am_hal_interrupt_master_enable>:
    dd20:	f3ef 8010 	mrs	r0, PRIMASK
    dd24:	b662      	cpsie	i
    dd26:	4770      	bx	lr

0000dd28 <am_hal_interrupt_master_disable>:
    dd28:	f3ef 8010 	mrs	r0, PRIMASK
    dd2c:	b672      	cpsid	i
    dd2e:	4770      	bx	lr

0000dd30 <am_hal_interrupt_master_set>:
    dd30:	f380 8810 	msr	PRIMASK, r0
    dd34:	4770      	bx	lr
    dd36:	bf00      	nop

0000dd38 <am_hal_itm_enable>:
    dd38:	4a0b      	ldr	r2, [pc, #44]	; (dd68 <am_hal_itm_enable+0x30>)
    dd3a:	68d3      	ldr	r3, [r2, #12]
    dd3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dd40:	60d3      	str	r3, [r2, #12]
    dd42:	68d3      	ldr	r3, [r2, #12]
    dd44:	01db      	lsls	r3, r3, #7
    dd46:	d5fc      	bpl.n	dd42 <am_hal_itm_enable+0xa>
    dd48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dd4c:	4907      	ldr	r1, [pc, #28]	; (dd6c <am_hal_itm_enable+0x34>)
    dd4e:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    dd52:	4a07      	ldr	r2, [pc, #28]	; (dd70 <am_hal_itm_enable+0x38>)
    dd54:	200f      	movs	r0, #15
    dd56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dd5a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dd5e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dd62:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dd66:	4770      	bx	lr
    dd68:	e000edf0 	.word	0xe000edf0
    dd6c:	c5acce55 	.word	0xc5acce55
    dd70:	00150511 	.word	0x00150511

0000dd74 <am_hal_itm_disable>:
    dd74:	b510      	push	{r4, lr}
    dd76:	4b25      	ldr	r3, [pc, #148]	; (de0c <am_hal_itm_disable+0x98>)
    dd78:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dd7c:	b9b3      	cbnz	r3, ddac <am_hal_itm_disable+0x38>
    dd7e:	4b24      	ldr	r3, [pc, #144]	; (de10 <am_hal_itm_disable+0x9c>)
    dd80:	68da      	ldr	r2, [r3, #12]
    dd82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    dd86:	60da      	str	r2, [r3, #12]
    dd88:	68da      	ldr	r2, [r3, #12]
    dd8a:	01d2      	lsls	r2, r2, #7
    dd8c:	d5fc      	bpl.n	dd88 <am_hal_itm_disable+0x14>
    dd8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dd92:	4920      	ldr	r1, [pc, #128]	; (de14 <am_hal_itm_disable+0xa0>)
    dd94:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    dd98:	4a1f      	ldr	r2, [pc, #124]	; (de18 <am_hal_itm_disable+0xa4>)
    dd9a:	200f      	movs	r0, #15
    dd9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dda0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dda4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dda8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ddac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ddb0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ddb4:	021b      	lsls	r3, r3, #8
    ddb6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ddba:	d4f9      	bmi.n	ddb0 <am_hal_itm_disable+0x3c>
    ddbc:	f240 20f7 	movw	r0, #759	; 0x2f7
    ddc0:	f7ff fdf4 	bl	d9ac <am_hal_flash_delay>
    ddc4:	4b13      	ldr	r3, [pc, #76]	; (de14 <am_hal_itm_disable+0xa0>)
    ddc6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ddca:	4621      	mov	r1, r4
    ddcc:	2064      	movs	r0, #100	; 0x64
    ddce:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ddd2:	f023 0301 	bic.w	r3, r3, #1
    ddd6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ddda:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ddde:	4b0f      	ldr	r3, [pc, #60]	; (de1c <am_hal_itm_disable+0xa8>)
    dde0:	4013      	ands	r3, r2
    dde2:	2b00      	cmp	r3, #0
    dde4:	d1f9      	bne.n	ddda <am_hal_itm_disable+0x66>
    dde6:	3801      	subs	r0, #1
    dde8:	d1f1      	bne.n	ddce <am_hal_itm_disable+0x5a>
    ddea:	4a09      	ldr	r2, [pc, #36]	; (de10 <am_hal_itm_disable+0x9c>)
    ddec:	68d3      	ldr	r3, [r2, #12]
    ddee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ddf2:	60d3      	str	r3, [r2, #12]
    ddf4:	68d3      	ldr	r3, [r2, #12]
    ddf6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ddfa:	d1fb      	bne.n	ddf4 <am_hal_itm_disable+0x80>
    ddfc:	4a03      	ldr	r2, [pc, #12]	; (de0c <am_hal_itm_disable+0x98>)
    ddfe:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    de02:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    de06:	2b00      	cmp	r3, #0
    de08:	d1fb      	bne.n	de02 <am_hal_itm_disable+0x8e>
    de0a:	bd10      	pop	{r4, pc}
    de0c:	40020000 	.word	0x40020000
    de10:	e000edf0 	.word	0xe000edf0
    de14:	c5acce55 	.word	0xc5acce55
    de18:	00150511 	.word	0x00150511
    de1c:	00800001 	.word	0x00800001

0000de20 <am_hal_itm_print>:
    de20:	7803      	ldrb	r3, [r0, #0]
    de22:	b1a3      	cbz	r3, de4e <am_hal_itm_print+0x2e>
    de24:	4602      	mov	r2, r0
    de26:	2300      	movs	r3, #0
    de28:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    de2c:	3301      	adds	r3, #1
    de2e:	2900      	cmp	r1, #0
    de30:	d1fa      	bne.n	de28 <am_hal_itm_print+0x8>
    de32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    de36:	b430      	push	{r4, r5}
    de38:	18c1      	adds	r1, r0, r3
    de3a:	4615      	mov	r5, r2
    de3c:	f810 4b01 	ldrb.w	r4, [r0], #1
    de40:	6813      	ldr	r3, [r2, #0]
    de42:	2b00      	cmp	r3, #0
    de44:	d0fc      	beq.n	de40 <am_hal_itm_print+0x20>
    de46:	4288      	cmp	r0, r1
    de48:	702c      	strb	r4, [r5, #0]
    de4a:	d1f7      	bne.n	de3c <am_hal_itm_print+0x1c>
    de4c:	bc30      	pop	{r4, r5}
    de4e:	4770      	bx	lr

0000de50 <am_hal_mcuctrl_info_get>:
    de50:	b4f0      	push	{r4, r5, r6, r7}
    de52:	b121      	cbz	r1, de5e <am_hal_mcuctrl_info_get+0xe>
    de54:	2801      	cmp	r0, #1
    de56:	d038      	beq.n	deca <am_hal_mcuctrl_info_get+0x7a>
    de58:	d320      	bcc.n	de9c <am_hal_mcuctrl_info_get+0x4c>
    de5a:	2802      	cmp	r0, #2
    de5c:	d002      	beq.n	de64 <am_hal_mcuctrl_info_get+0x14>
    de5e:	2006      	movs	r0, #6
    de60:	bcf0      	pop	{r4, r5, r6, r7}
    de62:	4770      	bx	lr
    de64:	4a41      	ldr	r2, [pc, #260]	; (df6c <am_hal_mcuctrl_info_get+0x11c>)
    de66:	684d      	ldr	r5, [r1, #4]
    de68:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    de6c:	694c      	ldr	r4, [r1, #20]
    de6e:	f003 0601 	and.w	r6, r3, #1
    de72:	f3c3 0040 	ubfx	r0, r3, #1, #1
    de76:	f3c3 0380 	ubfx	r3, r3, #2, #1
    de7a:	700e      	strb	r6, [r1, #0]
    de7c:	7208      	strb	r0, [r1, #8]
    de7e:	740b      	strb	r3, [r1, #16]
    de80:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    de84:	60cb      	str	r3, [r1, #12]
    de86:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    de8a:	4328      	orrs	r0, r5
    de8c:	6048      	str	r0, [r1, #4]
    de8e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    de92:	4323      	orrs	r3, r4
    de94:	2000      	movs	r0, #0
    de96:	614b      	str	r3, [r1, #20]
    de98:	bcf0      	pop	{r4, r5, r6, r7}
    de9a:	4770      	bx	lr
    de9c:	4a33      	ldr	r2, [pc, #204]	; (df6c <am_hal_mcuctrl_info_get+0x11c>)
    de9e:	6993      	ldr	r3, [r2, #24]
    dea0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    dea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dea8:	7008      	strb	r0, [r1, #0]
    deaa:	704b      	strb	r3, [r1, #1]
    deac:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    deb0:	f3c3 6381 	ubfx	r3, r3, #26, #2
    deb4:	710b      	strb	r3, [r1, #4]
    deb6:	6953      	ldr	r3, [r2, #20]
    deb8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    debc:	f003 0301 	and.w	r3, r3, #1
    dec0:	2000      	movs	r0, #0
    dec2:	708a      	strb	r2, [r1, #2]
    dec4:	70cb      	strb	r3, [r1, #3]
    dec6:	bcf0      	pop	{r4, r5, r6, r7}
    dec8:	4770      	bx	lr
    deca:	4b28      	ldr	r3, [pc, #160]	; (df6c <am_hal_mcuctrl_info_get+0x11c>)
    decc:	4c28      	ldr	r4, [pc, #160]	; (df70 <am_hal_mcuctrl_info_get+0x120>)
    dece:	681a      	ldr	r2, [r3, #0]
    ded0:	600a      	str	r2, [r1, #0]
    ded2:	6858      	ldr	r0, [r3, #4]
    ded4:	6048      	str	r0, [r1, #4]
    ded6:	6898      	ldr	r0, [r3, #8]
    ded8:	6088      	str	r0, [r1, #8]
    deda:	68d8      	ldr	r0, [r3, #12]
    dedc:	60c8      	str	r0, [r1, #12]
    dede:	691d      	ldr	r5, [r3, #16]
    dee0:	4824      	ldr	r0, [pc, #144]	; (df74 <am_hal_mcuctrl_info_get+0x124>)
    dee2:	610d      	str	r5, [r1, #16]
    dee4:	f3c2 5703 	ubfx	r7, r2, #20, #4
    dee8:	f3c2 4603 	ubfx	r6, r2, #16, #4
    deec:	695d      	ldr	r5, [r3, #20]
    deee:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    def2:	4b21      	ldr	r3, [pc, #132]	; (df78 <am_hal_mcuctrl_info_get+0x128>)
    def4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    def8:	6208      	str	r0, [r1, #32]
    defa:	f002 0201 	and.w	r2, r2, #1
    defe:	614d      	str	r5, [r1, #20]
    df00:	61cc      	str	r4, [r1, #28]
    df02:	618a      	str	r2, [r1, #24]
    df04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    df08:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    df0c:	b2d0      	uxtb	r0, r2
    df0e:	f004 020f 	and.w	r2, r4, #15
    df12:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    df16:	624a      	str	r2, [r1, #36]	; 0x24
    df18:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    df1c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    df20:	f3c2 1003 	ubfx	r0, r2, #4, #4
    df24:	f004 020f 	and.w	r2, r4, #15
    df28:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    df2c:	628a      	str	r2, [r1, #40]	; 0x28
    df2e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    df32:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    df36:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    df3a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    df3e:	4302      	orrs	r2, r0
    df40:	62ca      	str	r2, [r1, #44]	; 0x2c
    df42:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    df46:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    df4a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    df4e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    df52:	b2c0      	uxtb	r0, r0
    df54:	0400      	lsls	r0, r0, #16
    df56:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    df5a:	b2d2      	uxtb	r2, r2
    df5c:	431a      	orrs	r2, r3
    df5e:	b2e3      	uxtb	r3, r4
    df60:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    df64:	630b      	str	r3, [r1, #48]	; 0x30
    df66:	2000      	movs	r0, #0
    df68:	bcf0      	pop	{r4, r5, r6, r7}
    df6a:	4770      	bx	lr
    df6c:	40020000 	.word	0x40020000
    df70:	0000ed20 	.word	0x0000ed20
    df74:	0000ed60 	.word	0x0000ed60
    df78:	f0000f00 	.word	0xf0000f00

0000df7c <am_hal_pwrctrl_periph_enable>:
    df7c:	b570      	push	{r4, r5, r6, lr}
    df7e:	b082      	sub	sp, #8
    df80:	4604      	mov	r4, r0
    df82:	f7ff fed1 	bl	dd28 <am_hal_interrupt_master_disable>
    df86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    df8a:	4d0f      	ldr	r5, [pc, #60]	; (dfc8 <am_hal_pwrctrl_periph_enable+0x4c>)
    df8c:	4e0f      	ldr	r6, [pc, #60]	; (dfcc <am_hal_pwrctrl_periph_enable+0x50>)
    df8e:	9001      	str	r0, [sp, #4]
    df90:	00a4      	lsls	r4, r4, #2
    df92:	68aa      	ldr	r2, [r5, #8]
    df94:	5933      	ldr	r3, [r6, r4]
    df96:	4313      	orrs	r3, r2
    df98:	60ab      	str	r3, [r5, #8]
    df9a:	9801      	ldr	r0, [sp, #4]
    df9c:	4434      	add	r4, r6
    df9e:	f7ff fec7 	bl	dd30 <am_hal_interrupt_master_set>
    dfa2:	2077      	movs	r0, #119	; 0x77
    dfa4:	f7ff fd02 	bl	d9ac <am_hal_flash_delay>
    dfa8:	69ab      	ldr	r3, [r5, #24]
    dfaa:	6864      	ldr	r4, [r4, #4]
    dfac:	4223      	tst	r3, r4
    dfae:	d103      	bne.n	dfb8 <am_hal_pwrctrl_periph_enable+0x3c>
    dfb0:	2077      	movs	r0, #119	; 0x77
    dfb2:	f7ff fcfb 	bl	d9ac <am_hal_flash_delay>
    dfb6:	69ab      	ldr	r3, [r5, #24]
    dfb8:	4b03      	ldr	r3, [pc, #12]	; (dfc8 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfba:	699b      	ldr	r3, [r3, #24]
    dfbc:	4223      	tst	r3, r4
    dfbe:	bf0c      	ite	eq
    dfc0:	2001      	moveq	r0, #1
    dfc2:	2000      	movne	r0, #0
    dfc4:	b002      	add	sp, #8
    dfc6:	bd70      	pop	{r4, r5, r6, pc}
    dfc8:	40021000 	.word	0x40021000
    dfcc:	0000eda0 	.word	0x0000eda0

0000dfd0 <am_hal_pwrctrl_periph_disable>:
    dfd0:	b570      	push	{r4, r5, r6, lr}
    dfd2:	b082      	sub	sp, #8
    dfd4:	4604      	mov	r4, r0
    dfd6:	f7ff fea7 	bl	dd28 <am_hal_interrupt_master_disable>
    dfda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dfde:	4d10      	ldr	r5, [pc, #64]	; (e020 <am_hal_pwrctrl_periph_disable+0x50>)
    dfe0:	4e10      	ldr	r6, [pc, #64]	; (e024 <am_hal_pwrctrl_periph_disable+0x54>)
    dfe2:	9001      	str	r0, [sp, #4]
    dfe4:	00a4      	lsls	r4, r4, #2
    dfe6:	68ab      	ldr	r3, [r5, #8]
    dfe8:	5932      	ldr	r2, [r6, r4]
    dfea:	ea23 0302 	bic.w	r3, r3, r2
    dfee:	60ab      	str	r3, [r5, #8]
    dff0:	9801      	ldr	r0, [sp, #4]
    dff2:	4434      	add	r4, r6
    dff4:	f7ff fe9c 	bl	dd30 <am_hal_interrupt_master_set>
    dff8:	2077      	movs	r0, #119	; 0x77
    dffa:	f7ff fcd7 	bl	d9ac <am_hal_flash_delay>
    dffe:	69ab      	ldr	r3, [r5, #24]
    e000:	6864      	ldr	r4, [r4, #4]
    e002:	4223      	tst	r3, r4
    e004:	d003      	beq.n	e00e <am_hal_pwrctrl_periph_disable+0x3e>
    e006:	2077      	movs	r0, #119	; 0x77
    e008:	f7ff fcd0 	bl	d9ac <am_hal_flash_delay>
    e00c:	69ab      	ldr	r3, [r5, #24]
    e00e:	4b04      	ldr	r3, [pc, #16]	; (e020 <am_hal_pwrctrl_periph_disable+0x50>)
    e010:	699b      	ldr	r3, [r3, #24]
    e012:	4223      	tst	r3, r4
    e014:	bf14      	ite	ne
    e016:	2001      	movne	r0, #1
    e018:	2000      	moveq	r0, #0
    e01a:	b002      	add	sp, #8
    e01c:	bd70      	pop	{r4, r5, r6, pc}
    e01e:	bf00      	nop
    e020:	40021000 	.word	0x40021000
    e024:	0000eda0 	.word	0x0000eda0

0000e028 <am_hal_pwrctrl_low_power_init>:
    e028:	b530      	push	{r4, r5, lr}
    e02a:	4b1f      	ldr	r3, [pc, #124]	; (e0a8 <am_hal_pwrctrl_low_power_init+0x80>)
    e02c:	681a      	ldr	r2, [r3, #0]
    e02e:	b083      	sub	sp, #12
    e030:	b912      	cbnz	r2, e038 <am_hal_pwrctrl_low_power_init+0x10>
    e032:	4a1e      	ldr	r2, [pc, #120]	; (e0ac <am_hal_pwrctrl_low_power_init+0x84>)
    e034:	6812      	ldr	r2, [r2, #0]
    e036:	601a      	str	r2, [r3, #0]
    e038:	4c1d      	ldr	r4, [pc, #116]	; (e0b0 <am_hal_pwrctrl_low_power_init+0x88>)
    e03a:	69a3      	ldr	r3, [r4, #24]
    e03c:	05db      	lsls	r3, r3, #23
    e03e:	d502      	bpl.n	e046 <am_hal_pwrctrl_low_power_init+0x1e>
    e040:	2000      	movs	r0, #0
    e042:	b003      	add	sp, #12
    e044:	bd30      	pop	{r4, r5, pc}
    e046:	4d1b      	ldr	r5, [pc, #108]	; (e0b4 <am_hal_pwrctrl_low_power_init+0x8c>)
    e048:	491b      	ldr	r1, [pc, #108]	; (e0b8 <am_hal_pwrctrl_low_power_init+0x90>)
    e04a:	7e2a      	ldrb	r2, [r5, #24]
    e04c:	2001      	movs	r0, #1
    e04e:	4302      	orrs	r2, r0
    e050:	2307      	movs	r3, #7
    e052:	762a      	strb	r2, [r5, #24]
    e054:	9000      	str	r0, [sp, #0]
    e056:	461a      	mov	r2, r3
    e058:	f242 7010 	movw	r0, #10000	; 0x2710
    e05c:	f7ff fcaa 	bl	d9b4 <am_hal_flash_delay_status_check>
    e060:	b110      	cbz	r0, e068 <am_hal_pwrctrl_low_power_init+0x40>
    e062:	2004      	movs	r0, #4
    e064:	b003      	add	sp, #12
    e066:	bd30      	pop	{r4, r5, pc}
    e068:	6823      	ldr	r3, [r4, #0]
    e06a:	f043 0301 	orr.w	r3, r3, #1
    e06e:	6023      	str	r3, [r4, #0]
    e070:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e076:	6263      	str	r3, [r4, #36]	; 0x24
    e078:	68eb      	ldr	r3, [r5, #12]
    e07a:	b2db      	uxtb	r3, r3
    e07c:	2b11      	cmp	r3, #17
    e07e:	d1df      	bne.n	e040 <am_hal_pwrctrl_low_power_init+0x18>
    e080:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e084:	f360 5356 	bfi	r3, r0, #21, #2
    e088:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e08c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e090:	220f      	movs	r2, #15
    e092:	f362 138b 	bfi	r3, r2, #6, #6
    e096:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e09a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e09e:	f362 0305 	bfi	r3, r2, #0, #6
    e0a2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e0a6:	e7cc      	b.n	e042 <am_hal_pwrctrl_low_power_init+0x1a>
    e0a8:	1000c97c 	.word	0x1000c97c
    e0ac:	4ffff000 	.word	0x4ffff000
    e0b0:	40021000 	.word	0x40021000
    e0b4:	40020000 	.word	0x40020000
    e0b8:	40020018 	.word	0x40020018

0000e0bc <am_hal_rtc_osc_select>:
    e0bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e0c0:	2801      	cmp	r0, #1
    e0c2:	68d3      	ldr	r3, [r2, #12]
    e0c4:	bf0c      	ite	eq
    e0c6:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    e0ca:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e0ce:	60d3      	str	r3, [r2, #12]
    e0d0:	4770      	bx	lr
    e0d2:	bf00      	nop

0000e0d4 <am_hal_rtc_osc_disable>:
    e0d4:	4a03      	ldr	r2, [pc, #12]	; (e0e4 <am_hal_rtc_osc_disable+0x10>)
    e0d6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e0da:	f043 0310 	orr.w	r3, r3, #16
    e0de:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e0e2:	4770      	bx	lr
    e0e4:	40004200 	.word	0x40004200

0000e0e8 <am_hal_sysctrl_sleep>:
    e0e8:	b510      	push	{r4, lr}
    e0ea:	b082      	sub	sp, #8
    e0ec:	4604      	mov	r4, r0
    e0ee:	f7ff fe1b 	bl	dd28 <am_hal_interrupt_master_disable>
    e0f2:	4a0f      	ldr	r2, [pc, #60]	; (e130 <am_hal_sysctrl_sleep+0x48>)
    e0f4:	9001      	str	r0, [sp, #4]
    e0f6:	b124      	cbz	r4, e102 <am_hal_sysctrl_sleep+0x1a>
    e0f8:	4b0e      	ldr	r3, [pc, #56]	; (e134 <am_hal_sysctrl_sleep+0x4c>)
    e0fa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e0fe:	07db      	lsls	r3, r3, #31
    e100:	d511      	bpl.n	e126 <am_hal_sysctrl_sleep+0x3e>
    e102:	6913      	ldr	r3, [r2, #16]
    e104:	f023 0304 	bic.w	r3, r3, #4
    e108:	6113      	str	r3, [r2, #16]
    e10a:	f3bf 8f4f 	dsb	sy
    e10e:	4a0a      	ldr	r2, [pc, #40]	; (e138 <am_hal_sysctrl_sleep+0x50>)
    e110:	4b0a      	ldr	r3, [pc, #40]	; (e13c <am_hal_sysctrl_sleep+0x54>)
    e112:	6812      	ldr	r2, [r2, #0]
    e114:	601a      	str	r2, [r3, #0]
    e116:	bf30      	wfi
    e118:	f3bf 8f6f 	isb	sy
    e11c:	9801      	ldr	r0, [sp, #4]
    e11e:	f7ff fe07 	bl	dd30 <am_hal_interrupt_master_set>
    e122:	b002      	add	sp, #8
    e124:	bd10      	pop	{r4, pc}
    e126:	6913      	ldr	r3, [r2, #16]
    e128:	f043 0304 	orr.w	r3, r3, #4
    e12c:	6113      	str	r3, [r2, #16]
    e12e:	e7ec      	b.n	e10a <am_hal_sysctrl_sleep+0x22>
    e130:	e000ed00 	.word	0xe000ed00
    e134:	40020000 	.word	0x40020000
    e138:	5fff0000 	.word	0x5fff0000
    e13c:	1000c980 	.word	0x1000c980

0000e140 <am_hal_tpiu_enable>:
    e140:	b530      	push	{r4, r5, lr}
    e142:	4a23      	ldr	r2, [pc, #140]	; (e1d0 <am_hal_tpiu_enable+0x90>)
    e144:	6804      	ldr	r4, [r0, #0]
    e146:	2300      	movs	r3, #0
    e148:	b085      	sub	sp, #20
    e14a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    e14e:	b334      	cbz	r4, e19e <am_hal_tpiu_enable+0x5e>
    e150:	4b20      	ldr	r3, [pc, #128]	; (e1d4 <am_hal_tpiu_enable+0x94>)
    e152:	4921      	ldr	r1, [pc, #132]	; (e1d8 <am_hal_tpiu_enable+0x98>)
    e154:	2001      	movs	r0, #1
    e156:	6050      	str	r0, [r2, #4]
    e158:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
    e15c:	a801      	add	r0, sp, #4
    e15e:	428a      	cmp	r2, r1
    e160:	bf88      	it	hi
    e162:	461c      	movhi	r4, r3
    e164:	f7ff fb1c 	bl	d7a0 <am_hal_clkgen_status_get>
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	1c5a      	adds	r2, r3, #1
    e16c:	d02d      	beq.n	e1ca <am_hal_tpiu_enable+0x8a>
    e16e:	08db      	lsrs	r3, r3, #3
    e170:	fbb3 f3f4 	udiv	r3, r3, r4
    e174:	3b01      	subs	r3, #1
    e176:	b29b      	uxth	r3, r3
    e178:	4a15      	ldr	r2, [pc, #84]	; (e1d0 <am_hal_tpiu_enable+0x90>)
    e17a:	4918      	ldr	r1, [pc, #96]	; (e1dc <am_hal_tpiu_enable+0x9c>)
    e17c:	6113      	str	r3, [r2, #16]
    e17e:	2402      	movs	r4, #2
    e180:	f240 2301 	movw	r3, #513	; 0x201
    e184:	2000      	movs	r0, #0
    e186:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
    e18a:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
    e18e:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    e192:	f240 20f7 	movw	r0, #759	; 0x2f7
    e196:	f7ff fc09 	bl	d9ac <am_hal_flash_delay>
    e19a:	b005      	add	sp, #20
    e19c:	bd30      	pop	{r4, r5, pc}
    e19e:	6903      	ldr	r3, [r0, #16]
    e1a0:	6113      	str	r3, [r2, #16]
    e1a2:	6883      	ldr	r3, [r0, #8]
    e1a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e1a8:	68c3      	ldr	r3, [r0, #12]
    e1aa:	4d0c      	ldr	r5, [pc, #48]	; (e1dc <am_hal_tpiu_enable+0x9c>)
    e1ac:	1e59      	subs	r1, r3, #1
    e1ae:	2301      	movs	r3, #1
    e1b0:	408b      	lsls	r3, r1
    e1b2:	6053      	str	r3, [r2, #4]
    e1b4:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
    e1b8:	6843      	ldr	r3, [r0, #4]
    e1ba:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    e1be:	f240 20f7 	movw	r0, #759	; 0x2f7
    e1c2:	f7ff fbf3 	bl	d9ac <am_hal_flash_delay>
    e1c6:	b005      	add	sp, #20
    e1c8:	bd30      	pop	{r4, r5, pc}
    e1ca:	2305      	movs	r3, #5
    e1cc:	e7d4      	b.n	e178 <am_hal_tpiu_enable+0x38>
    e1ce:	bf00      	nop
    e1d0:	e0040000 	.word	0xe0040000
    e1d4:	000f4240 	.word	0x000f4240
    e1d8:	001da380 	.word	0x001da380
    e1dc:	40020000 	.word	0x40020000

0000e1e0 <am_hal_uart_initialize>:
    e1e0:	2801      	cmp	r0, #1
    e1e2:	d901      	bls.n	e1e8 <am_hal_uart_initialize+0x8>
    e1e4:	2005      	movs	r0, #5
    e1e6:	4770      	bx	lr
    e1e8:	b169      	cbz	r1, e206 <am_hal_uart_initialize+0x26>
    e1ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1ec:	2264      	movs	r2, #100	; 0x64
    e1ee:	4e0e      	ldr	r6, [pc, #56]	; (e228 <am_hal_uart_initialize+0x48>)
    e1f0:	fb02 f200 	mul.w	r2, r2, r0
    e1f4:	18b4      	adds	r4, r6, r2
    e1f6:	4603      	mov	r3, r0
    e1f8:	78e0      	ldrb	r0, [r4, #3]
    e1fa:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e1fe:	b2fd      	uxtb	r5, r7
    e200:	b11d      	cbz	r5, e20a <am_hal_uart_initialize+0x2a>
    e202:	2007      	movs	r0, #7
    e204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e206:	2006      	movs	r0, #6
    e208:	4770      	bx	lr
    e20a:	f040 0001 	orr.w	r0, r0, #1
    e20e:	70e0      	strb	r0, [r4, #3]
    e210:	58b0      	ldr	r0, [r6, r2]
    e212:	f8df e018 	ldr.w	lr, [pc, #24]	; e22c <am_hal_uart_initialize+0x4c>
    e216:	f36e 0017 	bfi	r0, lr, #0, #24
    e21a:	50b0      	str	r0, [r6, r2]
    e21c:	6263      	str	r3, [r4, #36]	; 0x24
    e21e:	7127      	strb	r7, [r4, #4]
    e220:	6625      	str	r5, [r4, #96]	; 0x60
    e222:	4628      	mov	r0, r5
    e224:	600c      	str	r4, [r1, #0]
    e226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e228:	1000c988 	.word	0x1000c988
    e22c:	00ea9e06 	.word	0x00ea9e06

0000e230 <am_hal_uart_deinitialize>:
    e230:	b128      	cbz	r0, e23e <am_hal_uart_deinitialize+0xe>
    e232:	6803      	ldr	r3, [r0, #0]
    e234:	4a07      	ldr	r2, [pc, #28]	; (e254 <am_hal_uart_deinitialize+0x24>)
    e236:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e23a:	4293      	cmp	r3, r2
    e23c:	d001      	beq.n	e242 <am_hal_uart_deinitialize+0x12>
    e23e:	2002      	movs	r0, #2
    e240:	4770      	bx	lr
    e242:	78c2      	ldrb	r2, [r0, #3]
    e244:	2300      	movs	r3, #0
    e246:	f36f 0200 	bfc	r2, #0, #1
    e24a:	70c2      	strb	r2, [r0, #3]
    e24c:	6243      	str	r3, [r0, #36]	; 0x24
    e24e:	7103      	strb	r3, [r0, #4]
    e250:	4618      	mov	r0, r3
    e252:	4770      	bx	lr
    e254:	01ea9e06 	.word	0x01ea9e06

0000e258 <am_hal_uart_power_control>:
    e258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e25c:	6804      	ldr	r4, [r0, #0]
    e25e:	4b36      	ldr	r3, [pc, #216]	; (e338 <am_hal_uart_power_control+0xe0>)
    e260:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e264:	429c      	cmp	r4, r3
    e266:	b083      	sub	sp, #12
    e268:	d003      	beq.n	e272 <am_hal_uart_power_control+0x1a>
    e26a:	2002      	movs	r0, #2
    e26c:	b003      	add	sp, #12
    e26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e272:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e274:	4605      	mov	r5, r0
    e276:	f107 0008 	add.w	r0, r7, #8
    e27a:	4691      	mov	r9, r2
    e27c:	460e      	mov	r6, r1
    e27e:	fa5f f880 	uxtb.w	r8, r0
    e282:	b181      	cbz	r1, e2a6 <am_hal_uart_power_control+0x4e>
    e284:	2902      	cmp	r1, #2
    e286:	d80c      	bhi.n	e2a2 <am_hal_uart_power_control+0x4a>
    e288:	b992      	cbnz	r2, e2b0 <am_hal_uart_power_control+0x58>
    e28a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e28e:	371c      	adds	r7, #28
    e290:	033f      	lsls	r7, r7, #12
    e292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e296:	647b      	str	r3, [r7, #68]	; 0x44
    e298:	4640      	mov	r0, r8
    e29a:	f7ff fe99 	bl	dfd0 <am_hal_pwrctrl_periph_disable>
    e29e:	2000      	movs	r0, #0
    e2a0:	e7e4      	b.n	e26c <am_hal_uart_power_control+0x14>
    e2a2:	2006      	movs	r0, #6
    e2a4:	e7e2      	b.n	e26c <am_hal_uart_power_control+0x14>
    e2a6:	b322      	cbz	r2, e2f2 <am_hal_uart_power_control+0x9a>
    e2a8:	792b      	ldrb	r3, [r5, #4]
    e2aa:	bb3b      	cbnz	r3, e2fc <am_hal_uart_power_control+0xa4>
    e2ac:	2007      	movs	r0, #7
    e2ae:	e7dd      	b.n	e26c <am_hal_uart_power_control+0x14>
    e2b0:	f7ff fd3a 	bl	dd28 <am_hal_interrupt_master_disable>
    e2b4:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e2b8:	331c      	adds	r3, #28
    e2ba:	031b      	lsls	r3, r3, #12
    e2bc:	9001      	str	r0, [sp, #4]
    e2be:	6a1a      	ldr	r2, [r3, #32]
    e2c0:	60aa      	str	r2, [r5, #8]
    e2c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e2c4:	60ea      	str	r2, [r5, #12]
    e2c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e2c8:	612a      	str	r2, [r5, #16]
    e2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e2cc:	616a      	str	r2, [r5, #20]
    e2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e2d0:	61aa      	str	r2, [r5, #24]
    e2d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e2d4:	61ea      	str	r2, [r5, #28]
    e2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e2d8:	622b      	str	r3, [r5, #32]
    e2da:	2301      	movs	r3, #1
    e2dc:	712b      	strb	r3, [r5, #4]
    e2de:	9801      	ldr	r0, [sp, #4]
    e2e0:	f7ff fd26 	bl	dd30 <am_hal_interrupt_master_set>
    e2e4:	682b      	ldr	r3, [r5, #0]
    e2e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e2ea:	42a3      	cmp	r3, r4
    e2ec:	d1d4      	bne.n	e298 <am_hal_uart_power_control+0x40>
    e2ee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e2f0:	e7cb      	b.n	e28a <am_hal_uart_power_control+0x32>
    e2f2:	4640      	mov	r0, r8
    e2f4:	f7ff fe42 	bl	df7c <am_hal_pwrctrl_periph_enable>
    e2f8:	4648      	mov	r0, r9
    e2fa:	e7b7      	b.n	e26c <am_hal_uart_power_control+0x14>
    e2fc:	4640      	mov	r0, r8
    e2fe:	f7ff fe3d 	bl	df7c <am_hal_pwrctrl_periph_enable>
    e302:	f7ff fd11 	bl	dd28 <am_hal_interrupt_master_disable>
    e306:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e30a:	331c      	adds	r3, #28
    e30c:	031b      	lsls	r3, r3, #12
    e30e:	68aa      	ldr	r2, [r5, #8]
    e310:	9000      	str	r0, [sp, #0]
    e312:	621a      	str	r2, [r3, #32]
    e314:	68ea      	ldr	r2, [r5, #12]
    e316:	625a      	str	r2, [r3, #36]	; 0x24
    e318:	692a      	ldr	r2, [r5, #16]
    e31a:	629a      	str	r2, [r3, #40]	; 0x28
    e31c:	696a      	ldr	r2, [r5, #20]
    e31e:	62da      	str	r2, [r3, #44]	; 0x2c
    e320:	69aa      	ldr	r2, [r5, #24]
    e322:	631a      	str	r2, [r3, #48]	; 0x30
    e324:	69ea      	ldr	r2, [r5, #28]
    e326:	635a      	str	r2, [r3, #52]	; 0x34
    e328:	6a2a      	ldr	r2, [r5, #32]
    e32a:	639a      	str	r2, [r3, #56]	; 0x38
    e32c:	9800      	ldr	r0, [sp, #0]
    e32e:	712e      	strb	r6, [r5, #4]
    e330:	f7ff fcfe 	bl	dd30 <am_hal_interrupt_master_set>
    e334:	4630      	mov	r0, r6
    e336:	e799      	b.n	e26c <am_hal_uart_power_control+0x14>
    e338:	01ea9e06 	.word	0x01ea9e06

0000e33c <am_hal_uart_configure>:
    e33c:	6803      	ldr	r3, [r0, #0]
    e33e:	4a7a      	ldr	r2, [pc, #488]	; (e528 <am_hal_uart_configure+0x1ec>)
    e340:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e344:	4293      	cmp	r3, r2
    e346:	d001      	beq.n	e34c <am_hal_uart_configure+0x10>
    e348:	2002      	movs	r0, #2
    e34a:	4770      	bx	lr
    e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e350:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e352:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e356:	351c      	adds	r5, #28
    e358:	032d      	lsls	r5, r5, #12
    e35a:	2700      	movs	r7, #0
    e35c:	b084      	sub	sp, #16
    e35e:	632f      	str	r7, [r5, #48]	; 0x30
    e360:	460e      	mov	r6, r1
    e362:	4604      	mov	r4, r0
    e364:	f7ff fce0 	bl	dd28 <am_hal_interrupt_master_disable>
    e368:	9001      	str	r0, [sp, #4]
    e36a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e36c:	f043 0308 	orr.w	r3, r3, #8
    e370:	862b      	strh	r3, [r5, #48]	; 0x30
    e372:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e374:	2201      	movs	r2, #1
    e376:	f362 1306 	bfi	r3, r2, #4, #3
    e37a:	862b      	strh	r3, [r5, #48]	; 0x30
    e37c:	9801      	ldr	r0, [sp, #4]
    e37e:	f7ff fcd7 	bl	dd30 <am_hal_interrupt_master_set>
    e382:	f7ff fcd1 	bl	dd28 <am_hal_interrupt_master_disable>
    e386:	9002      	str	r0, [sp, #8]
    e388:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e38a:	f367 0300 	bfi	r3, r7, #0, #1
    e38e:	862b      	strh	r3, [r5, #48]	; 0x30
    e390:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e392:	f367 2349 	bfi	r3, r7, #9, #1
    e396:	862b      	strh	r3, [r5, #48]	; 0x30
    e398:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e39a:	f367 2308 	bfi	r3, r7, #8, #1
    e39e:	862b      	strh	r3, [r5, #48]	; 0x30
    e3a0:	9802      	ldr	r0, [sp, #8]
    e3a2:	f7ff fcc5 	bl	dd30 <am_hal_interrupt_master_set>
    e3a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e3a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e3ac:	3b01      	subs	r3, #1
    e3ae:	2b03      	cmp	r3, #3
    e3b0:	d854      	bhi.n	e45c <am_hal_uart_configure+0x120>
    e3b2:	e8df f003 	tbb	[pc, r3]
    e3b6:	020e      	.short	0x020e
    e3b8:	1114      	.short	0x1114
    e3ba:	495c      	ldr	r1, [pc, #368]	; (e52c <am_hal_uart_configure+0x1f0>)
    e3bc:	485c      	ldr	r0, [pc, #368]	; (e530 <am_hal_uart_configure+0x1f4>)
    e3be:	6832      	ldr	r2, [r6, #0]
    e3c0:	0112      	lsls	r2, r2, #4
    e3c2:	fbb0 f3f2 	udiv	r3, r0, r2
    e3c6:	b96b      	cbnz	r3, e3e4 <am_hal_uart_configure+0xa8>
    e3c8:	485a      	ldr	r0, [pc, #360]	; (e534 <am_hal_uart_configure+0x1f8>)
    e3ca:	6623      	str	r3, [r4, #96]	; 0x60
    e3cc:	b004      	add	sp, #16
    e3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3d2:	4959      	ldr	r1, [pc, #356]	; (e538 <am_hal_uart_configure+0x1fc>)
    e3d4:	4859      	ldr	r0, [pc, #356]	; (e53c <am_hal_uart_configure+0x200>)
    e3d6:	e7f2      	b.n	e3be <am_hal_uart_configure+0x82>
    e3d8:	4959      	ldr	r1, [pc, #356]	; (e540 <am_hal_uart_configure+0x204>)
    e3da:	485a      	ldr	r0, [pc, #360]	; (e544 <am_hal_uart_configure+0x208>)
    e3dc:	e7ef      	b.n	e3be <am_hal_uart_configure+0x82>
    e3de:	495a      	ldr	r1, [pc, #360]	; (e548 <am_hal_uart_configure+0x20c>)
    e3e0:	485a      	ldr	r0, [pc, #360]	; (e54c <am_hal_uart_configure+0x210>)
    e3e2:	e7ec      	b.n	e3be <am_hal_uart_configure+0x82>
    e3e4:	fbb1 f2f2 	udiv	r2, r1, r2
    e3e8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e3ec:	626b      	str	r3, [r5, #36]	; 0x24
    e3ee:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    e3f2:	626b      	str	r3, [r5, #36]	; 0x24
    e3f4:	fbb0 f0f1 	udiv	r0, r0, r1
    e3f8:	62aa      	str	r2, [r5, #40]	; 0x28
    e3fa:	6620      	str	r0, [r4, #96]	; 0x60
    e3fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e3fe:	f36f 338e 	bfc	r3, #14, #1
    e402:	862b      	strh	r3, [r5, #48]	; 0x30
    e404:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e406:	f36f 33cf 	bfc	r3, #15, #1
    e40a:	862b      	strh	r3, [r5, #48]	; 0x30
    e40c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e40e:	6933      	ldr	r3, [r6, #16]
    e410:	4313      	orrs	r3, r2
    e412:	632b      	str	r3, [r5, #48]	; 0x30
    e414:	6973      	ldr	r3, [r6, #20]
    e416:	636b      	str	r3, [r5, #52]	; 0x34
    e418:	6871      	ldr	r1, [r6, #4]
    e41a:	68b3      	ldr	r3, [r6, #8]
    e41c:	68f2      	ldr	r2, [r6, #12]
    e41e:	430b      	orrs	r3, r1
    e420:	f043 0310 	orr.w	r3, r3, #16
    e424:	4313      	orrs	r3, r2
    e426:	62eb      	str	r3, [r5, #44]	; 0x2c
    e428:	f7ff fc7e 	bl	dd28 <am_hal_interrupt_master_disable>
    e42c:	9003      	str	r0, [sp, #12]
    e42e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e430:	f043 0301 	orr.w	r3, r3, #1
    e434:	862b      	strh	r3, [r5, #48]	; 0x30
    e436:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e43c:	862b      	strh	r3, [r5, #48]	; 0x30
    e43e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e444:	862b      	strh	r3, [r5, #48]	; 0x30
    e446:	9803      	ldr	r0, [sp, #12]
    e448:	f7ff fc72 	bl	dd30 <am_hal_interrupt_master_set>
    e44c:	6825      	ldr	r5, [r4, #0]
    e44e:	4b36      	ldr	r3, [pc, #216]	; (e528 <am_hal_uart_configure+0x1ec>)
    e450:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e454:	429d      	cmp	r5, r3
    e456:	d005      	beq.n	e464 <am_hal_uart_configure+0x128>
    e458:	2000      	movs	r0, #0
    e45a:	e7b7      	b.n	e3cc <am_hal_uart_configure+0x90>
    e45c:	2300      	movs	r3, #0
    e45e:	6623      	str	r3, [r4, #96]	; 0x60
    e460:	483b      	ldr	r0, [pc, #236]	; (e550 <am_hal_uart_configure+0x214>)
    e462:	e7b3      	b.n	e3cc <am_hal_uart_configure+0x90>
    e464:	69b1      	ldr	r1, [r6, #24]
    e466:	6a37      	ldr	r7, [r6, #32]
    e468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e46c:	b109      	cbz	r1, e472 <am_hal_uart_configure+0x136>
    e46e:	69f3      	ldr	r3, [r6, #28]
    e470:	bb3b      	cbnz	r3, e4c2 <am_hal_uart_configure+0x186>
    e472:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e474:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e478:	f103 021c 	add.w	r2, r3, #28
    e47c:	0312      	lsls	r2, r2, #12
    e47e:	2100      	movs	r1, #0
    e480:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e484:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e486:	f021 0120 	bic.w	r1, r1, #32
    e48a:	6391      	str	r1, [r2, #56]	; 0x38
    e48c:	b1b7      	cbz	r7, e4bc <am_hal_uart_configure+0x180>
    e48e:	f1b8 0f00 	cmp.w	r8, #0
    e492:	d12e      	bne.n	e4f2 <am_hal_uart_configure+0x1b6>
    e494:	6823      	ldr	r3, [r4, #0]
    e496:	4a24      	ldr	r2, [pc, #144]	; (e528 <am_hal_uart_configure+0x1ec>)
    e498:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e49c:	2100      	movs	r1, #0
    e49e:	4293      	cmp	r3, r2
    e4a0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e4a4:	d1d8      	bne.n	e458 <am_hal_uart_configure+0x11c>
    e4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e4a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e4ac:	331c      	adds	r3, #28
    e4ae:	031b      	lsls	r3, r3, #12
    e4b0:	2000      	movs	r0, #0
    e4b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4b4:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e4b8:	639a      	str	r2, [r3, #56]	; 0x38
    e4ba:	e787      	b.n	e3cc <am_hal_uart_configure+0x90>
    e4bc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e4c0:	e7f4      	b.n	e4ac <am_hal_uart_configure+0x170>
    e4c2:	2201      	movs	r2, #1
    e4c4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e4c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e4cc:	f000 faae 	bl	ea2c <am_hal_queue_init>
    e4d0:	6823      	ldr	r3, [r4, #0]
    e4d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4d6:	42ab      	cmp	r3, r5
    e4d8:	d1be      	bne.n	e458 <am_hal_uart_configure+0x11c>
    e4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e4dc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e4e0:	331c      	adds	r3, #28
    e4e2:	031b      	lsls	r3, r3, #12
    e4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4e6:	f042 0220 	orr.w	r2, r2, #32
    e4ea:	639a      	str	r2, [r3, #56]	; 0x38
    e4ec:	2f00      	cmp	r7, #0
    e4ee:	d1ce      	bne.n	e48e <am_hal_uart_configure+0x152>
    e4f0:	e7d0      	b.n	e494 <am_hal_uart_configure+0x158>
    e4f2:	2201      	movs	r2, #1
    e4f4:	4643      	mov	r3, r8
    e4f6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e4fa:	4639      	mov	r1, r7
    e4fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e500:	f000 fa94 	bl	ea2c <am_hal_queue_init>
    e504:	6823      	ldr	r3, [r4, #0]
    e506:	4a08      	ldr	r2, [pc, #32]	; (e528 <am_hal_uart_configure+0x1ec>)
    e508:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e50c:	4293      	cmp	r3, r2
    e50e:	d1a3      	bne.n	e458 <am_hal_uart_configure+0x11c>
    e510:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e512:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e516:	331c      	adds	r3, #28
    e518:	031b      	lsls	r3, r3, #12
    e51a:	2000      	movs	r0, #0
    e51c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e51e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e522:	639a      	str	r2, [r3, #56]	; 0x38
    e524:	e752      	b.n	e3cc <am_hal_uart_configure+0x90>
    e526:	bf00      	nop
    e528:	01ea9e06 	.word	0x01ea9e06
    e52c:	2dc6c000 	.word	0x2dc6c000
    e530:	00b71b00 	.word	0x00b71b00
    e534:	08000003 	.word	0x08000003
    e538:	5b8d8000 	.word	0x5b8d8000
    e53c:	016e3600 	.word	0x016e3600
    e540:	0b71b000 	.word	0x0b71b000
    e544:	002dc6c0 	.word	0x002dc6c0
    e548:	16e36000 	.word	0x16e36000
    e54c:	005b8d80 	.word	0x005b8d80
    e550:	08000002 	.word	0x08000002

0000e554 <am_hal_uart_transfer>:
    e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e558:	680f      	ldr	r7, [r1, #0]
    e55a:	b091      	sub	sp, #68	; 0x44
    e55c:	4605      	mov	r5, r0
    e55e:	b13f      	cbz	r7, e570 <am_hal_uart_transfer+0x1c>
    e560:	2f01      	cmp	r7, #1
    e562:	bf18      	it	ne
    e564:	2707      	movne	r7, #7
    e566:	d024      	beq.n	e5b2 <am_hal_uart_transfer+0x5e>
    e568:	4638      	mov	r0, r7
    e56a:	b011      	add	sp, #68	; 0x44
    e56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e570:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e574:	690b      	ldr	r3, [r1, #16]
    e576:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e57a:	688e      	ldr	r6, [r1, #8]
    e57c:	9300      	str	r3, [sp, #0]
    e57e:	f1b9 0f00 	cmp.w	r9, #0
    e582:	d031      	beq.n	e5e8 <am_hal_uart_transfer+0x94>
    e584:	2e00      	cmp	r6, #0
    e586:	f000 819c 	beq.w	e8c2 <am_hal_uart_transfer+0x36e>
    e58a:	2800      	cmp	r0, #0
    e58c:	f000 8097 	beq.w	e6be <am_hal_uart_transfer+0x16a>
    e590:	6803      	ldr	r3, [r0, #0]
    e592:	4aa9      	ldr	r2, [pc, #676]	; (e838 <am_hal_uart_transfer+0x2e4>)
    e594:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e598:	4293      	cmp	r3, r2
    e59a:	f000 8092 	beq.w	e6c2 <am_hal_uart_transfer+0x16e>
    e59e:	46b8      	mov	r8, r7
    e5a0:	9b00      	ldr	r3, [sp, #0]
    e5a2:	b10b      	cbz	r3, e5a8 <am_hal_uart_transfer+0x54>
    e5a4:	f8c3 8000 	str.w	r8, [r3]
    e5a8:	2702      	movs	r7, #2
    e5aa:	4638      	mov	r0, r7
    e5ac:	b011      	add	sp, #68	; 0x44
    e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5b2:	1d0b      	adds	r3, r1, #4
    e5b4:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e5b8:	f1b9 0f00 	cmp.w	r9, #0
    e5bc:	d043      	beq.n	e646 <am_hal_uart_transfer+0xf2>
    e5be:	2f00      	cmp	r7, #0
    e5c0:	f000 8185 	beq.w	e8ce <am_hal_uart_transfer+0x37a>
    e5c4:	2800      	cmp	r0, #0
    e5c6:	f000 80eb 	beq.w	e7a0 <am_hal_uart_transfer+0x24c>
    e5ca:	6802      	ldr	r2, [r0, #0]
    e5cc:	499a      	ldr	r1, [pc, #616]	; (e838 <am_hal_uart_transfer+0x2e4>)
    e5ce:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e5d2:	428a      	cmp	r2, r1
    e5d4:	f000 80e7 	beq.w	e7a6 <am_hal_uart_transfer+0x252>
    e5d8:	2600      	movs	r6, #0
    e5da:	2702      	movs	r7, #2
    e5dc:	f1bb 0f00 	cmp.w	fp, #0
    e5e0:	d0c2      	beq.n	e568 <am_hal_uart_transfer+0x14>
    e5e2:	f8cb 6000 	str.w	r6, [fp]
    e5e6:	e7bf      	b.n	e568 <am_hal_uart_transfer+0x14>
    e5e8:	2800      	cmp	r0, #0
    e5ea:	d0dd      	beq.n	e5a8 <am_hal_uart_transfer+0x54>
    e5ec:	6803      	ldr	r3, [r0, #0]
    e5ee:	4a92      	ldr	r2, [pc, #584]	; (e838 <am_hal_uart_transfer+0x2e4>)
    e5f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5f4:	4293      	cmp	r3, r2
    e5f6:	d1d7      	bne.n	e5a8 <am_hal_uart_transfer+0x54>
    e5f8:	9b00      	ldr	r3, [sp, #0]
    e5fa:	b10b      	cbz	r3, e600 <am_hal_uart_transfer+0xac>
    e5fc:	f8c3 9000 	str.w	r9, [r3]
    e600:	b1fe      	cbz	r6, e642 <am_hal_uart_transfer+0xee>
    e602:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e606:	2b00      	cmp	r3, #0
    e608:	f040 8165 	bne.w	e8d6 <am_hal_uart_transfer+0x382>
    e60c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e60e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e612:	311c      	adds	r1, #28
    e614:	0309      	lsls	r1, r1, #12
    e616:	698a      	ldr	r2, [r1, #24]
    e618:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e61c:	2a00      	cmp	r2, #0
    e61e:	f040 818d 	bne.w	e93c <am_hal_uart_transfer+0x3e8>
    e622:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    e626:	e003      	b.n	e630 <am_hal_uart_transfer+0xdc>
    e628:	6988      	ldr	r0, [r1, #24]
    e62a:	0680      	lsls	r0, r0, #26
    e62c:	f100 8151 	bmi.w	e8d2 <am_hal_uart_transfer+0x37e>
    e630:	3201      	adds	r2, #1
    e632:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e636:	6008      	str	r0, [r1, #0]
    e638:	4296      	cmp	r6, r2
    e63a:	d1f5      	bne.n	e628 <am_hal_uart_transfer+0xd4>
    e63c:	9b00      	ldr	r3, [sp, #0]
    e63e:	b103      	cbz	r3, e642 <am_hal_uart_transfer+0xee>
    e640:	601e      	str	r6, [r3, #0]
    e642:	2700      	movs	r7, #0
    e644:	e790      	b.n	e568 <am_hal_uart_transfer+0x14>
    e646:	2800      	cmp	r0, #0
    e648:	d0ae      	beq.n	e5a8 <am_hal_uart_transfer+0x54>
    e64a:	6802      	ldr	r2, [r0, #0]
    e64c:	497a      	ldr	r1, [pc, #488]	; (e838 <am_hal_uart_transfer+0x2e4>)
    e64e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e652:	428a      	cmp	r2, r1
    e654:	d1a8      	bne.n	e5a8 <am_hal_uart_transfer+0x54>
    e656:	f1bb 0f00 	cmp.w	fp, #0
    e65a:	d001      	beq.n	e660 <am_hal_uart_transfer+0x10c>
    e65c:	f8cb 9000 	str.w	r9, [fp]
    e660:	2f00      	cmp	r7, #0
    e662:	d0ee      	beq.n	e642 <am_hal_uart_transfer+0xee>
    e664:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e668:	2c00      	cmp	r4, #0
    e66a:	f040 816c 	bne.w	e946 <am_hal_uart_transfer+0x3f2>
    e66e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e670:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e674:	321c      	adds	r2, #28
    e676:	0312      	lsls	r2, r2, #12
    e678:	6990      	ldr	r0, [r2, #24]
    e67a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e67e:	2800      	cmp	r0, #0
    e680:	f040 819d 	bne.w	e9be <am_hal_uart_transfer+0x46a>
    e684:	6811      	ldr	r1, [r2, #0]
    e686:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e68a:	bf08      	it	eq
    e68c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    e690:	d008      	beq.n	e6a4 <am_hal_uart_transfer+0x150>
    e692:	e190      	b.n	e9b6 <am_hal_uart_transfer+0x462>
    e694:	6991      	ldr	r1, [r2, #24]
    e696:	06c8      	lsls	r0, r1, #27
    e698:	d409      	bmi.n	e6ae <am_hal_uart_transfer+0x15a>
    e69a:	6811      	ldr	r1, [r2, #0]
    e69c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e6a0:	f040 814e 	bne.w	e940 <am_hal_uart_transfer+0x3ec>
    e6a4:	3401      	adds	r4, #1
    e6a6:	42a7      	cmp	r7, r4
    e6a8:	f803 1f01 	strb.w	r1, [r3, #1]!
    e6ac:	d1f2      	bne.n	e694 <am_hal_uart_transfer+0x140>
    e6ae:	2700      	movs	r7, #0
    e6b0:	f1bb 0f00 	cmp.w	fp, #0
    e6b4:	f43f af58 	beq.w	e568 <am_hal_uart_transfer+0x14>
    e6b8:	f8cb 4000 	str.w	r4, [fp]
    e6bc:	e754      	b.n	e568 <am_hal_uart_transfer+0x14>
    e6be:	4680      	mov	r8, r0
    e6c0:	e76e      	b.n	e5a0 <am_hal_uart_transfer+0x4c>
    e6c2:	9301      	str	r3, [sp, #4]
    e6c4:	4651      	mov	r1, sl
    e6c6:	46bb      	mov	fp, r7
    e6c8:	46b8      	mov	r8, r7
    e6ca:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e6ce:	b9f2      	cbnz	r2, e70e <am_hal_uart_transfer+0x1ba>
    e6d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e6d2:	b19e      	cbz	r6, e6fc <am_hal_uart_transfer+0x1a8>
    e6d4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e6d8:	321c      	adds	r2, #28
    e6da:	0312      	lsls	r2, r2, #12
    e6dc:	3901      	subs	r1, #1
    e6de:	6994      	ldr	r4, [r2, #24]
    e6e0:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e6e4:	b11c      	cbz	r4, e6ee <am_hal_uart_transfer+0x19a>
    e6e6:	e047      	b.n	e778 <am_hal_uart_transfer+0x224>
    e6e8:	6993      	ldr	r3, [r2, #24]
    e6ea:	069b      	lsls	r3, r3, #26
    e6ec:	d441      	bmi.n	e772 <am_hal_uart_transfer+0x21e>
    e6ee:	3401      	adds	r4, #1
    e6f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e6f4:	6013      	str	r3, [r2, #0]
    e6f6:	42b4      	cmp	r4, r6
    e6f8:	d1f6      	bne.n	e6e8 <am_hal_uart_transfer+0x194>
    e6fa:	44a0      	add	r8, r4
    e6fc:	9b00      	ldr	r3, [sp, #0]
    e6fe:	2b00      	cmp	r3, #0
    e700:	d09f      	beq.n	e642 <am_hal_uart_transfer+0xee>
    e702:	4638      	mov	r0, r7
    e704:	f8c3 8000 	str.w	r8, [r3]
    e708:	b011      	add	sp, #68	; 0x44
    e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e70e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e710:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e712:	1b14      	subs	r4, r2, r4
    e714:	42b4      	cmp	r4, r6
    e716:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e71a:	bf28      	it	cs
    e71c:	4634      	movcs	r4, r6
    e71e:	4622      	mov	r2, r4
    e720:	4618      	mov	r0, r3
    e722:	9302      	str	r3, [sp, #8]
    e724:	f000 f98e 	bl	ea44 <am_hal_queue_item_add>
    e728:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e72a:	9303      	str	r3, [sp, #12]
    e72c:	f7ff fafc 	bl	dd28 <am_hal_interrupt_master_disable>
    e730:	9b03      	ldr	r3, [sp, #12]
    e732:	9008      	str	r0, [sp, #32]
    e734:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e738:	331c      	adds	r3, #28
    e73a:	031b      	lsls	r3, r3, #12
    e73c:	9303      	str	r3, [sp, #12]
    e73e:	e00d      	b.n	e75c <am_hal_uart_transfer+0x208>
    e740:	f000 f9b8 	bl	eab4 <am_hal_queue_item_get>
    e744:	b190      	cbz	r0, e76c <am_hal_uart_transfer+0x218>
    e746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e748:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e74c:	331c      	adds	r3, #28
    e74e:	031b      	lsls	r3, r3, #12
    e750:	699a      	ldr	r2, [r3, #24]
    e752:	0692      	lsls	r2, r2, #26
    e754:	bf5c      	itt	pl
    e756:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e75a:	601a      	strpl	r2, [r3, #0]
    e75c:	9b03      	ldr	r3, [sp, #12]
    e75e:	9802      	ldr	r0, [sp, #8]
    e760:	699b      	ldr	r3, [r3, #24]
    e762:	069b      	lsls	r3, r3, #26
    e764:	f04f 0201 	mov.w	r2, #1
    e768:	a907      	add	r1, sp, #28
    e76a:	d5e9      	bpl.n	e740 <am_hal_uart_transfer+0x1ec>
    e76c:	9808      	ldr	r0, [sp, #32]
    e76e:	f7ff fadf 	bl	dd30 <am_hal_interrupt_master_set>
    e772:	1b36      	subs	r6, r6, r4
    e774:	44a0      	add	r8, r4
    e776:	d0c1      	beq.n	e6fc <am_hal_uart_transfer+0x1a8>
    e778:	2001      	movs	r0, #1
    e77a:	f7ff f917 	bl	d9ac <am_hal_flash_delay>
    e77e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e782:	d001      	beq.n	e788 <am_hal_uart_transfer+0x234>
    e784:	f10b 0b01 	add.w	fp, fp, #1
    e788:	45d9      	cmp	r9, fp
    e78a:	d9b7      	bls.n	e6fc <am_hal_uart_transfer+0x1a8>
    e78c:	682a      	ldr	r2, [r5, #0]
    e78e:	9b01      	ldr	r3, [sp, #4]
    e790:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e794:	429a      	cmp	r2, r3
    e796:	eb0a 0108 	add.w	r1, sl, r8
    e79a:	f47f af01 	bne.w	e5a0 <am_hal_uart_transfer+0x4c>
    e79e:	e794      	b.n	e6ca <am_hal_uart_transfer+0x176>
    e7a0:	4606      	mov	r6, r0
    e7a2:	2702      	movs	r7, #2
    e7a4:	e71a      	b.n	e5dc <am_hal_uart_transfer+0x88>
    e7a6:	9200      	str	r2, [sp, #0]
    e7a8:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e7ac:	f04f 0a00 	mov.w	sl, #0
    e7b0:	9202      	str	r2, [sp, #8]
    e7b2:	465a      	mov	r2, fp
    e7b4:	4698      	mov	r8, r3
    e7b6:	469b      	mov	fp, r3
    e7b8:	4656      	mov	r6, sl
    e7ba:	4613      	mov	r3, r2
    e7bc:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e7c0:	2a00      	cmp	r2, #0
    e7c2:	d152      	bne.n	e86a <am_hal_uart_transfer+0x316>
    e7c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e7c6:	b3a7      	cbz	r7, e832 <am_hal_uart_transfer+0x2de>
    e7c8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e7cc:	311c      	adds	r1, #28
    e7ce:	0309      	lsls	r1, r1, #12
    e7d0:	698a      	ldr	r2, [r1, #24]
    e7d2:	06d0      	lsls	r0, r2, #27
    e7d4:	d432      	bmi.n	e83c <am_hal_uart_transfer+0x2e8>
    e7d6:	680a      	ldr	r2, [r1, #0]
    e7d8:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    e7dc:	f040 80aa 	bne.w	e934 <am_hal_uart_transfer+0x3e0>
    e7e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    e7e4:	e006      	b.n	e7f4 <am_hal_uart_transfer+0x2a0>
    e7e6:	698a      	ldr	r2, [r1, #24]
    e7e8:	06d2      	lsls	r2, r2, #27
    e7ea:	d41f      	bmi.n	e82c <am_hal_uart_transfer+0x2d8>
    e7ec:	680a      	ldr	r2, [r1, #0]
    e7ee:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e7f2:	d161      	bne.n	e8b8 <am_hal_uart_transfer+0x364>
    e7f4:	3401      	adds	r4, #1
    e7f6:	42bc      	cmp	r4, r7
    e7f8:	f808 2f01 	strb.w	r2, [r8, #1]!
    e7fc:	d1f3      	bne.n	e7e6 <am_hal_uart_transfer+0x292>
    e7fe:	469b      	mov	fp, r3
    e800:	4426      	add	r6, r4
    e802:	f1bb 0f00 	cmp.w	fp, #0
    e806:	f43f af1c 	beq.w	e642 <am_hal_uart_transfer+0xee>
    e80a:	f8cb 6000 	str.w	r6, [fp]
    e80e:	2700      	movs	r7, #0
    e810:	e6aa      	b.n	e568 <am_hal_uart_transfer+0x14>
    e812:	9807      	ldr	r0, [sp, #28]
    e814:	f7ff fa8c 	bl	dd30 <am_hal_interrupt_master_set>
    e818:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e81a:	9802      	ldr	r0, [sp, #8]
    e81c:	42bc      	cmp	r4, r7
    e81e:	bf28      	it	cs
    e820:	463c      	movcs	r4, r7
    e822:	4641      	mov	r1, r8
    e824:	4622      	mov	r2, r4
    e826:	f000 f945 	bl	eab4 <am_hal_queue_item_get>
    e82a:	9b01      	ldr	r3, [sp, #4]
    e82c:	1b3f      	subs	r7, r7, r4
    e82e:	4426      	add	r6, r4
    e830:	d104      	bne.n	e83c <am_hal_uart_transfer+0x2e8>
    e832:	469b      	mov	fp, r3
    e834:	e7e5      	b.n	e802 <am_hal_uart_transfer+0x2ae>
    e836:	bf00      	nop
    e838:	01ea9e06 	.word	0x01ea9e06
    e83c:	2001      	movs	r0, #1
    e83e:	9301      	str	r3, [sp, #4]
    e840:	f7ff f8b4 	bl	d9ac <am_hal_flash_delay>
    e844:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e848:	9b01      	ldr	r3, [sp, #4]
    e84a:	d001      	beq.n	e850 <am_hal_uart_transfer+0x2fc>
    e84c:	f10a 0a01 	add.w	sl, sl, #1
    e850:	45d1      	cmp	r9, sl
    e852:	d9ee      	bls.n	e832 <am_hal_uart_transfer+0x2de>
    e854:	682a      	ldr	r2, [r5, #0]
    e856:	9900      	ldr	r1, [sp, #0]
    e858:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e85c:	428a      	cmp	r2, r1
    e85e:	eb0b 0806 	add.w	r8, fp, r6
    e862:	d0ab      	beq.n	e7bc <am_hal_uart_transfer+0x268>
    e864:	469b      	mov	fp, r3
    e866:	2702      	movs	r7, #2
    e868:	e6b8      	b.n	e5dc <am_hal_uart_transfer+0x88>
    e86a:	9301      	str	r3, [sp, #4]
    e86c:	f7ff fa5c 	bl	dd28 <am_hal_interrupt_master_disable>
    e870:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e872:	9007      	str	r0, [sp, #28]
    e874:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e878:	301c      	adds	r0, #28
    e87a:	9b01      	ldr	r3, [sp, #4]
    e87c:	0300      	lsls	r0, r0, #12
    e87e:	ac08      	add	r4, sp, #32
    e880:	2200      	movs	r2, #0
    e882:	6981      	ldr	r1, [r0, #24]
    e884:	06c9      	lsls	r1, r1, #27
    e886:	d409      	bmi.n	e89c <am_hal_uart_transfer+0x348>
    e888:	6801      	ldr	r1, [r0, #0]
    e88a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e88e:	f102 0201 	add.w	r2, r2, #1
    e892:	d118      	bne.n	e8c6 <am_hal_uart_transfer+0x372>
    e894:	2a20      	cmp	r2, #32
    e896:	f804 1b01 	strb.w	r1, [r4], #1
    e89a:	d1f2      	bne.n	e882 <am_hal_uart_transfer+0x32e>
    e89c:	a908      	add	r1, sp, #32
    e89e:	9802      	ldr	r0, [sp, #8]
    e8a0:	9301      	str	r3, [sp, #4]
    e8a2:	f000 f8cf 	bl	ea44 <am_hal_queue_item_add>
    e8a6:	9b01      	ldr	r3, [sp, #4]
    e8a8:	2800      	cmp	r0, #0
    e8aa:	d1b2      	bne.n	e812 <am_hal_uart_transfer+0x2be>
    e8ac:	4f45      	ldr	r7, [pc, #276]	; (e9c4 <am_hal_uart_transfer+0x470>)
    e8ae:	469b      	mov	fp, r3
    e8b0:	9807      	ldr	r0, [sp, #28]
    e8b2:	f7ff fa3d 	bl	dd30 <am_hal_interrupt_master_set>
    e8b6:	e691      	b.n	e5dc <am_hal_uart_transfer+0x88>
    e8b8:	469b      	mov	fp, r3
    e8ba:	4426      	add	r6, r4
    e8bc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e8c0:	e68c      	b.n	e5dc <am_hal_uart_transfer+0x88>
    e8c2:	46b8      	mov	r8, r7
    e8c4:	e71a      	b.n	e6fc <am_hal_uart_transfer+0x1a8>
    e8c6:	469b      	mov	fp, r3
    e8c8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e8cc:	e7f0      	b.n	e8b0 <am_hal_uart_transfer+0x35c>
    e8ce:	463e      	mov	r6, r7
    e8d0:	e797      	b.n	e802 <am_hal_uart_transfer+0x2ae>
    e8d2:	4616      	mov	r6, r2
    e8d4:	e6b2      	b.n	e63c <am_hal_uart_transfer+0xe8>
    e8d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e8d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e8da:	1a9b      	subs	r3, r3, r2
    e8dc:	429e      	cmp	r6, r3
    e8de:	bf28      	it	cs
    e8e0:	461e      	movcs	r6, r3
    e8e2:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e8e6:	4651      	mov	r1, sl
    e8e8:	4632      	mov	r2, r6
    e8ea:	4620      	mov	r0, r4
    e8ec:	f000 f8aa 	bl	ea44 <am_hal_queue_item_add>
    e8f0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e8f2:	f7ff fa19 	bl	dd28 <am_hal_interrupt_master_disable>
    e8f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e8fa:	371c      	adds	r7, #28
    e8fc:	033f      	lsls	r7, r7, #12
    e8fe:	9005      	str	r0, [sp, #20]
    e900:	e00d      	b.n	e91e <am_hal_uart_transfer+0x3ca>
    e902:	f000 f8d7 	bl	eab4 <am_hal_queue_item_get>
    e906:	b188      	cbz	r0, e92c <am_hal_uart_transfer+0x3d8>
    e908:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e90a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e90e:	331c      	adds	r3, #28
    e910:	031b      	lsls	r3, r3, #12
    e912:	699a      	ldr	r2, [r3, #24]
    e914:	0692      	lsls	r2, r2, #26
    e916:	bf5c      	itt	pl
    e918:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e91c:	601a      	strpl	r2, [r3, #0]
    e91e:	69bb      	ldr	r3, [r7, #24]
    e920:	069b      	lsls	r3, r3, #26
    e922:	f04f 0201 	mov.w	r2, #1
    e926:	a908      	add	r1, sp, #32
    e928:	4620      	mov	r0, r4
    e92a:	d5ea      	bpl.n	e902 <am_hal_uart_transfer+0x3ae>
    e92c:	9805      	ldr	r0, [sp, #20]
    e92e:	f7ff f9ff 	bl	dd30 <am_hal_interrupt_master_set>
    e932:	e683      	b.n	e63c <am_hal_uart_transfer+0xe8>
    e934:	469b      	mov	fp, r3
    e936:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e93a:	e64f      	b.n	e5dc <am_hal_uart_transfer+0x88>
    e93c:	461e      	mov	r6, r3
    e93e:	e67d      	b.n	e63c <am_hal_uart_transfer+0xe8>
    e940:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e944:	e6b4      	b.n	e6b0 <am_hal_uart_transfer+0x15c>
    e946:	9300      	str	r3, [sp, #0]
    e948:	f7ff f9ee 	bl	dd28 <am_hal_interrupt_master_disable>
    e94c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e94e:	9006      	str	r0, [sp, #24]
    e950:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e954:	321c      	adds	r2, #28
    e956:	0311      	lsls	r1, r2, #12
    e958:	a808      	add	r0, sp, #32
    e95a:	2200      	movs	r2, #0
    e95c:	9b00      	ldr	r3, [sp, #0]
    e95e:	e009      	b.n	e974 <am_hal_uart_transfer+0x420>
    e960:	680c      	ldr	r4, [r1, #0]
    e962:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e966:	f102 0201 	add.w	r2, r2, #1
    e96a:	d121      	bne.n	e9b0 <am_hal_uart_transfer+0x45c>
    e96c:	2a20      	cmp	r2, #32
    e96e:	f800 4b01 	strb.w	r4, [r0], #1
    e972:	d002      	beq.n	e97a <am_hal_uart_transfer+0x426>
    e974:	698c      	ldr	r4, [r1, #24]
    e976:	06e4      	lsls	r4, r4, #27
    e978:	d5f2      	bpl.n	e960 <am_hal_uart_transfer+0x40c>
    e97a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    e97e:	a908      	add	r1, sp, #32
    e980:	4630      	mov	r0, r6
    e982:	9300      	str	r3, [sp, #0]
    e984:	f000 f85e 	bl	ea44 <am_hal_queue_item_add>
    e988:	b920      	cbnz	r0, e994 <am_hal_uart_transfer+0x440>
    e98a:	4f0e      	ldr	r7, [pc, #56]	; (e9c4 <am_hal_uart_transfer+0x470>)
    e98c:	9806      	ldr	r0, [sp, #24]
    e98e:	f7ff f9cf 	bl	dd30 <am_hal_interrupt_master_set>
    e992:	e5e9      	b.n	e568 <am_hal_uart_transfer+0x14>
    e994:	9806      	ldr	r0, [sp, #24]
    e996:	f7ff f9cb 	bl	dd30 <am_hal_interrupt_master_set>
    e99a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e99c:	9b00      	ldr	r3, [sp, #0]
    e99e:	42bc      	cmp	r4, r7
    e9a0:	bf28      	it	cs
    e9a2:	463c      	movcs	r4, r7
    e9a4:	4619      	mov	r1, r3
    e9a6:	4630      	mov	r0, r6
    e9a8:	4622      	mov	r2, r4
    e9aa:	f000 f883 	bl	eab4 <am_hal_queue_item_get>
    e9ae:	e67e      	b.n	e6ae <am_hal_uart_transfer+0x15a>
    e9b0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e9b4:	e7ea      	b.n	e98c <am_hal_uart_transfer+0x438>
    e9b6:	4604      	mov	r4, r0
    e9b8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e9bc:	e678      	b.n	e6b0 <am_hal_uart_transfer+0x15c>
    e9be:	4627      	mov	r7, r4
    e9c0:	e676      	b.n	e6b0 <am_hal_uart_transfer+0x15c>
    e9c2:	bf00      	nop
    e9c4:	08000001 	.word	0x08000001

0000e9c8 <am_hal_uart_tx_flush>:
    e9c8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e9cc:	b570      	push	{r4, r5, r6, lr}
    e9ce:	4604      	mov	r4, r0
    e9d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e9d2:	b183      	cbz	r3, e9f6 <am_hal_uart_tx_flush+0x2e>
    e9d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e9d6:	b173      	cbz	r3, e9f6 <am_hal_uart_tx_flush+0x2e>
    e9d8:	4e13      	ldr	r6, [pc, #76]	; (ea28 <am_hal_uart_tx_flush+0x60>)
    e9da:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e9dc:	fbb6 f0f0 	udiv	r0, r6, r0
    e9e0:	2802      	cmp	r0, #2
    e9e2:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e9e6:	bf8c      	ite	hi
    e9e8:	3829      	subhi	r0, #41	; 0x29
    e9ea:	2001      	movls	r0, #1
    e9ec:	f7fe ffde 	bl	d9ac <am_hal_flash_delay>
    e9f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d1f1      	bne.n	e9da <am_hal_uart_tx_flush+0x12>
    e9f6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e9fa:	351c      	adds	r5, #28
    e9fc:	032d      	lsls	r5, r5, #12
    e9fe:	69ab      	ldr	r3, [r5, #24]
    ea00:	071a      	lsls	r2, r3, #28
    ea02:	d50e      	bpl.n	ea22 <am_hal_uart_tx_flush+0x5a>
    ea04:	4e08      	ldr	r6, [pc, #32]	; (ea28 <am_hal_uart_tx_flush+0x60>)
    ea06:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ea08:	fbb6 f0f0 	udiv	r0, r6, r0
    ea0c:	2802      	cmp	r0, #2
    ea0e:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ea12:	bf8c      	ite	hi
    ea14:	3829      	subhi	r0, #41	; 0x29
    ea16:	2001      	movls	r0, #1
    ea18:	f7fe ffc8 	bl	d9ac <am_hal_flash_delay>
    ea1c:	69ab      	ldr	r3, [r5, #24]
    ea1e:	071b      	lsls	r3, r3, #28
    ea20:	d4f1      	bmi.n	ea06 <am_hal_uart_tx_flush+0x3e>
    ea22:	2000      	movs	r0, #0
    ea24:	bd70      	pop	{r4, r5, r6, pc}
    ea26:	bf00      	nop
    ea28:	00b71b00 	.word	0x00b71b00

0000ea2c <am_hal_queue_init>:
    ea2c:	b410      	push	{r4}
    ea2e:	2400      	movs	r4, #0
    ea30:	6004      	str	r4, [r0, #0]
    ea32:	6044      	str	r4, [r0, #4]
    ea34:	6084      	str	r4, [r0, #8]
    ea36:	60c3      	str	r3, [r0, #12]
    ea38:	6102      	str	r2, [r0, #16]
    ea3a:	6141      	str	r1, [r0, #20]
    ea3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea40:	4770      	bx	lr
    ea42:	bf00      	nop

0000ea44 <am_hal_queue_item_add>:
    ea44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea46:	4604      	mov	r4, r0
    ea48:	6906      	ldr	r6, [r0, #16]
    ea4a:	b083      	sub	sp, #12
    ea4c:	fb06 f602 	mul.w	r6, r6, r2
    ea50:	460d      	mov	r5, r1
    ea52:	f7ff f969 	bl	dd28 <am_hal_interrupt_master_disable>
    ea56:	68e7      	ldr	r7, [r4, #12]
    ea58:	68a2      	ldr	r2, [r4, #8]
    ea5a:	9001      	str	r0, [sp, #4]
    ea5c:	1abb      	subs	r3, r7, r2
    ea5e:	429e      	cmp	r6, r3
    ea60:	d826      	bhi.n	eab0 <am_hal_queue_item_add+0x6c>
    ea62:	b196      	cbz	r6, ea8a <am_hal_queue_item_add+0x46>
    ea64:	6823      	ldr	r3, [r4, #0]
    ea66:	4629      	mov	r1, r5
    ea68:	b1c5      	cbz	r5, ea9c <am_hal_queue_item_add+0x58>
    ea6a:	19af      	adds	r7, r5, r6
    ea6c:	6962      	ldr	r2, [r4, #20]
    ea6e:	f811 0b01 	ldrb.w	r0, [r1], #1
    ea72:	54d0      	strb	r0, [r2, r3]
    ea74:	6823      	ldr	r3, [r4, #0]
    ea76:	68e5      	ldr	r5, [r4, #12]
    ea78:	3301      	adds	r3, #1
    ea7a:	42b9      	cmp	r1, r7
    ea7c:	fbb3 f0f5 	udiv	r0, r3, r5
    ea80:	fb05 3310 	mls	r3, r5, r0, r3
    ea84:	6023      	str	r3, [r4, #0]
    ea86:	d1f1      	bne.n	ea6c <am_hal_queue_item_add+0x28>
    ea88:	68a2      	ldr	r2, [r4, #8]
    ea8a:	4432      	add	r2, r6
    ea8c:	60a2      	str	r2, [r4, #8]
    ea8e:	2401      	movs	r4, #1
    ea90:	9801      	ldr	r0, [sp, #4]
    ea92:	f7ff f94d 	bl	dd30 <am_hal_interrupt_master_set>
    ea96:	4620      	mov	r0, r4
    ea98:	b003      	add	sp, #12
    ea9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea9c:	3101      	adds	r1, #1
    ea9e:	3301      	adds	r3, #1
    eaa0:	428e      	cmp	r6, r1
    eaa2:	fbb3 f0f7 	udiv	r0, r3, r7
    eaa6:	fb07 3310 	mls	r3, r7, r0, r3
    eaaa:	d1f7      	bne.n	ea9c <am_hal_queue_item_add+0x58>
    eaac:	6023      	str	r3, [r4, #0]
    eaae:	e7ec      	b.n	ea8a <am_hal_queue_item_add+0x46>
    eab0:	2400      	movs	r4, #0
    eab2:	e7ed      	b.n	ea90 <am_hal_queue_item_add+0x4c>

0000eab4 <am_hal_queue_item_get>:
    eab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eab6:	4604      	mov	r4, r0
    eab8:	6906      	ldr	r6, [r0, #16]
    eaba:	b083      	sub	sp, #12
    eabc:	fb06 f602 	mul.w	r6, r6, r2
    eac0:	460d      	mov	r5, r1
    eac2:	f7ff f931 	bl	dd28 <am_hal_interrupt_master_disable>
    eac6:	68a2      	ldr	r2, [r4, #8]
    eac8:	9001      	str	r0, [sp, #4]
    eaca:	4296      	cmp	r6, r2
    eacc:	d81c      	bhi.n	eb08 <am_hal_queue_item_get+0x54>
    eace:	b196      	cbz	r6, eaf6 <am_hal_queue_item_get+0x42>
    ead0:	6863      	ldr	r3, [r4, #4]
    ead2:	b1dd      	cbz	r5, eb0c <am_hal_queue_item_get+0x58>
    ead4:	4629      	mov	r1, r5
    ead6:	19af      	adds	r7, r5, r6
    ead8:	6962      	ldr	r2, [r4, #20]
    eada:	5cd3      	ldrb	r3, [r2, r3]
    eadc:	f801 3b01 	strb.w	r3, [r1], #1
    eae0:	6863      	ldr	r3, [r4, #4]
    eae2:	68e5      	ldr	r5, [r4, #12]
    eae4:	3301      	adds	r3, #1
    eae6:	428f      	cmp	r7, r1
    eae8:	fbb3 f0f5 	udiv	r0, r3, r5
    eaec:	fb05 3310 	mls	r3, r5, r0, r3
    eaf0:	6063      	str	r3, [r4, #4]
    eaf2:	d1f1      	bne.n	ead8 <am_hal_queue_item_get+0x24>
    eaf4:	68a2      	ldr	r2, [r4, #8]
    eaf6:	1b92      	subs	r2, r2, r6
    eaf8:	60a2      	str	r2, [r4, #8]
    eafa:	2401      	movs	r4, #1
    eafc:	9801      	ldr	r0, [sp, #4]
    eafe:	f7ff f917 	bl	dd30 <am_hal_interrupt_master_set>
    eb02:	4620      	mov	r0, r4
    eb04:	b003      	add	sp, #12
    eb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb08:	2400      	movs	r4, #0
    eb0a:	e7f7      	b.n	eafc <am_hal_queue_item_get+0x48>
    eb0c:	68e0      	ldr	r0, [r4, #12]
    eb0e:	4629      	mov	r1, r5
    eb10:	3101      	adds	r1, #1
    eb12:	3301      	adds	r3, #1
    eb14:	428e      	cmp	r6, r1
    eb16:	fbb3 f5f0 	udiv	r5, r3, r0
    eb1a:	fb00 3315 	mls	r3, r0, r5, r3
    eb1e:	d1f7      	bne.n	eb10 <am_hal_queue_item_get+0x5c>
    eb20:	6063      	str	r3, [r4, #4]
    eb22:	e7e8      	b.n	eaf6 <am_hal_queue_item_get+0x42>
    eb24:	616e6942 	.word	0x616e6942
    eb28:	43207972 	.word	0x43207972
    eb2c:	746e756f 	.word	0x746e756f
    eb30:	45207265 	.word	0x45207265
    eb34:	706d6178 	.word	0x706d6178
    eb38:	000a656c 	.word	0x000a656c
    eb3c:	54282020 	.word	0x54282020
    eb40:	72656d69 	.word	0x72656d69
    eb44:	6f6c6320 	.word	0x6f6c6320
    eb48:	73206b63 	.word	0x73206b63
    eb4c:	6372756f 	.word	0x6372756f
    eb50:	73692065 	.word	0x73692065
    eb54:	52464c20 	.word	0x52464c20
    eb58:	000a2943 	.word	0x000a2943
    eb5c:	00206425 	.word	0x00206425
    eb60:	0000000a 	.word	0x0000000a
    eb64:	0a0a0a0a 	.word	0x0a0a0a0a
    eb68:	0a0a0a0a 	.word	0x0a0a0a0a
    eb6c:	0a0a0a0a 	.word	0x0a0a0a0a
    eb70:	0a0a0a0a 	.word	0x0a0a0a0a
    eb74:	00000a0a 	.word	0x00000a0a

0000eb78 <g_sBspUartConfig>:
    eb78:	0001c200 00000060 00000000 00000000     ....`...........
    eb88:	00000000 00000012 00000000 00000000     ................
	...

0000eba0 <g_AM_BSP_GPIO_COM_UART_TX>:
    eba0:	00000000                                ....

0000eba4 <g_AM_BSP_GPIO_ITM_SWO>:
    eba4:	00000002                                ....

0000eba8 <g_AM_BSP_GPIO_COM_UART_RX>:
    eba8:	00000000                                ....

0000ebac <am_hal_cachectrl_defaults>:
    ebac:	00000308                                ....

0000ebb0 <g_ui8Bit76Capabilities>:
    ebb0:	02800101 80010180 80800101 80808080     ................
    ebc0:	80808080 80808008 01800180 80808080     ................
    ebd0:	80808080 01800402 01010401 80808080     ................
    ebe0:	00000101                                ....

0000ebe4 <g_ui8NCEtable>:
    ebe4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ebf4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ec04:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ec14:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ec24:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ec34:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ec44:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ec54:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ec64:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ec74:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ec84:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ec94:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    eca4:	32221202 43231303                       .."2..#C

0000ecac <g_ui8Inpen>:
    ecac:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    ecbc:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    eccc:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    ecdc:	00003130                                01..

0000ece0 <g_AM_HAL_GPIO_DISABLE>:
    ece0:	00000003                                ....

0000ece4 <g_AM_HAL_GPIO_OUTPUT>:
    ece4:	00000403                                ....

0000ece8 <g_AM_HAL_GPIO_TRISTATE>:
    ece8:	00000c03                                ....

0000ecec <g_ui8nCEpins>:
    ecec:	02070707 00080802 01020202 01010101     ................
    ecfc:	01010101 01010101 01010101 01010101     ................
    ed0c:	01010101 08010101 01010008 01010101     ................
    ed1c:	00000101                                ....

0000ed20 <g_am_hal_mcuctrl_flash_size>:
    ed20:	00004000 00008000 00010000 00020000     .@..............
    ed30:	00040000 00080000 00100000 00200000     .............. .
	...

0000ed60 <g_am_hal_mcuctrl_sram_size>:
    ed60:	00004000 00008000 00010000 00020000     .@..............
    ed70:	00040000 00080000 00100000 00060000     ................
	...

0000eda0 <am_hal_pwrctrl_peripheral_control>:
	...
    edac:	00000001 00000004 00000004 00000002     ................
    edbc:	00000008 00000008 00000004 00000008     ................
    edcc:	00000008 00000008 00000008 00000008     ................
    eddc:	00000010 00000010 00000010 00000020     ............ ...
    edec:	00000010 00000010 00000040 00000010     ........@.......
    edfc:	00000010 00000080 00000004 00000004     ................
    ee0c:	00000100 00000004 00000004 00000200     ................
    ee1c:	00000020 00000020 00000400 00000004      ... ...........
    ee2c:	00000004 00000800 00000040 00000040     ........@...@...
    ee3c:	00001000 00000080 00000080 00002000     ............. ..
    ee4c:	00000100 00000100                       ........
