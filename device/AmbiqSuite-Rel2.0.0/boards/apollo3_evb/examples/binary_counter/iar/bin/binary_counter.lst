###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         23/Jan/2019  19:34:56
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\src\binary_counter.c
#    Command line =  
#        -f C:\temp\EW11DA.tmp
#        (C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\src\binary_counter.c
#        -D iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -lcN
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin
#        --diag_suppress Pa050 -o
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\utils\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\CMSIS\ARM\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\mcu\apollo3\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\devices\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\bsp\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\src\
#        -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin\binary_counter.lst
#    Object file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin\binary_counter.o
#
###############################################################################

C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\src\binary_counter.c
      1          //*****************************************************************************
      2          //
      3          //! @file binary_counter.c
      4          //!
      5          //! @brief Example that displays the timer count on the LEDs.
      6          //!
      7          //! This example increments a variable on every timer interrupt. The global
      8          //! variable is used to set the state of the LEDs. The example sleeps otherwise.
      9          //!
     10          //! SWO is configured in 1M baud, 8-n-1 mode.
     11          //
     12          //*****************************************************************************
     13          
     14          //*****************************************************************************
     15          //
     16          // Copyright (c) 2019, Ambiq Micro
     17          // All rights reserved.
     18          // 
     19          // Redistribution and use in source and binary forms, with or without
     20          // modification, are permitted provided that the following conditions are met:
     21          // 
     22          // 1. Redistributions of source code must retain the above copyright notice,
     23          // this list of conditions and the following disclaimer.
     24          // 
     25          // 2. Redistributions in binary form must reproduce the above copyright
     26          // notice, this list of conditions and the following disclaimer in the
     27          // documentation and/or other materials provided with the distribution.
     28          // 
     29          // 3. Neither the name of the copyright holder nor the names of its
     30          // contributors may be used to endorse or promote products derived from this
     31          // software without specific prior written permission.
     32          // 
     33          // Third party software included in this distribution is subject to the
     34          // additional license terms as defined in the /docs/licenses directory.
     35          // 
     36          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     37          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     39          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     40          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     41          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     42          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     43          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     44          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     45          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     46          // POSSIBILITY OF SUCH DAMAGE.
     47          //
     48          // This is part of revision v2.0.0 of the AmbiqSuite Development Package.
     49          //
     50          //*****************************************************************************
     51          
     52          #include "am_mcu_apollo.h"
     53          #include "am_bsp.h"
     54          #include "am_util.h"
     55          
     56          //*****************************************************************************
     57          //
     58          // Macros
     59          //
     60          //*****************************************************************************
     61          //
     62          // The default is to use the LFRC as the clock source.
     63          // Can  use the XTAL via the USE_XTAL define.
     64          //
     65          //#define USE_XTAL    1
     66          #if USE_XTAL
     67          #define BC_CLKSRC   "XTAL"
     68          #else
     69          #define BC_CLKSRC   "LFRC"
     70          #endif
     71          
     72          #ifdef AM_BSP_NUM_LEDS
     73          #define NUM_LEDS    AM_BSP_NUM_LEDS
     74          #else
     75          #define NUM_LEDS    5       // Make up an arbitrary number of LEDs
     76          #endif
     77          
     78          //*****************************************************************************
     79          //
     80          // Globals
     81          //
     82          //*****************************************************************************
     83          volatile uint32_t g_ui32TimerCount = 0;
     84          
     85          //**************************************
     86          // Timer configuration.
     87          //**************************************
     88          am_hal_ctimer_config_t g_sTimer0 =
     89          {
     90              // Don't link timers.
     91              0,
     92          
     93              // Set up Timer0A.
     94              (AM_HAL_CTIMER_FN_REPEAT    |
     95               AM_HAL_CTIMER_INT_ENABLE   |
     96          #if USE_XTAL
     97               AM_HAL_CTIMER_XT_256HZ),
     98          #else
     99               AM_HAL_CTIMER_LFRC_32HZ),
    100          #endif
    101          
    102              // No configuration for Timer0B.
    103              0,
    104          };
    105          
    106          //*****************************************************************************
    107          //
    108          // Function to initialize Timer A0 to interrupt every 1/4 second.
    109          //
    110          //*****************************************************************************
    111          void
    112          timerA0_init(void)
    113          {
    114              uint32_t ui32Period;
    115          
    116              //
    117              // Enable the LFRC.
    118              //
    119          #if USE_XTAL
    120              am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    121          #else
    122              am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    123          #endif
    124          
    125              //
    126              // Set up timer A0.
    127              //
    128              am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    129              am_hal_ctimer_config(0, &g_sTimer0);
    130          
    131              //
    132              // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    133              //
    134              ui32Period = 32;
    135          #if USE_XTAL
    136              ui32Period *= 8;
    137          #endif
    138              am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    139                                       (ui32Period >> 1));
    140          
    141              //
    142              // Clear the timer Interrupt
    143              //
    144              am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    145          }
    146          
    147          //*****************************************************************************
    148          //
    149          // Timer Interrupt Service Routine (ISR)
    150          //
    151          //*****************************************************************************
    152          void
    153          am_ctimer_isr(void)
    154          {
    155              //
    156              // Increment count and set limit based on the number of LEDs available.
    157              //
    158              g_ui32TimerCount++;
    159              if ( g_ui32TimerCount >= (1 << NUM_LEDS) )
    160              {
    161                  //
    162                  // Reset the global.
    163                  //
    164                  g_ui32TimerCount = 0;
    165              }
    166          
    167              //
    168              // Clear TimerA0 Interrupt (write to clear).
    169              //
    170              am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    171          }
    172          
    173          //*****************************************************************************
    174          //
    175          // Main function.
    176          //
    177          //*****************************************************************************
    178          int
    179          main(void)
    180          {
    181              //
    182              // Set the clock frequency.
    183              //
    184              am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    185          
    186              //
    187              // Set the default cache configuration
    188              //
    189              am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    190              am_hal_cachectrl_enable();
    191          
    192              //
    193              // Configure the board for low power operation.
    194              //
    195              am_bsp_low_power_init();
    196          
    197          #ifdef AM_BSP_NUM_LEDS
    198              //
    199              // Initialize the LED array
    200              //
    201              am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    202          #endif
    203          
    204              //
    205              // Initialize the printf interface for ITM/SWO output.
    206              //
    207              am_bsp_itm_printf_enable();
    208          
    209              //
    210              // Clear the terminal and print the banner.
    211              //
    212              am_util_stdio_terminal_clear();
    213              am_util_stdio_printf("Binary Counter Example\n");
    214              am_util_stdio_printf("  (Timer clock source is " BC_CLKSRC ")\n");
    215          
    216              //
    217              // TimerA0 init.
    218              //
    219              timerA0_init();
    220          
    221              //
    222              // Enable the timer Interrupt.
    223              //
    224              am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    225          
    226              //
    227              // Enable the timer interrupt in the NVIC.
    228              //
    229              NVIC_EnableIRQ(CTIMER_IRQn);
    230              am_hal_interrupt_master_enable();
    231          
    232              //
    233              // Start timer A0
    234              //
    235              am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    236          
    237              //
    238              // We are done printing. Disable debug printf messages on ITM.
    239              //
    240              am_bsp_debug_printf_disable();
    241          
    242              //
    243              // Loop forever.
    244              //
    245              while (1)
    246              {
    247                  //
    248                  // Go to Deep Sleep.
    249                  //
    250                  am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    251          
    252          #ifdef AM_BSP_NUM_LEDS
    253                  //
    254                  // Set the LEDs.
    255                  //
    256                  am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS,
    257                                           g_ui32TimerCount);
    258          #endif
    259                  //
    260                  // Enable debug printf messages using ITM on SWO pin
    261                  //
    262                  am_bsp_debug_printf_enable();
    263          
    264                  am_util_stdio_printf("%d ", g_ui32TimerCount & 0x7);
    265                  if ( (g_ui32TimerCount & ((1 << NUM_LEDS) - 1)) == 0 )
    266                  {
    267                      am_util_stdio_printf("\n");
    268                  }
    269          
    270                  //
    271                  // We are done printing. Disable debug printf messages on ITM.
    272                  //
    273                  am_bsp_debug_printf_disable();
    274              }
    275          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   __NVIC_EnableIRQ
       8   am_ctimer_isr
         8   -> am_hal_ctimer_int_clear
      16   main
        16   -> __NVIC_EnableIRQ
        16   -> am_bsp_debug_printf_disable
        16   -> am_bsp_debug_printf_enable
        16   -> am_bsp_itm_printf_enable
        16   -> am_bsp_low_power_init
        16   -> am_devices_led_array_init
        16   -> am_devices_led_array_out
        16   -> am_hal_cachectrl_config
        16   -> am_hal_cachectrl_enable
        16   -> am_hal_clkgen_control
        16   -> am_hal_ctimer_int_enable
        16   -> am_hal_ctimer_start
        16   -> am_hal_interrupt_master_enable
        16   -> am_hal_sysctrl_sleep
        16   -> am_util_stdio_printf
        16   -> am_util_stdio_terminal_clear
        16   -> timerA0_init
      16   timerA0_init
        16   -> am_hal_clkgen_control
        16   -> am_hal_ctimer_clear
        16   -> am_hal_ctimer_config
        16   -> am_hal_ctimer_int_clear
        16   -> am_hal_ctimer_period_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      24  ?_0
      32  ?_1
       4  ?_2
       2  ?_3
      30  __NVIC_EnableIRQ
      28  am_ctimer_isr
      12  g_sTimer0
       4  g_ui32TimerCount
     142  main
      54  timerA0_init

 
   4 bytes in section .bss
  12 bytes in section .data
  62 bytes in section .rodata
 290 bytes in section .text
 
 290 bytes of CODE  memory
  62 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
