###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         23/Jan/2019  19:34:56
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\startup_iar.c
#    Command line =  
#        -f C:\temp\EW1314.tmp
#        (C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\startup_iar.c
#        -D iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -lcN
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin
#        --diag_suppress Pa050 -o
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\utils\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\CMSIS\ARM\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\mcu\apollo3\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\devices\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\bsp\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\..\..\..\..\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\..\src\
#        -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin\startup_iar.lst
#    Object file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\bin\startup_iar.o
#
###############################################################################

C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\binary_counter\iar\startup_iar.c
      1          //*****************************************************************************
      2          //
      3          //! @file startup_iar.c
      4          //!
      5          //! @brief Definitions for interrupt handlers, the vector table, and the stack.
      6          //
      7          //*****************************************************************************
      8          
      9          //*****************************************************************************
     10          //
     11          // Copyright (c) 2019, Ambiq Micro
     12          // All rights reserved.
     13          // 
     14          // Redistribution and use in source and binary forms, with or without
     15          // modification, are permitted provided that the following conditions are met:
     16          // 
     17          // 1. Redistributions of source code must retain the above copyright notice,
     18          // this list of conditions and the following disclaimer.
     19          // 
     20          // 2. Redistributions in binary form must reproduce the above copyright
     21          // notice, this list of conditions and the following disclaimer in the
     22          // documentation and/or other materials provided with the distribution.
     23          // 
     24          // 3. Neither the name of the copyright holder nor the names of its
     25          // contributors may be used to endorse or promote products derived from this
     26          // software without specific prior written permission.
     27          // 
     28          // Third party software included in this distribution is subject to the
     29          // additional license terms as defined in the /docs/licenses directory.
     30          // 
     31          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     32          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     33          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     34          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     35          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     36          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     37          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     38          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     39          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     40          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     41          // POSSIBILITY OF SUCH DAMAGE.
     42          //
     43          // This is part of revision v2.0.0 of the AmbiqSuite Development Package.
     44          //
     45          //*****************************************************************************
     46          
     47          #include <stdint.h>
     48          
     49          //*****************************************************************************
     50          //
     51          // Enable the IAR extensions for this source file.
     52          //
     53          //*****************************************************************************
     54          #pragma language = extended
     55          
     56          //*****************************************************************************
     57          //
     58          // Weak function links.
     59          //
     60          //*****************************************************************************
     61          #pragma weak MemManage_Handler      = HardFault_Handler
     62          #pragma weak BusFault_Handler       = HardFault_Handler
     63          #pragma weak UsageFault_Handler     = HardFault_Handler
     64          #pragma weak SecureFault_Handler    = HardFault_Handler
     65          #pragma weak SVC_Handler            = am_default_isr
     66          #pragma weak DebugMon_Handler       = am_default_isr
     67          #pragma weak PendSV_Handler         = am_default_isr
     68          #pragma weak SysTick_Handler        = am_default_isr
     69          
     70          #pragma weak am_brownout_isr        = am_default_isr
     71          #pragma weak am_watchdog_isr        = am_default_isr
     72          #pragma weak am_rtc_isr             = am_default_isr
     73          #pragma weak am_vcomp_isr           = am_default_isr
     74          #pragma weak am_ioslave_ios_isr     = am_default_isr
     75          #pragma weak am_ioslave_acc_isr     = am_default_isr
     76          #pragma weak am_iomaster0_isr       = am_default_isr
     77          #pragma weak am_iomaster1_isr       = am_default_isr
     78          #pragma weak am_iomaster2_isr       = am_default_isr
     79          #pragma weak am_iomaster3_isr       = am_default_isr
     80          #pragma weak am_iomaster4_isr       = am_default_isr
     81          #pragma weak am_iomaster5_isr       = am_default_isr
     82          #pragma weak am_ble_isr             = am_default_isr
     83          #pragma weak am_gpio_isr            = am_default_isr
     84          #pragma weak am_ctimer_isr          = am_default_isr
     85          #pragma weak am_uart_isr            = am_default_isr
     86          #pragma weak am_uart1_isr           = am_default_isr
     87          #pragma weak am_scard_isr           = am_default_isr
     88          #pragma weak am_adc_isr             = am_default_isr
     89          #pragma weak am_pdm0_isr            = am_default_isr
     90          #pragma weak am_mspi0_isr           = am_default_isr
     91          #pragma weak am_software0_isr       = am_default_isr
     92          #pragma weak am_stimer_isr          = am_default_isr
     93          #pragma weak am_stimer_cmpr0_isr    = am_default_isr
     94          #pragma weak am_stimer_cmpr1_isr    = am_default_isr
     95          #pragma weak am_stimer_cmpr2_isr    = am_default_isr
     96          #pragma weak am_stimer_cmpr3_isr    = am_default_isr
     97          #pragma weak am_stimer_cmpr4_isr    = am_default_isr
     98          #pragma weak am_stimer_cmpr5_isr    = am_default_isr
     99          #pragma weak am_stimer_cmpr6_isr    = am_default_isr
    100          #pragma weak am_stimer_cmpr7_isr    = am_default_isr
    101          #pragma weak am_flash_isr           = am_default_isr
    102          #pragma weak am_clkgen_isr          = am_default_isr
    103          
    104          
    105          //*****************************************************************************
    106          //
    107          // Forward declaration of the default fault handlers.
    108          //
    109          //*****************************************************************************
    110          extern __stackless void Reset_Handler(void);
    111          extern __weak void NMI_Handler(void);
    112          extern __weak void HardFault_Handler(void);
    113          extern        void MemManage_Handler(void);
    114          extern        void BusFault_Handler(void);
    115          extern        void UsageFault_Handler(void);
    116          extern        void SecureFault_Handler(void);
    117          extern        void SVC_Handler(void);
    118          extern        void DebugMon_Handler(void);
    119          extern        void PendSV_Handler(void);
    120          extern        void SysTick_Handler(void);
    121          
    122          extern void am_brownout_isr(void);
    123          extern void am_watchdog_isr(void);
    124          extern void am_rtc_isr(void);
    125          extern void am_vcomp_isr(void);
    126          extern void am_ioslave_ios_isr(void);
    127          extern void am_ioslave_acc_isr(void);
    128          extern void am_iomaster0_isr(void);
    129          extern void am_iomaster1_isr(void);
    130          extern void am_iomaster2_isr(void);
    131          extern void am_iomaster3_isr(void);
    132          extern void am_iomaster4_isr(void);
    133          extern void am_iomaster5_isr(void);
    134          extern void am_ble_isr(void);
    135          extern void am_gpio_isr(void);
    136          extern void am_ctimer_isr(void);
    137          extern void am_uart_isr(void);
    138          extern void am_uart1_isr(void);
    139          extern void am_scard_isr(void);
    140          extern void am_adc_isr(void);
    141          extern void am_pdm0_isr(void);
    142          extern void am_mspi0_isr(void);
    143          extern void am_software0_isr(void);
    144          extern void am_stimer_isr(void);
    145          extern void am_stimer_cmpr0_isr(void);
    146          extern void am_stimer_cmpr1_isr(void);
    147          extern void am_stimer_cmpr2_isr(void);
    148          extern void am_stimer_cmpr3_isr(void);
    149          extern void am_stimer_cmpr4_isr(void);
    150          extern void am_stimer_cmpr5_isr(void);
    151          extern void am_stimer_cmpr6_isr(void);
    152          extern void am_stimer_cmpr7_isr(void);
    153          extern void am_flash_isr(void);
    154          extern void am_clkgen_isr(void);
    155          
    156          extern void am_default_isr(void);
    157          
    158          //*****************************************************************************
    159          //
    160          // The entry point for the application startup code.
    161          //
    162          //*****************************************************************************
    163          extern void __iar_program_start(void);
    164          
    165          //*****************************************************************************
    166          //
    167          // Reserve space for the system stack.
    168          //
    169          //*****************************************************************************
    170          static uint32_t pui32Stack[1024] @ ".noinit";
    171          
    172          //*****************************************************************************
    173          //
    174          // A union that describes the entries of the vector table.  The union is needed
    175          // since the first entry is the stack pointer and the remainder are function
    176          // pointers.
    177          //
    178          //*****************************************************************************
    179          typedef union
    180          {
    181              void (*pfnHandler)(void);
    182              uint32_t ui32Ptr;
    183          }
    184          uVectorEntry;
    185          
    186          //*****************************************************************************
    187          //
    188          // The vector table.  Note that the proper constructs must be placed on this to
    189          // ensure that it ends up at physical address 0x0000.0000.
    190          //
    191          // Note: Aliasing and weakly exporting am_mpufault_isr, am_busfault_isr, and
    192          // am_usagefault_isr does not work if am_fault_isr is defined externally.
    193          // Therefore, we'll explicitly use am_fault_isr in the table for those vectors.
    194          //
    195          //*****************************************************************************
    196          __root const uVectorEntry __vector_table[] @ ".intvec" =
    197          {
    198              { .ui32Ptr = (uint32_t)pui32Stack + sizeof(pui32Stack) },
    199                                                          // The initial stack pointer
    200              Reset_Handler,                              // The reset handler
    201              NMI_Handler,                                // The NMI handler
    202              HardFault_Handler,                          // The hard fault handler
    203              MemManage_Handler,                          // The MPU fault handler
    204              BusFault_Handler,                           // The bus fault handler
    205              UsageFault_Handler,                         // The usage fault handler
    206              SecureFault_Handler,                        // The usage fault handler
    207              0,                                          // Reserved
    208              0,                                          // Reserved
    209              0,                                          // Reserved
    210              SVC_Handler,                                // SVCall handle
    211              DebugMon_Handler,                           // Debug monitor handler
    212              0,                                          // Reserved
    213              PendSV_Handler,                             // The PendSV handler
    214              SysTick_Handler,                            // The SysTick handler
    215          
    216              //
    217              // Peripheral Interrupts
    218              //
    219              am_brownout_isr,                        //  0: Brownout (rstgen)
    220              am_watchdog_isr,                        //  1: Watchdog
    221              am_rtc_isr,                             //  2: RTC
    222              am_vcomp_isr,                           //  3: Voltage Comparator
    223              am_ioslave_ios_isr,                     //  4: I/O Slave general
    224              am_ioslave_acc_isr,                     //  5: I/O Slave access
    225              am_iomaster0_isr,                       //  6: I/O Master 0
    226              am_iomaster1_isr,                       //  7: I/O Master 1
    227              am_iomaster2_isr,                       //  8: I/O Master 2
    228              am_iomaster3_isr,                       //  9: I/O Master 3
    229              am_iomaster4_isr,                       // 10: I/O Master 4
    230              am_iomaster5_isr,                       // 11: I/O Master 5
    231              am_ble_isr,                             // 12: BLEIF
    232              am_gpio_isr,                            // 13: GPIO
    233              am_ctimer_isr,                          // 14: CTIMER
    234              am_uart_isr,                            // 15: UART0
    235              am_uart1_isr,                           // 16: UART1
    236              am_scard_isr,                           // 17: SCARD
    237              am_adc_isr,                             // 18: ADC
    238              am_pdm0_isr,                            // 19: PDM
    239              am_mspi0_isr,                           // 20: MSPI
    240              am_software0_isr,                       // 21: SOFTWARE0
    241              am_stimer_isr,                          // 22: SYSTEM TIMER
    242              am_stimer_cmpr0_isr,                    // 23: SYSTEM TIMER COMPARE0
    243              am_stimer_cmpr1_isr,                    // 24: SYSTEM TIMER COMPARE1
    244              am_stimer_cmpr2_isr,                    // 25: SYSTEM TIMER COMPARE2
    245              am_stimer_cmpr3_isr,                    // 26: SYSTEM TIMER COMPARE3
    246              am_stimer_cmpr4_isr,                    // 27: SYSTEM TIMER COMPARE4
    247              am_stimer_cmpr5_isr,                    // 28: SYSTEM TIMER COMPARE5
    248              am_stimer_cmpr6_isr,                    // 29: SYSTEM TIMER COMPARE6
    249              am_stimer_cmpr7_isr,                    // 30: SYSTEM TIMER COMPARE7
    250              am_clkgen_isr,                          // 31: CLKGEN
    251          };
    252          
    253          //******************************************************************************
    254          //
    255          // Place code immediately following vector table.
    256          //
    257          //******************************************************************************
    258          //******************************************************************************
    259          //
    260          // The Patch table.
    261          //
    262          //******************************************************************************
    263          __root const uint32_t __Patchable[] @ ".patch" =
    264          {
    265              0,
    266              0,
    267              0,
    268              0,
    269              0,
    270              0,
    271              0,
    272              0,
    273              0,
    274              0,
    275              0,
    276              0,
    277              0,
    278              0,
    279              0,
    280              0,
    281          };
    282          
    283          //*****************************************************************************
    284          //
    285          // Note - The template for this function is originally found in IAR's module,
    286          //        low_level_init.c. As supplied by IAR, it is an empty function.
    287          //
    288          // This module contains the function `__low_level_init', a function
    289          // that is called before the `main' function of the program.  Normally
    290          // low-level initializations - such as setting the prefered interrupt
    291          // level or setting the watchdog - can be performed here.
    292          //
    293          // Note that this function is called before the data segments are
    294          // initialized, this means that this function cannot rely on the
    295          // values of global or static variables.
    296          //
    297          // When this function returns zero, the startup code will inhibit the
    298          // initialization of the data segments. The result is faster startup,
    299          // the drawback is that neither global nor static data will be
    300          // initialized.
    301          //
    302          // Copyright 1999-2017 IAR Systems AB.
    303          //
    304          // $Revision: 112610 $
    305          //
    306          //
    307          //
    308          //
    309          //*****************************************************************************
    310          #define AM_REGVAL(x)               (*((volatile uint32_t *)(x)))
    311          #define VTOR_ADDR                   0xE000ED08
    312          
    313          __interwork int __low_level_init(void)
    314          {
    315          
    316              AM_REGVAL(VTOR_ADDR) = (uint32_t)&__vector_table;
    317          
    318              /*==================================*/
    319              /* Choose if segment initialization */
    320              /* should be done or not.           */
    321              /* Return: 0 to omit seg_init       */
    322              /*         1 to run seg_init        */
    323              /*==================================*/
    324              return 1;
    325          }
    326          
    327          //*****************************************************************************
    328          //
    329          // This is the code that gets called when the processor first starts execution
    330          // following a reset event.  Only the absolutely necessary set is performed,
    331          // after which the application supplied entry() routine is called.
    332          //
    333          //*****************************************************************************
    334          void
    335          Reset_Handler(void)
    336          {
    337              //
    338              // Call the application's entry point.
    339              //
    340              __iar_program_start();
    341          }
    342          
    343          //*****************************************************************************
    344          //
    345          // This is the code that gets called when the processor receives a NMI.  This
    346          // simply enters an infinite loop, preserving the system state for examination
    347          // by a debugger.
    348          //
    349          //*****************************************************************************
    350          __weak void
    351          NMI_Handler(void)
    352          {
    353              //
    354              // Enter an infinite loop.
    355              //
    356              while(1)
    357              {
    358              }
    359          }
    360          
    361          //*****************************************************************************
    362          //
    363          // This is the code that gets called when the processor receives a fault
    364          // interrupt.  This simply enters an infinite loop, preserving the system state
    365          // for examination by a debugger.
    366          //
    367          //*****************************************************************************
    368          __weak void
    369          HardFault_Handler(void)
    370          {
    371              //
    372              // Enter an infinite loop.
    373              //
    374              while(1)
    375              {
    376              }
    377          }
    378          
    379          //*****************************************************************************
    380          //
    381          // This is the code that gets called when the processor receives an unexpected
    382          // interrupt.  This simply enters an infinite loop, preserving the system state
    383          // for examination by a debugger.
    384          //
    385          //*****************************************************************************
    386          static void
    387          am_default_isr(void)
    388          {
    389              //
    390              // Go into an infinite loop.
    391              //
    392              while(1)
    393              {
    394              }
    395          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   Reset_Handler
         0   -> __iar_program_start
       0   SVC_Handler
       0   SecureFault_Handler
       0   SysTick_Handler
       0   UsageFault_Handler
       0   __low_level_init
       0   am_adc_isr
       0   am_ble_isr
       0   am_brownout_isr
       0   am_clkgen_isr
       0   am_ctimer_isr
       0   am_default_isr
       0   am_gpio_isr
       0   am_iomaster0_isr
       0   am_iomaster1_isr
       0   am_iomaster2_isr
       0   am_iomaster3_isr
       0   am_iomaster4_isr
       0   am_iomaster5_isr
       0   am_ioslave_acc_isr
       0   am_ioslave_ios_isr
       0   am_mspi0_isr
       0   am_pdm0_isr
       0   am_rtc_isr
       0   am_scard_isr
       0   am_software0_isr
       0   am_stimer_cmpr0_isr
       0   am_stimer_cmpr1_isr
       0   am_stimer_cmpr2_isr
       0   am_stimer_cmpr3_isr
       0   am_stimer_cmpr4_isr
       0   am_stimer_cmpr5_isr
       0   am_stimer_cmpr6_isr
       0   am_stimer_cmpr7_isr
       0   am_stimer_isr
       0   am_uart1_isr
       0   am_uart_isr
       0   am_vcomp_isr
       0   am_watchdog_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       2  MemManage_Handler
          BusFault_Handler
          UsageFault_Handler
          SecureFault_Handler
          HardFault_Handler
       2  NMI_Handler
       6  Reset_Handler
      64  __Patchable
      10  __low_level_init
     192  __vector_table
       2  am_iomaster0_isr
          am_iomaster3_isr
          am_iomaster1_isr
          SVC_Handler
          am_iomaster2_isr
          DebugMon_Handler
          SysTick_Handler
          am_watchdog_isr
          am_rtc_isr
          am_vcomp_isr
          am_brownout_isr
          am_ioslave_ios_isr
          PendSV_Handler
          am_ioslave_acc_isr
          am_ble_isr
          am_software0_isr
          am_stimer_isr
          am_iomaster5_isr
          am_stimer_cmpr0_isr
          am_scard_isr
          am_adc_isr
          am_stimer_cmpr1_isr
          am_stimer_cmpr2_isr
          am_pdm0_isr
          am_mspi0_isr
          am_ctimer_isr
          am_stimer_cmpr3_isr
          am_stimer_cmpr4_isr
          am_gpio_isr
          am_uart1_isr
          am_iomaster4_isr
          am_uart_isr
          am_flash_isr
          am_default_isr
          am_clkgen_isr
          am_stimer_cmpr5_isr
          am_stimer_cmpr6_isr
          am_stimer_cmpr7_isr
    4096  pui32Stack

 
   192 bytes in section .intvec
 4 096 bytes in section .noinit
    64 bytes in section .patch
    30 bytes in section .text
 
    26 bytes of CODE  memory (+ 4 bytes shared)
   256 bytes of CONST memory
 4 096 bytes of DATA  memory

Errors: none
Warnings: none
