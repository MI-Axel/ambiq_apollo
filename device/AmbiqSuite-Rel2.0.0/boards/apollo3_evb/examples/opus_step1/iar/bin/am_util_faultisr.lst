###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.2.178/W32 for ARM         12/Mar/2019  10:07:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\utils\am_util_faultisr.c
#    Command line =  
#        -f C:\temp\EW8E43.tmp
#        (C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\utils\am_util_faultisr.c
#        -D iar -D AM_PART_APOLLO3 -D AM_PACKAGE_BGA -lcN
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\bin
#        --diag_suppress Pa050 -o
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\bin
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\utils\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\CMSIS\ARM\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\mcu\apollo3\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\devices\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\bsp\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\..\..\..\..\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\src\
#        -I
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\..\src\sound\
#        -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\bin\am_util_faultisr.lst
#    Object file  =  
#        C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\boards\apollo3_evb\examples\opus_step1\iar\bin\am_util_faultisr.o
#
###############################################################################

C:\Users\agao\ambiq_apollo\device\AmbiqSuite-Rel2.0.0\utils\am_util_faultisr.c
      1          //*****************************************************************************
      2          //
      3          //! @file am_util_faultisr.c
      4          //!
      5          //! @brief An extended hard-fault handler.
      6          //
      7          // This module is intended to be completely portable with no HAL or BSP
      8          // dependencies.
      9          //
     10          // Further, it is intended to be compiler/platform independent enabling it to
     11          // run on GCC, Keil, IAR, etc.
     12          //
     13          //*****************************************************************************
     14          
     15          //*****************************************************************************
     16          //
     17          // Copyright (c) 2019, Ambiq Micro
     18          // All rights reserved.
     19          // 
     20          // Redistribution and use in source and binary forms, with or without
     21          // modification, are permitted provided that the following conditions are met:
     22          // 
     23          // 1. Redistributions of source code must retain the above copyright notice,
     24          // this list of conditions and the following disclaimer.
     25          // 
     26          // 2. Redistributions in binary form must reproduce the above copyright
     27          // notice, this list of conditions and the following disclaimer in the
     28          // documentation and/or other materials provided with the distribution.
     29          // 
     30          // 3. Neither the name of the copyright holder nor the names of its
     31          // contributors may be used to endorse or promote products derived from this
     32          // software without specific prior written permission.
     33          // 
     34          // Third party software included in this distribution is subject to the
     35          // additional license terms as defined in the /docs/licenses directory.
     36          // 
     37          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     38          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     39          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     40          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     41          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     42          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     43          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     44          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     45          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     47          // POSSIBILITY OF SUCH DAMAGE.
     48          //
     49          // This is part of revision v2.0.0 of the AmbiqSuite Development Package.
     50          //
     51          //*****************************************************************************
     52          
     53          #include <stdint.h>
     54          #include "am_mcu_apollo.h"
     55          
     56          //*****************************************************************************
     57          //
     58          // Macros
     59          //
     60          //*****************************************************************************
     61          
     62          //
     63          // Macros used by am_util_faultisr_collect_data().
     64          //
     65          #define AM_REG_SYSCTRL_CFSR_O                        0xE000ED28
     66          #define AM_REG_SYSCTRL_BFAR_O                        0xE000ED38
     67          #define AM_REGVAL(x)               (*((volatile uint32_t *)(x)))
     68          
     69          //*****************************************************************************
     70          //
     71          // Data structures
     72          //
     73          //*****************************************************************************
     74          
     75          //
     76          // Define a structure for local storage in am_util_faultisr_collect_data().
     77          // Set structure alignment to 1 byte to minimize storage requirements.
     78          //
     79          #pragma pack(1)
     80          typedef struct
     81          {
     82              //
     83              // Stacked registers
     84              //
     85              volatile uint32_t u32R0;
     86              volatile uint32_t u32R1;
     87              volatile uint32_t u32R2;
     88              volatile uint32_t u32R3;
     89              volatile uint32_t u32R12;
     90              volatile uint32_t u32LR;
     91              volatile uint32_t u32PC;
     92              volatile uint32_t u32PSR;
     93          
     94              //
     95              // Other data
     96              //
     97              volatile uint32_t u32FaultAddr;
     98              volatile uint32_t u32BFAR;
     99              volatile uint32_t u32CFSR;
    100              volatile uint8_t  u8MMSR;
    101              volatile uint8_t  u8BFSR;
    102              volatile uint16_t u16UFSR;
    103          
    104          } am_fault_t;
    105          
    106          //
    107          // Restore the default structure alignment
    108          //
    109          #pragma pack()
    110          
    111          //*****************************************************************************
    112          //
    113          // Prototypes
    114          //
    115          //*****************************************************************************
    116          void am_util_faultisr_collect_data(uint32_t u32IsrSP);
    117          
    118          //
    119          // Prototype for printf, if used.
    120          //
    121          extern uint32_t am_util_stdio_printf(char *pui8Fmt, ...);
    122          
    123          
    124          //*****************************************************************************
    125          //
    126          // getStackedReg() will retrieve a specified register value, as it was stacked
    127          // by the processor after the fault, from the stack.
    128          //
    129          // The registers are stacked in the following order:
    130          //  R0, R1, R2, R3, R12, LR, PC, PSR.
    131          // To get R0 from the stack, call getStackedReg(0), r1 is getStackedReg(1)...
    132          //
    133          //*****************************************************************************
    134          #if (defined (__ARMCC_VERSION)) && (__ARMCC_VERSION < 6000000)
    135          __asm uint32_t
    136          #if AM_CMSIS_REGS
    137          HardFault_Handler(void)
    138          #else // AM_CMSIS_REGS
    139          am_fault_isr(void)
    140          #endif // AM_CMSIS_REGS
    141          {
    142              import  am_util_faultisr_collect_data
    143              push    {r0, lr}    // Always pushes to MSP stack
    144              tst     lr, #4      // Check if we should use MSP or PSP
    145              itet    eq          // Instrs executed when: eq,ne,eq
    146              mrseq   r0, msp     //    bit2=0 indicating MSP stack
    147              mrsne   r0, psp     // e: bit2=1 indicating PSP stack
    148              addseq  r0, r0, #8  // t: bit2=0, adjust for pushes to MSP stack
    149              bl      am_util_faultisr_collect_data
    150              pop     {r0, pc}    // Restore from MSP stack
    151          }
    152          
    153          __asm uint32_t
    154          getStackedReg(uint32_t regnum, uint32_t u32SP)
    155          {
    156              lsls    r0, r0, #2
    157              adds    r0, r0, r1
    158              ldr     r0, [r0]
    159              bx      lr
    160          }
    161          
    162          #elif (defined (__ARMCC_VERSION)) && (__ARMCC_VERSION > 6000000)
    163          uint32_t __attribute__((naked))
    164          #if AM_CMSIS_REGS
    165          HardFault_Handler(void)
    166          #else // AM_CMSIS_REGS
    167          am_fault_isr(void)
    168          #endif // AM_CMSIS_REGS
    169          {
    170              __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    171              __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    172              __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    173              __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    174              __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    175              __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    176              __asm("    bl      am_util_faultisr_collect_data");
    177              __asm("    pop     {r0,pc}");       // Restore from MSP stack
    178          }
    179          
    180          uint32_t __attribute__((naked))
    181          getStackedReg(uint32_t regnum, uint32_t u32SP)
    182          {
    183              __asm("    lsls    r0, r0, #2");
    184              __asm("    adds    r0, r1");
    185              __asm("    ldr     r0, [r0]");
    186              __asm("    bx      lr");
    187          }
    188          #elif defined(__GNUC_STDC_INLINE__)
    189          uint32_t __attribute__((naked))
    190          #if AM_CMSIS_REGS
    191          HardFault_Handler(void)
    192          #else // AM_CMSIS_REGS
    193          am_fault_isr(void)
    194          #endif // AM_CMSIS_REGS
    195          {
    196              __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    197              __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    198              __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    199              __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    200              __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    201              __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    202              __asm("    bl      am_util_faultisr_collect_data");
    203              __asm("    pop     {r0,pc}");       // Restore from MSP stack
    204          }
    205          
    206          uint32_t __attribute__((naked))
    207          getStackedReg(uint32_t regnum, uint32_t u32SP)
    208          {
    209              __asm("    lsls    r0, r0, #2");
    210              __asm("    adds    r0, r1");
    211              __asm("    ldr     r0, [r0]");
    212              __asm("    bx      lr");
    213          }
    214          #elif defined(__IAR_SYSTEMS_ICC__)
    215          #pragma diag_suppress = Pe940   // Suppress IAR compiler warning about missing
    216                                          // return statement on a non-void function
    217          __stackless uint32_t
    218          #if AM_CMSIS_REGS
    219          HardFault_Handler(void)
    220          #else // AM_CMSIS_REGS
    221          am_fault_isr(void)
    222          #endif // AM_CMSIS_REGS
    223          {
    224              __asm("push    {r0,lr}");       // Always pushes to MSP stack
    225              __asm("tst     lr, #4\n"        // Check if we should use MSP or PSP
    226                    "itet    eq\n"            // Instrs executed when: eq,ne,eq
    227                    "mrseq   r0, msp\n"       //    bit2=0 indicating MSP stack
    228                    "mrsne   r0, psp\n"       // e: bit2=1 indicating PSP stack
    229                    "addseq  r0, r0, #8\n");  // t: bit2=0, adjust for pushes to MSP stack
    230              __asm("bl      am_util_faultisr_collect_data");
    231              __asm("pop     {r0,pc}");  // Restore from MSP stack
    232          }
    233          
    234          __stackless uint32_t
    235          getStackedReg(uint32_t regnum, uint32_t u32SP)
    236          {
    237              __asm("     lsls    r0, r0, #2");
    238              __asm("     adds    r0, r0, r1");
    239              __asm("     ldr     r0, [r0]");
    240              __asm("     bx      lr");
    241          }
    242          #pragma diag_default = Pe940    // Restore IAR compiler warning
    243          #endif
    244          
    245          //*****************************************************************************
    246          //
    247          // am_util_faultisr_collect_data(uint32_t u32IsrSP);
    248          //
    249          // This function is intended to be called by HardFault_Handler(), called
    250          // when the processor receives a hard fault interrupt.  This part of the
    251          // handler parses through the various fault codes and saves them into a data
    252          // structure so they can be readily examined by the user in the debugger.
    253          //
    254          // The input u32IsrSP is expected to be the value of the stack pointer when
    255          // HardFault_Handler() was called.
    256          //
    257          //*****************************************************************************
    258          void
    259          am_util_faultisr_collect_data(uint32_t u32IsrSP)
    260          {
    261              volatile am_fault_t sFaultData;
    262              am_hal_mcuctrl_fault_t sHalFaultData = {0};
    263          
    264              uint32_t u32Mask = 0;
    265          
    266              //
    267              // Following is a brief overview of fault information provided by the M4.
    268              // More details can be found in the Cortex M4 User Guide.
    269              //
    270              // CFSR (Configurable Fault Status Reg) contains MMSR, BFSR, and UFSR:
    271              //   7:0    MMSR (MemManage)
    272              //          [0] IACCVIOL    Instr fetch from a location that does not
    273              //                          permit execution.
    274              //          [1] DACCVIOL    Data access violation flag. MMAR contains
    275              //                          address of the attempted access.
    276              //          [2] Reserved
    277              //          [3] MUNSTKERR   MemMange fault on unstacking for a return
    278              //                          from exception.
    279              //          [4] MSTKERR     MemMange fault on stacking for exception
    280              //                          entry.
    281              //          [5] MLSPERR     MemMange fault during FP lazy state
    282              //                          preservation.
    283              //          [6] Reserved
    284              //          [7] MMARVALID   MemManage Fault Addr Reg (MMFAR) valid flag.
    285              //  15:8    BusFault
    286              //          [0] IBUSERR     If set, instruction bus error.
    287              //          [1] PRECISERR   Data bus error. Stacked PC points to instr
    288              //                          that caused the fault.
    289              //          [2] IMPRECISERR Data bus error, but stacked return addr is not
    290              //                          related to the instr that caused the error and
    291              //                          BFAR is not valid.
    292              //          [3] UNSTKERR    Bus fault on unstacking for a return from
    293              //                          exception.
    294              //          [4] STKERR      Bus fault on stacking for exception entry.
    295              //          [5] LSPERR      Bus fault during FP lazy state preservation.
    296              //          [6] Reserved
    297              //          [7] BFARVALID   BFAR valid.
    298              //  31:16   UFSR (UsageFault)
    299              //          [0] UNDEFINSTR  Undefined instruction.
    300              //          [1] INVSTATE    Invalid state.
    301              //          [2] INVPC       Invalid PC load.
    302              //          [3] NOCP        No coprocessor.
    303              //        [7:4] Reserved
    304              //          [8] UNALIGNED   Unaligned access.
    305              //          [9] DIVBYZERO   Divide by zero.
    306              //      [15:10] Reserved
    307              //
    308          
    309              //
    310              // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    311              // a breakpoint at the end of the routine.  If the printing is not used,
    312              // we'll get a compiler warning; so to avoid that warning, we'll use it
    313              // in a dummy assignment here.
    314              //
    315              sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    316              sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    317              sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    318              sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    319              sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    320          
    321              //
    322              // The address of the location that caused the fault.  e.g. if accessing an
    323              // invalid data location caused the fault, that address will appear here.
    324              //
    325              sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    326          
    327              //
    328              // The address of the instruction that caused the fault is the stacked PC
    329              // if BFSR bit1 is set.
    330              //
    331              sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    332          
    333              //
    334              // Get the stacked registers.
    335              // Note - the address of the instruction that caused the fault is u32PC.
    336              //
    337              sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    338              sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    339              sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    340              sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    341              sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    342              sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    343              sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    344              sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    345          
    346              //
    347              // Use the HAL MCUCTRL functions to read the fault data.
    348              //
    349          #if AM_APOLLO3_MCUCTRL
    350              am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    351          #else // AM_APOLLO3_MCUCTRL
    352              am_hal_mcuctrl_fault_status(&sHalFaultData);
    353          #endif // AM_APOLLO3_MCUCTRL
    354          
    355          
    356          #ifdef AM_UTIL_FAULTISR_PRINT
    357              //
    358              // If printf has previously been initialized in the application, we should
    359              // be able to print out the fault information.
    360              //
    361              am_util_stdio_printf("Hard Fault stacked data:\n");
    362              am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    363              am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    364              am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    365              am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    366              am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    367              am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    368              am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    369              am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    370              am_util_stdio_printf("Other Hard Fault data:\n");
    371              am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    372              am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    373              am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    374              am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    375              am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    376          
    377              //
    378              // Print out any bits set in the BFSR.
    379              //
    380              u32Mask = 0x80;
    381              while (u32Mask)
    382              {
    383                  switch (sFaultData.u8BFSR & u32Mask)
    384                  {
    385                      case 0x80:
    386                          am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    387                          break;
    388                      case 0x40:
    389                          am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    390                          break;
    391                      case 0x20:
    392                          am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    393                          break;
    394                      case 0x10:
    395                          am_util_stdio_printf("        BFSR bit4: STKERR\n");
    396                          break;
    397                      case 0x08:
    398                          am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    399                          break;
    400                      case 0x04:
    401                          am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    402                          break;
    403                      case 0x02:
    404                          am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    405                          break;
    406                      case 0x01:
    407                          am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    408                          break;
    409                      default:
    410                          break;
    411                  }
    412                  u32Mask >>= 1;
    413              }
    414          
    415              //
    416              // Print out any Apollo* Internal fault information.
    417              //
    418              am_util_stdio_printf("MCU Fault data:\n");
    419              if (sHalFaultData.bICODE)
    420              {
    421                am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    422              }
    423              if (sHalFaultData.bDCODE)
    424              {
    425                am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    426              }
    427              if (sHalFaultData.bSYS)
    428              {
    429                am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    430              }
    431          
    432          
    433          #endif
    434          
    435              u32Mask = 0;
    436          
    437              //
    438              // Spin in an infinite loop.
    439              // We need to spin here inside the function so that we have access to
    440              // local data, i.e. sFaultData.
    441              //
    442              while(1)
    443              {
    444              }
    445          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HardFault_Handler
      88   am_util_faultisr_collect_data
        88   -> __aeabi_memclr4
        88   -> am_hal_mcuctrl_info_get
        88   -> getStackedReg
       0   getStackedReg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      24  ?_0
      28  HardFault_Handler
     168  am_util_faultisr_collect_data
      10  getStackedReg

 
  24 bytes in section .rodata
 214 bytes in section .text
 
 214 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
