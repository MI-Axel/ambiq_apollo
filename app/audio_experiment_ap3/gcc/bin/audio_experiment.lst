
bin/audio_experiment.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 fd e8 00 00 65 e9 00 00 c1 d7 00 00     ........e.......
    c010:	c1 d7 00 00 c1 d7 00 00 c1 d7 00 00 00 00 00 00     ................
	...
    c02c:	6b e9 00 00 6b e9 00 00 00 00 00 00 6b e9 00 00     k...k.......k...
    c03c:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c04c:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c05c:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c06c:	6b e9 00 00 6b e9 00 00 81 eb 00 00 2d eb 00 00     k...k.......-...
    c07c:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c08c:	45 ed 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     E...k...k...k...
    c09c:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c0ac:	6b e9 00 00 6b e9 00 00 6b e9 00 00 6b e9 00 00     k...k...k...k...
    c0bc:	6b e9 00 00                                         k...

0000c0c0 <__Patchable>:
	...

0000c100 <arm_bitreversal_32>:
    c100:	1c4b      	adds	r3, r1, #1
    c102:	2b01      	cmp	r3, #1
    c104:	bf98      	it	ls
    c106:	4770      	bxls	lr
    c108:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    c10c:	1c91      	adds	r1, r2, #2
    c10e:	089b      	lsrs	r3, r3, #2

0000c110 <arm_bitreversal_32_0>:
    c110:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    c114:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    c118:	880a      	ldrh	r2, [r1, #0]
    c11a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    c11e:	4480      	add	r8, r0
    c120:	4481      	add	r9, r0
    c122:	4402      	add	r2, r0
    c124:	4484      	add	ip, r0
    c126:	f8d9 7000 	ldr.w	r7, [r9]
    c12a:	f8d8 6000 	ldr.w	r6, [r8]
    c12e:	6815      	ldr	r5, [r2, #0]
    c130:	f8dc 4000 	ldr.w	r4, [ip]
    c134:	f8c9 6000 	str.w	r6, [r9]
    c138:	f8c8 7000 	str.w	r7, [r8]
    c13c:	f8cc 5000 	str.w	r5, [ip]
    c140:	6014      	str	r4, [r2, #0]
    c142:	f8d9 7004 	ldr.w	r7, [r9, #4]
    c146:	f8d8 6004 	ldr.w	r6, [r8, #4]
    c14a:	6855      	ldr	r5, [r2, #4]
    c14c:	f8dc 4004 	ldr.w	r4, [ip, #4]
    c150:	f8c9 6004 	str.w	r6, [r9, #4]
    c154:	f8c8 7004 	str.w	r7, [r8, #4]
    c158:	f8cc 5004 	str.w	r5, [ip, #4]
    c15c:	6054      	str	r4, [r2, #4]
    c15e:	3108      	adds	r1, #8
    c160:	3b01      	subs	r3, #1
    c162:	d1d5      	bne.n	c110 <arm_bitreversal_32_0>
    c164:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    c168:	4770      	bx	lr

0000c16a <arm_bitreversal_16>:
    c16a:	1c4b      	adds	r3, r1, #1
    c16c:	2b01      	cmp	r3, #1
    c16e:	bf98      	it	ls
    c170:	4770      	bxls	lr
    c172:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    c176:	1c91      	adds	r1, r2, #2
    c178:	089b      	lsrs	r3, r3, #2

0000c17a <arm_bitreversal_16_0>:
    c17a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    c17e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    c182:	880a      	ldrh	r2, [r1, #0]
    c184:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    c188:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    c18c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    c190:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    c194:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    c198:	f8d9 7000 	ldr.w	r7, [r9]
    c19c:	f8d8 6000 	ldr.w	r6, [r8]
    c1a0:	6815      	ldr	r5, [r2, #0]
    c1a2:	f8dc 4000 	ldr.w	r4, [ip]
    c1a6:	f8c9 6000 	str.w	r6, [r9]
    c1aa:	f8c8 7000 	str.w	r7, [r8]
    c1ae:	f8cc 5000 	str.w	r5, [ip]
    c1b2:	6014      	str	r4, [r2, #0]
    c1b4:	3108      	adds	r1, #8
    c1b6:	3b01      	subs	r3, #1
    c1b8:	d1df      	bne.n	c17a <arm_bitreversal_16_0>
    c1ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    c1be:	4770      	bx	lr

0000c1c0 <__aeabi_drsub>:
    c1c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c1c4:	e002      	b.n	c1cc <__adddf3>
    c1c6:	bf00      	nop

0000c1c8 <__aeabi_dsub>:
    c1c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c1cc <__adddf3>:
    c1cc:	b530      	push	{r4, r5, lr}
    c1ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c1d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c1d6:	ea94 0f05 	teq	r4, r5
    c1da:	bf08      	it	eq
    c1dc:	ea90 0f02 	teqeq	r0, r2
    c1e0:	bf1f      	itttt	ne
    c1e2:	ea54 0c00 	orrsne.w	ip, r4, r0
    c1e6:	ea55 0c02 	orrsne.w	ip, r5, r2
    c1ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c1ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c1f2:	f000 80e2 	beq.w	c3ba <__adddf3+0x1ee>
    c1f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c1fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c1fe:	bfb8      	it	lt
    c200:	426d      	neglt	r5, r5
    c202:	dd0c      	ble.n	c21e <__adddf3+0x52>
    c204:	442c      	add	r4, r5
    c206:	ea80 0202 	eor.w	r2, r0, r2
    c20a:	ea81 0303 	eor.w	r3, r1, r3
    c20e:	ea82 0000 	eor.w	r0, r2, r0
    c212:	ea83 0101 	eor.w	r1, r3, r1
    c216:	ea80 0202 	eor.w	r2, r0, r2
    c21a:	ea81 0303 	eor.w	r3, r1, r3
    c21e:	2d36      	cmp	r5, #54	; 0x36
    c220:	bf88      	it	hi
    c222:	bd30      	pophi	{r4, r5, pc}
    c224:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c228:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c22c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c234:	d002      	beq.n	c23c <__adddf3+0x70>
    c236:	4240      	negs	r0, r0
    c238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c23c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c240:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c248:	d002      	beq.n	c250 <__adddf3+0x84>
    c24a:	4252      	negs	r2, r2
    c24c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c250:	ea94 0f05 	teq	r4, r5
    c254:	f000 80a7 	beq.w	c3a6 <__adddf3+0x1da>
    c258:	f1a4 0401 	sub.w	r4, r4, #1
    c25c:	f1d5 0e20 	rsbs	lr, r5, #32
    c260:	db0d      	blt.n	c27e <__adddf3+0xb2>
    c262:	fa02 fc0e 	lsl.w	ip, r2, lr
    c266:	fa22 f205 	lsr.w	r2, r2, r5
    c26a:	1880      	adds	r0, r0, r2
    c26c:	f141 0100 	adc.w	r1, r1, #0
    c270:	fa03 f20e 	lsl.w	r2, r3, lr
    c274:	1880      	adds	r0, r0, r2
    c276:	fa43 f305 	asr.w	r3, r3, r5
    c27a:	4159      	adcs	r1, r3
    c27c:	e00e      	b.n	c29c <__adddf3+0xd0>
    c27e:	f1a5 0520 	sub.w	r5, r5, #32
    c282:	f10e 0e20 	add.w	lr, lr, #32
    c286:	2a01      	cmp	r2, #1
    c288:	fa03 fc0e 	lsl.w	ip, r3, lr
    c28c:	bf28      	it	cs
    c28e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c292:	fa43 f305 	asr.w	r3, r3, r5
    c296:	18c0      	adds	r0, r0, r3
    c298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c29c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c2a0:	d507      	bpl.n	c2b2 <__adddf3+0xe6>
    c2a2:	f04f 0e00 	mov.w	lr, #0
    c2a6:	f1dc 0c00 	rsbs	ip, ip, #0
    c2aa:	eb7e 0000 	sbcs.w	r0, lr, r0
    c2ae:	eb6e 0101 	sbc.w	r1, lr, r1
    c2b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c2b6:	d31b      	bcc.n	c2f0 <__adddf3+0x124>
    c2b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c2bc:	d30c      	bcc.n	c2d8 <__adddf3+0x10c>
    c2be:	0849      	lsrs	r1, r1, #1
    c2c0:	ea5f 0030 	movs.w	r0, r0, rrx
    c2c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c2c8:	f104 0401 	add.w	r4, r4, #1
    c2cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c2d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c2d4:	f080 809a 	bcs.w	c40c <__adddf3+0x240>
    c2d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c2dc:	bf08      	it	eq
    c2de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c2e2:	f150 0000 	adcs.w	r0, r0, #0
    c2e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c2ea:	ea41 0105 	orr.w	r1, r1, r5
    c2ee:	bd30      	pop	{r4, r5, pc}
    c2f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c2f4:	4140      	adcs	r0, r0
    c2f6:	eb41 0101 	adc.w	r1, r1, r1
    c2fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c2fe:	f1a4 0401 	sub.w	r4, r4, #1
    c302:	d1e9      	bne.n	c2d8 <__adddf3+0x10c>
    c304:	f091 0f00 	teq	r1, #0
    c308:	bf04      	itt	eq
    c30a:	4601      	moveq	r1, r0
    c30c:	2000      	moveq	r0, #0
    c30e:	fab1 f381 	clz	r3, r1
    c312:	bf08      	it	eq
    c314:	3320      	addeq	r3, #32
    c316:	f1a3 030b 	sub.w	r3, r3, #11
    c31a:	f1b3 0220 	subs.w	r2, r3, #32
    c31e:	da0c      	bge.n	c33a <__adddf3+0x16e>
    c320:	320c      	adds	r2, #12
    c322:	dd08      	ble.n	c336 <__adddf3+0x16a>
    c324:	f102 0c14 	add.w	ip, r2, #20
    c328:	f1c2 020c 	rsb	r2, r2, #12
    c32c:	fa01 f00c 	lsl.w	r0, r1, ip
    c330:	fa21 f102 	lsr.w	r1, r1, r2
    c334:	e00c      	b.n	c350 <__adddf3+0x184>
    c336:	f102 0214 	add.w	r2, r2, #20
    c33a:	bfd8      	it	le
    c33c:	f1c2 0c20 	rsble	ip, r2, #32
    c340:	fa01 f102 	lsl.w	r1, r1, r2
    c344:	fa20 fc0c 	lsr.w	ip, r0, ip
    c348:	bfdc      	itt	le
    c34a:	ea41 010c 	orrle.w	r1, r1, ip
    c34e:	4090      	lslle	r0, r2
    c350:	1ae4      	subs	r4, r4, r3
    c352:	bfa2      	ittt	ge
    c354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c358:	4329      	orrge	r1, r5
    c35a:	bd30      	popge	{r4, r5, pc}
    c35c:	ea6f 0404 	mvn.w	r4, r4
    c360:	3c1f      	subs	r4, #31
    c362:	da1c      	bge.n	c39e <__adddf3+0x1d2>
    c364:	340c      	adds	r4, #12
    c366:	dc0e      	bgt.n	c386 <__adddf3+0x1ba>
    c368:	f104 0414 	add.w	r4, r4, #20
    c36c:	f1c4 0220 	rsb	r2, r4, #32
    c370:	fa20 f004 	lsr.w	r0, r0, r4
    c374:	fa01 f302 	lsl.w	r3, r1, r2
    c378:	ea40 0003 	orr.w	r0, r0, r3
    c37c:	fa21 f304 	lsr.w	r3, r1, r4
    c380:	ea45 0103 	orr.w	r1, r5, r3
    c384:	bd30      	pop	{r4, r5, pc}
    c386:	f1c4 040c 	rsb	r4, r4, #12
    c38a:	f1c4 0220 	rsb	r2, r4, #32
    c38e:	fa20 f002 	lsr.w	r0, r0, r2
    c392:	fa01 f304 	lsl.w	r3, r1, r4
    c396:	ea40 0003 	orr.w	r0, r0, r3
    c39a:	4629      	mov	r1, r5
    c39c:	bd30      	pop	{r4, r5, pc}
    c39e:	fa21 f004 	lsr.w	r0, r1, r4
    c3a2:	4629      	mov	r1, r5
    c3a4:	bd30      	pop	{r4, r5, pc}
    c3a6:	f094 0f00 	teq	r4, #0
    c3aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c3ae:	bf06      	itte	eq
    c3b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c3b4:	3401      	addeq	r4, #1
    c3b6:	3d01      	subne	r5, #1
    c3b8:	e74e      	b.n	c258 <__adddf3+0x8c>
    c3ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c3be:	bf18      	it	ne
    c3c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c3c4:	d029      	beq.n	c41a <__adddf3+0x24e>
    c3c6:	ea94 0f05 	teq	r4, r5
    c3ca:	bf08      	it	eq
    c3cc:	ea90 0f02 	teqeq	r0, r2
    c3d0:	d005      	beq.n	c3de <__adddf3+0x212>
    c3d2:	ea54 0c00 	orrs.w	ip, r4, r0
    c3d6:	bf04      	itt	eq
    c3d8:	4619      	moveq	r1, r3
    c3da:	4610      	moveq	r0, r2
    c3dc:	bd30      	pop	{r4, r5, pc}
    c3de:	ea91 0f03 	teq	r1, r3
    c3e2:	bf1e      	ittt	ne
    c3e4:	2100      	movne	r1, #0
    c3e6:	2000      	movne	r0, #0
    c3e8:	bd30      	popne	{r4, r5, pc}
    c3ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c3ee:	d105      	bne.n	c3fc <__adddf3+0x230>
    c3f0:	0040      	lsls	r0, r0, #1
    c3f2:	4149      	adcs	r1, r1
    c3f4:	bf28      	it	cs
    c3f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c3fa:	bd30      	pop	{r4, r5, pc}
    c3fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c400:	bf3c      	itt	cc
    c402:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c406:	bd30      	popcc	{r4, r5, pc}
    c408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c40c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c414:	f04f 0000 	mov.w	r0, #0
    c418:	bd30      	pop	{r4, r5, pc}
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf1a      	itte	ne
    c420:	4619      	movne	r1, r3
    c422:	4610      	movne	r0, r2
    c424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c428:	bf1c      	itt	ne
    c42a:	460b      	movne	r3, r1
    c42c:	4602      	movne	r2, r0
    c42e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c432:	bf06      	itte	eq
    c434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c438:	ea91 0f03 	teqeq	r1, r3
    c43c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c440:	bd30      	pop	{r4, r5, pc}
    c442:	bf00      	nop

0000c444 <__aeabi_ui2d>:
    c444:	f090 0f00 	teq	r0, #0
    c448:	bf04      	itt	eq
    c44a:	2100      	moveq	r1, #0
    c44c:	4770      	bxeq	lr
    c44e:	b530      	push	{r4, r5, lr}
    c450:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c454:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c458:	f04f 0500 	mov.w	r5, #0
    c45c:	f04f 0100 	mov.w	r1, #0
    c460:	e750      	b.n	c304 <__adddf3+0x138>
    c462:	bf00      	nop

0000c464 <__aeabi_i2d>:
    c464:	f090 0f00 	teq	r0, #0
    c468:	bf04      	itt	eq
    c46a:	2100      	moveq	r1, #0
    c46c:	4770      	bxeq	lr
    c46e:	b530      	push	{r4, r5, lr}
    c470:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c474:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c478:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c47c:	bf48      	it	mi
    c47e:	4240      	negmi	r0, r0
    c480:	f04f 0100 	mov.w	r1, #0
    c484:	e73e      	b.n	c304 <__adddf3+0x138>
    c486:	bf00      	nop

0000c488 <__aeabi_f2d>:
    c488:	0042      	lsls	r2, r0, #1
    c48a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c48e:	ea4f 0131 	mov.w	r1, r1, rrx
    c492:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c496:	bf1f      	itttt	ne
    c498:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c49c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c4a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c4a4:	4770      	bxne	lr
    c4a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c4aa:	bf08      	it	eq
    c4ac:	4770      	bxeq	lr
    c4ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c4b2:	bf04      	itt	eq
    c4b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c4b8:	4770      	bxeq	lr
    c4ba:	b530      	push	{r4, r5, lr}
    c4bc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c4c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c4c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c4c8:	e71c      	b.n	c304 <__adddf3+0x138>
    c4ca:	bf00      	nop

0000c4cc <__aeabi_ul2d>:
    c4cc:	ea50 0201 	orrs.w	r2, r0, r1
    c4d0:	bf08      	it	eq
    c4d2:	4770      	bxeq	lr
    c4d4:	b530      	push	{r4, r5, lr}
    c4d6:	f04f 0500 	mov.w	r5, #0
    c4da:	e00a      	b.n	c4f2 <__aeabi_l2d+0x16>

0000c4dc <__aeabi_l2d>:
    c4dc:	ea50 0201 	orrs.w	r2, r0, r1
    c4e0:	bf08      	it	eq
    c4e2:	4770      	bxeq	lr
    c4e4:	b530      	push	{r4, r5, lr}
    c4e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c4ea:	d502      	bpl.n	c4f2 <__aeabi_l2d+0x16>
    c4ec:	4240      	negs	r0, r0
    c4ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c4f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c4fe:	f43f aed8 	beq.w	c2b2 <__adddf3+0xe6>
    c502:	f04f 0203 	mov.w	r2, #3
    c506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c50a:	bf18      	it	ne
    c50c:	3203      	addne	r2, #3
    c50e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c512:	bf18      	it	ne
    c514:	3203      	addne	r2, #3
    c516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c51a:	f1c2 0320 	rsb	r3, r2, #32
    c51e:	fa00 fc03 	lsl.w	ip, r0, r3
    c522:	fa20 f002 	lsr.w	r0, r0, r2
    c526:	fa01 fe03 	lsl.w	lr, r1, r3
    c52a:	ea40 000e 	orr.w	r0, r0, lr
    c52e:	fa21 f102 	lsr.w	r1, r1, r2
    c532:	4414      	add	r4, r2
    c534:	e6bd      	b.n	c2b2 <__adddf3+0xe6>
    c536:	bf00      	nop

0000c538 <__aeabi_dmul>:
    c538:	b570      	push	{r4, r5, r6, lr}
    c53a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c53e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c546:	bf1d      	ittte	ne
    c548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c54c:	ea94 0f0c 	teqne	r4, ip
    c550:	ea95 0f0c 	teqne	r5, ip
    c554:	f000 f8de 	bleq	c714 <__aeabi_dmul+0x1dc>
    c558:	442c      	add	r4, r5
    c55a:	ea81 0603 	eor.w	r6, r1, r3
    c55e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c56a:	bf18      	it	ne
    c56c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c578:	d038      	beq.n	c5ec <__aeabi_dmul+0xb4>
    c57a:	fba0 ce02 	umull	ip, lr, r0, r2
    c57e:	f04f 0500 	mov.w	r5, #0
    c582:	fbe1 e502 	umlal	lr, r5, r1, r2
    c586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c58a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c58e:	f04f 0600 	mov.w	r6, #0
    c592:	fbe1 5603 	umlal	r5, r6, r1, r3
    c596:	f09c 0f00 	teq	ip, #0
    c59a:	bf18      	it	ne
    c59c:	f04e 0e01 	orrne.w	lr, lr, #1
    c5a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c5a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c5a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c5ac:	d204      	bcs.n	c5b8 <__aeabi_dmul+0x80>
    c5ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c5b2:	416d      	adcs	r5, r5
    c5b4:	eb46 0606 	adc.w	r6, r6, r6
    c5b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c5bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c5c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c5c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c5c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c5cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c5d0:	bf88      	it	hi
    c5d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c5d6:	d81e      	bhi.n	c616 <__aeabi_dmul+0xde>
    c5d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c5dc:	bf08      	it	eq
    c5de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c5e2:	f150 0000 	adcs.w	r0, r0, #0
    c5e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c5ea:	bd70      	pop	{r4, r5, r6, pc}
    c5ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c5f0:	ea46 0101 	orr.w	r1, r6, r1
    c5f4:	ea40 0002 	orr.w	r0, r0, r2
    c5f8:	ea81 0103 	eor.w	r1, r1, r3
    c5fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c600:	bfc2      	ittt	gt
    c602:	ebd4 050c 	rsbsgt	r5, r4, ip
    c606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c60a:	bd70      	popgt	{r4, r5, r6, pc}
    c60c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c610:	f04f 0e00 	mov.w	lr, #0
    c614:	3c01      	subs	r4, #1
    c616:	f300 80ab 	bgt.w	c770 <__aeabi_dmul+0x238>
    c61a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c61e:	bfde      	ittt	le
    c620:	2000      	movle	r0, #0
    c622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c626:	bd70      	pople	{r4, r5, r6, pc}
    c628:	f1c4 0400 	rsb	r4, r4, #0
    c62c:	3c20      	subs	r4, #32
    c62e:	da35      	bge.n	c69c <__aeabi_dmul+0x164>
    c630:	340c      	adds	r4, #12
    c632:	dc1b      	bgt.n	c66c <__aeabi_dmul+0x134>
    c634:	f104 0414 	add.w	r4, r4, #20
    c638:	f1c4 0520 	rsb	r5, r4, #32
    c63c:	fa00 f305 	lsl.w	r3, r0, r5
    c640:	fa20 f004 	lsr.w	r0, r0, r4
    c644:	fa01 f205 	lsl.w	r2, r1, r5
    c648:	ea40 0002 	orr.w	r0, r0, r2
    c64c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c658:	fa21 f604 	lsr.w	r6, r1, r4
    c65c:	eb42 0106 	adc.w	r1, r2, r6
    c660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c664:	bf08      	it	eq
    c666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c66a:	bd70      	pop	{r4, r5, r6, pc}
    c66c:	f1c4 040c 	rsb	r4, r4, #12
    c670:	f1c4 0520 	rsb	r5, r4, #32
    c674:	fa00 f304 	lsl.w	r3, r0, r4
    c678:	fa20 f005 	lsr.w	r0, r0, r5
    c67c:	fa01 f204 	lsl.w	r2, r1, r4
    c680:	ea40 0002 	orr.w	r0, r0, r2
    c684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c68c:	f141 0100 	adc.w	r1, r1, #0
    c690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c694:	bf08      	it	eq
    c696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c69a:	bd70      	pop	{r4, r5, r6, pc}
    c69c:	f1c4 0520 	rsb	r5, r4, #32
    c6a0:	fa00 f205 	lsl.w	r2, r0, r5
    c6a4:	ea4e 0e02 	orr.w	lr, lr, r2
    c6a8:	fa20 f304 	lsr.w	r3, r0, r4
    c6ac:	fa01 f205 	lsl.w	r2, r1, r5
    c6b0:	ea43 0302 	orr.w	r3, r3, r2
    c6b4:	fa21 f004 	lsr.w	r0, r1, r4
    c6b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c6bc:	fa21 f204 	lsr.w	r2, r1, r4
    c6c0:	ea20 0002 	bic.w	r0, r0, r2
    c6c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c6c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6cc:	bf08      	it	eq
    c6ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6d2:	bd70      	pop	{r4, r5, r6, pc}
    c6d4:	f094 0f00 	teq	r4, #0
    c6d8:	d10f      	bne.n	c6fa <__aeabi_dmul+0x1c2>
    c6da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c6de:	0040      	lsls	r0, r0, #1
    c6e0:	eb41 0101 	adc.w	r1, r1, r1
    c6e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c6e8:	bf08      	it	eq
    c6ea:	3c01      	subeq	r4, #1
    c6ec:	d0f7      	beq.n	c6de <__aeabi_dmul+0x1a6>
    c6ee:	ea41 0106 	orr.w	r1, r1, r6
    c6f2:	f095 0f00 	teq	r5, #0
    c6f6:	bf18      	it	ne
    c6f8:	4770      	bxne	lr
    c6fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c6fe:	0052      	lsls	r2, r2, #1
    c700:	eb43 0303 	adc.w	r3, r3, r3
    c704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c708:	bf08      	it	eq
    c70a:	3d01      	subeq	r5, #1
    c70c:	d0f7      	beq.n	c6fe <__aeabi_dmul+0x1c6>
    c70e:	ea43 0306 	orr.w	r3, r3, r6
    c712:	4770      	bx	lr
    c714:	ea94 0f0c 	teq	r4, ip
    c718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c71c:	bf18      	it	ne
    c71e:	ea95 0f0c 	teqne	r5, ip
    c722:	d00c      	beq.n	c73e <__aeabi_dmul+0x206>
    c724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c728:	bf18      	it	ne
    c72a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c72e:	d1d1      	bne.n	c6d4 <__aeabi_dmul+0x19c>
    c730:	ea81 0103 	eor.w	r1, r1, r3
    c734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c738:	f04f 0000 	mov.w	r0, #0
    c73c:	bd70      	pop	{r4, r5, r6, pc}
    c73e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c742:	bf06      	itte	eq
    c744:	4610      	moveq	r0, r2
    c746:	4619      	moveq	r1, r3
    c748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c74c:	d019      	beq.n	c782 <__aeabi_dmul+0x24a>
    c74e:	ea94 0f0c 	teq	r4, ip
    c752:	d102      	bne.n	c75a <__aeabi_dmul+0x222>
    c754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c758:	d113      	bne.n	c782 <__aeabi_dmul+0x24a>
    c75a:	ea95 0f0c 	teq	r5, ip
    c75e:	d105      	bne.n	c76c <__aeabi_dmul+0x234>
    c760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c764:	bf1c      	itt	ne
    c766:	4610      	movne	r0, r2
    c768:	4619      	movne	r1, r3
    c76a:	d10a      	bne.n	c782 <__aeabi_dmul+0x24a>
    c76c:	ea81 0103 	eor.w	r1, r1, r3
    c770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c77c:	f04f 0000 	mov.w	r0, #0
    c780:	bd70      	pop	{r4, r5, r6, pc}
    c782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c78a:	bd70      	pop	{r4, r5, r6, pc}

0000c78c <__aeabi_ddiv>:
    c78c:	b570      	push	{r4, r5, r6, lr}
    c78e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c79a:	bf1d      	ittte	ne
    c79c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c7a0:	ea94 0f0c 	teqne	r4, ip
    c7a4:	ea95 0f0c 	teqne	r5, ip
    c7a8:	f000 f8a7 	bleq	c8fa <__aeabi_ddiv+0x16e>
    c7ac:	eba4 0405 	sub.w	r4, r4, r5
    c7b0:	ea81 0e03 	eor.w	lr, r1, r3
    c7b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c7b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c7bc:	f000 8088 	beq.w	c8d0 <__aeabi_ddiv+0x144>
    c7c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c7c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c7c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c7cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c7d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c7d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c7d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c7dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c7e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c7e4:	429d      	cmp	r5, r3
    c7e6:	bf08      	it	eq
    c7e8:	4296      	cmpeq	r6, r2
    c7ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c7ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c7f2:	d202      	bcs.n	c7fa <__aeabi_ddiv+0x6e>
    c7f4:	085b      	lsrs	r3, r3, #1
    c7f6:	ea4f 0232 	mov.w	r2, r2, rrx
    c7fa:	1ab6      	subs	r6, r6, r2
    c7fc:	eb65 0503 	sbc.w	r5, r5, r3
    c800:	085b      	lsrs	r3, r3, #1
    c802:	ea4f 0232 	mov.w	r2, r2, rrx
    c806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c80a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c80e:	ebb6 0e02 	subs.w	lr, r6, r2
    c812:	eb75 0e03 	sbcs.w	lr, r5, r3
    c816:	bf22      	ittt	cs
    c818:	1ab6      	subcs	r6, r6, r2
    c81a:	4675      	movcs	r5, lr
    c81c:	ea40 000c 	orrcs.w	r0, r0, ip
    c820:	085b      	lsrs	r3, r3, #1
    c822:	ea4f 0232 	mov.w	r2, r2, rrx
    c826:	ebb6 0e02 	subs.w	lr, r6, r2
    c82a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c82e:	bf22      	ittt	cs
    c830:	1ab6      	subcs	r6, r6, r2
    c832:	4675      	movcs	r5, lr
    c834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c838:	085b      	lsrs	r3, r3, #1
    c83a:	ea4f 0232 	mov.w	r2, r2, rrx
    c83e:	ebb6 0e02 	subs.w	lr, r6, r2
    c842:	eb75 0e03 	sbcs.w	lr, r5, r3
    c846:	bf22      	ittt	cs
    c848:	1ab6      	subcs	r6, r6, r2
    c84a:	4675      	movcs	r5, lr
    c84c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c850:	085b      	lsrs	r3, r3, #1
    c852:	ea4f 0232 	mov.w	r2, r2, rrx
    c856:	ebb6 0e02 	subs.w	lr, r6, r2
    c85a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c85e:	bf22      	ittt	cs
    c860:	1ab6      	subcs	r6, r6, r2
    c862:	4675      	movcs	r5, lr
    c864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c868:	ea55 0e06 	orrs.w	lr, r5, r6
    c86c:	d018      	beq.n	c8a0 <__aeabi_ddiv+0x114>
    c86e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c876:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c87a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c87e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c88a:	d1c0      	bne.n	c80e <__aeabi_ddiv+0x82>
    c88c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c890:	d10b      	bne.n	c8aa <__aeabi_ddiv+0x11e>
    c892:	ea41 0100 	orr.w	r1, r1, r0
    c896:	f04f 0000 	mov.w	r0, #0
    c89a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c89e:	e7b6      	b.n	c80e <__aeabi_ddiv+0x82>
    c8a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c8a4:	bf04      	itt	eq
    c8a6:	4301      	orreq	r1, r0
    c8a8:	2000      	moveq	r0, #0
    c8aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c8ae:	bf88      	it	hi
    c8b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c8b4:	f63f aeaf 	bhi.w	c616 <__aeabi_dmul+0xde>
    c8b8:	ebb5 0c03 	subs.w	ip, r5, r3
    c8bc:	bf04      	itt	eq
    c8be:	ebb6 0c02 	subseq.w	ip, r6, r2
    c8c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c8c6:	f150 0000 	adcs.w	r0, r0, #0
    c8ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c8ce:	bd70      	pop	{r4, r5, r6, pc}
    c8d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c8d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c8d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c8dc:	bfc2      	ittt	gt
    c8de:	ebd4 050c 	rsbsgt	r5, r4, ip
    c8e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c8e6:	bd70      	popgt	{r4, r5, r6, pc}
    c8e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8ec:	f04f 0e00 	mov.w	lr, #0
    c8f0:	3c01      	subs	r4, #1
    c8f2:	e690      	b.n	c616 <__aeabi_dmul+0xde>
    c8f4:	ea45 0e06 	orr.w	lr, r5, r6
    c8f8:	e68d      	b.n	c616 <__aeabi_dmul+0xde>
    c8fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c8fe:	ea94 0f0c 	teq	r4, ip
    c902:	bf08      	it	eq
    c904:	ea95 0f0c 	teqeq	r5, ip
    c908:	f43f af3b 	beq.w	c782 <__aeabi_dmul+0x24a>
    c90c:	ea94 0f0c 	teq	r4, ip
    c910:	d10a      	bne.n	c928 <__aeabi_ddiv+0x19c>
    c912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c916:	f47f af34 	bne.w	c782 <__aeabi_dmul+0x24a>
    c91a:	ea95 0f0c 	teq	r5, ip
    c91e:	f47f af25 	bne.w	c76c <__aeabi_dmul+0x234>
    c922:	4610      	mov	r0, r2
    c924:	4619      	mov	r1, r3
    c926:	e72c      	b.n	c782 <__aeabi_dmul+0x24a>
    c928:	ea95 0f0c 	teq	r5, ip
    c92c:	d106      	bne.n	c93c <__aeabi_ddiv+0x1b0>
    c92e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c932:	f43f aefd 	beq.w	c730 <__aeabi_dmul+0x1f8>
    c936:	4610      	mov	r0, r2
    c938:	4619      	mov	r1, r3
    c93a:	e722      	b.n	c782 <__aeabi_dmul+0x24a>
    c93c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c940:	bf18      	it	ne
    c942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c946:	f47f aec5 	bne.w	c6d4 <__aeabi_dmul+0x19c>
    c94a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c94e:	f47f af0d 	bne.w	c76c <__aeabi_dmul+0x234>
    c952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c956:	f47f aeeb 	bne.w	c730 <__aeabi_dmul+0x1f8>
    c95a:	e712      	b.n	c782 <__aeabi_dmul+0x24a>

0000c95c <__aeabi_d2f>:
    c95c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c964:	bf24      	itt	cs
    c966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c96a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c96e:	d90d      	bls.n	c98c <__aeabi_d2f+0x30>
    c970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c97c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c984:	bf08      	it	eq
    c986:	f020 0001 	biceq.w	r0, r0, #1
    c98a:	4770      	bx	lr
    c98c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c990:	d121      	bne.n	c9d6 <__aeabi_d2f+0x7a>
    c992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c996:	bfbc      	itt	lt
    c998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c99c:	4770      	bxlt	lr
    c99e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c9a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c9a6:	f1c2 0218 	rsb	r2, r2, #24
    c9aa:	f1c2 0c20 	rsb	ip, r2, #32
    c9ae:	fa10 f30c 	lsls.w	r3, r0, ip
    c9b2:	fa20 f002 	lsr.w	r0, r0, r2
    c9b6:	bf18      	it	ne
    c9b8:	f040 0001 	orrne.w	r0, r0, #1
    c9bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c9c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c9c4:	fa03 fc0c 	lsl.w	ip, r3, ip
    c9c8:	ea40 000c 	orr.w	r0, r0, ip
    c9cc:	fa23 f302 	lsr.w	r3, r3, r2
    c9d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c9d4:	e7cc      	b.n	c970 <__aeabi_d2f+0x14>
    c9d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c9da:	d107      	bne.n	c9ec <__aeabi_d2f+0x90>
    c9dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c9e0:	bf1e      	ittt	ne
    c9e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c9e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c9ea:	4770      	bxne	lr
    c9ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c9f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c9f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c9f8:	4770      	bx	lr
    c9fa:	bf00      	nop

0000c9fc <main>:
#include "am_AEP_fft_data.h"

#endif // AM_AEP_MIKRO_THD_CALC

int main(void)
{
    c9fc:	b590      	push	{r4, r7, lr}
    c9fe:	f5ad 4dc0 	sub.w	sp, sp, #24576	; 0x6000
    ca02:	b085      	sub	sp, #20
    ca04:	af00      	add	r7, sp, #0
    am_app_AEP_sys_init();
    ca06:	f002 f803 	bl	ea10 <am_app_AEP_sys_init>

uint32_t g_ui32THDDataBuffer[THD_FFT_SIZE];
float g_fTHDTimeDomain[THD_FFT_SIZE*2];
float g_fTHDFrequencyDomain[THD_FFT_SIZE*2];
float g_fTHDMagnitudes[THD_FFT_SIZE];
float g_fFrequencyUnits = 0;
    ca0a:	f04f 0300 	mov.w	r3, #0
    ca0e:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
    ca12:	f102 0208 	add.w	r2, r2, #8
    ca16:	6013      	str	r3, [r2, #0]
float g_fTHDResult = 0;
    ca18:	f04f 0300 	mov.w	r3, #0
    ca1c:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
    ca20:	f102 0204 	add.w	r2, r2, #4
    ca24:	6013      	str	r3, [r2, #0]
uint8_t g_ui8THDTestStartFlag = 1;              // 1: test start; 0: test stop.
    ca26:	2301      	movs	r3, #1
    ca28:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
    ca2c:	f102 020f 	add.w	r2, r2, #15
    ca30:	7013      	strb	r3, [r2, #0]

#endif // AM_AEP_MIKRO_THD_CALC
    //
    // Print the banner.
    //
    DebugLog("Audio test starts!\r\n\n");
    ca32:	4826      	ldr	r0, [pc, #152]	; (cacc <main+0xd0>)
    ca34:	f001 ffba 	bl	e9ac <DebugLog>

    while (1)
    {

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    ca38:	4b25      	ldr	r3, [pc, #148]	; (cad0 <main+0xd4>)
    ca3a:	681b      	ldr	r3, [r3, #0]
    ca3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ca40:	d306      	bcc.n	ca50 <main+0x54>
        {
            g_ui32TimerCount = 0;
    ca42:	4b23      	ldr	r3, [pc, #140]	; (cad0 <main+0xd4>)
    ca44:	2200      	movs	r2, #0
    ca46:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    ca48:	2100      	movs	r1, #0
    ca4a:	4822      	ldr	r0, [pc, #136]	; (cad4 <main+0xd8>)
    ca4c:	f001 ff07 	bl	e85e <am_devices_led_toggle>
        }
#endif // AM_AEP_MIKRO_CALIBRATION

#if AM_AEP_MIKRO_THD_CALC
        
        if(g_ui8THDTestStartFlag == 1)
    ca50:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
    ca54:	f103 030f 	add.w	r3, r3, #15
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	2b01      	cmp	r3, #1
    ca5c:	d12c      	bne.n	cab8 <main+0xbc>
        {
            g_ui8THDTestStartFlag = 0;
    ca5e:	2300      	movs	r3, #0
    ca60:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
    ca64:	f102 020f 	add.w	r2, r2, #15
    ca68:	7013      	strb	r3, [r2, #0]
            am_pcm_fft(g_in16TestInput_2KHZ_SR16K, g_fTHDMagnitudes, THD_FFT_SIZE);
    ca6a:	f107 0310 	add.w	r3, r7, #16
    ca6e:	3b0c      	subs	r3, #12
    ca70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ca74:	4619      	mov	r1, r3
    ca76:	4818      	ldr	r0, [pc, #96]	; (cad8 <main+0xdc>)
    ca78:	f002 f992 	bl	eda0 <am_pcm_fft>
            g_fTHDResult = am_thd_calc(128, g_fTHDMagnitudes, THD_FFT_SIZE, 16000);
    ca7c:	f107 0110 	add.w	r1, r7, #16
    ca80:	390c      	subs	r1, #12
    ca82:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    ca86:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ca8a:	2080      	movs	r0, #128	; 0x80
    ca8c:	f002 f9fe 	bl	ee8c <am_thd_calc>
    ca90:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
    ca94:	f103 0304 	add.w	r3, r3, #4
    ca98:	ed83 0a00 	vstr	s0, [r3]

            am_util_stdio_printf("THD result: %0.6f.\r\n", g_fTHDResult);
    ca9c:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
    caa0:	f103 0304 	add.w	r3, r3, #4
    caa4:	6818      	ldr	r0, [r3, #0]
    caa6:	f7ff fcef 	bl	c488 <__aeabi_f2d>
    caaa:	4603      	mov	r3, r0
    caac:	460c      	mov	r4, r1
    caae:	461a      	mov	r2, r3
    cab0:	4623      	mov	r3, r4
    cab2:	480a      	ldr	r0, [pc, #40]	; (cadc <main+0xe0>)
    cab4:	f001 fd9c 	bl	e5f0 <am_util_stdio_printf>
#endif // AM_AEP_MIKRO_THD_CALC
//
// Board key interface for debug using
//

        if(g_sysKeyValue == AM_APP_KEY_0)
    cab8:	4b09      	ldr	r3, [pc, #36]	; (cae0 <main+0xe4>)
    caba:	781b      	ldrb	r3, [r3, #0]
    cabc:	b2db      	uxtb	r3, r3
    cabe:	2b01      	cmp	r3, #1
    cac0:	d1ba      	bne.n	ca38 <main+0x3c>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    cac2:	4b07      	ldr	r3, [pc, #28]	; (cae0 <main+0xe4>)
    cac4:	2200      	movs	r2, #0
    cac6:	701a      	strb	r2, [r3, #0]
        if (g_ui32TimerCount >=1000)
    cac8:	e7b6      	b.n	ca38 <main+0x3c>
    caca:	bf00      	nop
    cacc:	000111d8 	.word	0x000111d8
    cad0:	1000c57c 	.word	0x1000c57c
    cad4:	1000c00c 	.word	0x1000c00c
    cad8:	000114c8 	.word	0x000114c8
    cadc:	000111f0 	.word	0x000111f0
    cae0:	1000c588 	.word	0x1000c588

0000cae4 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    cae4:	b480      	push	{r7}
    cae6:	b083      	sub	sp, #12
    cae8:	af00      	add	r7, sp, #0
    caea:	6078      	str	r0, [r7, #4]
    caec:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    caee:	687b      	ldr	r3, [r7, #4]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d001      	beq.n	caf8 <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    caf4:	2305      	movs	r3, #5
    caf6:	e048      	b.n	cb8a <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    caf8:	683b      	ldr	r3, [r7, #0]
    cafa:	2b00      	cmp	r3, #0
    cafc:	d101      	bne.n	cb02 <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    cafe:	2306      	movs	r3, #6
    cb00:	e043      	b.n	cb8a <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    cb02:	4925      	ldr	r1, [pc, #148]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb04:	687a      	ldr	r2, [r7, #4]
    cb06:	4613      	mov	r3, r2
    cb08:	005b      	lsls	r3, r3, #1
    cb0a:	4413      	add	r3, r2
    cb0c:	009b      	lsls	r3, r3, #2
    cb0e:	440b      	add	r3, r1
    cb10:	78db      	ldrb	r3, [r3, #3]
    cb12:	f3c3 0300 	ubfx	r3, r3, #0, #1
    cb16:	b2db      	uxtb	r3, r3
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d001      	beq.n	cb20 <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    cb1c:	2307      	movs	r3, #7
    cb1e:	e034      	b.n	cb8a <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    cb20:	491d      	ldr	r1, [pc, #116]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb22:	687a      	ldr	r2, [r7, #4]
    cb24:	4613      	mov	r3, r2
    cb26:	005b      	lsls	r3, r3, #1
    cb28:	4413      	add	r3, r2
    cb2a:	009b      	lsls	r3, r3, #2
    cb2c:	18ca      	adds	r2, r1, r3
    cb2e:	78d3      	ldrb	r3, [r2, #3]
    cb30:	f043 0301 	orr.w	r3, r3, #1
    cb34:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    cb36:	4918      	ldr	r1, [pc, #96]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb38:	687a      	ldr	r2, [r7, #4]
    cb3a:	4613      	mov	r3, r2
    cb3c:	005b      	lsls	r3, r3, #1
    cb3e:	4413      	add	r3, r2
    cb40:	009b      	lsls	r3, r3, #2
    cb42:	18ca      	adds	r2, r1, r3
    cb44:	6813      	ldr	r3, [r2, #0]
    cb46:	4915      	ldr	r1, [pc, #84]	; (cb9c <am_hal_pdm_initialize+0xb8>)
    cb48:	f361 0317 	bfi	r3, r1, #0, #24
    cb4c:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    cb4e:	4912      	ldr	r1, [pc, #72]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb50:	687a      	ldr	r2, [r7, #4]
    cb52:	4613      	mov	r3, r2
    cb54:	005b      	lsls	r3, r3, #1
    cb56:	4413      	add	r3, r2
    cb58:	009b      	lsls	r3, r3, #2
    cb5a:	440b      	add	r3, r1
    cb5c:	3308      	adds	r3, #8
    cb5e:	687a      	ldr	r2, [r7, #4]
    cb60:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    cb62:	490d      	ldr	r1, [pc, #52]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb64:	687a      	ldr	r2, [r7, #4]
    cb66:	4613      	mov	r3, r2
    cb68:	005b      	lsls	r3, r3, #1
    cb6a:	4413      	add	r3, r2
    cb6c:	009b      	lsls	r3, r3, #2
    cb6e:	440b      	add	r3, r1
    cb70:	3304      	adds	r3, #4
    cb72:	2200      	movs	r2, #0
    cb74:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    cb76:	687a      	ldr	r2, [r7, #4]
    cb78:	4613      	mov	r3, r2
    cb7a:	005b      	lsls	r3, r3, #1
    cb7c:	4413      	add	r3, r2
    cb7e:	009b      	lsls	r3, r3, #2
    cb80:	4a05      	ldr	r2, [pc, #20]	; (cb98 <am_hal_pdm_initialize+0xb4>)
    cb82:	441a      	add	r2, r3
    cb84:	683b      	ldr	r3, [r7, #0]
    cb86:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    cb88:	2300      	movs	r3, #0
}
    cb8a:	4618      	mov	r0, r3
    cb8c:	370c      	adds	r7, #12
    cb8e:	46bd      	mov	sp, r7
    cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb94:	4770      	bx	lr
    cb96:	bf00      	nop
    cb98:	1000c59c 	.word	0x1000c59c
    cb9c:	00f956e2 	.word	0x00f956e2

0000cba0 <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    cba0:	b580      	push	{r7, lr}
    cba2:	b088      	sub	sp, #32
    cba4:	af00      	add	r7, sp, #0
    cba6:	6078      	str	r0, [r7, #4]
    cba8:	460b      	mov	r3, r1
    cbaa:	70fb      	strb	r3, [r7, #3]
    cbac:	4613      	mov	r3, r2
    cbae:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cbb0:	687b      	ldr	r3, [r7, #4]
    cbb2:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    cbb4:	69fb      	ldr	r3, [r7, #28]
    cbb6:	689b      	ldr	r3, [r3, #8]
    cbb8:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    cbba:	69bb      	ldr	r3, [r7, #24]
    cbbc:	b2db      	uxtb	r3, r3
    cbbe:	330d      	adds	r3, #13
    cbc0:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	2b00      	cmp	r3, #0
    cbc6:	d00d      	beq.n	cbe4 <am_hal_pdm_power_control+0x44>
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	78db      	ldrb	r3, [r3, #3]
    cbcc:	f003 0301 	and.w	r3, r3, #1
    cbd0:	b2db      	uxtb	r3, r3
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d006      	beq.n	cbe4 <am_hal_pdm_power_control+0x44>
    cbd6:	687b      	ldr	r3, [r7, #4]
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbde:	4a23      	ldr	r2, [pc, #140]	; (cc6c <am_hal_pdm_power_control+0xcc>)
    cbe0:	4293      	cmp	r3, r2
    cbe2:	d001      	beq.n	cbe8 <am_hal_pdm_power_control+0x48>
    cbe4:	2302      	movs	r3, #2
    cbe6:	e03d      	b.n	cc64 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    cbe8:	78fb      	ldrb	r3, [r7, #3]
    cbea:	2b00      	cmp	r3, #0
    cbec:	d004      	beq.n	cbf8 <am_hal_pdm_power_control+0x58>
    cbee:	2b00      	cmp	r3, #0
    cbf0:	db34      	blt.n	cc5c <am_hal_pdm_power_control+0xbc>
    cbf2:	2b02      	cmp	r3, #2
    cbf4:	dc32      	bgt.n	cc5c <am_hal_pdm_power_control+0xbc>
    cbf6:	e01e      	b.n	cc36 <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    cbf8:	78bb      	ldrb	r3, [r7, #2]
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d008      	beq.n	cc10 <am_hal_pdm_power_control+0x70>
    cbfe:	69fb      	ldr	r3, [r7, #28]
    cc00:	791b      	ldrb	r3, [r3, #4]
    cc02:	f083 0301 	eor.w	r3, r3, #1
    cc06:	b2db      	uxtb	r3, r3
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d001      	beq.n	cc10 <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    cc0c:	2307      	movs	r3, #7
    cc0e:	e029      	b.n	cc64 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    cc10:	7dfb      	ldrb	r3, [r7, #23]
    cc12:	4618      	mov	r0, r3
    cc14:	f002 fda0 	bl	f758 <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    cc18:	78bb      	ldrb	r3, [r7, #2]
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	d020      	beq.n	cc60 <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    cc1e:	f002 fca7 	bl	f570 <am_hal_interrupt_master_disable>
    cc22:	4603      	mov	r3, r0
    cc24:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    cc26:	69fb      	ldr	r3, [r7, #28]
    cc28:	2200      	movs	r2, #0
    cc2a:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    cc2c:	693b      	ldr	r3, [r7, #16]
    cc2e:	4618      	mov	r0, r3
    cc30:	f002 fca2 	bl	f578 <am_hal_interrupt_master_set>
            }
            break;
    cc34:	e014      	b.n	cc60 <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    cc36:	78bb      	ldrb	r3, [r7, #2]
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d00a      	beq.n	cc52 <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    cc3c:	f002 fc98 	bl	f570 <am_hal_interrupt_master_disable>
    cc40:	4603      	mov	r3, r0
    cc42:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    cc44:	69fb      	ldr	r3, [r7, #28]
    cc46:	2201      	movs	r2, #1
    cc48:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    cc4a:	68fb      	ldr	r3, [r7, #12]
    cc4c:	4618      	mov	r0, r3
    cc4e:	f002 fc93 	bl	f578 <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    cc52:	7dfb      	ldrb	r3, [r7, #23]
    cc54:	4618      	mov	r0, r3
    cc56:	f002 fda9 	bl	f7ac <am_hal_pwrctrl_periph_disable>
            break;
    cc5a:	e002      	b.n	cc62 <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    cc5c:	2306      	movs	r3, #6
    cc5e:	e001      	b.n	cc64 <am_hal_pdm_power_control+0xc4>
            break;
    cc60:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    cc62:	2300      	movs	r3, #0
}
    cc64:	4618      	mov	r0, r3
    cc66:	3720      	adds	r7, #32
    cc68:	46bd      	mov	sp, r7
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	00f956e2 	.word	0x00f956e2

0000cc70 <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    cc70:	b580      	push	{r7, lr}
    cc72:	b088      	sub	sp, #32
    cc74:	af00      	add	r7, sp, #0
    cc76:	6078      	str	r0, [r7, #4]
    cc78:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cc7a:	687b      	ldr	r3, [r7, #4]
    cc7c:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    cc7e:	69fb      	ldr	r3, [r7, #28]
    cc80:	689b      	ldr	r3, [r3, #8]
    cc82:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	2b00      	cmp	r3, #0
    cc88:	d00d      	beq.n	cca6 <am_hal_pdm_configure+0x36>
    cc8a:	687b      	ldr	r3, [r7, #4]
    cc8c:	78db      	ldrb	r3, [r3, #3]
    cc8e:	f003 0301 	and.w	r3, r3, #1
    cc92:	b2db      	uxtb	r3, r3
    cc94:	2b00      	cmp	r3, #0
    cc96:	d006      	beq.n	cca6 <am_hal_pdm_configure+0x36>
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cca0:	4a5e      	ldr	r2, [pc, #376]	; (ce1c <am_hal_pdm_configure+0x1ac>)
    cca2:	4293      	cmp	r3, r2
    cca4:	d001      	beq.n	ccaa <am_hal_pdm_configure+0x3a>
    cca6:	2302      	movs	r3, #2
    cca8:	e0b4      	b.n	ce14 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    ccaa:	4a5d      	ldr	r2, [pc, #372]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    ccac:	683b      	ldr	r3, [r7, #0]
    ccae:	7f59      	ldrb	r1, [r3, #29]
    ccb0:	6813      	ldr	r3, [r2, #0]
    ccb2:	f361 0341 	bfi	r3, r1, #1, #1
    ccb6:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    ccb8:	683b      	ldr	r3, [r7, #0]
    ccba:	699b      	ldr	r3, [r3, #24]
    ccbc:	4a58      	ldr	r2, [pc, #352]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    ccbe:	f003 0307 	and.w	r3, r3, #7
    ccc2:	b2d9      	uxtb	r1, r3
    ccc4:	6813      	ldr	r3, [r2, #0]
    ccc6:	f361 0384 	bfi	r3, r1, #2, #3
    ccca:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    cccc:	683b      	ldr	r3, [r7, #0]
    ccce:	68db      	ldr	r3, [r3, #12]
    ccd0:	4a53      	ldr	r2, [pc, #332]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    ccd2:	f003 030f 	and.w	r3, r3, #15
    ccd6:	b2d9      	uxtb	r1, r3
    ccd8:	6813      	ldr	r3, [r2, #0]
    ccda:	f361 1348 	bfi	r3, r1, #5, #4
    ccde:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    cce0:	4a4f      	ldr	r2, [pc, #316]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cce2:	683b      	ldr	r3, [r7, #0]
    cce4:	7a19      	ldrb	r1, [r3, #8]
    cce6:	6813      	ldr	r3, [r2, #0]
    cce8:	f361 2349 	bfi	r3, r1, #9, #1
    ccec:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    ccee:	683b      	ldr	r3, [r7, #0]
    ccf0:	685b      	ldr	r3, [r3, #4]
    ccf2:	4a4b      	ldr	r2, [pc, #300]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    ccf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ccf8:	b2d9      	uxtb	r1, r3
    ccfa:	6813      	ldr	r3, [r2, #0]
    ccfc:	f361 2390 	bfi	r3, r1, #10, #7
    cd00:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    cd02:	683b      	ldr	r3, [r7, #0]
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	4a46      	ldr	r2, [pc, #280]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd08:	f003 0303 	and.w	r3, r3, #3
    cd0c:	b2d9      	uxtb	r1, r3
    cd0e:	6813      	ldr	r3, [r2, #0]
    cd10:	f361 4352 	bfi	r3, r1, #17, #2
    cd14:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    cd16:	683b      	ldr	r3, [r7, #0]
    cd18:	785b      	ldrb	r3, [r3, #1]
    cd1a:	4a41      	ldr	r2, [pc, #260]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd1c:	f003 031f 	and.w	r3, r3, #31
    cd20:	b2d9      	uxtb	r1, r3
    cd22:	6813      	ldr	r3, [r2, #0]
    cd24:	f361 5359 	bfi	r3, r1, #21, #5
    cd28:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    cd2a:	683b      	ldr	r3, [r7, #0]
    cd2c:	789b      	ldrb	r3, [r3, #2]
    cd2e:	4a3c      	ldr	r2, [pc, #240]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd30:	f003 031f 	and.w	r3, r3, #31
    cd34:	b2d9      	uxtb	r1, r3
    cd36:	6813      	ldr	r3, [r2, #0]
    cd38:	f361 639e 	bfi	r3, r1, #26, #5
    cd3c:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    cd3e:	4a38      	ldr	r2, [pc, #224]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd40:	683b      	ldr	r3, [r7, #0]
    cd42:	7f99      	ldrb	r1, [r3, #30]
    cd44:	6813      	ldr	r3, [r2, #0]
    cd46:	f361 73df 	bfi	r3, r1, #31, #1
    cd4a:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    cd4c:	4a34      	ldr	r2, [pc, #208]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd4e:	6813      	ldr	r3, [r2, #0]
    cd50:	f043 0301 	orr.w	r3, r3, #1
    cd54:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    cd56:	4a32      	ldr	r2, [pc, #200]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd58:	6853      	ldr	r3, [r2, #4]
    cd5a:	f36f 639a 	bfc	r3, #26, #1
    cd5e:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    cd60:	4a2f      	ldr	r2, [pc, #188]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd62:	6853      	ldr	r3, [r2, #4]
    cd64:	f36f 73df 	bfc	r3, #31, #1
    cd68:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    cd6a:	4a2d      	ldr	r2, [pc, #180]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd6c:	6853      	ldr	r3, [r2, #4]
    cd6e:	f36f 739e 	bfc	r3, #30, #1
    cd72:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    cd74:	683b      	ldr	r3, [r7, #0]
    cd76:	7d5b      	ldrb	r3, [r3, #21]
    cd78:	4a29      	ldr	r2, [pc, #164]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd7a:	f003 0303 	and.w	r3, r3, #3
    cd7e:	b2d9      	uxtb	r1, r3
    cd80:	6853      	ldr	r3, [r2, #4]
    cd82:	f361 03c4 	bfi	r3, r1, #3, #2
    cd86:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    cd88:	4a25      	ldr	r2, [pc, #148]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd8a:	683b      	ldr	r3, [r7, #0]
    cd8c:	7d19      	ldrb	r1, [r3, #20]
    cd8e:	6853      	ldr	r3, [r2, #4]
    cd90:	f361 2308 	bfi	r3, r1, #8, #1
    cd94:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    cd96:	683b      	ldr	r3, [r7, #0]
    cd98:	7c9b      	ldrb	r3, [r3, #18]
    cd9a:	4a21      	ldr	r2, [pc, #132]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cd9c:	f003 0301 	and.w	r3, r3, #1
    cda0:	b2d9      	uxtb	r1, r3
    cda2:	6853      	ldr	r3, [r2, #4]
    cda4:	f361 4310 	bfi	r3, r1, #16, #1
    cda8:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    cdaa:	4a1d      	ldr	r2, [pc, #116]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cdac:	683b      	ldr	r3, [r7, #0]
    cdae:	7cd9      	ldrb	r1, [r3, #19]
    cdb0:	6853      	ldr	r3, [r2, #4]
    cdb2:	f361 4351 	bfi	r3, r1, #17, #1
    cdb6:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    cdb8:	4a19      	ldr	r2, [pc, #100]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cdba:	683b      	ldr	r3, [r7, #0]
    cdbc:	7c59      	ldrb	r1, [r3, #17]
    cdbe:	6853      	ldr	r3, [r2, #4]
    cdc0:	f361 43d3 	bfi	r3, r1, #19, #1
    cdc4:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    cdc6:	4a16      	ldr	r2, [pc, #88]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cdc8:	683b      	ldr	r3, [r7, #0]
    cdca:	7f19      	ldrb	r1, [r3, #28]
    cdcc:	6853      	ldr	r3, [r2, #4]
    cdce:	f361 5314 	bfi	r3, r1, #20, #1
    cdd2:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    cdd4:	683b      	ldr	r3, [r7, #0]
    cdd6:	7c1b      	ldrb	r3, [r3, #16]
    cdd8:	4a11      	ldr	r2, [pc, #68]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    cdda:	f003 0307 	and.w	r3, r3, #7
    cdde:	b2d9      	uxtb	r1, r3
    cde0:	6853      	ldr	r3, [r2, #4]
    cde2:	f361 63dd 	bfi	r3, r1, #27, #3
    cde6:	6053      	str	r3, [r2, #4]

    delay_us(100);
    cde8:	f107 030c 	add.w	r3, r7, #12
    cdec:	4618      	mov	r0, r3
    cdee:	f002 fa85 	bl	f2fc <am_hal_clkgen_status_get>
    cdf2:	68fb      	ldr	r3, [r7, #12]
    cdf4:	4a0b      	ldr	r2, [pc, #44]	; (ce24 <am_hal_pdm_configure+0x1b4>)
    cdf6:	fba2 2303 	umull	r2, r3, r2, r3
    cdfa:	0c9b      	lsrs	r3, r3, #18
    cdfc:	2264      	movs	r2, #100	; 0x64
    cdfe:	fb02 f303 	mul.w	r3, r2, r3
    ce02:	4618      	mov	r0, r3
    ce04:	f002 fb80 	bl	f508 <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    ce08:	4a05      	ldr	r2, [pc, #20]	; (ce20 <am_hal_pdm_configure+0x1b0>)
    ce0a:	6853      	ldr	r3, [r2, #4]
    ce0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ce10:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    ce12:	2300      	movs	r3, #0
}
    ce14:	4618      	mov	r0, r3
    ce16:	3720      	adds	r7, #32
    ce18:	46bd      	mov	sp, r7
    ce1a:	bd80      	pop	{r7, pc}
    ce1c:	00f956e2 	.word	0x00f956e2
    ce20:	50011000 	.word	0x50011000
    ce24:	165e9f81 	.word	0x165e9f81

0000ce28 <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    ce28:	b480      	push	{r7}
    ce2a:	b085      	sub	sp, #20
    ce2c:	af00      	add	r7, sp, #0
    ce2e:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ce30:	687b      	ldr	r3, [r7, #4]
    ce32:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ce34:	68fb      	ldr	r3, [r7, #12]
    ce36:	689b      	ldr	r3, [r3, #8]
    ce38:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ce3a:	687b      	ldr	r3, [r7, #4]
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d00d      	beq.n	ce5c <am_hal_pdm_enable+0x34>
    ce40:	687b      	ldr	r3, [r7, #4]
    ce42:	78db      	ldrb	r3, [r3, #3]
    ce44:	f003 0301 	and.w	r3, r3, #1
    ce48:	b2db      	uxtb	r3, r3
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d006      	beq.n	ce5c <am_hal_pdm_enable+0x34>
    ce4e:	687b      	ldr	r3, [r7, #4]
    ce50:	681b      	ldr	r3, [r3, #0]
    ce52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ce56:	4a0b      	ldr	r2, [pc, #44]	; (ce84 <am_hal_pdm_enable+0x5c>)
    ce58:	4293      	cmp	r3, r2
    ce5a:	d001      	beq.n	ce60 <am_hal_pdm_enable+0x38>
    ce5c:	2302      	movs	r3, #2
    ce5e:	e00a      	b.n	ce76 <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    ce60:	4a09      	ldr	r2, [pc, #36]	; (ce88 <am_hal_pdm_enable+0x60>)
    ce62:	6853      	ldr	r3, [r2, #4]
    ce64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce68:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    ce6a:	4a07      	ldr	r2, [pc, #28]	; (ce88 <am_hal_pdm_enable+0x60>)
    ce6c:	6853      	ldr	r3, [r2, #4]
    ce6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ce72:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    ce74:	2300      	movs	r3, #0
}
    ce76:	4618      	mov	r0, r3
    ce78:	3714      	adds	r7, #20
    ce7a:	46bd      	mov	sp, r7
    ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce80:	4770      	bx	lr
    ce82:	bf00      	nop
    ce84:	00f956e2 	.word	0x00f956e2
    ce88:	50011000 	.word	0x50011000

0000ce8c <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    ce8c:	b480      	push	{r7}
    ce8e:	b087      	sub	sp, #28
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
    ce94:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ce9a:	68fb      	ldr	r3, [r7, #12]
    ce9c:	689b      	ldr	r3, [r3, #8]
    ce9e:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	2b00      	cmp	r3, #0
    cea4:	d00d      	beq.n	cec2 <am_hal_pdm_dma_start+0x36>
    cea6:	687b      	ldr	r3, [r7, #4]
    cea8:	78db      	ldrb	r3, [r3, #3]
    ceaa:	f003 0301 	and.w	r3, r3, #1
    ceae:	b2db      	uxtb	r3, r3
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d006      	beq.n	cec2 <am_hal_pdm_dma_start+0x36>
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	681b      	ldr	r3, [r3, #0]
    ceb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cebc:	4a33      	ldr	r2, [pc, #204]	; (cf8c <am_hal_pdm_dma_start+0x100>)
    cebe:	4293      	cmp	r3, r2
    cec0:	d001      	beq.n	cec6 <am_hal_pdm_dma_start+0x3a>
    cec2:	2302      	movs	r3, #2
    cec4:	e05b      	b.n	cf7e <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    cec6:	2300      	movs	r3, #0
    cec8:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    ceca:	2301      	movs	r3, #1
    cecc:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    cece:	2301      	movs	r3, #1
    ced0:	613b      	str	r3, [r7, #16]
    ced2:	e01b      	b.n	cf0c <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    ced4:	683b      	ldr	r3, [r7, #0]
    ced6:	685b      	ldr	r3, [r3, #4]
    ced8:	693a      	ldr	r2, [r7, #16]
    ceda:	fbb3 f2f2 	udiv	r2, r3, r2
    cede:	6939      	ldr	r1, [r7, #16]
    cee0:	fb01 f202 	mul.w	r2, r1, r2
    cee4:	1a9b      	subs	r3, r3, r2
    cee6:	2b00      	cmp	r3, #0
    cee8:	d10d      	bne.n	cf06 <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    ceea:	683b      	ldr	r3, [r7, #0]
    ceec:	685a      	ldr	r2, [r3, #4]
    ceee:	693b      	ldr	r3, [r7, #16]
    cef0:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    cef4:	2b1f      	cmp	r3, #31
    cef6:	d806      	bhi.n	cf06 <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    cef8:	683b      	ldr	r3, [r7, #0]
    cefa:	685a      	ldr	r2, [r3, #4]
    cefc:	693b      	ldr	r3, [r7, #16]
    cefe:	fbb2 f3f3 	udiv	r3, r2, r3
    cf02:	617b      	str	r3, [r7, #20]
            break;
    cf04:	e007      	b.n	cf16 <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    cf06:	693b      	ldr	r3, [r7, #16]
    cf08:	3301      	adds	r3, #1
    cf0a:	613b      	str	r3, [r7, #16]
    cf0c:	683b      	ldr	r3, [r7, #0]
    cf0e:	685b      	ldr	r3, [r3, #4]
    cf10:	693a      	ldr	r2, [r7, #16]
    cf12:	429a      	cmp	r2, r3
    cf14:	d3de      	bcc.n	ced4 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    cf16:	697b      	ldr	r3, [r7, #20]
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d102      	bne.n	cf22 <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    cf1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cf20:	e02d      	b.n	cf7e <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    cf22:	4a1b      	ldr	r2, [pc, #108]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf24:	697b      	ldr	r3, [r7, #20]
    cf26:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    cf28:	4b19      	ldr	r3, [pc, #100]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf2a:	2200      	movs	r2, #0
    cf2c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    cf30:	4a17      	ldr	r2, [pc, #92]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf32:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    cf36:	f36f 2308 	bfc	r3, #8, #1
    cf3a:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    cf3e:	4a14      	ldr	r2, [pc, #80]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf40:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    cf44:	f36f 0382 	bfc	r3, #2, #1
    cf48:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    cf4c:	4a10      	ldr	r2, [pc, #64]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf4e:	683b      	ldr	r3, [r7, #0]
    cf50:	685b      	ldr	r3, [r3, #4]
    cf52:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    cf56:	4a0e      	ldr	r2, [pc, #56]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf58:	683b      	ldr	r3, [r7, #0]
    cf5a:	681b      	ldr	r3, [r3, #0]
    cf5c:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    cf60:	4a0b      	ldr	r2, [pc, #44]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf62:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    cf66:	f043 0301 	orr.w	r3, r3, #1
    cf6a:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    cf6e:	4a08      	ldr	r2, [pc, #32]	; (cf90 <am_hal_pdm_dma_start+0x104>)
    cf70:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    cf74:	f043 0301 	orr.w	r3, r3, #1
    cf78:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    cf7c:	2300      	movs	r3, #0
}
    cf7e:	4618      	mov	r0, r3
    cf80:	371c      	adds	r7, #28
    cf82:	46bd      	mov	sp, r7
    cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf88:	4770      	bx	lr
    cf8a:	bf00      	nop
    cf8c:	00f956e2 	.word	0x00f956e2
    cf90:	50011000 	.word	0x50011000

0000cf94 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    cf94:	b480      	push	{r7}
    cf96:	b085      	sub	sp, #20
    cf98:	af00      	add	r7, sp, #0
    cf9a:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cfa0:	68fb      	ldr	r3, [r7, #12]
    cfa2:	689b      	ldr	r3, [r3, #8]
    cfa4:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cfa6:	687b      	ldr	r3, [r7, #4]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d00d      	beq.n	cfc8 <am_hal_pdm_fifo_flush+0x34>
    cfac:	687b      	ldr	r3, [r7, #4]
    cfae:	78db      	ldrb	r3, [r3, #3]
    cfb0:	f003 0301 	and.w	r3, r3, #1
    cfb4:	b2db      	uxtb	r3, r3
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d006      	beq.n	cfc8 <am_hal_pdm_fifo_flush+0x34>
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	681b      	ldr	r3, [r3, #0]
    cfbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cfc2:	4a07      	ldr	r2, [pc, #28]	; (cfe0 <am_hal_pdm_fifo_flush+0x4c>)
    cfc4:	4293      	cmp	r3, r2
    cfc6:	d001      	beq.n	cfcc <am_hal_pdm_fifo_flush+0x38>
    cfc8:	2302      	movs	r3, #2
    cfca:	e003      	b.n	cfd4 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    cfcc:	4b05      	ldr	r3, [pc, #20]	; (cfe4 <am_hal_pdm_fifo_flush+0x50>)
    cfce:	2201      	movs	r2, #1
    cfd0:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    cfd2:	2300      	movs	r3, #0
}
    cfd4:	4618      	mov	r0, r3
    cfd6:	3714      	adds	r7, #20
    cfd8:	46bd      	mov	sp, r7
    cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfde:	4770      	bx	lr
    cfe0:	00f956e2 	.word	0x00f956e2
    cfe4:	50011000 	.word	0x50011000

0000cfe8 <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    cfe8:	b480      	push	{r7}
    cfea:	b085      	sub	sp, #20
    cfec:	af00      	add	r7, sp, #0
    cfee:	6078      	str	r0, [r7, #4]
    cff0:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cff6:	68fb      	ldr	r3, [r7, #12]
    cff8:	689b      	ldr	r3, [r3, #8]
    cffa:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cffc:	687b      	ldr	r3, [r7, #4]
    cffe:	2b00      	cmp	r3, #0
    d000:	d00d      	beq.n	d01e <am_hal_pdm_interrupt_enable+0x36>
    d002:	687b      	ldr	r3, [r7, #4]
    d004:	78db      	ldrb	r3, [r3, #3]
    d006:	f003 0301 	and.w	r3, r3, #1
    d00a:	b2db      	uxtb	r3, r3
    d00c:	2b00      	cmp	r3, #0
    d00e:	d006      	beq.n	d01e <am_hal_pdm_interrupt_enable+0x36>
    d010:	687b      	ldr	r3, [r7, #4]
    d012:	681b      	ldr	r3, [r3, #0]
    d014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d018:	4a09      	ldr	r2, [pc, #36]	; (d040 <am_hal_pdm_interrupt_enable+0x58>)
    d01a:	4293      	cmp	r3, r2
    d01c:	d001      	beq.n	d022 <am_hal_pdm_interrupt_enable+0x3a>
    d01e:	2302      	movs	r3, #2
    d020:	e008      	b.n	d034 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    d022:	4b08      	ldr	r3, [pc, #32]	; (d044 <am_hal_pdm_interrupt_enable+0x5c>)
    d024:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d028:	4906      	ldr	r1, [pc, #24]	; (d044 <am_hal_pdm_interrupt_enable+0x5c>)
    d02a:	683b      	ldr	r3, [r7, #0]
    d02c:	4313      	orrs	r3, r2
    d02e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    d032:	2300      	movs	r3, #0
}
    d034:	4618      	mov	r0, r3
    d036:	3714      	adds	r7, #20
    d038:	46bd      	mov	sp, r7
    d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d03e:	4770      	bx	lr
    d040:	00f956e2 	.word	0x00f956e2
    d044:	50011000 	.word	0x50011000

0000d048 <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    d048:	b480      	push	{r7}
    d04a:	b085      	sub	sp, #20
    d04c:	af00      	add	r7, sp, #0
    d04e:	6078      	str	r0, [r7, #4]
    d050:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    d052:	687b      	ldr	r3, [r7, #4]
    d054:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    d056:	68fb      	ldr	r3, [r7, #12]
    d058:	689b      	ldr	r3, [r3, #8]
    d05a:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	2b00      	cmp	r3, #0
    d060:	d00d      	beq.n	d07e <am_hal_pdm_interrupt_clear+0x36>
    d062:	687b      	ldr	r3, [r7, #4]
    d064:	78db      	ldrb	r3, [r3, #3]
    d066:	f003 0301 	and.w	r3, r3, #1
    d06a:	b2db      	uxtb	r3, r3
    d06c:	2b00      	cmp	r3, #0
    d06e:	d006      	beq.n	d07e <am_hal_pdm_interrupt_clear+0x36>
    d070:	687b      	ldr	r3, [r7, #4]
    d072:	681b      	ldr	r3, [r3, #0]
    d074:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d078:	4a07      	ldr	r2, [pc, #28]	; (d098 <am_hal_pdm_interrupt_clear+0x50>)
    d07a:	4293      	cmp	r3, r2
    d07c:	d001      	beq.n	d082 <am_hal_pdm_interrupt_clear+0x3a>
    d07e:	2302      	movs	r3, #2
    d080:	e004      	b.n	d08c <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    d082:	4a06      	ldr	r2, [pc, #24]	; (d09c <am_hal_pdm_interrupt_clear+0x54>)
    d084:	683b      	ldr	r3, [r7, #0]
    d086:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    d08a:	2300      	movs	r3, #0
}
    d08c:	4618      	mov	r0, r3
    d08e:	3714      	adds	r7, #20
    d090:	46bd      	mov	sp, r7
    d092:	f85d 7b04 	ldr.w	r7, [sp], #4
    d096:	4770      	bx	lr
    d098:	00f956e2 	.word	0x00f956e2
    d09c:	50011000 	.word	0x50011000

0000d0a0 <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    d0a0:	b480      	push	{r7}
    d0a2:	b087      	sub	sp, #28
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	60f8      	str	r0, [r7, #12]
    d0a8:	60b9      	str	r1, [r7, #8]
    d0aa:	4613      	mov	r3, r2
    d0ac:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    d0ae:	68fb      	ldr	r3, [r7, #12]
    d0b0:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    d0b2:	697b      	ldr	r3, [r7, #20]
    d0b4:	689b      	ldr	r3, [r3, #8]
    d0b6:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    d0b8:	68fb      	ldr	r3, [r7, #12]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d00d      	beq.n	d0da <am_hal_pdm_interrupt_status_get+0x3a>
    d0be:	68fb      	ldr	r3, [r7, #12]
    d0c0:	78db      	ldrb	r3, [r3, #3]
    d0c2:	f003 0301 	and.w	r3, r3, #1
    d0c6:	b2db      	uxtb	r3, r3
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d006      	beq.n	d0da <am_hal_pdm_interrupt_status_get+0x3a>
    d0cc:	68fb      	ldr	r3, [r7, #12]
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d0d4:	4a10      	ldr	r2, [pc, #64]	; (d118 <am_hal_pdm_interrupt_status_get+0x78>)
    d0d6:	4293      	cmp	r3, r2
    d0d8:	d001      	beq.n	d0de <am_hal_pdm_interrupt_status_get+0x3e>
    d0da:	2302      	movs	r3, #2
    d0dc:	e016      	b.n	d10c <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    d0de:	79fb      	ldrb	r3, [r7, #7]
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d00d      	beq.n	d100 <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    d0e4:	4b0d      	ldr	r3, [pc, #52]	; (d11c <am_hal_pdm_interrupt_status_get+0x7c>)
    d0e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    d0ea:	68bb      	ldr	r3, [r7, #8]
    d0ec:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    d0ee:	4b0b      	ldr	r3, [pc, #44]	; (d11c <am_hal_pdm_interrupt_status_get+0x7c>)
    d0f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d0f4:	68bb      	ldr	r3, [r7, #8]
    d0f6:	681b      	ldr	r3, [r3, #0]
    d0f8:	401a      	ands	r2, r3
    d0fa:	68bb      	ldr	r3, [r7, #8]
    d0fc:	601a      	str	r2, [r3, #0]
    d0fe:	e004      	b.n	d10a <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    d100:	4b06      	ldr	r3, [pc, #24]	; (d11c <am_hal_pdm_interrupt_status_get+0x7c>)
    d102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    d106:	68bb      	ldr	r3, [r7, #8]
    d108:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    d10a:	2300      	movs	r3, #0
}
    d10c:	4618      	mov	r0, r3
    d10e:	371c      	adds	r7, #28
    d110:	46bd      	mov	sp, r7
    d112:	f85d 7b04 	ldr.w	r7, [sp], #4
    d116:	4770      	bx	lr
    d118:	00f956e2 	.word	0x00f956e2
    d11c:	50011000 	.word	0x50011000

0000d120 <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    d120:	b480      	push	{r7}
    d122:	b085      	sub	sp, #20
    d124:	af00      	add	r7, sp, #0
    d126:	6078      	str	r0, [r7, #4]
    d128:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    d12a:	687b      	ldr	r3, [r7, #4]
    d12c:	681b      	ldr	r3, [r3, #0]
    d12e:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    d130:	683b      	ldr	r3, [r7, #0]
    d132:	681b      	ldr	r3, [r3, #0]
    d134:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    d136:	68fa      	ldr	r2, [r7, #12]
    d138:	68bb      	ldr	r3, [r7, #8]
    d13a:	429a      	cmp	r2, r3
    d13c:	bf0c      	ite	eq
    d13e:	2301      	moveq	r3, #1
    d140:	2300      	movne	r3, #0
    d142:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    d144:	4618      	mov	r0, r3
    d146:	3714      	adds	r7, #20
    d148:	46bd      	mov	sp, r7
    d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d14e:	4770      	bx	lr

0000d150 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    d150:	b580      	push	{r7, lr}
    d152:	b092      	sub	sp, #72	; 0x48
    d154:	af00      	add	r7, sp, #0
    d156:	6078      	str	r0, [r7, #4]
    d158:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    d15a:	2300      	movs	r3, #0
    d15c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d160:	687b      	ldr	r3, [r7, #4]
    d162:	2b31      	cmp	r3, #49	; 0x31
    d164:	d901      	bls.n	d16a <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d166:	2306      	movs	r3, #6
    d168:	e1c1      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d16a:	2300      	movs	r3, #0
    d16c:	643b      	str	r3, [r7, #64]	; 0x40
    d16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d170:	647b      	str	r3, [r7, #68]	; 0x44
    d172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d174:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d176:	783b      	ldrb	r3, [r7, #0]
    d178:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d17c:	b2db      	uxtb	r3, r3
    d17e:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d180:	783b      	ldrb	r3, [r7, #0]
    d182:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    d186:	b2db      	uxtb	r3, r3
    d188:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d18c:	00db      	lsls	r3, r3, #3
    d18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d190:	4313      	orrs	r3, r2
    d192:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d194:	783b      	ldrb	r3, [r7, #0]
    d196:	f023 031f 	bic.w	r3, r3, #31
    d19a:	b2db      	uxtb	r3, r3
    d19c:	2b00      	cmp	r3, #0
    d19e:	d03e      	beq.n	d21e <am_hal_gpio_pinconfig+0xce>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d1a2:	f043 0301 	orr.w	r3, r3, #1
    d1a6:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d1a8:	783b      	ldrb	r3, [r7, #0]
    d1aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	2b01      	cmp	r3, #1
    d1b2:	d919      	bls.n	d1e8 <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    d1b4:	783b      	ldrb	r3, [r7, #0]
    d1b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d1ba:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d1bc:	2b05      	cmp	r3, #5
    d1be:	d813      	bhi.n	d1e8 <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d1c0:	783b      	ldrb	r3, [r7, #0]
    d1c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d1c6:	b2db      	uxtb	r3, r3
    d1c8:	3b02      	subs	r3, #2
    d1ca:	019b      	lsls	r3, r3, #6
    d1cc:	461a      	mov	r2, r3
    d1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d1d0:	4313      	orrs	r3, r2
    d1d2:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d1d4:	4a7b      	ldr	r2, [pc, #492]	; (d3c4 <am_hal_gpio_pinconfig+0x274>)
    d1d6:	687b      	ldr	r3, [r7, #4]
    d1d8:	4413      	add	r3, r2
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	f003 0301 	and.w	r3, r3, #1
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d11c      	bne.n	d21e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d1e4:	4b78      	ldr	r3, [pc, #480]	; (d3c8 <am_hal_gpio_pinconfig+0x278>)
    d1e6:	e182      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d1e8:	783b      	ldrb	r3, [r7, #0]
    d1ea:	f023 031f 	bic.w	r3, r3, #31
    d1ee:	b2db      	uxtb	r3, r3
    d1f0:	2bc0      	cmp	r3, #192	; 0xc0
    d1f2:	d104      	bne.n	d1fe <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	2b14      	cmp	r3, #20
    d1f8:	d011      	beq.n	d21e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d1fa:	4b74      	ldr	r3, [pc, #464]	; (d3cc <am_hal_gpio_pinconfig+0x27c>)
    d1fc:	e177      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d1fe:	783b      	ldrb	r3, [r7, #0]
    d200:	f023 031f 	bic.w	r3, r3, #31
    d204:	b2db      	uxtb	r3, r3
    d206:	2b20      	cmp	r3, #32
    d208:	d109      	bne.n	d21e <am_hal_gpio_pinconfig+0xce>
        {
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d20a:	4a6e      	ldr	r2, [pc, #440]	; (d3c4 <am_hal_gpio_pinconfig+0x274>)
    d20c:	687b      	ldr	r3, [r7, #4]
    d20e:	4413      	add	r3, r2
    d210:	781b      	ldrb	r3, [r3, #0]
    d212:	f003 0309 	and.w	r3, r3, #9
    d216:	2b00      	cmp	r3, #0
    d218:	d001      	beq.n	d21e <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d21a:	4b6b      	ldr	r3, [pc, #428]	; (d3c8 <am_hal_gpio_pinconfig+0x278>)
    d21c:	e167      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d220:	2b00      	cmp	r3, #0
    d222:	d021      	beq.n	d268 <am_hal_gpio_pinconfig+0x118>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d226:	2b01      	cmp	r3, #1
    d228:	d10c      	bne.n	d244 <am_hal_gpio_pinconfig+0xf4>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d22a:	4a66      	ldr	r2, [pc, #408]	; (d3c4 <am_hal_gpio_pinconfig+0x274>)
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	4413      	add	r3, r2
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d236:	2b00      	cmp	r3, #0
    d238:	d004      	beq.n	d244 <am_hal_gpio_pinconfig+0xf4>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d240:	647b      	str	r3, [r7, #68]	; 0x44
    d242:	e011      	b.n	d268 <am_hal_gpio_pinconfig+0x118>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d246:	2b02      	cmp	r3, #2
    d248:	d10c      	bne.n	d264 <am_hal_gpio_pinconfig+0x114>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d24a:	4a5e      	ldr	r2, [pc, #376]	; (d3c4 <am_hal_gpio_pinconfig+0x274>)
    d24c:	687b      	ldr	r3, [r7, #4]
    d24e:	4413      	add	r3, r2
    d250:	781b      	ldrb	r3, [r3, #0]
    d252:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d256:	2b00      	cmp	r3, #0
    d258:	d004      	beq.n	d264 <am_hal_gpio_pinconfig+0x114>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d25a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d260:	647b      	str	r3, [r7, #68]	; 0x44
    d262:	e001      	b.n	d268 <am_hal_gpio_pinconfig+0x118>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    d264:	4b5a      	ldr	r3, [pc, #360]	; (d3d0 <am_hal_gpio_pinconfig+0x280>)
    d266:	e142      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d268:	4a5a      	ldr	r2, [pc, #360]	; (d3d4 <am_hal_gpio_pinconfig+0x284>)
    d26a:	687b      	ldr	r3, [r7, #4]
    d26c:	4413      	add	r3, r2
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	461a      	mov	r2, r3
    d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d274:	fa42 f303 	asr.w	r3, r2, r3
    d278:	005b      	lsls	r3, r3, #1
    d27a:	f003 0302 	and.w	r3, r3, #2
    d27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d280:	4313      	orrs	r3, r2
    d282:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d284:	4a54      	ldr	r2, [pc, #336]	; (d3d8 <am_hal_gpio_pinconfig+0x288>)
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	4413      	add	r3, r2
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	461a      	mov	r2, r3
    d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d290:	4293      	cmp	r3, r2
    d292:	d13d      	bne.n	d310 <am_hal_gpio_pinconfig+0x1c0>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d294:	78bb      	ldrb	r3, [r7, #2]
    d296:	f003 0307 	and.w	r3, r3, #7
    d29a:	b2db      	uxtb	r3, r3
    d29c:	2b07      	cmp	r3, #7
    d29e:	d101      	bne.n	d2a4 <am_hal_gpio_pinconfig+0x154>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d2a0:	4b4e      	ldr	r3, [pc, #312]	; (d3dc <am_hal_gpio_pinconfig+0x28c>)
    d2a2:	e124      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d2a4:	78bb      	ldrb	r3, [r7, #2]
    d2a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d2aa:	b2db      	uxtb	r3, r3
    d2ac:	011b      	lsls	r3, r3, #4
    d2ae:	b25a      	sxtb	r2, r3
    d2b0:	78bb      	ldrb	r3, [r7, #2]
    d2b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    d2b6:	b2db      	uxtb	r3, r3
    d2b8:	b25b      	sxtb	r3, r3
    d2ba:	4313      	orrs	r3, r2
    d2bc:	b25b      	sxtb	r3, r3
    d2be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d2c2:	2300      	movs	r3, #0
    d2c4:	637b      	str	r3, [r7, #52]	; 0x34
    d2c6:	e00d      	b.n	d2e4 <am_hal_gpio_pinconfig+0x194>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d2c8:	4a45      	ldr	r2, [pc, #276]	; (d3e0 <am_hal_gpio_pinconfig+0x290>)
    d2ca:	687b      	ldr	r3, [r7, #4]
    d2cc:	009b      	lsls	r3, r3, #2
    d2ce:	441a      	add	r2, r3
    d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2d2:	4413      	add	r3, r2
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d2da:	429a      	cmp	r2, r3
    d2dc:	d006      	beq.n	d2ec <am_hal_gpio_pinconfig+0x19c>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e0:	3301      	adds	r3, #1
    d2e2:	637b      	str	r3, [r7, #52]	; 0x34
    d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e6:	2b03      	cmp	r3, #3
    d2e8:	d9ee      	bls.n	d2c8 <am_hal_gpio_pinconfig+0x178>
    d2ea:	e000      	b.n	d2ee <am_hal_gpio_pinconfig+0x19e>
            {
                break;
    d2ec:	bf00      	nop
            }
        }

#ifdef AM_HAL_ENABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2f0:	2b03      	cmp	r3, #3
    d2f2:	d901      	bls.n	d2f8 <am_hal_gpio_pinconfig+0x1a8>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d2f4:	4b3b      	ldr	r3, [pc, #236]	; (d3e4 <am_hal_gpio_pinconfig+0x294>)
    d2f6:	e0fa      	b.n	d4ee <am_hal_gpio_pinconfig+0x39e>
        }
#endif // AM_HAL_ENABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2fa:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d2fc:	78ba      	ldrb	r2, [r7, #2]
    d2fe:	f3c2 1240 	ubfx	r2, r2, #5, #1
    d302:	b2d2      	uxtb	r2, r2
    d304:	00d2      	lsls	r2, r2, #3
    d306:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d30a:	4313      	orrs	r3, r2
    d30c:	63fb      	str	r3, [r7, #60]	; 0x3c
    d30e:	e044      	b.n	d39a <am_hal_gpio_pinconfig+0x24a>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d310:	787b      	ldrb	r3, [r7, #1]
    d312:	f3c3 1300 	ubfx	r3, r3, #4, #1
    d316:	b2db      	uxtb	r3, r3
    d318:	005b      	lsls	r3, r3, #1
    d31a:	461a      	mov	r2, r3
    d31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d31e:	4313      	orrs	r3, r2
    d320:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d322:	787b      	ldrb	r3, [r7, #1]
    d324:	f3c3 0381 	ubfx	r3, r3, #2, #2
    d328:	b2db      	uxtb	r3, r3
    d32a:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d32c:	787b      	ldrb	r3, [r7, #1]
    d32e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    d332:	b2db      	uxtb	r3, r3
    d334:	00db      	lsls	r3, r3, #3
    d336:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d33a:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d33c:	787b      	ldrb	r3, [r7, #1]
    d33e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    d342:	b2db      	uxtb	r3, r3
    d344:	105b      	asrs	r3, r3, #1
    d346:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d34a:	4313      	orrs	r3, r2
    d34c:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d350:	4313      	orrs	r3, r2
    d352:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d354:	787b      	ldrb	r3, [r7, #1]
    d356:	f003 030c 	and.w	r3, r3, #12
    d35a:	b2db      	uxtb	r3, r3
    d35c:	2b04      	cmp	r3, #4
    d35e:	d007      	beq.n	d370 <am_hal_gpio_pinconfig+0x220>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    d360:	463b      	mov	r3, r7
    d362:	4921      	ldr	r1, [pc, #132]	; (d3e8 <am_hal_gpio_pinconfig+0x298>)
    d364:	4618      	mov	r0, r3
    d366:	f7ff fedb 	bl	d120 <pincfg_equ>
    d36a:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d36c:	2b00      	cmp	r3, #0
    d36e:	d002      	beq.n	d376 <am_hal_gpio_pinconfig+0x226>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    d370:	2301      	movs	r3, #1
    d372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    d376:	787b      	ldrb	r3, [r7, #1]
    d378:	f003 0360 	and.w	r3, r3, #96	; 0x60
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b00      	cmp	r3, #0
    d380:	d10b      	bne.n	d39a <am_hal_gpio_pinconfig+0x24a>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    d382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d384:	f023 0301 	bic.w	r3, r3, #1
    d388:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d38a:	787b      	ldrb	r3, [r7, #1]
    d38c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d390:	b2db      	uxtb	r3, r3
    d392:	461a      	mov	r2, r3
    d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d396:	4313      	orrs	r3, r2
    d398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    d39a:	787b      	ldrb	r3, [r7, #1]
    d39c:	f3c3 0301 	ubfx	r3, r3, #0, #2
    d3a0:	b2db      	uxtb	r3, r3
    d3a2:	2b02      	cmp	r3, #2
    d3a4:	d009      	beq.n	d3ba <am_hal_gpio_pinconfig+0x26a>
    d3a6:	2b03      	cmp	r3, #3
    d3a8:	d020      	beq.n	d3ec <am_hal_gpio_pinconfig+0x29c>
    d3aa:	2b01      	cmp	r3, #1
    d3ac:	d000      	beq.n	d3b0 <am_hal_gpio_pinconfig+0x260>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    d3ae:	e026      	b.n	d3fe <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d3b2:	f043 0304 	orr.w	r3, r3, #4
    d3b6:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    d3b8:	e021      	b.n	d3fe <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    d3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d3bc:	f043 0301 	orr.w	r3, r3, #1
    d3c0:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    d3c2:	e01c      	b.n	d3fe <am_hal_gpio_pinconfig+0x2ae>
    d3c4:	00011388 	.word	0x00011388
    d3c8:	08000100 	.word	0x08000100
    d3cc:	08000101 	.word	0x08000101
    d3d0:	08000102 	.word	0x08000102
    d3d4:	00011354 	.word	0x00011354
    d3d8:	000113bc 	.word	0x000113bc
    d3dc:	08000103 	.word	0x08000103
    d3e0:	000113f0 	.word	0x000113f0
    d3e4:	08000104 	.word	0x08000104
    d3e8:	00011348 	.word	0x00011348
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d3ee:	f043 0304 	orr.w	r3, r3, #4
    d3f2:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    d3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d3f6:	f043 0301 	orr.w	r3, r3, #1
    d3fa:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    d3fc:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d3fe:	687b      	ldr	r3, [r7, #4]
    d400:	085b      	lsrs	r3, r3, #1
    d402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d406:	f023 0303 	bic.w	r3, r3, #3
    d40a:	4a3b      	ldr	r2, [pc, #236]	; (d4f8 <am_hal_gpio_pinconfig+0x3a8>)
    d40c:	441a      	add	r2, r3
    d40e:	627a      	str	r2, [r7, #36]	; 0x24
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	f023 0303 	bic.w	r3, r3, #3
    d416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d41a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d41e:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	f023 0203 	bic.w	r2, r3, #3
    d426:	4b35      	ldr	r3, [pc, #212]	; (d4fc <am_hal_gpio_pinconfig+0x3ac>)
    d428:	4413      	add	r3, r2
    d42a:	61fb      	str	r3, [r7, #28]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	009b      	lsls	r3, r3, #2
    d430:	f003 031c 	and.w	r3, r3, #28
    d434:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    d436:	687b      	ldr	r3, [r7, #4]
    d438:	00db      	lsls	r3, r3, #3
    d43a:	f003 0318 	and.w	r3, r3, #24
    d43e:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d440:	220f      	movs	r2, #15
    d442:	69bb      	ldr	r3, [r7, #24]
    d444:	fa02 f303 	lsl.w	r3, r2, r3
    d448:	43db      	mvns	r3, r3
    d44a:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d44c:	22ff      	movs	r2, #255	; 0xff
    d44e:	697b      	ldr	r3, [r7, #20]
    d450:	fa02 f303 	lsl.w	r3, r2, r3
    d454:	43db      	mvns	r3, r3
    d456:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    d458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d45a:	697b      	ldr	r3, [r7, #20]
    d45c:	fa02 f303 	lsl.w	r3, r2, r3
    d460:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    d462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d464:	697b      	ldr	r3, [r7, #20]
    d466:	fa02 f303 	lsl.w	r3, r2, r3
    d46a:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    d46c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d46e:	69bb      	ldr	r3, [r7, #24]
    d470:	fa02 f303 	lsl.w	r3, r2, r3
    d474:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    d476:	f002 f87b 	bl	f570 <am_hal_interrupt_master_disable>
    d47a:	4603      	mov	r3, r0
    d47c:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    d47e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d482:	2b00      	cmp	r3, #0
    d484:	d00d      	beq.n	d4a2 <am_hal_gpio_pinconfig+0x352>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	f003 021f 	and.w	r2, r3, #31
    d48c:	687b      	ldr	r3, [r7, #4]
    d48e:	095b      	lsrs	r3, r3, #5
    d490:	f003 0301 	and.w	r3, r3, #1
    d494:	0099      	lsls	r1, r3, #2
    d496:	4b1a      	ldr	r3, [pc, #104]	; (d500 <am_hal_gpio_pinconfig+0x3b0>)
    d498:	440b      	add	r3, r1
    d49a:	2101      	movs	r1, #1
    d49c:	fa01 f202 	lsl.w	r2, r1, r2
    d4a0:	601a      	str	r2, [r3, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d4a2:	4b18      	ldr	r3, [pc, #96]	; (d504 <am_hal_gpio_pinconfig+0x3b4>)
    d4a4:	2273      	movs	r2, #115	; 0x73
    d4a6:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d4a8:	6a3b      	ldr	r3, [r7, #32]
    d4aa:	681a      	ldr	r2, [r3, #0]
    d4ac:	68fb      	ldr	r3, [r7, #12]
    d4ae:	ea02 0103 	and.w	r1, r2, r3
    d4b2:	6a3b      	ldr	r3, [r7, #32]
    d4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d4b6:	430a      	orrs	r2, r1
    d4b8:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4bc:	681a      	ldr	r2, [r3, #0]
    d4be:	693b      	ldr	r3, [r7, #16]
    d4c0:	ea02 0103 	and.w	r1, r2, r3
    d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4c8:	430a      	orrs	r2, r1
    d4ca:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d4cc:	69fb      	ldr	r3, [r7, #28]
    d4ce:	681a      	ldr	r2, [r3, #0]
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	ea02 0103 	and.w	r1, r2, r3
    d4d6:	69fb      	ldr	r3, [r7, #28]
    d4d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d4da:	430a      	orrs	r2, r1
    d4dc:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d4de:	4b09      	ldr	r3, [pc, #36]	; (d504 <am_hal_gpio_pinconfig+0x3b4>)
    d4e0:	2200      	movs	r2, #0
    d4e2:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d4e4:	68bb      	ldr	r3, [r7, #8]
    d4e6:	4618      	mov	r0, r3
    d4e8:	f002 f846 	bl	f578 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d4ec:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    d4ee:	4618      	mov	r0, r3
    d4f0:	3748      	adds	r7, #72	; 0x48
    d4f2:	46bd      	mov	sp, r7
    d4f4:	bd80      	pop	{r7, pc}
    d4f6:	bf00      	nop
    d4f8:	40010040 	.word	0x40010040
    d4fc:	400100e0 	.word	0x400100e0
    d500:	400100b4 	.word	0x400100b4
    d504:	40010000 	.word	0x40010000

0000d508 <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    d508:	b480      	push	{r7}
    d50a:	b089      	sub	sp, #36	; 0x24
    d50c:	af00      	add	r7, sp, #0
    d50e:	60f8      	str	r0, [r7, #12]
    d510:	460b      	mov	r3, r1
    d512:	607a      	str	r2, [r7, #4]
    d514:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    d516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d51a:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	2b00      	cmp	r3, #0
    d520:	d101      	bne.n	d526 <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d522:	2306      	movs	r3, #6
    d524:	e047      	b.n	d5b6 <am_hal_gpio_state_read+0xae>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d526:	68fb      	ldr	r3, [r7, #12]
    d528:	2b31      	cmp	r3, #49	; 0x31
    d52a:	d904      	bls.n	d536 <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	69fa      	ldr	r2, [r7, #28]
    d530:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d532:	2305      	movs	r3, #5
    d534:	e03f      	b.n	d5b6 <am_hal_gpio_state_read+0xae>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    d536:	68fb      	ldr	r3, [r7, #12]
    d538:	095b      	lsrs	r3, r3, #5
    d53a:	f003 0301 	and.w	r3, r3, #1
    d53e:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	f003 031f 	and.w	r3, r3, #31
    d546:	617b      	str	r3, [r7, #20]
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    d548:	7afb      	ldrb	r3, [r7, #11]
    d54a:	2b01      	cmp	r3, #1
    d54c:	d011      	beq.n	d572 <am_hal_gpio_state_read+0x6a>
    d54e:	2b02      	cmp	r3, #2
    d550:	d01d      	beq.n	d58e <am_hal_gpio_state_read+0x86>
    d552:	2b00      	cmp	r3, #0
    d554:	d129      	bne.n	d5aa <am_hal_gpio_state_read+0xa2>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    d556:	69bb      	ldr	r3, [r7, #24]
    d558:	009a      	lsls	r2, r3, #2
    d55a:	4b1a      	ldr	r3, [pc, #104]	; (d5c4 <am_hal_gpio_state_read+0xbc>)
    d55c:	4413      	add	r3, r2
    d55e:	681b      	ldr	r3, [r3, #0]
    d560:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d562:	69fa      	ldr	r2, [r7, #28]
    d564:	697b      	ldr	r3, [r7, #20]
    d566:	fa22 f303 	lsr.w	r3, r2, r3
    d56a:	f003 0301 	and.w	r3, r3, #1
    d56e:	61fb      	str	r3, [r7, #28]
            break;
    d570:	e01d      	b.n	d5ae <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    d572:	69bb      	ldr	r3, [r7, #24]
    d574:	009a      	lsls	r2, r3, #2
    d576:	4b14      	ldr	r3, [pc, #80]	; (d5c8 <am_hal_gpio_state_read+0xc0>)
    d578:	4413      	add	r3, r2
    d57a:	681b      	ldr	r3, [r3, #0]
    d57c:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d57e:	69fa      	ldr	r2, [r7, #28]
    d580:	697b      	ldr	r3, [r7, #20]
    d582:	fa22 f303 	lsr.w	r3, r2, r3
    d586:	f003 0301 	and.w	r3, r3, #1
    d58a:	61fb      	str	r3, [r7, #28]
            break;
    d58c:	e00f      	b.n	d5ae <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    d58e:	69bb      	ldr	r3, [r7, #24]
    d590:	009a      	lsls	r2, r3, #2
    d592:	4b0e      	ldr	r3, [pc, #56]	; (d5cc <am_hal_gpio_state_read+0xc4>)
    d594:	4413      	add	r3, r2
    d596:	681b      	ldr	r3, [r3, #0]
    d598:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d59a:	69fa      	ldr	r2, [r7, #28]
    d59c:	697b      	ldr	r3, [r7, #20]
    d59e:	fa22 f303 	lsr.w	r3, r2, r3
    d5a2:	f003 0301 	and.w	r3, r3, #1
    d5a6:	61fb      	str	r3, [r7, #28]
            break;
    d5a8:	e001      	b.n	d5ae <am_hal_gpio_state_read+0xa6>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d5aa:	2306      	movs	r3, #6
    d5ac:	e003      	b.n	d5b6 <am_hal_gpio_state_read+0xae>
    }

    *pui32ReadState = ui32ReadValue;
    d5ae:	687b      	ldr	r3, [r7, #4]
    d5b0:	69fa      	ldr	r2, [r7, #28]
    d5b2:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d5b4:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d5b6:	4618      	mov	r0, r3
    d5b8:	3724      	adds	r7, #36	; 0x24
    d5ba:	46bd      	mov	sp, r7
    d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5c0:	4770      	bx	lr
    d5c2:	bf00      	nop
    d5c4:	40010080 	.word	0x40010080
    d5c8:	40010088 	.word	0x40010088
    d5cc:	400100a0 	.word	0x400100a0

0000d5d0 <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d5d0:	b580      	push	{r7, lr}
    d5d2:	b086      	sub	sp, #24
    d5d4:	af00      	add	r7, sp, #0
    d5d6:	6078      	str	r0, [r7, #4]
    d5d8:	460b      	mov	r3, r1
    d5da:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d5dc:	2300      	movs	r3, #0
    d5de:	617b      	str	r3, [r7, #20]

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d5e0:	687b      	ldr	r3, [r7, #4]
    d5e2:	2b31      	cmp	r3, #49	; 0x31
    d5e4:	d901      	bls.n	d5ea <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d5e6:	2305      	movs	r3, #5
    d5e8:	e068      	b.n	d6bc <am_hal_gpio_state_write+0xec>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d5ea:	78fb      	ldrb	r3, [r7, #3]
    d5ec:	2b05      	cmp	r3, #5
    d5ee:	d901      	bls.n	d5f4 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d5f0:	2306      	movs	r3, #6
    d5f2:	e063      	b.n	d6bc <am_hal_gpio_state_write+0xec>
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d5f4:	687b      	ldr	r3, [r7, #4]
    d5f6:	f003 031f 	and.w	r3, r3, #31
    d5fa:	2201      	movs	r2, #1
    d5fc:	fa02 f303 	lsl.w	r3, r2, r3
    d600:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d602:	687b      	ldr	r3, [r7, #4]
    d604:	08db      	lsrs	r3, r3, #3
    d606:	f003 0304 	and.w	r3, r3, #4
    d60a:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d60c:	f001 ffb0 	bl	f570 <am_hal_interrupt_master_disable>
    d610:	4603      	mov	r3, r0
    d612:	60bb      	str	r3, [r7, #8]

    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    d614:	68fb      	ldr	r3, [r7, #12]
    d616:	089b      	lsrs	r3, r3, #2
    d618:	60fb      	str	r3, [r7, #12]
    switch ( eWriteType )
    d61a:	78fb      	ldrb	r3, [r7, #3]
    d61c:	2b05      	cmp	r3, #5
    d61e:	d845      	bhi.n	d6ac <am_hal_gpio_state_write+0xdc>
    d620:	a201      	add	r2, pc, #4	; (adr r2, d628 <am_hal_gpio_state_write+0x58>)
    d622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d626:	bf00      	nop
    d628:	0000d64f 	.word	0x0000d64f
    d62c:	0000d641 	.word	0x0000d641
    d630:	0000d65d 	.word	0x0000d65d
    d634:	0000d685 	.word	0x0000d685
    d638:	0000d677 	.word	0x0000d677
    d63c:	0000d693 	.word	0x0000d693
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    d640:	68fb      	ldr	r3, [r7, #12]
    d642:	009a      	lsls	r2, r3, #2
    d644:	4b1f      	ldr	r3, [pc, #124]	; (d6c4 <am_hal_gpio_state_write+0xf4>)
    d646:	4413      	add	r3, r2
    d648:	693a      	ldr	r2, [r7, #16]
    d64a:	601a      	str	r2, [r3, #0]
            break;
    d64c:	e031      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    d64e:	68fb      	ldr	r3, [r7, #12]
    d650:	009a      	lsls	r2, r3, #2
    d652:	4b1d      	ldr	r3, [pc, #116]	; (d6c8 <am_hal_gpio_state_write+0xf8>)
    d654:	4413      	add	r3, r2
    d656:	693a      	ldr	r2, [r7, #16]
    d658:	601a      	str	r2, [r3, #0]
            break;
    d65a:	e02a      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    d65c:	68fb      	ldr	r3, [r7, #12]
    d65e:	009a      	lsls	r2, r3, #2
    d660:	4b1a      	ldr	r3, [pc, #104]	; (d6cc <am_hal_gpio_state_write+0xfc>)
    d662:	4413      	add	r3, r2
    d664:	6819      	ldr	r1, [r3, #0]
    d666:	68fb      	ldr	r3, [r7, #12]
    d668:	009a      	lsls	r2, r3, #2
    d66a:	4b18      	ldr	r3, [pc, #96]	; (d6cc <am_hal_gpio_state_write+0xfc>)
    d66c:	4413      	add	r3, r2
    d66e:	693a      	ldr	r2, [r7, #16]
    d670:	404a      	eors	r2, r1
    d672:	601a      	str	r2, [r3, #0]
            break;
    d674:	e01d      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    d676:	68fb      	ldr	r3, [r7, #12]
    d678:	009a      	lsls	r2, r3, #2
    d67a:	4b15      	ldr	r3, [pc, #84]	; (d6d0 <am_hal_gpio_state_write+0x100>)
    d67c:	4413      	add	r3, r2
    d67e:	693a      	ldr	r2, [r7, #16]
    d680:	601a      	str	r2, [r3, #0]
            break;
    d682:	e016      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    d684:	68fb      	ldr	r3, [r7, #12]
    d686:	009a      	lsls	r2, r3, #2
    d688:	4b12      	ldr	r3, [pc, #72]	; (d6d4 <am_hal_gpio_state_write+0x104>)
    d68a:	4413      	add	r3, r2
    d68c:	693a      	ldr	r2, [r7, #16]
    d68e:	601a      	str	r2, [r3, #0]
            break;
    d690:	e00f      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    d692:	68fb      	ldr	r3, [r7, #12]
    d694:	009a      	lsls	r2, r3, #2
    d696:	4b0f      	ldr	r3, [pc, #60]	; (d6d4 <am_hal_gpio_state_write+0x104>)
    d698:	4413      	add	r3, r2
    d69a:	6819      	ldr	r1, [r3, #0]
    d69c:	68fb      	ldr	r3, [r7, #12]
    d69e:	009a      	lsls	r2, r3, #2
    d6a0:	4b0c      	ldr	r3, [pc, #48]	; (d6d4 <am_hal_gpio_state_write+0x104>)
    d6a2:	4413      	add	r3, r2
    d6a4:	693a      	ldr	r2, [r7, #16]
    d6a6:	404a      	eors	r2, r1
    d6a8:	601a      	str	r2, [r3, #0]
            break;
    d6aa:	e002      	b.n	d6b2 <am_hal_gpio_state_write+0xe2>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d6ac:	2306      	movs	r3, #6
    d6ae:	617b      	str	r3, [r7, #20]
            break;
    d6b0:	bf00      	nop
    }

    AM_CRITICAL_END;
    d6b2:	68bb      	ldr	r3, [r7, #8]
    d6b4:	4618      	mov	r0, r3
    d6b6:	f001 ff5f 	bl	f578 <am_hal_interrupt_master_set>

    return ui32Return;
    d6ba:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d6bc:	4618      	mov	r0, r3
    d6be:	3718      	adds	r7, #24
    d6c0:	46bd      	mov	sp, r7
    d6c2:	bd80      	pop	{r7, pc}
    d6c4:	40010090 	.word	0x40010090
    d6c8:	40010098 	.word	0x40010098
    d6cc:	40010088 	.word	0x40010088
    d6d0:	400100a8 	.word	0x400100a8
    d6d4:	400100b4 	.word	0x400100b4

0000d6d8 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d6d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d6dc:	b084      	sub	sp, #16
    d6de:	af00      	add	r7, sp, #0
    d6e0:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d6e4:	e9d7 3400 	ldrd	r3, r4, [r7]
    d6e8:	f04f 0100 	mov.w	r1, #0
    d6ec:	4a17      	ldr	r2, [pc, #92]	; (d74c <am_hal_gpio_interrupt_enable+0x74>)
    d6ee:	ea03 0b01 	and.w	fp, r3, r1
    d6f2:	ea04 0c02 	and.w	ip, r4, r2
    d6f6:	ea5b 030c 	orrs.w	r3, fp, ip
    d6fa:	d001      	beq.n	d700 <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d6fc:	2305      	movs	r3, #5
    d6fe:	e01f      	b.n	d740 <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d700:	f001 ff36 	bl	f570 <am_hal_interrupt_master_disable>
    d704:	4603      	mov	r3, r0
    d706:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d708:	4b11      	ldr	r3, [pc, #68]	; (d750 <am_hal_gpio_interrupt_enable+0x78>)
    d70a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d70e:	683b      	ldr	r3, [r7, #0]
    d710:	490f      	ldr	r1, [pc, #60]	; (d750 <am_hal_gpio_interrupt_enable+0x78>)
    d712:	4313      	orrs	r3, r2
    d714:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d718:	4b0d      	ldr	r3, [pc, #52]	; (d750 <am_hal_gpio_interrupt_enable+0x78>)
    d71a:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d71e:	e9d7 1200 	ldrd	r1, r2, [r7]
    d722:	f04f 0300 	mov.w	r3, #0
    d726:	f04f 0400 	mov.w	r4, #0
    d72a:	0013      	movs	r3, r2
    d72c:	2400      	movs	r4, #0
    d72e:	4a08      	ldr	r2, [pc, #32]	; (d750 <am_hal_gpio_interrupt_enable+0x78>)
    d730:	4303      	orrs	r3, r0
    d732:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d736:	68fb      	ldr	r3, [r7, #12]
    d738:	4618      	mov	r0, r3
    d73a:	f001 ff1d 	bl	f578 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d73e:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d740:	4618      	mov	r0, r3
    d742:	3710      	adds	r7, #16
    d744:	46bd      	mov	sp, r7
    d746:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d74a:	bf00      	nop
    d74c:	fffc0000 	.word	0xfffc0000
    d750:	40010000 	.word	0x40010000

0000d754 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d754:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d758:	b084      	sub	sp, #16
    d75a:	af00      	add	r7, sp, #0
    d75c:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d760:	e9d7 3400 	ldrd	r3, r4, [r7]
    d764:	f04f 0100 	mov.w	r1, #0
    d768:	4a13      	ldr	r2, [pc, #76]	; (d7b8 <am_hal_gpio_interrupt_clear+0x64>)
    d76a:	ea03 0b01 	and.w	fp, r3, r1
    d76e:	ea04 0c02 	and.w	ip, r4, r2
    d772:	ea5b 030c 	orrs.w	r3, fp, ip
    d776:	d001      	beq.n	d77c <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d778:	2305      	movs	r3, #5
    d77a:	e017      	b.n	d7ac <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d77c:	f001 fef8 	bl	f570 <am_hal_interrupt_master_disable>
    d780:	4603      	mov	r3, r0
    d782:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d784:	4a0d      	ldr	r2, [pc, #52]	; (d7bc <am_hal_gpio_interrupt_clear+0x68>)
    d786:	683b      	ldr	r3, [r7, #0]
    d788:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d78c:	e9d7 1200 	ldrd	r1, r2, [r7]
    d790:	f04f 0300 	mov.w	r3, #0
    d794:	f04f 0400 	mov.w	r4, #0
    d798:	0013      	movs	r3, r2
    d79a:	2400      	movs	r4, #0
    d79c:	4a07      	ldr	r2, [pc, #28]	; (d7bc <am_hal_gpio_interrupt_clear+0x68>)
    d79e:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d7a2:	68fb      	ldr	r3, [r7, #12]
    d7a4:	4618      	mov	r0, r3
    d7a6:	f001 fee7 	bl	f578 <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d7aa:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d7ac:	4618      	mov	r0, r3
    d7ae:	3710      	adds	r7, #16
    d7b0:	46bd      	mov	sp, r7
    d7b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d7b6:	bf00      	nop
    d7b8:	fffc0000 	.word	0xfffc0000
    d7bc:	40010000 	.word	0x40010000

0000d7c0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d7c0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d7c2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d7c6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d7c8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d7cc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d7d0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d7d4:	f000 f80a 	bl	d7ec <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d7d8:	bd01      	pop	{r0, pc}
}
    d7da:	bf00      	nop
    d7dc:	4618      	mov	r0, r3

0000d7de <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d7de:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d7e0:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d7e2:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d7e4:	4770      	bx	lr
}
    d7e6:	bf00      	nop
    d7e8:	4618      	mov	r0, r3
	...

0000d7ec <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d7ec:	b580      	push	{r7, lr}
    d7ee:	b096      	sub	sp, #88	; 0x58
    d7f0:	af00      	add	r7, sp, #0
    d7f2:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d7f4:	f107 030c 	add.w	r3, r7, #12
    d7f8:	2200      	movs	r2, #0
    d7fa:	601a      	str	r2, [r3, #0]
    d7fc:	605a      	str	r2, [r3, #4]
    d7fe:	609a      	str	r2, [r3, #8]
    d800:	60da      	str	r2, [r3, #12]
    d802:	611a      	str	r2, [r3, #16]
    d804:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d806:	2300      	movs	r3, #0
    d808:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d80c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d80e:	4b2e      	ldr	r3, [pc, #184]	; (d8c8 <am_util_faultisr_collect_data+0xdc>)
    d810:	681b      	ldr	r3, [r3, #0]
    d812:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d816:	b2db      	uxtb	r3, r3
    d818:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d81e:	0a1b      	lsrs	r3, r3, #8
    d820:	b2db      	uxtb	r3, r3
    d822:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d828:	0c1b      	lsrs	r3, r3, #16
    d82a:	b29b      	uxth	r3, r3
    d82c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d830:	4b26      	ldr	r3, [pc, #152]	; (d8cc <am_util_faultisr_collect_data+0xe0>)
    d832:	681b      	ldr	r3, [r3, #0]
    d834:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d836:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d83a:	b2db      	uxtb	r3, r3
    d83c:	f003 0302 	and.w	r3, r3, #2
    d840:	2b00      	cmp	r3, #0
    d842:	d005      	beq.n	d850 <am_util_faultisr_collect_data+0x64>
    d844:	6879      	ldr	r1, [r7, #4]
    d846:	2006      	movs	r0, #6
    d848:	f7ff ffc9 	bl	d7de <getStackedReg>
    d84c:	4603      	mov	r3, r0
    d84e:	e001      	b.n	d854 <am_util_faultisr_collect_data+0x68>
    d850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d854:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d856:	6879      	ldr	r1, [r7, #4]
    d858:	2000      	movs	r0, #0
    d85a:	f7ff ffc0 	bl	d7de <getStackedReg>
    d85e:	4603      	mov	r3, r0
    d860:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d862:	6879      	ldr	r1, [r7, #4]
    d864:	2001      	movs	r0, #1
    d866:	f7ff ffba 	bl	d7de <getStackedReg>
    d86a:	4603      	mov	r3, r0
    d86c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d86e:	6879      	ldr	r1, [r7, #4]
    d870:	2002      	movs	r0, #2
    d872:	f7ff ffb4 	bl	d7de <getStackedReg>
    d876:	4603      	mov	r3, r0
    d878:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d87a:	6879      	ldr	r1, [r7, #4]
    d87c:	2003      	movs	r0, #3
    d87e:	f7ff ffae 	bl	d7de <getStackedReg>
    d882:	4603      	mov	r3, r0
    d884:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d886:	6879      	ldr	r1, [r7, #4]
    d888:	2004      	movs	r0, #4
    d88a:	f7ff ffa8 	bl	d7de <getStackedReg>
    d88e:	4603      	mov	r3, r0
    d890:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d892:	6879      	ldr	r1, [r7, #4]
    d894:	2005      	movs	r0, #5
    d896:	f7ff ffa2 	bl	d7de <getStackedReg>
    d89a:	4603      	mov	r3, r0
    d89c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d89e:	6879      	ldr	r1, [r7, #4]
    d8a0:	2006      	movs	r0, #6
    d8a2:	f7ff ff9c 	bl	d7de <getStackedReg>
    d8a6:	4603      	mov	r3, r0
    d8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d8aa:	6879      	ldr	r1, [r7, #4]
    d8ac:	2007      	movs	r0, #7
    d8ae:	f7ff ff96 	bl	d7de <getStackedReg>
    d8b2:	4603      	mov	r3, r0
    d8b4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d8b6:	f107 030c 	add.w	r3, r7, #12
    d8ba:	4619      	mov	r1, r3
    d8bc:	2002      	movs	r0, #2
    d8be:	f001 feb5 	bl	f62c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d8c2:	2300      	movs	r3, #0
    d8c4:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d8c6:	e7fe      	b.n	d8c6 <am_util_faultisr_collect_data+0xda>
    d8c8:	e000ed28 	.word	0xe000ed28
    d8cc:	e000ed38 	.word	0xe000ed38

0000d8d0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d8d0:	b480      	push	{r7}
    d8d2:	b083      	sub	sp, #12
    d8d4:	af00      	add	r7, sp, #0
    d8d6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d8d8:	4a04      	ldr	r2, [pc, #16]	; (d8ec <am_util_stdio_printf_init+0x1c>)
    d8da:	687b      	ldr	r3, [r7, #4]
    d8dc:	6013      	str	r3, [r2, #0]
}
    d8de:	bf00      	nop
    d8e0:	370c      	adds	r7, #12
    d8e2:	46bd      	mov	sp, r7
    d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop
    d8ec:	1000c5a8 	.word	0x1000c5a8

0000d8f0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d8f0:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d8f4:	b08b      	sub	sp, #44	; 0x2c
    d8f6:	af00      	add	r7, sp, #0
    d8f8:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d8fc:	e9d7 1200 	ldrd	r1, r2, [r7]
    d900:	f04f 0300 	mov.w	r3, #0
    d904:	f04f 0400 	mov.w	r4, #0
    d908:	0013      	movs	r3, r2
    d90a:	2400      	movs	r4, #0
    d90c:	4323      	orrs	r3, r4
    d90e:	f000 809d 	beq.w	da4c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d912:	e9d7 3400 	ldrd	r3, r4, [r7]
    d916:	0866      	lsrs	r6, r4, #1
    d918:	ea4f 0533 	mov.w	r5, r3, rrx
    d91c:	e9d7 1200 	ldrd	r1, r2, [r7]
    d920:	f04f 0b00 	mov.w	fp, #0
    d924:	f04f 0c00 	mov.w	ip, #0
    d928:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d92c:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d930:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d934:	eb1b 0305 	adds.w	r3, fp, r5
    d938:	eb4c 0406 	adc.w	r4, ip, r6
    d93c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d940:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d944:	f04f 0500 	mov.w	r5, #0
    d948:	f04f 0600 	mov.w	r6, #0
    d94c:	090d      	lsrs	r5, r1, #4
    d94e:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d952:	0916      	lsrs	r6, r2, #4
    d954:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d958:	186b      	adds	r3, r5, r1
    d95a:	eb46 0402 	adc.w	r4, r6, r2
    d95e:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d966:	f04f 0500 	mov.w	r5, #0
    d96a:	f04f 0600 	mov.w	r6, #0
    d96e:	0a0d      	lsrs	r5, r1, #8
    d970:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d974:	0a16      	lsrs	r6, r2, #8
    d976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d97a:	186b      	adds	r3, r5, r1
    d97c:	eb46 0402 	adc.w	r4, r6, r2
    d980:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d984:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d988:	f04f 0500 	mov.w	r5, #0
    d98c:	f04f 0600 	mov.w	r6, #0
    d990:	0c0d      	lsrs	r5, r1, #16
    d992:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d996:	0c16      	lsrs	r6, r2, #16
    d998:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d99c:	186b      	adds	r3, r5, r1
    d99e:	eb46 0402 	adc.w	r4, r6, r2
    d9a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d9a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d9aa:	f04f 0500 	mov.w	r5, #0
    d9ae:	f04f 0600 	mov.w	r6, #0
    d9b2:	0015      	movs	r5, r2
    d9b4:	2600      	movs	r6, #0
    d9b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d9ba:	186b      	adds	r3, r5, r1
    d9bc:	eb46 0402 	adc.w	r4, r6, r2
    d9c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d9c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d9c8:	f04f 0300 	mov.w	r3, #0
    d9cc:	f04f 0400 	mov.w	r4, #0
    d9d0:	08cb      	lsrs	r3, r1, #3
    d9d2:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d9d6:	08d4      	lsrs	r4, r2, #3
    d9d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d9dc:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d9e0:	46ab      	mov	fp, r5
    d9e2:	46b4      	mov	ip, r6
    d9e4:	f04f 0100 	mov.w	r1, #0
    d9e8:	f04f 0200 	mov.w	r2, #0
    d9ec:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d9f0:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d9f4:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d9f8:	468b      	mov	fp, r1
    d9fa:	4694      	mov	ip, r2
    d9fc:	eb1b 0b05 	adds.w	fp, fp, r5
    da00:	eb4c 0c06 	adc.w	ip, ip, r6
    da04:	eb1b 030b 	adds.w	r3, fp, fp
    da08:	eb4c 040c 	adc.w	r4, ip, ip
    da0c:	469b      	mov	fp, r3
    da0e:	46a4      	mov	ip, r4
    da10:	4659      	mov	r1, fp
    da12:	4662      	mov	r2, ip
    da14:	e9d7 3400 	ldrd	r3, r4, [r7]
    da18:	1a5b      	subs	r3, r3, r1
    da1a:	eb64 0402 	sbc.w	r4, r4, r2
    da1e:	461d      	mov	r5, r3
    da20:	4626      	mov	r6, r4
    da22:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    da26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    da2a:	1d99      	adds	r1, r3, #6
    da2c:	f144 0200 	adc.w	r2, r4, #0
    da30:	f04f 0500 	mov.w	r5, #0
    da34:	f04f 0600 	mov.w	r6, #0
    da38:	090d      	lsrs	r5, r1, #4
    da3a:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    da3e:	0916      	lsrs	r6, r2, #4
    da40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    da44:	186b      	adds	r3, r5, r1
    da46:	eb46 0402 	adc.w	r4, r6, r2
    da4a:	e029      	b.n	daa0 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    da4c:	683b      	ldr	r3, [r7, #0]
    da4e:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da52:	085a      	lsrs	r2, r3, #1
    da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da56:	089b      	lsrs	r3, r3, #2
    da58:	4413      	add	r3, r2
    da5a:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    da5c:	6a3b      	ldr	r3, [r7, #32]
    da5e:	091b      	lsrs	r3, r3, #4
    da60:	6a3a      	ldr	r2, [r7, #32]
    da62:	4413      	add	r3, r2
    da64:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    da66:	6a3b      	ldr	r3, [r7, #32]
    da68:	0a1b      	lsrs	r3, r3, #8
    da6a:	6a3a      	ldr	r2, [r7, #32]
    da6c:	4413      	add	r3, r2
    da6e:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    da70:	6a3b      	ldr	r3, [r7, #32]
    da72:	0c1b      	lsrs	r3, r3, #16
    da74:	6a3a      	ldr	r2, [r7, #32]
    da76:	4413      	add	r3, r2
    da78:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    da7a:	6a3b      	ldr	r3, [r7, #32]
    da7c:	08db      	lsrs	r3, r3, #3
    da7e:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    da80:	6a3a      	ldr	r2, [r7, #32]
    da82:	4613      	mov	r3, r2
    da84:	009b      	lsls	r3, r3, #2
    da86:	4413      	add	r3, r2
    da88:	005b      	lsls	r3, r3, #1
    da8a:	461a      	mov	r2, r3
    da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da8e:	1a9b      	subs	r3, r3, r2
    da90:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    da92:	69fb      	ldr	r3, [r7, #28]
    da94:	3306      	adds	r3, #6
    da96:	091a      	lsrs	r2, r3, #4
    da98:	6a3b      	ldr	r3, [r7, #32]
    da9a:	4413      	add	r3, r2
    da9c:	f04f 0400 	mov.w	r4, #0
    }
}
    daa0:	4618      	mov	r0, r3
    daa2:	4621      	mov	r1, r4
    daa4:	372c      	adds	r7, #44	; 0x2c
    daa6:	46bd      	mov	sp, r7
    daa8:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    daac:	4770      	bx	lr

0000daae <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    daae:	b590      	push	{r4, r7, lr}
    dab0:	b085      	sub	sp, #20
    dab2:	af00      	add	r7, sp, #0
    dab4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    dab8:	683a      	ldr	r2, [r7, #0]
    daba:	687b      	ldr	r3, [r7, #4]
    dabc:	4313      	orrs	r3, r2
    dabe:	2b00      	cmp	r3, #0
    dac0:	bf0c      	ite	eq
    dac2:	2301      	moveq	r3, #1
    dac4:	2300      	movne	r3, #0
    dac6:	b2db      	uxtb	r3, r3
    dac8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    daca:	e008      	b.n	dade <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    dacc:	e9d7 0100 	ldrd	r0, r1, [r7]
    dad0:	f7ff ff0e 	bl	d8f0 <divu64_10>
    dad4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    dad8:	68fb      	ldr	r3, [r7, #12]
    dada:	3301      	adds	r3, #1
    dadc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    dade:	e9d7 3400 	ldrd	r3, r4, [r7]
    dae2:	4323      	orrs	r3, r4
    dae4:	d1f2      	bne.n	dacc <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    dae6:	68fb      	ldr	r3, [r7, #12]
}
    dae8:	4618      	mov	r0, r3
    daea:	3714      	adds	r7, #20
    daec:	46bd      	mov	sp, r7
    daee:	bd90      	pop	{r4, r7, pc}

0000daf0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    daf0:	b590      	push	{r4, r7, lr}
    daf2:	b083      	sub	sp, #12
    daf4:	af00      	add	r7, sp, #0
    daf6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    dafa:	e9d7 3400 	ldrd	r3, r4, [r7]
    dafe:	2b00      	cmp	r3, #0
    db00:	f174 0300 	sbcs.w	r3, r4, #0
    db04:	da06      	bge.n	db14 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    db06:	e9d7 3400 	ldrd	r3, r4, [r7]
    db0a:	425b      	negs	r3, r3
    db0c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    db10:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    db14:	e9d7 3400 	ldrd	r3, r4, [r7]
    db18:	4618      	mov	r0, r3
    db1a:	4621      	mov	r1, r4
    db1c:	f7ff ffc7 	bl	daae <ndigits_in_u64>
    db20:	4603      	mov	r3, r0
}
    db22:	4618      	mov	r0, r3
    db24:	370c      	adds	r7, #12
    db26:	46bd      	mov	sp, r7
    db28:	bd90      	pop	{r4, r7, pc}

0000db2a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    db2a:	b490      	push	{r4, r7}
    db2c:	b084      	sub	sp, #16
    db2e:	af00      	add	r7, sp, #0
    db30:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    db34:	683a      	ldr	r2, [r7, #0]
    db36:	687b      	ldr	r3, [r7, #4]
    db38:	4313      	orrs	r3, r2
    db3a:	2b00      	cmp	r3, #0
    db3c:	bf0c      	ite	eq
    db3e:	2301      	moveq	r3, #1
    db40:	2300      	movne	r3, #0
    db42:	b2db      	uxtb	r3, r3
    db44:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    db46:	e00e      	b.n	db66 <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    db48:	e9d7 1200 	ldrd	r1, r2, [r7]
    db4c:	f04f 0300 	mov.w	r3, #0
    db50:	f04f 0400 	mov.w	r4, #0
    db54:	090b      	lsrs	r3, r1, #4
    db56:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    db5a:	0914      	lsrs	r4, r2, #4
    db5c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    db60:	68fb      	ldr	r3, [r7, #12]
    db62:	3301      	adds	r3, #1
    db64:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    db66:	e9d7 3400 	ldrd	r3, r4, [r7]
    db6a:	4323      	orrs	r3, r4
    db6c:	d1ec      	bne.n	db48 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    db6e:	68fb      	ldr	r3, [r7, #12]
}
    db70:	4618      	mov	r0, r3
    db72:	3710      	adds	r7, #16
    db74:	46bd      	mov	sp, r7
    db76:	bc90      	pop	{r4, r7}
    db78:	4770      	bx	lr

0000db7a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    db7a:	b480      	push	{r7}
    db7c:	b087      	sub	sp, #28
    db7e:	af00      	add	r7, sp, #0
    db80:	6078      	str	r0, [r7, #4]
    db82:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    db84:	2300      	movs	r3, #0
    db86:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    db88:	2300      	movs	r3, #0
    db8a:	613b      	str	r3, [r7, #16]
    db8c:	2300      	movs	r3, #0
    db8e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    db90:	687b      	ldr	r3, [r7, #4]
    db92:	781b      	ldrb	r3, [r3, #0]
    db94:	2b2d      	cmp	r3, #45	; 0x2d
    db96:	d11b      	bne.n	dbd0 <decstr_to_int+0x56>
    {
        bNeg = true;
    db98:	2301      	movs	r3, #1
    db9a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	3301      	adds	r3, #1
    dba0:	607b      	str	r3, [r7, #4]
        uCnt++;
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	3301      	adds	r3, #1
    dba6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dba8:	e012      	b.n	dbd0 <decstr_to_int+0x56>
    {
        ++uCnt;
    dbaa:	68fb      	ldr	r3, [r7, #12]
    dbac:	3301      	adds	r3, #1
    dbae:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    dbb0:	693a      	ldr	r2, [r7, #16]
    dbb2:	4613      	mov	r3, r2
    dbb4:	009b      	lsls	r3, r3, #2
    dbb6:	4413      	add	r3, r2
    dbb8:	005b      	lsls	r3, r3, #1
    dbba:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    dbbc:	687b      	ldr	r3, [r7, #4]
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	461a      	mov	r2, r3
    dbc2:	693b      	ldr	r3, [r7, #16]
    dbc4:	4413      	add	r3, r2
    dbc6:	3b30      	subs	r3, #48	; 0x30
    dbc8:	613b      	str	r3, [r7, #16]
        pcStr++;
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	3301      	adds	r3, #1
    dbce:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	781b      	ldrb	r3, [r3, #0]
    dbd4:	2b2f      	cmp	r3, #47	; 0x2f
    dbd6:	d903      	bls.n	dbe0 <decstr_to_int+0x66>
    dbd8:	687b      	ldr	r3, [r7, #4]
    dbda:	781b      	ldrb	r3, [r3, #0]
    dbdc:	2b39      	cmp	r3, #57	; 0x39
    dbde:	d9e4      	bls.n	dbaa <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    dbe0:	683b      	ldr	r3, [r7, #0]
    dbe2:	2b00      	cmp	r3, #0
    dbe4:	d002      	beq.n	dbec <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    dbe6:	683b      	ldr	r3, [r7, #0]
    dbe8:	68fa      	ldr	r2, [r7, #12]
    dbea:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    dbec:	7dfb      	ldrb	r3, [r7, #23]
    dbee:	2b00      	cmp	r3, #0
    dbf0:	d002      	beq.n	dbf8 <decstr_to_int+0x7e>
    dbf2:	693b      	ldr	r3, [r7, #16]
    dbf4:	425b      	negs	r3, r3
    dbf6:	e000      	b.n	dbfa <decstr_to_int+0x80>
    dbf8:	693b      	ldr	r3, [r7, #16]
}
    dbfa:	4618      	mov	r0, r3
    dbfc:	371c      	adds	r7, #28
    dbfe:	46bd      	mov	sp, r7
    dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc04:	4770      	bx	lr

0000dc06 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    dc06:	b590      	push	{r4, r7, lr}
    dc08:	b091      	sub	sp, #68	; 0x44
    dc0a:	af00      	add	r7, sp, #0
    dc0c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    dc10:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    dc12:	2300      	movs	r3, #0
    dc14:	63fb      	str	r3, [r7, #60]	; 0x3c
    dc16:	2300      	movs	r3, #0
    dc18:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    dc1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    dc1e:	f7ff fe67 	bl	d8f0 <divu64_10>
    dc22:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    dc26:	68b9      	ldr	r1, [r7, #8]
    dc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dc2a:	4613      	mov	r3, r2
    dc2c:	009b      	lsls	r3, r3, #2
    dc2e:	4413      	add	r3, r2
    dc30:	005b      	lsls	r3, r3, #1
    dc32:	1acb      	subs	r3, r1, r3
    dc34:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc38:	b2da      	uxtb	r2, r3
    dc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc3c:	1c59      	adds	r1, r3, #1
    dc3e:	63f9      	str	r1, [r7, #60]	; 0x3c
    dc40:	3230      	adds	r2, #48	; 0x30
    dc42:	b2d2      	uxtb	r2, r2
    dc44:	f107 0140 	add.w	r1, r7, #64	; 0x40
    dc48:	440b      	add	r3, r1
    dc4a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    dc4e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    dc52:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    dc56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    dc5a:	4323      	orrs	r3, r4
    dc5c:	d1dd      	bne.n	dc1a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    dc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc60:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	2b00      	cmp	r3, #0
    dc66:	d011      	beq.n	dc8c <uint64_to_str+0x86>
    {
        while ( ix-- )
    dc68:	e008      	b.n	dc7c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    dc6a:	687b      	ldr	r3, [r7, #4]
    dc6c:	1c5a      	adds	r2, r3, #1
    dc6e:	607a      	str	r2, [r7, #4]
    dc70:	f107 0110 	add.w	r1, r7, #16
    dc74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dc76:	440a      	add	r2, r1
    dc78:	7812      	ldrb	r2, [r2, #0]
    dc7a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    dc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc7e:	1e5a      	subs	r2, r3, #1
    dc80:	63fa      	str	r2, [r7, #60]	; 0x3c
    dc82:	2b00      	cmp	r3, #0
    dc84:	d1f1      	bne.n	dc6a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	2200      	movs	r2, #0
    dc8a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    dc8e:	4618      	mov	r0, r3
    dc90:	3744      	adds	r7, #68	; 0x44
    dc92:	46bd      	mov	sp, r7
    dc94:	bd90      	pop	{r4, r7, pc}

0000dc96 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    dc96:	b490      	push	{r4, r7}
    dc98:	b08c      	sub	sp, #48	; 0x30
    dc9a:	af00      	add	r7, sp, #0
    dc9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    dca0:	607a      	str	r2, [r7, #4]
    dca2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    dca4:	2300      	movs	r3, #0
    dca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    dca8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    dcac:	4323      	orrs	r3, r4
    dcae:	d135      	bne.n	dd1c <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dcb2:	1c5a      	adds	r2, r3, #1
    dcb4:	62fa      	str	r2, [r7, #44]	; 0x2c
    dcb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    dcba:	4413      	add	r3, r2
    dcbc:	2230      	movs	r2, #48	; 0x30
    dcbe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    dcc2:	e02b      	b.n	dd1c <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    dcc4:	7a3b      	ldrb	r3, [r7, #8]
    dcc6:	f003 030f 	and.w	r3, r3, #15
    dcca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    dcce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    dcd2:	2b09      	cmp	r3, #9
    dcd4:	d90a      	bls.n	dcec <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    dcd6:	78fb      	ldrb	r3, [r7, #3]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d001      	beq.n	dce0 <uint64_to_hexstr+0x4a>
    dcdc:	2227      	movs	r2, #39	; 0x27
    dcde:	e000      	b.n	dce2 <uint64_to_hexstr+0x4c>
    dce0:	2207      	movs	r2, #7
    dce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    dce6:	4413      	add	r3, r2
    dce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dcee:	1c5a      	adds	r2, r3, #1
    dcf0:	62fa      	str	r2, [r7, #44]	; 0x2c
    dcf2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    dcf6:	3230      	adds	r2, #48	; 0x30
    dcf8:	b2d2      	uxtb	r2, r2
    dcfa:	f107 0130 	add.w	r1, r7, #48	; 0x30
    dcfe:	440b      	add	r3, r1
    dd00:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    dd04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    dd08:	f04f 0300 	mov.w	r3, #0
    dd0c:	f04f 0400 	mov.w	r4, #0
    dd10:	090b      	lsrs	r3, r1, #4
    dd12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    dd16:	0914      	lsrs	r4, r2, #4
    dd18:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    dd1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    dd20:	4323      	orrs	r3, r4
    dd22:	d1cf      	bne.n	dcc4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd26:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    dd28:	687b      	ldr	r3, [r7, #4]
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d011      	beq.n	dd52 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    dd2e:	e008      	b.n	dd42 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    dd30:	687b      	ldr	r3, [r7, #4]
    dd32:	1c5a      	adds	r2, r3, #1
    dd34:	607a      	str	r2, [r7, #4]
    dd36:	f107 0110 	add.w	r1, r7, #16
    dd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dd3c:	440a      	add	r2, r1
    dd3e:	7812      	ldrb	r2, [r2, #0]
    dd40:	701a      	strb	r2, [r3, #0]
        while (ix--)
    dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd44:	1e5a      	subs	r2, r3, #1
    dd46:	62fa      	str	r2, [r7, #44]	; 0x2c
    dd48:	2b00      	cmp	r3, #0
    dd4a:	d1f1      	bne.n	dd30 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    dd4c:	687b      	ldr	r3, [r7, #4]
    dd4e:	2200      	movs	r2, #0
    dd50:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    dd54:	4618      	mov	r0, r3
    dd56:	3730      	adds	r7, #48	; 0x30
    dd58:	46bd      	mov	sp, r7
    dd5a:	bc90      	pop	{r4, r7}
    dd5c:	4770      	bx	lr

0000dd5e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    dd5e:	b480      	push	{r7}
    dd60:	b085      	sub	sp, #20
    dd62:	af00      	add	r7, sp, #0
    dd64:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    dd66:	2300      	movs	r3, #0
    dd68:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    dd6a:	687b      	ldr	r3, [r7, #4]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d104      	bne.n	dd7a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    dd70:	68fb      	ldr	r3, [r7, #12]
    dd72:	e009      	b.n	dd88 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    dd74:	68fb      	ldr	r3, [r7, #12]
    dd76:	3301      	adds	r3, #1
    dd78:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	1c5a      	adds	r2, r3, #1
    dd7e:	607a      	str	r2, [r7, #4]
    dd80:	781b      	ldrb	r3, [r3, #0]
    dd82:	2b00      	cmp	r3, #0
    dd84:	d1f6      	bne.n	dd74 <simple_strlen+0x16>
    }
    return ui32RetVal;
    dd86:	68fb      	ldr	r3, [r7, #12]
}
    dd88:	4618      	mov	r0, r3
    dd8a:	3714      	adds	r7, #20
    dd8c:	46bd      	mov	sp, r7
    dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd92:	4770      	bx	lr

0000dd94 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    dd94:	b480      	push	{r7}
    dd96:	b087      	sub	sp, #28
    dd98:	af00      	add	r7, sp, #0
    dd9a:	60f8      	str	r0, [r7, #12]
    dd9c:	460b      	mov	r3, r1
    dd9e:	607a      	str	r2, [r7, #4]
    dda0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    dda2:	2300      	movs	r3, #0
    dda4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	2b00      	cmp	r3, #0
    ddaa:	dc0c      	bgt.n	ddc6 <padbuffer+0x32>
    {
        return i32Cnt;
    ddac:	697b      	ldr	r3, [r7, #20]
    ddae:	e010      	b.n	ddd2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ddb0:	68fb      	ldr	r3, [r7, #12]
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d004      	beq.n	ddc0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ddb6:	68fb      	ldr	r3, [r7, #12]
    ddb8:	1c5a      	adds	r2, r3, #1
    ddba:	60fa      	str	r2, [r7, #12]
    ddbc:	7afa      	ldrb	r2, [r7, #11]
    ddbe:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ddc0:	697b      	ldr	r3, [r7, #20]
    ddc2:	3301      	adds	r3, #1
    ddc4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    ddc6:	687b      	ldr	r3, [r7, #4]
    ddc8:	1e5a      	subs	r2, r3, #1
    ddca:	607a      	str	r2, [r7, #4]
    ddcc:	2b00      	cmp	r3, #0
    ddce:	d1ef      	bne.n	ddb0 <padbuffer+0x1c>
    }

    return i32Cnt;
    ddd0:	697b      	ldr	r3, [r7, #20]
}
    ddd2:	4618      	mov	r0, r3
    ddd4:	371c      	adds	r7, #28
    ddd6:	46bd      	mov	sp, r7
    ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dddc:	4770      	bx	lr
	...

0000dde0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    dde0:	b590      	push	{r4, r7, lr}
    dde2:	b08f      	sub	sp, #60	; 0x3c
    dde4:	af00      	add	r7, sp, #0
    dde6:	ed87 0a03 	vstr	s0, [r7, #12]
    ddea:	60b8      	str	r0, [r7, #8]
    ddec:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ddee:	68bb      	ldr	r3, [r7, #8]
    ddf0:	681b      	ldr	r3, [r3, #0]
    ddf2:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ddf6:	2b03      	cmp	r3, #3
    ddf8:	dc02      	bgt.n	de00 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    ddfa:	f06f 0302 	mvn.w	r3, #2
    ddfe:	e0e7      	b.n	dfd0 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    de00:	edd7 7a03 	vldr	s15, [r7, #12]
    de04:	eef5 7a40 	vcmp.f32	s15, #0.0
    de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de0c:	d104      	bne.n	de18 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    de0e:	68bb      	ldr	r3, [r7, #8]
    de10:	4a71      	ldr	r2, [pc, #452]	; (dfd8 <ftoa+0x1f8>)
    de12:	601a      	str	r2, [r3, #0]
        return 3;
    de14:	2303      	movs	r3, #3
    de16:	e0db      	b.n	dfd0 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    de18:	68bb      	ldr	r3, [r7, #8]
    de1a:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    de20:	693b      	ldr	r3, [r7, #16]
    de22:	15db      	asrs	r3, r3, #23
    de24:	b2db      	uxtb	r3, r3
    de26:	3b7f      	subs	r3, #127	; 0x7f
    de28:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    de2a:	693b      	ldr	r3, [r7, #16]
    de2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
    de30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    de34:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    de36:	2300      	movs	r3, #0
    de38:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    de3a:	2300      	movs	r3, #0
    de3c:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    de3e:	69fb      	ldr	r3, [r7, #28]
    de40:	2b1e      	cmp	r3, #30
    de42:	dd02      	ble.n	de4a <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    de44:	f06f 0301 	mvn.w	r3, #1
    de48:	e0c2      	b.n	dfd0 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    de4a:	69fb      	ldr	r3, [r7, #28]
    de4c:	f113 0f17 	cmn.w	r3, #23
    de50:	da02      	bge.n	de58 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    de52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de56:	e0bb      	b.n	dfd0 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    de58:	69fb      	ldr	r3, [r7, #28]
    de5a:	2b16      	cmp	r3, #22
    de5c:	dd06      	ble.n	de6c <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    de5e:	69fb      	ldr	r3, [r7, #28]
    de60:	3b17      	subs	r3, #23
    de62:	69ba      	ldr	r2, [r7, #24]
    de64:	fa02 f303 	lsl.w	r3, r2, r3
    de68:	637b      	str	r3, [r7, #52]	; 0x34
    de6a:	e01a      	b.n	dea2 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    de6c:	69fb      	ldr	r3, [r7, #28]
    de6e:	2b00      	cmp	r3, #0
    de70:	db0f      	blt.n	de92 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    de72:	69fb      	ldr	r3, [r7, #28]
    de74:	f1c3 0317 	rsb	r3, r3, #23
    de78:	69ba      	ldr	r2, [r7, #24]
    de7a:	fa42 f303 	asr.w	r3, r2, r3
    de7e:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    de80:	69fb      	ldr	r3, [r7, #28]
    de82:	3301      	adds	r3, #1
    de84:	69ba      	ldr	r2, [r7, #24]
    de86:	fa02 f303 	lsl.w	r3, r2, r3
    de8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    de8e:	633b      	str	r3, [r7, #48]	; 0x30
    de90:	e007      	b.n	dea2 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    de92:	69bb      	ldr	r3, [r7, #24]
    de94:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    de98:	69fb      	ldr	r3, [r7, #28]
    de9a:	43db      	mvns	r3, r3
    de9c:	fa42 f303 	asr.w	r3, r2, r3
    dea0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    dea2:	693b      	ldr	r3, [r7, #16]
    dea4:	2b00      	cmp	r3, #0
    dea6:	da04      	bge.n	deb2 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    dea8:	68bb      	ldr	r3, [r7, #8]
    deaa:	1c5a      	adds	r2, r3, #1
    deac:	60ba      	str	r2, [r7, #8]
    deae:	222d      	movs	r2, #45	; 0x2d
    deb0:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    deb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    deb4:	2b00      	cmp	r3, #0
    deb6:	d105      	bne.n	dec4 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    deb8:	68bb      	ldr	r3, [r7, #8]
    deba:	1c5a      	adds	r2, r3, #1
    debc:	60ba      	str	r2, [r7, #8]
    debe:	2230      	movs	r2, #48	; 0x30
    dec0:	701a      	strb	r2, [r3, #0]
    dec2:	e021      	b.n	df08 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    dec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dec6:	2b00      	cmp	r3, #0
    dec8:	dd08      	ble.n	dedc <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    deca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    decc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ded0:	68ba      	ldr	r2, [r7, #8]
    ded2:	4618      	mov	r0, r3
    ded4:	4621      	mov	r1, r4
    ded6:	f7ff fe96 	bl	dc06 <uint64_to_str>
    deda:	e011      	b.n	df00 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    dedc:	68bb      	ldr	r3, [r7, #8]
    dede:	1c5a      	adds	r2, r3, #1
    dee0:	60ba      	str	r2, [r7, #8]
    dee2:	222d      	movs	r2, #45	; 0x2d
    dee4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    dee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dee8:	425b      	negs	r3, r3
    deea:	ea4f 74e3 	mov.w	r4, r3, asr #31
    deee:	68ba      	ldr	r2, [r7, #8]
    def0:	4618      	mov	r0, r3
    def2:	4621      	mov	r1, r4
    def4:	f7ff fe87 	bl	dc06 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    def8:	e002      	b.n	df00 <ftoa+0x120>
        {
            pcBuf++;
    defa:	68bb      	ldr	r3, [r7, #8]
    defc:	3301      	adds	r3, #1
    defe:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    df00:	68bb      	ldr	r3, [r7, #8]
    df02:	781b      	ldrb	r3, [r3, #0]
    df04:	2b00      	cmp	r3, #0
    df06:	d1f8      	bne.n	defa <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    df08:	68bb      	ldr	r3, [r7, #8]
    df0a:	1c5a      	adds	r2, r3, #1
    df0c:	60ba      	str	r2, [r7, #8]
    df0e:	222e      	movs	r2, #46	; 0x2e
    df10:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df14:	2b00      	cmp	r3, #0
    df16:	d105      	bne.n	df24 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    df18:	68bb      	ldr	r3, [r7, #8]
    df1a:	1c5a      	adds	r2, r3, #1
    df1c:	60ba      	str	r2, [r7, #8]
    df1e:	2230      	movs	r2, #48	; 0x30
    df20:	701a      	strb	r2, [r3, #0]
    df22:	e04f      	b.n	dfc4 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    df24:	68ba      	ldr	r2, [r7, #8]
    df26:	6a3b      	ldr	r3, [r7, #32]
    df28:	1ad3      	subs	r3, r2, r3
    df2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    df2c:	1ad3      	subs	r3, r2, r3
    df2e:	3b01      	subs	r3, #1
    df30:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    df32:	697a      	ldr	r2, [r7, #20]
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	4293      	cmp	r3, r2
    df38:	bfa8      	it	ge
    df3a:	4613      	movge	r3, r2
    df3c:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    df3e:	2300      	movs	r3, #0
    df40:	62bb      	str	r3, [r7, #40]	; 0x28
    df42:	e015      	b.n	df70 <ftoa+0x190>
        {
            i32FracPart *= 10;
    df44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    df46:	4613      	mov	r3, r2
    df48:	009b      	lsls	r3, r3, #2
    df4a:	4413      	add	r3, r2
    df4c:	005b      	lsls	r3, r3, #1
    df4e:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df52:	161b      	asrs	r3, r3, #24
    df54:	b2da      	uxtb	r2, r3
    df56:	68bb      	ldr	r3, [r7, #8]
    df58:	1c59      	adds	r1, r3, #1
    df5a:	60b9      	str	r1, [r7, #8]
    df5c:	3230      	adds	r2, #48	; 0x30
    df5e:	b2d2      	uxtb	r2, r2
    df60:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    df68:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df6c:	3301      	adds	r3, #1
    df6e:	62bb      	str	r3, [r7, #40]	; 0x28
    df70:	6aba      	ldr	r2, [r7, #40]	; 0x28
    df72:	697b      	ldr	r3, [r7, #20]
    df74:	429a      	cmp	r2, r3
    df76:	dbe5      	blt.n	df44 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    df78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    df7a:	4613      	mov	r3, r2
    df7c:	009b      	lsls	r3, r3, #2
    df7e:	4413      	add	r3, r2
    df80:	005b      	lsls	r3, r3, #1
    df82:	161b      	asrs	r3, r3, #24
    df84:	2b04      	cmp	r3, #4
    df86:	dd1d      	ble.n	dfc4 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    df88:	68bb      	ldr	r3, [r7, #8]
    df8a:	3b01      	subs	r3, #1
    df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    df8e:	e015      	b.n	dfbc <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	2b2e      	cmp	r3, #46	; 0x2e
    df96:	d00e      	beq.n	dfb6 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df9a:	781b      	ldrb	r3, [r3, #0]
    df9c:	2b39      	cmp	r3, #57	; 0x39
    df9e:	d103      	bne.n	dfa8 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dfa2:	2230      	movs	r2, #48	; 0x30
    dfa4:	701a      	strb	r2, [r3, #0]
    dfa6:	e006      	b.n	dfb6 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dfaa:	781b      	ldrb	r3, [r3, #0]
    dfac:	3301      	adds	r3, #1
    dfae:	b2da      	uxtb	r2, r3
    dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dfb2:	701a      	strb	r2, [r3, #0]
                    break;
    dfb4:	e006      	b.n	dfc4 <ftoa+0x1e4>
                }
                pcBuftmp--;
    dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dfb8:	3b01      	subs	r3, #1
    dfba:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    dfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dfbe:	6a3b      	ldr	r3, [r7, #32]
    dfc0:	429a      	cmp	r2, r3
    dfc2:	d2e5      	bcs.n	df90 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    dfc4:	68bb      	ldr	r3, [r7, #8]
    dfc6:	2200      	movs	r2, #0
    dfc8:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    dfca:	68ba      	ldr	r2, [r7, #8]
    dfcc:	6a3b      	ldr	r3, [r7, #32]
    dfce:	1ad3      	subs	r3, r2, r3
} // ftoa()
    dfd0:	4618      	mov	r0, r3
    dfd2:	373c      	adds	r7, #60	; 0x3c
    dfd4:	46bd      	mov	sp, r7
    dfd6:	bd90      	pop	{r4, r7, pc}
    dfd8:	00302e30 	.word	0x00302e30

0000dfdc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    dfdc:	b590      	push	{r4, r7, lr}
    dfde:	b097      	sub	sp, #92	; 0x5c
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	60f8      	str	r0, [r7, #12]
    dfe4:	60b9      	str	r1, [r7, #8]
    dfe6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    dfe8:	2300      	movs	r3, #0
    dfea:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    dfec:	2300      	movs	r3, #0
    dfee:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    dff0:	e2e7      	b.n	e5c2 <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    dff2:	2306      	movs	r3, #6
    dff4:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    dff6:	68bb      	ldr	r3, [r7, #8]
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	2b25      	cmp	r3, #37	; 0x25
    dffc:	d01f      	beq.n	e03e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    dffe:	68fb      	ldr	r3, [r7, #12]
    e000:	2b00      	cmp	r3, #0
    e002:	d015      	beq.n	e030 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    e004:	68bb      	ldr	r3, [r7, #8]
    e006:	781b      	ldrb	r3, [r3, #0]
    e008:	2b0a      	cmp	r3, #10
    e00a:	d10b      	bne.n	e024 <am_util_stdio_vsprintf+0x48>
    e00c:	4bb1      	ldr	r3, [pc, #708]	; (e2d4 <am_util_stdio_vsprintf+0x2f8>)
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	2b00      	cmp	r3, #0
    e012:	d007      	beq.n	e024 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    e014:	68fb      	ldr	r3, [r7, #12]
    e016:	1c5a      	adds	r2, r3, #1
    e018:	60fa      	str	r2, [r7, #12]
    e01a:	220d      	movs	r2, #13
    e01c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    e01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e020:	3301      	adds	r3, #1
    e022:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    e024:	68fb      	ldr	r3, [r7, #12]
    e026:	1c5a      	adds	r2, r3, #1
    e028:	60fa      	str	r2, [r7, #12]
    e02a:	68ba      	ldr	r2, [r7, #8]
    e02c:	7812      	ldrb	r2, [r2, #0]
    e02e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    e030:	68bb      	ldr	r3, [r7, #8]
    e032:	3301      	adds	r3, #1
    e034:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    e036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e038:	3301      	adds	r3, #1
    e03a:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    e03c:	e2c1      	b.n	e5c2 <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    e03e:	68bb      	ldr	r3, [r7, #8]
    e040:	3301      	adds	r3, #1
    e042:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    e044:	2300      	movs	r3, #0
    e046:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    e04a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e04e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    e052:	2320      	movs	r3, #32
    e054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    e058:	68bb      	ldr	r3, [r7, #8]
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	2b30      	cmp	r3, #48	; 0x30
    e05e:	d105      	bne.n	e06c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    e060:	2330      	movs	r3, #48	; 0x30
    e062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    e066:	68bb      	ldr	r3, [r7, #8]
    e068:	3301      	adds	r3, #1
    e06a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    e06c:	f107 0314 	add.w	r3, r7, #20
    e070:	4619      	mov	r1, r3
    e072:	68b8      	ldr	r0, [r7, #8]
    e074:	f7ff fd81 	bl	db7a <decstr_to_int>
    e078:	4603      	mov	r3, r0
    e07a:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    e07c:	697b      	ldr	r3, [r7, #20]
    e07e:	68ba      	ldr	r2, [r7, #8]
    e080:	4413      	add	r3, r2
    e082:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    e084:	68bb      	ldr	r3, [r7, #8]
    e086:	781b      	ldrb	r3, [r3, #0]
    e088:	2b73      	cmp	r3, #115	; 0x73
    e08a:	d005      	beq.n	e098 <am_util_stdio_vsprintf+0xbc>
    e08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e08e:	2b00      	cmp	r3, #0
    e090:	da02      	bge.n	e098 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    e092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e094:	425b      	negs	r3, r3
    e096:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    e098:	68bb      	ldr	r3, [r7, #8]
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	2b2e      	cmp	r3, #46	; 0x2e
    e09e:	d10e      	bne.n	e0be <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    e0a0:	68bb      	ldr	r3, [r7, #8]
    e0a2:	3301      	adds	r3, #1
    e0a4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    e0a6:	f107 0314 	add.w	r3, r7, #20
    e0aa:	4619      	mov	r1, r3
    e0ac:	68b8      	ldr	r0, [r7, #8]
    e0ae:	f7ff fd64 	bl	db7a <decstr_to_int>
    e0b2:	4603      	mov	r3, r0
    e0b4:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    e0b6:	697b      	ldr	r3, [r7, #20]
    e0b8:	68ba      	ldr	r2, [r7, #8]
    e0ba:	4413      	add	r3, r2
    e0bc:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    e0be:	68bb      	ldr	r3, [r7, #8]
    e0c0:	781b      	ldrb	r3, [r3, #0]
    e0c2:	2b6c      	cmp	r3, #108	; 0x6c
    e0c4:	d10c      	bne.n	e0e0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    e0c6:	68bb      	ldr	r3, [r7, #8]
    e0c8:	3301      	adds	r3, #1
    e0ca:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    e0cc:	68bb      	ldr	r3, [r7, #8]
    e0ce:	781b      	ldrb	r3, [r3, #0]
    e0d0:	2b6c      	cmp	r3, #108	; 0x6c
    e0d2:	d105      	bne.n	e0e0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    e0d4:	68bb      	ldr	r3, [r7, #8]
    e0d6:	3301      	adds	r3, #1
    e0d8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    e0da:	2301      	movs	r3, #1
    e0dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    e0e0:	68bb      	ldr	r3, [r7, #8]
    e0e2:	781b      	ldrb	r3, [r3, #0]
    e0e4:	3b46      	subs	r3, #70	; 0x46
    e0e6:	2b32      	cmp	r3, #50	; 0x32
    e0e8:	f200 8258 	bhi.w	e59c <am_util_stdio_vsprintf+0x5c0>
    e0ec:	a201      	add	r2, pc, #4	; (adr r2, e0f4 <am_util_stdio_vsprintf+0x118>)
    e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e0f2:	bf00      	nop
    e0f4:	0000e523 	.word	0x0000e523
    e0f8:	0000e59d 	.word	0x0000e59d
    e0fc:	0000e59d 	.word	0x0000e59d
    e100:	0000e59d 	.word	0x0000e59d
    e104:	0000e59d 	.word	0x0000e59d
    e108:	0000e59d 	.word	0x0000e59d
    e10c:	0000e59d 	.word	0x0000e59d
    e110:	0000e59d 	.word	0x0000e59d
    e114:	0000e59d 	.word	0x0000e59d
    e118:	0000e59d 	.word	0x0000e59d
    e11c:	0000e59d 	.word	0x0000e59d
    e120:	0000e59d 	.word	0x0000e59d
    e124:	0000e59d 	.word	0x0000e59d
    e128:	0000e59d 	.word	0x0000e59d
    e12c:	0000e59d 	.word	0x0000e59d
    e130:	0000e59d 	.word	0x0000e59d
    e134:	0000e59d 	.word	0x0000e59d
    e138:	0000e59d 	.word	0x0000e59d
    e13c:	0000e2b7 	.word	0x0000e2b7
    e140:	0000e59d 	.word	0x0000e59d
    e144:	0000e59d 	.word	0x0000e59d
    e148:	0000e59d 	.word	0x0000e59d
    e14c:	0000e59d 	.word	0x0000e59d
    e150:	0000e59d 	.word	0x0000e59d
    e154:	0000e59d 	.word	0x0000e59d
    e158:	0000e59d 	.word	0x0000e59d
    e15c:	0000e59d 	.word	0x0000e59d
    e160:	0000e59d 	.word	0x0000e59d
    e164:	0000e59d 	.word	0x0000e59d
    e168:	0000e1c1 	.word	0x0000e1c1
    e16c:	0000e3e9 	.word	0x0000e3e9
    e170:	0000e59d 	.word	0x0000e59d
    e174:	0000e523 	.word	0x0000e523
    e178:	0000e59d 	.word	0x0000e59d
    e17c:	0000e59d 	.word	0x0000e59d
    e180:	0000e3e9 	.word	0x0000e3e9
    e184:	0000e59d 	.word	0x0000e59d
    e188:	0000e59d 	.word	0x0000e59d
    e18c:	0000e59d 	.word	0x0000e59d
    e190:	0000e59d 	.word	0x0000e59d
    e194:	0000e59d 	.word	0x0000e59d
    e198:	0000e59d 	.word	0x0000e59d
    e19c:	0000e59d 	.word	0x0000e59d
    e1a0:	0000e59d 	.word	0x0000e59d
    e1a4:	0000e59d 	.word	0x0000e59d
    e1a8:	0000e1e3 	.word	0x0000e1e3
    e1ac:	0000e59d 	.word	0x0000e59d
    e1b0:	0000e355 	.word	0x0000e355
    e1b4:	0000e59d 	.word	0x0000e59d
    e1b8:	0000e59d 	.word	0x0000e59d
    e1bc:	0000e2b1 	.word	0x0000e2b1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    e1c0:	687b      	ldr	r3, [r7, #4]
    e1c2:	1d1a      	adds	r2, r3, #4
    e1c4:	607a      	str	r2, [r7, #4]
    e1c6:	681b      	ldr	r3, [r3, #0]
    e1c8:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    e1ca:	68fb      	ldr	r3, [r7, #12]
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	d004      	beq.n	e1da <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    e1d0:	68fb      	ldr	r3, [r7, #12]
    e1d2:	1c5a      	adds	r2, r3, #1
    e1d4:	60fa      	str	r2, [r7, #12]
    e1d6:	7ffa      	ldrb	r2, [r7, #31]
    e1d8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e1dc:	3301      	adds	r3, #1
    e1de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e1e0:	e1ec      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    e1e2:	687b      	ldr	r3, [r7, #4]
    e1e4:	1d1a      	adds	r2, r3, #4
    e1e6:	607a      	str	r2, [r7, #4]
    e1e8:	681b      	ldr	r3, [r3, #0]
    e1ea:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    e1ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
    e1ee:	f7ff fdb6 	bl	dd5e <simple_strlen>
    e1f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    e1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	dd2e      	ble.n	e258 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    e1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e1fe:	429a      	cmp	r2, r3
    e200:	d22a      	bcs.n	e258 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    e202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e206:	1ad3      	subs	r3, r2, r3
    e208:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e20a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e210:	4619      	mov	r1, r3
    e212:	68f8      	ldr	r0, [r7, #12]
    e214:	f7ff fdbe 	bl	dd94 <padbuffer>
    e218:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    e21a:	68fb      	ldr	r3, [r7, #12]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d001      	beq.n	e224 <am_util_stdio_vsprintf+0x248>
    e220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e222:	e000      	b.n	e226 <am_util_stdio_vsprintf+0x24a>
    e224:	2300      	movs	r3, #0
    e226:	68fa      	ldr	r2, [r7, #12]
    e228:	4413      	add	r3, r2
    e22a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    e22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e22e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e230:	4413      	add	r3, r2
    e232:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    e234:	2300      	movs	r3, #0
    e236:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    e238:	e00e      	b.n	e258 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    e23a:	68fb      	ldr	r3, [r7, #12]
    e23c:	2b00      	cmp	r3, #0
    e23e:	d005      	beq.n	e24c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    e240:	68fb      	ldr	r3, [r7, #12]
    e242:	1c5a      	adds	r2, r3, #1
    e244:	60fa      	str	r2, [r7, #12]
    e246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e248:	7812      	ldrb	r2, [r2, #0]
    e24a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    e24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e24e:	3301      	adds	r3, #1
    e250:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    e252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e254:	3301      	adds	r3, #1
    e256:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    e258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e25a:	781b      	ldrb	r3, [r3, #0]
    e25c:	2b00      	cmp	r3, #0
    e25e:	d1ec      	bne.n	e23a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    e260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e262:	2b00      	cmp	r3, #0
    e264:	f000 81a7 	beq.w	e5b6 <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    e268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e26a:	425b      	negs	r3, r3
    e26c:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    e26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e272:	429a      	cmp	r2, r3
    e274:	f080 819f 	bcs.w	e5b6 <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    e278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e27c:	1ad3      	subs	r3, r2, r3
    e27e:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e286:	4619      	mov	r1, r3
    e288:	68f8      	ldr	r0, [r7, #12]
    e28a:	f7ff fd83 	bl	dd94 <padbuffer>
    e28e:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    e290:	68fb      	ldr	r3, [r7, #12]
    e292:	2b00      	cmp	r3, #0
    e294:	d001      	beq.n	e29a <am_util_stdio_vsprintf+0x2be>
    e296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e298:	e000      	b.n	e29c <am_util_stdio_vsprintf+0x2c0>
    e29a:	2300      	movs	r3, #0
    e29c:	68fa      	ldr	r2, [r7, #12]
    e29e:	4413      	add	r3, r2
    e2a0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    e2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e2a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e2a6:	4413      	add	r3, r2
    e2a8:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    e2aa:	2300      	movs	r3, #0
    e2ac:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    e2ae:	e182      	b.n	e5b6 <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    e2b0:	2301      	movs	r3, #1
    e2b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e2b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e2ba:	2b00      	cmp	r3, #0
    e2bc:	d00c      	beq.n	e2d8 <am_util_stdio_vsprintf+0x2fc>
    e2be:	687b      	ldr	r3, [r7, #4]
    e2c0:	3307      	adds	r3, #7
    e2c2:	f023 0307 	bic.w	r3, r3, #7
    e2c6:	f103 0208 	add.w	r2, r3, #8
    e2ca:	607a      	str	r2, [r7, #4]
    e2cc:	e9d3 3400 	ldrd	r3, r4, [r3]
    e2d0:	e008      	b.n	e2e4 <am_util_stdio_vsprintf+0x308>
    e2d2:	bf00      	nop
    e2d4:	1000c578 	.word	0x1000c578
                                      va_arg(pArgs, uint32_t);
    e2d8:	687b      	ldr	r3, [r7, #4]
    e2da:	1d1a      	adds	r2, r3, #4
    e2dc:	607a      	str	r2, [r7, #4]
    e2de:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e2e0:	f04f 0400 	mov.w	r4, #0
    e2e4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    e2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d01e      	beq.n	e32c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    e2ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e2f2:	f7ff fc1a 	bl	db2a <ndigits_in_hex>
    e2f6:	4602      	mov	r2, r0
    e2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e2fa:	1a9b      	subs	r3, r3, r2
    e2fc:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e2fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e304:	4619      	mov	r1, r3
    e306:	68f8      	ldr	r0, [r7, #12]
    e308:	f7ff fd44 	bl	dd94 <padbuffer>
    e30c:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e30e:	68fb      	ldr	r3, [r7, #12]
    e310:	2b00      	cmp	r3, #0
    e312:	d001      	beq.n	e318 <am_util_stdio_vsprintf+0x33c>
    e314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e316:	e000      	b.n	e31a <am_util_stdio_vsprintf+0x33e>
    e318:	2300      	movs	r3, #0
    e31a:	68fa      	ldr	r2, [r7, #12]
    e31c:	4413      	add	r3, r2
    e31e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e324:	4413      	add	r3, r2
    e326:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e328:	2300      	movs	r3, #0
    e32a:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    e32c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    e330:	68fa      	ldr	r2, [r7, #12]
    e332:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e336:	f7ff fcae 	bl	dc96 <uint64_to_hexstr>
    e33a:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e33c:	68fb      	ldr	r3, [r7, #12]
    e33e:	2b00      	cmp	r3, #0
    e340:	d003      	beq.n	e34a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    e342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e344:	68fa      	ldr	r2, [r7, #12]
    e346:	4413      	add	r3, r2
    e348:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e34c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e34e:	4413      	add	r3, r2
    e350:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e352:	e133      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e354:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e358:	2b00      	cmp	r3, #0
    e35a:	d009      	beq.n	e370 <am_util_stdio_vsprintf+0x394>
    e35c:	687b      	ldr	r3, [r7, #4]
    e35e:	3307      	adds	r3, #7
    e360:	f023 0307 	bic.w	r3, r3, #7
    e364:	f103 0208 	add.w	r2, r3, #8
    e368:	607a      	str	r2, [r7, #4]
    e36a:	e9d3 3400 	ldrd	r3, r4, [r3]
    e36e:	e005      	b.n	e37c <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    e370:	687b      	ldr	r3, [r7, #4]
    e372:	1d1a      	adds	r2, r3, #4
    e374:	607a      	str	r2, [r7, #4]
    e376:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e378:	f04f 0400 	mov.w	r4, #0
    e37c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    e380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e382:	2b00      	cmp	r3, #0
    e384:	d01e      	beq.n	e3c4 <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    e386:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e38a:	f7ff fb90 	bl	daae <ndigits_in_u64>
    e38e:	4602      	mov	r2, r0
    e390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e392:	1a9b      	subs	r3, r3, r2
    e394:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e39c:	4619      	mov	r1, r3
    e39e:	68f8      	ldr	r0, [r7, #12]
    e3a0:	f7ff fcf8 	bl	dd94 <padbuffer>
    e3a4:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e3a6:	68fb      	ldr	r3, [r7, #12]
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d001      	beq.n	e3b0 <am_util_stdio_vsprintf+0x3d4>
    e3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e3ae:	e000      	b.n	e3b2 <am_util_stdio_vsprintf+0x3d6>
    e3b0:	2300      	movs	r3, #0
    e3b2:	68fa      	ldr	r2, [r7, #12]
    e3b4:	4413      	add	r3, r2
    e3b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e3ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e3bc:	4413      	add	r3, r2
    e3be:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e3c0:	2300      	movs	r3, #0
    e3c2:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e3c4:	68fa      	ldr	r2, [r7, #12]
    e3c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e3ca:	f7ff fc1c 	bl	dc06 <uint64_to_str>
    e3ce:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e3d0:	68fb      	ldr	r3, [r7, #12]
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d003      	beq.n	e3de <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    e3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e3d8:	68fa      	ldr	r2, [r7, #12]
    e3da:	4413      	add	r3, r2
    e3dc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e3e2:	4413      	add	r3, r2
    e3e4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e3e6:	e0e9      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e3e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d009      	beq.n	e404 <am_util_stdio_vsprintf+0x428>
    e3f0:	687b      	ldr	r3, [r7, #4]
    e3f2:	3307      	adds	r3, #7
    e3f4:	f023 0307 	bic.w	r3, r3, #7
    e3f8:	f103 0208 	add.w	r2, r3, #8
    e3fc:	607a      	str	r2, [r7, #4]
    e3fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    e402:	e005      	b.n	e410 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	1d1a      	adds	r2, r3, #4
    e408:	607a      	str	r2, [r7, #4]
    e40a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e40c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    e410:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    e414:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e418:	2b00      	cmp	r3, #0
    e41a:	f174 0300 	sbcs.w	r3, r4, #0
    e41e:	da0a      	bge.n	e436 <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    e420:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e424:	425b      	negs	r3, r3
    e426:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    e42a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    e42e:	2301      	movs	r3, #1
    e430:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    e434:	e006      	b.n	e444 <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    e436:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e43a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    e43e:	2300      	movs	r3, #0
    e440:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    e444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e446:	2b00      	cmp	r3, #0
    e448:	d04a      	beq.n	e4e0 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    e44a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    e44e:	4618      	mov	r0, r3
    e450:	4621      	mov	r1, r4
    e452:	f7ff fb4d 	bl	daf0 <ndigits_in_i64>
    e456:	4602      	mov	r2, r0
    e458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e45a:	1a9b      	subs	r3, r3, r2
    e45c:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    e45e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e462:	2b00      	cmp	r3, #0
    e464:	d011      	beq.n	e48a <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    e466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e468:	3b01      	subs	r3, #1
    e46a:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    e46c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e470:	2b30      	cmp	r3, #48	; 0x30
    e472:	d10a      	bne.n	e48a <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    e474:	68fb      	ldr	r3, [r7, #12]
    e476:	2b00      	cmp	r3, #0
    e478:	d004      	beq.n	e484 <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    e47a:	68fb      	ldr	r3, [r7, #12]
    e47c:	1c5a      	adds	r2, r3, #1
    e47e:	60fa      	str	r2, [r7, #12]
    e480:	222d      	movs	r2, #45	; 0x2d
    e482:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    e484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e486:	3301      	adds	r3, #1
    e488:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e48a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e48e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e490:	4619      	mov	r1, r3
    e492:	68f8      	ldr	r0, [r7, #12]
    e494:	f7ff fc7e 	bl	dd94 <padbuffer>
    e498:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e49a:	68fb      	ldr	r3, [r7, #12]
    e49c:	2b00      	cmp	r3, #0
    e49e:	d001      	beq.n	e4a4 <am_util_stdio_vsprintf+0x4c8>
    e4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e4a2:	e000      	b.n	e4a6 <am_util_stdio_vsprintf+0x4ca>
    e4a4:	2300      	movs	r3, #0
    e4a6:	68fa      	ldr	r2, [r7, #12]
    e4a8:	4413      	add	r3, r2
    e4aa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e4ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e4b0:	4413      	add	r3, r2
    e4b2:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e4b4:	2300      	movs	r3, #0
    e4b6:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e4b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d01e      	beq.n	e4fe <am_util_stdio_vsprintf+0x522>
    e4c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e4c4:	2b20      	cmp	r3, #32
    e4c6:	d11a      	bne.n	e4fe <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e4c8:	68fb      	ldr	r3, [r7, #12]
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	d004      	beq.n	e4d8 <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e4ce:	68fb      	ldr	r3, [r7, #12]
    e4d0:	1c5a      	adds	r2, r3, #1
    e4d2:	60fa      	str	r2, [r7, #12]
    e4d4:	222d      	movs	r2, #45	; 0x2d
    e4d6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e4da:	3301      	adds	r3, #1
    e4dc:	647b      	str	r3, [r7, #68]	; 0x44
    e4de:	e00e      	b.n	e4fe <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e4e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d00a      	beq.n	e4fe <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e4e8:	68fb      	ldr	r3, [r7, #12]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d004      	beq.n	e4f8 <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	1c5a      	adds	r2, r3, #1
    e4f2:	60fa      	str	r2, [r7, #12]
    e4f4:	222d      	movs	r2, #45	; 0x2d
    e4f6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e4f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e4fa:	3301      	adds	r3, #1
    e4fc:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e4fe:	68fa      	ldr	r2, [r7, #12]
    e500:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e504:	f7ff fb7f 	bl	dc06 <uint64_to_str>
    e508:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e50a:	68fb      	ldr	r3, [r7, #12]
    e50c:	2b00      	cmp	r3, #0
    e50e:	d003      	beq.n	e518 <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e512:	68fa      	ldr	r2, [r7, #12]
    e514:	4413      	add	r3, r2
    e516:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e51a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e51c:	4413      	add	r3, r2
    e51e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e520:	e04c      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e522:	68fb      	ldr	r3, [r7, #12]
    e524:	2b00      	cmp	r3, #0
    e526:	d048      	beq.n	e5ba <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	3307      	adds	r3, #7
    e52c:	f023 0307 	bic.w	r3, r3, #7
    e530:	f103 0208 	add.w	r2, r3, #8
    e534:	607a      	str	r2, [r7, #4]
    e536:	e9d3 3400 	ldrd	r3, r4, [r3]
    e53a:	4618      	mov	r0, r3
    e53c:	4621      	mov	r1, r4
    e53e:	f7fe fa0d 	bl	c95c <__aeabi_d2f>
    e542:	4603      	mov	r3, r0
    e544:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e546:	68fb      	ldr	r3, [r7, #12]
    e548:	2214      	movs	r2, #20
    e54a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e54c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e54e:	68f8      	ldr	r0, [r7, #12]
    e550:	ed97 0a06 	vldr	s0, [r7, #24]
    e554:	f7ff fc44 	bl	dde0 <ftoa>
    e558:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e55c:	2b00      	cmp	r3, #0
    e55e:	da14      	bge.n	e58a <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e566:	d102      	bne.n	e56e <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e568:	4b1e      	ldr	r3, [pc, #120]	; (e5e4 <am_util_stdio_vsprintf+0x608>)
    e56a:	633b      	str	r3, [r7, #48]	; 0x30
    e56c:	e008      	b.n	e580 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e570:	f113 0f02 	cmn.w	r3, #2
    e574:	d102      	bne.n	e57c <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e576:	4b1c      	ldr	r3, [pc, #112]	; (e5e8 <am_util_stdio_vsprintf+0x60c>)
    e578:	633b      	str	r3, [r7, #48]	; 0x30
    e57a:	e001      	b.n	e580 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e57c:	4b1b      	ldr	r3, [pc, #108]	; (e5ec <am_util_stdio_vsprintf+0x610>)
    e57e:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e580:	68fb      	ldr	r3, [r7, #12]
    e582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e584:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e586:	2303      	movs	r3, #3
    e588:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e58e:	4413      	add	r3, r2
    e590:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e594:	68fa      	ldr	r2, [r7, #12]
    e596:	4413      	add	r3, r2
    e598:	60fb      	str	r3, [r7, #12]
                }
                break;
    e59a:	e00e      	b.n	e5ba <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e59c:	68fb      	ldr	r3, [r7, #12]
    e59e:	2b00      	cmp	r3, #0
    e5a0:	d005      	beq.n	e5ae <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e5a2:	68fb      	ldr	r3, [r7, #12]
    e5a4:	1c5a      	adds	r2, r3, #1
    e5a6:	60fa      	str	r2, [r7, #12]
    e5a8:	68ba      	ldr	r2, [r7, #8]
    e5aa:	7812      	ldrb	r2, [r2, #0]
    e5ac:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e5b0:	3301      	adds	r3, #1
    e5b2:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e5b4:	e002      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>
                break;
    e5b6:	bf00      	nop
    e5b8:	e000      	b.n	e5bc <am_util_stdio_vsprintf+0x5e0>
                break;
    e5ba:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e5bc:	68bb      	ldr	r3, [r7, #8]
    e5be:	3301      	adds	r3, #1
    e5c0:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e5c2:	68bb      	ldr	r3, [r7, #8]
    e5c4:	781b      	ldrb	r3, [r3, #0]
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	f47f ad13 	bne.w	dff2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e5cc:	68fb      	ldr	r3, [r7, #12]
    e5ce:	2b00      	cmp	r3, #0
    e5d0:	d002      	beq.n	e5d8 <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e5d2:	68fb      	ldr	r3, [r7, #12]
    e5d4:	2200      	movs	r2, #0
    e5d6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e5da:	4618      	mov	r0, r3
    e5dc:	375c      	adds	r7, #92	; 0x5c
    e5de:	46bd      	mov	sp, r7
    e5e0:	bd90      	pop	{r4, r7, pc}
    e5e2:	bf00      	nop
    e5e4:	00302e30 	.word	0x00302e30
    e5e8:	00232e23 	.word	0x00232e23
    e5ec:	003f2e3f 	.word	0x003f2e3f

0000e5f0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e5f0:	b40f      	push	{r0, r1, r2, r3}
    e5f2:	b580      	push	{r7, lr}
    e5f4:	b082      	sub	sp, #8
    e5f6:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e5f8:	4b0d      	ldr	r3, [pc, #52]	; (e630 <am_util_stdio_printf+0x40>)
    e5fa:	681b      	ldr	r3, [r3, #0]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d101      	bne.n	e604 <am_util_stdio_printf+0x14>
    {
        return 0;
    e600:	2300      	movs	r3, #0
    e602:	e00d      	b.n	e620 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e604:	f107 0314 	add.w	r3, r7, #20
    e608:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e60a:	683a      	ldr	r2, [r7, #0]
    e60c:	6939      	ldr	r1, [r7, #16]
    e60e:	4809      	ldr	r0, [pc, #36]	; (e634 <am_util_stdio_printf+0x44>)
    e610:	f7ff fce4 	bl	dfdc <am_util_stdio_vsprintf>
    e614:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e616:	4b06      	ldr	r3, [pc, #24]	; (e630 <am_util_stdio_printf+0x40>)
    e618:	681b      	ldr	r3, [r3, #0]
    e61a:	4806      	ldr	r0, [pc, #24]	; (e634 <am_util_stdio_printf+0x44>)
    e61c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e61e:	687b      	ldr	r3, [r7, #4]
}
    e620:	4618      	mov	r0, r3
    e622:	3708      	adds	r7, #8
    e624:	46bd      	mov	sp, r7
    e626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e62a:	b004      	add	sp, #16
    e62c:	4770      	bx	lr
    e62e:	bf00      	nop
    e630:	1000c5a8 	.word	0x1000c5a8
    e634:	1000c478 	.word	0x1000c478

0000e638 <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e638:	b480      	push	{r7}
    e63a:	b085      	sub	sp, #20
    e63c:	af00      	add	r7, sp, #0
    e63e:	60f8      	str	r0, [r7, #12]
    e640:	4638      	mov	r0, r7
    e642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e646:	683b      	ldr	r3, [r7, #0]
    e648:	461a      	mov	r2, r3
    e64a:	4613      	mov	r3, r2
    e64c:	009b      	lsls	r3, r3, #2
    e64e:	4413      	add	r3, r2
    e650:	009b      	lsls	r3, r3, #2
    e652:	461a      	mov	r2, r3
    e654:	68fb      	ldr	r3, [r7, #12]
    e656:	4413      	add	r3, r2
    e658:	2200      	movs	r2, #0
    e65a:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e65c:	683b      	ldr	r3, [r7, #0]
    e65e:	461a      	mov	r2, r3
    e660:	4613      	mov	r3, r2
    e662:	009b      	lsls	r3, r3, #2
    e664:	4413      	add	r3, r2
    e666:	009b      	lsls	r3, r3, #2
    e668:	461a      	mov	r2, r3
    e66a:	68fb      	ldr	r3, [r7, #12]
    e66c:	4413      	add	r3, r2
    e66e:	2200      	movs	r2, #0
    e670:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e672:	683b      	ldr	r3, [r7, #0]
    e674:	461a      	mov	r2, r3
    e676:	4613      	mov	r3, r2
    e678:	009b      	lsls	r3, r3, #2
    e67a:	4413      	add	r3, r2
    e67c:	009b      	lsls	r3, r3, #2
    e67e:	461a      	mov	r2, r3
    e680:	68fb      	ldr	r3, [r7, #12]
    e682:	4413      	add	r3, r2
    e684:	2200      	movs	r2, #0
    e686:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e688:	683b      	ldr	r3, [r7, #0]
    e68a:	461a      	mov	r2, r3
    e68c:	4613      	mov	r3, r2
    e68e:	009b      	lsls	r3, r3, #2
    e690:	4413      	add	r3, r2
    e692:	009b      	lsls	r3, r3, #2
    e694:	461a      	mov	r2, r3
    e696:	68fb      	ldr	r3, [r7, #12]
    e698:	4413      	add	r3, r2
    e69a:	68ba      	ldr	r2, [r7, #8]
    e69c:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e69e:	683b      	ldr	r3, [r7, #0]
    e6a0:	461a      	mov	r2, r3
    e6a2:	4613      	mov	r3, r2
    e6a4:	009b      	lsls	r3, r3, #2
    e6a6:	4413      	add	r3, r2
    e6a8:	009b      	lsls	r3, r3, #2
    e6aa:	461a      	mov	r2, r3
    e6ac:	68fb      	ldr	r3, [r7, #12]
    e6ae:	4413      	add	r3, r2
    e6b0:	687a      	ldr	r2, [r7, #4]
    e6b2:	601a      	str	r2, [r3, #0]
}
    e6b4:	bf00      	nop
    e6b6:	3714      	adds	r7, #20
    e6b8:	46bd      	mov	sp, r7
    e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6be:	4770      	bx	lr

0000e6c0 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e6c0:	b580      	push	{r7, lr}
    e6c2:	b086      	sub	sp, #24
    e6c4:	af00      	add	r7, sp, #0
    e6c6:	60f8      	str	r0, [r7, #12]
    e6c8:	60b9      	str	r1, [r7, #8]
    e6ca:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e6cc:	2300      	movs	r3, #0
    e6ce:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e6d0:	2300      	movs	r3, #0
    e6d2:	617b      	str	r3, [r7, #20]
    e6d4:	e00e      	b.n	e6f4 <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e6d6:	697a      	ldr	r2, [r7, #20]
    e6d8:	4613      	mov	r3, r2
    e6da:	005b      	lsls	r3, r3, #1
    e6dc:	4413      	add	r3, r2
    e6de:	009b      	lsls	r3, r3, #2
    e6e0:	461a      	mov	r2, r3
    e6e2:	68bb      	ldr	r3, [r7, #8]
    e6e4:	4413      	add	r3, r2
    e6e6:	cb0e      	ldmia	r3, {r1, r2, r3}
    e6e8:	68f8      	ldr	r0, [r7, #12]
    e6ea:	f7ff ffa5 	bl	e638 <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e6ee:	697b      	ldr	r3, [r7, #20]
    e6f0:	3301      	adds	r3, #1
    e6f2:	617b      	str	r3, [r7, #20]
    e6f4:	697a      	ldr	r2, [r7, #20]
    e6f6:	687b      	ldr	r3, [r7, #4]
    e6f8:	429a      	cmp	r2, r3
    e6fa:	d3ec      	bcc.n	e6d6 <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e6fc:	bf00      	nop
    e6fe:	3718      	adds	r7, #24
    e700:	46bd      	mov	sp, r7
    e702:	bd80      	pop	{r7, pc}

0000e704 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e704:	b580      	push	{r7, lr}
    e706:	b082      	sub	sp, #8
    e708:	af00      	add	r7, sp, #0
    e70a:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	2b00      	cmp	r3, #0
    e710:	d03d      	beq.n	e78e <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e712:	687b      	ldr	r3, [r7, #4]
    e714:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e716:	2b31      	cmp	r3, #49	; 0x31
    e718:	d839      	bhi.n	e78e <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e71a:	687b      	ldr	r3, [r7, #4]
    e71c:	685b      	ldr	r3, [r3, #4]
    e71e:	f003 0302 	and.w	r3, r3, #2
    e722:	2b00      	cmp	r3, #0
    e724:	d019      	beq.n	e75a <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e726:	687b      	ldr	r3, [r7, #4]
    e728:	681a      	ldr	r2, [r3, #0]
    e72a:	4b1b      	ldr	r3, [pc, #108]	; (e798 <am_devices_led_init+0x94>)
    e72c:	6819      	ldr	r1, [r3, #0]
    e72e:	4610      	mov	r0, r2
    e730:	f7fe fd0e 	bl	d150 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	681b      	ldr	r3, [r3, #0]
    e738:	2103      	movs	r1, #3
    e73a:	4618      	mov	r0, r3
    e73c:	f7fe ff48 	bl	d5d0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e744:	687b      	ldr	r3, [r7, #4]
    e746:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e748:	b2db      	uxtb	r3, r3
    e74a:	f003 0301 	and.w	r3, r3, #1
    e74e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e750:	4619      	mov	r1, r3
    e752:	4610      	mov	r0, r2
    e754:	f7fe ff3c 	bl	d5d0 <am_hal_gpio_state_write>
    e758:	e01a      	b.n	e790 <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e75a:	687b      	ldr	r3, [r7, #4]
    e75c:	681a      	ldr	r2, [r3, #0]
    e75e:	4b0f      	ldr	r3, [pc, #60]	; (e79c <am_devices_led_init+0x98>)
    e760:	6819      	ldr	r1, [r3, #0]
    e762:	4610      	mov	r0, r2
    e764:	f7fe fcf4 	bl	d150 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e768:	687b      	ldr	r3, [r7, #4]
    e76a:	681b      	ldr	r3, [r3, #0]
    e76c:	2103      	movs	r1, #3
    e76e:	4618      	mov	r0, r3
    e770:	f7fe ff2e 	bl	d5d0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e77c:	b2db      	uxtb	r3, r3
    e77e:	f003 0301 	and.w	r3, r3, #1
    e782:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e784:	4619      	mov	r1, r3
    e786:	4610      	mov	r0, r2
    e788:	f7fe ff22 	bl	d5d0 <am_hal_gpio_state_write>
    e78c:	e000      	b.n	e790 <am_devices_led_init+0x8c>
        return;
    e78e:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e790:	3708      	adds	r7, #8
    e792:	46bd      	mov	sp, r7
    e794:	bd80      	pop	{r7, pc}
    e796:	bf00      	nop
    e798:	0001134c 	.word	0x0001134c
    e79c:	00011350 	.word	0x00011350

0000e7a0 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e7a0:	b580      	push	{r7, lr}
    e7a2:	b084      	sub	sp, #16
    e7a4:	af00      	add	r7, sp, #0
    e7a6:	6078      	str	r0, [r7, #4]
    e7a8:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e7aa:	687b      	ldr	r3, [r7, #4]
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	d014      	beq.n	e7da <am_devices_led_array_init+0x3a>
    e7b0:	683b      	ldr	r3, [r7, #0]
    e7b2:	2b1f      	cmp	r3, #31
    e7b4:	d811      	bhi.n	e7da <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e7b6:	2300      	movs	r3, #0
    e7b8:	60fb      	str	r3, [r7, #12]
    e7ba:	e009      	b.n	e7d0 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e7bc:	68fb      	ldr	r3, [r7, #12]
    e7be:	00db      	lsls	r3, r3, #3
    e7c0:	687a      	ldr	r2, [r7, #4]
    e7c2:	4413      	add	r3, r2
    e7c4:	4618      	mov	r0, r3
    e7c6:	f7ff ff9d 	bl	e704 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e7ca:	68fb      	ldr	r3, [r7, #12]
    e7cc:	3301      	adds	r3, #1
    e7ce:	60fb      	str	r3, [r7, #12]
    e7d0:	68fa      	ldr	r2, [r7, #12]
    e7d2:	683b      	ldr	r3, [r7, #0]
    e7d4:	429a      	cmp	r2, r3
    e7d6:	d3f1      	bcc.n	e7bc <am_devices_led_array_init+0x1c>
    e7d8:	e000      	b.n	e7dc <am_devices_led_array_init+0x3c>
        return;
    e7da:	bf00      	nop
    }
}
    e7dc:	3710      	adds	r7, #16
    e7de:	46bd      	mov	sp, r7
    e7e0:	bd80      	pop	{r7, pc}

0000e7e2 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e7e2:	b580      	push	{r7, lr}
    e7e4:	b082      	sub	sp, #8
    e7e6:	af00      	add	r7, sp, #0
    e7e8:	6078      	str	r0, [r7, #4]
    e7ea:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e7ec:	687b      	ldr	r3, [r7, #4]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d031      	beq.n	e856 <am_devices_led_off+0x74>
    e7f2:	683b      	ldr	r3, [r7, #0]
    e7f4:	2b1e      	cmp	r3, #30
    e7f6:	d82e      	bhi.n	e856 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e7f8:	683b      	ldr	r3, [r7, #0]
    e7fa:	00db      	lsls	r3, r3, #3
    e7fc:	687a      	ldr	r2, [r7, #4]
    e7fe:	4413      	add	r3, r2
    e800:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e802:	2b31      	cmp	r3, #49	; 0x31
    e804:	d827      	bhi.n	e856 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e806:	683b      	ldr	r3, [r7, #0]
    e808:	00db      	lsls	r3, r3, #3
    e80a:	687a      	ldr	r2, [r7, #4]
    e80c:	4413      	add	r3, r2
    e80e:	685b      	ldr	r3, [r3, #4]
    e810:	f003 0302 	and.w	r3, r3, #2
    e814:	2b00      	cmp	r3, #0
    e816:	d014      	beq.n	e842 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e818:	683b      	ldr	r3, [r7, #0]
    e81a:	00db      	lsls	r3, r3, #3
    e81c:	687a      	ldr	r2, [r7, #4]
    e81e:	4413      	add	r3, r2
    e820:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e822:	683b      	ldr	r3, [r7, #0]
    e824:	00db      	lsls	r3, r3, #3
    e826:	687a      	ldr	r2, [r7, #4]
    e828:	4413      	add	r3, r2
    e82a:	685b      	ldr	r3, [r3, #4]
    e82c:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e830:	2b00      	cmp	r3, #0
    e832:	bf0c      	ite	eq
    e834:	2301      	moveq	r3, #1
    e836:	2300      	movne	r3, #0
    e838:	b2db      	uxtb	r3, r3
    e83a:	4619      	mov	r1, r3
    e83c:	f7fe fec8 	bl	d5d0 <am_hal_gpio_state_write>
    e840:	e00a      	b.n	e858 <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e842:	683b      	ldr	r3, [r7, #0]
    e844:	00db      	lsls	r3, r3, #3
    e846:	687a      	ldr	r2, [r7, #4]
    e848:	4413      	add	r3, r2
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	2103      	movs	r1, #3
    e84e:	4618      	mov	r0, r3
    e850:	f7fe febe 	bl	d5d0 <am_hal_gpio_state_write>
    e854:	e000      	b.n	e858 <am_devices_led_off+0x76>
        return;
    e856:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    e858:	3708      	adds	r7, #8
    e85a:	46bd      	mov	sp, r7
    e85c:	bd80      	pop	{r7, pc}

0000e85e <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e85e:	b580      	push	{r7, lr}
    e860:	b084      	sub	sp, #16
    e862:	af00      	add	r7, sp, #0
    e864:	6078      	str	r0, [r7, #4]
    e866:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	2b00      	cmp	r3, #0
    e86c:	d042      	beq.n	e8f4 <am_devices_led_toggle+0x96>
    e86e:	683b      	ldr	r3, [r7, #0]
    e870:	2b1e      	cmp	r3, #30
    e872:	d83f      	bhi.n	e8f4 <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e874:	683b      	ldr	r3, [r7, #0]
    e876:	00db      	lsls	r3, r3, #3
    e878:	687a      	ldr	r2, [r7, #4]
    e87a:	4413      	add	r3, r2
    e87c:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e87e:	2b31      	cmp	r3, #49	; 0x31
    e880:	d838      	bhi.n	e8f4 <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e882:	683b      	ldr	r3, [r7, #0]
    e884:	00db      	lsls	r3, r3, #3
    e886:	687a      	ldr	r2, [r7, #4]
    e888:	4413      	add	r3, r2
    e88a:	685b      	ldr	r3, [r3, #4]
    e88c:	f003 0302 	and.w	r3, r3, #2
    e890:	2b00      	cmp	r3, #0
    e892:	d009      	beq.n	e8a8 <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e894:	683b      	ldr	r3, [r7, #0]
    e896:	00db      	lsls	r3, r3, #3
    e898:	687a      	ldr	r2, [r7, #4]
    e89a:	4413      	add	r3, r2
    e89c:	681b      	ldr	r3, [r3, #0]
    e89e:	2102      	movs	r1, #2
    e8a0:	4618      	mov	r0, r3
    e8a2:	f7fe fe95 	bl	d5d0 <am_hal_gpio_state_write>
    e8a6:	e026      	b.n	e8f6 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8a8:	683b      	ldr	r3, [r7, #0]
    e8aa:	00db      	lsls	r3, r3, #3
    e8ac:	687a      	ldr	r2, [r7, #4]
    e8ae:	4413      	add	r3, r2
    e8b0:	681b      	ldr	r3, [r3, #0]
    e8b2:	f107 0208 	add.w	r2, r7, #8
    e8b6:	2102      	movs	r1, #2
    e8b8:	4618      	mov	r0, r3
    e8ba:	f7fe fe25 	bl	d508 <am_hal_gpio_state_read>
    e8be:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    e8c0:	68fb      	ldr	r3, [r7, #12]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d117      	bne.n	e8f6 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    e8c6:	68bb      	ldr	r3, [r7, #8]
    e8c8:	2b00      	cmp	r3, #0
    e8ca:	d009      	beq.n	e8e0 <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8cc:	683b      	ldr	r3, [r7, #0]
    e8ce:	00db      	lsls	r3, r3, #3
    e8d0:	687a      	ldr	r2, [r7, #4]
    e8d2:	4413      	add	r3, r2
    e8d4:	681b      	ldr	r3, [r3, #0]
    e8d6:	2103      	movs	r1, #3
    e8d8:	4618      	mov	r0, r3
    e8da:	f7fe fe79 	bl	d5d0 <am_hal_gpio_state_write>
    e8de:	e00a      	b.n	e8f6 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e8e0:	683b      	ldr	r3, [r7, #0]
    e8e2:	00db      	lsls	r3, r3, #3
    e8e4:	687a      	ldr	r2, [r7, #4]
    e8e6:	4413      	add	r3, r2
    e8e8:	681b      	ldr	r3, [r3, #0]
    e8ea:	2104      	movs	r1, #4
    e8ec:	4618      	mov	r0, r3
    e8ee:	f7fe fe6f 	bl	d5d0 <am_hal_gpio_state_write>
    e8f2:	e000      	b.n	e8f6 <am_devices_led_toggle+0x98>
        return;
    e8f4:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    e8f6:	3710      	adds	r7, #16
    e8f8:	46bd      	mov	sp, r7
    e8fa:	bd80      	pop	{r7, pc}

0000e8fc <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e8fc:	4811      	ldr	r0, [pc, #68]	; (e944 <zero_loop+0x12>)
    e8fe:	4912      	ldr	r1, [pc, #72]	; (e948 <zero_loop+0x16>)
    e900:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e902:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e906:	4811      	ldr	r0, [pc, #68]	; (e94c <zero_loop+0x1a>)
    e908:	6801      	ldr	r1, [r0, #0]
    e90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e90e:	6001      	str	r1, [r0, #0]
    e910:	f3bf 8f4f 	dsb	sy
    e914:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e918:	480d      	ldr	r0, [pc, #52]	; (e950 <zero_loop+0x1e>)
    e91a:	490e      	ldr	r1, [pc, #56]	; (e954 <zero_loop+0x22>)
    e91c:	4a0e      	ldr	r2, [pc, #56]	; (e958 <zero_loop+0x26>)

0000e91e <copy_loop>:
    e91e:	f850 3b04 	ldr.w	r3, [r0], #4
    e922:	f841 3b04 	str.w	r3, [r1], #4
    e926:	4291      	cmp	r1, r2
    e928:	dbf9      	blt.n	e91e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e92a:	480c      	ldr	r0, [pc, #48]	; (e95c <zero_loop+0x2a>)
    e92c:	490c      	ldr	r1, [pc, #48]	; (e960 <zero_loop+0x2e>)
    e92e:	f04f 0200 	mov.w	r2, #0

0000e932 <zero_loop>:
    e932:	4288      	cmp	r0, r1
    e934:	bfb8      	it	lt
    e936:	f840 2b04 	strlt.w	r2, [r0], #4
    e93a:	dbfa      	blt.n	e932 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e93c:	f7fe f85e 	bl	c9fc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e940:	be00      	bkpt	0x0000
}
    e942:	bf00      	nop
    e944:	e000ed08 	.word	0xe000ed08
    e948:	0000c000 	.word	0x0000c000
    e94c:	e000ed88 	.word	0xe000ed88
    e950:	00014c58 	.word	0x00014c58
    e954:	1000c000 	.word	0x1000c000
    e958:	1000c478 	.word	0x1000c478
    e95c:	1000c478 	.word	0x1000c478
    e960:	1001c5a4 	.word	0x1001c5a4

0000e964 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    e964:	b480      	push	{r7}
    e966:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e968:	e7fe      	b.n	e968 <NMI_Handler+0x4>

0000e96a <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    e96a:	b480      	push	{r7}
    e96c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    e96e:	e7fe      	b.n	e96e <DebugMon_Handler+0x4>

0000e970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    e970:	b480      	push	{r7}
    e972:	b083      	sub	sp, #12
    e974:	af00      	add	r7, sp, #0
    e976:	4603      	mov	r3, r0
    e978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    e97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e97e:	2b00      	cmp	r3, #0
    e980:	db0b      	blt.n	e99a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e982:	79fb      	ldrb	r3, [r7, #7]
    e984:	f003 021f 	and.w	r2, r3, #31
    e988:	4907      	ldr	r1, [pc, #28]	; (e9a8 <__NVIC_EnableIRQ+0x38>)
    e98a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e98e:	095b      	lsrs	r3, r3, #5
    e990:	2001      	movs	r0, #1
    e992:	fa00 f202 	lsl.w	r2, r0, r2
    e996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    e99a:	bf00      	nop
    e99c:	370c      	adds	r7, #12
    e99e:	46bd      	mov	sp, r7
    e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e9a4:	4770      	bx	lr
    e9a6:	bf00      	nop
    e9a8:	e000e100 	.word	0xe000e100

0000e9ac <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    e9ac:	b580      	push	{r7, lr}
    e9ae:	b082      	sub	sp, #8
    e9b0:	af00      	add	r7, sp, #0
    e9b2:	6078      	str	r0, [r7, #4]
    e9b4:	6879      	ldr	r1, [r7, #4]
    e9b6:	4803      	ldr	r0, [pc, #12]	; (e9c4 <DebugLog+0x18>)
    e9b8:	f7ff fe1a 	bl	e5f0 <am_util_stdio_printf>
    e9bc:	bf00      	nop
    e9be:	3708      	adds	r7, #8
    e9c0:	46bd      	mov	sp, r7
    e9c2:	bd80      	pop	{r7, pc}
    e9c4:	00011208 	.word	0x00011208

0000e9c8 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    e9c8:	b580      	push	{r7, lr}
    e9ca:	b082      	sub	sp, #8
    e9cc:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    e9ce:	2100      	movs	r1, #0
    e9d0:	2001      	movs	r0, #1
    e9d2:	f000 fc27 	bl	f224 <am_hal_clkgen_control>
    

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    e9d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9da:	2000      	movs	r0, #0
    e9dc:	f000 fd06 	bl	f3ec <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    e9e0:	490a      	ldr	r1, [pc, #40]	; (ea0c <timerA0_init+0x44>)
    e9e2:	2000      	movs	r0, #0
    e9e4:	f000 fca8 	bl	f338 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    e9e8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    e9ec:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    e9ee:	687b      	ldr	r3, [r7, #4]
    e9f0:	085b      	lsrs	r3, r3, #1
    e9f2:	687a      	ldr	r2, [r7, #4]
    e9f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9f8:	2000      	movs	r0, #0
    e9fa:	f000 fd0b 	bl	f414 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    e9fe:	2001      	movs	r0, #1
    ea00:	f000 fd72 	bl	f4e8 <am_hal_ctimer_int_clear>
}
    ea04:	bf00      	nop
    ea06:	3708      	adds	r7, #8
    ea08:	46bd      	mov	sp, r7
    ea0a:	bd80      	pop	{r7, pc}
    ea0c:	1000c000 	.word	0x1000c000

0000ea10 <am_app_AEP_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_AEP_sys_init(void)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b082      	sub	sp, #8
    ea14:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    ea16:	2100      	movs	r1, #0
    ea18:	2000      	movs	r0, #0
    ea1a:	f000 fc03 	bl	f224 <am_hal_clkgen_control>
    
    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    ea1e:	4837      	ldr	r0, [pc, #220]	; (eafc <am_app_AEP_sys_init+0xec>)
    ea20:	f000 fbcc 	bl	f1bc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    ea24:	f000 fbf4 	bl	f210 <am_hal_cachectrl_enable>
    
    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    ea28:	f000 faf2 	bl	f010 <am_bsp_low_power_init>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    ea2c:	4b34      	ldr	r3, [pc, #208]	; (eb00 <am_app_AEP_sys_init+0xf0>)
    ea2e:	6819      	ldr	r1, [r3, #0]
    ea30:	2010      	movs	r0, #16
    ea32:	f7fe fb8d 	bl	d150 <am_hal_gpio_pinconfig>
    
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ea36:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ea3a:	f04f 0100 	mov.w	r1, #0
    ea3e:	f7fe fe89 	bl	d754 <am_hal_gpio_interrupt_clear>
    
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ea42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ea46:	f04f 0100 	mov.w	r1, #0
    ea4a:	f7fe fe45 	bl	d6d8 <am_hal_gpio_interrupt_enable>
    
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ea4e:	2105      	movs	r1, #5
    ea50:	482c      	ldr	r0, [pc, #176]	; (eb04 <am_app_AEP_sys_init+0xf4>)
    ea52:	f7ff fea5 	bl	e7a0 <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ea56:	2300      	movs	r3, #0
    ea58:	607b      	str	r3, [r7, #4]
    ea5a:	e007      	b.n	ea6c <am_app_AEP_sys_init+0x5c>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ea5c:	687b      	ldr	r3, [r7, #4]
    ea5e:	4619      	mov	r1, r3
    ea60:	4828      	ldr	r0, [pc, #160]	; (eb04 <am_app_AEP_sys_init+0xf4>)
    ea62:	f7ff febe 	bl	e7e2 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ea66:	687b      	ldr	r3, [r7, #4]
    ea68:	3301      	adds	r3, #1
    ea6a:	607b      	str	r3, [r7, #4]
    ea6c:	687b      	ldr	r3, [r7, #4]
    ea6e:	2b04      	cmp	r3, #4
    ea70:	ddf4      	ble.n	ea5c <am_app_AEP_sys_init+0x4c>
    }
    //
    // TimerA0 init.
    //
    timerA0_init();
    ea72:	f7ff ffa9 	bl	e9c8 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    ea76:	2001      	movs	r0, #1
    ea78:	f000 fd22 	bl	f4c0 <am_hal_ctimer_int_enable>

#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)

    // Turn on PDM
    am_app_AEP_pdm_init();
    ea7c:	f000 f8e2 	bl	ec44 <am_app_AEP_pdm_init>
 
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(GPIO_IRQn);
    ea80:	200d      	movs	r0, #13
    ea82:	f7ff ff75 	bl	e970 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    ea86:	200e      	movs	r0, #14
    ea88:	f7ff ff72 	bl	e970 <__NVIC_EnableIRQ>
#endif  // AM_CMSIS_REGS

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    ea8c:	f000 fd6c 	bl	f568 <am_hal_interrupt_master_enable>
   
    //
    // Initialize the printf interface for UART output
    //
    am_bsp_uart_printf_enable();
    ea90:	f000 faf0 	bl	f074 <am_bsp_uart_printf_enable>
#endif

    //
    // Configure of burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    ea94:	481c      	ldr	r0, [pc, #112]	; (eb08 <am_app_AEP_sys_init+0xf8>)
    ea96:	f000 fb1b 	bl	f0d0 <am_hal_burst_mode_initialize>
    ea9a:	4603      	mov	r3, r0
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d10b      	bne.n	eab8 <am_app_AEP_sys_init+0xa8>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    eaa0:	4b19      	ldr	r3, [pc, #100]	; (eb08 <am_app_AEP_sys_init+0xf8>)
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d103      	bne.n	eab0 <am_app_AEP_sys_init+0xa0>
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Available\r\n");
    eaa8:	4818      	ldr	r0, [pc, #96]	; (eb0c <am_app_AEP_sys_init+0xfc>)
    eaaa:	f7ff fda1 	bl	e5f0 <am_util_stdio_printf>
    eaae:	e006      	b.n	eabe <am_app_AEP_sys_init+0xae>
        }
        else
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Not Available\r\n");
    eab0:	4817      	ldr	r0, [pc, #92]	; (eb10 <am_app_AEP_sys_init+0x100>)
    eab2:	f7ff fd9d 	bl	e5f0 <am_util_stdio_printf>
    eab6:	e002      	b.n	eabe <am_app_AEP_sys_init+0xae>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\r\n");
    eab8:	4816      	ldr	r0, [pc, #88]	; (eb14 <am_app_AEP_sys_init+0x104>)
    eaba:	f7ff fd99 	bl	e5f0 <am_util_stdio_printf>
    }

#if configUSE_BURST_ALWAYS_ON
    // Put the MCU into "Burst" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    eabe:	4816      	ldr	r0, [pc, #88]	; (eb18 <am_app_AEP_sys_init+0x108>)
    eac0:	f000 fb4e 	bl	f160 <am_hal_burst_mode_enable>
    eac4:	4603      	mov	r3, r0
    eac6:	2b00      	cmp	r3, #0
    eac8:	d107      	bne.n	eada <am_app_AEP_sys_init+0xca>
    {
        if (AM_HAL_BURST_MODE == eBurstMode)
    eaca:	4b13      	ldr	r3, [pc, #76]	; (eb18 <am_app_AEP_sys_init+0x108>)
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	2b00      	cmp	r3, #0
    ead0:	d106      	bne.n	eae0 <am_app_AEP_sys_init+0xd0>
        {
            am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n");
    ead2:	4812      	ldr	r0, [pc, #72]	; (eb1c <am_app_AEP_sys_init+0x10c>)
    ead4:	f7ff fd8c 	bl	e5f0 <am_util_stdio_printf>
    ead8:	e002      	b.n	eae0 <am_app_AEP_sys_init+0xd0>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Enable Burst Mode operation\r\n");
    eada:	4811      	ldr	r0, [pc, #68]	; (eb20 <am_app_AEP_sys_init+0x110>)
    eadc:	f7ff fd88 	bl	e5f0 <am_util_stdio_printf>
    }

#endif // configUSE_BURST_ALWAYS_ON

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    eae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eae4:	2000      	movs	r0, #0
    eae6:	f000 fc57 	bl	f398 <am_hal_ctimer_start>

    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    eaea:	2201      	movs	r2, #1
    eaec:	490d      	ldr	r1, [pc, #52]	; (eb24 <am_app_AEP_sys_init+0x114>)
    eaee:	480e      	ldr	r0, [pc, #56]	; (eb28 <am_app_AEP_sys_init+0x118>)
    eaf0:	f7ff fde6 	bl	e6c0 <am_app_utils_ring_buffer_init_all>

}
    eaf4:	bf00      	nop
    eaf6:	3708      	adds	r7, #8
    eaf8:	46bd      	mov	sp, r7
    eafa:	bd80      	pop	{r7, pc}
    eafc:	00011cf8 	.word	0x00011cf8
    eb00:	000114c4 	.word	0x000114c4
    eb04:	1000c00c 	.word	0x1000c00c
    eb08:	1000c5ad 	.word	0x1000c5ad
    eb0c:	0001121c 	.word	0x0001121c
    eb10:	00011240 	.word	0x00011240
    eb14:	00011268 	.word	0x00011268
    eb18:	1000c5ac 	.word	0x1000c5ac
    eb1c:	00011298 	.word	0x00011298
    eb20:	000112c4 	.word	0x000112c4
    eb24:	000114b8 	.word	0x000114b8
    eb28:	1001bfb0 	.word	0x1001bfb0

0000eb2c <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    eb2c:	b580      	push	{r7, lr}
    eb2e:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    eb30:	4b0f      	ldr	r3, [pc, #60]	; (eb70 <am_ctimer_isr+0x44>)
    eb32:	681b      	ldr	r3, [r3, #0]
    eb34:	3301      	adds	r3, #1
    eb36:	4a0e      	ldr	r2, [pc, #56]	; (eb70 <am_ctimer_isr+0x44>)
    eb38:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    eb3a:	4b0e      	ldr	r3, [pc, #56]	; (eb74 <am_ctimer_isr+0x48>)
    eb3c:	781b      	ldrb	r3, [r3, #0]
    eb3e:	b2db      	uxtb	r3, r3
    eb40:	2b01      	cmp	r3, #1
    eb42:	d10f      	bne.n	eb64 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    eb44:	4b0c      	ldr	r3, [pc, #48]	; (eb78 <am_ctimer_isr+0x4c>)
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	3301      	adds	r3, #1
    eb4a:	4a0b      	ldr	r2, [pc, #44]	; (eb78 <am_ctimer_isr+0x4c>)
    eb4c:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    eb4e:	4b0a      	ldr	r3, [pc, #40]	; (eb78 <am_ctimer_isr+0x4c>)
    eb50:	681b      	ldr	r3, [r3, #0]
    eb52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    eb56:	d905      	bls.n	eb64 <am_ctimer_isr+0x38>
        {
            g_sysKeyValue = AM_APP_KEY_0;
    eb58:	4b08      	ldr	r3, [pc, #32]	; (eb7c <am_ctimer_isr+0x50>)
    eb5a:	2201      	movs	r2, #1
    eb5c:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    eb5e:	4b05      	ldr	r3, [pc, #20]	; (eb74 <am_ctimer_isr+0x48>)
    eb60:	2200      	movs	r2, #0
    eb62:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    eb64:	2001      	movs	r0, #1
    eb66:	f000 fcbf 	bl	f4e8 <am_hal_ctimer_int_clear>
}
    eb6a:	bf00      	nop
    eb6c:	bd80      	pop	{r7, pc}
    eb6e:	bf00      	nop
    eb70:	1000c57c 	.word	0x1000c57c
    eb74:	1000c580 	.word	0x1000c580
    eb78:	1000c584 	.word	0x1000c584
    eb7c:	1000c588 	.word	0x1000c588

0000eb80 <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    eb80:	b580      	push	{r7, lr}
    eb82:	af00      	add	r7, sp, #0
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    eb84:	4b09      	ldr	r3, [pc, #36]	; (ebac <am_gpio_isr+0x2c>)
    eb86:	781b      	ldrb	r3, [r3, #0]
    eb88:	b2db      	uxtb	r3, r3
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d105      	bne.n	eb9a <am_gpio_isr+0x1a>
    {
        g_ui8DebounceFlag = 1;
    eb8e:	4b07      	ldr	r3, [pc, #28]	; (ebac <am_gpio_isr+0x2c>)
    eb90:	2201      	movs	r2, #1
    eb92:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    eb94:	4b06      	ldr	r3, [pc, #24]	; (ebb0 <am_gpio_isr+0x30>)
    eb96:	2200      	movs	r2, #0
    eb98:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    eb9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    eb9e:	f04f 0100 	mov.w	r1, #0
    eba2:	f7fe fdd7 	bl	d754 <am_hal_gpio_interrupt_clear>

}
    eba6:	bf00      	nop
    eba8:	bd80      	pop	{r7, pc}
    ebaa:	bf00      	nop
    ebac:	1000c580 	.word	0x1000c580
    ebb0:	1000c584 	.word	0x1000c584

0000ebb4 <__NVIC_EnableIRQ>:
{
    ebb4:	b480      	push	{r7}
    ebb6:	b083      	sub	sp, #12
    ebb8:	af00      	add	r7, sp, #0
    ebba:	4603      	mov	r3, r0
    ebbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ebbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	db0b      	blt.n	ebde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ebc6:	79fb      	ldrb	r3, [r7, #7]
    ebc8:	f003 021f 	and.w	r2, r3, #31
    ebcc:	4907      	ldr	r1, [pc, #28]	; (ebec <__NVIC_EnableIRQ+0x38>)
    ebce:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ebd2:	095b      	lsrs	r3, r3, #5
    ebd4:	2001      	movs	r0, #1
    ebd6:	fa00 f202 	lsl.w	r2, r0, r2
    ebda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebde:	bf00      	nop
    ebe0:	370c      	adds	r7, #12
    ebe2:	46bd      	mov	sp, r7
    ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebe8:	4770      	bx	lr
    ebea:	bf00      	nop
    ebec:	e000e100 	.word	0xe000e100

0000ebf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    ebf0:	b480      	push	{r7}
    ebf2:	b083      	sub	sp, #12
    ebf4:	af00      	add	r7, sp, #0
    ebf6:	4603      	mov	r3, r0
    ebf8:	6039      	str	r1, [r7, #0]
    ebfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ebfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ec00:	2b00      	cmp	r3, #0
    ec02:	db0a      	blt.n	ec1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec04:	683b      	ldr	r3, [r7, #0]
    ec06:	b2da      	uxtb	r2, r3
    ec08:	490c      	ldr	r1, [pc, #48]	; (ec3c <__NVIC_SetPriority+0x4c>)
    ec0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ec0e:	0152      	lsls	r2, r2, #5
    ec10:	b2d2      	uxtb	r2, r2
    ec12:	440b      	add	r3, r1
    ec14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    ec18:	e00a      	b.n	ec30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec1a:	683b      	ldr	r3, [r7, #0]
    ec1c:	b2da      	uxtb	r2, r3
    ec1e:	4908      	ldr	r1, [pc, #32]	; (ec40 <__NVIC_SetPriority+0x50>)
    ec20:	79fb      	ldrb	r3, [r7, #7]
    ec22:	f003 030f 	and.w	r3, r3, #15
    ec26:	3b04      	subs	r3, #4
    ec28:	0152      	lsls	r2, r2, #5
    ec2a:	b2d2      	uxtb	r2, r2
    ec2c:	440b      	add	r3, r1
    ec2e:	761a      	strb	r2, [r3, #24]
}
    ec30:	bf00      	nop
    ec32:	370c      	adds	r7, #12
    ec34:	46bd      	mov	sp, r7
    ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec3a:	4770      	bx	lr
    ec3c:	e000e100 	.word	0xe000e100
    ec40:	e000ed00 	.word	0xe000ed00

0000ec44 <am_app_AEP_pdm_init>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void am_app_AEP_pdm_init(void) 
{
    ec44:	b580      	push	{r7, lr}
    ec46:	b08a      	sub	sp, #40	; 0x28
    ec48:	af00      	add	r7, sp, #0
  //
  // Configure the necessary pins.
  //
  am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ec4a:	2300      	movs	r3, #0
    ec4c:	627b      	str	r3, [r7, #36]	; 0x24

  // ARPIT 181019
  // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
  // am_hal_gpio_pinconfig(10, sPinCfg);
  sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    ec4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ec52:	2205      	movs	r2, #5
    ec54:	f362 0302 	bfi	r3, r2, #0, #3
    ec58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(12, sPinCfg);
    ec5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ec5e:	200c      	movs	r0, #12
    ec60:	f7fe fa76 	bl	d150 <am_hal_gpio_pinconfig>

  sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    ec64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ec68:	f043 0307 	orr.w	r3, r3, #7
    ec6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(11, sPinCfg);
    ec70:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ec72:	200b      	movs	r0, #11
    ec74:	f7fe fa6c 	bl	d150 <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    ec78:	1d3b      	adds	r3, r7, #4
    ec7a:	2220      	movs	r2, #32
    ec7c:	2100      	movs	r1, #0
    ec7e:	4618      	mov	r0, r3
    ec80:	f002 fa60 	bl	11144 <memset>
    ec84:	230b      	movs	r3, #11
    ec86:	717b      	strb	r3, [r7, #5]
    ec88:	230b      	movs	r3, #11
    ec8a:	71bb      	strb	r3, [r7, #6]
    ec8c:	2318      	movs	r3, #24
    ec8e:	60bb      	str	r3, [r7, #8]
    ec90:	2304      	movs	r3, #4
    ec92:	613b      	str	r3, [r7, #16]
    ec94:	2305      	movs	r3, #5
    ec96:	753b      	strb	r3, [r7, #20]
    ec98:	2301      	movs	r3, #1
    ec9a:	763b      	strb	r3, [r7, #24]
    ec9c:	2303      	movs	r3, #3
    ec9e:	767b      	strb	r3, [r7, #25]
    eca0:	2301      	movs	r3, #1
    eca2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    };
    
//
  // Initialize, power-up, and configure the PDM.
  //
    am_hal_pdm_initialize(0, &PDMHandle);
    eca6:	491a      	ldr	r1, [pc, #104]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    eca8:	2000      	movs	r0, #0
    ecaa:	f7fd ff1b 	bl	cae4 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    ecae:	4b18      	ldr	r3, [pc, #96]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    ecb0:	681b      	ldr	r3, [r3, #0]
    ecb2:	2200      	movs	r2, #0
    ecb4:	2100      	movs	r1, #0
    ecb6:	4618      	mov	r0, r3
    ecb8:	f7fd ff72 	bl	cba0 <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    ecbc:	4b14      	ldr	r3, [pc, #80]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	1d3a      	adds	r2, r7, #4
    ecc2:	4611      	mov	r1, r2
    ecc4:	4618      	mov	r0, r3
    ecc6:	f7fd ffd3 	bl	cc70 <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    ecca:	4b11      	ldr	r3, [pc, #68]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    eccc:	681b      	ldr	r3, [r3, #0]
    ecce:	4618      	mov	r0, r3
    ecd0:	f7fe f960 	bl	cf94 <am_hal_pdm_fifo_flush>


  am_hal_pdm_enable(PDMHandle);
    ecd4:	4b0e      	ldr	r3, [pc, #56]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    ecd6:	681b      	ldr	r3, [r3, #0]
    ecd8:	4618      	mov	r0, r3
    ecda:	f7fe f8a5 	bl	ce28 <am_hal_pdm_enable>

  //
  // Configure and enable PDM interrupts (set up to trigger on DMA
  // completion).
  //
  am_hal_pdm_interrupt_enable(PDMHandle,
    ecde:	4b0c      	ldr	r3, [pc, #48]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    ece0:	681b      	ldr	r3, [r3, #0]
    ece2:	211e      	movs	r1, #30
    ece4:	4618      	mov	r0, r3
    ece6:	f7fe f97f 	bl	cfe8 <am_hal_pdm_interrupt_enable>
                              (AM_HAL_PDM_INT_DERR | AM_HAL_PDM_INT_DCMP |
                               AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF));

#if AM_CMSIS_REGS
    NVIC_SetPriority(PDM_IRQn, 4);
    ecea:	2104      	movs	r1, #4
    ecec:	2013      	movs	r0, #19
    ecee:	f7ff ff7f 	bl	ebf0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    ecf2:	2013      	movs	r0, #19
    ecf4:	f7ff ff5e 	bl	ebb4 <__NVIC_EnableIRQ>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    ecf8:	4b05      	ldr	r3, [pc, #20]	; (ed10 <am_app_AEP_pdm_init+0xcc>)
    ecfa:	681b      	ldr	r3, [r3, #0]
    ecfc:	4618      	mov	r0, r3
    ecfe:	f7fe f893 	bl	ce28 <am_hal_pdm_enable>
    pdm_trigger_dma();
    ed02:	f000 f807 	bl	ed14 <pdm_trigger_dma>

}
    ed06:	bf00      	nop
    ed08:	3728      	adds	r7, #40	; 0x28
    ed0a:	46bd      	mov	sp, r7
    ed0c:	bd80      	pop	{r7, pc}
    ed0e:	bf00      	nop
    ed10:	1001c4d8 	.word	0x1001c4d8

0000ed14 <pdm_trigger_dma>:
  // Start the data transfer.
  //
//  am_hal_pdm_dma_start(PDMHandle, &sTransfer);
//}
void pdm_trigger_dma(void)
{
    ed14:	b580      	push	{r7, lr}
    ed16:	b082      	sub	sp, #8
    ed18:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    ed1a:	4b08      	ldr	r3, [pc, #32]	; (ed3c <pdm_trigger_dma+0x28>)
    ed1c:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    ed1e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    ed22:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    ed24:	4b06      	ldr	r3, [pc, #24]	; (ed40 <pdm_trigger_dma+0x2c>)
    ed26:	681b      	ldr	r3, [r3, #0]
    ed28:	463a      	mov	r2, r7
    ed2a:	4611      	mov	r1, r2
    ed2c:	4618      	mov	r0, r3
    ed2e:	f7fe f8ad 	bl	ce8c <am_hal_pdm_dma_start>
}
    ed32:	bf00      	nop
    ed34:	3708      	adds	r7, #8
    ed36:	46bd      	mov	sp, r7
    ed38:	bd80      	pop	{r7, pc}
    ed3a:	bf00      	nop
    ed3c:	1001bfd8 	.word	0x1001bfd8
    ed40:	1001c4d8 	.word	0x1001c4d8

0000ed44 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    ed44:	b580      	push	{r7, lr}
    ed46:	b082      	sub	sp, #8
    ed48:	af00      	add	r7, sp, #0
#endif
    uint32_t ui32Status;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    ed4a:	4b13      	ldr	r3, [pc, #76]	; (ed98 <am_pdm0_isr+0x54>)
    ed4c:	681b      	ldr	r3, [r3, #0]
    ed4e:	1d39      	adds	r1, r7, #4
    ed50:	2201      	movs	r2, #1
    ed52:	4618      	mov	r0, r3
    ed54:	f7fe f9a4 	bl	d0a0 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ed58:	4b0f      	ldr	r3, [pc, #60]	; (ed98 <am_pdm0_isr+0x54>)
    ed5a:	681b      	ldr	r3, [r3, #0]
    ed5c:	687a      	ldr	r2, [r7, #4]
    ed5e:	4611      	mov	r1, r2
    ed60:	4618      	mov	r0, r3
    ed62:	f7fe f971 	bl	d048 <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ed66:	687b      	ldr	r3, [r7, #4]
    ed68:	f003 0308 	and.w	r3, r3, #8
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	d005      	beq.n	ed7c <am_pdm0_isr+0x38>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    ed70:	4b0a      	ldr	r3, [pc, #40]	; (ed9c <am_pdm0_isr+0x58>)
    ed72:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    ed76:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    ed7a:	e009      	b.n	ed90 <am_pdm0_isr+0x4c>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    ed7c:	687b      	ldr	r3, [r7, #4]
    ed7e:	f003 0306 	and.w	r3, r3, #6
    ed82:	2b00      	cmp	r3, #0
    ed84:	d004      	beq.n	ed90 <am_pdm0_isr+0x4c>
        am_hal_pdm_fifo_flush(PDMHandle);
    ed86:	4b04      	ldr	r3, [pc, #16]	; (ed98 <am_pdm0_isr+0x54>)
    ed88:	681b      	ldr	r3, [r3, #0]
    ed8a:	4618      	mov	r0, r3
    ed8c:	f7fe f902 	bl	cf94 <am_hal_pdm_fifo_flush>
}
    ed90:	bf00      	nop
    ed92:	3708      	adds	r7, #8
    ed94:	46bd      	mov	sp, r7
    ed96:	bd80      	pop	{r7, pc}
    ed98:	1001c4d8 	.word	0x1001c4d8
    ed9c:	50011000 	.word	0x50011000

0000eda0 <am_pcm_fft>:

#include "am_mikro_thd.h"


void am_pcm_fft(int16_t* time_buff, float* freq_buff, uint32_t fft_size)
{
    eda0:	b5b0      	push	{r4, r5, r7, lr}
    eda2:	b088      	sub	sp, #32
    eda4:	af00      	add	r7, sp, #0
    eda6:	60f8      	str	r0, [r7, #12]
    eda8:	60b9      	str	r1, [r7, #8]
    edaa:	607a      	str	r2, [r7, #4]
    edac:	466b      	mov	r3, sp
    edae:	461d      	mov	r5, r3
    float f_time_sequence[fft_size*2];
    edb0:	687b      	ldr	r3, [r7, #4]
    edb2:	0058      	lsls	r0, r3, #1
    edb4:	4603      	mov	r3, r0
    edb6:	3b01      	subs	r3, #1
    edb8:	617b      	str	r3, [r7, #20]
    edba:	4601      	mov	r1, r0
    edbc:	f04f 0200 	mov.w	r2, #0
    edc0:	f04f 0300 	mov.w	r3, #0
    edc4:	f04f 0400 	mov.w	r4, #0
    edc8:	0154      	lsls	r4, r2, #5
    edca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    edce:	014b      	lsls	r3, r1, #5
    edd0:	4601      	mov	r1, r0
    edd2:	f04f 0200 	mov.w	r2, #0
    edd6:	f04f 0300 	mov.w	r3, #0
    edda:	f04f 0400 	mov.w	r4, #0
    edde:	0154      	lsls	r4, r2, #5
    ede0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    ede4:	014b      	lsls	r3, r1, #5
    ede6:	0083      	lsls	r3, r0, #2
    ede8:	3303      	adds	r3, #3
    edea:	3307      	adds	r3, #7
    edec:	08db      	lsrs	r3, r3, #3
    edee:	00db      	lsls	r3, r3, #3
    edf0:	ebad 0d03 	sub.w	sp, sp, r3
    edf4:	466b      	mov	r3, sp
    edf6:	3303      	adds	r3, #3
    edf8:	089b      	lsrs	r3, r3, #2
    edfa:	009b      	lsls	r3, r3, #2
    edfc:	613b      	str	r3, [r7, #16]
    //
#if configUSE_DATA_VERBOSE
//    am_util_stdio_printf("The input data of time domain:\n\r");
#endif // configUSE_DATA_VERBOSE

    for (uint32_t i = 0; i < fft_size; i++)
    edfe:	2300      	movs	r3, #0
    ee00:	61bb      	str	r3, [r7, #24]
    ee02:	e021      	b.n	ee48 <am_pcm_fft+0xa8>

#if configUSE_DATA_VERBOSE
//        am_util_stdio_printf("%d\n\r", time_buff[i]);
#endif // configUSE_DATA_VERBOSE

        f_time_sequence[2*i] = time_buff[i] / 1.0;
    ee04:	69bb      	ldr	r3, [r7, #24]
    ee06:	005b      	lsls	r3, r3, #1
    ee08:	68fa      	ldr	r2, [r7, #12]
    ee0a:	4413      	add	r3, r2
    ee0c:	f9b3 3000 	ldrsh.w	r3, [r3]
    ee10:	4618      	mov	r0, r3
    ee12:	f7fd fb27 	bl	c464 <__aeabi_i2d>
    ee16:	460a      	mov	r2, r1
    ee18:	4601      	mov	r1, r0
    ee1a:	69bb      	ldr	r3, [r7, #24]
    ee1c:	005c      	lsls	r4, r3, #1
    ee1e:	4608      	mov	r0, r1
    ee20:	4611      	mov	r1, r2
    ee22:	f7fd fd9b 	bl	c95c <__aeabi_d2f>
    ee26:	4601      	mov	r1, r0
    ee28:	693a      	ldr	r2, [r7, #16]
    ee2a:	00a3      	lsls	r3, r4, #2
    ee2c:	4413      	add	r3, r2
    ee2e:	6019      	str	r1, [r3, #0]
        f_time_sequence[2*i+1] = 0.0;
    ee30:	69bb      	ldr	r3, [r7, #24]
    ee32:	005b      	lsls	r3, r3, #1
    ee34:	3301      	adds	r3, #1
    ee36:	693a      	ldr	r2, [r7, #16]
    ee38:	009b      	lsls	r3, r3, #2
    ee3a:	4413      	add	r3, r2
    ee3c:	f04f 0200 	mov.w	r2, #0
    ee40:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < fft_size; i++)
    ee42:	69bb      	ldr	r3, [r7, #24]
    ee44:	3301      	adds	r3, #1
    ee46:	61bb      	str	r3, [r7, #24]
    ee48:	69ba      	ldr	r2, [r7, #24]
    ee4a:	687b      	ldr	r3, [r7, #4]
    ee4c:	429a      	cmp	r2, r3
    ee4e:	d3d9      	bcc.n	ee04 <am_pcm_fft+0x64>
//        am_util_stdio_printf("END\n\r");
#endif // configUSE_DATA_VERBOSE
    //
    // Perform the FFT.
    //
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, f_time_sequence, 0, 1);
    ee50:	6939      	ldr	r1, [r7, #16]
    ee52:	2301      	movs	r3, #1
    ee54:	2200      	movs	r2, #0
    ee56:	480c      	ldr	r0, [pc, #48]	; (ee88 <am_pcm_fft+0xe8>)
    ee58:	f001 fcbe 	bl	107d8 <arm_cfft_f32>
    arm_cmplx_mag_f32(f_time_sequence, freq_buff, fft_size);
    ee5c:	693b      	ldr	r3, [r7, #16]
    ee5e:	687a      	ldr	r2, [r7, #4]
    ee60:	68b9      	ldr	r1, [r7, #8]
    ee62:	4618      	mov	r0, r3
    ee64:	f001 fd32 	bl	108cc <arm_cmplx_mag_f32>

#if configUSE_DATA_VERBOSE
//    am_util_stdio_printf("FFT result:\r\n");
    for (uint32_t i = 0; i < fft_size/2; i++)
    ee68:	2300      	movs	r3, #0
    ee6a:	61fb      	str	r3, [r7, #28]
    ee6c:	e002      	b.n	ee74 <am_pcm_fft+0xd4>
    ee6e:	69fb      	ldr	r3, [r7, #28]
    ee70:	3301      	adds	r3, #1
    ee72:	61fb      	str	r3, [r7, #28]
    ee74:	687b      	ldr	r3, [r7, #4]
    ee76:	085b      	lsrs	r3, r3, #1
    ee78:	69fa      	ldr	r2, [r7, #28]
    ee7a:	429a      	cmp	r2, r3
    ee7c:	d3f7      	bcc.n	ee6e <am_pcm_fft+0xce>
    ee7e:	46ad      	mov	sp, r5
    }

//     am_util_stdio_printf("END\n\r");
#endif // configUSE_DATA_VERBOSE

}
    ee80:	bf00      	nop
    ee82:	3720      	adds	r7, #32
    ee84:	46bd      	mov	sp, r7
    ee86:	bdb0      	pop	{r4, r5, r7, pc}
    ee88:	00011e30 	.word	0x00011e30

0000ee8c <am_thd_calc>:

float am_thd_calc(uint32_t base_freq_indx, float* freq_magnitude_buff, uint32_t fft_size, uint32_t sample_freq)
{
    ee8c:	b590      	push	{r4, r7, lr}
    ee8e:	b08d      	sub	sp, #52	; 0x34
    ee90:	af00      	add	r7, sp, #0
    ee92:	60f8      	str	r0, [r7, #12]
    ee94:	60b9      	str	r1, [r7, #8]
    ee96:	607a      	str	r2, [r7, #4]
    ee98:	603b      	str	r3, [r7, #0]
    float32_t fFrequencyUnits = 0;
    ee9a:	f04f 0300 	mov.w	r3, #0
    ee9e:	61fb      	str	r3, [r7, #28]
    float32_t fBaseFrequency = 0;
    eea0:	f04f 0300 	mov.w	r3, #0
    eea4:	61bb      	str	r3, [r7, #24]
    float64_t fMagnitudeSum = 0;
    eea6:	f04f 0300 	mov.w	r3, #0
    eeaa:	f04f 0400 	mov.w	r4, #0
    eeae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    float32_t fTHDRet = 0;
    eeb2:	f04f 0300 	mov.w	r3, #0
    eeb6:	617b      	str	r3, [r7, #20]
    uint32_t index = 0;
    eeb8:	2300      	movs	r3, #0
    eeba:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32FreqIndxLimit = 0;
    eebc:	2300      	movs	r3, #0
    eebe:	623b      	str	r3, [r7, #32]

    if(fft_size%2)
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	f003 0301 	and.w	r3, r3, #1
    eec6:	2b00      	cmp	r3, #0
    eec8:	d005      	beq.n	eed6 <am_thd_calc+0x4a>
        ui32FreqIndxLimit = (fft_size-1)/2 + 1;
    eeca:	687b      	ldr	r3, [r7, #4]
    eecc:	3b01      	subs	r3, #1
    eece:	085b      	lsrs	r3, r3, #1
    eed0:	3301      	adds	r3, #1
    eed2:	623b      	str	r3, [r7, #32]
    eed4:	e003      	b.n	eede <am_thd_calc+0x52>
    else
        ui32FreqIndxLimit = fft_size/2 + 1;
    eed6:	687b      	ldr	r3, [r7, #4]
    eed8:	085b      	lsrs	r3, r3, #1
    eeda:	3301      	adds	r3, #1
    eedc:	623b      	str	r3, [r7, #32]

    if(base_freq_indx > ui32FreqIndxLimit)
    eede:	68fa      	ldr	r2, [r7, #12]
    eee0:	6a3b      	ldr	r3, [r7, #32]
    eee2:	429a      	cmp	r2, r3
    eee4:	d904      	bls.n	eef0 <am_thd_calc+0x64>
    {
        am_util_stdio_printf("The target frequency is out of sample frequency limit! \r\n");
    eee6:	4835      	ldr	r0, [pc, #212]	; (efbc <am_thd_calc+0x130>)
    eee8:	f7ff fb82 	bl	e5f0 <am_util_stdio_printf>
        return -1;
    eeec:	4b34      	ldr	r3, [pc, #208]	; (efc0 <am_thd_calc+0x134>)
    eeee:	e05d      	b.n	efac <am_thd_calc+0x120>
    }

    fFrequencyUnits = (float)sample_freq / (float) fft_size;
    eef0:	683b      	ldr	r3, [r7, #0]
    eef2:	ee07 3a90 	vmov	s15, r3
    eef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
    eefa:	687b      	ldr	r3, [r7, #4]
    eefc:	ee07 3a90 	vmov	s15, r3
    ef00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    ef04:	eec6 7a87 	vdiv.f32	s15, s13, s14
    ef08:	edc7 7a07 	vstr	s15, [r7, #28]
#if configUSE_DATA_VERBOSE
    fBaseFrequency = base_freq_indx * fFrequencyUnits;
    ef0c:	68fb      	ldr	r3, [r7, #12]
    ef0e:	ee07 3a90 	vmov	s15, r3
    ef12:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ef16:	ed97 7a07 	vldr	s14, [r7, #28]
    ef1a:	ee67 7a27 	vmul.f32	s15, s14, s15
    ef1e:	edc7 7a06 	vstr	s15, [r7, #24]
    am_util_stdio_printf("THD base frequency is %f. \r\n", fBaseFrequency);
    ef22:	69b8      	ldr	r0, [r7, #24]
    ef24:	f7fd fab0 	bl	c488 <__aeabi_f2d>
    ef28:	4603      	mov	r3, r0
    ef2a:	460c      	mov	r4, r1
    ef2c:	461a      	mov	r2, r3
    ef2e:	4623      	mov	r3, r4
    ef30:	4824      	ldr	r0, [pc, #144]	; (efc4 <am_thd_calc+0x138>)
    ef32:	f7ff fb5d 	bl	e5f0 <am_util_stdio_printf>
#endif // configUSE_DATA_VERBOSE
    for(index=0; index< ui32FreqIndxLimit; index++)
    ef36:	2300      	movs	r3, #0
    ef38:	627b      	str	r3, [r7, #36]	; 0x24
    ef3a:	e01a      	b.n	ef72 <am_thd_calc+0xe6>
    {
        if(index != base_freq_indx)
    ef3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ef3e:	68fb      	ldr	r3, [r7, #12]
    ef40:	429a      	cmp	r2, r3
    ef42:	d013      	beq.n	ef6c <am_thd_calc+0xe0>
            fMagnitudeSum += freq_magnitude_buff[index];
    ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef46:	009b      	lsls	r3, r3, #2
    ef48:	68ba      	ldr	r2, [r7, #8]
    ef4a:	4413      	add	r3, r2
    ef4c:	681b      	ldr	r3, [r3, #0]
    ef4e:	4618      	mov	r0, r3
    ef50:	f7fd fa9a 	bl	c488 <__aeabi_f2d>
    ef54:	4603      	mov	r3, r0
    ef56:	460c      	mov	r4, r1
    ef58:	461a      	mov	r2, r3
    ef5a:	4623      	mov	r3, r4
    ef5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    ef60:	f7fd f934 	bl	c1cc <__adddf3>
    ef64:	4603      	mov	r3, r0
    ef66:	460c      	mov	r4, r1
    ef68:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    for(index=0; index< ui32FreqIndxLimit; index++)
    ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef6e:	3301      	adds	r3, #1
    ef70:	627b      	str	r3, [r7, #36]	; 0x24
    ef72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ef74:	6a3b      	ldr	r3, [r7, #32]
    ef76:	429a      	cmp	r2, r3
    ef78:	d3e0      	bcc.n	ef3c <am_thd_calc+0xb0>
    }
    
    fTHDRet = fMagnitudeSum / freq_magnitude_buff[base_freq_indx];
    ef7a:	68fb      	ldr	r3, [r7, #12]
    ef7c:	009b      	lsls	r3, r3, #2
    ef7e:	68ba      	ldr	r2, [r7, #8]
    ef80:	4413      	add	r3, r2
    ef82:	681b      	ldr	r3, [r3, #0]
    ef84:	4618      	mov	r0, r3
    ef86:	f7fd fa7f 	bl	c488 <__aeabi_f2d>
    ef8a:	4603      	mov	r3, r0
    ef8c:	460c      	mov	r4, r1
    ef8e:	461a      	mov	r2, r3
    ef90:	4623      	mov	r3, r4
    ef92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    ef96:	f7fd fbf9 	bl	c78c <__aeabi_ddiv>
    ef9a:	4603      	mov	r3, r0
    ef9c:	460c      	mov	r4, r1
    ef9e:	4618      	mov	r0, r3
    efa0:	4621      	mov	r1, r4
    efa2:	f7fd fcdb 	bl	c95c <__aeabi_d2f>
    efa6:	4603      	mov	r3, r0
    efa8:	617b      	str	r3, [r7, #20]

    return fTHDRet;
    efaa:	697b      	ldr	r3, [r7, #20]
    efac:	ee07 3a90 	vmov	s15, r3

}
    efb0:	eeb0 0a67 	vmov.f32	s0, s15
    efb4:	3734      	adds	r7, #52	; 0x34
    efb6:	46bd      	mov	sp, r7
    efb8:	bd90      	pop	{r4, r7, pc}
    efba:	bf00      	nop
    efbc:	000112ec 	.word	0x000112ec
    efc0:	bf800000 	.word	0xbf800000
    efc4:	00011328 	.word	0x00011328

0000efc8 <am_bsp_uart_string_print>:
    efc8:	b510      	push	{r4, lr}
    efca:	b086      	sub	sp, #24
    efcc:	7803      	ldrb	r3, [r0, #0]
    efce:	2400      	movs	r4, #0
    efd0:	9400      	str	r4, [sp, #0]
    efd2:	b1bb      	cbz	r3, f004 <am_bsp_uart_string_print+0x3c>
    efd4:	4603      	mov	r3, r0
    efd6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    efda:	3401      	adds	r4, #1
    efdc:	2a00      	cmp	r2, #0
    efde:	d1fa      	bne.n	efd6 <am_bsp_uart_string_print+0xe>
    efe0:	4b0a      	ldr	r3, [pc, #40]	; (f00c <am_bsp_uart_string_print+0x44>)
    efe2:	9002      	str	r0, [sp, #8]
    efe4:	2200      	movs	r2, #0
    efe6:	6818      	ldr	r0, [r3, #0]
    efe8:	9403      	str	r4, [sp, #12]
    efea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efee:	a901      	add	r1, sp, #4
    eff0:	9304      	str	r3, [sp, #16]
    eff2:	9201      	str	r2, [sp, #4]
    eff4:	f8cd d014 	str.w	sp, [sp, #20]
    eff8:	f000 fe0a 	bl	fc10 <am_hal_uart_transfer>
    effc:	9b00      	ldr	r3, [sp, #0]
    effe:	42a3      	cmp	r3, r4
    f000:	d002      	beq.n	f008 <am_bsp_uart_string_print+0x40>
    f002:	e7fe      	b.n	f002 <am_bsp_uart_string_print+0x3a>
    f004:	461c      	mov	r4, r3
    f006:	e7eb      	b.n	efe0 <am_bsp_uart_string_print+0x18>
    f008:	b006      	add	sp, #24
    f00a:	bd10      	pop	{r4, pc}
    f00c:	1000c590 	.word	0x1000c590

0000f010 <am_bsp_low_power_init>:
    f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f012:	f000 fab5 	bl	f580 <am_hal_itm_disable>
    f016:	2000      	movs	r0, #0
    f018:	f7fe fc5a 	bl	d8d0 <am_util_stdio_printf_init>
    f01c:	4b12      	ldr	r3, [pc, #72]	; (f068 <am_bsp_low_power_init+0x58>)
    f01e:	4f13      	ldr	r7, [pc, #76]	; (f06c <am_bsp_low_power_init+0x5c>)
    f020:	6819      	ldr	r1, [r3, #0]
    f022:	2029      	movs	r0, #41	; 0x29
    f024:	f7fe f894 	bl	d150 <am_hal_gpio_pinconfig>
    f028:	f000 fbec 	bl	f804 <am_hal_pwrctrl_low_power_init>
    f02c:	2001      	movs	r0, #1
    f02e:	f000 fc33 	bl	f898 <am_hal_rtc_osc_select>
    f032:	2100      	movs	r1, #0
    f034:	2003      	movs	r0, #3
    f036:	f000 f8f5 	bl	f224 <am_hal_clkgen_control>
    f03a:	f000 fc39 	bl	f8b0 <am_hal_rtc_osc_disable>
    f03e:	4b0c      	ldr	r3, [pc, #48]	; (f070 <am_bsp_low_power_init+0x60>)
    f040:	681e      	ldr	r6, [r3, #0]
    f042:	2400      	movs	r4, #0
    f044:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f048:	4631      	mov	r1, r6
    f04a:	4628      	mov	r0, r5
    f04c:	f7fe f880 	bl	d150 <am_hal_gpio_pinconfig>
    f050:	2103      	movs	r1, #3
    f052:	4628      	mov	r0, r5
    f054:	f7fe fabc 	bl	d5d0 <am_hal_gpio_state_write>
    f058:	3401      	adds	r4, #1
    f05a:	4628      	mov	r0, r5
    f05c:	2100      	movs	r1, #0
    f05e:	f7fe fab7 	bl	d5d0 <am_hal_gpio_state_write>
    f062:	2c05      	cmp	r4, #5
    f064:	d1ee      	bne.n	f044 <am_bsp_low_power_init+0x34>
    f066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f068:	00011348 	.word	0x00011348
    f06c:	1000c00c 	.word	0x1000c00c
    f070:	0001134c 	.word	0x0001134c

0000f074 <am_bsp_uart_printf_enable>:
    f074:	b510      	push	{r4, lr}
    f076:	4c10      	ldr	r4, [pc, #64]	; (f0b8 <am_bsp_uart_printf_enable+0x44>)
    f078:	4b10      	ldr	r3, [pc, #64]	; (f0bc <am_bsp_uart_printf_enable+0x48>)
    f07a:	4621      	mov	r1, r4
    f07c:	2202      	movs	r2, #2
    f07e:	2000      	movs	r0, #0
    f080:	601a      	str	r2, [r3, #0]
    f082:	f000 fc1f 	bl	f8c4 <am_hal_uart_initialize>
    f086:	2200      	movs	r2, #0
    f088:	4611      	mov	r1, r2
    f08a:	6820      	ldr	r0, [r4, #0]
    f08c:	f000 fc42 	bl	f914 <am_hal_uart_power_control>
    f090:	6820      	ldr	r0, [r4, #0]
    f092:	490b      	ldr	r1, [pc, #44]	; (f0c0 <am_bsp_uart_printf_enable+0x4c>)
    f094:	f000 fcb0 	bl	f9f8 <am_hal_uart_configure>
    f098:	4b0a      	ldr	r3, [pc, #40]	; (f0c4 <am_bsp_uart_printf_enable+0x50>)
    f09a:	2016      	movs	r0, #22
    f09c:	6819      	ldr	r1, [r3, #0]
    f09e:	f7fe f857 	bl	d150 <am_hal_gpio_pinconfig>
    f0a2:	4b09      	ldr	r3, [pc, #36]	; (f0c8 <am_bsp_uart_printf_enable+0x54>)
    f0a4:	2017      	movs	r0, #23
    f0a6:	6819      	ldr	r1, [r3, #0]
    f0a8:	f7fe f852 	bl	d150 <am_hal_gpio_pinconfig>
    f0ac:	4807      	ldr	r0, [pc, #28]	; (f0cc <am_bsp_uart_printf_enable+0x58>)
    f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0b2:	f7fe bc0d 	b.w	d8d0 <am_util_stdio_printf_init>
    f0b6:	bf00      	nop
    f0b8:	1000c590 	.word	0x1000c590
    f0bc:	1000c58c 	.word	0x1000c58c
    f0c0:	00011cc8 	.word	0x00011cc8
    f0c4:	00011cf0 	.word	0x00011cf0
    f0c8:	00011cf4 	.word	0x00011cf4
    f0cc:	0000efc9 	.word	0x0000efc9

0000f0d0 <am_hal_burst_mode_initialize>:
    f0d0:	b570      	push	{r4, r5, r6, lr}
    f0d2:	4b1e      	ldr	r3, [pc, #120]	; (f14c <am_hal_burst_mode_initialize+0x7c>)
    f0d4:	695a      	ldr	r2, [r3, #20]
    f0d6:	07d5      	lsls	r5, r2, #31
    f0d8:	b082      	sub	sp, #8
    f0da:	4604      	mov	r4, r0
    f0dc:	d407      	bmi.n	f0ee <am_hal_burst_mode_initialize+0x1e>
    f0de:	4a1c      	ldr	r2, [pc, #112]	; (f150 <am_hal_burst_mode_initialize+0x80>)
    f0e0:	2100      	movs	r1, #0
    f0e2:	2301      	movs	r3, #1
    f0e4:	7011      	strb	r1, [r2, #0]
    f0e6:	2007      	movs	r0, #7
    f0e8:	7023      	strb	r3, [r4, #0]
    f0ea:	b002      	add	sp, #8
    f0ec:	bd70      	pop	{r4, r5, r6, pc}
    f0ee:	4a19      	ldr	r2, [pc, #100]	; (f154 <am_hal_burst_mode_initialize+0x84>)
    f0f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f0f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f0f6:	6291      	str	r1, [r2, #40]	; 0x28
    f0f8:	6812      	ldr	r2, [r2, #0]
    f0fa:	07d0      	lsls	r0, r2, #31
    f0fc:	d507      	bpl.n	f10e <am_hal_burst_mode_initialize+0x3e>
    f0fe:	68db      	ldr	r3, [r3, #12]
    f100:	b2db      	uxtb	r3, r3
    f102:	2b11      	cmp	r3, #17
    f104:	d903      	bls.n	f10e <am_hal_burst_mode_initialize+0x3e>
    f106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f10a:	4a13      	ldr	r2, [pc, #76]	; (f158 <am_hal_burst_mode_initialize+0x88>)
    f10c:	63da      	str	r2, [r3, #60]	; 0x3c
    f10e:	4d0f      	ldr	r5, [pc, #60]	; (f14c <am_hal_burst_mode_initialize+0x7c>)
    f110:	4912      	ldr	r1, [pc, #72]	; (f15c <am_hal_burst_mode_initialize+0x8c>)
    f112:	7e2a      	ldrb	r2, [r5, #24]
    f114:	2601      	movs	r6, #1
    f116:	f042 0210 	orr.w	r2, r2, #16
    f11a:	2320      	movs	r3, #32
    f11c:	762a      	strb	r2, [r5, #24]
    f11e:	f242 7010 	movw	r0, #10000	; 0x2710
    f122:	461a      	mov	r2, r3
    f124:	9600      	str	r6, [sp, #0]
    f126:	f000 f9f3 	bl	f510 <am_hal_flash_delay_status_check>
    f12a:	b948      	cbnz	r0, f140 <am_hal_burst_mode_initialize+0x70>
    f12c:	69aa      	ldr	r2, [r5, #24]
    f12e:	0651      	lsls	r1, r2, #25
    f130:	d5d5      	bpl.n	f0de <am_hal_burst_mode_initialize+0xe>
    f132:	69aa      	ldr	r2, [r5, #24]
    f134:	0692      	lsls	r2, r2, #26
    f136:	d5d2      	bpl.n	f0de <am_hal_burst_mode_initialize+0xe>
    f138:	4a05      	ldr	r2, [pc, #20]	; (f150 <am_hal_burst_mode_initialize+0x80>)
    f13a:	7016      	strb	r6, [r2, #0]
    f13c:	7020      	strb	r0, [r4, #0]
    f13e:	e7d4      	b.n	f0ea <am_hal_burst_mode_initialize+0x1a>
    f140:	4a03      	ldr	r2, [pc, #12]	; (f150 <am_hal_burst_mode_initialize+0x80>)
    f142:	2100      	movs	r1, #0
    f144:	7011      	strb	r1, [r2, #0]
    f146:	7026      	strb	r6, [r4, #0]
    f148:	b002      	add	sp, #8
    f14a:	bd70      	pop	{r4, r5, r6, pc}
    f14c:	40020000 	.word	0x40020000
    f150:	1000c594 	.word	0x1000c594
    f154:	40021000 	.word	0x40021000
    f158:	0fc0400f 	.word	0x0fc0400f
    f15c:	40020018 	.word	0x40020018

0000f160 <am_hal_burst_mode_enable>:
    f160:	4b14      	ldr	r3, [pc, #80]	; (f1b4 <am_hal_burst_mode_enable+0x54>)
    f162:	781b      	ldrb	r3, [r3, #0]
    f164:	b91b      	cbnz	r3, f16e <am_hal_burst_mode_enable+0xe>
    f166:	2301      	movs	r3, #1
    f168:	7003      	strb	r3, [r0, #0]
    f16a:	2007      	movs	r0, #7
    f16c:	4770      	bx	lr
    f16e:	b570      	push	{r4, r5, r6, lr}
    f170:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f174:	b082      	sub	sp, #8
    f176:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f17a:	490f      	ldr	r1, [pc, #60]	; (f1b8 <am_hal_burst_mode_enable+0x58>)
    f17c:	2601      	movs	r6, #1
    f17e:	4332      	orrs	r2, r6
    f180:	2304      	movs	r3, #4
    f182:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f186:	4604      	mov	r4, r0
    f188:	461a      	mov	r2, r3
    f18a:	9600      	str	r6, [sp, #0]
    f18c:	f242 7010 	movw	r0, #10000	; 0x2710
    f190:	f000 f9be 	bl	f510 <am_hal_flash_delay_status_check>
    f194:	b938      	cbnz	r0, f1a6 <am_hal_burst_mode_enable+0x46>
    f196:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f198:	079a      	lsls	r2, r3, #30
    f19a:	d507      	bpl.n	f1ac <am_hal_burst_mode_enable+0x4c>
    f19c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f19e:	075b      	lsls	r3, r3, #29
    f1a0:	d501      	bpl.n	f1a6 <am_hal_burst_mode_enable+0x46>
    f1a2:	7020      	strb	r0, [r4, #0]
    f1a4:	e000      	b.n	f1a8 <am_hal_burst_mode_enable+0x48>
    f1a6:	7026      	strb	r6, [r4, #0]
    f1a8:	b002      	add	sp, #8
    f1aa:	bd70      	pop	{r4, r5, r6, pc}
    f1ac:	7026      	strb	r6, [r4, #0]
    f1ae:	4630      	mov	r0, r6
    f1b0:	e7fa      	b.n	f1a8 <am_hal_burst_mode_enable+0x48>
    f1b2:	bf00      	nop
    f1b4:	1000c594 	.word	0x1000c594
    f1b8:	40004034 	.word	0x40004034

0000f1bc <am_hal_cachectrl_config>:
    f1bc:	b530      	push	{r4, r5, lr}
    f1be:	b083      	sub	sp, #12
    f1c0:	4605      	mov	r5, r0
    f1c2:	f000 f9d5 	bl	f570 <am_hal_interrupt_master_disable>
    f1c6:	4c11      	ldr	r4, [pc, #68]	; (f20c <am_hal_cachectrl_config+0x50>)
    f1c8:	9001      	str	r0, [sp, #4]
    f1ca:	6823      	ldr	r3, [r4, #0]
    f1cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f1d0:	6023      	str	r3, [r4, #0]
    f1d2:	9801      	ldr	r0, [sp, #4]
    f1d4:	f000 f9d0 	bl	f578 <am_hal_interrupt_master_set>
    f1d8:	78eb      	ldrb	r3, [r5, #3]
    f1da:	782a      	ldrb	r2, [r5, #0]
    f1dc:	78a8      	ldrb	r0, [r5, #2]
    f1de:	7869      	ldrb	r1, [r5, #1]
    f1e0:	005b      	lsls	r3, r3, #1
    f1e2:	0112      	lsls	r2, r2, #4
    f1e4:	b2d2      	uxtb	r2, r2
    f1e6:	f003 0302 	and.w	r3, r3, #2
    f1ea:	4313      	orrs	r3, r2
    f1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f1f0:	0080      	lsls	r0, r0, #2
    f1f2:	f000 000c 	and.w	r0, r0, #12
    f1f6:	020a      	lsls	r2, r1, #8
    f1f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f1fc:	4303      	orrs	r3, r0
    f1fe:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f202:	4313      	orrs	r3, r2
    f204:	2000      	movs	r0, #0
    f206:	6023      	str	r3, [r4, #0]
    f208:	b003      	add	sp, #12
    f20a:	bd30      	pop	{r4, r5, pc}
    f20c:	40018000 	.word	0x40018000

0000f210 <am_hal_cachectrl_enable>:
    f210:	4a03      	ldr	r2, [pc, #12]	; (f220 <am_hal_cachectrl_enable+0x10>)
    f212:	6813      	ldr	r3, [r2, #0]
    f214:	f043 0301 	orr.w	r3, r3, #1
    f218:	6013      	str	r3, [r2, #0]
    f21a:	2000      	movs	r0, #0
    f21c:	4770      	bx	lr
    f21e:	bf00      	nop
    f220:	40018000 	.word	0x40018000

0000f224 <am_hal_clkgen_control>:
    f224:	4b32      	ldr	r3, [pc, #200]	; (f2f0 <am_hal_clkgen_control+0xcc>)
    f226:	681a      	ldr	r2, [r3, #0]
    f228:	b912      	cbnz	r2, f230 <am_hal_clkgen_control+0xc>
    f22a:	4a32      	ldr	r2, [pc, #200]	; (f2f4 <am_hal_clkgen_control+0xd0>)
    f22c:	6812      	ldr	r2, [r2, #0]
    f22e:	601a      	str	r2, [r3, #0]
    f230:	2809      	cmp	r0, #9
    f232:	d85a      	bhi.n	f2ea <am_hal_clkgen_control+0xc6>
    f234:	e8df f000 	tbb	[pc, r0]
    f238:	261e160d 	.word	0x261e160d
    f23c:	4640362e 	.word	0x4640362e
    f240:	054e      	.short	0x054e
    f242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f246:	2000      	movs	r0, #0
    f248:	6a1a      	ldr	r2, [r3, #32]
    f24a:	f36f 0200 	bfc	r2, #0, #1
    f24e:	621a      	str	r2, [r3, #32]
    f250:	4770      	bx	lr
    f252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f256:	2200      	movs	r2, #0
    f258:	2147      	movs	r1, #71	; 0x47
    f25a:	6159      	str	r1, [r3, #20]
    f25c:	4610      	mov	r0, r2
    f25e:	619a      	str	r2, [r3, #24]
    f260:	615a      	str	r2, [r3, #20]
    f262:	4770      	bx	lr
    f264:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f268:	2000      	movs	r0, #0
    f26a:	68d3      	ldr	r3, [r2, #12]
    f26c:	f023 0301 	bic.w	r3, r3, #1
    f270:	60d3      	str	r3, [r2, #12]
    f272:	4770      	bx	lr
    f274:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f278:	2000      	movs	r0, #0
    f27a:	68d3      	ldr	r3, [r2, #12]
    f27c:	f023 0302 	bic.w	r3, r3, #2
    f280:	60d3      	str	r3, [r2, #12]
    f282:	4770      	bx	lr
    f284:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f288:	2000      	movs	r0, #0
    f28a:	68d3      	ldr	r3, [r2, #12]
    f28c:	f043 0301 	orr.w	r3, r3, #1
    f290:	60d3      	str	r3, [r2, #12]
    f292:	4770      	bx	lr
    f294:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f298:	2000      	movs	r0, #0
    f29a:	68d3      	ldr	r3, [r2, #12]
    f29c:	f043 0302 	orr.w	r3, r3, #2
    f2a0:	60d3      	str	r3, [r2, #12]
    f2a2:	4770      	bx	lr
    f2a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f2a8:	2200      	movs	r2, #0
    f2aa:	2047      	movs	r0, #71	; 0x47
    f2ac:	2101      	movs	r1, #1
    f2ae:	6158      	str	r0, [r3, #20]
    f2b0:	6199      	str	r1, [r3, #24]
    f2b2:	4610      	mov	r0, r2
    f2b4:	615a      	str	r2, [r3, #20]
    f2b6:	4770      	bx	lr
    f2b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f2bc:	2000      	movs	r0, #0
    f2be:	68da      	ldr	r2, [r3, #12]
    f2c0:	60da      	str	r2, [r3, #12]
    f2c2:	4770      	bx	lr
    f2c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f2c8:	2000      	movs	r0, #0
    f2ca:	68d3      	ldr	r3, [r2, #12]
    f2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f2d0:	60d3      	str	r3, [r2, #12]
    f2d2:	4770      	bx	lr
    f2d4:	b139      	cbz	r1, f2e6 <am_hal_clkgen_control+0xc2>
    f2d6:	680b      	ldr	r3, [r1, #0]
    f2d8:	f043 0301 	orr.w	r3, r3, #1
    f2dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f2e0:	2000      	movs	r0, #0
    f2e2:	6213      	str	r3, [r2, #32]
    f2e4:	4770      	bx	lr
    f2e6:	4b04      	ldr	r3, [pc, #16]	; (f2f8 <am_hal_clkgen_control+0xd4>)
    f2e8:	e7f8      	b.n	f2dc <am_hal_clkgen_control+0xb8>
    f2ea:	2006      	movs	r0, #6
    f2ec:	4770      	bx	lr
    f2ee:	bf00      	nop
    f2f0:	1000c598 	.word	0x1000c598
    f2f4:	4ffff000 	.word	0x4ffff000
    f2f8:	0025b801 	.word	0x0025b801

0000f2fc <am_hal_clkgen_status_get>:
    f2fc:	b1a8      	cbz	r0, f32a <am_hal_clkgen_status_get+0x2e>
    f2fe:	b410      	push	{r4}
    f300:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f304:	490a      	ldr	r1, [pc, #40]	; (f330 <am_hal_clkgen_status_get+0x34>)
    f306:	6994      	ldr	r4, [r2, #24]
    f308:	4b0a      	ldr	r3, [pc, #40]	; (f334 <am_hal_clkgen_status_get+0x38>)
    f30a:	f014 0f01 	tst.w	r4, #1
    f30e:	bf08      	it	eq
    f310:	460b      	moveq	r3, r1
    f312:	6003      	str	r3, [r0, #0]
    f314:	69d3      	ldr	r3, [r2, #28]
    f316:	f85d 4b04 	ldr.w	r4, [sp], #4
    f31a:	f003 0201 	and.w	r2, r3, #1
    f31e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f322:	6042      	str	r2, [r0, #4]
    f324:	7203      	strb	r3, [r0, #8]
    f326:	2000      	movs	r0, #0
    f328:	4770      	bx	lr
    f32a:	2006      	movs	r0, #6
    f32c:	4770      	bx	lr
    f32e:	bf00      	nop
    f330:	02dc6c00 	.word	0x02dc6c00
    f334:	016e3600 	.word	0x016e3600

0000f338 <am_hal_ctimer_config>:
    f338:	b570      	push	{r4, r5, r6, lr}
    f33a:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    f33e:	2a00      	cmp	r2, #0
    f340:	b082      	sub	sp, #8
    f342:	bf18      	it	ne
    f344:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    f348:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    f34c:	ea42 0403 	orr.w	r4, r2, r3
    f350:	460d      	mov	r5, r1
    f352:	4606      	mov	r6, r0
    f354:	f000 f90c 	bl	f570 <am_hal_interrupt_master_disable>
    f358:	4b0d      	ldr	r3, [pc, #52]	; (f390 <am_hal_ctimer_config+0x58>)
    f35a:	9001      	str	r0, [sp, #4]
    f35c:	0172      	lsls	r2, r6, #5
    f35e:	50d4      	str	r4, [r2, r3]
    f360:	9801      	ldr	r0, [sp, #4]
    f362:	f000 f909 	bl	f578 <am_hal_interrupt_master_set>
    f366:	686b      	ldr	r3, [r5, #4]
    f368:	b90b      	cbnz	r3, f36e <am_hal_ctimer_config+0x36>
    f36a:	682a      	ldr	r2, [r5, #0]
    f36c:	b142      	cbz	r2, f380 <am_hal_ctimer_config+0x48>
    f36e:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f372:	2100      	movs	r1, #0
    f374:	4a07      	ldr	r2, [pc, #28]	; (f394 <am_hal_ctimer_config+0x5c>)
    f376:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    f37a:	5473      	strb	r3, [r6, r1]
    f37c:	b002      	add	sp, #8
    f37e:	bd70      	pop	{r4, r5, r6, pc}
    f380:	68ab      	ldr	r3, [r5, #8]
    f382:	2b00      	cmp	r3, #0
    f384:	d0fa      	beq.n	f37c <am_hal_ctimer_config+0x44>
    f386:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f38a:	2101      	movs	r1, #1
    f38c:	e7f2      	b.n	f374 <am_hal_ctimer_config+0x3c>
    f38e:	bf00      	nop
    f390:	4000800c 	.word	0x4000800c
    f394:	1000c034 	.word	0x1000c034

0000f398 <am_hal_ctimer_start>:
    f398:	b570      	push	{r4, r5, r6, lr}
    f39a:	b082      	sub	sp, #8
    f39c:	460c      	mov	r4, r1
    f39e:	0146      	lsls	r6, r0, #5
    f3a0:	4605      	mov	r5, r0
    f3a2:	f000 f8e5 	bl	f570 <am_hal_interrupt_master_disable>
    f3a6:	4a0f      	ldr	r2, [pc, #60]	; (f3e4 <am_hal_ctimer_start+0x4c>)
    f3a8:	9001      	str	r0, [sp, #4]
    f3aa:	58b3      	ldr	r3, [r6, r2]
    f3ac:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f3b0:	ea23 0301 	bic.w	r3, r3, r1
    f3b4:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    f3b8:	430b      	orrs	r3, r1
    f3ba:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    f3be:	bf0c      	ite	eq
    f3c0:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    f3c4:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    f3c8:	50b3      	str	r3, [r6, r2]
    f3ca:	4b07      	ldr	r3, [pc, #28]	; (f3e8 <am_hal_ctimer_start+0x50>)
    f3cc:	9801      	ldr	r0, [sp, #4]
    f3ce:	bf0c      	ite	eq
    f3d0:	2101      	moveq	r1, #1
    f3d2:	2100      	movne	r1, #0
    f3d4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    f3d8:	545c      	strb	r4, [r3, r1]
    f3da:	f000 f8cd 	bl	f578 <am_hal_interrupt_master_set>
    f3de:	b002      	add	sp, #8
    f3e0:	bd70      	pop	{r4, r5, r6, pc}
    f3e2:	bf00      	nop
    f3e4:	4000800c 	.word	0x4000800c
    f3e8:	1000c034 	.word	0x1000c034

0000f3ec <am_hal_ctimer_clear>:
    f3ec:	b570      	push	{r4, r5, r6, lr}
    f3ee:	b082      	sub	sp, #8
    f3f0:	0146      	lsls	r6, r0, #5
    f3f2:	460c      	mov	r4, r1
    f3f4:	f000 f8bc 	bl	f570 <am_hal_interrupt_master_disable>
    f3f8:	4d05      	ldr	r5, [pc, #20]	; (f410 <am_hal_ctimer_clear+0x24>)
    f3fa:	9001      	str	r0, [sp, #4]
    f3fc:	5973      	ldr	r3, [r6, r5]
    f3fe:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f402:	4319      	orrs	r1, r3
    f404:	5171      	str	r1, [r6, r5]
    f406:	9801      	ldr	r0, [sp, #4]
    f408:	f000 f8b6 	bl	f578 <am_hal_interrupt_master_set>
    f40c:	b002      	add	sp, #8
    f40e:	bd70      	pop	{r4, r5, r6, pc}
    f410:	4000800c 	.word	0x4000800c

0000f414 <am_hal_ctimer_period_set>:
    f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f418:	b082      	sub	sp, #8
    f41a:	4689      	mov	r9, r1
    f41c:	4698      	mov	r8, r3
    f41e:	0147      	lsls	r7, r0, #5
    f420:	4614      	mov	r4, r2
    f422:	f000 f8a5 	bl	f570 <am_hal_interrupt_master_disable>
    f426:	f8df a094 	ldr.w	sl, [pc, #148]	; f4bc <am_hal_ctimer_period_set+0xa8>
    f42a:	9001      	str	r0, [sp, #4]
    f42c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f430:	4d20      	ldr	r5, [pc, #128]	; (f4b4 <am_hal_ctimer_period_set+0xa0>)
    f432:	4e21      	ldr	r6, [pc, #132]	; (f4b8 <am_hal_ctimer_period_set+0xa4>)
    f434:	f857 300a 	ldr.w	r3, [r7, sl]
    f438:	d01a      	beq.n	f470 <am_hal_ctimer_period_set+0x5c>
    f43a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f43e:	2b80      	cmp	r3, #128	; 0x80
    f440:	d01b      	beq.n	f47a <am_hal_ctimer_period_set+0x66>
    f442:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f446:	2000      	movs	r0, #0
    f448:	4591      	cmp	r9, r2
    f44a:	4603      	mov	r3, r0
    f44c:	d01e      	beq.n	f48c <am_hal_ctimer_period_set+0x78>
    f44e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f452:	d025      	beq.n	f4a0 <am_hal_ctimer_period_set+0x8c>
    f454:	0c1b      	lsrs	r3, r3, #16
    f456:	b2a2      	uxth	r2, r4
    f458:	041b      	lsls	r3, r3, #16
    f45a:	4310      	orrs	r0, r2
    f45c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    f460:	5178      	str	r0, [r7, r5]
    f462:	51bb      	str	r3, [r7, r6]
    f464:	9801      	ldr	r0, [sp, #4]
    f466:	f000 f887 	bl	f578 <am_hal_interrupt_master_set>
    f46a:	b002      	add	sp, #8
    f46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f470:	0c1b      	lsrs	r3, r3, #16
    f472:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f476:	2b80      	cmp	r3, #128	; 0x80
    f478:	d111      	bne.n	f49e <am_hal_ctimer_period_set+0x8a>
    f47a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f47e:	4591      	cmp	r9, r2
    f480:	ea4f 4004 	mov.w	r0, r4, lsl #16
    f484:	4623      	mov	r3, r4
    f486:	ebc8 0404 	rsb	r4, r8, r4
    f48a:	d1e0      	bne.n	f44e <am_hal_ctimer_period_set+0x3a>
    f48c:	b2a3      	uxth	r3, r4
    f48e:	4318      	orrs	r0, r3
    f490:	5178      	str	r0, [r7, r5]
    f492:	9801      	ldr	r0, [sp, #4]
    f494:	f000 f870 	bl	f578 <am_hal_interrupt_master_set>
    f498:	b002      	add	sp, #8
    f49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f49e:	2000      	movs	r0, #0
    f4a0:	b2a3      	uxth	r3, r4
    f4a2:	4318      	orrs	r0, r3
    f4a4:	51b8      	str	r0, [r7, r6]
    f4a6:	9801      	ldr	r0, [sp, #4]
    f4a8:	f000 f866 	bl	f578 <am_hal_interrupt_master_set>
    f4ac:	b002      	add	sp, #8
    f4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f4b2:	bf00      	nop
    f4b4:	40008004 	.word	0x40008004
    f4b8:	40008008 	.word	0x40008008
    f4bc:	4000800c 	.word	0x4000800c

0000f4c0 <am_hal_ctimer_int_enable>:
    f4c0:	b510      	push	{r4, lr}
    f4c2:	b082      	sub	sp, #8
    f4c4:	4604      	mov	r4, r0
    f4c6:	f000 f853 	bl	f570 <am_hal_interrupt_master_disable>
    f4ca:	4b06      	ldr	r3, [pc, #24]	; (f4e4 <am_hal_ctimer_int_enable+0x24>)
    f4cc:	9001      	str	r0, [sp, #4]
    f4ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f4d2:	4314      	orrs	r4, r2
    f4d4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    f4d8:	9801      	ldr	r0, [sp, #4]
    f4da:	f000 f84d 	bl	f578 <am_hal_interrupt_master_set>
    f4de:	b002      	add	sp, #8
    f4e0:	bd10      	pop	{r4, pc}
    f4e2:	bf00      	nop
    f4e4:	40008000 	.word	0x40008000

0000f4e8 <am_hal_ctimer_int_clear>:
    f4e8:	b510      	push	{r4, lr}
    f4ea:	b082      	sub	sp, #8
    f4ec:	4604      	mov	r4, r0
    f4ee:	f000 f83f 	bl	f570 <am_hal_interrupt_master_disable>
    f4f2:	4b04      	ldr	r3, [pc, #16]	; (f504 <am_hal_ctimer_int_clear+0x1c>)
    f4f4:	9001      	str	r0, [sp, #4]
    f4f6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    f4fa:	9801      	ldr	r0, [sp, #4]
    f4fc:	f000 f83c 	bl	f578 <am_hal_interrupt_master_set>
    f500:	b002      	add	sp, #8
    f502:	bd10      	pop	{r4, pc}
    f504:	40008000 	.word	0x40008000

0000f508 <am_hal_flash_delay>:
    f508:	4b00      	ldr	r3, [pc, #0]	; (f50c <am_hal_flash_delay+0x4>)
    f50a:	4718      	bx	r3
    f50c:	0800009d 	.word	0x0800009d

0000f510 <am_hal_flash_delay_status_check>:
    f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f514:	f89d 4018 	ldrb.w	r4, [sp, #24]
    f518:	460d      	mov	r5, r1
    f51a:	4616      	mov	r6, r2
    f51c:	461f      	mov	r7, r3
    f51e:	b17c      	cbz	r4, f540 <am_hal_flash_delay_status_check+0x30>
    f520:	4604      	mov	r4, r0
    f522:	f8df 8040 	ldr.w	r8, [pc, #64]	; f564 <am_hal_flash_delay_status_check+0x54>
    f526:	e002      	b.n	f52e <am_hal_flash_delay_status_check+0x1e>
    f528:	b1c4      	cbz	r4, f55c <am_hal_flash_delay_status_check+0x4c>
    f52a:	47c0      	blx	r8
    f52c:	3c01      	subs	r4, #1
    f52e:	682b      	ldr	r3, [r5, #0]
    f530:	4033      	ands	r3, r6
    f532:	429f      	cmp	r7, r3
    f534:	f04f 0001 	mov.w	r0, #1
    f538:	d1f6      	bne.n	f528 <am_hal_flash_delay_status_check+0x18>
    f53a:	2000      	movs	r0, #0
    f53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f540:	f8df 8020 	ldr.w	r8, [pc, #32]	; f564 <am_hal_flash_delay_status_check+0x54>
    f544:	4604      	mov	r4, r0
    f546:	e002      	b.n	f54e <am_hal_flash_delay_status_check+0x3e>
    f548:	b144      	cbz	r4, f55c <am_hal_flash_delay_status_check+0x4c>
    f54a:	47c0      	blx	r8
    f54c:	3c01      	subs	r4, #1
    f54e:	682b      	ldr	r3, [r5, #0]
    f550:	4033      	ands	r3, r6
    f552:	429f      	cmp	r7, r3
    f554:	f04f 0001 	mov.w	r0, #1
    f558:	d0f6      	beq.n	f548 <am_hal_flash_delay_status_check+0x38>
    f55a:	e7ee      	b.n	f53a <am_hal_flash_delay_status_check+0x2a>
    f55c:	2004      	movs	r0, #4
    f55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f562:	bf00      	nop
    f564:	0800009d 	.word	0x0800009d

0000f568 <am_hal_interrupt_master_enable>:
    f568:	f3ef 8010 	mrs	r0, PRIMASK
    f56c:	b662      	cpsie	i
    f56e:	4770      	bx	lr

0000f570 <am_hal_interrupt_master_disable>:
    f570:	f3ef 8010 	mrs	r0, PRIMASK
    f574:	b672      	cpsid	i
    f576:	4770      	bx	lr

0000f578 <am_hal_interrupt_master_set>:
    f578:	f380 8810 	msr	PRIMASK, r0
    f57c:	4770      	bx	lr
    f57e:	bf00      	nop

0000f580 <am_hal_itm_disable>:
    f580:	b510      	push	{r4, lr}
    f582:	4b25      	ldr	r3, [pc, #148]	; (f618 <am_hal_itm_disable+0x98>)
    f584:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f588:	b9b3      	cbnz	r3, f5b8 <am_hal_itm_disable+0x38>
    f58a:	4b24      	ldr	r3, [pc, #144]	; (f61c <am_hal_itm_disable+0x9c>)
    f58c:	68da      	ldr	r2, [r3, #12]
    f58e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f592:	60da      	str	r2, [r3, #12]
    f594:	68da      	ldr	r2, [r3, #12]
    f596:	01d2      	lsls	r2, r2, #7
    f598:	d5fc      	bpl.n	f594 <am_hal_itm_disable+0x14>
    f59a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f59e:	4920      	ldr	r1, [pc, #128]	; (f620 <am_hal_itm_disable+0xa0>)
    f5a0:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f5a4:	4a1f      	ldr	r2, [pc, #124]	; (f624 <am_hal_itm_disable+0xa4>)
    f5a6:	200f      	movs	r0, #15
    f5a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f5ac:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f5b0:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f5b4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f5b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f5bc:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f5c0:	021b      	lsls	r3, r3, #8
    f5c2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f5c6:	d4f9      	bmi.n	f5bc <am_hal_itm_disable+0x3c>
    f5c8:	f240 20f7 	movw	r0, #759	; 0x2f7
    f5cc:	f7ff ff9c 	bl	f508 <am_hal_flash_delay>
    f5d0:	4b13      	ldr	r3, [pc, #76]	; (f620 <am_hal_itm_disable+0xa0>)
    f5d2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f5d6:	4621      	mov	r1, r4
    f5d8:	2064      	movs	r0, #100	; 0x64
    f5da:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f5de:	f023 0301 	bic.w	r3, r3, #1
    f5e2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f5e6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f5ea:	4b0f      	ldr	r3, [pc, #60]	; (f628 <am_hal_itm_disable+0xa8>)
    f5ec:	4013      	ands	r3, r2
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	d1f9      	bne.n	f5e6 <am_hal_itm_disable+0x66>
    f5f2:	3801      	subs	r0, #1
    f5f4:	d1f1      	bne.n	f5da <am_hal_itm_disable+0x5a>
    f5f6:	4a09      	ldr	r2, [pc, #36]	; (f61c <am_hal_itm_disable+0x9c>)
    f5f8:	68d3      	ldr	r3, [r2, #12]
    f5fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f5fe:	60d3      	str	r3, [r2, #12]
    f600:	68d3      	ldr	r3, [r2, #12]
    f602:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f606:	d1fb      	bne.n	f600 <am_hal_itm_disable+0x80>
    f608:	4a03      	ldr	r2, [pc, #12]	; (f618 <am_hal_itm_disable+0x98>)
    f60a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f60e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f612:	2b00      	cmp	r3, #0
    f614:	d1fb      	bne.n	f60e <am_hal_itm_disable+0x8e>
    f616:	bd10      	pop	{r4, pc}
    f618:	40020000 	.word	0x40020000
    f61c:	e000edf0 	.word	0xe000edf0
    f620:	c5acce55 	.word	0xc5acce55
    f624:	00150511 	.word	0x00150511
    f628:	00800001 	.word	0x00800001

0000f62c <am_hal_mcuctrl_info_get>:
    f62c:	b4f0      	push	{r4, r5, r6, r7}
    f62e:	b121      	cbz	r1, f63a <am_hal_mcuctrl_info_get+0xe>
    f630:	2801      	cmp	r0, #1
    f632:	d038      	beq.n	f6a6 <am_hal_mcuctrl_info_get+0x7a>
    f634:	d320      	bcc.n	f678 <am_hal_mcuctrl_info_get+0x4c>
    f636:	2802      	cmp	r0, #2
    f638:	d002      	beq.n	f640 <am_hal_mcuctrl_info_get+0x14>
    f63a:	2006      	movs	r0, #6
    f63c:	bcf0      	pop	{r4, r5, r6, r7}
    f63e:	4770      	bx	lr
    f640:	4a41      	ldr	r2, [pc, #260]	; (f748 <am_hal_mcuctrl_info_get+0x11c>)
    f642:	684d      	ldr	r5, [r1, #4]
    f644:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f648:	694c      	ldr	r4, [r1, #20]
    f64a:	f003 0601 	and.w	r6, r3, #1
    f64e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f652:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f656:	700e      	strb	r6, [r1, #0]
    f658:	7208      	strb	r0, [r1, #8]
    f65a:	740b      	strb	r3, [r1, #16]
    f65c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f660:	60cb      	str	r3, [r1, #12]
    f662:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f666:	4328      	orrs	r0, r5
    f668:	6048      	str	r0, [r1, #4]
    f66a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f66e:	4323      	orrs	r3, r4
    f670:	2000      	movs	r0, #0
    f672:	614b      	str	r3, [r1, #20]
    f674:	bcf0      	pop	{r4, r5, r6, r7}
    f676:	4770      	bx	lr
    f678:	4a33      	ldr	r2, [pc, #204]	; (f748 <am_hal_mcuctrl_info_get+0x11c>)
    f67a:	6993      	ldr	r3, [r2, #24]
    f67c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f680:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f684:	7008      	strb	r0, [r1, #0]
    f686:	704b      	strb	r3, [r1, #1]
    f688:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f68c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f690:	710b      	strb	r3, [r1, #4]
    f692:	6953      	ldr	r3, [r2, #20]
    f694:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f698:	f003 0301 	and.w	r3, r3, #1
    f69c:	2000      	movs	r0, #0
    f69e:	708a      	strb	r2, [r1, #2]
    f6a0:	70cb      	strb	r3, [r1, #3]
    f6a2:	bcf0      	pop	{r4, r5, r6, r7}
    f6a4:	4770      	bx	lr
    f6a6:	4b28      	ldr	r3, [pc, #160]	; (f748 <am_hal_mcuctrl_info_get+0x11c>)
    f6a8:	4c28      	ldr	r4, [pc, #160]	; (f74c <am_hal_mcuctrl_info_get+0x120>)
    f6aa:	681a      	ldr	r2, [r3, #0]
    f6ac:	600a      	str	r2, [r1, #0]
    f6ae:	6858      	ldr	r0, [r3, #4]
    f6b0:	6048      	str	r0, [r1, #4]
    f6b2:	6898      	ldr	r0, [r3, #8]
    f6b4:	6088      	str	r0, [r1, #8]
    f6b6:	68d8      	ldr	r0, [r3, #12]
    f6b8:	60c8      	str	r0, [r1, #12]
    f6ba:	691d      	ldr	r5, [r3, #16]
    f6bc:	4824      	ldr	r0, [pc, #144]	; (f750 <am_hal_mcuctrl_info_get+0x124>)
    f6be:	610d      	str	r5, [r1, #16]
    f6c0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f6c4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f6c8:	695d      	ldr	r5, [r3, #20]
    f6ca:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f6ce:	4b21      	ldr	r3, [pc, #132]	; (f754 <am_hal_mcuctrl_info_get+0x128>)
    f6d0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f6d4:	6208      	str	r0, [r1, #32]
    f6d6:	f002 0201 	and.w	r2, r2, #1
    f6da:	614d      	str	r5, [r1, #20]
    f6dc:	61cc      	str	r4, [r1, #28]
    f6de:	618a      	str	r2, [r1, #24]
    f6e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f6e4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f6e8:	b2d0      	uxtb	r0, r2
    f6ea:	f004 020f 	and.w	r2, r4, #15
    f6ee:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f6f2:	624a      	str	r2, [r1, #36]	; 0x24
    f6f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f6f8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f6fc:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f700:	f004 020f 	and.w	r2, r4, #15
    f704:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f708:	628a      	str	r2, [r1, #40]	; 0x28
    f70a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f70e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f712:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f716:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f71a:	4302      	orrs	r2, r0
    f71c:	62ca      	str	r2, [r1, #44]	; 0x2c
    f71e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f722:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f726:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f72a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f72e:	b2c0      	uxtb	r0, r0
    f730:	0400      	lsls	r0, r0, #16
    f732:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f736:	b2d2      	uxtb	r2, r2
    f738:	431a      	orrs	r2, r3
    f73a:	b2e3      	uxtb	r3, r4
    f73c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f740:	630b      	str	r3, [r1, #48]	; 0x30
    f742:	2000      	movs	r0, #0
    f744:	bcf0      	pop	{r4, r5, r6, r7}
    f746:	4770      	bx	lr
    f748:	40020000 	.word	0x40020000
    f74c:	00011cfc 	.word	0x00011cfc
    f750:	00011d3c 	.word	0x00011d3c
    f754:	f0000f00 	.word	0xf0000f00

0000f758 <am_hal_pwrctrl_periph_enable>:
    f758:	b570      	push	{r4, r5, r6, lr}
    f75a:	b082      	sub	sp, #8
    f75c:	4604      	mov	r4, r0
    f75e:	f7ff ff07 	bl	f570 <am_hal_interrupt_master_disable>
    f762:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f766:	4d0f      	ldr	r5, [pc, #60]	; (f7a4 <am_hal_pwrctrl_periph_enable+0x4c>)
    f768:	4e0f      	ldr	r6, [pc, #60]	; (f7a8 <am_hal_pwrctrl_periph_enable+0x50>)
    f76a:	9001      	str	r0, [sp, #4]
    f76c:	00a4      	lsls	r4, r4, #2
    f76e:	68aa      	ldr	r2, [r5, #8]
    f770:	5933      	ldr	r3, [r6, r4]
    f772:	4313      	orrs	r3, r2
    f774:	60ab      	str	r3, [r5, #8]
    f776:	9801      	ldr	r0, [sp, #4]
    f778:	4434      	add	r4, r6
    f77a:	f7ff fefd 	bl	f578 <am_hal_interrupt_master_set>
    f77e:	2077      	movs	r0, #119	; 0x77
    f780:	f7ff fec2 	bl	f508 <am_hal_flash_delay>
    f784:	69ab      	ldr	r3, [r5, #24]
    f786:	6864      	ldr	r4, [r4, #4]
    f788:	4223      	tst	r3, r4
    f78a:	d103      	bne.n	f794 <am_hal_pwrctrl_periph_enable+0x3c>
    f78c:	2077      	movs	r0, #119	; 0x77
    f78e:	f7ff febb 	bl	f508 <am_hal_flash_delay>
    f792:	69ab      	ldr	r3, [r5, #24]
    f794:	4b03      	ldr	r3, [pc, #12]	; (f7a4 <am_hal_pwrctrl_periph_enable+0x4c>)
    f796:	699b      	ldr	r3, [r3, #24]
    f798:	4223      	tst	r3, r4
    f79a:	bf0c      	ite	eq
    f79c:	2001      	moveq	r0, #1
    f79e:	2000      	movne	r0, #0
    f7a0:	b002      	add	sp, #8
    f7a2:	bd70      	pop	{r4, r5, r6, pc}
    f7a4:	40021000 	.word	0x40021000
    f7a8:	00011d7c 	.word	0x00011d7c

0000f7ac <am_hal_pwrctrl_periph_disable>:
    f7ac:	b570      	push	{r4, r5, r6, lr}
    f7ae:	b082      	sub	sp, #8
    f7b0:	4604      	mov	r4, r0
    f7b2:	f7ff fedd 	bl	f570 <am_hal_interrupt_master_disable>
    f7b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f7ba:	4d10      	ldr	r5, [pc, #64]	; (f7fc <am_hal_pwrctrl_periph_disable+0x50>)
    f7bc:	4e10      	ldr	r6, [pc, #64]	; (f800 <am_hal_pwrctrl_periph_disable+0x54>)
    f7be:	9001      	str	r0, [sp, #4]
    f7c0:	00a4      	lsls	r4, r4, #2
    f7c2:	68ab      	ldr	r3, [r5, #8]
    f7c4:	5932      	ldr	r2, [r6, r4]
    f7c6:	ea23 0302 	bic.w	r3, r3, r2
    f7ca:	60ab      	str	r3, [r5, #8]
    f7cc:	9801      	ldr	r0, [sp, #4]
    f7ce:	4434      	add	r4, r6
    f7d0:	f7ff fed2 	bl	f578 <am_hal_interrupt_master_set>
    f7d4:	2077      	movs	r0, #119	; 0x77
    f7d6:	f7ff fe97 	bl	f508 <am_hal_flash_delay>
    f7da:	69ab      	ldr	r3, [r5, #24]
    f7dc:	6864      	ldr	r4, [r4, #4]
    f7de:	4223      	tst	r3, r4
    f7e0:	d003      	beq.n	f7ea <am_hal_pwrctrl_periph_disable+0x3e>
    f7e2:	2077      	movs	r0, #119	; 0x77
    f7e4:	f7ff fe90 	bl	f508 <am_hal_flash_delay>
    f7e8:	69ab      	ldr	r3, [r5, #24]
    f7ea:	4b04      	ldr	r3, [pc, #16]	; (f7fc <am_hal_pwrctrl_periph_disable+0x50>)
    f7ec:	699b      	ldr	r3, [r3, #24]
    f7ee:	4223      	tst	r3, r4
    f7f0:	bf14      	ite	ne
    f7f2:	2001      	movne	r0, #1
    f7f4:	2000      	moveq	r0, #0
    f7f6:	b002      	add	sp, #8
    f7f8:	bd70      	pop	{r4, r5, r6, pc}
    f7fa:	bf00      	nop
    f7fc:	40021000 	.word	0x40021000
    f800:	00011d7c 	.word	0x00011d7c

0000f804 <am_hal_pwrctrl_low_power_init>:
    f804:	b530      	push	{r4, r5, lr}
    f806:	4b1f      	ldr	r3, [pc, #124]	; (f884 <am_hal_pwrctrl_low_power_init+0x80>)
    f808:	681a      	ldr	r2, [r3, #0]
    f80a:	b083      	sub	sp, #12
    f80c:	b912      	cbnz	r2, f814 <am_hal_pwrctrl_low_power_init+0x10>
    f80e:	4a1e      	ldr	r2, [pc, #120]	; (f888 <am_hal_pwrctrl_low_power_init+0x84>)
    f810:	6812      	ldr	r2, [r2, #0]
    f812:	601a      	str	r2, [r3, #0]
    f814:	4c1d      	ldr	r4, [pc, #116]	; (f88c <am_hal_pwrctrl_low_power_init+0x88>)
    f816:	69a3      	ldr	r3, [r4, #24]
    f818:	05db      	lsls	r3, r3, #23
    f81a:	d502      	bpl.n	f822 <am_hal_pwrctrl_low_power_init+0x1e>
    f81c:	2000      	movs	r0, #0
    f81e:	b003      	add	sp, #12
    f820:	bd30      	pop	{r4, r5, pc}
    f822:	4d1b      	ldr	r5, [pc, #108]	; (f890 <am_hal_pwrctrl_low_power_init+0x8c>)
    f824:	491b      	ldr	r1, [pc, #108]	; (f894 <am_hal_pwrctrl_low_power_init+0x90>)
    f826:	7e2a      	ldrb	r2, [r5, #24]
    f828:	2001      	movs	r0, #1
    f82a:	4302      	orrs	r2, r0
    f82c:	2307      	movs	r3, #7
    f82e:	762a      	strb	r2, [r5, #24]
    f830:	9000      	str	r0, [sp, #0]
    f832:	461a      	mov	r2, r3
    f834:	f242 7010 	movw	r0, #10000	; 0x2710
    f838:	f7ff fe6a 	bl	f510 <am_hal_flash_delay_status_check>
    f83c:	b110      	cbz	r0, f844 <am_hal_pwrctrl_low_power_init+0x40>
    f83e:	2004      	movs	r0, #4
    f840:	b003      	add	sp, #12
    f842:	bd30      	pop	{r4, r5, pc}
    f844:	6823      	ldr	r3, [r4, #0]
    f846:	f043 0301 	orr.w	r3, r3, #1
    f84a:	6023      	str	r3, [r4, #0]
    f84c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f852:	6263      	str	r3, [r4, #36]	; 0x24
    f854:	68eb      	ldr	r3, [r5, #12]
    f856:	b2db      	uxtb	r3, r3
    f858:	2b11      	cmp	r3, #17
    f85a:	d1df      	bne.n	f81c <am_hal_pwrctrl_low_power_init+0x18>
    f85c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f860:	f360 5356 	bfi	r3, r0, #21, #2
    f864:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f868:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f86c:	220f      	movs	r2, #15
    f86e:	f362 138b 	bfi	r3, r2, #6, #6
    f872:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f876:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f87a:	f362 0305 	bfi	r3, r2, #0, #6
    f87e:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f882:	e7cc      	b.n	f81e <am_hal_pwrctrl_low_power_init+0x1a>
    f884:	1000c598 	.word	0x1000c598
    f888:	4ffff000 	.word	0x4ffff000
    f88c:	40021000 	.word	0x40021000
    f890:	40020000 	.word	0x40020000
    f894:	40020018 	.word	0x40020018

0000f898 <am_hal_rtc_osc_select>:
    f898:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f89c:	2801      	cmp	r0, #1
    f89e:	68d3      	ldr	r3, [r2, #12]
    f8a0:	bf0c      	ite	eq
    f8a2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    f8a6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    f8aa:	60d3      	str	r3, [r2, #12]
    f8ac:	4770      	bx	lr
    f8ae:	bf00      	nop

0000f8b0 <am_hal_rtc_osc_disable>:
    f8b0:	4a03      	ldr	r2, [pc, #12]	; (f8c0 <am_hal_rtc_osc_disable+0x10>)
    f8b2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f8b6:	f043 0310 	orr.w	r3, r3, #16
    f8ba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f8be:	4770      	bx	lr
    f8c0:	40004200 	.word	0x40004200

0000f8c4 <am_hal_uart_initialize>:
    f8c4:	2801      	cmp	r0, #1
    f8c6:	d901      	bls.n	f8cc <am_hal_uart_initialize+0x8>
    f8c8:	2005      	movs	r0, #5
    f8ca:	4770      	bx	lr
    f8cc:	b169      	cbz	r1, f8ea <am_hal_uart_initialize+0x26>
    f8ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8d0:	2264      	movs	r2, #100	; 0x64
    f8d2:	4e0e      	ldr	r6, [pc, #56]	; (f90c <am_hal_uart_initialize+0x48>)
    f8d4:	fb02 f200 	mul.w	r2, r2, r0
    f8d8:	18b4      	adds	r4, r6, r2
    f8da:	4603      	mov	r3, r0
    f8dc:	78e0      	ldrb	r0, [r4, #3]
    f8de:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f8e2:	b2fd      	uxtb	r5, r7
    f8e4:	b11d      	cbz	r5, f8ee <am_hal_uart_initialize+0x2a>
    f8e6:	2007      	movs	r0, #7
    f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8ea:	2006      	movs	r0, #6
    f8ec:	4770      	bx	lr
    f8ee:	f040 0001 	orr.w	r0, r0, #1
    f8f2:	70e0      	strb	r0, [r4, #3]
    f8f4:	58b0      	ldr	r0, [r6, r2]
    f8f6:	f8df e018 	ldr.w	lr, [pc, #24]	; f910 <am_hal_uart_initialize+0x4c>
    f8fa:	f36e 0017 	bfi	r0, lr, #0, #24
    f8fe:	50b0      	str	r0, [r6, r2]
    f900:	6263      	str	r3, [r4, #36]	; 0x24
    f902:	7127      	strb	r7, [r4, #4]
    f904:	6625      	str	r5, [r4, #96]	; 0x60
    f906:	4628      	mov	r0, r5
    f908:	600c      	str	r4, [r1, #0]
    f90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f90c:	1001c4dc 	.word	0x1001c4dc
    f910:	00ea9e06 	.word	0x00ea9e06

0000f914 <am_hal_uart_power_control>:
    f914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f918:	6804      	ldr	r4, [r0, #0]
    f91a:	4b36      	ldr	r3, [pc, #216]	; (f9f4 <am_hal_uart_power_control+0xe0>)
    f91c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f920:	429c      	cmp	r4, r3
    f922:	b083      	sub	sp, #12
    f924:	d003      	beq.n	f92e <am_hal_uart_power_control+0x1a>
    f926:	2002      	movs	r0, #2
    f928:	b003      	add	sp, #12
    f92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f92e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f930:	4605      	mov	r5, r0
    f932:	f107 0008 	add.w	r0, r7, #8
    f936:	4691      	mov	r9, r2
    f938:	460e      	mov	r6, r1
    f93a:	fa5f f880 	uxtb.w	r8, r0
    f93e:	b181      	cbz	r1, f962 <am_hal_uart_power_control+0x4e>
    f940:	2902      	cmp	r1, #2
    f942:	d80c      	bhi.n	f95e <am_hal_uart_power_control+0x4a>
    f944:	b992      	cbnz	r2, f96c <am_hal_uart_power_control+0x58>
    f946:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f94a:	371c      	adds	r7, #28
    f94c:	033f      	lsls	r7, r7, #12
    f94e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f952:	647b      	str	r3, [r7, #68]	; 0x44
    f954:	4640      	mov	r0, r8
    f956:	f7ff ff29 	bl	f7ac <am_hal_pwrctrl_periph_disable>
    f95a:	2000      	movs	r0, #0
    f95c:	e7e4      	b.n	f928 <am_hal_uart_power_control+0x14>
    f95e:	2006      	movs	r0, #6
    f960:	e7e2      	b.n	f928 <am_hal_uart_power_control+0x14>
    f962:	b322      	cbz	r2, f9ae <am_hal_uart_power_control+0x9a>
    f964:	792b      	ldrb	r3, [r5, #4]
    f966:	bb3b      	cbnz	r3, f9b8 <am_hal_uart_power_control+0xa4>
    f968:	2007      	movs	r0, #7
    f96a:	e7dd      	b.n	f928 <am_hal_uart_power_control+0x14>
    f96c:	f7ff fe00 	bl	f570 <am_hal_interrupt_master_disable>
    f970:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f974:	331c      	adds	r3, #28
    f976:	031b      	lsls	r3, r3, #12
    f978:	9001      	str	r0, [sp, #4]
    f97a:	6a1a      	ldr	r2, [r3, #32]
    f97c:	60aa      	str	r2, [r5, #8]
    f97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f980:	60ea      	str	r2, [r5, #12]
    f982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f984:	612a      	str	r2, [r5, #16]
    f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f988:	616a      	str	r2, [r5, #20]
    f98a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f98c:	61aa      	str	r2, [r5, #24]
    f98e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f990:	61ea      	str	r2, [r5, #28]
    f992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f994:	622b      	str	r3, [r5, #32]
    f996:	2301      	movs	r3, #1
    f998:	712b      	strb	r3, [r5, #4]
    f99a:	9801      	ldr	r0, [sp, #4]
    f99c:	f7ff fdec 	bl	f578 <am_hal_interrupt_master_set>
    f9a0:	682b      	ldr	r3, [r5, #0]
    f9a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f9a6:	42a3      	cmp	r3, r4
    f9a8:	d1d4      	bne.n	f954 <am_hal_uart_power_control+0x40>
    f9aa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f9ac:	e7cb      	b.n	f946 <am_hal_uart_power_control+0x32>
    f9ae:	4640      	mov	r0, r8
    f9b0:	f7ff fed2 	bl	f758 <am_hal_pwrctrl_periph_enable>
    f9b4:	4648      	mov	r0, r9
    f9b6:	e7b7      	b.n	f928 <am_hal_uart_power_control+0x14>
    f9b8:	4640      	mov	r0, r8
    f9ba:	f7ff fecd 	bl	f758 <am_hal_pwrctrl_periph_enable>
    f9be:	f7ff fdd7 	bl	f570 <am_hal_interrupt_master_disable>
    f9c2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f9c6:	331c      	adds	r3, #28
    f9c8:	031b      	lsls	r3, r3, #12
    f9ca:	68aa      	ldr	r2, [r5, #8]
    f9cc:	9000      	str	r0, [sp, #0]
    f9ce:	621a      	str	r2, [r3, #32]
    f9d0:	68ea      	ldr	r2, [r5, #12]
    f9d2:	625a      	str	r2, [r3, #36]	; 0x24
    f9d4:	692a      	ldr	r2, [r5, #16]
    f9d6:	629a      	str	r2, [r3, #40]	; 0x28
    f9d8:	696a      	ldr	r2, [r5, #20]
    f9da:	62da      	str	r2, [r3, #44]	; 0x2c
    f9dc:	69aa      	ldr	r2, [r5, #24]
    f9de:	631a      	str	r2, [r3, #48]	; 0x30
    f9e0:	69ea      	ldr	r2, [r5, #28]
    f9e2:	635a      	str	r2, [r3, #52]	; 0x34
    f9e4:	6a2a      	ldr	r2, [r5, #32]
    f9e6:	639a      	str	r2, [r3, #56]	; 0x38
    f9e8:	9800      	ldr	r0, [sp, #0]
    f9ea:	712e      	strb	r6, [r5, #4]
    f9ec:	f7ff fdc4 	bl	f578 <am_hal_interrupt_master_set>
    f9f0:	4630      	mov	r0, r6
    f9f2:	e799      	b.n	f928 <am_hal_uart_power_control+0x14>
    f9f4:	01ea9e06 	.word	0x01ea9e06

0000f9f8 <am_hal_uart_configure>:
    f9f8:	6803      	ldr	r3, [r0, #0]
    f9fa:	4a7a      	ldr	r2, [pc, #488]	; (fbe4 <am_hal_uart_configure+0x1ec>)
    f9fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa00:	4293      	cmp	r3, r2
    fa02:	d001      	beq.n	fa08 <am_hal_uart_configure+0x10>
    fa04:	2002      	movs	r0, #2
    fa06:	4770      	bx	lr
    fa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    fa0e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fa12:	351c      	adds	r5, #28
    fa14:	032d      	lsls	r5, r5, #12
    fa16:	2700      	movs	r7, #0
    fa18:	b084      	sub	sp, #16
    fa1a:	632f      	str	r7, [r5, #48]	; 0x30
    fa1c:	460e      	mov	r6, r1
    fa1e:	4604      	mov	r4, r0
    fa20:	f7ff fda6 	bl	f570 <am_hal_interrupt_master_disable>
    fa24:	9001      	str	r0, [sp, #4]
    fa26:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa28:	f043 0308 	orr.w	r3, r3, #8
    fa2c:	862b      	strh	r3, [r5, #48]	; 0x30
    fa2e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa30:	2201      	movs	r2, #1
    fa32:	f362 1306 	bfi	r3, r2, #4, #3
    fa36:	862b      	strh	r3, [r5, #48]	; 0x30
    fa38:	9801      	ldr	r0, [sp, #4]
    fa3a:	f7ff fd9d 	bl	f578 <am_hal_interrupt_master_set>
    fa3e:	f7ff fd97 	bl	f570 <am_hal_interrupt_master_disable>
    fa42:	9002      	str	r0, [sp, #8]
    fa44:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa46:	f367 0300 	bfi	r3, r7, #0, #1
    fa4a:	862b      	strh	r3, [r5, #48]	; 0x30
    fa4c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa4e:	f367 2349 	bfi	r3, r7, #9, #1
    fa52:	862b      	strh	r3, [r5, #48]	; 0x30
    fa54:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa56:	f367 2308 	bfi	r3, r7, #8, #1
    fa5a:	862b      	strh	r3, [r5, #48]	; 0x30
    fa5c:	9802      	ldr	r0, [sp, #8]
    fa5e:	f7ff fd8b 	bl	f578 <am_hal_interrupt_master_set>
    fa62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    fa64:	f3c3 1302 	ubfx	r3, r3, #4, #3
    fa68:	3b01      	subs	r3, #1
    fa6a:	2b03      	cmp	r3, #3
    fa6c:	d854      	bhi.n	fb18 <am_hal_uart_configure+0x120>
    fa6e:	e8df f003 	tbb	[pc, r3]
    fa72:	020e      	.short	0x020e
    fa74:	1114      	.short	0x1114
    fa76:	495c      	ldr	r1, [pc, #368]	; (fbe8 <am_hal_uart_configure+0x1f0>)
    fa78:	485c      	ldr	r0, [pc, #368]	; (fbec <am_hal_uart_configure+0x1f4>)
    fa7a:	6832      	ldr	r2, [r6, #0]
    fa7c:	0112      	lsls	r2, r2, #4
    fa7e:	fbb0 f3f2 	udiv	r3, r0, r2
    fa82:	b96b      	cbnz	r3, faa0 <am_hal_uart_configure+0xa8>
    fa84:	485a      	ldr	r0, [pc, #360]	; (fbf0 <am_hal_uart_configure+0x1f8>)
    fa86:	6623      	str	r3, [r4, #96]	; 0x60
    fa88:	b004      	add	sp, #16
    fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa8e:	4959      	ldr	r1, [pc, #356]	; (fbf4 <am_hal_uart_configure+0x1fc>)
    fa90:	4859      	ldr	r0, [pc, #356]	; (fbf8 <am_hal_uart_configure+0x200>)
    fa92:	e7f2      	b.n	fa7a <am_hal_uart_configure+0x82>
    fa94:	4959      	ldr	r1, [pc, #356]	; (fbfc <am_hal_uart_configure+0x204>)
    fa96:	485a      	ldr	r0, [pc, #360]	; (fc00 <am_hal_uart_configure+0x208>)
    fa98:	e7ef      	b.n	fa7a <am_hal_uart_configure+0x82>
    fa9a:	495a      	ldr	r1, [pc, #360]	; (fc04 <am_hal_uart_configure+0x20c>)
    fa9c:	485a      	ldr	r0, [pc, #360]	; (fc08 <am_hal_uart_configure+0x210>)
    fa9e:	e7ec      	b.n	fa7a <am_hal_uart_configure+0x82>
    faa0:	fbb1 f2f2 	udiv	r2, r1, r2
    faa4:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    faa8:	626b      	str	r3, [r5, #36]	; 0x24
    faaa:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    faae:	626b      	str	r3, [r5, #36]	; 0x24
    fab0:	fbb0 f0f1 	udiv	r0, r0, r1
    fab4:	62aa      	str	r2, [r5, #40]	; 0x28
    fab6:	6620      	str	r0, [r4, #96]	; 0x60
    fab8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    faba:	f36f 338e 	bfc	r3, #14, #1
    fabe:	862b      	strh	r3, [r5, #48]	; 0x30
    fac0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fac2:	f36f 33cf 	bfc	r3, #15, #1
    fac6:	862b      	strh	r3, [r5, #48]	; 0x30
    fac8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    faca:	6933      	ldr	r3, [r6, #16]
    facc:	4313      	orrs	r3, r2
    face:	632b      	str	r3, [r5, #48]	; 0x30
    fad0:	6973      	ldr	r3, [r6, #20]
    fad2:	636b      	str	r3, [r5, #52]	; 0x34
    fad4:	6871      	ldr	r1, [r6, #4]
    fad6:	68b3      	ldr	r3, [r6, #8]
    fad8:	68f2      	ldr	r2, [r6, #12]
    fada:	430b      	orrs	r3, r1
    fadc:	f043 0310 	orr.w	r3, r3, #16
    fae0:	4313      	orrs	r3, r2
    fae2:	62eb      	str	r3, [r5, #44]	; 0x2c
    fae4:	f7ff fd44 	bl	f570 <am_hal_interrupt_master_disable>
    fae8:	9003      	str	r0, [sp, #12]
    faea:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    faec:	f043 0301 	orr.w	r3, r3, #1
    faf0:	862b      	strh	r3, [r5, #48]	; 0x30
    faf2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    faf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    faf8:	862b      	strh	r3, [r5, #48]	; 0x30
    fafa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fafc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fb00:	862b      	strh	r3, [r5, #48]	; 0x30
    fb02:	9803      	ldr	r0, [sp, #12]
    fb04:	f7ff fd38 	bl	f578 <am_hal_interrupt_master_set>
    fb08:	6825      	ldr	r5, [r4, #0]
    fb0a:	4b36      	ldr	r3, [pc, #216]	; (fbe4 <am_hal_uart_configure+0x1ec>)
    fb0c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fb10:	429d      	cmp	r5, r3
    fb12:	d005      	beq.n	fb20 <am_hal_uart_configure+0x128>
    fb14:	2000      	movs	r0, #0
    fb16:	e7b7      	b.n	fa88 <am_hal_uart_configure+0x90>
    fb18:	2300      	movs	r3, #0
    fb1a:	6623      	str	r3, [r4, #96]	; 0x60
    fb1c:	483b      	ldr	r0, [pc, #236]	; (fc0c <am_hal_uart_configure+0x214>)
    fb1e:	e7b3      	b.n	fa88 <am_hal_uart_configure+0x90>
    fb20:	69b1      	ldr	r1, [r6, #24]
    fb22:	6a37      	ldr	r7, [r6, #32]
    fb24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fb28:	b109      	cbz	r1, fb2e <am_hal_uart_configure+0x136>
    fb2a:	69f3      	ldr	r3, [r6, #28]
    fb2c:	bb3b      	cbnz	r3, fb7e <am_hal_uart_configure+0x186>
    fb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb30:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb34:	f103 021c 	add.w	r2, r3, #28
    fb38:	0312      	lsls	r2, r2, #12
    fb3a:	2100      	movs	r1, #0
    fb3c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fb40:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fb42:	f021 0120 	bic.w	r1, r1, #32
    fb46:	6391      	str	r1, [r2, #56]	; 0x38
    fb48:	b1b7      	cbz	r7, fb78 <am_hal_uart_configure+0x180>
    fb4a:	f1b8 0f00 	cmp.w	r8, #0
    fb4e:	d12e      	bne.n	fbae <am_hal_uart_configure+0x1b6>
    fb50:	6823      	ldr	r3, [r4, #0]
    fb52:	4a24      	ldr	r2, [pc, #144]	; (fbe4 <am_hal_uart_configure+0x1ec>)
    fb54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb58:	2100      	movs	r1, #0
    fb5a:	4293      	cmp	r3, r2
    fb5c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fb60:	d1d8      	bne.n	fb14 <am_hal_uart_configure+0x11c>
    fb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb68:	331c      	adds	r3, #28
    fb6a:	031b      	lsls	r3, r3, #12
    fb6c:	2000      	movs	r0, #0
    fb6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fb70:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fb74:	639a      	str	r2, [r3, #56]	; 0x38
    fb76:	e787      	b.n	fa88 <am_hal_uart_configure+0x90>
    fb78:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    fb7c:	e7f4      	b.n	fb68 <am_hal_uart_configure+0x170>
    fb7e:	2201      	movs	r2, #1
    fb80:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fb84:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fb88:	f000 fa7c 	bl	10084 <am_hal_queue_init>
    fb8c:	6823      	ldr	r3, [r4, #0]
    fb8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb92:	42ab      	cmp	r3, r5
    fb94:	d1be      	bne.n	fb14 <am_hal_uart_configure+0x11c>
    fb96:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb98:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb9c:	331c      	adds	r3, #28
    fb9e:	031b      	lsls	r3, r3, #12
    fba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fba2:	f042 0220 	orr.w	r2, r2, #32
    fba6:	639a      	str	r2, [r3, #56]	; 0x38
    fba8:	2f00      	cmp	r7, #0
    fbaa:	d1ce      	bne.n	fb4a <am_hal_uart_configure+0x152>
    fbac:	e7d0      	b.n	fb50 <am_hal_uart_configure+0x158>
    fbae:	2201      	movs	r2, #1
    fbb0:	4643      	mov	r3, r8
    fbb2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    fbb6:	4639      	mov	r1, r7
    fbb8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    fbbc:	f000 fa62 	bl	10084 <am_hal_queue_init>
    fbc0:	6823      	ldr	r3, [r4, #0]
    fbc2:	4a08      	ldr	r2, [pc, #32]	; (fbe4 <am_hal_uart_configure+0x1ec>)
    fbc4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fbc8:	4293      	cmp	r3, r2
    fbca:	d1a3      	bne.n	fb14 <am_hal_uart_configure+0x11c>
    fbcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fbce:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fbd2:	331c      	adds	r3, #28
    fbd4:	031b      	lsls	r3, r3, #12
    fbd6:	2000      	movs	r0, #0
    fbd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fbda:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fbde:	639a      	str	r2, [r3, #56]	; 0x38
    fbe0:	e752      	b.n	fa88 <am_hal_uart_configure+0x90>
    fbe2:	bf00      	nop
    fbe4:	01ea9e06 	.word	0x01ea9e06
    fbe8:	2dc6c000 	.word	0x2dc6c000
    fbec:	00b71b00 	.word	0x00b71b00
    fbf0:	08000003 	.word	0x08000003
    fbf4:	5b8d8000 	.word	0x5b8d8000
    fbf8:	016e3600 	.word	0x016e3600
    fbfc:	0b71b000 	.word	0x0b71b000
    fc00:	002dc6c0 	.word	0x002dc6c0
    fc04:	16e36000 	.word	0x16e36000
    fc08:	005b8d80 	.word	0x005b8d80
    fc0c:	08000002 	.word	0x08000002

0000fc10 <am_hal_uart_transfer>:
    fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc14:	680f      	ldr	r7, [r1, #0]
    fc16:	b091      	sub	sp, #68	; 0x44
    fc18:	4605      	mov	r5, r0
    fc1a:	b13f      	cbz	r7, fc2c <am_hal_uart_transfer+0x1c>
    fc1c:	2f01      	cmp	r7, #1
    fc1e:	bf18      	it	ne
    fc20:	2707      	movne	r7, #7
    fc22:	d024      	beq.n	fc6e <am_hal_uart_transfer+0x5e>
    fc24:	4638      	mov	r0, r7
    fc26:	b011      	add	sp, #68	; 0x44
    fc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc2c:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fc30:	690b      	ldr	r3, [r1, #16]
    fc32:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fc36:	688e      	ldr	r6, [r1, #8]
    fc38:	9300      	str	r3, [sp, #0]
    fc3a:	f1b9 0f00 	cmp.w	r9, #0
    fc3e:	d031      	beq.n	fca4 <am_hal_uart_transfer+0x94>
    fc40:	2e00      	cmp	r6, #0
    fc42:	f000 819c 	beq.w	ff7e <am_hal_uart_transfer+0x36e>
    fc46:	2800      	cmp	r0, #0
    fc48:	f000 8097 	beq.w	fd7a <am_hal_uart_transfer+0x16a>
    fc4c:	6803      	ldr	r3, [r0, #0]
    fc4e:	4aa9      	ldr	r2, [pc, #676]	; (fef4 <am_hal_uart_transfer+0x2e4>)
    fc50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc54:	4293      	cmp	r3, r2
    fc56:	f000 8092 	beq.w	fd7e <am_hal_uart_transfer+0x16e>
    fc5a:	46b8      	mov	r8, r7
    fc5c:	9b00      	ldr	r3, [sp, #0]
    fc5e:	b10b      	cbz	r3, fc64 <am_hal_uart_transfer+0x54>
    fc60:	f8c3 8000 	str.w	r8, [r3]
    fc64:	2702      	movs	r7, #2
    fc66:	4638      	mov	r0, r7
    fc68:	b011      	add	sp, #68	; 0x44
    fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc6e:	1d0b      	adds	r3, r1, #4
    fc70:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fc74:	f1b9 0f00 	cmp.w	r9, #0
    fc78:	d043      	beq.n	fd02 <am_hal_uart_transfer+0xf2>
    fc7a:	2f00      	cmp	r7, #0
    fc7c:	f000 8185 	beq.w	ff8a <am_hal_uart_transfer+0x37a>
    fc80:	2800      	cmp	r0, #0
    fc82:	f000 80eb 	beq.w	fe5c <am_hal_uart_transfer+0x24c>
    fc86:	6802      	ldr	r2, [r0, #0]
    fc88:	499a      	ldr	r1, [pc, #616]	; (fef4 <am_hal_uart_transfer+0x2e4>)
    fc8a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fc8e:	428a      	cmp	r2, r1
    fc90:	f000 80e7 	beq.w	fe62 <am_hal_uart_transfer+0x252>
    fc94:	2600      	movs	r6, #0
    fc96:	2702      	movs	r7, #2
    fc98:	f1bb 0f00 	cmp.w	fp, #0
    fc9c:	d0c2      	beq.n	fc24 <am_hal_uart_transfer+0x14>
    fc9e:	f8cb 6000 	str.w	r6, [fp]
    fca2:	e7bf      	b.n	fc24 <am_hal_uart_transfer+0x14>
    fca4:	2800      	cmp	r0, #0
    fca6:	d0dd      	beq.n	fc64 <am_hal_uart_transfer+0x54>
    fca8:	6803      	ldr	r3, [r0, #0]
    fcaa:	4a92      	ldr	r2, [pc, #584]	; (fef4 <am_hal_uart_transfer+0x2e4>)
    fcac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fcb0:	4293      	cmp	r3, r2
    fcb2:	d1d7      	bne.n	fc64 <am_hal_uart_transfer+0x54>
    fcb4:	9b00      	ldr	r3, [sp, #0]
    fcb6:	b10b      	cbz	r3, fcbc <am_hal_uart_transfer+0xac>
    fcb8:	f8c3 9000 	str.w	r9, [r3]
    fcbc:	b1fe      	cbz	r6, fcfe <am_hal_uart_transfer+0xee>
    fcbe:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	f040 8165 	bne.w	ff92 <am_hal_uart_transfer+0x382>
    fcc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fcca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fcce:	311c      	adds	r1, #28
    fcd0:	0309      	lsls	r1, r1, #12
    fcd2:	698a      	ldr	r2, [r1, #24]
    fcd4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fcd8:	2a00      	cmp	r2, #0
    fcda:	f040 818d 	bne.w	fff8 <am_hal_uart_transfer+0x3e8>
    fcde:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fce2:	e003      	b.n	fcec <am_hal_uart_transfer+0xdc>
    fce4:	6988      	ldr	r0, [r1, #24]
    fce6:	0680      	lsls	r0, r0, #26
    fce8:	f100 8151 	bmi.w	ff8e <am_hal_uart_transfer+0x37e>
    fcec:	3201      	adds	r2, #1
    fcee:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fcf2:	6008      	str	r0, [r1, #0]
    fcf4:	4296      	cmp	r6, r2
    fcf6:	d1f5      	bne.n	fce4 <am_hal_uart_transfer+0xd4>
    fcf8:	9b00      	ldr	r3, [sp, #0]
    fcfa:	b103      	cbz	r3, fcfe <am_hal_uart_transfer+0xee>
    fcfc:	601e      	str	r6, [r3, #0]
    fcfe:	2700      	movs	r7, #0
    fd00:	e790      	b.n	fc24 <am_hal_uart_transfer+0x14>
    fd02:	2800      	cmp	r0, #0
    fd04:	d0ae      	beq.n	fc64 <am_hal_uart_transfer+0x54>
    fd06:	6802      	ldr	r2, [r0, #0]
    fd08:	497a      	ldr	r1, [pc, #488]	; (fef4 <am_hal_uart_transfer+0x2e4>)
    fd0a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fd0e:	428a      	cmp	r2, r1
    fd10:	d1a8      	bne.n	fc64 <am_hal_uart_transfer+0x54>
    fd12:	f1bb 0f00 	cmp.w	fp, #0
    fd16:	d001      	beq.n	fd1c <am_hal_uart_transfer+0x10c>
    fd18:	f8cb 9000 	str.w	r9, [fp]
    fd1c:	2f00      	cmp	r7, #0
    fd1e:	d0ee      	beq.n	fcfe <am_hal_uart_transfer+0xee>
    fd20:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fd24:	2c00      	cmp	r4, #0
    fd26:	f040 816c 	bne.w	10002 <am_hal_uart_transfer+0x3f2>
    fd2a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fd2c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fd30:	321c      	adds	r2, #28
    fd32:	0312      	lsls	r2, r2, #12
    fd34:	6990      	ldr	r0, [r2, #24]
    fd36:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fd3a:	2800      	cmp	r0, #0
    fd3c:	f040 819d 	bne.w	1007a <am_hal_uart_transfer+0x46a>
    fd40:	6811      	ldr	r1, [r2, #0]
    fd42:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fd46:	bf08      	it	eq
    fd48:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    fd4c:	d008      	beq.n	fd60 <am_hal_uart_transfer+0x150>
    fd4e:	e190      	b.n	10072 <am_hal_uart_transfer+0x462>
    fd50:	6991      	ldr	r1, [r2, #24]
    fd52:	06c8      	lsls	r0, r1, #27
    fd54:	d409      	bmi.n	fd6a <am_hal_uart_transfer+0x15a>
    fd56:	6811      	ldr	r1, [r2, #0]
    fd58:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fd5c:	f040 814e 	bne.w	fffc <am_hal_uart_transfer+0x3ec>
    fd60:	3401      	adds	r4, #1
    fd62:	42a7      	cmp	r7, r4
    fd64:	f803 1f01 	strb.w	r1, [r3, #1]!
    fd68:	d1f2      	bne.n	fd50 <am_hal_uart_transfer+0x140>
    fd6a:	2700      	movs	r7, #0
    fd6c:	f1bb 0f00 	cmp.w	fp, #0
    fd70:	f43f af58 	beq.w	fc24 <am_hal_uart_transfer+0x14>
    fd74:	f8cb 4000 	str.w	r4, [fp]
    fd78:	e754      	b.n	fc24 <am_hal_uart_transfer+0x14>
    fd7a:	4680      	mov	r8, r0
    fd7c:	e76e      	b.n	fc5c <am_hal_uart_transfer+0x4c>
    fd7e:	9301      	str	r3, [sp, #4]
    fd80:	4651      	mov	r1, sl
    fd82:	46bb      	mov	fp, r7
    fd84:	46b8      	mov	r8, r7
    fd86:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fd8a:	b9f2      	cbnz	r2, fdca <am_hal_uart_transfer+0x1ba>
    fd8c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fd8e:	b19e      	cbz	r6, fdb8 <am_hal_uart_transfer+0x1a8>
    fd90:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fd94:	321c      	adds	r2, #28
    fd96:	0312      	lsls	r2, r2, #12
    fd98:	3901      	subs	r1, #1
    fd9a:	6994      	ldr	r4, [r2, #24]
    fd9c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fda0:	b11c      	cbz	r4, fdaa <am_hal_uart_transfer+0x19a>
    fda2:	e047      	b.n	fe34 <am_hal_uart_transfer+0x224>
    fda4:	6993      	ldr	r3, [r2, #24]
    fda6:	069b      	lsls	r3, r3, #26
    fda8:	d441      	bmi.n	fe2e <am_hal_uart_transfer+0x21e>
    fdaa:	3401      	adds	r4, #1
    fdac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fdb0:	6013      	str	r3, [r2, #0]
    fdb2:	42b4      	cmp	r4, r6
    fdb4:	d1f6      	bne.n	fda4 <am_hal_uart_transfer+0x194>
    fdb6:	44a0      	add	r8, r4
    fdb8:	9b00      	ldr	r3, [sp, #0]
    fdba:	2b00      	cmp	r3, #0
    fdbc:	d09f      	beq.n	fcfe <am_hal_uart_transfer+0xee>
    fdbe:	4638      	mov	r0, r7
    fdc0:	f8c3 8000 	str.w	r8, [r3]
    fdc4:	b011      	add	sp, #68	; 0x44
    fdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdca:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fdcc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    fdce:	1b14      	subs	r4, r2, r4
    fdd0:	42b4      	cmp	r4, r6
    fdd2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fdd6:	bf28      	it	cs
    fdd8:	4634      	movcs	r4, r6
    fdda:	4622      	mov	r2, r4
    fddc:	4618      	mov	r0, r3
    fdde:	9302      	str	r3, [sp, #8]
    fde0:	f000 f95c 	bl	1009c <am_hal_queue_item_add>
    fde4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fde6:	9303      	str	r3, [sp, #12]
    fde8:	f7ff fbc2 	bl	f570 <am_hal_interrupt_master_disable>
    fdec:	9b03      	ldr	r3, [sp, #12]
    fdee:	9008      	str	r0, [sp, #32]
    fdf0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fdf4:	331c      	adds	r3, #28
    fdf6:	031b      	lsls	r3, r3, #12
    fdf8:	9303      	str	r3, [sp, #12]
    fdfa:	e00d      	b.n	fe18 <am_hal_uart_transfer+0x208>
    fdfc:	f000 f986 	bl	1010c <am_hal_queue_item_get>
    fe00:	b190      	cbz	r0, fe28 <am_hal_uart_transfer+0x218>
    fe02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fe04:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fe08:	331c      	adds	r3, #28
    fe0a:	031b      	lsls	r3, r3, #12
    fe0c:	699a      	ldr	r2, [r3, #24]
    fe0e:	0692      	lsls	r2, r2, #26
    fe10:	bf5c      	itt	pl
    fe12:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    fe16:	601a      	strpl	r2, [r3, #0]
    fe18:	9b03      	ldr	r3, [sp, #12]
    fe1a:	9802      	ldr	r0, [sp, #8]
    fe1c:	699b      	ldr	r3, [r3, #24]
    fe1e:	069b      	lsls	r3, r3, #26
    fe20:	f04f 0201 	mov.w	r2, #1
    fe24:	a907      	add	r1, sp, #28
    fe26:	d5e9      	bpl.n	fdfc <am_hal_uart_transfer+0x1ec>
    fe28:	9808      	ldr	r0, [sp, #32]
    fe2a:	f7ff fba5 	bl	f578 <am_hal_interrupt_master_set>
    fe2e:	1b36      	subs	r6, r6, r4
    fe30:	44a0      	add	r8, r4
    fe32:	d0c1      	beq.n	fdb8 <am_hal_uart_transfer+0x1a8>
    fe34:	2001      	movs	r0, #1
    fe36:	f7ff fb67 	bl	f508 <am_hal_flash_delay>
    fe3a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fe3e:	d001      	beq.n	fe44 <am_hal_uart_transfer+0x234>
    fe40:	f10b 0b01 	add.w	fp, fp, #1
    fe44:	45d9      	cmp	r9, fp
    fe46:	d9b7      	bls.n	fdb8 <am_hal_uart_transfer+0x1a8>
    fe48:	682a      	ldr	r2, [r5, #0]
    fe4a:	9b01      	ldr	r3, [sp, #4]
    fe4c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe50:	429a      	cmp	r2, r3
    fe52:	eb0a 0108 	add.w	r1, sl, r8
    fe56:	f47f af01 	bne.w	fc5c <am_hal_uart_transfer+0x4c>
    fe5a:	e794      	b.n	fd86 <am_hal_uart_transfer+0x176>
    fe5c:	4606      	mov	r6, r0
    fe5e:	2702      	movs	r7, #2
    fe60:	e71a      	b.n	fc98 <am_hal_uart_transfer+0x88>
    fe62:	9200      	str	r2, [sp, #0]
    fe64:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fe68:	f04f 0a00 	mov.w	sl, #0
    fe6c:	9202      	str	r2, [sp, #8]
    fe6e:	465a      	mov	r2, fp
    fe70:	4698      	mov	r8, r3
    fe72:	469b      	mov	fp, r3
    fe74:	4656      	mov	r6, sl
    fe76:	4613      	mov	r3, r2
    fe78:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fe7c:	2a00      	cmp	r2, #0
    fe7e:	d152      	bne.n	ff26 <am_hal_uart_transfer+0x316>
    fe80:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe82:	b3a7      	cbz	r7, feee <am_hal_uart_transfer+0x2de>
    fe84:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fe88:	311c      	adds	r1, #28
    fe8a:	0309      	lsls	r1, r1, #12
    fe8c:	698a      	ldr	r2, [r1, #24]
    fe8e:	06d0      	lsls	r0, r2, #27
    fe90:	d432      	bmi.n	fef8 <am_hal_uart_transfer+0x2e8>
    fe92:	680a      	ldr	r2, [r1, #0]
    fe94:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fe98:	f040 80aa 	bne.w	fff0 <am_hal_uart_transfer+0x3e0>
    fe9c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fea0:	e006      	b.n	feb0 <am_hal_uart_transfer+0x2a0>
    fea2:	698a      	ldr	r2, [r1, #24]
    fea4:	06d2      	lsls	r2, r2, #27
    fea6:	d41f      	bmi.n	fee8 <am_hal_uart_transfer+0x2d8>
    fea8:	680a      	ldr	r2, [r1, #0]
    feaa:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    feae:	d161      	bne.n	ff74 <am_hal_uart_transfer+0x364>
    feb0:	3401      	adds	r4, #1
    feb2:	42bc      	cmp	r4, r7
    feb4:	f808 2f01 	strb.w	r2, [r8, #1]!
    feb8:	d1f3      	bne.n	fea2 <am_hal_uart_transfer+0x292>
    feba:	469b      	mov	fp, r3
    febc:	4426      	add	r6, r4
    febe:	f1bb 0f00 	cmp.w	fp, #0
    fec2:	f43f af1c 	beq.w	fcfe <am_hal_uart_transfer+0xee>
    fec6:	f8cb 6000 	str.w	r6, [fp]
    feca:	2700      	movs	r7, #0
    fecc:	e6aa      	b.n	fc24 <am_hal_uart_transfer+0x14>
    fece:	9807      	ldr	r0, [sp, #28]
    fed0:	f7ff fb52 	bl	f578 <am_hal_interrupt_master_set>
    fed4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fed6:	9802      	ldr	r0, [sp, #8]
    fed8:	42bc      	cmp	r4, r7
    feda:	bf28      	it	cs
    fedc:	463c      	movcs	r4, r7
    fede:	4641      	mov	r1, r8
    fee0:	4622      	mov	r2, r4
    fee2:	f000 f913 	bl	1010c <am_hal_queue_item_get>
    fee6:	9b01      	ldr	r3, [sp, #4]
    fee8:	1b3f      	subs	r7, r7, r4
    feea:	4426      	add	r6, r4
    feec:	d104      	bne.n	fef8 <am_hal_uart_transfer+0x2e8>
    feee:	469b      	mov	fp, r3
    fef0:	e7e5      	b.n	febe <am_hal_uart_transfer+0x2ae>
    fef2:	bf00      	nop
    fef4:	01ea9e06 	.word	0x01ea9e06
    fef8:	2001      	movs	r0, #1
    fefa:	9301      	str	r3, [sp, #4]
    fefc:	f7ff fb04 	bl	f508 <am_hal_flash_delay>
    ff00:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	d001      	beq.n	ff0c <am_hal_uart_transfer+0x2fc>
    ff08:	f10a 0a01 	add.w	sl, sl, #1
    ff0c:	45d1      	cmp	r9, sl
    ff0e:	d9ee      	bls.n	feee <am_hal_uart_transfer+0x2de>
    ff10:	682a      	ldr	r2, [r5, #0]
    ff12:	9900      	ldr	r1, [sp, #0]
    ff14:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ff18:	428a      	cmp	r2, r1
    ff1a:	eb0b 0806 	add.w	r8, fp, r6
    ff1e:	d0ab      	beq.n	fe78 <am_hal_uart_transfer+0x268>
    ff20:	469b      	mov	fp, r3
    ff22:	2702      	movs	r7, #2
    ff24:	e6b8      	b.n	fc98 <am_hal_uart_transfer+0x88>
    ff26:	9301      	str	r3, [sp, #4]
    ff28:	f7ff fb22 	bl	f570 <am_hal_interrupt_master_disable>
    ff2c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ff2e:	9007      	str	r0, [sp, #28]
    ff30:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    ff34:	301c      	adds	r0, #28
    ff36:	9b01      	ldr	r3, [sp, #4]
    ff38:	0300      	lsls	r0, r0, #12
    ff3a:	ac08      	add	r4, sp, #32
    ff3c:	2200      	movs	r2, #0
    ff3e:	6981      	ldr	r1, [r0, #24]
    ff40:	06c9      	lsls	r1, r1, #27
    ff42:	d409      	bmi.n	ff58 <am_hal_uart_transfer+0x348>
    ff44:	6801      	ldr	r1, [r0, #0]
    ff46:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ff4a:	f102 0201 	add.w	r2, r2, #1
    ff4e:	d118      	bne.n	ff82 <am_hal_uart_transfer+0x372>
    ff50:	2a20      	cmp	r2, #32
    ff52:	f804 1b01 	strb.w	r1, [r4], #1
    ff56:	d1f2      	bne.n	ff3e <am_hal_uart_transfer+0x32e>
    ff58:	a908      	add	r1, sp, #32
    ff5a:	9802      	ldr	r0, [sp, #8]
    ff5c:	9301      	str	r3, [sp, #4]
    ff5e:	f000 f89d 	bl	1009c <am_hal_queue_item_add>
    ff62:	9b01      	ldr	r3, [sp, #4]
    ff64:	2800      	cmp	r0, #0
    ff66:	d1b2      	bne.n	fece <am_hal_uart_transfer+0x2be>
    ff68:	4f45      	ldr	r7, [pc, #276]	; (10080 <am_hal_uart_transfer+0x470>)
    ff6a:	469b      	mov	fp, r3
    ff6c:	9807      	ldr	r0, [sp, #28]
    ff6e:	f7ff fb03 	bl	f578 <am_hal_interrupt_master_set>
    ff72:	e691      	b.n	fc98 <am_hal_uart_transfer+0x88>
    ff74:	469b      	mov	fp, r3
    ff76:	4426      	add	r6, r4
    ff78:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff7c:	e68c      	b.n	fc98 <am_hal_uart_transfer+0x88>
    ff7e:	46b8      	mov	r8, r7
    ff80:	e71a      	b.n	fdb8 <am_hal_uart_transfer+0x1a8>
    ff82:	469b      	mov	fp, r3
    ff84:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff88:	e7f0      	b.n	ff6c <am_hal_uart_transfer+0x35c>
    ff8a:	463e      	mov	r6, r7
    ff8c:	e797      	b.n	febe <am_hal_uart_transfer+0x2ae>
    ff8e:	4616      	mov	r6, r2
    ff90:	e6b2      	b.n	fcf8 <am_hal_uart_transfer+0xe8>
    ff92:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    ff94:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ff96:	1a9b      	subs	r3, r3, r2
    ff98:	429e      	cmp	r6, r3
    ff9a:	bf28      	it	cs
    ff9c:	461e      	movcs	r6, r3
    ff9e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ffa2:	4651      	mov	r1, sl
    ffa4:	4632      	mov	r2, r6
    ffa6:	4620      	mov	r0, r4
    ffa8:	f000 f878 	bl	1009c <am_hal_queue_item_add>
    ffac:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ffae:	f7ff fadf 	bl	f570 <am_hal_interrupt_master_disable>
    ffb2:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ffb6:	371c      	adds	r7, #28
    ffb8:	033f      	lsls	r7, r7, #12
    ffba:	9005      	str	r0, [sp, #20]
    ffbc:	e00d      	b.n	ffda <am_hal_uart_transfer+0x3ca>
    ffbe:	f000 f8a5 	bl	1010c <am_hal_queue_item_get>
    ffc2:	b188      	cbz	r0, ffe8 <am_hal_uart_transfer+0x3d8>
    ffc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ffc6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ffca:	331c      	adds	r3, #28
    ffcc:	031b      	lsls	r3, r3, #12
    ffce:	699a      	ldr	r2, [r3, #24]
    ffd0:	0692      	lsls	r2, r2, #26
    ffd2:	bf5c      	itt	pl
    ffd4:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ffd8:	601a      	strpl	r2, [r3, #0]
    ffda:	69bb      	ldr	r3, [r7, #24]
    ffdc:	069b      	lsls	r3, r3, #26
    ffde:	f04f 0201 	mov.w	r2, #1
    ffe2:	a908      	add	r1, sp, #32
    ffe4:	4620      	mov	r0, r4
    ffe6:	d5ea      	bpl.n	ffbe <am_hal_uart_transfer+0x3ae>
    ffe8:	9805      	ldr	r0, [sp, #20]
    ffea:	f7ff fac5 	bl	f578 <am_hal_interrupt_master_set>
    ffee:	e683      	b.n	fcf8 <am_hal_uart_transfer+0xe8>
    fff0:	469b      	mov	fp, r3
    fff2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fff6:	e64f      	b.n	fc98 <am_hal_uart_transfer+0x88>
    fff8:	461e      	mov	r6, r3
    fffa:	e67d      	b.n	fcf8 <am_hal_uart_transfer+0xe8>
    fffc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10000:	e6b4      	b.n	fd6c <am_hal_uart_transfer+0x15c>
   10002:	9300      	str	r3, [sp, #0]
   10004:	f7ff fab4 	bl	f570 <am_hal_interrupt_master_disable>
   10008:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1000a:	9006      	str	r0, [sp, #24]
   1000c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10010:	321c      	adds	r2, #28
   10012:	0311      	lsls	r1, r2, #12
   10014:	a808      	add	r0, sp, #32
   10016:	2200      	movs	r2, #0
   10018:	9b00      	ldr	r3, [sp, #0]
   1001a:	e009      	b.n	10030 <am_hal_uart_transfer+0x420>
   1001c:	680c      	ldr	r4, [r1, #0]
   1001e:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   10022:	f102 0201 	add.w	r2, r2, #1
   10026:	d121      	bne.n	1006c <am_hal_uart_transfer+0x45c>
   10028:	2a20      	cmp	r2, #32
   1002a:	f800 4b01 	strb.w	r4, [r0], #1
   1002e:	d002      	beq.n	10036 <am_hal_uart_transfer+0x426>
   10030:	698c      	ldr	r4, [r1, #24]
   10032:	06e4      	lsls	r4, r4, #27
   10034:	d5f2      	bpl.n	1001c <am_hal_uart_transfer+0x40c>
   10036:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1003a:	a908      	add	r1, sp, #32
   1003c:	4630      	mov	r0, r6
   1003e:	9300      	str	r3, [sp, #0]
   10040:	f000 f82c 	bl	1009c <am_hal_queue_item_add>
   10044:	b920      	cbnz	r0, 10050 <am_hal_uart_transfer+0x440>
   10046:	4f0e      	ldr	r7, [pc, #56]	; (10080 <am_hal_uart_transfer+0x470>)
   10048:	9806      	ldr	r0, [sp, #24]
   1004a:	f7ff fa95 	bl	f578 <am_hal_interrupt_master_set>
   1004e:	e5e9      	b.n	fc24 <am_hal_uart_transfer+0x14>
   10050:	9806      	ldr	r0, [sp, #24]
   10052:	f7ff fa91 	bl	f578 <am_hal_interrupt_master_set>
   10056:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   10058:	9b00      	ldr	r3, [sp, #0]
   1005a:	42bc      	cmp	r4, r7
   1005c:	bf28      	it	cs
   1005e:	463c      	movcs	r4, r7
   10060:	4619      	mov	r1, r3
   10062:	4630      	mov	r0, r6
   10064:	4622      	mov	r2, r4
   10066:	f000 f851 	bl	1010c <am_hal_queue_item_get>
   1006a:	e67e      	b.n	fd6a <am_hal_uart_transfer+0x15a>
   1006c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10070:	e7ea      	b.n	10048 <am_hal_uart_transfer+0x438>
   10072:	4604      	mov	r4, r0
   10074:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10078:	e678      	b.n	fd6c <am_hal_uart_transfer+0x15c>
   1007a:	4627      	mov	r7, r4
   1007c:	e676      	b.n	fd6c <am_hal_uart_transfer+0x15c>
   1007e:	bf00      	nop
   10080:	08000001 	.word	0x08000001

00010084 <am_hal_queue_init>:
   10084:	b410      	push	{r4}
   10086:	2400      	movs	r4, #0
   10088:	6004      	str	r4, [r0, #0]
   1008a:	6044      	str	r4, [r0, #4]
   1008c:	6084      	str	r4, [r0, #8]
   1008e:	60c3      	str	r3, [r0, #12]
   10090:	6102      	str	r2, [r0, #16]
   10092:	6141      	str	r1, [r0, #20]
   10094:	f85d 4b04 	ldr.w	r4, [sp], #4
   10098:	4770      	bx	lr
   1009a:	bf00      	nop

0001009c <am_hal_queue_item_add>:
   1009c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1009e:	4604      	mov	r4, r0
   100a0:	6906      	ldr	r6, [r0, #16]
   100a2:	b083      	sub	sp, #12
   100a4:	fb06 f602 	mul.w	r6, r6, r2
   100a8:	460d      	mov	r5, r1
   100aa:	f7ff fa61 	bl	f570 <am_hal_interrupt_master_disable>
   100ae:	68e7      	ldr	r7, [r4, #12]
   100b0:	68a2      	ldr	r2, [r4, #8]
   100b2:	9001      	str	r0, [sp, #4]
   100b4:	1abb      	subs	r3, r7, r2
   100b6:	429e      	cmp	r6, r3
   100b8:	d826      	bhi.n	10108 <am_hal_queue_item_add+0x6c>
   100ba:	b196      	cbz	r6, 100e2 <am_hal_queue_item_add+0x46>
   100bc:	6823      	ldr	r3, [r4, #0]
   100be:	4629      	mov	r1, r5
   100c0:	b1c5      	cbz	r5, 100f4 <am_hal_queue_item_add+0x58>
   100c2:	19af      	adds	r7, r5, r6
   100c4:	6962      	ldr	r2, [r4, #20]
   100c6:	f811 0b01 	ldrb.w	r0, [r1], #1
   100ca:	54d0      	strb	r0, [r2, r3]
   100cc:	6823      	ldr	r3, [r4, #0]
   100ce:	68e5      	ldr	r5, [r4, #12]
   100d0:	3301      	adds	r3, #1
   100d2:	42b9      	cmp	r1, r7
   100d4:	fbb3 f0f5 	udiv	r0, r3, r5
   100d8:	fb05 3310 	mls	r3, r5, r0, r3
   100dc:	6023      	str	r3, [r4, #0]
   100de:	d1f1      	bne.n	100c4 <am_hal_queue_item_add+0x28>
   100e0:	68a2      	ldr	r2, [r4, #8]
   100e2:	4432      	add	r2, r6
   100e4:	60a2      	str	r2, [r4, #8]
   100e6:	2401      	movs	r4, #1
   100e8:	9801      	ldr	r0, [sp, #4]
   100ea:	f7ff fa45 	bl	f578 <am_hal_interrupt_master_set>
   100ee:	4620      	mov	r0, r4
   100f0:	b003      	add	sp, #12
   100f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100f4:	3101      	adds	r1, #1
   100f6:	3301      	adds	r3, #1
   100f8:	428e      	cmp	r6, r1
   100fa:	fbb3 f0f7 	udiv	r0, r3, r7
   100fe:	fb07 3310 	mls	r3, r7, r0, r3
   10102:	d1f7      	bne.n	100f4 <am_hal_queue_item_add+0x58>
   10104:	6023      	str	r3, [r4, #0]
   10106:	e7ec      	b.n	100e2 <am_hal_queue_item_add+0x46>
   10108:	2400      	movs	r4, #0
   1010a:	e7ed      	b.n	100e8 <am_hal_queue_item_add+0x4c>

0001010c <am_hal_queue_item_get>:
   1010c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1010e:	4604      	mov	r4, r0
   10110:	6906      	ldr	r6, [r0, #16]
   10112:	b083      	sub	sp, #12
   10114:	fb06 f602 	mul.w	r6, r6, r2
   10118:	460d      	mov	r5, r1
   1011a:	f7ff fa29 	bl	f570 <am_hal_interrupt_master_disable>
   1011e:	68a2      	ldr	r2, [r4, #8]
   10120:	9001      	str	r0, [sp, #4]
   10122:	4296      	cmp	r6, r2
   10124:	d81c      	bhi.n	10160 <am_hal_queue_item_get+0x54>
   10126:	b196      	cbz	r6, 1014e <am_hal_queue_item_get+0x42>
   10128:	6863      	ldr	r3, [r4, #4]
   1012a:	b1dd      	cbz	r5, 10164 <am_hal_queue_item_get+0x58>
   1012c:	4629      	mov	r1, r5
   1012e:	19af      	adds	r7, r5, r6
   10130:	6962      	ldr	r2, [r4, #20]
   10132:	5cd3      	ldrb	r3, [r2, r3]
   10134:	f801 3b01 	strb.w	r3, [r1], #1
   10138:	6863      	ldr	r3, [r4, #4]
   1013a:	68e5      	ldr	r5, [r4, #12]
   1013c:	3301      	adds	r3, #1
   1013e:	428f      	cmp	r7, r1
   10140:	fbb3 f0f5 	udiv	r0, r3, r5
   10144:	fb05 3310 	mls	r3, r5, r0, r3
   10148:	6063      	str	r3, [r4, #4]
   1014a:	d1f1      	bne.n	10130 <am_hal_queue_item_get+0x24>
   1014c:	68a2      	ldr	r2, [r4, #8]
   1014e:	1b92      	subs	r2, r2, r6
   10150:	60a2      	str	r2, [r4, #8]
   10152:	2401      	movs	r4, #1
   10154:	9801      	ldr	r0, [sp, #4]
   10156:	f7ff fa0f 	bl	f578 <am_hal_interrupt_master_set>
   1015a:	4620      	mov	r0, r4
   1015c:	b003      	add	sp, #12
   1015e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10160:	2400      	movs	r4, #0
   10162:	e7f7      	b.n	10154 <am_hal_queue_item_get+0x48>
   10164:	68e0      	ldr	r0, [r4, #12]
   10166:	4629      	mov	r1, r5
   10168:	3101      	adds	r1, #1
   1016a:	3301      	adds	r3, #1
   1016c:	428e      	cmp	r6, r1
   1016e:	fbb3 f5f0 	udiv	r5, r3, r0
   10172:	fb00 3315 	mls	r3, r0, r5, r3
   10176:	d1f7      	bne.n	10168 <am_hal_queue_item_get+0x5c>
   10178:	6063      	str	r3, [r4, #4]
   1017a:	e7e8      	b.n	1014e <am_hal_queue_item_get+0x42>

0001017c <arm_cfft_radix8by2_f32>:
   1017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10180:	ed2d 8b08 	vpush	{d8-d11}
   10184:	4607      	mov	r7, r0
   10186:	4608      	mov	r0, r1
   10188:	f8b7 e000 	ldrh.w	lr, [r7]
   1018c:	687a      	ldr	r2, [r7, #4]
   1018e:	ea4f 015e 	mov.w	r1, lr, lsr #1
   10192:	eb00 088e 	add.w	r8, r0, lr, lsl #2
   10196:	ea5f 0ede 	movs.w	lr, lr, lsr #3
   1019a:	f000 80b0 	beq.w	102fe <arm_cfft_radix8by2_f32+0x182>
   1019e:	008b      	lsls	r3, r1, #2
   101a0:	3310      	adds	r3, #16
   101a2:	18c6      	adds	r6, r0, r3
   101a4:	3210      	adds	r2, #16
   101a6:	4443      	add	r3, r8
   101a8:	f100 0510 	add.w	r5, r0, #16
   101ac:	f108 0410 	add.w	r4, r8, #16
   101b0:	ed54 1a04 	vldr	s3, [r4, #-16]
   101b4:	ed54 6a03 	vldr	s13, [r4, #-12]
   101b8:	ed13 4a04 	vldr	s8, [r3, #-16]
   101bc:	ed53 3a03 	vldr	s7, [r3, #-12]
   101c0:	ed53 5a02 	vldr	s11, [r3, #-8]
   101c4:	ed13 5a01 	vldr	s10, [r3, #-4]
   101c8:	ed14 0a02 	vldr	s0, [r4, #-8]
   101cc:	ed54 7a01 	vldr	s15, [r4, #-4]
   101d0:	ed16 2a04 	vldr	s4, [r6, #-16]
   101d4:	ed56 2a03 	vldr	s5, [r6, #-12]
   101d8:	ed15 6a03 	vldr	s12, [r5, #-12]
   101dc:	ed15 7a01 	vldr	s14, [r5, #-4]
   101e0:	ed15 3a04 	vldr	s6, [r5, #-16]
   101e4:	ed56 0a02 	vldr	s1, [r6, #-8]
   101e8:	ed16 1a01 	vldr	s2, [r6, #-4]
   101ec:	ed55 4a02 	vldr	s9, [r5, #-8]
   101f0:	ee73 ba21 	vadd.f32	s23, s6, s3
   101f4:	ee36 ba26 	vadd.f32	s22, s12, s13
   101f8:	ee37 aa27 	vadd.f32	s20, s14, s15
   101fc:	ee72 9a04 	vadd.f32	s19, s4, s8
   10200:	ee32 9aa3 	vadd.f32	s18, s5, s7
   10204:	ee31 8a05 	vadd.f32	s16, s2, s10
   10208:	ee74 aa80 	vadd.f32	s21, s9, s0
   1020c:	ee70 8aa5 	vadd.f32	s17, s1, s11
   10210:	ed45 ba04 	vstr	s23, [r5, #-16]
   10214:	ed05 ba03 	vstr	s22, [r5, #-12]
   10218:	ed45 aa02 	vstr	s21, [r5, #-8]
   1021c:	ed05 aa01 	vstr	s20, [r5, #-4]
   10220:	ed06 8a01 	vstr	s16, [r6, #-4]
   10224:	ed46 9a04 	vstr	s19, [r6, #-16]
   10228:	ed06 9a03 	vstr	s18, [r6, #-12]
   1022c:	ed46 8a02 	vstr	s17, [r6, #-8]
   10230:	ee76 6a66 	vsub.f32	s13, s12, s13
   10234:	ee73 3ae2 	vsub.f32	s7, s7, s5
   10238:	ed12 6a03 	vldr	s12, [r2, #-12]
   1023c:	ed52 2a04 	vldr	s5, [r2, #-16]
   10240:	ee33 3a61 	vsub.f32	s6, s6, s3
   10244:	ee34 4a42 	vsub.f32	s8, s8, s4
   10248:	ee26 8a86 	vmul.f32	s16, s13, s12
   1024c:	ee24 2a06 	vmul.f32	s4, s8, s12
   10250:	ee63 1a22 	vmul.f32	s3, s6, s5
   10254:	ee24 4a22 	vmul.f32	s8, s8, s5
   10258:	ee23 3a06 	vmul.f32	s6, s6, s12
   1025c:	ee66 6aa2 	vmul.f32	s13, s13, s5
   10260:	ee23 6a86 	vmul.f32	s12, s7, s12
   10264:	ee63 3aa2 	vmul.f32	s7, s7, s5
   10268:	ee36 6a04 	vadd.f32	s12, s12, s8
   1026c:	ee76 6ac3 	vsub.f32	s13, s13, s6
   10270:	ee72 3a63 	vsub.f32	s7, s4, s7
   10274:	ee71 2a88 	vadd.f32	s5, s3, s16
   10278:	ed44 6a03 	vstr	s13, [r4, #-12]
   1027c:	ed44 2a04 	vstr	s5, [r4, #-16]
   10280:	ed43 3a04 	vstr	s7, [r3, #-16]
   10284:	ed03 6a03 	vstr	s12, [r3, #-12]
   10288:	ee77 7a67 	vsub.f32	s15, s14, s15
   1028c:	ee75 6ae0 	vsub.f32	s13, s11, s1
   10290:	ed12 7a01 	vldr	s14, [r2, #-4]
   10294:	ed52 5a02 	vldr	s11, [r2, #-8]
   10298:	ee35 6a41 	vsub.f32	s12, s10, s2
   1029c:	ee74 4ac0 	vsub.f32	s9, s9, s0
   102a0:	ee67 3a87 	vmul.f32	s7, s15, s14
   102a4:	ee26 5a87 	vmul.f32	s10, s13, s14
   102a8:	ee24 4aa5 	vmul.f32	s8, s9, s11
   102ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
   102b0:	ee64 4a87 	vmul.f32	s9, s9, s14
   102b4:	ee66 6aa5 	vmul.f32	s13, s13, s11
   102b8:	ee26 7a07 	vmul.f32	s14, s12, s14
   102bc:	ee26 6a25 	vmul.f32	s12, s12, s11
   102c0:	ee77 7ae4 	vsub.f32	s15, s15, s9
   102c4:	ee74 5a23 	vadd.f32	s11, s8, s7
   102c8:	ee35 6a46 	vsub.f32	s12, s10, s12
   102cc:	ee37 7a26 	vadd.f32	s14, s14, s13
   102d0:	f1be 0e01 	subs.w	lr, lr, #1
   102d4:	ed44 5a02 	vstr	s11, [r4, #-8]
   102d8:	f105 0510 	add.w	r5, r5, #16
   102dc:	ed44 7a01 	vstr	s15, [r4, #-4]
   102e0:	f106 0610 	add.w	r6, r6, #16
   102e4:	ed03 6a02 	vstr	s12, [r3, #-8]
   102e8:	ed03 7a01 	vstr	s14, [r3, #-4]
   102ec:	f102 0210 	add.w	r2, r2, #16
   102f0:	f104 0410 	add.w	r4, r4, #16
   102f4:	f103 0310 	add.w	r3, r3, #16
   102f8:	f47f af5a 	bne.w	101b0 <arm_cfft_radix8by2_f32+0x34>
   102fc:	687a      	ldr	r2, [r7, #4]
   102fe:	b28c      	uxth	r4, r1
   10300:	4621      	mov	r1, r4
   10302:	2302      	movs	r3, #2
   10304:	f000 fbca 	bl	10a9c <arm_radix8_butterfly_f32>
   10308:	ecbd 8b08 	vpop	{d8-d11}
   1030c:	4621      	mov	r1, r4
   1030e:	687a      	ldr	r2, [r7, #4]
   10310:	4640      	mov	r0, r8
   10312:	2302      	movs	r3, #2
   10314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10318:	f000 bbc0 	b.w	10a9c <arm_radix8_butterfly_f32>

0001031c <arm_cfft_radix8by4_f32>:
   1031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10320:	ed2d 8b0a 	vpush	{d8-d12}
   10324:	8802      	ldrh	r2, [r0, #0]
   10326:	ed91 6a00 	vldr	s12, [r1]
   1032a:	b08f      	sub	sp, #60	; 0x3c
   1032c:	460f      	mov	r7, r1
   1032e:	0852      	lsrs	r2, r2, #1
   10330:	6841      	ldr	r1, [r0, #4]
   10332:	900c      	str	r0, [sp, #48]	; 0x30
   10334:	0093      	lsls	r3, r2, #2
   10336:	4638      	mov	r0, r7
   10338:	4418      	add	r0, r3
   1033a:	4606      	mov	r6, r0
   1033c:	9009      	str	r0, [sp, #36]	; 0x24
   1033e:	4418      	add	r0, r3
   10340:	edd0 6a00 	vldr	s13, [r0]
   10344:	ed96 4a00 	vldr	s8, [r6]
   10348:	edd6 2a01 	vldr	s5, [r6, #4]
   1034c:	edd0 7a01 	vldr	s15, [r0, #4]
   10350:	900a      	str	r0, [sp, #40]	; 0x28
   10352:	ee76 5a26 	vadd.f32	s11, s12, s13
   10356:	4604      	mov	r4, r0
   10358:	4625      	mov	r5, r4
   1035a:	441c      	add	r4, r3
   1035c:	edd4 4a00 	vldr	s9, [r4]
   10360:	ed97 7a01 	vldr	s14, [r7, #4]
   10364:	ed94 3a01 	vldr	s6, [r4, #4]
   10368:	9401      	str	r4, [sp, #4]
   1036a:	ee35 5a84 	vadd.f32	s10, s11, s8
   1036e:	4630      	mov	r0, r6
   10370:	ee35 5a24 	vadd.f32	s10, s10, s9
   10374:	463e      	mov	r6, r7
   10376:	ee15 ea10 	vmov	lr, s10
   1037a:	ee76 6a66 	vsub.f32	s13, s12, s13
   1037e:	f846 eb08 	str.w	lr, [r6], #8
   10382:	ee37 6a27 	vadd.f32	s12, s14, s15
   10386:	ed90 5a01 	vldr	s10, [r0, #4]
   1038a:	9605      	str	r6, [sp, #20]
   1038c:	ee77 7a67 	vsub.f32	s15, s14, s15
   10390:	9e01      	ldr	r6, [sp, #4]
   10392:	9707      	str	r7, [sp, #28]
   10394:	ee76 3aa2 	vadd.f32	s7, s13, s5
   10398:	ed96 2a01 	vldr	s4, [r6, #4]
   1039c:	ee36 7a05 	vadd.f32	s14, s12, s10
   103a0:	ee75 5ac4 	vsub.f32	s11, s11, s8
   103a4:	ee37 5ac4 	vsub.f32	s10, s15, s8
   103a8:	ee77 7a84 	vadd.f32	s15, s15, s8
   103ac:	ee33 4ac3 	vsub.f32	s8, s7, s6
   103b0:	4604      	mov	r4, r0
   103b2:	46a3      	mov	fp, r4
   103b4:	ee37 7a02 	vadd.f32	s14, s14, s4
   103b8:	ee35 5a24 	vadd.f32	s10, s10, s9
   103bc:	ee14 8a10 	vmov	r8, s8
   103c0:	46a4      	mov	ip, r4
   103c2:	ee75 5ae4 	vsub.f32	s11, s11, s9
   103c6:	ed87 7a01 	vstr	s14, [r7, #4]
   103ca:	f84b 8b08 	str.w	r8, [fp], #8
   103ce:	f1ac 0704 	sub.w	r7, ip, #4
   103d2:	ed8c 5a01 	vstr	s10, [ip, #4]
   103d6:	f101 0c08 	add.w	ip, r1, #8
   103da:	462c      	mov	r4, r5
   103dc:	f8cd c010 	str.w	ip, [sp, #16]
   103e0:	ee15 ca90 	vmov	ip, s11
   103e4:	ee36 6a62 	vsub.f32	s12, s12, s5
   103e8:	f844 cb08 	str.w	ip, [r4], #8
   103ec:	ee76 6ae2 	vsub.f32	s13, s13, s5
   103f0:	ee36 6a43 	vsub.f32	s12, s12, s6
   103f4:	9406      	str	r4, [sp, #24]
   103f6:	ee76 6a83 	vadd.f32	s13, s13, s6
   103fa:	f101 0410 	add.w	r4, r1, #16
   103fe:	0852      	lsrs	r2, r2, #1
   10400:	9402      	str	r4, [sp, #8]
   10402:	ed85 6a01 	vstr	s12, [r5, #4]
   10406:	462c      	mov	r4, r5
   10408:	f101 0518 	add.w	r5, r1, #24
   1040c:	920b      	str	r2, [sp, #44]	; 0x2c
   1040e:	46b2      	mov	sl, r6
   10410:	9503      	str	r5, [sp, #12]
   10412:	ee77 7ae4 	vsub.f32	s15, s15, s9
   10416:	3a02      	subs	r2, #2
   10418:	ee16 5a90 	vmov	r5, s13
   1041c:	46b6      	mov	lr, r6
   1041e:	4630      	mov	r0, r6
   10420:	0852      	lsrs	r2, r2, #1
   10422:	f84a 5b08 	str.w	r5, [sl], #8
   10426:	f1a0 0604 	sub.w	r6, r0, #4
   1042a:	edce 7a01 	vstr	s15, [lr, #4]
   1042e:	9208      	str	r2, [sp, #32]
   10430:	f000 8130 	beq.w	10694 <arm_cfft_radix8by4_f32+0x378>
   10434:	4691      	mov	r9, r2
   10436:	9a07      	ldr	r2, [sp, #28]
   10438:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1043c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   10440:	3b08      	subs	r3, #8
   10442:	f102 0510 	add.w	r5, r2, #16
   10446:	f101 0c20 	add.w	ip, r1, #32
   1044a:	f1a4 020c 	sub.w	r2, r4, #12
   1044e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
   10452:	4433      	add	r3, r6
   10454:	3410      	adds	r4, #16
   10456:	4650      	mov	r0, sl
   10458:	4659      	mov	r1, fp
   1045a:	ed55 3a02 	vldr	s7, [r5, #-8]
   1045e:	ed14 5a02 	vldr	s10, [r4, #-8]
   10462:	ed91 7a00 	vldr	s14, [r1]
   10466:	edd0 7a00 	vldr	s15, [r0]
   1046a:	ed54 5a01 	vldr	s11, [r4, #-4]
   1046e:	ed15 4a01 	vldr	s8, [r5, #-4]
   10472:	edd0 6a01 	vldr	s13, [r0, #4]
   10476:	ed91 6a01 	vldr	s12, [r1, #4]
   1047a:	ee33 8a85 	vadd.f32	s16, s7, s10
   1047e:	ee34 0a25 	vadd.f32	s0, s8, s11
   10482:	ee78 4a07 	vadd.f32	s9, s16, s14
   10486:	ee74 5a65 	vsub.f32	s11, s8, s11
   1048a:	ee74 4aa7 	vadd.f32	s9, s9, s15
   1048e:	ee33 5ac5 	vsub.f32	s10, s7, s10
   10492:	ed45 4a02 	vstr	s9, [r5, #-8]
   10496:	edd1 4a01 	vldr	s9, [r1, #4]
   1049a:	ed90 4a01 	vldr	s8, [r0, #4]
   1049e:	ee70 4a24 	vadd.f32	s9, s0, s9
   104a2:	ee75 aa06 	vadd.f32	s21, s10, s12
   104a6:	ee74 4a84 	vadd.f32	s9, s9, s8
   104aa:	ee35 aac7 	vsub.f32	s20, s11, s14
   104ae:	ed45 4a01 	vstr	s9, [r5, #-4]
   104b2:	edd6 1a00 	vldr	s3, [r6]
   104b6:	edd7 0a00 	vldr	s1, [r7]
   104ba:	ed92 4a02 	vldr	s8, [r2, #8]
   104be:	edd3 3a02 	vldr	s7, [r3, #8]
   104c2:	ed93 2a01 	vldr	s4, [r3, #4]
   104c6:	ed16 1a01 	vldr	s2, [r6, #-4]
   104ca:	edd2 2a01 	vldr	s5, [r2, #4]
   104ce:	ed57 9a01 	vldr	s19, [r7, #-4]
   104d2:	ee70 4aa1 	vadd.f32	s9, s1, s3
   104d6:	ee39 3a81 	vadd.f32	s6, s19, s2
   104da:	ee74 8a84 	vadd.f32	s17, s9, s8
   104de:	ee70 1ae1 	vsub.f32	s3, s1, s3
   104e2:	ee78 8aa3 	vadd.f32	s17, s17, s7
   104e6:	ee7a aae6 	vsub.f32	s21, s21, s13
   104ea:	ee18 aa90 	vmov	sl, s17
   104ee:	f847 a908 	str.w	sl, [r7], #-8
   104f2:	edd2 8a01 	vldr	s17, [r2, #4]
   104f6:	ed93 9a01 	vldr	s18, [r3, #4]
   104fa:	ee73 8a28 	vadd.f32	s17, s6, s17
   104fe:	ee3a aa27 	vadd.f32	s20, s20, s15
   10502:	ee78 8a89 	vadd.f32	s17, s17, s18
   10506:	ee74 0a63 	vsub.f32	s1, s8, s7
   1050a:	edc7 8a01 	vstr	s17, [r7, #4]
   1050e:	ed18 ba02 	vldr	s22, [r8, #-8]
   10512:	ed58 8a01 	vldr	s17, [r8, #-4]
   10516:	ee39 1ac1 	vsub.f32	s2, s19, s2
   1051a:	ee6a ba28 	vmul.f32	s23, s20, s17
   1051e:	ee2a ca8b 	vmul.f32	s24, s21, s22
   10522:	ee71 9ae2 	vsub.f32	s19, s3, s5
   10526:	ee31 9a20 	vadd.f32	s18, s2, s1
   1052a:	ee79 9a82 	vadd.f32	s19, s19, s4
   1052e:	ee3c ca2b 	vadd.f32	s24, s24, s23
   10532:	ee6a aaa8 	vmul.f32	s21, s21, s17
   10536:	ee69 baa8 	vmul.f32	s23, s19, s17
   1053a:	ee2a aa0b 	vmul.f32	s20, s20, s22
   1053e:	ee69 9a8b 	vmul.f32	s19, s19, s22
   10542:	ee69 8a28 	vmul.f32	s17, s18, s17
   10546:	ee29 ba0b 	vmul.f32	s22, s18, s22
   1054a:	ee1c aa10 	vmov	sl, s24
   1054e:	ee78 8aa9 	vadd.f32	s17, s17, s19
   10552:	f841 ab08 	str.w	sl, [r1], #8
   10556:	ee3a aa6a 	vsub.f32	s20, s20, s21
   1055a:	ee3b bacb 	vsub.f32	s22, s23, s22
   1055e:	ee34 4ac4 	vsub.f32	s8, s9, s8
   10562:	ee33 3a62 	vsub.f32	s6, s6, s5
   10566:	ed01 aa01 	vstr	s20, [r1, #-4]
   1056a:	edc2 8a01 	vstr	s17, [r2, #4]
   1056e:	ed82 ba02 	vstr	s22, [r2, #8]
   10572:	ed5c 4a04 	vldr	s9, [ip, #-16]
   10576:	ee74 3a63 	vsub.f32	s7, s8, s7
   1057a:	ee38 8a47 	vsub.f32	s16, s16, s14
   1057e:	ed1c 4a03 	vldr	s8, [ip, #-12]
   10582:	ee30 0a46 	vsub.f32	s0, s0, s12
   10586:	ee33 3a42 	vsub.f32	s6, s6, s4
   1058a:	ee38 8a67 	vsub.f32	s16, s16, s15
   1058e:	ee30 0a66 	vsub.f32	s0, s0, s13
   10592:	ee23 9ae4 	vnmul.f32	s18, s7, s9
   10596:	ee63 8a04 	vmul.f32	s17, s6, s8
   1059a:	ee28 aa24 	vmul.f32	s20, s16, s9
   1059e:	ee60 9a04 	vmul.f32	s19, s0, s8
   105a2:	ee28 8a04 	vmul.f32	s16, s16, s8
   105a6:	ee20 0a24 	vmul.f32	s0, s0, s9
   105aa:	ee63 3a84 	vmul.f32	s7, s7, s8
   105ae:	ee39 4a68 	vsub.f32	s8, s18, s17
   105b2:	ee7a 9a29 	vadd.f32	s19, s20, s19
   105b6:	ee14 aa10 	vmov	sl, s8
   105ba:	ee30 0a48 	vsub.f32	s0, s0, s16
   105be:	ee63 4a24 	vmul.f32	s9, s6, s9
   105c2:	ed44 9a02 	vstr	s19, [r4, #-8]
   105c6:	ee73 3ae4 	vsub.f32	s7, s7, s9
   105ca:	ed04 0a01 	vstr	s0, [r4, #-4]
   105ce:	f846 a908 	str.w	sl, [r6], #-8
   105d2:	ee35 6a46 	vsub.f32	s12, s10, s12
   105d6:	ee35 7a87 	vadd.f32	s14, s11, s14
   105da:	edc6 3a01 	vstr	s7, [r6, #4]
   105de:	ee76 6a26 	vadd.f32	s13, s12, s13
   105e2:	ee77 7a67 	vsub.f32	s15, s14, s15
   105e6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
   105ea:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
   105ee:	ee67 5a86 	vmul.f32	s11, s15, s12
   105f2:	ee26 5a87 	vmul.f32	s10, s13, s14
   105f6:	ee72 2a62 	vsub.f32	s5, s4, s5
   105fa:	ee30 1ac1 	vsub.f32	s2, s1, s2
   105fe:	ee72 2ae1 	vsub.f32	s5, s5, s3
   10602:	ee75 5a25 	vadd.f32	s11, s10, s11
   10606:	ee62 0a86 	vmul.f32	s1, s5, s12
   1060a:	ee66 6a86 	vmul.f32	s13, s13, s12
   1060e:	ee67 7a87 	vmul.f32	s15, s15, s14
   10612:	ee21 6a06 	vmul.f32	s12, s2, s12
   10616:	ee62 2a87 	vmul.f32	s5, s5, s14
   1061a:	ee21 1a07 	vmul.f32	s2, s2, s14
   1061e:	ee15 aa90 	vmov	sl, s11
   10622:	ee77 7ae6 	vsub.f32	s15, s15, s13
   10626:	f840 ab08 	str.w	sl, [r0], #8
   1062a:	ee30 1ac1 	vsub.f32	s2, s1, s2
   1062e:	ee76 2a22 	vadd.f32	s5, s12, s5
   10632:	f1b9 0901 	subs.w	r9, r9, #1
   10636:	ed40 7a01 	vstr	s15, [r0, #-4]
   1063a:	f105 0508 	add.w	r5, r5, #8
   1063e:	ed83 1a02 	vstr	s2, [r3, #8]
   10642:	edc3 2a01 	vstr	s5, [r3, #4]
   10646:	f108 0808 	add.w	r8, r8, #8
   1064a:	f1a2 0208 	sub.w	r2, r2, #8
   1064e:	f10c 0c10 	add.w	ip, ip, #16
   10652:	f104 0408 	add.w	r4, r4, #8
   10656:	f10e 0e18 	add.w	lr, lr, #24
   1065a:	f1a3 0308 	sub.w	r3, r3, #8
   1065e:	f47f aefc 	bne.w	1045a <arm_cfft_radix8by4_f32+0x13e>
   10662:	9908      	ldr	r1, [sp, #32]
   10664:	9802      	ldr	r0, [sp, #8]
   10666:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   1066a:	00cb      	lsls	r3, r1, #3
   1066c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10670:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   10674:	9102      	str	r1, [sp, #8]
   10676:	9905      	ldr	r1, [sp, #20]
   10678:	4419      	add	r1, r3
   1067a:	9105      	str	r1, [sp, #20]
   1067c:	9904      	ldr	r1, [sp, #16]
   1067e:	4419      	add	r1, r3
   10680:	9104      	str	r1, [sp, #16]
   10682:	9906      	ldr	r1, [sp, #24]
   10684:	449b      	add	fp, r3
   10686:	4419      	add	r1, r3
   10688:	449a      	add	sl, r3
   1068a:	9b03      	ldr	r3, [sp, #12]
   1068c:	9106      	str	r1, [sp, #24]
   1068e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10692:	9303      	str	r3, [sp, #12]
   10694:	9a05      	ldr	r2, [sp, #20]
   10696:	9806      	ldr	r0, [sp, #24]
   10698:	ed92 4a00 	vldr	s8, [r2]
   1069c:	ed90 7a00 	vldr	s14, [r0]
   106a0:	ed9b 3a00 	vldr	s6, [fp]
   106a4:	edda 3a00 	vldr	s7, [sl]
   106a8:	edd2 4a01 	vldr	s9, [r2, #4]
   106ac:	edd0 6a01 	vldr	s13, [r0, #4]
   106b0:	ed9a 2a01 	vldr	s4, [sl, #4]
   106b4:	eddb 7a01 	vldr	s15, [fp, #4]
   106b8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
   106bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   106be:	ee34 6a07 	vadd.f32	s12, s8, s14
   106c2:	ee74 5aa6 	vadd.f32	s11, s9, s13
   106c6:	ee36 5a03 	vadd.f32	s10, s12, s6
   106ca:	ee74 6ae6 	vsub.f32	s13, s9, s13
   106ce:	ee35 5a23 	vadd.f32	s10, s10, s7
   106d2:	ee34 7a47 	vsub.f32	s14, s8, s14
   106d6:	ed82 5a00 	vstr	s10, [r2]
   106da:	ed9b 5a01 	vldr	s10, [fp, #4]
   106de:	edda 4a01 	vldr	s9, [sl, #4]
   106e2:	ee35 5a85 	vadd.f32	s10, s11, s10
   106e6:	ee37 4a27 	vadd.f32	s8, s14, s15
   106ea:	ee35 5a24 	vadd.f32	s10, s10, s9
   106ee:	ee76 4ac3 	vsub.f32	s9, s13, s6
   106f2:	ed82 5a01 	vstr	s10, [r2, #4]
   106f6:	9a04      	ldr	r2, [sp, #16]
   106f8:	ee34 5aa3 	vadd.f32	s10, s9, s7
   106fc:	edd2 1a00 	vldr	s3, [r2]
   10700:	edd2 2a01 	vldr	s5, [r2, #4]
   10704:	9a02      	ldr	r2, [sp, #8]
   10706:	ee34 4a42 	vsub.f32	s8, s8, s4
   1070a:	ee36 6a43 	vsub.f32	s12, s12, s6
   1070e:	ee64 4a21 	vmul.f32	s9, s8, s3
   10712:	ee24 4a22 	vmul.f32	s8, s8, s5
   10716:	ee65 2a22 	vmul.f32	s5, s10, s5
   1071a:	ee25 5a21 	vmul.f32	s10, s10, s3
   1071e:	ee74 2aa2 	vadd.f32	s5, s9, s5
   10722:	ee35 5a44 	vsub.f32	s10, s10, s8
   10726:	ee75 5ae7 	vsub.f32	s11, s11, s15
   1072a:	edcb 2a00 	vstr	s5, [fp]
   1072e:	ed8b 5a01 	vstr	s10, [fp, #4]
   10732:	ed92 4a01 	vldr	s8, [r2, #4]
   10736:	ed92 5a00 	vldr	s10, [r2]
   1073a:	9a03      	ldr	r2, [sp, #12]
   1073c:	ee36 6a63 	vsub.f32	s12, s12, s7
   10740:	ee75 5ac2 	vsub.f32	s11, s11, s4
   10744:	ee66 4a05 	vmul.f32	s9, s12, s10
   10748:	ee25 5a85 	vmul.f32	s10, s11, s10
   1074c:	ee26 6a04 	vmul.f32	s12, s12, s8
   10750:	ee65 5a84 	vmul.f32	s11, s11, s8
   10754:	ee35 6a46 	vsub.f32	s12, s10, s12
   10758:	ee74 5aa5 	vadd.f32	s11, s9, s11
   1075c:	ee76 6a83 	vadd.f32	s13, s13, s6
   10760:	ee37 7a67 	vsub.f32	s14, s14, s15
   10764:	ed80 6a01 	vstr	s12, [r0, #4]
   10768:	edc0 5a00 	vstr	s11, [r0]
   1076c:	edd2 5a01 	vldr	s11, [r2, #4]
   10770:	9807      	ldr	r0, [sp, #28]
   10772:	ee77 7a02 	vadd.f32	s15, s14, s4
   10776:	ee36 7ae3 	vsub.f32	s14, s13, s7
   1077a:	edd2 6a00 	vldr	s13, [r2]
   1077e:	ee27 6aa6 	vmul.f32	s12, s15, s13
   10782:	ee67 6a26 	vmul.f32	s13, s14, s13
   10786:	ee67 7aa5 	vmul.f32	s15, s15, s11
   1078a:	ee27 7a25 	vmul.f32	s14, s14, s11
   1078e:	ee76 7ae7 	vsub.f32	s15, s13, s15
   10792:	ee36 7a07 	vadd.f32	s14, s12, s14
   10796:	edca 7a01 	vstr	s15, [sl, #4]
   1079a:	ed8a 7a00 	vstr	s14, [sl]
   1079e:	6872      	ldr	r2, [r6, #4]
   107a0:	4621      	mov	r1, r4
   107a2:	2304      	movs	r3, #4
   107a4:	f000 f97a 	bl	10a9c <arm_radix8_butterfly_f32>
   107a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   107aa:	6872      	ldr	r2, [r6, #4]
   107ac:	4621      	mov	r1, r4
   107ae:	2304      	movs	r3, #4
   107b0:	f000 f974 	bl	10a9c <arm_radix8_butterfly_f32>
   107b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   107b6:	6872      	ldr	r2, [r6, #4]
   107b8:	4621      	mov	r1, r4
   107ba:	2304      	movs	r3, #4
   107bc:	f000 f96e 	bl	10a9c <arm_radix8_butterfly_f32>
   107c0:	6872      	ldr	r2, [r6, #4]
   107c2:	9801      	ldr	r0, [sp, #4]
   107c4:	4621      	mov	r1, r4
   107c6:	2304      	movs	r3, #4
   107c8:	b00f      	add	sp, #60	; 0x3c
   107ca:	ecbd 8b0a 	vpop	{d8-d12}
   107ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107d2:	f000 b963 	b.w	10a9c <arm_radix8_butterfly_f32>
   107d6:	bf00      	nop

000107d8 <arm_cfft_f32>:
   107d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107dc:	2a01      	cmp	r2, #1
   107de:	4606      	mov	r6, r0
   107e0:	4617      	mov	r7, r2
   107e2:	460c      	mov	r4, r1
   107e4:	4698      	mov	r8, r3
   107e6:	8805      	ldrh	r5, [r0, #0]
   107e8:	d054      	beq.n	10894 <arm_cfft_f32+0xbc>
   107ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   107ee:	d04c      	beq.n	1088a <arm_cfft_f32+0xb2>
   107f0:	d916      	bls.n	10820 <arm_cfft_f32+0x48>
   107f2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   107f6:	d01a      	beq.n	1082e <arm_cfft_f32+0x56>
   107f8:	d95c      	bls.n	108b4 <arm_cfft_f32+0xdc>
   107fa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   107fe:	d044      	beq.n	1088a <arm_cfft_f32+0xb2>
   10800:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   10804:	d105      	bne.n	10812 <arm_cfft_f32+0x3a>
   10806:	2301      	movs	r3, #1
   10808:	6872      	ldr	r2, [r6, #4]
   1080a:	4629      	mov	r1, r5
   1080c:	4620      	mov	r0, r4
   1080e:	f000 f945 	bl	10a9c <arm_radix8_butterfly_f32>
   10812:	f1b8 0f00 	cmp.w	r8, #0
   10816:	d111      	bne.n	1083c <arm_cfft_f32+0x64>
   10818:	2f01      	cmp	r7, #1
   1081a:	d016      	beq.n	1084a <arm_cfft_f32+0x72>
   1081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10820:	2d20      	cmp	r5, #32
   10822:	d032      	beq.n	1088a <arm_cfft_f32+0xb2>
   10824:	d94a      	bls.n	108bc <arm_cfft_f32+0xe4>
   10826:	2d40      	cmp	r5, #64	; 0x40
   10828:	d0ed      	beq.n	10806 <arm_cfft_f32+0x2e>
   1082a:	2d80      	cmp	r5, #128	; 0x80
   1082c:	d1f1      	bne.n	10812 <arm_cfft_f32+0x3a>
   1082e:	4621      	mov	r1, r4
   10830:	4630      	mov	r0, r6
   10832:	f7ff fca3 	bl	1017c <arm_cfft_radix8by2_f32>
   10836:	f1b8 0f00 	cmp.w	r8, #0
   1083a:	d0ed      	beq.n	10818 <arm_cfft_f32+0x40>
   1083c:	68b2      	ldr	r2, [r6, #8]
   1083e:	89b1      	ldrh	r1, [r6, #12]
   10840:	4620      	mov	r0, r4
   10842:	f7fb fc5d 	bl	c100 <arm_bitreversal_32>
   10846:	2f01      	cmp	r7, #1
   10848:	d1e8      	bne.n	1081c <arm_cfft_f32+0x44>
   1084a:	ee07 5a90 	vmov	s15, r5
   1084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10856:	eec7 6a27 	vdiv.f32	s13, s14, s15
   1085a:	2d00      	cmp	r5, #0
   1085c:	d0de      	beq.n	1081c <arm_cfft_f32+0x44>
   1085e:	f104 0108 	add.w	r1, r4, #8
   10862:	2300      	movs	r3, #0
   10864:	3301      	adds	r3, #1
   10866:	429d      	cmp	r5, r3
   10868:	f101 0108 	add.w	r1, r1, #8
   1086c:	ed11 7a04 	vldr	s14, [r1, #-16]
   10870:	ed51 7a03 	vldr	s15, [r1, #-12]
   10874:	ee27 7a26 	vmul.f32	s14, s14, s13
   10878:	ee67 7ae6 	vnmul.f32	s15, s15, s13
   1087c:	ed01 7a04 	vstr	s14, [r1, #-16]
   10880:	ed41 7a03 	vstr	s15, [r1, #-12]
   10884:	d1ee      	bne.n	10864 <arm_cfft_f32+0x8c>
   10886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1088a:	4621      	mov	r1, r4
   1088c:	4630      	mov	r0, r6
   1088e:	f7ff fd45 	bl	1031c <arm_cfft_radix8by4_f32>
   10892:	e7be      	b.n	10812 <arm_cfft_f32+0x3a>
   10894:	b1ad      	cbz	r5, 108c2 <arm_cfft_f32+0xea>
   10896:	f101 030c 	add.w	r3, r1, #12
   1089a:	2200      	movs	r2, #0
   1089c:	ed53 7a02 	vldr	s15, [r3, #-8]
   108a0:	3201      	adds	r2, #1
   108a2:	eef1 7a67 	vneg.f32	s15, s15
   108a6:	4295      	cmp	r5, r2
   108a8:	ed43 7a02 	vstr	s15, [r3, #-8]
   108ac:	f103 0308 	add.w	r3, r3, #8
   108b0:	d1f4      	bne.n	1089c <arm_cfft_f32+0xc4>
   108b2:	e79a      	b.n	107ea <arm_cfft_f32+0x12>
   108b4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   108b8:	d0a5      	beq.n	10806 <arm_cfft_f32+0x2e>
   108ba:	e7aa      	b.n	10812 <arm_cfft_f32+0x3a>
   108bc:	2d10      	cmp	r5, #16
   108be:	d0b6      	beq.n	1082e <arm_cfft_f32+0x56>
   108c0:	e7a7      	b.n	10812 <arm_cfft_f32+0x3a>
   108c2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   108c6:	d894      	bhi.n	107f2 <arm_cfft_f32+0x1a>
   108c8:	e7aa      	b.n	10820 <arm_cfft_f32+0x48>
   108ca:	bf00      	nop

000108cc <arm_cmplx_mag_f32>:
   108cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
   108d4:	b084      	sub	sp, #16
   108d6:	d07f      	beq.n	109d8 <arm_cmplx_mag_f32+0x10c>
   108d8:	2700      	movs	r7, #0
   108da:	f100 0420 	add.w	r4, r0, #32
   108de:	f101 0510 	add.w	r5, r1, #16
   108e2:	4646      	mov	r6, r8
   108e4:	e05a      	b.n	1099c <arm_cmplx_mag_f32+0xd0>
   108e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
   108ea:	eeb4 0a40 	vcmp.f32	s0, s0
   108ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108f2:	f040 80a4 	bne.w	10a3e <arm_cmplx_mag_f32+0x172>
   108f6:	ed05 0a04 	vstr	s0, [r5, #-16]
   108fa:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
   108fe:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
   10902:	ee67 7aa7 	vmul.f32	s15, s15, s15
   10906:	ee20 0a00 	vmul.f32	s0, s0, s0
   1090a:	ee77 7a80 	vadd.f32	s15, s15, s0
   1090e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   10912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10916:	f2c0 808f 	blt.w	10a38 <arm_cmplx_mag_f32+0x16c>
   1091a:	eeb1 0ae7 	vsqrt.f32	s0, s15
   1091e:	eeb4 0a40 	vcmp.f32	s0, s0
   10922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10926:	f040 80af 	bne.w	10a88 <arm_cmplx_mag_f32+0x1bc>
   1092a:	ed05 0a03 	vstr	s0, [r5, #-12]
   1092e:	ed54 7a04 	vldr	s15, [r4, #-16]
   10932:	ed14 0a03 	vldr	s0, [r4, #-12]
   10936:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1093a:	ee20 0a00 	vmul.f32	s0, s0, s0
   1093e:	ee77 7a80 	vadd.f32	s15, s15, s0
   10942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   10946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1094a:	db72      	blt.n	10a32 <arm_cmplx_mag_f32+0x166>
   1094c:	eeb1 0ae7 	vsqrt.f32	s0, s15
   10950:	eeb4 0a40 	vcmp.f32	s0, s0
   10954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10958:	f040 808c 	bne.w	10a74 <arm_cmplx_mag_f32+0x1a8>
   1095c:	ed05 0a02 	vstr	s0, [r5, #-8]
   10960:	ed54 7a02 	vldr	s15, [r4, #-8]
   10964:	ed14 0a01 	vldr	s0, [r4, #-4]
   10968:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1096c:	ee20 0a00 	vmul.f32	s0, s0, s0
   10970:	ee77 7a80 	vadd.f32	s15, s15, s0
   10974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   10978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1097c:	db20      	blt.n	109c0 <arm_cmplx_mag_f32+0xf4>
   1097e:	eeb1 0ae7 	vsqrt.f32	s0, s15
   10982:	eeb4 0a40 	vcmp.f32	s0, s0
   10986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1098a:	d169      	bne.n	10a60 <arm_cmplx_mag_f32+0x194>
   1098c:	3e01      	subs	r6, #1
   1098e:	ed05 0a01 	vstr	s0, [r5, #-4]
   10992:	f104 0420 	add.w	r4, r4, #32
   10996:	f105 0510 	add.w	r5, r5, #16
   1099a:	d019      	beq.n	109d0 <arm_cmplx_mag_f32+0x104>
   1099c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
   109a0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
   109a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
   109a8:	ee20 0a00 	vmul.f32	s0, s0, s0
   109ac:	ee77 7a80 	vadd.f32	s15, s15, s0
   109b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   109b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109b8:	da95      	bge.n	108e6 <arm_cmplx_mag_f32+0x1a>
   109ba:	f845 7c10 	str.w	r7, [r5, #-16]
   109be:	e79c      	b.n	108fa <arm_cmplx_mag_f32+0x2e>
   109c0:	3e01      	subs	r6, #1
   109c2:	f845 7c04 	str.w	r7, [r5, #-4]
   109c6:	f104 0420 	add.w	r4, r4, #32
   109ca:	f105 0510 	add.w	r5, r5, #16
   109ce:	d1e5      	bne.n	1099c <arm_cmplx_mag_f32+0xd0>
   109d0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
   109d4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   109d8:	f012 0503 	ands.w	r5, r2, #3
   109dc:	d026      	beq.n	10a2c <arm_cmplx_mag_f32+0x160>
   109de:	2600      	movs	r6, #0
   109e0:	f100 0408 	add.w	r4, r0, #8
   109e4:	e00c      	b.n	10a00 <arm_cmplx_mag_f32+0x134>
   109e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
   109ea:	eeb4 0a40 	vcmp.f32	s0, s0
   109ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109f2:	d12e      	bne.n	10a52 <arm_cmplx_mag_f32+0x186>
   109f4:	3d01      	subs	r5, #1
   109f6:	ed01 0a01 	vstr	s0, [r1, #-4]
   109fa:	f104 0408 	add.w	r4, r4, #8
   109fe:	d015      	beq.n	10a2c <arm_cmplx_mag_f32+0x160>
   10a00:	ed54 7a02 	vldr	s15, [r4, #-8]
   10a04:	ed14 0a01 	vldr	s0, [r4, #-4]
   10a08:	ee67 7aa7 	vmul.f32	s15, s15, s15
   10a0c:	ee20 0a00 	vmul.f32	s0, s0, s0
   10a10:	3104      	adds	r1, #4
   10a12:	ee77 7a80 	vadd.f32	s15, s15, s0
   10a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   10a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a1e:	dae2      	bge.n	109e6 <arm_cmplx_mag_f32+0x11a>
   10a20:	3d01      	subs	r5, #1
   10a22:	f841 6c04 	str.w	r6, [r1, #-4]
   10a26:	f104 0408 	add.w	r4, r4, #8
   10a2a:	d1e9      	bne.n	10a00 <arm_cmplx_mag_f32+0x134>
   10a2c:	b004      	add	sp, #16
   10a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a32:	f845 7c08 	str.w	r7, [r5, #-8]
   10a36:	e793      	b.n	10960 <arm_cmplx_mag_f32+0x94>
   10a38:	f845 7c0c 	str.w	r7, [r5, #-12]
   10a3c:	e777      	b.n	1092e <arm_cmplx_mag_f32+0x62>
   10a3e:	eeb0 0a67 	vmov.f32	s0, s15
   10a42:	9203      	str	r2, [sp, #12]
   10a44:	9102      	str	r1, [sp, #8]
   10a46:	9001      	str	r0, [sp, #4]
   10a48:	f000 fb1a 	bl	11080 <sqrtf>
   10a4c:	a801      	add	r0, sp, #4
   10a4e:	c807      	ldmia	r0, {r0, r1, r2}
   10a50:	e751      	b.n	108f6 <arm_cmplx_mag_f32+0x2a>
   10a52:	eeb0 0a67 	vmov.f32	s0, s15
   10a56:	9101      	str	r1, [sp, #4]
   10a58:	f000 fb12 	bl	11080 <sqrtf>
   10a5c:	9901      	ldr	r1, [sp, #4]
   10a5e:	e7c9      	b.n	109f4 <arm_cmplx_mag_f32+0x128>
   10a60:	eeb0 0a67 	vmov.f32	s0, s15
   10a64:	9203      	str	r2, [sp, #12]
   10a66:	9102      	str	r1, [sp, #8]
   10a68:	9001      	str	r0, [sp, #4]
   10a6a:	f000 fb09 	bl	11080 <sqrtf>
   10a6e:	a801      	add	r0, sp, #4
   10a70:	c807      	ldmia	r0, {r0, r1, r2}
   10a72:	e78b      	b.n	1098c <arm_cmplx_mag_f32+0xc0>
   10a74:	eeb0 0a67 	vmov.f32	s0, s15
   10a78:	9203      	str	r2, [sp, #12]
   10a7a:	9102      	str	r1, [sp, #8]
   10a7c:	9001      	str	r0, [sp, #4]
   10a7e:	f000 faff 	bl	11080 <sqrtf>
   10a82:	a801      	add	r0, sp, #4
   10a84:	c807      	ldmia	r0, {r0, r1, r2}
   10a86:	e769      	b.n	1095c <arm_cmplx_mag_f32+0x90>
   10a88:	eeb0 0a67 	vmov.f32	s0, s15
   10a8c:	9203      	str	r2, [sp, #12]
   10a8e:	9102      	str	r1, [sp, #8]
   10a90:	9001      	str	r0, [sp, #4]
   10a92:	f000 faf5 	bl	11080 <sqrtf>
   10a96:	a801      	add	r0, sp, #4
   10a98:	c807      	ldmia	r0, {r0, r1, r2}
   10a9a:	e746      	b.n	1092a <arm_cmplx_mag_f32+0x5e>

00010a9c <arm_radix8_butterfly_f32>:
   10a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aa0:	ed2d 8b10 	vpush	{d8-d15}
   10aa4:	461c      	mov	r4, r3
   10aa6:	b09d      	sub	sp, #116	; 0x74
   10aa8:	4603      	mov	r3, r0
   10aaa:	3304      	adds	r3, #4
   10aac:	ed9f bac4 	vldr	s22, [pc, #784]	; 10dc0 <arm_radix8_butterfly_f32+0x324>
   10ab0:	9019      	str	r0, [sp, #100]	; 0x64
   10ab2:	921a      	str	r2, [sp, #104]	; 0x68
   10ab4:	468b      	mov	fp, r1
   10ab6:	931b      	str	r3, [sp, #108]	; 0x6c
   10ab8:	468a      	mov	sl, r1
   10aba:	46a1      	mov	r9, r4
   10abc:	4607      	mov	r7, r0
   10abe:	ea4f 03db 	mov.w	r3, fp, lsr #3
   10ac2:	ea4f 0843 	mov.w	r8, r3, lsl #1
   10ac6:	eb03 0508 	add.w	r5, r3, r8
   10aca:	195c      	adds	r4, r3, r5
   10acc:	00de      	lsls	r6, r3, #3
   10ace:	191a      	adds	r2, r3, r4
   10ad0:	9600      	str	r6, [sp, #0]
   10ad2:	1898      	adds	r0, r3, r2
   10ad4:	4619      	mov	r1, r3
   10ad6:	9e00      	ldr	r6, [sp, #0]
   10ad8:	9311      	str	r3, [sp, #68]	; 0x44
   10ada:	4401      	add	r1, r0
   10adc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   10ae0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   10ae4:	19be      	adds	r6, r7, r6
   10ae6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
   10aea:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
   10aee:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
   10af2:	9f00      	ldr	r7, [sp, #0]
   10af4:	011b      	lsls	r3, r3, #4
   10af6:	eb06 0e07 	add.w	lr, r6, r7
   10afa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   10afc:	9302      	str	r3, [sp, #8]
   10afe:	3204      	adds	r2, #4
   10b00:	3104      	adds	r1, #4
   10b02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   10b06:	f04f 0c00 	mov.w	ip, #0
   10b0a:	edde 7a00 	vldr	s15, [lr]
   10b0e:	edd6 6a00 	vldr	s13, [r6]
   10b12:	ed95 2a00 	vldr	s4, [r5]
   10b16:	ed17 aa01 	vldr	s20, [r7, #-4]
   10b1a:	edd4 4a00 	vldr	s9, [r4]
   10b1e:	ed90 5a00 	vldr	s10, [r0]
   10b22:	ed12 7a01 	vldr	s14, [r2, #-4]
   10b26:	ed51 0a01 	vldr	s1, [r1, #-4]
   10b2a:	ee77 8a85 	vadd.f32	s17, s15, s10
   10b2e:	ee76 3a87 	vadd.f32	s7, s13, s14
   10b32:	ee32 4a20 	vadd.f32	s8, s4, s1
   10b36:	ee3a 3a24 	vadd.f32	s6, s20, s9
   10b3a:	ee33 6a84 	vadd.f32	s12, s7, s8
   10b3e:	ee73 5a28 	vadd.f32	s11, s6, s17
   10b42:	ee36 7ac7 	vsub.f32	s14, s13, s14
   10b46:	ee75 6a86 	vadd.f32	s13, s11, s12
   10b4a:	ee75 5ac6 	vsub.f32	s11, s11, s12
   10b4e:	ed47 6a01 	vstr	s13, [r7, #-4]
   10b52:	edc4 5a00 	vstr	s11, [r4]
   10b56:	ed92 9a00 	vldr	s18, [r2]
   10b5a:	ed95 1a01 	vldr	s2, [r5, #4]
   10b5e:	edd6 5a01 	vldr	s11, [r6, #4]
   10b62:	ed91 6a00 	vldr	s12, [r1]
   10b66:	edd7 2a00 	vldr	s5, [r7]
   10b6a:	edd4 1a01 	vldr	s3, [r4, #4]
   10b6e:	edde 6a01 	vldr	s13, [lr, #4]
   10b72:	edd0 9a01 	vldr	s19, [r0, #4]
   10b76:	ee72 0a60 	vsub.f32	s1, s4, s1
   10b7a:	ee71 aa46 	vsub.f32	s21, s2, s12
   10b7e:	ee35 2ac9 	vsub.f32	s4, s11, s18
   10b82:	ee37 0a60 	vsub.f32	s0, s14, s1
   10b86:	ee32 8a2a 	vadd.f32	s16, s4, s21
   10b8a:	ee37 7a20 	vadd.f32	s14, s14, s1
   10b8e:	ee32 2a6a 	vsub.f32	s4, s4, s21
   10b92:	ee37 5ac5 	vsub.f32	s10, s15, s10
   10b96:	ee75 5a89 	vadd.f32	s11, s11, s18
   10b9a:	ee60 0a0b 	vmul.f32	s1, s0, s22
   10b9e:	ee7a 4a64 	vsub.f32	s9, s20, s9
   10ba2:	ee31 6a06 	vadd.f32	s12, s2, s12
   10ba6:	ee36 9aa9 	vadd.f32	s18, s13, s19
   10baa:	ee32 1aa1 	vadd.f32	s2, s5, s3
   10bae:	ee76 6ae9 	vsub.f32	s13, s13, s19
   10bb2:	ee72 1ae1 	vsub.f32	s3, s5, s3
   10bb6:	ee28 8a0b 	vmul.f32	s16, s16, s22
   10bba:	ee62 2a0b 	vmul.f32	s5, s4, s22
   10bbe:	ee67 7a0b 	vmul.f32	s15, s14, s22
   10bc2:	ee33 3a68 	vsub.f32	s6, s6, s17
   10bc6:	ee36 0a88 	vadd.f32	s0, s13, s16
   10bca:	ee75 8a86 	vadd.f32	s17, s11, s12
   10bce:	ee36 7ac8 	vsub.f32	s14, s13, s16
   10bd2:	ee33 4ac4 	vsub.f32	s8, s7, s8
   10bd6:	ee74 6ae0 	vsub.f32	s13, s9, s1
   10bda:	ee74 3aa0 	vadd.f32	s7, s9, s1
   10bde:	ee35 6ac6 	vsub.f32	s12, s11, s12
   10be2:	ee75 4a27 	vadd.f32	s9, s10, s15
   10be6:	ee71 5a49 	vsub.f32	s11, s2, s18
   10bea:	ee31 2a09 	vadd.f32	s4, s2, s18
   10bee:	ee75 7a67 	vsub.f32	s15, s10, s15
   10bf2:	ee31 1aa2 	vadd.f32	s2, s3, s5
   10bf6:	ee71 2ae2 	vsub.f32	s5, s3, s5
   10bfa:	ee73 0a06 	vadd.f32	s1, s6, s12
   10bfe:	ee75 1ac4 	vsub.f32	s3, s11, s8
   10c02:	ee36 5a87 	vadd.f32	s10, s13, s14
   10c06:	ee32 8a28 	vadd.f32	s16, s4, s17
   10c0a:	ee33 6a46 	vsub.f32	s12, s6, s12
   10c0e:	ee34 4a25 	vadd.f32	s8, s8, s11
   10c12:	ee33 3a80 	vadd.f32	s6, s7, s0
   10c16:	ee36 7ac7 	vsub.f32	s14, s13, s14
   10c1a:	ee71 5a64 	vsub.f32	s11, s2, s9
   10c1e:	ee72 6ae7 	vsub.f32	s13, s5, s15
   10c22:	ee32 2a68 	vsub.f32	s4, s4, s17
   10c26:	ee73 3ac0 	vsub.f32	s7, s7, s0
   10c2a:	ee74 4a81 	vadd.f32	s9, s9, s2
   10c2e:	ee77 7aa2 	vadd.f32	s15, s15, s5
   10c32:	44dc      	add	ip, fp
   10c34:	45e2      	cmp	sl, ip
   10c36:	ed87 8a00 	vstr	s16, [r7]
   10c3a:	ed84 2a01 	vstr	s4, [r4, #4]
   10c3e:	441f      	add	r7, r3
   10c40:	edce 0a00 	vstr	s1, [lr]
   10c44:	441c      	add	r4, r3
   10c46:	ed80 6a00 	vstr	s12, [r0]
   10c4a:	edce 1a01 	vstr	s3, [lr, #4]
   10c4e:	ed80 4a01 	vstr	s8, [r0, #4]
   10c52:	449e      	add	lr, r3
   10c54:	ed86 3a00 	vstr	s6, [r6]
   10c58:	4418      	add	r0, r3
   10c5a:	ed41 3a01 	vstr	s7, [r1, #-4]
   10c5e:	ed02 5a01 	vstr	s10, [r2, #-4]
   10c62:	ed85 7a00 	vstr	s14, [r5]
   10c66:	edc6 5a01 	vstr	s11, [r6, #4]
   10c6a:	edc1 4a00 	vstr	s9, [r1]
   10c6e:	441e      	add	r6, r3
   10c70:	edc2 6a00 	vstr	s13, [r2]
   10c74:	4419      	add	r1, r3
   10c76:	edc5 7a01 	vstr	s15, [r5, #4]
   10c7a:	441a      	add	r2, r3
   10c7c:	441d      	add	r5, r3
   10c7e:	f63f af44 	bhi.w	10b0a <arm_radix8_butterfly_f32+0x6e>
   10c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10c84:	2a07      	cmp	r2, #7
   10c86:	f240 81f5 	bls.w	11074 <arm_radix8_butterfly_f32+0x5d8>
   10c8a:	f108 0101 	add.w	r1, r8, #1
   10c8e:	188f      	adds	r7, r1, r2
   10c90:	eb09 0849 	add.w	r8, r9, r9, lsl #1
   10c94:	19d6      	adds	r6, r2, r7
   10c96:	eb08 0c09 	add.w	ip, r8, r9
   10c9a:	1994      	adds	r4, r2, r6
   10c9c:	eb0c 0e09 	add.w	lr, ip, r9
   10ca0:	4610      	mov	r0, r2
   10ca2:	9701      	str	r7, [sp, #4]
   10ca4:	4420      	add	r0, r4
   10ca6:	eb0e 0709 	add.w	r7, lr, r9
   10caa:	1815      	adds	r5, r2, r0
   10cac:	eb07 0209 	add.w	r2, r7, r9
   10cb0:	9203      	str	r2, [sp, #12]
   10cb2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   10cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   10cb8:	9117      	str	r1, [sp, #92]	; 0x5c
   10cba:	440a      	add	r2, r1
   10cbc:	9900      	ldr	r1, [sp, #0]
   10cbe:	3108      	adds	r1, #8
   10cc0:	9100      	str	r1, [sp, #0]
   10cc2:	9902      	ldr	r1, [sp, #8]
   10cc4:	3108      	adds	r1, #8
   10cc6:	9102      	str	r1, [sp, #8]
   10cc8:	9919      	ldr	r1, [sp, #100]	; 0x64
   10cca:	00ff      	lsls	r7, r7, #3
   10ccc:	9715      	str	r7, [sp, #84]	; 0x54
   10cce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   10cd2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
   10cd6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   10cda:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   10cdc:	9903      	ldr	r1, [sp, #12]
   10cde:	19d7      	adds	r7, r2, r7
   10ce0:	00c9      	lsls	r1, r1, #3
   10ce2:	9114      	str	r1, [sp, #80]	; 0x50
   10ce4:	9710      	str	r7, [sp, #64]	; 0x40
   10ce6:	9919      	ldr	r1, [sp, #100]	; 0x64
   10ce8:	9f00      	ldr	r7, [sp, #0]
   10cea:	19cf      	adds	r7, r1, r7
   10cec:	970d      	str	r7, [sp, #52]	; 0x34
   10cee:	9f02      	ldr	r7, [sp, #8]
   10cf0:	19cf      	adds	r7, r1, r7
   10cf2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   10cf6:	970c      	str	r7, [sp, #48]	; 0x30
   10cf8:	9f01      	ldr	r7, [sp, #4]
   10cfa:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
   10cfe:	3504      	adds	r5, #4
   10d00:	3004      	adds	r0, #4
   10d02:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
   10d06:	9508      	str	r5, [sp, #32]
   10d08:	9009      	str	r0, [sp, #36]	; 0x24
   10d0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   10d0c:	981a      	ldr	r0, [sp, #104]	; 0x68
   10d0e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   10d12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   10d16:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
   10d1a:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10d1c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   10d20:	1945      	adds	r5, r0, r5
   10d22:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   10d26:	460f      	mov	r7, r1
   10d28:	3404      	adds	r4, #4
   10d2a:	4641      	mov	r1, r8
   10d2c:	1841      	adds	r1, r0, r1
   10d2e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   10d32:	940a      	str	r4, [sp, #40]	; 0x28
   10d34:	eb00 0c06 	add.w	ip, r0, r6
   10d38:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   10d3c:	9e15      	ldr	r6, [sp, #84]	; 0x54
   10d3e:	9506      	str	r5, [sp, #24]
   10d40:	9c12      	ldr	r4, [sp, #72]	; 0x48
   10d42:	9105      	str	r1, [sp, #20]
   10d44:	4639      	mov	r1, r7
   10d46:	1905      	adds	r5, r0, r4
   10d48:	3108      	adds	r1, #8
   10d4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10d4c:	9507      	str	r5, [sp, #28]
   10d4e:	910f      	str	r1, [sp, #60]	; 0x3c
   10d50:	ea4f 1509 	mov.w	r5, r9, lsl #4
   10d54:	2101      	movs	r1, #1
   10d56:	eb00 0e06 	add.w	lr, r0, r6
   10d5a:	9518      	str	r5, [sp, #96]	; 0x60
   10d5c:	9404      	str	r4, [sp, #16]
   10d5e:	9103      	str	r1, [sp, #12]
   10d60:	4620      	mov	r0, r4
   10d62:	4689      	mov	r9, r1
   10d64:	9e06      	ldr	r6, [sp, #24]
   10d66:	ed90 fa00 	vldr	s30, [r0]
   10d6a:	edd6 7a01 	vldr	s15, [r6, #4]
   10d6e:	edd0 ba01 	vldr	s23, [r0, #4]
   10d72:	edcd 7a00 	vstr	s15, [sp]
   10d76:	a80d      	add	r0, sp, #52	; 0x34
   10d78:	edde 7a01 	vldr	s15, [lr, #4]
   10d7c:	9c05      	ldr	r4, [sp, #20]
   10d7e:	9d07      	ldr	r5, [sp, #28]
   10d80:	edd2 fa00 	vldr	s31, [r2]
   10d84:	ed92 ca01 	vldr	s24, [r2, #4]
   10d88:	edcd 7a01 	vstr	s15, [sp, #4]
   10d8c:	c807      	ldmia	r0, {r0, r1, r2}
   10d8e:	eddc 7a01 	vldr	s15, [ip, #4]
   10d92:	edd4 ea00 	vldr	s29, [r4]
   10d96:	ed95 ea00 	vldr	s28, [r5]
   10d9a:	edd6 da00 	vldr	s27, [r6]
   10d9e:	edd4 aa01 	vldr	s21, [r4, #4]
   10da2:	ed95 aa01 	vldr	s20, [r5, #4]
   10da6:	ed9e da00 	vldr	s26, [lr]
   10daa:	eddc ca00 	vldr	s25, [ip]
   10dae:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10db4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   10db6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10db8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10dba:	edcd 7a02 	vstr	s15, [sp, #8]
   10dbe:	e001      	b.n	10dc4 <arm_radix8_butterfly_f32+0x328>
   10dc0:	3f3504f3 	.word	0x3f3504f3
   10dc4:	ed16 6a01 	vldr	s12, [r6, #-4]
   10dc8:	ed91 5a00 	vldr	s10, [r1]
   10dcc:	ed57 9a01 	vldr	s19, [r7, #-4]
   10dd0:	edd5 7a00 	vldr	s15, [r5]
   10dd4:	ed18 7a01 	vldr	s14, [r8, #-4]
   10dd8:	edd2 3a00 	vldr	s7, [r2]
   10ddc:	ed94 3a00 	vldr	s6, [r4]
   10de0:	ed90 2a00 	vldr	s4, [r0]
   10de4:	ed92 0a01 	vldr	s0, [r2, #4]
   10de8:	ee33 8a85 	vadd.f32	s16, s7, s10
   10dec:	ee32 1a06 	vadd.f32	s2, s4, s12
   10df0:	ee33 4a29 	vadd.f32	s8, s6, s19
   10df4:	ee77 4a87 	vadd.f32	s9, s15, s14
   10df8:	ee78 1a04 	vadd.f32	s3, s16, s8
   10dfc:	ee71 6a24 	vadd.f32	s13, s2, s9
   10e00:	ee32 2a46 	vsub.f32	s4, s4, s12
   10e04:	ee31 6aa6 	vadd.f32	s12, s3, s13
   10e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10e0c:	ed82 6a00 	vstr	s12, [r2]
   10e10:	edd5 8a01 	vldr	s17, [r5, #4]
   10e14:	ed90 9a01 	vldr	s18, [r0, #4]
   10e18:	edd6 2a00 	vldr	s5, [r6]
   10e1c:	ed98 7a00 	vldr	s14, [r8]
   10e20:	edd4 0a01 	vldr	s1, [r4, #4]
   10e24:	ed91 6a01 	vldr	s12, [r1, #4]
   10e28:	edd7 5a00 	vldr	s11, [r7]
   10e2c:	ee73 3ac5 	vsub.f32	s7, s7, s10
   10e30:	ee33 3a69 	vsub.f32	s6, s6, s19
   10e34:	ee39 5a62 	vsub.f32	s10, s18, s5
   10e38:	ee78 9ac7 	vsub.f32	s19, s17, s14
   10e3c:	ee38 4a44 	vsub.f32	s8, s16, s8
   10e40:	ee38 7a87 	vadd.f32	s14, s17, s14
   10e44:	ee30 8aa5 	vadd.f32	s16, s1, s11
   10e48:	ee79 2a22 	vadd.f32	s5, s18, s5
   10e4c:	ee75 8a69 	vsub.f32	s17, s10, s19
   10e50:	ee32 9a27 	vadd.f32	s18, s4, s15
   10e54:	ee35 5a29 	vadd.f32	s10, s10, s19
   10e58:	ee72 7a67 	vsub.f32	s15, s4, s15
   10e5c:	ee30 2a06 	vadd.f32	s4, s0, s12
   10e60:	ee69 9a0b 	vmul.f32	s19, s18, s22
   10e64:	ee70 5ae5 	vsub.f32	s11, s1, s11
   10e68:	ee32 9a08 	vadd.f32	s18, s4, s16
   10e6c:	ee68 8a8b 	vmul.f32	s17, s17, s22
   10e70:	ee32 2a48 	vsub.f32	s4, s4, s16
   10e74:	ee71 4a64 	vsub.f32	s9, s2, s9
   10e78:	ee25 5a0b 	vmul.f32	s10, s10, s22
   10e7c:	ee32 1a87 	vadd.f32	s2, s5, s14
   10e80:	ee67 7a8b 	vmul.f32	s15, s15, s22
   10e84:	ee72 2ac7 	vsub.f32	s5, s5, s14
   10e88:	ee30 6a46 	vsub.f32	s12, s0, s12
   10e8c:	ee73 0a29 	vadd.f32	s1, s6, s19
   10e90:	ee36 0a28 	vadd.f32	s0, s12, s17
   10e94:	ee33 3a69 	vsub.f32	s6, s6, s19
   10e98:	ee32 7a64 	vsub.f32	s14, s4, s9
   10e9c:	ee73 9aa7 	vadd.f32	s19, s7, s15
   10ea0:	ee36 6a68 	vsub.f32	s12, s12, s17
   10ea4:	ee73 7ae7 	vsub.f32	s15, s7, s15
   10ea8:	ee75 8a85 	vadd.f32	s17, s11, s10
   10eac:	ee74 3a22 	vadd.f32	s7, s8, s5
   10eb0:	ee35 5ac5 	vsub.f32	s10, s11, s10
   10eb4:	ee71 6ae6 	vsub.f32	s13, s3, s13
   10eb8:	ee79 1a41 	vsub.f32	s3, s18, s2
   10ebc:	ee39 8aa8 	vadd.f32	s16, s19, s17
   10ec0:	ee76 5a43 	vsub.f32	s11, s12, s6
   10ec4:	ee74 2a62 	vsub.f32	s5, s8, s5
   10ec8:	ee74 4a82 	vadd.f32	s9, s9, s4
   10ecc:	ee30 4a60 	vsub.f32	s8, s0, s1
   10ed0:	ee79 8ae8 	vsub.f32	s17, s19, s17
   10ed4:	ee30 0a80 	vadd.f32	s0, s1, s0
   10ed8:	ee77 9a85 	vadd.f32	s19, s15, s10
   10edc:	ee33 6a06 	vadd.f32	s12, s6, s12
   10ee0:	ee77 7ac5 	vsub.f32	s15, s15, s10
   10ee4:	ee2e 2a21 	vmul.f32	s4, s28, s3
   10ee8:	ee2e 5a26 	vmul.f32	s10, s28, s13
   10eec:	ee6f 0a23 	vmul.f32	s1, s30, s7
   10ef0:	ee2a 3a21 	vmul.f32	s6, s20, s3
   10ef4:	ee39 1a01 	vadd.f32	s2, s18, s2
   10ef8:	ee6a 6a26 	vmul.f32	s13, s20, s13
   10efc:	ee2b 9a87 	vmul.f32	s18, s23, s14
   10f00:	ee6b 3aa3 	vmul.f32	s7, s23, s7
   10f04:	ee2f 7a07 	vmul.f32	s14, s30, s14
   10f08:	ee6f 1a84 	vmul.f32	s3, s31, s8
   10f0c:	ee35 3a03 	vadd.f32	s6, s10, s6
   10f10:	ee72 6a66 	vsub.f32	s13, s4, s13
   10f14:	ee2c 5a04 	vmul.f32	s10, s24, s8
   10f18:	ee2f 2a88 	vmul.f32	s4, s31, s16
   10f1c:	ed9d 4a02 	vldr	s8, [sp, #8]
   10f20:	ed82 1a01 	vstr	s2, [r2, #4]
   10f24:	ee77 3a63 	vsub.f32	s7, s14, s7
   10f28:	ee2c 8a08 	vmul.f32	s16, s24, s16
   10f2c:	ed9d 7a01 	vldr	s14, [sp, #4]
   10f30:	ed81 3a00 	vstr	s6, [r1]
   10f34:	ee30 9a89 	vadd.f32	s18, s1, s18
   10f38:	ee32 2a05 	vadd.f32	s4, s4, s10
   10f3c:	ee6d 0a22 	vmul.f32	s1, s26, s5
   10f40:	ee31 8ac8 	vsub.f32	s16, s3, s16
   10f44:	ee67 2a22 	vmul.f32	s5, s14, s5
   10f48:	ee64 1a00 	vmul.f32	s3, s8, s0
   10f4c:	ee27 7a24 	vmul.f32	s14, s14, s9
   10f50:	ee2c 5aa8 	vmul.f32	s10, s25, s17
   10f54:	ee6d 4a24 	vmul.f32	s9, s26, s9
   10f58:	ee64 8a28 	vmul.f32	s17, s8, s17
   10f5c:	ed9d 4a00 	vldr	s8, [sp]
   10f60:	edc1 6a01 	vstr	s13, [r1, #4]
   10f64:	ee74 2ae2 	vsub.f32	s5, s9, s5
   10f68:	ee6d 4aa9 	vmul.f32	s9, s27, s19
   10f6c:	ee64 9a29 	vmul.f32	s19, s8, s19
   10f70:	ee24 4a25 	vmul.f32	s8, s8, s11
   10f74:	ee30 7a87 	vadd.f32	s14, s1, s14
   10f78:	ee74 4a84 	vadd.f32	s9, s9, s8
   10f7c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
   10f80:	ee2a 4a86 	vmul.f32	s8, s21, s12
   10f84:	ee2c 0a80 	vmul.f32	s0, s25, s0
   10f88:	ee6d 5aa5 	vmul.f32	s11, s27, s11
   10f8c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
   10f90:	ee2e 6a86 	vmul.f32	s12, s29, s12
   10f94:	ee75 1a21 	vadd.f32	s3, s10, s3
   10f98:	ee30 0a68 	vsub.f32	s0, s0, s17
   10f9c:	ee75 9ae9 	vsub.f32	s19, s11, s19
   10fa0:	ee70 0a84 	vadd.f32	s1, s1, s8
   10fa4:	ee36 6a67 	vsub.f32	s12, s12, s15
   10fa8:	44d9      	add	r9, fp
   10faa:	45ca      	cmp	sl, r9
   10fac:	ed84 9a00 	vstr	s18, [r4]
   10fb0:	edc4 3a01 	vstr	s7, [r4, #4]
   10fb4:	441a      	add	r2, r3
   10fb6:	ed07 7a01 	vstr	s14, [r7, #-4]
   10fba:	edc7 2a00 	vstr	s5, [r7]
   10fbe:	4419      	add	r1, r3
   10fc0:	ed80 2a00 	vstr	s4, [r0]
   10fc4:	ed80 8a01 	vstr	s16, [r0, #4]
   10fc8:	441c      	add	r4, r3
   10fca:	ed48 1a01 	vstr	s3, [r8, #-4]
   10fce:	ed88 0a00 	vstr	s0, [r8]
   10fd2:	441f      	add	r7, r3
   10fd4:	ed46 4a01 	vstr	s9, [r6, #-4]
   10fd8:	4418      	add	r0, r3
   10fda:	edc6 9a00 	vstr	s19, [r6]
   10fde:	4498      	add	r8, r3
   10fe0:	edc5 0a00 	vstr	s1, [r5]
   10fe4:	ed85 6a01 	vstr	s12, [r5, #4]
   10fe8:	441e      	add	r6, r3
   10fea:	441d      	add	r5, r3
   10fec:	f63f aeea 	bhi.w	10dc4 <arm_radix8_butterfly_f32+0x328>
   10ff0:	9a03      	ldr	r2, [sp, #12]
   10ff2:	9818      	ldr	r0, [sp, #96]	; 0x60
   10ff4:	3201      	adds	r2, #1
   10ff6:	4611      	mov	r1, r2
   10ff8:	9203      	str	r2, [sp, #12]
   10ffa:	9a04      	ldr	r2, [sp, #16]
   10ffc:	4402      	add	r2, r0
   10ffe:	9204      	str	r2, [sp, #16]
   11000:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11002:	9a05      	ldr	r2, [sp, #20]
   11004:	4402      	add	r2, r0
   11006:	9205      	str	r2, [sp, #20]
   11008:	9812      	ldr	r0, [sp, #72]	; 0x48
   1100a:	9a07      	ldr	r2, [sp, #28]
   1100c:	4402      	add	r2, r0
   1100e:	9207      	str	r2, [sp, #28]
   11010:	9816      	ldr	r0, [sp, #88]	; 0x58
   11012:	9a06      	ldr	r2, [sp, #24]
   11014:	4402      	add	r2, r0
   11016:	9206      	str	r2, [sp, #24]
   11018:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1101a:	4496      	add	lr, r2
   1101c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1101e:	4494      	add	ip, r2
   11020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11022:	3208      	adds	r2, #8
   11024:	920f      	str	r2, [sp, #60]	; 0x3c
   11026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11028:	3208      	adds	r2, #8
   1102a:	920e      	str	r2, [sp, #56]	; 0x38
   1102c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1102e:	3208      	adds	r2, #8
   11030:	920d      	str	r2, [sp, #52]	; 0x34
   11032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11034:	3208      	adds	r2, #8
   11036:	920c      	str	r2, [sp, #48]	; 0x30
   11038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1103a:	3208      	adds	r2, #8
   1103c:	920b      	str	r2, [sp, #44]	; 0x2c
   1103e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11040:	3208      	adds	r2, #8
   11042:	920a      	str	r2, [sp, #40]	; 0x28
   11044:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11046:	3208      	adds	r2, #8
   11048:	9209      	str	r2, [sp, #36]	; 0x24
   1104a:	9a08      	ldr	r2, [sp, #32]
   1104c:	3208      	adds	r2, #8
   1104e:	9208      	str	r2, [sp, #32]
   11050:	9c10      	ldr	r4, [sp, #64]	; 0x40
   11052:	9811      	ldr	r0, [sp, #68]	; 0x44
   11054:	4288      	cmp	r0, r1
   11056:	4622      	mov	r2, r4
   11058:	d007      	beq.n	1106a <arm_radix8_butterfly_f32+0x5ce>
   1105a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1105c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11060:	4621      	mov	r1, r4
   11062:	4401      	add	r1, r0
   11064:	9110      	str	r1, [sp, #64]	; 0x40
   11066:	9804      	ldr	r0, [sp, #16]
   11068:	e67c      	b.n	10d64 <arm_radix8_butterfly_f32+0x2c8>
   1106a:	4683      	mov	fp, r0
   1106c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
   11070:	9f19      	ldr	r7, [sp, #100]	; 0x64
   11072:	e524      	b.n	10abe <arm_radix8_butterfly_f32+0x22>
   11074:	b01d      	add	sp, #116	; 0x74
   11076:	ecbd 8b10 	vpop	{d8-d15}
   1107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1107e:	bf00      	nop

00011080 <sqrtf>:
   11080:	b510      	push	{r4, lr}
   11082:	ed2d 8b02 	vpush	{d8}
   11086:	b08a      	sub	sp, #40	; 0x28
   11088:	eeb0 8a40 	vmov.f32	s16, s0
   1108c:	f000 f84e 	bl	1112c <__ieee754_sqrtf>
   11090:	4b24      	ldr	r3, [pc, #144]	; (11124 <sqrtf+0xa4>)
   11092:	f993 4000 	ldrsb.w	r4, [r3]
   11096:	1c63      	adds	r3, r4, #1
   11098:	d009      	beq.n	110ae <sqrtf+0x2e>
   1109a:	eeb4 8a48 	vcmp.f32	s16, s16
   1109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110a2:	d604      	bvs.n	110ae <sqrtf+0x2e>
   110a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   110a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110ac:	d403      	bmi.n	110b6 <sqrtf+0x36>
   110ae:	b00a      	add	sp, #40	; 0x28
   110b0:	ecbd 8b02 	vpop	{d8}
   110b4:	bd10      	pop	{r4, pc}
   110b6:	2301      	movs	r3, #1
   110b8:	4a1b      	ldr	r2, [pc, #108]	; (11128 <sqrtf+0xa8>)
   110ba:	9300      	str	r3, [sp, #0]
   110bc:	ee18 0a10 	vmov	r0, s16
   110c0:	2300      	movs	r3, #0
   110c2:	9201      	str	r2, [sp, #4]
   110c4:	9308      	str	r3, [sp, #32]
   110c6:	f7fb f9df 	bl	c488 <__aeabi_f2d>
   110ca:	2200      	movs	r2, #0
   110cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   110d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   110d4:	2300      	movs	r3, #0
   110d6:	b1bc      	cbz	r4, 11108 <sqrtf+0x88>
   110d8:	4610      	mov	r0, r2
   110da:	4619      	mov	r1, r3
   110dc:	f7fb fb56 	bl	c78c <__aeabi_ddiv>
   110e0:	2c02      	cmp	r4, #2
   110e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   110e6:	d111      	bne.n	1110c <sqrtf+0x8c>
   110e8:	f000 f826 	bl	11138 <__errno>
   110ec:	2321      	movs	r3, #33	; 0x21
   110ee:	6003      	str	r3, [r0, #0]
   110f0:	9b08      	ldr	r3, [sp, #32]
   110f2:	b98b      	cbnz	r3, 11118 <sqrtf+0x98>
   110f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   110f8:	f7fb fc30 	bl	c95c <__aeabi_d2f>
   110fc:	ee00 0a10 	vmov	s0, r0
   11100:	b00a      	add	sp, #40	; 0x28
   11102:	ecbd 8b02 	vpop	{d8}
   11106:	bd10      	pop	{r4, pc}
   11108:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1110c:	4668      	mov	r0, sp
   1110e:	f000 f811 	bl	11134 <matherr>
   11112:	2800      	cmp	r0, #0
   11114:	d1ec      	bne.n	110f0 <sqrtf+0x70>
   11116:	e7e7      	b.n	110e8 <sqrtf+0x68>
   11118:	f000 f80e 	bl	11138 <__errno>
   1111c:	9b08      	ldr	r3, [sp, #32]
   1111e:	6003      	str	r3, [r0, #0]
   11120:	e7e8      	b.n	110f4 <sqrtf+0x74>
   11122:	bf00      	nop
   11124:	1000c044 	.word	0x1000c044
   11128:	00014c50 	.word	0x00014c50

0001112c <__ieee754_sqrtf>:
   1112c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   11130:	4770      	bx	lr
   11132:	bf00      	nop

00011134 <matherr>:
   11134:	2000      	movs	r0, #0
   11136:	4770      	bx	lr

00011138 <__errno>:
   11138:	4b01      	ldr	r3, [pc, #4]	; (11140 <__errno+0x8>)
   1113a:	6818      	ldr	r0, [r3, #0]
   1113c:	4770      	bx	lr
   1113e:	bf00      	nop
   11140:	1000c048 	.word	0x1000c048

00011144 <memset>:
   11144:	b4f0      	push	{r4, r5, r6, r7}
   11146:	0786      	lsls	r6, r0, #30
   11148:	d043      	beq.n	111d2 <memset+0x8e>
   1114a:	1e54      	subs	r4, r2, #1
   1114c:	2a00      	cmp	r2, #0
   1114e:	d03e      	beq.n	111ce <memset+0x8a>
   11150:	b2ca      	uxtb	r2, r1
   11152:	4603      	mov	r3, r0
   11154:	e002      	b.n	1115c <memset+0x18>
   11156:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   1115a:	d338      	bcc.n	111ce <memset+0x8a>
   1115c:	f803 2b01 	strb.w	r2, [r3], #1
   11160:	079d      	lsls	r5, r3, #30
   11162:	d1f8      	bne.n	11156 <memset+0x12>
   11164:	2c03      	cmp	r4, #3
   11166:	d92b      	bls.n	111c0 <memset+0x7c>
   11168:	b2cd      	uxtb	r5, r1
   1116a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1116e:	2c0f      	cmp	r4, #15
   11170:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11174:	d916      	bls.n	111a4 <memset+0x60>
   11176:	f1a4 0710 	sub.w	r7, r4, #16
   1117a:	093f      	lsrs	r7, r7, #4
   1117c:	f103 0620 	add.w	r6, r3, #32
   11180:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   11184:	f103 0210 	add.w	r2, r3, #16
   11188:	e942 5504 	strd	r5, r5, [r2, #-16]
   1118c:	e942 5502 	strd	r5, r5, [r2, #-8]
   11190:	3210      	adds	r2, #16
   11192:	42b2      	cmp	r2, r6
   11194:	d1f8      	bne.n	11188 <memset+0x44>
   11196:	f004 040f 	and.w	r4, r4, #15
   1119a:	3701      	adds	r7, #1
   1119c:	2c03      	cmp	r4, #3
   1119e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   111a2:	d90d      	bls.n	111c0 <memset+0x7c>
   111a4:	461e      	mov	r6, r3
   111a6:	4622      	mov	r2, r4
   111a8:	3a04      	subs	r2, #4
   111aa:	2a03      	cmp	r2, #3
   111ac:	f846 5b04 	str.w	r5, [r6], #4
   111b0:	d8fa      	bhi.n	111a8 <memset+0x64>
   111b2:	1f22      	subs	r2, r4, #4
   111b4:	f022 0203 	bic.w	r2, r2, #3
   111b8:	3204      	adds	r2, #4
   111ba:	4413      	add	r3, r2
   111bc:	f004 0403 	and.w	r4, r4, #3
   111c0:	b12c      	cbz	r4, 111ce <memset+0x8a>
   111c2:	b2c9      	uxtb	r1, r1
   111c4:	441c      	add	r4, r3
   111c6:	f803 1b01 	strb.w	r1, [r3], #1
   111ca:	429c      	cmp	r4, r3
   111cc:	d1fb      	bne.n	111c6 <memset+0x82>
   111ce:	bcf0      	pop	{r4, r5, r6, r7}
   111d0:	4770      	bx	lr
   111d2:	4614      	mov	r4, r2
   111d4:	4603      	mov	r3, r0
   111d6:	e7c5      	b.n	11164 <memset+0x20>
   111d8:	69647541 	.word	0x69647541
   111dc:	6574206f 	.word	0x6574206f
   111e0:	73207473 	.word	0x73207473
   111e4:	74726174 	.word	0x74726174
   111e8:	0a0d2173 	.word	0x0a0d2173
   111ec:	0000000a 	.word	0x0000000a
   111f0:	20444854 	.word	0x20444854
   111f4:	75736572 	.word	0x75736572
   111f8:	203a746c 	.word	0x203a746c
   111fc:	362e3025 	.word	0x362e3025
   11200:	0a0d2e66 	.word	0x0a0d2e66
   11204:	00000000 	.word	0x00000000
   11208:	00007325 	.word	0x00007325
   1120c:	00006425 	.word	0x00006425
   11210:	38257830 	.word	0x38257830
   11214:	00000078 	.word	0x00000078
   11218:	00006625 	.word	0x00006625
   1121c:	6c6f7041 	.word	0x6c6f7041
   11220:	20336f6c 	.word	0x20336f6c
   11224:	73727542 	.word	0x73727542
   11228:	6f4d2074 	.word	0x6f4d2074
   1122c:	69206564 	.word	0x69206564
   11230:	76412073 	.word	0x76412073
   11234:	616c6961 	.word	0x616c6961
   11238:	0d656c62 	.word	0x0d656c62
   1123c:	0000000a 	.word	0x0000000a
   11240:	6c6f7041 	.word	0x6c6f7041
   11244:	20336f6c 	.word	0x20336f6c
   11248:	73727542 	.word	0x73727542
   1124c:	6f4d2074 	.word	0x6f4d2074
   11250:	69206564 	.word	0x69206564
   11254:	6f4e2073 	.word	0x6f4e2073
   11258:	76412074 	.word	0x76412074
   1125c:	616c6961 	.word	0x616c6961
   11260:	0d656c62 	.word	0x0d656c62
   11264:	0000000a 	.word	0x0000000a
   11268:	6c696146 	.word	0x6c696146
   1126c:	74206465 	.word	0x74206465
   11270:	6e49206f 	.word	0x6e49206f
   11274:	61697469 	.word	0x61697469
   11278:	657a696c 	.word	0x657a696c
   1127c:	726f6620 	.word	0x726f6620
   11280:	72754220 	.word	0x72754220
   11284:	4d207473 	.word	0x4d207473
   11288:	2065646f 	.word	0x2065646f
   1128c:	7265706f 	.word	0x7265706f
   11290:	6f697461 	.word	0x6f697461
   11294:	000a0d6e 	.word	0x000a0d6e
   11298:	6c6f7041 	.word	0x6c6f7041
   1129c:	20336f6c 	.word	0x20336f6c
   112a0:	7265706f 	.word	0x7265706f
   112a4:	6e697461 	.word	0x6e697461
   112a8:	6e692067 	.word	0x6e692067
   112ac:	72754220 	.word	0x72754220
   112b0:	4d207473 	.word	0x4d207473
   112b4:	2065646f 	.word	0x2065646f
   112b8:	4d363928 	.word	0x4d363928
   112bc:	0d297a48 	.word	0x0d297a48
   112c0:	0000000a 	.word	0x0000000a
   112c4:	6c696146 	.word	0x6c696146
   112c8:	74206465 	.word	0x74206465
   112cc:	6e45206f 	.word	0x6e45206f
   112d0:	656c6261 	.word	0x656c6261
   112d4:	72754220 	.word	0x72754220
   112d8:	4d207473 	.word	0x4d207473
   112dc:	2065646f 	.word	0x2065646f
   112e0:	7265706f 	.word	0x7265706f
   112e4:	6f697461 	.word	0x6f697461
   112e8:	000a0d6e 	.word	0x000a0d6e
   112ec:	20656854 	.word	0x20656854
   112f0:	67726174 	.word	0x67726174
   112f4:	66207465 	.word	0x66207465
   112f8:	75716572 	.word	0x75716572
   112fc:	79636e65 	.word	0x79636e65
   11300:	20736920 	.word	0x20736920
   11304:	2074756f 	.word	0x2074756f
   11308:	7320666f 	.word	0x7320666f
   1130c:	6c706d61 	.word	0x6c706d61
   11310:	72662065 	.word	0x72662065
   11314:	65757165 	.word	0x65757165
   11318:	2079636e 	.word	0x2079636e
   1131c:	696d696c 	.word	0x696d696c
   11320:	0d202174 	.word	0x0d202174
   11324:	0000000a 	.word	0x0000000a
   11328:	20444854 	.word	0x20444854
   1132c:	65736162 	.word	0x65736162
   11330:	65726620 	.word	0x65726620
   11334:	6e657571 	.word	0x6e657571
   11338:	69207963 	.word	0x69207963
   1133c:	66252073 	.word	0x66252073
   11340:	0a0d202e 	.word	0x0a0d202e
   11344:	00000000 	.word	0x00000000

00011348 <g_AM_HAL_GPIO_DISABLE>:
   11348:	00000003                                ....

0001134c <g_AM_HAL_GPIO_OUTPUT>:
   1134c:	00000403                                ....

00011350 <g_AM_HAL_GPIO_TRISTATE>:
   11350:	00000c03                                ....

00011354 <g_ui8Inpen>:
   11354:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   11364:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   11374:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   11384:	00003130                                01..

00011388 <g_ui8Bit76Capabilities>:
   11388:	02800101 80010180 80800101 80808080     ................
   11398:	80808080 80808008 01800180 80808080     ................
   113a8:	80808080 01800402 01010401 80808080     ................
   113b8:	00000101                                ....

000113bc <g_ui8nCEpins>:
   113bc:	02070707 00080802 01020202 01010101     ................
   113cc:	01010101 01010101 01010101 01010101     ................
   113dc:	01010101 08010101 01010008 01010101     ................
   113ec:	00000101                                ....

000113f0 <g_ui8NCEtable>:
   113f0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   11400:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   11410:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11420:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11430:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11440:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11450:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11460:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11470:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   11480:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   11490:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   114a0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   114b0:	32221202 43231303                       .."2..#C

000114b8 <g_SysRingBuffSetup>:
   114b8:	00000001 1000c5b0 0000fa00              ............

000114c4 <g_deepsleep_button0>:
   114c4:	00001003                                ....

000114c8 <g_in16TestInput_2KHZ_SR16K>:
   114c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   114d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   114e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   114f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11508:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11518:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11528:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11538:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11548:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11558:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11568:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11578:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11588:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11598:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115a8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115b8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   115f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11608:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11618:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11628:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11638:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11648:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11658:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11668:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11678:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11688:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11698:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116a8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116b8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   116f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11708:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11718:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11728:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11738:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11748:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11758:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11768:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11778:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11788:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11798:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117a8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117b8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   117f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11808:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11818:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11828:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11838:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11848:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11858:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11868:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11878:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11888:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11898:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118a8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118b8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   118f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11908:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11918:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11928:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11938:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11948:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11958:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11968:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11978:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11988:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11998:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119a8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119b8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119c8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119d8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119e8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   119f8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a08:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a18:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a28:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a38:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a48:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a58:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a68:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a78:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a88:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11a98:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11aa8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ab8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ac8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ad8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ae8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11af8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b08:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b18:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b28:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b38:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b48:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b58:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b68:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b78:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b88:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11b98:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ba8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11bb8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11bc8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11bd8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11be8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11bf8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c08:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c18:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c28:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c38:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c48:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c58:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c68:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c78:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c88:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11c98:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11ca8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........
   11cb8:	5a810000 5a817fff a57f0000 a57f8001     ...Z...Z........

00011cc8 <g_sBspUartConfig>:
   11cc8:	0001c200 00000060 00000000 00000000     ....`...........
   11cd8:	00000000 00000012 00000000 00000000     ................
	...

00011cf0 <g_AM_BSP_GPIO_COM_UART_TX>:
   11cf0:	00000000                                ....

00011cf4 <g_AM_BSP_GPIO_COM_UART_RX>:
   11cf4:	00000000                                ....

00011cf8 <am_hal_cachectrl_defaults>:
   11cf8:	00000308                                ....

00011cfc <g_am_hal_mcuctrl_flash_size>:
   11cfc:	00004000 00008000 00010000 00020000     .@..............
   11d0c:	00040000 00080000 00100000 00200000     .............. .
	...

00011d3c <g_am_hal_mcuctrl_sram_size>:
   11d3c:	00004000 00008000 00010000 00020000     .@..............
   11d4c:	00040000 00080000 00100000 00060000     ................
	...

00011d7c <am_hal_pwrctrl_peripheral_control>:
	...
   11d88:	00000001 00000004 00000004 00000002     ................
   11d98:	00000008 00000008 00000004 00000008     ................
   11da8:	00000008 00000008 00000008 00000008     ................
   11db8:	00000010 00000010 00000010 00000020     ............ ...
   11dc8:	00000010 00000010 00000040 00000010     ........@.......
   11dd8:	00000010 00000080 00000004 00000004     ................
   11de8:	00000100 00000004 00000004 00000200     ................
   11df8:	00000020 00000020 00000400 00000004      ... ...........
   11e08:	00000004 00000800 00000040 00000040     ........@...@...
   11e18:	00001000 00000080 00000080 00002000     ............. ..
   11e28:	00000100 00000100                       ........

00011e30 <arm_cfft_sR_f32_len1024>:
   11e30:	00000400 00011e40 00013e40 00000708     ....@...@>......

00011e40 <twiddleCoef_1024>:
   11e40:	3f800000 00000000 3f7ffec4 3bc90f89     ...?.......?...;
   11e50:	3f7ffb11 3c490e90 3f7ff4e6 3c96c9b6     ...?..I<...?...<
   11e60:	3f7fec43 3cc90ab0 3f7fe129 3cfb49b9     C..?...<)..?.I.<
   11e70:	3f7fd398 3d16c32c 3f7fc38f 3d2fe007     ...?,..=...?../=
   11e80:	3f7fb10f 3d48fb2f 3f7f9c18 3d621468     ...?/.H=...?h.b=
   11e90:	3f7f84ab 3d7b2b74 3f7f6ac7 3d8a200a     ...?t+{=.j.?. .=
   11ea0:	3f7f4e6d 3d96a905 3f7f2f9d 3da3308c     mN.?...=./.?.0.=
   11eb0:	3f7f0e58 3dafb680 3f7eea9d 3dbc3ac3     X..?...=..~?.:.=
   11ec0:	3f7ec46d 3dc8bd36 3f7e9bc9 3dd53db9     m.~?6..=..~?.=.=
   11ed0:	3f7e70b0 3de1bc2e 3f7e4323 3dee3876     .p~?...=#C~?v8.=
   11ee0:	3f7e1324 3dfab273 3f7de0b1 3e039502     $.~?s..=..}?...>
   11ef0:	3f7dabcc 3e09cf86 3f7d7474 3e1008b7     ..}?...>tt}?...>
   11f00:	3f7d3aac 3e164083 3f7cfe73 3e1c76de     .:}?.@.>s.|?.v.>
   11f10:	3f7cbfc9 3e22abb6 3f7c7eb0 3e28defc     ..|?..">.~|?..(>
   11f20:	3f7c3b28 3e2f10a2 3f7bf531 3e354098     (;|?../>1.{?.@5>
   11f30:	3f7baccd 3e3b6ecf 3f7b61fc 3e419b37     ..{?.n;>.a{?7.A>
   11f40:	3f7b14be 3e47c5c2 3f7ac516 3e4dee60     ..{?..G>..z?`.M>
   11f50:	3f7a7302 3e541501 3f7a1e84 3e5a3997     .sz?..T>..z?.9Z>
   11f60:	3f79c79d 3e605c13 3f796e4e 3e667c66     ..y?.\`>Nny?f|f>
   11f70:	3f791298 3e6c9a7f 3f78b47b 3e72b651     ..y?..l>{.x?Q.r>
   11f80:	3f7853f8 3e78cfcc 3f77f110 3e7ee6e1     .Sx?..x>..w?..~>
   11f90:	3f778bc5 3e827dc0 3f772417 3e8586ce     ..w?.}.>.$w?...>
   11fa0:	3f76ba07 3e888e93 3f764d97 3e8b9507     ..v?...>.Mv?...>
   11fb0:	3f75dec6 3e8e9a22 3f756d97 3e919ddd     ..u?"..>.mu?...>
   11fc0:	3f74fa0b 3e94a031 3f748422 3e97a117     ..t?1..>".t?...>
   11fd0:	3f740bdd 3e9aa086 3f73913f 3e9d9e78     ..t?...>?.s?x..>
   11fe0:	3f731447 3ea09ae5 3f7294f8 3ea395c5     G.s?...>..r?...>
   11ff0:	3f721352 3ea68f12 3f718f57 3ea986c4     R.r?...>W.q?...>
   12000:	3f710908 3eac7cd4 3f708066 3eaf713a     ..q?.|.>f.p?:q.>
   12010:	3f6ff573 3eb263ef 3f6f6830 3eb554ec     s.o?.c.>0ho?.T.>
   12020:	3f6ed89e 3eb8442a 3f6e46be 3ebb31a0     ..n?*D.>.Fn?.1.>
   12030:	3f6db293 3ebe1d4a 3f6d1c1d 3ec1071e     ..m?J..>..m?...>
   12040:	3f6c835e 3ec3ef15 3f6be858 3ec6d529     ^.l?...>X.k?)..>
   12050:	3f6b4b0c 3ec9b953 3f6aab7b 3ecc9b8b     .Kk?S..>{.j?...>
   12060:	3f6a09a7 3ecf7bca 3f696591 3ed25a09     ..j?.{.>.ei?.Z.>
   12070:	3f68bf3c 3ed53641 3f6816a8 3ed8106b     <.h?A6.>..h?k..>
   12080:	3f676bd8 3edae880 3f66becc 3eddbe79     .kg?...>..f?y..>
   12090:	3f660f88 3ee0924f 3f655e0b 3ee363fa     ..f?O..>.^e?.c.>
   120a0:	3f64aa59 3ee63375 3f63f473 3ee900b7     Y.d?u3.>s.c?...>
   120b0:	3f633c5a 3eebcbbb 3f628210 3eee9479     Z<c?...>..b?y..>
   120c0:	3f61c598 3ef15aea 3f6106f2 3ef41f07     ..a?.Z.>..a?...>
   120d0:	3f604621 3ef6e0cb 3f5f8327 3ef9a02d     !F`?...>'._?-..>
   120e0:	3f5ebe05 3efc5d27 3f5df6be 3eff17b2     ..^?'].>..]?...>
   120f0:	3f5d2d53 3f00e7e4 3f5c61c7 3f0242b1     S-]?...?.a\?.B.?
   12100:	3f5b941a 3f039c3d 3f5ac450 3f04f484     ..[?=..?P.Z?...?
   12110:	3f59f26a 3f064b82 3f591e6a 3f07a136     j.Y?.K.?j.Y?6..?
   12120:	3f584853 3f08f59b 3f577026 3f0a48ad     SHX?...?&pW?.H.?
   12130:	3f5695e5 3f0b9a6b 3f55b993 3f0cead0     ..V?k..?..U?...?
   12140:	3f54db31 3f0e39da 3f53fac3 3f0f8784     1.T?.9.?..S?...?
   12150:	3f531849 3f10d3cd 3f5233c6 3f121eb0     I.S?...?.3R?...?
   12160:	3f514d3d 3f13682a 3f5064af 3f14b039     =MQ?*h.?.dP?9..?
   12170:	3f4f7a1f 3f15f6d9 3f4e8d90 3f173c07     .zO?...?..N?.<.?
   12180:	3f4d9f02 3f187fc0 3f4cae79 3f19c200     ..M?...?y.L?...?
   12190:	3f4bbbf8 3f1b02c6 3f4ac77f 3f1c420c     ..K?...?..J?.B.?
   121a0:	3f49d112 3f1d7fd1 3f48d8b3 3f1ebc12     ..I?...?..H?...?
   121b0:	3f47de65 3f1ff6cb 3f46e22a 3f212ff9     e.G?...?*.F?./!?
   121c0:	3f45e403 3f226799 3f44e3f5 3f239da9     ..E?.g"?..D?..#?
   121d0:	3f43e200 3f24d225 3f42de29 3f26050a     ..C?%.$?).B?..&?
   121e0:	3f41d870 3f273656 3f40d0da 3f286605     p.A?V6'?..@?.f(?
   121f0:	3f3fc767 3f299415 3f3ebc1b 3f2ac082     g.??..)?..>?..*?
   12200:	3f3daef9 3f2beb4a 3f3ca003 3f2d1469     ..=?J.+?..<?i.-?
   12210:	3f3b8f3b 3f2e3bde 3f3a7ca4 3f2f61a5     ;.;?.;.?.|:?.a/?
   12220:	3f396842 3f3085bb 3f385216 3f31a81d     Bh9?..0?.R8?..1?
   12230:	3f373a23 3f32c8c9 3f36206c 3f33e7bc     #:7?..2?l 6?..3?
   12240:	3f3504f3 3f3504f3 3f33e7bc 3f36206c     ..5?..5?..3?l 6?
   12250:	3f32c8c9 3f373a23 3f31a81d 3f385216     ..2?#:7?..1?.R8?
   12260:	3f3085bb 3f396842 3f2f61a5 3f3a7ca4     ..0?Bh9?.a/?.|:?
   12270:	3f2e3bde 3f3b8f3b 3f2d1469 3f3ca003     .;.?;.;?i.-?..<?
   12280:	3f2beb4a 3f3daef9 3f2ac082 3f3ebc1b     J.+?..=?..*?..>?
   12290:	3f299415 3f3fc767 3f286605 3f40d0da     ..)?g.??.f(?..@?
   122a0:	3f273656 3f41d870 3f26050a 3f42de29     V6'?p.A?..&?).B?
   122b0:	3f24d225 3f43e200 3f239da9 3f44e3f5     %.$?..C?..#?..D?
   122c0:	3f226799 3f45e403 3f212ff9 3f46e22a     .g"?..E?./!?*.F?
   122d0:	3f1ff6cb 3f47de65 3f1ebc12 3f48d8b3     ...?e.G?...?..H?
   122e0:	3f1d7fd1 3f49d112 3f1c420c 3f4ac77f     ...?..I?.B.?..J?
   122f0:	3f1b02c6 3f4bbbf8 3f19c200 3f4cae79     ...?..K?...?y.L?
   12300:	3f187fc0 3f4d9f02 3f173c07 3f4e8d90     ...?..M?.<.?..N?
   12310:	3f15f6d9 3f4f7a1f 3f14b039 3f5064af     ...?.zO?9..?.dP?
   12320:	3f13682a 3f514d3d 3f121eb0 3f5233c6     *h.?=MQ?...?.3R?
   12330:	3f10d3cd 3f531849 3f0f8784 3f53fac3     ...?I.S?...?..S?
   12340:	3f0e39da 3f54db31 3f0cead0 3f55b993     .9.?1.T?...?..U?
   12350:	3f0b9a6b 3f5695e5 3f0a48ad 3f577026     k..?..V?.H.?&pW?
   12360:	3f08f59b 3f584853 3f07a136 3f591e6a     ...?SHX?6..?j.Y?
   12370:	3f064b82 3f59f26a 3f04f484 3f5ac450     .K.?j.Y?...?P.Z?
   12380:	3f039c3d 3f5b941a 3f0242b1 3f5c61c7     =..?..[?.B.?.a\?
   12390:	3f00e7e4 3f5d2d53 3eff17b2 3f5df6be     ...?S-]?...>..]?
   123a0:	3efc5d27 3f5ebe05 3ef9a02d 3f5f8327     '].>..^?-..>'._?
   123b0:	3ef6e0cb 3f604621 3ef41f07 3f6106f2     ...>!F`?...>..a?
   123c0:	3ef15aea 3f61c598 3eee9479 3f628210     .Z.>..a?y..>..b?
   123d0:	3eebcbbb 3f633c5a 3ee900b7 3f63f473     ...>Z<c?...>s.c?
   123e0:	3ee63375 3f64aa59 3ee363fa 3f655e0b     u3.>Y.d?.c.>.^e?
   123f0:	3ee0924f 3f660f88 3eddbe79 3f66becc     O..>..f?y..>..f?
   12400:	3edae880 3f676bd8 3ed8106b 3f6816a8     ...>.kg?k..>..h?
   12410:	3ed53641 3f68bf3c 3ed25a09 3f696591     A6.><.h?.Z.>.ei?
   12420:	3ecf7bca 3f6a09a7 3ecc9b8b 3f6aab7b     .{.>..j?...>{.j?
   12430:	3ec9b953 3f6b4b0c 3ec6d529 3f6be858     S..>.Kk?)..>X.k?
   12440:	3ec3ef15 3f6c835e 3ec1071e 3f6d1c1d     ...>^.l?...>..m?
   12450:	3ebe1d4a 3f6db293 3ebb31a0 3f6e46be     J..>..m?.1.>.Fn?
   12460:	3eb8442a 3f6ed89e 3eb554ec 3f6f6830     *D.>..n?.T.>0ho?
   12470:	3eb263ef 3f6ff573 3eaf713a 3f708066     .c.>s.o?:q.>f.p?
   12480:	3eac7cd4 3f710908 3ea986c4 3f718f57     .|.>..q?...>W.q?
   12490:	3ea68f12 3f721352 3ea395c5 3f7294f8     ...>R.r?...>..r?
   124a0:	3ea09ae5 3f731447 3e9d9e78 3f73913f     ...>G.s?x..>?.s?
   124b0:	3e9aa086 3f740bdd 3e97a117 3f748422     ...>..t?...>".t?
   124c0:	3e94a031 3f74fa0b 3e919ddd 3f756d97     1..>..t?...>.mu?
   124d0:	3e8e9a22 3f75dec6 3e8b9507 3f764d97     "..>..u?...>.Mv?
   124e0:	3e888e93 3f76ba07 3e8586ce 3f772417     ...>..v?...>.$w?
   124f0:	3e827dc0 3f778bc5 3e7ee6e1 3f77f110     .}.>..w?..~>..w?
   12500:	3e78cfcc 3f7853f8 3e72b651 3f78b47b     ..x>.Sx?Q.r>{.x?
   12510:	3e6c9a7f 3f791298 3e667c66 3f796e4e     ..l>..y?f|f>Nny?
   12520:	3e605c13 3f79c79d 3e5a3997 3f7a1e84     .\`>..y?.9Z>..z?
   12530:	3e541501 3f7a7302 3e4dee60 3f7ac516     ..T>.sz?`.M>..z?
   12540:	3e47c5c2 3f7b14be 3e419b37 3f7b61fc     ..G>..{?7.A>.a{?
   12550:	3e3b6ecf 3f7baccd 3e354098 3f7bf531     .n;>..{?.@5>1.{?
   12560:	3e2f10a2 3f7c3b28 3e28defc 3f7c7eb0     ../>(;|?..(>.~|?
   12570:	3e22abb6 3f7cbfc9 3e1c76de 3f7cfe73     ..">..|?.v.>s.|?
   12580:	3e164083 3f7d3aac 3e1008b7 3f7d7474     .@.>.:}?...>tt}?
   12590:	3e09cf86 3f7dabcc 3e039502 3f7de0b1     ...>..}?...>..}?
   125a0:	3dfab273 3f7e1324 3dee3876 3f7e4323     s..=$.~?v8.=#C~?
   125b0:	3de1bc2e 3f7e70b0 3dd53db9 3f7e9bc9     ...=.p~?.=.=..~?
   125c0:	3dc8bd36 3f7ec46d 3dbc3ac3 3f7eea9d     6..=m.~?.:.=..~?
   125d0:	3dafb680 3f7f0e58 3da3308c 3f7f2f9d     ...=X..?.0.=./.?
   125e0:	3d96a905 3f7f4e6d 3d8a200a 3f7f6ac7     ...=mN.?. .=.j.?
   125f0:	3d7b2b74 3f7f84ab 3d621468 3f7f9c18     t+{=...?h.b=...?
   12600:	3d48fb2f 3f7fb10f 3d2fe007 3f7fc38f     /.H=...?../=...?
   12610:	3d16c32c 3f7fd398 3cfb49b9 3f7fe129     ,..=...?.I.<)..?
   12620:	3cc90ab0 3f7fec43 3c96c9b6 3f7ff4e6     ...<C..?...<...?
   12630:	3c490e90 3f7ffb11 3bc90f89 3f7ffec4     ..I<...?...;...?
   12640:	00000000 3f800000 bbc90f89 3f7ffec4     .......?.......?
   12650:	bc490e90 3f7ffb11 bc96c9b6 3f7ff4e6     ..I....?.......?
   12660:	bcc90ab0 3f7fec43 bcfb49b9 3f7fe129     ....C..?.I..)..?
   12670:	bd16c32c 3f7fd398 bd2fe007 3f7fc38f     ,......?../....?
   12680:	bd48fb2f 3f7fb10f bd621468 3f7f9c18     /.H....?h.b....?
   12690:	bd7b2b74 3f7f84ab bd8a200a 3f7f6ac7     t+{....?. ...j.?
   126a0:	bd96a905 3f7f4e6d bda3308c 3f7f2f9d     ....mN.?.0.../.?
   126b0:	bdafb680 3f7f0e58 bdbc3ac3 3f7eea9d     ....X..?.:....~?
   126c0:	bdc8bd36 3f7ec46d bdd53db9 3f7e9bc9     6...m.~?.=....~?
   126d0:	bde1bc2e 3f7e70b0 bdee3876 3f7e4323     .....p~?v8..#C~?
   126e0:	bdfab273 3f7e1324 be039502 3f7de0b1     s...$.~?......}?
   126f0:	be09cf86 3f7dabcc be1008b7 3f7d7474     ......}?....tt}?
   12700:	be164083 3f7d3aac be1c76de 3f7cfe73     .@...:}?.v..s.|?
   12710:	be22abb6 3f7cbfc9 be28defc 3f7c7eb0     .."...|?..(..~|?
   12720:	be2f10a2 3f7c3b28 be354098 3f7bf531     ../.(;|?.@5.1.{?
   12730:	be3b6ecf 3f7baccd be419b37 3f7b61fc     .n;...{?7.A..a{?
   12740:	be47c5c2 3f7b14be be4dee60 3f7ac516     ..G...{?`.M...z?
   12750:	be541501 3f7a7302 be5a3997 3f7a1e84     ..T..sz?.9Z...z?
   12760:	be605c13 3f79c79d be667c66 3f796e4e     .\`...y?f|f.Nny?
   12770:	be6c9a7f 3f791298 be72b651 3f78b47b     ..l...y?Q.r.{.x?
   12780:	be78cfcc 3f7853f8 be7ee6e1 3f77f110     ..x..Sx?..~...w?
   12790:	be827dc0 3f778bc5 be8586ce 3f772417     .}....w?.....$w?
   127a0:	be888e93 3f76ba07 be8b9507 3f764d97     ......v?.....Mv?
   127b0:	be8e9a22 3f75dec6 be919ddd 3f756d97     ".....u?.....mu?
   127c0:	be94a031 3f74fa0b be97a117 3f748422     1.....t?....".t?
   127d0:	be9aa086 3f740bdd be9d9e78 3f73913f     ......t?x...?.s?
   127e0:	bea09ae5 3f731447 bea395c5 3f7294f8     ....G.s?......r?
   127f0:	bea68f12 3f721352 bea986c4 3f718f57     ....R.r?....W.q?
   12800:	beac7cd4 3f710908 beaf713a 3f708066     .|....q?:q..f.p?
   12810:	beb263ef 3f6ff573 beb554ec 3f6f6830     .c..s.o?.T..0ho?
   12820:	beb8442a 3f6ed89e bebb31a0 3f6e46be     *D....n?.1...Fn?
   12830:	bebe1d4a 3f6db293 bec1071e 3f6d1c1d     J.....m?......m?
   12840:	bec3ef15 3f6c835e bec6d529 3f6be858     ....^.l?)...X.k?
   12850:	bec9b953 3f6b4b0c becc9b8b 3f6aab7b     S....Kk?....{.j?
   12860:	becf7bca 3f6a09a7 bed25a09 3f696591     .{....j?.Z...ei?
   12870:	bed53641 3f68bf3c bed8106b 3f6816a8     A6..<.h?k.....h?
   12880:	bedae880 3f676bd8 beddbe79 3f66becc     .....kg?y.....f?
   12890:	bee0924f 3f660f88 bee363fa 3f655e0b     O.....f?.c...^e?
   128a0:	bee63375 3f64aa59 bee900b7 3f63f473     u3..Y.d?....s.c?
   128b0:	beebcbbb 3f633c5a beee9479 3f628210     ....Z<c?y.....b?
   128c0:	bef15aea 3f61c598 bef41f07 3f6106f2     .Z....a?......a?
   128d0:	bef6e0cb 3f604621 bef9a02d 3f5f8327     ....!F`?-...'._?
   128e0:	befc5d27 3f5ebe05 beff17b2 3f5df6be     ']....^?......]?
   128f0:	bf00e7e4 3f5d2d53 bf0242b1 3f5c61c7     ....S-]?.B...a\?
   12900:	bf039c3d 3f5b941a bf04f484 3f5ac450     =.....[?....P.Z?
   12910:	bf064b82 3f59f26a bf07a136 3f591e6a     .K..j.Y?6...j.Y?
   12920:	bf08f59b 3f584853 bf0a48ad 3f577026     ....SHX?.H..&pW?
   12930:	bf0b9a6b 3f5695e5 bf0cead0 3f55b993     k.....V?......U?
   12940:	bf0e39da 3f54db31 bf0f8784 3f53fac3     .9..1.T?......S?
   12950:	bf10d3cd 3f531849 bf121eb0 3f5233c6     ....I.S?.....3R?
   12960:	bf13682a 3f514d3d bf14b039 3f5064af     *h..=MQ?9....dP?
   12970:	bf15f6d9 3f4f7a1f bf173c07 3f4e8d90     .....zO?.<....N?
   12980:	bf187fc0 3f4d9f02 bf19c200 3f4cae79     ......M?....y.L?
   12990:	bf1b02c6 3f4bbbf8 bf1c420c 3f4ac77f     ......K?.B....J?
   129a0:	bf1d7fd1 3f49d112 bf1ebc12 3f48d8b3     ......I?......H?
   129b0:	bf1ff6cb 3f47de65 bf212ff9 3f46e22a     ....e.G?./!.*.F?
   129c0:	bf226799 3f45e403 bf239da9 3f44e3f5     .g"...E?..#...D?
   129d0:	bf24d225 3f43e200 bf26050a 3f42de29     %.$...C?..&.).B?
   129e0:	bf273656 3f41d870 bf286605 3f40d0da     V6'.p.A?.f(...@?
   129f0:	bf299415 3f3fc767 bf2ac082 3f3ebc1b     ..).g.??..*...>?
   12a00:	bf2beb4a 3f3daef9 bf2d1469 3f3ca003     J.+...=?i.-...<?
   12a10:	bf2e3bde 3f3b8f3b bf2f61a5 3f3a7ca4     .;..;.;?.a/..|:?
   12a20:	bf3085bb 3f396842 bf31a81d 3f385216     ..0.Bh9?..1..R8?
   12a30:	bf32c8c9 3f373a23 bf33e7bc 3f36206c     ..2.#:7?..3.l 6?
   12a40:	bf3504f3 3f3504f3 bf36206c 3f33e7bc     ..5...5?l 6...3?
   12a50:	bf373a23 3f32c8c9 bf385216 3f31a81d     #:7...2?.R8...1?
   12a60:	bf396842 3f3085bb bf3a7ca4 3f2f61a5     Bh9...0?.|:..a/?
   12a70:	bf3b8f3b 3f2e3bde bf3ca003 3f2d1469     ;.;..;.?..<.i.-?
   12a80:	bf3daef9 3f2beb4a bf3ebc1b 3f2ac082     ..=.J.+?..>...*?
   12a90:	bf3fc767 3f299415 bf40d0da 3f286605     g.?...)?..@..f(?
   12aa0:	bf41d870 3f273656 bf42de29 3f26050a     p.A.V6'?).B...&?
   12ab0:	bf43e200 3f24d225 bf44e3f5 3f239da9     ..C.%.$?..D...#?
   12ac0:	bf45e403 3f226799 bf46e22a 3f212ff9     ..E..g"?*.F../!?
   12ad0:	bf47de65 3f1ff6cb bf48d8b3 3f1ebc12     e.G....?..H....?
   12ae0:	bf49d112 3f1d7fd1 bf4ac77f 3f1c420c     ..I....?..J..B.?
   12af0:	bf4bbbf8 3f1b02c6 bf4cae79 3f19c200     ..K....?y.L....?
   12b00:	bf4d9f02 3f187fc0 bf4e8d90 3f173c07     ..M....?..N..<.?
   12b10:	bf4f7a1f 3f15f6d9 bf5064af 3f14b039     .zO....?.dP.9..?
   12b20:	bf514d3d 3f13682a bf5233c6 3f121eb0     =MQ.*h.?.3R....?
   12b30:	bf531849 3f10d3cd bf53fac3 3f0f8784     I.S....?..S....?
   12b40:	bf54db31 3f0e39da bf55b993 3f0cead0     1.T..9.?..U....?
   12b50:	bf5695e5 3f0b9a6b bf577026 3f0a48ad     ..V.k..?&pW..H.?
   12b60:	bf584853 3f08f59b bf591e6a 3f07a136     SHX....?j.Y.6..?
   12b70:	bf59f26a 3f064b82 bf5ac450 3f04f484     j.Y..K.?P.Z....?
   12b80:	bf5b941a 3f039c3d bf5c61c7 3f0242b1     ..[.=..?.a\..B.?
   12b90:	bf5d2d53 3f00e7e4 bf5df6be 3eff17b2     S-]....?..]....>
   12ba0:	bf5ebe05 3efc5d27 bf5f8327 3ef9a02d     ..^.'].>'._.-..>
   12bb0:	bf604621 3ef6e0cb bf6106f2 3ef41f07     !F`....>..a....>
   12bc0:	bf61c598 3ef15aea bf628210 3eee9479     ..a..Z.>..b.y..>
   12bd0:	bf633c5a 3eebcbbb bf63f473 3ee900b7     Z<c....>s.c....>
   12be0:	bf64aa59 3ee63375 bf655e0b 3ee363fa     Y.d.u3.>.^e..c.>
   12bf0:	bf660f88 3ee0924f bf66becc 3eddbe79     ..f.O..>..f.y..>
   12c00:	bf676bd8 3edae880 bf6816a8 3ed8106b     .kg....>..h.k..>
   12c10:	bf68bf3c 3ed53641 bf696591 3ed25a09     <.h.A6.>.ei..Z.>
   12c20:	bf6a09a7 3ecf7bca bf6aab7b 3ecc9b8b     ..j..{.>{.j....>
   12c30:	bf6b4b0c 3ec9b953 bf6be858 3ec6d529     .Kk.S..>X.k.)..>
   12c40:	bf6c835e 3ec3ef15 bf6d1c1d 3ec1071e     ^.l....>..m....>
   12c50:	bf6db293 3ebe1d4a bf6e46be 3ebb31a0     ..m.J..>.Fn..1.>
   12c60:	bf6ed89e 3eb8442a bf6f6830 3eb554ec     ..n.*D.>0ho..T.>
   12c70:	bf6ff573 3eb263ef bf708066 3eaf713a     s.o..c.>f.p.:q.>
   12c80:	bf710908 3eac7cd4 bf718f57 3ea986c4     ..q..|.>W.q....>
   12c90:	bf721352 3ea68f12 bf7294f8 3ea395c5     R.r....>..r....>
   12ca0:	bf731447 3ea09ae5 bf73913f 3e9d9e78     G.s....>?.s.x..>
   12cb0:	bf740bdd 3e9aa086 bf748422 3e97a117     ..t....>".t....>
   12cc0:	bf74fa0b 3e94a031 bf756d97 3e919ddd     ..t.1..>.mu....>
   12cd0:	bf75dec6 3e8e9a22 bf764d97 3e8b9507     ..u."..>.Mv....>
   12ce0:	bf76ba07 3e888e93 bf772417 3e8586ce     ..v....>.$w....>
   12cf0:	bf778bc5 3e827dc0 bf77f110 3e7ee6e1     ..w..}.>..w...~>
   12d00:	bf7853f8 3e78cfcc bf78b47b 3e72b651     .Sx...x>{.x.Q.r>
   12d10:	bf791298 3e6c9a7f bf796e4e 3e667c66     ..y...l>Nny.f|f>
   12d20:	bf79c79d 3e605c13 bf7a1e84 3e5a3997     ..y..\`>..z..9Z>
   12d30:	bf7a7302 3e541501 bf7ac516 3e4dee60     .sz...T>..z.`.M>
   12d40:	bf7b14be 3e47c5c2 bf7b61fc 3e419b37     ..{...G>.a{.7.A>
   12d50:	bf7baccd 3e3b6ecf bf7bf531 3e354098     ..{..n;>1.{..@5>
   12d60:	bf7c3b28 3e2f10a2 bf7c7eb0 3e28defc     (;|.../>.~|...(>
   12d70:	bf7cbfc9 3e22abb6 bf7cfe73 3e1c76de     ..|...">s.|..v.>
   12d80:	bf7d3aac 3e164083 bf7d7474 3e1008b7     .:}..@.>tt}....>
   12d90:	bf7dabcc 3e09cf86 bf7de0b1 3e039502     ..}....>..}....>
   12da0:	bf7e1324 3dfab273 bf7e4323 3dee3876     $.~.s..=#C~.v8.=
   12db0:	bf7e70b0 3de1bc2e bf7e9bc9 3dd53db9     .p~....=..~..=.=
   12dc0:	bf7ec46d 3dc8bd36 bf7eea9d 3dbc3ac3     m.~.6..=..~..:.=
   12dd0:	bf7f0e58 3dafb680 bf7f2f9d 3da3308c     X......=./...0.=
   12de0:	bf7f4e6d 3d96a905 bf7f6ac7 3d8a200a     mN.....=.j... .=
   12df0:	bf7f84ab 3d7b2b74 bf7f9c18 3d621468     ....t+{=....h.b=
   12e00:	bf7fb10f 3d48fb2f bf7fc38f 3d2fe007     ..../.H=....../=
   12e10:	bf7fd398 3d16c32c bf7fe129 3cfb49b9     ....,..=)....I.<
   12e20:	bf7fec43 3cc90ab0 bf7ff4e6 3c96c9b6     C......<.......<
   12e30:	bf7ffb11 3c490e90 bf7ffec4 3bc90f89     ......I<.......;
   12e40:	bf800000 00000000 bf7ffec4 bbc90f89     ................
   12e50:	bf7ffb11 bc490e90 bf7ff4e6 bc96c9b6     ......I.........
   12e60:	bf7fec43 bcc90ab0 bf7fe129 bcfb49b9     C.......)....I..
   12e70:	bf7fd398 bd16c32c bf7fc38f bd2fe007     ....,........./.
   12e80:	bf7fb10f bd48fb2f bf7f9c18 bd621468     ..../.H.....h.b.
   12e90:	bf7f84ab bd7b2b74 bf7f6ac7 bd8a200a     ....t+{..j... ..
   12ea0:	bf7f4e6d bd96a905 bf7f2f9d bda3308c     mN......./...0..
   12eb0:	bf7f0e58 bdafb680 bf7eea9d bdbc3ac3     X.........~..:..
   12ec0:	bf7ec46d bdc8bd36 bf7e9bc9 bdd53db9     m.~.6.....~..=..
   12ed0:	bf7e70b0 bde1bc2e bf7e4323 bdee3876     .p~.....#C~.v8..
   12ee0:	bf7e1324 bdfab273 bf7de0b1 be039502     $.~.s.....}.....
   12ef0:	bf7dabcc be09cf86 bf7d7474 be1008b7     ..}.....tt}.....
   12f00:	bf7d3aac be164083 bf7cfe73 be1c76de     .:}..@..s.|..v..
   12f10:	bf7cbfc9 be22abb6 bf7c7eb0 be28defc     ..|..."..~|...(.
   12f20:	bf7c3b28 be2f10a2 bf7bf531 be354098     (;|.../.1.{..@5.
   12f30:	bf7baccd be3b6ecf bf7b61fc be419b37     ..{..n;..a{.7.A.
   12f40:	bf7b14be be47c5c2 bf7ac516 be4dee60     ..{...G...z.`.M.
   12f50:	bf7a7302 be541501 bf7a1e84 be5a3997     .sz...T...z..9Z.
   12f60:	bf79c79d be605c13 bf796e4e be667c66     ..y..\`.Nny.f|f.
   12f70:	bf791298 be6c9a7f bf78b47b be72b651     ..y...l.{.x.Q.r.
   12f80:	bf7853f8 be78cfcc bf77f110 be7ee6e1     .Sx...x...w...~.
   12f90:	bf778bc5 be827dc0 bf772417 be8586ce     ..w..}...$w.....
   12fa0:	bf76ba07 be888e93 bf764d97 be8b9507     ..v......Mv.....
   12fb0:	bf75dec6 be8e9a22 bf756d97 be919ddd     ..u."....mu.....
   12fc0:	bf74fa0b be94a031 bf748422 be97a117     ..t.1...".t.....
   12fd0:	bf740bdd be9aa086 bf73913f be9d9e78     ..t.....?.s.x...
   12fe0:	bf731447 bea09ae5 bf7294f8 bea395c5     G.s.......r.....
   12ff0:	bf721352 bea68f12 bf718f57 bea986c4     R.r.....W.q.....
   13000:	bf710908 beac7cd4 bf708066 beaf713a     ..q..|..f.p.:q..
   13010:	bf6ff573 beb263ef bf6f6830 beb554ec     s.o..c..0ho..T..
   13020:	bf6ed89e beb8442a bf6e46be bebb31a0     ..n.*D...Fn..1..
   13030:	bf6db293 bebe1d4a bf6d1c1d bec1071e     ..m.J.....m.....
   13040:	bf6c835e bec3ef15 bf6be858 bec6d529     ^.l.....X.k.)...
   13050:	bf6b4b0c bec9b953 bf6aab7b becc9b8b     .Kk.S...{.j.....
   13060:	bf6a09a7 becf7bca bf696591 bed25a09     ..j..{...ei..Z..
   13070:	bf68bf3c bed53641 bf6816a8 bed8106b     <.h.A6....h.k...
   13080:	bf676bd8 bedae880 bf66becc beddbe79     .kg.......f.y...
   13090:	bf660f88 bee0924f bf655e0b bee363fa     ..f.O....^e..c..
   130a0:	bf64aa59 bee63375 bf63f473 bee900b7     Y.d.u3..s.c.....
   130b0:	bf633c5a beebcbbb bf628210 beee9479     Z<c.......b.y...
   130c0:	bf61c598 bef15aea bf6106f2 bef41f07     ..a..Z....a.....
   130d0:	bf604621 bef6e0cb bf5f8327 bef9a02d     !F`.....'._.-...
   130e0:	bf5ebe05 befc5d27 bf5df6be beff17b2     ..^.']....].....
   130f0:	bf5d2d53 bf00e7e4 bf5c61c7 bf0242b1     S-]......a\..B..
   13100:	bf5b941a bf039c3d bf5ac450 bf04f484     ..[.=...P.Z.....
   13110:	bf59f26a bf064b82 bf591e6a bf07a136     j.Y..K..j.Y.6...
   13120:	bf584853 bf08f59b bf577026 bf0a48ad     SHX.....&pW..H..
   13130:	bf5695e5 bf0b9a6b bf55b993 bf0cead0     ..V.k.....U.....
   13140:	bf54db31 bf0e39da bf53fac3 bf0f8784     1.T..9....S.....
   13150:	bf531849 bf10d3cd bf5233c6 bf121eb0     I.S......3R.....
   13160:	bf514d3d bf13682a bf5064af bf14b039     =MQ.*h...dP.9...
   13170:	bf4f7a1f bf15f6d9 bf4e8d90 bf173c07     .zO.......N..<..
   13180:	bf4d9f02 bf187fc0 bf4cae79 bf19c200     ..M.....y.L.....
   13190:	bf4bbbf8 bf1b02c6 bf4ac77f bf1c420c     ..K.......J..B..
   131a0:	bf49d112 bf1d7fd1 bf48d8b3 bf1ebc12     ..I.......H.....
   131b0:	bf47de65 bf1ff6cb bf46e22a bf212ff9     e.G.....*.F../!.
   131c0:	bf45e403 bf226799 bf44e3f5 bf239da9     ..E..g"...D...#.
   131d0:	bf43e200 bf24d225 bf42de29 bf26050a     ..C.%.$.).B...&.
   131e0:	bf41d870 bf273656 bf40d0da bf286605     p.A.V6'...@..f(.
   131f0:	bf3fc767 bf299415 bf3ebc1b bf2ac082     g.?...)...>...*.
   13200:	bf3daef9 bf2beb4a bf3ca003 bf2d1469     ..=.J.+...<.i.-.
   13210:	bf3b8f3b bf2e3bde bf3a7ca4 bf2f61a5     ;.;..;...|:..a/.
   13220:	bf396842 bf3085bb bf385216 bf31a81d     Bh9...0..R8...1.
   13230:	bf373a23 bf32c8c9 bf36206c bf33e7bc     #:7...2.l 6...3.
   13240:	bf3504f3 bf3504f3 bf33e7bc bf36206c     ..5...5...3.l 6.
   13250:	bf32c8c9 bf373a23 bf31a81d bf385216     ..2.#:7...1..R8.
   13260:	bf3085bb bf396842 bf2f61a5 bf3a7ca4     ..0.Bh9..a/..|:.
   13270:	bf2e3bde bf3b8f3b bf2d1469 bf3ca003     .;..;.;.i.-...<.
   13280:	bf2beb4a bf3daef9 bf2ac082 bf3ebc1b     J.+...=...*...>.
   13290:	bf299415 bf3fc767 bf286605 bf40d0da     ..).g.?..f(...@.
   132a0:	bf273656 bf41d870 bf26050a bf42de29     V6'.p.A...&.).B.
   132b0:	bf24d225 bf43e200 bf239da9 bf44e3f5     %.$...C...#...D.
   132c0:	bf226799 bf45e403 bf212ff9 bf46e22a     .g"...E../!.*.F.
   132d0:	bf1ff6cb bf47de65 bf1ebc12 bf48d8b3     ....e.G.......H.
   132e0:	bf1d7fd1 bf49d112 bf1c420c bf4ac77f     ......I..B....J.
   132f0:	bf1b02c6 bf4bbbf8 bf19c200 bf4cae79     ......K.....y.L.
   13300:	bf187fc0 bf4d9f02 bf173c07 bf4e8d90     ......M..<....N.
   13310:	bf15f6d9 bf4f7a1f bf14b039 bf5064af     .....zO.9....dP.
   13320:	bf13682a bf514d3d bf121eb0 bf5233c6     *h..=MQ......3R.
   13330:	bf10d3cd bf531849 bf0f8784 bf53fac3     ....I.S.......S.
   13340:	bf0e39da bf54db31 bf0cead0 bf55b993     .9..1.T.......U.
   13350:	bf0b9a6b bf5695e5 bf0a48ad bf577026     k.....V..H..&pW.
   13360:	bf08f59b bf584853 bf07a136 bf591e6a     ....SHX.6...j.Y.
   13370:	bf064b82 bf59f26a bf04f484 bf5ac450     .K..j.Y.....P.Z.
   13380:	bf039c3d bf5b941a bf0242b1 bf5c61c7     =.....[..B...a\.
   13390:	bf00e7e4 bf5d2d53 beff17b2 bf5df6be     ....S-].......].
   133a0:	befc5d27 bf5ebe05 bef9a02d bf5f8327     ']....^.-...'._.
   133b0:	bef6e0cb bf604621 bef41f07 bf6106f2     ....!F`.......a.
   133c0:	bef15aea bf61c598 beee9479 bf628210     .Z....a.y.....b.
   133d0:	beebcbbb bf633c5a bee900b7 bf63f473     ....Z<c.....s.c.
   133e0:	bee63375 bf64aa59 bee363fa bf655e0b     u3..Y.d..c...^e.
   133f0:	bee0924f bf660f88 beddbe79 bf66becc     O.....f.y.....f.
   13400:	bedae880 bf676bd8 bed8106b bf6816a8     .....kg.k.....h.
   13410:	bed53641 bf68bf3c bed25a09 bf696591     A6..<.h..Z...ei.
   13420:	becf7bca bf6a09a7 becc9b8b bf6aab7b     .{....j.....{.j.
   13430:	bec9b953 bf6b4b0c bec6d529 bf6be858     S....Kk.)...X.k.
   13440:	bec3ef15 bf6c835e bec1071e bf6d1c1d     ....^.l.......m.
   13450:	bebe1d4a bf6db293 bebb31a0 bf6e46be     J.....m..1...Fn.
   13460:	beb8442a bf6ed89e beb554ec bf6f6830     *D....n..T..0ho.
   13470:	beb263ef bf6ff573 beaf713a bf708066     .c..s.o.:q..f.p.
   13480:	beac7cd4 bf710908 bea986c4 bf718f57     .|....q.....W.q.
   13490:	bea68f12 bf721352 bea395c5 bf7294f8     ....R.r.......r.
   134a0:	bea09ae5 bf731447 be9d9e78 bf73913f     ....G.s.x...?.s.
   134b0:	be9aa086 bf740bdd be97a117 bf748422     ......t.....".t.
   134c0:	be94a031 bf74fa0b be919ddd bf756d97     1.....t......mu.
   134d0:	be8e9a22 bf75dec6 be8b9507 bf764d97     ".....u......Mv.
   134e0:	be888e93 bf76ba07 be8586ce bf772417     ......v......$w.
   134f0:	be827dc0 bf778bc5 be7ee6e1 bf77f110     .}....w...~...w.
   13500:	be78cfcc bf7853f8 be72b651 bf78b47b     ..x..Sx.Q.r.{.x.
   13510:	be6c9a7f bf791298 be667c66 bf796e4e     ..l...y.f|f.Nny.
   13520:	be605c13 bf79c79d be5a3997 bf7a1e84     .\`...y..9Z...z.
   13530:	be541501 bf7a7302 be4dee60 bf7ac516     ..T..sz.`.M...z.
   13540:	be47c5c2 bf7b14be be419b37 bf7b61fc     ..G...{.7.A..a{.
   13550:	be3b6ecf bf7baccd be354098 bf7bf531     .n;...{..@5.1.{.
   13560:	be2f10a2 bf7c3b28 be28defc bf7c7eb0     ../.(;|...(..~|.
   13570:	be22abb6 bf7cbfc9 be1c76de bf7cfe73     .."...|..v..s.|.
   13580:	be164083 bf7d3aac be1008b7 bf7d7474     .@...:}.....tt}.
   13590:	be09cf86 bf7dabcc be039502 bf7de0b1     ......}.......}.
   135a0:	bdfab273 bf7e1324 bdee3876 bf7e4323     s...$.~.v8..#C~.
   135b0:	bde1bc2e bf7e70b0 bdd53db9 bf7e9bc9     .....p~..=....~.
   135c0:	bdc8bd36 bf7ec46d bdbc3ac3 bf7eea9d     6...m.~..:....~.
   135d0:	bdafb680 bf7f0e58 bda3308c bf7f2f9d     ....X....0.../..
   135e0:	bd96a905 bf7f4e6d bd8a200a bf7f6ac7     ....mN... ...j..
   135f0:	bd7b2b74 bf7f84ab bd621468 bf7f9c18     t+{.....h.b.....
   13600:	bd48fb2f bf7fb10f bd2fe007 bf7fc38f     /.H......./.....
   13610:	bd16c32c bf7fd398 bcfb49b9 bf7fe129     ,........I..)...
   13620:	bcc90ab0 bf7fec43 bc96c9b6 bf7ff4e6     ....C...........
   13630:	bc490e90 bf7ffb11 bbc90f89 bf7ffec4     ..I.............
   13640:	80000000 bf800000 3bc90f89 bf7ffec4     ...........;....
   13650:	3c490e90 bf7ffb11 3c96c9b6 bf7ff4e6     ..I<.......<....
   13660:	3cc90ab0 bf7fec43 3cfb49b9 bf7fe129     ...<C....I.<)...
   13670:	3d16c32c bf7fd398 3d2fe007 bf7fc38f     ,..=....../=....
   13680:	3d48fb2f bf7fb10f 3d621468 bf7f9c18     /.H=....h.b=....
   13690:	3d7b2b74 bf7f84ab 3d8a200a bf7f6ac7     t+{=..... .=.j..
   136a0:	3d96a905 bf7f4e6d 3da3308c bf7f2f9d     ...=mN...0.=./..
   136b0:	3dafb680 bf7f0e58 3dbc3ac3 bf7eea9d     ...=X....:.=..~.
   136c0:	3dc8bd36 bf7ec46d 3dd53db9 bf7e9bc9     6..=m.~..=.=..~.
   136d0:	3de1bc2e bf7e70b0 3dee3876 bf7e4323     ...=.p~.v8.=#C~.
   136e0:	3dfab273 bf7e1324 3e039502 bf7de0b1     s..=$.~....>..}.
   136f0:	3e09cf86 bf7dabcc 3e1008b7 bf7d7474     ...>..}....>tt}.
   13700:	3e164083 bf7d3aac 3e1c76de bf7cfe73     .@.>.:}..v.>s.|.
   13710:	3e22abb6 bf7cbfc9 3e28defc bf7c7eb0     ..">..|...(>.~|.
   13720:	3e2f10a2 bf7c3b28 3e354098 bf7bf531     ../>(;|..@5>1.{.
   13730:	3e3b6ecf bf7baccd 3e419b37 bf7b61fc     .n;>..{.7.A>.a{.
   13740:	3e47c5c2 bf7b14be 3e4dee60 bf7ac516     ..G>..{.`.M>..z.
   13750:	3e541501 bf7a7302 3e5a3997 bf7a1e84     ..T>.sz..9Z>..z.
   13760:	3e605c13 bf79c79d 3e667c66 bf796e4e     .\`>..y.f|f>Nny.
   13770:	3e6c9a7f bf791298 3e72b651 bf78b47b     ..l>..y.Q.r>{.x.
   13780:	3e78cfcc bf7853f8 3e7ee6e1 bf77f110     ..x>.Sx...~>..w.
   13790:	3e827dc0 bf778bc5 3e8586ce bf772417     .}.>..w....>.$w.
   137a0:	3e888e93 bf76ba07 3e8b9507 bf764d97     ...>..v....>.Mv.
   137b0:	3e8e9a22 bf75dec6 3e919ddd bf756d97     "..>..u....>.mu.
   137c0:	3e94a031 bf74fa0b 3e97a117 bf748422     1..>..t....>".t.
   137d0:	3e9aa086 bf740bdd 3e9d9e78 bf73913f     ...>..t.x..>?.s.
   137e0:	3ea09ae5 bf731447 3ea395c5 bf7294f8     ...>G.s....>..r.
   137f0:	3ea68f12 bf721352 3ea986c4 bf718f57     ...>R.r....>W.q.
   13800:	3eac7cd4 bf710908 3eaf713a bf708066     .|.>..q.:q.>f.p.
   13810:	3eb263ef bf6ff573 3eb554ec bf6f6830     .c.>s.o..T.>0ho.
   13820:	3eb8442a bf6ed89e 3ebb31a0 bf6e46be     *D.>..n..1.>.Fn.
   13830:	3ebe1d4a bf6db293 3ec1071e bf6d1c1d     J..>..m....>..m.
   13840:	3ec3ef15 bf6c835e 3ec6d529 bf6be858     ...>^.l.)..>X.k.
   13850:	3ec9b953 bf6b4b0c 3ecc9b8b bf6aab7b     S..>.Kk....>{.j.
   13860:	3ecf7bca bf6a09a7 3ed25a09 bf696591     .{.>..j..Z.>.ei.
   13870:	3ed53641 bf68bf3c 3ed8106b bf6816a8     A6.><.h.k..>..h.
   13880:	3edae880 bf676bd8 3eddbe79 bf66becc     ...>.kg.y..>..f.
   13890:	3ee0924f bf660f88 3ee363fa bf655e0b     O..>..f..c.>.^e.
   138a0:	3ee63375 bf64aa59 3ee900b7 bf63f473     u3.>Y.d....>s.c.
   138b0:	3eebcbbb bf633c5a 3eee9479 bf628210     ...>Z<c.y..>..b.
   138c0:	3ef15aea bf61c598 3ef41f07 bf6106f2     .Z.>..a....>..a.
   138d0:	3ef6e0cb bf604621 3ef9a02d bf5f8327     ...>!F`.-..>'._.
   138e0:	3efc5d27 bf5ebe05 3eff17b2 bf5df6be     '].>..^....>..].
   138f0:	3f00e7e4 bf5d2d53 3f0242b1 bf5c61c7     ...?S-]..B.?.a\.
   13900:	3f039c3d bf5b941a 3f04f484 bf5ac450     =..?..[....?P.Z.
   13910:	3f064b82 bf59f26a 3f07a136 bf591e6a     .K.?j.Y.6..?j.Y.
   13920:	3f08f59b bf584853 3f0a48ad bf577026     ...?SHX..H.?&pW.
   13930:	3f0b9a6b bf5695e5 3f0cead0 bf55b993     k..?..V....?..U.
   13940:	3f0e39da bf54db31 3f0f8784 bf53fac3     .9.?1.T....?..S.
   13950:	3f10d3cd bf531849 3f121eb0 bf5233c6     ...?I.S....?.3R.
   13960:	3f13682a bf514d3d 3f14b039 bf5064af     *h.?=MQ.9..?.dP.
   13970:	3f15f6d9 bf4f7a1f 3f173c07 bf4e8d90     ...?.zO..<.?..N.
   13980:	3f187fc0 bf4d9f02 3f19c200 bf4cae79     ...?..M....?y.L.
   13990:	3f1b02c6 bf4bbbf8 3f1c420c bf4ac77f     ...?..K..B.?..J.
   139a0:	3f1d7fd1 bf49d112 3f1ebc12 bf48d8b3     ...?..I....?..H.
   139b0:	3f1ff6cb bf47de65 3f212ff9 bf46e22a     ...?e.G../!?*.F.
   139c0:	3f226799 bf45e403 3f239da9 bf44e3f5     .g"?..E...#?..D.
   139d0:	3f24d225 bf43e200 3f26050a bf42de29     %.$?..C...&?).B.
   139e0:	3f273656 bf41d870 3f286605 bf40d0da     V6'?p.A..f(?..@.
   139f0:	3f299415 bf3fc767 3f2ac082 bf3ebc1b     ..)?g.?...*?..>.
   13a00:	3f2beb4a bf3daef9 3f2d1469 bf3ca003     J.+?..=.i.-?..<.
   13a10:	3f2e3bde bf3b8f3b 3f2f61a5 bf3a7ca4     .;.?;.;..a/?.|:.
   13a20:	3f3085bb bf396842 3f31a81d bf385216     ..0?Bh9...1?.R8.
   13a30:	3f32c8c9 bf373a23 3f33e7bc bf36206c     ..2?#:7...3?l 6.
   13a40:	3f3504f3 bf3504f3 3f36206c bf33e7bc     ..5?..5.l 6?..3.
   13a50:	3f373a23 bf32c8c9 3f385216 bf31a81d     #:7?..2..R8?..1.
   13a60:	3f396842 bf3085bb 3f3a7ca4 bf2f61a5     Bh9?..0..|:?.a/.
   13a70:	3f3b8f3b bf2e3bde 3f3ca003 bf2d1469     ;.;?.;....<?i.-.
   13a80:	3f3daef9 bf2beb4a 3f3ebc1b bf2ac082     ..=?J.+...>?..*.
   13a90:	3f3fc767 bf299415 3f40d0da bf286605     g.??..)...@?.f(.
   13aa0:	3f41d870 bf273656 3f42de29 bf26050a     p.A?V6'.).B?..&.
   13ab0:	3f43e200 bf24d225 3f44e3f5 bf239da9     ..C?%.$...D?..#.
   13ac0:	3f45e403 bf226799 3f46e22a bf212ff9     ..E?.g".*.F?./!.
   13ad0:	3f47de65 bf1ff6cb 3f48d8b3 bf1ebc12     e.G?......H?....
   13ae0:	3f49d112 bf1d7fd1 3f4ac77f bf1c420c     ..I?......J?.B..
   13af0:	3f4bbbf8 bf1b02c6 3f4cae79 bf19c200     ..K?....y.L?....
   13b00:	3f4d9f02 bf187fc0 3f4e8d90 bf173c07     ..M?......N?.<..
   13b10:	3f4f7a1f bf15f6d9 3f5064af bf14b039     .zO?.....dP?9...
   13b20:	3f514d3d bf13682a 3f5233c6 bf121eb0     =MQ?*h...3R?....
   13b30:	3f531849 bf10d3cd 3f53fac3 bf0f8784     I.S?......S?....
   13b40:	3f54db31 bf0e39da 3f55b993 bf0cead0     1.T?.9....U?....
   13b50:	3f5695e5 bf0b9a6b 3f577026 bf0a48ad     ..V?k...&pW?.H..
   13b60:	3f584853 bf08f59b 3f591e6a bf07a136     SHX?....j.Y?6...
   13b70:	3f59f26a bf064b82 3f5ac450 bf04f484     j.Y?.K..P.Z?....
   13b80:	3f5b941a bf039c3d 3f5c61c7 bf0242b1     ..[?=....a\?.B..
   13b90:	3f5d2d53 bf00e7e4 3f5df6be beff17b2     S-]?......]?....
   13ba0:	3f5ebe05 befc5d27 3f5f8327 bef9a02d     ..^?']..'._?-...
   13bb0:	3f604621 bef6e0cb 3f6106f2 bef41f07     !F`?......a?....
   13bc0:	3f61c598 bef15aea 3f628210 beee9479     ..a?.Z....b?y...
   13bd0:	3f633c5a beebcbbb 3f63f473 bee900b7     Z<c?....s.c?....
   13be0:	3f64aa59 bee63375 3f655e0b bee363fa     Y.d?u3...^e?.c..
   13bf0:	3f660f88 bee0924f 3f66becc beddbe79     ..f?O.....f?y...
   13c00:	3f676bd8 bedae880 3f6816a8 bed8106b     .kg?......h?k...
   13c10:	3f68bf3c bed53641 3f696591 bed25a09     <.h?A6...ei?.Z..
   13c20:	3f6a09a7 becf7bca 3f6aab7b becc9b8b     ..j?.{..{.j?....
   13c30:	3f6b4b0c bec9b953 3f6be858 bec6d529     .Kk?S...X.k?)...
   13c40:	3f6c835e bec3ef15 3f6d1c1d bec1071e     ^.l?......m?....
   13c50:	3f6db293 bebe1d4a 3f6e46be bebb31a0     ..m?J....Fn?.1..
   13c60:	3f6ed89e beb8442a 3f6f6830 beb554ec     ..n?*D..0ho?.T..
   13c70:	3f6ff573 beb263ef 3f708066 beaf713a     s.o?.c..f.p?:q..
   13c80:	3f710908 beac7cd4 3f718f57 bea986c4     ..q?.|..W.q?....
   13c90:	3f721352 bea68f12 3f7294f8 bea395c5     R.r?......r?....
   13ca0:	3f731447 bea09ae5 3f73913f be9d9e78     G.s?....?.s?x...
   13cb0:	3f740bdd be9aa086 3f748422 be97a117     ..t?....".t?....
   13cc0:	3f74fa0b be94a031 3f756d97 be919ddd     ..t?1....mu?....
   13cd0:	3f75dec6 be8e9a22 3f764d97 be8b9507     ..u?"....Mv?....
   13ce0:	3f76ba07 be888e93 3f772417 be8586ce     ..v?.....$w?....
   13cf0:	3f778bc5 be827dc0 3f77f110 be7ee6e1     ..w?.}....w?..~.
   13d00:	3f7853f8 be78cfcc 3f78b47b be72b651     .Sx?..x.{.x?Q.r.
   13d10:	3f791298 be6c9a7f 3f796e4e be667c66     ..y?..l.Nny?f|f.
   13d20:	3f79c79d be605c13 3f7a1e84 be5a3997     ..y?.\`...z?.9Z.
   13d30:	3f7a7302 be541501 3f7ac516 be4dee60     .sz?..T...z?`.M.
   13d40:	3f7b14be be47c5c2 3f7b61fc be419b37     ..{?..G..a{?7.A.
   13d50:	3f7baccd be3b6ecf 3f7bf531 be354098     ..{?.n;.1.{?.@5.
   13d60:	3f7c3b28 be2f10a2 3f7c7eb0 be28defc     (;|?../..~|?..(.
   13d70:	3f7cbfc9 be22abb6 3f7cfe73 be1c76de     ..|?..".s.|?.v..
   13d80:	3f7d3aac be164083 3f7d7474 be1008b7     .:}?.@..tt}?....
   13d90:	3f7dabcc be09cf86 3f7de0b1 be039502     ..}?......}?....
   13da0:	3f7e1324 bdfab273 3f7e4323 bdee3876     $.~?s...#C~?v8..
   13db0:	3f7e70b0 bde1bc2e 3f7e9bc9 bdd53db9     .p~?......~?.=..
   13dc0:	3f7ec46d bdc8bd36 3f7eea9d bdbc3ac3     m.~?6.....~?.:..
   13dd0:	3f7f0e58 bdafb680 3f7f2f9d bda3308c     X..?...../.?.0..
   13de0:	3f7f4e6d bd96a905 3f7f6ac7 bd8a200a     mN.?.....j.?. ..
   13df0:	3f7f84ab bd7b2b74 3f7f9c18 bd621468     ...?t+{....?h.b.
   13e00:	3f7fb10f bd48fb2f 3f7fc38f bd2fe007     ...?/.H....?../.
   13e10:	3f7fd398 bd16c32c 3f7fe129 bcfb49b9     ...?,...)..?.I..
   13e20:	3f7fec43 bcc90ab0 3f7ff4e6 bc96c9b6     C..?.......?....
   13e30:	3f7ffb11 bc490e90 3f7ffec4 bbc90f89     ...?..I....?....

00013e40 <armBitRevIndexTable1024>:
   13e40:	10000008 02000010 12000018 04000020     ............ ...
   13e50:	14000028 06000030 16000038 08000040     (...0...8...@...
   13e60:	18000048 0a000050 1a000058 0c000060     H...P...X...`...
   13e70:	1c000068 0e000070 1e000078 08000080     h...p...x.......
   13e80:	10400088 02400090 12400098 044000a0     ..@...@...@...@.
   13e90:	144000a8 064000b0 164000b8 084000c0     ..@...@...@...@.
   13ea0:	184000c8 0a4000d0 1a4000d8 0c4000e0     ..@...@...@...@.
   13eb0:	1c4000e8 0e4000f0 1e4000f8 08000100     ..@...@...@.....
   13ec0:	10800108 02800110 12800118 04800120     ............ ...
   13ed0:	14800128 06800130 16800138 08800140     (...0...8...@...
   13ee0:	18800148 0a800150 1a800158 0c800160     H...P...X...`...
   13ef0:	1c800168 0e800170 1e800178 08400180     h...p...x.....@.
   13f00:	10c00188 02c00190 12c00198 04c001a0     ................
   13f10:	14c001a8 06c001b0 16c001b8 08c001c0     ................
   13f20:	18c001c8 0ac001d0 1ac001d8 0cc001e0     ................
   13f30:	1cc001e8 0ec001f0 1ec001f8 08000200     ................
   13f40:	11000208 03000210 13000218 05000220     ............ ...
   13f50:	15000228 07000230 17000238 09000240     (...0...8...@...
   13f60:	19000248 0b000250 1b000258 0d000260     H...P...X...`...
   13f70:	1d000268 0f000270 1f000278 08800280     h...p...x.......
   13f80:	11400288 03400290 13400298 054002a0     ..@...@...@...@.
   13f90:	154002a8 074002b0 174002b8 094002c0     ..@...@...@...@.
   13fa0:	194002c8 0b4002d0 1b4002d8 0d4002e0     ..@...@...@...@.
   13fb0:	1d4002e8 0f4002f0 1f4002f8 08400300     ..@...@...@...@.
   13fc0:	11800308 03800310 13800318 05800320     ............ ...
   13fd0:	15800328 07800330 17800338 09800340     (...0...8...@...
   13fe0:	19800348 0b800350 1b800358 0d800360     H...P...X...`...
   13ff0:	1d800368 0f800370 1f800378 08c00380     h...p...x.......
   14000:	11c00388 03c00390 13c00398 05c003a0     ................
   14010:	15c003a8 07c003b0 17c003b8 09c003c0     ................
   14020:	19c003c8 0bc003d0 1bc003d8 0dc003e0     ................
   14030:	1dc003e8 0fc003f0 1fc003f8 10000400     ................
   14040:	10080408 11000410 12080418 10080420     ............ ...
   14050:	14080428 06080430 16080438 08080440     (...0...8...@...
   14060:	18080448 0a080450 1a080458 0c080460     H...P...X...`...
   14070:	1c080468 0e080470 1e080478 18000480     h...p...x.......
   14080:	10480488 19000490 12480498 180804a0     ..H.......H.....
   14090:	144804a8 064804b0 164804b8 084804c0     ..H...H...H...H.
   140a0:	184804c8 0a4804d0 1a4804d8 0c4804e0     ..H...H...H...H.
   140b0:	1c4804e8 0e4804f0 1e4804f8 10400500     ..H...H...H...@.
   140c0:	10880508 11400510 12880518 10480520     ......@..... .H.
   140d0:	14880528 06880530 16880538 08880540     (...0...8...@...
   140e0:	18880548 0a880550 1a880558 0c880560     H...P...X...`...
   140f0:	1c880568 0e880570 1e880578 18400580     h...p...x.....@.
   14100:	10c80588 19400590 12c80598 184805a0     ......@.......H.
   14110:	14c805a8 06c805b0 16c805b8 08c805c0     ................
   14120:	18c805c8 0ac805d0 1ac805d8 0cc805e0     ................
   14130:	1cc805e8 0ec805f0 1ec805f8 10800600     ................
   14140:	11080608 11800610 13080618 10880620     ............ ...
   14150:	15080628 07080630 17080638 09080640     (...0...8...@...
   14160:	19080648 0b080650 1b080658 0d080660     H...P...X...`...
   14170:	1d080668 0f080670 1f080678 18800680     h...p...x.......
   14180:	11480688 19800690 13480698 188806a0     ..H.......H.....
   14190:	154806a8 074806b0 174806b8 094806c0     ..H...H...H...H.
   141a0:	194806c8 0b4806d0 1b4806d8 0d4806e0     ..H...H...H...H.
   141b0:	1d4806e8 0f4806f0 1f4806f8 10c00700     ..H...H...H.....
   141c0:	11880708 11c00710 13880718 10c80720     ............ ...
   141d0:	15880728 07880730 17880738 09880740     (...0...8...@...
   141e0:	19880748 0b880750 1b880758 0d880760     H...P...X...`...
   141f0:	1d880768 0f880770 1f880778 18c00780     h...p...x.......
   14200:	11c80788 19c00790 13c80798 18c807a0     ................
   14210:	15c807a8 07c807b0 17c807b8 09c807c0     ................
   14220:	19c807c8 0bc807d0 1bc807d8 0dc807e0     ................
   14230:	1dc807e8 0fc807f0 1fc807f8 10100808     ................
   14240:	08400810 12100818 11000820 14100828     ..@..... ...(...
   14250:	11800830 16100838 18100848 0a100850     0...8...H...P...
   14260:	1a100858 0c100860 1c100868 0e100870     X...`...h...p...
   14270:	1e100878 0a000880 10500888 0b000890     x.........P.....
   14280:	12500898 0a0808a0 145008a8 0b0808b0     ..P.......P.....
   14290:	165008b8 0a1008c0 185008c8 0a5008d0     ..P.......P...P.
   142a0:	1a5008d8 0c5008e0 1c5008e8 0e5008f0     ..P...P...P...P.
   142b0:	1e5008f8 10900908 09800910 12900918     ..P.............
   142c0:	19000920 14900928 19800930 16900938      ...(...0...8...
   142d0:	0b000940 18900948 0a900950 1a900958     @...H...P...X...
   142e0:	0c900960 1c900968 0e900970 1e900978     `...h...p...x...
   142f0:	0a400980 10d00988 0b400990 12d00998     ..@.......@.....
   14300:	0a4809a0 14d009a8 0b4809b0 16d009b8     ..H.......H.....
   14310:	0a5009c0 18d009c8 0ad009d0 1ad009d8     ..P.............
   14320:	0cd009e0 1cd009e8 0ed009f0 1ed009f8     ................
   14330:	11100a08 13100a18 11400a20 15100a28     ........ .@.(...
   14340:	11c00a30 17100a38 19100a48 0b100a50     0...8...H...P...
   14350:	1b100a58 0d100a60 1d100a68 0f100a70     X...`...h...p...
   14360:	1f100a78 11500a88 0b800a90 13500a98     x.....P.......P.
   14370:	11500aa0 15500aa8 0b880ab0 17500ab8     ..P...P.......P.
   14380:	0b800ac0 19500ac8 0b500ad0 1b500ad8     ......P...P...P.
   14390:	0d500ae0 1d500ae8 0f500af0 1f500af8     ..P...P...P...P.
   143a0:	11900b08 13900b18 19400b20 15900b28     ........ .@.(...
   143b0:	19c00b30 17900b38 19900b48 0b900b50     0...8...H...P...
   143c0:	1b900b58 0d900b60 1d900b68 0f900b70     X...`...h...p...
   143d0:	1f900b78 11d00b88 0bc00b90 13d00b98     x...............
   143e0:	19500ba0 15d00ba8 0bc80bb0 17d00bb8     ..P.............
   143f0:	19d00bc8 1bd00bd8 0dd00be0 1dd00be8     ................
   14400:	0fd00bf0 1fd00bf8 12000c00 10180c08     ................
   14410:	13000c10 12180c18 12080c20 14180c28     ........ ...(...
   14420:	13080c30 16180c38 12100c40 18180c48     0...8...@...H...
   14430:	13100c50 1a180c58 12180c60 1c180c68     P...X...`...h...
   14440:	0e180c70 1e180c78 1a000c80 10580c88     p...x.........X.
   14450:	1b000c90 12580c98 1a080ca0 14580ca8     ......X.......X.
   14460:	1b080cb0 16580cb8 1a100cc0 18580cc8     ......X.......X.
   14470:	1b100cd0 1a580cd8 1a180ce0 1c580ce8     ......X.......X.
   14480:	0e580cf0 1e580cf8 12400d00 10980d08     ..X...X...@.....
   14490:	13400d10 12980d18 12480d20 14980d28     ..@..... .H.(...
   144a0:	13480d30 16980d38 12500d40 18980d48     0.H.8...@.P.H...
   144b0:	13500d50 1a980d58 12580d60 1c980d68     P.P.X...`.X.h...
   144c0:	0e980d70 1e980d78 1a400d80 10d80d88     p...x.....@.....
   144d0:	1b400d90 12d80d98 1a480da0 14d80da8     ..@.......H.....
   144e0:	1b480db0 16d80db8 1a500dc0 18d80dc8     ..H.......P.....
   144f0:	1b500dd0 1ad80dd8 1a580de0 1cd80de8     ..P.......X.....
   14500:	0ed80df0 1ed80df8 12800e00 11180e08     ................
   14510:	13800e10 13180e18 12880e20 15180e28     ........ ...(...
   14520:	13880e30 17180e38 12900e40 19180e48     0...8...@...H...
   14530:	13900e50 1b180e58 12980e60 1d180e68     P...X...`...h...
   14540:	0f180e70 1f180e78 1a800e80 11580e88     p...x.........X.
   14550:	1b800e90 13580e98 1a880ea0 15580ea8     ......X.......X.
   14560:	1b880eb0 17580eb8 1a900ec0 19580ec8     ......X.......X.
   14570:	1b900ed0 1b580ed8 1a980ee0 1d580ee8     ......X.......X.
   14580:	0f580ef0 1f580ef8 12c00f00 11980f08     ..X...X.........
   14590:	13c00f10 13980f18 12c80f20 15980f28     ........ ...(...
   145a0:	13c80f30 17980f38 12d00f40 19980f48     0...8...@...H...
   145b0:	13d00f50 1b980f58 12d80f60 1d980f68     P...X...`...h...
   145c0:	0f980f70 1f980f78 1ac00f80 11d80f88     p...x...........
   145d0:	1bc00f90 13d80f98 1ac80fa0 15d80fa8     ................
   145e0:	1bc80fb0 17d80fb8 1ad00fc0 19d80fc8     ................
   145f0:	1bd00fd0 1bd80fd8 1ad80fe0 1dd80fe8     ................
   14600:	1bd80ff0 1fd80ff8 10201008 10401010     .......... ...@.
   14610:	12201018 14201028 10881030 16201038     .. .(. .0...8. .
   14620:	11001040 18201048 11401050 1a201058     @...H. .P.@.X. .
   14630:	12081060 1c201068 12881070 1e201078     `...h. .p...x. .
   14640:	12001080 12081088 12401090 12601098     ..........@...`.
   14650:	122010a0 146010a8 126010b0 166010b8     .. ...`...`...`.
   14660:	130010c0 186010c8 134010d0 1a6010d8     ......`...@...`.
   14670:	121810e0 1c6010e8 129810f0 1e6010f8     ......`.......`.
   14680:	12201108 11401110 12a01118 18081120     .. ...@..... ...
   14690:	14a01128 18881130 16a01138 18a01148     (...0...8...H...
   146a0:	1aa01158 1a081160 1ca01168 1a881170     X...`...h...p...
   146b0:	1ea01178 12101180 12181188 12501190     x.............P.
   146c0:	12e01198 181811a0 14e011a8 189811b0     ................
   146d0:	16e011b8 131011c0 18e011c8 135011d0     ..............P.
   146e0:	1ae011d8 1a1811e0 1ce011e8 1a9811f0     ................
   146f0:	1ee011f8 18001200 18081208 18401210     ..............@.
   14700:	13201218 18201220 15201228 18601230     .. . . .(. .0.`.
   14710:	17201238 19001240 19201248 19401250     8. .@...H. .P.@.
   14720:	1b201258 19201260 1d201268 12c81270     X. .`. .h. .p...
   14730:	1f201278 1a001280 1a081288 1a401290     x. ...........@.
   14740:	13601298 1a2012a0 156012a8 1a6012b0     ..`... ...`...`.
   14750:	176012b8 1b0012c0 196012c8 1b4012d0     ..`.......`...@.
   14760:	1b6012d8 1b2012e0 1d6012e8 1b6012f0     ..`... ...`...`.
   14770:	1f6012f8 18101300 18181308 18501310     ..`...........P.
   14780:	13a01318 18481320 15a01328 18c81330     .... .H.(...0...
   14790:	17a01338 19101340 19a01348 19501350     8...@...H...P.P.
   147a0:	1ba01358 1a481360 1da01368 1ac81370     X...`.H.h...p...
   147b0:	1fa01378 1a101380 1a181388 1a501390     x.............P.
   147c0:	13e01398 185813a0 15e013a8 18d813b0     ......X.........
   147d0:	17e013b8 1b1013c0 19e013c8 1b5013d0     ..............P.
   147e0:	1be013d8 1a5813e0 1de013e8 1ad813f0     ......X.........
   147f0:	1fe013f8 14201408 15001410 15201418     ...... ....... .
   14800:	15081430 16281438 15001440 18281448     0...8.(.@...H.(.
   14810:	15101450 1a281458 15201460 1c281468     P...X.(.`. .h.(.
   14820:	15181470 1e281478 1c001480 1c201488     p...x.(....... .
   14830:	1d001490 1d201498 1c0814a0 1c2814a8     ...... .......(.
   14840:	1d0814b0 166814b8 1c1014c0 186814c8     ......h.......h.
   14850:	1d1014d0 1a6814d8 1c1814e0 1c6814e8     ......h.......h.
   14860:	1d1814f0 1e6814f8 15201508 15401510     ......h... ...@.
   14870:	15601518 18281520 1c281528 15481530     ..`. .(.(.(.0.H.
   14880:	16a81538 18a81548 1aa81558 1a281560     8...H...X...`.(.
   14890:	1ca81568 1aa81570 1ea81578 1c401580     h...p...x.....@.
   148a0:	1c601588 1d401590 1d601598 1c4815a0     ..`...@...`...H.
   148b0:	1c6815a8 1d4815b0 16e815b8 1c5015c0     ..h...H.......P.
   148c0:	18e815c8 1d5015d0 1ae815d8 1c5815e0     ......P.......X.
   148d0:	1ce815e8 1d5815f0 1ee815f8 1c001600     ......X.........
   148e0:	1c081608 1c401610 1c481618 1c201620     ......@...H. . .
   148f0:	1c281628 1c601630 17281638 1d001640     (.(.0.`.8.(.@...
   14900:	19281648 1d401650 1b281658 1d201660     H.(.P.@.X.(.`. .
   14910:	1d281668 1d601670 1f281678 1c801680     h.(.p.`.x.(.....
   14920:	1ca01688 1d801690 1da01698 1c8816a0     ................
   14930:	1ca816a8 1d8816b0 176816b8 1c9016c0     ..........h.....
   14940:	196816c8 1d9016d0 1b6816d8 1c9816e0     ..h.......h.....
   14950:	1d6816e8 1d9816f0 1f6816f8 1c101700     ..h.......h.....
   14960:	1c181708 1c501710 1c581718 18681720     ......P...X. .h.
   14970:	1c681728 18e81730 17a81738 1d101740     (.h.0...8...@...
   14980:	19a81748 1d501750 1ba81758 1a681760     H...P.P.X...`.h.
   14990:	1da81768 1ae81770 1fa81778 1cc01780     h...p...x.......
   149a0:	1ce01788 1dc01790 1de01798 1cc817a0     ................
   149b0:	1ce817a8 1dc817b0 17e817b8 1cd017c0     ................
   149c0:	19e817c8 1dd017d0 1be817d8 1cd817e0     ................
   149d0:	1de817e8 1dd817f0 1fe817f8 18601818     ..............`.
   149e0:	18481830 1c601838 1a301858 1c301868     0.H.8.`.X.0.h.0.
   149f0:	1a181870 1e301878 1a001880 1a081888     p...x.0.........
   14a00:	1b001890 19601898 1a2018a0 1a2818a8     ......`... ...(.
   14a10:	1b2018b0 1d6018b8 1a1018c0 1a1818c8     .. ...`.........
   14a20:	1b1018d0 1a7018d8 1a3018e0 1c7018e8     ......p...0...p.
   14a30:	1a5818f0 1e7018f8 19201908 1a601918     ..X...p... ...`.
   14a40:	1d081928 19881930 1d881938 1b201948     (...0...8...H. .
   14a50:	1ab01958 1b081960 1cb01968 1b881970     X...`...h...p...
   14a60:	1eb01978 1a401980 1a481988 1b401990     x.....@...H...@.
   14a70:	1b601998 1a6019a0 1d1819a8 1b6019b0     ..`...`.......`.
   14a80:	1d9819b8 1a5019c0 1a5819c8 1b5019d0     ......P...X...P.
   14a90:	1af019d8 1b1819e0 1cf019e8 1b9819f0     ................
   14aa0:	1ef019f8 1c701a38 1b301a58 1d301a68     ....8.p.X.0.h.0.
   14ab0:	1b181a70 1f301a78 1ac01a90 1ac81a98     p...x.0.........
   14ac0:	1ae01ab0 1ae81ab8 1b801ac0 1b881ac8     ................
   14ad0:	1bc01ad0 1b701ad8 1ba01ae0 1d701ae8     ......p.......p.
   14ae0:	1be01af0 1f701af8 1d481b28 1dc81b38     ......p.(.H.8...
   14af0:	1b601b48 1bb01b58 1db01b68 1bc81b70     H.`.X...h...p...
   14b00:	1fb01b78 1bc01b90 1bc81b98 1d581ba8     x.............X.
   14b10:	1be01bb0 1dd81bb8 1bf01bd8 1df01be8     ................
   14b20:	1ff01bf8 1c201c08 1c301c18 1c681c38     ...... ...0.8.h.
   14b30:	1c601c48 1c701c58 1e381c78 1e001c80     H.`.X.p.x.8.....
   14b40:	1e201c88 1f001c90 1f201c98 1e081ca0     .. ....... .....
   14b50:	1e281ca8 1f081cb0 1f281cb8 1e101cc0     ..(.......(.....
   14b60:	1e301cc8 1f101cd0 1f301cd8 1e181ce0     ..0.......0.....
   14b70:	1e381ce8 1f181cf0 1e781cf8 1d201d08     ..8.......x... .
   14b80:	1d301d18 1da81d38 1d601d48 1d701d58     ..0.8...H.`.X.p.
   14b90:	1f281d68 1eb81d78 1e401d80 1e601d88     h.(.x.....@...`.
   14ba0:	1f401d90 1f601d98 1e481da0 1e681da8     ..@...`...H...h.
   14bb0:	1f481db0 1f681db8 1e501dc0 1e701dc8     ..H...h...P...p.
   14bc0:	1f501dd0 1f701dd8 1e581de0 1e781de8     ..P...p...X...x.
   14bd0:	1f581df0 1ef81df8 1e201e08 1e301e18     ..X....... ...0.
   14be0:	1e601e48 1e701e58 1f381e78 1ea01e88     H.`.X.p.x.8.....
   14bf0:	1f801e90 1fa01e98 1f881eb0 1fa81eb8     ................
   14c00:	1f801ec0 1f881ec8 1f901ed0 1fb01ed8     ................
   14c10:	1fa01ee0 1fa81ee8 1f981ef0 1f781ef8     ..............x.
   14c20:	1f201f08 1f301f18 1f601f48 1f701f58     .. ...0.H.`.X.p.
   14c30:	1fb81f78 1fa01f88 1fc01f90 1fe01f98     x...............
   14c40:	1fc81fb0 1fe81fb8 1fe01fc8 1ff01fd8     ................
   14c50:	74727173 00000066                       sqrtf...
