
bin/audio_experiment.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 c0 00 10 31 eb 00 00 99 eb 00 00 b9 d6 00 00     ....1...........
    c010:	b9 d6 00 00 b9 d6 00 00 b9 d6 00 00 00 00 00 00     ................
	...
    c02c:	9f eb 00 00 9f eb 00 00 00 00 00 00 9f eb 00 00     ................
    c03c:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c04c:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c05c:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c06c:	9f eb 00 00 9f eb 00 00 b5 ed 00 00 61 ed 00 00     ............a...
    c07c:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c08c:	79 ef 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     y...............
    c09c:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c0ac:	9f eb 00 00 9f eb 00 00 9f eb 00 00 9f eb 00 00     ................
    c0bc:	9f eb 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_drsub>:
    c234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c238:	e002      	b.n	c240 <__adddf3>
    c23a:	bf00      	nop

0000c23c <__aeabi_dsub>:
    c23c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c240 <__adddf3>:
    c240:	b530      	push	{r4, r5, lr}
    c242:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c246:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c24a:	ea94 0f05 	teq	r4, r5
    c24e:	bf08      	it	eq
    c250:	ea90 0f02 	teqeq	r0, r2
    c254:	bf1f      	itttt	ne
    c256:	ea54 0c00 	orrsne.w	ip, r4, r0
    c25a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c25e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c266:	f000 80e2 	beq.w	c42e <__adddf3+0x1ee>
    c26a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c26e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c272:	bfb8      	it	lt
    c274:	426d      	neglt	r5, r5
    c276:	dd0c      	ble.n	c292 <__adddf3+0x52>
    c278:	442c      	add	r4, r5
    c27a:	ea80 0202 	eor.w	r2, r0, r2
    c27e:	ea81 0303 	eor.w	r3, r1, r3
    c282:	ea82 0000 	eor.w	r0, r2, r0
    c286:	ea83 0101 	eor.w	r1, r3, r1
    c28a:	ea80 0202 	eor.w	r2, r0, r2
    c28e:	ea81 0303 	eor.w	r3, r1, r3
    c292:	2d36      	cmp	r5, #54	; 0x36
    c294:	bf88      	it	hi
    c296:	bd30      	pophi	{r4, r5, pc}
    c298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c29c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x70>
    c2aa:	4240      	negs	r0, r0
    c2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2bc:	d002      	beq.n	c2c4 <__adddf3+0x84>
    c2be:	4252      	negs	r2, r2
    c2c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2c4:	ea94 0f05 	teq	r4, r5
    c2c8:	f000 80a7 	beq.w	c41a <__adddf3+0x1da>
    c2cc:	f1a4 0401 	sub.w	r4, r4, #1
    c2d0:	f1d5 0e20 	rsbs	lr, r5, #32
    c2d4:	db0d      	blt.n	c2f2 <__adddf3+0xb2>
    c2d6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2da:	fa22 f205 	lsr.w	r2, r2, r5
    c2de:	1880      	adds	r0, r0, r2
    c2e0:	f141 0100 	adc.w	r1, r1, #0
    c2e4:	fa03 f20e 	lsl.w	r2, r3, lr
    c2e8:	1880      	adds	r0, r0, r2
    c2ea:	fa43 f305 	asr.w	r3, r3, r5
    c2ee:	4159      	adcs	r1, r3
    c2f0:	e00e      	b.n	c310 <__adddf3+0xd0>
    c2f2:	f1a5 0520 	sub.w	r5, r5, #32
    c2f6:	f10e 0e20 	add.w	lr, lr, #32
    c2fa:	2a01      	cmp	r2, #1
    c2fc:	fa03 fc0e 	lsl.w	ip, r3, lr
    c300:	bf28      	it	cs
    c302:	f04c 0c02 	orrcs.w	ip, ip, #2
    c306:	fa43 f305 	asr.w	r3, r3, r5
    c30a:	18c0      	adds	r0, r0, r3
    c30c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c314:	d507      	bpl.n	c326 <__adddf3+0xe6>
    c316:	f04f 0e00 	mov.w	lr, #0
    c31a:	f1dc 0c00 	rsbs	ip, ip, #0
    c31e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c322:	eb6e 0101 	sbc.w	r1, lr, r1
    c326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c32a:	d31b      	bcc.n	c364 <__adddf3+0x124>
    c32c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c330:	d30c      	bcc.n	c34c <__adddf3+0x10c>
    c332:	0849      	lsrs	r1, r1, #1
    c334:	ea5f 0030 	movs.w	r0, r0, rrx
    c338:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c33c:	f104 0401 	add.w	r4, r4, #1
    c340:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c348:	f080 809a 	bcs.w	c480 <__adddf3+0x240>
    c34c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c350:	bf08      	it	eq
    c352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c356:	f150 0000 	adcs.w	r0, r0, #0
    c35a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c35e:	ea41 0105 	orr.w	r1, r1, r5
    c362:	bd30      	pop	{r4, r5, pc}
    c364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c368:	4140      	adcs	r0, r0
    c36a:	eb41 0101 	adc.w	r1, r1, r1
    c36e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c372:	f1a4 0401 	sub.w	r4, r4, #1
    c376:	d1e9      	bne.n	c34c <__adddf3+0x10c>
    c378:	f091 0f00 	teq	r1, #0
    c37c:	bf04      	itt	eq
    c37e:	4601      	moveq	r1, r0
    c380:	2000      	moveq	r0, #0
    c382:	fab1 f381 	clz	r3, r1
    c386:	bf08      	it	eq
    c388:	3320      	addeq	r3, #32
    c38a:	f1a3 030b 	sub.w	r3, r3, #11
    c38e:	f1b3 0220 	subs.w	r2, r3, #32
    c392:	da0c      	bge.n	c3ae <__adddf3+0x16e>
    c394:	320c      	adds	r2, #12
    c396:	dd08      	ble.n	c3aa <__adddf3+0x16a>
    c398:	f102 0c14 	add.w	ip, r2, #20
    c39c:	f1c2 020c 	rsb	r2, r2, #12
    c3a0:	fa01 f00c 	lsl.w	r0, r1, ip
    c3a4:	fa21 f102 	lsr.w	r1, r1, r2
    c3a8:	e00c      	b.n	c3c4 <__adddf3+0x184>
    c3aa:	f102 0214 	add.w	r2, r2, #20
    c3ae:	bfd8      	it	le
    c3b0:	f1c2 0c20 	rsble	ip, r2, #32
    c3b4:	fa01 f102 	lsl.w	r1, r1, r2
    c3b8:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3bc:	bfdc      	itt	le
    c3be:	ea41 010c 	orrle.w	r1, r1, ip
    c3c2:	4090      	lslle	r0, r2
    c3c4:	1ae4      	subs	r4, r4, r3
    c3c6:	bfa2      	ittt	ge
    c3c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3cc:	4329      	orrge	r1, r5
    c3ce:	bd30      	popge	{r4, r5, pc}
    c3d0:	ea6f 0404 	mvn.w	r4, r4
    c3d4:	3c1f      	subs	r4, #31
    c3d6:	da1c      	bge.n	c412 <__adddf3+0x1d2>
    c3d8:	340c      	adds	r4, #12
    c3da:	dc0e      	bgt.n	c3fa <__adddf3+0x1ba>
    c3dc:	f104 0414 	add.w	r4, r4, #20
    c3e0:	f1c4 0220 	rsb	r2, r4, #32
    c3e4:	fa20 f004 	lsr.w	r0, r0, r4
    c3e8:	fa01 f302 	lsl.w	r3, r1, r2
    c3ec:	ea40 0003 	orr.w	r0, r0, r3
    c3f0:	fa21 f304 	lsr.w	r3, r1, r4
    c3f4:	ea45 0103 	orr.w	r1, r5, r3
    c3f8:	bd30      	pop	{r4, r5, pc}
    c3fa:	f1c4 040c 	rsb	r4, r4, #12
    c3fe:	f1c4 0220 	rsb	r2, r4, #32
    c402:	fa20 f002 	lsr.w	r0, r0, r2
    c406:	fa01 f304 	lsl.w	r3, r1, r4
    c40a:	ea40 0003 	orr.w	r0, r0, r3
    c40e:	4629      	mov	r1, r5
    c410:	bd30      	pop	{r4, r5, pc}
    c412:	fa21 f004 	lsr.w	r0, r1, r4
    c416:	4629      	mov	r1, r5
    c418:	bd30      	pop	{r4, r5, pc}
    c41a:	f094 0f00 	teq	r4, #0
    c41e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c422:	bf06      	itte	eq
    c424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c428:	3401      	addeq	r4, #1
    c42a:	3d01      	subne	r5, #1
    c42c:	e74e      	b.n	c2cc <__adddf3+0x8c>
    c42e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c432:	bf18      	it	ne
    c434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c438:	d029      	beq.n	c48e <__adddf3+0x24e>
    c43a:	ea94 0f05 	teq	r4, r5
    c43e:	bf08      	it	eq
    c440:	ea90 0f02 	teqeq	r0, r2
    c444:	d005      	beq.n	c452 <__adddf3+0x212>
    c446:	ea54 0c00 	orrs.w	ip, r4, r0
    c44a:	bf04      	itt	eq
    c44c:	4619      	moveq	r1, r3
    c44e:	4610      	moveq	r0, r2
    c450:	bd30      	pop	{r4, r5, pc}
    c452:	ea91 0f03 	teq	r1, r3
    c456:	bf1e      	ittt	ne
    c458:	2100      	movne	r1, #0
    c45a:	2000      	movne	r0, #0
    c45c:	bd30      	popne	{r4, r5, pc}
    c45e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c462:	d105      	bne.n	c470 <__adddf3+0x230>
    c464:	0040      	lsls	r0, r0, #1
    c466:	4149      	adcs	r1, r1
    c468:	bf28      	it	cs
    c46a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c46e:	bd30      	pop	{r4, r5, pc}
    c470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c474:	bf3c      	itt	cc
    c476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c47a:	bd30      	popcc	{r4, r5, pc}
    c47c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c488:	f04f 0000 	mov.w	r0, #0
    c48c:	bd30      	pop	{r4, r5, pc}
    c48e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c492:	bf1a      	itte	ne
    c494:	4619      	movne	r1, r3
    c496:	4610      	movne	r0, r2
    c498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c49c:	bf1c      	itt	ne
    c49e:	460b      	movne	r3, r1
    c4a0:	4602      	movne	r2, r0
    c4a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4a6:	bf06      	itte	eq
    c4a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4ac:	ea91 0f03 	teqeq	r1, r3
    c4b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4b4:	bd30      	pop	{r4, r5, pc}
    c4b6:	bf00      	nop

0000c4b8 <__aeabi_ui2d>:
    c4b8:	f090 0f00 	teq	r0, #0
    c4bc:	bf04      	itt	eq
    c4be:	2100      	moveq	r1, #0
    c4c0:	4770      	bxeq	lr
    c4c2:	b530      	push	{r4, r5, lr}
    c4c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4cc:	f04f 0500 	mov.w	r5, #0
    c4d0:	f04f 0100 	mov.w	r1, #0
    c4d4:	e750      	b.n	c378 <__adddf3+0x138>
    c4d6:	bf00      	nop

0000c4d8 <__aeabi_i2d>:
    c4d8:	f090 0f00 	teq	r0, #0
    c4dc:	bf04      	itt	eq
    c4de:	2100      	moveq	r1, #0
    c4e0:	4770      	bxeq	lr
    c4e2:	b530      	push	{r4, r5, lr}
    c4e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4f0:	bf48      	it	mi
    c4f2:	4240      	negmi	r0, r0
    c4f4:	f04f 0100 	mov.w	r1, #0
    c4f8:	e73e      	b.n	c378 <__adddf3+0x138>
    c4fa:	bf00      	nop

0000c4fc <__aeabi_f2d>:
    c4fc:	0042      	lsls	r2, r0, #1
    c4fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c502:	ea4f 0131 	mov.w	r1, r1, rrx
    c506:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c50a:	bf1f      	itttt	ne
    c50c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c518:	4770      	bxne	lr
    c51a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c51e:	bf08      	it	eq
    c520:	4770      	bxeq	lr
    c522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c526:	bf04      	itt	eq
    c528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c52c:	4770      	bxeq	lr
    c52e:	b530      	push	{r4, r5, lr}
    c530:	f44f 7460 	mov.w	r4, #896	; 0x380
    c534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c53c:	e71c      	b.n	c378 <__adddf3+0x138>
    c53e:	bf00      	nop

0000c540 <__aeabi_ul2d>:
    c540:	ea50 0201 	orrs.w	r2, r0, r1
    c544:	bf08      	it	eq
    c546:	4770      	bxeq	lr
    c548:	b530      	push	{r4, r5, lr}
    c54a:	f04f 0500 	mov.w	r5, #0
    c54e:	e00a      	b.n	c566 <__aeabi_l2d+0x16>

0000c550 <__aeabi_l2d>:
    c550:	ea50 0201 	orrs.w	r2, r0, r1
    c554:	bf08      	it	eq
    c556:	4770      	bxeq	lr
    c558:	b530      	push	{r4, r5, lr}
    c55a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c55e:	d502      	bpl.n	c566 <__aeabi_l2d+0x16>
    c560:	4240      	negs	r0, r0
    c562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c566:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c56a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c56e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c572:	f43f aed8 	beq.w	c326 <__adddf3+0xe6>
    c576:	f04f 0203 	mov.w	r2, #3
    c57a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c57e:	bf18      	it	ne
    c580:	3203      	addne	r2, #3
    c582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c586:	bf18      	it	ne
    c588:	3203      	addne	r2, #3
    c58a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c58e:	f1c2 0320 	rsb	r3, r2, #32
    c592:	fa00 fc03 	lsl.w	ip, r0, r3
    c596:	fa20 f002 	lsr.w	r0, r0, r2
    c59a:	fa01 fe03 	lsl.w	lr, r1, r3
    c59e:	ea40 000e 	orr.w	r0, r0, lr
    c5a2:	fa21 f102 	lsr.w	r1, r1, r2
    c5a6:	4414      	add	r4, r2
    c5a8:	e6bd      	b.n	c326 <__adddf3+0xe6>
    c5aa:	bf00      	nop

0000c5ac <__aeabi_d2f>:
    c5ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c5b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c5b4:	bf24      	itt	cs
    c5b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c5ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c5be:	d90d      	bls.n	c5dc <__aeabi_d2f+0x30>
    c5c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c5c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c5c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c5cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c5d4:	bf08      	it	eq
    c5d6:	f020 0001 	biceq.w	r0, r0, #1
    c5da:	4770      	bx	lr
    c5dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c5e0:	d121      	bne.n	c626 <__aeabi_d2f+0x7a>
    c5e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c5e6:	bfbc      	itt	lt
    c5e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c5ec:	4770      	bxlt	lr
    c5ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c5f6:	f1c2 0218 	rsb	r2, r2, #24
    c5fa:	f1c2 0c20 	rsb	ip, r2, #32
    c5fe:	fa10 f30c 	lsls.w	r3, r0, ip
    c602:	fa20 f002 	lsr.w	r0, r0, r2
    c606:	bf18      	it	ne
    c608:	f040 0001 	orrne.w	r0, r0, #1
    c60c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c610:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c614:	fa03 fc0c 	lsl.w	ip, r3, ip
    c618:	ea40 000c 	orr.w	r0, r0, ip
    c61c:	fa23 f302 	lsr.w	r3, r3, r2
    c620:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c624:	e7cc      	b.n	c5c0 <__aeabi_d2f+0x14>
    c626:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c62a:	d107      	bne.n	c63c <__aeabi_d2f+0x90>
    c62c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c630:	bf1e      	ittt	ne
    c632:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c636:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c63a:	4770      	bxne	lr
    c63c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c640:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c648:	4770      	bx	lr
    c64a:	bf00      	nop

0000c64c <__aeabi_frsub>:
    c64c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    c650:	e002      	b.n	c658 <__addsf3>
    c652:	bf00      	nop

0000c654 <__aeabi_fsub>:
    c654:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000c658 <__addsf3>:
    c658:	0042      	lsls	r2, r0, #1
    c65a:	bf1f      	itttt	ne
    c65c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    c660:	ea92 0f03 	teqne	r2, r3
    c664:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    c668:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c66c:	d06a      	beq.n	c744 <__addsf3+0xec>
    c66e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    c672:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    c676:	bfc1      	itttt	gt
    c678:	18d2      	addgt	r2, r2, r3
    c67a:	4041      	eorgt	r1, r0
    c67c:	4048      	eorgt	r0, r1
    c67e:	4041      	eorgt	r1, r0
    c680:	bfb8      	it	lt
    c682:	425b      	neglt	r3, r3
    c684:	2b19      	cmp	r3, #25
    c686:	bf88      	it	hi
    c688:	4770      	bxhi	lr
    c68a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    c68e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c692:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c696:	bf18      	it	ne
    c698:	4240      	negne	r0, r0
    c69a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c69e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    c6a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    c6a6:	bf18      	it	ne
    c6a8:	4249      	negne	r1, r1
    c6aa:	ea92 0f03 	teq	r2, r3
    c6ae:	d03f      	beq.n	c730 <__addsf3+0xd8>
    c6b0:	f1a2 0201 	sub.w	r2, r2, #1
    c6b4:	fa41 fc03 	asr.w	ip, r1, r3
    c6b8:	eb10 000c 	adds.w	r0, r0, ip
    c6bc:	f1c3 0320 	rsb	r3, r3, #32
    c6c0:	fa01 f103 	lsl.w	r1, r1, r3
    c6c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    c6c8:	d502      	bpl.n	c6d0 <__addsf3+0x78>
    c6ca:	4249      	negs	r1, r1
    c6cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    c6d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c6d4:	d313      	bcc.n	c6fe <__addsf3+0xa6>
    c6d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    c6da:	d306      	bcc.n	c6ea <__addsf3+0x92>
    c6dc:	0840      	lsrs	r0, r0, #1
    c6de:	ea4f 0131 	mov.w	r1, r1, rrx
    c6e2:	f102 0201 	add.w	r2, r2, #1
    c6e6:	2afe      	cmp	r2, #254	; 0xfe
    c6e8:	d251      	bcs.n	c78e <__addsf3+0x136>
    c6ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    c6ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    c6f2:	bf08      	it	eq
    c6f4:	f020 0001 	biceq.w	r0, r0, #1
    c6f8:	ea40 0003 	orr.w	r0, r0, r3
    c6fc:	4770      	bx	lr
    c6fe:	0049      	lsls	r1, r1, #1
    c700:	eb40 0000 	adc.w	r0, r0, r0
    c704:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c708:	f1a2 0201 	sub.w	r2, r2, #1
    c70c:	d1ed      	bne.n	c6ea <__addsf3+0x92>
    c70e:	fab0 fc80 	clz	ip, r0
    c712:	f1ac 0c08 	sub.w	ip, ip, #8
    c716:	ebb2 020c 	subs.w	r2, r2, ip
    c71a:	fa00 f00c 	lsl.w	r0, r0, ip
    c71e:	bfaa      	itet	ge
    c720:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    c724:	4252      	neglt	r2, r2
    c726:	4318      	orrge	r0, r3
    c728:	bfbc      	itt	lt
    c72a:	40d0      	lsrlt	r0, r2
    c72c:	4318      	orrlt	r0, r3
    c72e:	4770      	bx	lr
    c730:	f092 0f00 	teq	r2, #0
    c734:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    c738:	bf06      	itte	eq
    c73a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    c73e:	3201      	addeq	r2, #1
    c740:	3b01      	subne	r3, #1
    c742:	e7b5      	b.n	c6b0 <__addsf3+0x58>
    c744:	ea4f 0341 	mov.w	r3, r1, lsl #1
    c748:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    c74c:	bf18      	it	ne
    c74e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c752:	d021      	beq.n	c798 <__addsf3+0x140>
    c754:	ea92 0f03 	teq	r2, r3
    c758:	d004      	beq.n	c764 <__addsf3+0x10c>
    c75a:	f092 0f00 	teq	r2, #0
    c75e:	bf08      	it	eq
    c760:	4608      	moveq	r0, r1
    c762:	4770      	bx	lr
    c764:	ea90 0f01 	teq	r0, r1
    c768:	bf1c      	itt	ne
    c76a:	2000      	movne	r0, #0
    c76c:	4770      	bxne	lr
    c76e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    c772:	d104      	bne.n	c77e <__addsf3+0x126>
    c774:	0040      	lsls	r0, r0, #1
    c776:	bf28      	it	cs
    c778:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    c77c:	4770      	bx	lr
    c77e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    c782:	bf3c      	itt	cc
    c784:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    c788:	4770      	bxcc	lr
    c78a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    c78e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    c792:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c796:	4770      	bx	lr
    c798:	ea7f 6222 	mvns.w	r2, r2, asr #24
    c79c:	bf16      	itet	ne
    c79e:	4608      	movne	r0, r1
    c7a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    c7a4:	4601      	movne	r1, r0
    c7a6:	0242      	lsls	r2, r0, #9
    c7a8:	bf06      	itte	eq
    c7aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    c7ae:	ea90 0f01 	teqeq	r0, r1
    c7b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    c7b6:	4770      	bx	lr

0000c7b8 <__aeabi_ui2f>:
    c7b8:	f04f 0300 	mov.w	r3, #0
    c7bc:	e004      	b.n	c7c8 <__aeabi_i2f+0x8>
    c7be:	bf00      	nop

0000c7c0 <__aeabi_i2f>:
    c7c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    c7c4:	bf48      	it	mi
    c7c6:	4240      	negmi	r0, r0
    c7c8:	ea5f 0c00 	movs.w	ip, r0
    c7cc:	bf08      	it	eq
    c7ce:	4770      	bxeq	lr
    c7d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    c7d4:	4601      	mov	r1, r0
    c7d6:	f04f 0000 	mov.w	r0, #0
    c7da:	e01c      	b.n	c816 <__aeabi_l2f+0x2a>

0000c7dc <__aeabi_ul2f>:
    c7dc:	ea50 0201 	orrs.w	r2, r0, r1
    c7e0:	bf08      	it	eq
    c7e2:	4770      	bxeq	lr
    c7e4:	f04f 0300 	mov.w	r3, #0
    c7e8:	e00a      	b.n	c800 <__aeabi_l2f+0x14>
    c7ea:	bf00      	nop

0000c7ec <__aeabi_l2f>:
    c7ec:	ea50 0201 	orrs.w	r2, r0, r1
    c7f0:	bf08      	it	eq
    c7f2:	4770      	bxeq	lr
    c7f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    c7f8:	d502      	bpl.n	c800 <__aeabi_l2f+0x14>
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	ea5f 0c01 	movs.w	ip, r1
    c804:	bf02      	ittt	eq
    c806:	4684      	moveq	ip, r0
    c808:	4601      	moveq	r1, r0
    c80a:	2000      	moveq	r0, #0
    c80c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    c810:	bf08      	it	eq
    c812:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    c816:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    c81a:	fabc f28c 	clz	r2, ip
    c81e:	3a08      	subs	r2, #8
    c820:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    c824:	db10      	blt.n	c848 <__aeabi_l2f+0x5c>
    c826:	fa01 fc02 	lsl.w	ip, r1, r2
    c82a:	4463      	add	r3, ip
    c82c:	fa00 fc02 	lsl.w	ip, r0, r2
    c830:	f1c2 0220 	rsb	r2, r2, #32
    c834:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c838:	fa20 f202 	lsr.w	r2, r0, r2
    c83c:	eb43 0002 	adc.w	r0, r3, r2
    c840:	bf08      	it	eq
    c842:	f020 0001 	biceq.w	r0, r0, #1
    c846:	4770      	bx	lr
    c848:	f102 0220 	add.w	r2, r2, #32
    c84c:	fa01 fc02 	lsl.w	ip, r1, r2
    c850:	f1c2 0220 	rsb	r2, r2, #32
    c854:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    c858:	fa21 f202 	lsr.w	r2, r1, r2
    c85c:	eb43 0002 	adc.w	r0, r3, r2
    c860:	bf08      	it	eq
    c862:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    c866:	4770      	bx	lr

0000c868 <__aeabi_uldivmod>:
    c868:	b953      	cbnz	r3, c880 <__aeabi_uldivmod+0x18>
    c86a:	b94a      	cbnz	r2, c880 <__aeabi_uldivmod+0x18>
    c86c:	2900      	cmp	r1, #0
    c86e:	bf08      	it	eq
    c870:	2800      	cmpeq	r0, #0
    c872:	bf1c      	itt	ne
    c874:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c878:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c87c:	f000 b80c 	b.w	c898 <__aeabi_idiv0>
    c880:	f1ad 0c08 	sub.w	ip, sp, #8
    c884:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c888:	f003 fe3c 	bl	10504 <__udivmoddi4>
    c88c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c894:	b004      	add	sp, #16
    c896:	4770      	bx	lr

0000c898 <__aeabi_idiv0>:
    c898:	4770      	bx	lr
    c89a:	bf00      	nop

0000c89c <main>:
#if AM_AEP_MIKRO_CALIBRATION
#include "am_mikro_calibration.h"
#endif // AM_AEP_MIKRO_CALIBRATION

int main(void)
{
    c89c:	b580      	push	{r7, lr}
    c89e:	b082      	sub	sp, #8
    c8a0:	af02      	add	r7, sp, #8
    am_app_AEP_sys_init();
    c8a2:	f002 f9cf 	bl	ec44 <am_app_AEP_sys_init>
#endif // AM_AEP_SCNR_TEST

    //
    // Print the banner.
    //
    DebugLog("Audio test starts!\r\n\n");
    c8a6:	4831      	ldr	r0, [pc, #196]	; (c96c <main+0xd0>)
    c8a8:	f002 f99a 	bl	ebe0 <DebugLog>

    while (1)
    {

        /* breathing LED */
        if (g_ui32TimerCount >=1000)
    c8ac:	4b30      	ldr	r3, [pc, #192]	; (c970 <main+0xd4>)
    c8ae:	681b      	ldr	r3, [r3, #0]
    c8b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c8b4:	d306      	bcc.n	c8c4 <main+0x28>
        {
            g_ui32TimerCount = 0;
    c8b6:	4b2e      	ldr	r3, [pc, #184]	; (c970 <main+0xd4>)
    c8b8:	2200      	movs	r2, #0
    c8ba:	601a      	str	r2, [r3, #0]
            am_devices_led_toggle(am_bsp_psLEDs, 0);
    c8bc:	2100      	movs	r1, #0
    c8be:	482d      	ldr	r0, [pc, #180]	; (c974 <main+0xd8>)
    c8c0:	f002 f8e6 	bl	ea90 <am_devices_led_toggle>
//            while(1);                           // if error occurs, the code will stuck here
//        }
#endif // AM_AEP_MEMCPY_TEST

#if AM_AEP_MIKRO_CALIBRATION
        if(g_ui8MicCalStatus == 1)
    c8c4:	4b2c      	ldr	r3, [pc, #176]	; (c978 <main+0xdc>)
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	2b01      	cmp	r3, #1
    c8ca:	d132      	bne.n	c932 <main+0x96>
        {
            DebugLog("Enter into microphone calibration status.\n\r");
    c8cc:	482b      	ldr	r0, [pc, #172]	; (c97c <main+0xe0>)
    c8ce:	f002 f987 	bl	ebe0 <DebugLog>

            am_util_delay_ms(2000);
    c8d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    c8d6:	f000 fed1 	bl	d67c <am_util_delay_ms>

            g_ui8MicCalFlag = 1;
    c8da:	4b29      	ldr	r3, [pc, #164]	; (c980 <main+0xe4>)
    c8dc:	2201      	movs	r2, #1
    c8de:	701a      	strb	r2, [r3, #0]

            while(g_ui8PcmDataReadyFlag == 0);
    c8e0:	bf00      	nop
    c8e2:	4b28      	ldr	r3, [pc, #160]	; (c984 <main+0xe8>)
    c8e4:	781b      	ldrb	r3, [r3, #0]
    c8e6:	b2db      	uxtb	r3, r3
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d0fa      	beq.n	c8e2 <main+0x46>
            if(g_ui8PcmDataReadyFlag == 1)
    c8ec:	4b25      	ldr	r3, [pc, #148]	; (c984 <main+0xe8>)
    c8ee:	781b      	ldrb	r3, [r3, #0]
    c8f0:	b2db      	uxtb	r3, r3
    c8f2:	2b01      	cmp	r3, #1
    c8f4:	d11d      	bne.n	c932 <main+0x96>
            {
                am_audio_mikro_balance(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], g_ui32WindowLen, 
    c8f6:	4b24      	ldr	r3, [pc, #144]	; (c988 <main+0xec>)
    c8f8:	6819      	ldr	r1, [r3, #0]
    c8fa:	4b24      	ldr	r3, [pc, #144]	; (c98c <main+0xf0>)
    c8fc:	9300      	str	r3, [sp, #0]
    c8fe:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    c902:	2301      	movs	r3, #1
    c904:	2201      	movs	r2, #1
    c906:	4822      	ldr	r0, [pc, #136]	; (c990 <main+0xf4>)
    c908:	f002 fc34 	bl	f174 <am_audio_mikro_balance>
                                        true, 1, 30, g_pfMicScalar);
                g_ui8MicCalStatus = 0;
    c90c:	4b1a      	ldr	r3, [pc, #104]	; (c978 <main+0xdc>)
    c90e:	2200      	movs	r2, #0
    c910:	701a      	strb	r2, [r3, #0]
                
                g_ui8PcmDataReadyFlag = 0;
    c912:	4b1c      	ldr	r3, [pc, #112]	; (c984 <main+0xe8>)
    c914:	2200      	movs	r2, #0
    c916:	701a      	strb	r2, [r3, #0]

                g_ui8MicCalFlag = 0;
    c918:	4b19      	ldr	r3, [pc, #100]	; (c980 <main+0xe4>)
    c91a:	2200      	movs	r2, #0
    c91c:	701a      	strb	r2, [r3, #0]
                
                g_ui32SampleNum = 0;
    c91e:	4b1d      	ldr	r3, [pc, #116]	; (c994 <main+0xf8>)
    c920:	2200      	movs	r2, #0
    c922:	601a      	str	r2, [r3, #0]

                am_devices_led_off(am_bsp_psLEDs, 1);
    c924:	2101      	movs	r1, #1
    c926:	4813      	ldr	r0, [pc, #76]	; (c974 <main+0xd8>)
    c928:	f002 f874 	bl	ea14 <am_devices_led_off>

                DebugLog("Exit from microphone calibration status.\n\n\r");
    c92c:	481a      	ldr	r0, [pc, #104]	; (c998 <main+0xfc>)
    c92e:	f002 f957 	bl	ebe0 <DebugLog>
#endif // AM_AEP_MIKRO_CALIBRATION
//
// Board key interface for debug using
//

        if(g_sysKeyValue == AM_APP_KEY_0)
    c932:	4b1a      	ldr	r3, [pc, #104]	; (c99c <main+0x100>)
    c934:	781b      	ldrb	r3, [r3, #0]
    c936:	b2db      	uxtb	r3, r3
    c938:	2b01      	cmp	r3, #1
    c93a:	d1b7      	bne.n	c8ac <main+0x10>
        {
            g_sysKeyValue = AM_APP_KEY_NONE;
    c93c:	4b17      	ldr	r3, [pc, #92]	; (c99c <main+0x100>)
    c93e:	2200      	movs	r2, #0
    c940:	701a      	strb	r2, [r3, #0]
            }

#endif // AM_AEP_OPUS_TEST

#if AM_AEP_MIKRO_CALIBRATION
            if(g_ui8MicCalStatus == 1)
    c942:	4b0d      	ldr	r3, [pc, #52]	; (c978 <main+0xdc>)
    c944:	781b      	ldrb	r3, [r3, #0]
    c946:	2b01      	cmp	r3, #1
    c948:	d103      	bne.n	c952 <main+0xb6>
            {
                g_ui8MicCalStatus = 0;
    c94a:	4b0b      	ldr	r3, [pc, #44]	; (c978 <main+0xdc>)
    c94c:	2200      	movs	r2, #0
    c94e:	701a      	strb	r2, [r3, #0]
    c950:	e7ac      	b.n	c8ac <main+0x10>
            }
            else if(g_ui8MicCalStatus == 0)
    c952:	4b09      	ldr	r3, [pc, #36]	; (c978 <main+0xdc>)
    c954:	781b      	ldrb	r3, [r3, #0]
    c956:	2b00      	cmp	r3, #0
    c958:	d1a8      	bne.n	c8ac <main+0x10>
            {
                g_ui8MicCalStatus = 1;
    c95a:	4b07      	ldr	r3, [pc, #28]	; (c978 <main+0xdc>)
    c95c:	2201      	movs	r2, #1
    c95e:	701a      	strb	r2, [r3, #0]
                am_devices_led_on(am_bsp_psLEDs, 1);
    c960:	2101      	movs	r1, #1
    c962:	4804      	ldr	r0, [pc, #16]	; (c974 <main+0xd8>)
    c964:	f002 f81b 	bl	e99e <am_devices_led_on>
        if (g_ui32TimerCount >=1000)
    c968:	e7a0      	b.n	c8ac <main+0x10>
    c96a:	bf00      	nop
    c96c:	000107d0 	.word	0x000107d0
    c970:	1000c154 	.word	0x1000c154
    c974:	1000c018 	.word	0x1000c018
    c978:	1000c162 	.word	0x1000c162
    c97c:	000107e8 	.word	0x000107e8
    c980:	1000c163 	.word	0x1000c163
    c984:	1000c161 	.word	0x1000c161
    c988:	1000c014 	.word	0x1000c014
    c98c:	1000c00c 	.word	0x1000c00c
    c990:	1001bba0 	.word	0x1001bba0
    c994:	1000c164 	.word	0x1000c164
    c998:	00010814 	.word	0x00010814
    c99c:	1000c160 	.word	0x1000c160

0000c9a0 <am_hal_pdm_initialize>:
// Initialization function.
//
//*****************************************************************************
uint32_t
am_hal_pdm_initialize(uint32_t ui32Module, void **ppHandle)
{
    c9a0:	b480      	push	{r7}
    c9a2:	b083      	sub	sp, #12
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	6078      	str	r0, [r7, #4]
    c9a8:	6039      	str	r1, [r7, #0]
    //
    // Check that the request module is in range.
    //
    if ( ui32Module >= AM_REG_PDM_NUM_MODULES )
    c9aa:	687b      	ldr	r3, [r7, #4]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d001      	beq.n	c9b4 <am_hal_pdm_initialize+0x14>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c9b0:	2305      	movs	r3, #5
    c9b2:	e048      	b.n	ca46 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check for valid arguements.
    //
    if (!ppHandle)
    c9b4:	683b      	ldr	r3, [r7, #0]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d101      	bne.n	c9be <am_hal_pdm_initialize+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    c9ba:	2306      	movs	r3, #6
    c9bc:	e043      	b.n	ca46 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Check if the handle is unallocated.
    //
    if (g_am_hal_pdm_states[ui32Module].prefix.s.bInit)
    c9be:	4925      	ldr	r1, [pc, #148]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    c9c0:	687a      	ldr	r2, [r7, #4]
    c9c2:	4613      	mov	r3, r2
    c9c4:	005b      	lsls	r3, r3, #1
    c9c6:	4413      	add	r3, r2
    c9c8:	009b      	lsls	r3, r3, #2
    c9ca:	440b      	add	r3, r1
    c9cc:	78db      	ldrb	r3, [r3, #3]
    c9ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c9d2:	b2db      	uxtb	r3, r3
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d001      	beq.n	c9dc <am_hal_pdm_initialize+0x3c>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    c9d8:	2307      	movs	r3, #7
    c9da:	e034      	b.n	ca46 <am_hal_pdm_initialize+0xa6>
    }

    //
    // Initialize the handle.
    //
    g_am_hal_pdm_states[ui32Module].prefix.s.bInit = true;
    c9dc:	491d      	ldr	r1, [pc, #116]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    c9de:	687a      	ldr	r2, [r7, #4]
    c9e0:	4613      	mov	r3, r2
    c9e2:	005b      	lsls	r3, r3, #1
    c9e4:	4413      	add	r3, r2
    c9e6:	009b      	lsls	r3, r3, #2
    c9e8:	18ca      	adds	r2, r1, r3
    c9ea:	78d3      	ldrb	r3, [r2, #3]
    c9ec:	f043 0301 	orr.w	r3, r3, #1
    c9f0:	70d3      	strb	r3, [r2, #3]
    g_am_hal_pdm_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_PDM;
    c9f2:	4918      	ldr	r1, [pc, #96]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    c9f4:	687a      	ldr	r2, [r7, #4]
    c9f6:	4613      	mov	r3, r2
    c9f8:	005b      	lsls	r3, r3, #1
    c9fa:	4413      	add	r3, r2
    c9fc:	009b      	lsls	r3, r3, #2
    c9fe:	18ca      	adds	r2, r1, r3
    ca00:	6813      	ldr	r3, [r2, #0]
    ca02:	4915      	ldr	r1, [pc, #84]	; (ca58 <am_hal_pdm_initialize+0xb8>)
    ca04:	f361 0317 	bfi	r3, r1, #0, #24
    ca08:	6013      	str	r3, [r2, #0]
    g_am_hal_pdm_states[ui32Module].ui32Module = ui32Module;
    ca0a:	4912      	ldr	r1, [pc, #72]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    ca0c:	687a      	ldr	r2, [r7, #4]
    ca0e:	4613      	mov	r3, r2
    ca10:	005b      	lsls	r3, r3, #1
    ca12:	4413      	add	r3, r2
    ca14:	009b      	lsls	r3, r3, #2
    ca16:	440b      	add	r3, r1
    ca18:	3308      	adds	r3, #8
    ca1a:	687a      	ldr	r2, [r7, #4]
    ca1c:	601a      	str	r2, [r3, #0]
    g_am_hal_pdm_states[ui32Module].sRegState.bValid = false;
    ca1e:	490d      	ldr	r1, [pc, #52]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    ca20:	687a      	ldr	r2, [r7, #4]
    ca22:	4613      	mov	r3, r2
    ca24:	005b      	lsls	r3, r3, #1
    ca26:	4413      	add	r3, r2
    ca28:	009b      	lsls	r3, r3, #2
    ca2a:	440b      	add	r3, r1
    ca2c:	3304      	adds	r3, #4
    ca2e:	2200      	movs	r2, #0
    ca30:	701a      	strb	r2, [r3, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_am_hal_pdm_states[ui32Module];
    ca32:	687a      	ldr	r2, [r7, #4]
    ca34:	4613      	mov	r3, r2
    ca36:	005b      	lsls	r3, r3, #1
    ca38:	4413      	add	r3, r2
    ca3a:	009b      	lsls	r3, r3, #2
    ca3c:	4a05      	ldr	r2, [pc, #20]	; (ca54 <am_hal_pdm_initialize+0xb4>)
    ca3e:	441a      	add	r2, r3
    ca40:	683b      	ldr	r3, [r7, #0]
    ca42:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    ca44:	2300      	movs	r3, #0
}
    ca46:	4618      	mov	r0, r3
    ca48:	370c      	adds	r7, #12
    ca4a:	46bd      	mov	sp, r7
    ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca50:	4770      	bx	lr
    ca52:	bf00      	nop
    ca54:	1000c178 	.word	0x1000c178
    ca58:	00f956e2 	.word	0x00f956e2

0000ca5c <am_hal_pdm_power_control>:
//*****************************************************************************
uint32_t
am_hal_pdm_power_control(void *pHandle,
                         am_hal_sysctrl_power_state_e ePowerState,
                         bool bRetainState)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b088      	sub	sp, #32
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
    ca64:	460b      	mov	r3, r1
    ca66:	70fb      	strb	r3, [r7, #3]
    ca68:	4613      	mov	r3, r2
    ca6a:	70bb      	strb	r3, [r7, #2]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    ca70:	69fb      	ldr	r3, [r7, #28]
    ca72:	689b      	ldr	r3, [r3, #8]
    ca74:	61bb      	str	r3, [r7, #24]

    am_hal_pwrctrl_periph_e ePDMPowerModule = ((am_hal_pwrctrl_periph_e)
    ca76:	69bb      	ldr	r3, [r7, #24]
    ca78:	b2db      	uxtb	r3, r3
    ca7a:	330d      	adds	r3, #13
    ca7c:	75fb      	strb	r3, [r7, #23]
                                                (AM_HAL_PWRCTRL_PERIPH_PDM +
                                                 ui32Module));
    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d00d      	beq.n	caa0 <am_hal_pdm_power_control+0x44>
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	78db      	ldrb	r3, [r3, #3]
    ca88:	f003 0301 	and.w	r3, r3, #1
    ca8c:	b2db      	uxtb	r3, r3
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d006      	beq.n	caa0 <am_hal_pdm_power_control+0x44>
    ca92:	687b      	ldr	r3, [r7, #4]
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca9a:	4a23      	ldr	r2, [pc, #140]	; (cb28 <am_hal_pdm_power_control+0xcc>)
    ca9c:	4293      	cmp	r3, r2
    ca9e:	d001      	beq.n	caa4 <am_hal_pdm_power_control+0x48>
    caa0:	2302      	movs	r3, #2
    caa2:	e03d      	b.n	cb20 <am_hal_pdm_power_control+0xc4>

    //
    // Decode the requested power state and update PDM operation accordingly.
    //
    switch (ePowerState)
    caa4:	78fb      	ldrb	r3, [r7, #3]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d004      	beq.n	cab4 <am_hal_pdm_power_control+0x58>
    caaa:	2b00      	cmp	r3, #0
    caac:	db34      	blt.n	cb18 <am_hal_pdm_power_control+0xbc>
    caae:	2b02      	cmp	r3, #2
    cab0:	dc32      	bgt.n	cb18 <am_hal_pdm_power_control+0xbc>
    cab2:	e01e      	b.n	caf2 <am_hal_pdm_power_control+0x96>
        //
        case AM_HAL_SYSCTRL_WAKE:
            //
            // Make sure we don't try to restore an invalid state.
            //
            if (bRetainState && !pState->sRegState.bValid)
    cab4:	78bb      	ldrb	r3, [r7, #2]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d008      	beq.n	cacc <am_hal_pdm_power_control+0x70>
    caba:	69fb      	ldr	r3, [r7, #28]
    cabc:	791b      	ldrb	r3, [r3, #4]
    cabe:	f083 0301 	eor.w	r3, r3, #1
    cac2:	b2db      	uxtb	r3, r3
    cac4:	2b00      	cmp	r3, #0
    cac6:	d001      	beq.n	cacc <am_hal_pdm_power_control+0x70>
            {
                return AM_HAL_STATUS_INVALID_OPERATION;
    cac8:	2307      	movs	r3, #7
    caca:	e029      	b.n	cb20 <am_hal_pdm_power_control+0xc4>
            }

            //
            // Enable power control.
            //
            am_hal_pwrctrl_periph_enable(ePDMPowerModule);
    cacc:	7dfb      	ldrb	r3, [r7, #23]
    cace:	4618      	mov	r0, r3
    cad0:	f002 ffbc 	bl	fa4c <am_hal_pwrctrl_periph_enable>

            if (bRetainState)
    cad4:	78bb      	ldrb	r3, [r7, #2]
    cad6:	2b00      	cmp	r3, #0
    cad8:	d020      	beq.n	cb1c <am_hal_pdm_power_control+0xc0>
            {
                //
                // Restore PDM registers
                //
                AM_CRITICAL_BEGIN;
    cada:	f002 fec3 	bl	f864 <am_hal_interrupt_master_disable>
    cade:	4603      	mov	r3, r0
    cae0:	613b      	str	r3, [r7, #16]

                pState->sRegState.bValid = false;
    cae2:	69fb      	ldr	r3, [r7, #28]
    cae4:	2200      	movs	r2, #0
    cae6:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    cae8:	693b      	ldr	r3, [r7, #16]
    caea:	4618      	mov	r0, r3
    caec:	f002 febe 	bl	f86c <am_hal_interrupt_master_set>
            }
            break;
    caf0:	e014      	b.n	cb1c <am_hal_pdm_power_control+0xc0>
        //
        // Turn off the PDM.
        //
        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if (bRetainState)
    caf2:	78bb      	ldrb	r3, [r7, #2]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d00a      	beq.n	cb0e <am_hal_pdm_power_control+0xb2>
            {
                AM_CRITICAL_BEGIN;
    caf8:	f002 feb4 	bl	f864 <am_hal_interrupt_master_disable>
    cafc:	4603      	mov	r3, r0
    cafe:	60fb      	str	r3, [r7, #12]

                pState->sRegState.bValid = true;
    cb00:	69fb      	ldr	r3, [r7, #28]
    cb02:	2201      	movs	r2, #1
    cb04:	711a      	strb	r2, [r3, #4]

                AM_CRITICAL_END;
    cb06:	68fb      	ldr	r3, [r7, #12]
    cb08:	4618      	mov	r0, r3
    cb0a:	f002 feaf 	bl	f86c <am_hal_interrupt_master_set>
            }

            //
            // Disable power control.
            //
            am_hal_pwrctrl_periph_disable(ePDMPowerModule);
    cb0e:	7dfb      	ldrb	r3, [r7, #23]
    cb10:	4618      	mov	r0, r3
    cb12:	f002 ffc5 	bl	faa0 <am_hal_pwrctrl_periph_disable>
            break;
    cb16:	e002      	b.n	cb1e <am_hal_pdm_power_control+0xc2>

        default:
            return AM_HAL_STATUS_INVALID_ARG;
    cb18:	2306      	movs	r3, #6
    cb1a:	e001      	b.n	cb20 <am_hal_pdm_power_control+0xc4>
            break;
    cb1c:	bf00      	nop
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    cb1e:	2300      	movs	r3, #0
}
    cb20:	4618      	mov	r0, r3
    cb22:	3720      	adds	r7, #32
    cb24:	46bd      	mov	sp, r7
    cb26:	bd80      	pop	{r7, pc}
    cb28:	00f956e2 	.word	0x00f956e2

0000cb2c <am_hal_pdm_configure>:
// Configure the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_configure(void *pHandle, am_hal_pdm_config_t *psConfig)
{
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b088      	sub	sp, #32
    cb30:	af00      	add	r7, sp, #0
    cb32:	6078      	str	r0, [r7, #4]
    cb34:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	61fb      	str	r3, [r7, #28]
    uint32_t ui32Module = pState->ui32Module;
    cb3a:	69fb      	ldr	r3, [r7, #28]
    cb3c:	689b      	ldr	r3, [r3, #8]
    cb3e:	61bb      	str	r3, [r7, #24]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d00d      	beq.n	cb62 <am_hal_pdm_configure+0x36>
    cb46:	687b      	ldr	r3, [r7, #4]
    cb48:	78db      	ldrb	r3, [r3, #3]
    cb4a:	f003 0301 	and.w	r3, r3, #1
    cb4e:	b2db      	uxtb	r3, r3
    cb50:	2b00      	cmp	r3, #0
    cb52:	d006      	beq.n	cb62 <am_hal_pdm_configure+0x36>
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	681b      	ldr	r3, [r3, #0]
    cb58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb5c:	4a5e      	ldr	r2, [pc, #376]	; (ccd8 <am_hal_pdm_configure+0x1ac>)
    cb5e:	4293      	cmp	r3, r2
    cb60:	d001      	beq.n	cb66 <am_hal_pdm_configure+0x3a>
    cb62:	2302      	movs	r3, #2
    cb64:	e0b4      	b.n	ccd0 <am_hal_pdm_configure+0x1a4>

    //
    // Apply the config structure settings to the PCFG register.
    //
    PDMn(ui32Module)->PCFG_b.SOFTMUTE = psConfig->bSoftMute;
    cb66:	4a5d      	ldr	r2, [pc, #372]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cb68:	683b      	ldr	r3, [r7, #0]
    cb6a:	7f59      	ldrb	r1, [r3, #29]
    cb6c:	6813      	ldr	r3, [r2, #0]
    cb6e:	f361 0341 	bfi	r3, r1, #1, #1
    cb72:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.CYCLES = psConfig->ui32GainChangeDelay;
    cb74:	683b      	ldr	r3, [r7, #0]
    cb76:	699b      	ldr	r3, [r3, #24]
    cb78:	4a58      	ldr	r2, [pc, #352]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cb7a:	f003 0307 	and.w	r3, r3, #7
    cb7e:	b2d9      	uxtb	r1, r3
    cb80:	6813      	ldr	r3, [r2, #0]
    cb82:	f361 0384 	bfi	r3, r1, #2, #3
    cb86:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.HPCUTOFF = psConfig->ui32HighPassCutoff;
    cb88:	683b      	ldr	r3, [r7, #0]
    cb8a:	68db      	ldr	r3, [r3, #12]
    cb8c:	4a53      	ldr	r2, [pc, #332]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cb8e:	f003 030f 	and.w	r3, r3, #15
    cb92:	b2d9      	uxtb	r1, r3
    cb94:	6813      	ldr	r3, [r2, #0]
    cb96:	f361 1348 	bfi	r3, r1, #5, #4
    cb9a:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.ADCHPD = psConfig->bHighPassEnable;
    cb9c:	4a4f      	ldr	r2, [pc, #316]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cb9e:	683b      	ldr	r3, [r7, #0]
    cba0:	7a19      	ldrb	r1, [r3, #8]
    cba2:	6813      	ldr	r3, [r2, #0]
    cba4:	f361 2349 	bfi	r3, r1, #9, #1
    cba8:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.SINCRATE = psConfig->ui32DecimationRate;
    cbaa:	683b      	ldr	r3, [r7, #0]
    cbac:	685b      	ldr	r3, [r3, #4]
    cbae:	4a4b      	ldr	r2, [pc, #300]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cbb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cbb4:	b2d9      	uxtb	r1, r3
    cbb6:	6813      	ldr	r3, [r2, #0]
    cbb8:	f361 2390 	bfi	r3, r1, #10, #7
    cbbc:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.MCLKDIV = psConfig->eClkDivider;
    cbbe:	683b      	ldr	r3, [r7, #0]
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	4a46      	ldr	r2, [pc, #280]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cbc4:	f003 0303 	and.w	r3, r3, #3
    cbc8:	b2d9      	uxtb	r1, r3
    cbca:	6813      	ldr	r3, [r2, #0]
    cbcc:	f361 4352 	bfi	r3, r1, #17, #2
    cbd0:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGALEFT = psConfig->eLeftGain;
    cbd2:	683b      	ldr	r3, [r7, #0]
    cbd4:	785b      	ldrb	r3, [r3, #1]
    cbd6:	4a41      	ldr	r2, [pc, #260]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cbd8:	f003 031f 	and.w	r3, r3, #31
    cbdc:	b2d9      	uxtb	r1, r3
    cbde:	6813      	ldr	r3, [r2, #0]
    cbe0:	f361 5359 	bfi	r3, r1, #21, #5
    cbe4:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.PGARIGHT = psConfig->eRightGain;
    cbe6:	683b      	ldr	r3, [r7, #0]
    cbe8:	789b      	ldrb	r3, [r3, #2]
    cbea:	4a3c      	ldr	r2, [pc, #240]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cbec:	f003 031f 	and.w	r3, r3, #31
    cbf0:	b2d9      	uxtb	r1, r3
    cbf2:	6813      	ldr	r3, [r2, #0]
    cbf4:	f361 639e 	bfi	r3, r1, #26, #5
    cbf8:	6013      	str	r3, [r2, #0]
    PDMn(ui32Module)->PCFG_b.LRSWAP = psConfig->bLRSwap;
    cbfa:	4a38      	ldr	r2, [pc, #224]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cbfc:	683b      	ldr	r3, [r7, #0]
    cbfe:	7f99      	ldrb	r1, [r3, #30]
    cc00:	6813      	ldr	r3, [r2, #0]
    cc02:	f361 73df 	bfi	r3, r1, #31, #1
    cc06:	6013      	str	r3, [r2, #0]

    //
    // Set the PDM Core enable bit to enable PDM to PCM conversions.
    //
    PDMn(ui32Module)->PCFG_b.PDMCOREEN = PDM_PCFG_PDMCOREEN_EN;
    cc08:	4a34      	ldr	r2, [pc, #208]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc0a:	6813      	ldr	r3, [r2, #0]
    cc0c:	f043 0301 	orr.w	r3, r3, #1
    cc10:	6013      	str	r3, [r2, #0]

    //
    // Program the "voice" registers.
    //
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_DIS;
    cc12:	4a32      	ldr	r2, [pc, #200]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc14:	6853      	ldr	r3, [r2, #4]
    cc16:	f36f 639a 	bfc	r3, #26, #1
    cc1a:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_DIS;
    cc1c:	4a2f      	ldr	r2, [pc, #188]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc1e:	6853      	ldr	r3, [r2, #4]
    cc20:	f36f 73df 	bfc	r3, #31, #1
    cc24:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_RESET;
    cc26:	4a2d      	ldr	r2, [pc, #180]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc28:	6853      	ldr	r3, [r2, #4]
    cc2a:	f36f 739e 	bfc	r3, #30, #1
    cc2e:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.CHSET = psConfig->ePCMChannels;
    cc30:	683b      	ldr	r3, [r7, #0]
    cc32:	7d5b      	ldrb	r3, [r3, #21]
    cc34:	4a29      	ldr	r2, [pc, #164]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc36:	f003 0303 	and.w	r3, r3, #3
    cc3a:	b2d9      	uxtb	r1, r3
    cc3c:	6853      	ldr	r3, [r2, #4]
    cc3e:	f361 03c4 	bfi	r3, r1, #3, #2
    cc42:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PCMPACK = psConfig->bDataPacking;
    cc44:	4a25      	ldr	r2, [pc, #148]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc46:	683b      	ldr	r3, [r7, #0]
    cc48:	7d19      	ldrb	r1, [r3, #20]
    cc4a:	6853      	ldr	r3, [r2, #4]
    cc4c:	f361 2308 	bfi	r3, r1, #8, #1
    cc50:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.SELAP = psConfig->ePDMClkSource;
    cc52:	683b      	ldr	r3, [r7, #0]
    cc54:	7c9b      	ldrb	r3, [r3, #18]
    cc56:	4a21      	ldr	r2, [pc, #132]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc58:	f003 0301 	and.w	r3, r3, #1
    cc5c:	b2d9      	uxtb	r1, r3
    cc5e:	6853      	ldr	r3, [r2, #4]
    cc60:	f361 4310 	bfi	r3, r1, #16, #1
    cc64:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.DMICKDEL = psConfig->bPDMSampleDelay;
    cc66:	4a1d      	ldr	r2, [pc, #116]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc68:	683b      	ldr	r3, [r7, #0]
    cc6a:	7cd9      	ldrb	r1, [r3, #19]
    cc6c:	6853      	ldr	r3, [r2, #4]
    cc6e:	f361 4351 	bfi	r3, r1, #17, #1
    cc72:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.BCLKINV = psConfig->bInvertI2SBCLK;
    cc74:	4a19      	ldr	r2, [pc, #100]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc76:	683b      	ldr	r3, [r7, #0]
    cc78:	7c59      	ldrb	r1, [r3, #17]
    cc7a:	6853      	ldr	r3, [r2, #4]
    cc7c:	f361 43d3 	bfi	r3, r1, #19, #1
    cc80:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.I2SEN = psConfig->bI2SEnable;
    cc82:	4a16      	ldr	r2, [pc, #88]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc84:	683b      	ldr	r3, [r7, #0]
    cc86:	7f19      	ldrb	r1, [r3, #28]
    cc88:	6853      	ldr	r3, [r2, #4]
    cc8a:	f361 5314 	bfi	r3, r1, #20, #1
    cc8e:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKSEL = psConfig->ePDMClkSpeed;
    cc90:	683b      	ldr	r3, [r7, #0]
    cc92:	7c1b      	ldrb	r3, [r3, #16]
    cc94:	4a11      	ldr	r2, [pc, #68]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    cc96:	f003 0307 	and.w	r3, r3, #7
    cc9a:	b2d9      	uxtb	r1, r3
    cc9c:	6853      	ldr	r3, [r2, #4]
    cc9e:	f361 63dd 	bfi	r3, r1, #27, #3
    cca2:	6053      	str	r3, [r2, #4]

    delay_us(100);
    cca4:	f107 030c 	add.w	r3, r7, #12
    cca8:	4618      	mov	r0, r3
    ccaa:	f002 fca1 	bl	f5f0 <am_hal_clkgen_status_get>
    ccae:	68fb      	ldr	r3, [r7, #12]
    ccb0:	4a0b      	ldr	r2, [pc, #44]	; (cce0 <am_hal_pdm_configure+0x1b4>)
    ccb2:	fba2 2303 	umull	r2, r3, r2, r3
    ccb6:	0c9b      	lsrs	r3, r3, #18
    ccb8:	2264      	movs	r2, #100	; 0x64
    ccba:	fb02 f303 	mul.w	r3, r2, r3
    ccbe:	4618      	mov	r0, r3
    ccc0:	f002 fd9c 	bl	f7fc <am_hal_flash_delay>

    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
    ccc4:	4a05      	ldr	r2, [pc, #20]	; (ccdc <am_hal_pdm_configure+0x1b0>)
    ccc6:	6853      	ldr	r3, [r2, #4]
    ccc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cccc:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    ccce:	2300      	movs	r3, #0
}
    ccd0:	4618      	mov	r0, r3
    ccd2:	3720      	adds	r7, #32
    ccd4:	46bd      	mov	sp, r7
    ccd6:	bd80      	pop	{r7, pc}
    ccd8:	00f956e2 	.word	0x00f956e2
    ccdc:	50011000 	.word	0x50011000
    cce0:	165e9f81 	.word	0x165e9f81

0000cce4 <am_hal_pdm_enable>:
// Enable the PDM.
//
//*****************************************************************************
uint32_t
am_hal_pdm_enable(void *pHandle)
{
    cce4:	b480      	push	{r7}
    cce6:	b085      	sub	sp, #20
    cce8:	af00      	add	r7, sp, #0
    ccea:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ccec:	687b      	ldr	r3, [r7, #4]
    ccee:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ccf0:	68fb      	ldr	r3, [r7, #12]
    ccf2:	689b      	ldr	r3, [r3, #8]
    ccf4:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ccf6:	687b      	ldr	r3, [r7, #4]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	d00d      	beq.n	cd18 <am_hal_pdm_enable+0x34>
    ccfc:	687b      	ldr	r3, [r7, #4]
    ccfe:	78db      	ldrb	r3, [r3, #3]
    cd00:	f003 0301 	and.w	r3, r3, #1
    cd04:	b2db      	uxtb	r3, r3
    cd06:	2b00      	cmp	r3, #0
    cd08:	d006      	beq.n	cd18 <am_hal_pdm_enable+0x34>
    cd0a:	687b      	ldr	r3, [r7, #4]
    cd0c:	681b      	ldr	r3, [r3, #0]
    cd0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd12:	4a0b      	ldr	r2, [pc, #44]	; (cd40 <am_hal_pdm_enable+0x5c>)
    cd14:	4293      	cmp	r3, r2
    cd16:	d001      	beq.n	cd1c <am_hal_pdm_enable+0x38>
    cd18:	2302      	movs	r3, #2
    cd1a:	e00a      	b.n	cd32 <am_hal_pdm_enable+0x4e>

    PDMn(ui32Module)->VCFG_b.IOCLKEN = PDM_VCFG_IOCLKEN_EN;
    cd1c:	4a09      	ldr	r2, [pc, #36]	; (cd44 <am_hal_pdm_enable+0x60>)
    cd1e:	6853      	ldr	r3, [r2, #4]
    cd20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cd24:	6053      	str	r3, [r2, #4]
    PDMn(ui32Module)->VCFG_b.PDMCLKEN = PDM_VCFG_PDMCLKEN_EN;
    cd26:	4a07      	ldr	r2, [pc, #28]	; (cd44 <am_hal_pdm_enable+0x60>)
    cd28:	6853      	ldr	r3, [r2, #4]
    cd2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    cd2e:	6053      	str	r3, [r2, #4]

    return AM_HAL_STATUS_SUCCESS;
    cd30:	2300      	movs	r3, #0
}
    cd32:	4618      	mov	r0, r3
    cd34:	3714      	adds	r7, #20
    cd36:	46bd      	mov	sp, r7
    cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd3c:	4770      	bx	lr
    cd3e:	bf00      	nop
    cd40:	00f956e2 	.word	0x00f956e2
    cd44:	50011000 	.word	0x50011000

0000cd48 <am_hal_pdm_dma_start>:
// Starts a DMA transaction from the PDM directly to SRAM
//
//*****************************************************************************
uint32_t
am_hal_pdm_dma_start(void *pHandle, am_hal_pdm_transfer_t *pDmaCfg)
{
    cd48:	b480      	push	{r7}
    cd4a:	b087      	sub	sp, #28
    cd4c:	af00      	add	r7, sp, #0
    cd4e:	6078      	str	r0, [r7, #4]
    cd50:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cd52:	687b      	ldr	r3, [r7, #4]
    cd54:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cd56:	68fb      	ldr	r3, [r7, #12]
    cd58:	689b      	ldr	r3, [r3, #8]
    cd5a:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cd5c:	687b      	ldr	r3, [r7, #4]
    cd5e:	2b00      	cmp	r3, #0
    cd60:	d00d      	beq.n	cd7e <am_hal_pdm_dma_start+0x36>
    cd62:	687b      	ldr	r3, [r7, #4]
    cd64:	78db      	ldrb	r3, [r3, #3]
    cd66:	f003 0301 	and.w	r3, r3, #1
    cd6a:	b2db      	uxtb	r3, r3
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d006      	beq.n	cd7e <am_hal_pdm_dma_start+0x36>
    cd70:	687b      	ldr	r3, [r7, #4]
    cd72:	681b      	ldr	r3, [r3, #0]
    cd74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd78:	4a33      	ldr	r2, [pc, #204]	; (ce48 <am_hal_pdm_dma_start+0x100>)
    cd7a:	4293      	cmp	r3, r2
    cd7c:	d001      	beq.n	cd82 <am_hal_pdm_dma_start+0x3a>
    cd7e:	2302      	movs	r3, #2
    cd80:	e05b      	b.n	ce3a <am_hal_pdm_dma_start+0xf2>
    // perform transactions where the total count is an integer multiple of the
    // threshold value. We will loop here to try to find a threshold value and
    // an integer multiple (ui32NumReloads) that will fit the total count the
    // user asked for.
    //
    uint32_t ui32Threshold = 0;
    cd82:	2300      	movs	r3, #0
    cd84:	617b      	str	r3, [r7, #20]
    uint32_t ui32NumReloads = 1;
    cd86:	2301      	movs	r3, #1
    cd88:	613b      	str	r3, [r7, #16]

    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    cd8a:	2301      	movs	r3, #1
    cd8c:	613b      	str	r3, [r7, #16]
    cd8e:	e01b      	b.n	cdc8 <am_hal_pdm_dma_start+0x80>
    {
        //
        // Check to make sure the total count is evenly divisible into chunks
        // that are smaller than the maximum threshold size.
        //
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    cd90:	683b      	ldr	r3, [r7, #0]
    cd92:	685b      	ldr	r3, [r3, #4]
    cd94:	693a      	ldr	r2, [r7, #16]
    cd96:	fbb3 f2f2 	udiv	r2, r3, r2
    cd9a:	6939      	ldr	r1, [r7, #16]
    cd9c:	fb01 f202 	mul.w	r2, r1, r2
    cda0:	1a9b      	subs	r3, r3, r2
    cda2:	2b00      	cmp	r3, #0
    cda4:	d10d      	bne.n	cdc2 <am_hal_pdm_dma_start+0x7a>
            ((pDmaCfg->ui32TotalCount / ui32NumReloads) <= 0x1F))
    cda6:	683b      	ldr	r3, [r7, #0]
    cda8:	685a      	ldr	r2, [r3, #4]
    cdaa:	693b      	ldr	r3, [r7, #16]
    cdac:	fbb2 f3f3 	udiv	r3, r2, r3
        if (((pDmaCfg->ui32TotalCount % ui32NumReloads) == 0) &&
    cdb0:	2b1f      	cmp	r3, #31
    cdb2:	d806      	bhi.n	cdc2 <am_hal_pdm_dma_start+0x7a>
        {
            ui32Threshold = pDmaCfg->ui32TotalCount / ui32NumReloads;
    cdb4:	683b      	ldr	r3, [r7, #0]
    cdb6:	685a      	ldr	r2, [r3, #4]
    cdb8:	693b      	ldr	r3, [r7, #16]
    cdba:	fbb2 f3f3 	udiv	r3, r2, r3
    cdbe:	617b      	str	r3, [r7, #20]
            break;
    cdc0:	e007      	b.n	cdd2 <am_hal_pdm_dma_start+0x8a>
    for (ui32NumReloads = 1; ui32NumReloads < pDmaCfg->ui32TotalCount; ui32NumReloads++)
    cdc2:	693b      	ldr	r3, [r7, #16]
    cdc4:	3301      	adds	r3, #1
    cdc6:	613b      	str	r3, [r7, #16]
    cdc8:	683b      	ldr	r3, [r7, #0]
    cdca:	685b      	ldr	r3, [r3, #4]
    cdcc:	693a      	ldr	r2, [r7, #16]
    cdce:	429a      	cmp	r2, r3
    cdd0:	d3de      	bcc.n	cd90 <am_hal_pdm_dma_start+0x48>
    }

    //
    // If we didn't find a threshold that will work, throw an error.
    //
    if (ui32Threshold == 0)
    cdd2:	697b      	ldr	r3, [r7, #20]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d102      	bne.n	cdde <am_hal_pdm_dma_start+0x96>
    {
        return AM_HAL_PDM_STATUS_BAD_TOTALCOUNT;
    cdd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cddc:	e02d      	b.n	ce3a <am_hal_pdm_dma_start+0xf2>
    }

    PDMn(ui32Module)->FIFOTHR = ui32Threshold;
    cdde:	4a1b      	ldr	r2, [pc, #108]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    cde0:	697b      	ldr	r3, [r7, #20]
    cde2:	6153      	str	r3, [r2, #20]

    //
    // Configure DMA.
    //
    PDMn(ui32Module)->DMACFG = 0;
    cde4:	4b19      	ldr	r3, [pc, #100]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    cde6:	2200      	movs	r2, #0
    cde8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMAPRI = PDM_DMACFG_DMAPRI_LOW;
    cdec:	4a17      	ldr	r2, [pc, #92]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    cdee:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    cdf2:	f36f 2308 	bfc	r3, #8, #1
    cdf6:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMACFG_b.DMADIR = PDM_DMACFG_DMADIR_P2M;
    cdfa:	4a14      	ldr	r2, [pc, #80]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    cdfc:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    ce00:	f36f 0382 	bfc	r3, #2, #1
    ce04:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
    PDMn(ui32Module)->DMATOTCOUNT = pDmaCfg->ui32TotalCount;
    ce08:	4a10      	ldr	r2, [pc, #64]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    ce0a:	683b      	ldr	r3, [r7, #0]
    ce0c:	685b      	ldr	r3, [r3, #4]
    ce0e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    PDMn(ui32Module)->DMATARGADDR = pDmaCfg->ui32TargetAddr;
    ce12:	4a0e      	ldr	r2, [pc, #56]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    ce14:	683b      	ldr	r3, [r7, #0]
    ce16:	681b      	ldr	r3, [r3, #0]
    ce18:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Make sure the trigger is set for threshold.
    //
    PDMn(ui32Module)->DMATRIGEN_b.DTHR = 1;
    ce1c:	4a0b      	ldr	r2, [pc, #44]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    ce1e:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
    ce22:	f043 0301 	orr.w	r3, r3, #1
    ce26:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

    //
    // Enable DMA
    //
    PDMn(ui32Module)->DMACFG_b.DMAEN = PDM_DMACFG_DMAEN_EN;
    ce2a:	4a08      	ldr	r2, [pc, #32]	; (ce4c <am_hal_pdm_dma_start+0x104>)
    ce2c:	f8b2 3280 	ldrh.w	r3, [r2, #640]	; 0x280
    ce30:	f043 0301 	orr.w	r3, r3, #1
    ce34:	f8a2 3280 	strh.w	r3, [r2, #640]	; 0x280
//    delay_us(100);
//
//    PDMn(ui32Module)->VCFG_b.RSTB = PDM_VCFG_RSTB_NORM;
//    PDMn(ui32Module)->VCFG_b.PDMCLKEN = 1;

    return AM_HAL_STATUS_SUCCESS;
    ce38:	2300      	movs	r3, #0
}
    ce3a:	4618      	mov	r0, r3
    ce3c:	371c      	adds	r7, #28
    ce3e:	46bd      	mov	sp, r7
    ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce44:	4770      	bx	lr
    ce46:	bf00      	nop
    ce48:	00f956e2 	.word	0x00f956e2
    ce4c:	50011000 	.word	0x50011000

0000ce50 <am_hal_pdm_fifo_flush>:
// Flush the PDM FIFO
//
//*****************************************************************************
uint32_t
am_hal_pdm_fifo_flush(void *pHandle)
{
    ce50:	b480      	push	{r7}
    ce52:	b085      	sub	sp, #20
    ce54:	af00      	add	r7, sp, #0
    ce56:	6078      	str	r0, [r7, #4]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ce58:	687b      	ldr	r3, [r7, #4]
    ce5a:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ce5c:	68fb      	ldr	r3, [r7, #12]
    ce5e:	689b      	ldr	r3, [r3, #8]
    ce60:	60bb      	str	r3, [r7, #8]
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ce62:	687b      	ldr	r3, [r7, #4]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d00d      	beq.n	ce84 <am_hal_pdm_fifo_flush+0x34>
    ce68:	687b      	ldr	r3, [r7, #4]
    ce6a:	78db      	ldrb	r3, [r3, #3]
    ce6c:	f003 0301 	and.w	r3, r3, #1
    ce70:	b2db      	uxtb	r3, r3
    ce72:	2b00      	cmp	r3, #0
    ce74:	d006      	beq.n	ce84 <am_hal_pdm_fifo_flush+0x34>
    ce76:	687b      	ldr	r3, [r7, #4]
    ce78:	681b      	ldr	r3, [r3, #0]
    ce7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ce7e:	4a07      	ldr	r2, [pc, #28]	; (ce9c <am_hal_pdm_fifo_flush+0x4c>)
    ce80:	4293      	cmp	r3, r2
    ce82:	d001      	beq.n	ce88 <am_hal_pdm_fifo_flush+0x38>
    ce84:	2302      	movs	r3, #2
    ce86:	e003      	b.n	ce90 <am_hal_pdm_fifo_flush+0x40>

    PDMn(ui32Module)->FIFOFLUSH = 1;
    ce88:	4b05      	ldr	r3, [pc, #20]	; (cea0 <am_hal_pdm_fifo_flush+0x50>)
    ce8a:	2201      	movs	r2, #1
    ce8c:	611a      	str	r2, [r3, #16]

    return AM_HAL_STATUS_SUCCESS;
    ce8e:	2300      	movs	r3, #0
}
    ce90:	4618      	mov	r0, r3
    ce92:	3714      	adds	r7, #20
    ce94:	46bd      	mov	sp, r7
    ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce9a:	4770      	bx	lr
    ce9c:	00f956e2 	.word	0x00f956e2
    cea0:	50011000 	.word	0x50011000

0000cea4 <am_hal_pdm_interrupt_enable>:
// Interrupt enable.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    cea4:	b480      	push	{r7}
    cea6:	b085      	sub	sp, #20
    cea8:	af00      	add	r7, sp, #0
    ceaa:	6078      	str	r0, [r7, #4]
    ceac:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    ceb2:	68fb      	ldr	r3, [r7, #12]
    ceb4:	689b      	ldr	r3, [r3, #8]
    ceb6:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    ceb8:	687b      	ldr	r3, [r7, #4]
    ceba:	2b00      	cmp	r3, #0
    cebc:	d00d      	beq.n	ceda <am_hal_pdm_interrupt_enable+0x36>
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	78db      	ldrb	r3, [r3, #3]
    cec2:	f003 0301 	and.w	r3, r3, #1
    cec6:	b2db      	uxtb	r3, r3
    cec8:	2b00      	cmp	r3, #0
    ceca:	d006      	beq.n	ceda <am_hal_pdm_interrupt_enable+0x36>
    cecc:	687b      	ldr	r3, [r7, #4]
    cece:	681b      	ldr	r3, [r3, #0]
    ced0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ced4:	4a09      	ldr	r2, [pc, #36]	; (cefc <am_hal_pdm_interrupt_enable+0x58>)
    ced6:	4293      	cmp	r3, r2
    ced8:	d001      	beq.n	cede <am_hal_pdm_interrupt_enable+0x3a>
    ceda:	2302      	movs	r3, #2
    cedc:	e008      	b.n	cef0 <am_hal_pdm_interrupt_enable+0x4c>

    PDMn(ui32Module)->INTEN |= ui32IntMask;
    cede:	4b08      	ldr	r3, [pc, #32]	; (cf00 <am_hal_pdm_interrupt_enable+0x5c>)
    cee0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cee4:	4906      	ldr	r1, [pc, #24]	; (cf00 <am_hal_pdm_interrupt_enable+0x5c>)
    cee6:	683b      	ldr	r3, [r7, #0]
    cee8:	4313      	orrs	r3, r2
    ceea:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

    return AM_HAL_STATUS_SUCCESS;
    ceee:	2300      	movs	r3, #0
}
    cef0:	4618      	mov	r0, r3
    cef2:	3714      	adds	r7, #20
    cef4:	46bd      	mov	sp, r7
    cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cefa:	4770      	bx	lr
    cefc:	00f956e2 	.word	0x00f956e2
    cf00:	50011000 	.word	0x50011000

0000cf04 <am_hal_pdm_interrupt_clear>:
// Interrupt clear.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    cf04:	b480      	push	{r7}
    cf06:	b085      	sub	sp, #20
    cf08:	af00      	add	r7, sp, #0
    cf0a:	6078      	str	r0, [r7, #4]
    cf0c:	6039      	str	r1, [r7, #0]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cf0e:	687b      	ldr	r3, [r7, #4]
    cf10:	60fb      	str	r3, [r7, #12]
    uint32_t ui32Module = pState->ui32Module;
    cf12:	68fb      	ldr	r3, [r7, #12]
    cf14:	689b      	ldr	r3, [r3, #8]
    cf16:	60bb      	str	r3, [r7, #8]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cf18:	687b      	ldr	r3, [r7, #4]
    cf1a:	2b00      	cmp	r3, #0
    cf1c:	d00d      	beq.n	cf3a <am_hal_pdm_interrupt_clear+0x36>
    cf1e:	687b      	ldr	r3, [r7, #4]
    cf20:	78db      	ldrb	r3, [r3, #3]
    cf22:	f003 0301 	and.w	r3, r3, #1
    cf26:	b2db      	uxtb	r3, r3
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d006      	beq.n	cf3a <am_hal_pdm_interrupt_clear+0x36>
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	681b      	ldr	r3, [r3, #0]
    cf30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cf34:	4a07      	ldr	r2, [pc, #28]	; (cf54 <am_hal_pdm_interrupt_clear+0x50>)
    cf36:	4293      	cmp	r3, r2
    cf38:	d001      	beq.n	cf3e <am_hal_pdm_interrupt_clear+0x3a>
    cf3a:	2302      	movs	r3, #2
    cf3c:	e004      	b.n	cf48 <am_hal_pdm_interrupt_clear+0x44>

    PDMn(ui32Module)->INTCLR = ui32IntMask;
    cf3e:	4a06      	ldr	r2, [pc, #24]	; (cf58 <am_hal_pdm_interrupt_clear+0x54>)
    cf40:	683b      	ldr	r3, [r7, #0]
    cf42:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return AM_HAL_STATUS_SUCCESS;
    cf46:	2300      	movs	r3, #0
}
    cf48:	4618      	mov	r0, r3
    cf4a:	3714      	adds	r7, #20
    cf4c:	46bd      	mov	sp, r7
    cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf52:	4770      	bx	lr
    cf54:	00f956e2 	.word	0x00f956e2
    cf58:	50011000 	.word	0x50011000

0000cf5c <am_hal_pdm_interrupt_status_get>:
// Returns the interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_pdm_interrupt_status_get(void *pHandle, uint32_t *pui32Status, bool bEnabledOnly)
{
    cf5c:	b480      	push	{r7}
    cf5e:	b087      	sub	sp, #28
    cf60:	af00      	add	r7, sp, #0
    cf62:	60f8      	str	r0, [r7, #12]
    cf64:	60b9      	str	r1, [r7, #8]
    cf66:	4613      	mov	r3, r2
    cf68:	71fb      	strb	r3, [r7, #7]
    am_hal_pdm_state_t *pState = (am_hal_pdm_state_t *) pHandle;
    cf6a:	68fb      	ldr	r3, [r7, #12]
    cf6c:	617b      	str	r3, [r7, #20]
    uint32_t ui32Module = pState->ui32Module;
    cf6e:	697b      	ldr	r3, [r7, #20]
    cf70:	689b      	ldr	r3, [r3, #8]
    cf72:	613b      	str	r3, [r7, #16]

    //
    // Check the handle.
    //
    AM_HAL_PDM_HANDLE_CHECK(pHandle);
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d00d      	beq.n	cf96 <am_hal_pdm_interrupt_status_get+0x3a>
    cf7a:	68fb      	ldr	r3, [r7, #12]
    cf7c:	78db      	ldrb	r3, [r3, #3]
    cf7e:	f003 0301 	and.w	r3, r3, #1
    cf82:	b2db      	uxtb	r3, r3
    cf84:	2b00      	cmp	r3, #0
    cf86:	d006      	beq.n	cf96 <am_hal_pdm_interrupt_status_get+0x3a>
    cf88:	68fb      	ldr	r3, [r7, #12]
    cf8a:	681b      	ldr	r3, [r3, #0]
    cf8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cf90:	4a10      	ldr	r2, [pc, #64]	; (cfd4 <am_hal_pdm_interrupt_status_get+0x78>)
    cf92:	4293      	cmp	r3, r2
    cf94:	d001      	beq.n	cf9a <am_hal_pdm_interrupt_status_get+0x3e>
    cf96:	2302      	movs	r3, #2
    cf98:	e016      	b.n	cfc8 <am_hal_pdm_interrupt_status_get+0x6c>

    //
    // If requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
    cf9a:	79fb      	ldrb	r3, [r7, #7]
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d00d      	beq.n	cfbc <am_hal_pdm_interrupt_status_get+0x60>
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cfa0:	4b0d      	ldr	r3, [pc, #52]	; (cfd8 <am_hal_pdm_interrupt_status_get+0x7c>)
    cfa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cfa6:	68bb      	ldr	r3, [r7, #8]
    cfa8:	601a      	str	r2, [r3, #0]
        *pui32Status &= PDMn(ui32Module)->INTEN;
    cfaa:	4b0b      	ldr	r3, [pc, #44]	; (cfd8 <am_hal_pdm_interrupt_status_get+0x7c>)
    cfac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    cfb0:	68bb      	ldr	r3, [r7, #8]
    cfb2:	681b      	ldr	r3, [r3, #0]
    cfb4:	401a      	ands	r2, r3
    cfb6:	68bb      	ldr	r3, [r7, #8]
    cfb8:	601a      	str	r2, [r3, #0]
    cfba:	e004      	b.n	cfc6 <am_hal_pdm_interrupt_status_get+0x6a>
    }
    else
    {
        *pui32Status = PDMn(ui32Module)->INTSTAT;
    cfbc:	4b06      	ldr	r3, [pc, #24]	; (cfd8 <am_hal_pdm_interrupt_status_get+0x7c>)
    cfbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cfc2:	68bb      	ldr	r3, [r7, #8]
    cfc4:	601a      	str	r2, [r3, #0]
    }

    return AM_HAL_STATUS_SUCCESS;
    cfc6:	2300      	movs	r3, #0
}
    cfc8:	4618      	mov	r0, r3
    cfca:	371c      	adds	r7, #28
    cfcc:	46bd      	mov	sp, r7
    cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfd2:	4770      	bx	lr
    cfd4:	00f956e2 	.word	0x00f956e2
    cfd8:	50011000 	.word	0x50011000

0000cfdc <pincfg_equ>:
//  pincfg_equ() - compare 2 am_hal_gpio_pincfg_t structures for equality.
//
//*****************************************************************************
static bool
pincfg_equ(void *cfg1, void *cfg2)
{
    cfdc:	b480      	push	{r7}
    cfde:	b085      	sub	sp, #20
    cfe0:	af00      	add	r7, sp, #0
    cfe2:	6078      	str	r0, [r7, #4]
    cfe4:	6039      	str	r1, [r7, #0]

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	681b      	ldr	r3, [r3, #0]
    cfea:	60fb      	str	r3, [r7, #12]
    ui32B = *((uint32_t*)cfg2);
    cfec:	683b      	ldr	r3, [r7, #0]
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	60bb      	str	r3, [r7, #8]

    return ui32A == ui32B ? true : false;
    cff2:	68fa      	ldr	r2, [r7, #12]
    cff4:	68bb      	ldr	r3, [r7, #8]
    cff6:	429a      	cmp	r2, r3
    cff8:	bf0c      	ite	eq
    cffa:	2301      	moveq	r3, #1
    cffc:	2300      	movne	r3, #0
    cffe:	b2db      	uxtb	r3, r3

} // pincfg_equ()
    d000:	4618      	mov	r0, r3
    d002:	3714      	adds	r7, #20
    d004:	46bd      	mov	sp, r7
    d006:	f85d 7b04 	ldr.w	r7, [sp], #4
    d00a:	4770      	bx	lr

0000d00c <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    d00c:	b580      	push	{r7, lr}
    d00e:	b092      	sub	sp, #72	; 0x48
    d010:	af00      	add	r7, sp, #0
    d012:	6078      	str	r0, [r7, #4]
    d014:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;
    d016:	2300      	movs	r3, #0
    d018:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin > 49 )
    d01c:	687b      	ldr	r3, [r7, #4]
    d01e:	2b31      	cmp	r3, #49	; 0x31
    d020:	d901      	bls.n	d026 <am_hal_gpio_pinconfig+0x1a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d022:	2306      	movs	r3, #6
    d024:	e1c1      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Initialize the PADREG accumulator variables.
    //
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d026:	2300      	movs	r3, #0
    d028:	643b      	str	r3, [r7, #64]	; 0x40
    d02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d02c:	647b      	str	r3, [r7, #68]	; 0x44
    d02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d030:	63fb      	str	r3, [r7, #60]	; 0x3c

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d032:	783b      	ldrb	r3, [r7, #0]
    d034:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d038:	b2db      	uxtb	r3, r3
    d03a:	633b      	str	r3, [r7, #48]	; 0x30
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d03c:	783b      	ldrb	r3, [r7, #0]
    d03e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    d042:	b2db      	uxtb	r3, r3
    d044:	62fb      	str	r3, [r7, #44]	; 0x2c

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d048:	00db      	lsls	r3, r3, #3
    d04a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d04c:	4313      	orrs	r3, r2
    d04e:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d050:	783b      	ldrb	r3, [r7, #0]
    d052:	f023 031f 	bic.w	r3, r3, #31
    d056:	b2db      	uxtb	r3, r3
    d058:	2b00      	cmp	r3, #0
    d05a:	d03e      	beq.n	d0da <am_hal_gpio_pinconfig+0xce>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d05e:	f043 0301 	orr.w	r3, r3, #1
    d062:	647b      	str	r3, [r7, #68]	; 0x44

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d064:	783b      	ldrb	r3, [r7, #0]
    d066:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d06a:	b2db      	uxtb	r3, r3
    d06c:	2b01      	cmp	r3, #1
    d06e:	d919      	bls.n	d0a4 <am_hal_gpio_pinconfig+0x98>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
    d070:	783b      	ldrb	r3, [r7, #0]
    d072:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d076:	b2db      	uxtb	r3, r3
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d078:	2b05      	cmp	r3, #5
    d07a:	d813      	bhi.n	d0a4 <am_hal_gpio_pinconfig+0x98>
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d07c:	783b      	ldrb	r3, [r7, #0]
    d07e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d082:	b2db      	uxtb	r3, r3
    d084:	3b02      	subs	r3, #2
    d086:	019b      	lsls	r3, r3, #6
    d088:	461a      	mov	r2, r3
    d08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d08c:	4313      	orrs	r3, r2
    d08e:	647b      	str	r3, [r7, #68]	; 0x44
                           PADREG_FLD_76_S);
#ifdef AM_HAL_ENABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d090:	4a7b      	ldr	r2, [pc, #492]	; (d280 <am_hal_gpio_pinconfig+0x274>)
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	4413      	add	r3, r2
    d096:	781b      	ldrb	r3, [r3, #0]
    d098:	f003 0301 	and.w	r3, r3, #1
    d09c:	2b00      	cmp	r3, #0
    d09e:	d11c      	bne.n	d0da <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d0a0:	4b78      	ldr	r3, [pc, #480]	; (d284 <am_hal_gpio_pinconfig+0x278>)
    d0a2:	e182      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d0a4:	783b      	ldrb	r3, [r7, #0]
    d0a6:	f023 031f 	bic.w	r3, r3, #31
    d0aa:	b2db      	uxtb	r3, r3
    d0ac:	2bc0      	cmp	r3, #192	; 0xc0
    d0ae:	d104      	bne.n	d0ba <am_hal_gpio_pinconfig+0xae>
        {
            if ( ui32Pin != 20 )
    d0b0:	687b      	ldr	r3, [r7, #4]
    d0b2:	2b14      	cmp	r3, #20
    d0b4:	d011      	beq.n	d0da <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d0b6:	4b74      	ldr	r3, [pc, #464]	; (d288 <am_hal_gpio_pinconfig+0x27c>)
    d0b8:	e177      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
            }
        }
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d0ba:	783b      	ldrb	r3, [r7, #0]
    d0bc:	f023 031f 	bic.w	r3, r3, #31
    d0c0:	b2db      	uxtb	r3, r3
    d0c2:	2b20      	cmp	r3, #32
    d0c4:	d109      	bne.n	d0da <am_hal_gpio_pinconfig+0xce>
        {
            if ( g_ui8Bit76Capabilities[ui32Pin] & (CAP_PUP | CAP_PDN) )
    d0c6:	4a6e      	ldr	r2, [pc, #440]	; (d280 <am_hal_gpio_pinconfig+0x274>)
    d0c8:	687b      	ldr	r3, [r7, #4]
    d0ca:	4413      	add	r3, r2
    d0cc:	781b      	ldrb	r3, [r3, #0]
    d0ce:	f003 0309 	and.w	r3, r3, #9
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d001      	beq.n	d0da <am_hal_gpio_pinconfig+0xce>
            {
                return AM_HAL_GPIO_ERR_PULLUP;
    d0d6:	4b6b      	ldr	r3, [pc, #428]	; (d284 <am_hal_gpio_pinconfig+0x278>)
    d0d8:	e167      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d021      	beq.n	d124 <am_hal_gpio_pinconfig+0x118>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0e2:	2b01      	cmp	r3, #1
    d0e4:	d10c      	bne.n	d100 <am_hal_gpio_pinconfig+0xf4>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d0e6:	4a66      	ldr	r2, [pc, #408]	; (d280 <am_hal_gpio_pinconfig+0x274>)
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	4413      	add	r3, r2
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	f003 0302 	and.w	r3, r3, #2
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d004      	beq.n	d100 <am_hal_gpio_pinconfig+0xf4>
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d0fc:	647b      	str	r3, [r7, #68]	; 0x44
    d0fe:	e011      	b.n	d124 <am_hal_gpio_pinconfig+0x118>
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d102:	2b02      	cmp	r3, #2
    d104:	d10c      	bne.n	d120 <am_hal_gpio_pinconfig+0x114>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d106:	4a5e      	ldr	r2, [pc, #376]	; (d280 <am_hal_gpio_pinconfig+0x274>)
    d108:	687b      	ldr	r3, [r7, #4]
    d10a:	4413      	add	r3, r2
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	f003 0304 	and.w	r3, r3, #4
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d112:	2b00      	cmp	r3, #0
    d114:	d004      	beq.n	d120 <am_hal_gpio_pinconfig+0x114>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d11c:	647b      	str	r3, [r7, #68]	; 0x44
    d11e:	e001      	b.n	d124 <am_hal_gpio_pinconfig+0x118>
        }
        else
        {
            return AM_HAL_GPIO_ERR_PWRSW;
    d120:	4b5a      	ldr	r3, [pc, #360]	; (d28c <am_hal_gpio_pinconfig+0x280>)
    d122:	e142      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d124:	4a5a      	ldr	r2, [pc, #360]	; (d290 <am_hal_gpio_pinconfig+0x284>)
    d126:	687b      	ldr	r3, [r7, #4]
    d128:	4413      	add	r3, r2
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	461a      	mov	r2, r3
    d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d130:	fa42 f303 	asr.w	r3, r2, r3
    d134:	005b      	lsls	r3, r3, #1
    d136:	f003 0302 	and.w	r3, r3, #2
    d13a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d13c:	4313      	orrs	r3, r2
    d13e:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d140:	4a54      	ldr	r2, [pc, #336]	; (d294 <am_hal_gpio_pinconfig+0x288>)
    d142:	687b      	ldr	r3, [r7, #4]
    d144:	4413      	add	r3, r2
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	461a      	mov	r2, r3
    d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d14c:	4293      	cmp	r3, r2
    d14e:	d13d      	bne.n	d1cc <am_hal_gpio_pinconfig+0x1c0>
        // User is configuring a nCE. Verify the requested settings and set the
        // polarity and OUTCFG values (INCFG is not used here and should be 0).
        // Valid uNCE values are 0-3 (uNCE is a 2-bit field).
        // Valid uIOMnum are 0-6 (0-5 for IOMs, 6 for MSPI, 7 is invalid).
        //
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d150:	78bb      	ldrb	r3, [r7, #2]
    d152:	f003 0307 	and.w	r3, r3, #7
    d156:	b2db      	uxtb	r3, r3
    d158:	2b07      	cmp	r3, #7
    d15a:	d101      	bne.n	d160 <am_hal_gpio_pinconfig+0x154>
        {
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d15c:	4b4e      	ldr	r3, [pc, #312]	; (d298 <am_hal_gpio_pinconfig+0x28c>)
    d15e:	e124      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>

        //
        // Construct the entry we expect to find in the table. We can determine
        // the OUTCFG value by looking for that value in the pin row.
        //
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d160:	78bb      	ldrb	r3, [r7, #2]
    d162:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d166:	b2db      	uxtb	r3, r3
    d168:	011b      	lsls	r3, r3, #4
    d16a:	b25a      	sxtb	r2, r3
    d16c:	78bb      	ldrb	r3, [r7, #2]
    d16e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    d172:	b2db      	uxtb	r3, r3
    d174:	b25b      	sxtb	r3, r3
    d176:	4313      	orrs	r3, r2
    d178:	b25b      	sxtb	r3, r3
    d17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d17e:	2300      	movs	r3, #0
    d180:	637b      	str	r3, [r7, #52]	; 0x34
    d182:	e00d      	b.n	d1a0 <am_hal_gpio_pinconfig+0x194>
        {
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d184:	4a45      	ldr	r2, [pc, #276]	; (d29c <am_hal_gpio_pinconfig+0x290>)
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	009b      	lsls	r3, r3, #2
    d18a:	441a      	add	r2, r3
    d18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d18e:	4413      	add	r3, r2
    d190:	781b      	ldrb	r3, [r3, #0]
    d192:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d196:	429a      	cmp	r2, r3
    d198:	d006      	beq.n	d1a8 <am_hal_gpio_pinconfig+0x19c>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d19c:	3301      	adds	r3, #1
    d19e:	637b      	str	r3, [r7, #52]	; 0x34
    d1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1a2:	2b03      	cmp	r3, #3
    d1a4:	d9ee      	bls.n	d184 <am_hal_gpio_pinconfig+0x178>
    d1a6:	e000      	b.n	d1aa <am_hal_gpio_pinconfig+0x19e>
            {
                break;
    d1a8:	bf00      	nop
            }
        }

#ifdef AM_HAL_ENABLE_API_VALIDATION
        if ( ui32Outcfg >= 4 )
    d1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1ac:	2b03      	cmp	r3, #3
    d1ae:	d901      	bls.n	d1b4 <am_hal_gpio_pinconfig+0x1a8>
        {
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d1b0:	4b3b      	ldr	r3, [pc, #236]	; (d2a0 <am_hal_gpio_pinconfig+0x294>)
    d1b2:	e0fa      	b.n	d3aa <am_hal_gpio_pinconfig+0x39e>
        }
#endif // AM_HAL_ENABLE_API_VALIDATION

        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1b6:	005b      	lsls	r3, r3, #1
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d1b8:	78ba      	ldrb	r2, [r7, #2]
    d1ba:	f3c2 1240 	ubfx	r2, r2, #5, #1
    d1be:	b2d2      	uxtb	r2, r2
    d1c0:	00d2      	lsls	r2, r2, #3
    d1c2:	4313      	orrs	r3, r2
        ui32GPCfg |= (ui32Outcfg       << GPIOCFG_FLD_OUTCFG_S) |
    d1c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1c6:	4313      	orrs	r3, r2
    d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d1ca:	e044      	b.n	d256 <am_hal_gpio_pinconfig+0x24a>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d1cc:	787b      	ldrb	r3, [r7, #1]
    d1ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
    d1d2:	b2db      	uxtb	r3, r3
    d1d4:	005b      	lsls	r3, r3, #1
    d1d6:	461a      	mov	r2, r3
    d1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d1da:	4313      	orrs	r3, r2
    d1dc:	647b      	str	r3, [r7, #68]	; 0x44
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d1de:	787b      	ldrb	r3, [r7, #1]
    d1e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
    d1e4:	b2db      	uxtb	r3, r3
    d1e6:	005a      	lsls	r2, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d1e8:	787b      	ldrb	r3, [r7, #1]
    d1ea:	f3c3 1341 	ubfx	r3, r3, #5, #2
    d1ee:	b2db      	uxtb	r3, r3
    d1f0:	00db      	lsls	r3, r3, #3
    d1f2:	f003 0308 	and.w	r3, r3, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d1f6:	431a      	orrs	r2, r3
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d1f8:	787b      	ldrb	r3, [r7, #1]
    d1fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
    d1fe:	b2db      	uxtb	r3, r3
    d200:	105b      	asrs	r3, r3, #1
    d202:	f003 0301 	and.w	r3, r3, #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d206:	4313      	orrs	r3, r2
    d208:	461a      	mov	r2, r3
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d20c:	4313      	orrs	r3, r2
    d20e:	63fb      	str	r3, [r7, #60]	; 0x3c

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d210:	787b      	ldrb	r3, [r7, #1]
    d212:	f003 030c 	and.w	r3, r3, #12
    d216:	b2db      	uxtb	r3, r3
    d218:	2b04      	cmp	r3, #4
    d21a:	d007      	beq.n	d22c <am_hal_gpio_pinconfig+0x220>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    d21c:	463b      	mov	r3, r7
    d21e:	4921      	ldr	r1, [pc, #132]	; (d2a4 <am_hal_gpio_pinconfig+0x298>)
    d220:	4618      	mov	r0, r3
    d222:	f7ff fedb 	bl	cfdc <pincfg_equ>
    d226:	4603      	mov	r3, r0
        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d228:	2b00      	cmp	r3, #0
    d22a:	d002      	beq.n	d232 <am_hal_gpio_pinconfig+0x226>
            //
            // For pushpull configurations, we must be sure to clear the ENABLE
            // bit.  In pushpull, these bits turn on FAST GPIO.  For regular
            // GPIO, they must be clear.
            //
            bClearEnable = true;
    d22c:	2301      	movs	r3, #1
    d22e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    d232:	787b      	ldrb	r3, [r7, #1]
    d234:	f003 0360 	and.w	r3, r3, #96	; 0x60
    d238:	b2db      	uxtb	r3, r3
    d23a:	2b00      	cmp	r3, #0
    d23c:	d10b      	bne.n	d256 <am_hal_gpio_pinconfig+0x24a>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
    d23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d240:	f023 0301 	bic.w	r3, r3, #1
    d244:	63fb      	str	r3, [r7, #60]	; 0x3c
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d246:	787b      	ldrb	r3, [r7, #1]
    d248:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d24c:	b2db      	uxtb	r3, r3
    d24e:	461a      	mov	r2, r3
    d250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d252:	4313      	orrs	r3, r2
    d254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    d256:	787b      	ldrb	r3, [r7, #1]
    d258:	f3c3 0301 	ubfx	r3, r3, #0, #2
    d25c:	b2db      	uxtb	r3, r3
    d25e:	2b02      	cmp	r3, #2
    d260:	d009      	beq.n	d276 <am_hal_gpio_pinconfig+0x26a>
    d262:	2b03      	cmp	r3, #3
    d264:	d020      	beq.n	d2a8 <am_hal_gpio_pinconfig+0x29c>
    d266:	2b01      	cmp	r3, #1
    d268:	d000      	beq.n	d26c <am_hal_gpio_pinconfig+0x260>
        //  bit0 maps to bit2 of a PADREG field.
        //  bit1 maps to bit0 of an ALTPADCFG field.
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (0 << 0);
            break;
    d26a:	e026      	b.n	d2ba <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_4MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d26e:	f043 0304 	orr.w	r3, r3, #4
    d272:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (0 << 0);
            break;
    d274:	e021      	b.n	d2ba <am_hal_gpio_pinconfig+0x2ae>
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_8MA:
            ui32Padreg    |= (0 << PADREG_FLD_DRVSTR_S);
            ui32AltPadCfg |= (1 << 0);
    d276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d278:	f043 0301 	orr.w	r3, r3, #1
    d27c:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    d27e:	e01c      	b.n	d2ba <am_hal_gpio_pinconfig+0x2ae>
    d280:	00010a28 	.word	0x00010a28
    d284:	08000100 	.word	0x08000100
    d288:	08000101 	.word	0x08000101
    d28c:	08000102 	.word	0x08000102
    d290:	000109f4 	.word	0x000109f4
    d294:	00010a5c 	.word	0x00010a5c
    d298:	08000103 	.word	0x08000103
    d29c:	00010a90 	.word	0x00010a90
    d2a0:	08000104 	.word	0x08000104
    d2a4:	000109e8 	.word	0x000109e8
        case AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA:
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d2aa:	f043 0304 	orr.w	r3, r3, #4
    d2ae:	647b      	str	r3, [r7, #68]	; 0x44
            ui32AltPadCfg |= (1 << 0);
    d2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2b2:	f043 0301 	orr.w	r3, r3, #1
    d2b6:	643b      	str	r3, [r7, #64]	; 0x40
            break;
    d2b8:	bf00      	nop
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = (uint32_t)&GPIO->CFGA       + ((ui32Pin & ~0x7) >> 1);
    d2ba:	687b      	ldr	r3, [r7, #4]
    d2bc:	085b      	lsrs	r3, r3, #1
    d2be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d2c2:	f023 0303 	bic.w	r3, r3, #3
    d2c6:	4a3b      	ldr	r2, [pc, #236]	; (d3b4 <am_hal_gpio_pinconfig+0x3a8>)
    d2c8:	441a      	add	r2, r3
    d2ca:	627a      	str	r2, [r7, #36]	; 0x24
    ui32PadregAddr      = (uint32_t)&GPIO->PADREGA    + (ui32Pin & ~0x3);
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	f023 0303 	bic.w	r3, r3, #3
    d2d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d2d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d2da:	623b      	str	r3, [r7, #32]
    ui32AltpadAddr      = (uint32_t)&GPIO->ALTPADCFGA + (ui32Pin & ~0x3);
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	f023 0203 	bic.w	r2, r3, #3
    d2e2:	4b35      	ldr	r3, [pc, #212]	; (d3b8 <am_hal_gpio_pinconfig+0x3ac>)
    d2e4:	4413      	add	r3, r2
    d2e6:	61fb      	str	r3, [r7, #28]
    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d2e8:	687b      	ldr	r3, [r7, #4]
    d2ea:	009b      	lsls	r3, r3, #2
    d2ec:	f003 031c 	and.w	r3, r3, #28
    d2f0:	61bb      	str	r3, [r7, #24]
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    d2f2:	687b      	ldr	r3, [r7, #4]
    d2f4:	00db      	lsls	r3, r3, #3
    d2f6:	f003 0318 	and.w	r3, r3, #24
    d2fa:	617b      	str	r3, [r7, #20]
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d2fc:	220f      	movs	r2, #15
    d2fe:	69bb      	ldr	r3, [r7, #24]
    d300:	fa02 f303 	lsl.w	r3, r2, r3
    d304:	43db      	mvns	r3, r3
    d306:	613b      	str	r3, [r7, #16]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d308:	22ff      	movs	r2, #255	; 0xff
    d30a:	697b      	ldr	r3, [r7, #20]
    d30c:	fa02 f303 	lsl.w	r3, r2, r3
    d310:	43db      	mvns	r3, r3
    d312:	60fb      	str	r3, [r7, #12]

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    d314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d316:	697b      	ldr	r3, [r7, #20]
    d318:	fa02 f303 	lsl.w	r3, r2, r3
    d31c:	647b      	str	r3, [r7, #68]	; 0x44
    ui32AltPadCfg <<= ui32PadShft;
    d31e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d320:	697b      	ldr	r3, [r7, #20]
    d322:	fa02 f303 	lsl.w	r3, r2, r3
    d326:	643b      	str	r3, [r7, #64]	; 0x40
    ui32GPCfg     <<= ui32GPCfgShft;
    d328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d32a:	69bb      	ldr	r3, [r7, #24]
    d32c:	fa02 f303 	lsl.w	r3, r2, r3
    d330:	63fb      	str	r3, [r7, #60]	; 0x3c

    AM_CRITICAL_BEGIN
    d332:	f002 fa97 	bl	f864 <am_hal_interrupt_master_disable>
    d336:	4603      	mov	r3, r0
    d338:	60bb      	str	r3, [r7, #8]

    if ( bClearEnable )
    d33a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d33e:	2b00      	cmp	r3, #0
    d340:	d00d      	beq.n	d35e <am_hal_gpio_pinconfig+0x352>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d342:	687b      	ldr	r3, [r7, #4]
    d344:	f003 021f 	and.w	r2, r3, #31
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	095b      	lsrs	r3, r3, #5
    d34c:	f003 0301 	and.w	r3, r3, #1
    d350:	0099      	lsls	r1, r3, #2
    d352:	4b1a      	ldr	r3, [pc, #104]	; (d3bc <am_hal_gpio_pinconfig+0x3b0>)
    d354:	440b      	add	r3, r1
    d356:	2101      	movs	r1, #1
    d358:	fa01 f202 	lsl.w	r2, r1, r2
    d35c:	601a      	str	r2, [r3, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d35e:	4b18      	ldr	r3, [pc, #96]	; (d3c0 <am_hal_gpio_pinconfig+0x3b4>)
    d360:	2273      	movs	r2, #115	; 0x73
    d362:	661a      	str	r2, [r3, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d364:	6a3b      	ldr	r3, [r7, #32]
    d366:	681a      	ldr	r2, [r3, #0]
    d368:	68fb      	ldr	r3, [r7, #12]
    d36a:	ea02 0103 	and.w	r1, r2, r3
    d36e:	6a3b      	ldr	r3, [r7, #32]
    d370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d372:	430a      	orrs	r2, r1
    d374:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d378:	681a      	ldr	r2, [r3, #0]
    d37a:	693b      	ldr	r3, [r7, #16]
    d37c:	ea02 0103 	and.w	r1, r2, r3
    d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d384:	430a      	orrs	r2, r1
    d386:	601a      	str	r2, [r3, #0]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d388:	69fb      	ldr	r3, [r7, #28]
    d38a:	681a      	ldr	r2, [r3, #0]
    d38c:	68fb      	ldr	r3, [r7, #12]
    d38e:	ea02 0103 	and.w	r1, r2, r3
    d392:	69fb      	ldr	r3, [r7, #28]
    d394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d396:	430a      	orrs	r2, r1
    d398:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d39a:	4b09      	ldr	r3, [pc, #36]	; (d3c0 <am_hal_gpio_pinconfig+0x3b4>)
    d39c:	2200      	movs	r2, #0
    d39e:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d3a0:	68bb      	ldr	r3, [r7, #8]
    d3a2:	4618      	mov	r0, r3
    d3a4:	f002 fa62 	bl	f86c <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d3a8:	2300      	movs	r3, #0

} // am_hal_gpio_pinconfig()
    d3aa:	4618      	mov	r0, r3
    d3ac:	3748      	adds	r7, #72	; 0x48
    d3ae:	46bd      	mov	sp, r7
    d3b0:	bd80      	pop	{r7, pc}
    d3b2:	bf00      	nop
    d3b4:	40010040 	.word	0x40010040
    d3b8:	400100e0 	.word	0x400100e0
    d3bc:	400100b4 	.word	0x400100b4
    d3c0:	40010000 	.word	0x40010000

0000d3c4 <am_hal_gpio_state_read>:
//*****************************************************************************
uint32_t
am_hal_gpio_state_read(uint32_t ui32Pin,
                       am_hal_gpio_read_type_e eReadType,
                       uint32_t *pui32ReadState)
{
    d3c4:	b480      	push	{r7}
    d3c6:	b089      	sub	sp, #36	; 0x24
    d3c8:	af00      	add	r7, sp, #0
    d3ca:	60f8      	str	r0, [r7, #12]
    d3cc:	460b      	mov	r3, r1
    d3ce:	607a      	str	r2, [r7, #4]
    d3d0:	72fb      	strb	r3, [r7, #11]
    uint32_t ui32ReadValue = 0xFFFFFFFF;
    d3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3d6:	61fb      	str	r3, [r7, #28]
    uint32_t ui32BaseAddr, ui32Shift;

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( pui32ReadState == NULL )
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d101      	bne.n	d3e2 <am_hal_gpio_state_read+0x1e>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d3de:	2306      	movs	r3, #6
    d3e0:	e047      	b.n	d472 <am_hal_gpio_state_read+0xae>
    }

    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d3e2:	68fb      	ldr	r3, [r7, #12]
    d3e4:	2b31      	cmp	r3, #49	; 0x31
    d3e6:	d904      	bls.n	d3f2 <am_hal_gpio_state_read+0x2e>
    {
        *pui32ReadState = ui32ReadValue;
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	69fa      	ldr	r2, [r7, #28]
    d3ec:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d3ee:	2305      	movs	r3, #5
    d3f0:	e03f      	b.n	d472 <am_hal_gpio_state_read+0xae>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Compute base address + offset of 0 or 4.
    //
    ui32BaseAddr = ((ui32Pin & 0x20) >> (3 + 2));   // 0 or 1
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	095b      	lsrs	r3, r3, #5
    d3f6:	f003 0301 	and.w	r3, r3, #1
    d3fa:	61bb      	str	r3, [r7, #24]
    ui32Shift    = ui32Pin & 0x1F;
    d3fc:	68fb      	ldr	r3, [r7, #12]
    d3fe:	f003 031f 	and.w	r3, r3, #31
    d402:	617b      	str	r3, [r7, #20]
    //ui32Mask     = 1 << ui32Shift;

    switch ( eReadType )
    d404:	7afb      	ldrb	r3, [r7, #11]
    d406:	2b01      	cmp	r3, #1
    d408:	d011      	beq.n	d42e <am_hal_gpio_state_read+0x6a>
    d40a:	2b02      	cmp	r3, #2
    d40c:	d01d      	beq.n	d44a <am_hal_gpio_state_read+0x86>
    d40e:	2b00      	cmp	r3, #0
    d410:	d129      	bne.n	d466 <am_hal_gpio_state_read+0xa2>
            //
            // Assumes eIntDir != AM_HAL_GPIO_PIN_INTDIR_NONE   &&
            //         eIntDir != AM_HAL_GPIO_PIN_INTDIR_BOTH
            // If either of those configs are set, returns 0.
            //
            ui32ReadValue = AM_REGVAL(&GPIO->RDA + ui32BaseAddr);
    d412:	69bb      	ldr	r3, [r7, #24]
    d414:	009a      	lsls	r2, r3, #2
    d416:	4b1a      	ldr	r3, [pc, #104]	; (d480 <am_hal_gpio_state_read+0xbc>)
    d418:	4413      	add	r3, r2
    d41a:	681b      	ldr	r3, [r3, #0]
    d41c:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d41e:	69fa      	ldr	r2, [r7, #28]
    d420:	697b      	ldr	r3, [r7, #20]
    d422:	fa22 f303 	lsr.w	r3, r2, r3
    d426:	f003 0301 	and.w	r3, r3, #1
    d42a:	61fb      	str	r3, [r7, #28]
            break;
    d42c:	e01d      	b.n	d46a <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_OUTPUT_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->WTA + ui32BaseAddr);
    d42e:	69bb      	ldr	r3, [r7, #24]
    d430:	009a      	lsls	r2, r3, #2
    d432:	4b14      	ldr	r3, [pc, #80]	; (d484 <am_hal_gpio_state_read+0xc0>)
    d434:	4413      	add	r3, r2
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d43a:	69fa      	ldr	r2, [r7, #28]
    d43c:	697b      	ldr	r3, [r7, #20]
    d43e:	fa22 f303 	lsr.w	r3, r2, r3
    d442:	f003 0301 	and.w	r3, r3, #1
    d446:	61fb      	str	r3, [r7, #28]
            break;
    d448:	e00f      	b.n	d46a <am_hal_gpio_state_read+0xa6>
        case AM_HAL_GPIO_ENABLE_READ:
            ui32ReadValue = AM_REGVAL(&GPIO->ENA + ui32BaseAddr);
    d44a:	69bb      	ldr	r3, [r7, #24]
    d44c:	009a      	lsls	r2, r3, #2
    d44e:	4b0e      	ldr	r3, [pc, #56]	; (d488 <am_hal_gpio_state_read+0xc4>)
    d450:	4413      	add	r3, r2
    d452:	681b      	ldr	r3, [r3, #0]
    d454:	61fb      	str	r3, [r7, #28]
            ui32ReadValue = (ui32ReadValue >> ui32Shift) & 0x01;
    d456:	69fa      	ldr	r2, [r7, #28]
    d458:	697b      	ldr	r3, [r7, #20]
    d45a:	fa22 f303 	lsr.w	r3, r2, r3
    d45e:	f003 0301 	and.w	r3, r3, #1
    d462:	61fb      	str	r3, [r7, #28]
            break;
    d464:	e001      	b.n	d46a <am_hal_gpio_state_read+0xa6>
        default:
            return AM_HAL_STATUS_INVALID_ARG;
    d466:	2306      	movs	r3, #6
    d468:	e003      	b.n	d472 <am_hal_gpio_state_read+0xae>
    }

    *pui32ReadState = ui32ReadValue;
    d46a:	687b      	ldr	r3, [r7, #4]
    d46c:	69fa      	ldr	r2, [r7, #28]
    d46e:	601a      	str	r2, [r3, #0]

    return AM_HAL_STATUS_SUCCESS;
    d470:	2300      	movs	r3, #0
} // am_hal_gpio_state_read()
    d472:	4618      	mov	r0, r3
    d474:	3724      	adds	r7, #36	; 0x24
    d476:	46bd      	mov	sp, r7
    d478:	f85d 7b04 	ldr.w	r7, [sp], #4
    d47c:	4770      	bx	lr
    d47e:	bf00      	nop
    d480:	40010080 	.word	0x40010080
    d484:	40010088 	.word	0x40010088
    d488:	400100a0 	.word	0x400100a0

0000d48c <am_hal_gpio_state_write>:
//!         Fails if the pad is not configured for GPIO (PADFNCSEL != 3).
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    d48c:	b580      	push	{r7, lr}
    d48e:	b086      	sub	sp, #24
    d490:	af00      	add	r7, sp, #0
    d492:	6078      	str	r0, [r7, #4]
    d494:	460b      	mov	r3, r1
    d496:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    d498:	2300      	movs	r3, #0
    d49a:	617b      	str	r3, [r7, #20]

#ifdef AM_HAL_ENABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	2b31      	cmp	r3, #49	; 0x31
    d4a0:	d901      	bls.n	d4a6 <am_hal_gpio_state_write+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d4a2:	2305      	movs	r3, #5
    d4a4:	e068      	b.n	d578 <am_hal_gpio_state_write+0xec>
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    d4a6:	78fb      	ldrb	r3, [r7, #3]
    d4a8:	2b05      	cmp	r3, #5
    d4aa:	d901      	bls.n	d4b0 <am_hal_gpio_state_write+0x24>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    d4ac:	2306      	movs	r3, #6
    d4ae:	e063      	b.n	d578 <am_hal_gpio_state_write+0xec>
    }
#endif // AM_HAL_ENABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    d4b0:	687b      	ldr	r3, [r7, #4]
    d4b2:	f003 031f 	and.w	r3, r3, #31
    d4b6:	2201      	movs	r2, #1
    d4b8:	fa02 f303 	lsl.w	r3, r2, r3
    d4bc:	613b      	str	r3, [r7, #16]
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    d4be:	687b      	ldr	r3, [r7, #4]
    d4c0:	08db      	lsrs	r3, r3, #3
    d4c2:	f003 0304 	and.w	r3, r3, #4
    d4c6:	60fb      	str	r3, [r7, #12]

    AM_CRITICAL_BEGIN;
    d4c8:	f002 f9cc 	bl	f864 <am_hal_interrupt_master_disable>
    d4cc:	4603      	mov	r3, r0
    d4ce:	60bb      	str	r3, [r7, #8]

    ui32Off /= 4;   // 0 or 1 for ptr arithmetic
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	089b      	lsrs	r3, r3, #2
    d4d4:	60fb      	str	r3, [r7, #12]
    switch ( eWriteType )
    d4d6:	78fb      	ldrb	r3, [r7, #3]
    d4d8:	2b05      	cmp	r3, #5
    d4da:	d845      	bhi.n	d568 <am_hal_gpio_state_write+0xdc>
    d4dc:	a201      	add	r2, pc, #4	; (adr r2, d4e4 <am_hal_gpio_state_write+0x58>)
    d4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d4e2:	bf00      	nop
    d4e4:	0000d50b 	.word	0x0000d50b
    d4e8:	0000d4fd 	.word	0x0000d4fd
    d4ec:	0000d519 	.word	0x0000d519
    d4f0:	0000d541 	.word	0x0000d541
    d4f4:	0000d533 	.word	0x0000d533
    d4f8:	0000d54f 	.word	0x0000d54f
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(&GPIO->WTSA + ui32Off) = ui32Mask;
    d4fc:	68fb      	ldr	r3, [r7, #12]
    d4fe:	009a      	lsls	r2, r3, #2
    d500:	4b1f      	ldr	r3, [pc, #124]	; (d580 <am_hal_gpio_state_write+0xf4>)
    d502:	4413      	add	r3, r2
    d504:	693a      	ldr	r2, [r7, #16]
    d506:	601a      	str	r2, [r3, #0]
            break;
    d508:	e031      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_CLEAR:              // Write a zero to a GPIO.
            AM_REGVAL(&GPIO->WTCA + ui32Off) = ui32Mask;
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	009a      	lsls	r2, r3, #2
    d50e:	4b1d      	ldr	r3, [pc, #116]	; (d584 <am_hal_gpio_state_write+0xf8>)
    d510:	4413      	add	r3, r2
    d512:	693a      	ldr	r2, [r7, #16]
    d514:	601a      	str	r2, [r3, #0]
            break;
    d516:	e02a      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TOGGLE:             // Toggle the GPIO value.
            AM_REGVAL(&GPIO->WTA + ui32Off) ^= ui32Mask;
    d518:	68fb      	ldr	r3, [r7, #12]
    d51a:	009a      	lsls	r2, r3, #2
    d51c:	4b1a      	ldr	r3, [pc, #104]	; (d588 <am_hal_gpio_state_write+0xfc>)
    d51e:	4413      	add	r3, r2
    d520:	6819      	ldr	r1, [r3, #0]
    d522:	68fb      	ldr	r3, [r7, #12]
    d524:	009a      	lsls	r2, r3, #2
    d526:	4b18      	ldr	r3, [pc, #96]	; (d588 <am_hal_gpio_state_write+0xfc>)
    d528:	4413      	add	r3, r2
    d52a:	693a      	ldr	r2, [r7, #16]
    d52c:	404a      	eors	r2, r1
    d52e:	601a      	str	r2, [r3, #0]
            break;
    d530:	e01d      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE:    // Enable  a tri-state GPIO.
            AM_REGVAL(&GPIO->ENSA + ui32Off) = ui32Mask;
    d532:	68fb      	ldr	r3, [r7, #12]
    d534:	009a      	lsls	r2, r3, #2
    d536:	4b15      	ldr	r3, [pc, #84]	; (d58c <am_hal_gpio_state_write+0x100>)
    d538:	4413      	add	r3, r2
    d53a:	693a      	ldr	r2, [r7, #16]
    d53c:	601a      	str	r2, [r3, #0]
            break;
    d53e:	e016      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE:   // Disable a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) = ui32Mask;
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	009a      	lsls	r2, r3, #2
    d544:	4b12      	ldr	r3, [pc, #72]	; (d590 <am_hal_gpio_state_write+0x104>)
    d546:	4413      	add	r3, r2
    d548:	693a      	ldr	r2, [r7, #16]
    d54a:	601a      	str	r2, [r3, #0]
            break;
    d54c:	e00f      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        case AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE:   // Toggle a tri-state GPIO.
            AM_REGVAL(&GPIO->ENCA + ui32Off) ^= ui32Mask;
    d54e:	68fb      	ldr	r3, [r7, #12]
    d550:	009a      	lsls	r2, r3, #2
    d552:	4b0f      	ldr	r3, [pc, #60]	; (d590 <am_hal_gpio_state_write+0x104>)
    d554:	4413      	add	r3, r2
    d556:	6819      	ldr	r1, [r3, #0]
    d558:	68fb      	ldr	r3, [r7, #12]
    d55a:	009a      	lsls	r2, r3, #2
    d55c:	4b0c      	ldr	r3, [pc, #48]	; (d590 <am_hal_gpio_state_write+0x104>)
    d55e:	4413      	add	r3, r2
    d560:	693a      	ldr	r2, [r7, #16]
    d562:	404a      	eors	r2, r1
    d564:	601a      	str	r2, [r3, #0]
            break;
    d566:	e002      	b.n	d56e <am_hal_gpio_state_write+0xe2>
        default:
            // Type values were validated on entry.
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
    d568:	2306      	movs	r3, #6
    d56a:	617b      	str	r3, [r7, #20]
            break;
    d56c:	bf00      	nop
    }

    AM_CRITICAL_END;
    d56e:	68bb      	ldr	r3, [r7, #8]
    d570:	4618      	mov	r0, r3
    d572:	f002 f97b 	bl	f86c <am_hal_interrupt_master_set>

    return ui32Return;
    d576:	697b      	ldr	r3, [r7, #20]
} // am_hal_gpio_state_write()
    d578:	4618      	mov	r0, r3
    d57a:	3718      	adds	r7, #24
    d57c:	46bd      	mov	sp, r7
    d57e:	bd80      	pop	{r7, pc}
    d580:	40010090 	.word	0x40010090
    d584:	40010098 	.word	0x40010098
    d588:	40010088 	.word	0x40010088
    d58c:	400100a8 	.word	0x400100a8
    d590:	400100b4 	.word	0x400100b4

0000d594 <am_hal_gpio_interrupt_enable>:
// Enable GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_enable(uint64_t ui64InterruptMask)
{
    d594:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d598:	b084      	sub	sp, #16
    d59a:	af00      	add	r7, sp, #0
    d59c:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d5a0:	e9d7 3400 	ldrd	r3, r4, [r7]
    d5a4:	f04f 0100 	mov.w	r1, #0
    d5a8:	4a17      	ldr	r2, [pc, #92]	; (d608 <am_hal_gpio_interrupt_enable+0x74>)
    d5aa:	ea03 0b01 	and.w	fp, r3, r1
    d5ae:	ea04 0c02 	and.w	ip, r4, r2
    d5b2:	ea5b 030c 	orrs.w	r3, fp, ip
    d5b6:	d001      	beq.n	d5bc <am_hal_gpio_interrupt_enable+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d5b8:	2305      	movs	r3, #5
    d5ba:	e01f      	b.n	d5fc <am_hal_gpio_interrupt_enable+0x68>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
    d5bc:	f002 f952 	bl	f864 <am_hal_interrupt_master_disable>
    d5c0:	4603      	mov	r3, r0
    d5c2:	60fb      	str	r3, [r7, #12]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d5c4:	4b11      	ldr	r3, [pc, #68]	; (d60c <am_hal_gpio_interrupt_enable+0x78>)
    d5c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d5ca:	683b      	ldr	r3, [r7, #0]
    d5cc:	490f      	ldr	r1, [pc, #60]	; (d60c <am_hal_gpio_interrupt_enable+0x78>)
    d5ce:	4313      	orrs	r3, r2
    d5d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
    d5d4:	4b0d      	ldr	r3, [pc, #52]	; (d60c <am_hal_gpio_interrupt_enable+0x78>)
    d5d6:	f8d3 0210 	ldr.w	r0, [r3, #528]	; 0x210
    d5da:	e9d7 1200 	ldrd	r1, r2, [r7]
    d5de:	f04f 0300 	mov.w	r3, #0
    d5e2:	f04f 0400 	mov.w	r4, #0
    d5e6:	0013      	movs	r3, r2
    d5e8:	2400      	movs	r4, #0
    d5ea:	4a08      	ldr	r2, [pc, #32]	; (d60c <am_hal_gpio_interrupt_enable+0x78>)
    d5ec:	4303      	orrs	r3, r0
    d5ee:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    AM_CRITICAL_END
    d5f2:	68fb      	ldr	r3, [r7, #12]
    d5f4:	4618      	mov	r0, r3
    d5f6:	f002 f939 	bl	f86c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d5fa:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_enable()
    d5fc:	4618      	mov	r0, r3
    d5fe:	3710      	adds	r7, #16
    d600:	46bd      	mov	sp, r7
    d602:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d606:	bf00      	nop
    d608:	fffc0000 	.word	0xfffc0000
    d60c:	40010000 	.word	0x40010000

0000d610 <am_hal_gpio_interrupt_clear>:
// Clear GPIO interrupts.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_clear(uint64_t ui64InterruptMask)
{
    d610:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    d614:	b084      	sub	sp, #16
    d616:	af00      	add	r7, sp, #0
    d618:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef AM_HAL_ENABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
    d61c:	e9d7 3400 	ldrd	r3, r4, [r7]
    d620:	f04f 0100 	mov.w	r1, #0
    d624:	4a13      	ldr	r2, [pc, #76]	; (d674 <am_hal_gpio_interrupt_clear+0x64>)
    d626:	ea03 0b01 	and.w	fp, r3, r1
    d62a:	ea04 0c02 	and.w	ip, r4, r2
    d62e:	ea5b 030c 	orrs.w	r3, fp, ip
    d632:	d001      	beq.n	d638 <am_hal_gpio_interrupt_clear+0x28>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d634:	2305      	movs	r3, #5
    d636:	e017      	b.n	d668 <am_hal_gpio_interrupt_clear+0x58>
#endif // AM_HAL_ENABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
    d638:	f002 f914 	bl	f864 <am_hal_interrupt_master_disable>
    d63c:	4603      	mov	r3, r0
    d63e:	60fb      	str	r3, [r7, #12]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
    d640:	4a0d      	ldr	r2, [pc, #52]	; (d678 <am_hal_gpio_interrupt_clear+0x68>)
    d642:	683b      	ldr	r3, [r7, #0]
    d644:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
    d648:	e9d7 1200 	ldrd	r1, r2, [r7]
    d64c:	f04f 0300 	mov.w	r3, #0
    d650:	f04f 0400 	mov.w	r4, #0
    d654:	0013      	movs	r3, r2
    d656:	2400      	movs	r4, #0
    d658:	4a07      	ldr	r2, [pc, #28]	; (d678 <am_hal_gpio_interrupt_clear+0x68>)
    d65a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218

    AM_CRITICAL_END
    d65e:	68fb      	ldr	r3, [r7, #12]
    d660:	4618      	mov	r0, r3
    d662:	f002 f903 	bl	f86c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
    d666:	2300      	movs	r3, #0

} // am_hal_gpio_interrupt_clear()
    d668:	4618      	mov	r0, r3
    d66a:	3710      	adds	r7, #16
    d66c:	46bd      	mov	sp, r7
    d66e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
    d672:	bf00      	nop
    d674:	fffc0000 	.word	0xfffc0000
    d678:	40010000 	.word	0x40010000

0000d67c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d67c:	b580      	push	{r7, lr}
    d67e:	b088      	sub	sp, #32
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    d684:	f107 030c 	add.w	r3, r7, #12
    d688:	4618      	mov	r0, r3
    d68a:	f001 ffb1 	bl	f5f0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    d68e:	68fb      	ldr	r3, [r7, #12]
    d690:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d692:	69fb      	ldr	r3, [r7, #28]
    d694:	4a07      	ldr	r2, [pc, #28]	; (d6b4 <am_util_delay_ms+0x38>)
    d696:	fba2 2303 	umull	r2, r3, r2, r3
    d69a:	099a      	lsrs	r2, r3, #6
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	fb02 f303 	mul.w	r3, r2, r3
    d6a2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d6a4:	69b8      	ldr	r0, [r7, #24]
    d6a6:	f002 f8a9 	bl	f7fc <am_hal_flash_delay>
}
    d6aa:	bf00      	nop
    d6ac:	3720      	adds	r7, #32
    d6ae:	46bd      	mov	sp, r7
    d6b0:	bd80      	pop	{r7, pc}
    d6b2:	bf00      	nop
    d6b4:	057619f1 	.word	0x057619f1

0000d6b8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    d6b8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    d6ba:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    d6be:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    d6c0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    d6c4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    d6c8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d6cc:	f000 f80a 	bl	d6e4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    d6d0:	bd01      	pop	{r0, pc}
}
    d6d2:	bf00      	nop
    d6d4:	4618      	mov	r0, r3

0000d6d6 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d6d6:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d6d8:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d6da:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d6dc:	4770      	bx	lr
}
    d6de:	bf00      	nop
    d6e0:	4618      	mov	r0, r3
	...

0000d6e4 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d6e4:	b580      	push	{r7, lr}
    d6e6:	b096      	sub	sp, #88	; 0x58
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d6ec:	f107 030c 	add.w	r3, r7, #12
    d6f0:	2200      	movs	r2, #0
    d6f2:	601a      	str	r2, [r3, #0]
    d6f4:	605a      	str	r2, [r3, #4]
    d6f6:	609a      	str	r2, [r3, #8]
    d6f8:	60da      	str	r2, [r3, #12]
    d6fa:	611a      	str	r2, [r3, #16]
    d6fc:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d6fe:	2300      	movs	r3, #0
    d700:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d704:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d706:	4b2e      	ldr	r3, [pc, #184]	; (d7c0 <am_util_faultisr_collect_data+0xdc>)
    d708:	681b      	ldr	r3, [r3, #0]
    d70a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d70e:	b2db      	uxtb	r3, r3
    d710:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d716:	0a1b      	lsrs	r3, r3, #8
    d718:	b2db      	uxtb	r3, r3
    d71a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d720:	0c1b      	lsrs	r3, r3, #16
    d722:	b29b      	uxth	r3, r3
    d724:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d728:	4b26      	ldr	r3, [pc, #152]	; (d7c4 <am_util_faultisr_collect_data+0xe0>)
    d72a:	681b      	ldr	r3, [r3, #0]
    d72c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d72e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d732:	b2db      	uxtb	r3, r3
    d734:	f003 0302 	and.w	r3, r3, #2
    d738:	2b00      	cmp	r3, #0
    d73a:	d005      	beq.n	d748 <am_util_faultisr_collect_data+0x64>
    d73c:	6879      	ldr	r1, [r7, #4]
    d73e:	2006      	movs	r0, #6
    d740:	f7ff ffc9 	bl	d6d6 <getStackedReg>
    d744:	4603      	mov	r3, r0
    d746:	e001      	b.n	d74c <am_util_faultisr_collect_data+0x68>
    d748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d74c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d74e:	6879      	ldr	r1, [r7, #4]
    d750:	2000      	movs	r0, #0
    d752:	f7ff ffc0 	bl	d6d6 <getStackedReg>
    d756:	4603      	mov	r3, r0
    d758:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d75a:	6879      	ldr	r1, [r7, #4]
    d75c:	2001      	movs	r0, #1
    d75e:	f7ff ffba 	bl	d6d6 <getStackedReg>
    d762:	4603      	mov	r3, r0
    d764:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d766:	6879      	ldr	r1, [r7, #4]
    d768:	2002      	movs	r0, #2
    d76a:	f7ff ffb4 	bl	d6d6 <getStackedReg>
    d76e:	4603      	mov	r3, r0
    d770:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d772:	6879      	ldr	r1, [r7, #4]
    d774:	2003      	movs	r0, #3
    d776:	f7ff ffae 	bl	d6d6 <getStackedReg>
    d77a:	4603      	mov	r3, r0
    d77c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d77e:	6879      	ldr	r1, [r7, #4]
    d780:	2004      	movs	r0, #4
    d782:	f7ff ffa8 	bl	d6d6 <getStackedReg>
    d786:	4603      	mov	r3, r0
    d788:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d78a:	6879      	ldr	r1, [r7, #4]
    d78c:	2005      	movs	r0, #5
    d78e:	f7ff ffa2 	bl	d6d6 <getStackedReg>
    d792:	4603      	mov	r3, r0
    d794:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d796:	6879      	ldr	r1, [r7, #4]
    d798:	2006      	movs	r0, #6
    d79a:	f7ff ff9c 	bl	d6d6 <getStackedReg>
    d79e:	4603      	mov	r3, r0
    d7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d7a2:	6879      	ldr	r1, [r7, #4]
    d7a4:	2007      	movs	r0, #7
    d7a6:	f7ff ff96 	bl	d6d6 <getStackedReg>
    d7aa:	4603      	mov	r3, r0
    d7ac:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    d7ae:	f107 030c 	add.w	r3, r7, #12
    d7b2:	4619      	mov	r1, r3
    d7b4:	2002      	movs	r0, #2
    d7b6:	f002 f8b3 	bl	f920 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    d7ba:	2300      	movs	r3, #0
    d7bc:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d7be:	e7fe      	b.n	d7be <am_util_faultisr_collect_data+0xda>
    d7c0:	e000ed28 	.word	0xe000ed28
    d7c4:	e000ed38 	.word	0xe000ed38

0000d7c8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d7c8:	b480      	push	{r7}
    d7ca:	b083      	sub	sp, #12
    d7cc:	af00      	add	r7, sp, #0
    d7ce:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d7d0:	4a04      	ldr	r2, [pc, #16]	; (d7e4 <am_util_stdio_printf_init+0x1c>)
    d7d2:	687b      	ldr	r3, [r7, #4]
    d7d4:	6013      	str	r3, [r2, #0]
}
    d7d6:	bf00      	nop
    d7d8:	370c      	adds	r7, #12
    d7da:	46bd      	mov	sp, r7
    d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7e0:	4770      	bx	lr
    d7e2:	bf00      	nop
    d7e4:	1000c184 	.word	0x1000c184

0000d7e8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d7e8:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    d7ec:	b08b      	sub	sp, #44	; 0x2c
    d7ee:	af00      	add	r7, sp, #0
    d7f0:	e9c7 0100 	strd	r0, r1, [r7]
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d7f4:	e9d7 1200 	ldrd	r1, r2, [r7]
    d7f8:	f04f 0300 	mov.w	r3, #0
    d7fc:	f04f 0400 	mov.w	r4, #0
    d800:	0013      	movs	r3, r2
    d802:	2400      	movs	r4, #0
    d804:	4323      	orrs	r3, r4
    d806:	f000 809d 	beq.w	d944 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d80a:	e9d7 3400 	ldrd	r3, r4, [r7]
    d80e:	0866      	lsrs	r6, r4, #1
    d810:	ea4f 0533 	mov.w	r5, r3, rrx
    d814:	e9d7 1200 	ldrd	r1, r2, [r7]
    d818:	f04f 0b00 	mov.w	fp, #0
    d81c:	f04f 0c00 	mov.w	ip, #0
    d820:	ea4f 0b91 	mov.w	fp, r1, lsr #2
    d824:	ea4b 7b82 	orr.w	fp, fp, r2, lsl #30
    d828:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    d82c:	eb1b 0305 	adds.w	r3, fp, r5
    d830:	eb4c 0406 	adc.w	r4, ip, r6
    d834:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 4);
    d838:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d83c:	f04f 0500 	mov.w	r5, #0
    d840:	f04f 0600 	mov.w	r6, #0
    d844:	090d      	lsrs	r5, r1, #4
    d846:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d84a:	0916      	lsrs	r6, r2, #4
    d84c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d850:	186b      	adds	r3, r5, r1
    d852:	eb46 0402 	adc.w	r4, r6, r2
    d856:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 8);
    d85a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d85e:	f04f 0500 	mov.w	r5, #0
    d862:	f04f 0600 	mov.w	r6, #0
    d866:	0a0d      	lsrs	r5, r1, #8
    d868:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    d86c:	0a16      	lsrs	r6, r2, #8
    d86e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d872:	186b      	adds	r3, r5, r1
    d874:	eb46 0402 	adc.w	r4, r6, r2
    d878:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 16);
    d87c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d880:	f04f 0500 	mov.w	r5, #0
    d884:	f04f 0600 	mov.w	r6, #0
    d888:	0c0d      	lsrs	r5, r1, #16
    d88a:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    d88e:	0c16      	lsrs	r6, r2, #16
    d890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d894:	186b      	adds	r3, r5, r1
    d896:	eb46 0402 	adc.w	r4, r6, r2
    d89a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 += (q64 >> 32);
    d89e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d8a2:	f04f 0500 	mov.w	r5, #0
    d8a6:	f04f 0600 	mov.w	r6, #0
    d8aa:	0015      	movs	r5, r2
    d8ac:	2600      	movs	r6, #0
    d8ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d8b2:	186b      	adds	r3, r5, r1
    d8b4:	eb46 0402 	adc.w	r4, r6, r2
    d8b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        q64 >>= 3;
    d8bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d8c0:	f04f 0300 	mov.w	r3, #0
    d8c4:	f04f 0400 	mov.w	r4, #0
    d8c8:	08cb      	lsrs	r3, r1, #3
    d8ca:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    d8ce:	08d4      	lsrs	r4, r2, #3
    d8d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
        r64 = ui64Val - q64*10;
    d8d4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
    d8d8:	46ab      	mov	fp, r5
    d8da:	46b4      	mov	ip, r6
    d8dc:	f04f 0100 	mov.w	r1, #0
    d8e0:	f04f 0200 	mov.w	r2, #0
    d8e4:	ea4f 028c 	mov.w	r2, ip, lsl #2
    d8e8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
    d8ec:	ea4f 018b 	mov.w	r1, fp, lsl #2
    d8f0:	468b      	mov	fp, r1
    d8f2:	4694      	mov	ip, r2
    d8f4:	eb1b 0b05 	adds.w	fp, fp, r5
    d8f8:	eb4c 0c06 	adc.w	ip, ip, r6
    d8fc:	eb1b 030b 	adds.w	r3, fp, fp
    d900:	eb4c 040c 	adc.w	r4, ip, ip
    d904:	469b      	mov	fp, r3
    d906:	46a4      	mov	ip, r4
    d908:	4659      	mov	r1, fp
    d90a:	4662      	mov	r2, ip
    d90c:	e9d7 3400 	ldrd	r3, r4, [r7]
    d910:	1a5b      	subs	r3, r3, r1
    d912:	eb64 0402 	sbc.w	r4, r4, r2
    d916:	461d      	mov	r5, r3
    d918:	4626      	mov	r6, r4
    d91a:	e9c7 5602 	strd	r5, r6, [r7, #8]
        return q64 + ((r64 + 6) >> 4);
    d91e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d922:	1d99      	adds	r1, r3, #6
    d924:	f144 0200 	adc.w	r2, r4, #0
    d928:	f04f 0500 	mov.w	r5, #0
    d92c:	f04f 0600 	mov.w	r6, #0
    d930:	090d      	lsrs	r5, r1, #4
    d932:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
    d936:	0916      	lsrs	r6, r2, #4
    d938:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    d93c:	186b      	adds	r3, r5, r1
    d93e:	eb46 0402 	adc.w	r4, r6, r2
    d942:	e029      	b.n	d998 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d944:	683b      	ldr	r3, [r7, #0]
    d946:	627b      	str	r3, [r7, #36]	; 0x24
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d94a:	085a      	lsrs	r2, r3, #1
    d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d94e:	089b      	lsrs	r3, r3, #2
    d950:	4413      	add	r3, r2
    d952:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 4);
    d954:	6a3b      	ldr	r3, [r7, #32]
    d956:	091b      	lsrs	r3, r3, #4
    d958:	6a3a      	ldr	r2, [r7, #32]
    d95a:	4413      	add	r3, r2
    d95c:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 8);
    d95e:	6a3b      	ldr	r3, [r7, #32]
    d960:	0a1b      	lsrs	r3, r3, #8
    d962:	6a3a      	ldr	r2, [r7, #32]
    d964:	4413      	add	r3, r2
    d966:	623b      	str	r3, [r7, #32]
        q32 += (q32 >> 16);
    d968:	6a3b      	ldr	r3, [r7, #32]
    d96a:	0c1b      	lsrs	r3, r3, #16
    d96c:	6a3a      	ldr	r2, [r7, #32]
    d96e:	4413      	add	r3, r2
    d970:	623b      	str	r3, [r7, #32]
        q32 >>= 3;
    d972:	6a3b      	ldr	r3, [r7, #32]
    d974:	08db      	lsrs	r3, r3, #3
    d976:	623b      	str	r3, [r7, #32]
        r32 = ui32Val - q32*10;
    d978:	6a3a      	ldr	r2, [r7, #32]
    d97a:	4613      	mov	r3, r2
    d97c:	009b      	lsls	r3, r3, #2
    d97e:	4413      	add	r3, r2
    d980:	005b      	lsls	r3, r3, #1
    d982:	461a      	mov	r2, r3
    d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d986:	1a9b      	subs	r3, r3, r2
    d988:	61fb      	str	r3, [r7, #28]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d98a:	69fb      	ldr	r3, [r7, #28]
    d98c:	3306      	adds	r3, #6
    d98e:	091a      	lsrs	r2, r3, #4
    d990:	6a3b      	ldr	r3, [r7, #32]
    d992:	4413      	add	r3, r2
    d994:	f04f 0400 	mov.w	r4, #0
    }
}
    d998:	4618      	mov	r0, r3
    d99a:	4621      	mov	r1, r4
    d99c:	372c      	adds	r7, #44	; 0x2c
    d99e:	46bd      	mov	sp, r7
    d9a0:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    d9a4:	4770      	bx	lr

0000d9a6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d9a6:	b590      	push	{r4, r7, lr}
    d9a8:	b085      	sub	sp, #20
    d9aa:	af00      	add	r7, sp, #0
    d9ac:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d9b0:	683a      	ldr	r2, [r7, #0]
    d9b2:	687b      	ldr	r3, [r7, #4]
    d9b4:	4313      	orrs	r3, r2
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	bf0c      	ite	eq
    d9ba:	2301      	moveq	r3, #1
    d9bc:	2300      	movne	r3, #0
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d9c2:	e008      	b.n	d9d6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d9c4:	e9d7 0100 	ldrd	r0, r1, [r7]
    d9c8:	f7ff ff0e 	bl	d7e8 <divu64_10>
    d9cc:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d9d0:	68fb      	ldr	r3, [r7, #12]
    d9d2:	3301      	adds	r3, #1
    d9d4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d9d6:	e9d7 3400 	ldrd	r3, r4, [r7]
    d9da:	4323      	orrs	r3, r4
    d9dc:	d1f2      	bne.n	d9c4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d9de:	68fb      	ldr	r3, [r7, #12]
}
    d9e0:	4618      	mov	r0, r3
    d9e2:	3714      	adds	r7, #20
    d9e4:	46bd      	mov	sp, r7
    d9e6:	bd90      	pop	{r4, r7, pc}

0000d9e8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d9e8:	b590      	push	{r4, r7, lr}
    d9ea:	b083      	sub	sp, #12
    d9ec:	af00      	add	r7, sp, #0
    d9ee:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d9f2:	e9d7 3400 	ldrd	r3, r4, [r7]
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	f174 0300 	sbcs.w	r3, r4, #0
    d9fc:	da06      	bge.n	da0c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d9fe:	e9d7 3400 	ldrd	r3, r4, [r7]
    da02:	425b      	negs	r3, r3
    da04:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    da08:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    da0c:	e9d7 3400 	ldrd	r3, r4, [r7]
    da10:	4618      	mov	r0, r3
    da12:	4621      	mov	r1, r4
    da14:	f7ff ffc7 	bl	d9a6 <ndigits_in_u64>
    da18:	4603      	mov	r3, r0
}
    da1a:	4618      	mov	r0, r3
    da1c:	370c      	adds	r7, #12
    da1e:	46bd      	mov	sp, r7
    da20:	bd90      	pop	{r4, r7, pc}

0000da22 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    da22:	b490      	push	{r4, r7}
    da24:	b084      	sub	sp, #16
    da26:	af00      	add	r7, sp, #0
    da28:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    da2c:	683a      	ldr	r2, [r7, #0]
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	4313      	orrs	r3, r2
    da32:	2b00      	cmp	r3, #0
    da34:	bf0c      	ite	eq
    da36:	2301      	moveq	r3, #1
    da38:	2300      	movne	r3, #0
    da3a:	b2db      	uxtb	r3, r3
    da3c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    da3e:	e00e      	b.n	da5e <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    da40:	e9d7 1200 	ldrd	r1, r2, [r7]
    da44:	f04f 0300 	mov.w	r3, #0
    da48:	f04f 0400 	mov.w	r4, #0
    da4c:	090b      	lsrs	r3, r1, #4
    da4e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    da52:	0914      	lsrs	r4, r2, #4
    da54:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    da58:	68fb      	ldr	r3, [r7, #12]
    da5a:	3301      	adds	r3, #1
    da5c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    da5e:	e9d7 3400 	ldrd	r3, r4, [r7]
    da62:	4323      	orrs	r3, r4
    da64:	d1ec      	bne.n	da40 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    da66:	68fb      	ldr	r3, [r7, #12]
}
    da68:	4618      	mov	r0, r3
    da6a:	3710      	adds	r7, #16
    da6c:	46bd      	mov	sp, r7
    da6e:	bc90      	pop	{r4, r7}
    da70:	4770      	bx	lr

0000da72 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    da72:	b480      	push	{r7}
    da74:	b087      	sub	sp, #28
    da76:	af00      	add	r7, sp, #0
    da78:	6078      	str	r0, [r7, #4]
    da7a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    da7c:	2300      	movs	r3, #0
    da7e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    da80:	2300      	movs	r3, #0
    da82:	613b      	str	r3, [r7, #16]
    da84:	2300      	movs	r3, #0
    da86:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    da88:	687b      	ldr	r3, [r7, #4]
    da8a:	781b      	ldrb	r3, [r3, #0]
    da8c:	2b2d      	cmp	r3, #45	; 0x2d
    da8e:	d11b      	bne.n	dac8 <decstr_to_int+0x56>
    {
        bNeg = true;
    da90:	2301      	movs	r3, #1
    da92:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    da94:	687b      	ldr	r3, [r7, #4]
    da96:	3301      	adds	r3, #1
    da98:	607b      	str	r3, [r7, #4]
        uCnt++;
    da9a:	68fb      	ldr	r3, [r7, #12]
    da9c:	3301      	adds	r3, #1
    da9e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    daa0:	e012      	b.n	dac8 <decstr_to_int+0x56>
    {
        ++uCnt;
    daa2:	68fb      	ldr	r3, [r7, #12]
    daa4:	3301      	adds	r3, #1
    daa6:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    daa8:	693a      	ldr	r2, [r7, #16]
    daaa:	4613      	mov	r3, r2
    daac:	009b      	lsls	r3, r3, #2
    daae:	4413      	add	r3, r2
    dab0:	005b      	lsls	r3, r3, #1
    dab2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	781b      	ldrb	r3, [r3, #0]
    dab8:	461a      	mov	r2, r3
    daba:	693b      	ldr	r3, [r7, #16]
    dabc:	4413      	add	r3, r2
    dabe:	3b30      	subs	r3, #48	; 0x30
    dac0:	613b      	str	r3, [r7, #16]
        pcStr++;
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	3301      	adds	r3, #1
    dac6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	781b      	ldrb	r3, [r3, #0]
    dacc:	2b2f      	cmp	r3, #47	; 0x2f
    dace:	d903      	bls.n	dad8 <decstr_to_int+0x66>
    dad0:	687b      	ldr	r3, [r7, #4]
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	2b39      	cmp	r3, #57	; 0x39
    dad6:	d9e4      	bls.n	daa2 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    dad8:	683b      	ldr	r3, [r7, #0]
    dada:	2b00      	cmp	r3, #0
    dadc:	d002      	beq.n	dae4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    dade:	683b      	ldr	r3, [r7, #0]
    dae0:	68fa      	ldr	r2, [r7, #12]
    dae2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    dae4:	7dfb      	ldrb	r3, [r7, #23]
    dae6:	2b00      	cmp	r3, #0
    dae8:	d002      	beq.n	daf0 <decstr_to_int+0x7e>
    daea:	693b      	ldr	r3, [r7, #16]
    daec:	425b      	negs	r3, r3
    daee:	e000      	b.n	daf2 <decstr_to_int+0x80>
    daf0:	693b      	ldr	r3, [r7, #16]
}
    daf2:	4618      	mov	r0, r3
    daf4:	371c      	adds	r7, #28
    daf6:	46bd      	mov	sp, r7
    daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dafc:	4770      	bx	lr

0000dafe <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    dafe:	b590      	push	{r4, r7, lr}
    db00:	b091      	sub	sp, #68	; 0x44
    db02:	af00      	add	r7, sp, #0
    db04:	e9c7 0102 	strd	r0, r1, [r7, #8]
    db08:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    db0a:	2300      	movs	r3, #0
    db0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    db0e:	2300      	movs	r3, #0
    db10:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    db12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    db16:	f7ff fe67 	bl	d7e8 <divu64_10>
    db1a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    db1e:	68b9      	ldr	r1, [r7, #8]
    db20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    db22:	4613      	mov	r3, r2
    db24:	009b      	lsls	r3, r3, #2
    db26:	4413      	add	r3, r2
    db28:	005b      	lsls	r3, r3, #1
    db2a:	1acb      	subs	r3, r1, r3
    db2c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db30:	b2da      	uxtb	r2, r3
    db32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db34:	1c59      	adds	r1, r3, #1
    db36:	63f9      	str	r1, [r7, #60]	; 0x3c
    db38:	3230      	adds	r2, #48	; 0x30
    db3a:	b2d2      	uxtb	r2, r2
    db3c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    db40:	440b      	add	r3, r1
    db42:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    db46:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    db4a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    db4e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    db52:	4323      	orrs	r3, r4
    db54:	d1dd      	bne.n	db12 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    db56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db58:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    db5a:	687b      	ldr	r3, [r7, #4]
    db5c:	2b00      	cmp	r3, #0
    db5e:	d011      	beq.n	db84 <uint64_to_str+0x86>
    {
        while ( ix-- )
    db60:	e008      	b.n	db74 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	1c5a      	adds	r2, r3, #1
    db66:	607a      	str	r2, [r7, #4]
    db68:	f107 0110 	add.w	r1, r7, #16
    db6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    db6e:	440a      	add	r2, r1
    db70:	7812      	ldrb	r2, [r2, #0]
    db72:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    db74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db76:	1e5a      	subs	r2, r3, #1
    db78:	63fa      	str	r2, [r7, #60]	; 0x3c
    db7a:	2b00      	cmp	r3, #0
    db7c:	d1f1      	bne.n	db62 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    db7e:	687b      	ldr	r3, [r7, #4]
    db80:	2200      	movs	r2, #0
    db82:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    db86:	4618      	mov	r0, r3
    db88:	3744      	adds	r7, #68	; 0x44
    db8a:	46bd      	mov	sp, r7
    db8c:	bd90      	pop	{r4, r7, pc}

0000db8e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    db8e:	b490      	push	{r4, r7}
    db90:	b08c      	sub	sp, #48	; 0x30
    db92:	af00      	add	r7, sp, #0
    db94:	e9c7 0102 	strd	r0, r1, [r7, #8]
    db98:	607a      	str	r2, [r7, #4]
    db9a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    db9c:	2300      	movs	r3, #0
    db9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    dba0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    dba4:	4323      	orrs	r3, r4
    dba6:	d135      	bne.n	dc14 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbaa:	1c5a      	adds	r2, r3, #1
    dbac:	62fa      	str	r2, [r7, #44]	; 0x2c
    dbae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    dbb2:	4413      	add	r3, r2
    dbb4:	2230      	movs	r2, #48	; 0x30
    dbb6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    dbba:	e02b      	b.n	dc14 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    dbbc:	7a3b      	ldrb	r3, [r7, #8]
    dbbe:	f003 030f 	and.w	r3, r3, #15
    dbc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    dbc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    dbca:	2b09      	cmp	r3, #9
    dbcc:	d90a      	bls.n	dbe4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    dbce:	78fb      	ldrb	r3, [r7, #3]
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d001      	beq.n	dbd8 <uint64_to_hexstr+0x4a>
    dbd4:	2227      	movs	r2, #39	; 0x27
    dbd6:	e000      	b.n	dbda <uint64_to_hexstr+0x4c>
    dbd8:	2207      	movs	r2, #7
    dbda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    dbde:	4413      	add	r3, r2
    dbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbe6:	1c5a      	adds	r2, r3, #1
    dbe8:	62fa      	str	r2, [r7, #44]	; 0x2c
    dbea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    dbee:	3230      	adds	r2, #48	; 0x30
    dbf0:	b2d2      	uxtb	r2, r2
    dbf2:	f107 0130 	add.w	r1, r7, #48	; 0x30
    dbf6:	440b      	add	r3, r1
    dbf8:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    dbfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    dc00:	f04f 0300 	mov.w	r3, #0
    dc04:	f04f 0400 	mov.w	r4, #0
    dc08:	090b      	lsrs	r3, r1, #4
    dc0a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    dc0e:	0914      	lsrs	r4, r2, #4
    dc10:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    dc14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    dc18:	4323      	orrs	r3, r4
    dc1a:	d1cf      	bne.n	dbbc <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc1e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	2b00      	cmp	r3, #0
    dc24:	d011      	beq.n	dc4a <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    dc26:	e008      	b.n	dc3a <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    dc28:	687b      	ldr	r3, [r7, #4]
    dc2a:	1c5a      	adds	r2, r3, #1
    dc2c:	607a      	str	r2, [r7, #4]
    dc2e:	f107 0110 	add.w	r1, r7, #16
    dc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dc34:	440a      	add	r2, r1
    dc36:	7812      	ldrb	r2, [r2, #0]
    dc38:	701a      	strb	r2, [r3, #0]
        while (ix--)
    dc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc3c:	1e5a      	subs	r2, r3, #1
    dc3e:	62fa      	str	r2, [r7, #44]	; 0x2c
    dc40:	2b00      	cmp	r3, #0
    dc42:	d1f1      	bne.n	dc28 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    dc44:	687b      	ldr	r3, [r7, #4]
    dc46:	2200      	movs	r2, #0
    dc48:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    dc4c:	4618      	mov	r0, r3
    dc4e:	3730      	adds	r7, #48	; 0x30
    dc50:	46bd      	mov	sp, r7
    dc52:	bc90      	pop	{r4, r7}
    dc54:	4770      	bx	lr

0000dc56 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    dc56:	b480      	push	{r7}
    dc58:	b085      	sub	sp, #20
    dc5a:	af00      	add	r7, sp, #0
    dc5c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    dc5e:	2300      	movs	r3, #0
    dc60:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	2b00      	cmp	r3, #0
    dc66:	d104      	bne.n	dc72 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    dc68:	68fb      	ldr	r3, [r7, #12]
    dc6a:	e009      	b.n	dc80 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    dc6c:	68fb      	ldr	r3, [r7, #12]
    dc6e:	3301      	adds	r3, #1
    dc70:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	1c5a      	adds	r2, r3, #1
    dc76:	607a      	str	r2, [r7, #4]
    dc78:	781b      	ldrb	r3, [r3, #0]
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d1f6      	bne.n	dc6c <simple_strlen+0x16>
    }
    return ui32RetVal;
    dc7e:	68fb      	ldr	r3, [r7, #12]
}
    dc80:	4618      	mov	r0, r3
    dc82:	3714      	adds	r7, #20
    dc84:	46bd      	mov	sp, r7
    dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc8a:	4770      	bx	lr

0000dc8c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    dc8c:	b480      	push	{r7}
    dc8e:	b087      	sub	sp, #28
    dc90:	af00      	add	r7, sp, #0
    dc92:	60f8      	str	r0, [r7, #12]
    dc94:	460b      	mov	r3, r1
    dc96:	607a      	str	r2, [r7, #4]
    dc98:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    dc9a:	2300      	movs	r3, #0
    dc9c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    dc9e:	687b      	ldr	r3, [r7, #4]
    dca0:	2b00      	cmp	r3, #0
    dca2:	dc0c      	bgt.n	dcbe <padbuffer+0x32>
    {
        return i32Cnt;
    dca4:	697b      	ldr	r3, [r7, #20]
    dca6:	e010      	b.n	dcca <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    dca8:	68fb      	ldr	r3, [r7, #12]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d004      	beq.n	dcb8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    dcae:	68fb      	ldr	r3, [r7, #12]
    dcb0:	1c5a      	adds	r2, r3, #1
    dcb2:	60fa      	str	r2, [r7, #12]
    dcb4:	7afa      	ldrb	r2, [r7, #11]
    dcb6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    dcb8:	697b      	ldr	r3, [r7, #20]
    dcba:	3301      	adds	r3, #1
    dcbc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    dcbe:	687b      	ldr	r3, [r7, #4]
    dcc0:	1e5a      	subs	r2, r3, #1
    dcc2:	607a      	str	r2, [r7, #4]
    dcc4:	2b00      	cmp	r3, #0
    dcc6:	d1ef      	bne.n	dca8 <padbuffer+0x1c>
    }

    return i32Cnt;
    dcc8:	697b      	ldr	r3, [r7, #20]
}
    dcca:	4618      	mov	r0, r3
    dccc:	371c      	adds	r7, #28
    dcce:	46bd      	mov	sp, r7
    dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcd4:	4770      	bx	lr
	...

0000dcd8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    dcd8:	b590      	push	{r4, r7, lr}
    dcda:	b08f      	sub	sp, #60	; 0x3c
    dcdc:	af00      	add	r7, sp, #0
    dcde:	ed87 0a03 	vstr	s0, [r7, #12]
    dce2:	60b8      	str	r0, [r7, #8]
    dce4:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    dce6:	68bb      	ldr	r3, [r7, #8]
    dce8:	681b      	ldr	r3, [r3, #0]
    dcea:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dcee:	2b03      	cmp	r3, #3
    dcf0:	dc02      	bgt.n	dcf8 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    dcf2:	f06f 0302 	mvn.w	r3, #2
    dcf6:	e0e7      	b.n	dec8 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    dcf8:	edd7 7a03 	vldr	s15, [r7, #12]
    dcfc:	eef5 7a40 	vcmp.f32	s15, #0.0
    dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd04:	d104      	bne.n	dd10 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    dd06:	68bb      	ldr	r3, [r7, #8]
    dd08:	4a71      	ldr	r2, [pc, #452]	; (ded0 <ftoa+0x1f8>)
    dd0a:	601a      	str	r2, [r3, #0]
        return 3;
    dd0c:	2303      	movs	r3, #3
    dd0e:	e0db      	b.n	dec8 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    dd10:	68bb      	ldr	r3, [r7, #8]
    dd12:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    dd14:	68fb      	ldr	r3, [r7, #12]
    dd16:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    dd18:	693b      	ldr	r3, [r7, #16]
    dd1a:	15db      	asrs	r3, r3, #23
    dd1c:	b2db      	uxtb	r3, r3
    dd1e:	3b7f      	subs	r3, #127	; 0x7f
    dd20:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    dd22:	693b      	ldr	r3, [r7, #16]
    dd24:	f3c3 0316 	ubfx	r3, r3, #0, #23
    dd28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    dd2c:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    dd2e:	2300      	movs	r3, #0
    dd30:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    dd32:	2300      	movs	r3, #0
    dd34:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    dd36:	69fb      	ldr	r3, [r7, #28]
    dd38:	2b1e      	cmp	r3, #30
    dd3a:	dd02      	ble.n	dd42 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    dd3c:	f06f 0301 	mvn.w	r3, #1
    dd40:	e0c2      	b.n	dec8 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    dd42:	69fb      	ldr	r3, [r7, #28]
    dd44:	f113 0f17 	cmn.w	r3, #23
    dd48:	da02      	bge.n	dd50 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    dd4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd4e:	e0bb      	b.n	dec8 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    dd50:	69fb      	ldr	r3, [r7, #28]
    dd52:	2b16      	cmp	r3, #22
    dd54:	dd06      	ble.n	dd64 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    dd56:	69fb      	ldr	r3, [r7, #28]
    dd58:	3b17      	subs	r3, #23
    dd5a:	69ba      	ldr	r2, [r7, #24]
    dd5c:	fa02 f303 	lsl.w	r3, r2, r3
    dd60:	637b      	str	r3, [r7, #52]	; 0x34
    dd62:	e01a      	b.n	dd9a <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    dd64:	69fb      	ldr	r3, [r7, #28]
    dd66:	2b00      	cmp	r3, #0
    dd68:	db0f      	blt.n	dd8a <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    dd6a:	69fb      	ldr	r3, [r7, #28]
    dd6c:	f1c3 0317 	rsb	r3, r3, #23
    dd70:	69ba      	ldr	r2, [r7, #24]
    dd72:	fa42 f303 	asr.w	r3, r2, r3
    dd76:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    dd78:	69fb      	ldr	r3, [r7, #28]
    dd7a:	3301      	adds	r3, #1
    dd7c:	69ba      	ldr	r2, [r7, #24]
    dd7e:	fa02 f303 	lsl.w	r3, r2, r3
    dd82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    dd86:	633b      	str	r3, [r7, #48]	; 0x30
    dd88:	e007      	b.n	dd9a <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    dd8a:	69bb      	ldr	r3, [r7, #24]
    dd8c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    dd90:	69fb      	ldr	r3, [r7, #28]
    dd92:	43db      	mvns	r3, r3
    dd94:	fa42 f303 	asr.w	r3, r2, r3
    dd98:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    dd9a:	693b      	ldr	r3, [r7, #16]
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	da04      	bge.n	ddaa <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    dda0:	68bb      	ldr	r3, [r7, #8]
    dda2:	1c5a      	adds	r2, r3, #1
    dda4:	60ba      	str	r2, [r7, #8]
    dda6:	222d      	movs	r2, #45	; 0x2d
    dda8:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ddaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ddac:	2b00      	cmp	r3, #0
    ddae:	d105      	bne.n	ddbc <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    ddb0:	68bb      	ldr	r3, [r7, #8]
    ddb2:	1c5a      	adds	r2, r3, #1
    ddb4:	60ba      	str	r2, [r7, #8]
    ddb6:	2230      	movs	r2, #48	; 0x30
    ddb8:	701a      	strb	r2, [r3, #0]
    ddba:	e021      	b.n	de00 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    ddbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	dd08      	ble.n	ddd4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ddc4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ddc8:	68ba      	ldr	r2, [r7, #8]
    ddca:	4618      	mov	r0, r3
    ddcc:	4621      	mov	r1, r4
    ddce:	f7ff fe96 	bl	dafe <uint64_to_str>
    ddd2:	e011      	b.n	ddf8 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    ddd4:	68bb      	ldr	r3, [r7, #8]
    ddd6:	1c5a      	adds	r2, r3, #1
    ddd8:	60ba      	str	r2, [r7, #8]
    ddda:	222d      	movs	r2, #45	; 0x2d
    dddc:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ddde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dde0:	425b      	negs	r3, r3
    dde2:	ea4f 74e3 	mov.w	r4, r3, asr #31
    dde6:	68ba      	ldr	r2, [r7, #8]
    dde8:	4618      	mov	r0, r3
    ddea:	4621      	mov	r1, r4
    ddec:	f7ff fe87 	bl	dafe <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ddf0:	e002      	b.n	ddf8 <ftoa+0x120>
        {
            pcBuf++;
    ddf2:	68bb      	ldr	r3, [r7, #8]
    ddf4:	3301      	adds	r3, #1
    ddf6:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ddf8:	68bb      	ldr	r3, [r7, #8]
    ddfa:	781b      	ldrb	r3, [r3, #0]
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d1f8      	bne.n	ddf2 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    de00:	68bb      	ldr	r3, [r7, #8]
    de02:	1c5a      	adds	r2, r3, #1
    de04:	60ba      	str	r2, [r7, #8]
    de06:	222e      	movs	r2, #46	; 0x2e
    de08:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    de0c:	2b00      	cmp	r3, #0
    de0e:	d105      	bne.n	de1c <ftoa+0x144>
    {
        *pcBuf++ = '0';
    de10:	68bb      	ldr	r3, [r7, #8]
    de12:	1c5a      	adds	r2, r3, #1
    de14:	60ba      	str	r2, [r7, #8]
    de16:	2230      	movs	r2, #48	; 0x30
    de18:	701a      	strb	r2, [r3, #0]
    de1a:	e04f      	b.n	debc <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    de1c:	68ba      	ldr	r2, [r7, #8]
    de1e:	6a3b      	ldr	r3, [r7, #32]
    de20:	1ad3      	subs	r3, r2, r3
    de22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    de24:	1ad3      	subs	r3, r2, r3
    de26:	3b01      	subs	r3, #1
    de28:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    de2a:	697a      	ldr	r2, [r7, #20]
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	4293      	cmp	r3, r2
    de30:	bfa8      	it	ge
    de32:	4613      	movge	r3, r2
    de34:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    de36:	2300      	movs	r3, #0
    de38:	62bb      	str	r3, [r7, #40]	; 0x28
    de3a:	e015      	b.n	de68 <ftoa+0x190>
        {
            i32FracPart *= 10;
    de3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    de3e:	4613      	mov	r3, r2
    de40:	009b      	lsls	r3, r3, #2
    de42:	4413      	add	r3, r2
    de44:	005b      	lsls	r3, r3, #1
    de46:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    de4a:	161b      	asrs	r3, r3, #24
    de4c:	b2da      	uxtb	r2, r3
    de4e:	68bb      	ldr	r3, [r7, #8]
    de50:	1c59      	adds	r1, r3, #1
    de52:	60b9      	str	r1, [r7, #8]
    de54:	3230      	adds	r2, #48	; 0x30
    de56:	b2d2      	uxtb	r2, r2
    de58:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    de5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    de5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    de60:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    de64:	3301      	adds	r3, #1
    de66:	62bb      	str	r3, [r7, #40]	; 0x28
    de68:	6aba      	ldr	r2, [r7, #40]	; 0x28
    de6a:	697b      	ldr	r3, [r7, #20]
    de6c:	429a      	cmp	r2, r3
    de6e:	dbe5      	blt.n	de3c <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    de70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    de72:	4613      	mov	r3, r2
    de74:	009b      	lsls	r3, r3, #2
    de76:	4413      	add	r3, r2
    de78:	005b      	lsls	r3, r3, #1
    de7a:	161b      	asrs	r3, r3, #24
    de7c:	2b04      	cmp	r3, #4
    de7e:	dd1d      	ble.n	debc <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    de80:	68bb      	ldr	r3, [r7, #8]
    de82:	3b01      	subs	r3, #1
    de84:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    de86:	e015      	b.n	deb4 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de8a:	781b      	ldrb	r3, [r3, #0]
    de8c:	2b2e      	cmp	r3, #46	; 0x2e
    de8e:	d00e      	beq.n	deae <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de92:	781b      	ldrb	r3, [r3, #0]
    de94:	2b39      	cmp	r3, #57	; 0x39
    de96:	d103      	bne.n	dea0 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    de98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    de9a:	2230      	movs	r2, #48	; 0x30
    de9c:	701a      	strb	r2, [r3, #0]
    de9e:	e006      	b.n	deae <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	3301      	adds	r3, #1
    dea6:	b2da      	uxtb	r2, r3
    dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    deaa:	701a      	strb	r2, [r3, #0]
                    break;
    deac:	e006      	b.n	debc <ftoa+0x1e4>
                }
                pcBuftmp--;
    deae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    deb0:	3b01      	subs	r3, #1
    deb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    deb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    deb6:	6a3b      	ldr	r3, [r7, #32]
    deb8:	429a      	cmp	r2, r3
    deba:	d2e5      	bcs.n	de88 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    debc:	68bb      	ldr	r3, [r7, #8]
    debe:	2200      	movs	r2, #0
    dec0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    dec2:	68ba      	ldr	r2, [r7, #8]
    dec4:	6a3b      	ldr	r3, [r7, #32]
    dec6:	1ad3      	subs	r3, r2, r3
} // ftoa()
    dec8:	4618      	mov	r0, r3
    deca:	373c      	adds	r7, #60	; 0x3c
    decc:	46bd      	mov	sp, r7
    dece:	bd90      	pop	{r4, r7, pc}
    ded0:	00302e30 	.word	0x00302e30

0000ded4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ded4:	b590      	push	{r4, r7, lr}
    ded6:	b097      	sub	sp, #92	; 0x5c
    ded8:	af00      	add	r7, sp, #0
    deda:	60f8      	str	r0, [r7, #12]
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    dee0:	2300      	movs	r3, #0
    dee2:	647b      	str	r3, [r7, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    dee4:	2300      	movs	r3, #0
    dee6:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    dee8:	e2e7      	b.n	e4ba <am_util_stdio_vsprintf+0x5e6>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    deea:	2306      	movs	r3, #6
    deec:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( *pcFmt != '%' )
    deee:	68bb      	ldr	r3, [r7, #8]
    def0:	781b      	ldrb	r3, [r3, #0]
    def2:	2b25      	cmp	r3, #37	; 0x25
    def4:	d01f      	beq.n	df36 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    def6:	68fb      	ldr	r3, [r7, #12]
    def8:	2b00      	cmp	r3, #0
    defa:	d015      	beq.n	df28 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    defc:	68bb      	ldr	r3, [r7, #8]
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	2b0a      	cmp	r3, #10
    df02:	d10b      	bne.n	df1c <am_util_stdio_vsprintf+0x48>
    df04:	4bb1      	ldr	r3, [pc, #708]	; (e1cc <am_util_stdio_vsprintf+0x2f8>)
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	2b00      	cmp	r3, #0
    df0a:	d007      	beq.n	df1c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    df0c:	68fb      	ldr	r3, [r7, #12]
    df0e:	1c5a      	adds	r2, r3, #1
    df10:	60fa      	str	r2, [r7, #12]
    df12:	220d      	movs	r2, #13
    df14:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    df16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    df18:	3301      	adds	r3, #1
    df1a:	647b      	str	r3, [r7, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    df1c:	68fb      	ldr	r3, [r7, #12]
    df1e:	1c5a      	adds	r2, r3, #1
    df20:	60fa      	str	r2, [r7, #12]
    df22:	68ba      	ldr	r2, [r7, #8]
    df24:	7812      	ldrb	r2, [r2, #0]
    df26:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    df28:	68bb      	ldr	r3, [r7, #8]
    df2a:	3301      	adds	r3, #1
    df2c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    df2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    df30:	3301      	adds	r3, #1
    df32:	647b      	str	r3, [r7, #68]	; 0x44
            continue;
    df34:	e2c1      	b.n	e4ba <am_util_stdio_vsprintf+0x5e6>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    df36:	68bb      	ldr	r3, [r7, #8]
    df38:	3301      	adds	r3, #1
    df3a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    df3c:	2300      	movs	r3, #0
    df3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    df42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    df46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    df4a:	2320      	movs	r3, #32
    df4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if ( *pcFmt == '0' )
    df50:	68bb      	ldr	r3, [r7, #8]
    df52:	781b      	ldrb	r3, [r3, #0]
    df54:	2b30      	cmp	r3, #48	; 0x30
    df56:	d105      	bne.n	df64 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    df58:	2330      	movs	r3, #48	; 0x30
    df5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            ++pcFmt;
    df5e:	68bb      	ldr	r3, [r7, #8]
    df60:	3301      	adds	r3, #1
    df62:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    df64:	f107 0314 	add.w	r3, r7, #20
    df68:	4619      	mov	r1, r3
    df6a:	68b8      	ldr	r0, [r7, #8]
    df6c:	f7ff fd81 	bl	da72 <decstr_to_int>
    df70:	4603      	mov	r3, r0
    df72:	643b      	str	r3, [r7, #64]	; 0x40
        pcFmt += ui32NumChars;
    df74:	697b      	ldr	r3, [r7, #20]
    df76:	68ba      	ldr	r2, [r7, #8]
    df78:	4413      	add	r3, r2
    df7a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    df7c:	68bb      	ldr	r3, [r7, #8]
    df7e:	781b      	ldrb	r3, [r3, #0]
    df80:	2b73      	cmp	r3, #115	; 0x73
    df82:	d005      	beq.n	df90 <am_util_stdio_vsprintf+0xbc>
    df84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df86:	2b00      	cmp	r3, #0
    df88:	da02      	bge.n	df90 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    df8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    df8c:	425b      	negs	r3, r3
    df8e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    df90:	68bb      	ldr	r3, [r7, #8]
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	2b2e      	cmp	r3, #46	; 0x2e
    df96:	d10e      	bne.n	dfb6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    df98:	68bb      	ldr	r3, [r7, #8]
    df9a:	3301      	adds	r3, #1
    df9c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    df9e:	f107 0314 	add.w	r3, r7, #20
    dfa2:	4619      	mov	r1, r3
    dfa4:	68b8      	ldr	r0, [r7, #8]
    dfa6:	f7ff fd64 	bl	da72 <decstr_to_int>
    dfaa:	4603      	mov	r3, r0
    dfac:	63bb      	str	r3, [r7, #56]	; 0x38
            pcFmt += ui32NumChars;
    dfae:	697b      	ldr	r3, [r7, #20]
    dfb0:	68ba      	ldr	r2, [r7, #8]
    dfb2:	4413      	add	r3, r2
    dfb4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    dfb6:	68bb      	ldr	r3, [r7, #8]
    dfb8:	781b      	ldrb	r3, [r3, #0]
    dfba:	2b6c      	cmp	r3, #108	; 0x6c
    dfbc:	d10c      	bne.n	dfd8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    dfbe:	68bb      	ldr	r3, [r7, #8]
    dfc0:	3301      	adds	r3, #1
    dfc2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    dfc4:	68bb      	ldr	r3, [r7, #8]
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	2b6c      	cmp	r3, #108	; 0x6c
    dfca:	d105      	bne.n	dfd8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    dfcc:	68bb      	ldr	r3, [r7, #8]
    dfce:	3301      	adds	r3, #1
    dfd0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    dfd2:	2301      	movs	r3, #1
    dfd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    dfd8:	68bb      	ldr	r3, [r7, #8]
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	3b46      	subs	r3, #70	; 0x46
    dfde:	2b32      	cmp	r3, #50	; 0x32
    dfe0:	f200 8258 	bhi.w	e494 <am_util_stdio_vsprintf+0x5c0>
    dfe4:	a201      	add	r2, pc, #4	; (adr r2, dfec <am_util_stdio_vsprintf+0x118>)
    dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dfea:	bf00      	nop
    dfec:	0000e41b 	.word	0x0000e41b
    dff0:	0000e495 	.word	0x0000e495
    dff4:	0000e495 	.word	0x0000e495
    dff8:	0000e495 	.word	0x0000e495
    dffc:	0000e495 	.word	0x0000e495
    e000:	0000e495 	.word	0x0000e495
    e004:	0000e495 	.word	0x0000e495
    e008:	0000e495 	.word	0x0000e495
    e00c:	0000e495 	.word	0x0000e495
    e010:	0000e495 	.word	0x0000e495
    e014:	0000e495 	.word	0x0000e495
    e018:	0000e495 	.word	0x0000e495
    e01c:	0000e495 	.word	0x0000e495
    e020:	0000e495 	.word	0x0000e495
    e024:	0000e495 	.word	0x0000e495
    e028:	0000e495 	.word	0x0000e495
    e02c:	0000e495 	.word	0x0000e495
    e030:	0000e495 	.word	0x0000e495
    e034:	0000e1af 	.word	0x0000e1af
    e038:	0000e495 	.word	0x0000e495
    e03c:	0000e495 	.word	0x0000e495
    e040:	0000e495 	.word	0x0000e495
    e044:	0000e495 	.word	0x0000e495
    e048:	0000e495 	.word	0x0000e495
    e04c:	0000e495 	.word	0x0000e495
    e050:	0000e495 	.word	0x0000e495
    e054:	0000e495 	.word	0x0000e495
    e058:	0000e495 	.word	0x0000e495
    e05c:	0000e495 	.word	0x0000e495
    e060:	0000e0b9 	.word	0x0000e0b9
    e064:	0000e2e1 	.word	0x0000e2e1
    e068:	0000e495 	.word	0x0000e495
    e06c:	0000e41b 	.word	0x0000e41b
    e070:	0000e495 	.word	0x0000e495
    e074:	0000e495 	.word	0x0000e495
    e078:	0000e2e1 	.word	0x0000e2e1
    e07c:	0000e495 	.word	0x0000e495
    e080:	0000e495 	.word	0x0000e495
    e084:	0000e495 	.word	0x0000e495
    e088:	0000e495 	.word	0x0000e495
    e08c:	0000e495 	.word	0x0000e495
    e090:	0000e495 	.word	0x0000e495
    e094:	0000e495 	.word	0x0000e495
    e098:	0000e495 	.word	0x0000e495
    e09c:	0000e495 	.word	0x0000e495
    e0a0:	0000e0db 	.word	0x0000e0db
    e0a4:	0000e495 	.word	0x0000e495
    e0a8:	0000e24d 	.word	0x0000e24d
    e0ac:	0000e495 	.word	0x0000e495
    e0b0:	0000e495 	.word	0x0000e495
    e0b4:	0000e1a9 	.word	0x0000e1a9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    e0b8:	687b      	ldr	r3, [r7, #4]
    e0ba:	1d1a      	adds	r2, r3, #4
    e0bc:	607a      	str	r2, [r7, #4]
    e0be:	681b      	ldr	r3, [r3, #0]
    e0c0:	77fb      	strb	r3, [r7, #31]

                if ( pcBuf )
    e0c2:	68fb      	ldr	r3, [r7, #12]
    e0c4:	2b00      	cmp	r3, #0
    e0c6:	d004      	beq.n	e0d2 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    e0c8:	68fb      	ldr	r3, [r7, #12]
    e0ca:	1c5a      	adds	r2, r3, #1
    e0cc:	60fa      	str	r2, [r7, #12]
    e0ce:	7ffa      	ldrb	r2, [r7, #31]
    e0d0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e0d4:	3301      	adds	r3, #1
    e0d6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e0d8:	e1ec      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>

            case 's':
                pcStr = va_arg(pArgs, char *);
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	1d1a      	adds	r2, r3, #4
    e0de:	607a      	str	r2, [r7, #4]
    e0e0:	681b      	ldr	r3, [r3, #0]
    e0e2:	657b      	str	r3, [r7, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    e0e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
    e0e6:	f7ff fdb6 	bl	dc56 <simple_strlen>
    e0ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                if ( iWidth > 0 )
    e0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0ee:	2b00      	cmp	r3, #0
    e0f0:	dd2e      	ble.n	e150 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    e0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e0f6:	429a      	cmp	r2, r3
    e0f8:	d22a      	bcs.n	e150 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    e0fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e0fe:	1ad3      	subs	r3, r2, r3
    e100:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e108:	4619      	mov	r1, r3
    e10a:	68f8      	ldr	r0, [r7, #12]
    e10c:	f7ff fdbe 	bl	dc8c <padbuffer>
    e110:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    e112:	68fb      	ldr	r3, [r7, #12]
    e114:	2b00      	cmp	r3, #0
    e116:	d001      	beq.n	e11c <am_util_stdio_vsprintf+0x248>
    e118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e11a:	e000      	b.n	e11e <am_util_stdio_vsprintf+0x24a>
    e11c:	2300      	movs	r3, #0
    e11e:	68fa      	ldr	r2, [r7, #12]
    e120:	4413      	add	r3, r2
    e122:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    e124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e128:	4413      	add	r3, r2
    e12a:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    e12c:	2300      	movs	r3, #0
    e12e:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    e130:	e00e      	b.n	e150 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    e132:	68fb      	ldr	r3, [r7, #12]
    e134:	2b00      	cmp	r3, #0
    e136:	d005      	beq.n	e144 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    e138:	68fb      	ldr	r3, [r7, #12]
    e13a:	1c5a      	adds	r2, r3, #1
    e13c:	60fa      	str	r2, [r7, #12]
    e13e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e140:	7812      	ldrb	r2, [r2, #0]
    e142:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    e144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e146:	3301      	adds	r3, #1
    e148:	657b      	str	r3, [r7, #84]	; 0x54
                    ++ui32CharCnt;
    e14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e14c:	3301      	adds	r3, #1
    e14e:	647b      	str	r3, [r7, #68]	; 0x44
                while (*pcStr != 0x0)
    e150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e152:	781b      	ldrb	r3, [r3, #0]
    e154:	2b00      	cmp	r3, #0
    e156:	d1ec      	bne.n	e132 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    e158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e15a:	2b00      	cmp	r3, #0
    e15c:	f000 81a7 	beq.w	e4ae <am_util_stdio_vsprintf+0x5da>
                {
                    iWidth = -iWidth;
    e160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e162:	425b      	negs	r3, r3
    e164:	643b      	str	r3, [r7, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    e166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e16a:	429a      	cmp	r2, r3
    e16c:	f080 819f 	bcs.w	e4ae <am_util_stdio_vsprintf+0x5da>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    e170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e174:	1ad3      	subs	r3, r2, r3
    e176:	643b      	str	r3, [r7, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e17c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e17e:	4619      	mov	r1, r3
    e180:	68f8      	ldr	r0, [r7, #12]
    e182:	f7ff fd83 	bl	dc8c <padbuffer>
    e186:	6438      	str	r0, [r7, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    e188:	68fb      	ldr	r3, [r7, #12]
    e18a:	2b00      	cmp	r3, #0
    e18c:	d001      	beq.n	e192 <am_util_stdio_vsprintf+0x2be>
    e18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e190:	e000      	b.n	e194 <am_util_stdio_vsprintf+0x2c0>
    e192:	2300      	movs	r3, #0
    e194:	68fa      	ldr	r2, [r7, #12]
    e196:	4413      	add	r3, r2
    e198:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    e19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e19c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e19e:	4413      	add	r3, r2
    e1a0:	647b      	str	r3, [r7, #68]	; 0x44
                        iWidth = 0;
    e1a2:	2300      	movs	r3, #0
    e1a4:	643b      	str	r3, [r7, #64]	; 0x40
                    }
                }
                break;
    e1a6:	e182      	b.n	e4ae <am_util_stdio_vsprintf+0x5da>

            case 'x':
                bLower = true;
    e1a8:	2301      	movs	r3, #1
    e1aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e1ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d00c      	beq.n	e1d0 <am_util_stdio_vsprintf+0x2fc>
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	3307      	adds	r3, #7
    e1ba:	f023 0307 	bic.w	r3, r3, #7
    e1be:	f103 0208 	add.w	r2, r3, #8
    e1c2:	607a      	str	r2, [r7, #4]
    e1c4:	e9d3 3400 	ldrd	r3, r4, [r3]
    e1c8:	e008      	b.n	e1dc <am_util_stdio_vsprintf+0x308>
    e1ca:	bf00      	nop
    e1cc:	1000c150 	.word	0x1000c150
                                      va_arg(pArgs, uint32_t);
    e1d0:	687b      	ldr	r3, [r7, #4]
    e1d2:	1d1a      	adds	r2, r3, #4
    e1d4:	607a      	str	r2, [r7, #4]
    e1d6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e1d8:	f04f 0400 	mov.w	r4, #0
    e1dc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    e1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	d01e      	beq.n	e224 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    e1e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e1ea:	f7ff fc1a 	bl	da22 <ndigits_in_hex>
    e1ee:	4602      	mov	r2, r0
    e1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e1f2:	1a9b      	subs	r3, r3, r2
    e1f4:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e1f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e1fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e1fc:	4619      	mov	r1, r3
    e1fe:	68f8      	ldr	r0, [r7, #12]
    e200:	f7ff fd44 	bl	dc8c <padbuffer>
    e204:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e206:	68fb      	ldr	r3, [r7, #12]
    e208:	2b00      	cmp	r3, #0
    e20a:	d001      	beq.n	e210 <am_util_stdio_vsprintf+0x33c>
    e20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e20e:	e000      	b.n	e212 <am_util_stdio_vsprintf+0x33e>
    e210:	2300      	movs	r3, #0
    e212:	68fa      	ldr	r2, [r7, #12]
    e214:	4413      	add	r3, r2
    e216:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e21a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e21c:	4413      	add	r3, r2
    e21e:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e220:	2300      	movs	r3, #0
    e222:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    e224:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    e228:	68fa      	ldr	r2, [r7, #12]
    e22a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e22e:	f7ff fcae 	bl	db8e <uint64_to_hexstr>
    e232:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e234:	68fb      	ldr	r3, [r7, #12]
    e236:	2b00      	cmp	r3, #0
    e238:	d003      	beq.n	e242 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    e23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e23c:	68fa      	ldr	r2, [r7, #12]
    e23e:	4413      	add	r3, r2
    e240:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e246:	4413      	add	r3, r2
    e248:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e24a:	e133      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e24c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e250:	2b00      	cmp	r3, #0
    e252:	d009      	beq.n	e268 <am_util_stdio_vsprintf+0x394>
    e254:	687b      	ldr	r3, [r7, #4]
    e256:	3307      	adds	r3, #7
    e258:	f023 0307 	bic.w	r3, r3, #7
    e25c:	f103 0208 	add.w	r2, r3, #8
    e260:	607a      	str	r2, [r7, #4]
    e262:	e9d3 3400 	ldrd	r3, r4, [r3]
    e266:	e005      	b.n	e274 <am_util_stdio_vsprintf+0x3a0>
                                      va_arg(pArgs, uint32_t);
    e268:	687b      	ldr	r3, [r7, #4]
    e26a:	1d1a      	adds	r2, r3, #4
    e26c:	607a      	str	r2, [r7, #4]
    e26e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    e270:	f04f 0400 	mov.w	r4, #0
    e274:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

                if ( iWidth )
    e278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e27a:	2b00      	cmp	r3, #0
    e27c:	d01e      	beq.n	e2bc <am_util_stdio_vsprintf+0x3e8>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    e27e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e282:	f7ff fb90 	bl	d9a6 <ndigits_in_u64>
    e286:	4602      	mov	r2, r0
    e288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e28a:	1a9b      	subs	r3, r3, r2
    e28c:	643b      	str	r3, [r7, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e28e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e294:	4619      	mov	r1, r3
    e296:	68f8      	ldr	r0, [r7, #12]
    e298:	f7ff fcf8 	bl	dc8c <padbuffer>
    e29c:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e29e:	68fb      	ldr	r3, [r7, #12]
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d001      	beq.n	e2a8 <am_util_stdio_vsprintf+0x3d4>
    e2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e2a6:	e000      	b.n	e2aa <am_util_stdio_vsprintf+0x3d6>
    e2a8:	2300      	movs	r3, #0
    e2aa:	68fa      	ldr	r2, [r7, #12]
    e2ac:	4413      	add	r3, r2
    e2ae:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e2b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e2b4:	4413      	add	r3, r2
    e2b6:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e2b8:	2300      	movs	r3, #0
    e2ba:	643b      	str	r3, [r7, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e2bc:	68fa      	ldr	r2, [r7, #12]
    e2be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e2c2:	f7ff fc1c 	bl	dafe <uint64_to_str>
    e2c6:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e2c8:	68fb      	ldr	r3, [r7, #12]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d003      	beq.n	e2d6 <am_util_stdio_vsprintf+0x402>
                {
                    pcBuf += iVal;
    e2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e2d0:	68fa      	ldr	r2, [r7, #12]
    e2d2:	4413      	add	r3, r2
    e2d4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e2d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e2da:	4413      	add	r3, r2
    e2dc:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e2de:	e0e9      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e2e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d009      	beq.n	e2fc <am_util_stdio_vsprintf+0x428>
    e2e8:	687b      	ldr	r3, [r7, #4]
    e2ea:	3307      	adds	r3, #7
    e2ec:	f023 0307 	bic.w	r3, r3, #7
    e2f0:	f103 0208 	add.w	r2, r3, #8
    e2f4:	607a      	str	r2, [r7, #4]
    e2f6:	e9d3 3400 	ldrd	r3, r4, [r3]
    e2fa:	e005      	b.n	e308 <am_util_stdio_vsprintf+0x434>
                                     va_arg(pArgs, int32_t);
    e2fc:	687b      	ldr	r3, [r7, #4]
    e2fe:	1d1a      	adds	r2, r3, #4
    e300:	607a      	str	r2, [r7, #4]
    e302:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    e304:	ea4f 74e3 	mov.w	r4, r3, asr #31
    e308:	e9c7 3408 	strd	r3, r4, [r7, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    e30c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e310:	2b00      	cmp	r3, #0
    e312:	f174 0300 	sbcs.w	r3, r4, #0
    e316:	da0a      	bge.n	e32e <am_util_stdio_vsprintf+0x45a>
                {
                    ui64Val = -i64Val;          // Get absolute value
    e318:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e31c:	425b      	negs	r3, r3
    e31e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    e322:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = true;
    e326:	2301      	movs	r3, #1
    e328:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    e32c:	e006      	b.n	e33c <am_util_stdio_vsprintf+0x468>
                }
                else
                {
                    ui64Val = i64Val;
    e32e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    e332:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
                    bNeg = false;
    e336:	2300      	movs	r3, #0
    e338:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }

                if ( iWidth )
    e33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e33e:	2b00      	cmp	r3, #0
    e340:	d04a      	beq.n	e3d8 <am_util_stdio_vsprintf+0x504>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    e342:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    e346:	4618      	mov	r0, r3
    e348:	4621      	mov	r1, r4
    e34a:	f7ff fb4d 	bl	d9e8 <ndigits_in_i64>
    e34e:	4602      	mov	r2, r0
    e350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e352:	1a9b      	subs	r3, r3, r2
    e354:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg )
    e356:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e35a:	2b00      	cmp	r3, #0
    e35c:	d011      	beq.n	e382 <am_util_stdio_vsprintf+0x4ae>
                    {
                        --iWidth;
    e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e360:	3b01      	subs	r3, #1
    e362:	643b      	str	r3, [r7, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    e364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e368:	2b30      	cmp	r3, #48	; 0x30
    e36a:	d10a      	bne.n	e382 <am_util_stdio_vsprintf+0x4ae>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    e36c:	68fb      	ldr	r3, [r7, #12]
    e36e:	2b00      	cmp	r3, #0
    e370:	d004      	beq.n	e37c <am_util_stdio_vsprintf+0x4a8>
                            {
                                *pcBuf++ = '-';
    e372:	68fb      	ldr	r3, [r7, #12]
    e374:	1c5a      	adds	r2, r3, #1
    e376:	60fa      	str	r2, [r7, #12]
    e378:	222d      	movs	r2, #45	; 0x2d
    e37a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    e37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e37e:	3301      	adds	r3, #1
    e380:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    e382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    e388:	4619      	mov	r1, r3
    e38a:	68f8      	ldr	r0, [r7, #12]
    e38c:	f7ff fc7e 	bl	dc8c <padbuffer>
    e390:	6438      	str	r0, [r7, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    e392:	68fb      	ldr	r3, [r7, #12]
    e394:	2b00      	cmp	r3, #0
    e396:	d001      	beq.n	e39c <am_util_stdio_vsprintf+0x4c8>
    e398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e39a:	e000      	b.n	e39e <am_util_stdio_vsprintf+0x4ca>
    e39c:	2300      	movs	r3, #0
    e39e:	68fa      	ldr	r2, [r7, #12]
    e3a0:	4413      	add	r3, r2
    e3a2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    e3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e3a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e3a8:	4413      	add	r3, r2
    e3aa:	647b      	str	r3, [r7, #68]	; 0x44
                    iWidth = 0;
    e3ac:	2300      	movs	r3, #0
    e3ae:	643b      	str	r3, [r7, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    e3b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d01e      	beq.n	e3f6 <am_util_stdio_vsprintf+0x522>
    e3b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e3bc:	2b20      	cmp	r3, #32
    e3be:	d11a      	bne.n	e3f6 <am_util_stdio_vsprintf+0x522>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    e3c0:	68fb      	ldr	r3, [r7, #12]
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d004      	beq.n	e3d0 <am_util_stdio_vsprintf+0x4fc>
                        {
                            *pcBuf++ = '-';
    e3c6:	68fb      	ldr	r3, [r7, #12]
    e3c8:	1c5a      	adds	r2, r3, #1
    e3ca:	60fa      	str	r2, [r7, #12]
    e3cc:	222d      	movs	r2, #45	; 0x2d
    e3ce:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    e3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e3d2:	3301      	adds	r3, #1
    e3d4:	647b      	str	r3, [r7, #68]	; 0x44
    e3d6:	e00e      	b.n	e3f6 <am_util_stdio_vsprintf+0x522>
                    }
                }
                else
                {
                    if ( bNeg )
    e3d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d00a      	beq.n	e3f6 <am_util_stdio_vsprintf+0x522>
                    {
                        if ( pcBuf )
    e3e0:	68fb      	ldr	r3, [r7, #12]
    e3e2:	2b00      	cmp	r3, #0
    e3e4:	d004      	beq.n	e3f0 <am_util_stdio_vsprintf+0x51c>
                        {
                            *pcBuf++ = '-';
    e3e6:	68fb      	ldr	r3, [r7, #12]
    e3e8:	1c5a      	adds	r2, r3, #1
    e3ea:	60fa      	str	r2, [r7, #12]
    e3ec:	222d      	movs	r2, #45	; 0x2d
    e3ee:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    e3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e3f2:	3301      	adds	r3, #1
    e3f4:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    e3f6:	68fa      	ldr	r2, [r7, #12]
    e3f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    e3fc:	f7ff fb7f 	bl	dafe <uint64_to_str>
    e400:	63f8      	str	r0, [r7, #60]	; 0x3c

                if ( pcBuf )
    e402:	68fb      	ldr	r3, [r7, #12]
    e404:	2b00      	cmp	r3, #0
    e406:	d003      	beq.n	e410 <am_util_stdio_vsprintf+0x53c>
                {
                    pcBuf += iVal;
    e408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e40a:	68fa      	ldr	r2, [r7, #12]
    e40c:	4413      	add	r3, r2
    e40e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    e410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e414:	4413      	add	r3, r2
    e416:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e418:	e04c      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>


            case 'f':
            case 'F':
                if ( pcBuf )
    e41a:	68fb      	ldr	r3, [r7, #12]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d048      	beq.n	e4b2 <am_util_stdio_vsprintf+0x5de>
                {
                    float fValue = va_arg(pArgs, double);
    e420:	687b      	ldr	r3, [r7, #4]
    e422:	3307      	adds	r3, #7
    e424:	f023 0307 	bic.w	r3, r3, #7
    e428:	f103 0208 	add.w	r2, r3, #8
    e42c:	607a      	str	r2, [r7, #4]
    e42e:	e9d3 3400 	ldrd	r3, r4, [r3]
    e432:	4618      	mov	r0, r3
    e434:	4621      	mov	r1, r4
    e436:	f7fe f8b9 	bl	c5ac <__aeabi_d2f>
    e43a:	4603      	mov	r3, r0
    e43c:	61bb      	str	r3, [r7, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    e43e:	68fb      	ldr	r3, [r7, #12]
    e440:	2214      	movs	r2, #20
    e442:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    e444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e446:	68f8      	ldr	r0, [r7, #12]
    e448:	ed97 0a06 	vldr	s0, [r7, #24]
    e44c:	f7ff fc44 	bl	dcd8 <ftoa>
    e450:	63f8      	str	r0, [r7, #60]	; 0x3c
                    if ( iVal < 0 )
    e452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e454:	2b00      	cmp	r3, #0
    e456:	da14      	bge.n	e482 <am_util_stdio_vsprintf+0x5ae>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    e458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e45e:	d102      	bne.n	e466 <am_util_stdio_vsprintf+0x592>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    e460:	4b1e      	ldr	r3, [pc, #120]	; (e4dc <am_util_stdio_vsprintf+0x608>)
    e462:	633b      	str	r3, [r7, #48]	; 0x30
    e464:	e008      	b.n	e478 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e468:	f113 0f02 	cmn.w	r3, #2
    e46c:	d102      	bne.n	e474 <am_util_stdio_vsprintf+0x5a0>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    e46e:	4b1c      	ldr	r3, [pc, #112]	; (e4e0 <am_util_stdio_vsprintf+0x60c>)
    e470:	633b      	str	r3, [r7, #48]	; 0x30
    e472:	e001      	b.n	e478 <am_util_stdio_vsprintf+0x5a4>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    e474:	4b1b      	ldr	r3, [pc, #108]	; (e4e4 <am_util_stdio_vsprintf+0x610>)
    e476:	633b      	str	r3, [r7, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    e478:	68fb      	ldr	r3, [r7, #12]
    e47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e47c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    e47e:	2303      	movs	r3, #3
    e480:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    e482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e486:	4413      	add	r3, r2
    e488:	647b      	str	r3, [r7, #68]	; 0x44
                    pcBuf += iVal;
    e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e48c:	68fa      	ldr	r2, [r7, #12]
    e48e:	4413      	add	r3, r2
    e490:	60fb      	str	r3, [r7, #12]
                }
                break;
    e492:	e00e      	b.n	e4b2 <am_util_stdio_vsprintf+0x5de>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    e494:	68fb      	ldr	r3, [r7, #12]
    e496:	2b00      	cmp	r3, #0
    e498:	d005      	beq.n	e4a6 <am_util_stdio_vsprintf+0x5d2>
                {
                    *pcBuf++ = *pcFmt;
    e49a:	68fb      	ldr	r3, [r7, #12]
    e49c:	1c5a      	adds	r2, r3, #1
    e49e:	60fa      	str	r2, [r7, #12]
    e4a0:	68ba      	ldr	r2, [r7, #8]
    e4a2:	7812      	ldrb	r2, [r2, #0]
    e4a4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    e4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e4a8:	3301      	adds	r3, #1
    e4aa:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    e4ac:	e002      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>
                break;
    e4ae:	bf00      	nop
    e4b0:	e000      	b.n	e4b4 <am_util_stdio_vsprintf+0x5e0>
                break;
    e4b2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    e4b4:	68bb      	ldr	r3, [r7, #8]
    e4b6:	3301      	adds	r3, #1
    e4b8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    e4ba:	68bb      	ldr	r3, [r7, #8]
    e4bc:	781b      	ldrb	r3, [r3, #0]
    e4be:	2b00      	cmp	r3, #0
    e4c0:	f47f ad13 	bne.w	deea <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    e4c4:	68fb      	ldr	r3, [r7, #12]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d002      	beq.n	e4d0 <am_util_stdio_vsprintf+0x5fc>
    {
        *pcBuf = 0x0;
    e4ca:	68fb      	ldr	r3, [r7, #12]
    e4cc:	2200      	movs	r2, #0
    e4ce:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    e4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    e4d2:	4618      	mov	r0, r3
    e4d4:	375c      	adds	r7, #92	; 0x5c
    e4d6:	46bd      	mov	sp, r7
    e4d8:	bd90      	pop	{r4, r7, pc}
    e4da:	bf00      	nop
    e4dc:	00302e30 	.word	0x00302e30
    e4e0:	00232e23 	.word	0x00232e23
    e4e4:	003f2e3f 	.word	0x003f2e3f

0000e4e8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    e4e8:	b40f      	push	{r0, r1, r2, r3}
    e4ea:	b580      	push	{r7, lr}
    e4ec:	b082      	sub	sp, #8
    e4ee:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    e4f0:	4b0d      	ldr	r3, [pc, #52]	; (e528 <am_util_stdio_printf+0x40>)
    e4f2:	681b      	ldr	r3, [r3, #0]
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d101      	bne.n	e4fc <am_util_stdio_printf+0x14>
    {
        return 0;
    e4f8:	2300      	movs	r3, #0
    e4fa:	e00d      	b.n	e518 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    e4fc:	f107 0314 	add.w	r3, r7, #20
    e500:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    e502:	683a      	ldr	r2, [r7, #0]
    e504:	6939      	ldr	r1, [r7, #16]
    e506:	4809      	ldr	r0, [pc, #36]	; (e52c <am_util_stdio_printf+0x44>)
    e508:	f7ff fce4 	bl	ded4 <am_util_stdio_vsprintf>
    e50c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    e50e:	4b06      	ldr	r3, [pc, #24]	; (e528 <am_util_stdio_printf+0x40>)
    e510:	681b      	ldr	r3, [r3, #0]
    e512:	4806      	ldr	r0, [pc, #24]	; (e52c <am_util_stdio_printf+0x44>)
    e514:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    e516:	687b      	ldr	r3, [r7, #4]
}
    e518:	4618      	mov	r0, r3
    e51a:	3708      	adds	r7, #8
    e51c:	46bd      	mov	sp, r7
    e51e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    e522:	b004      	add	sp, #16
    e524:	4770      	bx	lr
    e526:	bf00      	nop
    e528:	1000c184 	.word	0x1000c184
    e52c:	1000c050 	.word	0x1000c050

0000e530 <am_app_utils_ring_buffer_init>:
//! @return
//
//*****************************************************************************
void
am_app_utils_ring_buffer_init(am_app_utils_ring_buffer_t* ring_buffs, am_app_utils_ringbuff_setup_t setup)
{
    e530:	b480      	push	{r7}
    e532:	b085      	sub	sp, #20
    e534:	af00      	add	r7, sp, #0
    e536:	60f8      	str	r0, [r7, #12]
    e538:	4638      	mov	r0, r7
    e53a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
    e53e:	683b      	ldr	r3, [r7, #0]
    e540:	461a      	mov	r2, r3
    e542:	4613      	mov	r3, r2
    e544:	009b      	lsls	r3, r3, #2
    e546:	4413      	add	r3, r2
    e548:	009b      	lsls	r3, r3, #2
    e54a:	461a      	mov	r2, r3
    e54c:	68fb      	ldr	r3, [r7, #12]
    e54e:	4413      	add	r3, r2
    e550:	2200      	movs	r2, #0
    e552:	609a      	str	r2, [r3, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
    e554:	683b      	ldr	r3, [r7, #0]
    e556:	461a      	mov	r2, r3
    e558:	4613      	mov	r3, r2
    e55a:	009b      	lsls	r3, r3, #2
    e55c:	4413      	add	r3, r2
    e55e:	009b      	lsls	r3, r3, #2
    e560:	461a      	mov	r2, r3
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	4413      	add	r3, r2
    e566:	2200      	movs	r2, #0
    e568:	605a      	str	r2, [r3, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
    e56a:	683b      	ldr	r3, [r7, #0]
    e56c:	461a      	mov	r2, r3
    e56e:	4613      	mov	r3, r2
    e570:	009b      	lsls	r3, r3, #2
    e572:	4413      	add	r3, r2
    e574:	009b      	lsls	r3, r3, #2
    e576:	461a      	mov	r2, r3
    e578:	68fb      	ldr	r3, [r7, #12]
    e57a:	4413      	add	r3, r2
    e57c:	2200      	movs	r2, #0
    e57e:	60da      	str	r2, [r3, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
    e580:	683b      	ldr	r3, [r7, #0]
    e582:	461a      	mov	r2, r3
    e584:	4613      	mov	r3, r2
    e586:	009b      	lsls	r3, r3, #2
    e588:	4413      	add	r3, r2
    e58a:	009b      	lsls	r3, r3, #2
    e58c:	461a      	mov	r2, r3
    e58e:	68fb      	ldr	r3, [r7, #12]
    e590:	4413      	add	r3, r2
    e592:	68ba      	ldr	r2, [r7, #8]
    e594:	611a      	str	r2, [r3, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
    e596:	683b      	ldr	r3, [r7, #0]
    e598:	461a      	mov	r2, r3
    e59a:	4613      	mov	r3, r2
    e59c:	009b      	lsls	r3, r3, #2
    e59e:	4413      	add	r3, r2
    e5a0:	009b      	lsls	r3, r3, #2
    e5a2:	461a      	mov	r2, r3
    e5a4:	68fb      	ldr	r3, [r7, #12]
    e5a6:	4413      	add	r3, r2
    e5a8:	687a      	ldr	r2, [r7, #4]
    e5aa:	601a      	str	r2, [r3, #0]
}
    e5ac:	bf00      	nop
    e5ae:	3714      	adds	r7, #20
    e5b0:	46bd      	mov	sp, r7
    e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e5b6:	4770      	bx	lr

0000e5b8 <am_app_utils_ring_buffer_init_all>:

void
am_app_utils_ring_buffer_init_all(am_app_utils_ring_buffer_t* ring_buffs, const am_app_utils_ringbuff_setup_t* setup_array, 
                                    uint32_t ui32BufferCount)
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	b086      	sub	sp, #24
    e5bc:	af00      	add	r7, sp, #0
    e5be:	60f8      	str	r0, [r7, #12]
    e5c0:	60b9      	str	r1, [r7, #8]
    e5c2:	607a      	str	r2, [r7, #4]
    uint32_t ringbuff = 0;
    e5c4:	2300      	movs	r3, #0
    e5c6:	617b      	str	r3, [r7, #20]
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e5c8:	2300      	movs	r3, #0
    e5ca:	617b      	str	r3, [r7, #20]
    e5cc:	e00e      	b.n	e5ec <am_app_utils_ring_buffer_init_all+0x34>
    {
        am_app_utils_ring_buffer_init(ring_buffs,setup_array[ringbuff]);    
    e5ce:	697a      	ldr	r2, [r7, #20]
    e5d0:	4613      	mov	r3, r2
    e5d2:	005b      	lsls	r3, r3, #1
    e5d4:	4413      	add	r3, r2
    e5d6:	009b      	lsls	r3, r3, #2
    e5d8:	461a      	mov	r2, r3
    e5da:	68bb      	ldr	r3, [r7, #8]
    e5dc:	4413      	add	r3, r2
    e5de:	cb0e      	ldmia	r3, {r1, r2, r3}
    e5e0:	68f8      	ldr	r0, [r7, #12]
    e5e2:	f7ff ffa5 	bl	e530 <am_app_utils_ring_buffer_init>
    for(ringbuff =0; ringbuff<ui32BufferCount; ringbuff++)
    e5e6:	697b      	ldr	r3, [r7, #20]
    e5e8:	3301      	adds	r3, #1
    e5ea:	617b      	str	r3, [r7, #20]
    e5ec:	697a      	ldr	r2, [r7, #20]
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	429a      	cmp	r2, r3
    e5f2:	d3ec      	bcc.n	e5ce <am_app_utils_ring_buffer_init_all+0x16>
    }

}
    e5f4:	bf00      	nop
    e5f6:	3718      	adds	r7, #24
    e5f8:	46bd      	mov	sp, r7
    e5fa:	bd80      	pop	{r7, pc}

0000e5fc <am_app_utils_ring_buffer_push>:


uint32_t am_app_utils_ring_buffer_push(am_app_utils_ring_buffer_t *psBuffer, void *pvSource, uint32_t ui32Bytes)
{
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b088      	sub	sp, #32
    e600:	af00      	add	r7, sp, #0
    e602:	60f8      	str	r0, [r7, #12]
    e604:	60b9      	str	r1, [r7, #8]
    e606:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e608:	2300      	movs	r3, #0
    e60a:	61fb      	str	r3, [r7, #28]
    uint32_t ui32ReturnPushLen = 0;
    e60c:	2300      	movs	r3, #0
    e60e:	617b      	str	r3, [r7, #20]
    uint32_t ui32TempLen = 0;
    e610:	2300      	movs	r3, #0
    e612:	61bb      	str	r3, [r7, #24]
    uint8_t *pui8Source;
    
    ui32CopyLen = ui32Bytes;
    e614:	687b      	ldr	r3, [r7, #4]
    e616:	61fb      	str	r3, [r7, #28]
    pui8Source = (uint8_t*)pvSource;
    e618:	68bb      	ldr	r3, [r7, #8]
    e61a:	613b      	str	r3, [r7, #16]

    // won't push any data if buffer is full
    if(am_app_utils_ring_buffer_full(psBuffer))
    e61c:	68fb      	ldr	r3, [r7, #12]
    e61e:	685a      	ldr	r2, [r3, #4]
    e620:	68fb      	ldr	r3, [r7, #12]
    e622:	689b      	ldr	r3, [r3, #8]
    e624:	429a      	cmp	r2, r3
    e626:	d109      	bne.n	e63c <am_app_utils_ring_buffer_push+0x40>
    e628:	68fb      	ldr	r3, [r7, #12]
    e62a:	68db      	ldr	r3, [r3, #12]
    e62c:	2b01      	cmp	r3, #1
    e62e:	d105      	bne.n	e63c <am_app_utils_ring_buffer_push+0x40>
    {
        ui32CopyLen = 0;
    e630:	2300      	movs	r3, #0
    e632:	61fb      	str	r3, [r7, #28]
        ui32ReturnPushLen =0;
    e634:	2300      	movs	r3, #0
    e636:	617b      	str	r3, [r7, #20]
        return ui32ReturnPushLen;
    e638:	697b      	ldr	r3, [r7, #20]
    e63a:	e089      	b.n	e750 <am_app_utils_ring_buffer_push+0x154>
    }

    // push data until the buffer is full
    if(am_app_utils_ring_buffer_empty(psBuffer))
    e63c:	68fb      	ldr	r3, [r7, #12]
    e63e:	685a      	ldr	r2, [r3, #4]
    e640:	68fb      	ldr	r3, [r7, #12]
    e642:	689b      	ldr	r3, [r3, #8]
    e644:	429a      	cmp	r2, r3
    e646:	d10f      	bne.n	e668 <am_app_utils_ring_buffer_push+0x6c>
    e648:	68fb      	ldr	r3, [r7, #12]
    e64a:	68db      	ldr	r3, [r3, #12]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d10b      	bne.n	e668 <am_app_utils_ring_buffer_push+0x6c>
    {
        if(ui32CopyLen >= psBuffer->ui32Capacity)
    e650:	68fb      	ldr	r3, [r7, #12]
    e652:	691b      	ldr	r3, [r3, #16]
    e654:	69fa      	ldr	r2, [r7, #28]
    e656:	429a      	cmp	r2, r3
    e658:	d32b      	bcc.n	e6b2 <am_app_utils_ring_buffer_push+0xb6>
        {      
            psBuffer->ui32OverWriting = 1;
    e65a:	68fb      	ldr	r3, [r7, #12]
    e65c:	2201      	movs	r2, #1
    e65e:	60da      	str	r2, [r3, #12]
            ui32CopyLen = psBuffer->ui32Capacity;
    e660:	68fb      	ldr	r3, [r7, #12]
    e662:	691b      	ldr	r3, [r3, #16]
    e664:	61fb      	str	r3, [r7, #28]
        if(ui32CopyLen >= psBuffer->ui32Capacity)
    e666:	e024      	b.n	e6b2 <am_app_utils_ring_buffer_push+0xb6>
        }
    }
    else
    {
        if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e668:	68fb      	ldr	r3, [r7, #12]
    e66a:	689a      	ldr	r2, [r3, #8]
    e66c:	68fb      	ldr	r3, [r7, #12]
    e66e:	691b      	ldr	r3, [r3, #16]
    e670:	441a      	add	r2, r3
    e672:	68fb      	ldr	r3, [r7, #12]
    e674:	685b      	ldr	r3, [r3, #4]
    e676:	1ad3      	subs	r3, r2, r3
            % psBuffer->ui32Capacity) <= ui32CopyLen)
    e678:	68fa      	ldr	r2, [r7, #12]
    e67a:	6912      	ldr	r2, [r2, #16]
    e67c:	fbb3 f1f2 	udiv	r1, r3, r2
    e680:	fb02 f201 	mul.w	r2, r2, r1
    e684:	1a9b      	subs	r3, r3, r2
        if(((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e686:	69fa      	ldr	r2, [r7, #28]
    e688:	429a      	cmp	r2, r3
    e68a:	d312      	bcc.n	e6b2 <am_app_utils_ring_buffer_push+0xb6>
        {    
            psBuffer->ui32OverWriting = 1;
    e68c:	68fb      	ldr	r3, [r7, #12]
    e68e:	2201      	movs	r2, #1
    e690:	60da      	str	r2, [r3, #12]
            ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e692:	68fb      	ldr	r3, [r7, #12]
    e694:	689a      	ldr	r2, [r3, #8]
    e696:	68fb      	ldr	r3, [r7, #12]
    e698:	691b      	ldr	r3, [r3, #16]
    e69a:	441a      	add	r2, r3
    e69c:	68fb      	ldr	r3, [r7, #12]
    e69e:	685b      	ldr	r3, [r3, #4]
    e6a0:	1ad3      	subs	r3, r2, r3
            % psBuffer->ui32Capacity);
    e6a2:	68fa      	ldr	r2, [r7, #12]
    e6a4:	6912      	ldr	r2, [r2, #16]
            ui32CopyLen = ((psBuffer->ui32BufferHead_read + psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write) 
    e6a6:	fbb3 f1f2 	udiv	r1, r3, r2
    e6aa:	fb02 f201 	mul.w	r2, r2, r1
    e6ae:	1a9b      	subs	r3, r3, r2
    e6b0:	61fb      	str	r3, [r7, #28]
        }

    }        
        
    ui32ReturnPushLen = ui32CopyLen;
    e6b2:	69fb      	ldr	r3, [r7, #28]
    e6b4:	617b      	str	r3, [r7, #20]

    while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e6b6:	e020      	b.n	e6fa <am_app_utils_ring_buffer_push+0xfe>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferTail_write;
    e6b8:	68fb      	ldr	r3, [r7, #12]
    e6ba:	691a      	ldr	r2, [r3, #16]
    e6bc:	68fb      	ldr	r3, [r7, #12]
    e6be:	685b      	ldr	r3, [r3, #4]
    e6c0:	1ad3      	subs	r3, r2, r3
    e6c2:	61bb      	str	r3, [r7, #24]
        memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], pui8Source, ui32TempLen);
    e6c4:	68fb      	ldr	r3, [r7, #12]
    e6c6:	681a      	ldr	r2, [r3, #0]
    e6c8:	68fb      	ldr	r3, [r7, #12]
    e6ca:	685b      	ldr	r3, [r3, #4]
    e6cc:	4413      	add	r3, r2
    e6ce:	69ba      	ldr	r2, [r7, #24]
    e6d0:	6939      	ldr	r1, [r7, #16]
    e6d2:	4618      	mov	r0, r3
    e6d4:	f7fd fd14 	bl	c100 <memcpy>
        psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32TempLen) % psBuffer->ui32Capacity);
    e6d8:	68fb      	ldr	r3, [r7, #12]
    e6da:	685a      	ldr	r2, [r3, #4]
    e6dc:	69bb      	ldr	r3, [r7, #24]
    e6de:	4413      	add	r3, r2
    e6e0:	68fa      	ldr	r2, [r7, #12]
    e6e2:	6912      	ldr	r2, [r2, #16]
    e6e4:	fbb3 f1f2 	udiv	r1, r3, r2
    e6e8:	fb02 f201 	mul.w	r2, r2, r1
    e6ec:	1a9a      	subs	r2, r3, r2
    e6ee:	68fb      	ldr	r3, [r7, #12]
    e6f0:	605a      	str	r2, [r3, #4]
        ui32CopyLen -= ui32TempLen;
    e6f2:	69fa      	ldr	r2, [r7, #28]
    e6f4:	69bb      	ldr	r3, [r7, #24]
    e6f6:	1ad3      	subs	r3, r2, r3
    e6f8:	61fb      	str	r3, [r7, #28]
    while((psBuffer->ui32BufferTail_write + ui32CopyLen) >= psBuffer->ui32Capacity)
    e6fa:	68fb      	ldr	r3, [r7, #12]
    e6fc:	685a      	ldr	r2, [r3, #4]
    e6fe:	69fb      	ldr	r3, [r7, #28]
    e700:	441a      	add	r2, r3
    e702:	68fb      	ldr	r3, [r7, #12]
    e704:	691b      	ldr	r3, [r3, #16]
    e706:	429a      	cmp	r2, r3
    e708:	d2d6      	bcs.n	e6b8 <am_app_utils_ring_buffer_push+0xbc>
    }
    configASSERT((psBuffer->ui32BufferTail_write + ui32CopyLen) < psBuffer->ui32Capacity);
    e70a:	68fb      	ldr	r3, [r7, #12]
    e70c:	685a      	ldr	r2, [r3, #4]
    e70e:	69fb      	ldr	r3, [r7, #28]
    e710:	441a      	add	r2, r3
    e712:	68fb      	ldr	r3, [r7, #12]
    e714:	691b      	ldr	r3, [r3, #16]
    e716:	429a      	cmp	r2, r3
    e718:	d300      	bcc.n	e71c <am_app_utils_ring_buffer_push+0x120>
    e71a:	e7fe      	b.n	e71a <am_app_utils_ring_buffer_push+0x11e>
    
    memcpy((void*)&psBuffer->pui8Data[psBuffer->ui32BufferTail_write], &pui8Source[ui32TempLen], ui32CopyLen);
    e71c:	68fb      	ldr	r3, [r7, #12]
    e71e:	681a      	ldr	r2, [r3, #0]
    e720:	68fb      	ldr	r3, [r7, #12]
    e722:	685b      	ldr	r3, [r3, #4]
    e724:	18d0      	adds	r0, r2, r3
    e726:	693a      	ldr	r2, [r7, #16]
    e728:	69bb      	ldr	r3, [r7, #24]
    e72a:	4413      	add	r3, r2
    e72c:	69fa      	ldr	r2, [r7, #28]
    e72e:	4619      	mov	r1, r3
    e730:	f7fd fce6 	bl	c100 <memcpy>
    psBuffer->ui32BufferTail_write = ((psBuffer->ui32BufferTail_write + ui32CopyLen) % psBuffer->ui32Capacity);
    e734:	68fb      	ldr	r3, [r7, #12]
    e736:	685a      	ldr	r2, [r3, #4]
    e738:	69fb      	ldr	r3, [r7, #28]
    e73a:	4413      	add	r3, r2
    e73c:	68fa      	ldr	r2, [r7, #12]
    e73e:	6912      	ldr	r2, [r2, #16]
    e740:	fbb3 f1f2 	udiv	r1, r3, r2
    e744:	fb02 f201 	mul.w	r2, r2, r1
    e748:	1a9a      	subs	r2, r3, r2
    e74a:	68fb      	ldr	r3, [r7, #12]
    e74c:	605a      	str	r2, [r3, #4]
    
    return ui32ReturnPushLen;
    e74e:	697b      	ldr	r3, [r7, #20]

}
    e750:	4618      	mov	r0, r3
    e752:	3720      	adds	r7, #32
    e754:	46bd      	mov	sp, r7
    e756:	bd80      	pop	{r7, pc}

0000e758 <am_app_utils_ring_buffer_pop>:


uint32_t am_app_utils_ring_buffer_pop(am_app_utils_ring_buffer_t *psBuffer, void *pvDest,
                         uint32_t ui32Bytes)
{
    e758:	b580      	push	{r7, lr}
    e75a:	b08a      	sub	sp, #40	; 0x28
    e75c:	af00      	add	r7, sp, #0
    e75e:	60f8      	str	r0, [r7, #12]
    e760:	60b9      	str	r1, [r7, #8]
    e762:	607a      	str	r2, [r7, #4]
    uint32_t ui32CopyLen = 0;
    e764:	2300      	movs	r3, #0
    e766:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint32_t ui32TempLen = 0;
    e768:	2300      	movs	r3, #0
    e76a:	623b      	str	r3, [r7, #32]
    
    uint32_t ui32DataLen = 0;
    e76c:	2300      	movs	r3, #0
    e76e:	61fb      	str	r3, [r7, #28]

    uint32_t ui32ReturnPopLen = 0;
    e770:	2300      	movs	r3, #0
    e772:	61bb      	str	r3, [r7, #24]

    uint8_t *pui8Dest;

    pui8Dest = (uint8_t *) pvDest;
    e774:	68bb      	ldr	r3, [r7, #8]
    e776:	617b      	str	r3, [r7, #20]
    ui32DataLen = am_app_utils_get_ring_buffer_status(psBuffer);
    e778:	68f8      	ldr	r0, [r7, #12]
    e77a:	f000 f86b 	bl	e854 <am_app_utils_get_ring_buffer_status>
    e77e:	61f8      	str	r0, [r7, #28]
   
    if(am_app_utils_ring_buffer_overwrite(psBuffer))
    e780:	68fb      	ldr	r3, [r7, #12]
    e782:	685a      	ldr	r2, [r3, #4]
    e784:	68fb      	ldr	r3, [r7, #12]
    e786:	689b      	ldr	r3, [r3, #8]
    e788:	429a      	cmp	r2, r3
    e78a:	d007      	beq.n	e79c <am_app_utils_ring_buffer_pop+0x44>
    e78c:	68fb      	ldr	r3, [r7, #12]
    e78e:	68db      	ldr	r3, [r3, #12]
    e790:	2b01      	cmp	r3, #1
    e792:	d103      	bne.n	e79c <am_app_utils_ring_buffer_pop+0x44>
    {
        psBuffer->ui32BufferHead_read = (psBuffer->ui32BufferTail_write);
    e794:	68fb      	ldr	r3, [r7, #12]
    e796:	685a      	ldr	r2, [r3, #4]
    e798:	68fb      	ldr	r3, [r7, #12]
    e79a:	609a      	str	r2, [r3, #8]
       
    }

    // pop len can't exceed the length of buffer
    ui32CopyLen = ui32Bytes < ui32DataLen ? ui32Bytes : ui32DataLen;
    e79c:	69fa      	ldr	r2, [r7, #28]
    e79e:	687b      	ldr	r3, [r7, #4]
    e7a0:	4293      	cmp	r3, r2
    e7a2:	bf28      	it	cs
    e7a4:	4613      	movcs	r3, r2
    e7a6:	627b      	str	r3, [r7, #36]	; 0x24
    
    ui32ReturnPopLen = ui32CopyLen;
    e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7aa:	61bb      	str	r3, [r7, #24]

    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e7ac:	e020      	b.n	e7f0 <am_app_utils_ring_buffer_pop+0x98>
    {
        ui32TempLen = psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read;
    e7ae:	68fb      	ldr	r3, [r7, #12]
    e7b0:	691a      	ldr	r2, [r3, #16]
    e7b2:	68fb      	ldr	r3, [r7, #12]
    e7b4:	689b      	ldr	r3, [r3, #8]
    e7b6:	1ad3      	subs	r3, r2, r3
    e7b8:	623b      	str	r3, [r7, #32]
        memcpy(pui8Dest, (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32TempLen);
    e7ba:	68fb      	ldr	r3, [r7, #12]
    e7bc:	681a      	ldr	r2, [r3, #0]
    e7be:	68fb      	ldr	r3, [r7, #12]
    e7c0:	689b      	ldr	r3, [r3, #8]
    e7c2:	4413      	add	r3, r2
    e7c4:	6a3a      	ldr	r2, [r7, #32]
    e7c6:	4619      	mov	r1, r3
    e7c8:	6978      	ldr	r0, [r7, #20]
    e7ca:	f7fd fc99 	bl	c100 <memcpy>
        psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32TempLen) % psBuffer->ui32Capacity);
    e7ce:	68fb      	ldr	r3, [r7, #12]
    e7d0:	689a      	ldr	r2, [r3, #8]
    e7d2:	6a3b      	ldr	r3, [r7, #32]
    e7d4:	4413      	add	r3, r2
    e7d6:	68fa      	ldr	r2, [r7, #12]
    e7d8:	6912      	ldr	r2, [r2, #16]
    e7da:	fbb3 f1f2 	udiv	r1, r3, r2
    e7de:	fb02 f201 	mul.w	r2, r2, r1
    e7e2:	1a9a      	subs	r2, r3, r2
    e7e4:	68fb      	ldr	r3, [r7, #12]
    e7e6:	609a      	str	r2, [r3, #8]
        ui32CopyLen -= ui32TempLen;
    e7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e7ea:	6a3b      	ldr	r3, [r7, #32]
    e7ec:	1ad3      	subs	r3, r2, r3
    e7ee:	627b      	str	r3, [r7, #36]	; 0x24
    while((psBuffer->ui32BufferHead_read + ui32CopyLen) >= psBuffer->ui32Capacity)
    e7f0:	68fb      	ldr	r3, [r7, #12]
    e7f2:	689a      	ldr	r2, [r3, #8]
    e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7f6:	441a      	add	r2, r3
    e7f8:	68fb      	ldr	r3, [r7, #12]
    e7fa:	691b      	ldr	r3, [r3, #16]
    e7fc:	429a      	cmp	r2, r3
    e7fe:	d2d6      	bcs.n	e7ae <am_app_utils_ring_buffer_pop+0x56>
    }

    configASSERT((psBuffer->ui32BufferHead_read + ui32CopyLen) < psBuffer->ui32Capacity);
    e800:	68fb      	ldr	r3, [r7, #12]
    e802:	689a      	ldr	r2, [r3, #8]
    e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e806:	441a      	add	r2, r3
    e808:	68fb      	ldr	r3, [r7, #12]
    e80a:	691b      	ldr	r3, [r3, #16]
    e80c:	429a      	cmp	r2, r3
    e80e:	d300      	bcc.n	e812 <am_app_utils_ring_buffer_pop+0xba>
    e810:	e7fe      	b.n	e810 <am_app_utils_ring_buffer_pop+0xb8>
    
    memcpy(&pui8Dest[ui32TempLen], (void*)&psBuffer->pui8Data[psBuffer->ui32BufferHead_read], ui32CopyLen);
    e812:	697a      	ldr	r2, [r7, #20]
    e814:	6a3b      	ldr	r3, [r7, #32]
    e816:	18d0      	adds	r0, r2, r3
    e818:	68fb      	ldr	r3, [r7, #12]
    e81a:	681a      	ldr	r2, [r3, #0]
    e81c:	68fb      	ldr	r3, [r7, #12]
    e81e:	689b      	ldr	r3, [r3, #8]
    e820:	4413      	add	r3, r2
    e822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e824:	4619      	mov	r1, r3
    e826:	f7fd fc6b 	bl	c100 <memcpy>
    
    psBuffer->ui32BufferHead_read = ((psBuffer->ui32BufferHead_read + ui32CopyLen) % psBuffer->ui32Capacity);
    e82a:	68fb      	ldr	r3, [r7, #12]
    e82c:	689a      	ldr	r2, [r3, #8]
    e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e830:	4413      	add	r3, r2
    e832:	68fa      	ldr	r2, [r7, #12]
    e834:	6912      	ldr	r2, [r2, #16]
    e836:	fbb3 f1f2 	udiv	r1, r3, r2
    e83a:	fb02 f201 	mul.w	r2, r2, r1
    e83e:	1a9a      	subs	r2, r3, r2
    e840:	68fb      	ldr	r3, [r7, #12]
    e842:	609a      	str	r2, [r3, #8]
      
    psBuffer->ui32OverWriting = 0;
    e844:	68fb      	ldr	r3, [r7, #12]
    e846:	2200      	movs	r2, #0
    e848:	60da      	str	r2, [r3, #12]

    return ui32ReturnPopLen;
    e84a:	69bb      	ldr	r3, [r7, #24]
}
    e84c:	4618      	mov	r0, r3
    e84e:	3728      	adds	r7, #40	; 0x28
    e850:	46bd      	mov	sp, r7
    e852:	bd80      	pop	{r7, pc}

0000e854 <am_app_utils_get_ring_buffer_status>:
//! @return The number of data left.
//
//*****************************************************************************
uint32_t
am_app_utils_get_ring_buffer_status(am_app_utils_ring_buffer_t *psBuffer)
{
    e854:	b480      	push	{r7}
    e856:	b085      	sub	sp, #20
    e858:	af00      	add	r7, sp, #0
    e85a:	6078      	str	r0, [r7, #4]
    uint32_t ui32NewDataLen = 0;
    e85c:	2300      	movs	r3, #0
    e85e:	60fb      	str	r3, [r7, #12]
    
    if (am_app_utils_ring_buffer_overwrite(psBuffer) || am_app_utils_ring_buffer_full(psBuffer))
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	685a      	ldr	r2, [r3, #4]
    e864:	687b      	ldr	r3, [r7, #4]
    e866:	689b      	ldr	r3, [r3, #8]
    e868:	429a      	cmp	r2, r3
    e86a:	d003      	beq.n	e874 <am_app_utils_get_ring_buffer_status+0x20>
    e86c:	687b      	ldr	r3, [r7, #4]
    e86e:	68db      	ldr	r3, [r3, #12]
    e870:	2b01      	cmp	r3, #1
    e872:	d009      	beq.n	e888 <am_app_utils_get_ring_buffer_status+0x34>
    e874:	687b      	ldr	r3, [r7, #4]
    e876:	685a      	ldr	r2, [r3, #4]
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	689b      	ldr	r3, [r3, #8]
    e87c:	429a      	cmp	r2, r3
    e87e:	d108      	bne.n	e892 <am_app_utils_get_ring_buffer_status+0x3e>
    e880:	687b      	ldr	r3, [r7, #4]
    e882:	68db      	ldr	r3, [r3, #12]
    e884:	2b01      	cmp	r3, #1
    e886:	d104      	bne.n	e892 <am_app_utils_get_ring_buffer_status+0x3e>
    {
        ui32NewDataLen = psBuffer->ui32Capacity;
    e888:	687b      	ldr	r3, [r7, #4]
    e88a:	691b      	ldr	r3, [r3, #16]
    e88c:	60fb      	str	r3, [r7, #12]
        return ui32NewDataLen;
    e88e:	68fb      	ldr	r3, [r7, #12]
    e890:	e010      	b.n	e8b4 <am_app_utils_get_ring_buffer_status+0x60>
    }
    
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	685a      	ldr	r2, [r3, #4]
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	691b      	ldr	r3, [r3, #16]
    e89a:	441a      	add	r2, r3
    e89c:	687b      	ldr	r3, [r7, #4]
    e89e:	689b      	ldr	r3, [r3, #8]
    e8a0:	1ad3      	subs	r3, r2, r3
        psBuffer->ui32Capacity);
    e8a2:	687a      	ldr	r2, [r7, #4]
    e8a4:	6912      	ldr	r2, [r2, #16]
    ui32NewDataLen = ((psBuffer->ui32BufferTail_write + psBuffer->ui32Capacity - psBuffer->ui32BufferHead_read) % 
    e8a6:	fbb3 f1f2 	udiv	r1, r3, r2
    e8aa:	fb02 f201 	mul.w	r2, r2, r1
    e8ae:	1a9b      	subs	r3, r3, r2
    e8b0:	60fb      	str	r3, [r7, #12]

    return ui32NewDataLen; 
    e8b2:	68fb      	ldr	r3, [r7, #12]

}
    e8b4:	4618      	mov	r0, r3
    e8b6:	3714      	adds	r7, #20
    e8b8:	46bd      	mov	sp, r7
    e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8be:	4770      	bx	lr

0000e8c0 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    e8c0:	b580      	push	{r7, lr}
    e8c2:	b082      	sub	sp, #8
    e8c4:	af00      	add	r7, sp, #0
    e8c6:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    e8c8:	687b      	ldr	r3, [r7, #4]
    e8ca:	2b00      	cmp	r3, #0
    e8cc:	d03d      	beq.n	e94a <am_devices_led_init+0x8a>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    e8d2:	2b31      	cmp	r3, #49	; 0x31
    e8d4:	d839      	bhi.n	e94a <am_devices_led_init+0x8a>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	685b      	ldr	r3, [r3, #4]
    e8da:	f003 0302 	and.w	r3, r3, #2
    e8de:	2b00      	cmp	r3, #0
    e8e0:	d019      	beq.n	e916 <am_devices_led_init+0x56>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	681a      	ldr	r2, [r3, #0]
    e8e6:	4b1b      	ldr	r3, [pc, #108]	; (e954 <am_devices_led_init+0x94>)
    e8e8:	6819      	ldr	r1, [r3, #0]
    e8ea:	4610      	mov	r0, r2
    e8ec:	f7fe fb8e 	bl	d00c <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e8f0:	687b      	ldr	r3, [r7, #4]
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	2103      	movs	r1, #3
    e8f6:	4618      	mov	r0, r3
    e8f8:	f7fe fdc8 	bl	d48c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e8fc:	687b      	ldr	r3, [r7, #4]
    e8fe:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e900:	687b      	ldr	r3, [r7, #4]
    e902:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e904:	b2db      	uxtb	r3, r3
    e906:	f003 0301 	and.w	r3, r3, #1
    e90a:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e90c:	4619      	mov	r1, r3
    e90e:	4610      	mov	r0, r2
    e910:	f7fe fdbc 	bl	d48c <am_hal_gpio_state_write>
    e914:	e01a      	b.n	e94c <am_devices_led_init+0x8c>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    e916:	687b      	ldr	r3, [r7, #4]
    e918:	681a      	ldr	r2, [r3, #0]
    e91a:	4b0f      	ldr	r3, [pc, #60]	; (e958 <am_devices_led_init+0x98>)
    e91c:	6819      	ldr	r1, [r3, #0]
    e91e:	4610      	mov	r0, r2
    e920:	f7fe fb74 	bl	d00c <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	681b      	ldr	r3, [r3, #0]
    e928:	2103      	movs	r1, #3
    e92a:	4618      	mov	r0, r3
    e92c:	f7fe fdae 	bl	d48c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e930:	687b      	ldr	r3, [r7, #4]
    e932:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e934:	687b      	ldr	r3, [r7, #4]
    e936:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e938:	b2db      	uxtb	r3, r3
    e93a:	f003 0301 	and.w	r3, r3, #1
    e93e:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    e940:	4619      	mov	r1, r3
    e942:	4610      	mov	r0, r2
    e944:	f7fe fda2 	bl	d48c <am_hal_gpio_state_write>
    e948:	e000      	b.n	e94c <am_devices_led_init+0x8c>
        return;
    e94a:	bf00      	nop
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    e94c:	3708      	adds	r7, #8
    e94e:	46bd      	mov	sp, r7
    e950:	bd80      	pop	{r7, pc}
    e952:	bf00      	nop
    e954:	000109ec 	.word	0x000109ec
    e958:	000109f0 	.word	0x000109f0

0000e95c <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    e95c:	b580      	push	{r7, lr}
    e95e:	b084      	sub	sp, #16
    e960:	af00      	add	r7, sp, #0
    e962:	6078      	str	r0, [r7, #4]
    e964:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    e966:	687b      	ldr	r3, [r7, #4]
    e968:	2b00      	cmp	r3, #0
    e96a:	d014      	beq.n	e996 <am_devices_led_array_init+0x3a>
    e96c:	683b      	ldr	r3, [r7, #0]
    e96e:	2b1f      	cmp	r3, #31
    e970:	d811      	bhi.n	e996 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    e972:	2300      	movs	r3, #0
    e974:	60fb      	str	r3, [r7, #12]
    e976:	e009      	b.n	e98c <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    e978:	68fb      	ldr	r3, [r7, #12]
    e97a:	00db      	lsls	r3, r3, #3
    e97c:	687a      	ldr	r2, [r7, #4]
    e97e:	4413      	add	r3, r2
    e980:	4618      	mov	r0, r3
    e982:	f7ff ff9d 	bl	e8c0 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    e986:	68fb      	ldr	r3, [r7, #12]
    e988:	3301      	adds	r3, #1
    e98a:	60fb      	str	r3, [r7, #12]
    e98c:	68fa      	ldr	r2, [r7, #12]
    e98e:	683b      	ldr	r3, [r7, #0]
    e990:	429a      	cmp	r2, r3
    e992:	d3f1      	bcc.n	e978 <am_devices_led_array_init+0x1c>
    e994:	e000      	b.n	e998 <am_devices_led_array_init+0x3c>
        return;
    e996:	bf00      	nop
    }
}
    e998:	3710      	adds	r7, #16
    e99a:	46bd      	mov	sp, r7
    e99c:	bd80      	pop	{r7, pc}

0000e99e <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    e99e:	b580      	push	{r7, lr}
    e9a0:	b082      	sub	sp, #8
    e9a2:	af00      	add	r7, sp, #0
    e9a4:	6078      	str	r0, [r7, #4]
    e9a6:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d02e      	beq.n	ea0c <am_devices_led_on+0x6e>
    e9ae:	683b      	ldr	r3, [r7, #0]
    e9b0:	2b1e      	cmp	r3, #30
    e9b2:	d82b      	bhi.n	ea0c <am_devices_led_on+0x6e>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    e9b4:	683b      	ldr	r3, [r7, #0]
    e9b6:	00db      	lsls	r3, r3, #3
    e9b8:	687a      	ldr	r2, [r7, #4]
    e9ba:	4413      	add	r3, r2
    e9bc:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    e9be:	2b31      	cmp	r3, #49	; 0x31
    e9c0:	d824      	bhi.n	ea0c <am_devices_led_on+0x6e>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    e9c2:	683b      	ldr	r3, [r7, #0]
    e9c4:	00db      	lsls	r3, r3, #3
    e9c6:	687a      	ldr	r2, [r7, #4]
    e9c8:	4413      	add	r3, r2
    e9ca:	685b      	ldr	r3, [r3, #4]
    e9cc:	f003 0302 	and.w	r3, r3, #2
    e9d0:	2b00      	cmp	r3, #0
    e9d2:	d011      	beq.n	e9f8 <am_devices_led_on+0x5a>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e9d4:	683b      	ldr	r3, [r7, #0]
    e9d6:	00db      	lsls	r3, r3, #3
    e9d8:	687a      	ldr	r2, [r7, #4]
    e9da:	4413      	add	r3, r2
    e9dc:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    e9de:	683b      	ldr	r3, [r7, #0]
    e9e0:	00db      	lsls	r3, r3, #3
    e9e2:	687a      	ldr	r2, [r7, #4]
    e9e4:	4413      	add	r3, r2
    e9e6:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    e9e8:	b2db      	uxtb	r3, r3
    e9ea:	f003 0301 	and.w	r3, r3, #1
    e9ee:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e9f0:	4619      	mov	r1, r3
    e9f2:	f7fe fd4b 	bl	d48c <am_hal_gpio_state_write>
    e9f6:	e00a      	b.n	ea0e <am_devices_led_on+0x70>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    e9f8:	683b      	ldr	r3, [r7, #0]
    e9fa:	00db      	lsls	r3, r3, #3
    e9fc:	687a      	ldr	r2, [r7, #4]
    e9fe:	4413      	add	r3, r2
    ea00:	681b      	ldr	r3, [r3, #0]
    ea02:	2104      	movs	r1, #4
    ea04:	4618      	mov	r0, r3
    ea06:	f7fe fd41 	bl	d48c <am_hal_gpio_state_write>
    ea0a:	e000      	b.n	ea0e <am_devices_led_on+0x70>
        return;
    ea0c:	bf00      	nop
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    ea0e:	3708      	adds	r7, #8
    ea10:	46bd      	mov	sp, r7
    ea12:	bd80      	pop	{r7, pc}

0000ea14 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
    ea1c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    ea1e:	687b      	ldr	r3, [r7, #4]
    ea20:	2b00      	cmp	r3, #0
    ea22:	d031      	beq.n	ea88 <am_devices_led_off+0x74>
    ea24:	683b      	ldr	r3, [r7, #0]
    ea26:	2b1e      	cmp	r3, #30
    ea28:	d82e      	bhi.n	ea88 <am_devices_led_off+0x74>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    ea2a:	683b      	ldr	r3, [r7, #0]
    ea2c:	00db      	lsls	r3, r3, #3
    ea2e:	687a      	ldr	r2, [r7, #4]
    ea30:	4413      	add	r3, r2
    ea32:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    ea34:	2b31      	cmp	r3, #49	; 0x31
    ea36:	d827      	bhi.n	ea88 <am_devices_led_off+0x74>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    ea38:	683b      	ldr	r3, [r7, #0]
    ea3a:	00db      	lsls	r3, r3, #3
    ea3c:	687a      	ldr	r2, [r7, #4]
    ea3e:	4413      	add	r3, r2
    ea40:	685b      	ldr	r3, [r3, #4]
    ea42:	f003 0302 	and.w	r3, r3, #2
    ea46:	2b00      	cmp	r3, #0
    ea48:	d014      	beq.n	ea74 <am_devices_led_off+0x60>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    ea4a:	683b      	ldr	r3, [r7, #0]
    ea4c:	00db      	lsls	r3, r3, #3
    ea4e:	687a      	ldr	r2, [r7, #4]
    ea50:	4413      	add	r3, r2
    ea52:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    ea54:	683b      	ldr	r3, [r7, #0]
    ea56:	00db      	lsls	r3, r3, #3
    ea58:	687a      	ldr	r2, [r7, #4]
    ea5a:	4413      	add	r3, r2
    ea5c:	685b      	ldr	r3, [r3, #4]
    ea5e:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    ea62:	2b00      	cmp	r3, #0
    ea64:	bf0c      	ite	eq
    ea66:	2301      	moveq	r3, #1
    ea68:	2300      	movne	r3, #0
    ea6a:	b2db      	uxtb	r3, r3
    ea6c:	4619      	mov	r1, r3
    ea6e:	f7fe fd0d 	bl	d48c <am_hal_gpio_state_write>
    ea72:	e00a      	b.n	ea8a <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    ea74:	683b      	ldr	r3, [r7, #0]
    ea76:	00db      	lsls	r3, r3, #3
    ea78:	687a      	ldr	r2, [r7, #4]
    ea7a:	4413      	add	r3, r2
    ea7c:	681b      	ldr	r3, [r3, #0]
    ea7e:	2103      	movs	r1, #3
    ea80:	4618      	mov	r0, r3
    ea82:	f7fe fd03 	bl	d48c <am_hal_gpio_state_write>
    ea86:	e000      	b.n	ea8a <am_devices_led_off+0x76>
        return;
    ea88:	bf00      	nop
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    ea8a:	3708      	adds	r7, #8
    ea8c:	46bd      	mov	sp, r7
    ea8e:	bd80      	pop	{r7, pc}

0000ea90 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    ea90:	b580      	push	{r7, lr}
    ea92:	b084      	sub	sp, #16
    ea94:	af00      	add	r7, sp, #0
    ea96:	6078      	str	r0, [r7, #4]
    ea98:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d042      	beq.n	eb26 <am_devices_led_toggle+0x96>
    eaa0:	683b      	ldr	r3, [r7, #0]
    eaa2:	2b1e      	cmp	r3, #30
    eaa4:	d83f      	bhi.n	eb26 <am_devices_led_toggle+0x96>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    eaa6:	683b      	ldr	r3, [r7, #0]
    eaa8:	00db      	lsls	r3, r3, #3
    eaaa:	687a      	ldr	r2, [r7, #4]
    eaac:	4413      	add	r3, r2
    eaae:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    eab0:	2b31      	cmp	r3, #49	; 0x31
    eab2:	d838      	bhi.n	eb26 <am_devices_led_toggle+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    eab4:	683b      	ldr	r3, [r7, #0]
    eab6:	00db      	lsls	r3, r3, #3
    eab8:	687a      	ldr	r2, [r7, #4]
    eaba:	4413      	add	r3, r2
    eabc:	685b      	ldr	r3, [r3, #4]
    eabe:	f003 0302 	and.w	r3, r3, #2
    eac2:	2b00      	cmp	r3, #0
    eac4:	d009      	beq.n	eada <am_devices_led_toggle+0x4a>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    eac6:	683b      	ldr	r3, [r7, #0]
    eac8:	00db      	lsls	r3, r3, #3
    eaca:	687a      	ldr	r2, [r7, #4]
    eacc:	4413      	add	r3, r2
    eace:	681b      	ldr	r3, [r3, #0]
    ead0:	2102      	movs	r1, #2
    ead2:	4618      	mov	r0, r3
    ead4:	f7fe fcda 	bl	d48c <am_hal_gpio_state_write>
    ead8:	e026      	b.n	eb28 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    eada:	683b      	ldr	r3, [r7, #0]
    eadc:	00db      	lsls	r3, r3, #3
    eade:	687a      	ldr	r2, [r7, #4]
    eae0:	4413      	add	r3, r2
    eae2:	681b      	ldr	r3, [r3, #0]
    eae4:	f107 0208 	add.w	r2, r7, #8
    eae8:	2102      	movs	r1, #2
    eaea:	4618      	mov	r0, r3
    eaec:	f7fe fc6a 	bl	d3c4 <am_hal_gpio_state_read>
    eaf0:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    eaf2:	68fb      	ldr	r3, [r7, #12]
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	d117      	bne.n	eb28 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    eaf8:	68bb      	ldr	r3, [r7, #8]
    eafa:	2b00      	cmp	r3, #0
    eafc:	d009      	beq.n	eb12 <am_devices_led_toggle+0x82>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    eafe:	683b      	ldr	r3, [r7, #0]
    eb00:	00db      	lsls	r3, r3, #3
    eb02:	687a      	ldr	r2, [r7, #4]
    eb04:	4413      	add	r3, r2
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	2103      	movs	r1, #3
    eb0a:	4618      	mov	r0, r3
    eb0c:	f7fe fcbe 	bl	d48c <am_hal_gpio_state_write>
    eb10:	e00a      	b.n	eb28 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    eb12:	683b      	ldr	r3, [r7, #0]
    eb14:	00db      	lsls	r3, r3, #3
    eb16:	687a      	ldr	r2, [r7, #4]
    eb18:	4413      	add	r3, r2
    eb1a:	681b      	ldr	r3, [r3, #0]
    eb1c:	2104      	movs	r1, #4
    eb1e:	4618      	mov	r0, r3
    eb20:	f7fe fcb4 	bl	d48c <am_hal_gpio_state_write>
    eb24:	e000      	b.n	eb28 <am_devices_led_toggle+0x98>
        return;
    eb26:	bf00      	nop
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    eb28:	3710      	adds	r7, #16
    eb2a:	46bd      	mov	sp, r7
    eb2c:	bd80      	pop	{r7, pc}
	...

0000eb30 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    eb30:	4811      	ldr	r0, [pc, #68]	; (eb78 <zero_loop+0x12>)
    eb32:	4912      	ldr	r1, [pc, #72]	; (eb7c <zero_loop+0x16>)
    eb34:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    eb36:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    eb3a:	4811      	ldr	r0, [pc, #68]	; (eb80 <zero_loop+0x1a>)
    eb3c:	6801      	ldr	r1, [r0, #0]
    eb3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    eb42:	6001      	str	r1, [r0, #0]
    eb44:	f3bf 8f4f 	dsb	sy
    eb48:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    eb4c:	480d      	ldr	r0, [pc, #52]	; (eb84 <zero_loop+0x1e>)
    eb4e:	490e      	ldr	r1, [pc, #56]	; (eb88 <zero_loop+0x22>)
    eb50:	4a0e      	ldr	r2, [pc, #56]	; (eb8c <zero_loop+0x26>)

0000eb52 <copy_loop>:
    eb52:	f850 3b04 	ldr.w	r3, [r0], #4
    eb56:	f841 3b04 	str.w	r3, [r1], #4
    eb5a:	4291      	cmp	r1, r2
    eb5c:	dbf9      	blt.n	eb52 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    eb5e:	480c      	ldr	r0, [pc, #48]	; (eb90 <zero_loop+0x2a>)
    eb60:	490c      	ldr	r1, [pc, #48]	; (eb94 <zero_loop+0x2e>)
    eb62:	f04f 0200 	mov.w	r2, #0

0000eb66 <zero_loop>:
    eb66:	4288      	cmp	r0, r1
    eb68:	bfb8      	it	lt
    eb6a:	f840 2b04 	strlt.w	r2, [r0], #4
    eb6e:	dbfa      	blt.n	eb66 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    eb70:	f7fd fe94 	bl	c89c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    eb74:	be00      	bkpt	0x0000
}
    eb76:	bf00      	nop
    eb78:	e000ed08 	.word	0xe000ed08
    eb7c:	0000c000 	.word	0x0000c000
    eb80:	e000ed88 	.word	0xe000ed88
    eb84:	00010cd8 	.word	0x00010cd8
    eb88:	1000c000 	.word	0x1000c000
    eb8c:	1000c050 	.word	0x1000c050
    eb90:	1000c050 	.word	0x1000c050
    eb94:	1001c180 	.word	0x1001c180

0000eb98 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    eb98:	b480      	push	{r7}
    eb9a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    eb9c:	e7fe      	b.n	eb9c <NMI_Handler+0x4>

0000eb9e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    eb9e:	b480      	push	{r7}
    eba0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    eba2:	e7fe      	b.n	eba2 <DebugMon_Handler+0x4>

0000eba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    eba4:	b480      	push	{r7}
    eba6:	b083      	sub	sp, #12
    eba8:	af00      	add	r7, sp, #0
    ebaa:	4603      	mov	r3, r0
    ebac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ebae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	db0b      	blt.n	ebce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ebb6:	79fb      	ldrb	r3, [r7, #7]
    ebb8:	f003 021f 	and.w	r2, r3, #31
    ebbc:	4907      	ldr	r1, [pc, #28]	; (ebdc <__NVIC_EnableIRQ+0x38>)
    ebbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ebc2:	095b      	lsrs	r3, r3, #5
    ebc4:	2001      	movs	r0, #1
    ebc6:	fa00 f202 	lsl.w	r2, r0, r2
    ebca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    ebce:	bf00      	nop
    ebd0:	370c      	adds	r7, #12
    ebd2:	46bd      	mov	sp, r7
    ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebd8:	4770      	bx	lr
    ebda:	bf00      	nop
    ebdc:	e000e100 	.word	0xe000e100

0000ebe0 <DebugLog>:

//*****************************************************************************
// The stdio function for debug usage
//*****************************************************************************

void DebugLog(const char* s) { am_util_stdio_printf("%s", s); }
    ebe0:	b580      	push	{r7, lr}
    ebe2:	b082      	sub	sp, #8
    ebe4:	af00      	add	r7, sp, #0
    ebe6:	6078      	str	r0, [r7, #4]
    ebe8:	6879      	ldr	r1, [r7, #4]
    ebea:	4803      	ldr	r0, [pc, #12]	; (ebf8 <DebugLog+0x18>)
    ebec:	f7ff fc7c 	bl	e4e8 <am_util_stdio_printf>
    ebf0:	bf00      	nop
    ebf2:	3708      	adds	r7, #8
    ebf4:	46bd      	mov	sp, r7
    ebf6:	bd80      	pop	{r7, pc}
    ebf8:	00010840 	.word	0x00010840

0000ebfc <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    ebfc:	b580      	push	{r7, lr}
    ebfe:	b082      	sub	sp, #8
    ec00:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    ec02:	2100      	movs	r1, #0
    ec04:	2001      	movs	r0, #1
    ec06:	f000 fc87 	bl	f518 <am_hal_clkgen_control>
    

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    ec0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec0e:	2000      	movs	r0, #0
    ec10:	f000 fd66 	bl	f6e0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    ec14:	490a      	ldr	r1, [pc, #40]	; (ec40 <timerA0_init+0x44>)
    ec16:	2000      	movs	r0, #0
    ec18:	f000 fd08 	bl	f62c <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 12000;
    ec1c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    ec20:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    ec22:	687b      	ldr	r3, [r7, #4]
    ec24:	085b      	lsrs	r3, r3, #1
    ec26:	687a      	ldr	r2, [r7, #4]
    ec28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec2c:	2000      	movs	r0, #0
    ec2e:	f000 fd6b 	bl	f708 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ec32:	2001      	movs	r0, #1
    ec34:	f000 fdd2 	bl	f7dc <am_hal_ctimer_int_clear>
}
    ec38:	bf00      	nop
    ec3a:	3708      	adds	r7, #8
    ec3c:	46bd      	mov	sp, r7
    ec3e:	bd80      	pop	{r7, pc}
    ec40:	1000c000 	.word	0x1000c000

0000ec44 <am_app_AEP_sys_init>:
//
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void am_app_AEP_sys_init(void)
{
    ec44:	b580      	push	{r7, lr}
    ec46:	b082      	sub	sp, #8
    ec48:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    ec4a:	2100      	movs	r1, #0
    ec4c:	2000      	movs	r0, #0
    ec4e:	f000 fc63 	bl	f518 <am_hal_clkgen_control>
    
    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    ec52:	4837      	ldr	r0, [pc, #220]	; (ed30 <am_app_AEP_sys_init+0xec>)
    ec54:	f000 fc2c 	bl	f4b0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    ec58:	f000 fc54 	bl	f504 <am_hal_cachectrl_enable>
    
    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    ec5c:	f000 fb52 	bl	f304 <am_bsp_low_power_init>

#if defined(AM_BSP_NUM_BUTTONS) && defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    ec60:	4b34      	ldr	r3, [pc, #208]	; (ed34 <am_app_AEP_sys_init+0xf0>)
    ec62:	6819      	ldr	r1, [r3, #0]
    ec64:	2010      	movs	r0, #16
    ec66:	f7fe f9d1 	bl	d00c <am_hal_gpio_pinconfig>
    
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ec6a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ec6e:	f04f 0100 	mov.w	r1, #0
    ec72:	f7fe fccd 	bl	d610 <am_hal_gpio_interrupt_clear>
    
    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    ec76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ec7a:	f04f 0100 	mov.w	r1, #0
    ec7e:	f7fe fc89 	bl	d594 <am_hal_gpio_interrupt_enable>
    
    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ec82:	2105      	movs	r1, #5
    ec84:	482c      	ldr	r0, [pc, #176]	; (ed38 <am_app_AEP_sys_init+0xf4>)
    ec86:	f7ff fe69 	bl	e95c <am_devices_led_array_init>
    
    //
    // Turn the LEDs off
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ec8a:	2300      	movs	r3, #0
    ec8c:	607b      	str	r3, [r7, #4]
    ec8e:	e007      	b.n	eca0 <am_app_AEP_sys_init+0x5c>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ec90:	687b      	ldr	r3, [r7, #4]
    ec92:	4619      	mov	r1, r3
    ec94:	4828      	ldr	r0, [pc, #160]	; (ed38 <am_app_AEP_sys_init+0xf4>)
    ec96:	f7ff febd 	bl	ea14 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++) 
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	3301      	adds	r3, #1
    ec9e:	607b      	str	r3, [r7, #4]
    eca0:	687b      	ldr	r3, [r7, #4]
    eca2:	2b04      	cmp	r3, #4
    eca4:	ddf4      	ble.n	ec90 <am_app_AEP_sys_init+0x4c>
    }
    //
    // TimerA0 init.
    //
    timerA0_init();
    eca6:	f7ff ffa9 	bl	ebfc <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    ecaa:	2001      	movs	r0, #1
    ecac:	f000 fd82 	bl	f7b4 <am_hal_ctimer_int_enable>

#endif  // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)

    // Turn on PDM
    am_app_AEP_pdm_init();
    ecb0:	f000 f8e2 	bl	ee78 <am_app_AEP_pdm_init>
 
#if AM_CMSIS_REGS
    NVIC_EnableIRQ(GPIO_IRQn);
    ecb4:	200d      	movs	r0, #13
    ecb6:	f7ff ff75 	bl	eba4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CTIMER_IRQn);
    ecba:	200e      	movs	r0, #14
    ecbc:	f7ff ff72 	bl	eba4 <__NVIC_EnableIRQ>
#endif  // AM_CMSIS_REGS

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    ecc0:	f000 fdcc 	bl	f85c <am_hal_interrupt_master_enable>
   
    //
    // Initialize the printf interface for UART output
    //
    am_bsp_uart_printf_enable();
    ecc4:	f000 fb50 	bl	f368 <am_bsp_uart_printf_enable>
#endif

    //
    // Configure of burst mode
    //
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_initialize(&eBurstModeAvailable))
    ecc8:	481c      	ldr	r0, [pc, #112]	; (ed3c <am_app_AEP_sys_init+0xf8>)
    ecca:	f000 fb7b 	bl	f3c4 <am_hal_burst_mode_initialize>
    ecce:	4603      	mov	r3, r0
    ecd0:	2b00      	cmp	r3, #0
    ecd2:	d10b      	bne.n	ecec <am_app_AEP_sys_init+0xa8>
    {
        if (AM_HAL_BURST_AVAIL == eBurstModeAvailable)
    ecd4:	4b19      	ldr	r3, [pc, #100]	; (ed3c <am_app_AEP_sys_init+0xf8>)
    ecd6:	781b      	ldrb	r3, [r3, #0]
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d103      	bne.n	ece4 <am_app_AEP_sys_init+0xa0>
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Available\r\n");
    ecdc:	4818      	ldr	r0, [pc, #96]	; (ed40 <am_app_AEP_sys_init+0xfc>)
    ecde:	f7ff fc03 	bl	e4e8 <am_util_stdio_printf>
    ece2:	e006      	b.n	ecf2 <am_app_AEP_sys_init+0xae>
        }
        else
        {
            am_util_stdio_printf("Apollo3 Burst Mode is Not Available\r\n");
    ece4:	4817      	ldr	r0, [pc, #92]	; (ed44 <am_app_AEP_sys_init+0x100>)
    ece6:	f7ff fbff 	bl	e4e8 <am_util_stdio_printf>
    ecea:	e002      	b.n	ecf2 <am_app_AEP_sys_init+0xae>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for Burst Mode operation\r\n");
    ecec:	4816      	ldr	r0, [pc, #88]	; (ed48 <am_app_AEP_sys_init+0x104>)
    ecee:	f7ff fbfb 	bl	e4e8 <am_util_stdio_printf>
    }

#if configUSE_BURST_ALWAYS_ON
    // Put the MCU into "Burst" mode.
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_enable(&eBurstMode))
    ecf2:	4816      	ldr	r0, [pc, #88]	; (ed4c <am_app_AEP_sys_init+0x108>)
    ecf4:	f000 fbae 	bl	f454 <am_hal_burst_mode_enable>
    ecf8:	4603      	mov	r3, r0
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d107      	bne.n	ed0e <am_app_AEP_sys_init+0xca>
    {
        if (AM_HAL_BURST_MODE == eBurstMode)
    ecfe:	4b13      	ldr	r3, [pc, #76]	; (ed4c <am_app_AEP_sys_init+0x108>)
    ed00:	781b      	ldrb	r3, [r3, #0]
    ed02:	2b00      	cmp	r3, #0
    ed04:	d106      	bne.n	ed14 <am_app_AEP_sys_init+0xd0>
        {
            am_util_stdio_printf("Apollo3 operating in Burst Mode (96MHz)\r\n");
    ed06:	4812      	ldr	r0, [pc, #72]	; (ed50 <am_app_AEP_sys_init+0x10c>)
    ed08:	f7ff fbee 	bl	e4e8 <am_util_stdio_printf>
    ed0c:	e002      	b.n	ed14 <am_app_AEP_sys_init+0xd0>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Enable Burst Mode operation\r\n");
    ed0e:	4811      	ldr	r0, [pc, #68]	; (ed54 <am_app_AEP_sys_init+0x110>)
    ed10:	f7ff fbea 	bl	e4e8 <am_util_stdio_printf>
    }

#endif // configUSE_BURST_ALWAYS_ON

    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    ed14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ed18:	2000      	movs	r0, #0
    ed1a:	f000 fcb7 	bl	f68c <am_hal_ctimer_start>

    am_app_utils_ring_buffer_init_all(am_sys_ring_buffers, g_SysRingBuffSetup, SYS_RINGBUFF_INIT_COUNT);
    ed1e:	2201      	movs	r2, #1
    ed20:	490d      	ldr	r1, [pc, #52]	; (ed58 <am_app_AEP_sys_init+0x114>)
    ed22:	480e      	ldr	r0, [pc, #56]	; (ed5c <am_app_AEP_sys_init+0x118>)
    ed24:	f7ff fc48 	bl	e5b8 <am_app_utils_ring_buffer_init_all>

}
    ed28:	bf00      	nop
    ed2a:	3708      	adds	r7, #8
    ed2c:	46bd      	mov	sp, r7
    ed2e:	bd80      	pop	{r7, pc}
    ed30:	00010b98 	.word	0x00010b98
    ed34:	00010b64 	.word	0x00010b64
    ed38:	1000c018 	.word	0x1000c018
    ed3c:	1000c189 	.word	0x1000c189
    ed40:	00010854 	.word	0x00010854
    ed44:	00010878 	.word	0x00010878
    ed48:	000108a0 	.word	0x000108a0
    ed4c:	1000c188 	.word	0x1000c188
    ed50:	000108d0 	.word	0x000108d0
    ed54:	000108fc 	.word	0x000108fc
    ed58:	00010b58 	.word	0x00010b58
    ed5c:	1001bb8c 	.word	0x1001bb8c

0000ed60 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    ed60:	b580      	push	{r7, lr}
    ed62:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    ed64:	4b0f      	ldr	r3, [pc, #60]	; (eda4 <am_ctimer_isr+0x44>)
    ed66:	681b      	ldr	r3, [r3, #0]
    ed68:	3301      	adds	r3, #1
    ed6a:	4a0e      	ldr	r2, [pc, #56]	; (eda4 <am_ctimer_isr+0x44>)
    ed6c:	6013      	str	r3, [r2, #0]
    if ( g_ui8DebounceFlag == 1)
    ed6e:	4b0e      	ldr	r3, [pc, #56]	; (eda8 <am_ctimer_isr+0x48>)
    ed70:	781b      	ldrb	r3, [r3, #0]
    ed72:	b2db      	uxtb	r3, r3
    ed74:	2b01      	cmp	r3, #1
    ed76:	d10f      	bne.n	ed98 <am_ctimer_isr+0x38>
    {
        g_ui32DebounceTimerCount++;
    ed78:	4b0c      	ldr	r3, [pc, #48]	; (edac <am_ctimer_isr+0x4c>)
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	3301      	adds	r3, #1
    ed7e:	4a0b      	ldr	r2, [pc, #44]	; (edac <am_ctimer_isr+0x4c>)
    ed80:	6013      	str	r3, [r2, #0]

        if(g_ui32DebounceTimerCount > 300)
    ed82:	4b0a      	ldr	r3, [pc, #40]	; (edac <am_ctimer_isr+0x4c>)
    ed84:	681b      	ldr	r3, [r3, #0]
    ed86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ed8a:	d905      	bls.n	ed98 <am_ctimer_isr+0x38>
        {
            g_sysKeyValue = AM_APP_KEY_0;
    ed8c:	4b08      	ldr	r3, [pc, #32]	; (edb0 <am_ctimer_isr+0x50>)
    ed8e:	2201      	movs	r2, #1
    ed90:	701a      	strb	r2, [r3, #0]
            g_ui8DebounceFlag = 0;
    ed92:	4b05      	ldr	r3, [pc, #20]	; (eda8 <am_ctimer_isr+0x48>)
    ed94:	2200      	movs	r2, #0
    ed96:	701a      	strb	r2, [r3, #0]
    } 

    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    ed98:	2001      	movs	r0, #1
    ed9a:	f000 fd1f 	bl	f7dc <am_hal_ctimer_int_clear>
}
    ed9e:	bf00      	nop
    eda0:	bd80      	pop	{r7, pc}
    eda2:	bf00      	nop
    eda4:	1000c154 	.word	0x1000c154
    eda8:	1000c158 	.word	0x1000c158
    edac:	1000c15c 	.word	0x1000c15c
    edb0:	1000c160 	.word	0x1000c160

0000edb4 <am_gpio_isr>:
//*****************************************************************************
// GPIO ISR
// Will enable the PDM, set number of frames transferred to 0, and turn on LED
//*****************************************************************************
void am_gpio_isr(void) 
{
    edb4:	b580      	push	{r7, lr}
    edb6:	af00      	add	r7, sp, #0
    //
    // debounce.
    //
    if(g_ui8DebounceFlag == 0)
    edb8:	4b09      	ldr	r3, [pc, #36]	; (ede0 <am_gpio_isr+0x2c>)
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	b2db      	uxtb	r3, r3
    edbe:	2b00      	cmp	r3, #0
    edc0:	d105      	bne.n	edce <am_gpio_isr+0x1a>
    {
        g_ui8DebounceFlag = 1;
    edc2:	4b07      	ldr	r3, [pc, #28]	; (ede0 <am_gpio_isr+0x2c>)
    edc4:	2201      	movs	r2, #1
    edc6:	701a      	strb	r2, [r3, #0]
        g_ui32DebounceTimerCount = 0;
    edc8:	4b06      	ldr	r3, [pc, #24]	; (ede4 <am_gpio_isr+0x30>)
    edca:	2200      	movs	r2, #0
    edcc:	601a      	str	r2, [r3, #0]
    }  
    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    edce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    edd2:	f04f 0100 	mov.w	r1, #0
    edd6:	f7fe fc1b 	bl	d610 <am_hal_gpio_interrupt_clear>

}
    edda:	bf00      	nop
    eddc:	bd80      	pop	{r7, pc}
    edde:	bf00      	nop
    ede0:	1000c158 	.word	0x1000c158
    ede4:	1000c15c 	.word	0x1000c15c

0000ede8 <__NVIC_EnableIRQ>:
{
    ede8:	b480      	push	{r7}
    edea:	b083      	sub	sp, #12
    edec:	af00      	add	r7, sp, #0
    edee:	4603      	mov	r3, r0
    edf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    edf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    edf6:	2b00      	cmp	r3, #0
    edf8:	db0b      	blt.n	ee12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    edfa:	79fb      	ldrb	r3, [r7, #7]
    edfc:	f003 021f 	and.w	r2, r3, #31
    ee00:	4907      	ldr	r1, [pc, #28]	; (ee20 <__NVIC_EnableIRQ+0x38>)
    ee02:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ee06:	095b      	lsrs	r3, r3, #5
    ee08:	2001      	movs	r0, #1
    ee0a:	fa00 f202 	lsl.w	r2, r0, r2
    ee0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee12:	bf00      	nop
    ee14:	370c      	adds	r7, #12
    ee16:	46bd      	mov	sp, r7
    ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee1c:	4770      	bx	lr
    ee1e:	bf00      	nop
    ee20:	e000e100 	.word	0xe000e100

0000ee24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    ee24:	b480      	push	{r7}
    ee26:	b083      	sub	sp, #12
    ee28:	af00      	add	r7, sp, #0
    ee2a:	4603      	mov	r3, r0
    ee2c:	6039      	str	r1, [r7, #0]
    ee2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    ee30:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ee34:	2b00      	cmp	r3, #0
    ee36:	db0a      	blt.n	ee4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee38:	683b      	ldr	r3, [r7, #0]
    ee3a:	b2da      	uxtb	r2, r3
    ee3c:	490c      	ldr	r1, [pc, #48]	; (ee70 <__NVIC_SetPriority+0x4c>)
    ee3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ee42:	0152      	lsls	r2, r2, #5
    ee44:	b2d2      	uxtb	r2, r2
    ee46:	440b      	add	r3, r1
    ee48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    ee4c:	e00a      	b.n	ee64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee4e:	683b      	ldr	r3, [r7, #0]
    ee50:	b2da      	uxtb	r2, r3
    ee52:	4908      	ldr	r1, [pc, #32]	; (ee74 <__NVIC_SetPriority+0x50>)
    ee54:	79fb      	ldrb	r3, [r7, #7]
    ee56:	f003 030f 	and.w	r3, r3, #15
    ee5a:	3b04      	subs	r3, #4
    ee5c:	0152      	lsls	r2, r2, #5
    ee5e:	b2d2      	uxtb	r2, r2
    ee60:	440b      	add	r3, r1
    ee62:	761a      	strb	r2, [r3, #24]
}
    ee64:	bf00      	nop
    ee66:	370c      	adds	r7, #12
    ee68:	46bd      	mov	sp, r7
    ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ee6e:	4770      	bx	lr
    ee70:	e000e100 	.word	0xe000e100
    ee74:	e000ed00 	.word	0xe000ed00

0000ee78 <am_app_AEP_pdm_init>:

//*****************************************************************************
// PDM initialization.
//*****************************************************************************
void am_app_AEP_pdm_init(void) 
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b08a      	sub	sp, #40	; 0x28
    ee7c:	af00      	add	r7, sp, #0
  //
  // Configure the necessary pins.
  //
  am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ee7e:	2300      	movs	r3, #0
    ee80:	627b      	str	r3, [r7, #36]	; 0x24

  // ARPIT 181019
  // sPinCfg.uFuncSel = AM_HAL_PIN_10_PDMCLK;
  // am_hal_gpio_pinconfig(10, sPinCfg);
  sPinCfg.uFuncSel = AM_HAL_PIN_12_PDMCLK;
    ee82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ee86:	2205      	movs	r2, #5
    ee88:	f362 0302 	bfi	r3, r2, #0, #3
    ee8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(12, sPinCfg);
    ee90:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ee92:	200c      	movs	r0, #12
    ee94:	f7fe f8ba 	bl	d00c <am_hal_gpio_pinconfig>

  sPinCfg.uFuncSel = AM_HAL_PIN_11_PDMDATA;
    ee98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    ee9c:	f043 0307 	orr.w	r3, r3, #7
    eea0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  am_hal_gpio_pinconfig(11, sPinCfg);
    eea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    eea6:	200b      	movs	r0, #11
    eea8:	f7fe f8b0 	bl	d00c <am_hal_gpio_pinconfig>


    am_hal_pdm_config_t g_sPdmConfig = {
    eeac:	1d3b      	adds	r3, r7, #4
    eeae:	2220      	movs	r2, #32
    eeb0:	2100      	movs	r1, #0
    eeb2:	4618      	mov	r0, r3
    eeb4:	f001 fadc 	bl	10470 <memset>
    eeb8:	230b      	movs	r3, #11
    eeba:	717b      	strb	r3, [r7, #5]
    eebc:	230b      	movs	r3, #11
    eebe:	71bb      	strb	r3, [r7, #6]
    eec0:	2318      	movs	r3, #24
    eec2:	60bb      	str	r3, [r7, #8]
    eec4:	2304      	movs	r3, #4
    eec6:	613b      	str	r3, [r7, #16]
    eec8:	2305      	movs	r3, #5
    eeca:	753b      	strb	r3, [r7, #20]
    eecc:	2301      	movs	r3, #1
    eece:	763b      	strb	r3, [r7, #24]
    eed0:	2303      	movs	r3, #3
    eed2:	767b      	strb	r3, [r7, #25]
    eed4:	2301      	movs	r3, #1
    eed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    };
    
//
  // Initialize, power-up, and configure the PDM.
  //
    am_hal_pdm_initialize(0, &PDMHandle);
    eeda:	491a      	ldr	r1, [pc, #104]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    eedc:	2000      	movs	r0, #0
    eede:	f7fd fd5f 	bl	c9a0 <am_hal_pdm_initialize>
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    eee2:	4b18      	ldr	r3, [pc, #96]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    eee4:	681b      	ldr	r3, [r3, #0]
    eee6:	2200      	movs	r2, #0
    eee8:	2100      	movs	r1, #0
    eeea:	4618      	mov	r0, r3
    eeec:	f7fd fdb6 	bl	ca5c <am_hal_pdm_power_control>
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    eef0:	4b14      	ldr	r3, [pc, #80]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    eef2:	681b      	ldr	r3, [r3, #0]
    eef4:	1d3a      	adds	r2, r7, #4
    eef6:	4611      	mov	r1, r2
    eef8:	4618      	mov	r0, r3
    eefa:	f7fd fe17 	bl	cb2c <am_hal_pdm_configure>
    am_hal_pdm_fifo_flush(PDMHandle);
    eefe:	4b11      	ldr	r3, [pc, #68]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    ef00:	681b      	ldr	r3, [r3, #0]
    ef02:	4618      	mov	r0, r3
    ef04:	f7fd ffa4 	bl	ce50 <am_hal_pdm_fifo_flush>


  am_hal_pdm_enable(PDMHandle);
    ef08:	4b0e      	ldr	r3, [pc, #56]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	4618      	mov	r0, r3
    ef0e:	f7fd fee9 	bl	cce4 <am_hal_pdm_enable>

  //
  // Configure and enable PDM interrupts (set up to trigger on DMA
  // completion).
  //
  am_hal_pdm_interrupt_enable(PDMHandle,
    ef12:	4b0c      	ldr	r3, [pc, #48]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    ef14:	681b      	ldr	r3, [r3, #0]
    ef16:	211e      	movs	r1, #30
    ef18:	4618      	mov	r0, r3
    ef1a:	f7fd ffc3 	bl	cea4 <am_hal_pdm_interrupt_enable>
                              (AM_HAL_PDM_INT_DERR | AM_HAL_PDM_INT_DCMP |
                               AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF));

#if AM_CMSIS_REGS
    NVIC_SetPriority(PDM_IRQn, 4);
    ef1e:	2104      	movs	r1, #4
    ef20:	2013      	movs	r0, #19
    ef22:	f7ff ff7f 	bl	ee24 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PDM_IRQn);
    ef26:	2013      	movs	r0, #19
    ef28:	f7ff ff5e 	bl	ede8 <__NVIC_EnableIRQ>


    //
    // Enable PDM
    //
    am_hal_pdm_enable(PDMHandle);
    ef2c:	4b05      	ldr	r3, [pc, #20]	; (ef44 <am_app_AEP_pdm_init+0xcc>)
    ef2e:	681b      	ldr	r3, [r3, #0]
    ef30:	4618      	mov	r0, r3
    ef32:	f7fd fed7 	bl	cce4 <am_hal_pdm_enable>
    pdm_trigger_dma();
    ef36:	f000 f807 	bl	ef48 <pdm_trigger_dma>

}
    ef3a:	bf00      	nop
    ef3c:	3728      	adds	r7, #40	; 0x28
    ef3e:	46bd      	mov	sp, r7
    ef40:	bd80      	pop	{r7, pc}
    ef42:	bf00      	nop
    ef44:	1001c0b4 	.word	0x1001c0b4

0000ef48 <pdm_trigger_dma>:
  // Start the data transfer.
  //
//  am_hal_pdm_dma_start(PDMHandle, &sTransfer);
//}
void pdm_trigger_dma(void)
{
    ef48:	b580      	push	{r7, lr}
    ef4a:	b082      	sub	sp, #8
    ef4c:	af00      	add	r7, sp, #0
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PCMDataBuff;
    ef4e:	4b08      	ldr	r3, [pc, #32]	; (ef70 <pdm_trigger_dma+0x28>)
    ef50:	603b      	str	r3, [r7, #0]
    sTransfer.ui32TotalCount = (PCM_FRAME_SIZE * PCM_DATA_BYTES);
    ef52:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    ef56:	607b      	str	r3, [r7, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    ef58:	4b06      	ldr	r3, [pc, #24]	; (ef74 <pdm_trigger_dma+0x2c>)
    ef5a:	681b      	ldr	r3, [r3, #0]
    ef5c:	463a      	mov	r2, r7
    ef5e:	4611      	mov	r1, r2
    ef60:	4618      	mov	r0, r3
    ef62:	f7fd fef1 	bl	cd48 <am_hal_pdm_dma_start>
}
    ef66:	bf00      	nop
    ef68:	3708      	adds	r7, #8
    ef6a:	46bd      	mov	sp, r7
    ef6c:	bd80      	pop	{r7, pc}
    ef6e:	bf00      	nop
    ef70:	1001bbb4 	.word	0x1001bbb4
    ef74:	1001c0b4 	.word	0x1001c0b4

0000ef78 <am_pdm0_isr>:
//
// PDM interrupt handler.
//
//*****************************************************************************
void am_pdm0_isr(void) 
{
    ef78:	b580      	push	{r7, lr}
    ef7a:	b082      	sub	sp, #8
    ef7c:	af00      	add	r7, sp, #0
#endif
    uint32_t ui32Status;
    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    ef7e:	4b22      	ldr	r3, [pc, #136]	; (f008 <am_pdm0_isr+0x90>)
    ef80:	681b      	ldr	r3, [r3, #0]
    ef82:	1d39      	adds	r1, r7, #4
    ef84:	2201      	movs	r2, #1
    ef86:	4618      	mov	r0, r3
    ef88:	f7fd ffe8 	bl	cf5c <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    ef8c:	4b1e      	ldr	r3, [pc, #120]	; (f008 <am_pdm0_isr+0x90>)
    ef8e:	681b      	ldr	r3, [r3, #0]
    ef90:	687a      	ldr	r2, [r7, #4]
    ef92:	4611      	mov	r1, r2
    ef94:	4618      	mov	r0, r3
    ef96:	f7fd ffb5 	bl	cf04 <am_hal_pdm_interrupt_clear>
    
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    ef9a:	687b      	ldr	r3, [r7, #4]
    ef9c:	f003 0308 	and.w	r3, r3, #8
    efa0:	2b00      	cmp	r3, #0
    efa2:	d023      	beq.n	efec <am_pdm0_isr+0x74>
    {
        // trigger next traction
        PDMn(0)->DMATOTCOUNT = PCM_FRAME_SIZE*PCM_DATA_BYTES;  // FIFO unit in bytes
    efa4:	4b19      	ldr	r3, [pc, #100]	; (f00c <am_pdm0_isr+0x94>)
    efa6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    efaa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
        
        if((g_ui8MicCalFlag == 1) && (g_ui8PcmDataReadyFlag==0))
    efae:	4b18      	ldr	r3, [pc, #96]	; (f010 <am_pdm0_isr+0x98>)
    efb0:	781b      	ldrb	r3, [r3, #0]
    efb2:	2b01      	cmp	r3, #1
    efb4:	d124      	bne.n	f000 <am_pdm0_isr+0x88>
    efb6:	4b17      	ldr	r3, [pc, #92]	; (f014 <am_pdm0_isr+0x9c>)
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	b2db      	uxtb	r3, r3
    efbc:	2b00      	cmp	r3, #0
    efbe:	d11f      	bne.n	f000 <am_pdm0_isr+0x88>
        {
            am_app_utils_ring_buffer_push(&am_sys_ring_buffers[AM_APP_RINGBUFF_PCM], (void*)g_ui32PCMDataBuff, PCM_FRAME_SIZE*PCM_DATA_BYTES);
    efc0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    efc4:	4914      	ldr	r1, [pc, #80]	; (f018 <am_pdm0_isr+0xa0>)
    efc6:	4815      	ldr	r0, [pc, #84]	; (f01c <am_pdm0_isr+0xa4>)
    efc8:	f7ff fb18 	bl	e5fc <am_app_utils_ring_buffer_push>
            g_ui32SampleNum += PCM_FRAME_SIZE;
    efcc:	4b14      	ldr	r3, [pc, #80]	; (f020 <am_pdm0_isr+0xa8>)
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    efd4:	4a12      	ldr	r2, [pc, #72]	; (f020 <am_pdm0_isr+0xa8>)
    efd6:	6013      	str	r3, [r2, #0]
            if(g_ui32SampleNum >= g_ui32WindowLen)
    efd8:	4b11      	ldr	r3, [pc, #68]	; (f020 <am_pdm0_isr+0xa8>)
    efda:	681a      	ldr	r2, [r3, #0]
    efdc:	4b11      	ldr	r3, [pc, #68]	; (f024 <am_pdm0_isr+0xac>)
    efde:	681b      	ldr	r3, [r3, #0]
    efe0:	429a      	cmp	r2, r3
    efe2:	d30d      	bcc.n	f000 <am_pdm0_isr+0x88>
            {
                g_ui8PcmDataReadyFlag = 1;
    efe4:	4b0b      	ldr	r3, [pc, #44]	; (f014 <am_pdm0_isr+0x9c>)
    efe6:	2201      	movs	r2, #1
    efe8:	701a      	strb	r2, [r3, #0]

#if configUSE_SYSVIEW
    SEGGER_SYSVIEW_RecordExitISR(); //emit Exit ISR signal
#endif

}
    efea:	e009      	b.n	f000 <am_pdm0_isr+0x88>
    else if(ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF))
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	f003 0306 	and.w	r3, r3, #6
    eff2:	2b00      	cmp	r3, #0
    eff4:	d004      	beq.n	f000 <am_pdm0_isr+0x88>
        am_hal_pdm_fifo_flush(PDMHandle);
    eff6:	4b04      	ldr	r3, [pc, #16]	; (f008 <am_pdm0_isr+0x90>)
    eff8:	681b      	ldr	r3, [r3, #0]
    effa:	4618      	mov	r0, r3
    effc:	f7fd ff28 	bl	ce50 <am_hal_pdm_fifo_flush>
}
    f000:	bf00      	nop
    f002:	3708      	adds	r7, #8
    f004:	46bd      	mov	sp, r7
    f006:	bd80      	pop	{r7, pc}
    f008:	1001c0b4 	.word	0x1001c0b4
    f00c:	50011000 	.word	0x50011000
    f010:	1000c163 	.word	0x1000c163
    f014:	1000c161 	.word	0x1000c161
    f018:	1001bbb4 	.word	0x1001bbb4
    f01c:	1001bba0 	.word	0x1001bba0
    f020:	1000c164 	.word	0x1000c164
    f024:	1000c014 	.word	0x1000c014

0000f028 <am_pcm_amplitude_mean_calc>:
//
//
//}

void am_pcm_amplitude_mean_calc(am_app_utils_ring_buffer_t* buff, bool LRswap, uint32_t window_len, float* LR_mean_array)
{
    f028:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
    f02c:	b08c      	sub	sp, #48	; 0x30
    f02e:	af00      	add	r7, sp, #0
    f030:	60f8      	str	r0, [r7, #12]
    f032:	607a      	str	r2, [r7, #4]
    f034:	603b      	str	r3, [r7, #0]
    f036:	460b      	mov	r3, r1
    f038:	72fb      	strb	r3, [r7, #11]
    uint64_t ui64LeftSum = 0;
    f03a:	f04f 0300 	mov.w	r3, #0
    f03e:	f04f 0400 	mov.w	r4, #0
    f042:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    uint64_t ui64RightSum = 0;
    f046:	f04f 0300 	mov.w	r3, #0
    f04a:	f04f 0400 	mov.w	r4, #0
    f04e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    uint32_t RegisterValue = 0;
    f052:	2300      	movs	r3, #0
    f054:	617b      	str	r3, [r7, #20]
    int16_t LeftPcmValue = 0;
    f056:	2300      	movs	r3, #0
    f058:	83fb      	strh	r3, [r7, #30]
    int16_t RightPcmValue = 0;
    f05a:	2300      	movs	r3, #0
    f05c:	83bb      	strh	r3, [r7, #28]
    uint32_t indx = 0;
    f05e:	2300      	movs	r3, #0
    f060:	61bb      	str	r3, [r7, #24]
    for(indx=0; indx<window_len; indx++)
    f062:	2300      	movs	r3, #0
    f064:	61bb      	str	r3, [r7, #24]
    f066:	e055      	b.n	f114 <am_pcm_amplitude_mean_calc+0xec>
    {
        am_app_utils_ring_buffer_pop(buff, &RegisterValue, 4);
    f068:	f107 0314 	add.w	r3, r7, #20
    f06c:	2204      	movs	r2, #4
    f06e:	4619      	mov	r1, r3
    f070:	68f8      	ldr	r0, [r7, #12]
    f072:	f7ff fb71 	bl	e758 <am_app_utils_ring_buffer_pop>
        if(LRswap)
    f076:	7afb      	ldrb	r3, [r7, #11]
    f078:	2b00      	cmp	r3, #0
    f07a:	d005      	beq.n	f088 <am_pcm_amplitude_mean_calc+0x60>
        {
            LeftPcmValue = (int16_t)((RegisterValue >> 16) & 0xffff);
    f07c:	697b      	ldr	r3, [r7, #20]
    f07e:	0c1b      	lsrs	r3, r3, #16
    f080:	83fb      	strh	r3, [r7, #30]
            RightPcmValue = (int16_t)(RegisterValue & 0xffff);
    f082:	697b      	ldr	r3, [r7, #20]
    f084:	83bb      	strh	r3, [r7, #28]
    f086:	e004      	b.n	f092 <am_pcm_amplitude_mean_calc+0x6a>
        }
        else
        {
            RightPcmValue = (int16_t)((RegisterValue >> 16) & 0xffff);
    f088:	697b      	ldr	r3, [r7, #20]
    f08a:	0c1b      	lsrs	r3, r3, #16
    f08c:	83bb      	strh	r3, [r7, #28]
            LeftPcmValue = (int16_t)(RegisterValue & 0xffff);
    f08e:	697b      	ldr	r3, [r7, #20]
    f090:	83fb      	strh	r3, [r7, #30]
        }
        if(LeftPcmValue >= 0)
    f092:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    f096:	2b00      	cmp	r3, #0
    f098:	db0c      	blt.n	f0b4 <am_pcm_amplitude_mean_calc+0x8c>
        {
            ui64LeftSum += LeftPcmValue;
    f09a:	f9b7 b01e 	ldrsh.w	fp, [r7, #30]
    f09e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
    f0a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    f0a6:	eb1b 0301 	adds.w	r3, fp, r1
    f0aa:	eb4c 0402 	adc.w	r4, ip, r2
    f0ae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    f0b2:	e00d      	b.n	f0d0 <am_pcm_amplitude_mean_calc+0xa8>
        }
        else
        {
            ui64LeftSum -= LeftPcmValue;
    f0b4:	f9b7 b01e 	ldrsh.w	fp, [r7, #30]
    f0b8:	ea4f 7ceb 	mov.w	ip, fp, asr #31
    f0bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    f0c0:	460b      	mov	r3, r1
    f0c2:	4614      	mov	r4, r2
    f0c4:	ebb3 030b 	subs.w	r3, r3, fp
    f0c8:	eb64 040c 	sbc.w	r4, r4, ip
    f0cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        }
            
        if(RightPcmValue >= 0)
    f0d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    f0d4:	2b00      	cmp	r3, #0
    f0d6:	db0c      	blt.n	f0f2 <am_pcm_amplitude_mean_calc+0xca>
        {
            ui64RightSum += RightPcmValue;
    f0d8:	f9b7 b01c 	ldrsh.w	fp, [r7, #28]
    f0dc:	ea4f 7ceb 	mov.w	ip, fp, asr #31
    f0e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    f0e4:	eb1b 0301 	adds.w	r3, fp, r1
    f0e8:	eb4c 0402 	adc.w	r4, ip, r2
    f0ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
    f0f0:	e00d      	b.n	f10e <am_pcm_amplitude_mean_calc+0xe6>
        }
        else
        {
            ui64RightSum -= RightPcmValue;
    f0f2:	f9b7 b01c 	ldrsh.w	fp, [r7, #28]
    f0f6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
    f0fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    f0fe:	460b      	mov	r3, r1
    f100:	4614      	mov	r4, r2
    f102:	ebb3 030b 	subs.w	r3, r3, fp
    f106:	eb64 040c 	sbc.w	r4, r4, ip
    f10a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    for(indx=0; indx<window_len; indx++)
    f10e:	69bb      	ldr	r3, [r7, #24]
    f110:	3301      	adds	r3, #1
    f112:	61bb      	str	r3, [r7, #24]
    f114:	69ba      	ldr	r2, [r7, #24]
    f116:	687b      	ldr	r3, [r7, #4]
    f118:	429a      	cmp	r2, r3
    f11a:	d3a5      	bcc.n	f068 <am_pcm_amplitude_mean_calc+0x40>
        }

    }

    LR_mean_array[0] = ui64LeftSum / window_len;
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	f04f 0400 	mov.w	r4, #0
    f122:	461a      	mov	r2, r3
    f124:	4623      	mov	r3, r4
    f126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    f12a:	f7fd fb9d 	bl	c868 <__aeabi_uldivmod>
    f12e:	4603      	mov	r3, r0
    f130:	460c      	mov	r4, r1
    f132:	4618      	mov	r0, r3
    f134:	4621      	mov	r1, r4
    f136:	f7fd fb51 	bl	c7dc <__aeabi_ul2f>
    f13a:	4602      	mov	r2, r0
    f13c:	683b      	ldr	r3, [r7, #0]
    f13e:	601a      	str	r2, [r3, #0]
    LR_mean_array[1] = ui64RightSum / window_len;
    f140:	687b      	ldr	r3, [r7, #4]
    f142:	f04f 0400 	mov.w	r4, #0
    f146:	461a      	mov	r2, r3
    f148:	4623      	mov	r3, r4
    f14a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    f14e:	f7fd fb8b 	bl	c868 <__aeabi_uldivmod>
    f152:	4603      	mov	r3, r0
    f154:	460c      	mov	r4, r1
    f156:	4619      	mov	r1, r3
    f158:	4622      	mov	r2, r4
    f15a:	683b      	ldr	r3, [r7, #0]
    f15c:	1d1c      	adds	r4, r3, #4
    f15e:	4608      	mov	r0, r1
    f160:	4611      	mov	r1, r2
    f162:	f7fd fb3b 	bl	c7dc <__aeabi_ul2f>
    f166:	4603      	mov	r3, r0
    f168:	6023      	str	r3, [r4, #0]
}
    f16a:	bf00      	nop
    f16c:	3730      	adds	r7, #48	; 0x30
    f16e:	46bd      	mov	sp, r7
    f170:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0000f174 <am_audio_mikro_balance>:
// data_bit: sample data bit
// window_len: window lenth of the average value 
// scalar[2]: calculated scalar value [left_scalar, right_scalar]

void am_audio_mikro_balance(am_app_utils_ring_buffer_t* buff, uint32_t window_len, bool LRswap, uint8_t ref, float thr,  float* scalar)
{
    f174:	b5f0      	push	{r4, r5, r6, r7, lr}
    f176:	b089      	sub	sp, #36	; 0x24
    f178:	af02      	add	r7, sp, #8
    f17a:	60f8      	str	r0, [r7, #12]
    f17c:	60b9      	str	r1, [r7, #8]
    f17e:	4611      	mov	r1, r2
    f180:	461a      	mov	r2, r3
    f182:	ed87 0a00 	vstr	s0, [r7]
    f186:	460b      	mov	r3, r1
    f188:	71fb      	strb	r3, [r7, #7]
    f18a:	4613      	mov	r3, r2
    f18c:	71bb      	strb	r3, [r7, #6]
    float LRmeanArray[2];
    
    am_pcm_amplitude_mean_calc(buff, LRswap, window_len, LRmeanArray);
    f18e:	f107 0310 	add.w	r3, r7, #16
    f192:	79f9      	ldrb	r1, [r7, #7]
    f194:	68ba      	ldr	r2, [r7, #8]
    f196:	68f8      	ldr	r0, [r7, #12]
    f198:	f7ff ff46 	bl	f028 <am_pcm_amplitude_mean_calc>

    am_util_stdio_printf("The left channel mean value: %f and right channel mean value: %f. \r\n", LRmeanArray[0], LRmeanArray[1]);
    f19c:	693b      	ldr	r3, [r7, #16]
    f19e:	4618      	mov	r0, r3
    f1a0:	f7fd f9ac 	bl	c4fc <__aeabi_f2d>
    f1a4:	4605      	mov	r5, r0
    f1a6:	460e      	mov	r6, r1
    f1a8:	697b      	ldr	r3, [r7, #20]
    f1aa:	4618      	mov	r0, r3
    f1ac:	f7fd f9a6 	bl	c4fc <__aeabi_f2d>
    f1b0:	4603      	mov	r3, r0
    f1b2:	460c      	mov	r4, r1
    f1b4:	e9cd 3400 	strd	r3, r4, [sp]
    f1b8:	462a      	mov	r2, r5
    f1ba:	4633      	mov	r3, r6
    f1bc:	483b      	ldr	r0, [pc, #236]	; (f2ac <am_audio_mikro_balance+0x138>)
    f1be:	f7ff f993 	bl	e4e8 <am_util_stdio_printf>
        
    if(((LRmeanArray[1] - LRmeanArray[0]) >= thr) || ((LRmeanArray[0] - LRmeanArray[1]) >= thr))
    f1c2:	ed97 7a05 	vldr	s14, [r7, #20]
    f1c6:	edd7 7a04 	vldr	s15, [r7, #16]
    f1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    f1ce:	ed97 7a00 	vldr	s14, [r7]
    f1d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    f1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1da:	d90d      	bls.n	f1f8 <am_audio_mikro_balance+0x84>
    f1dc:	ed97 7a04 	vldr	s14, [r7, #16]
    f1e0:	edd7 7a05 	vldr	s15, [r7, #20]
    f1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    f1e8:	ed97 7a00 	vldr	s14, [r7]
    f1ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
    f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1f4:	d900      	bls.n	f1f8 <am_audio_mikro_balance+0x84>
            scalar[0] = 1;
            am_util_stdio_printf("Take left channel as reference. \r\n");
            am_util_stdio_printf("the left scalar: %f and the right scalar: %f. \r\n", scalar[0], scalar[1]);
        }
    }
}
    f1f6:	e054      	b.n	f2a2 <am_audio_mikro_balance+0x12e>
        if(ref == 1)
    f1f8:	79bb      	ldrb	r3, [r7, #6]
    f1fa:	2b01      	cmp	r3, #1
    f1fc:	d127      	bne.n	f24e <am_audio_mikro_balance+0xda>
            scalar[0] = LRmeanArray[1] / LRmeanArray[0];
    f1fe:	edd7 6a05 	vldr	s13, [r7, #20]
    f202:	ed97 7a04 	vldr	s14, [r7, #16]
    f206:	eec6 7a87 	vdiv.f32	s15, s13, s14
    f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f20c:	edc3 7a00 	vstr	s15, [r3]
            scalar[1] = 1;
    f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f212:	3304      	adds	r3, #4
    f214:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f218:	601a      	str	r2, [r3, #0]
            am_util_stdio_printf("Take right channel as reference. \r\n");
    f21a:	4825      	ldr	r0, [pc, #148]	; (f2b0 <am_audio_mikro_balance+0x13c>)
    f21c:	f7ff f964 	bl	e4e8 <am_util_stdio_printf>
            am_util_stdio_printf("the left scalar: %f and the right scalar: %f. \r\n", scalar[0], scalar[1]);
    f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f222:	681b      	ldr	r3, [r3, #0]
    f224:	4618      	mov	r0, r3
    f226:	f7fd f969 	bl	c4fc <__aeabi_f2d>
    f22a:	4605      	mov	r5, r0
    f22c:	460e      	mov	r6, r1
    f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f230:	3304      	adds	r3, #4
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	4618      	mov	r0, r3
    f236:	f7fd f961 	bl	c4fc <__aeabi_f2d>
    f23a:	4603      	mov	r3, r0
    f23c:	460c      	mov	r4, r1
    f23e:	e9cd 3400 	strd	r3, r4, [sp]
    f242:	462a      	mov	r2, r5
    f244:	4633      	mov	r3, r6
    f246:	481b      	ldr	r0, [pc, #108]	; (f2b4 <am_audio_mikro_balance+0x140>)
    f248:	f7ff f94e 	bl	e4e8 <am_util_stdio_printf>
}
    f24c:	e029      	b.n	f2a2 <am_audio_mikro_balance+0x12e>
        else if(ref == 0)
    f24e:	79bb      	ldrb	r3, [r7, #6]
    f250:	2b00      	cmp	r3, #0
    f252:	d126      	bne.n	f2a2 <am_audio_mikro_balance+0x12e>
            scalar[1] = LRmeanArray[1] / LRmeanArray[0];
    f254:	edd7 6a05 	vldr	s13, [r7, #20]
    f258:	ed97 7a04 	vldr	s14, [r7, #16]
    f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f25e:	3304      	adds	r3, #4
    f260:	eec6 7a87 	vdiv.f32	s15, s13, s14
    f264:	edc3 7a00 	vstr	s15, [r3]
            scalar[0] = 1;
    f268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f26a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f26e:	601a      	str	r2, [r3, #0]
            am_util_stdio_printf("Take left channel as reference. \r\n");
    f270:	4811      	ldr	r0, [pc, #68]	; (f2b8 <am_audio_mikro_balance+0x144>)
    f272:	f7ff f939 	bl	e4e8 <am_util_stdio_printf>
            am_util_stdio_printf("the left scalar: %f and the right scalar: %f. \r\n", scalar[0], scalar[1]);
    f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f278:	681b      	ldr	r3, [r3, #0]
    f27a:	4618      	mov	r0, r3
    f27c:	f7fd f93e 	bl	c4fc <__aeabi_f2d>
    f280:	4605      	mov	r5, r0
    f282:	460e      	mov	r6, r1
    f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f286:	3304      	adds	r3, #4
    f288:	681b      	ldr	r3, [r3, #0]
    f28a:	4618      	mov	r0, r3
    f28c:	f7fd f936 	bl	c4fc <__aeabi_f2d>
    f290:	4603      	mov	r3, r0
    f292:	460c      	mov	r4, r1
    f294:	e9cd 3400 	strd	r3, r4, [sp]
    f298:	462a      	mov	r2, r5
    f29a:	4633      	mov	r3, r6
    f29c:	4805      	ldr	r0, [pc, #20]	; (f2b4 <am_audio_mikro_balance+0x140>)
    f29e:	f7ff f923 	bl	e4e8 <am_util_stdio_printf>
}
    f2a2:	bf00      	nop
    f2a4:	371c      	adds	r7, #28
    f2a6:	46bd      	mov	sp, r7
    f2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2aa:	bf00      	nop
    f2ac:	00010924 	.word	0x00010924
    f2b0:	0001096c 	.word	0x0001096c
    f2b4:	00010990 	.word	0x00010990
    f2b8:	000109c4 	.word	0x000109c4

0000f2bc <am_bsp_uart_string_print>:
    f2bc:	b510      	push	{r4, lr}
    f2be:	b086      	sub	sp, #24
    f2c0:	7803      	ldrb	r3, [r0, #0]
    f2c2:	2400      	movs	r4, #0
    f2c4:	9400      	str	r4, [sp, #0]
    f2c6:	b1bb      	cbz	r3, f2f8 <am_bsp_uart_string_print+0x3c>
    f2c8:	4603      	mov	r3, r0
    f2ca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f2ce:	3401      	adds	r4, #1
    f2d0:	2a00      	cmp	r2, #0
    f2d2:	d1fa      	bne.n	f2ca <am_bsp_uart_string_print+0xe>
    f2d4:	4b0a      	ldr	r3, [pc, #40]	; (f300 <am_bsp_uart_string_print+0x44>)
    f2d6:	9002      	str	r0, [sp, #8]
    f2d8:	2200      	movs	r2, #0
    f2da:	6818      	ldr	r0, [r3, #0]
    f2dc:	9403      	str	r4, [sp, #12]
    f2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2e2:	a901      	add	r1, sp, #4
    f2e4:	9304      	str	r3, [sp, #16]
    f2e6:	9201      	str	r2, [sp, #4]
    f2e8:	f8cd d014 	str.w	sp, [sp, #20]
    f2ec:	f000 fe0a 	bl	ff04 <am_hal_uart_transfer>
    f2f0:	9b00      	ldr	r3, [sp, #0]
    f2f2:	42a3      	cmp	r3, r4
    f2f4:	d002      	beq.n	f2fc <am_bsp_uart_string_print+0x40>
    f2f6:	e7fe      	b.n	f2f6 <am_bsp_uart_string_print+0x3a>
    f2f8:	461c      	mov	r4, r3
    f2fa:	e7eb      	b.n	f2d4 <am_bsp_uart_string_print+0x18>
    f2fc:	b006      	add	sp, #24
    f2fe:	bd10      	pop	{r4, pc}
    f300:	1000c16c 	.word	0x1000c16c

0000f304 <am_bsp_low_power_init>:
    f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f306:	f000 fab5 	bl	f874 <am_hal_itm_disable>
    f30a:	2000      	movs	r0, #0
    f30c:	f7fe fa5c 	bl	d7c8 <am_util_stdio_printf_init>
    f310:	4b12      	ldr	r3, [pc, #72]	; (f35c <am_bsp_low_power_init+0x58>)
    f312:	4f13      	ldr	r7, [pc, #76]	; (f360 <am_bsp_low_power_init+0x5c>)
    f314:	6819      	ldr	r1, [r3, #0]
    f316:	2029      	movs	r0, #41	; 0x29
    f318:	f7fd fe78 	bl	d00c <am_hal_gpio_pinconfig>
    f31c:	f000 fbec 	bl	faf8 <am_hal_pwrctrl_low_power_init>
    f320:	2001      	movs	r0, #1
    f322:	f000 fc33 	bl	fb8c <am_hal_rtc_osc_select>
    f326:	2100      	movs	r1, #0
    f328:	2003      	movs	r0, #3
    f32a:	f000 f8f5 	bl	f518 <am_hal_clkgen_control>
    f32e:	f000 fc39 	bl	fba4 <am_hal_rtc_osc_disable>
    f332:	4b0c      	ldr	r3, [pc, #48]	; (f364 <am_bsp_low_power_init+0x60>)
    f334:	681e      	ldr	r6, [r3, #0]
    f336:	2400      	movs	r4, #0
    f338:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    f33c:	4631      	mov	r1, r6
    f33e:	4628      	mov	r0, r5
    f340:	f7fd fe64 	bl	d00c <am_hal_gpio_pinconfig>
    f344:	2103      	movs	r1, #3
    f346:	4628      	mov	r0, r5
    f348:	f7fe f8a0 	bl	d48c <am_hal_gpio_state_write>
    f34c:	3401      	adds	r4, #1
    f34e:	4628      	mov	r0, r5
    f350:	2100      	movs	r1, #0
    f352:	f7fe f89b 	bl	d48c <am_hal_gpio_state_write>
    f356:	2c05      	cmp	r4, #5
    f358:	d1ee      	bne.n	f338 <am_bsp_low_power_init+0x34>
    f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f35c:	000109e8 	.word	0x000109e8
    f360:	1000c018 	.word	0x1000c018
    f364:	000109ec 	.word	0x000109ec

0000f368 <am_bsp_uart_printf_enable>:
    f368:	b510      	push	{r4, lr}
    f36a:	4c10      	ldr	r4, [pc, #64]	; (f3ac <am_bsp_uart_printf_enable+0x44>)
    f36c:	4b10      	ldr	r3, [pc, #64]	; (f3b0 <am_bsp_uart_printf_enable+0x48>)
    f36e:	4621      	mov	r1, r4
    f370:	2202      	movs	r2, #2
    f372:	2000      	movs	r0, #0
    f374:	601a      	str	r2, [r3, #0]
    f376:	f000 fc1f 	bl	fbb8 <am_hal_uart_initialize>
    f37a:	2200      	movs	r2, #0
    f37c:	4611      	mov	r1, r2
    f37e:	6820      	ldr	r0, [r4, #0]
    f380:	f000 fc42 	bl	fc08 <am_hal_uart_power_control>
    f384:	6820      	ldr	r0, [r4, #0]
    f386:	490b      	ldr	r1, [pc, #44]	; (f3b4 <am_bsp_uart_printf_enable+0x4c>)
    f388:	f000 fcb0 	bl	fcec <am_hal_uart_configure>
    f38c:	4b0a      	ldr	r3, [pc, #40]	; (f3b8 <am_bsp_uart_printf_enable+0x50>)
    f38e:	2016      	movs	r0, #22
    f390:	6819      	ldr	r1, [r3, #0]
    f392:	f7fd fe3b 	bl	d00c <am_hal_gpio_pinconfig>
    f396:	4b09      	ldr	r3, [pc, #36]	; (f3bc <am_bsp_uart_printf_enable+0x54>)
    f398:	2017      	movs	r0, #23
    f39a:	6819      	ldr	r1, [r3, #0]
    f39c:	f7fd fe36 	bl	d00c <am_hal_gpio_pinconfig>
    f3a0:	4807      	ldr	r0, [pc, #28]	; (f3c0 <am_bsp_uart_printf_enable+0x58>)
    f3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a6:	f7fe ba0f 	b.w	d7c8 <am_util_stdio_printf_init>
    f3aa:	bf00      	nop
    f3ac:	1000c16c 	.word	0x1000c16c
    f3b0:	1000c168 	.word	0x1000c168
    f3b4:	00010b68 	.word	0x00010b68
    f3b8:	00010b90 	.word	0x00010b90
    f3bc:	00010b94 	.word	0x00010b94
    f3c0:	0000f2bd 	.word	0x0000f2bd

0000f3c4 <am_hal_burst_mode_initialize>:
    f3c4:	b570      	push	{r4, r5, r6, lr}
    f3c6:	4b1e      	ldr	r3, [pc, #120]	; (f440 <am_hal_burst_mode_initialize+0x7c>)
    f3c8:	695a      	ldr	r2, [r3, #20]
    f3ca:	07d5      	lsls	r5, r2, #31
    f3cc:	b082      	sub	sp, #8
    f3ce:	4604      	mov	r4, r0
    f3d0:	d407      	bmi.n	f3e2 <am_hal_burst_mode_initialize+0x1e>
    f3d2:	4a1c      	ldr	r2, [pc, #112]	; (f444 <am_hal_burst_mode_initialize+0x80>)
    f3d4:	2100      	movs	r1, #0
    f3d6:	2301      	movs	r3, #1
    f3d8:	7011      	strb	r1, [r2, #0]
    f3da:	2007      	movs	r0, #7
    f3dc:	7023      	strb	r3, [r4, #0]
    f3de:	b002      	add	sp, #8
    f3e0:	bd70      	pop	{r4, r5, r6, pc}
    f3e2:	4a19      	ldr	r2, [pc, #100]	; (f448 <am_hal_burst_mode_initialize+0x84>)
    f3e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    f3e6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f3ea:	6291      	str	r1, [r2, #40]	; 0x28
    f3ec:	6812      	ldr	r2, [r2, #0]
    f3ee:	07d0      	lsls	r0, r2, #31
    f3f0:	d507      	bpl.n	f402 <am_hal_burst_mode_initialize+0x3e>
    f3f2:	68db      	ldr	r3, [r3, #12]
    f3f4:	b2db      	uxtb	r3, r3
    f3f6:	2b11      	cmp	r3, #17
    f3f8:	d903      	bls.n	f402 <am_hal_burst_mode_initialize+0x3e>
    f3fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f3fe:	4a13      	ldr	r2, [pc, #76]	; (f44c <am_hal_burst_mode_initialize+0x88>)
    f400:	63da      	str	r2, [r3, #60]	; 0x3c
    f402:	4d0f      	ldr	r5, [pc, #60]	; (f440 <am_hal_burst_mode_initialize+0x7c>)
    f404:	4912      	ldr	r1, [pc, #72]	; (f450 <am_hal_burst_mode_initialize+0x8c>)
    f406:	7e2a      	ldrb	r2, [r5, #24]
    f408:	2601      	movs	r6, #1
    f40a:	f042 0210 	orr.w	r2, r2, #16
    f40e:	2320      	movs	r3, #32
    f410:	762a      	strb	r2, [r5, #24]
    f412:	f242 7010 	movw	r0, #10000	; 0x2710
    f416:	461a      	mov	r2, r3
    f418:	9600      	str	r6, [sp, #0]
    f41a:	f000 f9f3 	bl	f804 <am_hal_flash_delay_status_check>
    f41e:	b948      	cbnz	r0, f434 <am_hal_burst_mode_initialize+0x70>
    f420:	69aa      	ldr	r2, [r5, #24]
    f422:	0651      	lsls	r1, r2, #25
    f424:	d5d5      	bpl.n	f3d2 <am_hal_burst_mode_initialize+0xe>
    f426:	69aa      	ldr	r2, [r5, #24]
    f428:	0692      	lsls	r2, r2, #26
    f42a:	d5d2      	bpl.n	f3d2 <am_hal_burst_mode_initialize+0xe>
    f42c:	4a05      	ldr	r2, [pc, #20]	; (f444 <am_hal_burst_mode_initialize+0x80>)
    f42e:	7016      	strb	r6, [r2, #0]
    f430:	7020      	strb	r0, [r4, #0]
    f432:	e7d4      	b.n	f3de <am_hal_burst_mode_initialize+0x1a>
    f434:	4a03      	ldr	r2, [pc, #12]	; (f444 <am_hal_burst_mode_initialize+0x80>)
    f436:	2100      	movs	r1, #0
    f438:	7011      	strb	r1, [r2, #0]
    f43a:	7026      	strb	r6, [r4, #0]
    f43c:	b002      	add	sp, #8
    f43e:	bd70      	pop	{r4, r5, r6, pc}
    f440:	40020000 	.word	0x40020000
    f444:	1000c170 	.word	0x1000c170
    f448:	40021000 	.word	0x40021000
    f44c:	0fc0400f 	.word	0x0fc0400f
    f450:	40020018 	.word	0x40020018

0000f454 <am_hal_burst_mode_enable>:
    f454:	4b14      	ldr	r3, [pc, #80]	; (f4a8 <am_hal_burst_mode_enable+0x54>)
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	b91b      	cbnz	r3, f462 <am_hal_burst_mode_enable+0xe>
    f45a:	2301      	movs	r3, #1
    f45c:	7003      	strb	r3, [r0, #0]
    f45e:	2007      	movs	r0, #7
    f460:	4770      	bx	lr
    f462:	b570      	push	{r4, r5, r6, lr}
    f464:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    f468:	b082      	sub	sp, #8
    f46a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    f46e:	490f      	ldr	r1, [pc, #60]	; (f4ac <am_hal_burst_mode_enable+0x58>)
    f470:	2601      	movs	r6, #1
    f472:	4332      	orrs	r2, r6
    f474:	2304      	movs	r3, #4
    f476:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    f47a:	4604      	mov	r4, r0
    f47c:	461a      	mov	r2, r3
    f47e:	9600      	str	r6, [sp, #0]
    f480:	f242 7010 	movw	r0, #10000	; 0x2710
    f484:	f000 f9be 	bl	f804 <am_hal_flash_delay_status_check>
    f488:	b938      	cbnz	r0, f49a <am_hal_burst_mode_enable+0x46>
    f48a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f48c:	079a      	lsls	r2, r3, #30
    f48e:	d507      	bpl.n	f4a0 <am_hal_burst_mode_enable+0x4c>
    f490:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f492:	075b      	lsls	r3, r3, #29
    f494:	d501      	bpl.n	f49a <am_hal_burst_mode_enable+0x46>
    f496:	7020      	strb	r0, [r4, #0]
    f498:	e000      	b.n	f49c <am_hal_burst_mode_enable+0x48>
    f49a:	7026      	strb	r6, [r4, #0]
    f49c:	b002      	add	sp, #8
    f49e:	bd70      	pop	{r4, r5, r6, pc}
    f4a0:	7026      	strb	r6, [r4, #0]
    f4a2:	4630      	mov	r0, r6
    f4a4:	e7fa      	b.n	f49c <am_hal_burst_mode_enable+0x48>
    f4a6:	bf00      	nop
    f4a8:	1000c170 	.word	0x1000c170
    f4ac:	40004034 	.word	0x40004034

0000f4b0 <am_hal_cachectrl_config>:
    f4b0:	b530      	push	{r4, r5, lr}
    f4b2:	b083      	sub	sp, #12
    f4b4:	4605      	mov	r5, r0
    f4b6:	f000 f9d5 	bl	f864 <am_hal_interrupt_master_disable>
    f4ba:	4c11      	ldr	r4, [pc, #68]	; (f500 <am_hal_cachectrl_config+0x50>)
    f4bc:	9001      	str	r0, [sp, #4]
    f4be:	6823      	ldr	r3, [r4, #0]
    f4c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    f4c4:	6023      	str	r3, [r4, #0]
    f4c6:	9801      	ldr	r0, [sp, #4]
    f4c8:	f000 f9d0 	bl	f86c <am_hal_interrupt_master_set>
    f4cc:	78eb      	ldrb	r3, [r5, #3]
    f4ce:	782a      	ldrb	r2, [r5, #0]
    f4d0:	78a8      	ldrb	r0, [r5, #2]
    f4d2:	7869      	ldrb	r1, [r5, #1]
    f4d4:	005b      	lsls	r3, r3, #1
    f4d6:	0112      	lsls	r2, r2, #4
    f4d8:	b2d2      	uxtb	r2, r2
    f4da:	f003 0302 	and.w	r3, r3, #2
    f4de:	4313      	orrs	r3, r2
    f4e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f4e4:	0080      	lsls	r0, r0, #2
    f4e6:	f000 000c 	and.w	r0, r0, #12
    f4ea:	020a      	lsls	r2, r1, #8
    f4ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f4f0:	4303      	orrs	r3, r0
    f4f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    f4f6:	4313      	orrs	r3, r2
    f4f8:	2000      	movs	r0, #0
    f4fa:	6023      	str	r3, [r4, #0]
    f4fc:	b003      	add	sp, #12
    f4fe:	bd30      	pop	{r4, r5, pc}
    f500:	40018000 	.word	0x40018000

0000f504 <am_hal_cachectrl_enable>:
    f504:	4a03      	ldr	r2, [pc, #12]	; (f514 <am_hal_cachectrl_enable+0x10>)
    f506:	6813      	ldr	r3, [r2, #0]
    f508:	f043 0301 	orr.w	r3, r3, #1
    f50c:	6013      	str	r3, [r2, #0]
    f50e:	2000      	movs	r0, #0
    f510:	4770      	bx	lr
    f512:	bf00      	nop
    f514:	40018000 	.word	0x40018000

0000f518 <am_hal_clkgen_control>:
    f518:	4b32      	ldr	r3, [pc, #200]	; (f5e4 <am_hal_clkgen_control+0xcc>)
    f51a:	681a      	ldr	r2, [r3, #0]
    f51c:	b912      	cbnz	r2, f524 <am_hal_clkgen_control+0xc>
    f51e:	4a32      	ldr	r2, [pc, #200]	; (f5e8 <am_hal_clkgen_control+0xd0>)
    f520:	6812      	ldr	r2, [r2, #0]
    f522:	601a      	str	r2, [r3, #0]
    f524:	2809      	cmp	r0, #9
    f526:	d85a      	bhi.n	f5de <am_hal_clkgen_control+0xc6>
    f528:	e8df f000 	tbb	[pc, r0]
    f52c:	261e160d 	.word	0x261e160d
    f530:	4640362e 	.word	0x4640362e
    f534:	054e      	.short	0x054e
    f536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f53a:	2000      	movs	r0, #0
    f53c:	6a1a      	ldr	r2, [r3, #32]
    f53e:	f36f 0200 	bfc	r2, #0, #1
    f542:	621a      	str	r2, [r3, #32]
    f544:	4770      	bx	lr
    f546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f54a:	2200      	movs	r2, #0
    f54c:	2147      	movs	r1, #71	; 0x47
    f54e:	6159      	str	r1, [r3, #20]
    f550:	4610      	mov	r0, r2
    f552:	619a      	str	r2, [r3, #24]
    f554:	615a      	str	r2, [r3, #20]
    f556:	4770      	bx	lr
    f558:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f55c:	2000      	movs	r0, #0
    f55e:	68d3      	ldr	r3, [r2, #12]
    f560:	f023 0301 	bic.w	r3, r3, #1
    f564:	60d3      	str	r3, [r2, #12]
    f566:	4770      	bx	lr
    f568:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f56c:	2000      	movs	r0, #0
    f56e:	68d3      	ldr	r3, [r2, #12]
    f570:	f023 0302 	bic.w	r3, r3, #2
    f574:	60d3      	str	r3, [r2, #12]
    f576:	4770      	bx	lr
    f578:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f57c:	2000      	movs	r0, #0
    f57e:	68d3      	ldr	r3, [r2, #12]
    f580:	f043 0301 	orr.w	r3, r3, #1
    f584:	60d3      	str	r3, [r2, #12]
    f586:	4770      	bx	lr
    f588:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f58c:	2000      	movs	r0, #0
    f58e:	68d3      	ldr	r3, [r2, #12]
    f590:	f043 0302 	orr.w	r3, r3, #2
    f594:	60d3      	str	r3, [r2, #12]
    f596:	4770      	bx	lr
    f598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f59c:	2200      	movs	r2, #0
    f59e:	2047      	movs	r0, #71	; 0x47
    f5a0:	2101      	movs	r1, #1
    f5a2:	6158      	str	r0, [r3, #20]
    f5a4:	6199      	str	r1, [r3, #24]
    f5a6:	4610      	mov	r0, r2
    f5a8:	615a      	str	r2, [r3, #20]
    f5aa:	4770      	bx	lr
    f5ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f5b0:	2000      	movs	r0, #0
    f5b2:	68da      	ldr	r2, [r3, #12]
    f5b4:	60da      	str	r2, [r3, #12]
    f5b6:	4770      	bx	lr
    f5b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f5bc:	2000      	movs	r0, #0
    f5be:	68d3      	ldr	r3, [r2, #12]
    f5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f5c4:	60d3      	str	r3, [r2, #12]
    f5c6:	4770      	bx	lr
    f5c8:	b139      	cbz	r1, f5da <am_hal_clkgen_control+0xc2>
    f5ca:	680b      	ldr	r3, [r1, #0]
    f5cc:	f043 0301 	orr.w	r3, r3, #1
    f5d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f5d4:	2000      	movs	r0, #0
    f5d6:	6213      	str	r3, [r2, #32]
    f5d8:	4770      	bx	lr
    f5da:	4b04      	ldr	r3, [pc, #16]	; (f5ec <am_hal_clkgen_control+0xd4>)
    f5dc:	e7f8      	b.n	f5d0 <am_hal_clkgen_control+0xb8>
    f5de:	2006      	movs	r0, #6
    f5e0:	4770      	bx	lr
    f5e2:	bf00      	nop
    f5e4:	1000c174 	.word	0x1000c174
    f5e8:	4ffff000 	.word	0x4ffff000
    f5ec:	0025b801 	.word	0x0025b801

0000f5f0 <am_hal_clkgen_status_get>:
    f5f0:	b1a8      	cbz	r0, f61e <am_hal_clkgen_status_get+0x2e>
    f5f2:	b410      	push	{r4}
    f5f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f5f8:	490a      	ldr	r1, [pc, #40]	; (f624 <am_hal_clkgen_status_get+0x34>)
    f5fa:	6994      	ldr	r4, [r2, #24]
    f5fc:	4b0a      	ldr	r3, [pc, #40]	; (f628 <am_hal_clkgen_status_get+0x38>)
    f5fe:	f014 0f01 	tst.w	r4, #1
    f602:	bf08      	it	eq
    f604:	460b      	moveq	r3, r1
    f606:	6003      	str	r3, [r0, #0]
    f608:	69d3      	ldr	r3, [r2, #28]
    f60a:	f85d 4b04 	ldr.w	r4, [sp], #4
    f60e:	f003 0201 	and.w	r2, r3, #1
    f612:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f616:	6042      	str	r2, [r0, #4]
    f618:	7203      	strb	r3, [r0, #8]
    f61a:	2000      	movs	r0, #0
    f61c:	4770      	bx	lr
    f61e:	2006      	movs	r0, #6
    f620:	4770      	bx	lr
    f622:	bf00      	nop
    f624:	02dc6c00 	.word	0x02dc6c00
    f628:	016e3600 	.word	0x016e3600

0000f62c <am_hal_ctimer_config>:
    f62c:	b570      	push	{r4, r5, r6, lr}
    f62e:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    f632:	2a00      	cmp	r2, #0
    f634:	b082      	sub	sp, #8
    f636:	bf18      	it	ne
    f638:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    f63c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    f640:	ea42 0403 	orr.w	r4, r2, r3
    f644:	460d      	mov	r5, r1
    f646:	4606      	mov	r6, r0
    f648:	f000 f90c 	bl	f864 <am_hal_interrupt_master_disable>
    f64c:	4b0d      	ldr	r3, [pc, #52]	; (f684 <am_hal_ctimer_config+0x58>)
    f64e:	9001      	str	r0, [sp, #4]
    f650:	0172      	lsls	r2, r6, #5
    f652:	50d4      	str	r4, [r2, r3]
    f654:	9801      	ldr	r0, [sp, #4]
    f656:	f000 f909 	bl	f86c <am_hal_interrupt_master_set>
    f65a:	686b      	ldr	r3, [r5, #4]
    f65c:	b90b      	cbnz	r3, f662 <am_hal_ctimer_config+0x36>
    f65e:	682a      	ldr	r2, [r5, #0]
    f660:	b142      	cbz	r2, f674 <am_hal_ctimer_config+0x48>
    f662:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f666:	2100      	movs	r1, #0
    f668:	4a07      	ldr	r2, [pc, #28]	; (f688 <am_hal_ctimer_config+0x5c>)
    f66a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    f66e:	5473      	strb	r3, [r6, r1]
    f670:	b002      	add	sp, #8
    f672:	bd70      	pop	{r4, r5, r6, pc}
    f674:	68ab      	ldr	r3, [r5, #8]
    f676:	2b00      	cmp	r3, #0
    f678:	d0fa      	beq.n	f670 <am_hal_ctimer_config+0x44>
    f67a:	f3c3 0344 	ubfx	r3, r3, #1, #5
    f67e:	2101      	movs	r1, #1
    f680:	e7f2      	b.n	f668 <am_hal_ctimer_config+0x3c>
    f682:	bf00      	nop
    f684:	4000800c 	.word	0x4000800c
    f688:	1000c040 	.word	0x1000c040

0000f68c <am_hal_ctimer_start>:
    f68c:	b570      	push	{r4, r5, r6, lr}
    f68e:	b082      	sub	sp, #8
    f690:	460c      	mov	r4, r1
    f692:	0146      	lsls	r6, r0, #5
    f694:	4605      	mov	r5, r0
    f696:	f000 f8e5 	bl	f864 <am_hal_interrupt_master_disable>
    f69a:	4a0f      	ldr	r2, [pc, #60]	; (f6d8 <am_hal_ctimer_start+0x4c>)
    f69c:	9001      	str	r0, [sp, #4]
    f69e:	58b3      	ldr	r3, [r6, r2]
    f6a0:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f6a4:	ea23 0301 	bic.w	r3, r3, r1
    f6a8:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    f6ac:	430b      	orrs	r3, r1
    f6ae:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    f6b2:	bf0c      	ite	eq
    f6b4:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    f6b8:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    f6bc:	50b3      	str	r3, [r6, r2]
    f6be:	4b07      	ldr	r3, [pc, #28]	; (f6dc <am_hal_ctimer_start+0x50>)
    f6c0:	9801      	ldr	r0, [sp, #4]
    f6c2:	bf0c      	ite	eq
    f6c4:	2101      	moveq	r1, #1
    f6c6:	2100      	movne	r1, #0
    f6c8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    f6cc:	545c      	strb	r4, [r3, r1]
    f6ce:	f000 f8cd 	bl	f86c <am_hal_interrupt_master_set>
    f6d2:	b002      	add	sp, #8
    f6d4:	bd70      	pop	{r4, r5, r6, pc}
    f6d6:	bf00      	nop
    f6d8:	4000800c 	.word	0x4000800c
    f6dc:	1000c040 	.word	0x1000c040

0000f6e0 <am_hal_ctimer_clear>:
    f6e0:	b570      	push	{r4, r5, r6, lr}
    f6e2:	b082      	sub	sp, #8
    f6e4:	0146      	lsls	r6, r0, #5
    f6e6:	460c      	mov	r4, r1
    f6e8:	f000 f8bc 	bl	f864 <am_hal_interrupt_master_disable>
    f6ec:	4d05      	ldr	r5, [pc, #20]	; (f704 <am_hal_ctimer_clear+0x24>)
    f6ee:	9001      	str	r0, [sp, #4]
    f6f0:	5973      	ldr	r3, [r6, r5]
    f6f2:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    f6f6:	4319      	orrs	r1, r3
    f6f8:	5171      	str	r1, [r6, r5]
    f6fa:	9801      	ldr	r0, [sp, #4]
    f6fc:	f000 f8b6 	bl	f86c <am_hal_interrupt_master_set>
    f700:	b002      	add	sp, #8
    f702:	bd70      	pop	{r4, r5, r6, pc}
    f704:	4000800c 	.word	0x4000800c

0000f708 <am_hal_ctimer_period_set>:
    f708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f70c:	b082      	sub	sp, #8
    f70e:	4689      	mov	r9, r1
    f710:	4698      	mov	r8, r3
    f712:	0147      	lsls	r7, r0, #5
    f714:	4614      	mov	r4, r2
    f716:	f000 f8a5 	bl	f864 <am_hal_interrupt_master_disable>
    f71a:	f8df a094 	ldr.w	sl, [pc, #148]	; f7b0 <am_hal_ctimer_period_set+0xa8>
    f71e:	9001      	str	r0, [sp, #4]
    f720:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f724:	4d20      	ldr	r5, [pc, #128]	; (f7a8 <am_hal_ctimer_period_set+0xa0>)
    f726:	4e21      	ldr	r6, [pc, #132]	; (f7ac <am_hal_ctimer_period_set+0xa4>)
    f728:	f857 300a 	ldr.w	r3, [r7, sl]
    f72c:	d01a      	beq.n	f764 <am_hal_ctimer_period_set+0x5c>
    f72e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f732:	2b80      	cmp	r3, #128	; 0x80
    f734:	d01b      	beq.n	f76e <am_hal_ctimer_period_set+0x66>
    f736:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f73a:	2000      	movs	r0, #0
    f73c:	4591      	cmp	r9, r2
    f73e:	4603      	mov	r3, r0
    f740:	d01e      	beq.n	f780 <am_hal_ctimer_period_set+0x78>
    f742:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    f746:	d025      	beq.n	f794 <am_hal_ctimer_period_set+0x8c>
    f748:	0c1b      	lsrs	r3, r3, #16
    f74a:	b2a2      	uxth	r2, r4
    f74c:	041b      	lsls	r3, r3, #16
    f74e:	4310      	orrs	r0, r2
    f750:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    f754:	5178      	str	r0, [r7, r5]
    f756:	51bb      	str	r3, [r7, r6]
    f758:	9801      	ldr	r0, [sp, #4]
    f75a:	f000 f887 	bl	f86c <am_hal_interrupt_master_set>
    f75e:	b002      	add	sp, #8
    f760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f764:	0c1b      	lsrs	r3, r3, #16
    f766:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    f76a:	2b80      	cmp	r3, #128	; 0x80
    f76c:	d111      	bne.n	f792 <am_hal_ctimer_period_set+0x8a>
    f76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f772:	4591      	cmp	r9, r2
    f774:	ea4f 4004 	mov.w	r0, r4, lsl #16
    f778:	4623      	mov	r3, r4
    f77a:	ebc8 0404 	rsb	r4, r8, r4
    f77e:	d1e0      	bne.n	f742 <am_hal_ctimer_period_set+0x3a>
    f780:	b2a3      	uxth	r3, r4
    f782:	4318      	orrs	r0, r3
    f784:	5178      	str	r0, [r7, r5]
    f786:	9801      	ldr	r0, [sp, #4]
    f788:	f000 f870 	bl	f86c <am_hal_interrupt_master_set>
    f78c:	b002      	add	sp, #8
    f78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f792:	2000      	movs	r0, #0
    f794:	b2a3      	uxth	r3, r4
    f796:	4318      	orrs	r0, r3
    f798:	51b8      	str	r0, [r7, r6]
    f79a:	9801      	ldr	r0, [sp, #4]
    f79c:	f000 f866 	bl	f86c <am_hal_interrupt_master_set>
    f7a0:	b002      	add	sp, #8
    f7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7a6:	bf00      	nop
    f7a8:	40008004 	.word	0x40008004
    f7ac:	40008008 	.word	0x40008008
    f7b0:	4000800c 	.word	0x4000800c

0000f7b4 <am_hal_ctimer_int_enable>:
    f7b4:	b510      	push	{r4, lr}
    f7b6:	b082      	sub	sp, #8
    f7b8:	4604      	mov	r4, r0
    f7ba:	f000 f853 	bl	f864 <am_hal_interrupt_master_disable>
    f7be:	4b06      	ldr	r3, [pc, #24]	; (f7d8 <am_hal_ctimer_int_enable+0x24>)
    f7c0:	9001      	str	r0, [sp, #4]
    f7c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f7c6:	4314      	orrs	r4, r2
    f7c8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    f7cc:	9801      	ldr	r0, [sp, #4]
    f7ce:	f000 f84d 	bl	f86c <am_hal_interrupt_master_set>
    f7d2:	b002      	add	sp, #8
    f7d4:	bd10      	pop	{r4, pc}
    f7d6:	bf00      	nop
    f7d8:	40008000 	.word	0x40008000

0000f7dc <am_hal_ctimer_int_clear>:
    f7dc:	b510      	push	{r4, lr}
    f7de:	b082      	sub	sp, #8
    f7e0:	4604      	mov	r4, r0
    f7e2:	f000 f83f 	bl	f864 <am_hal_interrupt_master_disable>
    f7e6:	4b04      	ldr	r3, [pc, #16]	; (f7f8 <am_hal_ctimer_int_clear+0x1c>)
    f7e8:	9001      	str	r0, [sp, #4]
    f7ea:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    f7ee:	9801      	ldr	r0, [sp, #4]
    f7f0:	f000 f83c 	bl	f86c <am_hal_interrupt_master_set>
    f7f4:	b002      	add	sp, #8
    f7f6:	bd10      	pop	{r4, pc}
    f7f8:	40008000 	.word	0x40008000

0000f7fc <am_hal_flash_delay>:
    f7fc:	4b00      	ldr	r3, [pc, #0]	; (f800 <am_hal_flash_delay+0x4>)
    f7fe:	4718      	bx	r3
    f800:	0800009d 	.word	0x0800009d

0000f804 <am_hal_flash_delay_status_check>:
    f804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f808:	f89d 4018 	ldrb.w	r4, [sp, #24]
    f80c:	460d      	mov	r5, r1
    f80e:	4616      	mov	r6, r2
    f810:	461f      	mov	r7, r3
    f812:	b17c      	cbz	r4, f834 <am_hal_flash_delay_status_check+0x30>
    f814:	4604      	mov	r4, r0
    f816:	f8df 8040 	ldr.w	r8, [pc, #64]	; f858 <am_hal_flash_delay_status_check+0x54>
    f81a:	e002      	b.n	f822 <am_hal_flash_delay_status_check+0x1e>
    f81c:	b1c4      	cbz	r4, f850 <am_hal_flash_delay_status_check+0x4c>
    f81e:	47c0      	blx	r8
    f820:	3c01      	subs	r4, #1
    f822:	682b      	ldr	r3, [r5, #0]
    f824:	4033      	ands	r3, r6
    f826:	429f      	cmp	r7, r3
    f828:	f04f 0001 	mov.w	r0, #1
    f82c:	d1f6      	bne.n	f81c <am_hal_flash_delay_status_check+0x18>
    f82e:	2000      	movs	r0, #0
    f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f834:	f8df 8020 	ldr.w	r8, [pc, #32]	; f858 <am_hal_flash_delay_status_check+0x54>
    f838:	4604      	mov	r4, r0
    f83a:	e002      	b.n	f842 <am_hal_flash_delay_status_check+0x3e>
    f83c:	b144      	cbz	r4, f850 <am_hal_flash_delay_status_check+0x4c>
    f83e:	47c0      	blx	r8
    f840:	3c01      	subs	r4, #1
    f842:	682b      	ldr	r3, [r5, #0]
    f844:	4033      	ands	r3, r6
    f846:	429f      	cmp	r7, r3
    f848:	f04f 0001 	mov.w	r0, #1
    f84c:	d0f6      	beq.n	f83c <am_hal_flash_delay_status_check+0x38>
    f84e:	e7ee      	b.n	f82e <am_hal_flash_delay_status_check+0x2a>
    f850:	2004      	movs	r0, #4
    f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f856:	bf00      	nop
    f858:	0800009d 	.word	0x0800009d

0000f85c <am_hal_interrupt_master_enable>:
    f85c:	f3ef 8010 	mrs	r0, PRIMASK
    f860:	b662      	cpsie	i
    f862:	4770      	bx	lr

0000f864 <am_hal_interrupt_master_disable>:
    f864:	f3ef 8010 	mrs	r0, PRIMASK
    f868:	b672      	cpsid	i
    f86a:	4770      	bx	lr

0000f86c <am_hal_interrupt_master_set>:
    f86c:	f380 8810 	msr	PRIMASK, r0
    f870:	4770      	bx	lr
    f872:	bf00      	nop

0000f874 <am_hal_itm_disable>:
    f874:	b510      	push	{r4, lr}
    f876:	4b25      	ldr	r3, [pc, #148]	; (f90c <am_hal_itm_disable+0x98>)
    f878:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f87c:	b9b3      	cbnz	r3, f8ac <am_hal_itm_disable+0x38>
    f87e:	4b24      	ldr	r3, [pc, #144]	; (f910 <am_hal_itm_disable+0x9c>)
    f880:	68da      	ldr	r2, [r3, #12]
    f882:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f886:	60da      	str	r2, [r3, #12]
    f888:	68da      	ldr	r2, [r3, #12]
    f88a:	01d2      	lsls	r2, r2, #7
    f88c:	d5fc      	bpl.n	f888 <am_hal_itm_disable+0x14>
    f88e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f892:	4920      	ldr	r1, [pc, #128]	; (f914 <am_hal_itm_disable+0xa0>)
    f894:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f898:	4a1f      	ldr	r2, [pc, #124]	; (f918 <am_hal_itm_disable+0xa4>)
    f89a:	200f      	movs	r0, #15
    f89c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f8a0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f8a4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f8a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f8ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f8b0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f8b4:	021b      	lsls	r3, r3, #8
    f8b6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f8ba:	d4f9      	bmi.n	f8b0 <am_hal_itm_disable+0x3c>
    f8bc:	f240 20f7 	movw	r0, #759	; 0x2f7
    f8c0:	f7ff ff9c 	bl	f7fc <am_hal_flash_delay>
    f8c4:	4b13      	ldr	r3, [pc, #76]	; (f914 <am_hal_itm_disable+0xa0>)
    f8c6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f8ca:	4621      	mov	r1, r4
    f8cc:	2064      	movs	r0, #100	; 0x64
    f8ce:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f8d2:	f023 0301 	bic.w	r3, r3, #1
    f8d6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f8da:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f8de:	4b0f      	ldr	r3, [pc, #60]	; (f91c <am_hal_itm_disable+0xa8>)
    f8e0:	4013      	ands	r3, r2
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	d1f9      	bne.n	f8da <am_hal_itm_disable+0x66>
    f8e6:	3801      	subs	r0, #1
    f8e8:	d1f1      	bne.n	f8ce <am_hal_itm_disable+0x5a>
    f8ea:	4a09      	ldr	r2, [pc, #36]	; (f910 <am_hal_itm_disable+0x9c>)
    f8ec:	68d3      	ldr	r3, [r2, #12]
    f8ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f8f2:	60d3      	str	r3, [r2, #12]
    f8f4:	68d3      	ldr	r3, [r2, #12]
    f8f6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f8fa:	d1fb      	bne.n	f8f4 <am_hal_itm_disable+0x80>
    f8fc:	4a03      	ldr	r2, [pc, #12]	; (f90c <am_hal_itm_disable+0x98>)
    f8fe:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f902:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f906:	2b00      	cmp	r3, #0
    f908:	d1fb      	bne.n	f902 <am_hal_itm_disable+0x8e>
    f90a:	bd10      	pop	{r4, pc}
    f90c:	40020000 	.word	0x40020000
    f910:	e000edf0 	.word	0xe000edf0
    f914:	c5acce55 	.word	0xc5acce55
    f918:	00150511 	.word	0x00150511
    f91c:	00800001 	.word	0x00800001

0000f920 <am_hal_mcuctrl_info_get>:
    f920:	b4f0      	push	{r4, r5, r6, r7}
    f922:	b121      	cbz	r1, f92e <am_hal_mcuctrl_info_get+0xe>
    f924:	2801      	cmp	r0, #1
    f926:	d038      	beq.n	f99a <am_hal_mcuctrl_info_get+0x7a>
    f928:	d320      	bcc.n	f96c <am_hal_mcuctrl_info_get+0x4c>
    f92a:	2802      	cmp	r0, #2
    f92c:	d002      	beq.n	f934 <am_hal_mcuctrl_info_get+0x14>
    f92e:	2006      	movs	r0, #6
    f930:	bcf0      	pop	{r4, r5, r6, r7}
    f932:	4770      	bx	lr
    f934:	4a41      	ldr	r2, [pc, #260]	; (fa3c <am_hal_mcuctrl_info_get+0x11c>)
    f936:	684d      	ldr	r5, [r1, #4]
    f938:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f93c:	694c      	ldr	r4, [r1, #20]
    f93e:	f003 0601 	and.w	r6, r3, #1
    f942:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f946:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f94a:	700e      	strb	r6, [r1, #0]
    f94c:	7208      	strb	r0, [r1, #8]
    f94e:	740b      	strb	r3, [r1, #16]
    f950:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f954:	60cb      	str	r3, [r1, #12]
    f956:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f95a:	4328      	orrs	r0, r5
    f95c:	6048      	str	r0, [r1, #4]
    f95e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f962:	4323      	orrs	r3, r4
    f964:	2000      	movs	r0, #0
    f966:	614b      	str	r3, [r1, #20]
    f968:	bcf0      	pop	{r4, r5, r6, r7}
    f96a:	4770      	bx	lr
    f96c:	4a33      	ldr	r2, [pc, #204]	; (fa3c <am_hal_mcuctrl_info_get+0x11c>)
    f96e:	6993      	ldr	r3, [r2, #24]
    f970:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f974:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f978:	7008      	strb	r0, [r1, #0]
    f97a:	704b      	strb	r3, [r1, #1]
    f97c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f980:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f984:	710b      	strb	r3, [r1, #4]
    f986:	6953      	ldr	r3, [r2, #20]
    f988:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f98c:	f003 0301 	and.w	r3, r3, #1
    f990:	2000      	movs	r0, #0
    f992:	708a      	strb	r2, [r1, #2]
    f994:	70cb      	strb	r3, [r1, #3]
    f996:	bcf0      	pop	{r4, r5, r6, r7}
    f998:	4770      	bx	lr
    f99a:	4b28      	ldr	r3, [pc, #160]	; (fa3c <am_hal_mcuctrl_info_get+0x11c>)
    f99c:	4c28      	ldr	r4, [pc, #160]	; (fa40 <am_hal_mcuctrl_info_get+0x120>)
    f99e:	681a      	ldr	r2, [r3, #0]
    f9a0:	600a      	str	r2, [r1, #0]
    f9a2:	6858      	ldr	r0, [r3, #4]
    f9a4:	6048      	str	r0, [r1, #4]
    f9a6:	6898      	ldr	r0, [r3, #8]
    f9a8:	6088      	str	r0, [r1, #8]
    f9aa:	68d8      	ldr	r0, [r3, #12]
    f9ac:	60c8      	str	r0, [r1, #12]
    f9ae:	691d      	ldr	r5, [r3, #16]
    f9b0:	4824      	ldr	r0, [pc, #144]	; (fa44 <am_hal_mcuctrl_info_get+0x124>)
    f9b2:	610d      	str	r5, [r1, #16]
    f9b4:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f9b8:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f9bc:	695d      	ldr	r5, [r3, #20]
    f9be:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f9c2:	4b21      	ldr	r3, [pc, #132]	; (fa48 <am_hal_mcuctrl_info_get+0x128>)
    f9c4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f9c8:	6208      	str	r0, [r1, #32]
    f9ca:	f002 0201 	and.w	r2, r2, #1
    f9ce:	614d      	str	r5, [r1, #20]
    f9d0:	61cc      	str	r4, [r1, #28]
    f9d2:	618a      	str	r2, [r1, #24]
    f9d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f9d8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f9dc:	b2d0      	uxtb	r0, r2
    f9de:	f004 020f 	and.w	r2, r4, #15
    f9e2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f9e6:	624a      	str	r2, [r1, #36]	; 0x24
    f9e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f9ec:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f9f0:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f9f4:	f004 020f 	and.w	r2, r4, #15
    f9f8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f9fc:	628a      	str	r2, [r1, #40]	; 0x28
    f9fe:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    fa02:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    fa06:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    fa0a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    fa0e:	4302      	orrs	r2, r0
    fa10:	62ca      	str	r2, [r1, #44]	; 0x2c
    fa12:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    fa16:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    fa1a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    fa1e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    fa22:	b2c0      	uxtb	r0, r0
    fa24:	0400      	lsls	r0, r0, #16
    fa26:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    fa2a:	b2d2      	uxtb	r2, r2
    fa2c:	431a      	orrs	r2, r3
    fa2e:	b2e3      	uxtb	r3, r4
    fa30:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fa34:	630b      	str	r3, [r1, #48]	; 0x30
    fa36:	2000      	movs	r0, #0
    fa38:	bcf0      	pop	{r4, r5, r6, r7}
    fa3a:	4770      	bx	lr
    fa3c:	40020000 	.word	0x40020000
    fa40:	00010b9c 	.word	0x00010b9c
    fa44:	00010bdc 	.word	0x00010bdc
    fa48:	f0000f00 	.word	0xf0000f00

0000fa4c <am_hal_pwrctrl_periph_enable>:
    fa4c:	b570      	push	{r4, r5, r6, lr}
    fa4e:	b082      	sub	sp, #8
    fa50:	4604      	mov	r4, r0
    fa52:	f7ff ff07 	bl	f864 <am_hal_interrupt_master_disable>
    fa56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fa5a:	4d0f      	ldr	r5, [pc, #60]	; (fa98 <am_hal_pwrctrl_periph_enable+0x4c>)
    fa5c:	4e0f      	ldr	r6, [pc, #60]	; (fa9c <am_hal_pwrctrl_periph_enable+0x50>)
    fa5e:	9001      	str	r0, [sp, #4]
    fa60:	00a4      	lsls	r4, r4, #2
    fa62:	68aa      	ldr	r2, [r5, #8]
    fa64:	5933      	ldr	r3, [r6, r4]
    fa66:	4313      	orrs	r3, r2
    fa68:	60ab      	str	r3, [r5, #8]
    fa6a:	9801      	ldr	r0, [sp, #4]
    fa6c:	4434      	add	r4, r6
    fa6e:	f7ff fefd 	bl	f86c <am_hal_interrupt_master_set>
    fa72:	2077      	movs	r0, #119	; 0x77
    fa74:	f7ff fec2 	bl	f7fc <am_hal_flash_delay>
    fa78:	69ab      	ldr	r3, [r5, #24]
    fa7a:	6864      	ldr	r4, [r4, #4]
    fa7c:	4223      	tst	r3, r4
    fa7e:	d103      	bne.n	fa88 <am_hal_pwrctrl_periph_enable+0x3c>
    fa80:	2077      	movs	r0, #119	; 0x77
    fa82:	f7ff febb 	bl	f7fc <am_hal_flash_delay>
    fa86:	69ab      	ldr	r3, [r5, #24]
    fa88:	4b03      	ldr	r3, [pc, #12]	; (fa98 <am_hal_pwrctrl_periph_enable+0x4c>)
    fa8a:	699b      	ldr	r3, [r3, #24]
    fa8c:	4223      	tst	r3, r4
    fa8e:	bf0c      	ite	eq
    fa90:	2001      	moveq	r0, #1
    fa92:	2000      	movne	r0, #0
    fa94:	b002      	add	sp, #8
    fa96:	bd70      	pop	{r4, r5, r6, pc}
    fa98:	40021000 	.word	0x40021000
    fa9c:	00010c1c 	.word	0x00010c1c

0000faa0 <am_hal_pwrctrl_periph_disable>:
    faa0:	b570      	push	{r4, r5, r6, lr}
    faa2:	b082      	sub	sp, #8
    faa4:	4604      	mov	r4, r0
    faa6:	f7ff fedd 	bl	f864 <am_hal_interrupt_master_disable>
    faaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    faae:	4d10      	ldr	r5, [pc, #64]	; (faf0 <am_hal_pwrctrl_periph_disable+0x50>)
    fab0:	4e10      	ldr	r6, [pc, #64]	; (faf4 <am_hal_pwrctrl_periph_disable+0x54>)
    fab2:	9001      	str	r0, [sp, #4]
    fab4:	00a4      	lsls	r4, r4, #2
    fab6:	68ab      	ldr	r3, [r5, #8]
    fab8:	5932      	ldr	r2, [r6, r4]
    faba:	ea23 0302 	bic.w	r3, r3, r2
    fabe:	60ab      	str	r3, [r5, #8]
    fac0:	9801      	ldr	r0, [sp, #4]
    fac2:	4434      	add	r4, r6
    fac4:	f7ff fed2 	bl	f86c <am_hal_interrupt_master_set>
    fac8:	2077      	movs	r0, #119	; 0x77
    faca:	f7ff fe97 	bl	f7fc <am_hal_flash_delay>
    face:	69ab      	ldr	r3, [r5, #24]
    fad0:	6864      	ldr	r4, [r4, #4]
    fad2:	4223      	tst	r3, r4
    fad4:	d003      	beq.n	fade <am_hal_pwrctrl_periph_disable+0x3e>
    fad6:	2077      	movs	r0, #119	; 0x77
    fad8:	f7ff fe90 	bl	f7fc <am_hal_flash_delay>
    fadc:	69ab      	ldr	r3, [r5, #24]
    fade:	4b04      	ldr	r3, [pc, #16]	; (faf0 <am_hal_pwrctrl_periph_disable+0x50>)
    fae0:	699b      	ldr	r3, [r3, #24]
    fae2:	4223      	tst	r3, r4
    fae4:	bf14      	ite	ne
    fae6:	2001      	movne	r0, #1
    fae8:	2000      	moveq	r0, #0
    faea:	b002      	add	sp, #8
    faec:	bd70      	pop	{r4, r5, r6, pc}
    faee:	bf00      	nop
    faf0:	40021000 	.word	0x40021000
    faf4:	00010c1c 	.word	0x00010c1c

0000faf8 <am_hal_pwrctrl_low_power_init>:
    faf8:	b530      	push	{r4, r5, lr}
    fafa:	4b1f      	ldr	r3, [pc, #124]	; (fb78 <am_hal_pwrctrl_low_power_init+0x80>)
    fafc:	681a      	ldr	r2, [r3, #0]
    fafe:	b083      	sub	sp, #12
    fb00:	b912      	cbnz	r2, fb08 <am_hal_pwrctrl_low_power_init+0x10>
    fb02:	4a1e      	ldr	r2, [pc, #120]	; (fb7c <am_hal_pwrctrl_low_power_init+0x84>)
    fb04:	6812      	ldr	r2, [r2, #0]
    fb06:	601a      	str	r2, [r3, #0]
    fb08:	4c1d      	ldr	r4, [pc, #116]	; (fb80 <am_hal_pwrctrl_low_power_init+0x88>)
    fb0a:	69a3      	ldr	r3, [r4, #24]
    fb0c:	05db      	lsls	r3, r3, #23
    fb0e:	d502      	bpl.n	fb16 <am_hal_pwrctrl_low_power_init+0x1e>
    fb10:	2000      	movs	r0, #0
    fb12:	b003      	add	sp, #12
    fb14:	bd30      	pop	{r4, r5, pc}
    fb16:	4d1b      	ldr	r5, [pc, #108]	; (fb84 <am_hal_pwrctrl_low_power_init+0x8c>)
    fb18:	491b      	ldr	r1, [pc, #108]	; (fb88 <am_hal_pwrctrl_low_power_init+0x90>)
    fb1a:	7e2a      	ldrb	r2, [r5, #24]
    fb1c:	2001      	movs	r0, #1
    fb1e:	4302      	orrs	r2, r0
    fb20:	2307      	movs	r3, #7
    fb22:	762a      	strb	r2, [r5, #24]
    fb24:	9000      	str	r0, [sp, #0]
    fb26:	461a      	mov	r2, r3
    fb28:	f242 7010 	movw	r0, #10000	; 0x2710
    fb2c:	f7ff fe6a 	bl	f804 <am_hal_flash_delay_status_check>
    fb30:	b110      	cbz	r0, fb38 <am_hal_pwrctrl_low_power_init+0x40>
    fb32:	2004      	movs	r0, #4
    fb34:	b003      	add	sp, #12
    fb36:	bd30      	pop	{r4, r5, pc}
    fb38:	6823      	ldr	r3, [r4, #0]
    fb3a:	f043 0301 	orr.w	r3, r3, #1
    fb3e:	6023      	str	r3, [r4, #0]
    fb40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb46:	6263      	str	r3, [r4, #36]	; 0x24
    fb48:	68eb      	ldr	r3, [r5, #12]
    fb4a:	b2db      	uxtb	r3, r3
    fb4c:	2b11      	cmp	r3, #17
    fb4e:	d1df      	bne.n	fb10 <am_hal_pwrctrl_low_power_init+0x18>
    fb50:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    fb54:	f360 5356 	bfi	r3, r0, #21, #2
    fb58:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    fb5c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fb60:	220f      	movs	r2, #15
    fb62:	f362 138b 	bfi	r3, r2, #6, #6
    fb66:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fb6a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    fb6e:	f362 0305 	bfi	r3, r2, #0, #6
    fb72:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    fb76:	e7cc      	b.n	fb12 <am_hal_pwrctrl_low_power_init+0x1a>
    fb78:	1000c174 	.word	0x1000c174
    fb7c:	4ffff000 	.word	0x4ffff000
    fb80:	40021000 	.word	0x40021000
    fb84:	40020000 	.word	0x40020000
    fb88:	40020018 	.word	0x40020018

0000fb8c <am_hal_rtc_osc_select>:
    fb8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    fb90:	2801      	cmp	r0, #1
    fb92:	68d3      	ldr	r3, [r2, #12]
    fb94:	bf0c      	ite	eq
    fb96:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    fb9a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    fb9e:	60d3      	str	r3, [r2, #12]
    fba0:	4770      	bx	lr
    fba2:	bf00      	nop

0000fba4 <am_hal_rtc_osc_disable>:
    fba4:	4a03      	ldr	r2, [pc, #12]	; (fbb4 <am_hal_rtc_osc_disable+0x10>)
    fba6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fbaa:	f043 0310 	orr.w	r3, r3, #16
    fbae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    fbb2:	4770      	bx	lr
    fbb4:	40004200 	.word	0x40004200

0000fbb8 <am_hal_uart_initialize>:
    fbb8:	2801      	cmp	r0, #1
    fbba:	d901      	bls.n	fbc0 <am_hal_uart_initialize+0x8>
    fbbc:	2005      	movs	r0, #5
    fbbe:	4770      	bx	lr
    fbc0:	b169      	cbz	r1, fbde <am_hal_uart_initialize+0x26>
    fbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbc4:	2264      	movs	r2, #100	; 0x64
    fbc6:	4e0e      	ldr	r6, [pc, #56]	; (fc00 <am_hal_uart_initialize+0x48>)
    fbc8:	fb02 f200 	mul.w	r2, r2, r0
    fbcc:	18b4      	adds	r4, r6, r2
    fbce:	4603      	mov	r3, r0
    fbd0:	78e0      	ldrb	r0, [r4, #3]
    fbd2:	f3c0 0700 	ubfx	r7, r0, #0, #1
    fbd6:	b2fd      	uxtb	r5, r7
    fbd8:	b11d      	cbz	r5, fbe2 <am_hal_uart_initialize+0x2a>
    fbda:	2007      	movs	r0, #7
    fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbde:	2006      	movs	r0, #6
    fbe0:	4770      	bx	lr
    fbe2:	f040 0001 	orr.w	r0, r0, #1
    fbe6:	70e0      	strb	r0, [r4, #3]
    fbe8:	58b0      	ldr	r0, [r6, r2]
    fbea:	f8df e018 	ldr.w	lr, [pc, #24]	; fc04 <am_hal_uart_initialize+0x4c>
    fbee:	f36e 0017 	bfi	r0, lr, #0, #24
    fbf2:	50b0      	str	r0, [r6, r2]
    fbf4:	6263      	str	r3, [r4, #36]	; 0x24
    fbf6:	7127      	strb	r7, [r4, #4]
    fbf8:	6625      	str	r5, [r4, #96]	; 0x60
    fbfa:	4628      	mov	r0, r5
    fbfc:	600c      	str	r4, [r1, #0]
    fbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc00:	1001c0b8 	.word	0x1001c0b8
    fc04:	00ea9e06 	.word	0x00ea9e06

0000fc08 <am_hal_uart_power_control>:
    fc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc0c:	6804      	ldr	r4, [r0, #0]
    fc0e:	4b36      	ldr	r3, [pc, #216]	; (fce8 <am_hal_uart_power_control+0xe0>)
    fc10:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    fc14:	429c      	cmp	r4, r3
    fc16:	b083      	sub	sp, #12
    fc18:	d003      	beq.n	fc22 <am_hal_uart_power_control+0x1a>
    fc1a:	2002      	movs	r0, #2
    fc1c:	b003      	add	sp, #12
    fc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fc22:	6a47      	ldr	r7, [r0, #36]	; 0x24
    fc24:	4605      	mov	r5, r0
    fc26:	f107 0008 	add.w	r0, r7, #8
    fc2a:	4691      	mov	r9, r2
    fc2c:	460e      	mov	r6, r1
    fc2e:	fa5f f880 	uxtb.w	r8, r0
    fc32:	b181      	cbz	r1, fc56 <am_hal_uart_power_control+0x4e>
    fc34:	2902      	cmp	r1, #2
    fc36:	d80c      	bhi.n	fc52 <am_hal_uart_power_control+0x4a>
    fc38:	b992      	cbnz	r2, fc60 <am_hal_uart_power_control+0x58>
    fc3a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fc3e:	371c      	adds	r7, #28
    fc40:	033f      	lsls	r7, r7, #12
    fc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc46:	647b      	str	r3, [r7, #68]	; 0x44
    fc48:	4640      	mov	r0, r8
    fc4a:	f7ff ff29 	bl	faa0 <am_hal_pwrctrl_periph_disable>
    fc4e:	2000      	movs	r0, #0
    fc50:	e7e4      	b.n	fc1c <am_hal_uart_power_control+0x14>
    fc52:	2006      	movs	r0, #6
    fc54:	e7e2      	b.n	fc1c <am_hal_uart_power_control+0x14>
    fc56:	b322      	cbz	r2, fca2 <am_hal_uart_power_control+0x9a>
    fc58:	792b      	ldrb	r3, [r5, #4]
    fc5a:	bb3b      	cbnz	r3, fcac <am_hal_uart_power_control+0xa4>
    fc5c:	2007      	movs	r0, #7
    fc5e:	e7dd      	b.n	fc1c <am_hal_uart_power_control+0x14>
    fc60:	f7ff fe00 	bl	f864 <am_hal_interrupt_master_disable>
    fc64:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fc68:	331c      	adds	r3, #28
    fc6a:	031b      	lsls	r3, r3, #12
    fc6c:	9001      	str	r0, [sp, #4]
    fc6e:	6a1a      	ldr	r2, [r3, #32]
    fc70:	60aa      	str	r2, [r5, #8]
    fc72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fc74:	60ea      	str	r2, [r5, #12]
    fc76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fc78:	612a      	str	r2, [r5, #16]
    fc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc7c:	616a      	str	r2, [r5, #20]
    fc7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fc80:	61aa      	str	r2, [r5, #24]
    fc82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    fc84:	61ea      	str	r2, [r5, #28]
    fc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fc88:	622b      	str	r3, [r5, #32]
    fc8a:	2301      	movs	r3, #1
    fc8c:	712b      	strb	r3, [r5, #4]
    fc8e:	9801      	ldr	r0, [sp, #4]
    fc90:	f7ff fdec 	bl	f86c <am_hal_interrupt_master_set>
    fc94:	682b      	ldr	r3, [r5, #0]
    fc96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc9a:	42a3      	cmp	r3, r4
    fc9c:	d1d4      	bne.n	fc48 <am_hal_uart_power_control+0x40>
    fc9e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fca0:	e7cb      	b.n	fc3a <am_hal_uart_power_control+0x32>
    fca2:	4640      	mov	r0, r8
    fca4:	f7ff fed2 	bl	fa4c <am_hal_pwrctrl_periph_enable>
    fca8:	4648      	mov	r0, r9
    fcaa:	e7b7      	b.n	fc1c <am_hal_uart_power_control+0x14>
    fcac:	4640      	mov	r0, r8
    fcae:	f7ff fecd 	bl	fa4c <am_hal_pwrctrl_periph_enable>
    fcb2:	f7ff fdd7 	bl	f864 <am_hal_interrupt_master_disable>
    fcb6:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fcba:	331c      	adds	r3, #28
    fcbc:	031b      	lsls	r3, r3, #12
    fcbe:	68aa      	ldr	r2, [r5, #8]
    fcc0:	9000      	str	r0, [sp, #0]
    fcc2:	621a      	str	r2, [r3, #32]
    fcc4:	68ea      	ldr	r2, [r5, #12]
    fcc6:	625a      	str	r2, [r3, #36]	; 0x24
    fcc8:	692a      	ldr	r2, [r5, #16]
    fcca:	629a      	str	r2, [r3, #40]	; 0x28
    fccc:	696a      	ldr	r2, [r5, #20]
    fcce:	62da      	str	r2, [r3, #44]	; 0x2c
    fcd0:	69aa      	ldr	r2, [r5, #24]
    fcd2:	631a      	str	r2, [r3, #48]	; 0x30
    fcd4:	69ea      	ldr	r2, [r5, #28]
    fcd6:	635a      	str	r2, [r3, #52]	; 0x34
    fcd8:	6a2a      	ldr	r2, [r5, #32]
    fcda:	639a      	str	r2, [r3, #56]	; 0x38
    fcdc:	9800      	ldr	r0, [sp, #0]
    fcde:	712e      	strb	r6, [r5, #4]
    fce0:	f7ff fdc4 	bl	f86c <am_hal_interrupt_master_set>
    fce4:	4630      	mov	r0, r6
    fce6:	e799      	b.n	fc1c <am_hal_uart_power_control+0x14>
    fce8:	01ea9e06 	.word	0x01ea9e06

0000fcec <am_hal_uart_configure>:
    fcec:	6803      	ldr	r3, [r0, #0]
    fcee:	4a7a      	ldr	r2, [pc, #488]	; (fed8 <am_hal_uart_configure+0x1ec>)
    fcf0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fcf4:	4293      	cmp	r3, r2
    fcf6:	d001      	beq.n	fcfc <am_hal_uart_configure+0x10>
    fcf8:	2002      	movs	r0, #2
    fcfa:	4770      	bx	lr
    fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd00:	6a45      	ldr	r5, [r0, #36]	; 0x24
    fd02:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fd06:	351c      	adds	r5, #28
    fd08:	032d      	lsls	r5, r5, #12
    fd0a:	2700      	movs	r7, #0
    fd0c:	b084      	sub	sp, #16
    fd0e:	632f      	str	r7, [r5, #48]	; 0x30
    fd10:	460e      	mov	r6, r1
    fd12:	4604      	mov	r4, r0
    fd14:	f7ff fda6 	bl	f864 <am_hal_interrupt_master_disable>
    fd18:	9001      	str	r0, [sp, #4]
    fd1a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fd1c:	f043 0308 	orr.w	r3, r3, #8
    fd20:	862b      	strh	r3, [r5, #48]	; 0x30
    fd22:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fd24:	2201      	movs	r2, #1
    fd26:	f362 1306 	bfi	r3, r2, #4, #3
    fd2a:	862b      	strh	r3, [r5, #48]	; 0x30
    fd2c:	9801      	ldr	r0, [sp, #4]
    fd2e:	f7ff fd9d 	bl	f86c <am_hal_interrupt_master_set>
    fd32:	f7ff fd97 	bl	f864 <am_hal_interrupt_master_disable>
    fd36:	9002      	str	r0, [sp, #8]
    fd38:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fd3a:	f367 0300 	bfi	r3, r7, #0, #1
    fd3e:	862b      	strh	r3, [r5, #48]	; 0x30
    fd40:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fd42:	f367 2349 	bfi	r3, r7, #9, #1
    fd46:	862b      	strh	r3, [r5, #48]	; 0x30
    fd48:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fd4a:	f367 2308 	bfi	r3, r7, #8, #1
    fd4e:	862b      	strh	r3, [r5, #48]	; 0x30
    fd50:	9802      	ldr	r0, [sp, #8]
    fd52:	f7ff fd8b 	bl	f86c <am_hal_interrupt_master_set>
    fd56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    fd58:	f3c3 1302 	ubfx	r3, r3, #4, #3
    fd5c:	3b01      	subs	r3, #1
    fd5e:	2b03      	cmp	r3, #3
    fd60:	d854      	bhi.n	fe0c <am_hal_uart_configure+0x120>
    fd62:	e8df f003 	tbb	[pc, r3]
    fd66:	020e      	.short	0x020e
    fd68:	1114      	.short	0x1114
    fd6a:	495c      	ldr	r1, [pc, #368]	; (fedc <am_hal_uart_configure+0x1f0>)
    fd6c:	485c      	ldr	r0, [pc, #368]	; (fee0 <am_hal_uart_configure+0x1f4>)
    fd6e:	6832      	ldr	r2, [r6, #0]
    fd70:	0112      	lsls	r2, r2, #4
    fd72:	fbb0 f3f2 	udiv	r3, r0, r2
    fd76:	b96b      	cbnz	r3, fd94 <am_hal_uart_configure+0xa8>
    fd78:	485a      	ldr	r0, [pc, #360]	; (fee4 <am_hal_uart_configure+0x1f8>)
    fd7a:	6623      	str	r3, [r4, #96]	; 0x60
    fd7c:	b004      	add	sp, #16
    fd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd82:	4959      	ldr	r1, [pc, #356]	; (fee8 <am_hal_uart_configure+0x1fc>)
    fd84:	4859      	ldr	r0, [pc, #356]	; (feec <am_hal_uart_configure+0x200>)
    fd86:	e7f2      	b.n	fd6e <am_hal_uart_configure+0x82>
    fd88:	4959      	ldr	r1, [pc, #356]	; (fef0 <am_hal_uart_configure+0x204>)
    fd8a:	485a      	ldr	r0, [pc, #360]	; (fef4 <am_hal_uart_configure+0x208>)
    fd8c:	e7ef      	b.n	fd6e <am_hal_uart_configure+0x82>
    fd8e:	495a      	ldr	r1, [pc, #360]	; (fef8 <am_hal_uart_configure+0x20c>)
    fd90:	485a      	ldr	r0, [pc, #360]	; (fefc <am_hal_uart_configure+0x210>)
    fd92:	e7ec      	b.n	fd6e <am_hal_uart_configure+0x82>
    fd94:	fbb1 f2f2 	udiv	r2, r1, r2
    fd98:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    fd9c:	626b      	str	r3, [r5, #36]	; 0x24
    fd9e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    fda2:	626b      	str	r3, [r5, #36]	; 0x24
    fda4:	fbb0 f0f1 	udiv	r0, r0, r1
    fda8:	62aa      	str	r2, [r5, #40]	; 0x28
    fdaa:	6620      	str	r0, [r4, #96]	; 0x60
    fdac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fdae:	f36f 338e 	bfc	r3, #14, #1
    fdb2:	862b      	strh	r3, [r5, #48]	; 0x30
    fdb4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fdb6:	f36f 33cf 	bfc	r3, #15, #1
    fdba:	862b      	strh	r3, [r5, #48]	; 0x30
    fdbc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fdbe:	6933      	ldr	r3, [r6, #16]
    fdc0:	4313      	orrs	r3, r2
    fdc2:	632b      	str	r3, [r5, #48]	; 0x30
    fdc4:	6973      	ldr	r3, [r6, #20]
    fdc6:	636b      	str	r3, [r5, #52]	; 0x34
    fdc8:	6871      	ldr	r1, [r6, #4]
    fdca:	68b3      	ldr	r3, [r6, #8]
    fdcc:	68f2      	ldr	r2, [r6, #12]
    fdce:	430b      	orrs	r3, r1
    fdd0:	f043 0310 	orr.w	r3, r3, #16
    fdd4:	4313      	orrs	r3, r2
    fdd6:	62eb      	str	r3, [r5, #44]	; 0x2c
    fdd8:	f7ff fd44 	bl	f864 <am_hal_interrupt_master_disable>
    fddc:	9003      	str	r0, [sp, #12]
    fdde:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fde0:	f043 0301 	orr.w	r3, r3, #1
    fde4:	862b      	strh	r3, [r5, #48]	; 0x30
    fde6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fde8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fdec:	862b      	strh	r3, [r5, #48]	; 0x30
    fdee:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fdf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fdf4:	862b      	strh	r3, [r5, #48]	; 0x30
    fdf6:	9803      	ldr	r0, [sp, #12]
    fdf8:	f7ff fd38 	bl	f86c <am_hal_interrupt_master_set>
    fdfc:	6825      	ldr	r5, [r4, #0]
    fdfe:	4b36      	ldr	r3, [pc, #216]	; (fed8 <am_hal_uart_configure+0x1ec>)
    fe00:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fe04:	429d      	cmp	r5, r3
    fe06:	d005      	beq.n	fe14 <am_hal_uart_configure+0x128>
    fe08:	2000      	movs	r0, #0
    fe0a:	e7b7      	b.n	fd7c <am_hal_uart_configure+0x90>
    fe0c:	2300      	movs	r3, #0
    fe0e:	6623      	str	r3, [r4, #96]	; 0x60
    fe10:	483b      	ldr	r0, [pc, #236]	; (ff00 <am_hal_uart_configure+0x214>)
    fe12:	e7b3      	b.n	fd7c <am_hal_uart_configure+0x90>
    fe14:	69b1      	ldr	r1, [r6, #24]
    fe16:	6a37      	ldr	r7, [r6, #32]
    fe18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fe1c:	b109      	cbz	r1, fe22 <am_hal_uart_configure+0x136>
    fe1e:	69f3      	ldr	r3, [r6, #28]
    fe20:	bb3b      	cbnz	r3, fe72 <am_hal_uart_configure+0x186>
    fe22:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fe24:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fe28:	f103 021c 	add.w	r2, r3, #28
    fe2c:	0312      	lsls	r2, r2, #12
    fe2e:	2100      	movs	r1, #0
    fe30:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fe34:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fe36:	f021 0120 	bic.w	r1, r1, #32
    fe3a:	6391      	str	r1, [r2, #56]	; 0x38
    fe3c:	b1b7      	cbz	r7, fe6c <am_hal_uart_configure+0x180>
    fe3e:	f1b8 0f00 	cmp.w	r8, #0
    fe42:	d12e      	bne.n	fea2 <am_hal_uart_configure+0x1b6>
    fe44:	6823      	ldr	r3, [r4, #0]
    fe46:	4a24      	ldr	r2, [pc, #144]	; (fed8 <am_hal_uart_configure+0x1ec>)
    fe48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fe4c:	2100      	movs	r1, #0
    fe4e:	4293      	cmp	r3, r2
    fe50:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fe54:	d1d8      	bne.n	fe08 <am_hal_uart_configure+0x11c>
    fe56:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fe58:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fe5c:	331c      	adds	r3, #28
    fe5e:	031b      	lsls	r3, r3, #12
    fe60:	2000      	movs	r0, #0
    fe62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fe64:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fe68:	639a      	str	r2, [r3, #56]	; 0x38
    fe6a:	e787      	b.n	fd7c <am_hal_uart_configure+0x90>
    fe6c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    fe70:	e7f4      	b.n	fe5c <am_hal_uart_configure+0x170>
    fe72:	2201      	movs	r2, #1
    fe74:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fe78:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fe7c:	f000 fa7c 	bl	10378 <am_hal_queue_init>
    fe80:	6823      	ldr	r3, [r4, #0]
    fe82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fe86:	42ab      	cmp	r3, r5
    fe88:	d1be      	bne.n	fe08 <am_hal_uart_configure+0x11c>
    fe8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fe8c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fe90:	331c      	adds	r3, #28
    fe92:	031b      	lsls	r3, r3, #12
    fe94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fe96:	f042 0220 	orr.w	r2, r2, #32
    fe9a:	639a      	str	r2, [r3, #56]	; 0x38
    fe9c:	2f00      	cmp	r7, #0
    fe9e:	d1ce      	bne.n	fe3e <am_hal_uart_configure+0x152>
    fea0:	e7d0      	b.n	fe44 <am_hal_uart_configure+0x158>
    fea2:	2201      	movs	r2, #1
    fea4:	4643      	mov	r3, r8
    fea6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    feaa:	4639      	mov	r1, r7
    feac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    feb0:	f000 fa62 	bl	10378 <am_hal_queue_init>
    feb4:	6823      	ldr	r3, [r4, #0]
    feb6:	4a08      	ldr	r2, [pc, #32]	; (fed8 <am_hal_uart_configure+0x1ec>)
    feb8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    febc:	4293      	cmp	r3, r2
    febe:	d1a3      	bne.n	fe08 <am_hal_uart_configure+0x11c>
    fec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fec2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fec6:	331c      	adds	r3, #28
    fec8:	031b      	lsls	r3, r3, #12
    feca:	2000      	movs	r0, #0
    fecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fece:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fed2:	639a      	str	r2, [r3, #56]	; 0x38
    fed4:	e752      	b.n	fd7c <am_hal_uart_configure+0x90>
    fed6:	bf00      	nop
    fed8:	01ea9e06 	.word	0x01ea9e06
    fedc:	2dc6c000 	.word	0x2dc6c000
    fee0:	00b71b00 	.word	0x00b71b00
    fee4:	08000003 	.word	0x08000003
    fee8:	5b8d8000 	.word	0x5b8d8000
    feec:	016e3600 	.word	0x016e3600
    fef0:	0b71b000 	.word	0x0b71b000
    fef4:	002dc6c0 	.word	0x002dc6c0
    fef8:	16e36000 	.word	0x16e36000
    fefc:	005b8d80 	.word	0x005b8d80
    ff00:	08000002 	.word	0x08000002

0000ff04 <am_hal_uart_transfer>:
    ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff08:	680f      	ldr	r7, [r1, #0]
    ff0a:	b091      	sub	sp, #68	; 0x44
    ff0c:	4605      	mov	r5, r0
    ff0e:	b13f      	cbz	r7, ff20 <am_hal_uart_transfer+0x1c>
    ff10:	2f01      	cmp	r7, #1
    ff12:	bf18      	it	ne
    ff14:	2707      	movne	r7, #7
    ff16:	d024      	beq.n	ff62 <am_hal_uart_transfer+0x5e>
    ff18:	4638      	mov	r0, r7
    ff1a:	b011      	add	sp, #68	; 0x44
    ff1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff20:	f8d1 900c 	ldr.w	r9, [r1, #12]
    ff24:	690b      	ldr	r3, [r1, #16]
    ff26:	f8d1 a004 	ldr.w	sl, [r1, #4]
    ff2a:	688e      	ldr	r6, [r1, #8]
    ff2c:	9300      	str	r3, [sp, #0]
    ff2e:	f1b9 0f00 	cmp.w	r9, #0
    ff32:	d031      	beq.n	ff98 <am_hal_uart_transfer+0x94>
    ff34:	2e00      	cmp	r6, #0
    ff36:	f000 819c 	beq.w	10272 <am_hal_uart_transfer+0x36e>
    ff3a:	2800      	cmp	r0, #0
    ff3c:	f000 8097 	beq.w	1006e <am_hal_uart_transfer+0x16a>
    ff40:	6803      	ldr	r3, [r0, #0]
    ff42:	4aa9      	ldr	r2, [pc, #676]	; (101e8 <am_hal_uart_transfer+0x2e4>)
    ff44:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ff48:	4293      	cmp	r3, r2
    ff4a:	f000 8092 	beq.w	10072 <am_hal_uart_transfer+0x16e>
    ff4e:	46b8      	mov	r8, r7
    ff50:	9b00      	ldr	r3, [sp, #0]
    ff52:	b10b      	cbz	r3, ff58 <am_hal_uart_transfer+0x54>
    ff54:	f8c3 8000 	str.w	r8, [r3]
    ff58:	2702      	movs	r7, #2
    ff5a:	4638      	mov	r0, r7
    ff5c:	b011      	add	sp, #68	; 0x44
    ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff62:	1d0b      	adds	r3, r1, #4
    ff64:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    ff68:	f1b9 0f00 	cmp.w	r9, #0
    ff6c:	d043      	beq.n	fff6 <am_hal_uart_transfer+0xf2>
    ff6e:	2f00      	cmp	r7, #0
    ff70:	f000 8185 	beq.w	1027e <am_hal_uart_transfer+0x37a>
    ff74:	2800      	cmp	r0, #0
    ff76:	f000 80eb 	beq.w	10150 <am_hal_uart_transfer+0x24c>
    ff7a:	6802      	ldr	r2, [r0, #0]
    ff7c:	499a      	ldr	r1, [pc, #616]	; (101e8 <am_hal_uart_transfer+0x2e4>)
    ff7e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ff82:	428a      	cmp	r2, r1
    ff84:	f000 80e7 	beq.w	10156 <am_hal_uart_transfer+0x252>
    ff88:	2600      	movs	r6, #0
    ff8a:	2702      	movs	r7, #2
    ff8c:	f1bb 0f00 	cmp.w	fp, #0
    ff90:	d0c2      	beq.n	ff18 <am_hal_uart_transfer+0x14>
    ff92:	f8cb 6000 	str.w	r6, [fp]
    ff96:	e7bf      	b.n	ff18 <am_hal_uart_transfer+0x14>
    ff98:	2800      	cmp	r0, #0
    ff9a:	d0dd      	beq.n	ff58 <am_hal_uart_transfer+0x54>
    ff9c:	6803      	ldr	r3, [r0, #0]
    ff9e:	4a92      	ldr	r2, [pc, #584]	; (101e8 <am_hal_uart_transfer+0x2e4>)
    ffa0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ffa4:	4293      	cmp	r3, r2
    ffa6:	d1d7      	bne.n	ff58 <am_hal_uart_transfer+0x54>
    ffa8:	9b00      	ldr	r3, [sp, #0]
    ffaa:	b10b      	cbz	r3, ffb0 <am_hal_uart_transfer+0xac>
    ffac:	f8c3 9000 	str.w	r9, [r3]
    ffb0:	b1fe      	cbz	r6, fff2 <am_hal_uart_transfer+0xee>
    ffb2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	f040 8165 	bne.w	10286 <am_hal_uart_transfer+0x382>
    ffbc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ffbe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ffc2:	311c      	adds	r1, #28
    ffc4:	0309      	lsls	r1, r1, #12
    ffc6:	698a      	ldr	r2, [r1, #24]
    ffc8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ffcc:	2a00      	cmp	r2, #0
    ffce:	f040 818d 	bne.w	102ec <am_hal_uart_transfer+0x3e8>
    ffd2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ffd6:	e003      	b.n	ffe0 <am_hal_uart_transfer+0xdc>
    ffd8:	6988      	ldr	r0, [r1, #24]
    ffda:	0680      	lsls	r0, r0, #26
    ffdc:	f100 8151 	bmi.w	10282 <am_hal_uart_transfer+0x37e>
    ffe0:	3201      	adds	r2, #1
    ffe2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    ffe6:	6008      	str	r0, [r1, #0]
    ffe8:	4296      	cmp	r6, r2
    ffea:	d1f5      	bne.n	ffd8 <am_hal_uart_transfer+0xd4>
    ffec:	9b00      	ldr	r3, [sp, #0]
    ffee:	b103      	cbz	r3, fff2 <am_hal_uart_transfer+0xee>
    fff0:	601e      	str	r6, [r3, #0]
    fff2:	2700      	movs	r7, #0
    fff4:	e790      	b.n	ff18 <am_hal_uart_transfer+0x14>
    fff6:	2800      	cmp	r0, #0
    fff8:	d0ae      	beq.n	ff58 <am_hal_uart_transfer+0x54>
    fffa:	6802      	ldr	r2, [r0, #0]
    fffc:	497a      	ldr	r1, [pc, #488]	; (101e8 <am_hal_uart_transfer+0x2e4>)
    fffe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10002:	428a      	cmp	r2, r1
   10004:	d1a8      	bne.n	ff58 <am_hal_uart_transfer+0x54>
   10006:	f1bb 0f00 	cmp.w	fp, #0
   1000a:	d001      	beq.n	10010 <am_hal_uart_transfer+0x10c>
   1000c:	f8cb 9000 	str.w	r9, [fp]
   10010:	2f00      	cmp	r7, #0
   10012:	d0ee      	beq.n	fff2 <am_hal_uart_transfer+0xee>
   10014:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   10018:	2c00      	cmp	r4, #0
   1001a:	f040 816c 	bne.w	102f6 <am_hal_uart_transfer+0x3f2>
   1001e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10020:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10024:	321c      	adds	r2, #28
   10026:	0312      	lsls	r2, r2, #12
   10028:	6990      	ldr	r0, [r2, #24]
   1002a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1002e:	2800      	cmp	r0, #0
   10030:	f040 819d 	bne.w	1036e <am_hal_uart_transfer+0x46a>
   10034:	6811      	ldr	r1, [r2, #0]
   10036:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   1003a:	bf08      	it	eq
   1003c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   10040:	d008      	beq.n	10054 <am_hal_uart_transfer+0x150>
   10042:	e190      	b.n	10366 <am_hal_uart_transfer+0x462>
   10044:	6991      	ldr	r1, [r2, #24]
   10046:	06c8      	lsls	r0, r1, #27
   10048:	d409      	bmi.n	1005e <am_hal_uart_transfer+0x15a>
   1004a:	6811      	ldr	r1, [r2, #0]
   1004c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   10050:	f040 814e 	bne.w	102f0 <am_hal_uart_transfer+0x3ec>
   10054:	3401      	adds	r4, #1
   10056:	42a7      	cmp	r7, r4
   10058:	f803 1f01 	strb.w	r1, [r3, #1]!
   1005c:	d1f2      	bne.n	10044 <am_hal_uart_transfer+0x140>
   1005e:	2700      	movs	r7, #0
   10060:	f1bb 0f00 	cmp.w	fp, #0
   10064:	f43f af58 	beq.w	ff18 <am_hal_uart_transfer+0x14>
   10068:	f8cb 4000 	str.w	r4, [fp]
   1006c:	e754      	b.n	ff18 <am_hal_uart_transfer+0x14>
   1006e:	4680      	mov	r8, r0
   10070:	e76e      	b.n	ff50 <am_hal_uart_transfer+0x4c>
   10072:	9301      	str	r3, [sp, #4]
   10074:	4651      	mov	r1, sl
   10076:	46bb      	mov	fp, r7
   10078:	46b8      	mov	r8, r7
   1007a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1007e:	b9f2      	cbnz	r2, 100be <am_hal_uart_transfer+0x1ba>
   10080:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10082:	b19e      	cbz	r6, 100ac <am_hal_uart_transfer+0x1a8>
   10084:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10088:	321c      	adds	r2, #28
   1008a:	0312      	lsls	r2, r2, #12
   1008c:	3901      	subs	r1, #1
   1008e:	6994      	ldr	r4, [r2, #24]
   10090:	f3c4 1440 	ubfx	r4, r4, #5, #1
   10094:	b11c      	cbz	r4, 1009e <am_hal_uart_transfer+0x19a>
   10096:	e047      	b.n	10128 <am_hal_uart_transfer+0x224>
   10098:	6993      	ldr	r3, [r2, #24]
   1009a:	069b      	lsls	r3, r3, #26
   1009c:	d441      	bmi.n	10122 <am_hal_uart_transfer+0x21e>
   1009e:	3401      	adds	r4, #1
   100a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   100a4:	6013      	str	r3, [r2, #0]
   100a6:	42b4      	cmp	r4, r6
   100a8:	d1f6      	bne.n	10098 <am_hal_uart_transfer+0x194>
   100aa:	44a0      	add	r8, r4
   100ac:	9b00      	ldr	r3, [sp, #0]
   100ae:	2b00      	cmp	r3, #0
   100b0:	d09f      	beq.n	fff2 <am_hal_uart_transfer+0xee>
   100b2:	4638      	mov	r0, r7
   100b4:	f8c3 8000 	str.w	r8, [r3]
   100b8:	b011      	add	sp, #68	; 0x44
   100ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100be:	6baa      	ldr	r2, [r5, #56]	; 0x38
   100c0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   100c2:	1b14      	subs	r4, r2, r4
   100c4:	42b4      	cmp	r4, r6
   100c6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   100ca:	bf28      	it	cs
   100cc:	4634      	movcs	r4, r6
   100ce:	4622      	mov	r2, r4
   100d0:	4618      	mov	r0, r3
   100d2:	9302      	str	r3, [sp, #8]
   100d4:	f000 f95c 	bl	10390 <am_hal_queue_item_add>
   100d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   100da:	9303      	str	r3, [sp, #12]
   100dc:	f7ff fbc2 	bl	f864 <am_hal_interrupt_master_disable>
   100e0:	9b03      	ldr	r3, [sp, #12]
   100e2:	9008      	str	r0, [sp, #32]
   100e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100e8:	331c      	adds	r3, #28
   100ea:	031b      	lsls	r3, r3, #12
   100ec:	9303      	str	r3, [sp, #12]
   100ee:	e00d      	b.n	1010c <am_hal_uart_transfer+0x208>
   100f0:	f000 f986 	bl	10400 <am_hal_queue_item_get>
   100f4:	b190      	cbz	r0, 1011c <am_hal_uart_transfer+0x218>
   100f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   100f8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   100fc:	331c      	adds	r3, #28
   100fe:	031b      	lsls	r3, r3, #12
   10100:	699a      	ldr	r2, [r3, #24]
   10102:	0692      	lsls	r2, r2, #26
   10104:	bf5c      	itt	pl
   10106:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   1010a:	601a      	strpl	r2, [r3, #0]
   1010c:	9b03      	ldr	r3, [sp, #12]
   1010e:	9802      	ldr	r0, [sp, #8]
   10110:	699b      	ldr	r3, [r3, #24]
   10112:	069b      	lsls	r3, r3, #26
   10114:	f04f 0201 	mov.w	r2, #1
   10118:	a907      	add	r1, sp, #28
   1011a:	d5e9      	bpl.n	100f0 <am_hal_uart_transfer+0x1ec>
   1011c:	9808      	ldr	r0, [sp, #32]
   1011e:	f7ff fba5 	bl	f86c <am_hal_interrupt_master_set>
   10122:	1b36      	subs	r6, r6, r4
   10124:	44a0      	add	r8, r4
   10126:	d0c1      	beq.n	100ac <am_hal_uart_transfer+0x1a8>
   10128:	2001      	movs	r0, #1
   1012a:	f7ff fb67 	bl	f7fc <am_hal_flash_delay>
   1012e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   10132:	d001      	beq.n	10138 <am_hal_uart_transfer+0x234>
   10134:	f10b 0b01 	add.w	fp, fp, #1
   10138:	45d9      	cmp	r9, fp
   1013a:	d9b7      	bls.n	100ac <am_hal_uart_transfer+0x1a8>
   1013c:	682a      	ldr	r2, [r5, #0]
   1013e:	9b01      	ldr	r3, [sp, #4]
   10140:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10144:	429a      	cmp	r2, r3
   10146:	eb0a 0108 	add.w	r1, sl, r8
   1014a:	f47f af01 	bne.w	ff50 <am_hal_uart_transfer+0x4c>
   1014e:	e794      	b.n	1007a <am_hal_uart_transfer+0x176>
   10150:	4606      	mov	r6, r0
   10152:	2702      	movs	r7, #2
   10154:	e71a      	b.n	ff8c <am_hal_uart_transfer+0x88>
   10156:	9200      	str	r2, [sp, #0]
   10158:	f100 0248 	add.w	r2, r0, #72	; 0x48
   1015c:	f04f 0a00 	mov.w	sl, #0
   10160:	9202      	str	r2, [sp, #8]
   10162:	465a      	mov	r2, fp
   10164:	4698      	mov	r8, r3
   10166:	469b      	mov	fp, r3
   10168:	4656      	mov	r6, sl
   1016a:	4613      	mov	r3, r2
   1016c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   10170:	2a00      	cmp	r2, #0
   10172:	d152      	bne.n	1021a <am_hal_uart_transfer+0x316>
   10174:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10176:	b3a7      	cbz	r7, 101e2 <am_hal_uart_transfer+0x2de>
   10178:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1017c:	311c      	adds	r1, #28
   1017e:	0309      	lsls	r1, r1, #12
   10180:	698a      	ldr	r2, [r1, #24]
   10182:	06d0      	lsls	r0, r2, #27
   10184:	d432      	bmi.n	101ec <am_hal_uart_transfer+0x2e8>
   10186:	680a      	ldr	r2, [r1, #0]
   10188:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   1018c:	f040 80aa 	bne.w	102e4 <am_hal_uart_transfer+0x3e0>
   10190:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10194:	e006      	b.n	101a4 <am_hal_uart_transfer+0x2a0>
   10196:	698a      	ldr	r2, [r1, #24]
   10198:	06d2      	lsls	r2, r2, #27
   1019a:	d41f      	bmi.n	101dc <am_hal_uart_transfer+0x2d8>
   1019c:	680a      	ldr	r2, [r1, #0]
   1019e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   101a2:	d161      	bne.n	10268 <am_hal_uart_transfer+0x364>
   101a4:	3401      	adds	r4, #1
   101a6:	42bc      	cmp	r4, r7
   101a8:	f808 2f01 	strb.w	r2, [r8, #1]!
   101ac:	d1f3      	bne.n	10196 <am_hal_uart_transfer+0x292>
   101ae:	469b      	mov	fp, r3
   101b0:	4426      	add	r6, r4
   101b2:	f1bb 0f00 	cmp.w	fp, #0
   101b6:	f43f af1c 	beq.w	fff2 <am_hal_uart_transfer+0xee>
   101ba:	f8cb 6000 	str.w	r6, [fp]
   101be:	2700      	movs	r7, #0
   101c0:	e6aa      	b.n	ff18 <am_hal_uart_transfer+0x14>
   101c2:	9807      	ldr	r0, [sp, #28]
   101c4:	f7ff fb52 	bl	f86c <am_hal_interrupt_master_set>
   101c8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   101ca:	9802      	ldr	r0, [sp, #8]
   101cc:	42bc      	cmp	r4, r7
   101ce:	bf28      	it	cs
   101d0:	463c      	movcs	r4, r7
   101d2:	4641      	mov	r1, r8
   101d4:	4622      	mov	r2, r4
   101d6:	f000 f913 	bl	10400 <am_hal_queue_item_get>
   101da:	9b01      	ldr	r3, [sp, #4]
   101dc:	1b3f      	subs	r7, r7, r4
   101de:	4426      	add	r6, r4
   101e0:	d104      	bne.n	101ec <am_hal_uart_transfer+0x2e8>
   101e2:	469b      	mov	fp, r3
   101e4:	e7e5      	b.n	101b2 <am_hal_uart_transfer+0x2ae>
   101e6:	bf00      	nop
   101e8:	01ea9e06 	.word	0x01ea9e06
   101ec:	2001      	movs	r0, #1
   101ee:	9301      	str	r3, [sp, #4]
   101f0:	f7ff fb04 	bl	f7fc <am_hal_flash_delay>
   101f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   101f8:	9b01      	ldr	r3, [sp, #4]
   101fa:	d001      	beq.n	10200 <am_hal_uart_transfer+0x2fc>
   101fc:	f10a 0a01 	add.w	sl, sl, #1
   10200:	45d1      	cmp	r9, sl
   10202:	d9ee      	bls.n	101e2 <am_hal_uart_transfer+0x2de>
   10204:	682a      	ldr	r2, [r5, #0]
   10206:	9900      	ldr	r1, [sp, #0]
   10208:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1020c:	428a      	cmp	r2, r1
   1020e:	eb0b 0806 	add.w	r8, fp, r6
   10212:	d0ab      	beq.n	1016c <am_hal_uart_transfer+0x268>
   10214:	469b      	mov	fp, r3
   10216:	2702      	movs	r7, #2
   10218:	e6b8      	b.n	ff8c <am_hal_uart_transfer+0x88>
   1021a:	9301      	str	r3, [sp, #4]
   1021c:	f7ff fb22 	bl	f864 <am_hal_interrupt_master_disable>
   10220:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10222:	9007      	str	r0, [sp, #28]
   10224:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   10228:	301c      	adds	r0, #28
   1022a:	9b01      	ldr	r3, [sp, #4]
   1022c:	0300      	lsls	r0, r0, #12
   1022e:	ac08      	add	r4, sp, #32
   10230:	2200      	movs	r2, #0
   10232:	6981      	ldr	r1, [r0, #24]
   10234:	06c9      	lsls	r1, r1, #27
   10236:	d409      	bmi.n	1024c <am_hal_uart_transfer+0x348>
   10238:	6801      	ldr	r1, [r0, #0]
   1023a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   1023e:	f102 0201 	add.w	r2, r2, #1
   10242:	d118      	bne.n	10276 <am_hal_uart_transfer+0x372>
   10244:	2a20      	cmp	r2, #32
   10246:	f804 1b01 	strb.w	r1, [r4], #1
   1024a:	d1f2      	bne.n	10232 <am_hal_uart_transfer+0x32e>
   1024c:	a908      	add	r1, sp, #32
   1024e:	9802      	ldr	r0, [sp, #8]
   10250:	9301      	str	r3, [sp, #4]
   10252:	f000 f89d 	bl	10390 <am_hal_queue_item_add>
   10256:	9b01      	ldr	r3, [sp, #4]
   10258:	2800      	cmp	r0, #0
   1025a:	d1b2      	bne.n	101c2 <am_hal_uart_transfer+0x2be>
   1025c:	4f45      	ldr	r7, [pc, #276]	; (10374 <am_hal_uart_transfer+0x470>)
   1025e:	469b      	mov	fp, r3
   10260:	9807      	ldr	r0, [sp, #28]
   10262:	f7ff fb03 	bl	f86c <am_hal_interrupt_master_set>
   10266:	e691      	b.n	ff8c <am_hal_uart_transfer+0x88>
   10268:	469b      	mov	fp, r3
   1026a:	4426      	add	r6, r4
   1026c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10270:	e68c      	b.n	ff8c <am_hal_uart_transfer+0x88>
   10272:	46b8      	mov	r8, r7
   10274:	e71a      	b.n	100ac <am_hal_uart_transfer+0x1a8>
   10276:	469b      	mov	fp, r3
   10278:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1027c:	e7f0      	b.n	10260 <am_hal_uart_transfer+0x35c>
   1027e:	463e      	mov	r6, r7
   10280:	e797      	b.n	101b2 <am_hal_uart_transfer+0x2ae>
   10282:	4616      	mov	r6, r2
   10284:	e6b2      	b.n	ffec <am_hal_uart_transfer+0xe8>
   10286:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   10288:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1028a:	1a9b      	subs	r3, r3, r2
   1028c:	429e      	cmp	r6, r3
   1028e:	bf28      	it	cs
   10290:	461e      	movcs	r6, r3
   10292:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   10296:	4651      	mov	r1, sl
   10298:	4632      	mov	r2, r6
   1029a:	4620      	mov	r0, r4
   1029c:	f000 f878 	bl	10390 <am_hal_queue_item_add>
   102a0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   102a2:	f7ff fadf 	bl	f864 <am_hal_interrupt_master_disable>
   102a6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   102aa:	371c      	adds	r7, #28
   102ac:	033f      	lsls	r7, r7, #12
   102ae:	9005      	str	r0, [sp, #20]
   102b0:	e00d      	b.n	102ce <am_hal_uart_transfer+0x3ca>
   102b2:	f000 f8a5 	bl	10400 <am_hal_queue_item_get>
   102b6:	b188      	cbz	r0, 102dc <am_hal_uart_transfer+0x3d8>
   102b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   102ba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   102be:	331c      	adds	r3, #28
   102c0:	031b      	lsls	r3, r3, #12
   102c2:	699a      	ldr	r2, [r3, #24]
   102c4:	0692      	lsls	r2, r2, #26
   102c6:	bf5c      	itt	pl
   102c8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   102cc:	601a      	strpl	r2, [r3, #0]
   102ce:	69bb      	ldr	r3, [r7, #24]
   102d0:	069b      	lsls	r3, r3, #26
   102d2:	f04f 0201 	mov.w	r2, #1
   102d6:	a908      	add	r1, sp, #32
   102d8:	4620      	mov	r0, r4
   102da:	d5ea      	bpl.n	102b2 <am_hal_uart_transfer+0x3ae>
   102dc:	9805      	ldr	r0, [sp, #20]
   102de:	f7ff fac5 	bl	f86c <am_hal_interrupt_master_set>
   102e2:	e683      	b.n	ffec <am_hal_uart_transfer+0xe8>
   102e4:	469b      	mov	fp, r3
   102e6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   102ea:	e64f      	b.n	ff8c <am_hal_uart_transfer+0x88>
   102ec:	461e      	mov	r6, r3
   102ee:	e67d      	b.n	ffec <am_hal_uart_transfer+0xe8>
   102f0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   102f4:	e6b4      	b.n	10060 <am_hal_uart_transfer+0x15c>
   102f6:	9300      	str	r3, [sp, #0]
   102f8:	f7ff fab4 	bl	f864 <am_hal_interrupt_master_disable>
   102fc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   102fe:	9006      	str	r0, [sp, #24]
   10300:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10304:	321c      	adds	r2, #28
   10306:	0311      	lsls	r1, r2, #12
   10308:	a808      	add	r0, sp, #32
   1030a:	2200      	movs	r2, #0
   1030c:	9b00      	ldr	r3, [sp, #0]
   1030e:	e009      	b.n	10324 <am_hal_uart_transfer+0x420>
   10310:	680c      	ldr	r4, [r1, #0]
   10312:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   10316:	f102 0201 	add.w	r2, r2, #1
   1031a:	d121      	bne.n	10360 <am_hal_uart_transfer+0x45c>
   1031c:	2a20      	cmp	r2, #32
   1031e:	f800 4b01 	strb.w	r4, [r0], #1
   10322:	d002      	beq.n	1032a <am_hal_uart_transfer+0x426>
   10324:	698c      	ldr	r4, [r1, #24]
   10326:	06e4      	lsls	r4, r4, #27
   10328:	d5f2      	bpl.n	10310 <am_hal_uart_transfer+0x40c>
   1032a:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1032e:	a908      	add	r1, sp, #32
   10330:	4630      	mov	r0, r6
   10332:	9300      	str	r3, [sp, #0]
   10334:	f000 f82c 	bl	10390 <am_hal_queue_item_add>
   10338:	b920      	cbnz	r0, 10344 <am_hal_uart_transfer+0x440>
   1033a:	4f0e      	ldr	r7, [pc, #56]	; (10374 <am_hal_uart_transfer+0x470>)
   1033c:	9806      	ldr	r0, [sp, #24]
   1033e:	f7ff fa95 	bl	f86c <am_hal_interrupt_master_set>
   10342:	e5e9      	b.n	ff18 <am_hal_uart_transfer+0x14>
   10344:	9806      	ldr	r0, [sp, #24]
   10346:	f7ff fa91 	bl	f86c <am_hal_interrupt_master_set>
   1034a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1034c:	9b00      	ldr	r3, [sp, #0]
   1034e:	42bc      	cmp	r4, r7
   10350:	bf28      	it	cs
   10352:	463c      	movcs	r4, r7
   10354:	4619      	mov	r1, r3
   10356:	4630      	mov	r0, r6
   10358:	4622      	mov	r2, r4
   1035a:	f000 f851 	bl	10400 <am_hal_queue_item_get>
   1035e:	e67e      	b.n	1005e <am_hal_uart_transfer+0x15a>
   10360:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10364:	e7ea      	b.n	1033c <am_hal_uart_transfer+0x438>
   10366:	4604      	mov	r4, r0
   10368:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1036c:	e678      	b.n	10060 <am_hal_uart_transfer+0x15c>
   1036e:	4627      	mov	r7, r4
   10370:	e676      	b.n	10060 <am_hal_uart_transfer+0x15c>
   10372:	bf00      	nop
   10374:	08000001 	.word	0x08000001

00010378 <am_hal_queue_init>:
   10378:	b410      	push	{r4}
   1037a:	2400      	movs	r4, #0
   1037c:	6004      	str	r4, [r0, #0]
   1037e:	6044      	str	r4, [r0, #4]
   10380:	6084      	str	r4, [r0, #8]
   10382:	60c3      	str	r3, [r0, #12]
   10384:	6102      	str	r2, [r0, #16]
   10386:	6141      	str	r1, [r0, #20]
   10388:	f85d 4b04 	ldr.w	r4, [sp], #4
   1038c:	4770      	bx	lr
   1038e:	bf00      	nop

00010390 <am_hal_queue_item_add>:
   10390:	b5f0      	push	{r4, r5, r6, r7, lr}
   10392:	4604      	mov	r4, r0
   10394:	6906      	ldr	r6, [r0, #16]
   10396:	b083      	sub	sp, #12
   10398:	fb06 f602 	mul.w	r6, r6, r2
   1039c:	460d      	mov	r5, r1
   1039e:	f7ff fa61 	bl	f864 <am_hal_interrupt_master_disable>
   103a2:	68e7      	ldr	r7, [r4, #12]
   103a4:	68a2      	ldr	r2, [r4, #8]
   103a6:	9001      	str	r0, [sp, #4]
   103a8:	1abb      	subs	r3, r7, r2
   103aa:	429e      	cmp	r6, r3
   103ac:	d826      	bhi.n	103fc <am_hal_queue_item_add+0x6c>
   103ae:	b196      	cbz	r6, 103d6 <am_hal_queue_item_add+0x46>
   103b0:	6823      	ldr	r3, [r4, #0]
   103b2:	4629      	mov	r1, r5
   103b4:	b1c5      	cbz	r5, 103e8 <am_hal_queue_item_add+0x58>
   103b6:	19af      	adds	r7, r5, r6
   103b8:	6962      	ldr	r2, [r4, #20]
   103ba:	f811 0b01 	ldrb.w	r0, [r1], #1
   103be:	54d0      	strb	r0, [r2, r3]
   103c0:	6823      	ldr	r3, [r4, #0]
   103c2:	68e5      	ldr	r5, [r4, #12]
   103c4:	3301      	adds	r3, #1
   103c6:	42b9      	cmp	r1, r7
   103c8:	fbb3 f0f5 	udiv	r0, r3, r5
   103cc:	fb05 3310 	mls	r3, r5, r0, r3
   103d0:	6023      	str	r3, [r4, #0]
   103d2:	d1f1      	bne.n	103b8 <am_hal_queue_item_add+0x28>
   103d4:	68a2      	ldr	r2, [r4, #8]
   103d6:	4432      	add	r2, r6
   103d8:	60a2      	str	r2, [r4, #8]
   103da:	2401      	movs	r4, #1
   103dc:	9801      	ldr	r0, [sp, #4]
   103de:	f7ff fa45 	bl	f86c <am_hal_interrupt_master_set>
   103e2:	4620      	mov	r0, r4
   103e4:	b003      	add	sp, #12
   103e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103e8:	3101      	adds	r1, #1
   103ea:	3301      	adds	r3, #1
   103ec:	428e      	cmp	r6, r1
   103ee:	fbb3 f0f7 	udiv	r0, r3, r7
   103f2:	fb07 3310 	mls	r3, r7, r0, r3
   103f6:	d1f7      	bne.n	103e8 <am_hal_queue_item_add+0x58>
   103f8:	6023      	str	r3, [r4, #0]
   103fa:	e7ec      	b.n	103d6 <am_hal_queue_item_add+0x46>
   103fc:	2400      	movs	r4, #0
   103fe:	e7ed      	b.n	103dc <am_hal_queue_item_add+0x4c>

00010400 <am_hal_queue_item_get>:
   10400:	b5f0      	push	{r4, r5, r6, r7, lr}
   10402:	4604      	mov	r4, r0
   10404:	6906      	ldr	r6, [r0, #16]
   10406:	b083      	sub	sp, #12
   10408:	fb06 f602 	mul.w	r6, r6, r2
   1040c:	460d      	mov	r5, r1
   1040e:	f7ff fa29 	bl	f864 <am_hal_interrupt_master_disable>
   10412:	68a2      	ldr	r2, [r4, #8]
   10414:	9001      	str	r0, [sp, #4]
   10416:	4296      	cmp	r6, r2
   10418:	d81c      	bhi.n	10454 <am_hal_queue_item_get+0x54>
   1041a:	b196      	cbz	r6, 10442 <am_hal_queue_item_get+0x42>
   1041c:	6863      	ldr	r3, [r4, #4]
   1041e:	b1dd      	cbz	r5, 10458 <am_hal_queue_item_get+0x58>
   10420:	4629      	mov	r1, r5
   10422:	19af      	adds	r7, r5, r6
   10424:	6962      	ldr	r2, [r4, #20]
   10426:	5cd3      	ldrb	r3, [r2, r3]
   10428:	f801 3b01 	strb.w	r3, [r1], #1
   1042c:	6863      	ldr	r3, [r4, #4]
   1042e:	68e5      	ldr	r5, [r4, #12]
   10430:	3301      	adds	r3, #1
   10432:	428f      	cmp	r7, r1
   10434:	fbb3 f0f5 	udiv	r0, r3, r5
   10438:	fb05 3310 	mls	r3, r5, r0, r3
   1043c:	6063      	str	r3, [r4, #4]
   1043e:	d1f1      	bne.n	10424 <am_hal_queue_item_get+0x24>
   10440:	68a2      	ldr	r2, [r4, #8]
   10442:	1b92      	subs	r2, r2, r6
   10444:	60a2      	str	r2, [r4, #8]
   10446:	2401      	movs	r4, #1
   10448:	9801      	ldr	r0, [sp, #4]
   1044a:	f7ff fa0f 	bl	f86c <am_hal_interrupt_master_set>
   1044e:	4620      	mov	r0, r4
   10450:	b003      	add	sp, #12
   10452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10454:	2400      	movs	r4, #0
   10456:	e7f7      	b.n	10448 <am_hal_queue_item_get+0x48>
   10458:	68e0      	ldr	r0, [r4, #12]
   1045a:	4629      	mov	r1, r5
   1045c:	3101      	adds	r1, #1
   1045e:	3301      	adds	r3, #1
   10460:	428e      	cmp	r6, r1
   10462:	fbb3 f5f0 	udiv	r5, r3, r0
   10466:	fb00 3315 	mls	r3, r0, r5, r3
   1046a:	d1f7      	bne.n	1045c <am_hal_queue_item_get+0x5c>
   1046c:	6063      	str	r3, [r4, #4]
   1046e:	e7e8      	b.n	10442 <am_hal_queue_item_get+0x42>

00010470 <memset>:
   10470:	b4f0      	push	{r4, r5, r6, r7}
   10472:	0786      	lsls	r6, r0, #30
   10474:	d043      	beq.n	104fe <memset+0x8e>
   10476:	1e54      	subs	r4, r2, #1
   10478:	2a00      	cmp	r2, #0
   1047a:	d03e      	beq.n	104fa <memset+0x8a>
   1047c:	b2ca      	uxtb	r2, r1
   1047e:	4603      	mov	r3, r0
   10480:	e002      	b.n	10488 <memset+0x18>
   10482:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   10486:	d338      	bcc.n	104fa <memset+0x8a>
   10488:	f803 2b01 	strb.w	r2, [r3], #1
   1048c:	079d      	lsls	r5, r3, #30
   1048e:	d1f8      	bne.n	10482 <memset+0x12>
   10490:	2c03      	cmp	r4, #3
   10492:	d92b      	bls.n	104ec <memset+0x7c>
   10494:	b2cd      	uxtb	r5, r1
   10496:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1049a:	2c0f      	cmp	r4, #15
   1049c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   104a0:	d916      	bls.n	104d0 <memset+0x60>
   104a2:	f1a4 0710 	sub.w	r7, r4, #16
   104a6:	093f      	lsrs	r7, r7, #4
   104a8:	f103 0620 	add.w	r6, r3, #32
   104ac:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   104b0:	f103 0210 	add.w	r2, r3, #16
   104b4:	e942 5504 	strd	r5, r5, [r2, #-16]
   104b8:	e942 5502 	strd	r5, r5, [r2, #-8]
   104bc:	3210      	adds	r2, #16
   104be:	42b2      	cmp	r2, r6
   104c0:	d1f8      	bne.n	104b4 <memset+0x44>
   104c2:	f004 040f 	and.w	r4, r4, #15
   104c6:	3701      	adds	r7, #1
   104c8:	2c03      	cmp	r4, #3
   104ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   104ce:	d90d      	bls.n	104ec <memset+0x7c>
   104d0:	461e      	mov	r6, r3
   104d2:	4622      	mov	r2, r4
   104d4:	3a04      	subs	r2, #4
   104d6:	2a03      	cmp	r2, #3
   104d8:	f846 5b04 	str.w	r5, [r6], #4
   104dc:	d8fa      	bhi.n	104d4 <memset+0x64>
   104de:	1f22      	subs	r2, r4, #4
   104e0:	f022 0203 	bic.w	r2, r2, #3
   104e4:	3204      	adds	r2, #4
   104e6:	4413      	add	r3, r2
   104e8:	f004 0403 	and.w	r4, r4, #3
   104ec:	b12c      	cbz	r4, 104fa <memset+0x8a>
   104ee:	b2c9      	uxtb	r1, r1
   104f0:	441c      	add	r4, r3
   104f2:	f803 1b01 	strb.w	r1, [r3], #1
   104f6:	429c      	cmp	r4, r3
   104f8:	d1fb      	bne.n	104f2 <memset+0x82>
   104fa:	bcf0      	pop	{r4, r5, r6, r7}
   104fc:	4770      	bx	lr
   104fe:	4614      	mov	r4, r2
   10500:	4603      	mov	r3, r0
   10502:	e7c5      	b.n	10490 <memset+0x20>

00010504 <__udivmoddi4>:
   10504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10508:	9e08      	ldr	r6, [sp, #32]
   1050a:	4604      	mov	r4, r0
   1050c:	4688      	mov	r8, r1
   1050e:	2b00      	cmp	r3, #0
   10510:	d14b      	bne.n	105aa <__udivmoddi4+0xa6>
   10512:	428a      	cmp	r2, r1
   10514:	4615      	mov	r5, r2
   10516:	d967      	bls.n	105e8 <__udivmoddi4+0xe4>
   10518:	fab2 f282 	clz	r2, r2
   1051c:	b14a      	cbz	r2, 10532 <__udivmoddi4+0x2e>
   1051e:	f1c2 0720 	rsb	r7, r2, #32
   10522:	fa01 f302 	lsl.w	r3, r1, r2
   10526:	fa20 f707 	lsr.w	r7, r0, r7
   1052a:	4095      	lsls	r5, r2
   1052c:	ea47 0803 	orr.w	r8, r7, r3
   10530:	4094      	lsls	r4, r2
   10532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10536:	0c23      	lsrs	r3, r4, #16
   10538:	fbb8 f7fe 	udiv	r7, r8, lr
   1053c:	fa1f fc85 	uxth.w	ip, r5
   10540:	fb0e 8817 	mls	r8, lr, r7, r8
   10544:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   10548:	fb07 f10c 	mul.w	r1, r7, ip
   1054c:	4299      	cmp	r1, r3
   1054e:	d909      	bls.n	10564 <__udivmoddi4+0x60>
   10550:	18eb      	adds	r3, r5, r3
   10552:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   10556:	f080 811b 	bcs.w	10790 <__udivmoddi4+0x28c>
   1055a:	4299      	cmp	r1, r3
   1055c:	f240 8118 	bls.w	10790 <__udivmoddi4+0x28c>
   10560:	3f02      	subs	r7, #2
   10562:	442b      	add	r3, r5
   10564:	1a5b      	subs	r3, r3, r1
   10566:	b2a4      	uxth	r4, r4
   10568:	fbb3 f0fe 	udiv	r0, r3, lr
   1056c:	fb0e 3310 	mls	r3, lr, r0, r3
   10570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10574:	fb00 fc0c 	mul.w	ip, r0, ip
   10578:	45a4      	cmp	ip, r4
   1057a:	d909      	bls.n	10590 <__udivmoddi4+0x8c>
   1057c:	192c      	adds	r4, r5, r4
   1057e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   10582:	f080 8107 	bcs.w	10794 <__udivmoddi4+0x290>
   10586:	45a4      	cmp	ip, r4
   10588:	f240 8104 	bls.w	10794 <__udivmoddi4+0x290>
   1058c:	3802      	subs	r0, #2
   1058e:	442c      	add	r4, r5
   10590:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   10594:	eba4 040c 	sub.w	r4, r4, ip
   10598:	2700      	movs	r7, #0
   1059a:	b11e      	cbz	r6, 105a4 <__udivmoddi4+0xa0>
   1059c:	40d4      	lsrs	r4, r2
   1059e:	2300      	movs	r3, #0
   105a0:	e9c6 4300 	strd	r4, r3, [r6]
   105a4:	4639      	mov	r1, r7
   105a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   105aa:	428b      	cmp	r3, r1
   105ac:	d909      	bls.n	105c2 <__udivmoddi4+0xbe>
   105ae:	2e00      	cmp	r6, #0
   105b0:	f000 80eb 	beq.w	1078a <__udivmoddi4+0x286>
   105b4:	2700      	movs	r7, #0
   105b6:	e9c6 0100 	strd	r0, r1, [r6]
   105ba:	4638      	mov	r0, r7
   105bc:	4639      	mov	r1, r7
   105be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   105c2:	fab3 f783 	clz	r7, r3
   105c6:	2f00      	cmp	r7, #0
   105c8:	d147      	bne.n	1065a <__udivmoddi4+0x156>
   105ca:	428b      	cmp	r3, r1
   105cc:	d302      	bcc.n	105d4 <__udivmoddi4+0xd0>
   105ce:	4282      	cmp	r2, r0
   105d0:	f200 80fa 	bhi.w	107c8 <__udivmoddi4+0x2c4>
   105d4:	1a84      	subs	r4, r0, r2
   105d6:	eb61 0303 	sbc.w	r3, r1, r3
   105da:	2001      	movs	r0, #1
   105dc:	4698      	mov	r8, r3
   105de:	2e00      	cmp	r6, #0
   105e0:	d0e0      	beq.n	105a4 <__udivmoddi4+0xa0>
   105e2:	e9c6 4800 	strd	r4, r8, [r6]
   105e6:	e7dd      	b.n	105a4 <__udivmoddi4+0xa0>
   105e8:	b902      	cbnz	r2, 105ec <__udivmoddi4+0xe8>
   105ea:	deff      	udf	#255	; 0xff
   105ec:	fab2 f282 	clz	r2, r2
   105f0:	2a00      	cmp	r2, #0
   105f2:	f040 808f 	bne.w	10714 <__udivmoddi4+0x210>
   105f6:	1b49      	subs	r1, r1, r5
   105f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   105fc:	fa1f f885 	uxth.w	r8, r5
   10600:	2701      	movs	r7, #1
   10602:	fbb1 fcfe 	udiv	ip, r1, lr
   10606:	0c23      	lsrs	r3, r4, #16
   10608:	fb0e 111c 	mls	r1, lr, ip, r1
   1060c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10610:	fb08 f10c 	mul.w	r1, r8, ip
   10614:	4299      	cmp	r1, r3
   10616:	d907      	bls.n	10628 <__udivmoddi4+0x124>
   10618:	18eb      	adds	r3, r5, r3
   1061a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1061e:	d202      	bcs.n	10626 <__udivmoddi4+0x122>
   10620:	4299      	cmp	r1, r3
   10622:	f200 80cd 	bhi.w	107c0 <__udivmoddi4+0x2bc>
   10626:	4684      	mov	ip, r0
   10628:	1a59      	subs	r1, r3, r1
   1062a:	b2a3      	uxth	r3, r4
   1062c:	fbb1 f0fe 	udiv	r0, r1, lr
   10630:	fb0e 1410 	mls	r4, lr, r0, r1
   10634:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   10638:	fb08 f800 	mul.w	r8, r8, r0
   1063c:	45a0      	cmp	r8, r4
   1063e:	d907      	bls.n	10650 <__udivmoddi4+0x14c>
   10640:	192c      	adds	r4, r5, r4
   10642:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   10646:	d202      	bcs.n	1064e <__udivmoddi4+0x14a>
   10648:	45a0      	cmp	r8, r4
   1064a:	f200 80b6 	bhi.w	107ba <__udivmoddi4+0x2b6>
   1064e:	4618      	mov	r0, r3
   10650:	eba4 0408 	sub.w	r4, r4, r8
   10654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10658:	e79f      	b.n	1059a <__udivmoddi4+0x96>
   1065a:	f1c7 0c20 	rsb	ip, r7, #32
   1065e:	40bb      	lsls	r3, r7
   10660:	fa22 fe0c 	lsr.w	lr, r2, ip
   10664:	ea4e 0e03 	orr.w	lr, lr, r3
   10668:	fa01 f407 	lsl.w	r4, r1, r7
   1066c:	fa20 f50c 	lsr.w	r5, r0, ip
   10670:	fa21 f30c 	lsr.w	r3, r1, ip
   10674:	ea4f 481e 	mov.w	r8, lr, lsr #16
   10678:	4325      	orrs	r5, r4
   1067a:	fbb3 f9f8 	udiv	r9, r3, r8
   1067e:	0c2c      	lsrs	r4, r5, #16
   10680:	fb08 3319 	mls	r3, r8, r9, r3
   10684:	fa1f fa8e 	uxth.w	sl, lr
   10688:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1068c:	fb09 f40a 	mul.w	r4, r9, sl
   10690:	429c      	cmp	r4, r3
   10692:	fa02 f207 	lsl.w	r2, r2, r7
   10696:	fa00 f107 	lsl.w	r1, r0, r7
   1069a:	d90b      	bls.n	106b4 <__udivmoddi4+0x1b0>
   1069c:	eb1e 0303 	adds.w	r3, lr, r3
   106a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   106a4:	f080 8087 	bcs.w	107b6 <__udivmoddi4+0x2b2>
   106a8:	429c      	cmp	r4, r3
   106aa:	f240 8084 	bls.w	107b6 <__udivmoddi4+0x2b2>
   106ae:	f1a9 0902 	sub.w	r9, r9, #2
   106b2:	4473      	add	r3, lr
   106b4:	1b1b      	subs	r3, r3, r4
   106b6:	b2ad      	uxth	r5, r5
   106b8:	fbb3 f0f8 	udiv	r0, r3, r8
   106bc:	fb08 3310 	mls	r3, r8, r0, r3
   106c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   106c4:	fb00 fa0a 	mul.w	sl, r0, sl
   106c8:	45a2      	cmp	sl, r4
   106ca:	d908      	bls.n	106de <__udivmoddi4+0x1da>
   106cc:	eb1e 0404 	adds.w	r4, lr, r4
   106d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   106d4:	d26b      	bcs.n	107ae <__udivmoddi4+0x2aa>
   106d6:	45a2      	cmp	sl, r4
   106d8:	d969      	bls.n	107ae <__udivmoddi4+0x2aa>
   106da:	3802      	subs	r0, #2
   106dc:	4474      	add	r4, lr
   106de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   106e2:	fba0 8902 	umull	r8, r9, r0, r2
   106e6:	eba4 040a 	sub.w	r4, r4, sl
   106ea:	454c      	cmp	r4, r9
   106ec:	46c2      	mov	sl, r8
   106ee:	464b      	mov	r3, r9
   106f0:	d354      	bcc.n	1079c <__udivmoddi4+0x298>
   106f2:	d051      	beq.n	10798 <__udivmoddi4+0x294>
   106f4:	2e00      	cmp	r6, #0
   106f6:	d069      	beq.n	107cc <__udivmoddi4+0x2c8>
   106f8:	ebb1 050a 	subs.w	r5, r1, sl
   106fc:	eb64 0403 	sbc.w	r4, r4, r3
   10700:	fa04 fc0c 	lsl.w	ip, r4, ip
   10704:	40fd      	lsrs	r5, r7
   10706:	40fc      	lsrs	r4, r7
   10708:	ea4c 0505 	orr.w	r5, ip, r5
   1070c:	e9c6 5400 	strd	r5, r4, [r6]
   10710:	2700      	movs	r7, #0
   10712:	e747      	b.n	105a4 <__udivmoddi4+0xa0>
   10714:	f1c2 0320 	rsb	r3, r2, #32
   10718:	fa20 f703 	lsr.w	r7, r0, r3
   1071c:	4095      	lsls	r5, r2
   1071e:	fa01 f002 	lsl.w	r0, r1, r2
   10722:	fa21 f303 	lsr.w	r3, r1, r3
   10726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1072a:	4338      	orrs	r0, r7
   1072c:	0c01      	lsrs	r1, r0, #16
   1072e:	fbb3 f7fe 	udiv	r7, r3, lr
   10732:	fa1f f885 	uxth.w	r8, r5
   10736:	fb0e 3317 	mls	r3, lr, r7, r3
   1073a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1073e:	fb07 f308 	mul.w	r3, r7, r8
   10742:	428b      	cmp	r3, r1
   10744:	fa04 f402 	lsl.w	r4, r4, r2
   10748:	d907      	bls.n	1075a <__udivmoddi4+0x256>
   1074a:	1869      	adds	r1, r5, r1
   1074c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   10750:	d22f      	bcs.n	107b2 <__udivmoddi4+0x2ae>
   10752:	428b      	cmp	r3, r1
   10754:	d92d      	bls.n	107b2 <__udivmoddi4+0x2ae>
   10756:	3f02      	subs	r7, #2
   10758:	4429      	add	r1, r5
   1075a:	1acb      	subs	r3, r1, r3
   1075c:	b281      	uxth	r1, r0
   1075e:	fbb3 f0fe 	udiv	r0, r3, lr
   10762:	fb0e 3310 	mls	r3, lr, r0, r3
   10766:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1076a:	fb00 f308 	mul.w	r3, r0, r8
   1076e:	428b      	cmp	r3, r1
   10770:	d907      	bls.n	10782 <__udivmoddi4+0x27e>
   10772:	1869      	adds	r1, r5, r1
   10774:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   10778:	d217      	bcs.n	107aa <__udivmoddi4+0x2a6>
   1077a:	428b      	cmp	r3, r1
   1077c:	d915      	bls.n	107aa <__udivmoddi4+0x2a6>
   1077e:	3802      	subs	r0, #2
   10780:	4429      	add	r1, r5
   10782:	1ac9      	subs	r1, r1, r3
   10784:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   10788:	e73b      	b.n	10602 <__udivmoddi4+0xfe>
   1078a:	4637      	mov	r7, r6
   1078c:	4630      	mov	r0, r6
   1078e:	e709      	b.n	105a4 <__udivmoddi4+0xa0>
   10790:	4607      	mov	r7, r0
   10792:	e6e7      	b.n	10564 <__udivmoddi4+0x60>
   10794:	4618      	mov	r0, r3
   10796:	e6fb      	b.n	10590 <__udivmoddi4+0x8c>
   10798:	4541      	cmp	r1, r8
   1079a:	d2ab      	bcs.n	106f4 <__udivmoddi4+0x1f0>
   1079c:	ebb8 0a02 	subs.w	sl, r8, r2
   107a0:	eb69 020e 	sbc.w	r2, r9, lr
   107a4:	3801      	subs	r0, #1
   107a6:	4613      	mov	r3, r2
   107a8:	e7a4      	b.n	106f4 <__udivmoddi4+0x1f0>
   107aa:	4660      	mov	r0, ip
   107ac:	e7e9      	b.n	10782 <__udivmoddi4+0x27e>
   107ae:	4618      	mov	r0, r3
   107b0:	e795      	b.n	106de <__udivmoddi4+0x1da>
   107b2:	4667      	mov	r7, ip
   107b4:	e7d1      	b.n	1075a <__udivmoddi4+0x256>
   107b6:	4681      	mov	r9, r0
   107b8:	e77c      	b.n	106b4 <__udivmoddi4+0x1b0>
   107ba:	3802      	subs	r0, #2
   107bc:	442c      	add	r4, r5
   107be:	e747      	b.n	10650 <__udivmoddi4+0x14c>
   107c0:	f1ac 0c02 	sub.w	ip, ip, #2
   107c4:	442b      	add	r3, r5
   107c6:	e72f      	b.n	10628 <__udivmoddi4+0x124>
   107c8:	4638      	mov	r0, r7
   107ca:	e708      	b.n	105de <__udivmoddi4+0xda>
   107cc:	4637      	mov	r7, r6
   107ce:	e6e9      	b.n	105a4 <__udivmoddi4+0xa0>
   107d0:	69647541 	.word	0x69647541
   107d4:	6574206f 	.word	0x6574206f
   107d8:	73207473 	.word	0x73207473
   107dc:	74726174 	.word	0x74726174
   107e0:	0a0d2173 	.word	0x0a0d2173
   107e4:	0000000a 	.word	0x0000000a
   107e8:	65746e45 	.word	0x65746e45
   107ec:	6e692072 	.word	0x6e692072
   107f0:	6d206f74 	.word	0x6d206f74
   107f4:	6f726369 	.word	0x6f726369
   107f8:	6e6f6870 	.word	0x6e6f6870
   107fc:	61632065 	.word	0x61632065
   10800:	7262696c 	.word	0x7262696c
   10804:	6f697461 	.word	0x6f697461
   10808:	7473206e 	.word	0x7473206e
   1080c:	73757461 	.word	0x73757461
   10810:	000d0a2e 	.word	0x000d0a2e
   10814:	74697845 	.word	0x74697845
   10818:	6f726620 	.word	0x6f726620
   1081c:	696d206d 	.word	0x696d206d
   10820:	706f7263 	.word	0x706f7263
   10824:	656e6f68 	.word	0x656e6f68
   10828:	6c616320 	.word	0x6c616320
   1082c:	61726269 	.word	0x61726269
   10830:	6e6f6974 	.word	0x6e6f6974
   10834:	61747320 	.word	0x61747320
   10838:	2e737574 	.word	0x2e737574
   1083c:	000d0a0a 	.word	0x000d0a0a
   10840:	00007325 	.word	0x00007325
   10844:	00006425 	.word	0x00006425
   10848:	38257830 	.word	0x38257830
   1084c:	00000078 	.word	0x00000078
   10850:	00006625 	.word	0x00006625
   10854:	6c6f7041 	.word	0x6c6f7041
   10858:	20336f6c 	.word	0x20336f6c
   1085c:	73727542 	.word	0x73727542
   10860:	6f4d2074 	.word	0x6f4d2074
   10864:	69206564 	.word	0x69206564
   10868:	76412073 	.word	0x76412073
   1086c:	616c6961 	.word	0x616c6961
   10870:	0d656c62 	.word	0x0d656c62
   10874:	0000000a 	.word	0x0000000a
   10878:	6c6f7041 	.word	0x6c6f7041
   1087c:	20336f6c 	.word	0x20336f6c
   10880:	73727542 	.word	0x73727542
   10884:	6f4d2074 	.word	0x6f4d2074
   10888:	69206564 	.word	0x69206564
   1088c:	6f4e2073 	.word	0x6f4e2073
   10890:	76412074 	.word	0x76412074
   10894:	616c6961 	.word	0x616c6961
   10898:	0d656c62 	.word	0x0d656c62
   1089c:	0000000a 	.word	0x0000000a
   108a0:	6c696146 	.word	0x6c696146
   108a4:	74206465 	.word	0x74206465
   108a8:	6e49206f 	.word	0x6e49206f
   108ac:	61697469 	.word	0x61697469
   108b0:	657a696c 	.word	0x657a696c
   108b4:	726f6620 	.word	0x726f6620
   108b8:	72754220 	.word	0x72754220
   108bc:	4d207473 	.word	0x4d207473
   108c0:	2065646f 	.word	0x2065646f
   108c4:	7265706f 	.word	0x7265706f
   108c8:	6f697461 	.word	0x6f697461
   108cc:	000a0d6e 	.word	0x000a0d6e
   108d0:	6c6f7041 	.word	0x6c6f7041
   108d4:	20336f6c 	.word	0x20336f6c
   108d8:	7265706f 	.word	0x7265706f
   108dc:	6e697461 	.word	0x6e697461
   108e0:	6e692067 	.word	0x6e692067
   108e4:	72754220 	.word	0x72754220
   108e8:	4d207473 	.word	0x4d207473
   108ec:	2065646f 	.word	0x2065646f
   108f0:	4d363928 	.word	0x4d363928
   108f4:	0d297a48 	.word	0x0d297a48
   108f8:	0000000a 	.word	0x0000000a
   108fc:	6c696146 	.word	0x6c696146
   10900:	74206465 	.word	0x74206465
   10904:	6e45206f 	.word	0x6e45206f
   10908:	656c6261 	.word	0x656c6261
   1090c:	72754220 	.word	0x72754220
   10910:	4d207473 	.word	0x4d207473
   10914:	2065646f 	.word	0x2065646f
   10918:	7265706f 	.word	0x7265706f
   1091c:	6f697461 	.word	0x6f697461
   10920:	000a0d6e 	.word	0x000a0d6e
   10924:	20656854 	.word	0x20656854
   10928:	7466656c 	.word	0x7466656c
   1092c:	61686320 	.word	0x61686320
   10930:	6c656e6e 	.word	0x6c656e6e
   10934:	61656d20 	.word	0x61656d20
   10938:	6176206e 	.word	0x6176206e
   1093c:	3a65756c 	.word	0x3a65756c
   10940:	20662520 	.word	0x20662520
   10944:	20646e61 	.word	0x20646e61
   10948:	68676972 	.word	0x68676972
   1094c:	68632074 	.word	0x68632074
   10950:	656e6e61 	.word	0x656e6e61
   10954:	656d206c 	.word	0x656d206c
   10958:	76206e61 	.word	0x76206e61
   1095c:	65756c61 	.word	0x65756c61
   10960:	6625203a 	.word	0x6625203a
   10964:	0a0d202e 	.word	0x0a0d202e
   10968:	00000000 	.word	0x00000000
   1096c:	656b6154 	.word	0x656b6154
   10970:	67697220 	.word	0x67697220
   10974:	63207468 	.word	0x63207468
   10978:	6e6e6168 	.word	0x6e6e6168
   1097c:	61206c65 	.word	0x61206c65
   10980:	65722073 	.word	0x65722073
   10984:	65726566 	.word	0x65726566
   10988:	2e65636e 	.word	0x2e65636e
   1098c:	000a0d20 	.word	0x000a0d20
   10990:	20656874 	.word	0x20656874
   10994:	7466656c 	.word	0x7466656c
   10998:	61637320 	.word	0x61637320
   1099c:	3a72616c 	.word	0x3a72616c
   109a0:	20662520 	.word	0x20662520
   109a4:	20646e61 	.word	0x20646e61
   109a8:	20656874 	.word	0x20656874
   109ac:	68676972 	.word	0x68676972
   109b0:	63732074 	.word	0x63732074
   109b4:	72616c61 	.word	0x72616c61
   109b8:	6625203a 	.word	0x6625203a
   109bc:	0a0d202e 	.word	0x0a0d202e
   109c0:	00000000 	.word	0x00000000
   109c4:	656b6154 	.word	0x656b6154
   109c8:	66656c20 	.word	0x66656c20
   109cc:	68632074 	.word	0x68632074
   109d0:	656e6e61 	.word	0x656e6e61
   109d4:	7361206c 	.word	0x7361206c
   109d8:	66657220 	.word	0x66657220
   109dc:	6e657265 	.word	0x6e657265
   109e0:	202e6563 	.word	0x202e6563
   109e4:	00000a0d 	.word	0x00000a0d

000109e8 <g_AM_HAL_GPIO_DISABLE>:
   109e8:	00000003                                ....

000109ec <g_AM_HAL_GPIO_OUTPUT>:
   109ec:	00000403                                ....

000109f0 <g_AM_HAL_GPIO_TRISTATE>:
   109f0:	00000c03                                ....

000109f4 <g_ui8Inpen>:
   109f4:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   10a04:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   10a14:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   10a24:	00003130                                01..

00010a28 <g_ui8Bit76Capabilities>:
   10a28:	02800101 80010180 80800101 80808080     ................
   10a38:	80808080 80808008 01800180 80808080     ................
   10a48:	80808080 01800402 01010401 80808080     ................
   10a58:	00000101                                ....

00010a5c <g_ui8nCEpins>:
   10a5c:	02070707 00080802 01020202 01010101     ................
   10a6c:	01010101 01010101 01010101 01010101     ................
   10a7c:	01010101 08010101 01010008 01010101     ................
   10a8c:	00000101                                ....

00010a90 <g_ui8NCEtable>:
   10a90:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10aa0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10ab0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10ac0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10ad0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10ae0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10af0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10b00:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10b10:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10b20:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10b30:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10b40:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10b50:	32221202 43231303                       .."2..#C

00010b58 <g_SysRingBuffSetup>:
   10b58:	00000001 1000c18c 0000fa00              ............

00010b64 <g_deepsleep_button0>:
   10b64:	00001003                                ....

00010b68 <g_sBspUartConfig>:
   10b68:	0001c200 00000060 00000000 00000000     ....`...........
   10b78:	00000000 00000012 00000000 00000000     ................
	...

00010b90 <g_AM_BSP_GPIO_COM_UART_TX>:
   10b90:	00000000                                ....

00010b94 <g_AM_BSP_GPIO_COM_UART_RX>:
   10b94:	00000000                                ....

00010b98 <am_hal_cachectrl_defaults>:
   10b98:	00000308                                ....

00010b9c <g_am_hal_mcuctrl_flash_size>:
   10b9c:	00004000 00008000 00010000 00020000     .@..............
   10bac:	00040000 00080000 00100000 00200000     .............. .
	...

00010bdc <g_am_hal_mcuctrl_sram_size>:
   10bdc:	00004000 00008000 00010000 00020000     .@..............
   10bec:	00040000 00080000 00100000 00060000     ................
	...

00010c1c <am_hal_pwrctrl_peripheral_control>:
	...
   10c28:	00000001 00000004 00000004 00000002     ................
   10c38:	00000008 00000008 00000004 00000008     ................
   10c48:	00000008 00000008 00000008 00000008     ................
   10c58:	00000010 00000010 00000010 00000020     ............ ...
   10c68:	00000010 00000010 00000040 00000010     ........@.......
   10c78:	00000010 00000080 00000004 00000004     ................
   10c88:	00000100 00000004 00000004 00000200     ................
   10c98:	00000020 00000020 00000400 00000004      ... ...........
   10ca8:	00000004 00000800 00000040 00000040     ........@...@...
   10cb8:	00001000 00000080 00000080 00002000     ............. ..
   10cc8:	00000100 00000100                       ........
